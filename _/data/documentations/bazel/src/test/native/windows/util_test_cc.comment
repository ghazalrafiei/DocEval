['text':' Copyright 2017 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' replace','line_number':23,'multiline':False]['text':' function','line_number':24,'multiline':False]['text':' unique_ptr','line_number':25,'multiline':False]['text':' !defined(_WIN32) && !defined(__CYGWIN__)','line_number':32,'multiline':False]['text':' Using `MAX_PATH` - 4 instead of `MAX_PATH` to fix','line_number':41,'multiline':False]['text':' https://github.com/bazelbuild/bazel/issues/12310','line_number':42,'multiline':False]['text':' Retrieves TEST_TMPDIR as a shortened path. Result won't have a "\\?\" prefix.','line_number':45,'multiline':False]['text':' `size` accounts for the null-terminator','line_number':50,'multiline':False]['text':' Add "\\?\" prefix.','line_number':54,'multiline':False]['text':' Remove trailing '/' or '\' and replace all '/' with '\'.','line_number':57,'multiline':False]['text':' Convert to 8dot3 style short path.','line_number':63,'multiline':False]['text':' `size` accounts for the null-terminator','line_number':66,'multiline':False]['text':' Set the result, omit the "\\?\" prefix.','line_number':70,'multiline':False]['text':' Ensure that the result is shorter than `kMaxPath` and also has room for a','line_number':71,'multiline':False]['text':' backslash (1 wchar) and a single-letter executable name with .bat','line_number':72,'multiline':False]['text':' extension (5 wchars).','line_number':73,'multiline':False]['text':' If `success` is true, returns an empty string, otherwise an error message.','line_number':78,'multiline':False]['text':' The error message will have the format "Failed: operation(arg)" using the','line_number':79,'multiline':False]['text':' specified `operation` and `arg` strings.','line_number':80,'multiline':False]['text':' Creates a dummy file under `path`. `path` should NOT have a "\\?\" prefix.','line_number':86,'multiline':False]['text':' lpFileName ','line_number':90,'multiline':True]['text':' dwDesiredAccess ','line_number':91,'multiline':True]['text':' dwShareMode ','line_number':92,'multiline':True]['text':' lpSecurityAttributes ','line_number':93,'multiline':True]['text':' dwCreationDisposition ','line_number':94,'multiline':True]['text':' dwFlagsAndAttributes ','line_number':95,'multiline':True]['text':' hTemplateFile ','line_number':96,'multiline':True]['text':' Asserts that a dummy file under `path` can be created.','line_number':109,'multiline':False]['text':' This is a macro so the assertions will have the correct line number.','line_number':110,'multiline':False]['text':' const wstring& ','line_number':111,'multiline':True]['text':' Deletes a file under `path`. `path` should NOT have a "\\?\" prefix.','line_number':114,'multiline':False]['text':' Asserts that a file under `path` can be deleted.','line_number':120,'multiline':False]['text':' This is a macro so the assertions will have the correct line number.','line_number':121,'multiline':False]['text':' const wstring& ','line_number':122,'multiline':True]['text':' Creates a directory under `path`. `path` should NOT have a "\\?\" prefix.','line_number':125,'multiline':False]['text':' Asserts that a directory under `path` can be created.','line_number':132,'multiline':False]['text':' This is a macro so the assertions will have the correct line number.','line_number':133,'multiline':False]['text':' const wstring& ','line_number':134,'multiline':True]['text':' Deletes an empty directory under `path`.','line_number':137,'multiline':False]['text':' `path` should NOT have a "\\?\" prefix.','line_number':138,'multiline':False]['text':' Asserts that the empty directory under `path` can be deleted.','line_number':145,'multiline':False]['text':' This is a macro so the assertions will have the correct line number.','line_number':146,'multiline':False]['text':' const wstring& ','line_number':147,'multiline':True]['text':' Appends a file name segment with ".bat" extension to `result`.','line_number':150,'multiline':False]['text':' `length` specifies how long the segment may be, and it includes the "\" at','line_number':151,'multiline':False]['text':' the beginning. `length` must be in [6..13], so the shortest segment is','line_number':152,'multiline':False]['text':' "\a.bat", the longest is "\abcdefgh.bat".','line_number':153,'multiline':False]['text':' For example APPEND_FILE_SEGMENT(8, result) will append "\abc.bat" to','line_number':154,'multiline':False]['text':' `result`.','line_number':155,'multiline':False]['text':' This is a macro so the assertions will have the correct line number.','line_number':156,'multiline':False]['text':' size_t ','line_number':157,'multiline':True]['text':' wstring* ','line_number':157,'multiline':True]['text':' Creates subdirectories under `basedir` and sets `result_path` to the deepest.','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':' `basedir` should be a shortened path, without "\\?\" prefix.','line_number':166,'multiline':False]['text':' `result_path` will be also a short path under `basedir`.','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':' Every directory in `result_path` will be created. The entire length of this','line_number':169,'multiline':False]['text':' path will be exactly `kMaxPath` - 7 (not including null-terminator).','line_number':170,'multiline':False]['text':' Just by appending a file name segment between 6 and 8 characters long (i.e.','line_number':171,'multiline':False]['text':' "\a.bat", "\ab.bat", or "\abc.bat") the caller can obtain a path that is','line_number':172,'multiline':False]['text':' `kMaxPath` - 1 long, or `kMaxPath` long, or `kMaxPath` + 1 long,','line_number':173,'multiline':False]['text':' respectively, and cannot be shortened further.','line_number':174,'multiline':False]['text':' has room for suffix "\a.bat"','line_number':178,'multiline':False]['text':' If `remaining_len` is odd, make it even.','line_number':180,'multiline':False]['text':' Keep adding 2 chars long segments until we only have 6 chars left.','line_number':187,'multiline':False]['text':' Deletes `deepest_subdir` and all of its parents below `basedir`.','line_number':197,'multiline':False]['text':' `basedir` must be a prefix (ancestor) of `deepest_subdir`. Neither of them','line_number':198,'multiline':False]['text':' should have a "\\?\" prefix.','line_number':199,'multiline':False]['text':' Every subdirectory connecting `basedir` and `deepest_subdir` must be empty','line_number':200,'multiline':False]['text':' except for the single directory child connecting these two nodes. In other','line_number':201,'multiline':False]['text':' words it should be possible to remove all directories starting at','line_number':202,'multiline':False]['text':' `deepest_subdir` and walking up the tree until `basedir` is reached.','line_number':203,'multiline':False]['text':' `basedir` is NOT deleted and it doesn't need to be empty either.','line_number':204,'multiline':False]['text':' Assert that `deepest_subdir` starts with `basedir`.','line_number':207,'multiline':False]['text':' Make a mutable copy of `deepest_subdir`.','line_number':210,'multiline':False]['text':' Mark the end of the path. We'll keep setting the last directory separator','line_number':216,'multiline':False]['text':' to the null-terminator, thus walking up the directory tree.','line_number':217,'multiline':False]['text':' Walk up one level in the path.','line_number':222,'multiline':False]['text':' Asserts that `str` contains substring `substr`.','line_number':230,'multiline':False]['text':' This is a macro so the assertions will have the correct line number.','line_number':231,'multiline':False]['text':' const wstring& ','line_number':232,'multiline':True]['text':' const WCHAR* ','line_number':232,'multiline':True]['text':' This is a macro so the assertions will have the correct line number.','line_number':238,'multiline':False]['text':' const WCHAR* ','line_number':239,'multiline':True]['text':' const WCHAR* ','line_number':240,'multiline':True]['text':' This is a macro so the assertions will have the correct line number.','line_number':247,'multiline':False]['text':' const WCHAR* ','line_number':248,'multiline':True]['text':' const wstring& ','line_number':249,'multiline':True]['text':' Relative paths are fine, they are absolutized.','line_number':271,'multiline':False]['text':' Assert that we have enough room to append a file name that is just short','line_number':285,'multiline':False]['text':' enough to fit into `kMaxPath` - 1, or one that's just long enough to make','line_number':286,'multiline':False]['text':' the whole path `kMaxPath` long or longer.','line_number':287,'multiline':False]['text':' When i=0 then `wfilename` is `kMaxPath` - 1 long, so','line_number':298,'multiline':False]['text':' `AsExecutablePathForCreateProcess` will not attempt to shorten it, and','line_number':299,'multiline':False]['text':' so it also won't notice that the file doesn't exist. If however we pass','line_number':300,'multiline':False]['text':' a non-existent path to CreateProcessA, then it'll fail, so we'll find out','line_number':301,'multiline':False]['text':' about this error in production code.','line_number':302,'multiline':False]['text':' When i>0 then `wfilename` is at least `kMaxPath` long, so','line_number':303,'multiline':False]['text':' `AsExecutablePathForCreateProcess` will attempt to shorten it, but','line_number':304,'multiline':False]['text':' because the file doesn't yet exist, the shortening attempt will fail.','line_number':305,'multiline':False]['text':' Create the file, now we should be able to shorten it when i=0, but not','line_number':312,'multiline':False]['text':' otherwise.','line_number':313,'multiline':False]['text':' The wfilename was short enough.','line_number':316,'multiline':False]['text':' The wfilename was too long to begin with, and it was impossible to','line_number':320,'multiline':False]['text':' shorten any of the segments (since we deliberately created them that','line_number':321,'multiline':False]['text':' way), so shortening failed.','line_number':322,'multiline':False]['text':' Finally construct a path that can and will be shortened. Just walk up a few','line_number':328,'multiline':False]['text':' levels in `short_root` and create a long file name that can be shortened.','line_number':329,'multiline':False]['text':' Attempt to shorten. It will fail because the file doesn't exist yet.','line_number':340,'multiline':False]['text':' Create the file so shortening will succeed.','line_number':343,'multiline':False]['text':' namespace windows','line_number':352,'multiline':False]['text':' namespace bazel','line_number':353,'multiline':False]