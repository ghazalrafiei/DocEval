['text':'!/bin/bash','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' Test sandboxing spawn strategy','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' Load the test setup defined in the parent directory','line_number':22,'multiline':False]['text':' Expecting something like: uid=485038(ruperts) ...','line_number':59,'multiline':False]['text':' SIGNAL_BASE + SIGABRT = 128 + 6','line_number':80,'multiline':False]['text':' Run the sandbox with a child that catches SIGTERM and exits successfully,','line_number':84,'multiline':False]['text':' and a kill delay that ensures it gets the chance to see the signal.','line_number':85,'multiline':False]['text':' Synchronize on the child having registered its signal handler.','line_number':93,'multiline':False]['text':' Send SIGTERM to the sandbox.','line_number':96,'multiline':False]['text':' The sandbox should exit successfully: if the child says it succeeded, who','line_number':99,'multiline':False]['text':' are we to disagree?','line_number':100,'multiline':False]['text':' Run the sandbox under a short timeout with a child that catches signals,','line_number':110,'multiline':False]['text':' waits while, then exits with a canned code. Use a kill delay that gives it a','line_number':111,'multiline':False]['text':' chance to do so.','line_number':112,'multiline':False]['text':' Assuming the trap command was run before the timeout, the "clean shutdown"','line_number':118,'multiline':False]['text':' code should have been allowed to run (returning 17). Otherwise it should','line_number':119,'multiline':False]['text':' have died immediately with SIGTERM.','line_number':120,'multiline':False]['text':' Run the sandbox with a child that ignores SIGTERM, and with both a short','line_number':126,'multiline':False]['text':' timeout and a short kill delay.','line_number':127,'multiline':False]['text':' If the trap command was run before the timeout we should have seen SIGKILL','line_number':131,'multiline':False]['text':' (after the kill delay); otherwise SIGTERM should have taken out the child.','line_number':132,'multiline':False]['text':' Run the sandbox with a child whose SIGTERM handler exits with a canned error','line_number':138,'multiline':False]['text':' code.','line_number':139,'multiline':False]['text':' Synchronize on the child having registered its signal handler.','line_number':148,'multiline':False]['text':' Send SIGINT to the sandbox.','line_number':151,'multiline':False]['text':' That should be converted to SIGTERM by the sandbox, causing the child's','line_number':154,'multiline':False]['text':' handler to run.','line_number':155,'multiline':False]['text':' SIGNAL_BASE + SIGTERM = 128 + 9','line_number':157,'multiline':False]['text':' mount a directory to a customized path inside the sandbox','line_number':190,'multiline':False]['text':' mount a directory to the same path inside the sanxbox','line_number':192,'multiline':False]['text':' mount a file to a customized path inside the sandbox','line_number':194,'multiline':False]['text':' mount a directory to a customized path inside the sandbox','line_number':206,'multiline':False]['text':' mount a directory to a customized path inside the sandbox','line_number':217,'multiline':False]['text':' mount a directory to a customized path inside the sandbox','line_number':230,'multiline':False]['text':' mount a directory to a customized path inside the sandbox','line_number':241,'multiline':False]['text':' mount a directory to a customized path inside the sandbox','line_number':253,'multiline':False]['text':' mount a new source directory to the same target, which will overwrite the previous source path','line_number':255,'multiline':False]['text':' If /tmp is not writable on the host, it won't be inside the sandbox.','line_number':268,'multiline':False]['text':' If /dev/shm is not writable on the host, it won't be inside the sandbox.','line_number':276,'multiline':False]['text':' /dev/shm is often a symlink to /run/shm, thus we use readlink to get the canonical path.','line_number':279,'multiline':False]['text':' Sandboxed process will be terminated after 100 seconds if not already dead.','line_number':299,'multiline':False]['text':' Run the sandbox with a child that lets us know it saw SIGTERM and then exits','line_number':336,'multiline':False]['text':' gracefully. Use a kill delay that implies it will have a chance to see it.','line_number':337,'multiline':False]['text':' Synchronize on the child having registered its signal handler.','line_number':345,'multiline':False]['text':' Send SIGTERM to the sandbox, which should pass it on to the child.','line_number':348,'multiline':False]['text':' The sandbox should soon exit with the child's exit code.','line_number':351,'multiline':False]['text':' Run the sandbox with a child that ignores SIGTERM (the polite request to','line_number':357,'multiline':False]['text':' shut down that we send below) and SIGALRM (which we use internally and which','line_number':358,'multiline':False]['text':' was previously erroneously forwarded to the child).','line_number':359,'multiline':False]['text':'','line_number':360,'multiline':False]['text':' Set a kill delay of 2 seconds.','line_number':361,'multiline':False]['text':' Synchronize on the child having registered its signal handler.','line_number':366,'multiline':False]['text':' Send SIGTERM to the sandbox to ask it nicely to shut down.','line_number':369,'multiline':False]['text':' The sandbox should soon exit with a code that indicates it was due to','line_number':372,'multiline':False]['text':' SIGKILL, from exceeding the kill delay.','line_number':373,'multiline':False]['text':' SIGNAL_BASE + SIGTERM = 128 + 9','line_number':375,'multiline':False]['text':' Run the sandbox with a child that ignores SIGTERM (the polite request to','line_number':379,'multiline':False]['text':' shut down that we send below) and SIGALRM (which we use internally and which','line_number':380,'multiline':False]['text':' was previously erroneously forwarded to the child).','line_number':381,'multiline':False]['text':'','line_number':382,'multiline':False]['text':' Unlike in the test above, don't enable a kill delay.','line_number':383,'multiline':False]['text':' Synchronize on the child having registered its signal handler.','line_number':388,'multiline':False]['text':' Send SIGTERM to the sandbox to ask it nicely to shut down.','line_number':391,'multiline':False]['text':' The sandbox should soon exit with a code that indicates it was due to','line_number':394,'multiline':False]['text':' SIGKILL, from exceeding the kill delay (of zero).','line_number':395,'multiline':False]['text':' SIGNAL_BASE + SIGTERM = 128 + 9','line_number':397,'multiline':False]['text':' Tests that using cgruops v1 with linux_sandbox.cc works, if it's available','line_number':400,'multiline':False]['text':'!/bin/bash','line_number':418,'multiline':False]['text':' Runs the sandbox with appropriate cgroups setup','line_number':420,'multiline':False]['text':' Tests that using cgruops v2 with linux_sandbox.cc works, if it's available','line_number':444,'multiline':False]['text':'!/bin/bash','line_number':455,'multiline':False]['text':' Runs the sandbox with appropriate cgroups setup','line_number':457,'multiline':False]['text':' The test shouldn't fail if the environment doesn't support running it.','line_number':486,'multiline':False]