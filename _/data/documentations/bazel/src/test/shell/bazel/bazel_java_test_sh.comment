['text':'!/bin/bash','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' Tests the examples provided in Bazel','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' --- begin runfiles.bash initialization ---','line_number':20,'multiline':False]['text':' --- end runfiles.bash initialization ---','line_number':39,'multiline':False]['text':' -gt 0 ]]; then','line_number':86,'multiline':False]['text':' -gt 0 ]]; then','line_number':93,'multiline':False]['text':' java_library / java_import','line_number':153,'multiline':False]['text':' exports / runtime_deps','line_number':154,'multiline':False]['text':' By default, Java rules use worker strategy','line_number':307,'multiline':False]['text':' Java rules defaulting to worker do not override the strategy specified on','line_number':315,'multiline':False]['text':' the cli','line_number':316,'multiline':False]['text':' This test verifies that jars named by deploy_env are excluded from the final','line_number':336,'multiline':False]['text':' deploy jar.','line_number':337,'multiline':False]['text':' Overwrite java/main to add deploy_env customizations and remove the','line_number':341,'multiline':False]['text':' compile-time hello_library dependency.','line_number':342,'multiline':False]['text':' Runfiles is disabled by default on Windows, but we can test it on Unix by','line_number':544,'multiline':False]['text':' adding flag --enable_runfiles=0','line_number':545,'multiline':False]['text':' Trigger an error-prone error by comparing two arrays via #equals().','line_number':555,'multiline':False]['text':' Trigger an error-prone error by comparing two arrays via #equals().','line_number':573,'multiline':False]['text':' Disable error-prone for this target, though.','line_number':584,'multiline':False]['text':' With explicit_java_test_deps, we fail without explicitly specifying the JUnit deps.','line_number':977,'multiline':False]['text':' We start passing again with explicit_java_test_deps once we explicitly specify the deps.','line_number':987,'multiline':False]['text':' This test builds a simple java deploy jar using remote singlejar and ijar','line_number':1502,'multiline':False]['text':' targets which compile them from source.','line_number':1503,'multiline':False]['text':'!/bin/bash','line_number':1568,'multiline':False]['text':' Build and run a java_binary that calls a C++ function through JNI.','line_number':1583,'multiline':False]['text':' This test exercises the built-in @bazel_tools//tools/jdk:jni target.','line_number':1584,'multiline':False]['text':'','line_number':1585,'multiline':False]['text':' The java_binary wrapper script specifies -Djava.library.path=$runfiles/test,','line_number':1586,'multiline':False]['text':' and the Java program expects to find a DSO there---except on MS Windows,','line_number':1587,'multiline':False]['text':' which lacks support for symbolic links. Really there needs to','line_number':1588,'multiline':False]['text':' be a cleaner mechanism for finding and loading the JNI library (and better','line_number':1589,'multiline':False]['text':' hygiene around the library namespace). By contrast, Blaze links all the','line_number':1590,'multiline':False]['text':' native code and the JVM into a single executable, which is an elegant solution.','line_number':1591,'multiline':False]['text':'','line_number':1592,'multiline':False]['text':' Skip on MS Windows, as Bazel does not create a runfiles symlink tree.','line_number':1594,'multiline':False]['text':' (MSYS_NT is the system name reported by MinGW uname.)','line_number':1595,'multiline':False]['text':' TODO(adonovan): make this work.','line_number':1596,'multiline':False]['text':' Skip on Darwin, as System.loadLibrary looks for a file named','line_number':1599,'multiline':False]['text':' .dylib, not .so, and that's not what the file is called.','line_number':1600,'multiline':False]['text':' TODO(adonovan): make this just work.','line_number':1601,'multiline':False]['text':'include <jni.h>','line_number':1630,'multiline':False]['text':'include <stdio.h>','line_number':1631,'multiline':False]['text':' helpful for debugging','line_number':1638,'multiline':False]['text':' Regression test for https://github.com/bazelbuild/bazel/issues/12605','line_number':1644,'multiline':False]