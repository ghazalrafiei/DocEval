['text':'!/bin/bash','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' Load the test setup defined in the parent directory','line_number':19,'multiline':False]['text':' We use hardlinks to this file as a communication mechanism between','line_number':27,'multiline':False]['text':' test runs.','line_number':28,'multiline':False]['text':'!/bin/sh','line_number':34,'multiline':False]['text':' hard link','line_number':35,'multiline':False]['text':' Make sure other test runs have started too.','line_number':39,'multiline':False]['text':' 4 links = 3 jobs + ${tmp}/counter','line_number':43,'multiline':False]['text':' Ensure that we don't remove before other runs have inspected the file.','line_number':49,'multiline':False]['text':' We have to use --spawn_strategy=standalone, because the test actions','line_number':66,'multiline':False]['text':' communicate with each other via a hard-linked file.','line_number':67,'multiline':False]['text':' 3 CPUs, so no more than 3 tests in parallel.','line_number':70,'multiline':False]['text':' 3 local test jobs, so no more than 3 tests in parallel.','line_number':78,'multiline':False]['text':' TODO(#2228): Re-enable when the tmpdir creation is fixed.','line_number':84,'multiline':False]['text':'!/bin/sh','line_number':88,'multiline':False]['text':' If we run `bazel test //src/test/shell/bazel:bazel_test_test` on Linux, it','line_number':106,'multiline':False]['text':' will be sandboxed and this "inner test" creating /foo/bar will actually','line_number':107,'multiline':False]['text':' succeed. If we run it on OS X (or in general without sandboxing enabled),','line_number':108,'multiline':False]['text':' it will fail to create /foo/bar, since obviously we don't have write','line_number':109,'multiline':False]['text':' permissions.','line_number':110,'multiline':False]['text':' We are in a sandbox.','line_number':113,'multiline':False]['text':' We are not sandboxed.','line_number':116,'multiline':False]['text':'!/bin/sh','line_number':128,'multiline':False]['text':' Usage: runfiles_merges_runfiles_env_vars overridden unchanged','line_number':155,'multiline':False]['text':'!/bin/sh','line_number':165,'multiline':False]['text':'!/bin/sh','line_number':191,'multiline':False]['text':'!/bin/sh','line_number':197,'multiline':False]['text':'!/bin/sh','line_number':233,'multiline':False]['text':'!/bin/sh','line_number':239,'multiline':False]['text':' This test uses "--ignore_all_rc_files" since outside .bazelrc files can pollute','line_number':257,'multiline':False]['text':' this environment. Just "--bazelrc=/dev/null" is not sufficient to fix.','line_number':258,'multiline':False]['text':'!/bin/sh','line_number':263,'multiline':False]['text':'!/bin/sh','line_number':270,'multiline':False]['text':' We don't just use the local PATH, but use the test's PATH, which is more restrictive.','line_number':275,'multiline':False]['text':' With --action_env=PATH, the local PATH is forwarded to the test.','line_number':279,'multiline':False]['text':' We need to forward the PATH to make it work.','line_number':284,'multiline':False]['text':' Make sure it still works if --run_under includes an arg.','line_number':289,'multiline':False]['text':' Make sure absolute path works also','line_number':295,'multiline':False]['text':' Set up the external repo.','line_number':302,'multiline':False]['text':'!/bin/sh','line_number':311,'multiline':False]['text':' Set up the main repo.','line_number':317,'multiline':False]['text':'!/bin/sh','line_number':333,'multiline':False]['text':'!/bin/sh','line_number':351,'multiline':False]['text':' Makes sure that runs_per_test_detects_flakes detects FLAKY if any of the 5','line_number':373,'multiline':False]['text':' attempts passes (which should cover all cases of being picky about the','line_number':374,'multiline':False]['text':' first/last/etc ones only being counted).','line_number':375,'multiline':False]['text':' We do this using an un-sandboxed test which keeps track of how many runs there','line_number':376,'multiline':False]['text':' have been using files which are undeclared inputs/outputs.','line_number':377,'multiline':False]['text':' Directory for counters','line_number':379,'multiline':False]['text':' This file holds the number of the next run','line_number':385,'multiline':False]['text':'!/bin/sh','line_number':388,'multiline':False]['text':' increment the hidden state','line_number':391,'multiline':False]['text':' succeed exactly once.','line_number':394,'multiline':False]['text':' Tests that the test.xml is extracted from the sandbox correctly.','line_number':411,'multiline':False]['text':'!/bin/sh','line_number':416,'multiline':False]['text':'!/bin/bash','line_number':440,'multiline':False]['text':' Invalid XML character','line_number':443,'multiline':False]['text':' Invalid UTF-8 characters','line_number':445,'multiline':False]['text':' ]]> needs escaping','line_number':448,'multiline':False]['text':' "xmltest" is the first line of output from the test.sh script.','line_number':474,'multiline':False]['text':' The new script does not convert exit codes to signals.','line_number':490,'multiline':False]['text':' When using --noexperimental_split_xml_generation, the output of the','line_number':493,'multiline':False]['text':' subprocesses goes into the xml file, while','line_number':494,'multiline':False]['text':' --experimental_split_xml_generation inlines the entire test log into','line_number':495,'multiline':False]['text':' the xml file, which includes a header generated by test-setup.sh;','line_number':496,'multiline':False]['text':' the header starts with "exec ${PAGER:-/usr/bin/less}".','line_number':497,'multiline':False]['text':' This is different from above, since we're using a SIGTERM trap to output','line_number':500,'multiline':False]['text':' timing information.','line_number':501,'multiline':False]['text':' Tests that the test.xml and test.log are correct and the test does not','line_number':506,'multiline':False]['text':' hang when the test launches a subprocess.','line_number':507,'multiline':False]['text':' Check that fallback xml output is correctly generated for sharded tests.','line_number':541,'multiline':False]['text':'!/bin/sh','line_number':546,'multiline':False]['text':' Simple test that we actually enforce testonly, see #1923.','line_number':573,'multiline':False]['text':'!/bin/sh','line_number':600,'multiline':False]['text':'!/bin/sh','line_number':604,'multiline':False]['text':' This test uses "--ignore_all_rc_files" since outside .bazelrc files can pollute','line_number':677,'multiline':False]['text':' this environment. Just "--bazelrc=/dev/null" is not sufficient to fix.','line_number':678,'multiline':False]['text':'!/bin/sh','line_number':688,'multiline':False]['text':'!/bin/sh','line_number':697,'multiline':False]['text':'!/bin/sh','line_number':702,'multiline':False]['text':' The next line ensures that the test passes in IPv6-only networks.','line_number':708,'multiline':False]['text':' We do not use sandboxing so we can trick to be deterministically flaky','line_number':711,'multiline':False]['text':'!/bin/sh','line_number':753,'multiline':False]['text':' Newlines are useful around diffs. This helps us get them in bash strings.','line_number':780,'multiline':False]['text':' Check that the undeclared outputs zip file exists.','line_number':783,'multiline':False]['text':' Check that the original undeclared outputs no longer exist.','line_number':786,'multiline':False]['text':' Check the contents of the zip file.','line_number':791,'multiline':False]['text':' Newlines are useful around diffs. This helps us get them in bash strings.','line_number':813,'multiline':False]['text':' Check that the undeclared outputs zip file does not exist.','line_number':816,'multiline':False]['text':' Check that the undeclared outputs exist.','line_number':819,'multiline':False]['text':' Check the contents of the undeclared outputs.','line_number':823,'multiline':False]['text':' Newlines are useful around diffs. This helps us get them in bash strings.','line_number':881,'multiline':False]['text':' Check that the undeclared outputs manifest exists and that it has the','line_number':884,'multiline':False]['text':' correct contents.','line_number':885,'multiline':False]['text':'!/bin/sh','line_number':899,'multiline':False]['text':' Newlines are useful around diffs. This helps us get them in bash strings.','line_number':917,'multiline':False]['text':' Check that the undeclared outputs manifest exists and that it has the','line_number':920,'multiline':False]['text':' correct contents.','line_number':921,'multiline':False]['text':'!/bin/sh','line_number':935,'multiline':False]['text':' Check that the undeclared outputs directory doesn't exist.','line_number':951,'multiline':False]['text':' Check that the undeclared outputs manifest directory doesn't exist.','line_number':955,'multiline':False]