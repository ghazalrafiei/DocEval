['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* Tests {@link OptionsParser}. ','line_number':40,'multiline':True]['text':'* Dummy comment (linter suppression) ','line_number':44,'multiline':True]['text':'* Subclass of an options class. ','line_number':172,'multiline':True]['text':'*
   * Example with empty to null string converter
   ','line_number':185,'multiline':True]['text':'*
   * Example with internal options
   ','line_number':199,'multiline':True]['text':'*
   * A converter that defaults to null if the input is the empty string
   ','line_number':280,'multiline':True]['text':' fallbackData= ','line_number':327,'multiline':True]['text':' fallbackData= ','line_number':348,'multiline':True]['text':' fallbackData= ','line_number':374,'multiline':True]['text':' This is a test showcasing the lack of functionality for retrieving parsed options at a','line_number':387,'multiline':False]['text':' superclass type class type. If there's a need for this functionality, we can add it later.','line_number':388,'multiline':False]['text':' Override --boom value to the empty string','line_number':494,'multiline':False]['text':' The converted value is intentionally null since boom uses the EmptyToNullStringConverter','line_number':497,'multiline':False]['text':' Not printed in usage messages!','line_number':505,'multiline':False]['text':' With no call to parse(), all options are at default values, and there's','line_number':523,'multiline':False]['text':' no reside.','line_number':524,'multiline':False]['text':' no change','line_number':542,'multiline':False]['text':' updated','line_number':544,'multiline':False]['text':' --bang is the same as --bing except that it has a "converter" specified.','line_number':556,'multiline':False]['text':' This test also tests option values with embedded commas and spaces.','line_number':557,'multiline':False]['text':' the default!','line_number':573,'multiline':False]['text':' second call takes precedence','line_number':594,'multiline':False]['text':' Regression test for a subtle bug!  The toString of each options interface','line_number':599,'multiline':False]['text':' instance was printing out key=value pairs for all flags in the','line_number':600,'multiline':False]['text':' OptionsParser, not just those belonging to the specific interface type.','line_number':601,'multiline':False]['text':' Regression test for another subtle bug!  The toString was printing all the','line_number':626,'multiline':False]['text':' explicitly-specified options, even if they were at their default values,','line_number':627,'multiline':False]['text':' causing toString equivalence to diverge from equals().','line_number':628,'multiline':False]['text':' Regression test for yet another subtle bug!  The inherited options weren't','line_number':649,'multiline':False]['text':' being printed by toString.  One day, a real rain will come and wash all','line_number':650,'multiline':False]['text':' this scummy code off the streets.','line_number':651,'multiline':False]['text':' Tests for new default value override mechanism','line_number':672,'multiline':False]['text':' Expected error. ','line_number':815,'multiline':True]['text':' Expected error. ','line_number':839,'multiline':True]['text':'* ExpansionOptions ','line_number':845,'multiline':True]['text':' In order to have access to the ParsedOptionDescription tracked by the value of 'underlying'','line_number':893,'multiline':False]['text':' we have to know that this option is a "single valued" option.','line_number':894,'multiline':False]['text':' The expansion option overrides the explicit option, but it is the same value, so expect','line_number':948,'multiline':False]['text':' no warning.','line_number':949,'multiline':False]['text':'* ExpansionOptions to allow-multiple values. ','line_number':953,'multiline':True]['text':'*
   * Makes sure the expansion options are expanded in the right order if they affect flags that
   * allow multiples.
   ','line_number':972,'multiline':True]['text':' Implicit requirements don't get listed as canonical. Check that this claims to be empty,','line_number':1179,'multiline':False]['text':' which tells us that the option instance is correctly tracking that is originated as an','line_number':1180,'multiline':False]['text':' implicit requirement.','line_number':1181,'multiline':False]['text':'*
   * Options for testing the behavior of canonicalization when an option implicitly requires a
   * repeatable option.
   ','line_number':1187,'multiline':True]['text':' Implicit requirements don't get listed as canonical. Check that this excludes the implicit','line_number':1238,'multiline':False]['text':' value, but still tracks the explicit one.','line_number':1239,'multiline':False]['text':' Implicit requirements don't get listed as canonical. Check that this excludes the implicit','line_number':1266,'multiline':False]['text':' value, leaving behind no mention of second.','line_number':1267,'multiline':False]['text':' This test is here to make sure that nobody accidentally changes the','line_number':1465,'multiline':False]['text':' order of the enum values and breaks the implicit assumptions elsewhere','line_number':1466,'multiline':False]['text':' in the code.','line_number':1467,'multiline':False]['text':' All options in IntrospectionExample are single-valued options, and so have a 1:1 relationship','line_number':1633,'multiline':False]['text':' with the --flag=value option instance they came from (if any).','line_number':1634,'multiline':False]['text':' Regression tests for bug:','line_number':1665,'multiline':False]['text':' "--option from blazerc unexpectedly overrides --option from command line"','line_number':1666,'multiline':False]['text':' e's requirement overrides the explicit "a" here, so the "a" value is not in the canonical','line_number':1894,'multiline':False]['text':' form - the effective value is implied and the overridden value is lost.','line_number':1895,'multiline':False]['text':' f requires a value of b, that is absent because it is implied.','line_number':1913,'multiline':False]['text':'*
   * Check that all forms of boolean flags are canonicalizes to the same form.
   *
   * The list of accepted values is from
   * {@link com.google.devtools.common.options.Converters.BooleanConverter}, and the value-less
   * --[no] form is controlled by {@link OptionsParserImpl#identifyOptionAndPossibleArgument}.
   ','line_number':1930,'multiline':True]['text':' Using old option name should cause a warning','line_number':2022,'multiline':False]['text':' Should also work by its new name.','line_number':2027,'multiline':False]['text':' Should be no warnings if the new name is used.','line_number':2032,'multiline':False]['text':' Using old option name should cause a warning','line_number':2042,'multiline':False]['text':' Using old option name should cause a warning.','line_number':2060,'multiline':False]['text':' Should be no warnings if the new name is used.','line_number':2069,'multiline':False]['text':' Using old option name should cause a warning.','line_number':2079,'multiline':False]['text':' Should be no warnings if the new name is used.','line_number':2088,'multiline':False]['text':' Using old option name should cause a warning.','line_number':2098,'multiline':False]['text':' Should be no warnings if the new name is used.','line_number':2107,'multiline':False]['text':' Using old option name should cause a warning.','line_number':2117,'multiline':False]['text':' Should be no warnings if the new name is used.','line_number':2126,'multiline':False]['text':' Using old option name should cause a single warning even if the old name was specified','line_number':2136,'multiline':False]['text':' multiple times.','line_number':2137,'multiline':False]['text':' Using old option name should cause a warning even when overridden by new name.','line_number':2149,'multiline':False]['text':' Using old option name should not cause a warning','line_number':2173,'multiline':False]['text':'* Dummy options that declares it uses only core types. ','line_number':2199,'multiline':True]['text':'* Dummy options that does not declare using only core types. ','line_number':2219,'multiline':True]['text':'* Dummy options that incorrectly claims to use only core types. ','line_number':2230,'multiline':True]['text':'* Dummy unsafe type. ','line_number':2233,'multiline':True]['text':'* Converter for Foo. ','line_number':2238,'multiline':True]['text':'* Dummy options that is unsafe for @UsesOnlyCoreTypes but doesn't use the annotation. ','line_number':2263,'multiline':True]['text':'*
   * Dummy options that illegally advertises @UsesOnlyCoreTypes, when its direct fields are fine but
   * its inherited fields are not.
   ','line_number':2275,'multiline':True]['text':'* Dummy options for testing getHelpCompletion() and visitOptions(). ','line_number':2324,'multiline':True]['text':'implicitDependent=','line_number':2414,'multiline':True]['text':'expandedFrom=','line_number':2415,'multiline':True]['text':'implicitDependent=','line_number':2436,'multiline':True]['text':'expandedFrom=','line_number':2437,'multiline':True]['text':'conversionContext=','line_number':2484,'multiline':True]['text':'implicitDependent=','line_number':2486,'multiline':True]['text':'expandedFrom=','line_number':2486,'multiline':True]['text':'conversionContext=','line_number':2513,'multiline':True]['text':'implicitDependent=','line_number':2515,'multiline':True]['text':'expandedFrom=','line_number':2515,'multiline':True]['text':'implicitDependent=','line_number':2593,'multiline':True]['text':'expandedFrom=','line_number':2593,'multiline':True]