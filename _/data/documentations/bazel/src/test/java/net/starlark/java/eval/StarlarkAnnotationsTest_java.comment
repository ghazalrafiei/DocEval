['text':' Copyright 2016 The Bazel Authors. All Rights Reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* Test Starlark annotations and utilities. ','line_number':28,'multiline':True]['text':'* MockClassA ','line_number':32,'multiline':True]['text':'* MockInterfaceB1 ','line_number':44,'multiline':True]['text':'* MockInterfaceB2 ','line_number':57,'multiline':True]['text':'* MockClassC ','line_number':67,'multiline':True]['text':'* MockClassD ','line_number':82,'multiline':True]['text':'*
   * A mock class that implements two unrelated module interfaces. This is invalid as the Starlark
   * type of such an object is ambiguous.
   ','line_number':89,'multiline':True]['text':'* ClassAModule test class ','line_number':105,'multiline':True]['text':'* ExtendsClassA test class ','line_number':109,'multiline':True]['text':'* InterfaceBModule test interface ','line_number':112,'multiline':True]['text':'* ExtendsInterfaceB test interface ','line_number':116,'multiline':True]['text':'*
   * A mock class which has two transitive superclasses ({@link ClassAModule} and {@link
   * InterfaceBModule})) which are unrelated modules. This is invalid as the Starlark type of such
   * an object is ambiguous.
   *
   * <p>In other words: AmbiguousClass -> ClassAModule AmbiguousClass -> InterfaceBModule ... but
   * ClassAModule and InterfaceBModule have no relation.
   ','line_number':119,'multiline':True]['text':'* SubclassOfBoth test interface ','line_number':129,'multiline':True]['text':'*
   * A mock class similar to {@link AmbiugousClass} in that it has two separate superclass-paths to
   * Starlark modules, but is resolvable.
   *
   * <p>Concretely: UnambiguousClass -> SubclassOfBoth UnambiguousClass -> InterfaceBModule
   * SubclassOfBoth -> InterfaceBModule
   *
   * <p>... so UnambiguousClass is of type SubclassOfBoth.
   ','line_number':133,'multiline':True]['text':'* MockClassZ ','line_number':144,'multiline':True]['text':' The tests for getStarlarkBuiltin() double as tests for getParentWithStarlarkBuiltin(),','line_number':148,'multiline':False]['text':' since they share an implementation.','line_number':149,'multiline':False]['text':' Normal case.','line_number':153,'multiline':False]['text':' Subclass's annotation is used.','line_number':164,'multiline':False]['text':' Falls back on superclass's annotation.','line_number':175,'multiline':False]['text':' Doesn't exist.','line_number':186,'multiline':False]['text':' Normal case. Ensure two-arg form is consistent with one-arg form.','line_number':218,'multiline':False]['text':' Subclass's annotation is used.','line_number':230,'multiline':False]['text':' Falls back on superclass's annotation. Superclass takes precedence over interface.','line_number':239,'multiline':False]['text':' Ensure that when passing superclass in directly, we bypass subclass's annotation.','line_number':248,'multiline':False]['text':' Null result when no annotation present...','line_number':257,'multiline':False]['text':' ... including when it's only present in a subclass that was bypassed...','line_number':262,'multiline':False]['text':' ... or when the method itself is only in the subclass that was bypassed.','line_number':267,'multiline':False]['text':' Search through parent interfaces. First interface takes priority.','line_number':275,'multiline':False]['text':' Make sure both are still traversed.','line_number':281,'multiline':False]