['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' static_assert','line_number':28,'multiline':False]['text':' CancelIoEx only cancels I/O operations in the current process.','line_number':89,'multiline':False]['text':' https://msdn.microsoft.com/en-us/library/windows/desktop/aa363792(v=vs.85).aspx','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':' Therefore if this process bequested `handle_` to a child process, we','line_number':92,'multiline':False]['text':' cannot cancel I/O in the child process.','line_number':93,'multiline':False]['text':' Check if either the other end closed the pipe or we did it with','line_number':109,'multiline':False]['text':' NativeOutputStream.Close() . In the latter case, we'll get a "system','line_number':110,'multiline':False]['text':' call interrupted" error.','line_number':111,'multiline':False]['text':' Check if either the other end closed the pipe or we did it with','line_number':146,'multiline':False]['text':' NativeOutputStream.Close() . In the latter case, we'll get a "system','line_number':147,'multiline':False]['text':' call interrupted" error.','line_number':148,'multiline':False]['text':' End of file.','line_number':150,'multiline':False]['text':' Return the last error as a human-readable string and clear it.','line_number':166,'multiline':False]['text':' Standard file handles are closed even if the process was successfully','line_number':214,'multiline':False]['text':' created. If this was not so, operations on these file handles would not','line_number':215,'multiline':False]['text':' return immediately if the process is terminated.','line_number':216,'multiline':False]['text':' Therefore we make these handles auto-closing (by using AutoHandle).','line_number':217,'multiline':False]['text':' Set up childs stdin pipe.','line_number':242,'multiline':False]['text':' "Our" end of the pipe must not be inherited by the child process','line_number':254,'multiline':False]['text':' lpFileName ','line_number':267,'multiline':True]['text':' dwDesiredAccess ','line_number':268,'multiline':True]['text':' Must share for reading, otherwise symlink-following file existence','line_number':269,'multiline':False]['text':' checks (e.g. java.nio.file.Files.exists()) fail.','line_number':270,'multiline':False]['text':' dwShareMode ','line_number':271,'multiline':True]['text':' lpSecurityAttributes ','line_number':272,'multiline':True]['text':' dwCreationDisposition ','line_number':273,'multiline':True]['text':' dwFlagsAndAttributes ','line_number':274,'multiline':True]['text':' hTemplateFile ','line_number':275,'multiline':True]['text':' "Our" end of the pipe must not be inherited by the child process','line_number':301,'multiline':False]['text':' lpFileName ','line_number':328,'multiline':True]['text':' dwDesiredAccess ','line_number':329,'multiline':True]['text':' Must share for reading, otherwise symlink-following file existence','line_number':330,'multiline':False]['text':' checks (e.g. java.nio.file.Files.exists()) fail.','line_number':331,'multiline':False]['text':' dwShareMode ','line_number':332,'multiline':True]['text':' lpSecurityAttributes ','line_number':333,'multiline':True]['text':' dwCreationDisposition ','line_number':334,'multiline':True]['text':' dwFlagsAndAttributes ','line_number':335,'multiline':True]['text':' hTemplateFile ','line_number':336,'multiline':True]['text':' "Our" end of the pipe must not be inherited by the child process','line_number':362,'multiline':False]['text':' Wait for this process to exit (or timeout).','line_number':382,'multiline':False]['text':' Returns the exit code of the process if it has already exited. If the','line_number':387,'multiline':False]['text':' process is still running, returns STILL_ACTIVE (= 259).','line_number':388,'multiline':False]['text':' Terminates this process (and subprocesses, if job objects are available).','line_number':422,'multiline':False]['text':' Return the last error as a human-readable string and clear it.','line_number':425,'multiline':False]['text':' Ensure we can safely cast jlong to void*.','line_number':441,'multiline':False]['text':' TODO(philwo) The `Create` method returns false in case of an error. But','line_number':456,'multiline':False]['text':' there seems to be no good way to signal an error at this point to Bazel.','line_number':457,'multiline':False]['text':' The way the code currently works is that the Java code explicitly calls','line_number':458,'multiline':False]['text':' nativeProcessGetLastError(), so it's OK, but it would be nice if we','line_number':459,'multiline':False]['text':' could just throw an exception here.','line_number':460,'multiline':False]['text':' return values:','line_number':513,'multiline':False]['text':' 0: Wait completed successfully','line_number':514,'multiline':False]['text':' 1: Timeout','line_number':515,'multiline':False]['text':' 2: Wait returned with an error','line_number':516,'multiline':False]