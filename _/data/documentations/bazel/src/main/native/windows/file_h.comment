['text':' Copyright 2017 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' The flag SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE requires','line_number':40,'multiline':False]['text':' developer mode to be enabled. If it is not enabled, do not use the','line_number':41,'multiline':False]['text':' flag. The process will need to be run with elevated privileges.','line_number':42,'multiline':False]['text':' Return true iff `path` starts with "\\?\", "\\.\", or "\??\".','line_number':47,'multiline':False]['text':' Keep in sync with j.c.g.devtools.build.lib.windows.WindowsFileOperations','line_number':76,'multiline':False]['text':' Keep in sync with j.c.g.devtools.build.lib.windows.WindowsFileOperations','line_number':85,'multiline':False]['text':' Keep in sync with j.c.g.devtools.build.lib.windows.WindowsFileOperations','line_number':95,'multiline':False]['text':' Keep in sync with j.c.g.devtools.build.lib.windows.WindowsFileOperations','line_number':106,'multiline':False]['text':' Keep in sync with j.c.g.devtools.build.lib.windows.WindowsFileOperations','line_number':119,'multiline':False]['text':' Keep in sync with j.c.g.devtools.build.lib.windows.WindowsFileOperations','line_number':128,'multiline':False]['text':' Determines whether `path` is a junction (or directory symlink).','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':' `path` should be an absolute, normalized, Windows-style path, with "\\?\"','line_number':142,'multiline':False]['text':' prefix if it's longer than MAX_PATH.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' To read about differences between junctions and directory symlinks,','line_number':145,'multiline':False]['text':' see http://superuser.com/a/343079. In Bazel we only ever create junctions.','line_number':146,'multiline':False]['text':' Retrieves the FILETIME at which `path` was last changed, including metadata.','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':' `path` should be an absolute, normalized, Windows-style path, with "\\?\"','line_number':151,'multiline':False]['text':' prefix if it's longer than MAX_PATH.','line_number':152,'multiline':False]['text':' Computes the long version of `path` if it has any 8dot3 style components.','line_number':156,'multiline':False]['text':' Returns the empty string upon success, or a human-readable error message upon','line_number':157,'multiline':False]['text':' failure.','line_number':158,'multiline':False]['text':' `path` must be an absolute, normalized, Windows style path, with a "\\?\"','line_number':159,'multiline':False]['text':' prefix if it's longer than MAX_PATH. The result will have a "\\?\" prefix if','line_number':160,'multiline':False]['text':' and only if `path` had one as well. (It's the caller's responsibility to keep','line_number':161,'multiline':False]['text':' or remove this prefix.)','line_number':162,'multiline':False]['text':' TODO(laszlocsomor): update GetLongPath so it succeeds even if the path does','line_number':163,'multiline':False]['text':' not (fully) exist.','line_number':164,'multiline':False]['text':' Creates a junction at `name`, pointing to `target`.','line_number':167,'multiline':False]['text':' Returns CreateJunctionResult::kSuccess if it could create the junction, or if','line_number':168,'multiline':False]['text':' the junction already exists with the same target.','line_number':169,'multiline':False]['text':' If the junction's name already exists as an empty directory, this function','line_number':170,'multiline':False]['text':' will turn it into a junction and return kSuccess.','line_number':171,'multiline':False]['text':' Otherwise returns one of the other CreateJunctionResult::k* constants for','line_number':172,'multiline':False]['text':' known error cases, or CreateJunctionResult::kError for unknown error cases.','line_number':173,'multiline':False]['text':' When the function returns CreateJunctionResult::kError, and `error` is','line_number':174,'multiline':False]['text':' non-null, the function writes an error message into `error`. If the return','line_number':175,'multiline':False]['text':' value is anything other than CreateJunctionResult::kError, then this function','line_number':176,'multiline':False]['text':' ignores the  `error` argument.','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' Neither `junction_name` nor `junction_target` needs to have a "\\?\" prefix,','line_number':179,'multiline':False]['text':' not even if they are longer than MAX_PATH, though it's okay if they do. This','line_number':180,'multiline':False]['text':' function will add the right prefixes as necessary.','line_number':181,'multiline':False]['text':' Creates a symlink at `symlink_name`, pointing to `symlink_target`.','line_number':185,'multiline':False]['text':' Returns CreateSymlinkResult::kSuccess if could create the symlink.','line_number':186,'multiline':False]['text':' If the target is a directory, this function will return','line_number':187,'multiline':False]['text':' CreateSymlinkResult::kTargetIsDirectory since a junction is preferred','line_number':188,'multiline':False]['text':' instead. When the function returns CreateSymlinkResult::kError and `error`','line_number':189,'multiline':False]['text':' is non-null then `error` receives an error message.','line_number':190,'multiline':False]['text':' Reads the symlink or junction into 'result'.','line_number':194,'multiline':False]['text':' Returns a value from 'ReadSymlinkOrJunctionResult'.','line_number':195,'multiline':False]['text':' When the method returns 'ReadSymlinkOrJunctionResult::kError' and 'error' is','line_number':196,'multiline':False]['text':' non-null then 'error' receives an error message.','line_number':197,'multiline':False]['text':' Deletes the file, junction, or empty directory at `path`.','line_number':200,'multiline':False]['text':' Returns DELETE_PATH_SUCCESS if it successfully deleted the path, otherwise','line_number':201,'multiline':False]['text':' returns one of the other DELETE_PATH_* constants (e.g. when the directory is','line_number':202,'multiline':False]['text':' not empty or the file is in use by another process).','line_number':203,'multiline':False]['text':' Returns DELETE_PATH_ERROR for unexpected errors. If `error` is not null, the','line_number':204,'multiline':False]['text':' function writes an error message into it.','line_number':205,'multiline':False]['text':' Returns a normalized form of the input `path`.','line_number':208,'multiline':False]['text':'','line_number':209,'multiline':False]['text':' Normalization:','line_number':210,'multiline':False]['text':'   Normalization means removing "." references, resolving ".." references,','line_number':211,'multiline':False]['text':'   and deduplicating "/" characters while converting them to "\\".  For','line_number':212,'multiline':False]['text':'   example if `path` is "foo/../bar/.//qux", the result is "bar\\qux".','line_number':213,'multiline':False]['text':'','line_number':214,'multiline':False]['text':'   Uplevel references ("..") that cannot go any higher in the directory tree','line_number':215,'multiline':False]['text':'   are preserved if the path is relative, and ignored if the path is','line_number':216,'multiline':False]['text':'   absolute, e.g. "../../foo" is normalized to "..\\..\\foo" but "c:/.." is','line_number':217,'multiline':False]['text':'   normalized to "c:\\".','line_number':218,'multiline':False]['text':'','line_number':219,'multiline':False]['text':'   This method does not check the semantics of the `path` beyond checking if','line_number':220,'multiline':False]['text':'   it starts with a directory separator. Illegal paths such as one with a','line_number':221,'multiline':False]['text':'   drive specifier in the middle (e.g. "foo/c:/bar") are accepted -- it's the','line_number':222,'multiline':False]['text':'   caller's responsibility to pass a path that, when normalized, will be','line_number':223,'multiline':False]['text':'   semantically correct.','line_number':224,'multiline':False]['text':'','line_number':225,'multiline':False]['text':'   Current directory references (".") are preserved if and only if they are','line_number':226,'multiline':False]['text':'   the only path segment, so "./" becomes "." but "./foo" becomes "foo".','line_number':227,'multiline':False]['text':'','line_number':228,'multiline':False]['text':' Arguments:','line_number':229,'multiline':False]['text':'   `path` must be a relative or absolute Windows path, it may use "/" instead','line_number':230,'multiline':False]['text':'   of "\\". The path should not start with "/" or "\\".','line_number':231,'multiline':False]['text':'','line_number':232,'multiline':False]['text':' Result:','line_number':233,'multiline':False]['text':'   Returns false if and only if the path starts with a directory separator.','line_number':234,'multiline':False]['text':'','line_number':235,'multiline':False]['text':'   The result won't have a UNC prefix, even if `path` did. The result won't','line_number':236,'multiline':False]['text':'   have a trailing "\\" except when and only when the path is normalized to','line_number':237,'multiline':False]['text':'   just a drive specifier (e.g. when `path` is "c:/" or "c:/foo/.."). The','line_number':238,'multiline':False]['text':'   result will preserve the casing of the input, so "D:/Bar" becomes','line_number':239,'multiline':False]['text':'   "D:\\Bar".','line_number':240,'multiline':False]['text':' namespace windows','line_number':246,'multiline':False]['text':' namespace bazel','line_number':247,'multiline':False]['text':' BAZEL_SRC_MAIN_NATIVE_WINDOWS_FILE_H_','line_number':249,'multiline':False]