['text':' Copyright 2022 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Extensions without the dot','line_number':36,'multiline':False]['text':' NOTE: Must stay in sync with the value used in rules_python','line_number':39,'multiline':False]['text':' keep-sorted','line_number':109,'multiline':False]['text':' keep sorted','line_number':148,'multiline':False]['text':' Else, they're equal, so do nothing. This allows merging dicts','line_number':247,'multiline':False]['text':' that both define the same key from a common place.','line_number':248,'multiline':False]['text':' TODO(b/203567235): Get the set of recognized extensions from','line_number':261,'multiline':False]['text':' elsewhere, as there may be others. e.g. Bazel recognizes .py3','line_number':262,'multiline':False]['text':' as a valid extension.','line_number':263,'multiline':False]['text':' This little arg carries a lot of weight, but because Starlark doesn't','line_number':286,'multiline':False]['text':' have a way to identify if a target is just a File, the equivalent','line_number':287,'multiline':False]['text':' logic can't be re-implemented in pure-Starlark.','line_number':288,'multiline':False]['text':'','line_number':289,'multiline':False]['text':' Under the hood, it calls the Java `Runfiles#addRunfiles(ctx,','line_number':290,'multiline':False]['text':' DEFAULT_RUNFILES)` method, which is the what the Java implementation','line_number':291,'multiline':False]['text':' of the Python rules originally did, and the details of how that method','line_number':292,'multiline':False]['text':' works have become relied on in various ways. Specifically, what it','line_number':293,'multiline':False]['text':' does is visit the srcs, deps, and data attributes in the following','line_number':294,'multiline':False]['text':' ways:','line_number':295,'multiline':False]['text':'','line_number':296,'multiline':False]['text':' For each target in the "data" attribute...','line_number':297,'multiline':False]['text':'   If the target is a File, then add that file to the runfiles.','line_number':298,'multiline':False]['text':'   Otherwise, add the target's **data runfiles** to the runfiles.','line_number':299,'multiline':False]['text':'','line_number':300,'multiline':False]['text':' Note that, contray to best practice, the default outputs of the','line_number':301,'multiline':False]['text':' targets in `data` are *not* added, nor are the default runfiles.','line_number':302,'multiline':False]['text':'','line_number':303,'multiline':False]['text':' This ends up being important for several reasons, some of which are','line_number':304,'multiline':False]['text':' specific to Google-internal features of the rules.','line_number':305,'multiline':False]['text':'   * For Python executables, we have to use `data_runfiles` to avoid','line_number':306,'multiline':False]['text':'     conflicts for the build data files. Such files have','line_number':307,'multiline':False]['text':'     target-specific content, but uses a fixed location, so if a','line_number':308,'multiline':False]['text':'     binary has another binary in `data`, and both try to specify a','line_number':309,'multiline':False]['text':'     file for that file path, then a warning is printed and an','line_number':310,'multiline':False]['text':'     arbitrary one will be used.','line_number':311,'multiline':False]['text':'   * For rules with _entirely_ different sets of files in data runfiles','line_number':312,'multiline':False]['text':'     vs default runfiles vs default outputs. For example,','line_number':313,'multiline':False]['text':'     proto_library: documented behavior of this rule is that putting it','line_number':314,'multiline':False]['text':'     in the `data` attribute will cause the transitive closure of','line_number':315,'multiline':False]['text':'     `.proto` source files to be included. This set of sources is only','line_number':316,'multiline':False]['text':'     in the `data_runfiles` (`default_runfiles` is empty).','line_number':317,'multiline':False]['text':'   * For rules with a _subset_ of files in data runfiles. For example,','line_number':318,'multiline':False]['text':'     a certain Google rule used for packaging arbitrary binaries will','line_number':319,'multiline':False]['text':'     generate multiple versions of a binary (e.g. different archs,','line_number':320,'multiline':False]['text':'     stripped vs un-stripped, etc) in its default outputs, but only','line_number':321,'multiline':False]['text':'     one of them in the runfiles; this helps avoid large, unused','line_number':322,'multiline':False]['text':'     binaries contributing to remote executor input limits.','line_number':323,'multiline':False]['text':'','line_number':324,'multiline':False]['text':' Unfortunately, the above behavior also results in surprising behavior','line_number':325,'multiline':False]['text':' in some cases. For example, simple custom rules that only return their','line_number':326,'multiline':False]['text':' files in their default outputs won't have their files included. Such','line_number':327,'multiline':False]['text':' cases must either return their files in runfiles, or use `filegroup()`','line_number':328,'multiline':False]['text':' which will do so for them.','line_number':329,'multiline':False]['text':'','line_number':330,'multiline':False]['text':' For each target in "srcs" and "deps"...','line_number':331,'multiline':False]['text':'   Add the default runfiles of the target to the runfiles. While this','line_number':332,'multiline':False]['text':'   is desirable behavior, it also ends up letting a `py_library`','line_number':333,'multiline':False]['text':'   be put in `srcs` and still mostly work.','line_number':334,'multiline':False]['text':' TODO(b/224640180): Reject py_library et al rules in srcs.','line_number':335,'multiline':False]['text':' list of depsets','line_number':357,'multiline':False]['text':' list of Files','line_number':358,'multiline':False]['text':' PyInfo may not be present for e.g. cc_library rules.','line_number':360,'multiline':False]['text':' TODO(b/228692666): Remove this once non-PyInfo targets are no','line_number':368,'multiline':False]['text':' longer supported in `deps`.','line_number':369,'multiline':False]['text':' We only look at data to calculate uses_shared_libraries, if it's already','line_number':383,'multiline':False]['text':' true, then we don't need to waste time looping over it.','line_number':384,'multiline':False]['text':' Similar to the above, except we only calculate uses_shared_libraries','line_number':386,'multiline':False]['text':' TODO(b/234730058): Remove checking for PyInfo in data once depot','line_number':388,'multiline':False]['text':' cleaned up.','line_number':389,'multiline':False]['text':' TODO(b/203567235): Set `uses_shared_libraries` field, though the Bazel','line_number':402,'multiline':False]['text':' docs indicate it's unused in Bazel and may be removed.','line_number':403,'multiline':False]['text':' NOTE: This isn't strictly correct, but with Python 2 gone,','line_number':409,'multiline':False]['text':' the srcs_version logic is largely defunct, so shouldn't matter in','line_number':410,'multiline':False]['text':' practice.','line_number':411,'multiline':False]['text':' When built for Apple platforms, require the execution to be on a Mac.','line_number':442,'multiline':False]['text':' TODO(b/176993122): Remove when bazel automatically knows to run on darwin.','line_number':443,'multiline':False]['text':' NOTE: The main repo name is empty in *labels*, but not in','line_number':480,'multiline':False]['text':' ctx.workspace_name','line_number':481,'multiline':False]['text':' package_group doesn't allow @repo syntax, so we work around that','line_number':486,'multiline':False]['text':' by prefixing external repos with a fake package path. This also','line_number':487,'multiline':False]['text':' makes it easy to enable or disable all external repos.','line_number':488,'multiline':False]