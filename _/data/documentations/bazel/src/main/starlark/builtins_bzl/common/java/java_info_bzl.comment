['text':' Copyright 2023 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' TODO(hvd): remove this when:','line_number':23,'multiline':False]['text':' - we have a general provider-type checking API','line_number':24,'multiline':False]['text':' - no longer need to check for --experimental_google_legacy_api','line_number':25,'multiline':False]['text':' private to @_builtins:','line_number':99,'multiline':False]['text':' [File]','line_number':116,'multiline':False]['text':' [depset[File]]','line_number':117,'multiline':False]['text':' [_JavaOutputInfo]','line_number':118,'multiline':False]['text':' [File]','line_number':119,'multiline':False]['text':' [depset[File]]','line_number':120,'multiline':False]['text':' [depset[File]]','line_number':121,'multiline':False]['text':' [depset[File]]','line_number':122,'multiline':False]['text':' [depset[File]]','line_number':123,'multiline':False]['text':' [depset[File]]','line_number':124,'multiline':False]['text':' [depset[File]]','line_number':125,'multiline':False]['text':' [depset[str]]','line_number':126,'multiline':False]['text':' [depset[str]]','line_number':127,'multiline':False]['text':' [str]','line_number':129,'multiline':False]['text':' java_outputs is a list so we uniquify to avoid https://github.com/bazelbuild/bazel/issues/17170','line_number':151,'multiline':False]['text':' runtime_output_jars is a list so we uniquify to avoid https://github.com/bazelbuild/bazel/issues/17170','line_number':160,'multiline':False]['text':' source_jars is a list so we uniquify to avoid https://github.com/bazelbuild/bazel/issues/17170','line_number':162,'multiline':False]['text':' deprecated','line_number':229,'multiline':False]['text':' deprecated','line_number':238,'multiline':False]['text':' so that translation into native JavaInfo does not add JavaCompilationArgsProvider','line_number':253,'multiline':False]['text':' Omit jdeps, which aren't available transitively and aren't useful for reduced classpath','line_number':296,'multiline':False]['text':' pruning for non-strict targets: the direct classpath and transitive classpath are the same,','line_number':297,'multiline':False]['text':' so there's nothing to prune, and reading jdeps at compile-time isn't free.','line_number':298,'multiline':False]['text':' Existing Jars would be a problem b/c we can't remove them from transitiveXxx sets','line_number':348,'multiline':False]['text':' this differs ever so slightly from the usual JavaInfo in that direct_runtime_jars','line_number':450,'multiline':False]['text':' does not contain the output_jar is there were no sources/resources','line_number':451,'multiline':False]['text':' only differs from the usual java_info.transitive_source_jars in the order of deps','line_number':462,'multiline':False]['text':' the JavaInfo constructor does not add flags from runtime_deps','line_number':465,'multiline':False]['text':' deprecated','line_number':564,'multiline':False]['text':' deprecated','line_number':572,'multiline':False]['text':' deprecated','line_number':594,'multiline':False]['text':' For backward compatibility, we use deps_exports for add_exports/add_opens','line_number':739,'multiline':False]['text':' for the JavaInfo constructor rather than runtimedeps_exports_deps (used','line_number':740,'multiline':False]['text':' by java_info_for_compilation). However, runtimedeps_exports_deps makes','line_number':741,'multiline':False]['text':' more sense, since add_exports/add_opens from runtime_deps are needed at','line_number':742,'multiline':False]['text':' runtime anyway.','line_number':743,'multiline':False]['text':'','line_number':744,'multiline':False]['text':' TODO: When this flag is removed, move this logic into _javainfo_init_base','line_number':745,'multiline':False]['text':'  and remove the special case from java_info_for_compilation.','line_number':746,'multiline':False]['text':' TODO(hvd): native also adds source jars from deps, but this should be unnecessary','line_number':755,'multiline':False]['text':' Preserve the processor path, since it may contain Error Prone plugins','line_number':865,'multiline':False]['text':' which will be service-loaded by JavaBuilder.','line_number':866,'multiline':False]['text':' Preserve data, which may be used by Error Prone plugins.','line_number':868,'multiline':False]