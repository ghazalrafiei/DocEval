['text':' Copyright 2021 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' TODO(#5200): Add export_define to library_to_link and cc_library','line_number':25,'multiline':False]['text':' Add this as a tag to any target that can be linked by more than one','line_number':27,'multiline':False]['text':' cc_shared_library because it doesn't have static initializers or anything','line_number':28,'multiline':False]['text':' else that may cause issues when being linked more than once. This should be','line_number':29,'multiline':False]['text':' used sparingly after making sure it's safe to use.','line_number':30,'multiline':False]['text':' len(label_to_linker_inputs) might not match the topologically_sorted_labels','line_number':59,'multiline':False]['text':' size. The latter is looking at nodes in the graph but a node may not','line_number':60,'multiline':False]['text':' necessarily contribute any linker_inputs. For example a cc_library with','line_number':61,'multiline':False]['text':' no sources and only deps. Every linker_input.owner must be in','line_number':62,'multiline':False]['text':' topologically_sorted_labels otherwise there is an error in the rule','line_number':63,'multiline':False]['text':' implementation of the target providing that linker_input, e.g. it's','line_number':64,'multiline':False]['text':' missing a CcSharedLibraryHintInfo if it had custom owner names for linker','line_number':65,'multiline':False]['text':' inputs.','line_number':66,'multiline':False]['text':' This is ok. It can happen if no linker_inputs','line_number':70,'multiline':False]['text':' were added by a node in the graph.','line_number':71,'multiline':False]['text':' For each target, find out whether it should be linked statically or','line_number':83,'multiline':False]['text':' dynamically. The transitive_dynamic_dep_labels parameter is only needed for','line_number':84,'multiline':False]['text':' binaries because they link all dynamic_deps (cc_binary|cc_test).','line_number':85,'multiline':False]['text':' The cc_shared_library graph is parallel to the cc_library graph.','line_number':101,'multiline':False]['text':' Propagation of linker inputs between cc_libraries happens via the CcInfo','line_number':102,'multiline':False]['text':' provider. Parallel to this we have cc_shared_libraries which may decide','line_number':103,'multiline':False]['text':' different partitions of the cc_library graph.','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' In a previous implementation of cc_shared_library we relied on the','line_number':106,'multiline':False]['text':' topological sort given by flattening','line_number':107,'multiline':False]['text':' cc_info.linking_context.linker_inputs.to_list(), however this was wrong','line_number':108,'multiline':False]['text':' because the dependencies of a shared library (i.e. a pruned node here)','line_number':109,'multiline':False]['text':' influenced the final order.','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' In order to fix this, the pruning below was changed from breadth-first','line_number':112,'multiline':False]['text':' traversal to depth-first traversal. While doing this we also recreate a','line_number':113,'multiline':False]['text':' depset with topological order that takes into account the pruned nodes','line_number':114,'multiline':False]['text':' and which will later be used to order the libraries in the linking','line_number':115,'multiline':False]['text':' command line. This will be in topological order and will respect the','line_number':116,'multiline':False]['text':' order of the deps as listed on the BUILD file as much as possible.','line_number':117,'multiline':False]['text':'','line_number':118,'multiline':False]['text':' Here we say "first_owner" because each node (see GraphNodeInfo) may have','line_number':119,'multiline':False]['text':' more than one linker_input (each potentially with a different owner) but','line_number':120,'multiline':False]['text':' using only the first owner as a key is enough.','line_number':121,'multiline':False]['text':' Horrible I know. Perhaps Starlark team gives me a way to prune a tree.','line_number':124,'multiline':False]['text':' The *_seen variables are used to track a programmatic error and fail','line_number':133,'multiline':False]['text':' if it happens.  Every value in node.owners presumably corresponds to','line_number':134,'multiline':False]['text':' a linker_input in the same exact target. Therefore if we have seen','line_number':135,'multiline':False]['text':' any of the owners already, then we must have also seen all the other','line_number':136,'multiline':False]['text':' owners in the same node. Viceversa when we haven't seen them yet. If','line_number':137,'multiline':False]['text':' both of these values are non-zero after the loop, the most likely','line_number':138,'multiline':False]['text':' reason would be a bug in the implementation. It could potentially be','line_number':139,'multiline':False]['text':' triggered by users if they use owner labels that do not keep most of','line_number':140,'multiline':False]['text':' the ctx.label.package and ctx.label.name which then clash with other','line_number':141,'multiline':False]['text':' target's owners (unlikely). For now though if the error is','line_number':142,'multiline':False]['text':' triggered, it's reasonable to require manual revision by','line_number':143,'multiline':False]['text':' the cc_shared_library implementation owners.','line_number':144,'multiline':False]['text':' TODO(bazel-team): Do not convert Labels to string to save on','line_number':150,'multiline':False]['text':' garbage string allocations.','line_number':151,'multiline':False]['text':' Our granularity is target level. Unless there is a different','line_number':175,'multiline':False]['text':' unsupported custom implementation of this rule it should be','line_number':176,'multiline':False]['text':' impossible for two linker_inputs from the same target to be','line_number':177,'multiline':False]['text':' linked differently, one statically and the other dynamically.','line_number':178,'multiline':False]['text':' The order in which we process the children matter. all_children','line_number':185,'multiline':False]['text':' is being used as a stack, we will process first the nodes at the','line_number':186,'multiline':False]['text':' top of the stack (last in the list). The children are the','line_number':187,'multiline':False]['text':' dependencies of the current node, in order to respect the order','line_number':188,'multiline':False]['text':' in which dependencies were listed in the deps attribute in the','line_number':189,'multiline':False]['text':' BUILD file we must reverse the list so that the first one listed','line_number':190,'multiline':False]['text':' in the BUILD file is processed first.','line_number':191,'multiline':False]['text':' We have 3 cases in this branch:','line_number':195,'multiline':False]['text':'   1. Node has no children','line_number':196,'multiline':False]['text':'   2. The children have been pruned because the node is linked dynamically','line_number':197,'multiline':False]['text':'   3. Node has children that have been processed','line_number':198,'multiline':False]['text':' For case 3 we add the children's depsets. For case 2 we add the dynamic','line_number':199,'multiline':False]['text':' dep labels for transitive dynamic deps.','line_number':200,'multiline':False]['text':' The map points from the target that can only be linked once to the','line_number':253,'multiline':False]['text':' cc_shared_library target that already links it.','line_number':254,'multiline':False]['text':' Checks if the linker_input has code to link statically, i.e. either','line_number':320,'multiline':False]['text':' archives or object files, ignores library.dynamic_library.','line_number':321,'multiline':False]['text':' This can happen when there was a target in the graph that exported other libraries'','line_number':357,'multiline':False]['text':' linker_inputs but didn't contribute any linker_input of its own.','line_number':358,'multiline':False]['text':' The targets_to_be_linked_statically_map points to whether the target to','line_number':396,'multiline':False]['text':' be linked statically can be linked more than once.','line_number':397,'multiline':False]['text':' Entries in unused_dynamic_linker_inputs will be marked None if they are','line_number':398,'multiline':False]['text':' used','line_number':399,'multiline':False]['text':' We keep track of precompiled_only_dynamic_libraries, so that we can add','line_number':423,'multiline':False]['text':' them to runfiles.','line_number':424,'multiline':False]['text':' We use this dictionary to give an error if a target containing only','line_number':436,'multiline':False]['text':' precompiled dynamic libraries is placed directly in roots. If such a','line_number':437,'multiline':False]['text':' precompiled dynamic library is needed it would be because a target in the','line_number':438,'multiline':False]['text':' parallel cc_library graph actually needs it. Therefore the precompiled','line_number':439,'multiline':False]['text':' dynamic library should be made a dependency of that cc_library instead.','line_number':440,'multiline':False]['text':' Link the library in this iteration dynamically,','line_number':452,'multiline':False]['text':' transitive_exports contains the artifacts produced by a','line_number':453,'multiline':False]['text':' cc_shared_library','line_number':454,'multiline':False]['text':' TODO(bazel-team): semantics.should_create_empty_archive() should be','line_number':459,'multiline':False]['text':' cleaned up and return False in every case. cc_libraries shouldn't','line_number':460,'multiline':False]['text':' produce empty archives. For now issue #19920 is only fixed in Bazel.','line_number':461,'multiline':False]['text':' We are building a dictionary that will allow us to give','line_number':464,'multiline':False]['text':' proper errors for libraries that have been linked multiple','line_number':465,'multiline':False]['text':' times elsewhere but haven't been exported. The values in the','line_number':466,'multiline':False]['text':' link_once_static_libs_map dictionary are the','line_number':467,'multiline':False]['text':' cc_shared_library targets. In this iteration we know of at','line_number':468,'multiline':False]['text':' least one target (i.e. owner) which is being linked','line_number':469,'multiline':False]['text':' statically by the cc_shared_library','line_number':470,'multiline':False]['text':' link_once_static_libs_map[owner] but is not being exported','line_number':471,'multiline':False]['text':' Do not check for overlap between targets matched by the current','line_number':651,'multiline':False]['text':' rule's exports_filter and what is in exports_map. A library in roots','line_number':652,'multiline':False]['text':' will have to be linked in statically into the current rule with 100%','line_number':653,'multiline':False]['text':' guarantee and it will also have to be exported. Therefore, we must','line_number':654,'multiline':False]['text':' check it's not already exported by a different shared library. On the','line_number':655,'multiline':False]['text':' other hand, a library in the transitive closure of the current rule','line_number':656,'multiline':False]['text':' may be matched by the exports_filter but if it's already exported by','line_number':657,'multiline':False]['text':' a dynamic_dep then it won't be linked statically (therefore not give','line_number':658,'multiline':False]['text':' an error either) in the current target. The rule will intentionally','line_number':659,'multiline':False]['text':' not throw an error in these cases.','line_number':660,'multiline':False]['text':' This is different to cc_binary(linkshared=1). Bazel never handles the','line_number':733,'multiline':False]['text':' linking implicitly for a cc_binary(linkshared=1) but it does so for a cc_shared_library,','line_number':734,'multiline':False]['text':' for which it will use the symlink in the solib directory. If we don't add it, a dependent','line_number':735,'multiline':False]['text':' linked against it would fail.','line_number':736,'multiline':False]['text':' precompiled_dynamic_library.dynamic_library could be None if the library to link just contains','line_number':746,'multiline':False]['text':' an interface library which is valid if the actual library is obtained from the system.','line_number':747,'multiline':False]['text':' Collect graph structure info from any possible deplike attribute. The aspect','line_number':805,'multiline':False]['text':' itself applies across every deplike attribute (attr_aspects is *), so enumerate','line_number':806,'multiline':False]['text':' over all attributes and consume GraphNodeInfo if available.','line_number':807,'multiline':False]['text':' TODO(bazel-team): Add flag to Bazel that can toggle the initialization of','line_number':817,'multiline':False]['text':' linkable_more_than_once.','line_number':818,'multiline':False]['text':' Propagate an aspect if dynamic_deps attribute is specified.','line_number':860,'multiline':False]