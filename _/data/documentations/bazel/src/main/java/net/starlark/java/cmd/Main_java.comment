['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * Main is a standalone interpreter for the core Starlark language. It does not yet support load
 * statements.
 *
 * <p>The sad class name is due to the linting tool, which forbids lowercase "starlark", and Java's
 * lack of renaming imports, which makes the name "Starlark" impractical due to conflicts with
 * eval.Starlark.
 ','line_number':37,'multiline':True]['text':' Variables bound by load in one REPL chunk are visible in the next.','line_number':54,'multiline':False]['text':' Prompts the user for a chunk of input, and returns it.','line_number':64,'multiline':False]['text':' a blank line ends the chunk','line_number':78,'multiline':False]['text':' Read lines until input produces valid statements, unless the last is if/def/for,','line_number':82,'multiline':False]['text':' which can be multiline, in which case we must wait for a blank line.','line_number':83,'multiline':False]['text':' TODO(adonovan): parse a compound statement, like the Python and','line_number':84,'multiline':False]['text':'   go.starlark.net REPLs. This requires a new grammar production, and','line_number':85,'multiline':False]['text':'   integration with the lexer so that it consumes new','line_number':86,'multiline':False]['text':'   lines only until the parse is complete.','line_number':87,'multiline':False]['text':' keep going until blank line','line_number':97,'multiline':False]['text':'* Provide a REPL evaluating Starlark code. ','line_number':114,'multiline':True]['text':' Do not retrieve a module docstring from REPL input.','line_number':117,'multiline':False]['text':' TODO(adonovan): provide a SourceReader. Requires that we buffer the','line_number':133,'multiline':False]['text':' entire history so that line numbers don't reset in each chunk.','line_number':134,'multiline':False]['text':'* Execute a Starlark file. ','line_number':142,'multiline':True]['text':' parse flags','line_number':166,'multiline':False]['text':' positional arguments','line_number':190,'multiline':False]['text':' This results in such lame error messages as:','line_number':215,'multiline':False]['text':' "Error reading a.star: java.nio.file.NoSuchFileException: a.star"','line_number':216,'multiline':False]