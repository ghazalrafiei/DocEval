['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* Utility functions for Starlark annotations. ','line_number':21,'multiline':True]['text':'*
   * Returns the more specific class of two classes. Class x is more specific than class y if x is
   * assignable to y. For example, of String.class and Object.class, String.class is more specific.
   *
   * <p>If either class is null, returns the other class.
   *
   * <p>If the classes are identical, returns the class.
   *
   * @throws IllegalArgumentException if neither class is assignable to the other
   ','line_number':24,'multiline':True]['text':' If this exception occurs, it indicates the following error scenario:','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' Suppose class A is a subclass of both B and C, where B and C are annotated with','line_number':46,'multiline':False]['text':' @StarlarkBuiltin annotations (and are thus considered "Starlark types"). If B is not a','line_number':47,'multiline':False]['text':' subclass of C (nor vice versa), then it's impossible to resolve whether A is of type','line_number':48,'multiline':False]['text':' B or if A is of type C. It's both! The way to resolve this is usually to have A be its own','line_number':49,'multiline':False]['text':' type (annotated with @StarlarkBuiltin), and thus have the explicit type of A be','line_number':50,'multiline':False]['text':' semantically "B and C".','line_number':51,'multiline':False]['text':'*
   * Searches a class or interface's class hierarchy for the given class annotation.
   *
   * <p>If the given class annotation appears multiple times within the class hierachy, this chooses
   * the annotation on the most-specified class in the hierarchy.
   *
   * @return the best-fit class that declares the annotation, or null if no class in the hierarchy
   *     declares it
   * @throws IllegalArgumentException if the most-specified class in the hierarchy having the
   *     annotation is not unique
   ','line_number':57,'multiline':True]['text':'*
   * Returns the {@link StarlarkBuiltin} annotation for the given class, if it exists, and
   * null otherwise. The first annotation found will be returned, starting with {@code classObj}
   * and following its base classes and interfaces recursively.
   ','line_number':87,'multiline':True]['text':'*
   * Searches {@code classObj}'s class hierarchy and returns the first superclass or interface that
   * is annotated with {@link StarlarkBuiltin} (including possibly {@code classObj} itself), or null
   * if none is found.
   ','line_number':98,'multiline':True]['text':'*
   * Returns the {@link StarlarkMethod} annotation for the given method, if it exists, and null
   * otherwise.
   *
   * <p>Note that the annotation may be defined on a supermethod, rather than directly on the given
   * method.
   *
   * <p>{@code classObj} is the class on which the given method is defined.
   ','line_number':108,'multiline':True]['text':'*
   * Convenience version of {@code getAnnotationsFromParentClass(Class, Method)} that uses the
   * declaring class of the method.
   ','line_number':138,'multiline':True]['text':'*
   * Returns the {@code StarlarkMethod} annotation corresponding to the given method of the given
   * class, or null if there is no such annotation.
   *
   * <p>This method checks assignability instead of exact matches for purposes of generics. If Clazz
   * has parameters BarT (extends BarInterface) and BazT (extends BazInterface), then foo(BarT,
   * BazT) should match if the given method signature is foo(BarImpl, BazImpl). The signatures are
   * in inexact match, but an "assignable" match.
   ','line_number':147,'multiline':True]['text':' TODO(b/79877079): This method validates several invariants of @StarlarkMethod. These','line_number':159,'multiline':False]['text':' invariants should be verified in annotation processor or in test, and left out of this','line_number':160,'multiline':False]['text':' method.','line_number':161,'multiline':False]['text':' This verifies assignability of the method signature to ensure this is not a','line_number':174,'multiline':False]['text':' coincidental overload. We verify assignability instead of matching exact parameter','line_number':175,'multiline':False]['text':' classes in order to match generic methods.','line_number':176,'multiline':False]