['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* A StarlarkFunction is a function value created by a Starlark {@code def} statement. ','line_number':29,'multiline':True]['text':' a function closes over its defining module','line_number':37,'multiline':False]['text':' Index in Module.globals of ith Program global (Resolver.Binding(GLOBAL).index).','line_number':39,'multiline':False]['text':' See explanation at Starlark.execFileProgram.','line_number':40,'multiline':False]['text':' Default values of optional parameters.','line_number':43,'multiline':False]['text':' Indices correspond to the subsequence of parameters after the initial','line_number':44,'multiline':False]['text':' required parameters and before *args/**kwargs.','line_number':45,'multiline':False]['text':' Contain MANDATORY for the required keyword-only parameters.','line_number':46,'multiline':False]['text':' Cells (shared locals) of enclosing functions.','line_number':49,'multiline':False]['text':' Indexed by Resolver.Binding(FREE).index values.','line_number':50,'multiline':False]['text':' Sets a global variable, given its index in this function's compiled Program.','line_number':66,'multiline':False]['text':' Gets the value of a global variable, given its index in this function's compiled Program.','line_number':71,'multiline':False]['text':' TODO(adonovan): many functions would be simpler if','line_number':81,'multiline':False]['text':' parameterNames excluded the *args and **kwargs parameters,','line_number':82,'multiline':False]['text':' (whose names are immaterial to the callee anyway). Do that.','line_number':83,'multiline':False]['text':' Also, reject getDefaultValue for varargs and kwargs.','line_number':84,'multiline':False]['text':'*
   * Returns the default value of the ith parameter ({@code 0 <= i < getParameterNames().size()}),
   * or null if the parameter is required. Residual parameters, if any, are always last, and have no
   * default value.
   ','line_number':86,'multiline':True]['text':' implicit prefix of mandatory parameters','line_number':100,'multiline':False]['text':' *args or *kwargs','line_number':106,'multiline':False]['text':'*
   * Returns the names of this function's parameters. The residual {@code *args} and {@code
   * **kwargs} parameters, if any, are always last.
   ','line_number':109,'multiline':True]['text':'*
   * Reports whether this function has a residual positional arguments parameter, {@code def
   * f(*args)}.
   ','line_number':117,'multiline':True]['text':'*
   * Reports whether this function has a residual keyword arguments parameter, {@code def
   * f(**kwargs)}.
   ','line_number':125,'multiline':True]['text':'* Returns the location of the function's defining identifier. ','line_number':133,'multiline':True]['text':'*
   * Returns the name of the function, or "lambda" if anonymous. Implicit functions (those not
   * created by a def statement), may have names such as "<toplevel>" or "<expr>".
   ','line_number':139,'multiline':True]['text':'*
   * Returns the value denoted by the function's doc string literal (trimmed if necessary), or null
   * if absent.
   ','line_number':148,'multiline':True]['text':' Compute the effective parameter values','line_number':169,'multiline':False]['text':' and update the corresponding variables.','line_number':170,'multiline':False]['text':' Spill indicated locals to cells.','line_number':174,'multiline':False]['text':' TODO(adonovan): use the file name instead. But that's a breaking Bazel change.','line_number':188,'multiline':False]['text':' Checks the positional and named arguments to ensure they match the signature. It returns a new','line_number':198,'multiline':False]['text':' array of effective parameter values corresponding to the parameters of the signature. The','line_number':199,'multiline':False]['text':' returned array has size of locals and is directly pushed to the stack.','line_number':200,'multiline':False]['text':' Newly allocated values (e.g. a **kwargs dict) use the Mutability mu.','line_number':201,'multiline':False]['text':'','line_number':202,'multiline':False]['text':' If the function has optional parameters, their default values are supplied by getDefaultValue.','line_number':203,'multiline':False]['text':' This is the general schema of a function:','line_number':207,'multiline':False]['text':'','line_number':208,'multiline':False]['text':'   def f(p1, p2=dp2, p3=dp3, *args, k1, k2=dk2, k3, **kwargs)','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':' The p parameters are non-kwonly, and may be specified positionally.','line_number':211,'multiline':False]['text':' The k parameters are kwonly, and must be specified by name.','line_number':212,'multiline':False]['text':' The defaults tuple is (dp2, dp3, MANDATORY, dk2, MANDATORY).','line_number':213,'multiline':False]['text':' The missing prefix (p1) is assumed to be all MANDATORY.','line_number':214,'multiline':False]['text':'','line_number':215,'multiline':False]['text':' Arguments are processed as follows:','line_number':216,'multiline':False]['text':' - positional arguments are bound to a prefix of [p1, p2, p3].','line_number':217,'multiline':False]['text':' - surplus positional arguments are bound to *args.','line_number':218,'multiline':False]['text':' - keyword arguments are bound to any of {p1, p2, p3, k1, k2, k3};','line_number':219,'multiline':False]['text':'   duplicate bindings are rejected.','line_number':220,'multiline':False]['text':' - surplus keyword arguments are bound to **kwargs.','line_number':221,'multiline':False]['text':' - defaults are bound to each parameter from p2 to k3 if no value was set.','line_number':222,'multiline':False]['text':'   default values come from the tuple above.','line_number':223,'multiline':False]['text':'   It is an error if the defaults tuple entry for an unset parameter is MANDATORY.','line_number':224,'multiline':False]['text':' nparams is the number of ordinary parameters.','line_number':230,'multiline':False]['text':' numPositionalParams is the number of non-kwonly parameters.','line_number':234,'multiline':False]['text':' Too many positional args?','line_number':237,'multiline':False]['text':' Inv: n is number of positional arguments that are not surplus.','line_number':252,'multiline':False]['text':' Bind positional arguments to non-kwonly parameters.','line_number':254,'multiline':False]['text':' Bind surplus positional arguments to *args parameter.','line_number':259,'multiline':False]['text':' Named arguments.','line_number':266,'multiline':False]['text':' To avoid Dict overhead, we populate a LinkedHashMap and then pass it to Dict.wrap()','line_number':269,'multiline':False]['text':' afterwards. (The contract of Dict.wrap prohibits us from modifying the map once the Dict is','line_number':270,'multiline':False]['text':' created.)','line_number':271,'multiline':False]['text':' safe','line_number':275,'multiline':False]['text':' the list should be short, so linear scan is OK.','line_number':277,'multiline':False]['text':' keyword is the name of a named parameter','line_number':279,'multiline':False]['text':' residual keyword argument','line_number':286,'multiline':False]['text':' unexpected keyword argument','line_number':293,'multiline':False]['text':' Give a spelling hint if there is exactly one.','line_number':301,'multiline':False]['text':' More than that suggests the wrong function was called.','line_number':302,'multiline':False]['text':' Apply defaults and report errors for missing required arguments.','line_number':316,'multiline':False]['text':' first default','line_number':317,'multiline':False]['text':' provided?','line_number':321,'multiline':False]['text':' optional?','line_number':326,'multiline':False]['text':' missing','line_number':335,'multiline':False]['text':' TODO(adonovan): include *, ** tokens.','line_number':378,'multiline':False]['text':' Only correct because closures are not yet supported.','line_number':389,'multiline':False]['text':' The MANDATORY sentinel indicates a slot in the defaultValues','line_number':393,'multiline':False]['text':' tuple corresponding to a required parameter.','line_number':394,'multiline':False]['text':' It is not visible to Java or Starlark code.','line_number':395,'multiline':False]['text':' A Cell is a local variable shared between an inner and an outer function.','line_number':400,'multiline':False]['text':' It is a StarlarkValue because it is a stack operand and a Tuple element,','line_number':401,'multiline':False]['text':' but it is not visible to Java or Starlark code.','line_number':402,'multiline':False]