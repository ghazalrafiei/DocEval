['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * A helper class that offers a subset of the functionality of Python's string#format.
 *
 * <p>Currently, both manual and automatic positional as well as named replacement fields are
 * supported. However, nested replacement fields are not allowed.
 ','line_number':21,'multiline':True]['text':'*
   * Matches strings likely to be a number, faster alternative to relying solely on Integer.parseInt
   * and NumberFormatException to determine numericness.
   ','line_number':29,'multiline':True]['text':'*
   * Formats the given input string by using the given arguments
   *
   * <p>This method offers a subset of the functionality of Python's string#format
   *
   * @param input The string to be formatted
   * @param args Positional arguments
   * @param kwargs Named arguments
   * @return The formatted string
   ','line_number':39,'multiline':True]['text':'*
   * Processes the expression after an opening brace (possibly a replacement field) and emits the
   * result to the output StringBuilder
   *
   * @param chars The entire string
   * @param pos The position of the opening brace
   * @param args List of positional arguments
   * @param kwargs Map of named arguments
   * @param history Helper object that tracks information about previously seen positional
   *     replacement fields
   * @param output StringBuilder that consumes the result
   * @return Number of characters that have been consumed by this method
   ','line_number':74,'multiline':True]['text':' Escaped brace -> output and move to char after right brace','line_number':98,'multiline':False]['text':' Inside a replacement field','line_number':103,'multiline':False]['text':' Only positional replacement fields will lead to a valid index','line_number':107,'multiline':False]['text':' Non-integer index -> Named','line_number':121,'multiline':False]['text':' Format object for output','line_number':125,'multiline':False]['text':' Advances the current position to the index of the closing brace of the','line_number':128,'multiline':False]['text':' replacement field. Due to the definition of the enclosing for() loop,','line_number':129,'multiline':False]['text':' the next iteration will examine the character right after the brace.','line_number':130,'multiline':False]['text':'*
   * Processes a closing brace and emits the result to the output StringBuilder
   *
   * @param chars The entire string
   * @param pos Position of the closing brace
   * @param output StringBuilder that consumes the result
   * @return Number of characters that have been consumed by this method
   ','line_number':142,'multiline':True]['text':' Invalid brace outside replacement field','line_number':153,'multiline':False]['text':' Escaped brace -> output and move to char after right brace','line_number':157,'multiline':False]['text':'*
   * Checks whether the given input string has a specific character at the given location
   *
   * @param data Input string as character array
   * @param pos Position to be checked
   * @param needle Character to be searched for
   * @return True if string has the specified character at the given location
   ','line_number':162,'multiline':True]['text':'*
   * Extracts the name/index of the replacement field that starts at the specified location
   *
   * @param chars Input string
   * @param openingBrace Position of the opening brace of the replacement field
   * @return Name or index of the current replacement field
   ','line_number':174,'multiline':True]['text':'*
   * Converts the given key into an integer or assigns the next available index, if empty.
   *
   * @param key Key to be converted
   * @param history Helper object that tracks information about previously seen positional
   *     replacement fields
   * @return The integer equivalent of the key
   ','line_number':209,'multiline':True]['text':' Automatic positional -> a new index value has to be assigned','line_number':222,'multiline':False]['text':' This will fail if key is a named argument','line_number':226,'multiline':False]['text':' Only register if the conversion succeeds','line_number':228,'multiline':False]['text':'*
   * Exception for invalid combinations of replacement field types
   ','line_number':237,'multiline':True]['text':'*
   * A wrapper to keep track of information about previous replacement fields
   ','line_number':246,'multiline':True]['text':'* Different types of positional replacement fields ','line_number':250,'multiline':True]['text':' {0}, {1} etc.','line_number':253,'multiline':False]['text':' {}','line_number':254,'multiline':False]['text':'*
     * Returns the next available index for an automatic positional replacement field
     *
     * @return Next index
     ','line_number':260,'multiline':True]['text':'* Registers a manual positional replacement field ','line_number':270,'multiline':True]['text':'* Registers an automatic positional replacement field ','line_number':275,'multiline':True]['text':'*
     * Indicates that a positional replacement field of the specified type is being processed and
     * checks whether this conflicts with any previously seen replacement fields
     *
     * @param current Type of current replacement field
     ','line_number':280,'multiline':True]