['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* An EvalException indicates an Starlark evaluation error. ','line_number':31,'multiline':True]['text':' The call stack associated with this error.','line_number':34,'multiline':False]['text':' It is initially null, but is set by the interpreter to a non-empty','line_number':35,'multiline':False]['text':' stack when popping a frame. Thus an exception newly created by a','line_number':36,'multiline':False]['text':' built-in function has no stack until it is thrown out of a function call.','line_number':37,'multiline':False]['text':'* Constructs an EvalException. Use {@link Starlak#errorf} if you want string formatting. ','line_number':40,'multiline':True]['text':'cause=','line_number':42,'multiline':True]['text':'*
   * Constructs an EvalException with a message and optional cause.
   *
   * <p>The cause does not affect the error message, so callers should incorporate {@code
   * cause.getMessage()} into {@code message} if desired, or call {@code EvalException(Throwable)}.
   ','line_number':45,'multiline':True]['text':'* Constructs an EvalException using the same message as the cause exception. ','line_number':55,'multiline':True]['text':'* Returns the error message. Does not include call stack or cause. ','line_number':65,'multiline':True]['text':'*
   * Returns the call stack associated with this error, outermost call first. A newly constructed
   * exception has an empty stack, but an exception that has been thrown out of a Starlark function
   * call has its stack populated automatically. The identity of the thrown exception does not
   * change.
   *
   * <p>EvalException is widely used to indicate the failure of basic operations on Starlark values,
   * such as those corresponding to the Starlark expressions {@code x.f}, {@code x[i]}, {@code x+y},
   * and so on, even when these failing operations occur outside the context of a StarlarkThread or
   * the interpreter. EvalExceptions from such failures do not have an associated stack.
   *
   * <p>For best results, when handling an EvalException, print the stack, using {@link
   * #getMessageWithStack} to display multiple complete lines of output, only if the exception
   * resulted from Starlark evaluation. For an EvalException with no stack, use {@link #getMessage}
   * to obtain a message suitable for incorporating into a larger error.
   ','line_number':71,'multiline':True]['text':'* Returns the error message along with its call stack. May be overridden by subclasses. ','line_number':91,'multiline':True]['text':'*
   * Returns the error message along with its call stack, if any. Equivalent to {@code
   * getMessageWithStack(newSourceReader())}.
   ','line_number':97,'multiline':True]['text':'*
   * Returns the error message along with its call stack, if any (see {@link #getCallStack}). The
   * source line for each stack frame is obtained from the provided SourceReader.
   ','line_number':105,'multiline':True]['text':'*
   * A SourceReader reads the line of source denoted by a Location to be displayed in a formatted
   * stack trace.
   ','line_number':116,'multiline':True]['text':'* Returns a single line of source code (sans newline), or null if unavailable. ','line_number':121,'multiline':True]['text':'*
   * Sets the function used to obtain a SourceReader when subsequently formatting a call stack.
   *
   * <p>The default supplier returns SourceReaders that read from the file system, but a
   * security-conscious client may wish to disable this capability or provide an alternative.
   ','line_number':125,'multiline':True]['text':'* Returns a new SourceReader. See {@link #setSourceReaderSupplier}. ','line_number':135,'multiline':True]['text':' TODO(adonovan): opt: cache seen files, as the stack often repeats the same files.','line_number':142,'multiline':False]['text':' ignore any failure (e.g. security manager rejecting I/O)','line_number':148,'multiline':False]['text':'*
   * Formats the given call stack and error message. Provided as a separate function from {@link
   * #getMessageWithStack} so that clients may modify the stack and/or error before formatting it.
   * The source line for each stack frame is obtained from the provided SourceReader.
   ','line_number':154,'multiline':True]['text':' n > 0','line_number':162,'multiline':False]['text':' If the topmost frame is a built-in, don't show it.','line_number':164,'multiline':False]['text':' Instead just prefix the name of the built-in onto the error message.','line_number':165,'multiline':False]['text':' 'File "file.bzl", line 1, column 2, in fn'','line_number':175,'multiline':False]['text':' source line','line_number':185,'multiline':False]['text':' Ensures that this exception holds a call stack, taking the current','line_number':196,'multiline':False]['text':' stack (which must be non-empty) from the thread if not.','line_number':197,'multiline':False]