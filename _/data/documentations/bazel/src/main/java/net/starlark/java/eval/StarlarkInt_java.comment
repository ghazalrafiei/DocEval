['text':' Copyright 2020 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* The Starlark int data type. ','line_number':20,'multiline':True]['text':' A cache of small integers >= LEAST_SMALLINT.','line_number':37,'multiline':False]['text':'* Only nested classes of {@code StarlarkInt} are allowed to inherit it. ','line_number':45,'multiline':True]['text':'* Returns the Starlark int value that represents x. ','line_number':48,'multiline':True]['text':' (may overflow)','line_number':50,'multiline':False]['text':'* Returns the Starlark int value that represents x. ','line_number':62,'multiline':True]['text':'* Returns the Starlark int value that represents x. ','line_number':70,'multiline':True]['text':'*
   * Returns the StarlarkInt value that most closely approximates x.
   *
   * @throws IllegalArgumentException is x is not finite.
   ','line_number':78,'multiline':True]['text':'*
   * Returns the int denoted by a literal string in the specified base, as if by the Starlark
   * expression {@code int(s, base)}.
   *
   * @throws NumberFormatException if the input is invalid.
   ','line_number':87,'multiline':True]['text':' +/- prefix?','line_number':100,'multiline':False]['text':' 0b 0o 0x prefix?','line_number':112,'multiline':False]['text':' strip prefix','line_number':126,'multiline':False]['text':' No prefix, no base? Use decimal.','line_number':131,'multiline':False]['text':' Don't infer base when input starts with '0' due to octal/decimal ambiguity.','line_number':133,'multiline':False]['text':' Do not allow Long.parseLong and new BigInteger to accept another +/- sign.','line_number':145,'multiline':False]['text':' Subclass for values exactly representable in a Java int.','line_number':165,'multiline':False]['text':' Subclass for values exactly representable in a Java long.','line_number':220,'multiline':False]['text':' Subclass for values not exactly representable in a long.','line_number':270,'multiline':False]['text':'* Returns the value of this StarlarkInt as a Number (Integer, Long, or BigInteger). ','line_number':310,'multiline':True]['text':'* Returns the signum of this StarlarkInt (-1, 0, or +1). ','line_number':313,'multiline':True]['text':'* Returns this StarlarkInt as a string of decimal digits. ','line_number':316,'multiline':True]['text':'* Returns the signed int32 value of this StarlarkInt, or fails if not exactly representable. ','line_number':331,'multiline':True]['text':'* Returns the signed int64 value of this StarlarkInt, or fails if not exactly representable. ','line_number':336,'multiline':True]['text':' A preallocated exception used to indicate overflow errors without the cost of allocation.','line_number':341,'multiline':False]['text':'*
   * Similar to {@link #toLong(String)}, but faster: exception is not allocated and stack trace is
   * not collected.
   ','line_number':346,'multiline':True]['text':'* Returns the nearest IEEE-754 double-precision value closest to this int, which may be ±Inf. ','line_number':354,'multiline':True]['text':' may be ±Inf','line_number':361,'multiline':False]['text':'*
   * Returns the nearest IEEE-754 double-precision value closest to this int.
   *
   * @throws EvalException is the int is to large to represent as a finite float value.
   ','line_number':365,'multiline':True]['text':'* Returns the BigInteger value of this StarlarkInt. ','line_number':378,'multiline':True]['text':'*
   * Returns the value of this StarlarkInt as a Java signed 32-bit int.
   *
   * @throws IllegalArgumentException if this int is not in that value range.
   ','line_number':381,'multiline':True]['text':' Use a constant exception to avoid allocation.','line_number':390,'multiline':False]['text':' This operator is provided for fast access and case discrimination.','line_number':391,'multiline':False]['text':' Use toInt(String) for user-visible errors.','line_number':392,'multiline':False]['text':'* Returns the result of truncating this value into the signed 32-bit range. ','line_number':399,'multiline':True]['text':' binary operators','line_number':425,'multiline':False]['text':'* Returns signum(x - y). ','line_number':427,'multiline':True]['text':' If both arguments are big, we compare BigIntegers.','line_number':429,'multiline':False]['text':' If neither argument is big, we compare longs.','line_number':430,'multiline':False]['text':' If only one argument is big, its magnitude is greater','line_number':431,'multiline':False]['text':' than the other operand, so only its sign matters.','line_number':432,'multiline':False]['text':'','line_number':433,'multiline':False]['text':' We avoid unnecessary branches.','line_number':434,'multiline':False]['text':' (long, long)','line_number':439,'multiline':False]['text':' (long, big)','line_number':441,'multiline':False]['text':' (big, big)','line_number':445,'multiline':False]['text':' (big, long)','line_number':446,'multiline':False]['text':'* Returns x + y. ','line_number':450,'multiline':True]['text':' We avoid Math.addExact and its overheads of exception allocation.','line_number':458,'multiline':False]['text':' see Hacker's Delight, chapter 2','line_number':463,'multiline':False]['text':' fall through ','line_number':468,'multiline':True]['text':'* Returns x - y. ','line_number':477,'multiline':True]['text':' We avoid Math.subtractExact and its overhead of exception allocation.','line_number':485,'multiline':False]['text':' see Hacker's Delight, chapter 2','line_number':490,'multiline':False]['text':' fall through ','line_number':495,'multiline':True]['text':'* Returns x * y. ','line_number':504,'multiline':True]['text':' Fast path for common case: int32 * int32.','line_number':506,'multiline':False]['text':' Signed int128 multiplication, using Hacker's Delight 8-2','line_number':517,'multiline':False]['text':' (High-Order Half of 64-Bit Product) extended to 128 bits.','line_number':518,'multiline':False]['text':' TODO(adonovan): use Math.multiplyHigh when Java 9 becomes available.','line_number':519,'multiline':False]['text':' high and low arms of result','line_number':530,'multiline':False]['text':' Check int128 result is within int64 range.','line_number':534,'multiline':False]['text':' overflow ','line_number':539,'multiline':True]['text':' fall through ','line_number':542,'multiline':True]['text':' Avoid unnecessary conversion to BigInteger if the other operand is -1, 0, 1.','line_number':545,'multiline':False]['text':' (Also makes self-test below faster.)','line_number':546,'multiline':False]['text':' cheap self-test','line_number':561,'multiline':False]['text':'* Returns x // y (floor of integer division). ','line_number':570,'multiline':True]['text':' http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html','line_number':578,'multiline':False]['text':' sole case in which quotient doesn't fit in long ','line_number':580,'multiline':True]['text':' overflow ','line_number':585,'multiline':True]['text':' fall through ','line_number':587,'multiline':True]['text':'* Returns x % y. ','line_number':599,'multiline':True]['text':' In Starlark, the sign of the result is the sign of the divisor.','line_number':607,'multiline':False]['text':' fall through ','line_number':610,'multiline':True]['text':'* Returns x >> y. ','line_number':622,'multiline':True]['text':' fall through ','line_number':635,'multiline':True]['text':'* Returns x << y. ','line_number':643,'multiline':True]['text':' only uses low 6 bits of yi','line_number':653,'multiline':False]['text':' overflow ','line_number':657,'multiline':True]['text':' fall through ','line_number':659,'multiline':True]['text':'* Returns x ^ y. ','line_number':667,'multiline':True]['text':' fall through ','line_number':674,'multiline':True]['text':'* Returns x | y. ','line_number':683,'multiline':True]['text':' fall through ','line_number':690,'multiline':True]['text':'* Returns x & y. ','line_number':699,'multiline':True]['text':' fall through ','line_number':706,'multiline':True]['text':'* Returns ~x. ','line_number':715,'multiline':True]['text':' fall through ','line_number':721,'multiline':True]['text':'* Returns -x. ','line_number':728,'multiline':True]['text':'* Reports whether int x exactly equals float y. ','line_number':747,'multiline':True]['text':'* Returns an exact three-valued comparison of int x with (non-NaN) double y. ','line_number':753,'multiline':True]['text':' For Int32 and some Int64s, the toDouble conversion is exact.','line_number':759,'multiline':False]['text':' Avoid Double.compare: it believes -0.0 < 0.0.','line_number':762,'multiline':False]['text':' If signs differ, we needn't look at magnitude.','line_number':772,'multiline':False]['text':' Left-shift either the int or the float mantissa,','line_number':781,'multiline':False]['text':' then compare the resulting integers.','line_number':782,'multiline':False]