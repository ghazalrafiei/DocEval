['text':' Copyright 2017 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' uninstantiable','line_number':58,'multiline':False]['text':' ---- entry point ----','line_number':60,'multiline':False]['text':' Called from StarlarkFunction.fastcall.','line_number':62,'multiline':False]['text':'indented=','line_number':66,'multiline':True]['text':' Hot code path, good chance of short lists which don't justify the iterator overhead.','line_number':79,'multiline':False]['text':' Hack for BzlLoadFunction's "export" semantics.','line_number':87,'multiline':False]['text':' We enable it only for statements outside any function (isToplevelFunction)','line_number':88,'multiline':False]['text':' and outside any if- or for- statements (!indented).','line_number':89,'multiline':False]['text':'indented=','line_number':126,'multiline':True]['text':' Stay in loop.','line_number':129,'multiline':False]['text':' Finish loop, execute next statement after loop.','line_number':133,'multiline':False]['text':' Finish loop, return from function.','line_number':136,'multiline':False]['text':' Evaluate default value expressions of optional parameters.','line_number':153,'multiline':False]['text':' We use MANDATORY to indicate a required parameter','line_number':154,'multiline':False]['text':' (not null, because defaults must be a legal tuple value, as','line_number':155,'multiline':False]['text':' it will be constructed by the code emitted by the compiler).','line_number':156,'multiline':False]['text':' As an optimization, we omit the prefix of MANDATORY parameters.','line_number':157,'multiline':False]['text':' skip prefix of required parameters','line_number':164,'multiline':False]['text':' Capture the cells of the function's','line_number':176,'multiline':False]['text':' free variables from the lexical environment.','line_number':177,'multiline':False]['text':' Unlike expr(Identifier), we want the cell itself, not its content.','line_number':181,'multiline':False]['text':' Nested functions use the same globalIndex as their enclosing function,','line_number':194,'multiline':False]['text':' since both were compiled from the same Program.','line_number':195,'multiline':False]['text':'indented=','line_number':205,'multiline':True]['text':'indented=','line_number':207,'multiline':True]['text':' Has the application defined a behavior for load statements in this thread?','line_number':213,'multiline':False]['text':' Load module.','line_number':220,'multiline':False]['text':' Extract symbol.','line_number':229,'multiline':False]['text':' not very precise','line_number':257,'multiline':False]['text':' location is now redundant since it's in the thread','line_number':259,'multiline':False]['text':'*
   * Updates the environment bindings, and possibly mutates objects, so as to assign the given value
   * to the given expression. Might not set the frame location on error.
   ','line_number':293,'multiline':True]['text':' x = ...','line_number':300,'multiline':False]['text':' x[i] = ...','line_number':304,'multiline':False]['text':' a, b, c = ...','line_number':310,'multiline':False]['text':' x.f = ...','line_number':315,'multiline':False]['text':' Not possible for resolved ASTs.','line_number':326,'multiline':False]['text':'*
   * Recursively assigns an iterable value to a non-empty sequence of assignable expressions. Might
   * not set frame location on error.
   ','line_number':349,'multiline':True]['text':' TODO(adonovan): lock/unlock rhs during iteration so that','line_number':355,'multiline':False]['text':' assignments fail when the left side aliases the right,','line_number':356,'multiline':False]['text':' which is a tricky case in Python assignment semantics.','line_number':357,'multiline':False]['text':' strings are not iterable','line_number':360,'multiline':False]['text':' Might not set frame location on error.','line_number':376,'multiline':False]['text':' x op= y    (lhs must be evaluated only once)','line_number':384,'multiline':False]['text':' object[index] op= y','line_number':397,'multiline':False]['text':' The object and key should be evaluated only once, so we don't use lhs.eval().','line_number':398,'multiline':False]['text':' Evaluate rhs after lhs.','line_number':403,'multiline':False]['text':' object.field op= y  (lhs must be evaluated only once)','line_number':420,'multiline':False]['text':'defaultValue=','line_number':431,'multiline':True]['text':' Not possible for resolved ASTs.','line_number':447,'multiline':False]['text':' list += iterable  behaves like  list.extend(iterable)','line_number':455,'multiline':False]['text':' TODO(b/141263526): following Python, allow list+=iterable (but not list+iterable).','line_number':456,'multiline':False]['text':' dict |= map merges the contents of the second operand (usually a dict) into the first.','line_number':462,'multiline':False]['text':' ---- expressions ----','line_number':473,'multiline':False]['text':' The switch cases have been split into separate functions','line_number':481,'multiline':False]['text':' to reduce the stack usage during recursion, which is','line_number':482,'multiline':False]['text':' especially important in practice for deeply nested a+...+z','line_number':483,'multiline':False]['text':' expressions; see b/153764542.','line_number':484,'multiline':False]['text':' TODO(adonovan): opt: avoid allocation by saving','line_number':503,'multiline':False]['text':' the StarlarkInt in the IntLiteral (a temporary hack','line_number':504,'multiline':False]['text':' until we use a compiled representation).','line_number':505,'multiline':False]['text':' AND and OR require short-circuit evaluation.','line_number':533,'multiline':False]['text':'defaultValue=','line_number':583,'multiline':True]['text':' Starlark arguments are ordered: positionals < keywords < *args < **kwargs.','line_number':596,'multiline':False]['text':'','line_number':597,'multiline':False]['text':' This is stricter than Python2, which doesn't constrain keywords wrt *args,','line_number':598,'multiline':False]['text':' but this ensures that the effects of evaluation of Starlark arguments occur','line_number':599,'multiline':False]['text':' in source order.','line_number':600,'multiline':False]['text':'','line_number':601,'multiline':False]['text':' Starlark does not support Python3's multiple *args and **kwargs','line_number':602,'multiline':False]['text':' nor freer ordering, such as f(a, *list, *list, **dict, **dict, b=1).','line_number':603,'multiline':False]['text':' Supporting it would complicate a compiler, and produce effects out of order.','line_number':604,'multiline':False]['text':' Also, Python's argument ordering rules are complex and the errors sometimes cryptic.','line_number':605,'multiline':False]['text':' StarStar and Star args are guaranteed to be last, if they occur.','line_number':607,'multiline':False]['text':' Inv: n = |positional| + |named|','line_number':620,'multiline':False]['text':' Allocate assuming no *args/**kwargs.','line_number':622,'multiline':False]['text':' f(expr) -- positional args','line_number':626,'multiline':False]['text':' f(id=expr) -- named args','line_number':634,'multiline':False]['text':' f(*args) -- varargs','line_number':643,'multiline':False]['text':' TODO(adonovan): opt: if value.size is known, preallocate (and skip if empty).','line_number':650,'multiline':False]['text':' f(**kwargs)','line_number':657,'multiline':False]['text':' Unlike *args, we don't have a Starlark-specific mapping interface to check for in **kwargs,','line_number':660,'multiline':False]['text':' so check for Java's Map instead.','line_number':661,'multiline':False]['text':' (Location is prematerialized)','line_number':679,'multiline':False]['text':' The Lambda class serves as a recursive lambda closure.','line_number':776,'multiline':False]['text':' execClauses(index) recursively executes the clauses starting at index,','line_number':778,'multiline':False]['text':' and finally evaluates the body and adds its value to the result.','line_number':779,'multiline':False]['text':' recursive case: one or more clauses','line_number':783,'multiline':False]['text':' base case: evaluate body and add to result.','line_number':812,'multiline':False]['text':'*
   * Evaluates an expression to an iterable Starlark value and returns an {@code Iterable} view of
   * it. If evaluation fails or the value is not iterable, throws {@code EvalException} and sets the
   * error location to the expression's start.
   ','line_number':834,'multiline':True]