['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* Helper functions for {@link StarlarkMethod}-annotated fields and methods. ','line_number':29,'multiline':True]['text':' uninstantiable','line_number':32,'multiline':False]['text':'*
   * Returns the {@link StarlarkClassDescriptor} for the given {@link StarlarkSemantics} and {@link
   * Class}.
   *
   * <p>This method is a hotspot! It's called on every function call and field access. A single
   * `bazel build` invocation can make tens or even hundreds of millions of calls to this method.
   ','line_number':34,'multiline':True]['text':' We use two layers of caches, with the first layer being keyed by StarlarkSemantics and the','line_number':47,'multiline':False]['text':' second layer being keyed by Class. This optimizes for the common case of very few different','line_number':48,'multiline':False]['text':' StarlarkSemantics instances (typically, one) being in play. In contrast, if we used a single','line_number':49,'multiline':False]['text':' cache data structure then we'd need to use a dedicated tuple object for the keys of that data','line_number':50,'multiline':False]['text':' structure, and the GC churn and method call overhead become meaningful at scale.','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' We implement each cache ourselves using CHM#get and CHM#putIfAbsent. We don't use','line_number':53,'multiline':False]['text':' CHM#computeIfAbsent since it is not reentrant: If #getStarlarkClassDescriptor is called','line_number':54,'multiline':False]['text':' before Starlark.UNIVERSE is initialized then the computation will re-enter the cache and have','line_number':55,'multiline':False]['text':' a cycle; see b/161479826 for history.','line_number':56,'multiline':False]['text':' TODO(bazel-team): Maybe the above cycle concern doesn't exist now that CallUtils is private.','line_number':57,'multiline':False]['text':' In May 2023, typical Bazel usage results in ~150 entries in this cache. Therefore','line_number':63,'multiline':False]['text':' we presize the CHM accordingly to reduce the chance two entries use the same hash','line_number':64,'multiline':False]['text':' bucket (in May 2023 this strategy was completely effective!). We used to use the','line_number':65,'multiline':False]['text':' default capacity, and then the CHM would get dynamically resized to have 256','line_number':66,'multiline':False]['text':' buckets, many of which had at least 2 entries which is suboptimal for such a hot','line_number':67,'multiline':False]['text':' data structure.','line_number':68,'multiline':False]['text':' TODO(bazel-team): Better would be to precompute the entire lookup table on server','line_number':69,'multiline':False]['text':'  startup (best would be to do this at compile time via an annotation processor),','line_number':70,'multiline':False]['text':'  rather than rely on it getting built-up dynamically as Starlark code gets','line_number':71,'multiline':False]['text':'  evaluated over the lifetime of the server. This way there are no concurrency','line_number':72,'multiline':False]['text':'  concerns, so we can use a more efficient data structure that doesn't need to','line_number':73,'multiline':False]['text':'  handle concurrent writes.','line_number':74,'multiline':False]['text':' initialCapacity= ','line_number':75,'multiline':True]['text':' first thread wins','line_number':80,'multiline':False]['text':' first thread wins','line_number':90,'multiline':False]['text':'*
   * Information derived from a {@link Class} (that has methods annotated with {@link
   * StarlarkMethod}) based on a {@link StarlarkSemantics}.
   ','line_number':96,'multiline':True]['text':'*
     * All {@link StarlarkMethod}-annotated Java methods, sans ones where {@code selfCall() ==
     * true}, sorted by Java method name.
     ','line_number':103,'multiline':True]['text':'*
     * Submap of {@link #methods} for which {@code structField() == true}, sorted by Java method
     * name.
     ','line_number':108,'multiline':True]['text':'*
   * Two-layer cache of {@link #buildStarlarkClassDescriptor}, managed by {@link
   * #getStarlarkClassDescriptor}.
   ','line_number':115,'multiline':True]['text':' Sort methods by Java name, for determinism.','line_number':129,'multiline':False]['text':' Synthetic methods lead to false multiple matches','line_number':133,'multiline':False]['text':' annotated?','line_number':138,'multiline':False]['text':' enabled by semantics?','line_number':144,'multiline':False]['text':' self-call method?','line_number':152,'multiline':False]['text':' regular method','line_number':162,'multiline':False]['text':' field method?','line_number':165,'multiline':False]['text':' TODO(b/72113542): Validate with annotation processor instead of at runtime.','line_number':167,'multiline':False]['text':'*
   * Returns the set of all StarlarkMethod-annotated Java methods (excluding the self-call method)
   * of the specified class.
   ','line_number':182,'multiline':True]['text':'*
   * Returns the value of the Starlark field of {@code x}, implemented by a Java method with a
   * {@code StarlarkMethod(structField=true)} annotation.
   ','line_number':191,'multiline':True]['text':'mu=','line_number':202,'multiline':True]['text':'* Returns the names of the Starlark fields of {@code x} under the specified semantics. ','line_number':205,'multiline':True]['text':'*
   * Returns a {@link MethodDescriptor} object representing a function which calls the selfCall java
   * method of the given object (the {@link StarlarkMethod} method with {@link
   * StarlarkMethod#selfCall()} set to true). Returns null if no such method exists.
   ','line_number':210,'multiline':True]['text':'*
   * Returns a {@code selfCall=true} method for the given class under the given Starlark semantics,
   * or null if no such method exists.
   ','line_number':221,'multiline':True]