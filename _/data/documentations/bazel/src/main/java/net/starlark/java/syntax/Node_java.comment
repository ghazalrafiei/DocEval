['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * A Node is a node in a Starlark syntax tree.
 *
 * <p>Nodes may be constructed only by the parser.
 *
 * <p>The syntax tree records the offsets within the file of all salient tokens, such as brackets
 * that mark the beginning or end of an expression, or operators whose position may be needed in a
 * run-time error message. The start and end offsets of each Node are computed inductively from
 * their tokens and subexpressions. Offsets are converted to Locations on demand in methods such as
 * {@link #getStartLocation}.
 ','line_number':19,'multiline':True]['text':' Use these typical node distributions in Bazel files','line_number':32,'multiline':False]['text':' as a rough guide for optimization decisions.','line_number':33,'multiline':False]['text':' BUILD files are much more numerous than .bzl files,','line_number':34,'multiline':False]['text':' and typically larger.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' Large BUILD file:','line_number':37,'multiline':False]['text':'   49  % StringLiteral','line_number':38,'multiline':False]['text':'   17  % Identifier','line_number':39,'multiline':False]['text':'   12  % Argument.Keyword','line_number':40,'multiline':False]['text':'    9  % ListExpression','line_number':41,'multiline':False]['text':'    4  % CallExpression','line_number':42,'multiline':False]['text':'    3.5% ExpressionStatement','line_number':43,'multiline':False]['text':'    3.1% Comment','line_number':44,'multiline':False]['text':'    1.2% Argument.Positional','line_number':45,'multiline':False]['text':'    1.8% all others','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':' Large .bzl logic file:','line_number':48,'multiline':False]['text':'   42 % Identifier','line_number':49,'multiline':False]['text':'   12 % DotExpression','line_number':50,'multiline':False]['text':'   7.1% StringLiteral','line_number':51,'multiline':False]['text':'   6.7% Argument.Keyword','line_number':52,'multiline':False]['text':'   6.7% CallExpression','line_number':53,'multiline':False]['text':'   4.6% Argument.Positional','line_number':54,'multiline':False]['text':'   3.1% Comment','line_number':55,'multiline':False]['text':'   2.4% ListExpression','line_number':56,'multiline':False]['text':'   2.4% ExpressionStatement','line_number':57,'multiline':False]['text':'   2.2% AssignmentStatement','line_number':58,'multiline':False]['text':'   1.9% DictExpression.Entry','line_number':59,'multiline':False]['text':'   1.9% BinaryOperatorExpression','line_number':60,'multiline':False]['text':'   1.0% Comprehension','line_number':61,'multiline':False]['text':'   6  % all others','line_number':62,'multiline':False]['text':' The FileLocations table holds the file name and a compressed','line_number':64,'multiline':False]['text':' mapping from token char offsets to Locations.','line_number':65,'multiline':False]['text':' It is shared by all nodes from the same file.','line_number':66,'multiline':False]['text':'*
   * Returns the node's start offset, as a char index (zero-based count of UTF-16 codes) from the
   * start of the file.
   ','line_number':73,'multiline':True]['text':'* Returns the location of the start of this syntax node. ','line_number':79,'multiline':True]['text':'* Returns the char offset of the source position immediately after this syntax node. ','line_number':84,'multiline':True]['text':'* Returns the location of the source position immediately after this syntax node. ','line_number':87,'multiline':True]['text':'*
   * Returns a pretty-printed representation of this syntax tree.
   *
   * <p>This function returns the canonical source code corresponding to a syntax tree. Generally,
   * the output can be round-tripped: pretty-printing a syntax tree then parsing the result should
   * yield an equivalent syntax tree.
   *
   * <p>The pretty-printed form of a syntax tree may be used as a proxy for equality in tests.
   * However, different trees may have the same printed form. In particular, {@link StarlarkFile}
   * includes comments that are not reflected in the string.
   ','line_number':92,'multiline':True]['text':'*
   * Print the syntax node in a form useful for debugging.
   *
   * <p>The output is not precisely specified; use {@link #prettyPrint()} if you need more stable
   * and complete information. For instance, this function may omit child statements of compound
   * statements, or parentheses around some expressions. It may also abbreviate large list literals.
   ','line_number':109,'multiline':True]['text':' default behavior, overridden in several subclasses','line_number':118,'multiline':False]['text':'*
   * Implements the double dispatch by calling into the node specific <code>visit</code> method of
   * the {@link NodeVisitor}
   *
   * @param visitor the {@link NodeVisitor} instance to dispatch to.
   ','line_number':121,'multiline':True]