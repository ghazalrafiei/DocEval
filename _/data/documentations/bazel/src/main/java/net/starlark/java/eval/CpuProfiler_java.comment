['text':' Copyright 2020 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Overview','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' A CPU profiler measures CPU cycles consumed by each thread.','line_number':36,'multiline':False]['text':' It does not account for time a thread is blocked in I/O','line_number':37,'multiline':False]['text':' (e.g. within a call to glob), or runnable but not actually','line_number':38,'multiline':False]['text':' running, as happens when there are more runnable threads than cores.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' CPU profiling requires operating system support.','line_number':41,'multiline':False]['text':' On POSIX systems, the setitimer system call causes','line_number':42,'multiline':False]['text':' the kernel to signal an application periodically.','line_number':43,'multiline':False]['text':' With the ITIMER_PROF option, setitimer delivers a','line_number':44,'multiline':False]['text':' SIGPROF signal to a running thread each time its CPU usage','line_number':45,'multiline':False]['text':' exceeds the specific quantum. A profiler builds a histogram','line_number':46,'multiline':False]['text':' of these these signals, grouped by the current program','line_number':47,'multiline':False]['text':' counter location, or more usefully by the complete stack of','line_number':48,'multiline':False]['text':' program counter locations.','line_number':49,'multiline':False]['text':'','line_number':50,'multiline':False]['text':' This profiler calls a C++ function to install a SIGPROF handler.','line_number':51,'multiline':False]['text':' Like all handlers for asynchronous signals (that is, signals not','line_number':52,'multiline':False]['text':' caused by the execution of program instructions), it is extremely','line_number':53,'multiline':False]['text':' constrained in what it may do. It cannot acquire locks, allocate','line_number':54,'multiline':False]['text':' memory, or interact with the JVM in any way. Our signal handler','line_number':55,'multiline':False]['text':' simply sends a message into a global pipe; the message records','line_number':56,'multiline':False]['text':' the operating system's identifier (tid) for the signalled thread.','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' Reading from the other end of the pipe is a Java thread, the router.','line_number':59,'multiline':False]['text':' Its job is to map each OS tid to a StarlarkThread, if the','line_number':60,'multiline':False]['text':' thread is currently executing Starlark code, and increment','line_number':61,'multiline':False]['text':' a volatile counter in that StarlarkThread. If the thread is','line_number':62,'multiline':False]['text':' not executing Starlark code, the router discards the event.','line_number':63,'multiline':False]['text':' When a Starlark thread enters or leaves a function during profiling,','line_number':64,'multiline':False]['text':' it updates the StarlarkThread-to-OS-thread mapping consulted by the','line_number':65,'multiline':False]['text':' router.','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' If the router does not drain the pipe in a timely manner (on the','line_number':68,'multiline':False]['text':' order of 10s; see signal handler), the signal handler prints a','line_number':69,'multiline':False]['text':' warning and discards the event.','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' The router may induce a delay between the kernel signal and the','line_number':72,'multiline':False]['text':' thread's stack sampling, during which Starlark execution may have','line_number':73,'multiline':False]['text':' moved on to another function. Assuming uniform delay, this is','line_number':74,'multiline':False]['text':' equivalent to shifting the phase but not the frequency of CPU ticks.','line_number':75,'multiline':False]['text':' Nonetheless it may bias the profile because, for example,','line_number':76,'multiline':False]['text':' it would cause a Starlark 'sleep' function to accrue a nonzero','line_number':77,'multiline':False]['text':' number of CPU ticks that properly belong to the preceding computation.','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' When a Starlark thread leaves any function, it reads and clears','line_number':80,'multiline':False]['text':' its counter of CPU ticks. If the counter was nonzero, the thread','line_number':81,'multiline':False]['text':' writes a copy of its stack to the profiler log in pprof form,','line_number':82,'multiline':False]['text':' which is a gzip-compressed stream of protocol messages.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' The profiler is inherently global to the process,','line_number':85,'multiline':False]['text':' and records the effects of all Starlark threads.','line_number':86,'multiline':False]['text':' It may be started and stopped concurrent with Starlark execution,','line_number':87,'multiline':False]['text':' allowing profiling of a portion of a long-running computation.','line_number':88,'multiline':False]['text':'* A CPU profiler for Starlark (POSIX only for now). ','line_number':90,'multiline':True]['text':' The active profiler, if any.','line_number':105,'multiline':False]['text':'* Returns the active profiler, or null if inactive. ','line_number':108,'multiline':True]['text':' Maps OS thread ID to StarlarkThread.','line_number':114,'multiline':False]['text':' The StarlarkThread is needed only for its cpuTicks field.','line_number':115,'multiline':False]['text':'*
   * Associates the specified StarlarkThread with the current OS thread. Returns the StarlarkThread
   * previously associated with it, if any.
   ','line_number':118,'multiline':True]['text':'* Start the profiler. ','line_number':131,'multiline':True]['text':'* Stop the profiler and wait for the log to be written. ','line_number':150,'multiline':True]['text':' Finish writing the file and fail if there were any I/O errors.','line_number':161,'multiline':False]['text':'* Records a profile event. ','line_number':165,'multiline':True]['text':' ---- signal router ----','line_number':170,'multiline':False]['text':' Starts the routing thread if not already started (idempotent).','line_number':174,'multiline':False]['text':' On return, it is safe to install the signal handler.','line_number':175,'multiline':False]['text':' The Router thread routes SIGPROF events (from the pipe)','line_number':185,'multiline':False]['text':' to the relevant StarlarkThread. Once started, it runs forever.','line_number':186,'multiline':False]['text':'','line_number':187,'multiline':False]['text':' TODO(adonovan): opt: a more efficient implementation of routing would be','line_number':188,'multiline':False]['text':' to use, instead of a pipe from the signal handler to the routing thread,','line_number':189,'multiline':False]['text':' a mapping, maintained in C++, from OS thread ID to cpuTicks pointer.','line_number':190,'multiline':False]['text':' The {add,remove}Thread operations would update this mapping,','line_number':191,'multiline':False]['text':' and the signal handler would read it. The mapping would have to','line_number':192,'multiline':False]['text':' be a lock-free hash table so that it can be safely read in an','line_number':193,'multiline':False]['text':' async signal handler. The pointer would point to the sole element','line_number':194,'multiline':False]['text':' of direct memory buffer belonging to the StarlarkThread, allocated','line_number':195,'multiline':False]['text':' by JNI NewDirectByteBuffer.','line_number':196,'multiline':False]['text':' In this way, the signal handler could update the StarlarkThread directly,','line_number':197,'multiline':False]['text':' saving 100 write+read calls per second per core.','line_number':198,'multiline':False]['text':'','line_number':199,'multiline':False]['text':' Record a CPU tick against tid.','line_number':217,'multiline':False]['text':'','line_number':218,'multiline':False]['text':' It's not safe to grab the thread's stack here because the thread','line_number':219,'multiline':False]['text':' may be changing it, so we increment the thread's counter.','line_number':220,'multiline':False]['text':' When the thread later observes the counter is non-zero,','line_number':221,'multiline':False]['text':' it gives us the stack by calling addEvent.','line_number':222,'multiline':False]['text':' Decodes a signed 32-bit big-endian integer from b[0:4].','line_number':230,'multiline':False]['text':' --- native code (see cpu_profiler) ---','line_number':235,'multiline':False]['text':' Reports whether the profiler is supported on this platform.','line_number':237,'multiline':False]['text':' Returns the read end of a pipe from which profile events may be read.','line_number':240,'multiline':False]['text':' Each event is an operating system thread ID encoded as uint32be.','line_number':241,'multiline':False]['text':' Starts the operating system's interval timer.','line_number':244,'multiline':False]['text':' The period must be a positive number of microseconds.','line_number':245,'multiline':False]['text':' Returns false if SIGPROF is already in use.','line_number':246,'multiline':False]['text':' Stops the operating system's interval timer.','line_number':249,'multiline':False]['text':' Returns the operating system's identifier for the calling thread.','line_number':252,'multiline':False]['text':' Encoder for pprof format profiles.','line_number':255,'multiline':False]['text':' See https://github.com/google/pprof/tree/master/proto','line_number':256,'multiline':False]['text':' We encode the protocol messages by hand to avoid','line_number':257,'multiline':False]['text':' adding a dependency on the protocol compiler.','line_number':258,'multiline':False]['text':' the first write error, if any; reported during stop()','line_number':264,'multiline':False]['text':' entry 0 is always ""','line_number':272,'multiline':False]['text':' dimension and unit','line_number':274,'multiline':False]['text':' informational fields of Profile','line_number':279,'multiline':False]['text':' magnitude of sampling period:','line_number':281,'multiline':False]['text':' dimension and unit of period:','line_number':283,'multiline':False]['text':' start (real) time of profile:','line_number':285,'multiline':False]['text':' retained from an earlier error','line_number':312,'multiline':False]['text':' Protocol encoding helpers; see https://developers.google.com/protocol-buffers/docs/encoding.','line_number':319,'multiline':False]['text':' (Copied to avoid a dependency on the corresponding methods of protobuf.CodedOutputStream.)','line_number':320,'multiline':False]['text':' wire type 0 = varint','line_number':323,'multiline':False]['text':' wire type 2 = length-delimited','line_number':334,'multiline':False]['text':' Field numbers from pprof protocol.','line_number':346,'multiline':False]['text':' See https://github.com/google/pprof/blob/master/proto/profile.proto','line_number':347,'multiline':False]['text':' repeated ValueType','line_number':348,'multiline':False]['text':' repeated Sample','line_number':349,'multiline':False]['text':' repeated Mapping','line_number':350,'multiline':False]['text':' repeated Location','line_number':351,'multiline':False]['text':' repeated Function','line_number':352,'multiline':False]['text':' repeated string','line_number':353,'multiline':False]['text':' int64','line_number':354,'multiline':False]['text':' int64','line_number':355,'multiline':False]['text':' ValueType','line_number':356,'multiline':False]['text':' int64','line_number':357,'multiline':False]['text':' int64','line_number':358,'multiline':False]['text':' int64','line_number':359,'multiline':False]['text':' repeated uint64','line_number':360,'multiline':False]['text':' repeated int64','line_number':361,'multiline':False]['text':' repeated Label','line_number':362,'multiline':False]['text':' int64','line_number':363,'multiline':False]['text':' int64','line_number':364,'multiline':False]['text':' int64','line_number':365,'multiline':False]['text':' int64','line_number':366,'multiline':False]['text':' uint64','line_number':367,'multiline':False]['text':' uint64','line_number':368,'multiline':False]['text':' uint64','line_number':369,'multiline':False]['text':' repeated Line','line_number':370,'multiline':False]['text':' uint64','line_number':371,'multiline':False]['text':' int64','line_number':372,'multiline':False]['text':' uint64','line_number':373,'multiline':False]['text':' int64','line_number':374,'multiline':False]['text':' int64','line_number':375,'multiline':False]['text':' int64','line_number':376,'multiline':False]['text':' int64','line_number':377,'multiline':False]['text':' Every string, function, and PC location is emitted once','line_number':379,'multiline':False]['text':' and thereafter referred to by its identifier, a Long.','line_number':380,'multiline':False]['text':' key is "address" of function','line_number':382,'multiline':False]['text':' key is "address" of PC location','line_number':383,'multiline':False]['text':' Returns the ID of the specified string,','line_number':385,'multiline':False]['text':' emitting a pprof string record the first time it is encountered.','line_number':386,'multiline':False]['text':' Returns the ID of a StarlarkCallable for use in Line.FunctionId,','line_number':396,'multiline':False]['text':' emitting a pprof Function record the first time fn is encountered.','line_number':397,'multiline':False]['text':' The ID is the same as the function's logical address,','line_number':398,'multiline':False]['text':' which is supplied by the caller to avoid the need to recompute it.','line_number':399,'multiline':False]['text':' TODO(adonovan): make WORKSPACE-relative','line_number':406,'multiline':False]['text':' Returns the ID of the location denoted by fr,','line_number':427,'multiline':False]['text':' emitting a pprof Location record the first time it is encountered.','line_number':428,'multiline':False]['text':' For Starlark frames, this is the Frame pc.','line_number':429,'multiline':False]['text':' fnAddr identifies a function as a whole.','line_number':432,'multiline':False]['text':' very imperfect','line_number':433,'multiline':False]['text':' pcAddr identifies the current program point.','line_number':435,'multiline':False]['text':'','line_number':436,'multiline':False]['text':' For now, this is the same as fnAddr, because','line_number':437,'multiline':False]['text':' we don't track the syntax node currently being','line_number':438,'multiline':False]['text':' evaluated. Statement-level profile information','line_number':439,'multiline':False]['text':' in the leaf function (displayed by 'pprof list <fn>')','line_number':440,'multiline':False]['text':' is thus unreliable for now.','line_number':441,'multiline':False]['text':' TODO(adonovan): when we use a byte code representation','line_number':444,'multiline':False]['text':' of function bodies, mix the program counter fr.pc into fnAddr.','line_number':445,'multiline':False]['text':' TODO(adonovan): even cleaner: treat each function's byte','line_number':446,'multiline':False]['text':' code segment as its own Profile.Mapping, indexed by pc.','line_number':447,'multiline':False]['text':'','line_number':448,'multiline':False]['text':' pcAddr = (pcAddr << 16) ^ fr.pc;','line_number':449,'multiline':False]