['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * Starlark String module.
 *
 * <p>This module has special treatment in Starlark, as its methods represent methods present for
 * any 'string' objects in the language.
 *
 * <p>Methods of this class annotated with {@link StarlarkMethod} must have a positional-only
 * 'String self' parameter as the first parameter of the method.
 ','line_number':29,'multiline':True]['text':' Returns s[start:stop:step], as if by Sequence.getSlice.','line_number':68,'multiline':False]['text':' common case','line_number':76,'multiline':False]['text':' Nearly all chars in Starlark strings are ASCII.','line_number':87,'multiline':False]['text':' This is a cache of single-char strings to avoid allocation in the s[i] operation.','line_number':88,'multiline':False]['text':'* Semantically equivalent to {@link String#valueOf(char)} but faster for ASCII strings. ','line_number':99,'multiline':True]['text':' Returns the substring denoted by str[start:end], which is never out of bounds.','line_number':108,'multiline':False]['text':' For speed, we don't return str.substring(start, end), as substring allocates a copy.','line_number':109,'multiline':False]['text':' Instead we return the (start, end) indices, packed into the lo/hi arms of a long.','line_number':110,'multiline':False]['text':' This function duplicates the logic of Starlark.slice for strings.','line_number':112,'multiline':False]['text':' => empty result','line_number':123,'multiline':False]['text':' = str.substring(start, end)','line_number':125,'multiline':False]['text':'*
   * For consistency with Python we recognize the same whitespace characters as they do over the
   * range 0x00-0xFF. See https://hg.python.org/cpython/file/3.6/Objects/unicodetype_db.h#l5738 This
   * list is a consequence of Unicode character information.
   *
   * <p>Note that this differs from Python 2.7, which uses ctype.h#isspace(), and from
   * java.lang.Character#isWhitespace(), which does not recognize U+00A0.
   ','line_number':179,'multiline':True]['text':' TODO(https://github.com/bazelbuild/starlark/issues/112): use the Unicode definition of','line_number':187,'multiline':False]['text':' whitespace, matching Python 3.','line_number':188,'multiline':False]['text':' All characters were stripped.','line_number':200,'multiline':False]['text':' All characters were stripped.','line_number':209,'multiline':False]['text':'first=','line_number':437,'multiline':True]['text':'first=','line_number':449,'multiline':True]['text':' Splits input at the first or last occurrence of the given separator,','line_number':452,'multiline':False]['text':' and returns a triple of substrings (before, separator, after).','line_number':453,'multiline':False]['text':' If the input does not contain the separator,','line_number':454,'multiline':False]['text':' it returns (input, "", "") if first, or ("", "", input), if !first.','line_number':455,'multiline':False]['text':' TODO(adonovan): fix: support non-ASCII characters. Requires that Bazel stop abusing Latin1.','line_number':492,'multiline':False]['text':'*
   * Common implementation for find, rfind, index, rindex.
   *
   * @param forward true if we want to return the last matching index.
   ','line_number':525,'multiline':True]['text':' Unfortunately Java forces us to allocate here in the general case, even','line_number':535,'multiline':False]['text':' though String has a private indexOf method that accepts indices.','line_number':536,'multiline':False]['text':' The common cases of a search of the full string or a forward search with','line_number':537,'multiline':False]['text':' a custom start position do not require allocations.','line_number':538,'multiline':False]['text':'','line_number':545,'multiline':False]['text':' TODO(b/67740837): clarify whether this is named or positional.','line_number':688,'multiline':False]['text':' TODO(adonovan): spec should state that result is mutable,','line_number':711,'multiline':False]['text':' as in Python[23] and go.starlark.net.','line_number':712,'multiline':False]['text':' Python also accepts non-cased characters, so we cannot use LOWER.','line_number':763,'multiline':False]['text':' Python also accepts non-cased characters, so we cannot use UPPER.','line_number':774,'multiline':False]['text':' From the Python documentation: "uppercase characters may only follow uncased characters','line_number':790,'multiline':False]['text':' and lowercase characters only cased ones".','line_number':791,'multiline':False]['text':' 1. Check condition that was determined by the right neighbor.','line_number':797,'multiline':False]['text':' 2. Determine condition for the left neighbor.','line_number':801,'multiline':False]['text':' 3. Store character if it is cased.','line_number':809,'multiline':False]['text':' The leftmost cased letter must be uppercase. If leftMostCased is not a cased letter here,','line_number':814,'multiline':False]['text':' then the string doesn't have any cased letter, so UPPER.test will return false.','line_number':815,'multiline':False]['text':' str.length() + 1','line_number':874,'multiline':False]['text':' Unfortunately Java forces us to allocate here, even though','line_number':876,'multiline':False]['text':' String has a private indexOf method that accepts indices.','line_number':877,'multiline':False]['text':' Fortunately the common case is self[0:n].','line_number':878,'multiline':False]['text':' TODO(adonovan): opt: return a new type that is lazily iterable.','line_number':897,'multiline':False]['text':' Computes str.substring(start, end).endsWith(suffix) without allocation.','line_number':951,'multiline':False]['text':' In Python, formatting is very complex.','line_number':957,'multiline':False]['text':' We handle here the simplest case which provides most of the value of the function.','line_number':958,'multiline':False]['text':' https://docs.python.org/3/library/string.html#formatstrings','line_number':959,'multiline':False]['text':' Computes str.substring(start, end).startsWith(prefix) without allocation.','line_number':1034,'multiline':False]