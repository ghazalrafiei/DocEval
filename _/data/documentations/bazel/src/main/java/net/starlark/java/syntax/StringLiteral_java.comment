['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* Syntax node for a string literal. ','line_number':18,'multiline':True]['text':' See skyframe.serialization.StringLiteralCodec for custom serialization logic.','line_number':21,'multiline':False]['text':'* Returns the value denoted by the string literal ','line_number':34,'multiline':True]['text':' TODO(adonovan): when we switch to compilation,','line_number':50,'multiline':False]['text':' making syntax trees ephemeral, we can afford to','line_number':51,'multiline':False]['text':' record the raw literal. This becomes:','line_number':52,'multiline':False]['text':'   return startOffset + raw.length().','line_number':53,'multiline':False]['text':' -- hooks to support Skyframe serialization without creating a dependency --','line_number':62,'multiline':False]['text':'* Returns an opaque serializable object that may be passed to {@link #fromSerialization}. ','line_number':64,'multiline':True]['text':'*
   * Returns the value denoted by the Starlark string literal within s.
   *
   * @throws IllegalArgumentException if s does not contain a valid string literal.
   ','line_number':69,'multiline':True]['text':' TODO(bazel-team): We should in principle have an overload that allows non-default FileOptions.','line_number':74,'multiline':False]['text':' But currently no FileOptions affect the behavior of this method, except to possibly make it','line_number':75,'multiline':False]['text':' throw IAE on non-ASCII data.','line_number':76,'multiline':False]['text':' TODO(adonovan): once we have byte compilation, make this function','line_number':78,'multiline':False]['text':' independent of the Lexer, which should only validate string literals','line_number':79,'multiline':False]['text':' but not unquote them. Clients (e.g. the compiler) can unquote on demand.','line_number':80,'multiline':False]['text':'* Constructs a StringLiteral from its serialized components. ','line_number':93,'multiline':True]