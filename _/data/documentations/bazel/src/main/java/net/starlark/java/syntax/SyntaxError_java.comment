['text':' Copyright 2019 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * A SyntaxError represents a static error associated with the syntax, such as a scanner or parse
 * error, a structural problem, or a failure of identifier resolution. It records a description of
 * the error and its location in the syntax.
 ','line_number':21,'multiline':True]['text':'* Returns the location of the error. ','line_number':36,'multiline':True]['text':'* Returns a description of the error. ','line_number':41,'multiline':True]['text':'* Returns a string of the form {@code "foo.star:1:2: oops"}. ','line_number':46,'multiline':True]['text':'*
   * A SyntaxError.Exception is an exception holding one or more syntax errors.
   *
   * <p>SyntaxError.Exception is thrown by operations such as {@link Expression#parse}, which are
   * "all or nothing". By contrast, {@link StarlarkFile#parse} does not throw an exception; instead,
   * it records the accumulated scanner, parser, and optionally validation errors within the syntax
   * tree, so that clients may obtain partial information from a damaged file.
   *
   * <p>Clients that fail abruptly when encountering parse errors are encouraged to throw
   * SyntaxError.Exception, as in this example:
   *
   * <pre>
   * StarlarkFile file = StarlarkFile.parse(input);
   * if (!file.ok()) {
   *     throw new SyntaxError.Exception(file.errors());
   * }
   * </pre>
   ','line_number':52,'multiline':True]['text':'* Construct a SyntaxError from a non-empty list of errors. ','line_number':75,'multiline':True]['text':'* Returns an immutable non-empty list of errors. ','line_number':83,'multiline':True]['text':' TODO(adonovan): say ("+ n more errors") to avoid ambiguity.','line_number':92,'multiline':False]