['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* Internal declarations used by the evaluator. ','line_number':21,'multiline':True]['text':' The following functions for indexing and slicing match the behavior of Python.','line_number':38,'multiline':False]['text':'*
   * Resolves a positive or negative index to an index in the range [0, length), or throws
   * EvalException if it is out of range. If the index is negative, it counts backward from length.
   ','line_number':40,'multiline':True]['text':'*
   * Returns the effective index denoted by a user-supplied integer. First, if the integer is
   * negative, the length of the sequence is added to it, so an index of -1 represents the last
   * element of the sequence. Then, the integer is "clamped" into the inclusive interval [0,
   * length].
   ','line_number':56,'multiline':True]['text':'* Evaluates an eager binary operation, {@code x op y}. (Excludes AND and OR.) ','line_number':76,'multiline':True]['text':' int + int','line_number':85,'multiline':False]['text':' int + float','line_number':88,'multiline':False]['text':' string + string','line_number':95,'multiline':False]['text':' tuple + tuple','line_number':101,'multiline':False]['text':' list + list','line_number':107,'multiline':False]['text':' float + float','line_number':114,'multiline':False]['text':' float + int','line_number':118,'multiline':False]['text':' int | int','line_number':128,'multiline':False]['text':' map | map (usually dicts)','line_number':133,'multiline':False]['text':' int & int','line_number':141,'multiline':False]['text':' int ^ int','line_number':148,'multiline':False]['text':' x >> y','line_number':155,'multiline':False]['text':' x << y','line_number':162,'multiline':False]['text':' int - int','line_number':170,'multiline':False]['text':' int - float','line_number':173,'multiline':False]['text':' float - float','line_number':181,'multiline':False]['text':' float - int','line_number':185,'multiline':False]['text':' int * int','line_number':196,'multiline':False]['text':' int * string','line_number':199,'multiline':False]['text':'  int * tuple','line_number':202,'multiline':False]['text':' int * list','line_number':205,'multiline':False]['text':' int * float','line_number':208,'multiline':False]['text':' string * int','line_number':215,'multiline':False]['text':' tuple * int','line_number':221,'multiline':False]['text':' list * int','line_number':227,'multiline':False]['text':' float * float','line_number':234,'multiline':False]['text':' float * int','line_number':237,'multiline':False]['text':' real division','line_number':243,'multiline':False]['text':' int / int','line_number':247,'multiline':False]['text':' int / float','line_number':250,'multiline':False]['text':' float / float','line_number':257,'multiline':False]['text':' float / int','line_number':260,'multiline':False]['text':' int // int','line_number':269,'multiline':False]['text':' int // float','line_number':272,'multiline':False]['text':' float // float','line_number':281,'multiline':False]['text':' float // int','line_number':284,'multiline':False]['text':' int % int','line_number':293,'multiline':False]['text':' int % float','line_number':297,'multiline':False]['text':' string % any','line_number':304,'multiline':False]['text':' float % float','line_number':319,'multiline':False]['text':' float % int','line_number':322,'multiline':False]['text':' custom binary operator?','line_number':371,'multiline':False]['text':' Defines the behavior of the language's ordered comparison operators (< <= => >).','line_number':389,'multiline':False]['text':' Would exceed max length of a java String.','line_number':403,'multiline':False]['text':'* Evaluates a unary operation. ','line_number':410,'multiline':True]['text':' -int','line_number':418,'multiline':False]['text':' -float','line_number':420,'multiline':False]['text':' +int','line_number':426,'multiline':False]['text':' +float','line_number':428,'multiline':False]['text':' ~int','line_number':434,'multiline':False]['text':' fall through ','line_number':439,'multiline':True]['text':'*
   * Returns the element of sequence or mapping {@code object} indexed by {@code key}.
   *
   * @throws EvalException if {@code object} is not a sequence or mapping.
   ','line_number':444,'multiline':True]['text':' TODO(bazel-team): We shouldn't have this fromJava call here. If it's needed at all,','line_number':459,'multiline':False]['text':' it should go in the implementations of StarlarkIndexable#getIndex that produce non-Starlark','line_number':460,'multiline':False]['text':' values.','line_number':461,'multiline':False]['text':'*
   * Updates an object as if by the Starlark statement {@code object[key] = value}.
   *
   * @throws EvalException if the object is not a list or dict.
   ','line_number':474,'multiline':True]['text':'* Updates the named field of x as if by the Starlark statement {@code x.field = value}. ','line_number':499,'multiline':True]