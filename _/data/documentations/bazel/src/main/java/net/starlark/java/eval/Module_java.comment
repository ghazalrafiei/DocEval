['text':' Copyright 2019 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * A {@link Module} represents a Starlark module, a container of global variables populated by
 * executing a Starlark file. Each top-level assignment updates a global variable in the module.
 *
 * <p>Each module references its "predeclared" environment, which is often shared among many
 * modules. These are the names that are defined even at the start of execution. For example, in
 * Bazel, the predeclared environment of the module for a BUILD or .bzl file defines name values
 * such as cc_binary and glob.
 *
 * <p>The predeclared environment implicitly includes the "universal" names present in every
 * Starlark thread in every dialect, such as None, len, and str; see {@link Starlark#UNIVERSE}.
 *
 * <p>Global bindings in a Module may shadow bindings inherited from the predeclared block.
 *
 * <p>A module may carry an arbitrary piece of client data. In Bazel, for example, the client data
 * records the module's build label (such as "//dir:file.bzl"). This client data is accessible to
 * (for instance) application-defined builtin methods.
 *
 * <p>You may create a Module using {@link #create}, {@link #withPredeclared}, or {@link
 * #withPredeclaredAndData}. The latter two give you the ability to add predeclared bindings (beyond
 * the universal ones) and client data. The particular {@link StarlarkSemantics} and client data may
 * filter what predeclared bindings are available via {@link GuardedValue}.
 ','line_number':29,'multiline':True]['text':' The module's predeclared environment. Excludes UNIVERSE bindings. Values that are conditionally','line_number':54,'multiline':False]['text':' present are stored as GuardedValues regardless of whether they are actually enabled.','line_number':55,'multiline':False]['text':' The module's global variables, in order of creation.','line_number':58,'multiline':False]['text':' An optional piece of application-specific metadata associated with the module/file.','line_number':62,'multiline':False]['text':' Its toString appears to Starlark in str(function): "<function f from ...>".','line_number':63,'multiline':False]['text':' An optional doc string for the module. Set after construction when evaluating a .bzl file.','line_number':68,'multiline':False]['text':'*
   * Constructs a Module with the specified predeclared bindings (filtered by the semantics), in *
   * addition to the standard environment, {@link Starlark#UNIVERSE}. No client data is set.
   ','line_number':80,'multiline':True]['text':'*
   * Constructs a Module as above, but with the specified client data -- an arbitrary
   * application-specific value to be associated with this Module. Client data may also affect the
   * filtering of predeclareds alongside the semantics.
   ','line_number':89,'multiline':True]['text':'*
   * Creates a module with no predeclared bindings other than the standard environment, {@link
   * Starlark#UNIVERSE}, and with no client data.
   ','line_number':99,'multiline':True]['text':' predeclared= ','line_number':105,'multiline':True]['text':' clientData= ','line_number':105,'multiline':True]['text':'*
   * Returns the module (file) of the {@code depth}-th innermost enclosing Starlark function on the
   * call stack, or null if number of the active calls that are functions defined in Starlark is
   * less than or equal to {@code depth}.
   *
   * <p>This method is a temporary workaround for Starlarkification, to check {@code _builtin}
   * restriction and should not be used anywhere else.
   *
   * @param depth the depth for the callstack.
   * @throws IllegalArgumentException if {@code depth} is negative.
   ','line_number':108,'multiline':True]['text':'*
   * Returns the module (file) of the innermost enclosing Starlark function on the call stack, or
   * null if none of the active calls are functions defined in Starlark.
   *
   * <p>The name of this function is intentionally horrible to make you feel bad for using it.
   ','line_number':128,'multiline':True]['text':'*
   * Replaces an enabled {@link GuardedValue} with the value it guards.
   *
   * <p>A disabled {@link GuardedValue} is left in place for error reporting upon access, and should
   * be treated as unavailable.
   ','line_number':139,'multiline':True]['text':'* Returns the client data associated with this module. ','line_number':154,'multiline':True]['text':'* Sets the module's doc string. It may be retrieved using {@link #getDocumentation}. ','line_number':160,'multiline':True]['text':'*
   * Returns the module's doc string, or null if absent.
   *
   * <p>Morally equivalent to calling {@code program.getResolvedFunction().getDocumentation()} when
   * the Module has a corresponding {@link net.starlark.java.syntax.Program}. We need to separately
   * save the doc string inside the Module because (1) a Module will usually outlive the Program;
   * and (2) there isn't always a 1-to-1 match between a Module and a Program (multiple programs may
   * be executed in the same module in REPL or in tests).
   ','line_number':165,'multiline':True]['text':'*
   * Returns the value of a predeclared (not universal) binding in this module.
   *
   * <p>In the case that the predeclared is a {@link GuardedValue}: If it is enabled, the underlying
   * value is returned, otherwise the {@code GuardedValue} itself is returned for error reporting.
   ','line_number':179,'multiline':True]['text':'*
   * Returns this module's additional predeclared bindings. (Excludes {@link Starlark#UNIVERSE}.)
   *
   * <p>The map reflects any filtering of {@link GuardedValue}: enabled ones are replaced by the
   * underlying values that they guard, while disabled ones are left in place for error reporting.
   ','line_number':194,'multiline':True]['text':'*
   * Returns an immutable mapping containing the global variables of this module.
   *
   * <p>The bindings are returned in a deterministic order (for a given sequence of initial values
   * and updates).
   ','line_number':204,'multiline':True]['text':'* Implements the resolver's module interface. ','line_number':222,'multiline':True]['text':' global?','line_number':225,'multiline':False]['text':' predeclared?','line_number':230,'multiline':False]['text':' Name is correctly spelled, but access is disabled by a flag or by client data.','line_number':234,'multiline':False]['text':'candidates=','line_number':236,'multiline':True]['text':' universal?','line_number':241,'multiline':False]['text':' undefined','line_number':246,'multiline':False]['text':'*
   * Returns the value of the specified global variable, or null if not bound. Does not look in the
   * predeclared environment.
   ','line_number':254,'multiline':True]['text':'*
   * Sets the value of a global variable based on its index in this module ({@see
   * getIndexOfGlobal}).
   ','line_number':264,'multiline':True]['text':'*
   * Returns the value of a global variable based on its index in this module ({@see
   * getIndexOfGlobal}.) Returns null if the variable has not been assigned a value.
   ','line_number':273,'multiline':True]['text':'*
   * Returns the index within this Module of a global variable, given its name, creating a new slot
   * for it if needed. The numbering of globals used by these functions is not the same as the
   * numbering within any compiled Program. Thus each StarlarkFunction must contain a secondary
   * index mapping Program indices (from Binding.index) to Module indices.
   ','line_number':283,'multiline':True]['text':' grow by doubling','line_number':296,'multiline':False]['text':'* Returns a list of indices of a list of globals; {@see getIndexOfGlobal}. ','line_number':301,'multiline':True]['text':'* Updates a global binding in the module environment. ','line_number':311,'multiline':True]