['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * A sequence returned by the {@code range} function invocation.
 *
 * <p>Instead of eagerly allocating an array with all elements of the sequence, this class uses
 * simple math to compute a value at each index. This is particularly useful when range is huge or
 * only a few elements from it are used.
 *
 * <p>The start, stop, step, and size of the range must all fit within 32-bit signed integers.
 *
 * <p>Eventually {@code range} function should produce an instance of the {@code range} type as is
 * the case in Python 3, but for now to preserve backwards compatibility with Python 2, {@code list}
 * is returned.
 ','line_number':26,'multiline':True]['text':' (derived)','line_number':59,'multiline':False]['text':' compute size.','line_number':68,'multiline':False]['text':' Python version:','line_number':69,'multiline':False]['text':' https://github.com/python/cpython/blob/09bb918a61031377d720f1a0fa1fe53c962791b6/Objects/rangeobject.c#L144','line_number':70,'multiline':False]['text':' [low,high) is a half-open interval','line_number':71,'multiline':False]['text':' constant-time implementation','line_number':103,'multiline':False]['text':' x is not a signed 32-bit int','line_number':110,'multiline':False]['text':' Two RangeLists compare equal if they denote the same sequence.','line_number':145,'multiline':False]['text':' sequences differ in length','line_number':147,'multiline':False]['text':' both sequences are empty','line_number':150,'multiline':False]['text':' first element differs','line_number':153,'multiline':False]['text':' returned by next() if hasNext() is true','line_number':161,'multiline':False]['text':' If cursor is valid, it's guaranteed to be in [start, stop) range, thus a 32-bit value.','line_number':173,'multiline':False]['text':' It is not an error to take a slice of a RangeList such that the slice step * list step','line_number':186,'multiline':False]['text':' doesn't fit in a 32-bit int; the result ought to be a RangeList containing only one','line_number':187,'multiline':False]['text':' element (the start). Since difference between 2 successive elements of a RangeList must be','line_number':188,'multiline':False]['text':' a 32-bit int, clamping the step to Integer.MAX_VALUE or MIN_VALUE and moving stop to start','line_number':189,'multiline':False]['text':' +/- 1 gives us the 1-element RangeList we need.','line_number':190,'multiline':False]['text':' note sliceStep != 0','line_number':191,'multiline':False]['text':' Like get, but without bounds check or Integer allocation.','line_number':201,'multiline':False]