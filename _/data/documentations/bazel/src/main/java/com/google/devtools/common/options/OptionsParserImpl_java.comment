['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * The implementation of the options parser. This is intentionally package private for full
 * flexibility. Use {@link OptionsParser} or {@link Options} if you're a consumer.
 ','line_number':49,'multiline':True]['text':'* Helper class to create a new instance of {@link OptionsParserImpl}. ','line_number':55,'multiline':True]['text':'* Set the {@link OptionsData} to be used in this instance. ','line_number':65,'multiline':True]['text':'* Sets the {@link ArgsPreProcessor} to use during processing. ','line_number':72,'multiline':True]['text':'* Any flags with this prefix will be skipped during processing. ','line_number':79,'multiline':True]['text':'* Sets whether the parser should ignore internal-only options. ','line_number':86,'multiline':True]['text':'*
     * Sets what flag the parser should use for flag aliasing. Defaults to null if not set,
     * effectively disabling the aliasing functionality.
     ','line_number':93,'multiline':True]['text':'*
     * Adds a map of flag aliases where the keys are the flags' alias names and the values are their
     * actual names.
     ','line_number':110,'multiline':True]['text':'* Returns a newly-initialized {@link OptionsParserImpl}. ','line_number':120,'multiline':True]['text':'* Returns a new {@link Builder} with correct defaults applied. ','line_number':133,'multiline':True]['text':'*
   * We store the results of option parsing in here - since there can only be one value per option
   * field, this is where the different instances of an option have been combined and the final
   * value is tracked. It'll look like
   *
   * <pre>
   *   OptionDefinition("--host") -> "www.google.com"
   *   OptionDefinition("--port") -> 80
   * </pre>
   *
   * This map is modified by repeated calls to {@link #parse(OptionPriority.PriorityCategory,
   * Function,List)}.
   ','line_number':140,'multiline':True]['text':'*
   * Since parse() expects multiple calls to it with the same {@link PriorityCategory} to be treated
   * as though the args in the later call have higher priority over the earlier calls, we need to
   * track the high water mark of option priority at each category. Each call to parse will start at
   * this level.
   ','line_number':155,'multiline':True]['text':'*
   * Explicit option tracking, tracking each option as it was provided, after they have been parsed.
   *
   * <p>The value is unconverted, still the string as it was read from the input, or partially
   * altered in cases where the flag was set by non {@code --flag=value} forms; e.g. {@code --nofoo}
   * becomes {@code --foo=0}.
   ','line_number':165,'multiline':True]['text':' We want to keep the invariant that warnings are produced as they are encountered, but only','line_number':177,'multiline':False]['text':' show each one once.','line_number':178,'multiline':False]['text':'*
   * This option is used to collect skipped arguments while preserving the relative ordering between
   * those given explicitly on the command line and those expanded by {@code ConfigExpander}. The
   * field itself is not used for any purpose other than retrieving its {@link Option} annotation.
   ','line_number':186,'multiline':True]['text':'* Returns the {@link OptionsData} used in this instance. ','line_number':230,'multiline':True]['text':'* Returns a {@link Builder} that is configured the same as this parser. ','line_number':240,'multiline':True]['text':'* Implements {@link OptionsParser#asCompleteListOfParsedOptions()}. ','line_number':256,'multiline':True]['text':' It is vital that this sort is stable so that options on the same priority are not','line_number':259,'multiline':False]['text':' reordered.','line_number':260,'multiline':False]['text':'* Implements {@link OptionsParser#asListOfExplicitOptions()}. ','line_number':265,'multiline':True]['text':' It is vital that this sort is stable so that options on the same priority are not','line_number':269,'multiline':False]['text':' reordered.','line_number':270,'multiline':False]['text':'* Implements {@link OptionsParser#canonicalize}. ','line_number':279,'multiline':True]['text':'* Implements {@link OptionsParser#canonicalize}. ','line_number':286,'multiline':True]['text':' Return the effective (canonical) options in the order they were applied.','line_number':292,'multiline':False]['text':'* Implements {@link OptionsParser#asListOfOptionValues()}. ','line_number':297,'multiline':True]['text':' Don't add a warning for deprecated flag set by the invocation policy.','line_number':315,'multiline':False]['text':' Continue to support the old behavior for @Deprecated options.','line_number':319,'multiline':False]['text':' Don't add a warning for old name options set by the invocation policy.','line_number':327,'multiline':False]['text':'*
   * Implementation of {@link OptionsParser#getExpansionValueDescriptions(OptionDefinition,
   * OptionInstanceOrigin)}
   ','line_number':370,'multiline':True]['text':' Values needed to correctly track the origin of the expanded options.','line_number':379,'multiline':False]['text':' fallbackData= ','line_number':417,'multiline':True]['text':'*
   * Parses the args, and returns what it doesn't parse. May be called multiple times, and may be
   * called recursively. The option's definition dictates how it reacts to multiple settings. By
   * default, the arg seen last at the highest priority takes precedence, overriding the early
   * values. Options that accumulate multiple values will track them in priority and appearance
   * order.
   ','line_number':442,'multiline':True]['text':'*
   * Parses the args, and returns what it doesn't parse. May be called multiple times, and may be
   * called recursively. Calls may contain intersecting sets of options; in that case, the arg seen
   * last takes precedence.
   *
   * <p>The method treats options that have neither an implicitDependent nor an expandedFrom value
   * as explicitly set.
   ','line_number':467,'multiline':True]['text':' not an option arg','line_number':493,'multiline':False]['text':' Fail with a helpful error when an invalid option looks like an absolute negative target','line_number':497,'multiline':False]['text':' pattern or a typoed Starlark option.','line_number':498,'multiline':False]['text':' "--" means all remaining args aren't options','line_number':510,'multiline':False]['text':' Parse the skipped arg into a synthetic allowMultiple option to preserve its order','line_number':517,'multiline':False]['text':' relative to skipped args coming from expansions. Simply adding it to the residue would','line_number':518,'multiline':False]['text':' end up placing expanded skipped args after all explicitly given skipped args, which isn't','line_number':519,'multiline':False]['text':' correct.','line_number':520,'multiline':False]['text':' Go through the final values and make sure they are valid values for their option. Unlike any','line_number':552,'multiline':False]['text':' checks that happened above, this also checks that flags that were not set have a valid','line_number':553,'multiline':False]['text':' default value. getValue() will throw if the value is invalid.','line_number':554,'multiline':False]['text':'* A class that stores residue and priority information. ','line_number':563,'multiline':True]['text':'* Implements {@link OptionsParser#parseArgsAsExpansionOfOption} ','line_number':593,'multiline':True]['text':'*
   * Implementation of {@link
   * OptionsParser#setOptionValueAtSpecificPriorityWithoutExpansion(OptionInstanceOrigin,
   * OptionDefinition, String)}
   ','line_number':609,'multiline':True]['text':'* Takes care of tracking the parsed option's value in relation to other options. ','line_number':646,'multiline':True]['text':' fallbackData= ','line_number':661,'multiline':True]['text':' Throw an assertion here, because this indicates an error in the definition of this','line_number':664,'multiline':False]['text':' option's expansion or requirements, not with the input as provided by the user.','line_number':665,'multiline':False]['text':' All options can be deprecated; check and warn before doing any option-type specific work.','line_number':678,'multiline':False]['text':' Check if the old option name is used and add a warning','line_number':680,'multiline':False]['text':' Track the value, before any remaining option-type specific work that is done outside of','line_number':682,'multiline':False]['text':' the OptionValueDescription.','line_number':683,'multiline':False]['text':' There are 3 types of flags that expand to other flag values. Expansion flags are the','line_number':692,'multiline':False]['text':' accepted way to do this, but implicit requirements also do this. We rely on the','line_number':693,'multiline':False]['text':' OptionProcessor compile-time check's guarantee that no option sets','line_number':694,'multiline':False]['text':' both expansion behaviors. (In Bazel, --config is another such flag, but that expansion','line_number':695,'multiline':False]['text':' is not controlled within the options parser, so we ignore it here)','line_number':696,'multiline':False]['text':' As much as possible, we want the behaviors of these different types of flags to be','line_number':698,'multiline':False]['text':' identical, as this minimizes the number of edge cases, but we do not yet track these values','line_number':699,'multiline':False]['text':' in the same way.','line_number':700,'multiline':False]['text':' This may be a Starlark option. Don't parse it here (save it for StarlarkOptionsParser)','line_number':703,'multiline':False]['text':' but keep the context so we can track if the option was explicitly set or not for BEP','line_number':704,'multiline':False]['text':' reporting.','line_number':705,'multiline':False]['text':' Log explicit options and expanded options in the order they are parsed (can be sorted','line_number':708,'multiline':False]['text':' later). This information is needed to correctly canonicalize flags.','line_number':709,'multiline':False]['text':'*
   * Keep the properties of {@link OptionsData} used below in sync with {@link
   * #equivalentForParsing}.
   *
   * <p>If an option is not found in the current {@link OptionsData}, but is found in the specified
   * fallback data, a {@link ParsedOptionDescriptionOrIgnoredArgs} with no {@link
   * ParsedOptionDescription}, but the ignored arguments is returned.
   ','line_number':724,'multiline':True]['text':' Store the way this option was parsed on the command line.','line_number':742,'multiline':False]['text':' -l  (may be nullary or unary)','line_number':750,'multiline':False]['text':' -l-  (boolean)','line_number':754,'multiline':False]['text':' --long_option','line_number':758,'multiline':False]['text':' Look for a "no"-prefixed option name: "no<optionName>".','line_number':770,'multiline':False]['text':' TODO(bazel-team): Add tests for these cases.','line_number':777,'multiline':False]['text':' "no<optionname>" signifies a boolean option w/ false value','line_number':785,'multiline':False]['text':' Do not recognize internal options, which are treated as if they did not exist.','line_number':795,'multiline':False]['text':' Special-case boolean to supply value based on presence of "no" prefix.','line_number':800,'multiline':False]['text':' This is expected, Void type options have no args.','line_number':804,'multiline':False]['text':' "--flag value" form','line_number':806,'multiline':False]['text':' The option was not found on the current command, but is a valid option for some other','line_number':815,'multiline':False]['text':' command. Ignore it.','line_number':816,'multiline':False]['text':'*
   * Two option definitions are considered equivalent for parsing if they result in the same control
   * flow through {@link #identifyOptionAndPossibleArgument}. This is crucial to ensure that the
   * beginning of the next option can be determined unambiguously when parsing with fallback data.
   *
   * <p>Examples:
   *
   * <ul>
   *   <li>Both {@code query} and {@code cquery} have a {@code --output} option, but the options
   *       accept different sets of values (e.g. {@code cquery} has {@code --output=files}, but
   *       {@code query} doesn't. However, since both options accept a string value, they parse
   *       equivalently as far as {@link #identifyOptionAndPossibleArgument} is concerned -
   *       potential failures due to unsupported values occur after parsing, during value
   *       conversion. There is no ambiguity in how many command-line arguments are consumed
   *       depending on which option definition is used.
   *   <li>If the hypothetical {@code foo} command also had a {@code --output} option, but it were
   *       boolean-valued, then the two option definitions would <b>not</b> be equivalent for
   *       parsing: The command line {@code --output --copt=foo} would parse as {@code {"output":
   *       "--copt=foo"}} for the {@code cquery} command, but as {@code {"output": true, "copt":
   *       "foo"}} for the {@code foo} command, thus resulting in parsing ambiguities between the
   *       two commands.
   * </ul>
   ','line_number':838,'multiline':True]['text':' TODO: Replace with a sealed interface unwrapped via pattern matching when available.','line_number':874,'multiline':False]['text':'* Gets the result of parsing the options. ','line_number':918,'multiline':True]['text':' Create the instance:','line_number':920,'multiline':False]['text':' Set the fields','line_number':932,'multiline':False]['text':' May happen when a boolean option got a string value. Just ignore this error without','line_number':945,'multiline':False]['text':' updating the field. Fixes https://github.com/bazelbuild/bazel/issues/7847','line_number':946,'multiline':False]['text':'*
   * Takes a string with a leading "-" and swaps it with the matching alias mapping. Example case
   * with --flag_alias=foo=bar mapped:
   *
   * <pre>
   *   swapShorthandAlias("-c") returns "-c"
   *   swapShorthandAlias("--foo") returns "--bar"
   *   swapShorthandAlias("--baz") returns "--baz"
   * </pre>
   *
   * This method returns immediately when aliasFlag is not set via the builder, which is an implicit
   * disabling of the aliasing functionality.
   ','line_number':961,'multiline':True]['text':' Extracts the <arg> from '--<arg>=<value>' and '--<arg> <value>' formats on the command line','line_number':981,'multiline':False]['text':' Converts the arg back into a command line option, accounting for both '--<arg>=<value>' and','line_number':991,'multiline':False]['text':' '--<arg> <value>' formats','line_number':992,'multiline':False]