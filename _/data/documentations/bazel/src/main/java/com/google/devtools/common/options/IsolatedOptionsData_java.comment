['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * A selection of options data corresponding to a set of {@link OptionsBase} subclasses (options
 * classes). The data is collected using reflection, which can be expensive. Therefore this class
 * can be used internally to cache the results.
 *
 * <p>The data is isolated in the sense that it has not yet been processed to add
 * inter-option-dependent information -- namely, the results of evaluating expansion functions. The
 * {@link OptionsData} subclass stores this added information. The reason for the split is so that
 * we can avoid exposing to expansion functions the effects of evaluating other expansion functions,
 * to ensure that the order in which they run is not significant.
 *
 * <p>This class is immutable so long as the converters and default values associated with the
 * options are immutable.
 ','line_number':32,'multiline':True]['text':' TODO(b/159980134): Can this be folded into OptionsData?','line_number':46,'multiline':False]['text':'*
   * Cache for the options in an OptionsBase.
   *
   * <p>Mapping from options class to a list of all {@code OptionFields} in that class. The map
   * entries are unordered, but the fields in the lists are ordered alphabetically. This caches the
   * work of reflection done for the same {@code optionsBase} across multiple {@link OptionsData}
   * instances, and must be used through the thread safe {@link
   * #getAllOptionDefinitionsForClass(Class)}
   ','line_number':50,'multiline':True]['text':'* Returns all {@code optionDefinitions}, ordered by their option name (not their field name). ','line_number':62,'multiline':True]['text':' Ignore non-@Option annotated fields. Requiring all fields in the','line_number':74,'multiline':False]['text':' OptionsBase to be @Option-annotated requires a depot cleanup.','line_number':75,'multiline':False]['text':'*
   * Mapping from each options class to its no-arg constructor. Entries appear in the same order
   * that they were passed to {@link #from(Collection, boolean)}.
   ','line_number':84,'multiline':True]['text':'*
   * Mapping from option name to {@code OptionDefinition}. Entries appear ordered first by their
   * options class (the order in which they were passed to {@link #from(Collection, boolean)}, and
   * then in alphabetic order within each options class.
   ','line_number':90,'multiline':True]['text':'*
   * For options that have an "OldName", this is a mapping from old name to its corresponding {@code
   * OptionDefinition}. Entries appear ordered first by their options class (the order in which they
   * were passed to {@link #from(Collection, boolean)}, and then in alphabetic order within each
   * options class.
   ','line_number':97,'multiline':True]['text':'* Mapping from option abbreviation to {@code OptionDefinition} (unordered). ','line_number':105,'multiline':True]['text':'*
   * Mapping from each options class to whether or not it has the {@link UsesOnlyCoreTypes}
   * annotation (unordered).
   ','line_number':109,'multiline':True]['text':'*
   * Returns all options classes indexed by this options data object, in the order they were passed
   * to {@link #from(Collection, boolean)}.
   ','line_number':137,'multiline':True]['text':' The construction ensures that the case is always valid.','line_number':145,'multiline':False]['text':'*
   * Returns the option in this parser by the provided name, or {@code null} if none is found. This
   * will match both the canonical name of an option, and any old name listed that we still accept.
   ','line_number':150,'multiline':True]['text':'*
   * Returns all {@link OptionDefinition} objects loaded, mapped by their canonical names. Entries
   * appear ordered first by their options class (the order in which they were passed to {@link
   * #from(Collection, boolean)}, and then in alphabetic order within each options class.
   ','line_number':158,'multiline':True]['text':'*
   * Generic method to check for collisions between the names we give options. Useful for checking
   * both single-character abbreviations and full names.
   ','line_number':175,'multiline':True]['text':'*
   * All options, even non-boolean ones, should check that they do not conflict with previously
   * loaded boolean options.
   ','line_number':197,'multiline':True]['text':'*
   * For an {@code option} of boolean type, this checks that the boolean alias does not conflict
   * with other names, and adds the boolean alias to a list so that future flags can find if they
   * conflict with a boolean alias..
   ','line_number':215,'multiline':True]['text':' Check that the negating alias does not conflict with existing flags.','line_number':228,'multiline':False]['text':' Record that the boolean option takes up additional namespace for its negating alias.','line_number':242,'multiline':False]['text':'*
   * Constructs an {@link IsolatedOptionsData} object for a parser that knows about the given {@link
   * OptionsBase} classes. No inter-option analysis is done. Performs basic validity checks on each
   * option in isolation.
   *
   * <p>If {@code allowDuplicatesParsingEquivalently} is true, then options that collide in name but
   * parse equivalently (e.g. both of them accept a value or both of them do not), are allowed.
   ','line_number':246,'multiline':True]['text':' Mind which fields have to preserve order.','line_number':257,'multiline':False]['text':' Maps the negated boolean flag aliases to the original option name.','line_number':263,'multiline':False]['text':' Combine the option definitions for these options classes, and check that they do not','line_number':268,'multiline':False]['text':' conflict. The options are individually checked for correctness at compile time in the','line_number':269,'multiline':False]['text':' OptionProcessor.','line_number':270,'multiline':False]['text':' If boolean, repeat the alias dance for the old name.','line_number':324,'multiline':False]['text':' Now that we've checked for conflicts, confidently store the old name.','line_number':334,'multiline':False]['text':' Validate that @UsesOnlyCoreTypes was used correctly.','line_number':353,'multiline':False]['text':' The classes in coreTypes are all final. But even if they weren't, we only want to check','line_number':355,'multiline':False]['text':' for exact matches; subclasses would not be considered core types.','line_number':356,'multiline':False]