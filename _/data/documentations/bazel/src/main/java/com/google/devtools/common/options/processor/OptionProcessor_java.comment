['text':' Copyright 2017 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * Annotation processor for {@link Option}.
 *
 * <p>Checks the following invariants about {@link Option}-annotated fields ("options"):
 *
 * <ul>
 *   <li>The {@link OptionsParser} only accepts options in {@link OptionsBase}-inheriting classes
 *   <li>All options must be declared publicly and be neither static nor final.
 *   <li>All options that must be used on the command line must have sensible names without
 *       whitespace or other confusing characters, such as equal signs.
 *   <li>The type of the option must match the converter that will convert the unparsed string value
 *       into the option type. For options that do not specify a converter, check that there is a
 *       valid match in the {@link Converters#DEFAULT_CONVERTERS} list.
 *   <li>Options must list valid combinations of tags and documentation categories.
 *   <li>Expansion options and options with implicit requirements cannot expand in more than one
 *       way, how multiple expansions would interact is not defined and should not be necessary.
 *   <li>Multiple options must not declare default value (see {@link
 *       #MULTIPLE_OPTIONS_DEFAULT_VALUE_EXCEPTIONS} for exceptions).
 * </ul>
 *
 * <p>These properties can be relied upon at runtime without additional checks.
 ','line_number':55,'multiline':True]['text':' Because of the discrepancies between the java.lang and javax.lang type models, we can't','line_number':98,'multiline':False]['text':' directly use the get() method for the default converter map. Instead, we'll convert it once,','line_number':99,'multiline':False]['text':' to be more usable, and with the boxed type return values of convert() as the keys.','line_number':100,'multiline':False]['text':' Create a link from the primitive Classes to their primitive types. This intentionally','line_number':104,'multiline':False]['text':' only contains the types in the DEFAULT_CONVERTERS map.','line_number':105,'multiline':False]['text':' Check that we can get a type mirror, either through the type element or the primitive type.','line_number':117,'multiline':False]['text':' Add the primitive types to the map, both in primitive TypeMirror form, and the boxed','line_number':127,'multiline':False]['text':' classes, such as java.lang.Integer, because primitives must be boxed in collections,','line_number':128,'multiline':False]['text':' such as allowMultiple options, which have type List<singleOptionType>.','line_number':129,'multiline':False]['text':'* Check that the Option variables only occur in OptionBase-inheriting classes. ','line_number':138,'multiline':True]['text':'*
   * Checks that the Option variables is public and neither final nor static.
   *
   * <p>Private or protected fields would prevent the options parser from having full access to the
   * fields it's expected to read, and {@link OptionsBase} equality would not work as intended.
   *
   * <p>Static or final fields would cause issue with correct value assigning at the end of parsing.
   ','line_number':153,'multiline':True]['text':' Options that accumulate multiple mentions in an arglist must have type List<T>, where each','line_number':180,'multiline':False]['text':' individual mention has type T. Identify type T to use it for checking the converter's return','line_number':181,'multiline':False]['text':' type.','line_number':182,'multiline':False]['text':' Check that the option type is in fact a list.','line_number':184,'multiline':False]['text':' Check that there is only one generic parameter, and store it as the singular option type.','line_number':202,'multiline':False]['text':' For repeated options, we also accept cases where each option itself contains a list, which','line_number':214,'multiline':False]['text':' are then concatenated into the final single list type. For this reason, we will accept both','line_number':215,'multiline':False]['text':' converters that return the type of a single option, and List<singleOption>, which,','line_number':216,'multiline':False]['text':' incidentally, is the original optionType.','line_number':217,'multiline':False]['text':' Example: --foo=a,b,c --foo=d,e,f could have a final value of type List<Char>,','line_number':218,'multiline':False]['text':'       value {a,b,c,e,d,f}, instead of requiring a final value of type List<List<Char>>','line_number':219,'multiline':False]['text':'       value {{a,b,c},{d,e,f}}','line_number':220,'multiline':False]['text':' This return type isn't a match, move on to the next one in case.','line_number':237,'multiline':False]['text':' For the default converters, it so happens we have access to the convert methods','line_number':243,'multiline':False]['text':' at compile time, since we already have the OptionsParser source. Take advantage of','line_number':244,'multiline':False]['text':' this to test that the provided defaultValue is valid.','line_number':245,'multiline':False]['text':'conversionContext=','line_number':246,'multiline':True]['text':' throwable = ','line_number':250,'multiline':True]['text':' This one passes the test.','line_number':256,'multiline':False]['text':' We didn't find a default converter.','line_number':259,'multiline':False]['text':' Unfortunately, for provided classes, we do not have access to the compiled convert','line_number':278,'multiline':False]['text':' method at this time, and cannot check that the default value is parseable. We will','line_number':279,'multiline':False]['text':' instead check that T of Converter<T> matches the option's type, but this is all we can','line_number':280,'multiline':False]['text':' do.','line_number':281,'multiline':False]['text':' Check that there is just the one method','line_number':297,'multiline':False]['text':' Check that the converter's return type is in the accepted list.','line_number':310,'multiline':False]['text':' This one passes the test.','line_number':313,'multiline':False]['text':' For simple, static expansions, don't accept non-Void types.','line_number':329,'multiline':False]['text':' Obtain the converter for this option.','line_number':338,'multiline':False]['text':' Find a matching converter in the default converter list, and check that it successfully','line_number':350,'multiline':False]['text':' parses the default value for this option.','line_number':351,'multiline':False]['text':' Check that the provided converter has an accepted return type.','line_number':355,'multiline':False]['text':'*
   * Check that the option lists at least one effect, and that no nonsensical combinations are
   * listed, such as having a known effect listed with UNKNOWN.
   ','line_number':360,'multiline':True]['text':' Check that there is at least one OptionEffectTag listed.','line_number':368,'multiline':False]['text':' If there are more than 1 tag, make sure that NO_OP and UNKNOWN is not one of them.','line_number':375,'multiline':False]['text':' These don't make sense if other effects are listed.','line_number':376,'multiline':False]['text':'*
   * Check that if the metadata tags listed by an option require the option to be unknown by the
   * average user, the same option will be omitted from documentation.
   ','line_number':393,'multiline':True]['text':'* These categories used to indicate whether a flag was documented, but no longer. ','line_number':415,'multiline':True]['text':' Specifically for non-internal options, which are flags intended to be used on the command','line_number':438,'multiline':False]['text':' line, check that there are no weird characters or whitespace.','line_number':439,'multiline':False]['text':' Ideally, this would be just \w, but - and : are needed for legacy options. We can lie in','line_number':442,'multiline':False]['text':' the error though, no harm in encouraging good behavior.','line_number':443,'multiline':False]['text':'*
   * Some flags expand to other flags, either in place, or with "implicit requirements" that get
   * added on top of the flag's value. Don't let these flags do too many crazy things, dealing with
   * this is enough.
   ','line_number':452,'multiline':True]['text':'*
   * Options that are allowed to have default values.
   *
   * <p>DO NOT ADD new (especially production) options here - the long-term goal is to prohibit
   * multiple options to have default values.
   ','line_number':481,'multiline':True]['text':' Multiple options used in OptionDefinitionTest','line_number':489,'multiline':False]['text':' Production multiple options that still have default value.','line_number':492,'multiline':False]['text':' Mostly due to backward compatibility reasons.','line_number':493,'multiline':False]['text':' Only fields are annotated with Option, this should already be checked by the','line_number':520,'multiline':False]['text':' @Target(ElementType.FIELD) annotation.','line_number':521,'multiline':False]['text':'*
   * Prints an error message & fails the compilation.
   *
   * @param e The element which has caused the error. Can be null
   * @param msg The error message
   ','line_number':540,'multiline':True]