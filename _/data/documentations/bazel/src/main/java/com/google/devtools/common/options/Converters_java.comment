['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'* Some convenient converters used by blaze. Note: These are specific to blaze. ','line_number':35,'multiline':True]['text':'*
   * The name of the flag used for shorthand aliasing in blaze. {@see
   * com.google.devtools.build.lib.analysis.config.CoreOptions#commandLineFlagAliases} for the
   * option definition.
   ','line_number':37,'multiline':True]['text':'* Standard converter for booleans. Accepts common shorthands/synonyms. ','line_number':50,'multiline':True]['text':'* Standard converter for Strings. ','line_number':73,'multiline':True]['text':'* Standard converter for integers. ','line_number':86,'multiline':True]['text':'* Standard converter for longs. ','line_number':103,'multiline':True]['text':'* Standard converter for doubles. ','line_number':120,'multiline':True]['text':'* Standard converter for TriState values. ','line_number':137,'multiline':True]['text':'*
   * Standard "converter" for Void. Should not actually be invoked. For instance, expansion flags
   * are usually Void-typed and do not invoke the converter.
   ','line_number':163,'multiline':True]['text':' expected input, return is unused so null is fine.','line_number':171,'multiline':False]['text':'* Standard converter for the {@link java.time.Duration} type. ','line_number':182,'multiline':True]['text':' To be compatible with the previous parser, '0' doesn't need a unit.','line_number':188,'multiline':False]['text':' 1:1 correspondence with UsesOnlyCoreTypes.CORE_TYPES.','line_number':221,'multiline':False]['text':'*
   * The converters that are available to the options parser by default. These are used if the
   * {@code @Option} annotation does not specify its own {@code converter}, and its type is one of
   * the following.
   ','line_number':222,'multiline':True]['text':'*
   * Join a list of words as in English. Examples: "nothing" "one" "one or two" "one and two" "one,
   * two or three". "one, two and three". The toString method of each element is used.
   ','line_number':239,'multiline':True]['text':'* Converter for a list of options, separated by some separator character. ','line_number':255,'multiline':True]['text':' If the list contains exactly the empty string, it means an empty value was passed and we','line_number':274,'multiline':False]['text':' should instead return an empty list.','line_number':275,'multiline':False]['text':'*
   * Converter for options separated by some separator character, where order and count do not
   * matter, i.e. semantically it is a set, not a list.
   ','line_number':292,'multiline':True]['text':'*
   * Converter for comma separated values, where
   * <li>order and multiplicity preserved
   * <li>empty values are preserved
   ','line_number':317,'multiline':True]['text':'*
   * Converter for comma separated values, where
   * <li>order and multiplicity preserved
   * <li>empty values are filtered out
   ','line_number':328,'multiline':True]['text':'*
   * Converter for colon separated values, where
   * <li>order and multiplicity preserved
   * <li>empty values are preserved
   ','line_number':340,'multiline':True]['text':'*
   * Converter for colon separated values, where
   * <li>order and multiplicity are assumed to not matter
   * <li>empty values are preserved
   ','line_number':351,'multiline':True]['text':'* Converter for {@link Level}. ','line_number':362,'multiline':True]['text':'* Checks whether a string is part of a set of strings. ','line_number':391,'multiline':True]['text':' TODO(bazel-team): if this class never actually contains duplicates, we could s/List/Set/','line_number':394,'multiline':False]['text':' here.','line_number':395,'multiline':False]['text':'* Checks whether a string is a valid regex pattern and compiles it. ','line_number':417,'multiline':True]['text':'* Limits the length of a string argument. ','line_number':435,'multiline':True]['text':'* Checks whether an integer is in the given range. ','line_number':457,'multiline':True]['text':'*
   * A converter for variable assignments from the parameter list of a blaze command invocation.
   * Assignments are expected to have the form "name=value", where names and values are defined to
   * be as permissive as possible.
   ','line_number':502,'multiline':True]['text':'* A converter for for assignments from a string value to a float value. ','line_number':527,'multiline':True]['text':'*
   * A converter for command line flag aliases. It does additional validation on the name and value
   * of the assignment to ensure they conform to the naming limitations.
   ','line_number':545,'multiline':True]['text':' Remove this check if native options are permitted to be aliased','line_number':569,'multiline':False]['text':'*
   * Base converter for assignments from a value to a list of values. Both the key type as well as
   * the type for all instances in the list of values are processed via passed converters.
   ','line_number':585,'multiline':True]['text':'* Whether to allow keys in the assignment to be empty (i.e. just a list of values) ','line_number':592,'multiline':True]['text':' If the list contains exactly the empty string, it means an empty value was passed and we','line_number':623,'multiline':False]['text':' should instead return an empty list.','line_number':624,'multiline':False]['text':'*
   * A converter for variable assignments from the parameter list of a blaze command invocation.
   * Assignments are expected to have the form {@code [name=]value1[,..,valueN]}, where names and
   * values are defined to be as permissive as possible. If no name is provided, "" is used.
   ','line_number':641,'multiline':True]['text':' conversionContext= ','line_number':654,'multiline':True]['text':'*
   * A converter for variable assignments from the parameter list of a blaze command invocation.
   * Assignments are expected to have the form "name[=value]", where names and values are defined to
   * be as permissive as possible and value part can be optional (in which case it is considered to
   * be null).
   ','line_number':663,'multiline':True]['text':'*
   * A converter for named integers of the form "[name=]value". When no name is specified, an empty
   * string is used for the key.
   ','line_number':706,'multiline':True]['text':'*
   * A converter to check whether an integer denoting a percentage is in a valid range: [0, 100].
   ','line_number':747,'multiline':True]['text':'*
   * A {@link Converter} for {@link com.github.benmanes.caffeine.cache.CaffeineSpec}. The spec may
   * be empty, in which case this converter returns null.
   ','line_number':756,'multiline':True]