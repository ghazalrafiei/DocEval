['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * Base class for all options classes. Extend this class, adding public instance fields annotated
 * with {@link Option}. Then you can create instances either programmatically:
 *
 * <pre>
 *   X x = Options.getDefaults(X.class);
 *   x.host = "localhost";
 *   x.port = 80;
 * </pre>
 *
 * or from an array of command-line arguments:
 *
 * <pre>
 *   OptionsParser parser = OptionsParser.builder()
 *       .optionsClasses(X.class)
 *       .build();
 *   parser.parse("--host", "localhost", "--port", "80");
 *   X x = parser.getOptions(X.class);
 * </pre>
 *
 * <p>Subclasses of {@code OptionsBase} <i>must</i> be constructed reflectively, i.e. using not
 * {@code new MyOptions()}, but one of the above methods instead. (Direct construction creates an
 * empty instance, not containing default values. This leads to surprising behavior and often {@code
 * NullPointerExceptions}, etc.)
 ','line_number':24,'multiline':True]['text':'* Subclasses must provide a default (no argument) constructor. ','line_number':54,'multiline':True]['text':' There used to be a validation here that checks the stack trace of this constructor','line_number':56,'multiline':False]['text':' invocation; unfortunately, that makes the options construction about 10x slower. So be','line_number':57,'multiline':False]['text':' careful with how you construct options classes.','line_number':58,'multiline':False]['text':'*
   * Returns a mapping from option names to values, for each option on this object, including
   * inherited ones. The mapping is a copy, so subsequent mutations to it or to this object are
   * independent. Entries are sorted alphabetically.
   ','line_number':61,'multiline':True]['text':'* Returns the value of the option described by {@code definition}. ','line_number':75,'multiline':True]['text':'*
   * Returns a string that uniquely identifies the options. This value is
   * intended for analysis caching.
   ','line_number':89,'multiline':True]['text':' This special case is needed because List.toString() prints the same','line_number':105,'multiline':False]['text':' ("[]") for an empty list and for a list with a single empty string.','line_number':106,'multiline':False]['text':' Options can only be equal if they are of the same type.','line_number':123,'multiline':False]