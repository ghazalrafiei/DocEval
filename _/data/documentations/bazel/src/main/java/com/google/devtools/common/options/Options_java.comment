['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * Interface for parsing options from a single options specification class.
 *
 * <p>The {@link Options#parse(Class, String...)} method in this class has no clear use case.
 * Instead, use the {@link OptionsParser} class directly, as in this code snippet:
 *
 * <pre>
 * OptionsParser parser = OptionsParser.builder()
 *     .optionsClasses(FooOptions.class)
 *     .build();
 * try {
 *   parser.parse(FooOptions.class, args);
 * } catch (OptionsParsingException e) {
 *   System.err.print("Error parsing options: " + e.getMessage());
 *   System.err.print(options.getUsage());
 *   System.exit(1);
 * }
 * FooOptions foo = parser.getOptions(FooOptions.class);
 * List&lt;String&gt; otherArguments = parser.getResidue();
 * </pre>
 *
 * Using this class in this case actually results in more code.
 *
 * @see OptionsParser for parsing options from multiple options specification classes.
 ','line_number':21,'multiline':True]['text':'*
   * Parse the options provided in args, given the specification in
   * optionsClass.
   ','line_number':48,'multiline':True]['text':'*
   * A convenience function for use in main methods. Parses the command line parameters, and exits
   * upon error. Also, prints out the usage message if "--help" appears anywhere within {@code
   * args}.
   ','line_number':60,'multiline':True]['text':'*
   * Returns an options object at its default values.  The returned object may
   * be freely modified by the caller, by assigning its fields.
   ','line_number':80,'multiline':True]['text':'*
   * Returns a usage string (renders the help information, the defaults, and
   * of course the option names).
   ','line_number':93,'multiline':True]['text':'*
   * Returns an instance of options class O.
   ','line_number':111,'multiline':True]['text':'*
   * Returns the arguments that we didn't parse.
   ','line_number':118,'multiline':True]