['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' On OSX, there apparently is no header that defines this.','line_number':37,'multiline':False]['text':' Process the startup options.','line_number':86,'multiline':False]['text':' If the current argument is a valid nullary startup option such as','line_number':98,'multiline':False]['text':' --master_bazelrc or --nomaster_bazelrc proceed to examine the next','line_number':99,'multiline':False]['text':' argument.','line_number':100,'multiline':False]['text':' If the current argument is a valid unary startup option such as','line_number':105,'multiline':False]['text':' --bazelrc there are two cases to consider.','line_number':106,'multiline':False]['text':' The option is of the form '--bazelrc=value', hence proceed to','line_number':108,'multiline':False]['text':' examine the next argument.','line_number':109,'multiline':False]['text':' Otherwise, the option is of the form '--bazelrc value', hence','line_number':114,'multiline':False]['text':' skip the next argument and proceed to examine the argument located','line_number':115,'multiline':False]['text':' two places after.','line_number':116,'multiline':False]['text':' In this case we transform it to the form '--bazelrc=value'.','line_number':127,'multiline':False]['text':' If the current argument is not a valid unary or nullary startup option','line_number':133,'multiline':False]['text':' then fail.','line_number':134,'multiline':False]['text':' The command is the arg right after the startup options.','line_number':144,'multiline':False]['text':' The rest are the command arguments.','line_number':151,'multiline':False]['text':' The actual rc file reading will catch this - we ignore this here in the','line_number':167,'multiline':False]['text':' legacy version since this is just a warning. Exit eagerly though.','line_number':168,'multiline':False]['text':' Find the old list of rc files that would have been loaded here, so we can','line_number':194,'multiline':False]['text':' provide a useful warning about old rc files that might no longer be read.','line_number':195,'multiline':False]['text':' Divide the cases where the vector is empty vs not, as','line_number':206,'multiline':False]['text':' `FindLegacyUserBazelrc` has a case for rc_file to be a nullptr.','line_number':207,'multiline':False]['text':' DedupeBlazercPaths returns paths whose canonical path could be computed,','line_number':223,'multiline':False]['text':' therefore these paths must exist.','line_number':224,'multiline':False]['text':' Deduplicates the given paths based on their canonical form.','line_number':231,'multiline':False]['text':' Computes the canonical form using blaze_util::MakeCanonical.','line_number':232,'multiline':False]['text':' Returns the unique paths in their original form (not the canonical one).','line_number':233,'multiline':False]['text':' MakeCanonical returns an empty string when it fails. We ignore this','line_number':241,'multiline':False]['text':' failure since blazerc paths may point to invalid locations.','line_number':242,'multiline':False]['text':' We check readability before parsing, so this is unexpected for','line_number':278,'multiline':False]['text':' top-level rc files, so is an INTERNAL_ERROR. It can happen for imported','line_number':279,'multiline':False]['text':' files, however, which should be BAD_ARGV, but we don't currently','line_number':280,'multiline':False]['text':' differentiate.','line_number':281,'multiline':False]['text':' TODO(bazel-team): fix RcFile to reclassify unreadable files that were','line_number':282,'multiline':False]['text':' read from a recursive call due to a malformed import.','line_number':283,'multiline':False]['text':' The first rc file in the queue is the top-level one, the one that would','line_number':295,'multiline':False]['text':' have imported all the others in the queue. The top-level rc is one of the','line_number':296,'multiline':False]['text':' default locations (system, workspace, home) or the explicit path passed by','line_number':297,'multiline':False]['text':' --bazelrc.','line_number':298,'multiline':False]['text':' First check if each of the newly loaded rc files was already read.','line_number':303,'multiline':False]['text':' Now check if the top-level rc file loads up its own duplicates (it can't','line_number':318,'multiline':False]['text':' be a cycle, since that would be an error and we would have already','line_number':319,'multiline':False]['text':' exited, but it could have a diamond dependency of some sort.)','line_number':320,'multiline':False]['text':' namespace internal','line_number':342,'multiline':False]['text':' TODO(#4502) Consider simplifying result_rc_files to a vector of RcFiles, no','line_number':344,'multiline':False]['text':' unique_ptrs.','line_number':345,'multiline':False]['text':' Get the system rc (unless --nosystem_rc).','line_number':356,'multiline':False]['text':' MakeAbsoluteAndResolveEnvvars will standardize the form of the','line_number':358,'multiline':False]['text':' provided path. This also means we accept relative paths, which is','line_number':359,'multiline':False]['text':' is convenient for testing.','line_number':360,'multiline':False]['text':' Get the workspace rc: %workspace%/.bazelrc (unless --noworkspace_rc), but','line_number':366,'multiline':False]['text':' only if we are in a workspace: invoking commands like "help" from outside','line_number':367,'multiline':False]['text':' a workspace should work.','line_number':368,'multiline':False]['text':' Get the user rc: $HOME/.bazelrc (unless --nohome_rc)','line_number':376,'multiline':False]['text':' Get the command-line provided rc, passed as --bazelrc or nothing if the','line_number':384,'multiline':False]['text':' flag is absent.','line_number':385,'multiline':False]['text':' Unlike the previous 3 paths, where we ignore it if the file does not','line_number':390,'multiline':False]['text':' exist or is unreadable, since this path is explicitly passed, this is an','line_number':391,'multiline':False]['text':' error. Check this condition here.','line_number':392,'multiline':False]['text':' Log which files we're looking for before removing duplicates and','line_number':401,'multiline':False]['text':' non-existent files, so that this can serve to debug why a certain file is','line_number':402,'multiline':False]['text':' not being read. The final files which are read will be logged as they are','line_number':403,'multiline':False]['text':' parsed, and can be found using --announce_rc.','line_number':404,'multiline':False]['text':' It's possible that workspace == home, that files are symlinks for each','line_number':409,'multiline':False]['text':' other, or that the --bazelrc flag is a duplicate. Dedupe them to minimize','line_number':410,'multiline':False]['text':' the likelihood of repeated options. Since bazelrcs can include one another,','line_number':411,'multiline':False]['text':' this isn't sufficient to prevent duplicate options, so we also warn if we','line_number':412,'multiline':False]['text':' discover duplicate loads later. This also has the effect of removing paths','line_number':413,'multiline':False]['text':' that don't point to real files.','line_number':414,'multiline':False]['text':' Parse these potential files, in priority order;','line_number':418,'multiline':False]['text':' Check that none of the rc files loaded this time are duplicate.','line_number':427,'multiline':False]['text':' Provide a warning for any old file that might have been missed with the new','line_number':435,'multiline':False]['text':' expectations. This compares "canonical" paths to one another, so should not','line_number':436,'multiline':False]['text':' require additional transformation.','line_number':437,'multiline':False]['text':' TODO(b/36168162): Remove this warning along with','line_number':438,'multiline':False]['text':' internal::GetOldRcPaths and internal::FindLegacyUserBazelrc after','line_number':439,'multiline':False]['text':' the transition period has passed.','line_number':440,'multiline':False]['text':' Read the rc files, unless --ignore_all_rc_files was provided on the command','line_number':488,'multiline':False]['text':' line. This depends on the startup options in argv since these may contain','line_number':489,'multiline':False]['text':' other rc-modifying options. For all other options, the precedence of','line_number':490,'multiline':False]['text':' options will be rc first, then command line options, though, despite this','line_number':491,'multiline':False]['text':' exception.','line_number':492,'multiline':False]['text':' The helpers expect regular pointers, not unique_ptrs.','line_number':503,'multiline':False]['text':' Parse the startup options in the correct priority order.','line_number':508,'multiline':False]['text':' Print the startup flags in the order they are parsed, to keep the','line_number':533,'multiline':False]['text':' precedence clear. In order to minimize the number of lines of output in','line_number':534,'multiline':False]['text':' the terminal, group sequential flags by origin. Note that an rc file may','line_number':535,'multiline':False]['text':' turn up multiple times in this list, if, for example, it imports another','line_number':536,'multiline':False]['text':' rc file and contains startup options on either side of the import','line_number':537,'multiline':False]['text':' statement. This is done intentionally to make option priority clear.','line_number':538,'multiline':False]['text':' Start accumulating again.','line_number':547,'multiline':False]['text':' Don't forget to print out the last ones.','line_number':553,'multiline':False]['text':' Rc files can import other files at any point, and these imported rcs are','line_number':559,'multiline':False]['text':' expanded in place. Here, we isolate just the startup options but keep the','line_number':560,'multiline':False]['text':' file they came from attached for the option_sources tracking and for','line_number':561,'multiline':False]['text':' sending to the server.','line_number':562,'multiline':False]['text':' We do not care about locale. All variable names are ASCII.','line_number':608,'multiline':False]['text':' not defined(_WIN32)','line_number':616,'multiline':False]['text':' A valid Windows path "c:/foo" is also a valid Unix path list of','line_number':625,'multiline':False]['text':' ["c", "/foo"] so must use ConvertPath here. See GitHub issue #1684.','line_number':626,'multiline':False]['text':' Non-Windows platforms.','line_number':631,'multiline':False]['text':' do nothing.','line_number':634,'multiline':False]['text':' defined(_WIN32)','line_number':636,'multiline':False]['text':' IMPORTANT: The options added here do not come from the user. In order for','line_number':650,'multiline':False]['text':' their source to be correctly tracked, the options must either be passed','line_number':651,'multiline':False]['text':' as --default_override=0, 0 being "client", or must be listed in','line_number':652,'multiline':False]['text':' BlazeOptionHandler.INTERNAL_COMMAND_OPTIONS!','line_number':653,'multiline':False]['text':' Provide terminal options as coming from the least important rc file.','line_number':658,'multiline':False]['text':' Map .blazerc numbers to filenames. The indexes here start at 1 because #0','line_number':671,'multiline':False]['text':' is reserved the "client" options created by this function.','line_number':672,'multiline':False]['text':' Deduplicate the rc_source list because the same file might be included','line_number':677,'multiline':False]['text':' from multiple places.','line_number':678,'multiline':False]['text':' Add RcOptions as default_overrides.','line_number':687,'multiline':False]['text':' Skip startup flags, which are already parsed by the client.','line_number':691,'multiline':False]['text':' Pass the client environment to the server.','line_number':705,'multiline':False]['text':' When the user didn't specify a command, the server expects the command','line_number':715,'multiline':False]['text':' arguments to be empty in order to display the help message.','line_number':716,'multiline':False]['text':' namespace blaze','line_number':743,'multiline':False]