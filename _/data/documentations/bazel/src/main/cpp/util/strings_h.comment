['text':' Copyright 2014 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' unique_ptr','line_number':17,'multiline':False]['text':' Returns the string representation of `value`.','line_number':27,'multiline':False]['text':' Workaround for mingw where std::to_string is not implemented.','line_number':28,'multiline':False]['text':' See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52015.','line_number':29,'multiline':False]['text':' Space characters according to Python: chr(i).isspace()','line_number':41,'multiline':False]['text':' TAB','line_number':43,'multiline':False]['text':' LF','line_number':44,'multiline':False]['text':' VT (vertical tab)','line_number':45,'multiline':False]['text':' FF (form feed)','line_number':46,'multiline':False]['text':' CR','line_number':47,'multiline':False]['text':' space','line_number':48,'multiline':False]['text':' Matches a prefix (which must be a char* literal!) against the beginning of','line_number':57,'multiline':False]['text':' str. Returns a pointer past the prefix, or nullptr if the prefix wasn't','line_number':58,'multiline':False]['text':' matched. (Like the standard strcasecmp(), but for efficiency doesn't call','line_number':59,'multiline':False]['text':' strlen() on prefix, and returns a pointer rather than an int.)','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':' The ""'s catch people who don't pass in a literal for "prefix"','line_number':62,'multiline':False]['text':' Matches a prefix; returns a pointer past the prefix, or nullptr if not found.','line_number':70,'multiline':False]['text':' (Like strprefix() and strcaseprefix() but not restricted to searching for','line_number':71,'multiline':False]['text':' char* literals). Templated so searching a const char* returns a const char*,','line_number':72,'multiline':False]['text':' and searching a non-const char* returns a non-const char*.','line_number':73,'multiline':False]['text':' Matches a prefix; returns a pointer past the prefix, or nullptr if not found.','line_number':74,'multiline':False]['text':' (Like strprefix() and strcaseprefix() but not restricted to searching for','line_number':75,'multiline':False]['text':' char* literals). Templated so searching a const char* returns a const char*,','line_number':76,'multiline':False]['text':' and searching a non-const char* returns a non-const char*.','line_number':77,'multiline':False]['text':' Join the elements of pieces separated by delimeter.  Returns the joined','line_number':84,'multiline':False]['text':' string in output.','line_number':85,'multiline':False]['text':' Splits contents by delimeter.  Skips empty subsections.','line_number':89,'multiline':False]['text':' Same as above, but adds results to output.','line_number':93,'multiline':False]['text':' Same as above, but adds results to output. Returns number of elements added.','line_number':97,'multiline':False]['text':' Global replace of oldsub with newsub.','line_number':101,'multiline':False]['text':' Removes whitespace from both ends of a string.','line_number':105,'multiline':False]['text':' Tokenizes str on whitespace and places the tokens in words. Splits on spaces,','line_number':108,'multiline':False]['text':' newlines, carriage returns, and tabs. Respects single and double quotes (that','line_number':109,'multiline':False]['text':' is, "a string of 'some stuff'" would be 4 tokens). If the comment character','line_number':110,'multiline':False]['text':' is found (outside of quotes), the rest of the string will be ignored. Any','line_number':111,'multiline':False]['text':' token can be escaped with \, e.g., "this\\ is\\ one\\ token".','line_number':112,'multiline':False]['text':' Evaluate a format string and store the result in 'str'.','line_number':116,'multiline':False]['text':' Convert str to lower case. No locale handling, this is just for ASCII.','line_number':119,'multiline':False]['text':' Convert UTF-16 string to ASCII (using the Active Code Page).','line_number':125,'multiline':False]['text':' Convert UTF-16 string to UTF-8.','line_number':129,'multiline':False]['text':' Convert UTF-8 string to UTF-16.','line_number':133,'multiline':False]['text':' Deprecated. Use WcsToAcp or WcsToUtf8.','line_number':137,'multiline':False]['text':' Deprecated. Use AcpToWcs or Utf8ToWcs.','line_number':140,'multiline':False]['text':' defined(_WIN32) || defined(__CYGWIN__)','line_number':142,'multiline':False]['text':' namespace blaze_util','line_number':144,'multiline':False]['text':' BAZEL_SRC_MAIN_CPP_UTIL_STRINGS_H_','line_number':146,'multiline':False]