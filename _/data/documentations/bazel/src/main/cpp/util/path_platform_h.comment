['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Platform-native, absolute, normalized path.','line_number':21,'multiline':False]['text':' It can be converted to a printable path (for error messages) or to a native','line_number':22,'multiline':False]['text':' path (for API calls).','line_number':23,'multiline':False]['text':' Returns the canonical form (like realpath(1)) of this path.','line_number':38,'multiline':False]['text':' All symlinks in the path are resolved.','line_number':39,'multiline':False]['text':' If canonicalization fails, returns an empty Path.','line_number':40,'multiline':False]['text':' Returns a printable string representing this path.','line_number':45,'multiline':False]['text':' Only use when printing user messages, do not pass to filesystem API','line_number':46,'multiline':False]['text':' functions.','line_number':47,'multiline':False]['text':' Returns a string representation of this path that's safe to pass on the','line_number':50,'multiline':False]['text':' command line as a JVM argument.','line_number':51,'multiline':False]['text':' Returns a string representation of this path, safe to pass to the Bazel','line_number':54,'multiline':False]['text':' server.','line_number':55,'multiline':False]['text':' Returns a platform-native, absolute, normalized path.','line_number':59,'multiline':False]['text':' Use this to pass paths to filesystem API functions.','line_number':60,'multiline':False]['text':' Returns a platform-native, absolute, normalized path.','line_number':63,'multiline':False]['text':' Use this to pass paths to filesystem API functions.','line_number':64,'multiline':False]['text':' Convert a path from Bazel internal form to underlying OS form.','line_number':77,'multiline':False]['text':' On Unixes this is an identity operation.','line_number':78,'multiline':False]['text':' On Windows, Bazel internal form is cygwin path, and underlying OS form','line_number':79,'multiline':False]['text':' is Windows path.','line_number':80,'multiline':False]['text':' Converts `path` to a string that's safe to pass as path in a JVM flag.','line_number':83,'multiline':False]['text':' See https://github.com/bazelbuild/bazel/issues/2576','line_number':84,'multiline':False]['text':' Compares two absolute paths. Necessary because the same path can have','line_number':87,'multiline':False]['text':' multiple different names under msys2: "C:\foo\bar" or "C:/foo/bar"','line_number':88,'multiline':False]['text':' (Windows-style) and "/c/foo/bar" (msys2 style). Returns if the paths are','line_number':89,'multiline':False]['text':' equal.','line_number':90,'multiline':False]['text':' Split a path to dirname and basename parts.','line_number':93,'multiline':False]['text':' Returns true if `path` is the root directory or a Windows drive root.','line_number':98,'multiline':False]['text':' Returns true if `path` is absolute.','line_number':102,'multiline':False]['text':' Returns the given path in absolute form.  Does not change paths that are','line_number':105,'multiline':False]['text':' already absolute.','line_number':106,'multiline':False]['text':'','line_number':107,'multiline':False]['text':' If called from working directory "/bar":','line_number':108,'multiline':False]['text':'   MakeAbsolute("foo") --> "/bar/foo"','line_number':109,'multiline':False]['text':'   MakeAbsolute("/foo") ---> "/foo"','line_number':110,'multiline':False]['text':'   MakeAbsolute("C:/foo") ---> "C:/foo"','line_number':111,'multiline':False]['text':' Returns the given path in absolute form, taking into account a','line_number':114,'multiline':False]['text':' possible starting environment variable, so that we can accept','line_number':115,'multiline':False]['text':' standard path variables like %USERPROFILE% or ${BAZEL}. For','line_number':116,'multiline':False]['text':' simplicity, we implement only those two forms, not $BAZEL.','line_number':117,'multiline':False]['text':'','line_number':118,'multiline':False]['text':'   MakeAbsolute("foo") in wd "/bar" --> "/bar/foo"','line_number':119,'multiline':False]['text':'   MakeAbsoluteAndResolveEnvvars("%USERPROFILE%/foo") -->','line_number':120,'multiline':False]['text':'       "C:\Users\bazel-user\foo"','line_number':121,'multiline':False]['text':'   MakeAbsoluteAndResolveEnvvars("${BAZEL}/foo") --> "/opt/bazel/foo"','line_number':122,'multiline':False]['text':' TODO(bazel-team) consider changing the path(_platform) header split to be a','line_number':125,'multiline':False]['text':' path.h and path_windows.h split, which would make it clearer what functions','line_number':126,'multiline':False]['text':' are included by an import statement. The downside to this gain in clarity','line_number':127,'multiline':False]['text':' is that this would add more complexity to the implementation file(s)? of','line_number':128,'multiline':False]['text':' path.h, which would have to have the platform-specific implementations.','line_number':129,'multiline':False]['text':' Converts 'path' to Windows style.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' 'path' is absolute or relative or current-drive-relative (e.g.','line_number':145,'multiline':False]['text':' "\foo"), possibly non-normalized, possibly using slash as separator. If it','line_number':146,'multiline':False]['text':' starts with the UNC prefix, the function won't process it further, just','line_number':147,'multiline':False]['text':' copies it to 'result'.','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':' 'result' equals 'path' if 'path' started with the UNC prefix, otherwise','line_number':150,'multiline':False]['text':' 'result' is normalized, using backslash as separator.','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' Encoding: there is no assumption about encoding, 'path' is read as ASCII','line_number':153,'multiline':False]['text':' (Latin-1) and 'result' uses the same encoding.','line_number':154,'multiline':False]['text':' Converts 'path' to Windows style.','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':' Same as the other AsWindowsPath methods, but 'path' is encoded as multibyte','line_number':160,'multiline':False]['text':' and 'result' is widechar. (MSDN does not clarify what multibyte means. The','line_number':161,'multiline':False]['text':' function uses blaze_util::WstringToCstring.)','line_number':162,'multiline':False]['text':' Converts 'path' to Windows style.','line_number':166,'multiline':False]['text':'','line_number':167,'multiline':False]['text':' Same as the other AsWindowsPath methods, but 'path' and 'result' are','line_number':168,'multiline':False]['text':' widechar.','line_number':169,'multiline':False]['text':' Converts 'path' to absolute, Windows-style path.','line_number':173,'multiline':False]['text':'','line_number':174,'multiline':False]['text':' Same as AsWindowsPath, but 'result' is always absolute and always has a UNC','line_number':175,'multiline':False]['text':' prefix.','line_number':176,'multiline':False]['text':' Converts 'path' to absolute, Windows-style path.','line_number':180,'multiline':False]['text':'','line_number':181,'multiline':False]['text':' Same as AsWindowsPath, but 'result' is always absolute and always has a UNC','line_number':182,'multiline':False]['text':' prefix.','line_number':183,'multiline':False]['text':' Converts 'path' to absolute, shortened, Windows-style path.','line_number':187,'multiline':False]['text':'','line_number':188,'multiline':False]['text':' Same as `AsWindowsPath`, but 'result' is always absolute, lowercase,','line_number':189,'multiline':False]['text':' 8dot3-style shortened path, without trailing backslash and without UNC','line_number':190,'multiline':False]['text':' prefix.','line_number':191,'multiline':False]['text':'','line_number':192,'multiline':False]['text':' Works even for non-existent paths (and non-existent drives), shortening the','line_number':193,'multiline':False]['text':' existing segments and leaving the rest unshortened.','line_number':194,'multiline':False]['text':' defined(_WIN32) || defined(__CYGWIN__)','line_number':204,'multiline':False]['text':' namespace blaze_util','line_number':205,'multiline':False]['text':' BAZEL_SRC_MAIN_CPP_UTIL_PATH_PLATFORM_H_','line_number':207,'multiline':False]