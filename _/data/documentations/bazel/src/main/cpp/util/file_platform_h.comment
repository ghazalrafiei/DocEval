['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Class to query/manipulate the last modification time (mtime) of files.','line_number':32,'multiline':False]['text':' Checks if `path` is a file/directory in the embedded tools directory that','line_number':37,'multiline':False]['text':' was not tampered with.','line_number':38,'multiline':False]['text':' Returns true if `path` is a directory or directory symlink, or if `path` is','line_number':39,'multiline':False]['text':' a file with an mtime in the distant future.','line_number':40,'multiline':False]['text':' Returns false otherwise, or if querying the information failed.','line_number':41,'multiline':False]['text':' TODO(laszlocsomor): move this function, and with it the whole IFileMtime','line_number':42,'multiline':False]['text':' class into blaze_util_<platform>.cc, because it is Bazel-specific logic,','line_number':43,'multiline':False]['text':' not generic file-handling logic.','line_number':44,'multiline':False]['text':' Sets the mtime of file under `path` to the current time.','line_number':47,'multiline':False]['text':' Returns true if the mtime was changed successfully.','line_number':48,'multiline':False]['text':' Sets the mtime of file under `path` to the distant future.','line_number':51,'multiline':False]['text':' "Distant future" should be on the order of some years into the future, like','line_number':52,'multiline':False]['text':' a decade.','line_number':53,'multiline':False]['text':' Returns true if the mtime was changed successfully.','line_number':54,'multiline':False]['text':' Creates a platform-specific implementation of `IFileMtime`.','line_number':58,'multiline':False]['text':' We cannot include <windows.h> because it #defines many symbols that conflict','line_number':62,'multiline':False]['text':' with our function names, e.g. GetUserName, SendMessage.','line_number':63,'multiline':False]['text':' Instead of typedef'ing HANDLE, let's use the actual type, void*. If that ever','line_number':64,'multiline':False]['text':' changes in the future and HANDLE would no longer be compatible with void*','line_number':65,'multiline':False]['text':' (very unlikely, given how fundamental this type is in Windows), then we'd get','line_number':66,'multiline':False]['text':' a compilation error.','line_number':67,'multiline':False]['text':' HANDLE ','line_number':68,'multiline':True]['text':' !(defined(_WIN32) || defined(__CYGWIN__))','line_number':69,'multiline':False]['text':' defined(_WIN32) || defined(__CYGWIN__)','line_number':71,'multiline':False]['text':' Result of a `ReadFromHandle` operation.','line_number':73,'multiline':False]['text':'','line_number':74,'multiline':False]['text':' This is a platform-independent abstraction of `errno`. If you need to handle','line_number':75,'multiline':False]['text':' an errno value, add an entry here and update the platform-specific','line_number':76,'multiline':False]['text':' `ReadFromHandle` implementations accordingly.','line_number':77,'multiline':False]['text':' Replaces 'content' with contents of file 'filename'.','line_number':90,'multiline':False]['text':' If `max_size` is positive, the method reads at most that many bytes;','line_number':91,'multiline':False]['text':' otherwise the method reads the whole file.','line_number':92,'multiline':False]['text':' If fails to read content from the file, `error_message` can provide extra','line_number':93,'multiline':False]['text':' information about the failure.','line_number':94,'multiline':False]['text':' Returns false on error. Can be called from a signal handler.','line_number':95,'multiline':False]['text':' Reads up to `size` bytes from the file `filename` into `data`.','line_number':102,'multiline':False]['text':' There must be enough memory allocated at `data`.','line_number':103,'multiline':False]['text':' Returns true on success, false on error.','line_number':104,'multiline':False]['text':' Writes `size` bytes from `data` into file `filename` and chmods it to `perm`.','line_number':108,'multiline':False]['text':' Returns false on failure, sets errno.','line_number':109,'multiline':False]['text':' Result of a `WriteToStdOutErr` operation.','line_number':116,'multiline':False]['text':'','line_number':117,'multiline':False]['text':' This is a platform-independent abstraction of `errno`. If you need to handle','line_number':118,'multiline':False]['text':' an errno value, add an entry here and update the platform-specific','line_number':119,'multiline':False]['text':' `WriteToStdOutErr` implementations accordingly.','line_number':120,'multiline':False]['text':' some uncategorized error occurred','line_number':124,'multiline':False]['text':' EPIPE (reading end of the pipe is closed)','line_number':125,'multiline':False]['text':' Writes `size` bytes from `data` into stdout/stderr.','line_number':129,'multiline':False]['text':' Writes to stdout if `to_stdout` is true, writes to stderr otherwise.','line_number':130,'multiline':False]['text':' Returns one of `WriteResult::Errors`.','line_number':131,'multiline':False]['text':'','line_number':132,'multiline':False]['text':' This is a platform-independent abstraction of `fwrite` with `errno` checking','line_number':133,'multiline':False]['text':' and awareness of pipes (i.e. in case stderr/stdout is connected to a pipe).','line_number':134,'multiline':False]['text':' Renames the directory at `old_name` to `new_name`.','line_number':143,'multiline':False]['text':' Returns one of the RenameDirectoryResult enum values.','line_number':144,'multiline':False]['text':' Reads which directory a symlink points to. Puts the target of the symlink','line_number':147,'multiline':False]['text':' in ``result`` and returns if the operation was successful. Will not work on','line_number':148,'multiline':False]['text':' symlinks that don't point to directories on Windows.','line_number':149,'multiline':False]['text':' Unlinks the file given by 'file_path'.','line_number':152,'multiline':False]['text':' Returns true on success. In case of failure sets errno.','line_number':153,'multiline':False]['text':' Returns true if this path exists, following symlinks.','line_number':157,'multiline':False]['text':' Returns the real, absolute path corresponding to `path`.','line_number':161,'multiline':False]['text':' The method resolves all symlink components of `path`.','line_number':162,'multiline':False]['text':' Returns the empty string upon error.','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' This is a wrapper around realpath(3).','line_number':165,'multiline':False]['text':' Returns true if `path` exists, is a file or symlink to one, and is readable.','line_number':168,'multiline':False]['text':' Follows symlinks.','line_number':169,'multiline':False]['text':' Returns true if `path` exists, is a file or symlink to one, and is writable.','line_number':173,'multiline':False]['text':' Follows symlinks.','line_number':174,'multiline':False]['text':' Returns true if `path` exists, is a directory or symlink/junction to one, and','line_number':178,'multiline':False]['text':' is both readable and writable.','line_number':179,'multiline':False]['text':' Follows symlinks/junctions.','line_number':180,'multiline':False]['text':' Returns true if `path` refers to a directory or a symlink/junction to one.','line_number':184,'multiline':False]['text':' Calls fsync() on the file (or directory) specified in 'file_path'.','line_number':188,'multiline':False]['text':' pdie() if syncing fails.','line_number':189,'multiline':False]['text':' mkdir -p path. All newly created directories use the given mode.','line_number':193,'multiline':False]['text':' `mode` should be an octal permission mask, e.g. 0755.','line_number':194,'multiline':False]['text':' Returns false on failure, sets errno.','line_number':195,'multiline':False]['text':' Creates a directory starting with prefix for temporary usage. The directory','line_number':199,'multiline':False]['text':' name is guaranteed to be at least unique to this process.','line_number':200,'multiline':False]['text':' Removes the specified path or directory, and in the latter case, all of its','line_number':203,'multiline':False]['text':' contents. Returns true iff the path doesn't exists when the method completes','line_number':204,'multiline':False]['text':' (including if the path didn't exist to begin with). Does not follow symlinks.','line_number':205,'multiline':False]['text':' Returns the current working directory.','line_number':208,'multiline':False]['text':' The path is platform-specific (e.g. Windows path of Windows) and absolute.','line_number':209,'multiline':False]['text':' Changes the current working directory to `path`, returns true upon success.','line_number':212,'multiline':False]['text':' Interface to be implemented by ForEachDirectoryEntry clients.','line_number':215,'multiline':False]['text':' This method is called for each entry in a directory.','line_number':220,'multiline':False]['text':' `name` is the full path of the entry.','line_number':221,'multiline':False]['text':' `is_directory` is true if this entry is a directory (but false if this is a','line_number':222,'multiline':False]['text':' symlink pointing to a directory).','line_number':223,'multiline':False]['text':' Executes a function for each entry in a directory (except "." and "..").','line_number':227,'multiline':False]['text':'','line_number':228,'multiline':False]['text':' Returns true if the `path` referred to a directory or directory symlink,','line_number':229,'multiline':False]['text':' false otherwise.','line_number':230,'multiline':False]['text':'','line_number':231,'multiline':False]['text':' See DirectoryEntryConsumer for more details.','line_number':232,'multiline':False]['text':' Check if `path` is a directory.','line_number':240,'multiline':False]['text':' Interface to be implemented by ForEachDirectoryEntryW clients.','line_number':243,'multiline':False]['text':' This method is called for each entry in a directory.','line_number':248,'multiline':False]['text':' `name` is the full path of the entry.','line_number':249,'multiline':False]['text':' `is_directory` is true if this entry is a directory (but false if this is a','line_number':250,'multiline':False]['text':' symlink pointing to a directory).','line_number':251,'multiline':False]['text':' Lists all files in `path` and all of its subdirectories.','line_number':255,'multiline':False]['text':'','line_number':256,'multiline':False]['text':' Does not follow symlinks / junctions.','line_number':257,'multiline':False]['text':'','line_number':258,'multiline':False]['text':' Populates `result` with the full paths of the files. Every entry will have','line_number':259,'multiline':False]['text':' `path` as its prefix. If `path` is a file, `result` contains just this','line_number':260,'multiline':False]['text':' file.','line_number':261,'multiline':False]['text':' Visible for testing only.','line_number':265,'multiline':False]['text':' Visible for testing only.','line_number':269,'multiline':False]['text':' defined(_WIN32) || defined(__CYGWIN__)','line_number':273,'multiline':False]['text':' namespace blaze_util','line_number':275,'multiline':False]['text':' BAZEL_SRC_MAIN_CPP_UTIL_FILE_PLATFORM_H_','line_number':277,'multiline':False]