['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * This is PID 1 inside the sandbox environment and runs in a separate user,
 * mount, UTS, IPC and PID namespace.
 ','line_number':15,'multiline':True]['text':' Some systems do not define MS_REC in sys/mount.h. We might be able to grab it','line_number':49,'multiline':False]['text':' from linux/fs.h instead (cf. #2667).','line_number':50,'multiline':False]['text':' Some C standard libraries like musl do not define this macro, so we'll','line_number':55,'multiline':False]['text':' include our own version for compatibility.','line_number':56,'multiline':False]['text':' TEMP_FAILURE_RETRY','line_number':65,'multiline':False]['text':' Helper methods','line_number':94,'multiline':False]['text':' Creates an empty file at 'path' by hard linking it from a known empty file.','line_number':105,'multiline':False]['text':' This is over two times faster than creating empty files via open() on','line_number':106,'multiline':False]['text':' certain filesystems (e.g. XFS).','line_number':107,'multiline':False]['text':' Recursively creates the file or directory specified in "path" and its parent','line_number':114,'multiline':False]['text':' directories.','line_number':115,'multiline':False]['text':' Return -1 on failure and sets errno to:','line_number':116,'multiline':False]['text':'    EINVAL   path is null','line_number':117,'multiline':False]['text':'    ENOTDIR  path exists and is not a directory','line_number':118,'multiline':False]['text':'    EEXIST   path exists and is a directory','line_number':119,'multiline':False]['text':'    ENOENT   stat call with the path failed','line_number':120,'multiline':False]['text':' If the path already exists...','line_number':128,'multiline':False]['text':' and it's a directory and supposed to be a directory, we're done here.','line_number':132,'multiline':False]['text':' and it's a regular file and supposed to be one, we're done here.','line_number':135,'multiline':False]['text':' otherwise something is really wrong.','line_number':138,'multiline':False]['text':' If stat failed because of any error other than "the path does not exist",','line_number':143,'multiline':False]['text':' this is an error.','line_number':144,'multiline':False]['text':' Create the parent directory.','line_number':150,'multiline':False]['text':' We could also poll() on the pipe fd to find out when the parent goes away,','line_number':176,'multiline':False]['text':' and rely on SIGCHLD interrupting that otherwise. That might require us to','line_number':177,'multiline':False]['text':' install some trivial handler for SIGCHLD. Using O_ASYNC to turn the pipe','line_number':178,'multiline':False]['text':' close into SIGIO may also work. Another option is signalfd, although that's','line_number':179,'multiline':False]['text':' almost as obscure as this prctl.','line_number':180,'multiline':False]['text':' Switch to a new process group, otherwise our process group will still refer','line_number':185,'multiline':False]['text':' to the outer PID namespace. We might then accidentally kill our parent by a','line_number':186,'multiline':False]['text':' call to e.g. `kill(0, sig)`.','line_number':187,'multiline':False]['text':' Verify that the parent still lives.','line_number':192,'multiline':False]['text':' Fully isolate our mount namespace private from outside events, so that','line_number':206,'multiline':False]['text':' mounts in the outside environment do not affect our sandbox.','line_number':207,'multiline':False]['text':' Disable needs for CAP_SETGID.','line_number':214,'multiline':False]['text':' Ignore ENOENT, because older Linux versions do not have this file (but','line_number':219,'multiline':False]['text':' also do not require writing to it).','line_number':220,'multiline':False]['text':' Change our username to 'root'.','line_number':229,'multiline':False]['text':' Change our username to 'nobody'.','line_number':233,'multiline':False]['text':' Do not change the username inside the sandbox.','line_number':242,'multiline':False]['text':' Change the group to "tty" regardless of what was previously set','line_number':247,'multiline':False]['text':' An attempt to mount the sandbox in tmpfs will always fail, so this block is','line_number':283,'multiline':False]['text':' slightly redundant with the next mount() check, but dumping the mount()','line_number':284,'multiline':False]['text':' syscall is incredibly cryptic, so we explicitly check against and warn','line_number':285,'multiline':False]['text':' about attempts to use tmpfs.','line_number':286,'multiline':False]['text':' Bind mount sources contained in writable_files will be kept writable in','line_number':313,'multiline':False]['text':' MakeFileSystemMostlyReadOnly, but have already been mounted at this','line_number':314,'multiline':False]['text':' point.','line_number':315,'multiline':False]['text':' Make sure that the working directory is writable (unlike most of the rest','line_number':325,'multiline':False]['text':' of the file system, which is read-only by default). The easiest way to do','line_number':326,'multiline':False]['text':' this is by bind-mounting it upon itself.','line_number':327,'multiline':False]['text':' We later remount everything read-only, except the paths for which this method','line_number':337,'multiline':False]['text':' returns true.','line_number':338,'multiline':False]['text':' Makes the whole filesystem read-only, except for the paths for which','line_number':367,'multiline':False]['text':' ShouldBeWritable returns true.','line_number':368,'multiline':False]['text':' MS_REMOUNT does not allow us to change certain flags. This means, we have','line_number':379,'multiline':False]['text':' to first read them out and then pass them in back again. There seems to','line_number':380,'multiline':False]['text':' be no better way than this (an API for just getting the mount flags of a','line_number':381,'multiline':False]['text':' mount entry as a bitmask would be great).','line_number':382,'multiline':False]['text':' If we get EACCES or EPERM, this might be a mount-point for which we','line_number':409,'multiline':False]['text':' don't have read access. Not much we can do about this, but it also','line_number':410,'multiline':False]['text':' won't do any harm, so let's go on. The same goes for EINVAL or ENOENT,','line_number':411,'multiline':False]['text':' which are fired in case a later mount overlaps an earlier mount, e.g.','line_number':412,'multiline':False]['text':' consider the case of /proc, /proc/sys/fs/binfmt_misc and /proc, with','line_number':413,'multiline':False]['text':' the latter /proc being the one that an outer sandbox has mounted on','line_number':414,'multiline':False]['text':' top of its parent /proc. In that case, we're not allowed to remount','line_number':415,'multiline':False]['text':' /proc/sys/fs/binfmt_misc, because it is hidden. If we get ESTALE, the','line_number':416,'multiline':False]['text':' mount is a broken NFS mount. In the ideal case, the user would either','line_number':417,'multiline':False]['text':' fix or remove that mount, but in cases where that's not possible, we','line_number':418,'multiline':False]['text':' should just ignore it. Similarly, one can get ENODEV in case of','line_number':419,'multiline':False]['text':' autofs/automount failure.','line_number':420,'multiline':False]['text':' Mount a new proc on top of the old one, because the old one still refers to','line_number':443,'multiline':False]['text':' our parent PID namespace.','line_number':444,'multiline':False]['text':' When running in a separate network namespace, enable the loopback interface','line_number':452,'multiline':False]['text':' because some application may want to use it.','line_number':453,'multiline':False]['text':' Verify that name is valid.','line_number':464,'multiline':False]['text':' Enable the interface.','line_number':469,'multiline':False]['text':' Put the child into its own process group.','line_number':503,'multiline':False]['text':' Try to assign our terminal to the child process.','line_number':508,'multiline':False]['text':' Unblock all signals, restore default handlers.','line_number':513,'multiline':False]['text':' Close the file PRINT_DEBUG writes to.','line_number':516,'multiline':False]['text':' Must happen late enough so we don't lose any debugging output.','line_number':517,'multiline':False]['text':' Force umask to include read and execute for everyone, to make output','line_number':523,'multiline':False]['text':' permissions predictable.','line_number':524,'multiline':False]['text':' argv[] passed to execve() must be a null-terminated array.','line_number':527,'multiline':False]['text':' Wait for some process to exit. This includes reparented processes in our','line_number':540,'multiline':False]['text':' PID namespace.','line_number':541,'multiline':False]['text':' We don't expect any errors besides EINTR. In particular, ECHILD should','line_number':546,'multiline':False]['text':' be impossible because we haven't yet seen global_child_pid exit.','line_number':547,'multiline':False]['text':' If this isn't our child's PID, there's nothing further to do; we've','line_number':553,'multiline':False]['text':' successfully reaped a zombie.','line_number':554,'multiline':False]['text':' If the child exited due to a signal, log that fact and exit with the same','line_number':559,'multiline':False]['text':' status.','line_number':560,'multiline':False]['text':' Otherwise it must have exited normally.','line_number':567,'multiline':False]['text':' This is used as the base for bind mounting.','line_number':592,'multiline':False]['text':' Make sure that the working directory is writable (unlike most of the rest','line_number':626,'multiline':False]['text':' of the file system, which is read-only by default). The easiest way to do','line_number':627,'multiline':False]['text':' this is by bind-mounting it upon itself.','line_number':628,'multiline':False]['text':' The file is mounted to the same path inside the sandbox, as outside','line_number':639,'multiline':False]['text':' (e.g. /home/user -> <sandbox>/home/user), so we'll just show a','line_number':640,'multiline':False]['text':' simplified version of the mount command.','line_number':641,'multiline':False]['text':' The file is mounted to a custom location inside the sandbox.','line_number':644,'multiline':False]['text':' Create a user-friendly string for the sandboxed path and show it.','line_number':645,'multiline':False]['text':' move the real root to old_root, then detach it','line_number':681,'multiline':False]['text':' pivot_root has no wrapper in libc, so we need syscall()','line_number':687,'multiline':False]['text':' Start with default signal handlers and an empty signal mask.','line_number':709,'multiline':False]['text':' Sandbox ourselves.','line_number':714,'multiline':False]['text':' Ignore terminal signals; we hand off the terminal to the child in','line_number':737,'multiline':False]['text':' SpawnChild below.','line_number':738,'multiline':False]['text':' Fork the child process.','line_number':742,'multiline':False]['text':' Forward requests to shut down gracefully to the child.','line_number':745,'multiline':False]['text':' Note that there's no need to kill any remaining descendant processes; they','line_number':748,'multiline':False]['text':' are in our PID namespace and the kernel will send them SIGKILL','line_number':749,'multiline':False]['text':' automatically once we exit.','line_number':750,'multiline':False]