['text':' Copyright 2016 The Bazel Authors. All Rights Reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'*
 * Utility class for dealing with escaping XML content and attributes.
 ','line_number':22,'multiline':True]['text':'*
   * A builder for CharEscaper.
   ','line_number':65,'multiline':True]['text':' The constructor is exposed via the builder() method above.','line_number':77,'multiline':False]['text':'*
     * Sets the safe range of characters for the escaper. Characters in this range that have no
     * explicit replacement are considered 'safe' and remain unescaped in the output. If {@code
     * safeMax < safeMin} then the safe range is empty.
     *
     * @return the builder instance
     ','line_number':80,'multiline':True]['text':'*
     * Sets the replacement string for any characters outside the 'safe' range that have no explicit
     * replacement. If {@code unsafeReplacement} is {@code null} then no replacement will occur, if
     * it is {@code ""} then the unsafe characters are removed from the output.
     *
     * @return the builder instance
     ','line_number':94,'multiline':True]['text':'*
     * Adds a replacement string for the given input character. The specified character will be
     * replaced by the given string whenever it occurs in the input, irrespective of whether it lies
     * inside or outside the 'safe' range.
     *
     * @return the builder instance
     * @throws NullPointerException if {@code replacement} is null
     ','line_number':107,'multiline':True]['text':' This can replace an existing character (the builder is re-usable).','line_number':120,'multiline':False]['text':'*
     * Returns a new CharEscaper based on the current state of the builder.
     ','line_number':125,'multiline':True]