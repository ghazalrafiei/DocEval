['text':' Copyright 2017 The Abseil Authors.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'      http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Add flagvalues module to disclaimed module ids.','line_number':33,'multiline':False]['text':' A note on collections.abc.Mapping:','line_number':77,'multiline':False]['text':' FlagValues defines __getitem__, __iter__, and __len__. It makes perfect','line_number':78,'multiline':False]['text':' sense to let it be a collections.abc.Mapping class. However, we are not','line_number':79,'multiline':False]['text':' able to do so. The mixin methods, e.g. keys, values, are not uncommon flag','line_number':80,'multiline':False]['text':' names. Those flag values would not be accessible via the FLAGS.xxx form.','line_number':81,'multiline':False]['text':' Since everything in this class is so heavily overloaded, the only','line_number':84,'multiline':False]['text':' way of defining and using fields is to access __dict__ directly.','line_number':85,'multiline':False]['text':' Dictionary: flag name (string) -> Flag object.','line_number':87,'multiline':False]['text':' Set: name of hidden flag (string).','line_number':90,'multiline':False]['text':' Holds flags that should not be directly accessible from Python.','line_number':91,'multiline':False]['text':' Dictionary: module name (string) -> list of Flag objects that are defined','line_number':94,'multiline':False]['text':' by that module.','line_number':95,'multiline':False]['text':' Dictionary: module id (int) -> list of Flag objects that are defined by','line_number':97,'multiline':False]['text':' that module.','line_number':98,'multiline':False]['text':' Dictionary: module name (string) -> list of Flag objects that are','line_number':100,'multiline':False]['text':' key for that module.','line_number':101,'multiline':False]['text':' Bool: True if flags were parsed.','line_number':104,'multiline':False]['text':' Bool: True if unparse_flags() was called.','line_number':107,'multiline':False]['text':' None or Method(name, value) to call from __setattr__ for an unknown flag.','line_number':110,'multiline':False]['text':' A set of banned flag names. This is to prevent users from accidentally','line_number':113,'multiline':False]['text':' defining a flag that has the same name as a method on this class.','line_number':114,'multiline':False]['text':' Users can still allow defining the flag by passing','line_number':115,'multiline':False]['text':' allow_using_method_names=True in DEFINE_xxx functions.','line_number':116,'multiline':False]['text':' Bool: Whether to use GNU style scanning.','line_number':119,'multiline':False]['text':' Bool: Whether use_gnu_getopt has been explicitly set by the user.','line_number':122,'multiline':False]['text':' Function: Takes a flag name as parameter, returns a tuple','line_number':125,'multiline':False]['text':' (is_retired, type_is_bool).','line_number':126,'multiline':False]['text':' The list of key flags for the module named module_name.','line_number':205,'multiline':False]['text':' Add flag, but avoid duplicates.','line_number':207,'multiline':False]['text':' Check whether flag_obj is registered under its long name.','line_number':221,'multiline':False]['text':' Check whether flag_obj is registered under its short name.','line_number':225,'multiline':False]['text':' While (as opposed to if) takes care of multiple occurrences of a','line_number':246,'multiline':False]['text':' flag in the list for the same module.','line_number':247,'multiline':False]['text':' Any flag is a key flag for the module that defined it.  NOTE:','line_number':285,'multiline':False]['text':' key_flags is a fresh list: we can update it without affecting the','line_number':286,'multiline':False]['text':' internals of this FlagValues object.','line_number':287,'multiline':False]['text':' Take into account flags explicitly declared as key for a module.','line_number':290,'multiline':False]['text':' It must compare the flag with the one in _flags. This is because a','line_number':313,'multiline':False]['text':' flag might be overridden only for its long name (or short name),','line_number':314,'multiline':False]['text':' and only its short name (or long name) is considered registered.','line_number':315,'multiline':False]['text':' It must compare the flag with the one in _flags. This is because a','line_number':338,'multiline':False]['text':' flag might be overridden only for its long name (or short name),','line_number':339,'multiline':False]['text':' and only its short name (or long name) is considered registered.','line_number':340,'multiline':False]['text':' Flag value is not valid.','line_number':374,'multiline':False]['text':' Flag name is not valid.','line_number':377,'multiline':False]['text':' pylint: disable=protected-access','line_number':387,'multiline':False]['text':' Each flags with short_name appears here twice (once under its','line_number':388,'multiline':False]['text':' normal name, and again with its short name).  To prevent','line_number':389,'multiline':False]['text':' problems (DuplicateFlagError) with double flag registration, we','line_number':390,'multiline':False]['text':' perform a check to make sure that the entry we're looking at is','line_number':391,'multiline':False]['text':' for its normal name.','line_number':392,'multiline':False]['text':' If the flag has already been defined by a module with the same name,','line_number':426,'multiline':False]['text':' but a different ID, we can stop here because it indicates that the','line_number':427,'multiline':False]['text':' module is simply being imported a subsequent time.','line_number':428,'multiline':False]['text':' If a new flag overrides an old one, we need to cleanup the old flag's','line_number':432,'multiline':False]['text':' modules if it's not registered.','line_number':433,'multiline':False]['text':' new flag','line_number':442,'multiline':False]['text':' pylint: disable=protected-access','line_number':600,'multiline':False]['text':' This pre parses the argv list for --flagfile=<> options.','line_number':639,'multiline':False]['text':' Parse the arguments.','line_number':643,'multiline':False]['text':' Handle unknown flags by raising UnrecognizedFlagError.','line_number':646,'multiline':False]['text':' Note some users depend on us raising this particular error.','line_number':647,'multiline':False]['text':' A list of (flag name or None, arg).','line_number':702,'multiline':False]['text':' pylint: disable=cell-var-from-loop','line_number':712,'multiline':False]['text':' pylint: disable=undefined-loop-variable','line_number':716,'multiline':False]['text':' A non-argument: default is break, GNU is skip.','line_number':719,'multiline':False]['text':' At this point, arg must start with '-'.','line_number':731,'multiline':False]['text':' The argument is all dashes (including one dash).','line_number':743,'multiline':False]['text':' --undefok is a special case.','line_number':750,'multiline':False]['text':' Boolean flags can take the form of --noflag, with no value.','line_number':764,'multiline':False]['text':' If we didn't recognize that flag, but it starts with','line_number':775,'multiline':False]['text':' "no" then maybe it was a boolean flag specified in the','line_number':776,'multiline':False]['text':' --nofoo form.','line_number':777,'multiline':False]['text':' This happens when a non-bool retired flag is specified','line_number':784,'multiline':False]['text':' in format of "--flag value".','line_number':785,'multiline':False]['text':' Positional arguments.','line_number':802,'multiline':False]['text':' Remove undefok flags.','line_number':805,'multiline':False]['text':' This is an unknown flag.','line_number':808,'multiline':False]['text':' We log this message before marking flags as unparsed to avoid a','line_number':834,'multiline':False]['text':' problem when the logging library causes flags access.','line_number':835,'multiline':False]['text':' Print the help for the main module first, if possible.','line_number':862,'multiline':False]['text':' Just print one long list of flags.','line_number':870,'multiline':False]['text':' pylint: disable=protected-access','line_number':874,'multiline':False]['text':' pylint: disable=protected-access','line_number':895,'multiline':False]['text':' pylint: disable=protected-access','line_number':949,'multiline':False]['text':' It's possible this flag got deleted or overridden since being','line_number':954,'multiline':False]['text':' registered in the per-module flaglist.  Check now against the','line_number':955,'multiline':False]['text':' canonical source of current flag information, the _flags.','line_number':956,'multiline':False]['text':' a different flag is using this name now','line_number':958,'multiline':False]['text':' only print help once','line_number':960,'multiline':False]['text':' pylint: disable=invalid-name','line_number':986,'multiline':False]['text':' Can't do if not value, b/c value might be '0' or ""','line_number':998,'multiline':False]['text':' For consistency with the cpp version, ignore empty values.','line_number':1060,'multiline':False]['text':' We do a little safety check for reparsing a file we've already encountered','line_number':1065,'multiline':False]['text':' at a previous depth.','line_number':1066,'multiline':False]['text':' All line from flagfile.','line_number':1074,'multiline':False]['text':' Subset of lines w/o comments, blanks, flagfile= tags.','line_number':1075,'multiline':False]['text':' This is where we check each line in the file we just read.','line_number':1085,'multiline':False]['text':' Checks for comment (a line that starts with '#').','line_number':1089,'multiline':False]['text':' Checks for a nested "--flagfile=<bar>" flag in the current file.','line_number':1092,'multiline':False]['text':' If we find one, recursively parse down into that file.','line_number':1093,'multiline':False]['text':' Any line that's not a comment or a nested flagfile should get','line_number':1100,'multiline':False]['text':' copied into 2nd position.  This leaves earlier arguments','line_number':1101,'multiline':False]['text':' further back in the list, thus giving them higher priority.','line_number':1102,'multiline':False]['text':' This handles the case of -(-)flagfile foo.  In this case the','line_number':1153,'multiline':False]['text':' next arg really is part of this one.','line_number':1154,'multiline':False]['text':' This handles the case of (-)-flagfile=foo.','line_number':1162,'multiline':False]['text':' Stop parsing after '--', like getopt and gnu_getopt.','line_number':1167,'multiline':False]['text':' Stop parsing after a non-flag, like getopt.','line_number':1170,'multiline':False]['text':' If this is an occurrence of a legitimate --x y, skip the value','line_number':1177,'multiline':False]['text':' so that it won't be mistaken for a standalone arg.','line_number':1178,'multiline':False]['text':' Get list of key flags for the main module.','line_number':1256,'multiline':False]['text':' Sort flags by declaring module name and next by flag name.','line_number':1259,'multiline':False]['text':' pylint: disable=protected-access','line_number':1269,'multiline':False]['text':' We take the entire flag object, but only keep the name. Why?','line_number':1333,'multiline':False]['text':' - We want FlagHolder[T] to be generic container','line_number':1334,'multiline':False]['text':' - flag_values contains all flags, so has no reference to T.','line_number':1335,'multiline':False]['text':' - typecheckers don't like to see a generic class where none of the ctor','line_number':1336,'multiline':False]['text':'   arguments refer to the generic type.','line_number':1337,'multiline':False]['text':' We intentionally do NOT check if the default value is None.','line_number':1339,'multiline':False]['text':' This allows future use of this for "required flags with None default"','line_number':1340,'multiline':False]['text':' pylint: disable=protected-access','line_number':1392,'multiline':False]['text':' pylint: disable=protected-access','line_number':1406,'multiline':False]