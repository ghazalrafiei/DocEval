['text':' Copyright 2017 The Abseil Authors.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'      http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' pylint: disable=unused-import Allow absltest.mock.','line_number':43,'multiline':False]['text':' The faulthandler module isn't always available, and pytype doesn't','line_number':47,'multiline':False]['text':' understand that we're catching ImportError, so suppress the error.','line_number':48,'multiline':False]['text':' pytype: disable=import-error','line_number':49,'multiline':False]['text':' pytype: enable=import-error','line_number':51,'multiline':False]['text':' We use faulthandler if it is available.','line_number':53,'multiline':False]['text':' Make typing an optional import to avoid it being a required dependency','line_number':62,'multiline':False]['text':' in Python 2. Type checkers will still understand the imports.','line_number':63,'multiline':False]['text':' pylint: disable=unused-import','line_number':65,'multiline':False]['text':' pylint: enable=unused-import','line_number':68,'multiline':False]['text':' Use an if-type-checking block to prevent leakage of type-checking only','line_number':72,'multiline':False]['text':' symbols. We don't want people relying on these at runtime.','line_number':73,'multiline':False]['text':' Unbounded TypeVar for general usage','line_number':75,'multiline':False]['text':' pytype: disable=module-attr','line_number':79,'multiline':False]['text':' Re-export a bunch of unittest functions we support so that people don't','line_number':83,'multiline':False]['text':' have to import unittest to get them','line_number':84,'multiline':False]['text':' pylint: disable=invalid-name','line_number':85,'multiline':False]['text':' pylint: enable=invalid-name','line_number':91,'multiline':False]['text':' End unittest re-exports','line_number':93,'multiline':False]['text':' Suppress surplus entries in AssertionError stack traces.','line_number':99,'multiline':False]['text':' pylint: disable=invalid-name','line_number':100,'multiline':False]['text':' pylint: disable=invalid-name','line_number':103,'multiline':False]['text':' Unused','line_number':118,'multiline':False]['text':' Always cleanup temp files when the test completes.','line_number':126,'multiline':False]['text':' Only cleanup temp file if the test passes. This allows easier inspection','line_number':128,'multiline':False]['text':' of tempfile contents on test failure. absltest.TEST_TMPDIR.value determines','line_number':129,'multiline':False]['text':' where tempfiles are created.','line_number':130,'multiline':False]['text':' Never cleanup temp files.','line_number':132,'multiline':False]['text':' Many of the methods in this module have names like assertSameElements.','line_number':136,'multiline':False]['text':' This kind of name does not comply with PEP8 style,','line_number':137,'multiline':False]['text':' but it is consistent with the naming of methods in unittest.py.','line_number':138,'multiline':False]['text':' pylint: disable=invalid-name','line_number':139,'multiline':False]['text':' type: () -> int','line_number':143,'multiline':False]['text':' type: () -> Text','line_number':154,'multiline':False]['text':' type: () -> Text','line_number':160,'multiline':False]['text':' type: () -> int','line_number':170,'multiline':False]['text':' We might need to monkey-patch TestResult so that it stops considering an','line_number':249,'multiline':False]['text':' unexpected pass as a as a "successful result".  For details, see','line_number':250,'multiline':False]['text':' http://bugs.python.org/issue20165','line_number':251,'multiline':False]['text':' type: () -> None','line_number':253,'multiline':False]['text':' type: () -> bool','line_number':257,'multiline':False]['text':' The bug is present.','line_number':273,'multiline':False]['text':' Warn the user if our hot-fix failed.','line_number':275,'multiline':False]['text':' type: (Text, Text, Callable[..., IO]) -> IO','line_number':284,'multiline':False]['text':' type: (Text) -> None','line_number':312,'multiline':False]['text':' type: () -> Text','line_number':318,'multiline':False]['text':' type: () -> Text','line_number':327,'multiline':False]['text':' type: (Optional[Text], Optional[AnyStr], Text, Text, Text) -> _TempFile','line_number':333,'multiline':False]['text':' type: (Optional[Text]) -> _TempDir','line_number':361,'multiline':False]['text':' Note: there's no need to clear the directory since the containing','line_number':376,'multiline':False]['text':' dir was cleared by the tempdir() function.','line_number':377,'multiline':False]['text':' type: (Text) -> None','line_number':393,'multiline':False]['text':' pylint: disable=line-too-long','line_number':397,'multiline':False]['text':' type: (Text, Optional[Text], AnyStr, Text, Text, Text) -> Tuple[_TempFile, Text]','line_number':400,'multiline':False]['text':' pylint: enable=line-too-long','line_number':401,'multiline':False]['text':' The file may already exist, in which case, ensure it's writable so that','line_number':407,'multiline':False]['text':' it can be truncated.','line_number':408,'multiline':False]['text':' type: () -> Text','line_number':433,'multiline':False]['text':' type: () -> Text','line_number':442,'multiline':False]['text':' type: (Text, Text) -> Text','line_number':447,'multiline':False]['text':' type: () -> bytes','line_number':453,'multiline':False]['text':' type: (Text, Text, Text, Text) -> None','line_number':459,'multiline':False]['text':' type: (bytes, Text) -> None','line_number':474,'multiline':False]['text':' type: (Text, Text, Text) -> ContextManager[TextIO]','line_number':486,'multiline':False]['text':' type: (Text) -> ContextManager[BinaryIO]','line_number':510,'multiline':False]['text':' TODO(b/123775699): Once pytype supports typing.Literal, use overload and','line_number':531,'multiline':False]['text':' Literal to express more precise return types. The contained type is','line_number':532,'multiline':False]['text':' currently `Any` to avoid [bad-return-type] errors in the open_* methods.','line_number':533,'multiline':False]['text':' type: (Callable[..., Any]) -> None','line_number':553,'multiline':False]['text':' type: (Callable[..., Any]) -> _method','line_number':558,'multiline':False]['text':' type: () -> str','line_number':563,'multiline':False]['text':' type: (Optional[Any], Optional[Type[Any]]) -> Callable[..., Any]','line_number':571,'multiline':False]['text':' pytype: disable=attribute-error','line_number':573,'multiline':False]['text':' When to cleanup files/directories created by our `create_tempfile()` and','line_number':579,'multiline':False]['text':' `create_tempdir()` methods after each test case completes. This does *not*','line_number':580,'multiline':False]['text':' affect e.g., files created outside of those methods, e.g., using the stdlib','line_number':581,'multiline':False]['text':' tempfile module. This can be overridden at the class level, instance level,','line_number':582,'multiline':False]['text':' or with the `cleanup` arg of `create_tempfile()` and `create_tempdir()`. See','line_number':583,'multiline':False]['text':' `TempFileCleanup` for details on the different values.','line_number':584,'multiline':False]['text':' TODO(b/70517332): Remove the type comment and the disable once pytype has','line_number':585,'multiline':False]['text':' better support for enums.','line_number':586,'multiline':False]['text':' type: TempFileCleanup  # pytype: disable=annotation-type-mismatch','line_number':587,'multiline':False]['text':' Exit stacks for per-test and per-class scopes.','line_number':592,'multiline':False]['text':' This is to work around missing type stubs in unittest.pyi','line_number':598,'multiline':False]['text':' type: Optional[_OutcomeType]','line_number':599,'multiline':False]['text':' NOTE: Only Python 3 contextlib has ExitStack','line_number':603,'multiline':False]['text':' NOTE: Only Python 3 contextlib has ExitStack and only Python 3.8+ has','line_number':611,'multiline':False]['text':' addClassCleanup.','line_number':612,'multiline':False]['text':' type: (Optional[Text], Optional[TempFileCleanup]) -> _TempDir','line_number':618,'multiline':False]['text':' pylint: disable=line-too-long','line_number':671,'multiline':False]['text':' type: (Optional[Text], Optional[AnyStr], Text, Text, Text, Optional[TempFileCleanup]) -> _TempFile','line_number':674,'multiline':False]['text':' pylint: enable=line-too-long','line_number':675,'multiline':False]['text':' type: (ContextManager[_T]) -> _T','line_number':729,'multiline':False]['text':' pylint: disable=no-self-argument','line_number':759,'multiline':False]['text':' type: (ContextManager[_T]) -> _T','line_number':760,'multiline':False]['text':' type: () -> Text','line_number':769,'multiline':False]['text':' type: () -> Text','line_number':774,'multiline':False]['text':' type: (Optional[TempFileCleanup]) -> TempFileCleanup','line_number':778,'multiline':False]['text':' type: (Text, Optional[TempFileCleanup]) -> None','line_number':784,'multiline':False]['text':' Before Python 3.11 https://github.com/python/cpython/pull/28180, errors','line_number':829,'multiline':False]['text':' were bufferred in _Outcome before calling cleanup.','line_number':830,'multiline':False]['text':' pytype: disable=attribute-error','line_number':832,'multiline':False]['text':' type: () -> Text','line_number':836,'multiline':False]['text':' Omit the main name so that test name can be directly copy/pasted to','line_number':850,'multiline':False]['text':' the command line.','line_number':851,'multiline':False]['text':' NOTE: super() is used here instead of directly invoking','line_number':855,'multiline':False]['text':' unittest.TestCase.shortDescription(self), because of the','line_number':856,'multiline':False]['text':' following line that occurs later on:','line_number':857,'multiline':False]['text':'       unittest.TestCase = TestCase','line_number':858,'multiline':False]['text':' Because of this, direct invocation of what we think is the','line_number':859,'multiline':False]['text':' superclass will actually cause infinite recursion.','line_number':860,'multiline':False]['text':' explicitly check the length since some Sized objects (e.g. numpy.ndarray)','line_number':963,'multiline':False]['text':' have strange __nonzero__/__bool__ behavior.','line_number':964,'multiline':False]['text':' pylint: disable=g-explicit-length-test','line_number':965,'multiline':False]['text':' explicitly check the length since some Sized objects (e.g. numpy.ndarray)','line_number':979,'multiline':False]['text':' have strange __nonzero__/__bool__ behavior.','line_number':980,'multiline':False]['text':' pylint: disable=g-explicit-length-test','line_number':981,'multiline':False]['text':' pytype: disable=module-attr','line_number':996,'multiline':False]['text':' assertAlmostEqual should be called with at most one of `places` and','line_number':1029,'multiline':False]['text':' `delta`. However, it's okay for assertSequenceAlmostEqual to pass','line_number':1030,'multiline':False]['text':' both because we want the latter to fail if the former does.','line_number':1031,'multiline':False]['text':' pytype: disable=wrong-keyword-args','line_number':1032,'multiline':False]['text':' pytype: enable=wrong-keyword-args','line_number':1035,'multiline':False]['text':' `unittest2.TestCase` used to have assertSameElements, but it was','line_number':1092,'multiline':False]['text':' removed in favor of assertItemsEqual. As there's a unit test','line_number':1093,'multiline':False]['text':' that explicitly checks this behavior, I am leaving this method','line_number':1094,'multiline':False]['text':' alone.','line_number':1095,'multiline':False]['text':' Fail on strings: empirically, passing strings to this test method','line_number':1096,'multiline':False]['text':' is almost always a bug. If comparing the character sets of two strings','line_number':1097,'multiline':False]['text':' is desired, cast the inputs to sets or lists explicitly.','line_number':1098,'multiline':False]['text':' Fall back to slower list-compare if any of the objects are','line_number':1112,'multiline':False]['text':' not hashable.','line_number':1113,'multiline':False]['text':' unittest.TestCase.assertMultiLineEqual works very similarly, but it','line_number':1129,'multiline':False]['text':' has a different error format. However, I find this slightly more readable.','line_number':1130,'multiline':False]['text':' pylint: disable=unidiomatic-typecheck','line_number':1211,'multiline':False]['text':' We need bytes regexes here because `err` is bytes.','line_number':1250,'multiline':False]['text':' Accommodate code which listed their output regexes w/o the b'' prefix by','line_number':1251,'multiline':False]['text':' converting them to bytes for the user.','line_number':1252,'multiline':False]['text':' We need bytes regexes here because `err` is bytes.','line_number':1296,'multiline':False]['text':' Accommodate code which listed their output regexes w/o the b'' prefix by','line_number':1297,'multiline':False]['text':' converting them to bytes for the user.','line_number':1298,'multiline':False]['text':' The purpose of this return statement is to work around','line_number':1346,'multiline':False]['text':' https://github.com/PyCQA/pylint/issues/5273; it is otherwise ignored.','line_number':1347,'multiline':False]['text':' The purpose of this return statement is to work around','line_number':1354,'multiline':False]['text':' https://github.com/PyCQA/pylint/issues/5273; it is otherwise ignored.','line_number':1355,'multiline':False]['text':' The purpose of this return statement is to work around','line_number':1390,'multiline':False]['text':' https://github.com/PyCQA/pylint/issues/5273; it is otherwise ignored.','line_number':1391,'multiline':False]['text':' The purpose of this return statement is to work around','line_number':1398,'multiline':False]['text':' https://github.com/PyCQA/pylint/issues/5273; it is otherwise ignored.','line_number':1399,'multiline':False]['text':' Objects that compare equal must hash to the same value, but this only','line_number':1600,'multiline':False]['text':' applies if both objects are hashable.','line_number':1601,'multiline':False]['text':' pylint: disable=arguments-out-of-order','line_number':1619,'multiline':False]['text':' pylint: disable=arguments-out-of-order','line_number':1629,'multiline':False]['text':' For every combination of elements, check the order of every pair of','line_number':1633,'multiline':False]['text':' elements.','line_number':1634,'multiline':False]['text':' Check that every element in each group is equal.','line_number':1641,'multiline':False]['text':' In 3.3, unordered are possible.','line_number':1670,'multiline':False]['text':' pytype: disable=module-attr','line_number':1683,'multiline':False]['text':' Sort the entries based on their repr, not based on their sort order,','line_number':1687,'multiline':False]['text':' which will be non-deterministic across executions, for many types.','line_number':1688,'multiline':False]['text':' The standard library default output confounds lexical difference with','line_number':1694,'multiline':False]['text':' value difference; treat them separately.','line_number':1695,'multiline':False]['text':' Accumulate all the problems found so we can report all of them at once','line_number':1761,'multiline':False]['text':' rather than just stopping at the first','line_number':1762,'multiline':False]['text':' Avoid spamming the user toooo much','line_number':1767,'multiline':False]['text':' type: (Any, Any) -> Callable[..., None]','line_number':1805,'multiline':False]['text':' This is a workaround if unittest.TestCase.__init__ was never run.','line_number':1809,'multiline':False]['text':' It usually means that somebody created a subclass just for the','line_number':1810,'multiline':False]['text':' assertions and has overridden __init__. "assertTrue" is a safe','line_number':1811,'multiline':False]['text':' value that will not make __init__ raise a ValueError.','line_number':1812,'multiline':False]['text':' type: (List[_T], List[_T]) -> Tuple[List[_T], List[_T]]','line_number':1824,'multiline':False]['text':' type: (object, object) -> bool','line_number':1874,'multiline':False]['text':' type: (object, object) -> bool','line_number':1879,'multiline':False]['text':' type: (object, object) -> bool','line_number':1886,'multiline':False]['text':' type: (object, object) -> bool','line_number':1891,'multiline':False]['text':' pylint: disable=unidiomatic-typecheck','line_number':1898,'multiline':False]['text':' We do not distinguish between int and long types as 99.99% of Python 2','line_number':1901,'multiline':False]['text':' code should never care.  They collapse into a single type in Python 3.','line_number':1902,'multiline':False]['text':' If they have different types there's no point continuing','line_number':1905,'multiline':False]['text':' NOTE: a or b could be a defaultdict, so we must take care that the traversal','line_number':1917,'multiline':False]['text':' doesn't modify the data.','line_number':1918,'multiline':False]['text':' Strings/bytes are Sequences but we'll just do those with regular !=','line_number':1935,'multiline':False]['text':' The following is identical to Python 3's shlex.quote function.','line_number':1969,'multiline':False]['text':' Single quote word, and replace each ' in word with '"'"'','line_number':1972,'multiline':False]['text':' Windows does not support setting close_fds to True while also redirecting','line_number':1994,'multiline':False]['text':' standard handles.','line_number':1995,'multiline':False]['text':' type: (Union[Text, bytes, bytearray]) -> Text','line_number':2012,'multiline':False]['text':' type: () -> None','line_number':2032,'multiline':False]['text':' Having this in the test output logs by default helps debugging when all','line_number':2033,'multiline':False]['text':' you've got is the log and no other idea of which Python was used.','line_number':2034,'multiline':False]['text':' type: (Text, Any) -> None','line_number':2042,'multiline':False]['text':' type: () -> bool','line_number':2061,'multiline':False]['text':' pylint: disable=protected-access','line_number':2063,'multiline':False]['text':' type: () -> None','line_number':2072,'multiline':False]['text':' faulthandler.register is not available on Windows.','line_number':2075,'multiline':False]['text':' faulthandler.enable() is already called by app.run.','line_number':2076,'multiline':False]['text':' pytype: disable=module-attr','line_number':2078,'multiline':False]['text':' pylint: disable=broad-except','line_number':2079,'multiline':False]['text':' type: (Callable[..., None], Sequence[Text], Mapping[Text, Any]) -> None','line_number':2085,'multiline':False]['text':' Change the default of alsologtostderr from False to True, so the test','line_number':2127,'multiline':False]['text':' programs's stderr will contain all the log messages.','line_number':2128,'multiline':False]['text':' If --alsologtostderr=false is specified in the command-line, or user','line_number':2129,'multiline':False]['text':' has called FLAGS.alsologtostderr = False before, then the value is kept','line_number':2130,'multiline':False]['text':' False.','line_number':2131,'multiline':False]['text':' Here we only want to get the `argv` without the flags. To avoid any','line_number':2134,'multiline':False]['text':' side effects of parsing flags, we temporarily stub out the `parse` method','line_number':2135,'multiline':False]['text':' Avoid any side effects of parsing flags.','line_number':2139,'multiline':False]['text':' This must be a separate loop since multiple flag names (short_name=) can','line_number':2141,'multiline':False]['text':' point to the same flag object.','line_number':2142,'multiline':False]['text':' Send logging to stderr. Use --alsologtostderr instead of --logtostderr','line_number':2154,'multiline':False]['text':' in case tests are reading their own logs.','line_number':2155,'multiline':False]['text':' type: (Type, Text) -> bool','line_number':2166,'multiline':False]['text':' type: (Text) -> Callable[[_T], _T]','line_number':2179,'multiline':False]['text':' Only shadow the setUpClass method if it is directly defined. If it is','line_number':2226,'multiline':False]['text':' in the parent class we invoke it via a super() call instead of holding','line_number':2227,'multiline':False]['text':' a reference to it.','line_number':2228,'multiline':False]['text':' Skip this class if it is the one that was decorated with @skipThisClass','line_number':2233,'multiline':False]['text':' Pass along `cls` so the MRO chain doesn't break.','line_number':2237,'multiline':False]['text':' The original method is a `classmethod` descriptor, which can't','line_number':2238,'multiline':False]['text':' be directly called, but `__func__` has the underlying function.','line_number':2239,'multiline':False]['text':' Because there's no setUpClass() defined directly on test_case_class,','line_number':2242,'multiline':False]['text':' we call super() ourselves to continue execution of the inheritance','line_number':2243,'multiline':False]['text':' chain.','line_number':2244,'multiline':False]['text':' pylint:disable=invalid-name','line_number':2279,'multiline':False]['text':' type: () -> Optional[Text]','line_number':2296,'multiline':False]['text':' type: (MutableSequence[Text]) -> None','line_number':2308,'multiline':False]['text':' type: (MutableSequence[Text]) -> None','line_number':2336,'multiline':False]['text':' type: (Optional[unittest.TestLoader]) -> unittest.TestLoader','line_number':2360,'multiline':False]['text':' It may be useful to write the shard file even if the other sharding','line_number':2383,'multiline':False]['text':' environment variables are not set. Test runners may use this functionality','line_number':2384,'multiline':False]['text':' to query whether a test binary implements the test sharding protocol.','line_number':2385,'multiline':False]['text':' Not using sharding, use the expected test loader.','line_number':2397,'multiline':False]['text':' Replace the original getTestCaseNames with one that returns','line_number':2408,'multiline':False]['text':' the test case names for this shard.','line_number':2409,'multiline':False]['text':' We need to sort the list of tests in order to determine which tests this','line_number':2416,'multiline':False]['text':' shard is responsible for; however, it's important to preserve the order','line_number':2417,'multiline':False]['text':' returned by the base loader, e.g. in the case of randomized test ordering.','line_number':2418,'multiline':False]['text':' pylint: disable=line-too-long','line_number':2430,'multiline':False]['text':' type: (MutableSequence[Text], Sequence[Any], MutableMapping[Text, Any], Type) -> unittest.TestResult','line_number':2432,'multiline':False]['text':' pylint: enable=line-too-long','line_number':2433,'multiline':False]['text':' The entry from kwargs overrides argv.','line_number':2436,'multiline':False]['text':' Set up test filtering if requested in environment.','line_number':2439,'multiline':False]['text':' Set up --failfast as requested in environment','line_number':2441,'multiline':False]['text':' Shard the (default or custom) loader if sharding is turned on.','line_number':2444,'multiline':False]['text':' XML file name is based upon (sorted by priority):','line_number':2447,'multiline':False]['text':' --xml_output_file flag, XML_OUTPUT_FILE variable,','line_number':2448,'multiline':False]['text':' TEST_XMLOUTPUTDIR variable or RUNNING_UNDER_TEST_DAEMON variable.','line_number':2449,'multiline':False]['text':' File exists error can occur with concurrent tests','line_number':2461,'multiline':False]['text':' Fail early if we can't write to the XML output file. This is so that we','line_number':2464,'multiline':False]['text':' don't waste people's time running tests that will just fail anyways.','line_number':2465,'multiline':False]['text':' We can reuse testRunner if it supports XML output (e. g. by inheriting','line_number':2469,'multiline':False]['text':' from xml_reporter.TextAndXMLTestRunner). Otherwise we need to use','line_number':2470,'multiline':False]['text':' xml_reporter.TextAndXMLTestRunner.','line_number':2471,'multiline':False]['text':' Passing a class object here allows TestProgram to initialize','line_number':2477,'multiline':False]['text':' instances based on its kwargs and/or parsed command-line args.','line_number':2478,'multiline':False]['text':' Use an in-memory buffer (not backed by the actual file) to store the XML','line_number':2482,'multiline':False]['text':' report, because some tools modify the file (e.g., create a placeholder','line_number':2483,'multiline':False]['text':' with partial information, in case the test process crashes).','line_number':2484,'multiline':False]['text':' pytype: disable=attribute-error','line_number':2486,'multiline':False]['text':' If we've used a seed to randomize test case ordering, we want to record it','line_number':2488,'multiline':False]['text':' as a top-level attribute in the `testsuites` section of the XML output.','line_number':2489,'multiline':False]['text':' testRunner can be a class or an instance, which must be tested for','line_number':2500,'multiline':False]['text':' differently.','line_number':2501,'multiline':False]['text':' Overriding testRunner isn't uncommon, so only enable the debugging','line_number':2502,'multiline':False]['text':' integration if the runner claims it does; we don't want to accidentally','line_number':2503,'multiline':False]['text':' clobber something on the runner.','line_number':2504,'multiline':False]['text':' Make sure tmpdir exists.','line_number':2510,'multiline':False]['text':' Concurrent test might have created the directory.','line_number':2515,'multiline':False]['text':' Let unittest.TestProgram.__init__ do its own argv parsing, e.g. for '-v',','line_number':2519,'multiline':False]['text':' on argv, which is sys.argv without the command-line flags.','line_number':2520,'multiline':False]['text':' pylint: disable=line-too-long','line_number':2535,'multiline':False]['text':' type: (MutableSequence[Text], Sequence[Any], MutableMapping[Text, Any]) -> None','line_number':2536,'multiline':False]['text':' pylint: enable=line-too-long','line_number':2537,'multiline':False]['text':' type: (Text) -> None','line_number':2564,'multiline':False]['text':' type: (Text) -> Text','line_number':2575,'multiline':False]