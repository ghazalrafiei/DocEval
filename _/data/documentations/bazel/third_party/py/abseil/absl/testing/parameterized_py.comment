['text':' Copyright 2017 The Abseil Authors.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'      http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Signal the metaclass that the name of the test function is unique','line_number':325,'multiline':False]['text':' and descriptive.','line_number':326,'multiline':False]['text':' Create a new dict to avoid modifying the supplied testcase_params.','line_number':334,'multiline':False]['text':' Support PEP-8 underscore style for test naming if used.','line_number':351,'multiline':False]['text':' If it's a generator, convert it to a tuple and treat them as','line_number':359,'multiline':False]['text':' parameters.','line_number':360,'multiline':False]['text':' The metaclass creates a unique, but non-descriptive method name for','line_number':363,'multiline':False]['text':' _ARGUMENT_REPR tests using an indexed suffix.','line_number':364,'multiline':False]['text':' To keep test names descriptive, only the original method name is used.','line_number':365,'multiline':False]['text':' To make sure test names are unique, we add a unique descriptive suffix','line_number':366,'multiline':False]['text':' __x_params_repr__ for every test.','line_number':367,'multiline':False]['text':' NOTE: _test_params_repr is private to parameterized.TestCase and it's','line_number':389,'multiline':False]['text':' metaclass; do not use it outside of those classes.','line_number':390,'multiline':False]['text':' Support using a single non-tuple parameter as a list of test cases.','line_number':427,'multiline':False]['text':' Note that the single non-tuple parameter can't be Mapping either, which','line_number':428,'multiline':False]['text':' means a single dict parameter case.','line_number':429,'multiline':False]['text':' Convert testgrid into a sequence of sequences of kwargs dicts and combine','line_number':535,'multiline':False]['text':' with the positional parameters.','line_number':536,'multiline':False]['text':' So foo=[1,2], bar=[3,4] --> [[{foo: 1}, {foo: 2}], [{bar: 3, bar: 4}]]','line_number':537,'multiline':False]['text':' Create all possible combinations of parameters as a cartesian product','line_number':541,'multiline':False]['text':' of parameter values.','line_number':542,'multiline':False]['text':' NOTE: _test_params_repr is private to parameterized.TestCase and it's','line_number':555,'multiline':False]['text':' metaclass; do not use it outside of those classes.','line_number':556,'multiline':False]['text':' NOTE: `obj` might not be a _ParameterizedTestIter in two cases:','line_number':561,'multiline':False]['text':' 1. a class-level iterable named test* that isn't a test, such as','line_number':562,'multiline':False]['text':'    a list of something. Such attributes get deleted from the class.','line_number':563,'multiline':False]['text':'','line_number':564,'multiline':False]['text':' 2. If a decorator is applied to the parameterized test, e.g.','line_number':565,'multiline':False]['text':'    @morestuff','line_number':566,'multiline':False]['text':'    @parameterized.parameters(...)','line_number':567,'multiline':False]['text':'    def test_foo(...): ...','line_number':568,'multiline':False]['text':'','line_number':569,'multiline':False]['text':'   This is OK so long as the underlying parameterized function state','line_number':570,'multiline':False]['text':'   is forwarded (e.g. using functool.wraps() and **without**','line_number':571,'multiline':False]['text':'   accessing explicitly accessing the internal attributes.','line_number':572,'multiline':False]['text':' Update the original test method name so it's more accurate.','line_number':574,'multiline':False]['text':' The mismatch might happen when another decorator is used inside','line_number':575,'multiline':False]['text':' the parameterized decrators, and the inner decorator doesn't','line_number':576,'multiline':False]['text':' preserve its __name__.','line_number':577,'multiline':False]['text':' If the base class is a subclass of parameterized.TestCase, inherit its','line_number':583,'multiline':False]['text':' _test_params_reprs too.','line_number':584,'multiline':False]['text':' Check if the base has _test_params_reprs first, then check if it's a','line_number':586,'multiline':False]['text':' subclass of parameterized.TestCase. Otherwise when this is called for','line_number':587,'multiline':False]['text':' the parameterized.TestCase definition itself, this raises because','line_number':588,'multiline':False]['text':' itself is not defined yet. This works as long as absltest.TestCase does','line_number':589,'multiline':False]['text':' not define _test_params_reprs.','line_number':590,'multiline':False]['text':' test_method may both exists in base and this class.','line_number':594,'multiline':False]['text':' This class's method overrides base class's.','line_number':595,'multiline':False]['text':' That's why it should only inherit it if it does not exist.','line_number':596,'multiline':False]['text':' visibility: private; do not call outside this class.','line_number':644,'multiline':False]['text':' We include the params in the id so that, when reported in the','line_number':668,'multiline':False]['text':' test.xml file, the value is more informative than just "test_foo0".','line_number':669,'multiline':False]['text':' Use a space to separate them so that it's copy/paste friendly and','line_number':670,'multiline':False]['text':' easy to identify the actual test id.','line_number':671,'multiline':False]['text':' This function is kept CamelCase because it's used as a class's base class.','line_number':677,'multiline':False]['text':' pylint: disable=invalid-name','line_number':678,'multiline':False]