['text':' mock.py','line_number':1,'multiline':False]['text':' Test tools for mocking and patching.','line_number':2,'multiline':False]['text':' Copyright (C) 2007-2012 Michael Foord & the mock team','line_number':3,'multiline':False]['text':' E-mail: fuzzyman AT voidspace DOT org DOT uk','line_number':4,'multiline':False]['text':' mock 1.0','line_number':6,'multiline':False]['text':' http://www.voidspace.org.uk/python/mock/','line_number':7,'multiline':False]['text':' Released subject to the BSD License','line_number':9,'multiline':False]['text':' Please see http://www.voidspace.org.uk/python/license.shtml','line_number':10,'multiline':False]['text':' Scripts maintained at http://www.voidspace.org.uk/python/index.shtml','line_number':12,'multiline':False]['text':' Comments, suggestions and bug reports welcome.','line_number':13,'multiline':False]['text':' for alternative platforms that','line_number':42,'multiline':False]['text':' may not have inspect','line_number':43,'multiline':False]['text':' Python 2.4 compatibility','line_number':49,'multiline':False]['text':' Python 3','line_number':72,'multiline':False]['text':' Python 3','line_number':78,'multiline':False]['text':' Python 2.4 compatibility','line_number':84,'multiline':False]['text':' jython','line_number':96,'multiline':False]['text':' Python 2.X','line_number':103,'multiline':False]['text':' Needed to work around Python 3 bug where use of "super" interferes with','line_number':115,'multiline':False]['text':' defining __class__ as a descriptor','line_number':116,'multiline':False]['text':' can't use isinstance on Mock objects because they override __class__','line_number':129,'multiline':False]['text':' The base class for all mocks is NonCallableMock','line_number':130,'multiline':False]['text':' for classes where instance is True we end up here too','line_number':162,'multiline':False]['text':' C function / method, possibly inherited object().__init__','line_number':172,'multiline':False]['text':' C function / method, possibly inherited object().__init__','line_number':179,'multiline':False]['text':' instance methods and classmethods need to lose the self argument','line_number':182,'multiline':False]['text':' this condition and the above one are never both True - why?','line_number':186,'multiline':False]['text':' can't use self because "self" is common as an argument name','line_number':209,'multiline':False]['text':' unfortunately even not in the first place','line_number':210,'multiline':False]['text':'funcopy.__dict__.update(func.__dict__)','line_number':220,'multiline':False]['text':' checks for list or tuples','line_number':238,'multiline':False]['text':' XXXX badly named!','line_number':239,'multiline':False]['text':' already an instance','line_number':247,'multiline':False]['text':' uses __bases__ instead of __mro__ so that we work with old style classes','line_number':251,'multiline':False]['text':' creates a function with signature (*args, **kwargs) that delegates to a','line_number':262,'multiline':False]['text':' mock. It still does signature checking by calling a lambda with the same','line_number':263,'multiline':False]['text':' signature as the original.','line_number':264,'multiline':False]['text':' was a C function (e.g. object().__init__ ) that can't be mocked','line_number':271,'multiline':False]['text':' can't use isinstance with mocks','line_number':296,'multiline':False]['text':' Without this help(mock) raises an exception','line_number':356,'multiline':False]['text':' setting a mock (value) as a child or return value of itself','line_number':441,'multiline':False]['text':' should not modify the mock','line_number':442,'multiline':False]['text':' every instance has its own class','line_number':469,'multiline':False]['text':' so we can create magic methods on the','line_number':470,'multiline':False]['text':' class without stomping on other mocks','line_number':471,'multiline':False]['text':' we sort on the number of dots so that','line_number':641,'multiline':False]['text':' attributes are set before we set attributes on','line_number':642,'multiline':False]['text':' attributes','line_number':643,'multiline':False]['text':' XXXX should we get the attribute without triggering code','line_number':668,'multiline':False]['text':' execution?','line_number':669,'multiline':False]['text':' use ids here so as not to call __hash__ on the mocks','line_number':707,'multiline':False]['text':' property setters go through here','line_number':756,'multiline':False]['text':' only set _new_name and not name so that mock_calls is tracked','line_number':774,'multiline':False]['text':' but not method calls','line_number':775,'multiline':False]['text':' for magic methods that are still MagicProxy objects and','line_number':792,'multiline':False]['text':' not set on the instance itself','line_number':793,'multiline':False]['text':' XXXX backwards compatibility','line_number':925,'multiline':False]['text':' but this will blow up on first call - so maybe we should fail early?','line_number':926,'multiline':False]['text':' stub method that can be replaced with one with a specific signature','line_number':947,'multiline':False]['text':' can't use self in-case a function / method we are mocking uses self','line_number':952,'multiline':False]['text':' in the signature','line_number':953,'multiline':False]['text':' use ids here so as not to call __hash__ on the mocks','line_number':1000,'multiline':False]['text':' XXXX horrible','line_number':1107,'multiline':False]['text':' don't use a with here (backwards compatability with Python 2.4)','line_number':1183,'multiline':False]['text':' can't use try...except...finally because of Python 2.4','line_number':1187,'multiline':False]['text':' compatibility','line_number':1188,'multiline':False]['text':' the patcher may have been started, but an exception','line_number':1205,'multiline':False]['text':' raised whilst entering one of its additional_patchers','line_number':1206,'multiline':False]['text':' Pass the exception to __exit__','line_number':1208,'multiline':False]['text':' re-raise the exception','line_number':1210,'multiline':False]['text':' not in Python 3','line_number':1218,'multiline':False]['text':' normalise False to None','line_number':1254,'multiline':False]['text':' set spec to the object we are replacing','line_number':1273,'multiline':False]['text':' If we're patching out a class and there is a spec','line_number':1289,'multiline':False]['text':' add a name to mocks','line_number':1312,'multiline':False]['text':' we can only tell if the instance should be callable if the','line_number':1321,'multiline':False]['text':' spec is not a list','line_number':1322,'multiline':False]['text':' spec is ignored, new *must* be default, spec_set is treated','line_number':1334,'multiline':False]['text':' as a boolean. Should we check spec is not None and that spec_set','line_number':1335,'multiline':False]['text':' is a bool?','line_number':1336,'multiline':False]['text':' can't set keyword args when we aren't creating the mock','line_number':1351,'multiline':False]['text':' XXXX If new is a Mock we could call new.configure_mock(**kwargs)','line_number':1352,'multiline':False]['text':' needed for proxy objects like django settings','line_number':1383,'multiline':False]['text':' need to wrap in a list for python 3, where items is a view','line_number':1477,'multiline':False]['text':' support any argument supported by dict(...) constructor','line_number':1604,'multiline':False]['text':' dict like object with no copy method','line_number':1649,'multiline':False]['text':' must support iteration over keys','line_number':1650,'multiline':False]['text':' dict like object with no update method','line_number':1662,'multiline':False]['text':' not including __prepare__, __instancecheck__, __subclasscheck__','line_number':1730,'multiline':False]['text':' (as they are metaclass methods)','line_number':1731,'multiline':False]['text':' __del__ is not supported at all as it causes problems if it exists','line_number':1732,'multiline':False]['text':' if ret_val was already an iterator, then calling iter on it should','line_number':1812,'multiline':False]['text':' return the iterator unchanged','line_number':1813,'multiline':False]['text':' XXXX why do we return AttributeError here?','line_number':1836,'multiline':False]['text':'      set it as a side_effect instead?','line_number':1837,'multiline':False]['text':' remove unneeded magic methods','line_number':1865,'multiline':False]['text':' don't overwrite existing attributes if called a second time','line_number':1868,'multiline':False]['text':' len 2','line_number':2059,'multiline':False]['text':' could be (name, args) or (name, kwargs) or (args, kwargs)','line_number':2060,'multiline':False]['text':' this order is important for ANY to work!','line_number':2074,'multiline':False]['text':' can't pass a list instance to the mock constructor as it will be','line_number':2155,'multiline':False]['text':' interpreted as a list of strings','line_number':2156,'multiline':False]['text':' None we mock with a normal mock without a spec','line_number':2165,'multiline':False]['text':' descriptors don't have a spec','line_number':2172,'multiline':False]['text':' because we don't know what type they return','line_number':2173,'multiline':False]['text':' for a top level object no _new_name should be set','line_number':2182,'multiline':False]['text':' should only happen at the top level because we don't','line_number':2189,'multiline':False]['text':' recurse for functions','line_number':2190,'multiline':False]['text':' MagicMock already does the useful magic methods for us','line_number':2204,'multiline':False]['text':' allow a mock to actually be a function','line_number':2208,'multiline':False]['text':' XXXX do we need a better way of getting attributes without','line_number':2211,'multiline':False]['text':' triggering code execution (?) Probably not - we need the actual','line_number':2212,'multiline':False]['text':' object to mock it so we would rather trigger a property than mock','line_number':2213,'multiline':False]['text':' the property descriptor. Likewise we want to mock out dynamically','line_number':2214,'multiline':False]['text':' provided attributes.','line_number':2215,'multiline':False]['text':' XXXX what about attributes that raise exceptions other than','line_number':2216,'multiline':False]['text':' AttributeError on being fetched?','line_number':2217,'multiline':False]['text':' we could be resilient against it, or catch and propagate the','line_number':2218,'multiline':False]['text':' exception when the attribute is fetched from the mock','line_number':2219,'multiline':False]['text':' so functions created with _set_signature become instance attributes,','line_number':2243,'multiline':False]['text':' *plus* their underlying mock exists in _mock_children of the parent','line_number':2244,'multiline':False]['text':' mock. Adding to _mock_children may be unnecessary where we are also','line_number':2245,'multiline':False]['text':' setting as an instance attribute?','line_number':2246,'multiline':False]['text':' instance attribute - shouldn't skip','line_number':2256,'multiline':False]['text':' old style class: can't have descriptors anyway','line_number':2260,'multiline':False]['text':' shouldn't get here unless function is a dynamically provided attribute','line_number':2271,'multiline':False]['text':' XXXX untested behaviour','line_number':2272,'multiline':False]['text':' in Python 2, _sre.SRE_Pattern objects have no __class__','line_number':2280,'multiline':False]['text':' python function','line_number':2297,'multiline':False]['text':' instance method','line_number':2299,'multiline':False]['text':' unbound method','line_number':2301,'multiline':False]['text':' set on first use','line_number':2333,'multiline':False]