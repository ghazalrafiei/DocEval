['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ClassVisitor links all corresponding non-private, non-static,
 * non-initializer methods in the class hierarchies of all visited classes.
 * Visited classes are typically all class files that are not being subclassed.
 * Chains of links that have been created in previous invocations are merged
 * with new chains of links, in order to create a consistent set of chains.
 *
 * @author Eric Lafortune
 ','line_number':28,'multiline':True]['text':' An object that is reset and reused every time.','line_number':42,'multiline':False]['text':' The map: [class member name+' '+descriptor - class member info]','line_number':43,'multiline':False]['text':' Implementations for ClassVisitor.','line_number':47,'multiline':False]['text':' Collect all non-private members in this class hierarchy.','line_number':51,'multiline':False]['text':' Clean up for the next class hierarchy.','line_number':57,'multiline':False]['text':' Implementations for MemberVisitor.','line_number':62,'multiline':False]['text':' Get the class member's name and descriptor.','line_number':66,'multiline':False]['text':' Special cases: <clinit> and <init> are always kept unchanged.','line_number':70,'multiline':False]['text':' We can ignore them here.','line_number':71,'multiline':False]['text':' See if we've already come across a method with the same name and','line_number':77,'multiline':False]['text':' descriptor.','line_number':78,'multiline':False]['text':' Get the last method in the chain.','line_number':84,'multiline':False]['text':' Store the new class method in the map.','line_number':87,'multiline':False]['text':' Link both members.','line_number':92,'multiline':False]['text':' Small utility methods.','line_number':98,'multiline':False]['text':'*
     * Links the two given class members.
     ','line_number':100,'multiline':True]['text':' Get the last methods in the both chains.','line_number':105,'multiline':False]['text':' Check if both link chains aren't already ending in the same element.','line_number':109,'multiline':False]['text':' Merge the two chains, with the library members last.','line_number':112,'multiline':False]['text':'*
     * Finds the last class member in the linked list of related class members.
     * @param member the given class member.
     * @return the last class member in the linked list.
     ','line_number':125,'multiline':True]['text':'*
     * Finds the last visitor accepter in the linked list of visitors.
     * @param visitorAccepter the given method.
     * @return the last method in the linked list.
     ','line_number':143,'multiline':True]