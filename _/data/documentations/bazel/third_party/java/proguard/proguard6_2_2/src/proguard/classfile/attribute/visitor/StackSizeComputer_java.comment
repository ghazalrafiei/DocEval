['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor computes the stack sizes at all instruction offsets
 * of the code attributes that it visits.
 *
 * @author Eric Lafortune
 ','line_number':31,'multiline':True]['text':'*','line_number':43,'multiline':False]['text':'/
    private static       boolean DEBUG = true;
    //','line_number':45,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is reachable in the
     * most recently visited code attribute.
     ','line_number':60,'multiline':True]['text':'*
     * Returns the stack size before the given instruction offset of the most
     * recently visited code attribute.
     ','line_number':70,'multiline':True]['text':'*
     * Returns the stack size after the given instruction offset of the most
     * recently visited code attribute.
     ','line_number':85,'multiline':True]['text':'*
     * Returns the maximum stack size of the most recently visited code attribute.
     ','line_number':100,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':109,'multiline':False]['text':'        DEBUG =','line_number':116,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':117,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':118,'multiline':False]['text':' TODO: Remove this when the code has stabilized.','line_number':120,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':121,'multiline':False]['text':' Process the code.','line_number':124,'multiline':False]['text':' Make sure the global arrays are sufficiently large.','line_number':153,'multiline':False]['text':' The initial stack is always empty.','line_number':158,'multiline':False]['text':' Evaluate the instruction block starting at the entry point of the method.','line_number':162,'multiline':False]['text':' Evaluate the exception handlers.','line_number':165,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':170,'multiline':False]['text':' Some simple instructions exit from the current instruction block.','line_number':176,'multiline':False]['text':' Constant pool instructions never end the current instruction block.','line_number':189,'multiline':False]['text':' The ret instruction end the current instruction block.','line_number':197,'multiline':False]['text':' Evaluate the target instruction blocks.','line_number':206,'multiline':False]['text':' Evaluate the instructions after a subroutine branch.','line_number':213,'multiline':False]['text':' We assume subroutine calls (jsr and jsr_w instructions) don't','line_number':217,'multiline':False]['text':' change the stack, other than popping the return value.','line_number':218,'multiline':False]['text':' Some branch instructions always end the current instruction block.','line_number':227,'multiline':False]['text':' Evaluate the target instruction blocks.','line_number':238,'multiline':False]['text':' Loop over all jump offsets.','line_number':240,'multiline':False]['text':' Evaluate the jump instruction block.','line_number':245,'multiline':False]['text':' Also evaluate the default instruction block.','line_number':252,'multiline':False]['text':' The switch instruction always ends the current instruction block.','line_number':258,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':263,'multiline':False]['text':' The stack size when entering the exception handler is always 1.','line_number':272,'multiline':False]['text':' Evaluate the instruction block starting at the entry point of the','line_number':275,'multiline':False]['text':' exception handler.','line_number':276,'multiline':False]['text':' Small utility methods.','line_number':284,'multiline':False]['text':'*
     * Evaluates a block of instructions that hasn't been handled before,
     * starting at the given offset and ending at a branch instruction, a return
     * instruction, or a throw instruction. Branch instructions are handled
     * recursively.
     ','line_number':286,'multiline':True]['text':' Remember the initial stack size.','line_number':309,'multiline':False]['text':' Remember the maximum stack size.','line_number':312,'multiline':False]['text':' Evaluate any instructions that haven't been evaluated before.','line_number':318,'multiline':False]['text':' Mark the instruction as evaluated.','line_number':321,'multiline':False]['text':' Compute the instruction's effect on the stack size.','line_number':340,'multiline':False]['text':' Remember the maximum stack size.','line_number':355,'multiline':False]['text':' Remember the next instruction offset.','line_number':361,'multiline':False]['text':' Visit the instruction, in order to handle branches.','line_number':365,'multiline':False]['text':' Stop evaluating after a branch.','line_number':368,'multiline':False]['text':' Continue with the next instruction.','line_number':374,'multiline':False]['text':' Restore the stack size for possible subsequent instruction blocks.','line_number':386,'multiline':False]