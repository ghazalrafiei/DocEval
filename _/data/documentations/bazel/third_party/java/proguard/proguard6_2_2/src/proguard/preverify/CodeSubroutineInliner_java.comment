['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor inlines local subroutines (jsr/ret) in the code
 * attributes that it visits.
 *
 * @author Eric Lafortune
 ','line_number':33,'multiline':True]['text':'*','line_number':45,'multiline':False]['text':'/
    private static       boolean DEBUG = System.getProperty("csi") != null;
    //','line_number':47,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':59,'multiline':False]['text':'        DEBUG =','line_number':66,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':67,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':68,'multiline':False]['text':'        CodeAttributeComposer.DEBUG = DEBUG;','line_number':69,'multiline':False]['text':' TODO: Remove this when the subroutine inliner has stabilized.','line_number':71,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':72,'multiline':False]['text':' Process the code.','line_number':75,'multiline':False]['text':' Don't bother if there aren't any subroutines anyway.','line_number':99,'multiline':False]['text':' Append the body of the code.','line_number':110,'multiline':False]['text':' Copy the non-subroutine instructions.','line_number':114,'multiline':False]['text':' Is this a returning subroutine?','line_number':121,'multiline':False]['text':' Skip the subroutine.','line_number':125,'multiline':False]['text':' Append a label at this offset instead.','line_number':131,'multiline':False]['text':' Copy the instruction, inlining any subroutine call recursively.','line_number':136,'multiline':False]['text':' Copy the exceptions. Note that exceptions with empty try blocks','line_number':143,'multiline':False]['text':' are automatically removed.','line_number':144,'multiline':False]['text':' Append a label just after the code.','line_number':154,'multiline':False]['text':' End and update the code attribute.','line_number':157,'multiline':False]['text':'*
     * Appends the specified subroutine.
     ','line_number':163,'multiline':True]['text':' Don't go inlining exceptions that are already applicable to this','line_number':179,'multiline':False]['text':' subroutine invocation.','line_number':180,'multiline':False]['text':' Copy the subroutine instructions, inlining any subroutine calls','line_number':193,'multiline':False]['text':' recursively.','line_number':194,'multiline':False]['text':' Append a label just after the code.','line_number':206,'multiline':False]['text':' Inline the subroutine exceptions.','line_number':209,'multiline':False]['text':' We can again inline exceptions that are applicable to this','line_number':216,'multiline':False]['text':' subroutine invocation.','line_number':217,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':226,'multiline':False]['text':' Append a label at this offset instead of saving the subroutine','line_number':237,'multiline':False]['text':' return address.','line_number':238,'multiline':False]['text':' Append the instruction.','line_number':243,'multiline':False]['text':' Is the return instruction the last instruction of the subroutine?','line_number':254,'multiline':False]['text':' Append a label at this offset instead of the subroutine return.','line_number':262,'multiline':False]['text':' Replace the instruction by a branch.','line_number':272,'multiline':False]['text':' Append a label at this offset instead of saving the subroutine','line_number':287,'multiline':False]['text':' return address.','line_number':288,'multiline':False]['text':' Append the instruction.','line_number':293,'multiline':False]['text':' Is the subroutine ever returning?','line_number':308,'multiline':False]['text':' Append a label at this offset instead of the subroutine invocation.','line_number':311,'multiline':False]['text':' Inline the invoked subroutine.','line_number':314,'multiline':False]['text':' Replace the subroutine invocation by a simple branch.','line_number':328,'multiline':False]['text':' Append the instruction.','line_number':338,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':344,'multiline':False]['text':' Exclude any subroutine invocations that jump out of the try block,','line_number':353,'multiline':False]['text':' by adding a try block before (and later on, after) each invocation.','line_number':354,'multiline':False]['text':' Is it a subroutine invocation?','line_number':362,'multiline':False]['text':' Append a try block that ends before the subroutine invocation.','line_number':370,'multiline':False]['text':' The next try block will start after the subroutine invocation.','line_number':376,'multiline':False]['text':' Append the exception. Note that exceptions with empty try blocks','line_number':395,'multiline':False]['text':' are automatically ignored.','line_number':396,'multiline':False]