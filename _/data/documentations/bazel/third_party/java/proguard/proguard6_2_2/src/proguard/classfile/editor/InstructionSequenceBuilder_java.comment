['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This utility class allows to construct sequences of instructions and
 * their constants.
 *
 * @author Eric Lafortune
 ','line_number':31,'multiline':True]['text':'*
     * Creates a new InstructionSequenceBuilder.
     ','line_number':44,'multiline':True]['text':'*
     * Creates a new InstructionSequenceBuilder that automatically initializes
     * class references and class member references in new constants.
     * @param programClassPool the program class pool from which new
     *                         constants can be initialized.
     * @param libraryClassPool the library class pool from which new
     *                         constants can be initialized.
     ','line_number':53,'multiline':True]['text':'*
     * Creates a new InstructionSequenceBuilder.
     * @param targetClass the target class for the instruction
     *                    constants.
     ','line_number':70,'multiline':True]['text':'*
     * Creates a new InstructionSequenceBuilder that automatically initializes
     * class references and class member references in new constants.
     * @param targetClass      the target class for the instruction
     *                         constants.
     * @param programClassPool the program class pool from which new
     *                         constants can be initialized.
     * @param libraryClassPool the library class pool from which new
     *                         constants can be initialized.
     ','line_number':81,'multiline':True]['text':'*
     * Creates a new InstructionSequenceBuilder.
     * @param constantPoolEditor the editor to use for creating any constants
     *                           for the instructions.
     ','line_number':99,'multiline':True]['text':'*
     * Returns the ConstantPoolEditor used by this builder to
     * create constants.
     *
     * @return the ConstantPoolEditor used by this builder to
     * create constants.
     ','line_number':110,'multiline':True]['text':'*
     * Short for {@link #appendInstruction(Instruction)}.
     *
     * @see InstructionSequenceReplacer#label()
     ','line_number':123,'multiline':True]['text':'*
     * Short for {@link #appendInstruction(Instruction)}.
     *
     * @see InstructionSequenceReplacer#catch_(int,int,int)
     ','line_number':134,'multiline':True]['text':'*
     * Appends the given instruction.
     * @param instruction the instruction to be appended.
     * @return the builder itself.
     ','line_number':145,'multiline':True]['text':'*
     * Appends the given instructions.
     * @param instructions the instructions to be appended.
     * @return the builder itself.
     ','line_number':156,'multiline':True]['text':'*
     * Short for {@link #instructions()}.
     ','line_number':172,'multiline':True]['text':'*
     * Returns the accumulated sequence of instructions
     * and resets the sequence in the builder.
     ','line_number':181,'multiline':True]['text':'*
     * Returns the accumulated set of constants
     * and resets the set in the builder.
     ','line_number':196,'multiline':True]['text':' Methods corresponding to the bytecode opcodes.','line_number':217,'multiline':False]['text':' If we can shrink the instruction, we may not need to create a constant.','line_number':376,'multiline':False]['text':' If we can shrink the instruction, we may not need to create a constant.','line_number':402,'multiline':False]['text':' If we can shrink the instruction, we may not need to create a constant.','line_number':408,'multiline':False]['text':' Additional convenience methods.','line_number':1694,'multiline':False]['text':'*
     * Pushes the given primitive value on the stack.
     *
     * Operand stack:
     * ... -> ..., value
     *
     * @param value        the primitive value to be pushed - should never be null.
     * @param type the internal type of the primitive ('Z','B','I',...)
     ','line_number':1696,'multiline':True]['text':'*
     * Pushes the given primitive int on the stack in the most efficient way
     * (as an iconst, bipush, sipush, or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1723,'multiline':True]['text':'*
     * Pushes the given primitive float on the stack in the most efficient way
     * (as an fconst or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1740,'multiline':True]['text':'*
     * Pushes the given primitive long on the stack in the most efficient way
     * (as an lconst or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1755,'multiline':True]['text':'*
     * Pushes the given primitive double on the stack in the most efficient way
     * (as a dconst or ldc instruction).
     *
     * @param value the int value to be pushed.
     ','line_number':1770,'multiline':True]['text':'*
     * Pushes a new array on the stack.
     *
     * Operand stack:
     * ... -> ..., array
     *
     * @param type the array element type (or class name in case of objects).
     * @param size the size of the array to be created.
     ','line_number':1785,'multiline':True]['text':' Create new array.','line_number':1797,'multiline':False]['text':'*
     * Loads the given variable onto the stack.
     *
     * Operand stack:
     * ... -> ..., value
     *
     * @param variableIndex the index of the variable to be loaded.
     * @param type  the type of the variable to be loaded.
     ','line_number':1806,'multiline':True]['text':'*
     * Loads the given variable of primitive type onto the stack.
     *
     * Operand stack:
     * ... -> ..., value
     *
     * @param variableIndex the index of the variable to be loaded.
     * @param type          the type of the variable to be loaded.
     ','line_number':1822,'multiline':True]['text':'*
     * Stores the value on top of the stack in the variable with given index.
     *
     * Operand stsack:
     * ..., value -> ...
     *
     * @param variableIndex the index of the variable where to store the
     *                      value.
     * @param type          the type of the value to be stored.
     ','line_number':1849,'multiline':True]['text':'*
     * Stores the primitve value on top of the stack in the variable with given
     * index.
     *
     * Operand stack:
     * ..., value -> ...
     *
     * @param variableIndex the index of the variable where to store the
     *                      value.
     * @param type          the type of the value to be stored.
     ','line_number':1866,'multiline':True]['text':'*
     * Stores an element to an array.
     *
     * Operand stack:
     * ..., array, index, value -> ...
     *
     * @param elementType the type of the value to be stored.
     ','line_number':1895,'multiline':True]['text':' Store element on stack in array.','line_number':1905,'multiline':False]['text':' Small utility methods.','line_number':1921,'multiline':False]['text':'*
     * Adds the given instruction, shrinking it if necessary.
     ','line_number':1923,'multiline':True]['text':'*
     * This main method tests the class.
     ','line_number':1934,'multiline':True]['text':'*
     * This ProgramClass is a dummy container for a constant pool, with a null name.
     ','line_number':1967,'multiline':True]['text':' Overriding methods for Claaz.','line_number':1979,'multiline':False]