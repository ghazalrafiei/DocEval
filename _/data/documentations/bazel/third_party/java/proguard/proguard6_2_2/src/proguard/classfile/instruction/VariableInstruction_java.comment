['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This Instruction represents an instruction that refers to a variable on the
 * local variable stack.
 *
 * @author Eric Lafortune
 ','line_number':27,'multiline':True]['text':'*
     * Creates an uninitialized VariableInstruction.
     ','line_number':40,'multiline':True]['text':'*
     * Copies the given instruction into this instruction.
     * @param variableInstruction the instruction to be copied.
     * @return this instruction.
     ','line_number':77,'multiline':True]['text':'*
     * Return the embedded variable of the given opcode, or 0 if the opcode
     * doesn't have one.
     ','line_number':93,'multiline':True]['text':'*
     * Returns whether this instruction stores the value of a variable.
     * The value is false for the ret instruction, but true for the iinc
     * instruction.
     ','line_number':139,'multiline':True]['text':' A store instruction can be recognized as follows. Note that this','line_number':146,'multiline':False]['text':' excludes the ret instruction, which has a negative opcode.','line_number':147,'multiline':False]['text':'*
     * Returns whether this instruction loads the value of a variable.
     * The value is true for the ret instruction and for the iinc
     * instruction.
     ','line_number':153,'multiline':True]['text':' A load instruction can be recognized as follows. Note that this','line_number':160,'multiline':False]['text':' includes the ret instruction, which has a negative opcode.','line_number':161,'multiline':False]['text':' Implementations for Instruction.','line_number':166,'multiline':False]['text':' Remove the _0, _1, _2, _3 extension, if any.','line_number':170,'multiline':False]['text':' Is this instruction pointing to a variable with index from 0 to 3?','line_number':223,'multiline':False]['text':' Only make the instruction wide if necessary.','line_number':242,'multiline':False]['text':' Also initialize embedded variable indexes.','line_number':261,'multiline':False]['text':' An embedded variable index can be decoded as follows.','line_number':264,'multiline':False]['text':' Implementations for Object.','line_number':310,'multiline':False]['text':' Small utility methods.','line_number':321,'multiline':False]['text':'*
     * Returns the variable index size for this instruction.
     ','line_number':323,'multiline':True]['text':'*
     * Computes the required variable index size for this instruction's variable
     * index.
     ','line_number':337,'multiline':True]['text':'*
     * Returns the constant size for this instruction.
     ','line_number':351,'multiline':True]['text':'*
     * Computes the required constant size for this instruction's constant.
     ','line_number':362,'multiline':True]