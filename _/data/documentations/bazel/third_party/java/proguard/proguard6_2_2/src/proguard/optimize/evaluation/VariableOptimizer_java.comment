['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor optimizes variable allocation based on their the liveness,
 * in the code attributes that it visits.
 *
 * @author Eric Lafortune
 ','line_number':30,'multiline':True]['text':'*','line_number':42,'multiline':False]['text':'/
    private static       boolean DEBUG = true;
    //','line_number':44,'multiline':True]['text':'*
     * Creates a new VariableOptimizer.
     * @param reuseThis specifies whether the 'this' variable can be reused.
     *                  Many JVMs for JME and IBM's JVMs for JSE can't handle
     *                  such reuse.
     ','line_number':61,'multiline':True]['text':'*
     * Creates a new VariableOptimizer with an extra visitor.
     * @param reuseThis                  specifies whether the 'this' variable
     *                                   can be reused. Many JVMs for JME and
     *                                   IBM's JVMs for JSE can't handle such
     *                                   reuse.
     * @param extraVariableMemberVisitor an optional extra visitor for all
     *                                   removed variables.
     ','line_number':73,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':90,'multiline':False]['text':'        DEBUG =','line_number':97,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':98,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':99,'multiline':False]['text':' Initialize the global arrays.','line_number':101,'multiline':False]['text':' Analyze the liveness of the variables in the code.','line_number':104,'multiline':False]['text':' Trim the variables in the local variable tables, because even','line_number':107,'multiline':False]['text':' clipping the tables individually may leave some inconsistencies','line_number':108,'multiline':False]['text':' between them.','line_number':109,'multiline':False]['text':' Loop over all variables.','line_number':125,'multiline':False]['text':' By default, the variable will be mapped onto itself.','line_number':128,'multiline':False]['text':' Only try remapping the variable if it's not a parameter.','line_number':131,'multiline':False]['text':' Try to remap the variable to a variable with a smaller index.','line_number':135,'multiline':False]['text':' This variable has been remapped. Go to the next one.','line_number':146,'multiline':False]['text':' Have we been able to remap any variables?','line_number':153,'multiline':False]['text':' Remap the variables.','line_number':165,'multiline':False]['text':' Visit the method, if required.','line_number':169,'multiline':False]['text':' Just clean up any empty variables.','line_number':177,'multiline':False]['text':' Trim the variables in the local variable table.','line_number':185,'multiline':False]['text':' Trim the variables in the local variable type table.','line_number':192,'multiline':False]['text':' Implementations for LocalVariableInfoVisitor.','line_number':197,'multiline':False]['text':' Trim the local variable to the instructions at which it is alive.','line_number':201,'multiline':False]['text':' Leave the start address of unused variables unchanged.','line_number':209,'multiline':False]['text':' Implementations for LocalVariableTypeInfoVisitor.','line_number':220,'multiline':False]['text':' Trim the local variable type to the instructions at which it is alive.','line_number':224,'multiline':False]['text':' Leave the start address of unused variables unchanged.','line_number':232,'multiline':False]['text':' Small utility methods.','line_number':243,'multiline':False]['text':'*
     * Initializes the global arrays.
     ','line_number':245,'multiline':True]['text':' Create new arrays for storing information at each instruction offset.','line_number':252,'multiline':False]['text':'*
     * Returns whether the given variables are never alive at the same time.
     ','line_number':260,'multiline':True]['text':' Loop over all instructions.','line_number':267,'multiline':False]['text':' For now, exclude Category 2 variables.','line_number':276,'multiline':False]['text':'*
     * Updates the liveness resulting from mapping the given old variable on
     * the given new variable.
     ','line_number':287,'multiline':True]['text':' Loop over all instructions.','line_number':295,'multiline':False]['text':' Update the liveness before the instruction.','line_number':298,'multiline':False]['text':' Update the liveness after the instruction.','line_number':305,'multiline':False]['text':'*
     * Returns the first instruction offset between the given offsets at which
     * the given variable goes alive.
     ','line_number':315,'multiline':True]['text':'*
     * Returns the last instruction offset between the given offsets before
     * which the given variable is still alive.
     ','line_number':334,'multiline':True]