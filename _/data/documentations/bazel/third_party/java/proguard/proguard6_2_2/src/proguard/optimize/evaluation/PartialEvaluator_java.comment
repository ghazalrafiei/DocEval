['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor performs partial evaluation on the code attributes
 * that it visits.
 *
 * @author Eric Lafortune
 ','line_number':36,'multiline':True]['text':'*','line_number':47,'multiline':False]['text':'/
    public static boolean DEBUG         = System.getProperty("pe") != null;
    public static boolean DEBUG_RESULTS = DEBUG;
    //','line_number':50,'multiline':True]['text':'*
     * Creates a simple PartialEvaluator.
     ','line_number':84,'multiline':True]['text':'*
     * Creates a new PartialEvaluator.
     * @param valueFactory    the value factory that will create all values
     *                        during evaluation.
     ','line_number':93,'multiline':True]['text':'*
     * Creates a new PartialEvaluator.
     * @param valueFactory    the value factory that will create all values
     *                        during the evaluation.
     * @param invocationUnit  the invocation unit that will handle all
     *                        communication with other fields and methods.
     * @param evaluateAllCode a flag that specifies whether all casts, branch
     *                        targets, and exception handlers should be
     *                        evaluated, even if they are unnecessary or
     *                        unreachable.
     ','line_number':106,'multiline':True]['text':'*
     * Creates a new PartialEvaluator.
     * @param valueFactory            the value factory that will create all
     *                                values during the evaluation.
     * @param invocationUnit          the invocation unit that will handle all
     *                                communication with other fields and
     *                                methods.
     * @param evaluateAllCode         a flag that specifies whether all branch
     *                                targets and exception handlers should be
     *                                evaluated, even if they are unreachable.
     * @param extraInstructionVisitor an optional extra visitor for all
     *                                instructions right before they are
     *                                executed.
     ','line_number':128,'multiline':True]['text':'*
     * Creates a new PartialEvaluator, based on an existing one.
     * @param partialEvaluator the subroutine calling partial evaluator.
     ','line_number':159,'multiline':True]['text':'*
     * Creates a new PartialEvaluator.
     * @param valueFactory                 the value factory that will create
     *                                     all values during evaluation.
     * @param invocationUnit               the invocation unit that will handle
     *                                     all communication with other fields
     *                                     and methods.
     * @param evaluateAllCode              a flag that specifies whether all
     *                                     casts, branch targets, and exception
     *                                     handlers should be evaluated, even
     *                                     if they are unnecessary or
     *                                     unreachable.
     * @param branchUnit                   the branch unit that will handle all
     *                                     branches.
     * @param branchTargetFinder           the utility class that will find all
     *                                     branches.
     * @param callingInstructionBlockStack the stack of instruction blocks to
     *                                     be evaluated
     ','line_number':175,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':214,'multiline':False]['text':'        DEBUG = DEBUG_RESULTS =','line_number':221,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':222,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':223,'multiline':False]['text':' TODO: Remove this when the partial evaluator has stabilized.','line_number':225,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':226,'multiline':False]['text':' Process the code.','line_number':229,'multiline':False]['text':'                        int initializationOffset = branchTargetFinder.initializationOffset(offset);','line_number':264,'multiline':False]['text':'                        if (initializationOffset != NONE)','line_number':265,'multiline':False]['text':'                        {','line_number':266,'multiline':False]['text':'                            System.out.println("     is to be initialized at ["+initializationOffset+"]");','line_number':267,'multiline':False]['text':'                        }','line_number':268,'multiline':False]['text':' Evaluate the instructions, starting at the entry point.','line_number':292,'multiline':False]['text':' Reuse the existing variables and stack objects, ensuring the right size.','line_number':301,'multiline':False]['text':' Initialize the reusable arrays and variables.','line_number':305,'multiline':False]['text':' Reset stacks.','line_number':309,'multiline':False]['text':' Find all instruction offsets,...','line_number':313,'multiline':False]['text':' Start executing the first instruction block.','line_number':316,'multiline':False]['text':'                    int initializationOffset = branchTargetFinder.initializationOffset(offset);','line_number':348,'multiline':False]['text':'                    if (initializationOffset != NONE)','line_number':349,'multiline':False]['text':'                    {','line_number':350,'multiline':False]['text':'                        System.out.println("     is to be initialized at ["+initializationOffset+"]");','line_number':351,'multiline':False]['text':'                    }','line_number':352,'multiline':False]['text':'*
     * Returns whether a block of instructions is ever used.
     ','line_number':371,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset has ever been
     * executed during the partial evaluation.
     ','line_number':388,'multiline':True]['text':'*
     * Returns whether there is an instruction at the given offset.
     ','line_number':398,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the target of
     * any kind.
     ','line_number':407,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the origin of a
     * branch instruction.
     ','line_number':417,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the target of a
     * branch instruction.
     ','line_number':427,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the target of a
     * branch instruction or an exception.
     ','line_number':437,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the start of
     * an exception handler.
     ','line_number':448,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the start of a
     * subroutine.
     ','line_number':458,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is a subroutine
     * invocation.
     ','line_number':468,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is part of a
     * subroutine.
     ','line_number':478,'multiline':True]['text':'*
     * Returns whether the subroutine at the given offset is ever returning
     * by means of a regular 'ret' instruction.
     ','line_number':488,'multiline':True]['text':'*
     * Returns the offset after the subroutine that starts at the given
     * offset.
     ','line_number':498,'multiline':True]['text':'    /**','line_number':508,'multiline':False]['text':'     * Returns the instruction offset at which the object instance that is','line_number':509,'multiline':False]['text':'     * created at the given 'new' instruction offset is initialized, or','line_number':510,'multiline':False]['text':'     * <code>NONE</code> if it is not being created.','line_number':511,'multiline':False]['text':'     */','line_number':512,'multiline':False]['text':'    public int initializationOffset(int instructionOffset)','line_number':513,'multiline':False]['text':'    {','line_number':514,'multiline':False]['text':'        return branchTargetFinder.initializationOffset(instructionOffset);','line_number':515,'multiline':False]['text':'    }','line_number':516,'multiline':False]['text':'    /**','line_number':519,'multiline':False]['text':'     * Returns whether the method is an instance initializer.','line_number':520,'multiline':False]['text':'     */','line_number':521,'multiline':False]['text':'    public boolean isInitializer()','line_number':522,'multiline':False]['text':'    {','line_number':523,'multiline':False]['text':'        return branchTargetFinder.isInitializer();','line_number':524,'multiline':False]['text':'    }','line_number':525,'multiline':False]['text':'    /**','line_number':528,'multiline':False]['text':'     * Returns the instruction offset at which this initializer is calling','line_number':529,'multiline':False]['text':'     * the "super" or "this" initializer method, or <code>NONE</code> if it is','line_number':530,'multiline':False]['text':'     * not an initializer.','line_number':531,'multiline':False]['text':'     */','line_number':532,'multiline':False]['text':'    public int superInitializationOffset()','line_number':533,'multiline':False]['text':'    {','line_number':534,'multiline':False]['text':'        return branchTargetFinder.superInitializationOffset();','line_number':535,'multiline':False]['text':'    }','line_number':536,'multiline':False]['text':'*
     * Returns whether the instruction at the given offset creates a new,
     * uninitialized instance.
     ','line_number':539,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the special
     * invocation of an instance initializer.
     ','line_number':549,'multiline':True]['text':'*
     * Returns the variables before execution of the instruction at the given
     * offset.
     ','line_number':559,'multiline':True]['text':'*
     * Returns the variables after execution of the instruction at the given
     * offset.
     ','line_number':569,'multiline':True]['text':'*
     * Returns the stack before execution of the instruction at the given
     * offset.
     ','line_number':579,'multiline':True]['text':'*
     * Returns the stack after execution of the instruction at the given
     * offset.
     ','line_number':589,'multiline':True]['text':'*
     * Returns the instruction offsets that branch to the given instruction
     * offset.
     ','line_number':599,'multiline':True]['text':'*
     * Returns the instruction offsets to which the given instruction offset
     * branches.
     ','line_number':609,'multiline':True]['text':'*
     * Returns a filtering version of the given instruction visitor that only
     * visits traced instructions.
     ','line_number':619,'multiline':True]['text':'*
     * Returns a filtering version of the given instruction visitor that only
     * visits traced or untraced instructions.
     ','line_number':629,'multiline':True]['text':' Utility methods to evaluate instruction blocks.','line_number':640,'multiline':False]['text':'*
     * Pushes block of instructions to be executed in the calling partial
     * evaluator.
     ','line_number':642,'multiline':True]['text':'*
     * Pushes block of instructions to be executed in this partial evaluator.
     ','line_number':656,'multiline':True]['text':'*
     * Evaluates the instruction block and the exception handlers covering the
     * given instruction range in the given code.
     ','line_number':669,'multiline':True]['text':'*
     * Evaluates a block of instructions, starting at the given offset and ending
     * at a branch instruction, a return instruction, or a throw instruction.
     ','line_number':696,'multiline':True]['text':' Execute the initial instruction block.','line_number':707,'multiline':False]['text':' Execute all resulting instruction blocks on the execution stack.','line_number':715,'multiline':False]['text':'*
     * Evaluates a block of instructions, starting at the given offset and ending
     * at a branch instruction, a return instruction, or a throw instruction.
     * Instruction blocks that are to be evaluated as a result are pushed on
     * the given stack.
     ','line_number':733,'multiline':True]['text':' Evaluate the subsequent instructions.','line_number':770,'multiline':False]['text':' Maintain a generalized local variable frame and stack at this','line_number':778,'multiline':False]['text':' instruction offset, before execution.','line_number':779,'multiline':False]['text':' First time we're passing by this instruction.','line_number':783,'multiline':False]['text':' There's not even a context at this index yet.','line_number':786,'multiline':False]['text':' Reuse the context objects at this index.','line_number':792,'multiline':False]['text':' We'll execute in the generalized context, because it is','line_number':797,'multiline':False]['text':' the same as the current context.','line_number':798,'multiline':False]['text':' Merge in the current context.','line_number':803,'multiline':False]['text':'System.out.println("GVars:  "+variablesBefore[instructionOffset]);','line_number':807,'multiline':False]['text':'System.out.println("GStack: "+stacksBefore[instructionOffset]);','line_number':808,'multiline':False]['text':' Bail out if the current context is the same as last time.','line_number':810,'multiline':False]['text':' See if this instruction has been evaluated an excessive number','line_number':820,'multiline':False]['text':' of times.','line_number':821,'multiline':False]['text':' Continue, but generalize the current context.','line_number':826,'multiline':False]['text':' Note that the most recent variable values have to remain','line_number':827,'multiline':False]['text':' last in the generalizations, for the sake of the ret','line_number':828,'multiline':False]['text':' instruction.','line_number':829,'multiline':False]['text':' We'll execute in the generalized context.','line_number':833,'multiline':False]['text':' We'll execute in the current context.','line_number':838,'multiline':False]['text':' We'll evaluate this instruction.','line_number':843,'multiline':False]['text':' Remember this instruction's offset with any stored value.','line_number':846,'multiline':False]['text':' Decode the instruction.','line_number':851,'multiline':False]['text':' Reset the branch unit.','line_number':854,'multiline':False]['text':' Visit the instruction with the optional visitor.','line_number':864,'multiline':False]['text':' Process the instruction. The processor may modify the','line_number':874,'multiline':False]['text':' variables and the stack, and it may call the branch unit','line_number':875,'multiline':False]['text':' and the invocation unit.','line_number':876,'multiline':False]['text':' Collect the branch targets from the branch unit.','line_number':894,'multiline':False]['text':' Maintain a generalized local variable frame and stack at this','line_number':913,'multiline':False]['text':' instruction offset, after execution.','line_number':914,'multiline':False]['text':' First time we're passing by this instruction.','line_number':917,'multiline':False]['text':' There's not even a context at this index yet.','line_number':920,'multiline':False]['text':' Reuse the context objects at this index.','line_number':926,'multiline':False]['text':' Merge in the current context.','line_number':933,'multiline':False]['text':' Did the branch unit get called?','line_number':938,'multiline':False]['text':' Accumulate the branch targets at this offset.','line_number':941,'multiline':False]['text':' Are there no branch targets at all?','line_number':946,'multiline':False]['text':' Exit from this code block.','line_number':949,'multiline':False]['text':' Accumulate the branch origins at the branch target offsets.','line_number':953,'multiline':False]['text':' Are there multiple branch targets?','line_number':963,'multiline':False]['text':' Push them on the execution stack and exit from this block.','line_number':966,'multiline':False]['text':' Continue at the definite branch target.','line_number':981,'multiline':False]['text':' Just continue with the next instruction.','line_number':986,'multiline':False]['text':' Is this a subroutine invocation?','line_number':990,'multiline':False]['text':' Evaluate the subroutine in another partial evaluator.','line_number':994,'multiline':False]['text':' Let the partial evaluator that has called the subroutine','line_number':1006,'multiline':False]['text':' handle the evaluation after the return.','line_number':1007,'multiline':False]['text':'*
     * Evaluates a subroutine and its exception handlers, starting at the given
     * offset and ending at a subroutine return instruction.
     ','line_number':1019,'multiline':True]['text':' Create a temporary partial evaluator, so there are no conflicts','line_number':1034,'multiline':False]['text':' with variables that are alive across subroutine invocations, between','line_number':1035,'multiline':False]['text':' different invocations.','line_number':1036,'multiline':False]['text':' Evaluate the subroutine.','line_number':1042,'multiline':False]['text':' Merge back the temporary partial evaluator. This way, we'll get','line_number':1051,'multiline':False]['text':' the lowest common denominator of stacks and variables.','line_number':1052,'multiline':False]['text':'*
     * Generalizes the results of this partial evaluator with those of another
     * given partial evaluator, over a given range of instructions.
     ','line_number':1059,'multiline':True]['text':'generalizedContexts[offset]','line_number':1102,'multiline':False]['text':'*
     * Evaluates the exception handlers covering and targeting the given
     * instruction range in the given code.
     ','line_number':1110,'multiline':True]['text':' Evaluate the exception catch blocks, until their entry variables','line_number':1127,'multiline':False]['text':' have stabilized.','line_number':1128,'multiline':False]['text':' Reset the flag to stop evaluating.','line_number':1131,'multiline':False]['text':' Evaluate all relevant exception catch blocks once.','line_number':1134,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':1145,'multiline':False]['text':' Do we have to evaluate this exception catch block?','line_number':1152,'multiline':False]['text':' Reuse the existing variables and stack objects, ensuring the','line_number':1160,'multiline':False]['text':' right size.','line_number':1161,'multiline':False]['text':' Initialize the trace values.','line_number':1165,'multiline':False]['text':' Initialize the variables by generalizing the variables of the','line_number':1170,'multiline':False]['text':' try block. Make sure to include the results of the last','line_number':1171,'multiline':False]['text':' instruction for preverification.','line_number':1172,'multiline':False]['text':' Initialize the stack.','line_number':1178,'multiline':False]['text':' Evaluate the instructions, starting at the entry point.','line_number':1188,'multiline':False]['text':' Remember to evaluate all exception handlers once more.','line_number':1196,'multiline':False]['text':'        else if (evaluateAllCode)','line_number':1202,'multiline':False]['text':'        {','line_number':1203,'multiline':False]['text':'            if (DEBUG) System.out.println("No information for partial evaluation of exception ["+startPC +" -> "+endPC +": "+exceptionInfo.u2handlerPC+"] yet");','line_number':1204,'multiline':False]['text':'','line_number':1205,'multiline':False]['text':'            // We don't have any information on the try block yet, but we do','line_number':1206,'multiline':False]['text':'            // have to evaluate the exception handler.','line_number':1207,'multiline':False]['text':'            // Remember to evaluate all exception handlers once more.','line_number':1208,'multiline':False]['text':'            evaluateExceptions = true;','line_number':1209,'multiline':False]['text':'        }','line_number':1210,'multiline':False]['text':' Small utility methods.','line_number':1218,'multiline':False]['text':'*
     * Initializes the data structures for the variables, stack, etc.
     ','line_number':1220,'multiline':True]['text':' Create new arrays for storing information at each instruction offset.','line_number':1227,'multiline':False]['text':' Create new arrays.','line_number':1230,'multiline':False]['text':' Reset the old arrays.','line_number':1242,'multiline':False]['text':'*
     * Initializes the data structures for the variables, stack, etc.
     ','line_number':1299,'multiline':True]['text':'        // Create the method parameters.','line_number':1307,'multiline':False]['text':'        TracedVariables parameters = new TracedVariables(codeAttribute.u2maxLocals);','line_number':1308,'multiline':False]['text':'','line_number':1309,'multiline':False]['text':'        // Remember this instruction's offset with any stored value.','line_number':1310,'multiline':False]['text':'        Value storeValue = new InstructionOffsetValue(AT_METHOD_ENTRY);','line_number':1311,'multiline':False]['text':'        parameters.setProducerValue(storeValue);','line_number':1312,'multiline':False]['text':' Create the method parameters.','line_number':1314,'multiline':False]['text':' Initialize the method parameters.','line_number':1317,'multiline':False]['text':' Initialize the variables with the parameters.','line_number':1325,'multiline':False]['text':' Set the store value of each parameter variable. We store the','line_number':1328,'multiline':False]['text':' variable indices of the parameters. These parameter offsets take','line_number':1329,'multiline':False]['text':' into account Category 2 types.','line_number':1330,'multiline':False]['text':'*
     * Returns whether a block of instructions may ever throw an exception.
     ','line_number':1341,'multiline':True]['text':'*
     * Generalize the local variable frames of a block of instructions.
     ','line_number':1364,'multiline':True]['text':' Generalize the variables before each of the instructions in the block.','line_number':1375,'multiline':False]['text':' Initialize the variables with the first traced local','line_number':1384,'multiline':False]['text':' variable frame.','line_number':1385,'multiline':False]['text':' Generalize the variables with the traced local variable','line_number':1392,'multiline':False]['text':' frame. We can't use the return value, because local','line_number':1393,'multiline':False]['text':' generalization can be different a couple of times,','line_number':1394,'multiline':False]['text':' with the global generalization being the same.','line_number':1395,'multiline':False]['text':' Generalize the variables after the last instruction in the block,','line_number':1403,'multiline':False]['text':' if required.','line_number':1404,'multiline':False]['text':' Initialize the variables with the local variable frame.','line_number':1412,'multiline':False]['text':' Generalize the variables with the local variable frame.','line_number':1417,'multiline':False]['text':' Just clear the variables if there aren't any traced instructions','line_number':1422,'multiline':False]['text':' in the block.','line_number':1423,'multiline':False]['text':'*
     * This class represents an instruction block that has to be executed,
     * starting with a given state at a given instruction offset.
     ','line_number':1431,'multiline':True]['text':'*
     * This InstructionVisitor delegates its visits to a given
     * InstructionVisitor, but only if the instruction has been traced (or not).
     ','line_number':1453,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':1471,'multiline':False]