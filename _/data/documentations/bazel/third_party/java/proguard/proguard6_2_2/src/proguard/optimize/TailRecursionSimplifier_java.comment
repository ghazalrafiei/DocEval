['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This MemberVisitor simplifies tail recursion calls in  all methods that it
 * visits.
 *
 * @author Eric Lafortune
 ','line_number':33,'multiline':True]['text':'*','line_number':46,'multiline':False]['text':'/
    private static       boolean DEBUG = true;
    //','line_number':48,'multiline':True]['text':'*
     * Creates a new TailRecursionSimplifier.
     ','line_number':65,'multiline':True]['text':'*
     * Creates a new TailRecursionSimplifier with an extra visitor.
     * @param extraTailRecursionVisitor an optional extra visitor for all
     *                                  simplified tail recursions.
     ','line_number':74,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':85,'multiline':False]['text':' Only check the method if it is private, static, or final.','line_number':94,'multiline':False]['text':' Only check the method if it is not synchronized, etc.','line_number':99,'multiline':False]['text':'            codeAttributeComposer.DEBUG = DEBUG =','line_number':104,'multiline':False]['text':'                clazz.getName().equals("abc/Def") &&','line_number':105,'multiline':False]['text':'                method.getName(clazz).equals("abc");','line_number':106,'multiline':False]['text':' The code may expand, due to expanding constant and variable','line_number':112,'multiline':False]['text':' instructions.','line_number':113,'multiline':False]['text':' Copy the instructions.','line_number':116,'multiline':False]['text':' Update the code attribute if any code has been inlined.','line_number':119,'multiline':False]['text':' Append a label just after the code.','line_number':122,'multiline':False]['text':' Copy the exceptions.','line_number':125,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':136,'multiline':False]['text':' Copy the instruction.','line_number':140,'multiline':False]['text':' Is it a method invocation?','line_number':147,'multiline':False]['text':' Is it a recursive call?','line_number':154,'multiline':False]['text':' Is the next instruction a return?','line_number':159,'multiline':False]['text':' Isn't the recursive call inside a try/catch block?','line_number':175,'multiline':False]['text':' Is the stack empty after the return?','line_number':180,'multiline':False]['text':' Append a label.','line_number':190,'multiline':False]['text':' Branch back to the start of the method.','line_number':195,'multiline':False]['text':' The original return instruction will be','line_number':200,'multiline':False]['text':' removed elsewhere, if possible.','line_number':201,'multiline':False]['text':' Remember that the code has changed.','line_number':203,'multiline':False]['text':' The invocation itself is no longer necessary.','line_number':211,'multiline':False]['text':' Copy the instruction.','line_number':223,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':228,'multiline':False]['text':'*
     * This ConstantVisitor and ExceptionInfoVisitor returns whether a method
     * invocation can be treated as tail-recursive.
     ','line_number':239,'multiline':True]['text':'*
         * Returns whether the method invocation can be treated as
         * tail-recursive.
         ','line_number':251,'multiline':True]['text':' Implementations for ConstantVisitor.','line_number':260,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':268,'multiline':False]['text':' Small utility methods.','line_number':277,'multiline':False]['text':'*
     * Appends instructions to pop the parameters for the given method, storing
     * them in new local variables.
     ','line_number':279,'multiline':True]['text':' Count the number of parameters, taking into account their categories.','line_number':290,'multiline':False]['text':' Store the parameter types.','line_number':294,'multiline':False]['text':' Go over the parameter types backward, storing the stack entries','line_number':312,'multiline':False]['text':' in their corresponding variables.','line_number':313,'multiline':False]['text':' Put the 'this' reference in variable 0.','line_number':352,'multiline':False]