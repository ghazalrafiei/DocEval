['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor inlines short methods or methods that are only invoked
 * once, in the code attributes that it visits.
 *
 * @see SuperInvocationMarker
 * @see BackwardBranchMarker
 * @see AccessMethodMarker
 * @see SideEffectClassMarker
 * @author Eric Lafortune
 ','line_number':38,'multiline':True]['text':'*','line_number':65,'multiline':False]['text':'/
    public  static       boolean DEBUG         = System.getProperty("mi")  != null;
    public  static       boolean DEBUG_DETAILS = System.getProperty("mid") != null;
    //','line_number':68,'multiline':True]['text':'*
     * Creates a new MethodInliner.
     * @param microEdition            indicates whether the resulting code is
     *                                targeted at Java Micro Edition.
     * @param android                 indicates whether the resulting code is
     *                                targeted at the Dalvik VM.
     * @param allowAccessModification indicates whether the access modifiers of
     *                                classes and class members can be changed
     *                                in order to inline methods.
     * @param inlineSingleInvocations indicates whether the single invocations
     *                                should be inlined, or, alternatively,
     *                                short methods.
     ','line_number':111,'multiline':True]['text':'*
     * Creates a new MethodInliner.
     * @param microEdition            indicates whether the resulting code is
     *                                targeted at Java Micro Edition.
     * @param android                 indicates whether the resulting code is
     *                                targeted at the androidVM.
     * @param allowAccessModification indicates whether the access modifiers of
     *                                classes and class members can be changed
     *                                in order to inline methods.
     * @param inlineSingleInvocations indicates whether the single invocations
     *                                should be inlined, or, alternatively,
     *                                short methods.
     * @param extraInlinedInvocationVisitor an optional extra visitor for all
     *                                      inlined invocation instructions.
     ','line_number':137,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':166,'multiline':False]['text':' TODO: Remove this when the method inliner has stabilized.','line_number':173,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':174,'multiline':False]['text':' Process the code.','line_number':177,'multiline':False]['text':'            codeAttributeComposer.DEBUG = DEBUG =','line_number':213,'multiline':False]['text':'                clazz.getName().equals("abc/Def") &&','line_number':214,'multiline':False]['text':'                method.getName(clazz).equals("abc");','line_number':215,'multiline':False]['text':' Append the body of the code.','line_number':228,'multiline':False]['text':' Update the code attribute if any code has been inlined.','line_number':231,'multiline':False]['text':' Update the super/private/package/protected accessing flags.','line_number':236,'multiline':False]['text':' Only inline the method if it is invoked once or if it is short.','line_number':245,'multiline':False]['text':' Ignore the removal of the original method invocation,','line_number':264,'multiline':False]['text':' the addition of the parameter setup, and','line_number':265,'multiline':False]['text':' the modification of a few inlined instructions.','line_number':266,'multiline':False]['text':' Append instructions to store the parameters.','line_number':269,'multiline':False]['text':' Inline the body of the code.','line_number':272,'multiline':False]['text':' Remember the source if we're inlining a method.','line_number':283,'multiline':False]['text':' Insert all line numbers, possibly partly before previously inserted','line_number':292,'multiline':False]['text':' line numbers.','line_number':293,'multiline':False]['text':'*
     * Appends instructions to pop the parameters for the given method, storing
     * them in new local variables.
     ','line_number':300,'multiline':True]['text':' Count the number of parameters, taking into account their categories.','line_number':311,'multiline':False]['text':' Store the parameter types.','line_number':315,'multiline':False]['text':' Go over the parameter types backward, storing the stack entries','line_number':333,'multiline':False]['text':' in their corresponding variables.','line_number':334,'multiline':False]['text':' Put the 'this' reference in variable 0 (plus offset).','line_number':373,'multiline':False]['text':'*
     * Appends the code of the given code attribute.
     ','line_number':384,'multiline':True]['text':' The code may expand, due to expanding constant and variable','line_number':389,'multiline':False]['text':' instructions.','line_number':390,'multiline':False]['text':' Copy the instructions.','line_number':393,'multiline':False]['text':' Append a label just after the code.','line_number':396,'multiline':False]['text':' Copy the exceptions.','line_number':399,'multiline':False]['text':' Copy the line numbers.','line_number':402,'multiline':False]['text':' The line numbers need to be inserted sequentially.','line_number':405,'multiline':False]['text':' Make sure we at least have some entry at the start of the method.','line_number':410,'multiline':False]['text':' Add a marker at the end of an inlined method.','line_number':427,'multiline':False]['text':' The marker will be corrected in LineNumberLinearizer,','line_number':428,'multiline':False]['text':' so it points to the line of the enclosing method.','line_number':429,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':449,'multiline':False]['text':' Are we inlining this instruction?','line_number':459,'multiline':False]['text':' Replace any return instructions by branches to the end of the code.','line_number':462,'multiline':False]['text':' Are we not at the last instruction?','line_number':471,'multiline':False]['text':' Replace the return instruction by a branch instruction.','line_number':474,'multiline':False]['text':' Just leave out the instruction, but put in a label,','line_number':484,'multiline':False]['text':' for the sake of any other branch instructions.','line_number':485,'multiline':False]['text':' Are we inlining this instruction?','line_number':499,'multiline':False]['text':' Update the variable index.','line_number':502,'multiline':False]['text':' Is it a method invocation?','line_number':512,'multiline':False]['text':' See if we can inline it.','line_number':523,'multiline':False]['text':' Append a label, in case the invocation will be inlined.','line_number':526,'multiline':False]['text':' Check if the method invocation is covered by a catch-all','line_number':536,'multiline':False]['text':' exception handler.','line_number':537,'multiline':False]['text':' Was the method inlined?','line_number':547,'multiline':False]['text':' The invocation itself is no longer necessary.','line_number':555,'multiline':False]['text':' Are we inlining this instruction?','line_number':562,'multiline':False]['text':' Make sure the constant is present in the constant pool of the','line_number':565,'multiline':False]['text':' target class.','line_number':566,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':575,'multiline':False]['text':' Implementations for MemberVisitor.','line_number':583,'multiline':False]['text':' Don't inline methods that must be preserved.','line_number':599,'multiline':False]['text':' Only inline the method if it is private, static, or final.','line_number':604,'multiline':False]['text':' This currently precludes default interface methods, because','line_number':605,'multiline':False]['text':' they can't be final.','line_number':606,'multiline':False]['text':' Only inline the method if it is not synchronized, etc.','line_number':613,'multiline':False]['text':' Don't inline an <init> method, except in an <init> method in the','line_number':620,'multiline':False]['text':' same class.','line_number':621,'multiline':False]['text':'            (!programMethod.getName(programClass).equals(ClassConstants.METHOD_NAME_INIT) ||','line_number':622,'multiline':False]['text':'             (programClass.equals(targetClass) &&','line_number':623,'multiline':False]['text':'              targetMethod.getName(targetClass).equals(ClassConstants.METHOD_NAME_INIT))) &&','line_number':624,'multiline':False]['text':' Don't inline a method into itself.','line_number':629,'multiline':False]['text':' Only inline the method if it isn't recursing.','line_number':635,'multiline':False]['text':' Only inline the method if its target class has at least the','line_number':640,'multiline':False]['text':' same version number as the source class, in order to avoid','line_number':641,'multiline':False]['text':' introducing incompatible constructs.','line_number':642,'multiline':False]['text':' Only inline the method if it doesn't invoke a super method or a','line_number':647,'multiline':False]['text':' dynamic method, or if it is in the same class.','line_number':648,'multiline':False]['text':' Only inline the method if it doesn't branch backward while there','line_number':655,'multiline':False]['text':' are uninitialized objects.','line_number':656,'multiline':False]['text':' Only inline if the code access of the inlined method allows it.','line_number':662,'multiline':False]['text':' Only inline a method from a superclass if it doesn't access','line_number':673,'multiline':False]['text':' private code (with invokespecial), because we can't fix the','line_number':674,'multiline':False]['text':' invocation. (test2172) [DGD-1258]','line_number':675,'multiline':False]['text':' Only inline code that accesses protected code into the same','line_number':682,'multiline':False]['text':' class.','line_number':683,'multiline':False]['text':' if the method to be inlined has a synchronized block only inline it into','line_number':689,'multiline':False]['text':' the target method if its invocation is covered by a catchall handler or','line_number':690,'multiline':False]['text':' none at all. This might happen if the target method has been obfuscated','line_number':691,'multiline':False]['text':' with fake exception handlers.','line_number':692,'multiline':False]['text':' Methods assigning final fields cannot be inlined, at least on Android','line_number':698,'multiline':False]['text':' this leads to VerifyErrors at runtime.','line_number':699,'multiline':False]['text':' This should normally not happen anyways, but some tools modify/generate','line_number':700,'multiline':False]['text':' bytecode that would lead to such situations, e.g. jacoco, see DGD-561.','line_number':701,'multiline':False]['text':' Only inline the method if it doesn't catch exceptions, or if it','line_number':706,'multiline':False]['text':' is invoked with an empty stack.','line_number':707,'multiline':False]['text':' Only inline the method if it always returns with an empty','line_number':713,'multiline':False]['text':' stack.','line_number':714,'multiline':False]['text':' Only inline the method if its related static initializers don't','line_number':719,'multiline':False]['text':' have any side effects.','line_number':720,'multiline':False]['text':' Inline the method body.','line_number':730,'multiline':False]['text':' Update the optimization information of the target method.','line_number':733,'multiline':False]['text':' Increment the invocation count of referenced methods again,','line_number':740,'multiline':False]['text':' since they are now invoked from the inlined code too.','line_number':741,'multiline':False]['text':' Implementations for LineNumberInfoVisitor.','line_number':754,'multiline':False]['text':'*
     * Returns true, while printing out the given debug message.
     ','line_number':791,'multiline':True]['text':' Implementations for ExceptionInfoVisitor.','line_number':805,'multiline':False]