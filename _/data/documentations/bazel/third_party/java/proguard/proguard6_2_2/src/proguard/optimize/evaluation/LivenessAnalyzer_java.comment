['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor analyzes the liveness of the variables in the code
 * attributes that it visits, based on partial evaluation.
 *
 * @author Eric Lafortune
 ','line_number':33,'multiline':True]['text':'*','line_number':45,'multiline':False]['text':'/
    private static       boolean DEBUG = System.getProperty("la") != null;
    //','line_number':47,'multiline':True]['text':' Fields acting as global temporary variables.','line_number':62,'multiline':False]['text':'*
     * Creates a new LivenessAnalyzer.
     ','line_number':67,'multiline':True]['text':'*
     * Creates a new LivenessAnalyzer. This private constructor gets around
     * the constraint that it's not allowed to add statements before calling
     * 'this'.
     ','line_number':76,'multiline':True]['text':'*
     * Creates a new LivenessAnalyzer. This private constructor gets around
     * the constraint that it's not allowed to add statements before calling
     * 'this'.
     ','line_number':91,'multiline':True]['text':'*
     * Creates a new LivenessAnalyzer that will use the given partial evaluator
     * and initialization finder.
     * @param partialEvaluator        the evaluator to be used for the analysis.
     * @param runPartialEvaluator     specifies whether to run this evaluator on
     *                                every code attribute that is visited.
     * @param initializationFinder    the initialization finder to be used for
     *                                the analysis.
     * @param runInitializationFinder specifies whether to run this
     *                                initialization finder on every code
     *                                attribute that is visited.
     ','line_number':106,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset has ever been
     * executed during the partial evaluation.
     ','line_number':130,'multiline':True]['text':'*
     * Returns whether the specified variable is alive before the instruction
     * at the given offset.
     ','line_number':140,'multiline':True]['text':'*
     * Sets whether the specified variable is alive before the instruction
     * at the given offset.
     ','line_number':152,'multiline':True]['text':'*
     * Returns whether the specified variable is alive after the instruction
     * at the given offset.
     ','line_number':172,'multiline':True]['text':'*
     * Sets whether the specified variable is alive after the instruction
     * at the given offset.
     ','line_number':184,'multiline':True]['text':'*
     * Returns whether the specified variable takes up two entries after the
     * instruction at the given offset.
     ','line_number':204,'multiline':True]['text':'*
     * Sets whether the specified variable takes up two entries after the
     * instruction at the given offset.
     ','line_number':217,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':237,'multiline':False]['text':'        DEBUG =','line_number':244,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':245,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':246,'multiline':False]['text':' Initialize the global arrays.','line_number':257,'multiline':False]['text':' Evaluate the method.','line_number':262,'multiline':False]['text':' We'll only really analyze the first 64 variables.','line_number':273,'multiline':False]['text':' Mark liveness blocks, as many times as necessary.','line_number':279,'multiline':False]['text':' Loop over all traced instructions, backward.','line_number':285,'multiline':False]['text':' Update the liveness based on the branch targets.','line_number':290,'multiline':False]['text':' Update the liveness right after the branch instruction.','line_number':294,'multiline':False]['text':' Merge the current liveness.','line_number':298,'multiline':False]['text':' Update the liveness after the instruction.','line_number':301,'multiline':False]['text':' Update the current liveness based on the instruction.','line_number':304,'multiline':False]['text':' Merge the current liveness.','line_number':307,'multiline':False]['text':' Update the liveness before the instruction.','line_number':310,'multiline':False]['text':' Do we have to check again after this loop?','line_number':315,'multiline':False]['text':' Account for the liveness at the start of the exception handlers.','line_number':326,'multiline':False]['text':' Loop over all instructions, to mark variables that take up two entries.','line_number':331,'multiline':False]['text':' Loop over all variables.','line_number':336,'multiline':False]['text':' Is the variable alive and a category 2 type?','line_number':339,'multiline':False]['text':' Mark it as such.','line_number':345,'multiline':False]['text':' Mark the next variable as well.','line_number':348,'multiline':False]['text':' Is the variable alive and a category 2 type?','line_number':354,'multiline':False]['text':' Mark it as such.','line_number':360,'multiline':False]['text':' Mark the next variable as well.','line_number':363,'multiline':False]['text':' Loop over all instructions.','line_number':374,'multiline':False]['text':' Print out the liveness of all variables before the instruction.','line_number':383,'multiline':False]['text':' Print out the instruction itself.','line_number':392,'multiline':False]['text':' Print out the liveness of all variables after the instruction.','line_number':395,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':411,'multiline':False]['text':' Is it a load instruction or a store instruction?','line_number':423,'multiline':False]['text':' Start marking the variable before the load instruction.','line_number':426,'multiline':False]['text':' Stop marking the variable before the store instruction.','line_number':431,'multiline':False]['text':' But do mark the variable right after the store instruction.','line_number':434,'multiline':False]['text':' Special case: variable 0 ('this') in an initializer has to be alive','line_number':443,'multiline':False]['text':' as long as it hasn't been initialized.','line_number':444,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':452,'multiline':False]['text':' Are any variables alive at the start of the handler?','line_number':456,'multiline':False]['text':' Set the same liveness flags for the entire try block.','line_number':460,'multiline':False]['text':' Check again after having marked this try block.','line_number':473,'multiline':False]['text':' Small utility methods.','line_number':482,'multiline':False]['text':'*
     * Returns the combined liveness mask of the variables right before the
     * specified instruction offsets.
     ','line_number':484,'multiline':True]