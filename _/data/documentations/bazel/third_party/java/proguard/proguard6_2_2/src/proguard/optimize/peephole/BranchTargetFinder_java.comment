['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor finds all instruction offsets, branch targets, and
 * exception targets in the CodeAttribute objects that it visits.
 *
 * @see InitializationFinder
 * @author Eric Lafortune
 ','line_number':35,'multiline':True]['text':'*','line_number':49,'multiline':False]['text':'/
    private static       boolean DEBUG = System.getProperty("btf") != null;
    //','line_number':51,'multiline':True]['text':' We'll explicitly mark instructions that are not part of a subroutine,','line_number':55,'multiline':False]['text':' with NO_SUBROUTINE. Subroutines may just branch back into normal code','line_number':56,'multiline':False]['text':' (e.g. due to a break instruction in Java code), and we want to avoid','line_number':57,'multiline':False]['text':' marking such normal code as subroutine. The first mark wins, so we're','line_number':58,'multiline':False]['text':' assuming that such code is marked as normal code before it is marked','line_number':59,'multiline':False]['text':' as subroutine.','line_number':60,'multiline':False]['text':'*
     * Returns whether there is an instruction at the given offset in the
     * CodeAttribute that was visited most recently.
     ','line_number':87,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset creates a new,
     * uninitialized object instance, in the CodeAttribute that was visited
     * most recently.
     ','line_number':97,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the special
     * invocation of an instance initializer, in the CodeAttribute that was
     * visited most recently.
     ','line_number':108,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the target of
     * any kind in the CodeAttribute that was visited most recently.
     ','line_number':119,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the origin of a
     * branch instruction in the CodeAttribute that was visited most recently.
     ','line_number':133,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the target of a
     * branch instruction in the CodeAttribute that was visited most recently.
     ','line_number':143,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset comes right after a
     * definite branch instruction in the CodeAttribute that was visited most
     * recently.
     ','line_number':153,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the start of an
     * exception try block in the CodeAttribute that was visited most recently.
     ','line_number':164,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the end of an
     * exception try block in the CodeAttribute that was visited most recently.
     ','line_number':174,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the start of an
     * exception handler in the CodeAttribute that was visited most recently.
     ','line_number':184,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is a subroutine
     * invocation in the CodeAttribute that was visited most recently.
     ','line_number':194,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is the start of a
     * subroutine in the CodeAttribute that was visited most recently.
     ','line_number':204,'multiline':True]['text':'*
     * Returns whether the instruction at the given offset is part of a
     * subroutine in the CodeAttribute that was visited most recently.
     ','line_number':214,'multiline':True]['text':'*
     * Returns whether the subroutine at the given offset is ever returning
     * by means of a regular 'ret' instruction.
     ','line_number':224,'multiline':True]['text':'*
     * Returns the start offset of the subroutine at the given offset, in the
     * CodeAttribute that was visited most recently.
     ','line_number':234,'multiline':True]['text':'*
     * Returns the offset after the subroutine at the given offset, in the
     * CodeAttribute that was visited most recently.
     ','line_number':244,'multiline':True]['text':'    /**','line_number':254,'multiline':False]['text':'     * Returns the instruction offset at which the object instance that is','line_number':255,'multiline':False]['text':'     * created at the given 'new' instruction offset is initialized, or','line_number':256,'multiline':False]['text':'     * <code>NONE</code> if it is not being created.','line_number':257,'multiline':False]['text':'     */','line_number':258,'multiline':False]['text':'    public int initializationOffset(int offset)','line_number':259,'multiline':False]['text':'    {','line_number':260,'multiline':False]['text':'        return initializationOffsets[offset];','line_number':261,'multiline':False]['text':'    }','line_number':262,'multiline':False]['text':'    /**','line_number':265,'multiline':False]['text':'     * Returns whether the method is an instance initializer, in the','line_number':266,'multiline':False]['text':'     * CodeAttribute that was visited most recently.','line_number':267,'multiline':False]['text':'     */','line_number':268,'multiline':False]['text':'    public boolean isInitializer()','line_number':269,'multiline':False]['text':'    {','line_number':270,'multiline':False]['text':'        return superInitializationOffset != NONE;','line_number':271,'multiline':False]['text':'    }','line_number':272,'multiline':False]['text':'    /**','line_number':275,'multiline':False]['text':'     * Returns the instruction offset at which this initializer is calling','line_number':276,'multiline':False]['text':'     * the "super" or "this" initializer method, or <code>NONE</code> if it is','line_number':277,'multiline':False]['text':'     * not an initializer.','line_number':278,'multiline':False]['text':'     */','line_number':279,'multiline':False]['text':'    public int superInitializationOffset()','line_number':280,'multiline':False]['text':'    {','line_number':281,'multiline':False]['text':'        return superInitializationOffset;','line_number':282,'multiline':False]['text':'    }','line_number':283,'multiline':False]['text':'*
     * Returns whether the method contains subroutines, in the CodeAttribute
     * that was visited most recently.
     ','line_number':286,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':296,'multiline':False]['text':'        DEBUG =','line_number':303,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':304,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':305,'multiline':False]['text':' Make sure there are sufficiently large arrays.','line_number':307,'multiline':False]['text':' Create new arrays.','line_number':311,'multiline':False]['text':'            initializationOffsets = new int[codeLength];','line_number':315,'multiline':False]['text':' Reset the arrays.','line_number':317,'multiline':False]['text':'            Arrays.fill(initializationOffsets, 0, codeLength, NONE);','line_number':320,'multiline':False]['text':' Reset the arrays.','line_number':324,'multiline':False]['text':'            Arrays.fill(initializationOffsets, 0, codeLength, NONE);','line_number':328,'multiline':False]['text':'        superInitializationOffset = NONE;','line_number':333,'multiline':False]['text':' Iterate until all subroutines have been fully marked.','line_number':336,'multiline':False]['text':' Mark branch targets by going over all instructions.','line_number':342,'multiline':False]['text':' Mark branch targets in the exception table.','line_number':345,'multiline':False]['text':' The end of the code is a branch target sentinel.','line_number':350,'multiline':False]['text':' Set the subroutine returning flag and the subroutine end at each','line_number':355,'multiline':False]['text':' subroutine start.','line_number':356,'multiline':False]['text':' Set the subroutine returning flag and the subroutine end at each','line_number':386,'multiline':False]['text':' subroutine instruction, based on the marks at the subroutine','line_number':387,'multiline':False]['text':' start.','line_number':388,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':433,'multiline':False]['text':' Mark the instruction.','line_number':437,'multiline':False]['text':' Check if this is an instruction of a subroutine.','line_number':440,'multiline':False]['text':' Mark the branch origin.','line_number':452,'multiline':False]['text':' Mark the next instruction.','line_number':455,'multiline':False]['text':' Mark the instruction.','line_number':463,'multiline':False]['text':' Check if this is an instruction of a subroutine.','line_number':466,'multiline':False]['text':' Mark the creation.','line_number':472,'multiline':False]['text':' Is it calling an instance initializer?','line_number':477,'multiline':False]['text':' Mark the initializer.','line_number':482,'multiline':False]['text':' Mark the instruction.','line_number':491,'multiline':False]['text':' Check if this is an instruction of a subroutine.','line_number':494,'multiline':False]['text':' Mark the method.','line_number':499,'multiline':False]['text':' Mark the branch origin.','line_number':502,'multiline':False]['text':' Mark the subroutine return at its return instruction.','line_number':505,'multiline':False]['text':' Mark the next instruction.','line_number':508,'multiline':False]['text':' Mark the branch origin.','line_number':519,'multiline':False]['text':' Check if this is an instruction of a subroutine.','line_number':522,'multiline':False]['text':' Mark the branch target.','line_number':525,'multiline':False]['text':' Mark the method.','line_number':532,'multiline':False]['text':' Mark the subroutine invocation.','line_number':535,'multiline':False]['text':' Mark the new subroutine start.','line_number':538,'multiline':False]['text':' Mark the continued subroutine start.','line_number':543,'multiline':False]['text':' Mark the next instruction.','line_number':550,'multiline':False]['text':' Mark the branch origin.','line_number':558,'multiline':False]['text':' Check if this is an instruction of a subroutine.','line_number':561,'multiline':False]['text':' Mark the branch targets of the default jump offset.','line_number':564,'multiline':False]['text':' Mark the branch targets of the jump offsets.','line_number':567,'multiline':False]['text':' Mark the next instruction.','line_number':570,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':575,'multiline':False]['text':' Remember whether the method is an initializer.','line_number':582,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':587,'multiline':False]['text':' Mark the exception offsets.','line_number':595,'multiline':False]['text':' Mark the handler as part of a subroutine if necessary.','line_number':600,'multiline':False]['text':' We'll have to go over all instructions again.','line_number':606,'multiline':False]['text':' Small utility methods.','line_number':612,'multiline':False]['text':'*
     * Marks the branch targets and their subroutine starts at the given
     * offsets.
     ','line_number':614,'multiline':True]['text':'*
     * Marks the branch target and its subroutine start at the given offset.
     ','line_number':627,'multiline':True]['text':'*
     * Marks the branch origin at the given offset.
     ','line_number':640,'multiline':True]['text':'*
     * Marks the branch target at the given offset.
     ','line_number':649,'multiline':True]['text':'*
     * Marks the subroutine start at the given offset, if applicable.
     ','line_number':660,'multiline':True]['text':' Are we marking a subroutine and branching to an offset that hasn't','line_number':669,'multiline':False]['text':' been marked yet?','line_number':670,'multiline':False]['text':' Is it a backward branch?','line_number':673,'multiline':False]['text':' Remember the smallest subroutine start.','line_number':676,'multiline':False]['text':' We'll have to go over all instructions again.','line_number':682,'multiline':False]['text':' Mark the subroutine start of the target.','line_number':686,'multiline':False]['text':'*
     * Marks the instruction at the given offset, after a branch.
     ','line_number':692,'multiline':True]['text':' Stop marking a subroutine.','line_number':699,'multiline':False]['text':'*
     * Checks if the specified instruction is inside a subroutine.
     ','line_number':704,'multiline':True]['text':' Are we inside a previously marked subroutine?','line_number':709,'multiline':False]['text':' Start marking a subroutine.','line_number':712,'multiline':False]['text':' Are we marking a subroutine?','line_number':716,'multiline':False]['text':' Mark the subroutine start.','line_number':719,'multiline':False]