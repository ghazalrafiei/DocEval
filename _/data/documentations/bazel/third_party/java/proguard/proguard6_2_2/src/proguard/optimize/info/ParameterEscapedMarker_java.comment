['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ClassPoolVisitor marks the reference parameters that have escaped or
 * that are escaping, outside or inside their methods.
 *
 * @see ReferenceEscapeChecker
 * @see ParameterEscapeMarker
 * @author Eric Lafortune
 ','line_number':36,'multiline':True]['text':'
    private static final boolean DEBUG = false;
    /','line_number':53,'multiline':True]['text':'*/','line_number':57,'multiline':False]['text':' Parameters and values for visitor methods.','line_number':72,'multiline':False]['text':'*
     * Creates a new ParameterModificationMarker.
     ','line_number':79,'multiline':True]['text':' Implementations for ClassPoolVisitor.','line_number':87,'multiline':False]['text':' Go over all classes and their methods, marking if parameters are','line_number':91,'multiline':False]['text':' modified, until no new cases can be found.','line_number':92,'multiline':False]['text':' Go over all classes and their methods once.','line_number':102,'multiline':False]['text':' Implementations for MemberVisitor.','line_number':114,'multiline':False]['text':' Implementations for AttributeVisitor.','line_number':136,'multiline':False]['text':' Evaluate the code.','line_number':143,'multiline':False]['text':' Mark the parameters that are modified from the code.','line_number':147,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':152,'multiline':False]['text':' Mark escaped reference parameters in the invoked method.','line_number':165,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':175,'multiline':False]['text':' Mark reference parameters that are passed to the method.','line_number':187,'multiline':False]['text':' Has the parameter escaped outside or inside the referencing','line_number':197,'multiline':False]['text':' method?','line_number':198,'multiline':False]['text':' Small utility methods.','line_number':209,'multiline':False]['text':'*
     * Returns whether any of the producing reference values of the specified
     * stack entry before the given instruction offset are escaping or have
     * escaped.
     ','line_number':211,'multiline':True]['text':' The null reference value may not have a trace value.','line_number':226,'multiline':False]['text':'*
     * Returns whether the producing reference value is escaping or has escaped.
     ','line_number':238,'multiline':True]['text':'*
     * Marks the given parameter as escaped from the given method.
     ','line_number':261,'multiline':True]['text':'*
     * Marks the given parameters as escaped from the given method.
     ','line_number':276,'multiline':True]['text':'*
     * Returns whether the given parameter is escaped from the given method.
     ','line_number':291,'multiline':True]['text':'*
     * Returns which parameters are escaped from the given method.
     ','line_number':300,'multiline':True]