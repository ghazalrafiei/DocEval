['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This InstructionVisitor converts all indy String Concatenations in the visited
 * classes to StringBuilder-append chains.
 *
 * @author Tim Van Den Broecke
 ','line_number':36,'multiline':True]['text':' Implementation interfaces.','line_number':46,'multiline':False]['text':' Constants as per specification','line_number':51,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':72,'multiline':False]['text':' Remember the referenced bootstrap method index and extract the recipe from it.','line_number':87,'multiline':False]['text':'if (isMakeConcatWithConstants(invokeDynamicConstant.getName(programClass)))','line_number':96,'multiline':False]['text':' Collect the argument types.','line_number':103,'multiline':False]['text':' Store the correct number of stack values in reverse','line_number':111,'multiline':False]['text':' order in local variables','line_number':112,'multiline':False]['text':' Loop over the recipe.','line_number':123,'multiline':False]['text':' Push the local variables one by one, insert','line_number':124,'multiline':False]['text':' constants where necessary and create and append','line_number':125,'multiline':False]['text':' instruction chain.','line_number':126,'multiline':False]['text':' Visit the constant to decide how it needs to be appended.','line_number':149,'multiline':False]['text':' Find where the String stops and append it','line_number':154,'multiline':False]['text':' Jump forward to the end of the String','line_number':162,'multiline':False]['text':' Create a StringBuilder with the estimated initial size','line_number':168,'multiline':False]['text':' Attach the 'append' instruction chain','line_number':176,'multiline':False]['text':' Finish with StringBuilder.toString()','line_number':179,'multiline':False]['text':' Commit the code changes','line_number':184,'multiline':False]['text':' Optionally let this instruction be visited some more','line_number':188,'multiline':False]['text':' Implementations for AttributeVisitor.','line_number':202,'multiline':False]['text':' Implementations for BootstrapMethodInfoVisitor.','line_number':215,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':237,'multiline':False]['text':' append as Object by default. Override below if necessary.','line_number':242,'multiline':False]['text':' Small utility methods.','line_number':261,'multiline':False]