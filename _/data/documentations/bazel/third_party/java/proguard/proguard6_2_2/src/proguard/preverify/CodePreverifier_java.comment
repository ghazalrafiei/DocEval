['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This class can preverify methods in program class pools, according to a given
 * specification.
 *
 * @author Eric Lafortune
 ','line_number':37,'multiline':True]['text':'*','line_number':47,'multiline':False]['text':'/
    private static       boolean DEBUG = System.getProperty("cp") != null;
    //','line_number':49,'multiline':True]['text':'*
     * Creates a new CodePreverifier.
     ','line_number':68,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':77,'multiline':False]['text':' TODO: Remove this when the preverifier has stabilized.','line_number':84,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':85,'multiline':False]['text':' Process the code.','line_number':88,'multiline':False]['text':'        DEBUG =','line_number':105,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':106,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':107,'multiline':False]['text':' Evaluate the method.','line_number':114,'multiline':False]['text':' We may have to remove unreachable code.','line_number':119,'multiline':False]['text':' Collect the stack map frames.','line_number':122,'multiline':False]['text':' Only store frames at the beginning of code blocks.','line_number':127,'multiline':False]['text':' Mark the unreachable instruction for deletion.','line_number':130,'multiline':False]['text':' Convert the variable values to types.','line_number':135,'multiline':False]['text':' Convert the stack values to types.','line_number':143,'multiline':False]['text':' Create and store a new frame.','line_number':150,'multiline':False]['text':' Compress the stack map frames if the target is not Java Micro Edition.','line_number':157,'multiline':False]['text':' Convert the initial variable values to types.','line_number':160,'multiline':False]['text':' Special case: the <init> method.','line_number':168,'multiline':False]['text':' Get the proper name for the attribute to be added/replaced/deleted.','line_number':178,'multiline':False]['text':' Remove any stack map (table) attribute from the code attribute.','line_number':215,'multiline':False]['text':' Create the appropriate attribute.','line_number':222,'multiline':False]['text':' Copy the frames into an array.','line_number':225,'multiline':False]['text':' Put the frames into a stack map attribute.','line_number':229,'multiline':False]['text':' Copy the frames into an array.','line_number':234,'multiline':False]['text':' Put the frames into a stack map table attribute.','line_number':238,'multiline':False]['text':' Fill out the name of the stack map attribute.','line_number':242,'multiline':False]['text':' Add the new stack map (table) attribute to the code attribute.','line_number':246,'multiline':False]['text':' Apply code modifications, deleting unreachable code.','line_number':256,'multiline':False]['text':' Small utility methods.','line_number':261,'multiline':False]['text':'*
     * Creates and returns the verification types corresponding to the given
     * variables. If necessary, class constants are added to the constant pool
     * of the given class.
     ','line_number':263,'multiline':True]['text':' Count the number of parameters, including any parameters','line_number':277,'multiline':False]['text':' that are unused and overwritten right away.','line_number':278,'multiline':False]['text':' Count the the number of verification types, ignoring any nulls','line_number':290,'multiline':False]['text':' at the end.','line_number':291,'multiline':False]['text':' Remember the maximum live type (or uninitialized "this"','line_number':298,'multiline':False]['text':' type) index. A dead uninitialized "this" is not possible in','line_number':299,'multiline':False]['text':' plain Java code, but it is possible in optimized code and','line_number':300,'multiline':False]['text':' in other languages like Kotlin (in exception handlers).','line_number':301,'multiline':False]['text':' It has to be marked too ("flagThisUninit" in the JVM specs).','line_number':302,'multiline':False]['text':' Category 2 types that are alive are stored as single','line_number':309,'multiline':False]['text':' entries.','line_number':310,'multiline':False]['text':' Create and fill out the verification types.','line_number':319,'multiline':False]['text':' Note the slightly different terminating condition, because the','line_number':324,'multiline':False]['text':' types may have been truncated.','line_number':325,'multiline':False]['text':' Fill out the type.','line_number':331,'multiline':False]['text':' Is the value not null and alive (or uninitialized "this")?','line_number':334,'multiline':False]['text':' Category 2 types that are alive are stored as single entries.','line_number':347,'multiline':False]['text':' A null value at method entry means that there was a branch to','line_number':355,'multiline':False]['text':' offset 0 that has cleared the value. Then pick a dummy value so','line_number':356,'multiline':False]['text':' it never matches the next frame at offset 0.','line_number':357,'multiline':False]['text':'*
     * Creates and returns the verification types corresponding to the given
     * stack. If necessary, class constants are added to the constant pool
     * of the given class.
     ','line_number':370,'multiline':True]['text':' Count the the number of verification types.','line_number':384,'multiline':False]['text':' We have to work down from the top of the stack.','line_number':387,'multiline':False]['text':' Category 2 types are stored as single entries.','line_number':392,'multiline':False]['text':' Create and fill out the verification types.','line_number':399,'multiline':False]['text':' We have to work down from the top of the stack.','line_number':406,'multiline':False]['text':' Fill out the type.','line_number':410,'multiline':False]['text':' Category 2 types are stored as single entries.','line_number':419,'multiline':False]['text':'*
     * Creates and returns the verification type corresponding to the given
     * value. If necessary, a class constant is added to the constant pool of
     * the given class.
     ','line_number':430,'multiline':True]['text':' Is it a Null type?','line_number':459,'multiline':False]['text':' Does the reference type have a single producer?','line_number':466,'multiline':False]['text':' Is it a method parameter?','line_number':477,'multiline':False]['text':' Is the parameter an uninitialized "this"?','line_number':480,'multiline':False]['text':' It's an UninitializedThis type.','line_number':484,'multiline':False]['text':' Is it a newly created instance?','line_number':488,'multiline':False]['text':' Is it still uninitialized?','line_number':493,'multiline':False]['text':' It's an Uninitialized type.','line_number':496,'multiline':False]['text':' It's an ordinary Object type.','line_number':503,'multiline':False]['text':'*
     * Finds or creates a class constant for the given reference value, and
     * returns its index in the constant pool.
     ','line_number':511,'multiline':True]['text':'*
     * Compresses the given list of full frames, for use in a stack map table.
     ','line_number':523,'multiline':True]['text':' Start computing the compressed frame.','line_number':543,'multiline':False]['text':' The default is the full frame.','line_number':544,'multiline':False]['text':' Are all variables equal?','line_number':547,'multiline':False]['text':' Are the stacks equal?','line_number':551,'multiline':False]['text':'if (stackCount == previousStackCount &&','line_number':552,'multiline':False]['text':'    equalVerificationTypes(stack, previousStack, stackCount))','line_number':553,'multiline':False]['text':'{','line_number':554,'multiline':False]['text':'    // Remove the identical frame.','line_number':555,'multiline':False]['text':'    stackMapFrameList.remove(index--);','line_number':556,'multiline':False]['text':'','line_number':557,'multiline':False]['text':'    // Move on to the next frame (at the same index).','line_number':558,'multiline':False]['text':'    continue;','line_number':559,'multiline':False]['text':'}','line_number':560,'multiline':False]['text':' Is the new stack empty?','line_number':561,'multiline':False]['text':'else','line_number':562,'multiline':False]['text':' Does the new stack contain a single element?','line_number':567,'multiline':False]['text':' Is the stack empty?','line_number':573,'multiline':False]['text':' Are the variables chopped?','line_number':578,'multiline':False]['text':' Are the variables extended?','line_number':585,'multiline':False]['text':'previousVariablesCount   > 0 &&','line_number':586,'multiline':False]['text':' Copy the additional variables into an array.','line_number':591,'multiline':False]['text':' Compress the instruction offset.','line_number':601,'multiline':False]['text':' Remember this frame.','line_number':606,'multiline':False]['text':' Replace the full frame.','line_number':610,'multiline':False]['text':'*
     * Returns whether the given arrays of verification types are equal, up to
     * the given length.
     ','line_number':616,'multiline':True]['text':'*
     * Returns wheter the specified variable is an uninitialized "this" at the
     * given instruction offset.
     ','line_number':643,'multiline':True]['text':'*
     * Returns whether the given instruction opcode represents a dup or swap
     * instruction (dup, dup_x1, dup_x2, dup2, dup2_x1, dup2_x2, swap).
     ','line_number':656,'multiline':True]