['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This MemberVisitor obfuscates all class members that it visits.
 * It uses names from the given name factory. At the same time, it avoids names
 * from the given descriptor map.
 * <p>
 * The class members must have been linked before applying this visitor.
 *
 * @see MethodLinker
 *
 * @author Eric Lafortune
 ','line_number':29,'multiline':True]['text':'*
     * Creates a new MemberObfuscator.
     * @param allowAggressiveOverloading a flag that specifies whether class
     *                                   members can be overloaded aggressively.
     * @param nameFactory                the factory that can produce
     *                                   obfuscated member names.
     * @param descriptorMap              the map of descriptors to
     *                                   [new name - old name] maps.
     ','line_number':49,'multiline':True]['text':' Implementations for MemberVisitor.','line_number':68,'multiline':False]['text':' Special cases: <clinit> and <init> are always kept unchanged.','line_number':72,'multiline':False]['text':' We can ignore them here.','line_number':73,'multiline':False]['text':' Get the member's descriptor.','line_number':80,'multiline':False]['text':' Check whether we're allowed to overload aggressively.','line_number':83,'multiline':False]['text':' Trim the return argument from the descriptor if not.','line_number':86,'multiline':False]['text':' Works for fields and methods alike.','line_number':87,'multiline':False]['text':' Get the name map, creating a new one if necessary.','line_number':91,'multiline':False]['text':' Get the member's new name.','line_number':94,'multiline':False]['text':' Assign a new one, if necessary.','line_number':97,'multiline':False]['text':' Find an acceptable new name.','line_number':100,'multiline':False]['text':' Remember not to use the new name again in this name space.','line_number':109,'multiline':False]['text':' Assign the new name.','line_number':112,'multiline':False]['text':' Small utility methods.','line_number':118,'multiline':False]['text':'*
     * Gets the name map, based on the given map and a given descriptor.
     * A new empty map is created if necessary.
     * @param descriptorMap the map of descriptors to [new name - old name] maps.
     * @param descriptor    the class member descriptor.
     * @return the corresponding name map.
     ','line_number':120,'multiline':True]['text':' See if we can find the nested map with this descriptor key.','line_number':129,'multiline':False]['text':' Create a new one if not.','line_number':132,'multiline':False]['text':'*
     * Assigns a fixed new name to the given class member.
     * @param member the class member.
     * @param name   the new name.
     ','line_number':143,'multiline':True]['text':'*
     * Assigns a new name to the given class member.
     * @param member the class member.
     * @param name   the new name.
     ','line_number':164,'multiline':True]['text':'*
     * Returns whether the new name of the given class member is fixed.
     * @param member the class member.
     * @return whether its new name is fixed.
     ','line_number':175,'multiline':True]['text':'*
     * Retrieves the new name of the given class member.
     * @param member the class member.
     * @return the class member's new name, or <code>null</code> if it doesn't
     *         have one yet.
     ','line_number':189,'multiline':True]['text':'*
     * This VisitorAccepter can be used to wrap a name string, to indicate that
     * the name is fixed.
     ','line_number':201,'multiline':True]['text':' Implementations for VisitorAccepter.','line_number':216,'multiline':False]