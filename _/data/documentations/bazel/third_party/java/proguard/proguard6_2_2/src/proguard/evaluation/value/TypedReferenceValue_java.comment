['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ReferenceValue represents a partially evaluated reference value.
 * It has a type and a flag that indicates whether the value could be
 * <code>null</code>. If the type is <code>null</code>, the value is
 * <code>null</code>.
 *
 * @author Eric Lafortune
 ','line_number':29,'multiline':True]['text':'*
     * Creates a new TypedReferenceValue.
     ','line_number':50,'multiline':True]['text':' Implementations for ReferenceValue.','line_number':65,'multiline':False]['text':' Implementations of unary methods of ReferenceValue.','line_number':79,'multiline':False]['text':' If this type is null, it is never an instance of any class.','line_number':98,'multiline':False]['text':' Start taking into account the type dimensions.','line_number':104,'multiline':False]['text':' Strip any common array prefixes.','line_number':109,'multiline':False]['text':' If either stripped type is a primitive type, we can tell right away.','line_number':113,'multiline':False]['text':' Strip the class type prefix and suffix of this type, if any.','line_number':123,'multiline':False]['text':' Strip the class type prefix and suffix of the other type, if any.','line_number':129,'multiline':False]['text':' If this type is an array type, and the other type is not','line_number':135,'multiline':False]['text':' java.lang.Object, java.lang.Cloneable, or java.io.Serializable,','line_number':136,'multiline':False]['text':' this type can never be an instance.','line_number':137,'multiline':False]['text':' If the other type is an array type, and this type is not','line_number':144,'multiline':False]['text':' java.lang.Object, java.lang.Cloneable, or java.io.Serializable,','line_number':145,'multiline':False]['text':' this type can never be an instance.','line_number':146,'multiline':False]['text':' If this type is equal to the other type, or if the other type is','line_number':153,'multiline':False]['text':' java.lang.Object, or if this type is an array type, then this type','line_number':154,'multiline':False]['text':' is always an instance (unless it may be null).','line_number':155,'multiline':False]['text':' If the other type is an array type, it might be ok.','line_number':164,'multiline':False]['text':' If the value extends the type, we're sure (unless it may be null).','line_number':170,'multiline':False]['text':' Otherwise, if the value type is final, it can never be an instance.','line_number':171,'multiline':False]['text':' Also, if the types are not interfaces and not in the same hierarchy,','line_number':172,'multiline':False]['text':' the value can never be an instance.','line_number':173,'multiline':False]['text':' Just return this value if it's the same type.','line_number':187,'multiline':False]['text':' Also return this value if it is null or more specific.','line_number':188,'multiline':False]['text':' Implementations of binary methods of ReferenceValue.','line_number':221,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':235,'multiline':False]['text':'    // UnknownReferenceValue arguments.','line_number':236,'multiline':False]['text':'','line_number':237,'multiline':False]['text':'    public ReferenceValue generalize(UnknownReferenceValue other)','line_number':238,'multiline':False]['text':'    {','line_number':239,'multiline':False]['text':'        return other;','line_number':240,'multiline':False]['text':'    }','line_number':241,'multiline':False]['text':'','line_number':242,'multiline':False]['text':'','line_number':243,'multiline':False]['text':'    public int equal(UnknownReferenceValue other)','line_number':244,'multiline':False]['text':'    {','line_number':245,'multiline':False]['text':'        return MAYBE;','line_number':246,'multiline':False]['text':'    }','line_number':247,'multiline':False]['text':' Implementations of binary ReferenceValue methods with TypedReferenceValue','line_number':250,'multiline':False]['text':' arguments.','line_number':251,'multiline':False]['text':' If both types are identical, the generalization is the same too.','line_number':255,'multiline':False]['text':' If both types are null, the generalization is null too.','line_number':264,'multiline':False]['text':' If this type is null, the generalization is the other type, maybe null.','line_number':270,'multiline':False]['text':' If the other type is null, the generalization is this type, maybe null.','line_number':276,'multiline':False]['text':' If the two types are equal, the generalization remains the same,','line_number':285,'multiline':False]['text':' maybe an extension, maybe null.','line_number':286,'multiline':False]['text':' Start taking into account the type dimensions.','line_number':292,'multiline':False]['text':' See if we can take into account the referenced classes.','line_number':299,'multiline':False]['text':' Is one class simply an extension of the other one?','line_number':306,'multiline':False]['text':' Do the classes have a non-trivial common superclass?','line_number':319,'multiline':False]['text':' Otherwise, do the classes have a common interface?','line_number':326,'multiline':False]['text':' The class hierarchy seems to be incomplete.','line_number':346,'multiline':False]['text':' We'll return an unknown reference value.','line_number':349,'multiline':False]['text':' See if the other type is an interface type of arrays.','line_number':359,'multiline':False]['text':' See if this type is an interface type of arrays.','line_number':367,'multiline':False]['text':' Reduce the common dimension count if either type is an array of','line_number':374,'multiline':False]['text':' primitives type of this dimension.','line_number':375,'multiline':False]['text':' Fall back on a basic Object or array of Objects type.','line_number':383,'multiline':False]['text':'*
     * Returns the most specific common superclass or interface of the given
     * classes.
     * @param class1     the first class.
     * @param class2     the second class.
     * @param interfaces specifies whether to look for a superclass or for an
     *                   interface.
     * @return the common class.
     ','line_number':396,'multiline':True]['text':' Collect the superclasses or the interfaces of this class.','line_number':409,'multiline':False]['text':' Collect the superclasses or the interfaces of the other class.','line_number':430,'multiline':False]['text':' Find the common superclasses.','line_number':458,'multiline':False]['text':' Find a class that is a subclass of all common superclasses,','line_number':471,'multiline':False]['text':' or that at least has the maximum number of common superclasses.','line_number':472,'multiline':False]['text':' Go over all common superclasses to find it. In case of','line_number':477,'multiline':False]['text':' multiple subclasses, keep the lowest one alphabetically,','line_number':478,'multiline':False]['text':' in order to ensure that the choice is deterministic.','line_number':479,'multiline':False]['text':' No common superclass could be found. This usually happens','line_number':498,'multiline':False]['text':' when classes are missing in the classpool due to incomplete','line_number':499,'multiline':False]['text':' configurations.','line_number':500,'multiline':False]['text':' In case one of the two classes is java/lang/Object itself,','line_number':502,'multiline':False]['text':' or is a final class that extends java/lang/Object, we can','line_number':503,'multiline':False]['text':' safely assume that java/lang/Object must be the common','line_number':504,'multiline':False]['text':' superclass of both.','line_number':505,'multiline':False]['text':'*
     * Returns the given reference value that may or may not be null, ensuring
     * that it is a TypedReferenceValue, not a subclass.
     ','line_number':539,'multiline':True]['text':'*
     * Returns if the number of superclasses of the given class in the given
     * set of classes.
     ','line_number':557,'multiline':True]['text':'    // Implementations of binary ReferenceValue methods with','line_number':597,'multiline':False]['text':'    // IdentifiedReferenceValue arguments.','line_number':598,'multiline':False]['text':'','line_number':599,'multiline':False]['text':'    public ReferenceValue generalize(IdentifiedReferenceValue other)','line_number':600,'multiline':False]['text':'    {','line_number':601,'multiline':False]['text':'        return generalize((TypedReferenceValue)other);','line_number':602,'multiline':False]['text':'    }','line_number':603,'multiline':False]['text':'','line_number':604,'multiline':False]['text':'','line_number':605,'multiline':False]['text':'    public int equal(IdentifiedReferenceValue other)','line_number':606,'multiline':False]['text':'    {','line_number':607,'multiline':False]['text':'        return equal((TypedReferenceValue)other);','line_number':608,'multiline':False]['text':'    }','line_number':609,'multiline':False]['text':'','line_number':610,'multiline':False]['text':'','line_number':611,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':612,'multiline':False]['text':'    // ArrayReferenceValue arguments.','line_number':613,'multiline':False]['text':'','line_number':614,'multiline':False]['text':'    public ReferenceValue generalize(ArrayReferenceValue other)','line_number':615,'multiline':False]['text':'    {','line_number':616,'multiline':False]['text':'        return generalize((TypedReferenceValue)other);','line_number':617,'multiline':False]['text':'    }','line_number':618,'multiline':False]['text':'','line_number':619,'multiline':False]['text':'','line_number':620,'multiline':False]['text':'    public int equal(ArrayReferenceValue other)','line_number':621,'multiline':False]['text':'    {','line_number':622,'multiline':False]['text':'        return equal((TypedReferenceValue)other);','line_number':623,'multiline':False]['text':'    }','line_number':624,'multiline':False]['text':'','line_number':625,'multiline':False]['text':'','line_number':626,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':627,'multiline':False]['text':'    // IdentifiedArrayReferenceValue arguments.','line_number':628,'multiline':False]['text':'','line_number':629,'multiline':False]['text':'    public ReferenceValue generalize(IdentifiedArrayReferenceValue other)','line_number':630,'multiline':False]['text':'    {','line_number':631,'multiline':False]['text':'        return generalize((ArrayReferenceValue)other);','line_number':632,'multiline':False]['text':'    }','line_number':633,'multiline':False]['text':'','line_number':634,'multiline':False]['text':'','line_number':635,'multiline':False]['text':'    public int equal(IdentifiedArrayReferenceValue other)','line_number':636,'multiline':False]['text':'    {','line_number':637,'multiline':False]['text':'        return equal((ArrayReferenceValue)other);','line_number':638,'multiline':False]['text':'    }','line_number':639,'multiline':False]['text':'','line_number':640,'multiline':False]['text':'','line_number':641,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':642,'multiline':False]['text':'    // DetailedArrayReferenceValue arguments.','line_number':643,'multiline':False]['text':'','line_number':644,'multiline':False]['text':'    public ReferenceValue generalize(DetailedArrayReferenceValue other)','line_number':645,'multiline':False]['text':'    {','line_number':646,'multiline':False]['text':'        return generalize((IdentifiedArrayReferenceValue)other);','line_number':647,'multiline':False]['text':'    }','line_number':648,'multiline':False]['text':'','line_number':649,'multiline':False]['text':'','line_number':650,'multiline':False]['text':'    public int equal(DetailedArrayReferenceValue other)','line_number':651,'multiline':False]['text':'    {','line_number':652,'multiline':False]['text':'        return equal((IdentifiedArrayReferenceValue)other);','line_number':653,'multiline':False]['text':'    }','line_number':654,'multiline':False]['text':'','line_number':655,'multiline':False]['text':'','line_number':656,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':657,'multiline':False]['text':'    // TracedReferenceValue arguments.','line_number':658,'multiline':False]['text':'','line_number':659,'multiline':False]['text':'    public ReferenceValue generalize(TracedReferenceValue other)','line_number':660,'multiline':False]['text':'    {','line_number':661,'multiline':False]['text':'        return other.generalize(this);','line_number':662,'multiline':False]['text':'    }','line_number':663,'multiline':False]['text':'','line_number':664,'multiline':False]['text':'','line_number':665,'multiline':False]['text':'    public int equal(TracedReferenceValue other)','line_number':666,'multiline':False]['text':'    {','line_number':667,'multiline':False]['text':'        return other.equal(this);','line_number':668,'multiline':False]['text':'    }','line_number':669,'multiline':False]['text':' Implementations for Value.','line_number':672,'multiline':False]['text':' Implementations for Object.','line_number':691,'multiline':False]