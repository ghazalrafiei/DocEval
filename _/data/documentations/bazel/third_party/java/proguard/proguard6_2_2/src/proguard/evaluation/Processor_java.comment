['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This InstructionVisitor executes the instructions that it visits on a given
 * local variable frame and stack.
 *
 * @author Eric Lafortune
 ','line_number':29,'multiline':True]['text':'*
     * Creates a new processor that operates on the given environment.
     * @param variables      the local variable frame.
     * @param stack          the local stack.
     * @param valueFactory   the value factory that will create all values
     *                       during the evaluation.
     * @param branchUnit     the class that can affect the program counter.
     * @param invocationUnit the class that can access other program members.
     * @param alwaysCast     a flag that specifies whether downcasts or casts
     *                       of null values should always be performed.
     ','line_number':49,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':79,'multiline':False]['text':' TODO: Forward ArithmeticExceptions.','line_number':293,'multiline':False]['text':'stack.clear();','line_number':294,'multiline':False]['text':'stack.push(valueFactory.createReference(false));','line_number':295,'multiline':False]['text':'branchUnit.throwException();','line_number':296,'multiline':False]['text':' TODO: Forward ArithmeticExceptions.','line_number':308,'multiline':False]['text':'stack.clear();','line_number':309,'multiline':False]['text':'stack.push(valueFactory.createReference(false));','line_number':310,'multiline':False]['text':'branchUnit.throwException();','line_number':311,'multiline':False]['text':' TODO: Forward ArithmeticExceptions.','line_number':331,'multiline':False]['text':'stack.clear();','line_number':332,'multiline':False]['text':'stack.push(valueFactory.createReference(false));','line_number':333,'multiline':False]['text':'branchUnit.throwException();','line_number':334,'multiline':False]['text':' TODO: Forward ArithmeticExceptions.','line_number':346,'multiline':False]['text':'stack.clear();','line_number':347,'multiline':False]['text':'stack.push(valueFactory.createReference(false));','line_number':348,'multiline':False]['text':'branchUnit.throwException();','line_number':349,'multiline':False]['text':'                stack.push(stack.lpop().compareReverse(stack.lpop()));','line_number':486,'multiline':False]['text':' TODO: Check cast.','line_number':612,'multiline':False]['text':' TODO: Use array lengths.','line_number':642,'multiline':False]['text':' The operand on the stack can be a reference or a return','line_number':739,'multiline':False]['text':' address, so we'll relax the pop operation.','line_number':740,'multiline':False]['text':'variables.store(variableIndex, stack.apop());','line_number':741,'multiline':False]['text':' The return address should be in the last offset of the','line_number':752,'multiline':False]['text':' given instruction offset variable (even though there may','line_number':753,'multiline':False]['text':' be other offsets).','line_number':754,'multiline':False]['text':' Maybe branch to the next instruction.','line_number':772,'multiline':False]['text':' Note that the stack entries are popped in reverse order.','line_number':823,'multiline':False]['text':' Note that the stack entries are popped in reverse order.','line_number':829,'multiline':False]['text':' Note that the stack entries are popped in reverse order.','line_number':835,'multiline':False]['text':' Note that the stack entries are popped in reverse order.','line_number':841,'multiline':False]['text':' Maybe branch to the default offset.','line_number':889,'multiline':False]['text':' Maybe branch to the default offset.','line_number':914,'multiline':False]