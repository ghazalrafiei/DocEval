['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This InstructionVisitor checks whether a given pattern instruction sequence
 * occurs in the instructions that are visited. The arguments of the
 * instruction sequence can be wildcards that are matched.
 *
 * @author Eric Lafortune
 ','line_number':32,'multiline':True]['text':'*','line_number':44,'multiline':False]['text':'/
    public  static       boolean DEBUG      = System.getProperty("ism")  != null;
    public  static       boolean DEBUG_MORE = System.getProperty("ismm") != null;
    //','line_number':47,'multiline':True]['text':' Fields acting as a parameter and a return value for visitor methods.','line_number':89,'multiline':False]['text':'*
     * Creates a new InstructionSequenceMatcher.
     * @param patternConstants        any constants referenced by the pattern
     *                                instruction.
     * @param patternInstructions     the pattern instruction sequence.
     ','line_number':94,'multiline':True]['text':'*
     * Starts matching from the first instruction again next time.
     ','line_number':112,'multiline':True]['text':'*
     * Returns whether the complete pattern sequence has been matched.
     ','line_number':127,'multiline':True]['text':'*
     * Returns the number of instructions in the pattern sequence.
     ','line_number':136,'multiline':True]['text':'*
     * Returns the matched instruction offset of the specified pattern
     * instruction.
     ','line_number':145,'multiline':True]['text':'*
     * Returns whether the specified wildcard argument was a constant from
     * the constant pool in the most recent match.
     ','line_number':155,'multiline':True]['text':'*
     * Returns the value of the specified matched argument (wildcard or not).
     ','line_number':165,'multiline':True]['text':'*
     * Returns the values of the specified matched arguments (wildcard or not).
     ','line_number':177,'multiline':True]['text':'*
     * Returns the index of the specified matched constant (wildcard or not).
     ','line_number':193,'multiline':True]['text':'*
     * Returns the value of the specified matched branch offset (wildcard or
     * not).
     ','line_number':205,'multiline':True]['text':'*
     * Returns the values of the specified matched jump offsets (wildcard or
     * not).
     ','line_number':218,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':236,'multiline':False]['text':' Check if the instruction matches the next instruction in the sequence.','line_number':242,'multiline':False]['text':' Check if the instruction sequence is matching now.','line_number':248,'multiline':False]['text':' Check if the instruction matches the next instruction in the sequence.','line_number':262,'multiline':False]['text':' Check if the instruction sequence is matching now.','line_number':270,'multiline':False]['text':' Check if the instruction matches the next instruction in the sequence.','line_number':284,'multiline':False]['text':' Check if the instruction sequence is matching now.','line_number':293,'multiline':False]['text':' Check if the instruction matches the next instruction in the from','line_number':307,'multiline':False]['text':' sequence.','line_number':308,'multiline':False]['text':' Check if the instruction sequence is matching now.','line_number':315,'multiline':False]['text':' Check if the instruction matches the next instruction in the sequence.','line_number':329,'multiline':False]['text':' Check if the instruction sequence is matching now.','line_number':343,'multiline':False]['text':' Check if the instruction matches the next instruction in the sequence.','line_number':357,'multiline':False]['text':' Check if the instruction sequence is matching now.','line_number':369,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':379,'multiline':False]['text':' Compare the integer values.','line_number':385,'multiline':False]['text':' Compare the long values.','line_number':395,'multiline':False]['text':' Compare the float values.','line_number':405,'multiline':False]['text':' Compare the double values.','line_number':415,'multiline':False]['text':'PrimitiveArrayConstant primitiveArrayPatternConstant = (PrimitiveArrayConstant)patternConstant;','line_number':423,'multiline':False]['text':'','line_number':424,'multiline':False]['text':'// Compare the primitive array values.','line_number':425,'multiline':False]['text':'matchingConstant =','line_number':426,'multiline':False]['text':'    primitiveArrayConstant.getLength() == primitiveArrayPatternConstant.getLength() &&','line_number':427,'multiline':False]['text':'    ArrayUtil.equal(primitiveArrayConstant.getValues(),','line_number':428,'multiline':False]['text':'                    primitiveArrayPatternConstant.getValues(),','line_number':429,'multiline':False]['text':'                    primitiveArrayPatternConstant.getLength());','line_number':430,'multiline':False]['text':' Check the UTF-8 constant.','line_number':439,'multiline':False]['text':' Compare the actual strings.','line_number':451,'multiline':False]['text':' Check the bootstrap method and the name and type.','line_number':461,'multiline':False]['text':' Check the bootstrap method and the name and type.','line_number':476,'multiline':False]['text':' Check the handle type and the name and type.','line_number':491,'multiline':False]['text':' Check the class and the name and type.','line_number':505,'multiline':False]['text':' Check the class name.','line_number':520,'multiline':False]['text':' Check the descriptor.','line_number':532,'multiline':False]['text':' Check the name and the descriptor.','line_number':544,'multiline':False]['text':' Small utility methods.','line_number':555,'multiline':False]['text':' Check the opcode.','line_number':560,'multiline':False]['text':' Check the literal argument.','line_number':572,'multiline':False]['text':' Store the wildcard argument.','line_number':577,'multiline':False]['text':' Check the previously stored wildcard argument.','line_number':584,'multiline':False]['text':'*
     * Marks the specified argument (by index) as matching the specified
     * argument value.
     ','line_number':590,'multiline':True]['text':'*
     * Returns whether the specified wildcard argument (by index) has been
     * matched.
     ','line_number':602,'multiline':True]['text':' Remember that we are trying to match a constant.','line_number':638,'multiline':False]['text':' Check the constant index.','line_number':641,'multiline':False]['text':' Check the actual constant.','line_number':646,'multiline':False]['text':' Store the constant index.','line_number':656,'multiline':False]['text':' Check a previously stored constant index.','line_number':665,'multiline':False]['text':'*
     * Marks the specified constant (by index) as matching the specified
     * constant index value.
     ','line_number':671,'multiline':True]['text':'*
     * Returns whether the specified wildcard constant has been matched.
     ','line_number':683,'multiline':True]['text':' Check the literal argument.','line_number':699,'multiline':False]['text':' Store a wildcard argument.','line_number':704,'multiline':False]['text':' Check the previously stored wildcard argument.','line_number':711,'multiline':False]['text':' Did the instruction match?','line_number':752,'multiline':False]['text':' Remember the offset of the matching instruction.','line_number':755,'multiline':False]['text':' Try to match the next instruction next time.','line_number':758,'multiline':False]['text':' Did we match all instructions in the sequence?','line_number':761,'multiline':False]['text':' Allow subclasses to perform a final check on additional constraints.','line_number':766,'multiline':False]['text':' Start matching from the first instruction again next time.','line_number':794,'multiline':False]['text':' The instruction didn't match.','line_number':800,'multiline':False]['text':' Is this a failed second instruction?','line_number':803,'multiline':False]['text':' Start matching from the first instruction next time.','line_number':806,'multiline':False]['text':' Retry a failed second instruction as a first instruction.','line_number':809,'multiline':False]['text':'*
     * Performs a final check on the candidate sequence to match,
     * after the pattern has been successfully fully matched with the
     * sequence. Subclasses may override this method to implement
     * additional constraints on the matched sequences.
     *
     * @param clazz
     * @param method
     * @param codeAttribute
     * @param offset
     * @param instruction
     * @return
     ','line_number':818,'multiline':True]