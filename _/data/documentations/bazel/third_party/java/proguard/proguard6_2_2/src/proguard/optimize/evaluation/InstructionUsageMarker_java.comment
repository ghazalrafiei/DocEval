['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor marks necessary instructions in the code attributes
 * that it visits, based on partial evaluation.
 *
 * @see NoSideEffectClassMarker
 * @see SideEffectClassMarker
 * @see ReadWriteFieldMarker
 * @see NoSideEffectMethodMarker
 * @see NoExternalSideEffectMethodMarker
 * @see SideEffectMethodMarker
 * @see ParameterEscapeMarker
 *
 * @author Eric Lafortune
 ','line_number':40,'multiline':True]['text':'*','line_number':58,'multiline':False]['text':'/
    private static boolean DEBUG          = System.getProperty("ium") != null;
    private static boolean DEBUG_RESULTS  = DEBUG;
    //','line_number':61,'multiline':True]['text':'*
     * Creates a new InstructionUsageMarker.
     ','line_number':87,'multiline':True]['text':'*
     * Creates a new InstructionUsageMarker.
     * @param partialEvaluator    the evaluator to be used for the analysis.
     * @param runPartialEvaluator specifies whether to run this evaluator on
     *                            every code attribute that is visited.
     ','line_number':96,'multiline':True]['text':'*
     * Returns whether the specified instruction was traced in the most
     * recently analyzed code attribute.
     ','line_number':110,'multiline':True]['text':'*
     * Returns a filtering version of the given instruction visitor that only
     * visits traced instructions.
     ','line_number':120,'multiline':True]['text':'*
     * Returns a filtering version of the given instruction visitor that only
     * visits traced or untraced instructions.
     ','line_number':130,'multiline':True]['text':'*
     * Returns whether the specified instruction is necessary in the most
     * recently analyzed code attribute.
     ','line_number':141,'multiline':True]['text':'*
     * Returns whether an extra push/pop instruction is required at the given
     * offset in the most recently analyzed code attribute.
     ','line_number':151,'multiline':True]['text':'*
     * Returns a filtering version of the given instruction visitor that only
     * visits necessary instructions.
     ','line_number':161,'multiline':True]['text':'*
     * Returns a filtering version of the given instruction visitor that only
     * visits necessary or unnecessary instructions.
     ','line_number':171,'multiline':True]['text':'*
     * Returns the stack before execution of the instruction at the given
     * offset.
     ','line_number':182,'multiline':True]['text':'*
     * Returns the stack after execution of the instruction at the given
     * offset.
     ','line_number':192,'multiline':True]['text':'*
     * Returns whether the specified stack entry before the given offset is
     * unwanted, e.g. because it was intended as a method parameter that has
     * been removed.
     ','line_number':202,'multiline':True]['text':'*
     * Returns whether the stack specified entries before the given offset are
     * present.
     ','line_number':214,'multiline':True]['text':'if (present1 ^ present2)','line_number':225,'multiline':False]['text':'{','line_number':226,'multiline':False]['text':'    throw new UnsupportedOperationException("Can't handle partial use of dup2 instructions");','line_number':227,'multiline':False]['text':'}','line_number':228,'multiline':False]['text':'*
     * Returns whether the specified stack entry before the given offset is
     * present.
     * @param instructionOffset the offset of the stack entry to be checked.
     * @param stackIndex        the index of the stack entry to be checked
     *                          (counting from the bottom).
     ','line_number':234,'multiline':True]['text':'*
     * Returns whether the stack specified entries after the given offset are
     * necessary.
     ','line_number':254,'multiline':True]['text':'if (present1 ^ present2)','line_number':265,'multiline':False]['text':'{','line_number':266,'multiline':False]['text':'    throw new UnsupportedOperationException("Can't handle partial use of dup2 instructions");','line_number':267,'multiline':False]['text':'}','line_number':268,'multiline':False]['text':'*
     * Returns whether any of the stack entries after the given offsets are
     * necessary.
     * @param instructionOffsets the offsets of the stack entries to be checked.
     * @param stackIndex         the index of the stack entries to be checked
     *                           (counting from the bottom).
     ','line_number':274,'multiline':True]['text':'*
     * Returns whether the specified stack entry after the given offset is
     * necessary.
     * @param instructionOffset the offset of the stack entry to be checked.
     * @param stackIndex        the index of the stack entry to be checked
     *                          (counting from the bottom).
     ','line_number':299,'multiline':True]['text':'*
     * Returns the instruction offsets to which the given instruction offset
     * branches in the most recently analyzed code attribute.
     ','line_number':315,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':325,'multiline':False]['text':'        DEBUG = DEBUG_RESULTS =','line_number':332,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':333,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':334,'multiline':False]['text':' TODO: Remove this when the instruction usage marker has stabilized.','line_number':336,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':337,'multiline':False]['text':' Process the code.','line_number':340,'multiline':False]['text':' Initialize the necessary arrays.','line_number':368,'multiline':False]['text':' Evaluate the method.','line_number':371,'multiline':False]['text':' Evaluate the method the way the JVM verifier would do it.','line_number':377,'multiline':False]['text':' Mark any unused method parameters on the stack.','line_number':384,'multiline':False]['text':' Mark all essential instructions that have been encountered as used.','line_number':391,'multiline':False]['text':' Also mark infinite loops and instructions that can have side effects.','line_number':392,'multiline':False]['text':' Globally mark instructions and their produced variables and stack','line_number':401,'multiline':False]['text':' entries on which necessary instructions depend.','line_number':402,'multiline':False]['text':' Instead of doing this recursively, we loop across all instructions,','line_number':403,'multiline':False]['text':' starting at the highest previously unmarked instruction that has','line_number':404,'multiline':False]['text':' been been marked.','line_number':405,'multiline':False]['text':' Mark the stack/variable producers of this instruction/','line_number':418,'multiline':False]['text':' Also mark any reverse dependencies.','line_number':424,'multiline':False]['text':' Check if this instruction is a branch origin from a branch','line_number':428,'multiline':False]['text':' that straddles some marked code.','line_number':429,'multiline':False]['text':' Check if this instruction is a branch target from a branch','line_number':434,'multiline':False]['text':' that straddles some marked code.','line_number':435,'multiline':False]['text':' Mark variable initializations, even if  they aren't strictly necessary.','line_number':452,'multiline':False]['text':' The virtual machine's verification step is not smart enough to see','line_number':453,'multiline':False]['text':' this, and may complain otherwise.','line_number':454,'multiline':False]['text':' Mark produced stack entries, in order to keep the stack consistent.','line_number':464,'multiline':False]['text':' Check if this instruction is a branch origin from a branch','line_number':482,'multiline':False]['text':' that straddles some marked code.','line_number':483,'multiline':False]['text':' Check if this instruction is a branch target from a branch','line_number':488,'multiline':False]['text':' that straddles some marked code.','line_number':489,'multiline':False]['text':' Mark unnecessary popping instructions, in order to keep the stack','line_number':498,'multiline':False]['text':' consistent.','line_number':499,'multiline':False]['text':' Check if this instruction is a branch origin from a branch','line_number':518,'multiline':False]['text':' that straddles some marked code.','line_number':519,'multiline':False]['text':' Check if this instruction is a branch target from a branch','line_number':524,'multiline':False]['text':' that straddles some marked code.','line_number':525,'multiline':False]['text':'*
     * This MemberVisitor marks stack entries that aren't necessary because
     * parameters aren't used in the methods that are visited.
     ','line_number':555,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':569,'multiline':False]['text':' Mark unused parameters.','line_number':586,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':612,'multiline':False]['text':' Implementations for MemberVisitor.','line_number':620,'multiline':False]['text':' Get the total size of the parameters and the mask of the used','line_number':627,'multiline':False]['text':' parameters.','line_number':628,'multiline':False]['text':'*
     * This InstructionVisitor marks the instructions that are intrinsically
     * necessary, because they have side effects.
     ','line_number':635,'multiline':True]['text':' Parameters and values for visitor methods.','line_number':647,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':652,'multiline':False]['text':' Also check for side-effects of the instruction itself.','line_number':681,'multiline':False]['text':' We may have to mark the instruction due to initializers.','line_number':698,'multiline':False]['text':' Also check for side-effects of the instruction itself.','line_number':702,'multiline':False]['text':' We may have to mark the instruction due to initializers.','line_number':710,'multiline':False]['text':' We generally have to mark the putfield instruction,','line_number':716,'multiline':False]['text':' unless it's never read. We can reverse the dependencies','line_number':717,'multiline':False]['text':' if it's a field of a recently created instance.','line_number':718,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':760,'multiline':False]['text':' If a static initializer may have side effects, the instruction','line_number':769,'multiline':False]['text':' has to be marked.','line_number':770,'multiline':False]['text':' Mark the invocation.','line_number':775,'multiline':False]['text':' If a static initializer may have side effects, the instruction','line_number':785,'multiline':False]['text':' has to be marked.','line_number':786,'multiline':False]['text':' Mark the invocation.','line_number':791,'multiline':False]['text':'            if (referencedMethod != null)','line_number':807,'multiline':False]['text':'            {','line_number':808,'multiline':False]['text':'                System.out.println("InstructionUsageMarker$MyInitialUsageMarker.visitAnyMethodrefConstant [" + refConstant.getClassName(clazz) + "." + refConstant.getName(clazz) +','line_number':809,'multiline':False]['text':'                                   "]: mark! esc = " + ParameterEscapeMarker.getEscapingParameters(referencedMethod) +','line_number':810,'multiline':False]['text':'                                   ", mod = " + ParameterEscapeMarker.modifiesAnything(referencedMethod) +','line_number':811,'multiline':False]['text':'                                   ", side = " + SideEffectClassChecker.mayHaveSideEffects(clazz,','line_number':812,'multiline':False]['text':'                                                                                           refConstant.referencedClass,','line_number':813,'multiline':False]['text':'                                                                                           referencedMethod));','line_number':814,'multiline':False]['text':'            }','line_number':815,'multiline':False]['text':' Is the method invocation really necessary?','line_number':817,'multiline':False]['text':' Skip if the method was explicitly marked as having no external side-effects.','line_number':821,'multiline':False]['text':' In case we shall optimize conservatively, always mark the method','line_number':824,'multiline':False]['text':' call if the referenced method has side effects.','line_number':825,'multiline':False]['text':'                System.out.println("  -> mark ["+referencingOffset+"]");','line_number':835,'multiline':False]['text':' Mark the invocation.','line_number':836,'multiline':False]['text':' Create reverse dependencies for reference parameters that','line_number':846,'multiline':False]['text':' are modified.','line_number':847,'multiline':False]['text':' Implementations for ParameterVisitor.','line_number':853,'multiline':False]['text':' Create a reverse dependency if the reference parameter is','line_number':867,'multiline':False]['text':' modified.','line_number':868,'multiline':False]['text':'*
         * Marks the specified instruction offset or creates reverse
         * dependencies to the producers of its bottom popped stack entry.
         ','line_number':877,'multiline':True]['text':'*
         * Marks the specified instruction offset or creates reverse
         * dependencies to the producers of the specified stack entry, if it
         * is a reference value.
         ','line_number':890,'multiline':True]['text':'            System.out.println("     ["+offset+"] s"+stackEntryIndex+": ["+stackEntry+"]");','line_number':900,'multiline':False]['text':'                System.out.println("EvaluationShrinker$MyInitialUsageMarker.createReverseDependencies: ["+offset+"] ["+referenceValue+"]?");','line_number':905,'multiline':False]['text':' The null reference value may not have a trace value.','line_number':906,'multiline':False]['text':'                        System.out.println("InstructionUsageMarker$MyInitialUsageMarker.createReverseDependencies: not a TracedReferenceValue");','line_number':919,'multiline':False]['text':'*
         * Marks the specified instruction offset or creates reverse
         * dependencies to the producers of the given reference value.
         ','line_number':927,'multiline':True]['text':' Create a reverse dependency. If the creating instruction','line_number':942,'multiline':False]['text':' is necessary, then so is this one.','line_number':943,'multiline':False]['text':' Avoid circular dependencies in code that loops with','line_number':946,'multiline':False]['text':' instances on the stack (like the string encryption code).','line_number':947,'multiline':False]['text':' Just mark the instruction.','line_number':963,'multiline':False]['text':'*
     * This InstructionVisitor marks the producing instructions and produced
     * variables and stack entries of the instructions that it visits.
     * Simplified method arguments are ignored.
     ','line_number':971,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':980,'multiline':False]['text':' Is the variable being loaded or incremented?','line_number':1041,'multiline':False]['text':' Explicitly mark the produced stack entry of a 'jsr' instruction,','line_number':1061,'multiline':False]['text':' because the consuming 'astore' instruction of the subroutine is','line_number':1062,'multiline':False]['text':' cleared every time it is traced.','line_number':1063,'multiline':False]['text':'*
     * This InstructionVisitor marks variable initializations that are
     * necessary to appease the JVM.
     ','line_number':1077,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':1085,'multiline':False]['text':' Is the variable being loaded or incremented?','line_number':1092,'multiline':False]['text':' Mark any variable initializations for this variable load that','line_number':1095,'multiline':False]['text':' are required according to the JVM.','line_number':1096,'multiline':False]['text':'*
     * This InstructionVisitor marks stack entries that should be pushed
     * (and previously unnecessary pushing instructions) to keep the stack
     * consistent at later points in the execution.
     ','line_number':1103,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':1112,'multiline':False]['text':' We check all entries to make sure the stack is also consistent','line_number':1116,'multiline':False]['text':' at method exit points, where some stack entries might be','line_number':1117,'multiline':False]['text':' discarded.','line_number':1118,'multiline':False]['text':' Is this stack entry pushed by any producer','line_number':1123,'multiline':False]['text':' (because it is required by other consumers)?','line_number':1124,'multiline':False]['text':' Mark all produced stack entries.','line_number':1128,'multiline':False]['text':'*
     * This InstructionVisitor marks instructions that should still push or
     * pop some values to keep the stack consistent.
     ','line_number':1136,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':1144,'multiline':False]['text':' Check all stack entries that are popped.','line_number':1148,'multiline':False]['text':'','line_number':1149,'multiline':False]['text':' Typical case: a stack value that is required elsewhere or a','line_number':1150,'multiline':False]['text':' pushed exception type that still has to be popped.','line_number':1151,'multiline':False]['text':' Is this stack entry pushed by any producer','line_number':1159,'multiline':False]['text':' (because it is required by other consumers)?','line_number':1160,'multiline':False]['text':' Mark that we'll need an extra pop instruction.','line_number':1164,'multiline':False]['text':' [DGD-481][DGD-504] Mark the stack entries and','line_number':1167,'multiline':False]['text':' their producers again for a push/pop. In Kotlin','line_number':1168,'multiline':False]['text':' code, it can happen that we have missed a producer','line_number':1169,'multiline':False]['text':' during stack consistency marking.','line_number':1170,'multiline':False]['text':' Small utility methods.','line_number':1178,'multiline':False]['text':'*
     * Marks the producing instructions of the variable consumer at the given
     * offset.
     * @param consumerOffset the offset of the variable consumer.
     * @param variableIndex  the index of the variable that is loaded.
     ','line_number':1180,'multiline':True]['text':' Make sure the variable and the instruction are marked','line_number':1200,'multiline':False]['text':' at the producing offset.','line_number':1201,'multiline':False]['text':'*
     * Ensures that the given variable is initialized before the specified
     * consumer of that variable, in the JVM's view.
     * @param consumerOffset the instruction offset before which the variable
     *                       needs to be initialized.
     * @param variableIndex  the index of the variable.
     * @param visitedOffsets the already visited consumer offsets, needed to
     *                       prevent infinite loops.
     * @return the updated visited consumer offsets.
     ','line_number':1211,'multiline':True]['text':' Avoid infinite loops by stopping recursion if we encounter','line_number':1225,'multiline':False]['text':' an already visited offset.','line_number':1226,'multiline':False]['text':' Make sure the variable is initialized after all producers.','line_number':1234,'multiline':False]['text':' Use the simple evaluator, to get the JVM's view of what is','line_number':1235,'multiline':False]['text':' initialized.','line_number':1236,'multiline':False]['text':'*
     * Ensures that the given variable is initialized after the specified
     * producer of that variable, in the JVM's view.
     * @param producerOffset the instruction offset after which the variable
     *                       needs to be initialized.
     * @param variableIndex  the index of the variable.
     * @param visitedOffsets the already visited consumer offsets, needed to
     *                       prevent infinite loops.
     * @return the updated visited consumer offsets.
     ','line_number':1261,'multiline':True]['text':' No problem if the producer has already been marked.','line_number':1275,'multiline':False]['text':' Is the unmarked producer a variable initialization?','line_number':1278,'multiline':False]['text':' Mark the producer.','line_number':1281,'multiline':False]['text':' Don't mark the producer, but recursively look at the','line_number':1290,'multiline':False]['text':' preceding producers of the same variable. Their values','line_number':1291,'multiline':False]['text':' will fall through, replacing this producer.','line_number':1292,'multiline':False]['text':'*
     * Marks the stack entries and their producing instructions of the
     * consumer at the given offset.
     * @param clazz          the containing class.
     * @param consumerOffset the offset of the consumer.
     * @param consumer       the consumer of the stack entries.
     ','line_number':1304,'multiline':True]['text':' Mark the producers of the popped values.','line_number':1320,'multiline':False]['text':'*
     * Marks the stack entry and the corresponding producing instructions
     * of the consumer at the given offset, if the stack entry of the
     * consumer is marked.
     * @param consumerOffset        the offset of the consumer.
     * @param consumerTopStackIndex the index of the stack entry to be checked
     *                              (counting from the top).
     * @param producerTopStackIndex the index of the stack entry to be marked
     *                              (counting from the top).
     ','line_number':1329,'multiline':True]['text':'*
     * Marks the stack entry and optionally the corresponding producing
     * instructions of the consumer at the given offset.
     * @param consumerOffset   the offset of the consumer.
     * @param stackIndex       the index of the stack entry to be marked
     *                         (counting from the bottom).
     * @param markInstructions specifies whether the producing instructions
     *                         should be marked.
     ','line_number':1354,'multiline':True]['text':'*
     * Marks the stack entry and optionally its producing instructions at the
     * given offsets.
     * @param producerOffsets  the offsets of the producers to be marked.
     * @param stackIndex       the index of the stack entry to be marked
     *                         (counting from the bottom).
     * @param markInstructions specifies whether the producing instructions
     *                         should be marked.
     ','line_number':1376,'multiline':True]['text':' Make sure the stack entry and the instruction are marked','line_number':1396,'multiline':False]['text':' at the producing offset.','line_number':1397,'multiline':False]['text':' We can mark the producer.','line_number':1404,'multiline':False]['text':' We'll need to push a stack entry at that point','line_number':1409,'multiline':False]['text':' instead.','line_number':1410,'multiline':False]['text':'*
     * Marks any modification instructions that are required by the specified
     * creation instruction (new, newarray, method returning new
     * instance,...), so this new instance is properly initialized.
     * @param instructionOffset the offset of the creation instruction.
     ','line_number':1419,'multiline':True]['text':'*
     * Marks the branch instructions of straddling branches, if they straddle
     * some code that has been marked.
     * @param instructionOffset   the offset of the branch origin or branch target.
     * @param branchOffsets       the offsets of the straddling branch targets
     *                            or branch origins.
     * @param isPointingToTargets <code>true</code> if the above offsets are
     *                            branch targets, <code>false</code> if they
     *                            are branch origins.
     ','line_number':1437,'multiline':True]['text':' Loop over all branch offsets.','line_number':1453,'multiline':False]['text':' Is the branch straddling forward any necessary instructions?','line_number':1457,'multiline':False]['text':' Is the offset pointing to a branch origin or to a branch target?','line_number':1460,'multiline':False]['text':' Mark the branch instruction.','line_number':1490,'multiline':False]['text':'*
     * Initializes the necessary data structure.
     ','line_number':1496,'multiline':True]['text':' Create new arrays for storing information at each instruction offset.','line_number':1505,'multiline':False]['text':'*
     * Returns whether the specified variable is initialized at the specified
     * offset.
     ','line_number':1547,'multiline':True]['text':' Wasn't the variable set yet?','line_number':1554,'multiline':False]['text':' Is the computational type different now?','line_number':1561,'multiline':False]['text':' Is the reference type different now?','line_number':1568,'multiline':False]['text':' Was the producer an argument (which may be removed)?','line_number':1576,'multiline':False]['text':'*
     * Marks the stack entry after the given offset.
     * @param instructionOffset the offset of the stack entry to be marked.
     * @param stackIndex        the index of the stack entry to be marked
     *                          (counting from the bottom).
     ','line_number':1583,'multiline':True]['text':'*
     * Marks the specified stack entry as unwanted, typically because it is
     * an unused parameter of a method invocation.
     * @param instructionOffset the offset of the consumer.
     * @param stackIndex        the index of the stack entry to be marked
     *                          (counting from the bottom).
     ','line_number':1606,'multiline':True]['text':'*
     * Marks the specified instructions as used.
     * @param instructionOffsets the offsets of the instructions.
     ','line_number':1620,'multiline':True]['text':'*
     * Marks the specified instruction as used.
     * @param instructionOffset the offset of the instruction.
     ','line_number':1635,'multiline':True]['text':'*
     * Marks that an extra push/pop instruction is required at the given
     * offset, if the current instruction at that offset is unused.
     * @param instructionOffset the offset of the instruction.
     ','line_number':1655,'multiline':True]['text':'*
     * Returns whether any instruction in the specified sequence of
     * instructions is necessary.
     * @param startInstructionOffset the start offset of the instruction
     *                               sequence (inclusive).
     * @param endInstructionOffset   the end offset of the instruction
     *                               sequence (exclusive).
     * @return whether any instruction is necessary.
     ','line_number':1677,'multiline':True]['text':'*
     * This InstructionVisitor delegates its visits to a given
     * InstructionVisitor, but only if the instruction has been marked as
     * necessary (or not).
     ','line_number':1704,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':1723,'multiline':False]['text':' Small utility methods.','line_number':1779,'multiline':False]['text':'*
        * Returns whether the instruction at the given offset should be
        * visited, depending on whether it is necessary or not.
        ','line_number':1781,'multiline':True]