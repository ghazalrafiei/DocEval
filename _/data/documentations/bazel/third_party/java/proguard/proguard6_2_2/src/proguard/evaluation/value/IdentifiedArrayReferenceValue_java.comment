['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ArrayReferenceValue represents an array reference value that is
 * identified by a unique ID.
 *
 * @author Eric Lafortune
 ','line_number':25,'multiline':True]['text':'*
     * Creates a new array reference value with the given ID.
     ','line_number':37,'multiline':True]['text':' Implementations of binary methods of ReferenceValue.','line_number':54,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':68,'multiline':False]['text':'    // UnknownReferenceValue arguments.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':'    public ReferenceValue generalize(UnknownReferenceValue other)','line_number':71,'multiline':False]['text':'    {','line_number':72,'multiline':False]['text':'        return other;','line_number':73,'multiline':False]['text':'    }','line_number':74,'multiline':False]['text':'','line_number':75,'multiline':False]['text':'','line_number':76,'multiline':False]['text':'    public int equal(UnknownReferenceValue other)','line_number':77,'multiline':False]['text':'    {','line_number':78,'multiline':False]['text':'        return MAYBE;','line_number':79,'multiline':False]['text':'    }','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':83,'multiline':False]['text':'    // TypedReferenceValue arguments.','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':'    public ReferenceValue generalize(TypedReferenceValue other)','line_number':86,'multiline':False]['text':'    {','line_number':87,'multiline':False]['text':'    }','line_number':88,'multiline':False]['text':'','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':'    public int equal(TypedReferenceValue other)','line_number':91,'multiline':False]['text':'    {','line_number':92,'multiline':False]['text':'    }','line_number':93,'multiline':False]['text':'','line_number':94,'multiline':False]['text':'','line_number':95,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':96,'multiline':False]['text':'    // IdentifiedReferenceValue arguments.','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':'    public ReferenceValue generalize(IdentifiedReferenceValue other)','line_number':99,'multiline':False]['text':'    {','line_number':100,'multiline':False]['text':'        return generalize((TypedReferenceValue)other);','line_number':101,'multiline':False]['text':'    }','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':'    public int equal(IdentifiedReferenceValue other)','line_number':105,'multiline':False]['text':'    {','line_number':106,'multiline':False]['text':'        return equal((TypedReferenceValue)other);','line_number':107,'multiline':False]['text':'    }','line_number':108,'multiline':False]['text':'','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':111,'multiline':False]['text':'    // ArrayReferenceValue arguments.','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':'    public ReferenceValue generalize(ArrayReferenceValue other)','line_number':114,'multiline':False]['text':'    {','line_number':115,'multiline':False]['text':'        return generalize((TypedReferenceValue)other);','line_number':116,'multiline':False]['text':'    }','line_number':117,'multiline':False]['text':'','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':'    public int equal(ArrayReferenceValue other)','line_number':120,'multiline':False]['text':'    {','line_number':121,'multiline':False]['text':'        return equal((TypedReferenceValue)other);','line_number':122,'multiline':False]['text':'    }','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':'','line_number':125,'multiline':False]['text':' Implementations of binary ReferenceValue methods with','line_number':126,'multiline':False]['text':' IdentifiedArrayReferenceValue arguments.','line_number':127,'multiline':False]['text':'    public ReferenceValue generalize(IdentifiedArrayReferenceValue other)','line_number':129,'multiline':False]['text':'    {','line_number':130,'multiline':False]['text':'        return generalize((ArrayReferenceValue)other);','line_number':131,'multiline':False]['text':'    }','line_number':132,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':142,'multiline':False]['text':'    // DetailedArrayReferenceValue arguments.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':'    public ReferenceValue generalize(DetailedArrayReferenceValue other)','line_number':145,'multiline':False]['text':'    {','line_number':146,'multiline':False]['text':'        return generalize((IdentifiedArrayReferenceValue)other);','line_number':147,'multiline':False]['text':'    }','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':'    public int equal(DetailedArrayReferenceValue other)','line_number':151,'multiline':False]['text':'    {','line_number':152,'multiline':False]['text':'        return equal((IdentifiedArrayReferenceValue)other);','line_number':153,'multiline':False]['text':'    }','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':'    // Implementations of binary ReferenceValue methods with','line_number':157,'multiline':False]['text':'    // TracedReferenceValue arguments.','line_number':158,'multiline':False]['text':'','line_number':159,'multiline':False]['text':'    public ReferenceValue generalize(TracedReferenceValue other)','line_number':160,'multiline':False]['text':'    {','line_number':161,'multiline':False]['text':'        return other.generalize(this);','line_number':162,'multiline':False]['text':'    }','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':'','line_number':165,'multiline':False]['text':'    public int equal(TracedReferenceValue other)','line_number':166,'multiline':False]['text':'    {','line_number':167,'multiline':False]['text':'        return other.equal(this);','line_number':168,'multiline':False]['text':'    }','line_number':169,'multiline':False]['text':' Implementations for Value.','line_number':172,'multiline':False]['text':' Implementations for Object.','line_number':180,'multiline':False]