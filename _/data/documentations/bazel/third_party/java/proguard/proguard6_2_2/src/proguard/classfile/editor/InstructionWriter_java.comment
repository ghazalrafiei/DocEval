['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This InstructionVisitor writes out the instructions that it visits,
 * collecting instructions that have to be widened. As an AttributeVisitor,
 * it then applies the collected changes. The process will be repeated
 * recursively, if necessary. The caller still has to update the frame sizes.
 *
 * @author Eric Lafortune
 ','line_number':30,'multiline':True]['text':'*','line_number':43,'multiline':False]['text':'/
    public  static       boolean DEBUG = false;
    //','line_number':45,'multiline':True]['text':'*
     * Resets the accumulated code.
     * @param codeLength the length of the code that will be edited next.
     ','line_number':55,'multiline':True]['text':'*
     * Extends the size of the accumulated code.
     * @param codeLength the length of the code that will be edited next.
     ','line_number':70,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':85,'multiline':False]['text':' Try to write out the instruction.','line_number':89,'multiline':False]['text':' Simple instructions should always fit.','line_number':90,'multiline':False]['text':' Try to write out the instruction.','line_number':99,'multiline':False]['text':' Create a new constant instruction that will fit.','line_number':104,'multiline':False]['text':' Write out a dummy constant instruction for now.','line_number':117,'multiline':False]['text':' Try to write out the instruction.','line_number':129,'multiline':False]['text':' Create a new variable instruction that will fit.','line_number':134,'multiline':False]['text':' Write out a dummy variable instruction for now.','line_number':147,'multiline':False]['text':' Try to write out the instruction.','line_number':159,'multiline':False]['text':' Create a new unconditional branch that will fit.','line_number':164,'multiline':False]['text':' Create a new instruction that will fit.','line_number':169,'multiline':False]['text':' Create a new branch instruction that will fit.','line_number':174,'multiline':False]['text':' Some special cases, for which a wide branch doesn't exist.','line_number':182,'multiline':False]['text':' Insert the complementary conditional branch.','line_number':198,'multiline':False]['text':' Create a new unconditional branch that will fit.','line_number':205,'multiline':False]['text':' Insert the complementary conditional branch.','line_number':212,'multiline':False]['text':' Create a new unconditional branch that will fit.','line_number':219,'multiline':False]['text':' Write out a dummy branch instruction for now.','line_number':231,'multiline':False]['text':' Try to write out the instruction.','line_number':240,'multiline':False]['text':' Switch instructions should always fit.','line_number':241,'multiline':False]['text':' Implementations for AttributeVisitor.','line_number':246,'multiline':False]['text':' Avoid doing any work if nothing is changing anyway.','line_number':250,'multiline':False]['text':' Apply the collected expansions.','line_number':258,'multiline':False]['text':' Don't keep the editor around. We're assuming it won't be needed','line_number':261,'multiline':False]['text':' very often, so we don't want to be resetting it all the time.','line_number':262,'multiline':False]['text':' Small utility methods.','line_number':268,'multiline':False]['text':'*
     * Remembers to place the given instruction right before the instruction
     * at the given offset.
     ','line_number':270,'multiline':True]['text':' Replace the instruction.','line_number':278,'multiline':False]['text':'*
     * Remembers to replace the instruction at the given offset by the given
     * instruction.
     ','line_number':283,'multiline':True]['text':' Replace the instruction.','line_number':291,'multiline':False]['text':'*
     * Remembers to place the given instruction right after the instruction
     * at the given offset.
     ','line_number':296,'multiline':True]['text':' Replace the instruction.','line_number':304,'multiline':False]['text':'*
     * Makes sure there is a code attribute editor for the given code attribute.
     ','line_number':309,'multiline':True]