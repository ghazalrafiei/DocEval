['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor simplifies the code attributes that it visits, based
 * on partial evaluation.
 *
 * @author Eric Lafortune
 ','line_number':37,'multiline':True]['text':'*','line_number':51,'multiline':False]['text':'/
    private static boolean DEBUG = System.getProperty("es") != null;
    //','line_number':53,'multiline':True]['text':'*
     * Creates a new EvaluationSimplifier.
     ','line_number':64,'multiline':True]['text':'*
     * Creates a new EvaluationSimplifier.
     * @param partialEvaluator        the partial evaluator that will
     *                                execute the code and provide
     *                                information about the results.
     * @param extraInstructionVisitor an optional extra visitor for all
     *                                simplified instructions.
     ','line_number':73,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':89,'multiline':False]['text':'        DEBUG =','line_number':97,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':98,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':99,'multiline':False]['text':' TODO: Remove this when the evaluation simplifier has stabilized.','line_number':101,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':102,'multiline':False]['text':' Process the code.','line_number':105,'multiline':False]['text':' Evaluate the method.','line_number':134,'multiline':False]['text':' Reset the code changes.','line_number':139,'multiline':False]['text':' Replace any instructions that can be simplified.','line_number':142,'multiline':False]['text':' Apply all accumulated changes to the code.','line_number':154,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':159,'multiline':False]['text':' In case we detected a certain division by zero, and OPTIMIZE.CONSERVATIVELY','line_number':177,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':178,'multiline':False]['text':' In case we detected a certain division by zero, and OPTIMIZE.CONSERVATIVELY','line_number':195,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':196,'multiline':False]['text':' In case we detected a certain division by zero, and OPTIMIZE.CONSERVATIVELY','line_number':213,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':214,'multiline':False]['text':' In case we detected a certain division by zero, and OPTIMIZE.CONSERVATIVELY','line_number':231,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':232,'multiline':False]['text':' In case we detected a certain access to a null array, and OPTIMIZE.CONSERVATIVELY','line_number':252,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':253,'multiline':False]['text':' In case we detected a certain access to a null array, and OPTIMIZE.CONSERVATIVELY','line_number':295,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':296,'multiline':False]['text':' In case we detected a certain access to a null array, and OPTIMIZE.CONSERVATIVELY','line_number':335,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':336,'multiline':False]['text':' In case we detected a certain access to a null array, and OPTIMIZE.CONSERVATIVELY','line_number':369,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':370,'multiline':False]['text':' In case we detected a certain access to a null array, and OPTIMIZE.CONSERVATIVELY','line_number':403,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':404,'multiline':False]['text':' In case we detected a certain access to a null array, and OPTIMIZE.CONSERVATIVELY','line_number':420,'multiline':False]['text':' is enabled, replace the instruction by the explicit exception.','line_number':421,'multiline':False]['text':' In case a method is invoked on a null reference','line_number':500,'multiline':False]['text':' replace the instruction with an explicit NullPointerException.','line_number':501,'multiline':False]['text':' This is mainly needed to counter obfuscated code that might','line_number':502,'multiline':False]['text':' use exceptions to change the control flow. This is especially','line_number':503,'multiline':False]['text':' problematic if it happens with methods that are explicitly marked','line_number':504,'multiline':False]['text':' as having no side-effect (e.g. String#length()) as they might get','line_number':505,'multiline':False]['text':' removed otherwise.','line_number':506,'multiline':False]['text':' intended fallthrough','line_number':510,'multiline':False]['text':' Don't replace unconditional branches.','line_number':540,'multiline':False]['text':' First try to simplify it to a simple branch.','line_number':557,'multiline':False]['text':' Otherwise try to simplify simple enum switches.','line_number':560,'multiline':False]['text':' Otherwise make sure all branch targets are valid.','line_number':568,'multiline':False]['text':' First try to simplify it to a simple branch.','line_number':581,'multiline':False]['text':' Otherwise try to simplify simple enum switches.','line_number':584,'multiline':False]['text':' Otherwise make sure all branch targets are valid.','line_number':592,'multiline':False]['text':' Small utility methods.','line_number':603,'multiline':False]['text':'*
     * Replaces the push instruction at the given offset by a simpler push
     * instruction, if possible.
     ','line_number':605,'multiline':True]['text':'*
     * Replaces the integer pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':638,'multiline':True]['text':'*
     * Replaces the integer pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':653,'multiline':True]['text':' Push a constant instead.','line_number':665,'multiline':False]['text':' Load an equivalent lower-numbered variable instead, if any.','line_number':689,'multiline':False]['text':'*
     * Replaces the long pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':707,'multiline':True]['text':'*
     * Replaces the long pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':722,'multiline':True]['text':' Push a constant instead.','line_number':734,'multiline':False]['text':' Load an equivalent lower-numbered variable instead, if any.','line_number':759,'multiline':False]['text':' Note that we have to check the second part as well.','line_number':763,'multiline':False]['text':'*
     * Replaces the float pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':779,'multiline':True]['text':'*
     * Replaces the float pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':794,'multiline':True]['text':' Push a constant instead.','line_number':806,'multiline':False]['text':' Make sure to distinguish between +0.0 and -0.0.','line_number':807,'multiline':False]['text':' Load an equivalent lower-numbered variable instead, if any.','line_number':833,'multiline':False]['text':'*
     * Replaces the double pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':850,'multiline':True]['text':'*
     * Replaces the double pushing instruction at the given offset by a simpler
     * push instruction, if possible.
     ','line_number':865,'multiline':True]['text':' Push a constant instead.','line_number':877,'multiline':False]['text':' Make sure to distinguish between +0.0 and -0.0.','line_number':878,'multiline':False]['text':' Load an equivalent lower-numbered variable instead, if any.','line_number':903,'multiline':False]['text':' Note that we have to check the second part as well.','line_number':907,'multiline':False]['text':'*
     * Replaces the reference pushing instruction at the given offset by a
     * simpler push instruction, if possible.
     ','line_number':923,'multiline':True]['text':' A reference value can only be specific if it is null.','line_number':934,'multiline':False]['text':'*
     * Replaces the instruction at a given offset by a given push instruction
     * of a constant.
     ','line_number':944,'multiline':True]['text':'*
     * Replaces the instruction at a given offset by a given push instruction
     * of a variable.
     ','line_number':961,'multiline':True]['text':'*
     * Replaces the given 'jsr' instruction by a simpler branch instruction,
     * if it jumps to a subroutine that doesn't return or a subroutine that
     * is only called from one place.
     ','line_number':978,'multiline':True]['text':' Is the subroutine ever returning?','line_number':987,'multiline':False]['text':' All 'jsr' instructions to this subroutine can be replaced','line_number':992,'multiline':False]['text':' by unconditional branch instructions.','line_number':993,'multiline':False]['text':' We have to make sure the instruction after this 'jsr'','line_number':998,'multiline':False]['text':' instruction is valid, even if it is never reached.','line_number':999,'multiline':False]['text':'*
     * Deletes the reference popping instruction at the given offset, if
     * it is at the start of a subroutine that doesn't return or a subroutine
     * that is only called from one place.
     ','line_number':1005,'multiline':True]['text':' A reference value can only be specific if it is null.','line_number':1020,'multiline':False]['text':'*
     * Deletes the given branch instruction, or replaces it by a simpler branch
     * instruction, if possible.
     ','line_number':1026,'multiline':True]['text':' Is there exactly one branch target (not from a goto or jsr)?','line_number':1036,'multiline':False]['text':' Is it branching to the next instruction?','line_number':1040,'multiline':False]['text':' Replace the branch instruction by a simple branch instruction.','line_number':1048,'multiline':False]['text':'*
     * Replaces the given table switch instruction, if it is based on the value
     * of a fixed array. This is typical for switches on simple enums.
     ','line_number':1059,'multiline':True]['text':' Check if the switch instruction is consuming a single value loaded','line_number':1068,'multiline':False]['text':' from a fully specified array.','line_number':1069,'multiline':False]['text':' Simplify the entire construct.','line_number':1085,'multiline':False]['text':'*
     * Replaces the given table switch instruction that is based on a value of
     * the given fixed array.
     ','line_number':1098,'multiline':True]['text':' Transform the jump offsets.','line_number':1111,'multiline':False]['text':' Update the instruction.','line_number':1128,'multiline':False]['text':' Replace the original one with the new version.','line_number':1133,'multiline':False]['text':'*
     * Replaces the given look up switch instruction, if it is based on the
     * value of a fixed array. This is typical for switches on simple enums.
     ','line_number':1145,'multiline':True]['text':' Check if the switch instruction is consuming a single value loaded','line_number':1154,'multiline':False]['text':' from a fully specified array.','line_number':1155,'multiline':False]['text':' Simplify the entire construct.','line_number':1171,'multiline':False]['text':'*
     * Replaces the given look up switch instruction that is based on a value of
     * the given fixed array. This is typical for switches on simple enums.
     ','line_number':1184,'multiline':True]['text':' Transform the jump offsets.','line_number':1197,'multiline':False]['text':' Replace the original lookup switch with a table switch.','line_number':1215,'multiline':False]['text':'*
     * Makes sure all branch targets of the given switch instruction are valid.
     ','line_number':1234,'multiline':True]['text':' Get the actual branch targets.','line_number':1241,'multiline':False]['text':' Get an offset that can serve as a valid default offset.','line_number':1244,'multiline':False]['text':' Check the jump offsets.','line_number':1251,'multiline':False]['text':' Replace the unused offset.','line_number':1257,'multiline':False]['text':' Remember to replace the instruction.','line_number':1260,'multiline':False]['text':' Check the default offset.','line_number':1265,'multiline':False]['text':' Replace the unused offset.','line_number':1268,'multiline':False]['text':' Remember to replace the instruction.','line_number':1271,'multiline':False]['text':'*
     * Trims redundant offsets from the given switch instruction.
     ','line_number':1282,'multiline':True]['text':' Get an offset that can serve as a valid default offset.','line_number':1289,'multiline':False]['text':' Find the lowest index with a non-default jump offset.','line_number':1294,'multiline':False]['text':' Find the highest index with a non-default jump offset.','line_number':1302,'multiline':False]['text':' Can we use a shorter array?','line_number':1310,'multiline':False]['text':' Replace the switch instruction by a simple branch instruction.','line_number':1316,'multiline':False]['text':' Trim the array.','line_number':1326,'multiline':False]['text':'*
     * Trims redundant offsets from the given switch instruction.
     ','line_number':1342,'multiline':True]['text':' Get an offset that can serve as a valid default offset.','line_number':1349,'multiline':False]['text':' Count the default jump offsets.','line_number':1355,'multiline':False]['text':' Can we use shorter arrays?','line_number':1364,'multiline':False]['text':' Replace the switch instruction by a simple branch instruction.','line_number':1369,'multiline':False]['text':' Remove redundant entries from the arrays.','line_number':1379,'multiline':False]['text':'*
     * Checks whether if the current top value on the stack is a divisor
     * leading to a certain division by zero for the given computation type.
     ','line_number':1405,'multiline':True]['text':'*
     * Checks whether the value at the given stack entry index is always a null reference.
     ','line_number':1441,'multiline':True]['text':'*
     * Replaces the given instruction by an explicit exception.
     ','line_number':1455,'multiline':True]['text':' Replace the instruction by an infinite loop.','line_number':1466,'multiline':False]['text':' Visit the instruction, if required.','line_number':1481,'multiline':False]['text':' Note: we're not passing the right arguments for now, knowing that','line_number':1484,'multiline':False]['text':' they aren't used anyway.','line_number':1485,'multiline':False]['text':'*
     * Replaces the given instruction by an infinite loop.
     ','line_number':1495,'multiline':True]['text':' Replace the instruction by an infinite loop.','line_number':1502,'multiline':False]['text':' Visit the instruction, if required.','line_number':1510,'multiline':False]['text':' Note: we're not passing the right arguments for now, knowing that','line_number':1513,'multiline':False]['text':' they aren't used anyway.','line_number':1514,'multiline':False]['text':'*
     * Replaces the instruction at a given offset by a given push instruction.
     ','line_number':1524,'multiline':True]['text':' Pop unneeded stack entries if necessary.','line_number':1532,'multiline':False]['text':' Visit the instruction, if required.','line_number':1543,'multiline':False]['text':' Note: we're not passing the right arguments for now, knowing that','line_number':1546,'multiline':False]['text':' they aren't used anyway.','line_number':1547,'multiline':False]['text':'*
     * Pops the given number of stack entries before the instruction at the
     * given offset.
     ','line_number':1553,'multiline':True]['text':' Insert a single pop instruction.','line_number':1567,'multiline':False]['text':' Insert a single pop2 instruction.','line_number':1577,'multiline':False]['text':' Insert the specified number of pop instructions.','line_number':1587,'multiline':False]['text':'*
     * Replaces the simple enum switch instructions at a given offsets by a
     * given replacement instruction.
     ','line_number':1615,'multiline':True]['text':' Remove the array load instruction.','line_number':1626,'multiline':False]['text':' Replace the switch instruction.','line_number':1633,'multiline':False]['text':' Visit the instruction, if required.','line_number':1636,'multiline':False]['text':' Note: we're not passing the right arguments for now, knowing that','line_number':1639,'multiline':False]['text':' they aren't used anyway.','line_number':1640,'multiline':False]