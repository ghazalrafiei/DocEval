['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ClassVisitor inlines the classes that it visits in a given target class,
 * whenever possible.
 *
 * @see RetargetedInnerClassAttributeRemover
 * @see TargetClassChanger
 * @see ClassReferenceFixer
 * @see MemberReferenceFixer
 * @see AccessFixer
 * @author Eric Lafortune
 ','line_number':35,'multiline':True]['text':'*','line_number':51,'multiline':False]['text':'/
    private static       boolean DEBUG   = System.getProperty("cm") != null;
    private static       boolean DETAILS = System.getProperty("cmd") != null;
    //','line_number':54,'multiline':True]['text':'*
     * Creates a new ClassMerger that will merge classes into the given target
     * class.
     * @param targetClass                 the class into which all visited
     *                                    classes will be merged.
     * @param allowAccessModification     specifies whether the access modifiers
     *                                    of classes can be changed in order to
     *                                    merge them.
     * @param mergeInterfacesAggressively specifies whether interfaces may
     *                                    be merged aggressively.
     ','line_number':69,'multiline':True]['text':'*
     * Creates a new ClassMerger that will merge classes into the given target
     * class.
     * @param targetClass                 the class into which all visited
     *                                    classes will be merged.
     * @param allowAccessModification     specifies whether the access modifiers
     *                                    of classes can be changed in order to
     *                                    merge them.
     * @param mergeInterfacesAggressively specifies whether interfaces may
     *                                    be merged aggressively.
     * @param extraClassVisitor           an optional extra visitor for all
     *                                    merged classes.
     ','line_number':93,'multiline':True]['text':' Implementations for ClassVisitor.','line_number':120,'multiline':False]['text':'final String CLASS_NAME = "abc/Def";','line_number':124,'multiline':False]['text':'DEBUG = programClass.getName().equals(CLASS_NAME) ||','line_number':125,'multiline':False]['text':'        targetClass.getName().equals(CLASS_NAME);','line_number':126,'multiline':False]['text':' TODO: Remove this when the class merger has stabilized.','line_number':128,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':129,'multiline':False]['text':' Don't merge classes that must be preserved.','line_number':155,'multiline':False]['text':' Only merge classes that haven't been retargeted yet.','line_number':159,'multiline':False]['text':' Don't merge annotation classes, with all their reflection and','line_number':163,'multiline':False]['text':' infinite recursion.','line_number':164,'multiline':False]['text':' Only merge classes with equal class versions.','line_number':169,'multiline':False]['text':' Only merge classes if we can change the access permissions, or','line_number':174,'multiline':False]['text':' if they are in the same package, or','line_number':175,'multiline':False]['text':' if they are public and don't contain or invoke package visible','line_number':176,'multiline':False]['text':' class members.','line_number':177,'multiline':False]['text':' Only merge two classes or two interfaces or two abstract classes,','line_number':189,'multiline':False]['text':' or a single implementation into its interface.','line_number':190,'multiline':False]['text':' One class must not implement the other class indirectly.','line_number':204,'multiline':False]['text':' Interfaces must have exactly the same subinterfaces, not','line_number':210,'multiline':False]['text':' counting themselves, to avoid any loops in the interface','line_number':211,'multiline':False]['text':' hierarchy.','line_number':212,'multiline':False]['text':' The two classes must have the same superclasses and interfaces','line_number':219,'multiline':False]['text':' with static initializers.','line_number':220,'multiline':False]['text':' The two classes must have the same superclasses and interfaces','line_number':225,'multiline':False]['text':' that are tested with 'instanceof'.','line_number':226,'multiline':False]['text':' The two classes must have the same superclasses that are caught','line_number':231,'multiline':False]['text':' as exceptions.','line_number':232,'multiline':False]['text':' The two classes must not both be part of a .class construct.','line_number':237,'multiline':False]['text':' The classes must not have clashing fields.','line_number':243,'multiline':False]['text':' The two classes must not introduce any unwanted fields.','line_number':249,'multiline':False]['text':' The two classes must not shadow each others fields.','line_number':256,'multiline':False]['text':' The classes must not have clashing methods.','line_number':263,'multiline':False]['text':' The classes must not introduce abstract methods, unless','line_number':268,'multiline':False]['text':' explicitly allowed.','line_number':269,'multiline':False]['text':' The classes must not override each others concrete methods.','line_number':276,'multiline':False]['text':' The classes must not shadow each others non-private methods.','line_number':282,'multiline':False]['text':' The two classes must not have a signature attribute as type variables','line_number':288,'multiline':False]['text':' and/or parameterized types can not always be merged.','line_number':289,'multiline':False]['text':' The class to be merged into the target class must not have','line_number':295,'multiline':False]['text':' non-copiable attributes (InnerClass, EnclosingMethod),','line_number':296,'multiline':False]['text':' unless it is a synthetic class.','line_number':297,'multiline':False]['text':' We're not actually merging the classes, but only copying the','line_number':302,'multiline':False]['text':' contents from the source class to the target class. We'll','line_number':303,'multiline':False]['text':' then let all other classes point to it. The shrinking step','line_number':304,'multiline':False]['text':' will finally remove the source class.','line_number':305,'multiline':False]['text':'System.out.println("=== Before ===");','line_number':316,'multiline':False]['text':'programClass.accept(new ClassPrinter());','line_number':317,'multiline':False]['text':'targetClass.accept(new ClassPrinter());','line_number':318,'multiline':False]['text':' Combine the access flags.','line_number':321,'multiline':False]['text':' Copy over the superclass, if it's a non-interface class being','line_number':337,'multiline':False]['text':' merged into an interface class.','line_number':338,'multiline':False]['text':' However, we're currently never merging in a way that changes the','line_number':339,'multiline':False]['text':' superclass.','line_number':340,'multiline':False]['text':'if ((programClass.getAccessFlags() & ClassConstants.ACC_INTERFACE) == 0 &&','line_number':341,'multiline':False]['text':'    (targetClass.getAccessFlags()  & ClassConstants.ACC_INTERFACE) != 0)','line_number':342,'multiline':False]['text':'{','line_number':343,'multiline':False]['text':'    targetClass.u2superClass =','line_number':344,'multiline':False]['text':'        new ConstantAdder(targetClass).addConstant(programClass, programClass.u2superClass);','line_number':345,'multiline':False]['text':'}','line_number':346,'multiline':False]['text':' Copy over the interfaces that aren't present yet and that','line_number':348,'multiline':False]['text':' wouldn't cause loops in the class hierarchy.','line_number':349,'multiline':False]['text':' Note that the code shouldn't be iterating over the original','line_number':350,'multiline':False]['text':' list at this point. This is why we only add subclasses in','line_number':351,'multiline':False]['text':' a separate step.','line_number':352,'multiline':False]['text':' Copy over the class members.','line_number':359,'multiline':False]['text':' Copy over the other attributes.','line_number':371,'multiline':False]['text':' Update the optimization information of the target class.','line_number':380,'multiline':False]['text':' Remember to replace the inlined class by the target class.','line_number':384,'multiline':False]['text':'if (DEBUG)','line_number':387,'multiline':False]['text':'{','line_number':388,'multiline':False]['text':'    System.out.println("=== After ====");','line_number':389,'multiline':False]['text':'    targetClass.accept(new ClassPrinter());','line_number':390,'multiline':False]['text':'}','line_number':391,'multiline':False]['text':' Visit the merged class, if required.','line_number':393,'multiline':False]['text':' Ignore attempts to merge with a library class.','line_number':404,'multiline':False]['text':' Small utility methods.','line_number':416,'multiline':False]['text':'*
     * Returns whether a given class is the only subclass of another given class.
     ','line_number':418,'multiline':True]['text':' TODO: The list of subclasses is not up to date.','line_number':424,'multiline':False]['text':'*
     * Returns the set of indirectly implemented interfaces.
     ','line_number':431,'multiline':True]['text':' Visit all superclasses and  collect their interfaces.','line_number':443,'multiline':False]['text':' Visit all interfaces and collect their interfaces.','line_number':446,'multiline':False]['text':'*
     * Returns the set of interface subclasses, not including the given class.
     ','line_number':453,'multiline':True]['text':' Visit all subclasses, collecting the interface classes.','line_number':460,'multiline':False]['text':'*
     * Returns the set of superclasses and interfaces that are initialized.
     ','line_number':470,'multiline':True]['text':' Visit all superclasses and interfaces, collecting the ones that have','line_number':477,'multiline':False]['text':' static initializers.','line_number':478,'multiline':False]['text':'*
     * Returns the set of superclasses and interfaces that are used in
     * 'instanceof' tests.
     ','line_number':487,'multiline':True]['text':' Visit all superclasses and interfaces, collecting the ones that are','line_number':495,'multiline':False]['text':' used in an 'instanceof' test.','line_number':496,'multiline':False]['text':'*
     * Returns the set of superclasses that are caught as exceptions.
     ','line_number':505,'multiline':True]['text':' Don't bother if this isn't an exception at all.','line_number':510,'multiline':False]['text':' Visit all superclasses, collecting the ones that are caught','line_number':516,'multiline':False]['text':' (plus java.lang.Object, in the current implementation).','line_number':517,'multiline':False]['text':'*
     * Returns whether the given class has a Signature attributes containing
     * type variables or parameterized types.
     ','line_number':528,'multiline':True]['text':'*
     * Returns whether the two given classes have fields with the same
     * names and descriptors.
     ','line_number':544,'multiline':True]['text':' Visit all fields, counting the with the same name and descriptor in','line_number':553,'multiline':False]['text':' the target class.','line_number':554,'multiline':False]['text':'*
     * Returns whether the given class would introduce any unwanted fields
     * in the target class.
     ','line_number':562,'multiline':True]['text':' It's ok if the target class is never instantiated and does not','line_number':569,'multiline':False]['text':' have any subclasses except for maybe the source class.','line_number':570,'multiline':False]['text':' Count all non-static fields in the the source class.','line_number':580,'multiline':False]['text':'*
     * Returns whether the given class or its subclasses shadow any fields in
     * the given target class.
     ','line_number':588,'multiline':True]['text':' Visit all fields, counting the ones that are shadowing non-private','line_number':597,'multiline':False]['text':' fields in the class hierarchy of the target class.','line_number':598,'multiline':False]['text':'*
     * Returns whether the two given classes have class members with the same
     * name and descriptor.
     ','line_number':609,'multiline':True]['text':' Visit all non-abstract methods, counting the ones that are also','line_number':618,'multiline':False]['text':' present in the target class.','line_number':619,'multiline':False]['text':'*
     * Returns whether the given class would introduce any abstract methods
     * in the target class.
     ','line_number':629,'multiline':True]['text':' It's ok if the target class is already abstract and does not','line_number':636,'multiline':False]['text':' have any subclasses except for maybe the source class.','line_number':637,'multiline':False]['text':' Collect all abstract methods, and similar abstract methods in the','line_number':650,'multiline':False]['text':' class hierarchy of the target class.','line_number':651,'multiline':False]['text':'*
     * Returns whether the given class overrides any methods in the given
     * target class.
     ','line_number':665,'multiline':True]['text':' It's ok if the target class is never instantiated and does','line_number':672,'multiline':False]['text':' not have any subclasses except for maybe the source class.','line_number':673,'multiline':False]['text':' Visit all non-abstract methods, counting the ones that are','line_number':683,'multiline':False]['text':' overriding methods in the class hierarchy of the target class.','line_number':684,'multiline':False]['text':'*
     * Returns whether the given class or its subclasses have private or
     * static methods that shadow any methods in the given target class.
     ','line_number':695,'multiline':True]['text':' It's ok if the source class already extends the target class','line_number':702,'multiline':False]['text':' or (in practice) vice versa.','line_number':703,'multiline':False]['text':' Visit all methods, counting the ones that are shadowing','line_number':712,'multiline':False]['text':' final methods in the class hierarchy of the target class.','line_number':713,'multiline':False]['text':' Visit all private methods, counting the ones that are shadowing','line_number':725,'multiline':False]['text':' non-private methods in the class hierarchy of the target class.','line_number':726,'multiline':False]['text':' Visit all static methods, counting the ones that are shadowing','line_number':739,'multiline':False]['text':' non-private methods in the class hierarchy of the target class.','line_number':740,'multiline':False]['text':'*
     * Returns whether the given class has any attributes that can not be copied when
     * merging it into another class.
     ','line_number':753,'multiline':True]['text':' Copy over the other attributes.','line_number':761,'multiline':False]['text':' Return the last target class, if any.','line_number':782,'multiline':False]['text':'*
     * This MemberVisitor copies field optimization info from copied fields.
     ','line_number':796,'multiline':True]['text':' Copy the optimization info from the field that was just copied.','line_number':805,'multiline':False]['text':' Linked methods share their optimization info.','line_number':817,'multiline':False]