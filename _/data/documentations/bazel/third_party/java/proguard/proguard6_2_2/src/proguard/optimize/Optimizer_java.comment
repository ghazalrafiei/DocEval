['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This class optimizes class pools according to a given configuration.
 *
 * @author Eric Lafortune
 ','line_number':41,'multiline':True]['text':'*
     * Creates a new Optimizer.
     ','line_number':161,'multiline':True]['text':' Create a matcher for filtering optimizations.','line_number':168,'multiline':False]['text':' Some optimizations are required by other optimizations.','line_number':208,'multiline':False]['text':'*
     * Performs optimization of the given program class pool.
     ','line_number':242,'multiline':True]['text':' Check if we have at least some keep commands.','line_number':249,'multiline':False]['text':' Create counters to count the numbers of optimizations.','line_number':257,'multiline':False]['text':' Clean up any old visitor info.','line_number':296,'multiline':False]['text':' Link all methods that should get the same optimization info.','line_number':300,'multiline':False]['text':' Create a visitor for marking the seeds.','line_number':306,'multiline':False]['text':' Mark the seeds.','line_number':315,'multiline':False]['text':' All library classes and library class members remain unchanged.','line_number':319,'multiline':False]['text':' We also keep all classes that are involved in .class constructs.','line_number':323,'multiline':False]['text':' We're not looking at enum classes though, so they can be simplified.','line_number':324,'multiline':False]['text':' We also keep all classes that are accessed dynamically.','line_number':332,'multiline':False]['text':' We also keep all class members that are accessed dynamically.','line_number':338,'multiline':False]['text':' We also keep all bootstrap method signatures.','line_number':344,'multiline':False]['text':' We also keep classes and methods referenced from bootstrap','line_number':354,'multiline':False]['text':' method arguments.','line_number':355,'multiline':False]['text':' Class constants refer to additional functional','line_number':363,'multiline':False]['text':' interfaces (with LambdaMetafactory.altMetafactory).','line_number':364,'multiline':False]['text':' Method handle constants refer to synthetic lambda','line_number':376,'multiline':False]['text':' methods (with LambdaMetafactory.metafactory and','line_number':377,'multiline':False]['text':' altMetafactory).','line_number':378,'multiline':False]['text':' We also keep the classes and abstract methods of functional','line_number':382,'multiline':False]['text':' interfaces that are returned by dynamic method invocations.','line_number':383,'multiline':False]['text':' These functional interfaces have to remain suitable for the','line_number':384,'multiline':False]['text':' dynamic method invocations with LambdaMetafactory.','line_number':385,'multiline':False]['text':' Attach some optimization info to all classes and class members, so','line_number':399,'multiline':False]['text':' it can be filled out later.','line_number':400,'multiline':False]['text':' Create a visitor for marking classes and methods that don't have','line_number':408,'multiline':False]['text':' any side effects.','line_number':409,'multiline':False]['text':' Mark the seeds.','line_number':418,'multiline':False]['text':' Create a visitor for marking classes and methods that don't have','line_number':425,'multiline':False]['text':' any external side effects.','line_number':426,'multiline':False]['text':' Mark the seeds.','line_number':435,'multiline':False]['text':' Create a visitor for marking methods that don't let any','line_number':442,'multiline':False]['text':' reference parameters escape.','line_number':443,'multiline':False]['text':' Mark the seeds.','line_number':451,'multiline':False]['text':' Create a visitor for marking methods that don't let any','line_number':458,'multiline':False]['text':' reference parameters escape.','line_number':459,'multiline':False]['text':' Mark the seeds.','line_number':467,'multiline':False]['text':' Make classes final, whereever possible.','line_number':474,'multiline':False]['text':' Make methods final, whereever possible.','line_number':481,'multiline':False]['text':' Give initial marks to read/written fields. side-effect methods, and','line_number':488,'multiline':False]['text':' escaping parameters.','line_number':489,'multiline':False]['text':' Mark fields that are read or written. The written flag is','line_number':494,'multiline':False]['text':' currently only needed for the write-only counter later on.','line_number':495,'multiline':False]['text':' Mark all fields as read and written.','line_number':504,'multiline':False]['text':' Mark methods based on their headers.','line_number':510,'multiline':False]['text':' Now repeatedly loop over all classes to mark read/written fields.','line_number':519,'multiline':False]['text':' side-effect methods, and escaping parameters. Marked elements like','line_number':520,'multiline':False]['text':' write-only fields or side-effect methods can each time affect the','line_number':521,'multiline':False]['text':' subsequent analysis, such as instructions that are used. We'll loop','line_number':522,'multiline':False]['text':' until the markers no longer trigger the repeat flag, meaning that','line_number':523,'multiline':False]['text':' all marks have converged.','line_number':524,'multiline':False]['text':'','line_number':525,'multiline':False]['text':' We'll mark classes in parallel threads, but with a shared repeat','line_number':526,'multiline':False]['text':' trigger.','line_number':527,'multiline':False]['text':' Create the various markers.','line_number':548,'multiline':False]['text':' They will be used as code attribute visitors and','line_number':549,'multiline':False]['text':' instruction visitors this time.','line_number':550,'multiline':False]['text':' We're currently marking read and written fields once,','line_number':551,'multiline':False]['text':' outside of these iterations, for better performance,','line_number':552,'multiline':False]['text':' at the cost of some effectiveness (test2209).','line_number':553,'multiline':False]['text':'ReadWriteFieldMarker readWriteFieldMarker =','line_number':554,'multiline':False]['text':'    new ReadWriteFieldMarker(repeatTrigger);','line_number':555,'multiline':False]['text':' Methods with editable optimization info.','line_number':564,'multiline':False]['text':' All read / write field instruction are already marked','line_number':574,'multiline':False]['text':' for all code (see above), there is no need to mark them again.','line_number':575,'multiline':False]['text':' If unused code is removed that accesses fields, the','line_number':576,'multiline':False]['text':' respective field will be removed in the next iteration.','line_number':577,'multiline':False]['text':' This is a trade-off between performance and correctness.','line_number':578,'multiline':False]['text':' TODO: improve the marking for read / write fields after','line_number':579,'multiline':False]['text':'       performance improvements have been implemented.','line_number':580,'multiline':False]['text':'readWriteFieldMarker,','line_number':581,'multiline':False]['text':' TODO: disabled for now, see comment above.','line_number':586,'multiline':False]['text':' Methods without editable optimization info, for','line_number':587,'multiline':False]['text':' which we can't mark side-effects or escaping','line_number':588,'multiline':False]['text':' parameters, so we can save some effort.','line_number':589,'multiline':False]['text':'new AllAttributeVisitor(','line_number':590,'multiline':False]['text':'new DebugAttributeVisitor("Marking fields",','line_number':591,'multiline':False]['text':'new MultiAttributeVisitor(','line_number':592,'multiline':False]['text':'    partialEvaluator,','line_number':593,'multiline':False]['text':'    instructionUsageMarker,','line_number':594,'multiline':False]['text':'    new AllInstructionVisitor(','line_number':595,'multiline':False]['text':'    instructionUsageMarker.necessaryInstructionFilter(','line_number':596,'multiline':False]['text':'    readWriteFieldMarker)))))','line_number':597,'multiline':False]['text':' Mark all superclasses of escaping (kept) classes.','line_number':604,'multiline':False]['text':' Mark classes that escape to the heap.','line_number':622,'multiline':False]['text':' Desynchronize all non-static methods whose classes don't escape.','line_number':628,'multiline':False]['text':' Count the write-only fields.','line_number':642,'multiline':False]['text':' Mark all final enums that qualify as simple enums.','line_number':652,'multiline':False]['text':' Count the preliminary number of simple enums.','line_number':659,'multiline':False]['text':' Only continue checking simple enums if there are any candidates.','line_number':663,'multiline':False]['text':' Unmark all simple enums that are explicitly used as objects.','line_number':666,'multiline':False]['text':' Unmark all simple enums that are used in descriptors of','line_number':670,'multiline':False]['text':' kept class members. Changing their names could upset','line_number':671,'multiline':False]['text':' the name parameters of invokedynamic instructions.','line_number':672,'multiline':False]['text':' Count the definitive number of simple enums.','line_number':681,'multiline':False]['text':' Only start handling simple enums if there are any.','line_number':685,'multiline':False]['text':' Simplify the use of the enum classes in code.','line_number':688,'multiline':False]['text':' Simplify the static initializers of simple enum classes.','line_number':695,'multiline':False]['text':' Simplify the use of the enum classes in descriptors.','line_number':700,'multiline':False]['text':' Update references to class members with simple enum classes.','line_number':704,'multiline':False]['text':' Mark all used parameters, including the 'this' parameters.','line_number':710,'multiline':False]['text':' Mark all parameters of referenced methods in methods whose code must','line_number':729,'multiline':False]['text':' be kept. This prevents shrinking of method descriptors which may not','line_number':730,'multiline':False]['text':' be propagated correctly otherwise.','line_number':731,'multiline':False]['text':' visit all methods that are kept','line_number':739,'multiline':False]['text':' visit all code attributes that are kept','line_number':744,'multiline':False]['text':' Mark all parameters including "this" of referenced methods','line_number':751,'multiline':False]['text':'        System.out.println("Optimizer.execute: before evaluation simplification");','line_number':755,'multiline':False]['text':'        programClassPool.classAccept("abc/Def", new NamedMethodVisitor("abc", null, new ClassPrinter()));','line_number':756,'multiline':False]['text':' Perform partial evaluation for filling out fields, method parameters,','line_number':758,'multiline':False]['text':' and method return values, so they can be propagated.','line_number':759,'multiline':False]['text':' We'll create values to be stored with fields, method parameters,','line_number':765,'multiline':False]['text':' and return values.','line_number':766,'multiline':False]['text':' Evaluate synthetic classes in more detail, notably to propagate','line_number':776,'multiline':False]['text':' the arrays of the classes generated for enum switch statements.','line_number':777,'multiline':False]['text':' Evaluate non-synthetic classes. We may need to evaluate all','line_number':785,'multiline':False]['text':' casts, to account for downcasts when specializing descriptors.','line_number':786,'multiline':False]['text':' Create a visitor for setting assumed values.','line_number':818,'multiline':False]['text':' Set the assumed values.','line_number':825,'multiline':False]['text':' Count the constant fields.','line_number':832,'multiline':False]['text':' Count the constant method parameters.','line_number':840,'multiline':False]['text':' Count the constant method return values.','line_number':848,'multiline':False]['text':' Propagate the simple enum constant counts.','line_number':856,'multiline':False]['text':' Fill out constants into the arrays of synthetic classes,','line_number':864,'multiline':False]['text':' notably the arrays of the classes generated for enum switch','line_number':865,'multiline':False]['text':' statements.','line_number':866,'multiline':False]['text':' Perform partial evaluation again, now loading any previously stored','line_number':888,'multiline':False]['text':' values for fields, method parameters, and method return values.','line_number':889,'multiline':False]['text':' Simplify based on partial evaluation, propagating constant','line_number':909,'multiline':False]['text':' field values, method parameter values, and return values.','line_number':910,'multiline':False]['text':' Perform partial evaluation again, now loading any previously stored','line_number':924,'multiline':False]['text':' values for fields, method parameters, and method return values.','line_number':925,'multiline':False]['text':' Trace the construction of reference values.','line_number':934,'multiline':False]['text':' Remove code based on partial evaluation, also removing unused','line_number':953,'multiline':False]['text':' parameters from method invocations, and making methods static','line_number':954,'multiline':False]['text':' if possible.','line_number':955,'multiline':False]['text':' Shrink the parameters in the method descriptors.','line_number':964,'multiline':False]['text':' Make all non-static methods that don't require the 'this'','line_number':974,'multiline':False]['text':' parameter static.','line_number':975,'multiline':False]['text':' Fix all references to class members.','line_number':985,'multiline':False]['text':' This operation also updates the stack sizes.','line_number':986,'multiline':False]['text':' Remove unused bootstrap method arguments.','line_number':989,'multiline':False]['text':' Methods are only marked private later on.','line_number':998,'multiline':False]['text':'methodMarkingPrivateCounter   .getCount() > 0 ||','line_number':999,'multiline':False]['text':' Remove all unused parameters from the corresponding byte code,','line_number':1002,'multiline':False]['text':' shifting all remaining variables.','line_number':1003,'multiline':False]['text':' This operation also updates the local variable frame sizes.','line_number':1004,'multiline':False]['text':' Remove all unused parameters in the optimization info.','line_number':1011,'multiline':False]['text':' Just update the local variable frame sizes.','line_number':1020,'multiline':False]['text':' Tweak the descriptors of duplicate initializers, due to removed','line_number':1031,'multiline':False]['text':' method parameters.','line_number':1032,'multiline':False]['text':' Fix all invocations of tweaked initializers.','line_number':1039,'multiline':False]['text':' Fix all references to tweaked initializers.','line_number':1045,'multiline':False]['text':' Mark all classes with package visible members.','line_number':1050,'multiline':False]['text':' Mark all exception catches of methods.','line_number':1051,'multiline':False]['text':' Count all method invocations.','line_number':1052,'multiline':False]['text':' Mark super invocations and other access of methods.','line_number':1053,'multiline':False]['text':' Mark classes.','line_number':1059,'multiline':False]['text':' Mark methods.','line_number':1069,'multiline':False]['text':' Mark referenced classes and methods.','line_number':1090,'multiline':False]['text':' Merge wrapper classes into their wrapped classes.','line_number':1113,'multiline':False]['text':' Exclude injected classes - they might not end up in the output.','line_number':1116,'multiline':False]['text':' Fix all uses of wrapper classes.','line_number':1122,'multiline':False]['text':' Merge subclasses up into their superclasses or','line_number':1133,'multiline':False]['text':' merge interfaces down into their implementing classes.','line_number':1134,'multiline':False]['text':' Exclude injected classes - they might not end up in the output.','line_number':1137,'multiline':False]['text':' Merge classes into their sibling classes.','line_number':1145,'multiline':False]['text':' Exclude injected classes - they might not end up in the output.','line_number':1148,'multiline':False]['text':' Clean up inner class attributes to avoid loops.','line_number':1161,'multiline':False]['text':' Update references to merged classes: first the referenced','line_number':1164,'multiline':False]['text':' classes, then the various actual descriptors.','line_number':1165,'multiline':False]['text':' Leave retargeted classes themselves unchanged and valid,','line_number':1166,'multiline':False]['text':' in case they aren't shrunk later on.','line_number':1167,'multiline':False]['text':' Fix the access flags of referenced merged classes and their','line_number':1174,'multiline':False]['text':' class members.','line_number':1175,'multiline':False]['text':' Fix the access flags of the inner classes information.','line_number':1179,'multiline':False]['text':' DGD-63: don't change the access flags of inner classes','line_number':1180,'multiline':False]['text':' that have not been renamed (Guice).','line_number':1181,'multiline':False]['text':' Tweak the descriptors of duplicate initializers, due to merged','line_number':1188,'multiline':False]['text':' parameter classes.','line_number':1189,'multiline':False]['text':' Fix all invocations of tweaked initializers.','line_number':1196,'multiline':False]['text':' Fix all references to tweaked initializers.','line_number':1202,'multiline':False]['text':' Inline methods that are only invoked once.','line_number':1209,'multiline':False]['text':' Inline short methods.','line_number':1225,'multiline':False]['text':' Simplify tail recursion calls.','line_number':1241,'multiline':False]['text':' Mark all class members that can not be made private.','line_number':1254,'multiline':False]['text':' Make all non-private fields private, whereever possible.','line_number':1260,'multiline':False]['text':' Make all non-private methods private, whereever possible.','line_number':1270,'multiline':False]['text':' Fix the access flags of referenced classes and class members,','line_number':1283,'multiline':False]['text':' for MethodInliner.','line_number':1284,'multiline':False]['text':' Fix invocations of interface methods, or methods that have become','line_number':1298,'multiline':False]['text':' non-abstract or private, and of methods that have moved to a','line_number':1299,'multiline':False]['text':' different package.','line_number':1300,'multiline':False]['text':' Share common blocks of code at branches.','line_number':1309,'multiline':False]['text':' Create a branch target marker and a code attribute editor that can','line_number':1326,'multiline':False]['text':' be reused for all code attributes.','line_number':1327,'multiline':False]['text':' Convert the list into an array.','line_number':1348,'multiline':False]['text':' Perform the peephole optimisations.','line_number':1364,'multiline':False]['text':' Remove unnecessary exception handlers.','line_number':1373,'multiline':False]['text':' Remove unreachable code.','line_number':1385,'multiline':False]['text':' Remove all unused local variables.','line_number':1397,'multiline':False]['text':' Optimize the variables.','line_number':1423,'multiline':False]['text':' Remove unused constants.','line_number':1430,'multiline':False]['text':' Forget about constant fields, parameters, and return values, if they','line_number':1470,'multiline':False]['text':' didn't lead to any useful optimizations. We want to avoid fruitless','line_number':1471,'multiline':False]['text':' additional optimization passes.','line_number':1472,'multiline':False]['text':' TODO: The write-only field counter may be optimistic about removal.','line_number':1524,'multiline':False]['text':' Peephole optimizations involving local variables.','line_number':1572,'multiline':False]['text':' Peephole optimizations involving arithmetic operations.','line_number':1581,'multiline':False]['text':' Peephole optimizations involving cast operations.','line_number':1590,'multiline':False]['text':' Peephole optimizations involving fields.','line_number':1599,'multiline':False]['text':' Peephole optimizations involving branches.','line_number':1608,'multiline':False]['text':' Include optimization of branches to branches and returns.','line_number':1614,'multiline':False]['text':' Peephole optimizations involving branches.','line_number':1623,'multiline':False]['text':' Peephole optimizations involving branches.','line_number':1632,'multiline':False]['text':' Peephole optimizations involving math.','line_number':1641,'multiline':False]['text':'*
     * Returns a String indicating whether the given flag is enabled or
     * disabled.
     ','line_number':1660,'multiline':True]['text':'*
     * Returns a String indicating whether the given flags are enabled or
     * disabled.
     ','line_number':1670,'multiline':True]['text':'*
     * A simple class pool visitor that will output timing information.
     ','line_number':1682,'multiline':True]['text':' Implementations for ClassPoolVisitor.','line_number':1703,'multiline':False]['text':' Private helper methods','line_number':1726,'multiline':False]