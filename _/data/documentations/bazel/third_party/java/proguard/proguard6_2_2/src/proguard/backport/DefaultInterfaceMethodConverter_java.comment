['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ClassVisitor moves all default interface methods in the visited
 * interfaces to concrete implementations.
 *
 * @author Thomas Neidhart
 ','line_number':39,'multiline':True]['text':' Implementation interfaces.','line_number':49,'multiline':False]['text':' Fields acting as parameters and return values for the visitor methods.','line_number':55,'multiline':False]['text':' Implementations for ClassVisitor.','line_number':69,'multiline':False]['text':' Collect all implementations of the interface.','line_number':81,'multiline':False]['text':' Ignore other interfaces that extend this one.','line_number':84,'multiline':False]['text':' Shrink the constant pool of unused constants.','line_number':95,'multiline':False]['text':' Implementations for AttributeVisitor.','line_number':101,'multiline':False]['text':' Add the default method to the implementing class','line_number':119,'multiline':False]['text':' if necessary.','line_number':120,'multiline':False]['text':' Add the default method as a different method and adapt','line_number':131,'multiline':False]['text':' super invocations to it, if necessary.','line_number':132,'multiline':False]['text':' Remove the code attribute from the method and','line_number':145,'multiline':False]['text':' add make it abstract.','line_number':146,'multiline':False]['text':' Call extra visitor for each visited default method.','line_number':154,'multiline':False]['text':' Small utility methods.','line_number':162,'multiline':False]['text':'*
     * Returns true if any method of the given class
     * calls Interface.super.defaultMethod(...).
     ','line_number':178,'multiline':True]['text':'*
     * Replaces any super calls to the given default interface method
     * in the target class. The default method is copied to the target
     * class and the invoke is updated accordingly.
     ','line_number':210,'multiline':True]['text':' Copy the interface method to the target class, with an updated name.','line_number':219,'multiline':False]['text':' Update invocations of the method inside the target class.','line_number':234,'multiline':False]['text':'*
     * This InstructionVisitor will call the {@code superInvocation(...)} method
     * for any encountered INVOKESPECIAL instruction whose associated
     * constant is an InterfaceMethodRefConstant and matches the given
     * referenced class and method.
     ','line_number':264,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':291,'multiline':False]['text':' Set up the code attribute editor.','line_number':298,'multiline':False]['text':' Find the peephole optimizations.','line_number':301,'multiline':False]['text':' Apply the peephole optimizations.','line_number':304,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':309,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':333,'multiline':False]['text':'*
         * The callback method which will be called for each detected super invocation
         * of the specified interface method.
         ','line_number':350,'multiline':True]