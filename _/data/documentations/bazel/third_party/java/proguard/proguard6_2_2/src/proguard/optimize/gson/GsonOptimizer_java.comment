['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This is the entry point for the GSON optimizations.
 *
 * The optimization roughly performs the following steps:
 *
 * - Find all usages of GSON in the program code: calls to toJson() or fromJson().
 *
 * - Derive the domain classes that are involved in the GSON call, either
 *   directly (passed as argument to GSON) or indirectly (a field or element
 *   type of another domain class).
 *
 * - Inject optimized methods into the domain classes that serialize and
 *   deserialize the fields of the domain class without relying on reflection.
 *
 * - Inject and register GSON type adapters that utilize the optimized
 *   serialization and deserialization methods on the domain classes and bypass
 *   the reflective GSON implementation.
 *
 * As an additional protection measure, the JSON field names are assigned to
 * a field index. The mapping between field indices and field names is done
 * from the classes _OptimizedJsonReaderImpl and _OptimizedJsonWriterImpl, which
 * have String encryption applied to them. This allows injecting serialization
 * and deserialization code into the domain classes that have no JSON field
 * names stored in them as plain text.
 *
 * @author Lars Vandenbergh
 * @author Rob Coekaerts
 ','line_number':42,'multiline':True]['text':' The order of this matters to ensure that the class references are','line_number':74,'multiline':False]['text':' initialized properly.','line_number':75,'multiline':False]['text':'*
     * Performs the Gson optimizations.
     *
     * @param programClassPool     the program class pool on which to perform
     *                             the Gson optimizations.
     * @param libraryClassPool     the library class pool used to look up
     *                             library class references.
     * @param injectedClassNameMap the map to which injected class names are
     *                             added.
     * @param configuration        the DexGuard configuration that is applied.
     * @throws IOException         when the injected template classes can not
     *                             be read.
     ','line_number':88,'multiline':True]['text':' Set all fields of Gson to public.','line_number':106,'multiline':False]['text':' To allow mocking Gson instances in unit tests, we remove the','line_number':114,'multiline':False]['text':' final qualifier from the Gson class.','line_number':115,'multiline':False]['text':' Setup Gson context that represents how Gson is used in program','line_number':120,'multiline':False]['text':' class pool.','line_number':121,'multiline':False]['text':' Is there something to optimize at all?','line_number':130,'multiline':False]['text':' Collect fields that need to be serialized and deserialized.','line_number':134,'multiline':False]['text':' Delete all @SerializedName and @Expose annotations','line_number':153,'multiline':False]['text':' Assign random indices to classes and fields.','line_number':157,'multiline':False]['text':' Inject all serialization and deserialization template classes.','line_number':161,'multiline':False]['text':' Inject serialization and deserialization data structures in','line_number':177,'multiline':False]['text':' _OptimizedJsonReaderImpl and _OptimizedJsonWriterImpl.','line_number':178,'multiline':False]['text':' Inject serialization and deserialization code in domain classes.','line_number':207,'multiline':False]['text':' Inject type adapters for all serialized and deserialized classes.','line_number':227,'multiline':False]['text':' Implement type adapter factory.','line_number':241,'multiline':False]['text':' Add excluder field to Gson class if not present to support','line_number':254,'multiline':False]['text':' @Expose in earlier Gson versions (down to 2.1).','line_number':255,'multiline':False]['text':' Inject code that registers inject type adapter factory for optimized domain classes in Gson constructor.','line_number':281,'multiline':False]['text':' Inject instrumentation code in Gson.toJson() and Gson.fromJson().','line_number':296,'multiline':False]