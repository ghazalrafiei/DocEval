['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor can tell whether reference parameters and instances
 * are escaping, are modified, or are returned.
 *
 * @see ParameterEscapeMarker
 * @author Eric Lafortune
 ','line_number':37,'multiline':True]['text':'*','line_number':50,'multiline':False]['text':'/
    private static       boolean DEBUG = System.getProperty("rec") != null;
    //','line_number':52,'multiline':True]['text':'    private boolean[] exceptionEscaping = new boolean[ClassConstants.TYPICAL_CODE_LENGTH];','line_number':61,'multiline':False]['text':'    private boolean[] exceptionReturned = new boolean[ClassConstants.TYPICAL_CODE_LENGTH];','line_number':62,'multiline':False]['text':'    private boolean[] exceptionModified = new boolean[ClassConstants.TYPICAL_CODE_LENGTH];','line_number':63,'multiline':False]['text':' Parameters and values for visitor methods.','line_number':68,'multiline':False]['text':'*
     * Creates a new ReferenceEscapeChecker.
     ','line_number':74,'multiline':True]['text':'*
     * Creates a new ReferenceEscapeChecker. This private constructor gets around
     * the constraint that it's not allowed to add statements before calling
     * 'this'.
     ','line_number':83,'multiline':True]['text':'*
     * Creates a new ReferenceEscapeChecker.
     * @param partialEvaluator    the evaluator to be used for the analysis.
     * @param runPartialEvaluator specifies whether to run this evaluator on
     *                            every code attribute that is visited.
     ','line_number':98,'multiline':True]['text':'*
     * Returns whether the instance created or retrieved at the specified
     * instruction offset is escaping.
     ','line_number':112,'multiline':True]['text':'*
     * Returns whether the instance created or retrieved at the specified
     * instruction offset is being returned.
     ','line_number':122,'multiline':True]['text':'*
     * Returns whether the instance created or retrieved at the specified
     * instruction offset is being modified.
     ','line_number':132,'multiline':True]['text':'*
     * Returns whether the instance created or retrieved at the specified
     * instruction offset is external to this method and its invoked methods.
     ','line_number':142,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':152,'multiline':False]['text':' Evaluate the method.','line_number':159,'multiline':False]['text':' Initialize the global arrays.','line_number':167,'multiline':False]['text':' Mark the parameters and instances that are escaping from the code.','line_number':173,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':198,'multiline':False]['text':' Mark array reference values whose element is modified.','line_number':208,'multiline':False]['text':' Mark reference values that are put in the array.','line_number':212,'multiline':False]['text':' Mark array reference values whose element is modified.','line_number':223,'multiline':False]['text':' Mark the returned reference values.','line_number':229,'multiline':False]['text':' Mark the escaping reference values.','line_number':234,'multiline':False]['text':' Mark external reference values.','line_number':247,'multiline':False]['text':' Mark reference values that are put in the field.','line_number':252,'multiline':False]['text':' Mark reference reference values whose field is modified.','line_number':257,'multiline':False]['text':' Mark reference values that are put in the field.','line_number':261,'multiline':False]['text':' Mark reference reference values that are modified as parameters','line_number':269,'multiline':False]['text':' of the invoked method.','line_number':270,'multiline':False]['text':' Mark reference values that are escaping as parameters','line_number':271,'multiline':False]['text':' of the invoked method.','line_number':272,'multiline':False]['text':' Mark escaped reference reference values in the invoked method.','line_number':273,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':283,'multiline':False]['text':' Mark reference reference values that are passed to the method.','line_number':298,'multiline':False]['text':' Is the parameter escaping from the referenced method?','line_number':308,'multiline':False]['text':' Is the parameter being modified in the referenced method?','line_number':316,'multiline':False]['text':' Is the return value from the referenced method external?','line_number':326,'multiline':False]['text':' Small utility methods.','line_number':340,'multiline':False]['text':'*
     * Marks the producing offsets of the specified stack entry at the given
     * instruction offset.
     ','line_number':342,'multiline':True]['text':' The null reference value may not have a trace value.','line_number':356,'multiline':False]['text':'*
     * Marks the producing offsets of the given traced reference value.
     ','line_number':365,'multiline':True]['text':'*
     * Marks the producing offsets of the specified stack entry at the given
     * instruction offset.
     ','line_number':384,'multiline':True]['text':' The null reference value may not have a trace value.','line_number':394,'multiline':False]['text':'*
     * Marks the producing offsets of the given traced reference value.
     ','line_number':402,'multiline':True]['text':'*
     * Marks the producing offsets of the specified stack entry at the given
     * instruction offset.
     ','line_number':421,'multiline':True]['text':' The null reference value may not have a trace value.','line_number':431,'multiline':False]['text':'*
     * Marks the producing offsets of the given traced reference value.
     ','line_number':439,'multiline':True]['text':'*
     * Marks the producing offsets of the specified stack entry at the given
     * instruction offset.
     ','line_number':458,'multiline':True]