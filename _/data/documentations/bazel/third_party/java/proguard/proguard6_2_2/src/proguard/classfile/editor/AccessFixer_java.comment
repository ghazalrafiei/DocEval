['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ClassVisitor fixes the access modifiers of all classes and class
 * members that are referenced by the classes that it visits.
 *
 * @author Eric Lafortune
 ','line_number':34,'multiline':True]['text':' Fields acting as parameters for the visitors.','line_number':71,'multiline':False]['text':' Implementations for ClassVisitor.','line_number':78,'multiline':False]['text':' Remember the referencing class.','line_number':85,'multiline':False]['text':' Fix the referenced classes.','line_number':88,'multiline':False]['text':' Fix the referenced class members.','line_number':91,'multiline':False]['text':' Fix the referenced annotation methods.','line_number':94,'multiline':False]['text':' Fix overridden and overriding methods up and down the hierarchy.','line_number':97,'multiline':False]['text':' They are referenced implicitly and need to be accessible too.','line_number':98,'multiline':False]['text':'*
     * This ReferencedMemberVisitor is an InstructionVisitor that also
     * remembers the access flags of the referencing methods, and the
     * referenced class.
     ','line_number':106,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':121,'multiline':False]['text':' Remember the access flags.','line_number':128,'multiline':False]['text':' Fix the referenced classes and class members.','line_number':131,'multiline':False]['text':' Overridden methods for ConstantVisitor.','line_number':136,'multiline':False]['text':' Remember the referenced class. Note that we're interested in the','line_number':140,'multiline':False]['text':' class of the invocation, not in the class in which the member was','line_number':141,'multiline':False]['text':' actually found, unless it is an array type.','line_number':142,'multiline':False]['text':' For an array type, the class will be java.lang.Object.','line_number':145,'multiline':False]['text':' Remember the referenced class.','line_number':150,'multiline':False]['text':' Fix the access flags of referenced class member.','line_number':154,'multiline':False]['text':' Remember the referenced class.','line_number':161,'multiline':False]['text':' Implementations for ElementValueVisitor.','line_number':166,'multiline':False]['text':' Set the referencing access flags and set the referenced class.','line_number':170,'multiline':False]['text':' Fix the access flags of referenced annotation method.','line_number':174,'multiline':False]['text':'*
     * This ClassVisitor fixes the access flags of the classes that it visits,
     * relative to the referencing class.
     ','line_number':180,'multiline':True]['text':' Implementations for ClassVisitor.','line_number':190,'multiline':False]['text':' Do we need to update the access flags?','line_number':197,'multiline':False]['text':' Compute the required access level.','line_number':202,'multiline':False]['text':' Fix the class access flags if necessary.','line_number':208,'multiline':False]['text':' Also check the InnerClasses attribute, if any.','line_number':217,'multiline':False]['text':' Implementations for AttributeVisitor.','line_number':222,'multiline':False]['text':' Implementations for InnerClassesInfoVisitor.','line_number':233,'multiline':False]['text':' Is this an inner class?','line_number':237,'multiline':False]['text':' Do we need to update the access flags?','line_number':244,'multiline':False]['text':' Compute the required access level.','line_number':249,'multiline':False]['text':' Fix the inner class access flags if necessary.','line_number':255,'multiline':False]['text':'*
     * This MemberVisitor fixes the access flags of the class members that it
     * visits, relative to the referencing class and method.
     ','line_number':269,'multiline':True]['text':' Implementations for MemberVisitor.','line_number':277,'multiline':False]['text':' Do we need to update the access flags?','line_number':284,'multiline':False]['text':' Compute the required access level.','line_number':289,'multiline':False]['text':' For protected access:','line_number':290,'multiline':False]['text':' - The referencing method may not be static.','line_number':291,'multiline':False]['text':' - The invoked class must be the referencing class (or a','line_number':292,'multiline':False]['text':'   subclass, which may be counter-intuitive), to avoid','line_number':293,'multiline':False]['text':'   invoking protected super methods on instances that are','line_number':294,'multiline':False]['text':'   not of the referencing type, which the verifier doesn't','line_number':295,'multiline':False]['text':'   allow. (test2172) [DGD-1258]','line_number':296,'multiline':False]['text':' - The class that actually contains the member must be a','line_number':297,'multiline':False]['text':'   super class.','line_number':298,'multiline':False]['text':' Fix the class member access flags if necessary.','line_number':308,'multiline':False]['text':' Small utility methods.','line_number':320,'multiline':False]['text':'*
     * Returns whether the two given classes are in the same package.
     ','line_number':322,'multiline':True]