['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ClassVisitor converts all lambda expressions in the visited
 * classes to anonymous inner classes.
 *
 * @author Thomas Neidhart
 ','line_number':36,'multiline':True]['text':' Implementation interfaces.','line_number':46,'multiline':False]['text':' Implementations for ClassVisitor.','line_number':79,'multiline':False]['text':' Add the converted lambda class to the program class pool','line_number':95,'multiline':False]['text':' and the injected class name map.','line_number':96,'multiline':False]['text':' Replace all InvokeDynamic instructions.','line_number':108,'multiline':False]['text':' Initialize the hierarchy and references of all lambda classes.','line_number':114,'multiline':False]['text':' Remove deserialization hooks as they are no longer needed.','line_number':125,'multiline':False]['text':' Implementations for AttributeVisitor.','line_number':132,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':152,'multiline':False]['text':' TODO: the special optimization in case there is only 1','line_number':192,'multiline':False]['text':'       parameter has been disabled as the used stack','line_number':193,'multiline':False]['text':'       manipulation instructions might confuse the class','line_number':194,'multiline':False]['text':'       converter (testcase 1988).','line_number':195,'multiline':False]['text':' If only 1 parameter is captured by the lambda expression,','line_number':198,'multiline':False]['text':' and it is a Category 1 value, we can avoid storing the','line_number':199,'multiline':False]['text':' current stack to variables.','line_number':200,'multiline':False]['text':' More than 1 (or a Category 2) parameter is captured','line_number':210,'multiline':False]['text':' by the lambda expression. We need to store the current','line_number':211,'multiline':False]['text':' call stack to variables, create the lambda instance and','line_number':212,'multiline':False]['text':' load the call stack again from the temporary variables.','line_number':213,'multiline':False]['text':' Collect the argument types.','line_number':215,'multiline':False]['text':' Store the current call stack in reverse order','line_number':224,'multiline':False]['text':' into temporary variables.','line_number':225,'multiline':False]['text':' Create the lambda instance.','line_number':237,'multiline':False]['text':' Reconstruct the call stack by loading it from','line_number':241,'multiline':False]['text':' the temporary variables.','line_number':242,'multiline':False]['text':' Implementations for MemberVisitor.','line_number':266,'multiline':False]['text':' Small utility methods.','line_number':282,'multiline':False]['text':' Store the created lambda class in the LambdaExpression','line_number':330,'multiline':False]['text':' data structure for later use.','line_number':331,'multiline':False]['text':' [DGD-968] When a lambda expression is called from a `default`','line_number':334,'multiline':False]['text':' interface method, ensure that it is stateless and visible to the','line_number':335,'multiline':False]['text':' lambda class instead of generating an accessor method. The method','line_number':336,'multiline':False]['text':' will be properly backported by the {@link StaticInterfaceMethodConverter}.','line_number':337,'multiline':False]['text':' In case the invoked method can not be accessed directly','line_number':347,'multiline':False]['text':' by the lambda class, add a synthetic accessor method.','line_number':348,'multiline':False]['text':' Change the access flags to package private to make the method','line_number':376,'multiline':False]['text':' accessible from the lambda class.','line_number':377,'multiline':False]['text':' If the method is not yet static, make it static','line_number':380,'multiline':False]['text':' by updating its access flags / descriptor.','line_number':381,'multiline':False]['text':' Update the lambda expression accordingly.','line_number':394,'multiline':False]['text':' Create accessor method.','line_number':408,'multiline':False]['text':' Method reference to a constructor.','line_number':423,'multiline':False]['text':' Replace the return type of the accessor method -> change to created type.','line_number':426,'multiline':False]['text':' Collect first all parameters.','line_number':428,'multiline':False]['text':' Build new method descriptor with the updated return type.','line_number':442,'multiline':False]['text':' If the lambda expression is a method reference to a constructor,','line_number':461,'multiline':False]['text':' we need to create the object first.','line_number':462,'multiline':False]['text':' Load the parameters next.','line_number':469,'multiline':False]['text':' Update the lambda expression to point to the created','line_number':481,'multiline':False]['text':' accessor method instead.','line_number':482,'multiline':False]['text':' Add singleton field','line_number':501,'multiline':False]['text':' Add the constructor.','line_number':508,'multiline':False]['text':' Add static initializer.','line_number':521,'multiline':False]['text':' If the lambda expression is serializable, create a readResolve method','line_number':538,'multiline':False]['text':' to return the singleton field.','line_number':539,'multiline':False]['text':' Add the interface method.','line_number':554,'multiline':False]['text':' Convert the remaining parameters if they are present.','line_number':572,'multiline':False]['text':' If we invoke a method on an object, we need to cast it to the invoked type.','line_number':593,'multiline':False]['text':' Convert the remaining parameters if they are present.','line_number':606,'multiline':False]['text':' Create constructor.','line_number':623,'multiline':False]['text':' Create interface method.','line_number':659,'multiline':False]['text':' Load the instance fields first.','line_number':666,'multiline':False]['text':' And then the method parameters.','line_number':695,'multiline':False]['text':'*
     * Adds the required instructions to the provided CodeAttributeComposer
     * to convert the current value on the stack to the given targetType.
     ','line_number':871,'multiline':True]['text':' Perform auto-boxing.','line_number':882,'multiline':False]['text':' Perform auto-unboxing.','line_number':939,'multiline':False]['text':' No need to cast to java/lang/Object.','line_number':1027,'multiline':False]['text':' Cast to target type.','line_number':1030,'multiline':False]