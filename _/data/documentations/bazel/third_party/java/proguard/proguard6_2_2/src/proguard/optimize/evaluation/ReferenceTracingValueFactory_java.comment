['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This ValueFactory tags newly created reference values so they can be traced
 * throughout the execution of a method.
 *
 * @see TracedReferenceValue
 * @see InstructionOffsetValue
 * @author Eric Lafortune
 ','line_number':30,'multiline':True]['text':'*
     * Creates a new ReferenceTracingValueFactory that attaches instruction
     * offset values based on being used as an instruction visitor. This
     * instance preserves trace values in the {@link #cast} method.
     * @param valueFactory the value factory that creates the actual values.
     ','line_number':49,'multiline':True]['text':'*
     * Creates a new ReferenceTracingValueFactory that attaches instruction
     * offset values based on being used as an instruction visitor.
     * @param valueFactory              the value factory that creates the
     *                                  actual values.
     * @param preserveTraceValueOnCasts specifies whether to preserve the
     *                                  trace value for reference values that
     *                                  are passed to the {@link #cast} method.
     ','line_number':61,'multiline':True]['text':'*
     * Casts a given traced reference value to the given type, either keeping
     * its trace value or setting a new one.
     ','line_number':84,'multiline':True]['text':' Cast the value.','line_number':93,'multiline':False]['text':' Trace it.','line_number':100,'multiline':False]['text':' Implementations for InstructionVisitor.','line_number':108,'multiline':False]['text':' Implementations for BasicValueFactory.','line_number':172,'multiline':False]['text':'*
     * Creates a new ReferenceValue that represents an array with elements of
     * the given type, with the given length and initial element values.
     ','line_number':272,'multiline':True]['text':' Small utility methods.','line_number':285,'multiline':False]['text':'*
     * Attaches the current trace value to given value, if it is a reference
     * value.
     ','line_number':287,'multiline':True]['text':'*
     * Attaches the current trace value to given reference value.
     ','line_number':298,'multiline':True]