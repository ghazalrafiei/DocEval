['text':'
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2019 Guardsquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 ','line_number':1,'multiline':True]['text':'*
 * This AttributeVisitor shrinks the code attributes that it visits, based
 * on partial evaluation.
 *
 * @author Eric Lafortune
 ','line_number':37,'multiline':True]['text':'*','line_number':48,'multiline':False]['text':'/
    private static boolean DEBUG          = System.getProperty("es") != null;
    private static boolean DEBUG_RESULTS  = DEBUG;
    //','line_number':51,'multiline':True]['text':'*
     * Creates a new EvaluationShrinker.
     ','line_number':113,'multiline':True]['text':'*
     * Creates a new EvaluationShrinker.
     * @param partialEvaluator               the partial evaluator that will
     *                                       analyze the code.
     * @param runPartialEvaluator            specifies whether the partial
     *                                       evaluator should be run for each
     *                                       method, or if some other class is
     *                                       already doing this.
     * @param extraDeletedInstructionVisitor an optional extra visitor for all
     *                                       deleted instructions.
     * @param extraAddedInstructionVisitor   an optional extra visitor for all
     *                                       added instructions.
     ','line_number':122,'multiline':True]['text':'*
     * Creates a new EvaluationShrinker.
     * @param instructionUsageMarker         the instruction usage marker that
     *                                       will analyze the code.
     * @param runInstructionUsageMarker      specifies whether the usage
     *                                       marker should be run for each
     *                                       method, or if some other class is
     *                                       already doing this.
     * @param extraDeletedInstructionVisitor an optional extra visitor for all
     *                                       deleted instructions.
     * @param extraAddedInstructionVisitor   an optional extra visitor for all
     *                                       added instructions.
     ','line_number':147,'multiline':True]['text':' Implementations for AttributeVisitor.','line_number':172,'multiline':False]['text':'        DEBUG = DEBUG_RESULTS =','line_number':179,'multiline':False]['text':'            clazz.getName().equals("abc/Def") &&','line_number':180,'multiline':False]['text':'            method.getName(clazz).equals("abc");','line_number':181,'multiline':False]['text':' TODO: Remove this when the evaluation shrinker has stabilized.','line_number':183,'multiline':False]['text':' Catch any unexpected exceptions from the actual visiting method.','line_number':184,'multiline':False]['text':' Process the code.','line_number':187,'multiline':False]['text':' Analyze the method.','line_number':217,'multiline':False]['text':' Reset the code changes.','line_number':228,'multiline':False]['text':' Replace virtual invocations by static invocations, where necessary.','line_number':231,'multiline':False]['text':' Replace traced but unnecessary backward branches by infinite loops.','line_number':241,'multiline':False]['text':' The virtual machine's verification step is not smart enough to see','line_number':242,'multiline':False]['text':' the code isn't reachable, and may complain otherwise.','line_number':243,'multiline':False]['text':' Any clearly unreachable code will still be removed elsewhere.','line_number':244,'multiline':False]['text':' Insert infinite loops after jumps to subroutines that don't return.','line_number':255,'multiline':False]['text':' The virtual machine's verification step is not smart enough to see','line_number':256,'multiline':False]['text':' the code isn't reachable, and may complain otherwise.','line_number':257,'multiline':False]['text':' Locally fix instructions, in order to keep the stack consistent.','line_number':267,'multiline':False]['text':' Delete all instructions that are not used.','line_number':277,'multiline':False]['text':' Clear exception handlers that are not necessary.','line_number':339,'multiline':False]['text':' Apply all accumulated changes to the code.','line_number':342,'multiline':False]['text':'*
     * This MemberVisitor converts virtual method invocations into static
     * method invocations if the 'this' parameter isn't used.
     ','line_number':347,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':361,'multiline':False]['text':' Implementations for ConstantVisitor.','line_number':381,'multiline':False]['text':' Implementations for MemberVisitor.','line_number':389,'multiline':False]['text':' Make the method invocation static, if possible.','line_number':396,'multiline':False]['text':'*
     * This InstructionVisitor replaces all backward branches by
     * infinite loops.
     ','line_number':408,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':416,'multiline':False]['text':' Is it a traced but unmarked backward branch, without an unmarked','line_number':420,'multiline':False]['text':' straddling forward branch? Note that this is still a heuristic.','line_number':421,'multiline':False]['text':'*
         * Returns whether all of the given instruction offsets (at least one)
         * are smaller than or equal to the given offset.
         ','line_number':434,'multiline':True]['text':' Loop over all instruction offsets.','line_number':443,'multiline':False]['text':' Is the offset larger than the reference offset?','line_number':449,'multiline':False]['text':'*
         * Returns the highest offset of an instruction that has been marked as
         * necessary, before the given offset.
         ','line_number':464,'multiline':True]['text':'*
     * This InstructionVisitor appends infinite loops after all visited
     * non-returning subroutine invocations.
     ','line_number':483,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':491,'multiline':False]['text':' Is it a necessary subroutine invocation?','line_number':498,'multiline':False]['text':'*
     * This InstructionVisitor fixes instructions locally, popping any unused
     * produced stack entries after marked instructions, and popping produced
     * stack entries and pushing missing stack entries instead of unmarked
     * instructions.
     ','line_number':513,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':523,'multiline':False]['text':' Has the instruction been marked?','line_number':527,'multiline':False]['text':' Check all stack entries that are popped.','line_number':530,'multiline':False]['text':' Unusual case: an exception handler with an exception that is','line_number':531,'multiline':False]['text':' no longer consumed as a method parameter.','line_number':532,'multiline':False]['text':' Typical case: a freshly marked variable initialization that','line_number':533,'multiline':False]['text':' requires some value on the stack.','line_number':534,'multiline':False]['text':' Check if it is an exception pushed by a','line_number':556,'multiline':False]['text':' handler (should be) that is not at the','line_number':557,'multiline':False]['text':' top of the stack ([PGD-748], test2162).','line_number':558,'multiline':False]['text':' Try to handle it.','line_number':565,'multiline':False]['text':' This only works if the exception isn't','line_number':566,'multiline':False]['text':' consumed elsewhere (should be ok, since','line_number':567,'multiline':False]['text':' it's an unused parameter).','line_number':568,'multiline':False]['text':' Remember to pop it.','line_number':575,'multiline':False]['text':' Remember to push some value.','line_number':584,'multiline':False]['text':' Pop some unnecessary stack entries.','line_number':590,'multiline':False]['text':' This only works if the entries are at the top of the stack.','line_number':591,'multiline':False]['text':' Push some necessary stack entries.','line_number':599,'multiline':False]['text':' This only works if the entries are at the top of the stack.','line_number':600,'multiline':False]['text':' Check all stack entries that are pushed.','line_number':616,'multiline':False]['text':' Typical case: a return value that wasn't really required and','line_number':617,'multiline':False]['text':' that should be popped.','line_number':618,'multiline':False]['text':' Is the stack entry required by consumers?','line_number':630,'multiline':False]['text':' Remember to pop it.','line_number':633,'multiline':False]['text':' Pop the unnecessary stack entries.','line_number':638,'multiline':False]['text':' Check all stack entries that would be popped.','line_number':649,'multiline':False]['text':' Typical case: a stack value that is required elsewhere and','line_number':650,'multiline':False]['text':' that still has to be popped.','line_number':651,'multiline':False]['text':' Is this stack entry pushed by any producer','line_number':663,'multiline':False]['text':' (because it is required by other consumers)?','line_number':664,'multiline':False]['text':' Remember to pop it.','line_number':667,'multiline':False]['text':' Pop the unnecessary stack entries.','line_number':672,'multiline':False]['text':' Check all stack entries that would be pushed.','line_number':681,'multiline':False]['text':' Typical case: a corresponding stack entry is pushed','line_number':682,'multiline':False]['text':' elsewhere so it still has to be pushed here.','line_number':683,'multiline':False]['text':' Is the stack entry required by consumers?','line_number':695,'multiline':False]['text':' Remember to push it.','line_number':698,'multiline':False]['text':' Push some necessary stack entries.','line_number':703,'multiline':False]['text':' Simplify the dup/swap instruction if possible.','line_number':725,'multiline':False]['text':' Did we find a suitable (extended) opcode?','line_number':728,'multiline':False]['text':' We can't easily emulate some constructs.','line_number':731,'multiline':False]['text':' Is there a single replacement opcode?','line_number':735,'multiline':False]['text':' Delete the instruction.','line_number':742,'multiline':False]['text':' Leave the instruction unchanged.','line_number':754,'multiline':False]['text':' Replace the instruction.','line_number':761,'multiline':False]['text':' Collect the replacement instructions.','line_number':771,'multiline':False]['text':' Create a properly sized array.','line_number':785,'multiline':False]['text':' Replace the branch instruction by a simple goto.','line_number':811,'multiline':False]['text':' Replace the switch instruction by a simple goto.','line_number':834,'multiline':False]['text':'*
         * Returns whether the given instruction is a dup or swap instruction
         * (dup, dup_x1, dup_x2, dup2, dup2_x1, dup2_x2, swap).
         ','line_number':850,'multiline':True]['text':'*
         * Returns a dup/swap opcode that is corrected for the stack entries
         * that are present before the instruction and necessary after the
         * instruction. The returned integer opcode may contain multiple byte
         * opcodes (least significant byte first).
         * @param instructionOffset the offset of the dup/swap instruction.
         * @param dupSwapOpcode     the original dup/swap opcode.
         * @param topBefore         the index of the top stack entry before
         *                          the instruction (counting from the bottom).
         * @param topAfter          the index of the top stack entry after
         *                          the instruction (counting from the bottom).
         * @return the corrected opcode.
         ','line_number':861,'multiline':True]['text':' Figure out which stack entries should be moved,','line_number':900,'multiline':False]['text':' copied, or removed.','line_number':901,'multiline':False]['text':' ...O -> ...OO','line_number':904,'multiline':False]['text':' ...O -> ...O','line_number':905,'multiline':False]['text':' ...O -> ...O','line_number':906,'multiline':False]['text':' ...O -> ...','line_number':907,'multiline':False]['text':' ...  -> ...','line_number':908,'multiline':False]['text':' Figure out which stack entries should be moved,','line_number':921,'multiline':False]['text':' copied, or removed.','line_number':922,'multiline':False]['text':' ...XO -> ...OXO','line_number':926,'multiline':False]['text':' ...XO -> ...OX','line_number':927,'multiline':False]['text':' !stackEntryNecessary2','line_number':928,'multiline':False]['text':' ...XO -> ...XO','line_number':929,'multiline':False]['text':' ...XO -> ...X','line_number':930,'multiline':False]['text':' ...X  -> ...X','line_number':931,'multiline':False]['text':' ...XO -> ...OO','line_number':934,'multiline':False]['text':' ...XO -> ...O','line_number':935,'multiline':False]['text':' !stackEntryNecessary2','line_number':936,'multiline':False]['text':' ...XO -> ...O','line_number':937,'multiline':False]['text':' ...XO -> ...','line_number':938,'multiline':False]['text':' ...X  -> ...','line_number':939,'multiline':False]['text':' !stackEntryPresent1','line_number':940,'multiline':False]['text':' ...O -> ...OO','line_number':942,'multiline':False]['text':' ...O -> ...O','line_number':943,'multiline':False]['text':' !stackEntryNecessary2','line_number':944,'multiline':False]['text':' ...O -> ...O','line_number':945,'multiline':False]['text':' ...O -> ...','line_number':946,'multiline':False]['text':' ...  -> ...','line_number':947,'multiline':False]['text':' Figure out which stack entries should be moved,','line_number':962,'multiline':False]['text':' copied, or removed.','line_number':963,'multiline':False]['text':' ...XYO -> ...OXYO','line_number':968,'multiline':False]['text':' ...XYO -> ...OXY','line_number':969,'multiline':False]['text':' !stackEntryNecessary3','line_number':970,'multiline':False]['text':' ...XYO -> ...XYO','line_number':971,'multiline':False]['text':' ...XYO -> ...XY','line_number':972,'multiline':False]['text':' ...XY  -> ...XY','line_number':973,'multiline':False]['text':' ...XYO -> ...OYO','line_number':976,'multiline':False]['text':' ...XYO -> ...OY','line_number':977,'multiline':False]['text':' !stackEntryNecessary3','line_number':978,'multiline':False]['text':' ...XYO -> ...YO','line_number':979,'multiline':False]['text':' ...XYO -> ...Y','line_number':980,'multiline':False]['text':' ...XY  -> ...Y','line_number':981,'multiline':False]['text':' !stackEntryPresent2','line_number':982,'multiline':False]['text':' ...YO -> ...OYO','line_number':984,'multiline':False]['text':' ...YO -> ...OY','line_number':985,'multiline':False]['text':' !stackEntryNecessary3','line_number':986,'multiline':False]['text':' ...YO -> ...YO','line_number':987,'multiline':False]['text':' ...YO -> ...Y','line_number':988,'multiline':False]['text':' ...Y  -> ...Y','line_number':989,'multiline':False]['text':' ...XYO -> ...OXO','line_number':993,'multiline':False]['text':' ...XYO -> ...OX','line_number':994,'multiline':False]['text':' !stackEntryNecessary3','line_number':995,'multiline':False]['text':' ...XYO -> ...XO','line_number':996,'multiline':False]['text':' ...XYO -> ...X','line_number':997,'multiline':False]['text':' ...XY  -> ...X','line_number':998,'multiline':False]['text':' ...XYO -> ...OO','line_number':1001,'multiline':False]['text':' ...XYO -> ...O','line_number':1002,'multiline':False]['text':' !stackEntryNecessary3','line_number':1003,'multiline':False]['text':' ...XYO -> ...O','line_number':1004,'multiline':False]['text':' ...XYO -> ...','line_number':1005,'multiline':False]['text':' ...XY  -> ...','line_number':1006,'multiline':False]['text':' !stackEntryPresent2','line_number':1007,'multiline':False]['text':' ...YO -> ...OO','line_number':1009,'multiline':False]['text':' ...YO -> ...O','line_number':1010,'multiline':False]['text':' !stackEntryNecessary3','line_number':1011,'multiline':False]['text':' ...YO -> ...O','line_number':1012,'multiline':False]['text':' ...YO -> ...','line_number':1013,'multiline':False]['text':' ...Y  -> ...','line_number':1014,'multiline':False]['text':' !stackEntryPresent1','line_number':1015,'multiline':False]['text':' ...XO -> ...OXO','line_number':1018,'multiline':False]['text':' ...XO -> ...OX','line_number':1019,'multiline':False]['text':' !stackEntryNecessary3','line_number':1020,'multiline':False]['text':' ...XO -> ...XO','line_number':1021,'multiline':False]['text':' ...XO -> ...X','line_number':1022,'multiline':False]['text':' ...X  -> ...X','line_number':1023,'multiline':False]['text':' ...XO -> ...OO','line_number':1026,'multiline':False]['text':' ...XO -> ...O','line_number':1027,'multiline':False]['text':' !stackEntryNecessary3','line_number':1028,'multiline':False]['text':' ...XO -> ...O','line_number':1029,'multiline':False]['text':' ...XO -> ...','line_number':1030,'multiline':False]['text':' ...X  -> ...','line_number':1031,'multiline':False]['text':' !stackEntryPresent2','line_number':1032,'multiline':False]['text':' ...O -> ...OO','line_number':1034,'multiline':False]['text':' ...O -> ...O','line_number':1035,'multiline':False]['text':' !stackEntryNecessary3','line_number':1036,'multiline':False]['text':' ...O -> ...O','line_number':1037,'multiline':False]['text':' ...O -> ...','line_number':1038,'multiline':False]['text':' ...  -> ...','line_number':1039,'multiline':False]['text':' Figure out which stack entries should be moved,','line_number':1053,'multiline':False]['text':' copied, or removed.','line_number':1054,'multiline':False]['text':' ...AB -> ...ABAB','line_number':1059,'multiline':False]['text':' ...AB -> ...ABA','line_number':1060,'multiline':False]['text':' !stackEntryNecessary1','line_number':1061,'multiline':False]['text':' ...AB -> ...ABB','line_number':1062,'multiline':False]['text':' ...AB -> ...AB','line_number':1063,'multiline':False]['text':' !stackEntryNecessary2','line_number':1064,'multiline':False]['text':' ...AB -> ...AAB','line_number':1066,'multiline':False]['text':' ...AB -> ...AA','line_number':1067,'multiline':False]['text':' ...A  -> ...AA','line_number':1068,'multiline':False]['text':' !stackEntryNecessary1','line_number':1069,'multiline':False]['text':' ...AB -> ...AB','line_number':1070,'multiline':False]['text':' ...AB -> ...A','line_number':1071,'multiline':False]['text':' ...A  -> ...A','line_number':1072,'multiline':False]['text':' !stackEntryNecessary3','line_number':1073,'multiline':False]['text':' ...AB -> ...BAB','line_number':1076,'multiline':False]['text':' ...AB -> ...BA','line_number':1077,'multiline':False]['text':' ...AB -> ...BB','line_number':1079,'multiline':False]['text':' ...AB -> ...B','line_number':1080,'multiline':False]['text':' !stackEntryPresent1','line_number':1081,'multiline':False]['text':' ...B  -> ...BB','line_number':1082,'multiline':False]['text':' ...B  -> ...B','line_number':1083,'multiline':False]['text':' !stackEntryNecessary2','line_number':1084,'multiline':False]['text':' ...AB -> ...AB','line_number':1086,'multiline':False]['text':' ...AB -> ...A','line_number':1087,'multiline':False]['text':' ...A  -> ...A','line_number':1088,'multiline':False]['text':' ...AB -> ...B','line_number':1090,'multiline':False]['text':' ...AB -> ...','line_number':1091,'multiline':False]['text':' ...A  -> ...','line_number':1092,'multiline':False]['text':' !stackEntryPresent1','line_number':1093,'multiline':False]['text':' ...B  -> ...B','line_number':1094,'multiline':False]['text':' ...B  -> ...','line_number':1095,'multiline':False]['text':' ...   -> ...','line_number':1096,'multiline':False]['text':' Figure out which stack entries should be moved,','line_number':1112,'multiline':False]['text':' copied, or removed.','line_number':1113,'multiline':False]['text':' ...XAB -> ...ABXAB','line_number':1119,'multiline':False]['text':' ...XAB -> ...ABXA','line_number':1120,'multiline':False]['text':' !stackEntryNecessary1','line_number':1121,'multiline':False]['text':' ...XAB -> ...ABXB','line_number':1122,'multiline':False]['text':' ...XAB -> ...ABX','line_number':1123,'multiline':False]['text':' ...XAB -> ...ABAB','line_number':1126,'multiline':False]['text':' ...XAB -> ...ABA','line_number':1127,'multiline':False]['text':' !stackEntryNecessary1','line_number':1128,'multiline':False]['text':' ...XAB -> ...ABB','line_number':1129,'multiline':False]['text':' ...XAB -> ...AB','line_number':1130,'multiline':False]['text':' !stackEntryNecessary2','line_number':1131,'multiline':False]['text':' ...AB  -> ...ABAB','line_number':1133,'multiline':False]['text':' ...AB  -> ...ABA','line_number':1134,'multiline':False]['text':' !stackEntryNecessary1','line_number':1135,'multiline':False]['text':' ...AB  -> ...ABB','line_number':1136,'multiline':False]['text':' ...AB  -> ...AB','line_number':1137,'multiline':False]['text':' !stackEntryNecessary3','line_number':1138,'multiline':False]['text':' ...XAB -> ...AXAB','line_number':1141,'multiline':False]['text':' ...XAB -> ...AXA','line_number':1142,'multiline':False]['text':' ...XA  -> ...AXA','line_number':1143,'multiline':False]['text':' !stackEntryNecessary1','line_number':1144,'multiline':False]['text':' ...XAB -> ...AXB','line_number':1145,'multiline':False]['text':' ...XAB -> ...AX','line_number':1146,'multiline':False]['text':' ...XA  -> ...AX','line_number':1147,'multiline':False]['text':' ...XAB -> ...AAB','line_number':1150,'multiline':False]['text':' ...XAB -> ...AA','line_number':1151,'multiline':False]['text':' ...XA  -> ...AA','line_number':1152,'multiline':False]['text':' !stackEntryNecessary1','line_number':1153,'multiline':False]['text':' ...XAB -> ...AB','line_number':1154,'multiline':False]['text':' ...XAB -> ...A','line_number':1155,'multiline':False]['text':' ...XA  -> ...A','line_number':1156,'multiline':False]['text':' !stackEntryNecessary2','line_number':1157,'multiline':False]['text':' ...AB  -> ...AAB','line_number':1159,'multiline':False]['text':' ...AB  -> ...AA','line_number':1160,'multiline':False]['text':' ...A   -> ...AA','line_number':1161,'multiline':False]['text':' !stackEntryNecessary1','line_number':1162,'multiline':False]['text':' ...AB  -> ...AB','line_number':1163,'multiline':False]['text':' ...AB  -> ...A','line_number':1164,'multiline':False]['text':' ...A   -> ...A','line_number':1165,'multiline':False]['text':' !stackEntryNecessary4','line_number':1166,'multiline':False]['text':' ...XAB -> ...BXAB','line_number':1170,'multiline':False]['text':' ...XAB -> ...BXA','line_number':1171,'multiline':False]['text':' ...XAB -> ...BXB','line_number':1173,'multiline':False]['text':' ...XAB -> ...BX','line_number':1174,'multiline':False]['text':' !stackEntryNecessary1','line_number':1175,'multiline':False]['text':' ...XB  -> ...BXB','line_number':1176,'multiline':False]['text':' ...XB  -> ...BX','line_number':1177,'multiline':False]['text':' ...XAB -> ...BAB','line_number':1180,'multiline':False]['text':' ...XAB -> ...BA','line_number':1181,'multiline':False]['text':' ...XAB -> ...BB','line_number':1183,'multiline':False]['text':' ...XAB -> ...B','line_number':1184,'multiline':False]['text':' !stackEntryNecessary1','line_number':1185,'multiline':False]['text':' ...XB  -> ...BB','line_number':1186,'multiline':False]['text':' ...XB  -> ...B','line_number':1187,'multiline':False]['text':' !stackEntryNecessary2','line_number':1188,'multiline':False]['text':' ...AB  -> ...BAB','line_number':1190,'multiline':False]['text':' ...AB  -> ...BA','line_number':1191,'multiline':False]['text':' ...AB  -> ...BB','line_number':1193,'multiline':False]['text':' ...AB  -> ...B','line_number':1194,'multiline':False]['text':' !stackEntryNecessary1','line_number':1195,'multiline':False]['text':' ...B   -> ...BB','line_number':1196,'multiline':False]['text':' ...B   -> ...B','line_number':1197,'multiline':False]['text':' !stackEntryNecessary3','line_number':1198,'multiline':False]['text':' ...XAB -> ...XAB','line_number':1201,'multiline':False]['text':' ...XAB -> ...XA','line_number':1202,'multiline':False]['text':' ...XA  -> ...XA','line_number':1203,'multiline':False]['text':' ...XAB -> ...XB','line_number':1205,'multiline':False]['text':' ...XAB -> ...X','line_number':1206,'multiline':False]['text':' ...XA  -> ...X','line_number':1207,'multiline':False]['text':' !stackEntryNecessary1','line_number':1208,'multiline':False]['text':' ...XB  -> ...XB','line_number':1209,'multiline':False]['text':' ...XB  -> ...X','line_number':1210,'multiline':False]['text':' ...X   -> ...X','line_number':1211,'multiline':False]['text':' ...XAB -> ...AB','line_number':1214,'multiline':False]['text':' ...XAB -> ...A','line_number':1215,'multiline':False]['text':' ...XA  -> ...A','line_number':1216,'multiline':False]['text':' ...XAB -> ...B','line_number':1218,'multiline':False]['text':' ...XAB -> ...','line_number':1219,'multiline':False]['text':' ...XA  -> ...','line_number':1220,'multiline':False]['text':' !stackEntryNecessary1','line_number':1221,'multiline':False]['text':' ...XB  -> ...B','line_number':1222,'multiline':False]['text':' ...XB  -> ...','line_number':1223,'multiline':False]['text':' ...X   -> ...','line_number':1224,'multiline':False]['text':' !stackEntryNecessary2','line_number':1225,'multiline':False]['text':' ...AB  -> ...AB','line_number':1227,'multiline':False]['text':' ...AB  -> ...A','line_number':1228,'multiline':False]['text':' ...A   -> ...A','line_number':1229,'multiline':False]['text':' ...AB  -> ...B','line_number':1231,'multiline':False]['text':' ...AB  -> ...','line_number':1232,'multiline':False]['text':' ...A   -> ...','line_number':1233,'multiline':False]['text':' !stackEntryNecessary1','line_number':1234,'multiline':False]['text':' ...B   -> ...B','line_number':1235,'multiline':False]['text':' ...B   -> ...','line_number':1236,'multiline':False]['text':' ...    -> ...','line_number':1237,'multiline':False]['text':' We're currently assuming the value to be duplicated','line_number':1243,'multiline':False]['text':' is a long or a double, taking up two slots, or at','line_number':1244,'multiline':False]['text':' least consistent.','line_number':1245,'multiline':False]['text':' Figure out which stack entries should be moved,','line_number':1255,'multiline':False]['text':' copied, or removed.','line_number':1256,'multiline':False]['text':' ...XYAB -> ...ABXYAB','line_number':1261,'multiline':False]['text':' ...XYAB -> ...ABXY','line_number':1262,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1263,'multiline':False]['text':' ...XYAB -> ...XYAB','line_number':1264,'multiline':False]['text':' ...XYAB -> ...XY','line_number':1265,'multiline':False]['text':' ...XY   -> ...XY','line_number':1266,'multiline':False]['text':' ...XYAB -> ...ABYAB','line_number':1269,'multiline':False]['text':' ...XYAB -> ...ABY','line_number':1270,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1271,'multiline':False]['text':' ...XYAB -> ...YAB','line_number':1272,'multiline':False]['text':' ...XYAB -> ...Y','line_number':1273,'multiline':False]['text':' ...XY   -> ...Y','line_number':1274,'multiline':False]['text':' !stackEntryPresent3','line_number':1275,'multiline':False]['text':' ...YAB -> ...ABYAB','line_number':1277,'multiline':False]['text':' ...YAB -> ...ABY','line_number':1278,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1279,'multiline':False]['text':' ...YAB -> ...YAB','line_number':1280,'multiline':False]['text':' ...YAB -> ...Y','line_number':1281,'multiline':False]['text':' ...Y   -> ...Y','line_number':1282,'multiline':False]['text':' ...XYAB -> ...ABXAB','line_number':1286,'multiline':False]['text':' ...XYAB -> ...ABX','line_number':1287,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1288,'multiline':False]['text':' ...XYAB -> ...XAB','line_number':1289,'multiline':False]['text':' ...XYAB -> ...X','line_number':1290,'multiline':False]['text':' ...XY   -> ...X','line_number':1291,'multiline':False]['text':' ...XYAB -> ...ABAB','line_number':1294,'multiline':False]['text':' ...XYAB -> ...AB','line_number':1295,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1296,'multiline':False]['text':' ...XYAB -> ...AB','line_number':1297,'multiline':False]['text':' ...XYAB -> ...','line_number':1298,'multiline':False]['text':' ...XY   -> ...','line_number':1299,'multiline':False]['text':' !stackEntryPresent3','line_number':1300,'multiline':False]['text':' ...YAB -> ...ABAB','line_number':1302,'multiline':False]['text':' ...YAB -> ...AB','line_number':1303,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1304,'multiline':False]['text':' ...YAB -> ...AB','line_number':1305,'multiline':False]['text':' ...YAB -> ...','line_number':1306,'multiline':False]['text':' ...Y   -> ...','line_number':1307,'multiline':False]['text':' !stackEntryPresent2','line_number':1308,'multiline':False]['text':' ...XAB -> ...ABXAB','line_number':1311,'multiline':False]['text':' ...XAB -> ...ABX','line_number':1312,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1313,'multiline':False]['text':' ...XAB -> ...XAB','line_number':1314,'multiline':False]['text':' ...XAB -> ...X','line_number':1315,'multiline':False]['text':' ...X   -> ...X','line_number':1316,'multiline':False]['text':' ...XAB -> ...ABAB','line_number':1319,'multiline':False]['text':' ...XAB -> ...AB','line_number':1320,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1321,'multiline':False]['text':' ...XAB -> ...AB','line_number':1322,'multiline':False]['text':' ...XAB -> ...','line_number':1323,'multiline':False]['text':' ...X   -> ...','line_number':1324,'multiline':False]['text':' !stackEntryPresent3','line_number':1325,'multiline':False]['text':' ...AB -> ...ABAB','line_number':1327,'multiline':False]['text':' ...AB -> ...AB','line_number':1328,'multiline':False]['text':' !stackEntriesNecessary45','line_number':1329,'multiline':False]['text':' ...AB -> ...AB','line_number':1330,'multiline':False]['text':' ...AB -> ...','line_number':1331,'multiline':False]['text':' ...   -> ...','line_number':1332,'multiline':False]['text':' Figure out which stack entries should be moved','line_number':1344,'multiline':False]['text':' or removed.','line_number':1345,'multiline':False]['text':' ...AB -> ...BA','line_number':1348,'multiline':False]['text':' ...AB -> ...A','line_number':1349,'multiline':False]['text':' ...A  -> ...A','line_number':1350,'multiline':False]['text':' ...AB -> ...B','line_number':1351,'multiline':False]['text':' ...B -> ...B','line_number':1352,'multiline':False]['text':'*
     * This InstructionVisitor deletes all visited instructions.
     ','line_number':1357,'multiline':True]['text':' Implementations for InstructionVisitor.','line_number':1364,'multiline':False]['text':' We're allowing edits on deleted instructions.','line_number':1370,'multiline':False]['text':'codeAttributeEditor.insertBeforeInstruction(offset, (Instruction)null);','line_number':1371,'multiline':False]['text':'codeAttributeEditor.replaceInstruction(offset,      (Instruction)null);','line_number':1372,'multiline':False]['text':'codeAttributeEditor.insertAfterInstruction(offset,  (Instruction)null);','line_number':1373,'multiline':False]['text':' Visit the instruction, if required.','line_number':1375,'multiline':False]['text':' Implementations for ExceptionInfoVisitor.','line_number':1384,'multiline':False]['text':' Is the catch handler necessary?','line_number':1388,'multiline':False]['text':' Make the code block empty, so the code editor can remove it.','line_number':1391,'multiline':False]['text':' Small utility methods.','line_number':1397,'multiline':False]['text':'*
     * Returns whether any traced but unnecessary instruction between the two
     * given offsets is branching over the second given offset.
     ','line_number':1399,'multiline':True]['text':' Is it a traced but unmarked straddling branch?','line_number':1408,'multiline':False]['text':'*
     * Returns whether any of the given instruction offsets (at least one)
     * is larger than the given offset.
     ','line_number':1422,'multiline':True]['text':' Loop over all instruction offsets.','line_number':1431,'multiline':False]['text':' Is the offset larger than the reference offset?','line_number':1437,'multiline':False]['text':'*
     * Pushes a specified type of stack entry before or at the given offset.
     * The instruction is marked as necessary.
     ','line_number':1450,'multiline':True]['text':' We can edit an instruction without marking it.','line_number':1459,'multiline':False]['text':'markInstruction(offset);','line_number':1460,'multiline':False]['text':' Create a simple push instrucion.','line_number':1462,'multiline':False]['text':' Replace or insert the push instruction.','line_number':1468,'multiline':False]['text':'*
     * Returns the opcode of a push instruction corresponding to the given
     * computational type.
     * @param computationalType the computational type to be pushed on the stack.
     ','line_number':1473,'multiline':True]['text':'*
     * Pops the given number of stack entries at or after the given offset.
     * The instructions are marked as necessary.
     ','line_number':1494,'multiline':True]['text':' We can edit an instruction without marking it.','line_number':1503,'multiline':False]['text':'markInstruction(offset);','line_number':1504,'multiline':False]['text':' Replace or insert a single pop instruction.','line_number':1510,'multiline':False]['text':' Replace or insert a single pop2 instruction.','line_number':1519,'multiline':False]['text':' Replace or insert the specified number of pop instructions.','line_number':1528,'multiline':False]['text':'*
     * Inserts or replaces the given instruction at the given offset.
     ','line_number':1559,'multiline':True]['text':'*
     * Inserts or replaces the given instruction at the given offset.
     ','line_number':1596,'multiline':True]['text':'*
     * Replaces the instruction at a given offset by a static invocation.
     ','line_number':1644,'multiline':True]['text':' Remember the replacement instruction.','line_number':1651,'multiline':False]['text':'*
     * Replaces the given instruction by an infinite loop.
     ','line_number':1662,'multiline':True]['text':' We can edit an instruction without marking it.','line_number':1670,'multiline':False]['text':'markInstruction(offset);','line_number':1671,'multiline':False]['text':' Replace the instruction by an infinite loop.','line_number':1673,'multiline':False]