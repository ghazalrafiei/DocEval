['text':' Copyright 2017 Google Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' ## API Overview','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' [Watcher][] lets a client watch for updates to a named entity, such as a','line_number':30,'multiline':False]['text':' directory or database table. For each watched entity, the client receives a','line_number':31,'multiline':False]['text':' reliable stream of watch events, without re-ordering.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' Watching is done by sending an RPC to a service that implements the API. The','line_number':34,'multiline':False]['text':' argument to the RPC contains the name of the entity. The result stream','line_number':35,'multiline':False]['text':' consists of a sequence of Change messages that the service continues to','line_number':36,'multiline':False]['text':' send until the call fails or is cancelled.','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':' ## Data model','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' This API assumes that each *entity* has a name and a','line_number':41,'multiline':False]['text':' set of *elements*, where each element has a name and a value. The','line_number':42,'multiline':False]['text':' entity's name must be a unique identifier within the service, such as','line_number':43,'multiline':False]['text':' a resource name. What constitutes an entity or element is','line_number':44,'multiline':False]['text':' implementation-specific: for example, a file system implementation','line_number':45,'multiline':False]['text':' might define an entity as either a directory or a file, and elements would be','line_number':46,'multiline':False]['text':' child files or directories of that entity.','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' The Watch API allows a client to watch an entity E's immediate','line_number':49,'multiline':False]['text':' elements or the whole tree rooted at E. Elements are organized into','line_number':50,'multiline':False]['text':' a hierarchy ("" at the top; the rest follows the natural hierarchy of the','line_number':51,'multiline':False]['text':' namespace of elements that is being watched). For example, when','line_number':52,'multiline':False]['text':' recursively watching a filesystem namespace, X is an ancestor of','line_number':53,'multiline':False]['text':' X/Y and X/Y/Z).','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' ## Watch request','line_number':56,'multiline':False]['text':'','line_number':57,'multiline':False]['text':' When a client makes a request to watch an entity, it can indicate','line_number':58,'multiline':False]['text':' whether it wants to receive the initial state of the entity, just','line_number':59,'multiline':False]['text':' new changes to the entity, or resume watching from a particular','line_number':60,'multiline':False]['text':' point in a previous watch stream, specified with a `resume_marker` value.','line_number':61,'multiline':False]['text':' It can also indicate whether it wants to watch only one entity or all','line_number':62,'multiline':False]['text':' entities in the subtree rooted at a particular entity's name.','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':' On receiving a watch request for an entity, the server sends one or more','line_number':65,'multiline':False]['text':' messages to the client. The first message informs the client that the server','line_number':66,'multiline':False]['text':' has registered the client's request: the instant of time when the','line_number':67,'multiline':False]['text':' client receives the event is referred to as the client's "watch','line_number':68,'multiline':False]['text':' point" for that entity.','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' ## Atomic delivery','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':' The response stream consists of a sequence of Change messages. Each','line_number':73,'multiline':False]['text':' message contains an `continued` bit. A sub-sequence of Change messages with','line_number':74,'multiline':False]['text':' `continued=true` followed by a Change message with `continued=false` forms an','line_number':75,'multiline':False]['text':' *atomic group*. Systems that support multi-element atomic updates may','line_number':76,'multiline':False]['text':' guarantee that all changes resulting from a single atomic','line_number':77,'multiline':False]['text':' update are delivered in the same atomic group. It is up to the','line_number':78,'multiline':False]['text':' documentation of a particular system that implements the Watch API to','line_number':79,'multiline':False]['text':' document whether or not it supports such grouping. We expect that most','line_number':80,'multiline':False]['text':' callers will ignore the notion of atomic delivery and the `continued` bit,','line_number':81,'multiline':False]['text':' i.e., they will just process each Change message as it is received.','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':' ## Batching','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' Multiple Change messages may be grouped into a single ChangeBatch message','line_number':86,'multiline':False]['text':' to reduce message transfer overhead. A single ChangeBatch may contain many','line_number':87,'multiline':False]['text':' atomic groups, or a single atomic group may be split across many','line_number':88,'multiline':False]['text':' ChangeBatch messages.','line_number':89,'multiline':False]['text':'','line_number':90,'multiline':False]['text':' ## Initial State','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' The first atomic group delivered by a watch call is special. It is','line_number':93,'multiline':False]['text':' delivered as soon as possible and contains the initial state of the','line_number':94,'multiline':False]['text':' entity being watched. The client should consider itself caught up','line_number':95,'multiline':False]['text':' after processing this first atomic group.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' The messages in the first atomic group will either refer to the','line_number':98,'multiline':False]['text':' entity itself (`Change.element` == "") or to elements inside the','line_number':99,'multiline':False]['text':' entity (`Change.element` != ""). Here are the cases to consider:','line_number':100,'multiline':False]['text':'','line_number':101,'multiline':False]['text':' 1. `resume_marker` is "" or not specified: For every element P','line_number':102,'multiline':False]['text':'    (including the entity itself) that exists, there will be at least','line_number':103,'multiline':False]['text':'    one message delivered with element == P and the last such message','line_number':104,'multiline':False]['text':'    will contain the current state of P. For every element Q','line_number':105,'multiline':False]['text':'    (including the entity itself) that does not exist, either no','line_number':106,'multiline':False]['text':'    message will be delivered, or the last message for Q will have','line_number':107,'multiline':False]['text':'    state == DOES_NOT_EXIST. At least one message for element="" will','line_number':108,'multiline':False]['text':'    be delivered.','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' 2. `resume_marker` == "now": there will be exactly one message with','line_number':111,'multiline':False]['text':'    element = "" and state INITIAL_STATE_SKIPPED. The client cannot','line_number':112,'multiline':False]['text':'    assume whether or not the entity exists after receiving this','line_number':113,'multiline':False]['text':'    message.','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' 3. `resume_marker` has a value R from a preceding watch call on this','line_number':116,'multiline':False]['text':'    entity: The same messages as described in (1) will be delivered to','line_number':117,'multiline':False]['text':'    the client, except that any information implied by messages received','line_number':118,'multiline':False]['text':'    on the preceding call up to and including R may not be','line_number':119,'multiline':False]['text':'    delivered. The expectation is that the client will start with state','line_number':120,'multiline':False]['text':'    it had built up from the preceding watch call, apply the changes','line_number':121,'multiline':False]['text':'    received from this call, and build an up-to-date view of the entity','line_number':122,'multiline':False]['text':'    without having to fetch a potentially large amount of information','line_number':123,'multiline':False]['text':'    that has not changed. Note that some information that had already','line_number':124,'multiline':False]['text':'    been delivered by the preceding call might be delivered again.','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':' ## Ordering and Reliability','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' The Change messages that apply to a particular element of the entity are','line_number':129,'multiline':False]['text':' delivered eventually in order without loss for the duration of the RPC. Note','line_number':130,'multiline':False]['text':' however that if multiple Changes apply to the same element, the','line_number':131,'multiline':False]['text':' implementation is free to suppress them and deliver just the last one. The','line_number':132,'multiline':False]['text':' underlying system must provide the guarantee that any relevant update','line_number':133,'multiline':False]['text':' received for an entity E after a client's watch point for E MUST be delivered','line_number':134,'multiline':False]['text':' to that client.','line_number':135,'multiline':False]['text':'','line_number':136,'multiline':False]['text':' These tight guarantees allow for the following simplifications in the client:','line_number':137,'multiline':False]['text':'','line_number':138,'multiline':False]['text':'   1. The client does not need to have a separate polling loop to make up for','line_number':139,'multiline':False]['text':'      missed updates.','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':'   2. The client does not need to manage timestamps/versions manually; the','line_number':142,'multiline':False]['text':'      last update delivered corresponds to the eventual state of the entity.','line_number':143,'multiline':False]['text':'','line_number':144,'multiline':False]['text':' Example: a calendar entry may have elements named { "starttime", "endtime",','line_number':145,'multiline':False]['text':' "attendees" } with corresponding values or it may have a single element name','line_number':146,'multiline':False]['text':' "entry" with a serialized proto for the calendar entry.','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':' ## Ordering constraints for parents/descendants','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':' The Watch API provides guarantees regarding the order in which','line_number':151,'multiline':False]['text':' messages for a parent and its descendants are delivered:','line_number':152,'multiline':False]['text':'','line_number':153,'multiline':False]['text':' 1. The creation of an ancestor (i.e., the first EXISTS message for','line_number':154,'multiline':False]['text':'    the ancestor) is reported before the creation of any of its','line_number':155,'multiline':False]['text':'    descendants.','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':' 2. The deletion of an ancestor (via a DOES_NOT_EXIST message)','line_number':158,'multiline':False]['text':'    implies the deletion of all its descendants. The service will','line_number':159,'multiline':False]['text':'    not deliver any messages for the descendants until the parent','line_number':160,'multiline':False]['text':'    has been recreated.','line_number':161,'multiline':False]['text':' The service that a client uses to connect to the watcher system.','line_number':164,'multiline':False]['text':' The errors returned by the service are in the canonical error space,','line_number':165,'multiline':False]['text':' see [google.rpc.Code][].','line_number':166,'multiline':False]['text':' Start a streaming RPC to get watch information from the server.','line_number':168,'multiline':False]['text':' The message used by the client to register interest in an entity.','line_number':174,'multiline':False]['text':' The `target` value **must** be a valid URL path pointing to an entity','line_number':176,'multiline':False]['text':' to watch. Note that the service name **must** be','line_number':177,'multiline':False]['text':' removed from the target field (e.g., the target field must say','line_number':178,'multiline':False]['text':' "/foo/bar", not "myservice.googleapis.com/foo/bar"). A client is','line_number':179,'multiline':False]['text':' also allowed to pass system-specific parameters in the URL that','line_number':180,'multiline':False]['text':' are only obeyed by some implementations. Some parameters will be','line_number':181,'multiline':False]['text':' implementation-specific. However, some have predefined meaning','line_number':182,'multiline':False]['text':' and are listed here:','line_number':183,'multiline':False]['text':'','line_number':184,'multiline':False]['text':'  * recursive = true|false [default=false]','line_number':185,'multiline':False]['text':'    If set to true, indicates that the client wants to watch all elements','line_number':186,'multiline':False]['text':'    of entities in the subtree rooted at the entity's name in `target`. For','line_number':187,'multiline':False]['text':'    descendants that are not the immediate children of the target, the','line_number':188,'multiline':False]['text':'    `Change.element` will contain slashes.','line_number':189,'multiline':False]['text':'','line_number':190,'multiline':False]['text':'    Note that some namespaces and entities will not support recursive','line_number':191,'multiline':False]['text':'    watching. When watching such an entity, a client must not set recursive','line_number':192,'multiline':False]['text':'    to true. Otherwise, it will receive an `UNIMPLEMENTED` error.','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':' Normal URL encoding must be used inside `target`.  For example, if a query','line_number':195,'multiline':False]['text':' parameter name or value, or the non-query parameter portion of `target`','line_number':196,'multiline':False]['text':' contains a special character, it must be %-encoded.  We recommend that','line_number':197,'multiline':False]['text':' clients and servers use their runtime's URL library to produce and consume','line_number':198,'multiline':False]['text':' target values.','line_number':199,'multiline':False]['text':' The `resume_marker` specifies how much of the existing underlying state is','line_number':202,'multiline':False]['text':' delivered to the client when the watch request is received by the','line_number':203,'multiline':False]['text':' system. The client can set this marker in one of the following ways to get','line_number':204,'multiline':False]['text':' different semantics:','line_number':205,'multiline':False]['text':'','line_number':206,'multiline':False]['text':' *   Parameter is not specified or has the value "".','line_number':207,'multiline':False]['text':'     Semantics: Fetch initial state.','line_number':208,'multiline':False]['text':'     The client wants the entity's initial state to be delivered. See the','line_number':209,'multiline':False]['text':'     description in "Initial State".','line_number':210,'multiline':False]['text':'','line_number':211,'multiline':False]['text':' *   Parameter is set to the string "now" (UTF-8 encoding).','line_number':212,'multiline':False]['text':'     Semantics: Fetch new changes only.','line_number':213,'multiline':False]['text':'     The client just wants to get the changes received by the system after','line_number':214,'multiline':False]['text':'     the watch point. The system may deliver changes from before the watch','line_number':215,'multiline':False]['text':'     point as well.','line_number':216,'multiline':False]['text':'','line_number':217,'multiline':False]['text':' *   Parameter is set to a value received in an earlier','line_number':218,'multiline':False]['text':'     `Change.resume_marker` field while watching the same entity.','line_number':219,'multiline':False]['text':'     Semantics: Resume from a specific point.','line_number':220,'multiline':False]['text':'     The client wants to receive the changes from a specific point; this','line_number':221,'multiline':False]['text':'     value must correspond to a value received in the `Change.resume_marker`','line_number':222,'multiline':False]['text':'     field. The system may deliver changes from before the `resume_marker`','line_number':223,'multiline':False]['text':'     as well. If the system cannot resume the stream from this point (e.g.,','line_number':224,'multiline':False]['text':'     if it is too far behind in the stream), it can raise the','line_number':225,'multiline':False]['text':'     `FAILED_PRECONDITION` error.','line_number':226,'multiline':False]['text':'','line_number':227,'multiline':False]['text':' An implementation MUST support an unspecified parameter and the','line_number':228,'multiline':False]['text':' empty string "" marker (initial state fetching) and the "now" marker.','line_number':229,'multiline':False]['text':' It need not support resuming from a specific point.','line_number':230,'multiline':False]['text':' A batch of Change messages.','line_number':234,'multiline':False]['text':' A list of Change messages.','line_number':236,'multiline':False]['text':' A Change indicates the most recent state of an element.','line_number':240,'multiline':False]['text':' A reported value can be in one of the following states:','line_number':242,'multiline':False]['text':' The element exists and its full value is included in data.','line_number':244,'multiline':False]['text':' The element does not exist.','line_number':247,'multiline':False]['text':' Element may or may not exist. Used only for initial state delivery when','line_number':250,'multiline':False]['text':' the client is not interested in fetching the initial state. See the','line_number':251,'multiline':False]['text':' "Initial State" section above.','line_number':252,'multiline':False]['text':' The element may exist, but some error has occurred. More information is','line_number':255,'multiline':False]['text':' available in the data field - the value is a serialized Status','line_number':256,'multiline':False]['text':' proto (from [google.rpc.Status][])','line_number':257,'multiline':False]['text':' Name of the element, interpreted relative to the entity's actual','line_number':261,'multiline':False]['text':' name. "" refers to the entity itself. The element name is a valid','line_number':262,'multiline':False]['text':' UTF-8 string.','line_number':263,'multiline':False]['text':' The state of the `element`.','line_number':266,'multiline':False]['text':' The actual change data. This field is present only when `state() == EXISTS`','line_number':269,'multiline':False]['text':' or `state() == ERROR`. Please see [google.protobuf.Any][google.protobuf.Any] about how to use','line_number':270,'multiline':False]['text':' the Any type.','line_number':271,'multiline':False]['text':' If present, provides a compact representation of all the messages that have','line_number':274,'multiline':False]['text':' been received by the caller for the given entity, e.g., it could be a','line_number':275,'multiline':False]['text':' sequence number or a multi-part timestamp/version vector. This marker can','line_number':276,'multiline':False]['text':' be provided in the Request message, allowing the caller to resume the stream','line_number':277,'multiline':False]['text':' watching at a specific point without fetching the initial state.','line_number':278,'multiline':False]['text':' If true, this Change is followed by more Changes that are in the same group','line_number':281,'multiline':False]['text':' as this Change.','line_number':282,'multiline':False]