['text':' Copyright 2017 Google Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' The Controller service provides the API for orchestrating a collection of','line_number':29,'multiline':False]['text':' debugger agents to perform debugging tasks. These agents are each attached','line_number':30,'multiline':False]['text':' to a process of an application which may include one or more replicas.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' The debugger agents register with the Controller to identify the application','line_number':33,'multiline':False]['text':' being debugged, the Debuggee. All agents that register with the same data,','line_number':34,'multiline':False]['text':' represent the same Debuggee, and are assigned the same `debuggee_id`.','line_number':35,'multiline':False]['text':'','line_number':36,'multiline':False]['text':' The debugger agents call the Controller to retrieve  the list of active','line_number':37,'multiline':False]['text':' Breakpoints. Agents with the same `debuggee_id` get the same breakpoints','line_number':38,'multiline':False]['text':' list. An agent that can fulfill the breakpoint request updates the','line_number':39,'multiline':False]['text':' Controller with the breakpoint result. The controller selects the first','line_number':40,'multiline':False]['text':' result received and discards the rest of the results.','line_number':41,'multiline':False]['text':' Agents that poll again for active breakpoints will no longer have','line_number':42,'multiline':False]['text':' the completed breakpoint in the list and should remove that breakpoint from','line_number':43,'multiline':False]['text':' their attached process.','line_number':44,'multiline':False]['text':'','line_number':45,'multiline':False]['text':' The Controller service does not provide a way to retrieve the results of','line_number':46,'multiline':False]['text':' a completed breakpoint. This functionality is available using the Debugger','line_number':47,'multiline':False]['text':' service.','line_number':48,'multiline':False]['text':' Registers the debuggee with the controller service.','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' All agents attached to the same application should call this method with','line_number':52,'multiline':False]['text':' the same request content to get back the same stable `debuggee_id`. Agents','line_number':53,'multiline':False]['text':' should call this method again whenever `google.rpc.Code.NOT_FOUND` is','line_number':54,'multiline':False]['text':' returned from any controller method.','line_number':55,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' This allows the controller service to disable the agent or recover from any','line_number':57,'multiline':False]['text':' data loss. If the debuggee is disabled by the server, the response will','line_number':58,'multiline':False]['text':' have `is_disabled` set to `true`.','line_number':59,'multiline':False]['text':' Returns the list of all active breakpoints for the debuggee.','line_number':64,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' The breakpoint specification (location, condition, and expression','line_number':66,'multiline':False]['text':' fields) is semantically immutable, although the field values may','line_number':67,'multiline':False]['text':' change. For example, an agent may update the location line number','line_number':68,'multiline':False]['text':' to reflect the actual line where the breakpoint was set, but this','line_number':69,'multiline':False]['text':' doesn't change the breakpoint semantics.','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' This means that an agent does not need to check if a breakpoint has changed','line_number':72,'multiline':False]['text':' when it encounters the same breakpoint on a successive call.','line_number':73,'multiline':False]['text':' Moreover, an agent should remember the breakpoints that are completed','line_number':74,'multiline':False]['text':' until the controller removes them from the active list to avoid','line_number':75,'multiline':False]['text':' setting those breakpoints again.','line_number':76,'multiline':False]['text':' Updates the breakpoint state or mutable fields.','line_number':81,'multiline':False]['text':' The entire Breakpoint message must be sent back to the controller','line_number':82,'multiline':False]['text':' service.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' Updates to active breakpoint fields are only allowed if the new value','line_number':85,'multiline':False]['text':' does not change the breakpoint specification. Updates to the `location`,','line_number':86,'multiline':False]['text':' `condition` and `expression` fields should not alter the breakpoint','line_number':87,'multiline':False]['text':' semantics. These may only make changes such as canonicalizing a value','line_number':88,'multiline':False]['text':' or snapping the location to the correct line of code.','line_number':89,'multiline':False]['text':' Request to register a debuggee.','line_number':95,'multiline':False]['text':' Debuggee information to register.','line_number':97,'multiline':False]['text':' The fields `project`, `uniquifier`, `description` and `agent_version`','line_number':98,'multiline':False]['text':' of the debuggee must be set.','line_number':99,'multiline':False]['text':' Response for registering a debuggee.','line_number':103,'multiline':False]['text':' Debuggee resource.','line_number':105,'multiline':False]['text':' The field `id` is guranteed to be set (in addition to the echoed fields).','line_number':106,'multiline':False]['text':' Request to list active breakpoints.','line_number':110,'multiline':False]['text':' Identifies the debuggee.','line_number':112,'multiline':False]['text':' A wait token that, if specified, blocks the method call until the list','line_number':115,'multiline':False]['text':' of active breakpoints has changed, or a server selected timeout has','line_number':116,'multiline':False]['text':' expired.  The value should be set from the last returned response.','line_number':117,'multiline':False]['text':' If set to `true`, returns `google.rpc.Code.OK` status and sets the','line_number':120,'multiline':False]['text':' `wait_expired` response field to `true` when the server-selected timeout','line_number':121,'multiline':False]['text':' has expired (recommended).','line_number':122,'multiline':False]['text':'','line_number':123,'multiline':False]['text':' If set to `false`, returns `google.rpc.Code.ABORTED` status when the','line_number':124,'multiline':False]['text':' server-selected timeout has expired (deprecated).','line_number':125,'multiline':False]['text':' Response for listing active breakpoints.','line_number':129,'multiline':False]['text':' List of all active breakpoints.','line_number':131,'multiline':False]['text':' The fields `id` and `location` are guaranteed to be set on each breakpoint.','line_number':132,'multiline':False]['text':' A wait token that can be used in the next method call to block until','line_number':135,'multiline':False]['text':' the list of breakpoints changes.','line_number':136,'multiline':False]['text':' The `wait_expired` field is set to true by the server when the','line_number':139,'multiline':False]['text':' request times out and the field `success_on_timeout` is set to true.','line_number':140,'multiline':False]['text':' Request to update an active breakpoint.','line_number':144,'multiline':False]['text':' Identifies the debuggee being debugged.','line_number':146,'multiline':False]['text':' Updated breakpoint information.','line_number':149,'multiline':False]['text':' The field 'id' must be set.','line_number':150,'multiline':False]['text':' Response for updating an active breakpoint.','line_number':154,'multiline':False]['text':' The message is defined to allow future extensions.','line_number':155,'multiline':False]