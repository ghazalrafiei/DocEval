['text':' Copyright 2017 Google Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Represents a message with parameters.','line_number':30,'multiline':False]['text':' Format template for the message. The `format` uses placeholders `$0`,','line_number':32,'multiline':False]['text':' `$1`, etc. to reference parameters. `$$` can be used to denote the `$`','line_number':33,'multiline':False]['text':' character.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' Examples:','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' *   `Failed to load '$0' which helps debug $1 the first time it','line_number':38,'multiline':False]['text':'     is loaded.  Again, $0 is very important.`','line_number':39,'multiline':False]['text':' *   `Please pay $$10 to use $0 instead of $1.`','line_number':40,'multiline':False]['text':' Optional parameters to be embedded into the message.','line_number':43,'multiline':False]['text':' Represents a contextual status message.','line_number':47,'multiline':False]['text':' The message can indicate an error or informational status, and refer to','line_number':48,'multiline':False]['text':' specific parts of the containing object.','line_number':49,'multiline':False]['text':' For example, the `Breakpoint.status` field can indicate an error referring','line_number':50,'multiline':False]['text':' to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.','line_number':51,'multiline':False]['text':' Enumerates references to which the message applies.','line_number':53,'multiline':False]['text':' Status doesn't refer to any particular input.','line_number':55,'multiline':False]['text':' Status applies to the breakpoint and is related to its location.','line_number':58,'multiline':False]['text':' Status applies to the breakpoint and is related to its condition.','line_number':61,'multiline':False]['text':' Status applies to the breakpoint and is related to its expressions.','line_number':64,'multiline':False]['text':' Status applies to the breakpoint and is related to its age.','line_number':67,'multiline':False]['text':' Status applies to the entire variable.','line_number':70,'multiline':False]['text':' Status applies to variable value (variable name is valid).','line_number':73,'multiline':False]['text':' Distinguishes errors from informational messages.','line_number':77,'multiline':False]['text':' Reference to which the message applies.','line_number':80,'multiline':False]['text':' Status message text.','line_number':83,'multiline':False]['text':' Represents a location in the source code.','line_number':87,'multiline':False]['text':' Path to the source file within the source context of the target binary.','line_number':89,'multiline':False]['text':' Line inside the file. The first line in the file has the value `1`.','line_number':92,'multiline':False]['text':' Represents a variable or an argument possibly of a compound object type.','line_number':96,'multiline':False]['text':' Note how the following variables are represented:','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' 1) A simple variable:','line_number':99,'multiline':False]['text':'','line_number':100,'multiline':False]['text':'     int x = 5','line_number':101,'multiline':False]['text':'','line_number':102,'multiline':False]['text':'     { name: "x", value: "5", type: "int" }  // Captured variable','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':' 2) A compound object:','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':'     struct T {','line_number':107,'multiline':False]['text':'         int m1;','line_number':108,'multiline':False]['text':'         int m2;','line_number':109,'multiline':False]['text':'     };','line_number':110,'multiline':False]['text':'     T x = { 3, 7 };','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':'     {  // Captured variable','line_number':113,'multiline':False]['text':'         name: "x",','line_number':114,'multiline':False]['text':'         type: "T",','line_number':115,'multiline':False]['text':'         members { name: "m1", value: "3", type: "int" },','line_number':116,'multiline':False]['text':'         members { name: "m2", value: "7", type: "int" }','line_number':117,'multiline':False]['text':'     }','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':' 3) A pointer where the pointee was captured:','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':'     T x = { 3, 7 };','line_number':122,'multiline':False]['text':'     T* p = &x;','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':'     {   // Captured variable','line_number':125,'multiline':False]['text':'         name: "p",','line_number':126,'multiline':False]['text':'         type: "T*",','line_number':127,'multiline':False]['text':'         value: "0x00500500",','line_number':128,'multiline':False]['text':'         members { name: "m1", value: "3", type: "int" },','line_number':129,'multiline':False]['text':'         members { name: "m2", value: "7", type: "int" }','line_number':130,'multiline':False]['text':'     }','line_number':131,'multiline':False]['text':'','line_number':132,'multiline':False]['text':' 4) A pointer where the pointee was not captured:','line_number':133,'multiline':False]['text':'','line_number':134,'multiline':False]['text':'     T* p = new T;','line_number':135,'multiline':False]['text':'','line_number':136,'multiline':False]['text':'     {   // Captured variable','line_number':137,'multiline':False]['text':'         name: "p",','line_number':138,'multiline':False]['text':'         type: "T*",','line_number':139,'multiline':False]['text':'         value: "0x00400400"','line_number':140,'multiline':False]['text':'         status { is_error: true, description { format: "unavailable" } }','line_number':141,'multiline':False]['text':'     }','line_number':142,'multiline':False]['text':'','line_number':143,'multiline':False]['text':' The status should describe the reason for the missing value,','line_number':144,'multiline':False]['text':' such as `<optimized out>`, `<inaccessible>`, `<pointers limit reached>`.','line_number':145,'multiline':False]['text':'','line_number':146,'multiline':False]['text':' Note that a null pointer should not have members.','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':' 5) An unnamed value:','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':'     int* p = new int(7);','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':'     {   // Captured variable','line_number':153,'multiline':False]['text':'         name: "p",','line_number':154,'multiline':False]['text':'         value: "0x00500500",','line_number':155,'multiline':False]['text':'         type: "int*",','line_number':156,'multiline':False]['text':'         members { value: "7", type: "int" } }','line_number':157,'multiline':False]['text':'','line_number':158,'multiline':False]['text':' 6) An unnamed pointer where the pointee was not captured:','line_number':159,'multiline':False]['text':'','line_number':160,'multiline':False]['text':'     int* p = new int(7);','line_number':161,'multiline':False]['text':'     int** pp = &p;','line_number':162,'multiline':False]['text':'','line_number':163,'multiline':False]['text':'     {  // Captured variable','line_number':164,'multiline':False]['text':'         name: "pp",','line_number':165,'multiline':False]['text':'         value: "0x00500500",','line_number':166,'multiline':False]['text':'         type: "int**",','line_number':167,'multiline':False]['text':'         members {','line_number':168,'multiline':False]['text':'             value: "0x00400400",','line_number':169,'multiline':False]['text':'             type: "int*"','line_number':170,'multiline':False]['text':'             status {','line_number':171,'multiline':False]['text':'                 is_error: true,','line_number':172,'multiline':False]['text':'                 description: { format: "unavailable" } }','line_number':173,'multiline':False]['text':'             }','line_number':174,'multiline':False]['text':'         }','line_number':175,'multiline':False]['text':'     }','line_number':176,'multiline':False]['text':'','line_number':177,'multiline':False]['text':' To optimize computation, memory and network traffic, variables that','line_number':178,'multiline':False]['text':' repeat in the output multiple times can be stored once in a shared','line_number':179,'multiline':False]['text':' variable table and be referenced using the `var_table_index` field.  The','line_number':180,'multiline':False]['text':' variables stored in the shared table are nameless and are essentially','line_number':181,'multiline':False]['text':' a partition of the complete variable. To reconstruct the complete','line_number':182,'multiline':False]['text':' variable, merge the referencing variable with the referenced variable.','line_number':183,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' When using the shared variable table, the following variables:','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':'     T x = { 3, 7 };','line_number':187,'multiline':False]['text':'     T* p = &x;','line_number':188,'multiline':False]['text':'     T& r = x;','line_number':189,'multiline':False]['text':'','line_number':190,'multiline':False]['text':'     { name: "x", var_table_index: 3, type: "T" }  // Captured variables','line_number':191,'multiline':False]['text':'     { name: "p", value "0x00500500", type="T*", var_table_index: 3 }','line_number':192,'multiline':False]['text':'     { name: "r", type="T&", var_table_index: 3 }','line_number':193,'multiline':False]['text':'','line_number':194,'multiline':False]['text':'     {  // Shared variable table entry #3:','line_number':195,'multiline':False]['text':'         members { name: "m1", value: "3", type: "int" },','line_number':196,'multiline':False]['text':'         members { name: "m2", value: "7", type: "int" }','line_number':197,'multiline':False]['text':'     }','line_number':198,'multiline':False]['text':'','line_number':199,'multiline':False]['text':' Note that the pointer address is stored with the referencing variable','line_number':200,'multiline':False]['text':' and not with the referenced variable. This allows the referenced variable','line_number':201,'multiline':False]['text':' to be shared between pointers and references.','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':' The type field is optional. The debugger agent may or may not support it.','line_number':204,'multiline':False]['text':' Name of the variable, if any.','line_number':206,'multiline':False]['text':' Simple value of the variable.','line_number':209,'multiline':False]['text':' Variable type (e.g. `MyClass`). If the variable is split with','line_number':212,'multiline':False]['text':' `var_table_index`, `type` goes next to `value`. The interpretation of','line_number':213,'multiline':False]['text':' a type is agent specific. It is recommended to include the dynamic type','line_number':214,'multiline':False]['text':' rather than a static type of an object.','line_number':215,'multiline':False]['text':' Members contained or pointed to by the variable.','line_number':218,'multiline':False]['text':' Reference to a variable in the shared variable table. More than','line_number':221,'multiline':False]['text':' one variable can reference the same variable in the table. The','line_number':222,'multiline':False]['text':' `var_table_index` field is an index into `variable_table` in Breakpoint.','line_number':223,'multiline':False]['text':' Status associated with the variable. This field will usually stay','line_number':226,'multiline':False]['text':' unset. A status of a single variable only applies to that variable or','line_number':227,'multiline':False]['text':' expression. The rest of breakpoint data still remains valid. Variables','line_number':228,'multiline':False]['text':' might be reported in error state even when breakpoint is not in final','line_number':229,'multiline':False]['text':' state.','line_number':230,'multiline':False]['text':'','line_number':231,'multiline':False]['text':' The message may refer to variable name with `refers_to` set to','line_number':232,'multiline':False]['text':' `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.','line_number':233,'multiline':False]['text':' In either case variable value and members will be unset.','line_number':234,'multiline':False]['text':'','line_number':235,'multiline':False]['text':' Example of error message applied to name: `Invalid expression syntax`.','line_number':236,'multiline':False]['text':'','line_number':237,'multiline':False]['text':' Example of information message applied to value: `Not captured`.','line_number':238,'multiline':False]['text':'','line_number':239,'multiline':False]['text':' Examples of error message applied to value:','line_number':240,'multiline':False]['text':'','line_number':241,'multiline':False]['text':' *   `Malformed string`,','line_number':242,'multiline':False]['text':' *   `Field f not found in class C`','line_number':243,'multiline':False]['text':' *   `Null pointer dereference`','line_number':244,'multiline':False]['text':' Represents a stack frame context.','line_number':248,'multiline':False]['text':' Demangled function name at the call site.','line_number':250,'multiline':False]['text':' Source location of the call site.','line_number':253,'multiline':False]['text':' Set of arguments passed to this function.','line_number':256,'multiline':False]['text':' Note that this might not be populated for all stack frames.','line_number':257,'multiline':False]['text':' Set of local variables at the stack frame location.','line_number':260,'multiline':False]['text':' Note that this might not be populated for all stack frames.','line_number':261,'multiline':False]['text':' Represents the breakpoint specification, status and results.','line_number':265,'multiline':False]['text':' Actions that can be taken when a breakpoint hits.','line_number':267,'multiline':False]['text':' Agents should reject breakpoints with unsupported or unknown action values.','line_number':268,'multiline':False]['text':' Capture stack frame and variables and update the breakpoint.','line_number':270,'multiline':False]['text':' The data is only captured once. After that the breakpoint is set','line_number':271,'multiline':False]['text':' in a final state.','line_number':272,'multiline':False]['text':' Log each breakpoint hit. The breakpoint remains active until','line_number':275,'multiline':False]['text':' deleted or expired.','line_number':276,'multiline':False]['text':' Log severity levels.','line_number':280,'multiline':False]['text':' Information log message.','line_number':282,'multiline':False]['text':' Warning log message.','line_number':285,'multiline':False]['text':' Error log message.','line_number':288,'multiline':False]['text':' Breakpoint identifier, unique in the scope of the debuggee.','line_number':292,'multiline':False]['text':' Action that the agent should perform when the code at the','line_number':295,'multiline':False]['text':' breakpoint location is hit.','line_number':296,'multiline':False]['text':' Breakpoint source location.','line_number':299,'multiline':False]['text':' Condition that triggers the breakpoint.','line_number':302,'multiline':False]['text':' The condition is a compound boolean expression composed using expressions','line_number':303,'multiline':False]['text':' in a programming language at the source location.','line_number':304,'multiline':False]['text':' List of read-only expressions to evaluate at the breakpoint location.','line_number':307,'multiline':False]['text':' The expressions are composed using expressions in the programming language','line_number':308,'multiline':False]['text':' at the source location. If the breakpoint action is `LOG`, the evaluated','line_number':309,'multiline':False]['text':' expressions are included in log statements.','line_number':310,'multiline':False]['text':' Only relevant when action is `LOG`. Defines the message to log when','line_number':313,'multiline':False]['text':' the breakpoint hits. The message may include parameter placeholders `$0`,','line_number':314,'multiline':False]['text':' `$1`, etc. These placeholders are replaced with the evaluated value','line_number':315,'multiline':False]['text':' of the appropriate expression. Expressions not referenced in','line_number':316,'multiline':False]['text':' `log_message_format` are not logged.','line_number':317,'multiline':False]['text':'','line_number':318,'multiline':False]['text':' Example: `Message received, id = $0, count = $1` with','line_number':319,'multiline':False]['text':' `expressions` = `[ message.id, message.count ]`.','line_number':320,'multiline':False]['text':' Indicates the severity of the log. Only relevant when action is `LOG`.','line_number':323,'multiline':False]['text':' When true, indicates that this is a final result and the','line_number':326,'multiline':False]['text':' breakpoint state will not change from here on.','line_number':327,'multiline':False]['text':' Time this breakpoint was created by the server in seconds resolution.','line_number':330,'multiline':False]['text':' Time this breakpoint was finalized as seen by the server in seconds','line_number':333,'multiline':False]['text':' resolution.','line_number':334,'multiline':False]['text':' E-mail address of the user that created this breakpoint','line_number':337,'multiline':False]['text':' Breakpoint status.','line_number':340,'multiline':False]['text':'','line_number':341,'multiline':False]['text':' The status includes an error flag and a human readable message.','line_number':342,'multiline':False]['text':' This field is usually unset. The message can be either','line_number':343,'multiline':False]['text':' informational or an error message. Regardless, clients should always','line_number':344,'multiline':False]['text':' display the text message back to the user.','line_number':345,'multiline':False]['text':'','line_number':346,'multiline':False]['text':' Error status indicates complete failure of the breakpoint.','line_number':347,'multiline':False]['text':'','line_number':348,'multiline':False]['text':' Example (non-final state): `Still loading symbols...`','line_number':349,'multiline':False]['text':'','line_number':350,'multiline':False]['text':' Examples (final state):','line_number':351,'multiline':False]['text':'','line_number':352,'multiline':False]['text':' *   `Invalid line number` referring to location','line_number':353,'multiline':False]['text':' *   `Field f not found in class C` referring to condition','line_number':354,'multiline':False]['text':' The stack at breakpoint time.','line_number':357,'multiline':False]['text':' Values of evaluated expressions at breakpoint time.','line_number':360,'multiline':False]['text':' The evaluated expressions appear in exactly the same order they','line_number':361,'multiline':False]['text':' are listed in the `expressions` field.','line_number':362,'multiline':False]['text':' The `name` field holds the original expression text, the `value` or','line_number':363,'multiline':False]['text':' `members` field holds the result of the evaluated expression.','line_number':364,'multiline':False]['text':' If the expression cannot be evaluated, the `status` inside the `Variable`','line_number':365,'multiline':False]['text':' will indicate an error and contain the error text.','line_number':366,'multiline':False]['text':' The `variable_table` exists to aid with computation, memory and network','line_number':369,'multiline':False]['text':' traffic optimization.  It enables storing a variable once and reference','line_number':370,'multiline':False]['text':' it from multiple variables, including variables stored in the','line_number':371,'multiline':False]['text':' `variable_table` itself.','line_number':372,'multiline':False]['text':' For example, the same `this` object, which may appear at many levels of','line_number':373,'multiline':False]['text':' the stack, can have all of its data stored once in this table.  The','line_number':374,'multiline':False]['text':' stack frame variables then would hold only a reference to it.','line_number':375,'multiline':False]['text':'','line_number':376,'multiline':False]['text':' The variable `var_table_index` field is an index into this repeated field.','line_number':377,'multiline':False]['text':' The stored objects are nameless and get their name from the referencing','line_number':378,'multiline':False]['text':' variable. The effective variable is a merge of the referencing variable','line_number':379,'multiline':False]['text':' and the referenced variable.','line_number':380,'multiline':False]['text':' A set of custom breakpoint properties, populated by the agent, to be','line_number':383,'multiline':False]['text':' displayed to the user.','line_number':384,'multiline':False]['text':' Represents the application to debug. The application may include one or more','line_number':388,'multiline':False]['text':' replicated processes executing the same code. Each of these processes is','line_number':389,'multiline':False]['text':' attached with a debugger agent, carrying out the debugging commands.','line_number':390,'multiline':False]['text':' The agents attached to the same debuggee are identified by using exactly the','line_number':391,'multiline':False]['text':' same field values when registering.','line_number':392,'multiline':False]['text':' Unique identifier for the debuggee generated by the controller service.','line_number':394,'multiline':False]['text':' Project the debuggee is associated with.','line_number':397,'multiline':False]['text':' Use the project number when registering a Google Cloud Platform project.','line_number':398,'multiline':False]['text':' Debuggee uniquifier within the project.','line_number':401,'multiline':False]['text':' Any string that identifies the application within the project can be used.','line_number':402,'multiline':False]['text':' Including environment and version or build IDs is recommended.','line_number':403,'multiline':False]['text':' Human readable description of the debuggee.','line_number':406,'multiline':False]['text':' Including a human-readable project name, environment name and version','line_number':407,'multiline':False]['text':' information is recommended.','line_number':408,'multiline':False]['text':' If set to `true`, indicates that the debuggee is considered as inactive by','line_number':411,'multiline':False]['text':' the Controller service.','line_number':412,'multiline':False]['text':' Version ID of the agent release. The version ID is structured as','line_number':415,'multiline':False]['text':' following: `domain/type/vmajor.minor` (for example','line_number':416,'multiline':False]['text':' `google.com/gcp-java/v1.1`).','line_number':417,'multiline':False]['text':' If set to `true`, indicates that the agent should disable itself and','line_number':420,'multiline':False]['text':' detach from the debuggee.','line_number':421,'multiline':False]['text':' Human readable message to be displayed to the user about this debuggee.','line_number':424,'multiline':False]['text':' Absence of this field indicates no status. The message can be either','line_number':425,'multiline':False]['text':' informational or an error status.','line_number':426,'multiline':False]['text':' References to the locations and revisions of the source code used in the','line_number':429,'multiline':False]['text':' deployed application.','line_number':430,'multiline':False]['text':'','line_number':431,'multiline':False]['text':' NOTE: This field is deprecated. Consumers should use','line_number':432,'multiline':False]['text':' `ext_source_contexts` if it is not empty. Debug agents should populate','line_number':433,'multiline':False]['text':' both this field and `ext_source_contexts`.','line_number':434,'multiline':False]['text':' References to the locations and revisions of the source code used in the','line_number':437,'multiline':False]['text':' deployed application.','line_number':438,'multiline':False]['text':'','line_number':439,'multiline':False]['text':' Contexts describing a remote repo related to the source code','line_number':440,'multiline':False]['text':' have a `category` label of `remote_repo`. Source snapshot source','line_number':441,'multiline':False]['text':' contexts have a `category` of `snapshot`.','line_number':442,'multiline':False]['text':' A set of custom debuggee properties, populated by the agent, to be','line_number':445,'multiline':False]['text':' displayed to the user.','line_number':446,'multiline':False]