['text':' Copyright 2017 Google Inc.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' # Transactions','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' Each session can have at most one active transaction at a time. After the','line_number':33,'multiline':False]['text':' active transaction is completed, the session can immediately be','line_number':34,'multiline':False]['text':' re-used for the next transaction. It is not necessary to create a','line_number':35,'multiline':False]['text':' new session for each transaction.','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' # Transaction Modes','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' Cloud Spanner supports two transaction modes:','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'   1. Locking read-write. This type of transaction is the only way','line_number':42,'multiline':False]['text':'      to write data into Cloud Spanner. These transactions rely on','line_number':43,'multiline':False]['text':'      pessimistic locking and, if necessary, two-phase commit.','line_number':44,'multiline':False]['text':'      Locking read-write transactions may abort, requiring the','line_number':45,'multiline':False]['text':'      application to retry.','line_number':46,'multiline':False]['text':'','line_number':47,'multiline':False]['text':'   2. Snapshot read-only. This transaction type provides guaranteed','line_number':48,'multiline':False]['text':'      consistency across several reads, but does not allow','line_number':49,'multiline':False]['text':'      writes. Snapshot read-only transactions can be configured to','line_number':50,'multiline':False]['text':'      read at timestamps in the past. Snapshot read-only','line_number':51,'multiline':False]['text':'      transactions do not need to be committed.','line_number':52,'multiline':False]['text':'','line_number':53,'multiline':False]['text':' For transactions that only read, snapshot read-only transactions','line_number':54,'multiline':False]['text':' provide simpler semantics and are almost always faster. In','line_number':55,'multiline':False]['text':' particular, read-only transactions do not take locks, so they do','line_number':56,'multiline':False]['text':' not conflict with read-write transactions. As a consequence of not','line_number':57,'multiline':False]['text':' taking locks, they also do not abort, so retry loops are not needed.','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':' Transactions may only read/write data in a single database. They','line_number':60,'multiline':False]['text':' may, however, read/write data in different tables within that','line_number':61,'multiline':False]['text':' database.','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':' ## Locking Read-Write Transactions','line_number':64,'multiline':False]['text':'','line_number':65,'multiline':False]['text':' Locking transactions may be used to atomically read-modify-write','line_number':66,'multiline':False]['text':' data anywhere in a database. This type of transaction is externally','line_number':67,'multiline':False]['text':' consistent.','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':' Clients should attempt to minimize the amount of time a transaction','line_number':70,'multiline':False]['text':' is active. Faster transactions commit with higher probability','line_number':71,'multiline':False]['text':' and cause less contention. Cloud Spanner attempts to keep read locks','line_number':72,'multiline':False]['text':' active as long as the transaction continues to do reads, and the','line_number':73,'multiline':False]['text':' transaction has not been terminated by','line_number':74,'multiline':False]['text':' [Commit][google.spanner.v1.Spanner.Commit] or','line_number':75,'multiline':False]['text':' [Rollback][google.spanner.v1.Spanner.Rollback].  Long periods of','line_number':76,'multiline':False]['text':' inactivity at the client may cause Cloud Spanner to release a','line_number':77,'multiline':False]['text':' transaction's locks and abort it.','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' Reads performed within a transaction acquire locks on the data','line_number':80,'multiline':False]['text':' being read. Writes can only be done at commit time, after all reads','line_number':81,'multiline':False]['text':' have been completed.','line_number':82,'multiline':False]['text':' Conceptually, a read-write transaction consists of zero or more','line_number':83,'multiline':False]['text':' reads or SQL queries followed by','line_number':84,'multiline':False]['text':' [Commit][google.spanner.v1.Spanner.Commit]. At any time before','line_number':85,'multiline':False]['text':' [Commit][google.spanner.v1.Spanner.Commit], the client can send a','line_number':86,'multiline':False]['text':' [Rollback][google.spanner.v1.Spanner.Rollback] request to abort the','line_number':87,'multiline':False]['text':' transaction.','line_number':88,'multiline':False]['text':'','line_number':89,'multiline':False]['text':' ### Semantics','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':' Cloud Spanner can commit the transaction if all read locks it acquired','line_number':92,'multiline':False]['text':' are still valid at commit time, and it is able to acquire write','line_number':93,'multiline':False]['text':' locks for all writes. Cloud Spanner can abort the transaction for any','line_number':94,'multiline':False]['text':' reason. If a commit attempt returns `ABORTED`, Cloud Spanner guarantees','line_number':95,'multiline':False]['text':' that the transaction has not modified any user data in Cloud Spanner.','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' Unless the transaction commits, Cloud Spanner makes no guarantees about','line_number':98,'multiline':False]['text':' how long the transaction's locks were held for. It is an error to','line_number':99,'multiline':False]['text':' use Cloud Spanner locks for any sort of mutual exclusion other than','line_number':100,'multiline':False]['text':' between Cloud Spanner transactions themselves.','line_number':101,'multiline':False]['text':'','line_number':102,'multiline':False]['text':' ### Retrying Aborted Transactions','line_number':103,'multiline':False]['text':'','line_number':104,'multiline':False]['text':' When a transaction aborts, the application can choose to retry the','line_number':105,'multiline':False]['text':' whole transaction again. To maximize the chances of successfully','line_number':106,'multiline':False]['text':' committing the retry, the client should execute the retry in the','line_number':107,'multiline':False]['text':' same session as the original attempt. The original session's lock','line_number':108,'multiline':False]['text':' priority increases with each consecutive abort, meaning that each','line_number':109,'multiline':False]['text':' attempt has a slightly better chance of success than the previous.','line_number':110,'multiline':False]['text':'','line_number':111,'multiline':False]['text':' Under some circumstances (e.g., many transactions attempting to','line_number':112,'multiline':False]['text':' modify the same row(s)), a transaction can abort many times in a','line_number':113,'multiline':False]['text':' short period before successfully committing. Thus, it is not a good','line_number':114,'multiline':False]['text':' idea to cap the number of retries a transaction can attempt;','line_number':115,'multiline':False]['text':' instead, it is better to limit the total amount of wall time spent','line_number':116,'multiline':False]['text':' retrying.','line_number':117,'multiline':False]['text':'','line_number':118,'multiline':False]['text':' ### Idle Transactions','line_number':119,'multiline':False]['text':'','line_number':120,'multiline':False]['text':' A transaction is considered idle if it has no outstanding reads or','line_number':121,'multiline':False]['text':' SQL queries and has not started a read or SQL query within the last 10','line_number':122,'multiline':False]['text':' seconds. Idle transactions can be aborted by Cloud Spanner so that they','line_number':123,'multiline':False]['text':' don't hold on to locks indefinitely. In that case, the commit will','line_number':124,'multiline':False]['text':' fail with error `ABORTED`.','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':' If this behavior is undesirable, periodically executing a simple','line_number':127,'multiline':False]['text':' SQL query in the transaction (e.g., `SELECT 1`) prevents the','line_number':128,'multiline':False]['text':' transaction from becoming idle.','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':' ## Snapshot Read-Only Transactions','line_number':131,'multiline':False]['text':'','line_number':132,'multiline':False]['text':' Snapshot read-only transactions provides a simpler method than','line_number':133,'multiline':False]['text':' locking read-write transactions for doing several consistent','line_number':134,'multiline':False]['text':' reads. However, this type of transaction does not support writes.','line_number':135,'multiline':False]['text':'','line_number':136,'multiline':False]['text':' Snapshot transactions do not take locks. Instead, they work by','line_number':137,'multiline':False]['text':' choosing a Cloud Spanner timestamp, then executing all reads at that','line_number':138,'multiline':False]['text':' timestamp. Since they do not acquire locks, they do not block','line_number':139,'multiline':False]['text':' concurrent read-write transactions.','line_number':140,'multiline':False]['text':'','line_number':141,'multiline':False]['text':' Unlike locking read-write transactions, snapshot read-only','line_number':142,'multiline':False]['text':' transactions never abort. They can fail if the chosen read','line_number':143,'multiline':False]['text':' timestamp is garbage collected; however, the default garbage','line_number':144,'multiline':False]['text':' collection policy is generous enough that most applications do not','line_number':145,'multiline':False]['text':' need to worry about this in practice.','line_number':146,'multiline':False]['text':'','line_number':147,'multiline':False]['text':' Snapshot read-only transactions do not need to call','line_number':148,'multiline':False]['text':' [Commit][google.spanner.v1.Spanner.Commit] or','line_number':149,'multiline':False]['text':' [Rollback][google.spanner.v1.Spanner.Rollback] (and in fact are not','line_number':150,'multiline':False]['text':' permitted to do so).','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' To execute a snapshot transaction, the client specifies a timestamp','line_number':153,'multiline':False]['text':' bound, which tells Cloud Spanner how to choose a read timestamp.','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':' The types of timestamp bound are:','line_number':156,'multiline':False]['text':'','line_number':157,'multiline':False]['text':'   - Strong (the default).','line_number':158,'multiline':False]['text':'   - Bounded staleness.','line_number':159,'multiline':False]['text':'   - Exact staleness.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' If the Cloud Spanner database to be read is geographically distributed,','line_number':162,'multiline':False]['text':' stale read-only transactions can execute more quickly than strong','line_number':163,'multiline':False]['text':' or read-write transaction, because they are able to execute far','line_number':164,'multiline':False]['text':' from the leader replica.','line_number':165,'multiline':False]['text':'','line_number':166,'multiline':False]['text':' Each type of timestamp bound is discussed in detail below.','line_number':167,'multiline':False]['text':'','line_number':168,'multiline':False]['text':' ### Strong','line_number':169,'multiline':False]['text':'','line_number':170,'multiline':False]['text':' Strong reads are guaranteed to see the effects of all transactions','line_number':171,'multiline':False]['text':' that have committed before the start of the read. Furthermore, all','line_number':172,'multiline':False]['text':' rows yielded by a single read are consistent with each other -- if','line_number':173,'multiline':False]['text':' any part of the read observes a transaction, all parts of the read','line_number':174,'multiline':False]['text':' see the transaction.','line_number':175,'multiline':False]['text':'','line_number':176,'multiline':False]['text':' Strong reads are not repeatable: two consecutive strong read-only','line_number':177,'multiline':False]['text':' transactions might return inconsistent results if there are','line_number':178,'multiline':False]['text':' concurrent writes. If consistency across reads is required, the','line_number':179,'multiline':False]['text':' reads should be executed within a transaction or at an exact read','line_number':180,'multiline':False]['text':' timestamp.','line_number':181,'multiline':False]['text':'','line_number':182,'multiline':False]['text':' See [TransactionOptions.ReadOnly.strong][google.spanner.v1.TransactionOptions.ReadOnly.strong].','line_number':183,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' ### Exact Staleness','line_number':185,'multiline':False]['text':'','line_number':186,'multiline':False]['text':' These timestamp bounds execute reads at a user-specified','line_number':187,'multiline':False]['text':' timestamp. Reads at a timestamp are guaranteed to see a consistent','line_number':188,'multiline':False]['text':' prefix of the global transaction history: they observe','line_number':189,'multiline':False]['text':' modifications done by all transactions with a commit timestamp <=','line_number':190,'multiline':False]['text':' the read timestamp, and observe none of the modifications done by','line_number':191,'multiline':False]['text':' transactions with a larger commit timestamp. They will block until','line_number':192,'multiline':False]['text':' all conflicting transactions that may be assigned commit timestamps','line_number':193,'multiline':False]['text':' <= the read timestamp have finished.','line_number':194,'multiline':False]['text':'','line_number':195,'multiline':False]['text':' The timestamp can either be expressed as an absolute Cloud Spanner commit','line_number':196,'multiline':False]['text':' timestamp or a staleness relative to the current time.','line_number':197,'multiline':False]['text':'','line_number':198,'multiline':False]['text':' These modes do not require a "negotiation phase" to pick a','line_number':199,'multiline':False]['text':' timestamp. As a result, they execute slightly faster than the','line_number':200,'multiline':False]['text':' equivalent boundedly stale concurrency modes. On the other hand,','line_number':201,'multiline':False]['text':' boundedly stale reads usually return fresher results.','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':' See [TransactionOptions.ReadOnly.read_timestamp][google.spanner.v1.TransactionOptions.ReadOnly.read_timestamp] and','line_number':204,'multiline':False]['text':' [TransactionOptions.ReadOnly.exact_staleness][google.spanner.v1.TransactionOptions.ReadOnly.exact_staleness].','line_number':205,'multiline':False]['text':'','line_number':206,'multiline':False]['text':' ### Bounded Staleness','line_number':207,'multiline':False]['text':'','line_number':208,'multiline':False]['text':' Bounded staleness modes allow Cloud Spanner to pick the read timestamp,','line_number':209,'multiline':False]['text':' subject to a user-provided staleness bound. Cloud Spanner chooses the','line_number':210,'multiline':False]['text':' newest timestamp within the staleness bound that allows execution','line_number':211,'multiline':False]['text':' of the reads at the closest available replica without blocking.','line_number':212,'multiline':False]['text':'','line_number':213,'multiline':False]['text':' All rows yielded are consistent with each other -- if any part of','line_number':214,'multiline':False]['text':' the read observes a transaction, all parts of the read see the','line_number':215,'multiline':False]['text':' transaction. Boundedly stale reads are not repeatable: two stale','line_number':216,'multiline':False]['text':' reads, even if they use the same staleness bound, can execute at','line_number':217,'multiline':False]['text':' different timestamps and thus return inconsistent results.','line_number':218,'multiline':False]['text':'','line_number':219,'multiline':False]['text':' Boundedly stale reads execute in two phases: the first phase','line_number':220,'multiline':False]['text':' negotiates a timestamp among all replicas needed to serve the','line_number':221,'multiline':False]['text':' read. In the second phase, reads are executed at the negotiated','line_number':222,'multiline':False]['text':' timestamp.','line_number':223,'multiline':False]['text':'','line_number':224,'multiline':False]['text':' As a result of the two phase execution, bounded staleness reads are','line_number':225,'multiline':False]['text':' usually a little slower than comparable exact staleness','line_number':226,'multiline':False]['text':' reads. However, they are typically able to return fresher','line_number':227,'multiline':False]['text':' results, and are more likely to execute at the closest replica.','line_number':228,'multiline':False]['text':'','line_number':229,'multiline':False]['text':' Because the timestamp negotiation requires up-front knowledge of','line_number':230,'multiline':False]['text':' which rows will be read, it can only be used with single-use','line_number':231,'multiline':False]['text':' read-only transactions.','line_number':232,'multiline':False]['text':'','line_number':233,'multiline':False]['text':' See [TransactionOptions.ReadOnly.max_staleness][google.spanner.v1.TransactionOptions.ReadOnly.max_staleness] and','line_number':234,'multiline':False]['text':' [TransactionOptions.ReadOnly.min_read_timestamp][google.spanner.v1.TransactionOptions.ReadOnly.min_read_timestamp].','line_number':235,'multiline':False]['text':'','line_number':236,'multiline':False]['text':' ### Old Read Timestamps and Garbage Collection','line_number':237,'multiline':False]['text':'','line_number':238,'multiline':False]['text':' Cloud Spanner continuously garbage collects deleted and overwritten data','line_number':239,'multiline':False]['text':' in the background to reclaim storage space. This process is known','line_number':240,'multiline':False]['text':' as "version GC". By default, version GC reclaims versions after they','line_number':241,'multiline':False]['text':' are one hour old. Because of this, Cloud Spanner cannot perform reads','line_number':242,'multiline':False]['text':' at read timestamps more than one hour in the past. This','line_number':243,'multiline':False]['text':' restriction also applies to in-progress reads and/or SQL queries whose','line_number':244,'multiline':False]['text':' timestamp become too old while executing. Reads and SQL queries with','line_number':245,'multiline':False]['text':' too-old read timestamps fail with the error `FAILED_PRECONDITION`.','line_number':246,'multiline':False]['text':' Options for read-write transactions.','line_number':248,'multiline':False]['text':' Options for read-only transactions.','line_number':253,'multiline':False]['text':' How to choose the timestamp for the read-only transaction.','line_number':255,'multiline':False]['text':' Read at a timestamp where all previously committed transactions','line_number':257,'multiline':False]['text':' are visible.','line_number':258,'multiline':False]['text':' Executes all reads at a timestamp >= `min_read_timestamp`.','line_number':261,'multiline':False]['text':'','line_number':262,'multiline':False]['text':' This is useful for requesting fresher data than some previous','line_number':263,'multiline':False]['text':' read, or data that is fresh enough to observe the effects of some','line_number':264,'multiline':False]['text':' previously committed transaction whose timestamp is known.','line_number':265,'multiline':False]['text':'','line_number':266,'multiline':False]['text':' Note that this option can only be used in single-use transactions.','line_number':267,'multiline':False]['text':' Read data at a timestamp >= `NOW - max_staleness`','line_number':270,'multiline':False]['text':' seconds. Guarantees that all writes that have committed more','line_number':271,'multiline':False]['text':' than the specified number of seconds ago are visible. Because','line_number':272,'multiline':False]['text':' Cloud Spanner chooses the exact timestamp, this mode works even if','line_number':273,'multiline':False]['text':' the client's local clock is substantially skewed from Cloud Spanner','line_number':274,'multiline':False]['text':' commit timestamps.','line_number':275,'multiline':False]['text':'','line_number':276,'multiline':False]['text':' Useful for reading the freshest data available at a nearby','line_number':277,'multiline':False]['text':' replica, while bounding the possible staleness if the local','line_number':278,'multiline':False]['text':' replica has fallen behind.','line_number':279,'multiline':False]['text':'','line_number':280,'multiline':False]['text':' Note that this option can only be used in single-use','line_number':281,'multiline':False]['text':' transactions.','line_number':282,'multiline':False]['text':' Executes all reads at the given timestamp. Unlike other modes,','line_number':285,'multiline':False]['text':' reads at a specific timestamp are repeatable; the same read at','line_number':286,'multiline':False]['text':' the same timestamp always returns the same data. If the','line_number':287,'multiline':False]['text':' timestamp is in the future, the read will block until the','line_number':288,'multiline':False]['text':' specified timestamp, modulo the read's deadline.','line_number':289,'multiline':False]['text':'','line_number':290,'multiline':False]['text':' Useful for large scale consistent reads such as mapreduces, or','line_number':291,'multiline':False]['text':' for coordinating many reads against a consistent snapshot of the','line_number':292,'multiline':False]['text':' data.','line_number':293,'multiline':False]['text':' Executes all reads at a timestamp that is `exact_staleness`','line_number':296,'multiline':False]['text':' old. The timestamp is chosen soon after the read is started.','line_number':297,'multiline':False]['text':'','line_number':298,'multiline':False]['text':' Guarantees that all writes that have committed more than the','line_number':299,'multiline':False]['text':' specified number of seconds ago are visible. Because Cloud Spanner','line_number':300,'multiline':False]['text':' chooses the exact timestamp, this mode works even if the client's','line_number':301,'multiline':False]['text':' local clock is substantially skewed from Cloud Spanner commit','line_number':302,'multiline':False]['text':' timestamps.','line_number':303,'multiline':False]['text':'','line_number':304,'multiline':False]['text':' Useful for reading at nearby replicas without the distributed','line_number':305,'multiline':False]['text':' timestamp negotiation overhead of `max_staleness`.','line_number':306,'multiline':False]['text':' If true, the Cloud Spanner-selected read timestamp is included in','line_number':310,'multiline':False]['text':' the [Transaction][google.spanner.v1.Transaction] message that describes the transaction.','line_number':311,'multiline':False]['text':' Required. The type of transaction.','line_number':315,'multiline':False]['text':' Transaction may write.','line_number':317,'multiline':False]['text':'','line_number':318,'multiline':False]['text':' Authorization to begin a read-write transaction requires','line_number':319,'multiline':False]['text':' `spanner.databases.beginOrRollbackReadWriteTransaction` permission','line_number':320,'multiline':False]['text':' on the `session` resource.','line_number':321,'multiline':False]['text':' Transaction will not write.','line_number':324,'multiline':False]['text':'','line_number':325,'multiline':False]['text':' Authorization to begin a read-only transaction requires','line_number':326,'multiline':False]['text':' `spanner.databases.beginReadOnlyTransaction` permission','line_number':327,'multiline':False]['text':' on the `session` resource.','line_number':328,'multiline':False]['text':' A transaction.','line_number':333,'multiline':False]['text':' `id` may be used to identify the transaction in subsequent','line_number':335,'multiline':False]['text':' [Read][google.spanner.v1.Spanner.Read],','line_number':336,'multiline':False]['text':' [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql],','line_number':337,'multiline':False]['text':' [Commit][google.spanner.v1.Spanner.Commit], or','line_number':338,'multiline':False]['text':' [Rollback][google.spanner.v1.Spanner.Rollback] calls.','line_number':339,'multiline':False]['text':'','line_number':340,'multiline':False]['text':' Single-use read-only transactions do not have IDs, because','line_number':341,'multiline':False]['text':' single-use transactions do not support multiple requests.','line_number':342,'multiline':False]['text':' For snapshot read-only transactions, the read timestamp chosen','line_number':345,'multiline':False]['text':' for the transaction. Not returned by default: see','line_number':346,'multiline':False]['text':' [TransactionOptions.ReadOnly.return_read_timestamp][google.spanner.v1.TransactionOptions.ReadOnly.return_read_timestamp].','line_number':347,'multiline':False]['text':' This message is used to select the transaction in which a','line_number':351,'multiline':False]['text':' [Read][google.spanner.v1.Spanner.Read] or','line_number':352,'multiline':False]['text':' [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] call runs.','line_number':353,'multiline':False]['text':'','line_number':354,'multiline':False]['text':' See [TransactionOptions][google.spanner.v1.TransactionOptions] for more information about transactions.','line_number':355,'multiline':False]['text':' If no fields are set, the default is a single use transaction','line_number':357,'multiline':False]['text':' with strong concurrency.','line_number':358,'multiline':False]['text':' Execute the read or SQL query in a temporary transaction.','line_number':360,'multiline':False]['text':' This is the most efficient way to execute a transaction that','line_number':361,'multiline':False]['text':' consists of a single SQL query.','line_number':362,'multiline':False]['text':' Execute the read or SQL query in a previously-started transaction.','line_number':365,'multiline':False]['text':' Begin a new transaction and execute this read or SQL query in','line_number':368,'multiline':False]['text':' it. The transaction ID of the new transaction is returned in','line_number':369,'multiline':False]['text':' [ResultSetMetadata.transaction][google.spanner.v1.ResultSetMetadata.transaction], which is a [Transaction][google.spanner.v1.Transaction].','line_number':370,'multiline':False]