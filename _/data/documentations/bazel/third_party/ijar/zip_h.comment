['text':' Copyright 2015 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' zip.h -- .zip (.jar) file reading/writing routines.','line_number':15,'multiline':False]['text':'','line_number':16,'multiline':False]['text':' This file specifies the interface to use the ZIP implementation of ijar.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' Tells if this is a directory entry from the mode. This method','line_number':29,'multiline':False]['text':' is safer than zipattr_to_mode(attr) & S_IFDIR because the unix','line_number':30,'multiline':False]['text':' mode might not be set in DOS zip files.','line_number':31,'multiline':False]['text':' Convert a ZIP file attribute to a Unix file permission mask.','line_number':34,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' Class interface for building ZIP files','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':' Returns the text for the last error, or null on no last error.','line_number':46,'multiline':False]['text':' Add a new file to the ZIP, the file will have path "filename"','line_number':49,'multiline':False]['text':' and external attributes "attr". This function returns a pointer','line_number':50,'multiline':False]['text':' to a memory buffer to write the data of the file into. This buffer','line_number':51,'multiline':False]['text':' is owned by ZipBuilder and should not be free'd by the caller. The','line_number':52,'multiline':False]['text':' file length is then specified when the files is finished written','line_number':53,'multiline':False]['text':' using the FinishFile(size_t) function.','line_number':54,'multiline':False]['text':' On failure, returns NULL and GetError() will return an non-empty message.','line_number':55,'multiline':False]['text':' Finish writing a file and specify its length. After calling this method','line_number':58,'multiline':False]['text':' one should not reuse the pointer given by NewFile. The file can be','line_number':59,'multiline':False]['text':' compressed using the deflate algorithm by setting `compress` to true.','line_number':60,'multiline':False]['text':' By default, CRC32 are not computed as java tooling doesn't care, but','line_number':61,'multiline':False]['text':' computing it can be activated by setting `compute_crc` to true.','line_number':62,'multiline':False]['text':' On failure, returns -1 and GetError() will return an non-empty message.','line_number':63,'multiline':False]['text':' Write an empty file, it is equivalent to:','line_number':68,'multiline':False]['text':'   NewFile(filename, 0);','line_number':69,'multiline':False]['text':'   FinishFile(0);','line_number':70,'multiline':False]['text':' On failure, returns -1 and GetError() will return an non-empty message.','line_number':71,'multiline':False]['text':' Finish writing the ZIP file. This method can be called only once','line_number':74,'multiline':False]['text':' (subsequent calls will do nothing) and none of','line_number':75,'multiline':False]['text':' NewFile/FinishFile/WriteEmptyFile should be called after calling Finish. If','line_number':76,'multiline':False]['text':' this method was not called when the object is destroyed, it will be called.','line_number':77,'multiline':False]['text':' It is here as a convenience to get information on the final generated ZIP','line_number':78,'multiline':False]['text':' file.','line_number':79,'multiline':False]['text':' On failure, returns -1 and GetError() will return an non-empty message.','line_number':80,'multiline':False]['text':' Get the current size of the ZIP file. This size will not be matching the','line_number':83,'multiline':False]['text':' final ZIP file until Finish() has been called because Finish() is actually','line_number':84,'multiline':False]['text':' writing the central directory of the ZIP File.','line_number':85,'multiline':False]['text':' Returns the current number of files stored in the ZIP.','line_number':88,'multiline':False]['text':' Create a new ZipBuilder writing the file zip_file and the size of the','line_number':91,'multiline':False]['text':' output will be at most estimated_size. Use ZipBuilder::EstimateSize() or','line_number':92,'multiline':False]['text':' ZipExtractor::CalculateOuputLength() to have an estimated_size depending on','line_number':93,'multiline':False]['text':' a list of file to store.','line_number':94,'multiline':False]['text':' On failure, returns NULL. Refer to errno for error code.','line_number':95,'multiline':False]['text':' Estimate the maximum size of the ZIP files containing files in the "files"','line_number':98,'multiline':False]['text':' null-terminated array.','line_number':99,'multiline':False]['text':' Returns 0 on error.','line_number':100,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' An abstract class to process data from a ZipExtractor.','line_number':106,'multiline':False]['text':' Derive from this class if you wish to process data from a ZipExtractor.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' Tells whether to skip or process the file "filename". "attr" is the','line_number':113,'multiline':False]['text':' external file attributes and can be converted to unix mode using the','line_number':114,'multiline':False]['text':' zipattr_to_mode() function. This method is suppoed to returns true','line_number':115,'multiline':False]['text':' if the file should be processed and false if it should be skipped.','line_number':116,'multiline':False]['text':' Process a file accepted by Accept. The file "filename" has external','line_number':119,'multiline':False]['text':' attributes "attr" and length "size". The file content is accessible','line_number':120,'multiline':False]['text':' in the buffer pointed by "data".','line_number':121,'multiline':False]['text':'','line_number':126,'multiline':False]['text':' Class interface for reading ZIP files','line_number':127,'multiline':False]['text':'','line_number':128,'multiline':False]['text':' Returns the text for the last error, or null on no last error.','line_number':133,'multiline':False]['text':' Process the next files, returns false if the end of ZIP file has been','line_number':136,'multiline':False]['text':' reached. The processor provided by the Create method will be called','line_number':137,'multiline':False]['text':' if a file is encountered. If false is returned, check the return value','line_number':138,'multiline':False]['text':' of GetError() for potential errors.','line_number':139,'multiline':False]['text':' Process the all files, returns -1 on error (GetError() will be populated','line_number':142,'multiline':False]['text':' on error).','line_number':143,'multiline':False]['text':' Reset the file pointer to the beginning.','line_number':146,'multiline':False]['text':' Return the size of the ZIP file.','line_number':149,'multiline':False]['text':' Return the size of the resulting zip file by keeping only file','line_number':152,'multiline':False]['text':' accepted by the processor and storing them uncompressed. This','line_number':153,'multiline':False]['text':' method can be used to create a ZipBuilder for storing a subset','line_number':154,'multiline':False]['text':' of the input files.','line_number':155,'multiline':False]['text':' On error, 0 is returned and GetError() returns a non-empty message.','line_number':156,'multiline':False]['text':' Create a ZipExtractor that extract the zip file "filename" and process','line_number':159,'multiline':False]['text':' it with "processor".','line_number':160,'multiline':False]['text':' On error, a null pointer is returned and the value of errno should be','line_number':161,'multiline':False]['text':' checked.','line_number':162,'multiline':False]['text':' namespace devtools_ijar','line_number':167,'multiline':False]['text':' INCLUDED_THIRD_PARTY_IJAR_ZIP_H','line_number':169,'multiline':False]