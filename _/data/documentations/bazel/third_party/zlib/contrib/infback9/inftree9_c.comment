['text':' inftree9.c -- generate Huffman trees for efficient decoding
 * Copyright (C) 1995-2023 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 ','line_number':1,'multiline':True]['text':'
  If you use the zlib library in a product, an acknowledgment is welcome
  in the documentation of your product. If for some reason you cannot
  include such an acknowledgment, I would appreciate that you keep this
  copyright string in the executable of your product.
 ','line_number':13,'multiline':True]['text':'
   Build a set of tables to decode the provided canonical Huffman code.
   The code lengths are lens[0..codes-1].  The result starts at *table,
   whose indices are 0..2^bits-1.  work is a writable array of at least
   lens shorts, which is used as a work area.  type is the type of code
   to be generated, CODES, LENS, or DISTS.  On return, zero is success,
   -1 is an invalid code, and +1 means that ENOUGH isn't enough.  table
   on return points to the next available entry's address.  bits is the
   requested root table index bits, and on return it is the actual root
   table index bits.  It will differ if the request is greater than the
   longest code or if it is less than the shortest code.
 ','line_number':20,'multiline':True]['text':' a code's length in bits ','line_number':35,'multiline':True]['text':' index of code symbols ','line_number':36,'multiline':True]['text':' minimum and maximum code lengths ','line_number':37,'multiline':True]['text':' number of index bits for root table ','line_number':38,'multiline':True]['text':' number of index bits for current table ','line_number':39,'multiline':True]['text':' code bits to drop for sub-table ','line_number':40,'multiline':True]['text':' number of prefix codes available ','line_number':41,'multiline':True]['text':' code entries in table used ','line_number':42,'multiline':True]['text':' Huffman code ','line_number':43,'multiline':True]['text':' for incrementing code, index ','line_number':44,'multiline':True]['text':' index for replicating entries ','line_number':45,'multiline':True]['text':' low bits for current root entry ','line_number':46,'multiline':True]['text':' mask for low root bits ','line_number':47,'multiline':True]['text':' table entry for duplication ','line_number':48,'multiline':True]['text':' next available space in table ','line_number':49,'multiline':True]['text':' base value table to use ','line_number':50,'multiline':True]['text':' extra bits table to use ','line_number':51,'multiline':True]['text':' use base and extra for symbol > end ','line_number':52,'multiline':True]['text':' number of codes of each length ','line_number':53,'multiline':True]['text':' offsets in table for each length ','line_number':54,'multiline':True]['text':' Length codes 257..285 base ','line_number':55,'multiline':True]['text':' Length codes 257..285 extra ','line_number':59,'multiline':True]['text':' Distance codes 0..31 base ','line_number':63,'multiline':True]['text':' Distance codes 0..31 extra ','line_number':67,'multiline':True]['text':'
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.

       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.

       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.

       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
     ','line_number':72,'multiline':True]['text':' accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) ','line_number':103,'multiline':True]['text':' bound code lengths, force root to be within code lengths ','line_number':109,'multiline':True]['text':' no codes! ','line_number':114,'multiline':True]['text':' check for an over-subscribed or incomplete set of lengths ','line_number':119,'multiline':True]['text':' over-subscribed ','line_number':124,'multiline':True]['text':' incomplete set ','line_number':127,'multiline':True]['text':' generate offsets into symbol table for each length for sorting ','line_number':129,'multiline':True]['text':' sort symbols by length, by symbol order within each length ','line_number':134,'multiline':True]['text':'
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.

       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.

       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.

       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftree9.h
       for more information.

       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
     ','line_number':138,'multiline':True]['text':' set up for code type ','line_number':169,'multiline':True]['text':' dummy value--not used ','line_number':172,'multiline':True]['text':' DISTS ','line_number':182,'multiline':True]['text':' initialize state for loop ','line_number':188,'multiline':True]['text':' starting code ','line_number':189,'multiline':True]['text':' starting code symbol ','line_number':190,'multiline':True]['text':' starting code length ','line_number':191,'multiline':True]['text':' current table to fill in ','line_number':192,'multiline':True]['text':' current table index bits ','line_number':193,'multiline':True]['text':' current bits to drop from code for index ','line_number':194,'multiline':True]['text':' trigger new sub-table when len > root ','line_number':195,'multiline':True]['text':' use root table entries ','line_number':196,'multiline':True]['text':' mask for comparing low ','line_number':197,'multiline':True]['text':' check available table space ','line_number':199,'multiline':True]['text':' process all codes and make table entries ','line_number':204,'multiline':True]['text':' create table entry ','line_number':206,'multiline':True]['text':' end of block ','line_number':217,'multiline':True]['text':' replicate for those indices with low len bits equal to huff ','line_number':221,'multiline':True]['text':' backwards increment the len-bit code huff ','line_number':229,'multiline':True]['text':' go to next symbol, update count, len ','line_number':240,'multiline':True]['text':' create new sub-table if needed ','line_number':247,'multiline':True]['text':' if first time, transition to sub-tables ','line_number':249,'multiline':True]['text':' increment past last table ','line_number':253,'multiline':True]['text':' determine length of next table ','line_number':256,'multiline':True]['text':' check for enough space ','line_number':266,'multiline':True]['text':' point entry in root table to sub-table ','line_number':272,'multiline':True]['text':'
       Fill in rest of table for incomplete codes.  This loop is similar to the
       loop above in incrementing huff for table indices.  It is assumed that
       len is equal to curr + drop, so there is no loop needed to increment
       through high index bits.  When the current sub-table is filled, the loop
       drops back to the root table to fill in any remaining entries there.
     ','line_number':280,'multiline':True]['text':' invalid code marker ','line_number':287,'multiline':True]['text':' when done with sub-table, drop back to root table ','line_number':291,'multiline':True]['text':' put invalid code marker in table ','line_number':300,'multiline':True]['text':' backwards increment the len-bit code huff ','line_number':303,'multiline':True]['text':' set return parameters ','line_number':315,'multiline':True]