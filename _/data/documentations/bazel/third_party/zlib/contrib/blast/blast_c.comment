['text':' blast.c
 * Copyright (C) 2003, 2012, 2013 Mark Adler
 * For conditions of distribution and use, see copyright notice in blast.h
 * version 1.3, 24 Aug 2013
 *
 * blast.c decompresses data compressed by the PKWare Compression Library.
 * This function provides functionality similar to the explode() function of
 * the PKWare library, hence the name "blast".
 *
 * This decompressor is based on the excellent format description provided by
 * Ben Rudiak-Gould in comp.compression on August 13, 2001.  Interestingly, the
 * example Ben provided in the post is incorrect.  The distance 110001 should
 * instead be 111000.  When corrected, the example byte stream becomes:
 *
 *    00 04 82 24 25 8f 80 7f
 *
 * which decompresses to "AIAIAIAIAIAIA" (without the quotes).
 ','line_number':1,'multiline':True]['text':'
 * Change history:
 *
 * 1.0  12 Feb 2003     - First version
 * 1.1  16 Feb 2003     - Fixed distance check for > 4 GB uncompressed data
 * 1.2  24 Oct 2012     - Add note about using binary mode in stdio
 *                      - Fix comparisons of differently signed integers
 * 1.3  24 Aug 2013     - Return unused input from blast()
 *                      - Fix test code to correctly report unused input
 *                      - Enable the provision of initial input to blast()
 ','line_number':20,'multiline':True]['text':' for NULL ','line_number':32,'multiline':True]['text':' for setjmp(), longjmp(), and jmp_buf ','line_number':33,'multiline':True]['text':' prototype for blast() ','line_number':34,'multiline':True]['text':' for local function definitions ','line_number':36,'multiline':True]['text':' maximum code length ','line_number':37,'multiline':True]['text':' maximum window size ','line_number':38,'multiline':True]['text':' input and output state ','line_number':40,'multiline':True]['text':' input state ','line_number':42,'multiline':True]['text':' input function provided by user ','line_number':43,'multiline':True]['text':' opaque information passed to infun() ','line_number':44,'multiline':True]['text':' next input location ','line_number':45,'multiline':True]['text':' available input at in ','line_number':46,'multiline':True]['text':' bit buffer ','line_number':47,'multiline':True]['text':' number of bits in bit buffer ','line_number':48,'multiline':True]['text':' input limit error return state for bits() and decode() ','line_number':50,'multiline':True]['text':' output state ','line_number':53,'multiline':True]['text':' output function provided by user ','line_number':54,'multiline':True]['text':' opaque information passed to outfun() ','line_number':55,'multiline':True]['text':' index of next write location in out[] ','line_number':56,'multiline':True]['text':' true to check distances (for first 4K) ','line_number':57,'multiline':True]['text':' output buffer and sliding window ','line_number':58,'multiline':True]['text':'
 * Return need bits from the input stream.  This always leaves less than
 * eight bits in the buffer.  bits() works properly for need == 0.
 *
 * Format notes:
 *
 * - Bits are stored in bytes from the least significant bit to the most
 *   significant bit.  Therefore bits are dropped from the bottom of the bit
 *   buffer, using shift right, and new bytes are appended to the top of the
 *   bit buffer, using shift left.
 ','line_number':61,'multiline':True]['text':' bit accumulator ','line_number':74,'multiline':True]['text':' load at least need bits into val ','line_number':76,'multiline':True]['text':' out of input ','line_number':81,'multiline':True]['text':' load eight bits ','line_number':83,'multiline':True]['text':' drop need bits and update buffer, always zero to seven bits left ','line_number':88,'multiline':True]['text':' return need bits, zeroing the bits above that ','line_number':92,'multiline':True]['text':'
 * Huffman code decoding tables.  count[1..MAXBITS] is the number of symbols of
 * each length, which for a canonical code are stepped through in order.
 * symbol[] are the symbol values in canonical order, where the number of
 * entries is the sum of the counts in count[].  The decoding process can be
 * seen in the function decode() below.
 ','line_number':96,'multiline':True]['text':' number of symbols of each length ','line_number':104,'multiline':True]['text':' canonically ordered symbols ','line_number':105,'multiline':True]['text':'
 * Decode a code from the stream s using huffman table h.  Return the symbol or
 * a negative value if there is an error.  If all of the lengths are zero, i.e.
 * an empty code, or if the code is incomplete and an invalid code is received,
 * then -9 is returned after reading MAXBITS bits.
 *
 * Format notes:
 *
 * - The codes as stored in the compressed data are bit-reversed relative to
 *   a simple integer ordering of codes of the same lengths.  Hence below the
 *   bits are pulled from the compressed data one at a time and used to
 *   build the code value reversed from what is in the stream in order to
 *   permit simple integer comparisons for decoding.
 *
 * - The first code for the shortest length is all ones.  Subsequent codes of
 *   the same length are simply integer decrements of the previous code.  When
 *   moving up a length, a one bit is appended to the code.  For a complete
 *   code, the last code of the longest length will be all zeros.  To support
 *   this ordering, the bits pulled during decoding are inverted to apply the
 *   more "natural" ordering starting with all zeros and incrementing.
 ','line_number':108,'multiline':True]['text':' current number of bits in code ','line_number':131,'multiline':True]['text':' len bits being decoded ','line_number':132,'multiline':True]['text':' first code of length len ','line_number':133,'multiline':True]['text':' number of codes of length len ','line_number':134,'multiline':True]['text':' index of first code of length len in symbol table ','line_number':135,'multiline':True]['text':' bits from stream ','line_number':136,'multiline':True]['text':' bits left in next or left to process ','line_number':137,'multiline':True]['text':' next number of codes ','line_number':138,'multiline':True]['text':' invert code ','line_number':147,'multiline':True]['text':' if length len, return symbol ','line_number':150,'multiline':True]['text':' else update for next length ','line_number':155,'multiline':True]['text':' out of input ','line_number':165,'multiline':True]['text':' ran out of codes ','line_number':171,'multiline':True]['text':'
 * Given a list of repeated code lengths rep[0..n-1], where each byte is a
 * count (high four bits + 1) and a code length (low four bits), generate the
 * list of code lengths.  This compaction reduces the size of the object code.
 * Then given the list of code lengths length[0..n-1] representing a canonical
 * Huffman code for n symbols, construct the tables required to decode those
 * codes.  Those tables are the number of codes of each length, and the symbols
 * sorted by length, retaining their original order within each length.  The
 * return value is zero for a complete code set, negative for an over-
 * subscribed code set, and positive for an incomplete code set.  The tables
 * can be used if the return value is zero or positive, but they cannot be used
 * if the return value is negative.  If the return value is zero, it is not
 * possible for decode() using that table to return an error--any stream of
 * enough bits will resolve to a symbol.  If the return value is positive, then
 * it is possible for decode() using that table to return an error for received
 * codes past the end of the incomplete lengths.
 ','line_number':174,'multiline':True]['text':' current symbol when stepping through length[] ','line_number':193,'multiline':True]['text':' current length when stepping through h->count[] ','line_number':194,'multiline':True]['text':' number of possible codes left of current length ','line_number':195,'multiline':True]['text':' offsets in symbol table for each length ','line_number':196,'multiline':True]['text':' code lengths ','line_number':197,'multiline':True]['text':' convert compact repeat counts into symbol bit length list ','line_number':199,'multiline':True]['text':' count number of codes of each length ','line_number':211,'multiline':True]['text':' assumes lengths are within bounds ','line_number':215,'multiline':True]['text':' no codes! ','line_number':216,'multiline':True]['text':' complete, but decode() will fail ','line_number':217,'multiline':True]['text':' check for an over-subscribed or incomplete set of lengths ','line_number':219,'multiline':True]['text':' one possible code of zero length ','line_number':220,'multiline':True]['text':' one more bit, double codes left ','line_number':222,'multiline':True]['text':' deduct count from possible codes ','line_number':223,'multiline':True]['text':' over-subscribed--return negative ','line_number':224,'multiline':True]['text':' left > 0 means incomplete ','line_number':225,'multiline':True]['text':' generate offsets into symbol table for each length for sorting ','line_number':227,'multiline':True]['text':'
     * put symbols in table sorted by length, by symbol order within each
     * length
     ','line_number':232,'multiline':True]['text':' return zero for complete set, positive for incomplete set ','line_number':240,'multiline':True]['text':'
 * Decode PKWare Compression Library stream.
 *
 * Format notes:
 *
 * - First byte is 0 if literals are uncoded or 1 if they are coded.  Second
 *   byte is 4, 5, or 6 for the number of extra bits in the distance code.
 *   This is the base-2 logarithm of the dictionary size minus six.
 *
 * - Compressed data is a combination of literals and length/distance pairs
 *   terminated by an end code.  Literals are either Huffman coded or
 *   uncoded bytes.  A length/distance pair is a coded length followed by a
 *   coded distance to represent a string that occurs earlier in the
 *   uncompressed data that occurs again at the current location.
 *
 * - A bit preceding a literal or length/distance pair indicates which comes
 *   next, 0 for literals, 1 for length/distance.
 *
 * - If literals are uncoded, then the next eight bits are the literal, in the
 *   normal bit order in the stream, i.e. no bit-reversal is needed. Similarly,
 *   no bit reversal is needed for either the length extra bits or the distance
 *   extra bits.
 *
 * - Literal bytes are simply written to the output.  A length/distance pair is
 *   an instruction to copy previously uncompressed bytes to the output.  The
 *   copy is from distance bytes back in the output stream, copying for length
 *   bytes.
 *
 * - Distances pointing before the beginning of the output data are not
 *   permitted.
 *
 * - Overlapped copies, where the length is greater than the distance, are
 *   allowed and common.  For example, a distance of one and a length of 518
 *   simply copies the last byte 518 times.  A distance of four and a length of
 *   twelve copies the last four bytes three times.  A simple forward copy
 *   ignoring whether the length is greater than the distance or not implements
 *   this correctly.
 ','line_number':244,'multiline':True]['text':' true if literals are coded ','line_number':284,'multiline':True]['text':' log2(dictionary size) - 6 ','line_number':285,'multiline':True]['text':' decoded symbol, extra bits for distance ','line_number':286,'multiline':True]['text':' length for copy ','line_number':287,'multiline':True]['text':' distance for copy ','line_number':288,'multiline':True]['text':' copy counter ','line_number':289,'multiline':True]['text':' copy pointers ','line_number':290,'multiline':True]['text':' build tables once ','line_number':291,'multiline':True]['text':' litcode memory ','line_number':292,'multiline':True]['text':' lencode memory ','line_number':293,'multiline':True]['text':' distcode memory ','line_number':294,'multiline':True]['text':' length code ','line_number':295,'multiline':True]['text':' length code ','line_number':296,'multiline':True]['text':' distance code ','line_number':297,'multiline':True]['text':' bit lengths of literal codes ','line_number':298,'multiline':True]['text':' bit lengths of length codes 0..15 ','line_number':306,'multiline':True]['text':' bit lengths of distance codes 0..63 ','line_number':308,'multiline':True]['text':' base for length codes ','line_number':310,'multiline':True]['text':' extra bits for length codes ','line_number':312,'multiline':True]['text':' set up decoding tables (once--might not be thread-safe) ','line_number':315,'multiline':True]['text':' read header ','line_number':323,'multiline':True]['text':' decode literals and length/distance pairs ','line_number':329,'multiline':True]['text':' get length ','line_number':332,'multiline':True]['text':' end code ','line_number':335,'multiline':True]['text':' get distance ','line_number':337,'multiline':True]['text':' distance too far back ','line_number':343,'multiline':True]['text':' copy length bytes from distance bytes back ','line_number':345,'multiline':True]['text':' get literal and write it ','line_number':369,'multiline':True]['text':' See comments in blast.h ','line_number':382,'multiline':True]['text':' input/output state ','line_number':386,'multiline':True]['text':' return value ','line_number':387,'multiline':True]['text':' initialize input state ','line_number':389,'multiline':True]['text':' initialize output state ','line_number':401,'multiline':True]['text':' return if bits() or decode() tries to read past available input ','line_number':407,'multiline':True]['text':' if came back here via longjmp(), ','line_number':408,'multiline':True]['text':'  then skip decomp(), return error ','line_number':409,'multiline':True]['text':' decompress ','line_number':411,'multiline':True]['text':' return unused input ','line_number':413,'multiline':True]['text':' write any leftover output and update the error code if needed ','line_number':419,'multiline':True]['text':' Example of how to use blast() ','line_number':426,'multiline':True]['text':' Decompress a PKWare Compression Library stream from stdin to stdout ','line_number':445,'multiline':True]['text':' decompress to stdout ','line_number':451,'multiline':True]['text':' count any leftover bytes ','line_number':457,'multiline':True]['text':' return blast() error code ','line_number':463,'multiline':True]