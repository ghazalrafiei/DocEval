['text':'
 * A C++ I/O streams interface to the zlib gz* functions
 *
 * by Ludwig Schwardt <schwardt@sun.ac.za>
 * original version by Kevin Ruland <kevin@rodin.wustl.edu>
 *
 * This version is standard-compliant and compatible with gcc 3.x.
 ','line_number':1,'multiline':True]['text':' not iostream, since we don't need cin/cout','line_number':13,'multiline':False]['text':'***************************************************************************','line_number':17,'multiline':True]['text':'*
 *  @brief  Gzipped file stream buffer class.
 *
 *  This class implements basic_filebuf for gzipped files. It doesn't yet support
 *  seeking (allowed by zlib but slow/limited), putback and read/write access
 *  (tricky). Otherwise, it attempts to be a drop-in replacement for the standard
 *  file streambuf.
','line_number':19,'multiline':True]['text':'  Default constructor.','line_number':30,'multiline':False]['text':'  Destructor.','line_number':33,'multiline':False]['text':'*
   *  @brief  Set compression level and strategy on the fly.
   *  @param  comp_level  Compression level (see zlib.h for allowed values)
   *  @param  comp_strategy  Compression strategy (see zlib.h for allowed values)
   *  @return  Z_OK on success, Z_STREAM_ERROR otherwise.
   *
   *  Unfortunately, these parameters cannot be modified separately, as the
   *  previous zfstream version assumed. Since the strategy is seldom changed,
   *  it can default and setcompression(level) then becomes like the old
   *  setcompressionlevel(level).
  ','line_number':37,'multiline':True]['text':'*
   *  @brief  Check if file is open.
   *  @return  True if file is open.
  ','line_number':52,'multiline':True]['text':'*
   *  @brief  Open gzipped file.
   *  @param  name  File name.
   *  @param  mode  Open mode flags.
   *  @return  @c this on success, NULL on failure.
  ','line_number':59,'multiline':True]['text':'*
   *  @brief  Attach to already open gzipped file.
   *  @param  fd  File descriptor.
   *  @param  mode  Open mode flags.
   *  @return  @c this on success, NULL on failure.
  ','line_number':69,'multiline':True]['text':'*
   *  @brief  Close gzipped file.
   *  @return  @c this on success, NULL on failure.
  ','line_number':79,'multiline':True]['text':'*
   *  @brief  Convert ios open mode int to mode string used by zlib.
   *  @return  True if valid mode flag combination.
  ','line_number':87,'multiline':True]['text':'*
   *  @brief  Number of characters available in stream buffer.
   *  @return  Number of characters.
   *
   *  This indicates number of characters in get area of stream buffer.
   *  These characters can be read without accessing the gzipped file.
  ','line_number':95,'multiline':True]['text':'*
   *  @brief  Fill get area from gzipped file.
   *  @return  First character in get area on success, EOF on error.
   *
   *  This actually reads characters from gzipped file to stream
   *  buffer. Always buffered.
  ','line_number':105,'multiline':True]['text':'*
   *  @brief  Write put area to gzipped file.
   *  @param  c  Extra character to add to buffer contents.
   *  @return  Non-EOF on success, EOF on error.
   *
   *  This actually writes characters in stream buffer to
   *  gzipped file. With unbuffered output this is done one
   *  character at a time.
  ','line_number':115,'multiline':True]['text':'*
   *  @brief  Installs external stream buffer.
   *  @param  p  Pointer to char buffer.
   *  @param  n  Size of external buffer.
   *  @return  @c this on success, NULL on failure.
   *
   *  Call setbuf(0,0) to enable unbuffered output.
  ','line_number':127,'multiline':True]['text':'*
   *  @brief  Flush stream buffer to file.
   *  @return  0 on success, -1 on error.
   *
   *  This calls underflow(EOF) to do the job.
  ','line_number':139,'multiline':True]['text':'','line_number':148,'multiline':False]['text':' Some future enhancements','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':'  virtual int_type uflow();','line_number':151,'multiline':False]['text':'  virtual int_type pbackfail(int_type c = traits_type::eof());','line_number':152,'multiline':False]['text':'  virtual pos_type','line_number':153,'multiline':False]['text':'  seekoff(off_type off,','line_number':154,'multiline':False]['text':'          std::ios_base::seekdir way,','line_number':155,'multiline':False]['text':'          std::ios_base::openmode mode = std::ios_base::in|std::ios_base::out);','line_number':156,'multiline':False]['text':'  virtual pos_type','line_number':157,'multiline':False]['text':'  seekpos(pos_type sp,','line_number':158,'multiline':False]['text':'          std::ios_base::openmode mode = std::ios_base::in|std::ios_base::out);','line_number':159,'multiline':False]['text':'*
   *  @brief  Allocate internal buffer.
   *
   *  This function is safe to call multiple times. It will ensure
   *  that a proper internal buffer exists if it is required. If the
   *  buffer already exists or is external, the buffer pointers will be
   *  reset to their original state.
  ','line_number':162,'multiline':True]['text':'*
   *  @brief  Destroy internal buffer.
   *
   *  This function is safe to call multiple times. It will ensure
   *  that the internal buffer is deallocated if it exists. In any
   *  case, it will also reset the buffer pointers.
  ','line_number':173,'multiline':True]['text':'*
   *  Underlying file pointer.
  ','line_number':183,'multiline':True]['text':'*
   *  Mode in which file was opened.
  ','line_number':188,'multiline':True]['text':'*
   *  @brief  True if this object owns file descriptor.
   *
   *  This makes the class responsible for closing the file
   *  upon destruction.
  ','line_number':193,'multiline':True]['text':'*
   *  @brief  Stream buffer.
   *
   *  For simplicity this remains allocated on the free store for the
   *  entire life span of the gzfilebuf object, unless replaced by setbuf.
  ','line_number':201,'multiline':True]['text':'*
   *  @brief  Stream buffer size.
   *
   *  Defaults to system default buffer size (typically 8192 bytes).
   *  Modified by setbuf.
  ','line_number':209,'multiline':True]['text':'*
   *  @brief  True if this object owns stream buffer.
   *
   *  This makes the class responsible for deleting the buffer
   *  upon destruction.
  ','line_number':217,'multiline':True]['text':'***************************************************************************','line_number':226,'multiline':True]['text':'*
 *  @brief  Gzipped file input stream class.
 *
 *  This class implements ifstream for gzipped files. Seeking and putback
 *  is not supported yet.
','line_number':228,'multiline':True]['text':'  Default constructor','line_number':237,'multiline':False]['text':'*
   *  @brief  Construct stream on gzipped file to be opened.
   *  @param  name  File name.
   *  @param  mode  Open mode flags (forced to contain ios::in).
  ','line_number':240,'multiline':True]['text':'*
   *  @brief  Construct stream on already open gzipped file.
   *  @param  fd    File descriptor.
   *  @param  mode  Open mode flags (forced to contain ios::in).
  ','line_number':249,'multiline':True]['text':'*
   *  Obtain underlying stream buffer.
  ','line_number':258,'multiline':True]['text':'*
   *  @brief  Check if file is open.
   *  @return  True if file is open.
  ','line_number':265,'multiline':True]['text':'*
   *  @brief  Open gzipped file.
   *  @param  name  File name.
   *  @param  mode  Open mode flags (forced to contain ios::in).
   *
   *  Stream will be in state good() if file opens successfully;
   *  otherwise in state fail(). This differs from the behavior of
   *  ifstream, which never sets the state to good() and therefore
   *  won't allow you to reuse the stream for a second file unless
   *  you manually clear() the state. The choice is a matter of
   *  convenience.
  ','line_number':272,'multiline':True]['text':'*
   *  @brief  Attach to already open gzipped file.
   *  @param  fd  File descriptor.
   *  @param  mode  Open mode flags (forced to contain ios::in).
   *
   *  Stream will be in state good() if attach succeeded; otherwise
   *  in state fail().
  ','line_number':288,'multiline':True]['text':'*
   *  @brief  Close gzipped file.
   *
   *  Stream will be in state fail() if close failed.
  ','line_number':300,'multiline':True]['text':'*
   *  Underlying stream buffer.
  ','line_number':309,'multiline':True]['text':'***************************************************************************','line_number':315,'multiline':True]['text':'*
 *  @brief  Gzipped file output stream class.
 *
 *  This class implements ofstream for gzipped files. Seeking and putback
 *  is not supported yet.
','line_number':317,'multiline':True]['text':'  Default constructor','line_number':326,'multiline':False]['text':'*
   *  @brief  Construct stream on gzipped file to be opened.
   *  @param  name  File name.
   *  @param  mode  Open mode flags (forced to contain ios::out).
  ','line_number':329,'multiline':True]['text':'*
   *  @brief  Construct stream on already open gzipped file.
   *  @param  fd    File descriptor.
   *  @param  mode  Open mode flags (forced to contain ios::out).
  ','line_number':338,'multiline':True]['text':'*
   *  Obtain underlying stream buffer.
  ','line_number':347,'multiline':True]['text':'*
   *  @brief  Check if file is open.
   *  @return  True if file is open.
  ','line_number':354,'multiline':True]['text':'*
   *  @brief  Open gzipped file.
   *  @param  name  File name.
   *  @param  mode  Open mode flags (forced to contain ios::out).
   *
   *  Stream will be in state good() if file opens successfully;
   *  otherwise in state fail(). This differs from the behavior of
   *  ofstream, which never sets the state to good() and therefore
   *  won't allow you to reuse the stream for a second file unless
   *  you manually clear() the state. The choice is a matter of
   *  convenience.
  ','line_number':361,'multiline':True]['text':'*
   *  @brief  Attach to already open gzipped file.
   *  @param  fd  File descriptor.
   *  @param  mode  Open mode flags (forced to contain ios::out).
   *
   *  Stream will be in state good() if attach succeeded; otherwise
   *  in state fail().
  ','line_number':377,'multiline':True]['text':'*
   *  @brief  Close gzipped file.
   *
   *  Stream will be in state fail() if close failed.
  ','line_number':389,'multiline':True]['text':'*
   *  Underlying stream buffer.
  ','line_number':398,'multiline':True]['text':'***************************************************************************','line_number':404,'multiline':True]['text':'*
 *  @brief  Gzipped file output stream manipulator class.
 *
 *  This class defines a two-argument manipulator for gzofstream. It is used
 *  as base for the setcompression(int,int) manipulator.
','line_number':406,'multiline':True]['text':' Allows insertor to peek at internals','line_number':416,'multiline':False]['text':' Constructor','line_number':422,'multiline':False]['text':' Underlying manipulator function','line_number':427,'multiline':False]['text':' Arguments for manipulator function','line_number':431,'multiline':False]['text':'***************************************************************************','line_number':436,'multiline':True]['text':' Manipulator function thunks through to stream buffer','line_number':438,'multiline':False]['text':' Manipulator constructor stores arguments','line_number':446,'multiline':False]['text':' Insertor applies underlying manipulator function to stream','line_number':455,'multiline':False]['text':' Insert this onto stream to simplify setting of compression level','line_number':461,'multiline':False]['text':' ZFSTREAM_H','line_number':466,'multiline':False]