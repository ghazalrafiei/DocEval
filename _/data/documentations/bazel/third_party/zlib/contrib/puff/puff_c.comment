['text':'
 * puff.c
 * Copyright (C) 2002-2013 Mark Adler
 * For conditions of distribution and use, see copyright notice in puff.h
 * version 2.3, 21 Jan 2013
 *
 * puff.c is a simple inflate written to be an unambiguous way to specify the
 * deflate format.  It is not written for speed but rather simplicity.  As a
 * side benefit, this code might actually be useful when small code is more
 * important than speed, such as bootstrap applications.  For typical deflate
 * data, zlib's inflate() is about four times as fast as puff().  zlib's
 * inflate compiles to around 20K on my machine, whereas puff.c compiles to
 * around 4K on my machine (a PowerPC using GNU cc).  If the faster decode()
 * function here is used, then puff() is only twice as slow as zlib's
 * inflate().
 *
 * All dynamically allocated memory comes from the stack.  The stack required
 * is less than 2K bytes.  This code is compatible with 16-bit int's and
 * assumes that long's are at least 32 bits.  puff.c uses the short data type,
 * assumed to be 16 bits, for arrays in order to conserve memory.  The code
 * works whether integers are stored big endian or little endian.
 *
 * In the comments below are "Format notes" that describe the inflate process
 * and document some of the less obvious aspects of the format.  This source
 * code is meant to supplement RFC 1951, which formally describes the deflate
 * format:
 *
 *    http://www.zlib.org/rfc-deflate.html
 ','line_number':1,'multiline':True]['text':'
 * Change history:
 *
 * 1.0  10 Feb 2002     - First version
 * 1.1  17 Feb 2002     - Clarifications of some comments and notes
 *                      - Update puff() dest and source pointers on negative
 *                        errors to facilitate debugging deflators
 *                      - Remove longest from struct huffman -- not needed
 *                      - Simplify offs[] index in construct()
 *                      - Add input size and checking, using longjmp() to
 *                        maintain easy readability
 *                      - Use short data type for large arrays
 *                      - Use pointers instead of long to specify source and
 *                        destination sizes to avoid arbitrary 4 GB limits
 * 1.2  17 Mar 2002     - Add faster version of decode(), doubles speed (!),
 *                        but leave simple version for readability
 *                      - Make sure invalid distances detected if pointers
 *                        are 16 bits
 *                      - Fix fixed codes table error
 *                      - Provide a scanning mode for determining size of
 *                        uncompressed data
 * 1.3  20 Mar 2002     - Go back to lengths for puff() parameters [Gailly]
 *                      - Add a puff.h file for the interface
 *                      - Add braces in puff() for else do [Gailly]
 *                      - Use indexes instead of pointers for readability
 * 1.4  31 Mar 2002     - Simplify construct() code set check
 *                      - Fix some comments
 *                      - Add FIXLCODES #define
 * 1.5   6 Apr 2002     - Minor comment fixes
 * 1.6   7 Aug 2002     - Minor format changes
 * 1.7   3 Mar 2003     - Added test code for distribution
 *                      - Added zlib-like license
 * 1.8   9 Jan 2004     - Added some comments on no distance codes case
 * 1.9  21 Feb 2008     - Fix bug on 16-bit integer architectures [Pohland]
 *                      - Catch missing end-of-block symbol error
 * 2.0  25 Jul 2008     - Add #define to permit distance too far back
 *                      - Add option in TEST code for puff to write the data
 *                      - Add option in TEST code to skip input bytes
 *                      - Allow TEST code to read from piped stdin
 * 2.1   4 Apr 2010     - Avoid variable initialization for happier compilers
 *                      - Avoid unsigned comparisons for even happier compilers
 * 2.2  25 Apr 2010     - Fix bug in variable initializations [Oberhumer]
 *                      - Add const where appropriate [Oberhumer]
 *                      - Split if's and ?'s for coverage testing
 *                      - Break out test code to separate file
 *                      - Move NIL to puff.h
 *                      - Allow incomplete code only if single code length is 1
 *                      - Add full code coverage test to Makefile
 * 2.3  21 Jan 2013     - Check for invalid code length codes in dynamic blocks
 ','line_number':31,'multiline':True]['text':' for setjmp(), longjmp(), and jmp_buf ','line_number':82,'multiline':True]['text':' prototype for puff() ','line_number':83,'multiline':True]['text':' for local function definitions ','line_number':85,'multiline':True]['text':'
 * Maximums for allocations and loops.  It is not useful to change these --
 * they are fixed by the deflate format.
 ','line_number':87,'multiline':True]['text':' maximum bits in a code ','line_number':91,'multiline':True]['text':' maximum number of literal/length codes ','line_number':92,'multiline':True]['text':' maximum number of distance codes ','line_number':93,'multiline':True]['text':' maximum codes lengths to read ','line_number':94,'multiline':True]['text':' number of fixed literal/length codes ','line_number':95,'multiline':True]['text':' input and output state ','line_number':97,'multiline':True]['text':' output state ','line_number':99,'multiline':True]['text':' output buffer ','line_number':100,'multiline':True]['text':' available space at out ','line_number':101,'multiline':True]['text':' bytes written to out so far ','line_number':102,'multiline':True]['text':' input state ','line_number':104,'multiline':True]['text':' input buffer ','line_number':105,'multiline':True]['text':' available input at in ','line_number':106,'multiline':True]['text':' bytes read so far ','line_number':107,'multiline':True]['text':' bit buffer ','line_number':108,'multiline':True]['text':' number of bits in bit buffer ','line_number':109,'multiline':True]['text':' input limit error return state for bits() and decode() ','line_number':111,'multiline':True]['text':'
 * Return need bits from the input stream.  This always leaves less than
 * eight bits in the buffer.  bits() works properly for need == 0.
 *
 * Format notes:
 *
 * - Bits are stored in bytes from the least significant bit to the most
 *   significant bit.  Therefore bits are dropped from the bottom of the bit
 *   buffer, using shift right, and new bytes are appended to the top of the
 *   bit buffer, using shift left.
 ','line_number':115,'multiline':True]['text':' bit accumulator (can use up to 20 bits) ','line_number':128,'multiline':True]['text':' load at least need bits into val ','line_number':130,'multiline':True]['text':' out of input ','line_number':134,'multiline':True]['text':' load eight bits ','line_number':135,'multiline':True]['text':' drop need bits and update buffer, always zero to seven bits left ','line_number':139,'multiline':True]['text':' return need bits, zeroing the bits above that ','line_number':143,'multiline':True]['text':'
 * Process a stored block.
 *
 * Format notes:
 *
 * - After the two-bit stored block type (00), the stored block length and
 *   stored bytes are byte-aligned for fast copying.  Therefore any leftover
 *   bits in the byte that has the last bit of the type, as many as seven, are
 *   discarded.  The value of the discarded bits are not defined and should not
 *   be checked against any expectation.
 *
 * - The second inverted copy of the stored block length does not have to be
 *   checked, but it's probably a good idea to do so anyway.
 *
 * - A stored block can have zero length.  This is sometimes used to byte-align
 *   subsets of the compressed data for random access or partial recovery.
 ','line_number':147,'multiline':True]['text':' length of stored block ','line_number':166,'multiline':True]['text':' discard leftover bits from current byte (assumes s->bitcnt < 8) ','line_number':168,'multiline':True]['text':' get length and check against its one's complement ','line_number':172,'multiline':True]['text':' not enough input ','line_number':174,'multiline':True]['text':' didn't match complement! ','line_number':179,'multiline':True]['text':' copy len bytes from in to out ','line_number':181,'multiline':True]['text':' not enough input ','line_number':183,'multiline':True]['text':' not enough output space ','line_number':186,'multiline':True]['text':' just scanning ','line_number':190,'multiline':True]['text':' done with a valid stored block ','line_number':195,'multiline':True]['text':'
 * Huffman code decoding tables.  count[1..MAXBITS] is the number of symbols of
 * each length, which for a canonical code are stepped through in order.
 * symbol[] are the symbol values in canonical order, where the number of
 * entries is the sum of the counts in count[].  The decoding process can be
 * seen in the function decode() below.
 ','line_number':199,'multiline':True]['text':' number of symbols of each length ','line_number':207,'multiline':True]['text':' canonically ordered symbols ','line_number':208,'multiline':True]['text':'
 * Decode a code from the stream s using huffman table h.  Return the symbol or
 * a negative value if there is an error.  If all of the lengths are zero, i.e.
 * an empty code, or if the code is incomplete and an invalid code is received,
 * then -10 is returned after reading MAXBITS bits.
 *
 * Format notes:
 *
 * - The codes as stored in the compressed data are bit-reversed relative to
 *   a simple integer ordering of codes of the same lengths.  Hence below the
 *   bits are pulled from the compressed data one at a time and used to
 *   build the code value reversed from what is in the stream in order to
 *   permit simple integer comparisons for decoding.  A table-based decoding
 *   scheme (as used in zlib) does not need to do this reversal.
 *
 * - The first code for the shortest length is all zeros.  Subsequent codes of
 *   the same length are simply integer increments of the previous code.  When
 *   moving up a length, a zero bit is appended to the code.  For a complete
 *   code, the last code of the longest length will be all ones.
 *
 * - Incomplete codes are handled by this decoder, since they are permitted
 *   in the deflate format.  See the format notes for fixed() and dynamic().
 ','line_number':211,'multiline':True]['text':' current number of bits in code ','line_number':237,'multiline':True]['text':' len bits being decoded ','line_number':238,'multiline':True]['text':' first code of length len ','line_number':239,'multiline':True]['text':' number of codes of length len ','line_number':240,'multiline':True]['text':' index of first code of length len in symbol table ','line_number':241,'multiline':True]['text':' get next bit ','line_number':245,'multiline':True]['text':' if length len, return symbol ','line_number':247,'multiline':True]['text':' else update for next length ','line_number':249,'multiline':True]['text':' ran out of codes ','line_number':254,'multiline':True]['text':'
 * A faster version of decode() for real applications of this code.   It's not
 * as readable, but it makes puff() twice as fast.  And it only makes the code
 * a few percent larger.
 ','line_number':257,'multiline':True]['text':' !SLOW ','line_number':262,'multiline':True]['text':' current number of bits in code ','line_number':265,'multiline':True]['text':' len bits being decoded ','line_number':266,'multiline':True]['text':' first code of length len ','line_number':267,'multiline':True]['text':' number of codes of length len ','line_number':268,'multiline':True]['text':' index of first code of length len in symbol table ','line_number':269,'multiline':True]['text':' bits from stream ','line_number':270,'multiline':True]['text':' bits left in next or left to process ','line_number':271,'multiline':True]['text':' next number of codes ','line_number':272,'multiline':True]['text':' if length len, return symbol ','line_number':284,'multiline':True]['text':' else update for next length ','line_number':289,'multiline':True]['text':' out of input ','line_number':299,'multiline':True]['text':' ran out of codes ','line_number':304,'multiline':True]['text':' SLOW ','line_number':306,'multiline':True]['text':'
 * Given the list of code lengths length[0..n-1] representing a canonical
 * Huffman code for n symbols, construct the tables required to decode those
 * codes.  Those tables are the number of codes of each length, and the symbols
 * sorted by length, retaining their original order within each length.  The
 * return value is zero for a complete code set, negative for an over-
 * subscribed code set, and positive for an incomplete code set.  The tables
 * can be used if the return value is zero or positive, but they cannot be used
 * if the return value is negative.  If the return value is zero, it is not
 * possible for decode() using that table to return an error--any stream of
 * enough bits will resolve to a symbol.  If the return value is positive, then
 * it is possible for decode() using that table to return an error for received
 * codes past the end of the incomplete lengths.
 *
 * Not used by decode(), but used for error checking, h->count[0] is the number
 * of the n symbols not in the code.  So n - h->count[0] is the number of
 * codes.  This is useful for checking for incomplete codes that have more than
 * one symbol, which is an error in a dynamic block.
 *
 * Assumption: for all i in 0..n-1, 0 <= length[i] <= MAXBITS
 * This is assured by the construction of the length arrays in dynamic() and
 * fixed() and is not verified by construct().
 *
 * Format notes:
 *
 * - Permitted and expected examples of incomplete codes are one of the fixed
 *   codes and any code with a single symbol which in deflate is coded as one
 *   bit instead of zero bits.  See the format notes for fixed() and dynamic().
 *
 * - Within a given code length, the symbols are kept in ascending order for
 *   the code bits definition.
 ','line_number':308,'multiline':True]['text':' current symbol when stepping through length[] ','line_number':342,'multiline':True]['text':' current length when stepping through h->count[] ','line_number':343,'multiline':True]['text':' number of possible codes left of current length ','line_number':344,'multiline':True]['text':' offsets in symbol table for each length ','line_number':345,'multiline':True]['text':' count number of codes of each length ','line_number':347,'multiline':True]['text':' assumes lengths are within bounds ','line_number':351,'multiline':True]['text':' no codes! ','line_number':352,'multiline':True]['text':' complete, but decode() will fail ','line_number':353,'multiline':True]['text':' check for an over-subscribed or incomplete set of lengths ','line_number':355,'multiline':True]['text':' one possible code of zero length ','line_number':356,'multiline':True]['text':' one more bit, double codes left ','line_number':358,'multiline':True]['text':' deduct count from possible codes ','line_number':359,'multiline':True]['text':' over-subscribed--return negative ','line_number':361,'multiline':True]['text':' left > 0 means incomplete ','line_number':362,'multiline':True]['text':' generate offsets into symbol table for each length for sorting ','line_number':364,'multiline':True]['text':'
     * put symbols in table sorted by length, by symbol order within each
     * length
     ','line_number':369,'multiline':True]['text':' return zero for complete set, positive for incomplete set ','line_number':377,'multiline':True]['text':'
 * Decode literal/length and distance codes until an end-of-block code.
 *
 * Format notes:
 *
 * - Compressed data that is after the block type if fixed or after the code
 *   description if dynamic is a combination of literals and length/distance
 *   pairs terminated by and end-of-block code.  Literals are simply Huffman
 *   coded bytes.  A length/distance pair is a coded length followed by a
 *   coded distance to represent a string that occurs earlier in the
 *   uncompressed data that occurs again at the current location.
 *
 * - Literals, lengths, and the end-of-block code are combined into a single
 *   code of up to 286 symbols.  They are 256 literals (0..255), 29 length
 *   symbols (257..285), and the end-of-block symbol (256).
 *
 * - There are 256 possible lengths (3..258), and so 29 symbols are not enough
 *   to represent all of those.  Lengths 3..10 and 258 are in fact represented
 *   by just a length symbol.  Lengths 11..257 are represented as a symbol and
 *   some number of extra bits that are added as an integer to the base length
 *   of the length symbol.  The number of extra bits is determined by the base
 *   length symbol.  These are in the static arrays below, lens[] for the base
 *   lengths and lext[] for the corresponding number of extra bits.
 *
 * - The reason that 258 gets its own symbol is that the longest length is used
 *   often in highly redundant files.  Note that 258 can also be coded as the
 *   base value 227 plus the maximum extra value of 31.  While a good deflate
 *   should never do this, it is not an error, and should be decoded properly.
 *
 * - If a length is decoded, including its extra bits if any, then it is
 *   followed a distance code.  There are up to 30 distance symbols.  Again
 *   there are many more possible distances (1..32768), so extra bits are added
 *   to a base value represented by the symbol.  The distances 1..4 get their
 *   own symbol, but the rest require extra bits.  The base distances and
 *   corresponding number of extra bits are below in the static arrays dist[]
 *   and dext[].
 *
 * - Literal bytes are simply written to the output.  A length/distance pair is
 *   an instruction to copy previously uncompressed bytes to the output.  The
 *   copy is from distance bytes back in the output stream, copying for length
 *   bytes.
 *
 * - Distances pointing before the beginning of the output data are not
 *   permitted.
 *
 * - Overlapped copies, where the length is greater than the distance, are
 *   allowed and common.  For example, a distance of one and a length of 258
 *   simply copies the last byte 258 times.  A distance of four and a length of
 *   twelve copies the last four bytes three times.  A simple forward copy
 *   ignoring whether the length is greater than the distance or not implements
 *   this correctly.  You should not use memcpy() since its behavior is not
 *   defined for overlapped arrays.  You should not use memmove() or bcopy()
 *   since though their behavior -is- defined for overlapping arrays, it is
 *   defined to do the wrong thing in this case.
 ','line_number':381,'multiline':True]['text':' decoded symbol ','line_number':440,'multiline':True]['text':' length for copy ','line_number':441,'multiline':True]['text':' distance for copy ','line_number':442,'multiline':True]['text':' Size base for length codes 257..285 ','line_number':443,'multiline':True]['text':' Extra bits for length codes 257..285 ','line_number':446,'multiline':True]['text':' Offset base for distance codes 0..29 ','line_number':449,'multiline':True]['text':' Extra bits for distance codes 0..29 ','line_number':453,'multiline':True]['text':' decode literals and length/distance pairs ','line_number':458,'multiline':True]['text':' invalid symbol ','line_number':462,'multiline':True]['text':' literal: symbol is the byte ','line_number':463,'multiline':True]['text':' write out the literal ','line_number':464,'multiline':True]['text':' length ','line_number':472,'multiline':True]['text':' get and compute length ','line_number':473,'multiline':True]['text':' invalid fixed code ','line_number':476,'multiline':True]['text':' get and check distance ','line_number':479,'multiline':True]['text':' invalid symbol ','line_number':482,'multiline':True]['text':' distance too far back ','line_number':486,'multiline':True]['text':' copy length bytes from distance bytes back ','line_number':489,'multiline':True]['text':' end of block symbol ','line_number':506,'multiline':True]['text':' done with a valid fixed or dynamic block ','line_number':508,'multiline':True]['text':'
 * Process a fixed codes block.
 *
 * Format notes:
 *
 * - This block type can be useful for compressing small amounts of data for
 *   which the size of the code descriptions in a dynamic block exceeds the
 *   benefit of custom codes for that block.  For fixed codes, no bits are
 *   spent on code descriptions.  Instead the code lengths for literal/length
 *   codes and distance codes are fixed.  The specific lengths for each symbol
 *   can be seen in the "for" loops below.
 *
 * - The literal/length code is complete, but has two symbols that are invalid
 *   and should result in an error if received.  This cannot be implemented
 *   simply as an incomplete code since those two symbols are in the "middle"
 *   of the code.  They are eight bits long and the longest literal/length\
 *   code is nine bits.  Therefore the code must be constructed with those
 *   symbols, and the invalid symbols must be detected after decoding.
 *
 * - The fixed distance codes also have two invalid symbols that should result
 *   in an error if received.  Since all of the distance codes are the same
 *   length, this can be implemented as an incomplete code.  Then the invalid
 *   codes are detected while decoding.
 ','line_number':512,'multiline':True]['text':' build fixed huffman tables if first call (may not be thread safe) ','line_number':543,'multiline':True]['text':' construct lencode and distcode ','line_number':548,'multiline':True]['text':' literal/length table ','line_number':554,'multiline':True]['text':' distance table ','line_number':565,'multiline':True]['text':' do this just once ','line_number':570,'multiline':True]['text':' decode data until end-of-block code ','line_number':574,'multiline':True]['text':'
 * Process a dynamic codes block.
 *
 * Format notes:
 *
 * - A dynamic block starts with a description of the literal/length and
 *   distance codes for that block.  New dynamic blocks allow the compressor to
 *   rapidly adapt to changing data with new codes optimized for that data.
 *
 * - The codes used by the deflate format are "canonical", which means that
 *   the actual bits of the codes are generated in an unambiguous way simply
 *   from the number of bits in each code.  Therefore the code descriptions
 *   are simply a list of code lengths for each symbol.
 *
 * - The code lengths are stored in order for the symbols, so lengths are
 *   provided for each of the literal/length symbols, and for each of the
 *   distance symbols.
 *
 * - If a symbol is not used in the block, this is represented by a zero as
 *   as the code length.  This does not mean a zero-length code, but rather
 *   that no code should be created for this symbol.  There is no way in the
 *   deflate format to represent a zero-length code.
 *
 * - The maximum number of bits in a code is 15, so the possible lengths for
 *   any code are 1..15.
 *
 * - The fact that a length of zero is not permitted for a code has an
 *   interesting consequence.  Normally if only one symbol is used for a given
 *   code, then in fact that code could be represented with zero bits.  However
 *   in deflate, that code has to be at least one bit.  So for example, if
 *   only a single distance base symbol appears in a block, then it will be
 *   represented by a single code of length one, in particular one 0 bit.  This
 *   is an incomplete code, since if a 1 bit is received, it has no meaning,
 *   and should result in an error.  So incomplete distance codes of one symbol
 *   should be permitted, and the receipt of invalid codes should be handled.
 *
 * - It is also possible to have a single literal/length code, but that code
 *   must be the end-of-block code, since every dynamic block has one.  This
 *   is not the most efficient way to create an empty block (an empty fixed
 *   block is fewer bits), but it is allowed by the format.  So incomplete
 *   literal/length codes of one symbol should also be permitted.
 *
 * - If there are only literal codes and no lengths, then there are no distance
 *   codes.  This is represented by one distance code with zero bits.
 *
 * - The list of up to 286 length/literal lengths and up to 30 distance lengths
 *   are themselves compressed using Huffman codes and run-length encoding.  In
 *   the list of code lengths, a 0 symbol means no code, a 1..15 symbol means
 *   that length, and the symbols 16, 17, and 18 are run-length instructions.
 *   Each of 16, 17, and 18 are followed by extra bits to define the length of
 *   the run.  16 copies the last length 3 to 6 times.  17 represents 3 to 10
 *   zero lengths, and 18 represents 11 to 138 zero lengths.  Unused symbols
 *   are common, hence the special coding for zero lengths.
 *
 * - The symbols for 0..18 are Huffman coded, and so that code must be
 *   described first.  This is simply a sequence of up to 19 three-bit values
 *   representing no code (0) or the code length for that symbol (1..7).
 *
 * - A dynamic block starts with three fixed-size counts from which is computed
 *   the number of literal/length code lengths, the number of distance code
 *   lengths, and the number of code length code lengths (ok, you come up with
 *   a better name!) in the code descriptions.  For the literal/length and
 *   distance codes, lengths after those provided are considered zero, i.e. no
 *   code.  The code length code lengths are received in a permuted order (see
 *   the order[] array below) to make a short code length code length list more
 *   likely.  As it turns out, very short and very long codes are less likely
 *   to be seen in a dynamic code description, hence what may appear initially
 *   to be a peculiar ordering.
 *
 * - Given the number of literal/length code lengths (nlen) and distance code
 *   lengths (ndist), then they are treated as one long list of nlen + ndist
 *   code lengths.  Therefore run-length coding can and often does cross the
 *   boundary between the two sets of lengths.
 *
 * - So to summarize, the code description at the start of a dynamic block is
 *   three counts for the number of code lengths for the literal/length codes,
 *   the distance codes, and the code length codes.  This is followed by the
 *   code length code lengths, three bits each.  This is used to construct the
 *   code length code which is used to read the remainder of the lengths.  Then
 *   the literal/length code lengths and distance lengths are read as a single
 *   set of lengths using the code length codes.  Codes are constructed from
 *   the resulting two sets of lengths, and then finally you can start
 *   decoding actual compressed data in the block.
 *
 * - For reference, a "typical" size for the code description in a dynamic
 *   block is around 80 bytes.
 ','line_number':578,'multiline':True]['text':' number of lengths in descriptor ','line_number':667,'multiline':True]['text':' index of lengths[] ','line_number':668,'multiline':True]['text':' construct() return value ','line_number':669,'multiline':True]['text':' descriptor code lengths ','line_number':670,'multiline':True]['text':' lencode memory ','line_number':671,'multiline':True]['text':' distcode memory ','line_number':672,'multiline':True]['text':' length and distance codes ','line_number':673,'multiline':True]['text':' permutation of code length codes ','line_number':674,'multiline':True]['text':' construct lencode and distcode ','line_number':677,'multiline':True]['text':' get number of lengths in each table, check lengths ','line_number':683,'multiline':True]['text':' bad counts ','line_number':688,'multiline':True]['text':' read code length code lengths (really), missing lengths are zero ','line_number':690,'multiline':True]['text':' build huffman table for code lengths codes (use lencode temporarily) ','line_number':696,'multiline':True]['text':' require complete code set here ','line_number':698,'multiline':True]['text':' read length/literal and distance code length tables ','line_number':701,'multiline':True]['text':' decoded value ','line_number':704,'multiline':True]['text':' last length to repeat ','line_number':705,'multiline':True]['text':' invalid symbol ','line_number':709,'multiline':True]['text':' length in 0..15 ','line_number':710,'multiline':True]['text':' repeat instruction ','line_number':712,'multiline':True]['text':' assume repeating zeros ','line_number':713,'multiline':True]['text':' repeat last length 3..6 times ','line_number':714,'multiline':True]['text':' no last length! ','line_number':716,'multiline':True]['text':' last length ','line_number':717,'multiline':True]['text':' repeat zero 3..10 times ','line_number':720,'multiline':True]['text':' == 18, repeat zero 11..138 times ','line_number':722,'multiline':True]['text':' too many lengths! ','line_number':725,'multiline':True]['text':' repeat last or zero symbol times ','line_number':726,'multiline':True]['text':' check for end-of-block code -- there better be one! ','line_number':731,'multiline':True]['text':' build huffman table for literal/length codes ','line_number':735,'multiline':True]['text':' incomplete code ok only for single length 1 code ','line_number':738,'multiline':True]['text':' build huffman table for distance codes ','line_number':740,'multiline':True]['text':' incomplete code ok only for single length 1 code ','line_number':743,'multiline':True]['text':' decode data until end-of-block code ','line_number':745,'multiline':True]['text':'
 * Inflate source to dest.  On return, destlen and sourcelen are updated to the
 * size of the uncompressed data and the size of the deflate data respectively.
 * On success, the return value of puff() is zero.  If there is an error in the
 * source data, i.e. it is not in the deflate format, then a negative value is
 * returned.  If there is not enough input available or there is not enough
 * output space, then a positive error is returned.  In that case, destlen and
 * sourcelen are not updated to facilitate retrying from the beginning with the
 * provision of more input data or more output space.  In the case of invalid
 * inflate data (a negative error), the dest and source pointers are updated to
 * facilitate the debugging of deflators.
 *
 * puff() also has a mode to determine the size of the uncompressed output with
 * no output written.  For this dest must be (unsigned char *)0.  In this case,
 * the input value of *destlen is ignored, and on return *destlen is set to the
 * size of the uncompressed output.
 *
 * The return codes are:
 *
 *   2:  available inflate data did not terminate
 *   1:  output space exhausted before completing inflate
 *   0:  successful inflate
 *  -1:  invalid block type (type == 3)
 *  -2:  stored block length did not match one's complement
 *  -3:  dynamic block code description: too many length or distance codes
 *  -4:  dynamic block code description: code lengths codes incomplete
 *  -5:  dynamic block code description: repeat lengths with no first length
 *  -6:  dynamic block code description: repeat more than specified lengths
 *  -7:  dynamic block code description: invalid literal/length code lengths
 *  -8:  dynamic block code description: invalid distance code lengths
 *  -9:  dynamic block code description: missing end-of-block code
 * -10:  invalid literal/length or distance code in fixed or dynamic block
 * -11:  distance is too far back in fixed or dynamic block
 *
 * Format notes:
 *
 * - Three bits are read for each block to determine the kind of block and
 *   whether or not it is the last block.  Then the block is decoded and the
 *   process repeated if it was not the last block.
 *
 * - The leftover bits in the last byte of the deflate data after the last
 *   block (if it was a fixed or dynamic block) are undefined and have no
 *   expected values to check.
 ','line_number':749,'multiline':True]['text':' pointer to destination pointer ','line_number':793,'multiline':True]['text':' amount of output space ','line_number':794,'multiline':True]['text':' pointer to source data pointer ','line_number':795,'multiline':True]['text':' amount of input available ','line_number':796,'multiline':True]['text':' input/output state ','line_number':798,'multiline':True]['text':' block information ','line_number':799,'multiline':True]['text':' return value ','line_number':800,'multiline':True]['text':' initialize output state ','line_number':802,'multiline':True]['text':' ignored if dest is NIL ','line_number':804,'multiline':True]['text':' initialize input state ','line_number':807,'multiline':True]['text':' return if bits() or decode() tries to read past available input ','line_number':814,'multiline':True]['text':' if came back here via longjmp() ','line_number':815,'multiline':True]['text':' then skip do-loop, return error ','line_number':816,'multiline':True]['text':' process blocks until last block or error ','line_number':818,'multiline':True]['text':' one if last block ','line_number':820,'multiline':True]['text':' block type 0..3 ','line_number':821,'multiline':True]['text':' type == 3, invalid ','line_number':828,'multiline':True]['text':' return with error ','line_number':830,'multiline':True]['text':' update the lengths and return ','line_number':834,'multiline':True]