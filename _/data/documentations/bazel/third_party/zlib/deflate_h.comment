['text':' deflate.h -- internal compression state
 * Copyright (C) 1995-2018 Jean-loup Gailly
 * For conditions of distribution and use, see copyright notice in zlib.h
 ','line_number':1,'multiline':True]['text':' WARNING: this file should *not* be used by applications. It is
   part of the implementation of the compression library and is
   subject to change. Applications should only use zlib.h.
 ','line_number':6,'multiline':True]['text':' @(#) $Id$ ','line_number':11,'multiline':True]['text':' define NO_GZIP when compiling if you want to disable gzip header and
   trailer creation by deflate().  NO_GZIP would be used to avoid linking in
   the crc code when it is not needed.  For shared libraries, gzip encoding
   should be left enabled. ','line_number':18,'multiline':True]['text':' ===========================================================================
 * Internal compression state.
 ','line_number':26,'multiline':True]['text':' number of length codes, not counting the special END_BLOCK code ','line_number':31,'multiline':True]['text':' number of literal bytes 0..255 ','line_number':34,'multiline':True]['text':' number of Literal or Length codes, including the END_BLOCK code ','line_number':37,'multiline':True]['text':' number of distance codes ','line_number':40,'multiline':True]['text':' number of codes used to transfer the bit lengths ','line_number':43,'multiline':True]['text':' maximum heap size ','line_number':46,'multiline':True]['text':' All codes must not exceed MAX_BITS bits ','line_number':49,'multiline':True]['text':' size of bit buffer in bi_buf ','line_number':52,'multiline':True]['text':' zlib header -> BUSY_STATE ','line_number':54,'multiline':True]['text':' gzip header -> BUSY_STATE | EXTRA_STATE ','line_number':56,'multiline':True]['text':' gzip extra block -> NAME_STATE ','line_number':58,'multiline':True]['text':' gzip file name -> COMMENT_STATE ','line_number':59,'multiline':True]['text':' gzip comment -> HCRC_STATE ','line_number':60,'multiline':True]['text':' gzip header CRC -> BUSY_STATE ','line_number':61,'multiline':True]['text':' deflate -> FINISH_STATE ','line_number':62,'multiline':True]['text':' stream complete ','line_number':63,'multiline':True]['text':' Stream status ','line_number':64,'multiline':True]['text':' Data structure describing a single value and its code string. ','line_number':67,'multiline':True]['text':' frequency count ','line_number':70,'multiline':True]['text':' bit string ','line_number':71,'multiline':True]['text':' father node in Huffman tree ','line_number':74,'multiline':True]['text':' length of bit string ','line_number':75,'multiline':True]['text':' the dynamic tree ','line_number':87,'multiline':True]['text':' largest code with non zero frequency ','line_number':88,'multiline':True]['text':' the corresponding static tree ','line_number':89,'multiline':True]['text':' A Pos is an index in the character window. We use short instead of int to
 * save space in the various tables. IPos is used only for parameter passing.
 ','line_number':96,'multiline':True]['text':' pointer back to this zlib stream ','line_number':101,'multiline':True]['text':' as the name implies ','line_number':102,'multiline':True]['text':' output still pending ','line_number':103,'multiline':True]['text':' size of pending_buf ','line_number':104,'multiline':True]['text':' next pending byte to output to the stream ','line_number':105,'multiline':True]['text':' nb of bytes in the pending buffer ','line_number':106,'multiline':True]['text':' bit 0 true for zlib, bit 1 true for gzip ','line_number':107,'multiline':True]['text':' gzip header information to write ','line_number':108,'multiline':True]['text':' where in extra, name, or comment ','line_number':109,'multiline':True]['text':' can only be DEFLATED ','line_number':110,'multiline':True]['text':' value of flush param for previous deflate call ','line_number':111,'multiline':True]['text':' used by deflate.c: ','line_number':113,'multiline':True]['text':' LZ77 window size (32K by default) ','line_number':115,'multiline':True]['text':' log2(w_size)  (8..16) ','line_number':116,'multiline':True]['text':' w_size - 1 ','line_number':117,'multiline':True]['text':' Sliding window. Input bytes are read into the second half of the window,
     * and move to the first half later to keep a dictionary of at least wSize
     * bytes. With this organization, matches are limited to a distance of
     * wSize-MAX_MATCH bytes, but this ensures that IO is always
     * performed with a length multiple of the block size. Also, it limits
     * the window size to 64K, which is quite useful on MSDOS.
     * To do: use the user input buffer as sliding window.
     ','line_number':120,'multiline':True]['text':' Actual size of window: 2*wSize, except when the user input buffer
     * is directly used as sliding window.
     ','line_number':130,'multiline':True]['text':' Link to older string with same hash index. To limit the size of this
     * array to 64K, this link is maintained only for the last 32K strings.
     * An index in this array is thus a window index modulo 32K.
     ','line_number':135,'multiline':True]['text':' Heads of the hash chains or NIL. ','line_number':140,'multiline':True]['text':' hash index of string to be inserted ','line_number':142,'multiline':True]['text':' number of elements in hash table ','line_number':143,'multiline':True]['text':' log2(hash_size) ','line_number':144,'multiline':True]['text':' hash_size-1 ','line_number':145,'multiline':True]['text':' Number of bits by which ins_h must be shifted at each input
     * step. It must be such that after MIN_MATCH steps, the oldest
     * byte no longer takes part in the hash key, that is:
     *   hash_shift * MIN_MATCH >= hash_bits
     ','line_number':148,'multiline':True]['text':' Window position at the beginning of the current output block. Gets
     * negative when the window is moved backwards.
     ','line_number':155,'multiline':True]['text':' length of best match ','line_number':159,'multiline':True]['text':' previous match ','line_number':160,'multiline':True]['text':' set if previous match exists ','line_number':161,'multiline':True]['text':' start of string to insert ','line_number':162,'multiline':True]['text':' start of matching string ','line_number':163,'multiline':True]['text':' number of valid bytes ahead in window ','line_number':164,'multiline':True]['text':' Length of the best match at previous step. Matches not greater than this
     * are discarded. This is used in the lazy match evaluation.
     ','line_number':167,'multiline':True]['text':' To speed up deflation, hash chains are never searched beyond this
     * length.  A higher limit improves compression ratio but degrades the
     * speed.
     ','line_number':172,'multiline':True]['text':' Attempt to find a better match only when the current match is strictly
     * smaller than this value. This mechanism is used only for compression
     * levels >= 4.
     ','line_number':178,'multiline':True]['text':' Insert new strings in the hash table only if the match length is not
     * greater than this length. This saves time but degrades compression.
     * max_insert_length is used only for compression levels <= 3.
     ','line_number':183,'multiline':True]['text':' compression level (1..9) ','line_number':188,'multiline':True]['text':' favor or force Huffman coding','line_number':189,'multiline':True]['text':' Use a faster search when the previous match is longer than this ','line_number':192,'multiline':True]['text':' Stop searching when current match exceeds this ','line_number':194,'multiline':True]['text':' used by trees.c: ','line_number':196,'multiline':True]['text':' Didn't use ct_data typedef below to suppress compiler warning ','line_number':197,'multiline':True]['text':' literal and length tree ','line_number':198,'multiline':True]['text':' distance tree ','line_number':199,'multiline':True]['text':' Huffman tree for bit lengths ','line_number':200,'multiline':True]['text':' desc. for literal tree ','line_number':202,'multiline':True]['text':' desc. for distance tree ','line_number':203,'multiline':True]['text':' desc. for bit length tree ','line_number':204,'multiline':True]['text':' number of codes at each bit length for an optimal tree ','line_number':207,'multiline':True]['text':' heap used to build the Huffman trees ','line_number':209,'multiline':True]['text':' number of elements in the heap ','line_number':210,'multiline':True]['text':' element of largest frequency ','line_number':211,'multiline':True]['text':' The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
     * The same heap array is used to build all trees.
     ','line_number':212,'multiline':True]['text':' Depth of each subtree used as tie breaker for trees of equal frequency
     ','line_number':217,'multiline':True]['text':' buffer for distances and literals/lengths ','line_number':220,'multiline':True]['text':' Size of match buffer for literals/lengths.  There are 4 reasons for
     * limiting lit_bufsize to 64K:
     *   - frequencies can be kept in 16 bit counters
     *   - if compression is not successful for the first block, all input
     *     data is still in the window so we can still emit a stored block even
     *     when input comes from standard input.  (This can also be done for
     *     all blocks if lit_bufsize is not greater than 32K.)
     *   - if compression is not successful for a file smaller than 64K, we can
     *     even emit a stored file instead of a stored block (saving 5 bytes).
     *     This is applicable only for zip (not gzip or zlib).
     *   - creating new Huffman trees less frequently may not provide fast
     *     adaptation to changes in the input data statistics. (Take for
     *     example a binary file with poorly compressible code followed by
     *     a highly compressible string table.) Smaller buffer sizes give
     *     fast adaptation but have of course the overhead of transmitting
     *     trees more frequently.
     *   - I can't count above 4
     ','line_number':223,'multiline':True]['text':' running index in sym_buf ','line_number':242,'multiline':True]['text':' symbol table full when sym_next reaches this ','line_number':243,'multiline':True]['text':' bit length of current block with optimal trees ','line_number':245,'multiline':True]['text':' bit length of current block with static trees ','line_number':246,'multiline':True]['text':' number of string matches in current block ','line_number':247,'multiline':True]['text':' bytes at end of window left to insert ','line_number':248,'multiline':True]['text':' total bit length of compressed file mod 2^32 ','line_number':251,'multiline':True]['text':' bit length of compressed data sent mod 2^32 ','line_number':252,'multiline':True]['text':' Output buffer. bits are inserted starting at the bottom (least
     * significant bits).
     ','line_number':256,'multiline':True]['text':' Number of valid bits in bi_buf.  All bits above the last valid bit
     * are always zero.
     ','line_number':260,'multiline':True]['text':' High water mark offset in window for initialized bytes -- bytes above
     * this are set to zero in order to avoid memory check warnings when
     * longest match routines access bytes past the input.  This is then
     * updated to the new high water mark.
     ','line_number':265,'multiline':True]['text':' Output a byte on the stream.
 * IN assertion: there is enough room in pending_buf.
 ','line_number':273,'multiline':True]['text':' Minimum amount of lookahead, except at the end of the input file.
 * See deflate.c for comments about the MIN_MATCH+1.
 ','line_number':280,'multiline':True]['text':' In order to simplify the code, particularly on 16 bit machines, match
 * distances are limited to MAX_DIST instead of WSIZE.
 ','line_number':285,'multiline':True]['text':' Number of bytes after end of data in window to initialize in order to avoid
   memory checker errors from longest match routines ','line_number':290,'multiline':True]['text':' in trees.c ','line_number':293,'multiline':True]['text':' Mapping from a distance to a distance code. dist is the distance - 1 and
 * must not have side effects. _dist_code[256] and _dist_code[257] are never
 * used.
 ','line_number':305,'multiline':True]['text':' Inline versions of _tr_tally for speed: ','line_number':311,'multiline':True]['text':' DEFLATE_H ','line_number':346,'multiline':True]