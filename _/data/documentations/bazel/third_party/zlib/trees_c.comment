['text':' trees.c -- output deflated data using Huffman coding
 * Copyright (C) 1995-2021 Jean-loup Gailly
 * detect_data_type() function provided freely by Cosmin Truta, 2006
 * For conditions of distribution and use, see copyright notice in zlib.h
 ','line_number':1,'multiline':True]['text':'
 *  ALGORITHM
 *
 *      The "deflation" process uses several Huffman trees. The more
 *      common source values are represented by shorter bit sequences.
 *
 *      Each code tree is stored in a compressed form which is itself
 * a Huffman encoding of the lengths of all the code strings (in
 * ascending order by source values).  The actual code strings are
 * reconstructed from the lengths in the inflate process, as described
 * in the deflate specification.
 *
 *  REFERENCES
 *
 *      Deutsch, L.P.,"'Deflate' Compressed Data Format Specification".
 *      Available in ftp.uu.net:/pub/archiving/zip/doc/deflate-1.1.doc
 *
 *      Storer, James A.
 *          Data Compression:  Methods and Theory, pp. 49-50.
 *          Computer Science Press, 1988.  ISBN 0-7167-8156-5.
 *
 *      Sedgewick, R.
 *          Algorithms, p290.
 *          Addison-Wesley, 1983. ISBN 0-201-06672-6.
 ','line_number':7,'multiline':True]['text':' @(#) $Id$ ','line_number':33,'multiline':True]['text':' #define GEN_TREES_H ','line_number':35,'multiline':True]['text':' ===========================================================================
 * Constants
 ','line_number':43,'multiline':True]['text':' Bit length codes must not exceed MAX_BL_BITS bits ','line_number':48,'multiline':True]['text':' end of block literal code ','line_number':51,'multiline':True]['text':' repeat previous bit length 3-6 times (2 bits of repeat count) ','line_number':54,'multiline':True]['text':' repeat a zero length 3-10 times  (3 bits of repeat count) ','line_number':57,'multiline':True]['text':' repeat a zero length 11-138 times  (7 bits of repeat count) ','line_number':60,'multiline':True]['text':' extra bits for each length code ','line_number':62,'multiline':True]['text':' extra bits for each distance code ','line_number':65,'multiline':True]['text':' extra bits for each bit length code ','line_number':68,'multiline':True]['text':' The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 ','line_number':73,'multiline':True]['text':' ===========================================================================
 * Local data. These are initialized only once.
 ','line_number':77,'multiline':True]['text':' see definition of array dist_code below ','line_number':81,'multiline':True]['text':' non ANSI compilers may not accept trees.h ','line_number':84,'multiline':True]['text':' The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 ','line_number':87,'multiline':True]['text':' The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 ','line_number':94,'multiline':True]['text':' Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 ','line_number':99,'multiline':True]['text':' length code for each normalized match length (0 == MIN_MATCH) ','line_number':105,'multiline':True]['text':' First normalized length for each code (0 = MIN_MATCH) ','line_number':108,'multiline':True]['text':' First normalized distance for each code (0 = distance of 1) ','line_number':111,'multiline':True]['text':' GEN_TREES_H ','line_number':115,'multiline':True]['text':' static tree or NULL ','line_number':118,'multiline':True]['text':' extra bits for each code or NULL ','line_number':119,'multiline':True]['text':' base index for extra_bits ','line_number':120,'multiline':True]['text':' max number of elements in the tree ','line_number':121,'multiline':True]['text':' max bit length for the codes ','line_number':122,'multiline':True]['text':' ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 ','line_number':140,'multiline':True]['text':' ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 ','line_number':149,'multiline':True]['text':' ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 ','line_number':163,'multiline':True]['text':' ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 ','line_number':178,'multiline':True]['text':' ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 ','line_number':194,'multiline':True]['text':' next code value for each bit length ','line_number':203,'multiline':True]['text':' running code value ','line_number':204,'multiline':True]['text':' bit index ','line_number':205,'multiline':True]['text':' code index ','line_number':206,'multiline':True]['text':' The distribution counts are first used to generate the code values
     * without bit reversal.
     ','line_number':208,'multiline':True]['text':' Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     ','line_number':215,'multiline':True]['text':' Now reverse the bits ','line_number':225,'multiline':True]['text':' Send a code of the given tree. c and tree must not have side effects ','line_number':239,'multiline':True]['text':' !ZLIB_DEBUG ','line_number':241,'multiline':True]['text':' ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 ','line_number':247,'multiline':True]['text':' If not enough room in bi_buf, use (valid) bits from bi_buf and
     * (16 - bi_valid) bits from value, leaving (width - (16 - bi_valid))
     * unused bits in value.
     ','line_number':257,'multiline':True]['text':' !ZLIB_DEBUG ','line_number':271,'multiline':True]['text':' ZLIB_DEBUG ','line_number':286,'multiline':True]['text':' the arguments must not have side effects ','line_number':289,'multiline':True]['text':' ===========================================================================
 * Initialize the various 'constant' tables.
 ','line_number':291,'multiline':True]['text':' iterates over tree elements ','line_number':297,'multiline':True]['text':' bit counter ','line_number':298,'multiline':True]['text':' length value ','line_number':299,'multiline':True]['text':' code value ','line_number':300,'multiline':True]['text':' distance index ','line_number':301,'multiline':True]['text':' number of codes at each bit length for an optimal tree ','line_number':303,'multiline':True]['text':' For some embedded targets, global variables are not initialized: ','line_number':307,'multiline':True]['text':' Initialize the mapping length (0..255) -> length code (0..28) ','line_number':316,'multiline':True]['text':' Note that the length 255 (match length 258) can be represented
     * in two different ways: code 284 + 5 bits or code 285, so we
     * overwrite length_code[255] to use the best encoding:
     ','line_number':325,'multiline':True]['text':' Initialize the mapping dist (0..32K) -> dist code (0..29) ','line_number':331,'multiline':True]['text':' from now on, all distances are divided by 128 ','line_number':340,'multiline':True]['text':' Construct the codes of the static literal tree ','line_number':349,'multiline':True]['text':' Codes 286 and 287 do not exist, but we must include them in the
     * tree construction to get a canonical Huffman tree (longest code
     * all ones)
     ','line_number':356,'multiline':True]['text':' The static distance tree is trivial: ','line_number':362,'multiline':True]['text':' defined(GEN_TREES_H) || !defined(STDC) ','line_number':372,'multiline':True]['text':' ===========================================================================
 * Generate the file trees.h describing the static trees.
 ','line_number':375,'multiline':True]['text':' GEN_TREES_H ','line_number':434,'multiline':True]['text':' ===========================================================================
 * Initialize a new block.
 ','line_number':436,'multiline':True]['text':' iterates over tree elements ','line_number':440,'multiline':True]['text':' Initialize the trees. ','line_number':442,'multiline':True]['text':' ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 ','line_number':452,'multiline':True]['text':' Initialize the first block of the first file: ','line_number':474,'multiline':True]['text':' Index within the heap array of least frequent node in the Huffman tree ','line_number':479,'multiline':True]['text':' ===========================================================================
 * Remove the smallest element from the heap and recreate the heap with
 * one less element. Updates heap and heap_len.
 ','line_number':482,'multiline':True]['text':' ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 ','line_number':493,'multiline':True]['text':' ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 ','line_number':501,'multiline':True]['text':' left son of k ','line_number':509,'multiline':True]['text':' Set j to the smallest of the two sons: ','line_number':511,'multiline':True]['text':' Exit if v is smaller than both sons ','line_number':516,'multiline':True]['text':' Exchange v with the smallest son ','line_number':519,'multiline':True]['text':' And continue down the tree, setting j to the left son of k ','line_number':522,'multiline':True]['text':' ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 ','line_number':528,'multiline':True]['text':' heap index ','line_number':545,'multiline':True]['text':' iterate over the tree elements ','line_number':546,'multiline':True]['text':' bit length ','line_number':547,'multiline':True]['text':' extra bits ','line_number':548,'multiline':True]['text':' frequency ','line_number':549,'multiline':True]['text':' number of elements with bit length too large ','line_number':550,'multiline':True]['text':' In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     ','line_number':554,'multiline':True]['text':' root of the heap ','line_number':557,'multiline':True]['text':' We overwrite tree[n].Dad which is no longer needed ','line_number':564,'multiline':True]['text':' not a leaf node ','line_number':566,'multiline':True]['text':' This happens for example on obj2 and pic of the Calgary corpus ','line_number':578,'multiline':True]['text':' Find the first bit length which could increase: ','line_number':580,'multiline':True]['text':' move one leaf down the tree ','line_number':584,'multiline':True]['text':' move one overflow item as its brother ','line_number':585,'multiline':True]['text':' The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         ','line_number':587,'multiline':True]['text':' Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     ','line_number':593,'multiline':True]['text':' ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 ','line_number':617,'multiline':True]['text':' iterate over heap elements ','line_number':629,'multiline':True]['text':' largest code with non zero frequency ','line_number':630,'multiline':True]['text':' new node being created ','line_number':631,'multiline':True]['text':' Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n + 1].
     * heap[0] is not used.
     ','line_number':633,'multiline':True]['text':' The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     ','line_number':648,'multiline':True]['text':' node is 0 or 1 so it does not have extra bits ','line_number':658,'multiline':True]['text':' The elements heap[heap_len/2 + 1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     ','line_number':662,'multiline':True]['text':' Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     ','line_number':667,'multiline':True]['text':' next internal node of the tree ','line_number':670,'multiline':True]['text':' n = node of least frequency ','line_number':672,'multiline':True]['text':' m = node of next least frequency ','line_number':673,'multiline':True]['text':' keep the nodes sorted by frequency ','line_number':675,'multiline':True]['text':' Create a new node father of n and m ','line_number':678,'multiline':True]['text':' and insert the new node in the heap ','line_number':689,'multiline':True]['text':' At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     ','line_number':697,'multiline':True]['text':' The field len is now set, we can generate the bit codes ','line_number':702,'multiline':True]['text':' ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 ','line_number':706,'multiline':True]['text':' iterates over all tree elements ','line_number':711,'multiline':True]['text':' last emitted length ','line_number':712,'multiline':True]['text':' length of current code ','line_number':713,'multiline':True]['text':' length of next code ','line_number':714,'multiline':True]['text':' repeat count of the current code ','line_number':715,'multiline':True]['text':' max repeat count ','line_number':716,'multiline':True]['text':' min repeat count ','line_number':717,'multiline':True]['text':' guard ','line_number':720,'multiline':True]['text':' ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 ','line_number':747,'multiline':True]['text':' iterates over all tree elements ','line_number':752,'multiline':True]['text':' last emitted length ','line_number':753,'multiline':True]['text':' length of current code ','line_number':754,'multiline':True]['text':' length of next code ','line_number':755,'multiline':True]['text':' repeat count of the current code ','line_number':756,'multiline':True]['text':' max repeat count ','line_number':757,'multiline':True]['text':' min repeat count ','line_number':758,'multiline':True]['text':' tree[max_code + 1].Len = -1; ','line_number':760,'multiline':True]['text':' guard already set ','line_number':760,'multiline':True]['text':' ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 ','line_number':794,'multiline':True]['text':' index of last bit length code of non zero freq ','line_number':799,'multiline':True]['text':' Determine the bit length frequencies for literal and distance trees ','line_number':801,'multiline':True]['text':' Build the bit length tree: ','line_number':805,'multiline':True]['text':' opt_len now includes the length of the tree representations, except the
     * lengths of the bit lengths codes and the 5 + 5 + 4 bits for the counts.
     ','line_number':807,'multiline':True]['text':' Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     ','line_number':811,'multiline':True]['text':' Update opt_len to include the bit length tree and counts ','line_number':818,'multiline':True]['text':' ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 ','line_number':826,'multiline':True]['text':' index in bl_order ','line_number':833,'multiline':True]['text':' not +255 as stated in appnote.txt ','line_number':839,'multiline':True]['text':' not -3 as stated in appnote.txt ','line_number':841,'multiline':True]['text':' literal tree ','line_number':848,'multiline':True]['text':' distance tree ','line_number':851,'multiline':True]['text':' ===========================================================================
 * Send a stored block
 ','line_number':855,'multiline':True]['text':' send block type ','line_number':860,'multiline':True]['text':' align on byte boundary ','line_number':861,'multiline':True]['text':' ===========================================================================
 * Flush the bits in the bit buffer to pending output (leaves at most 7 bits)
 ','line_number':875,'multiline':True]['text':' ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 ','line_number':882,'multiline':True]['text':' 3 for block type, 7 for EOB ','line_number':890,'multiline':True]['text':' ===========================================================================
 * Send the block data compressed using the given Huffman trees
 ','line_number':895,'multiline':True]['text':' distance of matched string ','line_number':900,'multiline':True]['text':' match length or unmatched char (if dist == 0) ','line_number':901,'multiline':True]['text':' running index in sym_buf ','line_number':902,'multiline':True]['text':' the code to send ','line_number':903,'multiline':True]['text':' number of extra bits to send ','line_number':904,'multiline':True]['text':' send a literal byte ','line_number':911,'multiline':True]['text':' Here, lc is the match length - MIN_MATCH ','line_number':914,'multiline':True]['text':' send length code ','line_number':916,'multiline':True]['text':' send the extra length bits ','line_number':920,'multiline':True]['text':' dist is now the match distance - 1 ','line_number':922,'multiline':True]['text':' send the distance code ','line_number':926,'multiline':True]['text':' send the extra distance bits ','line_number':930,'multiline':True]['text':' literal or match pair ? ','line_number':932,'multiline':True]['text':' Check that the overlay between pending_buf and sym_buf is ok: ','line_number':934,'multiline':True]['text':' ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 ','line_number':942,'multiline':True]['text':' block_mask is the bit mask of block-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     ','line_number':956,'multiline':True]['text':' Check for non-textual ("block-listed") bytes. ','line_number':963,'multiline':True]['text':' Check for textual ("allow-listed") bytes. ','line_number':968,'multiline':True]['text':' There are no "block-listed" or "allow-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     ','line_number':976,'multiline':True]['text':' ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 ','line_number':982,'multiline':True]['text':' opt_len and static_len in bytes ','line_number':988,'multiline':True]['text':' index of last bit length code of non zero freq ','line_number':989,'multiline':True]['text':' Build the Huffman trees unless a stored block is forced ','line_number':991,'multiline':True]['text':' Check if the file is binary or text ','line_number':994,'multiline':True]['text':' Construct the literal and distance trees ','line_number':998,'multiline':True]['text':' At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         ','line_number':1006,'multiline':True]['text':' Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         ','line_number':1010,'multiline':True]['text':' Determine the best encoding. Compute the block lengths in bytes. ','line_number':1015,'multiline':True]['text':' force a stored block ','line_number':1030,'multiline':True]['text':' force stored block ','line_number':1034,'multiline':True]['text':' 4: two words for the lengths ','line_number':1037,'multiline':True]['text':' The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         ','line_number':1039,'multiline':True]['text':' The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     ','line_number':1065,'multiline':True]['text':' align on byte boundary ','line_number':1073,'multiline':True]['text':' ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 ','line_number':1080,'multiline':True]['text':' lc is the unmatched char ','line_number':1089,'multiline':True]['text':' Here, lc is the match length - MIN_MATCH ','line_number':1093,'multiline':True]['text':' dist = match distance - 1 ','line_number':1094,'multiline':True]