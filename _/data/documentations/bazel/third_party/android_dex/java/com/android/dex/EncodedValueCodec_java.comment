['text':'
 * Copyright (C) 2011 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]['text':'*
 * Read and write {@code encoded_value} primitives.
 ','line_number':22,'multiline':True]['text':'*
     * Writes a signed integral to {@code out}.
     ','line_number':29,'multiline':True]['text':'
         * Figure out how many bits are needed to represent the value,
         * including a sign bit: The bit count is subtracted from 65
         * and not 64 to account for the sign bit. The xor operation
         * has the effect of leaving non-negative values alone and
         * unary complementing negative values (so that a leading zero
         * count always returns a useful number for our present
         * purpose).
         ','line_number':33,'multiline':True]['text':' Round up the requiredBits to a number of bytes.','line_number':44,'multiline':False]['text':'
         * Write the header byte, which includes the type and
         * requiredBytes - 1.
         ','line_number':47,'multiline':True]['text':' Write the value, per se.','line_number':53,'multiline':False]['text':'*
     * Writes an unsigned integral to {@code out}.
     ','line_number':61,'multiline':True]['text':' Figure out how many bits are needed to represent the value.','line_number':65,'multiline':False]['text':' Round up the requiredBits to a number of bytes.','line_number':71,'multiline':False]['text':'
         * Write the header byte, which includes the type and
         * requiredBytes - 1.
         ','line_number':74,'multiline':True]['text':' Write the value, per se.','line_number':80,'multiline':False]['text':'*
     * Writes a right-zero-extended value to {@code out}.
     ','line_number':88,'multiline':True]['text':' Figure out how many bits are needed to represent the value.','line_number':92,'multiline':False]['text':' Round up the requiredBits to a number of bytes.','line_number':98,'multiline':False]['text':' Scootch the first bits to be written down to the low-order bits.','line_number':101,'multiline':False]['text':'
         * Write the header byte, which includes the type and
         * requiredBytes - 1.
         ','line_number':104,'multiline':True]['text':' Write the value, per se.','line_number':110,'multiline':False]['text':'*
     * Read a signed integer.
     *
     * @param zwidth byte count minus one
     ','line_number':118,'multiline':True]['text':'*
     * Read an unsigned integer.
     *
     * @param zwidth byte count minus one
     * @param fillOnRight true to zero fill on the right; false on the left
     ','line_number':132,'multiline':True]['text':'*
     * Read a signed long.
     *
     * @param zwidth byte count minus one
     ','line_number':153,'multiline':True]['text':'*
     * Read an unsigned long.
     *
     * @param zwidth byte count minus one
     * @param fillOnRight true to zero fill on the right; false on the left
     ','line_number':167,'multiline':True]