['text':' This script must retain compatibility with a wide variety of Python versions','line_number':3,'multiline':False]['text':' since it is run for every py_binary target. Currently we guarantee support','line_number':4,'multiline':False]['text':' going back to Python 2.7, and try to support even Python 2.6 on a best-effort','line_number':5,'multiline':False]['text':' basis. We might abandon 2.6 support once users have the ability to control the','line_number':6,'multiline':False]['text':' above shebang string via the Python toolchain (#8685).','line_number':7,'multiline':False]['text':' The Python interpreter unconditionally prepends the directory containing this','line_number':15,'multiline':False]['text':' script (following symlinks) to the import path. This is the cause of #9239,','line_number':16,'multiline':False]['text':' and is a special case of #7091. We therefore explicitly delete that entry.','line_number':17,'multiline':False]['text':' TODO(#7091): Remove this hack when no longer necessary.','line_number':18,'multiline':False]['text':' Return True if running on Windows','line_number':34,'multiline':False]['text':' No need to add prefix for non-Windows platforms.','line_number':45,'multiline':False]['text':' And \\?\ doesn't work in python 2 or on mingw','line_number':46,'multiline':False]['text':' Starting in Windows 10, version 1607(OS build 14393), MAX_PATH limitations have been','line_number':50,'multiline':False]['text':' removed from common Win32 file and directory functions.','line_number':51,'multiline':False]['text':' Related doc: https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd#enable-long-paths-in-windows-10-version-1607-and-later','line_number':52,'multiline':False]['text':' import sysconfig only now to maintain python 2.6 compatibility','line_number':57,'multiline':False]['text':' Lets start the unicode fun','line_number':62,'multiline':False]['text':' os.path.abspath returns a normalized absolute path','line_number':67,'multiline':False]['text':' Case 1: Path is a label. Not supported yet.','line_number':113,'multiline':False]['text':' Case 2: Absolute path.','line_number':118,'multiline':False]['text':' Use normpath() to convert slashes to os.sep on Windows.','line_number':120,'multiline':False]['text':' Case 3: Path is relative to the repo root.','line_number':122,'multiline':False]['text':' Case 4: Path has to be looked up in the search path.','line_number':125,'multiline':False]['text':' When the calling process used the runfiles manifest to resolve the','line_number':134,'multiline':False]['text':' location of this stub script, the path may be expanded. This means','line_number':135,'multiline':False]['text':' argv[0] may no longer point to a location inside the runfiles','line_number':136,'multiline':False]['text':' directory. We should therefore respect RUNFILES_DIR and','line_number':137,'multiline':False]['text':' RUNFILES_MANIFEST_FILE set by the caller.','line_number':138,'multiline':False]['text':' Be defensive: the runfiles dir should contain our main entry point. If','line_number':145,'multiline':False]['text':' it doesn't, then it must not be our runfiles directory.','line_number':146,'multiline':False]['text':' UNC-prefixed paths must be absolute/normalized. See','line_number':191,'multiline':False]['text':' https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation','line_number':192,'multiline':False]['text':' The Unix st_mode bits (see "man 7 inode") are stored in the upper 16','line_number':194,'multiline':False]['text':' bits of external_attr. Of those, we set the lower 12 bits, which are the','line_number':195,'multiline':False]['text':' file mode bits (since the file type bits can't be set by chmod anyway).','line_number':196,'multiline':False]['text':' Rumor has it these can be 0 for zips created on Windows.','line_number':198,'multiline':False]['text':' Create the runfiles tree by extracting the zip file','line_number':201,'multiline':False]['text':' IMPORTANT: Later code does `rm -fr` on dirname(module_space) -- it's','line_number':205,'multiline':False]['text':' important that deletion code be in sync with this directory structure','line_number':206,'multiline':False]['text':' Returns repository roots to add to the import path.','line_number':209,'multiline':False]['text':' If this binary is the data-dependency of another one, the other sets','line_number':225,'multiline':False]['text':' RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.','line_number':226,'multiline':False]['text':' If running from a zip, there's no manifest file.','line_number':235,'multiline':False]['text':' Look for the runfiles "output" manifest, argv[0] + ".runfiles_manifest"','line_number':239,'multiline':False]['text':' Look for the runfiles "input" manifest, argv[0] + ".runfiles/MANIFEST"','line_number':244,'multiline':False]['text':' Normally .runfiles_manifest and MANIFEST are both present, but the','line_number':245,'multiline':False]['text':' former will be missing for zip-based builds or if someone copies the','line_number':246,'multiline':False]['text':' runfiles tree elsewhere.','line_number':247,'multiline':False]['text':' If running in a sandbox and no environment variables are set, then','line_number':252,'multiline':False]['text':' Look for the runfiles  next to the binary.','line_number':253,'multiline':False]['text':' type: (str) -> None','line_number':289,'multiline':False]['text':' type: (str, str, list[str], dict[str, str], str, str|None, str|None) -> ...','line_number':316,'multiline':False]['text':' We want to use os.execv instead of subprocess.call, which causes','line_number':334,'multiline':False]['text':' problems with signal passing (making it difficult to kill','line_number':335,'multiline':False]['text':' Bazel). However, these conditions force us to run via','line_number':336,'multiline':False]['text':' subprocess.call instead:','line_number':337,'multiline':False]['text':'','line_number':338,'multiline':False]['text':' - On Windows, os.execv doesn't handle arguments with spaces','line_number':339,'multiline':False]['text':'   correctly, and it actually starts a subprocess just like','line_number':340,'multiline':False]['text':'   subprocess.call.','line_number':341,'multiline':False]['text':' - When running in a workspace or zip file, we need to clean up the','line_number':342,'multiline':False]['text':'   workspace after the process finishes so control must return here.','line_number':343,'multiline':False]['text':' - If we may need to emit a host config warning after execution, we','line_number':344,'multiline':False]['text':'   can't execv because we need control to return here. This only','line_number':345,'multiline':False]['text':'   happens for targets built in the host config.','line_number':346,'multiline':False]['text':' - For coverage targets, at least coveragepy requires running in','line_number':347,'multiline':False]['text':'   two invocations, which also requires control to return here.','line_number':348,'multiline':False]['text':'','line_number':349,'multiline':False]['text':' NOTE: dirname() is called because CreateModuleSpace() creates a','line_number':364,'multiline':False]['text':' sub-directory within a temporary directory, and we want to remove the','line_number':365,'multiline':False]['text':' whole temporary directory.','line_number':366,'multiline':False]['text':' type: (str, str, list[str], dict[str, str]) -> ...','line_number':371,'multiline':False]['text':' type: (str, str, list[str], dict[str, str], str, str|None) -> int','line_number':378,'multiline':False]['text':' We need for coveragepy to use relative paths.  This can only be configured','line_number':391,'multiline':False]['text':' via an rc file, so we need to make one.','line_number':392,'multiline':False]['text':' First run the target Python file via coveragepy to create a .coverage','line_number':399,'multiline':False]['text':' database file, from which we can later export lcov.','line_number':400,'multiline':False]['text':' Run coveragepy again to convert its .coverage database file into lcov.','line_number':417,'multiline':False]['text':' It's possible that the profiled program might execute another Python','line_number':433,'multiline':False]['text':' binary through a wrapper that would then delete the rcfile.  Not much','line_number':434,'multiline':False]['text':' we can do about that, besides ignore the failure here.','line_number':435,'multiline':False]['text':' The main Python source file.','line_number':446,'multiline':False]['text':' The magic string percent-main-percent is replaced with the runfiles-relative','line_number':447,'multiline':False]['text':' filename of the main file of the Python binary in BazelPythonSemantics.java.','line_number':448,'multiline':False]['text':' Remove duplicates to avoid overly long PYTHONPATH (#10977). Preserve order,','line_number':463,'multiline':False]['text':' keep first occurrence only.','line_number':464,'multiline':False]['text':' Don't prepend a potentially unsafe path to sys.path','line_number':484,'multiline':False]['text':' See: https://docs.python.org/3.11/using/cmdline.html#envvar-PYTHONSAFEPATH','line_number':485,'multiline':False]['text':' COVERAGE_DIR is set if coverage is enabled and instrumentation is configured','line_number':499,'multiline':False]['text':' for something, though it could be another program executing this one or','line_number':500,'multiline':False]['text':' one executed by this one (e.g. an extension module).','line_number':501,'multiline':False]['text':' Inhibit infinite recursion:','line_number':507,'multiline':False]['text':' coverage library expects sys.path[0] to contain the library, and replaces','line_number':518,'multiline':False]['text':' it with the directory of the program it starts. Our actual sys.path[0] is','line_number':519,'multiline':False]['text':' the runfiles directory, which must not be replaced.','line_number':520,'multiline':False]['text':' CoverageScript.do_execute() undoes this sys.path[0] setting.','line_number':521,'multiline':False]['text':'','line_number':522,'multiline':False]['text':' Update sys.path such that python finds the coverage package. The coverage','line_number':523,'multiline':False]['text':' entry point is coverage.coverage_main, so we need to do twice the dirname.','line_number':524,'multiline':False]['text':' If RUN_UNDER_RUNFILES equals 1, it means we need to','line_number':535,'multiline':False]['text':' change directory to the right runfiles directory.','line_number':536,'multiline':False]['text':' (So that the data files are accessible)','line_number':537,'multiline':False]['text':' NOTE: ExecuteFile may call execve() and lines after this will never run.','line_number':543,'multiline':False]['text':' This works from Python 2.4 all the way to 3.x.','line_number':551,'multiline':False]['text':' This exception occurs when os.execv() fails for some reason.','line_number':553,'multiline':False]['text':' Add info to error message','line_number':555,'multiline':False]