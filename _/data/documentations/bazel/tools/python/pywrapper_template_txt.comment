['text':'!/bin/sh','line_number':1,'multiline':False]['text':' Don't set -e because we don't have robust trapping and printing of errors.','line_number':3,'multiline':False]['text':' We use /bin/sh rather than /bin/bash for portability. See discussion here:','line_number':6,'multiline':False]['text':' https://groups.google.com/forum/?nomobile=true#!topic/bazel-dev/4Ql_7eDcLC0','line_number':7,'multiline':False]['text':' We do lose the ability to set -o pipefail.','line_number':8,'multiline':False]['text':' We use `which` to locate the Python interpreter command on PATH. `command -v`','line_number':28,'multiline':False]['text':' is another option, but it doesn't check whether the file it finds has the','line_number':29,'multiline':False]['text':' executable bit.','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' A tricky situation happens when this wrapper is invoked as part of running a','line_number':32,'multiline':False]['text':' tool, e.g. passing a py_binary target to `ctx.actions.run()`. Bazel will unset','line_number':33,'multiline':False]['text':' the PATH variable. Then the shell will see there's no PATH and initialize its','line_number':34,'multiline':False]['text':' own, sometimes without exporting it. This causes `which` to fail and this','line_number':35,'multiline':False]['text':' script to think there's no Python interpreter installed. To avoid this we','line_number':36,'multiline':False]['text':' explicitly pass PATH to each `which` invocation. We can't just export PATH','line_number':37,'multiline':False]['text':' because that would modify the environment seen by the final user Python','line_number':38,'multiline':False]['text':' program.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' See also:','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'     https://github.com/bazelbuild/continuous-integration/issues/578','line_number':43,'multiline':False]['text':'     https://github.com/bazelbuild/bazel/issues/8414','line_number':44,'multiline':False]['text':'     https://github.com/bazelbuild/bazel/issues/8415','line_number':45,'multiline':False]['text':' Try the "python%VERSION%" command name first, then fall back on "python".','line_number':47,'multiline':False]['text':' Verify that we grabbed an interpreter with the right version.','line_number':67,'multiline':False]