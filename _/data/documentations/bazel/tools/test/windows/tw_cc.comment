['text':' Copyright 2018 The Bazel Authors. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Test wrapper implementation for Windows.','line_number':15,'multiline':False]['text':' Design:','line_number':16,'multiline':False]['text':' https://github.com/laszlocsomor/proposals/blob/win-test-runner/designs/2018-07-18-windows-native-test-runner.md','line_number':17,'multiline':False]['text':' INT_MAX','line_number':27,'multiline':False]['text':' UNLEN','line_number':28,'multiline':False]['text':' Streams data from an input to two outputs.','line_number':76,'multiline':False]['text':' Inspired by tee(1) in the GNU coreutils.','line_number':77,'multiline':False]['text':' Creates a background thread to stream data from `input` to the two outputs.','line_number':80,'multiline':False]['text':' The thread terminates when ReadFile fails on the input (e.g. the input is','line_number':81,'multiline':False]['text':' the reading end of a pipe and the writing end is closed) or when WriteFile','line_number':82,'multiline':False]['text':' fails on one of the outputs (e.g. the same output handle is closed','line_number':83,'multiline':False]['text':' elsewhere).','line_number':84,'multiline':False]['text':' Buffered input stream (based on a Windows HANDLE) with peek-ahead support.','line_number':107,'multiline':False]['text':'','line_number':108,'multiline':False]['text':' This class uses two consecutive "pages" where it buffers data from the','line_number':109,'multiline':False]['text':' underlying HANDLE (wrapped in an AutoHandle). Both pages are always loaded','line_number':110,'multiline':False]['text':' with data until there's no more data to read.','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' The "active" page is the one where the read cursor is pointing. The other','line_number':113,'multiline':False]['text':' page is the next one to be read once the client moves the read cursor beyond','line_number':114,'multiline':False]['text':' the end of the active page.','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':' The client advances the read cursor with Advance(). When the cursor reaches','line_number':117,'multiline':False]['text':' the end of the active page, the other page becomes the active one (whose data','line_number':118,'multiline':False]['text':' is already buffered), and the old active page is loaded with new data from','line_number':119,'multiline':False]['text':' the underlying file.','line_number':120,'multiline':False]['text':' Creates a new IFStream.','line_number':123,'multiline':False]['text':'','line_number':124,'multiline':False]['text':' If successful, then takes ownership of the HANDLE in 'handle', and returns','line_number':125,'multiline':False]['text':' a new IFStream pointer. Otherwise leaves 'handle' alone and returns','line_number':126,'multiline':False]['text':' nullptr.','line_number':127,'multiline':False]['text':' 1 MB ','line_number':128,'multiline':True]['text':' A lightweight path abstraction that stores a Unicode Windows path.','line_number':151,'multiline':False]['text':'','line_number':152,'multiline':False]['text':' The class allows extracting the underlying path as a (immutable) string so','line_number':153,'multiline':False]['text':' it's easy to pass the path to WinAPI functions, but the class does not allow','line_number':154,'multiline':False]['text':' mutating the unterlying path so it's safe to pass around Path objects.','line_number':155,'multiline':False]['text':' Makes this path absolute.','line_number':165,'multiline':False]['text':' Returns true if the path was changed (i.e. was not absolute before).','line_number':166,'multiline':False]['text':' Returns false and has no effect if this path was empty or already absolute.','line_number':167,'multiline':False]['text':' Converts a Windows-style path to a mixed (Unix-Windows) style.','line_number':313,'multiline':False]['text':' The path is mixed-style because it is a Windows path (begins with a drive','line_number':314,'multiline':False]['text':' letter) but uses forward slashes as directory separators.','line_number':315,'multiline':False]['text':' We must export envvars as mixed style path because some tools confuse the','line_number':316,'multiline':False]['text':' backslashes in Windows paths for Unix-style escape characters.','line_number':317,'multiline':False]['text':' Gets an environment variable's value.','line_number':336,'multiline':False]['text':' Returns:','line_number':337,'multiline':False]['text':' - true, if the envvar is defined and successfully fetched, or it's empty or','line_number':338,'multiline':False]['text':'   undefined','line_number':339,'multiline':False]['text':' - false, if some error occurred','line_number':340,'multiline':False]['text':' Gets an environment variable's value as a Path.','line_number':363,'multiline':False]['text':' Returns:','line_number':364,'multiline':False]['text':' - true, if the envvar is defined and successfully fetched, or it's empty or','line_number':365,'multiline':False]['text':'   undefined','line_number':366,'multiline':False]['text':' - false, if some error occurred','line_number':367,'multiline':False]['text':' Gets an environment variable's value as integer and as the original string.','line_number':377,'multiline':False]['text':' Returns:','line_number':378,'multiline':False]['text':' - true, if the envvar is defined and successfully fetched, or it's empty or','line_number':379,'multiline':False]['text':'   undefined (in that case 'as_int' will be 0 and 'as_wstr' empty)','line_number':380,'multiline':False]['text':' - false, if ToInt cannot parse the string to an int, or some error occurred','line_number':381,'multiline':False]['text':' Non-sandboxed commands run in the exec_root, where they have access to the','line_number':463,'multiline':False]['text':' entire source tree. By chdir'ing to the runfiles root, tests only have','line_number':464,'multiline':False]['text':' direct access to their runfiles tree (if it exists), i.e. to their declared','line_number':465,'multiline':False]['text':' dependencies.','line_number':466,'multiline':False]['text':' Set USER as required by the Bazel Test Encyclopedia.','line_number':478,'multiline':False]['text':' Respect the value passed by Bazel via --test_env.','line_number':485,'multiline':False]['text':' Gets a path envvar, and re-exports it as an absolute path.','line_number':498,'multiline':False]['text':' Returns:','line_number':499,'multiline':False]['text':' - true, if the envvar was defined, and was already absolute or was','line_number':500,'multiline':False]['text':'   successfully absolutized and re-exported','line_number':501,'multiline':False]['text':' - false, if the envvar was undefined or empty, or it could not be absolutized','line_number':502,'multiline':False]['text':'   or re-exported','line_number':503,'multiline':False]['text':' Set TEST_SRCDIR as required by the Bazel Test Encyclopedia.','line_number':522,'multiline':False]['text':' Set TEST_TMPDIR as required by the Bazel Test Encyclopedia.','line_number':531,'multiline':False]['text':' Create the test temp directory, which may not exist on the remote host when','line_number':537,'multiline':False]['text':' doing a remote build.','line_number':538,'multiline':False]['text':' Set HOME as required by the Bazel Test Encyclopedia.','line_number':542,'multiline':False]['text':' Respect the user-defined HOME in case they set passed it with','line_number':549,'multiline':False]['text':' --test_env=HOME or --test_env=HOME=C:\\foo','line_number':550,'multiline':False]['text':' Set TEST_TMPDIR as required by the Bazel Test Encyclopedia.','line_number':553,'multiline':False]['text':' TODO(ulfjack): Standardize on RUNFILES_DIR and remove the','line_number':566,'multiline':False]['text':' {JAVA,PYTHON}_RUNFILES vars.','line_number':567,'multiline':False]['text':' If RUNFILES_MANIFEST_ONLY is set to 1 then test programs should use the','line_number':582,'multiline':False]['text':' manifest file to find their runfiles.','line_number':583,'multiline':False]['text':' The test shard status file is only set for sharded tests.','line_number':604,'multiline':False]['text':' # Tell googletest about Bazel sharding.','line_number':609,'multiline':False]['text':' No files found, nothing to do.','line_number':654,'multiline':False]['text':' depth_limit is negative ==> unlimited depth','line_number':672,'multiline':False]['text':' depth_limit is zero     ==> do not recurse further','line_number':673,'multiline':False]['text':' depth_limit is positive ==> recurse further','line_number':674,'multiline':False]['text':' devtools_ijar::Stat::total_size is declared as `int`, so the file','line_number':680,'multiline':False]['text':' size limit is INT_MAX. Additionally we limit the files to be below','line_number':681,'multiline':False]['text':' 4 GiB, not only because int is typically 4 bytes long, but also','line_number':682,'multiline':False]['text':' because such huge files are unreasonably large as an undeclared','line_number':683,'multiline':False]['text':' output.','line_number':684,'multiline':False]['text':' File size is already validated to be','line_number':691,'multiline':False]['text':' smaller than min(INT_MAX, 4 GiB)','line_number':692,'multiline':False]['text':' depth_limit is negative ==> unlimited depth','line_number':710,'multiline':False]['text':' depth_limit is zero     ==> do not recurse further','line_number':711,'multiline':False]['text':' depth_limit is positive ==> recurse further','line_number':712,'multiline':False]['text':' Convert all UTF-16 paths to ANSI paths.','line_number':743,'multiline':False]['text':' Write `size` many bytes to the output file.','line_number':843,'multiline':False]['text':' 10 MB ','line_number':865,'multiline':True]['text':' Read at most `buf_size` many bytes from the input file.','line_number':869,'multiline':False]['text':' Reached end of input file.','line_number':877,'multiline':False]['text':' Returns the MIME type of the file name.','line_number':889,'multiline':False]['text':' If the MIME type is unknown or an error occurs, the method returns','line_number':890,'multiline':False]['text':' "application/octet-stream".','line_number':891,'multiline':False]['text':' The file extension is unknown, or it does not have a "Content Type" value,','line_number':904,'multiline':False]['text':' or the value is too long. We don't care; just return the default.','line_number':905,'multiline':False]['text':' For each file, write a tab-separated line to the manifest with name','line_number':914,'multiline':False]['text':' (relative to TEST_UNDECLARED_OUTPUTS_DIR), size, and mime type.','line_number':915,'multiline':False]['text':' Example:','line_number':916,'multiline':False]['text':'   foo.txt<TAB>9<TAB>text/plain','line_number':917,'multiline':False]['text':'   bar/baz<TAB>2944<TAB>application/octet-stream','line_number':918,'multiline':False]['text':' TODO(ulfjack): Update Gunit to accept XML_OUTPUT_FILE and drop the','line_number':966,'multiline':False]['text':' GUNIT_OUTPUT env variable.','line_number':967,'multiline':False]['text':' We use these hard-coded Unix permission masks because they are:','line_number':973,'multiline':False]['text':' - stable, so the zip file is deterministic','line_number':974,'multiline':False]['text':' - useful, because stat_to_zipattr expects a mode_t','line_number':975,'multiline':False]['text':' drwxr-x--- (directory)','line_number':976,'multiline':False]['text':' -rw-r----- (regular file)','line_number':977,'multiline':False]['text':' devtools_ijar::ZipBuilder uses the ANSI file APIs so we must set the','line_number':1002,'multiline':False]['text':' active code page to ANSI.','line_number':1003,'multiline':False]['text':' compress ','line_number':1043,'multiline':True]['text':' compute_crc ','line_number':1044,'multiline':True]['text':' The test may only see TEST_UNDECLARED_OUTPUTS_DIR and','line_number':1062,'multiline':False]['text':' TEST_UNDECLARED_OUTPUTS_ANNOTATIONS_DIR, so keep those but unexport others.','line_number':1063,'multiline':False]['text':' According to the Bazel Test Encyclopedia, setting TEST_TARGET is','line_number':1103,'multiline':False]['text':' optional.','line_number':1104,'multiline':False]['text':' This header marks where --test_output=streamed will start being printed.','line_number':1110,'multiline':False]['text':' Runfiles paths of external tests start with "../".','line_number':1126,'multiline':False]['text':' If runfiles is enabled on Windows, we use the test binary in the runfiles','line_number':1172,'multiline':False]['text':' tree, which is consistent with the behavior on Linux and macOS.','line_number':1173,'multiline':False]['text':' Otherwise, we use Rlocation function to find the actual test binary','line_number':1174,'multiline':False]['text':' location.','line_number':1175,'multiline':False]['text':' kMaxCmdline value: see lpCommandLine parameter of CreateProcessW.','line_number':1206,'multiline':False]['text':' Add an extra character for the final null-terminator.','line_number':1215,'multiline':False]['text':' Create a pipe to stream the output of the subprocess to this process.','line_number':1230,'multiline':False]['text':' The subprocess inherits two copies of the writing end (one for stdout, one','line_number':1231,'multiline':False]['text':' for stderr). This process closes its copies of the handles.','line_number':1232,'multiline':False]['text':' This process keeps the reading end and streams data from the pipe to the','line_number':1233,'multiline':False]['text':' test log and to stdout.','line_number':1234,'multiline':False]['text':' Duplicate the write end of the pipe.','line_number':1243,'multiline':False]['text':' The original will be connected to the stdout of the process, the duplicate','line_number':1244,'multiline':False]['text':' to stderr.','line_number':1245,'multiline':False]['text':' Open a readonly handle to NUL. The subprocess inherits this handle that's','line_number':1255,'multiline':False]['text':' connected to its stdin.','line_number':1256,'multiline':False]['text':' Open a handle to the test log file. The "tee" thread will write everything','line_number':1267,'multiline':False]['text':' into it that the subprocess writes to the pipe.','line_number':1268,'multiline':False]['text':' Duplicate stdout's handle, and pass it to the tee thread, who will own it','line_number':1275,'multiline':False]['text':' and close it in the end.','line_number':1276,'multiline':False]['text':' Create the tee thread, and transfer ownerships of the `pipe_read`,','line_number':1287,'multiline':False]['text':' `test_outerr`, and `stdout_dup` handles.','line_number':1288,'multiline':False]['text':' TEST_UNDECLARED_OUTPUTS_DIR was undefined, so there's nothing to archive,','line_number':1318,'multiline':False]['text':' or TEST_UNDECLARED_OUTPUTS_ZIP was undefined as','line_number':1319,'multiline':False]['text':' --nozip_undeclared_test_outputs was specified.','line_number':1320,'multiline':False]['text':' Creates the Undeclared Outputs Annotations file.','line_number':1336,'multiline':False]['text':'','line_number':1337,'multiline':False]['text':' This file is a concatenation of every *.part file directly under','line_number':1338,'multiline':False]['text':' `undecl_annot_dir`. The file is written to `output`.','line_number':1339,'multiline':False]['text':' The directory's environment variable','line_number':1343,'multiline':False]['text':' (TEST_UNDECLARED_OUTPUTS_ANNOTATIONS_DIR) was probably undefined, nothing','line_number':1344,'multiline':False]['text':' to do.','line_number':1345,'multiline':False]['text':' There are no *.part files under `undecl_annot_dir`, nothing to do.','line_number':1355,'multiline':False]['text':' Only consume "*.part" files.','line_number':1369,'multiline':False]['text':' Compute the number of seconds the test ran for.','line_number':1495,'multiline':False]['text':' Check the remainder: if it's at least 0.5 seconds, round up.','line_number':1497,'multiline':False]['text':' Replace invalid XML characters and locate invalid CDATA sequences.','line_number':1506,'multiline':False]['text':'','line_number':1507,'multiline':False]['text':' The legal Unicode code points and ranges are U+0009, U+000A, U+000D,','line_number':1508,'multiline':False]['text':' U+0020..U+D7FF, U+E000..U+FFFD, and U+10000..U+10FFFF.','line_number':1509,'multiline':False]['text':'','line_number':1510,'multiline':False]['text':' Assuming the input is UTF-8 encoded, that translates to the following','line_number':1511,'multiline':False]['text':' regexps:','line_number':1512,'multiline':False]['text':'   [\x9\xa\xd\x20-\x7f]                         <--- (9,A,D,20-7F)','line_number':1513,'multiline':False]['text':'   [\xc0-\xdf][\x80-\xbf]                       <--- (0080-07FF)','line_number':1514,'multiline':False]['text':'   [\xe0-\xec][\x80-\xbf][\x80-\xbf]            <--- (0800-CFFF)','line_number':1515,'multiline':False]['text':'   [\xed][\x80-\x9f][\x80-\xbf]                 <--- (D000-D7FF)','line_number':1516,'multiline':False]['text':'   [\xee][\x80-\xbf][\x80-\xbf]                 <--- (E000-EFFF)','line_number':1517,'multiline':False]['text':'   [\xef][\x80-\xbe][\x80-\xbf]                 <--- (F000-FFEF)','line_number':1518,'multiline':False]['text':'   [\xef][\xbf][\x80-\xbd]                      <--- (FFF0-FFFD)','line_number':1519,'multiline':False]['text':'   [\xf0-\xf7][\x80-\xbf][\x80-\xbf][\x80-\xbf] <--- (010000-10FFFF)','line_number':1520,'multiline':False]['text':'','line_number':1521,'multiline':False]['text':' (See https://github.com/bazelbuild/bazel/issues/4691#issuecomment-408089257)','line_number':1522,'multiline':False]['text':'','line_number':1523,'multiline':False]['text':' Every octet-sequence matching one of these regexps will be left alone, all','line_number':1524,'multiline':False]['text':' other octet-sequences will be replaced by '?' characters.','line_number':1525,'multiline':False]['text':' Matched legal single-octet sequence.','line_number':1539,'multiline':False]['text':' Matched legal double-octet sequence. Skip the next octet.','line_number':1546,'multiline':False]['text':' Matched legal triple-octet sequence. Skip the next two octets.','line_number':1562,'multiline':False]['text':' Matched legal quadruple-octet sequence. Skip the next three octets.','line_number':1572,'multiline':False]['text':' Illegal octet; replace.','line_number':1581,'multiline':False]['text':' Ensure that test shards have unique names in the xml output, by including','line_number':1603,'multiline':False]['text':' the shard index in the test name.','line_number':1604,'multiline':False]['text':' If running from the xml generator binary, we should always create the xml','line_number':1642,'multiline':False]['text':' file.','line_number':1643,'multiline':False]['text':' The XML file already exists, maybe the test framework wrote it.','line_number':1650,'multiline':False]['text':' Leave the file alone.','line_number':1651,'multiline':False]['text':' Bazel generates the test xml as a separate action, so we don't have to','line_number':1662,'multiline':False]['text':' create it.','line_number':1663,'multiline':False]['text':' Delete the test's outerr file after we have the XML file.','line_number':1685,'multiline':False]['text':' We don't care if this succeeds or not, because the outerr file is not a','line_number':1686,'multiline':False]['text':' declared output.','line_number':1687,'multiline':False]['text':' Create XML file stub.','line_number':1727,'multiline':False]['text':' Encode test log to make it embeddable in CDATA.','line_number':1743,'multiline':False]['text':' Append CDATA end and closing tags.','line_number':1749,'multiline':False]['text':' Both paths are normalized, but this->path_ may begin with ".."s so we','line_number':1781,'multiline':False]['text':' must normalize after joining.','line_number':1782,'multiline':False]['text':' We wouldn't need full normalization, just normlize at the joined edges,','line_number':1783,'multiline':False]['text':' but let's keep the code simple and normalize fully. (AsWindowsPath in','line_number':1784,'multiline':False]['text':' Set normalizes.)','line_number':1785,'multiline':False]['text':' Overwrite the *active* page: we are about to move off of it.','line_number':1824,'multiline':False]['text':' The stream is reading from a pipe, and there's no more data.','line_number':1830,'multiline':False]['text':' all 'n' bytes are on the current page','line_number':1849,'multiline':False]['text':' how much is left to read','line_number':1857,'multiline':False]['text':' read no more than the other page's size','line_number':1859,'multiline':False]['text':' namespace','line_number':1865,'multiline':False]['text':' Increase total size for absolute paths by <root> + "/" + <path> +','line_number':1873,'multiline':False]['text':' null-terminator.','line_number':1874,'multiline':False]['text':' Store all absolute paths in one continuous char array.','line_number':1878,'multiline':False]['text':' Store pointers in two arrays. The pointers point into `abs_path`.','line_number':1881,'multiline':False]['text':' We'll pass these paths to devtools_ijar::ZipBuilder::EstimateSize that','line_number':1882,'multiline':False]['text':' expects an array of char pointers. The last element must be NULL, so','line_number':1883,'multiline':False]['text':' allocate one extra pointer.','line_number':1884,'multiline':False]['text':' Create all full paths (root + '/' + relative_paths[i] + '\0').','line_number':1889,'multiline':False]['text':'','line_number':1890,'multiline':False]['text':' If `root` is "c:/foo", then store the following:','line_number':1891,'multiline':False]['text':'','line_number':1892,'multiline':False]['text':' - Store each absolute path consecutively in `abs_paths_` (via `p`).','line_number':1893,'multiline':False]['text':'   Store paths with forward slashes and not backslashes, because we use them','line_number':1894,'multiline':False]['text':'   as zip entry paths, as well as paths we open with CreateFileA (which can','line_number':1895,'multiline':False]['text':'   convert these paths internally to Windows-style).','line_number':1896,'multiline':False]['text':'   Example: "c:/foo/bar.txt\0c:/foo/sub/baz.txt\0"','line_number':1897,'multiline':False]['text':'','line_number':1898,'multiline':False]['text':' - Store pointers in `abs_path_ptrs_`, pointing to the start of each','line_number':1899,'multiline':False]['text':'   string inside `abs_paths_`.','line_number':1900,'multiline':False]['text':'   Example: "c:/foo/bar.txt\0c:/foo/sub/baz.txt\0"','line_number':1901,'multiline':False]['text':'             ^ here          ^ here','line_number':1902,'multiline':False]['text':'','line_number':1903,'multiline':False]['text':' - Store pointers in `entry_path_ptrs_`, pointing to the start of each','line_number':1904,'multiline':False]['text':'   zip entry path inside `abs_paths_`, which is the part of each path','line_number':1905,'multiline':False]['text':'   that's relative to `root`.','line_number':1906,'multiline':False]['text':'   Example: "c:/foo/bar.txt\0c:/foo/sub/baz.txt\0"','line_number':1907,'multiline':False]['text':'                    ^ here          ^ here','line_number':1908,'multiline':False]['text':'','line_number':1909,'multiline':False]['text':' - Because the ZipBuilder requires that the file paths and zip entry paths','line_number':1910,'multiline':False]['text':'   are null-terminated arrays, we insert an extra null at their ends.','line_number':1911,'multiline':False]['text':' namespace testing','line_number':2041,'multiline':False]['text':' namespace test_wrapper','line_number':2042,'multiline':False]['text':' namespace tools','line_number':2043,'multiline':False]['text':' namespace bazel','line_number':2044,'multiline':False]