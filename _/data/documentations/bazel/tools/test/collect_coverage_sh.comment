['text':'!/bin/bash','line_number':1,'multiline':False]['text':' Copyright 2016 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' Wrapper script for collecting code coverage during test execution.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' Expected environment:','line_number':19,'multiline':False]['text':'   COVERAGE_MANIFEST - mandatory, location of the instrumented file manifest','line_number':20,'multiline':False]['text':'   LCOV_MERGER - mandatory, location of the LcovMerger','line_number':21,'multiline':False]['text':'   COVERAGE_DIR - optional, location of the coverage temp directory','line_number':22,'multiline':False]['text':'   COVERAGE_OUTPUT_FILE - optional, location of the final lcov file','line_number':23,'multiline':False]['text':'   VERBOSE_COVERAGE - optional, print debug info from the coverage scripts','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' Script expects that it will be started in the execution root directory and','line_number':26,'multiline':False]['text':' not in the test's runfiles directory.','line_number':27,'multiline':False]['text':' resolve all links, keep path absolute','line_number':37,'multiline':False]['text':' fail the function','line_number':48,'multiline':False]['text':' When collect_coverage.sh is used, test runner must be instructed not to cd','line_number':59,'multiline':False]['text':' to the test's runfiles directory.','line_number':60,'multiline':False]['text':' Canonicalize the path to coverage manifest so that tests can find it.','line_number':64,'multiline':False]['text':' write coverage data outside of the runfiles tree','line_number':68,'multiline':False]['text':' make COVERAGE_DIR an absolute path','line_number':70,'multiline':False]['text':' make COVERAGE_OUTPUT_FILE an absolute path','line_number':77,'multiline':False]['text':' Java','line_number':82,'multiline':False]['text':' --------------------------------------','line_number':83,'multiline':False]['text':' Let tests know that it is a coverage run','line_number':85,'multiline':False]['text':' Setting up the environment for executing the C++ tests.','line_number':89,'multiline':False]['text':' TODO: GCOV_PREFIX_STRIP=3 is incorrect on MacOS in the default setup','line_number':91,'multiline':False]['text':' %c enables continuous mode but expands out to nothing, so the position','line_number':97,'multiline':False]['text':' within LLVM_PROFILE_FILE does not matter.','line_number':98,'multiline':False]['text':' In coverage mode for Java, we need to merge the runtime classpath before','line_number':102,'multiline':False]['text':' running the tests. JacocoCoverageRunner uses this merged jar in order','line_number':103,'multiline':False]['text':' to get coverage data.','line_number':104,'multiline':False]['text':'','line_number':105,'multiline':False]['text':' Merge the classpath using SingleJar and save it in the environment','line_number':106,'multiline':False]['text':' variable JACOCO_METADATA_JAR. The jars on the runtime classpath are listed','line_number':107,'multiline':False]['text':' in the file $JAVA_RUNTIME_CLASSPATH_FOR_COVERAGE.','line_number':108,'multiline':False]['text':'','line_number':109,'multiline':False]['text':' We need to merge the jars here because the merged jar can be an input','line_number':110,'multiline':False]['text':' too large (the combined merged jars for several big tests in a run','line_number':111,'multiline':False]['text':' can go over 10G). Not merging the jars and making','line_number':112,'multiline':False]['text':' JacocoCoverageRunner read every individual jar goes over the shutdown hook','line_number':113,'multiline':False]['text':' time limit in the coverage runner (~few seconds).','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' SINGLE_JAR_TOOL                     Exec path of SingleJar.','line_number':116,'multiline':False]['text':'','line_number':117,'multiline':False]['text':' JAVA_RUNTIME_CLASSPATH_FOR_COVERAGE Exec path of a file that contains the','line_number':118,'multiline':False]['text':'                                     relative paths of the jars on the runtime','line_number':119,'multiline':False]['text':'                                     classpath delimited by newline.','line_number':120,'multiline':False]['text':' Create a paramsfile for invoking SingleJar.','line_number':125,'multiline':False]['text':' Export JACOCO_METADATA_JAR in order for JacocoCoverageRunner to be able','line_number':130,'multiline':False]['text':' to read it.','line_number':131,'multiline':False]['text':' Append the runfiles prefix to all the relative paths found in','line_number':136,'multiline':False]['text':' JAVA_RUNTIME_CLASSPATH_FOR_COVERAGE, to invoke SingleJar with the','line_number':137,'multiline':False]['text':' absolute paths.','line_number':138,'multiline':False]['text':' Invoke SingleJar. This will create JACOCO_METADATA_JAR.','line_number':142,'multiline':False]['text':' TODO(bazel-team): cd should be avoided.','line_number':147,'multiline':False]['text':' Always create the coverage report.','line_number':150,'multiline':False]['text':' Execute the test.','line_number':155,'multiline':False]['text':' ------------------EXPERIMENTAL---------------------','line_number':169,'multiline':False]['text':' After this point we can run the code necessary for the coverage spawn','line_number':170,'multiline':False]['text':' TODO(bazel-team): cd should be avoided.','line_number':179,'multiline':False]['text':' Call the C++ code coverage collection script.','line_number':181,'multiline':False]['text':' this can happen if a rule returns an InstrumentedFilesInfo (which all do','line_number':187,'multiline':False]['text':' following 5b216b2) but does not define an _lcov_merger attribute.','line_number':188,'multiline':False]['text':' Unfortunately, we cannot simply stop this script being called in this case','line_number':189,'multiline':False]['text':' due to conflicts with how things work within Google.','line_number':190,'multiline':False]['text':' The file creation is required because TestActionBuilder has already declared','line_number':191,'multiline':False]['text':' it.','line_number':192,'multiline':False]['text':' Export the command line that invokes LcovMerger with the flags:','line_number':204,'multiline':False]['text':' --coverage_dir          The absolute path of the directory where the','line_number':205,'multiline':False]['text':'                         intermediate coverage reports are located.','line_number':206,'multiline':False]['text':'                         CoverageOutputGenerator will search for files with','line_number':207,'multiline':False]['text':'                         the .dat and .gcov extension under this directory and','line_number':208,'multiline':False]['text':'                         will merge everything it found in the output report.','line_number':209,'multiline':False]['text':'','line_number':210,'multiline':False]['text':' --output_file           The absolute path of the merged coverage report.','line_number':211,'multiline':False]['text':'','line_number':212,'multiline':False]['text':' --filter_sources        Filters out the sources that match the given regexes','line_number':213,'multiline':False]['text':'                         from the final coverage report. This is needed','line_number':214,'multiline':False]['text':'                         because some coverage tools (e.g. gcov) do not have','line_number':215,'multiline':False]['text':'                         any way of specifying what sources to exclude when','line_number':216,'multiline':False]['text':'                         generating the code coverage report (in this case the','line_number':217,'multiline':False]['text':'                         syslib sources).','line_number':218,'multiline':False]['text':'','line_number':219,'multiline':False]['text':' --source_file_manifest  The absolute path of the coverage source file','line_number':220,'multiline':False]['text':'                         manifest. CoverageOutputGenerator uses this file to','line_number':221,'multiline':False]['text':'                         keep only the sources found in the manifest (that is,','line_number':222,'multiline':False]['text':'                         only the sources of targets matched by','line_number':223,'multiline':False]['text':'                         --instrumentation_filter, excluding test targets','line_number':224,'multiline':False]['text':'                         unless --instrument_test_targets).','line_number':225,'multiline':False]['text':' JAVA_RUNFILES is set to the runfiles of the test, which does not necessarily','line_number':251,'multiline':False]['text':' contain a JVM (it does only if the test has a Java binary somewhere). So let','line_number':252,'multiline':False]['text':' the LCOV merger discover where its own runfiles tree is.','line_number':253,'multiline':False]