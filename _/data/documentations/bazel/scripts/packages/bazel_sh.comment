['text':'!/bin/bash','line_number':1,'multiline':False]['text':' Copyright 2019 The Bazel Authors. All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'    http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' This is a script which can be installed as your "bazel" binary instead of the','line_number':19,'multiline':False]['text':' real Bazel binary. When called, it tries to determine and run the correct','line_number':20,'multiline':False]['text':' Bazel version for a given project and forwards all arguments to it.','line_number':21,'multiline':False]['text':'','line_number':22,'multiline':False]['text':' You can specify which Bazel version to use using these methods:','line_number':23,'multiline':False]['text':' 1. Set $USE_BAZEL_VERSION to a version number','line_number':24,'multiline':False]['text':'    (e.g. export USE_BAZEL_VERSION=1.0.0).','line_number':25,'multiline':False]['text':' 2. Add a .bazelversion file that contains a version number next to your','line_number':26,'multiline':False]['text':'    WORKSPACE[.bazel] file.','line_number':27,'multiline':False]['text':' 3. Otherwise, the latest Bazel version will be used.','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' This wrapper only recognizes Bazel versions installed next to itself, thus','line_number':30,'multiline':False]['text':' if you install this wrapper as /usr/bin/bazel, you'll have to install binaries','line_number':31,'multiline':False]['text':' for individual Bazel binaries as e.g. /usr/bin/bazel-1.0.0.','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' In addition, if an executable called "tools/bazel" is found in the current','line_number':34,'multiline':False]['text':' workspace, this script will not directly execute Bazel, but instead store','line_number':35,'multiline':False]['text':' the path to the real Bazel executable in the environment variable BAZEL_REAL','line_number':36,'multiline':False]['text':' and then execute the "tools/bazel" wrapper script. The location of the wrapper','line_number':37,'multiline':False]['text':' script relative to the workspace can be changed with the $BAZEL_WRAPPER','line_number':38,'multiline':False]['text':' environment variable.','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' In contrast to Bazelisk, this script does not download anything from the','line_number':41,'multiline':False]['text':' internet and instead relies on the local system to provide Bazel binaries.','line_number':42,'multiline':False]['text':' Usage: color "31;5" "string"','line_number':45,'multiline':False]['text':' Some valid values for color:','line_number':46,'multiline':False]['text':' - 5 blink, 1 strong, 4 underlined','line_number':47,'multiline':False]['text':' - fg: 31 red,  32 green, 33 yellow, 34 blue, 35 purple, 36 cyan, 37 white','line_number':48,'multiline':False]['text':' - bg: 40 black, 41 red, 44 blue, 45 purple','line_number':49,'multiline':False]['text':' `readlink -f` that works on OSX too.','line_number':53,'multiline':False]['text':' Make sure we start with an absolute path.','line_number':58,'multiline':False]['text':' Removing a trailing /.','line_number':63,'multiline':False]['text':' Pull the first path segment off of queue.','line_number':65,'multiline':False]['text':' If this is the last segment.','line_number':67,'multiline':False]['text':' Remove that first segment.','line_number':72,'multiline':False]['text':' The "read" can fail if the .bazelversion file does not contain a final','line_number':118,'multiline':False]['text':' newline character. It will still correctly assign the read data to the','line_number':119,'multiline':False]['text':' variable. Of course it can also fail due to real I/O errors. Because we do','line_number':120,'multiline':False]['text':' validation of the read data later, we can just ignore the error here.','line_number':121,'multiline':False]['text':' Alternatives like 'bazel_version=$(head -1 ...)' are not better either,','line_number':122,'multiline':False]['text':' because bash does not care about the exit code of processes used in','line_number':123,'multiline':False]['text':' command substitution.','line_number':124,'multiline':False]['text':' If we read an empty string or the magic word "latest" from .bazelversion or','line_number':128,'multiline':False]['text':' $USE_BAZEL_VERSION, then we should use the latest available stable version.','line_number':129,'multiline':False]['text':' This mimics the behavior of Bazelisk.','line_number':130,'multiline':False]['text':' Find the latest Bazel version installed on the system.','line_number':136,'multiline':False]['text':' Remove the "bazel-" prefix from the file name.','line_number':142,'multiline':False]['text':' Try without the architecture suffix.','line_number':155,'multiline':False]['text':' Last try: Maybe `bazel-real` is actually the requested correct version?','line_number':160,'multiline':False]['text':' Note that "bazel --version" is very fast and doesn't start the Bazel server,','line_number':163,'multiline':False]['text':' as opposed to "bazel version".','line_number':164,'multiline':False]['text':' If the repository contains a checked-in executable set by $BAZEL_WRAPPER','line_number':171,'multiline':False]['text':' (defaults to tools/bazel), we assume that they know what they're doing and','line_number':172,'multiline':False]['text':' have their own way of versioning Bazel. Thus, we don't have to print our','line_number':173,'multiline':False]['text':' helpful messages or error out in case we couldn't find a binary.','line_number':174,'multiline':False]