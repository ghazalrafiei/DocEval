['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2020 The HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' inference: without aggregation head (SQA). Model only returns logits','line_number':300,'multiline':False]['text':' inference: with aggregation head (WTQ, WikiSQL-supervised). Model returns logits and aggregation logits','line_number':314,'multiline':False]['text':' training: can happen in 3 main ways','line_number':326,'multiline':False]['text':' case 1: conversational (SQA)','line_number':327,'multiline':False]['text':' case 2: weak supervision for aggregation (WTQ)','line_number':340,'multiline':False]['text':' case 3: strong supervision for aggregation (WikiSQL-supervised)','line_number':357,'multiline':False]['text':' TODO: Fix the failed tests','line_number':493,'multiline':False]['text':' Here we prepare a single table-question pair to test TAPAS inference on:','line_number':528,'multiline':False]['text':' Here we prepare a batch of 2 table-question pairs to test TAPAS inference on:','line_number':540,'multiline':False]['text':' Here we prepare a DIFFERENT batch of 2 table-question pairs to test TAPAS training on:','line_number':553,'multiline':False]['text':' ideally we want to test this with the weights of tapas_inter_masklm_base_reset,','line_number':578,'multiline':False]['text':' but since it's not straightforward to do this with the TF 1 implementation, we test it with','line_number':579,'multiline':False]['text':' the weights of the WTQ base model (i.e. tapas_wtq_wikisql_sqa_inter_masklm_base_reset)','line_number':580,'multiline':False]['text':' test the sequence output','line_number':589,'multiline':False]['text':' test the pooled output','line_number':603,'multiline':False]['text':' TapasForQuestionAnswering has 3 possible ways of being fine-tuned:','line_number':612,'multiline':False]['text':' - conversational set-up (SQA)','line_number':613,'multiline':False]['text':' - weak supervision for aggregation (WTQ, WikiSQL)','line_number':614,'multiline':False]['text':' - strong supervision for aggregation (WikiSQL-supervised)','line_number':615,'multiline':False]['text':' We test all of them:','line_number':616,'multiline':False]['text':' note that google/tapas-base-finetuned-sqa should correspond to tapas_sqa_inter_masklm_base_reset','line_number':619,'multiline':False]['text':' test the logits','line_number':628,'multiline':False]['text':' note that google/tapas-small-finetuned-sqa should correspond to tapas_sqa_inter_masklm_small_reset','line_number':666,'multiline':False]['text':' however here we test the version with absolute position embeddings','line_number':667,'multiline':False]['text':' test the logits','line_number':678,'multiline':False]['text':' note that google/tapas-base-finetuned-wtq should correspond to tapas_wtq_wikisql_sqa_inter_masklm_base_reset','line_number':716,'multiline':False]['text':' let's test on a batch','line_number':720,'multiline':False]['text':' test the logits','line_number':727,'multiline':False]['text':' test the aggregation logits','line_number':742,'multiline':False]['text':' test the predicted answer coordinates and aggregation indices','line_number':753,'multiline':False]['text':' note that google/tapas-base-finetuned-wtq should correspond to tapas_wtq_wikisql_sqa_inter_masklm_base_reset','line_number':766,'multiline':False]['text':' normally we should put the model in training mode but it's a pain to do this with the TF 1 implementation','line_number':769,'multiline':False]['text':' let's test on a batch','line_number':772,'multiline':False]['text':' prepare data (created by the tokenizer) and move to torch_device','line_number':783,'multiline':False]['text':' the answer should be prepared by the user','line_number':791,'multiline':False]['text':' forward pass to get loss + logits:','line_number':794,'multiline':False]['text':' test the loss','line_number':806,'multiline':False]['text':' test the logits on the first example','line_number':811,'multiline':False]['text':' test the aggregation logits on the second example','line_number':832,'multiline':False]['text':' note that google/tapas-base-finetuned-wikisql-supervised should correspond to tapas_wikisql_sqa_inter_masklm_base_reset','line_number':842,'multiline':False]['text':' test the logits','line_number':853,'multiline':False]['text':' test the aggregation logits','line_number':888,'multiline':False]['text':' PyTorch model outputs [[16.5679, -3.0668, -2.3442, -0.9674]]','line_number':894,'multiline':False]['text':' note that google/tapas-base-finetuned-tabfact should correspond to tapas_tabfact_inter_masklm_base_reset','line_number':900,'multiline':False]['text':' test the classification logits','line_number':910,'multiline':False]['text':' Note that the PyTorch model outputs [[0.8057, 9.5281]]','line_number':916,'multiline':False]['text':' Below: tests for Tapas utilities which are defined in modeling_tapas.py.','line_number':921,'multiline':False]['text':' These are based on segmented_tensor_test.py of the original implementation.','line_number':922,'multiline':False]['text':' URL: https://github.com/google-research/tapas/blob/master/tapas/models/segmented_tensor_test.py','line_number':923,'multiline':False]['text':' Projections should give back the original indices.','line_number':977,'multiline':False]['text':' we use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':978,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':982,'multiline':False]['text':' The first and second "column" are identified in the first table.','line_number':986,'multiline':False]['text':' All rows are distinct in the first table.','line_number':991,'multiline':False]['text':' All cells are distinct in the second table.','line_number':997,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':1012,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':1030,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':1034,'multiline':False]['text':' We use np.testing.assert_allclose rather than Tensorflow's assertAllClose','line_number':1044,'multiline':False]['text':' We use np.testing.assert_allclose rather than Tensorflow's assertAllClose','line_number':1059,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':1077,'multiline':False]['text':' We use np.testing.assert_allclose rather than Tensorflow's assertAllClose','line_number':1085,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':1087,'multiline':False]['text':' Compute sums and then gather. The result should have the same shape as','line_number':1096,'multiline':False]['text':' the original table and each element should contain the sum the values in','line_number':1097,'multiline':False]['text':' its cell.','line_number':1098,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':1103,'multiline':False]['text':' We use np.testing.assert_array_equal rather than Tensorflow's assertAllEqual','line_number':1114,'multiline':False]