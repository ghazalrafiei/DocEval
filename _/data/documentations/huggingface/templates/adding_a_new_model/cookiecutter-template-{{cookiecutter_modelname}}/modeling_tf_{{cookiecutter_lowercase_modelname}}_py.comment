['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 {{cookiecutter.authors}} and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all {{cookiecutter.modelname}} models at https://huggingface.co/models?filter={{cookiecutter.lowercase_modelname}}','line_number':68,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertEmbeddings with Bert->{{cookiecutter.camelcase_modelname}}','line_number':72,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfAttention with Bert->{{cookiecutter.camelcase_modelname}}','line_number':151,'multiline':False]['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':181,'multiline':False]['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':184,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':201,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':202,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':203,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':207,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':227,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':228,'multiline':False]['text':' key/value_states (first "if" case)','line_number':229,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':230,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':231,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':232,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':233,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':236,'multiline':False]['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':237,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in TF{{cookiecutter.camelcase_modelname}}Model call() function)','line_number':243,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':246,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':249,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':250,'multiline':False]['text':' Mask heads if we want to','line_number':253,'multiline':False]['text':' (batch_size, seq_len_q, all_head_size)','line_number':260,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfOutput with Bert->{{cookiecutter.camelcase_modelname}}','line_number':269,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertAttention with Bert->{{cookiecutter.camelcase_modelname}}','line_number':288,'multiline':False]['text':' add attentions (possibly with past_key_value) if we output them','line_number':323,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertIntermediate with Bert->{{cookiecutter.camelcase_modelname}}','line_number':329,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertOutput with Bert->{{cookiecutter.camelcase_modelname}}','line_number':350,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLayer with Bert->{{cookiecutter.camelcase_modelname}}','line_number':369,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':395,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':409,'multiline':False]['text':' add self attentions if we output attention weights','line_number':414,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':424,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':437,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':439,'multiline':False]['text':' add attentions if we output them','line_number':447,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':449,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertEncoder with Bert->{{cookiecutter.camelcase_modelname}}','line_number':456,'multiline':False]['text':' Add last layer','line_number':508,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform with Bert->{{cookiecutter.camelcase_modelname}}','line_number':526,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead with Bert->{{cookiecutter.camelcase_modelname}}','line_number':552,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':562,'multiline':False]['text':' an output-only bias for each token.','line_number':563,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMLMHead with Bert->{{cookiecutter.camelcase_modelname}}','line_number':596,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.get_input_embeddings','line_number':622,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.set_input_embeddings','line_number':626,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer._prune_heads','line_number':631,'multiline':False]['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':693,'multiline':False]['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':694,'multiline':False]['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':695,'multiline':False]['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':696,'multiline':False]['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':697,'multiline':False]['text':' Copied from `modeling_tf_t5.py`','line_number':701,'multiline':False]['text':' Provided a padding mask of dimensions [batch_size, mask_seq_length]','line_number':702,'multiline':False]['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':703,'multiline':False]['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':704,'multiline':False]['text':' attention_mask needs to be sliced to the shape `[batch_size, 1, from_seq_length - cached_seq_length, to_seq_length]','line_number':718,'multiline':False]['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':725,'multiline':False]['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':726,'multiline':False]['text':' positions we want to attend and -10000.0 for masked positions.','line_number':727,'multiline':False]['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':728,'multiline':False]['text':' effectively the same as removing these entirely.','line_number':729,'multiline':False]['text':' Copied from `modeling_tf_t5.py` with -1e9 -> -10000','line_number':735,'multiline':False]['text':' If a 2D ou 3D attention mask is provided for the cross-attention','line_number':737,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':738,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':739,'multiline':False]['text':' T5 has a mask that can compare sequence ids, we can simulate this here with this transposition','line_number':749,'multiline':False]['text':' Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270','line_number':750,'multiline':False]['text':' encoder_extended_attention_mask = tf.math.equal(encoder_extended_attention_mask,','line_number':751,'multiline':False]['text':'                                         tf.transpose(encoder_extended_attention_mask, perm=(-1, -2)))','line_number':752,'multiline':False]['text':' Prepare head mask if needed','line_number':758,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':759,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':760,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':761,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':762,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':1071,'multiline':False]['text':' shift labels to the left and cut last logit token','line_number':1149,'multiline':False]['text':' take <s> token (equiv. to [CLS])','line_number':1189,'multiline':False]['text':' Public API','line_number':1552,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart.shift_tokens_right','line_number':1574,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':1580,'multiline':False]['text':' "Verify that `labels` has only positive values and -100"','line_number':1587,'multiline':False]['text':' Make sure the assertion op is called by wrapping the result in an identity no-op','line_number':1590,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':1683,'multiline':False]['text':' for the decoder','line_number':1684,'multiline':False]['text':' get query proj','line_number':1688,'multiline':False]['text':' get key, value proj','line_number':1690,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':1692,'multiline':False]['text':' cross_attentions','line_number':1696,'multiline':False]['text':' reuse k, v, self_attention','line_number':1700,'multiline':False]['text':' self_attention','line_number':1706,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':1711,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':1712,'multiline':False]['text':' key/value_states (first "if" case)','line_number':1713,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':1714,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':1715,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':1716,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':1717,'multiline':False]['text':' Self Attention','line_number':1884,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1885,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':1887,'multiline':False]['text':' Cross-Attention Block','line_number':1898,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':1904,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':1917,'multiline':False]['text':' Fully Connected','line_number':1920,'multiline':False]['text':' check attention mask and invert','line_number':2172,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2174,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':2180,'multiline':False]['text':' encoder layers','line_number':2188,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':2193,'multiline':False]['text':' skip the layer','line_number':2195,'multiline':False]['text':' embed positions','line_number':2350,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2364,'multiline':False]['text':' decoder layers','line_number':2370,'multiline':False]['text':' check if head_mask and cross_attn_head_mask have a correct number of layers specified if desired','line_number':2376,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':2386,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2434,'multiline':False]['text':' Additional attribute to specify the expected name scope of the layer (for loading/storing weights)','line_number':2474,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a TFBaseModelOutput when return_dict=True','line_number':2524,'multiline':False]['text':' If the user passed a TFBaseModelOutput for encoder_outputs, we wrap it in a tuple when return_dict=False','line_number':2531,'multiline':False]['text':' The shared/tied weights expect to be in the model base namespace','line_number':2566,'multiline':False]['text':' Adding "/" to the end (not the start!) of a tf.name_scope puts it in the root namespace rather than','line_number':2567,'multiline':False]['text':' the current one.','line_number':2568,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart.BiasLayer','line_number':2639,'multiline':False]['text':' Note: the name of this variable will NOT be scoped when serialized, i.e. it will not be in the format of','line_number':2648,'multiline':False]['text':' "outer_layer/inner_layer/.../name:0". Instead, it will be "name:0". For further details, see:','line_number':2649,'multiline':False]['text':' https://github.com/huggingface/transformers/pull/18833#issuecomment-1233090214','line_number':2650,'multiline':False]['text':' final_bias_logits is registered as a buffer in pytorch, so not trainable for the sake of consistency.','line_number':2671,'multiline':False]['text':' Replaces the existing layers containing bias for correct (de)serialization.','line_number':2686,'multiline':False]['text':' index 1 of d outputs','line_number':2775,'multiline':False]['text':' index 2 of d outputs','line_number':2776,'multiline':False]['text':' index 3 of d outputs','line_number':2777,'multiline':False]['text':' index 4 of d outputs','line_number':2778,'multiline':False]['text':' index 0 of encoder outputs','line_number':2779,'multiline':False]['text':' 1 of e out','line_number':2780,'multiline':False]['text':' 2 of e out','line_number':2781,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':2796,'multiline':False]['text':' needs to be passed to make Keras.layer.__call__ happy','line_number':2801,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':2809,'multiline':False]