['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 {{cookiecutter.authors}} The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all {{cookiecutter.modelname}} models at https://huggingface.co/models?filter={{cookiecutter.lowercase_modelname}}','line_number':62,'multiline':False]['text':' Load weights from TF model','line_number':81,'multiline':False]['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':93,'multiline':False]['text':' which are not required for using pretrained model','line_number':94,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings with Bert->{{cookiecutter.camelcase_modelname}}','line_number':140,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':150,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':151,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':155,'multiline':False]['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':177,'multiline':False]['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':178,'multiline':False]['text':' issue #5664','line_number':179,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->{{cookiecutter.camelcase_modelname}}','line_number':201,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':244,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':245,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':246,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':250,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':270,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':271,'multiline':False]['text':' key/value_states (first "if" case)','line_number':272,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':273,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':274,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':275,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':276,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':279,'multiline':False]['text':' fp16 compatibility','line_number':288,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in {{cookiecutter.camelcase_modelname}}Model forward() function)','line_number':300,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':303,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':306,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':307,'multiline':False]['text':' Mask heads if we want to','line_number':310,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->{{cookiecutter.camelcase_modelname}}','line_number':327,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->{{cookiecutter.camelcase_modelname}}','line_number':342,'multiline':False]['text':' Prune linear layers','line_number':357,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':363,'multiline':False]['text':' add attentions if we output them','line_number':388,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->{{cookiecutter.camelcase_modelname}}','line_number':392,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->{{cookiecutter.camelcase_modelname}}','line_number':408,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->{{cookiecutter.camelcase_modelname}}','line_number':423,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':448,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':459,'multiline':False]['text':' add self attentions if we output attention weights','line_number':464,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':472,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':484,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':486,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':495,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->{{cookiecutter.camelcase_modelname}}','line_number':507,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->{{cookiecutter.camelcase_modelname}}','line_number':600,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->{{cookiecutter.camelcase_modelname}}','line_number':618,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':624,'multiline':False]['text':' an output-only bias for each token.','line_number':625,'multiline':False]['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':630,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->{{cookiecutter.camelcase_modelname}}','line_number':639,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':665,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':666,'multiline':False]['text':' Initialize weights and apply final processing','line_number':767,'multiline':False]['text':' past_key_values_length','line_number':850,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':865,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':866,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':869,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':870,'multiline':False]['text':' Prepare head mask if needed','line_number':880,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':881,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':882,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':883,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':884,'multiline':False]['text':' Initialize weights and apply final processing','line_number':934,'multiline':False]['text':' -100 index = padding token','line_number':992,'multiline':False]['text':'  add a dummy token','line_number':1010,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1037,'multiline':False]['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1140,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1162,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':1166,'multiline':False]['text':' take <s> token (equiv. to [CLS])','line_number':1190,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1211,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1303,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1393,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1471,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':1527,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1532,'multiline':False]['text':' See all {{cookiecutter.modelname}} models at https://huggingface.co/models?filter={{cookiecutter.lowercase_modelname}}','line_number':1593,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':1606,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':1670,'multiline':False]['text':' for the decoder','line_number':1671,'multiline':False]['text':' get query proj','line_number':1675,'multiline':False]['text':' get key, value proj','line_number':1677,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':1679,'multiline':False]['text':' cross_attentions','line_number':1683,'multiline':False]['text':' reuse k, v, self_attention','line_number':1687,'multiline':False]['text':' self_attention','line_number':1693,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':1698,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':1699,'multiline':False]['text':' key/value_states (first "if" case)','line_number':1700,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':1701,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':1702,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':1703,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':1704,'multiline':False]['text':' this operation is a bit akward, but it's required to','line_number':1739,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':1740,'multiline':False]['text':' In order to do so, attn_weights have to reshaped','line_number':1741,'multiline':False]['text':' twice and have to be reused in the following','line_number':1742,'multiline':False]['text':' Self Attention','line_number':1890,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1891,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':1893,'multiline':False]['text':' Cross-Attention Block','line_number':1905,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':1911,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':1925,'multiline':False]['text':' Fully Connected','line_number':1928,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartClassificationHead with Bart->{{cookiecutter.camelcase_modelname}}','line_number':1948,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2173,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':2229,'multiline':False]['text':' expand attention_mask','line_number':2250,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2252,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':2258,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':2267,'multiline':False]['text':' skip the layer','line_number':2269,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2333,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':2428,'multiline':False]['text':' past_key_values_length','line_number':2439,'multiline':False]['text':' expand encoder attention mask','line_number':2447,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2449,'multiline':False]['text':' embed positions','line_number':2452,'multiline':False]['text':' decoder layers','line_number':2460,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':2470,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':2477,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':2523,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2557,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':2615,'multiline':False]['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':2623,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2672,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':2809,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':2814,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':2822,'multiline':False]['text':' last hidden state','line_number':2900,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':3028,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':3033,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartDecoderWrapper with Bart->{{cookiecutter.camelcase_modelname}}','line_number':3063,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForCausalLM with Bart->{{cookiecutter.camelcase_modelname}}','line_number':3078,'multiline':False]['text':' Initialize weights and apply final processing','line_number':3089,'multiline':False]['text':' decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)','line_number':3211,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':3248,'multiline':False]['text':' first step, decoder_cached_states are empty','line_number':3254,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':3256,'multiline':False]