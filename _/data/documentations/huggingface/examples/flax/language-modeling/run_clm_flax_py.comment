['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':' coding=utf-8','line_number':2,'multiline':False]['text':' Copyright 2021 The HuggingFace Team All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' You can also adapt this script on your own causal language modeling task. Pointers for this are left as comments.','line_number':22,'multiline':False]['text':' Skip incomplete batch.','line_number':299,'multiline':False]['text':' See all possible arguments in src/transformers/training_args.py','line_number':342,'multiline':False]['text':' or by passing the --help flag to this script.','line_number':343,'multiline':False]['text':' We now keep distinct sets of args, for a cleaner separation of concerns.','line_number':344,'multiline':False]['text':' If we pass only one argument to the script and it's the path to a json file,','line_number':348,'multiline':False]['text':' let's parse it to get our arguments.','line_number':349,'multiline':False]['text':' Sending telemetry. Tracking the example usage helps us better allocate resources to maintain them. The','line_number':363,'multiline':False]['text':' information sent is the one passed as arguments along with your Python/PyTorch versions.','line_number':364,'multiline':False]['text':' Make one log on every process with the configuration for debugging.','line_number':378,'multiline':False]['text':' Setup logging, we only want one process per machine to log things on the screen.','line_number':384,'multiline':False]['text':' Set the verbosity to info of the Transformers logger (on main process only):','line_number':393,'multiline':False]['text':' Set seed before initializing model.','line_number':396,'multiline':False]['text':' Handle the repository creation','line_number':399,'multiline':False]['text':' Retrieve of infer repo_name','line_number':401,'multiline':False]['text':' Create repo and retrieve repo_id','line_number':405,'multiline':False]['text':' Clone repo locally','line_number':407,'multiline':False]['text':'  Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)','line_number':410,'multiline':False]['text':' or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/','line_number':411,'multiline':False]['text':' (the dataset will be downloaded automatically from the datasets Hub).','line_number':412,'multiline':False]['text':'','line_number':413,'multiline':False]['text':' For CSV/JSON files, this script will use the column called 'text' or the first column if no column called','line_number':414,'multiline':False]['text':' 'text' is found. You can easily tweak this behavior (see below).','line_number':415,'multiline':False]['text':'','line_number':416,'multiline':False]['text':' In distributed training, the load_dataset function guarantees that only one local process can concurrently','line_number':417,'multiline':False]['text':' download the dataset.','line_number':418,'multiline':False]['text':' Downloading and loading a dataset from the hub.','line_number':420,'multiline':False]['text':' See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at','line_number':486,'multiline':False]['text':' https://huggingface.co/docs/datasets/loading_datasets.','line_number':487,'multiline':False]['text':' Load pretrained model and tokenizer','line_number':489,'multiline':False]['text':' Distributed training:','line_number':491,'multiline':False]['text':' The .from_pretrained methods guarantee that only one local process can concurrently','line_number':492,'multiline':False]['text':' download model & vocab.','line_number':493,'multiline':False]['text':' Preprocessing the datasets.','line_number':551,'multiline':False]['text':' First we tokenize all the texts.','line_number':552,'multiline':False]['text':' since this will be pickled to avoid _LazyModule error in Hasher force logger loading before tokenize_function','line_number':559,'multiline':False]['text':' clm input could be much much longer than block_size','line_number':565,'multiline':False]['text':' Main data processing function that will concatenate all texts from our dataset and generate chunks of block_size.','line_number':597,'multiline':False]['text':' Concatenate all texts.','line_number':599,'multiline':False]['text':' We drop the small remainder, we could add padding if the model supported it instead of this drop, you can','line_number':602,'multiline':False]['text':' customize this part to your needs.','line_number':603,'multiline':False]['text':' Split by chunks of max_len.','line_number':606,'multiline':False]['text':' Note that with `batched=True`, this map processes 1,000 texts together, so group_texts throws away a remainder','line_number':614,'multiline':False]['text':' for each of those groups of 1,000 texts. You can adjust that batch_size here but a higher value might be slower','line_number':615,'multiline':False]['text':' to preprocess.','line_number':616,'multiline':False]['text':'','line_number':617,'multiline':False]['text':' To speed up this part, we use multiprocessing. See the documentation of the map method for more information:','line_number':618,'multiline':False]['text':' https://huggingface.co/docs/datasets/process#map','line_number':619,'multiline':False]['text':' Enable tensorboard only on the master node','line_number':644,'multiline':False]['text':' Initialize our training','line_number':662,'multiline':False]['text':' Store some constant','line_number':666,'multiline':False]['text':' Create learning rate schedule','line_number':674,'multiline':False]['text':' We use Optax's "masking" functionality to not apply weight decay','line_number':683,'multiline':False]['text':' to bias and LayerNorm scale parameters. decay_mask_fn returns a','line_number':684,'multiline':False]['text':' mask boolean with the same structure as the parameters.','line_number':685,'multiline':False]['text':' The mask is True for parameters that should be decayed.','line_number':686,'multiline':False]['text':' find out all LayerNorm parameters','line_number':689,'multiline':False]['text':' create adam optimizer','line_number':700,'multiline':False]['text':' We use the default parameters here to initialize adafactor,','line_number':702,'multiline':False]['text':' For more details about the parameters please check https://github.com/deepmind/optax/blob/ed02befef9bf81cbbf236be3d2b0e032e9ed4a40/optax/_src/alias.py#L74','line_number':703,'multiline':False]['text':' Setup train state','line_number':717,'multiline':False]['text':' Define gradient update step fn','line_number':726,'multiline':False]['text':' Define eval fn','line_number':747,'multiline':False]['text':' summarize metrics','line_number':753,'multiline':False]['text':' Create parallel version of the train and eval step','line_number':758,'multiline':False]['text':' Replicate the train state on each device','line_number':762,'multiline':False]['text':' ======================== Training ================================','line_number':776,'multiline':False]['text':' Create sampling rng','line_number':779,'multiline':False]['text':' Generate an epoch by shuffling sampling indices from the train dataset','line_number':782,'multiline':False]['text':' train','line_number':785,'multiline':False]['text':' Save metrics','line_number':795,'multiline':False]['text':' ======================== Evaluating ==============================','line_number':809,'multiline':False]['text':' Model forward','line_number':814,'multiline':False]['text':' normalize eval metrics','line_number':821,'multiline':False]['text':' Print metrics and update progress bar','line_number':830,'multiline':False]['text':' Save metrics','line_number':838,'multiline':False]['text':' save checkpoint after each epoch and push checkpoint to the hub','line_number':843,'multiline':False]['text':' Eval after training','line_number':851,'multiline':False]['text':' Model forward','line_number':857,'multiline':False]['text':' normalize eval metrics','line_number':864,'multiline':False]