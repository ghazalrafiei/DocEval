['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':' coding=utf-8','line_number':2,'multiline':False]['text':' Copyright 2021 The HuggingFace Team All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' You can also adapt this script on your own denoising language modeling task. Pointers for this are left as comments.','line_number':21,'multiline':False]['text':' convert list to dict and tensorize input','line_number':295,'multiline':False]['text':' permuting sentences','line_number':303,'multiline':False]['text':' masking span of tokens (text infilling in the paper)','line_number':309,'multiline':False]['text':' ignore pad tokens','line_number':315,'multiline':False]['text':' find end locations of sentences','line_number':326,'multiline':False]['text':' write shuffled sentences into results','line_number':346,'multiline':False]['text':' determine how many tokens we need to mask in total','line_number':367,'multiline':False]['text':' generate a sufficient number of span lengths','line_number':373,'multiline':False]['text':' remove all spans of length 0','line_number':380,'multiline':False]['text':' note that BART inserts additional mask tokens where length == 0,','line_number':381,'multiline':False]['text':' which we do not implement for now as it adds additional complexity','line_number':382,'multiline':False]['text':' trim to about num_tokens_to_mask tokens','line_number':385,'multiline':False]['text':' randomly choose starting positions for masking','line_number':389,'multiline':False]['text':' prepare mask','line_number':392,'multiline':False]['text':' mask starting positions','line_number':396,'multiline':False]['text':' fill up spans','line_number':401,'multiline':False]['text':' place the mask tokens','line_number':411,'multiline':False]['text':' remove mask tokens that are not starts of spans','line_number':419,'multiline':False]['text':' See all possible arguments in src/transformers/training_args.py','line_number':461,'multiline':False]['text':' or by passing the --help flag to this script.','line_number':462,'multiline':False]['text':' We now keep distinct sets of args, for a cleaner separation of concerns.','line_number':463,'multiline':False]['text':' If we pass only one argument to the script and it's the path to a json file,','line_number':467,'multiline':False]['text':' let's parse it to get our arguments.','line_number':468,'multiline':False]['text':' Sending telemetry. Tracking the example usage helps us better allocate resources to maintain them. The','line_number':482,'multiline':False]['text':' information sent is the one passed as arguments along with your Python/PyTorch versions.','line_number':483,'multiline':False]['text':' Setup logging','line_number':497,'multiline':False]['text':' Log on each process the small summary:','line_number':504,'multiline':False]['text':' Set the verbosity to info of the Transformers logger (on main process only):','line_number':507,'multiline':False]['text':' Set seed before initializing model.','line_number':510,'multiline':False]['text':' Handle the repository creation','line_number':513,'multiline':False]['text':' Retrieve of infer repo_name','line_number':515,'multiline':False]['text':' Create repo and retrieve repo_id','line_number':519,'multiline':False]['text':' Clone repo locally','line_number':521,'multiline':False]['text':' Get the datasets: you can either provide your own CSV/JSON/TXT training and evaluation files (see below)','line_number':524,'multiline':False]['text':' or just provide the name of one of the public datasets available on the hub at https://huggingface.co/datasets/','line_number':525,'multiline':False]['text':' (the dataset will be downloaded automatically from the datasets Hub).','line_number':526,'multiline':False]['text':'','line_number':527,'multiline':False]['text':' For CSV/JSON files, this script will use the column called 'text' or the first column if no column called','line_number':528,'multiline':False]['text':' 'text' is found. You can easily tweak this behavior (see below).','line_number':529,'multiline':False]['text':' Downloading and loading a dataset from the hub.','line_number':531,'multiline':False]['text':' See more about loading any type of standard or custom dataset (from files, python dict, pandas DataFrame, etc) at','line_number':591,'multiline':False]['text':' https://huggingface.co/docs/datasets/loading_datasets.','line_number':592,'multiline':False]['text':' Load pretrained model and tokenizer','line_number':594,'multiline':False]['text':' Preprocessing the datasets.','line_number':633,'multiline':False]['text':' First we tokenize all the texts.','line_number':634,'multiline':False]['text':' Use Punkt Sentence Tokenizer to divide a document into a list of sentences','line_number':643,'multiline':False]['text':' use pad token as end of sentence indicator','line_number':649,'multiline':False]['text':' Tokenize every text, then concatenate them together before splitting them in smaller parts.','line_number':661,'multiline':False]['text':' Since we make sure that all sequences are of the same length, no attention_mask is needed.','line_number':662,'multiline':False]['text':' Main data processing function that will concatenate all texts from our dataset and generate chunks of','line_number':674,'multiline':False]['text':' max_seq_length.','line_number':675,'multiline':False]['text':' Concatenate all texts.','line_number':677,'multiline':False]['text':' We drop the small remainder, we could add padding if the model supported it instead of this drop, you can','line_number':680,'multiline':False]['text':' customize this part to your needs.','line_number':681,'multiline':False]['text':' Split by chunks of max_len.','line_number':684,'multiline':False]['text':' Note that with `batched=True`, this map processes 1,000 texts together, so group_texts throws away a','line_number':691,'multiline':False]['text':' remainder for each of those groups of 1,000 texts. You can adjust that batch_size here but a higher value','line_number':692,'multiline':False]['text':' might be slower to preprocess.','line_number':693,'multiline':False]['text':'','line_number':694,'multiline':False]['text':' To speed up this part, we use multiprocessing. See the documentation of the map method for more information:','line_number':695,'multiline':False]['text':' https://huggingface.co/docs/datasets/process#map','line_number':696,'multiline':False]['text':' Enable tensorboard only on the master node','line_number':704,'multiline':False]['text':' Initialize our training','line_number':722,'multiline':False]['text':' Data collator','line_number':742,'multiline':False]['text':' This one will take care of randomly masking the tokens and permuting the sentences.','line_number':743,'multiline':False]['text':' Store some constant','line_number':752,'multiline':False]['text':' Create learning rate schedule','line_number':760,'multiline':False]['text':' We use Optax's "masking" functionality to not apply weight decay','line_number':773,'multiline':False]['text':' to bias and LayerNorm scale parameters. decay_mask_fn returns a','line_number':774,'multiline':False]['text':' mask boolean with the same structure as the parameters.','line_number':775,'multiline':False]['text':' The mask is True for parameters that should be decayed.','line_number':776,'multiline':False]['text':' find out all LayerNorm parameters','line_number':779,'multiline':False]['text':' create adam optimizer','line_number':790,'multiline':False]['text':' We use the default parameters here to initialize adafactor,','line_number':792,'multiline':False]['text':' For more details about the parameters please check https://github.com/deepmind/optax/blob/ed02befef9bf81cbbf236be3d2b0e032e9ed4a40/optax/_src/alias.py#L74','line_number':793,'multiline':False]['text':' Setup train state','line_number':806,'multiline':False]['text':' Define gradient update step fn','line_number':809,'multiline':False]['text':' compute loss, ignore padded input tokens and special tokens','line_number':818,'multiline':False]['text':' take average','line_number':822,'multiline':False]['text':' true loss = total loss / total samples','line_number':832,'multiline':False]['text':' true grad = total grad / total samples','line_number':836,'multiline':False]['text':' Create parallel version of the train step','line_number':844,'multiline':False]['text':' Define eval fn','line_number':847,'multiline':False]['text':' compute loss, ignore padded input tokens and special tokens','line_number':853,'multiline':False]['text':' compute accuracy','line_number':857,'multiline':False]['text':' summarize metrics','line_number':860,'multiline':False]['text':' Replicate the train state on each device','line_number':868,'multiline':False]['text':' ======================== Training ================================','line_number':874,'multiline':False]['text':' Create sampling rng','line_number':878,'multiline':False]['text':' Generate an epoch by shuffling sampling indices from the train dataset','line_number':881,'multiline':False]['text':' Avoid using jax.numpy here in case of TPU training','line_number':883,'multiline':False]['text':' Gather the indexes for creating the batch and do a training step','line_number':887,'multiline':False]['text':' Model forward','line_number':892,'multiline':False]['text':' Save metrics','line_number':900,'multiline':False]['text':' ======================== Evaluating ==============================','line_number':914,'multiline':False]['text':' Avoid using jax.numpy here in case of TPU training','line_number':916,'multiline':False]['text':' Model forward','line_number':925,'multiline':False]['text':' normalize eval metrics','line_number':931,'multiline':False]['text':' Update progress bar','line_number':937,'multiline':False]['text':' Save metrics','line_number':940,'multiline':False]['text':' save checkpoint after each epoch and push checkpoint to the hub','line_number':945,'multiline':False]['text':' Eval after training','line_number':953,'multiline':False]['text':' Avoid using jax.numpy here in case of TPU training','line_number':956,'multiline':False]['text':' Model forward','line_number':965,'multiline':False]['text':' normalize eval metrics','line_number':971,'multiline':False]