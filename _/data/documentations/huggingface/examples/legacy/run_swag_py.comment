['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':' coding=utf-8','line_number':2,'multiline':False]['text':' Copyright 2018 The Google AI Language Team Authors and The HuggingFace Inc. team.','line_number':3,'multiline':False]['text':' Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':6,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':7,'multiline':False]['text':' You may obtain a copy of the License at','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':12,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':13,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':14,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':15,'multiline':False]['text':' limitations under the License.','line_number':16,'multiline':False]['text':' in the swag dataset, the','line_number':112,'multiline':False]['text':' common beginning of each','line_number':113,'multiline':False]['text':' choice is stored in "sent2".','line_number':114,'multiline':False]['text':' we skip the line with the column names','line_number':121,'multiline':False]['text':' Swag is a multiple choice task. To perform this task using Bert,','line_number':130,'multiline':False]['text':' we will use the formatting proposed in "Improving Language','line_number':131,'multiline':False]['text':' Understanding by Generative Pre-Training" and suggested by','line_number':132,'multiline':False]['text':' @jacobdevlin-google in this issue','line_number':133,'multiline':False]['text':' https://github.com/google-research/bert/issues/38.','line_number':134,'multiline':False]['text':'','line_number':135,'multiline':False]['text':' Each choice will correspond to a sample on which we run the','line_number':136,'multiline':False]['text':' inference. For a given Swag example, we will create the 4','line_number':137,'multiline':False]['text':' following inputs:','line_number':138,'multiline':False]['text':' - [CLS] context [SEP] choice_1 [SEP]','line_number':139,'multiline':False]['text':' - [CLS] context [SEP] choice_2 [SEP]','line_number':140,'multiline':False]['text':' - [CLS] context [SEP] choice_3 [SEP]','line_number':141,'multiline':False]['text':' - [CLS] context [SEP] choice_4 [SEP]','line_number':142,'multiline':False]['text':' The model will output a single value for each input. To get the','line_number':143,'multiline':False]['text':' final decision of the model, we will run a softmax over these 4','line_number':144,'multiline':False]['text':' outputs.','line_number':145,'multiline':False]['text':' We create a copy of the context tokens in order to be','line_number':153,'multiline':False]['text':' able to shrink it according to ending_tokens','line_number':154,'multiline':False]['text':' Modifies `context_tokens_choice` and `ending_tokens` in','line_number':157,'multiline':False]['text':' place so that the total length is less than the','line_number':158,'multiline':False]['text':' specified length.  Account for [CLS], [SEP], [SEP] with','line_number':159,'multiline':False]['text':' "- 3"','line_number':160,'multiline':False]['text':' Zero-pad up to the sequence length.','line_number':169,'multiline':False]['text':' This is a simple heuristic which will always truncate the longer sequence','line_number':202,'multiline':False]['text':' one token at a time. This makes more sense than truncating an equal percent','line_number':203,'multiline':False]['text':' of tokens from each, since if one sequence is very short then each token','line_number':204,'multiline':False]['text':' that's truncated likely contains more information than a longer sequence.','line_number':205,'multiline':False]['text':' Make sure only the first process in distributed training process the dataset, and the others will use the cache','line_number':235,'multiline':False]['text':' Load data features from cache or dataset file','line_number':237,'multiline':False]['text':' Make sure only the first process in distributed training process the dataset, and the others will use the cache','line_number':260,'multiline':False]['text':' Convert to Tensors and build dataset','line_number':262,'multiline':False]['text':' Prepare optimizer and schedule (linear warmup and decay)','line_number':293,'multiline':False]['text':' multi-gpu training (should be after apex fp16 initialization)','line_number':313,'multiline':False]['text':' Distributed training (should be after apex fp16 initialization)','line_number':317,'multiline':False]['text':' Train!','line_number':323,'multiline':False]['text':' Added here for reproductibility','line_number':341,'multiline':False]['text':' 'token_type_ids':  None if args.model_type == 'xlm' else batch[2],','line_number':350,'multiline':False]['text':' if args.model_type in ['xlnet', 'xlm']:','line_number':354,'multiline':False]['text':'     inputs.update({'cls_index': batch[5],','line_number':355,'multiline':False]['text':'                    'p_mask':       batch[6]})','line_number':356,'multiline':False]['text':' model outputs are always tuple in transformers (see doc)','line_number':358,'multiline':False]['text':' mean() to average on multi-gpu parallel (not distributed) training','line_number':361,'multiline':False]['text':' Update learning rate schedule','line_number':376,'multiline':False]['text':' Log metrics','line_number':381,'multiline':False]['text':' Only evaluate when single GPU otherwise metrics may not average well','line_number':384,'multiline':False]['text':' Save model checkpoint','line_number':393,'multiline':False]['text':' Take care of distributed/parallel training','line_number':397,'multiline':False]['text':' Note that DistributedSampler samples randomly','line_number':423,'multiline':False]['text':' Eval!','line_number':427,'multiline':False]['text':' 'token_type_ids': None if args.model_type == 'xlm' else batch[2]  # XLM don't use segment_ids','line_number':442,'multiline':False]['text':' if args.model_type in ['xlnet', 'xlm']:','line_number':447,'multiline':False]['text':'     inputs.update({'cls_index': batch[4],','line_number':448,'multiline':False]['text':'                    'p_mask':    batch[5]})','line_number':449,'multiline':False]['text':' Required parameters','line_number':479,'multiline':False]['text':' Other parameters','line_number':505,'multiline':False]['text':' Setup distant debugging if needed','line_number':602,'multiline':False]['text':' Distant debugging - see https://code.visualstudio.com/docs/python/debugging#_attach-to-a-local-script','line_number':604,'multiline':False]['text':' Setup CUDA, GPU & distributed training','line_number':611,'multiline':False]['text':' Initializes the distributed backend which will take care of sychronizing nodes/GPUs','line_number':615,'multiline':False]['text':' Setup logging','line_number':622,'multiline':False]['text':' Set the verbosity to info of the Transformers logger (on main process only):','line_number':636,'multiline':False]['text':' Set seed','line_number':642,'multiline':False]['text':' Load pretrained model and tokenizer','line_number':645,'multiline':False]['text':' Make sure only the first process in distributed training will download model & vocab','line_number':647,'multiline':False]['text':' Make sure only the first process in distributed training will download model & vocab','line_number':658,'multiline':False]['text':' Training','line_number':664,'multiline':False]['text':' Save the trained model and the tokenizer','line_number':670,'multiline':False]['text':' Save a trained model, configuration and tokenizer using `save_pretrained()`.','line_number':673,'multiline':False]['text':' They can then be reloaded using `from_pretrained()`','line_number':674,'multiline':False]['text':' Take care of distributed/parallel training','line_number':677,'multiline':False]['text':' Good practice: save your training arguments together with the trained model','line_number':681,'multiline':False]['text':' Load a trained model and vocabulary that you have fine-tuned','line_number':684,'multiline':False]['text':' Evaluation - we can ask to evaluate all the checkpoints (sub-directories) in a directory','line_number':689,'multiline':False]['text':' if do_train is False and do_eval is true, load model directly from pretrained.','line_number':695,'multiline':False]['text':' Reload the model','line_number':706,'multiline':False]['text':' Evaluate','line_number':712,'multiline':False]