['text':'!/usr/bin/env python','line_number':1,'multiline':False]['text':' HF Trainer benchmarking tool','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' This tool can be used to run and compare multiple dimensions of the HF Trainers args.','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':' It then prints a report once in github format with all the information that needs to be shared','line_number':7,'multiline':False]['text':' with others and second time in a console-friendly format, so it's easier to use for tuning things up.','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' The main idea is:','line_number':10,'multiline':False]['text':'','line_number':11,'multiline':False]['text':'     ./trainer-benchmark.py --base-cmd '<cmd args that don't change>' \','line_number':12,'multiline':False]['text':'     --variations '--tf32 0|--tf32 1' '--fp16 0|--fp16 1|--bf16 1' \','line_number':13,'multiline':False]['text':'     --target-metric-key train_samples_per_second','line_number':14,'multiline':False]['text':'','line_number':15,'multiline':False]['text':' The variations can be any command line argument that you want to compare and not just dtype as in','line_number':16,'multiline':False]['text':' the example.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' --variations allows you to compare variations in multiple dimensions.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' as the first dimention has 2 options and the second 3 in our example, this will run the trainer 6','line_number':21,'multiline':False]['text':' times adding one of:','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':'    1. --tf32 0 --fp16 0','line_number':24,'multiline':False]['text':'    2. --tf32 0 --fp16 1','line_number':25,'multiline':False]['text':'    3. --tf32 0 --bf16 1','line_number':26,'multiline':False]['text':'    4. --tf32 1 --fp16 0','line_number':27,'multiline':False]['text':'    5. --tf32 1 --fp16 1','line_number':28,'multiline':False]['text':'    6. --tf32 1 --bf16 1','line_number':29,'multiline':False]['text':'','line_number':30,'multiline':False]['text':' and print the results. This is just a cartesian product - and more than 2 dimensions can be used.','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' If you want to rely on defaults, this:','line_number':33,'multiline':False]['text':'    --variations '--tf32 0|--tf32 1' '--fp16 0|--fp16 1|--bf16 1'','line_number':34,'multiline':False]['text':' is identical to this:','line_number':35,'multiline':False]['text':'    --variations '--tf32 0|--tf32 1' '|--fp16|--bf16'','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':' the leading empty variation in the 2nd dimension is a valid variation.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' So here we get the following 6 variations:','line_number':40,'multiline':False]['text':'','line_number':41,'multiline':False]['text':'    1. --tf32 0','line_number':42,'multiline':False]['text':'    2. --tf32 0 --fp16','line_number':43,'multiline':False]['text':'    3. --tf32 0 --bf16','line_number':44,'multiline':False]['text':'    4. --tf32 1','line_number':45,'multiline':False]['text':'    5. --tf32 1 --fp16','line_number':46,'multiline':False]['text':'    6. --tf32 1 --bf16','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' In this particular case we don't know what the default tf32 setting is as it's normally','line_number':49,'multiline':False]['text':' pytorch-version dependent). That's why it's best to do an explicit setting of each variation:','line_number':50,'multiline':False]['text':'    `--tf32 0|--tf32 1`','line_number':51,'multiline':False]['text':'','line_number':52,'multiline':False]['text':' Here is a full example of a train:','line_number':53,'multiline':False]['text':'','line_number':54,'multiline':False]['text':' CUDA_VISIBLE_DEVICES=0 python ./scripts/benchmark/trainer-benchmark.py \','line_number':55,'multiline':False]['text':' --base-cmd \','line_number':56,'multiline':False]['text':' ' examples/pytorch/translation/run_translation.py --model_name_or_path t5-small \','line_number':57,'multiline':False]['text':' --output_dir output_dir --do_train --label_smoothing 0.1 --logging_strategy no \','line_number':58,'multiline':False]['text':' --save_strategy no --per_device_train_batch_size 32 --max_source_length 512 \','line_number':59,'multiline':False]['text':' --max_target_length 512 --num_train_epochs 1 --overwrite_output_dir \','line_number':60,'multiline':False]['text':' --source_lang en --target_lang ro --dataset_name wmt16 --dataset_config "ro-en" \','line_number':61,'multiline':False]['text':' --source_prefix "translate English to Romanian: " --warmup_steps 50 \','line_number':62,'multiline':False]['text':' --max_train_samples 20000 --dataloader_num_workers 2 ' \','line_number':63,'multiline':False]['text':' --target-metric-key train_samples_per_second --repeat-times 1 --variations \','line_number':64,'multiline':False]['text':' '|--fp16|--bf16' '--tf32 0|--tf32 1' --report-metric-keys train_loss \','line_number':65,'multiline':False]['text':' --repeat-times 1 --base-variation '--tf32 0'','line_number':66,'multiline':False]['text':'','line_number':67,'multiline':False]['text':' and here is a possible output:','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' | Variation       |     Train |   Diff |   Train |','line_number':71,'multiline':False]['text':' |                 |   samples |      % |    loss |','line_number':72,'multiline':False]['text':' |                 |       per |        |         |','line_number':73,'multiline':False]['text':' |                 |    second |        |         |','line_number':74,'multiline':False]['text':' |:----------------|----------:|-------:|--------:|','line_number':75,'multiline':False]['text':' | --tf32 0        |    285.11 |      0 |    2.51 |','line_number':76,'multiline':False]['text':' | --tf32 1        |    342.09 |     20 |    2.51 |','line_number':77,'multiline':False]['text':' | --fp16 --tf32 0 |    423.49 |     49 |    2.51 |','line_number':78,'multiline':False]['text':' | --fp16 --tf32 1 |    423.13 |     48 |    2.51 |','line_number':79,'multiline':False]['text':' | --bf16 --tf32 0 |    416.80 |     46 |    2.52 |','line_number':80,'multiline':False]['text':' | --bf16 --tf32 1 |    415.87 |     46 |    2.52 |','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':'','line_number':83,'multiline':False]['text':' So you can quickly compare the different outcomes.','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' Typically running each experiment once is enough, but if the environment is unstable you can','line_number':86,'multiline':False]['text':' re-run each multiple times, e.g., 3 using --repeat-times 3 and it will report the averaged results.','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':' By default it'll use the lowest result as the base line to use as 100% and then compare the rest to','line_number':89,'multiline':False]['text':' it as can be seen from the table above, but you can also specify which combination is the one to use as','line_number':90,'multiline':False]['text':' the baseline, e.g., to change to another entry use: --base-variation '--tf32 1 --fp16 0'','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' --target-metric-key is there to tell the program which metrics to compare - the different metric keys are','line_number':93,'multiline':False]['text':' inside output_dir/all_results.json. e.g., to measure eval performance instead of train use:','line_number':94,'multiline':False]['text':'    --target-metric-key eval_samples_per_second','line_number':95,'multiline':False]['text':' but of course you will need to adjust the --base-cmd value in the example to perform evaluation as','line_number':96,'multiline':False]['text':' well (as currently it doesn't)','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' strip tqdm codes','line_number':141,'multiline':False]['text':' deal with critical env vars','line_number':158,'multiline':False]['text':' python executable (not always needed if the script is executable)','line_number':165,'multiline':False]['text':' now the normal args','line_number':169,'multiline':False]['text':' split up into up to MAX_WIDTH lines with shell multi-line escapes','line_number':172,'multiline':False]['text':' unwrap multi-line input','line_number':185,'multiline':False]['text':' remove --output_dir if any and set our own','line_number':188,'multiline':False]['text':' ensure we have --overwrite_output_dir','line_number':192,'multiline':False]['text':' Enable to debug everything but the run itself, to do it fast and see the progress.','line_number':201,'multiline':False]['text':' This is useful for debugging the output formatting quickly - we can remove it later once','line_number':202,'multiline':False]['text':' everybody is happy with the output','line_number':203,'multiline':False]['text':' save the streams','line_number':220,'multiline':False]['text':' filter out just the keys we want','line_number':235,'multiline':False]['text':' this may still return nan','line_number':306,'multiline':False]['text':' as a fallback, use the minimal value as the sentinel','line_number':309,'multiline':False]['text':' create diff column if possible','line_number':312,'multiline':False]['text':' re-order columns','line_number':321,'multiline':False]['text':' reorder cols','line_number':323,'multiline':False]['text':' capitalize','line_number':325,'multiline':False]['text':' make the cols as narrow as possible','line_number':328,'multiline':False]['text':' split each dimension into its --foo variations','line_number':405,'multiline':False]['text':' build a cartesian product of dimensions and convert those back into cmd-line arg strings,','line_number':407,'multiline':False]['text':' while stripping white space for inputs that were empty','line_number':408,'multiline':False]['text':' split wanted keys','line_number':412,'multiline':False]['text':' capture prints into a log file for convenience','line_number':415,'multiline':False]