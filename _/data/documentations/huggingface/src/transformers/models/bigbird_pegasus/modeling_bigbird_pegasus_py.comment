['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021 Google Research The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all BigBirdPegasus models at https://huggingface.co/models?filter=bigbird_pegasus','line_number':61,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':75,'multiline':False]['text':' Copied from transformers.models.big_bird.modeling_big_bird.BigBirdSelfAttention with BigBird->BigBirdPegasus','line_number':98,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':136,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':137,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':138,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':142,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':162,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':163,'multiline':False]['text':' key/value_states (first "if" case)','line_number':164,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':165,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':166,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':167,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':168,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':171,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in BigBirdPegasusModel forward() function)','line_number':176,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':179,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':182,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':183,'multiline':False]['text':' Mask heads if we want to','line_number':186,'multiline':False]['text':' Copied from transformers.models.big_bird.modeling_big_bird.BigBirdBlockSparseAttention with BigBird->BigBirdPegasus','line_number':203,'multiline':False]['text':' Currently this `class` can't be used in decoder.','line_number':243,'multiline':False]['text':' faster replacement of torch.einsum ("bhqk,bhkd->bhqd")','line_number':290,'multiline':False]['text':' faster replacement of torch.einsum (bhqd,bhkd->bhqk)','line_number':298,'multiline':False]['text':' BigBirdPegasus block-sparse attention as suggested in paper','line_number':326,'multiline':False]['text':' ITC:','line_number':328,'multiline':False]['text':'     global tokens: 2 x block_size','line_number':329,'multiline':False]['text':'     window tokens: 3 x block_size','line_number':330,'multiline':False]['text':'     random tokens: num_rand_tokens x block_size','line_number':331,'multiline':False]['text':' ETC:','line_number':333,'multiline':False]['text':'     global tokens: extra_globals_tokens + 2 x block_size','line_number':334,'multiline':False]['text':'     window tokens: 3 x block_size','line_number':335,'multiline':False]['text':'     random tokens: num_rand_tokens x block_size','line_number':336,'multiline':False]['text':' Note:','line_number':338,'multiline':False]['text':'     1) Currently, ETC is not supported.','line_number':339,'multiline':False]['text':'     2) Window size is fixed to 3 blocks & it can be changed only by','line_number':340,'multiline':False]['text':'     changing `block_size`.','line_number':341,'multiline':False]['text':'     3) Number of global blocks are fixed (2 blocks here) & global tokens can be','line_number':342,'multiline':False]['text':'     controlled only by `block_size`.','line_number':343,'multiline':False]['text':' attention is calculated separately for q[0], q[1], q[2:-2], q[-2], q[-1] in order to use special trick of shifting tokens (for calculating sliding attention)','line_number':345,'multiline':False]['text':' hence following code can be divided into 5 parts.','line_number':346,'multiline':False]['text':' generate random attention and corresponding masks','line_number':355,'multiline':False]['text':' old plans used in paper','line_number':357,'multiline':False]['text':' preparing block for randn attn','line_number':393,'multiline':False]['text':' [bsz, n_heads, to_seq_len//to_block_size-2, n_rand_blocks, to_block_size, -1]','line_number':397,'multiline':False]['text':' [bsz, n_heads, to_seq_len//to_block_size-2, n_rand_blocks, to_block_size, -1]','line_number':401,'multiline':False]['text':' 1st PART','line_number':403,'multiline':False]['text':' 1st block (global block) attention scores','line_number':404,'multiline':False]['text':' q[0] x (k[0], k[1], k[2], k[3], k[4] .... )','line_number':405,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, to_seq_len]','line_number':407,'multiline':False]['text':' [bsz, n_heads, from_block_size, to_seq_len]','line_number':414,'multiline':False]['text':' [bsz, n_heads, from_block_size, to_seq_len] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':416,'multiline':False]['text':' 2nd PART','line_number':420,'multiline':False]['text':' 2nd block attention scores','line_number':421,'multiline':False]['text':' q[1] x (sliding_keys, random_keys, global_keys)','line_number':422,'multiline':False]['text':' sliding key blocks -> 2nd, 3rd blocks','line_number':423,'multiline':False]['text':' global key blocks -> 1st block','line_number':424,'multiline':False]['text':' [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1]','line_number':435,'multiline':False]['text':' [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1]','line_number':445,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':447,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':468,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':470,'multiline':False]['text':' 3rd PART','line_number':475,'multiline':False]['text':' Middle blocks attention scores','line_number':476,'multiline':False]['text':' q[-2:2] x (sliding_keys, random_keys, global_keys)','line_number':477,'multiline':False]['text':' sliding attn is calculated using special trick of shifting tokens as discussed in paper','line_number':478,'multiline':False]['text':' random keys are generated by taking random indices as per `rand_attn`','line_number':479,'multiline':False]['text':' global keys -> 1st & last block','line_number':480,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':484,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':488,'multiline':False]['text':' sliding attention scores for q[-2:2]','line_number':491,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [b, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':492,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, 3*to_block_size]','line_number':494,'multiline':False]['text':' randn attention scores for q[-2:2]','line_number':497,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [bsz, n_heads, from_seq_len//from_block_size-4, n_rand_blocks*to_block_size, -1]','line_number':498,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, n_rand_blocks*to_block_size]','line_number':500,'multiline':False]['text':' Including 1st block (since it's global)','line_number':503,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size]','line_number':506,'multiline':False]['text':' Including last block (since it's global)','line_number':509,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size]','line_number':512,'multiline':False]['text':' masking padded tokens','line_number':515,'multiline':False]['text':' completing attention scores matrix for all q[-2:2]','line_number':521,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, (5+n_rand_blocks)*to_block_size]','line_number':524,'multiline':False]['text':' safely doing softmax since attention matrix is completed','line_number':526,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, (5+n_rand_blocks)*to_block_size]','line_number':529,'multiline':False]['text':' contribution of sliding keys','line_number':531,'multiline':False]['text':' [bsz, n_heads, m//from_block_size-4, from_block_size, 3*to_block_size] x [bsz, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':532,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':536,'multiline':False]['text':' adding contribution of random keys','line_number':538,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, n_rand_blocks*to_block_size] x [bsz, n_heads, from_seq_len//from_block_size-4, n_rand_blocks*to_block_size, -1]','line_number':539,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':543,'multiline':False]['text':' adding contribution of global keys','line_number':545,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':548,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':551,'multiline':False]['text':' 4th PART','line_number':553,'multiline':False]['text':' last 2nd token attention scores','line_number':554,'multiline':False]['text':' q[-2] x (sliding_keys, random_keys, global_keys)','line_number':555,'multiline':False]['text':' sliding key blocks -> last 3 blocks','line_number':556,'multiline':False]['text':' global key block -> 1st block','line_number':557,'multiline':False]['text':' random key block -> based on indices stored in `randn_attn`','line_number':558,'multiline':False]['text':' [bsz, n_heads, (4+n_random_blocks)*to_block_size, -1]','line_number':569,'multiline':False]['text':' [bsz, n_heads, (4+r)*to_block_size, -1]','line_number':579,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':581,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':602,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':604,'multiline':False]['text':' 5th PART','line_number':608,'multiline':False]['text':' last block (global) attention scores','line_number':609,'multiline':False]['text':' q[-1] x (k[0], k[1], k[2], k[3], .... )','line_number':610,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, to_seq_len]','line_number':612,'multiline':False]['text':' [bsz, n_heads, from_block_size, n]','line_number':616,'multiline':False]['text':' [bsz, n_heads, from_block_size, to_seq_len] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':618,'multiline':False]['text':' combining representations of all tokens','line_number':622,'multiline':False]['text':' this is just for visualizing; forward pass doesn't depend on following code','line_number':630,'multiline':False]['text':' TODO(PVP): need to verify if below code is correct','line_number':632,'multiline':False]['text':' 1st query block','line_number':637,'multiline':False]['text':' corresponding to `first_context_layer`','line_number':638,'multiline':False]['text':' all keys global','line_number':639,'multiline':False]['text':' 2nd query block','line_number':641,'multiline':False]['text':' corresponding to `second_context_layer`','line_number':642,'multiline':False]['text':' 1st three key blocks (global + sliding)','line_number':645,'multiline':False]['text':' last key block (global)','line_number':648,'multiline':False]['text':' random keys','line_number':649,'multiline':False]['text':' p1, i1, w1 corresponds to batch_dim i.e. following operation is done for each sequence in batch','line_number':651,'multiline':False]['text':' p2, i2, w2 corresponds to head_dim i.e. following operation is done for each heads','line_number':653,'multiline':False]['text':' Middle query blocks','line_number':667,'multiline':False]['text':' corresponding to `context_layer`','line_number':668,'multiline':False]['text':' sliding keys','line_number':669,'multiline':False]['text':' inner_band_product','line_number':682,'multiline':False]['text':' global keys (corresponding to 1st key block)','line_number':683,'multiline':False]['text':' first_band_product','line_number':686,'multiline':False]['text':' global keys (corresponding to last key block)','line_number':687,'multiline':False]['text':' last_band_product','line_number':690,'multiline':False]['text':' random keys','line_number':691,'multiline':False]['text':' p1, i1, w1 corresponds to batch_dim i.e. following operation is done for each sequence in batch','line_number':693,'multiline':False]['text':' p2, i2, w2 corresponds to head_dim i.e. following operation is done for each heads','line_number':695,'multiline':False]['text':' Second-last query block','line_number':710,'multiline':False]['text':' corresponding to `second_last_context_layer`','line_number':711,'multiline':False]['text':' 1st key block (global)','line_number':714,'multiline':False]['text':' last three blocks (global + sliding)','line_number':719,'multiline':False]['text':' random keys','line_number':720,'multiline':False]['text':' p1, i1, w1 corresponds to batch_dim i.e. following operation is done for each sequence in batch','line_number':722,'multiline':False]['text':' p2, i2, w2 corresponds to head_dim i.e. following operation is done for each heads','line_number':724,'multiline':False]['text':' last query block','line_number':738,'multiline':False]['text':' corresponding to `last_context_layer`','line_number':739,'multiline':False]['text':' all keys global','line_number':740,'multiline':False]['text':' this operation is equivalent to tf.gather when batch_dims=2','line_number':749,'multiline':False]['text':' using this method when from_seq_length in [1024, 3072, 4096]','line_number':858,'multiline':False]['text':' During inference (eval) no randomness','line_number':864,'multiline':False]['text':' shorthand','line_number':872,'multiline':False]['text':' Missing -3: should have been sliced till last-3','line_number':882,'multiline':False]['text':' Missing -4: should have been sliced till last-4','line_number':885,'multiline':False]['text':' using this method when from_seq_length not in [1024, 3072, 4096]','line_number':936,'multiline':False]['text':' Total number of blocks in the mmask','line_number':944,'multiline':False]['text':' Number of blocks per plan','line_number':946,'multiline':False]['text':' till when to follow plan','line_number':948,'multiline':False]['text':' Random Attention adjacency list','line_number':951,'multiline':False]['text':' During inference (eval) no randomness','line_number':956,'multiline':False]['text':' We will go iteratively over the plan blocks and pick random number of','line_number':962,'multiline':False]['text':' Attention blocks from the legally allowed blocks','line_number':963,'multiline':False]['text':' set the row for all from_blocks starting from 0 to','line_number':967,'multiline':False]['text':' plan_block_length[plan_idx-1]','line_number':968,'multiline':False]['text':' column indx start fromm plan_block_length[plan_idx-1] and ends at','line_number':969,'multiline':False]['text':' plan_block_length[plan_idx]','line_number':970,'multiline':False]['text':' list of to_blocks from which to choose random attention','line_number':1064,'multiline':False]['text':' permute the blocks','line_number':1066,'multiline':False]['text':' illegal blocks for the current block id, using window','line_number':1069,'multiline':False]['text':' Add blocks at the start and at the end','line_number':1072,'multiline':False]['text':' The second from_block cannot choose random attention on second last to_block','line_number':1076,'multiline':False]['text':' The second last from_block cannot choose random attention on second to_block','line_number':1080,'multiline':False]['text':' attention type is already correctly set','line_number':1118,'multiline':False]['text':' copy all weights to new full attention class','line_number':1124,'multiline':False]['text':' copy all weights to new sparse attention class','line_number':1127,'multiline':False]['text':' Expand dims to enable multiplication in the self-attention module','line_number':1152,'multiline':False]['text':' add attentions if we output them','line_number':1169,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with BartConfig->BigBirdPegasusConfig, Bart->BigBirdPegasusDecoder','line_number':1173,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':1222,'multiline':False]['text':' for the decoder','line_number':1223,'multiline':False]['text':' get query proj','line_number':1228,'multiline':False]['text':' get key, value proj','line_number':1230,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':1231,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':1232,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':1233,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':1239,'multiline':False]['text':' cross_attentions','line_number':1243,'multiline':False]['text':' reuse k, v, self_attention','line_number':1247,'multiline':False]['text':' self_attention','line_number':1253,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':1258,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':1259,'multiline':False]['text':' key/value_states (first "if" case)','line_number':1260,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':1261,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':1262,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':1263,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':1264,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':1301,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':1302,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':1303,'multiline':False]['text':' twice and have to be reused in the following','line_number':1304,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':1323,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':1324,'multiline':False]['text':' attention type is already correctly set','line_number':1412,'multiline':False]['text':' Copied from transformers.models.mbart.modeling_mbart.MBartDecoderLayer.forward','line_number':1447,'multiline':False]['text':' Self Attention','line_number':1481,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1482,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':1484,'multiline':False]['text':' Cross-Attention Block','line_number':1495,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':1502,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':1515,'multiline':False]['text':' Fully Connected','line_number':1518,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartClassificationHead with Bart->BigBirdPegasus','line_number':1538,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1771,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1821,'multiline':False]['text':' in order to use block_sparse attention, sequence_length has to be at least','line_number':1845,'multiline':False]['text':' bigger than all global attentions: 2 * block_size','line_number':1846,'multiline':False]['text':' + sliding tokens: 3 * block_size','line_number':1847,'multiline':False]['text':' + random tokens: 2 * num_random_blocks * block_size','line_number':1848,'multiline':False]['text':' change attention_type from block_sparse to original_full','line_number':1851,'multiline':False]['text':' expand attention_mask','line_number':1871,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1873,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':1889,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1900,'multiline':False]['text':' skip the layer','line_number':1904,'multiline':False]['text':' unpad `sequence_output` because the calling function is expecting a length == input_ids.size(1)','line_number':1947,'multiline':False]['text':' attention type is already correctly set','line_number':1964,'multiline':False]['text':' Copied from transformers.models.big_bird.modeling_big_bird.BigBirdModel.create_masks_for_block_sparse_attn','line_number':1971,'multiline':False]['text':' padding','line_number':2011,'multiline':False]['text':' no attention on the padding tokens','line_number':2029,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2064,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':2160,'multiline':False]['text':' past_key_values_length','line_number':2171,'multiline':False]['text':' expand encoder attention mask','line_number':2181,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2183,'multiline':False]['text':' embed positions','line_number':2188,'multiline':False]['text':' decoder layers','line_number':2203,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':2209,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':2218,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':2268,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2304,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartModel.forward with Bart->BigBirdPegasus','line_number':2333,'multiline':False]['text':' different to other models, BigBirdPegasus automatically creates decoder_input_ids from','line_number':2352,'multiline':False]['text':' input_ids if no decoder_input_ids are provided','line_number':2353,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':2383,'multiline':False]['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':2391,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForConditionalGeneration with Bart->BigBirdPegasus, BART->BIGBIRD_PEGASUS','line_number':2426,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2438,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':2564,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':2568,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':2572,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':2578,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':2587,'multiline':False]['text':' cached cross_attention states don't have to be reordered -> they are always the same','line_number':2597,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2625,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForSequenceClassification.forward','line_number':2634,'multiline':False]['text':' last hidden state','line_number':2683,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2753,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForQuestionAnswering.forward','line_number':2762,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':2822,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':2827,'multiline':False]['text':' Copied from transformers.models.pegasus.modeling_pegasus.PegasusDecoderWrapper with Pegasus->BigBirdPegasus','line_number':2858,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2885,'multiline':False]['text':' decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)','line_number':3013,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':3052,'multiline':False]['text':' first step, decoder_cached_states are empty','line_number':3058,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':3060,'multiline':False]