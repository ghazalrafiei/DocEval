['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021 Google Research and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all BigBird models at https://huggingface.co/models?filter=big_bird','line_number':61,'multiline':False]['text':' remove last :0 in variable','line_number':115,'multiline':False]['text':' Load weights from TF model','line_number':144,'multiline':False]['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':160,'multiline':False]['text':' which are not required for using pretrained model','line_number':161,'multiline':False]['text':' print(txt_name, array.shape)','line_number':214,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings.__init__','line_number':247,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':254,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':255,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':258,'multiline':False]['text':' End copy','line_number':266,'multiline':False]['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':284,'multiline':False]['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':285,'multiline':False]['text':' issue #5664','line_number':286,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':350,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':351,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':352,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':356,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':376,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':377,'multiline':False]['text':' key/value_states (first "if" case)','line_number':378,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':379,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':380,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':381,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':382,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':385,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in BigBirdModel forward() function)','line_number':390,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':393,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':396,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':397,'multiline':False]['text':' Mask heads if we want to','line_number':400,'multiline':False]['text':' Currently this `class` can't be used in decoder.','line_number':456,'multiline':False]['text':' faster replacement of torch.einsum ("bhqk,bhkd->bhqd")','line_number':503,'multiline':False]['text':' faster replacement of torch.einsum (bhqd,bhkd->bhqk)','line_number':511,'multiline':False]['text':' BigBird block-sparse attention as suggested in paper','line_number':539,'multiline':False]['text':' ITC:','line_number':541,'multiline':False]['text':'     global tokens: 2 x block_size','line_number':542,'multiline':False]['text':'     window tokens: 3 x block_size','line_number':543,'multiline':False]['text':'     random tokens: num_rand_tokens x block_size','line_number':544,'multiline':False]['text':' ETC:','line_number':546,'multiline':False]['text':'     global tokens: extra_globals_tokens + 2 x block_size','line_number':547,'multiline':False]['text':'     window tokens: 3 x block_size','line_number':548,'multiline':False]['text':'     random tokens: num_rand_tokens x block_size','line_number':549,'multiline':False]['text':' Note:','line_number':551,'multiline':False]['text':'     1) Currently, ETC is not supported.','line_number':552,'multiline':False]['text':'     2) Window size is fixed to 3 blocks & it can be changed only by','line_number':553,'multiline':False]['text':'     changing `block_size`.','line_number':554,'multiline':False]['text':'     3) Number of global blocks are fixed (2 blocks here) & global tokens can be','line_number':555,'multiline':False]['text':'     controlled only by `block_size`.','line_number':556,'multiline':False]['text':' attention is calculated separately for q[0], q[1], q[2:-2], q[-2], q[-1] in order to use special trick of shifting tokens (for calculating sliding attention)','line_number':558,'multiline':False]['text':' hence following code can be divided into 5 parts.','line_number':559,'multiline':False]['text':' generate random attention and corresponding masks','line_number':568,'multiline':False]['text':' old plans used in paper','line_number':570,'multiline':False]['text':' preparing block for randn attn','line_number':606,'multiline':False]['text':' [bsz, n_heads, to_seq_len//to_block_size-2, n_rand_blocks, to_block_size, -1]','line_number':610,'multiline':False]['text':' [bsz, n_heads, to_seq_len//to_block_size-2, n_rand_blocks, to_block_size, -1]','line_number':614,'multiline':False]['text':' 1st PART','line_number':616,'multiline':False]['text':' 1st block (global block) attention scores','line_number':617,'multiline':False]['text':' q[0] x (k[0], k[1], k[2], k[3], k[4] .... )','line_number':618,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, to_seq_len]','line_number':620,'multiline':False]['text':' [bsz, n_heads, from_block_size, to_seq_len]','line_number':627,'multiline':False]['text':' [bsz, n_heads, from_block_size, to_seq_len] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':629,'multiline':False]['text':' 2nd PART','line_number':633,'multiline':False]['text':' 2nd block attention scores','line_number':634,'multiline':False]['text':' q[1] x (sliding_keys, random_keys, global_keys)','line_number':635,'multiline':False]['text':' sliding key blocks -> 2nd, 3rd blocks','line_number':636,'multiline':False]['text':' global key blocks -> 1st block','line_number':637,'multiline':False]['text':' [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1]','line_number':648,'multiline':False]['text':' [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1]','line_number':658,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':660,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':681,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':683,'multiline':False]['text':' 3rd PART','line_number':688,'multiline':False]['text':' Middle blocks attention scores','line_number':689,'multiline':False]['text':' q[-2:2] x (sliding_keys, random_keys, global_keys)','line_number':690,'multiline':False]['text':' sliding attn is calculated using special trick of shifting tokens as discussed in paper','line_number':691,'multiline':False]['text':' random keys are generated by taking random indices as per `rand_attn`','line_number':692,'multiline':False]['text':' global keys -> 1st & last block','line_number':693,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':697,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':701,'multiline':False]['text':' sliding attention scores for q[-2:2]','line_number':704,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [b, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':705,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, 3*to_block_size]','line_number':707,'multiline':False]['text':' randn attention scores for q[-2:2]','line_number':710,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [bsz, n_heads, from_seq_len//from_block_size-4, n_rand_blocks*to_block_size, -1]','line_number':711,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, n_rand_blocks*to_block_size]','line_number':713,'multiline':False]['text':' Including 1st block (since it's global)','line_number':716,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size]','line_number':719,'multiline':False]['text':' Including last block (since it's global)','line_number':722,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size]','line_number':725,'multiline':False]['text':' masking padded tokens','line_number':728,'multiline':False]['text':' completing attention scores matrix for all q[-2:2]','line_number':734,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, (5+n_rand_blocks)*to_block_size]','line_number':737,'multiline':False]['text':' safely doing softmax since attention matrix is completed','line_number':739,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, (5+n_rand_blocks)*to_block_size]','line_number':742,'multiline':False]['text':' contribution of sliding keys','line_number':744,'multiline':False]['text':' [bsz, n_heads, m//from_block_size-4, from_block_size, 3*to_block_size] x [bsz, n_heads, from_seq_len//from_block_size-4, 3*to_block_size, -1]','line_number':745,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':749,'multiline':False]['text':' adding contribution of random keys','line_number':751,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, n_rand_blocks*to_block_size] x [bsz, n_heads, from_seq_len//from_block_size-4, n_rand_blocks*to_block_size, -1]','line_number':752,'multiline':False]['text':'     ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':756,'multiline':False]['text':' adding contribution of global keys','line_number':758,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':761,'multiline':False]['text':' [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, to_block_size] x [bsz, n_heads, to_block_size, -1] ==> [bsz, n_heads, from_seq_len//from_block_size-4, from_block_size, -1]','line_number':764,'multiline':False]['text':' 4th PART','line_number':766,'multiline':False]['text':' last 2nd token attention scores','line_number':767,'multiline':False]['text':' q[-2] x (sliding_keys, random_keys, global_keys)','line_number':768,'multiline':False]['text':' sliding key blocks -> last 3 blocks','line_number':769,'multiline':False]['text':' global key block -> 1st block','line_number':770,'multiline':False]['text':' random key block -> based on indices stored in `randn_attn`','line_number':771,'multiline':False]['text':' [bsz, n_heads, (4+n_random_blocks)*to_block_size, -1]','line_number':782,'multiline':False]['text':' [bsz, n_heads, (4+r)*to_block_size, -1]','line_number':792,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':794,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size]','line_number':815,'multiline':False]['text':' [bsz, n_heads, from_block_size, (4+n_rand_blocks)*to_block_size] x [bsz, n_heads, (4+n_rand_blocks)*to_block_size, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':817,'multiline':False]['text':' 5th PART','line_number':821,'multiline':False]['text':' last block (global) attention scores','line_number':822,'multiline':False]['text':' q[-1] x (k[0], k[1], k[2], k[3], .... )','line_number':823,'multiline':False]['text':' [bsz, n_heads, from_block_size, -1] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, to_seq_len]','line_number':825,'multiline':False]['text':' [bsz, n_heads, from_block_size, n]','line_number':829,'multiline':False]['text':' [bsz, n_heads, from_block_size, to_seq_len] x [bsz, n_heads, to_seq_len, -1] ==> [bsz, n_heads, from_block_size, -1]','line_number':831,'multiline':False]['text':' combining representations of all tokens','line_number':835,'multiline':False]['text':' this is just for visualizing; forward pass doesn't depend on following code','line_number':843,'multiline':False]['text':' TODO(PVP): need to verify if below code is correct','line_number':845,'multiline':False]['text':' 1st query block','line_number':850,'multiline':False]['text':' corresponding to `first_context_layer`','line_number':851,'multiline':False]['text':' all keys global','line_number':852,'multiline':False]['text':' 2nd query block','line_number':854,'multiline':False]['text':' corresponding to `second_context_layer`','line_number':855,'multiline':False]['text':' 1st three key blocks (global + sliding)','line_number':858,'multiline':False]['text':' last key block (global)','line_number':861,'multiline':False]['text':' random keys','line_number':862,'multiline':False]['text':' p1, i1, w1 corresponds to batch_dim i.e. following operation is done for each sequence in batch','line_number':864,'multiline':False]['text':' p2, i2, w2 corresponds to head_dim i.e. following operation is done for each heads','line_number':866,'multiline':False]['text':' Middle query blocks','line_number':880,'multiline':False]['text':' corresponding to `context_layer`','line_number':881,'multiline':False]['text':' sliding keys','line_number':882,'multiline':False]['text':' inner_band_product','line_number':895,'multiline':False]['text':' global keys (corresponding to 1st key block)','line_number':896,'multiline':False]['text':' first_band_product','line_number':899,'multiline':False]['text':' global keys (corresponding to last key block)','line_number':900,'multiline':False]['text':' last_band_product','line_number':903,'multiline':False]['text':' random keys','line_number':904,'multiline':False]['text':' p1, i1, w1 corresponds to batch_dim i.e. following operation is done for each sequence in batch','line_number':906,'multiline':False]['text':' p2, i2, w2 corresponds to head_dim i.e. following operation is done for each heads','line_number':908,'multiline':False]['text':' Second-last query block','line_number':923,'multiline':False]['text':' corresponding to `second_last_context_layer`','line_number':924,'multiline':False]['text':' 1st key block (global)','line_number':927,'multiline':False]['text':' last three blocks (global + sliding)','line_number':932,'multiline':False]['text':' random keys','line_number':933,'multiline':False]['text':' p1, i1, w1 corresponds to batch_dim i.e. following operation is done for each sequence in batch','line_number':935,'multiline':False]['text':' p2, i2, w2 corresponds to head_dim i.e. following operation is done for each heads','line_number':937,'multiline':False]['text':' last query block','line_number':951,'multiline':False]['text':' corresponding to `last_context_layer`','line_number':952,'multiline':False]['text':' all keys global','line_number':953,'multiline':False]['text':' this operation is equivalent to tf.gather when batch_dims=2','line_number':962,'multiline':False]['text':' using this method when from_seq_length in [1024, 3072, 4096]','line_number':1071,'multiline':False]['text':' During inference (eval) no randomness','line_number':1077,'multiline':False]['text':' shorthand','line_number':1085,'multiline':False]['text':' Missing -3: should have been sliced till last-3','line_number':1095,'multiline':False]['text':' Missing -4: should have been sliced till last-4','line_number':1098,'multiline':False]['text':' using this method when from_seq_length not in [1024, 3072, 4096]','line_number':1149,'multiline':False]['text':' Total number of blocks in the mmask','line_number':1157,'multiline':False]['text':' Number of blocks per plan','line_number':1159,'multiline':False]['text':' till when to follow plan','line_number':1161,'multiline':False]['text':' Random Attention adjacency list','line_number':1164,'multiline':False]['text':' During inference (eval) no randomness','line_number':1169,'multiline':False]['text':' We will go iteratively over the plan blocks and pick random number of','line_number':1175,'multiline':False]['text':' Attention blocks from the legally allowed blocks','line_number':1176,'multiline':False]['text':' set the row for all from_blocks starting from 0 to','line_number':1180,'multiline':False]['text':' plan_block_length[plan_idx-1]','line_number':1181,'multiline':False]['text':' column indx start fromm plan_block_length[plan_idx-1] and ends at','line_number':1182,'multiline':False]['text':' plan_block_length[plan_idx]','line_number':1183,'multiline':False]['text':' list of to_blocks from which to choose random attention','line_number':1277,'multiline':False]['text':' permute the blocks','line_number':1279,'multiline':False]['text':' illegal blocks for the current block id, using window','line_number':1282,'multiline':False]['text':' Add blocks at the start and at the end','line_number':1285,'multiline':False]['text':' The second from_block cannot choose random attention on second last to_block','line_number':1289,'multiline':False]['text':' The second last from_block cannot choose random attention on second to_block','line_number':1293,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->BigBird','line_number':1307,'multiline':False]['text':' attention type is already correctly set','line_number':1345,'multiline':False]['text':' copy all weights to new full attention class','line_number':1351,'multiline':False]['text':' copy all weights to new sparse attention class','line_number':1354,'multiline':False]['text':' block_sparse config','line_number':1374,'multiline':False]['text':' fp16 compatibility','line_number':1381,'multiline':False]['text':' add attentions if we output them','line_number':1406,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->BigBird','line_number':1410,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->BigBird','line_number':1426,'multiline':False]['text':' attention type is already correctly set','line_number':1463,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1486,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':1504,'multiline':False]['text':' add self attentions if we output attention weights','line_number':1509,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':1519,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':1531,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':1533,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':1543,'multiline':False]['text':' attention type is already correctly set','line_number':1571,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->BigBird','line_number':1677,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->BigBird','line_number':1695,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':1701,'multiline':False]['text':' an output-only bias for each token.','line_number':1702,'multiline':False]['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':1707,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->BigBird','line_number':1716,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyNSPHead with Bert->BigBird','line_number':1727,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainingHeads with Bert->BigBird','line_number':1738,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':1765,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':1766,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1950,'multiline':False]['text':' attention type is already correctly set','line_number':1964,'multiline':False]['text':' past_key_values_length','line_number':2035,'multiline':False]['text':' in order to use block_sparse attention, sequence_length has to be at least','line_number':2048,'multiline':False]['text':' bigger than all global attentions: 2 * block_size','line_number':2049,'multiline':False]['text':' + sliding tokens: 3 * block_size','line_number':2050,'multiline':False]['text':' + random tokens: 2 * num_random_blocks * block_size','line_number':2051,'multiline':False]['text':' change attention_type from block_sparse to original_full','line_number':2054,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':2099,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':2100,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':2107,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':2108,'multiline':False]['text':' Prepare head mask if needed','line_number':2118,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':2119,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':2120,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':2121,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':2122,'multiline':False]['text':' undo padding','line_number':2153,'multiline':False]['text':' unpad `sequence_output` because the calling function is expecting a length == input_ids.size(1)','line_number':2155,'multiline':False]['text':' padding','line_number':2218,'multiline':False]['text':' pad with position_id = pad_token_id as in modeling_bigbird.BigBirdEmbeddings','line_number':2233,'multiline':False]['text':' no attention on the padding tokens','line_number':2246,'multiline':False]['text':' pad with token_type_id = 0','line_number':2247,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2261,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2373,'multiline':False]['text':' -100 index = padding token','line_number':2469,'multiline':False]['text':'  add a dummy token','line_number':2487,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2514,'multiline':False]['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':2592,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':2614,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':2618,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':2622,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':2626,'multiline':False]['text':' take <s> token (equiv. to [CLS])','line_number':2658,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2682,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2810,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2907,'multiline':False]['text':' Initialize weights and apply final processing','line_number':3005,'multiline':False]['text':' assuming input_ids format: <cls> <question> <sep> context <sep>','line_number':3079,'multiline':False]['text':' setting lengths logits to `-inf`','line_number':3085,'multiline':False]['text':' removing question tokens from the competition','line_number':3109,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':3118,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':3123,'multiline':False]['text':' q_lengths -> (bz, 1)','line_number':3148,'multiline':False]['text':' -> (1, maxlen)','line_number':3150,'multiline':False]