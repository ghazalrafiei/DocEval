['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2019 Facebook AI Research and the HuggingFace Inc. team.','line_number':2,'multiline':False]['text':' Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' See all XLM-RoBERTa models at https://huggingface.co/models?filter=xlm-roberta','line_number':74,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings with Roberta->XLMRoberta','line_number':164,'multiline':False]['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':252,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->XLMRoberta','line_number':270,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':284,'multiline':False]['text':' to the first token.','line_number':285,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfAttention with Bert->XLMRoberta','line_number':300,'multiline':False]['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':331,'multiline':False]['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':334,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':351,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':352,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':353,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':357,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':377,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':378,'multiline':False]['text':' key/value_states (first "if" case)','line_number':379,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':380,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':381,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':382,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':383,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':386,'multiline':False]['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':387,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in TFXLMRobertaModel call() function)','line_number':393,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':396,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':399,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':400,'multiline':False]['text':' Mask heads if we want to','line_number':403,'multiline':False]['text':' (batch_size, seq_len_q, all_head_size)','line_number':410,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfOutput with Bert->XLMRoberta','line_number':433,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertAttention with Bert->XLMRoberta','line_number':464,'multiline':False]['text':' add attentions (possibly with past_key_value) if we output them','line_number':499,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertIntermediate with Bert->XLMRoberta','line_number':516,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertOutput with Bert->XLMRoberta','line_number':546,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLayer with Bert->XLMRoberta','line_number':577,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':603,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':617,'multiline':False]['text':' add self attentions if we output attention weights','line_number':622,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':632,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':645,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':647,'multiline':False]['text':' add attentions if we output them','line_number':655,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':657,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertEncoder with Bert->XLMRoberta','line_number':681,'multiline':False]['text':' Add last layer','line_number':733,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaMainLayer with Roberta->XLMRoberta','line_number':761,'multiline':False]['text':' The embeddings must be the last declaration in order to follow the weights order','line_number':778,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.get_input_embeddings','line_number':781,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.set_input_embeddings','line_number':785,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer._prune_heads','line_number':790,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMainLayer.call','line_number':799,'multiline':False]['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':852,'multiline':False]['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':853,'multiline':False]['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':854,'multiline':False]['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':855,'multiline':False]['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':856,'multiline':False]['text':' Copied from `modeling_tf_t5.py`','line_number':860,'multiline':False]['text':' Provided a padding mask of dimensions [batch_size, mask_seq_length]','line_number':861,'multiline':False]['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':862,'multiline':False]['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':863,'multiline':False]['text':' attention_mask needs to be sliced to the shape `[batch_size, 1, from_seq_length - cached_seq_length, to_seq_length]','line_number':877,'multiline':False]['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':884,'multiline':False]['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':885,'multiline':False]['text':' positions we want to attend and -10000.0 for masked positions.','line_number':886,'multiline':False]['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':887,'multiline':False]['text':' effectively the same as removing these entirely.','line_number':888,'multiline':False]['text':' Copied from `modeling_tf_t5.py` with -1e9 -> -10000','line_number':894,'multiline':False]['text':' If a 2D ou 3D attention mask is provided for the cross-attention','line_number':896,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':897,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':898,'multiline':False]['text':' T5 has a mask that can compare sequence ids, we can simulate this here with this transposition','line_number':906,'multiline':False]['text':' Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270','line_number':907,'multiline':False]['text':' encoder_extended_attention_mask = tf.math.equal(encoder_extended_attention_mask,','line_number':908,'multiline':False]['text':'                                         tf.transpose(encoder_extended_attention_mask, perm=(-1, -2)))','line_number':909,'multiline':False]['text':' Prepare head mask if needed','line_number':915,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':916,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':917,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':918,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':919,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaPreTrainedModel with Roberta->XLMRoberta','line_number':972,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaModel with Roberta->XLMRoberta, ROBERTA->XLM_ROBERTA','line_number':987,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaLMHead with Roberta->XLMRoberta','line_number':1065,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':1080,'multiline':False]['text':' an output-only bias for each token.','line_number':1081,'multiline':False]['text':' project back to size of vocabulary with bias','line_number':1116,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM with Roberta->XLMRoberta, ROBERTA->XLM_ROBERTA','line_number':1127,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1129,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForCausalLM with Roberta->XLMRoberta, ROBERTA->XLM_ROBERTA','line_number':1220,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1222,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.prepare_inputs_for_generation','line_number':1241,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1244,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':1248,'multiline':False]['text':' shift labels to the left and cut last logit token','line_number':1324,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaClassificationHead with Roberta->XLMRoberta','line_number':1354,'multiline':False]['text':' take <s> token (equiv. to [CLS])','line_number':1376,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForSequenceClassification with Roberta->XLMRoberta, ROBERTA->XLM_ROBERTA','line_number':1402,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1404,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForMultipleChoice with Roberta->XLMRoberta, ROBERTA->XLM_ROBERTA','line_number':1490,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1492,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForTokenClassification with Roberta->XLMRoberta, ROBERTA->XLM_ROBERTA','line_number':1595,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1597,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForQuestionAnswering with Roberta->XLMRoberta, ROBERTA->XLM_ROBERTA','line_number':1691,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1693,'multiline':False]