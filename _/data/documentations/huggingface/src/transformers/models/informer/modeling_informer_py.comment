['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2023 Amazon and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all Informer models at https://huggingface.co/models?filter=informer','line_number':45,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesFeatureEmbedder with TimeSeries->Informer','line_number':49,'multiline':False]['text':' we slice the last dimension, giving an array of length','line_number':69,'multiline':False]['text':' self.num_features with shape (N,T) or (N)','line_number':70,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesStdScaler with TimeSeriesTransformer->Informer,TimeSeries->Informer','line_number':84,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesMeanScaler with TimeSeriesTransformer->Informer,TimeSeries->Informer','line_number':120,'multiline':False]['text':' If `default_scale` is provided, we use it, otherwise we use the scale','line_number':153,'multiline':False]['text':' of the batch.','line_number':154,'multiline':False]['text':' apply default scale where there are no observations','line_number':162,'multiline':False]['text':' ensure the scale is at least `self.minimum_scale`','line_number':165,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesNOPScaler with TimeSeriesTransformer->Informer,TimeSeries->Informer','line_number':175,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.weighted_average','line_number':203,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.nll','line_number':228,'multiline':False]['text':' Copied from transformers.models.marian.modeling_marian.MarianSinusoidalPositionalEmbedding with Marian->Informer','line_number':236,'multiline':False]['text':' set early to avoid an error in pytorch-1.8+','line_number':254,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesValueEmbedding with TimeSeries->Info','line_number':271,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->Informer','line_number':281,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':330,'multiline':False]['text':' for the decoder','line_number':331,'multiline':False]['text':' get query proj','line_number':336,'multiline':False]['text':' get key, value proj','line_number':338,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':339,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':340,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':341,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':347,'multiline':False]['text':' cross_attentions','line_number':351,'multiline':False]['text':' reuse k, v, self_attention','line_number':355,'multiline':False]['text':' self_attention','line_number':361,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':366,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':367,'multiline':False]['text':' key/value_states (first "if" case)','line_number':368,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':369,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':370,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':371,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':372,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':409,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':410,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':411,'multiline':False]['text':' twice and have to be reused in the following','line_number':412,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':431,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':432,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':488,'multiline':False]['text':' for the decoder','line_number':489,'multiline':False]['text':' get query proj','line_number':494,'multiline':False]['text':' get key, value proj','line_number':496,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':497,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':498,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':499,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':505,'multiline':False]['text':' cross_attentions','line_number':509,'multiline':False]['text':' reuse k, v, self_attention','line_number':513,'multiline':False]['text':' self_attention','line_number':519,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':524,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':525,'multiline':False]['text':' key/value_states (first "if" case)','line_number':526,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':527,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':528,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':529,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':530,'multiline':False]['text':' L_K','line_number':538,'multiline':False]['text':' log_L_K','line_number':539,'multiline':False]['text':' L_Q','line_number':541,'multiline':False]['text':' log_L_Q','line_number':542,'multiline':False]['text':' Q_K_sampled','line_number':553,'multiline':False]['text':' find the Top_k query with sparsity measurement','line_number':555,'multiline':False]['text':' M','line_number':559,'multiline':False]['text':' M_top','line_number':560,'multiline':False]['text':' calculate q_reduce: query_states[:, top_u_sparsity_measurement]','line_number':562,'multiline':False]['text':' Use q_reduce to calculate attention weights','line_number':569,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':609,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':610,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':611,'multiline':False]['text':' twice and have to be reused in the following','line_number':612,'multiline':False]['text':' calculate context for updating the attn_output, based on:','line_number':621,'multiline':False]['text':' https://github.com/zhouhaoyi/Informer2020/blob/ac59c7447135473fb2aafeafe94395f884d5c7a5/models/attn.py#L74','line_number':622,'multiline':False]['text':' cast to float32 before operation to avoid overflow','line_number':624,'multiline':False]['text':' update context: copy the attention output to the context at top_u_sparsity_measurement index','line_number':635,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':649,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':650,'multiline':False]['text':' source: https://github.com/zhouhaoyi/Informer2020/blob/main/models/encoder.py','line_number':658,'multiline':False]['text':' Self Attention','line_number':826,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':827,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':829,'multiline':False]['text':' Cross-Attention Block','line_number':841,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':847,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':861,'multiline':False]['text':' Fully Connected','line_number':864,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1106,'multiline':False]['text':' expand attention_mask','line_number':1158,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1160,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':1166,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1177,'multiline':False]['text':' skip the layer','line_number':1181,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesTransformerDecoder with TimeSeriesTransformer->Informer,TimeSeriesTransformerConfig->InformerConfig,time-series-transformer->informer,Transformer->Informer,TimeSeries->Informer','line_number':1224,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1249,'multiline':False]['text':' past_key_values_length','line_number':1332,'multiline':False]['text':' expand encoder attention mask','line_number':1339,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1341,'multiline':False]['text':' decoder layers','line_number':1358,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1364,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1374,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':1422,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesTransformerModel with TimeSeriesTransformer->Informer,TIME_SERIES_TRANSFORMER->INFORMER,time-series-transformer->informer,TimeSeries->Informer','line_number':1446,'multiline':False]['text':' transformer encoder-decoder and mask initializer','line_number':1464,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1468,'multiline':False]['text':' time feature','line_number':1517,'multiline':False]['text':' target','line_number':1530,'multiline':False]['text':' static features','line_number':1544,'multiline':False]['text':' all features','line_number':1556,'multiline':False]['text':' lagged features','line_number':1559,'multiline':False]['text':' transformer inputs','line_number':1574,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':1664,'multiline':False]['text':' Copied from transformers.models.time_series_transformer.modeling_time_series_transformer.TimeSeriesTransformerForPrediction with TimeSeriesTransformer->Informer,TIME_SERIES_TRANSFORMER->INFORMER,time-series-transformer->informer','line_number':1708,'multiline':False]['text':' Initialize weights of distribution_output and apply final processing','line_number':1730,'multiline':False]['text':' outputs.last_hidden_state','line_number':1848,'multiline':False]['text':' loc is 3rd last and scale is 2nd last output','line_number':1849,'multiline':False]['text':' greedy decoding','line_number':2018,'multiline':False]