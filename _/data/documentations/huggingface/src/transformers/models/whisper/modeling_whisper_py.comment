['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 The OpenAI Authors and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' noqa','line_number':55,'multiline':False]['text':' See all Whisper models at https://huggingface.co/models?filter=whisper','line_number':66,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama._get_unpad_data','line_number':70,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.shift_tokens_right','line_number':95,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':106,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2._compute_mask_indices','line_number':112,'multiline':False]['text':' epsilon is used for probabilistic rounding','line_number':148,'multiline':False]['text':' make sure num masked span <= sequence_length','line_number':156,'multiline':False]['text':' make sure num_masked span is also <= input_length - (mask_length - 1)','line_number':160,'multiline':False]['text':' compute number of masked spans in batch','line_number':166,'multiline':False]['text':' SpecAugment mask to fill','line_number':173,'multiline':False]['text':' compute num of masked spans for this input','line_number':183,'multiline':False]['text':' get random indices to mask','line_number':186,'multiline':False]['text':' pick first sampled index that will serve as a dummy index to pad vector','line_number':191,'multiline':False]['text':' to ensure same dimension for all batches due to probabilistic rounding','line_number':192,'multiline':False]['text':' Picking first sample just pads those vectors twice.','line_number':193,'multiline':False]['text':' this case can only happen if `input_length` is strictly smaller then','line_number':195,'multiline':False]['text':' `sequence_length` in which case the last token has to be a padding','line_number':196,'multiline':False]['text':' token which we can use as a dummy mask id','line_number':197,'multiline':False]['text':' expand masked indices to masked spans','line_number':209,'multiline':False]['text':' add offset to the starting indexes so that indexes now create a span','line_number':215,'multiline':False]['text':' ensure that we cannot have indices larger than sequence_length','line_number':222,'multiline':False]['text':' scatter indices to mask','line_number':226,'multiline':False]['text':' Pad the left and right edges.','line_number':245,'multiline':False]['text':' sort() is faster than torch.median (https://github.com/pytorch/pytorch/issues/51450)','line_number':248,'multiline':False]['text':' backtrace','line_number':279,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention._shape with BART->whisper','line_number':349,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention.forward with BART->whisper','line_number':353,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':365,'multiline':False]['text':' for the decoder','line_number':366,'multiline':False]['text':' get query proj','line_number':371,'multiline':False]['text':' get key, value proj','line_number':373,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':374,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':375,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':376,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':382,'multiline':False]['text':' cross_attentions','line_number':386,'multiline':False]['text':' reuse k, v, self_attention','line_number':390,'multiline':False]['text':' self_attention','line_number':396,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':401,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':402,'multiline':False]['text':' key/value_states (first "if" case)','line_number':403,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':404,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':405,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':406,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':407,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':444,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':445,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':446,'multiline':False]['text':' twice and have to be reused in the following','line_number':447,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':466,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':467,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartFlashAttention2 with Bart->Whisper','line_number':475,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2.__init__','line_number':483,'multiline':False]['text':' TODO: Should be removed once Flash Attention for RoCm is bumped to 2.1.','line_number':487,'multiline':False]['text':' flash_attn<2.1 generates top-left aligned causal mask, while what is needed here is bottom-right alignement, that was made default for flash_attn>=2.1. This attribute is used to handle this difference. Reference: https://github.com/Dao-AILab/flash-attention/releases/tag/v2.1.0.','line_number':488,'multiline':False]['text':' Beware that with flash_attn<2.1, using q_seqlen != k_seqlen (except for the case q_seqlen == 1) produces a wrong mask (top-left).','line_number':489,'multiline':False]['text':' WhisperFlashAttention2 attention does not support output_attentions','line_number':504,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':508,'multiline':False]['text':' for the decoder','line_number':509,'multiline':False]['text':' get query proj','line_number':514,'multiline':False]['text':' get key, value proj','line_number':516,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':517,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':518,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':519,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':525,'multiline':False]['text':' cross_attentions','line_number':529,'multiline':False]['text':' reuse k, v, self_attention','line_number':533,'multiline':False]['text':' self_attention','line_number':539,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':544,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':545,'multiline':False]['text':' key/value_states (first "if" case)','line_number':546,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':547,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':548,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':549,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':550,'multiline':False]['text':' In PEFT, usually we cast the layer norms in float32 for training stability reasons','line_number':557,'multiline':False]['text':' therefore the input hidden states gets silently casted in float32. Hence, we need','line_number':558,'multiline':False]['text':' cast them back in the correct dtype just to be sure everything works as expected.','line_number':559,'multiline':False]['text':' This might slowdown training & inference so it is recommended to not cast the LayerNorms','line_number':560,'multiline':False]['text':' in fp32. (LlamaRMSNorm handles it correctly)','line_number':561,'multiline':False]['text':' Handle the case where the model is quantized','line_number':565,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2._flash_attention_forward','line_number':593,'multiline':False]['text':' TODO: Remove the `query_length != 1` check once Flash Attention for RoCm is bumped to 2.1. For details, please see the comment in LlamaFlashAttention2 __init__.','line_number':619,'multiline':False]['text':' Contains at least one padding token in the sequence','line_number':622,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2._upad_input','line_number':653,'multiline':False]['text':' There is a memcpy here, that is very bad.','line_number':675,'multiline':False]['text':' The -q_len: slice assumes left padding.','line_number':679,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartSdpaAttention.forward with BART->whisper, Bart->Whisper','line_number':694,'multiline':False]['text':' TODO: Improve this warning with e.g. `model.config._attn_implementation = "manual"` once this is implemented.','line_number':706,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':720,'multiline':False]['text':' for the decoder','line_number':721,'multiline':False]['text':' get query proj','line_number':726,'multiline':False]['text':' get key, value proj','line_number':728,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':729,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':730,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':731,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':737,'multiline':False]['text':' cross_attentions','line_number':741,'multiline':False]['text':' reuse k, v, self_attention','line_number':745,'multiline':False]['text':' self_attention','line_number':751,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':756,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':757,'multiline':False]['text':' key/value_states (first "if" case)','line_number':758,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':759,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':760,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':761,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':762,'multiline':False]['text':' NOTE: SDPA with memory-efficient backend is currently (torch==2.1.2) bugged when using non-contiguous inputs and a custom attn_mask,','line_number':767,'multiline':False]['text':' but we are fine here as `_shape` do call `.contiguous()`. Reference: https://github.com/pytorch/pytorch/issues/112577','line_number':768,'multiline':False]['text':' The tgt_len > 1 is necessary to match with AttentionMaskConverter.to_causal_4d that does not create a causal mask in case tgt_len == 1.','line_number':775,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':787,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':788,'multiline':False]['text':' Copied from transformers.models.mbart.modeling_mbart.MBartEncoderLayer with MBart->Whisper, MBART->WHISPER','line_number':803,'multiline':False]['text':' Copied from transformers.models.mbart.modeling_mbart.MBartDecoderLayer with MBart->Whisper, MBART->WHISPER','line_number':874,'multiline':False]['text':' Self Attention','line_number':938,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':939,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':941,'multiline':False]['text':' Cross-Attention Block','line_number':952,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':959,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':972,'multiline':False]['text':' Fully Connected','line_number':975,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1187,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':1259,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1268,'multiline':False]['text':' skip the layer','line_number':1272,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1339,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1427,'multiline':False]['text':' past_key_values_length','line_number':1438,'multiline':False]['text':' 2d mask is passed through the layers','line_number':1445,'multiline':False]['text':' output_attentions=True & head_mask can not be supported when using SDPA.','line_number':1448,'multiline':False]['text':' 4d mask is passed through the layers','line_number':1453,'multiline':False]['text':' embed positions','line_number':1458,'multiline':False]['text':' decoder layers','line_number':1473,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1479,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1487,'multiline':False]['text':' encoder attention mask','line_number':1503,'multiline':False]['text':' past_key_value','line_number':1506,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':1535,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1565,'multiline':False]['text':' `config.apply_spec_augment` can set masking to False','line_number':1597,'multiline':False]['text':' generate indices & apply SpecAugment along time axis','line_number':1601,'multiline':False]['text':' generate indices & apply SpecAugment along time axis','line_number':1605,'multiline':False]['text':' generate indices & apply SpecAugment along feature axis','line_number':1618,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':1685,'multiline':False]['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':1693,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1736,'multiline':False]['text':' move labels to correct device to enable PP','line_number':1839,'multiline':False]['text':' 1. Check whether we're in shortform or longform mode','line_number':2053,'multiline':False]['text':' 2. Make sure the generation config is correctly set depending on whether timestamps are to be returned or not','line_number':2068,'multiline':False]['text':' 3. Make sure to correctly set language-related parameters','line_number':2098,'multiline':False]['text':' 4. Add forced decoder ids depending on passed `language`, `task`,`prompt_ids`, `return_token_timestamps` and `return_timestamps`','line_number':2133,'multiline':False]['text':' Legacy code for backward compatibility','line_number':2135,'multiline':False]['text':' automatically detect the language','line_number':2168,'multiline':False]['text':' defaults to transcribe','line_number':2178,'multiline':False]['text':' Slicing the text prompt ids in a manner consistent with the OpenAI implementation','line_number':2193,'multiline':False]['text':' to accomodate context space for the prefix (see https://github.com/openai/whisper/blob/c09a7ae299c4c34c5839a76380ae407e7d785914/whisper/decoding.py#L599)','line_number':2194,'multiline':False]['text':' Set the decoder_start_token_id to <|startofprev|>','line_number':2196,'multiline':False]['text':' If the user passes `max_new_tokens`, increase its number to account for the prompt','line_number':2199,'multiline':False]['text':' Reformat the forced_decoder_ids to incorporate the prompt','line_number':2212,'multiline':False]['text':' remove no_timestamp to be forcefully generated if we want to return timestamps','line_number':2246,'multiline':False]['text':' this is also important to make sure `WhisperTimeStampLogitsProcessor` functions correctly','line_number':2247,'multiline':False]['text':' Make sure that if list is empty we set it to None','line_number':2249,'multiline':False]['text':' 5. If we're in shortform mode, simple generate the whole input at once and return the output','line_number':2257,'multiline':False]['text':' 6. Else we're in longform mode which is more complex. We need to chunk the audio input depending on when the model generated','line_number':2278,'multiline':False]['text':' timestamp tokens','line_number':2279,'multiline':False]['text':' 6.1 Set running parameters for while loop','line_number':2280,'multiline':False]['text':' if input is longer than 30 seconds we default to long-form generation','line_number':2286,'multiline':False]['text':' input stride is mel frames per encoder output vector which is the product of all conv strides','line_number':2288,'multiline':False]['text':' batch size can decrease during the run','line_number':2305,'multiline':False]['text':' 6.2 Transcribe audio until we reach the end of all input audios','line_number':2308,'multiline':False]['text':' 6.3 NOTE: When in longform transcription mode and batch size > 1 we need to dynamically reduce the batch size during the loop','line_number':2312,'multiline':False]['text':' in case one audio finished earlier than another one. Thus, we need to keep a table of "previous-index-2-current-index" in order','line_number':2313,'multiline':False]['text':' to know which original audio is being decoded','line_number':2314,'multiline':False]['text':' cut out index that goes away','line_number':2323,'multiline':False]['text':' 6.4  Set updated index map, duration of previously decoded chunks and number of max frames of current decoding chunk','line_number':2326,'multiline':False]['text':' 6.5 Make sure that all inputs are padded to the same input length','line_number':2331,'multiline':False]['text':' pad to 3000 if necessary','line_number':2340,'multiline':False]['text':' 6.6 Batch generate current chunk','line_number':2349,'multiline':False]['text':' 6.7 Loop over each decoded audio individually as each decoding can be of a different length','line_number':2376,'multiline':False]['text':' make sure we cut a predicted EOS token if we are not finished with the generation yet','line_number':2380,'multiline':False]['text':' remove all padding tokens','line_number':2385,'multiline':False]['text':' 7. Once all segments are added to the list of all segments, called `current_segments`, we extract the predicted','line_number':2406,'multiline':False]['text':' output tokens from the list of dicts. If we use batch size > 1, we make sure to pad the output','line_number':2407,'multiline':False]['text':' 8. If we return all segments, the predicted output sequences are put under `"sequences"`.','line_number':2421,'multiline':False]['text':' find the predicted "end of segment" predictions of Whisper','line_number':2440,'multiline':False]['text':' "end of segment" predictions occur whenever Whisper predicts a timestamp token','line_number':2441,'multiline':False]['text':' If whisper predicted a "end of segment" via a timestep token, let's go ever each','line_number':2446,'multiline':False]['text':' "end of segment" prediction and slice the decoding into segments accordingly','line_number':2447,'multiline':False]['text':' if the output contains two consecutive timestamp tokens','line_number':2449,'multiline':False]['text':' Add each segment to list of all segments','line_number':2456,'multiline':False]['text':' single timestamp at the end means no speech after the last timestamp.','line_number':2472,'multiline':False]['text':' otherwise, ignore the unfinished segment and seek to the last timestamp','line_number':2475,'multiline':False]['text':' here we throw away all predictions after the last predicted "end of segment"','line_number':2476,'multiline':False]['text':' since we are cutting right in the middle of an audio','line_number':2477,'multiline':False]['text':' If whisper does not predict any "end of segment" token, then','line_number':2481,'multiline':False]['text':' the whole decoding is considered a segment and we add it to the list of segments','line_number':2482,'multiline':False]['text':' no consecutive timestamps but it has a timestamp; use the last one.','line_number':2486,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':2513,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':2517,'multiline':False]['text':' Create a list with `decoder_layers` elements, each a tensor of shape','line_number':2548,'multiline':False]['text':' (batch size, attention_heads, output length, input length).','line_number':2549,'multiline':False]['text':' Select specific cross-attention layers and heads. This is a tensor','line_number':2554,'multiline':False]['text':' of shape (batch size, num selected, output length, input length).','line_number':2555,'multiline':False]['text':' Normalize and smoothen the weights.','line_number':2561,'multiline':False]['text':' Average the different cross-attention heads.','line_number':2566,'multiline':False]['text':' Perform dynamic time warping on each element of the batch.','line_number':2571,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2619,'multiline':False]['text':' If the user passed a tuple or `BaseModelOutput` for encoder_outputs, we extract only the hidden states','line_number':2743,'multiline':False]['text':' decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)','line_number':2747,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':2795,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':2799,'multiline':False]['text':' transformer layers + input embeddings','line_number':2834,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2840,'multiline':False]['text':' move labels to correct device to enable PP','line_number':2934,'multiline':False]