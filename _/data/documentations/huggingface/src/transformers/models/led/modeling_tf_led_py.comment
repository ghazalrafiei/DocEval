['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021 Iz Beltagy, Matthew E. Peters, Arman Cohan and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' Public API','line_number':30,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart.shift_tokens_right','line_number':59,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':67,'multiline':False]['text':' "Verify that `labels` has only positive values and -100"','line_number':74,'multiline':False]['text':' Make sure the assertion op is called by wrapping the result in an identity no-op','line_number':77,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart._make_causal_mask','line_number':84,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart._expand_mask','line_number':102,'multiline':False]['text':' Copied from transformers.models.longformer.modeling_tf_longformer.TFLongformerSelfAttention with TFLongformer->TFLEDEncoder','line_number':133,'multiline':False]['text':' separate projection layers for tokens with global attention','line_number':164,'multiline':False]['text':' retrieve input args','line_number':240,'multiline':False]['text':' project hidden states','line_number':250,'multiline':False]['text':' normalize query','line_number':262,'multiline':False]['text':' attn_probs = (batch_size, seq_len, num_heads, window*2+1)','line_number':267,'multiline':False]['text':' values to pad for attention probs','line_number':272,'multiline':False]['text':' cast to fp32/fp16 then replace 1's with -inf','line_number':274,'multiline':False]['text':' diagonal mask with zeros everywhere and -inf inplace of padding','line_number':277,'multiline':False]['text':' pad local attention probs','line_number':284,'multiline':False]['text':' compute global attn indices required through out forward fn','line_number':296,'multiline':False]['text':' this function is only relevant for global attention','line_number':304,'multiline':False]['text':' softmax sometimes inserts NaN if all positions are masked, replace them with 0','line_number':318,'multiline':False]['text':' Make sure to create a mask with the proper shape:','line_number':319,'multiline':False]['text':' if is_global_attn==True => [batch_size, seq_len, self.num_heads, self.one_sided_attn_window_size * 2 + max_num_global_attn_indices + 1]','line_number':320,'multiline':False]['text':' if is_global_attn==False => [batch_size, seq_len, self.num_heads, self.one_sided_attn_window_size * 2 + 1]','line_number':321,'multiline':False]['text':' apply dropout','line_number':350,'multiline':False]['text':' if global attention, compute sum of global and local attn','line_number':354,'multiline':False]['text':' compute value for global attention and overwrite to attention output','line_number':375,'multiline':False]['text':' Leave attn_output unchanged','line_number':389,'multiline':False]['text':' make sure that local attention probabilities are set to 0 for indices of global attn','line_number':392,'multiline':False]['text':' Make sure to create a mask with the proper shape:','line_number':393,'multiline':False]['text':' if is_global_attn==True => [batch_size, seq_len, self.num_heads, self.one_sided_attn_window_size * 2 + max_num_global_attn_indices + 1]','line_number':394,'multiline':False]['text':' if is_global_attn==False => [batch_size, seq_len, self.num_heads, self.one_sided_attn_window_size * 2 + 1]','line_number':395,'multiline':False]['text':' group batch_size and num_heads dimensions into one, then chunk seq_len into chunks of size window_overlap * 2','line_number':440,'multiline':False]['text':' matrix multiplication','line_number':449,'multiline':False]['text':' bcxd: batch_size * num_heads x chunks x 2window_overlap x head_dim','line_number':450,'multiline':False]['text':' bcyd: batch_size * num_heads x chunks x 2window_overlap x head_dim','line_number':451,'multiline':False]['text':' bcxy: batch_size * num_heads x chunks x 2window_overlap x 2window_overlap','line_number':452,'multiline':False]['text':' multiply','line_number':454,'multiline':False]['text':' convert diagonals into columns','line_number':456,'multiline':False]['text':' allocate space for the overall attention matrix where the chunks are combined. The last dimension','line_number':460,'multiline':False]['text':' has (window_overlap * 2 + 1) columns. The first (window_overlap) columns are the window_overlap lower triangles (attention from a word to','line_number':461,'multiline':False]['text':' window_overlap previous words). The following column is attention score from each word to itself, then','line_number':462,'multiline':False]['text':' followed by window_overlap columns for the upper triangle.','line_number':463,'multiline':False]['text':' copy parts from diagonal_chunked_attention_scores into the combined matrix of attentions','line_number':465,'multiline':False]['text':' - copying the main diagonal and the upper triangle','line_number':466,'multiline':False]['text':' TODO: This code is most likely not very efficient and should be improved','line_number':467,'multiline':False]['text':' - copying the lower triangle','line_number':476,'multiline':False]['text':' merging upper and lower triangle','line_number':514,'multiline':False]['text':' separate batch_size and num_heads dimensions again','line_number':519,'multiline':False]['text':' create correct upper triangle bool mask','line_number':534,'multiline':False]['text':' pad to full matrix','line_number':540,'multiline':False]['text':' create lower mask','line_number':545,'multiline':False]['text':' combine with upper mask','line_number':548,'multiline':False]['text':' broadcast to full matrix','line_number':551,'multiline':False]['text':' inf tensor used for masking','line_number':554,'multiline':False]['text':' mask','line_number':557,'multiline':False]['text':' group batch_size and num_heads dimensions into one, then chunk seq_len into chunks of size 2 window overlap','line_number':586,'multiline':False]['text':' group batch_size and num_heads dimensions into one','line_number':597,'multiline':False]['text':' pad seq_len with w at the beginning of the sequence and another window overlap at the end','line_number':603,'multiline':False]['text':' chunk padded_value into chunks of size 3 window overlap and an overlap of size window overlap','line_number':607,'multiline':False]['text':' padding value is not important because it will be overwritten','line_number':640,'multiline':False]['text':' total_num_heads x num_chunks x window_overlap x (hidden_dim+window_overlap+1). Padding value is not important because it'll be overwritten','line_number':683,'multiline':False]['text':' total_num_heads x num_chunks x window_overlapL+window_overlapwindow_overlap+window_overlap','line_number':686,'multiline':False]['text':' total_num_heads x num_chunks x window_overlapL+window_overlapwindow_overlap','line_number':689,'multiline':False]['text':' total_num_heads x num_chunks, window_overlap x hidden_dim+window_overlap','line_number':693,'multiline':False]['text':' define frame size and frame stride (similar to convolution)','line_number':704,'multiline':False]['text':' chunk with overlap','line_number':709,'multiline':False]['text':' helper variable','line_number':731,'multiline':False]['text':' max number of global attn indices in batch','line_number':735,'multiline':False]['text':' indices of global attn','line_number':738,'multiline':False]['text':' helper variable','line_number':741,'multiline':False]['text':' location of the non-padding values within global attention indices','line_number':746,'multiline':False]['text':' location of the padding values within global attention indices','line_number':749,'multiline':False]['text':' select global key vectors','line_number':771,'multiline':False]['text':' create only global key vectors','line_number':774,'multiline':False]['text':' (batch_size, seq_len, num_heads, max_num_global_attn_indices)','line_number':786,'multiline':False]['text':' (batch_size, max_num_global_attn_indices, seq_len, num_heads)','line_number':789,'multiline':False]['text':' scatter mask','line_number':797,'multiline':False]['text':' (batch_size, seq_len, num_heads, max_num_global_attn_indices)','line_number':804,'multiline':False]['text':' concat to attn_probs','line_number':807,'multiline':False]['text':' (batch_size, seq_len, num_heads, extra attention count + 2*window+1)','line_number':808,'multiline':False]['text':' cut local attn probs to global only','line_number':823,'multiline':False]['text':' select global value vectors','line_number':826,'multiline':False]['text':' create only global value vectors','line_number':829,'multiline':False]['text':' compute attn output only global','line_number':841,'multiline':False]['text':' reshape attn probs','line_number':844,'multiline':False]['text':' compute attn output with global','line_number':847,'multiline':False]['text':' prepare global hidden states','line_number':868,'multiline':False]['text':' global key, query, value','line_number':876,'multiline':False]['text':' normalize','line_number':881,'multiline':False]['text':' compute attn scores','line_number':889,'multiline':False]['text':' scatter mask','line_number':913,'multiline':False]['text':' mask global attn scores','line_number':921,'multiline':False]['text':' compute global attn probs','line_number':929,'multiline':False]['text':' apply layer head masking','line_number':932,'multiline':False]['text':' dropout','line_number':949,'multiline':False]['text':' global attn output','line_number':952,'multiline':False]['text':' get only non zero global attn output','line_number':970,'multiline':False]['text':' overwrite values with global attention','line_number':980,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':1081,'multiline':False]['text':' for the decoder','line_number':1082,'multiline':False]['text':' get query proj','line_number':1086,'multiline':False]['text':' get key, value proj','line_number':1088,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':1090,'multiline':False]['text':' cross_attentions','line_number':1094,'multiline':False]['text':' reuse k, v, self_attention','line_number':1098,'multiline':False]['text':' self_attention','line_number':1104,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':1109,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':1110,'multiline':False]['text':' key/value_states (first "if" case)','line_number':1111,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':1112,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':1113,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':1114,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':1115,'multiline':False]['text':' Self-Attention','line_number':1345,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1346,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':1348,'multiline':False]['text':' Cross-Attention Block','line_number':1359,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':1365,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':1378,'multiline':False]['text':' Fully Connected','line_number':1381,'multiline':False]['text':' Copied from transformers.models.longformer.modeling_tf_longformer.TFLongformerBaseModelOutput with TFLongformer->TFLEDEncoder','line_number':1436,'multiline':False]['text':' one value per layer','line_number':1746,'multiline':False]['text':' merge `global_attention_mask` and `attention_mask`','line_number':1834,'multiline':False]['text':' is index masked or global attention','line_number':1846,'multiline':False]['text':' check attention mask and invert','line_number':1856,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1858,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':1865,'multiline':False]['text':' encoder layers','line_number':1876,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1881,'multiline':False]['text':' skip the layer','line_number':1883,'multiline':False]['text':' bzs x seq_len x num_attn_heads x (num_global_attn + attention_window_len + 1) => bzs x num_attn_heads x seq_len x (num_global_attn + attention_window_len + 1)','line_number':1898,'multiline':False]['text':' bzs x num_attn_heads x num_global_attn x seq_len => bzs x num_attn_heads x seq_len x num_global_attn','line_number':1901,'multiline':False]['text':' undo padding','line_number':1904,'multiline':False]['text':' unpad `hidden_states` because the calling function is expecting a length == input_ids.size(1)','line_number':1905,'multiline':False]['text':' undo padding','line_number':1908,'multiline':False]['text':' padding','line_number':1940,'multiline':False]['text':' no attention on the padding tokens','line_number':1968,'multiline':False]['text':' embed positions','line_number':2107,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2116,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':2128,'multiline':False]['text':' decoder layers','line_number':2134,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':2140,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':2152,'multiline':False]['text':' Additional attribute to specify the expected name scope of the layer (for loading/storing weights)','line_number':2233,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a TFLEDEncoderBaseModelOutput when return_dict=True','line_number':2283,'multiline':False]['text':' If the user passed a TFLEDEncoderBaseModelOutput for encoder_outputs, we wrap it in a tuple when return_dict=False','line_number':2290,'multiline':False]['text':' The shared/tied weights expect to be in the model base namespace','line_number':2329,'multiline':False]['text':' Adding "/" to the end (not the start!) of a tf.name_scope puts it in the root namespace rather than','line_number':2330,'multiline':False]['text':' the current one.','line_number':2331,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart.BiasLayer','line_number':2436,'multiline':False]['text':' Note: the name of this variable will NOT be scoped when serialized, i.e. it will not be in the format of','line_number':2445,'multiline':False]['text':' "outer_layer/inner_layer/.../name:0". Instead, it will be "name:0". For further details, see:','line_number':2446,'multiline':False]['text':' https://github.com/huggingface/transformers/pull/18833#issuecomment-1233090214','line_number':2447,'multiline':False]['text':' final_bias_logits is registered as a buffer in pytorch, so not trainable for the sake of consistency.','line_number':2468,'multiline':False]['text':' TODO (Joao): investigate why LED has numerical issues in XLA generate','line_number':2473,'multiline':False]['text':' Replaces the existing layers containing bias for correct (de)serialization.','line_number':2486,'multiline':False]['text':' index 1 of d outputs','line_number':2576,'multiline':False]['text':' index 2 of d outputs','line_number':2577,'multiline':False]['text':' index 3 of d outputs','line_number':2578,'multiline':False]['text':' index 4 of d outputs','line_number':2579,'multiline':False]['text':' index 0 of encoder outputs','line_number':2580,'multiline':False]['text':' 1 of e out','line_number':2581,'multiline':False]['text':' 2 of e out','line_number':2582,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':2618,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':2623,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':2630,'multiline':False]['text':' Clip negative labels to zero here to avoid NaNs and errors - those positions will get masked later anyway','line_number':2648,'multiline':False]['text':' make sure only non-padding labels affect the loss','line_number':2650,'multiline':False]