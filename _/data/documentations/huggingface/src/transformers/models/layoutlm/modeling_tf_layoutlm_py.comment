['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2018 The Microsoft Research Asia LayoutLM Team Authors and the HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfAttention with Bert->LayoutLM','line_number':196,'multiline':False]['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':227,'multiline':False]['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':230,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':247,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':248,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':249,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':253,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':273,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':274,'multiline':False]['text':' key/value_states (first "if" case)','line_number':275,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':276,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':277,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':278,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':279,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':282,'multiline':False]['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':283,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in TFLayoutLMModel call() function)','line_number':289,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':292,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':295,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':296,'multiline':False]['text':' Mask heads if we want to','line_number':299,'multiline':False]['text':' (batch_size, seq_len_q, all_head_size)','line_number':306,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfOutput with Bert->LayoutLM','line_number':329,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertAttention with Bert->LayoutLM','line_number':360,'multiline':False]['text':' add attentions (possibly with past_key_value) if we output them','line_number':395,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertIntermediate with Bert->LayoutLM','line_number':412,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertOutput with Bert->LayoutLM','line_number':442,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLayer with Bert->LayoutLM','line_number':473,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':499,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':513,'multiline':False]['text':' add self attentions if we output attention weights','line_number':518,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':528,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':541,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':543,'multiline':False]['text':' add attentions if we output them','line_number':551,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':553,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertEncoder with Bert->LayoutLM','line_number':577,'multiline':False]['text':' Add last layer','line_number':629,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->LayoutLM','line_number':656,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':670,'multiline':False]['text':' to the first token.','line_number':671,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPredictionHeadTransform with Bert->LayoutLM','line_number':686,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLMPredictionHead with Bert->LayoutLM','line_number':724,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':734,'multiline':False]['text':' an output-only bias for each token.','line_number':735,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertMLMHead with Bert->LayoutLM','line_number':773,'multiline':False]['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':864,'multiline':False]['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':865,'multiline':False]['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':866,'multiline':False]['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':867,'multiline':False]['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':868,'multiline':False]['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':871,'multiline':False]['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':872,'multiline':False]['text':' positions we want to attend and -10000.0 for masked positions.','line_number':873,'multiline':False]['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':874,'multiline':False]['text':' effectively the same as removing these entirely.','line_number':875,'multiline':False]['text':' Prepare head mask if needed','line_number':881,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':882,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':883,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':884,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':885,'multiline':False]['text':' Need to pass these required positional arguments to `Encoder`','line_number':895,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1138,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1276,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1406,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1541,'multiline':False]