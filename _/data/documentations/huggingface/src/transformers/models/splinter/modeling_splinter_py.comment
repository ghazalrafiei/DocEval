['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021 Tel AViv University, AllenAI and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all Splinter models at https://huggingface.co/models?filter=splinter','line_number':45,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':58,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':59,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':63,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->Splinter','line_number':103,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':148,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':149,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':150,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':154,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':175,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':176,'multiline':False]['text':' key/value_states (first "if" case)','line_number':177,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':178,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':179,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':180,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':181,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':184,'multiline':False]['text':' fp16 compatibility','line_number':199,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in SplinterModel forward() function)','line_number':211,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':214,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':217,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':218,'multiline':False]['text':' Mask heads if we want to','line_number':221,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->Splinter','line_number':238,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->Splinter','line_number':253,'multiline':False]['text':' Prune linear layers','line_number':268,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':274,'multiline':False]['text':' add attentions if we output them','line_number':299,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->Splinter','line_number':303,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->Splinter','line_number':319,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->Splinter','line_number':334,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':360,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':371,'multiline':False]['text':' add self attentions if we output attention weights','line_number':376,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':386,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':398,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':400,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':409,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->Splinter','line_number':421,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights','line_number':525,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':529,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':530,'multiline':False]['text':' Initialize weights and apply final processing','line_number':622,'multiline':False]['text':' past_key_values_length','line_number':704,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':712,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':713,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':716,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':717,'multiline':False]['text':' Prepare head mask if needed','line_number':727,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':728,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':729,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':730,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':731,'multiline':False]['text':' [batch_size, num_positions, dim]','line_number':804,'multiline':False]['text':' [batch_size, num_positions, dim]','line_number':805,'multiline':False]['text':' [batch_size, num_positions, dim]','line_number':807,'multiline':False]['text':' [batch_size, num_positions, dim]','line_number':808,'multiline':False]['text':' [batch_size, seq_length, dim]','line_number':809,'multiline':False]['text':' [batch_size, seq_length, dim]','line_number':810,'multiline':False]['text':' [batch_size, num_positions, dim]','line_number':812,'multiline':False]['text':' [batch_size, dim, seq_length]','line_number':813,'multiline':False]['text':' Initialize weights and apply final processing','line_number':838,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':916,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':921,'multiline':False]['text':' Initialize weights and apply final processing','line_number':992,'multiline':False]['text':' [batch_size, num_questions, sequence_length]','line_number':1053,'multiline':False]['text':' [batch_size, num_questions, sequence_length]','line_number':1065,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1067,'multiline':False]['text':' Ignore zero positions in the loss. Splinter never predicts zero','line_number':1071,'multiline':False]['text':' during pretraining and zero is used for padding question','line_number':1072,'multiline':False]['text':' tokens as well as for start and end positions of padded','line_number':1073,'multiline':False]['text':' question tokens.','line_number':1074,'multiline':False]