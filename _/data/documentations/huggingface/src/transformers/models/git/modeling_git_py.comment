['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 Microsoft Research and The HuggingFace Inc. team.','line_number':2,'multiline':False]['text':' All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' See all GIT models at https://huggingface.co/models?filter=git','line_number':50,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionModelOutput with CLIP->Git','line_number':55,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':92,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':93,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':96,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':191,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':192,'multiline':False]['text':' key/value_states (first "if" case)','line_number':193,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':194,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':195,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':196,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':197,'multiline':False]['text':' NOTE: like in other caches, we store the text component. In GIT it means we discard the image component.','line_number':198,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':204,'multiline':False]['text':' fp16 compatibility','line_number':219,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in GitModel forward() function)','line_number':231,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':234,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':237,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':238,'multiline':False]['text':' Mask heads if we want to','line_number':241,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput','line_number':257,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention.__init__ with Bert->Git','line_number':273,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention.prune_heads','line_number':280,'multiline':False]['text':' Prune linear layers','line_number':288,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':294,'multiline':False]['text':' add attentions if we output them','line_number':317,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate','line_number':321,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput','line_number':337,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':370,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':382,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':391,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder.__init__ with Bert->Git','line_number':403,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':504,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':505,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionEmbeddings with CLIP->Git','line_number':582,'multiline':False]['text':' shape = [*, width, grid, grid]','line_number':609,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPMLP','line_number':618,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPAttention','line_number':634,'multiline':False]['text':' get query proj','line_number':671,'multiline':False]['text':' apply the causal_attention_mask first','line_number':690,'multiline':False]['text':' this operation is a bit akward, but it's required to','line_number':711,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':712,'multiline':False]['text':' In order to do so, attn_weights have to reshaped','line_number':713,'multiline':False]['text':' twice and have to be reused in the following','line_number':714,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPEncoderLayer with CLIP->GitVision','line_number':739,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPEncoder with CLIP->GitVision, CLIPConfig','line_number':790,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionTransformer.__init__ with CLIPEncoder->GitVisionEncoder, CLIP->Git','line_number':905,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionModel.__init__ with CLIP->Git','line_number':970,'multiline':False]['text':' Initialize weights and apply final processing','line_number':974,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1055,'multiline':False]['text':' Default mask is for forward direction. Flip for backward direction.','line_number':1073,'multiline':False]['text':' if it is False, it means valid. That is, it is not a padding','line_number':1110,'multiline':False]['text':' add axis for multi-head','line_number':1123,'multiline':False]['text':' past_key_values_length','line_number':1196,'multiline':False]['text':' Prepare head mask if needed','line_number':1199,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':1200,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1201,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1202,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1203,'multiline':False]['text':' here we assume pixel_values is of shape (batch_size, num_channels, height, width)','line_number':1209,'multiline':False]['text':' here we assume pixel_values is of shape (batch_size, num_frames, num_channels, height, width)','line_number':1213,'multiline':False]['text':' finally, concatenate all features along sequence dimension','line_number':1220,'multiline':False]['text':' Repeat visual features to match embedding batch size.','line_number':1242,'multiline':False]['text':' concatenate patch token and text token embeddings','line_number':1247,'multiline':False]['text':' By default, an additive causal mask is created','line_number':1250,'multiline':False]['text':' for masking the future (one direction).','line_number':1251,'multiline':False]['text':' Create an attention mask of shape (batch_size, 1, tgt_seq_len, src_seq_len)','line_number':1254,'multiline':False]['text':' if the user provides an attention mask, we add it to the default one','line_number':1263,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1264,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1309,'multiline':False]['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1500,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':1522,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1526,'multiline':False]