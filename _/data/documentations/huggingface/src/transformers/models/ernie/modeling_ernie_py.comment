['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 The HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all ERNIE models at https://huggingface.co/models?filter=ernie','line_number':70,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':86,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':87,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':90,'multiline':False]['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':118,'multiline':False]['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':119,'multiline':False]['text':' issue #5664','line_number':120,'multiline':False]['text':' add `task_type_id` for ERNIE model','line_number':138,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->Ernie','line_number':150,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':195,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':196,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':197,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':201,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':222,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':223,'multiline':False]['text':' key/value_states (first "if" case)','line_number':224,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':225,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':226,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':227,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':228,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':231,'multiline':False]['text':' fp16 compatibility','line_number':246,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in ErnieModel forward() function)','line_number':258,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':261,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':264,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':265,'multiline':False]['text':' Mask heads if we want to','line_number':268,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->Ernie','line_number':285,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->Ernie','line_number':300,'multiline':False]['text':' Prune linear layers','line_number':315,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':321,'multiline':False]['text':' add attentions if we output them','line_number':346,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->Ernie','line_number':350,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->Ernie','line_number':366,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->Ernie','line_number':381,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':407,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':418,'multiline':False]['text':' add self attentions if we output attention weights','line_number':423,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':433,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':445,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':447,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':456,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->Ernie','line_number':468,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->Ernie','line_number':562,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':570,'multiline':False]['text':' to the first token.','line_number':571,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->Ernie','line_number':578,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->Ernie','line_number':596,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':602,'multiline':False]['text':' an output-only bias for each token.','line_number':603,'multiline':False]['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':608,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->Ernie','line_number':617,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyNSPHead with Bert->Ernie','line_number':628,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainingHeads with Bert->Ernie','line_number':639,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':665,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':666,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForPreTrainingOutput with Bert->Ernie','line_number':680,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel.__init__ with Bert->Ernie','line_number':802,'multiline':False]['text':' Initialize weights and apply final processing','line_number':812,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel.get_input_embeddings','line_number':815,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel.set_input_embeddings','line_number':819,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel._prune_heads','line_number':823,'multiline':False]['text':' past_key_values_length','line_number':899,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':913,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':914,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':917,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':918,'multiline':False]['text':' Prepare head mask if needed','line_number':928,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':929,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':930,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':931,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':932,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForPreTraining.__init__ with Bert->Ernie,bert->ernie','line_number':981,'multiline':False]['text':' Initialize weights and apply final processing','line_number':988,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForPreTraining.get_output_embeddings','line_number':991,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForPreTraining.set_output_embeddings','line_number':995,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel.__init__ with BertLMHeadModel->ErnieForCausalLM,Bert->Ernie,bert->ernie','line_number':1092,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1102,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel.get_output_embeddings','line_number':1105,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel.set_output_embeddings','line_number':1109,'multiline':False]['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1187,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel.prepare_inputs_for_generation','line_number':1206,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1211,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':1215,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1219,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1223,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMHeadModel._reorder_cache','line_number':1235,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForMaskedLM.__init__ with Bert->Ernie,bert->ernie','line_number':1249,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1262,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForMaskedLM.get_output_embeddings','line_number':1265,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForMaskedLM.set_output_embeddings','line_number':1269,'multiline':False]['text':' -100 index = padding token','line_number':1326,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForMaskedLM.prepare_inputs_for_generation','line_number':1340,'multiline':False]['text':'  add a dummy token','line_number':1345,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForNextSentencePrediction.__init__ with Bert->Ernie,bert->ernie','line_number':1363,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1370,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForSequenceClassification.__init__ with Bert->Ernie,bert->ernie','line_number':1471,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1484,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForMultipleChoice.__init__ with Bert->Ernie,bert->ernie','line_number':1570,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1581,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForTokenClassification.__init__ with Bert->Ernie,bert->ernie','line_number':1667,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1679,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForQuestionAnswering.__init__ with Bert->Ernie,bert->ernie','line_number':1746,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1754,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':1807,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1812,'multiline':False]