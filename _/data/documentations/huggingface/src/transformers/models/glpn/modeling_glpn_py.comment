['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 KAIST and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' General docstring','line_number':42,'multiline':False]['text':' Base docstring','line_number':45,'multiline':False]['text':' See all GLPN models at https://huggingface.co/models?filter=glpn','line_number':51,'multiline':False]['text':' Copied from transformers.models.beit.modeling_beit.drop_path','line_number':55,'multiline':False]['text':' work with diff dim tensors, not just 2D ConvNets','line_number':69,'multiline':False]['text':' binarize','line_number':71,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerDropPath','line_number':76,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerOverlapPatchEmbeddings','line_number':91,'multiline':False]['text':' (batch_size, num_channels, height, width) -> (batch_size, num_channels, height*width) -> (batch_size, height*width, num_channels)','line_number':110,'multiline':False]['text':' this can be fed to a Transformer layer','line_number':111,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerEfficientSelfAttention','line_number':117,'multiline':False]['text':' Reshape to (batch_size, num_channels, height, width)','line_number':165,'multiline':False]['text':' Apply sequence reduction','line_number':167,'multiline':False]['text':' Reshape back to (batch_size, seq_len, num_channels)','line_number':169,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':176,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':181,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':184,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':185,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerSelfOutput','line_number':199,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerAttention with Segformer->GLPN','line_number':212,'multiline':False]['text':' Prune linear layers','line_number':232,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':238,'multiline':False]['text':' add attentions if we output them','line_number':247,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerDWConv','line_number':251,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerMixFFN with Segformer->GLPN','line_number':266,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerLayer with Segformer->GLPN','line_number':290,'multiline':False]['text':' in GLPN, layernorm is applied before self-attention','line_number':310,'multiline':False]['text':' add self attentions if we output attention weights','line_number':317,'multiline':False]['text':' first residual connection (with stochastic depth)','line_number':319,'multiline':False]['text':' second residual connection (with stochastic depth)','line_number':325,'multiline':False]['text':' stochastic depth decay rule','line_number':339,'multiline':False]['text':' patch embeddings','line_number':342,'multiline':False]['text':' Transformer blocks','line_number':355,'multiline':False]['text':' each block consists of layers','line_number':359,'multiline':False]['text':' Layer norms','line_number':378,'multiline':False]['text':' first, obtain patch embeddings','line_number':398,'multiline':False]['text':' second, send embeddings through blocks','line_number':400,'multiline':False]['text':' third, apply layer norm','line_number':406,'multiline':False]['text':' fourth, optionally reshape back to (batch_size, num_channels, height, width)','line_number':408,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerPreTrainedModel._init_weights','line_number':432,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':436,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':437,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerModel.__init__ with Segformer->GLPN','line_number':484,'multiline':False]['text':' hierarchical Transformer encoder','line_number':489,'multiline':False]['text':' Initialize weights and apply final processing','line_number':492,'multiline':False]['text':' Copied from transformers.models.segformer.modeling_segformer.SegformerModel.forward','line_number':511,'multiline':False]['text':' concatenate features along the channel dimension','line_number':571,'multiline':False]['text':' pass through convolutional layers','line_number':573,'multiline':False]['text':' apply sigmoid to get two-channel attention map','line_number':577,'multiline':False]['text':' construct hybrid features by adding element-wise','line_number':579,'multiline':False]['text':' we use features from end -> start','line_number':610,'multiline':False]['text':' don't fuse in first stage','line_number':617,'multiline':False]['text':' use last features of the decoder','line_number':669,'multiline':False]['text':' Initialize weights and apply final processing','line_number':692,'multiline':False]['text':' we need the intermediate hidden states','line_number':754,'multiline':False]