['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 Facebook AI and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' here w goes first','line_number':157,'multiline':False]['text':' use half of dimensions to encode grid_h','line_number':171,'multiline':False]['text':' (H*W, D/2)','line_number':172,'multiline':False]['text':' (H*W, D/2)','line_number':173,'multiline':False]['text':' (H*W, D)','line_number':175,'multiline':False]['text':' (D/2,)','line_number':188,'multiline':False]['text':' (M,)','line_number':190,'multiline':False]['text':' (M, D/2), outer product','line_number':191,'multiline':False]['text':' half of the positions get sinusoidal pattern and the rest gets','line_number':193,'multiline':False]['text':' cosine pattern and then they are concatenated','line_number':194,'multiline':False]['text':' (M, D/2)','line_number':195,'multiline':False]['text':' (M, D/2)','line_number':196,'multiline':False]['text':' (M, D)','line_number':198,'multiline':False]['text':' fixed sin-cos embedding','line_number':226,'multiline':False]['text':' noise in [0, 1)','line_number':257,'multiline':False]['text':' sort noise for each sample','line_number':259,'multiline':False]['text':' ascend: small is keep, large is remove','line_number':260,'multiline':False]['text':' keep the first subset','line_number':263,'multiline':False]['text':' generate the binary mask: 0 is keep, 1 is remove','line_number':272,'multiline':False]['text':' this hack is needed because TF's EagerTensors don't support','line_number':273,'multiline':False]['text':' assignment','line_number':274,'multiline':False]['text':' unshuffle to get the binary mask','line_number':279,'multiline':False]['text':' add position embeddings w/o cls token','line_number':287,'multiline':False]['text':' masking: length -> length * config.mask_ratio','line_number':290,'multiline':False]['text':' append cls token','line_number':293,'multiline':False]['text':' following torch.nn.Linear','line_number':327,'multiline':False]['text':' When running on CPU, `tf.keras.layers.Conv2D` doesn't support `NCHW` format.','line_number':346,'multiline':False]['text':' So change the input format from `NCHW` to `NHWC`.','line_number':347,'multiline':False]['text':' shape = (batch_size, in_height, in_width, in_channels=num_channels)','line_number':348,'multiline':False]['text':' Change the 2D spatial dimensions to a single temporal dimension.','line_number':353,'multiline':False]['text':' shape = (batch_size, num_patches, out_channels=embed_dim)','line_number':354,'multiline':False]['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTSelfAttention with ViT->ViTMAE','line_number':369,'multiline':False]['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':398,'multiline':False]['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':401,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':419,'multiline':False]['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':420,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':425,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':428,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':429,'multiline':False]['text':' Mask heads if we want to','line_number':432,'multiline':False]['text':' (batch_size, seq_len_q, all_head_size)','line_number':439,'multiline':False]['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTSelfOutput with ViT->ViTMAE','line_number':460,'multiline':False]['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTAttention with ViT->ViTMAE','line_number':491,'multiline':False]['text':' add attentions if we output them','line_number':515,'multiline':False]['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTIntermediate with ViT->ViTMAE','line_number':531,'multiline':False]['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTOutput with ViT->ViTMAE','line_number':561,'multiline':False]['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTLayer with ViT->ViTMAE','line_number':588,'multiline':False]['text':' in ViTMAE, layernorm is applied before self-attention','line_number':615,'multiline':False]['text':' first residual connection','line_number':623,'multiline':False]['text':' in ViTMAE, layernorm is also applied after self-attention','line_number':626,'multiline':False]['text':' second residual connection is done here','line_number':631,'multiline':False]['text':' add attentions if we output them','line_number':635,'multiline':False]['text':' Copied from transformers.models.vit.modeling_tf_vit.TFViTEncoder with ViT->ViTMAE','line_number':660,'multiline':False]['text':' Add last layer','line_number':694,'multiline':False]['text':' Prepare head mask if needed','line_number':753,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':754,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':755,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':756,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':757,'multiline':False]['text':' encoder to decoder','line_number':970,'multiline':False]['text':' embed tokens','line_number':1019,'multiline':False]['text':' append mask tokens to sequence','line_number':1022,'multiline':False]['text':' no cls token','line_number':1027,'multiline':False]['text':' unshuffle','line_number':1028,'multiline':False]['text':' append cls token','line_number':1029,'multiline':False]['text':' add pos embed','line_number':1031,'multiline':False]['text':' apply Transformer layers (blocks)','line_number':1034,'multiline':False]['text':' predictor projection','line_number':1057,'multiline':False]['text':' remove cls token','line_number':1060,'multiline':False]['text':' make sure channels are last','line_number':1101,'multiline':False]['text':' sanity checks','line_number':1105,'multiline':False]['text':' patchify','line_number':1124,'multiline':False]['text':' sanity check','line_number':1150,'multiline':False]['text':' unpatchify','line_number':1157,'multiline':False]['text':' [batch_size, num_patches], mean loss per patch','line_number':1190,'multiline':False]['text':' mean loss on removed patches','line_number':1192,'multiline':False]['text':' [batch_size, num_patches, patch_size**2*3]','line_number':1247,'multiline':False]