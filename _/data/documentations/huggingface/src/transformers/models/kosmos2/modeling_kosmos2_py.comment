['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2023 Microsoft Research and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all KOSMOS-2 models at https://huggingface.co/models?filter=kosmos-2','line_number':51,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids','line_number':86,'multiline':False]['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':97,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionEmbeddings with CLIP->Kosmos2','line_number':385,'multiline':False]['text':' shape = [*, width, grid, grid]','line_number':412,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPAttention with CLIP->Kosmos2Vision','line_number':421,'multiline':False]['text':' get query proj','line_number':458,'multiline':False]['text':' apply the causal_attention_mask first','line_number':477,'multiline':False]['text':' this operation is a bit akward, but it's required to','line_number':498,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':499,'multiline':False]['text':' In order to do so, attn_weights have to reshaped','line_number':500,'multiline':False]['text':' twice and have to be reused in the following','line_number':501,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPMLP with CLIP->Kosmos2Vision','line_number':526,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPEncoderLayer with CLIP->Kosmos2Vision','line_number':542,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPEncoder with CLIP->Kosmos2Vision','line_number':593,'multiline':False]['text':' Similar to `transformers.models.clip.modeling_clip.CLIPVisionTransformer` but without docstring for `forward`','line_number':691,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionTransformer.__init__ with CLIPVision->Kosmos2Vision,CLIP_VISION->KOSMOS2_VISION,CLIP->Kosmos2Vision','line_number':693,'multiline':False]['text':' Similar to `transformers.models.m2m_100.modeling_m2m_100.M2M100SinusoidalPositionalEmbedding` but allowing to pass `position_ids`','line_number':745,'multiline':False]['text':' Copied from transformers.models.m2m_100.modeling_m2m_100.M2M100SinusoidalPositionalEmbedding.__init__','line_number':749,'multiline':False]['text':' Copied from transformers.models.m2m_100.modeling_m2m_100.M2M100SinusoidalPositionalEmbedding.make_weights','line_number':757,'multiline':False]['text':' in forward put the weights on the correct dtype and device of the param','line_number':761,'multiline':False]['text':' Copied from transformers.models.m2m_100.modeling_m2m_100.M2M100SinusoidalPositionalEmbedding.get_embedding','line_number':767,'multiline':False]['text':' zero pad','line_number':781,'multiline':False]['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':799,'multiline':False]['text':' expand embeddings if needed','line_number':808,'multiline':False]['text':' Copied from transformers.models.m2m_100.modeling_m2m_100.M2M100SinusoidalPositionalEmbedding.create_position_ids_from_inputs_embeds','line_number':815,'multiline':False]['text':' Similar to transformers.models.bart.modeling_bart.BartAttention.__init__ except an additional `inner_attn_ln`.','line_number':837,'multiline':False]['text':' End opy','line_number':867,'multiline':False]['text':' move heads to 2nd position (B, T, H * D) -> (B, T, H, D) -> (B, H, T, D)','line_number':874,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':889,'multiline':False]['text':' for the decoder','line_number':890,'multiline':False]['text':' use encoder_hidden_states if cross attention','line_number':894,'multiline':False]['text':' checking that the `sequence_length` of the `past_key_value` is the same as the he provided','line_number':896,'multiline':False]['text':' `encoder_hidden_states` to support prefix tuning','line_number':897,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':899,'multiline':False]['text':' reuse k, v, self_attention','line_number':906,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':914,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':915,'multiline':False]['text':' key/value_states (first "if" case)','line_number':916,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':917,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':918,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':919,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':920,'multiline':False]['text':' Mask heads if we want to','line_number':934,'multiline':False]['text':'  attn_output = torch.bmm(attn_probs, value_states) ?','line_number':940,'multiline':False]['text':' attn_output = attn_output.view(bsz, self.num_heads, tgt_len, self.head_dim) ?','line_number':942,'multiline':False]['text':' Self Attention','line_number':1020,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1021,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':1026,'multiline':False]['text':' Cross-Attention Block','line_number':1037,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':1051,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':1064,'multiline':False]['text':' Fully Connected','line_number':1067,'multiline':False]['text':' FFN','line_number':1072,'multiline':False]['text':' create causal mask','line_number':1116,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1117,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1128,'multiline':False]['text':' The argument `inputs_embeds` should be the one without being multiplied by `self.embed_scale`.','line_number':1147,'multiline':False]['text':' embed positions','line_number':1158,'multiline':False]['text':' past_key_values_length','line_number':1208,'multiline':False]['text':' We don't need img info. when `past_key_values_length` > 0','line_number':1211,'multiline':False]['text':' expand encoder attention mask','line_number':1229,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1231,'multiline':False]['text':' decoder layers','line_number':1243,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1249,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1259,'multiline':False]['text':' add final layer norm','line_number':1307,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':1310,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionModel.__init__ with CLIP_VISION->KOSMOS2_VISION,CLIP->Kosmos2,self.vision_model->self.model','line_number':1433,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1437,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPVisionModel.get_input_embeddings with CLIP_VISION->KOSMOS2_VISION,CLIP->Kosmos2,self.vision_model->self.model','line_number':1440,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1471,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1540,'multiline':False]['text':' move labels to correct device to enable model parallelism','line_number':1613,'multiline':False]['text':' Shift so that tokens < n predict n','line_number':1615,'multiline':False]['text':' Flatten the tokens','line_number':1619,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1649,'multiline':False]['text':' cut input_ids if past_key_values is used','line_number':1655,'multiline':False]['text':' the image info. is already encoded into the past keys/values','line_number':1664,'multiline':False]['text':' appending `False` to `image_embeds_position_mask` (because `input_ids` grows during generation)','line_number':1668,'multiline':False]['text':' Copied from transformers.models.umt5.modeling_umt5.UMT5ForConditionalGeneration._reorder_cache','line_number':1690,'multiline':False]['text':' shape = [batch, latent_query_num, h_dim]','line_number':1720,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1752,'multiline':False]['text':' The whole `last_hidden_state` through `post_layernorm` instead of just `pooled_output`.','line_number':1830,'multiline':False]['text':' normalized features','line_number':1832,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1886,'multiline':False]['text':' The whole `last_hidden_state` through `post_layernorm` instead of just `pooled_output`.','line_number':1984,'multiline':False]['text':' normalized features','line_number':1986,'multiline':False]['text':' in order to allow `inputs` argument (as in `GenerationMixin`)','line_number':2030,'multiline':False]['text':' The whole `last_hidden_state` through `post_layernorm` instead of just `pooled_output`.','line_number':2042,'multiline':False]['text':' normalized features','line_number':2044,'multiline':False]