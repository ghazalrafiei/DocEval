['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 The HuggingFace Team The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all DecisionTransformer models at https://huggingface.co/models?filter=decision_transformer','line_number':48,'multiline':False]['text':' Copied from transformers.models.gpt2.modeling_gpt2.load_tf_weights_in_gpt2','line_number':52,'multiline':False]['text':' Load weights from TF model','line_number':67,'multiline':False]['text':' skip "model/"','line_number':78,'multiline':False]['text':' Copied from transformers.models.gpt2.modeling_gpt2.GPT2Attention with GPT2->DecisionTransformerGPT2','line_number':109,'multiline':False]['text':' Layer-wise attention scaling, reordering, and upcasting','line_number':137,'multiline':False]['text':' Prune conv1d layers','line_number':160,'multiline':False]['text':' Update hyper params','line_number':164,'multiline':False]['text':' Layer-wise attention scaling','line_number':177,'multiline':False]['text':' if only "normal" attention layer implements causal mask','line_number':182,'multiline':False]['text':' Need to be a tensor, otherwise we get error: `RuntimeError: expected scalar type float but found double`.','line_number':186,'multiline':False]['text':' Need to be on the same device, otherwise `RuntimeError: ..., x and y to be on the same device`','line_number':187,'multiline':False]['text':' Apply the attention mask','line_number':192,'multiline':False]['text':' Downcast (if necessary) back to V's dtype (if in mixed-precision) -- No-Op otherwise','line_number':197,'multiline':False]['text':' Mask heads if we want to','line_number':201,'multiline':False]['text':' Use `torch.baddbmm` (a bit more efficient w/ alpha param for scaling -- from Megatron-LM)','line_number':210,'multiline':False]['text':' Preallocate attn_weights for `baddbmm`','line_number':214,'multiline':False]['text':' Compute Scale Factor','line_number':217,'multiline':False]['text':' Upcast (turn off autocast) and reorder (Scale K by 1 / root(dk))','line_number':225,'multiline':False]['text':' if only "normal" attention layer implements causal mask','line_number':232,'multiline':False]['text':' Need to be a tensor, otherwise we get error: `RuntimeError: expected scalar type float but found double`.','line_number':236,'multiline':False]['text':' Need to be on the same device, otherwise `RuntimeError: ..., x and y to be on the same device`','line_number':237,'multiline':False]['text':' Apply the attention mask','line_number':242,'multiline':False]['text':' Downcast (if necessary) back to V's dtype (if in mixed-precision) -- No-Op if otherwise','line_number':247,'multiline':False]['text':' Mask heads if we want to','line_number':253,'multiline':False]['text':' (batch, head, seq_length, head_features)','line_number':267,'multiline':False]['text':' a, present, (attentions)','line_number':328,'multiline':False]['text':' Copied from transformers.models.gpt2.modeling_gpt2.GPT2MLP with GPT2->DecisionTransformerGPT2','line_number':331,'multiline':False]['text':' Copied from transformers.models.gpt2.modeling_gpt2.GPT2Block with GPT2->DecisionTransformerGPT2','line_number':349,'multiline':False]['text':' output_attn: a, present, (attentions)','line_number':389,'multiline':False]['text':' residual connection','line_number':391,'multiline':False]['text':' add one self-attention block for cross-attention','line_number':395,'multiline':False]['text':' residual connection','line_number':412,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':414,'multiline':False]['text':' residual connection','line_number':419,'multiline':False]['text':' hidden_states, present, (attentions, cross_attentions)','line_number':427,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':448,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':449,'multiline':False]['text':' Reinitialize selected weights subject to the OpenAI GPT-2 Paper Scheme:','line_number':461,'multiline':False]['text':'   > A modified initialization which accounts for the accumulation on the residual path with model depth. Scale','line_number':462,'multiline':False]['text':'   > the weights of residual layers at initialization by a factor of 1/âˆšN where N is the # of residual layers.','line_number':463,'multiline':False]['text':'   >   -- GPT-2 :: https://openai.com/blog/better-language-models/','line_number':464,'multiline':False]['text':'','line_number':465,'multiline':False]['text':' Reference (Megatron-LM): https://github.com/NVIDIA/Megatron-LM/blob/main/megatron/model/gpt_model.py','line_number':466,'multiline':False]['text':' Special Scaled Initialization --> There are 2 Layer Norms per Transformer Block','line_number':469,'multiline':False]['text':' Model parallel','line_number':488,'multiline':False]['text':' Initialize weights and apply final processing','line_number':493,'multiline':False]['text':' Copied from transformers.models.gpt2.modeling_gpt2.GPT2Model.forward','line_number':502,'multiline':False]['text':' GPT2Attention mask.','line_number':553,'multiline':False]['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':558,'multiline':False]['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':559,'multiline':False]['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':560,'multiline':False]['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':561,'multiline':False]['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':562,'multiline':False]['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':565,'multiline':False]['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':566,'multiline':False]['text':' positions we want to attend and the dtype's smallest value for masked positions.','line_number':567,'multiline':False]['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':568,'multiline':False]['text':' effectively the same as removing these entirely.','line_number':569,'multiline':False]['text':' fp16 compatibility','line_number':570,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':573,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':574,'multiline':False]['text':' Prepare head mask if needed','line_number':584,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':585,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':586,'multiline':False]['text':' head_mask has shape n_layer x batch x n_heads x N x N','line_number':587,'multiline':False]['text':' Model parallel','line_number':615,'multiline':False]['text':' Ensure layer_past is on same device as hidden_states (might not be correct)','line_number':618,'multiline':False]['text':' Ensure that attention_mask is always on the same device as hidden_states','line_number':621,'multiline':False]['text':' Model Parallel: If it's the last layer for that device, put things on the next device','line_number':662,'multiline':False]['text':' Add last hidden state','line_number':671,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':740,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':741,'multiline':False]['text':' note: the only difference between this GPT2Model and the default Huggingface version','line_number':796,'multiline':False]['text':' is that the positional embeddings are removed (since we'll add those ourselves)','line_number':797,'multiline':False]['text':' note: we don't predict states or returns for the paper','line_number':807,'multiline':False]['text':' Initialize weights and apply final processing','line_number':814,'multiline':False]['text':' attention mask for GPT: 1 if can be attended to, 0 if not','line_number':879,'multiline':False]['text':' embed each modality with a different head','line_number':882,'multiline':False]['text':' time embeddings are treated similar to positional embeddings','line_number':888,'multiline':False]['text':' this makes the sequence look like (R_1, s_1, a_1, R_2, s_2, a_2, ...)','line_number':893,'multiline':False]['text':' which works nice in an autoregressive sense since states predict actions','line_number':894,'multiline':False]['text':' to make the attention mask fit the stacked inputs, have to stack it as well','line_number':902,'multiline':False]['text':' we feed in the input embeddings (not word indices as in NLP) to the model','line_number':909,'multiline':False]['text':' reshape x so that the second dimension corresponds to the original','line_number':920,'multiline':False]['text':' returns (0), states (1), or actions (2); i.e. x[:,1,t] is the token for s_t','line_number':921,'multiline':False]['text':' get predictions','line_number':924,'multiline':False]['text':' predict next return given state and action','line_number':925,'multiline':False]['text':' predict next state given state and action','line_number':926,'multiline':False]['text':' predict next action given state','line_number':927,'multiline':False]