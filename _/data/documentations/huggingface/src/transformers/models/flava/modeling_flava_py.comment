['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 Meta Platforms authors and The HuggingFace Team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' Codebook docstring','line_number':51,'multiline':False]['text':' See all flava models at https://huggingface.co/models?filter=flava','line_number':60,'multiline':False]['text':' Based on timm implementation, which can be found here:','line_number':244,'multiline':False]['text':' https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/image_transformer.py','line_number':245,'multiline':False]['text':' we add a small number to avoid floating point error in the interpolation','line_number':286,'multiline':False]['text':' see discussion at https://github.com/facebookresearch/dino/issues/8','line_number':287,'multiline':False]['text':' B X H X W = B X HW','line_number':315,'multiline':False]['text':' replace the masked visual tokens by mask_tokens','line_number':318,'multiline':False]['text':' add the [CLS] token to the embedded patch tokens','line_number':322,'multiline':False]['text':' add positional encoding to each token','line_number':326,'multiline':False]['text':' Based on timm implementation, which can be found here:','line_number':337,'multiline':False]['text':' https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/image_transformer.py','line_number':338,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':384,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':385,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':388,'multiline':False]['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':409,'multiline':False]['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':410,'multiline':False]['text':' issue #5664','line_number':411,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':469,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in BertModel forward() function)','line_number':474,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':477,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':479,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':482,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':483,'multiline':False]['text':' Mask heads if we want to','line_number':486,'multiline':False]['text':' Prune linear layers','line_number':533,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':539,'multiline':False]['text':' add attentions if we output them','line_number':557,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTIntermediate.forward','line_number':570,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTOutput.forward','line_number':584,'multiline':False]['text':' TODO: Check fp32 layer norm possiblity','line_number':605,'multiline':False]['text':' in ViT, layernorm is applied before self-attention','line_number':617,'multiline':False]['text':' add self attentions if we output attention weights','line_number':623,'multiline':False]['text':' first residual connection','line_number':625,'multiline':False]['text':' in ViT, layernorm is also applied after self-attention','line_number':628,'multiline':False]['text':' second residual connection is done here','line_number':632,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':698,'multiline':False]['text':' to the first token.','line_number':699,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':863,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':864,'multiline':False]['text':' This override allows us to load FlavaImageModel from FlavaModel/FlavaForPreTraining checkpoints.','line_number':883,'multiline':False]['text':' Prepare head mask if needed','line_number':942,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':943,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':944,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':945,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':946,'multiline':False]['text':' This override allows us to load FlavaTextModel from FlavaModel/FlavaForPreTraining checkpoints.','line_number':982,'multiline':False]['text':' Prepare head mask if needed','line_number':1042,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':1043,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1044,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1045,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1046,'multiline':False]['text':' This override allows us to load FlavaMultimodalModel from FlavaModel/FlavaForPreTraining checkpoints.','line_number':1087,'multiline':False]['text':' Prepare head mask if needed','line_number':1146,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':1147,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1148,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1149,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1150,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1226,'multiline':False]['text':' last_hidden_state','line_number':1268,'multiline':False]['text':' last_hidden_state','line_number':1318,'multiline':False]['text':' Note that these states don't use final layernorm in the transformer model','line_number':1393,'multiline':False]['text':' Note that these states don't use final layernorm in the transformer model','line_number':1412,'multiline':False]['text':' Inspired by DALLE Encoder in https://github.com/openai/DALL-E/blob/5be4b236bc3ade6943662354117a0e83752cc322/dall_e/encoder.py#L42','line_number':1499,'multiline':False]['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':1652,'multiline':False]['text':' `torch.distributed.nn.functional.all_gather` does backprop on all active workers','line_number':1691,'multiline':False]['text':' whereas `torch.distributed.all_gather` does only backpropagates on the current worker.','line_number':1692,'multiline':False]['text':' Those are linked to xxx.bias','line_number':1721,'multiline':False]['text':' Levarage text and image encoder configs to create the masked','line_number':1737,'multiline':False]['text':' head since it has the right vocab','line_number':1738,'multiline':False]['text':' Don't need unmasked multimodal embedding for anything so skip it','line_number':1844,'multiline':False]['text':' NOTE: ITM uses masked version','line_number':1845,'multiline':False]['text':' Pass true to have deterministic outputs','line_number':1849,'multiline':False]['text':' Calculate mim_labels if necessary from the image_codebook','line_number':1877,'multiline':False]['text':' Unimodal MIM Loss','line_number':1892,'multiline':False]['text':' If multimodal embeddings are present, we will calculate MMM loss','line_number':1893,'multiline':False]['text':' Unimodal MLM Loss','line_number':1915,'multiline':False]['text':' ITM Loss','line_number':1933,'multiline':False]['text':' MMM Image Loss','line_number':1953,'multiline':False]['text':' MMM Text Loss','line_number':1978,'multiline':False]['text':' Global Contrastive Loss','line_number':1999,'multiline':False]['text':' Apply ITM negative mask if any','line_number':2013,'multiline':False]['text':' Filter None as transformer by default won't handle it','line_number':2067,'multiline':False]