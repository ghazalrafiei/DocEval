['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2019 The Google AI Language Team Authors and The HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all ELECTRA models at https://huggingface.co/models?filter=electra','line_number':74,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfAttention with Bert->Electra','line_number':78,'multiline':False]['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':109,'multiline':False]['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':112,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':129,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':130,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':131,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':135,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':155,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':156,'multiline':False]['text':' key/value_states (first "if" case)','line_number':157,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':158,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':159,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':160,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':161,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':164,'multiline':False]['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':165,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in TFElectraModel call() function)','line_number':171,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':174,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':177,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':178,'multiline':False]['text':' Mask heads if we want to','line_number':181,'multiline':False]['text':' (batch_size, seq_len_q, all_head_size)','line_number':188,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfOutput with Bert->Electra','line_number':211,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertAttention with Bert->Electra','line_number':242,'multiline':False]['text':' add attentions (possibly with past_key_value) if we output them','line_number':277,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertIntermediate with Bert->Electra','line_number':294,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertOutput with Bert->Electra','line_number':324,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLayer with Bert->Electra','line_number':355,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':381,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':395,'multiline':False]['text':' add self attentions if we output attention weights','line_number':400,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':410,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':423,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':425,'multiline':False]['text':' add attentions if we output them','line_number':433,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':435,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertEncoder with Bert->Electra','line_number':459,'multiline':False]['text':' Add last layer','line_number':511,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->Electra','line_number':538,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':552,'multiline':False]['text':' to the first token.','line_number':553,'multiline':False]['text':' Copied from transformers.models.albert.modeling_tf_albert.TFAlbertEmbeddings with Albert->Electra','line_number':568,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertEmbeddings.call','line_number':611,'multiline':False]['text':' When the model is loaded from a PT model','line_number':715,'multiline':False]['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':757,'multiline':False]['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':758,'multiline':False]['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':759,'multiline':False]['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':760,'multiline':False]['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':761,'multiline':False]['text':' Copied from `modeling_tf_t5.py`','line_number':765,'multiline':False]['text':' Provided a padding mask of dimensions [batch_size, mask_seq_length]','line_number':766,'multiline':False]['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':767,'multiline':False]['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':768,'multiline':False]['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':788,'multiline':False]['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':789,'multiline':False]['text':' positions we want to attend and -10000.0 for masked positions.','line_number':790,'multiline':False]['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':791,'multiline':False]['text':' effectively the same as removing these entirely.','line_number':792,'multiline':False]['text':' Copied from `modeling_tf_t5.py` with -1e9 -> -10000','line_number':864,'multiline':False]['text':' If a 2D ou 3D attention mask is provided for the cross-attention','line_number':866,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':867,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':868,'multiline':False]['text':' T5 has a mask that can compare sequence ids, we can simulate this here with this transposition','line_number':876,'multiline':False]['text':' Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270','line_number':877,'multiline':False]['text':' encoder_extended_attention_mask = tf.math.equal(encoder_extended_attention_mask,','line_number':878,'multiline':False]['text':'                                         tf.transpose(encoder_extended_attention_mask, perm=(-1, -2)))','line_number':879,'multiline':False]['text':' take <s> token (equiv. to [CLS])','line_number':1371,'multiline':False]['text':' although BERT uses tanh here, it seems Electra authors used gelu here','line_number':1374,'multiline':False]