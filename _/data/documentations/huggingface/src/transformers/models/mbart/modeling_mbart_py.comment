['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021, The Facebook AI Research Team and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' noqa','line_number':53,'multiline':False]['text':' Base model docstring','line_number':61,'multiline':False]['text':' See all MBART models at https://huggingface.co/models?filter=mbart','line_number':66,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama._get_unpad_data','line_number':70,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':92,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartLearnedPositionalEmbedding with Bart->MBart','line_number':103,'multiline':False]['text':' MBart is set up so that if padding_idx is specified then offset the embedding ids by 2','line_number':110,'multiline':False]['text':' and adjust num_embeddings appropriately. Other models don't have this hack','line_number':111,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->MBart','line_number':126,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':175,'multiline':False]['text':' for the decoder','line_number':176,'multiline':False]['text':' get query proj','line_number':181,'multiline':False]['text':' get key, value proj','line_number':183,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':184,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':185,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':186,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':192,'multiline':False]['text':' cross_attentions','line_number':196,'multiline':False]['text':' reuse k, v, self_attention','line_number':200,'multiline':False]['text':' self_attention','line_number':206,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':211,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':212,'multiline':False]['text':' key/value_states (first "if" case)','line_number':213,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':214,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':215,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':216,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':217,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':254,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':255,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':256,'multiline':False]['text':' twice and have to be reused in the following','line_number':257,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':276,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':277,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartFlashAttention2 with Bart->MBart','line_number':285,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2.__init__','line_number':293,'multiline':False]['text':' TODO: Should be removed once Flash Attention for RoCm is bumped to 2.1.','line_number':297,'multiline':False]['text':' flash_attn<2.1 generates top-left aligned causal mask, while what is needed here is bottom-right alignement, that was made default for flash_attn>=2.1. This attribute is used to handle this difference. Reference: https://github.com/Dao-AILab/flash-attention/releases/tag/v2.1.0.','line_number':298,'multiline':False]['text':' Beware that with flash_attn<2.1, using q_seqlen != k_seqlen (except for the case q_seqlen == 1) produces a wrong mask (top-left).','line_number':299,'multiline':False]['text':' MBartFlashAttention2 attention does not support output_attentions','line_number':314,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':318,'multiline':False]['text':' for the decoder','line_number':319,'multiline':False]['text':' get query proj','line_number':324,'multiline':False]['text':' get key, value proj','line_number':326,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':327,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':328,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':329,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':335,'multiline':False]['text':' cross_attentions','line_number':339,'multiline':False]['text':' reuse k, v, self_attention','line_number':343,'multiline':False]['text':' self_attention','line_number':349,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':354,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':355,'multiline':False]['text':' key/value_states (first "if" case)','line_number':356,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':357,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':358,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':359,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':360,'multiline':False]['text':' In PEFT, usually we cast the layer norms in float32 for training stability reasons','line_number':367,'multiline':False]['text':' therefore the input hidden states gets silently casted in float32. Hence, we need','line_number':368,'multiline':False]['text':' cast them back in the correct dtype just to be sure everything works as expected.','line_number':369,'multiline':False]['text':' This might slowdown training & inference so it is recommended to not cast the LayerNorms','line_number':370,'multiline':False]['text':' in fp32. (LlamaRMSNorm handles it correctly)','line_number':371,'multiline':False]['text':' Handle the case where the model is quantized','line_number':375,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2._flash_attention_forward','line_number':403,'multiline':False]['text':' TODO: Remove the `query_length != 1` check once Flash Attention for RoCm is bumped to 2.1. For details, please see the comment in LlamaFlashAttention2 __init__.','line_number':429,'multiline':False]['text':' Contains at least one padding token in the sequence','line_number':432,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2._upad_input','line_number':463,'multiline':False]['text':' There is a memcpy here, that is very bad.','line_number':485,'multiline':False]['text':' The -q_len: slice assumes left padding.','line_number':489,'multiline':False]['text':' Self Attention','line_number':642,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':643,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':645,'multiline':False]['text':' Cross-Attention Block','line_number':656,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':663,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':676,'multiline':False]['text':' Fully Connected','line_number':679,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartClassificationHead with Bart->MBart','line_number':699,'multiline':False]['text':' Initialize weights and apply final processing','line_number':941,'multiline':False]['text':' Override to not delete the attribute from the config','line_number':945,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1001,'multiline':False]['text':' expand attention_mask','line_number':1022,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1024,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1028,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':1034,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1044,'multiline':False]['text':' skip the layer','line_number':1048,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1119,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1215,'multiline':False]['text':' past_key_values_length','line_number':1228,'multiline':False]['text':' 2d mask is passed through the layers','line_number':1235,'multiline':False]['text':' 4d mask is passed through the layers','line_number':1238,'multiline':False]['text':' expand encoder attention mask','line_number':1243,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1248,'multiline':False]['text':' embed positions','line_number':1253,'multiline':False]['text':' decoder layers','line_number':1268,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1274,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1283,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':1333,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1369,'multiline':False]['text':' different to other models, MBart automatically creates decoder_input_ids from','line_number':1423,'multiline':False]['text':' input_ids if no decoder_input_ids are provided','line_number':1424,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':1438,'multiline':False]['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':1446,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1492,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':1613,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1617,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1621,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':1627,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':1635,'multiline':False]['text':' cached cross_attention states don't have to be reordered -> they are always the same','line_number':1645,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1673,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForSequenceClassification.forward','line_number':1682,'multiline':False]['text':' last hidden state','line_number':1731,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1801,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForQuestionAnswering.forward','line_number':1810,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':1870,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1875,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartDecoderWrapper with Bart->MBart','line_number':1906,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForCausalLM with Bart->MBart, facebook/bart-base->facebook/mbart-large-cc25','line_number':1921,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1934,'multiline':False]['text':' decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)','line_number':2063,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':2103,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':2110,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':2114,'multiline':False]['text':' first step, decoder_cached_states are empty','line_number':2118,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':2120,'multiline':False]