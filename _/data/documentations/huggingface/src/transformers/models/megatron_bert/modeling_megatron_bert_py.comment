['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2018 The Google AI Language Team Authors and The HuggingFace Inc. team.','line_number':2,'multiline':False]['text':' Copyright (c) 2018-2021, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' See all MegatronBERT models at https://huggingface.co/models?filter=megatron_bert','line_number':62,'multiline':False]['text':' Load weights from TF model','line_number':81,'multiline':False]['text':' adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v','line_number':93,'multiline':False]['text':' which are not required for using pretrained model','line_number':94,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':144,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':145,'multiline':False]['text':' In Megatron, layer-norm is applied after the 1st dropout.','line_number':147,'multiline':False]['text':' self.LayerNorm = nn.LayerNorm(config.hidden_size, eps=config.layer_norm_eps)','line_number':148,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':151,'multiline':False]['text':' Megatron BERT moves that layer norm after the drop-out (and to each layer).','line_number':187,'multiline':False]['text':' embeddings = self.LayerNorm(embeddings)','line_number':188,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->MegatronBert','line_number':193,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':238,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':239,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':240,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':244,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':265,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':266,'multiline':False]['text':' key/value_states (first "if" case)','line_number':267,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':268,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':269,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':270,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':271,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':274,'multiline':False]['text':' fp16 compatibility','line_number':289,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in MegatronBertModel forward() function)','line_number':301,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':304,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':307,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':308,'multiline':False]['text':' Mask heads if we want to','line_number':311,'multiline':False]['text':' Based transformers.models.bert.modeling_bert.BertSelfOutput. Moved LayerNorm to MegatronBertAttention below.','line_number':328,'multiline':False]['text':' Based transformers.models.bert.modeling_bert.BertAttention. Added LayerNorm.','line_number':341,'multiline':False]['text':' Prune linear layers','line_number':357,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':363,'multiline':False]['text':' add attentions if we output them','line_number':389,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert->MegatronBert','line_number':393,'multiline':False]['text':' Based on transformers.models.bert.modeling_bert.BertOutput. Moved LayerNorm to MegatronBertLayer below.','line_number':409,'multiline':False]['text':' Based on transformers.models.bert.modeling_bert.BertLayer. Added LayerNorm.','line_number':422,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':449,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':460,'multiline':False]['text':' add self attentions if we output attention weights','line_number':465,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':475,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':487,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':489,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':498,'multiline':False]['text':' The final layer norm. We removed the 1st LN, moved LN to each hidden layer and this one','line_number':517,'multiline':False]['text':' is simply the final LN (Transformer's BERT has it attached to each hidden layer).','line_number':518,'multiline':False]['text':' Because we moved the layer-norm at the end of the hidden layer, we have non-normali-','line_number':575,'multiline':False]['text':' zed data here. If that's really needed, we must apply LN to match Transformer's BERT.','line_number':576,'multiline':False]['text':' Finalize the hidden states.','line_number':586,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->MegatronBert','line_number':613,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':621,'multiline':False]['text':' to the first token.','line_number':622,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->MegatronBert','line_number':629,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->MegatronBert','line_number':647,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':653,'multiline':False]['text':' an output-only bias for each token.','line_number':654,'multiline':False]['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':659,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->MegatronBert','line_number':668,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyNSPHead with Bert->MegatronBert','line_number':679,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainingHeads with Bert->MegatronBert','line_number':690,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':717,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':718,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForPreTrainingOutput with Bert->MegatronBert','line_number':728,'multiline':False]['text':' Initialize weights and apply final processing','line_number':854,'multiline':False]['text':' past_key_values_length','line_number':937,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':945,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':946,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':949,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':950,'multiline':False]['text':' Prepare head mask if needed','line_number':960,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':961,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':962,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':963,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':964,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1018,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1127,'multiline':False]['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':1220,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1241,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':1245,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1249,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1253,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1285,'multiline':False]['text':' -100 index = padding token','line_number':1343,'multiline':False]['text':'  add a dummy token','line_number':1361,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1384,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1490,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1586,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1680,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1757,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':1813,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1818,'multiline':False]