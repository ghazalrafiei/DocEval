['text':'###################################################################################################','line_number':1,'multiline':False]['text':' Copyright (c) 2021-, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':'###################################################################################################','line_number':17,'multiline':False]['text':'','line_number':19,'multiline':False]['text':' Note: If when running this conversion script you're getting an exception:','line_number':20,'multiline':False]['text':'     ModuleNotFoundError: No module named 'megatron.model.enums'','line_number':21,'multiline':False]['text':' you need to tell python where to find the clone of Megatron-LM, e.g.:','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' cd /tmp','line_number':24,'multiline':False]['text':' git clone https://github.com/NVIDIA/Megatron-LM','line_number':25,'multiline':False]['text':' PYTHONPATH=/tmp/Megatron-LM python src/transformers/models/megatron_bert/convert_megatron_bert_checkpoint.py ...','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':' if you already have it cloned elsewhere, simply adjust the path to the existing path','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':' If the training was done using a Megatron-LM fork, e.g.,','line_number':30,'multiline':False]['text':' https://github.com/microsoft/Megatron-DeepSpeed/ then chances are that you need to have that one','line_number':31,'multiline':False]['text':' in your path, i.e., /path/to/Megatron-DeepSpeed/','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':'###################################################################################################','line_number':45,'multiline':False]['text':' Format the message.','line_number':49,'multiline':False]['text':' Print and recurse (if needed).','line_number':56,'multiline':False]['text':' Permutes layout of param tensor to [num_splits * num_heads * hidden_size, :]','line_number':69,'multiline':False]['text':' for compatibility with later versions of NVIDIA Megatron-LM.','line_number':70,'multiline':False]['text':' The inverse operation is performed inside Megatron-LM to read checkpoints:','line_number':71,'multiline':False]['text':' https://github.com/NVIDIA/Megatron-LM/blob/v2.4/megatron/checkpointing.py#L209','line_number':72,'multiline':False]['text':' If param is the weight tensor of the self-attention block, the returned tensor','line_number':73,'multiline':False]['text':' will have to be transposed one more time to be read by HuggingFace BERT.','line_number':74,'multiline':False]['text':' version 1.0 stores [num_heads * hidden_size * num_splits, :]','line_number':77,'multiline':False]['text':' other versions store [num_heads * num_splits * hidden_size, :]','line_number':83,'multiline':False]['text':'###################################################################################################','line_number':91,'multiline':False]['text':' The converted output model.','line_number':95,'multiline':False]['text':' old versions did not store training args','line_number':98,'multiline':False]['text':' do not make the user write a config file when the exact dimensions/sizes are already in the checkpoint','line_number':101,'multiline':False]['text':' from pprint import pprint','line_number':102,'multiline':False]['text':' pprint(vars(ds_args))','line_number':103,'multiline':False]['text':' pprint(config)','line_number':112,'multiline':False]['text':' The number of heads.','line_number':114,'multiline':False]['text':' The hidden_size per head.','line_number':116,'multiline':False]['text':' Megatron-LM checkpoint version','line_number':118,'multiline':False]['text':' The model.','line_number':124,'multiline':False]['text':' The language model.','line_number':126,'multiline':False]['text':' The embeddings.','line_number':128,'multiline':False]['text':' The word embeddings.','line_number':131,'multiline':False]['text':' Truncate the embedding table to vocab_size rows.','line_number':133,'multiline':False]['text':' Store the word embeddings.','line_number':135,'multiline':False]['text':' The position embeddings.','line_number':138,'multiline':False]['text':' Store the position embeddings.','line_number':141,'multiline':False]['text':' The token-type embeddings.','line_number':144,'multiline':False]['text':' Store the position embeddings.','line_number':146,'multiline':False]['text':' The transformer.','line_number':149,'multiline':False]['text':' The regex to extract layer names.','line_number':152,'multiline':False]['text':' The simple map of names for "automated" rules.','line_number':155,'multiline':False]['text':' Keep track of the attention/query/value tensor.','line_number':163,'multiline':False]['text':' Extract the layers.','line_number':166,'multiline':False]['text':' Match the name.','line_number':168,'multiline':False]['text':' Stop if that's not a layer','line_number':171,'multiline':False]['text':' The index of the layer.','line_number':175,'multiline':False]['text':' The name of the operation.','line_number':177,'multiline':False]['text':' Is it a weight or a bias?','line_number':179,'multiline':False]['text':' The name of the layer.','line_number':182,'multiline':False]['text':' For layernorm(s), simply store the layer norm.','line_number':185,'multiline':False]['text':' Transpose the QKV matrix.','line_number':190,'multiline':False]['text':' Make sure the QKV pointer is nil.','line_number':194,'multiline':False]['text':' Store the tensor as we need the bias as well to interleave QKV and biases.','line_number':198,'multiline':False]['text':' Transpose the bias.','line_number':201,'multiline':False]['text':' Make sure we read the weight tensor.','line_number':205,'multiline':False]['text':' Split the QKV matrix into Q, K and V. Megatron stores Q,K,V interleaved.','line_number':208,'multiline':False]['text':' Split the bias.','line_number':214,'multiline':False]['text':' Store.','line_number':219,'multiline':False]['text':' Clear the stored tensor.','line_number':227,'multiline':False]['text':' Copy weights and biases as is.','line_number':230,'multiline':False]['text':' The final layernorm.','line_number':235,'multiline':False]['text':' The pooler.','line_number':239,'multiline':False]['text':' Store the matrix and the bias.','line_number':242,'multiline':False]['text':' The LM head from Megatron (for RACE).','line_number':246,'multiline':False]['text':' The transform matrix.','line_number':249,'multiline':False]['text':' The transform LN.','line_number':253,'multiline':False]['text':' For the decoder, we replicate the weights.','line_number':257,'multiline':False]['text':' The classifier from Megatron (for MLNI).','line_number':261,'multiline':False]['text':' Store the classifier.','line_number':264,'multiline':False]['text':' It should be done!','line_number':268,'multiline':False]['text':'###################################################################################################','line_number':272,'multiline':False]['text':' Create the argument parser.','line_number':276,'multiline':False]['text':' Extract the basename.','line_number':288,'multiline':False]['text':' Load the model.','line_number':291,'multiline':False]['text':' the .zip is very optional, let's keep it for backward compatibility','line_number':292,'multiline':False]['text':' Default config of megatron-bert 345m','line_number':302,'multiline':False]['text':' different megatron-bert-*-345m models have different vocab sizes, so override the default','line_number':305,'multiline':False]['text':' config (which is for megatron-bert-cased-345m) with the actual vocab dimension','line_number':306,'multiline':False]['text':' Convert.','line_number':311,'multiline':False]['text':' Print the structure of converted state dict.','line_number':315,'multiline':False]['text':' Store the config to file.','line_number':319,'multiline':False]['text':' Store the state_dict to file.','line_number':323,'multiline':False]['text':'###################################################################################################','line_number':329,'multiline':False]['text':'###################################################################################################','line_number':334,'multiline':False]