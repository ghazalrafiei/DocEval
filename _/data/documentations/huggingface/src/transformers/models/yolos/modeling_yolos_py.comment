['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 School of EIC, Huazhong University of Science & Technology and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' General docstring','line_number':54,'multiline':False]['text':' Base docstring','line_number':57,'multiline':False]['text':' See all YOLOS models at https://huggingface.co/models?filter=yolos','line_number':64,'multiline':False]['text':' add the [CLS] and detection tokens to the embedded patch tokens','line_number':140,'multiline':False]['text':' add positional encoding to each token','line_number':145,'multiline':False]['text':' this might require interpolation of the existing position embeddings','line_number':146,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTSelfAttention with ViT->Yolos','line_number':251,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':285,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':290,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':293,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':294,'multiline':False]['text':' Mask heads if we want to','line_number':297,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTSelfOutput with ViT->Yolos','line_number':312,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTAttention with ViT->Yolos','line_number':331,'multiline':False]['text':' Prune linear layers','line_number':346,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':352,'multiline':False]['text':' add attentions if we output them','line_number':367,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTIntermediate with ViT->Yolos','line_number':371,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTOutput with ViT->Yolos','line_number':388,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTLayer with ViT->Yolos','line_number':404,'multiline':False]['text':' in Yolos, layernorm is applied before self-attention','line_number':425,'multiline':False]['text':' add self attentions if we output attention weights','line_number':430,'multiline':False]['text':' first residual connection','line_number':432,'multiline':False]['text':' in Yolos, layernorm is also applied after self-attention','line_number':435,'multiline':False]['text':' second residual connection is done here','line_number':439,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':539,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':540,'multiline':False]['text':' Initialize weights and apply final processing','line_number':598,'multiline':False]['text':' Prepare head mask if needed','line_number':640,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':641,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':642,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':643,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':644,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':681,'multiline':False]['text':' to the first token.','line_number':682,'multiline':False]['text':' YOLOS (ViT) encoder model','line_number':699,'multiline':False]['text':' Object detection heads','line_number':702,'multiline':False]['text':' We add one for the "no object" class','line_number':703,'multiline':False]['text':' Initialize weights and apply final processing','line_number':711,'multiline':False]['text':' taken from https://github.com/facebookresearch/detr/blob/master/models/detr.py','line_number':714,'multiline':False]['text':' this is a workaround to make torchscript happy, as torchscript','line_number':717,'multiline':False]['text':' doesn't support dictionary with non-homogeneous values, such','line_number':718,'multiline':False]['text':' as a dict having both a Tensor and a list.','line_number':719,'multiline':False]['text':' First, sent images through YOLOS base model to obtain hidden states','line_number':779,'multiline':False]['text':' Take the final hidden states of the detection tokens','line_number':789,'multiline':False]['text':' Class logits + predicted bounding boxes','line_number':792,'multiline':False]['text':' First: create the matcher','line_number':798,'multiline':False]['text':' Second: create the criterion','line_number':802,'multiline':False]['text':' Third: compute the losses, based on outputs and labels','line_number':811,'multiline':False]['text':' Fourth: compute total loss, as a weighted sum of the various losses','line_number':823,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.dice_loss','line_number':852,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.sigmoid_focal_loss','line_number':872,'multiline':False]['text':' add modulating factor','line_number':893,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.DetrLoss with Detr->Yolos','line_number':904,'multiline':False]['text':' removed logging parameter, which was part of the original implementation','line_number':940,'multiline':False]['text':' Count the number of predictions that are NOT "no-object" (which is the last class)','line_number':972,'multiline':False]['text':' TODO use valid to mask invalid areas due to padding in loss','line_number':1016,'multiline':False]['text':' upsample predictions to the target size','line_number':1021,'multiline':False]['text':' permute predictions following indices','line_number':1036,'multiline':False]['text':' permute targets following indices','line_number':1042,'multiline':False]['text':' Retrieve the matching between the outputs of the last layer and the targets','line_number':1071,'multiline':False]['text':' Compute the average number of target boxes across all nodes, for normalization purposes','line_number':1074,'multiline':False]['text':' (Niels): comment out function below, distributed training to be added','line_number':1077,'multiline':False]['text':' if is_dist_avail_and_initialized():','line_number':1078,'multiline':False]['text':'     torch.distributed.all_reduce(num_boxes)','line_number':1079,'multiline':False]['text':' (Niels) in original implementation, num_boxes is divided by get_world_size()','line_number':1080,'multiline':False]['text':' Compute all the requested losses','line_number':1083,'multiline':False]['text':' In case of auxiliary losses, we repeat this process with the output of each intermediate layer.','line_number':1088,'multiline':False]['text':' Intermediate masks losses are too costly to compute, we ignore them.','line_number':1094,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.DetrMLPPredictionHead with Detr->Yolos','line_number':1103,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.DetrHungarianMatcher with Detr->Yolos','line_number':1125,'multiline':False]['text':' We flatten to compute the cost matrices in a batch','line_number':1176,'multiline':False]['text':' [batch_size * num_queries, num_classes]','line_number':1177,'multiline':False]['text':' [batch_size * num_queries, 4]','line_number':1178,'multiline':False]['text':' Also concat the target labels and boxes','line_number':1180,'multiline':False]['text':' Compute the classification cost. Contrary to the loss, we don't use the NLL,','line_number':1184,'multiline':False]['text':' but approximate it in 1 - proba[target class].','line_number':1185,'multiline':False]['text':' The 1 is a constant that doesn't change the matching, it can be ommitted.','line_number':1186,'multiline':False]['text':' Compute the L1 cost between boxes','line_number':1189,'multiline':False]['text':' Compute the giou cost between boxes','line_number':1192,'multiline':False]['text':' Final cost matrix','line_number':1195,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr._upcast','line_number':1204,'multiline':False]['text':' Protects from numerical overflows in multiplications by upcasting to the equivalent higher type','line_number':1206,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.box_area','line_number':1213,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.box_iou','line_number':1230,'multiline':False]['text':' [N,M,2]','line_number':1235,'multiline':False]['text':' [N,M,2]','line_number':1236,'multiline':False]['text':' [N,M,2]','line_number':1238,'multiline':False]['text':' [N,M]','line_number':1239,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.generalized_box_iou','line_number':1247,'multiline':False]['text':' degenerate boxes gives inf / nan results','line_number':1255,'multiline':False]['text':' so do an early check','line_number':1256,'multiline':False]['text':' [N,M,2]','line_number':1266,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr._max_by_axis','line_number':1272,'multiline':False]['text':' type: (List[List[int]]) -> List[int]','line_number':1274,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.NestedTensor','line_number':1282,'multiline':False]['text':' Copied from transformers.models.detr.modeling_detr.nested_tensor_from_tensor_list','line_number':1304,'multiline':False]