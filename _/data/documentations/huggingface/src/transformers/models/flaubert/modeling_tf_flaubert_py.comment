['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2019-present, Facebook, Inc and the HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all Flaubert models at https://huggingface.co/models?filter=flaubert','line_number':70,'multiline':False]['text':' assert lengths.max().item() <= slen','line_number':198,'multiline':False]['text':' attention mask is the same as mask, or triangular inferior attention (causal)','line_number':202,'multiline':False]['text':' sanity check','line_number':210,'multiline':False]['text':' assert shape_list(mask) == [bs, slen]','line_number':211,'multiline':False]['text':' Sometimes Flaubert has language embeddings so don't forget to build them as well if needed','line_number':230,'multiline':False]['text':' Copied from transformers.models.xlm.modeling_tf_xlm.TFXLMMultiHeadAttention with XLM->Flaubert','line_number':302,'multiline':False]['text':' Input is (bs, qlen, dim)','line_number':329,'multiline':False]['text':' Mask is (bs, klen) (non-causal) or (bs, klen, klen)','line_number':330,'multiline':False]['text':' assert dim == self.dim, f'Dimensions do not match: {dim} input vs {self.dim} configured'','line_number':338,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':350,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':353,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':354,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':357,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':358,'multiline':False]['text':' (bs, n_heads, klen, dim_per_head)','line_number':364,'multiline':False]['text':' (bs, n_heads, klen, dim_per_head)','line_number':365,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':372,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':374,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':375,'multiline':False]['text':' scores.masked_fill_(mask, -float('inf'))                            # (bs, n_heads, qlen, klen)','line_number':376,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':379,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':380,'multiline':False]['text':' Mask heads if we want to','line_number':382,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':386,'multiline':False]['text':' (bs, qlen, dim)','line_number':387,'multiline':False]['text':' Copied from transformers.models.xlm.modeling_tf_xlm.TFXLMTransformerFFN','line_number':413,'multiline':False]['text':' if self.is_decoder:','line_number':486,'multiline':False]['text':'     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))','line_number':487,'multiline':False]['text':'     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))','line_number':488,'multiline':False]['text':' removed: src_enc=None, src_len=None','line_number':558,'multiline':False]['text':' mask = input_ids != self.pad_index','line_number':576,'multiline':False]['text':' check inputs','line_number':578,'multiline':False]['text':' assert shape_list(lengths)[0] == bs','line_number':579,'multiline':False]['text':' assert lengths.max().item() <= slen','line_number':584,'multiline':False]['text':' input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0','line_number':585,'multiline':False]['text':' assert (src_enc is None) == (src_len is None)','line_number':586,'multiline':False]['text':' if src_enc is not None:','line_number':587,'multiline':False]['text':'     assert self.is_decoder','line_number':588,'multiline':False]['text':'     assert src_enc.size(0) == bs','line_number':589,'multiline':False]['text':' generate masks','line_number':591,'multiline':False]['text':' if self.is_decoder and src_enc is not None:','line_number':593,'multiline':False]['text':'     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]','line_number':594,'multiline':False]['text':' position_ids','line_number':596,'multiline':False]['text':' assert shape_list(position_ids) == [bs, slen]  # (slen, bs)','line_number':601,'multiline':False]['text':' position_ids = position_ids.transpose(0, 1)','line_number':606,'multiline':False]['text':' langs','line_number':608,'multiline':False]['text':' assert shape_list(langs) == [bs, slen]  # (slen, bs)','line_number':610,'multiline':False]['text':' langs = langs.transpose(0, 1)','line_number':615,'multiline':False]['text':' Prepare head mask if needed','line_number':617,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':618,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':619,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':620,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x qlen x klen]','line_number':621,'multiline':False]['text':' do not recompute cached elements','line_number':627,'multiline':False]['text':' embeddings','line_number':637,'multiline':False]['text':' hidden_states and attentions cannot be None in graph mode.','line_number':654,'multiline':False]['text':' transformer layers','line_number':658,'multiline':False]['text':' LayerDrop','line_number':660,'multiline':False]['text':' self attention','line_number':669,'multiline':False]['text':' encoder attention (for decoder only)','line_number':707,'multiline':False]['text':' if self.is_decoder and src_enc is not None:','line_number':708,'multiline':False]['text':'     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)','line_number':709,'multiline':False]['text':'     attn = nn.functional.dropout(attn, p=self.dropout, training=self.training)','line_number':710,'multiline':False]['text':'     tensor = tensor + attn','line_number':711,'multiline':False]['text':'     tensor = self.layer_norm15[i](tensor)','line_number':712,'multiline':False]['text':' FFN','line_number':714,'multiline':False]['text':' Add last hidden state','line_number':724,'multiline':False]['text':' update cache length','line_number':728,'multiline':False]['text':' move back sequence length to dimension 0','line_number':732,'multiline':False]['text':' tensor = tensor.transpose(0, 1)','line_number':733,'multiline':False]['text':' Copied from transformers.models.xlm.modeling_tf_xlm.TFXLMPredLayer','line_number':741,'multiline':False]['text':' self.proj = nn.AdaptiveLogSoftmaxWithLoss(','line_number':758,'multiline':False]['text':'     in_features=dim,','line_number':759,'multiline':False]['text':'     n_classes=config.n_words,','line_number':760,'multiline':False]['text':'     cutoffs=config.asm_cutoffs,','line_number':761,'multiline':False]['text':'     div_value=config.asm_div_value,','line_number':762,'multiline':False]['text':'     head_bias=True,  # default is False','line_number':763,'multiline':False]['text':' )','line_number':764,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is an output-only bias for each token.','line_number':767,'multiline':False]['text':' Flaubert does not have past caching features','line_number':831,'multiline':False]['text':' Copied from transformers.models.xlm.modeling_tf_xlm.TFXLMForSequenceClassification with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':922,'multiline':False]['text':' Copied from transformers.models.xlm.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':1012,'multiline':False]['text':' Copied from transformers.models.xlm.modeling_tf_xlm.TFXLMForTokenClassification with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':1116,'multiline':False]['text':' Copied from transformers.models.xlm.modeling_tf_xlm.TFXLMForMultipleChoice with XLM_INPUTS->FLAUBERT_INPUTS,XLM->Flaubert','line_number':1209,'multiline':False]['text':' Sometimes Flaubert has language embeddings so don't forget to build them as well if needed','line_number':1229,'multiline':False]