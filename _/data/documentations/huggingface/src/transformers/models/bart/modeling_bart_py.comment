['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021 The Fairseq Authors and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' noqa','line_number':59,'multiline':False]['text':' Base model docstring','line_number':67,'multiline':False]['text':' SequenceClassification docstring','line_number':70,'multiline':False]['text':' QuestionAsnwering docstring','line_number':75,'multiline':False]['text':' see all BART models at https://huggingface.co/models?filter=bart','line_number':83,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama._get_unpad_data','line_number':87,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':110,'multiline':False]['text':' Bart is set up so that if padding_idx is specified then offset the embedding ids by 2','line_number':122,'multiline':False]['text':' and adjust num_embeddings appropriately. Other models don't have this hack','line_number':123,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':186,'multiline':False]['text':' for the decoder','line_number':187,'multiline':False]['text':' get query proj','line_number':192,'multiline':False]['text':' get key, value proj','line_number':194,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':195,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':196,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':197,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':203,'multiline':False]['text':' cross_attentions','line_number':207,'multiline':False]['text':' reuse k, v, self_attention','line_number':211,'multiline':False]['text':' self_attention','line_number':217,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':222,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':223,'multiline':False]['text':' key/value_states (first "if" case)','line_number':224,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':225,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':226,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':227,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':228,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':265,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':266,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':267,'multiline':False]['text':' twice and have to be reused in the following','line_number':268,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':287,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':288,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2.__init__','line_number':303,'multiline':False]['text':' TODO: Should be removed once Flash Attention for RoCm is bumped to 2.1.','line_number':307,'multiline':False]['text':' flash_attn<2.1 generates top-left aligned causal mask, while what is needed here is bottom-right alignement, that was made default for flash_attn>=2.1. This attribute is used to handle this difference. Reference: https://github.com/Dao-AILab/flash-attention/releases/tag/v2.1.0.','line_number':308,'multiline':False]['text':' Beware that with flash_attn<2.1, using q_seqlen != k_seqlen (except for the case q_seqlen == 1) produces a wrong mask (top-left).','line_number':309,'multiline':False]['text':' BartFlashAttention2 attention does not support output_attentions','line_number':324,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':328,'multiline':False]['text':' for the decoder','line_number':329,'multiline':False]['text':' get query proj','line_number':334,'multiline':False]['text':' get key, value proj','line_number':336,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':337,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':338,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':339,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':345,'multiline':False]['text':' cross_attentions','line_number':349,'multiline':False]['text':' reuse k, v, self_attention','line_number':353,'multiline':False]['text':' self_attention','line_number':359,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':364,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':365,'multiline':False]['text':' key/value_states (first "if" case)','line_number':366,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':367,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':368,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':369,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':370,'multiline':False]['text':' In PEFT, usually we cast the layer norms in float32 for training stability reasons','line_number':377,'multiline':False]['text':' therefore the input hidden states gets silently casted in float32. Hence, we need','line_number':378,'multiline':False]['text':' cast them back in the correct dtype just to be sure everything works as expected.','line_number':379,'multiline':False]['text':' This might slowdown training & inference so it is recommended to not cast the LayerNorms','line_number':380,'multiline':False]['text':' in fp32. (LlamaRMSNorm handles it correctly)','line_number':381,'multiline':False]['text':' Handle the case where the model is quantized','line_number':385,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2._flash_attention_forward','line_number':413,'multiline':False]['text':' TODO: Remove the `query_length != 1` check once Flash Attention for RoCm is bumped to 2.1. For details, please see the comment in LlamaFlashAttention2 __init__.','line_number':439,'multiline':False]['text':' Contains at least one padding token in the sequence','line_number':442,'multiline':False]['text':' Copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2._upad_input','line_number':473,'multiline':False]['text':' There is a memcpy here, that is very bad.','line_number':495,'multiline':False]['text':' The -q_len: slice assumes left padding.','line_number':499,'multiline':False]['text':' TODO: Improve this warning with e.g. `model.config._attn_implementation = "manual"` once this is implemented.','line_number':525,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':539,'multiline':False]['text':' for the decoder','line_number':540,'multiline':False]['text':' get query proj','line_number':545,'multiline':False]['text':' get key, value proj','line_number':547,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':548,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':549,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':550,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':556,'multiline':False]['text':' cross_attentions','line_number':560,'multiline':False]['text':' reuse k, v, self_attention','line_number':564,'multiline':False]['text':' self_attention','line_number':570,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':575,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':576,'multiline':False]['text':' key/value_states (first "if" case)','line_number':577,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':578,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':579,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':580,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':581,'multiline':False]['text':' NOTE: SDPA with memory-efficient backend is currently (torch==2.1.2) bugged when using non-contiguous inputs and a custom attn_mask,','line_number':586,'multiline':False]['text':' but we are fine here as `_shape` do call `.contiguous()`. Reference: https://github.com/pytorch/pytorch/issues/112577','line_number':587,'multiline':False]['text':' The tgt_len > 1 is necessary to match with AttentionMaskConverter.to_causal_4d that does not create a causal mask in case tgt_len == 1.','line_number':594,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':606,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':607,'multiline':False]['text':' Self Attention','line_number':754,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':755,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':757,'multiline':False]['text':' Cross-Attention Block','line_number':769,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':775,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':789,'multiline':False]['text':' Fully Connected','line_number':792,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1076,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1137,'multiline':False]['text':' expand attention_mask','line_number':1158,'multiline':False]['text':' output_attentions=True & head_mask can not be supported when using SDPA, fall back to','line_number':1163,'multiline':False]['text':' the manual implementation that requires a 4D causal mask in all cases.','line_number':1164,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1165,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1168,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':1174,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1185,'multiline':False]['text':' skip the layer','line_number':1189,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1259,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1355,'multiline':False]['text':' past_key_values_length','line_number':1368,'multiline':False]['text':' 2d mask is passed through the layers','line_number':1375,'multiline':False]['text':' output_attentions=True & cross_attn_head_mask can not be supported when using SDPA, and we fall back on','line_number':1378,'multiline':False]['text':' the manual implementation that requires a 4D causal mask in all cases.','line_number':1379,'multiline':False]['text':' 4d mask is passed through the layers','line_number':1387,'multiline':False]['text':' expand encoder attention mask','line_number':1392,'multiline':False]['text':' output_attentions=True & cross_attn_head_mask can not be supported when using SDPA, and we fall back on','line_number':1397,'multiline':False]['text':' the manual implementation that requires a 4D causal mask in all cases.','line_number':1398,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1399,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1406,'multiline':False]['text':' embed positions','line_number':1411,'multiline':False]['text':' decoder layers','line_number':1427,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1433,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1443,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':1491,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1527,'multiline':False]['text':' different to other models, Bart automatically creates decoder_input_ids from','line_number':1574,'multiline':False]['text':' input_ids if no decoder_input_ids are provided','line_number':1575,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':1605,'multiline':False]['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':1613,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1658,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':1784,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1788,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1792,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':1798,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':1807,'multiline':False]['text':' cached cross_attention states don't have to be reordered -> they are always the same','line_number':1817,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1845,'multiline':False]['text':' last hidden state','line_number':1904,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1974,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':2044,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':2049,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2112,'multiline':False]['text':' decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)','line_number':2241,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':2281,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':2288,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':2292,'multiline':False]['text':' first step, decoder_cached_states are empty','line_number':2296,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':2298,'multiline':False]