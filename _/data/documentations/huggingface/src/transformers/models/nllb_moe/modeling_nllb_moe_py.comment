['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2023 NllbMoe Authors and HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':'###################################################','line_number':52,'multiline':False]['text':' This dict contains ids and associated url','line_number':53,'multiline':False]['text':' for the pretrained weights provided with the models','line_number':54,'multiline':False]['text':'###################################################','line_number':55,'multiline':False]['text':' See all NLLB-MOE models at https://huggingface.co/models?filter=nllb-moe','line_number':58,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.shift_tokens_right','line_number':62,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':73,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids','line_number':79,'multiline':False]['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':90,'multiline':False]['text':' cast the expert indices to int64, otherwise one-hot encoding will fail','line_number':118,'multiline':False]['text':' For a given token, determine if it was routed to a given expert.','line_number':127,'multiline':False]['text':' cast to float32 otherwise mean will fail','line_number':130,'multiline':False]['text':' Copied from transformers.models.m2m_100.modeling_m2m_100.M2M100SinusoidalPositionalEmbedding','line_number':138,'multiline':False]['text':' in forward put the weights on the correct dtype and device of the param','line_number':152,'multiline':False]['text':' zero pad','line_number':171,'multiline':False]['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':184,'multiline':False]['text':' expand embeddings if needed','line_number':192,'multiline':False]['text':' Apply Softmax and cast back to the original `dtype`','line_number':269,'multiline':False]['text':' replace top_1_expert_index with min values','line_number':278,'multiline':False]['text':' only get the last causal mask','line_number':295,'multiline':False]['text':' sort tokens based on their routing probability','line_number':302,'multiline':False]['text':' to make sure important tokens are routed, first','line_number':303,'multiline':False]['text':' Update 2nd's location by accounting for locations of 1st','line_number':312,'multiline':False]['text':' Update 2nd's location by accounting for locations of 1st','line_number':318,'multiline':False]['text':' Remove locations outside capacity from ( cumsum < capacity = False will not be routed)','line_number':327,'multiline':False]['text':' Calculate combine_weights and dispatch_mask','line_number':336,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->NllbMoe,key_value_states->encoder_hidden_states','line_number':459,'multiline':False]['text':' if encoder_hidden_states are provided this layer is used as a cross-attention layer','line_number':508,'multiline':False]['text':' for the decoder','line_number':509,'multiline':False]['text':' get query proj','line_number':514,'multiline':False]['text':' get key, value proj','line_number':516,'multiline':False]['text':' `past_key_value[0].shape[2] == encoder_hidden_states.shape[1]`','line_number':517,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':518,'multiline':False]['text':' the provided `encoder_hidden_states` to support prefix tuning','line_number':519,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':525,'multiline':False]['text':' cross_attentions','line_number':529,'multiline':False]['text':' reuse k, v, self_attention','line_number':533,'multiline':False]['text':' self_attention','line_number':539,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':544,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':545,'multiline':False]['text':' key/value_states (first "if" case)','line_number':546,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':547,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':548,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':549,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':550,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':587,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':588,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':589,'multiline':False]['text':' twice and have to be reused in the following','line_number':590,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':609,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':610,'multiline':False]['text':' router_states set to None to track which layers have None gradients.','line_number':675,'multiline':False]['text':' Self Attention','line_number':764,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':765,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':767,'multiline':False]['text':' Cross-Attention Block','line_number':778,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':785,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':798,'multiline':False]['text':' Fully Connected','line_number':801,'multiline':False]['text':' clamp inf values to enable fp16 training','line_number':814,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1017,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1076,'multiline':False]['text':' expand attention_mask','line_number':1097,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1099,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':1106,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1117,'multiline':False]['text':' skip the layer','line_number':1119,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1204,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':1298,'multiline':False]['text':' past_key_values_length','line_number':1309,'multiline':False]['text':' create causal mask','line_number':1315,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1316,'multiline':False]['text':' expand encoder attention mask','line_number':1321,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1323,'multiline':False]['text':' embed positions','line_number':1328,'multiline':False]['text':' decoder layers','line_number':1343,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1350,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1364,'multiline':False]['text':' under deepspeed zero3 all gpus must run in sync','line_number':1374,'multiline':False]['text':' past_key_value is always None with gradient checkpointing','line_number':1389,'multiline':False]['text':' Add last layer','line_number':1424,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1467,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':1546,'multiline':False]['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':1555,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1603,'multiline':False]['text':' todo check in the config if router loss enables','line_number':1686,'multiline':False]['text':' Compute the router loss (z_loss + auxiliary loss) for each router in the encoder and decoder','line_number':1692,'multiline':False]['text':' only return the loss if they are not None','line_number':1708,'multiline':False]['text':' Copied from transfomers.models.switch_transformers.SwitchTransformersForConditionalGeneration.prepare_inputs_for_generation','line_number':1748,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':1761,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1765,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1769,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':1775,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':1783,'multiline':False]