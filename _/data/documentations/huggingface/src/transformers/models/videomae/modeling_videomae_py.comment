['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 Multimedia Computing Group, Nanjing University and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all VideoMAE models at https://huggingface.co/models?filter=videomae','line_number':52,'multiline':False]['text':' sin-cos position encoding','line_number':105,'multiline':False]['text':' https://github.com/jadore801120/attention-is-all-you-need-pytorch/blob/master/transformer/Models.py#L31','line_number':106,'multiline':False]['text':' TODO: make it with torch instead of numpy','line_number':110,'multiline':False]['text':' dim 2i','line_number':115,'multiline':False]['text':' dim 2i+1','line_number':116,'multiline':False]['text':' fixed sin-cos embedding','line_number':132,'multiline':False]['text':' create patch embeddings','line_number':137,'multiline':False]['text':' add position embeddings','line_number':140,'multiline':False]['text':' only keep visible patches','line_number':143,'multiline':False]['text':' ~bool_masked_pos means visible','line_number':144,'multiline':False]['text':' permute to (batch_size, num_channels, num_frames, height, width)','line_number':200,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':249,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':254,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':257,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':258,'multiline':False]['text':' Mask heads if we want to','line_number':261,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTSelfOutput with ViT->VideoMAE','line_number':276,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTAttention with ViT->VideoMAE','line_number':295,'multiline':False]['text':' Prune linear layers','line_number':310,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':316,'multiline':False]['text':' add attentions if we output them','line_number':331,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTIntermediate ViT->VideoMAE','line_number':335,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTOutput ViT->VideoMAE','line_number':352,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTLayer with ViT->VideoMAE','line_number':368,'multiline':False]['text':' in VideoMAE, layernorm is applied before self-attention','line_number':389,'multiline':False]['text':' add self attentions if we output attention weights','line_number':394,'multiline':False]['text':' first residual connection','line_number':396,'multiline':False]['text':' in VideoMAE, layernorm is also applied after self-attention','line_number':399,'multiline':False]['text':' second residual connection is done here','line_number':403,'multiline':False]['text':' Copied from transformers.models.vit.modeling_vit.ViTEncoder with ViT->VideoMAE','line_number':411,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':477,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':478,'multiline':False]['text':' Initialize weights and apply final processing','line_number':538,'multiline':False]['text':' Prepare head mask if needed','line_number':650,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':651,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':652,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':653,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':654,'multiline':False]['text':' apply Transformer layers (blocks)','line_number':711,'multiline':False]['text':' predictor projection','line_number':739,'multiline':False]['text':' Initialize weights and apply final processing','line_number':767,'multiline':False]['text':' [batch_size, num_visible_patches, decoder_hidden_size]','line_number':824,'multiline':False]['text':' we don't unshuffle the correct visible token order, but shuffle the position embeddings accordingly.','line_number':827,'multiline':False]['text':' [batch_size, num_patches, decoder_hidden_size]','line_number':835,'multiline':False]['text':' [batch_size, num_masked_patches, num_channels * patch_size * patch_size]','line_number':838,'multiline':False]['text':' calculate the labels to be predicted','line_number':844,'multiline':False]['text':' Can't unnormalize with default means/stds','line_number':846,'multiline':False]['text':' first, unnormalize the frames','line_number':849,'multiline':False]['text':' in [0, 1]','line_number':854,'multiline':False]['text':' step 1: split up dimensions (time by tubelet_size, height by patch_size, width by patch_size)','line_number':859,'multiline':False]['text':' step 2: move dimensions to concatenate:','line_number':870,'multiline':False]['text':' step 3: concatenate:','line_number':872,'multiline':False]['text':' step 4: normalize. The authors find that the mean is about 0.48 and standard deviation is about 0.08.','line_number':879,'multiline':False]['text':' step 5: reshape to (batch_size, T//ts * H//ps * W//ps, ts * ps * ps * C)','line_number':883,'multiline':False]['text':' step 1: split up dimensions (time by tubelet_size, height by patch_size, width by patch_size)','line_number':894,'multiline':False]['text':' step 2: move dimensions to concatenate: (batch_size, T//ts, H//ps, W//ps, ts, ps, ps, C)','line_number':905,'multiline':False]['text':' step 3: concatenate','line_number':907,'multiline':False]['text':' Classifier head','line_number':944,'multiline':False]['text':' Initialize weights and apply final processing','line_number':948,'multiline':False]