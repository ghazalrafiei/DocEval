['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2019-present, Facebook, Inc and the HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all XLM models at https://huggingface.co/models?filter=xlm','line_number':67,'multiline':False]['text':' attention mask is the same as mask, or triangular inferior attention (causal)','line_number':90,'multiline':False]['text':' sanity check','line_number':97,'multiline':False]['text':' Prune linear layers','line_number':126,'multiline':False]['text':' Update hyper params','line_number':131,'multiline':False]['text':' Input is (bs, qlen, dim)','line_number':140,'multiline':False]['text':' Mask is (bs, klen) (non-causal) or (bs, klen, klen)','line_number':141,'multiline':False]['text':' assert dim == self.dim, f'Dimensions do not match: {dim} input vs {self.dim} configured'','line_number':147,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':160,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':162,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':163,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':166,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':167,'multiline':False]['text':' (bs, n_heads, klen, dim_per_head)','line_number':173,'multiline':False]['text':' (bs, n_heads, klen, dim_per_head)','line_number':174,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':179,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':180,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':181,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':182,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':184,'multiline':False]['text':' (bs, n_heads, qlen, klen)','line_number':185,'multiline':False]['text':' Mask heads if we want to','line_number':187,'multiline':False]['text':' (bs, n_heads, qlen, dim_per_head)','line_number':191,'multiline':False]['text':' (bs, qlen, dim)','line_number':192,'multiline':False]['text':' encoder / decoder, output layer','line_number':397,'multiline':False]['text':' self.with_output = with_output','line_number':402,'multiline':False]['text':' dictionary / languages','line_number':405,'multiline':False]['text':' self.dico = dico','line_number':411,'multiline':False]['text':' self.id2lang = config.id2lang','line_number':412,'multiline':False]['text':' self.lang2id = config.lang2id','line_number':413,'multiline':False]['text':' assert len(self.dico) == self.n_words','line_number':414,'multiline':False]['text':' assert len(self.id2lang) == len(self.lang2id) == self.n_langs','line_number':415,'multiline':False]['text':' model parameters','line_number':417,'multiline':False]['text':' 512 by default','line_number':418,'multiline':False]['text':' 2048 by default','line_number':419,'multiline':False]['text':' 8 by default','line_number':420,'multiline':False]['text':' embeddings','line_number':426,'multiline':False]['text':' transformer layers','line_number':435,'multiline':False]['text':' if self.is_decoder:','line_number':440,'multiline':False]['text':'     self.layer_norm15 = nn.ModuleList()','line_number':441,'multiline':False]['text':'     self.encoder_attn = nn.ModuleList()','line_number':442,'multiline':False]['text':' if self.is_decoder:','line_number':447,'multiline':False]['text':'     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))','line_number':448,'multiline':False]['text':'     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))','line_number':449,'multiline':False]['text':' Initialize weights and apply final processing','line_number':460,'multiline':False]['text':' mask = input_ids != self.pad_index','line_number':519,'multiline':False]['text':' check inputs','line_number':521,'multiline':False]['text':' input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0','line_number':524,'multiline':False]['text':' assert (src_enc is None) == (src_len is None)','line_number':525,'multiline':False]['text':' if src_enc is not None:','line_number':526,'multiline':False]['text':'     assert self.is_decoder','line_number':527,'multiline':False]['text':'     assert src_enc.size(0) == bs','line_number':528,'multiline':False]['text':' generate masks','line_number':530,'multiline':False]['text':' if self.is_decoder and src_enc is not None:','line_number':532,'multiline':False]['text':'     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]','line_number':533,'multiline':False]['text':' position_ids','line_number':535,'multiline':False]['text':' (slen, bs)','line_number':539,'multiline':False]['text':' position_ids = position_ids.transpose(0, 1)','line_number':540,'multiline':False]['text':' langs','line_number':542,'multiline':False]['text':' (slen, bs)','line_number':544,'multiline':False]['text':' langs = langs.transpose(0, 1)','line_number':545,'multiline':False]['text':' Prepare head mask if needed','line_number':547,'multiline':False]['text':' do not recompute cached elements','line_number':550,'multiline':False]['text':' embeddings','line_number':560,'multiline':False]['text':' transformer layers','line_number':573,'multiline':False]['text':' self attention','line_number':580,'multiline':False]['text':' encoder attention (for decoder only)','line_number':595,'multiline':False]['text':' if self.is_decoder and src_enc is not None:','line_number':596,'multiline':False]['text':'     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)','line_number':597,'multiline':False]['text':'     attn = nn.functional.dropout(attn, p=self.dropout, training=self.training)','line_number':598,'multiline':False]['text':'     tensor = tensor + attn','line_number':599,'multiline':False]['text':'     tensor = self.layer_norm15[i](tensor)','line_number':600,'multiline':False]['text':' FFN','line_number':602,'multiline':False]['text':' Add last hidden state','line_number':607,'multiline':False]['text':' update cache length','line_number':611,'multiline':False]['text':' move back sequence length to dimension 0','line_number':615,'multiline':False]['text':' tensor = tensor.transpose(0, 1)','line_number':616,'multiline':False]['text':' default is False','line_number':643,'multiline':False]['text':' Initialize weights and apply final processing','line_number':680,'multiline':False]['text':' (loss, logits) or (logits,) depending on if labels are provided.','line_number':749,'multiline':False]['text':' Initialize weights and apply final processing','line_number':778,'multiline':False]['text':' Initialize weights and apply final processing','line_number':878,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':940,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':945,'multiline':False]['text':' Initialize weights and apply final processing','line_number':982,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1105,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1188,'multiline':False]