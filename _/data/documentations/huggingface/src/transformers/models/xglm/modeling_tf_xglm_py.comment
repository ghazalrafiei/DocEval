['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021 The Fairseq Authors The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' Public API','line_number':29,'multiline':False]['text':' See all XGLM models at https://huggingface.co/models?filter=xglm','line_number':59,'multiline':False]['text':' zero pad','line_number':73,'multiline':False]['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':96,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart._make_causal_mask','line_number':119,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart._expand_mask','line_number':137,'multiline':False]['text':' Copied from transformers.models.bart.modeling_tf_bart.TFBartAttention with Bart->XGLM','line_number':151,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':197,'multiline':False]['text':' for the decoder','line_number':198,'multiline':False]['text':' get query proj','line_number':202,'multiline':False]['text':' get key, value proj','line_number':204,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':206,'multiline':False]['text':' cross_attentions','line_number':210,'multiline':False]['text':' reuse k, v, self_attention','line_number':214,'multiline':False]['text':' self_attention','line_number':220,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':225,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':226,'multiline':False]['text':' key/value_states (first "if" case)','line_number':227,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':228,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':229,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':230,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':231,'multiline':False]['text':' Copied from transformers.models.mbart.modeling_tf_mbart.TFMBartDecoderLayer.call','line_number':355,'multiline':False]['text':' Self Attention','line_number':385,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':386,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':388,'multiline':False]['text':' Cross-Attention Block','line_number':398,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':405,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':417,'multiline':False]['text':' Fully Connected','line_number':420,'multiline':False]['text':' create causal mask','line_number':508,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':509,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':550,'multiline':False]['text':' expand encoder attention mask','line_number':575,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':577,'multiline':False]['text':' embed positions','line_number':580,'multiline':False]['text':' decoder layers','line_number':587,'multiline':False]['text':' check if head_mask and cross_attn_head_mask have a correct number of layers specified if desired','line_number':593,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':606,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':637,'multiline':False]['text':' only last token for inputs_ids if past is defined in kwargs','line_number':901,'multiline':False]['text':' shift labels to the left and cut last logit token','line_number':976,'multiline':False]