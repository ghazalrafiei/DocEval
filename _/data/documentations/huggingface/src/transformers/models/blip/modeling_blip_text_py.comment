['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 The Salesforce Team Authors and The HuggingFace Team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the BSD-3-clause license (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     https://opensource.org/licenses/BSD-3-Clause','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L52','line_number':44,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':53,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':54,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':58,'multiline':False]['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L97','line_number':97,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':155,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':156,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':157,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':177,'multiline':False]['text':' fp16 compatibility','line_number':186,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in BlipTextModel forward() function)','line_number':198,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':201,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':204,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':205,'multiline':False]['text':' Mask heads if we want to','line_number':208,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert -> BlipText','line_number':224,'multiline':False]['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#242','line_number':239,'multiline':False]['text':' Prune linear layers','line_number':254,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':260,'multiline':False]['text':' add attentions if we output them','line_number':285,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate with Bert -> BlipText','line_number':289,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert -> BlipText','line_number':305,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':343,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':367,'multiline':False]['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L386','line_number':383,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPooler with Bert->BlipText','line_number':477,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':485,'multiline':False]['text':' to the first token.','line_number':486,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->BlipText','line_number':493,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->BlipText','line_number':511,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':517,'multiline':False]['text':' an output-only bias for each token.','line_number':518,'multiline':False]['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':523,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->BlipText','line_number':532,'multiline':False]['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L548','line_number':543,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':556,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':557,'multiline':False]['text':' Adapted from https://github.com/salesforce/BLIP/blob/3a29b7410476bf5f2ba0955827390eb6ea1f4f9d/models/med.py#L571','line_number':566,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel._prune_heads','line_number':592,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':618,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':619,'multiline':False]['text':' Provided a padding mask of dimensions [batch_size, seq_length]','line_number':623,'multiline':False]['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':624,'multiline':False]['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':625,'multiline':False]['text':' in case past_key_values are used we need to add a prefix ones mask to the causal mask','line_number':631,'multiline':False]['text':' causal and attention masks must have same type with pytorch version < 1.3','line_number':632,'multiline':False]['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':657,'multiline':False]['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':658,'multiline':False]['text':' positions we want to attend and -10000.0 for masked positions.','line_number':659,'multiline':False]['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':660,'multiline':False]['text':' effectively the same as removing these entirely.','line_number':661,'multiline':False]['text':' fp16 compatibility','line_number':662,'multiline':False]['text':' past_key_values_length','line_number':730,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':736,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':737,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':742,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':743,'multiline':False]['text':' Prepare head mask if needed','line_number':761,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':762,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':763,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':764,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':765,'multiline':False]['text':' Adapted from https://github.com/salesforce/BLIP/blob/main/models/med.py#L811','line_number':806,'multiline':False]['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':889,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':912,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':916,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':920,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':924,'multiline':False]