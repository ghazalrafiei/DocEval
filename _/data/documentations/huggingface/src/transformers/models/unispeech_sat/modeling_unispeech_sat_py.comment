['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2021 The Fairseq Authors and the HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' General docstring','line_number':55,'multiline':False]['text':' Base docstring','line_number':58,'multiline':False]['text':' CTC docstring','line_number':62,'multiline':False]['text':' Frame class docstring','line_number':66,'multiline':False]['text':' Speaker Verification docstring','line_number':70,'multiline':False]['text':' See all UniSpeechSat models at https://huggingface.co/models?filter=unispeech_sat','line_number':75,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2._compute_mask_indices','line_number':116,'multiline':False]['text':' epsilon is used for probabilistic rounding','line_number':152,'multiline':False]['text':' make sure num masked span <= sequence_length','line_number':160,'multiline':False]['text':' make sure num_masked span is also <= input_length - (mask_length - 1)','line_number':164,'multiline':False]['text':' compute number of masked spans in batch','line_number':170,'multiline':False]['text':' SpecAugment mask to fill','line_number':177,'multiline':False]['text':' compute num of masked spans for this input','line_number':187,'multiline':False]['text':' get random indices to mask','line_number':190,'multiline':False]['text':' pick first sampled index that will serve as a dummy index to pad vector','line_number':195,'multiline':False]['text':' to ensure same dimension for all batches due to probabilistic rounding','line_number':196,'multiline':False]['text':' Picking first sample just pads those vectors twice.','line_number':197,'multiline':False]['text':' this case can only happen if `input_length` is strictly smaller then','line_number':199,'multiline':False]['text':' `sequence_length` in which case the last token has to be a padding','line_number':200,'multiline':False]['text':' token which we can use as a dummy mask id','line_number':201,'multiline':False]['text':' expand masked indices to masked spans','line_number':213,'multiline':False]['text':' add offset to the starting indexes so that indexes now create a span','line_number':219,'multiline':False]['text':' ensure that we cannot have indices larger than sequence_length','line_number':226,'multiline':False]['text':' scatter indices to mask','line_number':230,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2NoLayerNormConvLayer with Wav2Vec2->UniSpeechSat','line_number':236,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2LayerNormConvLayer with Wav2Vec2->UniSpeechSat','line_number':258,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2GroupNormConvLayer with Wav2Vec2->UniSpeechSat','line_number':286,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2PositionalConvEmbedding with Wav2Vec2->UniSpeechSat','line_number':311,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2SamePadLayer with Wav2Vec2->UniSpeechSat','line_number':351,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeatureEncoder with Wav2Vec2->UniSpeechSat','line_number':363,'multiline':False]['text':' make sure hidden_states require grad for gradient_checkpointing','line_number':395,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeatureProjection with Wav2Vec2->UniSpeechSat','line_number':422,'multiline':False]['text':' non-projected hidden states are needed for quantization','line_number':431,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->UniSpeechSat','line_number':438,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':487,'multiline':False]['text':' for the decoder','line_number':488,'multiline':False]['text':' get query proj','line_number':493,'multiline':False]['text':' get key, value proj','line_number':495,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':496,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':497,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':498,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':504,'multiline':False]['text':' cross_attentions','line_number':508,'multiline':False]['text':' reuse k, v, self_attention','line_number':512,'multiline':False]['text':' self_attention','line_number':518,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':523,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':524,'multiline':False]['text':' key/value_states (first "if" case)','line_number':525,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':526,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':527,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':528,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':529,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':566,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':567,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':568,'multiline':False]['text':' twice and have to be reused in the following','line_number':569,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':588,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':589,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2FeedForward with Wav2Vec2->UniSpeechSat','line_number':597,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderLayer with Wav2Vec2->UniSpeechSat','line_number':622,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2AttnAdapterLayer with Wav2Vec2->UniSpeechSat','line_number':657,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderLayerStableLayerNorm with Wav2Vec2->UniSpeechSat','line_number':683,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2Encoder with Wav2Vec2->UniSpeechSat','line_number':729,'multiline':False]['text':' make sure padded tokens output 0','line_number':752,'multiline':False]['text':' extend attention_mask','line_number':756,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':774,'multiline':False]['text':' under deepspeed zero3 all gpus must run in sync','line_number':779,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2EncoderStableLayerNorm with Wav2Vec2->UniSpeechSat','line_number':811,'multiline':False]['text':' make sure padded tokens are not attended to','line_number':836,'multiline':False]['text':' extend attention_mask','line_number':840,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':857,'multiline':False]['text':' under deepspeed zero3 all gpus must run in sync','line_number':862,'multiline':False]['text':' XXX: could optimize this like synced_gpus in generate_utils but not sure if it's worth the code complication','line_number':863,'multiline':False]['text':' storage for codebook variables (codewords)','line_number':914,'multiline':False]['text':' can be decayed for training','line_number':920,'multiline':False]['text':' project to codevector dim','line_number':932,'multiline':False]['text':' sample code vector probs via gumbel in differentiateable way','line_number':937,'multiline':False]['text':' compute perplexity','line_number':942,'multiline':False]['text':' take argmax in non-differentiable way','line_number':948,'multiline':False]['text':' comptute hard codevector distribution (one hot)','line_number':949,'multiline':False]['text':' use probs to retrieve codevectors','line_number':959,'multiline':False]['text':' gumbel softmax requires special init','line_number':980,'multiline':False]['text':' 1D convolutional layer output length formula taken','line_number':1017,'multiline':False]['text':' from https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html','line_number':1018,'multiline':False]['text':' Effectively attention_mask.sum(-1), but not inplace to be able to run','line_number':1027,'multiline':False]['text':' on inference mode.','line_number':1028,'multiline':False]['text':' these two operations makes sure that all values before the output lengths idxs are attended to','line_number':1036,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1118,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2Model._mask_hidden_states','line_number':1121,'multiline':False]['text':' `config.apply_spec_augment` can set masking to False','line_number':1133,'multiline':False]['text':' generate indices & apply SpecAugment along time axis','line_number':1137,'multiline':False]['text':' apply SpecAugment along time axis with given mask_time_indices','line_number':1141,'multiline':False]['text':' generate indices & apply SpecAugment along feature axis','line_number':1155,'multiline':False]['text':' compute reduced attention_mask corresponding to feature vectors','line_number':1195,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1245,'multiline':False]['text':' apply temperature','line_number':1289,'multiline':False]['text':' quantize all (unmasked) extracted features and project to final vq dim','line_number':1329,'multiline':False]['text':' TODO(PVP) - add pretraining logic and add to tests','line_number':1332,'multiline':False]['text':' layer normalization (has no effect when `config.do_stable_layer_norm == False`)','line_number':1336,'multiline':False]['text':'        extract_features = self.layer_norm_for_extract(extract_features)','line_number':1337,'multiline':False]['text':'        quantized_features, codevector_perplexity = self.quantizer(extract_features)','line_number':1338,'multiline':False]['text':'','line_number':1339,'multiline':False]['text':' project quantized features twice','line_number':1340,'multiline':False]['text':'        quantized_features = self.project_q(quantized_features)','line_number':1341,'multiline':False]['text':'        quantized_features = self.project_hid(quantized_features)','line_number':1342,'multiline':False]['text':'','line_number':1343,'multiline':False]['text':'        loss = None','line_number':1344,'multiline':False]['text':'        logits = quantized_features','line_number':1345,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForCTC with Wav2Vec2->UniSpeechSat, wav2vec2->unispeech_sat, WAV_2_VEC_2->UNISPEECH_SAT','line_number':1372,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1394,'multiline':False]['text':' Note that `tie_weights` is usually used to tie input and output embedding weights. The method is re-purposed to','line_number':1405,'multiline':False]['text':' correctly load adapter layers for UniSpeechSat so that we do not have to introduce a new API to','line_number':1406,'multiline':False]['text':' [`PreTrainedModel`]. While slightly hacky, UniSpeechSat never has to tie input and output embeddings, so that it is','line_number':1407,'multiline':False]['text':' ok to repurpose this function here.','line_number':1408,'multiline':False]['text':' retrieve loss input_lengths from attention_mask','line_number':1490,'multiline':False]['text':' assuming that padded tokens are filled with -100','line_number':1496,'multiline':False]['text':' when not being attended to','line_number':1497,'multiline':False]['text':' ctc_loss doesn't support fp16','line_number':1502,'multiline':False]['text':' transformer layers + input embeddings','line_number':1541,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1547,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForSequenceClassification.freeze_feature_extractor','line_number':1550,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForSequenceClassification.freeze_feature_encoder with wav2vec2->unispeech_sat','line_number':1563,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForSequenceClassification.freeze_base_model with wav2vec2->unispeech_sat','line_number':1571,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForSequenceClassification.forward with Wav2Vec2->UniSpeechSat, wav2vec2->unispeech_sat','line_number':1587,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForAudioFrameClassification with Wav2Vec2->UniSpeechSat, wav2vec2->unispeech_sat, WAV_2_VEC_2->UNISPEECH_SAT','line_number':1656,'multiline':False]['text':' transformer layers + input embeddings','line_number':1666,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.AMSoftmaxLoss','line_number':1763,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.TDNNLayer','line_number':1787,'multiline':False]['text':' Copied from transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForXVector with Wav2Vec2->UniSpeechSat, wav2vec2->unispeech_sat, WAV_2_VEC_2->UNISPEECH_SAT','line_number':1820,'multiline':False]['text':' transformer layers + input embeddings','line_number':1826,'multiline':False]['text':' 1D convolutional layer output length formula taken','line_number':1874,'multiline':False]['text':' from https://pytorch.org/docs/stable/generated/torch.nn.Conv1d.html','line_number':1875,'multiline':False]['text':' Statistic Pooling','line_number':1931,'multiline':False]