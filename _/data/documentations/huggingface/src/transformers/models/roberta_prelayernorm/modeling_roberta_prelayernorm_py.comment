['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 The Google AI Language Team Authors and The HuggingFace Inc. team.','line_number':2,'multiline':False]['text':' Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' See all RoBERTaWithPreLayerNorm models at https://huggingface.co/models?filter=roberta_with_prelayernorm','line_number':63,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEmbeddings with Roberta->RobertaPreLayerNorm','line_number':67,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings.__init__','line_number':73,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':80,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':81,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':84,'multiline':False]['text':' End copy','line_number':93,'multiline':False]['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':104,'multiline':False]['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':116,'multiline':False]['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':117,'multiline':False]['text':' issue #5664','line_number':118,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->RobertaPreLayerNorm','line_number':157,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':202,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':203,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':204,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':208,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':229,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':230,'multiline':False]['text':' key/value_states (first "if" case)','line_number':231,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':232,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':233,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':234,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':235,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':238,'multiline':False]['text':' fp16 compatibility','line_number':253,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in RobertaPreLayerNormModel forward() function)','line_number':265,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':268,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':271,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':272,'multiline':False]['text':' Mask heads if we want to','line_number':275,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention.prune_heads','line_number':313,'multiline':False]['text':' Prune linear layers','line_number':321,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':327,'multiline':False]['text':' add attentions if we output them','line_number':353,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->RobertaPreLayerNorm','line_number':387,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':413,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':424,'multiline':False]['text':' add self attentions if we output attention weights','line_number':429,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':439,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':451,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':453,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':462,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->RobertaPreLayerNorm','line_number':474,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPooler','line_number':568,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':576,'multiline':False]['text':' to the first token.','line_number':577,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaPreTrainedModel with Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':584,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights','line_number':596,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':600,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':601,'multiline':False]['text':' Initialize weights and apply final processing','line_number':711,'multiline':False]['text':' past_key_values_length','line_number':794,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':808,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':809,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':812,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':813,'multiline':False]['text':' Prepare head mask if needed','line_number':823,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':824,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':825,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':826,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':827,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForCausalLM with roberta-base->andreasmadsen/efficient_mlm_m0.40,ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm, RobertaPreLayerNormTokenizer->RobertaTokenizer','line_number':870,'multiline':False]['text':' Initialize weights and apply final processing','line_number':885,'multiline':False]['text':' move labels to correct device to enable model parallelism','line_number':981,'multiline':False]['text':' we are doing next-token prediction; shift prediction scores and input ids by one','line_number':983,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1004,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':1008,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1012,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1016,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.__init__ with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':1038,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1051,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForMaskedLM.forward with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':1069,'multiline':False]['text':' move labels to correct device to enable model parallelism','line_number':1113,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaLMHead with Roberta->RobertaPreLayerNorm','line_number':1130,'multiline':False]['text':' project back to size of vocabulary with bias','line_number':1148,'multiline':False]['text':' To tie those two weights if they get disconnected (on TPU or when the bias is resized)','line_number':1154,'multiline':False]['text':' For accelerate compatibility and to not break backward compatibility','line_number':1155,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1178,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForSequenceClassification.forward with roberta->roberta_prelayernorm','line_number':1187,'multiline':False]['text':' move labels to correct device to enable model parallelism','line_number':1225,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForMultipleChoice with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':1267,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1276,'multiline':False]['text':' move labels to correct device to enable model parallelism','line_number':1338,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1374,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForTokenClassification.forward with roberta->roberta_prelayernorm','line_number':1383,'multiline':False]['text':' move labels to correct device to enable model parallelism','line_number':1422,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaClassificationHead with Roberta->RobertaPreLayerNorm','line_number':1439,'multiline':False]['text':' take <s> token (equiv. to [CLS])','line_number':1453,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1477,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaForQuestionAnswering.forward with roberta->roberta_prelayernorm','line_number':1486,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':1534,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1539,'multiline':False]['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':1572,'multiline':False]