['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 The Google AI Language Team Authors and The HuggingFace Inc. team.','line_number':2,'multiline':False]['text':' Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' See all RoBERTaWithPreLayerNorm models at https://huggingface.co/models?filter=roberta_with_prelayernorm','line_number':76,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaEmbeddings with Roberta->RobertaPreLayerNorm','line_number':80,'multiline':False]['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':168,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertPooler with Bert->RobertaPreLayerNorm','line_number':186,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':200,'multiline':False]['text':' to the first token.','line_number':201,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertSelfAttention with Bert->RobertaPreLayerNorm','line_number':216,'multiline':False]['text':' Reshape from [batch_size, seq_length, all_head_size] to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':247,'multiline':False]['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size] to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':250,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':267,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':268,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':269,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':273,'multiline':False]['text':' if cross_attention save Tuple(tf.Tensor, tf.Tensor) of all cross attention key/value_states.','line_number':293,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':294,'multiline':False]['text':' key/value_states (first "if" case)','line_number':295,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(tf.Tensor, tf.Tensor) of','line_number':296,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':297,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':298,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':299,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':302,'multiline':False]['text':' (batch size, num_heads, seq_len_q, seq_len_k)','line_number':303,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in TFRobertaPreLayerNormModel call() function)','line_number':309,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':312,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':315,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':316,'multiline':False]['text':' Mask heads if we want to','line_number':319,'multiline':False]['text':' (batch_size, seq_len_q, all_head_size)','line_number':326,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertAttention.prune_heads','line_number':384,'multiline':False]['text':' add attentions (possibly with past_key_value) if we output them','line_number':413,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLayer with Bert->RobertaPreLayerNorm','line_number':493,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':519,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':533,'multiline':False]['text':' add self attentions if we output attention weights','line_number':538,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':548,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':561,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':563,'multiline':False]['text':' add attentions if we output them','line_number':571,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':573,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertEncoder with Bert->RobertaPreLayerNorm','line_number':597,'multiline':False]['text':' Add last layer','line_number':649,'multiline':False]['text':' The embeddings must be the last declaration in order to follow the weights order','line_number':694,'multiline':False]['text':' We create a 3D attention mask from a 2D tensor mask.','line_number':764,'multiline':False]['text':' Sizes are [batch_size, 1, 1, to_seq_length]','line_number':765,'multiline':False]['text':' So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]','line_number':766,'multiline':False]['text':' this attention mask is more simple than the triangular masking of causal attention','line_number':767,'multiline':False]['text':' used in OpenAI GPT, we just need to prepare the broadcast dimension here.','line_number':768,'multiline':False]['text':' Provided a padding mask of dimensions [batch_size, mask_seq_length]','line_number':772,'multiline':False]['text':' - if the model is a decoder, apply a causal mask in addition to the padding mask','line_number':773,'multiline':False]['text':' - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':774,'multiline':False]['text':' attention_mask needs to be sliced to the shape `[batch_size, 1, from_seq_length - cached_seq_length, to_seq_length]','line_number':788,'multiline':False]['text':' Since attention_mask is 1.0 for positions we want to attend and 0.0 for','line_number':795,'multiline':False]['text':' masked positions, this operation will create a tensor which is 0.0 for','line_number':796,'multiline':False]['text':' positions we want to attend and -10000.0 for masked positions.','line_number':797,'multiline':False]['text':' Since we are adding it to the raw scores before the softmax, this is','line_number':798,'multiline':False]['text':' effectively the same as removing these entirely.','line_number':799,'multiline':False]['text':' If a 2D ou 3D attention mask is provided for the cross-attention','line_number':806,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, mask_seq_length, mask_seq_length]','line_number':807,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':808,'multiline':False]['text':' T5 has a mask that can compare sequence ids, we can simulate this here with this transposition','line_number':816,'multiline':False]['text':' Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270','line_number':817,'multiline':False]['text':' encoder_extended_attention_mask = tf.math.equal(encoder_extended_attention_mask,','line_number':818,'multiline':False]['text':'                                         tf.transpose(encoder_extended_attention_mask, perm=(-1, -2)))','line_number':819,'multiline':False]['text':' Prepare head mask if needed','line_number':825,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':826,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':827,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':828,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':829,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaPreTrainedModel with Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':886,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaModel with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':999,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaLMHead with Roberta->RobertaPreLayerNorm','line_number':1077,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':1092,'multiline':False]['text':' an output-only bias for each token.','line_number':1093,'multiline':False]['text':' project back to size of vocabulary with bias','line_number':1128,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1142,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM.__init__ with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':1145,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForMaskedLM.call with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':1171,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForCausalLM with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':1233,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1235,'multiline':False]['text':' Copied from transformers.models.bert.modeling_tf_bert.TFBertLMHeadModel.prepare_inputs_for_generation','line_number':1260,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1263,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':1267,'multiline':False]['text':' shift labels to the left and cut last logit token','line_number':1343,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaClassificationHead with Roberta->RobertaPreLayerNorm','line_number':1373,'multiline':False]['text':' take <s> token (equiv. to [CLS])','line_number':1395,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1424,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForSequenceClassification.call with roberta->roberta_prelayernorm','line_number':1443,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForMultipleChoice with ROBERTA->ROBERTA_PRELAYERNORM,Roberta->RobertaPreLayerNorm,roberta->roberta_prelayernorm','line_number':1511,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1513,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1617,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForTokenClassification.call with roberta->roberta_prelayernorm','line_number':1644,'multiline':False]['text':' names with a '.' represents the authorized unexpected/missing layers when a TF model is loaded from a PT model','line_number':1713,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_tf_roberta.TFRobertaForQuestionAnswering.call with roberta->roberta_prelayernorm','line_number':1735,'multiline':False]