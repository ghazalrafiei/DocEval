['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022, UCLA NLP, The Facebook AI Research Team and The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all PLBART models at https://huggingface.co/models?filter=plbart','line_number':61,'multiline':False]['text':' Copied from transformers.models.mbart.modeling_mbart.shift_tokens_right','line_number':65,'multiline':False]['text':' replace possible -100 values in labels by `pad_token_id`','line_number':75,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartLearnedPositionalEmbedding with Bart->PLBart','line_number':86,'multiline':False]['text':' PLBart is set up so that if padding_idx is specified then offset the embedding ids by 2','line_number':93,'multiline':False]['text':' and adjust num_embeddings appropriately. Other models don't have this hack','line_number':94,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartAttention with Bart->PLBart','line_number':109,'multiline':False]['text':' if key_value_states are provided this layer is used as a cross-attention layer','line_number':158,'multiline':False]['text':' for the decoder','line_number':159,'multiline':False]['text':' get query proj','line_number':164,'multiline':False]['text':' get key, value proj','line_number':166,'multiline':False]['text':' `past_key_value[0].shape[2] == key_value_states.shape[1]`','line_number':167,'multiline':False]['text':' is checking that the `sequence_length` of the `past_key_value` is the same as','line_number':168,'multiline':False]['text':' the provided `key_value_states` to support prefix tuning','line_number':169,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':175,'multiline':False]['text':' cross_attentions','line_number':179,'multiline':False]['text':' reuse k, v, self_attention','line_number':183,'multiline':False]['text':' self_attention','line_number':189,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':194,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':195,'multiline':False]['text':' key/value_states (first "if" case)','line_number':196,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':197,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':198,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':199,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':200,'multiline':False]['text':' this operation is a bit awkward, but it's required to','line_number':237,'multiline':False]['text':' make sure that attn_weights keeps its gradient.','line_number':238,'multiline':False]['text':' In order to do so, attn_weights have to be reshaped','line_number':239,'multiline':False]['text':' twice and have to be reused in the following','line_number':240,'multiline':False]['text':' Use the `embed_dim` from the config (stored in the class) rather than `hidden_state` because `attn_output` can be','line_number':259,'multiline':False]['text':' partitioned across GPUs when using tensor-parallelism.','line_number':260,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartEncoderLayer with Bart->PLBart, BART->PLBART','line_number':268,'multiline':False]['text':' TODO: Implement attention with SDPA for PLBart.','line_number':339,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartDecoderLayer with Bart->PLBart, BART->PLBART','line_number':343,'multiline':False]['text':' Self Attention','line_number':406,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':407,'multiline':False]['text':' add present self-attn cache to positions 1,2 of present_key_value tuple','line_number':409,'multiline':False]['text':' Cross-Attention Block','line_number':421,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of present_key_value tuple','line_number':427,'multiline':False]['text':' add cross-attn to positions 3,4 of present_key_value tuple','line_number':441,'multiline':False]['text':' Fully Connected','line_number':444,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartClassificationHead with Bart->PLBart','line_number':464,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartEncoder with Bart->PLBart','line_number':645,'multiline':False]['text':' Initialize weights and apply final processing','line_number':682,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':743,'multiline':False]['text':' expand attention_mask','line_number':764,'multiline':False]['text':' output_attentions=True & head_mask can not be supported when using SDPA, fall back to','line_number':769,'multiline':False]['text':' the manual implementation that requires a 4D causal mask in all cases.','line_number':770,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':771,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':774,'multiline':False]['text':' check if head_mask has a correct number of layers specified if desired','line_number':780,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':791,'multiline':False]['text':' skip the layer','line_number':795,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartDecoder with Bart->PLBart','line_number':832,'multiline':False]['text':' Initialize weights and apply final processing','line_number':866,'multiline':False]['text':' retrieve input_ids and inputs_embeds','line_number':962,'multiline':False]['text':' past_key_values_length','line_number':975,'multiline':False]['text':' 2d mask is passed through the layers','line_number':982,'multiline':False]['text':' output_attentions=True & cross_attn_head_mask can not be supported when using SDPA, and we fall back on','line_number':985,'multiline':False]['text':' the manual implementation that requires a 4D causal mask in all cases.','line_number':986,'multiline':False]['text':' 4d mask is passed through the layers','line_number':994,'multiline':False]['text':' expand encoder attention mask','line_number':999,'multiline':False]['text':' output_attentions=True & cross_attn_head_mask can not be supported when using SDPA, and we fall back on','line_number':1004,'multiline':False]['text':' the manual implementation that requires a 4D causal mask in all cases.','line_number':1005,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1006,'multiline':False]['text':' [bsz, seq_len] -> [bsz, 1, tgt_seq_len, src_seq_len]','line_number':1013,'multiline':False]['text':' embed positions','line_number':1018,'multiline':False]['text':' decoder layers','line_number':1034,'multiline':False]['text':' check if head_mask/cross_attn_head_mask has a correct number of layers specified if desired','line_number':1040,'multiline':False]['text':' add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)','line_number':1050,'multiline':False]['text':' add hidden states from the last decoder layer','line_number':1098,'multiline':False]['text':' different to other models, PLBart automatically creates decoder_input_ids from','line_number':1186,'multiline':False]['text':' input_ids if no decoder_input_ids are provided','line_number':1187,'multiline':False]['text':' If the user passed a tuple for encoder_outputs, we wrap it in a BaseModelOutput when return_dict=True','line_number':1201,'multiline':False]['text':' decoder outputs consists of (dec_features, past_key_value, dec_hidden, dec_attn)','line_number':1209,'multiline':False]['text':' TODO: Check if this is needed. It is unused?','line_number':1371,'multiline':False]['text':' cut decoder_input_ids if past is used','line_number':1373,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1377,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1381,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':1387,'multiline':False]['text':' change this to avoid caching (presumably for debugging)','line_number':1395,'multiline':False]['text':' cached cross_attention states don't have to be reordered -> they are always the same','line_number':1405,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1433,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForSequenceClassification.forward','line_number':1442,'multiline':False]['text':' last hidden state','line_number':1491,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartDecoderWrapper with Bart->PLBart','line_number':1542,'multiline':False]['text':' Copied from transformers.models.bart.modeling_bart.BartForCausalLM with Bart->PLBart, facebook/bart-base->uclanlp/plbart-base','line_number':1557,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1570,'multiline':False]['text':' decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)','line_number':1699,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':1739,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':1746,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':1750,'multiline':False]['text':' first step, decoder_cached_states are empty','line_number':1754,'multiline':False]['text':' encoder_outputs is defined. input_ids not needed','line_number':1756,'multiline':False]