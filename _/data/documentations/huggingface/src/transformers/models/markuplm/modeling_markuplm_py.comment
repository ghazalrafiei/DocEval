['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 Microsoft Research Asia and the HuggingFace Inc. team.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids','line_number':111,'multiline':False]['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':122,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEmbeddings.create_position_ids_from_inputs_embeds','line_number':155,'multiline':False]['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':192,'multiline':False]['text':' prepare xpath seq','line_number':203,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput with Bert->MarkupLM','line_number':226,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate','line_number':241,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput with Bert->MarkupLM','line_number':257,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPooler','line_number':272,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':280,'multiline':False]['text':' to the first token.','line_number':281,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPredictionHeadTransform with Bert->MarkupLM','line_number':288,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLMPredictionHead with Bert->MarkupLM','line_number':306,'multiline':False]['text':' The output weights are the same as the input embeddings, but there is','line_number':312,'multiline':False]['text':' an output-only bias for each token.','line_number':313,'multiline':False]['text':' Need a link between the two variables so that the bias is correctly resized with `resize_token_embeddings`','line_number':318,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOnlyMLMHead with Bert->MarkupLM','line_number':327,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->MarkupLM','line_number':338,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':383,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':384,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':385,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':389,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':410,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':411,'multiline':False]['text':' key/value_states (first "if" case)','line_number':412,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':413,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':414,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':415,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':416,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':419,'multiline':False]['text':' fp16 compatibility','line_number':434,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in MarkupLMModel forward() function)','line_number':446,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':449,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':452,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':453,'multiline':False]['text':' Mask heads if we want to','line_number':456,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->MarkupLM','line_number':473,'multiline':False]['text':' Prune linear layers','line_number':488,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':494,'multiline':False]['text':' add attentions if we output them','line_number':519,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->MarkupLM','line_number':523,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':549,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':560,'multiline':False]['text':' add self attentions if we output attention weights','line_number':565,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':575,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':587,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':589,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':598,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->MarkupLM','line_number':610,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPreTrainedModel._init_weights with Bert->MarkupLM','line_number':714,'multiline':False]['text':' Slightly different from the TF version which uses truncated_normal for initialization','line_number':718,'multiline':False]['text':' cf https://github.com/pytorch/pytorch/pull/5617','line_number':719,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel.__init__ with Bert->MarkupLM','line_number':803,'multiline':False]['text':' Initialize weights and apply final processing','line_number':813,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel.prepare_inputs_for_generation','line_number':935,'multiline':False]['text':' if model is used as a decoder in encoder-decoder model, the decoder attention mask is created on the fly','line_number':940,'multiline':False]['text':' cut decoder_input_ids if past_key_values is used','line_number':944,'multiline':False]['text':' Some generation methods already pass only the last input ID','line_number':948,'multiline':False]['text':' Default to old behavior: keep only final ID','line_number':952,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel._reorder_cache','line_number':964,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForQuestionAnswering.__init__ with bert->markuplm, Bert->MarkupLM','line_number':982,'multiline':False]['text':' Initialize weights and apply final processing','line_number':990,'multiline':False]['text':' If we are on multi-GPU, split add a dimension','line_number':1072,'multiline':False]['text':' sometimes the start/end positions are outside our model inputs, we ignore these terms','line_number':1077,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForTokenClassification.__init__ with bert->markuplm, Bert->MarkupLM','line_number':1102,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1114,'multiline':False]['text':' (batch_size, seq_length, node_type_size)','line_number':1178,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertForSequenceClassification.__init__ with bert->markuplm, Bert->MarkupLM','line_number':1208,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1221,'multiline':False]