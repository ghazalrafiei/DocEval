['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2023 The LAION-AI Team and The HuggingFace Team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' See all clap models at https://huggingface.co/models?filter=clap','line_number':50,'multiline':False]['text':' Adapted from: https://github.com/LAION-AI/CLAP/blob/6ad05a971ba0622f6acee8c41993e0d02bbed639/src/open_clip/utils.py#L191','line_number':54,'multiline':False]['text':' Adapted from https://github.com/LAION-AI/CLAP/blob/6ad05a971ba0622f6acee8c41993e0d02bbed639/src/open_clip/htsat.py#L249','line_number':71,'multiline':False]['text':' Adapted from https://github.com/LAION-AI/CLAP/blob/6ad05a971ba0622f6acee8c41993e0d02bbed639/src/open_clip/htsat.py#L263','line_number':92,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.create_position_ids_from_input_ids','line_number':112,'multiline':False]['text':' The series of casts and type-conversions here are carefully balanced to both work with ONNX export and XLA.','line_number':123,'multiline':False]['text':' contrastive loss function, adapted from','line_number':129,'multiline':False]['text':' https://sachinruk.github.io/blog/pytorch/pytorch%20lightning/loss%20function/gpu/2021/03/07/CLIP.html#CLIP-loss-function','line_number':130,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPTextModelOutput with CLIP->Clap','line_number':137,'multiline':False]['text':' Copied from transformers.models.clip.modeling_clip.CLIPOutput with CLIP->Clap, vision->audio, Vision->Audio, image->audio','line_number':196,'multiline':False]['text':' Adapted from transformers.models.swin.modeling_swin.SwinDropPath','line_number':233,'multiline':False]['text':' work with diff dim tensors, not just 2D ConvNets','line_number':249,'multiline':False]['text':' binarize','line_number':253,'multiline':False]['text':' Adapted from https://github.com/LAION-AI/CLAP/blob/6ad05a971ba0622f6acee8c41993e0d02bbed639/src/open_clip/feature_fusion.py#L133','line_number':258,'multiline':False]['text':' retrieve the last mel as we have transposed the input','line_number':349,'multiline':False]['text':' global processing','line_number':352,'multiline':False]['text':' local processing','line_number':363,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinSelfAttention with Swin->ClapAudio','line_number':397,'multiline':False]['text':' get pair-wise relative position index for each token inside the window','line_number':417,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':455,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in ClapAudioModel forward() function)','line_number':469,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':477,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':480,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':481,'multiline':False]['text':' Mask heads if we want to','line_number':484,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinSelfOutput with Swin->ClapAudio','line_number':498,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinAttention with Swin->ClapAudio','line_number':512,'multiline':False]['text':' Prune linear layers','line_number':527,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':533,'multiline':False]['text':' add attentions if we output them','line_number':547,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinIntermediate with Swin->ClapAudio','line_number':551,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinOutput with Swin->ClapAudio','line_number':567,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinLayer with SwinDropPath->ClapDropPath, Swin->ClapAudio','line_number':580,'multiline':False]['text':' if window size is larger than input resolution, we don't partition windows','line_number':597,'multiline':False]['text':' calculate attention mask for SW-MSA','line_number':603,'multiline':False]['text':' pad hidden_states to multiples of window size','line_number':656,'multiline':False]['text':' cyclic shift','line_number':660,'multiline':False]['text':' partition windows','line_number':666,'multiline':False]['text':' reverse cyclic shift','line_number':682,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinStage with Swin->ClapAudio','line_number':704,'multiline':False]['text':' patch merging layer','line_number':723,'multiline':False]['text':' Copied from transformers.models.swin.modeling_swin.SwinPatchMerging with Swin->ClapAudio','line_number':764,'multiline':False]['text':' `dim` is height * width','line_number':795,'multiline':False]['text':' pad input to be disible by width and height, if needed','line_number':799,'multiline':False]['text':' [batch_size, height/2, width/2, num_channels]','line_number':801,'multiline':False]['text':' [batch_size, height/2, width/2, num_channels]','line_number':803,'multiline':False]['text':' [batch_size, height/2, width/2, num_channels]','line_number':805,'multiline':False]['text':' [batch_size, height/2, width/2, num_channels]','line_number':807,'multiline':False]['text':' batch_size height/2 width/2 4*num_channels','line_number':809,'multiline':False]['text':' batch_size height/2*width/2 4*C','line_number':811,'multiline':False]['text':' to avoid bicubic zero error','line_number':873,'multiline':False]['text':' batch_size, channels, spec_width, spec_heigth --> batch_size, channels, spec_heigth * freq_ratio, spec_width // freq_ratio','line_number':885,'multiline':False]['text':' rearrange batch_size (height width) channels -> batch_size channel height width','line_number':930,'multiline':False]['text':' rearrange batch_size (height width) channels -> batch_size channel height width','line_number':959,'multiline':False]['text':' here we use the original (not downsampled) height and width','line_number':960,'multiline':False]['text':' rearrange batch_size (height width) channels -> batch_size channel height width','line_number':969,'multiline':False]['text':' group 2D CNN','line_number':990,'multiline':False]['text':' Copied from transformers.models.roberta.modeling_roberta.RobertaEmbeddings with Roberta->ClapText, persistent=False->persistent=True','line_number':1142,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEmbeddings.__init__','line_number':1148,'multiline':False]['text':' self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load','line_number':1155,'multiline':False]['text':' any TensorFlow checkpoint file','line_number':1156,'multiline':False]['text':' position_ids (1, len position emb) is contiguous in memory and exported when serialized','line_number':1159,'multiline':False]['text':' End copy','line_number':1168,'multiline':False]['text':' Create the position ids from the input token ids. Any padded tokens remain padded.','line_number':1179,'multiline':False]['text':' Setting the token_type_ids to the registered buffer in constructor where it is all zeros, which usually occurs','line_number':1191,'multiline':False]['text':' when its auto-generated, registered buffer helps users when tracing the model without passing token_type_ids, solves','line_number':1192,'multiline':False]['text':' issue #5664','line_number':1193,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfAttention with Bert->ClapText','line_number':1232,'multiline':False]['text':' If this is instantiated as a cross-attention module, the keys','line_number':1277,'multiline':False]['text':' and values come from an encoder; the attention mask needs to be','line_number':1278,'multiline':False]['text':' such that the encoder's padding tokens are not attended to.','line_number':1279,'multiline':False]['text':' reuse k,v, cross_attentions','line_number':1283,'multiline':False]['text':' if cross_attention save Tuple(torch.Tensor, torch.Tensor) of all cross attention key/value_states.','line_number':1304,'multiline':False]['text':' Further calls to cross_attention layer can then reuse all cross-attention','line_number':1305,'multiline':False]['text':' key/value_states (first "if" case)','line_number':1306,'multiline':False]['text':' if uni-directional self-attention (decoder) save Tuple(torch.Tensor, torch.Tensor) of','line_number':1307,'multiline':False]['text':' all previous decoder key/value_states. Further calls to uni-directional self-attention','line_number':1308,'multiline':False]['text':' can concat previous decoder key/value_states to current projected key/value_states (third "elif" case)','line_number':1309,'multiline':False]['text':' if encoder bi-directional self-attention `past_key_value` is always `None`','line_number':1310,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':1313,'multiline':False]['text':' fp16 compatibility','line_number':1328,'multiline':False]['text':' Apply the attention mask is (precomputed for all layers in ClapTextModel forward() function)','line_number':1340,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':1343,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':1346,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':1347,'multiline':False]['text':' Mask heads if we want to','line_number':1350,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertSelfOutput','line_number':1367,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertAttention with Bert->ClapText','line_number':1382,'multiline':False]['text':' Prune linear layers','line_number':1397,'multiline':False]['text':' Update hyper params and store pruned heads','line_number':1403,'multiline':False]['text':' add attentions if we output them','line_number':1428,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertIntermediate','line_number':1432,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertOutput','line_number':1448,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertLayer with Bert->ClapText','line_number':1463,'multiline':False]['text':' decoder uni-directional self-attention cached key/values tuple is at positions 1,2','line_number':1489,'multiline':False]['text':' if decoder, the last output is tuple of self-attn cache','line_number':1500,'multiline':False]['text':' add self attentions if we output attention weights','line_number':1505,'multiline':False]['text':' cross_attn cached key/values tuple is at positions 3,4 of past_key_value tuple','line_number':1515,'multiline':False]['text':' add cross attentions if we output attention weights','line_number':1527,'multiline':False]['text':' add cross-attn cache to positions 3,4 of present_key_value tuple','line_number':1529,'multiline':False]['text':' if decoder, return the attn key/values as the last output','line_number':1538,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertEncoder with Bert->ClapText','line_number':1550,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertPooler','line_number':1644,'multiline':False]['text':' We "pool" the model by simply taking the hidden state corresponding','line_number':1652,'multiline':False]['text':' to the first token.','line_number':1653,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1700,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel.__init__ with Bert->ClapText','line_number':1769,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1779,'multiline':False]['text':' Copied from transformers.models.bert.modeling_bert.BertModel.forward','line_number':1788,'multiline':False]['text':' past_key_values_length','line_number':1849,'multiline':False]['text':' We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]','line_number':1863,'multiline':False]['text':' ourselves in which case we just need to make it broadcastable to all heads.','line_number':1864,'multiline':False]['text':' If a 2D or 3D attention mask is provided for the cross-attention','line_number':1867,'multiline':False]['text':' we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]','line_number':1868,'multiline':False]['text':' Prepare head mask if needed','line_number':1878,'multiline':False]['text':' 1.0 in head_mask indicate we keep the head','line_number':1879,'multiline':False]['text':' attention_probs has shape bsz x n_heads x N x N','line_number':1880,'multiline':False]['text':' input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]','line_number':1881,'multiline':False]['text':' and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]','line_number':1882,'multiline':False]['text':' Initialize weights and apply final processing','line_number':1953,'multiline':False]['text':' Use CLAP model's config for some fields (if specified) instead of those of audio & text components.','line_number':1982,'multiline':False]['text':' Use CLAP model's config for some fields (if specified) instead of those of audio & text components.','line_number':2087,'multiline':False]['text':' normalized features','line_number':2117,'multiline':False]['text':' cosine similarity as logits','line_number':2121,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2161,'multiline':False]['text':' Initialize weights and apply final processing','line_number':2238,'multiline':False]