['text':' coding=utf-8','line_number':1,'multiline':False]['text':' Copyright 2022 NVIDIA The HuggingFace Inc. team. All rights reserved.','line_number':2,'multiline':False]['text':'','line_number':3,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':4,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':5,'multiline':False]['text':' You may obtain a copy of the License at','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':8,'multiline':False]['text':'','line_number':9,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':10,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':11,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':12,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':13,'multiline':False]['text':' limitations under the License.','line_number':14,'multiline':False]['text':' General docstring','line_number':41,'multiline':False]['text':' Base docstring','line_number':44,'multiline':False]['text':' Image classification docstring','line_number':48,'multiline':False]['text':' See all SegFormer models at https://huggingface.co/models?filter=segformer','line_number':54,'multiline':False]['text':' Copied from transformers.models.convnext.modeling_tf_convnext.TFConvNextDropPath with ConvNext->Segformer','line_number':58,'multiline':False]['text':' (batch_size, height, width, num_channels) -> (batch_size, height*width, num_channels)','line_number':98,'multiline':False]['text':' this can be fed to a Transformer layer','line_number':99,'multiline':False]['text':' Reshape from [batch_size, seq_length, all_head_size]','line_number':156,'multiline':False]['text':' to [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':157,'multiline':False]['text':' Transpose the tensor from [batch_size, seq_length, num_attention_heads, attention_head_size]','line_number':161,'multiline':False]['text':' to [batch_size, num_attention_heads, seq_length, attention_head_size]','line_number':162,'multiline':False]['text':' Reshape to (batch_size, height, width, num_channels)','line_number':179,'multiline':False]['text':' Apply sequence reduction','line_number':181,'multiline':False]['text':' Reshape back to (batch_size, seq_len, num_channels)','line_number':183,'multiline':False]['text':' Take the dot product between "query" and "key" to get the raw attention scores.','line_number':190,'multiline':False]['text':' Normalize the attention scores to probabilities.','line_number':196,'multiline':False]['text':' This is actually dropping out entire tokens to attend to, which might','line_number':199,'multiline':False]['text':' seem a bit unusual, but is taken from the original Transformer paper.','line_number':200,'multiline':False]['text':' (batch_size, seq_len_q, all_head_size)','line_number':206,'multiline':False]['text':' add attentions if we output them','line_number':279,'multiline':False]['text':' in Segformer, layernorm is applied before self-attention','line_number':406,'multiline':False]['text':' add self attentions if we output attention weights','line_number':414,'multiline':False]['text':' first residual connection (with stochastic depth)','line_number':416,'multiline':False]['text':' second residual connection (with stochastic depth)','line_number':421,'multiline':False]['text':' stochastic depth decay rule','line_number':452,'multiline':False]['text':' patch embeddings','line_number':455,'multiline':False]['text':' Transformer blocks','line_number':469,'multiline':False]['text':' each block consists of layers','line_number':473,'multiline':False]['text':' Layer norms','line_number':493,'multiline':False]['text':' first, obtain patch embeddings','line_number':515,'multiline':False]['text':' second, send embeddings through blocks','line_number':518,'multiline':False]['text':' (each block consists of multiple layers i.e., list of layers)','line_number':519,'multiline':False]['text':' third, apply layer norm','line_number':532,'multiline':False]['text':' fourth, optionally reshape back to (batch_size, height, width, num_channels)','line_number':535,'multiline':False]['text':' hierarchical Transformer encoder','line_number':576,'multiline':False]['text':' When running on CPU, `tf.keras.layers.Conv2D` doesn't support `NCHW` format.','line_number':594,'multiline':False]['text':' So change the input format from `NCHW` to `NHWC`.','line_number':595,'multiline':False]['text':' shape = (batch_size, in_height, in_width, in_channels=num_channels)','line_number':596,'multiline':False]['text':' Change to NCHW output format to have uniformity in the modules','line_number':607,'multiline':False]['text':' Change the other hidden state outputs to NCHW as well','line_number':610,'multiline':False]['text':' hierarchical Transformer encoder','line_number':702,'multiline':False]['text':' Classifier head','line_number':754,'multiline':False]['text':' convert last hidden states to (batch_size, height*width, hidden_size)','line_number':783,'multiline':False]['text':' global average pooling','line_number':788,'multiline':False]['text':' linear layers which will unify the channel dimension of each of the encoder blocks to the same config.decoder_hidden_size','line_number':845,'multiline':False]['text':' the following 3 layers implement the ConvModule of the original implementation','line_number':852,'multiline':False]['text':' unify channel dimension','line_number':873,'multiline':False]['text':' upsample','line_number':880,'multiline':False]['text':' logits of shape (batch_size, height/4, width/4, num_labels)','line_number':891,'multiline':False]['text':' upsample logits to the images' original size','line_number':928,'multiline':False]['text':' `labels` is of shape (batch_size, height, width)','line_number':929,'multiline':False]['text':' compute weighted loss','line_number':933,'multiline':False]['text':' Reduction strategy in the similar spirit with','line_number':940,'multiline':False]['text':' https://github.com/huggingface/transformers/blob/main/src/transformers/modeling_tf_utils.py#L210','line_number':941,'multiline':False]['text':' we need the intermediate hidden states','line_number':994,'multiline':False]['text':' make logits of shape (batch_size, num_labels, height, width) to','line_number':1009,'multiline':False]['text':' keep them consistent across APIs','line_number':1010,'multiline':False]