['text':' Copyright 2020 The HuggingFace Team. All rights reserved.','line_number':1,'multiline':False]['text':'','line_number':2,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':3,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':4,'multiline':False]['text':' You may obtain a copy of the License at','line_number':5,'multiline':False]['text':'','line_number':6,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':9,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':10,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':11,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':12,'multiline':False]['text':' limitations under the License.','line_number':13,'multiline':False]['text':' Used to test Auto{Config, Model, Tokenizer} model_type detection.','line_number':148,'multiline':False]['text':' Used to test the hub','line_number':150,'multiline':False]['text':' Not critical, only usable on the sandboxed CI instance.','line_number':154,'multiline':False]['text':' KEY isn't set, default to `default`.','line_number':162,'multiline':False]['text':' KEY is set, convert it to True or False.','line_number':165,'multiline':False]['text':' More values are supported, but let's keep the message simple.','line_number':169,'multiline':False]['text':' We don't need a hard dependency on pytest in the main library','line_number':210,'multiline':False]['text':' We don't need a hard dependency on pytest in the main library','line_number':229,'multiline':False]['text':' We don't need a hard dependency on pytest in the main library','line_number':246,'multiline':False]['text':' We don't need a hard dependency on pytest in the main library','line_number':262,'multiline':False]['text':' We don't need a hard dependency on pytest in the main library','line_number':277,'multiline':False]['text':' Set env var CUDA_VISIBLE_DEVICES="" to force cpu-mode','line_number':763,'multiline':False]['text':' try creating device to see if provided device is valid','line_number':779,'multiline':False]['text':' this function caller's __file__','line_number':1082,'multiline':False]['text':'','line_number':1095,'multiline':False]['text':' Helper functions for dealing with testing text outputs','line_number':1096,'multiline':False]['text':' The original code came from:','line_number':1097,'multiline':False]['text':' https://github.com/fastai/fastai/blob/master/tests/utils/text.py','line_number':1098,'multiline':False]['text':' When any function contains print() calls that get overwritten, like progress bars,','line_number':1101,'multiline':False]['text':' a special care needs to be applied, since under pytest -s captured output (capsys','line_number':1102,'multiline':False]['text':' or contextlib.redirect_stdout) contains any temporary printed strings, followed by','line_number':1103,'multiline':False]['text':' \r's. This helper function ensures that the buffer will contain the same output','line_number':1104,'multiline':False]['text':' with and without -s in pytest, by turning:','line_number':1105,'multiline':False]['text':' foo bar\r tar mar\r final message','line_number':1106,'multiline':False]['text':' into:','line_number':1107,'multiline':False]['text':' final message','line_number':1108,'multiline':False]['text':' it can handle a single string or a multiline buffer','line_number':1109,'multiline':False]['text':' in tests it's the best to capture only the stream that's wanted, otherwise','line_number':1221,'multiline':False]['text':' it's easy to miss things, so unless you need to capture both streams, use the','line_number':1222,'multiline':False]['text':' subclasses below (less typing). Or alternatively, configure `CaptureStd` to','line_number':1223,'multiline':False]['text':' disable the stream you don't need to test.','line_number':1224,'multiline':False]['text':' adapted from https://stackoverflow.com/a/64789046/9201239','line_number':1306,'multiline':False]['text':' get_auto_remove_tmp_dir feature:','line_number':1407,'multiline':False]['text':' figure out the resolved paths for repo_root, tests, examples, etc.','line_number':1410,'multiline':False]['text':' defining the most likely desired behavior for when a custom path is provided.','line_number':1519,'multiline':False]['text':' this most likely indicates the debug mode where we want an easily locatable dir that:','line_number':1520,'multiline':False]['text':' 1. gets cleared out before the test (if it already exists)','line_number':1521,'multiline':False]['text':' 2. is left intact after the test','line_number':1522,'multiline':False]['text':' using provided path','line_number':1528,'multiline':False]['text':' to avoid nuking parts of the filesystem, only relative paths are allowed','line_number':1531,'multiline':False]['text':' ensure the dir is empty to start with','line_number':1537,'multiline':False]['text':' defining the most likely desired behavior for when a unique tmp path is auto generated','line_number':1544,'multiline':False]['text':' (not a debug mode), here we require a unique tmp dir that:','line_number':1545,'multiline':False]['text':' 1. is empty before the test (it will be empty in this situation anyway)','line_number':1546,'multiline':False]['text':' 2. gets fully removed after the test','line_number':1547,'multiline':False]['text':' using unique tmp dir (always empty, regardless of `before`)','line_number':1553,'multiline':False]['text':' register for deletion','line_number':1557,'multiline':False]['text':' returned data is in KB so convert to bytes','line_number':1591,'multiline':False]['text':' get_auto_remove_tmp_dir feature: remove registered temp dirs','line_number':1596,'multiline':False]['text':' delete all the env variables having `ACCELERATE` in them','line_number':1604,'multiline':False]['text':' from https://stackoverflow.com/a/34333710/9201239','line_number':1621,'multiline':False]['text':' List of environment variables being updated or removed.','line_number':1637,'multiline':False]['text':' Environment variables and values to restore on exit.','line_number':1639,'multiline':False]['text':' Environment variables and values to remove on exit.','line_number':1641,'multiline':False]['text':' --- pytest conf functions --- #','line_number':1653,'multiline':False]['text':' to avoid multiple invocation from tests/conftest.py and examples/conftest.py - make sure it's called only once','line_number':1655,'multiline':False]['text':' custom durations report','line_number':1725,'multiline':False]['text':' note: there is no need to call pytest --durations=XX to get this separate report','line_number':1726,'multiline':False]['text':' adapted from https://github.com/pytest-dev/pytest/blob/897f151e/src/_pytest/runner.py#L66','line_number':1727,'multiline':False]['text':' sec','line_number':1736,'multiline':False]['text':' expecting that the reports were --tb=long (default) so we chop them off here to the last frame','line_number':1745,'multiline':False]['text':' chop off the optional leading extra frames, leaving only the last one','line_number':1753,'multiline':False]['text':' note: not printing out any rep.sections to keep the report short','line_number':1756,'multiline':False]['text':' use ready-made report funcs, we are just hijacking the filehandle to log to a dedicated file each','line_number':1758,'multiline':False]['text':' adapted from https://github.com/pytest-dev/pytest/blob/897f151e/src/_pytest/terminal.py#L814','line_number':1759,'multiline':False]['text':' note: some pytest plugins may interfere by hijacking the default `terminalreporter` (e.g.','line_number':1760,'multiline':False]['text':' pytest-instafail does that)','line_number':1761,'multiline':False]['text':' report failures with line/short/long styles','line_number':1763,'multiline':False]['text':' full tb','line_number':1764,'multiline':False]['text':' config.option.tbstyle = "short" # short tb','line_number':1769,'multiline':False]['text':' one line per error','line_number':1774,'multiline':False]['text':' normal warnings','line_number':1785,'multiline':False]['text':' final warnings','line_number':1786,'multiline':False]['text':' emulate -rA (used in summary_passes() and short_test_summary())','line_number':1788,'multiline':False]['text':' Skip the `passes` report, as it starts to take more than 5 minutes, and sometimes it timeouts on CircleCI if it','line_number':1790,'multiline':False]['text':' takes > 10 minutes (as this part doesn't generate any output on the terminal).','line_number':1791,'multiline':False]['text':' (also, it seems there is no useful information in this report, and we rarely need to read it)','line_number':1792,'multiline':False]['text':' with open(report_files["passes"], "w") as f:','line_number':1793,'multiline':False]['text':'     tr._tw = create_terminal_writer(config, f)','line_number':1794,'multiline':False]['text':'     tr.summary_passes()','line_number':1795,'multiline':False]['text':' restore:','line_number':1805,'multiline':False]['text':' --- distributed testing functions --- #','line_number':1811,'multiline':False]['text':' adapted from https://stackoverflow.com/a/59041913/9201239','line_number':1813,'multiline':False]['text':' noqa','line_number':1814,'multiline':False]['text':' note: there is a warning for a possible deadlock when using `wait` with huge amounts of data in the pipe','line_number':1846,'multiline':False]['text':' https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.wait','line_number':1847,'multiline':False]['text':'','line_number':1848,'multiline':False]['text':' If it starts hanging, will need to switch to the following code. The problem is that no data','line_number':1849,'multiline':False]['text':' will be seen until it's done and if it hangs for example there will be no debug info.','line_number':1850,'multiline':False]['text':' out, err = await p.communicate()','line_number':1851,'multiline':False]['text':' return _RunOutput(p.returncode, out, err)','line_number':1852,'multiline':False]['text':' XXX: the timeout doesn't seem to make any difference here','line_number':1863,'multiline':False]['text':' check that the subprocess actually did run and produced some output, should the test rely on','line_number':1888,'multiline':False]['text':' the remote side to do the testing','line_number':1889,'multiline':False]['text':' length can only be 1 if dict is empty','line_number':1953,'multiline':False]['text':' otherwise make sure json has correct format (at least 3 lines)','line_number':1956,'multiline':False]['text':' each key one line, ident should be 2, min length is 3','line_number':1958,'multiline':False]['text':' These utils relate to ensuring the right error message is received when running scripts','line_number':1972,'multiline':False]['text':' We can't send `unittest.TestCase` to the child, otherwise we get issues regarding pickle.','line_number':2093,'multiline':False]['text':' Kill the child process if we can't get outputs from it in time: otherwise, the hanging subprocess prevents','line_number':2098,'multiline':False]['text':' the test to exit properly.','line_number':2099,'multiline':False]['text':' This regular expression is used to find doctest examples in a','line_number':2160,'multiline':False]['text':' string.  It defines three groups: `source` is the source code','line_number':2161,'multiline':False]['text':' (including leading indentation and prompts); `indent` is the','line_number':2162,'multiline':False]['text':' indentation of the first (PS1) line of the source code; and','line_number':2163,'multiline':False]['text':' `want` is the expected output (including leading indentation).','line_number':2164,'multiline':False]['text':' fmt: off','line_number':2165,'multiline':False]['text':' fmt: on','line_number':2182,'multiline':False]['text':' !!!!!!!!!!! HF Specific !!!!!!!!!!!','line_number':2184,'multiline':False]['text':' !!!!!!!!!!! HF Specific !!!!!!!!!!!','line_number':2186,'multiline':False]['text':' Get the main obj in case of it being wrapped','line_number':2221,'multiline':False]['text':' Type ignored because this is a private function.','line_number':2224,'multiline':False]['text':' type:ignore[misc]','line_number':2225,'multiline':False]['text':' Type ignored because this is a private function.','line_number':2234,'multiline':False]['text':' type:ignore[misc]','line_number':2235,'multiline':False]['text':' !!!!!!!!!!! HF Specific !!!!!!!!!!!','line_number':2258,'multiline':False]['text':' !!!!!!!!!!! HF Specific !!!!!!!!!!!','line_number':2260,'multiline':False]['text':' skip empty doctests and cuda','line_number':2269,'multiline':False]['text':' Some device agnostic functions return values. Need to guard against `None`','line_number':2279,'multiline':False]['text':' instead at user level.','line_number':2280,'multiline':False]['text':' Mappings from device names to callable functions to support device agnostic','line_number':2287,'multiline':False]['text':' testing.','line_number':2288,'multiline':False]['text':' If `TRANSFORMERS_TEST_DEVICE_SPEC` is enabled we need to import extra entries','line_number':2307,'multiline':False]['text':' into device to function mappings.','line_number':2308,'multiline':False]['text':' Try to strip extension for later import – also verifies we are importing a','line_number':2316,'multiline':False]['text':' python file.','line_number':2317,'multiline':False]['text':' Imported file must contain `DEVICE_NAME`. If it doesn't, terminate early.','line_number':2325,'multiline':False]['text':' Try to import the function directly','line_number':2340,'multiline':False]['text':' If the function doesn't exist, and there is no default, throw an error','line_number':2344,'multiline':False]['text':' Add one entry here for each `BACKEND_*` dictionary.','line_number':2350,'multiline':False]