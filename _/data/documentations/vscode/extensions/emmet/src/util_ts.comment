['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' Lazy load vscode-emmet-helper instead of importing it','line_number':26,'multiline':False]['text':' directly to reduce the start-up time of the extension','line_number':27,'multiline':False]['text':'*
 * Update Emmet Helper to use user snippets from the extensionsPath setting
 ','line_number':34,'multiline':True]['text':'*
 * Migrate old configuration(string) for extensionsPath to new type(string[])
 * https://github.com/microsoft/vscode/issues/117517
 ','line_number':55,'multiline':True]['text':' Get the detail info of emmet.extensionsPath setting','line_number':60,'multiline':False]['text':' Update Global setting if the value type is string or the value is null','line_number':63,'multiline':False]['text':' Update Workspace setting if the value type is string or the value is null','line_number':69,'multiline':False]['text':' Update WorkspaceFolder setting if the value type is string or the value is null','line_number':75,'multiline':False]['text':'*
 * Mapping between languages that support Emmet and completion trigger characters
 ','line_number':83,'multiline':True]['text':' Explicitly map languages that have built-in grammar in VS Code to their parent language','line_number':120,'multiline':False]['text':' to get emmet completion support','line_number':121,'multiline':False]['text':' For other languages, users will have to use `emmet.includeLanguages` or','line_number':122,'multiline':False]['text':' language specific extensions can provide emmet completion support','line_number':123,'multiline':False]['text':'*
* Get the corresponding emmet mode for given vscode language mode
* E.g.: jsx for typescriptreact/javascriptreact or pug for jade
* If the language is not supported by emmet or has been excluded via `excludeLanguages` setting,
* then nothing is returned
*
* @param excludedLanguages Array of language ids that user has chosen to exclude for emmet
','line_number':140,'multiline':True]['text':' treat tsx like jsx','line_number':161,'multiline':False]['text':' map sass-indented to sass','line_number':164,'multiline':False]['text':'*
 * Traverse the given document backward & forward from given position
 * to find a complete ruleset, then parse just that to return a Stylesheet
 * @param document vscode.TextDocument
 * @param position vscode.Position
 ','line_number':183,'multiline':True]['text':' Go forward until we find a closing brace.','line_number':249,'multiline':False]['text':' Go back until we found an opening brace. If we find a closing one, consume its pair and continue.','line_number':267,'multiline':False]['text':' We are at an opening brace. We need to include its selector.','line_number':297,'multiline':False]['text':'*
 * Returns node corresponding to given position in the given root node
 ','line_number':339,'multiline':True]['text':' We have an HTML node in this case.','line_number':358,'multiline':False]['text':' In case this node is an invalid unpaired HTML node,','line_number':359,'multiline':False]['text':' we still want to search its children','line_number':360,'multiline':False]['text':'*
 * Finds the HTML node within an HTML document at a given position
 * If position is inside a script tag of type template, then it will be parsed to find the inner HTML node as well
 ','line_number':384,'multiline':True]['text':' If the currentNode is a script one, first set up its subtree and then find HTML node.','line_number':392,'multiline':False]['text':' blank out the rest of the document and generate the subtree.','line_number':413,'multiline':False]['text':' blank out the rest of the document and generate the subtree.','line_number':428,'multiline':False]['text':'*
 * Returns the deepest non comment node under given node
 ','line_number':465,'multiline':True]['text':' Same node','line_number':557,'multiline':False]['text':' Not siblings','line_number':562,'multiline':False]['text':' node2 is ancestor of node1','line_number':564,'multiline':False]['text':' node1 is ancestor of node2','line_number':569,'multiline':False]['text':' Get the highest ancestor of node1 that should be commented','line_number':574,'multiline':False]['text':' Get the highest ancestor of node2 that should be commented','line_number':579,'multiline':False]['text':' return true if they're both undefined','line_number':596,'multiline':False]['text':' return false if only one of them is undefined','line_number':600,'multiline':False]['text':' jsx, xml and xsl syntaxes need to have self closing tags unless otherwise configured by user','line_number':611,'multiline':False]['text':' Old Emmet format','line_number':615,'multiline':False]['text':' Emmet 2.0 format','line_number':616,'multiline':False]['text':'*
 * Itereates by each child, as well as nested child's children, in their order
 * and invokes `fn` for each. If `fn` function returns `false`, iteration stops
 ','line_number':636,'multiline':True]['text':'*
 * Returns `name` CSS property from given `rule`
 ','line_number':649,'multiline':True]['text':'*
 * Returns css property under caret in given editor or `null` if such node cannot
 * be found
 ','line_number':656,'multiline':True]['text':'*
	 * List of all known syntaxes, from emmetio/emmet
	 ','line_number':732,'multiline':True]