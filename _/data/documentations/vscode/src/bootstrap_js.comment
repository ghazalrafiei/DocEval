['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'@ts-check','line_number':6,'multiline':False]['text':' Simple module style to support node.js and browser environments','line_number':9,'multiline':False]['text':' Node.js','line_number':12,'multiline':False]['text':' Browser','line_number':17,'multiline':False]['text':' @ts-ignore','line_number':19,'multiline':False]['text':'#region global bootstrapping','line_number':28,'multiline':False]['text':' increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)','line_number':30,'multiline':False]['text':' Workaround for Electron not installing a handler to ignore SIGPIPE','line_number':34,'multiline':False]['text':' (https://github.com/electron/electron/issues/13254)','line_number':35,'multiline':False]['text':' See https://github.com/microsoft/vscode-remote-release/issues/6543','line_number':38,'multiline':False]['text':' We would normally install a SIGPIPE listener in bootstrap.js','line_number':39,'multiline':False]['text':' But in certain situations, the console itself can be in a broken pipe state','line_number':40,'multiline':False]['text':' so logging SIGPIPE to the console will cause an infinite async loop','line_number':41,'multiline':False]['text':'#endregion','line_number':49,'multiline':False]['text':'#region Add support for using node_modules.asar','line_number':52,'multiline':False]['text':' @ts-ignore','line_number':63,'multiline':False]['text':' @ts-ignore','line_number':66,'multiline':False]['text':'#endregion','line_number':82,'multiline':False]['text':'#region URI helpers','line_number':85,'multiline':False]['text':'*
	 * @param {string} path
	 * @param {{ isWindows?: boolean, scheme?: string, fallbackAuthority?: string }} config
	 * @returns {string}
	 ','line_number':87,'multiline':True]['text':' Since we are building a URI, we normalize any backslash','line_number':94,'multiline':False]['text':' to slashes and we ensure that the path begins with a '/'.','line_number':95,'multiline':False]['text':'* @type {string} ','line_number':101,'multiline':True]['text':' Windows: in order to support UNC paths (which start with '//')','line_number':104,'multiline':False]['text':' that have their own authority, we do not use the provided authority','line_number':105,'multiline':False]['text':' but rather preserve it.','line_number':106,'multiline':False]['text':' Otherwise we optionally add the provided authority if specified','line_number':111,'multiline':False]['text':'${config.fallbackAuthority || ''}${pathName}`);','line_number':113,'multiline':False]['text':'#endregion','line_number':119,'multiline':False]['text':'#region NLS helpers','line_number':122,'multiline':False]['text':'*
	 * @returns {{locale?: string, availableLanguages: {[lang: string]: string;}, pseudo?: boolean } | undefined}
	 ','line_number':124,'multiline':True]['text':' Get the nls configuration as early as possible.','line_number':129,'multiline':False]['text':'* @type {{ availableLanguages: {}; loadBundle?: (bundle: string, language: string, cb: (err: Error | undefined, result: string | undefined) => void) => void; _resolvedLanguagePackCoreLocation?: string; _corruptedFile?: string }} ','line_number':131,'multiline':True]['text':' Ignore','line_number':137,'multiline':False]['text':'*
			 * @param {string} bundle
			 * @param {string} language
			 * @param {(err: Error | undefined, result: string | undefined) => void} cb
			 ','line_number':144,'multiline':True]['text':' @ts-ignore','line_number':157,'multiline':False]['text':'g, '!')}.nls.json`).then(function (content) {','line_number':158,'multiline':False]['text':'*
	 * @returns {typeof import('./vs/base/parts/sandbox/electron-sandbox/globals') | undefined}
	 ','line_number':178,'multiline':True]['text':' @ts-ignore','line_number':184,'multiline':False]['text':'*
	 * @returns {import('./vs/base/parts/sandbox/electron-sandbox/globals').ISandboxNodeProcess | NodeJS.Process | undefined}
	 ','line_number':188,'multiline':True]['text':' Native environment (sandboxed)','line_number':194,'multiline':False]['text':' Native environment (non-sandboxed)','line_number':198,'multiline':False]['text':'*
	 * @returns {import('./vs/base/parts/sandbox/electron-sandbox/electronTypes').IpcRenderer | undefined}
	 ','line_number':204,'multiline':True]['text':'*
	 * @param {string[]} pathSegments
	 * @returns {Promise<string>}
	 ','line_number':216,'multiline':True]['text':'*
	 * @param {string} path
	 * @param {string} content
	 * @returns {Promise<void>}
	 ','line_number':233,'multiline':True]['text':'#endregion','line_number':251,'multiline':False]