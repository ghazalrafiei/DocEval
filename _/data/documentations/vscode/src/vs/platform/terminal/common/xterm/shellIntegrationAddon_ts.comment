['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' Importing types is safe in any layer','line_number':14,'multiline':False]['text':' eslint-disable-next-line local/code-import-patterns','line_number':15,'multiline':False]['text':' Importing types is safe in any layer','line_number':19,'multiline':False]['text':' eslint-disable-next-line local/code-import-patterns','line_number':20,'multiline':False]['text':'*
 * Shell integration is a feature that enhances the terminal's understanding of what's happening
 * in the shell by injecting special sequences into the shell's prompt using the "Set Text
 * Parameters" sequence (`OSC Ps ; Pt ST`).
 *
 * Definitions:
 * - OSC: `\x1b]`
 * - Ps:  A single (usually optional) numeric parameter, composed of one or more digits.
 * - Pt:  A text parameter composed of printable characters.
 * - ST: `\x7`
 *
 * This is inspired by a feature of the same name in the FinalTerm, iTerm2 and kitty terminals.
 ','line_number':26,'multiline':True]['text':'*
 * The identifier for the first numeric parameter (`Ps`) for OSC commands used by shell integration.
 ','line_number':40,'multiline':True]['text':'*
	 * Sequences pioneered by FinalTerm.
	 ','line_number':44,'multiline':True]['text':'*
	 * Sequences pioneered by VS Code. The number is derived from the least significant digit of
	 * "VSC" when encoded in hex ("VSC" = 0x56, 0x53, 0x43).
	 ','line_number':48,'multiline':True]['text':'*
	 * Sequences pioneered by iTerm.
	 ','line_number':53,'multiline':True]['text':'*
 * VS Code-specific shell integration sequences. Some of these are based on more common alternatives
 * like those pioneered in FinalTerm. The decision to move to entirely custom sequences was to try
 * to improve reliability and prevent the possibility of applications confusing the terminal. If
 * multiple shell integration scripts run, VS Code will prioritize the VS Code-specific ones.
 *
 * It's recommended that authors of shell integration scripts use the common sequences (eg. 133)
 * when building general purpose scripts and the VS Code-specific (633) when targeting only VS Code
 * or when there are no other alternatives.
 ','line_number':61,'multiline':True]['text':'*
	 * The start of the prompt, this is expected to always appear at the start of a line.
	 * Based on FinalTerm's `OSC 133 ; A ST`.
	 ','line_number':72,'multiline':True]['text':'*
	 * The start of a command, ie. where the user inputs their command.
	 * Based on FinalTerm's `OSC 133 ; B ST`.
	 ','line_number':78,'multiline':True]['text':'*
	 * Sent just before the command output begins.
	 * Based on FinalTerm's `OSC 133 ; C ST`.
	 ','line_number':84,'multiline':True]['text':'*
	 * Sent just after a command has finished. The exit code is optional, when not specified it
	 * means no command was run (ie. enter on empty prompt or ctrl+c).
	 * Based on FinalTerm's `OSC 133 ; D [; <ExitCode>] ST`.
	 ','line_number':90,'multiline':True]['text':'*
	 * Explicitly set the command line. This helps workaround performance and reliability problems
	 * with parsing out the command, such as conpty not guaranteeing the position of the sequence or
	 * the shell not guaranteeing that the entire command is even visible.
	 *
	 * The command line can escape ascii characters using the `\xAB` format, where AB are the
	 * hexadecimal representation of the character code (case insensitive), and escape the `\`
	 * character using `\\`. It's required to escape semi-colon (`0x3b`) and characters 0x20 and
	 * below, this is particularly important for new line and semi-colon.
	 *
	 * Some examples:
	 *
	 * ```
	 * "\"  -> "\\"
	 * "\n" -> "\x0a"
	 * ";"  -> "\x3b"
	 * ```
	 *
	 * An optional nonce can be provided which is may be required by the terminal in order enable
	 * some features. This helps ensure no malicious command injection has occurred.
	 *
	 * Format: `OSC 633 ; E [; <CommandLine> [; <Nonce>]] ST`.
	 ','line_number':97,'multiline':True]['text':'*
	 * Similar to prompt start but for line continuations.
	 *
	 * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.
	 ','line_number':122,'multiline':True]['text':'*
	 * Similar to command start but for line continuations.
	 *
	 * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.
	 ','line_number':129,'multiline':True]['text':'*
	 * The start of the right prompt.
	 *
	 * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.
	 ','line_number':136,'multiline':True]['text':'*
	 * The end of the right prompt.
	 *
	 * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.
	 ','line_number':143,'multiline':True]['text':'*
	 * Set an arbitrary property: `OSC 633 ; P ; <Property>=<Value> ST`, only known properties will
	 * be handled.
	 *
	 * Known properties:
	 *
	 * - `Cwd` - Reports the current working directory to the terminal.
	 * - `IsWindows` - Indicates whether the terminal is using a Windows backend like winpty or
	 *   conpty. This may be used to enable additional heuristics as the positioning of the shell
	 *   integration sequences are not guaranteed to be correct. Valid values: `True`, `False`.
	 *
	 * WARNING: Any other properties may be changed and are not guaranteed to work in the future.
	 ','line_number':150,'multiline':True]['text':'*
	 * Sets a mark/point-of-interest in the buffer. `OSC 633 ; SetMark [; Id=<string>] [; Hidden]`
	 * `Id` - The identifier of the mark that can be used to reference it
	 * `Hidden` - When set, the mark will be available to reference internally but will not visible
	 *
	 * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.
	 ','line_number':165,'multiline':True]['text':'*
 * ITerm sequences
 ','line_number':175,'multiline':True]['text':'*
	 * Sets a mark/point-of-interest in the buffer. `OSC 1337 ; SetMark`
	 ','line_number':179,'multiline':True]['text':'*
	 * Reports current working directory (CWD). `OSC 1337 ; CurrentDir=<Cwd> ST`
	 ','line_number':184,'multiline':True]['text':'*
 * The shell integration addon extends xterm by reading shell integration sequences and creating
 * capabilities and passing along relevant sequences to the capabilities. This is meant to
 * encapsulate all handling/parsing of sequences so the capabilities don't need to.
 ','line_number':190,'multiline':True]['text':' Pass the sequence along to the capability','line_number':257,'multiline':False]['text':' It was considered to disable the common protocol in order to not confuse the VS Code','line_number':258,'multiline':False]['text':' shell integration if both happen for some reason. This doesn't work for powerlevel10k','line_number':259,'multiline':False]['text':' when instant prompt is enabled though. If this does end up being a problem we could pass','line_number':260,'multiline':False]['text':' a type flag through the capability calls','line_number':261,'multiline':False]['text':' Ignore the command line for these sequences as it's unreliable for example in powerlevel10k','line_number':268,'multiline':False]['text':' Pass the sequence along to the capability','line_number':322,'multiline':False]['text':' Cast to strict checked index access','line_number':325,'multiline':False]['text':' Unrecognized sequence','line_number':400,'multiline':False]['text':' Checking for known `<key>=<value>` pairs.','line_number':422,'multiline':False]['text':' Note that unlike `VSCodeOscPt.Property`, iTerm2 does not interpret backslash or hex-escape sequences.','line_number':423,'multiline':False]['text':' See: https://github.com/gnachman/iTerm2/blob/bb0882332cec5196e4de4a4225978d746e935279/sources/VT100Terminal.m#L2089-L2105','line_number':424,'multiline':False]['text':' No '=' was found, so it's not a property assignment.','line_number':428,'multiline':False]['text':' Encountered: `OSC 1337 ; CurrentDir=<Cwd> ST`','line_number':434,'multiline':False]['text':' Unrecognized sequence','line_number':441,'multiline':False]['text':' Encountered `OSC 9 ; 9 ; <cwd> ST`','line_number':453,'multiline':False]['text':' Unrecognized sequence','line_number':460,'multiline':False]['text':'*
	 * Handles the sequence: `OSC 7 ; scheme://cwd ST`
	 ','line_number':464,'multiline':True]['text':')) {','line_number':474,'multiline':False]['text':' Unrecognized sequence','line_number':482,'multiline':False]['text':' Backslash ('\') followed by an escape operator: either another '\', or 'x' and two hex chars.','line_number':534,'multiline':False]['text':' If it's a hex value, parse it to a character.','line_number':536,'multiline':False]['text':' Otherwise the operator is '\', which we return literally, now unescaped.','line_number':537,'multiline':False]['text':' No '=' was found.','line_number':544,'multiline':False]['text':' Sanity check, this shouldn't happen in practice','line_number':557,'multiline':False]