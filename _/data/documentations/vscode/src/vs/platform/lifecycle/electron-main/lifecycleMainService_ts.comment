['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
	 * The window that is loaded to a new workspace.
	 ','line_number':26,'multiline':True]['text':'*
	 * The workspace the window is loaded into.
	 ','line_number':31,'multiline':True]['text':'*
	 * More details why the window loads to a new workspace.
	 ','line_number':36,'multiline':True]['text':'*
	 * The application exits normally.
	 ','line_number':44,'multiline':True]['text':'*
	 * The application exits abnormally and is being
	 * killed with an exit code (e.g. from integration
	 * test run)
	 ','line_number':49,'multiline':True]['text':'*
	 * More details why the application is shutting down.
	 ','line_number':59,'multiline':True]['text':'*
	 * Allows to join the shutdown. The promise can be a long running operation but it
	 * will block the application from closing.
	 ','line_number':64,'multiline':True]['text':'*
	 * Allows a handler to deal with relaunching the application. The return
	 * value indicates if the relaunch is handled or not.
	 ','line_number':73,'multiline':True]['text':'*
	 * Will be true if the program was restarted (e.g. due to explicit request or update).
	 ','line_number':89,'multiline':True]['text':'*
	 * Will be true if the program was requested to quit.
	 ','line_number':94,'multiline':True]['text':'*
	 * A flag indicating in what phase of the lifecycle we currently are.
	 ','line_number':99,'multiline':True]['text':'*
	 * An event that fires when the application is about to shutdown before any window is closed.
	 * The shutdown can still be prevented by any window that vetos this event.
	 ','line_number':104,'multiline':True]['text':'*
	 * An event that fires after the onBeforeShutdown event has been fired and after no window has
	 * vetoed the shutdown sequence. At this point listeners are ensured that the application will
	 * quit without veto.
	 ','line_number':110,'multiline':True]['text':'*
	 * An event that fires when a window is loading. This can either be a window opening for the
	 * first time or a window reloading or changing to another URL.
	 ','line_number':117,'multiline':True]['text':'*
	 * An event that fires before a window closes. This event is fired after any veto has been dealt
	 * with so that listeners know for sure that the window will close without veto.
	 ','line_number':123,'multiline':True]['text':'*
	 * Make a `ICodeWindow` known to the lifecycle main service.
	 ','line_number':129,'multiline':True]['text':'*
	 * Reload a window. All lifecycle event handlers are triggered.
	 ','line_number':134,'multiline':True]['text':'*
	 * Unload a window for the provided reason. All lifecycle event handlers are triggered.
	 ','line_number':139,'multiline':True]['text':' veto ','line_number':142,'multiline':True]['text':'*
	 * Restart the application with optional arguments (CLI). All lifecycle event handlers are triggered.
	 ','line_number':144,'multiline':True]['text':'*
	 * Sets a custom handler for relaunching the application.
	 ','line_number':149,'multiline':True]['text':'*
	 * Shutdown the application normally. All lifecycle event handlers are triggered.
	 ','line_number':154,'multiline':True]['text':' veto ','line_number':157,'multiline':True]['text':'*
	 * Forcefully shutdown the application and optionally set an exit code.
	 *
	 * This method should only be used in rare situations where it is important
	 * to set an exit code (e.g. running tests) or when the application is
	 * not in a healthy state and should terminate asap.
	 *
	 * This method does not fire the normal lifecycle events to the windows,
	 * that normally can be vetoed. Windows are destroyed without a chance
	 * of components to participate. The only lifecycle event handler that
	 * is triggered is `onWillShutdown` in the main process.
	 ','line_number':159,'multiline':True]['text':'*
	 * Returns a promise that resolves when a certain lifecycle phase
	 * has started.
	 ','line_number':173,'multiline':True]['text':'*
	 * The first phase signals that we are about to startup.
	 ','line_number':182,'multiline':True]['text':'*
	 * Services are ready and first window is about to open.
	 ','line_number':187,'multiline':True]['text':'*
	 * This phase signals a point in time after the window has opened
	 * and is typically the best place to do work that is not required
	 * for the window to open.
	 ','line_number':192,'multiline':True]['text':'*
	 * The last phase after a window has opened and some time has passed
	 * (2-5 seconds).
	 ','line_number':199,'multiline':True]['text':' remove the marker right after if found','line_number':263,'multiline':False]['text':' before-quit: an event that is fired if application quit was','line_number':270,'multiline':False]['text':' requested but before any window was closed.','line_number':271,'multiline':False]['text':' Emit event to indicate that we are about to shutdown','line_number':280,'multiline':False]['text':' macOS: can run without any window open. in that case we fire','line_number':284,'multiline':False]['text':' the onWillShutdown() event directly because there is no veto','line_number':285,'multiline':False]['text':' to be expected.','line_number':286,'multiline':False]['text':' window-all-closed: an event that only fires when the last window','line_number':293,'multiline':False]['text':' was closed. We override this event to be in charge if app.quit()','line_number':294,'multiline':False]['text':' should be called or not.','line_number':295,'multiline':False]['text':' Windows/Linux: we quit when all windows have closed','line_number':299,'multiline':False]['text':' Mac: we only quit when quit was requested','line_number':300,'multiline':False]['text':' will-quit: an event that is fired after all windows have been','line_number':307,'multiline':False]['text':' closed, but before actually quitting.','line_number':308,'multiline':False]['text':' Prevent the quit until the shutdown promise was resolved','line_number':312,'multiline':False]['text':' Start shutdown sequence','line_number':315,'multiline':False]['text':' Wait until shutdown is signaled to be complete','line_number':318,'multiline':False]['text':' Resolve pending quit promise now without veto','line_number':322,'multiline':False]['text':' no veto ','line_number':323,'multiline':True]['text':' Quit again, this time do not prevent this, since our','line_number':325,'multiline':False]['text':' will-quit listener is only installed "once". Also','line_number':326,'multiline':False]['text':' remove any listener we have that is no longer needed','line_number':327,'multiline':False]['text':' shutdown is already running','line_number':341,'multiline':False]['text':' Settle all shutdown event joiners','line_number':361,'multiline':False]['text':' Then, always make sure at the end','line_number':368,'multiline':False]['text':' the state service is flushed.','line_number':369,'multiline':False]['text':' track window count','line_number':417,'multiline':False]['text':' Window Will Load','line_number':420,'multiline':False]['text':' Window Before Closing: Main -> Renderer','line_number':423,'multiline':False]['text':' The window already acknowledged to be closed','line_number':427,'multiline':False]['text':' Otherwise prevent unload and handle it from window','line_number':437,'multiline':False]['text':' Fire onBeforeCloseWindow before actually closing','line_number':447,'multiline':False]['text':' No veto, close window now','line_number':451,'multiline':False]['text':' Window After Closing','line_number':456,'multiline':False]['text':' update window count','line_number':460,'multiline':False]['text':' clear window listeners','line_number':463,'multiline':False]['text':' if there are no more code windows opened, fire the onWillShutdown event, unless','line_number':466,'multiline':False]['text':' we are on macOS where it is perfectly fine to close the last window and','line_number':467,'multiline':False]['text':' the application continues running (unless quit was actually requested)','line_number':468,'multiline':False]['text':' Only reload when the window has not vetoed this','line_number':477,'multiline':False]['text':' veto ','line_number':484,'multiline':True]['text':' Ensure there is only 1 unload running at the same time','line_number':486,'multiline':False]['text':' Start unload and remember in map until finished','line_number':492,'multiline':False]['text':' veto ','line_number':501,'multiline':True]['text':' Always allow to unload a window that is not yet ready','line_number':503,'multiline':False]['text':' first ask the window itself if it vetos the unload','line_number':510,'multiline':False]['text':' finally if there are no vetos, unload the renderer','line_number':519,'multiline':False]['text':' no veto','line_number':527,'multiline':False]['text':' a veto resolves any pending quit with veto','line_number':530,'multiline':False]['text':' veto ','line_number':531,'multiline':True]['text':' a veto resets the pending quit request flag','line_number':533,'multiline':False]['text':' veto','line_number':536,'multiline':False]['text':' veto ','line_number':547,'multiline':True]['text':' no veto','line_number':554,'multiline':False]['text':' veto','line_number':558,'multiline':False]['text':' veto ','line_number':576,'multiline':True]['text':' Windows: we are about to restart and as such we need to restore the original','line_number':579,'multiline':False]['text':' current working directory we had on startup to get the exact same startup','line_number':580,'multiline':False]['text':' behaviour. As such, we briefly change back to that directory and then when','line_number':581,'multiline':False]['text':' Code starts it will set it back to the installation directory again.','line_number':582,'multiline':False]['text':' veto ','line_number':599,'multiline':True]['text':' Remember if we are about to restart','line_number':608,'multiline':False]['text':' Store as field to access it from a window cancellation','line_number':615,'multiline':False]['text':' Calling app.quit() will trigger the close handlers of each opened window','line_number':618,'multiline':False]['text':' and only if no window vetoed the shutdown, we will get the will-quit event','line_number':619,'multiline':False]['text':' helps diagnose issues with exiting from smoke tests','line_number':629,'multiline':False]['text':' `app.relaunch()` does not quit automatically, so we quit first,','line_number':664,'multiline':False]['text':' check for vetoes and then relaunch from the `app.on('quit')` event','line_number':665,'multiline':False]['text':' will restart ','line_number':666,'multiline':True]['text':' Give main process participants a chance to orderly shutdown','line_number':675,'multiline':False]['text':' From extension tests we have seen issues where calling app.exit()','line_number':678,'multiline':False]['text':' with an opened window can lead to native crashes (Linux). As such,','line_number':679,'multiline':False]['text':' we should make sure to destroy any opened window before calling','line_number':680,'multiline':False]['text':' `app.exit()`.','line_number':681,'multiline':False]['text':'','line_number':682,'multiline':False]['text':' Note: Electron implements a similar logic here:','line_number':683,'multiline':False]['text':' https://github.com/electron/electron/blob/fe5318d753637c3903e23fc1ed1b263025887b6a/spec-main/window-helpers.ts#L5','line_number':684,'multiline':False]['text':' Still do not block more than 1s','line_number':688,'multiline':False]['text':' Destroy any opened window: we do not unload windows here because','line_number':691,'multiline':False]['text':' there is a chance that the unload is veto'd or long running due','line_number':692,'multiline':False]['text':' to a participant within the window. this is not wanted when we','line_number':693,'multiline':False]['text':' are asked to kill the application.','line_number':694,'multiline':False]['text':' Now exit either after 1s or all windows destroyed','line_number':712,'multiline':False]