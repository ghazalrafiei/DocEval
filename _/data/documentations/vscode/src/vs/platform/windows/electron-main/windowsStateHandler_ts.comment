['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' When a window looses focus, save all windows state. This allows to','line_number':78,'multiline':False]['text':' prevent loss of window-state data when OS is restarted without properly','line_number':79,'multiline':False]['text':' shutting down the application (https://github.com/microsoft/vscode/issues/87171)','line_number':80,'multiline':False]['text':' Handle various lifecycle events around windows','line_number':87,'multiline':False]['text':' clear last closed window state when a new window opens. this helps on macOS where','line_number':92,'multiline':False]['text':' otherwise closing the last window, opening a new window and then quitting would','line_number':93,'multiline':False]['text':' use the state of the previously closed window when restarting.','line_number':94,'multiline':False]['text':' try to save state before destroy because close will not fire','line_number':99,'multiline':False]['text':' Note that onBeforeShutdown() and onBeforeCloseWindow() are fired in different order depending on the OS:','line_number':103,'multiline':False]['text':' - macOS: since the app will not quit when closing the last window, you will always first get','line_number':104,'multiline':False]['text':'          the onBeforeShutdown() event followed by N onBeforeCloseWindow() events for each window','line_number':105,'multiline':False]['text':' - other: on other OS, closing the last window will quit the app so the order depends on the','line_number':106,'multiline':False]['text':'          user interaction: closing the last window will first trigger onBeforeCloseWindow()','line_number':107,'multiline':False]['text':'          and then onBeforeShutdown(). Using the quit action however will first issue onBeforeShutdown()','line_number':108,'multiline':False]['text':'          and then onBeforeCloseWindow().','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' Here is the behavior on different OS depending on action taken (Electron 1.7.x):','line_number':111,'multiline':False]['text':'','line_number':112,'multiline':False]['text':' Legend','line_number':113,'multiline':False]['text':' -  quit(N): quit application with N windows opened','line_number':114,'multiline':False]['text':' - close(1): close one window via the window close button','line_number':115,'multiline':False]['text':' - closeAll: close all windows via the taskbar command','line_number':116,'multiline':False]['text':' - onBeforeShutdown(N): number of windows reported in this event handler','line_number':117,'multiline':False]['text':' - onBeforeCloseWindow(N, M): number of windows reported and quitRequested boolean in this event handler','line_number':118,'multiline':False]['text':'','line_number':119,'multiline':False]['text':' macOS','line_number':120,'multiline':False]['text':' 	-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)','line_number':121,'multiline':False]['text':' 	-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)','line_number':122,'multiline':False]['text':' 	-     quit(0): onBeforeShutdown(0)','line_number':123,'multiline':False]['text':' 	-    close(1): onBeforeCloseWindow(1, false)','line_number':124,'multiline':False]['text':'','line_number':125,'multiline':False]['text':' Windows','line_number':126,'multiline':False]['text':' 	-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)','line_number':127,'multiline':False]['text':' 	-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)','line_number':128,'multiline':False]['text':' 	-    close(1): onBeforeCloseWindow(2, false)[not last window]','line_number':129,'multiline':False]['text':' 	-    close(1): onBeforeCloseWindow(1, false), onBeforeShutdown(0)[last window]','line_number':130,'multiline':False]['text':' 	- closeAll(2): onBeforeCloseWindow(2, false), onBeforeCloseWindow(2, false), onBeforeShutdown(0)','line_number':131,'multiline':False]['text':'','line_number':132,'multiline':False]['text':' Linux','line_number':133,'multiline':False]['text':' 	-     quit(1): onBeforeShutdown(1), onBeforeCloseWindow(1, true)','line_number':134,'multiline':False]['text':' 	-     quit(2): onBeforeShutdown(2), onBeforeCloseWindow(2, true), onBeforeCloseWindow(2, true)','line_number':135,'multiline':False]['text':' 	-    close(1): onBeforeCloseWindow(2, false)[not last window]','line_number':136,'multiline':False]['text':' 	-    close(1): onBeforeCloseWindow(1, false), onBeforeShutdown(0)[last window]','line_number':137,'multiline':False]['text':' 	- closeAll(2): onBeforeCloseWindow(2, false), onBeforeCloseWindow(2, false), onBeforeShutdown(0)','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':' TODO@electron workaround for Electron not being able to restore','line_number':148,'multiline':False]['text':' multiple (native) fullscreen windows on the same display at once','line_number':149,'multiline':False]['text':' on macOS.','line_number':150,'multiline':False]['text':' https://github.com/electron/electron/issues/34367','line_number':151,'multiline':False]['text':' 1.) Find a last active window (pick any other first window otherwise)','line_number':160,'multiline':False]['text':' always allow fullscreen for active window','line_number':171,'multiline':False]['text':' 2.) Find extension host window','line_number':176,'multiline':False]['text':' 3.) All windows (except extension host) for N >= 2 to support `restoreWindows: all` or for auto update','line_number':192,'multiline':False]['text':'','line_number':193,'multiline':False]['text':' Careful here: asking a window for its window state after it has been closed returns bogus values (width: 0, height: 0)','line_number':194,'multiline':False]['text':' so if we ever want to persist the UI state of the last closed window (window count === 1), it has','line_number':195,'multiline':False]['text':' to come from the stored lastClosedWindowState on Win/Linux at least','line_number':196,'multiline':False]['text':' Persist','line_number':215,'multiline':False]['text':' See note on #onBeforeShutdown() for details how these events are flowing','line_number':224,'multiline':False]['text':' during quit, many windows close in parallel so let it be handled in the before-quit handler','line_number':227,'multiline':False]['text':' On Window close, update our stored UI state of this window','line_number':230,'multiline':False]['text':' do not let test run window state overwrite our extension development state','line_number':233,'multiline':False]['text':' Any non extension host window with same workspace or folder','line_number':236,'multiline':False]['text':' On Windows and Linux closing the last window will trigger quit. Since we are storing all UI state','line_number':248,'multiline':False]['text':' before quitting, we need to remember the UI state of this window to be able to persist it.','line_number':249,'multiline':False]['text':' On macOS we keep the last closed window state ready in case the user wants to quit right after or','line_number':250,'multiline':False]['text':' wants to open another window, in which case we use this state over the persisted one.','line_number':251,'multiline':False]['text':' Fullscreen state gets special treatment','line_number':272,'multiline':False]['text':' Window state is not from a previous session: only allow fullscreen if we inherit it or user wants fullscreen','line_number':275,'multiline':False]['text':' Window state is from a previous session: only allow fullscreen when we got updated or user wants to restore','line_number':281,'multiline':False]['text':' Restore state unless we are running extension tests','line_number':297,'multiline':False]['text':' extension development host Window - load from stored settings if any','line_number':300,'multiline':False]['text':' Known Workspace - load from stored settings','line_number':305,'multiline':False]['text':' Known Folder - load from stored settings','line_number':314,'multiline':False]['text':' Empty windows with backups','line_number':322,'multiline':False]['text':' First Window','line_number':330,'multiline':False]['text':'','line_number':337,'multiline':False]['text':' In any other case, we do not have any stored settings for the window state, so we come up with something smart','line_number':338,'multiline':False]['text':'','line_number':339,'multiline':False]['text':' We want the new window to open on the same display that the last active one is in','line_number':341,'multiline':False]['text':' Single Display','line_number':345,'multiline':False]['text':' Multi Display','line_number':350,'multiline':False]['text':' on mac there is 1 menu per window so we need to use the monitor where the cursor currently is','line_number':353,'multiline':False]['text':' if we have a last active window, use that display for the new window','line_number':359,'multiline':False]['text':' fallback to primary display or first display','line_number':364,'multiline':False]['text':' Compute x/y based on display bounds','line_number':370,'multiline':False]['text':' Note: important to use Math.round() because Electron does not seem to be too happy about','line_number':371,'multiline':False]['text':' display coordinates that are not absolute numbers.','line_number':372,'multiline':False]['text':' Check for newWindowDimensions setting and adjust accordingly','line_number':377,'multiline':False]['text':' only take mode (fixes https://github.com/microsoft/vscode/issues/19331)','line_number':390,'multiline':False]['text':' flag as default state','line_number':403,'multiline':False]