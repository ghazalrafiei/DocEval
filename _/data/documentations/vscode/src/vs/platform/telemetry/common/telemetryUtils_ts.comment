['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * A special class used to denoting a telemetry value which should not be clean.
 * This is because that value is "Trusted" not to contain identifiable information such as paths.
 * NOTE: This is used as an API type as well, and should not be changed.
 ','line_number':18,'multiline':True]['text':' This is merely used as an identifier as the instance will be lost during serialization over the exthost','line_number':24,'multiline':False]['text':' noop','line_number':50,'multiline':False]['text':' noop','line_number':54,'multiline':False]['text':' __GDPR__FRAGMENT__
	"URIDescriptor" : {
		"mimeType" : { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
		"scheme": { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
		"ext": { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
		"path": { "classification": "SystemMetaData", "purpose": "FeatureInsight" }
	}
','line_number':69,'multiline':True]['text':' Debounce the event by 1000 ms and merge all affected keys into one event','line_number':85,'multiline':False]['text':'*
 * Determines whether or not we support logging telemetry.
 * This checks if the product is capable of collecting telemetry but not whether or not it can send it
 * For checking the user setting and what telemetry you can send please check `getTelemetryLevel`.
 * This returns true if `--disable-telemetry` wasn't used, the product.json allows for telemetry, and we're not testing an extension
 * If false telemetry is disabled throughout the product
 * @param productService
 * @param environmentService
 * @returns false - telemetry is completely disabled, true - telemetry is logged locally, but may not be sent
 ','line_number':111,'multiline':True]['text':' If it's OSS and telemetry isn't disabled via the CLI we will allow it for logging only purposes','line_number':122,'multiline':False]['text':'*
 * Checks to see if we're in logging only mode to debug telemetry.
 * This is if telemetry is enabled and we're in OSS, but no telemetry key is provided so it's not being sent just logged.
 * @param productService
 * @param environmentService
 * @returns True if telemetry is actually disabled and we're only logging for debug purposes
 ','line_number':129,'multiline':True]['text':' If we're testing an extension, log telemetry for debug purposes','line_number':137,'multiline':False]['text':' Logging only mode is only for OSS','line_number':141,'multiline':False]['text':'*
 * Determines how telemetry is handled based on the user's configuration.
 *
 * @param configurationService
 * @returns OFF, ERROR, ON
 ','line_number':157,'multiline':True]['text':' If `telemetry.enableCrashReporter` is false or `telemetry.enableTelemetry' is false, disable telemetry','line_number':168,'multiline':False]['text':' Maps new telemetry setting to a telemetry level','line_number':173,'multiline':False]['text':' enforce property names less than 150 char, take the last 150 char','line_number':203,'multiline':False]['text':'enforce property value to be less than 8192 char, take the first 8192 char','line_number':217,'multiline':False]['text':' https://docs.microsoft.com/en-us/azure/azure-monitor/app/api-custom-events-metrics#limits','line_number':218,'multiline':False]['text':' TODO unsure why this is here and not in _getData','line_number':255,'multiline':False]['text':'*
 * Whether or not this is an internal user
 * @param productService The product service
 * @param configService The config servivce
 * @returns true if internal, false otherwise
 ','line_number':270,'multiline':True]['text':'#region Telemetry Cleaning','line_number':294,'multiline':False]['text':'*
 * Cleans a given stack of possible paths
 * @param stack The stack to sanitize
 * @param cleanupPatterns Cleanup patterns to remove from the stack
 * @returns The cleaned stack
 ','line_number':296,'multiline':True]['text':' Fast check to see if it is a file path to avoid doing unnecessary heavy regex work','line_number':304,'multiline':False]['text':' Check to see if the any cleanupIndexes partially overlap with this match','line_number':333,'multiline':False]['text':' anoynimize user file paths that do not need to be retained or cleaned up.','line_number':336,'multiline':False]['text':'*
 * Attempts to remove commonly leaked PII
 * @param property The property which will be removed if it contains user data
 * @returns The new value for the property
 ','line_number':349,'multiline':True]['text':' If for some reason it is undefined we skip it (this shouldn't be possible);','line_number':355,'multiline':False]['text':' Regex which matches @*.site','line_number':365,'multiline':False]['text':' Check for common user data in the telemetry events','line_number':368,'multiline':False]['text':'*
 * Does a best possible effort to clean a data object from any possible PII.
 * @param data The data object to clean
 * @param paths Any additional patterns that should be removed from the data set
 * @returns A new object with the PII removed
 ','line_number':379,'multiline':True]['text':' If it's a trusted value it means it's okay to skip cleaning so we don't clean it','line_number':388,'multiline':False]['text':' We only know how to clean strings','line_number':393,'multiline':False]['text':' First we anonymize any possible file paths','line_number':397,'multiline':False]['text':' Then we do a simple regex replace with the defined patterns','line_number':400,'multiline':False]['text':' Lastly, remove commonly leaked PII','line_number':405,'multiline':False]['text':'#endregion','line_number':414,'multiline':False]