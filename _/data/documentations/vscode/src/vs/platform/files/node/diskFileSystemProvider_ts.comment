['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Enable graceful-fs very early from here to have it enabled
 * in all contexts that leverage the disk file system provider.
 ','line_number':31,'multiline':True]['text':' not enabled by default because very spammy','line_number':53,'multiline':False]['text':'#region File Capabilities','line_number':62,'multiline':False]['text':'#endregion','line_number':88,'multiline':False]['text':'#region File Metadata Resolving','line_number':90,'multiline':False]['text':' cannot use fs.stat() here to support links properly','line_number':94,'multiline':False]['text':' intentionally not using ctime here, we want the creation time','line_number':98,'multiline':False]['text':' always resolve target the link points to if any','line_number':125,'multiline':False]['text':' ignore errors for individual entries that can arise from permission denied','line_number':132,'multiline':False]['text':' Signal file type by checking for file / directory, except:','line_number':144,'multiline':False]['text':' - symbolic links pointing to nonexistent files are FileType.Unknown','line_number':145,'multiline':False]['text':' - files that are neither file nor directory are FileType.Unknown','line_number':146,'multiline':False]['text':' Always signal symbolic link as file type additionally','line_number':158,'multiline':False]['text':'#endregion','line_number':166,'multiline':False]['text':'#region File Reading/Writing','line_number':168,'multiline':False]['text':' Await pending locks for resource. It is possible for a new lock being','line_number':176,'multiline':False]['text':' added right after opening, so we have to loop over locks until no lock','line_number':177,'multiline':False]['text':' remains.','line_number':178,'multiline':False]['text':' Store new','line_number':185,'multiline':False]['text':' Delete lock if it is still ours','line_number':194,'multiline':False]['text':' Open lock','line_number':200,'multiline':False]['text':' When the read should be atomic, make sure','line_number':212,'multiline':False]['text':' to await any pending locks for the resource','line_number':213,'multiline':False]['text':' and lock for the duration of the read.','line_number':214,'multiline':False]['text':' read into chunks of 256kb each to reduce IPC overhead','line_number':239,'multiline':False]['text':' atomic writes are unsupported for symbolic links because','line_number':258,'multiline':False]['text':' we need to ensure that the `rename` operation is atomic','line_number':259,'multiline':False]['text':' and that only works if the link is on the same disk.','line_number':260,'multiline':False]['text':' Since we do not know where the symbolic link points to','line_number':261,'multiline':False]['text':' we refuse to write atomically.','line_number':262,'multiline':False]['text':' ignore stat errors here and just proceed trying to write','line_number':266,'multiline':False]['text':' atomic writing supported','line_number':269,'multiline':False]['text':' Ensure to create locks for all resources involved','line_number':274,'multiline':False]['text':' since atomic write involves mutiple disk operations','line_number':275,'multiline':False]['text':' and resources.','line_number':276,'multiline':False]['text':' Write to temp resource first','line_number':284,'multiline':False]['text':' disable write lock ','line_number':285,'multiline':True]['text':' Rename over existing to ensure atomic replace','line_number':289,'multiline':False]['text':' Cleanup in case of rename error','line_number':294,'multiline':False]['text':' ignore - we want the outer error to bubble up','line_number':298,'multiline':False]['text':' Validate target unless { create: true, overwrite: true }','line_number':313,'multiline':False]['text':' Open','line_number':327,'multiline':False]['text':' Write content at once','line_number':330,'multiline':False]['text':' Writes: guard multiple writes to the same resource','line_number':355,'multiline':False]['text':' behind a single lock to prevent races when writing','line_number':356,'multiline':False]['text':' from multiple places at the same time to the same file','line_number':357,'multiline':False]['text':' Determine whether to unlock the file (write only)','line_number':366,'multiline':False]['text':' File mode indicating writable by owner ','line_number':370,'multiline':True]['text':' ignore any errors here and try to just write','line_number':375,'multiline':False]['text':' Determine file flags for opening (read vs write)','line_number':380,'multiline':False]['text':' On Windows and if the file exists, we use a different strategy of saving the file','line_number':386,'multiline':False]['text':' by first truncating the file and then writing with r+ flag. This helps to save hidden files on Windows','line_number':387,'multiline':False]['text':' (see https://github.com/microsoft/vscode/issues/931) and prevent removing alternate data streams','line_number':388,'multiline':False]['text':' (see https://github.com/microsoft/vscode/issues/6363)','line_number':389,'multiline':False]['text':' After a successful truncate() the flag can be set to 'r+' which will not truncate.','line_number':392,'multiline':False]['text':' We take opts.create as a hint that the file is opened for writing','line_number':401,'multiline':False]['text':' as such we use 'w' to truncate an existing or create the','line_number':402,'multiline':False]['text':' file otherwise. we do not allow reading.','line_number':403,'multiline':False]['text':' Otherwise we assume the file is opened for reading','line_number':409,'multiline':False]['text':' as such we use 'r' to neither truncate, nor create','line_number':410,'multiline':False]['text':' the file.','line_number':411,'multiline':False]['text':' Finally open handle to file path','line_number':415,'multiline':False]['text':' Release lock because we have no valid handle','line_number':420,'multiline':False]['text':' if we did open a lock during this operation','line_number':421,'multiline':False]['text':' Rethrow as file system provider error','line_number':424,'multiline':False]['text':' Remember this handle to track file position of the handle','line_number':432,'multiline':False]['text':' we init the position to 0 since the file descriptor was','line_number':433,'multiline':False]['text':' just created and the position was not moved so far (see','line_number':434,'multiline':False]['text':' also http://man7.org/linux/man-pages/man2/open.2.html -','line_number':435,'multiline':False]['text':' "The file offset is set to the beginning of the file.")','line_number':436,'multiline':False]['text':' remember that this handle was used for writing','line_number':439,'multiline':False]['text':' Remember that this handle has an associated lock','line_number':447,'multiline':False]['text':' There is a slight chance that a resource lock for a','line_number':451,'multiline':False]['text':' handle was not yet disposed when we acquire a new','line_number':452,'multiline':False]['text':' lock, so we must ensure to dispose the previous lock','line_number':453,'multiline':False]['text':' before storing a new one for the same handle, other','line_number':454,'multiline':False]['text':' wise we end up in a deadlock situation','line_number':455,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/142462','line_number':456,'multiline':False]['text':' It is very important that we keep any associated lock','line_number':468,'multiline':False]['text':' for the file handle before attempting to call `fs.close(fd)`','line_number':469,'multiline':False]['text':' because of a possible race condition: as soon as a file','line_number':470,'multiline':False]['text':' handle is released, the OS may assign the same handle to','line_number':471,'multiline':False]['text':' the next `fs.open` call and as such it is possible that our','line_number':472,'multiline':False]['text':' lock is getting overwritten','line_number':473,'multiline':False]['text':' Remove this handle from map of positions','line_number':478,'multiline':False]['text':' If a handle is closed that was used for writing, ensure','line_number':481,'multiline':False]['text':' to flush the contents to disk if possible.','line_number':482,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/9589','line_number':485,'multiline':False]['text':' In some exotic setups it is well possible that node fails to sync','line_number':487,'multiline':False]['text':' In that case we disable flushing and log the error to our logger','line_number':488,'multiline':False]['text':' only delete from map if this is still our lock!','line_number':501,'multiline':False]['text':' When calling fs.read/write we try to avoid passing in the "pos" argument and','line_number':527,'multiline':False]['text':' rather prefer to pass in "null" because this avoids an extra seek(pos)','line_number':528,'multiline':False]['text':' call that in some cases can even fail (e.g. when opening a file over FTP -','line_number':529,'multiline':False]['text':' see https://github.com/microsoft/vscode/issues/73884).','line_number':530,'multiline':False]['text':'','line_number':531,'multiline':False]['text':' as such, we compare the passed in position argument with our last known','line_number':532,'multiline':False]['text':' position for the file descriptor and use "null" if they match.','line_number':533,'multiline':False]['text':' pos !== null signals that previously a position was used that is','line_number':545,'multiline':False]['text':' not null. node.js documentation explains, that in this case','line_number':546,'multiline':False]['text':' the internal file pointer is not moving and as such we do not move','line_number':547,'multiline':False]['text':' our position pointer.','line_number':548,'multiline':False]['text':'','line_number':549,'multiline':False]['text':' Docs: "If position is null, data will be read from the current file position,','line_number':550,'multiline':False]['text':' and the file position will be updated. If position is an integer, the file position','line_number':551,'multiline':False]['text':' will remain unchanged."','line_number':552,'multiline':False]['text':' do not modify the position','line_number':554,'multiline':False]['text':' bytesLength = number is a signal that the read/write operation was','line_number':557,'multiline':False]['text':' successful and as such we need to advance the position in the Map','line_number':558,'multiline':False]['text':'','line_number':559,'multiline':False]['text':' Docs (http://man7.org/linux/man-pages/man2/read.2.html):','line_number':560,'multiline':False]['text':' "On files that support seeking, the read operation commences at the','line_number':561,'multiline':False]['text':' file offset, and the file offset is incremented by the number of','line_number':562,'multiline':False]['text':' bytes read."','line_number':563,'multiline':False]['text':'','line_number':564,'multiline':False]['text':' Docs (http://man7.org/linux/man-pages/man2/write.2.html):','line_number':565,'multiline':False]['text':' "For a seekable file (i.e., one to which lseek(2) may be applied, for','line_number':566,'multiline':False]['text':' example, a regular file) writing takes place at the file offset, and','line_number':567,'multiline':False]['text':' the file offset is incremented by the number of bytes actually','line_number':568,'multiline':False]['text':' written."','line_number':569,'multiline':False]['text':' bytesLength = null signals an error in the read/write operation','line_number':574,'multiline':False]['text':' and as such we drop the handle from the Map because the position','line_number':575,'multiline':False]['text':' is unspecificed at this point.','line_number':576,'multiline':False]['text':' We know at this point that the file to write to is truncated and thus empty','line_number':585,'multiline':False]['text':' if the write now fails, the file remains empty. as such we really try hard','line_number':586,'multiline':False]['text':' to ensure the write succeeds by retrying up to three times.','line_number':587,'multiline':False]['text':' ms delay ','line_number':588,'multiline':True]['text':' retries ','line_number':588,'multiline':True]['text':'#endregion','line_number':606,'multiline':False]['text':'#region Move/Copy/Delete/Create Folder','line_number':608,'multiline':False]['text':' `fs.unlink` will throw when used on directories','line_number':633,'multiline':False]['text':' we try to detect this error and then see if the','line_number':634,'multiline':False]['text':' provided resource is actually a directory. in that','line_number':635,'multiline':False]['text':' case we use `fs.rmdir` to delete the directory.','line_number':636,'multiline':False]['text':' ignore','line_number':644,'multiline':False]['text':' simulate node.js behaviour here and do a no-op if paths match','line_number':667,'multiline':False]['text':' Validate the move operation can perform','line_number':672,'multiline':False]['text':' Rename','line_number':675,'multiline':False]['text':' Rewrite some typical errors that can happen especially around symlinks','line_number':679,'multiline':False]['text':' to something the user can better understand','line_number':680,'multiline':False]['text':' simulate node.js behaviour here and do a no-op if paths match','line_number':694,'multiline':False]['text':' Validate the copy operation can perform','line_number':699,'multiline':False]['text':' Copy','line_number':702,'multiline':False]['text':' Rewrite some typical errors that can happen especially around symlinks','line_number':706,'multiline':False]['text':' to something the user can better understand','line_number':707,'multiline':False]['text':' ignore case ','line_number':723,'multiline':True]['text':' You cannot copy the same file to the same location with different','line_number':728,'multiline':False]['text':' path case unless you are on a case sensitive file system','line_number':729,'multiline':False]['text':' You can move the same file to the same location with different','line_number':734,'multiline':False]['text':' path case on case insensitive file systems','line_number':735,'multiline':False]['text':' Here we have to see if the target to move/copy to exists or not.','line_number':741,'multiline':False]['text':' We need to respect the `overwrite` option to throw in case the','line_number':742,'multiline':False]['text':' target exists.','line_number':743,'multiline':False]['text':' target does not exist so we are good','line_number':752,'multiline':False]['text':' Handle existing target for move/copy','line_number':759,'multiline':False]['text':' node.js can move/copy a file over an existing file without having to delete it first','line_number':761,'multiline':False]['text':'#endregion','line_number':767,'multiline':False]['text':'#region Clone File','line_number':769,'multiline':False]['text':' optimistically assume parent folders exist ','line_number':772,'multiline':True]['text':' cloning is only supported `from` and `to` are different files','line_number':781,'multiline':False]['text':' Implement clone by using `fs.copyFile`, however setup locks','line_number':784,'multiline':False]['text':' for both `from` and `to` because node.js does not ensure','line_number':785,'multiline':False]['text':' this to be an atomic operation','line_number':786,'multiline':False]['text':'#endregion','line_number':810,'multiline':False]['text':'#region File Watching','line_number':812,'multiline':False]['text':'#endregion','line_number':830,'multiline':False]['text':'#region Helpers','line_number':832,'multiline':False]['text':' avoid double conversion','line_number':836,'multiline':False]['text':' If the write error signals permission issues, we try','line_number':872,'multiline':False]['text':' to read the file's mode to see if the file is write','line_number':873,'multiline':False]['text':' locked.','line_number':874,'multiline':False]['text':' File mode indicating writable by owner ','line_number':878,'multiline':True]['text':' ignore - return original error','line_number':882,'multiline':False]['text':'#endregion','line_number':889,'multiline':False]