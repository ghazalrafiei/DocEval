['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
	 * The path to watch.
	 ','line_number':16,'multiline':True]['text':'*
	 * Whether to watch recursively or not.
	 ','line_number':21,'multiline':True]['text':'*
	 * A set of glob patterns or paths to exclude from watching.
	 ','line_number':26,'multiline':True]['text':'*
	 * An optional set of glob patterns or paths to include for
	 * watching. If not provided, all paths are considered for
	 * events.
	 ','line_number':31,'multiline':True]['text':'*
	 * If provided, file change events from the watcher that
	 * are a result of this watch request will carry the same
	 * id.
	 ','line_number':38,'multiline':True]['text':'*
	 * The watcher will be non-recursive.
	 ','line_number':48,'multiline':True]['text':'*
	 * The watcher will be recursive.
	 ','line_number':56,'multiline':True]['text':'*
	 * @deprecated this only exists for WSL1 support and should never
	 * be used in any other case.
	 ','line_number':61,'multiline':True]['text':'*
	 * A normalized file change event from the raw events
	 * the watcher emits.
	 ','line_number':76,'multiline':True]['text':'*
	 * An event to indicate a message that should get logged.
	 ','line_number':82,'multiline':True]['text':'*
	 * An event to indicate an error occurred from the watcher
	 * that is unrecoverable. Listeners should restart the
	 * watcher if possible.
	 ','line_number':87,'multiline':True]['text':'*
	 * Configures the watcher to watch according to the
	 * requests. Any existing watched path that is not
	 * in the array, will be removed from watching and
	 * any new path will be added to watching.
	 ','line_number':94,'multiline':True]['text':'*
	 * Enable verbose logging in the watcher.
	 ','line_number':102,'multiline':True]['text':'*
	 * Stop all watchers.
	 ','line_number':107,'multiline':True]['text':'*
	 * If `true`, will enable polling for all watchers, otherwise
	 * will enable it for paths included in the string array.
	 *
	 * @deprecated this only exists for WSL1 support and should never
	 * be used in any other case.
	 ','line_number':119,'multiline':True]['text':'*
	 * If polling is enabled (via `usePolling`), defines the duration
	 * in which the watcher will poll for changes.
	 *
	 * @deprecated this only exists for WSL1 support and should never
	 * be used in any other case.
	 ','line_number':128,'multiline':True]['text':' Associate disposables to the watcher','line_number':173,'multiline':False]['text':' Ask implementors to create the watcher','line_number':177,'multiline':False]['text':' Wire in event handlers','line_number':181,'multiline':False]['text':' Restart on error (up to N times, if enabled)','line_number':189,'multiline':False]['text':' Do not attempt to restart if not enabled','line_number':199,'multiline':False]['text':' Render the watcher invalid from here','line_number':234,'multiline':False]['text':' Build deltas','line_number':282,'multiline':False]['text':' Patterns are always matched on the full absolute path','line_number':293,'multiline':False]['text':' of the event. As such, if the pattern is not absolute','line_number':294,'multiline':False]['text':' and is a string and does not start with a leading','line_number':295,'multiline':False]['text':' `**`, we have to convert it to a relative pattern with','line_number':296,'multiline':False]['text':' the given `base`','line_number':297,'multiline':False]['text':' normalise to file system case sensitivity','line_number':326,'multiline':False]['text':' Event path already exists','line_number':334,'multiline':False]['text':' macOS/Windows: track renames to different case','line_number':339,'multiline':False]['text':' by keeping both CREATE and DELETE events','line_number':340,'multiline':False]['text':' Ignore CREATE followed by DELETE in one go','line_number':345,'multiline':False]['text':' Flatten DELETE followed by CREATE into CHANGE','line_number':351,'multiline':False]['text':' Do nothing. Keep the created event','line_number':356,'multiline':False]['text':' Otherwise apply change type','line_number':359,'multiline':False]['text':' Otherwise keep','line_number':365,'multiline':False]['text':' This algorithm will remove all DELETE events up to the root folder','line_number':380,'multiline':False]['text':' that got deleted if any. This ensures that we are not producing','line_number':381,'multiline':False]['text':' DELETE events for each file inside a folder that gets deleted.','line_number':382,'multiline':False]['text':'','line_number':383,'multiline':False]['text':' 1.) split ADD/CHANGE and DELETED events','line_number':384,'multiline':False]['text':' 2.) sort short deleted paths to the top','line_number':385,'multiline':False]['text':' 3.) for each DELETE, check if there is a deleted parent and ignore the event in that case','line_number':386,'multiline':False]['text':' remove ADD / CHANGE','line_number':391,'multiline':False]['text':' keep DELETE','line_number':394,'multiline':False]['text':' shortest path first','line_number':396,'multiline':False]['text':' ignorecase ','line_number':398,'multiline':True]['text':' DELETE is ignored if parent is deleted already','line_number':399,'multiline':False]['text':' otherwise mark as deleted','line_number':402,'multiline':False]