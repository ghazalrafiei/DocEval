['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * An implementation of a local disk file system provider
 * that is backed by a `IChannel` and thus implemented via
 * IPC on a different process.
 ','line_number':21,'multiline':True]['text':'#region File Capabilities','line_number':43,'multiline':False]['text':'#endregion','line_number':73,'multiline':False]['text':'#region File Metadata Resolving','line_number':75,'multiline':False]['text':'#endregion','line_number':85,'multiline':False]['text':'#region File Reading/Writing','line_number':87,'multiline':False]['text':' Reading as file stream goes through an event to the remote side','line_number':99,'multiline':False]['text':' data','line_number':102,'multiline':False]['text':' end or error','line_number':107,'multiline':False]['text':' Take Error as is if type matches','line_number':114,'multiline':False]['text':' Otherwise, try to deserialize into an error.','line_number':119,'multiline':False]['text':' Since we communicate via IPC, we cannot be sure','line_number':120,'multiline':False]['text':' that Error objects are properly serialized.','line_number':121,'multiline':False]['text':' Signal to the remote side that we no longer listen','line_number':132,'multiline':False]['text':' Support cancellation','line_number':137,'multiline':False]['text':' Ensure to end the stream properly with an error','line_number':140,'multiline':False]['text':' to indicate the cancellation.','line_number':141,'multiline':False]['text':' Ensure to dispose the listener upon cancellation. This will','line_number':145,'multiline':False]['text':' bubble through the remote side as event and allows to stop','line_number':146,'multiline':False]['text':' reading the file.','line_number':147,'multiline':False]['text':' copy back the data that was written into the buffer on the remote','line_number':169,'multiline':False]['text':' side. we need to do this because buffers are not referenced by','line_number':170,'multiline':False]['text':' pointer, but only by value and as such cannot be directly written','line_number':171,'multiline':False]['text':' to from the other process.','line_number':172,'multiline':False]['text':'#endregion','line_number':182,'multiline':False]['text':'#region Move/Copy/Delete/Create Folder','line_number':184,'multiline':False]['text':'#endregion','line_number':202,'multiline':False]['text':'#region Clone File','line_number':204,'multiline':False]['text':'#endregion','line_number':210,'multiline':False]['text':'#region File Watching','line_number':212,'multiline':False]['text':' The contract for file watching via remote is to identify us','line_number':220,'multiline':False]['text':' via a unique but readonly session ID. Since the remote is','line_number':221,'multiline':False]['text':' managing potentially many watchers from different clients,','line_number':222,'multiline':False]['text':' this helps the server to properly partition events to the right','line_number':223,'multiline':False]['text':' clients.','line_number':224,'multiline':False]['text':' The contract for file changes is that there is one listener','line_number':229,'multiline':False]['text':' for both events and errors from the watcher. So we need to','line_number':230,'multiline':False]['text':' unwrap the event from the remote and emit through the proper','line_number':231,'multiline':False]['text':' emitter.','line_number':232,'multiline':False]['text':' Generate a request UUID to correlate the watcher','line_number':246,'multiline':False]['text':' back to us when we ask to dispose the watcher later.','line_number':247,'multiline':False]['text':'#endregion','line_number':255,'multiline':False]