['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Creates character renderers. It takes a 'scale' that determines how large
 * characters should be drawn. Using this, it draws data into a canvas and
 * then downsamples the characters as necessary for the current display.
 * This makes rendering more efficient, rather than drawing a full (tiny)
 * font, or downsampling in real-time.
 ','line_number':11,'multiline':True]['text':'*
	 * Creates a new character renderer factory with the given scale.
	 ','line_number':22,'multiline':True]['text':' renderers are immutable. By default we'll 'create' a new minimap','line_number':26,'multiline':False]['text':' character renderer whenever we switch editors, no need to do extra work.','line_number':27,'multiline':False]['text':'*
	 * Creates the font sample data, writing to a canvas.
	 ','line_number':47,'multiline':True]['text':'*
	 * Creates a character renderer from the canvas sample data.
	 ','line_number':72,'multiline':True]['text':' This is essentially an ad-hoc rescaling algorithm. Standard approaches','line_number':99,'multiline':False]['text':' like bicubic interpolation are awesome for scaling between image sizes,','line_number':100,'multiline':False]['text':' but don't work so well when scaling to very small pixel values, we end','line_number':101,'multiline':False]['text':' up with blurry, indistinct forms.','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':' The approach taken here is simply mapping each source pixel to the target','line_number':104,'multiline':False]['text':' pixels, and taking the weighted values for all pixels in each, and then','line_number':105,'multiline':False]['text':' averaging them out. Finally we apply an intensity boost in _downsample,','line_number':106,'multiline':False]['text':' since when scaling to the smallest pixel sizes there's more black space','line_number':107,'multiline':False]['text':' which causes characters to be much less distinct.','line_number':108,'multiline':False]['text':' 1. For this destination pixel, get the source pixels we're sampling','line_number':110,'multiline':False]['text':' from (x1, y1) to the next pixel (x2, y2)','line_number':111,'multiline':False]['text':' 2. Sample all of them, summing them up and weighting them. Similar','line_number':119,'multiline':False]['text':' to bilinear interpolation.','line_number':120,'multiline':False]