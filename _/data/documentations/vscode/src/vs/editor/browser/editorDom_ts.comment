['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Coordinates relative to the whole document (e.g. mouse event's pageX and pageY)
 ','line_number':15,'multiline':True]['text':'*
 * Coordinates within the application's client area (i.e. origin is document's scroll position).
 *
 * For example, clicking in the top-left corner of the client area will
 * always result in a mouse event with a client.x value of 0, regardless
 * of whether the page is scrolled horizontally.
 ','line_number':31,'multiline':True]['text':'*
 * The position of the editor in the page.
 ','line_number':51,'multiline':True]['text':'*
 * Coordinates relative to the the (top;left) of the editor that can be used safely with other internal editor metrics.
 * **NOTE**: This position is obtained by taking page coordinates and transforming them relative to the
 * editor's (top;left) position in a way in which scale transformations are taken into account.
 * **NOTE**: These coordinates could be negative if the mouse position is outside the editor.
 ','line_number':65,'multiline':True]['text':' The editor's page position is read from the DOM using getBoundingClientRect().','line_number':86,'multiline':False]['text':'','line_number':87,'multiline':False]['text':' getBoundingClientRect() returns the actual dimensions, while offsetWidth and offsetHeight','line_number':88,'multiline':False]['text':' reflect the unscaled size. We can use this difference to detect a transform:scale()','line_number':89,'multiline':False]['text':' and we will apply the transformation in inverse to get mouse coordinates that make sense inside the editor.','line_number':90,'multiline':False]['text':'','line_number':91,'multiline':False]['text':' This could be expanded to cover rotation as well maybe by walking the DOM up from `editorViewDomNode`','line_number':92,'multiline':False]['text':' and computing the effective transformation matrix using getComputedStyle(element).transform.','line_number':93,'multiline':False]['text':'','line_number':94,'multiline':False]['text':' Adjust mouse offsets if editor appears to be scaled via transforms','line_number':98,'multiline':False]['text':'*
	 * If the event is a result of using `setPointerCapture`, the `event.target`
	 * does not necessarily reflect the position in the editor.
	 ','line_number':107,'multiline':True]['text':'*
	 * Coordinates relative to the whole document.
	 ','line_number':113,'multiline':True]['text':'*
	 * Editor's coordinates relative to the whole document.
	 ','line_number':118,'multiline':True]['text':'*
	 * Coordinates relative to the (top;left) of the editor.
	 * *NOTE*: These coordinates are preferred because they take into account transformations applied to the editor.
	 * *NOTE*: These coordinates could be negative if the mouse position is outside the editor.
	 ','line_number':123,'multiline':True]['text':' Add a <<capture>> keydown event listener that will cancel the monitoring','line_number':242,'multiline':False]['text':' if something other than a modifier key is pressed','line_number':243,'multiline':False]['text':' Allow modifier keys','line_number':247,'multiline':False]['text':'*
 * A helper to create dynamic css rules, bound to a class name.
 * Rules are reused.
 * Reference counting and delayed garbage collection ensure that no rules leak.
','line_number':273,'multiline':True]['text':' We delay garbage collection so that hanging rules can be reused.','line_number':284,'multiline':False]