['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * A view zone is a full horizontal rectangle that 'pushes' text down.
 * The editor reserves space for view zones when rendering.
 ','line_number':28,'multiline':True]['text':'*
	 * The line number after which this zone should appear.
	 * Use 0 to place a view zone before the first line number.
	 ','line_number':33,'multiline':True]['text':'*
	 * The column after which this zone should appear.
	 * If not set, the maxLineColumn of `afterLineNumber` will be used.
	 * This is relevant for wrapped lines.
	 ','line_number':38,'multiline':True]['text':'*
	 * If the `afterColumn` has multiple view columns, the affinity specifies which one to use. Defaults to `none`.
	','line_number':44,'multiline':True]['text':'*
	 * Render the zone even when its line is hidden.
	 ','line_number':48,'multiline':True]['text':'*
	 * Tiebreaker that is used when multiple view zones want to be after the same line.
	 * Defaults to `afterColumn` otherwise 10000;
	 ','line_number':52,'multiline':True]['text':'*
	 * Suppress mouse down events.
	 * If set, the editor will attach a mouse down listener to the view zone and .preventDefault on it.
	 * Defaults to false
	 ','line_number':57,'multiline':True]['text':'*
	 * The height in lines of the view zone.
	 * If specified, `heightInPx` will be used instead of this.
	 * If neither `heightInPx` nor `heightInLines` is specified, a default of `heightInLines` = 1 will be chosen.
	 ','line_number':63,'multiline':True]['text':'*
	 * The height in px of the view zone.
	 * If this is set, the editor will give preference to it rather than `heightInLines` above.
	 * If neither `heightInPx` nor `heightInLines` is specified, a default of `heightInLines` = 1 will be chosen.
	 ','line_number':69,'multiline':True]['text':'*
	 * The minimum width in px of the view zone.
	 * If this is set, the editor will ensure that the scroll width is >= than this value.
	 ','line_number':75,'multiline':True]['text':'*
	 * The dom node of the view zone
	 ','line_number':80,'multiline':True]['text':'*
	 * An optional dom node for the view zone that will be placed in the margin area.
	 ','line_number':84,'multiline':True]['text':'*
	 * Callback which gives the relative top of the view zone as it appears (taking scrolling into account).
	 ','line_number':88,'multiline':True]['text':'*
	 * Callback which gives the height in pixels of the view zone.
	 ','line_number':92,'multiline':True]['text':'*
 * An accessor that allows for zones to be added or removed.
 ','line_number':97,'multiline':True]['text':'*
	 * Create a new view zone.
	 * @param zone Zone to create
	 * @return A unique identifier to the view zone.
	 ','line_number':101,'multiline':True]['text':'*
	 * Remove a zone
	 * @param id A unique identifier to the view zone, as returned by the `addZone` call.
	 ','line_number':107,'multiline':True]['text':'*
	 * Change a zone's position.
	 * The editor will rescan the `afterLineNumber` and `afterColumn` properties of a view zone.
	 ','line_number':112,'multiline':True]['text':'*
 * A positioning preference for rendering content widgets.
 ','line_number':119,'multiline':True]['text':'*
	 * Place the content widget exactly at a position
	 ','line_number':123,'multiline':True]['text':'*
	 * Place the content widget above a position
	 ','line_number':127,'multiline':True]['text':'*
	 * Place the content widget below a position
	 ','line_number':131,'multiline':True]['text':'*
 * A position for rendering content widgets.
 ','line_number':136,'multiline':True]['text':'*
	 * Desired position which serves as an anchor for placing the content widget.
	 * The widget will be placed above, at, or below the specified position, based on the
	 * provided preference. The widget will always touch this position.
	 *
	 * Given sufficient horizontal space, the widget will be placed to the right of the
	 * passed in position. This can be tweaked by providing a `secondaryPosition`.
	 *
	 * @see preference
	 * @see secondaryPosition
	 ','line_number':140,'multiline':True]['text':'*
	 * Optionally, a secondary position can be provided to further define the placing of
	 * the content widget. The secondary position must have the same line number as the
	 * primary position. If possible, the widget will be placed such that it also touches
	 * the secondary position.
	 ','line_number':152,'multiline':True]['text':'*
	 * Placement preference for position, in order of preference.
	 ','line_number':159,'multiline':True]['text':'*
	 * Placement preference when multiple view positions refer to the same (model) position.
	 * This plays a role when injected text is involved.
	','line_number':164,'multiline':True]['text':'*
 * A content widget renders inline with the text and can be easily placed 'near' an editor position.
 ','line_number':170,'multiline':True]['text':'*
	 * Render this content widget in a location where it could overflow the editor's view dom node.
	 ','line_number':174,'multiline':True]['text':'*
	 * Call preventDefault() on mousedown events that target the content widget.
	 ','line_number':178,'multiline':True]['text':'*
	 * Get a unique identifier of the content widget.
	 ','line_number':182,'multiline':True]['text':'*
	 * Get the dom node of the content widget.
	 ','line_number':186,'multiline':True]['text':'*
	 * Get the placement of the content widget.
	 * If null is returned, the content widget will be placed off screen.
	 ','line_number':190,'multiline':True]['text':'*
	 * Optional function that is invoked before rendering
	 * the content widget. If a dimension is returned the editor will
	 * attempt to use it.
	 ','line_number':195,'multiline':True]['text':'*
	 * Optional function that is invoked after rendering the content
	 * widget. Is being invoked with the selected position preference
	 * or `null` if not rendered.
	 ','line_number':201,'multiline':True]['text':'*
 * A positioning preference for rendering overlay widgets.
 ','line_number':209,'multiline':True]['text':'*
	 * Position the overlay widget in the top right corner
	 ','line_number':213,'multiline':True]['text':'*
	 * Position the overlay widget in the bottom right corner
	 ','line_number':218,'multiline':True]['text':'*
	 * Position the overlay widget in the top center
	 ','line_number':223,'multiline':True]['text':'*
 * A position for rendering overlay widgets.
 ','line_number':228,'multiline':True]['text':'*
	 * The position preference for the overlay widget.
	 ','line_number':232,'multiline':True]['text':'*
 * An overlay widgets renders on top of the text.
 ','line_number':237,'multiline':True]['text':'*
	 * Get a unique identifier of the overlay widget.
	 ','line_number':241,'multiline':True]['text':'*
	 * Get the dom node of the overlay widget.
	 ','line_number':245,'multiline':True]['text':'*
	 * Get the placement of the overlay widget.
	 * If null is returned, the overlay widget is responsible to place itself.
	 ','line_number':249,'multiline':True]['text':'*
	 * The editor will ensure that the scroll width is >= than this value.
	 ','line_number':254,'multiline':True]['text':'*
 * A glyph margin widget renders in the editor glyph margin.
 ','line_number':260,'multiline':True]['text':'*
	 * Get a unique identifier of the glyph widget.
	 ','line_number':264,'multiline':True]['text':'*
	 * Get the dom node of the glyph widget.
	 ','line_number':268,'multiline':True]['text':'*
	 * Get the placement of the glyph widget.
	 ','line_number':272,'multiline':True]['text':'*
 * A position for rendering glyph margin widgets.
 ','line_number':278,'multiline':True]['text':'*
	 * The glyph margin lane where the widget should be shown.
	 ','line_number':282,'multiline':True]['text':'*
	 * The priority order of the widget, used for determining which widget
	 * to render when there are multiple.
	 ','line_number':286,'multiline':True]['text':'*
	 * The editor range that this widget applies to.
	 ','line_number':291,'multiline':True]['text':'*
 * Type of hit element with the mouse in the editor.
 ','line_number':297,'multiline':True]['text':'*
	 * Mouse is on top of an unknown element.
	 ','line_number':301,'multiline':True]['text':'*
	 * Mouse is on top of the textarea used for input.
	 ','line_number':305,'multiline':True]['text':'*
	 * Mouse is on top of the glyph margin
	 ','line_number':309,'multiline':True]['text':'*
	 * Mouse is on top of the line numbers
	 ','line_number':313,'multiline':True]['text':'*
	 * Mouse is on top of the line decorations
	 ','line_number':317,'multiline':True]['text':'*
	 * Mouse is on top of the whitespace left in the gutter by a view zone.
	 ','line_number':321,'multiline':True]['text':'*
	 * Mouse is on top of text in the content.
	 ','line_number':325,'multiline':True]['text':'*
	 * Mouse is on top of empty space in the content (e.g. after line text or below last line)
	 ','line_number':329,'multiline':True]['text':'*
	 * Mouse is on top of a view zone in the content.
	 ','line_number':333,'multiline':True]['text':'*
	 * Mouse is on top of a content widget.
	 ','line_number':337,'multiline':True]['text':'*
	 * Mouse is on top of the decorations overview ruler.
	 ','line_number':341,'multiline':True]['text':'*
	 * Mouse is on top of a scrollbar.
	 ','line_number':345,'multiline':True]['text':'*
	 * Mouse is on top of an overlay widget.
	 ','line_number':349,'multiline':True]['text':'*
	 * Mouse is outside of the editor.
	 ','line_number':353,'multiline':True]['text':'*
	 * The target element
	 ','line_number':359,'multiline':True]['text':'*
	 * The 'approximate' editor position
	 ','line_number':363,'multiline':True]['text':'*
	 * Desired mouse column (e.g. when position.column gets clamped to text length -- clicking after text on a line).
	 ','line_number':367,'multiline':True]['text':'*
	 * The 'approximate' editor range
	 ','line_number':371,'multiline':True]['text':'*
	 * @internal
	 ','line_number':412,'multiline':True]['text':'*
 * Target hit with the mouse in the editor.
 ','line_number':458,'multiline':True]['text':'*
 * A mouse event originating from the editor.
 ','line_number':474,'multiline':True]['text':'*
 * A paste event originating from the editor.
 ','line_number':486,'multiline':True]['text':'*
 * An overview ruler
 * @internal
 ','line_number':494,'multiline':True]['text':'*
 * Editor aria options.
 * @internal
 ','line_number':505,'multiline':True]['text':'*
	 * Place overflow widgets inside an external DOM node.
	 * Defaults to an internal DOM node.
	 ','line_number':515,'multiline':True]['text':'*
	 * Aria label for original editor.
	 ','line_number':521,'multiline':True]['text':'*
	 * Aria label for modified editor.
	 ','line_number':526,'multiline':True]['text':'*
 * A rich code editor.
 ','line_number':532,'multiline':True]['text':'*
	 * This editor is used as an alternative to an <input> box, i.e. as a simple widget.
	 * @internal
	 ','line_number':536,'multiline':True]['text':'*
	 * The editor's scoped context key service.
	 * @internal
	 ','line_number':541,'multiline':True]['text':'*
	 * An event emitted when the content of the current model has changed.
	 * @event
	 ','line_number':546,'multiline':True]['text':'*
	 * An event emitted when the language of the current model has changed.
	 * @event
	 ','line_number':551,'multiline':True]['text':'*
	 * An event emitted when the language configuration of the current model has changed.
	 * @event
	 ','line_number':556,'multiline':True]['text':'*
	 * An event emitted when the options of the current model has changed.
	 * @event
	 ','line_number':561,'multiline':True]['text':'*
	 * An event emitted when the configuration of the editor has changed. (e.g. `editor.updateOptions()`)
	 * @event
	 ','line_number':566,'multiline':True]['text':'*
	 * An event emitted when the cursor position has changed.
	 * @event
	 ','line_number':571,'multiline':True]['text':'*
	 * An event emitted when the cursor selection has changed.
	 * @event
	 ','line_number':576,'multiline':True]['text':'*
	 * An event emitted when the model of this editor has changed (e.g. `editor.setModel()`).
	 * @event
	 ','line_number':581,'multiline':True]['text':'*
	 * An event emitted when the decorations of the current model have changed.
	 * @event
	 ','line_number':586,'multiline':True]['text':'*
	 * An event emitted when the tokens of the current model have changed.
	 * @internal
	 ','line_number':591,'multiline':True]['text':'*
	 * An event emitted when the text inside this editor gained focus (i.e. cursor starts blinking).
	 * @event
	 ','line_number':596,'multiline':True]['text':'*
	 * An event emitted when the text inside this editor lost focus (i.e. cursor stops blinking).
	 * @event
	 ','line_number':601,'multiline':True]['text':'*
	 * An event emitted when the text inside this editor or an editor widget gained focus.
	 * @event
	 ','line_number':606,'multiline':True]['text':'*
	 * An event emitted when the text inside this editor or an editor widget lost focus.
	 * @event
	 ','line_number':611,'multiline':True]['text':'*
	 * An event emitted before interpreting typed characters (on the keyboard).
	 * @event
	 * @internal
	 ','line_number':616,'multiline':True]['text':'*
	 * An event emitted after interpreting typed characters (on the keyboard).
	 * @event
	 * @internal
	 ','line_number':622,'multiline':True]['text':'*
	 * An event emitted after composition has started.
	 ','line_number':628,'multiline':True]['text':'*
	 * An event emitted after composition has ended.
	 ','line_number':632,'multiline':True]['text':'*
	 * An event emitted when editing failed because the editor is read-only.
	 * @event
	 ','line_number':636,'multiline':True]['text':'*
	 * An event emitted when users paste text in the editor.
	 * @event
	 ','line_number':641,'multiline':True]['text':'*
	 * An event emitted on a "mouseup".
	 * @event
	 ','line_number':646,'multiline':True]['text':'*
	 * An event emitted on a "mousedown".
	 * @event
	 ','line_number':651,'multiline':True]['text':'*
	 * An event emitted on a "mousedrag".
	 * @internal
	 * @event
	 ','line_number':656,'multiline':True]['text':'*
	 * An event emitted on a "mousedrop".
	 * @internal
	 * @event
	 ','line_number':662,'multiline':True]['text':'*
	 * An event emitted on a "mousedropcanceled".
	 * @internal
	 * @event
	 ','line_number':668,'multiline':True]['text':'*
	 * An event emitted when content is dropped into the editor.
	 * @internal
	 * @event
	 ','line_number':674,'multiline':True]['text':'*
	 * An event emitted on a "contextmenu".
	 * @event
	 ','line_number':680,'multiline':True]['text':'*
	 * An event emitted on a "mousemove".
	 * @event
	 ','line_number':685,'multiline':True]['text':'*
	 * An event emitted on a "mouseleave".
	 * @event
	 ','line_number':690,'multiline':True]['text':'*
	 * An event emitted on a "mousewheel"
	 * @event
	 * @internal
	 ','line_number':695,'multiline':True]['text':'*
	 * An event emitted on a "keyup".
	 * @event
	 ','line_number':701,'multiline':True]['text':'*
	 * An event emitted on a "keydown".
	 * @event
	 ','line_number':706,'multiline':True]['text':'*
	 * An event emitted when the layout of the editor has changed.
	 * @event
	 ','line_number':711,'multiline':True]['text':'*
	 * An event emitted when the content width or content height in the editor has changed.
	 * @event
	 ','line_number':716,'multiline':True]['text':'*
	 * An event emitted when the scroll in the editor has changed.
	 * @event
	 ','line_number':721,'multiline':True]['text':'*
	 * An event emitted when hidden areas change in the editor (e.g. due to folding).
	 * @event
	 ','line_number':727,'multiline':True]['text':'*
	 * Saves current view state of the editor in a serializable object.
	 ','line_number':733,'multiline':True]['text':'*
	 * Restores the view state of the editor from a serializable object generated by `saveViewState`.
	 ','line_number':738,'multiline':True]['text':'*
	 * Returns true if the text inside this editor or an editor widget has focus.
	 ','line_number':743,'multiline':True]['text':'*
	 * Get a contribution of this editor.
	 * @id Unique identifier of the contribution.
	 * @return The contribution or null if contribution not found.
	 ','line_number':748,'multiline':True]['text':'*
	 * Execute `fn` with the editor's services.
	 * @internal
	 ','line_number':755,'multiline':True]['text':'*
	 * Type the getModel() of IEditor.
	 ','line_number':761,'multiline':True]['text':'*
	 * Sets the current model attached to this editor.
	 * If the previous model was created by the editor via the value key in the options
	 * literal object, it will be destroyed. Otherwise, if the previous model was set
	 * via setModel, or the model key in the options literal object, the previous model
	 * will not be destroyed.
	 * It is safe to call setModel(null) to simply detach the current model from the editor.
	 ','line_number':766,'multiline':True]['text':'*
	 * Gets all the editor computed options.
	 ','line_number':776,'multiline':True]['text':'*
	 * Gets a specific editor option.
	 ','line_number':781,'multiline':True]['text':'*
	 * Returns the editor's configuration (without any validation or defaults).
	 ','line_number':786,'multiline':True]['text':'*
	 * @internal
	 ','line_number':791,'multiline':True]['text':'*
	 * @internal
	 ','line_number':796,'multiline':True]['text':'*
	 * Get value of the current model attached to this editor.
	 * @see {@link ITextModel.getValue}
	 ','line_number':801,'multiline':True]['text':'*
	 * Set the value of the current model attached to this editor.
	 * @see {@link ITextModel.setValue}
	 ','line_number':807,'multiline':True]['text':'*
	 * Get the width of the editor's content.
	 * This is information that is "erased" when computing `scrollWidth = Math.max(contentWidth, width)`
	 ','line_number':813,'multiline':True]['text':'*
	 * Get the scrollWidth of the editor's viewport.
	 ','line_number':818,'multiline':True]['text':'*
	 * Get the scrollLeft of the editor's viewport.
	 ','line_number':822,'multiline':True]['text':'*
	 * Get the height of the editor's content.
	 * This is information that is "erased" when computing `scrollHeight = Math.max(contentHeight, height)`
	 ','line_number':827,'multiline':True]['text':'*
	 * Get the scrollHeight of the editor's viewport.
	 ','line_number':832,'multiline':True]['text':'*
	 * Get the scrollTop of the editor's viewport.
	 ','line_number':836,'multiline':True]['text':'*
	 * Change the scrollLeft of the editor's viewport.
	 ','line_number':841,'multiline':True]['text':'*
	 * Change the scrollTop of the editor's viewport.
	 ','line_number':845,'multiline':True]['text':'*
	 * Change the scroll position of the editor's viewport.
	 ','line_number':849,'multiline':True]['text':'*
	 * Check if the editor is currently scrolling towards a different scroll position.
	 ','line_number':853,'multiline':True]['text':'*
	 * Get an action that is a contribution to this editor.
	 * @id Unique identifier of the contribution.
	 * @return The action or null if action not found.
	 ','line_number':858,'multiline':True]['text':'*
	 * Execute a command on the editor.
	 * The edits will land on the undo-redo stack, but no "undo stop" will be pushed.
	 * @param source The source of the call.
	 * @param command The command to execute
	 ','line_number':865,'multiline':True]['text':'*
	 * Create an "undo stop" in the undo-redo stack.
	 ','line_number':873,'multiline':True]['text':'*
	 * Remove the "undo stop" in the undo-redo stack.
	 ','line_number':878,'multiline':True]['text':'*
	 * Execute edits on the editor.
	 * The edits will land on the undo-redo stack, but no "undo stop" will be pushed.
	 * @param source The source of the call.
	 * @param edits The edits to execute.
	 * @param endCursorState Cursor state after the edits were applied.
	 ','line_number':883,'multiline':True]['text':'*
	 * Execute multiple (concomitant) commands on the editor.
	 * @param source The source of the call.
	 * @param command The commands to execute
	 ','line_number':892,'multiline':True]['text':'*
	 * @internal
	 ','line_number':899,'multiline':True]['text':'*
	 * Get all the decorations on a line (filtering out decorations from other editors).
	 ','line_number':904,'multiline':True]['text':'*
	 * Get all the decorations for a range (filtering out decorations from other editors).
	 ','line_number':909,'multiline':True]['text':'*
	 * All decorations added through this call will get the ownerId of this editor.
	 * @deprecated Use `createDecorationsCollection`
	 * @see createDecorationsCollection
	 ','line_number':914,'multiline':True]['text':'*
	 * Remove previously added decorations.
	 ','line_number':921,'multiline':True]['text':'*
	 * @internal
	 ','line_number':926,'multiline':True]['text':'*
	 * @internal
	 ','line_number':931,'multiline':True]['text':'*
	 * @internal
	 ','line_number':936,'multiline':True]['text':'*
	 * Get the layout info for the editor.
	 ','line_number':941,'multiline':True]['text':'*
	 * Returns the ranges that are currently visible.
	 * Does not account for horizontal scrolling.
	 ','line_number':946,'multiline':True]['text':'*
	 * @internal
	 ','line_number':952,'multiline':True]['text':'*
	 * Get the view zones.
	 * @internal
	 ','line_number':957,'multiline':True]['text':'*
	 * Get the vertical position (top offset) for the line's top w.r.t. to the first line.
	 ','line_number':963,'multiline':True]['text':'*
	 * Get the vertical position (top offset) for the line's bottom w.r.t. to the first line.
	 ','line_number':968,'multiline':True]['text':'*
	 * Get the vertical position (top offset) for the position w.r.t. to the first line.
	 ','line_number':973,'multiline':True]['text':'*
	 * Set the model ranges that will be hidden in the view.
	 * Hidden areas are stored per source.
	 * @internal
	 ','line_number':978,'multiline':True]['text':'*
	 * Sets the editor aria options, primarily the active descendent.
	 * @internal
	 ','line_number':985,'multiline':True]['text':'*
	 * Write the screen reader content to be the current selection
	 ','line_number':991,'multiline':True]['text':'*
	 * @internal
	 ','line_number':996,'multiline':True]['text':'*
	 * Returns the editor's container dom node
	 ','line_number':1001,'multiline':True]['text':'*
	 * Returns the editor's dom node
	 ','line_number':1006,'multiline':True]['text':'*
	 * Add a content widget. Widgets must have unique ids, otherwise they will be overwritten.
	 ','line_number':1011,'multiline':True]['text':'*
	 * Layout/Reposition a content widget. This is a ping to the editor to call widget.getPosition()
	 * and update appropriately.
	 ','line_number':1015,'multiline':True]['text':'*
	 * Remove a content widget.
	 ','line_number':1020,'multiline':True]['text':'*
	 * Add an overlay widget. Widgets must have unique ids, otherwise they will be overwritten.
	 ','line_number':1025,'multiline':True]['text':'*
	 * Layout/Reposition an overlay widget. This is a ping to the editor to call widget.getPosition()
	 * and update appropriately.
	 ','line_number':1029,'multiline':True]['text':'*
	 * Remove an overlay widget.
	 ','line_number':1034,'multiline':True]['text':'*
	 * Add a glyph margin widget. Widgets must have unique ids, otherwise they will be overwritten.
	 ','line_number':1039,'multiline':True]['text':'*
	 * Layout/Reposition a glyph margin widget. This is a ping to the editor to call widget.getPosition()
	 * and update appropriately.
	 ','line_number':1043,'multiline':True]['text':'*
	 * Remove a glyph margin widget.
	 ','line_number':1048,'multiline':True]['text':'*
	 * Change the view zones. View zones are lost when a new model is attached to the editor.
	 ','line_number':1053,'multiline':True]['text':'*
	 * Get the horizontal position (left offset) for the column w.r.t to the beginning of the line.
	 * This method works only if the line `lineNumber` is currently rendered (in the editor's viewport).
	 * Use this method with caution.
	 ','line_number':1058,'multiline':True]['text':'*
	 * Force an editor render now.
	 ','line_number':1065,'multiline':True]['text':'*
	 * Get the hit test target at coordinates `clientX` and `clientY`.
	 * The coordinates are relative to the top-left of the viewport.
	 *
	 * @returns Hit test target or null if the coordinates fall outside the editor or the editor has no model.
	 ','line_number':1070,'multiline':True]['text':'*
	 * Get the visible position for `position`.
	 * The result position takes scrolling into account and is relative to the top left corner of the editor.
	 * Explanation 1: the results of this method will change for the same `position` if the user scrolls the editor.
	 * Explanation 2: the results of this method will not change if the container of the editor gets repositioned.
	 * Warning: the results of this method are inaccurate for positions that are outside the current editor viewport.
	 ','line_number':1078,'multiline':True]['text':'*
	 * Apply the same font settings as the editor to `target`.
	 ','line_number':1087,'multiline':True]['text':'*
	 * Check if the current instance has a model attached.
	 * @internal
	 ','line_number':1092,'multiline':True]['text':'*
	 * Is called when the model has been set, view state was restored and options are updated.
	 * This is the best place to compute data for the viewport (such as tokens).
	 ','line_number':1100,'multiline':True]['text':'*
 * @internal
 ','line_number':1107,'multiline':True]['text':'*
	 * Returns the primary position of the cursor.
	 ','line_number':1111,'multiline':True]['text':'*
	 * Returns the primary selection of the editor.
	 ','line_number':1116,'multiline':True]['text':'*
	 * Returns all the selections of the editor.
	 ','line_number':1121,'multiline':True]['text':'*
	 * Saves current view state of the editor in a serializable object.
	 ','line_number':1126,'multiline':True]['text':'*
	 * Type the getModel() of IEditor.
	 ','line_number':1131,'multiline':True]['text':'*
	 * @internal
	 ','line_number':1136,'multiline':True]['text':'*
	 * Get all the decorations on a line (filtering out decorations from other editors).
	 ','line_number':1141,'multiline':True]['text':'*
	 * Returns the editor's dom node
	 ','line_number':1146,'multiline':True]['text':'*
	 * Get the visible position for `position`.
	 * The result position takes scrolling into account and is relative to the top left corner of the editor.
	 * Explanation 1: the results of this method will change for the same `position` if the user scrolls the editor.
	 * Explanation 2: the results of this method will not change if the container of the editor gets repositioned.
	 * Warning: the results of this method are inaccurate for positions that are outside the current editor viewport.
	 ','line_number':1151,'multiline':True]['text':'*
 * @internal
 ','line_number':1161,'multiline':True]['text':'*
 * A rich diff editor.
 ','line_number':1170,'multiline':True]['text':'*
	 * Returns whether the diff editor is ignoring trim whitespace or not.
	 * @internal
	 ','line_number':1175,'multiline':True]['text':'*
	 * Returns whether the diff editor is rendering side by side or inline.
	 * @internal
	 ','line_number':1180,'multiline':True]['text':'*
	 * Timeout in milliseconds after which diff computation is cancelled.
	 * @internal
	 ','line_number':1185,'multiline':True]['text':'*
	 * @see {@link ICodeEditor.getContainerDomNode}
	 ','line_number':1191,'multiline':True]['text':'*
	 * An event emitted when the diff information computed by this diff editor has been updated.
	 * @event
	 ','line_number':1196,'multiline':True]['text':'*
	 * An event emitted when the diff model is changed (i.e. the diff editor shows new content).
	 * @event
	 ','line_number':1202,'multiline':True]['text':'*
	 * Saves current view state of the editor in a serializable object.
	 ','line_number':1208,'multiline':True]['text':'*
	 * Restores the view state of the editor from a serializable object generated by `saveViewState`.
	 ','line_number':1213,'multiline':True]['text':'*
	 * Type the getModel() of IEditor.
	 ','line_number':1218,'multiline':True]['text':'*
	 * Sets the current model attached to this editor.
	 * If the previous model was created by the editor via the value key in the options
	 * literal object, it will be destroyed. Otherwise, if the previous model was set
	 * via setModel, or the model key in the options literal object, the previous model
	 * will not be destroyed.
	 * It is safe to call setModel(null) to simply detach the current model from the editor.
	 ','line_number':1225,'multiline':True]['text':'*
	 * Get the `original` editor.
	 ','line_number':1235,'multiline':True]['text':'*
	 * Get the `modified` editor.
	 ','line_number':1240,'multiline':True]['text':'*
	 * Get the computed diff information.
	 ','line_number':1245,'multiline':True]['text':'*
	 * Get the computed diff information.
	 * @internal
	 ','line_number':1250,'multiline':True]['text':'*
	 * Update the editor's options after the editor has been created.
	 ','line_number':1256,'multiline':True]['text':'*
	 * @internal
	 ','line_number':1261,'multiline':True]['text':'*
	 * Jumps to the next or previous diff.
	 ','line_number':1266,'multiline':True]['text':'*
	 * Scrolls to the first diff.
	 * (Waits until the diff computation finished.)
	 ','line_number':1271,'multiline':True]['text':'*
 *@internal
 ','line_number':1284,'multiline':True]['text':'*
 *@internal
 ','line_number':1295,'multiline':True]['text':'*
 *@internal
 ','line_number':1306,'multiline':True]['text':'*
 *@internal
 ','line_number':1316,'multiline':True]['text':'*
 *@internal
 ','line_number':1335,'multiline':True]