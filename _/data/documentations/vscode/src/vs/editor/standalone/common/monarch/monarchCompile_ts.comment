['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'
 * This module only exports 'compile' which compiles a JSON language definition
 * into a typed and checked ILexer definition.
 ','line_number':6,'multiline':True]['text':'
 * Type helpers
 *
 * Note: this is just for sanity checks on the JSON description which is
 * helpful for the programmer. No checks are done anymore once the lexer is
 * already 'compiled and checked'.
 *
 ','line_number':14,'multiline':True]['text':' Lexer helpers','line_number':79,'multiline':False]['text':'*
 * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set, and the 'u' flag if 'unicode' is set.
 * Also replaces @\w+ or sequences with the content of the specified attribute
 * @\w+ replacement can be avoided by escaping `@` signs with another `@` sign.
 * @example /@attr/ will be replaced with the value of lexer[attr]
 * @example /@@text/ will not be replaced and will become /@text/.
 ','line_number':81,'multiline':True]['text':' @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character','line_number':89,'multiline':False]['text':' handle escaped @@','line_number':115,'multiline':False]['text':'*
 * Compiles guard functions for case matches.
 * This compiles 'cases' attributes into efficient match functions.
 *
 ','line_number':122,'multiline':True]['text':' get the scrutinee and pattern','line_number':146,'multiline':False]['text':' -1: $!, 0-99: $n, 100+n: $Sn','line_number':147,'multiline':False]['text':' if digits','line_number':151,'multiline':False]['text':' if [sS] present','line_number':154,'multiline':False]['text':' get operator','line_number':159,'multiline':False]['text':' just a word','line_number':166,'multiline':False]['text':' set the tester function','line_number':177,'multiline':False]['text':' special case a regexp that matches just words','line_number':180,'multiline':False]['text':' precompile regular expression','line_number':198,'multiline':False]['text':' if (op==='==' || op==='!=') {','line_number':209,'multiline':False]['text':' return the branch object','line_number':223,'multiline':False]['text':'*
 * Compiles an action: i.e. optimize regular expressions and case matches
 * and do many sanity checks.
 *
 * This is called only during compilation but if the lexer definition
 * contains user functions as actions (which is usually not allowed), then this
 * may be called during lexing. It is important therefore to compile common cases efficiently
 ','line_number':241,'multiline':True]['text':' { token: action };','line_number':254,'multiline':False]['text':' only copy specific typed fields (only happens once during compile Lexer)','line_number':261,'multiline':False]['text':' peel off starting @ sign','line_number':283,'multiline':False]['text':' no dollar substitution, we can check if the state exists','line_number':285,'multiline':False]['text':' build an array of test cases','line_number':318,'multiline':False]['text':' for each case, push a test function and result value','line_number':321,'multiline':False]['text':' what kind of case','line_number':326,'multiline':False]['text':' call separate function to avoid local variable capture','line_number':334,'multiline':False]['text':' create a matching function','line_number':339,'multiline':False]['text':'*
 * Helper class for creating matching rules
 ','line_number':358,'multiline':True]['text':'*
 * Compiles a json description function into json where all regular expressions,
 * case matches etc, are compiled and all include rules are expanded.
 * We also compile the bracket definitions, supply defaults, and do many sanity checks.
 * If the 'jsonStrict' parameter is 'false', we allow at certain locations
 * regular expression objects and functions that get called during lexing.
 * (Currently we have no samples that need this so perhaps we should always have
 * jsonStrict to true).
 ','line_number':393,'multiline':True]['text':' Create our lexer','line_number':407,'multiline':False]['text':' raise exceptions during compilation','line_number':411,'multiline':False]['text':' Set standard fields: be defensive about types','line_number':414,'multiline':False]['text':' becomes true if we find a nextEmbedded action','line_number':422,'multiline':False]['text':' For calling compileAction later on','line_number':424,'multiline':False]['text':' Compile an array of rules into newrules where RegExp objects are created.','line_number':436,'multiline':False]['text':' peel off starting @','line_number':446,'multiline':False]['text':' Set up new rule attributes','line_number':456,'multiline':False]['text':' compile the tokenizer rules','line_number':497,'multiline':False]['text':' can be set during compileAction','line_number':514,'multiline':False]['text':' Set simple brackets','line_number':516,'multiline':False]['text':' Disable throw so the syntax highlighter goes, no matter what','line_number':552,'multiline':False]