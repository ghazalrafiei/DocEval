['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Concatenates a list of (2,3) AstNode's into a single (2,3) AstNode.
 * This mutates the items of the input array!
 * If all items have the same height, this method has runtime O(items.length).
 * Otherwise, it has runtime O(items.length * max(log(items.length), items.max(i => i.height))).
','line_number':8,'multiline':True]['text':'*
	 * Reads nodes of same height and concatenates them to a single node.
	','line_number':23,'multiline':True]['text':' The items might not have the same height.','line_number':45,'multiline':False]['text':' We merge all items by using a binary concat operator.','line_number':46,'multiline':False]['text':' There must be a first item','line_number':47,'multiline':False]['text':' Prefer concatenating smaller trees, as the runtime of concat depends on the tree height.','line_number':54,'multiline':False]['text':' All trees have same height, just create parent nodes.','line_number':76,'multiline':False]['text':' node1 is the tree we want to insert into','line_number':97,'multiline':False]['text':'*
 * Appends the given node to the end of this (2,3) tree.
 * Returns the new root.
','line_number':104,'multiline':True]['text':' assert nodeToInsert.listHeight <= curNode.listHeight','line_number':114,'multiline':False]['text':' assert 0 <= nodeToInsert.listHeight < curNode.listHeight','line_number':119,'multiline':False]['text':' assert 2 <= curNode.childrenLength <= 3','line_number':124,'multiline':False]['text':' assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight','line_number':127,'multiline':False]['text':' Can we take the element?','line_number':131,'multiline':False]['text':' assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1','line_number':133,'multiline':False]['text':' we need to split to maintain (2,3)-tree property.','line_number':135,'multiline':False]['text':' Send the third element + the new element to the parent.','line_number':136,'multiline':False]['text':'*
 * Prepends the given node to the end of this (2,3) tree.
 * Returns the new root.
','line_number':153,'multiline':True]['text':' assert nodeToInsert.listHeight <= curNode.listHeight','line_number':161,'multiline':False]['text':' assert 0 <= nodeToInsert.listHeight < curNode.listHeight','line_number':163,'multiline':False]['text':' assert 2 <= curNode.childrenFast.length <= 3','line_number':168,'multiline':False]['text':' assert nodeToAppendOfCorrectHeight!.listHeight === curNode.listHeight','line_number':172,'multiline':False]['text':' Can we take the element?','line_number':176,'multiline':False]['text':' assert parent.childrenLength === 3 && parent.listHeight === nodeToAppendOfCorrectHeight.listHeight + 1','line_number':178,'multiline':False]['text':' we need to split to maintain (2,3)-tree property.','line_number':180,'multiline':False]['text':' Send the third element + the new element to the parent.','line_number':181,'multiline':False]