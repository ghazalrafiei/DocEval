['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
	 * Zero-based offset on which the range starts, inclusive.
	 ','line_number':24,'multiline':True]['text':'*
	 * Zero-based offset on which the range ends, inclusive.
	 ','line_number':29,'multiline':True]['text':'*
	 * Defined only when renderWhitespace is 'selection'. Selections are non-overlapping,
	 * and ordered by position within the line.
	 ','line_number':66,'multiline':True]['text':' U+2E31 - WORD SEPARATOR MIDDLE DOT','line_number':125,'multiline':False]['text':' U+00B7 - MIDDLE DOT','line_number':128,'multiline':False]['text':'*
 * Provides a both direction mapping between a line's character and its rendered position.
 ','line_number':194,'multiline':True]['text':' No characters on this line','line_number':228,'multiline':False]['text':' sitting between parts','line_number':304,'multiline':False]['text':' This line is empty, but it contains inline decorations','line_number':356,'multiline':False]['text':' completely empty line','line_number':391,'multiline':False]['text':'','line_number':438,'multiline':False]['text':' Calling `extractControlCharacters` before adding (possibly empty) line parts','line_number':461,'multiline':False]['text':' for inline decorations. `extractControlCharacters` removes empty line parts.','line_number':462,'multiline':False]['text':' Pretend there are foreign elements... although not 100% accurate.','line_number':477,'multiline':False]['text':' We can never split RTL text, as it ruins the rendering','line_number':488,'multiline':False]['text':'*
 * In the rendering phase, characters are always looped until token.endIndex.
 * Ensure that all tokens end before `len` and the last one ends precisely at `len`.
 ','line_number':512,'multiline':True]['text':' The faux indent part of the line should have no token type','line_number':520,'multiline':False]['text':' The faux indent part of the line should have no token type','line_number':528,'multiline':False]['text':'*
 * written as a const enum to get value inlining.
 ','line_number':545,'multiline':True]['text':'*
 * See https://github.com/microsoft/vscode/issues/6885.
 * It appears that having very large spans causes very slow reading of character positions.
 * So here we try to avoid that.
 ','line_number':552,'multiline':True]['text':' Split only at spaces => we need to walk each character','line_number':563,'multiline':False]['text':' Split at `lastSpaceOffset` + 1','line_number':579,'multiline':False]['text':' Split anywhere => we don't need to walk each character','line_number':595,'multiline':False]['text':' DEL','line_number':625,'multiline':False]['text':' Unicode Directional Formatting Characters','line_number':635,'multiline':False]['text':' LRE	U+202A	LEFT-TO-RIGHT EMBEDDING','line_number':636,'multiline':False]['text':' RLE	U+202B	RIGHT-TO-LEFT EMBEDDING','line_number':637,'multiline':False]['text':' PDF	U+202C	POP DIRECTIONAL FORMATTING','line_number':638,'multiline':False]['text':' LRO	U+202D	LEFT-TO-RIGHT OVERRIDE','line_number':639,'multiline':False]['text':' RLO	U+202E	RIGHT-TO-LEFT OVERRIDE','line_number':640,'multiline':False]['text':' LRI	U+2066	LEFT-TO-RIGHT ISOLATE','line_number':641,'multiline':False]['text':' RLI	U+2067	RIGHT-TO-LEFT ISOLATE','line_number':642,'multiline':False]['text':' FSI	U+2068	FIRST STRONG ISOLATE','line_number':643,'multiline':False]['text':' PDI	U+2069	POP DIRECTIONAL ISOLATE','line_number':644,'multiline':False]['text':' LRM	U+200E	LEFT-TO-RIGHT MARK','line_number':645,'multiline':False]['text':' RLM	U+200F	RIGHT-TO-LEFT MARK','line_number':646,'multiline':False]['text':' ALM	U+061C	ARABIC LETTER MARK','line_number':647,'multiline':False]['text':' emit previous part if it has text','line_number':664,'multiline':False]['text':' emit previous part if it has text','line_number':673,'multiline':False]['text':'*
 * Whitespace is rendered by "replacing" tokens with a special-purpose `mtkw` type that is later recognized in the rendering phase.
 * Moreover, a token is created for every visual indent because on some fonts the glyphs used for rendering whitespace (&rarr; or &middot;) do not have the same width as &nbsp;.
 * The rendering phase will generate `style="width:..."` for these tokens.
 ','line_number':681,'multiline':True]['text':' in leading or trailing whitespace','line_number':731,'multiline':False]['text':' a tab character is rendered both in all and boundary cases','line_number':734,'multiline':False]['text':' hit a space character','line_number':737,'multiline':False]['text':' rendering only boundary whitespace','line_number':739,'multiline':False]['text':' If rendering whitespace on selection, check that the charIndex falls within a selection','line_number':753,'multiline':False]['text':' If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.','line_number':758,'multiline':False]['text':' If the token contains RTL text, breaking it up into multiple line parts','line_number':764,'multiline':False]['text':' to render whitespace might affect the browser's bidi layout.','line_number':765,'multiline':False]['text':'','line_number':766,'multiline':False]['text':' We render whitespace in such tokens only if the whitespace','line_number':767,'multiline':False]['text':' is the leading or the trailing whitespace of the line,','line_number':768,'multiline':False]['text':' which doesn't affect the browser's bidi layout.','line_number':769,'multiline':False]['text':' was in whitespace token','line_number':776,'multiline':False]['text':' leaving whitespace token or entering a new indent','line_number':778,'multiline':False]['text':' was in regular token','line_number':790,'multiline':False]['text':' was in whitespace token','line_number':821,'multiline':False]['text':'*
 * Inline decorations are "merged" on top of tokens.
 * Special care must be taken when multiple inline decorations are at play and they overlap.
 ','line_number':850,'multiline':True]['text':' This line decoration ends before this token ends','line_number':879,'multiline':False]['text':' This line decoration continues on to the next token','line_number':884,'multiline':False]['text':'*
 * This function is on purpose not split up into multiple functions to allow runtime type inference (i.e. performance reasons).
 * Notice how all the needed data is fully resolved and passed in (i.e. no other calls).
 ','line_number':909,'multiline':True]['text':' the character offset in the current part','line_number':936,'multiline':False]['text':' the character horizontal position in terms of chars relative to line start','line_number':937,'multiline':False]['text':'only whitespace','line_number':954,'multiline':True]['text':' RIGHTWARDS ARROW','line_number':1003,'multiline':False]['text':' HALFWIDTH RIGHTWARDS ARROW','line_number':1005,'multiline':False]['text':' &nbsp;','line_number':1008,'multiline':False]['text':' must be CharCode.Space','line_number':1011,'multiline':False]['text':' &middot; or word separator middle dot','line_number':1015,'multiline':False]['text':' ZERO WIDTH NON-JOINER','line_number':1016,'multiline':False]['text':' &nbsp;','line_number':1043,'multiline':False]['text':' &nbsp;','line_number':1048,'multiline':False]['text':' See https://unicode-table.com/en/blocks/control-pictures/','line_number':1065,'multiline':False]['text':' See https://unicode-table.com/en/blocks/control-pictures/','line_number':1083,'multiline':False]['text':' DEL','line_number':1087,'multiline':False]['text':' When getting client rects for the last character, we will position the','line_number':1124,'multiline':False]['text':' text range at the end of the span, insteaf of at the beginning of next span','line_number':1125,'multiline':False]