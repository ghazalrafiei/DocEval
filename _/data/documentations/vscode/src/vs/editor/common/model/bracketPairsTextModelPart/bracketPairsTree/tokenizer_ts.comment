['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
		 * If this token is an opening bracket, this is the id of the opening bracket.
		 * If this token is a closing bracket, this is the id of the first opening bracket that is closed by this bracket.
		 * Otherwise, it is -1.
		 ','line_number':37,'multiline':True]['text':'*
		 * If this token is an opening bracket, this just contains `bracketId`.
		 * If this token is a closing bracket, this lists all opening bracket ids, that it closes.
		 * Otherwise, it is empty.
		 ','line_number':43,'multiline':True]['text':'*
 * Does not support peek.
','line_number':124,'multiline':True]['text':' We must not jump into a token!','line_number':143,'multiline':False]['text':'* Must be a zero line token. The end of the document cannot be peeked. ','line_number':157,'multiline':True]['text':' We are after the end','line_number':169,'multiline':False]['text':' limits the length of text tokens.','line_number':182,'multiline':False]['text':' If text tokens get too long, incremental updates will be slow','line_number':183,'multiline':False]['text':' Skip tokens that are identical.','line_number':194,'multiline':False]['text':' Sometimes, (bracket) identifiers are split up into multiple tokens.','line_number':195,'multiline':False]['text':' Is there a bracket token next? Only consume text.','line_number':203,'multiline':False]['text':' Consume leading text of the token','line_number':216,'multiline':False]['text':' Don't skip the entire token, as a single token could contain multiple brackets.','line_number':226,'multiline':False]['text':' There is text before the bracket','line_number':229,'multiline':False]['text':' Consume the peeked token','line_number':233,'multiline':False]['text':' Skip the entire token, as the token contains no brackets at all.','line_number':238,'multiline':False]['text':' max 1000/33 = 30 lines','line_number':252,'multiline':False]['text':' This limits the amount of work to recompute min-indentation','line_number':253,'multiline':False]['text':' only break (automatically) at the end of line.','line_number':256,'multiline':False]['text':' Eventually break regardless of the line length so that','line_number':262,'multiline':False]['text':' very long lines do not cause bad performance.','line_number':263,'multiline':False]['text':' This effective limits max indentation to 500, as','line_number':264,'multiline':False]['text':' indentation is not computed across multiple text nodes.','line_number':265,'multiline':False]['text':' If a token contains some proper indentation, it also contains \n{INDENTATION+}(?!{INDENTATION}),','line_number':270,'multiline':False]['text':' unless the line is too long.','line_number':271,'multiline':False]['text':' Thus, the min indentation of the document is the minimum min indentation of every text node.','line_number':272,'multiline':False]['text':' If a token contains indentation, it also contains \n{INDENTATION+}(?!{INDENTATION})','line_number':318,'multiline':False]['text':' value is matched by regexp, so the token must exist','line_number':349,'multiline':False]