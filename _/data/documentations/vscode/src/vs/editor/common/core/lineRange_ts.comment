['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * A range of lines (1-based).
 ','line_number':11,'multiline':True]['text':'*
	 * @param lineRanges An array of sorted line ranges.
	 ','line_number':41,'multiline':True]['text':'*
	 * @internal
	 ','line_number':59,'multiline':True]['text':'*
	 * The start line number.
	 ','line_number':66,'multiline':True]['text':'*
	 * The end line number (exclusive).
	 ','line_number':71,'multiline':True]['text':'*
	 * Indicates if this line range contains the given line number.
	 ','line_number':87,'multiline':True]['text':'*
	 * Indicates if this line range is empty.
	 ','line_number':94,'multiline':True]['text':'*
	 * Moves this line range by the given offset of line numbers.
	 ','line_number':101,'multiline':True]['text':'*
	 * The number of lines this line range spans.
	 ','line_number':112,'multiline':True]['text':'*
	 * Creates a line range that combines this and the given line range.
	 ','line_number':119,'multiline':True]['text':'*
	 * The resulting range is empty if the ranges do not intersect, but touch.
	 * If the ranges don't even touch, the result is undefined.
	 ','line_number':133,'multiline':True]['text':'*
	 * @internal
	 ','line_number':183,'multiline':True]['text':'*
	 * Converts this 1-based line range to a 0-based offset range (subtracts 1!).
	 * @internal
	 ','line_number':194,'multiline':True]['text':'*
		 * Sorted by start line number.
		 * No two line ranges are touching or intersecting.
		 ','line_number':208,'multiline':True]['text':' Idea: Find joinRange such that:','line_number':225,'multiline':False]['text':' replaceRange = _normalizedRanges.replaceRange(joinRange, range.joinAll(joinRange.map(idx => this._normalizedRanges[idx])))','line_number':226,'multiline':False]['text':' idx of first element that touches range or that is after range','line_number':228,'multiline':False]['text':' idx of element after { last element that touches range or that is before range }','line_number':230,'multiline':False]['text':' If there is no element that touches range, then joinRangeStartIdx === joinRangeEndIdxExclusive and that value is the index of the element after range','line_number':234,'multiline':False]['text':' Else, there is an element that touches range and in this case it is both the first and last element. Thus we can replace it','line_number':237,'multiline':False]['text':' First and last element are different - we need to replace the entire range','line_number':241,'multiline':False]['text':' merge','line_number':293,'multiline':False]['text':' push','line_number':296,'multiline':False]['text':'*
	 * Subtracts all ranges in this set from `range` and returns the result.
	 ','line_number':308,'multiline':True]['text':' idx of first element that touches range or that is after range','line_number':312,'multiline':False]['text':' idx of element after { last element that touches range or that is before range }','line_number':314,'multiline':False]