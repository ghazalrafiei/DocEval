['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'#region Fuzzy scorer','line_number':14,'multiline':False]['text':' score ','line_number':16,'multiline':True]['text':' match positions ','line_number':16,'multiline':True]['text':' const DEBUG = true;','line_number':22,'multiline':False]['text':' const DEBUG_MATRIX = false;','line_number':23,'multiline':False]['text':' return early if target or query are undefined','line_number':27,'multiline':False]['text':' impossible for query to be contained in target','line_number':34,'multiline':False]['text':' if (DEBUG) {','line_number':37,'multiline':False]['text':' 	console.group(`Target: ${target}, Query: ${query}`);','line_number':38,'multiline':False]['text':' }','line_number':39,'multiline':False]['text':' if (DEBUG) {','line_number':44,'multiline':False]['text':' 	console.log(`%cFinal Score: ${res[0]}`, 'font-weight: bold');','line_number':45,'multiline':False]['text':' 	console.groupEnd();','line_number':46,'multiline':False]['text':' }','line_number':47,'multiline':False]['text':'','line_number':56,'multiline':False]['text':' Build Scorer Matrix:','line_number':57,'multiline':False]['text':'','line_number':58,'multiline':False]['text':' The matrix is composed of query q and target t. For each index we score','line_number':59,'multiline':False]['text':' q[i] with t[i] and compare that with the previous score. If the score is','line_number':60,'multiline':False]['text':' equal or larger, we keep the match. In addition to the score, we also keep','line_number':61,'multiline':False]['text':' the length of the consecutive matches to use as boost for the score.','line_number':62,'multiline':False]['text':'','line_number':63,'multiline':False]['text':'      t   a   r   g   e   t','line_number':64,'multiline':False]['text':'  q','line_number':65,'multiline':False]['text':'  u','line_number':66,'multiline':False]['text':'  e','line_number':67,'multiline':False]['text':'  r','line_number':68,'multiline':False]['text':'  y','line_number':69,'multiline':False]['text':'','line_number':70,'multiline':False]['text':' If we are not matching on the first query character any more, we only produce a','line_number':92,'multiline':False]['text':' score if we had a score previously for the last query index (by looking at the diagScore).','line_number':93,'multiline':False]['text':' This makes sure that the query always matches in sequence on the target. For example','line_number':94,'multiline':False]['text':' given a target of "ede" and a query of "de", we would otherwise produce a wrong high score','line_number':95,'multiline':False]['text':' for query[1] ("e") matching on target[0] ("e") because of the "beginning of word" boost.','line_number':96,'multiline':False]['text':' We have a score and its equal or larger than the left score','line_number':104,'multiline':False]['text':' Match: sequence continues growing from previous diag value','line_number':105,'multiline':False]['text':' Score: increases by diag score value','line_number':106,'multiline':False]['text':' We don't need to check if it's contiguous if we allow non-contiguous matches','line_number':109,'multiline':False]['text':' We must be looking for a contiguous match.','line_number':111,'multiline':False]['text':' Looking at an index higher than 0 in the query means we must have already','line_number':112,'multiline':False]['text':' found out this is contiguous otherwise there wouldn't have been a score','line_number':113,'multiline':False]['text':' lastly check if the query is completely contiguous at this index in the target','line_number':115,'multiline':False]['text':' We either have no score or the score is lower than the left score','line_number':122,'multiline':False]['text':' Match: reset to 0','line_number':123,'multiline':False]['text':' Score: pick up from left hand side','line_number':124,'multiline':False]['text':' Restore Positions (starting from bottom right of matrix)','line_number':132,'multiline':False]['text':' go left','line_number':140,'multiline':False]['text':' go up and left','line_number':144,'multiline':False]['text':' Print matrix','line_number':150,'multiline':False]['text':' if (DEBUG_MATRIX) {','line_number':151,'multiline':False]['text':' 	printMatrix(query, target, matches, scores);','line_number':152,'multiline':False]['text':' }','line_number':153,'multiline':False]['text':' no match of characters','line_number':162,'multiline':False]['text':' if (DEBUG) {','line_number':165,'multiline':False]['text':' 	console.groupCollapsed(`%cFound a match of char: ${queryLowerCharAtIndex} at index ${targetIndex}`, 'font-weight: normal');','line_number':166,'multiline':False]['text':' }','line_number':167,'multiline':False]['text':' Character match bonus','line_number':169,'multiline':False]['text':' if (DEBUG) {','line_number':172,'multiline':False]['text':' 	console.log(`%cCharacter match bonus: +1`, 'font-weight: normal');','line_number':173,'multiline':False]['text':' }','line_number':174,'multiline':False]['text':' Consecutive match bonus','line_number':176,'multiline':False]['text':' if (DEBUG) {','line_number':180,'multiline':False]['text':' 	console.log(`Consecutive match bonus: +${matchesSequenceLength * 5}`);','line_number':181,'multiline':False]['text':' }','line_number':182,'multiline':False]['text':' Same case bonus','line_number':185,'multiline':False]['text':' if (DEBUG) {','line_number':189,'multiline':False]['text':' 	console.log('Same case bonus: +1');','line_number':190,'multiline':False]['text':' }','line_number':191,'multiline':False]['text':' Start of word bonus','line_number':194,'multiline':False]['text':' if (DEBUG) {','line_number':198,'multiline':False]['text':' 	console.log('Start of word bonus: +8');','line_number':199,'multiline':False]['text':' }','line_number':200,'multiline':False]['text':' After separator bonus','line_number':205,'multiline':False]['text':' if (DEBUG) {','line_number':210,'multiline':False]['text':' 	console.log(`After separator bonus: +${separatorBonus}`);','line_number':211,'multiline':False]['text':' }','line_number':212,'multiline':False]['text':' Inside word upper case bonus (camel case). We only give this bonus if we're not in a contiguous sequence.','line_number':215,'multiline':False]['text':' For example:','line_number':216,'multiline':False]['text':' NPE => NullPointerException = boost','line_number':217,'multiline':False]['text':' HTTP => HTTP = not boost','line_number':218,'multiline':False]['text':' if (DEBUG) {','line_number':222,'multiline':False]['text':' 	console.log('Inside word upper case bonus: +2');','line_number':223,'multiline':False]['text':' }','line_number':224,'multiline':False]['text':' if (DEBUG) {','line_number':228,'multiline':False]['text':' 	console.log(`Total score: ${score}`);','line_number':229,'multiline':False]['text':' 	console.groupEnd();','line_number':230,'multiline':False]['text':' }','line_number':231,'multiline':False]['text':' Special case path separators: ignore platform differences','line_number':241,'multiline':False]['text':' prefer path separators...','line_number':253,'multiline':False]['text':' ...over other separators','line_number':261,'multiline':False]['text':' function printMatrix(query: string, target: string, matches: number[], scores: number[]): void {','line_number':267,'multiline':False]['text':' 	console.log('\t' + target.split('').join('\t'));','line_number':268,'multiline':False]['text':' 	for (let queryIndex = 0; queryIndex < query.length; queryIndex++) {','line_number':269,'multiline':False]['text':' 		let line = query[queryIndex] + '\t';','line_number':270,'multiline':False]['text':' 		for (let targetIndex = 0; targetIndex < target.length; targetIndex++) {','line_number':271,'multiline':False]['text':' 			const currentIndex = queryIndex * target.length + targetIndex;','line_number':272,'multiline':False]['text':' 			line = line + 'M' + matches[currentIndex] + '/' + 'S' + scores[currentIndex] + '\t';','line_number':273,'multiline':False]['text':' 		}','line_number':274,'multiline':False]['text':' 		console.log(line);','line_number':276,'multiline':False]['text':' 	}','line_number':277,'multiline':False]['text':' }','line_number':278,'multiline':False]['text':'#endregion','line_number':280,'multiline':False]['text':'#region Alternate fuzzy scorer implementation that is e.g. used for symbols','line_number':283,'multiline':False]['text':' score ','line_number':285,'multiline':True]['text':' Score: multiple inputs','line_number':291,'multiline':False]['text':' Score: single input','line_number':297,'multiline':False]['text':' if a single query value does not match, return with','line_number':308,'multiline':False]['text':' no score entirely, we require all queries to match','line_number':309,'multiline':False]['text':' if we have a score, ensure that the positions are','line_number':317,'multiline':False]['text':' sorted in ascending order and distinct','line_number':318,'multiline':False]['text':'#endregion','line_number':331,'multiline':False]['text':'#region Item (label, description, path) scorer','line_number':334,'multiline':False]['text':'*
 * Scoring on structural items that have a label and optional description.
 ','line_number':336,'multiline':True]['text':'*
	 * Overall score.
	 ','line_number':341,'multiline':True]['text':'*
	 * Matches within the label.
	 ','line_number':346,'multiline':True]['text':'*
	 * Matches within the description.
	 ','line_number':351,'multiline':True]['text':'*
	 * Just the label of the item to score on.
	 ','line_number':361,'multiline':True]['text':'*
	 * The optional description of the item to score on.
	 ','line_number':366,'multiline':True]['text':'*
	 * If the item is a file, the path of the file to score on.
	 ','line_number':371,'multiline':True]['text':' we need an item and query to score on at least','line_number':396,'multiline':False]['text':' we need a label at least','line_number':401,'multiline':False]['text':' in order to speed up scoring, we cache the score with a unique hash based on:','line_number':406,'multiline':False]['text':' - label','line_number':407,'multiline':False]['text':' - description (if provided)','line_number':408,'multiline':False]['text':' - whether non-contiguous matching is enabled or not','line_number':409,'multiline':False]['text':' - hash of the query (normalized) values','line_number':410,'multiline':False]['text':' Treat identity matches on full path highest','line_number':426,'multiline':False]['text':' Score: multiple inputs','line_number':431,'multiline':False]['text':' Score: single input','line_number':436,'multiline':False]['text':' if a single query value does not match, return with','line_number':448,'multiline':False]['text':' no score entirely, we require all queries to match','line_number':449,'multiline':False]['text':' if we have a score, ensure that the positions are','line_number':463,'multiline':False]['text':' sorted in ascending order and distinct','line_number':464,'multiline':False]['text':' Prefer label matches if told so or we have no description','line_number':474,'multiline':False]['text':' If we have a prefix match on the label, we give a much','line_number':483,'multiline':False]['text':' higher baseScore to elevate these matches over others','line_number':484,'multiline':False]['text':' This ensures that typing a file name wins over results','line_number':485,'multiline':False]['text':' that are present somewhere in the label, but not the','line_number':486,'multiline':False]['text':' beginning.','line_number':487,'multiline':False]['text':' We give another boost to labels that are short, e.g. given','line_number':493,'multiline':False]['text':' files "window.ts" and "windowActions.ts" and a query of','line_number':494,'multiline':False]['text':' "window", we want "window.ts" to receive a higher score.','line_number':495,'multiline':False]['text':' As such we compute the percentage the query has within the','line_number':496,'multiline':False]['text':' label and add that to the baseScore.','line_number':497,'multiline':False]['text':' Finally compute description + label scores if we have a description','line_number':508,'multiline':False]['text':' assume this is a file path','line_number':512,'multiline':False]['text':' We have to split the matches back onto the label and description portions','line_number':528,'multiline':False]['text':' Match overlaps label and description part, we need to split it up','line_number':531,'multiline':False]['text':' Match on label part','line_number':537,'multiline':False]['text':' Match on description part','line_number':542,'multiline':False]['text':' sort matches by start to be able to normalize','line_number':576,'multiline':False]['text':' merge matches that overlap','line_number':581,'multiline':False]['text':' if we have no current match or the matches','line_number':586,'multiline':False]['text':' do not overlap, we take it as is and remember','line_number':587,'multiline':False]['text':' it for future merging','line_number':588,'multiline':False]['text':' otherwise we merge the matches','line_number':594,'multiline':False]['text':' A ends before B starts','line_number':606,'multiline':False]['text':' B ends before A starts','line_number':610,'multiline':False]['text':'#endregion','line_number':616,'multiline':False]['text':'#region Comparers','line_number':619,'multiline':False]['text':' 1.) identity matches have highest score','line_number':628,'multiline':False]['text':' 2.) matches on label are considered higher compared to label+description matches','line_number':635,'multiline':False]['text':' prefer more compact matches over longer in label (unless this is a prefix match where','line_number':641,'multiline':False]['text':' longer prefix matches are actually preferred)','line_number':642,'multiline':False]['text':' prefer shorter labels over longer labels','line_number':650,'multiline':False]['text':' 3.) compare by score in label+description','line_number':658,'multiline':False]['text':' 4.) scores are identical: prefer matches in label over non-label matches','line_number':663,'multiline':False]['text':' 5.) scores are identical: prefer more compact matches (label and description)','line_number':672,'multiline':False]['text':' 6.) scores are identical: start to use the fallback compare','line_number':679,'multiline':False]['text':' If we have description matches, the start is first of description match','line_number':687,'multiline':False]['text':' Otherwise, the start is the first label match','line_number':692,'multiline':False]['text':' If we have label match, the end is the last label match','line_number':697,'multiline':False]['text':' If we had a description match, we add the length of the description','line_number':698,'multiline':False]['text':' as offset to the end to indicate this.','line_number':699,'multiline':False]['text':' If we have just a description match, the end is the last description match','line_number':710,'multiline':False]['text':' make sure to not cause bad comparing when matches are not provided','line_number':720,'multiline':False]['text':' Compute match length of A (first to last match)','line_number':731,'multiline':False]['text':' Compute match length of B (first to last match)','line_number':736,'multiline':False]['text':' Prefer shorter match length','line_number':741,'multiline':False]['text':' check for label + description length and prefer shorter','line_number':747,'multiline':False]['text':' check for path length and prefer shorter','line_number':761,'multiline':False]['text':' 7.) finally we have equal scores and equal length, we fallback to comparer','line_number':769,'multiline':False]['text':' compare by label','line_number':771,'multiline':False]['text':' compare by description','line_number':776,'multiline':False]['text':' compare by path','line_number':781,'multiline':False]['text':' equal','line_number':786,'multiline':False]['text':'#endregion','line_number':790,'multiline':False]['text':'#region Query Normalizer','line_number':793,'multiline':False]['text':'*
	 * The original query as provided as input.
	 ','line_number':797,'multiline':True]['text':'*
	 * Original normalized to platform separators:
	 * - Windows: \
	 * - Posix: /
	 ','line_number':803,'multiline':True]['text':'*
	 * In addition to the normalized path, will have
	 * whitespace and wildcards removed.
	 ','line_number':810,'multiline':True]['text':'*
	 * The query is wrapped in quotes which means
	 * this query must be a substring of the input.
	 * In other words, no fuzzy matching is used.
	 ','line_number':817,'multiline':True]['text':'*
	 * Query split by spaces into pieces.
	 ','line_number':827,'multiline':True]['text':'*
	 * Whether the query contains path separator(s) or not.
	 ','line_number':832,'multiline':True]['text':'
 * If a query is wrapped in quotes, the user does not want to
 * use fuzzy search for this query.
 ','line_number':838,'multiline':True]['text':'*
 * Helper function to prepare a search value for scoring by removing unwanted characters
 * and allowing to score on multiple pieces separated by whitespace character.
 ','line_number':846,'multiline':True]['text':'g, sep); // Help Windows users to search for paths when using slash','line_number':896,'multiline':False]['text':' Help macOS/Linux users to search for paths when using backslash','line_number':898,'multiline':False]['text':' we remove quotes here because quotes are used for exact match search','line_number':901,'multiline':False]