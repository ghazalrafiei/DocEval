['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * @returns whether the provided parameter is a JavaScript String or not.
 ','line_number':6,'multiline':True]['text':'*
 * @returns whether the provided parameter is a JavaScript Array and each element in the array is a string.
 ','line_number':13,'multiline':True]['text':'*
 * @returns whether the provided parameter is of type `object` but **not**
 *	`null`, an `array`, a `regexp`, nor a `date`.
 ','line_number':20,'multiline':True]['text':' The method can't do a type cast since there are type (like strings) which','line_number':25,'multiline':False]['text':' are subclasses of any put not positvely matched by the function. Hence type','line_number':26,'multiline':False]['text':' narrowing results in wrong results.','line_number':27,'multiline':False]['text':'*
 * @returns whether the provided parameter is of type `Buffer` or Uint8Array dervived type
 ','line_number':35,'multiline':True]['text':'*
 * In **contrast** to just checking `typeof` this will return `false` for `NaN`.
 * @returns whether the provided parameter is a JavaScript Number or not.
 ','line_number':44,'multiline':True]['text':'*
 * @returns whether the provided parameter is an Iterable, casting to the given generic
 ','line_number':52,'multiline':True]['text':'*
 * @returns whether the provided parameter is a JavaScript Boolean or not.
 ','line_number':59,'multiline':True]['text':'*
 * @returns whether the provided parameter is undefined.
 ','line_number':66,'multiline':True]['text':'*
 * @returns whether the provided parameter is defined.
 ','line_number':73,'multiline':True]['text':'*
 * @returns whether the provided parameter is undefined or null.
 ','line_number':80,'multiline':True]['text':'*
 * Asserts that the argument passed in is neither undefined nor null.
 ','line_number':94,'multiline':True]['text':'*
 * Asserts that each argument passed in is neither undefined nor null.
 ','line_number':105,'multiline':True]['text':'*
 * @returns whether the provided parameter is an empty JavaScript Object or not.
 ','line_number':129,'multiline':True]['text':'*
 * @returns whether the provided parameter is a JavaScript Function or not.
 ','line_number':146,'multiline':True]['text':'*
 * @returns whether the provided parameters is are JavaScript Function or not.
 ','line_number':153,'multiline':True]['text':' ignore','line_number':181,'multiline':False]['text':' Function: add param to function','line_number':194,'multiline':False]['text':' Else: just leave as is','line_number':197,'multiline':False]['text':'*
 * Allows to add a first parameter to functions of a type.
 ','line_number':200,'multiline':True]['text':' For every property','line_number':204,'multiline':False]['text':'*
 * Given an object with all optional properties, requires at least one to be defined.
 * i.e. AtLeastOne<MyObject>;
 ','line_number':208,'multiline':True]['text':'*
 * Only picks the non-optional properties of a type.
 ','line_number':214,'multiline':True]['text':'*
 * A type that removed readonly-less from all properties of `T`
 ','line_number':219,'multiline':True]['text':'*
 * A single object or an array of the objects.
 ','line_number':226,'multiline':True]['text':'*
 * A type that recursively makes all properties of `T` required
 ','line_number':232,'multiline':True]['text':'*
 * Represents a type that is a partial version of a given type `T`, where all properties are optional and can be deeply nested.
 ','line_number':240,'multiline':True]