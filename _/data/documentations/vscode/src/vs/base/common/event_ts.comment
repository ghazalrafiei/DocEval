['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' -----------------------------------------------------------------------------------------------------------------------','line_number':16,'multiline':False]['text':' Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.','line_number':17,'multiline':False]['text':' -----------------------------------------------------------------------------------------------------------------------','line_number':18,'multiline':False]['text':' _enableDisposeWithListenerWarning = Boolean("TRUE"); // causes a linter warning so that it cannot be pushed','line_number':20,'multiline':False]['text':' -----------------------------------------------------------------------------------------------------------------------','line_number':23,'multiline':False]['text':' Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.','line_number':24,'multiline':False]['text':' See https://github.com/microsoft/vscode/issues/142851','line_number':25,'multiline':False]['text':' -----------------------------------------------------------------------------------------------------------------------','line_number':26,'multiline':False]['text':' _enableSnapshotPotentialLeakWarning = Boolean("TRUE"); // causes a linter warning so that it cannot be pushed','line_number':28,'multiline':False]['text':'*
 * An event with zero or one parameters that can be subscribed to. The event is a function itself.
 ','line_number':30,'multiline':True]['text':'*
	 * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared
	 * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a
	 * result of merging events and to try prevent race conditions that could arise when using related deferred and
	 * non-deferred events.
	 *
	 * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work
	 * (eg. latency of keypress to text rendered).
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @param event The event source for the new event.
	 * @param disposable A disposable store to add the new EventEmitter to.
	 ','line_number':55,'multiline':True]['text':'*
	 * Given an event, returns another event which only fires once.
	 *
	 * @param event The event source for the new event.
	 ','line_number':75,'multiline':True]['text':' we need this, in case the event fires during the listener call','line_number':82,'multiline':False]['text':'*
	 * Maps an event of one type into an event of another type using a mapping function, similar to how
	 * `Array.prototype.map` works.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @param event The event source for the new event.
	 * @param map The mapping function.
	 * @param disposable A disposable store to add the new EventEmitter to.
	 ','line_number':105,'multiline':True]['text':'*
	 * Wraps an event in another event that performs some function on the event object before firing.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @param event The event source for the new event.
	 * @param each The function to perform on the event object.
	 * @param disposable A disposable store to add the new EventEmitter to.
	 ','line_number':121,'multiline':True]['text':'*
	 * Wraps an event in another event that fires only when some condition is met.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @param event The event source for the new event.
	 * @param filter The filter function that defines the condition. The event will fire for the object if this function
	 * returns true.
	 * @param disposable A disposable store to add the new EventEmitter to.
	 ','line_number':136,'multiline':True]['text':'*
	 * Given an event, returns the same event but typed as `Event<void>`.
	 ','line_number':155,'multiline':True]['text':'*
	 * Given a collection of events, returns a single event which emits whenever any of the provided events emit.
	 ','line_number':162,'multiline':True]['text':'*
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 ','line_number':174,'multiline':True]['text':'*
	 * Adds the IDisposable to the store if it's set, and returns it. Useful to
	 * Event function implementation.
	 ','line_number':211,'multiline':True]['text':'*
	 * Given an event, creates a new emitter that event that will debounce events based on {@link delay} and give an
	 * array event object of all events that fired.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @param event The original event to debounce.
	 * @param merge A function that reduces all events into a single event.
	 * @param delay The number of milliseconds to debounce.
	 * @param leading Whether to fire a leading event without debouncing.
	 * @param flushOnListenerRemove Whether to fire all debounced events when a listener is removed. If this is not
	 * specified, some events could go missing. Use this if it's important that all events are processed, even if the
	 * listener gets disposed before the debounced event fires.
	 * @param leakWarningThreshold See {@link EmitterOptions.leakWarningThreshold}.
	 * @param disposable A disposable store to register the debounce emitter to.
	 ','line_number':224,'multiline':True]['text':'*
	 * Debounces an event, firing after some delay (default=0) with an array of all event original objects.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 ','line_number':306,'multiline':True]['text':'*
	 * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate
	 * event objects from different sources do not fire the same event object.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @param event The event source for the new event.
	 * @param equals The equality condition.
	 * @param disposable A disposable store to add the new EventEmitter to.
	 *
	 * @example
	 * ```
	 * // Fire only one time when a single window is opened or focused
	 * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))
	 * ```
	 ','line_number':323,'multiline':True]['text':'*
	 * Splits an event whose parameter is a union type into 2 separate events for each type in the union.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @example
	 * ```
	 * const event = new EventEmitter<number | undefined>().event;
	 * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);
	 * ```
	 *
	 * @param event The event source for the new event.
	 * @param isT A function that determines what event is of the first type.
	 * @param disposable A disposable store to add the new EventEmitter to.
	 ','line_number':353,'multiline':True]['text':'*
	 * Buffers an event until it has a listener attached.
	 *
	 * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned
	 * event is accessible to "third parties", e.g the event is a public property. Otherwise a leaked listener on the
	 * returned event causes this utility to leak a listener on the original event.
	 *
	 * @param event The event source for the new event.
	 * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a
	 * `setTimeout` when the first event listener is added.
	 * @param _buffer Internal: A source event array used for tests.
	 *
	 * @example
	 * ```
	 * // Start accumulating events, when the first listener is attached, flush
	 * // the event after a timeout such that multiple listeners attached before
	 * // the timeout would receive the event
	 * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);
	 * ```
	 ','line_number':377,'multiline':True]['text':'*
	 * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.
	 *
	 * @example
	 * ```
	 * // Normal
	 * const onEnterPressNormal = Event.filter(
	 *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),
	 *   e.keyCode === KeyCode.Enter
	 * ).event;
	 *
	 * // Using chain
	 * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $
	 *   .map(e => new StandardKeyboardEvent(e))
	 *   .filter(e => e.keyCode === KeyCode.Enter)
	 * );
	 * ```
	 ','line_number':451,'multiline':True]['text':'*
	 * Creates an {@link Event} from a node event emitter.
	 ','line_number':555,'multiline':True]['text':'*
	 * Creates an {@link Event} from a DOM event emitter.
	 ','line_number':572,'multiline':True]['text':'*
	 * Creates a promise out of an event, using the {@link Event.once} helper.
	 ','line_number':584,'multiline':True]['text':'*
	 * Creates an event out of a promise that fires once when the promise is
	 * resolved with the result of the promise or `undefined`.
	 ','line_number':591,'multiline':True]['text':'*
	 * Adds a listener to an event and calls the listener immediately with undefined as the event object.
	 *
	 * @example
	 * ```
	 * // Initialize the UI and update it when dataChangeEvent fires
	 * runAndSubscribe(dataChangeEvent, () => this._updateUI());
	 * ```
	 ','line_number':609,'multiline':True]['text':'*
	 * Adds a listener to an event and calls the listener immediately with undefined as the event object. A new
	 * {@link DisposableStore} is passed to the listener which is disposed when the returned disposable is disposed.
	 ','line_number':625,'multiline':True]['text':' assert(_observable === this.obs);','line_number':672,'multiline':False]['text':' assert(_observable === this.obs);','line_number':677,'multiline':False]['text':' assert(_observable === this.obs);','line_number':681,'multiline':False]['text':' assert(_observable === this.obs);','line_number':686,'multiline':False]['text':'*
	 * Creates an event emitter that is fired when the observable changes.
	 * Each listeners subscribes to the emitter.
	 ','line_number':698,'multiline':True]['text':'*
	 * Each listener is attached to the observable directly.
	 ','line_number':707,'multiline':True]['text':' noop','line_number':729,'multiline':False]['text':'*
	 * Optional function that's called *before* the very first listener is added
	 ','line_number':755,'multiline':True]['text':'*
	 * Optional function that's called *after* the very first listener is added
	 ','line_number':759,'multiline':True]['text':'*
	 * Optional function that's called after a listener is added
	 ','line_number':763,'multiline':True]['text':'*
	 * Optional function that's called *after* remove the very last listener
	 ','line_number':767,'multiline':True]['text':'*
	 * Optional function that's called *before* a listener is removed
	 ','line_number':771,'multiline':True]['text':'*
	 * Optional function that's called when a listener throws an error. Defaults to
	 * {@link onUnexpectedError}
	 ','line_number':775,'multiline':True]['text':'*
	 * Number of listeners that are allowed before assuming a leak. Default to
	 * a globally configured value
	 *
	 * @see setGlobalLeakWarningThreshold
	 ','line_number':780,'multiline':True]['text':'*
	 * Pass in a delivery queue, which is useful for ensuring
	 * in order event delivery across multiple emitters.
	 ','line_number':787,'multiline':True]['text':'* ONLY enable this during development ','line_number':793,'multiline':True]['text':' only warn on first exceed and then every time the limit','line_number':873,'multiline':False]['text':' is exceeded by 50% again','line_number':874,'multiline':False]['text':' find most frequent listener and print warning','line_number':877,'multiline':False]['text':'*
 * The Emitter can be used to expose an Event to the public
 * to fire it from the insides.
 * Sample:
	class Document {

		private readonly _onDidChange = new Emitter<(value:string)=>any>();

		public onDidChange = this._onDidChange.event;

		// getter-style
		// get onDidChange(): Event<(value:string)=>any> {
		// 	return this._onDidChange.event;
		// }

		private _doIt() {
			//...
			this._onDidChange.fire(value);
		}
	}
 ','line_number':935,'multiline':True]['text':'*
	 * A listener, or list of listeners. A single listener is the most common
	 * for event emitters (#185789), so we optimize that special case to avoid
	 * wrapping it in an array (just like Node.js itself.)
	 *
	 * A list of listeners never 'downgrades' back to a plain function if
	 * listeners are removed, for two reasons:
	 *
	 *  1. That's complicated (especially with the deliveryQueue)
	 *  2. A listener with >1 listener is likely to have >1 listener again at
	 *     some point, and swapping between arrays and functions may[citation needed]
	 *     introduce unnecessary work and garbage.
	 *
	 * The array listeners can be 'sparse', to avoid reallocating the array
	 * whenever any listener is added or removed. If more than `1 / compactionThreshold`
	 * of the array is empty, only then is it resized.
	 ','line_number':964,'multiline':True]['text':'*
	 * Always to be defined if _listeners is an array. It's no longer a true
	 * queue, but holds the dispatching 'state'. If `fire()` is called on an
	 * emitter, any work left in the _deliveryQueue is finished first.
	 ','line_number':983,'multiline':True]['text':' It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter','line_number':1002,'multiline':False]['text':' alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and','line_number':1003,'multiline':False]['text':' unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the','line_number':1004,'multiline':False]['text':' the following programming pattern is very popular:','line_number':1005,'multiline':False]['text':'','line_number':1006,'multiline':False]['text':' const someModel = this._disposables.add(new ModelObject()); // (1) create and register model','line_number':1007,'multiline':False]['text':' this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener','line_number':1008,'multiline':False]['text':' ...later...','line_number':1009,'multiline':False]['text':' this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the "overall dispose" is done','line_number':1010,'multiline':False]['text':'*
	 * For the public to allow to subscribe
	 * to events from this Emitter
	 ','line_number':1031,'multiline':True]['text':' todo: should we warn if a listener is added to a disposed emitter? This happens often','line_number':1043,'multiline':False]['text':' check and record this emitter for potential leakage','line_number':1056,'multiline':False]['text':' expected if a listener gets disposed','line_number':1095,'multiline':False]['text':' size > 1 which requires that listeners be a list:','line_number':1105,'multiline':False]['text':'* Delivers items in the queue. Assumes the queue is ready to go. ','line_number':1154,'multiline':True]['text':' important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()','line_number':1158,'multiline':False]['text':'*
	 * To be kept private to fire an event to
	 * subscribers
	 ','line_number':1164,'multiline':True]['text':' last fire() will have starting perfmon, stop it before starting the next dispatch','line_number':1171,'multiline':False]['text':' no-op','line_number':1177,'multiline':False]['text':'*
	 * Index in current's listener list.
	 ','line_number':1203,'multiline':True]['text':'*
	 * The last index in the listener's list to deliver.
	 ','line_number':1208,'multiline':True]['text':'*
	 * Emitter currently being dispatched on. Emitter._listeners is always an array.
	 ','line_number':1213,'multiline':True]['text':'*
	 * Currently emitting value. Defined whenever `current` is.
	 ','line_number':1217,'multiline':True]['text':' force any current emission loop to stop, mainly for during dispose','line_number':1230,'multiline':False]['text':' freeze thenables-collection to enforce sync-calls to','line_number':1284,'multiline':False]['text':' wait until and then wait for all thenables to resolve','line_number':1285,'multiline':False]['text':' use the merge function to create a single composite','line_number':1322,'multiline':False]['text':' event. make a copy in case firing pauses this emitter','line_number':1323,'multiline':False]['text':' no merging, fire each event individually and test','line_number':1331,'multiline':False]['text':' that this emitter isn't paused halfway through','line_number':1332,'multiline':False]['text':'*
 * An emitter which queue all events and then process them at the
 * end of the event loop.
 ','line_number':1373,'multiline':True]['text':'*
 * An event emitter that multiplexes many events into a single event.
 *
 * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s
 * to the multiplexer as needed.
 *
 * ```typescript
 * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();
 *
 * const thingListeners = DisposableMap<Thing, IDisposable>();
 *
 * thingService.onDidAddThing(thing => {
 *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);
 * });
 * thingService.onDidRemoveThing(thing => {
 *   thingListeners.deleteAndDispose(thing);
 * });
 *
 * anythingDataMultiplexer.event(e => {
 *   console.log('Something fired data ' + e.data)
 * });
 * ```
 ','line_number':1405,'multiline':True]['text':' Existing items','line_number':1512,'multiline':False]['text':' Added items','line_number':1517,'multiline':False]['text':' Removed items','line_number':1522,'multiline':False]['text':'*
 * The EventBufferer is useful in situations in which you want
 * to delay firing your events during some code.
 * You can wrap that code and be sure that the event will not
 * be fired during that wrap.
 *
 * ```
 * const emitter: Emitter;
 * const delayer = new EventDelayer();
 * const delayedEvent = delayer.wrapEvent(emitter.event);
 *
 * delayedEvent(console.log);
 *
 * delayer.bufferEvents(() => {
 *   emitter.fire(); // event will not be fired yet
 * });
 *
 * // event will only be fired at this point
 * ```
 ','line_number':1535,'multiline':True]['text':'*
 * A Relay is an event forwarder which functions as a replugabble event pipe.
 * Once created, you can connect an input event to it and it will simply forward
 * events from that input event through its own `event` property. The `input`
 * can be changed at any point in time.
 ','line_number':1583,'multiline':True]