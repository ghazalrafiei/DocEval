['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace','line_number':6,'multiline':False]['text':' Copied from: https://github.com/nodejs/node/blob/v16.14.2/lib/path.js','line_number':7,'multiline':False]['text':'*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 ','line_number':9,'multiline':True]['text':' A ','line_number':34,'multiline':True]['text':' a ','line_number':35,'multiline':True]['text':' Z ','line_number':36,'multiline':True]['text':' z ','line_number':37,'multiline':True]['text':' . ','line_number':38,'multiline':True]['text':' / ','line_number':39,'multiline':True]['text':' \ ','line_number':40,'multiline':True]['text':' : ','line_number':41,'multiline':True]['text':' ? ','line_number':42,'multiline':True]['text':' determiner: 'must be' or 'must not be'','line_number':47,'multiline':False]['text':' Resolves . and .. elements in a path with directory names','line_number':93,'multiline':False]['text':' NOOP','line_number':113,'multiline':False]['text':' path.resolve([from ...], to)','line_number':200,'multiline':False]['text':' Skip empty entries','line_number':212,'multiline':False]['text':' Windows has the concept of drive-specific current working','line_number':219,'multiline':False]['text':' directories. If we've resolved a drive letter but not yet an','line_number':220,'multiline':False]['text':' absolute path, get cwd for that drive, or the process cwd if','line_number':221,'multiline':False]['text':' the drive cwd is not available. We're sure the device is not','line_number':222,'multiline':False]['text':' a UNC path at this points, because UNC paths are always absolute.','line_number':223,'multiline':False]['text':' Verify that a cwd was found and that it actually points','line_number':226,'multiline':False]['text':' to our drive. If not, default to the drive's root.','line_number':227,'multiline':False]['text':' Try to match a root','line_number':241,'multiline':False]['text':' `path` contains just a path separator','line_number':244,'multiline':False]['text':' Possible UNC root','line_number':249,'multiline':False]['text':' If we started with a separator, we know we at least have an','line_number':251,'multiline':False]['text':' absolute path of some kind (UNC or otherwise)','line_number':252,'multiline':False]['text':' Matched double path separator at beginning','line_number':256,'multiline':False]['text':' Match 1 or more non-path separators','line_number':259,'multiline':False]['text':' Matched!','line_number':265,'multiline':False]['text':' Match 1 or more path separators','line_number':267,'multiline':False]['text':' Matched!','line_number':272,'multiline':False]['text':' Match 1 or more non-path separators','line_number':274,'multiline':False]['text':' We matched a UNC root','line_number':279,'multiline':False]['text':' Possible device root','line_number':290,'multiline':False]['text':' Treat separator following drive name as an absolute path','line_number':294,'multiline':False]['text':' indicator','line_number':295,'multiline':False]['text':' This path points to another device so it is not applicable','line_number':304,'multiline':False]['text':' At this point the path should be resolved to a full absolute path,','line_number':325,'multiline':False]['text':' but handle relative paths to be safe (might happen when process.cwd()','line_number':326,'multiline':False]['text':' fails)','line_number':327,'multiline':False]['text':' Normalize the tail path','line_number':329,'multiline':False]['text':' Try to match a root','line_number':349,'multiline':False]['text':' `path` contains just a single char, exit early to avoid','line_number':351,'multiline':False]['text':' unnecessary work','line_number':352,'multiline':False]['text':' Possible UNC root','line_number':356,'multiline':False]['text':' If we started with a separator, we know we at least have an absolute','line_number':358,'multiline':False]['text':' path of some kind (UNC or otherwise)','line_number':359,'multiline':False]['text':' Matched double path separator at beginning','line_number':363,'multiline':False]['text':' Match 1 or more non-path separators','line_number':366,'multiline':False]['text':' Matched!','line_number':372,'multiline':False]['text':' Match 1 or more path separators','line_number':374,'multiline':False]['text':' Matched!','line_number':379,'multiline':False]['text':' Match 1 or more non-path separators','line_number':381,'multiline':False]['text':' We matched a UNC root only','line_number':386,'multiline':False]['text':' Return the normalized version of the UNC root since there','line_number':387,'multiline':False]['text':' is nothing left to process','line_number':388,'multiline':False]['text':' We matched a UNC root with leftovers','line_number':392,'multiline':False]['text':' Possible device root','line_number':402,'multiline':False]['text':' Treat separator following drive name as an absolute path','line_number':406,'multiline':False]['text':' indicator','line_number':407,'multiline':False]['text':' Possible device root','line_number':437,'multiline':False]['text':' Make sure that the joined path doesn't start with two slashes, because','line_number':468,'multiline':False]['text':' normalize() will mistake it for a UNC path then.','line_number':469,'multiline':False]['text':'','line_number':470,'multiline':False]['text':' This step is skipped when it is very clear that the user actually','line_number':471,'multiline':False]['text':' intended to point at a UNC path. This is assumed when the first','line_number':472,'multiline':False]['text':' non-empty string arguments starts with exactly two slashes followed by','line_number':473,'multiline':False]['text':' at least one more non-slash character.','line_number':474,'multiline':False]['text':'','line_number':475,'multiline':False]['text':' Note that for normalize() to treat a path as a UNC path it needs to','line_number':476,'multiline':False]['text':' have at least 2 components, so we don't filter for that here.','line_number':477,'multiline':False]['text':' This means that the user can use join to construct UNC paths from','line_number':478,'multiline':False]['text':' a server name and a share name; for example:','line_number':479,'multiline':False]['text':'   path.join('//server', 'share') -> '\\\\server\\share\\')','line_number':480,'multiline':False]['text':' We matched a UNC path in the first part','line_number':492,'multiline':False]['text':' Find any more consecutive slashes we need to replace','line_number':499,'multiline':False]['text':' Replace the slashes if needed','line_number':505,'multiline':False]['text':' It will solve the relative path from `from` to `to`, for instance:','line_number':515,'multiline':False]['text':'  from = 'C:\\orandea\\test\\aaa'','line_number':516,'multiline':False]['text':'  to = 'C:\\orandea\\impl\\bbb'','line_number':517,'multiline':False]['text':' The output of the function should be: '..\\..\\impl\\bbb'','line_number':518,'multiline':False]['text':' Trim any leading backslashes','line_number':541,'multiline':False]['text':' Trim trailing backslashes (applicable to UNC paths only)','line_number':547,'multiline':False]['text':' Trim any leading backslashes','line_number':555,'multiline':False]['text':' Trim trailing backslashes (applicable to UNC paths only)','line_number':561,'multiline':False]['text':' Compare paths to find the longest common path from root','line_number':569,'multiline':False]['text':' We found a mismatch before the first common path separator was seen, so','line_number':582,'multiline':False]['text':' return the original `to`.','line_number':583,'multiline':False]['text':' We get here if `from` is the exact base path for `to`.','line_number':591,'multiline':False]['text':' For example: from='C:\\foo\\bar'; to='C:\\foo\\bar\\baz'','line_number':592,'multiline':False]['text':' We get here if `from` is the device root.','line_number':596,'multiline':False]['text':' For example: from='C:\\'; to='C:\\foo'','line_number':597,'multiline':False]['text':' We get here if `to` is the exact base path for `from`.','line_number':603,'multiline':False]['text':' For example: from='C:\\foo\\bar'; to='C:\\foo'','line_number':604,'multiline':False]['text':' We get here if `to` is the device root.','line_number':607,'multiline':False]['text':' For example: from='C:\\foo\\bar'; to='C:\\'','line_number':608,'multiline':False]['text':' Generate the relative path based on the path difference between `to` and','line_number':618,'multiline':False]['text':' `from`','line_number':619,'multiline':False]['text':' Lastly, append the rest of the destination (`to`) path that comes after','line_number':628,'multiline':False]['text':' the common path parts','line_number':629,'multiline':False]['text':' Note: this will *probably* throw somewhere.','line_number':642,'multiline':False]['text':' Possible UNC root','line_number':654,'multiline':False]['text':' Matched non-long UNC root, convert the path to a long UNC path','line_number':658,'multiline':False]['text':' Matched device root, convert the path to a long UNC path','line_number':665,'multiline':False]['text':' `path` contains just a path separator, exit early to avoid','line_number':683,'multiline':False]['text':' unnecessary work or a dot.','line_number':684,'multiline':False]['text':' Try to match a root','line_number':688,'multiline':False]['text':' Possible UNC root','line_number':690,'multiline':False]['text':' Matched double path separator at beginning','line_number':695,'multiline':False]['text':' Match 1 or more non-path separators','line_number':698,'multiline':False]['text':' Matched!','line_number':703,'multiline':False]['text':' Match 1 or more path separators','line_number':705,'multiline':False]['text':' Matched!','line_number':710,'multiline':False]['text':' Match 1 or more non-path separators','line_number':712,'multiline':False]['text':' We matched a UNC root only','line_number':717,'multiline':False]['text':' We matched a UNC root with leftovers','line_number':721,'multiline':False]['text':' Offset by 1 to include the separator after the UNC root to','line_number':723,'multiline':False]['text':' treat it as a "normal root" on top of a (UNC) root','line_number':724,'multiline':False]['text':' Possible device root','line_number':730,'multiline':False]['text':' We saw the first non-path separator','line_number':745,'multiline':False]['text':' Check for a drive letter prefix so as not to mistake the following','line_number':770,'multiline':False]['text':' path separator as an extra separator at the end of the path that can be','line_number':771,'multiline':False]['text':' disregarded','line_number':772,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':788,'multiline':False]['text':' separators at the end of the string, stop now','line_number':789,'multiline':False]['text':' We saw the first non-path separator, remember this index in case','line_number':796,'multiline':False]['text':' we need it if the extension ends up not matching','line_number':797,'multiline':False]['text':' Try to match the explicit extension','line_number':802,'multiline':False]['text':' We matched the extension, so mark this as the end of our path','line_number':805,'multiline':False]['text':' component','line_number':806,'multiline':False]['text':' Extension does not match, so our result is the entire path','line_number':810,'multiline':False]['text':' component','line_number':811,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':828,'multiline':False]['text':' separators at the end of the string, stop now','line_number':829,'multiline':False]['text':' We saw the first non-path separator, mark this as the end of our','line_number':835,'multiline':False]['text':' path component','line_number':836,'multiline':False]['text':' Track the state of characters (if any) we see before our first dot and','line_number':855,'multiline':False]['text':' after any path separator we find','line_number':856,'multiline':False]['text':' Check for a drive letter prefix so as not to mistake the following','line_number':859,'multiline':False]['text':' path separator as an extra separator at the end of the path that can be','line_number':860,'multiline':False]['text':' disregarded','line_number':861,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':872,'multiline':False]['text':' separators at the end of the string, stop now','line_number':873,'multiline':False]['text':' We saw the first non-path separator, mark this as the end of our','line_number':881,'multiline':False]['text':' extension','line_number':882,'multiline':False]['text':' If this is our first dot, mark it as the start of our extension','line_number':887,'multiline':False]['text':' We saw a non-dot and non-path separator before our dot, so we should','line_number':895,'multiline':False]['text':' have a good chance at having a non-empty extension','line_number':896,'multiline':False]['text':' We saw a non-dot character immediately before the dot','line_number':903,'multiline':False]['text':' The (right-most) trimmed path component is exactly '..'','line_number':905,'multiline':False]['text':' `path` contains just a path separator, exit early to avoid','line_number':930,'multiline':False]['text':' unnecessary work','line_number':931,'multiline':False]['text':' Try to match a root','line_number':938,'multiline':False]['text':' Possible UNC root','line_number':940,'multiline':False]['text':' Matched double path separator at beginning','line_number':944,'multiline':False]['text':' Match 1 or more non-path separators','line_number':947,'multiline':False]['text':' Matched!','line_number':952,'multiline':False]['text':' Match 1 or more path separators','line_number':954,'multiline':False]['text':' Matched!','line_number':959,'multiline':False]['text':' Match 1 or more non-path separators','line_number':961,'multiline':False]['text':' We matched a UNC root only','line_number':966,'multiline':False]['text':' We matched a UNC root with leftovers','line_number':969,'multiline':False]['text':' Possible device root','line_number':976,'multiline':False]['text':' `path` contains just a drive root, exit early to avoid','line_number':978,'multiline':False]['text':' unnecessary work','line_number':979,'multiline':False]['text':' `path` contains just a drive root, exit early to avoid','line_number':986,'multiline':False]['text':' unnecessary work','line_number':987,'multiline':False]['text':' Track the state of characters (if any) we see before our first dot and','line_number':1004,'multiline':False]['text':' after any path separator we find','line_number':1005,'multiline':False]['text':' Get non-dir info','line_number':1008,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':1012,'multiline':False]['text':' separators at the end of the string, stop now','line_number':1013,'multiline':False]['text':' We saw the first non-path separator, mark this as the end of our','line_number':1021,'multiline':False]['text':' extension','line_number':1022,'multiline':False]['text':' If this is our first dot, mark it as the start of our extension','line_number':1027,'multiline':False]['text':' We saw a non-dot and non-path separator before our dot, so we should','line_number':1034,'multiline':False]['text':' have a good chance at having a non-empty extension','line_number':1035,'multiline':False]['text':' We saw a non-dot character immediately before the dot','line_number':1042,'multiline':False]['text':' The (right-most) trimmed path component is exactly '..'','line_number':1044,'multiline':False]['text':' If the directory is the root, use the entire root as the `dir` including','line_number':1056,'multiline':False]['text':' the trailing slash if any (`C:\abc` -> `C:\`). Otherwise, strip out the','line_number':1057,'multiline':False]['text':' trailing slash (`C:\abc\def` -> `C:\abc`).','line_number':1058,'multiline':False]['text':' Converts Windows' backslash path separators to POSIX forward slashes','line_number':1076,'multiline':False]['text':' and truncates any drive indicator','line_number':1077,'multiline':False]['text':' We're already on POSIX, no need for any transformations','line_number':1085,'multiline':False]['text':' path.resolve([from ...], to)','line_number':1090,'multiline':False]['text':' Skip empty entries','line_number':1100,'multiline':False]['text':' At this point the path should be resolved to a full absolute path, but','line_number':1109,'multiline':False]['text':' handle relative paths to be safe (might happen when process.cwd() fails)','line_number':1110,'multiline':False]['text':' Normalize the path','line_number':1112,'multiline':False]['text':' Normalize the path','line_number':1133,'multiline':False]['text':' Trim leading forward slashes.','line_number':1184,'multiline':False]['text':' Compare paths to find the longest common path from root','line_number':1198,'multiline':False]['text':' We get here if `from` is the exact base path for `to`.','line_number':1213,'multiline':False]['text':' For example: from='/foo/bar'; to='/foo/bar/baz'','line_number':1214,'multiline':False]['text':' We get here if `from` is the root','line_number':1218,'multiline':False]['text':' For example: from='/'; to='/foo'','line_number':1219,'multiline':False]['text':' We get here if `to` is the exact base path for `from`.','line_number':1224,'multiline':False]['text':' For example: from='/foo/bar/baz'; to='/foo/bar'','line_number':1225,'multiline':False]['text':' We get here if `to` is the root.','line_number':1228,'multiline':False]['text':' For example: from='/foo/bar'; to='/'','line_number':1229,'multiline':False]['text':' Generate the relative path based on the path difference between `to`','line_number':1236,'multiline':False]['text':' and `from`.','line_number':1237,'multiline':False]['text':' Lastly, append the rest of the destination (`to`) path that comes after','line_number':1244,'multiline':False]['text':' the common path parts.','line_number':1245,'multiline':False]['text':' Non-op on posix systems','line_number':1250,'multiline':False]['text':' We saw the first non-path separator','line_number':1269,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':1303,'multiline':False]['text':' separators at the end of the string, stop now','line_number':1304,'multiline':False]['text':' We saw the first non-path separator, remember this index in case','line_number':1311,'multiline':False]['text':' we need it if the extension ends up not matching','line_number':1312,'multiline':False]['text':' Try to match the explicit extension','line_number':1317,'multiline':False]['text':' We matched the extension, so mark this as the end of our path','line_number':1320,'multiline':False]['text':' component','line_number':1321,'multiline':False]['text':' Extension does not match, so our result is the entire path','line_number':1325,'multiline':False]['text':' component','line_number':1326,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':1343,'multiline':False]['text':' separators at the end of the string, stop now','line_number':1344,'multiline':False]['text':' We saw the first non-path separator, mark this as the end of our','line_number':1350,'multiline':False]['text':' path component','line_number':1351,'multiline':False]['text':' Track the state of characters (if any) we see before our first dot and','line_number':1369,'multiline':False]['text':' after any path separator we find','line_number':1370,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':1375,'multiline':False]['text':' separators at the end of the string, stop now','line_number':1376,'multiline':False]['text':' We saw the first non-path separator, mark this as the end of our','line_number':1384,'multiline':False]['text':' extension','line_number':1385,'multiline':False]['text':' If this is our first dot, mark it as the start of our extension','line_number':1390,'multiline':False]['text':' We saw a non-dot and non-path separator before our dot, so we should','line_number':1398,'multiline':False]['text':' have a good chance at having a non-empty extension','line_number':1399,'multiline':False]['text':' We saw a non-dot character immediately before the dot','line_number':1406,'multiline':False]['text':' The (right-most) trimmed path component is exactly '..'','line_number':1408,'multiline':False]['text':' Track the state of characters (if any) we see before our first dot and','line_number':1440,'multiline':False]['text':' after any path separator we find','line_number':1441,'multiline':False]['text':' Get non-dir info','line_number':1444,'multiline':False]['text':' If we reached a path separator that was not part of a set of path','line_number':1448,'multiline':False]['text':' separators at the end of the string, stop now','line_number':1449,'multiline':False]['text':' We saw the first non-path separator, mark this as the end of our','line_number':1457,'multiline':False]['text':' extension','line_number':1458,'multiline':False]['text':' If this is our first dot, mark it as the start of our extension','line_number':1463,'multiline':False]['text':' We saw a non-dot and non-path separator before our dot, so we should','line_number':1470,'multiline':False]['text':' have a good chance at having a non-empty extension','line_number':1471,'multiline':False]['text':' We saw a non-dot character immediately before the dot','line_number':1479,'multiline':False]['text':' The (right-most) trimmed path component is exactly '..'','line_number':1481,'multiline':False]