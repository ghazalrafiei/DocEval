['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Creates an observable that is derived from other observables.
 * The value is only recomputed when absolutely needed.
 *
 * {@link computeFn} should start with a JS Doc using `@description` to name the derived.
 ','line_number':14,'multiline':True]['text':'*
 * Represents an observable that is derived from other observables.
 * The value is only recomputed when absolutely needed.
 *
 * {@link computeFn} should start with a JS Doc using `@description` to name the derived.
 *
 * Use `createEmptyChangeSummary` to create a "change summary" that can collect the changes.
 * Use `handleChange` to add a reported change to the change summary.
 * The compute function is given the last change summary.
 * The change summary is discarded after the compute function was called.
 *
 * @see derived
 ','line_number':40,'multiline':True]['text':'* Initial state, no previous value, recomputation needed ','line_number':127,'multiline':True]['text':'*
	 * A dependency could have changed.
	 * We need to explicitly ask them if at least one dependency changed.
	 ','line_number':130,'multiline':True]['text':'*
	 * A dependency changed and we need to recompute.
	 * After recomputation, we need to check the previous value to see if we changed as well.
	 ','line_number':136,'multiline':True]['text':'*
	 * No change reported, our cached value is up to date.
	 ','line_number':142,'multiline':True]['text':'*
		 * We are not tracking changes anymore, thus we have to assume
		 * that our cache is invalid.
		 ','line_number':175,'multiline':True]['text':' Without observers, we don't know when to clean up stuff.','line_number':191,'multiline':False]['text':' Thus, we don't cache anything to prevent memory leaks.','line_number':192,'multiline':False]['text':' Clear new dependencies','line_number':194,'multiline':False]['text':' We might not get a notification for a dependency that changed while it is updating,','line_number':199,'multiline':False]['text':' thus we also have to ask all our depedencies if they changed in this case.','line_number':200,'multiline':False]['text':'* might call {@link handleChange} indirectly, which could make us stale ','line_number':203,'multiline':True]['text':' The other dependencies will refresh on demand, so early break','line_number':207,'multiline':False]['text':' We called report changes of all dependencies.','line_number':213,'multiline':False]['text':' If we are still not stale, we can assume to be up to date again.','line_number':214,'multiline':False]['text':' In case recomputation changed one of our dependencies, we need to recompute again.','line_number':220,'multiline':False]['text':'* might call {@link handleChange} indirectly, which could invalidate us ','line_number':241,'multiline':True]['text':' We don't want our observed observables to think that they are (not even temporarily) not being observed.','line_number':244,'multiline':False]['text':' Thus, we only unsubscribe from observables that are definitely not read anymore.','line_number':245,'multiline':False]['text':' IObserver Implementation','line_number':273,'multiline':False]['text':' If we propagate begin update, that will already signal a possible change.','line_number':279,'multiline':False]['text':' This signals a possible change','line_number':288,'multiline':False]['text':' End update could change the observer list.','line_number':296,'multiline':False]['text':' In all other states, observers already know that we might have changed.','line_number':308,'multiline':False]['text':' IReader Implementation','line_number':336,'multiline':False]['text':' Subscribe before getting the value to enable caching','line_number':338,'multiline':False]['text':'* This might call {@link handleChange} indirectly, which could invalidate us ','line_number':340,'multiline':True]['text':' Which is why we only add the observable to the dependencies now.','line_number':342,'multiline':False]['text':' Calling end update after removing the observer makes sure endUpdate cannot be called twice here.','line_number':362,'multiline':False]