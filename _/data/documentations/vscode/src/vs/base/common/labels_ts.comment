['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
	 * The OS the path label is from to produce a label
	 * that matches OS expectations.
	 ','line_number':16,'multiline':True]['text':'*
	 * Whether to add a `~` when the path is in the
	 * user home directory.
	 *
	 * Note: this only applies to Linux, macOS but not
	 * Windows.
	 ','line_number':22,'multiline':True]['text':'*
	 * Whether to convert to a relative path if the path
	 * is within any of the opened workspace folders.
	 ','line_number':31,'multiline':True]['text':'*
	 * Whether to not add a prefix when in multi-root workspace.
	 ','line_number':40,'multiline':True]['text':' return early with a relative path if we can resolve one','line_number':56,'multiline':False]['text':' otherwise try to resolve a absolute path label and','line_number':64,'multiline':False]['text':' apply target OS standard path separators if target','line_number':65,'multiline':False]['text':' OS differs from actual OS we are running in','line_number':66,'multiline':False]['text':'g, '\\');','line_number':69,'multiline':False]['text':' macOS/Linux: tildify with provided user home directory','line_number':74,'multiline':False]['text':' This is a bit of a hack, but in order to figure out if the','line_number':78,'multiline':False]['text':' resource is in the user home, we need to make sure to convert it','line_number':79,'multiline':False]['text':' to a user home resource. We cannot assume that the resource is','line_number':80,'multiline':False]['text':' already a user home resource.','line_number':81,'multiline':False]['text':' normalize','line_number':92,'multiline':False]['text':' This is a bit of a hack, but in order to figure out the folder','line_number':107,'multiline':False]['text':' the resource belongs to, we need to make sure to convert it','line_number':108,'multiline':False]['text':' to a workspace resource. We cannot assume that the resource is','line_number':109,'multiline':False]['text':' already matching the workspace.','line_number':110,'multiline':False]['text':' no label if paths are identical','line_number':122,'multiline':False]['text':' normalize','line_number':127,'multiline':False]['text':' always show root basename if there are multiple folders','line_number':132,'multiline':False]['text':' unsupported on Windows','line_number':152,'multiline':False]['text':' make sure that the path is POSIX normalized on Windows','line_number':159,'multiline':False]['text':' make sure that the path is POSIX normalized on Windows','line_number':167,'multiline':False]['text':' Linux: case sensitive, macOS: case insensitive','line_number':170,'multiline':False]['text':'*
 * Shortens the paths but keeps them easy to distinguish.
 * Replaces not important parts with ellipsis.
 * Every shorten path matches only one original path and vice versa.
 *
 * Algorithm for shortening paths is as follows:
 * 1. For every path in list, find unique substring of that path.
 * 2. Unique substring along with ellipsis is shortened path of that path.
 * 3. To find unique substring of path, consider every segment of length from 1 to path.length of path from end of string
 *    and if present segment is not substring to any other paths then present segment is unique path,
 *    else check if it is not present as suffix of any other path and present segment is suffix of path itself,
 *    if it is true take present segment as unique path.
 * 4. Apply ellipsis to unique segment according to whether segment is present at start/in-between/end of path.
 *
 * Example 1
 * 1. consider 2 paths i.e. ['a\\b\\c\\d', 'a\\f\\b\\c\\d']
 * 2. find unique path of first path,
 * 	a. 'd' is present in path2 and is suffix of path2, hence not unique of present path.
 * 	b. 'c' is present in path2 and 'c' is not suffix of present path, similarly for 'b' and 'a' also.
 * 	c. 'd\\c' is suffix of path2.
 *  d. 'b\\c' is not suffix of present path.
 *  e. 'a\\b' is not present in path2, hence unique path is 'a\\b...'.
 * 3. for path2, 'f' is not present in path1 hence unique is '...\\f\\...'.
 *
 * Example 2
 * 1. consider 2 paths i.e. ['a\\b', 'a\\b\\c'].
 * 	a. Even if 'b' is present in path2, as 'b' is suffix of path1 and is not suffix of path2, unique path will be '...\\b'.
 * 2. for path2, 'c' is not present in path1 hence unique path is '..\\c'.
 ','line_number':182,'multiline':True]['text':' for every path','line_number':217,'multiline':False]['text':' trim for now and concatenate unc path (e.g. \\network) or root path (/etc, ~/etc) later','line_number':234,'multiline':False]['text':' pick the first shortest subpath found','line_number':248,'multiline':False]['text':' that is unique to any other path','line_number':255,'multiline':False]['text':' suffix subpath treated specially as we consider no match 'x' and 'x/...'','line_number':258,'multiline':False]['text':' Adding separator as prefix for subpath, such that 'endsWith(src, trgt)' considers subpath as directory name instead of plain string.','line_number':262,'multiline':False]['text':' prefix is not added when either subpath is root directory or path[otherPathIndex] does not have multiple directories.','line_number':263,'multiline':False]['text':' found unique subpath','line_number':271,'multiline':False]['text':' preserve disk drive or root prefix','line_number':275,'multiline':False]['text':' extend subpath to include disk drive prefix','line_number':278,'multiline':False]['text':' add ellipsis at the beginning if needed','line_number':291,'multiline':False]['text':' add ellipsis at the end if needed','line_number':298,'multiline':False]['text':' use original path if no unique subpaths found','line_number':309,'multiline':False]['text':'*
 * Helper to insert values for specific template variables into the string. E.g. "this $(is) a $(template)" can be
 * passed to this function together with an object that maps "is" and "template" to strings to have them replaced.
 * @param value string to which template is applied
 * @param values the values of the templates to use
 ','line_number':331,'multiline':True]['text':' Beginning of variable','line_number':343,'multiline':False]['text':' End of variable','line_number':353,'multiline':False]['text':' Variable','line_number':357,'multiline':False]['text':' Separator','line_number':364,'multiline':False]['text':' prevent duplicate separators','line_number':368,'multiline':False]['text':' Text or Variable Name','line_number':376,'multiline':False]['text':' Tail','line_number':382,'multiline':False]['text':' Only keep separator if we have values to the left and right','line_number':389,'multiline':False]['text':' accept any TEXT and VARIABLE','line_number':397,'multiline':False]['text':'*
 * Handles mnemonics for menu items. Depending on OS:
 * - Windows: Supported via & character (replace && with &)
 * -   Linux: Supported via & character (replace && with &)
 * -   macOS: Unsupported (replace && with empty string)
 ','line_number':402,'multiline':True]['text':'*
 * Handles mnemonics for buttons. Depending on OS:
 * - Windows: Supported via & character (replace && with & and & with && for escaping)
 * -   Linux: Supported via _ character (replace && with _)
 * -   macOS: Unsupported (replace && with empty string)
 ','line_number':416,'multiline':True]['text':'*
 * Splits a recent label in name and parent path, supporting both '/' and '\' and workspace suffixes
 ','line_number':438,'multiline':True]['text':' label with workspace suffix','line_number':443,'multiline':False]['text':' only the root segment','line_number':460,'multiline':False]