['text':'*
 * marked - a markdown parser
 * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 ','line_number':1,'multiline':True]['text':'*
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 ','line_number':7,'multiline':True]['text':' ESM-uncomment-begin','line_number':12,'multiline':False]['text':' let __marked_exports = {};','line_number':13,'multiline':False]['text':' (function() {','line_number':14,'multiline':False]['text':'   function define(deps, factory) {','line_number':15,'multiline':False]['text':'     factory(__marked_exports);','line_number':16,'multiline':False]['text':'   }','line_number':17,'multiline':False]['text':'   define.amd = true;','line_number':18,'multiline':False]['text':' ESM-uncomment-end','line_number':19,'multiline':False]['text':'*
   * Helpers
   ','line_number':113,'multiline':True]['text':' Clip maskedSrc to same section of string as src (move to lexer?)','line_number':1044,'multiline':False]['text':' skip single * in __abc*abc__','line_number':1050,'multiline':False]['text':' found another Left Delim','line_number':1055,'multiline':False]['text':' either Left or Right Delim','line_number':1059,'multiline':False]['text':' CommonMark Emphasis Rules 9-10','line_number':1062,'multiline':False]['text':' Haven't found enough closing delimiters','line_number':1067,'multiline':False]['text':' Remove extra characters. *a*** -> *a*','line_number':1068,'multiline':False]['text':' Create `em` if smallest delimiter has odd char count. *a***','line_number':1070,'multiline':False]['text':' Create 'strong' if smallest delimiter has even char count. **a***','line_number':1081,'multiline':False]['text':' do extended autolink path validation','line_number':1178,'multiline':False]['text':'*
   * Block-Level Grammar
   ','line_number':1232,'multiline':True]['text':' optional indentation','line_number':1244,'multiline':False]['text':' (1)','line_number':1245,'multiline':False]['text':' (2)','line_number':1246,'multiline':False]['text':' (3)','line_number':1247,'multiline':False]['text':' (4)','line_number':1248,'multiline':False]['text':' (5)','line_number':1249,'multiline':False]['text':' (6)','line_number':1250,'multiline':False]['text':' (7) open tag','line_number':1251,'multiline':False]['text':' (7) closing tag','line_number':1252,'multiline':False]['text':' regex template, placeholders will be replaced according to different paragraph','line_number':1257,'multiline':False]['text':' interruption rules of commonmark and the original markdown spec:','line_number':1258,'multiline':False]['text':' only lists starting from 1 can interrupt','line_number':1272,'multiline':False]['text':' pars can be interrupted by type (6) html blocks','line_number':1273,'multiline':False]['text':'*
   * Normal Block Grammar
   ','line_number':1276,'multiline':True]['text':'*
   * GFM Block Grammar
   ','line_number':1281,'multiline':True]['text':' Header','line_number':1286,'multiline':False]['text':' Align','line_number':1287,'multiline':False]['text':' Cells','line_number':1288,'multiline':False]['text':' only lists starting from 1 can interrupt','line_number':1291,'multiline':False]['text':' tables can be interrupted by type (6) html blocks','line_number':1292,'multiline':False]['text':' setex headings don't interrupt commonmark paragraphs','line_number':1294,'multiline':False]['text':' interrupt paragraphs with table','line_number':1295,'multiline':False]['text':' only lists starting from 1 can interrupt','line_number':1296,'multiline':False]['text':' pars can be interrupted by type (6) html blocks','line_number':1297,'multiline':False]['text':'*
   * Pedantic grammar (original John Gruber's loose markdown specification)
   ','line_number':1299,'multiline':True]['text':' closed tag','line_number':1304,'multiline':False]['text':' fences not supported','line_number':1309,'multiline':False]['text':'*
   * Inline-Level Grammar
   ','line_number':1312,'multiline':True]['text':' sequences em should skip over [title](link), `code`, <html>','line_number':1347,'multiline':False]['text':' opening doubles','line_number':1425,'multiline':False]['text':' ellipses','line_number':1427,'multiline':False]['text':'*
   * mangle email addresses
   * @param {string} text
   ','line_number':1430,'multiline':True]['text':'*
   * Block Lexer
   ','line_number':1454,'multiline':True]['text':'#__PURE__','line_number':1459,'multiline':True]['text':'*
     * Expose Rules
     ','line_number':1494,'multiline':True]['text':'*
     * Static Lex Method
     ','line_number':1499,'multiline':True]['text':'*
     * Static Lex Inline Method
     ','line_number':1506,'multiline':True]['text':'*
     * Preprocessing
     ','line_number':1515,'multiline':True]['text':'*
     * Lexing
     ','line_number':1533,'multiline':True]['text':' newline','line_number':1568,'multiline':False]['text':' if there's a single \n as a spacer, it's terminating the last line,','line_number':1575,'multiline':False]['text':' so move it there so that we don't get unecessary paragraph tags','line_number':1576,'multiline':False]['text':' code','line_number':1583,'multiline':False]['text':' An indented code block cannot interrupt a paragraph.','line_number':1588,'multiline':False]['text':' fences','line_number':1599,'multiline':False]['text':' heading','line_number':1606,'multiline':False]['text':' hr','line_number':1613,'multiline':False]['text':' blockquote','line_number':1620,'multiline':False]['text':' list','line_number':1627,'multiline':False]['text':' html','line_number':1634,'multiline':False]['text':' def','line_number':1641,'multiline':False]['text':' table (gfm)','line_number':1660,'multiline':False]['text':' lheading','line_number':1667,'multiline':False]['text':' top-level paragraph','line_number':1674,'multiline':False]['text':' prevent paragraph consuming extensions by clipping 'src' to extension start','line_number':1675,'multiline':False]['text':' text','line_number':1717,'multiline':False]['text':'*
     * Lexing/Compiling
     ','line_number':1763,'multiline':True]['text':' String with links masked to avoid interference with em and strong','line_number':1775,'multiline':False]['text':' Mask out reflinks','line_number':1779,'multiline':False]['text':' Mask out other blocks','line_number':1791,'multiline':False]['text':' Mask out escaped em & strong delimiters','line_number':1796,'multiline':False]['text':' extensions','line_number':1808,'multiline':False]['text':' escape','line_number':1822,'multiline':False]['text':' tag','line_number':1829,'multiline':False]['text':' link','line_number':1844,'multiline':False]['text':' reflink, nolink','line_number':1851,'multiline':False]['text':' em & strong','line_number':1866,'multiline':False]['text':' code','line_number':1873,'multiline':False]['text':' br','line_number':1880,'multiline':False]['text':' del (gfm)','line_number':1887,'multiline':False]['text':' autolink','line_number':1894,'multiline':False]['text':' url (gfm)','line_number':1901,'multiline':False]['text':' text','line_number':1908,'multiline':False]['text':' prevent inlineText consuming extensions by clipping 'src' to extension start','line_number':1909,'multiline':False]['text':' Track prevChar before string of ____ started','line_number':1940,'multiline':False]['text':'*
   * Renderer
   ','line_number':1985,'multiline':True]['text':'#__PURE__','line_number':1989,'multiline':True]['text':'*
     * @param {string} quote
     ','line_number':2016,'multiline':True]['text':'*
     * @param {string} text
     * @param {string} level
     * @param {string} raw
     * @param {any} slugger
     ','line_number':2028,'multiline':True]['text':' ignore IDs','line_number':2040,'multiline':False]['text':'*
     * @param {string} text
     ','line_number':2055,'multiline':True]['text':'*
     * @param {string} text
     ','line_number':2067,'multiline':True]['text':'*
     * @param {string} header
     * @param {string} body
     ','line_number':2075,'multiline':True]['text':'*
     * @param {string} content
     ','line_number':2085,'multiline':True]['text':'*
     * span level renderer
     * @param {string} text
     ','line_number':2099,'multiline':True]['text':'*
     * @param {string} text
     ','line_number':2108,'multiline':True]['text':'*
     * @param {string} text
     ','line_number':2116,'multiline':True]['text':'*
     * @param {string} text
     ','line_number':2128,'multiline':True]['text':'*
     * @param {string} href
     * @param {string} title
     * @param {string} text
     ','line_number':2136,'multiline':True]['text':'*
     * @param {string} href
     * @param {string} title
     * @param {string} text
     ','line_number':2159,'multiline':True]['text':'*
   * TextRenderer
   * returns only the textual part of the token
   ','line_number':2190,'multiline':True]['text':'#__PURE__','line_number':2194,'multiline':True]['text':' no need for block level renderers','line_number':2199,'multiline':False]['text':'*
   * Slugger generates header id
   ','line_number':2239,'multiline':True]['text':'#__PURE__','line_number':2242,'multiline':True]['text':'*
     * @param {string} value
     ','line_number':2246,'multiline':True]['text':' remove html tags','line_number':2254,'multiline':False]['text':' remove unwanted chars','line_number':2255,'multiline':False]['text':'github.com/markedjs/marked.';','line_number':2735,'multiline':False]['text':'*
   * Options
   ','line_number':2762,'multiline':True]['text':'*
   * Use Extension
   ','line_number':2774,'multiline':True]['text':' ==-- Parse "addon" extensions --== //','line_number':2790,'multiline':False]['text':' Renderer extensions','line_number':2799,'multiline':False]['text':' Replace extension with func to run new extension but fall back if false','line_number':2803,'multiline':False]['text':' Tokenizer Extensions','line_number':2823,'multiline':False]['text':' Function to check for start of token','line_number':2835,'multiline':False]['text':' Child tokens to be visited by walkTokens','line_number':2853,'multiline':False]['text':' ==-- Parse "overwrite" extensions --== //','line_number':2857,'multiline':False]['text':' Replace renderer with func to run extension, but fall back if false','line_number':2865,'multiline':False]['text':' Replace tokenizer with func to run extension, but fall back if false','line_number':2895,'multiline':False]['text':' ==-- Parse WalkTokens extensions --== //','line_number':2918,'multiline':False]['text':'*
   * Run callback for every token
   ','line_number':2943,'multiline':True]['text':' Walk any extensions','line_number':2984,'multiline':False]['text':'*
   * Parse Inline
   * @param {string} src
   ','line_number':3001,'multiline':True]['text':' throw error in case of non string input','line_number':3008,'multiline':False]['text':'*
   * Expose
   ','line_number':3038,'multiline':True]['text':' ESM-uncomment-begin','line_number':3082,'multiline':False]['text':' })();','line_number':3083,'multiline':False]['text':' export var Lexer = (__marked_exports.Lexer || exports.Lexer);','line_number':3084,'multiline':False]['text':' export var Parser = (__marked_exports.Parser || exports.Parser);','line_number':3085,'multiline':False]['text':' export var Renderer = (__marked_exports.Renderer || exports.Renderer);','line_number':3086,'multiline':False]['text':' export var Slugger = (__marked_exports.Slugger || exports.Slugger);','line_number':3087,'multiline':False]['text':' export var TextRenderer = (__marked_exports.TextRenderer || exports.TextRenderer);','line_number':3088,'multiline':False]['text':' export var Tokenizer = (__marked_exports.Tokenizer || exports.Tokenizer);','line_number':3089,'multiline':False]['text':' export var getDefaults = (__marked_exports.getDefaults || exports.getDefaults);','line_number':3090,'multiline':False]['text':' export var lexer = (__marked_exports.lexer || exports.lexer);','line_number':3091,'multiline':False]['text':' export var marked = (__marked_exports.marked || exports.marked);','line_number':3092,'multiline':False]['text':' export var options = (__marked_exports.options || exports.options);','line_number':3093,'multiline':False]['text':' export var parse = (__marked_exports.parse || exports.parse);','line_number':3094,'multiline':False]['text':' export var parseInline = (__marked_exports.parseInline || exports.parseInline);','line_number':3095,'multiline':False]['text':' export var parser = (__marked_exports.parser || exports.parser);','line_number':3096,'multiline':False]['text':' export var setOptions = (__marked_exports.setOptions || exports.setOptions);','line_number':3097,'multiline':False]['text':' export var use = (__marked_exports.use || exports.use);','line_number':3098,'multiline':False]['text':' export var walkTokens = (__marked_exports.walkTokens || exports.walkTokens);','line_number':3099,'multiline':False]['text':' ESM-uncomment-end','line_number':3100,'multiline':False]