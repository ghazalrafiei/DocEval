['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Returns a promise that resolves with `undefined` as soon as the passed token is cancelled.
 * @see {@link raceCancellationError}
 ','line_number':61,'multiline':True]['text':'*
 * Returns a promise that resolves with `defaultValue` as soon as the passed token is cancelled.
 * @see {@link raceCancellationError}
 ','line_number':67,'multiline':True]['text':'*
 * Returns a promise that rejects with an {@CancellationError} as soon as the passed token is cancelled.
 * @see {@link raceCancellation}
 ','line_number':83,'multiline':True]['text':'*
 * Returns as soon as one of the promises resolves or rejects and cancels remaining promises
 ','line_number':97,'multiline':True]['text':'*
 * A helper to prevent accumulation of sequential async tasks.
 *
 * Imagine a mail man with the sole task of delivering letters. As soon as
 * a letter submitted for delivery, he drives to the destination, delivers it
 * and returns to his base. Imagine that during the trip, N more letters were submitted.
 * When the mail man returns, he picks those N letters and delivers them all in a
 * single trip. Even though N+1 submissions occurred, only 2 deliveries were made.
 *
 * The throttler implements this via the queue() method, by providing it a task
 * factory. Following the example:
 *
 * 		const throttler = new Throttler();
 * 		const letters = [];
 *
 * 		function deliver() {
 * 			const lettersToDeliver = letters;
 * 			letters = [];
 * 			return makeTheTrip(lettersToDeliver);
 * 		}
 *
 * 		function onLetterReceived(l) {
 * 			letters.push(l);
 * 			throttler.queue(deliver);
 * 		}
 ','line_number':144,'multiline':True]['text':'*
 * A helper to delay (debounce) execution of a task that is being requested often.
 *
 * Following the throttler, now imagine the mail man wants to optimize the number of
 * trips proactively. The trip itself can be long, so he decides not to make the trip
 * as soon as a letter is submitted. Instead he waits a while, in case more
 * letters are submitted. After said waiting period, if no letters were submitted, he
 * decides to make the trip. Imagine that N more letters were submitted after the first
 * one, all within a short period of time between each other. Even though N+1
 * submissions occurred, only 1 delivery was made.
 *
 * The delayer offers this behavior via the trigger() method, into which both the task
 * to be executed and the waiting period (delay) must be passed in as arguments. Following
 * the example:
 *
 * 		const delayer = new Delayer(WAITING_PERIOD);
 * 		const letters = [];
 *
 * 		function letterReceived(l) {
 * 			letters.push(l);
 * 			delayer.trigger(() => { return makeTheTrip(); });
 * 		}
 ','line_number':296,'multiline':True]['text':'*
 * A helper to delay execution of a task that is being requested often, while
 * preventing accumulation of consecutive executions, while the task runs.
 *
 * The mail man is clever and waits for a certain amount of time, before going
 * out to deliver letters. While the mail man is going out, more letters arrive
 * and can only be delivered once he is back. Once he is back the mail man will
 * do one more trip to deliver the letters that have accumulated while he was out.
 ','line_number':388,'multiline':True]['text':'*
 * A barrier that is initially closed and then becomes opened permanently.
 ','line_number':425,'multiline':True]['text':'*
 * A barrier that is initially closed and then becomes opened permanently after a certain period of
 * time or when open is called explicitly
 ','line_number':454,'multiline':True]['text':'*
 * Creates a timeout that can be disposed using its returned value.
 * @param handler The timeout handler.
 * @param timeout An optional timeout in milliseconds.
 * @param store An optional {@link DisposableStore} that will have the timeout disposable managed automatically.
 *
 * @example
 * const store = new DisposableStore;
 * // Call the timeout after 1000ms at which point it will be automatically
 * // evicted from the store.
 * const timeoutDisposable = disposableTimeout(() => {}, 1000, store);
 *
 * if (foo) {
 *   // Cancel the timeout and evict it from store.
 *   timeoutDisposable.dispose();
 * }
 ','line_number':493,'multiline':True]['text':'*
 * Runs the provided list of promise factories in sequential order. The returned
 * promise will complete to an array of results from each promise.
 ','line_number':525,'multiline':True]['text':'*
 * Returns the result of the first promise that matches the "shouldStop",
 * running all promises in parallel. Supports cancelable promises.
 ','line_number':579,'multiline':True]['text':'*
 * A helper to queue N promises and run them all with a max degree of parallelism. The helper
 * ensures that at any time no more than M promises are running at the same time.
 ','line_number':631,'multiline':True]['text':'*
	 * An event that fires when every promise in the queue
	 * has started to execute. In other words: no work is
	 * pending to be scheduled.
	 *
	 * This is NOT an event that signals when all promises
	 * have finished though.
	 ','line_number':650,'multiline':True]['text':'*
 * A queue is handles one promise at a time and guarantees that at any time only one promise is executing.
 ','line_number':702,'multiline':True]['text':'*
 * Same as `Queue`, ensures that only 1 task is executed at the same time. The difference to `Queue` is that
 * there is only 1 task about to be scheduled next. As such, calling `queue` while a task is executing will
 * replace the currently queued task until it executes.
 *
 * As such, the returned promise may not be from the factory that is passed in but from the next factory that
 * is running after having called `queue`.
 ','line_number':712,'multiline':True]['text':'*
 * A helper to organize queues per resource. The ResourceQueue makes sure to manage queues per resource
 * by disposing them once the queue is empty.
 ','line_number':737,'multiline':True]['text':' not done yet','line_number':804,'multiline':False]['text':' Even though we might still have pending','line_number':825,'multiline':False]['text':' tasks queued, after the queues have been','line_number':826,'multiline':False]['text':' disposed, we can no longer track them, so','line_number':827,'multiline':False]['text':' we release drainers to prevent hanging','line_number':828,'multiline':False]['text':' promises when the resource queue is being','line_number':829,'multiline':False]['text':' disposed.','line_number':830,'multiline':False]['text':' timer is already set','line_number':871,'multiline':False]['text':'*
	 * Dispose RunOnceScheduler
	 ','line_number':922,'multiline':True]['text':'*
	 * Cancel current scheduled runner (if any).
	 ','line_number':930,'multiline':True]['text':'*
	 * Cancel previous runner (if any) & schedule a new runner.
	 ','line_number':940,'multiline':True]['text':'*
	 * Returns true if scheduled.
	 ','line_number':956,'multiline':True]['text':'*
 * Same as `RunOnceScheduler`, but doesn't count the time spent in sleep mode.
 * > **NOTE**: Only offers 1s resolution.
 *
 * When calling `setTimeout` with 3hrs, and putting the computer immediately to sleep
 * for 8hrs, `setTimeout` will fire **as soon as the computer wakes from sleep**. But
 * this scheduler will execute 3hrs **after waking the computer from sleep**.
 ','line_number':982,'multiline':True]['text':'*
	 * Cancel previous runner (if any) & schedule a new runner.
	 ','line_number':1022,'multiline':True]['text':'*
	 * Returns true if scheduled.
	 ','line_number':1034,'multiline':True]['text':' still need to wait','line_number':1044,'multiline':False]['text':' time elapsed','line_number':1048,'multiline':False]['text':'*
	 * maximum of units the worker will pass onto handler at once
	 ','line_number':1087,'multiline':True]['text':'*
	 * maximum of units the worker will keep in memory for processing
	 ','line_number':1092,'multiline':True]['text':'*
	 * delay before processing the next round of chunks when chunk size exceeds limits
	 ','line_number':1097,'multiline':True]['text':'*
 * The `ThrottledWorker` will accept units of work `T`
 * to handle. The contract is:
 * * there is a maximum of units the worker can handle at once (via `maxWorkChunkSize`)
 * * there is a maximum of units the worker will keep in memory for processing (via `maxBufferedWork`)
 * * after having handled `maxWorkChunkSize` units, the worker needs to rest (via `throttleDelay`)
 ','line_number':1103,'multiline':True]['text':'*
	 * The number of work units that are pending to be processed.
	 ','line_number':1124,'multiline':True]['text':'*
	 * Add units to be worked on. Use `pending` to figure out
	 * how many units are not yet processed after this method
	 * was called.
	 *
	 * @returns whether the work was accepted or not. If the
	 * worker is disposed, it will not accept any more work.
	 * If the number of pending units would become larger
	 * than `maxPendingWork`, more work will also not be accepted.
	 ','line_number':1129,'multiline':True]['text':' work not accepted: disposed','line_number':1141,'multiline':False]['text':' Check for reaching maximum of pending work','line_number':1144,'multiline':False]['text':' Throttled: simple check if pending + units exceeds max pending','line_number':1147,'multiline':False]['text':' work not accepted: too much pending work','line_number':1150,'multiline':False]['text':' Unthrottled: same as throttled, but account for max chunk getting','line_number':1154,'multiline':False]['text':' worked on directly without being pending','line_number':1155,'multiline':False]['text':' work not accepted: too much pending work','line_number':1158,'multiline':False]['text':' Add to pending units first','line_number':1163,'multiline':False]['text':' If not throttled, start working directly','line_number':1168,'multiline':False]['text':' Otherwise, when the throttle delay has','line_number':1169,'multiline':False]['text':' past, pending work will be worked again.','line_number':1170,'multiline':False]['text':' work accepted','line_number':1175,'multiline':False]['text':' Extract chunk to handle and handle it','line_number':1180,'multiline':False]['text':' If we have remaining work, schedule it after a delay','line_number':1183,'multiline':False]['text':'#region -- run on idle tricks ------------','line_number':1201,'multiline':False]['text':'*
 * Execute the callback the next time the browser is idle, returning an
 * {@link IDisposable} that will cancel the callback when disposed. This wraps
 * [requestIdleCallback] so it will fallback to [setTimeout] if the environment
 * doesn't support it.
 *
 * @param callback The callback to run when idle, this includes an
 * [IdleDeadline] that provides the time alloted for the idle callback by the
 * browser. Not respecting this deadline will result in a degraded user
 * experience.
 * @param timeout A timeout at which point to queue no longer wait for an idle
 * callback but queue it on the regular event loop (like setTimeout). Typically
 * this should not be used.
 *
 * [IdleDeadline]: https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline
 * [requestIdleCallback]: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback
 * [setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout
 *
 * **Note** that there is `dom.ts#runWhenWindowIdle` which is better suited when running inside a browser
 * context
 ','line_number':1211,'multiline':True]['text':' one frame at 64fps','line_number':1243,'multiline':False]['text':'*
 * An `IdleValue` that always uses the current window (which might be throttled or inactive)
 *
 * **Note** that there is `dom.ts#WindowIdleValue` which is better suited when running inside a browser
 * context
 ','line_number':1322,'multiline':True]['text':'#endregion','line_number':1335,'multiline':False]['text':'#region Task Sequentializer','line_number':1353,'multiline':False]['text':'*
 * @deprecated use `LimitedQueue` instead for an easier to use API
 ','line_number':1376,'multiline':True]['text':' only set running to done if the promise finished that is associated with that taskId','line_number':1411,'multiline':False]['text':' schedule the queued task now that we are free if we have any','line_number':1414,'multiline':False]['text':' Run queued task and complete on the associated promise','line_number':1424,'multiline':False]['text':'*
	 * Note: the promise to schedule as next run MUST itself call `run`.
	 *       Otherwise, this sequentializer will report `false` for `isRunning`
	 *       even when this task is running. Missing this detail means that
	 *       suddenly multiple tasks will run in parallel.
	 ','line_number':1429,'multiline':True]['text':' this is our first queued task, so we create associated promise with it','line_number':1437,'multiline':False]['text':' so that we can return a promise that completes when the task has','line_number':1438,'multiline':False]['text':' completed.','line_number':1439,'multiline':False]['text':' we have a previous queued task, just overwrite it','line_number':1456,'multiline':False]['text':'#endregion','line_number':1473,'multiline':False]['text':'#region','line_number':1475,'multiline':False]['text':'*
 * The `IntervalCounter` allows to count the number
 * of calls to `increment()` over a duration of
 * `interval`. This utility can be used to conditionally
 * throttle a frequent task when a certain threshold
 * is reached.
 ','line_number':1477,'multiline':True]['text':' We are outside of the range of `interval` and as such','line_number':1495,'multiline':False]['text':' start counting from 0 and remember the time','line_number':1496,'multiline':False]['text':'#endregion','line_number':1508,'multiline':False]['text':'#region','line_number':1510,'multiline':False]['text':'*
 * Creates a promise whose resolution or rejection can be controlled imperatively.
 ','line_number':1519,'multiline':True]['text':'#endregion','line_number':1574,'multiline':False]['text':'#region Promises','line_number':1576,'multiline':False]['text':'*
	 * A drop-in replacement for `Promise.all` with the only difference
	 * that the method awaits every promise to either fulfill or reject.
	 *
	 * Similar to `Promise.all`, only the first error will be returned
	 * if any.
	 ','line_number':1580,'multiline':True]['text':' do not rethrow so that other promises can settle','line_number':1595,'multiline':False]['text':' cast is needed and protected by the `throw` above','line_number':1602,'multiline':False]['text':'*
	 * A helper to create a new `Promise<T>` with a body that is a promise
	 * itself. By default, an error that raises from the async body will
	 * end up as a unhandled rejection, so this utility properly awaits the
	 * body and rejects the promise as a normal promise does without async
	 * body.
	 *
	 * This method should only be used in rare cases where otherwise `async`
	 * cannot be used (e.g. when callbacks are involved that require this).
	 ','line_number':1605,'multiline':True]['text':' eslint-disable-next-line no-async-promise-executor','line_number':1616,'multiline':False]['text':'*
	 * Returns the resolved value.
	 * Crashes if the promise is not resolved yet.
	 ','line_number':1672,'multiline':True]['text':'*
	 * Returns the promise (and triggers a computation of the promise if not yet done so).
	 ','line_number':1680,'multiline':True]['text':'#endregion','line_number':1688,'multiline':False]['text':'#region','line_number':1690,'multiline':False]['text':'*
 * An object that allows to emit async values asynchronously or bring the iterable to an error state using `reject()`.
 * This emitter is valid only for the duration of the executor (until the promise returned by the executor settles).
 ','line_number':1698,'multiline':True]['text':'*
	 * The value will be appended at the end.
	 *
	 * **NOTE** If `reject()` has already been called, this method has no effect.
	 ','line_number':1703,'multiline':True]['text':'*
	 * The values will be appended at the end.
	 *
	 * **NOTE** If `reject()` has already been called, this method has no effect.
	 ','line_number':1709,'multiline':True]['text':'*
	 * Writing an error will permanently invalidate this iterable.
	 * The current users will receive an error thrown, as will all future users.
	 *
	 * **NOTE** If `reject()` have already been called, this method has no effect.
	 ','line_number':1715,'multiline':True]['text':'*
 * An executor for the `AsyncIterableObject` that has access to an emitter.
 ','line_number':1724,'multiline':True]['text':'*
	 * @param emitter An object that allows to emit async values valid only for the duration of the executor.
	 ','line_number':1728,'multiline':True]['text':'*
 * A rich implementation for an `AsyncIterable<T>`.
 ','line_number':1734,'multiline':True]['text':'*
	 * The value will be appended at the end.
	 *
	 * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
	 ','line_number':1865,'multiline':True]['text':' it is important to add new values at the end,','line_number':1874,'multiline':False]['text':' as we may have iterators already running on the array','line_number':1875,'multiline':False]['text':'*
	 * The values will be appended at the end.
	 *
	 * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
	 ','line_number':1880,'multiline':True]['text':' it is important to add new values at the end,','line_number':1889,'multiline':False]['text':' as we may have iterators already running on the array','line_number':1890,'multiline':False]['text':'*
	 * Calling `resolve()` will mark the result array as complete.
	 *
	 * **NOTE** `resolve()` must be called, otherwise all consumers of this iterable will hang indefinitely, similar to a non-resolved promise.
	 * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
	 ','line_number':1895,'multiline':True]['text':'*
	 * Writing an error will permanently invalidate this iterable.
	 * The current users will receive an error thrown, as will all future users.
	 *
	 * **NOTE** If `resolve()` or `reject()` have already been called, this method has no effect.
	 ','line_number':1909,'multiline':True]['text':' canceled in the meantime','line_number':1951,'multiline':False]['text':'#endregion','line_number':2023,'multiline':False]