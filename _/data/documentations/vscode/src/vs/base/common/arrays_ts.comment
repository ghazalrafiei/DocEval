['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Returns the last element of an array.
 * @param array The array.
 * @param n Which element from the end (default is zero).
 ','line_number':11,'multiline':True]['text':'*
 * Remove the element at `index` by replacing it with the last element. This is faster than `splice`
 * but changes the order of the array
 ','line_number':50,'multiline':True]['text':'*
 * Performs a binary search algorithm over a sorted array.
 *
 * @param array The array being searched.
 * @param key The value we search for.
 * @param comparator A function that takes two array elements and returns zero
 *   if they are equal, a negative number if the first element precedes the
 *   second one in the sorting order, or a positive number if the second element
 *   precedes the first one.
 * @return See {@link binarySearch2}
 ','line_number':62,'multiline':True]['text':'*
 * Performs a binary search algorithm over a sorted collection. Useful for cases
 * when we need to perform a binary search over something that isn't actually an
 * array, and converting data to an array would defeat the use of binary search
 * in the first place.
 *
 * @param length The collection length.
 * @param compareToKey A function that takes an index of an element in the
 *   collection and returns zero if the value at this index is equal to the
 *   search key, a negative number if the value precedes the search key in the
 *   sorting order, or a positive number if the search key precedes the value.
 * @return A non-negative index of an element, if found. If not found, the
 *   result is -(n+1) (or ~n, using bitwise notation), where n is the index
 *   where the key should be inserted to maintain the sorting order.
 ','line_number':77,'multiline':True]['text':'*
 * Splits the given items into a list of (non-empty) groups.
 * `shouldBeGrouped` is used to decide if two consecutive items should be in the same group.
 * The order of the items is preserved.
 ','line_number':160,'multiline':True]['text':'*
 * Diffs two *sorted* arrays and computes the splices which apply the diff.
 ','line_number':201,'multiline':True]['text':' equal','line_number':239,'multiline':False]['text':' beforeElement is smaller -> before element removed','line_number':243,'multiline':False]['text':' beforeElement is greater -> after element added','line_number':247,'multiline':False]['text':'*
 * Takes two *sorted* arrays and computes their delta (removed, added elements).
 * Finishes in `Math.min(before.length, after.length)` steps.
 ','line_number':256,'multiline':True]['text':'*
 * Returns the top N elements from the array.
 *
 * Faster than sorting the entire array when the array is a lot larger than N.
 *
 * @param array The unsorted array.
 * @param compare A sort function for the elements.
 * @param n The number of elements to return.
 * @return The first n elements from array when sorted with compare.
 ','line_number':273,'multiline':True]['text':'*
 * Asynchronous variant of `top()` allowing for splitting up work in batches between which the event loop can run.
 *
 * Returns the top N elements from the array.
 *
 * Faster than sorting the entire array when the array is a lot larger than N.
 *
 * @param array The unsorted array.
 * @param compare A sort function for the elements.
 * @param n The number of elements to return.
 * @param batch The number of elements to examine before yielding to the event loop.
 * @return The first n elements from array when sorted with compare.
 ','line_number':292,'multiline':True]['text':' any other delay function would starve I/O','line_number':316,'multiline':False]['text':'*
 * @returns New array with all falsy values removed. The original array IS NOT modified.
 ','line_number':340,'multiline':True]['text':'*
 * Remove all falsy values from `array`. The original array IS modified.
 ','line_number':347,'multiline':True]['text':'*
 * @deprecated Use `Array.copyWithin` instead
 ','line_number':361,'multiline':True]['text':'*
 * @returns false if the provided object is an array and not empty.
 ','line_number':368,'multiline':True]['text':'*
 * @returns True if the provided object is an array and has at least one element.
 ','line_number':375,'multiline':True]['text':'*
 * Removes duplicates from the given array. The optional keyFn allows to specify
 * how elements are checked for equality by returning an alternate value for each.
 ','line_number':384,'multiline':True]['text':'*
 * @deprecated Use `[].flat()`
 ','line_number':438,'multiline':True]['text':'*
 * Inserts an element into an array. Returns a function which, when
 * called, will remove that element from the array.
 *
 * @deprecated In almost all cases, use a `Set<T>` instead.
 ','line_number':481,'multiline':True]['text':'*
 * Removes an element from an array if it can be found.
 *
 * @deprecated In almost all cases, use a `Set<T>` instead.
 ','line_number':493,'multiline':True]['text':'*
 * Insert `insertArr` inside `target` at `insertIndex`.
 * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array
 ','line_number':509,'multiline':True]['text':'*
 * Uses Fisher-Yates shuffle to shuffle the given array
 ','line_number':519,'multiline':True]['text':' Seeded random number generator in JS. Modified from:','line_number':527,'multiline':False]['text':' https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript','line_number':528,'multiline':False]['text':' throw away most significant digits and reduce any potential bias','line_number':530,'multiline':False]['text':'*
 * Pushes an element to the start of the array, if found.
 ','line_number':545,'multiline':True]['text':'*
 * Pushes an element to the end of the array, if found.
 ','line_number':557,'multiline':True]['text':'*
 * Insert the new items in the array.
 * @param array The original array.
 * @param start The zero-based location in the array from which to start inserting elements.
 * @param newItems The items to be inserted
 ','line_number':591,'multiline':True]['text':' Move the items after the start index, start from the end so that we don't overwrite any value.','line_number':602,'multiline':False]['text':'*
 * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it
 * can only support limited number of items due to the maximum call stack size limit.
 * @param array The original array.
 * @param start The zero-based location in the array from which to start removing elements.
 * @param deleteCount The number of elements to remove.
 * @returns An array containing the elements that were deleted.
 ','line_number':612,'multiline':True]['text':' see https://bugs.webkit.org/show_bug.cgi?id=261140','line_number':624,'multiline':False]['text':'*
 * Determine the actual start index (same logic as the native splice() or slice())
 * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.
 * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.
 * @param array The target array.
 * @param start The operation index.
 ','line_number':631,'multiline':True]['text':'*
 * When comparing two values,
 * a negative number indicates that the first value is less than the second,
 * a positive number indicates that the first value is greater than the second,
 * and zero indicates that neither is the case.
','line_number':642,'multiline':True]['text':'*
 * A comparator `c` defines a total order `<=` on `T` as following:
 * `c(a, b) <= 0` iff `a` <= `b`.
 * We also have `c(a, b) == 0` iff `c(b, a) == 0`.
','line_number':672,'multiline':True]['text':'*
 * The natural order on numbers.
','line_number':695,'multiline':True]['text':'*
	 * Constructs a queue that is backed by the given array. Runtime is O(1).
	','line_number':710,'multiline':True]['text':'*
	 * Consumes elements from the beginning of the queue as long as the predicate returns true.
	 * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).
	','line_number':719,'multiline':True]['text':' P(k) := k <= this.lastIdx && predicate(this.items[k])','line_number':724,'multiline':False]['text':' Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)','line_number':725,'multiline':False]['text':'*
	 * Consumes elements from the end of the queue as long as the predicate returns true.
	 * If no elements were consumed, `null` is returned.
	 * The result has the same order as the underlying array!
	','line_number':736,'multiline':True]['text':' P(k) := this.firstIdx >= k && predicate(this.items[k])','line_number':742,'multiline':False]['text':' Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]','line_number':743,'multiline':False]['text':'*
 * This class is faster than an iterator and array for lazy computed data.
','line_number':787,'multiline':True]['text':'*
		 * Calls the callback for every item.
		 * Stops when the callback returns false.
		','line_number':794,'multiline':True]