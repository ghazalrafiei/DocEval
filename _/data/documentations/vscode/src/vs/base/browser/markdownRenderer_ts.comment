['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829','line_number':69,'multiline':False]['text':' raw link case','line_number':70,'multiline':False]['text':' HTML Encode href','line_number':77,'multiline':False]['text':'*
 * Low-level way create a html element from a markdown string.
 *
 * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts)
 * which comes with support for pretty code block rendering and which uses the default way of handling links.
 ','line_number':88,'multiline':True]['text':' ignore','line_number':105,'multiline':False]['text':' this URI will end up as "src"-attribute of a dom node','line_number':130,'multiline':False]['text':' and because of that special rewriting needs to be done','line_number':131,'multiline':False]['text':' so that the URI uses a protocol that's understood by','line_number':132,'multiline':False]['text':' browsers (like http or https)','line_number':133,'multiline':False]['text':' no transformation performed','line_number':140,'multiline':False]['text':' Will collect [id, renderedElement] tuples','line_number':153,'multiline':False]['text':' TODO: Can we deprecated this in favor of 'supportHtml'?','line_number':215,'multiline':False]['text':' Use our own sanitizer so that we can let through only spans.','line_number':217,'multiline':False]['text':' Otherwise, we'd be letting all html be rendered.','line_number':218,'multiline':False]['text':' If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.','line_number':219,'multiline':False]['text':' We always pass the output through dompurify after this so that we don't rely on','line_number':220,'multiline':False]['text':' marked for sanitization.','line_number':221,'multiline':False]['text':' values that are too long will freeze the UI','line_number':232,'multiline':False]['text':' escape theme icons','line_number':237,'multiline':False]['text':' The defaults are applied by parse but not lexer()/parser(), and they need to be present','line_number':244,'multiline':False]['text':' Rewrite theme icons','line_number':256,'multiline':False]['text':' Get the raw 'src' attribute value as text, not the resolved 'src'','line_number':267,'multiline':False]['text':' absolute or relative local path, or file: uri','line_number':271,'multiline':False]['text':' Get the raw 'href' attribute value as text, not the resolved 'href'','line_number':282,'multiline':False]['text':' Clear out href. We use the `data-href` for handling clicks instead','line_number':283,'multiline':False]['text':' drop the link','line_number':290,'multiline':False]['text':' signal size changes for image tags','line_number':329,'multiline':False]['text':' allowedTags should included everything that markdown renders to.','line_number':445,'multiline':False]['text':' Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.','line_number':446,'multiline':False]['text':' HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/','line_number':447,'multiline':False]['text':' HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-','line_number':448,'multiline':False]['text':'*
 * Strips all markdown from `string`, if it's an IMarkdownString. For example
 * `# Header` would be output as `Header`. If it's not, the string is returned.
 ','line_number':457,'multiline':True]['text':'*
 * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.
 ','line_number':465,'multiline':True]['text':' values that are too long will freeze the UI','line_number':469,'multiline':False]['text':' function completeListItemPattern(token: marked.Tokens.List): marked.Tokens.List | undefined {','line_number':589,'multiline':False]['text':' 	// Patch up this one list item','line_number':590,'multiline':False]['text':' 	const lastItem = token.items[token.items.length - 1];','line_number':591,'multiline':False]['text':' 	const newList = completeSingleLinePattern(lastItem);','line_number':593,'multiline':False]['text':' 	if (!newList || newList.type !== 'list') {','line_number':594,'multiline':False]['text':' 		// Nothing to fix, or not a pattern we were expecting','line_number':595,'multiline':False]['text':' 		return;','line_number':596,'multiline':False]['text':' 	}','line_number':597,'multiline':False]['text':' 	// Re-parse the whole list with the last item replaced','line_number':599,'multiline':False]['text':' 	const completeList = marked.lexer(mergeRawTokenText(token.items.slice(0, token.items.length - 1)) + newList.items[0].raw);','line_number':600,'multiline':False]['text':' 	if (completeList.length === 1 && completeList[0].type === 'list') {','line_number':601,'multiline':False]['text':' 		return completeList[0];','line_number':602,'multiline':False]['text':' 	}','line_number':603,'multiline':False]['text':' 	// Not a pattern we were expecting','line_number':605,'multiline':False]['text':' 	return undefined;','line_number':606,'multiline':False]['text':' }','line_number':607,'multiline':False]['text':' If the code block was complete, it would be in a type='code'','line_number':615,'multiline':False]['text':' if (i === tokens.length - 1 && token.type === 'list') {','line_number':625,'multiline':False]['text':' 	const newListToken = completeListItemPattern(token);','line_number':626,'multiline':False]['text':' 	if (newListToken) {','line_number':627,'multiline':False]['text':' 		newTokens = [newListToken];','line_number':628,'multiline':False]['text':' 		break;','line_number':629,'multiline':False]['text':' 	}','line_number':630,'multiline':False]['text':' }','line_number':631,'multiline':False]['text':' Only operates on a single token, because any newline that follows this should break these patterns','line_number':634,'multiline':False]['text':' If it was completed correctly, this should be a single token.','line_number':691,'multiline':False]['text':' Expecting either a Paragraph or a List','line_number':692,'multiline':False]['text':' The number of line1 col headers','line_number':700,'multiline':False]['text':' We got the line1 header row, and the line2 separator row, but there are more lines, and it wasn't parsed as a table!','line_number':712,'multiline':False]['text':' That's strange and means that the table is probably malformed in the source, so I won't try to patch it up.','line_number':713,'multiline':False]['text':' Got a line2 separator row- partial or complete, doesn't matter, we'll replace it with a correct one','line_number':717,'multiline':False]['text':' The line after the header row isn't a valid separator row, so the table is malformed, don't fix it up','line_number':720,'multiline':False]