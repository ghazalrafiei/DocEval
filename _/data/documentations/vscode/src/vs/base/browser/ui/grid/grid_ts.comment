['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * The interface to implement for views within a {@link Grid}.
 ','line_number':32,'multiline':True]['text':'*
	 * The preferred width for when the user double clicks a sash
	 * adjacent to this view.
	 ','line_number':37,'multiline':True]['text':'*
	 * The preferred height for when the user double clicks a sash
	 * adjacent to this view.
	 ','line_number':43,'multiline':True]['text':'*
 * Find the grid location of a specific DOM element by traversing the parent
 * chain and finding each child index on the way.
 *
 * This will break as soon as DOM structures of the Splitview or Gridview change.
 ','line_number':175,'multiline':True]['text':'*
 * The {@link Grid} exposes a Grid widget in a friendlier API than the underlying
 * {@link GridView} widget. Namely, all mutation operations are addressed by the
 * model elements, rather than indexes.
 *
 * It support the same features as the {@link GridView}.
 ','line_number':213,'multiline':True]['text':'*
	 * The orientation of the grid. Matches the orientation of the root
	 * {@link SplitView} in the grid's {@link GridLocation} model.
	 ','line_number':225,'multiline':True]['text':'*
	 * The width of the grid.
	 ','line_number':232,'multiline':True]['text':'*
	 * The height of the grid.
	 ','line_number':237,'multiline':True]['text':'*
	 * The minimum width of the grid.
	 ','line_number':242,'multiline':True]['text':'*
	 * The minimum height of the grid.
	 ','line_number':247,'multiline':True]['text':'*
	 * The maximum width of the grid.
	 ','line_number':252,'multiline':True]['text':'*
	 * The maximum height of the grid.
	 ','line_number':257,'multiline':True]['text':'*
	 * Fires whenever a view within the grid changes its size constraints.
	 ','line_number':262,'multiline':True]['text':'*
	 * Fires whenever the user scrolls a {@link SplitView} within
	 * the grid.
	 ','line_number':267,'multiline':True]['text':'*
	 * A collection of sashes perpendicular to each edge of the grid.
	 * Corner sashes will be created for each intersection.
	 ','line_number':273,'multiline':True]['text':'*
	 * Enable/disable edge snapping across all grid views.
	 ','line_number':280,'multiline':True]['text':'*
	 * The DOM element for this view.
	 ','line_number':285,'multiline':True]['text':'*
	 * Create a new {@link Grid}. A grid must *always* have a view
	 * inside.
	 *
	 * @param view An initial view for this Grid.
	 ','line_number':293,'multiline':True]['text':'*
	 * Layout the {@link Grid}.
	 *
	 * Optionally provide a `top` and `left` positions, those will propagate
	 * as an origin for positions passed to {@link IView.layout}.
	 *
	 * @param width The width of the {@link Grid}.
	 * @param height The height of the {@link Grid}.
	 * @param top Optional, the top location of the {@link Grid}.
	 * @param left Optional, the left location of the {@link Grid}.
	 ','line_number':325,'multiline':True]['text':'*
	 * Add a {@link IView view} to this {@link Grid}, based on another reference view.
	 *
	 * Take this grid as an example:
	 *
	 * ```
	 *  +-----+---------------+
	 *  |  A  |      B        |
	 *  +-----+---------+-----+
	 *  |        C      |     |
	 *  +---------------+  D  |
	 *  |        E      |     |
	 *  +---------------+-----+
	 * ```
	 *
	 * Calling `addView(X, Sizing.Distribute, C, Direction.Right)` will make the following
	 * changes:
	 *
	 * ```
	 *  +-----+---------------+
	 *  |  A  |      B        |
	 *  +-----+-+-------+-----+
	 *  |   C   |   X   |     |
	 *  +-------+-------+  D  |
	 *  |        E      |     |
	 *  +---------------+-----+
	 * ```
	 *
	 * Or `addView(X, Sizing.Distribute, D, Direction.Down)`:
	 *
	 * ```
	 *  +-----+---------------+
	 *  |  A  |      B        |
	 *  +-----+---------+-----+
	 *  |        C      |  D  |
	 *  +---------------+-----+
	 *  |        E      |  X  |
	 *  +---------------+-----+
	 * ```
	 *
	 * @param newView The view to add.
	 * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.
	 * @param referenceView Another view to place this new view next to.
	 * @param direction The direction the new view should be placed next to the reference view.
	 ','line_number':341,'multiline':True]['text':'*
	 * Remove a {@link IView view} from this {@link Grid}.
	 *
	 * @param view The {@link IView view} to remove.
	 * @param sizing Whether to distribute other {@link IView view}'s sizes.
	 ','line_number':442,'multiline':True]['text':'*
	 * Move a {@link IView view} to another location in the grid.
	 *
	 * @remarks See {@link Grid.addView}.
	 *
	 * @param view The {@link IView view} to move.
	 * @param sizing Either a fixed size, or a dynamic {@link Sizing} strategy.
	 * @param referenceView Another view to place the view next to.
	 * @param direction The direction the view should be placed next to the reference view.
	 ','line_number':468,'multiline':True]['text':'*
	 * Move a {@link IView view} to another location in the grid.
	 *
	 * @remarks Internal method, do not use without knowing what you're doing.
	 * @remarks See {@link GridView.moveView}.
	 *
	 * @param view The {@link IView view} to move.
	 * @param location The {@link GridLocation location} to insert the view on.
	 ','line_number':494,'multiline':True]['text':'*
	 * Swap two {@link IView views} within the {@link Grid}.
	 *
	 * @param from One {@link IView view}.
	 * @param to Another {@link IView view}.
	 ','line_number':523,'multiline':True]['text':'*
	 * Resize a {@link IView view}.
	 *
	 * @param view The {@link IView view} to resize.
	 * @param size The size the view should be.
	 ','line_number':535,'multiline':True]['text':'*
	 * Returns whether all other {@link IView views} are at their minimum size.
	 *
	 * @param view The reference {@link IView view}.
	 ','line_number':546,'multiline':True]['text':'*
	 * Returns whether the {@link IView view} is maximized.
	 *
	 * @param view The reference {@link IView view}.
	 ','line_number':556,'multiline':True]['text':'*
	 * Returns whether the {@link IView view} is maximized.
	 *
	 * @param view The reference {@link IView view}.
	 ','line_number':566,'multiline':True]['text':'*
	 * Get the size of a {@link IView view}.
	 *
	 * @param view The {@link IView view}. Provide `undefined` to get the size
	 * of the grid itself.
	 ','line_number':575,'multiline':True]['text':'*
	 * Get the cached visible size of a {@link IView view}. This was the size
	 * of the view at the moment it last became hidden.
	 *
	 * @param view The {@link IView view}.
	 ','line_number':590,'multiline':True]['text':'*
	 * Maximizes the specified view and hides all other views.
	 * @param view The view to maximize.
	 ','line_number':601,'multiline':True]['text':'*
	 * Expand the size of a {@link IView view} by collapsing all other views
	 * to their minimum sizes.
	 *
	 * @param view The {@link IView view}.
	 ','line_number':617,'multiline':True]['text':'*
	 * Distribute the size among all {@link IView views} within the entire
	 * grid or within a single {@link SplitView}.
	 ','line_number':628,'multiline':True]['text':'*
	 * Returns whether a {@link IView view} is visible.
	 *
	 * @param view The {@link IView view}.
	 ','line_number':636,'multiline':True]['text':'*
	 * Set the visibility state of a {@link IView view}.
	 *
	 * @param view The {@link IView view}.
	 ','line_number':646,'multiline':True]['text':'*
	 * Returns a descriptor for the entire grid.
	 ','line_number':656,'multiline':True]['text':'*
	 * Utility method to return the collection all views which intersect
	 * a view's edge.
	 *
	 * @param view The {@link IView view}.
	 * @param direction Which direction edge to be considered.
	 * @param wrap Whether the grid wraps around (from right to left, from bottom to top).
	 ','line_number':663,'multiline':True]['text':'*
 * A {@link Grid} which can serialize itself.
 ','line_number':773,'multiline':True]['text':'*
	 * Construct a new {@link SerializableGrid} from a JSON object.
	 *
	 * @param json The JSON object.
	 * @param deserializer A deserializer which can revive each view.
	 * @returns A new {@link SerializableGrid} instance.
	 ','line_number':801,'multiline':True]['text':'*
	 * Construct a new {@link SerializableGrid} from a grid descriptor.
	 *
	 * @param gridDescriptor A grid descriptor in which leaf nodes point to actual views.
	 * @returns A new {@link SerializableGrid} instance.
	 ','line_number':823,'multiline':True]['text':'*
	 * Useful information in order to proportionally restore view sizes
	 * upon the very first layout call.
	 ','line_number':833,'multiline':True]['text':'*
	 * Serialize this grid into a JSON object.
	 ','line_number':839,'multiline':True]['text':'*
 * Creates a new JSON object from a {@link GridDescriptor}, which can
 * be deserialized by {@link SerializableGrid.deserialize}.
 ','line_number':930,'multiline':True]