['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'# region Multi-Window Support Utilities','line_number':27,'multiline':False]['text':'#endregion','line_number':116,'multiline':False]['text':' Already disposed','line_number':141,'multiline':False]['text':' Prevent leakers from holding on to the dom or handler func','line_number':147,'multiline':False]['text':'*
 * Execute the callback the next time the browser is idle, returning an
 * {@link IDisposable} that will cancel the callback when disposed. This wraps
 * [requestIdleCallback] so it will fallback to [setTimeout] if the environment
 * doesn't support it.
 *
 * @param targetWindow The window for which to run the idle callback
 * @param callback The callback to run when idle, this includes an
 * [IdleDeadline] that provides the time alloted for the idle callback by the
 * browser. Not respecting this deadline will result in a degraded user
 * experience.
 * @param timeout A timeout at which point to queue no longer wait for an idle
 * callback but queue it on the regular event loop (like setTimeout). Typically
 * this should not be used.
 *
 * [IdleDeadline]: https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline
 * [requestIdleCallback]: https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback
 * [setTimeout]: https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout
 ','line_number':216,'multiline':True]['text':'*
 * An implementation of the "idle-until-urgent"-strategy as introduced
 * here: https://philipwalton.com/articles/idle-until-urgent/
 ','line_number':239,'multiline':True]['text':'*
 * Schedule a callback to be run at the next animation frame.
 * This allows multiple parties to register callbacks that should run at the next animation frame.
 * If currently in an animation frame, `runner` will be executed immediately.
 * @return token that can be used to cancel the scheduled runner (only if `runner` was not executed immediately).
 ','line_number':249,'multiline':True]['text':'*
 * Schedule a callback to be run at the next animation frame.
 * This allows multiple parties to register callbacks that should run at the next animation frame.
 * If currently in an animation frame, `runner` will be executed at the next animation frame.
 * @return token that can be used to cancel the scheduled runner.
 ','line_number':256,'multiline':True]['text':' stop interval ','line_number':264,'multiline':True]['text':' Sort by priority (largest to lowest)','line_number':313,'multiline':False]['text':'*
	 * The runners scheduled at the next animation frame
	 ','line_number':320,'multiline':True]['text':' window ID ','line_number':323,'multiline':True]['text':'*
	 * The runners scheduled at the current animation frame
	 ','line_number':324,'multiline':True]['text':' window ID ','line_number':327,'multiline':True]['text':'*
	 * A flag to keep track if the native requestAnimationFrame was already called
	 ','line_number':328,'multiline':True]['text':' window ID ','line_number':331,'multiline':True]['text':'*
	 * A flag to indicate if currently handling a native requestAnimationFrame callback
	 ','line_number':332,'multiline':True]['text':' window ID ','line_number':335,'multiline':True]['text':' must be early ','line_number':390,'multiline':True]['text':' must be late ','line_number':394,'multiline':True]['text':'*
 * Add a throttled listener. `handler` is fired at most every 8.33333ms or with the next animation frame (if browser supports it).
 ','line_number':397,'multiline':True]['text':' Try with DOM clientWidth / clientHeight','line_number':451,'multiline':False]['text':' If visual view port exits and it's on mobile, it should be used instead of window innerWidth / innerHeight, or document.body.clientWidth / document.body.clientHeight','line_number':456,'multiline':False]['text':' Try innerWidth / innerHeight','line_number':461,'multiline':False]['text':' Try with document.body.clientWidth / document.body.clientHeight','line_number':466,'multiline':False]['text':' Try with document.documentElement.clientWidth / document.documentElement.clientHeight','line_number':471,'multiline':False]['text':' Adapted from WinJS','line_number':484,'multiline':False]['text':' Converts a CSS positioning string for the specified element to pixels.','line_number':485,'multiline':False]['text':' ----------------------------------------------------------------------------------------','line_number':536,'multiline':False]['text':' Position & Dimension','line_number':537,'multiline':False]['text':' Adapted from WinJS.Utilities.getPosition','line_number':590,'multiline':False]['text':' and added borders to the mix','line_number':591,'multiline':False]['text':'*
 * Returns the position of a dom node relative to the entire page.
 ','line_number':660,'multiline':True]['text':'*
 * Returns the effective zoom on a given element before window zoom level is applied
 ','line_number':674,'multiline':True]['text':' Adapted from WinJS','line_number':693,'multiline':False]['text':' Gets the width of the element, including margins.','line_number':694,'multiline':False]['text':' Adapted from WinJS','line_number':711,'multiline':False]['text':' Gets the height of the content of the specified element. The content height does not include borders or padding.','line_number':712,'multiline':False]['text':' Adapted from WinJS','line_number':719,'multiline':False]['text':' Gets the height of the element, including its margins.','line_number':720,'multiline':False]['text':' Gets the left coordinate of the specified element relative to the specified parent.','line_number':726,'multiline':False]['text':' ----------------------------------------------------------------------------------------','line_number':745,'multiline':False]['text':'*
 * Set an explicit parent to use for nodes that are not part of the
 * regular dom structure.
 ','line_number':753,'multiline':True]['text':'*
 * Check if `testAncestor` is an ancestor of `testChild`, observing the explicit
 * parents set by `setParentFlowTo`.
 ','line_number':769,'multiline':True]['text':' reached the body','line_number':834,'multiline':False]['text':'*
 * Returns the active element across all child windows
 * based on document focus. Falls back to the main
 * window if no window has focus.
 ','line_number':842,'multiline':True]['text':'*
 * Returns true if the focused window active element matches
 * the provided element. Falls back to the main window if no
 * window has focus.
 ','line_number':857,'multiline':True]['text':'*
 * Returns true if the focused window active element is contained in
 * `ancestor`. Falls back to the main window if no window has focus.
 ','line_number':866,'multiline':True]['text':'*
 * Returns whether the element is in the active `document`. The active
 * document has focus or will be the main windows document.
 ','line_number':874,'multiline':True]['text':'*
 * Returns the active document across main and child windows.
 * Prefers the window with focus, otherwise falls back to
 * the main windows document.
 ','line_number':882,'multiline':True]['text':'*
 * Returns the active window across main and child windows.
 * Prefers the window with focus, otherwise falls back to
 * the main window.
 ','line_number':896,'multiline':True]['text':' main stylesheet ','line_number':913,'multiline':True]['text':' aux window clones that track the main stylesheet ','line_number':913,'multiline':True]['text':' With <head> as container, the stylesheet becomes global and is tracked','line_number':930,'multiline':False]['text':' to support auxiliary windows to clone the stylesheet.','line_number':931,'multiline':False]['text':' main window is already tracked','line_number':938,'multiline':False]['text':' Chrome, IE','line_number':1057,'multiline':False]['text':' FF','line_number':1061,'multiline':False]['text':' Apply rule also to all cloned global stylesheets','line_number':1074,'multiline':False]['text':' Remove rules also from all cloned global stylesheets','line_number':1098,'multiline':False]['text':' eslint-disable-next-line no-restricted-syntax','line_number':1109,'multiline':False]['text':' eslint-disable-next-line no-restricted-syntax','line_number':1114,'multiline':False]['text':' eslint-disable-next-line no-restricted-syntax','line_number':1119,'multiline':False]['text':' eslint-disable-next-line no-restricted-syntax','line_number':1124,'multiline':False]['text':' Mouse','line_number':1129,'multiline':False]['text':' Keyboard','line_number':1147,'multiline':False]['text':' HTML Document','line_number':1151,'multiline':False]['text':' Form','line_number':1164,'multiline':False]['text':' Local Storage','line_number':1174,'multiline':False]['text':' Drag','line_number':1176,'multiline':False]['text':' Animation','line_number':1184,'multiline':False]['text':'*
 * Creates a new `IFocusTracker` instance that tracks focus changes on the given `element` and its descendants.
 *
 * @param element The `HTMLElement` or `Window` to track focus changes on.
 * @returns An `IFocusTracker` instance.
 ','line_number':1307,'multiline':True]['text':'*
 * Removes all children from `parent` and appends `children`
 ','line_number':1336,'multiline':True]['text':' If we are the currently focused element and tabIndex is removed,','line_number':1463,'multiline':False]['text':' standard DOM behavior is to move focus to the <body> element. We','line_number':1464,'multiline':False]['text':' typically never want that, rather put focus to the closest element','line_number':1465,'multiline':False]['text':' in the hierarchy of the parent DOM nodes.','line_number':1466,'multiline':False]['text':'*
 * Find a value usable for a dom node size such that the likelihood that it would be
 * displayed with constant screen pixels size is as high as possible.
 *
 * e.g. We would desire for the cursors to be 2px (CSS px) wide. Under a devicePixelRatio
 * of 1.25, the cursor will be 2.5 screen pixels wide. Depending on how the dom node aligns/"snaps"
 * with the screen pixels, it will sometimes be rendered with 2 screen pixels, and sometimes with 3 screen pixels.
 ','line_number':1499,'multiline':True]['text':'*
 * Open safely a new window. This is the best way to do so, but you cannot tell
 * if the window was opened or if it was blocked by the browser's popup blocker.
 * If you want to tell if the browser blocked the new window, use {@link windowOpenWithSuccess}.
 *
 * See https://github.com/microsoft/monaco-editor/issues/601
 * To protect against malicious code in the linked site, particularly phishing attempts,
 * the window.opener should be set to null to prevent the linked site from having access
 * to change the location of the current page.
 * See https://mathiasbynens.github.io/rel-noopener/
 ','line_number':1512,'multiline':True]['text':' By using 'noopener' in the `windowFeatures` argument, the newly created window will','line_number':1524,'multiline':False]['text':' not be able to use `window.opener` to reach back to the current page.','line_number':1525,'multiline':False]['text':' See https://stackoverflow.com/a/46958731','line_number':1526,'multiline':False]['text':' See https://developer.mozilla.org/en-US/docs/Web/API/Window/open#noopener','line_number':1527,'multiline':False]['text':' However, this also doesn't allow us to realize if the browser blocked','line_number':1528,'multiline':False]['text':' the creation of the window.','line_number':1529,'multiline':False]['text':'*
 * Open a new window in a popup. This is the best way to do so, but you cannot tell
 * if the window was opened or if it was blocked by the browser's popup blocker.
 * If you want to tell if the browser blocked the new window, use {@link windowOpenWithSuccess}.
 *
 * Note: this does not set {@link window.opener} to null. This is to allow the opened popup to
 * be able to use {@link window.close} to close itself. Because of this, you should only use
 * this function on urls that you trust.
 *
 * In otherwords, you should almost always use {@link windowOpenNoOpener} instead of this function.
 ','line_number':1533,'multiline':True]['text':'*
 * Attempts to open a window and returns whether it succeeded. This technique is
 * not appropriate in certain contexts, like for example when the JS context is
 * executing inside a sandboxed iframe. If it is not necessary to know if the
 * browser blocked the new window, use {@link windowOpenNoOpener}.
 *
 * See https://github.com/microsoft/monaco-editor/issues/601
 * See https://github.com/microsoft/monaco-editor/issues/2474
 * See https://mathiasbynens.github.io/rel-noopener/
 *
 * @param url the url to open
 * @param noOpener whether or not to set the {@link window.opener} to null. You should leave the default
 * (true) unless you trust the url that is being opened.
 * @returns boolean indicating if the {@link window.open} call succeeded
 ','line_number':1555,'multiline':True]['text':' see `windowOpenNoOpener` for details on why this is important','line_number':1574,'multiline':False]['text':'*
 * returns url('...')
 ','line_number':1595,'multiline':True]