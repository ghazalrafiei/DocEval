['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Copied from: https://github.com/microsoft/vscode-node-debug/blob/master/src/node/pathUtilities.ts#L83
 *
 * Given an absolute, normalized, and existing file path 'realcase' returns the exact path that the file has on disk.
 * On a case insensitive file system, the returned path might differ from the original path by character casing.
 * On a case sensitive file system, the returned path will always be identical to the original path.
 * In case of errors, null is returned. But you cannot use this function to verify that a path exists.
 * realcaseSync does not handle '..' or '.' path segments and it does not take the locale into account.
 ','line_number':12,'multiline':True]['text':' This method is unsupported on OS that have case sensitive','line_number':23,'multiline':False]['text':' file system where the same path can exist in different forms','line_number':24,'multiline':False]['text':' (see also https://github.com/microsoft/vscode/issues/139709)','line_number':25,'multiline':False]['text':' end recursion','line_number':30,'multiline':False]['text':' can be '' for windows drive letters ','line_number':34,'multiline':True]['text':' use a case insensitive search','line_number':37,'multiline':False]['text':' on a case sensitive filesystem we cannot determine here, whether the file exists or not, hence we need the 'file exists' precondition','line_number':39,'multiline':False]['text':' recurse','line_number':40,'multiline':False]['text':' must be a case sensitive $filesystem','line_number':45,'multiline':False]['text':' case sensitive','line_number':47,'multiline':False]['text':' recurse','line_number':48,'multiline':False]['text':' silently ignore error','line_number':55,'multiline':False]['text':' This method is unsupported on OS that have case sensitive','line_number':63,'multiline':False]['text':' file system where the same path can exist in different forms','line_number':64,'multiline':False]['text':' (see also https://github.com/microsoft/vscode/issues/139709)','line_number':65,'multiline':False]['text':' end recursion','line_number':70,'multiline':False]['text':' can be '' for windows drive letters ','line_number':74,'multiline':True]['text':' use a case insensitive search','line_number':77,'multiline':False]['text':' on a case sensitive filesystem we cannot determine here, whether the file exists or not, hence we need the 'file exists' precondition','line_number':79,'multiline':False]['text':' recurse','line_number':80,'multiline':False]['text':' must be a case sensitive $filesystem','line_number':85,'multiline':False]['text':' case sensitive','line_number':87,'multiline':False]['text':' recurse','line_number':88,'multiline':False]['text':' silently ignore error','line_number':95,'multiline':False]['text':' DO NOT USE `fs.promises.realpath` here as it internally','line_number':103,'multiline':False]['text':' calls `fs.native.realpath` which will result in subst','line_number':104,'multiline':False]['text':' drives to be resolved to their target on Windows','line_number':105,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/118562','line_number':106,'multiline':False]['text':' We hit an error calling fs.realpath(). Since fs.realpath() is doing some path normalization','line_number':110,'multiline':False]['text':' we now do a similar normalization and then try again if we can access the path with read','line_number':111,'multiline':False]['text':' permissions at least. If that succeeds, we return that path.','line_number':112,'multiline':False]['text':' fs.realpath() is resolving symlinks and that can fail in certain cases. The workaround is','line_number':113,'multiline':False]['text':' to not resolve links but to simply see if the path is read accessible or not.','line_number':114,'multiline':False]['text':' We hit an error calling fs.realpathSync(). Since fs.realpathSync() is doing some path normalization','line_number':128,'multiline':False]['text':' we now do a similar normalization and then try again if we can access the path with read','line_number':129,'multiline':False]['text':' permissions at least. If that succeeds, we return that path.','line_number':130,'multiline':False]['text':' fs.realpath() is resolving symlinks and that can fail in certain cases. The workaround is','line_number':131,'multiline':False]['text':' to not resolve links but to simply see if the path is read accessible or not.','line_number':132,'multiline':False]['text':' throws in case of an error','line_number':135,'multiline':False]