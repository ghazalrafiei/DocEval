['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' all arguments behind `tunnel`','line_number':60,'multiline':False]['text':' ./Contents/MacOS/Electron => ./Contents/Resources/app/bin/code-tunnel-insiders','line_number':68,'multiline':False]['text':' Help','line_number':83,'multiline':False]['text':' Version Info','line_number':89,'multiline':False]['text':' Shell integration','line_number':94,'multiline':False]['text':' Usage: `[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path bash)"`','line_number':98,'multiline':False]['text':' Usage: `if ($env:TERM_PROGRAM -eq "vscode") { . "$(code --locate-shell-integration-path pwsh)" }`','line_number':100,'multiline':False]['text':' Usage: `[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"`','line_number':102,'multiline':False]['text':' Usage: `string match -q "$TERM_PROGRAM" "vscode"; and . (code --locate-shell-integration-path fish)`','line_number':104,'multiline':False]['text':' Extensions Management','line_number':111,'multiline':False]['text':' Write File','line_number':119,'multiline':False]['text':' Windows: set the paths as allowed UNC paths given','line_number':124,'multiline':False]['text':' they are explicitly provided by the user as arguments','line_number':125,'multiline':False]['text':' Validate','line_number':134,'multiline':False]['text':' make sure source and target are provided and are not the same','line_number':136,'multiline':False]['text':' make sure both source and target are absolute paths','line_number':137,'multiline':False]['text':' make sure source exists as file','line_number':138,'multiline':False]['text':' make sure target exists as file','line_number':139,'multiline':False]['text':' Check for readonly status and chmod if so if we are told so','line_number':146,'multiline':False]['text':' File mode indicating writable by owner ','line_number':151,'multiline':True]['text':' Write source to target','line_number':157,'multiline':False]['text':' On Windows we use a different strategy of saving the file','line_number':160,'multiline':False]['text':' by first truncating the file and then writing with r+ mode.','line_number':161,'multiline':False]['text':' This helps to save hidden files on Windows','line_number':162,'multiline':False]['text':' (see https://github.com/microsoft/vscode/issues/931) and','line_number':163,'multiline':False]['text':' prevent removing alternate data streams','line_number':164,'multiline':False]['text':' (see https://github.com/microsoft/vscode/issues/6363)','line_number':165,'multiline':False]['text':' Restore previous mode as needed','line_number':172,'multiline':False]['text':' Just Code','line_number':182,'multiline':False]['text':' remove the "-" argument when we read from stdin','line_number':208,'multiline':False]['text':' Read from stdin: we require a single "-" argument to be passed in order to start reading from','line_number':216,'multiline':False]['text':' stdin. We do this because there is no reliable way to find out if data is piped to stdin. Just','line_number':217,'multiline':False]['text':' checking for stdin being connected to a TTY is not enough (https://github.com/microsoft/vscode/issues/40351)','line_number':218,'multiline':False]['text':' returns a file path where stdin input is written into (write in progress).','line_number':223,'multiline':False]['text':' throws error if file can not be written','line_number':225,'multiline':False]['text':' Make sure to open tmp file','line_number':227,'multiline':False]['text':' Enable --wait to get all data and ignore adding this to history','line_number':230,'multiline':False]['text':' If the user pipes data via stdin but forgot to add the "-" argument, help by printing a message','line_number':242,'multiline':False]['text':' if we detect that data flows into via stdin after a certain timeout.','line_number':243,'multiline':False]['text':' If we are started with --wait create a random temporary file','line_number':258,'multiline':False]['text':' and pass it over to the starting instance. We can use this file','line_number':259,'multiline':False]['text':' to wait for it to be deleted to monitor that the edited file','line_number':260,'multiline':False]['text':' is closed and then exit the waiting process.','line_number':261,'multiline':False]['text':' When running with --wait, we want to continue running CLI process','line_number':269,'multiline':False]['text':' until either:','line_number':270,'multiline':False]['text':' - the wait marker file has been deleted (e.g. when closing the editor)','line_number':271,'multiline':False]['text':' - the launched process terminates (e.g. due to a crash)','line_number':272,'multiline':False]['text':' On Big Sur, we resolve the following promise only when the child,','line_number':276,'multiline':False]['text':' i.e. the open command, exited with a signal or error. Otherwise, we','line_number':277,'multiline':False]['text':' wait for the marker file to be deleted or for the child to error.','line_number':278,'multiline':False]['text':' Only resolve this promise if the child (i.e. open) exited with an error','line_number':280,'multiline':False]['text':' On other platforms, we listen for exit in case the child exits before the','line_number':288,'multiline':False]['text':' marker file is deleted.','line_number':289,'multiline':False]['text':' Make sure to delete the tmp stdin file if we have any','line_number':300,'multiline':False]['text':' If we have been started with `--prof-startup` we need to find free ports to profile','line_number':306,'multiline':False]['text':' the main process, the renderer, and the extension host. We also disable v8 cached data','line_number':307,'multiline':False]['text':' to get better profile traces. Last, we listen on stdout for a signal that tells us to','line_number':308,'multiline':False]['text':' stop profiling.','line_number':309,'multiline':False]['text':' fail the operation when one of the ports couldn't be acquired.','line_number':315,'multiline':False]['text':' when running from a not-development-build we remove','line_number':351,'multiline':False]['text':' absolute filenames because we don't want to reveal anything','line_number':352,'multiline':False]['text':' about users. We also append the `.txt` suffix to make it','line_number':353,'multiline':False]['text':' easier to attach these files to GH issues','line_number':354,'multiline':False]['text':' load and start profiler','line_number':366,'multiline':False]['text':' wait for the renderer to delete the','line_number':390,'multiline':False]['text':' marker file','line_number':391,'multiline':False]['text':' stop profiling','line_number':394,'multiline':False]['text':' re-create the marker file to signal that profiling is done','line_number':399,'multiline':False]['text':' restore ability to see output when --status is used','line_number':420,'multiline':False]['text':' We spawn process.execPath directly','line_number':423,'multiline':False]['text':' On Big Sur, we spawn using the open command to obtain behavior','line_number':426,'multiline':False]['text':' similar to if the app was launched from the dock','line_number':427,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/102975','line_number':428,'multiline':False]['text':' The following args are for the open command itself, rather than for VS Code:','line_number':430,'multiline':False]['text':' -n creates a new instance.','line_number':431,'multiline':False]['text':'    Without -n, the open command re-opens the existing instance as-is.','line_number':432,'multiline':False]['text':' -g starts the new instance in the background.','line_number':433,'multiline':False]['text':'    Later, Electron brings the instance to the foreground.','line_number':434,'multiline':False]['text':'    This way, Mac does not automatically try to foreground the new instance, which causes','line_number':435,'multiline':False]['text':'    focusing issues when the new instance only sends data to a previous instance and then closes.','line_number':436,'multiline':False]['text':' -a opens the given application.','line_number':438,'multiline':False]['text':' -a: opens a specific application','line_number':439,'multiline':False]['text':' `open --wait-apps`: blocks until the launched app is closed (even if they were already running)','line_number':442,'multiline':False]['text':' The open command only allows for redirecting stderr and stdout to files,','line_number':444,'multiline':False]['text':' so we make it redirect those to temp files, and then use a logger to','line_number':445,'multiline':False]['text':' redirect the file output to the console','line_number':446,'multiline':False]['text':' Tmp file to target output to','line_number':449,'multiline':False]['text':' Listener to redirect content to stdout/stderr','line_number':454,'multiline':False]['text':' We must dispose the token to stop watching,','line_number':461,'multiline':False]['text':' but the watcher might still be reading data.','line_number':462,'multiline':False]['text':' ignore ','line_number':465,'multiline':True]['text':' Ignore the _ env var, because the open command','line_number':474,'multiline':False]['text':' ignores it anyway.','line_number':475,'multiline':False]['text':' Pass the rest of the env vars in to fix','line_number':476,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/134696.','line_number':477,'multiline':False]['text':' pass on our arguments','line_number':484,'multiline':False]['text':' If we're in development mode, replace the . arg with the','line_number':487,'multiline':False]['text':' vscode source arg. Because the OSS app isn't bundled,','line_number':488,'multiline':False]['text':' it needs the full vscode source arg to launch properly.','line_number':489,'multiline':False]['text':' We already passed over the env variables','line_number':497,'multiline':False]['text':' using the --env flags, so we can leave them out here.','line_number':498,'multiline':False]['text':' Also, we don't need to pass env._, which is different from argv._','line_number':499,'multiline':False]