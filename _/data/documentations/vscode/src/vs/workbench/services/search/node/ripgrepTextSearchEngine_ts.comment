['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' If @vscode/ripgrep is in an .asar file, then the binary is unpacked.','line_number':23,'multiline':False]['text':' Trigger last result','line_number':113,'multiline':False]['text':'*
 * Read the first line of stderr and return an error for display or undefined, based on a list of
 * allowed properties.
 * Ripgrep produces stderr output which is not from a fatal error, and we only want the search to be
 * "failed" when a fatal error was produced.
 ','line_number':128,'multiline':True]['text':' Uppercase first letter','line_number':148,'multiline':False]['text':' Uppercase first letter','line_number':153,'multiline':False]['text':' check for newline before appending to remainder','line_number':218,'multiline':False]['text':' If the previous data chunk didn't end in a newline, prepend it to this chunk','line_number':221,'multiline':False]['text':' Shortcut','line_number':227,'multiline':False]['text':' it looks like certain regexes can match a line, but cause rg to not','line_number':281,'multiline':False]['text':' emit any specific submatches for that line.','line_number':282,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/100569#issuecomment-738496991','line_number':283,'multiline':False]['text':' Finish the line, then report the result below','line_number':299,'multiline':False]['text':' exported for testing','line_number':371,'multiline':False]['text':' Don't use .gitignore or .ignore','line_number':414,'multiline':False]['text':' Ripgrep handles -- as a -- arg separator. Only --.','line_number':426,'multiline':False]['text':' - is ok, --- is ok, --some-flag is also ok. Need to special case.','line_number':427,'multiline':False]['text':' Allow $ to match /r/n','line_number':442,'multiline':False]['text':'g, '/'); // RegExp.source arbitrarily returns escaped slashes. Search and destroy.','line_number':453,'multiline':False]['text':' Folder to search','line_number':483,'multiline':False]['text':' Put the query after --, in case the query starts with a dash','line_number':487,'multiline':False]['text':'*
 * `"foo/*bar/something"` -> `["foo", "foo/*bar", "foo/*bar/something", "foo/*bar/something/**"]`
 ','line_number':496,'multiline':True]['text':' Match \u1234','line_number':510,'multiline':False]['text':' Match \u{1234}','line_number':517,'multiline':False]['text':' \u with 5-6 characters will be left alone because \x only takes 4 characters.','line_number':518,'multiline':False]['text':' we parse the pattern anew each tiem','line_number':551,'multiline':False]['text':' simple char, \n -> \r?\n','line_number':575,'multiline':False]['text':' no-op in a lookbehind, see #100569','line_number':578,'multiline':False]['text':' negative bracket expr, [^a-z\n] -> (?![a-z]|\r?\n)','line_number':581,'multiline':False]['text':' If quantified, we can't use a negative lookahead in a quantifier.','line_number':584,'multiline':False]['text':' But `.` already doesn't match new lines, so we can just use that','line_number':585,'multiline':False]['text':' (with any other negations) instead.','line_number':586,'multiline':False]['text':' positive bracket expr, [a-z\n] -> (?:[a-z]|\r?\n)','line_number':592,'multiline':False]['text':' brace expansion for ripgrep','line_number':639,'multiline':False]['text':'*
 * Split string given first opportunity for brace expansion in the string.
 * - If the brace is prepended by a \ character, then it is escaped.
 * - Does not process escapes that are within the sub-glob.
 * - If two unescaped `{` occur before `}`, then ripgrep will return an error for brace nesting, so don't split on those.
 ','line_number':641,'multiline':True]['text':' If we're already escaped, then just leave the escaped slash and the preceeding slash that escapes it.','line_number':657,'multiline':False]['text':' The two escaped slashes will result in a single slash and whatever processes the glob later will properly process the escape','line_number':658,'multiline':False]['text':' if we escaped this opening bracket, then it is to be taken literally. Remove the `\` because we've acknowleged it and add the `{` to the appropriate string','line_number':671,'multiline':False]['text':' ripgrep treats this as attempting to do a nested alternate group, which is invalid. Return with pattern including changes from escaped braces.','line_number':680,'multiline':False]['text':' same as `}`, but for closing bracket','line_number':689,'multiline':False]['text':' we found an end bracket to a valid opening bracket. Return the appropriate strings.','line_number':697,'multiline':False]['text':' if we're not in braces and not escaped, then this is a literal `}` character and we're still adding to fixedStart.','line_number':700,'multiline':False]['text':' similar to the `\\` case, we didn't do anything with the escape, so we should re-insert it into the appropriate string','line_number':705,'multiline':False]['text':' to be consumed later when individual parts of the glob are processed','line_number':706,'multiline':False]['text':' we are haven't hit the last brace, so no splitting should occur. Return with pattern including changes from escaped braces.','line_number':718,'multiline':False]['text':'*
 * Parses out curly braces and returns equivalent globs. Only supports one level of nesting.
 * Exported for testing.
 ','line_number':722,'multiline':True]['text':' occurs if the braces are empty.','line_number':735,'multiline':False]