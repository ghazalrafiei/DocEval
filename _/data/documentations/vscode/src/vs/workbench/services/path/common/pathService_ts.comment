['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Provides access to path related properties that will match the
 * environment. If the environment is connected to a remote, the
 * path properties will match that of the remotes operating system.
 ','line_number':20,'multiline':True]['text':'*
	 * The correct path library to use for the target environment. If
	 * the environment is connected to a remote, this will be the
	 * path library of the remote file system. Otherwise it will be
	 * the local file system's path library depending on the OS.
	 ','line_number':29,'multiline':True]['text':'*
	 * Determines the best default URI scheme for the current workspace.
	 * It uses information about whether we're running remote, in browser,
	 * or native combined with information about the current workspace to
	 * find the best default scheme.
	 ','line_number':37,'multiline':True]['text':'*
	 * Converts the given path to a file URI to use for the target
	 * environment. If the environment is connected to a remote, it
	 * will use the path separators according to the remote file
	 * system. Otherwise it will use the local file system's path
	 * separators.
	 ','line_number':45,'multiline':True]['text':'*
	 * Resolves the user-home directory for the target environment.
	 * If the envrionment is connected to a remote, this will be the
	 * remote's user home directory, otherwise the local one unless
	 * `preferLocal` is set to `true`.
	 ','line_number':54,'multiline':True]['text':'*
	 * Figures out if the provided resource has a valid file name
	 * for the operating system the file is saved to.
	 *
	 * Note: this currently only supports `file` and `vscode-file`
	 * protocols where we know the limits of the file systems behind
	 * these OS. Other remotes are not supported and this method
	 * will always return `true` for them.
	 ','line_number':63,'multiline':True]['text':'*
	 * @deprecated use `userHome` instead.
	 ','line_number':75,'multiline':True]['text':' OS','line_number':97,'multiline':False]['text':' User Home','line_number':104,'multiline':False]['text':' async version','line_number':117,'multiline':False]['text':' sync version','line_number':122,'multiline':False]['text':' Our `isValidBasename` method only works with our','line_number':128,'multiline':False]['text':' standard schemes for files on disk, either locally','line_number':129,'multiline':False]['text':' or remote.','line_number':130,'multiline':False]['text':' normalize to fwd-slashes on windows,','line_number':186,'multiline':False]['text':' on other systems bwd-slashes are valid','line_number':187,'multiline':False]['text':' filename character, eg /f\oo/ba\r.txt','line_number':188,'multiline':False]['text':' check for authority as used in UNC shares','line_number':194,'multiline':False]['text':' or use the path as given','line_number':195,'multiline':False]