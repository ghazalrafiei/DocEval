['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * e.g.
 * ```
 * {
 *    startTime: 1511954813493000,
 *    endTime: 1511954835590000,
 *    deltas: [ 100, 1500, 123456, 1500, 100000 ],
 *    ids: [ 'idle', 'self', 'extension1', 'self', 'idle' ]
 * }
 * ```
 ','line_number':59,'multiline':True]['text':'*
	 * Profiling start timestamp in microseconds.
	 ','line_number':71,'multiline':True]['text':'*
	 * Profiling end timestamp in microseconds.
	 ','line_number':75,'multiline':True]['text':'*
	 * Duration of segment in microseconds.
	 ','line_number':79,'multiline':True]['text':'*
	 * Segment identifier: extension id or one of the four known strings.
	 ','line_number':83,'multiline':True]['text':'*
	 * Get the information as a .cpuprofile.
	 ','line_number':88,'multiline':True]['text':'*
	 * Get the aggregated time per segmentId
	 ','line_number':93,'multiline':True]['text':'*
	 * The extension host should be launched immediately and doesn't require a `$startExtensionHost` call.
	 ','line_number':100,'multiline':True]['text':'*
	 * The extension host should be launched immediately and needs a `$startExtensionHost` call.
	 ','line_number':104,'multiline':True]['text':'*
	 * The extension host should be launched lazily and only when it has extensions it needs to host. It needs a `$startExtensionHost` call.
	 ','line_number':108,'multiline':True]['text':'*
	 * A collection of extensions which includes information about which
	 * extension will execute or is executing on this extension host.
	 * **NOTE**: this will reflect extensions correctly only after `start()` resolves.
	 ','line_number':119,'multiline':True]['text':' The new extension is different than the old one','line_number':195,'multiline':False]['text':' (e.g. maybe it executes in a different location)','line_number':196,'multiline':False]['text':' The new extension is different than the old one','line_number':209,'multiline':False]['text':' (e.g. maybe it executes in a different location)','line_number':210,'multiline':False]['text':' ignore older deltas','line_number':238,'multiline':False]['text':' First handle removals','line_number':243,'multiline':False]['text':' Then handle additions','line_number':258,'multiline':False]['text':' clear cached activation events','line_number':266,'multiline':False]['text':'*
 * Extension id or one of the four known program states.
 ','line_number':328,'multiline':True]['text':'*
	 * Return the inspect port or `0`. `0` means inspection is not possible.
	 ','line_number':367,'multiline':True]['text':'*
	 * A human readable reason for stopping the extension hosts
	 * that e.g. can be shown in a confirmation dialog to the
	 * user.
	 ','line_number':380,'multiline':True]['text':'*
	 * Allows to veto the stopping of extension hosts. The veto can be a long running
	 * operation.
	 *
	 * @param reason a human readable reason for vetoing the extension host stop in case
	 * where the resolved `value: true`.
	 ','line_number':387,'multiline':True]['text':'*
	 * An event emitted when extensions are registered after their extension points got handled.
	 *
	 * This event will also fire on startup to signal the installed extensions.
	 *
	 * @returns the extensions that got registered
	 ','line_number':400,'multiline':True]['text':'*
	 * @event
	 * Fired when extensions status changes.
	 * The event contains the ids of the extensions that have changed.
	 ','line_number':409,'multiline':True]['text':'*
	 * Fired when the available extensions change (i.e. when extensions are added or removed).
	 ','line_number':416,'multiline':True]['text':'*
	 * All registered extensions.
	 * - List will be empty initially during workbench startup and will be filled with extensions as they are registered
	 * - Listen to `onDidChangeExtensions` event for any changes to the extensions list. It will change as extensions get registered or de-reigstered.
	 * - Listen to `onDidRegisterExtensions` event or wait for `whenInstalledExtensionsRegistered` promise to get the initial list of registered extensions.
	 ','line_number':421,'multiline':True]['text':'*
	 * An event that is fired when activation happens.
	 ','line_number':429,'multiline':True]['text':'*
	 * An event that is fired when an extension host changes its
	 * responsive-state.
	 ','line_number':434,'multiline':True]['text':'*
	 * Fired before stop of extension hosts happens. Allows listeners to veto against the
	 * stop to prevent it from happening.
	 ','line_number':440,'multiline':True]['text':'*
	 * Send an activation event and activate interested extensions.
	 *
	 * This will wait for the normal startup of the extension host(s).
	 *
	 * In extraordinary circumstances, if the activation event needs to activate
	 * one or more extensions before the normal startup is finished, then you can use
	 * `ActivationKind.Immediate`. Please do not use this flag unless really necessary
	 * and you understand all consequences.
	 ','line_number':446,'multiline':True]['text':'*
	 * Send an activation ID and activate interested extensions.
	 *
	 ','line_number':458,'multiline':True]['text':'*
	 * Determine if `activateByEvent(activationEvent)` has resolved already.
	 *
	 * i.e. the activation event is finished and all interested extensions are already active.
	 ','line_number':464,'multiline':True]['text':'*
	 * An promise that resolves when the installed extensions are registered after
	 * their extension points got handled.
	 ','line_number':471,'multiline':True]['text':'*
	 * Return a specific extension
	 * @param id An extension id
	 ','line_number':477,'multiline':True]['text':'*
	 * Returns `true` if the given extension can be added. Otherwise `false`.
	 * @param extension An extension
	 ','line_number':483,'multiline':True]['text':'*
	 * Returns `true` if the given extension can be removed. Otherwise `false`.
	 * @param extension An extension
	 ','line_number':489,'multiline':True]['text':'*
	 * Read all contributions to an extension point.
	 ','line_number':495,'multiline':True]['text':'*
	 * Get information about extensions status.
	 ','line_number':500,'multiline':True]['text':'*
	 * Return the inspect ports (if inspection is possible) for extension hosts of kind `extensionHostKind`.
	 ','line_number':505,'multiline':True]['text':'*
	 * Stops the extension hosts.
	 *
	 * @param reason a human readable reason for stopping the extension hosts. This maybe
	 * can be presented to the user when showing dialogs.
	 *
	 * @returns a promise that resolves to `true` if the extension hosts were stopped, `false`
	 * if the operation was vetoed by listeners of the `onWillStop` event.
	 ','line_number':510,'multiline':True]['text':'*
	 * Starts the extension hosts.
	 ','line_number':521,'multiline':True]['text':'*
	 * Modify the environment of the remote extension host
	 * @param env New properties for the remote extension host
	 ','line_number':526,'multiline':True]