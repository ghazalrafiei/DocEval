['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * The only one that should be dealing with `IStoredFileWorkingCopy` and handle all
 * operations that are working copy related, such as save/revert, backup
 * and resolving.
 ','line_number':33,'multiline':True]['text':'*
	 * An event for when a stored file working copy was resolved.
	 ','line_number':40,'multiline':True]['text':'*
	 * An event for when a stored file working copy changed it's dirty state.
	 ','line_number':45,'multiline':True]['text':'*
	 * An event for when a stored file working copy changed it's readonly state.
	 ','line_number':50,'multiline':True]['text':'*
	 * An event for when a stored file working copy changed it's orphaned state.
	 ','line_number':55,'multiline':True]['text':'*
	 * An event for when a stored file working copy failed to save.
	 ','line_number':60,'multiline':True]['text':'*
	 * An event for when a stored file working copy successfully saved.
	 ','line_number':65,'multiline':True]['text':'*
	 * An event for when a stored file working copy was reverted.
	 ','line_number':70,'multiline':True]['text':'*
	 * An event for when a stored file working copy is removed from the manager.
	 ','line_number':75,'multiline':True]['text':'*
	 * Allows to resolve a stored file working copy. If the manager already knows
	 * about a stored file working copy with the same `URI`, it will return that
	 * existing stored file working copy. There will never be more than one
	 * stored file working copy per `URI` until the stored file working copy is
	 * disposed.
	 *
	 * Use the `IStoredFileWorkingCopyResolveOptions.reload` option to control the
	 * behaviour for when a stored file working copy was previously already resolved
	 * with regards to resolving it again from the underlying file resource
	 * or not.
	 *
	 * Note: Callers must `dispose` the working copy when no longer needed.
	 *
	 * @param resource used as unique identifier of the stored file working copy in
	 * case one is already known for this `URI`.
	 * @param options
	 ','line_number':80,'multiline':True]['text':'*
	 * Waits for the stored file working copy to be ready to be disposed. There may be
	 * conditions under which the stored file working copy cannot be disposed, e.g. when
	 * it is dirty. Once the promise is settled, it is safe to dispose.
	 ','line_number':100,'multiline':True]['text':'*
	 * The stored file working copy that was successfully saved.
	 ','line_number':110,'multiline':True]['text':'*
	 * If the stored file working copy was already resolved before,
	 * allows to trigger a reload of it to fetch the latest contents.
	 ','line_number':118,'multiline':True]['text':'*
		 * Controls whether the reload happens in the background
		 * or whether `resolve` will await the reload to happen.
		 ','line_number':124,'multiline':True]['text':'*
		 * Controls whether to force reading the contents from the
		 * underlying resource even if the resource did not change.
		 ','line_number':130,'multiline':True]['text':'#region Events','line_number':140,'multiline':False]['text':'#endregion','line_number':166,'multiline':False]['text':' Update working copies from file change events','line_number':197,'multiline':False]['text':' File system provider changes','line_number':200,'multiline':False]['text':' Working copy operations','line_number':204,'multiline':False]['text':' Lifecycle','line_number':209,'multiline':False]['text':' stored file working copies are pending to be saved:','line_number':219,'multiline':False]['text':' veto because web does not support long running shutdown','line_number':220,'multiline':False]['text':' As long as stored file working copies are pending to be saved, we prolong the shutdown','line_number':230,'multiline':False]['text':' until that has happened to ensure we are not shutting down in the middle of','line_number':231,'multiline':False]['text':' writing to the working copy (https://github.com/microsoft/vscode/issues/116600).','line_number':232,'multiline':False]['text':'#region Resolve from file or file provider changes','line_number':238,'multiline':False]['text':' Resolve working copies again for file systems that changed','line_number':242,'multiline':False]['text':' capabilities to fetch latest metadata (e.g. readonly)','line_number':243,'multiline':False]['text':' into all working copies.','line_number':244,'multiline':False]['text':' only if added','line_number':250,'multiline':False]['text':' Resolve working copies again for file systems that registered','line_number':253,'multiline':False]['text':' to account for capability changes: extensions may unregister','line_number':254,'multiline':False]['text':' and register the same provider with different capabilities,','line_number':255,'multiline':False]['text':' so we want to ensure to fetch latest metadata (e.g. readonly)','line_number':256,'multiline':False]['text':' into all working copies.','line_number':257,'multiline':False]['text':' Trigger a resolve for any update or add event that impacts','line_number':263,'multiline':False]['text':' the working copy. We also consider the added event','line_number':264,'multiline':False]['text':' because it could be that a file was added and updated','line_number':265,'multiline':False]['text':' right after.','line_number':266,'multiline':False]['text':' never reload dirty working copies','line_number':275,'multiline':False]['text':' Resolves a working copy to update (use a queue to prevent accumulation of','line_number':293,'multiline':False]['text':' resolve when the resolving actually takes long. At most we only want the','line_number':294,'multiline':False]['text':' queue to have a size of 2 (1 running resolve and 1 queued resolve).','line_number':295,'multiline':False]['text':'#endregion','line_number':308,'multiline':False]['text':'#region Working Copy File Events','line_number':310,'multiline':False]['text':' Move / Copy: remember working copies to restore after the operation','line_number':316,'multiline':False]['text':' ignore if resources are considered equal','line_number':324,'multiline':False]['text':' Find all working copies that related to source (can be many if resource is a folder)','line_number':327,'multiline':False]['text':' Remember each source working copy to load again after move is done','line_number':335,'multiline':False]['text':' with optional content to restore if it was dirty','line_number':336,'multiline':False]['text':' If the source is the actual working copy, just use target as new resource','line_number':340,'multiline':False]['text':' Otherwise a parent folder of the source is being moved, so we need','line_number':346,'multiline':False]['text':' to compute the target resource based on that','line_number':347,'multiline':False]['text':' Move / Copy: restore dirty flag on working copies to restore that were dirty','line_number':368,'multiline':False]['text':' Snapshot presence means this working copy used to be modified and so we restore that','line_number':376,'multiline':False]['text':' flag. we do NOT have to restore the content because the working copy was only soft','line_number':377,'multiline':False]['text':' reverted and did not loose its original modified contents.','line_number':378,'multiline':False]['text':' Create: Revert existing working copies','line_number':391,'multiline':False]['text':' Move/Copy: restore working copies that were loaded before the operation took place','line_number':403,'multiline':False]['text':' Restore the working copy at the target. if we have previous dirty content, we pass it','line_number':413,'multiline':False]['text':' over to be used, otherwise we force a reload from disk. this is important','line_number':414,'multiline':False]['text':' because we know the file has changed on disk after the move and the working copy might','line_number':415,'multiline':False]['text':' have still existed with the previous state. this ensures that the working copy is not','line_number':416,'multiline':False]['text':' tracking a stale state.','line_number':417,'multiline':False]['text':' enforce a reload','line_number':419,'multiline':False]['text':'#endregion','line_number':429,'multiline':False]['text':'#region Reload & Resolve','line_number':431,'multiline':False]['text':' Await a pending working copy resolve first before proceeding','line_number':435,'multiline':False]['text':' to ensure that we never resolve a working copy more than once','line_number':436,'multiline':False]['text':' in parallel.','line_number':437,'multiline':False]['text':' the working copy possibly got dirty or disposed, so return early then','line_number':441,'multiline':False]['text':' Trigger reload','line_number':444,'multiline':False]['text':' Await a pending working copy resolve first before proceeding','line_number':450,'multiline':False]['text':' to ensure that we never resolve a working copy more than once','line_number':451,'multiline':False]['text':' in parallel.','line_number':452,'multiline':False]['text':' Trigger resolve','line_number':458,'multiline':False]['text':' Working copy exists','line_number':482,'multiline':False]['text':' Always reload if contents are provided','line_number':485,'multiline':False]['text':' Reload async or sync based on options','line_number':490,'multiline':False]['text':' Async reload: trigger a reload but return immediately','line_number':493,'multiline':False]['text':' Sync reload: do not return until working copy reloaded','line_number':505,'multiline':False]['text':' Do not reload','line_number':511,'multiline':False]['text':' Stored file working copy does not exist','line_number':517,'multiline':False]['text':' Store pending resolve to avoid race conditions','line_number':537,'multiline':False]['text':' Make known to manager (if not already known)','line_number':540,'multiline':False]['text':' Emit some events if we created the working copy','line_number':543,'multiline':False]['text':' If the working copy is dirty right from the beginning,','line_number':546,'multiline':False]['text':' make sure to emit this as an event','line_number':547,'multiline':False]['text':' Automatically dispose the working copy if we created','line_number':557,'multiline':False]['text':' it because we cannot dispose a working copy we do not','line_number':558,'multiline':False]['text':' own (https://github.com/microsoft/vscode/issues/138850)','line_number':559,'multiline':False]['text':' Remove from pending resolves','line_number':567,'multiline':False]['text':' Stored file working copy can be dirty if a backup was restored, so we make sure to','line_number':571,'multiline':False]['text':' have this event delivered if we created the working copy here','line_number':572,'multiline':False]['text':' While we have pending working copy resolves, ensure','line_number':591,'multiline':False]['text':' to await the last one finishing before returning.','line_number':592,'multiline':False]['text':' This prevents a race when multiple clients await','line_number':593,'multiline':False]['text':' the pending resolve and then all trigger the resolve','line_number':594,'multiline':False]['text':' at the same time.','line_number':595,'multiline':False]['text':' already awaited on - return','line_number':600,'multiline':False]['text':' ignore any error here, it will bubble to the original requestor','line_number':607,'multiline':False]['text':' Install working copy listeners','line_number':614,'multiline':False]['text':' Keep for disposal','line_number':624,'multiline':False]['text':' Dispose any existing working copy listeners','line_number':631,'multiline':False]['text':'#endregion','line_number':645,'multiline':False]['text':'#region Lifecycle','line_number':647,'multiline':False]['text':' Quick return if working copy already disposed or not dirty and not resolving','line_number':651,'multiline':False]['text':' Promise based return in all other cases','line_number':659,'multiline':False]['text':' Await any pending resolves first before proceeding','line_number':665,'multiline':False]['text':' Dirty working copy: we do not allow to dispose dirty working copys','line_number':673,'multiline':False]['text':' to prevent data loss cases. dirty working copys can only be disposed when','line_number':674,'multiline':False]['text':' they are either saved or reverted','line_number':675,'multiline':False]['text':' Clear pending working copy resolves','line_number':688,'multiline':False]['text':' Dispose the working copy change listeners','line_number':691,'multiline':False]['text':'#endregion','line_number':696,'multiline':False]