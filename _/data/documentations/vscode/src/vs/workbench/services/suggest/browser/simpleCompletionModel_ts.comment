['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' TODO: Pass in options','line_number':34,'multiline':False]['text':' this._providerInfo = new Map();','line_number':78,'multiline':False]['text':' incrementally filter less','line_number':86,'multiline':False]['text':' picks a score function based on the number of','line_number':90,'multiline':False]['text':' items that we have to score/filter and based on the','line_number':91,'multiline':False]['text':' user-configuration','line_number':92,'multiline':False]['text':' if (item.isInvalid) {','line_number':99,'multiline':False]['text':' 	continue; // SKIP invalid items','line_number':100,'multiline':False]['text':' }','line_number':101,'multiline':False]['text':' collect all support, know if their result is incomplete','line_number':103,'multiline':False]['text':' this._providerInfo.set(item.provider, Boolean(item.container.incomplete));','line_number':104,'multiline':False]['text':' 'word' is that remainder of the current line that we','line_number':106,'multiline':False]['text':' filter and score against. In theory each suggestion uses a','line_number':107,'multiline':False]['text':' different word, but in practice not - that's why we cache','line_number':108,'multiline':False]['text':' TODO: Fix','line_number':109,'multiline':False]['text':' item.position.column - item.editStart.column;','line_number':110,'multiline':False]['text':' - (item.position.column - this._column);','line_number':111,'multiline':False]['text':' remember the word against which this item was','line_number':117,'multiline':False]['text':' scored','line_number':118,'multiline':False]['text':' when there is nothing to score against, don't','line_number':122,'multiline':False]['text':' event try to do. Use a const rank and rely on','line_number':123,'multiline':False]['text':' the fallback-sort using the initial sort order.','line_number':124,'multiline':False]['text':' use a score of `-100` because that is out of the','line_number':125,'multiline':False]['text':' bound of values `fuzzyScore` will return','line_number':126,'multiline':False]['text':' skip word characters that are whitespace until','line_number':130,'multiline':False]['text':' we have hit the replace range (overwriteBefore)','line_number':131,'multiline':False]['text':' the wordPos at which scoring starts is the whole word','line_number':143,'multiline':False]['text':' and therefore the same rules as not having a word apply','line_number':144,'multiline':False]['text':' } else if (typeof item.completion.filterText === 'string') {','line_number':147,'multiline':False]['text':' 	// when there is a `filterText` it must match the `word`.','line_number':148,'multiline':False]['text':' 	// if it matches we check with the label to compute highlights','line_number':149,'multiline':False]['text':' 	// and if that doesn't yield a result we have no highlights,','line_number':150,'multiline':False]['text':' 	// despite having the match','line_number':151,'multiline':False]['text':' 	const match = scoreFn(word, wordLow, wordPos, item.completion.filterText, item.filterTextLow!, 0, this._fuzzyScoreOptions);','line_number':152,'multiline':False]['text':' 	if (!match) {','line_number':153,'multiline':False]['text':' 		continue; // NO match','line_number':154,'multiline':False]['text':' 	}','line_number':155,'multiline':False]['text':' 	if (compareIgnoreCase(item.completion.filterText, item.textLabel) === 0) {','line_number':156,'multiline':False]['text':' 		// filterText and label are actually the same -> use good highlights','line_number':157,'multiline':False]['text':' 		item.score = match;','line_number':158,'multiline':False]['text':' 	} else {','line_number':159,'multiline':False]['text':' 		// re-run the scorer on the label in the hope of a result BUT use the rank','line_number':160,'multiline':False]['text':' 		// of the filterText-match','line_number':161,'multiline':False]['text':' 		item.score = anyScore(word, wordLow, wordPos, item.textLabel, item.labelLow, 0);','line_number':162,'multiline':False]['text':' 		item.score[0] = match[0]; // use score from filterText','line_number':163,'multiline':False]['text':' 	}','line_number':164,'multiline':False]['text':' by default match `word` against the `label`','line_number':167,'multiline':False]['text':' NO match','line_number':170,'multiline':False]['text':' TODO: Word distance','line_number':177,'multiline':False]['text':'this._wordDistance.distance(item.position, item.completion);','line_number':178,'multiline':False]['text':' update stats','line_number':181,'multiline':False]['text':' target.sort(this._snippetCompareFn);','line_number':185,'multiline':False]