['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * The text file editor model listens to changes to its underlying code editor model and saves these changes through the file service back to the disk.
 ','line_number':45,'multiline':True]['text':'#region Events','line_number':52,'multiline':False]['text':'#endregion','line_number':81,'multiline':False]['text':' IMPORTANT: never change this to not break existing assumptions (e.g. backups)','line_number':83,'multiline':False]['text':' encoding as reported from disk','line_number':90,'multiline':False]['text':' !!! DO NOT MARK PRIVATE! USED IN TESTS !!!','line_number':101,'multiline':False]['text':' encoding as chosen by the user','line_number':112,'multiline':False]['text':' language id as chosen by the user','line_number':113,'multiline':False]['text':' Make known to working copy service','line_number':130,'multiline':False]['text':' If we are currently orphaned, we check if the model file was added back','line_number':146,'multiline':False]['text':' Otherwise we check if the model file was deleted','line_number':155,'multiline':False]['text':' We have received reports of users seeing delete events even though the file still','line_number':167,'multiline':False]['text':' exists (network shares issue: https://github.com/microsoft/vscode/issues/13665).','line_number':168,'multiline':False]['text':' Since we do not want to mark the model as orphaned, we have to check if the','line_number':169,'multiline':False]['text':' file is really gone and not just a faulty file event.','line_number':170,'multiline':False]['text':'#region Backup','line_number':211,'multiline':False]['text':' Fill in metadata if we are resolved','line_number':215,'multiline':False]['text':' Fill in content the same way we would do when','line_number':227,'multiline':False]['text':' saving the file via the text file service','line_number':228,'multiline':False]['text':' encoding support (hardcode UTF-8)','line_number':229,'multiline':False]['text':'#endregion','line_number':235,'multiline':False]['text':'#region Revert','line_number':237,'multiline':False]['text':' Unset flags','line_number':244,'multiline':False]['text':' Force read from disk unless reverting soft','line_number':248,'multiline':False]['text':' FileNotFound means the file got deleted meanwhile, so ignore it','line_number':255,'multiline':False]['text':' Set flags back to previous values, we are still dirty if revert failed','line_number':258,'multiline':False]['text':' Emit file change event','line_number':266,'multiline':False]['text':' Emit dirty change event','line_number':269,'multiline':False]['text':'#endregion','line_number':275,'multiline':False]['text':'#region Resolve','line_number':277,'multiline':False]['text':' Return early if we are disposed','line_number':283,'multiline':False]['text':' Unless there are explicit contents provided, it is important that we do not','line_number':290,'multiline':False]['text':' resolve a model that is dirty or is in the process of saving to prevent data','line_number':291,'multiline':False]['text':' loss.','line_number':292,'multiline':False]['text':' Resolve either from backup or from file','line_number':299,'multiline':False]['text':' First check if we have contents to use for the model','line_number':307,'multiline':False]['text':' Second, check if we have a backup to resolve from (only for new models)','line_number':312,'multiline':False]['text':' Finally, resolve from file resource','line_number':321,'multiline':False]['text':' Try to resolve metdata from disk','line_number':328,'multiline':False]['text':' Clear orphaned state when resolving was successful','line_number':340,'multiline':False]['text':' Put some fallback values in error case','line_number':344,'multiline':False]['text':' Apply orphaned state based on error code','line_number':350,'multiline':False]['text':' Resolve with buffer','line_number':356,'multiline':False]['text':' dirty (resolved from buffer) ','line_number':368,'multiline':True]['text':' Resolve backup if any','line_number':373,'multiline':False]['text':' Resolve preferred encoding if we need it','line_number':376,'multiline':False]['text':' Abort if someone else managed to resolve the model by now','line_number':382,'multiline':False]['text':' imply that resolving has happened in another operation','line_number':387,'multiline':False]['text':' Try to resolve from backup if we have any','line_number':390,'multiline':False]['text':' Otherwise signal back that resolving did not happen','line_number':397,'multiline':False]['text':' Resolve with backup','line_number':404,'multiline':False]['text':' etag disabled if unknown!','line_number':411,'multiline':False]['text':' dirty (resolved from backup) ','line_number':416,'multiline':True]['text':' Restore orphaned flag based on state','line_number':418,'multiline':False]['text':' always allow if we resolved previously ','line_number':428,'multiline':True]['text':' Decide on etag','line_number':430,'multiline':False]['text':' disable ETag if we enforce to read from disk','line_number':433,'multiline':False]['text':' otherwise respect etag to support caching','line_number':435,'multiline':False]['text':' Remember current version before doing any long running operation','line_number':438,'multiline':False]['text':' to ensure we are not changing a model that was changed meanwhile','line_number':439,'multiline':False]['text':' Resolve Content','line_number':442,'multiline':False]['text':' Clear orphaned state when resolving was successful','line_number':451,'multiline':False]['text':' Return early if the model content has changed','line_number':454,'multiline':False]['text':' meanwhile to prevent loosing any changes','line_number':455,'multiline':False]['text':' not dirty (resolved from file) ','line_number':462,'multiline':True]['text':' Apply orphaned state based on error code','line_number':466,'multiline':False]['text':' NotModified status is expected and can be handled gracefully','line_number':469,'multiline':False]['text':' if we are resolved. We still want to update our last resolved','line_number':470,'multiline':False]['text':' stat to e.g. detect changes to the file's readonly state','line_number':471,'multiline':False]['text':' Unless we are forced to read from the file, Ignore when a model has been resolved once','line_number':480,'multiline':False]['text':' and the file was deleted meanwhile. Since we already have the model resolved, we can return','line_number':481,'multiline':False]['text':' to this state and update the orphaned flag to indicate that this model has no version on','line_number':482,'multiline':False]['text':' disk anymore.','line_number':483,'multiline':False]['text':' Otherwise bubble up the error','line_number':488,'multiline':False]['text':' Return early if we are disposed','line_number':496,'multiline':False]['text':' Update our resolved disk stat model','line_number':503,'multiline':False]['text':' Keep the original encoding to not loose it when saving','line_number':519,'multiline':False]['text':' Handle events if encoding changed','line_number':523,'multiline':False]['text':' make sure to reflect the real encoding of the file (never out of sync)','line_number':525,'multiline':False]['text':' Update Existing Model','line_number':530,'multiline':False]['text':' Create New Model','line_number':535,'multiline':False]['text':' Update model dirty flag. This is very important to call','line_number':540,'multiline':False]['text':' in both cases of dirty or not because it conditionally','line_number':541,'multiline':False]['text':' updates the `bufferSavedVersionId` to determine the','line_number':542,'multiline':False]['text':' version when to consider the model as saved again (e.g.','line_number':543,'multiline':False]['text':' when undoing back to the saved state)','line_number':544,'multiline':False]['text':' Emit as event','line_number':547,'multiline':False]['text':' Create model','line_number':554,'multiline':False]['text':' Model Listeners','line_number':557,'multiline':False]['text':' Detect language from content','line_number':560,'multiline':False]['text':' Update model value in a block that ignores content change events for dirty tracking','line_number':567,'multiline':False]['text':' See https://github.com/microsoft/vscode/issues/30189','line_number':578,'multiline':False]['text':' This code has been extracted to a different method because it caused a memory leak','line_number':579,'multiline':False]['text':' where `value` was captured in the content change listener closure scope.','line_number':580,'multiline':False]['text':' detect possible encoding change via language specific settings','line_number':583,'multiline':False]['text':' In any case increment the version id because it tracks the textual content state of the model at all times','line_number':591,'multiline':False]['text':' Remember when the user changed the model through a undo/redo operation.','line_number':595,'multiline':False]['text':' We need this information to throttle save participants to fix','line_number':596,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/102542','line_number':597,'multiline':False]['text':' We mark check for a dirty-state change upon model content change, unless:','line_number':602,'multiline':False]['text':' - explicitly instructed to ignore it (e.g. from model.resolve())','line_number':603,'multiline':False]['text':' - the model is readonly (in that case we never assume the change was done by the user)','line_number':604,'multiline':False]['text':' The contents changed as a matter of Undo and the version reached matches the saved one','line_number':607,'multiline':False]['text':' In this case we clear the dirty flag and emit a SAVED event to indicate this state.','line_number':608,'multiline':False]['text':' Clear flags','line_number':612,'multiline':False]['text':' Emit revert event if we were dirty','line_number':616,'multiline':False]['text':' Otherwise the content has changed and we signal this as becoming dirty','line_number':622,'multiline':False]['text':' Mark as dirty','line_number':626,'multiline':False]['text':' Emit as event','line_number':631,'multiline':False]['text':' Detect language from content','line_number':634,'multiline':False]['text':' Wait to be ready to detect language','line_number':640,'multiline':False]['text':' Only perform language detection conditionally','line_number':643,'multiline':False]['text':' make sure to not detect language for non-user visible documents','line_number':646,'multiline':False]['text':' only run on files with plaintext language set or no language set at all','line_number':647,'multiline':False]['text':' only run if this particular file doesn't have an extension','line_number':648,'multiline':False]['text':' return early when the model is invalid','line_number':656,'multiline':False]['text':' We go through the text file service to make','line_number':659,'multiline':False]['text':' sure this kind of `resolve` is properly','line_number':660,'multiline':False]['text':' running in sequence with any other running','line_number':661,'multiline':False]['text':' `resolve` if any, including subsequent runs','line_number':662,'multiline':False]['text':' that are triggered right after.','line_number':663,'multiline':False]['text':'#endregion','line_number':671,'multiline':False]['text':'#region Dirty','line_number':673,'multiline':False]['text':' only resolved models can be marked dirty','line_number':685,'multiline':False]['text':' Track dirty state and version id','line_number':688,'multiline':False]['text':' Emit as Event if dirty changed','line_number':692,'multiline':False]['text':' Return function to revert this call','line_number':713,'multiline':False]['text':'#endregion','line_number':722,'multiline':False]['text':'#region Save','line_number':724,'multiline':False]['text':' if model is readonly we do not attempt to save at all','line_number':734,'multiline':False]['text':' if model is in save conflict or error, do not save unless save reason is explicit','line_number':743,'multiline':False]['text':' Actually do save and log','line_number':746,'multiline':False]['text':' Return early if saved from within save participant to break recursion','line_number':762,'multiline':False]['text':'','line_number':763,'multiline':False]['text':' Scenario: a save participant triggers a save() on the model','line_number':764,'multiline':False]['text':' Lookup any running save for this versionId and return it if found','line_number':771,'multiline':False]['text':'','line_number':772,'multiline':False]['text':' Scenario: user invoked the save action multiple times quickly for the same contents','line_number':773,'multiline':False]['text':'           while the save was not yet finished to disk','line_number':774,'multiline':False]['text':'','line_number':775,'multiline':False]['text':' Return early if not dirty (unless forced)','line_number':782,'multiline':False]['text':'','line_number':783,'multiline':False]['text':' Scenario: user invoked save action even though the model is not dirty','line_number':784,'multiline':False]['text':' Return if currently saving by storing this save request as the next save that should happen.','line_number':791,'multiline':False]['text':' Never ever must 2 saves execute at the same time because this can lead to dirty writes and race conditions.','line_number':792,'multiline':False]['text':'','line_number':793,'multiline':False]['text':' Scenario A: auto save was triggered and is currently busy saving to disk. this takes long enough that another auto save','line_number':794,'multiline':False]['text':'             kicks in.','line_number':795,'multiline':False]['text':' Scenario B: save is very slow (e.g. network share) and the user manages to change the buffer and trigger another save','line_number':796,'multiline':False]['text':'             while the first save has not returned yet.','line_number':797,'multiline':False]['text':'','line_number':798,'multiline':False]['text':' Indicate to the save sequentializer that we want to','line_number':802,'multiline':False]['text':' cancel the running operation so that ours can run','line_number':803,'multiline':False]['text':' before the running one finishes.','line_number':804,'multiline':False]['text':' Currently this will try to cancel running save','line_number':805,'multiline':False]['text':' participants but never a running save.','line_number':806,'multiline':False]['text':' Queue this as the upcoming save and return','line_number':809,'multiline':False]['text':' Push all edit operations to the undo stack so that the user has a chance to','line_number':813,'multiline':False]['text':' Ctrl+Z back to the saved version.','line_number':814,'multiline':False]['text':' A save participant can still change the model now and since we are so close to saving','line_number':823,'multiline':False]['text':' we do not want to trigger another auto save or similar, so we block this','line_number':824,'multiline':False]['text':' In addition we update our version right after in case it changed because of a model change','line_number':825,'multiline':False]['text':'','line_number':826,'multiline':False]['text':' Save participants can also be skipped through API.','line_number':827,'multiline':False]['text':' Measure the time it took from the last undo/redo operation to this save. If this','line_number':831,'multiline':False]['text':' time is below `UNDO_REDO_SAVE_PARTICIPANTS_THROTTLE_THRESHOLD`, we make sure to','line_number':832,'multiline':False]['text':' delay the save participant for the remaining time if the reason is auto save.','line_number':833,'multiline':False]['text':'','line_number':834,'multiline':False]['text':' This fixes the following issue:','line_number':835,'multiline':False]['text':' - the user has configured auto save with delay of 100ms or shorter','line_number':836,'multiline':False]['text':' - the user has a save participant enabled that modifies the file on each save','line_number':837,'multiline':False]['text':' - the user types into the file and the file gets saved','line_number':838,'multiline':False]['text':' - the user triggers undo operation','line_number':839,'multiline':False]['text':' - this will undo the save participant change but trigger the save participant right after','line_number':840,'multiline':False]['text':' - the user has no chance to undo over the save participant','line_number':841,'multiline':False]['text':'','line_number':842,'multiline':False]['text':' Reported as: https://github.com/microsoft/vscode/issues/102542','line_number':843,'multiline':False]['text':' Run save participants unless save was cancelled meanwhile','line_number':851,'multiline':False]['text':' It is possible that a subsequent save is cancelling this','line_number':865,'multiline':False]['text':' running save. As such we return early when we detect that','line_number':866,'multiline':False]['text':' However, we do not pass the token into the file service','line_number':867,'multiline':False]['text':' because that is an atomic operation currently without','line_number':868,'multiline':False]['text':' cancellation support, so we dispose the cancellation if','line_number':869,'multiline':False]['text':' it was not cancelled yet.','line_number':870,'multiline':False]['text':' We have to protect against being disposed at this point. It could be that the save() operation','line_number':877,'multiline':False]['text':' was triggerd followed by a dispose() operation right after without waiting. Typically we cannot','line_number':878,'multiline':False]['text':' be disposed if we are dirty, but if we are not dirty, save() and dispose() can still be triggered','line_number':879,'multiline':False]['text':' one after the other without waiting for the save() to complete. If we are disposed(), we risk','line_number':880,'multiline':False]['text':' saving contents to disk that are stale (see https://github.com/microsoft/vscode/issues/50942).','line_number':881,'multiline':False]['text':' To fix this issue, we will not store the contents to disk when we got disposed.','line_number':882,'multiline':False]['text':' We require a resolved model from this point on, since we are about to write data to disk.','line_number':887,'multiline':False]['text':' update versionId with its new value (if pre-save changes happened)','line_number':892,'multiline':False]['text':' Clear error flag since we are trying to save again','line_number':895,'multiline':False]['text':' Save to Disk. We mark the save operation as currently running with','line_number':898,'multiline':False]['text':' the latest versionId because it might have changed from a save','line_number':899,'multiline':False]['text':' participant triggering','line_number':900,'multiline':False]['text':' Updated resolved stat with updated stat','line_number':924,'multiline':False]['text':' Update dirty state unless model has changed meanwhile','line_number':927,'multiline':False]['text':' Update orphan state given save was successful','line_number':935,'multiline':False]['text':' Emit Save Event','line_number':938,'multiline':False]['text':' Return early if the save() call was made asking to','line_number':945,'multiline':False]['text':' handle the save error itself.','line_number':946,'multiline':False]['text':' In any case of an error, we mark the model as dirty to prevent data loss','line_number':951,'multiline':False]['text':' It could be possible that the write corrupted the file on disk (e.g. when','line_number':952,'multiline':False]['text':' an error happened after truncating the file) and as such we want to preserve','line_number':953,'multiline':False]['text':' the model contents to prevent data loss.','line_number':954,'multiline':False]['text':' Flag as error state in the model','line_number':957,'multiline':False]['text':' Look out for a save conflict','line_number':960,'multiline':False]['text':' Show to user','line_number':965,'multiline':False]['text':' Emit as event','line_number':968,'multiline':False]['text':' we remember the models alternate version id to remember when the version','line_number':973,'multiline':False]['text':' of the model matches with the saved version on disk. we need to keep this','line_number':974,'multiline':False]['text':' in order to find out if the model changed back to a saved version (e.g.','line_number':975,'multiline':False]['text':' when undoing long enough to reach to a version that is saved and then to','line_number':976,'multiline':False]['text':' clear the dirty flag)','line_number':977,'multiline':False]['text':' First resolve - just take','line_number':986,'multiline':False]['text':' Subsequent resolve - make sure that we only assign it if the mtime is equal or has advanced.','line_number':991,'multiline':False]['text':' This prevents race conditions from resolving and saving. If a save comes in late after a revert','line_number':992,'multiline':False]['text':' was called, the mtime could be out of sync.','line_number':993,'multiline':False]['text':' Signal that the readonly state changed','line_number':998,'multiline':False]['text':'#endregion','line_number':1004,'multiline':False]['text':'#region Encoding','line_number':1037,'multiline':False]['text':' This is a bit of a hack but there is a narrow case where','line_number':1041,'multiline':False]['text':' per-language configured encodings are not working:','line_number':1042,'multiline':False]['text':'','line_number':1043,'multiline':False]['text':' On startup we may not yet have all languages resolved so','line_number':1044,'multiline':False]['text':' we pick a wrong encoding. We never used to re-apply the','line_number':1045,'multiline':False]['text':' encoding when the language was then resolved, because that','line_number':1046,'multiline':False]['text':' is an operation that is will have to fetch the contents','line_number':1047,'multiline':False]['text':' again from disk.','line_number':1048,'multiline':False]['text':'','line_number':1049,'multiline':False]['text':' To mitigate this issue, when we detect the model language','line_number':1050,'multiline':False]['text':' changes, we see if there is a specific encoding configured','line_number':1051,'multiline':False]['text':' for the new language and apply it, only if the model is','line_number':1052,'multiline':False]['text':' not dirty and only if the encoding was not explicitly set.','line_number':1053,'multiline':False]['text':'','line_number':1054,'multiline':False]['text':' (see https://github.com/microsoft/vscode/issues/127936)','line_number':1055,'multiline':False]['text':' never change the user's choice of encoding','line_number':1060,'multiline':False]['text':' never change an encoding that we can detect 100% via BOMs','line_number':1066,'multiline':False]['text':' return early if encoding is invalid or did not change','line_number':1073,'multiline':False]['text':' return early to prevent accident saves in this case','line_number':1079,'multiline':False]['text':' Re-open with new encoding','line_number':1084,'multiline':False]['text':' Remember that an explicit encoding was set','line_number':1092,'multiline':False]['text':' Encode: Save with encoding','line_number':1100,'multiline':False]['text':' Save','line_number':1104,'multiline':False]['text':' needs to increment because we change the model potentially','line_number':1106,'multiline':False]['text':' Decode: Resolve with encoding','line_number':1115,'multiline':False]['text':' return early if the encoding is already the same','line_number':1118,'multiline':False]['text':' Emit','line_number':1138,'multiline':False]['text':' return early if the encoding is already the same','line_number':1144,'multiline':False]['text':' also return if we don't have a preferred encoding but the content encoding is already the same','line_number':1148,'multiline':False]['text':'#endregion','line_number':1158,'multiline':False]