['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
	 * Signals no specific capability for the working copy.
	 ','line_number':14,'multiline':True]['text':'*
	 * Signals that the working copy requires
	 * additional input when saving, e.g. an
	 * associated path to save to.
	 ','line_number':19,'multiline':True]['text':'*
	 * The working copy will not indicate that
	 * it is dirty and unsaved content will be
	 * discarded without prompting if closed.
	 ','line_number':26,'multiline':True]['text':'*
 * Data to be associated with working copy backups. Use
 * `IWorkingCopyBackupService.resolve(workingCopy)` to
 * retrieve the backup when loading the working copy.
 ','line_number':34,'multiline':True]['text':'*
	 * Any serializable metadata to be associated with the backup.
	 ','line_number':41,'multiline':True]['text':'*
	 * The actual snapshot of the contents of the working copy at
	 * the time the backup was made.
	 ','line_number':46,'multiline':True]['text':'*
 * Working copy backup metadata that can be associated
 * with the backup.
 *
 * Some properties may be reserved as outlined here and
 * cannot be used.
 ','line_number':53,'multiline':True]['text':'*
	 * Any property needs to be serializable through JSON.
	 ','line_number':62,'multiline':True]['text':'*
	 * `typeId` is a reserved property that cannot be used
	 * as backup metadata.
	 ','line_number':67,'multiline':True]['text':'*
 * @deprecated it is important to provide a type identifier
 * for working copies to enable all capabilities.
 ','line_number':74,'multiline':True]['text':'*
 * Every working copy has in common that it is identified by
 * a resource `URI` and a `typeId`. There can only be one
 * working copy registered with the same `URI` and `typeId`.
 ','line_number':80,'multiline':True]['text':'*
	 * The type identifier of the working copy for grouping
	 * working copies of the same domain together.
	 *
	 * There can only be one working copy for a given resource
	 * and type identifier.
	 ','line_number':87,'multiline':True]['text':'*
	 * The resource of the working copy must be unique for
	 * working copies of the same `typeId`.
	 ','line_number':96,'multiline':True]['text':'*
	 * The reason why the working copy was saved.
	 ','line_number':105,'multiline':True]['text':'*
	 * The source of the working copy save request.
	 ','line_number':110,'multiline':True]['text':'*
 * A working copy is an abstract concept to unify handling of
 * data that can be worked on (e.g. edited) in an editor.
 *
 *
 * A working copy resource may be the backing store of the data
 * (e.g. a file on disk), but that is not a requirement. If
 * your working copy is file based, consider to use the
 * `IFileWorkingCopy` instead that simplifies a lot of things
 * when working with file based working copies.
 ','line_number':116,'multiline':True]['text':'*
	 * Human readable name of the working copy.
	 ','line_number':129,'multiline':True]['text':'*
	 * The capabilities of the working copy.
	 ','line_number':134,'multiline':True]['text':'#region Events','line_number':140,'multiline':False]['text':'*
	 * Used by the workbench to signal if the working copy
	 * is dirty or not. Typically a working copy is dirty
	 * once changed until saved or reverted.
	 ','line_number':142,'multiline':True]['text':'*
	 * Used by the workbench e.g. to trigger auto-save
	 * (unless this working copy is untitled) and backups.
	 ','line_number':149,'multiline':True]['text':'*
	 * Used by the workbench e.g. to track local history
	 * (unless this working copy is untitled).
	 ','line_number':155,'multiline':True]['text':'#endregion','line_number':161,'multiline':False]['text':'#region Dirty Tracking','line_number':164,'multiline':False]['text':'*
	 * Indicates that the file has unsaved changes
	 * and should confirm before closing.
	 ','line_number':166,'multiline':True]['text':'*
	 * Indicates that the file has unsaved changes.
	 * Used for backup tracking and accounts for
	 * working copies that are never dirty e.g.
	 * scratchpads.
	 ','line_number':172,'multiline':True]['text':'#endregion','line_number':180,'multiline':False]['text':'#region Save / Backup','line_number':183,'multiline':False]['text':'*
	 * The delay in milliseconds to wait before triggering
	 * a backup after the content of the model has changed.
	 *
	 * If not configured, a sensible default will be taken
	 * based on user settings.
	 ','line_number':185,'multiline':True]['text':'*
	 * The workbench may call this method often after it receives
	 * the `onDidChangeContent` event for the working copy. The motivation
	 * is to allow to quit VSCode with dirty working copies present.
	 *
	 * Providers of working copies should use `IWorkingCopyBackupService.resolve(workingCopy)`
	 * to retrieve the backup metadata associated when loading the working copy.
	 *
	 * @param token support for cancellation
	 ','line_number':194,'multiline':True]['text':'*
	 * Asks the working copy to save. If the working copy was dirty, it is
	 * expected to be non-dirty after this operation has finished.
	 *
	 * @returns `true` if the operation was successful and `false` otherwise.
	 ','line_number':206,'multiline':True]['text':'*
	 * Asks the working copy to revert. If the working copy was dirty, it is
	 * expected to be non-dirty after this operation has finished.
	 ','line_number':214,'multiline':True]['text':'#endregion','line_number':220,'multiline':False]