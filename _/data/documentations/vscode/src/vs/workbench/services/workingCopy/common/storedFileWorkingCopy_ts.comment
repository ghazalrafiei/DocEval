['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Stored file specific working copy model factory.
 ','line_number':33,'multiline':True]['text':'*
 * The underlying model of a stored file working copy provides some
 * methods for the stored file working copy to function. The model is
 * typically only available after the working copy has been
 * resolved via it's `resolve()` method.
 ','line_number':38,'multiline':True]['text':'*
	 * A version ID of the model. If a `onDidChangeContent` is fired
	 * from the model and the last known saved `versionId` matches
	 * with the `model.versionId`, the stored file working copy will
	 * discard any dirty state.
	 *
	 * A use case is the following:
	 * - a stored file working copy gets edited and thus dirty
	 * - the user triggers undo to revert the changes
	 * - at this point the `versionId` should match the one we had saved
	 *
	 * This requires the model to be aware of undo/redo operations.
	 ','line_number':48,'multiline':True]['text':'*
	 * Close the current undo-redo element. This offers a way
	 * to create an undo/redo stop point.
	 *
	 * This method may for example be called right before the
	 * save is triggered so that the user can always undo back
	 * to the state before saving.
	 ','line_number':63,'multiline':True]['text':'*
	 * Optionally allows a stored file working copy model to
	 * implement the `save` method. This allows to implement
	 * a more efficient save logic compared to the default
	 * which is to ask the model for a `snapshot` and then
	 * writing that to the model's resource.
	 ','line_number':73,'multiline':True]['text':'*
	 * Flag that indicates that this event was generated while undoing.
	 ','line_number':85,'multiline':True]['text':'*
	 * Flag that indicates that this event was generated while redoing.
	 ','line_number':90,'multiline':True]['text':'*
 * A stored file based `IWorkingCopy` is backed by a `URI` from a
 * known file system provider. Given this assumption, a lot
 * of functionality can be built on top, such as saving in
 * a secure way to prevent data loss.
 ','line_number':96,'multiline':True]['text':'*
	 * An event for when a stored file working copy was resolved.
	 ','line_number':104,'multiline':True]['text':'*
	 * An event for when a stored file working copy was saved successfully.
	 ','line_number':109,'multiline':True]['text':'*
	 * An event indicating that a stored file working copy save operation failed.
	 ','line_number':114,'multiline':True]['text':'*
	 * An event for when the readonly state of the stored file working copy changes.
	 ','line_number':119,'multiline':True]['text':'*
	 * Resolves a stored file working copy.
	 ','line_number':124,'multiline':True]['text':'*
	 * Explicitly sets the working copy to be modified.
	 ','line_number':129,'multiline':True]['text':'*
	 * Whether the stored file working copy is in the provided `state`
	 * or not.
	 *
	 * @param state the `FileWorkingCopyState` to check on.
	 ','line_number':134,'multiline':True]['text':'*
	 * Allows to join a state change away from the provided `state`.
	 *
	 * @param state currently only `FileWorkingCopyState.PENDING_SAVE`
	 * can be awaited on to resolve.
	 ','line_number':142,'multiline':True]['text':'*
	 * Whether we have a resolved model or not.
	 ','line_number':150,'multiline':True]['text':'*
	 * Whether the stored file working copy is readonly or not.
	 ','line_number':155,'multiline':True]['text':'*
	 * A resolved stored file working copy has a resolved model.
	 ','line_number':163,'multiline':True]['text':'*
 * States the stored file working copy can be in.
 ','line_number':169,'multiline':True]['text':'*
	 * A stored file working copy is saved.
	 ','line_number':174,'multiline':True]['text':'*
	 * A stored file working copy is dirty.
	 ','line_number':179,'multiline':True]['text':'*
	 * A stored file working copy is currently being saved but
	 * this operation has not completed yet.
	 ','line_number':184,'multiline':True]['text':'*
	 * A stored file working copy is in conflict mode when changes
	 * cannot be saved because the underlying file has changed.
	 * Stored file working copies in conflict mode are always dirty.
	 ','line_number':190,'multiline':True]['text':'*
	 * A stored file working copy is in orphan state when the underlying
	 * file has been deleted.
	 ','line_number':197,'multiline':True]['text':'*
	 * Any error that happens during a save that is not causing
	 * the `StoredFileWorkingCopyState.CONFLICT` state.
	 * Stored file working copies in error mode are always dirty.
	 ','line_number':203,'multiline':True]['text':'*
	 * Save the stored file working copy with an attempt to unlock it.
	 ','line_number':213,'multiline':True]['text':'*
	 * Save the stored file working copy with elevated privileges.
	 *
	 * Note: This may not be supported in all environments.
	 ','line_number':218,'multiline':True]['text':'*
	 * Allows to write to a stored file working copy even if it has been
	 * modified on disk. This should only be triggered from an
	 * explicit user action.
	 ','line_number':225,'multiline':True]['text':'*
	 * If set, will bubble up the stored file working copy save error to
	 * the caller instead of handling it.
	 ','line_number':232,'multiline':True]['text':'*
	 * Resolves the working copy in a safe way from an external
	 * working copy manager that can make sure multiple parallel
	 * resolves execute properly.
	 ','line_number':241,'multiline':True]['text':'*
	 * The contents to use for the stored file working copy if known. If not
	 * provided, the contents will be retrieved from the underlying
	 * resource or backup if present.
	 *
	 * If contents are provided, the stored file working copy will be marked
	 * as dirty right from the beginning.
	 ','line_number':251,'multiline':True]['text':'*
	 * Go to disk bypassing any cache of the stored file working copy if any.
	 ','line_number':261,'multiline':True]['text':'*
	 * If provided, the size of the file will be checked against the limits
	 * and an error will be thrown if any limit is exceeded.
	 ','line_number':266,'multiline':True]['text':'*
 * Metadata associated with a stored file working copy backup.
 ','line_number':273,'multiline':True]['text':'*
	 * The resolved stat from the save operation.
	 ','line_number':286,'multiline':True]['text':'#region events','line_number':305,'multiline':False]['text':'#endregion','line_number':328,'multiline':False]['text':' Make known to working copy service','line_number':349,'multiline':False]['text':'#region Dirty','line_number':359,'multiline':False]['text':' stored file working copy tracks modified via dirty','line_number':369,'multiline':False]['text':' only resolved working copies can be marked dirty','line_number':374,'multiline':False]['text':' Track dirty state and version id','line_number':377,'multiline':False]['text':' Emit as Event if dirty changed','line_number':381,'multiline':False]['text':' we remember the models alternate version id to remember when the version','line_number':398,'multiline':False]['text':' of the model matches with the saved version on disk. we need to keep this','line_number':399,'multiline':False]['text':' in order to find out if the model changed back to a saved version (e.g.','line_number':400,'multiline':False]['text':' when undoing long enough to reach to a version that is saved and then to','line_number':401,'multiline':False]['text':' clear the dirty flag)','line_number':402,'multiline':False]['text':' Return function to revert this call','line_number':410,'multiline':False]['text':'#endregion','line_number':419,'multiline':False]['text':'#region Resolve','line_number':421,'multiline':False]['text':' Return early if we are disposed','line_number':432,'multiline':False]['text':' Unless there are explicit contents provided, it is important that we do not','line_number':439,'multiline':False]['text':' resolve a working copy that is dirty or is in the process of saving to prevent','line_number':440,'multiline':False]['text':' data loss.','line_number':441,'multiline':False]['text':' First check if we have contents to use for the working copy','line_number':453,'multiline':False]['text':' Second, check if we have a backup to resolve from (only for new working copies)','line_number':458,'multiline':False]['text':' Finally, resolve from file resource','line_number':467,'multiline':False]['text':' Try to resolve metdata from disk','line_number':474,'multiline':False]['text':' Clear orphaned state when resolving was successful','line_number':486,'multiline':False]['text':' Put some fallback values in error case','line_number':490,'multiline':False]['text':' Apply orphaned state based on error code','line_number':496,'multiline':False]['text':' Resolve with buffer','line_number':500,'multiline':False]['text':' dirty (resolved from buffer) ','line_number':511,'multiline':True]['text':' Resolve backup if any','line_number':516,'multiline':False]['text':' Abort if someone else managed to resolve the working copy by now','line_number':519,'multiline':False]['text':' imply that resolving has happened in another operation','line_number':524,'multiline':False]['text':' Try to resolve from backup if we have any','line_number':527,'multiline':False]['text':' Otherwise signal back that resolving did not happen','line_number':534,'multiline':False]['text':' Resolve with backup','line_number':541,'multiline':False]['text':' etag disabled if unknown!','line_number':548,'multiline':False]['text':' dirty (resolved from backup) ','line_number':552,'multiline':True]['text':' Restore orphaned flag based on state','line_number':554,'multiline':False]['text':' Decide on etag','line_number':565,'multiline':False]['text':' disable ETag if we enforce to read from disk','line_number':568,'multiline':False]['text':' otherwise respect etag to support caching','line_number':570,'multiline':False]['text':' Remember current version before doing any long running operation','line_number':573,'multiline':False]['text':' to ensure we are not changing a working copy that was changed','line_number':574,'multiline':False]['text':' meanwhile','line_number':575,'multiline':False]['text':' Resolve Content','line_number':578,'multiline':False]['text':' Clear orphaned state when resolving was successful','line_number':585,'multiline':False]['text':' Return early if the working copy content has changed','line_number':588,'multiline':False]['text':' meanwhile to prevent loosing any changes','line_number':589,'multiline':False]['text':' not dirty (resolved from file) ','line_number':596,'multiline':True]['text':' Apply orphaned state based on error code','line_number':600,'multiline':False]['text':' NotModified status is expected and can be handled gracefully','line_number':603,'multiline':False]['text':' if we are resolved. We still want to update our last resolved','line_number':604,'multiline':False]['text':' stat to e.g. detect changes to the file's readonly state','line_number':605,'multiline':False]['text':' Unless we are forced to read from the file, ignore when a working copy has','line_number':614,'multiline':False]['text':' been resolved once and the file was deleted meanwhile. Since we already have','line_number':615,'multiline':False]['text':' the working copy resolved, we can return to this state and update the orphaned','line_number':616,'multiline':False]['text':' flag to indicate that this working copy has no version on disk anymore.','line_number':617,'multiline':False]['text':' Otherwise bubble up the error','line_number':622,'multiline':False]['text':' Return early if we are disposed','line_number':630,'multiline':False]['text':' Update our resolved disk stat','line_number':637,'multiline':False]['text':' Update existing model if we had been resolved','line_number':653,'multiline':False]['text':' Create new model otherwise','line_number':658,'multiline':False]['text':' Update working copy dirty flag. This is very important to call','line_number':663,'multiline':False]['text':' in both cases of dirty or not because it conditionally updates','line_number':664,'multiline':False]['text':' the `savedVersionId` to determine the version when to consider','line_number':665,'multiline':False]['text':' the working copy as saved again (e.g. when undoing back to the','line_number':666,'multiline':False]['text':' saved state)','line_number':667,'multiline':False]['text':' Emit as event','line_number':670,'multiline':False]['text':' Create model and dispose it when we get disposed','line_number':677,'multiline':False]['text':' Model listeners','line_number':680,'multiline':False]['text':' Update model value in a block that ignores content change events for dirty tracking','line_number':689,'multiline':False]['text':' See https://github.com/microsoft/vscode/issues/30189','line_number':700,'multiline':False]['text':' This code has been extracted to a different method because it caused a memory leak','line_number':701,'multiline':False]['text':' where `value` was captured in the content change listener closure scope.','line_number':702,'multiline':False]['text':' Content Change','line_number':704,'multiline':False]['text':' Lifecycle','line_number':707,'multiline':False]['text':' In any case increment the version id because it tracks the content state of the model at all times','line_number':714,'multiline':False]['text':' Remember when the user changed the model through a undo/redo operation.','line_number':718,'multiline':False]['text':' We need this information to throttle save participants to fix','line_number':719,'multiline':False]['text':' https://github.com/microsoft/vscode/issues/102542','line_number':720,'multiline':False]['text':' We mark check for a dirty-state change upon model content change, unless:','line_number':725,'multiline':False]['text':' - explicitly instructed to ignore it (e.g. from model.resolve())','line_number':726,'multiline':False]['text':' - the model is readonly (in that case we never assume the change was done by the user)','line_number':727,'multiline':False]['text':' The contents changed as a matter of Undo and the version reached matches the saved one','line_number':730,'multiline':False]['text':' In this case we clear the dirty flag and emit a SAVED event to indicate this state.','line_number':731,'multiline':False]['text':' Clear flags','line_number':735,'multiline':False]['text':' Emit revert event if we were dirty','line_number':739,'multiline':False]['text':' Otherwise the content has changed and we signal this as becoming dirty','line_number':745,'multiline':False]['text':' Mark as dirty','line_number':749,'multiline':False]['text':' Emit as event','line_number':754,'multiline':False]['text':' return early when the working copy is invalid','line_number':760,'multiline':False]['text':' We go through the resolver to make','line_number':763,'multiline':False]['text':' sure this kind of `resolve` is properly','line_number':764,'multiline':False]['text':' running in sequence with any other running','line_number':765,'multiline':False]['text':' `resolve` if any, including subsequent runs','line_number':766,'multiline':False]['text':' that are triggered right after.','line_number':767,'multiline':False]['text':'#endregion','line_number':774,'multiline':False]['text':'#region Backup','line_number':776,'multiline':False]['text':' Fill in metadata if we are resolved','line_number':784,'multiline':False]['text':' Fill in content if we are resolved','line_number':796,'multiline':False]['text':'#endregion','line_number':805,'multiline':False]['text':'#region Save','line_number':807,'multiline':False]['text':' if working copy is readonly we do not attempt to save at all','line_number':826,'multiline':False]['text':' if working copy is in save conflict or error, do not save unless save reason is explicit','line_number':835,'multiline':False]['text':' Actually do save','line_number':838,'multiline':False]['text':' Return early if saved from within save participant to break recursion','line_number':854,'multiline':False]['text':'','line_number':855,'multiline':False]['text':' Scenario: a save participant triggers a save() on the working copy','line_number':856,'multiline':False]['text':' Lookup any running save for this versionId and return it if found','line_number':863,'multiline':False]['text':'','line_number':864,'multiline':False]['text':' Scenario: user invoked the save action multiple times quickly for the same contents','line_number':865,'multiline':False]['text':'           while the save was not yet finished to disk','line_number':866,'multiline':False]['text':'','line_number':867,'multiline':False]['text':' Return early if not dirty (unless forced)','line_number':874,'multiline':False]['text':'','line_number':875,'multiline':False]['text':' Scenario: user invoked save action even though the working copy is not dirty','line_number':876,'multiline':False]['text':' Return if currently saving by storing this save request as the next save that should happen.','line_number':883,'multiline':False]['text':' Never ever must 2 saves execute at the same time because this can lead to dirty writes and race conditions.','line_number':884,'multiline':False]['text':'','line_number':885,'multiline':False]['text':' Scenario A: auto save was triggered and is currently busy saving to disk. this takes long enough that another auto save','line_number':886,'multiline':False]['text':'             kicks in.','line_number':887,'multiline':False]['text':' Scenario B: save is very slow (e.g. network share) and the user manages to change the working copy and trigger another save','line_number':888,'multiline':False]['text':'             while the first save has not returned yet.','line_number':889,'multiline':False]['text':'','line_number':890,'multiline':False]['text':' Indicate to the save sequentializer that we want to','line_number':894,'multiline':False]['text':' cancel the running operation so that ours can run','line_number':895,'multiline':False]['text':' before the running one finishes.','line_number':896,'multiline':False]['text':' Currently this will try to cancel running save','line_number':897,'multiline':False]['text':' participants and running snapshots from the','line_number':898,'multiline':False]['text':' save operation, but not the actual save which does','line_number':899,'multiline':False]['text':' not support cancellation yet.','line_number':900,'multiline':False]['text':' Queue this as the upcoming save and return','line_number':903,'multiline':False]['text':' Push all edit operations to the undo stack so that the user has a chance to','line_number':907,'multiline':False]['text':' Ctrl+Z back to the saved version.','line_number':908,'multiline':False]['text':' A save participant can still change the working copy now','line_number':917,'multiline':False]['text':' and since we are so close to saving we do not want to trigger','line_number':918,'multiline':False]['text':' another auto save or similar, so we block this','line_number':919,'multiline':False]['text':' In addition we update our version right after in case it changed','line_number':920,'multiline':False]['text':' because of a working copy change','line_number':921,'multiline':False]['text':' Save participants can also be skipped through API.','line_number':922,'multiline':False]['text':' Measure the time it took from the last undo/redo operation to this save. If this','line_number':926,'multiline':False]['text':' time is below `UNDO_REDO_SAVE_PARTICIPANTS_THROTTLE_THRESHOLD`, we make sure to','line_number':927,'multiline':False]['text':' delay the save participant for the remaining time if the reason is auto save.','line_number':928,'multiline':False]['text':'','line_number':929,'multiline':False]['text':' This fixes the following issue:','line_number':930,'multiline':False]['text':' - the user has configured auto save with delay of 100ms or shorter','line_number':931,'multiline':False]['text':' - the user has a save participant enabled that modifies the file on each save','line_number':932,'multiline':False]['text':' - the user types into the file and the file gets saved','line_number':933,'multiline':False]['text':' - the user triggers undo operation','line_number':934,'multiline':False]['text':' - this will undo the save participant change but trigger the save participant right after','line_number':935,'multiline':False]['text':' - the user has no chance to undo over the save participant','line_number':936,'multiline':False]['text':'','line_number':937,'multiline':False]['text':' Reported as: https://github.com/microsoft/vscode/issues/102542','line_number':938,'multiline':False]['text':' Run save participants unless save was cancelled meanwhile','line_number':946,'multiline':False]['text':' It is possible that a subsequent save is cancelling this','line_number':960,'multiline':False]['text':' running save. As such we return early when we detect that.','line_number':961,'multiline':False]['text':' We have to protect against being disposed at this point. It could be that the save() operation','line_number':966,'multiline':False]['text':' was triggerd followed by a dispose() operation right after without waiting. Typically we cannot','line_number':967,'multiline':False]['text':' be disposed if we are dirty, but if we are not dirty, save() and dispose() can still be triggered','line_number':968,'multiline':False]['text':' one after the other without waiting for the save() to complete. If we are disposed(), we risk','line_number':969,'multiline':False]['text':' saving contents to disk that are stale (see https://github.com/microsoft/vscode/issues/50942).','line_number':970,'multiline':False]['text':' To fix this issue, we will not store the contents to disk when we got disposed.','line_number':971,'multiline':False]['text':' We require a resolved working copy from this point on, since we are about to write data to disk.','line_number':976,'multiline':False]['text':' update versionId with its new value (if pre-save changes happened)','line_number':981,'multiline':False]['text':' Clear error flag since we are trying to save again','line_number':984,'multiline':False]['text':' Save to Disk. We mark the save operation as currently running with','line_number':987,'multiline':False]['text':' the latest versionId because it might have changed from a save','line_number':988,'multiline':False]['text':' participant triggering','line_number':989,'multiline':False]['text':' Delegate to working copy model save method if any','line_number':1003,'multiline':False]['text':' Otherwise ask for a snapshot and save via file services','line_number':1008,'multiline':False]['text':' Snapshot working copy model contents','line_number':1011,'multiline':False]['text':' It is possible that a subsequent save is cancelling this','line_number':1014,'multiline':False]['text':' running save. As such we return early when we detect that','line_number':1015,'multiline':False]['text':' However, we do not pass the token into the file service','line_number':1016,'multiline':False]['text':' because that is an atomic operation currently without','line_number':1017,'multiline':False]['text':' cancellation support, so we dispose the cancellation if','line_number':1018,'multiline':False]['text':' it was not cancelled yet.','line_number':1019,'multiline':False]['text':' Write them to disk','line_number':1026,'multiline':False]['text':' Updated resolved stat with updated stat','line_number':1044,'multiline':False]['text':' Update dirty state unless working copy has changed meanwhile','line_number':1047,'multiline':False]['text':' Update orphan state given save was successful','line_number':1055,'multiline':False]['text':' Emit Save Event','line_number':1058,'multiline':False]['text':' Return early if the save() call was made asking to','line_number':1065,'multiline':False]['text':' handle the save error itself.','line_number':1066,'multiline':False]['text':' In any case of an error, we mark the working copy as dirty to prevent data loss','line_number':1071,'multiline':False]['text':' It could be possible that the write corrupted the file on disk (e.g. when','line_number':1072,'multiline':False]['text':' an error happened after truncating the file) and as such we want to preserve','line_number':1073,'multiline':False]['text':' the working copy contents to prevent data loss.','line_number':1074,'multiline':False]['text':' Flag as error state','line_number':1077,'multiline':False]['text':' Look out for a save conflict','line_number':1080,'multiline':False]['text':' Show save error to user for handling','line_number':1085,'multiline':False]['text':' Emit as event','line_number':1088,'multiline':False]['text':' Dirty write prevention','line_number':1098,'multiline':False]['text':' Any other save error','line_number':1106,'multiline':False]['text':' Error with Actions','line_number':1113,'multiline':False]['text':' Save Elevated','line_number':1118,'multiline':False]['text':' Unlock','line_number':1131,'multiline':False]['text':' Retry','line_number':1136,'multiline':False]['text':' Save As','line_number':1141,'multiline':False]['text':' show error again given the operation failed','line_number':1150,'multiline':False]['text':' Discard','line_number':1156,'multiline':False]['text':' Message','line_number':1159,'multiline':False]['text':' Show to the user as notification','line_number':1177,'multiline':False]['text':' Remove automatically when we get saved/reverted','line_number':1180,'multiline':False]['text':' First resolve - just take','line_number':1188,'multiline':False]['text':' Subsequent resolve - make sure that we only assign it if the mtime','line_number':1193,'multiline':False]['text':' is equal or has advanced.','line_number':1194,'multiline':False]['text':' This prevents race conditions from resolving and saving. If a save','line_number':1195,'multiline':False]['text':' comes in late after a revert was called, the mtime could be out of','line_number':1196,'multiline':False]['text':' sync.','line_number':1197,'multiline':False]['text':' Signal that the readonly state changed','line_number':1202,'multiline':False]['text':'#endregion','line_number':1208,'multiline':False]['text':'#region Revert','line_number':1210,'multiline':False]['text':' ignore if not resolved or not dirty and not enforced','line_number':1214,'multiline':False]['text':' Unset flags','line_number':1219,'multiline':False]['text':' Force read from disk unless reverting soft','line_number':1223,'multiline':False]['text':' FileNotFound means the file got deleted meanwhile, so ignore it','line_number':1230,'multiline':False]['text':' Set flags back to previous values, we are still dirty if revert failed','line_number':1233,'multiline':False]['text':' Emit file change event','line_number':1241,'multiline':False]['text':' Emit dirty change event','line_number':1244,'multiline':False]['text':'#endregion','line_number':1250,'multiline':False]['text':'#region State','line_number':1252,'multiline':False]['text':'#endregion','line_number':1278,'multiline':False]['text':'#region Utilities','line_number':1280,'multiline':False]['text':'#endregion','line_number':1290,'multiline':False]['text':'#region Dispose','line_number':1292,'multiline':False]['text':' State','line_number':1297,'multiline':False]['text':' Free up model for GC','line_number':1301,'multiline':False]['text':'#endregion','line_number':1307,'multiline':False]