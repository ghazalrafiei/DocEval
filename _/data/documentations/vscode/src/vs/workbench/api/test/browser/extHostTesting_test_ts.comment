['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' const assertTreeListEqual = (a: ReadonlyArray<TestItem>, b: ReadonlyArray<TestItem>) => {','line_number':56,'multiline':False]['text':' 	assert.strictEqual(a.length, b.length, `expected a.length == n.length`);','line_number':57,'multiline':False]['text':' 	a.forEach((_, i) => assertTreesEqual(a[i], b[i]));','line_number':58,'multiline':False]['text':' };','line_number':59,'multiline':False]['text':' class TestMirroredCollection extends MirroredTestCollection {','line_number':61,'multiline':False]['text':' 	public changeEvent!: TestChangeEvent;','line_number':62,'multiline':False]['text':' 	constructor() {','line_number':64,'multiline':False]['text':' 		super();','line_number':65,'multiline':False]['text':' 		this.onDidChangeTests(evt => this.changeEvent = evt);','line_number':66,'multiline':False]['text':' 	}','line_number':67,'multiline':False]['text':' 	public get length() {','line_number':69,'multiline':False]['text':' 		return this.items.size;','line_number':70,'multiline':False]['text':' 	}','line_number':71,'multiline':False]['text':' }','line_number':72,'multiline':False]['text':' don't clear during testing ','line_number':105,'multiline':True]['text':' item a ','line_number':176,'multiline':True]['text':' sends on replace even if it's a no-op','line_number':435,'multiline':False]['text':' sends on a child replacement','line_number':445,'multiline':False]['text':' todo@connor4312: re-renable when we figure out what observing looks like we async children','line_number':462,'multiline':False]['text':' 	let m: TestMirroredCollection;','line_number':463,'multiline':False]['text':' 	setup(() => m = new TestMirroredCollection());','line_number':464,'multiline':False]['text':' 	test('mirrors creation of the root', () => {','line_number':466,'multiline':False]['text':' 		const tests = testStubs.nested();','line_number':467,'multiline':False]['text':' 		single.addRoot(tests, 'pid');','line_number':468,'multiline':False]['text':' 		single.expand(single.root.id, Infinity);','line_number':469,'multiline':False]['text':' 		m.apply(single.collectDiff());','line_number':470,'multiline':False]['text':' 		assertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);','line_number':471,'multiline':False]['text':' 		assert.strictEqual(m.length, single.itemToInternal.size);','line_number':472,'multiline':False]['text':' 	});','line_number':473,'multiline':False]['text':' 	test('mirrors node deletion', () => {','line_number':475,'multiline':False]['text':' 		const tests = testStubs.nested();','line_number':476,'multiline':False]['text':' 		single.addRoot(tests, 'pid');','line_number':477,'multiline':False]['text':' 		m.apply(single.collectDiff());','line_number':478,'multiline':False]['text':' 		single.expand(single.root.id, Infinity);','line_number':479,'multiline':False]['text':' 		tests.children!.splice(0, 1);','line_number':480,'multiline':False]['text':' 		single.onItemChange(tests, 'pid');','line_number':481,'multiline':False]['text':' 		single.expand(single.root.id, Infinity);','line_number':482,'multiline':False]['text':' 		m.apply(single.collectDiff());','line_number':483,'multiline':False]['text':' 		assertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);','line_number':485,'multiline':False]['text':' 		assert.strictEqual(m.length, single.itemToInternal.size);','line_number':486,'multiline':False]['text':' 	});','line_number':487,'multiline':False]['text':' 	test('mirrors node addition', () => {','line_number':489,'multiline':False]['text':' 		const tests = testStubs.nested();','line_number':490,'multiline':False]['text':' 		single.addRoot(tests, 'pid');','line_number':491,'multiline':False]['text':' 		m.apply(single.collectDiff());','line_number':492,'multiline':False]['text':' 		tests.children![0].children!.push(stubTest('ac'));','line_number':493,'multiline':False]['text':' 		single.onItemChange(tests, 'pid');','line_number':494,'multiline':False]['text':' 		m.apply(single.collectDiff());','line_number':495,'multiline':False]['text':' 		assertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);','line_number':497,'multiline':False]['text':' 		assert.strictEqual(m.length, single.itemToInternal.size);','line_number':498,'multiline':False]['text':' 	});','line_number':499,'multiline':False]['text':' 	test('mirrors node update', () => {','line_number':501,'multiline':False]['text':' 		const tests = testStubs.nested();','line_number':502,'multiline':False]['text':' 		single.addRoot(tests, 'pid');','line_number':503,'multiline':False]['text':' 		m.apply(single.collectDiff());','line_number':504,'multiline':False]['text':' 		tests.children![0].description = 'Hello world'; /* item a */','line_number':505,'multiline':False]['text':' 		single.onItemChange(tests, 'pid');','line_number':506,'multiline':False]['text':' 		m.apply(single.collectDiff());','line_number':507,'multiline':False]['text':' 		assertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);','line_number':509,'multiline':False]['text':' 	});','line_number':510,'multiline':False]['text':' 	suite('MirroredChangeCollector', () => {','line_number':512,'multiline':False]['text':' 		let tests = testStubs.nested();','line_number':513,'multiline':False]['text':' 		setup(() => {','line_number':514,'multiline':False]['text':' 			tests = testStubs.nested();','line_number':515,'multiline':False]['text':' 			single.addRoot(tests, 'pid');','line_number':516,'multiline':False]['text':' 			m.apply(single.collectDiff());','line_number':517,'multiline':False]['text':' 		});','line_number':518,'multiline':False]['text':' 		test('creates change for root', () => {','line_number':520,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.added, [','line_number':521,'multiline':False]['text':' 				tests,','line_number':522,'multiline':False]['text':' 				tests.children[0],','line_number':523,'multiline':False]['text':' 				tests.children![0].children![0],','line_number':524,'multiline':False]['text':' 				tests.children![0].children![1],','line_number':525,'multiline':False]['text':' 				tests.children[1],','line_number':526,'multiline':False]['text':' 			]);','line_number':527,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.removed, []);','line_number':528,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.updated, []);','line_number':529,'multiline':False]['text':' 		});','line_number':530,'multiline':False]['text':' 		test('creates change for delete', () => {','line_number':532,'multiline':False]['text':' 			const rm = tests.children.shift()!;','line_number':533,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':534,'multiline':False]['text':' 			m.apply(single.collectDiff());','line_number':535,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.added, []);','line_number':537,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.removed, [','line_number':538,'multiline':False]['text':' 				{ ...rm },','line_number':539,'multiline':False]['text':' 				{ ...rm.children![0] },','line_number':540,'multiline':False]['text':' 				{ ...rm.children![1] },','line_number':541,'multiline':False]['text':' 			]);','line_number':542,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.updated, []);','line_number':543,'multiline':False]['text':' 		});','line_number':544,'multiline':False]['text':' 		test('creates change for update', () => {','line_number':546,'multiline':False]['text':' 			tests.children[0].label = 'updated!';','line_number':547,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':548,'multiline':False]['text':' 			m.apply(single.collectDiff());','line_number':549,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.added, []);','line_number':551,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.removed, []);','line_number':552,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.updated, [tests.children[0]]);','line_number':553,'multiline':False]['text':' 		});','line_number':554,'multiline':False]['text':' 		test('is a no-op if a node is added and removed', () => {','line_number':556,'multiline':False]['text':' 			const nested = testStubs.nested('id2-');','line_number':557,'multiline':False]['text':' 			tests.children.push(nested);','line_number':558,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':559,'multiline':False]['text':' 			tests.children.pop();','line_number':560,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':561,'multiline':False]['text':' 			const previousEvent = m.changeEvent;','line_number':562,'multiline':False]['text':' 			m.apply(single.collectDiff());','line_number':563,'multiline':False]['text':' 			assert.strictEqual(m.changeEvent, previousEvent);','line_number':564,'multiline':False]['text':' 		});','line_number':565,'multiline':False]['text':' 		test('is a single-op if a node is added and changed', () => {','line_number':567,'multiline':False]['text':' 			const child = stubTest('c');','line_number':568,'multiline':False]['text':' 			tests.children.push(child);','line_number':569,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':570,'multiline':False]['text':' 			child.label = 'd';','line_number':571,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':572,'multiline':False]['text':' 			m.apply(single.collectDiff());','line_number':573,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.added, [child]);','line_number':575,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.removed, []);','line_number':576,'multiline':False]['text':' 			assertTreeListEqual(m.changeEvent.updated, []);','line_number':577,'multiline':False]['text':' 		});','line_number':578,'multiline':False]['text':' 		test('gets the common ancestor (1)', () => {','line_number':580,'multiline':False]['text':' 			tests.children![0].children![0].label = 'za';','line_number':581,'multiline':False]['text':' 			tests.children![0].children![1].label = 'zb';','line_number':582,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':583,'multiline':False]['text':' 			m.apply(single.collectDiff());','line_number':584,'multiline':False]['text':' 		});','line_number':586,'multiline':False]['text':' 		test('gets the common ancestor (2)', () => {','line_number':588,'multiline':False]['text':' 			tests.children![0].children![0].label = 'za';','line_number':589,'multiline':False]['text':' 			tests.children![1].label = 'ab';','line_number':590,'multiline':False]['text':' 			single.onItemChange(tests, 'pid');','line_number':591,'multiline':False]['text':' 			m.apply(single.collectDiff());','line_number':592,'multiline':False]['text':' 		});','line_number':593,'multiline':False]['text':' 	});','line_number':594,'multiline':False]['text':' should use test location as default','line_number':794,'multiline':False]['text':' empty default state:','line_number':918,'multiline':False]['text':' fires a change event:','line_number':923,'multiline':False]['text':' updates internal state:','line_number':940,'multiline':False]['text':' no-ops if equal','line_number':946,'multiline':False]