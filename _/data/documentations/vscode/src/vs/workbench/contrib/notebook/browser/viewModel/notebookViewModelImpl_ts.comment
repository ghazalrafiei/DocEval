['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' dispose the cell to release ref to the cell text document','line_number':221,'multiline':False]['text':' TODO@rebornix','line_number':264,'multiline':False]['text':'*
	 * Empty selection will be turned to `null`
	 ','line_number':364,'multiline':True]['text':' selection change from list view's `setFocus` and `setSelection` should always use `source: view` to prevent events breaking the list view focus/selection change transaction','line_number':386,'multiline':False]['text':' index into hidden','line_number':448,'multiline':False]['text':' the first line is not hidden','line_number':459,'multiline':False]['text':' ignore ranges contained in collapsed regions','line_number':462,'multiline':False]['text':' reuse the old ranges','line_number':467,'multiline':False]['text':' if (index < 0 || index >= this.length) {','line_number':506,'multiline':False]['text':' 	throw new Error(`Invalid index ${index}`);','line_number':507,'multiline':False]['text':' }','line_number':508,'multiline':False]['text':'*
	 * If this._viewCells[index] is visible then return index
	 ','line_number':533,'multiline':True]['text':' foldStart <= index, foldEnd < index','line_number':550,'multiline':False]['text':' foldEnd >= index','line_number':567,'multiline':False]['text':' node exists, the request is to delete => delete node','line_number':640,'multiline':False]['text':' (1) get ourselves an old node','line_number':668,'multiline':False]['text':' (2) remove the node from the tree (if it exists)','line_number':673,'multiline':False]['text':' (3) create a new node if necessary','line_number':680,'multiline':False]['text':' (4) initialize node','line_number':688,'multiline':False]['text':' exclusive ','line_number':766,'multiline':True]['text':'*
	 * Editor decorations across cells. For example, find decorations for multiple code cells
	 * The reason that we can't completely delegate this to CodeEditorWidget is most of the time, the editors for cells are not created yet but we already have decorations for them.
	 ','line_number':842,'multiline':True]['text':'#region Find','line_number':913,'multiline':False]['text':' filter based on options and editing state','line_number':928,'multiline':False]['text':' code cell, we only include its match if include input is enabled','line_number':932,'multiline':False]['text':' markup cell, it depends on the editing state','line_number':936,'multiline':False]['text':' editing, even if we includeMarkupPreview','line_number':938,'multiline':False]['text':' cell in preview mode, we should only include it if includeMarkupPreview is false but includeMarkupInput is true','line_number':941,'multiline':False]['text':' if includeMarkupPreview is true, then we should include the webview match result other than this','line_number':942,'multiline':False]['text':'#endregion','line_number':986,'multiline':False]['text':'#region Undo/Redo','line_number':988,'multiline':False]['text':'#endregion','line_number':1032,'multiline':False]