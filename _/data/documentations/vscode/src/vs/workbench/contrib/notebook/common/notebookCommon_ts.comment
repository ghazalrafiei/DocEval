['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * A mapping of extension IDs who contain renderers, to notebook ids who they
 * should be treated as the same in the renderer selection logic. This is used
 * to prefer the 1st party Jupyter renderers even though they're in a separate
 * extension, for instance. See #136247.
 ','line_number':68,'multiline':True]['text':'*
	 * custom metadata
	 ','line_number':108,'multiline':True]['text':'* Note: enum values are used for sorting ','line_number':147,'multiline':True]['text':'* Renderer has a hard dependency on an available kernel ','line_number':149,'multiline':True]['text':'* Renderer works better with an available kernel ','line_number':151,'multiline':True]['text':'* Renderer is kernel-agnostic ','line_number':153,'multiline':True]['text':'* Renderer is for a different mimeType or has a hard dependency which is unsatisfied ','line_number':155,'multiline':True]['text':'*
 * Renderer messaging requirement. While this allows for 'optional' messaging,
 * VS Code effectively treats it the same as true right now. "Partial
 * activation" of extensions is a very tricky problem, which could allow
 * solving this. But for now, optional is mostly only honored for aznb.
 ','line_number':159,'multiline':True]['text':'*
	 * Alternative output id that's reused when the output is updated.
	 ','line_number':218,'multiline':True]['text':' start ','line_number':273,'multiline':True]['text':' delete count ','line_number':274,'multiline':True]['text':' These types are nullable because we need to use 'null' on the EH side so it is JSON-stringified','line_number':472,'multiline':False]['text':'g, '\\') : str;','line_number':629,'multiline':False]['text':'*
	 * Returns a sorted array of the input mimetypes.
	 ','line_number':649,'multiline':True]['text':'*
	 * Records that the user selected the given mimetype over the other
	 * possible mimetypes, prioritizing it for future reference.
	 ','line_number':675,'multiline':True]['text':' always first, nothing more to do','line_number':682,'multiline':False]['text':' Get the other mimetypes that are before the chosenMimetype. Then, move','line_number':687,'multiline':False]['text':' them after it, retaining order.','line_number':688,'multiline':False]['text':'*
	 * Gets an array of in-order mimetype preferences.
	 ','line_number':699,'multiline':True]['text':' equal','line_number':759,'multiline':False]['text':' `afterElement` exists before, which means some elements before `afterElement` are deleted','line_number':766,'multiline':False]['text':' `afterElement` added','line_number':770,'multiline':False]['text':'*
	 * Go to disk bypassing any cache of the model if any.
	 ','line_number':788,'multiline':True]['text':'*
	 * If provided, the size of the file will be checked against the limits
	 * and an error will be thrown if any limit is exceeded.
	 ','line_number':792,'multiline':True]['text':'TODO@rebornix test','line_number':862,'multiline':False]['text':' should exclude','line_number':890,'multiline':False]['text':'*
 * Whether the provided mime type is a text stream like `stdout`, `stderr`.
 ','line_number':1007,'multiline':True]['text':'*
 * Given a stream of individual stdout outputs, this function will return the compressed lines, escaping some of the common terminal escape codes.
 * E.g. some terminal escape codes would result in the previous line getting cleared, such if we had 3 lines and
 * last line contained such a code, then the result string would be just the first two lines.
 * @returns a single VSBuffer with the concatenated and compressed data, and whether any compression was done.
 ','line_number':1017,'multiline':True]['text':' Pick the first set of outputs with the same mime type.','line_number':1027,'multiline':False]['text':' Remove the previous line if required.','line_number':1054,'multiline':False]['text':'*
 * Took this from jupyter/notebook
 * https://github.com/jupyter/notebook/blob/b8b66332e2023e83d2ee04f83d8814f567e01a4e/notebook/static/base/js/utils.js
 * Remove characters that are overridden by backspace characters
 ','line_number':1072,'multiline':True]['text':' Cancel out anything-but-newline followed by backspace','line_number':1081,'multiline':False]['text':'*
 * Remove chunks that should be overridden by the effect of carriage return characters
 * From https://github.com/jupyter/notebook/blob/master/notebook/static/base/js/utils.js
 ','line_number':1087,'multiline':True]['text':' \r followed by \n --> newline','line_number':1092,'multiline':False]['text':' We have special handling for backspace and carriage return characters.','line_number':1105,'multiline':False]['text':' Don't unnecessary decode the bytes if we don't need to perform any processing.','line_number':1106,'multiline':False]['text':' Do the same thing jupyter is doing','line_number':1110,'multiline':False]