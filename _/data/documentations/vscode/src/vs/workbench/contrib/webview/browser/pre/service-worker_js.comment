['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' @ts-check','line_number':5,'multiline':False]['text':'/ <reference no-default-lib="true"/>','line_number':7,'multiline':False]['text':'/ <reference lib="webworker" />','line_number':8,'multiline':False]['text':'* @type {ServiceWorkerGlobalScope} ','line_number':10,'multiline':True]['text':'* @type {any} ','line_number':10,'multiline':True]['text':'*
 * Origin used for resources
 ','line_number':22,'multiline':True]['text':'*
 * @template T
 * @typedef {{ status: 'ok'; value: T } | { status: 'timeout' }} RequestStoreResult
 ','line_number':29,'multiline':True]['text':'*
 * @template T
 * @typedef {{
 *     resolve: (x: RequestStoreResult<T>) => void,
 *     promise: Promise<RequestStoreResult<T>>
 * }} RequestStoreEntry
 ','line_number':34,'multiline':True]['text':'*
 * Caches
 * @template T
 ','line_number':42,'multiline':True]['text':'* @type {Map<number, RequestStoreEntry<T>>} ','line_number':48,'multiline':True]['text':'*
	 * @returns {{ requestId: number, promise: Promise<RequestStoreResult<T>> }}
	 ','line_number':54,'multiline':True]['text':'* @type {undefined | ((x: RequestStoreResult<T>) => void)} ','line_number':60,'multiline':True]['text':'* @type {Promise<RequestStoreResult<T>>} ','line_number':63,'multiline':True]['text':'* @type {RequestStoreEntry<T>} ','line_number':66,'multiline':True]['text':'* @type {(x: RequestStoreResult<T>) => void} ','line_number':67,'multiline':True]['text':'*
	 * @param {number} requestId
	 * @param {T} result
	 * @return {boolean}
	 ','line_number':84,'multiline':True]['text':'*
 * @typedef {{ readonly status: 200; id: number; path: string; mime: string; data: Uint8Array; etag: string | undefined; mtime: number | undefined; }
 * 		| { readonly status: 304; id: number; path: string; mime: string; mtime: number | undefined }
 *		| { readonly status: 401; id: number; path: string }
 *		| { readonly status: 404; id: number; path: string }} ResourceResponse
 ','line_number':100,'multiline':True]['text':'*
 * Map of requested paths to responses.
 *
 * @type {RequestStore<ResourceResponse>}
 ','line_number':107,'multiline':True]['text':'*
 * Map of requested localhost origins to optional redirects.
 *
 * @type {RequestStore<string | undefined>}
 ','line_number':114,'multiline':True]['text':'* @type {Client} ','line_number':136,'multiline':True]['text':'* @type {ResourceResponse} ','line_number':148,'multiline':True]['text':' may be empty','line_number':177,'multiline':False]['text':' If we're making a request against the remote authority, we want to go','line_number':191,'multiline':False]['text':' through VS Code itself so that we are authenticated properly.  If the','line_number':192,'multiline':False]['text':' service worker is hosted on the same origin we will have cookies and','line_number':193,'multiline':False]['text':' authentication will not be an issue.','line_number':194,'multiline':False]['text':' See if it's a localhost request','line_number':212,'multiline':False]['text':' Activate worker immediately','line_number':219,'multiline':False]['text':' Become available to all pages','line_number':223,'multiline':False]['text':'*
 * @param {FetchEvent} event
 * @param {{
 * 		scheme: string;
 * 		authority: string;
 * 		path: string;
 * 		query: string;
 * }} requestUrlComponents
 ','line_number':226,'multiline':True]['text':'*
	 * @param {RequestStoreResult<ResourceResponse>} result
	 * @param {Response | undefined} cachedResponse
	 ','line_number':250,'multiline':True]['text':' Not modified','line_number':260,'multiline':False]['text':'* @type {Record<string, string>} ','line_number':276,'multiline':True]['text':' To support seeking for videos, we need to handle range requests','line_number':285,'multiline':False]['text':' TODO: Right now we are always reading the full file content. This is a bad idea','line_number':288,'multiline':False]['text':' for large video files :)','line_number':289,'multiline':False]['text':' We don't understand the requested bytes','line_number':301,'multiline':False]['text':'* @type {Record<string, string>} ','line_number':312,'multiline':True]['text':' support COI requests, see network.ts#COI.getHeadersFromQuery(...)','line_number':327,'multiline':False]['text':'* @type {Response | undefined} ','line_number':357,'multiline':True]['text':'*
 * @param {FetchEvent} event
 * @param {URL} requestUrl
 * @return {Promise<Response>}
 ','line_number':381,'multiline':True]['text':' This is expected when requesting resources on other localhost ports','line_number':389,'multiline':False]['text':' that are not spawned by vs code','line_number':390,'multiline':False]['text':'*
	 * @param {RequestStoreResult<string | undefined>} result
	 * @return {Promise<Response>}
	 ','line_number':401,'multiline':True]['text':'*
 * @param {Client} client
 * @returns {string | null}
 ','line_number':438,'multiline':True]['text':'*
 * @param {string} webviewId
 * @returns {Promise<Client[]>}
 ','line_number':447,'multiline':True]