['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * Tracks a list of generic entries.
 ','line_number':20,'multiline':True]['text':'*
	 * The persisted entries.
	 ','line_number':24,'multiline':True]['text':'*
	 * Adds an entry.
	 ','line_number':28,'multiline':True]['text':'*
	 * Removes an entry.
	 ','line_number':32,'multiline':True]['text':'*
	 * Clears all entries.
	 ','line_number':36,'multiline':True]['text':' Shell file history loads once per shell per window','line_number':71,'multiline':False]['text':' WindowsShellType.PowerShell has the same value','line_number':86,'multiline':False]['text':' Init cache','line_number':127,'multiline':False]['text':' Listen for config changes to set history limit','line_number':130,'multiline':False]['text':' Listen to cache changes from other windows','line_number':137,'multiline':False]['text':' Initial load','line_number':164,'multiline':False]['text':' React to stale cache caused by another window','line_number':170,'multiline':False]['text':' Since state is saved whenever the entries change, it's a safe assumption that no','line_number':172,'multiline':False]['text':' merging of entries needs to happen, just loading the new state.','line_number':173,'multiline':False]['text':' Load global entries plus','line_number':183,'multiline':False]['text':' Invalid data','line_number':201,'multiline':False]['text':' .bash_history does not differentiate wrapped commands from multiple commands. Parse','line_number':240,'multiline':False]['text':' the output to get the','line_number':241,'multiline':False]['text':' Remove trailing backtick','line_number':358,'multiline':False]['text':'*
	 * From `fish` docs:
	 * > The command history is stored in the file ~/.local/share/fish/fish_history
	 *   (or $XDG_DATA_HOME/fish/fish_history if that variable is set) by default.
	 *
	 * (https://fishshell.com/docs/current/interactive.html#history-search)
	 ','line_number':375,'multiline':True]['text':' TODO: Unchecked fish behavior:','line_number':384,'multiline':False]['text':' What if XDG_DATA_HOME was defined but somehow $XDG_DATA_HOME/fish/fish_history','line_number':385,'multiline':False]['text':' was not exist. Does fish fall back to ~/.local/share/fish/fish_history?','line_number':386,'multiline':False]['text':'*
	 * These apply to `fish` v3.5.1:
	 * - It looks like YAML but it's not. It's, quoting, *"a broken psuedo-YAML"*.
	 *   See these discussions for more details:
	 *   - https://github.com/fish-shell/fish-shell/pull/6493
	 *   - https://github.com/fish-shell/fish-shell/issues/3341
	 * - Every record should exactly start with `- cmd:` (the whitespace between `-` and `cmd` cannot be replaced with tab)
	 * - Both `- cmd: echo 1` and `- cmd:echo 1` are valid entries.
	 * - Backslashes are esacped as `\\`.
	 * - Multiline commands are joined with a `\n` sequence, hence they're read as single line commands.
	 * - Property `when` is optional.
	 * - History navigation respects the records order and ignore the actual `when` property values (chronological order).
	 * - If `cmd` value is multiline , it just takes the first line. Also YAML operators like `>-` or `|-` are not supported.
	 ','line_number':395,'multiline':True]['text':'*
	 * NOTE
	 * This repeatedReplace() call can be eliminated by using look-ahead
	 * caluses in the original RegExp pattern:
	 *
	 * >>> ```ts
	 * >>> cmds[i].replace(/(?<=^|[^\\])((?:\\\\)*)(\\n)/g, '$1\n')
	 * >>> ```
	 *
	 * But since not all browsers support look aheads we opted to a simple
	 * pattern and repeatedly calling replace method.
	 ','line_number':423,'multiline':True]['text':' Handle file not found only','line_number':469,'multiline':False]