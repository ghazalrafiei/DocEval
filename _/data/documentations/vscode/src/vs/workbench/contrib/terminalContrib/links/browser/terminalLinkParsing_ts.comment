['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':'*
 * This module is responsible for parsing possible links out of lines with only access to the line
 * text and the target operating system, ie. it does not do any validation that paths actually
 * exist.
 ','line_number':6,'multiline':True]['text':'*
 * A regex that extracts the link suffix which contains line and column information. The link suffix
 * must terminate at the end of line.
 ','line_number':34,'multiline':True]['text':'*
 * A regex that extracts the link suffix which contains line and column information.
 ','line_number':39,'multiline':True]['text':' The comments in the regex below use real strings/numbers for better readability, here's','line_number':64,'multiline':False]['text':' the legend:','line_number':65,'multiline':False]['text':' - Path    = foo','line_number':66,'multiline':False]['text':' - Row     = 339','line_number':67,'multiline':False]['text':' - Col     = 12','line_number':68,'multiline':False]['text':' - RowEnd  = 341','line_number':69,'multiline':False]['text':' - ColEnd  = 789','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':' These all support single quote ' in the place of " and [] in the place of ()','line_number':72,'multiline':False]['text':'','line_number':73,'multiline':False]['text':' See the tests for an exhaustive list of all supported formats','line_number':74,'multiline':False]['text':' foo:339','line_number':76,'multiline':False]['text':' foo:339:12','line_number':77,'multiline':False]['text':' foo:339:12-789','line_number':78,'multiline':False]['text':' foo:339:12-341.789','line_number':79,'multiline':False]['text':' foo:339.12','line_number':80,'multiline':False]['text':' foo 339','line_number':81,'multiline':False]['text':' foo 339:12                              [#140780]','line_number':82,'multiline':False]['text':' foo 339.12','line_number':83,'multiline':False]['text':' foo#339','line_number':84,'multiline':False]['text':' foo#339:12                              [#190288]','line_number':85,'multiline':False]['text':' foo#339.12','line_number':86,'multiline':False]['text':' "foo",339','line_number':87,'multiline':False]['text':' "foo",339:12','line_number':88,'multiline':False]['text':' "foo",339.12','line_number':89,'multiline':False]['text':' "foo",339.12-789','line_number':90,'multiline':False]['text':' "foo",339.12-341.789','line_number':91,'multiline':False]['text':' If there are multiple characters in the prefix, trim the prefix if the _first_','line_number':280,'multiline':False]['text':' suffix character is the same as the last prefix character. For example, for the','line_number':281,'multiline':False]['text':' text `echo "'foo' on line 1"`:','line_number':282,'multiline':False]['text':'','line_number':283,'multiline':False]['text':' - Prefix='','line_number':284,'multiline':False]['text':' - Path=foo','line_number':285,'multiline':False]['text':' - Suffix=' on line 1','line_number':286,'multiline':False]['text':'','line_number':287,'multiline':False]['text':' If this fails on a multi-character prefix, just keep the original.','line_number':288,'multiline':False]['text':' '":; are allowed in paths but they are often separators so ignore them','line_number':315,'multiline':False]['text':' Also disallow \\ to prevent a catastropic backtracking case #24795','line_number':316,'multiline':False]['text':'*
 * A regex that matches non-Windows paths, such as `/foo`, `~/foo`, `./foo`, `../foo` and
 * `foo/bar`.
 ','line_number':326,'multiline':True]['text':'*
 * A regex clause that matches the start of an absolute path on Windows, such as: `C:`, `c:`,
 * `file:///c:` (uri) and `\\?\C:` (UNC path).
 ','line_number':332,'multiline':True]['text':'*
 * A regex that matches Windows paths, such as `\\?\c:\foo`, `c:\foo`, `~\foo`, `.\foo`, `..\foo`
 * and `foo\bar`.
 ','line_number':338,'multiline':True]['text':' Something matched but does not comply with the given match index, since this would','line_number':353,'multiline':False]['text':' most likely a bug the regex itself we simply do nothing here','line_number':354,'multiline':False]['text':' Adjust the link range to exclude a/ and b/ if it looks like a git diff','line_number':358,'multiline':False]['text':' --- a/foo/bar','line_number':360,'multiline':False]['text':' +++ b/foo/bar','line_number':361,'multiline':False]['text':' diff --git a/foo/bar b/foo/bar','line_number':363,'multiline':False]