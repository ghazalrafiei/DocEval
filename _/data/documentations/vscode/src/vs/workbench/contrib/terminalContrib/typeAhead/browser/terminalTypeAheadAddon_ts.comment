['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':' how often to collect stats','line_number':33,'multiline':False]['text':' if latency is less than `threshold * this`, turn off','line_number':36,'multiline':False]['text':'*
 * Codes that should be omitted from sending to the prediction engine and instead omitted directly:
 * - Hide cursor (DECTCEM): We wrap the local echo sequence in hide and show
 *   CSI ? 2 5 l
 * - Show cursor (DECTCEM): We wrap the local echo sequence in hide and show
 *   CSI ? 2 5 h
 * - Device Status Report (DSR): These sequence fire report events from xterm which could cause
 *   double reporting and potentially a stack overflow (#119472)
 *   CSI Ps n
 *   CSI ? Ps n
 ','line_number':39,'multiline':True]['text':' TODO: Flushing output is not possible anymore without async','line_number':54,'multiline':False]['text':' we want to place the cursor after the whitespace starting the word','line_number':170,'multiline':False]['text':'* matched successfully ','line_number':175,'multiline':True]['text':'* failed to match ','line_number':177,'multiline':True]['text':'* buffer data, it might match in the future one more data comes in ','line_number':179,'multiline':True]['text':'*
	 * Whether applying this prediction can modify the style attributes of the
	 * terminal. If so it means we need to reset the cursor style if it's
	 * rolled back.
	 ','line_number':184,'multiline':True]['text':'*
	 * If set to false, the prediction will not be cleared if no input is
	 * received from the server.
	 ','line_number':191,'multiline':True]['text':'*
	 * Returns a sequence to apply the prediction.
	 * @param buffer to write to
	 * @param cursor position to write the data. Should advance the cursor.
	 * @returns a string to be written to the user terminal, or optionally a
	 * string for the user terminal and real pty.
	 ','line_number':197,'multiline':True]['text':'*
	 * Returns a sequence to roll back a previous `apply()` call. If
	 * `rollForwards` is not given, then this is also called if a prediction
	 * is correct before show the user's data.
	 ','line_number':206,'multiline':True]['text':'*
	 * If available, this will be called when the prediction is correct.
	 ','line_number':213,'multiline':True]['text':'*
	 * Returns whether the given input is one expected by this prediction.
	 * @param input reader for the input the PTY is giving
	 * @param lookBehind the last successfully-made prediction, if any
	 ','line_number':218,'multiline':True]['text':'*
	 * Advances the reader and returns the character if it matches.
	 ','line_number':245,'multiline':True]['text':'*
	 * Advances the reader and returns the string if it matches.
	 ','line_number':257,'multiline':True]['text':'*
	 * Matches and eats the substring character-by-character. If EOF is reached
	 * before the substring is consumed, it will buffer. Index is not moved
	 * if it's not a match.
	 ','line_number':269,'multiline':True]['text':'*
	 * Advances the reader and returns the regex if it matches.
	 ','line_number':290,'multiline':True]['text':'*
	 * Advances the reader and returns the character if the code matches.
	 ','line_number':303,'multiline':True]['text':'*
 * Preidction which never tests true. Will always discard predictions made
 * after it.
 ','line_number':317,'multiline':True]['text':'*
 * Wraps another prediction. Does not apply the prediction, but will pass
 * through its `matches` request.
 ','line_number':341,'multiline':True]['text':'*
 * Prediction for a single alphanumeric character.
 ','line_number':377,'multiline':True]['text':' not applied','line_number':404,'multiline':False]['text':' not applied','line_number':414,'multiline':False]['text':' remove any styling CSI before checking the char','line_number':423,'multiline':False]['text':' see #112842','line_number':435,'multiline':False]['text':' at eol if everything to the right is whitespace (zsh will emit a "clear line" code in this case)','line_number':458,'multiline':False]['text':' todo: can be optimized if `getTrimmedLength` is exposed from xterm','line_number':459,'multiline':False]['text':' not applied','line_number':473,'multiline':False]['text':' does not need to rewrite','line_number':519,'multiline':False]['text':'*
 * Prediction when the cursor reaches the end of the line. Similar to newline
 * prediction, but shells handle it slightly differently.
 ','line_number':527,'multiline':True]['text':' bash and zshell add a space which wraps in the terminal, then a CR','line_number':539,'multiline':False]['text':' zshell additionally adds a clear line after wrapping to be safe -- eat it','line_number':542,'multiline':False]['text':' does not need to rewrite','line_number':601,'multiline':False]['text':' arg can be omitted to move one character. We don't eatGradually() here','line_number':613,'multiline':False]['text':' or below moves that don't go as far as the cursor would be buffered','line_number':614,'multiline':False]['text':' indefinitely','line_number':615,'multiline':False]['text':' \b is the equivalent to moving one character back','line_number':620,'multiline':False]['text':' check if the cursor position is set absolutely','line_number':627,'multiline':False]['text':' check for a relative move in the direction','line_number':635,'multiline':False]['text':'*
	 * Gets the percent (0-1) of predictions that were accurate.
	 ','line_number':647,'multiline':True]['text':'*
	 * Gets the number of recorded stats.
	 ','line_number':661,'multiline':True]['text':'*
	 * Gets latency stats of successful predictions.
	 ','line_number':668,'multiline':True]['text':'*
	 * Gets the maximum observed latency.
	 ','line_number':682,'multiline':True]['text':'*
	 * Expected queue of events. Only predictions for the lowest are
	 * written into the terminal.
	 ','line_number':712,'multiline':True]['text':'*
	 * Current prediction generation.
	 ','line_number':718,'multiline':True]['text':'*
	 * Current cursor position -- kept outside the buffer since it can be ahead
	 * if typing swiftly. The position of the cursor that the user is currently
	 * looking at on their screen (or will be looking at after all pending writes
	 * are flushed.)
	 ','line_number':723,'multiline':True]['text':'*
	 * Cursor position taking into account all (possibly not-yet-applied)
	 * predictions. A new prediction inserted, if applied, will be applied at
	 * the position of the tentative cursor.
	 ','line_number':731,'multiline':True]['text':'*
	 * Previously sent data that was buffered and should be prepended to the
	 * next input.
	 ','line_number':738,'multiline':True]['text':'*
	 * Whether predictions are echoed to the terminal. If false, predictions
	 * will still be computed internally for latency metrics, but input will
	 * never be adjusted.
	 ','line_number':744,'multiline':True]['text':'*
	 * The last successfully-made prediction.
	 ','line_number':751,'multiline':True]['text':' console.log('set predictions:', show);','line_number':782,'multiline':False]['text':'*
	 * Undoes any predictions written and resets expectations.
	 ','line_number':800,'multiline':True]['text':'*
	 * Should be called when input is incoming to the temrinal.
	 ','line_number':813,'multiline':True]['text':' if the input character matches what the next prediction expected, undo','line_number':853,'multiline':False]['text':' the prediction and write the real character out.','line_number':854,'multiline':False]['text':' move cursor for additional apply','line_number':859,'multiline':False]['text':' on a buffer, store the remaining data and completely read data','line_number':869,'multiline':False]['text':' to be output as normal.','line_number':870,'multiline':False]['text':' on a failure, roll back all remaining items in this generation','line_number':875,'multiline':False]['text':' and clear predictions, since they are no longer valid','line_number':876,'multiline':False]['text':' reading the current style should generally be safe, since predictions','line_number':880,'multiline':False]['text':' always restore the style if they modify it.','line_number':881,'multiline':False]['text':' Extra data (like the result of running a command) should cause us to','line_number':893,'multiline':False]['text':' reset the cursor','line_number':894,'multiline':False]['text':' If we passed a generation boundary, apply the current generation's predictions','line_number':900,'multiline':False]['text':' prevent cursor flickering while typing','line_number':926,'multiline':False]['text':'*
	 * Clears any expected predictions and stored state. Should be called when
	 * the pty gives us something we don't recognize.
	 ','line_number':932,'multiline':True]['text':'*
	 * Appends a typeahead prediction.
	 ','line_number':942,'multiline':True]['text':' next read will get or clone the physical cursor','line_number':955,'multiline':False]['text':' console.log('predict:', JSON.stringify(text));','line_number':961,'multiline':False]['text':'*
	 * Appends a prediction followed by a boundary. The predictions applied
	 * after this one will only be displayed after the give prediction matches
	 * pty output/
	 ','line_number':968,'multiline':True]['text':' We apply the prediction so that it's matched against, but wrapped','line_number':978,'multiline':False]['text':' in a tentativeboundary so that it doesn't affect the physical cursor.','line_number':979,'multiline':False]['text':' Then we apply it specifically to the tentative cursor.','line_number':980,'multiline':False]['text':'*
	 * Peeks the last prediction written.
	 ','line_number':988,'multiline':True]['text':'*
	 * Peeks the first pending prediction.
	 ','line_number':995,'multiline':True]['text':'*
	 * Current position of the cursor in the terminal.
	 ','line_number':1002,'multiline':True]['text':'*
	 * Cursor position if all predictions and boundaries that have been inserted
	 * so far turn out to be successfully predicted.
	 ','line_number':1016,'multiline':True]['text':'*
 * Gets the escape sequence args to restore state/appearance in the cell.
 ','line_number':1039,'multiline':True]['text':'*
 * Gets the escape sequence to restore state/appearance in the cell.
 ','line_number':1065,'multiline':True]['text':'*
 * @see https://github.com/xtermjs/xterm.js/blob/065eb13a9d3145bea687239680ec9696d9112b8e/src/common/InputHandler.ts#L2127
 ','line_number':1084,'multiline':True]['text':' exit early if can decide color mode with semicolons','line_number':1105,'multiline':False]['text':' offset colorSpace slot for semicolon mode','line_number':1110,'multiline':False]['text':'*
	 * Number of typeahead style arguments we expect to read. If this is 0 and
	 * we see a style coming in, we know that the PTY actually wanted to update.
	 ','line_number':1124,'multiline':True]['text':'*
	 * Signals that a style was written to the terminal and we should watch
	 * for it coming in.
	 ','line_number':1141,'multiline':True]['text':'*
	 * Starts tracking for CSI changes in the terminal.
	 ','line_number':1149,'multiline':True]['text':'*
	 * Stops tracking terminal CSI changes.
	 ','line_number':1161,'multiline':True]['text':'*
	 * @inheritdoc
	 ','line_number':1169,'multiline':True]['text':' no-op','line_number':1229,'multiline':False]['text':'*
	 * Updates the current typeahead style.
	 ','line_number':1240,'multiline':True]['text':'* No characters typed on this line yet ','line_number':1282,'multiline':True]['text':'* Has a pending character prediction ','line_number':1284,'multiline':True]['text':'* Character validated on this line ','line_number':1286,'multiline':True]['text':'*
	 * Debounce that clears predictions after a timeout if the PTY doesn't apply them.
	 ','line_number':1299,'multiline':True]['text':'*
	 * Note on debounce:
	 *
	 * We want to toggle the state only when the user has a pause in their
	 * typing. Otherwise, we could turn this on when the PTY sent data but the
	 * terminal cursor is not updated, causes issues.
	 ','line_number':1390,'multiline':True]['text':' __GDPR__
			"terminalLatencyStats" : {
				"owner": "Tyriar",
				"min" : { "classification": "SystemMetaData", "purpose": "PerformanceAndHealth", "isMeasurement": true },
				"max" : { "classification": "SystemMetaData", "purpose": "PerformanceAndHealth", "isMeasurement": true },
				"median" : { "classification": "SystemMetaData", "purpose": "PerformanceAndHealth", "isMeasurement": true },
				"count" : { "classification": "SystemMetaData", "purpose": "PerformanceAndHealth", "isMeasurement": true },
				"predictionAccuracy" : { "classification": "SystemMetaData", "purpose": "PerformanceAndHealth", "isMeasurement": true }
			}
		 ','line_number':1420,'multiline':True]['text':' console.log('user data:', JSON.stringify(data));','line_number':1441,'multiline':False]['text':' Detect programs like git log/less that use the normal buffer but don't','line_number':1446,'multiline':False]['text':' take input by deafult (fixes #109541)','line_number':1447,'multiline':False]['text':' the following code guards the terminal prompt to avoid being able to','line_number':1454,'multiline':False]['text':' arrow or backspace-into the prompt. Record the lowest X value at which','line_number':1455,'multiline':False]['text':' the user gave input, and mark all additions before that as tentative.','line_number':1456,'multiline':False]['text':'* @see https://github.com/xtermjs/xterm.js/blob/1913e9512c048e3cf56bb5f5df51bfff6899c184/src/common/input/Keyboard.ts ','line_number':1475,'multiline':True]['text':' backspace','line_number':1478,'multiline':False]['text':' backspace must be able to read the previously-written character in','line_number':1484,'multiline':False]['text':' the event that it needs to undo it','line_number':1485,'multiline':False]['text':' Backspace decrements our ability to go right.','line_number':1493,'multiline':False]['text':' alphanum','line_number':1501,'multiline':False]['text':' something else','line_number':1544,'multiline':False]['text':' console.log('incoming data:', JSON.stringify(event.data));','line_number':1560,'multiline':False]['text':' console.log('emitted data:', JSON.stringify(event.data));','line_number':1562,'multiline':False]