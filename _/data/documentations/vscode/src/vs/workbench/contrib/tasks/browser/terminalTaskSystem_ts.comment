['text':'---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------','line_number':1,'multiline':True]['text':', ProblemPattern, getResource ','line_number':26,'multiline':True]['text':' Strip out the ${} because the map contains them variables without those characters.','line_number':96,'multiline':False]['text':' Should always be set in run','line_number':189,'multiline':False]['text':' A small amount of task state is stored in the task (instance) and tasks passed in to run may have that set already.','line_number':266,'multiline':False]['text':' activeTerminal.terminal.rendererExit(result);','line_number':405,'multiline':False]['text':' Do nothing.','line_number':451,'multiline':False]['text':' Do nothing.','line_number':471,'multiline':False]['text':' It's important that we add this task's entry to _activeTasks before','line_number':498,'multiline':False]['text':' any of the code in the then runs (see #180541 and #180578). Wrapping','line_number':499,'multiline':False]['text':' it in Promise.resolve().then() ensures that.','line_number':500,'multiline':False]['text':' If the task is a background task with a watching problem matcher, we don't wait for the whole task to finish,','line_number':607,'multiline':False]['text':' just for the problem matcher to go inactive.','line_number':608,'multiline':False]['text':' Allows the taskExecutions array to be updated in the extension host','line_number':755,'multiline':False]['text':' Check that the task hasn't changed to include new variables','line_number':778,'multiline':False]['text':' Allows the taskExecutions array to be updated in the extension host','line_number':789,'multiline':False]['text':' prevent https://github.com/microsoft/vscode/issues/174511 from happening','line_number':868,'multiline':False]['text':' Only keep a reference to the terminal if it is not being disposed.','line_number':893,'multiline':False]['text':' If the terminal has already been disposed, then setting the active instance will fail. #99828','line_number':910,'multiline':False]['text':' There is nothing else to do here.','line_number':911,'multiline':False]['text':' The process never got ready. Need to think how to handle this.','line_number':970,'multiline':False]['text':' Only keep a reference to the terminal if it is not being disposed.','line_number':990,'multiline':False]['text':' If the terminal has already been disposed, then setting the active instance will fail. #99828','line_number':1011,'multiline':False]['text':' There is nothing else to do here.','line_number':1012,'multiline':False]['text':' Hack to work around #92868 until terminal is fixed.','line_number':1015,'multiline':False]['text':' This must be normalized to the OS','line_number':1072,'multiline':False]['text':' Clear out the args so that we don't end up with mismatched args.','line_number':1110,'multiline':False]['text':' If we don't have a cwd, then the terminal uses the home dir.','line_number':1131,'multiline':False]['text':' Under Mac remove -l to not start it as a login shell.','line_number':1156,'multiline':False]['text':' Background on -l on osx https://github.com/microsoft/vscode/issues/107563','line_number':1158,'multiline':False]['text':' TODO: Handle by pulling the default terminal profile?','line_number':1159,'multiline':False]['text':' const osxShellArgs = this._configurationService.inspect(TerminalSettingId.ShellArgsMacOs);','line_number':1160,'multiline':False]['text':' if ((osxShellArgs.user === undefined) && (osxShellArgs.userLocal === undefined) && (osxShellArgs.userLocalValue === undefined)','line_number':1161,'multiline':False]['text':' 	&& (osxShellArgs.userRemote === undefined) && (osxShellArgs.userRemoteValue === undefined)','line_number':1162,'multiline':False]['text':' 	&& (osxShellArgs.userValue === undefined) && (osxShellArgs.workspace === undefined)','line_number':1163,'multiline':False]['text':' 	&& (osxShellArgs.workspaceFolder === undefined) && (osxShellArgs.workspaceFolderValue === undefined)','line_number':1164,'multiline':False]['text':' 	&& (osxShellArgs.workspaceValue === undefined)) {','line_number':1165,'multiline':False]['text':' 	const index = shellArgs.indexOf('-l');','line_number':1166,'multiline':False]['text':' 	if (index !== -1) {','line_number':1167,'multiline':False]['text':' 		shellArgs.splice(index, 1);','line_number':1168,'multiline':False]['text':' 	}','line_number':1169,'multiline':False]['text':' }','line_number':1170,'multiline':False]['text':' When we have a process task there is no need to quote arguments. So we go ahead and take the string value.','line_number':1204,'multiline':False]['text':' We can still add the argument, but only if not all of the following arguments begin with "-".','line_number':1263,'multiline':False]['text':' Try to find an existing terminal to split.','line_number':1302,'multiline':False]['text':' Even if an existing terminal is found, the split can fail if the terminal width is too small.','line_number':1303,'multiline':False]['text':' Either no group is used, no terminal with the group exists or splitting an existing terminal failed.','line_number':1317,'multiline':False]['text':' Delete the task now as a work around for cases when the onExit isn't fired.','line_number':1349,'multiline':False]['text':' This can happen if the terminal wasn't shutdown with an "immediate" flag and is expected.','line_number':1350,'multiline':False]['text':' For correct terminal re-use, the task needs to be deleted immediately.','line_number':1351,'multiline':False]['text':' Note that this shouldn't be a problem anymore since user initiated terminal kills are now immediate.','line_number':1352,'multiline':False]['text':' Always allow to reuse the terminal previously used by the same task.','line_number':1410,'multiline':False]['text':' There is no idle terminal which was used by the same task.','line_number':1413,'multiline':False]['text':' Search for any idle terminal used previously by a task of the same group','line_number':1414,'multiline':False]['text':' (or, if the task has no group, a terminal used by a task without group).','line_number':1415,'multiline':False]['text':' We found the end quote.','line_number':1471,'multiline':False]['text':' skip the character. We are quoted.','line_number':1476,'multiline':False]['text':' Skip the next character','line_number':1479,'multiline':False]['text':' If we have no args and the command is a string then use the command to stay backwards compatible with the old command line','line_number':1523,'multiline':False]['text':' model. To allow variable resolving with spaces we do continue if the resolved value is different than the original one','line_number':1524,'multiline':False]['text':' and the resolved one needs quoting.','line_number':1525,'multiline':False]['text':' There are special rules quoted command line in cmd.exe','line_number':1545,'multiline':False]['text':' The custom execution should have everything it needs already as it provided','line_number':1596,'multiline':False]['text':' the callback.','line_number':1597,'multiline':False]['text':' Try to get a scope.','line_number':1607,'multiline':False]['text':' First we need to use the command args:','line_number':1675,'multiline':False]['text':' TODO@Dirk Task.getWorkspaceFolder should return a WorkspaceFolder that is defined in workspace.ts','line_number':1744,'multiline':False]['text':' This should never happen','line_number':1752,'multiline':False]['text':' No workspace','line_number':1763,'multiline':False]