['text':'*
 * Api composable that provides loading, error and response refs, as well as event hooks for error and response.
 *
 * You can use this composable to generate a fresh api instance with its own loading and error refs.
 *
 * Any request called by useApi will be pushed into the global requests counter which toggles the global loading state.
 *
 * @example
 * ```js
 * const { api, isLoading, error, response, onError, onResponse } = useApi()
 *
 * const onSignIn = async () => {
 *   const { token } = await api.auth.signIn(form)
 * }
 ','line_number':20,'multiline':True]['text':'*
   * Local state of running requests, do not confuse with global state of running requests
   * This state is only counting requests made by this instance of `useApi` and not by other instances.
   ','line_number':40,'multiline':True]['text':'* is request loading ','line_number':46,'multiline':True]['text':'* latest request error ','line_number':49,'multiline':True]['text':'* latest request response ','line_number':52,'multiline':True]['text':'* api instance - with interceptors for token refresh already bound ','line_number':61,'multiline':True]['text':'* set loading to true and increment local and global request counter ','line_number':64,'multiline':True]['text':'* local count ','line_number':68,'multiline':True]['text':'* global count ','line_number':71,'multiline':True]['text':'* decrement local and global request counter and check if we can stop loading ','line_number':75,'multiline':True]['text':'* local count ','line_number':77,'multiline':True]['text':'* global count ','line_number':79,'multiline':True]['text':'* try to stop loading ','line_number':82,'multiline':True]['text':'* set loading state to false *only* if no request is still running ','line_number':86,'multiline':True]['text':'* reset response and error refs ','line_number':93,'multiline':True]