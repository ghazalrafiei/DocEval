['text':'*
 * Programmatically create a component and attach it to the body (or a specific mount target), like a dialog or modal.
 * This composable is not SSR friendly - it should be used only on the client.
 *
 * @param componentOrVNode The component to create and attach. Can be a VNode or a component definition.
 * @param props The props to pass to the component.
 * @param options Additional options to use {@see UseDialogOptions}
 *
 * @example
 * import { useDialog } from '#imports'
 * import DlgQuickImport from '~/components/dlg/QuickImport.vue'
 *
 * function openQuickImportDialog(type: string) {
 *   // create a ref for showing/hiding the modal
 *   const isOpen = ref(true)
 *
 *   const { close, vNode } = useDialog(DlgQuickImport, {
 *     'modelValue': isOpen,
 *     'importType': type,
 *     'onUpdate:modelValue': closeDialog,
 *   })
 *
 *   function closeDialog() {
 *     // hide the modal
 *     isOpen.value = false
 *
 *     // debounce destroying the component, so the modal transition can finish
 *     close(1000)
 *   }
 * }
 ','line_number':13,'multiline':True]['text':'* When props change, we want to re-render the element with the new prop values ','line_number':64,'multiline':True]['text':'*
       * If it's a component instance, use the instance's root element (`$el`), otherwise use the element itself
       * If no target is specified, use the document body
       ','line_number':70,'multiline':True]['text':'* if specified, append vnode to mount target instead of document.body ','line_number':80,'multiline':True]['text':' if it's a vnode, just render it, otherwise wrap in `h` to create a vnode','line_number':83,'multiline':False]['text':' wrap in suspense to resolve potential promises','line_number':90,'multiline':False]['text':'* When calling scope is disposed, destroy component ','line_number':98,'multiline':True]['text':'* destroy component, can be debounced ','line_number':101,'multiline':True]