['text':' refer : https://github.com/brianc/node-pg-types/blob/master/lib/builtins.js','line_number':9,'multiline':False]['text':' override parsing date column to Date()','line_number':19,'multiline':False]['text':' override timestamp','line_number':21,'multiline':False]['text':' override timestampz','line_number':25,'multiline':False]['text':' parse integer values','line_number':34,'multiline':False]['text':' parse float values','line_number':37,'multiline':False]['text':'*
 * Converts a condition string to conditions array
 *
 * @param {String} str - Condition string
 * @returns {Array}
 ','line_number':51,'multiline':True]['text':' if it's a simple query simply return array of conditions','line_number':71,'multiline':False]['text':' iterate until finding right closing','line_number':80,'multiline':False]['text':' getting operand starting index','line_number':96,'multiline':False]['text':' calling recursively for nested query','line_number':106,'multiline':False]['text':' RHS of nested query(recursion)','line_number':113,'multiline':False]['text':' handle uuid case','line_number':472,'multiline':False]['text':' eslint-disable-next-line @typescript-eslint/no-namespace','line_number':516,'multiline':False]['text':'*
 * Append xwhere to knex query builder
 ','line_number':560,'multiline':True]['text':'*
 * Append concat to knex query builder
 ','line_number':575,'multiline':True]['text':'*
 * Append xhaving to knex query builder
 ','line_number':599,'multiline':True]['text':'*
 * Append custom where condition(nested object) to knex query builder
 ','line_number':615,'multiline':True]['text':' todo: optimize','line_number':698,'multiline':False]['text':' parse and do all the joins','line_number':712,'multiline':False]['text':' parse and define all where conditions','line_number':718,'multiline':False]['text':' @ts-ignore','line_number':723,'multiline':False]['text':' check for relation','line_number':731,'multiline':False]['text':' const model = Object.entries(models).find(([name]) => {','line_number':736,'multiline':False]['text':'   // todo: name comparison','line_number':737,'multiline':False]['text':'   return pKey.toLowerCase().startsWith(name.toLowerCase());','line_number':738,'multiline':False]['text':' })?.[1];','line_number':739,'multiline':False]['text':' todo: get tablename from model','line_number':741,'multiline':False]['text':' if (model) {','line_number':748,'multiline':False]['text':'   console.log(model)','line_number':749,'multiline':False]['text':' }','line_number':750,'multiline':False]['text':' delete obj.relationType;','line_number':767,'multiline':False]['text':' return parseNestedConditionAndJoin.call(this, Object.entries(obj).find(([k]) => k !== 'relationType')?.[1], qb, Object.keys(obj).find(k => k !== 'relationType'), relation.tn)','line_number':768,'multiline':False]['text':' todo: get tablename from model','line_number':778,'multiline':False]['text':' if (model) {','line_number':785,'multiline':False]['text':'   console.log(model)','line_number':786,'multiline':False]['text':' }','line_number':787,'multiline':False]['text':' delete obj.relationType;','line_number':800,'multiline':False]['text':' return parseNestedConditionAndJoin.call(self, Object.entries(obj).find(([k]) => k !== 'relationType')?.[1], qb, Object.keys(obj).find(k => k !== 'relationType'), relation.rtn)','line_number':801,'multiline':False]['text':' handle logical operators recursively','line_number':813,'multiline':False]['text':' this.alias = {...(this.alias || {})};','line_number':856,'multiline':False]['text':' this.globalAlias = this.globalAlias || {};','line_number':857,'multiline':False]['text':' let alias;','line_number':861,'multiline':False]['text':' check for relation and update t','line_number':863,'multiline':False]['text':' alias = {...self.alias};','line_number':865,'multiline':False]['text':' const model = Object.entries(models).find(([name]) => {','line_number':869,'multiline':False]['text':'   // todo: name comparison','line_number':870,'multiline':False]['text':'   return pKey.toLowerCase().startsWith(name.toLowerCase());','line_number':871,'multiline':False]['text':' })?.[1];','line_number':872,'multiline':False]['text':' todo: get tablename from model','line_number':874,'multiline':False]['text':' if (model) {','line_number':881,'multiline':False]['text':'   console.log(model)','line_number':882,'multiline':False]['text':' }','line_number':883,'multiline':False]['text':' alias[relation.tn] = this.globalAlias[relation.tn] = (this.globalAlias[relation.tn] || 0) + 1;','line_number':886,'multiline':False]['text':' qb = qb.join(relation.tn, `${relation.tn}.${relation.cn}`, '=', `${relation.rtn}.${relation.rcn}`)','line_number':887,'multiline':False]['text':' delete obj.relationType;','line_number':888,'multiline':False]['text':' return parseNestedCondition.call(this, Object.values(obj)[0], qb, Object.keys(obj)[0],','line_number':889,'multiline':False]['text':' todo: get tablename from model','line_number':897,'multiline':False]['text':' if (model) {','line_number':904,'multiline':False]['text':'   console.log(model)','line_number':905,'multiline':False]['text':' }','line_number':906,'multiline':False]['text':' alias[relation.rtn] = this.globalAlias[relation.rtn] = (this.globalAlias[relation.rtn] || 0) + 1;','line_number':908,'multiline':False]['text':' qb = qb.join(relation.rtn, `${relation.tn}.${relation.cn}`, '=', `${relation.rtn}.${relation.rcn}`)','line_number':909,'multiline':False]['text':' delete obj.relationType;','line_number':910,'multiline':False]['text':' return parseNestedCondition.call(self, Object.values(obj)[0], qb, Object.keys(obj)[0],','line_number':911,'multiline':False]['text':' alias = self.alias;','line_number':921,'multiline':False]['text':' const colPrefix = `${alias[tn] ? alias[tn] + '___' : ''}${tn}.`;','line_number':925,'multiline':False]['text':' handle logical operators recursively','line_number':929,'multiline':False]['text':' if object handle recursively','line_number':976,'multiline':False]['text':' handle based on operator','line_number':980,'multiline':False]['text':' sqlite does not support inserting default values and knex fires a warning without this flag','line_number':1027,'multiline':False]['text':'*
   * Wrapper for knex.raw
   *
   * @param args1
   * @returns {Knex.Raw<any>}
   ','line_number':1038,'multiline':True]['text':' knex.raw = function (...args) {','line_number':1044,'multiline':False]['text':'   return knexRaw.apply(knex, args);','line_number':1045,'multiline':False]['text':' };','line_number':1046,'multiline':False]['text':'*
   * Returns database type
   *
   * @returns {*|string}
   ','line_number':1081,'multiline':True]['text':' knex.clientType = function () {','line_number':1086,'multiline':False]['text':'   return typeof arg === 'string' ? arg.match(/^(\w+):/) ?? [1] : arg.client;','line_number':1087,'multiline':False]['text':' };','line_number':1088,'multiline':False]['text':' todo: optimize','line_number':1093,'multiline':False]['text':' parse and do all the joins','line_number':1107,'multiline':False]['text':' const qb = parseNestedConditionAndJoin.call({ models }, conditionCopy, this);','line_number':1108,'multiline':False]['text':' parse and define all where conditions','line_number':1109,'multiline':False]['text':' this.alias = {...(this.alias || {})};','line_number':1115,'multiline':False]['text':' this.globalAlias = this.globalAlias || {};','line_number':1116,'multiline':False]['text':' let alias;','line_number':1120,'multiline':False]['text':' check for relation and update t','line_number':1122,'multiline':False]['text':' alias = {...self.alias};','line_number':1124,'multiline':False]['text':' const model = Object.entries(models).find(([name]) => {','line_number':1128,'multiline':False]['text':'   // todo: name comparison','line_number':1129,'multiline':False]['text':'   return pKey.toLowerCase().startsWith(name.toLowerCase());','line_number':1130,'multiline':False]['text':' })?.[1];','line_number':1131,'multiline':False]['text':' todo: get tablename from model','line_number':1133,'multiline':False]['text':' if (model) {','line_number':1140,'multiline':False]['text':'   console.log(model)','line_number':1141,'multiline':False]['text':' }','line_number':1142,'multiline':False]['text':' alias[relation.tn] = this.globalAlias[relation.tn] = (this.globalAlias[relation.tn] || 0) + 1;','line_number':1145,'multiline':False]['text':' qb = qb.join(relation.tn, `${relation.tn}.${relation.cn}`, '=', `${relation.rtn}.${relation.rcn}`)','line_number':1146,'multiline':False]['text':' delete obj.relationType;','line_number':1147,'multiline':False]['text':' return parseNestedCondition.call(this, Object.values(obj)[0], qb, Object.keys(obj)[0],','line_number':1148,'multiline':False]['text':' todo: get tablename from model','line_number':1156,'multiline':False]['text':' if (model) {','line_number':1163,'multiline':False]['text':'   console.log(model)','line_number':1164,'multiline':False]['text':' }','line_number':1165,'multiline':False]['text':' alias[relation.rtn] = this.globalAlias[relation.rtn] = (this.globalAlias[relation.rtn] || 0) + 1;','line_number':1167,'multiline':False]['text':' qb = qb.join(relation.rtn, `${relation.tn}.${relation.cn}`, '=', `${relation.rtn}.${relation.rcn}`)','line_number':1168,'multiline':False]['text':' delete obj.relationType;','line_number':1169,'multiline':False]['text':' return parseNestedCondition.call(self, Object.values(obj)[0], qb, Object.keys(obj)[0],','line_number':1170,'multiline':False]['text':' alias = self.alias;','line_number':1180,'multiline':False]['text':' const colPrefix = `${alias[tn] ? alias[tn] + '___' : ''}${tn}.`;','line_number':1184,'multiline':False]['text':' handle logical operators recursively','line_number':1188,'multiline':False]['text':' if object handle recursively','line_number':1235,'multiline':False]['text':' handle based on operator','line_number':1239,'multiline':False]['text':' Conditionv2','line_number':1280,'multiline':False]['text':'*
 * Append custom where condition(nested object) to knex query builder
 ','line_number':1282,'multiline':True]['text':' case 'in':','line_number':1345,'multiline':False]['text':'   qb = qb.whereIn(fieldName, val);','line_number':1346,'multiline':False]['text':'   break;','line_number':1347,'multiline':False]['text':' case 'nin':','line_number':1348,'multiline':False]['text':'   qb = qb.whereNotIn(fieldName, val);','line_number':1349,'multiline':False]['text':'   break;','line_number':1350,'multiline':False]