['text':' if primary key or foreign key included in fields, it's required','line_number':92,'multiline':False]['text':' check fields defined and if not, then select all','line_number':97,'multiline':False]['text':' if defined check if it is in the fields','line_number':98,'multiline':False]['text':'*
 * Base class for models
 *
 * @class
 * @classdesc Base class for models
 ','line_number':102,'multiline':True]['text':' todo: add support for sortArrJson','line_number':204,'multiline':False]['text':' todo: replace with view id','line_number':311,'multiline':False]['text':' sort by primary key if not autogenerated string','line_number':368,'multiline':False]['text':' if autogenerated string sort by created_at column if present','line_number':369,'multiline':False]['text':' qb.xwhere(where, await this.model.getAliasColMapping());','line_number':410,'multiline':False]['text':' if qrCode or Barcode replace it with value column nd keep the alias','line_number':566,'multiline':False]['text':' return dummy select','line_number':611,'multiline':False]['text':' get aggregated count of each group','line_number':653,'multiline':False]['text':' get each group','line_number':656,'multiline':False]['text':' if sort is provided filter out the group by columns sort and apply','line_number':702,'multiline':False]['text':' since we are grouping by the column and applying sort on any other column is not required','line_number':703,'multiline':False]['text':' group by using the column aliases','line_number':716,'multiline':False]['text':' todo: refactor and avoid duplicate code','line_number':739,'multiline':False]['text':' if qrCode or Barcode replace it with value column nd keep the alias','line_number':750,'multiline':False]['text':' tn: this.title,','line_number':772,'multiline':False]['text':' column,','line_number':774,'multiline':False]['text':' alias,','line_number':775,'multiline':False]['text':' return dummy select','line_number':796,'multiline':False]['text':' skip duplicate id','line_number':885,'multiline':False]['text':' todo: get only required fields','line_number':889,'multiline':False]['text':' const { cn } = this.hasManyRelations.find(({ tn }) => tn === child) || {};','line_number':891,'multiline':False]['text':' .where(parentTable.primaryKey.cn, p)','line_number':932,'multiline':False]['text':' todo: sanitize','line_number':935,'multiline':False]['text':' console.log(childQb.toQuery())','line_number':946,'multiline':False]['text':' const { cn } = this.hasManyRelations.find(({ tn }) => tn === child) || {};','line_number':991,'multiline':False]['text':' .where(parentTable.primaryKey.cn, p)','line_number':1017,'multiline':False]['text':' todo: get only required fields','line_number':1043,'multiline':False]['text':' .where(parentTable.primaryKey.cn, p)','line_number':1073,'multiline':False]['text':' todo: sanitize','line_number':1076,'multiline':False]['text':' const { cn } = this.hasManyRelations.find(({ tn }) => tn === child) || {};','line_number':1103,'multiline':False]['text':' skip duplicate id','line_number':1152,'multiline':False]['text':' const tn = this.model.tn;','line_number':1161,'multiline':False]['text':' const cn = (await relColOptions.getChildColumn()).title;','line_number':1162,'multiline':False]['text':' .where(parentTable.primaryKey.cn, id)','line_number':1197,'multiline':False]['text':' todo: sanitize','line_number':1202,'multiline':False]['text':' const tn = this.model.tn;','line_number':1240,'multiline':False]['text':' const cn = (await relColOptions.getChildColumn()).title;','line_number':1241,'multiline':False]['text':' .where(parentTable.primaryKey.cn, id)','line_number':1268,'multiline':False]['text':' todo: sanitize','line_number':1276,'multiline':False]['text':' .select({','line_number':1315,'multiline':False]['text':'   [`${tn}_${vcn}`]: `${vtn}.${vcn}`','line_number':1316,'multiline':False]['text':' })','line_number':1317,'multiline':False]['text':' await childModel.selectObject({ qb });','line_number':1320,'multiline':False]['text':' .where(parentTable.primaryKey.cn, id)','line_number':1330,'multiline':False]['text':' this._paginateAndSort(query, { sort, limit, offset }, null, true);','line_number':1334,'multiline':False]['text':' .select({','line_number':1373,'multiline':False]['text':'   [`${tn}_${vcn}`]: `${vtn}.${vcn}`','line_number':1374,'multiline':False]['text':' })','line_number':1375,'multiline':False]['text':' .where(parentTable.primaryKey.cn, id)','line_number':1381,'multiline':False]['text':' todo: naming & optimizing','line_number':1392,'multiline':False]['text':' .where(parentTable.primaryKey.cn, pid)','line_number':1430,'multiline':False]['text':' todo: naming & optimizing','line_number':1444,'multiline':False]['text':' .where(parentTable.primaryKey.cn, pid)','line_number':1486,'multiline':False]['text':' sort by primary key if not autogenerated string','line_number':1503,'multiline':False]['text':' if autogenerated string sort by created_at column if present','line_number':1504,'multiline':False]['text':' todo: naming & optimizing','line_number':1521,'multiline':False]['text':' .where(parentTable.primaryKey.cn, pid)','line_number':1554,'multiline':False]['text':' todo: naming & optimizing','line_number':1568,'multiline':False]['text':' .where(parentTable.primaryKey.cn, pid)','line_number':1603,'multiline':False]['text':' sort by primary key if not autogenerated string','line_number':1618,'multiline':False]['text':' if autogenerated string sort by created_at column if present','line_number':1619,'multiline':False]['text':' todo: naming & optimizing','line_number':1637,'multiline':False]['text':' .where(childTable.primaryKey.cn, cid)','line_number':1669,'multiline':False]['text':' todo: naming & optimizing','line_number':1684,'multiline':False]['text':' .where(childTable.primaryKey.cn, cid)','line_number':1719,'multiline':False]['text':' sort by primary key if not autogenerated string','line_number':1735,'multiline':False]['text':' if autogenerated string sort by created_at column if present','line_number':1736,'multiline':False]['text':' @ts-ignore','line_number':1789,'multiline':False]['text':' @ts-ignore','line_number':1898,'multiline':False]['text':' use dataloader to get batches of parent data together rather than getting them individually','line_number':1908,'multiline':False]['text':' it takes individual keys and callback is invoked with an array of values and we can get the','line_number':1909,'multiline':False]['text':' result for all those together and return the value in the same order as in the array','line_number':1910,'multiline':False]['text':' this way all parents data extracted together','line_number':1911,'multiline':False]['text':' handle binary(16) foreign keys','line_number':1914,'multiline':False]['text':' Cast the id to string.','line_number':1918,'multiline':False]['text':' Check if the id is a UUID and the column is binary(16)','line_number':1920,'multiline':False]['text':' If the id is a UUID and the column is binary(16), convert the id to a Buffer. Otherwise, return null to indicate that the id is not a UUID.','line_number':1923,'multiline':False]['text':' defining BelongsTo read resolver method','line_number':1972,'multiline':False]['text':' todo : handle mm','line_number':1984,'multiline':False]['text':' todo:','line_number':2025,'multiline':False]['text':'  pass view id as argument','line_number':2026,'multiline':False]['text':'  add option to get only pk and pv','line_number':2027,'multiline':False]['text':' keep a common object for all columns to share across all columns','line_number':2047,'multiline':False]['text':' const columns = _columns ?? (await this.model.getColumns());','line_number':2062,'multiline':False]['text':' for (const column of columns) {','line_number':2063,'multiline':False]['text':' hide if column marked as hidden in view','line_number':2074,'multiline':False]['text':' of if column is system field and system field is hidden','line_number':2075,'multiline':False]['text':' MySQL stores timestamp in UTC but display in timezone','line_number':2093,'multiline':False]['text':' To verify the timezone, run `SELECT @@global.time_zone, @@session.time_zone;`','line_number':2094,'multiline':False]['text':' If it's SYSTEM, then the timezone is read from the configuration file','line_number':2095,'multiline':False]['text':' if a timezone is set in a DB, the retrieved value would be converted to the corresponding timezone','line_number':2096,'multiline':False]['text':' for example, let's say the global timezone is +08:00 in DB','line_number':2097,'multiline':False]['text':' the value 2023-01-01 10:00:00 (UTC) would display as 2023-01-01 18:00:00 (UTC+8)','line_number':2098,'multiline':False]['text':' our existing logic is based on UTC, during the query, we need to take the UTC value','line_number':2099,'multiline':False]['text':' hence, we use CONVERT_TZ to convert back to UTC value','line_number':2100,'multiline':False]['text':' if there is no timezone info,','line_number':2107,'multiline':False]['text':' convert to database timezone,','line_number':2108,'multiline':False]['text':' then convert to UTC','line_number':2109,'multiline':False]['text':' if there is no timezone info,','line_number':2123,'multiline':False]['text':' convert to database timezone,','line_number':2124,'multiline':False]['text':' then convert to UTC','line_number':2125,'multiline':False]['text':' If the referenced value cannot be found: cancel current iteration','line_number':2148,'multiline':False]['text':' If the referenced value cannot be found: cancel current iteration','line_number':2183,'multiline':False]['text':' return dummy select','line_number':2231,'multiline':False]['text':' tn: this.title,','line_number':2244,'multiline':False]['text':' column,','line_number':2246,'multiline':False]['text':' exclude auto increment columns in body','line_number':2280,'multiline':False]['text':' todo: filter based on view','line_number':2294,'multiline':False]['text':' const driver = trx ? trx : this.dbDriver;','line_number':2310,'multiline':False]['text':' handle if autogenerated primary key is used','line_number':2325,'multiline':False]['text':' sqlite doesnt return id after insert','line_number':2348,'multiline':False]['text':' retrieve data for handling params in hook','line_number':2402,'multiline':False]['text':' skip if it's an mm table column','line_number':2436,'multiline':False]['text':' nothing to do','line_number':2457,'multiline':False]['text':' const newData = await this.readByPk(id, false, {}, { ignoreView: true , getHiddenColumn: true});','line_number':2565,'multiline':False]['text':' const prevData = await this.readByPk(id);','line_number':2567,'multiline':False]['text':' isSnowflake: this.isSnowflake,','line_number':2619,'multiline':False]['text':' const driver = trx ? trx : await this.dbDriver.transaction();','line_number':2648,'multiline':False]['text':' handle if autogenerated primary key is used','line_number':2687,'multiline':False]['text':' sqlite doesnt return id after insert','line_number':2714,'multiline':False]['text':' response = await this.readByPk(','line_number':2738,'multiline':False]['text':'   id,','line_number':2739,'multiline':False]['text':'   false,','line_number':2740,'multiline':False]['text':'   {},','line_number':2741,'multiline':False]['text':'   { ignoreView: true, getHiddenColumn: true },','line_number':2742,'multiline':False]['text':' );','line_number':2743,'multiline':False]['text':' parse data if it's JSON string','line_number':2787,'multiline':False]['text':' todo: use transaction type','line_number':2816,'multiline':False]['text':' todo: use transaction type','line_number':2836,'multiline':False]['text':' TODO: ag column handling for raw bulk insert','line_number':2883,'multiline':False]['text':' populate pk, map alias to column, validate data','line_number':2897,'multiline':False]['text':' populate pk columns','line_number':2901,'multiline':False]['text':' map alias to column','line_number':2909,'multiline':False]['text':' if no timezone is given,','line_number':2929,'multiline':False]['text':' then append +00:00 to make it as UTC','line_number':2930,'multiline':False]['text':' first convert the value to utc','line_number':2934,'multiline':False]['text':' from UI','line_number':2935,'multiline':False]['text':' e.g. 2022-01-01 20:00:00Z -> 2022-01-01 20:00:00','line_number':2936,'multiline':False]['text':' from API','line_number':2937,'multiline':False]['text':' e.g. 2022-01-01 20:00:00+08:00 -> 2022-01-01 12:00:00','line_number':2938,'multiline':False]['text':' if timezone info is not found - considered as utc','line_number':2939,'multiline':False]['text':' e.g. 2022-01-01 20:00:00 -> 2022-01-01 20:00:00','line_number':2940,'multiline':False]['text':' if timezone info is found','line_number':2941,'multiline':False]['text':' e.g. 2022-01-01 20:00:00Z -> 2022-01-01 20:00:00','line_number':2942,'multiline':False]['text':' e.g. 2022-01-01 20:00:00+00:00 -> 2022-01-01 20:00:00','line_number':2943,'multiline':False]['text':' e.g. 2022-01-01 20:00:00+08:00 -> 2022-01-01 12:00:00','line_number':2944,'multiline':False]['text':' then we use CONVERT_TZ to convert that in the db timezone','line_number':2945,'multiline':False]['text':' convert to UTC','line_number':2951,'multiline':False]['text':' e.g. 2022-01-01T10:00:00.000Z -> 2022-01-01 04:30:00+00:00','line_number':2952,'multiline':False]['text':' convert to UTC','line_number':2955,'multiline':False]['text':' e.g. 2023-01-01T12:00:00.000Z -> 2023-01-01 12:00:00+00:00','line_number':2956,'multiline':False]['text':' then convert to db timezone','line_number':2957,'multiline':False]['text':' convert ot UTC','line_number':2963,'multiline':False]['text':' e.g. 2023-05-10T08:49:32.000Z -> 2023-05-10 08:49:32-08:00','line_number':2964,'multiline':False]['text':' then convert to db timezone','line_number':2965,'multiline':False]['text':' e.g. 2023-01-01T12:00:00.000Z -> 2023-01-01 12:00:00+00:00','line_number':2971,'multiline':False]['text':' validate data','line_number':2981,'multiline':False]['text':' prepare nested link data for insert only if it is single record insertion','line_number':3020,'multiline':False]['text':' await this.beforeInsertb(insertDatas, null);','line_number':3037,'multiline':False]['text':' fallbacks to `10` if database client is sqlite','line_number':3039,'multiline':False]['text':' to avoid `too many SQL variables` error','line_number':3040,'multiline':False]['text':' refer : https://www.sqlite.org/limits.html','line_number':3041,'multiline':False]['text':' insert one by one as fallback to get ids for sqlite and mysql','line_number':3056,'multiline':False]['text':' sqlite and mysql doesn't support returning, so insert one by one and return ids','line_number':3058,'multiline':False]['text':' insert nested link data for single record insertion','line_number':3088,'multiline':False]['text':' await this.errorInsertb(e, data, null);','line_number':3108,'multiline':False]['text':' throw or skip if no pk provided','line_number':3147,'multiline':False]['text':' throw or skip if no record found','line_number':3160,'multiline':False]['text':' pk is specified - by pass','line_number':3231,'multiline':False]['text':' throw or skip if no pk provided','line_number':3314,'multiline':False]['text':' throw or skip if no record found','line_number':3325,'multiline':False]['text':' skip if it's an mm table column','line_number':3368,'multiline':False]['text':' nothing to do','line_number':3389,'multiline':False]['text':' qb.del();','line_number':3457,'multiline':False]['text':' skip if it's an mm table column','line_number':3499,'multiline':False]['text':' .where(_wherePk(parentTable.primaryKeys, rowId))','line_number':3515,'multiline':False]['text':' unlink LTAR data','line_number':3533,'multiline':False]['text':'*
   *  Hooks
   * ','line_number':3554,'multiline':True]['text':' details: JSON.stringify(data),','line_number':3577,'multiline':False]['text':' details: JSON.stringify(data),','line_number':3605,'multiline':False]['text':' details: JSON.stringify(data),','line_number':3632,'multiline':False]['text':' details: JSON.stringify(data),','line_number':3650,'multiline':False]['text':' details: JSON.stringify(data),','line_number':3732,'multiline':False]['text':' todo: handle composite primary key','line_number':3755,'multiline':False]['text':' data can be still inserted without PK','line_number':3757,'multiline':False]['text':' TODO: return a meaningful value','line_number':3758,'multiline':False]['text':' let cols = Object.keys(this.columns);','line_number':3770,'multiline':False]['text':' skip validation if `validate` is undefined or false','line_number':3775,'multiline':False]['text':' method for validating otpions if column is single/multi select','line_number':3809,'multiline':False]['text':' if SingleSelect or MultiSelect, then validate the options','line_number':3814,'multiline':False]['text':' if multi select, then split the values','line_number':3835,'multiline':False]['text':' details: JSON.stringify(data),','line_number':3995,'multiline':False]['text':' .where({','line_number':4071,'multiline':False]['text':'   [childColumn.cn]: this.dbDriver(parentTable.tn)','line_number':4072,'multiline':False]['text':'     .select(parentColumn.cn)','line_number':4073,'multiline':False]['text':'     .where(parentTable.primaryKey.cn, rowId)','line_number':4074,'multiline':False]['text':'     .first()','line_number':4075,'multiline':False]['text':' })','line_number':4076,'multiline':False]['text':' .where({','line_number':4088,'multiline':False]['text':'   [childColumn.cn]: this.dbDriver(parentTable.tn)','line_number':4089,'multiline':False]['text':'     .select(parentColumn.cn)','line_number':4090,'multiline':False]['text':'     .where(parentTable.primaryKey.cn, childId)','line_number':4091,'multiline':False]['text':'     .first()','line_number':4092,'multiline':False]['text':' })','line_number':4093,'multiline':False]['text':' details: JSON.stringify(data),','line_number':4122,'multiline':False]['text':' extract distinct group column values','line_number':4150,'multiline':False]['text':' todo: refactor and move to a method (applyFilterAndSort)','line_number':4181,'multiline':False]['text':' todo: replace with view id','line_number':4185,'multiline':False]['text':' sort by primary key if not autogenerated string','line_number':4238,'multiline':False]['text':' if autogenerated string sort by created_at column if present','line_number':4239,'multiline':False]['text':' todo: refactor and move to a common method (applyFilterAndSort)','line_number':4317,'multiline':False]['text':' todo: replace with view id','line_number':4320,'multiline':False]['text':' replace id with 'key' as we select as id','line_number':4365,'multiline':False]['text':' alias for skipDateConversion and skipAttachmentConversion','line_number':4379,'multiline':False]['text':' update attachment fields','line_number':4415,'multiline':False]['text':' update date time fields','line_number':4420,'multiline':False]['text':' Has Many BT','line_number':4470,'multiline':False]['text':' we expect array of array of attachments in case of lookup','line_number':4532,'multiline':False]['text':',','line_number':4539,'multiline':False]['text':', ''),','line_number':4562,'multiline':False]['text':' attachment is stored in text and parse in UI','line_number':4600,'multiline':False]['text':' convertAttachmentType is used to convert the response in string to array of object in API response','line_number':4601,'multiline':False]['text':' TODO(timezone): retrieve the format from the corresponding column meta','line_number':4638,'multiline':False]['text':' remove milliseconds','line_number':4652,'multiline':False]['text':' convert ISO string (e.g. in MSSQL) to YYYY-MM-DD hh:mm:ssZ','line_number':4660,'multiline':False]['text':' e.g. 2023-05-18T05:30:00.000Z -> 2023-05-18 11:00:00+05:30','line_number':4661,'multiline':False]['text':' e.g. DATEADD formula','line_number':4667,'multiline':False]['text':' convert all date time values to utc','line_number':4676,'multiline':False]['text':' the datetime is either YYYY-MM-DD hh:mm:ss (xcdb)','line_number':4677,'multiline':False]['text':' or YYYY-MM-DD hh:mm:ss+/-xx:yy (ext)','line_number':4678,'multiline':False]['text':' if there is no timezone info,','line_number':4687,'multiline':False]['text':' we assume the input is on NocoDB server timezone','line_number':4688,'multiline':False]['text':' then we convert to UTC from server timezone','line_number':4689,'multiline':False]['text':' example: datetime without timezone','line_number':4690,'multiline':False]['text':' we need to display 2023-04-27 10:00:00 (in HKT)','line_number':4691,'multiline':False]['text':' we convert d (e.g. 2023-04-27 18:00:00) to utc, i.e. 2023-04-27 02:00:00+00:00','line_number':4692,'multiline':False]['text':' if there is timezone info,','line_number':4693,'multiline':False]['text':' we simply convert it to UTC','line_number':4694,'multiline':False]['text':' example: datetime with timezone','line_number':4695,'multiline':False]['text':' e.g. 2023-04-27 10:00:00+05:30  -> 2023-04-27 04:30:00+00:00','line_number':4696,'multiline':False]['text':' set keepLocalTime to true if timezone info is not found','line_number':4703,'multiline':False]['text':' if there is no timezone info,','line_number':4731,'multiline':False]['text':' we assume the input is on NocoDB server timezone','line_number':4732,'multiline':False]['text':' then we convert to UTC from server timezone','line_number':4733,'multiline':False]['text':' e.g. 2023-04-27 10:00:00 (IST) -> 2023-04-27 04:30:00+00:00','line_number':4734,'multiline':False]['text':' otherwise, we convert from the given timezone to UTC','line_number':4741,'multiline':False]['text':' postgres - timezone already attached to input','line_number':4748,'multiline':False]['text':' e.g. 2023-05-11 16:16:51+08:00','line_number':4749,'multiline':False]['text':' e.g. MSSQL','line_number':4754,'multiline':False]['text':' Wed May 10 2023 17:47:46 GMT+0800 (Hong Kong Standard Time)','line_number':4755,'multiline':False]['text':' e.g. 01.01.2022 10:00:00+05:30 -> 2022-01-01 04:30:00+00:00','line_number':4758,'multiline':False]['text':' e.g. 2023-05-09 11:41:49 -> 2023-05-09 11:41:49+00:00','line_number':4759,'multiline':False]['text':' keep the local time','line_number':4761,'multiline':False]['text':' show the timezone even for Mysql','line_number':4763,'multiline':False]['text':' Show the date time in UTC format in API response','line_number':4770,'multiline':False]['text':' e.g. 2022-01-01 04:30:00+00:00','line_number':4771,'multiline':False]['text':' validate rowId','line_number':4816,'multiline':False]['text':' validate Ids','line_number':4846,'multiline':False]['text':' skip existing links','line_number':4903,'multiline':False]['text':' generate insert data for new links','line_number':4905,'multiline':False]['text':' if no new links, return true','line_number':4914,'multiline':False]['text':' todo: use bulk insert','line_number':4918,'multiline':False]['text':' validate Ids','line_number':4926,'multiline':False]['text':' validate Ids','line_number':5000,'multiline':False]['text':' .whereIn(parentTable.primaryKey.column_name, childIds)','line_number':5029,'multiline':False]['text':' validate rowId','line_number':5078,'multiline':False]['text':' validate Ids','line_number':5104,'multiline':False]['text':' validate Ids','line_number':5176,'multiline':False]['text':' validate Ids','line_number':5230,'multiline':False]['text':' .where({','line_number':5259,'multiline':False]['text':'   [childColumn.cn]: this.dbDriver(parentTable.tn)','line_number':5260,'multiline':False]['text':'     .select(parentColumn.cn)','line_number':5261,'multiline':False]['text':'     .where(parentTable.primaryKey.cn, childId)','line_number':5262,'multiline':False]['text':'     .first()','line_number':5263,'multiline':False]['text':' })','line_number':5264,'multiline':False]['text':' .where(_wherePk(childTable.primaryKeys, rowId))','line_number':5265,'multiline':False]['text':' todo: get only required fields','line_number':5293,'multiline':False]['text':' validate rowId','line_number':5305,'multiline':False]['text':' replace + at the beginning if present','line_number':5397,'multiline':False]['text':' if it's a simple query simply return array of conditions','line_number':5426,'multiline':False]['text':' iterate until finding right closing','line_number':5439,'multiline':False]['text':' getting operand starting index','line_number':5455,'multiline':False]['text':' calling recursively for nested query','line_number':5469,'multiline':False]['text':' RHS of nested query(recursion)','line_number':5478,'multiline':False]['text':' mark `op` and `sub_op` any for being assignable to parameter of type','line_number':5488,'multiline':False]['text':' try match with blank filter format','line_number':5520,'multiline':False]['text':' handle isblank and isnotblank filter format','line_number':5525,'multiline':False]['text':' the first element would be sub_op','line_number':5554,'multiline':False]['text':' remove the first element which is sub_op','line_number':5556,'multiline':False]['text':' if id object is provided use as it is','line_number':5594,'multiline':False]['text':' verify all pk columns are present in id object','line_number':5596,'multiline':False]['text':' if column is bytea, then we need to encode the id to hex based on format','line_number':5617,'multiline':False]['text':' where[primaryKeys[i].column_name] =','line_number':5618,'multiline':False]['text':' (primaryKeys[i].meta?.format === 'hex' ? '\\x' : '') + ids[i];','line_number':5619,'multiline':False]['text':' Cast the id to string.','line_number':5630,'multiline':False]['text':' Check if the id is a UUID and the column is binary(16)','line_number':5632,'multiline':False]['text':' If the id is a UUID and the column is binary(16), convert the id to a Buffer. Otherwise, return null to indicate that the id is not a UUID.','line_number':5636,'multiline':False]