['text':' TODO: fix type','line_number':108,'multiline':False]['text':'column.base_id || column.source_id,','line_number':169,'multiline':False]['text':'column.db_alias,','line_number':170,'multiline':False]['text':' LookupColumn.insert()','line_number':231,'multiline':False]['text':' ref_db_alias','line_number':261,'multiline':False]['text':' db_type:','line_number':263,'multiline':False]['text':' Trim end of enum/set','line_number':333,'multiline':False]['text':' in case color is not provided','line_number':338,'multiline':False]['text':' Trim end of enum/set','line_number':366,'multiline':False]['text':' in case color is not provided','line_number':371,'multiline':False]['text':'  default:
        {
          await ncMeta.metaInsert2(
            model.base_id,
            model.db_alias,
            'nc_col_props_v2',
            {
              column_id: model.column_id,

              cn: model.cn,
              // todo: decide type
              uidt: model.uidt,
              dt: model.dt,
              np: model.np,
              ns: model.ns,
              clen: model.clen,
              cop: model.cop,
              pk: model.pk,
              rqd: model.rqd,
              un: model.un,
              ct: model.ct,
              ai: model.ai,
              unique: model.unique,
              ctf: model.ctf,
              cc: model.cc,
              csn: model.csn,
              dtx: model.dtx,
              dtxp: model.dtxp,
              dtxs: model.dtxs,
              au: model.au
            }
          );
          if (
            model.uidt === UITypes.MultiSelect ||
            model.uidt === UITypes.SingleSelect
          ) {
            for (const option of model.dtxp.split(','))
              await ncMeta.metaInsert2(
                model.base_id,
                model.db_alias,
                MetaTable.COL_SELECT_OPTIONS',
                {
                  column_id: colId,
                  name: option
                }
              );
          }
        }
        break;','line_number':382,'multiline':True]['text':' default:','line_number':465,'multiline':False]['text':'   res = await DbColumn.read(this.id);','line_number':466,'multiline':False]['text':'   break;','line_number':467,'multiline':False]['text':' source_id: this.base_id,','line_number':476,'multiline':False]['text':' db_alias: this.db_alias,','line_number':477,'multiline':False]['text':'const columns = ncMeta
      .knex('nc_models_v2 as tab')
      .select(
        'col.id',
        'col.cn',
        'col._cn',
        'col.uidt',
        'rel.rel_cn',
        'rel.ref_rel_cn',
        'rel.id as rel_id'
      )
      .join('nc_columns_v2 as col', 'tab.id', 'col.model_id')
      .leftJoin(
        ncMeta
          .knex('nc_col_relations_v2 as r')
          .select(
            'r.*',
            'col1.cn as rel_cn',
            'col1._cn as _rel_cn',
            'col2.cn as ref_rel_cn',
            'col2._cn as _ref_rel_cn'
          )
          .join('nc_columns_v2 as col1', 'col1.id', 'r.rel_column_id')
          .join('nc_columns_v2 as col2', 'col2.id', 'r.ref_rel_column_id')
          .as('rel'),
        'col.id',
        'rel.column_id'
      )
      .condition(condition)
      .where({
        'tab.source_id': source_id,
        'tab.db_alias': db_alias
      });

    return columns.map(c => new Column(c));','line_number':539,'multiline':True]['text':' if column is not found, return','line_number':623,'multiline':False]['text':' todo: or instead of delete reset related foreign key value to null and handle in BaseModel','line_number':628,'multiline':False]['text':' get qr code columns and delete','line_number':630,'multiline':False]['text':' get lookup columns and delete','line_number':659,'multiline':False]['text':' get rollup/links column and delete','line_number':674,'multiline':False]['text':'  if relation column check lookup and rollup and delete','line_number':720,'multiline':False]['text':' get lookup columns using relation and delete','line_number':723,'multiline':False]['text':' get rollup columns using relation and delete','line_number':738,'multiline':False]['text':' delete sorts','line_number':753,'multiline':False]['text':' delete filters','line_number':769,'multiline':False]['text':' Delete from view columns','line_number':787,'multiline':False]['text':' Grid View Columns','line_number':834,'multiline':False]['text':' Form View Columns','line_number':851,'multiline':False]['text':' Kanban View Columns','line_number':868,'multiline':False]['text':' Gallery View Column','line_number':885,'multiline':False]['text':' Get LTAR columns in which current column is referenced as foreign key','line_number':902,'multiline':False]['text':' Delete LTAR columns in which current column is referenced as foreign key','line_number':919,'multiline':False]['text':' Columns','line_number':924,'multiline':False]['text':' on column delete, delete any optimised single query cache','line_number':932,'multiline':False]['text':' LookupColumn.insert()','line_number':947,'multiline':False]['text':' get qr code columns and delete if target type is not supported by QR code column type','line_number':1069,'multiline':False]['text':' get existing cache','line_number':1107,'multiline':False]['text':' set cache','line_number':1112,'multiline':False]['text':' get model column list from cache','line_number':1116,'multiline':False]['text':' update column list in cache if cache exists','line_number':1121,'multiline':False]['text':' set meta','line_number':1139,'multiline':False]['text':' on column update, delete any optimised single query cache','line_number':1155,'multiline':False]['text':' get existing cache','line_number':1164,'multiline':False]['text':' update data','line_number':1168,'multiline':False]['text':' set cache','line_number':1170,'multiline':False]['text':' set meta','line_number':1173,'multiline':False]['text':'column.base_id || column.source_id,','line_number':1175,'multiline':False]['text':'column.db_alias,','line_number':1176,'multiline':False]['text':' get existing cache','line_number':1243,'multiline':False]['text':' update data','line_number':1247,'multiline':False]['text':' set cache','line_number':1249,'multiline':False]['text':' update system field in meta db','line_number':1252,'multiline':False]['text':' no limit for sqlite but set as 255','line_number':1265,'multiline':False]['text':' get existing cache','line_number':1281,'multiline':False]['text':' update meta','line_number':1285,'multiline':False]['text':' set cache','line_number':1287,'multiline':False]['text':' set meta','line_number':1290,'multiline':False]