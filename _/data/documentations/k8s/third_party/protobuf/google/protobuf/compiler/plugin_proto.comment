['text':' Protocol Buffers - Google's data interchange format','line_number':1,'multiline':False]['text':' Copyright 2008 Google Inc.  All rights reserved.','line_number':2,'multiline':False]['text':' https://developers.google.com/protocol-buffers/','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Redistribution and use in source and binary forms, with or without','line_number':5,'multiline':False]['text':' modification, are permitted provided that the following conditions are','line_number':6,'multiline':False]['text':' met:','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     * Redistributions of source code must retain the above copyright','line_number':9,'multiline':False]['text':' notice, this list of conditions and the following disclaimer.','line_number':10,'multiline':False]['text':'     * Redistributions in binary form must reproduce the above','line_number':11,'multiline':False]['text':' copyright notice, this list of conditions and the following disclaimer','line_number':12,'multiline':False]['text':' in the documentation and/or other materials provided with the','line_number':13,'multiline':False]['text':' distribution.','line_number':14,'multiline':False]['text':'     * Neither the name of Google Inc. nor the names of its','line_number':15,'multiline':False]['text':' contributors may be used to endorse or promote products derived from','line_number':16,'multiline':False]['text':' this software without specific prior written permission.','line_number':17,'multiline':False]['text':'','line_number':18,'multiline':False]['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':19,'multiline':False]['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':20,'multiline':False]['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':21,'multiline':False]['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':22,'multiline':False]['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':23,'multiline':False]['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':24,'multiline':False]['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':25,'multiline':False]['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':26,'multiline':False]['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':27,'multiline':False]['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':28,'multiline':False]['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':29,'multiline':False]['text':' Author: kenton@google.com (Kenton Varda)','line_number':31,'multiline':False]['text':'','line_number':32,'multiline':False]['text':' WARNING:  The plugin interface is currently EXPERIMENTAL and is subject to','line_number':33,'multiline':False]['text':'   change.','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' protoc (aka the Protocol Compiler) can be extended via plugins.  A plugin is','line_number':36,'multiline':False]['text':' just a program that reads a CodeGeneratorRequest from stdin and writes a','line_number':37,'multiline':False]['text':' CodeGeneratorResponse to stdout.','line_number':38,'multiline':False]['text':'','line_number':39,'multiline':False]['text':' Plugins written using C++ can use google/protobuf/compiler/plugin.h instead','line_number':40,'multiline':False]['text':' of dealing with the raw protocol defined here.','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':' A plugin executable needs only to be placed somewhere in the path.  The','line_number':43,'multiline':False]['text':' plugin should be named "protoc-gen-$NAME", and will then be used when the','line_number':44,'multiline':False]['text':' flag "--${NAME}_out" is passed to protoc.','line_number':45,'multiline':False]['text':' An encoded CodeGeneratorRequest is written to the plugin's stdin.','line_number':56,'multiline':False]['text':' The .proto files that were explicitly listed on the command-line.  The','line_number':58,'multiline':False]['text':' code generator should generate code only for these files.  Each file's','line_number':59,'multiline':False]['text':' descriptor will be included in proto_file, below.','line_number':60,'multiline':False]['text':' The generator parameter passed on the command-line.','line_number':63,'multiline':False]['text':' FileDescriptorProtos for all files in files_to_generate and everything','line_number':66,'multiline':False]['text':' they import.  The files will appear in topological order, so each file','line_number':67,'multiline':False]['text':' appears before any file that imports it.','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':' protoc guarantees that all proto_files will be written after','line_number':70,'multiline':False]['text':' the fields above, even though this is not technically guaranteed by the','line_number':71,'multiline':False]['text':' protobuf wire format.  This theoretically could allow a plugin to stream','line_number':72,'multiline':False]['text':' in the FileDescriptorProtos and handle them one by one rather than read','line_number':73,'multiline':False]['text':' the entire set into memory at once.  However, as of this writing, this','line_number':74,'multiline':False]['text':' is not similarly optimized on protoc's end -- it will store all fields in','line_number':75,'multiline':False]['text':' memory at once before sending them to the plugin.','line_number':76,'multiline':False]['text':' The plugin writes an encoded CodeGeneratorResponse to stdout.','line_number':80,'multiline':False]['text':' Error message.  If non-empty, code generation failed.  The plugin process','line_number':82,'multiline':False]['text':' should exit with status code zero even if it reports an error in this way.','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' This should be used to indicate errors in .proto files which prevent the','line_number':85,'multiline':False]['text':' code generator from generating correct code.  Errors which indicate a','line_number':86,'multiline':False]['text':' problem in protoc itself -- such as the input CodeGeneratorRequest being','line_number':87,'multiline':False]['text':' unparseable -- should be reported by writing a message to stderr and','line_number':88,'multiline':False]['text':' exiting with a non-zero status code.','line_number':89,'multiline':False]['text':' Represents a single generated file.','line_number':92,'multiline':False]['text':' The file name, relative to the output directory.  The name must not','line_number':94,'multiline':False]['text':' contain "." or ".." components and must be relative, not be absolute (so,','line_number':95,'multiline':False]['text':' the file cannot lie outside the output directory).  "/" must be used as','line_number':96,'multiline':False]['text':' the path separator, not "\".','line_number':97,'multiline':False]['text':'','line_number':98,'multiline':False]['text':' If the name is omitted, the content will be appended to the previous','line_number':99,'multiline':False]['text':' file.  This allows the generator to break large files into small chunks,','line_number':100,'multiline':False]['text':' and allows the generated text to be streamed back to protoc so that large','line_number':101,'multiline':False]['text':' files need not reside completely in memory at one time.  Note that as of','line_number':102,'multiline':False]['text':' this writing protoc does not optimize for this -- it will read the entire','line_number':103,'multiline':False]['text':' CodeGeneratorResponse before writing files to disk.','line_number':104,'multiline':False]['text':' If non-empty, indicates that the named file should already exist, and the','line_number':107,'multiline':False]['text':' content here is to be inserted into that file at a defined insertion','line_number':108,'multiline':False]['text':' point.  This feature allows a code generator to extend the output','line_number':109,'multiline':False]['text':' produced by another code generator.  The original generator may provide','line_number':110,'multiline':False]['text':' insertion points by placing special annotations in the file that look','line_number':111,'multiline':False]['text':' like:','line_number':112,'multiline':False]['text':'   @@protoc_insertion_point(NAME)','line_number':113,'multiline':False]['text':' The annotation can have arbitrary text before and after it on the line,','line_number':114,'multiline':False]['text':' which allows it to be placed in a comment.  NAME should be replaced with','line_number':115,'multiline':False]['text':' an identifier naming the point -- this is what other generators will use','line_number':116,'multiline':False]['text':' as the insertion_point.  Code inserted at this point will be placed','line_number':117,'multiline':False]['text':' immediately above the line containing the insertion point (thus multiple','line_number':118,'multiline':False]['text':' insertions to the same point will come out in the order they were added).','line_number':119,'multiline':False]['text':' The double-@ is intended to make it unlikely that the generated code','line_number':120,'multiline':False]['text':' could contain things that look like insertion points by accident.','line_number':121,'multiline':False]['text':'','line_number':122,'multiline':False]['text':' For example, the C++ code generator places the following line in the','line_number':123,'multiline':False]['text':' .pb.h files that it generates:','line_number':124,'multiline':False]['text':'   // @@protoc_insertion_point(namespace_scope)','line_number':125,'multiline':False]['text':' This line appears within the scope of the file's package namespace, but','line_number':126,'multiline':False]['text':' outside of any particular class.  Another plugin can then specify the','line_number':127,'multiline':False]['text':' insertion_point "namespace_scope" to generate additional classes or','line_number':128,'multiline':False]['text':' other declarations that should be placed in this scope.','line_number':129,'multiline':False]['text':'','line_number':130,'multiline':False]['text':' Note that if the line containing the insertion point begins with','line_number':131,'multiline':False]['text':' whitespace, the same whitespace will be added to every line of the','line_number':132,'multiline':False]['text':' inserted text.  This is useful for languages like Python, where','line_number':133,'multiline':False]['text':' indentation matters.  In these languages, the insertion point comment','line_number':134,'multiline':False]['text':' should be indented the same amount as any inserted code will need to be','line_number':135,'multiline':False]['text':' in order to work correctly in that context.','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' The code generator that generates the initial file and the one which','line_number':138,'multiline':False]['text':' inserts into it must both run as part of a single invocation of protoc.','line_number':139,'multiline':False]['text':' Code generators are executed in the order in which they appear on the','line_number':140,'multiline':False]['text':' command line.','line_number':141,'multiline':False]['text':'','line_number':142,'multiline':False]['text':' If |insertion_point| is present, |name| must also be present.','line_number':143,'multiline':False]['text':' The file contents.','line_number':146,'multiline':False]