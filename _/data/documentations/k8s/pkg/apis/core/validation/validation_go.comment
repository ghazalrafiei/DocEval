['text':'
Copyright 2014 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
','line_number':1,'multiline':True]['text':' BannedOwners is a black list of object that are not allowed to be owners.','line_number':72,'multiline':False]['text':' validOS stores the set of valid OSes within pod spec.','line_number':104,'multiline':False]['text':' The valid values currently are linux, windows.','line_number':105,'multiline':False]['text':' In future, they can be expanded to values from','line_number':106,'multiline':False]['text':' https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration','line_number':107,'multiline':False]['text':' ValidateHasLabel requires that metav1.ObjectMeta has a Label with key and expectedValue','line_number':110,'multiline':False]['text':' ValidateAnnotations validates that a set of annotations are correctly defined.','line_number':126,'multiline':False]['text':' ValidateQualifiedName validates if name is what Kubernetes calls a "qualified name".','line_number':139,'multiline':False]['text':' ValidateDNS1123Subdomain validates that a name is a proper DNS subdomain.','line_number':148,'multiline':False]['text':' ValidateTolerationsInPodAnnotations tests that the serialized tolerations in Pod.Annotations has valid data','line_number':182,'multiline':False]['text':' No change.','line_number':205,'multiline':False]['text':' Check for additions','line_number':214,'multiline':False]['text':' No change.','line_number':217,'multiline':False]['text':' ValidateNameFunc validates that the provided name is valid for a given resource type.','line_number':235,'multiline':False]['text':' Not all resources have the same validation rules for names. Prefix is true','line_number':236,'multiline':False]['text':' if the name will have a value appended to it.  If the name is not valid,','line_number':237,'multiline':False]['text':' this returns a list of descriptions of individual characteristics of the','line_number':238,'multiline':False]['text':' value that were not valid.  Otherwise this returns an empty list or nil.','line_number':239,'multiline':False]['text':' ValidatePodName can be used to check whether the given pod name is valid.','line_number':242,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':243,'multiline':False]['text':' trailing dashes are allowed.','line_number':244,'multiline':False]['text':' ValidateReplicationControllerName can be used to check whether the given replication','line_number':247,'multiline':False]['text':' controller name is valid.','line_number':248,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':249,'multiline':False]['text':' trailing dashes are allowed.','line_number':250,'multiline':False]['text':' ValidateServiceName can be used to check whether the given service name is valid.','line_number':253,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':254,'multiline':False]['text':' trailing dashes are allowed.','line_number':255,'multiline':False]['text':' ValidateNodeName can be used to check whether the given node name is valid.','line_number':258,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':259,'multiline':False]['text':' trailing dashes are allowed.','line_number':260,'multiline':False]['text':' ValidateNamespaceName can be used to check whether the given namespace name is valid.','line_number':263,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':264,'multiline':False]['text':' trailing dashes are allowed.','line_number':265,'multiline':False]['text':' ValidateLimitRangeName can be used to check whether the given limit range name is valid.','line_number':268,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':269,'multiline':False]['text':' trailing dashes are allowed.','line_number':270,'multiline':False]['text':' ValidateResourceQuotaName can be used to check whether the given','line_number':273,'multiline':False]['text':' resource quota name is valid.','line_number':274,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':275,'multiline':False]['text':' trailing dashes are allowed.','line_number':276,'multiline':False]['text':' ValidateSecretName can be used to check whether the given secret name is valid.','line_number':279,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':280,'multiline':False]['text':' trailing dashes are allowed.','line_number':281,'multiline':False]['text':' ValidateServiceAccountName can be used to check whether the given service account name is valid.','line_number':284,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':285,'multiline':False]['text':' trailing dashes are allowed.','line_number':286,'multiline':False]['text':' ValidateEndpointsName can be used to check whether the given endpoints name is valid.','line_number':289,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':290,'multiline':False]['text':' trailing dashes are allowed.','line_number':291,'multiline':False]['text':' ValidateClassName can be used to check whether the given class name is valid.','line_number':294,'multiline':False]['text':' It is defined here to avoid import cycle between pkg/apis/storage/validation','line_number':295,'multiline':False]['text':' (where it should be) and this file.','line_number':296,'multiline':False]['text':' ValidatePriorityClassName can be used to check whether the given priority','line_number':299,'multiline':False]['text':' class name is valid.','line_number':300,'multiline':False]['text':' ValidateResourceClaimName can be used to check whether the given','line_number':303,'multiline':False]['text':' name for a ResourceClaim is valid.','line_number':304,'multiline':False]['text':' ValidateResourceClaimTemplateName can be used to check whether the given','line_number':307,'multiline':False]['text':' name for a ResourceClaimTemplate is valid.','line_number':308,'multiline':False]['text':' ValidateRuntimeClassName can be used to check whether the given RuntimeClass name is valid.','line_number':311,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':312,'multiline':False]['text':' trailing dashes are allowed.','line_number':313,'multiline':False]['text':' validateOverhead can be used to check whether the given Overhead is valid.','line_number':322,'multiline':False]['text':' reuse the ResourceRequirements validation logic','line_number':324,'multiline':False]['text':' Validates that given value is not negative.','line_number':328,'multiline':False]['text':' Validates that a Quantity is not negative','line_number':333,'multiline':False]['text':' Validates that a Quantity is positive','line_number':342,'multiline':False]['text':' ValidateObjectMeta validates an object's metadata on creation. It expects that name generation has already','line_number':364,'multiline':False]['text':' been performed.','line_number':365,'multiline':False]['text':' It doesn't return an error for rootscoped resources with namespace, because namespace should already be cleared before.','line_number':366,'multiline':False]['text':' TODO: Remove calls to this method scattered in validations of specific resources, e.g., ValidatePodUpdate.','line_number':367,'multiline':False]['text':' run additional checks for the finalizer name','line_number':370,'multiline':False]['text':' ValidateObjectMetaUpdate validates an object's metadata when updated','line_number':377,'multiline':False]['text':' run additional checks for the finalizer name','line_number':380,'multiline':False]['text':' Determine which PVCs will be created for this pod. We need','line_number':393,'multiline':False]['text':' the exact name of the pod for this. Without it, this sanity','line_number':394,'multiline':False]['text':' check has to be skipped.','line_number':395,'multiline':False]['text':' A PersistentVolumeClaimSource should not reference a created PVC. That doesn't','line_number':422,'multiline':False]['text':' make sense.','line_number':423,'multiline':False]['text':' isMatched checks whether the volume with the given name is used by a','line_number':440,'multiline':False]['text':' container and if so, if it involves a PVC.','line_number':441,'multiline':False]['text':' Check the expected name for the PVC. This gets skipped if information is missing,','line_number':724,'multiline':False]['text':' because that already gets flagged as a problem elsewhere. For example,','line_number':725,'multiline':False]['text':' ValidateObjectMeta as called by validatePodMetadataAndSpec checks that the name is set.','line_number':726,'multiline':False]['text':' TODO: consider adding a RequiredOneOf() error for this and similar cases','line_number':1029,'multiline':False]['text':' This validate will make sure targetPath:','line_number':1260,'multiline':False]['text':' 1. is not abs path','line_number':1261,'multiline':False]['text':' 2. does not have any element which is ".."','line_number':1262,'multiline':False]['text':' validatePathNoBacksteps makes sure the targetPath does not have any `..` path elements when split','line_number':1274,'multiline':False]['text':'','line_number':1275,'multiline':False]['text':' This assumes the OS of the apiserver and the nodes are the same. The same check should be done','line_number':1276,'multiline':False]['text':' on the node to ensure there are no backsteps.','line_number':1277,'multiline':False]['text':' even for `../../..`, one error is sufficient to make the point','line_number':1284,'multiline':False]['text':' validateMountPropagation verifies that MountPropagation field is valid and','line_number':1290,'multiline':False]['text':' allowed for given container.','line_number':1291,'multiline':False]['text':' The container is not available yet.','line_number':1309,'multiline':False]['text':' Stop validation now, Pod validation will refuse final','line_number':1310,'multiline':False]['text':' Pods with Bidirectional propagation in non-privileged containers.','line_number':1311,'multiline':False]['text':' This validate will make sure targetPath:','line_number':1322,'multiline':False]['text':' 1. is not abs path','line_number':1323,'multiline':False]['text':' 2. does not contain any '..' elements','line_number':1324,'multiline':False]['text':' 3. does not start with '..'','line_number':1325,'multiline':False]['text':' Don't report this error if the check for .. elements already caught it.','line_number':1329,'multiline':False]['text':' Make sure user-specified options don't use kubernetes namespaces','line_number':1409,'multiline':False]['text':' Make sure user-specified options don't use kubernetes namespaces','line_number':1430,'multiline':False]['text':' validate that DiskUri is the correct format','line_number':1503,'multiline':False]['text':' validatePVSecretReference check whether provided SecretReference object is valid in terms of secret name and namespace.','line_number':1617,'multiline':False]['text':' ValidatePersistentVolumeClaimTemplate verifies that the embedded object meta and spec are valid.','line_number':1704,'multiline':False]['text':' Checking of the object data is very minimal because only labels and annotations are used.','line_number':1705,'multiline':False]['text':' All other fields are not supported and thus must not be set','line_number':1715,'multiline':False]['text':' to avoid confusion.  We could reject individual fields,','line_number':1716,'multiline':False]['text':' but then adding a new one to ObjectMeta wouldn't be checked','line_number':1717,'multiline':False]['text':' unless this code gets updated. Instead, we ensure that','line_number':1718,'multiline':False]['text':' only allowed fields are set via reflection.','line_number':1719,'multiline':False]['text':' PersistentVolumeSpecValidationOptions contains the different settings for PeristentVolume validation','line_number':1729,'multiline':False]['text':' Allow users to modify the class of volume attributes','line_number':1731,'multiline':False]['text':' ValidatePersistentVolumeName checks that a name is appropriate for a','line_number':1735,'multiline':False]['text':' PersistentVolumeName object.','line_number':1736,'multiline':False]['text':' NodeAffinity is required','line_number':1991,'multiline':False]['text':' do not allow hostPath mounts of '/' to have a 'recycle' reclaim policy','line_number':2019,'multiline':False]['text':' ValidatePersistentVolumeUpdate tests to see if the update is legal for an end user to make.','line_number':2066,'multiline':False]['text':' newPv is updated with fields that cannot be changed.','line_number':2067,'multiline':False]['text':' if oldPV does not have ControllerExpandSecretRef then allow it to be set','line_number':2071,'multiline':False]['text':' PersistentVolumeSource should be immutable after creation.','line_number':2078,'multiline':False]['text':' Allow setting NodeAffinity if oldPv NodeAffinity was not set','line_number':2085,'multiline':False]['text':' ValidatePersistentVolumeStatusUpdate tests to see if the status update is legal for an end user to make.','line_number':2104,'multiline':False]['text':' Allow users to recover from previously failing expansion operation','line_number':2114,'multiline':False]['text':' Allow to validate the label value of the label selector','line_number':2116,'multiline':False]['text':' Allow to validate the API group of the data source and data source reference','line_number':2118,'multiline':False]['text':' Allow users to modify the class of volume attributes','line_number':2120,'multiline':False]['text':' If there's no old PVC, use the options based solely on feature enablement','line_number':2131,'multiline':False]['text':' If the old object had an invalid API group in the data source or data source reference, continue to allow it in the new object','line_number':2135,'multiline':False]['text':' If the old object had a volume attributes class, continue to validate it in the new object.','line_number':2139,'multiline':False]['text':' If the old object had an invalid label selector, continue to allow it in the new object','line_number':2147,'multiline':False]['text':' If there's no old PVC template, use the options based solely on feature enablement','line_number':2164,'multiline':False]['text':' If the old object had an invalid label selector, continue to allow it in the new object','line_number':2171,'multiline':False]['text':' allowInvalidAPIGroupInDataSourceOrRef returns true if the spec contains a data source or data source reference with an API group','line_number':2177,'multiline':False]['text':' ValidatePersistentVolumeClaim validates a PersistentVolumeClaim','line_number':2188,'multiline':False]['text':' validateDataSource validates a DataSource/DataSourceRef in a PersistentVolumeClaimSpec','line_number':2195,'multiline':False]['text':' validateDataSourceRef validates a DataSourceRef in a PersistentVolumeClaimSpec','line_number':2221,'multiline':False]['text':' ValidatePersistentVolumeClaimSpec validates a PersistentVolumeClaimSpec','line_number':2253,'multiline':False]['text':' ValidatePersistentVolumeClaimUpdate validates an update to a PersistentVolumeClaim','line_number':2330,'multiline':False]['text':' PVController needs to update PVC.Spec w/ VolumeName.','line_number':2337,'multiline':False]['text':' Claims are immutable in order to enforce quota, range limits, etc. without gaming the system.','line_number':2338,'multiline':False]['text':' volumeName changes are allowed once.','line_number':2340,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':2341,'multiline':False]['text':' storageclass annotation should be immutable after creation','line_number':2349,'multiline':False]['text':' TODO: remove Beta when no longer needed','line_number':2350,'multiline':False]['text':' If update from annotation to attribute failed we can attempt try to validate update from nil value.','line_number':2353,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':2355,'multiline':False]['text':' TODO: add a specific error with a hint that storage class name can not be changed','line_number':2357,'multiline':False]['text':' (instead of letting spec comparison below return generic field forbidden error)','line_number':2358,'multiline':False]['text':' lets make sure storage values are same.','line_number':2361,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':2363,'multiline':False]['text':' lets make sure volume attributes class name is same.','line_number':2365,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':2366,'multiline':False]['text':' This validation permits reducing pvc requested size up to capacity recorded in pvc.status','line_number':2380,'multiline':False]['text':' so that users can recover from volume expansion failure, but Kubernetes does not actually','line_number':2381,'multiline':False]['text':' support volume shrinking','line_number':2382,'multiline':False]['text':' Provide an upgrade path from PVC with storage class specified in beta','line_number':2409,'multiline':False]['text':' annotation to storage class specified in attribute. We allow update of','line_number':2410,'multiline':False]['text':' StorageClassName only if following four conditions are met at the same time:','line_number':2411,'multiline':False]['text':' 1. The old pvc's StorageClassAnnotation is set','line_number':2412,'multiline':False]['text':' 2. The old pvc's StorageClassName is not set','line_number':2413,'multiline':False]['text':' 3. The new pvc's StorageClassName is set and equal to the old value in annotation','line_number':2414,'multiline':False]['text':' 4. If the new pvc's StorageClassAnnotation is set,it must be equal to the old pv/pvc's StorageClassAnnotation','line_number':2415,'multiline':False]['text':' condition 1 ','line_number':2419,'multiline':True]['text':' condition 2','line_number':2420,'multiline':True]['text':' condition 3 ','line_number':2421,'multiline':True]['text':' condition 4 ','line_number':2422,'multiline':True]['text':' Provide an upgrade path from PVC with nil storage class. We allow update of','line_number':2425,'multiline':False]['text':' StorageClassName only if following four conditions are met at the same time:','line_number':2426,'multiline':False]['text':' 1. The new pvc's StorageClassName is not nil','line_number':2427,'multiline':False]['text':' 2. The old pvc's StorageClassName is nil','line_number':2428,'multiline':False]['text':' 3. The old pvc either does not have beta annotation set, or the beta annotation matches new pvc's StorageClassName','line_number':2429,'multiline':False]['text':' condition 1 ','line_number':2432,'multiline':True]['text':' condition 2 ','line_number':2433,'multiline':True]['text':' condition 3 ','line_number':2434,'multiline':True]['text':' For native resource names such as - either unprefixed names or with kubernetes.io prefix,','line_number':2445,'multiline':False]['text':' only allowed value is storage','line_number':2446,'multiline':False]['text':' ValidatePersistentVolumeClaimStatusUpdate validates an update to status of a PersistentVolumeClaim','line_number':2461,'multiline':False]['text':' ValidateEnv validates env vars','line_number':2549,'multiline':False]['text':' check if the prefix is present','line_number':2687,'multiline':False]['text':' check for overlap with VolumeDevice','line_number':2875,'multiline':False]['text':' Must be based on PersistentVolumeClaim (PVC reference or generic ephemeral inline volume)','line_number':2918,'multiline':False]['text':' check for overlap with VolumeMount','line_number':2936,'multiline':False]['text':' gatherPodResourceClaimNames returns a set of all non-empty','line_number':2959,'multiline':False]['text':' PodResourceClaim.Name values. Validation that those names are valid is','line_number':2960,'multiline':False]['text':' handled by validatePodResourceClaims.','line_number':2961,'multiline':False]['text':' AccumulateUniqueHostPorts extracts each HostPort of each Container,','line_number':3153,'multiline':False]['text':' accumulating the results and returning an error if any ports conflict.','line_number':3154,'multiline':False]['text':' checkHostPortConflicts checks for colliding Port.HostPort values across','line_number':3178,'multiline':False]['text':' a slice of containers.','line_number':3179,'multiline':False]['text':' validate that resource name is not repeated, supported resource names and policy values are specified','line_number':3320,'multiline':False]['text':' validateEphemeralContainers is called by pod spec and template validation to validate the list of ephemeral containers.','line_number':3349,'multiline':False]['text':' Note that this is called for pod template even though ephemeral containers aren't allowed in pod templates.','line_number':3350,'multiline':False]['text':' Ephemeral containers don't need looser constraints for pod templates, so it's convenient to apply both validations','line_number':3373,'multiline':False]['text':' here where we've already converted EphemeralContainerCommon to Container.','line_number':3374,'multiline':False]['text':' Ephemeral containers must have a name unique across all container types.','line_number':3377,'multiline':False]['text':' The target container name must exist and be non-ephemeral.','line_number':3384,'multiline':False]['text':' Ephemeral containers should not be relied upon for fundamental pod services, so fields such as','line_number':3389,'multiline':False]['text':' Lifecycle, probes, resources and ports should be disallowed. This is implemented as a list','line_number':3390,'multiline':False]['text':' of allowed fields so that new fields will be given consideration prior to inclusion in ephemeral containers.','line_number':3391,'multiline':False]['text':' VolumeMount subpaths have the potential to leak resources since they're implemented with bind mounts','line_number':3394,'multiline':False]['text':' that aren't cleaned up until the pod exits. Since they also imply that the container is being used','line_number':3395,'multiline':False]['text':' as part of the workload, they're disallowed entirely.','line_number':3396,'multiline':False]['text':' ValidateFieldAcceptList checks that only allowed fields are set.','line_number':3410,'multiline':False]['text':' The value must be a struct (not a pointer to a struct!).','line_number':3411,'multiline':False]['text':' Compare the value of this field to its zero value to determine if it has been set','line_number':3422,'multiline':False]['text':' validateInitContainers is called by pod spec and template validation to validate the list of init containers','line_number':3433,'multiline':False]['text':' Apply the validation common to all container types','line_number':3444,'multiline':False]['text':' Apply the validation specific to init containers','line_number':3448,'multiline':False]['text':' Names must be unique within regular and init containers. Collisions with ephemeral containers','line_number':3454,'multiline':False]['text':' will be detected by validateEphemeralContainers().','line_number':3455,'multiline':False]['text':' Check for port conflicts in init containers individually since init containers run one-by-one.','line_number':3462,'multiline':False]['text':' These fields are disallowed for init containers.','line_number':3475,'multiline':False]['text':' validateContainerCommon applies validation common to all container types. It's called by regular, init, and ephemeral','line_number':3498,'multiline':False]['text':' container list validation to require a properly formatted name, image, etc.','line_number':3499,'multiline':False]['text':' TODO: do not validate leading and trailing whitespace to preserve backward compatibility.','line_number':3510,'multiline':False]['text':' for example: https://github.com/openshift/origin/issues/14659 image = " " is special token in pod template','line_number':3511,'multiline':False]['text':' others may have done similar','line_number':3512,'multiline':False]['text':' Only make the following checks if hostUsers is false (otherwise, the container uses the','line_number':3546,'multiline':False]['text':' same userns as the host, and so there isn't anything to check).','line_number':3547,'multiline':False]['text':' We decided to restrict the usage of userns with other host namespaces:','line_number':3552,'multiline':False]['text':' 	https://github.com/kubernetes/kubernetes/pull/111090#discussion_r935994282','line_number':3553,'multiline':False]['text':' The tl;dr is: you can easily run into permission issues that seem unexpected, we don't','line_number':3554,'multiline':False]['text':' know of any good use case and we can always enable them later.','line_number':3555,'multiline':False]['text':' Note we already validated above spec.SecurityContext is not nil.','line_number':3557,'multiline':False]['text':' validateContainers is called by pod spec and template validation to validate the list of regular containers.','line_number':3571,'multiline':False]['text':' Apply validation common to all containers','line_number':3583,'multiline':False]['text':' Container names must be unique within the list of regular containers.','line_number':3586,'multiline':False]['text':' Collisions with init or ephemeral container names will be detected by the init or ephemeral','line_number':3587,'multiline':False]['text':' container validation to prevent duplicate error messages.','line_number':3588,'multiline':False]['text':' These fields are allowed for regular containers and restartable init','line_number':3595,'multiline':False]['text':' containers.','line_number':3596,'multiline':False]['text':' Regular init container and ephemeral container validation will return','line_number':3597,'multiline':False]['text':' field.Forbidden() for these paths.','line_number':3598,'multiline':False]['text':' These fields are disallowed for regular containers','line_number':3606,'multiline':False]['text':' Port conflicts are checked across all containers','line_number':3612,'multiline':False]['text':' Limits on various DNS parameters. These are derived from','line_number':3670,'multiline':False]['text':' restrictions in Linux libc name resolution handling.','line_number':3671,'multiline':False]['text':' Max number of DNS name servers.','line_number':3672,'multiline':False]['text':' Max number of domains in the search path list.','line_number':3674,'multiline':False]['text':' Max number of characters in the search path.','line_number':3676,'multiline':False]['text':' There should be no duplicates in the list of scheduling gates.','line_number':3690,'multiline':False]['text':' Validate DNSNone case. Must provide at least one DNS name server.','line_number':3705,'multiline':False]['text':' Validate nameservers.','line_number':3716,'multiline':False]['text':' Validate searches.','line_number':3725,'multiline':False]['text':' Include the space between search paths.','line_number':3729,'multiline':False]['text':' it is fine to have a trailing dot','line_number':3734,'multiline':False]['text':' Validate options.','line_number':3738,'multiline':False]['text':' validatePodHostNetworkDeps checks fields which depend on whether HostNetwork is','line_number':3748,'multiline':False]['text':' true or not.  It should be called on all PodSpecs, but opts can change what','line_number':3749,'multiline':False]['text':' is enforce.  E.g. opts.ResourceIsPod should only be set when called in the','line_number':3750,'multiline':False]['text':' context of a Pod, and not on PodSpecs which are embedded in other resources','line_number':3751,'multiline':False]['text':' (e.g. Deployments).','line_number':3752,'multiline':False]['text':' For <reasons> we keep `.HostNetwork` in .SecurityContext on the internal','line_number':3754,'multiline':False]['text':' version of Pod.','line_number':3755,'multiline':False]['text':' At this point, we know that HostNetwork is true. If this','line_number':3769,'multiline':False]['text':' PodSpec is in a Pod (opts.ResourceIsPod), then HostPort must','line_number':3770,'multiline':False]['text':' be the same value as ContainerPort. If this PodSpec is in','line_number':3771,'multiline':False]['text':' some other resource (e.g. Deployment) we allow 0 (i.e.','line_number':3772,'multiline':False]['text':' unspecified) because it will be defaulted when the Pod is','line_number':3773,'multiline':False]['text':' ultimately created, but we do not allow any other values.','line_number':3774,'multiline':False]['text':' validateImagePullSecrets checks to make sure the pull secrets are well','line_number':3784,'multiline':False]['text':' formed.  Right now, we only expect name to be set (it's the only field).  If','line_number':3785,'multiline':False]['text':' this ever changes and someone decides to set those fields, we'd like to','line_number':3786,'multiline':False]['text':' know.','line_number':3787,'multiline':False]['text':' validateAffinity checks if given affinities are valid','line_number':3800,'multiline':False]['text':' TODO: Replace next line with subsequent commented-out line when implement TaintEffectNoScheduleNoAdmit.','line_number':3826,'multiline':False]['text':' case core.TaintEffectNoSchedule, core.TaintEffectPreferNoSchedule, core.TaintEffectNoScheduleNoAdmit, core.TaintEffectNoExecute:','line_number':3828,'multiline':False]['text':' TODO: Uncomment this block when implement TaintEffectNoScheduleNoAdmit.','line_number':3834,'multiline':False]['text':' core.TaintEffectNoScheduleNoAdmit,','line_number':3835,'multiline':False]['text':' validateOnlyAddedTolerations validates updated pod tolerations.','line_number':3842,'multiline':False]['text':' assign to our clone before doing a deep equal so we can allow tolerationseconds to change.','line_number':3849,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':3850,'multiline':False]['text':' ValidateTolerations tests if given tolerations have valid data.','line_number':3901,'multiline':False]['text':' validate the toleration key','line_number':3906,'multiline':False]['text':' empty toleration key with Exists operator and empty value means match all taints','line_number':3911,'multiline':False]['text':' validate toleration operator and value','line_number':3922,'multiline':False]['text':' empty operator means Equal','line_number':3924,'multiline':False]['text':' validate toleration effect, empty toleration effect means match all taint effects','line_number':3938,'multiline':False]['text':' validateContainersOnlyForPod does additional validation for containers on a pod versus a pod template','line_number':3946,'multiline':False]['text':' it only does additive validation of fields not covered in validateContainers and is not called for','line_number':3947,'multiline':False]['text':' ephemeral containers which require a conversion to core.Container.','line_number':3948,'multiline':False]['text':' validateContainerOnlyForPod does pod-only (i.e. not pod template) validation for a single container.','line_number':3957,'multiline':False]['text':' This is called by validateContainersOnlyForPod and validateEphemeralContainers directly.','line_number':3958,'multiline':False]['text':' PodValidationOptions contains the different settings for pod validation','line_number':3967,'multiline':False]['text':' Allow invalid pod-deletion-cost annotation value for backward compatibility.','line_number':3969,'multiline':False]['text':' Allow invalid label-value in LabelSelector','line_number':3971,'multiline':False]['text':' Allow pod spec to use non-integer multiple of huge page unit size','line_number':3973,'multiline':False]['text':' Allow pod spec to use status.hostIPs in downward API if feature is enabled','line_number':3975,'multiline':False]['text':' Allow invalid topologySpreadConstraint labelSelector for backward compatibility','line_number':3977,'multiline':False]['text':' Allow node selector additions for gated pods.','line_number':3979,'multiline':False]['text':' Allow namespaced sysctls in hostNet and hostIPC pods','line_number':3981,'multiline':False]['text':' The top-level resource being validated is a Pod, not just a PodSpec','line_number':3983,'multiline':False]['text':' embedded in some other resource.','line_number':3984,'multiline':False]['text':' validatePodMetadataAndSpec tests if required fields in the pod.metadata and pod.spec are set,','line_number':3988,'multiline':False]['text':' and is called by ValidatePodCreate and ValidatePodUpdate.','line_number':3989,'multiline':False]['text':' we do additional validation only pertinent for pods and not pod templates','line_number':3998,'multiline':False]['text':' this was done to preserve backwards compatibility','line_number':3999,'multiline':False]['text':' validateContainersOnlyForPod() is checked for ephemeral containers by validateEphemeralContainers()','line_number':4017,'multiline':False]['text':' validatePodIPs validates IPs in pod status','line_number':4022,'multiline':False]['text':' all PodIPs must be valid IPs','line_number':4028,'multiline':False]['text':' if we have more than one Pod.PodIP then','line_number':4035,'multiline':False]['text':' - validate for dual stack','line_number':4036,'multiline':False]['text':' - validate for duplication','line_number':4037,'multiline':False]['text':' We only support one from each IP family (i.e. max two IPs in this list).','line_number':4049,'multiline':False]['text':' There should be no duplicates in list of Pod.PodIPs','line_number':4054,'multiline':False]['text':' := make(map[string]int)','line_number':4055,'multiline':False]['text':' validateHostIPs validates IPs in pod status','line_number':4067,'multiline':False]['text':' hostIP must be equal to hostIPs[0].IP','line_number':4077,'multiline':False]['text':' all HostPs must be valid IPs','line_number':4082,'multiline':False]['text':' if we have more than one Pod.HostIP then','line_number':4089,'multiline':False]['text':' - validate for dual stack','line_number':4090,'multiline':False]['text':' - validate for duplication','line_number':4091,'multiline':False]['text':' There should be no duplicates in list of Pod.HostIPs','line_number':4096,'multiline':False]['text':' We only support one from each IP family (i.e. max two IPs in this list).','line_number':4110,'multiline':False]['text':' ValidatePodSpec tests that the specified PodSpec has valid data.','line_number':4119,'multiline':False]['text':' This includes checking formatting and uniqueness.  It also canonicalizes the','line_number':4120,'multiline':False]['text':' structure by setting default values and implementing any backwards-compatibility','line_number':4121,'multiline':False]['text':' tricks.','line_number':4122,'multiline':False]['text':' The pod metadata is needed to validate generic ephemeral volumes. It is optional','line_number':4123,'multiline':False]['text':' and should be left empty unless the spec is from a real pod object.','line_number':4124,'multiline':False]['text':' this could happen in tests','line_number':4130,'multiline':False]['text':' validate Pod SecurityContext','line_number':4241,'multiline':False]['text':' validate container security context','line_number':4281,'multiline':False]['text':' OS based podSecurityContext validation','line_number':4283,'multiline':False]['text':' There is some naming overlap between Windows and Linux Security Contexts but all the Windows Specific options','line_number':4284,'multiline':False]['text':' are set via securityContext.WindowsOptions which we validate below','line_number':4285,'multiline':False]['text':' TODO: Think if we need to relax this restriction or some of the restrictions','line_number':4286,'multiline':False]['text':' ValidateNodeSelectorRequirement tests that the specified NodeSelectorRequirement fields has valid data','line_number':4322,'multiline':False]['text':' ValidateNodeFieldSelectorRequirement tests that the specified NodeSelectorRequirement fields has valid data','line_number':4352,'multiline':False]['text':' ValidateNodeSelectorTerm tests that the specified node selector term has valid data','line_number':4379,'multiline':False]['text':' ValidateNodeSelector tests that the specified nodeSelector fields has valid data','line_number':4394,'multiline':False]['text':' validateTopologySelectorLabelRequirement tests that the specified TopologySelectorLabelRequirement fields has valid data,','line_number':4410,'multiline':False]['text':' and constructs a set containing all of its Values.','line_number':4411,'multiline':False]['text':' Validate set property of Values field','line_number':4420,'multiline':False]['text':' ValidateTopologySelectorTerm tests that the specified topology selector term has valid data,','line_number':4433,'multiline':False]['text':' and constructs a map representing the term in raw form.','line_number':4434,'multiline':False]['text':' Allow empty MatchLabelExpressions, in case this field becomes optional in the future.','line_number':4440,'multiline':False]['text':' Validate no duplicate keys exist.','line_number':4446,'multiline':False]['text':' ValidateAvoidPodsInNodeAnnotations tests that the serialized AvoidPods in Node.Annotations has valid data','line_number':4456,'multiline':False]['text':' validatePreferAvoidPodsEntry tests if given PreferAvoidPodsEntry has valid data.','line_number':4481,'multiline':False]['text':' ValidatePreferredSchedulingTerms tests that the specified SoftNodeAffinity fields has valid data','line_number':4496,'multiline':False]['text':' validatePodAffinityTerm tests that the specified podAffinityTerm fields have valid data','line_number':4510,'multiline':False]['text':' validatePodAffinityTerms tests that the specified podAffinityTerms fields have valid data','line_number':4527,'multiline':False]['text':' validateWeightedPodAffinityTerms tests that the specified weightedPodAffinityTerms fields have valid data','line_number':4536,'multiline':False]['text':' validatePodAntiAffinity tests that the specified podAntiAffinity fields have valid data','line_number':4548,'multiline':False]['text':' TODO:Uncomment below code once RequiredDuringSchedulingRequiredDuringExecution is implemented.','line_number':4551,'multiline':False]['text':' if podAntiAffinity.RequiredDuringSchedulingRequiredDuringExecution != nil {','line_number':4552,'multiline':False]['text':'	allErrs = append(allErrs, validatePodAffinityTerms(podAntiAffinity.RequiredDuringSchedulingRequiredDuringExecution, false,','line_number':4553,'multiline':False]['text':'		fldPath.Child("requiredDuringSchedulingRequiredDuringExecution"))...)','line_number':4554,'multiline':False]['text':' }','line_number':4555,'multiline':False]['text':' validateNodeAffinity tests that the specified nodeAffinity fields have valid data','line_number':4567,'multiline':False]['text':' TODO: Uncomment the next three lines once RequiredDuringSchedulingRequiredDuringExecution is implemented.','line_number':4570,'multiline':False]['text':' if na.RequiredDuringSchedulingRequiredDuringExecution != nil {','line_number':4571,'multiline':False]['text':'	allErrs = append(allErrs, ValidateNodeSelector(na.RequiredDuringSchedulingRequiredDuringExecution, fldPath.Child("requiredDuringSchedulingRequiredDuringExecution"))...)','line_number':4572,'multiline':False]['text':' }','line_number':4573,'multiline':False]['text':' validatePodAffinity tests that the specified podAffinity fields have valid data','line_number':4583,'multiline':False]['text':' TODO:Uncomment below code once RequiredDuringSchedulingRequiredDuringExecution is implemented.','line_number':4586,'multiline':False]['text':' if podAffinity.RequiredDuringSchedulingRequiredDuringExecution != nil {','line_number':4587,'multiline':False]['text':'	allErrs = append(allErrs, validatePodAffinityTerms(podAffinity.RequiredDuringSchedulingRequiredDuringExecution, false,','line_number':4588,'multiline':False]['text':'		fldPath.Child("requiredDuringSchedulingRequiredDuringExecution"))...)','line_number':4589,'multiline':False]['text':' }','line_number':4590,'multiline':False]['text':' ValidateSeccompProfileType tests that the argument is a valid SeccompProfileType.','line_number':4654,'multiline':False]['text':' a sysctl segment regex, concatenated with dots to form a sysctl name','line_number':4708,'multiline':False]['text':' a sysctl name regex with slash allowed','line_number':4711,'multiline':False]['text':' the maximal length of a sysctl name','line_number':4714,'multiline':False]['text':' IsValidSysctlName checks that the given string is a valid sysctl name,','line_number':4720,'multiline':False]['text':' i.e. matches SysctlContainSlashFmt.','line_number':4721,'multiline':False]['text':' More info:','line_number':4722,'multiline':False]['text':'','line_number':4723,'multiline':False]['text':'	https://man7.org/linux/man-pages/man8/sysctl.8.html','line_number':4724,'multiline':False]['text':'	https://man7.org/linux/man-pages/man5/sysctl.d.5.html','line_number':4725,'multiline':False]['text':' ValidateHostSysctl will return error if namespaced sysctls is applied to pod sharing the respective namespaces with the host.','line_number':4755,'multiline':False]['text':' validatePodSpecSecurityContext verifies the SecurityContext of a PodSpec,','line_number':4767,'multiline':False]['text':' whether that is defined in a Pod or in an embedded PodSpec (e.g. a','line_number':4768,'multiline':False]['text':' Deployment's pod template).','line_number':4769,'multiline':False]['text':' TODO: Pinpoint the specific container that causes the invalid error after we have strategic merge diff','line_number':4816,'multiline':False]['text':' validate updated container images','line_number':4821,'multiline':False]['text':' this is only called from ValidatePodUpdate so its safe to check leading/trailing whitespace.','line_number':4826,'multiline':False]['text':' ValidatePodCreate validates a pod in the context of its initial create','line_number':4834,'multiline':False]['text':' EphemeralContainers can only be set on update using the ephemeralcontainers subresource','line_number':4839,'multiline':False]['text':' A Pod cannot be assigned a Node if there are remaining scheduling gates.','line_number':4843,'multiline':False]['text':' validateSeccompAnnotationsAndFields iterates through all containers and ensure that when both seccompProfile and seccomp annotations exist they match.','line_number':4852,'multiline':False]['text':' If both seccomp annotations and fields are specified, the values must match.','line_number':4857,'multiline':False]['text':' TODO(vinaykul,InPlacePodVerticalScaling): Drop this var once InPlacePodVerticalScaling goes GA and featuregate is gone.','line_number':4927,'multiline':False]['text':' ValidatePodUpdate tests to see if the update is legal for an end user to make. newPod is updated with fields','line_number':4936,'multiline':False]['text':' that cannot be changed.','line_number':4937,'multiline':False]['text':' validate updateable fields:','line_number':4945,'multiline':False]['text':' 1.  spec.containers[*].image','line_number':4946,'multiline':False]['text':' 2.  spec.initContainers[*].image','line_number':4947,'multiline':False]['text':' 3.  spec.activeDeadlineSeconds','line_number':4948,'multiline':False]['text':' 4.  spec.terminationGracePeriodSeconds','line_number':4949,'multiline':False]['text':' 5.  spec.schedulingGates','line_number':4950,'multiline':False]['text':' validate updated spec.activeDeadlineSeconds.  two types of updates are allowed:','line_number':4963,'multiline':False]['text':' 1.  from nil to a positive value','line_number':4964,'multiline':False]['text':' 2.  from a positive value to a lesser, non-negative value','line_number':4965,'multiline':False]['text':' Allow only additions to tolerations updates.','line_number':4983,'multiline':False]['text':' Allow only deletions to schedulingGates updates.','line_number':4986,'multiline':False]['text':' the last thing to check is pod spec equality.  If the pod specs are equal, then we can simply return the errors we have','line_number':4989,'multiline':False]['text':' so far and save the cost of a deep copy.','line_number':4990,'multiline':False]['text':' handle updateable fields by munging those fields prior to deep equal comparison.','line_number':4999,'multiline':False]['text':' munge spec.containers[*].image','line_number':5001,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5004,'multiline':False]['text':' When the feature-gate is turned off, any new requests attempting to update CPU or memory','line_number':5005,'multiline':False]['text':' resource values will result in validation failure.','line_number':5006,'multiline':False]['text':' Resources are mutable for CPU & memory only','line_number':5008,'multiline':False]['text':'   - user can now modify Resources to express new desired Resources','line_number':5009,'multiline':False]['text':' munge spec.initContainers[*].image','line_number':5037,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5040,'multiline':False]['text':' munge spec.activeDeadlineSeconds','line_number':5044,'multiline':False]['text':' munge spec.schedulingGates','line_number':5050,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5051,'multiline':False]['text':' tolerations are checked before the deep copy, so munge those too','line_number':5052,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5053,'multiline':False]['text':' Relax validation of immutable fields to allow it to be set to 1 if it was previously negative.','line_number':5055,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5058,'multiline':False]['text':' Handle validations specific to gated pods.','line_number':5061,'multiline':False]['text':' Additions to spec.nodeSelector are allowed (no deletions or mutations) for gated pods.','line_number':5064,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5067,'multiline':False]['text':' Validate node affinity mutations.','line_number':5070,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5073,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5078,'multiline':False]['text':' already effectively nil, no change needed','line_number':5085,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5087,'multiline':False]['text':' We ensure no other fields are being changed, but the NodeAffinity. If that's the case, and the','line_number':5090,'multiline':False]['text':' old pod's affinity is nil, we set the mungedPodSpec's affinity to nil.','line_number':5091,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5092,'multiline':False]['text':' The node affinity is being updated and the old pod Affinity is not nil.','line_number':5094,'multiline':False]['text':' We set the mungedPodSpec's node affinity to the old pod's node affinity.','line_number':5095,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5096,'multiline':False]['text':' Note: Unlike NodeAffinity and NodeSelector, we cannot make PodAffinity/PodAntiAffinity mutable due to the presence of the matchLabelKeys/mismatchLabelKeys feature.','line_number':5100,'multiline':False]['text':' Those features automatically generate the matchExpressions in labelSelector for PodAffinity/PodAntiAffinity when the Pod is created.','line_number':5101,'multiline':False]['text':' When we make them mutable, we need to make sure things like how to handle/validate matchLabelKeys,','line_number':5102,'multiline':False]['text':' and what if the fieldManager/A sets matchexpressions and fieldManager/B sets matchLabelKeys later. (could it lead the understandable conflict, etc)','line_number':5103,'multiline':False]['text':' This diff isn't perfect, but it's a helluva lot better an "I'm not going to tell you what the difference is".','line_number':5107,'multiline':False]['text':' TODO: Pinpoint the specific field that causes the invalid error after we have strategic merge diff','line_number':5108,'multiline':False]['text':' ValidateContainerStateTransition test to if any illegal container state transitions are being attempted','line_number':5119,'multiline':False]['text':' If we should always restart, containers are allowed to leave the terminated state','line_number':5122,'multiline':False]['text':' Skip any container that is not terminated','line_number':5127,'multiline':False]['text':' Skip any container that failed but is allowed to restart','line_number':5131,'multiline':False]['text':' ValidatePodStatusUpdate checks for changes to status that shouldn't occur in normal operation.','line_number':5144,'multiline':False]['text':' If pod should not restart, make sure the status update does not transition','line_number':5162,'multiline':False]['text':' any terminated containers to a non-terminated state.','line_number':5163,'multiline':False]['text':' The kubelet will never restart ephemeral containers, so treat them like they have an implicit RestartPolicyNever.','line_number':5166,'multiline':False]['text':' validatePodConditions tests if the custom pod conditions are valid.','line_number':5181,'multiline':False]['text':' validatePodResourceClaimStatuses validates the ResourceClaimStatuses slice in a pod status.','line_number':5197,'multiline':False]['text':' There's no need to check the content of the name. If it matches an entry,','line_number':5204,'multiline':False]['text':' then it is valid, otherwise we reject it here.','line_number':5205,'multiline':False]['text':' ValidatePodEphemeralContainersUpdate tests that a user update to EphemeralContainers is valid.','line_number':5233,'multiline':False]['text':' newPod and oldPod must only differ in their EphemeralContainers.','line_number':5234,'multiline':False]['text':' Part 1: Validate newPod's spec and updates to metadata','line_number':5236,'multiline':False]['text':' static pods don't support ephemeral containers #113935','line_number':5242,'multiline':False]['text':' Part 2: Validate that the changes between oldPod.Spec.EphemeralContainers and','line_number':5247,'multiline':False]['text':' newPod.Spec.EphemeralContainers are allowed.','line_number':5248,'multiline':False]['text':'','line_number':5249,'multiline':False]['text':' Existing EphemeralContainers may not be changed. Order isn't preserved by patch, so check each individually.','line_number':5250,'multiline':False]['text':' ValidatePodBinding tests if required fields in the pod binding are legal.','line_number':5268,'multiline':False]['text':' TODO: When validation becomes versioned, this gets more complicated.','line_number':5273,'multiline':False]['text':' TODO: When validation becomes versioned, this gets more complicated.','line_number':5277,'multiline':False]['text':' ValidatePodTemplate tests if required fields in the pod template are set.','line_number':5284,'multiline':False]['text':' ValidatePodTemplateUpdate tests to see if the update is legal for an end user to make. newPod is updated with fields','line_number':5291,'multiline':False]['text':' that cannot be changed.','line_number':5292,'multiline':False]['text':' ValidateService tests if required fields/annotations of a Service are valid.','line_number':5311,'multiline':False]['text':' This is a workaround for broken cloud environments that','line_number':5333,'multiline':False]['text':' over-open firewalls.  Hopefully it can go away when more clouds','line_number':5334,'multiline':False]['text':' understand containers better.','line_number':5335,'multiline':False]['text':' must have  len(.spec.ClusterIPs) == 0 // note: strategy sets ClusterIPs based on ClusterIP','line_number':5349,'multiline':False]['text':' must have nil families and nil policy','line_number':5354,'multiline':False]['text':' The value (a CNAME) may have a trailing dot to denote it as fully qualified','line_number':5362,'multiline':False]['text':' dualstack <-> ClusterIPs <-> ipfamilies','line_number':5396,'multiline':False]['text':' Check for duplicate NodePorts, considering (protocol,port) pairs','line_number':5427,'multiline':False]['text':' Check for duplicate Ports, considering (protocol,port) pairs','line_number':5446,'multiline':False]['text':' Validate SourceRange field and annotation','line_number':5459,'multiline':False]['text':' validate LoadBalancerClass field','line_number':5488,'multiline':False]['text':' external traffic policy fields','line_number':5491,'multiline':False]['text':' internal traffic policy field','line_number':5494,'multiline':False]['text':' in the v1 API, targetPorts on headless services were tolerated.','line_number':5530,'multiline':False]['text':' once we have version-specific validation, we can reject this on newer API versions, but until then, we have to tolerate it for compatibility.','line_number':5531,'multiline':False]['text':'','line_number':5532,'multiline':False]['text':' if isHeadlessService {','line_number':5533,'multiline':False]['text':' 	if sp.TargetPort.Type == intstr.String || (sp.TargetPort.Type == intstr.Int && sp.Port != sp.TargetPort.IntValue()) {','line_number':5534,'multiline':False]['text':' 		allErrs = append(allErrs, field.Invalid(fldPath.Child("targetPort"), sp.TargetPort, "must be equal to the value of 'port' when clusterIP = None"))','line_number':5535,'multiline':False]['text':' 	}','line_number':5536,'multiline':False]['text':' }','line_number':5537,'multiline':False]['text':' validateServiceInternalTrafficFieldsValue validates InternalTraffic related','line_number':5593,'multiline':False]['text':' spec have legal value.','line_number':5594,'multiline':False]['text':' We do not forbid internalTrafficPolicy on other Service types because of historical reasons.','line_number':5599,'multiline':False]['text':' We did not check that before it went beta and we don't want to invalidate existing stored objects.','line_number':5600,'multiline':False]['text':' ValidateServiceCreate validates Services as they are created.','line_number':5614,'multiline':False]['text':' ValidateServiceUpdate tests if required fields in the service are set during an update','line_number':5619,'multiline':False]['text':' User can upgrade (add another clusterIP or ipFamily)','line_number':5623,'multiline':False]['text':'      can downgrade (remove secondary clusterIP or ipFamily)','line_number':5624,'multiline':False]['text':' but *CAN NOT* change primary/secondary clusterIP || ipFamily *UNLESS*','line_number':5625,'multiline':False]['text':' they are changing from/to/ON ExternalName','line_number':5626,'multiline':False]['text':' ValidateServiceStatusUpdate tests if required fields in the Service are set when updating status.','line_number':5642,'multiline':False]['text':' ValidateReplicationController tests if required fields in the replication controller are set.','line_number':5649,'multiline':False]['text':' ValidateReplicationControllerUpdate tests if required fields in the replication controller are set.','line_number':5656,'multiline':False]['text':' ValidateReplicationControllerStatusUpdate tests if required fields in the replication controller are set.','line_number':5663,'multiline':False]['text':' Validates that the given selector is non-empty.','line_number':5693,'multiline':False]['text':' Validates the given template and ensures that it is in accordance with the desired selector and replicas.','line_number':5703,'multiline':False]['text':' Verify that the RC selector matches the labels in template.','line_number':5711,'multiline':False]['text':' get rid of apivalidation.ValidateReadOnlyPersistentDisks,stop passing oldTemplate to this function','line_number':5718,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5721,'multiline':False]['text':' RestartPolicy has already been first-order validated as per ValidatePodTemplateSpec().','line_number':5726,'multiline':False]['text':' ValidateReplicationControllerSpec tests if required fields in the replication controller spec are set.','line_number':5737,'multiline':False]['text':' oldSpec is not empty, pass oldSpec.template.','line_number':5743,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':5746,'multiline':False]['text':' ValidatePodTemplateSpec validates the spec of a pod template','line_number':5752,'multiline':False]['text':' ValidateReadOnlyPersistentDisks stick this AFTER the short-circuit checks','line_number':5768,'multiline':False]['text':' ValidateTaintsInNodeAnnotations tests that the serialized taints in Node.Annotations has valid data','line_number':5795,'multiline':False]['text':' validateNodeTaints tests if given taints have valid data.','line_number':5812,'multiline':False]['text':' validate the taint key','line_number':5820,'multiline':False]['text':' validate the taint value','line_number':5822,'multiline':False]['text':' validate the taint effect','line_number':5826,'multiline':False]['text':' validate if taint is unique by <key, effect>','line_number':5829,'multiline':False]['text':' add taint to existingTaints for uniqueness check','line_number':5837,'multiline':False]['text':' ValidateNode tests if required fields in the node are set.','line_number':5859,'multiline':False]['text':' Only validate spec.','line_number':5868,'multiline':False]['text':' All status fields are optional and can be updated later.','line_number':5869,'multiline':False]['text':' That said, if specified, we need to ensure they are valid.','line_number':5870,'multiline':False]['text':' validate PodCIDRS only if we need to','line_number':5873,'multiline':False]['text':' all PodCIDRs should be valid ones','line_number':5877,'multiline':False]['text':' if more than PodCIDR then','line_number':5884,'multiline':False]['text':' - validate for dual stack','line_number':5885,'multiline':False]['text':' - validate for duplication','line_number':5886,'multiline':False]['text':' PodCIDRs must not contain duplicates','line_number':5896,'multiline':False]['text':' ValidateNodeResources is used to make sure a node has valid capacity and allocatable values.','line_number':5910,'multiline':False]['text':' Validate resource quantities in capacity.','line_number':5914,'multiline':False]['text':' Validate resource quantities in allocatable.','line_number':5920,'multiline':False]['text':' ValidateNodeUpdate tests to make sure a node update can be applied.  Modifies oldNode.','line_number':5928,'multiline':False]['text':' TODO: Enable the code once we have better core object.status update model. Currently,','line_number':5934,'multiline':False]['text':' anyone can update node status.','line_number':5935,'multiline':False]['text':' if !apiequality.Semantic.DeepEqual(node.Status, core.NodeStatus{}) {','line_number':5936,'multiline':False]['text':' 	allErrs = append(allErrs, field.Invalid("status", node.Status, "must be empty"))','line_number':5937,'multiline':False]['text':' }','line_number':5938,'multiline':False]['text':' Validate no duplicate addresses in node status.','line_number':5942,'multiline':False]['text':' Allow the controller manager to assign a CIDR to a node if it doesn't have one.','line_number':5951,'multiline':False]['text':' compare the entire slice','line_number':5953,'multiline':False]['text':' Allow controller manager updating provider ID when not set','line_number':5965,'multiline':False]['text':' update taints','line_number':5977,'multiline':False]['text':' status and metadata are allowed change (barring restrictions above), so separately test spec field.','line_number':5986,'multiline':False]['text':' spec only has a few fields, so check the ones we don't allow changing','line_number':5987,'multiline':False]['text':'  1. PodCIDRs - immutable after first set - checked above','line_number':5988,'multiline':False]['text':'  2. ProviderID - immutable after first set - checked above','line_number':5989,'multiline':False]['text':'  3. Unschedulable - allowed to change','line_number':5990,'multiline':False]['text':'  4. Taints - allowed to change','line_number':5991,'multiline':False]['text':'  5. ConfigSource - allowed to change (and checked above)','line_number':5992,'multiline':False]['text':'  6. DoNotUseExternalID - immutable - checked above','line_number':5993,'multiline':False]['text':' validation specific to Node.Spec.ConfigSource','line_number':5998,'multiline':False]['text':' The field ConfigSource is deprecated and will not be used. The validation is kept in place','line_number':5999,'multiline':False]['text':' for the backward compatibility','line_number':6000,'multiline':False]['text':' add more subfields here in the future as they are added to NodeConfigSource','line_number':6008,'multiline':False]['text':' exactly one reference subfield must be non-nil','line_number':6010,'multiline':False]['text':' validation specific to Node.Spec.ConfigSource.ConfigMap','line_number':6017,'multiline':False]['text':' The field ConfigSource is deprecated and will not be used. The validation is kept in place','line_number':6018,'multiline':False]['text':' for the backward compatibility','line_number':6019,'multiline':False]['text':' uid and resourceVersion must not be set in spec','line_number':6022,'multiline':False]['text':' validation specififc to Node.Status.Config','line_number':6032,'multiline':False]['text':' validation specific to Node.Status.Config.(Active|Assigned|LastKnownGood)','line_number':6047,'multiline':False]['text':' add more subfields here in the future as they are added to NodeConfigSource','line_number':6055,'multiline':False]['text':' exactly one reference subfield must be non-nil','line_number':6057,'multiline':False]['text':' validation specific to Node.Status.Config.(Active|Assigned|LastKnownGood).ConfigMap','line_number':6064,'multiline':False]['text':' uid and resourceVersion must be set in status','line_number':6067,'multiline':False]['text':' common validation','line_number':6077,'multiline':False]['text':' validate target configmap namespace','line_number':6080,'multiline':False]['text':' validate target configmap name','line_number':6088,'multiline':False]['text':' validate kubeletConfigKey against rules for configMap key names','line_number':6096,'multiline':False]['text':' Validate compute resource typename.','line_number':6107,'multiline':False]['text':' Refer to docs/design/resources.md for more details.','line_number':6108,'multiline':False]['text':' Validate container resource name','line_number':6127,'multiline':False]['text':' Refer to docs/design/resources.md for more details.','line_number':6128,'multiline':False]['text':' Validate resource names that can go in a resource quota','line_number':6144,'multiline':False]['text':' Refer to docs/design/resources.md for more details.','line_number':6145,'multiline':False]['text':' Validate limit range types','line_number':6157,'multiline':False]['text':' Validate limit range resource name','line_number':6176,'multiline':False]['text':' limit types (other than Pod/Container) could contain storage not just cpu or memory','line_number':6177,'multiline':False]['text':' ValidateLimitRange tests if required fields in the LimitRange are set.','line_number':6187,'multiline':False]['text':' ensure resource names are properly qualified per docs/design/resources.md','line_number':6191,'multiline':False]['text':' for GPU, hugepages and other resources that are not allowed to overcommit,','line_number':6305,'multiline':False]['text':' the default value and defaultRequest value must match if both are specified','line_number':6306,'multiline':False]['text':' ValidateServiceAccount tests if required fields in the ServiceAccount are set.','line_number':6316,'multiline':False]['text':' ValidateServiceAccountUpdate tests if required fields in the ServiceAccount are set.','line_number':6322,'multiline':False]['text':' ValidateSecret tests if required fields in the Secret are set.','line_number':6329,'multiline':False]['text':' Only require Annotations[kubernetes.io/service-account.name]','line_number':6347,'multiline':False]['text':' Additional fields (like Annotations[kubernetes.io/service-account.uid] and Data[token]) might be contributed later by a controller loop','line_number':6348,'multiline':False]['text':' no-op','line_number':6353,'multiline':False]['text':' make sure that the content is well-formed json.','line_number':6361,'multiline':False]['text':' make sure that the content is well-formed json.','line_number':6372,'multiline':False]['text':' username or password might be empty, but the field must be present','line_number':6380,'multiline':False]['text':' no-op','line_number':6400,'multiline':False]['text':' ValidateSecretUpdate tests if required fields in the Secret are set.','line_number':6406,'multiline':False]['text':' We don't validate StringData, as it was already converted back to Data','line_number':6418,'multiline':False]['text':' before validation is happening.','line_number':6419,'multiline':False]['text':' ValidateConfigMapName can be used to check whether the given ConfigMap name is valid.','line_number':6426,'multiline':False]['text':' Prefix indicates this name will be used as part of generation, in which case','line_number':6427,'multiline':False]['text':' trailing dashes are allowed.','line_number':6428,'multiline':False]['text':' ValidateConfigMap tests whether required fields in the ConfigMap are set.','line_number':6431,'multiline':False]['text':' check if we have a duplicate key in the other bag','line_number':6442,'multiline':False]['text':' pass back "" to indicate that the error refers to the whole object.','line_number':6456,'multiline':False]['text':' ValidateConfigMapUpdate tests if required fields in the ConfigMap are set.','line_number':6463,'multiline':False]['text':' Validates resource requirement spec.','line_number':6491,'multiline':False]['text':' Validate resource name.','line_number':6504,'multiline':False]['text':' Validate resource quantity.','line_number':6507,'multiline':False]['text':' Validate resource name.','line_number':6523,'multiline':False]['text':' Validate resource quantity.','line_number':6525,'multiline':False]['text':' Check that request <= limit.','line_number':6528,'multiline':False]['text':' For non overcommitable resources, not only requests can't exceed limits, they also can't be lower, i.e. must be equal.','line_number':6531,'multiline':False]['text':' validateResourceClaimNames checks that the names in','line_number':6560,'multiline':False]['text':' ResourceRequirements.Claims have a corresponding entry in','line_number':6561,'multiline':False]['text':' PodSpec.ResourceClaims.','line_number':6562,'multiline':False]['text':' field.NotFound doesn't accept an','line_number':6577,'multiline':False]['text':' explanation. Adding one here is more','line_number':6578,'multiline':False]['text':' user-friendly.','line_number':6579,'multiline':False]['text':' validateResourceQuotaScopes ensures that each enumerated hard resource constraint is valid for set of scopes','line_number':6606,'multiline':False]['text':' validateScopedResourceSelectorRequirement tests that the match expressions has valid data','line_number':6641,'multiline':False]['text':' validateScopeSelector tests that the specified scope selector has valid data','line_number':6696,'multiline':False]['text':' ValidateResourceQuota tests if required fields in the ResourceQuota are set.','line_number':6706,'multiline':False]['text':' ValidateResourceQuantityValue enforces that specified quantity is valid for specified resource','line_number':6751,'multiline':False]['text':' ValidateResourceQuotaUpdate tests to see if the update is legal for an end user to make.','line_number':6763,'multiline':False]['text':' ensure scopes cannot change, and that resources are still valid for scope','line_number':6768,'multiline':False]['text':' ValidateResourceQuotaStatusUpdate tests to see if the status update is legal for an end user to make.','line_number':6785,'multiline':False]['text':' ValidateNamespace tests if required fields are set.','line_number':6806,'multiline':False]['text':' Validate finalizer names','line_number':6815,'multiline':False]['text':' validateKubeFinalizerName checks for "standard" names of legacy finalizer','line_number':6822,'multiline':False]['text':' ValidateNamespaceUpdate tests to make sure a namespace update can be applied.','line_number':6834,'multiline':False]['text':' ValidateNamespaceStatusUpdate tests to see if the update is legal for an end user to make.','line_number':6840,'multiline':False]['text':' ValidateNamespaceFinalizeUpdate tests to see if the update is legal for an end user to make.','line_number':6855,'multiline':False]['text':' ValidateEndpoints validates Endpoints on create and update.','line_number':6867,'multiline':False]['text':' ValidateEndpointsCreate validates Endpoints on create.','line_number':6875,'multiline':False]['text':' ValidateEndpointsUpdate validates Endpoints on update. NodeName changes are','line_number':6880,'multiline':False]['text':' allowed during update to accommodate the case where nodeIP or PodCIDR is','line_number':6881,'multiline':False]['text':' reused. An existing endpoint ip will have a different nodeName if this','line_number':6882,'multiline':False]['text':' happens.','line_number':6883,'multiline':False]['text':' EndpointSubsets must include endpoint address. For headless service, we allow its endpoints not to have ports.','line_number':6896,'multiline':False]['text':' TODO: consider adding a RequiredOneOf() error for this and similar cases','line_number':6898,'multiline':False]['text':' During endpoint update, verify that NodeName is a DNS subdomain and transition rules allow the update','line_number':6923,'multiline':False]['text':' ValidateNonSpecialIP is used to validate Endpoints, EndpointSlices, and','line_number':6933,'multiline':False]['text':' external IPs. Specifically, this disallows unspecified and loopback addresses','line_number':6934,'multiline':False]['text':' are nonsensical and link-local addresses tend to be used for node-centric','line_number':6935,'multiline':False]['text':' purposes (e.g. metadata service).','line_number':6936,'multiline':False]['text':'','line_number':6937,'multiline':False]['text':' IPv6 references','line_number':6938,'multiline':False]['text':' - https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml','line_number':6939,'multiline':False]['text':' - https://www.iana.org/assignments/ipv6-multicast-addresses/ipv6-multicast-addresses.xhtml','line_number':6940,'multiline':False]['text':' ValidateSecurityContext ensures the security context contains valid settings','line_number':6984,'multiline':False]['text':' this should only be true for testing since SecurityContext is defaulted by the core','line_number':6987,'multiline':False]['text':' maxGMSACredentialSpecLength is the max length, in bytes, for the actual contents','line_number':7036,'multiline':False]['text':' of a GMSA cred spec. In general, those shouldn't be more than a few hundred bytes,','line_number':7037,'multiline':False]['text':' so we want to give plenty of room here while still providing an upper bound.','line_number':7038,'multiline':False]['text':' The runAsUserName field will be used to execute the given container's entrypoint, and','line_number':7039,'multiline':False]['text':' it can be formatted as "DOMAIN/USER", where the DOMAIN is optional, maxRunAsUserNameDomainLength','line_number':7040,'multiline':False]['text':' is the max character length for the user's DOMAIN, and maxRunAsUserNameUserLength','line_number':7041,'multiline':False]['text':' is the max character length for the USER itself. Both the DOMAIN and USER have their','line_number':7042,'multiline':False]['text':' own restrictions, and more information about them can be found here:','line_number':7043,'multiline':False]['text':' https://support.microsoft.com/en-us/help/909264/naming-conventions-in-active-directory-for-computers-domains-sites-and','line_number':7044,'multiline':False]['text':' https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/bb726984(v=technet.10)','line_number':7045,'multiline':False]['text':' control characters are not permitted in the runAsUserName field.','line_number':7054,'multiline':False]['text':' a valid NetBios Domain name cannot start with a dot, has at least 1 character,','line_number':7057,'multiline':False]['text':' at most 15 characters, and it cannot the characters: \ / : * ? " < > |','line_number':7058,'multiline':False]['text':' a valid DNS name contains only alphanumeric characters, dots, and dashes.','line_number':7061,'multiline':False]['text':' a username is invalid if it contains the characters: " / \ [ ] : ; | = , + * ? < > @','line_number':7066,'multiline':False]['text':' or it contains only dots or spaces.','line_number':7067,'multiline':False]['text':' gmsaCredentialSpecName must be the name of a custom resource','line_number':7080,'multiline':False]['text':' Keep track of container and hostProcess container count for validate','line_number':7154,'multiline':False]['text':' Container explicitly sets hostProcess=true','line_number':7183,'multiline':False]['text':' Container inherits hostProcess=true from pod settings','line_number':7186,'multiline':False]['text':' At present, if a Windows Pods contains any HostProcess containers than all containers must be','line_number':7194,'multiline':False]['text':' HostProcess containers (explicitly set or inherited).','line_number':7195,'multiline':False]['text':' At present Windows Pods which contain HostProcess containers must also set HostNetwork.','line_number':7201,'multiline':False]['text':' validateOS validates the OS field within pod spec','line_number':7216,'multiline':False]['text':' ValidateLoadBalancerStatus validates required fields on a LoadBalancerStatus','line_number':7255,'multiline':False]['text':' validateVolumeNodeAffinity tests that the PersistentVolume.NodeAffinity has valid data','line_number':7293,'multiline':False]['text':' returns:','line_number':7294,'multiline':False]['text':' - true if volumeNodeAffinity is set','line_number':7295,'multiline':False]['text':' - errorList if there are validation errors','line_number':7296,'multiline':False]['text':' ValidateCIDR validates whether a CIDR matches the conventions expected by net.ParseCIDR','line_number':7313,'multiline':False]['text':' ValidateProcMountType tests that the argument is a valid ProcMountType.','line_number':7332,'multiline':False]['text':' validateTopologySpreadConstraints validates given TopologySpreadConstraints.','line_number':7346,'multiline':False]['text':' tuple {topologyKey, whenUnsatisfiable} denotes one kind of spread constraint','line_number':7361,'multiline':False]['text':' ValidateMaxSkew tests that the argument is a valid MaxSkew.','line_number':7381,'multiline':False]['text':' validateMinDomains tests that the argument is a valid MinDomains.','line_number':7389,'multiline':False]['text':' When MinDomains is non-nil, whenUnsatisfiable must be DoNotSchedule.','line_number':7398,'multiline':False]['text':' ValidateTopologyKey tests that the argument is a valid TopologyKey.','line_number':7405,'multiline':False]['text':' ValidateWhenUnsatisfiable tests that the argument is a valid UnsatisfiableConstraintAction.','line_number':7413,'multiline':False]['text':' ValidateSpreadConstraintNotRepeat tests that if `constraint` duplicates with `existingConstraintPairs`','line_number':7421,'multiline':False]['text':' on TopologyKey and WhenUnsatisfiable fields.','line_number':7422,'multiline':False]['text':' validateNodeAffinityPolicy tests that the argument is a valid NodeInclusionPolicy.','line_number':7437,'multiline':False]['text':' validateMatchLabelKeysAndMismatchLabelKeys checks if both matchLabelKeys and mismatchLabelKeys are valid.','line_number':7449,'multiline':False]['text':' - validate that all matchLabelKeys and mismatchLabelKeys are valid label names.','line_number':7450,'multiline':False]['text':' - validate that the user doens't specify the same key in both matchLabelKeys and labelSelector.','line_number':7451,'multiline':False]['text':' - validate that any matchLabelKeys are not duplicated with mismatchLabelKeys.','line_number':7452,'multiline':False]['text':' 1. validate that all matchLabelKeys and mismatchLabelKeys are valid label names.','line_number':7455,'multiline':False]['text':' 2. validate that the user doens't specify the same key in both matchLabelKeys and labelSelector.','line_number':7459,'multiline':False]['text':' It doesn't make sense to have the labelselector with the key specified in matchLabelKeys','line_number':7460,'multiline':False]['text':' because the matchLabelKeys will be `In` labelSelector which matches with only one value in the key','line_number':7461,'multiline':False]['text':' and we cannot make any further filtering with that key.','line_number':7462,'multiline':False]['text':' On the other hand, we may want to have labelSelector with the key specified in mismatchLabelKeys.','line_number':7463,'multiline':False]['text':' because the mismatchLabelKeys will be `NotIn` labelSelector','line_number':7464,'multiline':False]['text':' and we may want to filter Pods further with other labelSelector with that key.','line_number':7465,'multiline':False]['text':' labelKeysMap is keyed by label key and valued by the index of label key in labelKeys.','line_number':7467,'multiline':False]['text':' Before validateLabelKeysWithSelector is called, the labelSelector has already got the selector created from matchLabelKeys.','line_number':7480,'multiline':False]['text':' Here, we found the duplicate key in labelSelector and the key is specified in labelKeys.','line_number':7481,'multiline':False]['text':' Meaning that the same key is specified in both labelSelector and matchLabelKeys/mismatchLabelKeys.','line_number':7482,'multiline':False]['text':' 3. validate that any matchLabelKeys are not duplicated with mismatchLabelKeys.','line_number':7490,'multiline':False]['text':' validateMatchLabelKeysInTopologySpread tests that the elements are a valid label name and are not already included in labelSelector.','line_number':7501,'multiline':False]['text':' validateLabelKeys tests that the label keys are a valid label name.','line_number':7531,'multiline':False]['text':' It's intended to be used for matchLabelKeys or mismatchLabelKeys.','line_number':7532,'multiline':False]['text':' ValidateServiceClusterIPsRelatedFields validates .spec.ClusterIPs,,','line_number':7550,'multiline':False]['text':' .spec.IPFamilies, .spec.ipFamilyPolicy.  This is exported because it is used','line_number':7551,'multiline':False]['text':' during IP init and allocation.','line_number':7552,'multiline':False]['text':' ClusterIP, ClusterIPs, IPFamilyPolicy and IPFamilies are validated prior (all must be unset) for ExternalName service','line_number':7554,'multiline':False]['text':' Make sure ClusterIP and ClusterIPs are synced.  For most cases users can','line_number':7567,'multiline':False]['text':' just manage one or the other and we'll handle the rest (see PrepareFor*','line_number':7568,'multiline':False]['text':' in strategy).','line_number':7569,'multiline':False]['text':' If ClusterIP is set, ClusterIPs[0] must match.','line_number':7571,'multiline':False]['text':' ClusterIP == ""','line_number':7577,'multiline':False]['text':' If ClusterIP is not set, ClusterIPs must also be unset.','line_number':7578,'multiline':False]['text':' ipfamilies stand alone validation','line_number':7584,'multiline':False]['text':' must be either IPv4 or IPv6','line_number':7585,'multiline':False]['text':' no duplicate check also ensures that ipfamilies is dualstacked, in any order','line_number':7591,'multiline':False]['text':' IPFamilyPolicy stand alone validation','line_number':7598,'multiline':False]['text':' note: nil is ok, defaulted in alloc check registry/core/service/*','line_number':7599,'multiline':False]['text':' must have a supported value','line_number':7601,'multiline':False]['text':' clusterIPs stand alone validation','line_number':7607,'multiline':False]['text':' valid ips with None and empty string handling','line_number':7608,'multiline':False]['text':' duplication check is done as part of DualStackvalidation below','line_number':7609,'multiline':False]['text':' valid at first location only. if and only if len(clusterIPs) == 1','line_number':7611,'multiline':False]['text':' is it valid ip?','line_number':7620,'multiline':False]['text':' max two','line_number':7628,'multiline':False]['text':' at this stage if there is an invalid ip or misplaced none/empty string','line_number':7633,'multiline':False]['text':' it will skew the error messages (bad index || dualstackness of already bad ips). so we','line_number':7634,'multiline':False]['text':' stop here if there are errors in clusterIPs validation','line_number':7635,'multiline':False]['text':' must be dual stacked ips if they are more than one ip','line_number':7640,'multiline':False]['text':' meaning: it does not have a None or empty string ','line_number':7641,'multiline':True]['text':' though we check for that earlier. safe > sorry','line_number':7643,'multiline':False]['text':' We only support one from each IP family (i.e. max two IPs in this list).','line_number':7647,'multiline':False]['text':' match clusterIPs to their families, if they were provided','line_number':7653,'multiline':False]['text':' no more families to check','line_number':7657,'multiline':False]['text':' 4=>6','line_number':7660,'multiline':False]['text':' 6=>4','line_number':7664,'multiline':False]['text':' specific validation for clusterIPs in cases of user upgrading or downgrading to/from dualstack','line_number':7674,'multiline':False]['text':' bail out early for ExternalName','line_number':7678,'multiline':False]['text':' no change in ClusterIP lengths','line_number':7690,'multiline':False]['text':' compare each','line_number':7691,'multiline':False]['text':' something has been released (downgraded)','line_number':7699,'multiline':False]['text':' primary ClusterIP has been released','line_number':7701,'multiline':False]['text':' test if primary clusterIP has changed','line_number':7706,'multiline':False]['text':' test if secondary ClusterIP has been released. has this service been downgraded correctly?','line_number':7713,'multiline':False]['text':' user *must* set IPFamilyPolicy == SingleStack','line_number':7714,'multiline':False]['text':' something has been added (upgraded)','line_number':7721,'multiline':False]['text':' test if primary clusterIP has changed','line_number':7722,'multiline':False]['text':' we don't check for Policy == RequireDualStack here since, Validation/Creation func takes care of it','line_number':7727,'multiline':False]['text':' specific validation for ipFamilies in cases of user upgrading or downgrading to/from dualstack','line_number':7732,'multiline':False]['text':' bail out early for ExternalName','line_number':7735,'multiline':False]['text':' if changed to/from headless, then bail out','line_number':7743,'multiline':False]['text':' headless can change families','line_number':7747,'multiline':False]['text':' no change in ClusterIP lengths','line_number':7754,'multiline':False]['text':' compare each','line_number':7755,'multiline':False]['text':' something has been released (downgraded)','line_number':7764,'multiline':False]['text':' test if primary ipfamily has been released','line_number':7766,'multiline':False]['text':' test if primary ipFamily has changed','line_number':7771,'multiline':False]['text':' test if secondary IPFamily has been released. has this service been downgraded correctly?','line_number':7777,'multiline':False]['text':' user *must* set IPFamilyPolicy == SingleStack','line_number':7778,'multiline':False]['text':' something has been added (upgraded)','line_number':7785,'multiline':False]['text':' test if primary ipFamily has changed','line_number':7787,'multiline':False]['text':' we don't check for Policy == RequireDualStack here since, Validation/Creation func takes care of it','line_number':7793,'multiline':False]['text':' validateLoadBalancerClassField validation for loadBalancerClass','line_number':7804,'multiline':False]['text':' validate update op','line_number':7808,'multiline':False]['text':' old and new are both LoadBalancer','line_number':7810,'multiline':False]['text':' can't change loadBalancerClass','line_number':7812,'multiline':False]['text':' check LoadBalancerClass format','line_number':7819,'multiline':False]['text':' check if LoadBalancerClass set for non LoadBalancer type of service','line_number':7824,'multiline':False]['text':' isTypeLoadBalancer tests service type is loadBalancer or not','line_number':7832,'multiline':False]['text':' sameLoadBalancerClass check two services have the same loadBalancerClass or not','line_number':7837,'multiline':False]['text':' allow newReq to change to a GA key','line_number':7874,'multiline':False]['text':' +k8s:verify-mutation:reason=clone','line_number':7876,'multiline':False]['text':' Validate no existing node selectors were deleted or mutated.','line_number':7900,'multiline':False]['text':' If old node affinity was nil, anything can be set.','line_number':7912,'multiline':False]['text':' If there are no old terms, we can set the new terms to anything.','line_number':7923,'multiline':False]['text':' If there are old terms, we cannot add any new ones.','line_number':7924,'multiline':False]['text':' For requiredDuringSchedulingIgnoredDuringExecution, if old NodeSelectorTerms','line_number':7929,'multiline':False]['text':' was empty, anything can be set. If non-empty, only additions of NodeSelectorRequirements','line_number':7930,'multiline':False]['text':' to matchExpressions or fieldExpressions are allowed.','line_number':7931,'multiline':False]['text':' Validate MatchExpressions only has additions (no deletions or mutations)','line_number':7947,'multiline':False]['text':' Validate MatchFields only has additions (no deletions or mutations)','line_number':7956,'multiline':False]