['text':' Copyright 2020 The Go Authors. All rights reserved.','line_number':1,'multiline':False]['text':' Use of this source code is governed by a BSD-style','line_number':2,'multiline':False]['text':' license that can be found in the LICENSE file.','line_number':3,'multiline':False]['text':'go:generate stringer -type=ErrorCode','line_number':7,'multiline':False]['text':' This file defines the error codes that can be produced during type-checking.','line_number':11,'multiline':False]['text':' Collectively, these codes provide an identifier that may be used to','line_number':12,'multiline':False]['text':' implement special handling for certain types of errors.','line_number':13,'multiline':False]['text':'','line_number':14,'multiline':False]['text':' Error codes should be fine-grained enough that the exact nature of the error','line_number':15,'multiline':False]['text':' can be easily determined, but coarse enough that they are not an','line_number':16,'multiline':False]['text':' implementation detail of the type checking algorithm. As a rule-of-thumb,','line_number':17,'multiline':False]['text':' errors should be considered equivalent if there is a theoretical refactoring','line_number':18,'multiline':False]['text':' of the type checker in which they are emitted in exactly one place. For','line_number':19,'multiline':False]['text':' example, the type checker emits different error messages for "too many','line_number':20,'multiline':False]['text':' arguments" and "too few arguments", but one can imagine an alternative type','line_number':21,'multiline':False]['text':' checker where this check instead just emits a single "wrong number of','line_number':22,'multiline':False]['text':' arguments", so these errors should have the same code.','line_number':23,'multiline':False]['text':'','line_number':24,'multiline':False]['text':' Error code names should be as brief as possible while retaining accuracy and','line_number':25,'multiline':False]['text':' distinctiveness. In most cases names should start with an adjective','line_number':26,'multiline':False]['text':' describing the nature of the error (e.g. "invalid", "unused", "misplaced"),','line_number':27,'multiline':False]['text':' and end with a noun identifying the relevant language object. For example,','line_number':28,'multiline':False]['text':' "DuplicateDecl" or "InvalidSliceExpr". For brevity, naming follows the','line_number':29,'multiline':False]['text':' convention that "bad" implies a problem with syntax, and "invalid" implies a','line_number':30,'multiline':False]['text':' problem with types.','line_number':31,'multiline':False]['text':' InvalidSyntaxTree occurs if an invalid syntax tree is provided','line_number':34,'multiline':False]['text':' to the type checker. It should never happen.','line_number':35,'multiline':False]['text':' Test is reserved for errors that only apply while in self-test mode.','line_number':42,'multiline':False]['text':' package names ','line_number':45,'multiline':True]['text':' BlankPkgName occurs when a package name is the blank identifier "_".','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' Per the spec:','line_number':49,'multiline':False]['text':'  "The PackageName must not be the blank identifier."','line_number':50,'multiline':False]['text':' MismatchedPkgName occurs when a file's package name doesn't match the','line_number':53,'multiline':False]['text':' package name already established by other files.','line_number':54,'multiline':False]['text':' InvalidPkgUse occurs when a package identifier is used outside of a','line_number':57,'multiline':False]['text':' selector expression.','line_number':58,'multiline':False]['text':'','line_number':59,'multiline':False]['text':' Example:','line_number':60,'multiline':False]['text':'  import "fmt"','line_number':61,'multiline':False]['text':'','line_number':62,'multiline':False]['text':'  var _ = fmt','line_number':63,'multiline':False]['text':' imports ','line_number':66,'multiline':True]['text':' BadImportPath occurs when an import path is not valid.','line_number':68,'multiline':False]['text':' BrokenImport occurs when importing a package fails.','line_number':71,'multiline':False]['text':'','line_number':72,'multiline':False]['text':' Example:','line_number':73,'multiline':False]['text':'  import "amissingpackage"','line_number':74,'multiline':False]['text':' ImportCRenamed occurs when the special import "C" is renamed. "C" is a','line_number':77,'multiline':False]['text':' pseudo-package, and must not be renamed.','line_number':78,'multiline':False]['text':'','line_number':79,'multiline':False]['text':' Example:','line_number':80,'multiline':False]['text':'  import _ "C"','line_number':81,'multiline':False]['text':' UnusedImport occurs when an import is unused.','line_number':84,'multiline':False]['text':'','line_number':85,'multiline':False]['text':' Example:','line_number':86,'multiline':False]['text':'  import "fmt"','line_number':87,'multiline':False]['text':'','line_number':88,'multiline':False]['text':'  func main() {}','line_number':89,'multiline':False]['text':' initialization ','line_number':92,'multiline':True]['text':' InvalidInitCycle occurs when an invalid cycle is detected within the','line_number':94,'multiline':False]['text':' initialization graph.','line_number':95,'multiline':False]['text':'','line_number':96,'multiline':False]['text':' Example:','line_number':97,'multiline':False]['text':'  var x int = f()','line_number':98,'multiline':False]['text':'','line_number':99,'multiline':False]['text':'  func f() int { return x }','line_number':100,'multiline':False]['text':' decls ','line_number':103,'multiline':True]['text':' DuplicateDecl occurs when an identifier is declared multiple times.','line_number':105,'multiline':False]['text':'','line_number':106,'multiline':False]['text':' Example:','line_number':107,'multiline':False]['text':'  var x = 1','line_number':108,'multiline':False]['text':'  var x = 2','line_number':109,'multiline':False]['text':' InvalidDeclCycle occurs when a declaration cycle is not valid.','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':' Example:','line_number':114,'multiline':False]['text':'  import "unsafe"','line_number':115,'multiline':False]['text':'','line_number':116,'multiline':False]['text':'  type T struct {','line_number':117,'multiline':False]['text':'  	a [n]int','line_number':118,'multiline':False]['text':'  }','line_number':119,'multiline':False]['text':'','line_number':120,'multiline':False]['text':'  var n = unsafe.Sizeof(T{})','line_number':121,'multiline':False]['text':' InvalidTypeCycle occurs when a cycle in type definitions results in a','line_number':124,'multiline':False]['text':' type that is not well-defined.','line_number':125,'multiline':False]['text':'','line_number':126,'multiline':False]['text':' Example:','line_number':127,'multiline':False]['text':'  import "unsafe"','line_number':128,'multiline':False]['text':'','line_number':129,'multiline':False]['text':'  type T [unsafe.Sizeof(T{})]int','line_number':130,'multiline':False]['text':' decls > const ','line_number':133,'multiline':True]['text':' InvalidConstInit occurs when a const declaration has a non-constant','line_number':135,'multiline':False]['text':' initializer.','line_number':136,'multiline':False]['text':'','line_number':137,'multiline':False]['text':' Example:','line_number':138,'multiline':False]['text':'  var x int','line_number':139,'multiline':False]['text':'  const _ = x','line_number':140,'multiline':False]['text':' InvalidConstVal occurs when a const value cannot be converted to its','line_number':143,'multiline':False]['text':' target type.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' TODO(findleyr): this error code and example are not very clear. Consider','line_number':146,'multiline':False]['text':' removing it.','line_number':147,'multiline':False]['text':'','line_number':148,'multiline':False]['text':' Example:','line_number':149,'multiline':False]['text':'  const _ = 1 << "hello"','line_number':150,'multiline':False]['text':' InvalidConstType occurs when the underlying type in a const declaration','line_number':153,'multiline':False]['text':' is not a valid constant type.','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':' Example:','line_number':156,'multiline':False]['text':'  const c *int = 4','line_number':157,'multiline':False]['text':' decls > var (+ other variable assignment codes) ','line_number':160,'multiline':True]['text':' UntypedNilUse occurs when the predeclared (untyped) value nil is used to','line_number':162,'multiline':False]['text':' initialize a variable declared without an explicit type.','line_number':163,'multiline':False]['text':'','line_number':164,'multiline':False]['text':' Example:','line_number':165,'multiline':False]['text':'  var x = nil','line_number':166,'multiline':False]['text':' WrongAssignCount occurs when the number of values on the right-hand side','line_number':169,'multiline':False]['text':' of an assignment or or initialization expression does not match the number','line_number':170,'multiline':False]['text':' of variables on the left-hand side.','line_number':171,'multiline':False]['text':'','line_number':172,'multiline':False]['text':' Example:','line_number':173,'multiline':False]['text':'  var x = 1, 2','line_number':174,'multiline':False]['text':' UnassignableOperand occurs when the left-hand side of an assignment is','line_number':177,'multiline':False]['text':' not assignable.','line_number':178,'multiline':False]['text':'','line_number':179,'multiline':False]['text':' Example:','line_number':180,'multiline':False]['text':'  func f() {','line_number':181,'multiline':False]['text':'  	const c = 1','line_number':182,'multiline':False]['text':'  	c = 2','line_number':183,'multiline':False]['text':'  }','line_number':184,'multiline':False]['text':' NoNewVar occurs when a short variable declaration (':=') does not declare','line_number':187,'multiline':False]['text':' new variables.','line_number':188,'multiline':False]['text':'','line_number':189,'multiline':False]['text':' Example:','line_number':190,'multiline':False]['text':'  func f() {','line_number':191,'multiline':False]['text':'  	x := 1','line_number':192,'multiline':False]['text':'  	x := 2','line_number':193,'multiline':False]['text':'  }','line_number':194,'multiline':False]['text':' MultiValAssignOp occurs when an assignment operation (+=, *=, etc) does','line_number':197,'multiline':False]['text':' not have single-valued left-hand or right-hand side.','line_number':198,'multiline':False]['text':'','line_number':199,'multiline':False]['text':' Per the spec:','line_number':200,'multiline':False]['text':'  "In assignment operations, both the left- and right-hand expression lists','line_number':201,'multiline':False]['text':'  must contain exactly one single-valued expression"','line_number':202,'multiline':False]['text':'','line_number':203,'multiline':False]['text':' Example:','line_number':204,'multiline':False]['text':'  func f() int {','line_number':205,'multiline':False]['text':'  	x, y := 1, 2','line_number':206,'multiline':False]['text':'  	x, y += 1','line_number':207,'multiline':False]['text':'  	return x + y','line_number':208,'multiline':False]['text':'  }','line_number':209,'multiline':False]['text':' InvalidIfaceAssign occurs when a value of type T is used as an','line_number':212,'multiline':False]['text':' interface, but T does not implement a method of the expected interface.','line_number':213,'multiline':False]['text':'','line_number':214,'multiline':False]['text':' Example:','line_number':215,'multiline':False]['text':'  type I interface {','line_number':216,'multiline':False]['text':'  	f()','line_number':217,'multiline':False]['text':'  }','line_number':218,'multiline':False]['text':'','line_number':219,'multiline':False]['text':'  type T int','line_number':220,'multiline':False]['text':'','line_number':221,'multiline':False]['text':'  var x I = T(1)','line_number':222,'multiline':False]['text':' InvalidChanAssign occurs when a chan assignment is invalid.','line_number':225,'multiline':False]['text':'','line_number':226,'multiline':False]['text':' Per the spec, a value x is assignable to a channel type T if:','line_number':227,'multiline':False]['text':'  "x is a bidirectional channel value, T is a channel type, x's type V and','line_number':228,'multiline':False]['text':'  T have identical element types, and at least one of V or T is not a','line_number':229,'multiline':False]['text':'  defined type."','line_number':230,'multiline':False]['text':'','line_number':231,'multiline':False]['text':' Example:','line_number':232,'multiline':False]['text':'  type T1 chan int','line_number':233,'multiline':False]['text':'  type T2 chan int','line_number':234,'multiline':False]['text':'','line_number':235,'multiline':False]['text':'  var x T1','line_number':236,'multiline':False]['text':'  // Invalid assignment because both types are named','line_number':237,'multiline':False]['text':'  var _ T2 = x','line_number':238,'multiline':False]['text':' IncompatibleAssign occurs when the type of the right-hand side expression','line_number':241,'multiline':False]['text':' in an assignment cannot be assigned to the type of the variable being','line_number':242,'multiline':False]['text':' assigned.','line_number':243,'multiline':False]['text':'','line_number':244,'multiline':False]['text':' Example:','line_number':245,'multiline':False]['text':'  var x []int','line_number':246,'multiline':False]['text':'  var _ int = x','line_number':247,'multiline':False]['text':' UnaddressableFieldAssign occurs when trying to assign to a struct field','line_number':250,'multiline':False]['text':' in a map value.','line_number':251,'multiline':False]['text':'','line_number':252,'multiline':False]['text':' Example:','line_number':253,'multiline':False]['text':'  func f() {','line_number':254,'multiline':False]['text':'  	m := make(map[string]struct{i int})','line_number':255,'multiline':False]['text':'  	m["foo"].i = 42','line_number':256,'multiline':False]['text':'  }','line_number':257,'multiline':False]['text':' decls > type (+ other type expression codes) ','line_number':260,'multiline':True]['text':' NotAType occurs when the identifier used as the underlying type in a type','line_number':262,'multiline':False]['text':' declaration or the right-hand side of a type alias does not denote a type.','line_number':263,'multiline':False]['text':'','line_number':264,'multiline':False]['text':' Example:','line_number':265,'multiline':False]['text':'  var S = 2','line_number':266,'multiline':False]['text':'','line_number':267,'multiline':False]['text':'  type T S','line_number':268,'multiline':False]['text':' InvalidArrayLen occurs when an array length is not a constant value.','line_number':271,'multiline':False]['text':'','line_number':272,'multiline':False]['text':' Example:','line_number':273,'multiline':False]['text':'  var n = 3','line_number':274,'multiline':False]['text':'  var _ = [n]int{}','line_number':275,'multiline':False]['text':' BlankIfaceMethod occurs when a method name is '_'.','line_number':278,'multiline':False]['text':'','line_number':279,'multiline':False]['text':' Per the spec:','line_number':280,'multiline':False]['text':'  "The name of each explicitly specified method must be unique and not','line_number':281,'multiline':False]['text':'  blank."','line_number':282,'multiline':False]['text':'','line_number':283,'multiline':False]['text':' Example:','line_number':284,'multiline':False]['text':'  type T interface {','line_number':285,'multiline':False]['text':'  	_(int)','line_number':286,'multiline':False]['text':'  }','line_number':287,'multiline':False]['text':' IncomparableMapKey occurs when a map key type does not support the == and','line_number':290,'multiline':False]['text':' != operators.','line_number':291,'multiline':False]['text':'','line_number':292,'multiline':False]['text':' Per the spec:','line_number':293,'multiline':False]['text':'  "The comparison operators == and != must be fully defined for operands of','line_number':294,'multiline':False]['text':'  the key type; thus the key type must not be a function, map, or slice."','line_number':295,'multiline':False]['text':'','line_number':296,'multiline':False]['text':' Example:','line_number':297,'multiline':False]['text':'  var x map[T]int','line_number':298,'multiline':False]['text':'','line_number':299,'multiline':False]['text':'  type T []int','line_number':300,'multiline':False]['text':' InvalidIfaceEmbed occurs when a non-interface type is embedded in an','line_number':303,'multiline':False]['text':' interface.','line_number':304,'multiline':False]['text':'','line_number':305,'multiline':False]['text':' Example:','line_number':306,'multiline':False]['text':'  type T struct {}','line_number':307,'multiline':False]['text':'','line_number':308,'multiline':False]['text':'  func (T) m()','line_number':309,'multiline':False]['text':'','line_number':310,'multiline':False]['text':'  type I interface {','line_number':311,'multiline':False]['text':'  	T','line_number':312,'multiline':False]['text':'  }','line_number':313,'multiline':False]['text':' InvalidPtrEmbed occurs when an embedded field is of the pointer form *T,','line_number':316,'multiline':False]['text':' and T itself is itself a pointer, an unsafe.Pointer, or an interface.','line_number':317,'multiline':False]['text':'','line_number':318,'multiline':False]['text':' Per the spec:','line_number':319,'multiline':False]['text':'  "An embedded field must be specified as a type name T or as a pointer to','line_number':320,'multiline':False]['text':'  a non-interface type name *T, and T itself may not be a pointer type."','line_number':321,'multiline':False]['text':'','line_number':322,'multiline':False]['text':' Example:','line_number':323,'multiline':False]['text':'  type T *int','line_number':324,'multiline':False]['text':'','line_number':325,'multiline':False]['text':'  type S struct {','line_number':326,'multiline':False]['text':'  	*T','line_number':327,'multiline':False]['text':'  }','line_number':328,'multiline':False]['text':' decls > func and method ','line_number':331,'multiline':True]['text':' BadRecv occurs when a method declaration does not have exactly one','line_number':333,'multiline':False]['text':' receiver parameter.','line_number':334,'multiline':False]['text':'','line_number':335,'multiline':False]['text':' Example:','line_number':336,'multiline':False]['text':'  func () _() {}','line_number':337,'multiline':False]['text':' InvalidRecv occurs when a receiver type expression is not of the form T','line_number':340,'multiline':False]['text':' or *T, or T is a pointer type.','line_number':341,'multiline':False]['text':'','line_number':342,'multiline':False]['text':' Example:','line_number':343,'multiline':False]['text':'  type T struct {}','line_number':344,'multiline':False]['text':'','line_number':345,'multiline':False]['text':'  func (**T) m() {}','line_number':346,'multiline':False]['text':' DuplicateFieldAndMethod occurs when an identifier appears as both a field','line_number':349,'multiline':False]['text':' and method name.','line_number':350,'multiline':False]['text':'','line_number':351,'multiline':False]['text':' Example:','line_number':352,'multiline':False]['text':'  type T struct {','line_number':353,'multiline':False]['text':'  	m int','line_number':354,'multiline':False]['text':'  }','line_number':355,'multiline':False]['text':'','line_number':356,'multiline':False]['text':'  func (T) m() {}','line_number':357,'multiline':False]['text':' DuplicateMethod occurs when two methods on the same receiver type have','line_number':360,'multiline':False]['text':' the same name.','line_number':361,'multiline':False]['text':'','line_number':362,'multiline':False]['text':' Example:','line_number':363,'multiline':False]['text':'  type T struct {}','line_number':364,'multiline':False]['text':'  func (T) m() {}','line_number':365,'multiline':False]['text':'  func (T) m(i int) int { return i }','line_number':366,'multiline':False]['text':' decls > special ','line_number':369,'multiline':True]['text':' InvalidBlank occurs when a blank identifier is used as a value or type.','line_number':371,'multiline':False]['text':'','line_number':372,'multiline':False]['text':' Per the spec:','line_number':373,'multiline':False]['text':'  "The blank identifier may appear as an operand only on the left-hand side','line_number':374,'multiline':False]['text':'  of an assignment."','line_number':375,'multiline':False]['text':'','line_number':376,'multiline':False]['text':' Example:','line_number':377,'multiline':False]['text':'  var x = _','line_number':378,'multiline':False]['text':' InvalidIota occurs when the predeclared identifier iota is used outside','line_number':381,'multiline':False]['text':' of a constant declaration.','line_number':382,'multiline':False]['text':'','line_number':383,'multiline':False]['text':' Example:','line_number':384,'multiline':False]['text':'  var x = iota','line_number':385,'multiline':False]['text':' MissingInitBody occurs when an init function is missing its body.','line_number':388,'multiline':False]['text':'','line_number':389,'multiline':False]['text':' Example:','line_number':390,'multiline':False]['text':'  func init()','line_number':391,'multiline':False]['text':' InvalidInitSig occurs when an init function declares parameters or','line_number':394,'multiline':False]['text':' results.','line_number':395,'multiline':False]['text':'','line_number':396,'multiline':False]['text':' Example:','line_number':397,'multiline':False]['text':'  func init() int { return 1 }','line_number':398,'multiline':False]['text':' InvalidInitDecl occurs when init is declared as anything other than a','line_number':401,'multiline':False]['text':' function.','line_number':402,'multiline':False]['text':'','line_number':403,'multiline':False]['text':' Example:','line_number':404,'multiline':False]['text':'  var init = 1','line_number':405,'multiline':False]['text':' InvalidMainDecl occurs when main is declared as anything other than a','line_number':408,'multiline':False]['text':' function, in a main package.','line_number':409,'multiline':False]['text':' exprs ','line_number':412,'multiline':True]['text':' TooManyValues occurs when a function returns too many values for the','line_number':414,'multiline':False]['text':' expression context in which it is used.','line_number':415,'multiline':False]['text':'','line_number':416,'multiline':False]['text':' Example:','line_number':417,'multiline':False]['text':'  func ReturnTwo() (int, int) {','line_number':418,'multiline':False]['text':'  	return 1, 2','line_number':419,'multiline':False]['text':'  }','line_number':420,'multiline':False]['text':'','line_number':421,'multiline':False]['text':'  var x = ReturnTwo()','line_number':422,'multiline':False]['text':' NotAnExpr occurs when a type expression is used where a value expression','line_number':425,'multiline':False]['text':' is expected.','line_number':426,'multiline':False]['text':'','line_number':427,'multiline':False]['text':' Example:','line_number':428,'multiline':False]['text':'  type T struct {}','line_number':429,'multiline':False]['text':'','line_number':430,'multiline':False]['text':'  func f() {','line_number':431,'multiline':False]['text':'  	T','line_number':432,'multiline':False]['text':'  }','line_number':433,'multiline':False]['text':' exprs > const ','line_number':436,'multiline':True]['text':' TruncatedFloat occurs when a float constant is truncated to an integer','line_number':438,'multiline':False]['text':' value.','line_number':439,'multiline':False]['text':'','line_number':440,'multiline':False]['text':' Example:','line_number':441,'multiline':False]['text':'  var _ int = 98.6','line_number':442,'multiline':False]['text':' NumericOverflow occurs when a numeric constant overflows its target type.','line_number':445,'multiline':False]['text':'','line_number':446,'multiline':False]['text':' Example:','line_number':447,'multiline':False]['text':'  var x int8 = 1000','line_number':448,'multiline':False]['text':' exprs > operation ','line_number':451,'multiline':True]['text':' UndefinedOp occurs when an operator is not defined for the type(s) used','line_number':453,'multiline':False]['text':' in an operation.','line_number':454,'multiline':False]['text':'','line_number':455,'multiline':False]['text':' Example:','line_number':456,'multiline':False]['text':'  var c = "a" - "b"','line_number':457,'multiline':False]['text':' MismatchedTypes occurs when operand types are incompatible in a binary','line_number':460,'multiline':False]['text':' operation.','line_number':461,'multiline':False]['text':'','line_number':462,'multiline':False]['text':' Example:','line_number':463,'multiline':False]['text':'  var a = "hello"','line_number':464,'multiline':False]['text':'  var b = 1','line_number':465,'multiline':False]['text':'  var c = a - b','line_number':466,'multiline':False]['text':' DivByZero occurs when a division operation is provable at compile','line_number':469,'multiline':False]['text':' time to be a division by zero.','line_number':470,'multiline':False]['text':'','line_number':471,'multiline':False]['text':' Example:','line_number':472,'multiline':False]['text':'  const divisor = 0','line_number':473,'multiline':False]['text':'  var x int = 1/divisor','line_number':474,'multiline':False]['text':' NonNumericIncDec occurs when an increment or decrement operator is','line_number':477,'multiline':False]['text':' applied to a non-numeric value.','line_number':478,'multiline':False]['text':'','line_number':479,'multiline':False]['text':' Example:','line_number':480,'multiline':False]['text':'  func f() {','line_number':481,'multiline':False]['text':'  	var c = "c"','line_number':482,'multiline':False]['text':'  	c++','line_number':483,'multiline':False]['text':'  }','line_number':484,'multiline':False]['text':' exprs > ptr ','line_number':487,'multiline':True]['text':' UnaddressableOperand occurs when the & operator is applied to an','line_number':489,'multiline':False]['text':' unaddressable expression.','line_number':490,'multiline':False]['text':'','line_number':491,'multiline':False]['text':' Example:','line_number':492,'multiline':False]['text':'  var x = &1','line_number':493,'multiline':False]['text':' InvalidIndirection occurs when a non-pointer value is indirected via the','line_number':496,'multiline':False]['text':' '*' operator.','line_number':497,'multiline':False]['text':'','line_number':498,'multiline':False]['text':' Example:','line_number':499,'multiline':False]['text':'  var x int','line_number':500,'multiline':False]['text':'  var y = *x','line_number':501,'multiline':False]['text':' exprs > [] ','line_number':504,'multiline':True]['text':' NonIndexableOperand occurs when an index operation is applied to a value','line_number':506,'multiline':False]['text':' that cannot be indexed.','line_number':507,'multiline':False]['text':'','line_number':508,'multiline':False]['text':' Example:','line_number':509,'multiline':False]['text':'  var x = 1','line_number':510,'multiline':False]['text':'  var y = x[1]','line_number':511,'multiline':False]['text':' InvalidIndex occurs when an index argument is not of integer type,','line_number':514,'multiline':False]['text':' negative, or out-of-bounds.','line_number':515,'multiline':False]['text':'','line_number':516,'multiline':False]['text':' Example:','line_number':517,'multiline':False]['text':'  var s = [...]int{1,2,3}','line_number':518,'multiline':False]['text':'  var x = s[5]','line_number':519,'multiline':False]['text':'','line_number':520,'multiline':False]['text':' Example:','line_number':521,'multiline':False]['text':'  var s = []int{1,2,3}','line_number':522,'multiline':False]['text':'  var _ = s[-1]','line_number':523,'multiline':False]['text':'','line_number':524,'multiline':False]['text':' Example:','line_number':525,'multiline':False]['text':'  var s = []int{1,2,3}','line_number':526,'multiline':False]['text':'  var i string','line_number':527,'multiline':False]['text':'  var _ = s[i]','line_number':528,'multiline':False]['text':' SwappedSliceIndices occurs when constant indices in a slice expression','line_number':531,'multiline':False]['text':' are decreasing in value.','line_number':532,'multiline':False]['text':'','line_number':533,'multiline':False]['text':' Example:','line_number':534,'multiline':False]['text':'  var _ = []int{1,2,3}[2:1]','line_number':535,'multiline':False]['text':' operators > slice ','line_number':538,'multiline':True]['text':' NonSliceableOperand occurs when a slice operation is applied to a value','line_number':540,'multiline':False]['text':' whose type is not sliceable, or is unaddressable.','line_number':541,'multiline':False]['text':'','line_number':542,'multiline':False]['text':' Example:','line_number':543,'multiline':False]['text':'  var x = [...]int{1, 2, 3}[:1]','line_number':544,'multiline':False]['text':'','line_number':545,'multiline':False]['text':' Example:','line_number':546,'multiline':False]['text':'  var x = 1','line_number':547,'multiline':False]['text':'  var y = 1[:1]','line_number':548,'multiline':False]['text':' InvalidSliceExpr occurs when a three-index slice expression (a[x:y:z]) is','line_number':551,'multiline':False]['text':' applied to a string.','line_number':552,'multiline':False]['text':'','line_number':553,'multiline':False]['text':' Example:','line_number':554,'multiline':False]['text':'  var s = "hello"','line_number':555,'multiline':False]['text':'  var x = s[1:2:3]','line_number':556,'multiline':False]['text':' exprs > shift ','line_number':559,'multiline':True]['text':' InvalidShiftCount occurs when the right-hand side of a shift operation is','line_number':561,'multiline':False]['text':' either non-integer, negative, or too large.','line_number':562,'multiline':False]['text':'','line_number':563,'multiline':False]['text':' Example:','line_number':564,'multiline':False]['text':'  var (','line_number':565,'multiline':False]['text':'  	x string','line_number':566,'multiline':False]['text':'  	y int = 1 << x','line_number':567,'multiline':False]['text':'  )','line_number':568,'multiline':False]['text':' InvalidShiftOperand occurs when the shifted operand is not an integer.','line_number':571,'multiline':False]['text':'','line_number':572,'multiline':False]['text':' Example:','line_number':573,'multiline':False]['text':'  var s = "hello"','line_number':574,'multiline':False]['text':'  var x = s << 2','line_number':575,'multiline':False]['text':' exprs > chan ','line_number':578,'multiline':True]['text':' InvalidReceive occurs when there is a channel receive from a value that','line_number':580,'multiline':False]['text':' is either not a channel, or is a send-only channel.','line_number':581,'multiline':False]['text':'','line_number':582,'multiline':False]['text':' Example:','line_number':583,'multiline':False]['text':'  func f() {','line_number':584,'multiline':False]['text':'  	var x = 1','line_number':585,'multiline':False]['text':'  	<-x','line_number':586,'multiline':False]['text':'  }','line_number':587,'multiline':False]['text':' InvalidSend occurs when there is a channel send to a value that is not a','line_number':590,'multiline':False]['text':' channel, or is a receive-only channel.','line_number':591,'multiline':False]['text':'','line_number':592,'multiline':False]['text':' Example:','line_number':593,'multiline':False]['text':'  func f() {','line_number':594,'multiline':False]['text':'  	var x = 1','line_number':595,'multiline':False]['text':'  	x <- "hello!"','line_number':596,'multiline':False]['text':'  }','line_number':597,'multiline':False]['text':' exprs > literal ','line_number':600,'multiline':True]['text':' DuplicateLitKey occurs when an index is duplicated in a slice, array, or','line_number':602,'multiline':False]['text':' map literal.','line_number':603,'multiline':False]['text':'','line_number':604,'multiline':False]['text':' Example:','line_number':605,'multiline':False]['text':'  var _ = []int{0:1, 0:2}','line_number':606,'multiline':False]['text':'','line_number':607,'multiline':False]['text':' Example:','line_number':608,'multiline':False]['text':'  var _ = map[string]int{"a": 1, "a": 2}','line_number':609,'multiline':False]['text':' MissingLitKey occurs when a map literal is missing a key expression.','line_number':612,'multiline':False]['text':'','line_number':613,'multiline':False]['text':' Example:','line_number':614,'multiline':False]['text':'  var _ = map[string]int{1}','line_number':615,'multiline':False]['text':' InvalidLitIndex occurs when the key in a key-value element of a slice or','line_number':618,'multiline':False]['text':' array literal is not an integer constant.','line_number':619,'multiline':False]['text':'','line_number':620,'multiline':False]['text':' Example:','line_number':621,'multiline':False]['text':'  var i = 0','line_number':622,'multiline':False]['text':'  var x = []string{i: "world"}','line_number':623,'multiline':False]['text':' OversizeArrayLit occurs when an array literal exceeds its length.','line_number':626,'multiline':False]['text':'','line_number':627,'multiline':False]['text':' Example:','line_number':628,'multiline':False]['text':'  var _ = [2]int{1,2,3}','line_number':629,'multiline':False]['text':' MixedStructLit occurs when a struct literal contains a mix of positional','line_number':632,'multiline':False]['text':' and named elements.','line_number':633,'multiline':False]['text':'','line_number':634,'multiline':False]['text':' Example:','line_number':635,'multiline':False]['text':'  var _ = struct{i, j int}{i: 1, 2}','line_number':636,'multiline':False]['text':' InvalidStructLit occurs when a positional struct literal has an incorrect','line_number':639,'multiline':False]['text':' number of values.','line_number':640,'multiline':False]['text':'','line_number':641,'multiline':False]['text':' Example:','line_number':642,'multiline':False]['text':'  var _ = struct{i, j int}{1,2,3}','line_number':643,'multiline':False]['text':' MissingLitField occurs when a struct literal refers to a field that does','line_number':646,'multiline':False]['text':' not exist on the struct type.','line_number':647,'multiline':False]['text':'','line_number':648,'multiline':False]['text':' Example:','line_number':649,'multiline':False]['text':'  var _ = struct{i int}{j: 2}','line_number':650,'multiline':False]['text':' DuplicateLitField occurs when a struct literal contains duplicated','line_number':653,'multiline':False]['text':' fields.','line_number':654,'multiline':False]['text':'','line_number':655,'multiline':False]['text':' Example:','line_number':656,'multiline':False]['text':'  var _ = struct{i int}{i: 1, i: 2}','line_number':657,'multiline':False]['text':' UnexportedLitField occurs when a positional struct literal implicitly','line_number':660,'multiline':False]['text':' assigns an unexported field of an imported type.','line_number':661,'multiline':False]['text':' InvalidLitField occurs when a field name is not a valid identifier.','line_number':664,'multiline':False]['text':'','line_number':665,'multiline':False]['text':' Example:','line_number':666,'multiline':False]['text':'  var _ = struct{i int}{1: 1}','line_number':667,'multiline':False]['text':' UntypedLit occurs when a composite literal omits a required type','line_number':670,'multiline':False]['text':' identifier.','line_number':671,'multiline':False]['text':'','line_number':672,'multiline':False]['text':' Example:','line_number':673,'multiline':False]['text':'  type outer struct{','line_number':674,'multiline':False]['text':'  	inner struct { i int }','line_number':675,'multiline':False]['text':'  }','line_number':676,'multiline':False]['text':'','line_number':677,'multiline':False]['text':'  var _ = outer{inner: {1}}','line_number':678,'multiline':False]['text':' InvalidLit occurs when a composite literal expression does not match its','line_number':681,'multiline':False]['text':' type.','line_number':682,'multiline':False]['text':'','line_number':683,'multiline':False]['text':' Example:','line_number':684,'multiline':False]['text':'  type P *struct{','line_number':685,'multiline':False]['text':'  	x int','line_number':686,'multiline':False]['text':'  }','line_number':687,'multiline':False]['text':'  var _ = P {}','line_number':688,'multiline':False]['text':' exprs > selector ','line_number':691,'multiline':True]['text':' AmbiguousSelector occurs when a selector is ambiguous.','line_number':693,'multiline':False]['text':'','line_number':694,'multiline':False]['text':' Example:','line_number':695,'multiline':False]['text':'  type E1 struct { i int }','line_number':696,'multiline':False]['text':'  type E2 struct { i int }','line_number':697,'multiline':False]['text':'  type T struct { E1; E2 }','line_number':698,'multiline':False]['text':'','line_number':699,'multiline':False]['text':'  var x T','line_number':700,'multiline':False]['text':'  var _ = x.i','line_number':701,'multiline':False]['text':' UndeclaredImportedName occurs when a package-qualified identifier is','line_number':704,'multiline':False]['text':' undeclared by the imported package.','line_number':705,'multiline':False]['text':'','line_number':706,'multiline':False]['text':' Example:','line_number':707,'multiline':False]['text':'  import "go/types"','line_number':708,'multiline':False]['text':'','line_number':709,'multiline':False]['text':'  var _ = types.NotAnActualIdentifier','line_number':710,'multiline':False]['text':' UnexportedName occurs when a selector refers to an unexported identifier','line_number':713,'multiline':False]['text':' of an imported package.','line_number':714,'multiline':False]['text':'','line_number':715,'multiline':False]['text':' Example:','line_number':716,'multiline':False]['text':'  import "reflect"','line_number':717,'multiline':False]['text':'','line_number':718,'multiline':False]['text':'  type _ reflect.flag','line_number':719,'multiline':False]['text':' UndeclaredName occurs when an identifier is not declared in the current','line_number':722,'multiline':False]['text':' scope.','line_number':723,'multiline':False]['text':'','line_number':724,'multiline':False]['text':' Example:','line_number':725,'multiline':False]['text':'  var x T','line_number':726,'multiline':False]['text':' MissingFieldOrMethod occurs when a selector references a field or method','line_number':729,'multiline':False]['text':' that does not exist.','line_number':730,'multiline':False]['text':'','line_number':731,'multiline':False]['text':' Example:','line_number':732,'multiline':False]['text':'  type T struct {}','line_number':733,'multiline':False]['text':'','line_number':734,'multiline':False]['text':'  var x = T{}.f','line_number':735,'multiline':False]['text':' exprs > ... ','line_number':738,'multiline':True]['text':' BadDotDotDotSyntax occurs when a "..." occurs in a context where it is','line_number':740,'multiline':False]['text':' not valid.','line_number':741,'multiline':False]['text':'','line_number':742,'multiline':False]['text':' Example:','line_number':743,'multiline':False]['text':'  var _ = map[int][...]int{0: {}}','line_number':744,'multiline':False]['text':' NonVariadicDotDotDot occurs when a "..." is used on the final argument to','line_number':747,'multiline':False]['text':' a non-variadic function.','line_number':748,'multiline':False]['text':'','line_number':749,'multiline':False]['text':' Example:','line_number':750,'multiline':False]['text':'  func printArgs(s []string) {','line_number':751,'multiline':False]['text':'  	for _, a := range s {','line_number':752,'multiline':False]['text':'  		println(a)','line_number':753,'multiline':False]['text':'  	}','line_number':754,'multiline':False]['text':'  }','line_number':755,'multiline':False]['text':'','line_number':756,'multiline':False]['text':'  func f() {','line_number':757,'multiline':False]['text':'  	s := []string{"a", "b", "c"}','line_number':758,'multiline':False]['text':'  	printArgs(s...)','line_number':759,'multiline':False]['text':'  }','line_number':760,'multiline':False]['text':' MisplacedDotDotDot occurs when a "..." is used somewhere other than the','line_number':763,'multiline':False]['text':' final argument to a function call.','line_number':764,'multiline':False]['text':'','line_number':765,'multiline':False]['text':' Example:','line_number':766,'multiline':False]['text':'  func printArgs(args ...int) {','line_number':767,'multiline':False]['text':'  	for _, a := range args {','line_number':768,'multiline':False]['text':'  		println(a)','line_number':769,'multiline':False]['text':'  	}','line_number':770,'multiline':False]['text':'  }','line_number':771,'multiline':False]['text':'','line_number':772,'multiline':False]['text':'  func f() {','line_number':773,'multiline':False]['text':'  	a := []int{1,2,3}','line_number':774,'multiline':False]['text':'  	printArgs(0, a...)','line_number':775,'multiline':False]['text':'  }','line_number':776,'multiline':False]['text':' InvalidDotDotDotOperand occurs when a "..." operator is applied to a','line_number':779,'multiline':False]['text':' single-valued operand.','line_number':780,'multiline':False]['text':'','line_number':781,'multiline':False]['text':' Example:','line_number':782,'multiline':False]['text':'  func printArgs(args ...int) {','line_number':783,'multiline':False]['text':'  	for _, a := range args {','line_number':784,'multiline':False]['text':'  		println(a)','line_number':785,'multiline':False]['text':'  	}','line_number':786,'multiline':False]['text':'  }','line_number':787,'multiline':False]['text':'','line_number':788,'multiline':False]['text':'  func f() {','line_number':789,'multiline':False]['text':'  	a := 1','line_number':790,'multiline':False]['text':'  	printArgs(a...)','line_number':791,'multiline':False]['text':'  }','line_number':792,'multiline':False]['text':'','line_number':793,'multiline':False]['text':' Example:','line_number':794,'multiline':False]['text':'  func args() (int, int) {','line_number':795,'multiline':False]['text':'  	return 1, 2','line_number':796,'multiline':False]['text':'  }','line_number':797,'multiline':False]['text':'','line_number':798,'multiline':False]['text':'  func printArgs(args ...int) {','line_number':799,'multiline':False]['text':'  	for _, a := range args {','line_number':800,'multiline':False]['text':'  		println(a)','line_number':801,'multiline':False]['text':'  	}','line_number':802,'multiline':False]['text':'  }','line_number':803,'multiline':False]['text':'','line_number':804,'multiline':False]['text':'  func g() {','line_number':805,'multiline':False]['text':'  	printArgs(args()...)','line_number':806,'multiline':False]['text':'  }','line_number':807,'multiline':False]['text':' InvalidDotDotDot occurs when a "..." is used in a non-variadic built-in','line_number':810,'multiline':False]['text':' function.','line_number':811,'multiline':False]['text':'','line_number':812,'multiline':False]['text':' Example:','line_number':813,'multiline':False]['text':'  var s = []int{1, 2, 3}','line_number':814,'multiline':False]['text':'  var l = len(s...)','line_number':815,'multiline':False]['text':' exprs > built-in ','line_number':818,'multiline':True]['text':' UncalledBuiltin occurs when a built-in function is used as a','line_number':820,'multiline':False]['text':' function-valued expression, instead of being called.','line_number':821,'multiline':False]['text':'','line_number':822,'multiline':False]['text':' Per the spec:','line_number':823,'multiline':False]['text':'  "The built-in functions do not have standard Go types, so they can only','line_number':824,'multiline':False]['text':'  appear in call expressions; they cannot be used as function values."','line_number':825,'multiline':False]['text':'','line_number':826,'multiline':False]['text':' Example:','line_number':827,'multiline':False]['text':'  var _ = copy','line_number':828,'multiline':False]['text':' InvalidAppend occurs when append is called with a first argument that is','line_number':831,'multiline':False]['text':' not a slice.','line_number':832,'multiline':False]['text':'','line_number':833,'multiline':False]['text':' Example:','line_number':834,'multiline':False]['text':'  var _ = append(1, 2)','line_number':835,'multiline':False]['text':' InvalidCap occurs when an argument to the cap built-in function is not of','line_number':838,'multiline':False]['text':' supported type.','line_number':839,'multiline':False]['text':'','line_number':840,'multiline':False]['text':' See https://golang.org/ref/spec#Lengthand_capacity for information on','line_number':841,'multiline':False]['text':' which underlying types are supported as arguments to cap and len.','line_number':842,'multiline':False]['text':'','line_number':843,'multiline':False]['text':' Example:','line_number':844,'multiline':False]['text':'  var s = 2','line_number':845,'multiline':False]['text':'  var x = cap(s)','line_number':846,'multiline':False]['text':' InvalidClose occurs when close(...) is called with an argument that is','line_number':849,'multiline':False]['text':' not of channel type, or that is a receive-only channel.','line_number':850,'multiline':False]['text':'','line_number':851,'multiline':False]['text':' Example:','line_number':852,'multiline':False]['text':'  func f() {','line_number':853,'multiline':False]['text':'  	var x int','line_number':854,'multiline':False]['text':'  	close(x)','line_number':855,'multiline':False]['text':'  }','line_number':856,'multiline':False]['text':' InvalidCopy occurs when the arguments are not of slice type or do not','line_number':859,'multiline':False]['text':' have compatible type.','line_number':860,'multiline':False]['text':'','line_number':861,'multiline':False]['text':' See https://golang.org/ref/spec#Appendingand_copying_slices for more','line_number':862,'multiline':False]['text':' information on the type requirements for the copy built-in.','line_number':863,'multiline':False]['text':'','line_number':864,'multiline':False]['text':' Example:','line_number':865,'multiline':False]['text':'  func f() {','line_number':866,'multiline':False]['text':'  	var x []int','line_number':867,'multiline':False]['text':'  	y := []int64{1,2,3}','line_number':868,'multiline':False]['text':'  	copy(x, y)','line_number':869,'multiline':False]['text':'  }','line_number':870,'multiline':False]['text':' InvalidComplex occurs when the complex built-in function is called with','line_number':873,'multiline':False]['text':' arguments with incompatible types.','line_number':874,'multiline':False]['text':'','line_number':875,'multiline':False]['text':' Example:','line_number':876,'multiline':False]['text':'  var _ = complex(float32(1), float64(2))','line_number':877,'multiline':False]['text':' InvalidDelete occurs when the delete built-in function is called with a','line_number':880,'multiline':False]['text':' first argument that is not a map.','line_number':881,'multiline':False]['text':'','line_number':882,'multiline':False]['text':' Example:','line_number':883,'multiline':False]['text':'  func f() {','line_number':884,'multiline':False]['text':'  	m := "hello"','line_number':885,'multiline':False]['text':'  	delete(m, "e")','line_number':886,'multiline':False]['text':'  }','line_number':887,'multiline':False]['text':' InvalidImag occurs when the imag built-in function is called with an','line_number':890,'multiline':False]['text':' argument that does not have complex type.','line_number':891,'multiline':False]['text':'','line_number':892,'multiline':False]['text':' Example:','line_number':893,'multiline':False]['text':'  var _ = imag(int(1))','line_number':894,'multiline':False]['text':' InvalidLen occurs when an argument to the len built-in function is not of','line_number':897,'multiline':False]['text':' supported type.','line_number':898,'multiline':False]['text':'','line_number':899,'multiline':False]['text':' See https://golang.org/ref/spec#Lengthand_capacity for information on','line_number':900,'multiline':False]['text':' which underlying types are supported as arguments to cap and len.','line_number':901,'multiline':False]['text':'','line_number':902,'multiline':False]['text':' Example:','line_number':903,'multiline':False]['text':'  var s = 2','line_number':904,'multiline':False]['text':'  var x = len(s)','line_number':905,'multiline':False]['text':' SwappedMakeArgs occurs when make is called with three arguments, and its','line_number':908,'multiline':False]['text':' length argument is larger than its capacity argument.','line_number':909,'multiline':False]['text':'','line_number':910,'multiline':False]['text':' Example:','line_number':911,'multiline':False]['text':'  var x = make([]int, 3, 2)','line_number':912,'multiline':False]['text':' InvalidMake occurs when make is called with an unsupported type argument.','line_number':915,'multiline':False]['text':'','line_number':916,'multiline':False]['text':' See https://golang.org/ref/spec#Makingslices_maps_and_channels for','line_number':917,'multiline':False]['text':' information on the types that may be created using make.','line_number':918,'multiline':False]['text':'','line_number':919,'multiline':False]['text':' Example:','line_number':920,'multiline':False]['text':'  var x = make(int)','line_number':921,'multiline':False]['text':' InvalidReal occurs when the real built-in function is called with an','line_number':924,'multiline':False]['text':' argument that does not have complex type.','line_number':925,'multiline':False]['text':'','line_number':926,'multiline':False]['text':' Example:','line_number':927,'multiline':False]['text':'  var _ = real(int(1))','line_number':928,'multiline':False]['text':' exprs > assertion ','line_number':931,'multiline':True]['text':' InvalidAssert occurs when a type assertion is applied to a','line_number':933,'multiline':False]['text':' value that is not of interface type.','line_number':934,'multiline':False]['text':'','line_number':935,'multiline':False]['text':' Example:','line_number':936,'multiline':False]['text':'  var x = 1','line_number':937,'multiline':False]['text':'  var _ = x.(float64)','line_number':938,'multiline':False]['text':' ImpossibleAssert occurs for a type assertion x.(T) when the value x of','line_number':941,'multiline':False]['text':' interface cannot have dynamic type T, due to a missing or mismatching','line_number':942,'multiline':False]['text':' method on T.','line_number':943,'multiline':False]['text':'','line_number':944,'multiline':False]['text':' Example:','line_number':945,'multiline':False]['text':'  type T int','line_number':946,'multiline':False]['text':'','line_number':947,'multiline':False]['text':'  func (t *T) m() int { return int(*t) }','line_number':948,'multiline':False]['text':'','line_number':949,'multiline':False]['text':'  type I interface { m() int }','line_number':950,'multiline':False]['text':'','line_number':951,'multiline':False]['text':'  var x I','line_number':952,'multiline':False]['text':'  var _ = x.(T)','line_number':953,'multiline':False]['text':' exprs > conversion ','line_number':956,'multiline':True]['text':' InvalidConversion occurs when the argument type cannot be converted to the','line_number':958,'multiline':False]['text':' target.','line_number':959,'multiline':False]['text':'','line_number':960,'multiline':False]['text':' See https://golang.org/ref/spec#Conversions for the rules of','line_number':961,'multiline':False]['text':' convertibility.','line_number':962,'multiline':False]['text':'','line_number':963,'multiline':False]['text':' Example:','line_number':964,'multiline':False]['text':'  var x float64','line_number':965,'multiline':False]['text':'  var _ = string(x)','line_number':966,'multiline':False]['text':' InvalidUntypedConversion occurs when an there is no valid implicit','line_number':969,'multiline':False]['text':' conversion from an untyped value satisfying the type constraints of the','line_number':970,'multiline':False]['text':' context in which it is used.','line_number':971,'multiline':False]['text':'','line_number':972,'multiline':False]['text':' Example:','line_number':973,'multiline':False]['text':'  var _ = 1 + ""','line_number':974,'multiline':False]['text':' offsetof ','line_number':977,'multiline':True]['text':' BadOffsetofSyntax occurs when unsafe.Offsetof is called with an argument','line_number':979,'multiline':False]['text':' that is not a selector expression.','line_number':980,'multiline':False]['text':'','line_number':981,'multiline':False]['text':' Example:','line_number':982,'multiline':False]['text':'  import "unsafe"','line_number':983,'multiline':False]['text':'','line_number':984,'multiline':False]['text':'  var x int','line_number':985,'multiline':False]['text':'  var _ = unsafe.Offsetof(x)','line_number':986,'multiline':False]['text':' InvalidOffsetof occurs when unsafe.Offsetof is called with a method','line_number':989,'multiline':False]['text':' selector, rather than a field selector, or when the field is embedded via','line_number':990,'multiline':False]['text':' a pointer.','line_number':991,'multiline':False]['text':'','line_number':992,'multiline':False]['text':' Per the spec:','line_number':993,'multiline':False]['text':'','line_number':994,'multiline':False]['text':'  "If f is an embedded field, it must be reachable without pointer','line_number':995,'multiline':False]['text':'  indirections through fields of the struct. "','line_number':996,'multiline':False]['text':'','line_number':997,'multiline':False]['text':' Example:','line_number':998,'multiline':False]['text':'  import "unsafe"','line_number':999,'multiline':False]['text':'','line_number':1000,'multiline':False]['text':'  type T struct { f int }','line_number':1001,'multiline':False]['text':'  type S struct { *T }','line_number':1002,'multiline':False]['text':'  var s S','line_number':1003,'multiline':False]['text':'  var _ = unsafe.Offsetof(s.f)','line_number':1004,'multiline':False]['text':'','line_number':1005,'multiline':False]['text':' Example:','line_number':1006,'multiline':False]['text':'  import "unsafe"','line_number':1007,'multiline':False]['text':'','line_number':1008,'multiline':False]['text':'  type S struct{}','line_number':1009,'multiline':False]['text':'','line_number':1010,'multiline':False]['text':'  func (S) m() {}','line_number':1011,'multiline':False]['text':'','line_number':1012,'multiline':False]['text':'  var s S','line_number':1013,'multiline':False]['text':'  var _ = unsafe.Offsetof(s.m)','line_number':1014,'multiline':False]['text':' control flow > scope ','line_number':1017,'multiline':True]['text':' UnusedExpr occurs when a side-effect free expression is used as a','line_number':1019,'multiline':False]['text':' statement. Such a statement has no effect.','line_number':1020,'multiline':False]['text':'','line_number':1021,'multiline':False]['text':' Example:','line_number':1022,'multiline':False]['text':'  func f(i int) {','line_number':1023,'multiline':False]['text':'  	i*i','line_number':1024,'multiline':False]['text':'  }','line_number':1025,'multiline':False]['text':' UnusedVar occurs when a variable is declared but unused.','line_number':1028,'multiline':False]['text':'','line_number':1029,'multiline':False]['text':' Example:','line_number':1030,'multiline':False]['text':'  func f() {','line_number':1031,'multiline':False]['text':'  	x := 1','line_number':1032,'multiline':False]['text':'  }','line_number':1033,'multiline':False]['text':' MissingReturn occurs when a function with results is missing a return','line_number':1036,'multiline':False]['text':' statement.','line_number':1037,'multiline':False]['text':'','line_number':1038,'multiline':False]['text':' Example:','line_number':1039,'multiline':False]['text':'  func f() int {}','line_number':1040,'multiline':False]['text':' WrongResultCount occurs when a return statement returns an incorrect','line_number':1043,'multiline':False]['text':' number of values.','line_number':1044,'multiline':False]['text':'','line_number':1045,'multiline':False]['text':' Example:','line_number':1046,'multiline':False]['text':'  func ReturnOne() int {','line_number':1047,'multiline':False]['text':'  	return 1, 2','line_number':1048,'multiline':False]['text':'  }','line_number':1049,'multiline':False]['text':' OutOfScopeResult occurs when the name of a value implicitly returned by','line_number':1052,'multiline':False]['text':' an empty return statement is shadowed in a nested scope.','line_number':1053,'multiline':False]['text':'','line_number':1054,'multiline':False]['text':' Example:','line_number':1055,'multiline':False]['text':'  func factor(n int) (i int) {','line_number':1056,'multiline':False]['text':'  	for i := 2; i < n; i++ {','line_number':1057,'multiline':False]['text':'  		if n%i == 0 {','line_number':1058,'multiline':False]['text':'  			return','line_number':1059,'multiline':False]['text':'  		}','line_number':1060,'multiline':False]['text':'  	}','line_number':1061,'multiline':False]['text':'  	return 0','line_number':1062,'multiline':False]['text':'  }','line_number':1063,'multiline':False]['text':' control flow > if ','line_number':1066,'multiline':True]['text':' InvalidCond occurs when an if condition is not a boolean expression.','line_number':1068,'multiline':False]['text':'','line_number':1069,'multiline':False]['text':' Example:','line_number':1070,'multiline':False]['text':'  func checkReturn(i int) {','line_number':1071,'multiline':False]['text':'  	if i {','line_number':1072,'multiline':False]['text':'  		panic("non-zero return")','line_number':1073,'multiline':False]['text':'  	}','line_number':1074,'multiline':False]['text':'  }','line_number':1075,'multiline':False]['text':' control flow > for ','line_number':1078,'multiline':True]['text':' InvalidPostDecl occurs when there is a declaration in a for-loop post','line_number':1080,'multiline':False]['text':' statement.','line_number':1081,'multiline':False]['text':'','line_number':1082,'multiline':False]['text':' Example:','line_number':1083,'multiline':False]['text':'  func f() {','line_number':1084,'multiline':False]['text':'  	for i := 0; i < 10; j := 0 {}','line_number':1085,'multiline':False]['text':'  }','line_number':1086,'multiline':False]['text':' InvalidChanRange occurs when a send-only channel used in a range','line_number':1089,'multiline':False]['text':' expression.','line_number':1090,'multiline':False]['text':'','line_number':1091,'multiline':False]['text':' Example:','line_number':1092,'multiline':False]['text':'  func sum(c chan<- int) {','line_number':1093,'multiline':False]['text':'  	s := 0','line_number':1094,'multiline':False]['text':'  	for i := range c {','line_number':1095,'multiline':False]['text':'  		s += i','line_number':1096,'multiline':False]['text':'  	}','line_number':1097,'multiline':False]['text':'  }','line_number':1098,'multiline':False]['text':' InvalidIterVar occurs when two iteration variables are used while ranging','line_number':1101,'multiline':False]['text':' over a channel.','line_number':1102,'multiline':False]['text':'','line_number':1103,'multiline':False]['text':' Example:','line_number':1104,'multiline':False]['text':'  func f(c chan int) {','line_number':1105,'multiline':False]['text':'  	for k, v := range c {','line_number':1106,'multiline':False]['text':'  		println(k, v)','line_number':1107,'multiline':False]['text':'  	}','line_number':1108,'multiline':False]['text':'  }','line_number':1109,'multiline':False]['text':' InvalidRangeExpr occurs when the type of a range expression is not array,','line_number':1112,'multiline':False]['text':' slice, string, map, or channel.','line_number':1113,'multiline':False]['text':'','line_number':1114,'multiline':False]['text':' Example:','line_number':1115,'multiline':False]['text':'  func f(i int) {','line_number':1116,'multiline':False]['text':'  	for j := range i {','line_number':1117,'multiline':False]['text':'  		println(j)','line_number':1118,'multiline':False]['text':'  	}','line_number':1119,'multiline':False]['text':'  }','line_number':1120,'multiline':False]['text':' control flow > switch ','line_number':1123,'multiline':True]['text':' MisplacedBreak occurs when a break statement is not within a for, switch,','line_number':1125,'multiline':False]['text':' or select statement of the innermost function definition.','line_number':1126,'multiline':False]['text':'','line_number':1127,'multiline':False]['text':' Example:','line_number':1128,'multiline':False]['text':'  func f() {','line_number':1129,'multiline':False]['text':'  	break','line_number':1130,'multiline':False]['text':'  }','line_number':1131,'multiline':False]['text':' MisplacedContinue occurs when a continue statement is not within a for','line_number':1134,'multiline':False]['text':' loop of the innermost function definition.','line_number':1135,'multiline':False]['text':'','line_number':1136,'multiline':False]['text':' Example:','line_number':1137,'multiline':False]['text':'  func sumeven(n int) int {','line_number':1138,'multiline':False]['text':'  	proceed := func() {','line_number':1139,'multiline':False]['text':'  		continue','line_number':1140,'multiline':False]['text':'  	}','line_number':1141,'multiline':False]['text':'  	sum := 0','line_number':1142,'multiline':False]['text':'  	for i := 1; i <= n; i++ {','line_number':1143,'multiline':False]['text':'  		if i % 2 != 0 {','line_number':1144,'multiline':False]['text':'  			proceed()','line_number':1145,'multiline':False]['text':'  		}','line_number':1146,'multiline':False]['text':'  		sum += i','line_number':1147,'multiline':False]['text':'  	}','line_number':1148,'multiline':False]['text':'  	return sum','line_number':1149,'multiline':False]['text':'  }','line_number':1150,'multiline':False]['text':' MisplacedFallthrough occurs when a fallthrough statement is not within an','line_number':1153,'multiline':False]['text':' expression switch.','line_number':1154,'multiline':False]['text':'','line_number':1155,'multiline':False]['text':' Example:','line_number':1156,'multiline':False]['text':'  func typename(i interface{}) string {','line_number':1157,'multiline':False]['text':'  	switch i.(type) {','line_number':1158,'multiline':False]['text':'  	case int64:','line_number':1159,'multiline':False]['text':'  		fallthrough','line_number':1160,'multiline':False]['text':'  	case int:','line_number':1161,'multiline':False]['text':'  		return "int"','line_number':1162,'multiline':False]['text':'  	}','line_number':1163,'multiline':False]['text':'  	return "unsupported"','line_number':1164,'multiline':False]['text':'  }','line_number':1165,'multiline':False]['text':' DuplicateCase occurs when a type or expression switch has duplicate','line_number':1168,'multiline':False]['text':' cases.','line_number':1169,'multiline':False]['text':'','line_number':1170,'multiline':False]['text':' Example:','line_number':1171,'multiline':False]['text':'  func printInt(i int) {','line_number':1172,'multiline':False]['text':'  	switch i {','line_number':1173,'multiline':False]['text':'  	case 1:','line_number':1174,'multiline':False]['text':'  		println("one")','line_number':1175,'multiline':False]['text':'  	case 1:','line_number':1176,'multiline':False]['text':'  		println("One")','line_number':1177,'multiline':False]['text':'  	}','line_number':1178,'multiline':False]['text':'  }','line_number':1179,'multiline':False]['text':' DuplicateDefault occurs when a type or expression switch has multiple','line_number':1182,'multiline':False]['text':' default clauses.','line_number':1183,'multiline':False]['text':'','line_number':1184,'multiline':False]['text':' Example:','line_number':1185,'multiline':False]['text':'  func printInt(i int) {','line_number':1186,'multiline':False]['text':'  	switch i {','line_number':1187,'multiline':False]['text':'  	case 1:','line_number':1188,'multiline':False]['text':'  		println("one")','line_number':1189,'multiline':False]['text':'  	default:','line_number':1190,'multiline':False]['text':'  		println("One")','line_number':1191,'multiline':False]['text':'  	default:','line_number':1192,'multiline':False]['text':'  		println("1")','line_number':1193,'multiline':False]['text':'  	}','line_number':1194,'multiline':False]['text':'  }','line_number':1195,'multiline':False]['text':' BadTypeKeyword occurs when a .(type) expression is used anywhere other','line_number':1198,'multiline':False]['text':' than a type switch.','line_number':1199,'multiline':False]['text':'','line_number':1200,'multiline':False]['text':' Example:','line_number':1201,'multiline':False]['text':'  type I interface {','line_number':1202,'multiline':False]['text':'  	m()','line_number':1203,'multiline':False]['text':'  }','line_number':1204,'multiline':False]['text':'  var t I','line_number':1205,'multiline':False]['text':'  var _ = t.(type)','line_number':1206,'multiline':False]['text':' InvalidTypeSwitch occurs when .(type) is used on an expression that is','line_number':1209,'multiline':False]['text':' not of interface type.','line_number':1210,'multiline':False]['text':'','line_number':1211,'multiline':False]['text':' Example:','line_number':1212,'multiline':False]['text':'  func f(i int) {','line_number':1213,'multiline':False]['text':'  	switch x := i.(type) {}','line_number':1214,'multiline':False]['text':'  }','line_number':1215,'multiline':False]['text':' InvalidExprSwitch occurs when a switch expression is not comparable.','line_number':1218,'multiline':False]['text':'','line_number':1219,'multiline':False]['text':' Example:','line_number':1220,'multiline':False]['text':'  func _() {','line_number':1221,'multiline':False]['text':'  	var a struct{ _ func() }','line_number':1222,'multiline':False]['text':'  	switch a /* ERROR cannot switch on a */ {','line_number':1223,'multiline':False]['text':'  	}','line_number':1224,'multiline':False]['text':'  }','line_number':1225,'multiline':False]['text':' control flow > select ','line_number':1228,'multiline':True]['text':' InvalidSelectCase occurs when a select case is not a channel send or','line_number':1230,'multiline':False]['text':' receive.','line_number':1231,'multiline':False]['text':'','line_number':1232,'multiline':False]['text':' Example:','line_number':1233,'multiline':False]['text':'  func checkChan(c <-chan int) bool {','line_number':1234,'multiline':False]['text':'  	select {','line_number':1235,'multiline':False]['text':'  	case c:','line_number':1236,'multiline':False]['text':'  		return true','line_number':1237,'multiline':False]['text':'  	default:','line_number':1238,'multiline':False]['text':'  		return false','line_number':1239,'multiline':False]['text':'  	}','line_number':1240,'multiline':False]['text':'  }','line_number':1241,'multiline':False]['text':' control flow > labels and jumps ','line_number':1244,'multiline':True]['text':' UndeclaredLabel occurs when an undeclared label is jumped to.','line_number':1246,'multiline':False]['text':'','line_number':1247,'multiline':False]['text':' Example:','line_number':1248,'multiline':False]['text':'  func f() {','line_number':1249,'multiline':False]['text':'  	goto L','line_number':1250,'multiline':False]['text':'  }','line_number':1251,'multiline':False]['text':' DuplicateLabel occurs when a label is declared more than once.','line_number':1254,'multiline':False]['text':'','line_number':1255,'multiline':False]['text':' Example:','line_number':1256,'multiline':False]['text':'  func f() int {','line_number':1257,'multiline':False]['text':'  L:','line_number':1258,'multiline':False]['text':'  L:','line_number':1259,'multiline':False]['text':'  	return 1','line_number':1260,'multiline':False]['text':'  }','line_number':1261,'multiline':False]['text':' MisplacedLabel occurs when a break or continue label is not on a for,','line_number':1264,'multiline':False]['text':' switch, or select statement.','line_number':1265,'multiline':False]['text':'','line_number':1266,'multiline':False]['text':' Example:','line_number':1267,'multiline':False]['text':'  func f() {','line_number':1268,'multiline':False]['text':'  L:','line_number':1269,'multiline':False]['text':'  	a := []int{1,2,3}','line_number':1270,'multiline':False]['text':'  	for _, e := range a {','line_number':1271,'multiline':False]['text':'  		if e > 10 {','line_number':1272,'multiline':False]['text':'  			break L','line_number':1273,'multiline':False]['text':'  		}','line_number':1274,'multiline':False]['text':'  		println(a)','line_number':1275,'multiline':False]['text':'  	}','line_number':1276,'multiline':False]['text':'  }','line_number':1277,'multiline':False]['text':' UnusedLabel occurs when a label is declared but not used.','line_number':1280,'multiline':False]['text':'','line_number':1281,'multiline':False]['text':' Example:','line_number':1282,'multiline':False]['text':'  func f() {','line_number':1283,'multiline':False]['text':'  L:','line_number':1284,'multiline':False]['text':'  }','line_number':1285,'multiline':False]['text':' JumpOverDecl occurs when a label jumps over a variable declaration.','line_number':1288,'multiline':False]['text':'','line_number':1289,'multiline':False]['text':' Example:','line_number':1290,'multiline':False]['text':'  func f() int {','line_number':1291,'multiline':False]['text':'  	goto L','line_number':1292,'multiline':False]['text':'  	x := 2','line_number':1293,'multiline':False]['text':'  L:','line_number':1294,'multiline':False]['text':'  	x++','line_number':1295,'multiline':False]['text':'  	return x','line_number':1296,'multiline':False]['text':'  }','line_number':1297,'multiline':False]['text':' JumpIntoBlock occurs when a forward jump goes to a label inside a nested','line_number':1300,'multiline':False]['text':' block.','line_number':1301,'multiline':False]['text':'','line_number':1302,'multiline':False]['text':' Example:','line_number':1303,'multiline':False]['text':'  func f(x int) {','line_number':1304,'multiline':False]['text':'  	goto L','line_number':1305,'multiline':False]['text':'  	if x > 0 {','line_number':1306,'multiline':False]['text':'  	L:','line_number':1307,'multiline':False]['text':'  		print("inside block")','line_number':1308,'multiline':False]['text':'  	}','line_number':1309,'multiline':False]['text':' }','line_number':1310,'multiline':False]['text':' control flow > calls ','line_number':1313,'multiline':True]['text':' InvalidMethodExpr occurs when a pointer method is called but the argument','line_number':1315,'multiline':False]['text':' is not addressable.','line_number':1316,'multiline':False]['text':'','line_number':1317,'multiline':False]['text':' Example:','line_number':1318,'multiline':False]['text':'  type T struct {}','line_number':1319,'multiline':False]['text':'','line_number':1320,'multiline':False]['text':'  func (*T) m() int { return 1 }','line_number':1321,'multiline':False]['text':'','line_number':1322,'multiline':False]['text':'  var _ = T.m(T{})','line_number':1323,'multiline':False]['text':' WrongArgCount occurs when too few or too many arguments are passed by a','line_number':1326,'multiline':False]['text':' function call.','line_number':1327,'multiline':False]['text':'','line_number':1328,'multiline':False]['text':' Example:','line_number':1329,'multiline':False]['text':'  func f(i int) {}','line_number':1330,'multiline':False]['text':'  var x = f()','line_number':1331,'multiline':False]['text':' InvalidCall occurs when an expression is called that is not of function','line_number':1334,'multiline':False]['text':' type.','line_number':1335,'multiline':False]['text':'','line_number':1336,'multiline':False]['text':' Example:','line_number':1337,'multiline':False]['text':'  var x = "x"','line_number':1338,'multiline':False]['text':'  var y = x()','line_number':1339,'multiline':False]['text':' control flow > suspended ','line_number':1342,'multiline':True]['text':' UnusedResults occurs when a restricted expression-only built-in function','line_number':1344,'multiline':False]['text':' is suspended via go or defer. Such a suspension discards the results of','line_number':1345,'multiline':False]['text':' these side-effect free built-in functions, and therefore is ineffectual.','line_number':1346,'multiline':False]['text':'','line_number':1347,'multiline':False]['text':' Example:','line_number':1348,'multiline':False]['text':'  func f(a []int) int {','line_number':1349,'multiline':False]['text':'  	defer len(a)','line_number':1350,'multiline':False]['text':'  	return i','line_number':1351,'multiline':False]['text':'  }','line_number':1352,'multiline':False]['text':' InvalidDefer occurs when a deferred expression is not a function call,','line_number':1355,'multiline':False]['text':' for example if the expression is a type conversion.','line_number':1356,'multiline':False]['text':'','line_number':1357,'multiline':False]['text':' Example:','line_number':1358,'multiline':False]['text':'  func f(i int) int {','line_number':1359,'multiline':False]['text':'  	defer int32(i)','line_number':1360,'multiline':False]['text':'  	return i','line_number':1361,'multiline':False]['text':'  }','line_number':1362,'multiline':False]['text':' InvalidGo occurs when a go expression is not a function call, for example','line_number':1365,'multiline':False]['text':' if the expression is a type conversion.','line_number':1366,'multiline':False]['text':'','line_number':1367,'multiline':False]['text':' Example:','line_number':1368,'multiline':False]['text':'  func f(i int) int {','line_number':1369,'multiline':False]['text':'  	go int32(i)','line_number':1370,'multiline':False]['text':'  	return i','line_number':1371,'multiline':False]['text':'  }','line_number':1372,'multiline':False]['text':' All codes below were added in Go 1.17.','line_number':1375,'multiline':False]['text':' decl ','line_number':1377,'multiline':True]['text':' BadDecl occurs when a declaration has invalid syntax.','line_number':1379,'multiline':False]['text':' RepeatedDecl occurs when an identifier occurs more than once on the left','line_number':1382,'multiline':False]['text':' hand side of a short variable declaration.','line_number':1383,'multiline':False]['text':'','line_number':1384,'multiline':False]['text':' Example:','line_number':1385,'multiline':False]['text':'  func _() {','line_number':1386,'multiline':False]['text':'  	x, y, y := 1, 2, 3','line_number':1387,'multiline':False]['text':'  }','line_number':1388,'multiline':False]['text':' unsafe ','line_number':1391,'multiline':True]['text':' InvalidUnsafeAdd occurs when unsafe.Add is called with a','line_number':1393,'multiline':False]['text':' length argument that is not of integer type.','line_number':1394,'multiline':False]['text':'','line_number':1395,'multiline':False]['text':' Example:','line_number':1396,'multiline':False]['text':'  import "unsafe"','line_number':1397,'multiline':False]['text':'','line_number':1398,'multiline':False]['text':'  var p unsafe.Pointer','line_number':1399,'multiline':False]['text':'  var _ = unsafe.Add(p, float64(1))','line_number':1400,'multiline':False]['text':' InvalidUnsafeSlice occurs when unsafe.Slice is called with a','line_number':1403,'multiline':False]['text':' pointer argument that is not of pointer type or a length argument','line_number':1404,'multiline':False]['text':' that is not of integer type, negative, or out of bounds.','line_number':1405,'multiline':False]['text':'','line_number':1406,'multiline':False]['text':' Example:','line_number':1407,'multiline':False]['text':'  import "unsafe"','line_number':1408,'multiline':False]['text':'','line_number':1409,'multiline':False]['text':'  var x int','line_number':1410,'multiline':False]['text':'  var _ = unsafe.Slice(x, 1)','line_number':1411,'multiline':False]['text':'','line_number':1412,'multiline':False]['text':' Example:','line_number':1413,'multiline':False]['text':'  import "unsafe"','line_number':1414,'multiline':False]['text':'','line_number':1415,'multiline':False]['text':'  var x int','line_number':1416,'multiline':False]['text':'  var _ = unsafe.Slice(&x, float64(1))','line_number':1417,'multiline':False]['text':'','line_number':1418,'multiline':False]['text':' Example:','line_number':1419,'multiline':False]['text':'  import "unsafe"','line_number':1420,'multiline':False]['text':'','line_number':1421,'multiline':False]['text':'  var x int','line_number':1422,'multiline':False]['text':'  var _ = unsafe.Slice(&x, -1)','line_number':1423,'multiline':False]['text':'','line_number':1424,'multiline':False]['text':' Example:','line_number':1425,'multiline':False]['text':'  import "unsafe"','line_number':1426,'multiline':False]['text':'','line_number':1427,'multiline':False]['text':'  var x int','line_number':1428,'multiline':False]['text':'  var _ = unsafe.Slice(&x, uint64(1) << 63)','line_number':1429,'multiline':False]['text':' All codes below were added in Go 1.18.','line_number':1432,'multiline':False]['text':' features ','line_number':1434,'multiline':True]['text':' UnsupportedFeature occurs when a language feature is used that is not','line_number':1436,'multiline':False]['text':' supported at this Go version.','line_number':1437,'multiline':False]['text':' type params ','line_number':1440,'multiline':True]['text':' NotAGenericType occurs when a non-generic type is used where a generic','line_number':1442,'multiline':False]['text':' type is expected: in type or function instantiation.','line_number':1443,'multiline':False]['text':'','line_number':1444,'multiline':False]['text':' Example:','line_number':1445,'multiline':False]['text':'  type T int','line_number':1446,'multiline':False]['text':'','line_number':1447,'multiline':False]['text':'  var _ T[int]','line_number':1448,'multiline':False]['text':' WrongTypeArgCount occurs when a type or function is instantiated with an','line_number':1451,'multiline':False]['text':' incorrent number of type arguments, including when a generic type or','line_number':1452,'multiline':False]['text':' function is used without instantiation.','line_number':1453,'multiline':False]['text':'','line_number':1454,'multiline':False]['text':' Errors inolving failed type inference are assigned other error codes.','line_number':1455,'multiline':False]['text':'','line_number':1456,'multiline':False]['text':' Example:','line_number':1457,'multiline':False]['text':'  type T[p any] int','line_number':1458,'multiline':False]['text':'','line_number':1459,'multiline':False]['text':'  var _ T[int, string]','line_number':1460,'multiline':False]['text':'','line_number':1461,'multiline':False]['text':' Example:','line_number':1462,'multiline':False]['text':'  func f[T any]() {}','line_number':1463,'multiline':False]['text':'','line_number':1464,'multiline':False]['text':'  var x = f','line_number':1465,'multiline':False]['text':' CannotInferTypeArgs occurs when type or function type argument inference','line_number':1468,'multiline':False]['text':' fails to infer all type arguments.','line_number':1469,'multiline':False]['text':'','line_number':1470,'multiline':False]['text':' Example:','line_number':1471,'multiline':False]['text':'  func f[T any]() {}','line_number':1472,'multiline':False]['text':'','line_number':1473,'multiline':False]['text':'  func _() {','line_number':1474,'multiline':False]['text':'  	f()','line_number':1475,'multiline':False]['text':'  }','line_number':1476,'multiline':False]['text':'','line_number':1477,'multiline':False]['text':' Example:','line_number':1478,'multiline':False]['text':'   type N[P, Q any] struct{}','line_number':1479,'multiline':False]['text':'','line_number':1480,'multiline':False]['text':'   var _ N[int]','line_number':1481,'multiline':False]['text':' InvalidTypeArg occurs when a type argument does not satisfy its','line_number':1484,'multiline':False]['text':' corresponding type parameter constraints.','line_number':1485,'multiline':False]['text':'','line_number':1486,'multiline':False]['text':' Example:','line_number':1487,'multiline':False]['text':'  type T[P ~int] struct{}','line_number':1488,'multiline':False]['text':'','line_number':1489,'multiline':False]['text':'  var _ T[string]','line_number':1490,'multiline':False]['text':' arguments? InferenceFailed','line_number':1491,'multiline':False]['text':' InvalidInstanceCycle occurs when an invalid cycle is detected','line_number':1493,'multiline':False]['text':' within the instantiation graph.','line_number':1494,'multiline':False]['text':'','line_number':1495,'multiline':False]['text':' Example:','line_number':1496,'multiline':False]['text':'  func f[T any]() { f[*T]() }','line_number':1497,'multiline':False]['text':' InvalidUnion occurs when an embedded union or approximation element is','line_number':1500,'multiline':False]['text':' not valid.','line_number':1501,'multiline':False]['text':'','line_number':1502,'multiline':False]['text':' Example:','line_number':1503,'multiline':False]['text':'  type _ interface {','line_number':1504,'multiline':False]['text':'   	~int | interface{ m() }','line_number':1505,'multiline':False]['text':'  }','line_number':1506,'multiline':False]['text':' MisplacedConstraintIface occurs when a constraint-type interface is used','line_number':1509,'multiline':False]['text':' outside of constraint position.','line_number':1510,'multiline':False]['text':'','line_number':1511,'multiline':False]['text':' Example:','line_number':1512,'multiline':False]['text':'   type I interface { ~int }','line_number':1513,'multiline':False]['text':'','line_number':1514,'multiline':False]['text':'   var _ I','line_number':1515,'multiline':False]['text':' InvalidMethodTypeParams occurs when methods have type parameters.','line_number':1518,'multiline':False]['text':'','line_number':1519,'multiline':False]['text':' It cannot be encountered with an AST parsed using go/parser.','line_number':1520,'multiline':False]['text':' MisplacedTypeParam occurs when a type parameter is used in a place where','line_number':1523,'multiline':False]['text':' it is not permitted.','line_number':1524,'multiline':False]['text':'','line_number':1525,'multiline':False]['text':' Example:','line_number':1526,'multiline':False]['text':'  type T[P any] P','line_number':1527,'multiline':False]['text':'','line_number':1528,'multiline':False]['text':' Example:','line_number':1529,'multiline':False]['text':'  type T[P any] struct{ *P }','line_number':1530,'multiline':False]['text':' InvalidUnsafeSliceData occurs when unsafe.SliceData is called with','line_number':1533,'multiline':False]['text':' an argument that is not of slice type. It also occurs if it is used','line_number':1534,'multiline':False]['text':' in a package compiled for a language version before go1.20.','line_number':1535,'multiline':False]['text':'','line_number':1536,'multiline':False]['text':' Example:','line_number':1537,'multiline':False]['text':'  import "unsafe"','line_number':1538,'multiline':False]['text':'','line_number':1539,'multiline':False]['text':'  var x int','line_number':1540,'multiline':False]['text':'  var _ = unsafe.SliceData(x)','line_number':1541,'multiline':False]['text':' InvalidUnsafeString occurs when unsafe.String is called with','line_number':1544,'multiline':False]['text':' a length argument that is not of integer type, negative, or','line_number':1545,'multiline':False]['text':' out of bounds. It also occurs if it is used in a package','line_number':1546,'multiline':False]['text':' compiled for a language version before go1.20.','line_number':1547,'multiline':False]['text':'','line_number':1548,'multiline':False]['text':' Example:','line_number':1549,'multiline':False]['text':'  import "unsafe"','line_number':1550,'multiline':False]['text':'','line_number':1551,'multiline':False]['text':'  var b [10]byte','line_number':1552,'multiline':False]['text':'  var _ = unsafe.String(&b[0], -1)','line_number':1553,'multiline':False]['text':' InvalidUnsafeStringData occurs if it is used in a package','line_number':1556,'multiline':False]['text':' compiled for a language version before go1.20.','line_number':1557,'multiline':False]['text':' not used anymore','line_number':1558,'multiline':False]