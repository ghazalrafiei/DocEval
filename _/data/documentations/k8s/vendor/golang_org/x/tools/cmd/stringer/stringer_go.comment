['text':' Copyright 2014 The Go Authors. All rights reserved.','line_number':1,'multiline':False]['text':' Use of this source code is governed by a BSD-style','line_number':2,'multiline':False]['text':' license that can be found in the LICENSE file.','line_number':3,'multiline':False]['text':' Stringer is a tool to automate the creation of methods that satisfy the fmt.Stringer','line_number':5,'multiline':False]['text':' interface. Given the name of a (signed or unsigned) integer type T that has constants','line_number':6,'multiline':False]['text':' defined, stringer will create a new self-contained Go source file implementing','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'	func (t T) String() string','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' The file is created in the same package and directory as the package that defines T.','line_number':11,'multiline':False]['text':' It has helpful defaults designed for use with go generate.','line_number':12,'multiline':False]['text':'','line_number':13,'multiline':False]['text':' Stringer works best with constants that are consecutive values such as created using iota,','line_number':14,'multiline':False]['text':' but creates good code regardless. In the future it might also provide custom support for','line_number':15,'multiline':False]['text':' constant sets that are bit patterns.','line_number':16,'multiline':False]['text':'','line_number':17,'multiline':False]['text':' For example, given this snippet,','line_number':18,'multiline':False]['text':'','line_number':19,'multiline':False]['text':'	package painkiller','line_number':20,'multiline':False]['text':'','line_number':21,'multiline':False]['text':'	type Pill int','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':'	const (','line_number':24,'multiline':False]['text':'		Placebo Pill = iota','line_number':25,'multiline':False]['text':'		Aspirin','line_number':26,'multiline':False]['text':'		Ibuprofen','line_number':27,'multiline':False]['text':'		Paracetamol','line_number':28,'multiline':False]['text':'		Acetaminophen = Paracetamol','line_number':29,'multiline':False]['text':'	)','line_number':30,'multiline':False]['text':'','line_number':31,'multiline':False]['text':' running this command','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':'	stringer -type=Pill','line_number':34,'multiline':False]['text':'','line_number':35,'multiline':False]['text':' in the same directory will create the file pill_string.go, in package painkiller,','line_number':36,'multiline':False]['text':' containing a definition of','line_number':37,'multiline':False]['text':'','line_number':38,'multiline':False]['text':'	func (Pill) String() string','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' That method will translate the value of a Pill constant to the string representation','line_number':41,'multiline':False]['text':' of the respective constant name, so that the call fmt.Print(painkiller.Aspirin) will','line_number':42,'multiline':False]['text':' print the string "Aspirin".','line_number':43,'multiline':False]['text':'','line_number':44,'multiline':False]['text':' Typically this process would be run using go generate, like this:','line_number':45,'multiline':False]['text':'','line_number':46,'multiline':False]['text':'	//go:generate stringer -type=Pill','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' If multiple constants have the same value, the lexically first matching name will','line_number':49,'multiline':False]['text':' be used (in the example, Acetaminophen will print as "Paracetamol").','line_number':50,'multiline':False]['text':'','line_number':51,'multiline':False]['text':' With no arguments, it processes the package in the current directory.','line_number':52,'multiline':False]['text':' Otherwise, the arguments must name a single directory holding a Go package','line_number':53,'multiline':False]['text':' or a set of Go source files that represent a single Go package.','line_number':54,'multiline':False]['text':'','line_number':55,'multiline':False]['text':' The -type flag accepts a comma-separated list of types so a single run can','line_number':56,'multiline':False]['text':' generate methods for multiple types. The default output file is t_string.go,','line_number':57,'multiline':False]['text':' where t is the lower-cased name of the first type listed. It can be overridden','line_number':58,'multiline':False]['text':' with the -output flag.','line_number':59,'multiline':False]['text':'','line_number':60,'multiline':False]['text':' The -linecomment flag tells stringer to generate the text of any line comment, trimmed','line_number':61,'multiline':False]['text':' of leading spaces, instead of the constant name. For instance, if the constants above had a','line_number':62,'multiline':False]['text':' Pill prefix, one could write','line_number':63,'multiline':False]['text':'','line_number':64,'multiline':False]['text':'	PillAspirin // Aspirin','line_number':65,'multiline':False]['text':'','line_number':66,'multiline':False]['text':' to suppress it in the output.','line_number':67,'multiline':False]['text':' import "golang.org/x/tools/cmd/stringer"','line_number':68,'multiline':False]['text':' Usage is a replacement usage function for the flags package.','line_number':96,'multiline':False]['text':' We accept either one directory or a list of files. Which do we have?','line_number':122,'multiline':False]['text':' Default: process whole package in current directory.','line_number':125,'multiline':False]['text':' Parse the package once.','line_number':129,'multiline':False]['text':' TODO(suzmue): accept other patterns for packages (directories, list of files, import paths, etc).','line_number':135,'multiline':False]['text':' Print the header and package clause.','line_number':147,'multiline':False]['text':' Used by all methods.','line_number':152,'multiline':False]['text':' Run generate for each type.','line_number':154,'multiline':False]['text':' Format the output.','line_number':159,'multiline':False]['text':' Write to file.','line_number':162,'multiline':False]['text':' isDirectory reports whether the named file is a directory.','line_number':174,'multiline':False]['text':' Generator holds the state of the analysis. Primarily used to buffer','line_number':183,'multiline':False]['text':' the output for format.Source.','line_number':184,'multiline':False]['text':' Accumulated output.','line_number':186,'multiline':False]['text':' Package we are scanning.','line_number':187,'multiline':False]['text':' File holds a single parsed file and associated data.','line_number':197,'multiline':False]['text':' Package to which this file belongs.','line_number':199,'multiline':False]['text':' Parsed AST.','line_number':200,'multiline':False]['text':' These fields are reset for each type being generated.','line_number':201,'multiline':False]['text':' Name of the constant type.','line_number':202,'multiline':False]['text':' Accumulator for constant values of that type.','line_number':203,'multiline':False]['text':' parsePackage analyzes the single package constructed from the patterns and tags.','line_number':215,'multiline':False]['text':' parsePackage exits if there is an error.','line_number':216,'multiline':False]['text':' TODO: Need to think about constants in test files. Maybe write type_string_test.go','line_number':220,'multiline':False]['text':' in a separate pass? For later.','line_number':221,'multiline':False]['text':' addPackage adds a type checked Package and its syntax files to the generator.','line_number':235,'multiline':False]['text':' generate produces the String method for the named type.','line_number':253,'multiline':False]['text':' Set the state for this run of the walker.','line_number':257,'multiline':False]['text':' Generate code that will fail if the constants change value.','line_number':269,'multiline':False]['text':' The decision of which pattern to use depends on the number of','line_number':279,'multiline':False]['text':' runs in the numbers. If there's only one, it's easy. For more than','line_number':280,'multiline':False]['text':' one, there's a tradeoff between complexity and size of the data','line_number':281,'multiline':False]['text':' and code vs. the simplicity of a map. A map takes more space,','line_number':282,'multiline':False]['text':' but so does the code. The decision here (crossover at 10) is','line_number':283,'multiline':False]['text':' arbitrary, but considers that for large numbers of runs the cost','line_number':284,'multiline':False]['text':' of the linear scan in the switch might become important, and','line_number':285,'multiline':False]['text':' rather than use yet another algorithm such as binary search,','line_number':286,'multiline':False]['text':' we punt and use a map. In any case, the likelihood of a map','line_number':287,'multiline':False]['text':' being necessary for any realistic example other than bitmasks','line_number':288,'multiline':False]['text':' is very low. And bitmasks probably deserve their own analysis,','line_number':289,'multiline':False]['text':' to be done some other day.','line_number':290,'multiline':False]['text':' splitIntoRuns breaks the values into runs of contiguous sequences.','line_number':301,'multiline':False]['text':' For example, given 1,2,3,5,6,7 it returns {1,2,3},{5,6,7}.','line_number':302,'multiline':False]['text':' The input slice is known to be non-empty.','line_number':303,'multiline':False]['text':' We use stable sort so the lexically first name is chosen for equal elements.','line_number':305,'multiline':False]['text':' Remove duplicates. Stable sort has put the one we want to print first,','line_number':307,'multiline':False]['text':' so use that one. The String method won't care about which named constant','line_number':308,'multiline':False]['text':' was the argument, so the first name for the given value is the only one to keep.','line_number':309,'multiline':False]['text':' We need to do this because identical values would cause the switch or map','line_number':310,'multiline':False]['text':' to fail to compile.','line_number':311,'multiline':False]['text':' One contiguous sequence per outer loop.','line_number':322,'multiline':False]['text':' format returns the gofmt-ed contents of the Generator's buffer.','line_number':333,'multiline':False]['text':' Should never happen, but can arise when developing this code.','line_number':337,'multiline':False]['text':' The user can compile the output to see the error.','line_number':338,'multiline':False]['text':' Value represents a declared constant.','line_number':346,'multiline':False]['text':' The name of the constant.','line_number':348,'multiline':False]['text':' The name with trimmed prefix.','line_number':349,'multiline':False]['text':' The value is stored as a bit pattern alone. The boolean tells us','line_number':350,'multiline':False]['text':' whether to interpret it as an int64 or a uint64; the only place','line_number':351,'multiline':False]['text':' this matters is when sorting.','line_number':352,'multiline':False]['text':' Much of the time the str field is all we need; it is printed','line_number':353,'multiline':False]['text':' by Value.String.','line_number':354,'multiline':False]['text':' Will be converted to int64 when needed.','line_number':355,'multiline':False]['text':' Whether the constant is a signed type.','line_number':356,'multiline':False]['text':' The string representation given by the "go/constant" package.','line_number':357,'multiline':False]['text':' byValue lets us sort the constants into increasing order.','line_number':364,'multiline':False]['text':' We take care in the Less method to sort in signed or unsigned order,','line_number':365,'multiline':False]['text':' as appropriate.','line_number':366,'multiline':False]['text':' genDecl processes one declaration clause.','line_number':378,'multiline':False]['text':' We only care about const declarations.','line_number':382,'multiline':False]['text':' The name of the type of the constants we are declaring.','line_number':385,'multiline':False]['text':' Can change if this is a multi-element declaration.','line_number':386,'multiline':False]['text':' Loop over the elements of the declaration. Each element is a ValueSpec:','line_number':388,'multiline':False]['text':' a list of names possibly followed by a type, possibly followed by values.','line_number':389,'multiline':False]['text':' If the type and value are both missing, we carry down the type (and value,','line_number':390,'multiline':False]['text':' but the "go/types" package takes care of that).','line_number':391,'multiline':False]['text':' Guaranteed to succeed as this is CONST.','line_number':393,'multiline':False]['text':' "X = 1". With no type but a value. If the constant is untyped,','line_number':395,'multiline':False]['text':' skip this vspec and reset the remembered type.','line_number':396,'multiline':False]['text':' If this is a simple type conversion, remember the type.','line_number':399,'multiline':False]['text':' We don't mind if this is actually a call; a qualified call won't','line_number':400,'multiline':False]['text':' be matched (that will be SelectorExpr, not Ident), and only unusual','line_number':401,'multiline':False]['text':' situations will result in a function call that appears to be','line_number':402,'multiline':False]['text':' a type conversion.','line_number':403,'multiline':False]['text':' "X T". We have a type. Remember it.','line_number':415,'multiline':False]['text':' This is not the type we're looking for.','line_number':423,'multiline':False]['text':' We now have a list of names (from one line of source code) all being','line_number':426,'multiline':False]['text':' declared with the desired type.','line_number':427,'multiline':False]['text':' Grab their names and actual values and store them in f.values.','line_number':428,'multiline':False]['text':' This dance lets the type checker find the values for us. It's a','line_number':433,'multiline':False]['text':' bit tricky: look up the object declared by the name, find its','line_number':434,'multiline':False]['text':' types.Const, and extract its value.','line_number':435,'multiline':False]['text':' Guaranteed to succeed as this is CONST.','line_number':444,'multiline':False]['text':' Helpers','line_number':473,'multiline':False]['text':' usize returns the number of bits of the smallest unsigned integer','line_number':475,'multiline':False]['text':' type that will hold n. Used to create the smallest possible slice of','line_number':476,'multiline':False]['text':' integers to use as indexes into the concatenated strings.','line_number':477,'multiline':False]['text':' 2^32 is enough constants for anyone.','line_number':485,'multiline':False]['text':' declareIndexAndNameVars declares the index slices and concatenated names','line_number':490,'multiline':False]['text':' strings representing the runs of values.','line_number':491,'multiline':False]['text':' declareIndexAndNameVar is the single-run version of declareIndexAndNameVars','line_number':516,'multiline':False]['text':' createIndexAndNameDecl returns the pair of declarations for the run. The caller will add "const" and "var".','line_number':523,'multiline':False]['text':' declareNameVars declares the concatenated names string representing all the values in the runs.','line_number':545,'multiline':False]['text':' buildOneRun generates the variables and String method for a single run of contiguous values.','line_number':556,'multiline':False]['text':' The generated code is simple enough to write as a Printf format.','line_number':561,'multiline':False]['text':' Signed or unsigned, 0 is still 0.','line_number':566,'multiline':False]['text':' Arguments to format are:','line_number':573,'multiline':False]['text':'','line_number':574,'multiline':False]['text':'	[1]: type name','line_number':575,'multiline':False]['text':'	[2]: size of index element (8 for uint8 etc.)','line_number':576,'multiline':False]['text':'	[3]: less than zero check (for signed types)','line_number':577,'multiline':False]['text':' Arguments to format are:','line_number':586,'multiline':False]['text':'	[1]: type name','line_number':587,'multiline':False]['text':'	[2]: lowest defined value for type, as a string','line_number':588,'multiline':False]['text':'	[3]: size of index element (8 for uint8 etc.)','line_number':589,'multiline':False]['text':'	[4]: less than zero check (for signed types)','line_number':590,'multiline':False]['text':'
 ','line_number':591,'multiline':True]['text':' buildMultipleRuns generates the variables and String method for multiple runs of contiguous values.','line_number':602,'multiline':False]['text':' For this pattern, a single Printf format won't do.','line_number':603,'multiline':False]['text':' For an unsigned lower bound of 0, "0 <= i" would be redundant.','line_number':616,'multiline':False]['text':' buildMap handles the case where the space is so sparse a map is a reasonable fallback.','line_number':633,'multiline':False]['text':' It's a rare situation but has simple code.','line_number':634,'multiline':False]['text':' Argument to format is the type name.','line_number':650,'multiline':False]