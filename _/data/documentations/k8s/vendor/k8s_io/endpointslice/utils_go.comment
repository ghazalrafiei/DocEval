['text':'
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
','line_number':1,'multiline':True]['text':' podToEndpoint returns an Endpoint object generated from a Pod, a Node, and a Service for a particular addressType.','line_number':36,'multiline':False]['text':' For compatibility reasons, "ready" should never be "true" if a pod is terminatng, unless','line_number':40,'multiline':False]['text':' publishNotReadyAddresses was set.','line_number':41,'multiline':False]['text':' getEndpointPorts returns a list of EndpointPorts generated from a Service','line_number':74,'multiline':False]['text':' and Pod.','line_number':75,'multiline':False]['text':' Allow headless service not to have ports.','line_number':79,'multiline':False]['text':' getEndpointAddresses returns a list of addresses generated from a pod status.','line_number':107,'multiline':False]['text':' newEndpointSlice returns an EndpointSlice generated from a service and','line_number':125,'multiline':False]['text':' endpointMeta.','line_number':126,'multiline':False]['text':' add parent service labels','line_number':141,'multiline':False]['text':' getEndpointSlicePrefix returns a suitable prefix for an EndpointSlice name.','line_number':147,'multiline':False]['text':' use the dash (if the name isn't too long) to make the pod name a bit prettier','line_number':149,'multiline':False]['text':' ownedBy returns true if the provided EndpointSlice is owned by the provided','line_number':157,'multiline':False]['text':' Service.','line_number':158,'multiline':False]['text':' getSliceToFill will return the EndpointSlice that will be closest to full','line_number':168,'multiline':False]['text':' when numEndpoints are added. If no EndpointSlice can be found, a nil pointer','line_number':169,'multiline':False]['text':' will be returned.','line_number':170,'multiline':False]['text':' addTriggerTimeAnnotation adds a triggerTime annotation to an EndpointSlice','line_number':187,'multiline':False]['text':' No new trigger time, clear the annotation.','line_number':195,'multiline':False]['text':' ServiceControllerKey returns a controller key for a Service but derived from','line_number':200,'multiline':False]['text':' an EndpointSlice.','line_number':201,'multiline':False]['text':' setEndpointSliceLabels returns a map with the new endpoint slices labels and true if there was an update.','line_number':213,'multiline':False]['text':' Slices labels must be equivalent to the Service labels except for the reserved IsHeadlessService, LabelServiceName and LabelManagedBy labels','line_number':214,'multiline':False]['text':' Changes to IsHeadlessService, LabelServiceName and LabelManagedBy labels on the Service do not result in updates to EndpointSlice labels.','line_number':215,'multiline':False]['text':' check if the endpoint slice and the service have the same labels','line_number':221,'multiline':False]['text':' clone current slice labels except the reserved labels','line_number':222,'multiline':False]['text':' copy endpoint slice labels','line_number':227,'multiline':False]['text':' copy service labels','line_number':236,'multiline':False]['text':' if the labels are not identical update the slice with the corresponding service labels','line_number':240,'multiline':False]['text':' add or remove headless label depending on the service Type','line_number':245,'multiline':False]['text':' override endpoint slices reserved labels','line_number':252,'multiline':False]['text':' isReservedLabelKey return true if the label is one of the reserved label for slices','line_number':259,'multiline':False]['text':' endpointSliceEndpointLen helps sort endpoint slices by the number of','line_number':269,'multiline':False]['text':' endpoints they contain.','line_number':270,'multiline':False]['text':' returns a map of address types used by a service','line_number':279,'multiline':False]['text':' TODO: (khenidak) when address types are removed in favor of','line_number':282,'multiline':False]['text':' v1.IPFamily this will need to be removed, and work directly with','line_number':283,'multiline':False]['text':' v1.IPFamily types','line_number':284,'multiline':False]['text':' IMPORTANT: we assume that IP of (discovery.AddressType enum) is never in use','line_number':286,'multiline':False]['text':' as it gets deprecated','line_number':287,'multiline':False]['text':' we have found families for this service','line_number':299,'multiline':False]['text':' TODO (khenidak) remove when (1) dual stack becomes','line_number':302,'multiline':False]['text':' enabled by default (2) v1.19 falls off supported versions','line_number':303,'multiline':False]['text':' Why do we need this:','line_number':305,'multiline':False]['text':' a cluster being upgraded to the new apis','line_number':306,'multiline':False]['text':' will have service.spec.IPFamilies: nil','line_number':307,'multiline':False]['text':' if the controller manager connected to old api','line_number':308,'multiline':False]['text':' server. This will have the nasty side effect of','line_number':309,'multiline':False]['text':' removing all slices already created for this service.','line_number':310,'multiline':False]['text':' this will disable all routing to service vip (ClusterIP)','line_number':311,'multiline':False]['text':' this ensures that this does not happen. Same for headless services','line_number':312,'multiline':False]['text':' we assume it is dual stack, until they get defaulted by *new* api-server','line_number':313,'multiline':False]['text':' this ensures that traffic is not disrupted  until then. But *may*','line_number':314,'multiline':False]['text':' include undesired families for headless services until then.','line_number':315,'multiline':False]['text':' headfull','line_number':317,'multiline':False]['text':' headless','line_number':327,'multiline':False]['text':' for now we assume two families. This should have minimal side effect','line_number':328,'multiline':False]['text':' if the service is headless with no selector, then this will remain the case','line_number':329,'multiline':False]['text':' if the service is headless with selector then chances are pods are still using single family','line_number':330,'multiline':False]['text':' since kubelet will need to restart in order to start patching pod status with multiple ips','line_number':331,'multiline':False]['text':' hintsEnabled returns true if the provided annotations include either','line_number':356,'multiline':False]['text':' v1.AnnotationTopologyMode or v1.DeprecatedAnnotationTopologyAwareHints key','line_number':357,'multiline':False]['text':' with a value set to "Auto" or "auto". When both are set,','line_number':358,'multiline':False]['text':' v1.DeprecatedAnnotationTopologyAwareHints has precedence.','line_number':359,'multiline':False]['text':' isServiceIPSet aims to check if the service's ClusterIP is set or not','line_number':371,'multiline':False]['text':' the objective is not to perform validation here','line_number':372,'multiline':False]['text':' copied from k8s.io/kubernetes/pkg/apis/core/v1/helper','line_number':373,'multiline':False]['text':' findPort locates the container port for the given pod and portName.  If the','line_number':378,'multiline':False]['text':' targetPort is a number, use that.  If the targetPort is a string, look that','line_number':379,'multiline':False]['text':' string up in all named ports in all containers in the target pod.  If no','line_number':380,'multiline':False]['text':' match is found, fail.','line_number':381,'multiline':False]['text':' copied from k8s.io/kubernetes/pkg/api/v1/pod','line_number':382,'multiline':False]