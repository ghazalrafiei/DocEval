['text':'go:build !appengine && gc && !purego','line_number':1,'multiline':False]['text':' +build !appengine','line_number':2,'multiline':False]['text':' +build gc','line_number':3,'multiline':False]['text':' +build !purego','line_number':4,'multiline':False]['text':' Registers:','line_number':8,'multiline':False]['text':' return value','line_number':10,'multiline':False]['text':' input pointer','line_number':11,'multiline':False]['text':' input length','line_number':12,'multiline':False]['text':' n / 32','line_number':13,'multiline':False]['text':' round0 performs the operation x = round(0, x).','line_number':33,'multiline':False]['text':' blockLoop processes as many 32-byte blocks as possible,','line_number':44,'multiline':False]['text':' updating v1, v2, v3, and v4. It assumes that n >= 32.','line_number':45,'multiline':False]['text':' func Sum64(b []byte) uint64','line_number':59,'multiline':False]['text':' if n < 32 { h = prime5 } else { h = 0 }','line_number':68,'multiline':False]['text':' NOTE: here and below, sequencing the EOR after the ROR (using a','line_number':99,'multiline':False]['text':' rotated register) is worth a small but measurable speedup for small','line_number':100,'multiline':False]['text':' inputs.','line_number':101,'multiline':False]['text':' func writeBlocks(d *Digest, b []byte) int','line_number':164,'multiline':False]['text':' Load state. Assume v[1-4] are stored contiguously.','line_number':168,'multiline':False]['text':' Store updated state.','line_number':177,'multiline':False]