['text':' Copyright 2014 The Prometheus Authors','line_number':1,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':2,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':3,'multiline':False]['text':' You may obtain a copy of the License at','line_number':4,'multiline':False]['text':'','line_number':5,'multiline':False]['text':' http://www.apache.org/licenses/LICENSE-2.0','line_number':6,'multiline':False]['text':'','line_number':7,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':8,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':9,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':10,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':11,'multiline':False]['text':' limitations under the License.','line_number':12,'multiline':False]['text':' Package prometheus is the core instrumentation package. It provides metrics','line_number':14,'multiline':False]['text':' primitives to instrument code for monitoring. It also offers a registry for','line_number':15,'multiline':False]['text':' metrics. Sub-packages allow to expose the registered metrics via HTTP','line_number':16,'multiline':False]['text':' (package promhttp) or push them to a Pushgateway (package push). There is','line_number':17,'multiline':False]['text':' also a sub-package promauto, which provides metrics constructors with','line_number':18,'multiline':False]['text':' automatic registration.','line_number':19,'multiline':False]['text':'','line_number':20,'multiline':False]['text':' All exported functions and methods are safe to be used concurrently unless','line_number':21,'multiline':False]['text':' specified otherwise.','line_number':22,'multiline':False]['text':'','line_number':23,'multiline':False]['text':' # A Basic Example','line_number':24,'multiline':False]['text':'','line_number':25,'multiline':False]['text':' As a starting point, a very basic usage example:','line_number':26,'multiline':False]['text':'','line_number':27,'multiline':False]['text':'	package main','line_number':28,'multiline':False]['text':'','line_number':29,'multiline':False]['text':'	import (','line_number':30,'multiline':False]['text':'		"log"','line_number':31,'multiline':False]['text':'		"net/http"','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':'		"github.com/prometheus/client_golang/prometheus"','line_number':34,'multiline':False]['text':'		"github.com/prometheus/client_golang/prometheus/promhttp"','line_number':35,'multiline':False]['text':'	)','line_number':36,'multiline':False]['text':'','line_number':37,'multiline':False]['text':'	type metrics struct {','line_number':38,'multiline':False]['text':'		cpuTemp  prometheus.Gauge','line_number':39,'multiline':False]['text':'		hdFailures *prometheus.CounterVec','line_number':40,'multiline':False]['text':'	}','line_number':41,'multiline':False]['text':'','line_number':42,'multiline':False]['text':'	func NewMetrics(reg prometheus.Registerer) *metrics {','line_number':43,'multiline':False]['text':'		m := &metrics{','line_number':44,'multiline':False]['text':'			cpuTemp: prometheus.NewGauge(prometheus.GaugeOpts{','line_number':45,'multiline':False]['text':'				Name: "cpu_temperature_celsius",','line_number':46,'multiline':False]['text':'				Help: "Current temperature of the CPU.",','line_number':47,'multiline':False]['text':'			}),','line_number':48,'multiline':False]['text':'			hdFailures: prometheus.NewCounterVec(','line_number':49,'multiline':False]['text':'				prometheus.CounterOpts{','line_number':50,'multiline':False]['text':'					Name: "hd_errors_total",','line_number':51,'multiline':False]['text':'					Help: "Number of hard-disk errors.",','line_number':52,'multiline':False]['text':'				},','line_number':53,'multiline':False]['text':'				[]string{"device"},','line_number':54,'multiline':False]['text':'			),','line_number':55,'multiline':False]['text':'		}','line_number':56,'multiline':False]['text':'		reg.MustRegister(m.cpuTemp)','line_number':57,'multiline':False]['text':'		reg.MustRegister(m.hdFailures)','line_number':58,'multiline':False]['text':'		return m','line_number':59,'multiline':False]['text':'	}','line_number':60,'multiline':False]['text':'','line_number':61,'multiline':False]['text':'	func main() {','line_number':62,'multiline':False]['text':'		// Create a non-global registry.','line_number':63,'multiline':False]['text':'		reg := prometheus.NewRegistry()','line_number':64,'multiline':False]['text':'','line_number':65,'multiline':False]['text':'		// Create new metrics and register them using the custom registry.','line_number':66,'multiline':False]['text':'		m := NewMetrics(reg)','line_number':67,'multiline':False]['text':'		// Set values for the new created metrics.','line_number':68,'multiline':False]['text':'		m.cpuTemp.Set(65.3)','line_number':69,'multiline':False]['text':'		m.hdFailures.With(prometheus.Labels{"device":"/dev/sda"}).Inc()','line_number':70,'multiline':False]['text':'','line_number':71,'multiline':False]['text':'		// Expose metrics and custom registry via an HTTP server','line_number':72,'multiline':False]['text':'		// using the HandleFor function. "/metrics" is the usual endpoint for that.','line_number':73,'multiline':False]['text':'		http.Handle("/metrics", promhttp.HandlerFor(reg, promhttp.HandlerOpts{Registry: reg}))','line_number':74,'multiline':False]['text':'		log.Fatal(http.ListenAndServe(":8080", nil))','line_number':75,'multiline':False]['text':'	}','line_number':76,'multiline':False]['text':'','line_number':77,'multiline':False]['text':' This is a complete program that exports two metrics, a Gauge and a Counter,','line_number':78,'multiline':False]['text':' the latter with a label attached to turn it into a (one-dimensional) vector.','line_number':79,'multiline':False]['text':' It register the metrics using a custom registry and exposes them via an HTTP server','line_number':80,'multiline':False]['text':' on the /metrics endpoint.','line_number':81,'multiline':False]['text':'','line_number':82,'multiline':False]['text':' # Metrics','line_number':83,'multiline':False]['text':'','line_number':84,'multiline':False]['text':' The number of exported identifiers in this package might appear a bit','line_number':85,'multiline':False]['text':' overwhelming. However, in addition to the basic plumbing shown in the example','line_number':86,'multiline':False]['text':' above, you only need to understand the different metric types and their','line_number':87,'multiline':False]['text':' vector versions for basic usage. Furthermore, if you are not concerned with','line_number':88,'multiline':False]['text':' fine-grained control of when and how to register metrics with the registry,','line_number':89,'multiline':False]['text':' have a look at the promauto package, which will effectively allow you to','line_number':90,'multiline':False]['text':' ignore registration altogether in simple cases.','line_number':91,'multiline':False]['text':'','line_number':92,'multiline':False]['text':' Above, you have already touched the Counter and the Gauge. There are two more','line_number':93,'multiline':False]['text':' advanced metric types: the Summary and Histogram. A more thorough description','line_number':94,'multiline':False]['text':' of those four metric types can be found in the Prometheus docs:','line_number':95,'multiline':False]['text':' https://prometheus.io/docs/concepts/metric_types/','line_number':96,'multiline':False]['text':'','line_number':97,'multiline':False]['text':' In addition to the fundamental metric types Gauge, Counter, Summary, and','line_number':98,'multiline':False]['text':' Histogram, a very important part of the Prometheus data model is the','line_number':99,'multiline':False]['text':' partitioning of samples along dimensions called labels, which results in','line_number':100,'multiline':False]['text':' metric vectors. The fundamental types are GaugeVec, CounterVec, SummaryVec,','line_number':101,'multiline':False]['text':' and HistogramVec.','line_number':102,'multiline':False]['text':'','line_number':103,'multiline':False]['text':' While only the fundamental metric types implement the Metric interface, both','line_number':104,'multiline':False]['text':' the metrics and their vector versions implement the Collector interface. A','line_number':105,'multiline':False]['text':' Collector manages the collection of a number of Metrics, but for convenience,','line_number':106,'multiline':False]['text':' a Metric can also “collect itself”. Note that Gauge, Counter, Summary, and','line_number':107,'multiline':False]['text':' Histogram are interfaces themselves while GaugeVec, CounterVec, SummaryVec,','line_number':108,'multiline':False]['text':' and HistogramVec are not.','line_number':109,'multiline':False]['text':'','line_number':110,'multiline':False]['text':' To create instances of Metrics and their vector versions, you need a suitable','line_number':111,'multiline':False]['text':' …Opts struct, i.e. GaugeOpts, CounterOpts, SummaryOpts, or HistogramOpts.','line_number':112,'multiline':False]['text':'','line_number':113,'multiline':False]['text':' # Custom Collectors and constant Metrics','line_number':114,'multiline':False]['text':'','line_number':115,'multiline':False]['text':' While you could create your own implementations of Metric, most likely you','line_number':116,'multiline':False]['text':' will only ever implement the Collector interface on your own. At a first','line_number':117,'multiline':False]['text':' glance, a custom Collector seems handy to bundle Metrics for common','line_number':118,'multiline':False]['text':' registration (with the prime example of the different metric vectors above,','line_number':119,'multiline':False]['text':' which bundle all the metrics of the same name but with different labels).','line_number':120,'multiline':False]['text':'','line_number':121,'multiline':False]['text':' There is a more involved use case, too: If you already have metrics','line_number':122,'multiline':False]['text':' available, created outside of the Prometheus context, you don't need the','line_number':123,'multiline':False]['text':' interface of the various Metric types. You essentially want to mirror the','line_number':124,'multiline':False]['text':' existing numbers into Prometheus Metrics during collection. An own','line_number':125,'multiline':False]['text':' implementation of the Collector interface is perfect for that. You can create','line_number':126,'multiline':False]['text':' Metric instances “on the fly” using NewConstMetric, NewConstHistogram, and','line_number':127,'multiline':False]['text':' NewConstSummary (and their respective Must… versions). NewConstMetric is used','line_number':128,'multiline':False]['text':' for all metric types with just a float64 as their value: Counter, Gauge, and','line_number':129,'multiline':False]['text':' a special “type” called Untyped. Use the latter if you are not sure if the','line_number':130,'multiline':False]['text':' mirrored metric is a Counter or a Gauge. Creation of the Metric instance','line_number':131,'multiline':False]['text':' happens in the Collect method. The Describe method has to return separate','line_number':132,'multiline':False]['text':' Desc instances, representative of the “throw-away” metrics to be created','line_number':133,'multiline':False]['text':' later.  NewDesc comes in handy to create those Desc instances. Alternatively,','line_number':134,'multiline':False]['text':' you could return no Desc at all, which will mark the Collector “unchecked”.','line_number':135,'multiline':False]['text':' No checks are performed at registration time, but metric consistency will','line_number':136,'multiline':False]['text':' still be ensured at scrape time, i.e. any inconsistencies will lead to scrape','line_number':137,'multiline':False]['text':' errors. Thus, with unchecked Collectors, the responsibility to not collect','line_number':138,'multiline':False]['text':' metrics that lead to inconsistencies in the total scrape result lies with the','line_number':139,'multiline':False]['text':' implementer of the Collector. While this is not a desirable state, it is','line_number':140,'multiline':False]['text':' sometimes necessary. The typical use case is a situation where the exact','line_number':141,'multiline':False]['text':' metrics to be returned by a Collector cannot be predicted at registration','line_number':142,'multiline':False]['text':' time, but the implementer has sufficient knowledge of the whole system to','line_number':143,'multiline':False]['text':' guarantee metric consistency.','line_number':144,'multiline':False]['text':'','line_number':145,'multiline':False]['text':' The Collector example illustrates the use case. You can also look at the','line_number':146,'multiline':False]['text':' source code of the processCollector (mirroring process metrics), the','line_number':147,'multiline':False]['text':' goCollector (mirroring Go metrics), or the expvarCollector (mirroring expvar','line_number':148,'multiline':False]['text':' metrics) as examples that are used in this package itself.','line_number':149,'multiline':False]['text':'','line_number':150,'multiline':False]['text':' If you just need to call a function to get a single float value to collect as','line_number':151,'multiline':False]['text':' a metric, GaugeFunc, CounterFunc, or UntypedFunc might be interesting','line_number':152,'multiline':False]['text':' shortcuts.','line_number':153,'multiline':False]['text':'','line_number':154,'multiline':False]['text':' # Advanced Uses of the Registry','line_number':155,'multiline':False]['text':'','line_number':156,'multiline':False]['text':' While MustRegister is the by far most common way of registering a Collector,','line_number':157,'multiline':False]['text':' sometimes you might want to handle the errors the registration might cause.','line_number':158,'multiline':False]['text':' As suggested by the name, MustRegister panics if an error occurs. With the','line_number':159,'multiline':False]['text':' Register function, the error is returned and can be handled.','line_number':160,'multiline':False]['text':'','line_number':161,'multiline':False]['text':' An error is returned if the registered Collector is incompatible or','line_number':162,'multiline':False]['text':' inconsistent with already registered metrics. The registry aims for','line_number':163,'multiline':False]['text':' consistency of the collected metrics according to the Prometheus data model.','line_number':164,'multiline':False]['text':' Inconsistencies are ideally detected at registration time, not at collect','line_number':165,'multiline':False]['text':' time. The former will usually be detected at start-up time of a program,','line_number':166,'multiline':False]['text':' while the latter will only happen at scrape time, possibly not even on the','line_number':167,'multiline':False]['text':' first scrape if the inconsistency only becomes relevant later. That is the','line_number':168,'multiline':False]['text':' main reason why a Collector and a Metric have to describe themselves to the','line_number':169,'multiline':False]['text':' registry.','line_number':170,'multiline':False]['text':'','line_number':171,'multiline':False]['text':' So far, everything we did operated on the so-called default registry, as it','line_number':172,'multiline':False]['text':' can be found in the global DefaultRegisterer variable. With NewRegistry, you','line_number':173,'multiline':False]['text':' can create a custom registry, or you can even implement the Registerer or','line_number':174,'multiline':False]['text':' Gatherer interfaces yourself. The methods Register and Unregister work in the','line_number':175,'multiline':False]['text':' same way on a custom registry as the global functions Register and Unregister','line_number':176,'multiline':False]['text':' on the default registry.','line_number':177,'multiline':False]['text':'','line_number':178,'multiline':False]['text':' There are a number of uses for custom registries: You can use registries with','line_number':179,'multiline':False]['text':' special properties, see NewPedanticRegistry. You can avoid global state, as','line_number':180,'multiline':False]['text':' it is imposed by the DefaultRegisterer. You can use multiple registries at','line_number':181,'multiline':False]['text':' the same time to expose different metrics in different ways.  You can use','line_number':182,'multiline':False]['text':' separate registries for testing purposes.','line_number':183,'multiline':False]['text':'','line_number':184,'multiline':False]['text':' Also note that the DefaultRegisterer comes registered with a Collector for Go','line_number':185,'multiline':False]['text':' runtime metrics (via NewGoCollector) and a Collector for process metrics (via','line_number':186,'multiline':False]['text':' NewProcessCollector). With a custom registry, you are in control and decide','line_number':187,'multiline':False]['text':' yourself about the Collectors to register.','line_number':188,'multiline':False]['text':'','line_number':189,'multiline':False]['text':' # HTTP Exposition','line_number':190,'multiline':False]['text':'','line_number':191,'multiline':False]['text':' The Registry implements the Gatherer interface. The caller of the Gather','line_number':192,'multiline':False]['text':' method can then expose the gathered metrics in some way. Usually, the metrics','line_number':193,'multiline':False]['text':' are served via HTTP on the /metrics endpoint. That's happening in the example','line_number':194,'multiline':False]['text':' above. The tools to expose metrics via HTTP are in the promhttp sub-package.','line_number':195,'multiline':False]['text':'','line_number':196,'multiline':False]['text':' # Pushing to the Pushgateway','line_number':197,'multiline':False]['text':'','line_number':198,'multiline':False]['text':' Function for pushing to the Pushgateway can be found in the push sub-package.','line_number':199,'multiline':False]['text':'','line_number':200,'multiline':False]['text':' # Graphite Bridge','line_number':201,'multiline':False]['text':'','line_number':202,'multiline':False]['text':' Functions and examples to push metrics from a Gatherer to Graphite can be','line_number':203,'multiline':False]['text':' found in the graphite sub-package.','line_number':204,'multiline':False]['text':'','line_number':205,'multiline':False]['text':' # Other Means of Exposition','line_number':206,'multiline':False]['text':'','line_number':207,'multiline':False]['text':' More ways of exposing metrics can easily be added by following the approaches','line_number':208,'multiline':False]['text':' of the existing implementations.','line_number':209,'multiline':False]