['text':' Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.','line_number':1,'multiline':False]['text':' Use of this file is governed by the BSD 3-clause license that','line_number':2,'multiline':False]['text':' can be found in the LICENSE.txt file in the project root.','line_number':3,'multiline':False]['text':'func (b *Recognizer) GetTokenTypeMap() {','line_number':94,'multiline':False]['text':'    var tokenNames = b.GetTokenNames()','line_number':95,'multiline':False]['text':'    if (tokenNames==nil) {','line_number':96,'multiline':False]['text':'        panic("The current recognizer does not provide a list of token names.")','line_number':97,'multiline':False]['text':'    }','line_number':98,'multiline':False]['text':'    var result = tokenTypeMapCache[tokenNames]','line_number':99,'multiline':False]['text':'    if(result==nil) {','line_number':100,'multiline':False]['text':'        result = tokenNames.reduce(function(o, k, i) { o[k] = i })','line_number':101,'multiline':False]['text':'        result.EOF = TokenEOF','line_number':102,'multiline':False]['text':'        tokenTypeMapCache[tokenNames] = result','line_number':103,'multiline':False]['text':'    }','line_number':104,'multiline':False]['text':'    return result','line_number':105,'multiline':False]['text':'}','line_number':106,'multiline':False]['text':' Get a map from rule names to rule indexes.','line_number':108,'multiline':False]['text':'','line_number':109,'multiline':False]['text':' <p>Used for XPath and tree pattern compilation.</p>','line_number':110,'multiline':False]['text':'    var ruleNames = b.GetRuleNames()','line_number':114,'multiline':False]['text':'    if (ruleNames==nil) {','line_number':115,'multiline':False]['text':'        panic("The current recognizer does not provide a list of rule names.")','line_number':116,'multiline':False]['text':'    }','line_number':117,'multiline':False]['text':'','line_number':118,'multiline':False]['text':'    var result = ruleIndexMapCache[ruleNames]','line_number':119,'multiline':False]['text':'    if(result==nil) {','line_number':120,'multiline':False]['text':'        result = ruleNames.reduce(function(o, k, i) { o[k] = i })','line_number':121,'multiline':False]['text':'        ruleIndexMapCache[ruleNames] = result','line_number':122,'multiline':False]['text':'    }','line_number':123,'multiline':False]['text':'    return result','line_number':124,'multiline':False]['text':'    var ttype = b.GetTokenTypeMap()[tokenName]','line_number':129,'multiline':False]['text':'    if (ttype !=nil) {','line_number':130,'multiline':False]['text':'        return ttype','line_number':131,'multiline':False]['text':'    } else {','line_number':132,'multiline':False]['text':'        return TokenInvalidType','line_number':133,'multiline':False]['text':'    }','line_number':134,'multiline':False]['text':'func (b *Recognizer) GetTokenTypeMap() map[string]int {','line_number':137,'multiline':False]['text':'    Vocabulary vocabulary = getVocabulary()','line_number':138,'multiline':False]['text':'','line_number':139,'multiline':False]['text':'    Synchronized (tokenTypeMapCache) {','line_number':140,'multiline':False]['text':'        Map<String, Integer> result = tokenTypeMapCache.Get(vocabulary)','line_number':141,'multiline':False]['text':'        if (result == null) {','line_number':142,'multiline':False]['text':'            result = new HashMap<String, Integer>()','line_number':143,'multiline':False]['text':'            for (int i = 0; i < GetATN().maxTokenType; i++) {','line_number':144,'multiline':False]['text':'                String literalName = vocabulary.getLiteralName(i)','line_number':145,'multiline':False]['text':'                if (literalName != null) {','line_number':146,'multiline':False]['text':'                    result.put(literalName, i)','line_number':147,'multiline':False]['text':'                }','line_number':148,'multiline':False]['text':'','line_number':149,'multiline':False]['text':'                String symbolicName = vocabulary.GetSymbolicName(i)','line_number':150,'multiline':False]['text':'                if (symbolicName != null) {','line_number':151,'multiline':False]['text':'                    result.put(symbolicName, i)','line_number':152,'multiline':False]['text':'                }','line_number':153,'multiline':False]['text':'            }','line_number':154,'multiline':False]['text':'','line_number':155,'multiline':False]['text':'            result.put("EOF", Token.EOF)','line_number':156,'multiline':False]['text':'            result = Collections.unmodifiableMap(result)','line_number':157,'multiline':False]['text':'            tokenTypeMapCache.put(vocabulary, result)','line_number':158,'multiline':False]['text':'        }','line_number':159,'multiline':False]['text':'','line_number':160,'multiline':False]['text':'        return result','line_number':161,'multiline':False]['text':'    }','line_number':162,'multiline':False]['text':'}','line_number':163,'multiline':False]['text':' What is the error header, normally line/character position information?//','line_number':165,'multiline':False]['text':' How should a token be displayed in an error message? The default','line_number':172,'multiline':False]['text':'','line_number':173,'multiline':False]['text':'	is to display just the text, but during development you might','line_number':174,'multiline':False]['text':'	want to have a lot of information spit out.  Override in that case','line_number':175,'multiline':False]['text':'	to use t.String() (which, for CommonToken, dumps everything about','line_number':176,'multiline':False]['text':'	the token). This is better than forcing you to override a method in','line_number':177,'multiline':False]['text':'	your token objects because you don't have to go modify your lexer','line_number':178,'multiline':False]['text':'	so that it creates a NewJava type.','line_number':179,'multiline':False]['text':'','line_number':180,'multiline':False]['text':' @deprecated This method is not called by the ANTLR 4 Runtime. Specific','line_number':181,'multiline':False]['text':' implementations of {@link ANTLRErrorStrategy} may provide a similar','line_number':182,'multiline':False]['text':' feature when necessary. For example, see','line_number':183,'multiline':False]['text':' {@link DefaultErrorStrategy//GetTokenErrorDisplay}.','line_number':184,'multiline':False]['text':' subclass needs to override these if there are sempreds or actions','line_number':208,'multiline':False]['text':' that the ATN interp needs to execute','line_number':209,'multiline':False]