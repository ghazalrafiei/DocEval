['text':' Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.','line_number':1,'multiline':False]['text':' Use of this file is governed by the BSD 3-clause license that','line_number':2,'multiline':False]['text':' can be found in the LICENSE.txt file in the project root.','line_number':3,'multiline':False]['text':' The basic notion of a tree has a parent, a payload, and a list of children.','line_number':7,'multiline':False]['text':'  It is the most abstract interface for all the trees used by ANTLR.','line_number':8,'multiline':False]['text':'/','line_number':9,'multiline':False]['text':' TODO','line_number':72,'multiline':False]['text':'func (this ParseTreeVisitor) Visit(ctx) {','line_number':73,'multiline':False]['text':'	if (Utils.isArray(ctx)) {','line_number':74,'multiline':False]['text':'		self := this','line_number':75,'multiline':False]['text':'		return ctx.map(function(child) { return VisitAtom(self, child)})','line_number':76,'multiline':False]['text':'	} else {','line_number':77,'multiline':False]['text':'		return VisitAtom(this, ctx)','line_number':78,'multiline':False]['text':'	}','line_number':79,'multiline':False]['text':'}','line_number':80,'multiline':False]['text':'','line_number':81,'multiline':False]['text':'func VisitAtom(Visitor, ctx) {','line_number':82,'multiline':False]['text':'	if (ctx.parser == nil) { //is terminal','line_number':83,'multiline':False]['text':'		return','line_number':84,'multiline':False]['text':'	}','line_number':85,'multiline':False]['text':'','line_number':86,'multiline':False]['text':'	name := ctx.parser.ruleNames[ctx.ruleIndex]','line_number':87,'multiline':False]['text':'	funcName := "Visit" + Utils.titleCase(name)','line_number':88,'multiline':False]['text':'','line_number':89,'multiline':False]['text':'	return Visitor[funcName](ctx)','line_number':90,'multiline':False]['text':'}','line_number':91,'multiline':False]['text':' Represents a token that was consumed during reSynchronization','line_number':186,'multiline':False]['text':' rather than during a valid Match operation. For example,','line_number':187,'multiline':False]['text':' we will create this kind of a node during single token insertion','line_number':188,'multiline':False]['text':' and deletion as well as during "consume until error recovery set"','line_number':189,'multiline':False]['text':' upon no viable alternative exceptions.','line_number':190,'multiline':False]['text':' Performs a walk on the given parse tree starting at the root and going down recursively','line_number':217,'multiline':False]['text':' with depth-first search. On each node, EnterRule is called before','line_number':218,'multiline':False]['text':' recursively walking down into child nodes, then','line_number':219,'multiline':False]['text':' ExitRule is called after the recursive call to wind up.','line_number':220,'multiline':False]['text':' Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//EnterEveryRule}','line_number':237,'multiline':False]['text':' then by triggering the event specific to the given parse tree node','line_number':238,'multiline':False]['text':' Exits a grammar rule by first triggering the event specific to the given parse tree node','line_number':245,'multiline':False]['text':' then by triggering the generic event {@link ParseTreeListener//ExitEveryRule}','line_number':246,'multiline':False]