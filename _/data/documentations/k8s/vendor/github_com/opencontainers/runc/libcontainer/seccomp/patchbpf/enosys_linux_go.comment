['text':'go:build cgo && seccomp','line_number':1,'multiline':False]['text':' +build cgo,seccomp','line_number':2,'multiline':False]['text':' #cgo pkg-config: libseccomp','line_number':25,'multiline':False]['text':'
#include <errno.h>
#include <stdint.h>
#include <seccomp.h>
#include <linux/seccomp.h>

const uint32_t C_ACT_ERRNO_ENOSYS = SCMP_ACT_ERRNO(ENOSYS);

// Copied from <linux/seccomp.h>.

#ifndef SECCOMP_SET_MODE_FILTER
#	define SECCOMP_SET_MODE_FILTER 1
#endif
const uintptr_t C_SET_MODE_FILTER = SECCOMP_SET_MODE_FILTER;

#ifndef SECCOMP_FILTER_FLAG_LOG
#	define SECCOMP_FILTER_FLAG_LOG (1UL << 1)
#endif
const uintptr_t C_FILTER_FLAG_LOG = SECCOMP_FILTER_FLAG_LOG;

#ifndef SECCOMP_FILTER_FLAG_NEW_LISTENER
#	define SECCOMP_FILTER_FLAG_NEW_LISTENER (1UL << 3)
#endif
const uintptr_t C_FILTER_FLAG_NEW_LISTENER = SECCOMP_FILTER_FLAG_NEW_LISTENER;

#ifndef AUDIT_ARCH_RISCV64
#ifndef EM_RISCV
#define EM_RISCV		243
#endif
#define AUDIT_ARCH_RISCV64	(EM_RISCV|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
#endif

// We use the AUDIT_ARCH_* values because those are the ones used by the kernel
// and SCMP_ARCH_* sometimes has fake values (such as SCMP_ARCH_X32). But we
// use <seccomp.h> so we get libseccomp's fallback definitions of AUDIT_ARCH_*.

const uint32_t C_AUDIT_ARCH_I386         = AUDIT_ARCH_I386;
const uint32_t C_AUDIT_ARCH_X86_64       = AUDIT_ARCH_X86_64;
const uint32_t C_AUDIT_ARCH_ARM          = AUDIT_ARCH_ARM;
const uint32_t C_AUDIT_ARCH_AARCH64      = AUDIT_ARCH_AARCH64;
const uint32_t C_AUDIT_ARCH_MIPS         = AUDIT_ARCH_MIPS;
const uint32_t C_AUDIT_ARCH_MIPS64       = AUDIT_ARCH_MIPS64;
const uint32_t C_AUDIT_ARCH_MIPS64N32    = AUDIT_ARCH_MIPS64N32;
const uint32_t C_AUDIT_ARCH_MIPSEL       = AUDIT_ARCH_MIPSEL;
const uint32_t C_AUDIT_ARCH_MIPSEL64     = AUDIT_ARCH_MIPSEL64;
const uint32_t C_AUDIT_ARCH_MIPSEL64N32  = AUDIT_ARCH_MIPSEL64N32;
const uint32_t C_AUDIT_ARCH_PPC          = AUDIT_ARCH_PPC;
const uint32_t C_AUDIT_ARCH_PPC64        = AUDIT_ARCH_PPC64;
const uint32_t C_AUDIT_ARCH_PPC64LE      = AUDIT_ARCH_PPC64LE;
const uint32_t C_AUDIT_ARCH_S390         = AUDIT_ARCH_S390;
const uint32_t C_AUDIT_ARCH_S390X        = AUDIT_ARCH_S390X;
const uint32_t C_AUDIT_ARCH_RISCV64      = AUDIT_ARCH_RISCV64;
','line_number':26,'multiline':True]['text':' This syscall is used for multiplexing "large" syscalls on s390(x). Unknown','line_number':83,'multiline':False]['text':' syscalls will end up with this syscall number, so we need to explicitly','line_number':84,'multiline':False]['text':' return -ENOSYS for this syscall on those architectures.','line_number':85,'multiline':False]['text':' Trace is considered an "allow" action because a good tracer should','line_number':90,'multiline':False]['text':' support future syscalls (by handling -ENOSYS on its own), and giving','line_number':91,'multiline':False]['text':' -ENOSYS will be disruptive for emulation.','line_number':92,'multiline':False]['text':' Read the next instruction. We have to use NativeEndian because','line_number':104,'multiline':False]['text':' seccomp_export_bpf outputs the program in *host* endian-ness.','line_number':105,'multiline':False]['text':' Parsing complete.','line_number':109,'multiline':False]['text':' Parsing stopped mid-instruction.','line_number':113,'multiline':False]['text':' All other errors.','line_number':116,'multiline':False]['text':' Close so that the reader actually gets EOF.','line_number':148,'multiline':False]['text':' Parse the instructions.','line_number':155,'multiline':False]['text':' Convert to actual native architecture.','line_number':174,'multiline':False]['text':' NOTE: x32 is treated like x86_64 except all x32 syscalls have the','line_number':183,'multiline':False]['text':'       30th bit of the syscall number set to indicate that it's not a','line_number':184,'multiline':False]['text':'       normal x86_64 syscall.','line_number':185,'multiline':False]['text':' Figure out largest syscall number referenced in the filter for each','line_number':222,'multiline':False]['text':' architecture. We will be generating code based on the native architecture','line_number':223,'multiline':False]['text':' representation, but SCMP_ARCH_X32 means we have to track cases where the','line_number':224,'multiline':False]['text':' same architecture has different largest syscalls based on the mode.','line_number':225,'multiline':False]['text':' Only loop over architectures which are present in the filter. Any other','line_number':228,'multiline':False]['text':' architectures will get the libseccomp bad architecture action anyway.','line_number':229,'multiline':False]['text':' Map native architecture to a real architecture value to avoid','line_number':236,'multiline':False]['text':' doubling-up the lastSyscall mapping.','line_number':237,'multiline':False]['text':' Figure out native architecture representation of the architecture.','line_number':246,'multiline':False]['text':' Because of ArchNative we may hit the same entry multiple times.','line_number':256,'multiline':False]['text':' Just skip it if we've seen this (nativeArch, ScmpArch)','line_number':257,'multiline':False]['text':' combination before.','line_number':258,'multiline':False]['text':' Find the largest syscall in the filter for this architecture.','line_number':262,'multiline':False]['text':' Ignore unknown syscalls.','line_number':267,'multiline':False]['text':' FIXME FIXME FIXME','line_number':284,'multiline':False]['text':'','line_number':285,'multiline':False]['text':' This solution is less than ideal. In the future it would be great to have','line_number':286,'multiline':False]['text':' per-arch information about which syscalls were added in which kernel','line_number':287,'multiline':False]['text':' versions so we can create far more accurate filter rules (handling holes in','line_number':288,'multiline':False]['text':' the syscall table and determining -ENOSYS requirements based on kernel','line_number':289,'multiline':False]['text':' minimum version alone.','line_number':290,'multiline':False]['text':'','line_number':291,'multiline':False]['text':' This implementation can in principle cause issues with syscalls like','line_number':292,'multiline':False]['text':' close_range(2) which were added out-of-order in the syscall table between','line_number':293,'multiline':False]['text':' kernel releases.','line_number':294,'multiline':False]['text':' A jump-table for each nativeArch used to generate the initial','line_number':296,'multiline':False]['text':' conditional jumps -- measured from the *END* of the program so they','line_number':297,'multiline':False]['text':' remain valid after prepending to the tail.','line_number':298,'multiline':False]['text':' Generate our own -ENOSYS rules for each architecture. They have to be','line_number':301,'multiline':False]['text':' generated in reverse (prepended to the tail of the program) because the','line_number':302,'multiline':False]['text':' JumpIf jumps need to be computed from the end of the program.','line_number':303,'multiline':False]['text':' Fall-through rules jump into the filter.','line_number':305,'multiline':False]['text':' Rules which jump to here get -ENOSYS.','line_number':307,'multiline':False]['text':' Generate the syscall -ENOSYS rules.','line_number':311,'multiline':False]['text':' The number of instructions from the tail of this section which need','line_number':313,'multiline':False]['text':' to be jumped in order to reach the -ENOSYS return. If the section','line_number':314,'multiline':False]['text':' does not jump, it will fall through to the actual filter.','line_number':315,'multiline':False]['text':' Add the load instruction for the syscall number -- we jump here','line_number':319,'multiline':False]['text':' directly from the arch code so we need to do it here. Sadly we can't','line_number':320,'multiline':False]['text':' share this code between architecture branches.','line_number':321,'multiline':False]['text':' load [0] (syscall number)','line_number':323,'multiline':False]['text':' NOTE: We assume sizeof(int) == 4.','line_number':324,'multiline':False]['text':' No syscalls found for this arch -- skip it and move on.','line_number':329,'multiline':False]['text':' Get the only syscall and scmpArch in the map.','line_number':332,'multiline':False]['text':' Return -ENOSYS for setup(2) on s390(x). This syscall is used for','line_number':343,'multiline':False]['text':' multiplexing "large syscall number" syscalls, but if the syscall','line_number':344,'multiline':False]['text':' number is not known to the kernel then the syscall number is','line_number':345,'multiline':False]['text':' left unchanged (and because it is sysno=0, you'll end up with','line_number':346,'multiline':False]['text':' EPERM for syscalls the kernel doesn't know about).','line_number':347,'multiline':False]['text':'','line_number':348,'multiline':False]['text':' The actual setup(2) syscall is never used by userspace anymore','line_number':349,'multiline':False]['text':' (and hasn't existed for decades) outside of this multiplexing','line_number':350,'multiline':False]['text':' scheme so returning -ENOSYS is fine.','line_number':351,'multiline':False]['text':' jne [setup=0],1','line_number':354,'multiline':False]['text':' ret [ENOSYS]','line_number':360,'multiline':False]['text':' The simplest case just boils down to a single jgt instruction,','line_number':365,'multiline':False]['text':' with special handling if baseJumpEnosys is larger than 255 (and','line_number':366,'multiline':False]['text':' thus a long jump is required).','line_number':367,'multiline':False]['text':' jgt [syscall],[baseJumpEnosys+1]','line_number':371,'multiline':False]['text':' ja [baseJumpFilter]','line_number':377,'multiline':False]['text':' jle [syscall],1','line_number':382,'multiline':False]['text':' ja [baseJumpEnosys+1]','line_number':384,'multiline':False]['text':' ja [baseJumpFilter]','line_number':386,'multiline':False]['text':' If we're on x86 we need to add a check for x32 and if we're in','line_number':391,'multiline':False]['text':' the wrong mode we jump over the section.','line_number':392,'multiline':False]['text':' Generate a prefix to check the mode.','line_number':394,'multiline':False]['text':' jset (1<<30),[len(tail)-1]','line_number':398,'multiline':False]['text':' jset (1<<30),0,[len(tail)-1]','line_number':407,'multiline':False]['text':' x32 and x86_64 are a unique case, we can't handle any others.','line_number':421,'multiline':False]['text':' The x32 ABI indicates that a syscall is being made by an x32','line_number':435,'multiline':False]['text':' process by setting the 30th bit of the syscall number, but we','line_number':436,'multiline':False]['text':' need to do some special-casing depending on whether we need to','line_number':437,'multiline':False]['text':' do long jumps.','line_number':438,'multiline':False]['text':' For the simple case we want to have something like:','line_number':440,'multiline':False]['text':'   jset (1<<30),1','line_number':441,'multiline':False]['text':'   jgt [x86 syscall],[baseJumpEnosys+2],1','line_number':442,'multiline':False]['text':'   jgt [x32 syscall],[baseJumpEnosys+1]','line_number':443,'multiline':False]['text':'   ja [baseJumpFilter]','line_number':444,'multiline':False]['text':' jset (1<<30),1','line_number':446,'multiline':False]['text':' jgt [x86 syscall],[baseJumpEnosys+1],1','line_number':448,'multiline':False]['text':' jgt [x32 syscall],[baseJumpEnosys]','line_number':454,'multiline':False]['text':' ja [baseJumpFilter]','line_number':460,'multiline':False]['text':' But if the [baseJumpEnosys+2] jump is larger than 255 we','line_number':464,'multiline':False]['text':' need to do a long jump like so:','line_number':465,'multiline':False]['text':'   jset (1<<30),1','line_number':466,'multiline':False]['text':'   jgt [x86 syscall],1,2','line_number':467,'multiline':False]['text':'   jle [x32 syscall],1','line_number':468,'multiline':False]['text':'   ja [baseJumpEnosys+1]','line_number':469,'multiline':False]['text':'   ja [baseJumpFilter]','line_number':470,'multiline':False]['text':' jset (1<<30),1','line_number':472,'multiline':False]['text':' jgt [x86 syscall],1,2','line_number':474,'multiline':False]['text':' jle [x32 syscall],[baseJumpEnosys]','line_number':480,'multiline':False]['text':' ja [baseJumpEnosys+1]','line_number':486,'multiline':False]['text':' ja [baseJumpFilter]','line_number':488,'multiline':False]['text':' Prepend this section to the tail.','line_number':496,'multiline':False]['text':' Update jump table.','line_number':499,'multiline':False]['text':' Add a dummy "jump to filter" for any architecture we might miss below.','line_number':503,'multiline':False]['text':' Such architectures will probably get the BadArch action of the filter','line_number':504,'multiline':False]['text':' regardless.','line_number':505,'multiline':False]['text':' ja [end of stub and start of filter]','line_number':507,'multiline':False]['text':' Generate the jump rules for each architecture. This has to be done in','line_number':511,'multiline':False]['text':' reverse as well for the same reason as above. We add to programTail','line_number':512,'multiline':False]['text':' directly because the jumps are impacted by each architecture rule we add','line_number':513,'multiline':False]['text':' as well.','line_number':514,'multiline':False]['text':'','line_number':515,'multiline':False]['text':' TODO: Maybe we want to optimise to avoid long jumps here? So sort the','line_number':516,'multiline':False]['text':'       architectures based on how large the jumps are going to be, or','line_number':517,'multiline':False]['text':'       re-sort the candidate architectures each time to make sure that we','line_number':518,'multiline':False]['text':'       pick the largest jump which is going to be smaller than 255.','line_number':519,'multiline':False]['text':' We jump forwards but the jump table is calculated from the *END*.','line_number':521,'multiline':False]['text':' Same routine as above -- this is a basic jeq check, complicated','line_number':524,'multiline':False]['text':' slightly if it turns out that we need to do a long jump.','line_number':525,'multiline':False]['text':' jeq [arch],[jump]','line_number':528,'multiline':False]['text':' jne [arch],1','line_number':537,'multiline':False]['text':' ja [jump]','line_number':543,'multiline':False]['text':' Prepend the load instruction for the architecture.','line_number':549,'multiline':False]['text':' load [4] (architecture)','line_number':551,'multiline':False]['text':' NOTE: We assume sizeof(int) == 4.','line_number':552,'multiline':False]['text':' And that's all folks!','line_number':555,'multiline':False]['text':' Convert to []unix.SockFilter for unix.SockFilter.','line_number':565,'multiline':False]['text':' Patch the generated cBPF only when there is not a defaultErrnoRet set','line_number':579,'multiline':False]['text':' and it is different from ENOSYS','line_number':580,'multiline':False]['text':' We only add the stub if the default action is not permissive.','line_number':584,'multiline':False]['text':' Ignore the error since pre-2.4 libseccomp is treated as API level 0.','line_number':627,'multiline':False]['text':' TODO: Support seccomp flags not yet added to libseccomp-golang...','line_number':643,'multiline':False]['text':' only return a valid fd when C_FILTER_FLAG_NEW_LISTENER is set','line_number':660,'multiline':False]['text':' If no seccomp flags were requested we can use the old-school prctl(2).','line_number':661,'multiline':False]['text':' PatchAndLoad takes a seccomp configuration and a libseccomp filter which has','line_number':682,'multiline':False]['text':' been pre-configured with the set of rules in the seccomp config. It then','line_number':683,'multiline':False]['text':' patches said filter to handle -ENOSYS in a much nicer manner than the','line_number':684,'multiline':False]['text':' default libseccomp default action behaviour, and loads the patched filter','line_number':685,'multiline':False]['text':' into the kernel for the current process.','line_number':686,'multiline':False]['text':' Generate a patched filter.','line_number':688,'multiline':False]['text':' Get the set of libseccomp flags set.','line_number':694,'multiline':False]['text':' Set no_new_privs if it was requested, though in runc we handle','line_number':700,'multiline':False]['text':' no_new_privs separately so warn if we hit this path.','line_number':701,'multiline':False]['text':' Finally, load the filter.','line_number':709,'multiline':False]