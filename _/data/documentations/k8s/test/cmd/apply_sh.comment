['text':'!/usr/bin/env bash','line_number':1,'multiline':False]['text':' Copyright 2018 The Kubernetes Authors.','line_number':3,'multiline':False]['text':'','line_number':4,'multiline':False]['text':' Licensed under the Apache License, Version 2.0 (the "License");','line_number':5,'multiline':False]['text':' you may not use this file except in compliance with the License.','line_number':6,'multiline':False]['text':' You may obtain a copy of the License at','line_number':7,'multiline':False]['text':'','line_number':8,'multiline':False]['text':'     http://www.apache.org/licenses/LICENSE-2.0','line_number':9,'multiline':False]['text':'','line_number':10,'multiline':False]['text':' Unless required by applicable law or agreed to in writing, software','line_number':11,'multiline':False]['text':' distributed under the License is distributed on an "AS IS" BASIS,','line_number':12,'multiline':False]['text':' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.','line_number':13,'multiline':False]['text':' See the License for the specific language governing permissions and','line_number':14,'multiline':False]['text':' limitations under the License.','line_number':15,'multiline':False]['text':' Runs tests related to kubectl apply.','line_number':21,'multiline':False]['text':'# kubectl apply should create the resource that doesn't exist yet','line_number':28,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':29,'multiline':False]['text':' Command: apply a pod "test-pod" (doesn't exist) should create this pod','line_number':31,'multiline':False]['text':' Post-Condition: pod "test-pod" is created','line_number':33,'multiline':False]['text':' Post-Condition: pod "test-pod" has configuration annotation','line_number':35,'multiline':False]['text':' pod has field manager for kubectl client-side apply','line_number':37,'multiline':False]['text':' Clean up','line_number':40,'multiline':False]['text':'## set-last-applied','line_number':43,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':44,'multiline':False]['text':' Command: create "test-pod" (doesn't exist) should create this pod without last-applied annotation','line_number':46,'multiline':False]['text':' Post-Condition: pod "test-pod" is created','line_number':48,'multiline':False]['text':' Pre-Condition: pod "test-pod" does not have configuration annotation','line_number':50,'multiline':False]['text':' Dry-run set-last-applied','line_number':52,'multiline':False]['text':' Command','line_number':56,'multiline':False]['text':' Post-Condition: pod "test-pod" has configuration annotation','line_number':58,'multiline':False]['text':' Clean up','line_number':60,'multiline':False]['text':'# kubectl apply should be able to clear defaulted fields.','line_number':63,'multiline':False]['text':' Pre-Condition: no deployment exists','line_number':64,'multiline':False]['text':' Command: apply a deployment "test-deployment-retainkeys" (doesn't exist) should create this deployment','line_number':66,'multiline':False]['text':' Post-Condition: deployment "test-deployment-retainkeys" created','line_number':68,'multiline':False]['text':' Post-Condition: deployment "test-deployment-retainkeys" has defaulted fields','line_number':70,'multiline':False]['text':' Command: apply a deployment "test-deployment-retainkeys" should clear','line_number':75,'multiline':False]['text':' defaulted fields and successfully update the deployment','line_number':76,'multiline':False]['text':' Post-Condition: deployment "test-deployment-retainkeys" has updated fields','line_number':78,'multiline':False]['text':' Clean up','line_number':83,'multiline':False]['text':'# kubectl apply -f with label selector should only apply matching objects','line_number':86,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':87,'multiline':False]['text':' apply','line_number':89,'multiline':False]['text':' check right pod exists','line_number':91,'multiline':False]['text':' check wrong pod doesn't exist','line_number':93,'multiline':False]['text':' cleanup','line_number':96,'multiline':False]['text':'# kubectl apply --dry-run=server','line_number':99,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':100,'multiline':False]['text':' apply dry-run','line_number':103,'multiline':False]['text':' No pod exists','line_number':106,'multiline':False]['text':' apply non dry-run creates the pod','line_number':108,'multiline':False]['text':' apply changes','line_number':111,'multiline':False]['text':' Post-Condition: label still has initial value','line_number':114,'multiline':False]['text':' Ensure dry-run doesn't persist change','line_number':116,'multiline':False]['text':' clean-up','line_number':120,'multiline':False]['text':'# kubectl apply dry-run on CR','line_number':123,'multiline':False]['text':' Create CRD','line_number':124,'multiline':False]['text':' Ensure the API server has recognized and started serving the associated CR API','line_number':158,'multiline':False]['text':' Dry-run create the CR','line_number':170,'multiline':False]['text':' Make sure that the CR doesn't exist','line_number':172,'multiline':False]['text':' clean-up','line_number':175,'multiline':False]['text':'# kubectl apply --prune','line_number':178,'multiline':False]['text':' Pre-Condition: namespace nsb exists; no POD exists','line_number':179,'multiline':False]['text':' apply a into namespace nsb','line_number':182,'multiline':False]['text':' apply b with namespace','line_number':185,'multiline':False]['text':' check right pod exists and wrong pod doesn't exist','line_number':187,'multiline':False]['text':' cleanup','line_number':190,'multiline':False]['text':' same thing without prune for a sanity check','line_number':193,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':194,'multiline':False]['text':' apply a','line_number':197,'multiline':False]['text':' check right pod exists','line_number':199,'multiline':False]['text':' check wrong pod doesn't exist','line_number':201,'multiline':False]['text':' apply b','line_number':204,'multiline':False]['text':' check both pods exist','line_number':206,'multiline':False]['text':' cleanup','line_number':210,'multiline':False]['text':'# kubectl apply --prune requires a --all flag to select everything','line_number':214,'multiline':False]['text':' should apply everything','line_number':218,'multiline':False]['text':'# kubectl apply --prune should fallback to delete for non reapable types','line_number':226,'multiline':False]['text':'# kubectl apply --prune --prune-whitelist','line_number':234,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':235,'multiline':False]['text':' apply pod a','line_number':237,'multiline':False]['text':' check right pod exists','line_number':239,'multiline':False]['text':' apply svc and don't prune pod a by overwriting whitelist','line_number':241,'multiline':False]['text':' apply svc and prune pod a with default whitelist','line_number':245,'multiline':False]['text':' cleanup','line_number':249,'multiline':False]['text':'# kubectl apply --prune can prune resources not in the defaulted namespace','line_number':252,'multiline':False]['text':' Pre-Condition: namespace nsb exists; no POD exists','line_number':253,'multiline':False]['text':' apply a into namespace nsb','line_number':256,'multiline':False]['text':' apply b with namespace','line_number':259,'multiline':False]['text':' apply --prune must prune a','line_number':262,'multiline':False]['text':' check wrong pod doesn't exist and right pod exists','line_number':264,'multiline':False]['text':' cleanup','line_number':267,'multiline':False]['text':'# kubectl apply -n must fail if input file contains namespace other than the one given in -n','line_number':270,'multiline':False]['text':'# kubectl apply -f some.yml --force','line_number':274,'multiline':False]['text':' Pre-condition: no service exists','line_number':275,'multiline':False]['text':' apply service a','line_number':277,'multiline':False]['text':' check right service exists','line_number':279,'multiline':False]['text':' change immutable field and apply service a','line_number':281,'multiline':False]['text':' apply --force to recreate resources for immutable fields','line_number':284,'multiline':False]['text':' check immutable field exists','line_number':286,'multiline':False]['text':' cleanup','line_number':288,'multiline':False]['text':'# kubectl apply -k somedir','line_number':291,'multiline':False]['text':' cleanup','line_number':296,'multiline':False]['text':'# kubectl apply --kustomize somedir','line_number':299,'multiline':False]['text':' cleanup','line_number':304,'multiline':False]['text':'# kubectl apply multiple resources with one failure during apply phase.','line_number':307,'multiline':False]['text':' Pre-Condition: namespace does not exist and no POD exists','line_number':308,'multiline':False]['text':' First pass, namespace is created, but pod is not (since namespace does not exist yet).','line_number':312,'multiline':False]['text':' Second pass, pod is created (now that namespace exists).','line_number':317,'multiline':False]['text':' cleanup','line_number':320,'multiline':False]['text':'# kubectl apply multiple resources with one failure during builder phase.','line_number':323,'multiline':False]['text':' Pre-Condition: No configmaps with name=foo','line_number':324,'multiline':False]['text':' Apply a configmap and a bogus custom resource.','line_number':326,'multiline':False]['text':' Should be error message from bogus custom resource.','line_number':328,'multiline':False]['text':' ConfigMap should have been created even with custom resource error.','line_number':330,'multiline':False]['text':' cleanup','line_number':332,'multiline':False]['text':'# kubectl apply multiple resources with one failure during builder phase.','line_number':335,'multiline':False]['text':' Pre-Condition: No pods exist.','line_number':336,'multiline':False]['text':' Applies three pods, one of which is invalid (POD-B), two succeed (pod-a, pod-c).','line_number':338,'multiline':False]['text':' cleanup','line_number':343,'multiline':False]['text':'# kubectl apply multiple resources with one failure during apply phase.','line_number':347,'multiline':False]['text':' Pre-Condition: crd does not exist, and custom resource does not exist.','line_number':348,'multiline':False]['text':' First pass, custom resource fails, but crd apply succeeds.','line_number':350,'multiline':False]['text':' Second pass, custom resource is created (now that crd exists).','line_number':357,'multiline':False]['text':' cleanup','line_number':360,'multiline':False]['text':' Runs tests related to kubectl apply (server-side)','line_number':367,'multiline':False]['text':'# kubectl apply should create the resource that doesn't exist yet','line_number':374,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':375,'multiline':False]['text':' Command: apply a pod "test-pod" (doesn't exist) should create this pod','line_number':377,'multiline':False]['text':' Post-Condition: pod "test-pod" is created','line_number':379,'multiline':False]['text':' pod has field manager for kubectl server-side apply','line_number':381,'multiline':False]['text':' pod has custom field manager','line_number':384,'multiline':False]['text':' Clean up','line_number':388,'multiline':False]['text':'# kubectl apply --dry-run=server','line_number':391,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':392,'multiline':False]['text':' apply dry-run','line_number':395,'multiline':False]['text':' No pod exists','line_number':397,'multiline':False]['text':' apply non dry-run creates the pod','line_number':399,'multiline':False]['text':' apply changes','line_number':402,'multiline':False]['text':' Post-Condition: label still has initial value','line_number':404,'multiline':False]['text':' Ensure dry-run doesn't persist change','line_number':406,'multiline':False]['text':' clean-up','line_number':410,'multiline':False]['text':'# kubectl apply upgrade','line_number':413,'multiline':False]['text':' Pre-Condition: no POD exists','line_number':414,'multiline':False]['text':' run client-side apply','line_number':418,'multiline':False]['text':' test upgrade does not work with non-standard server-side apply field manager','line_number':420,'multiline':False]['text':' test upgrade from client-side apply to server-side apply','line_number':422,'multiline':False]['text':' Post-Condition: pod "test-pod" has configuration annotation','line_number':424,'multiline':False]['text':' test downgrade from server-side apply to client-side apply','line_number':430,'multiline':False]['text':' Post-Condition: pod "test-pod" has configuration annotation','line_number':432,'multiline':False]['text':' clean-up','line_number':438,'multiline':False]['text':' Test apply migration','line_number':441,'multiline':False]['text':' Create a configmap in the cluster with client-side apply:','line_number':443,'multiline':False]['text':' Apply the same manifest with --server-side flag, as per server-side-apply migration instructions:','line_number':457,'multiline':False]['text':' Apply the object a third time using server-side-apply, but this time removing','line_number':471,'multiline':False]['text':' a field and adding a field. Old versions of kubectl would not allow the field ','line_number':472,'multiline':False]['text':' to be removed','line_number':473,'multiline':False]['text':' Fetch the object and check to see that it does not have a field 'legacy'','line_number':487,'multiline':False]['text':' CSA the object after it has been server-side-applied and had a field removed','line_number':492,'multiline':False]['text':' Add new key with client-side-apply. Also removes the field from server-side-apply','line_number':493,'multiline':False]['text':' SSA the object without the field added above by CSA. Show that the object','line_number':509,'multiline':False]['text':' on the server has had the field removed','line_number':510,'multiline':False]['text':' Fetch the object and check to see that it does not have a field 'newKey'','line_number':522,'multiline':False]['text':' Show that kubectl diff --server-side also functions after a migration','line_number':527,'multiline':False]['text':' clean-up','line_number':543,'multiline':False]['text':'# Test to show that supplying a custom field manager to kubectl apply','line_number':546,'multiline':False]['text':' does not prevent migration from client-side-apply to server-side-apply','line_number':547,'multiline':False]['text':' show that after client-side applying with a custom field manager, the','line_number':561,'multiline':False]['text':' last-applied-annotation is present','line_number':562,'multiline':False]['text':' Migrate to server-side-apply by applying the same object','line_number':565,'multiline':False]['text':' show that after migrating to SSA with a custom field manager, the ','line_number':579,'multiline':False]['text':' last-applied-annotation is dropped','line_number':580,'multiline':False]['text':' Change a field without having any conflict and also drop a field in the same patch','line_number':583,'multiline':False]['text':' Clean up','line_number':597,'multiline':False]['text':'# kubectl apply dry-run on CR','line_number':600,'multiline':False]['text':' Create CRD','line_number':601,'multiline':False]['text':' Ensure the API server has recognized and started serving the associated CR API','line_number':635,'multiline':False]['text':' Dry-run create the CR','line_number':647,'multiline':False]['text':' Make sure that the CR doesn't exist','line_number':649,'multiline':False]['text':' clean-up','line_number':652,'multiline':False]