['text':'
 * wepoll - epoll for Windows
 * https://github.com/piscisaureus/wepoll
 *
 * Copyright 2012-2020, Bert Belder <bertbelder@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]['text':' Never reported. ','line_number':48,'multiline':True]['text':' Windows specific ','line_number':78,'multiline':True]['text':' Windows specific ','line_number':79,'multiline':True]['text':' Epoll events and flags ','line_number':83,'multiline':True]['text':' User data variable ','line_number':84,'multiline':True]['text':' extern "C" ','line_number':107,'multiline':True]['text':' By opening \Device\Afd without specifying any extended attributes, we'll
   * get a handle that lets us talk to the AFD driver, but that doesn't have an
   * associated endpoint (so it's not a socket). ','line_number':334,'multiline':True]['text':' Blocking operation is not supported. ','line_number':371,'multiline':True]['text':' If the poll operation has already completed or has been cancelled earlier,
   * there's nothing left for us to do. ','line_number':399,'multiline':True]['text':' NtCancelIoFileEx() may return STATUS_NOT_FOUND if the operation completed
   * just before calling NtCancelIoFileEx(). This is not an error. ','line_number':407,'multiline':True]['text':' The reflock is a special kind of lock that normally prevents a chunk of
 * memory from being freed, but does allow the chunk of memory to eventually be
 * released in a coordinated fashion.
 *
 * Under normal operation, threads increase and decrease the reference count,
 * which are wait-free operations.
 *
 * Exactly once during the reflock's lifecycle, a thread holding a reference to
 * the lock may "destroy" the lock; this operation blocks until all other
 * threads holding a reference to the lock have dereferenced it. After
 * "destroy" returns, the calling thread may assume that no other threads have
 * a reference to the lock.
 *
 * Attemmpting to lock or destroy a lock after reflock_unref_and_destroy() has
 * been called is invalid and results in undefined behavior. Therefore the user
 * should use another lock to guarantee that this can't happen.
 ','line_number':464,'multiline':True]['text':' 32-bit Interlocked APIs operate on `long` values. ','line_number':483,'multiline':True]['text':' N.b.: the tree functions do not set errno or LastError when they fail. Each
 * of the API functions has at most one failure mode. It is up to the caller to
 * set an appropriate error code when necessary. ','line_number':495,'multiline':True]['text':' This should never happen. ','line_number':569,'multiline':True]['text':' On Linux, in the case of epoll_ctl(), EBADF takes priority over other
   * errors. Wepoll mimics this behavior. ','line_number':641,'multiline':True]['text':' GetHandleInformation() succeeds when passed INVALID_HANDLE_VALUE, so check
   * for this condition explicitly. ','line_number':811,'multiline':True]['text':' Polyfill `inline` for older versions of msvc (up to Visual Studio 2013) ','line_number':831,'multiline':True]['text':' N.b. that initialization order matters here. ','line_number':849,'multiline':True]['text':' `InitOnceExecuteOnce()` itself is infallible, and it doesn't set any
     * error code when the once-callback returns FALSE. We return -1 here to
     * indicate that global initialization failed; the failing init function is
     * resposible for setting `errno` and calling `SetLastError()`. ','line_number':861,'multiline':True]['text':' Set up a workaround for the following problem:
 *   FARPROC addr = GetProcAddress(...);
 *   MY_FUNC func = (MY_FUNC) addr;          <-- GCC 8 warning/error.
 *   MY_FUNC func = (MY_FUNC) (void*) addr;  <-- MSVC  warning/error.
 * To compile cleanly with either compiler, do casts with this "bridge" type:
 *   MY_FUNC func = (MY_FUNC) (nt__fn_ptr_cast_t) addr; ','line_number':870,'multiline':True]['text':' Poll groups are currently only freed when the epoll port is closed. ','line_number':1023,'multiline':True]['text':' At this point the IOCP port should have been closed. ','line_number':1141,'multiline':True]['text':' Walk the queue, submitting new poll requests for every socket that needs
   * it. ','line_number':1171,'multiline':True]['text':' sock_update() removes the socket from the update queue. ','line_number':1180,'multiline':True]['text':' Check whether `maxevents` is in range. ','line_number':1251,'multiline':True]['text':' Decide whether the IOCP completion list can live on the stack, or allocate
   * memory for it on the heap. ','line_number':1255,'multiline':True]['text':' Compute the timeout for GetQueuedCompletionStatus, and the wait end
   * time, if the user specified a timeout other than zero or infinite. ','line_number':1265,'multiline':True]['text':' Dequeue completion packets until either at least one interesting event
   * has been discovered, or the timeout is reached. ','line_number':1278,'multiline':True]['text':' Result, error, or time-out. ','line_number':1286,'multiline':True]['text':' When timeout is negative, never time out. ','line_number':1289,'multiline':True]['text':' Update time. ','line_number':1291,'multiline':True]['text':' Do not allow the due time to be in the past. ','line_number':1294,'multiline':True]['text':' Recompute time-out argument for GetQueuedCompletionStatus. ','line_number':1300,'multiline':True]['text':' Verify that the counter didn't overflow and the lock isn't destroyed. ','line_number':1557,'multiline':True]['text':' Verify that the lock was referenced and not already destroyed. ','line_number':1565,'multiline':True]['text':' Verify that the lock was referenced and not already destroyed. ','line_number':1577,'multiline':True]['text':' If the poll request still needs to complete, the sock_state object can't
   * be free()d yet. `sock_feed_event()` or `port_close()` will take care
   * of this later. ','line_number':1689,'multiline':True]['text':' Free the sock_state now. ','line_number':1693,'multiline':True]['text':' Free the socket later. ','line_number':1698,'multiline':True]['text':' EPOLLERR and EPOLLHUP are always reported, even when not requested by the
   * caller. However they are disabled after a event has been reported for a
   * socket for which the EPOLLONESHOT flag was set. ','line_number':1716,'multiline':True]['text':' Always monitor for AFD_POLL_LOCAL_CLOSE, which is triggered when the
   * socket is closed with closesocket() or CloseHandle(). ','line_number':1731,'multiline':True]['text':' Linux reports all these events after connect() has failed. ','line_number':1765,'multiline':True]['text':' All the events the user is interested in are already being monitored by
     * the pending poll operation. It might spuriously complete because of an
     * event that we're no longer interested in; when that happens we'll submit
     * a new poll operation with the updated event mask. ','line_number':1778,'multiline':True]['text':' A poll operation is already pending, but it's not monitoring for all the
     * events that the user is interested in. Therefore, cancel the pending
     * poll operation; when we receive it's completion package, a new poll
     * operation will be submitted with the correct event mask. ','line_number':1784,'multiline':True]['text':' The poll operation has already been cancelled, we're still waiting for
     * it to return. For now, there's nothing that needs to be done. ','line_number':1792,'multiline':True]['text':' No poll operation is pending; start one. ','line_number':1796,'multiline':True]['text':' Overlapped poll operation in progress; this is expected. ','line_number':1810,'multiline':True]['text':' Socket closed; it'll be dropped from the epoll set. ','line_number':1813,'multiline':True]['text':' Other errors are propagated to the caller. ','line_number':1816,'multiline':True]['text':' The poll request was successfully submitted. ','line_number':1821,'multiline':True]['text':' Unreachable. ','line_number':1826,'multiline':True]['text':' Socket has been deleted earlier and can now be freed. ','line_number':1846,'multiline':True]['text':' The poll request was cancelled by CancelIoEx. ','line_number':1850,'multiline':True]['text':' The overlapped request itself failed in an unexpected way. ','line_number':1853,'multiline':True]['text':' This poll operation succeeded but didn't report any socket events. ','line_number':1857,'multiline':True]['text':' The poll operation reported that the socket was closed. ','line_number':1860,'multiline':True]['text':' Events related to our socket were reported. ','line_number':1864,'multiline':True]['text':' Requeue the socket so a new poll request will be submitted. ','line_number':1869,'multiline':True]['text':' Filter out events that the user didn't ask for. ','line_number':1872,'multiline':True]['text':' Return if there are no epoll events to report. ','line_number':1875,'multiline':True]['text':' If the the socket has the EPOLLONESHOT flag set, unmonitor all events,
   * even EPOLLERR and EPOLLHUP. But always keep looking for closed sockets. ','line_number':1879,'multiline':True]['text':' Even though Microsoft documentation clearly states that LSPs should
     * never intercept the `SIO_BASE_HANDLE` ioctl [1], Komodia based LSPs do
     * so anyway, breaking it, with the apparent intention of preventing LSP
     * bypass [2]. Fortunately they don't handle `SIO_BSP_HANDLE_POLL`, which
     * will at least let us obtain the socket associated with the next winsock
     * protocol chain entry. If this succeeds, loop around and call
     * `SIO_BASE_HANDLE` again with the returned BSP socket, to make sure that
     * we unwrap all layers and retrieve the actual base socket.
     *  [1] https://docs.microsoft.com/en-us/windows/win32/winsock/winsock-ioctls
     *  [2] https://www.komodia.com/newwiki/index.php?title=Komodia%27s_Redirector_bug_fixes#Version_2.2.2.6
     ','line_number':2236,'multiline':True]