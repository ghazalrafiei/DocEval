['text':' ==========================================
    Unity Project - A Test Framework for C
    Copyright (c) 2007-14 Mike Karlesky, Mark VanderVoord, Greg Williams
    [Released under MIT License. Please refer to license.txt for details]
========================================== ','line_number':1,'multiline':True]['text':' Unity Attempts to Auto-Detect Integer Types
 * Attempt 1: UINT_MAX, ULONG_MAX in <limits.h>, or default to 32 bits
 * Attempt 2: UINTPTR_MAX in <stdint.h>, or default to same size as long
 * The user may override any of these derived constants:
 * UNITY_INT_WIDTH, UNITY_LONG_WIDTH, UNITY_POINTER_WIDTH ','line_number':22,'multiline':True]['text':'-------------------------------------------------------
 * Guess Widths If Not Specified
 *-------------------------------------------------------','line_number':35,'multiline':True]['text':' Determine the size of an int, if not already specified.
 * We cannot use sizeof(int), because it is not yet defined
 * at this stage in the translation of the C program.
 * Therefore, infer it from UINT_MAX if possible. ','line_number':39,'multiline':True]['text':' Set to default ','line_number':52,'multiline':True]['text':' UINT_MAX ','line_number':54,'multiline':True]['text':' Determine the size of a long, if not already specified. ','line_number':57,'multiline':True]['text':' Set to default ','line_number':67,'multiline':True]['text':' ULONG_MAX ','line_number':69,'multiline':True]['text':' Determine the size of a pointer, if not already specified. ','line_number':72,'multiline':True]['text':' Set to default ','line_number':82,'multiline':True]['text':' UINTPTR_MAX ','line_number':84,'multiline':True]['text':'-------------------------------------------------------
 * Int Support (Define types based on detected sizes)
 *-------------------------------------------------------','line_number':87,'multiline':True]['text':'-------------------------------------------------------
 * 64-bit Support
 *-------------------------------------------------------','line_number':109,'multiline':True]['text':' No 64-bit Support ','line_number':120,'multiline':True]['text':' 64-bit Support ','line_number':125,'multiline':True]['text':'-------------------------------------------------------
 * Pointer Support
 *-------------------------------------------------------','line_number':140,'multiline':True]['text':'-------------------------------------------------------
 * Float Support
 *-------------------------------------------------------','line_number':165,'multiline':True]['text':' No Floating Point Support ','line_number':171,'multiline':True]['text':' Remove double when excluding float support ','line_number':173,'multiline':True]['text':' Floating Point Support ','line_number':181,'multiline':True]['text':' isinf & isnan macros should be provided by math.h ','line_number':190,'multiline':True]['text':' The value of Inf - Inf is NaN ','line_number':192,'multiline':True]['text':' NaN is the only floating point value that does NOT equal itself.
 * Therefore if n != n, then it is NaN. ','line_number':197,'multiline':True]['text':'-------------------------------------------------------
 * Double Float Support
 *-------------------------------------------------------','line_number':204,'multiline':True]['text':' unlike float, we DON'T include by default ','line_number':208,'multiline':True]['text':' No Floating Point Support ','line_number':211,'multiline':True]['text':' For parameter in UnityPrintFloat(UNITY_DOUBLE), which aliases to double or float ','line_number':223,'multiline':True]['text':' Double Floating Point Support ','line_number':228,'multiline':True]['text':'-------------------------------------------------------
 * Output Method: stdout (DEFAULT)
 *-------------------------------------------------------','line_number':240,'multiline':True]['text':' Default to using putchar, which is defined in stdio.h ','line_number':244,'multiline':True]['text':' If defined as something else, make sure we declare it here so it's ready for use ','line_number':248,'multiline':True]['text':' We want to use the stdout flush utility ','line_number':256,'multiline':True]['text':' We've specified nothing, therefore flush should just be ignored ','line_number':260,'multiline':True]['text':' We've defined flush as something else, so make sure we declare it here so it's ready for use ','line_number':264,'multiline':True]['text':'-------------------------------------------------------
 * Footprint
 *-------------------------------------------------------','line_number':288,'multiline':True]['text':'-------------------------------------------------------
 * Language Features Available
 *-------------------------------------------------------','line_number':300,'multiline':True]['text':' __GNUC__ includes clang ','line_number':304,'multiline':True]['text':'-------------------------------------------------------
 * Internal Structs Needed
 *-------------------------------------------------------','line_number':317,'multiline':True]['text':'-------------------------------------------------------
 * Test Suite Management
 *-------------------------------------------------------','line_number':406,'multiline':True]['text':'-------------------------------------------------------
 * Details Support
 *-------------------------------------------------------','line_number':415,'multiline':True]['text':'-------------------------------------------------------
 * Test Output
 *-------------------------------------------------------','line_number':437,'multiline':True]['text':'-------------------------------------------------------
 * Test Assertion Functions
 *-------------------------------------------------------
 *  Use the macros below this section instead of calling
 *  these directly. The macros have a consistent naming
 *  convention and will pull in file and line information
 *  for you. ','line_number':453,'multiline':True]['text':'-------------------------------------------------------
 * Helpers
 *-------------------------------------------------------','line_number':565,'multiline':True]['text':'-------------------------------------------------------
 * Error Strings We Might Need
 *-------------------------------------------------------','line_number':577,'multiline':True]['text':'-------------------------------------------------------
 * Test Running Macros
 *-------------------------------------------------------','line_number':585,'multiline':True]['text':' This tricky series of macros gives us an optional line argument to treat it as RUN_TEST(func, num=__LINE__) ','line_number':597,'multiline':True]['text':' If we can't do the tricky version, we'll just have to require them to always include the line number ','line_number':610,'multiline':True]['text':'-----------------------------------------------
 * Command Line Argument Support
 *-----------------------------------------------','line_number':634,'multiline':True]['text':'-------------------------------------------------------
 * Basic Fail and Ignore
 *-------------------------------------------------------','line_number':643,'multiline':True]['text':'-------------------------------------------------------
 * Test Asserts
 *-------------------------------------------------------','line_number':650,'multiline':True]['text':' End of UNITY_INTERNALS_H ','line_number':871,'multiline':True]