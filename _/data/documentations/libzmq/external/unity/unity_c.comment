['text':' =========================================================================
    Unity Project - A Test Framework for C
    Copyright (c) 2007-14 Mike Karlesky, Mark VanderVoord, Greg Williams
    [Released under MIT License. Please refer to license.txt for details]
============================================================================ ','line_number':1,'multiline':True]['text':' If omitted from header, declare overrideable prototypes here so they're ready for use ','line_number':11,'multiline':True]['text':' Helpful macros for us to use here in Assert functions ','line_number':16,'multiline':True]['text':'-----------------------------------------------
 * Pretty Printers & Test Result Output Handlers
 *-----------------------------------------------','line_number':66,'multiline':True]['text':' printable characters plus CR & LF are printed ','line_number':78,'multiline':True]['text':' write escaped carriage returns ','line_number':83,'multiline':True]['text':' write escaped line feeds ','line_number':89,'multiline':True]['text':' print ANSI escape code ','line_number':96,'multiline':True]['text':' unprintable characters are shown as codes ','line_number':107,'multiline':True]['text':' printable characters plus CR & LF are printed ','line_number':127,'multiline':True]['text':' write escaped carriage returns ','line_number':132,'multiline':True]['text':' write escaped line feeds ','line_number':138,'multiline':True]['text':' unprintable characters are shown as codes ','line_number':144,'multiline':True]['text':'-----------------------------------------------','line_number':156,'multiline':True]['text':'-----------------------------------------------','line_number':175,'multiline':True]['text':' A negative number, including MIN negative ','line_number':182,'multiline':True]['text':'-----------------------------------------------
 * basically do an itoa using as little ram as possible ','line_number':189,'multiline':True]['text':' figure out initial divisor ','line_number':195,'multiline':True]['text':' now mod and print, then divide divisor ','line_number':201,'multiline':True]['text':'-----------------------------------------------','line_number':209,'multiline':True]['text':'-----------------------------------------------','line_number':232,'multiline':True]['text':'-----------------------------------------------','line_number':259,'multiline':True]['text':' This function prints a floating-point value in a format similar to
 * printf("%.6g").  It can work with either single- or double-precision,
 * but for simplicity, it prints only 6 significant digits in either case.
 * Printing more than 6 digits accurately is hard (at least in the single-
 * precision case) and isn't attempted here. ','line_number':261,'multiline':True]['text':' print minus sign (including for negative zero) ','line_number':270,'multiline':True]['text':' handle zero, NaN, and +/- infinity ','line_number':277,'multiline':True]['text':' scale up or down by powers of 10 ','line_number':288,'multiline':True]['text':' round to nearest integer ','line_number':294,'multiline':True]['text':' determine where to place decimal point ','line_number':302,'multiline':True]['text':' truncate trailing zeroes after decimal point ','line_number':306,'multiline':True]['text':' build up buffer in reverse order ','line_number':313,'multiline':True]['text':' print exponent if needed ','line_number':326,'multiline':True]['text':' ! UNITY_EXCLUDE_FLOAT_PRINT ','line_number':354,'multiline':True]['text':'-----------------------------------------------','line_number':356,'multiline':True]['text':'-----------------------------------------------','line_number':367,'multiline':True]['text':'-----------------------------------------------','line_number':375,'multiline':True]['text':'-----------------------------------------------','line_number':398,'multiline':True]['text':'-----------------------------------------------','line_number':421,'multiline':True]['text':'-----------------------------------------------','line_number':448,'multiline':True]['text':'-----------------------------------------------
 * Assertion & Control Helpers
 *-----------------------------------------------','line_number':477,'multiline':True]['text':' Both are NULL or same pointer ','line_number':486,'multiline':True]['text':' print and return true if just expected is NULL ','line_number':488,'multiline':True]['text':' print and return true if just actual is NULL ','line_number':497,'multiline':True]['text':' return false if neither is NULL ','line_number':506,'multiline':True]['text':'-----------------------------------------------
 * Assertion Functions
 *-----------------------------------------------','line_number':509,'multiline':True]['text':'-----------------------------------------------','line_number':533,'multiline':True]['text':'-----------------------------------------------','line_number':554,'multiline':True]['text':' UINT or HEX ','line_number':573,'multiline':True]['text':'-----------------------------------------------','line_number':600,'multiline':True]['text':' Both are NULL or same pointer ','line_number':619,'multiline':True]['text':' length 4 bytes ','line_number':643,'multiline':True]['text':' For UINT, remove sign extension (padding 1's) from signed type casts above ','line_number':653,'multiline':True]['text':'-----------------------------------------------','line_number':677,'multiline':True]['text':' Wrap this define in a function with variable types as float or double ','line_number':679,'multiline':True]['text':' This first part of this condition will catch any NaN or Infinite values ','line_number':687,'multiline':True]['text':' UNITY_EXCLUDE_FLOAT_PRINT ','line_number':704,'multiline':True]['text':' Both are NULL or same pointer ','line_number':730,'multiline':True]['text':'-----------------------------------------------','line_number':753,'multiline':True]['text':'-----------------------------------------------','line_number':772,'multiline':True]['text':' A determinate number is non infinite and not NaN. ','line_number':801,'multiline':True]['text':' not UNITY_EXCLUDE_FLOAT ','line_number':832,'multiline':True]['text':'-----------------------------------------------','line_number':834,'multiline':True]['text':' Both are NULL or same pointer ','line_number':860,'multiline':True]['text':'-----------------------------------------------','line_number':883,'multiline':True]['text':'-----------------------------------------------','line_number':901,'multiline':True]['text':' A determinate number is non infinite and not NaN. ','line_number':931,'multiline':True]['text':' not UNITY_EXCLUDE_DOUBLE ','line_number':962,'multiline':True]['text':'-----------------------------------------------','line_number':964,'multiline':True]['text':'-----------------------------------------------','line_number':1003,'multiline':True]['text':' if both pointers not null compare the strings ','line_number':1013,'multiline':True]['text':' handle case of one pointers being null (if both null, test should pass) ','line_number':1026,'multiline':True]['text':'-----------------------------------------------','line_number':1042,'multiline':True]['text':' if both pointers not null compare the strings ','line_number':1053,'multiline':True]['text':' handle case of one pointers being null (if both null, test should pass) ','line_number':1066,'multiline':True]['text':'-----------------------------------------------','line_number':1082,'multiline':True]['text':' if no elements, it's an error ','line_number':1097,'multiline':True]['text':' Both are NULL or same pointer ','line_number':1105,'multiline':True]['text':' if both pointers not null compare the strings ','line_number':1126,'multiline':True]['text':' handle case of one pointers being null (if both null, test should pass) ','line_number':1139,'multiline':True]['text':'-----------------------------------------------','line_number':1161,'multiline':True]['text':' Both are NULL or same pointer ','line_number':1182,'multiline':True]['text':'-----------------------------------------------','line_number':1219,'multiline':True]['text':' 4 bytes ','line_number':1254,'multiline':True]['text':'-----------------------------------------------
 * Control Functions
 *-----------------------------------------------','line_number':1276,'multiline':True]['text':'-----------------------------------------------','line_number':1313,'multiline':True]['text':'-----------------------------------------------','line_number':1329,'multiline':True]['text':'-----------------------------------------------','line_number':1348,'multiline':True]['text':'-----------------------------------------------','line_number':1364,'multiline':True]['text':'-----------------------------------------------
 * Command Line Argument Support
 *-----------------------------------------------','line_number':1394,'multiline':True]['text':' list tests ','line_number':1414,'multiline':True]['text':' include tests with name including this string ','line_number':1416,'multiline':True]['text':' an alias for -n ','line_number':1417,'multiline':True]['text':' quiet ','line_number':1429,'multiline':True]['text':' verbose ','line_number':1432,'multiline':True]['text':' exclude tests with name including this string ','line_number':1435,'multiline':True]['text':' If they current bytes match, go on to the next bytes ','line_number':1472,'multiline':True]['text':' We're done if we match the entire string or up to a wildcard ','line_number':1478,'multiline':True]['text':' Otherwise we start in the long pointer 1 character further and try again ','line_number':1493,'multiline':True]['text':' Go through the options and get the substrings for matching one at a time ','line_number':1507,'multiline':True]['text':' look for the start of the next partial ','line_number':1514,'multiline':True]['text':' done if complete filename match ','line_number':1526,'multiline':True]['text':' done if testname match after filename partial match ','line_number':1531,'multiline':True]['text':' done if complete testname match ','line_number':1538,'multiline':True]['text':' we couldn't find a match for any substrings ','line_number':1545,'multiline':True]['text':' Check if this test name matches the included test pattern ','line_number':1551,'multiline':True]['text':' Check if this test name matches the excluded test pattern ','line_number':1560,'multiline':True]['text':' UNITY_USE_COMMAND_LINE_ARGS ','line_number':1569,'multiline':True]['text':'-----------------------------------------------','line_number':1570,'multiline':True]