['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':'
   Asynchronous proxy benchmark using ZMQ_XPUB_NODROP.

   Topology:

     XPUB                      SUB
      |                         |
      +-----> XSUB -> XPUB -----/
      |       ^^^^^^^^^^^^
     XPUB      ZMQ proxy

   All connections use "inproc" transport. The two XPUB sockets start
   flooding the proxy. The throughput is computed using the bytes received
   in the SUB socket.
','line_number':24,'multiline':True]['text':' This macro is used to avoid-variable warning. If used with an expression,','line_number':50,'multiline':False]['text':' the sizeof is not evaluated to avoid polluting the assembly code.','line_number':51,'multiline':False]['text':'  to ensure defined behavior with VC++ <= 2013','line_number':83,'multiline':False]['text':'  Wait before starting TX operations till 1 subscriber has subscribed','line_number':126,'multiline':False]['text':'  (in this test there's 1 subscriber only)','line_number':127,'multiline':False]['text':'  Send the message to the socket','line_number':153,'multiline':False]['text':'printf ("publisher thread ended\n");','line_number':163,'multiline':False]['text':'  Receive message_count messages','line_number':181,'multiline':False]['text':'  Cleanup','line_number':199,'multiline':False]['text':'printf ("subscriber thread ended\n");','line_number':202,'multiline':False]['text':'  FRONTEND SUB','line_number':210,'multiline':False]['text':' the frontend is the one exposed to internal threads (INPROC)','line_number':214,'multiline':False]['text':'  Bind FRONTEND','line_number':219,'multiline':False]['text':'  BACKEND PUB','line_number':229,'multiline':False]['text':'  the backend is the one exposed to the external world (TCP)','line_number':233,'multiline':False]['text':'  Bind BACKEND','line_number':243,'multiline':False]['text':'  CONTROL REP','line_number':253,'multiline':False]['text':'  This one is used by the proxy to receive&reply to commands','line_number':257,'multiline':False]['text':'  Bind CONTROL','line_number':260,'multiline':False]['text':'  Start proxying!','line_number':264,'multiline':False]['text':'printf ("proxy thread ended\n");','line_number':271,'multiline':False]['text':'  CONTROL REQ','line_number':276,'multiline':False]['text':'  This one can be used to send command to the proxy','line_number':280,'multiline':False]['text':'  Connect CONTROL-REQ: a socket to which send commands','line_number':283,'multiline':False]['text':'  Ask the proxy to exit: the subscriber has received all messages','line_number':287,'multiline':False]['text':'  The main thread simply starts some publishers, a proxy,','line_number':295,'multiline':False]['text':'  and a subscriber. Finish when all packets are received.','line_number':296,'multiline':False]['text':'  START ALL SECONDARY THREADS','line_number':316,'multiline':False]['text':'  Proxy','line_number':329,'multiline':False]['text':'  Subscriber 1','line_number':334,'multiline':False]['text':'  Start measuring','line_number':341,'multiline':False]['text':'  Publisher 1','line_number':344,'multiline':False]['text':'  Publisher 2','line_number':351,'multiline':False]['text':'  Wait for all packets to be received','line_number':358,'multiline':False]['text':'  Stop measuring','line_number':361,'multiline':False]['text':'  Wait for the end of publishers...','line_number':373,'multiline':False]['text':'  ... then close the proxy','line_number':377,'multiline':False]