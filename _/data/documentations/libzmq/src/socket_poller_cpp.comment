['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':' do not use getsockopt here, since that would fail during context termination','line_number':13,'multiline':False]['text':' compare elements to value','line_number':17,'multiline':False]['text':'  Mark the socket_poller as dead','line_number':45,'multiline':False]['text':' TODO shouldn't this zmq_assert (it->socket->check_tag ()) instead?','line_number':50,'multiline':False]['text':' Only thread-safe socket types are guaranteed to have a signaler.','line_number':80,'multiline':False]['text':'  Ensure we do not attempt to select () on more than FD_SETSIZE','line_number':307,'multiline':False]['text':'  file descriptors.','line_number':308,'multiline':False]['text':'  Build the fd_sets for passing to select ().','line_number':331,'multiline':False]['text':'  If the poll item is a 0MQ socket we are interested in input on the','line_number':335,'multiline':False]['text':'  notification file descriptor retrieved by the ZMQ_FD socket option.','line_number':336,'multiline':False]['text':'  Else, the poll item is a raw file descriptor. Convert the poll item','line_number':352,'multiline':False]['text':'  events to the appropriate fd_sets.','line_number':353,'multiline':False]['text':'  The poll item is a 0MQ socket. Retrieve pending events','line_number':399,'multiline':False]['text':'  using the ZMQ_EVENTS socket option.','line_number':400,'multiline':False]['text':'  Else, the poll item is a raw file descriptor, simply convert','line_number':417,'multiline':False]['text':'  the events to zmq_pollitem_t-style format.','line_number':418,'multiline':False]['text':'POLL_SELECT','line_number':444,'multiline':False]['text':'Return 0 if timeout is expired otherwise 1','line_number':459,'multiline':False]['text':'  If socket_poller_t::timeout is zero, exit immediately whether there','line_number':466,'multiline':False]['text':'  are events or not.','line_number':467,'multiline':False]['text':'  At this point we are meant to wait for events but there are none.','line_number':471,'multiline':False]['text':'  If timeout is infinite we can just loop until we get some events.','line_number':472,'multiline':False]['text':'  The timeout is finite and there are no events. In the first pass','line_number':479,'multiline':False]['text':'  we get a timestamp of when the polling have begun. (We assume that','line_number':480,'multiline':False]['text':'  first pass have taken negligible time). We also compute the time','line_number':481,'multiline':False]['text':'  when the polling should time out.','line_number':482,'multiline':False]['text':'  Find out whether timeout have expired.','line_number':490,'multiline':False]['text':' Fail instead of trying to sleep forever','line_number':514,'multiline':False]['text':' We'll report an error (timed out) as if the list was non-empty and','line_number':518,'multiline':False]['text':' no event occurred within the specified timeout. Otherwise the caller','line_number':519,'multiline':False]['text':' needs to check the return value AND the event to avoid using the','line_number':520,'multiline':False]['text':' nullified event data.','line_number':521,'multiline':False]['text':'  Compute the timeout for the subsequent poll.','line_number':555,'multiline':False]['text':'  Wait for events.','line_number':565,'multiline':False]['text':'  Receive the signal from pollfd','line_number':572,'multiline':False]['text':'  Check for the events.','line_number':576,'multiline':False]['text':'  Adjust timeout or break','line_number':584,'multiline':False]['text':'  Compute the timeout for the subsequent poll.','line_number':604,'multiline':False]['text':'  Wait for events. Ignore interrupts if there's infinite timeout.','line_number':619,'multiline':False]['text':'  Check for the events.','line_number':644,'multiline':False]['text':'  Adjust timeout or break','line_number':653,'multiline':False]['text':'  Exotic platforms that support neither poll() nor select().','line_number':663,'multiline':False]