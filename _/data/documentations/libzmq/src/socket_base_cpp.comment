['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':'  Only ROUTER sockets support this','line_number':260,'multiline':False]['text':'  Called by ctx when it is terminated (zmq_ctx_term).','line_number':286,'multiline':False]['text':'  'stop' command is sent from the threads that called zmq_ctx_term to','line_number':287,'multiline':False]['text':'  the thread owning the socket. This way, blocking call in the','line_number':288,'multiline':False]['text':'  owner thread can be interrupted.','line_number':289,'multiline':False]['text':' TODO consider renaming protocol_ to scheme_ in conformance with RFC 3986','line_number':293,'multiline':False]['text':' terminology, but this requires extensive changes to be consistent','line_number':294,'multiline':False]['text':'  First check out whether the protocol is something we are aware of.','line_number':319,'multiline':False]['text':'  pgm/epgm transports only available if 0MQ is compiled with OpenPGM.','line_number':332,'multiline':False]['text':' TIPC transport is only available on Linux.','line_number':337,'multiline':False]['text':'  Check whether socket type and transport protocol match.','line_number':351,'multiline':False]['text':'  Specifically, multicast protocols can't be combined with','line_number':352,'multiline':False]['text':'  bi-directional messaging patterns (socket types).','line_number':353,'multiline':False]['text':' defined ZMQ_HAVE_NORM','line_number':360,'multiline':False]['text':'  Protocol is available.','line_number':377,'multiline':False]['text':'  First, register the pipe so that we can terminate it later on.','line_number':385,'multiline':False]['text':'  Let the derived socket type know about new pipe.','line_number':389,'multiline':False]['text':'  If the socket is already being closed, ask any new pipes to terminate','line_number':392,'multiline':False]['text':'  straight away.','line_number':393,'multiline':False]['text':'  First, check whether specific socket type overloads the option.','line_number':411,'multiline':False]['text':'  If the socket type doesn't support the option, pass it to','line_number':417,'multiline':False]['text':'  the generic option parser.','line_number':418,'multiline':False]['text':'  First, check whether specific socket type overloads the option.','line_number':436,'multiline':False]['text':' thread safe socket doesn't provide file descriptor','line_number':448,'multiline':False]['text':'  Process pending commands, if any.','line_number':520,'multiline':False]['text':'  Parse endpoint_uri_ string.','line_number':526,'multiline':False]['text':' defined ZMQ_HAVE_NORM','line_number':551,'multiline':False]['text':'  For convenience's sake, bind can be used interchangeable with','line_number':554,'multiline':False]['text':'  connect for PGM, EPGM, NORM transports.','line_number':555,'multiline':False]['text':'  Choose the I/O thread to run the session in.','line_number':569,'multiline':False]['text':'  Create a bi-directional pipe.','line_number':593,'multiline':False]['text':'  Attach local end of the pipe to the socket object.','line_number':602,'multiline':False]['text':'  Attach remote end of the pipe to the session object later on.','line_number':606,'multiline':False]['text':'  Save last endpoint URI','line_number':609,'multiline':False]['text':'  TODO shouldn't this use _last_endpoint instead of endpoint_uri_? as in the other cases','line_number':612,'multiline':False]['text':'  Remaining transports require to be run in an I/O thread, so at this','line_number':620,'multiline':False]['text':'  point we'll choose one.','line_number':621,'multiline':False]['text':' Save last endpoint URI','line_number':640,'multiline':False]['text':' Save last endpoint URI','line_number':668,'multiline':False]['text':' Save last endpoint URI','line_number':691,'multiline':False]['text':' Save last endpoint URI','line_number':713,'multiline':False]['text':' TODO shouldn't this use _last_endpoint as in the other cases?','line_number':716,'multiline':False]['text':'  Process pending commands, if any.','line_number':762,'multiline':False]['text':'  Parse endpoint_uri_ string.','line_number':768,'multiline':False]['text':'  TODO: inproc connect is specific with respect to creating pipes','line_number':777,'multiline':False]['text':'  as there's no 'reconnect' functionality implemented. Once that','line_number':778,'multiline':False]['text':'  is in place we should follow generic pipe creation algorithm.','line_number':779,'multiline':False]['text':'  Find the peer endpoint.','line_number':781,'multiline':False]['text':' The total HWM for an inproc connection should be the sum of','line_number':784,'multiline':False]['text':' the binder's HWM and the connector's HWM.','line_number':785,'multiline':False]['text':'  Create a bi-directional pipe to connect the peers.','line_number':795,'multiline':False]['text':'  The peer doesn't exist yet so we don't know whether','line_number':813,'multiline':False]['text':'  to send the routing id message or not. To resolve this,','line_number':814,'multiline':False]['text':'  we always send our routing id and drop it later if','line_number':815,'multiline':False]['text':'  the peer doesn't expect it.','line_number':816,'multiline':False]['text':'  If set, send the hello msg of the local socket to the peer.','line_number':820,'multiline':False]['text':'  If required, send the routing id of the local socket to the peer.','line_number':829,'multiline':False]['text':'  If required, send the routing id of the peer to the local socket.','line_number':834,'multiline':False]['text':'  If set, send the hello msg of the local socket to the peer.','line_number':840,'multiline':False]['text':'  If set, send the hello msg of the peer to the local socket.','line_number':845,'multiline':False]['text':'  Attach remote end of the pipe to the peer socket. Note that peer's','line_number':856,'multiline':False]['text':'  seqnum was incremented in find_endpoint function. We don't need it','line_number':857,'multiline':False]['text':'  increased here.','line_number':858,'multiline':False]['text':'  Attach local end of the pipe to this socket object.','line_number':862,'multiline':False]['text':' Save last endpoint URI','line_number':865,'multiline':False]['text':' remember inproc connections for disconnect','line_number':868,'multiline':False]['text':' There is no valid use for multiple connects for SUB-PUB nor','line_number':879,'multiline':False]['text':' DEALER-ROUTER nor REQ-REP. Multiple connects produces','line_number':880,'multiline':False]['text':' nonsensical results.','line_number':881,'multiline':False]['text':'  Choose the I/O thread to run the session in.','line_number':886,'multiline':False]['text':'  Resolve address (if needed by the protocol)','line_number':897,'multiline':False]['text':'  Do some basic sanity checks on tcp:// address syntax','line_number':899,'multiline':False]['text':'  - hostname starts with digit or letter, with embedded '-' or '.'','line_number':900,'multiline':False]['text':'  - IPv6 address may contain hex chars and colons.','line_number':901,'multiline':False]['text':'  - IPv6 link local address may contain % followed by interface name / zone_id','line_number':902,'multiline':False]['text':'    (Reference: https://tools.ietf.org/html/rfc4007)','line_number':903,'multiline':False]['text':'  - IPv4 address may contain decimal digits and dots.','line_number':904,'multiline':False]['text':'  - Address must end in ":port" where port is *, or numeric','line_number':905,'multiline':False]['text':'  - Address may contain two parts separated by ':'','line_number':906,'multiline':False]['text':'  Following code is quick and dirty check to catch obvious errors,','line_number':907,'multiline':False]['text':'  without trying to be fully accurate.','line_number':908,'multiline':False]['text':'  Assume the worst, now look for success','line_number':920,'multiline':False]['text':'  Did we reach the end of the address safely?','line_number':922,'multiline':False]['text':'  Do we have a valid port string? (cannot be '*' in connect','line_number':924,'multiline':False]['text':'  Valid','line_number':929,'multiline':False]['text':'  Defer resolution until a socket is opened','line_number':937,'multiline':False]['text':' TBD - Should we check address for ZMQ_HAVE_NORM???','line_number':995,'multiline':False]['text':' Cannot connect to random Port Identity','line_number':1022,'multiline':False]['text':'  Create session.','line_number':1044,'multiline':False]['text':'  PGM does not support subscription forwarding; ask for all data to be','line_number':1049,'multiline':False]['text':'  sent to this pipe. (same for NORM, currently?)','line_number':1050,'multiline':False]['text':'  Create a bi-directional pipe.','line_number':1068,'multiline':False]['text':'  Attach local end of the pipe to the socket object.','line_number':1080,'multiline':False]['text':'  Attach remote end of the pipe to the session object later on.','line_number':1084,'multiline':False]['text':'  Save last endpoint URI','line_number':1088,'multiline':False]['text':' The resolved last_endpoint is used as a key in the endpoints map.','line_number':1100,'multiline':False]['text':' The address passed by the user might not match in the TCP case due to','line_number':1101,'multiline':False]['text':' IPv4-in-IPv6 mapping (EG: tcp://[::ffff:127.0.0.1]:9999), so try to','line_number':1102,'multiline':False]['text':' resolve before giving up. Given at this stage we don't know whether a','line_number':1103,'multiline':False]['text':' socket is connected or bound, try with both.','line_number':1104,'multiline':False]['text':'  Activate the session. Make it a child of this socket.','line_number':1127,'multiline':False]['text':'  Check whether the context hasn't been shut down yet.','line_number':1140,'multiline':False]['text':'  Check whether endpoint address passed to the function is valid.','line_number':1146,'multiline':False]['text':'  Process pending commands, if any, since there could be pending unprocessed process_own()'s','line_number':1152,'multiline':False]['text':'  (from launch_child() for example) we're asked to terminate now.','line_number':1153,'multiline':False]['text':'  Parse endpoint_uri_ string.','line_number':1159,'multiline':False]['text':' Disconnect an inproc socket','line_number':1169,'multiline':False]['text':'  Find the endpoints range (if any) corresponding to the endpoint_uri_pair_ string.','line_number':1181,'multiline':False]['text':'  If we have an associated pipe, terminate it.','line_number':1190,'multiline':False]['text':'  Check whether the context hasn't been shut down yet.','line_number':1208,'multiline':False]['text':'  Check whether message passed to the function is valid.','line_number':1214,'multiline':False]['text':'  Process pending commands, if any.','line_number':1220,'multiline':False]['text':'  Clear any user-visible flags that are set on the message.','line_number':1226,'multiline':False]['text':'  At this point we impose the flags on the message.','line_number':1229,'multiline':False]['text':'  Try to send the message using method in each socket class','line_number':1235,'multiline':False]['text':'  Special case for ZMQ_PUSH: -2 means pipe is dead while a','line_number':1240,'multiline':False]['text':'  multi-part send is in progress and can't be recovered, so drop','line_number':1241,'multiline':False]['text':'  silently when in blocking mode to keep backward compatibility.','line_number':1242,'multiline':False]['text':'  In case of non-blocking send we'll simply propagate','line_number':1256,'multiline':False]['text':'  the error - including EAGAIN - up the stack.','line_number':1257,'multiline':False]['text':'  Compute the time when the timeout should occur.','line_number':1262,'multiline':False]['text':'  If the timeout is infinite, don't care.','line_number':1263,'multiline':False]['text':'  Oops, we couldn't send the message. Wait for the next','line_number':1267,'multiline':False]['text':'  command, process it and try to send the message again.','line_number':1268,'multiline':False]['text':'  If timeout is reached in the meantime, return EAGAIN.','line_number':1269,'multiline':False]['text':'  Check whether the context hasn't been shut down yet.','line_number':1296,'multiline':False]['text':'  Check whether message passed to the function is valid.','line_number':1302,'multiline':False]['text':'  Once every inbound_poll_rate messages check for signals and process','line_number':1308,'multiline':False]['text':'  incoming commands. This happens only if we are not polling altogether','line_number':1309,'multiline':False]['text':'  because there are messages available all the time. If poll occurs,','line_number':1310,'multiline':False]['text':'  ticks is set to zero and thus we avoid this code.','line_number':1311,'multiline':False]['text':'','line_number':1312,'multiline':False]['text':'  Note that 'recv' uses different command throttling algorithm (the one','line_number':1313,'multiline':False]['text':'  described above) from the one used by 'send'. This is because counting','line_number':1314,'multiline':False]['text':'  ticks is more efficient than doing RDTSC all the time.','line_number':1315,'multiline':False]['text':'  Get the message.','line_number':1323,'multiline':False]['text':'  If we have the message, return immediately.','line_number':1329,'multiline':False]['text':'  If the message cannot be fetched immediately, there are two scenarios.','line_number':1335,'multiline':False]['text':'  For non-blocking recv, commands are processed in case there's an','line_number':1336,'multiline':False]['text':'  activate_reader command already waiting in a command pipe.','line_number':1337,'multiline':False]['text':'  If it's not, return EAGAIN.','line_number':1338,'multiline':False]['text':'  Compute the time when the timeout should occur.','line_number':1354,'multiline':False]['text':'  If the timeout is infinite, don't care.','line_number':1355,'multiline':False]['text':'  In blocking scenario, commands are processed over and over again until','line_number':1359,'multiline':False]['text':'  we are able to fetch a message.','line_number':1360,'multiline':False]['text':'  Remove all existing signalers for thread safe sockets','line_number':1392,'multiline':False]['text':'  Mark the socket as dead','line_number':1396,'multiline':False]['text':'  Transfer the ownership of the socket from this application thread','line_number':1400,'multiline':False]['text':'  to the reaper thread which will take care of the rest of shutdown','line_number':1401,'multiline':False]['text':'  process.','line_number':1402,'multiline':False]['text':'  Plug the socket to the reaper thread.','line_number':1420,'multiline':False]['text':'  Add signaler to the safe mailbox','line_number':1433,'multiline':False]['text':'  Send a signal to make sure reaper handle existing commands','line_number':1438,'multiline':False]['text':'  Initialise the termination and check whether it can be deallocated','line_number':1445,'multiline':False]['text':'  immediately.','line_number':1446,'multiline':False]['text':'  If we are asked not to wait, check whether we haven't processed','line_number':1454,'multiline':False]['text':'  commands recently, so that we can throttle the new commands.','line_number':1455,'multiline':False]['text':'  Get the CPU's tick counter. If 0, the counter is not available.','line_number':1457,'multiline':False]['text':'  Optimised version of command processing - it doesn't have to check','line_number':1460,'multiline':False]['text':'  for incoming commands each time. It does so only if certain time','line_number':1461,'multiline':False]['text':'  elapsed since last command processing. Command delay varies','line_number':1462,'multiline':False]['text':'  depending on CPU speed: It's ~1ms on 3GHz CPU, ~2ms on 1.5GHz CPU','line_number':1463,'multiline':False]['text':'  etc. The optimisation makes sense only on platforms where getting','line_number':1464,'multiline':False]['text':'  a timestamp is a very cheap operation (tens of nanoseconds).','line_number':1465,'multiline':False]['text':'  Check whether TSC haven't jumped backwards (in case of migration','line_number':1467,'multiline':False]['text':'  between CPU cores) and whether certain time have elapsed since','line_number':1468,'multiline':False]['text':'  last command processing. If it didn't do nothing.','line_number':1469,'multiline':False]['text':'  Check whether there are any commands pending for this thread.','line_number':1476,'multiline':False]['text':'  Process all available commands.','line_number':1483,'multiline':False]['text':'  Here, someone have called zmq_ctx_term while the socket was still alive.','line_number':1503,'multiline':False]['text':'  We'll remember the fact so that any blocking call is interrupted and any','line_number':1504,'multiline':False]['text':'  further attempt to use the socket will return ETERM. The user is still','line_number':1505,'multiline':False]['text':'  responsible for calling zmq_close on the socket though!','line_number':1506,'multiline':False]['text':'  Unregister all inproc endpoints associated with this socket.','line_number':1520,'multiline':False]['text':'  Doing this we make sure that no new pipes from other sockets (inproc)','line_number':1521,'multiline':False]['text':'  will be initiated.','line_number':1522,'multiline':False]['text':'  Ask all attached pipes to terminate.','line_number':1525,'multiline':False]['text':'  Only inprocs might have a disconnect message set','line_number':1527,'multiline':False]['text':'  Continue the termination process immediately.','line_number':1533,'multiline':False]['text':'
 * There are 2 pipes per connection, and the inbound one _must_ be queried from
 * the I/O thread. So ask the outbound pipe, in the application thread, to send
 * a message (pipe_peer_stats) to its peer. The message will carry the outbound
 * pipe stats and endpoint, and the reference to the socket object.
 * The inbound pipe on the I/O thread will then add its own stats and endpoint,
 * and write back a message to the socket object (pipe_stats_publish) which
 * will raise an event with the data.
 ','line_number':1553,'multiline':True]['text':'  This function is invoked only once the socket is running in the context','line_number':1661,'multiline':False]['text':'  of the reaper thread. Process any commands from other threads/sockets','line_number':1662,'multiline':False]['text':'  that may be available at the moment. Ultimately, the socket will','line_number':1663,'multiline':False]['text':'  be destroyed.','line_number':1664,'multiline':False]['text':'  If the socket is thread safe we need to unsignal the reaper signaler','line_number':1668,'multiline':False]['text':'  If the object was already marked as destroyed, finish the deallocation.','line_number':1689,'multiline':False]['text':'  Remove the socket from the reaper's poller.','line_number':1691,'multiline':False]['text':'  Remove the socket from the context.','line_number':1694,'multiline':False]['text':'  Notify the reaper about the fact.','line_number':1697,'multiline':False]['text':'  Deallocate.','line_number':1700,'multiline':False]['text':' Notify derived sockets of the hiccup','line_number':1720,'multiline':False]['text':'  Notify the specific socket type about the pipe termination.','line_number':1726,'multiline':False]['text':' Remove pipe from inproc pipes','line_number':1729,'multiline':False]['text':'  Remove the pipe from the list of attached pipes and confirm its','line_number':1732,'multiline':False]['text':'  termination if we are already shutting down.','line_number':1733,'multiline':False]['text':' Remove the pipe from _endpoints (set it to NULL).','line_number':1736,'multiline':False]['text':'  Test whether routing_id flag is valid for this socket type.','line_number':1756,'multiline':False]['text':'  Remove MORE flag.','line_number':1760,'multiline':False]['text':'  Event version 1 supports only first 16 events.','line_number':1776,'multiline':False]['text':'  Support deregistering monitoring endpoints as well','line_number':1782,'multiline':False]['text':'  Parse endpoint_uri_ string.','line_number':1787,'multiline':False]['text':'  Event notification only supported over inproc://','line_number':1793,'multiline':False]['text':' already monitoring. Stop previous monitor before starting new one.','line_number':1799,'multiline':False]['text':' Check if the specified socket type is supported. It must be a','line_number':1804,'multiline':False]['text':' one-way socket types that support the SNDMORE flag.','line_number':1805,'multiline':False]['text':'  Register events to monitor','line_number':1818,'multiline':False]['text':'  Create a monitor socket of the specified type.','line_number':1821,'multiline':False]['text':'  Never block context termination on pending event messages','line_number':1826,'multiline':False]['text':'  Spawn the monitor socket endpoint','line_number':1833,'multiline':False]['text':'  Send a monitor event','line_number':1949,'multiline':False]['text':' this is a private method which is only called from','line_number':1956,'multiline':False]['text':' contexts where the _monitor_sync mutex has been locked before','line_number':1957,'multiline':False]['text':'  The API should not allow to activate unsupported events','line_number':1964,'multiline':False]['text':'  v1 only allows one value','line_number':1966,'multiline':False]['text':'  Send event and value in first frame','line_number':1971,'multiline':False]['text':'  Avoid dereferencing uint32_t on unaligned address','line_number':1976,'multiline':False]['text':'  Send address in second frame','line_number':1984,'multiline':False]['text':'  Send event in first frame (64bit unsigned)','line_number':1991,'multiline':False]['text':'  Send number of values that will follow in second frame','line_number':1996,'multiline':False]['text':'  Send values in third-Nth frames (64bit unsigned)','line_number':2002,'multiline':False]['text':'  Send local endpoint URI in second-to-last frame (string)','line_number':2010,'multiline':False]['text':'  Send remote endpoint URI in last frame (string)','line_number':2016,'multiline':False]['text':' this is a private method which is only called from','line_number':2028,'multiline':False]['text':' contexts where the _monitor_sync mutex has been locked before','line_number':2029,'multiline':False]['text':' TODO why isn't it possible to set an empty connect_routing_id','line_number':2067,'multiline':False]['text':'   (which is the default value)','line_number':2068,'multiline':False]['text':'  Add the record into output pipes lookup table','line_number':2108,'multiline':False]['text':' TODO we could probably avoid constructor a temporary blob_t to call this function','line_number':2124,'multiline':False]['text':' TODO we could probably avoid constructor a temporary blob_t to call this function','line_number':2132,'multiline':False]