['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':'  This is a cross-platform equivalent to signal_fd. However, as opposed','line_number':15,'multiline':False]['text':'  to signal_fd there can be at most one signal in the signaler at any','line_number':16,'multiline':False]['text':'  given moment. Attempt to send a signal before receiving the previous','line_number':17,'multiline':False]['text':'  one will result in undefined behaviour.','line_number':18,'multiline':False]['text':' Returns the socket/file descriptor','line_number':26,'multiline':False]['text':' May return retired_fd if the signaler could not be initialized.','line_number':27,'multiline':False]['text':' close the file descriptors in a forked child process so that they','line_number':37,'multiline':False]['text':' do not interfere with the context in the parent process.','line_number':38,'multiline':False]['text':'  Underlying write & read file descriptor','line_number':43,'multiline':False]['text':'  Will be -1 if an error occurred during initialization, e.g. we','line_number':44,'multiline':False]['text':'  exceeded the number of available handles','line_number':45,'multiline':False]['text':' the process that created this context. Used to detect forking.','line_number':50,'multiline':False]['text':' idempotent close of file descriptors that is safe to use by destructor','line_number':52,'multiline':False]['text':' and forked().','line_number':53,'multiline':False]