['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':' "Tell them I was a writer.','line_number':3,'multiline':False]['text':'  A maker of software.','line_number':4,'multiline':False]['text':'  A humanist. A father.','line_number':5,'multiline':False]['text':'  And many things.','line_number':6,'multiline':False]['text':'  But above all, a writer.','line_number':7,'multiline':False]['text':'  Thank You. :)"','line_number':8,'multiline':False]['text':'  - Pieter Hintjens','line_number':9,'multiline':False]['text':'  On AIX platform, poll.h has to be included first to get consistent','line_number':19,'multiline':False]['text':'  definition of pollfd structure (AIX uses 'reqevents' and 'retnevents'','line_number':20,'multiline':False]['text':'  instead of 'events' and 'revents' and defines macros to map from POSIX-y','line_number':21,'multiline':False]['text':'  names to AIX-specific names).','line_number':22,'multiline':False]['text':' TODO: determine if this is an issue, since zmq.h is being loaded from pch.','line_number':30,'multiline':False]['text':' zmq.h must be included *after* poll.h for AIX to build properly','line_number':31,'multiline':False]['text':'#include "../include/zmq.h"','line_number':32,'multiline':False]['text':' XSI vector I/O','line_number':41,'multiline':False]['text':'  Compile time check whether msg_t fits into zmq_msg_t.','line_number':83,'multiline':False]['text':'  New context API','line_number':107,'multiline':False]['text':'  We do this before the ctx constructor since its embedded mailbox_t','line_number':111,'multiline':False]['text':'  object needs the network to be up and running (at least on Windows).','line_number':112,'multiline':False]['text':'  Create 0MQ context.','line_number':117,'multiline':False]['text':'  Shut down only if termination was not interrupted by a signal.','line_number':138,'multiline':False]['text':'  Stable/legacy context API','line_number':194,'multiline':False]['text':' Sockets','line_number':218,'multiline':False]['text':' Sending functions.','line_number':353,'multiline':False]['text':'  This is what I'd like to do, my C++ fu is too weak -- PH 2016/02/09','line_number':363,'multiline':False]['text':'  int max_msgsz = s_->parent->get (ZMQ_MAX_MSGSZ);','line_number':364,'multiline':False]['text':'  Truncate returned size to INT_MAX to avoid overflow to negative values','line_number':367,'multiline':False]['text':'  To be deprecated once zmq_msg_send() is stable                           ','line_number':371,'multiline':True]['text':'  Note the optimisation here. We don't close the msg object as it is','line_number':395,'multiline':False]['text':'  empty anyway. This may change when implementation of zmq_msg_t changes.','line_number':396,'multiline':False]['text':'  Note the optimisation here. We don't close the msg object as it is','line_number':419,'multiline':False]['text':'  empty anyway. This may change when implementation of zmq_msg_t changes.','line_number':420,'multiline':False]['text':' Send multiple messages.','line_number':425,'multiline':False]['text':' TODO: this function has no man page','line_number':426,'multiline':False]['text':'','line_number':427,'multiline':False]['text':' If flag bit ZMQ_SNDMORE is set the vector is treated as','line_number':428,'multiline':False]['text':' a single multi-part message, i.e. the last message has','line_number':429,'multiline':False]['text':' ZMQ_SNDMORE bit switched off.','line_number':430,'multiline':False]['text':'','line_number':431,'multiline':False]['text':' Receiving functions.','line_number':467,'multiline':False]['text':'  Truncate returned size to INT_MAX to avoid overflow to negative values','line_number':475,'multiline':False]['text':'  To be deprecated once zmq_msg_recv() is stable                           ','line_number':480,'multiline':True]['text':'  An oversized message is silently truncated.','line_number':505,'multiline':False]['text':'  We explicitly allow a null buffer argument if len is zero','line_number':508,'multiline':False]['text':' Receive a multi-part message','line_number':519,'multiline':False]['text':'','line_number':520,'multiline':False]['text':' Receives up to *count_ parts of a multi-part message.','line_number':521,'multiline':False]['text':' Sets *count_ to the actual number of parts read.','line_number':522,'multiline':False]['text':' ZMQ_RCVMORE is set to indicate if a complete multi-part message was read.','line_number':523,'multiline':False]['text':' Returns number of message parts read, or -1 on error.','line_number':524,'multiline':False]['text':'','line_number':525,'multiline':False]['text':' Note: even if -1 is returned, some parts of the message','line_number':526,'multiline':False]['text':' may have been read. Therefore the client must consult','line_number':527,'multiline':False]['text':' *count_ to retrieve message parts successfully read,','line_number':528,'multiline':False]['text':' even if -1 is returned.','line_number':529,'multiline':False]['text':'','line_number':530,'multiline':False]['text':' The iov_base* buffers of each iovec *a_ filled in by this','line_number':531,'multiline':False]['text':' function may be freed using free().','line_number':532,'multiline':False]['text':' TODO: this function has no man page','line_number':533,'multiline':False]['text':'','line_number':534,'multiline':False]['text':' Assume zmq_socket ZMQ_RVCMORE is properly set.','line_number':574,'multiline':False]['text':' Message manipulators.','line_number':585,'multiline':False]['text':'  No properties supported at present','line_number':683,'multiline':False]['text':'  Get message metadata string','line_number':709,'multiline':False]['text':' Polling.','line_number':725,'multiline':False]['text':' implement zmq_poll on top of zmq_poller','line_number':730,'multiline':False]['text':'  Register sockets with poller','line_number':738,'multiline':False]['text':'  Poll item is a 0MQ socket.','line_number':745,'multiline':False]['text':' Check for repeat entries','line_number':747,'multiline':False]['text':'  Poll item is a raw file descriptor.','line_number':764,'multiline':False]['text':' Check for repeat entries','line_number':766,'multiline':False]['text':'  Wait for events','line_number':785,'multiline':False]['text':'  Transform poller events into zmq_pollitem events.','line_number':795,'multiline':False]['text':'  items_ contains all items, while events only contains fired events.','line_number':796,'multiline':False]['text':'  If no sockets are repeated (likely), the two are still co-ordered, so step through the items','line_number':797,'multiline':False]['text':'  checking for matches only on the first event.','line_number':798,'multiline':False]['text':'  If there are repeat items, they cannot be assumed to be co-ordered,','line_number':799,'multiline':False]['text':'  so each pollitem must check fired events from the beginning.','line_number':800,'multiline':False]['text':' no repeats, we can ignore events we've already seen','line_number':809,'multiline':False]['text':' no repeats, never have to look at j > j_start','line_number':815,'multiline':False]['text':'  Cleanup','line_number':821,'multiline':False]['text':' ZMQ_HAVE_POLLER','line_number':825,'multiline':False]['text':' if poller is present, use that if there is at least 1 thread-safe socket,','line_number':830,'multiline':False]['text':' otherwise fall back to the previous implementation as it's faster.','line_number':831,'multiline':False]['text':'as_socket_base_t returned NULL : socket is invalid','line_number':839,'multiline':False]['text':' ZMQ_HAVE_POLLER','line_number':844,'multiline':False]['text':'  Build pollset for poll () system call.','line_number':876,'multiline':False]['text':'  If the poll item is a 0MQ socket, we poll on the file descriptor','line_number':878,'multiline':False]['text':'  retrieved by the ZMQ_FD socket option.','line_number':879,'multiline':False]['text':'  Else, the poll item is a raw file descriptor. Just convert the','line_number':889,'multiline':False]['text':'  events to normal POLLIN/POLLOUT for poll ().','line_number':890,'multiline':False]['text':'  Ensure we do not attempt to select () on more than FD_SETSIZE','line_number':900,'multiline':False]['text':'  file descriptors.','line_number':901,'multiline':False]['text':'  TODO since this function is called by a client, we could return errno EINVAL/ENOMEM/... here','line_number':902,'multiline':False]['text':'  Build the fd_sets for passing to select ().','line_number':914,'multiline':False]['text':'  If the poll item is a 0MQ socket we are interested in input on the','line_number':916,'multiline':False]['text':'  notification file descriptor retrieved by the ZMQ_FD socket option.','line_number':917,'multiline':False]['text':'  Else, the poll item is a raw file descriptor. Convert the poll item','line_number':931,'multiline':False]['text':'  events to the appropriate fd_sets.','line_number':932,'multiline':False]['text':'  Compute the timeout for the subsequent poll.','line_number':956,'multiline':False]['text':'  Wait for events.','line_number':960,'multiline':False]['text':'  Check for the events.','line_number':968,'multiline':False]['text':'  The poll item is a 0MQ socket. Retrieve pending events','line_number':972,'multiline':False]['text':'  using the ZMQ_EVENTS socket option.','line_number':973,'multiline':False]['text':'  Else, the poll item is a raw file descriptor, simply convert','line_number':989,'multiline':False]['text':'  the events to zmq_pollitem_t-style format.','line_number':990,'multiline':False]['text':'  Compute the timeout for the subsequent poll.','line_number':1008,'multiline':False]['text':'  Wait for events. Ignore interrupts if there's infinite timeout.','line_number':1023,'multiline':False]['text':'  Check for the events.','line_number':1050,'multiline':False]['text':'  The poll item is a 0MQ socket. Retrieve pending events','line_number':1054,'multiline':False]['text':'  using the ZMQ_EVENTS socket option.','line_number':1055,'multiline':False]['text':'  Else, the poll item is a raw file descriptor, simply convert','line_number':1070,'multiline':False]['text':'  the events to zmq_pollitem_t-style format.','line_number':1071,'multiline':False]['text':'  If timeout is zero, exit immediately whether there are events or not.','line_number':1086,'multiline':False]['text':'  If there are events to return, we can exit immediately.','line_number':1090,'multiline':False]['text':'  At this point we are meant to wait for events but there are none.','line_number':1094,'multiline':False]['text':'  If timeout is infinite we can just loop until we get some events.','line_number':1095,'multiline':False]['text':'  The timeout is finite and there are no events. In the first pass','line_number':1102,'multiline':False]['text':'  we get a timestamp of when the polling have begun. (We assume that','line_number':1103,'multiline':False]['text':'  first pass have taken negligible time). We also compute the time','line_number':1104,'multiline':False]['text':'  when the polling should time out.','line_number':1105,'multiline':False]['text':'  Find out whether timeout have expired.','line_number':1115,'multiline':False]['text':'  Exotic platforms that support neither poll() nor select().','line_number':1123,'multiline':False]['text':' return values of 0 or -1 should be returned from zmq_poll; return value 1 means items passed checks','line_number':1130,'multiline':False]['text':'  Ensure we do not attempt to select () on more than FD_SETSIZE','line_number':1187,'multiline':False]['text':'  file descriptors.','line_number':1188,'multiline':False]['text':'  TODO since this function is called by a client, we could return errno EINVAL/ENOMEM/... here','line_number':1189,'multiline':False]['text':'  Build the fd_sets for passing to select ().','line_number':1194,'multiline':False]['text':'  If the poll item is a 0MQ socket we are interested in input on the','line_number':1196,'multiline':False]['text':'  notification file descriptor retrieved by the ZMQ_FD socket option.','line_number':1197,'multiline':False]['text':'  Else, the poll item is a raw file descriptor. Convert the poll item','line_number':1213,'multiline':False]['text':'  events to the appropriate fd_sets.','line_number':1214,'multiline':False]['text':'  Check for the events.','line_number':1272,'multiline':False]['text':'  The poll item is a 0MQ socket. Retrieve pending events','line_number':1276,'multiline':False]['text':'  using the ZMQ_EVENTS socket option.','line_number':1277,'multiline':False]['text':'  Else, the poll item is a raw file descriptor, simply convert','line_number':1290,'multiline':False]['text':'  the events to zmq_pollitem_t-style format.','line_number':1291,'multiline':False]['text':'  If timeout is zero, exit immediately whether there are events or not.','line_number':1315,'multiline':False]['text':'  If there are events to return, we can exit immediately.','line_number':1319,'multiline':False]['text':'  At this point we are meant to wait for events but there are none.','line_number':1323,'multiline':False]['text':'  If timeout is infinite we can just loop until we get some events.','line_number':1324,'multiline':False]['text':'  The timeout is finite and there are no events. In the first pass','line_number':1331,'multiline':False]['text':'  we get a timestamp of when the polling have begun. (We assume that','line_number':1332,'multiline':False]['text':'  first pass have taken negligible time). We also compute the time','line_number':1333,'multiline':False]['text':'  when the polling should time out.','line_number':1334,'multiline':False]['text':'  Find out whether timeout have expired.','line_number':1344,'multiline':False]['text':' finally, in all other cases, we just continue','line_number':1349,'multiline':False]['text':' ZMQ_HAVE_PPOLL','line_number':1352,'multiline':False]['text':' Windows has no sigset_t','line_number':1360,'multiline':False]['text':'  Compute the timeout for the subsequent poll.','line_number':1386,'multiline':False]['text':'  Wait for events. Ignore interrupts if there's infinite timeout.','line_number':1391,'multiline':False]['text':' ZMQ_HAVE_PPOLL','line_number':1424,'multiline':False]['text':'  The poller functionality','line_number':1427,'multiline':False]['text':' wait_all returns number of events, but we return 0 for any success','line_number':1586,'multiline':False]['text':'  Peer-specific state','line_number':1625,'multiline':False]['text':'  Timers','line_number':1638,'multiline':False]['text':'  The proxy functionality','line_number':1724,'multiline':False]['text':' Runs zmq::proxy_steerable with a NULL control_.','line_number':1732,'multiline':False]['text':'  The deprecated device functionality','line_number':1753,'multiline':False]['text':' type ','line_number':1755,'multiline':True]['text':'  Probe library capabilities; for now, reports on transport and security','line_number':1761,'multiline':False]['text':'  Whatever the application asked for, we don't have','line_number':1805,'multiline':False]