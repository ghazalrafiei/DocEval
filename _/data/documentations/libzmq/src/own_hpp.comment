['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':'  Base class for objects forming a part of ownership hierarchy.','line_number':18,'multiline':False]['text':'  It handles initialisation and destruction of such objects.','line_number':19,'multiline':False]['text':'  Note that the owner is unspecified in the constructor.','line_number':24,'multiline':False]['text':'  It'll be supplied later on when the object is plugged in.','line_number':25,'multiline':False]['text':'  The object is not living within an I/O thread. It has it's own','line_number':27,'multiline':False]['text':'  thread outside of 0MQ infrastructure.','line_number':28,'multiline':False]['text':'  The object is living within I/O thread.','line_number':31,'multiline':False]['text':'  When another owned object wants to send command to this object','line_number':34,'multiline':False]['text':'  it calls this function to let it know it should not shut down','line_number':35,'multiline':False]['text':'  before the command is delivered.','line_number':36,'multiline':False]['text':'  Use following two functions to wait for arbitrary events before','line_number':39,'multiline':False]['text':'  terminating. Just add number of events to wait for using','line_number':40,'multiline':False]['text':'  register_tem_acks functions. When event occurs, call','line_number':41,'multiline':False]['text':'  remove_term_ack. When number of pending acks reaches zero','line_number':42,'multiline':False]['text':'  object will be deallocated.','line_number':43,'multiline':False]['text':'  Launch the supplied object and become its owner.','line_number':48,'multiline':False]['text':'  Terminate owned object','line_number':51,'multiline':False]['text':'  Ask owner object to terminate this object. It may take a while','line_number':54,'multiline':False]['text':'  while actual termination is started. This function should not be','line_number':55,'multiline':False]['text':'  called more than once.','line_number':56,'multiline':False]['text':'  Returns true if the object is in process of termination.','line_number':59,'multiline':False]['text':'  Derived object destroys own_t. There's no point in allowing','line_number':62,'multiline':False]['text':'  others to invoke the destructor. At the same time, it has to be','line_number':63,'multiline':False]['text':'  virtual so that generic own_t deallocation mechanism destroys','line_number':64,'multiline':False]['text':'  specific type of the owned object correctly.','line_number':65,'multiline':False]['text':'  Term handler is protected rather than private so that it can','line_number':68,'multiline':False]['text':'  be intercepted by the derived class. This is useful to add custom','line_number':69,'multiline':False]['text':'  steps to the beginning of the termination process.','line_number':70,'multiline':False]['text':'  A place to hook in when physical destruction of the object','line_number':73,'multiline':False]['text':'  is to be delayed.','line_number':74,'multiline':False]['text':'  Socket options associated with this object.','line_number':77,'multiline':False]['text':'  Set owner of the object','line_number':81,'multiline':False]['text':'  Handlers for incoming commands.','line_number':84,'multiline':False]['text':'  Check whether all the pending term acks were delivered.','line_number':90,'multiline':False]['text':'  If so, deallocate this object.','line_number':91,'multiline':False]['text':'  True if termination was already initiated. If so, we can destroy','line_number':94,'multiline':False]['text':'  the object if there are no more child objects or pending term acks.','line_number':95,'multiline':False]['text':'  Sequence number of the last command sent to this object.','line_number':98,'multiline':False]['text':'  Sequence number of the last command processed by this object.','line_number':101,'multiline':False]['text':'  Socket owning this object. It's responsible for shutting down','line_number':104,'multiline':False]['text':'  this object.','line_number':105,'multiline':False]['text':'  List of all objects owned by this socket. We are responsible','line_number':108,'multiline':False]['text':'  for deallocating them before we quit.','line_number':109,'multiline':False]['text':'  Number of events we have to get before we can destroy the object.','line_number':113,'multiline':False]