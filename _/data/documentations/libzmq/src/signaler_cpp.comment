['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':' Helper to sleep for specific number of milliseconds (or until signal)','line_number':47,'multiline':False]['text':'','line_number':48,'multiline':False]['text':' Helper to wait on close(), for non-blocking sockets, until it completes','line_number':66,'multiline':False]['text':' If EAGAIN is received, will sleep briefly (1-100ms) then try again, until','line_number':67,'multiline':False]['text':' the overall timeout is reached.','line_number':68,'multiline':False]['text':'','line_number':69,'multiline':False]['text':' do not sleep on first attempt','line_number':78,'multiline':False]['text':'  Create the socketpair for signaling.','line_number':93,'multiline':False]['text':' This might get run after some part of construction failed, leaving one or','line_number':103,'multiline':False]['text':' both of _r and _w retired_fd.','line_number':104,'multiline':False]['text':'  Only check shutdown if WSASTARTUP was previously done','line_number':118,'multiline':False]['text':'printf("Child process %d signaler_t::send returning without sending #1\n", getpid());','line_number':150,'multiline':False]['text':' do not send anything in forked child context','line_number':151,'multiline':False]['text':' wsa_assert does not abort on WSAEWOULDBLOCK. If we get this, we retry.','line_number':164,'multiline':False]['text':' Given the small size of dummy (should be 1) expect that send was able to send everything.','line_number':166,'multiline':False]['text':'printf("Child process %d signaler_t::send returning without sending #2\n", getpid());','line_number':176,'multiline':False]['text':'printf("Child process %d signaler_t::send returning without sending #2\n", getpid());','line_number':192,'multiline':False]['text':' we have forked and the file descriptor is closed. Emulate an interrupt','line_number':207,'multiline':False]['text':' response.','line_number':208,'multiline':False]['text':'printf("Child process %d signaler_t::wait returning simulating interrupt #1\n", getpid());','line_number':209,'multiline':False]['text':' we have forked and the file descriptor is closed. Emulate an interrupt','line_number':230,'multiline':False]['text':' response.','line_number':231,'multiline':False]['text':'printf("Child process %d signaler_t::wait returning simulating interrupt #2\n", getpid());','line_number':232,'multiline':False]['text':'  Attempt to read a signal.','line_number':277,'multiline':False]['text':'  If we accidentally grabbed the next signal(s) along with the current','line_number':283,'multiline':False]['text':'  one, return it back to the eventfd object.','line_number':284,'multiline':False]['text':'  Attempt to read a signal.','line_number':313,'multiline':False]['text':'  If we accidentally grabbed the next signal(s) along with the current','line_number':323,'multiline':False]['text':'  one, return it back to the eventfd object.','line_number':324,'multiline':False]['text':'  Close file descriptors created in the parent and create new pair','line_number':382,'multiline':False]