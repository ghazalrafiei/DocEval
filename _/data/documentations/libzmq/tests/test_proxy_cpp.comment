['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':' Asynchronous client-to-server (DEALER to ROUTER) - pure libzmq','line_number':32,'multiline':False]['text':'','line_number':33,'multiline':False]['text':' While this example runs in a single process, that is to make','line_number':34,'multiline':False]['text':' it easier to start and stop the example. Each task may have its own','line_number':35,'multiline':False]['text':' context and conceptually acts as a separate process. To have this','line_number':36,'multiline':False]['text':' behaviour, it is necessary to replace the inproc transport of the','line_number':37,'multiline':False]['text':' control socket by a tcp transport.','line_number':38,'multiline':False]['text':' This is our client task','line_number':40,'multiline':False]['text':' It connects to the server, and then sends a request once per second','line_number':41,'multiline':False]['text':' It collects responses as they arrive, and it prints them out. We will','line_number':42,'multiline':False]['text':' run several client tasks in parallel, each with a different random ID.','line_number':43,'multiline':False]['text':' Endpoint socket gets random port to avoid test failing when port in use','line_number':48,'multiline':False]['text':' Control socket receives terminate command from main over inproc','line_number':64,'multiline':False]['text':' Set random routing id to make tracing easier','line_number':73,'multiline':False]['text':' includes '\0' as an helper for printf','line_number':79,'multiline':False]['text':' Tick once per 200 ms, pulling in arriving messages','line_number':91,'multiline':False]['text':'  Check that message is still the same','line_number':105,'multiline':False]['text':' NULL-terminate the command string','line_number':115,'multiline':False]['text':' CONTENT_SIZE','line_number':134,'multiline':False]['text':' This is our server task.','line_number':151,'multiline':False]['text':' It uses the multithreaded server model to deal requests out to a pool','line_number':152,'multiline':False]['text':' of workers and route replies back to clients. One worker can handle','line_number':153,'multiline':False]['text':' one request at a time but one client can talk to multiple workers at','line_number':154,'multiline':False]['text':' once.','line_number':155,'multiline':False]['text':'unused_','line_number':157,'multiline':True]['text':'unused_','line_number':159,'multiline':True]['text':' Frontend socket talks to clients over TCP','line_number':161,'multiline':False]['text':' Backend socket talks to workers over inproc','line_number':170,'multiline':False]['text':' Launch pool of worker threads, precise number is not critical','line_number':177,'multiline':False]['text':' Endpoint socket sends random port to avoid test failing when port in use','line_number':183,'multiline':False]['text':' Connect backend to frontend via a proxy','line_number':201,'multiline':False]['text':' Each worker task works on one request at a time and sends a random number','line_number':214,'multiline':False]['text':' of replies back, with random delays between replies:','line_number':215,'multiline':False]['text':' The comments in the first column, if suppressed, makes it a poller version','line_number':216,'multiline':False]['text':'unused_','line_number':218,'multiline':True]['text':' Control socket receives terminate command from main over inproc','line_number':227,'multiline':False]['text':' bigger than what we need to check that','line_number':236,'multiline':False]['text':' the size received is the size sent','line_number':238,'multiline':False]['text':' usually, rc == -1 (no message)','line_number':244,'multiline':False]['text':' NULL-terminate the command string','line_number':246,'multiline':False]['text':' The DEALER socket gives us the reply envelope and message','line_number':254,'multiline':False]['text':' if we don't poll, we have to use ZMQ_DONTWAIT, if we poll, we can block-receive with 0','line_number':255,'multiline':False]['text':' Send 0..4 replies back','line_number':264,'multiline':False]['text':' Sleep for some fraction of a second','line_number':268,'multiline':False]['text':'  Send message from server to client','line_number':271,'multiline':False]['text':' The main thread simply starts several clients and a server, and then','line_number':290,'multiline':False]['text':' waits for the server to finish.','line_number':291,'multiline':False]['text':' Control socket receives terminate command from main over inproc','line_number':300,'multiline':False]['text':' Run for 500 ms then quit','line_number':314,'multiline':False]['text':' Wait for all clients and workers to STOP','line_number':320,'multiline':False]['text':' Wait for all clients and workers to terminate','line_number':326,'multiline':False]