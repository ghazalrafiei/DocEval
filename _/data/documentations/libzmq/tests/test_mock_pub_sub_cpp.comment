['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':'  Read one event off the monitor socket; return value and address','line_number':11,'multiline':False]['text':'  by reference, if not null, and event number by value. Returns -1','line_number':12,'multiline':False]['text':'  in case of error.','line_number':13,'multiline':False]['text':'  First frame in message contains event number and value','line_number':18,'multiline':False]['text':'  Interrupted, presumably','line_number':23,'multiline':False]['text':'  Second frame in message contains event address','line_number':30,'multiline':False]['text':'  Interrupted, presumably','line_number':33,'multiline':False]['text':'  Mock ZMTP 3.1 which uses commands','line_number':62,'multiline':False]['text':'  greeting - XPUB has one extra byte','line_number':81,'multiline':False]['text':'  We'll be using this socket in raw mode','line_number':94,'multiline':False]['text':'  Create and connect a socket for collecting monitor events on xpub','line_number':103,'multiline':False]['text':'  Connect to the inproc endpoint so we'll get events','line_number':110,'multiline':False]['text':' Mock a ZMTP 3 client so we can forcibly try sub commands','line_number':129,'multiline':False]['text':' By now everything should report as connected','line_number':132,'multiline':False]['text':'  SUB binds, let its state machine run','line_number':142,'multiline':False]['text':'  Because zeromq attach the pipe after the handshake, we need more time here before we can run the state-machine','line_number':143,'multiline':False]