['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':' worker control, not proxy control','line_number':28,'multiline':False]['text':'or ZMQ_PAIR, ZMQ_SUB (without statistics)','line_number':31,'multiline':False]['text':' Asynchronous client-to-server (DEALER to ROUTER) - pure libzmq','line_number':39,'multiline':False]['text':'','line_number':40,'multiline':False]['text':' While this example runs in a single process, that is to make','line_number':41,'multiline':False]['text':' it easier to start and stop the example. Each task may have its own','line_number':42,'multiline':False]['text':' context and conceptually acts as a separate process. To have this','line_number':43,'multiline':False]['text':' behaviour, it is necessary to replace the inproc transport of the','line_number':44,'multiline':False]['text':' control socket by a tcp transport.','line_number':45,'multiline':False]['text':' This is our client task','line_number':47,'multiline':False]['text':' It connects to the server, and then sends a request once per second','line_number':48,'multiline':False]['text':' It collects responses as they arrive, and it prints them out. We will','line_number':49,'multiline':False]['text':' run several client tasks in parallel, each with a different random ID.','line_number':50,'multiline':False]['text':' Endpoint socket gets random port to avoid test failing when port in use','line_number':55,'multiline':False]['text':' Control socket receives terminate command from main over inproc','line_number':71,'multiline':False]['text':' Set random routing id to make tracing easier','line_number':81,'multiline':False]['text':' includes '\0' as an helper for printf','line_number':87,'multiline':False]['text':' Tick once per 200 ms, pulling in arriving messages','line_number':100,'multiline':False]['text':'  Check that message is still the same','line_number':114,'multiline':False]['text':' NULL-terminate the command string','line_number':124,'multiline':False]['text':' CONTENT_SIZE','line_number':143,'multiline':False]['text':' This is our server task.','line_number':160,'multiline':False]['text':' It uses the multithreaded server model to deal requests out to a pool','line_number':161,'multiline':False]['text':' of workers and route replies back to clients. One worker can handle','line_number':162,'multiline':False]['text':' one request at a time but one client can talk to multiple workers at','line_number':163,'multiline':False]['text':' once.','line_number':164,'multiline':False]['text':'unused_','line_number':166,'multiline':True]['text':'unused_','line_number':168,'multiline':True]['text':' Frontend socket talks to clients over TCP','line_number':170,'multiline':False]['text':' Backend socket talks to workers over inproc','line_number':179,'multiline':False]['text':' Launch pool of worker threads, precise number is not critical','line_number':186,'multiline':False]['text':' Endpoint socket sends random port to avoid test failing when port in use','line_number':192,'multiline':False]['text':' Proxy control socket','line_number':210,'multiline':False]['text':' Connect backend to frontend via a steerable proxy','line_number':220,'multiline':False]['text':' Each worker task works on one request at a time and sends a random number','line_number':236,'multiline':False]['text':' of replies back, with random delays between replies:','line_number':237,'multiline':False]['text':' The comments in the first column, if suppressed, makes it a poller version','line_number':238,'multiline':False]['text':'unused_','line_number':240,'multiline':True]['text':' Control socket receives terminate command from main over inproc','line_number':249,'multiline':False]['text':' bigger than what we need to check that','line_number':258,'multiline':False]['text':' the size received is the size sent','line_number':260,'multiline':False]['text':'Commands over the worker control socket','line_number':268,'multiline':False]['text':' NULL-terminate the command string','line_number':271,'multiline':False]['text':' The DEALER socket gives us the reply envelope and message','line_number':281,'multiline':False]['text':'null terminate','line_number':286,'multiline':False]['text':'null terminate','line_number':289,'multiline':False]['text':' Send 0..4 replies back','line_number':294,'multiline':False]['text':' Sleep for some fraction of a second','line_number':298,'multiline':False]['text':'  Send message from server to client','line_number':301,'multiline':False]['text':' If STATISTICS is received, the proxy will reply on the control socket','line_number':320,'multiline':False]['text':' sending a multipart message with 8 frames, each with an unsigned integer','line_number':321,'multiline':False]['text':' 64-bit wide that provide in the following order:','line_number':322,'multiline':False]['text':'','line_number':323,'multiline':False]['text':' - 0/frn: number of messages received by the frontend socket','line_number':324,'multiline':False]['text':'','line_number':325,'multiline':False]['text':' - 1/frb: number of bytes received by the frontend socket','line_number':326,'multiline':False]['text':'','line_number':327,'multiline':False]['text':' - 2/fsn: number of messages sent out the frontend socket','line_number':328,'multiline':False]['text':'','line_number':329,'multiline':False]['text':' - 3/fsb: number of bytes sent out the frontend socket','line_number':330,'multiline':False]['text':'','line_number':331,'multiline':False]['text':' - 4/brn: number of messages received by the backend socket','line_number':332,'multiline':False]['text':'','line_number':333,'multiline':False]['text':' - 5/brb: number of bytes received by the backend socket','line_number':334,'multiline':False]['text':'','line_number':335,'multiline':False]['text':' - 6/bsn: number of messages sent out the backend socket','line_number':336,'multiline':False]['text':'','line_number':337,'multiline':False]['text':' - 7/bsb: number of bytes sent out the backend socket','line_number':338,'multiline':False]['text':'return total bytes proxied, so we can test PAUSE/RESUME','line_number':351,'multiline':False]['text':'bytes sent on frontend','line_number':375,'multiline':False]['text':'bytes sent on backend','line_number':376,'multiline':False]['text':' The main thread simply starts several clients and a server, and then','line_number':389,'multiline':False]['text':' waits for the server to finish.','line_number':390,'multiline':False]['text':'expect an empty reply from REP for commands that need no response','line_number':402,'multiline':False]['text':' Worker control socket receives terminate command from main over inproc','line_number':422,'multiline':False]['text':' setup time','line_number':435,'multiline':False]['text':' Proxy control socket','line_number':437,'multiline':False]['text':' Run for some time','line_number':462,'multiline':False]['text':' Paused for some time','line_number':468,'multiline':False]['text':'check no more bytes have been proxied while paused','line_number':470,'multiline':False]['text':' Resumed for a while','line_number':475,'multiline':False]['text':' Wait for all clients and workers to STOP','line_number':485,'multiline':False]['text':' Wait for all clients and workers to terminate','line_number':494,'multiline':False]