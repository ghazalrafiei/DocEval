['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]['text':'  These tests require strict ordering, so wait for the connections to','line_number':34,'multiline':False]['text':'  happen before opening the next, so that messages flow in the','line_number':35,'multiline':False]['text':'  expected direction','line_number':36,'multiline':False]['text':'  Case 1: Second send() before a reply arrives in a pipe.','line_number':84,'multiline':False]['text':'  Send a request, ensure it arrives, don't send a reply','line_number':89,'multiline':False]['text':'  Send another request on the REQ socket','line_number':96,'multiline':False]['text':'  Send a reply to the first request - that should be discarded by the REQ','line_number':103,'multiline':False]['text':'  Send the expected reply','line_number':106,'multiline':False]['text':'  Another standard req-rep cycle, just to check','line_number':110,'multiline':False]['text':'  Case 2: Second send() after a reply is already in a pipe on the REQ.','line_number':119,'multiline':False]['text':' TODO instead of rerunning the previous test cases, only do the relevant parts (or change the peer)','line_number':121,'multiline':False]['text':'  Send a request, ensure it arrives, send a reply','line_number':124,'multiline':False]['text':'  Wait for message to be there.','line_number':129,'multiline':False]['text':'  Without receiving that reply, send another request on the REQ socket','line_number':132,'multiline':False]['text':'  Send the expected reply','line_number':136,'multiline':False]['text':'  Case 3: Check issue #1690. Two send() in a row should not close the','line_number':143,'multiline':False]['text':'  communication pipes. For example pipe from req to rep[0] should not be','line_number':144,'multiline':False]['text':'  closed after executing Case 1. So rep[0] should be the next to receive,','line_number':145,'multiline':False]['text':'  not rep[1].','line_number':146,'multiline':False]['text':' TODO instead of rerunning the previous test cases, only do the relevant parts (or change the peer)','line_number':148,'multiline':False]['text':' TODO this test case does not use the sockets from setUp','line_number':157,'multiline':False]['text':'  Case 4: Check issue #1695. As messages may pile up before a responder','line_number':159,'multiline':False]['text':'  is available, we check that responses to messages other than the last','line_number':160,'multiline':False]['text':'  sent one are correctly discarded by the REQ pipe','line_number':161,'multiline':False]['text':'  Setup REQ socket as client','line_number':163,'multiline':False]['text':'  Setup ROUTER socket as server but do not bind it just yet','line_number':174,'multiline':False]['text':'  Send two requests','line_number':177,'multiline':False]['text':'  Bind server allowing it to receive messages','line_number':181,'multiline':False]['text':'  Read the two messages and send them back as is','line_number':184,'multiline':False]['text':'  Read the expected correlated reply. As the ZMQ_REQ_CORRELATE is active,','line_number':188,'multiline':False]['text':'  the expected answer is "TO_BE_ANSWERED", not "TO_BE_DISCARDED".','line_number':189,'multiline':False]