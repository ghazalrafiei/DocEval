['text':' TODO: wait for support for recursive types','line_number':63,'multiline':False]
['text':' Mandatory keys','line_number':66,'multiline':False]
['text':' Mandatory + optional keys','line_number':72,'multiline':False]
['text':' Only `str` elements are usable as indexing aliases,','line_number':74,'multiline':False]
['text':' but `titles` can in principle accept any object','line_number':75,'multiline':False]
['text':' A protocol for anything with the dtype attribute','line_number':82,'multiline':False]
['text':' A subset of `npt.DTypeLike` that can be parametrized w.r.t. `np.generic`','line_number':89,'multiline':False]
['text':' Would create a dtype[np.void]','line_number':97,'multiline':False]
['text':' (flexible_dtype, itemsize)','line_number':99,'multiline':False]
['text':' (fixed_dtype, shape)','line_number':101,'multiline':False]
['text':' [(field_name, field_dtype, field_shape), ...]','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' The type here is quite broad because NumPy accepts quite a wide','line_number':105,'multiline':False]
['text':' range of inputs inside the list; see the tests for some','line_number':106,'multiline':False]
['text':' examples.','line_number':107,'multiline':False]
['text':' {'names': ..., 'formats': ..., 'offsets': ..., 'titles': ...,','line_number':109,'multiline':False]
['text':'  'itemsize': ...}','line_number':110,'multiline':False]
['text':' (base_dtype, new_dtype)','line_number':112,'multiline':False]
['text':' Anything that can be coerced into numpy.dtype.','line_number':116,'multiline':False]
['text':' Reference: https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html','line_number':117,'multiline':False]
['text':' default data type (float64)','line_number':120,'multiline':False]
['text':' array-scalar types and generic types','line_number':122,'multiline':False]
['text':' NOTE: We're stuck with `type[Any]` due to object dtypes','line_number':123,'multiline':False]
['text':' anything with a dtype attribute','line_number':124,'multiline':False]
['text':' character codes, type strings or comma-separated fields, e.g., 'float64'','line_number':126,'multiline':False]
['text':' NOTE: while it is possible to provide the dtype as a dict of','line_number':131,'multiline':False]
['text':' dtype-like objects (e.g. `{'field1': ..., 'field2': ..., ...}`),','line_number':132,'multiline':False]
['text':' this syntax is officially discourged and','line_number':133,'multiline':False]
['text':' therefore not included in the Union defining `DTypeLike`.','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' See https://github.com/numpy/numpy/issues/16891 for more details.','line_number':136,'multiline':False]
['text':' Aliases for commonly used dtype-like objects.','line_number':138,'multiline':False]
['text':' Note that the precision of `np.number` subclasses is ignored herein.','line_number':139,'multiline':False]
