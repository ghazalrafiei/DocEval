['text':'!/usr/bin/env python3','line_number':1,'multiline':False]
['text':' The environment provided by auxfuncs.py is needed for some calls to eval.','line_number':156,'multiline':False]
['text':' As the needed functions cannot be determined by static inspection of the','line_number':157,'multiline':False]
['text':' code, it is safest to use import * pending a major refactoring of f2py.','line_number':158,'multiline':False]
['text':' Global flags:','line_number':164,'multiline':False]
['text':' Ignore `!' comments unless line[0]=='!'','line_number':165,'multiline':False]
['text':' 'fix','free'','line_number':166,'multiline':False]
['text':' Be verbose if 0 (Obsolete: not used any more)','line_number':167,'multiline':False]
['text':' Be quiet if 0, extra verbose if > 1.','line_number':168,'multiline':False]
['text':' for old F77 programs without 'program' statement','line_number':172,'multiline':False]
['text':' Global variables','line_number':177,'multiline':False]
['text':' flags','line_number':206,'multiline':False]
['text':' variables','line_number':218,'multiline':False]
['text':' Extensions','line_number':296,'multiline':False]
['text':' Reads in the entire file. Robust detection of encoding.','line_number':309,'multiline':False]
['text':' Correctly handles comments or late stage unicode characters','line_number':310,'multiline':False]
['text':' gh-22871','line_number':311,'multiline':False]
['text':' hint: install charset_normalizer for correct encoding handling','line_number':315,'multiline':False]
['text':' No need to read the whole file for trying with startswith','line_number':316,'multiline':False]
['text':' Fallback, without charset_normalizer','line_number':327,'multiline':False]
['text':' f90 allows both fixed and free format, assuming fixed unless','line_number':334,'multiline':False]
['text':' signs of free format are detected.','line_number':335,'multiline':False]
['text':' the number of non-comment lines to scan for hints','line_number':341,'multiline':False]
['text':' Read fortran (77,90) code','line_number':357,'multiline':False]
['text':' cont: set to True when the content of the last line read','line_number':374,'multiline':False]
['text':' indicates statement continuation','line_number':375,'multiline':False]
['text':' Get rid of newline characters','line_number':423,'multiline':False]
['text':' f2py directive','line_number':431,'multiline':False]
['text':' Skip empty line','line_number':433,'multiline':False]
['text':' In free form, a statement continues in the next line','line_number':435,'multiline':False]
['text':' that is not a comment line [3.3.2.4^1], lines with','line_number':436,'multiline':False]
['text':' blanks are comment lines [3.3.2.3^1]. Hence, the','line_number':437,'multiline':False]
['text':' line continuation flag must retain its state.','line_number':438,'multiline':False]
['text':' In fixed form, statement continuation is determined','line_number':441,'multiline':False]
['text':' by a non-blank character at the 6-th position. Empty','line_number':442,'multiline':False]
['text':' line indicates a start of a new statement','line_number':443,'multiline':False]
['text':' [3.3.3.3^1]. Hence, the line continuation flag must','line_number':444,'multiline':False]
['text':' be reset.','line_number':445,'multiline':False]
['text':' f2py directive','line_number':450,'multiline':False]
['text':' Skip comment line','line_number':452,'multiline':False]
['text':' Continuation of a previous line','line_number':464,'multiline':False]
['text':' F90 continuation','line_number':470,'multiline':False]
['text':' Continuation follows ..','line_number':473,'multiline':False]
['text':' clean up line beginning from possible digits.','line_number':479,'multiline':False]
['text':' clean up line beginning from possible digits.','line_number':489,'multiline':False]
['text':' Continuation follows ..','line_number':513,'multiline':False]
['text':' Crack line','line_number':586,'multiline':False]
['text':'#','line_number':590,'multiline':False]
['text':'','line_number':596,'multiline':False]
['text':' modulepattern=re.compile(beforethisafter%('[a-z\s]*?','module','module','.*'),re.I),'begin'','line_number':601,'multiline':False]
['text':'','line_number':602,'multiline':False]
['text':' block, the Fortran 2008 construct needs special handling in the rest of the file','line_number':615,'multiline':False]
['text':'','line_number':620,'multiline':False]
['text':' Non-fortran and f2py-specific statements','line_number':661,'multiline':False]
['text':'#','line_number':666,'multiline':False]
['text':' XXX: non-zero reset values need testing','line_number':715,'multiline':False]
['text':' split line on unquoted semicolons','line_number':717,'multiline':False]
['text':' end interface','line_number':753,'multiline':False]
['text':' end module','line_number':757,'multiline':False]
['text':' removes whitespace','line_number':960,'multiline':False]
['text':' Remove the 'bind' construct from the line.','line_number':975,'multiline':False]
['text':' Crack line => block,name,args,result','line_number':1030,'multiline':False]
['text':' end of crack line => block,name,args,result','line_number':1065,'multiline':False]
['text':' Create new block(s)','line_number':1086,'multiline':False]
['text':' end of creation','line_number':1147,'multiline':False]
['text':' set parents variables','line_number':1151,'multiline':False]
['text':' set global attributes','line_number':1161,'multiline':False]
['text':' name is fortran name','line_number':1162,'multiline':False]
['text':' return type','line_number':1175,'multiline':False]
['text':' if groupcounter>1: # name is interfaced','line_number':1180,'multiline':False]
['text':' end routine','line_number':1196,'multiline':False]
['text':' end interface','line_number':1200,'multiline':False]
['text':' fixes ticket 1693','line_number':1271,'multiline':False]
['text':' XXX: subsequent init expressions may get wrong values.','line_number':1448,'multiline':False]
['text':' Ignoring since data statements are irrelevant for','line_number':1449,'multiline':False]
['text':' wrapping.','line_number':1450,'multiline':False]
['text':' Fixes gh-24746 pyf generation','line_number':1453,'multiline':False]
['text':' XXX: This essentially ignores the value for generating the pyf which is fine:','line_number':1454,'multiline':False]
['text':' integer dimension(3) :: mytab','line_number':1455,'multiline':False]
['text':' common /mycom/ mytab','line_number':1456,'multiline':False]
['text':' Since in any case it is initialized in the Fortran code','line_number':1457,'multiline':False]
['text':' gh-24746','line_number':1467,'multiline':False]
['text':' Runs only if above code fails. Fixes the line','line_number':1468,'multiline':False]
['text':' DATA IVAR1, IVAR2, IVAR3, IVAR4, EVAR5 /4*0,0.0D0/','line_number':1469,'multiline':False]
['text':' by expanding to ['0', '0', '0', '0', '0.0d0']','line_number':1470,'multiline':False]
['text':' if int(multiplier) fails','line_number':1478,'multiline':False]
['text':'####','line_number':1625,'multiline':False]
['text':' reset to non-backslash','line_number':1687,'multiline':False]
['text':' Clean up outer commas, whitespace and undesired chars from attrspec','line_number':1703,'multiline':False]
['text':' used to specify the length of assumed length strings','line_number':1898,'multiline':False]
['text':'#####','line_number':1917,'multiline':False]
['text':' post processing','line_number':1981,'multiline':False]
['text':' XXX: apply mapping','line_number':2020,'multiline':False]
['text':' sort user routines to appear first','line_number':2078,'multiline':False]
['text':' and not userisdefined: # Build a __user__ module','line_number':2109,'multiline':False]
['text':' XXX: How to catch dependence cycles correctly?','line_number':2170,'multiline':False]
['text':' Add private members to skipfuncs for gh-23879','line_number':2256,'multiline':False]
['text':' e = a*x+b ; x in xset','line_number':2311,'multiline':False]
['text':' skip function calls having x as an argument, e.g max(1, x)','line_number':2344,'multiline':False]
['text':' computing another point to be sure that expression is linear','line_number':2368,'multiline':False]
['text':' The word_pattern may return values that are not','line_number':2392,'multiline':False]
['text':' only variables, they can be string content for instance','line_number':2393,'multiline':False]
['text':' XXX: return something sensible.','line_number':2435,'multiline':False]
['text':' XXX: This should be processor dependent','line_number':2446,'multiline':False]
['text':' XXX: This should be processor dependent','line_number':2462,'multiline':False]
['text':' This is only verified for 0 <= p <= 20, possibly good for p <= 33 and above','line_number':2463,'multiline':False]
['text':' TODO: test .eq., .neq., etc replacements.','line_number':2505,'multiline':False]
['text':' We need to act according to the data.','line_number':2512,'multiline':False]
['text':' The easy case is if the data has a kind-specifier,','line_number':2513,'multiline':False]
['text':' then we may easily remove those specifiers.','line_number':2514,'multiline':False]
['text':' However, it may be that the user uses other specifiers...(!)','line_number':2515,'multiline':False]
['text':' Remove kind specifier (including those defined','line_number':2519,'multiline':False]
['text':' by parameters)','line_number':2520,'multiline':False]
['text':' Again, this will be true if even a single specifier','line_number':2524,'multiline':False]
['text':' has been replaced, see comment above.','line_number':2525,'multiline':False]
['text':' In case there are additive parameters','line_number':2531,'multiline':False]
['text':' Currently this will not work for complex numbers.','line_number':2535,'multiline':False]
['text':' There is missing code for extracting a complex number,','line_number':2536,'multiline':False]
['text':' which may be defined in either of these:','line_number':2537,'multiline':False]
['text':'  a) (Re, Im)','line_number':2538,'multiline':False]
['text':'  b) cmplx(Re, Im)','line_number':2539,'multiline':False]
['text':'  c) dcmplx(Re, Im)','line_number':2540,'multiline':False]
['text':'  d) cmplx(Re, Im, <prec>)','line_number':2541,'multiline':False]
['text':' Handle _dp for gh-6624','line_number':2558,'multiline':False]
['text':' Also fixes gh-20460','line_number':2559,'multiline':False]
['text':' TODO: use symbolic from PR #19805','line_number':2594,'multiline':False]
['text':' At this point, params are read and interpreted, but','line_number':2639,'multiline':False]
['text':' the params used to define vars are not yet parsed','line_number':2640,'multiline':False]
['text':' Remove spaces so that 'in out' becomes 'inout'','line_number':2710,'multiline':False]
['text':' d is the expression inside the dimension declaration','line_number':2742,'multiline':False]
['text':' Evaluate `d` with respect to params','line_number':2743,'multiline':False]
['text':' the dimension for this variable depends on a','line_number':2745,'multiline':False]
['text':' previously defined parameter','line_number':2746,'multiline':False]
['text':' e.g. dimension(5:*)','line_number':2759,'multiline':False]
['text':' find variables v that define d as a linear','line_number':2768,'multiline':False]
['text':' function, `d == a * v + b`, and store','line_number':2769,'multiline':False]
['text':' coefficients a and b for further analysis.','line_number':2770,'multiline':False]
['text':' d is not a linear function of v,','line_number':2784,'multiline':False]
['text':' however, if v can be determined','line_number':2785,'multiline':False]
['text':' from d using other means,','line_number':2786,'multiline':False]
['text':' implement the corresponding','line_number':2787,'multiline':False]
['text':' solve_v function here.','line_number':2788,'multiline':False]
['text':' Note that dsize may contain symbols that are','line_number':2795,'multiline':False]
['text':' not defined in block['vars']. Here we assume','line_number':2796,'multiline':False]
['text':' these correspond to Fortran/C intrinsic','line_number':2797,'multiline':False]
['text':' functions or that are defined by other','line_number':2798,'multiline':False]
['text':' means. We'll let the compiler validate the','line_number':2799,'multiline':False]
['text':' definiteness of such symbols.','line_number':2800,'multiline':False]
['text':' n is an argument that has no checks defined. Here we','line_number':2805,'multiline':False]
['text':' generate some consistency checks for n, and when n is an','line_number':2806,'multiline':False]
['text':' array, generate checks for its dimensions and construct','line_number':2807,'multiline':False]
['text':' initialization expressions.','line_number':2808,'multiline':False]
['text':' n is array','line_number':2813,'multiline':False]
['text':' d is `:` or `*` or a constant expression','line_number':2817,'multiline':False]
['text':' n is an input array argument and its shape','line_number':2820,'multiline':False]
['text':' may define variables used in dimension','line_number':2821,'multiline':False]
['text':' specifications.','line_number':2822,'multiline':False]
['text':' Skip a variable that','line_number':2834,'multiline':False]
['text':' - n depends on','line_number':2835,'multiline':False]
['text':' - has user-defined initialization expression','line_number':2836,'multiline':False]
['text':' - has user-defined dependencies','line_number':2837,'multiline':False]
['text':' v can be solved from d, hence, we','line_number':2840,'multiline':False]
['text':' make it an optional argument with','line_number':2841,'multiline':False]
['text':' initialization expression:','line_number':2842,'multiline':False]
['text':' n needs to be initialized before v. So,','line_number':2849,'multiline':False]
['text':' making v dependent on n and on any','line_number':2850,'multiline':False]
['text':' variables in solver or d.','line_number':2851,'multiline':False]
['text':' add check only when no','line_number':2854,'multiline':False]
['text':' user-specified checks exist','line_number':2855,'multiline':False]
['text':' d is a non-linear function on v,','line_number':2859,'multiline':False]
['text':' hence, v must be a required input','line_number':2860,'multiline':False]
['text':' argument that n will depend on','line_number':2861,'multiline':False]
['text':' v needs to be initialized before n','line_number':2867,'multiline':False]
['text':' extend v dependencies with ones specified in attrspec','line_number':2879,'multiline':False]
['text':' n is block name','line_number':2923,'multiline':False]
['text':' This is an array parameter.','line_number':3027,'multiline':False]
['text':' First, we parse the dimension information','line_number':3028,'multiline':False]
['text':' e.g. dimension(2) or dimension(-1:1)','line_number':3033,'multiline':False]
['text':' now, dimrange is a list of 1 or 2 elements','line_number':3035,'multiline':False]
['text':' Parse parameter value','line_number':3047,'multiline':False]
['text':' this dimension expression is an array','line_number':3120,'multiline':False]
['text':' this dimension expression is also a parameter;','line_number':3123,'multiline':False]
['text':' parse it recursively','line_number':3124,'multiline':False]
['text':' `a` is an expression','line_number':3145,'multiline':False]
['text':' in parenthesis','line_number':3248,'multiline':False]
['text':'#####','line_number':3267,'multiline':False]
['text':' 1) skip declaring a variable that name matches with','line_number':3441,'multiline':False]
['text':'    subroutine name','line_number':3442,'multiline':False]
['text':' 2) skip declaring function when its type is','line_number':3443,'multiline':False]
['text':'    declared via `result` construction','line_number':3444,'multiline':False]
['text':' In Fortran, intent(in, out) are conflicting while','line_number':3481,'multiline':False]
['text':' intent(in, out) can be specified only via','line_number':3482,'multiline':False]
['text':' `!f2py intent(out) ..`.','line_number':3483,'multiline':False]
['text':' So, for the Fortran interface, we'll drop','line_number':3484,'multiline':False]
['text':' intent(out) to resolve the conflict.','line_number':3485,'multiline':False]
['text':'#####','line_number':3519,'multiline':False]
['text':' We expose post_processing_hooks as global variable so that','line_number':3522,'multiline':False]
['text':' user-libraries could register their own hooks to f2py.','line_number':3523,'multiline':False]
['text':' avoid infinite recursion','line_number':3595,'multiline':False]
['text':' replace all occurrences of `<varname>` with','line_number':3675,'multiline':False]
['text':' `&<varname>` in argument passing','line_number':3676,'multiline':False]
['text':' We report the replacements here so that downstream','line_number':3682,'multiline':False]
['text':' software could update their source codes','line_number':3683,'multiline':False]
['text':' accordingly. However, such updates are recommended only','line_number':3684,'multiline':False]
['text':' when BC with numpy 1.21 or older is not required.','line_number':3685,'multiline':False]
