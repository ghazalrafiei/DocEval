['text':' Test numeric types and object','line_number':83,'multiline':False]
['text':' Test strings','line_number':87,'multiline':False]
['text':' Test numeric types and object','line_number':127,'multiline':False]
['text':' Test strings','line_number':131,'multiline':False]
['text':' Regression test for gh-11121','line_number':174,'multiline':False]
['text':' While we cannot guarantee testing functions will always work for','line_number':185,'multiline':False]
['text':' subclasses, the tests should ideally rely only on subclasses having','line_number':186,'multiline':False]
['text':' comparison operators, not on them being able to store booleans','line_number':187,'multiline':False]
['text':' (which, e.g., astropy Quantity cannot usefully do). See gh-8452.','line_number':188,'multiline':False]
['text':' Based on issue #18992','line_number':232,'multiline':False]
['text':' gh-10081','line_number':361,'multiline':False]
['text':' not a datetime','line_number':372,'multiline':False]
['text':' not a timedelta','line_number':376,'multiline':False]
['text':' gh-12942','line_number':423,'multiline':False]
['text':' Note that in the course of time we ended up with','line_number':436,'multiline':False]
['text':'     `abs(x - y) < 1.5 * 10**(-decimal)`','line_number':437,'multiline':False]
['text':' instead of the previously documented','line_number':438,'multiline':False]
['text':'     `abs(x - y) < 0.5 * 10**(-decimal)`','line_number':439,'multiline':False]
['text':' so this check serves to preserve the wrongness.','line_number':440,'multiline':False]
['text':' test scalars','line_number':442,'multiline':False]
['text':' test arrays','line_number':449,'multiline':False]
['text':' Test fully masked as well (see gh-11123).','line_number':550,'multiline':False]
['text':' While we cannot guarantee testing functions will always work for','line_number':569,'multiline':False]
['text':' subclasses, the tests should ideally rely only on subclasses having','line_number':570,'multiline':False]
['text':' comparison operators, not on them being able to store booleans','line_number':571,'multiline':False]
['text':' (which, e.g., astropy Quantity cannot usefully do). See gh-8452.','line_number':572,'multiline':False]
['text':' While we cannot guarantee testing functions will always work for','line_number':596,'multiline':False]
['text':' subclasses, the tests should ideally rely only on subclasses having','line_number':597,'multiline':False]
['text':' comparison operators, not on them being able to store booleans','line_number':598,'multiline':False]
['text':' (which, e.g., astropy Quantity cannot usefully do). See gh-8452.','line_number':599,'multiline':False]
['text':' Note that in the course of time we ended up with','line_number':620,'multiline':False]
['text':'     `abs(x - y) < 1.5 * 10**(-decimal)`','line_number':621,'multiline':False]
['text':' instead of the previously documented','line_number':622,'multiline':False]
['text':'     `abs(x - y) < 0.5 * 10**(-decimal)`','line_number':623,'multiline':False]
['text':' so this check serves to preserve the wrongness.','line_number':624,'multiline':False]
['text':' test scalars','line_number':626,'multiline':False]
['text':' test arrays','line_number':631,'multiline':False]
['text':' Test with a different amount of decimal digits','line_number':678,'multiline':False]
['text':' With the default value of decimal digits, only the 3rd element','line_number':691,'multiline':False]
['text':' differs. Note that we only check for the formatting of the arrays','line_number':692,'multiline':False]
['text':' themselves.','line_number':693,'multiline':False]
['text':' Check the error message when input includes inf','line_number':703,'multiline':False]
['text':' Check the error message when dividing by zero','line_number':714,'multiline':False]
['text':' While we cannot guarantee testing functions will always work for','line_number':743,'multiline':False]
['text':' subclasses, the tests should ideally rely only on subclasses having','line_number':744,'multiline':False]
['text':' comparison operators, not on them being able to store booleans','line_number':745,'multiline':False]
['text':' (which, e.g., astropy Quantity cannot usefully do). See gh-8452.','line_number':746,'multiline':False]
['text':' Check that the warnings state is unchanged','line_number':1019,'multiline':False]
['text':' Should raise a DeprecationWarning','line_number':1046,'multiline':False]
['text':' Should not raise:','line_number':1113,'multiline':False]
['text':' Should not raise:','line_number':1129,'multiline':False]
['text':' Make sure equal_nan default behavior remains unchanged. (All','line_number':1138,'multiline':False]
['text':' of these functions use assert_array_compare under the hood.)','line_number':1139,'multiline':False]
['text':' None of these should raise.','line_number':1140,'multiline':False]
['text':' see gh-18286','line_number':1157,'multiline':False]
['text':' Ensure to test for potential overflow in the case of:','line_number':1164,'multiline':False]
['text':'        x - y','line_number':1165,'multiline':False]
['text':' and','line_number':1166,'multiline':False]
['text':'        y - x','line_number':1167,'multiline':False]
['text':' The number of units of least precision','line_number':1189,'multiline':False]
['text':' In this case, use a few places above the lowest level (ie nulp=1)','line_number':1190,'multiline':False]
['text':' Addition','line_number':1196,'multiline':False]
['text':' Subtraction','line_number':1201,'multiline':False]
['text':' Ignore ULP differences between various NAN's','line_number':1223,'multiline':False]
['text':' Note that MIPS may reverse quiet and signaling nans','line_number':1224,'multiline':False]
['text':' so we use the builtin version as a base.','line_number':1225,'multiline':False]
['text':' nan payload on MIPS is all ones.','line_number':1228,'multiline':False]
['text':' Ignore ULP differences between various NAN's','line_number':1264,'multiline':False]
['text':' Note that MIPS may reverse quiet and signaling nans','line_number':1265,'multiline':False]
['text':' so we use the builtin version as a base.','line_number':1266,'multiline':False]
['text':' nan payload on MIPS is all ones.','line_number':1269,'multiline':False]
['text':' Ignore ULP differences between various NAN's','line_number':1305,'multiline':False]
['text':' Note that MIPS may reverse quiet and signaling nans','line_number':1306,'multiline':False]
['text':' so we use the builtin version as a base.','line_number':1307,'multiline':False]
['text':' nan payload on MIPS is all ones.','line_number':1310,'multiline':False]
['text':' The test condition needs to be at least a factor of sqrt(2) smaller','line_number':1326,'multiline':False]
['text':' because the real and imaginary parts both change','line_number':1327,'multiline':False]
['text':' The test condition needs to be at least a factor of sqrt(2) smaller','line_number':1351,'multiline':False]
['text':' because the real and imaginary parts both change','line_number':1352,'multiline':False]
['text':' Generate 1 + small deviation, check that adding eps gives a few UNL','line_number':1423,'multiline':False]
['text':' Generate 1 + small deviation, check that adding eps gives a few UNL','line_number':1430,'multiline':False]
['text':' Test that nan is 'far' from small, tiny, inf, max and min','line_number':1443,'multiline':False]
['text':' the lack of a __warningregistry__','line_number':1496,'multiline':False]
['text':' attribute means that no warning has','line_number':1497,'multiline':False]
['text':' occurred; this can be triggered in','line_number':1498,'multiline':False]
['text':' a parallel test scenario, while in','line_number':1499,'multiline':False]
['text':' a serial test scenario an initial','line_number':1500,'multiline':False]
['text':' warning (and therefore the attribute)','line_number':1501,'multiline':False]
['text':' are always created first','line_number':1502,'multiline':False]
['text':' Python 3 adds a 'version' entry to the registry,','line_number':1508,'multiline':False]
['text':' do not count it.','line_number':1509,'multiline':False]
['text':' assert_warn_len_equal is called under','line_number':1516,'multiline':False]
['text':' varying circumstances depending on serial','line_number':1517,'multiline':False]
['text':' vs. parallel test scenarios; this test','line_number':1518,'multiline':False]
['text':' simply aims to probe both code paths and','line_number':1519,'multiline':False]
['text':' check that no assertion is uncaught','line_number':1520,'multiline':False]
['text':' parallel scenario -- no warning issued yet','line_number':1522,'multiline':False]
['text':' serial test scenario -- the __warningregistry__','line_number':1531,'multiline':False]
['text':' attribute should be present','line_number':1532,'multiline':False]
['text':' Get this module, with warning registry empty','line_number':1544,'multiline':False]
['text':' will not have a __warningregistry__ unless warning has been','line_number':1549,'multiline':False]
['text':' raised in the module at some point','line_number':1550,'multiline':False]
['text':' Initial state of module, no warnings','line_number':1556,'multiline':False]
['text':' Without specified modules, don't clear warnings during context.','line_number':1563,'multiline':False]
['text':' catch_warnings doesn't make an entry for 'ignore'.','line_number':1564,'multiline':False]
['text':' Manually adding two warnings to the registry:','line_number':1570,'multiline':False]
['text':' Confirm that specifying module keeps old warning, does not add new','line_number':1574,'multiline':False]
['text':' Another warning, no module spec it clears up registry','line_number':1580,'multiline':False]
['text':' Initial state of module, no warnings','line_number':1588,'multiline':False]
['text':' Apply along axis is implemented in python; stacklevel=2 means','line_number':1593,'multiline':False]
['text':' we end up inside its module, not ours.','line_number':1594,'multiline':False]
['text':' Test module based warning suppression:','line_number':1600,'multiline':False]
['text':' suppress warning from other module (may have .pyc ending),','line_number':1604,'multiline':False]
['text':' if apply_along_axis is moved, had to be changed.','line_number':1605,'multiline':False]
['text':' Check that the suppression did test the file correctly (this module','line_number':1609,'multiline':False]
['text':' got filtered)','line_number':1610,'multiline':False]
['text':' Will have to be changed if apply_along_axis is moved:','line_number':1615,'multiline':False]
['text':' And test repeat works:','line_number':1620,'multiline':False]
['text':' Without specified modules','line_number':1626,'multiline':False]
['text':' Initial state of module, no warnings','line_number':1634,'multiline':False]
['text':' Test module based warning suppression:','line_number':1638,'multiline':False]
['text':' And test repeat works:','line_number':1648,'multiline':False]
['text':' Without specified modules','line_number':1654,'multiline':False]
['text':' should be supppressed','line_number':1671,'multiline':False]
['text':' Do it again, with the same context to see if some warnings survived:','line_number':1692,'multiline':False]
['text':' Test nested:','line_number':1705,'multiline':False]
['text':' Apply along axis is implemented in python; stacklevel=2 means','line_number':1718,'multiline':False]
['text':' we end up inside its module, not ours.','line_number':1719,'multiline':False]
['text':' Test can subclass and add default modules','line_number':1802,'multiline':False]
['text':' break the current cycle so that `self` can be freed','line_number':1857,'multiline':False]
['text':' but create a new one so that the garbage collector has more','line_number':1861,'multiline':False]
['text':' work to do.','line_number':1862,'multiline':False]
['text':' this will be unable to get a baseline empty garbage','line_number':1869,'multiline':False]
['text':' the above test is only necessary if the GC actually tried to free','line_number':1872,'multiline':False]
['text':' our object anyway, which python 2.7 does not.','line_number':1873,'multiline':False]
['text':' make sure that we stop creating reference cycles','line_number':1879,'multiline':False]
['text':' Test that keywords `x` and `y` have been renamed to `actual` and','line_number':1886,'multiline':False]
['text':' `desired`, respectively. These tests and use of `_rename_parameter`','line_number':1887,'multiline':False]
['text':' decorator can be removed before the release of NumPy 2.2.0.','line_number':1888,'multiline':False]
['text':' explicit linebreak to support Python 3.9','line_number':1905,'multiline':False]
