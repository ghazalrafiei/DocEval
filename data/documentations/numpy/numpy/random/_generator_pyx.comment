['text':'!python','line_number':1,'multiline':False]
['text':'cython: wraparound=False, nonecheck=False, boundscheck=False, cdivision=True, language_level=3, binding=True','line_number':2,'multiline':False]
['text':' We trick gcc into providing a specialized implementation for','line_number':67,'multiline':False]
['text':' the most common case, yielding a ~33% performance improvement.','line_number':68,'multiline':False]
['text':' Note that apparently, only one branch can ever be specialized.','line_number':69,'multiline':False]
['text':' Pickling support:','line_number':215,'multiline':False]
['text':' Requirements of __generator_ctor are (name, ctor)','line_number':226,'multiline':False]
['text':' Implementation detail: the old API used a masked method to generate','line_number':616,'multiline':False]
['text':' bounded uniform integers. Lemire's method is preferable since it is','line_number':617,'multiline':False]
['text':' faster. randomgen allows a choice, we will always use the faster one.','line_number':618,'multiline':False]
['text':' Interpret the uint32s as little-endian to convert them to bytes','line_number':676,'multiline':False]
['text':' consistently.','line_number':677,'multiline':False]
['text':' Format and Verify input','line_number':787,'multiline':False]
['text':' __index__ must return an integer by python rules.','line_number':792,'multiline':False]
['text':' `shape == None` means `shape == ()`, but with scalar unpacking at the','line_number':830,'multiline':False]
['text':' end','line_number':831,'multiline':False]
['text':' Actual sampling','line_number':840,'multiline':False]
['text':' searchsorted returns a scalar','line_number':847,'multiline':False]
['text':' This is a heuristic tuning. should be improvable','line_number':881,'multiline':False]
['text':' Tail shuffle size elements','line_number':887,'multiline':False]
['text':' Copy to allow potentially large array backing idx to be gc','line_number':893,'multiline':False]
['text':' Floyd's algorithm','line_number':896,'multiline':False]
['text':' smallest power of 2 larger than 1.2 * size','line_number':899,'multiline':False]
['text':' then val not in hash_set','line_number':910,'multiline':False]
['text':' we need to insert j instead','line_number':913,'multiline':False]
['text':' In most cases a scalar will have been made an array','line_number':924,'multiline':False]
['text':' Use samples as indices for a if a is array-like','line_number':927,'multiline':False]
['text':' If size == () then the user requested a 0-d array as opposed to','line_number':932,'multiline':False]
['text':' a scalar object when size is None. However a[idx] is always a','line_number':933,'multiline':False]
['text':' scalar and not an array. So this makes sure the result is an','line_number':934,'multiline':False]
['text':' array, taking into account that np.array(item) may not work','line_number':935,'multiline':False]
['text':' for object arrays.','line_number':936,'multiline':False]
['text':' asarray downcasts on 32-bit platforms, always safe','line_number':941,'multiline':False]
['text':' no-op on 64-bit platforms','line_number':942,'multiline':False]
['text':' needed to get around Pyrex's automatic reference-counting','line_number':1037,'multiline':False]
['text':' rules because EnsureArray steals a reference','line_number':1038,'multiline':False]
['text':' Complicated, continuous distributions:','line_number':1050,'multiline':False]
['text':' Complicated, discrete distributions:','line_number':2894,'multiline':False]
['text':' Uses a custom implementation since self._binomial is required','line_number':2982,'multiline':False]
['text':' Check that the choice of negative_binomial parameters won't result in a','line_number':3140,'multiline':False]
['text':' call to the poisson distribution function with a value of lam too large.','line_number':3141,'multiline':False]
['text':' Check that the choice of negative_binomial parameters won't result in a','line_number':3152,'multiline':False]
['text':' call to the poisson distribution function with a value of lam too large.','line_number':3153,'multiline':False]
['text':' Multivariate distributions:','line_number':3598,'multiline':False]
['text':' Check preconditions on arguments','line_number':3751,'multiline':False]
['text':' Compute shape of output and create a matrix of independent','line_number':3773,'multiline':False]
['text':' standard normally distributed random numbers. The matrix has rows','line_number':3774,'multiline':False]
['text':' with the same length as mean and as many rows are necessary to','line_number':3775,'multiline':False]
['text':' form a matrix of shape final_shape.','line_number':3776,'multiline':False]
['text':' Transform matrix of standard normals into matrix where each row','line_number':3781,'multiline':False]
['text':' contains multivariate normals with the desired covariance.','line_number':3782,'multiline':False]
['text':' Compute A such that dot(transpose(A),A) == cov.','line_number':3783,'multiline':False]
['text':' Then the matrix products of the rows of x and A has the desired','line_number':3784,'multiline':False]
['text':' covariance. Note that sqrt(s)*v where (u,s,v) is the singular value','line_number':3785,'multiline':False]
['text':' decomposition of cov is such an A.','line_number':3786,'multiline':False]
['text':'','line_number':3787,'multiline':False]
['text':' Also check that cov is positive-semidefinite. If so, the u.T and v','line_number':3788,'multiline':False]
['text':' matrices should be equal up to roundoff error if cov is','line_number':3789,'multiline':False]
['text':' symmetric and the singular value of the corresponding row is','line_number':3790,'multiline':False]
['text':' not zero. We continue to use the SVD rather than Cholesky in','line_number':3791,'multiline':False]
['text':' order to preserve current outputs. Note that symmetry has not','line_number':3792,'multiline':False]
['text':' been checked.','line_number':3793,'multiline':False]
['text':' GH10839, ensure double to make tol meaningful','line_number':3795,'multiline':False]
['text':' could call linalg.svd(hermitian=True), but that calculates a vh we don't need','line_number':3802,'multiline':False]
['text':' make sure check_valid is ignored when method == 'cholesky'','line_number':3808,'multiline':False]
['text':' since the decomposition will have failed if cov is not valid.','line_number':3809,'multiline':False]
['text':' if check_valid == 'ignore' we need to ensure that np.sqrt does not','line_number':3828,'multiline':False]
['text':' return a NaN if s is a very small negative number that is','line_number':3829,'multiline':False]
['text':' approximately zero or when the covariance is not positive-semidefinite','line_number':3830,'multiline':False]
['text':' Cython 0.29.20 would not correctly translate the range-based for','line_number':4000,'multiline':False]
['text':' loop to a C for loop','line_number':4001,'multiline':False]
['text':' for offset in range(<np.npy_intp>0, sz, d):','line_number':4002,'multiline':False]
['text':' When floating, but not float dtype, and close, improve the error','line_number':4006,'multiline':False]
['text':' 1.0001 works for float16 and float32','line_number':4007,'multiline':False]
['text':' vector','line_number':4023,'multiline':False]
['text':' This provides the offsets to use in the C-contig parr when','line_number':4025,'multiline':False]
['text':' broadcasting','line_number':4026,'multiline':False]
['text':' Validate size and the broadcast shape','line_number':4036,'multiline':False]
['text':' This test verifies that an axis with dim 1 in size has not','line_number':4041,'multiline':False]
['text':' been increased by broadcasting with the input','line_number':4042,'multiline':False]
['text':' Validation of colors, a 1-d sequence of nonnegative integers.','line_number':4224,'multiline':False]
['text':' The C code that implements the 'count' method will malloc an','line_number':4256,'multiline':False]
['text':' array of size total*sizeof(size_t). Here we ensure that that','line_number':4257,'multiline':False]
['text':' product does not overflow.','line_number':4258,'multiline':False]
['text':' Figure out the shape of the return array.','line_number':4269,'multiline':False]
['text':' One variate is a vector of length num_colors.','line_number':4281,'multiline':False]
['text':' =================','line_number':4379,'multiline':False]
['text':' Pure python algo','line_number':4380,'multiline':False]
['text':' =================','line_number':4381,'multiline':False]
['text':' alpha   = N.atleast_1d(alpha)','line_number':4382,'multiline':False]
['text':' k       = alpha.size','line_number':4383,'multiline':False]
['text':' if n == 1:','line_number':4385,'multiline':False]
['text':'     val = N.zeros(k)','line_number':4386,'multiline':False]
['text':'     for i in range(k):','line_number':4387,'multiline':False]
['text':'         val[i]   = sgamma(alpha[i], n)','line_number':4388,'multiline':False]
['text':'     val /= N.sum(val)','line_number':4389,'multiline':False]
['text':' else:','line_number':4390,'multiline':False]
['text':'     val = N.zeros((k, n))','line_number':4391,'multiline':False]
['text':'     for i in range(k):','line_number':4392,'multiline':False]
['text':'         val[i]   = sgamma(alpha[i], n)','line_number':4393,'multiline':False]
['text':'     val /= N.sum(val, axis = 0)','line_number':4394,'multiline':False]
['text':'     val = val.T','line_number':4395,'multiline':False]
['text':' return val','line_number':4396,'multiline':False]
['text':' Select one of the following two algorithms for the generation','line_number':4430,'multiline':False]
['text':'  of Dirichlet random variates (RVs)','line_number':4431,'multiline':False]
['text':'','line_number':4432,'multiline':False]
['text':' A) Small alpha case: Use the stick-breaking approach with beta','line_number':4433,'multiline':False]
['text':'    random variates (RVs).','line_number':4434,'multiline':False]
['text':' B) Standard case: Perform unit normalisation of a vector','line_number':4435,'multiline':False]
['text':'    of gamma random variates','line_number':4436,'multiline':False]
['text':'','line_number':4437,'multiline':False]
['text':' A) prevents NaNs resulting from 0/0 that may occur in B)','line_number':4438,'multiline':False]
['text':' when all values in the vector ':math:\\alpha' are smaller','line_number':4439,'multiline':False]
['text':' than 1, then there is a nonzero probability that all','line_number':4440,'multiline':False]
['text':' generated gamma RVs will be 0. When that happens, the','line_number':4441,'multiline':False]
['text':' normalization process ends up computing 0/0, giving nan. A)','line_number':4442,'multiline':False]
['text':' does not use divisions, so that a situation in which 0/0 has','line_number':4443,'multiline':False]
['text':' to be computed cannot occur. A) is slower than B) as','line_number':4444,'multiline':False]
['text':' generation of beta RVs is slower than generation of gamma','line_number':4445,'multiline':False]
['text':' RVs. A) is selected whenever `alpha.max() < t`, where `t <','line_number':4446,'multiline':False]
['text':' 1` is a threshold that controls the probability of','line_number':4447,'multiline':False]
['text':' generating a NaN value when B) is used. For a given','line_number':4448,'multiline':False]
['text':' threshold `t` this probability can be bounded by','line_number':4449,'multiline':False]
['text':' `gammainc(t, d)` where `gammainc` is the regularized','line_number':4450,'multiline':False]
['text':' incomplete gamma function and `d` is the smallest positive','line_number':4451,'multiline':False]
['text':' floating point number that can be represented with a given','line_number':4452,'multiline':False]
['text':' precision. For the chosen threshold `t=0.1` this probability','line_number':4453,'multiline':False]
['text':' is smaller than `1.8e-31` for double precision floating','line_number':4454,'multiline':False]
['text':' point numbers.','line_number':4455,'multiline':False]
['text':' Small alpha case: Use stick-breaking approach with beta','line_number':4458,'multiline':False]
['text':' random variates (RVs).','line_number':4459,'multiline':False]
['text':' alpha_csum_data will hold the cumulative sum, right to','line_number':4460,'multiline':False]
['text':' left, of alpha_arr.','line_number':4461,'multiline':False]
['text':' Use a numpy array for memory management only.  We could just as','line_number':4462,'multiline':False]
['text':' well have malloc'd alpha_csum_data.  alpha_arr is a C-contiguous','line_number':4463,'multiline':False]
['text':' double array, therefore so is alpha_csum_arr.','line_number':4464,'multiline':False]
['text':' If csum == 0, then all the values in alpha are 0, and there is','line_number':4472,'multiline':False]
['text':' nothing to do, because diric was created with np.zeros().','line_number':4473,'multiline':False]
['text':' v must be 1, so acc is now 0. All','line_number':4484,'multiline':False]
['text':' remaining elements will be left at 0.','line_number':4485,'multiline':False]
['text':' Standard case: Unit normalisation of a vector of gamma random','line_number':4490,'multiline':False]
['text':' variates','line_number':4491,'multiline':False]
['text':' Because we only execute this block if out is not','line_number':4619,'multiline':False]
['text':' contiguous, we know this call will always result in a','line_number':4620,'multiline':False]
['text':' copy of to_shuffle back to out. I.e. status will be 1.','line_number':4621,'multiline':False]
['text':' out is n-d with n > 1, but is either C- or F-contiguous,','line_number':4625,'multiline':False]
['text':' so we know out.ravel(order='A') is a view.','line_number':4626,'multiline':False]
['text':' out is 1-d','line_number':4629,'multiline':False]
['text':' Keep the GIL when shuffling an object array.','line_number':4645,'multiline':False]
['text':' out is not an object array, so we can release the GIL.','line_number':4654,'multiline':False]
['text':' Only call ndim on ndarrays, see GH 18142','line_number':4737,'multiline':False]
['text':' Fast, statically typed path: shuffle the underlying buffer.','line_number':4741,'multiline':False]
['text':' Only for non-empty, 1d objects of class ndarray (subclasses such','line_number':4742,'multiline':False]
['text':' as MaskedArrays may not support this approach).','line_number':4743,'multiline':False]
['text':' As the array x could contain python objects we use a buffer','line_number':4747,'multiline':False]
['text':' of bytes for the swaps to avoid leaving one of the objects','line_number':4748,'multiline':False]
['text':' within the buffer and erroneously decrementing it's refcount','line_number':4749,'multiline':False]
['text':' when the function exits.','line_number':4750,'multiline':False]
['text':' GC'd at function exit','line_number':4751,'multiline':False]
['text':' Same as above, but the GIL is released.','line_number':4758,'multiline':False]
['text':' shuffling is a no-op','line_number':4764,'multiline':False]
['text':' i == j is not needed and memcpy is undefined.','line_number':4773,'multiline':False]
['text':' Untyped path.','line_number':4779,'multiline':False]
['text':' See gh-18206. We may decide to deprecate here in the future.','line_number':4781,'multiline':False]
['text':' Cython does not add a level','line_number':4788,'multiline':False]
['text':' shuffle has fast-path for 1-d','line_number':4854,'multiline':False]
['text':' Return a copy if same memory','line_number':4856,'multiline':False]
['text':' Shuffle index array, dtype to ensure fast path','line_number':4862,'multiline':False]
['text':' We were passed a BitGenerator, so just wrap it up.','line_number':4951,'multiline':False]
['text':' Pass through a Generator.','line_number':4954,'multiline':False]
['text':' Otherwise we need to instantiate a new BitGenerator and Generator as','line_number':4956,'multiline':False]
['text':' normal.','line_number':4957,'multiline':False]
