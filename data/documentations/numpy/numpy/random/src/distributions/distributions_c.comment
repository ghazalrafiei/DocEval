['text':' Inline generators for internal use ','line_number':11,'multiline':True]
['text':' Random generators for external use ','line_number':23,'multiline':True]
['text':' Switch to 1.0 - U to avoid log(0.0), see GH 13361 ','line_number':49,'multiline':True]
['text':' 98.9% of the time we return here 1st try ','line_number':70,'multiline':True]
['text':' Switch to 1.0 - U to avoid log(0.0), see GH 13361 ','line_number':86,'multiline':True]
['text':' 98.9% of the time we return here 1st try ','line_number':107,'multiline':True]
['text':' r = e3n52sb8 ','line_number':144,'multiline':True]
['text':' 99.3% of the time return here ','line_number':154,'multiline':True]
['text':' Switch to 1.0 - U to avoid log(0.0), see GH 13361 ','line_number':157,'multiline':True]
['text':' r = n23sb8 ','line_number':186,'multiline':True]
['text':' # 99.3% of the time return here ','line_number':195,'multiline':True]
['text':' Switch to 1.0 - U to avoid log(0.0), see GH 13361 ','line_number':198,'multiline':True]
['text':' log(0.0) ok here ','line_number':259,'multiline':True]
['text':' logf(0.0) ok here ','line_number':305,'multiline':True]
['text':'
 * log-gamma function to support some of these distributions. The
 * algorithm comes from SPECFUN by Shanjie Zhang and Jianming Jin and their
 * book "Computation of Special Functions", 1996, John Wiley & Sons, Inc.
 *
 * If random_loggam(k+1) is being used to compute log(k!) for an integer k, consider
 * using logfactorial(k) instead.
 ','line_number':336,'multiline':True]
['text':' log(2 * M_PI) ','line_number':363,'multiline':True]
['text':'
double random_normal(bitgen_t *bitgen_state, double loc, double scale) {
  return loc + scale * random_gauss(bitgen_state);
}
','line_number':380,'multiline':True]
['text':'
 *  Note: random_beta assumes that a != 0 and b != 0.
 ','line_number':408,'multiline':True]
['text':'
       * When a and b are this small, the probability that the
       * sample would be a double precision float that is not
       * 0 or 1 is less than approx. 1e-100.  So we use the
       * proportion a/(a + b) and a single uniform sample to
       * generate the result.
       ','line_number':418,'multiline':True]
['text':' Use Johnk's algorithm ','line_number':429,'multiline':True]
['text':' Reject if both U and V are 0.0, which is approx 1 in 10^106 ','line_number':437,'multiline':True]
['text':' Reject U == 0.0 and call again to get next value ','line_number':496,'multiline':True]
['text':' Reject U == 1.0 and call again to get next value ','line_number':509,'multiline':True]
['text':' Reject U == 0.0 and call again to get next value ','line_number':520,'multiline':True]
['text':'
 * The transformed rejection method for generating Poisson random variables
 * W. Hoermann
 * Insurance: Mathematics and Economics 12, 39-45 (1993)
 ','line_number':558,'multiline':True]
['text':' log(V) == log(0.0) ok here ','line_number':587,'multiline':True]
['text':' if U==0.0 so that us==0.0, log is ok since always returns ','line_number':588,'multiline':True]
['text':' initialize ','line_number':620,'multiline':True]
['text':' sigh ... ','line_number':657,'multiline':True]
['text':' Reject if v==0.0 since previous cast is undefined ','line_number':681,'multiline':True]
['text':' Reject if v==0.0 since previous cast is undefined ','line_number':689,'multiline':True]
['text':' log(0.0) ok here ','line_number':719,'multiline':True]
['text':' Use a uniform for very small values of kappa ','line_number':864,'multiline':True]
['text':' with double precision rho is zero until 1.4e-8 ','line_number':867,'multiline':True]
['text':'
       * second order taylor expansion around kappa = 0
       * precise until relatively large kappas as second order is 0
       ','line_number':869,'multiline':True]
['text':' Path for 1e-5 <= kappa <= 1e6 ','line_number':876,'multiline':True]
['text':' Fallback to wrapped normal distribution for kappa > 1e6 ','line_number':881,'multiline':True]
['text':' Ensure result is within bounds ','line_number':883,'multiline':True]
['text':'
       * V==0.0 is ok here since Y >= 0 always leads
       * to accept, while Y < 0 always rejects
       ','line_number':900,'multiline':True]
['text':'
 * RAND_INT_TYPE is used to share integer generators with RandomState which
 * used long in place of int64_t. If changing a distribution that uses
 * RAND_INT_TYPE, then the original unmodified copy must be retained for
 * use in RandomState by copying to the legacy distributions source file.
 ','line_number':955,'multiline':True]
['text':' Still used but both generator and mtrand via legacy_random_geometric ','line_number':962,'multiline':True]
['text':'
   * The constant 9.223372036854776e+18 is the smallest double that is
   * larger than INT64_MAX.
   ','line_number':982,'multiline':True]
['text':'
     * The real result may be above what can be represented in a signed
     * long. Since this is a straightforward rejection algorithm, we can
     * just reject this value. This function then models a Zipf
     * distribution truncated to sys.maxint.
     ','line_number':1011,'multiline':True]
['text':' Smallest bit mask >= max ','line_number':1056,'multiline':True]
['text':' Search a random value in [0..mask] <= max ','line_number':1064,'multiline':True]
['text':' Bounded generators ','line_number':1075,'multiline':True]
['text':' Generate 16 bit random numbers using a 32 bit buffer. ','line_number':1087,'multiline':True]
['text':' Generate 8 bit random numbers using a 32 bit buffer. ','line_number':1101,'multiline':True]
['text':' Static `masked rejection` function called by random_bounded_uint64(...) ','line_number':1115,'multiline':True]
['text':' Static `masked rejection` function called by
 * random_buffered_bounded_uint32(...) ','line_number':1126,'multiline':True]
['text':'
   * The buffer and buffer count are not used here but are included to allow
   * this function to be templated with the similar uint8 and uint16
   * functions
   ','line_number':1131,'multiline':True]
['text':' Static `masked rejection` function called by
 * random_buffered_bounded_uint16(...) ','line_number':1145,'multiline':True]
['text':' Static `masked rejection` function called by
 * random_buffered_bounded_uint8(...) ','line_number':1158,'multiline':True]
['text':' Static `Lemire rejection` function called by random_bounded_uint64(...) ','line_number':1189,'multiline':True]
['text':'
   * Uses Lemire's algorithm - https://arxiv.org/abs/1805.10941
   *
   * Note: `rng` should not be 0xFFFFFFFFFFFFFFFF. When this happens `rng_excl`
   * becomes zero.
   ','line_number':1192,'multiline':True]
['text':' 128-bit uint available (e.g. GCC/clang). `m` is the __uint128_t scaled
   * integer. ','line_number':1203,'multiline':True]
['text':' Generate a scaled random number. ','line_number':1208,'multiline':True]
['text':' Rejection sampling to remove any bias. ','line_number':1211,'multiline':True]
['text':' `rng_excl` is a simple upper bound for `threshold`. ','line_number':1215,'multiline':True]
['text':' 128-bit uint NOT available (e.g. MSVS). `m1` is the upper 64-bits of the
   * scaled integer. ','line_number':1226,'multiline':True]
['text':' Rejection sampling to remove any bias. ','line_number':1234,'multiline':True]
['text':' The lower 64-bits of the mult. ','line_number':1235,'multiline':True]
['text':' `rng_excl` is a simple upper bound for `threshold`. ','line_number':1238,'multiline':True]
['text':' _WIN64 architecture. Use the __umulh intrinsic to calc `m1`. ','line_number':1248,'multiline':True]
['text':' 32-bit architecture. Emulate __umulh to calc `m1`. ','line_number':1251,'multiline':True]
['text':' Static `Lemire rejection` function called by
 * random_buffered_bounded_uint32(...) ','line_number':1273,'multiline':True]
['text':'
   * Uses Lemire's algorithm - https://arxiv.org/abs/1805.10941
   *
   * The buffer and buffer count are not used here but are included to allow
   * this function to be templated with the similar uint8 and uint16
   * functions
   *
   * Note: `rng` should not be 0xFFFFFFFF. When this happens `rng_excl` becomes
   * zero.
   ','line_number':1277,'multiline':True]
['text':' Generate a scaled random number. ','line_number':1294,'multiline':True]
['text':' Rejection sampling to remove any bias ','line_number':1297,'multiline':True]
['text':' `rng_excl` is a simple upper bound for `threshold`. ','line_number':1301,'multiline':True]
['text':' Static `Lemire rejection` function called by
 * random_buffered_bounded_uint16(...) ','line_number':1313,'multiline':True]
['text':'
   * Uses Lemire's algorithm - https://arxiv.org/abs/1805.10941
   *
   * Note: `rng` should not be 0xFFFF. When this happens `rng_excl` becomes
   * zero.
   ','line_number':1317,'multiline':True]
['text':' Generate a scaled random number. ','line_number':1330,'multiline':True]
['text':' Rejection sampling to remove any bias ','line_number':1333,'multiline':True]
['text':' `rng_excl` is a simple upper bound for `threshold`. ','line_number':1337,'multiline':True]
['text':' Static `Lemire rejection` function called by
 * random_buffered_bounded_uint8(...) ','line_number':1349,'multiline':True]
['text':'
   * Uses Lemire's algorithm - https://arxiv.org/abs/1805.10941
   *
   * Note: `rng` should not be 0xFF. When this happens `rng_excl` becomes
   * zero.
   ','line_number':1354,'multiline':True]
['text':' Generate a scaled random number. ','line_number':1368,'multiline':True]
['text':' Rejection sampling to remove any bias ','line_number':1371,'multiline':True]
['text':' `rng_excl` is a simple upper bound for `threshold`. ','line_number':1375,'multiline':True]
['text':'
 * Returns a single random npy_uint64 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1387,'multiline':True]
['text':' Call 32-bit generator if range in 32-bit. ','line_number':1396,'multiline':True]
['text':'
       * The 32-bit Lemire method does not handle rng=0xFFFFFFFF, so we'll
       * call next_uint32 directly.  This also works when use_masked is True,
       * so we handle both cases here.
       ','line_number':1398,'multiline':True]
['text':' Lemire64 doesn't support inclusive rng = 0xFFFFFFFFFFFFFFFF. ','line_number':1413,'multiline':True]
['text':'
 * Returns a single random npy_uint64 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1424,'multiline':True]
['text':'
   * Unused bcnt and buf are here only to allow templating with other uint
   * generators.
   ','line_number':1432,'multiline':True]
['text':' Lemire32 doesn't support inclusive rng = 0xFFFFFFFF. ','line_number':1439,'multiline':True]
['text':'
 * Returns a single random npy_uint16 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1451,'multiline':True]
['text':' Lemire16 doesn't support inclusive rng = 0xFFFF. ','line_number':1462,'multiline':True]
['text':'
 * Returns a single random npy_uint8 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1474,'multiline':True]
['text':' Lemire8 doesn't support inclusive rng = 0xFF. ','line_number':1485,'multiline':True]
['text':'
 * Fills an array with cnt random npy_uint64 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1504,'multiline':True]
['text':' Call 32-bit generator if range in 32-bit. ','line_number':1518,'multiline':True]
['text':'
     * The 32-bit Lemire method does not handle rng=0xFFFFFFFF, so we'll
     * call next_uint32 directly.  This also works when use_masked is True,
     * so we handle both cases here.
     ','line_number':1520,'multiline':True]
['text':' Smallest bit mask >= max ','line_number':1534,'multiline':True]
['text':' Lemire64 doesn't support rng = 0xFFFFFFFFFFFFFFFF. ','line_number':1549,'multiline':True]
['text':' Smallest bit mask >= max ','line_number':1555,'multiline':True]
['text':'
 * Fills an array with cnt random npy_uint32 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1569,'multiline':True]
['text':' Lemire32 doesn't support rng = 0xFFFFFFFF. ','line_number':1585,'multiline':True]
['text':' Smallest bit mask >= max ','line_number':1591,'multiline':True]
['text':'
 * Fills an array with cnt random npy_uint16 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1607,'multiline':True]
['text':' Lemire16 doesn't support rng = 0xFFFF. ','line_number':1623,'multiline':True]
['text':' Smallest bit mask >= max ','line_number':1629,'multiline':True]
['text':'
 * Fills an array with cnt random npy_uint8 between off and off + rng
 * inclusive. The numbers wrap if rng is sufficiently large.
 ','line_number':1645,'multiline':True]
['text':' Lemire8 doesn't support rng = 0xFF. ','line_number':1660,'multiline':True]
['text':' Smallest bit mask >= max ','line_number':1666,'multiline':True]
['text':'
 * Fills an array with cnt random npy_bool between off and off + rng
 * inclusive.
 ','line_number':1682,'multiline':True]
