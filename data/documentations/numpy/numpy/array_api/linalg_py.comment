['text':' Note: the inclusion of the upper keyword is different from','line_number':42,'multiline':False]
['text':' np.linalg.cholesky, which does not have it.','line_number':43,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':50,'multiline':False]
['text':' np.linalg.cholesky.','line_number':51,'multiline':False]
['text':' Note: cross is the numpy top-level namespace, not np.linalg','line_number':59,'multiline':False]
['text':' Note: this is different from np.cross(), which broadcasts','line_number':68,'multiline':False]
['text':' Note: this is different from np.cross(), which allows dimension 2','line_number':73,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':84,'multiline':False]
['text':' np.linalg.det.','line_number':85,'multiline':False]
['text':' Note: diagonal is the numpy top-level namespace, not np.linalg','line_number':90,'multiline':False]
['text':' Note: diagonal always operates on the last two axes, whereas np.diagonal','line_number':97,'multiline':False]
['text':' operates on the first two axes by default','line_number':98,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':108,'multiline':False]
['text':' np.linalg.eigh.','line_number':109,'multiline':False]
['text':' Note: the return type here is a namedtuple, which is different from','line_number':113,'multiline':False]
['text':' np.eigh, which only returns a tuple.','line_number':114,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':124,'multiline':False]
['text':' np.linalg.eigvalsh.','line_number':125,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':137,'multiline':False]
['text':' np.linalg.inv.','line_number':138,'multiline':False]
['text':' Note: matmul is the numpy top-level namespace but not in np.linalg','line_number':145,'multiline':False]
['text':' Note: the restriction to numeric dtypes only is different from','line_number':152,'multiline':False]
['text':' np.matmul.','line_number':153,'multiline':False]
['text':' Note: the name here is different from norm(). The array API norm is split','line_number':160,'multiline':False]
['text':' into matrix_norm and vector_norm().','line_number':161,'multiline':False]
['text':' The type for ord should be Optional[Union[int, float, Literal[np.inf,','line_number':163,'multiline':False]
['text':' -np.inf, 'fro', 'nuc']]], but Literal does not support floating-point','line_number':164,'multiline':False]
['text':' literals.','line_number':165,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':172,'multiline':False]
['text':' np.linalg.norm.','line_number':173,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':186,'multiline':False]
['text':' np.linalg.matrix_power.','line_number':187,'multiline':False]
['text':' np.matrix_power already checks if n is an integer','line_number':191,'multiline':False]
['text':' Note: the keyword argument name rtol is different from np.linalg.matrix_rank','line_number':194,'multiline':False]
['text':' Note: this is different from np.linalg.matrix_rank, which supports 1','line_number':201,'multiline':False]
['text':' dimensional arrays.','line_number':202,'multiline':False]
['text':' Note: this is different from np.linalg.matrix_rank, which does not multiply','line_number':211,'multiline':False]
['text':' the tolerance by the largest singular value.','line_number':212,'multiline':False]
['text':' Note: this function is new in the array API spec. Unlike transpose, it only','line_number':217,'multiline':False]
['text':' transposes the last two axes.','line_number':218,'multiline':False]
['text':' Note: outer is the numpy top-level namespace, not np.linalg','line_number':224,'multiline':False]
['text':' Note: the restriction to numeric dtypes only is different from','line_number':231,'multiline':False]
['text':' np.outer.','line_number':232,'multiline':False]
['text':' Note: the restriction to only 1-dim arrays is different from np.outer','line_number':236,'multiline':False]
['text':' Note: the keyword argument name rtol is different from np.linalg.pinv','line_number':242,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':249,'multiline':False]
['text':' np.linalg.pinv.','line_number':250,'multiline':False]
['text':' Note: this is different from np.linalg.pinv, which does not multiply the','line_number':254,'multiline':False]
['text':' default tolerance by max(M, N).','line_number':255,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':266,'multiline':False]
['text':' np.linalg.qr.','line_number':267,'multiline':False]
['text':' Note: the return type here is a namedtuple, which is different from','line_number':271,'multiline':False]
['text':' np.linalg.qr, which only returns a tuple.','line_number':272,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':281,'multiline':False]
['text':' np.linalg.slogdet.','line_number':282,'multiline':False]
['text':' Note: the return type here is a namedtuple, which is different from','line_number':286,'multiline':False]
['text':' np.linalg.slogdet, which only returns a tuple.','line_number':287,'multiline':False]
['text':' Note: unlike np.linalg.solve, the array API solve() only accepts x2 as a','line_number':290,'multiline':False]
['text':' vector when it is exactly 1-dimensional. All other cases treat x2 as a stack','line_number':291,'multiline':False]
['text':' of matrices. The np.linalg.solve behavior of allowing stacks of both','line_number':292,'multiline':False]
['text':' matrices and vectors is ambiguous c.f.','line_number':293,'multiline':False]
['text':' https://github.com/numpy/numpy/issues/15349 and','line_number':294,'multiline':False]
['text':' https://github.com/data-apis/array-api/issues/285.','line_number':295,'multiline':False]
['text':' To workaround this, the below is the code from np.linalg.solve except','line_number':297,'multiline':False]
['text':' only calling solve1 in the exactly 1D case.','line_number':298,'multiline':False]
['text':' This part is different from np.linalg.solve','line_number':312,'multiline':False]
['text':' This does nothing currently but is left in because it will be relevant','line_number':318,'multiline':False]
['text':' when complex dtype support is added to the spec in 2022.','line_number':319,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':333,'multiline':False]
['text':' np.linalg.solve.','line_number':334,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':346,'multiline':False]
['text':' np.linalg.svd.','line_number':347,'multiline':False]
['text':' Note: the return type here is a namedtuple, which is different from','line_number':351,'multiline':False]
['text':' np.svd, which only returns a tuple.','line_number':352,'multiline':False]
['text':' Note: svdvals is not in NumPy (but it is in SciPy). It is equivalent to','line_number':355,'multiline':False]
['text':' np.linalg.svd(compute_uv=False).','line_number':356,'multiline':False]
['text':' Note: tensordot is the numpy top-level namespace but not in np.linalg','line_number':362,'multiline':False]
['text':' Note: axes must be a tuple, unlike np.tensordot where it can be an array or array-like.','line_number':364,'multiline':False]
['text':' Note: the restriction to numeric dtypes only is different from','line_number':366,'multiline':False]
['text':' np.tensordot.','line_number':367,'multiline':False]
['text':' Note: trace is the numpy top-level namespace, not np.linalg','line_number':373,'multiline':False]
['text':' Note: trace() works the same as sum() and prod() (see','line_number':383,'multiline':False]
['text':' _statistical_functions.py)','line_number':384,'multiline':False]
['text':' Note: trace always operates on the last two axes, whereas np.trace','line_number':390,'multiline':False]
['text':' operates on the first two axes by default','line_number':391,'multiline':False]
['text':' Note: vecdot is not in NumPy','line_number':394,'multiline':False]
['text':' Note: the name here is different from norm(). The array API norm is split','line_number':412,'multiline':False]
['text':' into matrix_norm and vector_norm().','line_number':413,'multiline':False]
['text':' The type for ord should be Optional[Union[int, float, Literal[np.inf,','line_number':415,'multiline':False]
['text':' -np.inf]]] but Literal does not support floating-point literals.','line_number':416,'multiline':False]
['text':' Note: the restriction to floating-point dtypes only is different from','line_number':423,'multiline':False]
['text':' np.linalg.norm.','line_number':424,'multiline':False]
['text':' np.linalg.norm tries to do a matrix norm whenever axis is a 2-tuple or','line_number':428,'multiline':False]
['text':' when axis=None and the input is 2-D, so to force a vector norm, we make','line_number':429,'multiline':False]
['text':' it so the input is 1-D (for axis=None), or reshape so that norm is done','line_number':430,'multiline':False]
['text':' on a single dimension.','line_number':431,'multiline':False]
['text':' Note: np.linalg.norm() doesn't handle 0-D arrays','line_number':434,'multiline':False]
['text':' Note: The axis argument supports any number of axes, whereas','line_number':438,'multiline':False]
['text':' np.linalg.norm() only supports a single axis for vector norm.','line_number':439,'multiline':False]
['text':' We can't reuse np.linalg.norm(keepdims) because of the reshape hacks','line_number':452,'multiline':False]
['text':' above to avoid matrix norm logic.','line_number':453,'multiline':False]
