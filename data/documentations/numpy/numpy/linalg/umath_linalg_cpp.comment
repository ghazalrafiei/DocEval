['text':' -*- c -*- ','line_number':1,'multiline':True]
['text':'
 *****************************************************************************
 **                            INCLUDES                                     **
 *****************************************************************************
 ','line_number':3,'multiline':True]
['text':'
 ****************************************************************************
 *                        Debugging support                                 *
 ****************************************************************************
 ','line_number':32,'multiline':True]
['text':'
 *****************************************************************************
 *                    BLAS/LAPACK calling macros                             *
 *****************************************************************************
 ','line_number':71,'multiline':True]
['text':' typedef long int (*L_fp)(); ','line_number':83,'multiline':True]
['text':'
 *****************************************************************************
 **                      Some handy functions                               **
 *****************************************************************************
 ','line_number':406,'multiline':True]
['text':'
 *****************************************************************************
 **                      Some handy constants                               **
 *****************************************************************************
 ','line_number':431,'multiline':True]
['text':'
 *****************************************************************************
 **               Structs used for data rearrangement                       **
 *****************************************************************************
 ','line_number':526,'multiline':True]
['text':'
 * this struct contains information about how to linearize a matrix in a local
 * buffer so that it can be used by blas functions.  All strides are specified
 * in bytes and are converted to elements later in type specific functions.
 *
 * rows: number of rows in the matrix
 * columns: number of columns in the matrix
 * row_strides: the number bytes between consecutive rows.
 * column_strides: the number of bytes between consecutive columns.
 * output_lead_dim: BLAS/LAPACK-side leading dimension, in elements
 ','line_number':533,'multiline':True]
['text':'
 *****************************************************************************
 **                            Basics                                       **
 *****************************************************************************
 ','line_number':659,'multiline':True]
['text':'
 *****************************************************************************
 **                             DISPATCHER FUNCS                            **
 *****************************************************************************
 ','line_number':767,'multiline':True]
['text':'
 *****************************************************************************
 **                             HELPER FUNCS                                **
 *****************************************************************************
 ','line_number':810,'multiline':True]
['text':' rearranging of 2D matrices using blas ','line_number':842,'multiline':True]
['text':'
                 * Zero stride has undefined behavior in some BLAS
                 * implementations (e.g. OSX Accelerate), so do it
                 * manually
                 ','line_number':871,'multiline':True]
['text':'
                 * Zero stride has undefined behavior in some BLAS
                 * implementations (e.g. OSX Accelerate), so do it
                 * manually
                 ','line_number':917,'multiline':True]
['text':' identity square matrix generation ','line_number':970,'multiline':True]
['text':' in IEEE floating point, zeroes are represented as bitwise 0 ','line_number':976,'multiline':True]
['text':' lower/upper triangular matrix using blas (in place) ','line_number':986,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':1003,'multiline':True]
['text':' Determinants ','line_number':1004,'multiline':True]
['text':' As in the linalg package, the determinant is computed via LU factorization
 * using LAPACK.
 * slogdet computes sign + log(determinant).
 * det computes sign * exp(slogdet).
 ','line_number':1120,'multiline':True]
['text':' note: done in place ','line_number':1137,'multiline':True]
['text':' note: fortran uses 1 based indexing ','line_number':1142,'multiline':True]
['text':'
          if getrf fails, use 0 as sign and -inf as logdet
        ','line_number':1151,'multiline':True]
['text':' notes:
     *   matrix will need to be copied always, as factorization in lapack is
     *          made inplace
     *   matrix will need to be in column-major order, as expected by lapack
     *          code (fortran)
     *   always a square matrix
     *   need to allocate memory for both, matrix_buffer and pivot buffer
     ','line_number':1171,'multiline':True]
['text':' avoid empty malloc (buffers likely unused) and ensure m is `size_t` ','line_number':1181,'multiline':True]
['text':' swapped steps to get matrix in FORTRAN order ','line_number':1189,'multiline':True]
['text':' TODO: Requires use of new ufunc API to indicate error return ','line_number':1203,'multiline':True]
['text':' notes:
     *   matrix will need to be copied always, as factorization in lapack is
     *       made inplace
     *   matrix will need to be in column-major order, as expected by lapack
     *       code (fortran)
     *   always a square matrix
     *   need to allocate memory for both, matrix_buffer and pivot buffer
     ','line_number':1223,'multiline':True]
['text':' avoid empty malloc (buffers likely unused) and ensure m is `size_t` ','line_number':1233,'multiline':True]
['text':' swapped steps to get matrix in FORTRAN order ','line_number':1243,'multiline':True]
['text':' TODO: Requires use of new ufunc API to indicate error return ','line_number':1259,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':1268,'multiline':True]
['text':' Eigh family ','line_number':1269,'multiline':True]
['text':' matrix ','line_number':1273,'multiline':True]
['text':' eigenvalue vector ','line_number':1274,'multiline':True]
['text':' main work buffer ','line_number':1275,'multiline':True]
['text':' secondary work buffer (for complex versions) ','line_number':1276,'multiline':True]
['text':'
 * Initialize the parameters to use in for the lapack function _syevd
 * Handles buffer allocation
 ','line_number':1311,'multiline':True]
['text':' unused ','line_number':1339,'multiline':True]
['text':' unused ','line_number':1341,'multiline':True]
['text':' Work size query ','line_number':1346,'multiline':True]
['text':' something failed ','line_number':1380,'multiline':True]
['text':' Work size query ','line_number':1449,'multiline':True]
['text':' something failed ','line_number':1491,'multiline':True]
['text':'
 * (M, M)->(M,)(M, M)
 * dimensions[1] -> M
 * args[0] -> A[in]
 * args[1] -> W
 * args[2] -> A[out]
 ','line_number':1500,'multiline':True]
['text':' allocated memory in A and WORK ','line_number':1512,'multiline':True]
['text':' copy the matrix in ','line_number':1562,'multiline':True]
['text':' lapack ok, copy result out ','line_number':1566,'multiline':True]
['text':' lapack fail, set result to nan ','line_number':1577,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':1634,'multiline':True]
['text':' Solve family (includes inv) ','line_number':1635,'multiline':True]
['text':' A is (N, N) of base type ','line_number':1640,'multiline':True]
['text':' B is (N, NRHS) of base type ','line_number':1641,'multiline':True]
['text':' IPIV is (N) ','line_number':1642,'multiline':True]
['text':'
 * Initialize the parameters to use in for the lapack function _heev
 * Handles buffer allocation
 ','line_number':1699,'multiline':True]
['text':' memory block base is in A ','line_number':1742,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':1861,'multiline':True]
['text':' Cholesky decomposition ','line_number':1862,'multiline':True]
['text':' memory block base in A ','line_number':1947,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':1995,'multiline':True]
['text':' eig family  ','line_number':1996,'multiline':True]
['text':' RWORK in complex versions, REAL W buffer for (sd)geev','line_number':2001,'multiline':True]
['text':' REAL VL buffers for _geev where _ is s, d ','line_number':2003,'multiline':True]
['text':' REAL VR buffers for _geev where _ is s, d ','line_number':2004,'multiline':True]
['text':' final w ','line_number':2006,'multiline':True]
['text':' final vl ','line_number':2007,'multiline':True]
['text':' final vr ','line_number':2008,'multiline':True]
['text':' allocate data for known sizes (all but work) ','line_number':2116,'multiline':True]
['text':' Work size query ','line_number':2148,'multiline':True]
['text':'
 * make the complex eigenvectors from the real array produced by sgeev/zgeev.
 * c is the array where the results will be left.
 * r is the source array of reals produced by sgeev/zgeev
 * i is the eigenvalue imaginary part produced by sgeev/zgeev
 * n is so that the order of the matrix is n by n
 ','line_number':2222,'multiline':True]
['text':' eigenvalue was real, eigenvectors as well...  ','line_number':2240,'multiline':True]
['text':' eigenvalue was complex, generate a pair of eigenvectors ','line_number':2246,'multiline':True]
['text':' REAL versions of geev need the results to be translated
     * into complex versions. This is the way to deal with imaginary
     * results. In our gufuncs we will always return complex arrays!
     ','line_number':2260,'multiline':True]
['text':' handle the eigenvectors ','line_number':2266,'multiline':True]
['text':' actually RWORK ','line_number':2289,'multiline':True]
['text':' actually RWORK ','line_number':2304,'multiline':True]
['text':' Work size query ','line_number':2356,'multiline':True]
['text':' Fix a bug in lapack 3.0.0 ','line_number':2368,'multiline':True]
['text':' nothing to do here, complex versions are ready to copy out ','line_number':2395,'multiline':True]
['text':' copy the matrix in ','line_number':2466,'multiline':True]
['text':' geev failed ','line_number':2488,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':2529,'multiline':True]
['text':' singular value decomposition  ','line_number':2530,'multiline':True]
['text':' fix vt_column_count so that it is a valid lapack parameter (0 is not) ','line_number':2701,'multiline':True]
['text':' Work size query ','line_number':2717,'multiline':True]
['text':' Fix a bug in lapack 3.0.0 ','line_number':2729,'multiline':True]
['text':' fix vt_column_count so that it is a valid lapack parameter (0 is not) ','line_number':2838,'multiline':True]
['text':' Work size query ','line_number':2854,'multiline':True]
['text':' Fix a bug in lapack 3.0.0 ','line_number':2866,'multiline':True]
['text':' A and WORK contain allocated blocks ','line_number':2895,'multiline':True]
['text':' only the singular values are wanted ','line_number':2931,'multiline':True]
['text':' JOBZ == 'A' ','line_number':2938,'multiline':True]
['text':' copy the matrix in ','line_number':2955,'multiline':True]
['text':' Lapack has betrayed us and left these uninitialized,
                         * so produce an identity matrix for whichever of u
                         * and v is not empty.
                         ','line_number':2963,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':3025,'multiline':True]
['text':' qr (modes - r, raw) ','line_number':3026,'multiline':True]
['text':' compute optimal work size ','line_number':3130,'multiline':True]
['text':' compute optimal work size ','line_number':3204,'multiline':True]
['text':' A and WORK contain allocated blocks ','line_number':3246,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':3294,'multiline':True]
['text':' qr common code (modes - reduced and complete) ','line_number':3295,'multiline':True]
['text':' compute optimal work size ','line_number':3376,'multiline':True]
['text':' compute optimal work size ','line_number':3455,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':3492,'multiline':True]
['text':' qr (modes - reduced) ','line_number':3493,'multiline':True]
['text':' A and WORK contain allocated blocks ','line_number':3541,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':3589,'multiline':True]
['text':' qr (modes - complete) ','line_number':3590,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':3645,'multiline':True]
['text':' least squares ','line_number':3646,'multiline':True]
['text':' compute optimal work size ','line_number':3792,'multiline':True]
['text':' compute optimal work size ','line_number':3919,'multiline':True]
['text':' A and WORK contain allocated blocks ','line_number':3975,'multiline':True]
['text':'* Compute the squared l2 norm of a contiguous vector ','line_number':3981,'multiline':True]
['text':' Note that linalg.lstsq discards this when excess == 0 ','line_number':4045,'multiline':True]
['text':' Compute the residuals as the square sum of each column ','line_number':4047,'multiline':True]
['text':' Numpy and fortran floating types are the same size,
                         * so this cast is safe ','line_number':4053,'multiline':True]
['text':' Note that this is always discarded by linalg.lstsq ','line_number':4063,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':4081,'multiline':True]
['text':' gufunc registration  ','line_number':4082,'multiline':True]
['text':' There are problems with eig in complex single precision.
 * That kernel is disabled
 ','line_number':4140,'multiline':True]
['text':' The single precision functions are not used at all,
 * due to input data being promoted to double precision
 * in Python, so they are not implemented here.
 ','line_number':4151,'multiline':True]
['text':' second result is logdet, that will always be a REAL ','line_number':4203,'multiline':True]
['text':' A, tau ','line_number':4251,'multiline':True]
['text':' A, tau, q ','line_number':4257,'multiline':True]
['text':' A, tau, q ','line_number':4263,'multiline':True]
['text':'  A,           b,           rcond,      x,           resid,      rank,    s,        ','line_number':4269,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':4560,'multiline':True]
['text':' Module initialization stuff  ','line_number':4561,'multiline':True]
['text':' Sentinel ','line_number':4564,'multiline':True]
['text':' Load the ufunc operators into the module's namespace ','line_number':4608,'multiline':True]
