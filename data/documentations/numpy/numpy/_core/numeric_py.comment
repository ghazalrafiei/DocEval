['text':' needed instead of a 0 to get same result as zeros for string dtypes','line_number':125,'multiline':False]
['text':' TODO: this works around .astype(bool) not working properly (gh-9847)','line_number':477,'multiline':False]
['text':' nonzero does not behave well on 0d, so promote to 1d','line_number':598,'multiline':False]
['text':' then remove the added dimension','line_number':601,'multiline':False]
['text':' Move the axes to sum over to the end of "a"','line_number':1100,'multiline':False]
['text':' and to the front of "b"','line_number':1101,'multiline':False]
['text':' If `a` is empty, nothing matters.','line_number':1287,'multiline':False]
['text':' (original, result), (original, result)','line_number':1289,'multiline':False]
['text':' it's been removed','line_number':1385,'multiline':False]
['text':' Optimization to speed-up the most common cases.','line_number':1439,'multiline':False]
['text':' Going via an iterator directly is slower than via list comprehension.','line_number':1445,'multiline':False]
['text':' allow duck-array types if they define transpose','line_number':1509,'multiline':False]
['text':' Check axisa and axisb are within bounds','line_number':1658,'multiline':False]
['text':' Move working axis to the end of the shape','line_number':1662,'multiline':False]
['text':' Deprecated in NumPy 2.0, 2023-09-26','line_number':1670,'multiline':False]
['text':' Create the output array','line_number':1677,'multiline':False]
['text':' Check axisc is within bounds','line_number':1681,'multiline':False]
['text':' recast arrays as dtype','line_number':1686,'multiline':False]
['text':' create local aliases for readability','line_number':1690,'multiline':False]
['text':' a0 * b1 - a1 * b0','line_number':1706,'multiline':False]
['text':' cp0 = a1 * b2 - 0  (a2 = 0)','line_number':1712,'multiline':False]
['text':' cp1 = 0 - a0 * b2  (a2 = 0)','line_number':1713,'multiline':False]
['text':' cp2 = a0 * b1 - a1 * b0','line_number':1714,'multiline':False]
['text':' cp0 = a1 * b2 - a2 * b1','line_number':1723,'multiline':False]
['text':' cp1 = a2 * b0 - a0 * b2','line_number':1724,'multiline':False]
['text':' cp2 = a0 * b1 - a1 * b0','line_number':1725,'multiline':False]
['text':' cp0 = 0 - a2 * b1  (b2 = 0)','line_number':1737,'multiline':False]
['text':' cp1 = a2 * b0 - 0  (b2 = 0)','line_number':1738,'multiline':False]
['text':' cp2 = a0 * b1 - a1 * b0','line_number':1739,'multiline':False]
['text':' Ensure that num is a Python integer to avoid overflow or unwanted','line_number':2094,'multiline':False]
['text':' casts to floating point.','line_number':2095,'multiline':False]
['text':' See gh-8679: remove extra digit','line_number':2116,'multiline':False]
['text':' for numbers at boundaries.','line_number':2117,'multiline':False]
['text':' These are all essentially abbreviations','line_number':2187,'multiline':False]
['text':' These might wind up in a special abbreviations module','line_number':2188,'multiline':False]
['text':' Place val in all scalar tuples:','line_number':2193,'multiline':False]
['text':' Turn all but python scalars into arrays.','line_number':2409,'multiline':False]
['text':' Make sure y is an inexact type to avoid bad behavior on abs(MIN_INT).','line_number':2414,'multiline':False]
['text':' This will cause casting of x later. Also, make sure to allow subclasses','line_number':2415,'multiline':False]
['text':' (e.g., for numpy.ma).','line_number':2416,'multiline':False]
['text':' NOTE: We explicitly allow timedelta, which used to work. This could','line_number':2417,'multiline':False]
['text':'       possibly be deprecated. See also gh-18286.','line_number':2418,'multiline':False]
['text':'       timedelta works if `atol` is an integer or also a timedelta.','line_number':2419,'multiline':False]
['text':'       Although, the default tolerances are unlikely to be useful','line_number':2420,'multiline':False]
['text':' Flatten 0d arrays to scalars','line_number':2434,'multiline':False]
['text':' should use np.dtype.BoolDType, but as of writing','line_number':2442,'multiline':False]
['text':' that fails the reloading test.','line_number':2443,'multiline':False]
['text':' nan will compare equal so an array will compare equal to itself.','line_number':2526,'multiline':False]
['text':' Handling NaN values if equal_nan is True','line_number':2528,'multiline':False]
['text':' NaN's occur at different locations','line_number':2530,'multiline':False]
['text':' Shapes of a1, a2 and masks are guaranteed to be consistent by this point','line_number':2533,'multiline':False]
