['text':' NPY_FINLINE','line_number':4,'multiline':False]
['text':' npy_half_to_float','line_number':5,'multiline':False]
['text':'*
 * Old versions of MSVC causes ambiguous link errors when we deal with large SIMD kernels
 * which lead to break the build, probably related to the following bug:
 * https://developercommunity.visualstudio.com/content/problem/415095/internal-compiler-error-with-perfectly-forwarded-r.html
 ','line_number':7,'multiline':True]
['text':'
 * nomemoverlap - returns false if two strided arrays have an overlapping
 * region in memory. ip_size/op_size = size of the arrays which can be negative
 * indicating negative steps.
 ','line_number':17,'multiline':True]
['text':' returns true if two strided arrays have an overlapping region in memory','line_number':46,'multiline':False]
['text':' same as `nomemoverlap()` but requires array length and step sizes','line_number':47,'multiline':False]
['text':'
 * cutoff blocksize for pairwise summation
 * decreasing it decreases errors slightly as more pairs are summed but
 * also lowers performance, as the inner loop is unrolled eight times it is
 * effectively 16
 ','line_number':54,'multiline':True]
['text':'*begin repeat
 * Float types
 *  #type = npy_float, npy_double, npy_longdouble, npy_float#
 *  #dtype = npy_float, npy_double, npy_longdouble, npy_half#
 *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE, HALF#
 *  #c = f, , l, #
 *  #C = F, , L, #
 *  #trf = , , , npy_half_to_float#
 ','line_number':62,'multiline':True]
['text':'
 * Pairwise summation, rounding error O(lg n) instead of O(n).
 * The recursion depth is O(lg n) as well.
 * when updating also update similar complex floats summation
 ','line_number':72,'multiline':True]
['text':'
         * Start with -0 to preserve -0 values.  The reason is that summing
         * only -0 should return -0, but `0 + -0 == 0` while `-0 + -0 == -0`.
         ','line_number':82,'multiline':True]
['text':'
         * sum a block with 8 accumulators
         * 8 times unroll reduces blocksize to 16 and allows vectorization with
         * avx without changing summation ordering
         ','line_number':97,'multiline':True]
['text':' small blocksizes seems to mess with hardware prefetch ','line_number':112,'multiline':True]
['text':' accumulate now to avoid stack spills for single peel loop ','line_number':124,'multiline':True]
['text':' do non multiple of 8 rest ','line_number':128,'multiline':True]
['text':' divide by two but avoid non-multiples of unroll factor ','line_number':135,'multiline':True]
['text':'*end repeat*','line_number':144,'multiline':True]
['text':'*begin repeat
 * complex types
 * #TYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #ftype = npy_float, npy_double, npy_longdouble#
 * #c = f, , l#
 * #C = F, , L#
 * #SIMD = 1, 1, 0#
 ','line_number':146,'multiline':True]
['text':' similar to pairwise sum of real floats ','line_number':154,'multiline':True]
['text':'
         * sum a block with 8 accumulators
         * 8 times unroll reduces blocksize to 16 and allows vectorization with
         * avx without changing summation ordering
         ','line_number':175,'multiline':True]
['text':' small blocksizes seems to mess with hardware prefetch ','line_number':190,'multiline':True]
['text':' accumulate now to avoid stack spills for single peel loop ','line_number':202,'multiline':True]
['text':' do non multiple of 8 rest ','line_number':206,'multiline':True]
['text':' divide by two but avoid non-multiples of unroll factor ','line_number':214,'multiline':True]
['text':'*end repeat*','line_number':226,'multiline':True]
['text':' _NPY_UMATH_LOOPS_UTILS_H_','line_number':228,'multiline':False]
