['text':'
 * This file defines most of the machinery in order to wrap legacy style
 * ufunc loops into new style arraymethods.
 ','line_number':1,'multiline':True]
['text':' The legacy loop and additional user data: ','line_number':27,'multiline':True]
['text':' Whether to check for PyErr_Occurred(), must require GIL if used ','line_number':30,'multiline':True]
['text':' Use a free list, since we should normally only need one at a time ','line_number':35,'multiline':True]
['text':' no need for cloning (at least for now) ','line_number':72,'multiline':True]
['text':'
 * This is a thin wrapper around the legacy loop signature.
 ','line_number':81,'multiline':True]
['text':'
 * Signal that the old type-resolution function must be used to resolve
 * the descriptors (mainly/only used for datetimes due to the unit).
 *
 * ArrayMethod's are expected to implement this, but it is too tricky
 * to support properly.  So we simply set an error that should never be seen.
 ','line_number':98,'multiline':True]
['text':'
 * Much the same as the default type resolver, but tries a bit harder to
 * preserve metadata.
 ','line_number':119,'multiline':True]
['text':'
         * Could be a reduction, which requires `descr[0] is descr[2]`
         * (identity) at least currently. This is because `op[0] is op[2]`.
         * (If the output descriptor is not passed, the below works.)
         ','line_number':137,'multiline':True]
['text':' Same for the second one (accumulation is stricter) ','line_number':150,'multiline':True]
['text':' Preserve metadata from the first operand if same dtype ','line_number':169,'multiline':True]
['text':'
 * This function grabs the legacy inner-loop.  If this turns out to be slow
 * we could probably cache it (with some care).
 ','line_number':191,'multiline':True]
['text':' Note that `needs_api` is not reliable (it was in fact unused normally) ','line_number':219,'multiline':True]
['text':'
 * We can shave off a bit of time by just caching the initial and this is
 * trivial for all internal numeric types.  (Wrapped ufuncs never use
 * byte-swapping.)
 ','line_number':241,'multiline':True]
['text':'
 * The default `get_reduction_initial` attempts to look up the identity
 * from the calling ufunc.  This might fail, so we only call it when necessary.
 *
 * For internal number dtypes, we can easily cache it, so do so after the
 * first call by overriding the function with `copy_cache_initial`.
 * This path is not publicly available.  That could be added, and for a
 * custom initial getter it should be static/compile time data anyway.
 ','line_number':257,'multiline':True]
['text':' Impossible in NumPy 1.24;  guard in case it becomes possible. ','line_number':273,'multiline':True]
['text':' UFunc has no identity (should not happen) ','line_number':286,'multiline':True]
['text':'
         * This is a bit of a hack until we have truly loop specific
         * identities.  Python -1 cannot be cast to unsigned so convert
         * it to a NumPy scalar, but we use -1 for bitwise functions to
         * signal all 1s.
         * (A builtin identity would not overflow here, although we may
         * unnecessary convert 0 and 1.)
         ','line_number':292,'multiline':True]
['text':' Allows `sum([object()])` to work, but use 0 when empty. ','line_number':308,'multiline':True]
['text':' For numbers we can cache to avoid going via Python ints ','line_number':320,'multiline':True]
['text':' Reduction can use the initial value ','line_number':326,'multiline':True]
['text':'
 * Get the unbound ArrayMethod which wraps the instances of the ufunc.
 * Note that this function stores the result on the ufunc and then only
 * returns the same one.
 ','line_number':331,'multiline':True]
['text':'
     * Assume that we require the Python API when any of the (legacy) dtypes
     * flags it.
     ','line_number':344,'multiline':True]
['text':'
         * This is a logical ufunc, and the `??->?` loop`. It is always OK
         * to cast any input to bool, because that cast is defined by
         * truthiness.
         * This allows to ensure two things:
         * 1. `np.all`/`np.any` know that force casting the input is OK
         *    (they must do this since there are no `?l->?`, etc. loops)
         * 2. The logical functions automatically work for any DType
         *    implementing a cast to boolean.
         ','line_number':357,'multiline':True]
['text':'
         * TODO: For object, "reorderable" is needed(?), because otherwise
         *       we disable multi-axis reductions `arr.sum(0, 1)`. But for
         *       `arr = array([["a", "b"], ["c", "d"]], dtype="object")`
         *       it isn't actually reorderable (order changes result).
         ','line_number':378,'multiline':True]
['text':' We cannot use the default descriptor resolver. ','line_number':408,'multiline':True]
