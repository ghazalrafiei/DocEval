['text':'@targets
 ** $maxopt baseline
 ** sse2 sse41
 ** vsx2
 ** neon asimd
 ** vx vxe
 *','line_number':1,'multiline':True]
['text':'*
 * Force use SSE only on x86, even if AVX2 or AVX512F are enabled
 * through the baseline, since scatter(AVX512F) and gather very costly
 * to handle non-contiguous memory access comparing with SSE for
 * such small operations that this file covers.
','line_number':8,'multiline':True]
['text':'*********************************************************
 ** Scalars
 *********************************************************','line_number':19,'multiline':True]
['text':' add 0 to clear -0.0 ','line_number':28,'multiline':True]
['text':' !NPY_SIMD_F32','line_number':33,'multiline':False]
['text':' add 0 to clear -0.0 ','line_number':41,'multiline':True]
['text':' !NPY_SIMD_F64','line_number':46,'multiline':False]
['text':'*
 * MSVC(32-bit mode) requires a clarified contiguous loop
 * in order to use SSE, otherwise it uses a soft version of square root
 * that doesn't raise a domain error.
 ','line_number':47,'multiline':True]
['text':'*******************************************************************************
 ** Defining the SIMD kernels
 *******************************************************************************','line_number':83,'multiline':True]
['text':'* Notes:
 * - avoid the use of libmath to unify fp/domain errors
 *   for both scalars and vectors among all compilers/architectures.
 * - use intrinsic npyv_load_till_* instead of npyv_load_tillz_
 *   to fill the remind lanes with 1.0 to avoid divide by zero fp
 *   exception in reciprocal.
 ','line_number':86,'multiline':True]
['text':'*begin repeat
 * #TYPE = FLOAT, DOUBLE#
 * #sfx  = f32, f64#
 * #VCHK = NPY_SIMD_F32, NPY_SIMD_F64#
 ','line_number':96,'multiline':True]
['text':'*begin repeat1
 * #kind     = rint,  floor, ceil, trunc, sqrt, absolute, square, reciprocal#
 * #intr     = rint,  floor, ceil, trunc, sqrt, abs,      square, recip#
 * #repl_0w1 = 0*7, 1#
 ','line_number':102,'multiline':True]
['text':'*begin repeat2
 * #STYPE  = CONTIG, NCONTIG, CONTIG,  NCONTIG#
 * #DTYPE  = CONTIG, CONTIG,  NCONTIG, NCONTIG#
 * #unroll = 4,      4,       2,       2#
 ','line_number':107,'multiline':True]
['text':' unrolled iterations','line_number':121,'multiline':False]
['text':'*begin repeat3
         * #N  = 0, 1, 2, 3#
         ','line_number':123,'multiline':True]
['text':'*end repeat3*','line_number':134,'multiline':True]
['text':'*begin repeat3
         * #N  = 0, 1, 2, 3#
         ','line_number':135,'multiline':True]
['text':'*end repeat3*','line_number':145,'multiline':True]
['text':' vector-sized iterations','line_number':148,'multiline':False]
['text':' last partial iteration, if needed','line_number':163,'multiline':False]
['text':'*end repeat2*','line_number':188,'multiline':True]
['text':'*end repeat1*','line_number':189,'multiline':True]
['text':' @VCHK@','line_number':190,'multiline':False]
['text':'*end repeat*','line_number':191,'multiline':True]
['text':'*******************************************************************************
 ** Defining ufunc inner functions
 *******************************************************************************','line_number':193,'multiline':True]
['text':'*begin repeat
 * #TYPE = FLOAT, DOUBLE#
 * #sfx  = f32, f64#
 * #VCHK = NPY_SIMD_F32, NPY_SIMD_F64#
 ','line_number':196,'multiline':True]
['text':'*begin repeat1
 * #kind  = rint, floor, ceil, trunc, sqrt, absolute, square, reciprocal#
 * #intr  = rint, floor, ceil, trunc, sqrt, abs,      square, recip#
 * #clear = 0,    0,     0,    0,     0,    1,        0,      0#
 ','line_number':201,'multiline':True]
['text':' @VCHK@','line_number':237,'multiline':False]
['text':' to guarantee the same precision and fp/domain errors for both scalars and vectors','line_number':240,'multiline':False]
['text':'*end repeat1*','line_number':254,'multiline':True]
['text':'*end repeat*','line_number':255,'multiline':True]
