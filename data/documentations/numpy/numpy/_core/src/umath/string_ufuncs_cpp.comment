['text':'
     * Ignore/"trim" trailing whitespace (and 0s).  Note that this function
     * does not support unicode whitespace (and never has).
     ','line_number':53,'multiline':True]
['text':'
 * Helper to fixup start/end slice values.
 *
 * This function is taken from CPython's unicode module
 * (https://github.com/python/cpython/blob/0b718e6407da65b838576a2459d630824ca62155/Objects/bytes_methods.c#L495)
 * in order to remain compatible with how CPython handles
 * start/end arguments to str function like find/rfind etc.
 ','line_number':68,'multiline':True]
['text':'
 * Compare two strings of different length.  Note that either string may be
 * zero padded (trailing zeros are ignored in other words, the shorter word
 * is always padded with zeros).
 ','line_number':133,'multiline':True]
['text':'
         * TODO: `memcmp` makes things 2x faster for longer words that match
         *       exactly, but at least 2x slower for short or mismatching ones.
         ','line_number':151,'multiline':True]
['text':'
 * Count the number of occurences of buf2 in buf1 between
 * start (inclusive) and end (exclusive)
 ','line_number':391,'multiline':True]
['text':'
 * Helper for templating, avoids warnings about uncovered switch paths.
 ','line_number':420,'multiline':True]
['text':'
     * Note, fetching `elsize` from the descriptor is OK even without the GIL,
     * however it may be that this should be moved into `auxdata` eventually,
     * which may also be slightly faster/cleaner (but more involved).
     ','line_number':449,'multiline':True]
['text':' Resolve descriptors & promoter functions ','line_number':1019,'multiline':True]
['text':'
 * Machinery to add the string loops to the existing ufuncs.
 ','line_number':1126,'multiline':True]
['text':'
 * This function replaces the strided loop with the passed in one,
 * and registers it with the given ufunc.
 ','line_number':1150,'multiline':True]
['text':' We start with the string loops: ','line_number':1208,'multiline':True]
['text':'
     * We only have one loop right now, the strided one.  The default type
     * resolver ensures native byte order/canonical representation.
     ','line_number':1210,'multiline':True]
['text':' All String loops ','line_number':1227,'multiline':True]
['text':' All Unicode loops ','line_number':1233,'multiline':True]
['text':' We use NPY_OBJECT as a sentinel value here, and this will be replaced by the','line_number':1348,'multiline':False]
['text':' corresponding string dtype (either NPY_STRING or NPY_UNICODE).','line_number':1349,'multiline':False]
['text':' caller ensures this ','line_number':1595,'multiline':True]
['text':'
 * This function is used for `compare_chararrays` and currently also void
 * comparisons (unstructured voids).  The first could probably be deprecated
 * and removed but is used by `np.char.chararray` the latter should also be
 * moved to the ufunc probably (removing the need for manual looping).
 *
 * The `rstrip` mechanism is presumably for some fortran compat, but the
 * question is whether it would not be better to have/use `rstrip` on such
 * an array first...
 *
 * NOTE: This function is also used for unstructured voids, this works because
 *       `npy_byte` is correct.
 ','line_number':1601,'multiline':True]
['text':'
         * Comparison between Bytes and Unicode is not defined in Py3K;
         * we follow.
         * TODO: This makes no sense at all for `compare_chararrays`, kept
         *       only under the assumption that we are more likely to deprecate
         *       than fix it to begin with.
         ','line_number':1641,'multiline':True]
['text':' TODO: ensuring native byte order is not really necessary for == and != ','line_number':1654,'multiline':True]
['text':'
     * Create the iterator:
     ','line_number':1664,'multiline':True]
['text':'
     * Prepare the inner-loop and execute it (we only need descriptors to be
     * passed in).
     ','line_number':1686,'multiline':True]
['text':' NOTE: Also used for VOID, so can be STRING, UNICODE, or VOID: ','line_number':1697,'multiline':True]
['text':' We know the loop cannot fail ','line_number':1717,'multiline':True]
