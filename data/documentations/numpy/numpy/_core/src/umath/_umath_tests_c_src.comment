['text':' -*- c -*- ','line_number':1,'multiline':True]
['text':'
 *****************************************************************************
 **                            INCLUDES                                     **
 *****************************************************************************
 ','line_number':3,'multiline':True]
['text':'
 *****************************************************************************
 **                            BASICS                                       **
 *****************************************************************************
 ','line_number':29,'multiline':True]
['text':'
 *****************************************************************************
 **                             UFUNC LOOPS                                 **
 *****************************************************************************
 ','line_number':64,'multiline':True]
['text':'*begin repeat

   #TYPE=INTP,DOUBLE#
   #typ=npy_intp,npy_double#
','line_number':85,'multiline':True]
['text':'
 *  This implements the function
 *        out[n] = sum_i { in1[n, i] * in2[n, i] }.
 ','line_number':91,'multiline':True]
['text':'*end repeat*','line_number':115,'multiline':True]
['text':'*begin repeat

   #TYPE=INTP,DOUBLE#
   #typ=npy_intp,npy_double#
','line_number':119,'multiline':True]
['text':'
 *  This implements the function
 *        out[n] = sum_i { in1[n, i] * in2[n, i] * in3[n, i] }.
 ','line_number':126,'multiline':True]
['text':'*end repeat*','line_number':151,'multiline':True]
['text':' for use with matrix_multiply code, but different signature ','line_number':154,'multiline':True]
['text':'*begin repeat

   #TYPE=FLOAT,DOUBLE,INTP#
   #typ=npy_float,npy_double,npy_intp#
','line_number':157,'multiline':True]
['text':'
 *  This implements the function
 *        out[k, m, p] = sum_n { in1[k, m, n] * in2[k, n, p] }.
 ','line_number':163,'multiline':True]
['text':' no BLAS is available ','line_number':171,'multiline':True]
['text':' No operand, need to zero the output ','line_number':184,'multiline':True]
['text':'*end repeat*','line_number':221,'multiline':True]
['text':'*begin repeat

   #TYPE=INTP,DOUBLE#
   #typ=npy_intp, npy_double#
','line_number':225,'multiline':True]
['text':'
 *  This implements the cross product:
 *        out[n, 0] = in1[n, 1]*in2[n, 2] - in1[n, 2]*in2[n, 1]
 *        out[n, 1] = in1[n, 2]*in2[n, 0] - in1[n, 0]*in2[n, 2]
 *        out[n, 2] = in1[n, 0]*in2[n, 1] - in1[n, 1]*in2[n, 0]
 ','line_number':231,'multiline':True]
['text':'*end repeat*','line_number':260,'multiline':True]
['text':'*begin repeat

   #TYPE=FLOAT,DOUBLE#
   #typ=npy_float,npy_double#
   #sqrt_func=sqrtf,sqrt#
','line_number':264,'multiline':True]
['text':'
 *  This implements the function
 *        out[j*(2*n-3-j)+k-1] = sum_d { (in1[j, d] - in1[k, d])^2 }
 *  with 0 < k < j < n, i.e. computes all unique pairwise euclidean distances.
 ','line_number':271,'multiline':True]
['text':'*end repeat*','line_number':318,'multiline':True]
['text':'
 *  This implements the function
 *        out[n] = sum_i^n in[i]
 ','line_number':322,'multiline':True]
['text':'*begin repeat

   #TYPE=INTP,DOUBLE#
   #typ=npy_intp,npy_double#
','line_number':327,'multiline':True]
['text':'*end repeat*','line_number':350,'multiline':True]
['text':'  The following lines were generated using a slightly modified
    version of code_generators/generate_umath.py and adding these
    lines to defdict:

defdict = {
'inner1d' :
    Ufunc(2, 1, None_,
        r'''inner on the last dimension and broadcast on the rest \n"
        "     \"(i),(i)->()\" \n''',
        TD('ld'),
        ),
'innerwt' :
    Ufunc(3, 1, None_,
        r'''inner1d with a weight argument \n"
        "     \"(i),(i),(i)->()\" \n''',
        TD('ld'),
        ),
}

','line_number':401,'multiline':True]
['text':'
     * yes, this should not happen, but I (MHvK) just spent an hour looking at
     * segfaults because I screwed up something that seemed totally unrelated.
     ','line_number':476,'multiline':True]
['text':'
     * Don't presume core_num_dims and core_dim_ixs are defined;
     * they currently are even if core_enabled=0, but there's no real
     * reason they should be.  So avoid segfaults if we change our mind.
     ','line_number':607,'multiline':True]
['text':' Testing the utilities of the CPU dispatcher','line_number':682,'multiline':False]
['text':'*begin repeat
     * #str = func, var, func_xb, var_xb#
    ','line_number':704,'multiline':True]
['text':'*end repeat*','line_number':712,'multiline':True]
['text':' Sentinel ','line_number':774,'multiline':True]
['text':' Initialization function for the module ','line_number':789,'multiline':True]
['text':' Initialize CPU features','line_number':795,'multiline':False]
['text':' Load the ufunc operators into the module's namespace ','line_number':820,'multiline':True]
