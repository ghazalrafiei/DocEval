['text':'@targets
 ** baseline vsx4
 *','line_number':1,'multiline':True]
['text':' Provides the various *_LOOP macros','line_number':12,'multiline':False]
['text':' Converts 1 8-bit vector into 2 16-bit vectors','line_number':41,'multiline':False]
['text':' Converts 1 16-bit vector into 2 32-bit vectors','line_number':51,'multiline':False]
['text':'*begin repeat
 * #t = u, s#
 * #expand = npyv_expand, vsx4_expand#
 ','line_number':61,'multiline':True]
['text':' Converts 1 8-bit vector into 4 32-bit vectors','line_number':65,'multiline':False]
['text':'*begin repeat1
 * #simd = div, mod##
 ','line_number':76,'multiline':True]
['text':'
 * Computes division/modulo of 2 8-bit signed/unsigned integer vectors
 *
 * As Power10 only supports integer vector division/modulo for data of 32 bits
 * or greater, we have to convert npyv_u8 into 4x npyv_u32, execute the integer
 * vector division/modulo instruction, and then, convert the result back to
 * npyv_u8.
 ','line_number':79,'multiline':True]
['text':'*end repeat1*','line_number':137,'multiline':True]
['text':'*end repeat*','line_number':138,'multiline':True]
['text':'*begin repeat
 * #sfx  = u8,  u16, s8,  s16#
 * #osfx = u32, u32, s32, s32#
 * #otype  = vsx4_u32x4,  npyv_u32x2,  vsx4_s32x4,  npyv_s32x2#
 * #expand = vsx4_expand, npyv_expand, vsx4_expand, vsx4_expand#
 ','line_number':140,'multiline':True]
['text':' Generates the divisor for the division/modulo operations','line_number':146,'multiline':False]
['text':'*end repeat*','line_number':152,'multiline':True]
['text':'*begin repeat
 * #sfx = u32, u64, s32, s64#
 ','line_number':154,'multiline':True]
['text':'*end repeat*','line_number':162,'multiline':True]
['text':'*begin repeat
 * Unsigned types
 * #sfx = u8, u16, u32, u64#
 * #len = 8,  16,  32,  64#
 * #divtype = vsx4_u32x4, npyv_u32x2,  npyv_u32,  npyv_u64#
 ','line_number':164,'multiline':True]
['text':'*begin repeat1
 * #func = fmod, remainder, divmod#
 * #id = 0, 1, 2#
 ','line_number':170,'multiline':True]
['text':' divmod ','line_number':182,'multiline':True]
['text':' when b is 0, forces the remainder to be 0 too','line_number':193,'multiline':False]
['text':' fmod and remainder ','line_number':216,'multiline':True]
['text':' divmod ','line_number':251,'multiline':True]
['text':' fmod and remainder ','line_number':268,'multiline':True]
['text':'*end repeat1*','line_number':282,'multiline':True]
['text':'*end repeat*','line_number':283,'multiline':True]
['text':'*begin repeat
 * Signed types
 * #sfx = s8, s16, s32, s64#
 * #len = 8,  16,  32,  64#
 * #divtype = vsx4_s32x4, npyv_s32x2,  npyv_s32,  npyv_s64#
 ','line_number':285,'multiline':True]
['text':'*begin repeat1
 * #func = fmod, remainder, divmod#
 * #id = 0, 1, 2#
 ','line_number':291,'multiline':True]
['text':' divmod ','line_number':303,'multiline':True]
['text':' fmod and remainder ','line_number':312,'multiline':True]
['text':' fmod and remainder ','line_number':318,'multiline':True]
['text':' divmod ','line_number':320,'multiline':True]
['text':' (b == 0 || (a == NPY_MIN_INT@len@ && b == -1))','line_number':323,'multiline':False]
['text':' remainder and divmod ','line_number':331,'multiline':True]
['text':' handle mixed case the way Python does','line_number':332,'multiline':False]
['text':' ((a > 0) == (b > 0) || rem == 0)','line_number':333,'multiline':False]
['text':' divmod ','line_number':342,'multiline':True]
['text':' Divide by zero','line_number':345,'multiline':False]
['text':' Overflow','line_number':348,'multiline':False]
['text':' fmod and remainder ','line_number':353,'multiline':True]
['text':' divmod ','line_number':361,'multiline':True]
['text':' fmod and remainder ','line_number':393,'multiline':True]
['text':' remainder ','line_number':402,'multiline':True]
['text':' remainder and divmod ','line_number':422,'multiline':True]
['text':' divmod ','line_number':426,'multiline':True]
['text':' fmod and remainder ','line_number':435,'multiline':True]
['text':' fmod and remainder ','line_number':439,'multiline':True]
['text':' divmod ','line_number':441,'multiline':True]
['text':' (a == NPY_MIN_INT@len@ && b == -1)','line_number':444,'multiline':False]
['text':' remainder and divmod ','line_number':449,'multiline':True]
['text':' handle mixed case the way Python does','line_number':450,'multiline':False]
['text':' ((a > 0) == (b > 0) || rem == 0)','line_number':451,'multiline':False]
['text':' divmod ','line_number':459,'multiline':True]
['text':' Overflow: set quo to minimum and rem to 0','line_number':462,'multiline':False]
['text':' fmod and remainder ','line_number':467,'multiline':True]
['text':' divmod ','line_number':472,'multiline':True]
['text':' fmod and remainder ','line_number':493,'multiline':True]
['text':' remainder ','line_number':497,'multiline':True]
['text':'*end repeat1*','line_number':506,'multiline':True]
['text':'*end repeat*','line_number':507,'multiline':True]
['text':' NPY_SIMD && defined(NPY_HAVE_VSX4)','line_number':508,'multiline':False]
['text':'****************************************************************************
 ** Defining ufunc inner functions
 ****************************************************************************','line_number':510,'multiline':True]
['text':'*begin repeat
 * Signed and Unsigned types
 *  #type  = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *           npy_byte,  npy_short,  npy_int,  npy_long,  npy_longlong#
 *  #TYPE  = UBYTE,     USHORT,     UINT,     ULONG,     ULONGLONG,
 *           BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 *  #STYPE = BYTE,      SHORT,      INT,      LONG,      LONGLONG,
 *           BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 *  #signed = 0, 0, 0, 0, 0, 1, 1, 1, 1, 1#
 ','line_number':514,'multiline':True]
['text':'*begin repeat1
 * #len = 8, 16, 32, 64#
 ','line_number':526,'multiline':True]
['text':'*end repeat1*','line_number':535,'multiline':True]
['text':' both arguments are arrays of the same size','line_number':542,'multiline':False]
['text':' for contiguous block of memory, divisor is a scalar and not 0','line_number':547,'multiline':False]
['text':' both arguments are arrays of the same size','line_number':574,'multiline':False]
['text':' for contiguous block of memory, divisor is a scalar and not 0','line_number':579,'multiline':False]
['text':' handle mixed case the way Python does ','line_number':598,'multiline':True]
['text':' both arguments are arrays of the same size','line_number':617,'multiline':False]
['text':' for contiguous block of memory, divisor is a scalar and not 0','line_number':622,'multiline':False]
['text':' see FIXME note for divide above ','line_number':633,'multiline':True]
['text':' handle mixed case the way Python does ','line_number':647,'multiline':True]
['text':'*end repeat*','line_number':676,'multiline':True]
