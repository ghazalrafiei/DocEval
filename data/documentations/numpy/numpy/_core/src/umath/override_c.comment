['text':'
 * For each positional argument and each argument in a possible "out"
 * keyword, look for overrides of the standard ufunc behaviour, i.e.,
 * non-default __array_ufunc__ methods.
 *
 * Returns the number of overrides, setting corresponding objects
 * in PyObject array ``with_override`` and the corresponding
 * __array_ufunc__ methods in ``methods`` (both using new references).
 *
 * Only the first override for a given class is returned.
 *
 * Returns -1 on failure.
 ','line_number':12,'multiline':True]
['text':' It is valid for out_args to be NULL: ','line_number':34,'multiline':True]
['text':'
         * Have we seen this class before?  If so, ignore.
         ','line_number':52,'multiline':True]
['text':'
             * Now see if the object provides an __array_ufunc__. However, we should
             * ignore the base ndarray.__ufunc__, so we skip any ndarray as well as
             * any ndarray subclass instances that did not override __array_ufunc__.
             ','line_number':62,'multiline':True]
['text':'
 * Build a dictionary from the keyword arguments, but replace out with the
 * normalized version (and always pass it even if it was passed by position).
 ','line_number':96,'multiline':True]
['text':' Replace `out` argument with the normalized version ','line_number':122,'multiline':True]
['text':' Ensure that `out` is not present. ','line_number':129,'multiline':True]
['text':'
 * ufunc() and ufunc.outer() accept 'sig' or 'signature'.  We guarantee
 * that it is passed as 'signature' by renaming 'sig' if present.
 * Note that we have already validated that only one of them was passed
 * before checking for overrides.
 ','line_number':141,'multiline':True]
['text':' If the keywords include `sig` rename to `signature`. ','line_number':150,'multiline':True]
['text':'
         * No INCREF or DECREF needed: got a borrowed reference above,
         * and, unlike e.g. PyList_SetItem, PyDict_SetItem INCREF's it.
         ','line_number':156,'multiline':True]
['text':' keyword argument is either input or output and not set here ','line_number':178,'multiline':True]
['text':'
             * This is only relevant for reduce, which is the only one with
             * 5 keyword arguments.
             ','line_number':182,'multiline':True]
['text':'
 * Check a set of args for the `__array_ufunc__` method.  If more than one of
 * the input arguments implements `__array_ufunc__`, they are tried in the
 * order: subclasses before superclasses, otherwise left to right. The first
 * (non-None) routine returning something other than `NotImplemented`
 * determines the result. If all of the `__array_ufunc__` operations return
 * `NotImplemented` (or are None), a `TypeError` is raised.
 *
 * Returns 0 on success and 1 on exception. On success, *result contains the
 * result of the operation, if any. If *result is NULL, there is no override.
 ','line_number':202,'multiline':True]
['text':'
     * Check inputs for overrides
     ','line_number':230,'multiline':True]
['text':' No overrides, bail out.','line_number':238,'multiline':True]
['text':'
     * Normalize ufunc arguments, note that any input and output arguments
     * have already been stored in `in_args` and `out_args`.
     ','line_number':244,'multiline':True]
['text':'
     * Reduce-like methods can pass keyword arguments also by position,
     * in which case the additional positional arguments have to be copied
     * into the keyword argument dictionary. The `__call__` and `__outer__`
     * method have to normalize sig and signature.
     ','line_number':257,'multiline':True]
['text':' ufunc.__call__ ','line_number':264,'multiline':True]
['text':' ufunc.reduce ','line_number':268,'multiline':True]
['text':' ufunc.accumulate ','line_number':276,'multiline':True]
['text':' ufunc.reduceat ','line_number':283,'multiline':True]
['text':' ufunc.outer (identical to call) ','line_number':290,'multiline':True]
['text':' ufunc.at ','line_number':294,'multiline':True]
['text':' unknown method ','line_number':298,'multiline':True]
['text':' Call __array_ufunc__ functions in correct order ','line_number':316,'multiline':True]
['text':' Choose an overriding argument ','line_number':323,'multiline':True]
['text':' Check for sub-types to the right of obj. ','line_number':330,'multiline':True]
['text':' override_obj had no subtypes to the right. ','line_number':342,'multiline':True]
['text':' We won't call this one again (references decref'd below) ','line_number':345,'multiline':True]
['text':'
         * Set override arguments for each call since the tuple must
         * not be mutated after use in PyPy
         * We increase all references since SET_ITEM steals
         * them and they will be DECREF'd when the tuple is deleted.
         ','line_number':351,'multiline':True]
['text':' Check if there is a method left to call ','line_number':372,'multiline':True]
['text':' No acceptable override found. ','line_number':374,'multiline':True]
['text':' All tuple items must be set before use ','line_number':383,'multiline':True]
['text':'
         * Set the self argument of our unbound method.
         * This also steals the reference, so no need to DECREF after.
         ','line_number':397,'multiline':True]
['text':' Call the method ','line_number':402,'multiline':True]
['text':' Exception occurred ','line_number':408,'multiline':True]
['text':' Try the next one ','line_number':412,'multiline':True]
['text':' Good result. ','line_number':417,'multiline':True]
['text':' Override found, return it. ','line_number':422,'multiline':True]
