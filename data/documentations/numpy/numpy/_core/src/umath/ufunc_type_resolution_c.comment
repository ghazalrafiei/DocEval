['text':'
 * NOTE: The type resolution defined in this file is considered legacy.
 *
 * The new mechanism separates type resolution and promotion into two
 * distinct steps, as per NEP 43.
 * Further, the functions in this file rely on the operands rather than
 * only the DTypes/descriptors.  They are still called and at this point
 * vital (NumPy ~1.21), but should hopefully become largely irrelevant very
 * quickly.
 *
 * At that point, this file should be deletable in its entirety.
 *
 *
 * This file implements type resolution for NumPy element-wise ufuncs.
 * This mechanism is still backwards-compatible with the pre-existing
 * legacy mechanism, so performs much slower than is necessary.
 *
 * Written by Mark Wiebe (mwwiebe@gmail.com)
 * Copyright (c) 2011 by Enthought, Inc.
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]
['text':' printif debug tracing','line_number':30,'multiline':False]
['text':'*
 * Always returns -1 to indicate the exception was raised, for convenience
 ','line_number':74,'multiline':True]
['text':' produce an error object ','line_number':89,'multiline':True]
['text':'* Helper function to raise UFuncNoLoopError
 * Always returns -1 to indicate the exception was raised, for convenience
 ','line_number':104,'multiline':True]
['text':' produce an error object ','line_number':124,'multiline':True]
['text':'* Helper function to raise UFuncInputCastingError
 * Always returns -1 to indicate the exception was raised, for convenience
 ','line_number':171,'multiline':True]
['text':'* Helper function to raise UFuncOutputCastingError
 * Always returns -1 to indicate the exception was raised, for convenience
 ','line_number':194,'multiline':True]
['text':'UFUNC_API
 *
 * Validates that the input operands can be cast to
 * the input types, and the output types can be cast to
 * the output operands where provided.
 *
 * Returns 0 on success, -1 (with exception raised) on validation failure.
 ','line_number':217,'multiline':True]
['text':'
 * Same as `PyUFunc_ValidateCasting` but only checks output casting.
 ','line_number':252,'multiline':True]
['text':'UFUNC_API
 *
 * This function applies the default type resolution rules
 * for the provided ufunc.
 *
 * Returns 0 on success, -1 on error.
 ','line_number':274,'multiline':True]
['text':'
     * Decide the casting rules for inputs and outputs.  We want
     * NPY_SAFE_CASTING or stricter, so that the loop selection code
     * doesn't choose an integer loop for float inputs, or a float32
     * loop for float64 inputs.
     ','line_number':300,'multiline':True]
['text':' Find the best ufunc inner loop, and fill in the dtypes ','line_number':309,'multiline':True]
['text':' Find the specified ufunc inner loop, and fill in the dtypes ','line_number':314,'multiline':True]
['text':'
 * This function applies special type resolution rules for the case
 * where all the functions have the pattern XX->bool, using
 * PyArray_ResultType instead of a linear search to get the best
 * loop.
 *
 * Returns 0 on success, -1 on error.
 ','line_number':322,'multiline':True]
['text':'
     * Use the default type resolution if there's a custom data type
     * or object arrays.
     ','line_number':348,'multiline':True]
['text':'
             * Reject mixed datetime and timedelta explicitly, this was always
             * implicitly rejected because casting fails (except with
             * `casting="unsafe"` admittedly).
             * This is required to ensure that `==` and `!=` can correctly
             * detect that they should return a result array of False/True.
             ','line_number':364,'multiline':True]
['text':'
         * This check is required to avoid a potential FutureWarning that
         * ResultType would give for number->string promotions.
         * (We never supported flexible dtypes here.)
         ','line_number':373,'multiline':True]
['text':'
                 * NumPy promotion allows uint+int to go to float, avoid it
                 * (input must have been a mix of signed and unsigned)
                 ','line_number':387,'multiline':True]
['text':' Not doing anything will lead to a loop no found error. ','line_number':408,'multiline':True]
['text':' Usually a failure, but let the default version handle it ','line_number':416,'multiline':True]
['text':' Output type is always boolean (cannot fail for builtins) ','line_number':421,'multiline':True]
['text':' Check against the casting rules ','line_number':424,'multiline':True]
['text':' The type resolver would have upcast already ','line_number':450,'multiline':True]
['text':'
 * The ones_like function shouldn't really be a ufunc, but while it
 * still is, this provides type resolution that always forces UNSAFE
 * casting.
 ','line_number':462,'multiline':True]
['text':'
 * This function applies special type resolution rules for the case
 * where all of the types in the signature are the same, eg XX->X or XX->XX.
 * It uses PyArray_ResultType instead of a linear search to get the best
 * loop.
 *
 * Note that a simpler linear search through the functions loop
 * is still done, but switching to a simple array lookup for
 * built-in types would be better at some point.
 *
 * Returns 0 on success, -1 on error.
 ','line_number':479,'multiline':True]
['text':'
     * There's a custom data type or an object array
     ','line_number':510,'multiline':True]
['text':' PyArray_ResultType forgets to force a byte order when n == 1 ','line_number':528,'multiline':True]
['text':'
                 * DEPRECATED NumPy 1.20, 2020-12.
                 * This check is required to avoid the FutureWarning that
                 * ResultType will give for number->string promotions.
                 * (We never supported flexible dtypes here.)
                 ','line_number':546,'multiline':True]
['text':'
         * This is a fast-path, since all descriptors will be identical, mainly
         * when only a single descriptor was passed (which would set the out
         * one in the tuple), there is no need to check all loops.
         * Note that this also allows (None, None, float64) to resolve to
         * (float64, float64, float64), even when the inputs do not match,
         * i.e. fixing the output part of the signature can fix all of them.
         * This is necessary to support `nextafter(1., inf, dtype=float32)`,
         * where it is "clear" we want to cast 1. and inf to float32.
         ','line_number':570,'multiline':True]
['text':' All outputs must be set (this could be relaxed) ','line_number':589,'multiline':True]
['text':' Defer to default resolver (will raise an error there) ','line_number':594,'multiline':True]
['text':' Descriptor mismatch: try with default (probable error) ','line_number':599,'multiline':True]
['text':' in all bad/unlikely cases, use the default type resolver: ','line_number':607,'multiline':True]
['text':' Prefer the input descriptor if it matches (preserve metadata) ','line_number':612,'multiline':True]
['text':' All types are the same - copy the first one to the rest ','line_number':618,'multiline':True]
['text':' Check against the casting rules ','line_number':624,'multiline':True]
['text':'
 * This function applies special type resolution rules for the absolute
 * ufunc. This ufunc converts complex -> float, so isn't covered
 * by the simple unary type resolution.
 *
 * Returns 0 on success, -1 on error.
 ','line_number':636,'multiline':True]
['text':' Use the default for complex types, to find the loop producing float ','line_number':650,'multiline':True]
['text':'
 * This function applies special type resolution rules for the isnat
 * ufunc. This ufunc converts datetime/timedelta -> bool, and is not covered
 * by the simple unary type resolution.
 *
 * Returns 0 on success, -1 on error.
 ','line_number':661,'multiline':True]
['text':'
 * Creates a new NPY_TIMEDELTA dtype, copying the datetime metadata
 * from the given dtype.
 *
 * NOTE: This function is copied from datetime.c in multiarray,
 *       because umath and multiarray are not linked together.
 ','line_number':707,'multiline':True]
['text':'
 * This function applies the type resolution rules for addition.
 * In particular, there's special cases for string and unicodes, as
 * well as a number of special cases with datetime:
 *    m8[<A>] + m8[<B>] => m8[gcd(<A>,<B>)] + m8[gcd(<A>,<B>)]
 *    m8[<A>] + int     => m8[<A>] + m8[<A>]
 *    int     + m8[<A>] => m8[<A>] + m8[<A>]
 *    M8[<A>] + int     => M8[<A>] + m8[<A>]
 *    int     + M8[<A>] => m8[<A>] + M8[<A>]
 *    M8[<A>] + m8[<B>] => M8[gcd(<A>,<B>)] + m8[gcd(<A>,<B>)]
 *    m8[<A>] + M8[<B>] => m8[gcd(<A>,<B>)] + M8[gcd(<A>,<B>)]
 * TODO: Non-linear time unit cases require highly special-cased loops
 *    M8[<A>] + m8[Y|M|B]
 *    m8[Y|M|B] + M8[<A>]
 ','line_number':736,'multiline':True]
['text':' Use the default when datetime, timedelta, string and unicode are not involved ','line_number':764,'multiline':True]
['text':' This is wrong, but only the DType matters here (String or Unicode) and','line_number':773,'multiline':False]
['text':' the loop has the correct implementation itself.','line_number':774,'multiline':False]
['text':' m8[<A>] + m8[<B>] => m8[gcd(<A>,<B>)] + m8[gcd(<A>,<B>)] ','line_number':781,'multiline':True]
['text':' m8[<A>] + M8[<B>] => m8[gcd(<A>,<B>)] + M8[gcd(<A>,<B>)] ','line_number':793,'multiline':True]
['text':' Make a new NPY_TIMEDELTA, and copy the datetime's metadata ','line_number':800,'multiline':True]
['text':' m8[<A>] + int => m8[<A>] + m8[<A>] ','line_number':810,'multiline':True]
['text':' M8[<A>] + m8[<B>] => M8[gcd(<A>,<B>)] + m8[gcd(<A>,<B>)] ','line_number':830,'multiline':True]
['text':' Make a new NPY_TIMEDELTA, and copy the datetime's metadata ','line_number':837,'multiline':True]
['text':' M8[<A>] + int => M8[<A>] + m8[<A>] ','line_number':847,'multiline':True]
['text':' Make a new NPY_TIMEDELTA, and copy type1's metadata ','line_number':855,'multiline':True]
['text':' int + m8[<A>] => m8[<A>] + m8[<A>] ','line_number':873,'multiline':True]
['text':' Make a new NPY_TIMEDELTA, and copy type2's metadata ','line_number':888,'multiline':True]
['text':' Check against the casting rules ','line_number':914,'multiline':True]
['text':'
 * This function applies the type resolution rules for subtraction.
 * In particular, there are a number of special cases with datetime:
 *    m8[<A>] - m8[<B>] => m8[gcd(<A>,<B>)] - m8[gcd(<A>,<B>)]
 *    m8[<A>] - int     => m8[<A>] - m8[<A>]
 *    int     - m8[<A>] => m8[<A>] - m8[<A>]
 *    M8[<A>] - int     => M8[<A>] - m8[<A>]
 *    M8[<A>] - m8[<B>] => M8[gcd(<A>,<B>)] - m8[gcd(<A>,<B>)]
 * TODO: Non-linear time unit cases require highly special-cased loops
 *    M8[<A>] - m8[Y|M|B]
 ','line_number':926,'multiline':True]
['text':' Use the default when datetime and timedelta are not involved ','line_number':950,'multiline':True]
['text':' The type resolver would have upcast already ','line_number':959,'multiline':True]
['text':' m8[<A>] - m8[<B>] => m8[gcd(<A>,<B>)] - m8[gcd(<A>,<B>)] ','line_number':971,'multiline':True]
['text':' m8[<A>] - int => m8[<A>] - m8[<A>] ','line_number':983,'multiline':True]
['text':' M8[<A>] - m8[<B>] => M8[gcd(<A>,<B>)] - m8[gcd(<A>,<B>)] ','line_number':1003,'multiline':True]
['text':' Make a new NPY_TIMEDELTA, and copy the datetime's metadata ','line_number':1010,'multiline':True]
['text':' M8[<A>] - int => M8[<A>] - m8[<A>] ','line_number':1020,'multiline':True]
['text':' Make a new NPY_TIMEDELTA, and copy type1's metadata ','line_number':1028,'multiline':True]
['text':' M8[<A>] - M8[<B>] => M8[gcd(<A>,<B>)] - M8[gcd(<A>,<B>)] ','line_number':1041,'multiline':True]
['text':' Make a new NPY_TIMEDELTA, and copy type1's metadata ','line_number':1048,'multiline':True]
['text':' int - m8[<A>] => m8[<A>] - m8[<A>] ','line_number':1062,'multiline':True]
['text':' Check against the casting rules ','line_number':1084,'multiline':True]
['text':'
 * This function applies the type resolution rules for multiplication.
 * In particular, there are a number of special cases with datetime:
 *    int## * m8[<A>] => int64 * m8[<A>]
 *    m8[<A>] * int## => m8[<A>] * int64
 *    float## * m8[<A>] => float64 * m8[<A>]
 *    m8[<A>] * float## => m8[<A>] * float64
 ','line_number':1096,'multiline':True]
['text':' Use the default when datetime and timedelta are not involved ','line_number':1117,'multiline':True]
['text':' m8[<A>] * int## => m8[<A>] * int64 ','line_number':1124,'multiline':True]
['text':' m8[<A>] * float## => m8[<A>] * float64 ','line_number':1142,'multiline':True]
['text':' int## * m8[<A>] => int64 * m8[<A>] ','line_number':1165,'multiline':True]
['text':' float## * m8[<A>] => float64 * m8[<A>] ','line_number':1188,'multiline':True]
['text':' Check against the casting rules ','line_number':1214,'multiline':True]
['text':'
 * This function applies the type resolution rules for division.
 * In particular, there are a number of special cases with datetime:
 *    m8[<A>] / m8[<B>] to  m8[gcd(<A>,<B>)] / m8[gcd(<A>,<B>)]  -> float64
 *    m8[<A>] / int##   to m8[<A>] / int64 -> m8[<A>]
 *    m8[<A>] / float## to m8[<A>] / float64 -> m8[<A>]
 ','line_number':1227,'multiline':True]
['text':' Use the default when datetime and timedelta are not involved ','line_number':1247,'multiline':True]
['text':'
         * m8[<A>] / m8[<B>] to
         * m8[gcd(<A>,<B>)] / m8[gcd(<A>,<B>)]  -> float64
         ','line_number':1254,'multiline':True]
['text':'
             * TODO: split function into truediv and floordiv resolvers
             ','line_number':1267,'multiline':True]
['text':' m8[<A>] / int## => m8[<A>] / int64 ','line_number':1284,'multiline':True]
['text':' m8[<A>] / float## => m8[<A>] / float64 ','line_number':1302,'multiline':True]
['text':' Check against the casting rules ','line_number':1328,'multiline':True]
['text':' Use the default when datetime and timedelta are not involved ','line_number':1354,'multiline':True]
['text':' Check against the casting rules ','line_number':1379,'multiline':True]
['text':'
 * True division should return float64 results when both inputs are integer
 * types. The PyUFunc_DefaultTypeResolver promotes 8 bit integers to float16
 * and 16 bit integers to float32, so that is overridden here by specifying a
 * 'dd->d' signature. Returns -1 on failure.
','line_number':1392,'multiline':True]
['text':' Set default type for integer inputs to NPY_DOUBLE ','line_number':1408,'multiline':True]
['text':' Use this to try to avoid repeating the same userdef loop search ','line_number':1444,'multiline':True]
['text':' no more ufunc arguments to check ','line_number':1450,'multiline':True]
['text':' It matched ','line_number':1486,'multiline':True]
['text':' Didn't find a match ','line_number':1496,'multiline':True]
['text':'
     * If there are user-loops search them first.
     * TODO: There needs to be a loop selection acceleration structure,
     *       like a hash table.
     ','line_number':1511,'multiline':True]
['text':' Error ','line_number':1519,'multiline':True]
['text':' Found a loop ','line_number':1522,'multiline':True]
['text':' Copy the types into an int array for matching ','line_number':1530,'multiline':True]
['text':'
     * First check if all the inputs can be safely cast
     * to the types for this function
     ','line_number':1563,'multiline':True]
['text':'
         * If no inputs are objects and there are more than one
         * loop, don't allow conversion to object.  The rationale
         * behind this is mostly performance.  Except for custom
         * ufuncs built with just one object-parametered inner loop,
         * only the types that are supported are implemented.  Trying
         * the object version of logical_or on float arguments doesn't
         * seem right.
         ','line_number':1570,'multiline':True]
['text':' Matched by being explicitly specified. ','line_number':1583,'multiline':True]
['text':'
         * If type num is NPY_VOID and struct dtypes have been passed in,
         * use struct dtype object. Otherwise create new dtype object
         * from type num.
         ','line_number':1586,'multiline':True]
['text':'
         * If all the inputs are scalars, use the regular
         * promotion rules, not the special value-checking ones.
         ','line_number':1609,'multiline':True]
['text':'
     * If all the inputs were ok, then check casting back to the
     * outputs.
     ','line_number':1629,'multiline':True]
['text':' Matched by being explicitly specified. ','line_number':1635,'multiline':True]
['text':'
     * Fill the dtypes array.
     * For outputs,
     * also search the inputs for a matching type_num to copy
     * instead of creating a new one, similarly to preserve metadata.
     *','line_number':1665,'multiline':True]
['text':'
         * Copy the dtype from 'op' if the type_num matches,
         * to preserve metadata.
         ','line_number':1675,'multiline':True]
['text':'
         * For outputs, copy the dtype from op[0] if the type_num
         * matches, similarly to preserve metadata.
         ','line_number':1685,'multiline':True]
['text':' Otherwise create a plain descr from the type number ','line_number':1694,'multiline':True]
['text':'
 * Does a search through the arguments and the loops
 ','line_number':1714,'multiline':True]
['text':' Use this to try to avoid repeating the same userdef loop search ','line_number':1731,'multiline':True]
['text':' no more ufunc arguments to check ','line_number':1737,'multiline':True]
['text':' Error ','line_number':1773,'multiline':True]
['text':' Found a match ','line_number':1776,'multiline':True]
['text':' Didn't find a match ','line_number':1785,'multiline':True]
['text':'
 * Does a search through the arguments and the loops
 ','line_number':1789,'multiline':True]
['text':' Use this to try to avoid repeating the same userdef loop search ','line_number':1807,'multiline':True]
['text':'
                 * Copy the types into an int array for matching
                 * (Mostly duplicated in `type_tuple_type_resolver`)
                 ','line_number':1840,'multiline':True]
['text':' indicate that we do not have to check this type anymore. ','line_number':1852,'multiline':True]
['text':' no match ','line_number':1857,'multiline':True]
['text':' It works ','line_number':1867,'multiline':True]
['text':'
                         * In principle, we only need to validate the
                         * NPY_NOTYPE ones
                         ','line_number':1871,'multiline':True]
['text':' Didn't match ','line_number':1884,'multiline':True]
['text':' Error ','line_number':1893,'multiline':True]
['text':' Didn't find a match ','line_number':1901,'multiline':True]
['text':'
 * Does a linear search for the best inner loop of the ufunc.
 *
 * Note that if an error is returned, the caller must free the non-zero
 * references in out_dtype.  This function does not do its own clean-up.
 ','line_number':1906,'multiline':True]
['text':' For making a better error message on coercion error ','line_number':1925,'multiline':True]
['text':' Always "use" with new promotion in case of Python int/float/complex ','line_number':1931,'multiline':True]
['text':' If the ufunc has userloops, search for them. ','line_number':1940,'multiline':True]
['text':' Error ','line_number':1947,'multiline':True]
['text':' A loop was found ','line_number':1950,'multiline':True]
['text':'
     * Determine the UFunc loop.  This could in general be *much* faster,
     * and a better way to implement it might be for the ufunc to
     * provide a function which gives back the result type and inner
     * loop function.
     *
     * A default fast mechanism could be provided for functions which
     * follow the most typical pattern, when all functions have signatures
     * "xx...x -> x" for some built-in data type x, as follows.
     *  - Use PyArray_ResultType to get the output type
     *  - Look up the inner loop in a table based on the output type_num
     *
     * The method for finding the loop in the previous code did not
     * appear consistent (as noted by some asymmetry in the generated
     * coercion tables for np.add).
     ','line_number':1956,'multiline':True]
['text':' Copy the types into an int array for matching ','line_number':1976,'multiline':True]
['text':' Error ','line_number':1987,'multiline':True]
['text':' Found a match ','line_number':1990,'multiline':True]
['text':' If no function was found, throw an error ','line_number':1997,'multiline':True]
['text':'
         * TODO: We should try again if the casting rule is same_kind
         *       or unsafe, and look for a function more liberally.
         ','line_number':2007,'multiline':True]
['text':' For making a better error message on coercion error ','line_number':2036,'multiline':True]
['text':' If the ufunc has userloops, search for them. ','line_number':2039,'multiline':True]
['text':' Error ','line_number':2046,'multiline':True]
['text':' Found matching loop ','line_number':2049,'multiline':True]
['text':'
         * Check specified types and copy into an int array for matching
         * (Mostly duplicated in `type_tuple_userloop_type_resolver`)
         ','line_number':2058,'multiline':True]
['text':' indicate that we do not have to check this type anymore. ','line_number':2070,'multiline':True]
['text':' no match ','line_number':2074,'multiline':True]
['text':' Error ','line_number':2085,'multiline':True]
['text':' Cannot cast inputs ','line_number':2088,'multiline':True]
['text':' Success, fill also the NPY_NOTYPE (cast from char to int) ','line_number':2091,'multiline':True]
['text':' In principle, we only need to validate the NPY_NOTYPE ones ','line_number':2096,'multiline':True]
['text':'
 * Does a linear search for the inner loop of the ufunc specified by type_tup.
 *
 * Note that if an error is returned, the caller must free the non-zero
 * references in out_dtype.  This function does not do its own clean-up.
 ','line_number':2110,'multiline':True]
['text':' Always "use" with new promotion in case of Python int/float/complex ','line_number':2133,'multiline':True]
['text':' Fill in specified_types from the tuple or string ','line_number':2142,'multiline':True]
['text':'
     * When the user passes `dtype=dtype`, it gets translated to
     * `signature=(None,)*nin + (dtype,)*nout`.  If the signature matches that
     * exactly (could be relaxed but that is not necessary for backcompat),
     * we also try `signature=(dtype,)*(nin+nout)`.
     * Since reduction pass in `(dtype, None, dtype)` we broaden this to
     * replacing all unspecified dtypes with the homogeneous output one.
     * Note that this can (and often will) lead to unsafe casting.  This is
     * normally rejected (but not currently for reductions!).
     * This used to be the main meaning for `dtype=dtype`, but some calls broke
     * the expectation, and changing it allows for `dtype=dtype` to be useful
     * for ufuncs like `np.ldexp` in the future while also normalizing it to
     * a `signature` early on.
     ','line_number':2186,'multiline':True]
['text':' Never replace a specified type! ','line_number':2213,'multiline':True]
['text':' Try again with the homogeneous specified types. ','line_number':2219,'multiline':True]
['text':' If no function was found, throw an error ','line_number':2229,'multiline':True]
['text':' Use the default when datetime and timedelta are not involved ','line_number':2250,'multiline':True]
['text':' Check against the casting rules ','line_number':2273,'multiline':True]
