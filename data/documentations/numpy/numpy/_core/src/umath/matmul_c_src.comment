['text':' -*- c -*- ','line_number':1,'multiline':True]
['text':' For TYPE_dot functions ','line_number':20,'multiline':True]
['text':'
 *****************************************************************************
 **                            BASICS                                       **
 *****************************************************************************
 ','line_number':24,'multiline':True]
['text':'
 * -1 to be conservative, in case blas internally uses a for loop with an
 * inclusive upper bound
 ','line_number':31,'multiline':True]
['text':'
 * Determine if a 2d matrix can be used by BLAS
 * 1. Strides must not alias or overlap
 * 2. The faster (second) axis must be contiguous
 * 3. The slower (first) axis stride, in unit steps, must be larger than
 *    the faster axis dimension
 ','line_number':41,'multiline':True]
['text':'*begin repeat
 *
 * #name = FLOAT, DOUBLE, CFLOAT, CDOUBLE#
 * #ctype = npy_float, npy_double, npy_cfloat, npy_cdouble#
 * #typ = npy_float, npy_double, npy_cfloat, npy_cdouble#
 * #prefix = s, d, c, z#
 * #step1 = 1.F, 1., &oneF, &oneD#
 * #step0 = 0.F, 0., &zeroF, &zeroD#
 ','line_number':73,'multiline':True]
['text':'
     * Vector matrix multiplication -- Level 2 BLAS
     * arguments
     * ip1: contiguous data, m*n shape
     * ip2: data in c order, n*1 shape
     * op:  data in c order, m shape
     ','line_number':88,'multiline':True]
['text':' If not ColMajor, caller should have ensured we are RowMajor ','line_number':108,'multiline':True]
['text':' will not assert in release mode ','line_number':109,'multiline':True]
['text':'
     * matrix matrix multiplication -- Level 3 BLAS
     ','line_number':124,'multiline':True]
['text':' If not ColMajor, caller should have ensured we are RowMajor ','line_number':143,'multiline':True]
['text':' will not assert in release mode ','line_number':144,'multiline':True]
['text':' If not ColMajor, caller should have ensured we are RowMajor ','line_number':155,'multiline':True]
['text':' will not assert in release mode ','line_number':156,'multiline':True]
['text':'
     * Use syrk if we have a case of a matrix times its transpose.
     * Otherwise, use gemm for all other cases.
     ','line_number':161,'multiline':True]
['text':' Copy the triangle ','line_number':183,'multiline':True]
['text':'*end repeat*','line_number':198,'multiline':True]
['text':'
 * matmul loops
 * signature is (m?,n),(n,p?)->(m?,p?)
 ','line_number':201,'multiline':True]
['text':'*begin repeat
 *  #TYPE = LONGDOUBLE,
 *          FLOAT, DOUBLE, HALF,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE,
 *          UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG#
 *  #typ = npy_longdouble,
 *         npy_float,npy_double,npy_half,
 *         npy_cfloat, npy_cdouble, npy_clongdouble,
 *         npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *         npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 * #suff = , , , , f, , l, x*10#
 * #IS_COMPLEX = 0, 0, 0, 0, 1, 1, 1, 0*10#
 * #IS_HALF = 0, 0, 0, 1, 0*13#
 ','line_number':206,'multiline':True]
['text':'*end repeat*','line_number':279,'multiline':True]
['text':'*begin repeat
 *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE, HALF,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE,
 *          UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG,
 *          BOOL, OBJECT#
 *  #typ = npy_float,npy_double,npy_longdouble, npy_half,
 *         npy_cfloat, npy_cdouble, npy_clongdouble,
 *         npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *         npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *         npy_bool,npy_object#
 * #IS_COMPLEX = 0, 0, 0, 0, 1, 1, 1, 0*12#
 * #USEBLAS = 1, 1, 0, 0, 1, 1, 0*13#
 ','line_number':387,'multiline':True]
['text':'
         * TODO: refactor this out to a inner_loop_selector, in
         * PyUFunc_MatmulLoopSelector. But that call does not have access to
         * n, m, p and strides.
         ','line_number':442,'multiline':True]
['text':' Special case variants that have a 1 in the core dimensions ','line_number':453,'multiline':True]
['text':' row @ column, 1,1 output ','line_number':455,'multiline':True]
['text':'
                 * 1,1d @ vector or vector @ 1,1d
                 * could use cblas_Xaxy, but that requires 0ing output
                 * and would not be faster (XXX prove it)
                 ','line_number':458,'multiline':True]
['text':' vector @ matrix, switch ip1, ip2, p and m ','line_number':467,'multiline':True]
['text':' matrix @ vector ','line_number':471,'multiline':True]
['text':' column @ row, 2d output, no blas needed or non-blas-able input ','line_number':476,'multiline':True]
['text':' matrix @ matrix ','line_number':482,'multiline':True]
['text':'
                 * Use transpose equivalence:
                 * matmul(a, b, o) == matmul(b.T, a.T, o.T)
                 ','line_number':489,'multiline':True]
['text':'
                 * If parameters are castable to int and we copy the
                 * non-blasable (or non-ccontiguous output)
                 * we could still use BLAS, see gh-12365.
                 ','line_number':498,'multiline':True]
['text':'*end repeat*','line_number':517,'multiline':True]
