['text':'
 * This file implements generic methods for computing reductions on arrays.
 *
 * Written by Mark Wiebe (mwwiebe@gmail.com)
 * Copyright (c) 2011 by Enthought, Inc.
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]
['text':' for _check_ufunc_fperr ','line_number':28,'multiline':True]
['text':'
 * Count the number of dimensions selected in 'axis_flags'
 ','line_number':31,'multiline':True]
['text':'
 * This function initializes a result array for a reduction operation
 * which has no identity. This means it needs to copy the first element
 * it sees along the reduction axes to result.
 *
 * If a reduction has an identity, such as 0 or 1, the result should be
 * fully initialized to the identity, because this function raises an
 * exception when there are no elements to reduce (which is appropriate if,
 * and only if, the reduction operation has no identity).
 *
 * This means it copies the subarray indexed at zero along each reduction axis
 * into 'result'.
 *
 * result  : The array into which the result is computed. This must have
 *           the same number of dimensions as 'operand', but for each
 *           axis i where 'axis_flags[i]' is True, it has a single element.
 * operand : The array being reduced.
 * axis_flags : An array of boolean flags, one for each axis of 'operand'.
 *              When a flag is True, it indicates to reduce along that axis.
 * funcname : The name of the reduction operation, for the purpose of
 *            better quality error messages. For example, "numpy.max"
 *            would be a good name for NumPy's max function.
 *
 * Returns -1 if an error occurred, and otherwise the reduce arrays size,
 * which is the number of elements already initialized.
 ','line_number':48,'multiline':True]
['text':'
     * Copy the subarray of the first element along each reduction axis.
     *
     * Adjust the shape to only look at the first element along
     * any of the reduction axes. If keepdims is False remove the axes
     * entirely.
     ','line_number':87,'multiline':True]
['text':'
     * Copy the elements into the result to start.
     ','line_number':127,'multiline':True]
['text':'
     * If there were no reduction axes, we would already be done here.
     * Note that if there is only a single reduction axis, in principle the
     * iteration could be set up more efficiently here by removing that
     * axis before setting up the iterator (simplifying the iteration since
     * `skip_first_count` (the returned size) can be set to 0).
     ','line_number':136,'multiline':True]
['text':'
 * This function executes all the standard NumPy reduction function
 * boilerplate code, just calling the appropriate inner loop function where
 * necessary.
 *
 * context     : The ArrayMethod context (with ufunc, method, and descriptors).
 * operand     : The array to be reduced.
 * out         : NULL, or the array into which to place the result.
 * wheremask   : Reduction mask of valid values used for `where=`.
 * axis_flags  : Flags indicating the reduction axes of 'operand'.
 * keepdims    : If true, leaves the reduction dimensions in the result
 *               with size one.
 * subok       : If true, the result uses the subclass of operand, otherwise
 *               it is always a base class ndarray.
 * initial     : Initial value, if NULL the default is fetched from the
 *               ArrayMethod (typically as the default from the ufunc).
 * loop        : `reduce_loop` from `ufunc_object.c`.  TODO: Refactor
 * buffersize  : Buffer size for the iterator. For the default, pass in 0.
 * funcname    : The name of the reduction function, for error messages.
 * errormask   : forwarded from _get_bufsize_errmask
 *
 * TODO FIXME: if you squint, this is essentially an second independent
 * implementation of generalized ufuncs with signature (i)->(), plus a few
 * extra bells and whistles. (Indeed, as far as I can tell, it was originally
 * split out to support a fancy version of count_nonzero... which is not
 * actually a reduction function at all, it's just a (i)->() function!) So
 * probably these two implementation should be merged into one. (In fact it
 * would be quite nice to support axis= and keepdims etc. for arbitrary
 * generalized ufuncs!)
 ','line_number':146,'multiline':True]
['text':' Iterator parameters ','line_number':187,'multiline':True]
['text':' Loop auxdata (must be freed on error) ','line_number':192,'multiline':True]
['text':' Set up the iterator ','line_number':195,'multiline':True]
['text':' Buffer to use when we need an initial value ','line_number':201,'multiline':True]
['text':' More than one axis means multiple orders are possible ','line_number':204,'multiline':True]
['text':' wheremask is guaranteed to be NPY_BOOL, so borrow its reference ','line_number':234,'multiline':True]
['text':' Set up result array axes mapping, operand and wheremask use default ','line_number':242,'multiline':True]
['text':' NpyIter does not raise a good error message in this common case. ','line_number':263,'multiline':True]
['text':'
     * Get the initial value (if it exists).  If the iteration is empty
     * then we assume the reduction is also empty.  The reason is that when
     * the outer iteration is empty we just won't use the initial value
     * in any case.  (`np.sum(np.zeros((0, 3)), axis=0)` is a length 3
     * reduction but has an empty result.)
     ','line_number':294,'multiline':True]
['text':' There is no initial value, or initial value was explicitly unset ','line_number':303,'multiline':True]
['text':' Not all functions will need initialization, but init always: ','line_number':306,'multiline':True]
['text':' must use user provided initial value ','line_number':313,'multiline':True]
['text':'
             * Fetch initial from ArrayMethod, we pretend the reduction is
             * empty when the iteration is.  This may be wrong, but when it is,
             * we will not need the identity as the result is also empty.
             ','line_number':319,'multiline':True]
['text':' We have no initial value available, free buffer to indicate ','line_number':330,'multiline':True]
['text':' Start with the floating-point exception flags cleared ','line_number':343,'multiline':True]
['text':'
     * Initialize the result to the reduction unit if possible,
     * otherwise copy the initial values and get a view to the rest.
     ','line_number':347,'multiline':True]
['text':' Loop provided an identity or default value, assign to result. ','line_number':352,'multiline':True]
['text':' Can only use where with an initial (from identity or argument) ','line_number':363,'multiline':True]
['text':'
         * For 1-D skip_first_count could be optimized to 0, but no-identity
         * reductions are not super common.
         * (see also comment in CopyInitialReduceValues)
         ','line_number':372,'multiline':True]
['text':'
     * Note that we need to ensure that the iterator is reset before getting
     * the fixed strides.  (The buffer information is uninitialized before.)
     ','line_number':388,'multiline':True]
['text':' NOTE: We could check float errors even on error ','line_number':429,'multiline':True]
