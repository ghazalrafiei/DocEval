['text':'
 * An array assignment function for copying arrays, treating the
 * arrays as flat according to their respective ordering rules.
 * This function makes a temporary copy of 'src' if 'src' and
 * 'dst' overlap, to be able to handle views of the same data with
 * different strides.
 *
 * dst: The destination array.
 * dst_order: The rule for how 'dst' is to be made flat.
 * src: The source array.
 * src_order: The rule for how 'src' is to be made flat.
 * casting: An exception is raised if the copy violates this
 *          casting rule.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':4,'multiline':True]
['text':' Not yet implemented
NPY_NO_EXPORT int
PyArray_AssignArrayAsFlat(PyArrayObject *dst, NPY_ORDER dst_order,
                  PyArrayObject *src, NPY_ORDER src_order,
                  NPY_CASTING casting,
                  npy_bool preservena, npy_bool *preservewhichna);
','line_number':20,'multiline':True]
['text':'******* LOW-LEVEL SCALAR TO ARRAY ASSIGNMENT *******','line_number':39,'multiline':True]
['text':'
 * Assigns the scalar value to every element of the destination raw array.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':41,'multiline':True]
['text':'
 * Assigns the scalar value to every element of the destination raw array
 * where the 'wheremask' value is True.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':51,'multiline':True]
['text':'******* LOW-LEVEL ARRAY MANIPULATION HELPERS *******','line_number':64,'multiline':True]
['text':'
 * Internal detail of how much to buffer during array assignments which
 * need it. This is for more complex NA masking operations where masks
 * need to be inverted or combined together.
 ','line_number':66,'multiline':True]
['text':'
 * Broadcasts strides to match the given dimensions. Can be used,
 * for instance, to set up a raw iteration.
 *
 * 'strides_name' is used to produce an error message if the strides
 * cannot be broadcast.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':73,'multiline':True]
['text':'
 * Checks whether a data pointer + set of strides refers to a raw
 * array whose elements are all aligned to a given alignment. Returns
 * 1 if data is aligned to alignment or 0 if not.
 * alignment should be a power of two, or may be the sentinel value 0 to mean
 * cannot-be-aligned, in which case 0 (false) is always returned.
 ','line_number':88,'multiline':True]
['text':'
 * Checks if an array is aligned to its "true alignment"
 * given by dtype->alignment.
 ','line_number':99,'multiline':True]
['text':'
 * Checks if an array is aligned to its "uint alignment"
 * given by npy_uint_alignment(dtype->elsize).
 ','line_number':106,'multiline':True]
['text':' Returns 1 if the arrays have overlapping data, 0 otherwise ','line_number':113,'multiline':True]
['text':' NUMPY_CORE_SRC_COMMON_ARRAY_ASSIGN_H_ ','line_number':118,'multiline':True]
