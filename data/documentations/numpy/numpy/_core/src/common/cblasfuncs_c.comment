['text':'
 * This module provides a BLAS optimized matrix multiply,
 * inner product and dot for numpy arrays
 ','line_number':1,'multiline':True]
['text':'
 * Helper: dispatch to appropriate cblas_?gemm for typenum.
 ','line_number':24,'multiline':True]
['text':'
 * Helper: dispatch to appropriate cblas_?gemv for typenum.
 ','line_number':58,'multiline':True]
['text':'
 * Helper: dispatch to appropriate cblas_?syrk for typenum.
 ','line_number':92,'multiline':True]
['text':'
 * This also makes sure that the data segment is aligned with
 * an itemsize address as well by returning one if not true.
 ','line_number':184,'multiline':True]
['text':'
 * dot(a,b)
 * Returns the dot product of a and b for arrays of floating point types.
 * Like the generic numpy equivalent the product sum is over
 * the last dimension of a and the second-to-last dimension of b.
 * NB: The first argument is not conjugated.;
 *
 * This is for use by PyArray_MatrixProduct2. It is assumed on entry that
 * the arrays ap1 and ap2 have a common data type given by typenum that is
 * float, double, cfloat, or cdouble and have dimension <= 2. The
 * __array_ufunc__ nonsense is also assumed to have been taken care of.
 ','line_number':211,'multiline':True]
['text':' One of ap1 or ap2 is a scalar ','line_number':260,'multiline':True]
['text':' Make ap2 the scalar ','line_number':262,'multiline':True]
['text':'
             * nd = 0 or 1 or 2. If nd == 0 do nothing ...
             ','line_number':301,'multiline':True]
['text':'
                 * Either PyArray_NDIM(ap1) is 1 dim or PyArray_NDIM(ap2) is
                 * 1 dim and the other is 2 dim
                 ','line_number':305,'multiline':True]
['text':'
                 * Fix it so that dot(shape=(N,1), shape=(1,))
                 * and dot(shape=(1,), shape=(1,N)) both return
                 * an (N,) array (but use the fast scalar code)
                 ','line_number':312,'multiline':True]
['text':'
                 * We need to make sure that dot(shape=(1,1), shape=(1,N))
                 * and dot(shape=(N,1),shape=(1,1)) uses
                 * scalar multiplication appropriately
                 ','line_number':321,'multiline':True]
['text':' Check if the summation dimension is 0-sized ','line_number':334,'multiline':True]
['text':'
         * (PyArray_NDIM(ap1) <= 2 && PyArray_NDIM(ap2) <= 2)
         * Both ap1 and ap2 are vectors or matrices
         ','line_number':341,'multiline':True]
['text':'
         * Multiplication by a scalar -- Level 1 BLAS
         * if ap1shape is a matrix and we are not contiguous, then we can't
         * just blast through the entire array using a single striding factor
         ','line_number':378,'multiline':True]
['text':' Dot product between two vectors -- Level 1 BLAS ','line_number':540,'multiline':True]
['text':' Matrix vector multiplication -- Level 2 BLAS ','line_number':548,'multiline':True]
['text':' lda must be MAX(M,1) ','line_number':549,'multiline':True]
['text':' Vector matrix multiplication -- Level 2 BLAS ','line_number':576,'multiline':True]
['text':'
         * (PyArray_NDIM(ap1) == 2 && PyArray_NDIM(ap2) == 2)
         * Matrix matrix multiplication -- Level 3 BLAS
         *  L x M  multiplied by M x N
         ','line_number':608,'multiline':True]
['text':' Optimization possible: ','line_number':617,'multiline':True]
['text':'
         * We may be able to handle single-segment arrays here
         * using appropriate values of Order, Trans1, and Trans2.
         ','line_number':618,'multiline':True]
['text':'
         * Avoid temporary copies for arrays in Fortran order
         ','line_number':652,'multiline':True]
['text':'
         * Use syrk if we have a case of a matrix times its transpose.
         * Otherwise, use gemm for all other cases.
         ','line_number':664,'multiline':True]
['text':' Trigger possible copyback into `result` ','line_number':695,'multiline':True]
