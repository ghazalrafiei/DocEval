['text':'**************************
 * Addition
 **************************','line_number':10,'multiline':True]
['text':' non-saturated','line_number':13,'multiline':False]
['text':' saturated','line_number':30,'multiline':False]
['text':' TODO: rest, after implement Packs intrins','line_number':42,'multiline':False]
['text':'**************************
 * Subtraction
 **************************','line_number':44,'multiline':True]
['text':' non-saturated','line_number':47,'multiline':False]
['text':' saturated','line_number':64,'multiline':False]
['text':' TODO: rest, after implement Packs intrins','line_number':76,'multiline':False]
['text':'**************************
 * Multiplication
 **************************','line_number':78,'multiline':True]
['text':' non-saturated','line_number':81,'multiline':False]
['text':' saturated','line_number':106,'multiline':False]
['text':' TODO: after implement Packs intrins','line_number':107,'multiline':False]
['text':'**************************
 * Integer Division
 **************************','line_number':109,'multiline':True]
['text':' See simd/intdiv.h for more clarification','line_number':112,'multiline':False]
['text':' divide each unsigned 8-bit element by divisor','line_number':113,'multiline':False]
['text':' high part of unsigned multiplication','line_number':122,'multiline':False]
['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':127,'multiline':False]
['text':'// lower 256-bit','line_number':139,'multiline':False]
['text':' high part of unsigned multiplication','line_number':141,'multiline':False]
['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':146,'multiline':False]
['text':' no sign extend','line_number':150,'multiline':False]
['text':'// higher 256-bit','line_number':152,'multiline':False]
['text':' high part of unsigned multiplication','line_number':154,'multiline':False]
['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':159,'multiline':False]
['text':' no sign extend','line_number':163,'multiline':False]
['text':' extend sign','line_number':164,'multiline':False]
['text':' divide each signed 8-bit element by divisor (round towards zero)','line_number':167,'multiline':False]
['text':' divide each unsigned 16-bit element by divisor','line_number':181,'multiline':False]
['text':' floor(a/d)      = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':186,'multiline':False]
['text':' divide each signed 16-bit element by divisor (round towards zero)','line_number':210,'multiline':False]
['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':214,'multiline':False]
['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':215,'multiline':False]
['text':' divide each unsigned 32-bit element by divisor','line_number':239,'multiline':False]
['text':' high part of unsigned multiplication','line_number':244,'multiline':False]
['text':' floor(a/d)      = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':248,'multiline':False]
['text':' divide each signed 32-bit element by divisor (round towards zero)','line_number':255,'multiline':False]
['text':' high part of signed multiplication','line_number':259,'multiline':False]
['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':263,'multiline':False]
['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':264,'multiline':False]
['text':' returns the high 64 bits of unsigned 64-bit multiplication','line_number':270,'multiline':False]
['text':' xref https://stackoverflow.com/a/28827013','line_number':271,'multiline':False]
['text':' a0l, a0h, a1l, a1h','line_number':275,'multiline':False]
['text':' b0l, b0h, b1l, b1h','line_number':276,'multiline':False]
['text':' compute partial products','line_number':277,'multiline':False]
['text':' a0l*b0l, a1l*b1l','line_number':278,'multiline':False]
['text':' a0l*b0h, a1l*b1h','line_number':279,'multiline':False]
['text':' a0h*b0l, a1h*b0l','line_number':280,'multiline':False]
['text':' a0h*b0h, a1h*b1h','line_number':281,'multiline':False]
['text':' sum partial products','line_number':282,'multiline':False]
['text':' divide each unsigned 64-bit element by a divisor','line_number':295,'multiline':False]
['text':' high part of unsigned multiplication','line_number':300,'multiline':False]
['text':' floor(a/d)      = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':302,'multiline':False]
['text':' divide each unsigned 64-bit element by a divisor (round towards zero)','line_number':309,'multiline':False]
['text':' high part of unsigned multiplication','line_number':313,'multiline':False]
['text':' convert unsigned to signed high multiplication','line_number':315,'multiline':False]
['text':' mulhi - ((a < 0) ? m : 0) - ((m < 0) ? a : 0);','line_number':316,'multiline':False]
['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':323,'multiline':False]
['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':324,'multiline':False]
['text':'**************************
 * Division
 **************************','line_number':330,'multiline':True]
['text':' TODO: emulate integer division','line_number':333,'multiline':False]
['text':'**************************
 * FUSED
 **************************','line_number':337,'multiline':True]
['text':' multiply and add, a*b + c','line_number':340,'multiline':False]
['text':' multiply and subtract, a*b - c','line_number':343,'multiline':False]
['text':' negate multiply and add, -(a*b) + c','line_number':346,'multiline':False]
['text':' negate multiply and subtract, -(a*b) - c','line_number':349,'multiline':False]
['text':' multiply, add for odd elements and subtract even elements.','line_number':352,'multiline':False]
['text':' (a * b) -+ c','line_number':353,'multiline':False]
['text':'**************************
 * Summation: Calculates the sum of all vector elements.
 * there are three ways to implement reduce sum for AVX512:
 * 1- split(256) /add /split(128) /add /hadd /hadd /extract
 * 2- shuff(cross) /add /shuff(cross) /add /shuff /add /shuff /add /extract
 * 3- _mm512_reduce_add_ps/pd
 * The first one is been widely used by many projects
 *
 * the second one is used by Intel Compiler, maybe because the
 * latency of hadd increased by (2-3) starting from Skylake-X which makes two
 * extra shuffles(non-cross) cheaper. check https://godbolt.org/z/s3G9Er for more info.
 *
 * The third one is almost the same as the second one but only works for
 * intel compiler/GCC 7.1/Clang 4, we still need to support older GCC.
 **************************','line_number':357,'multiline':True]
['text':' reduce sum across vector','line_number':372,'multiline':False]
['text':' expand the source vector and performs sum reduce','line_number':421,'multiline':False]
['text':' _NPY_SIMD_AVX512_ARITHMETIC_H','line_number':446,'multiline':False]
