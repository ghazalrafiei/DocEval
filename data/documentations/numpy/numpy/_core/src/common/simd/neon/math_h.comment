['text':'**************************
 * Elementary
 **************************','line_number':8,'multiline':True]
['text':' Absolute','line_number':11,'multiline':False]
['text':' Square','line_number':15,'multiline':False]
['text':' Square root','line_number':23,'multiline':False]
['text':' Based on ARM doc, see https://developer.arm.com/documentation/dui0204/j/CIHDIACI','line_number':28,'multiline':False]
['text':' guard against floating-point division-by-zero error','line_number':34,'multiline':False]
['text':' estimate to (1/√a)','line_number':36,'multiline':False]
['text':'*
         * Newton-Raphson iteration:
         *  x[n+1] = x[n] * (3-d * (x[n]*x[n]) )/2)
         * converges to (1/√d)if x0 is the result of VRSQRTE applied to d.
         *
         * NOTE: at least 3 iterations is needed to improve precision
         ','line_number':38,'multiline':True]
['text':' a * (1/√a)','line_number':48,'multiline':False]
['text':' return zero if the a is zero','line_number':50,'multiline':False]
['text':' - return zero if a is zero.','line_number':51,'multiline':False]
['text':' - return positive infinity if a is positive infinity','line_number':52,'multiline':False]
['text':' NPY_SIMD_F64','line_number':55,'multiline':False]
['text':' Reciprocal','line_number':57,'multiline':False]
['text':'*
     * Newton-Raphson iteration:
     *  x[n+1] = x[n] * (2-d * x[n])
     * converges to (1/d) if x0 is the result of VRECPE applied to d.
     *
     * NOTE: at least 3 iterations is needed to improve precision
     ','line_number':65,'multiline':True]
['text':' NPY_SIMD_F64','line_number':84,'multiline':False]
['text':' Maximum, natively mapping with no guarantees to handle NaN.','line_number':86,'multiline':False]
['text':' Maximum, supports IEEE floating-point arithmetic (IEC 60559),','line_number':89,'multiline':False]
['text':' - If one of the two vectors contains NaN, the equivalent element of the other vector is set','line_number':90,'multiline':False]
['text':' - Only if both corresponded elements are NaN, NaN is set.','line_number':91,'multiline':False]
['text':' Max, propagates NaNs','line_number':102,'multiline':False]
['text':' If any of corresponded element is NaN, NaN is set.','line_number':103,'multiline':False]
['text':' NPY_SIMD_F64','line_number':108,'multiline':False]
['text':' Maximum, integer operations','line_number':109,'multiline':False]
['text':' Minimum, natively mapping with no guarantees to handle NaN.','line_number':125,'multiline':False]
['text':' Minimum, supports IEEE floating-point arithmetic (IEC 60559),','line_number':128,'multiline':False]
['text':' - If one of the two vectors contains NaN, the equivalent element of the other vector is set','line_number':129,'multiline':False]
['text':' - Only if both corresponded elements are NaN, NaN is set.','line_number':130,'multiline':False]
['text':' Min, propagates NaNs','line_number':141,'multiline':False]
['text':' If any of corresponded element is NaN, NaN is set.','line_number':142,'multiline':False]
['text':' NPY_SIMD_F64','line_number':147,'multiline':False]
['text':' Minimum, integer operations','line_number':149,'multiline':False]
['text':' reduce min/max for all data types','line_number':164,'multiline':False]
['text':' NPY_SIMD_F64','line_number':260,'multiline':False]
['text':' round to nearest integer even','line_number':274,'multiline':False]
['text':' ARMv7 NEON only supports fp to int truncate conversion.','line_number':280,'multiline':False]
['text':' a magic trick of adding 1.5 * 2^23 is used for rounding','line_number':281,'multiline':False]
['text':' to nearest even and then subtract this magic number to get','line_number':282,'multiline':False]
['text':' the integer.','line_number':283,'multiline':False]
['text':'','line_number':284,'multiline':False]
['text':' 2^23','line_number':287,'multiline':False]
['text':' 1.5 * 2^23','line_number':288,'multiline':False]
['text':' eliminate nans to avoid invalid fp errors','line_number':290,'multiline':False]
['text':' round by add magic number 1.5 * 2^23','line_number':292,'multiline':False]
['text':' copysign','line_number':294,'multiline':False]
['text':' a if |a| >= 2^23 or a == NaN','line_number':296,'multiline':False]
['text':' NPY_SIMD_F64','line_number':304,'multiline':False]
['text':' ceil','line_number':306,'multiline':False]
['text':' 2^23','line_number':315,'multiline':False]
['text':' 1.5 * 2^23','line_number':316,'multiline':False]
['text':' eliminate nans to avoid invalid fp errors','line_number':319,'multiline':False]
['text':' round by add magic number 1.5 * 2^23','line_number':321,'multiline':False]
['text':' copysign','line_number':323,'multiline':False]
['text':' respects signed zero','line_number':328,'multiline':False]
['text':' a if |a| >= 2^23 or a == NaN','line_number':330,'multiline':False]
['text':' NPY_SIMD_F64','line_number':338,'multiline':False]
['text':' trunc','line_number':340,'multiline':False]
['text':' eliminate nans/inf to avoid invalid fp errors','line_number':355,'multiline':False]
['text':'*
         * On armv7, vcvtq.f32 handles special cases as follows:
         *  NaN return 0
         * +inf or +outrange return 0x80000000(-0.0f)
         * -inf or -outrange return 0x7fffffff(nan)
         ','line_number':358,'multiline':True]
['text':' respect signed zero, e.g. -0.5 -> -0.0','line_number':366,'multiline':False]
['text':' if overflow return a','line_number':369,'multiline':False]
['text':' a if a overflow or nonfinite','line_number':373,'multiline':False]
['text':' NPY_SIMD_F64','line_number':379,'multiline':False]
['text':' floor','line_number':381,'multiline':False]
['text':' 2^23','line_number':390,'multiline':False]
['text':' 1.5 * 2^23','line_number':391,'multiline':False]
['text':' eliminate nans to avoid invalid fp errors','line_number':395,'multiline':False]
['text':' round by add magic number 1.5 * 2^23','line_number':397,'multiline':False]
['text':' copysign','line_number':399,'multiline':False]
['text':' respects signed zero','line_number':404,'multiline':False]
['text':' a if |a| >= 2^23 or a == NaN','line_number':406,'multiline':False]
['text':' NPY_HAVE_ASIMD','line_number':411,'multiline':False]
['text':' NPY_SIMD_F64','line_number':414,'multiline':False]
['text':' _NPY_SIMD_NEON_MATH_H','line_number':416,'multiline':False]
