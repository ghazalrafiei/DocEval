['text':'**************************
 * Addition
 **************************','line_number':8,'multiline':True]
['text':' non-saturated','line_number':11,'multiline':False]
['text':' saturated','line_number':25,'multiline':False]
['text':' VSX','line_number':40,'multiline':False]
['text':'**************************
 * Subtraction
 **************************','line_number':46,'multiline':True]
['text':' non-saturated','line_number':49,'multiline':False]
['text':' saturated','line_number':63,'multiline':False]
['text':' VSX','line_number':78,'multiline':False]
['text':'**************************
 * Multiplication
 **************************','line_number':85,'multiline':True]
['text':' non-saturated','line_number':88,'multiline':False]
['text':' up to GCC 6 vec_mul only supports precisions and llong','line_number':89,'multiline':False]
['text':' vmuluwm can be used for unsigned or signed 32-bit integers','line_number':106,'multiline':False]
['text':'**************************
 * Integer Division
 **************************','line_number':134,'multiline':True]
['text':' See simd/intdiv.h for more clarification','line_number':137,'multiline':False]
['text':' divide each unsigned 8-bit element by a precomputed divisor','line_number':138,'multiline':False]
['text':' VSX','line_number':143,'multiline':False]
['text':' high part of unsigned multiplication','line_number':147,'multiline':False]
['text':' floor(a/d)     = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':152,'multiline':False]
['text':' divide each signed 8-bit element by a precomputed divisor','line_number':159,'multiline':False]
['text':' high part of signed multiplication','line_number':168,'multiline':False]
['text':' q              = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':173,'multiline':False]
['text':' trunc(a/d)     = (q ^ dsign) - dsign','line_number':174,'multiline':False]
['text':' divide each unsigned 16-bit element by a precomputed divisor','line_number':180,'multiline':False]
['text':' VSX','line_number':185,'multiline':False]
['text':' high part of unsigned multiplication','line_number':189,'multiline':False]
['text':' floor(a/d)     = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':194,'multiline':False]
['text':' divide each signed 16-bit element by a precomputed divisor (round towards zero)','line_number':201,'multiline':False]
['text':' VSX','line_number':206,'multiline':False]
['text':' high part of signed multiplication','line_number':210,'multiline':False]
['text':' q              = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':215,'multiline':False]
['text':' trunc(a/d)     = (q ^ dsign) - dsign','line_number':216,'multiline':False]
['text':' divide each unsigned 32-bit element by a precomputed divisor','line_number':222,'multiline':False]
['text':' high part of unsigned multiplication','line_number':226,'multiline':False]
['text':' VSX','line_number':228,'multiline':False]
['text':' Doubleword integer wide multiplication supported by GCC 8+','line_number':230,'multiline':False]
['text':' Doubleword integer wide multiplication supported by GCC 8+','line_number':235,'multiline':False]
['text':' high part of unsigned multiplication','line_number':239,'multiline':False]
['text':' floor(x/d)     = (((a-mulhi) >> sh1) + mulhi) >> sh2','line_number':242,'multiline':False]
['text':' divide each signed 32-bit element by a precomputed divisor (round towards zero)','line_number':249,'multiline':False]
['text':' high part of signed multiplication','line_number':253,'multiline':False]
['text':' Doubleword integer wide multiplication supported by GCC8+','line_number':257,'multiline':False]
['text':' Doubleword integer wide multiplication supported by GCC8+','line_number':262,'multiline':False]
['text':' high part of signed multiplication','line_number':266,'multiline':False]
['text':' q              = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':269,'multiline':False]
['text':' trunc(a/d)     = (q ^ dsign) - dsign','line_number':270,'multiline':False]
['text':' divide each unsigned 64-bit element by a precomputed divisor','line_number':276,'multiline':False]
['text':' divide each signed 64-bit element by a precomputed divisor (round towards zero)','line_number':286,'multiline':False]
['text':'**************************
 * Division
 **************************','line_number':293,'multiline':True]
['text':'**************************
 * FUSED
 **************************','line_number':301,'multiline':True]
['text':' multiply and add, a*b + c','line_number':304,'multiline':False]
['text':' multiply and subtract, a*b - c','line_number':306,'multiline':False]
['text':' negate multiply and add, -(a*b) + c','line_number':313,'multiline':False]
['text':' equivalent to -(a*b - c)','line_number':314,'multiline':False]
['text':' negate multiply and subtract, -(a*b) - c','line_number':316,'multiline':False]
['text':' equivalent to -(a*b + c)','line_number':318,'multiline':False]
['text':' multiply, add for odd elements and subtract even elements.','line_number':325,'multiline':False]
['text':' (a * b) -+ c','line_number':326,'multiline':False]
['text':'**************************
 * Summation
 **************************','line_number':339,'multiline':True]
['text':' reduce sum across vector','line_number':342,'multiline':False]
['text':' expand the source vector and performs sum reduce','line_number':378,'multiline':False]
['text':' VSX','line_number':399,'multiline':False]
['text':' _NPY_SIMD_VEC_ARITHMETIC_H','line_number':409,'multiline':False]
