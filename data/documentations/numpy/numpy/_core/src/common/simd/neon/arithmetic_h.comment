['text':'**************************
 * Addition
 **************************','line_number':8,'multiline':True]
['text':' non-saturated','line_number':11,'multiline':False]
['text':' saturated','line_number':23,'multiline':False]
['text':'**************************
 * Subtraction
 **************************','line_number':29,'multiline':True]
['text':' non-saturated','line_number':32,'multiline':False]
['text':' saturated','line_number':44,'multiline':False]
['text':'**************************
 * Multiplication
 **************************','line_number':50,'multiline':True]
['text':' non-saturated','line_number':53,'multiline':False]
['text':'**************************
 * Integer Division
 **************************','line_number':63,'multiline':True]
['text':' See simd/intdiv.h for more clarification','line_number':66,'multiline':False]
['text':' divide each unsigned 8-bit element by a precomputed divisor','line_number':67,'multiline':False]
['text':' high part of unsigned multiplication','line_number':71,'multiline':False]
['text':' get the high unsigned bytes','line_number':75,'multiline':False]
['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':82,'multiline':False]
['text':' divide each signed 8-bit element by a precomputed divisor (round towards zero)','line_number':89,'multiline':False]
['text':' high part of signed multiplication','line_number':93,'multiline':False]
['text':' get the high unsigned bytes','line_number':97,'multiline':False]
['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':104,'multiline':False]
['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':105,'multiline':False]
['text':' divide each unsigned 16-bit element by a precomputed divisor','line_number':111,'multiline':False]
['text':' high part of unsigned multiplication','line_number':115,'multiline':False]
['text':' get the high unsigned bytes','line_number':119,'multiline':False]
['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':126,'multiline':False]
['text':' divide each signed 16-bit element by a precomputed divisor (round towards zero)','line_number':133,'multiline':False]
['text':' high part of signed multiplication','line_number':137,'multiline':False]
['text':' get the high unsigned bytes','line_number':141,'multiline':False]
['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':148,'multiline':False]
['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':149,'multiline':False]
['text':' divide each unsigned 32-bit element by a precomputed divisor','line_number':155,'multiline':False]
['text':' high part of unsigned multiplication','line_number':159,'multiline':False]
['text':' get the high unsigned bytes','line_number':163,'multiline':False]
['text':' floor(a/d)       = (mulhi + ((a-mulhi) >> sh1)) >> sh2','line_number':170,'multiline':False]
['text':' divide each signed 32-bit element by a precomputed divisor (round towards zero)','line_number':177,'multiline':False]
['text':' high part of signed multiplication','line_number':181,'multiline':False]
['text':' get the high unsigned bytes','line_number':185,'multiline':False]
['text':' q               = ((a + mulhi) >> sh1) - XSIGN(a)','line_number':192,'multiline':False]
['text':' trunc(a/d)      = (q ^ dsign) - dsign','line_number':193,'multiline':False]
['text':' divide each unsigned 64-bit element by a divisor','line_number':199,'multiline':False]
['text':' returns the high 64 bits of signed 64-bit multiplication','line_number':205,'multiline':False]
['text':'**************************
 * Division
 **************************','line_number':211,'multiline':True]
['text':' Based on ARM doc, see https://developer.arm.com/documentation/dui0204/j/CIHDIACI','line_number':219,'multiline':False]
['text':' estimate to 1/b','line_number':220,'multiline':False]
['text':'*
         * Newton-Raphson iteration:
         *  x[n+1] = x[n] * (2-d * x[n])
         * converges to (1/d) if x0 is the result of VRECPE applied to d.
         *
         *  NOTE: at least 3 iterations is needed to improve precision
         ','line_number':222,'multiline':True]
['text':' a/b = a*recip(b)','line_number':232,'multiline':False]
['text':'**************************
 * FUSED F32
 **************************','line_number':238,'multiline':True]
['text':' FMA','line_number':241,'multiline':False]
['text':' multiply and add, a*b + c','line_number':242,'multiline':False]
['text':' multiply and subtract, a*b - c','line_number':245,'multiline':False]
['text':' negate multiply and add, -(a*b) + c','line_number':248,'multiline':False]
['text':' negate multiply and subtract, -(a*b) - c','line_number':251,'multiline':False]
['text':' multiply and add, a*b + c','line_number':255,'multiline':False]
['text':' multiply and subtract, a*b - c','line_number':258,'multiline':False]
['text':' negate multiply and add, -(a*b) + c','line_number':261,'multiline':False]
['text':' negate multiply and subtract, -(a*b) - c','line_number':264,'multiline':False]
['text':' multiply, add for odd elements and subtract even elements.','line_number':268,'multiline':False]
['text':' (a * b) -+ c','line_number':269,'multiline':False]
['text':'**************************
 * FUSED F64
 **************************','line_number':276,'multiline':True]
['text':' NPY_SIMD_F64','line_number':293,'multiline':False]
['text':'**************************
 * Summation
 **************************','line_number':295,'multiline':True]
['text':' reduce sum across vector','line_number':298,'multiline':False]
['text':' expand the source vector and performs sum reduce','line_number':323,'multiline':False]
['text':' _NPY_SIMD_NEON_ARITHMETIC_H','line_number':343,'multiline':False]
