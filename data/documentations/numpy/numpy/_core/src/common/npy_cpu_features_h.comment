['text':' for PyObject','line_number':4,'multiline':False]
['text':' for NPY_VISIBILITY_HIDDEN','line_number':5,'multiline':False]
['text':' X86','line_number':14,'multiline':False]
['text':' AVX2 & FMA3, provides backward compatibility','line_number':29,'multiline':False]
['text':' X86 CPU Groups','line_number':48,'multiline':False]
['text':' Knights Landing (F,CD,ER,PF)','line_number':49,'multiline':False]
['text':' Knights Mill    (F,CD,ER,PF,4FMAPS,4VNNIW,VPOPCNTDQ)','line_number':51,'multiline':False]
['text':' Skylake-X       (F,CD,BW,DQ,VL)','line_number':53,'multiline':False]
['text':' Cascade Lake    (F,CD,BW,DQ,VL,VNNI)','line_number':55,'multiline':False]
['text':' Cannon Lake     (F,CD,BW,DQ,VL,IFMA,VBMI)','line_number':57,'multiline':False]
['text':' Ice Lake        (F,CD,BW,DQ,VL,IFMA,VBMI,VNNI,VBMI2,BITALG,VPOPCNTDQ)','line_number':59,'multiline':False]
['text':' Sapphire Rapids (Ice Lake, AVX512FP16)','line_number':61,'multiline':False]
['text':' IBM/POWER VSX','line_number':64,'multiline':False]
['text':' POWER7','line_number':65,'multiline':False]
['text':' POWER8','line_number':67,'multiline':False]
['text':' POWER9','line_number':69,'multiline':False]
['text':' POWER10','line_number':71,'multiline':False]
['text':' ARM','line_number':74,'multiline':False]
['text':' FMA','line_number':77,'multiline':False]
['text':' Advanced SIMD','line_number':79,'multiline':False]
['text':' ARMv8.2 half-precision','line_number':81,'multiline':False]
['text':' ARMv8.2 half-precision vector arithm','line_number':83,'multiline':False]
['text':' ARMv8.2 dot product','line_number':85,'multiline':False]
['text':' ARMv8.2 single&half-precision multiply','line_number':87,'multiline':False]
['text':' Scalable Vector Extensions (SVE)','line_number':89,'multiline':False]
['text':' IBM/ZARCH','line_number':92,'multiline':False]
['text':' Vector-Enhancements Facility 1','line_number':95,'multiline':False]
['text':' Vector-Enhancements Facility 2','line_number':98,'multiline':False]
['text':'
 * Initialize CPU features
 *
 * This function
 *  - detects runtime CPU features
 *  - check that baseline CPU features are present
 *  - uses 'NPY_DISABLE_CPU_FEATURES' to disable dispatchable features
 *  - uses 'NPY_ENABLE_CPU_FEATURES' to enable dispatchable features
 *
 * It will set a RuntimeError when 
 *  - CPU baseline features from the build are not supported at runtime
 *  - 'NPY_DISABLE_CPU_FEATURES' tries to disable a baseline feature
 *  - 'NPY_DISABLE_CPU_FEATURES' and 'NPY_ENABLE_CPU_FEATURES' are
 *    simultaneously set
 *  - 'NPY_ENABLE_CPU_FEATURES' tries to enable a feature that is not supported
 *    by the machine or build
 *  - 'NPY_ENABLE_CPU_FEATURES' tries to enable a feature when the project was
 *    not built with any feature optimization support
 *  
 * It will set an ImportWarning when:
 *  - 'NPY_DISABLE_CPU_FEATURES' tries to disable a feature that is not supported
 *    by the machine or build
 *  - 'NPY_DISABLE_CPU_FEATURES' or 'NPY_ENABLE_CPU_FEATURES' tries to
 *    disable/enable a feature when the project was not built with any feature
 *    optimization support
 * 
 * return 0 on success otherwise return -1
 ','line_number':104,'multiline':True]
['text':'
 * return 0 if CPU feature isn't available
 * note: `npy_cpu_init` must be called first otherwise it will always return 0
','line_number':135,'multiline':True]
['text':'
 * return a new dictionary contains CPU feature names
 * with runtime availability.
 * same as npy_cpu_have, `npy_cpu_init` must be called first.
 ','line_number':145,'multiline':True]
['text':'
 * Return a new a Python list contains the minimal set of required optimizations
 * that supported by the compiler and platform according to the specified
 * values to command argument '--cpu-baseline'.
 *
 * This function is mainly used to implement umath's attribute '__cpu_baseline__',
 * and the items are sorted from the lowest to highest interest.
 *
 * For example, according to the default build configuration and by assuming the compiler
 * support all the involved optimizations then the returned list should equivalent to:
 *
 * On x86: ['SSE', 'SSE2']
 * On x64: ['SSE', 'SSE2', 'SSE3']
 * On armhf: []
 * On aarch64: ['NEON', 'NEON_FP16', 'NEON_VPFV4', 'ASIMD']
 * On ppc64: []
 * On ppc64le: ['VSX', 'VSX2']
 * On s390x: []
 * On any other arch or if the optimization is disabled: []
 ','line_number':152,'multiline':True]
['text':'
 * Return a new a Python list contains the dispatched set of additional optimizations
 * that supported by the compiler and platform according to the specified
 * values to command argument '--cpu-dispatch'.
 *
 * This function is mainly used to implement umath's attribute '__cpu_dispatch__',
 * and the items are sorted from the lowest to highest interest.
 *
 * For example, according to the default build configuration and by assuming the compiler
 * support all the involved optimizations then the returned list should equivalent to:
 *
 * On x86: ['SSE3', 'SSSE3', 'SSE41', 'POPCNT', 'SSE42', 'AVX', 'F16C', 'FMA3', 'AVX2', 'AVX512F', ...]
 * On x64: ['SSSE3', 'SSE41', 'POPCNT', 'SSE42', 'AVX', 'F16C', 'FMA3', 'AVX2', 'AVX512F', ...]
 * On armhf: ['NEON', 'NEON_FP16', 'NEON_VPFV4', 'ASIMD', 'ASIMDHP', 'ASIMDDP', 'ASIMDFHM']
 * On aarch64: ['ASIMDHP', 'ASIMDDP', 'ASIMDFHM']
 * On ppc64:  ['VSX', 'VSX2', 'VSX3', 'VSX4']
 * On ppc64le: ['VSX3', 'VSX4']
 * On s390x: ['VX', 'VXE', VXE2]
 * On any other arch or if the optimization is disabled: []
 ','line_number':174,'multiline':True]
['text':' NUMPY_CORE_SRC_COMMON_NPY_CPU_FEATURES_H_','line_number':201,'multiline':False]
