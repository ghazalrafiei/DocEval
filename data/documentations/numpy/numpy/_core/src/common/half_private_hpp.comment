['text':'
 * The following functions that emulating float/double/half conversions
 * are copied from npymath without any changes to its functionality.
 ','line_number':7,'multiline':True]
['text':' Exponent overflow/NaN converts to signed inf/NaN ','line_number':22,'multiline':True]
['text':' Inf or NaN ','line_number':25,'multiline':True]
['text':' NaN - propagate the flag in the significand... ','line_number':28,'multiline':True]
['text':' ...but make sure it stays a NaN ','line_number':30,'multiline':True]
['text':' signed inf ','line_number':36,'multiline':True]
['text':' overflow to signed inf ','line_number':41,'multiline':True]
['text':' Exponent underflow converts to a subnormal half or signed zero ','line_number':48,'multiline':True]
['text':'
         * Signed zeros, subnormal floats, and floats with small
         * exponents all convert to signed zero half-floats.
         ','line_number':50,'multiline':True]
['text':' If f != 0, it underflowed to 0 ','line_number':56,'multiline':True]
['text':' Make the subnormal significand ','line_number':63,'multiline':True]
['text':' If it's not exactly represented, it underflowed ','line_number':67,'multiline':True]
['text':'
         * Usually the significand is shifted by 13. For subnormals an
         * additional shift needs to occur. This shift is one for the largest
         * exponent giving a subnormal `f_exp = 0x38000000 >> 23 = 112`, which
         * offsets the new first bit. At most the shift can be 1+10 bits.
         ','line_number':72,'multiline':True]
['text':' Handle rounding by adding 1 to the bit beyond half precision ','line_number':79,'multiline':True]
['text':'
             * If the last bit in the half significand is 0 (already even), and
             * the remaining bit pattern is 1000...0, then we do not add one
             * to the bit after the half significand. However, the (113 - f_exp)
             * shift can lose up to 11 bits, so the || checks them in the original.
             * In all other cases, we can just add one.
             ','line_number':81,'multiline':True]
['text':'
         * If the rounding causes a bit to spill into h_exp, it will
         * increment h_exp from zero to one and h_sig will be zero.
         * This is the correct result.
         ','line_number':96,'multiline':True]
['text':' Regular case with no overflow or underflow ','line_number':104,'multiline':True]
['text':' Handle rounding by adding 1 to the bit beyond half precision ','line_number':106,'multiline':True]
['text':'
         * If the last bit in the half significand is 0 (already even), and
         * the remaining bit pattern is 1000...0, then we do not add one
         * to the bit after the half significand.  In all other cases, we do.
         ','line_number':109,'multiline':True]
['text':'
     * If the rounding causes a bit to spill into h_exp, it will
     * increment h_exp by one and h_sig will be zero.  This is the
     * correct result.  h_exp may increment to 15, at greatest, in
     * which case the result overflows to a signed inf.
     ','line_number':122,'multiline':True]
['text':' Exponent overflow/NaN converts to signed inf/NaN ','line_number':149,'multiline':True]
['text':' Inf or NaN ','line_number':152,'multiline':True]
['text':' NaN - propagate the flag in the significand... ','line_number':155,'multiline':True]
['text':' ...but make sure it stays a NaN ','line_number':157,'multiline':True]
['text':' signed inf ','line_number':163,'multiline':True]
['text':' overflow to signed inf ','line_number':167,'multiline':True]
['text':' Exponent underflow converts to subnormal half or signed zero ','line_number':175,'multiline':True]
['text':'
         * Signed zeros, subnormal floats, and floats with small
         * exponents all convert to signed zero half-floats.
         ','line_number':177,'multiline':True]
['text':' If d != 0, it underflowed to 0 ','line_number':183,'multiline':True]
['text':' Make the subnormal significand ','line_number':190,'multiline':True]
['text':' If it's not exactly represented, it underflowed ','line_number':194,'multiline':True]
['text':'
         * Unlike floats, doubles have enough room to shift left to align
         * the subnormal significand leading to no loss of the last bits.
         * The smallest possible exponent giving a subnormal is:
         * `d_exp = 0x3e60000000000000 >> 52 = 998`. All larger subnormals are
         * shifted with respect to it. This adds a shift of 10+1 bits the final
         * right shift when comparing it to the one in the normal branch.
         ','line_number':199,'multiline':True]
['text':' Handle rounding by adding 1 to the bit beyond half precision ','line_number':209,'multiline':True]
['text':'
             * If the last bit in the half significand is 0 (already even), and
             * the remaining bit pattern is 1000...0, then we do not add one
             * to the bit after the half significand.  In all other cases, we do.
             ','line_number':211,'multiline':True]
['text':'
         * If the rounding causes a bit to spill into h_exp, it will
         * increment h_exp from zero to one and h_sig will be zero.
         * This is the correct result.
         ','line_number':224,'multiline':True]
['text':' Regular case with no overflow or underflow ','line_number':232,'multiline':True]
['text':' Handle rounding by adding 1 to the bit beyond half precision ','line_number':234,'multiline':True]
['text':'
         * If the last bit in the half significand is 0 (already even), and
         * the remaining bit pattern is 1000...0, then we do not add one
         * to the bit after the half significand.  In all other cases, we do.
         ','line_number':237,'multiline':True]
['text':'
     * If the rounding causes a bit to spill into h_exp, it will
     * increment h_exp by one and h_sig will be zero.  This is the
     * correct result.  h_exp may increment to 15, at greatest, in
     * which case the result overflows to a signed inf.
     ','line_number':251,'multiline':True]
['text':' 0 or subnormal','line_number':274,'multiline':False]
['text':' Signed zero','line_number':276,'multiline':False]
['text':' Subnormal','line_number':280,'multiline':False]
['text':' inf or NaN','line_number':290,'multiline':False]
['text':' All-ones exponent and a copy of the significand','line_number':291,'multiline':False]
['text':' normalized','line_number':293,'multiline':False]
['text':' Just need to adjust the exponent and shift','line_number':294,'multiline':False]
['text':' 0 or subnormal','line_number':304,'multiline':False]
['text':' Signed zero','line_number':306,'multiline':False]
['text':' Subnormal','line_number':310,'multiline':False]
['text':' inf or NaN','line_number':320,'multiline':False]
['text':' All-ones exponent and a copy of the significand','line_number':321,'multiline':False]
['text':' normalized','line_number':323,'multiline':False]
['text':' Just need to adjust the exponent and shift','line_number':324,'multiline':False]
['text':' namespace np::half_private','line_number':329,'multiline':False]
['text':' NUMPY_CORE_SRC_COMMON_HALF_PRIVATE_HPP','line_number':330,'multiline':False]
