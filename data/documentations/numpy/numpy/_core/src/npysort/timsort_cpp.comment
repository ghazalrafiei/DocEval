['text':' -*- c -*- ','line_number':1,'multiline':True]
['text':'
 * The purpose of this module is to add faster sort functions
 * that are type-specific.  This is done by altering the
 * function table for the builtin descriptors.
 *
 * These sorting functions are copied almost directly from numarray
 * with a few modifications (complex comparisons compare the imaginary
 * part if the real parts are equal, for example), and the names
 * are changed.
 *
 * The original sorting code is due to Charles R. Harris who wrote
 * it for numarray.
 ','line_number':3,'multiline':True]
['text':'
 * Quick sort is usually the fastest, but the worst case scenario can
 * be slower than the merge and heap sorts.  The merge sort requires
 * extra memory and so for large arrays may not be useful.
 *
 * The merge sort is *stable*, meaning that equal components
 * are unmoved from their entry versions, so it can be used to
 * implement lexicographic sorting on multiple keys.
 *
 * The heap sort is included for completeness.
 ','line_number':17,'multiline':True]
['text':' For details of Timsort, refer to
 * https://github.com/python/cpython/blob/3.7/Objects/listsort.txt
 ','line_number':29,'multiline':True]
['text':' enough for 32 * 1.618 ** 128 elements ','line_number':42,'multiline':True]
['text':' start pointer ','line_number':59,'multiline':True]
['text':' length ','line_number':60,'multiline':True]
['text':' buffer for argsort. Declared here to avoid multiple declarations. ','line_number':63,'multiline':True]
['text':' buffer method ','line_number':69,'multiline':True]
['text':'
 *****************************************************************************
 **                            NUMERIC SORTS                                **
 *****************************************************************************
 ','line_number':90,'multiline':True]
['text':' (not strictly) ascending sequence ','line_number':136,'multiline':True]
['text':' (strictly) descending sequence ','line_number':142,'multiline':True]
['text':' insertion sort ','line_number':165,'multiline':True]
['text':' when the left part of the array (p1) is smaller, copy p1 to buffer
 * and merge from left to right
 ','line_number':182,'multiline':True]
['text':' first element must be in p2 otherwise skipped in the caller ','line_number':191,'multiline':True]
['text':' when the right part of the array (p2) is smaller, copy p2 to buffer
 * and merge from right to left
 ','line_number':208,'multiline':True]
['text':' first element must be in p1 otherwise skipped in the caller ','line_number':221,'multiline':True]
['text':' Note: the naming convention of gallop functions are different from that of
 * CPython. For example, here gallop_right means gallop from left toward right,
 * whereas in CPython gallop_right means gallop
 * and find the right most element among equal elements
 ','line_number':239,'multiline':True]
['text':' arr[ofs] is never accessed ','line_number':259,'multiline':True]
['text':' ofs = 1, 3, 7, 15... ','line_number':268,'multiline':True]
['text':' now that arr[last_ofs] <= key < arr[ofs] ','line_number':273,'multiline':True]
['text':' now that arr[ofs-1] <= key < arr[ofs] ','line_number':285,'multiline':True]
['text':' now that arr[size-ofs-1] < key <= arr[size-last_ofs-1] ','line_number':317,'multiline':True]
['text':' now that arr[r-1] < key <= arr[r] ','line_number':332,'multiline':True]
['text':' arr[s2] belongs to arr[s1+k].
     * if try to comment this out for debugging purpose, remember
     * in the merging process the first element is skipped
     ','line_number':347,'multiline':True]
['text':' already sorted ','line_number':354,'multiline':True]
['text':' arr[s2-1] belongs to arr[s2+l2] ','line_number':361,'multiline':True]
['text':' argsort ','line_number':528,'multiline':True]
['text':' (not strictly) ascending sequence ','line_number':546,'multiline':True]
['text':' (strictly) descending sequence ','line_number':553,'multiline':True]
['text':' insertion sort ','line_number':577,'multiline':True]
['text':' arr[ofs] is never accessed ','line_number':611,'multiline':True]
['text':' ofs = 1, 3, 7, 15... ','line_number':620,'multiline':True]
['text':' now that arr[tosort[last_ofs]] <= key < arr[tosort[ofs]] ','line_number':625,'multiline':True]
['text':' now that arr[tosort[ofs-1]] <= key < arr[tosort[ofs]] ','line_number':637,'multiline':True]
['text':' now that arr[tosort[size-ofs-1]] < key <= arr[tosort[size-last_ofs-1]]
     ','line_number':670,'multiline':True]
['text':' now that arr[tosort[r-1]] < key <= arr[tosort[r]] ','line_number':686,'multiline':True]
['text':' first element must be in p2 otherwise skipped in the caller ','line_number':697,'multiline':True]
['text':' first element must be in p1 otherwise skipped in the caller ','line_number':725,'multiline':True]
['text':' tosort[s2] belongs to tosort[s1+k] ','line_number':755,'multiline':True]
['text':' already sorted ','line_number':759,'multiline':True]
['text':' tosort[s2-1] belongs to tosort[s2+l2] ','line_number':766,'multiline':True]
['text':' For string sorts and generic sort, element comparisons are very expensive,
 * and the time cost of insertion sort (involves N**2 comparison) clearly
 * hurts. Implementing binary insertion sort and probably gallop mode during
 * merging process can hopefully boost the performance. Here as a temporary
 * workaround we use shorter run length to reduce the cost of insertion sort.
 ','line_number':937,'multiline':True]
['text':'
 *****************************************************************************
 **                             STRING SORTS                                **
 *****************************************************************************
 ','line_number':957,'multiline':True]
['text':' (not strictly) ascending sequence ','line_number':1005,'multiline':True]
['text':' (strictly) descending sequence ','line_number':1012,'multiline':True]
['text':' insertion sort ','line_number':1036,'multiline':True]
['text':' arr[ofs] is never accessed ','line_number':1069,'multiline':True]
['text':' ofs = 1, 3, 7, 15... ','line_number':1078,'multiline':True]
['text':' now that arr[last_ofs*len] <= key < arr[ofs*len] ','line_number':1083,'multiline':True]
['text':' now that arr[(ofs-1)*len] <= key < arr[ofs*len] ','line_number':1095,'multiline':True]
['text':' now that arr[(size-ofs-1)*len] < key <= arr[(size-last_ofs-1)*len] ','line_number':1128,'multiline':True]
['text':' now that arr[(r-1)*len] < key <= arr[r*len] ','line_number':1143,'multiline':True]
['text':' first element must be in p2 otherwise skipped in the caller ','line_number':1155,'multiline':True]
['text':' first element must be in p1 otherwise skipped in the caller ','line_number':1189,'multiline':True]
['text':' arr[s2] belongs to arr[s1+k] ','line_number':1225,'multiline':True]
['text':' already sorted ','line_number':1230,'multiline':True]
['text':' arr[s2-1] belongs to arr[s2+l2] ','line_number':1237,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':1377,'multiline':True]
['text':' used for insertion sort and gallop key ','line_number':1387,'multiline':True]
['text':' both s and l are scaled by len ','line_number':1396,'multiline':True]
['text':' argsort ','line_number':1425,'multiline':True]
['text':' (not strictly) ascending sequence ','line_number':1442,'multiline':True]
['text':' (strictly) descending sequence ','line_number':1450,'multiline':True]
['text':' insertion sort ','line_number':1475,'multiline':True]
['text':' now that arr[tosort[size-ofs-1]*len] < key <=
     * arr[tosort[size-last_ofs-1]*len] ','line_number':1522,'multiline':True]
['text':' now that arr[tosort[r-1]*len] < key <= arr[tosort[r]*len] ','line_number':1538,'multiline':True]
['text':' arr[ofs] is never accessed ','line_number':1558,'multiline':True]
['text':' ofs = 1, 3, 7, 15... ','line_number':1567,'multiline':True]
['text':' now that arr[tosort[last_ofs]*len] <= key < arr[tosort[ofs]*len] ','line_number':1572,'multiline':True]
['text':' now that arr[tosort[ofs-1]*len] <= key < arr[tosort[ofs]*len] ','line_number':1584,'multiline':True]
['text':' first element must be in p2 otherwise skipped in the caller ','line_number':1595,'multiline':True]
['text':' first element must be in p1 otherwise skipped in the caller ','line_number':1623,'multiline':True]
['text':' tosort[s2] belongs to tosort[s1+k] ','line_number':1653,'multiline':True]
['text':' already sorted ','line_number':1657,'multiline':True]
['text':' tosort[s2-1] belongs to tosort[s2+l2] ','line_number':1664,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':1806,'multiline':True]
['text':' both s and l are scaled by len ','line_number':1818,'multiline':True]
['text':'
 *****************************************************************************
 **                             GENERIC SORT                                **
 *****************************************************************************
 ','line_number':1848,'multiline':True]
['text':' (not strictly) ascending sequence ','line_number':1892,'multiline':True]
['text':' (strictly) descending sequence ','line_number':1899,'multiline':True]
['text':' insertion sort ','line_number':1923,'multiline':True]
['text':' arr[ofs] is never accessed ','line_number':1955,'multiline':True]
['text':' ofs = 1, 3, 7, 15... ','line_number':1964,'multiline':True]
['text':' now that arr[last_ofs*len] <= key < arr[ofs*len] ','line_number':1969,'multiline':True]
['text':' now that arr[(ofs-1)*len] <= key < arr[ofs*len] ','line_number':1981,'multiline':True]
['text':' now that arr[(size-ofs-1)*len] < key <= arr[(size-last_ofs-1)*len] ','line_number':2013,'multiline':True]
['text':' now that arr[(r-1)*len] < key <= arr[r*len] ','line_number':2028,'multiline':True]
['text':' first element must be in p2 otherwise skipped in the caller ','line_number':2038,'multiline':True]
['text':' first element must be in p1 otherwise skipped in the caller ','line_number':2071,'multiline':True]
['text':' arr[s2] belongs to arr[s1+k] ','line_number':2107,'multiline':True]
['text':' already sorted ','line_number':2112,'multiline':True]
['text':' arr[s2-1] belongs to arr[s2+l2] ','line_number':2119,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':2259,'multiline':True]
['text':' used for insertion sort and gallop key ','line_number':2270,'multiline':True]
['text':' both s and l are scaled by len ','line_number':2281,'multiline':True]
['text':' argsort ','line_number':2311,'multiline':True]
['text':' (not strictly) ascending sequence ','line_number':2328,'multiline':True]
['text':' (strictly) descending sequence ','line_number':2336,'multiline':True]
['text':' insertion sort ','line_number':2361,'multiline':True]
['text':' now that arr[tosort[size-ofs-1]*len] < key <=
     * arr[tosort[size-last_ofs-1]*len] ','line_number':2408,'multiline':True]
['text':' now that arr[tosort[r-1]*len] < key <= arr[tosort[r]*len] ','line_number':2424,'multiline':True]
['text':' arr[ofs] is never accessed ','line_number':2444,'multiline':True]
['text':' ofs = 1, 3, 7, 15... ','line_number':2453,'multiline':True]
['text':' now that arr[tosort[last_ofs]*len] <= key < arr[tosort[ofs]*len] ','line_number':2458,'multiline':True]
['text':' now that arr[tosort[ofs-1]*len] <= key < arr[tosort[ofs]*len] ','line_number':2470,'multiline':True]
['text':' first element must be in p2 otherwise skipped in the caller ','line_number':2481,'multiline':True]
['text':' first element must be in p1 otherwise skipped in the caller ','line_number':2509,'multiline':True]
['text':' tosort[s2] belongs to tosort[s1+k] ','line_number':2539,'multiline':True]
['text':' already sorted ','line_number':2544,'multiline':True]
['text':' tosort[s2-1] belongs to tosort[s2+l2] ','line_number':2551,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':2695,'multiline':True]
['text':' both s and l are scaled by len ','line_number':2708,'multiline':True]
['text':'**************************************
 * C > C++ dispatch
 **************************************','line_number':2738,'multiline':True]
