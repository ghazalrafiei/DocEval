['text':' -*- c -*- ','line_number':1,'multiline':True]
['text':'
 * The purpose of this module is to add faster sort functions
 * that are type-specific.  This is done by altering the
 * function table for the builtin descriptors.
 *
 * These sorting functions are copied almost directly from numarray
 * with a few modifications (complex comparisons compare the imaginary
 * part if the real parts are equal, for example), and the names
 * are changed.
 *
 * The original sorting code is due to Charles R. Harris who wrote
 * it for numarray.
 ','line_number':3,'multiline':True]
['text':'
 * Quick sort is usually the fastest, but the worst case scenario is O(N^2) so
 * the code switches to the O(NlogN) worst case heapsort if not enough progress
 * is made on the large side of the two quicksort partitions. This improves the
 * worst case while still retaining the speed of quicksort for the common case.
 * This is variant known as introsort.
 *
 *
 * def introsort(lower, higher, recursion_limit=log2(higher - lower + 1) * 2):
 *   # sort remainder with heapsort if we are not making enough progress
 *   # we arbitrarily choose 2 * log(n) as the cutoff point
 *   if recursion_limit < 0:
 *       heapsort(lower, higher)
 *       return
 *
 *   if lower < higher:
 *      pivot_pos = partition(lower, higher)
 *      # recurse into smaller first and leave larger on stack
 *      # this limits the required stack space
 *      if (pivot_pos - lower > higher - pivot_pos):
 *          quicksort(pivot_pos + 1, higher, recursion_limit - 1)
 *          quicksort(lower, pivot_pos, recursion_limit - 1)
 *      else:
 *          quicksort(lower, pivot_pos, recursion_limit - 1)
 *          quicksort(pivot_pos + 1, higher, recursion_limit - 1)
 *
 *
 * the below code implements this converted to an iteration and as an
 * additional minor optimization skips the recursion depth checking on the
 * smaller partition as it is always less than half of the remaining data and
 * will thus terminate fast enough
 ','line_number':17,'multiline':True]
['text':'
 * pushing largest partition has upper bound of log2(n) space
 * we store two pointers each time
 ','line_number':65,'multiline':True]
['text':' Disable AVX512 sorting on CYGWIN until we can figure','line_number':74,'multiline':False]
['text':' out why it has test failures','line_number':75,'multiline':False]
['text':' x86 32-bit and 64-bit','line_number':84,'multiline':False]
['text':' x86 32-bit and 64-bit','line_number':95,'multiline':False]
['text':' __CYGWIN__','line_number':108,'multiline':False]
['text':' to avoid unused arg warn','line_number':109,'multiline':False]
['text':' __CYGWIN__','line_number':127,'multiline':False]
['text':' to avoid unused arg warn','line_number':128,'multiline':False]
['text':'
 *****************************************************************************
 **                            NUMERIC SORTS                                **
 *****************************************************************************
 ','line_number':132,'multiline':True]
['text':' quicksort partition ','line_number':158,'multiline':True]
['text':' push largest partition on stack ','line_number':187,'multiline':True]
['text':' insertion sort ','line_number':201,'multiline':True]
['text':' quicksort partition ','line_number':244,'multiline':True]
['text':' push largest partition on stack ','line_number':273,'multiline':True]
['text':' insertion sort ','line_number':287,'multiline':True]
['text':'
 *****************************************************************************
 **                             STRING SORTS                                **
 *****************************************************************************
 ','line_number':310,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':330,'multiline':True]
['text':' quicksort partition ','line_number':346,'multiline':True]
['text':' push largest partition on stack ','line_number':375,'multiline':True]
['text':' insertion sort ','line_number':389,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':431,'multiline':True]
['text':' quicksort partition ','line_number':442,'multiline':True]
['text':' push largest partition on stack ','line_number':471,'multiline':True]
['text':' insertion sort ','line_number':485,'multiline':True]
['text':'
 *****************************************************************************
 **                             GENERIC SORT                                **
 *****************************************************************************
 ','line_number':508,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':530,'multiline':True]
['text':' quicksort partition ','line_number':546,'multiline':True]
['text':'
             * Generic comparisons may be buggy, so don't rely on the sentinels
             * to keep the pointers from going out of bounds.
             ','line_number':561,'multiline':True]
['text':' push largest partition on stack ','line_number':579,'multiline':True]
['text':' insertion sort ','line_number':593,'multiline':True]
['text':' Items that have zero size don't make sense to sort ','line_number':635,'multiline':True]
['text':' quicksort partition ','line_number':646,'multiline':True]
['text':' push largest partition on stack ','line_number':675,'multiline':True]
['text':' insertion sort ','line_number':689,'multiline':True]
['text':'**************************************
 * C > C++ dispatch
 **************************************','line_number':712,'multiline':True]
