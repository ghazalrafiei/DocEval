['text':' -*- c -*- ','line_number':1,'multiline':True]
['text':'
 *
 * The code is loosely based on the quickselect from
 * Nicolas Devillard - 1998 public domain
 * http://ndevilla.free.fr/median/median/
 *
 * Quick select with median of 3 pivot is usually the fastest,
 * but the worst case scenario can be quadratic complexity,
 * e.g. np.roll(np.arange(x), x / 2)
 * To avoid this if it recurses too much it falls back to the
 * worst case linear median of median of group 5 pivot strategy.
 ','line_number':3,'multiline':True]
['text':'
     * Only defined for int16_t, uint16_t, float16, int32_t, uint32_t, float32,
     * int64_t, uint64_t, double
     ','line_number':37,'multiline':True]
['text':' to avoid unused arg warn','line_number':64,'multiline':False]
['text':'
     * Only defined for int32_t, uint32_t, float32, int64_t, uint64_t, double
     ','line_number':72,'multiline':True]
['text':' to avoid unused arg warn','line_number':90,'multiline':False]
['text':'
 *****************************************************************************
 **                            NUMERIC SORTS                                **
 *****************************************************************************
 ','line_number':98,'multiline':True]
['text':'
     * If pivot is the requested kth store it, overwriting other pivots if
     * required. This must be done so iterative partition can work without
     * manually shifting lower data offset by kth each time
     ','line_number':111,'multiline':True]
['text':'
     * we only need pivots larger than current kth, larger pivots are not
     * useful as partitions on smaller kth would reorder the stored pivots
     ','line_number':119,'multiline':True]
['text':'
 * median of 3 pivot strategy
 * gets min and median and moves median to low and min to low + 1
 * for efficient partitioning, see unguarded_partition
 ','line_number':163,'multiline':True]
['text':' move pivot to low ','line_number':182,'multiline':True]
['text':' move 3-lowest element to low + 1 ','line_number':186,'multiline':True]
['text':' select index of median of five elements ','line_number':190,'multiline':True]
['text':' could be optimized as we only need the index (no swaps) ','line_number':198,'multiline':True]
['text':' v[1] and v[2] swapped into order above ','line_number':223,'multiline':True]
['text':'
 * partition and return the index were the pivot belongs
 * the data must have following property to avoid bound checks:
 *                  ll ... hh
 * lower-than-pivot [x x x x] larger-than-pivot
 ','line_number':228,'multiline':True]
['text':'
 * select median of median of blocks of 5
 * if used as partition pivot it splits the range into at least 30%/70%
 * allowing linear time worstcase quickselect
 ','line_number':258,'multiline':True]
['text':'
 * N^2 selection, fast only for very small kth
 * useful for close multiple partitions
 * (e.g. even element median, interpolating percentile)
 ','line_number':286,'multiline':True]
['text':'
 * iterative median of 3 quickselect with cutoff to median-of-medians-of5
 * receives stack of already computed pivots in v to minimize the
 * partition size were kth is searched in
 *
 * area that needs partitioning in [...]
 * kth 0:  [8  7  6  5  4  3  2  1  0] -> med3 partitions elements [4, 2, 0]
 *          0  1  2  3  4  8  7  5  6  -> pop requested kth -> stack [4, 2]
 * kth 3:   0  1  2 [3] 4  8  7  5  6  -> stack [4]
 * kth 5:   0  1  2  3  4 [8  7  5  6] -> stack [6]
 * kth 8:   0  1  2  3  4  5  6 [8  7] -> stack []
 *
 ','line_number':315,'multiline':True]
['text':' pivot larger than kth set it as upper bound ','line_number':346,'multiline':True]
['text':' kth was already found in a previous iteration -> done ','line_number':351,'multiline':True]
['text':' pop from stack ','line_number':357,'multiline':True]
['text':'
     * use a faster O(n*kth) algorithm for very small kth
     * e.g. for interpolating percentile
     ','line_number':361,'multiline':True]
['text':' useful to check if NaN present via partition(d, (x, -1)) ','line_number':373,'multiline':True]
['text':' guarantee three elements ','line_number':389,'multiline':True]
['text':'
         * if we aren't making sufficient progress with median of 3
         * fall back to median-of-median5 pivot for linear worst case
         * med3 for small sizes is required to do unguarded partition
         ','line_number':394,'multiline':True]
['text':' median of 3 pivot strategy,
             * swapping for efficient partition ','line_number':401,'multiline':True]
['text':' FIXME: always use pivots to optimize this iterative partition ','line_number':407,'multiline':True]
['text':' adapt for the larger partition than med3 pivot ','line_number':412,'multiline':True]
['text':'
         * find place to put pivot (in low):
         * previous swapping removes need for bound checks
         * pivot 3-lowest [x x x] 3-highest
         ','line_number':419,'multiline':True]
['text':' move pivot into position ','line_number':426,'multiline':True]
['text':' kth pivot stored later ','line_number':429,'multiline':True]
['text':' two elements ','line_number':442,'multiline':True]
['text':'
 *****************************************************************************
 **                             GENERATOR                                   **
 *****************************************************************************
 ','line_number':453,'multiline':True]
['text':'
 *****************************************************************************
 **                            C INTERFACE                                  **
 *****************************************************************************
 ','line_number':546,'multiline':True]
