['text':'@targets #simd_test','line_number':1,'multiline':True]
['text':'#########################################################################','line_number':12,'multiline':False]
['text':'## Defining NPYV intrinsics as module functions','line_number':13,'multiline':False]
['text':'#########################################################################','line_number':14,'multiline':False]
['text':'*begin repeat
 * #sfx       = u8, s8, u16, s16, u32, s32, u64, s64, f32, f64#
 * #bsfx      = b8, b8, b16, b16, b32, b32, b64, b64, b32, b64#
 * #esfx      = u16,s8, u32, s16, u32, s32, u64, s64, f32, f64#
 * #size      = 8,  8,  16,  16,  32,  32,  64,  64,  32,  64#
 * #expand_sup= 1,  0,  1,   0,   0,   0,   0,   0,   0,   0#
 * #simd_sup  = 1,  1,  1,   1,   1,   1,   1,   1,   NPY_SIMD_F32, NPY_SIMD_F64#
 * #fp_only   = 0,  0,  0,   0,   0,   0,   0,   0,   1,   1#
 * #sat_sup   = 1,  1,  1,   1,   0,   0,   0,   0,   0,   0#
 * #mul_sup   = 1,  1,  1,   1,   1,   1,   0,   0,   1,   1#
 * #div_sup   = 0,  0,  0,   0,   0,   0,   0,   0,   1,   1#
 * #fused_sup = 0,  0,  0,   0,   0,   0,   0,   0,   1,   1#
 * #sumup_sup = 1,  0,  1,   0,   0,   0,   0,   0,   0,   0#
 * #sum_sup   = 0,  0,  0,   0,   1,   0,   1,   0,   1,   1#
 * #rev64_sup = 1,  1,  1,   1,   1,   1,   0,   0,   1,   0#
 * #ncont_sup = 0,  0,  0,   0,   1,   1,   1,   1,   1,   1#
 * #intdiv_sup= 1,  1,  1,   1,   1,   1,   1,   1,   0,   0#
 * #shl_imm   = 0,  0,  15,  15,  31,  31,  63,  63,  0,   0#
 * #shr_imm   = 0,  0,  16,  16,  32,  32,  64,  64,  0,   0#
 * #bitw8b_sup= 1,  0,  0,   0,   0,   0,   0,   0,   0,   0#
 ','line_number':15,'multiline':True]
['text':'**************************
 * Memory
 **************************','line_number':37,'multiline':True]
['text':'*begin repeat1
 * # intrin = load, loada, loads, loadl#
 ','line_number':40,'multiline':True]
['text':'*end repeat1*','line_number':44,'multiline':True]
['text':'*begin repeat1
 * # intrin = store, storea, stores, storel, storeh, store#
 * # x = ,,,,, x2#
 ','line_number':47,'multiline':True]
['text':' special definition due to the nature of @intrin@','line_number':51,'multiline':False]
['text':' write-back','line_number':65,'multiline':False]
['text':'*end repeat1*','line_number':73,'multiline':True]
['text':'***************************************
 * Non-contiguous/Partial Memory access
 ***************************************','line_number':75,'multiline':True]
['text':' Partial Load','line_number':79,'multiline':False]
['text':' Partial Store','line_number':90,'multiline':False]
['text':'*begin repeat1
 * #intrin = store_till, store2_till, store2_till#
 * #chksize= 0,          32,           64#
 ','line_number':91,'multiline':True]
['text':' write-back','line_number':113,'multiline':False]
['text':' chksize','line_number':121,'multiline':False]
['text':'*end repeat1*','line_number':123,'multiline':True]
['text':' Non-contiguous Load','line_number':124,'multiline':False]
['text':'*begin repeat1
 * #intrin = loadn,       loadn2,       loadn2,
 *           loadn_till,  loadn2_till,  loadn2_till,
 *           loadn_tillz, loadn2_tillz, loadn2_tillz#
 * #scale  = 1,2,2,       1,2,2,         1,2,2#
 * #till   = 0*3,         1*3,           1*3#
 * #fill   = 0*3,         1*3,           0*3#
 # #fill2  = 0*3,         0,1,1,         0*3#
 * #format = ,,,          O&O&, O&O&O&*2,O&*3#
 * #chksize= 0,32,64,     0,32,64,       0,32,64#
 ','line_number':125,'multiline':True]
['text':' till','line_number':144,'multiline':False]
['text':' chksize','line_number':204,'multiline':False]
['text':'*end repeat1*','line_number':205,'multiline':True]
['text':' Non-contiguous Store','line_number':207,'multiline':False]
['text':'*begin repeat1
 * #intrin = storen,      storen2,      storen2,
             storen_till, storen2_till, storen2_till#
 * #scale  = 1,2,2,       1,2,2#
 * #till   = 0*3,         1*3#
 * #format = ,,,          O&*3#
 * #chksize= 0,32,64,     0,32,64#
 ','line_number':208,'multiline':True]
['text':' overflow guard','line_number':245,'multiline':False]
['text':' write-back','line_number':261,'multiline':False]
['text':' chksize','line_number':271,'multiline':False]
['text':'*end repeat1*','line_number':272,'multiline':True]
['text':' @ncont_sup@','line_number':273,'multiline':False]
['text':'***************************
 * Lookup tables
 ***************************','line_number':275,'multiline':True]
['text':'**************************
 * Misc
 **************************','line_number':284,'multiline':True]
['text':'*begin repeat1
 * #sfx_to     = u8, s8, u16, s16, u32, s32, u64, s64, f32, f64#
 * #simd_sup2  = 1,  1,  1,   1,   1,   1,   1,   1,   NPY_SIMD_F32, NPY_SIMD_F64#
 ','line_number':292,'multiline':True]
['text':' simd_sup2','line_number':298,'multiline':False]
['text':'*end repeat1*','line_number':299,'multiline':True]
['text':'*
 * special definition due to the nature of intrinsics
 * npyv_setf_@sfx@ and npy_set_@sfx@.
','line_number':301,'multiline':True]
['text':'*begin repeat1
 * #intrin = setf, set#
 ','line_number':305,'multiline':True]
['text':' for setf','line_number':324,'multiline':False]
['text':'*end repeat1*','line_number':329,'multiline':True]
['text':'**************************
 * Reorder
 **************************','line_number':331,'multiline':True]
['text':'*begin repeat1
 * # intrin = combinel, combineh#
 ','line_number':334,'multiline':True]
['text':'*end repeat1*','line_number':338,'multiline':True]
['text':'*begin repeat1
 * # intrin = combine, zip, unzip#
 ','line_number':340,'multiline':True]
['text':'*end repeat1*','line_number':344,'multiline':True]
['text':' special implementation to convert runtime constants to immediate values','line_number':350,'multiline':False]
['text':' one call for element index then gather them within one vector','line_number':352,'multiline':False]
['text':' instead of unroll the 255 possible cases.','line_number':353,'multiline':False]
['text':'*begin repeat1
    * # en = e0, e1, e2, e3#
    ','line_number':357,'multiline':True]
['text':'*begin repeat2
    * # imm = 1, 2, 3#
    ','line_number':363,'multiline':True]
['text':'*end repeat2*','line_number':369,'multiline':True]
['text':'*end repeat1*','line_number':374,'multiline':True]
['text':'**************************
 * Operators
 **************************','line_number':404,'multiline':True]
['text':' immediate constant','line_number':410,'multiline':False]
['text':' shl_imm','line_number':413,'multiline':False]
['text':'*begin repeat1
 * #intrin = and, or, xor#
 ','line_number':415,'multiline':True]
['text':'*end repeat1*','line_number':419,'multiline':True]
['text':'*begin repeat1
 * #intrin = cmpeq, cmpneq, cmpgt, cmpge, cmplt, cmple#
 ','line_number':423,'multiline':True]
['text':'*end repeat1*','line_number':427,'multiline':True]
['text':' test cross all vector lanes','line_number':436,'multiline':False]
['text':'*begin repeat1
 * #intrin = any, all#
 ','line_number':437,'multiline':True]
['text':'*end repeat1*','line_number':441,'multiline':True]
['text':'**************************
 * Conversion
 **************************','line_number':442,'multiline':True]
['text':' expand_sup','line_number':449,'multiline':False]
['text':'**************************
 * Arithmetic
 **************************','line_number':450,'multiline':True]
['text':'*begin repeat1
 * #intrin = add, sub#
 ','line_number':453,'multiline':True]
['text':'*end repeat1*','line_number':457,'multiline':True]
['text':'*begin repeat1
 * #intrin = adds, subs#
 ','line_number':460,'multiline':True]
['text':'*end repeat1*','line_number':464,'multiline':True]
['text':' sat_sup','line_number':465,'multiline':False]
['text':' mul_sup','line_number':469,'multiline':False]
['text':' div_sup','line_number':473,'multiline':False]
['text':' intdiv_sup','line_number':478,'multiline':False]
['text':'*begin repeat1
 * #intrin = muladd, mulsub, nmuladd, nmulsub, muladdsub#
 ','line_number':481,'multiline':True]
['text':'*end repeat1*','line_number':485,'multiline':True]
['text':' fused_sup','line_number':486,'multiline':False]
['text':' sum_sup','line_number':490,'multiline':False]
['text':' sumup_sup','line_number':494,'multiline':False]
['text':'**************************
 * Math
 **************************','line_number':496,'multiline':True]
['text':'*begin repeat1
 * #intrin = sqrt, recip, abs, square, rint, ceil, trunc, floor#
 ','line_number':500,'multiline':True]
['text':'*end repeat1*','line_number':504,'multiline':True]
['text':'*begin repeat1
 * #intrin = max, min#
 ','line_number':507,'multiline':True]
['text':'*end repeat1*','line_number':512,'multiline':True]
['text':'*begin repeat1
 * #intrin = maxp, minp, maxn, minn#
 ','line_number':515,'multiline':True]
['text':'*end repeat1*','line_number':520,'multiline':True]
['text':'*end repeat1*','line_number':521,'multiline':True]
['text':'**************************
 * Mask operations
 **************************','line_number':524,'multiline':True]
['text':'*begin repeat1
 * #intrin = ifadd, ifsub#
 ','line_number':527,'multiline':True]
['text':'*end repeat1*','line_number':531,'multiline':True]
['text':' simd_sup','line_number':538,'multiline':False]
['text':'*end repeat*','line_number':539,'multiline':True]
['text':'************************************************************************
 * Variant
 ***********************************************************************','line_number':540,'multiline':True]
['text':'************************************************************************
 * A special section for f32/f64 intrinsics outside the main repeater
 ***********************************************************************','line_number':545,'multiline':True]
['text':'**************************
 * Operators
 **************************','line_number':548,'multiline':True]
['text':' check special cases','line_number':551,'multiline':False]
['text':'**************************
 * Conversions
 **************************','line_number':558,'multiline':True]
['text':' round to nearest integer (assume even)','line_number':561,'multiline':False]
['text':'************************************************************************
 * A special section for boolean intrinsics outside the main repeater
 ***********************************************************************','line_number':569,'multiline':True]
['text':'**************************
 * Operators
 **************************','line_number':572,'multiline':True]
['text':'*begin repeat
 * #bsfx = b8, b16, b32, b64#
 ','line_number':575,'multiline':True]
['text':' Logical','line_number':578,'multiline':False]
['text':' test cross vector's lanes','line_number':583,'multiline':False]
['text':'*begin repeat1
 * #intrin = any, all#
 ','line_number':584,'multiline':True]
['text':'*end repeat1*','line_number':588,'multiline':True]
['text':'*end repeat*','line_number':589,'multiline':True]
['text':'**************************
 * Conversions
 **************************','line_number':590,'multiline':True]
['text':' Convert mask vector to integer bitfield','line_number':593,'multiline':False]
['text':'*begin repeat
 * #bsfx = b8, b16, b32, b64#
 ','line_number':594,'multiline':True]
['text':'*end repeat*','line_number':598,'multiline':True]
['text':'#########################################################################','line_number':605,'multiline':False]
['text':'## Attach module functions','line_number':606,'multiline':False]
['text':'#########################################################################','line_number':607,'multiline':False]
['text':'*begin repeat
 * #sfx       = u8, s8, u16, s16, u32, s32, u64, s64, f32, f64#
 * #bsfx      = b8, b8, b16, b16, b32, b32, b64, b64, b32, b64#
 * #size      = 8,  8,  16,  16,  32,  32,  64,  64,  32,  64#
 * #esfx      = u16, s8, u32,s16, u32, s32, u64, s64, f32, f64#
 * #expand_sup= 1,  0,  1,   0,   0,   0,   0,   0,   0,   0#
 * #simd_sup  = 1,  1,  1,   1,   1,   1,   1,   1,   NPY_SIMD_F32, NPY_SIMD_F64#
 * #fp_only   = 0,  0,  0,   0,   0,   0,   0,   0,   1,   1#
 * #sat_sup   = 1,  1,  1,   1,   0,   0,   0,   0,   0,   0#
 * #mul_sup   = 1,  1,  1,   1,   1,   1,   0,   0,   1,   1#
 * #div_sup   = 0,  0,  0,   0,   0,   0,   0,   0,   1,   1#
 * #fused_sup = 0,  0,  0,   0,   0,   0,   0,   0,   1,   1#
 * #sumup_sup = 1,  0,  1,   0,   0,   0,   0,   0,   0,   0#
 * #sum_sup   = 0,  0,  0,   0,   1,   0,   1,   0,   1,   1#
 * #rev64_sup = 1,  1,  1,   1,   1,   1,   0,   0,   1,   0#
 * #ncont_sup = 0,  0,  0,   0,   1,   1,   1,   1,   1,   1#
 * #intdiv_sup= 1,  1,  1,   1,   1,   1,   1,   1,   0,   0#
 * #shl_imm   = 0,  0,  15,  15,  31,  31,  63,  63,  0,   0#
 * #shr_imm   = 0,  0,  16,  16,  32,  32,  64,  64,  0,   0#
 * #bitw8b_sup= 1,  0,  0,   0,   0,   0,   0,   0,   0,   0#
 ','line_number':609,'multiline':True]
['text':'**************************
 * Memory
 **************************','line_number':632,'multiline':True]
['text':'*begin repeat1
 * # intrin = load, loada, loads, loadl, store, storea, stores, storel, storeh#
 ','line_number':635,'multiline':True]
['text':'*end repeat1*','line_number':639,'multiline':True]
['text':'*begin repeat1
 * # intrin = load, store#
 ','line_number':641,'multiline':True]
['text':'*end repeat1*','line_number':645,'multiline':True]
['text':'***************************************
 * Non-contiguous/Partial Memory access
 ***************************************','line_number':647,'multiline':True]
['text':'*begin repeat1
 * #intrin = load_till, load_tillz, loadn, loadn_till, loadn_tillz,
 *           store_till, storen, storen_till#
 ','line_number':651,'multiline':True]
['text':'*end repeat1*','line_number':656,'multiline':True]
['text':'*begin repeat1
     * #intrin = load2_till, load2_tillz, loadn2, loadn2_till, loadn2_tillz,
     *           store2_till, storen2, storen2_till#
     ','line_number':658,'multiline':True]
['text':'*end repeat1*','line_number':663,'multiline':True]
['text':'*begin repeat1
     * #intrin = load2_till, load2_tillz, loadn2, loadn2_till, loadn2_tillz,
     *           store2_till, storen2, storen2_till#
     ','line_number':665,'multiline':True]
['text':'*end repeat1*','line_number':670,'multiline':True]
['text':' ncont_sup','line_number':672,'multiline':False]
['text':'***************************
 * Lookup tables
 ***************************','line_number':674,'multiline':True]
['text':'**************************
 * Misc
 **************************','line_number':683,'multiline':True]
['text':'*begin repeat1
 * #sfx_to     = u8, s8, u16, s16, u32, s32, u64, s64, f32, f64#
 * #simd_sup2  = 1,  1,  1,   1,   1,   1,   1,   1,   NPY_SIMD_F32, NPY_SIMD_F64#
 ','line_number':686,'multiline':True]
['text':' simd_sup2','line_number':692,'multiline':False]
['text':'*end repeat1*','line_number':693,'multiline':True]
['text':'*begin repeat1
 * # intrin = set, setf, setall, zero, select, extract0#
 ','line_number':695,'multiline':True]
['text':'*end repeat1*','line_number':699,'multiline':True]
['text':'**************************
 * Reorder
 **************************','line_number':701,'multiline':True]
['text':'*begin repeat1
 * # intrin = combinel, combineh, combine, zip, unzip#
 ','line_number':704,'multiline':True]
['text':'*end repeat1*','line_number':708,'multiline':True]
['text':'**************************
 * Operators
 **************************','line_number':718,'multiline':True]
['text':'*begin repeat1
 * # intrin = shl, shr, shli, shri#
 ','line_number':722,'multiline':True]
['text':'*end repeat1*','line_number':726,'multiline':True]
['text':' shl_imm','line_number':727,'multiline':False]
['text':'*begin repeat1
 * #intrin = and, or, xor, not, cmpeq, cmpneq, cmpgt, cmpge, cmplt, cmple,
 *           any, all#
 ','line_number':729,'multiline':True]
['text':'*end repeat1*','line_number':734,'multiline':True]
['text':'**************************
 * Conversion
 **************************','line_number':743,'multiline':True]
['text':' expand_sup','line_number':750,'multiline':False]
['text':'**************************
 * Arithmetic
 **************************','line_number':751,'multiline':True]
['text':'*begin repeat1
 * #intrin = add, sub#
 ','line_number':754,'multiline':True]
['text':'*end repeat1*','line_number':758,'multiline':True]
['text':'*begin repeat1
 * #intrin = adds, subs#
 ','line_number':761,'multiline':True]
['text':'*end repeat1*','line_number':765,'multiline':True]
['text':' sat_sup','line_number':766,'multiline':False]
['text':' mul_sup','line_number':770,'multiline':False]
['text':' div_sup','line_number':774,'multiline':False]
['text':' intdiv_sup','line_number':779,'multiline':False]
['text':'*begin repeat1
 * #intrin = muladd, mulsub, nmuladd, nmulsub, muladdsub#
 ','line_number':782,'multiline':True]
['text':'*end repeat1*','line_number':786,'multiline':True]
['text':' fused_sup','line_number':787,'multiline':False]
['text':' sum_sup','line_number':791,'multiline':False]
['text':' sumup_sup','line_number':795,'multiline':False]
['text':'**************************
 * Math
 **************************','line_number':796,'multiline':True]
['text':'*begin repeat1
 * #intrin = sqrt, recip, abs, square, rint, ceil, trunc, floor#
 ','line_number':800,'multiline':True]
['text':'*end repeat1*','line_number':804,'multiline':True]
['text':'*begin repeat1
 * #intrin = max, min#
 ','line_number':807,'multiline':True]
['text':'*end repeat1*','line_number':812,'multiline':True]
['text':'*begin repeat1
 * #intrin = maxp, minp, maxn, minn#
 ','line_number':815,'multiline':True]
['text':'*end repeat1*','line_number':820,'multiline':True]
['text':'*end repeat1*','line_number':821,'multiline':True]
['text':'**************************
 * Mask operations
 **************************','line_number':824,'multiline':True]
['text':'*begin repeat1
 * #intrin = ifadd, ifsub#
 ','line_number':827,'multiline':True]
['text':'*end repeat1*','line_number':831,'multiline':True]
['text':'*begin repeat1
 * #intrin = ifdiv, ifdivz#
 ','line_number':834,'multiline':True]
['text':'*end repeat1*','line_number':838,'multiline':True]
['text':' simd_sup','line_number':841,'multiline':False]
['text':'*end repeat*','line_number':842,'multiline':True]
['text':'************************************************************************
 * Variant
 ***********************************************************************','line_number':843,'multiline':True]
['text':'************************************************************************
 * A special section for f32/f64 intrinsics outside the main repeater
 ***********************************************************************','line_number':848,'multiline':True]
['text':'**************************
 * Operators
 **************************','line_number':851,'multiline':True]
['text':' check special cases','line_number':854,'multiline':False]
['text':'**************************
 * Conversions
 **************************','line_number':861,'multiline':True]
['text':' round to nearest integer (assume even)','line_number':864,'multiline':False]
['text':'************************************************************************
 * A special section for boolean intrinsics outside the main repeater
 ***********************************************************************','line_number':872,'multiline':True]
['text':'**************************
 * Operators
 **************************','line_number':875,'multiline':True]
['text':'*begin repeat
 * #bsfx = b8, b16, b32, b64#
 ','line_number':878,'multiline':True]
['text':' Logical','line_number':881,'multiline':False]
['text':' test cross vector's lanes','line_number':886,'multiline':False]
['text':'*begin repeat1
 * #intrin = any, all#
 ','line_number':887,'multiline':True]
['text':'*end repeat1*','line_number':891,'multiline':True]
['text':'*end repeat*','line_number':892,'multiline':True]
['text':'**************************
 * Conversions
 **************************','line_number':893,'multiline':True]
['text':' Convert mask vector to integer bitfield','line_number':896,'multiline':False]
['text':'*begin repeat
 * #bsfx = b8, b16, b32, b64#
 ','line_number':897,'multiline':True]
['text':'*end repeat*','line_number':901,'multiline':True]
['text':' Pack multiple vectors into one','line_number':903,'multiline':False]
['text':'**********************************************************************','line_number':908,'multiline':True]
['text':' PyMethodDef','line_number':910,'multiline':False]
['text':' NPY_SIMD','line_number':912,'multiline':False]
['text':'#########################################################################','line_number':914,'multiline':False]
['text':'## Defining a separate module for each target','line_number':915,'multiline':False]
['text':'#########################################################################','line_number':916,'multiline':False]
['text':' meson build','line_number':922,'multiline':False]
['text':'*begin repeat
     * #sfx = u8, s8, u16, s16, u32, s32, u64, s64, f32, f64#
     ','line_number':962,'multiline':True]
['text':'*end repeat*','line_number':968,'multiline':True]
['text':' NPY_SIMD','line_number':969,'multiline':False]
