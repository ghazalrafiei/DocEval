['text':'
 * This file implements assignment from an ndarray to another ndarray.
 *
 * Written by Mark Wiebe (mwwiebe@gmail.com)
 * Copyright (c) 2011 by Enthought, Inc.
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]
['text':'
 * Check that array data is both uint-aligned and true-aligned for all array
 * elements, as required by the copy/casting code in lowlevel_strided_loops.c
 ','line_number':32,'multiline':True]
['text':' uint alignment can be 0, meaning not uint alignable ','line_number':46,'multiline':True]
['text':'
     * As an optimization, it is unnecessary to check the alignment to the
     * smaller of (uint_aln, true_aln) if the data is aligned to the bigger of
     * the two and the big is a multiple of the small aln. We check the bigger
     * one first and only check the smaller if necessary.
     ','line_number':51,'multiline':True]
['text':'
 * Assigns the array from 'src' to 'dst'. The strides must already have
 * been broadcast.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':73,'multiline':True]
['text':' Use raw iteration with no heap allocation ','line_number':98,'multiline':True]
['text':'
     * Overlap check for the 1D case. Higher dimensional arrays and
     * opposite strides cause a temporary copy before getting here.
     ','line_number':109,'multiline':True]
['text':' Get the function to do the casting ','line_number':121,'multiline':True]
['text':' Ensure number of elements exceeds threshold for threading ','line_number':136,'multiline':True]
['text':' Process the innermost dimension ','line_number':148,'multiline':True]
['text':'
 * Assigns the array from 'src' to 'dst, wherever the 'wheremask'
 * value is True. The strides must already have been broadcast.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':175,'multiline':True]
['text':' Use raw iteration with no heap allocation ','line_number':203,'multiline':True]
['text':'
     * Overlap check for the 1D case. Higher dimensional arrays cause
     * a temporary copy before getting here.
     ','line_number':216,'multiline':True]
['text':' Get the function to do the casting ','line_number':230,'multiline':True]
['text':' Process the innermost dimension ','line_number':259,'multiline':True]
['text':'
 * An array assignment function for copying arrays, broadcasting 'src' into
 * 'dst'. This function makes a temporary copy of 'src' if 'src' and
 * 'dst' overlap, to be able to handle views of the same data with
 * different strides.
 *
 * dst: The destination array.
 * src: The source array.
 * wheremask: If non-NULL, a boolean mask specifying where to copy.
 * casting: An exception is raised if the copy violates this
 *          casting rule.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':290,'multiline':True]
['text':' Use array_assign_scalar if 'src' NDIM is 0 ','line_number':313,'multiline':True]
['text':'
     * Performance fix for expressions like "a[1000:6000] += x".  In this
     * case, first an in-place add is done, followed by an assignment,
     * equivalently expressed like this:
     *
     *   tmp = a[1000:6000]   # Calls array_subscript in mapping.c
     *   np.add(tmp, x, tmp)
     *   a[1000:6000] = tmp   # Calls array_assign_subscript in mapping.c
     *
     * In the assignment the underlying data type, shape, strides, and
     * data pointers are identical, but src != dst because they are separately
     * generated slices.  By detecting this and skipping the redundant
     * copy of values to themselves, we potentially give a big speed boost.
     *
     * Note that we don't call EquivTypes, because usually the exact same
     * dtype object will appear, and we don't want to slow things down
     * with a complicated comparison.  The comparisons are ordered to
     * try and reject this with as little work as possible.
     ','line_number':320,'multiline':True]
['text':'printf("Redundant copy operation detected\n");','line_number':348,'multiline':True]
['text':' Check the casting rule ','line_number':356,'multiline':True]
['text':'
     * When ndim is 1 and the strides point in the same direction,
     * the lower-level inner loop handles copying
     * of overlapping data. For bigger ndim and opposite-strided 1D
     * data, we make a temporary copy of 'src' if 'src' and 'dst' overlap.'
     ','line_number':364,'multiline':True]
['text':'
         * Allocate a temporary copy array.
         ','line_number':377,'multiline':True]
['text':' Broadcast 'src' to 'dst' for raw iteration ','line_number':395,'multiline':True]
['text':'
         * As a special case for backwards compatibility, strip
         * away unit dimensions from the left of 'src'
         ','line_number':400,'multiline':True]
['text':' optimization: scalar boolean mask ','line_number':426,'multiline':True]
['text':' where=True is the same as no where at all ','line_number':432,'multiline':True]
['text':' where=False copies nothing ','line_number':436,'multiline':True]
['text':' A straightforward value assignment ','line_number':442,'multiline':True]
['text':' Do the assignment with raw array iteration ','line_number':443,'multiline':True]
['text':' Broadcast the wheremask to 'dst' for raw iteration ','line_number':453,'multiline':True]
['text':' A straightforward where-masked assignment ','line_number':461,'multiline':True]
['text':' Do the masked assignment with raw array iteration ','line_number':462,'multiline':True]
