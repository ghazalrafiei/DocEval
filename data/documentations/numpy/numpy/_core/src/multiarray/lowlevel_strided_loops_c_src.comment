['text':'
 * This file contains low-level loops for copying and byte-swapping
 * strided data.
 *
 * Copyright (c) 2010 by Mark Wiebe (mwwiebe@gmail.com)
 * The University of British Columbia
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]
['text':'
 * x86 platform works with unaligned access but the compiler is allowed to
 * assume all data is aligned to its size by the C standard. This means it can
 * vectorize instructions peeling only by the size of the type, if the data is
 * not aligned to this size one ends up with data not correctly aligned for SSE
 * instructions (16 byte).
 * So this flag can only be enabled if autovectorization is disabled.
 ','line_number':28,'multiline':True]
['text':'************ STRIDED COPYING/SWAPPING SPECIALIZED FUNCTIONS ************','line_number':84,'multiline':True]
['text':'*begin repeat
 * #elsize = 1, 2, 4, 8, 16#
 * #elsize_half = 0, 1, 2, 4, 8#
 * #type = npy_uint8, npy_uint16, npy_uint32, npy_uint64, npy_uint64#
 ','line_number':86,'multiline':True]
['text':'*begin repeat1
 * #oper = strided_to_strided, strided_to_contig,
 *         contig_to_strided, contig_to_contig#
 * #src_contig = 0, 0, 1 ,1#
 * #dst_contig = 0, 1, 0 ,1#
 ','line_number':91,'multiline':True]
['text':'*begin repeat2
 * #swap = _NPY_NOP, _NPY_NOP, _NPY_SWAP_INPLACE, _NPY_SWAP,
 *         _NPY_SWAP_INPLACE, _NPY_SWAP_PAIR#
 * #prefix = , _aligned, _swap, _aligned_swap, _swap_pair, _aligned_swap_pair#
 * #is_aligned = 0, 1, 0, 1, 0, 1#
 * #minelsize = 1, 1, 2, 2, 4, 4#
 * #is_swap = 0, 0, 1, 1, 2, 2#
 ','line_number':97,'multiline':True]
['text':'
 * unrolling gains about 20-50% if the copy can be done in one mov instruction
 * if not it can decrease performance
 * tested to improve performance on intel xeon 5x/7x, core2duo, amd phenom x4
 ','line_number':112,'multiline':True]
['text':' sanity check ','line_number':136,'multiline':True]
['text':'printf("fn @prefix@_@oper@_size@elsize@\n");','line_number':140,'multiline':True]
['text':' aligned copy and swap ','line_number':144,'multiline':True]
['text':' unaligned copy and swap ','line_number':162,'multiline':True]
['text':'
 * specialized copy and swap for source stride 0,
 * interestingly unrolling here is like above is only marginally profitable for
 * small types and detrimental for >= 8byte moves on x86
 * but it profits from vectorization enabled with -O3
 ','line_number':192,'multiline':True]
['text':' sanity check ','line_number':222,'multiline':True]
['text':' @elsize == 1 && @dst_contig@ -- else ','line_number':259,'multiline':True]
['text':' (@src_contig@ == 0) && @is_aligned@ ','line_number':262,'multiline':True]
['text':' @elsize@ >= @minelsize@ ','line_number':264,'multiline':True]
['text':'*end repeat2*','line_number':266,'multiline':True]
['text':'*end repeat1*','line_number':267,'multiline':True]
['text':'*end repeat*','line_number':268,'multiline':True]
['text':'
 * NOTE: This function is currently unused. It would currently be used for
 *       builtin dtypes that have an elsize other than 2, 4, 8, or 16 bytes.
 *       Since unicode and complex swap differently, no such dtype exists.
 ','line_number':290,'multiline':True]
['text':' general in-place swap ','line_number':310,'multiline':True]
['text':' general in-place swap ','line_number':342,'multiline':True]
['text':' general in-place swap ','line_number':351,'multiline':True]
['text':'
 * Skip the "unaligned" versions on CPUs which support unaligned
 * memory accesses.
 ','line_number':386,'multiline':True]
['text':'!NPY_USE_UNALIGNED_ACCESS','line_number':392,'multiline':True]
['text':' contiguous dst ','line_number':394,'multiline':True]
['text':' constant src ','line_number':396,'multiline':True]
['text':'*begin repeat
 * #elsize = 1, 2, 4, 8, 16#
 ','line_number':399,'multiline':True]
['text':'*end repeat*','line_number':405,'multiline':True]
['text':' contiguous src ','line_number':408,'multiline':True]
['text':' general src ','line_number':412,'multiline':True]
['text':'*begin repeat
 * #elsize = 1, 2, 4, 8, 16#
 ','line_number':415,'multiline':True]
['text':'*end repeat*','line_number':420,'multiline':True]
['text':' general dst ','line_number':426,'multiline':True]
['text':' constant src ','line_number':428,'multiline':True]
['text':'*begin repeat
 * #elsize = 1, 2, 4, 8, 16#
 ','line_number':431,'multiline':True]
['text':'*end repeat*','line_number':437,'multiline':True]
['text':' contiguous src ','line_number':440,'multiline':True]
['text':'*begin repeat
 * #elsize = 1, 2, 4, 8, 16#
 ','line_number':443,'multiline':True]
['text':'*end repeat*','line_number':448,'multiline':True]
['text':'*begin repeat
 * #elsize = 1, 2, 4, 8, 16#
 ','line_number':455,'multiline':True]
['text':'*end repeat*','line_number':460,'multiline':True]
['text':' contiguous dst ','line_number':470,'multiline':True]
['text':' contiguous src, dst ','line_number':472,'multiline':True]
['text':' general src ','line_number':476,'multiline':True]
['text':'*begin repeat
 * #elsize = 2, 4, 8, 16#
 ','line_number':480,'multiline':True]
['text':'*end repeat*','line_number':485,'multiline':True]
['text':' contiguous src, general dst ','line_number':492,'multiline':True]
['text':'*begin repeat
 * #elsize = 2, 4, 8, 16#
 ','line_number':496,'multiline':True]
['text':'*end repeat*','line_number':501,'multiline':True]
['text':' general src, dst ','line_number':508,'multiline':True]
['text':'*begin repeat
 * #elsize = 2, 4, 8, 16#
 ','line_number':512,'multiline':True]
['text':'*end repeat*','line_number':517,'multiline':True]
['text':'!NPY_USE_UNALIGNED_ACCESS','line_number':521,'multiline':True]
['text':'
 * PyArray_GetStridedCopySwapFn and PyArray_GetStridedCopySwapPairFn are
 * nearly identical, so can do a repeat for them.
 ','line_number':526,'multiline':True]
['text':'*begin repeat
 * #function = PyArray_GetStridedCopySwapFn, PyArray_GetStridedCopySwapPairFn#
 * #tag = , _pair#
 * #not_pair = 1, 0#
 ','line_number':530,'multiline':True]
['text':'
 * Skip the "unaligned" versions on CPUs which support unaligned
 * memory accesses.
 ','line_number':540,'multiline':True]
['text':'!NPY_USE_UNALIGNED_ACCESS','line_number':546,'multiline':True]
['text':' contiguous dst ','line_number':548,'multiline':True]
['text':' constant src ','line_number':550,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':553,'multiline':True]
['text':'*end repeat1*','line_number':561,'multiline':True]
['text':' contiguous src ','line_number':564,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':567,'multiline':True]
['text':'*end repeat1*','line_number':574,'multiline':True]
['text':' general src ','line_number':577,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':580,'multiline':True]
['text':'*end repeat1*','line_number':587,'multiline':True]
['text':' general dst ','line_number':591,'multiline':True]
['text':' constant src ','line_number':593,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':596,'multiline':True]
['text':'*end repeat1*','line_number':604,'multiline':True]
['text':' contiguous src ','line_number':607,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':610,'multiline':True]
['text':'*end repeat1*','line_number':617,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':624,'multiline':True]
['text':'*end repeat1*','line_number':631,'multiline':True]
['text':' contiguous dst ','line_number':639,'multiline':True]
['text':' contiguous src ','line_number':641,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':644,'multiline':True]
['text':'*end repeat1*','line_number':651,'multiline':True]
['text':' general src ','line_number':654,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':657,'multiline':True]
['text':'*end repeat1*','line_number':664,'multiline':True]
['text':' general dst ','line_number':670,'multiline':True]
['text':' contiguous src ','line_number':672,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':675,'multiline':True]
['text':'*end repeat1*','line_number':682,'multiline':True]
['text':' general src ','line_number':687,'multiline':True]
['text':'*begin repeat1
 * #elsize = 2, 4, 8, 16#
 ','line_number':690,'multiline':True]
['text':'*end repeat1*','line_number':697,'multiline':True]
['text':'!NPY_USE_UNALIGNED_ACCESS','line_number':702,'multiline':True]
['text':'*end repeat*','line_number':707,'multiline':True]
['text':'************ STRIDED CASTING SPECIALIZED FUNCTIONS ************','line_number':709,'multiline':True]
['text':'*begin repeat
 *
 * #NAME1 = BOOL,
 *          UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG,
 *          HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name1 = bool,
 *          ubyte, ushort, uint, ulong, ulonglong,
 *          byte, short, int, long, longlong,
 *          half, float, double, longdouble,
 *          cfloat, cdouble, clongdouble#
 * #type1 = npy_bool,
 *          npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *          npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *          npy_half, npy_float, npy_double, npy_longdouble,
 *          npy_cfloat, npy_cdouble, npy_clongdouble#
 * #rtype1 = npy_bool,
 *           npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *           npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *           npy_half, npy_float, npy_double, npy_longdouble,
 *           npy_float, npy_double, npy_longdouble#
 * #is_bool1 = 1, 0*17#
 * #is_half1 = 0*11, 1, 0*6#
 * #is_float1 = 0*12, 1, 0, 0, 1, 0, 0#
 * #is_double1 = 0*13, 1, 0, 0, 1, 0#
 * #is_complex1 = 0*15, 1*3#
 ','line_number':711,'multiline':True]
['text':'*begin repeat1
 *
 * #NAME2 = BOOL,
 *          UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG,
 *          HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name2 = bool,
 *          ubyte, ushort, uint, ulong, ulonglong,
 *          byte, short, int, long, longlong,
 *          half, float, double, longdouble,
 *          cfloat, cdouble, clongdouble#
 * #type2 = npy_bool,
 *          npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *          npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *          npy_half, npy_float, npy_double, npy_longdouble,
 *          npy_cfloat, npy_cdouble, npy_clongdouble#
 * #rtype2 = npy_bool,
 *          npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *          npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *          npy_half, npy_float, npy_double, npy_longdouble,
 *          npy_float, npy_double, npy_longdouble#
 * #is_bool2 = 1, 0*17#
 * #is_half2 = 0*11, 1, 0*6#
 * #is_float2 = 0*12, 1, 0, 0, 1, 0, 0#
 * #is_double2 = 0*13, 1, 0, 0, 1, 0#
 * #is_complex2 = 0*15, 1*3#
 ','line_number':740,'multiline':True]
['text':'*begin repeat2
 * #prefix = _aligned,,_aligned_contig,_contig#
 * #aligned = 1,0,1,0#
 * #contig = 0,0,1,1#
 ','line_number':769,'multiline':True]
['text':' For half types, don't use actual double/float types in conversion ','line_number':777,'multiline':True]
['text':' Determine an appropriate casting conversion function ','line_number':803,'multiline':True]
['text':' sanity check ','line_number':866,'multiline':True]
['text':'printf("@prefix@_cast_@name1@_to_@name2@\n");','line_number':871,'multiline':True]
['text':' Do the cast ','line_number':883,'multiline':True]
['text':'*end repeat2*','line_number':942,'multiline':True]
['text':'*end repeat1*','line_number':944,'multiline':True]
['text':'*end repeat*','line_number':946,'multiline':True]
['text':'*begin repeat
 *
 * #NAME1 = BOOL,
 *          UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG,
 *          HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name1 = bool,
 *          ubyte, ushort, uint, ulong, ulonglong,
 *          byte, short, int, long, longlong,
 *          half, float, double, longdouble,
 *          cfloat, cdouble, clongdouble#
 * #type1 = npy_bool,
 *          npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *          npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *          npy_half, npy_float, npy_double, npy_longdouble,
 *          npy_cfloat, npy_cdouble, npy_clongdouble#
 ','line_number':954,'multiline':True]
['text':'printf("test fn %d - second %d\n", NPY_@NAME1@, dst_type_num);','line_number':974,'multiline':True]
['text':'*begin repeat1
 *
 * #NAME2 = BOOL,
 *          UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *          BYTE, SHORT, INT, LONG, LONGLONG,
 *          HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *          CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #name2 = bool,
 *          ubyte, ushort, uint, ulong, ulonglong,
 *          byte, short, int, long, longlong,
 *          half, float, double, longdouble,
 *          cfloat, cdouble, clongdouble#
 * #type2 = npy_bool,
 *          npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong,
 *          npy_byte, npy_short, npy_int, npy_long, npy_longlong,
 *          npy_half, npy_float, npy_double, npy_longdouble,
 *          npy_cfloat, npy_cdouble, npy_clongdouble#
 ','line_number':976,'multiline':True]
['text':'printf("ret fn %d %d\n", NPY_@NAME1@, NPY_@NAME2@);','line_number':996,'multiline':True]
['text':'*end repeat1*','line_number':1018,'multiline':True]
['text':'printf("switched test fn %d - second %d\n", NPY_@NAME1@, dst_type_num);','line_number':1020,'multiline':True]
['text':'*end repeat*','line_number':1022,'multiline':True]
['text':'***************** PRIMITIVE FLAT TO/FROM NDIM FUNCTIONS *****************','line_number':1029,'multiline':True]
['text':' See documentation of arguments in lowlevel_strided_loops.h ','line_number':1031,'multiline':True]
['text':' Finish off dimension 0 ','line_number':1043,'multiline':True]
['text':' If it's 1-dimensional, there's no more to copy ','line_number':1064,'multiline':True]
['text':' Adjust the src and dst pointers ','line_number':1069,'multiline':True]
['text':' Finish off dimension 1 ','line_number':1076,'multiline':True]
['text':' If it's 2-dimensional, there's no more to copy ','line_number':1097,'multiline':True]
['text':' General-case loop for everything else ','line_number':1102,'multiline':True]
['text':' Iteration structure for dimensions 2 and up ','line_number':1104,'multiline':True]
['text':' Copy the coordinates and shape ','line_number':1109,'multiline':True]
['text':' Adjust the src pointer from the dimension 0 and 1 loop ','line_number':1123,'multiline':True]
['text':' Increment to the next coordinate ','line_number':1126,'multiline':True]
['text':' If the last dimension rolled over, we're done ','line_number':1137,'multiline':True]
['text':' A loop for dimensions 0 and 1 ','line_number':1142,'multiline':True]
['text':' See documentation of arguments in lowlevel_strided_loops.h ','line_number':1164,'multiline':True]
['text':' Finish off dimension 0 ','line_number':1176,'multiline':True]
['text':' If it's 1-dimensional, there's no more to copy ','line_number':1196,'multiline':True]
['text':' Adjust the src and dst pointers ','line_number':1201,'multiline':True]
['text':' Finish off dimension 1 ','line_number':1208,'multiline':True]
['text':' If it's 2-dimensional, there's no more to copy ','line_number':1229,'multiline':True]
['text':' General-case loop for everything else ','line_number':1234,'multiline':True]
['text':' Iteration structure for dimensions 2 and up ','line_number':1236,'multiline':True]
['text':' Copy the coordinates and shape ','line_number':1241,'multiline':True]
['text':' Adjust the dst pointer from the dimension 0 and 1 loop ','line_number':1255,'multiline':True]
['text':' Increment to the next coordinate ','line_number':1258,'multiline':True]
['text':' If the last dimension rolled over, we're done ','line_number':1269,'multiline':True]
['text':' A loop for dimensions 0 and 1 ','line_number':1274,'multiline':True]
['text':' See documentation of arguments in lowlevel_strided_loops.h ','line_number':1296,'multiline':True]
['text':' Finish off dimension 0 ','line_number':1311,'multiline':True]
['text':' If it's 1-dimensional, there's no more to copy ','line_number':1331,'multiline':True]
['text':' Adjust the src and dst pointers ','line_number':1336,'multiline':True]
['text':' Finish off dimension 1 ','line_number':1344,'multiline':True]
['text':' If it's 2-dimensional, there's no more to copy ','line_number':1368,'multiline':True]
['text':' General-case loop for everything else ','line_number':1373,'multiline':True]
['text':' Iteration structure for dimensions 2 and up ','line_number':1375,'multiline':True]
['text':' Copy the coordinates and shape ','line_number':1380,'multiline':True]
['text':' Adjust the dst pointer from the dimension 0 and 1 loop ','line_number':1394,'multiline':True]
['text':' Increment to the next coordinate ','line_number':1397,'multiline':True]
['text':' If the last dimension rolled over, we're done ','line_number':1408,'multiline':True]
['text':' A loop for dimensions 0 and 1 ','line_number':1413,'multiline':True]
['text':'*************************************************************************','line_number':1439,'multiline':True]
['text':'***************** MapIter (Advanced indexing) Get/Set *******************','line_number':1440,'multiline':True]
['text':'*************************************************************************','line_number':1441,'multiline':True]
['text':'*begin repeat
 * #name = set, get#
 * #isget = 0, 1#
 ','line_number':1445,'multiline':True]
['text':'
 * Advanced indexing iteration of arrays when there is a single indexing
 * array which has the same memory order as the value array and both
 * can be trivially iterated (single stride, aligned, no casting necessary).
 ','line_number':1450,'multiline':True]
['text':' copying between the same dtype, we can assume this is correct: ','line_number':1466,'multiline':True]
['text':' Check the indices beforehand ','line_number':1485,'multiline':True]
['text':'
     * Reset the ind_ptr and itersize, due to broadcasting it is always
     * the size of ind.
     ','line_number':1494,'multiline':True]
['text':' Optimization for aligned types that do not need the api ','line_number':1502,'multiline':True]
['text':'*begin repeat1
 * #elsize = 1, 2, 4, 8, 16, 0#
 * #copytype = npy_uint8, npy_uint16, npy_uint32, npy_uint64, copytype128, 0#
 ','line_number':1505,'multiline':True]
['text':' !@isget@ ','line_number':1545,'multiline':True]
['text':'*end repeat1*','line_number':1566,'multiline':True]
['text':'
 * General advanced indexing iteration.
 ','line_number':1575,'multiline':True]
['text':' Cached mit info ','line_number':1586,'multiline':True]
['text':' Constant information ','line_number':1589,'multiline':True]
['text':' Fill constant information ','line_number':1601,'multiline':True]
['text':'
         * Item by item copy situation, the operand is buffered
         * so use a cast to copy.  The iterator may not do any transfers, so may
         * not have set `needs_api` yet, set it if necessary:
         ','line_number':1615,'multiline':True]
['text':' We have only one iterator handling everything ','line_number':1625,'multiline':True]
['text':'*********** Optimized inner loops without subspace ************','line_number':1628,'multiline':True]
['text':'*begin repeat1
 * #one_iter = 1, 0#
 * #num_fancy = 1, num_fancy#
 ','line_number':1630,'multiline':True]
['text':' Optimization for aligned types that do not need the api ','line_number':1645,'multiline':True]
['text':'*begin repeat2
 * #elsize = 1, 2, 4, 8, 16, 0#
 * #copytype = npy_uint8, npy_uint16, npy_uint32, npy_uint64, copytype128, 0#
 ','line_number':1648,'multiline':True]
['text':' Outer iteration (safe because mit->size != 0) ','line_number':1658,'multiline':True]
['text':'
                     * When the API is needed the casting might fail
                     * TODO: (only if buffering is enabled).
                     ','line_number':1661,'multiline':True]
['text':' advance indexing arrays ','line_number':1689,'multiline':True]
['text':' !@isget@ ','line_number':1709,'multiline':True]
['text':' advance extra operand ','line_number':1726,'multiline':True]
['text':'*end repeat2*','line_number':1733,'multiline':True]
['text':'*end repeat1*','line_number':1737,'multiline':True]
['text':'****************** Nested Iteration Situation ******************','line_number':1740,'multiline':True]
['text':' has three states ','line_number':1745,'multiline':True]
['text':' Note: it may make sense to refactor `needs_api` out in this branch ','line_number':1748,'multiline':True]
['text':'
            * subspace is trivially iterable.
            * manipulate pointers to avoid expensive resetting
            ','line_number':1755,'multiline':True]
['text':'*begin repeat1
 * #one_iter = 1, 0#
 * #num_fancy = 1, num_fancy#
 ','line_number':1761,'multiline':True]
['text':' Outer iteration (safe because mit->size != 0) ','line_number':1776,'multiline':True]
['text':'
                 * Resetting is slow, so try to avoid resetting
                 * if subspace iteration is trivial.
                 * Watch out: reset_offsets are kept outside of the loop,
                 * assuming the subspaces of different external iterations
                 * share the same structure.
                 ','line_number':1796,'multiline':True]
['text':' slower resetting: first iteration or non-trivial subspace ','line_number':1804,'multiline':True]
['text':' (can't really fail, since no buffering necessary) ','line_number':1810,'multiline':True]
['text':' reset_offsets are nonzero for negative strides.','line_number':1819,'multiline':True]
['text':' use the faster adjustment further on ','line_number':1823,'multiline':True]
['text':'
                     * faster resetting if the subspace iteration is trivial.
                     * reset_offsets are zero for positive strides,
                     * for negative strides this shifts the pointer to the last
                     * item.
                     ','line_number':1828,'multiline':True]
['text':'
                 * When the API is needed the casting might fail
                 * TODO: Could only check if casting is unsafe, or even just
                 *       not at all...
                 ','line_number':1839,'multiline':True]
['text':' The operand order is reversed here ','line_number':1859,'multiline':True]
['text':'*end repeat1*','line_number':1874,'multiline':True]
['text':'*end repeat*','line_number':1879,'multiline':True]
