['text':' Array Descr Object ','line_number':1,'multiline':True]
['text':'******************  array attribute get and set routines *****************','line_number':28,'multiline':True]
['text':' Assumes C-order ','line_number':60,'multiline':True]
['text':' create new dimensions and strides ','line_number':75,'multiline':True]
['text':' Free old dimensions and strides ','line_number':82,'multiline':True]
['text':' Free old dimensions and strides ','line_number':94,'multiline':True]
['text':'
     * Get the available memory through the buffer interface on
     * PyArray_BASE(new) or if that fails from the current new
     ','line_number':143,'multiline':True]
['text':' numbytes == 0 is special here, but the 0-size array case always works ','line_number':163,'multiline':True]
['text':' get default ','line_number':217,'multiline':True]
['text':' dataptr ','line_number':282,'multiline':True]
['text':' 2016-19-02, 1.12 ','line_number':348,'multiline':True]
['text':'
     * In Python 3 both of the deprecated functions PyObject_AsWriteBuffer and
     * PyObject_AsReadBuffer that this code replaces release the buffer. It is
     * up to the object that supplies the buffer to guarantee that the buffer
     * sticks around after the release.
     ','line_number':370,'multiline':True]
['text':' This can happen if someone arbitrarily sets NPY_ARRAY_OWNDATA ','line_number':395,'multiline':True]
['text':'
 * If the type is changed.
 * Also needing change: strides, itemsize
 *
 * Either itemsize is exactly the same or the array is single-segment
 * (contiguous or fortran) with compatible dimensions The shape and strides
 * will be adjusted in that case as well.
 ','line_number':444,'multiline':True]
['text':' check that we are not reinterpreting memory containing Objects. ','line_number':470,'multiline':True]
['text':'
     * Viewing as an unsized void implies a void dtype matching the size of the
     * current dtype.
     ','line_number':488,'multiline':True]
['text':' Changing the size of the dtype results in a shape change ','line_number':502,'multiline':True]
['text':' forbidden cases ','line_number':504,'multiline':True]
['text':' resize on last axis only ','line_number':518,'multiline':True]
['text':' if it is compatible, increase the size of the last axis ','line_number':532,'multiline':True]
['text':' newtype->elsize > PyArray_DESCR(self)->elsize ','line_number':544,'multiline':True]
['text':' if it is compatible, decrease the size of the relevant axis ','line_number':545,'multiline':True]
['text':' Viewing as a subarray increases the number of dimensions ','line_number':559,'multiline':True]
['text':'
         * create new array object from data and update
         * dimensions, strides and descr from it
         ','line_number':561,'multiline':True]
['text':'
         * We would decref newtype here.
         * temp will steal a reference to it
         ','line_number':566,'multiline':True]
['text':' Fool deallocator not to delete these','line_number':583,'multiline':True]
['text':' Export a warn-on-write array as read-only ','line_number':614,'multiline':True]
['text':' reset unused flags ','line_number':618,'multiline':True]
['text':'
     * Copy shape and strides over since these can be reset
     *when the array is "reshaped".
     ','line_number':621,'multiline':True]
['text':'
 * Create a view of a complex array with an equivalent data-type
 * except it is real instead of complex.
 ','line_number':677,'multiline':True]
['text':' For Object arrays, we need to get and set the
   real part of each element.
 ','line_number':734,'multiline':True]
['text':' For Object arrays we need to get
   and set the imaginary part of
   each element
','line_number':787,'multiline':True]
['text':' Sentinel ','line_number':1059,'multiline':True]
['text':'***************** end of attribute get and set routines ******************','line_number':1062,'multiline':True]
