['text':'
 * Recursively examines the object to determine an appropriate dtype
 * to use for converting to an ndarray.
 *
 * 'obj' is the object to be converted to an ndarray.
 *
 * 'maxdims' is the maximum recursion depth.
 *
 * 'out_dtype' should be either NULL or a minimal starting dtype when
 * the function is called. It is updated with the results of type
 * promotion. This dtype does not get updated when processing NA objects.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':32,'multiline':True]
['text':'
 * Returns NULL without setting an exception if no scalar is matched, a
 * new dtype reference otherwise.
 ','line_number':51,'multiline':True]
['text':'
 * Sets ValueError with "matrices not aligned" message for np.dot and friends
 * when a.shape[i] should match b.shape[j], but doesn't.
 ','line_number':64,'multiline':True]
['text':'*
 * unpack tuple of dtype->fields (descr, offset, title[not-needed])
 *
 * @param "value" should be the tuple.
 *
 * @return "descr" will be set to the field's dtype
 * @return "offset" will be set to the field's offset
 *
 * returns -1 on failure, 0 on success.
 ','line_number':71,'multiline':True]
['text':'
 * check whether arrays with datatype dtype might have object fields. This will
 * only happen for structured dtypes (which may have hidden objects even if the
 * HASOBJECT flag is false), object dtypes, or subarray dtypes whose base type
 * is either of these.
 ','line_number':84,'multiline':True]
['text':'
 * Returns -1 and sets an exception if *index is an invalid index for
 * an array of size max_item, otherwise adjusts it in place to be
 * 0 <= *index < max_item, and returns 0.
 * 'axis' should be the array axis that is being indexed over, if known. If
 * unknown, use -1.
 * If _save is NULL it is assumed the GIL is taken
 * If _save is not NULL it is assumed the GIL is not taken and it
 * is acquired in the case of an error
 ','line_number':93,'multiline':True]
['text':' Check that index is valid, taking into account negative indices ','line_number':107,'multiline':True]
['text':' Try to be as clear as possible about what went wrong. ','line_number':110,'multiline':True]
['text':' adjust negative indices ','line_number':123,'multiline':True]
['text':'
 * Returns -1 and sets an exception if *axis is an invalid axis for
 * an array of dimension ndim, otherwise adjusts it in place to be
 * 0 <= *axis < ndim, and returns 0.
 *
 * msg_prefix: borrowed reference, a string to prepend to the message
 ','line_number':130,'multiline':True]
['text':' Check that index is valid, taking into account negative indices ','line_number':140,'multiline':True]
['text':'
         * Load the exception type, if we don't already have it. Unfortunately
         * we don't have access to npy_cache_import here
         ','line_number':142,'multiline':True]
['text':' Invoke the AxisError constructor ','line_number':154,'multiline':True]
['text':' adjust negative indices ','line_number':165,'multiline':True]
['text':' used for some alignment checks ','line_number':177,'multiline':True]
['text':'
 * GCC releases before GCC 4.9 had a bug in _Alignof.  See GCC bug 52023
 * <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=52023>.
 * clang versions < 8.0.0 have the same bug.
 ','line_number':178,'multiline':True]
['text':'
 * Disable harmless compiler warning "4116: unnamed type definition in
 * parentheses" which is caused by the _ALIGN macro.
 ','line_number':192,'multiline':True]
['text':'
 * return true if pointer is aligned to 'alignment'
 ','line_number':200,'multiline':True]
['text':'
     * Assumes alignment is a power of two, as required by the C standard.
     * Assumes cast from pointer to uintp gives a sensible representation we
     * can use bitwise & on (not required by C standard, but used by glibc).
     * This test is faster than a direct modulo.
     * Note alignment value of 0 is allowed and returns False.
     ','line_number':206,'multiline':True]
['text':' Get equivalent "uint" alignment given an itemsize, for use in copy code ','line_number':216,'multiline':True]
['text':' return value of 0 means unaligned ','line_number':220,'multiline':True]
['text':'
             * 16 byte types are copied using 2 uint64 assignments.
             * See the strided copy function in lowlevel_strided_loops.c.
             ','line_number':235,'multiline':True]
['text':'
 * memchr with stride and invert argument
 * intended for small searches where a call out to libc memchr is costly.
 * stride must be a multiple of size.
 * compared to memchr it returns one stride past end instead of NULL if needle
 * is not found.
 ','line_number':248,'multiline':True]
['text':'
     * The code below currently makes use of !NPY_ALIGNMENT_REQUIRED, which
     * should be OK but causes the clang sanitizer to warn.  It may make
     * sense to modify the code to avoid this "unaligned" access but
     * it would be good to carefully check the performance changes.
     ','line_number':256,'multiline':True]
['text':'
         * this is usually the path to determine elements to process,
         * performance less important here.
         * memchr has large setup cost if 0 byte is close to start.
         ','line_number':272,'multiline':True]
['text':' usually find elements to skip path ','line_number':283,'multiline':True]
['text':' iterate until last multiple of 4 ','line_number':285,'multiline':True]
['text':' handle rest ','line_number':294,'multiline':True]
['text':'
 * Simple helper to create a tuple from an array of items. The `make_null_none`
 * flag means that NULL entries are replaced with None, which is occasionally
 * useful.
 ','line_number':309,'multiline':True]
['text':'
 * Returns 0 if the array has rank 0, -1 otherwise. Prints a deprecation
 * warning for arrays of _size_ 1.
 ','line_number':335,'multiline':True]
['text':'
 * Make a new empty array, of the passed size, of a type that takes the
 * priority of ap1 and ap2 into account.
 *
 * If `out` is non-NULL, memory overlap is checked with ap1 and ap2, and an
 * updateifcopy temporary array may be returned. If `result` is non-NULL, the
 * output array to be returned (`out` if non-NULL and the newly allocated array
 * otherwise) is incref'd and put to *result.
 ','line_number':345,'multiline':True]
['text':'
 * Used to indicate a broadcast axis, see also `npyiter_get_op_axis` in
 * `nditer_constr.c`.  This may be the preferred API for reduction axes
 * probably. So we should consider making this public either as a macro or
 * function (so that the way we flag the axis can be changed).
 ','line_number':359,'multiline':True]
['text':' NUMPY_CORE_SRC_MULTIARRAY_COMMON_H_ ','line_number':367,'multiline':True]
