['text':' if "refcounting" is not needed memcpy is safe for a simple copy  ','line_number':50,'multiline':True]
['text':' NPY_END_THREADS already ensured. ','line_number':161,'multiline':True]
['text':'
 * Helper function instantiating npy_fasttake_impl in different branches
 * to allow the compiler to optimize each to the specific itemsize.
 ','line_number':167,'multiline':True]
['text':'NUMPY_API
 * Take
 ','line_number':225,'multiline':True]
['text':'
             * we need to make sure and get a copy
             * so the input array is not changed
             * before the error is called
             ','line_number':299,'multiline':True]
['text':' Index error, since that is the usual error for raise mode ','line_number':326,'multiline':True]
['text':'NUMPY_API
 * Put values into an array
 ','line_number':357,'multiline':True]
['text':' if has_references is not needed memcpy is safe for a simple copy  ','line_number':426,'multiline':True]
['text':'
 * Helper function instantiating npy_fastput_impl in different branches
 * to allow the compiler to optimize each to the specific itemsize.
 ','line_number':607,'multiline':True]
['text':'NUMPY_API
 * Put values into an array according to a mask.
 ','line_number':639,'multiline':True]
['text':' zero if null array ','line_number':687,'multiline':True]
['text':'NUMPY_API
 * Repeat the array.
 ','line_number':849,'multiline':True]
['text':'
     * Scalar and size 1 'repeat' arrays broadcast to any shape, for all
     * other inputs the dimension must match exactly.
     ','line_number':872,'multiline':True]
['text':' Construct new array ','line_number':912,'multiline':True]
['text':'NUMPY_API
 ','line_number':967,'multiline':True]
['text':'
     * Convert all inputs to arrays of a common type
     * Also makes them C-contiguous
     ','line_number':984,'multiline':True]
['text':' Broadcast all arrays to each other, index array at the end. ','line_number':1001,'multiline':True]
['text':' Set-up return array ','line_number':1009,'multiline':True]
['text':'
             * we need to make sure and get a copy
             * so the input array is not changed
             * before the error is called
             ','line_number':1040,'multiline':True]
['text':' We ensure memory doesn't overlap, so can use memcpy ','line_number':1102,'multiline':True]
['text':'
 * These algorithms use special sorting.  They are not called unless the
 * underlying sort function for the type is available.  Note that axis is
 * already valid. The sort functions require 1-d contiguous and well-behaved
 * data.  Therefore, a copy will be made of the data if needed before handing
 * it to the sorting routine.  An iterator is constructed and adjusted to walk
 * over all but the desired sorting axis.
 ','line_number':1144,'multiline':True]
['text':' Check if there is any sorting to do ','line_number':1179,'multiline':True]
['text':'
         * TODO: If the input array is byte-swapped but contiguous and
         * aligned, it could be swapped (and later unswapped) in-place
         * rather than after copying to the buffer. Care would have to
         * be taken to ensure that, if there is an error in the call to
         * sort or part, the unswapping is still done before returning.
         ','line_number':1246,'multiline':True]
['text':' cleanup internal buffer ','line_number':1294,'multiline':True]
['text':' Out of memory during sorting or buffer creation ','line_number':1301,'multiline':True]
['text':' Check if there is any argsorting to do ','line_number':1360,'multiline':True]
['text':' Object comparisons may raise an exception in Python 3 ','line_number':1439,'multiline':True]
['text':' Object comparisons may raise an exception in Python 3 ','line_number':1453,'multiline':True]
['text':' cleanup internal buffers ','line_number':1479,'multiline':True]
['text':' Out of memory during sorting or buffer creation ','line_number':1488,'multiline':True]
['text':'NUMPY_API
 * Sort an array in-place
 ','line_number':1503,'multiline':True]
['text':'
 * make kth array positive, ravel and sort it
 ','line_number':1553,'multiline':True]
['text':' 2021-09-29, NumPy 1.22 ','line_number':1567,'multiline':True]
['text':'
     * sort the array of kths so the partitions will
     * not trample on each other
     ','line_number':1604,'multiline':True]
['text':'NUMPY_API
 * Partition an array in-place
 ','line_number':1616,'multiline':True]
['text':' Use sorting, slower but equivalent ','line_number':1643,'multiline':True]
['text':' Process ktharray even if using sorting to do bounds checking ','line_number':1654,'multiline':True]
['text':'NUMPY_API
 * ArgSort an array
 ','line_number':1669,'multiline':True]
['text':'NUMPY_API
 * ArgPartition an array
 ','line_number':1715,'multiline':True]
['text':'
     * As a C-exported function, enum NPY_SELECTKIND loses its enum property
     * Check the values to make sure they are in range
     ','line_number':1727,'multiline':True]
['text':' Use sorting, slower but equivalent ','line_number':1739,'multiline':True]
['text':' Process ktharray even if using sorting to do bounds checking ','line_number':1755,'multiline':True]
['text':'NUMPY_API
 *LexSort an array providing indices that will sort a collection of arrays
 *lexicographically.  The first key is sorted on first, followed by the second key
 *-- requires that arg"merge"sort is available for each sort_key
 *
 *Returns an index array that shows the indexes for the lexicographic sort along
 *the given axis.
 ','line_number':1772,'multiline':True]
['text':' Now we can check the axis ','line_number':1849,'multiline':True]
['text':'
    * Special case letting axis={-1,0} slip through for scalars,
    * for backwards compatibility reasons.
    ','line_number':1851,'multiline':True]
['text':' TODO: can we deprecate this? ','line_number':1856,'multiline':True]
['text':' empty/single element case ','line_number':1862,'multiline':True]
['text':' Now do the sorting ','line_number':1885,'multiline':True]
['text':' Guaranteed and assumed by indbuffer ','line_number':1920,'multiline':True]
['text':' Ensure allocation is not empty ','line_number':1923,'multiline':True]
['text':' Out of memory during sorting or buffer creation ','line_number':2022,'multiline':True]
['text':'NUMPY_API
 *
 * Search the sorted array op1 for the location of the items in op2. The
 * result is an array of indexes, one for each element in op2, such that if
 * the item were to be inserted in op1 just before that index the array
 * would still be in sorted order.
 *
 * Parameters
 * ----------
 * op1 : PyArrayObject *
 *     Array to be searched, must be 1-D.
 * op2 : PyObject *
 *     Array of items whose insertion indexes in op1 are wanted
 * side : {NPY_SEARCHLEFT, NPY_SEARCHRIGHT}
 *     If NPY_SEARCHLEFT, return first valid insertion indexes
 *     If NPY_SEARCHRIGHT, return last valid insertion indexes
 * perm : PyObject *
 *     Permutation array that sorts op1 (optional)
 *
 * Returns
 * -------
 * ret : PyObject *
 *   New reference to npy_intp array containing indexes where items in op2
 *   could be validly inserted into op1. NULL on error.
 *
 * Notes
 * -----
 * Binary search is used to find the indexes.
 ','line_number':2037,'multiline':True]
['text':' Find common type ','line_number':2081,'multiline':True]
['text':' refs to dtype we own = 1 ','line_number':2086,'multiline':True]
['text':' Look for binary search function ','line_number':2088,'multiline':True]
['text':' refs to dtype we own = 1 ','line_number':2097,'multiline':True]
['text':' refs to dtype we own = 0 ','line_number':2099,'multiline':True]
['text':' need ap2 as contiguous array and of right type ','line_number':2103,'multiline':True]
['text':' refs to dtype we own = 1 ','line_number':2104,'multiline':True]
['text':' refs to dtype we own = 2 ','line_number':2106,'multiline':True]
['text':' refs to dtype we own = 1, array creation steals one even on failure ','line_number':2111,'multiline':True]
['text':' refs to dtype we own = 0 ','line_number':2114,'multiline':True]
['text':'
     * If the needle (ap2) is larger than the haystack (op1) we copy the
     * haystack to a contiguous array for improved cache utilization.
     ','line_number':2118,'multiline':True]
['text':' refs to dtype we own = 0, array creation steals one even on failure ','line_number':2127,'multiline':True]
['text':' need ap3 as a 1D aligned, not swapped, array of right type ','line_number':2133,'multiline':True]
['text':' convert to known integer size ','line_number':2148,'multiline':True]
['text':' ret is a contiguous array of intp type to hold returned indexes ','line_number':2164,'multiline':True]
['text':' do regular binsearch ','line_number':2174,'multiline':True]
['text':' do binsearch with a sorter array ','line_number':2185,'multiline':True]
['text':'NUMPY_API
 * Diagonal
 *
 * In NumPy versions prior to 1.7,  this function always returned a copy of
 * the diagonal array. In 1.7, the code has been updated to compute a view
 * onto 'self', but it still copies this array before returning, as well as
 * setting the internal WARN_ON_WRITE flag. In a future version, it will
 * simply return a view onto self.
 ','line_number':2218,'multiline':True]
['text':' Handle negative axes with standard Python indexing rules ','line_number':2247,'multiline':True]
['text':' Get the shape and strides of the two axes ','line_number':2260,'multiline':True]
['text':' Compute the data pointers and diag_size for the view ','line_number':2268,'multiline':True]
['text':' Build the new shape and strides for the main data ','line_number':2287,'multiline':True]
['text':' Create the diagonal view ','line_number':2299,'multiline':True]
['text':'
     * For numpy 1.9 the diagonal view is not writeable.
     * This line needs to be removed in 1.10.
     ','line_number':2310,'multiline':True]
['text':'NUMPY_API
 * Compress
 ','line_number':2319,'multiline':True]
['text':'
 * count number of nonzero bytes in 48 byte block
 * w must be aligned to 8 bytes
 *
 * even though it uses 64 bit types its faster than the bytewise sum on 32 bit
 * but a 32 bit type version would make it even faster on these platforms
 ','line_number':2363,'multiline':True]
['text':'
     * last part of sideways add popcount, first three bisections can be
     * skipped as we are dealing with bytes.
     * multiplication equivalent to (x + (x>>8) + (x>>16) + (x>>24)) & 0xFF
     * multiplication overflow well defined for unsigned types.
     * w1 + w2 guaranteed to not overflow as we only have 0 and 1 data.
     ','line_number':2382,'multiline':True]
['text':'
     * bytes not exclusively 0 or 1, sum them individually.
     * should only happen if one does weird stuff with views or external
     * buffers.
     * Doing this after the optimistic computation allows saving registers and
     * better pipelining
     ','line_number':2391,'multiline':True]
['text':' reload from pointer to avoid a unnecessary stack spill with gcc ','line_number':2400,'multiline':True]
['text':' Count the zero bytes between `*d` and `end`, updating `*d` to point to where to keep counting from. ','line_number':2414,'multiline':True]
['text':' we count zeros because `cmpeq` cheaper than `cmpneq` for most archs','line_number':2424,'multiline':False]
['text':' NPY_SIMD','line_number':2449,'multiline':False]
['text':'
 * Counts the number of non-zero values in a raw array.
 * The one loop process is shown below(take SSE2 with 128bits vector for example):
 *          |------------16 lanes---------|
 *[vsum8]   255 255 255 ... 255 255 255 255 count_zero_bytes_u8: counting 255*16 elements
 *                          !!
 *           |------------8 lanes---------|
 *[vsum16]   65535 65535 65535 ...   65535  count_zero_bytes_u16: counting (2*16-1)*16 elements
 *           65535 65535 65535 ...   65535
 *                          !!
 *           |------------4 lanes---------|
 *[sum_32_0] 65535    65535   65535   65535  count_nonzero_bytes
 *           65535    65535   65535   65535
 *[sum_32_1] 65535    65535   65535   65535
 *           65535    65535   65535   65535
 *                          !!
 *                     (2*16-1)*16
','line_number':2450,'multiline':True]
['text':' NPY_SIMD','line_number':2496,'multiline':False]
['text':'
 * Counts the number of True values in a raw boolean array. This
 * is a low-overhead function which does no heap allocations.
 *
 * Returns -1 on error.
 ','line_number':2591,'multiline':True]
['text':' Use raw iteration with no heap memory allocation','line_number':2605,'multiline':False]
['text':' Handle zero-sized array','line_number':2614,'multiline':False]
['text':'
 * Counts the number of True values in a raw boolean array. This
 * is a low-overhead function which does no heap allocations.
 *
 * Returns -1 on error.
 ','line_number':2641,'multiline':True]
['text':'NUMPY_API
 * Counts the number of non-zero elements in the array.
 *
 * Returns -1 on error.
 ','line_number':2653,'multiline':True]
['text':' Special low-overhead version specific to the boolean/int types ','line_number':2675,'multiline':True]
['text':' If it's a trivial one-dimensional loop, don't use an iterator ','line_number':2685,'multiline':True]
['text':'
     * If the array has size zero, return zero (the iterator rejects
     * size zero arrays)
     ','line_number':2715,'multiline':True]
['text':'
     * Otherwise create and use an iterator to count the nonzeros.
     ','line_number':2723,'multiline':True]
['text':' Get the pointers for inner loop iteration ','line_number':2736,'multiline':True]
['text':' Iterate over all the elements to count the nonzeros ','line_number':2749,'multiline':True]
['text':'NUMPY_API
 * Nonzero
 *
 * TODO: In NumPy 2.0, should make the iteration order a parameter.
 ','line_number':2776,'multiline':True]
['text':' Special case - nonzero(zero_d) is nonzero(atleast_1d(zero_d)) ','line_number':2806,'multiline':True]
['text':' array creation steals reference ','line_number':2829,'multiline':True]
['text':'
     * First count the number of non-zeros in 'self'.
     ','line_number':2842,'multiline':True]
['text':' Allocate the result as a 2D array ','line_number':2852,'multiline':True]
['text':' If it's a one-dimensional result, don't use an iterator ','line_number':2863,'multiline':True]
['text':' nothing to do ','line_number':2871,'multiline':True]
['text':' avoid function call for bool ','line_number':2880,'multiline':True]
['text':'
             * use fast memchr variant for sparse data, see gh-4370
             * the fast bool count is followed by this sparse path is faster
             * than combining the two loops, even for larger arrays
             ','line_number':2882,'multiline':True]
['text':'
             * Fallback to a branchless strategy to avoid branch misprediction
             * stalls that are very expensive on most modern processors.
             ','line_number':2900,'multiline':True]
['text':' Manually unroll for GCC and maybe other compilers ','line_number':2908,'multiline':True]
['text':'
     * Build an iterator tracking a multi-index, in C order.
     ','line_number':2951,'multiline':True]
['text':' Get the pointers for inner loop iteration ','line_number':2969,'multiline':True]
['text':' Get the multi-index for each non-zero element ','line_number':2991,'multiline':True]
['text':' avoid function call for bool ','line_number':2993,'multiline':True]
['text':' if executed `nonzero()` check for miscount due to side-effect ','line_number':3027,'multiline':True]
['text':' Create views into ret, one for each dimension ','line_number':3042,'multiline':True]
['text':' the result is an empty array, the view must point to valid memory ','line_number':3045,'multiline':True]
['text':'
 * Gets a single item from the array, based on a single multi-index
 * array of values, which must be of length PyArray_NDIM(self).
 ','line_number':3064,'multiline':True]
['text':' Get the data pointer ','line_number':3076,'multiline':True]
['text':'
 * Sets a single item in the array, based on a single multi-index
 * array of values, which must be of length PyArray_NDIM(self).
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':3090,'multiline':True]
['text':' Get the data pointer ','line_number':3105,'multiline':True]
