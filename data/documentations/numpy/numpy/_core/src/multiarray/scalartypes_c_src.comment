['text':' -*- c -*- ','line_number':1,'multiline':True]
['text':' determines if legacy mode is enabled, global set in multiarraymodule.c ','line_number':40,'multiline':True]
['text':'
 * used for allocating a single scalar, so use the default numpy
 * memory allocators instead of the (maybe) user overrides
 ','line_number':43,'multiline':True]
['text':' TimeInteger is deleted, but still here to fill the API slot ','line_number':58,'multiline':True]
['text':'
 * Inheritance is established later when tp_bases is set (or tp_base for
 * single inheritance)
 ','line_number':61,'multiline':True]
['text':'*begin repeat
 * #name = number, integer, signedinteger, unsignedinteger, inexact,
 *         floating, complexfloating, flexible, character#
 * #NAME = Number, Integer, SignedInteger, UnsignedInteger, Inexact,
 *         Floating, ComplexFloating, Flexible, Character#
 ','line_number':66,'multiline':True]
['text':'*end repeat*','line_number':77,'multiline':True]
['text':'
     * If we don't need to zero memory, we could use
     * PyObject_{New, NewVar} for this whole function.
     ','line_number':90,'multiline':True]
['text':'
     * have an explicit tp_free to enforce inheritance from it.
     * PyObject_Free is also the tp_free of PyBaseObject so python does not
     * COPYSLOT it, instead it takes the next parent PyInt which has a
     * different allocator
     ','line_number':113,'multiline':True]
['text':' modular exponentiation is not implemented (gh-8804) ','line_number':127,'multiline':True]
['text':' special case str.__radd__, which should not call array_add ','line_number':170,'multiline':True]
['text':'*begin repeat
 *
 * #name = subtract, remainder, divmod, lshift, rshift,
 *         and, xor, or, floor_divide, true_divide#
 ','line_number':179,'multiline':True]
['text':'*end repeat*','line_number':191,'multiline':True]
['text':' Get a nested slot, or NULL if absent ','line_number':193,'multiline':True]
['text':'
     * If the other object supports sequence repeat and not number multiply
     * we fall back on the python builtin to invoke the sequence repeat, rather
     * than promoting both arguments to ndarray.
     * This covers a list repeat by numpy scalars.
     * A python defined class will always only have the nb_multiply slot and
     * some classes may have neither defined. For the latter we want need
     * to give the normal case a chance to convert the object to ndarray.
     * Probably no class has both defined, but if they do, prefer number.
     ','line_number':200,'multiline':True]
['text':' All normal cases are handled by PyArray's multiply ','line_number':222,'multiline':True]
['text':'*begin repeat
 * #TYPE    = BYTE, UBYTE, SHORT, USHORT, INT, UINT,
 *            LONG, ULONG, LONGLONG, ULONGLONG#
 * #type    = npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint,
 *            npy_long, npy_ulong, npy_longlong, npy_ulonglong#
 * #c       = hh, uhh, h, uh,, u, l, ul, ll, ull#
 * #Name    = Byte, UByte, Short, UShort, Int, UInt,
 *            Long, ULong, LongLong, ULongLong#
 * #convert = Long*8, LongLong*2#
 ','line_number':227,'multiline':True]
['text':'*end repeat*','line_number':246,'multiline':True]
['text':'*begin repeat
 *
 * #name = positive, negative, absolute, invert, int, float#
 ','line_number':248,'multiline':True]
['text':'*end repeat*','line_number':265,'multiline':True]
['text':' Not a builtin scalar (presumably), just use the name ','line_number':347,'multiline':True]
['text':' cannot fail ','line_number':353,'multiline':True]
['text':'
 * The __format__ method for PEP 3101.
 ','line_number':383,'multiline':True]
['text':'
     * Convert to an appropriate Python type and call its format.
     * TODO: For some types, like long double, this isn't right,
     *       because it throws away precision.
     ','line_number':396,'multiline':True]
['text':'*begin repeat
 * #name = half, float, double, longdouble#
 * #Name = Half, Float, Double, LongDouble#
 * #NAME = HALF, FLOAT, DOUBLE, LONGDOUBLE#
 * #type = npy_half, npy_float, npy_double, npy_longdouble#
 * #suff = h, f, d, l#
 ','line_number':443,'multiline':True]
['text':'*end repeat*','line_number':469,'multiline':True]
['text':'
 * Over-ride repr and str of array-scalar byte strings to remove NULL bytes and
 * then call the corresponding functions of PyBytes_Type to generate the string
 ','line_number':471,'multiline':True]
['text':'*begin repeat
 * #form = repr, str#
 ','line_number':476,'multiline':True]
['text':' IS_repr ','line_number':505,'multiline':True]
['text':'*end repeat*','line_number':509,'multiline':True]
['text':'
 * Over-ride repr and str of array-scalar strings to remove NULL code points and
 * then call the corresponding functions of PyUnicode_Type to generate the string
 ','line_number':511,'multiline':True]
['text':'*begin repeat
 * #form = repr, str#
 ','line_number':516,'multiline':True]
['text':' PyUnicode_READY is called by PyUnicode_GetLength ','line_number':529,'multiline':True]
['text':' IS_repr ','line_number':552,'multiline':True]
['text':'*end repeat*','line_number':558,'multiline':True]
['text':'
 * Convert array of bytes to a string representation much like bytes.__repr__,
 * but convert all bytes (including ASCII) to the `\x00` notation with
 * uppercase hex codes (FF not ff).
 *
 * Largely copied from _Py_strhex_impl in CPython implementation
 ','line_number':560,'multiline':True]
['text':' Python helper checks for the legacy mode printing ','line_number':626,'multiline':True]
['text':'
     * For straight units or generic units, the unit will be deduced
     * from the string, so it's not necessary to specify it.
     ','line_number':675,'multiline':True]
['text':' The value ','line_number':719,'multiline':True]
['text':' Can't use "%lld" if HAVE_LONG_LONG is not defined ','line_number':724,'multiline':True]
['text':' The metadata unit ','line_number':735,'multiline':True]
['text':'
         * Can't use "%lld" if HAVE_LONG_LONG is not defined
         ','line_number':839,'multiline':True]
['text':'
 * float type str and repr
 *
 * These functions will return NULL if PyString creation fails.
 ','line_number':854,'multiline':True]
['text':'
 *               *** BEGIN LEGACY PRINTING MODE CODE ***
 *
 * This code is legacy code needed to reproduce the printing behavior of
 * scalars in numpy 1.13. One day we hope to remove it.
 ','line_number':861,'multiline':True]
['text':' More than probably needed on Intel FP ','line_number':878,'multiline':True]
['text':'*begin repeat
 * #kind = str, repr#
 * #KIND = STR, REPR#
 ','line_number':883,'multiline':True]
['text':'*begin repeat1
 * #name = cfloat, cdouble, clongdouble#
 * #NAME = FLOAT, DOUBLE, LONGDOUBLE#
 * #TYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = npy_cfloat, npy_cdouble, npy_clongdouble#
 * #t = f, , l#
 * #suff = f, d, l#
 ','line_number':888,'multiline':True]
['text':' XXX: Find a correct size here for format string ','line_number':903,'multiline':True]
['text':'
     * Ideally, we should handle this nan/inf stuff in NumpyOS_ascii_format*
     ','line_number':906,'multiline':True]
['text':'*end repeat1*','line_number':978,'multiline':True]
['text':'*begin repeat1
 * #name = float, double, longdouble#
 * #Name = Float, Double, LongDouble#
 * #NAME = FLOAT, DOUBLE, LONGDOUBLE#
 * #suff = f, d, l#
 ','line_number':980,'multiline':True]
['text':' XXX: Find a correct size here for format string ','line_number':991,'multiline':True]
['text':' If nothing but digits after sign, append ".0" ','line_number':1002,'multiline':True]
['text':'*end repeat1*','line_number':1018,'multiline':True]
['text':'*end repeat*','line_number':1020,'multiline':True]
['text':'
 *               *** END LEGACY PRINTING MODE CODE ***
 ','line_number':1023,'multiline':True]
['text':'*begin repeat
 * #kind = str, repr#
 ','line_number':1028,'multiline':True]
['text':'*begin repeat1
 * #name = float, double, longdouble#
 * #Name = Float, Double, LongDouble#
 * #NAME = FLOAT, DOUBLE, LONGDOUBLE#
 * #n = f, , l#
 * #repr_format = np.float32(%S), np.float64(%S), np.longdouble('%S')#
 * #crepr_imag_format = np.complex64(%Sj), np.complex128(%Sj),
 *                 np.clongdouble('%Sj')#
 * #crepr_format = np.complex64(%S%Sj), np.complex128(%S%Sj),
 *                 np.clongdouble('%S%Sj')#
 ','line_number':1034,'multiline':True]
['text':' helper function choose scientific of fractional output, based on a cutoff ','line_number':1046,'multiline':True]
['text':' IS_repr ','line_number':1086,'multiline':True]
['text':' IS_repr ','line_number':1110,'multiline':True]
['text':' IS_repr ','line_number':1117,'multiline':True]
['text':' IS_repr ','line_number':1158,'multiline':True]
['text':' IS_repr ','line_number':1165,'multiline':True]
['text':'*end repeat1*','line_number':1174,'multiline':True]
['text':'*end repeat*','line_number':1208,'multiline':True]
['text':'
     * If the other object is None, False is always right. This avoids
     * the array None comparison, at least until deprecation it is fixed.
     * After that, this may be removed and numpy false would be returned.
     *
     * NOTE: np.equal(NaT, None) evaluates to TRUE! This is an
     *       an inconsistency, which may has to be considered
     *       when the deprecation is finished.
     ','line_number':1267,'multiline':True]
['text':'
     * Call via PyObject_RichCompare to ensure that other.__eq__
     * has a chance to run when necessary
     ','line_number':1291,'multiline':True]
['text':' Sentinel ','line_number':1693,'multiline':True]
['text':' 0-dim array from scalar object ','line_number':1697,'multiline':True]
['text':'
 * These gentype_* functions do not take keyword arguments.
 * The proper flag is METH_VARARGS.
 ','line_number':1742,'multiline':True]
['text':'*begin repeat
 *
 * #name = tolist, item, __deepcopy__, __copy__,
 *         swapaxes, conj, conjugate, nonzero,
 *         fill, transpose#
 ','line_number':1746,'multiline':True]
['text':'*end repeat*','line_number':1757,'multiline':True]
['text':' get the data, copyswap it and pass it to a new Array scalar ','line_number':1775,'multiline':True]
['text':'
 * These gentype_* functions take keyword arguments.
 * The proper flag is METH_VARARGS | METH_KEYWORDS.
 ','line_number':1800,'multiline':True]
['text':'*begin repeat
 *
 * #name = take, getfield, put, repeat, tofile, mean, trace, diagonal, clip,
 *         std, var, sum, cumsum, prod, cumprod, compress, sort, argsort,
 *         round, argmax, argmin, max, min, any, all, astype, resize,
 *         reshape, choose, tostring, tobytes, copy, searchsorted, view,
 *         flatten, ravel, squeeze#
 ','line_number':1804,'multiline':True]
['text':'*end repeat*','line_number':1817,'multiline':True]
['text':'*begin repeat
 * #name = integer, floating, complexfloating#
 * #complex = 0, 0, 1#
 ','line_number':1820,'multiline':True]
['text':'*end repeat*','line_number':1869,'multiline':True]
['text':' Use ndarray's getfield to obtain the field safely ','line_number':1874,'multiline':True]
['text':'
     * We would like to use ndarray's setfield because it performs safety
     * checks on the field datatypes and because it broadcasts properly.
     * However, as a special case, void-scalar assignment broadcasts
     * differently from ndarrays when assigning to an object field: Assignment
     * to an ndarray object field broadcasts, but assignment to a void-scalar
     * object-field should not, in order to allow nested ndarrays.
     * These lines should then behave identically:
     *
     *     b = np.zeros(1, dtype=[('x', 'O')])
     *     b[0]['x'] = arange(3)  # uses voidtype_setfield
     *     b['x'][0] = arange(3)  # uses ndarray setitem
     *
     * Ndarray's setfield would try to broadcast the lhs. Instead we use
     * ndarray getfield to get the field safely, then setitem with an empty
     * tuple to set the value without broadcast. Note we also want subarrays to
     * be set properly, ie
     *
     *     a = np.zeros(1, dtype=[('x', 'i', 5)])
     *     a[0]['x'] = 1
     *
     * sets all values to 1. "getfield + setitem with empty tuple" takes
     * care of both object arrays and subarrays.
     ','line_number':1890,'multiline':True]
['text':' 1. Convert to 0-d array and use getfield ','line_number':1925,'multiline':True]
['text':' 2. Assign the value using setitem with empty tuple. ','line_number':1951,'multiline':True]
['text':' Return a tuple of (callable object, arguments) ','line_number':1973,'multiline':True]
['text':'
         * In Python 3 both of the deprecated functions PyObject_AsWriteBuffer and
         * PyObject_AsReadBuffer that this code replaces release the buffer. It is
         * up to the object that supplies the buffer to guarantee that the buffer
         * sticks around after the release.
         ','line_number':1982,'multiline':True]
['text':' a structured dtype with an object in a field ','line_number':2018,'multiline':True]
['text':' Use the whole array which handles structured void correctly ','line_number':2024,'multiline':True]
['text':' ignores everything ','line_number':2044,'multiline':True]
['text':' setting flags cannot be done for scalars ','line_number':2077,'multiline':True]
['text':' complexfloating should take 2 parameters, all others take 1 ','line_number':2091,'multiline':True]
['text':'
 * Use for concrete np.number subclasses, making them act as if they
 * were subtyped from e.g. np.signedinteger[object], thus lacking any
 * free subscription parameters. Requires python >= 3.9.
 ','line_number':2109,'multiline':True]
['text':'
 * casting complex numbers (that don't inherit from Python complex)
 * to Python complex
 ','line_number':2123,'multiline':True]
['text':'*begin repeat
 * #name = cfloat, clongdouble#
 * #Name = CFloat, CLongDouble#
 * #NAME = CFLOAT, CLONGDOUBLE#
 * #n = f, l#
 ','line_number':2128,'multiline':True]
['text':'*end repeat*','line_number':2141,'multiline':True]
['text':'*begin repeat
 *  #name = half, float, double, longdouble#
 *  #Name = Half, Float, Double, LongDouble#
 *  #is_half = 1,0,0,0#
 *  #c    = f, f, , l#
 *  #convert = PyLong_FromDouble, PyLong_FromDouble, PyLong_FromDouble,
 *             npy_longdouble_to_PyLong#
 *  #
 ','line_number':2143,'multiline':True]
['text':' Heavily copied from the builtin float.as_integer_ratio ','line_number':2152,'multiline':True]
['text':' val == frac * 2**exponent exactly ','line_number':2182,'multiline':True]
['text':' This relies on the floating point type being base 2 to converge ','line_number':2184,'multiline':True]
['text':' self == frac * 2**exponent exactly and frac is integral. ','line_number':2190,'multiline':True]
['text':' fold in 2**exponent ','line_number':2201,'multiline':True]
['text':'*end repeat*','line_number':2225,'multiline':True]
['text':'*begin repeat
 *  #name = half, float, double, longdouble#
 *  #Name = Half, Float, Double, LongDouble#
 *  #is_half = 1,0,0,0#
 *  #c    = f, f, , l#
 ','line_number':2227,'multiline':True]
['text':'*end repeat*','line_number':2254,'multiline':True]
['text':'
 * need to fill in doc-strings for these methods on import -- copy from
 * array docstrings
 ','line_number':2261,'multiline':True]
['text':' for the sys module ','line_number':2306,'multiline':True]
['text':' for the copy module ','line_number':2311,'multiline':True]
['text':' For consistency does nothing ','line_number':2322,'multiline':True]
['text':' Methods for array ','line_number':2334,'multiline':True]
['text':' For the format function ','line_number':2443,'multiline':True]
['text':' sentinel ','line_number':2451,'multiline':True]
['text':' for typing ','line_number':2499,'multiline':True]
['text':' sentinel ','line_number':2503,'multiline':True]
['text':'*begin repeat
 * #name = cfloat,clongdouble#
 ','line_number':2506,'multiline':True]
['text':' for typing ','line_number':2513,'multiline':True]
['text':'*end repeat*','line_number':2519,'multiline':True]
['text':'*begin repeat
 * #name = floating, complexfloating#
 ','line_number':2521,'multiline':True]
['text':' Hook for the round() builtin ','line_number':2525,'multiline':True]
['text':' sentinel ','line_number':2529,'multiline':True]
['text':'*end repeat*','line_number':2531,'multiline':True]
['text':' Hook for the round() builtin ','line_number':2534,'multiline':True]
['text':' sentinel ','line_number':2541,'multiline':True]
['text':'*begin repeat
 * #name = half,float,double,longdouble#
 ','line_number':2544,'multiline':True]
['text':' for typing ','line_number':2554,'multiline':True]
['text':'*end repeat*','line_number':2560,'multiline':True]
['text':'*begin repeat
 * #name = timedelta, cdouble#
 ','line_number':2562,'multiline':True]
['text':' for typing ','line_number':2566,'multiline':True]
['text':'*end repeat*','line_number':2572,'multiline':True]
['text':'*begin repeat
 * #name = byte, ubyte, short, ushort, int, uint,
 *         long, ulong, longlong, ulonglong#
 ','line_number':2574,'multiline':True]
['text':' for typing ','line_number':2579,'multiline':True]
['text':' sentinel ','line_number':2586,'multiline':True]
['text':'*end repeat*','line_number':2588,'multiline':True]
['text':'************ As_mapping functions for void array scalar ***********','line_number':2591,'multiline':True]
['text':' return the number of fields ','line_number':2600,'multiline':True]
['text':' get field by name or number ','line_number':2632,'multiline':True]
['text':' structured voids will accept an integer index ','line_number':2639,'multiline':True]
['text':' ellipsis should return 0d array ','line_number':2650,'multiline':True]
['text':'
     * other cases (field names, empty tuple) will return either
     * scalar or non-0d array. Compute this using ndarray subscript.
     ','line_number':2655,'multiline':True]
['text':'
         * Much like in voidtype_setfield, we cannot simply use ndarray's
         * __setitem__ since assignment to void scalars should not broadcast
         * the lhs. Instead we get a view through __getitem__ and then assign
         * the value using setitem with an empty tuple (which treats both
         * object arrays and subarrays properly).
         *
         * Also we do not want to use voidtype_setfield here, since we do
         * not need to do the (slow) view safety checks, since we already
         * know the dtype/offset are safe.
         ','line_number':2712,'multiline':True]
['text':' 1. Convert to 0-d array and use getitem ','line_number':2726,'multiline':True]
['text':' 2. Assign the value using setitem with empty tuple. ','line_number':2746,'multiline':True]
['text':' try to convert it to a number ','line_number':2758,'multiline':True]
['text':'
 * This function implements simple buffer export for user defined subclasses
 * of `np.generic`. All other scalar types override the buffer export.
 ','line_number':2784,'multiline':True]
['text':' This path would also reject the (hopefully) impossible "object" ','line_number':2806,'multiline':True]
['text':' assume general (user) scalars are readonly. ','line_number':2820,'multiline':True]
['text':'*begin repeat
 * #name = bool, byte, short, int, long, longlong, ubyte, ushort, uint, ulong,
 *         ulonglong, half, float, double, longdouble, cfloat, cdouble,
 *         clongdouble#
 * #Name = Bool, Byte, Short, Int, Long, LongLong, UByte, UShort, UInt, ULong,
 *         ULongLong, Half, Float, Double, LongDouble, CFloat, CDouble,
 *         CLongDouble#
 * #NAME = BOOL, BYTE, SHORT, INT, LONG, LONGLONG, UBYTE, USHORT, UINT, ULONG,
 *         ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT, CDOUBLE,
 *         CLONGDOUBLE#
 * #fmt = ?, b, h, i, l, q, B, H, I, L, Q, e, f, d, g, Zf, Zd, Zg#
 ','line_number':2835,'multiline':True]
['text':' It is unnecessary to find the correct format ','line_number':2871,'multiline':True]
['text':' No need to release the buffer ','line_number':2883,'multiline':True]
['text':'*end repeat*','line_number':2886,'multiline':True]
['text':'
         * Unicode may not have the representation available, `scalar_value`
         * ensures materialization.
         ','line_number':2909,'multiline':True]
['text':' allocating memory failed ','line_number':2917,'multiline':True]
['text':' It is unnecessary to find the correct format ','line_number':2925,'multiline':True]
['text':' No need to release the buffer ','line_number':2948,'multiline':True]
['text':'*begin repeat
 * #name = datetime, timedelta#
 * #Name = Datetime, Timedelta#
 ','line_number':2952,'multiline':True]
['text':' It is unnecessary to find the correct format ','line_number':2980,'multiline':True]
['text':' export datetime scalars as bytes (although arrays are not exported) ','line_number':2985,'multiline':True]
['text':' No need to release the buffer ','line_number':2993,'multiline':True]
['text':'*end repeat*','line_number':2996,'multiline':True]
['text':' defined in buffer.c ','line_number':2999,'multiline':True]
['text':' No need to release the buffer ','line_number':3000,'multiline':True]
['text':'
     * Object scalars should not actually exist, if they exist we should
     * consider it to be a bug.
     ','line_number':3032,'multiline':True]
['text':' note: may be null if it was never requested ','line_number':3063,'multiline':True]
['text':' delegate to the base class ','line_number':3066,'multiline':True]
['text':'*begin repeat
 * #name = byte, short, int, long, longlong, ubyte, ushort, uint, ulong,
 *         ulonglong, half, float, double, longdouble, cfloat, cdouble,
 *         clongdouble, string, unicode#
 * #Name = Byte, Short, Int, Long, LongLong, UByte, UShort, UInt, ULong,
 *         ULongLong, Half, Float, Double, LongDouble, CFloat, CDouble,
 *         CLongDouble, String, Unicode#
 * #TYPE = BYTE, SHORT, INT, LONG, LONGLONG, UBYTE, USHORT, UINT, ULONG,
 *         ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT, CDOUBLE,
 *         CLONGDOUBLE, STRING, UNICODE#
 ','line_number':3070,'multiline':True]
['text':' used as a pattern for testing token equality ','line_number':3082,'multiline':True]
['text':' allow base-class (if any) to do conversion ','line_number':3088,'multiline':True]
['text':' don't clear the exception unless numpy can handle the arguments ','line_number':3098,'multiline':True]
['text':' TODO: include type name in error message, which is not @name@ ','line_number':3112,'multiline':True]
['text':' positional-only ','line_number':3115,'multiline':True]
['text':' positional-only ','line_number':3139,'multiline':True]
['text':' getting the typecode like this cannot fail','line_number':3144,'multiline':False]
['text':' PyArray_FromAny steals a reference, reclaim it before it's gone ','line_number':3158,'multiline':True]
['text':' Convert the 0-d array to a scalar','line_number':3174,'multiline':True]
['text':'
     * `typecode` does not contain any subclass information, as it was thrown
     * out by the call to `PyArray_DescrFromType` - we need to add this back.
     *
     * FIXME[gh-15467]: This branch is also hit for the "shadowed" builtin
     * types like `longdouble` (which on platforms where they are the same size
     * is shadowed by `double`), because `PyArray_FromAny` returns the
     * shadowing type rather than the requested one.
     ','line_number':3183,'multiline':True]
['text':' Need to allocate new type and copy data-area over ','line_number':3193,'multiline':True]
['text':' unicode ','line_number':3211,'multiline':True]
['text':'*end repeat*','line_number':3223,'multiline':True]
['text':' positional-only ','line_number':3229,'multiline':True]
['text':'*begin repeat
 * #name = datetime, timedelta#
 * #Name = Datetime, Timedelta#
 * #NAME = DATETIME, TIMEDELTA#
 * #is_datetime = 1, 0#
 ','line_number':3242,'multiline':True]
['text':' positional-only ','line_number':3255,'multiline':True]
['text':' Allocate the return scalar ','line_number':3260,'multiline':True]
['text':' Incorporate the metadata if its provided ','line_number':3267,'multiline':True]
['text':' Parse the provided metadata input ','line_number':3269,'multiline':True]
['text':'
         * A unit of -1 signals that convert_pyobject_to_datetime
         * should populate.
         ','line_number':3277,'multiline':True]
['text':' Make datetime default to NaT, timedelta default to zero ','line_number':3290,'multiline':True]
['text':'*end repeat*','line_number':3305,'multiline':True]
['text':' bool->tp_new only returns Py_True or Py_False ','line_number':3307,'multiline':True]
['text':' positional-only ','line_number':3314,'multiline':True]
['text':'*begin repeat
 * #name = byte, short, int, long, ubyte, ushort, longlong, uint,
 *         ulong, ulonglong#
 * #Name = Byte, Short, Int, Long, UByte, UShort, LongLong, UInt,
 *         ULong, ULongLong#
 * #type = PyLong_FromLong*6, PyLong_FromLongLong*1,
 *         PyLong_FromUnsignedLong*2, PyLong_FromUnsignedLongLong#
 ','line_number':3373,'multiline':True]
['text':'*end repeat*','line_number':3387,'multiline':True]
['text':'*begin repeat
 *  #name = half, float, double, longdouble,
 *          cfloat, cdouble, clongdouble#
 *  #NAME = Half, Float, Double, LongDouble,
 *          CFloat, CDouble, CLongDouble#
 ','line_number':3389,'multiline':True]
['text':'*end repeat*','line_number':3396,'multiline':True]
['text':' Arithmetic methods -- only so we can override &, |, ^. ','line_number':3411,'multiline':True]
['text':'
     * For a VOID scalar first see if obj is an integer or long
     * and create new memory of that size (filled with 0) for the scalar
     ','line_number':3430,'multiline':True]
['text':' Use the "size-less" void dtype to discover the size. ','line_number':3485,'multiline':True]
['text':' we reject subarrays, since subarray scalars do not exist. ','line_number':3492,'multiline':True]
['text':'***************  Define Hash functions *******************','line_number':3506,'multiline':True]
['text':'*begin repeat
 * #lname = bool, ubyte, ushort#
 * #name = Bool,UByte, UShort#
 ','line_number':3508,'multiline':True]
['text':'*end repeat*','line_number':3517,'multiline':True]
['text':'*begin repeat
 * #lname = byte, short, uint#
 * #name = Byte, Short, UInt#
 ','line_number':3519,'multiline':True]
['text':'*end repeat*','line_number':3532,'multiline':True]
['text':'*begin repeat
 * #char = ,u#
 * #Char = ,U#
 * #Word = ,Unsigned#
 ','line_number':3562,'multiline':True]
['text':'*end repeat*','line_number':3576,'multiline':True]
['text':'*begin repeat
 * #lname = datetime, timedelta#
 * #name = Datetime, Timedelta#
 ','line_number':3579,'multiline':True]
['text':'*end repeat*','line_number':3618,'multiline':True]
['text':' Wrong thing to do for longdouble, but....','line_number':3622,'multiline':True]
['text':'*begin repeat
 * #lname = float, longdouble#
 * #name = Float, LongDouble#
 * #NAME = FLOAT, LONGDOUBLE#
 * #n = f, l#
 ','line_number':3624,'multiline':True]
['text':' borrowed from complex_hash ','line_number':3636,'multiline':True]
['text':'*end repeat*','line_number':3658,'multiline':True]
['text':' we used to just hash the pointer ','line_number':3673,'multiline':True]
['text':' now use tuplehash algorithm using voidtype_item to get the object
','line_number':3674,'multiline':True]
['text':' Cannot hash mutable void scalars ','line_number':3686,'multiline':True]
['text':'object arrtype getattro and setattro ','line_number':3707,'multiline':True]
['text':' first look in object and then hand off to generic type ','line_number':3712,'multiline':True]
['text':' first look in object and then hand off to generic type ','line_number':3725,'multiline':True]
['text':'
     * Only [...], [...,<???>], [<???>, ...],
     * is allowed for indexing a scalar
     *
     * These return a new N-d array with a copy of
     * the data where N is the number of None's in <???>.
     ','line_number':3853,'multiline':True]
['text':'*begin repeat
 * #Name = Bool,
 *         Byte, Short, Int, Long, LongLong,
 *         UByte, UShort, UInt, ULong, ULongLong,
 *         Half, Float, Double, LongDouble,
 *         CFloat, CDouble, CLongDouble,
 *         String, Unicode, Void,
 *         Datetime, Timedelta#
 * #NAME = BOOL,
 *         BYTE, SHORT, INT, LONG, LONGLONG,
 *         UBYTE, USHORT, UINT, ULONG, ULONGLONG,
 *         HALF, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE,
 *         STRING, UNICODE, VOID,
 *         DATETIME, TIMEDELTA#
 ','line_number':3874,'multiline':True]
['text':'*end repeat*','line_number':3897,'multiline':True]
['text':'
 * This table maps the built-in type numbers to their scalar
 * type numbers.  Note that signed integers are mapped to INTNEG_SCALAR,
 * which is different than what PyArray_ScalarKind returns.
 ','line_number':3905,'multiline':True]
['text':'
 * This table maps a scalar kind (excluding NPY_NOSCALAR)
 * to the smallest type number of that kind.
 ','line_number':3913,'multiline':True]
['text':'
 * This table gives the type of the same kind, but next in the sequence
 * of sizes.
 ','line_number':3920,'multiline':True]
['text':'
 * This table gives the smallest-size and smallest-kind type to which
 * the input types may be safely cast, according to _npy_can_cast_safely.
 ','line_number':3927,'multiline':True]
['text':' Default for built-in types is object scalar ','line_number':3946,'multiline':True]
['text':' Default for next largest type is -1, signalling no bigger ','line_number':3949,'multiline':True]
['text':' Compile-time loop of scalar kinds ','line_number':3953,'multiline':True]
['text':'*begin repeat
     * #NAME = BOOL,
     *         BYTE, UBYTE, SHORT, USHORT, INT, UINT,
     *         LONG, ULONG, LONGLONG, ULONGLONG,
     *         HALF, FLOAT, DOUBLE, LONGDOUBLE,
     *         CFLOAT, CDOUBLE, CLONGDOUBLE#
     * #BIGGERTYPE = -1,
     *         NPY_SHORT, NPY_USHORT, NPY_INT, NPY_UINT, NPY_LONG, NPY_ULONG,
     *         NPY_LONGLONG, NPY_ULONGLONG, -1, -1,
     *         NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE, -1,
     *         NPY_CDOUBLE, NPY_CLONGDOUBLE, -1#
     * #SCKIND = BOOL,
     *           (INTNEG, INTPOS)*5,
     *           FLOAT*4,
     *           COMPLEX*3#
     ','line_number':3955,'multiline':True]
['text':'*end repeat*','line_number':3975,'multiline':True]
['text':'*end repeat1*','line_number':3980,'multiline':True]
['text':'*end repeat*','line_number':3985,'multiline':True]
['text':'
     * Now that the _can_cast_safely table is finished, we can
     * use it to build the _type_promotion table
     ','line_number':3987,'multiline':True]
['text':' Don't let number promote to string/unicode/void/datetime/timedelta ','line_number':3993,'multiline':True]
['text':' Promoting these types requires examining their contents ','line_number':3996,'multiline':True]
['text':' Except they can convert to OBJECT ','line_number':4002,'multiline':True]
['text':' Don't let number promote to string/unicode/void ','line_number':4008,'multiline':True]
['text':' If there's no kind (void/string/etc) ','line_number':4025,'multiline':True]
['text':' Start with the type of larger kind ','line_number':4030,'multiline':True]
['text':' Try the next larger type of this kind ','line_number':4040,'multiline':True]
['text':' If there is no larger, try a larger kind ','line_number':4043,'multiline':True]
['text':' Use -1 to signal no promoted type found ','line_number':4046,'multiline':True]
['text':'
     * need to add dummy versions with filled-in nb_index
     * in-order for PyType_Ready to fill in .__index__() method
     * also fill array_type_as_number struct with reasonable defaults
     ','line_number':4092,'multiline':True]
['text':'*begin repeat
     * #name = byte, short, int, long, longlong, ubyte, ushort,
     *         uint, ulong, ulonglong#
     * #NAME = Byte, Short, Int, Long, LongLong, UByte, UShort,
     *         UInt, ULong, ULongLong#
     ','line_number':4098,'multiline':True]
['text':'*end repeat*','line_number':4108,'multiline':True]
['text':'*begin repeat
     *  #name = half, float, double, longdouble,
     *          cfloat, cdouble, clongdouble#
     *  #NAME = Half, Float, Double, LongDouble,
     *          CFloat, CDouble, CLongDouble#
     ','line_number':4110,'multiline':True]
['text':'*end repeat*','line_number':4119,'multiline':True]
['text':'*begin repeat
     * #NAME= Number, Integer, SignedInteger, UnsignedInteger, Inexact,
     *        Floating, ComplexFloating, Character#
     ','line_number':4143,'multiline':True]
['text':'*end repeat*','line_number':4150,'multiline':True]
['text':'*begin repeat
     * #name = bool, byte, short, int, long, longlong, ubyte, ushort, uint,
     *         ulong, ulonglong, half, float, double, longdouble, cfloat,
     *         cdouble, clongdouble, string, unicode, void, object, datetime,
     *         timedelta#
     * #NAME = Bool, Byte, Short, Int, Long, LongLong, UByte, UShort, UInt,
     *         ULong, ULongLong, Half, Float, Double, LongDouble, CFloat,
     *         CDouble, CLongDouble, String, Unicode, Void, Object, Datetime,
     *         Timedelta#
     ','line_number':4152,'multiline':True]
['text':' inherit string buffer ','line_number':4167,'multiline':True]
['text':'*end repeat*','line_number':4173,'multiline':True]
['text':'*begin repeat
     * #name = bool, byte, short, ubyte, ushort, uint, ulong, ulonglong,
     *         half, float, longdouble, cfloat, clongdouble, void, object,
     *         datetime, timedelta#
     * #NAME = Bool, Byte, Short, UByte, UShort, UInt, ULong, ULongLong,
     *         Half, Float, LongDouble, CFloat, CLongDouble, Void, Object,
     *         Datetime, Timedelta#
     ','line_number':4177,'multiline':True]
['text':'*end repeat*','line_number':4188,'multiline':True]
['text':'*begin repeat
     * #name = cfloat, clongdouble, floating, integer, complexfloating#
     * #NAME = CFloat, CLongDouble, Floating, Integer, ComplexFloating#
     ','line_number':4190,'multiline':True]
['text':'*end repeat*','line_number':4197,'multiline':True]
['text':'*begin repeat
     * #name = byte, short, int, long, longlong,
     *         ubyte, ushort, uint, ulong, ulonglong#
     * #Name = Byte, Short, Int, Long, LongLong,
     *         UByte, UShort, UInt, ULong, ULongLong#
     ','line_number':4199,'multiline':True]
['text':'*end repeat*','line_number':4208,'multiline':True]
['text':'*begin repeat
     * #name = half, float, double, longdouble#
     * #Name = Half, Float, Double, LongDouble#
     ','line_number':4210,'multiline':True]
['text':'*end repeat*','line_number':4217,'multiline':True]
['text':'*begin repeat
     * #name = byte, short, int, long, longlong, ubyte, ushort,
     *         uint, ulong, ulonglong, timedelta, cdouble#
     * #Name = Byte, Short, Int, Long, LongLong, UByte, UShort,
     *         UInt, ULong, ULongLong, Timedelta, CDouble#
     ','line_number':4219,'multiline':True]
['text':'*end repeat*','line_number':4228,'multiline':True]
['text':' We won't be inheriting from Python Int type. ','line_number':4230,'multiline':True]
['text':' We won't be inheriting from Python Int type. ','line_number':4233,'multiline':True]
['text':' We won't be inheriting from Python Int type. ','line_number':4236,'multiline':True]
['text':'*begin repeat
     * #name = repr, str#
     ','line_number':4239,'multiline':True]
['text':'*end repeat*','line_number':4254,'multiline':True]
['text':'*begin repeat
     * #Type = Byte, UByte, Short, UShort, Int, UInt, Long,
     *         ULong, LongLong, ULongLong#
     ','line_number':4257,'multiline':True]
['text':'*end repeat*','line_number':4265,'multiline':True]
['text':'*begin repeat
     * #char = ,c#
     * #CHAR = ,C#
     ','line_number':4271,'multiline':True]
['text':'
     * These need to be coded specially because longdouble/clongdouble getitem
     * does not return a normal Python type
     ','line_number':4276,'multiline':True]
['text':'*end repeat*','line_number':4287,'multiline':True]
['text':' Search any registered types ','line_number':4390,'multiline':True]
