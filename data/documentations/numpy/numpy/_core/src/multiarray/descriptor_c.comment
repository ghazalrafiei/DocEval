['text':' Array Descr Object ','line_number':1,'multiline':True]
['text':' for PyArray_TypestrConvert ','line_number':19,'multiline':True]
['text':' for npy_mul_sizes_with_overflow ','line_number':20,'multiline':True]
['text':' Must be explicitly loaded ','line_number':31,'multiline':True]
['text':'
 * This function creates a dtype object when the object is a ctypes subclass.
 *
 * Returns `Py_NotImplemented` if the type is not a ctypes subclass.
 ','line_number':39,'multiline':True]
['text':' Call the python function of the same name. ','line_number':55,'multiline':True]
['text':'
     * sanity check that dtype_from_ctypes_type returned the right type,
     * since getting it wrong would give segfaults.
     ','line_number':66,'multiline':True]
['text':'
 * This function creates a dtype object when the object has a "dtype" attribute,
 * and it can be converted to a dtype object.
 *
 * Returns `Py_NotImplemented` if this is not possible.
 * Currently the only failure mode for a NULL return is a RecursionError.
 ','line_number':79,'multiline':True]
['text':' For arbitrary objects that have a "dtype" attribute ','line_number':89,'multiline':True]
['text':'
         * This can be reached due to recursion limit being hit while fetching
         * the attribute (tested for py3.7). This removes the custom message.
         ','line_number':92,'multiline':True]
['text':' The dtype attribute is already a valid descriptor ','line_number':100,'multiline':True]
['text':' Deprecated 2021-01-05, NumPy 1.21 ','line_number':118,'multiline':True]
['text':' Ignore all but recursion errors, to give ctypes a full try. ','line_number':130,'multiline':True]
['text':' Expose to another file with a prefixed name ','line_number':139,'multiline':True]
['text':'
 * Sets the global typeDict object, which is a dictionary mapping
 * dtype names to numpy scalar types.
 ','line_number':146,'multiline':True]
['text':' Decrement old reference (if any)','line_number':158,'multiline':True]
['text':' Create an internal reference to it ','line_number':161,'multiline':True]
['text':' Check for ints at start of string ','line_number':175,'multiline':True]
['text':' Check for empty tuple ','line_number':184,'multiline':True]
['text':'
     * Check for presence of commas outside square [] brackets. This
     * allows commas inside of [], for parameterized dtypes to use.
     ','line_number':194,'multiline':True]
['text':' try to interpret next item as a type ','line_number':257,'multiline':True]
['text':'
     * We get here if _try_convert_from_inherit_tuple failed without crashing
     ','line_number':264,'multiline':True]
['text':' interpret next item as a typesize ','line_number':268,'multiline':True]
['text':' Assume it's a metadata dictionary ','line_number':290,'multiline':True]
['text':'
         * interpret next item as shape (if it's a tuple)
         * and reset the type to NPY_VOID with
         * a new fields attribute.
         ','line_number':298,'multiline':True]
['text':' if (type, ()) was given it is equivalent to type... ','line_number':309,'multiline':True]
['text':' (type, 1) use to be equivalent to type, but is deprecated ','line_number':314,'multiline':True]
['text':' 2019-05-20, 1.17 ','line_number':318,'multiline':True]
['text':' validate and set shape ','line_number':329,'multiline':True]
['text':'
         * Create a new subarray->shape tuple (it can be an arbitrary
         * sequence of integer like objects, neither of which is safe.
         ','line_number':380,'multiline':True]
['text':'
 * obj is a list.  Each item is a tuple with
 *
 * (field-name, data-type (either a list or a string), and an optional
 * shape parameter).
 *
 * field-name can be a string or a 2-tuple
 * data-type can now be a list, string, or 2-tuple
 *          (string, metadata dictionary)
 ','line_number':409,'multiline':True]
['text':' Types with fields need the Python C API for field access ','line_number':428,'multiline':True]
['text':' Insert name into nameslist ','line_number':471,'multiline':True]
['text':' On Py3, allow only non-empty Unicode strings as field names ','line_number':482,'multiline':True]
['text':' Process rest ','line_number':494,'multiline':True]
['text':' Dict lookup crashed ','line_number':525,'multiline':True]
['text':'
         * Title can be "meta-data".  Only insert it
         * into the fields dictionary if it is a string
         * and if it is not the same as the name.
         ','line_number':544,'multiline':True]
['text':' Structured arrays get a sticky aligned bit ','line_number':594,'multiline':True]
['text':'
 * a list specifying a data-type can just be
 * a list of formats.  The names for the fields
 * will default to f0, f1, f2, and so forth.
 ','line_number':608,'multiline':True]
['text':'
     * Ignore any empty string at end which _internal._commastring
     * can produce
     ','line_number':617,'multiline':True]
['text':' Types with fields need the Python C API for field access ','line_number':645,'multiline':True]
['text':' steals a reference to key ','line_number':681,'multiline':True]
['text':' Structured arrays get a sticky aligned bit ','line_number':700,'multiline':True]
['text':'
 * comma-separated string
 * this is the format developed by the numarray records module and implemented
 * by the format parser in that module this is an alternative implementation
 * found in the _internal.py file patterned after that one -- the approach is
 * to try to convert to a list (with tuples if any repeat information is
 * present) and then call the _convert_from_list)
 *
 * TODO: Calling Python from C like this in critical-path code is not
 *       a good idea. This should all be converted to C code.
 ','line_number':715,'multiline':True]
['text':'
 * helper function for _try_convert_from_inherit_tuple to disallow dtypes of the form
 * (old_dtype, new_dtype) where either of the dtypes contains python
 * objects - these dtypes are not useful and can be a source of segfaults,
 * when an attempt is made to interpret a python object as a different dtype
 * or vice versa
 * an exception is made for dtypes of the form ('O', [('name', 'O')]), which
 * people have been using to add a field to an object array without fields
 ','line_number':774,'multiline':True]
['text':' fields was missing the name it claimed to contain ','line_number':805,'multiline':True]
['text':'
 * A tuple type would be either (generic typeobject, typesize)
 * or (fixed-length data-type, shape)
 *
 * or (inheriting data-type, new-data-type)
 * The new data-type must have the same itemsize as the inheriting data-type
 * unless the latter is 0
 *
 * Thus (int32, {'real':(int16,0),'imag',(int16,2)})
 *
 * is one way to specify a descriptor that will give
 * a['real'] and a['imag'] to an int32 array.
 *
 * leave type reference alone
 *
 * Returns `Py_NotImplemented` if the second tuple item is not
 * appropriate.
 ','line_number':826,'multiline':True]
['text':' It's a subarray or flexible type instead ','line_number':848,'multiline':True]
['text':' Let someone else try to convert this ','line_number':854,'multiline':True]
['text':'
     * Certain flags must be inherited from the fields.  This is needed
     * only for void dtypes (or subclasses of it such as a record dtype).
     * For other dtypes, the field part will only be used for direct field
     * access and thus flag inheritance should not be necessary.
     * (We only allow object fields if the dtype is object as well.)
     * This ensures copying over of the NPY_FROM_FIELDS "inherited" flags.
     ','line_number':891,'multiline':True]
['text':'
 * Validates that any field of the structured array 'dtype' which has
 * the NPY_ITEM_HASOBJECT flag set does not overlap with another field.
 *
 * This algorithm is worst case O(n^2). It could be done with a sort
 * and sweep algorithm, but the structured dtype representation is
 * rather ugly right now, so writing something better can wait until
 * that representation is made sane.
 *
 * Returns 0 on success, -1 if an exception is raised.
 ','line_number':910,'multiline':True]
['text':' Get some properties from the dtype ','line_number':929,'multiline':True]
['text':' fields was missing the name it claimed to contain ','line_number':942,'multiline':True]
['text':' If this field has objects, check for overlaps ','line_number':951,'multiline':True]
['text':' fields was missing the name it claimed to contain ','line_number':962,'multiline':True]
['text':' Raise an exception if it overlaps ','line_number':971,'multiline':True]
['text':' It passed all the overlap tests ','line_number':984,'multiline':True]
['text':'
 * a dictionary specifying a data-type
 * must have at least two and up to four
 * keys These must all be sequences of the same length.
 *
 * can also have an additional key called "metadata" which can be any dictionary
 *
 * "names" --- field names
 * "formats" --- the data-type descriptors for the field.
 *
 * Optional:
 *
 * "offsets" --- integers indicating the offset into the
 * record of the start of the field.
 * if not given, then "consecutive offsets"
 * will be assumed and placed in the dictionary.
 *
 * "titles" --- Allows the use of an additional key
 * for the fields dictionary.(if these are strings
 * or unicode objects) or
 * this can also be meta-data to
 * be passed around with the field description.
 *
 * Attribute-lookup-based field names merely has to query the fields
 * dictionary of the data-descriptor.  Any result present can be used
 * to return the correct field.
 *
 * So, the notion of what is a name and what is a title is really quite
 * arbitrary.
 *
 * What does distinguish a title, however, is that if it is not None,
 * it will be placed at the end of the tuple inserted into the
 * fields dictionary.and can therefore be used to carry meta-data around.
 *
 * If the dictionary does not have "names" and "formats" entries,
 * then it will be checked for conformity and used directly.
 ','line_number':988,'multiline':True]
['text':'
 * Creates a struct dtype object from a Python dictionary.
 ','line_number':1041,'multiline':True]
['text':'
     * Use PyMapping_GetItemString to support dictproxy objects as well.
     ','line_number':1051,'multiline':True]
['text':' XXX should check this is a KeyError ','line_number':1057,'multiline':True]
['text':' XXX should check this is a KeyError ','line_number':1064,'multiline':True]
['text':'
     * If a property 'aligned' is in the dict, it overrides the align flag
     * to be True if it not already true.
     ','line_number':1088,'multiline':True]
['text':' Types with fields need the Python C API for field access ','line_number':1109,'multiline':True]
['text':' Build item to insert (descr, offset, [title])','line_number':1115,'multiline':True]
['text':' Flag whether the fields are specified out of order ','line_number':1173,'multiline':True]
['text':' If align=True, enforce field alignment ','line_number':1177,'multiline':True]
['text':' Insert into dictionary ','line_number':1215,'multiline':True]
['text':' MemoryError during dict lookup ','line_number':1223,'multiline':True]
['text':' MemoryError during dict lookup ','line_number':1242,'multiline':True]
['text':' new takes responsibility for DECREFing names, fields ','line_number':1276,'multiline':True]
['text':'
     * If the fields weren't in order, and there was an OBJECT type,
     * need to verify that no OBJECT types overlap with something else.
     ','line_number':1280,'multiline':True]
['text':' Structured arrays get a sticky aligned bit ','line_number':1291,'multiline':True]
['text':' Override the itemsize if provided ','line_number':1296,'multiline':True]
['text':' Make sure the itemsize isn't made too small ','line_number':1307,'multiline':True]
['text':' If align is set, make sure the alignment divides into the size ','line_number':1316,'multiline':True]
['text':' Set the itemsize ','line_number':1325,'multiline':True]
['text':' Add the metadata if provided ','line_number':1329,'multiline':True]
['text':'NUMPY_API','line_number':1364,'multiline':True]
['text':'NUMPY_API
 * Get typenum from an object -- None goes to NULL
 ','line_number':1380,'multiline':True]
['text':'*
 * Check the descriptor is a legacy "flexible" DType instance, this is
 * an instance which is (normally) not attached to an array, such as a string
 * of length 0 or a datetime with no unit.
 * These should be largely deprecated, and represent only the DType class
 * for most `dtype` parameters.
 *
 * TODO: This function should eventually receive a deprecation warning and
 *       be removed.
 *
 * @param descr
 * @return 1 if this is not a concrete dtype instance 0 otherwise
 ','line_number':1396,'multiline':True]
['text':' Flexible descr with generic time unit (which can be adapted) ','line_number':1420,'multiline':True]
['text':'*
 * Given a descriptor (dtype instance), handles conversion of legacy flexible
 * "unsized" descriptors to their DType.  It returns the DType and descriptor
 * both results can be NULL (if the input is).  But it always sets the DType
 * when a descriptor is set.
 *
 * @param dtype
 * @param out_descr
 * @param out_DType
 * @return 0 on success -1 on failure
 ','line_number':1432,'multiline':True]
['text':'*
 * Converter function filling in an npy_dtype_info struct on success.
 *
 * @param obj representing a dtype instance (descriptor) or DType class.
 * @param[out] npy_dtype_info filled with the DType class and dtype/descriptor
 *         instance.  The class is always set while the instance may be NULL.
 *         On error, both will be NULL.
 * @return 0 on failure and 1 on success (as a converter)
 ','line_number':1463,'multiline':True]
['text':'
     * Allow dtype classes pass, this could also be generalized to at least
     * some scalar types (right now most of these give instances or)
     ','line_number':1475,'multiline':True]
['text':'
     * The above converts e.g. "S" or "S0" to the prototype instance, we make
     * it behave the same as the DType.  This is not fully correct, "S0" should
     * be considered an instance with actual 0 length.
     * TODO: It would be nice to fix that eventually.
     ','line_number':1497,'multiline':True]
['text':'*
 * Converter function filling in an npy_dtype_info struct on success.  It
 * accepts `None` and does nothing in that case (user must initialize to
 * NULL anyway).
 *
 * @param obj None or obj representing a dtype instance (descr) or DType class.
 * @param[out] npy_dtype_info filled with the DType class and dtype/descriptor
 *         instance.  If `obj` is None, is not modified.  Otherwise the class
 *         is always set while the instance may be NULL.
 *         On error, both will be NULL.
 * @return 0 on failure and 1 on success (as a converter)
 ','line_number':1513,'multiline':True]
['text':' caller must have initialized for the optional version ','line_number':1529,'multiline':True]
['text':'*
 * Get a dtype instance from a python type
 ','line_number':1535,'multiline':True]
['text':'
         * TODO: This should be deprecated, and have special handling for
         *       dtype=bytes/"S" in coercion: It should not rely on "S0".
         ','line_number':1558,'multiline':True]
['text':'
         * TODO: This should be deprecated, and have special handling for
         *       dtype=str/"U" in coercion: It should not rely on "U0".
         ','line_number':1565,'multiline':True]
['text':'
         * Note: this comes after _try_convert_from_dtype_attr because the ctypes
         * type might override the dtype if numpy does not otherwise
         * support it.
         ','line_number':1584,'multiline':True]
['text':'
         * All other classes are treated as object. This can be convenient
         * to convey an intention of using it for a specific python type
         * and possibly allow converting to a new type-specific dtype in the future. It may make sense to
         * only allow this only within `dtype=...` keyword argument context
         * in the future.
         ','line_number':1595,'multiline':True]
['text':' default ','line_number':1613,'multiline':True]
['text':' or a typecode string ','line_number':1625,'multiline':True]
['text':' Allow bytes format strings: convert to unicode ','line_number':1627,'multiline':True]
['text':' Convert the exception into a TypeError ','line_number':1630,'multiline':True]
['text':' or a tuple ','line_number':1645,'multiline':True]
['text':' or a list ','line_number':1656,'multiline':True]
['text':' or a dictionary ','line_number':1667,'multiline':True]
['text':'
         * Note: this comes after _try_convert_from_dtype_attr because the ctypes
         * type might override the dtype if numpy does not otherwise
         * support it.
         ','line_number':1687,'multiline':True]
['text':'NUMPY_API
 * Get typenum from an object -- None goes to NPY_DEFAULT_TYPE
 * This function takes a Python object representing a type and converts it
 * to a the correct PyArray_Descr * structure to describe the type.
 *
 * Many objects can be used to represent a data-type which in NumPy is
 * quite a flexible concept.
 *
 * This is the central code that converts Python objects to
 * Type-descriptor objects that are used throughout numpy.
 *
 * Returns a new reference in *at, but the returned should not be
 * modified as it may be one of the canonical immutable objects or
 * a reference to the input obj.
 ','line_number':1703,'multiline':True]
['text':'* Convert a bytestring specification into a dtype ','line_number':1725,'multiline':True]
['text':' Check for a string typecode. ','line_number':1729,'multiline':True]
['text':' Empty string is invalid ','line_number':1736,'multiline':True]
['text':' check for commas present or first (or second) element a digit ','line_number':1741,'multiline':True]
['text':' Process the endian character. '|' is replaced by '='','line_number':1746,'multiline':True]
['text':' Just an endian character is invalid ','line_number':1764,'multiline':True]
['text':' Check for datetime format ','line_number':1769,'multiline':True]
['text':' ret has byte order '=' at this point ','line_number':1775,'multiline':True]
['text':' A typecode like 'd' ','line_number':1784,'multiline':True]
['text':' Python byte string characters are unsigned ','line_number':1786,'multiline':True]
['text':' A kind + size like 'f8' ','line_number':1789,'multiline':True]
['text':' Parse the integer, make sure it's the rest of the string ','line_number':1794,'multiline':True]
['text':'
                 * When specifying length of UNICODE
                 * the number of characters is given to match
                 * the STRING interface.  Each character can be
                 * more than one byte and itemsize must be
                 * the number of bytes.
                 ','line_number':1812,'multiline':True]
['text':' Support for generic processing c8, i4, f8, etc...','line_number':1832,'multiline':True]
['text':' Now check to see if the object is registered in typeDict ','line_number':1852,'multiline':True]
['text':'
         * Probably only ever dispatches to `_convert_from_type`, but who
         * knows what users are injecting into `np.typeDict`.
         ','line_number':1883,'multiline':True]
['text':'* Array Descr Objects for dynamic types *','line_number':1914,'multiline':True]
['text':'
 * There are some statically-defined PyArray_Descr objects corresponding
 * to the basic built-in types.
 * These can and should be DECREF'd and INCREF'd as appropriate, anyway.
 * If a mistake is made in reference counting, deallocation on these
 * builtins will be attempted leading to problems.
 *
 * This lets us deal with all PyArray_Descr objects using reference
 * counting (regardless of whether they are statically or dynamically
 * allocated).
 ','line_number':1916,'multiline':True]
['text':'NUMPY_API
 * base cannot be NULL
 ','line_number':1928,'multiline':True]
['text':' Don't copy PyObject_HEAD part ','line_number':1939,'multiline':True]
['text':'
     * The c_metadata has a by-value ownership model, need to clone it
     * (basically a deep copy, but the auxdata clone function has some
     * flexibility still) so the new PyArray_Descr object owns
     * a copy of the data. Having both 'base' and 'newdescr' point to
     * the same auxdata pointer would cause a double-free of memory.
     ','line_number':1944,'multiline':True]
['text':' TODO: This seems wrong, as the old fields get decref'd? ','line_number':1955,'multiline':True]
['text':'
 * should never be called for builtin-types unless
 * there is a reference-count problem
 ','line_number':1983,'multiline':True]
['text':'
 * we need to be careful about setting attributes because these
 * objects are pointed to by arrays that depend on them for interpreting
 * data.  Currently no attributes of data-type objects can be set
 * directly except names.
 ','line_number':2013,'multiline':True]
['text':' let python handle this ','line_number':2098,'multiline':True]
['text':'
     * PyTuple_Size has built in check
     * for tuple argument
     ','line_number':2141,'multiline':True]
['text':' get default ','line_number':2157,'multiline':True]
['text':'
 * returns 1 for a builtin type
 * and 2 for a user-defined data-type descriptor
 * return 0 if neither (i.e. it's a copy of one)
 ','line_number':2182,'multiline':True]
['text':'
 * return Py_True if this data-type descriptor
 * has native byteorder if no fields are defined
 *
 * or if all sub-fields have native-byteorder if
 * fields are defined
 ','line_number':2227,'multiline':True]
['text':'
     * FIXME
     *
     * This deprecation has been temporarily removed for the NumPy 1.7
     * release. It should be re-added after the 1.7 branch is done,
     * and a convenience API to replace the typical use-cases for
     * mutable names should be implemented.
     *
     * if (DEPRECATE("Setting NumPy dtype names is deprecated, the dtype "
     *                "will become immutable in a future version") < 0) {
     *     return -1;
     * }
     ','line_number':2316,'multiline':True]
['text':' Should be a TypeError, but this should be deprecated anyway. ','line_number':2332,'multiline':True]
['text':' Make sure all entries are strings ','line_number':2338,'multiline':True]
['text':' Invalidate cached hash value ','line_number':2353,'multiline':True]
['text':' Update dictionary keys in fields ','line_number':2355,'multiline':True]
['text':' Borrowed references to item and new_key ','line_number':2371,'multiline':True]
['text':' fields was missing the name it claimed to contain ','line_number':2375,'multiline':True]
['text':' Check for duplicates ','line_number':2383,'multiline':True]
['text':' Replace names ','line_number':2403,'multiline':True]
['text':' Replace fields ','line_number':2407,'multiline':True]
['text':'
             * Appears to be a properly initialized user DType. Allocate
             * it and initialize the main part as best we can.
             * TODO: This should probably be a user function, and enforce
             *       things like the `elsize` being correctly set.
             * TODO: This is EXPERIMENTAL API!
             ','line_number':2470,'multiline':True]
['text':' If DType uses it, let it override ','line_number':2488,'multiline':True]
['text':' Initialize to invalid value ','line_number':2489,'multiline':True]
['text':' The DTypeMeta class should prevent this from happening. ','line_number':2493,'multiline':True]
['text':' Get a new copy of it unless it's already a copy ','line_number':2522,'multiline':True]
['text':'
         * We need to be sure to make a new copy of the data-type and any
         * underlying dictionary
         ','line_number':2532,'multiline':True]
['text':'
             * Make a copy of the metadata before merging with the
             * input metadata so that this data-type descriptor has
             * it's own copy
             ','line_number':2544,'multiline':True]
['text':' Save a reference ','line_number':2549,'multiline':True]
['text':' Decrement the old reference ','line_number':2552,'multiline':True]
['text':'
             * Update conv->metadata with anything new in metadata
             * keyword, but do not over-write anything already there
             ','line_number':2555,'multiline':True]
['text':' Make a copy of the input dictionary ','line_number':2565,'multiline':True]
['text':'
 * Return a tuple of
 * (cleaned metadata dictionary, tuple with (str, num))
 ','line_number':2574,'multiline':True]
['text':' Create the 2-item tuple to return ','line_number':2584,'multiline':True]
['text':' Store the metadata dictionary ','line_number':2590,'multiline':True]
['text':' Convert the datetime metadata into a tuple ','line_number':2598,'multiline':True]
['text':' Use a 4-tuple that numpy 1.6 knows how to unpickle ','line_number':2604,'multiline':True]
['text':'
 * return a tuple of (callable object, args, state).
 *
 * TODO: This method needs to change so that unpickling doesn't
 *       use __setstate__. This is required for the dtype
 *       to be an immutable object.
 ','line_number':2624,'multiline':True]
['text':'
     * version number of this pickle type. Increment if we need to
     * change the format. Be sure to handle the old versions in
     * arraydescr_setstate.
    ','line_number':2634,'multiline':True]
['text':'
     * Now return the state which is at least byteorder,
     * subarray, and fields
     ','line_number':2683,'multiline':True]
['text':'
         * newobj is a tuple of the Python metadata dictionary
         * and tuple of date_time info (str, num)
         ','line_number':2698,'multiline':True]
['text':' Use version 3 pickle format ','line_number':2716,'multiline':True]
['text':' for extended types it also includes elsize and alignment ','line_number':2736,'multiline':True]
['text':'
 * returns NPY_OBJECT_DTYPE_FLAGS if this data-type has an object portion used
 * when setting the state because hasobject is not stored.
 ','line_number':2753,'multiline':True]
['text':'
 * state is at least byteorder, subarray, and fields but could include elsize
 * and alignment for EXTENDED arrays
 ','line_number':2788,'multiline':True]
['text':' raise an error ','line_number':2855,'multiline':True]
['text':'
     * If we ever need another pickle format, increment the version
     * number. But we should still be able to handle the old versions.
     ','line_number':2864,'multiline':True]
['text':' Invalidate cached hash value ','line_number':2874,'multiline':True]
['text':' fields was missing the name it claimed to contain ','line_number':2884,'multiline':True]
['text':' Parse endian ','line_number':2899,'multiline':True]
['text':'
         * Ensure that subarray[0] is an ArrayDescr and
         * that subarray_shape obtained from subarray[1] is a tuple of integers.
         ','line_number':2965,'multiline':True]
['text':'
         * Ensure names are of appropriate string type
         ','line_number':3008,'multiline':True]
['text':'
             * To support pickle.load(f, encoding='bytes') for loading Py2
             * generated pickles on Py3, we need to be more lenient and convert
             * field names from byte strings to unicode.
             ','line_number':3034,'multiline':True]
['text':' fields was missing the name it claimed to contain ','line_number':3060,'multiline':True]
['text':'
     * We use an integer converted to char for backward compatibility with
     * pickled arrays. Pickled arrays created with previous versions encoded
     * flags as an int even though it actually was a char in the PyArray_Descr
     * structure
     ','line_number':3090,'multiline':True]
['text':'
     * We have a borrowed reference to metadata so no need
     * to alter reference count when throwing away Py_None.
     ','line_number':3110,'multiline':True]
['text':'NUMPY_API
 *
 * Get type-descriptor from an object forcing alignment if possible
 * None goes to DEFAULT type.
 *
 * any object with the .fields attribute and/or .itemsize attribute (if the
 *.fields attribute does not give the total size -- i.e. a partial record
 * naming).  If itemsize is given it must be >= size computed from fields
 *
 * The .fields attribute must return a convertible dictionary if present.
 * Result inherits from NPY_VOID.
','line_number':3154,'multiline':True]
['text':'NUMPY_API
 *
 * Get type-descriptor from an object forcing alignment if possible
 * None goes to NULL.
 ','line_number':3173,'multiline':True]
['text':'NUMPY_API
 *
 * returns a copy of the PyArray_Descr structure with the byteorder
 * altered:
 * no arguments:  The byteorder is swapped (in all subfields as well)
 * single argument:  The byteorder is forced to the given state
 * (in all subfields as well)
 *
 * Valid states:  ('big', '>') or ('little' or '<')
 * ('native', or '=')
 *
 * If a descr structure with | is encountered it's own
 * byte-order is not changed but any fields are:
 *
 *
 * Deep bytorder change of a data-type descriptor
 * *** Leaves reference count of self unchanged --- does not DECREF self ***
 ','line_number':3192,'multiline':True]
['text':' swap byteorder ','line_number':3223,'multiline':True]
['text':' make new dictionary with replaced PyArray_Descr Objects ','line_number':3250,'multiline':True]
['text':' for pickling ','line_number':3327,'multiline':True]
['text':' for typing; requires python >= 3.9 ','line_number':3337,'multiline':True]
['text':' sentinel ','line_number':3341,'multiline':True]
['text':'
 * Checks whether the structured data type in 'dtype'
 * has a simple layout, where all the fields are in order,
 * and follow each other with no alignment padding.
 *
 * When this returns true, the dtype can be reconstructed
 * from a list of the field names and dtypes with no additional
 * dtype parameters.
 *
 * Returns 1 if it has a simple layout, 0 otherwise.
 ','line_number':3344,'multiline':True]
['text':' Get some properties from the dtype ','line_number':3364,'multiline':True]
['text':' Start at offset zero ','line_number':3369,'multiline':True]
['text':' If this field doesn't follow the pattern, not a simple layout ','line_number':3385,'multiline':True]
['text':' Get the next offset ','line_number':3389,'multiline':True]
['text':'
     * If the itemsize doesn't match the final offset, it's
     * not a simple layout.
     ','line_number':3393,'multiline':True]
['text':' It's a simple layout, since all the above tests passed ','line_number':3401,'multiline':True]
['text':'
 * The general dtype repr function.
 ','line_number':3405,'multiline':True]
['text':'
 * The general dtype str function.
 ','line_number':3421,'multiline':True]
['text':' Cannot convert `other` to dtype ','line_number':3443,'multiline':True]
['text':' `bool(np.dtype(...)) == True` for all dtypes. Needed to override default
     * nonzero implementation, which checks if `len(object) > 0`. ','line_number':3483,'multiline':True]
['text':'************************************************************************
 ****************   Implement Mapping Protocol ***************************
 ************************************************************************','line_number':3492,'multiline':True]
['text':' Let the names tuple steal a reference now, so we don't need to
         * decref name if an error occurs further on.
         ','line_number':3619,'multiline':True]
['text':' disallow use of titles as index ','line_number':3632,'multiline':True]
['text':' if title == name, we were given a title, not a field name ','line_number':3640,'multiline':True]
['text':' disallow duplicate field indices ','line_number':3649,'multiline':True]
['text':' if converting to an int gives a type error, adjust the message ','line_number':3699,'multiline':True]
['text':' sq_length ','line_number':3713,'multiline':True]
['text':' sq_concat ','line_number':3714,'multiline':True]
['text':' sq_repeat ','line_number':3715,'multiline':True]
['text':' sq_item ','line_number':3716,'multiline':True]
['text':' sq_slice ','line_number':3717,'multiline':True]
['text':' sq_ass_item ','line_number':3718,'multiline':True]
['text':' sq_ass_slice ','line_number':3719,'multiline':True]
['text':' sq_contains ','line_number':3720,'multiline':True]
['text':' sq_inplace_concat ','line_number':3721,'multiline':True]
['text':' sq_inplace_repeat ','line_number':3722,'multiline':True]
['text':' mp_length','line_number':3726,'multiline':True]
['text':' mp_subscript','line_number':3727,'multiline':True]
['text':' mp_ass_subscript','line_number':3728,'multiline':True]
['text':'***************** End of Mapping Protocol *****************************','line_number':3731,'multiline':True]
['text':'
 * NOTE: Since this is a MetaClass, the name has Full appended here, the
 *       correct name of the type is PyArrayDescr_Type.
 ','line_number':3734,'multiline':True]
['text':' NULL represents `type`, this is set to DTypeMeta at import time ','line_number':3740,'multiline':True]
