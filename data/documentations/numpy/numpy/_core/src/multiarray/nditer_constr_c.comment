['text':'
 * This file implements the construction, copying, and destruction
 * aspects of NumPy's nditer.
 *
 * Copyright (c) 2010-2011 by Mark Wiebe (mwwiebe@gmail.com)
 * The University of British Columbia
 *
 * Copyright (c) 2011 Enthought, Inc
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]
['text':' Allow this .c file to include nditer_impl.h ','line_number':14,'multiline':True]
['text':' Internal helper functions private to this file ','line_number':25,'multiline':True]
['text':'NUMPY_API
 * Allocate a new iterator for multiple array objects, and advanced
 * options for controlling the broadcasting, shape, and buffer size.
 ','line_number':103,'multiline':True]
['text':' The iterator being constructed ','line_number':119,'multiline':True]
['text':' Per-operand values ','line_number':122,'multiline':True]
['text':' The subtype for automatically allocated outputs ','line_number':132,'multiline':True]
['text':'
     * Before 1.8, if `oa_ndim == 0`, this meant `op_axes != NULL` was an error.
     * With 1.8, `oa_ndim == -1` takes this role, while op_axes in that case
     * enforces a 0-d iterator. Using `oa_ndim == 0` with `op_axes == NULL`
     * is thus an error in 1.13 after deprecation.
     ','line_number':165,'multiline':True]
['text':' Error check 'oa_ndim' and 'op_axes', which must be used together ','line_number':179,'multiline':True]
['text':' Check the global iterator flags ','line_number':186,'multiline':True]
['text':' Calculate how many dimensions the iterator should have ','line_number':193,'multiline':True]
['text':' Allocate memory for the iterator ','line_number':198,'multiline':True]
['text':' Fill in the basic data ','line_number':204,'multiline':True]
['text':' Prepare all the operands ','line_number':217,'multiline':True]
['text':' Set resetindex to zero as well (it's just after the resetdataptr) ','line_number':226,'multiline':True]
['text':'
     * Initialize buffer data (must set the buffers and transferdata
     * to NULL before we might deallocate the iterator).
     ','line_number':231,'multiline':True]
['text':' Ensure that the transferdata/auxdata is NULLed ','line_number':240,'multiline':True]
['text':' Fill in the AXISDATA arrays and set the ITERSIZE field ','line_number':244,'multiline':True]
['text':'
         * If buffering is enabled and no buffersize was given, use a default
         * chosen to be big enough to get some amortization benefits, but
         * small enough to be cache-friendly.
         ','line_number':254,'multiline':True]
['text':' No point in a buffer bigger than the iteration size ','line_number':262,'multiline':True]
['text':'
         * Initialize for use in FirstVisit, which may be called before
         * the buffers are filled and the reduce pos is updated.
         ','line_number':268,'multiline':True]
['text':'
     * If an index was requested, compute the strides for it.
     * Note that we must do this before changing the order of the
     * axes
     ','line_number':275,'multiline':True]
['text':' Initialize the perm to the identity ','line_number':284,'multiline':True]
['text':'
     * If an iteration order is being forced, apply it.
     ','line_number':290,'multiline':True]
['text':' Set some flags for allocated outputs ','line_number':298,'multiline':True]
['text':' Flag this so later we can avoid flipping axes ','line_number':301,'multiline':True]
['text':' If a subtype may be used, indicate so ','line_number':303,'multiline':True]
['text':'
             * If the data type wasn't provided, will need to
             * calculate it.
             ','line_number':307,'multiline':True]
['text':'
     * If the ordering was not forced, reorder the axes
     * and flip negative strides to find the best one.
     ','line_number':317,'multiline':True]
['text':'
         * If there's an output being allocated, we must not negate
         * any strides.
         ','line_number':325,'multiline':True]
['text':'
     * If an automatically allocated output didn't have a specified
     * dtype, we need to figure it out now, before allocating the outputs.
     ','line_number':344,'multiline':True]
['text':' Replace all the data types ','line_number':365,'multiline':True]
['text':' Replace the NULL data types ','line_number':376,'multiline':True]
['text':'
     * All of the data types have been settled, so it's time
     * to check that data type conversions are following the
     * casting rules.
     ','line_number':389,'multiline':True]
['text':'
     * At this point, the iteration order has been finalized. so
     * any allocation of ops that were NULL, or any temporary
     * copying due to casting/byte order/alignment can be
     * done now using a memory layout matching the iterator.
     ','line_number':401,'multiline':True]
['text':'
     * Finally, if a multi-index wasn't requested,
     * it may be possible to coalesce some axes together.
     ','line_number':415,'multiline':True]
['text':'
         * The operation may have changed the layout, so we have to
         * get the internal pointers again.
         ','line_number':421,'multiline':True]
['text':'
     * Now that the axes are finished, check whether we can apply
     * the single iteration optimization to the iternext function.
     ','line_number':435,'multiline':True]
['text':'
     * If REFS_OK was specified, check whether there are any
     * reference arrays and flag it if so.
     *
     * NOTE: This really should be unnecessary, but chances are someone relies
     *       on it.  The iterator itself does not require the API here
     *       as it only does so for casting/buffering.  But in almost all
     *       use-cases the API will be required for whatever operation is done.
     ','line_number':451,'multiline':True]
['text':' Iteration needs API access ','line_number':466,'multiline':True]
['text':' If buffering is set without delayed allocation ','line_number':472,'multiline':True]
['text':' Allocate the buffers ','line_number':479,'multiline':True]
['text':' Prepare the next buffers and set iterend/size ','line_number':485,'multiline':True]
['text':'NUMPY_API
 * Allocate a new iterator for more than one array object, using
 * standard NumPy broadcasting rules and the default buffer size.
 ','line_number':519,'multiline':True]
['text':'NUMPY_API
 * Allocate a new iterator for one array object.
 ','line_number':534,'multiline':True]
['text':' Split the flags into separate global and op flags ','line_number':542,'multiline':True]
['text':'NUMPY_API
 * Makes a copy of the iterator
 ','line_number':551,'multiline':True]
['text':' Allocate memory for the new iterator ','line_number':567,'multiline':True]
['text':' Copy the raw values to the new iterator ','line_number':571,'multiline':True]
['text':' Take ownership of references to the operands and dtypes ','line_number':574,'multiline':True]
['text':' Allocate buffers and make copies of the transfer data if necessary ','line_number':582,'multiline':True]
['text':' No cleanup ','line_number':614,'multiline':True]
['text':' No cleanup ','line_number':626,'multiline':True]
['text':' No cleanup ','line_number':638,'multiline':True]
['text':' Initialize the buffers to the current iterindex ','line_number':649,'multiline':True]
['text':' Prepare the next buffers and set iterend/size ','line_number':653,'multiline':True]
['text':'NUMPY_API
 * Deallocate an iterator.
 *
 * To correctly work when an error is in progress, we have to check
 * `PyErr_Occurred()`. This is necessary when buffers are not finalized
 * or WritebackIfCopy is used. We could avoid that check by exposing a new
 * function which is passed in whether or not a Python error is already set.
 ','line_number':667,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':681,'multiline':True]
['text':' Deallocate any buffers and buffering data ','line_number':697,'multiline':True]
['text':' Ensure no data is held by the buffers before they are cleared ','line_number':699,'multiline':True]
['text':' buffers ','line_number':712,'multiline':True]
['text':' read bufferdata ','line_number':719,'multiline':True]
['text':'
     * Deallocate all the dtypes and objects that were iterated and resolve
     * any writeback buffers created by the iterator.
     ','line_number':727,'multiline':True]
['text':' Deallocate the iterator memory ','line_number':744,'multiline':True]
['text':' Checks 'flags' for (C|F)_ORDER_INDEX, MULTI_INDEX, and EXTERNAL_LOOP,
 * setting the appropriate internal flags in 'itflags'.
 *
 * Returns 1 on success, 0 on error.
 ','line_number':750,'multiline':True]
['text':' Check for an index ','line_number':765,'multiline':True]
['text':' Check if a multi-index was requested ','line_number':776,'multiline':True]
['text':'
         * This flag primarily disables dimension manipulations that
         * would produce an incorrect multi-index.
         ','line_number':778,'multiline':True]
['text':' Check if the caller wants to handle inner iteration ','line_number':784,'multiline':True]
['text':' Ranged ','line_number':794,'multiline':True]
['text':' Buffering ','line_number':806,'multiline':True]
['text':'
         * If `oa_ndim < 0`, `op_axes` and `itershape` are signalled to
         * be unused and should be NULL. (Before NumPy 1.8 this was
         * signalled by `oa_ndim == 0`.)
         ','line_number':828,'multiline':True]
['text':' Check that there are no duplicates in op_axes ','line_number':855,'multiline':True]
['text':' If 'op_axes' is being used, force 'ndim' ','line_number':895,'multiline':True]
['text':' Otherwise it's the maximum 'ndim' from the operands ','line_number':899,'multiline':True]
['text':'
 * Checks the per-operand input flags, and fills in op_itflags.
 *
 * Returns 1 on success, 0 on failure.
 ','line_number':917,'multiline':True]
['text':' Check the read/write flags ','line_number':932,'multiline':True]
['text':' The read/write flags are mutually exclusive ','line_number':934,'multiline':True]
['text':' The read/write flags are mutually exclusive ','line_number':946,'multiline':True]
['text':' Check the flags for temporary copies ','line_number':968,'multiline':True]
['text':' Check the flag for a write masked operands ','line_number':979,'multiline':True]
['text':'
 * Prepares a constructor operand.  Assumes a reference to 'op'
 * is owned, and that 'op' may be replaced.  Fills in 'op_dataptr',
 * 'op_dtype', and may modify 'op_itflags'.
 *
 * Returns 1 on success, 0 on failure.
 ','line_number':1009,'multiline':True]
['text':' NULL operands must be automatically allocated outputs ','line_number':1024,'multiline':True]
['text':' ALLOCATE or VIRTUAL should be enabled ','line_number':1026,'multiline':True]
['text':' Writing should be enabled ','line_number':1035,'multiline':True]
['text':'
             * Reading should be disabled if buffering is enabled without
             * also enabling NPY_ITER_DELAY_BUFALLOC.  In all other cases,
             * the caller may initialize the allocated operand to a value
             * before beginning iteration.
             ','line_number':1042,'multiline':True]
['text':' If a requested dtype was provided, use it, otherwise NULL ','line_number':1058,'multiline':True]
['text':' Specify bool if no dtype was requested for the mask ','line_number':1066,'multiline':True]
['text':' VIRTUAL operands must be NULL ','line_number':1081,'multiline':True]
['text':' PyArray_DESCR does not give us a reference ','line_number':1103,'multiline':True]
['text':'
         * If references weren't specifically allowed, make sure there
         * are no references in the inputs or requested dtypes.
         ','line_number':1111,'multiline':True]
['text':'
         * Checking whether casts are valid is done later, once the
         * final data types have been selected.  For now, just store the
         * requested type.
         ','line_number':1129,'multiline':True]
['text':' We just have a borrowed reference to op_request_dtype ','line_number':1135,'multiline':True]
['text':' Check if the operand is in the byte order requested ','line_number':1143,'multiline':True]
['text':' Check byte order ','line_number':1145,'multiline':True]
['text':' Replace with a new descr which is in native byte order ','line_number':1147,'multiline':True]
['text':' Indicate that byte order or alignment needs fixing ','line_number':1155,'multiline':True]
['text':' Check if the operand is aligned ','line_number':1159,'multiline':True]
['text':' Check alignment ','line_number':1161,'multiline':True]
['text':'
         * The check for NPY_ITER_CONTIG can only be done later,
         * once the final iteration order is settled.
         ','line_number':1168,'multiline':True]
['text':'
 * Process all the operands, copying new references so further processing
 * can replace the arrays if copying is necessary.
 ','line_number':1182,'multiline':True]
['text':'
     * Here we just prepare the provided operands.
     ','line_number':1200,'multiline':True]
['text':' Check the readonly/writeonly flags, and fill in op_itflags ','line_number':1208,'multiline':True]
['text':' Extract the operand which is for masked iteration ','line_number':1213,'multiline':True]
['text':'
         * Prepare the operand.  This produces an op_dtype[iop] reference
         * on success.
         ','line_number':1230,'multiline':True]
['text':' If the types aren't equivalent, a cast is necessary ','line_number':1314,'multiline':True]
['text':' Check read (op -> temp) casting ','line_number':1317,'multiline':True]
['text':' Check write (temp -> op) casting ','line_number':1329,'multiline':True]
['text':' Indicate that this operand needs casting ','line_number':1345,'multiline':True]
['text':'
 * Checks that the mask broadcasts to the WRITEMASK REDUCE
 * operand 'iop', but 'iop' never broadcasts to the mask.
 * If 'iop' broadcasts to the mask, the result would be more
 * than one mask value per reduction element, something which
 * is invalid.
 *
 * This check should only be called after all the operands
 * have been filled in.
 *
 * Returns 1 on success, 0 on error.
 ','line_number':1353,'multiline':True]
['text':'
         * If 'iop' is being broadcast to 'maskop', we have
         * the invalid situation described above.
         ','line_number':1385,'multiline':True]
['text':'
 * Check whether a reduction is OK based on the flags and the operand being
 * readwrite. This path is deprecated, since usually only specific axes
 * should be reduced. If axes are specified explicitly, the flag is
 * unnecessary.
 ','line_number':1404,'multiline':True]
['text':' If it's writeable, this means a reduction ','line_number':1414,'multiline':True]
['text':'
         * The ARRAYMASK can't be a reduction, because
         * it would be possible to write back to the
         * array once when the ARRAYMASK says 'True',
         * then have the reduction on the ARRAYMASK
         * later flip to 'False', indicating that the
         * write back should never have been done,
         * and violating the strict masking semantics
         ','line_number':1429,'multiline':True]
['text':'*
 * Removes the (additive) NPY_ITER_REDUCTION_AXIS indication and sets
 * is_forced_broadcast to 1 if it is set. Otherwise to 0.
 *
 * @param axis The op_axes[i] to normalize.
 * @param reduction_axis Output 1 if a reduction axis, otherwise 0.
 * @returns The normalized axis (without reduce axis flag).
 ','line_number':1456,'multiline':True]
['text':'
 * Fills in the AXISDATA for the 'nop' operands, broadcasting
 * the dimensionas as necessary.  Also fills
 * in the ITERSIZE data member.
 *
 * If op_axes is not NULL, it should point to an array of ndim-sized
 * arrays, one for each op.
 *
 * Returns 1 on success, 0 on failure.
 ','line_number':1477,'multiline':True]
['text':' First broadcast the shapes together ','line_number':1504,'multiline':True]
['text':' Negative shape entries are deduced from the operands ','line_number':1513,'multiline':True]
['text':'
                 * Possible if op_axes are being used, but
                 * op_axes[iop] is NULL
                 ','line_number':1526,'multiline':True]
['text':'
     * If a shape was provided with a 1 entry, make sure that entry didn't
     * get expanded by broadcasting.
     ','line_number':1579,'multiline':True]
['text':' Need to fill the first axisdata, even if the iterator is 0-d ','line_number':1595,'multiline':True]
['text':' Now process the operands, filling in the axisdata ','line_number':1602,'multiline':True]
['text':' If it's writeable, this means a reduction ','line_number':1633,'multiline':True]
['text':' This is explicitly a reduction axis ','line_number':1651,'multiline':True]
['text':'
                     * If the full iterator shape is 1, zero always works.
                     * NOTE: We thus always allow broadcast dimensions (i = -1)
                     *       if the shape is 1.
                     ','line_number':1667,'multiline':True]
['text':' stride is filled later, shape will match `bshape` ','line_number':1676,'multiline':True]
['text':'
                     * If deleting this axis produces a reduction, but
                     * reduction wasn't enabled, throw an error.
                     * NOTE: We currently always allow new-axis if the iteration
                     *       size is 1 (thus allowing broadcasting sometimes).
                     ','line_number':1695,'multiline':True]
['text':' Now fill in the ITERSIZE member ','line_number':1712,'multiline':True]
['text':'
                 * If RemoveAxis may be called, the size check is delayed
                 * until either the multi index is removed, or GetIterNext
                 * is called.
                 ','line_number':1720,'multiline':True]
['text':' The range defaults to everything ','line_number':1734,'multiline':True]
['text':' operand shape ','line_number':1857,'multiline':True]
['text':' Broadcast shape ','line_number':1865,'multiline':True]
['text':' operand shape not remapped ','line_number':1873,'multiline':True]
['text':' operand shape remapped ','line_number':1890,'multiline':True]
['text':'
 * Replaces the AXISDATA for the iop'th operand, broadcasting
 * the dimensions as necessary.  Assumes the replacement array is
 * exactly the same shape as the original array used when
 * npy_fill_axisdata was called.
 *
 * If op_axes is not NULL, it should point to an ndim-sized
 * array.
 ','line_number':1931,'multiline':True]
['text':'
     * Replace just the strides which were non-zero, and compute
     * the base data address.
     ','line_number':1959,'multiline':True]
['text':' Apply perm to get the original axis, and check if its flipped ','line_number':1971,'multiline':True]
['text':' Now the base data pointer is calculated, set it everywhere it's needed ','line_number':2018,'multiline':True]
['text':' Fill at least one axisdata, for the 0-d case ','line_number':2022,'multiline':True]
['text':'
 * Computes the iterator's index strides and initializes the index values
 * to zero.
 *
 * This must be called before the axes (i.e. the AXISDATA array) may
 * be reordered.
 ','line_number':2030,'multiline':True]
['text':'
     * If there is only one element being iterated, we just have
     * to touch the first AXISDATA because nothing will ever be
     * incremented. This also initializes the data for the 0-d case.
     ','line_number':2048,'multiline':True]
['text':'
 * If the order is NPY_KEEPORDER, lets the iterator find the best
 * iteration order, otherwise forces it.  Indicates in the itflags that
 * whether the iteration order was forced.
 ','line_number':2097,'multiline':True]
['text':'npy_uint32 itflags = NIT_ITFLAGS(iter);','line_number':2105,'multiline':True]
['text':' Only need to actually do something if there is more than 1 dim ','line_number':2115,'multiline':True]
['text':' Only need to actually do something if there is more than 1 dim ','line_number':2122,'multiline':True]
['text':' Check that all the array inputs are fortran order ','line_number':2127,'multiline':True]
['text':' Don't set the forced order flag here... ','line_number':2141,'multiline':True]
['text':'
 * This function negates any strides in the iterator
 * which are negative.  When iterating more than one
 * object, it only flips strides when they are all
 * negative or zero.
 ','line_number':2146,'multiline':True]
['text':'
         * Check the signs of all the operand strides.
         ','line_number':2171,'multiline':True]
['text':'
         * If at least one stride is negative and none are positive,
         * flip all the strides for this dimension.
         ','line_number':2182,'multiline':True]
['text':' Adjust the base pointers to start at the end ','line_number':2192,'multiline':True]
['text':' Flip the stride ','line_number':2194,'multiline':True]
['text':'
             * Make the perm entry negative so get_multi_index
             * knows it's flipped
             ','line_number':2197,'multiline':True]
['text':'
     * If any strides were flipped, the base pointers were adjusted
     * in the first AXISDATA, and need to be copied to all the rest
     ','line_number':2207,'multiline':True]
['text':'
         * Indicate that some of the perm entries are negative,
         * and that it's not (strictly speaking) the identity perm.
         ','line_number':2224,'multiline':True]
['text':' This loop reverses the order of the AXISDATA array ','line_number':2248,'multiline':True]
['text':' Store the perm we applied ','line_number':2259,'multiline':True]
['text':'
     * Do a custom stable insertion sort.  Note that because
     * the AXISDATA has been reversed from C order, this
     * is sorting from smallest stride to biggest stride.
     ','line_number':2290,'multiline':True]
['text':' 'ax_ipos' is where perm[ax_i0] will get inserted ','line_number':2298,'multiline':True]
['text':'
                         * Set swap even if it's not ambiguous already,
                         * because in the case of conflicts between
                         * different operands, C-order wins.
                         ','line_number':2315,'multiline':True]
['text':' Only set swap if it's still ambiguous ','line_number':2323,'multiline':True]
['text':'
                     * A comparison has been done, so it's
                     * no longer ambiguous
                     ','line_number':2329,'multiline':True]
['text':'
             * If the comparison was unambiguous, either shift
             * 'ax_ipos' to 'ax_i1' or stop looking for an insertion
             * point
             ','line_number':2336,'multiline':True]
['text':' Insert perm[ax_i0] into the right place ','line_number':2351,'multiline':True]
['text':' Apply the computed permutation to the AXISDATA array ','line_number':2361,'multiline':True]
['text':' Use the index as a flag, set each to 1 ','line_number':2366,'multiline':True]
['text':' Apply the permutation by following the cycles ','line_number':2371,'multiline':True]
['text':' If this axis hasn't been touched yet, process it ','line_number':2375,'multiline':True]
['text':' Follow the cycle, copying the data ','line_number':2382,'multiline':True]
['text':' Follow the cycle again, marking it as done ','line_number':2396,'multiline':True]
['text':' Clear the identity perm flag ','line_number':2407,'multiline':True]
['text':'
 * Calculates a dtype that all the types can be promoted to, using the
 * ufunc rules.  If only_inputs is 1, it leaves any operands that
 * are not read from out of the calculation.
 ','line_number':2412,'multiline':True]
['text':' If no dtype was requested and the op is a scalar, pass the op ','line_number':2434,'multiline':True]
['text':' Otherwise just pass in the dtype ','line_number':2440,'multiline':True]
['text':'
 * Allocates a temporary array which can be used to replace op
 * in the iteration.  Its dtype will be op_dtype.
 *
 * The result array has a memory ordering which matches the iterator,
 * which may or may not match that of op.  The parameter 'shape' may be
 * NULL, in which case it is filled in from the iterator's shape.
 *
 * This function must be called before any axes are coalesced.
 ','line_number':2473,'multiline':True]
['text':'
     * There is an interaction with array-dtypes here, which
     * generally works. Let's say you make an nditer with an
     * output dtype of a 2-double array. All-scalar inputs
     * will result in a 1-dimensional output with shape (2).
     * Everything still works out in the nditer, because the
     * new dimension is always added on the end, and it cares
     * about what happens at the beginning.
     ','line_number':2503,'multiline':True]
['text':' If it's a scalar, don't need to check the axes ','line_number':2513,'multiline':True]
['text':' Initialize the strides to invalid values ','line_number':2525,'multiline':True]
['text':' Apply the perm to get the original axis ','line_number':2535,'multiline':True]
['text':'
             * If i < 0, this is a new axis (the operand does not have it)
             * so we can ignore it here.  The iterator setup will have
             * ensured already that a potential reduction/broadcast is valid.
             ','line_number':2539,'multiline':True]
['text':' reduction axes always have a length of 1 ','line_number':2552,'multiline':True]
['text':' Apply the perm to get the original axis ','line_number':2579,'multiline':True]
['text':' If shape was NULL, use the shape we calculated ','line_number':2599,'multiline':True]
['text':'
         * If there's a gap in the array's dimensions, it's an error.
         * For instance, if op_axes [0, 2] is specified, there will a place
         * in the strides array where the value is not set.
         ','line_number':2602,'multiline':True]
['text':'
         * If custom axes were specified, some dimensions may not have
         * been used. These are additional axes which are ignored in the
         * iterator but need to be handled here.
         ','line_number':2619,'multiline':True]
['text':' Fill in the missing strides in C order ','line_number':2626,'multiline':True]
['text':'
         * Copy the missing strides, and multiply the existing strides
         * by the calculated factor.  This way, the missing strides
         * are tighter together in memory, which is good for nested
         * loops.
         ','line_number':2636,'multiline':True]
['text':' Allocate the temporary array ','line_number':2652,'multiline':True]
['text':' Double-check that the subtype didn't mess with the dimensions ','line_number':2660,'multiline':True]
['text':'
         * TODO: the dtype could have a subarray, which adds new dimensions
         *       to `ret`, that should typically be fine, but will break
         *       in this branch.
         ','line_number':2662,'multiline':True]
['text':'
         * Perform operand memory overlap checks, if requested.
         *
         * If any write operand has memory overlap with any read operand,
         * eliminate all overlap by making temporary copies, by enabling
         * NPY_OP_ITFLAG_FORCECOPY for the write operand to force WRITEBACKIFCOPY.
         *
         * Operands with NPY_ITER_OVERLAP_ASSUME_ELEMENTWISE enabled are not
         * considered overlapping if the arrays are exactly the same. In this
         * case, the iterator loops through them in the same order element by
         * element.  (As usual, the user-provided inner loop is assumed to be
         * able to deal with this level of simple aliasing.)
         ','line_number':2701,'multiline':True]
['text':' Iterator will always allocate ','line_number':2719,'multiline':True]
['text':'
                 * Copy output operands only, not inputs.
                 * A more sophisticated heuristic could be
                 * substituted here later.
                 ','line_number':2724,'multiline':True]
['text':' No data dependence for arrays not read from ','line_number':2738,'multiline':True]
['text':' Already copied ','line_number':2743,'multiline':True]
['text':'
                 * If the arrays are views to exactly the same data, no need
                 * to make copies, if the caller (eg ufunc) says it accesses
                 * data only in the iterator order.
                 *
                 * However, if there is internal overlap (e.g. a zero stride on
                 * a non-unit dimension), a copy cannot be avoided.
                 ','line_number':2747,'multiline':True]
['text':'
                 * Use max work = 1. If the arrays are large, it might
                 * make sense to go further.
                 ','line_number':2771,'multiline':True]
['text':'
         * Check whether there are any WRITEMASKED REDUCE operands
         * which should be validated after all the strides are filled
         * in.
         ','line_number':2788,'multiline':True]
['text':' NULL means an output the iterator should allocate ','line_number':2799,'multiline':True]
['text':' Check whether the subtype was disabled ','line_number':2804,'multiline':True]
['text':'
             * Allocate the output array.
             *
             * Note that here, ndim is always correct if no op_axes was given
             * (but the actual dimension of op can be larger). If op_axes
             * is given, ndim is not actually used.
             ','line_number':2808,'multiline':True]
['text':'
             * Now we need to replace the pointers and strides with values
             * from the new array.
             ','line_number':2827,'multiline':True]
['text':'
             * New arrays are guaranteed true-aligned, but copy/cast code
             * needs uint-alignment in addition.
             ','line_number':2834,'multiline':True]
['text':' New arrays need no cast ','line_number':2841,'multiline':True]
['text':'
         * If casting is required, the operand is read-only, and
         * it's an array scalar, make a copy whether or not the
         * copy flag is enabled.
         ','line_number':2844,'multiline':True]
['text':'
             * Now we need to replace the pointers and strides with values
             * from the temporary array.
             ','line_number':2869,'multiline':True]
['text':'
             * New arrays are guaranteed true-aligned, but copy/cast code
             * needs uint-alignment in addition.
             ','line_number':2875,'multiline':True]
['text':'
             * New arrays need no cast, and in the case
             * of scalars, always have stride 0 so never need buffering
             ','line_number':2882,'multiline':True]
['text':'
         * Make a temporary copy if,
         * 1. If casting is required and permitted, or,
         * 2. If force-copy is requested
         ','line_number':2892,'multiline':True]
['text':' Allocate the temporary array, if possible ','line_number':2904,'multiline':True]
['text':'
             * If the data will be read, copy it into temp.
             * TODO: It might be possible to do a view into
             *       op[iop]'s mask instead here.
             ','line_number':2915,'multiline':True]
['text':' If the data will be written to, set WRITEBACKIFCOPY
               and require a context manager ','line_number':2926,'multiline':True]
['text':'
             * Now we need to replace the pointers and strides with values
             * from the temporary array.
             ','line_number':2940,'multiline':True]
['text':'
             * New arrays are guaranteed true-aligned, but copy/cast code
             * additionally needs uint-alignment in addition.
             ','line_number':2947,'multiline':True]
['text':' The temporary copy needs no cast ','line_number':2954,'multiline':True]
['text':'
             * Buffering must be enabled for casting/conversion if copy
             * wasn't specified.
             ','line_number':2958,'multiline':True]
['text':'
             * If the operand is aligned, any buffering can use aligned
             * optimizations.
             ','line_number':2970,'multiline':True]
['text':' Here we can finally check for contiguous iteration ','line_number':2979,'multiline':True]
['text':'
         * If no alignment, byte swap, or casting is needed,
         * the inner stride of this operand works for the whole
         * array, we can set NPY_OP_ITFLAG_BUFNEVER.
         ','line_number':2998,'multiline':True]
['text':' Find stride of the first non-empty shape ','line_number':3014,'multiline':True]
['text':' Check that everything could have coalesced together ','line_number':3025,'multiline':True]
['text':'
                         * If N times the inner stride doesn't equal this
                         * stride, the multi-dimensionality is needed.
                         ','line_number':3030,'multiline':True]
['text':'
                 * If we looped all the way to the end, one stride works.
                 * Set that stride, because it may not belong to the first
                 * dimension.
                 ','line_number':3043,'multiline':True]
['text':'
             * Check whether there are any WRITEMASKED REDUCE operands
             * which should be validated now that all the strides are filled
             * in.
             ','line_number':3058,'multiline':True]
['text':'
                 * If the ARRAYMASK has 'bigger' dimensions
                 * than this REDUCE WRITEMASKED operand,
                 * the result would be more than one mask
                 * value per reduction element, something which
                 * is invalid. This function provides validation
                 * for that.
                 ','line_number':3066,'multiline':True]
['text':'
 * The __array_priority__ attribute of the inputs determines
 * the subtype of any output arrays.  This function finds the
 * subtype of the input array with highest priority.
 ','line_number':3084,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':3112,'multiline':True]
['text':' combined cast flags, the new cast flags for each cast: ','line_number':3124,'multiline':True]
['text':'
         * Reduction operands may be buffered with a different stride,
         * so we must pass NPY_MAX_INTP to the transfer function factory.
         ','line_number':3130,'multiline':True]
['text':'
         * If we have determined that a buffer may be needed,
         * allocate the appropriate transfer functions
         ','line_number':3137,'multiline':True]
['text':' This one cannot be cleaned up yet. ','line_number':3153,'multiline':True]
['text':' If the operand is WRITEMASKED, use a masked transfer fn ','line_number':3164,'multiline':True]
['text':'
                     * If the mask's stride is contiguous, use it, otherwise
                     * the mask may or may not be buffered, so the stride
                     * could be inconsistent.
                     ','line_number':3169,'multiline':True]
['text':' Get the decref function, used for no-writeback and on error ','line_number':3209,'multiline':True]
['text':'
                 * By passing NULL to dst_type and setting move_references
                 * to 1, we get back a function that just decrements the
                 * src references.
                 ','line_number':3211,'multiline':True]
['text':' Store the combined transfer flags on the iterator ','line_number':3235,'multiline':True]
['text':' If any of the dtype transfer functions needed the API, flag it. ','line_number':3239,'multiline':True]
