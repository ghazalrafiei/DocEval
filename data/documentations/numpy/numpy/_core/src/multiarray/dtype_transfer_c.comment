['text':'
 * This file contains low-level loops for data type transfers.
 * In particular the function PyArray_GetDTypeTransferFunction is
 * implemented here.
 *
 * Copyright (c) 2010 by Mark Wiebe (mwwiebe@gmail.com)
 * The University of British Columbia
 *
 * See LICENSE.txt for the license.
 *
 ','line_number':1,'multiline':True]
['text':'********* PRINTF DEBUG TRACING *************','line_number':45,'multiline':True]
['text':' Tracing incref/decref can be very noisy ','line_number':47,'multiline':True]
['text':'********************************************','line_number':61,'multiline':True]
['text':'
 * Thin wrapper around print that ignores exceptions
 ','line_number':64,'multiline':True]
['text':'************************** COPY REFERENCES ******************************','line_number':78,'multiline':True]
['text':' Moves references from src to dst ','line_number':80,'multiline':True]
['text':' Release the reference in dst ','line_number':96,'multiline':True]
['text':' Move the reference ','line_number':99,'multiline':True]
['text':' Set the source reference to NULL ','line_number':102,'multiline':True]
['text':' Copies references from src to dst ','line_number':113,'multiline':True]
['text':' Copy the reference ','line_number':129,'multiline':True]
['text':' Claim the reference ','line_number':132,'multiline':True]
['text':' Release the reference in dst ','line_number':134,'multiline':True]
['text':'************************* ANY TO OBJECT ********************************','line_number':145,'multiline':True]
['text':' If necessary, clear the input buffer (`move_references`) ','line_number':219,'multiline':True]
['text':' No need for floating point errors ','line_number':239,'multiline':True]
['text':'************************* OBJECT TO ANY ********************************','line_number':274,'multiline':True]
['text':' NOTE: auxdata is only really necessary to flag `move_references` ','line_number':347,'multiline':True]
['text':'************************* ZERO-PADDED COPY *****************************','line_number':364,'multiline':True]
['text':'
 * Does a strided to strided zero-padded copy for the case where
 * dst_itemsize > src_itemsize
 ','line_number':366,'multiline':True]
['text':'
 * Does a strided to strided zero-padded copy for the case where
 * dst_itemsize < src_itemsize
 ','line_number':394,'multiline':True]
['text':'
 * Does a strided to strided zero-padded or truncated copy for the case where
 * unicode swapping is needed.
 ','line_number':418,'multiline':True]
['text':'************************** WRAP DTYPE COPY/SWAP ************************','line_number':486,'multiline':True]
['text':' Wraps the dtype copy swap function ','line_number':487,'multiline':True]
['text':' wrap copy swap data free function ','line_number':495,'multiline':True]
['text':' wrap copy swap data copy function ','line_number':503,'multiline':True]
['text':' We assume that d->copyswapn should not be able to error. ','line_number':530,'multiline':True]
['text':'
 * This function is used only via `get_wrapped_legacy_cast_function`
 * when we wrap a legacy DType (or explicitly fall back to the legacy
 * wrapping) for an internal cast.
 ','line_number':535,'multiline':True]
['text':' Allocate the data for the copy swap ','line_number':546,'multiline':True]
['text':'
     * TODO: This is a hack so the copyswap functions have an array.
     *       The copyswap functions shouldn't need that.
     ','line_number':560,'multiline':True]
['text':'************************** DTYPE CAST FUNCTIONS ************************','line_number':582,'multiline':True]
['text':' Does a simple aligned cast ','line_number':584,'multiline':True]
['text':' strided cast data free function ','line_number':592,'multiline':True]
['text':' strided cast data copy function ','line_number':601,'multiline':True]
['text':'
         * Since error handling in ufuncs is not ideal (at the time of
         * writing this, an error could be in process before calling this
         * function. For most of NumPy history these checks were completely
         * missing, so this is hopefully OK for the time being (until ufuncs
         * are fixed).
         ','line_number':634,'multiline':True]
['text':' This one requires src be of type NPY_OBJECT ','line_number':651,'multiline':True]
['text':'
         * See comment in `_aligned_strided_to_strided_cast`, an error could
         * in principle be set before `castfunc` is called.
         ','line_number':671,'multiline':True]
['text':' After casting, decrement the source ref and set it to NULL ','line_number':678,'multiline':True]
['text':'
     * See comment in `_aligned_strided_to_strided_cast`, an error could
     * in principle be set before `castfunc` is called.
     ','line_number':704,'multiline':True]
['text':'
 * Does a datetime->datetime, timedelta->timedelta,
 * datetime->ascii, or ascii->datetime cast
 ','line_number':715,'multiline':True]
['text':' The conversion fraction ','line_number':721,'multiline':True]
['text':' For the datetime -> string conversion, the dst string length ','line_number':723,'multiline':True]
['text':'
     * A buffer of size 'src_itemsize + 1', for when the input
     * string is exactly of length src_itemsize with no NULL
     * terminator.
     ','line_number':725,'multiline':True]
['text':'
     * The metadata for when dealing with Months or Years
     * which behave non-linearly with respect to the other
     * units.
     ','line_number':731,'multiline':True]
['text':' strided datetime cast data free function ','line_number':739,'multiline':True]
['text':' strided datetime cast data copy function ','line_number':747,'multiline':True]
['text':' Apply the scaling ','line_number':824,'multiline':True]
['text':' Apply the scaling ','line_number':860,'multiline':True]
['text':' Initialize the destination to all zeros ','line_number':901,'multiline':True]
['text':' Replicating strnlen with memchr, because Mac OS X lacks it ','line_number':936,'multiline':True]
['text':' If the string is all full, use the buffer ','line_number':939,'multiline':True]
['text':' Otherwise parse the data in place ','line_number':951,'multiline':True]
['text':' Convert to the datetime ','line_number':961,'multiline':True]
['text':'
 * Assumes src_dtype and dst_dtype are both datetimes or both timedeltas
 ','line_number':977,'multiline':True]
['text':' Allocate the data for the casting ','line_number':1005,'multiline':True]
['text':'
     * Special case the datetime (but not timedelta) with the nonlinear
     * units (years and months). For timedelta, an average
     * years and months value is used.
     ','line_number':1020,'multiline':True]
['text':' Allocate the data for the casting ','line_number':1068,'multiline':True]
['text':' Get an ASCII string data type, adapted to match the UNICODE one ','line_number':1109,'multiline':True]
['text':' ensured in resolve_descriptors for simplicity ','line_number':1116,'multiline':True]
['text':' Get the NBO datetime to string aligned contig function ','line_number':1119,'multiline':True]
['text':' no need to ensure contiguous ','line_number':1128,'multiline':True]
['text':' Allocate the data for the casting ','line_number':1154,'multiline':True]
['text':' Get an ASCII string data type, adapted to match the UNICODE one ','line_number':1201,'multiline':True]
['text':' Get the string to NBO datetime aligned function ','line_number':1209,'multiline':True]
['text':' no need to ensure contiguous ','line_number':1218,'multiline':True]
['text':' Check the data types whose casting functions use API calls ','line_number':1251,'multiline':True]
['text':' Get the cast function ','line_number':1280,'multiline':True]
['text':' Allocate the data for the casting ','line_number':1288,'multiline':True]
['text':'
     * TODO: This is a hack so the cast functions have an array.
     *       The cast functions shouldn't need that.  Also, since we
     *       always handle byte order conversions, this array should
     *       have native byte order.
     ','line_number':1300,'multiline':True]
['text':'
     * TODO: This is a hack so the cast functions have an array.
     *       The cast functions shouldn't need that.  Also, since we
     *       always handle byte order conversions, this array should
     *       have native byte order.
     ','line_number':1326,'multiline':True]
['text':' If it's aligned and all native byte order, we're all done ','line_number':1355,'multiline':True]
['text':'
         * Use the contig version if the strides are contiguous or
         * we're telling the caller to wrap the return, because
         * the wrapping uses a contiguous buffer.
         ','line_number':1360,'multiline':True]
['text':'*************************** COPY 1 TO N CONTIGUOUS ***********************','line_number':1379,'multiline':True]
['text':' Copies 1 element to N contiguous elements ','line_number':1381,'multiline':True]
['text':' If finish->func is non-NULL the source needs a decref ','line_number':1386,'multiline':True]
['text':' transfer data free function ','line_number':1390,'multiline':True]
['text':' transfer data copy function ','line_number':1399,'multiline':True]
['text':' Allocate the data, and populate it ','line_number':1405,'multiline':True]
['text':' Initialize in case of error, or if it is unused ','line_number':1413,'multiline':True]
['text':' In case of error ','line_number':1516,'multiline':True]
['text':'
     * move_references is set to 0, handled in the wrapping transfer fn,
     * src_stride is set to zero, because its 1 to N copying,
     * and dst_stride is set to contiguous, because subarrays are always
     * contiguous.
     ','line_number':1518,'multiline':True]
['text':' If the src object will need a DECREF, set src_dtype ','line_number':1534,'multiline':True]
['text':'*************************** COPY N TO N CONTIGUOUS ***********************','line_number':1557,'multiline':True]
['text':' Copies N contiguous elements to N contiguous elements ','line_number':1559,'multiline':True]
['text':' avoid look up on the dtype (dst can be NULL) ','line_number':1564,'multiline':True]
['text':' transfer data free function ','line_number':1567,'multiline':True]
['text':' transfer data copy function ','line_number':1575,'multiline':True]
['text':' Allocate the data, and populate it ','line_number':1581,'multiline':True]
['text':' Make one large transfer including both outer and inner iteration: ','line_number':1642,'multiline':True]
['text':'
 * Note that this function is currently both used for structured dtype
 * casting as well as a decref function (with `dst_dtype == NULL`)
 ','line_number':1654,'multiline':True]
['text':'
         * If N == 1, we can use the original strides,
         * otherwise fields are contiguous
         ','line_number':1678,'multiline':True]
['text':' Store the wrapped strides for easier access ','line_number':1684,'multiline':True]
['text':'
     * src_stride and dst_stride are set to contiguous, because
     * subarrays are always contiguous.
     ','line_number':1689,'multiline':True]
['text':'
         * No need for wrapping, we can just copy directly. In principle
         * this step could be optimized away entirely, but it requires
         * replacing the context (to have the unpacked dtypes).
         ','line_number':1704,'multiline':True]
['text':' The subarrays can be coalesced (probably very rarely) ','line_number':1713,'multiline':True]
['text':'********************* COPY WITH SUBARRAY BROADCAST ***********************','line_number':1724,'multiline':True]
['text':' Copies element with subarray broadcasting ','line_number':1730,'multiline':True]
['text':' The use-case should probably be deprecated ','line_number':1735,'multiline':True]
['text':' This gets a run-length encoded representation of the transfer ','line_number':1737,'multiline':True]
['text':' transfer data free function ','line_number':1743,'multiline':True]
['text':' transfer data copy function ','line_number':1753,'multiline':True]
['text':' Allocate the data and populate it ','line_number':1761,'multiline':True]
['text':' Allocate the data and populate it ','line_number':1921,'multiline':True]
['text':'
     * move_references is set to 0, handled in the wrapping transfer fn,
     * src_stride and dst_stride are set to contiguous, as N will always
     * be 1 when it's called.
     ','line_number':1935,'multiline':True]
['text':' If the src object will need a DECREF ','line_number':1950,'multiline':True]
['text':' If the dst object needs a DECREF to set it to NULL ','line_number':1960,'multiline':True]
['text':' Calculate the broadcasting and set the offsets ','line_number':1970,'multiline':True]
['text':' Get the dst coord of this index for dimension i ','line_number':1981,'multiline':True]
['text':' Translate it into a src coord and update src_index ','line_number':1988,'multiline':True]
['text':' Out of bounds, flag with -1 ','line_number':2000,'multiline':True]
['text':' Set the offset ','line_number':2007,'multiline':True]
['text':' Run-length encode the result ','line_number':2016,'multiline':True]
['text':' Stop the run when there's a valid index again ','line_number':2021,'multiline':True]
['text':' Stop the run when there's a valid index again ','line_number':2033,'multiline':True]
['text':' Multiply all the offsets by the src item size ','line_number':2050,'multiline':True]
['text':'
 * Handles subarray transfer.  To call this, at least one of the dtype's
 * subarrays must be non-NULL
 ','line_number':2069,'multiline':True]
['text':' Get the subarray shapes and sizes ','line_number':2085,'multiline':True]
['text':'
     * Copy the src value to all the dst values, the size one can be
     * special cased for speed.
     ','line_number':2108,'multiline':True]
['text':' Copy the src value to all the dst values ','line_number':2127,'multiline':True]
['text':'
     * Copy the subarray with broadcasting, truncating, and zero-padding
     * as necessary.
     ','line_number':2140,'multiline':True]
['text':'*************************** COPY FIELDS ******************************','line_number':2160,'multiline':True]
['text':' transfer data free function ','line_number':2174,'multiline':True]
['text':' transfer data copy function ','line_number':2186,'multiline':True]
['text':' Allocate the data and populate it ','line_number':2195,'multiline':True]
['text':' Copy all the fields transfer data ','line_number':2207,'multiline':True]
['text':' Do the transfer a block at a time ','line_number':2236,'multiline':True]
['text':'
 * Handles fields transfer.  To call this, at least one of the dtypes
 * must have fields. Does not take care of object<->structure conversion
 ','line_number':2275,'multiline':True]
['text':'
     * There are three cases to take care of: 1. src is non-structured,
     * 2. dst is non-structured, or 3. both are structured.
     ','line_number':2296,'multiline':True]
['text':' 1. src is non-structured. Copy the src value to all the fields of dst ','line_number':2301,'multiline':True]
['text':' Allocate the field-data structure and populate it ','line_number':2305,'multiline':True]
['text':'
         * If references should be decrefd in src, add a clear function.
         ','line_number':2343,'multiline':True]
['text':' 2. dst is non-structured. Allow transfer from single-field src to dst ','line_number':2363,'multiline':True]
['text':' Allocate the field-data structure and populate it ','line_number':2372,'multiline':True]
['text':' 3. Otherwise both src and dst are structured arrays ','line_number':2411,'multiline':True]
['text':' Match up the fields to copy (field-by-field transfer) ','line_number':2414,'multiline':True]
['text':' Allocate the field-data structure and populate it ','line_number':2420,'multiline':True]
['text':' set up the transfer function for each field ','line_number':2434,'multiline':True]
['text':'************************ MASKED TRANSFER WRAPPER ************************','line_number':2474,'multiline':True]
['text':' The transfer function being wrapped (could likely be stored directly) ','line_number':2478,'multiline':True]
['text':' The src decref function if necessary ','line_number':2480,'multiline':True]
['text':' transfer data free function ','line_number':2484,'multiline':True]
['text':' transfer data copy function ','line_number':2494,'multiline':True]
['text':' Allocate the data and populate it ','line_number':2501,'multiline':True]
['text':' Skip masked values, still calling decref for move_references ','line_number':2537,'multiline':True]
['text':' Process unmasked values ','line_number':2551,'multiline':True]
['text':' Skip masked values ','line_number':2581,'multiline':True]
['text':' Process unmasked values ','line_number':2591,'multiline':True]
['text':' A no-op function (currently only used for cleanup purposes really) ','line_number':2608,'multiline':True]
['text':' Do nothing ','line_number':2615,'multiline':True]
['text':'
 * ********************* Generalized Multistep Cast ************************
 *
 * New general purpose multiple step cast function when resolve descriptors
 * implies that multiple cast steps are necessary.
 ','line_number':2620,'multiline':True]
['text':' Information for main cast ','line_number':2629,'multiline':True]
['text':' Information for input preparation cast ','line_number':2631,'multiline':True]
['text':' Information for output finalization cast ','line_number':2633,'multiline':True]
['text':' zero-padded data copy function ','line_number':2640,'multiline':True]
['text':' Round up the structure size to 16-byte boundary for the buffers ','line_number':2663,'multiline':True]
['text':' Fix up the basic information: ','line_number':2685,'multiline':True]
['text':' And buffer information: ','line_number':2688,'multiline':True]
['text':' Initialize funcs to NULL to signal no-cleanup in case of an error. ','line_number':2692,'multiline':True]
['text':' The context is always stored explicitly in auxdata ','line_number':2746,'multiline':True]
['text':' TODO: Internal buffer may require cleanup on error. ','line_number':2773,'multiline':True]
['text':' TODO: Internal buffer may require cleanup on error. ','line_number':2799,'multiline':True]
['text':'
 * Initialize most of a cast-info structure, this step does not fetch the
 * transferfunction and transferdata.
 ','line_number':2822,'multiline':True]
['text':' Initialize the context and related data ','line_number':2842,'multiline':True]
['text':'
         * We currently do not resolve recursively, but require a non
         * main cast (within the same DType) to be done in a single step.
         * This could be expanded at some point if the need arises.
         ','line_number':2868,'multiline':True]
['text':'
 * When there is a failure in ArrayMethod.get_loop(...) we still have
 * to clean up references, but assume that `auxdata` and `func`
 * have undefined values.
 * NOTE: This should possibly be moved, but is only necessary here
 ','line_number':2887,'multiline':True]
['text':' As public API we could choose to clear auxdata != NULL ','line_number':2896,'multiline':True]
['text':' Set func to be non-null so that `NPY_cats_info_xfree` does not skip ','line_number':2898,'multiline':True]
['text':'
 * Helper for PyArray_GetDTypeTransferFunction, which fetches a single
 * transfer function from the each casting implementation (ArrayMethod)
 * May set the transfer function to NULL when the cast can be achieved using
 * a view.
 * TODO: Expand the view functionality for general offsets, not just 0:
 *       Partial casts could be skipped also for `view_offset != 0`.
 *
 * The `out_needs_api` flag must be initialized.
 *
 * NOTE: In theory casting errors here could be slightly misleading in case
 *       of a multi-step casting scenario. It should be possible to improve
 *       this in the future.
 *
 * Note about `move_references`: Move references means stealing of
 * references.  It is useful to clear buffers immediately. No matter the
 * input all copies from a buffer must use `move_references`. Move references
 * is thus used:
 *   * For the added initial "from" cast if it was passed in
 *   * Always in the main step if a "from" cast is made (it casts from a buffer)
 *   * Always for the "to" cast, as it always cast from a buffer to the output.
 *
 * Returns -1 on failure, 0 on success
 ','line_number':2904,'multiline':True]
['text':' Was previously used for decref ','line_number':2936,'multiline':True]
['text':' Storage for all cast info in case multi-step casting is necessary ','line_number':2938,'multiline':True]
['text':' Initialize funcs to NULL to simplify cleanup on error. ','line_number':2940,'multiline':True]
['text':' `view_offset` passed to `init_cast_info` but unused for the main cast ','line_number':2944,'multiline':True]
['text':'
     * Both input and output must be wrapped in case they may be unaligned
     * and the method does not support unaligned data.
     * NOTE: It is probable that most/all legacy loops actually do support
     *       unaligned output, we could move the wrapping there if we wanted
     *       to. It probably isn't speed relevant though and they should be
     *       deleted in any case.
     ','line_number':2954,'multiline':True]
['text':'
     * Wrap the input with an additional cast if necessary.
     ','line_number':2965,'multiline':True]
['text':' Cast function may not support the input, wrap if necessary ','line_number':2971,'multiline':True]
['text':' Prepare the actual cast (if necessary): ','line_number':2979,'multiline':True]
['text':' This step is not necessary and can be skipped ','line_number':2981,'multiline':True]
['text':' avoid NULL ','line_number':2982,'multiline':True]
['text':' Fetch the cast function and set up ','line_number':2986,'multiline':True]
['text':' The main cast now uses a buffered input: ','line_number':2999,'multiline':True]
['text':' main cast has to clear the buffer ','line_number':3001,'multiline':True]
['text':'
     * Wrap the output with an additional cast if necessary.
     ','line_number':3004,'multiline':True]
['text':' Cast function may not support the output, wrap if necessary ','line_number':3010,'multiline':True]
['text':' Prepare the actual cast (if necessary): ','line_number':3018,'multiline':True]
['text':' This step is not necessary and can be skipped. ','line_number':3020,'multiline':True]
['text':' avoid NULL ','line_number':3021,'multiline':True]
['text':' Fetch the cast function and set up ','line_number':3025,'multiline':True]
['text':' clear buffer ','line_number':3030,'multiline':True]
['text':' The main cast now uses a buffered input: ','line_number':3038,'multiline':True]
['text':' Both input and output are wrapped, now always aligned ','line_number':3041,'multiline':True]
['text':' Fetch the main cast function (with updated values) ','line_number':3047,'multiline':True]
['text':' Most of the time, there will be only one step required. ','line_number':3061,'multiline':True]
['text':' The full cast passed in is only the "main" step, copy cast_info there ','line_number':3064,'multiline':True]
['text':'
 * Internal wrapping of casts that have to be performed in a "single"
 * function (i.e. not by the generic multi-step-cast), but rely on it
 * internally. There are only two occasions where this is used:
 *
 * 1. Void advertises that it handles unaligned casts, but has to wrap the
 *    legacy cast which (probably) does not.
 * 2. Datetime to unicode casts are implemented via bytes "U" vs. "S". If
 *    we relax the chaining rules to allow "recursive" cast chaining where
 *    `resolve_descriptors` can return a descriptor with a different type,
 *    this would become unnecessary.
 *  3. Time <-> Time casts, which currently must support byte swapping, but
 *     have a non-trivial inner-loop (due to units) which does not support
 *     it.
 *
 * When wrapping is performed (guaranteed for `aligned == 0` and if the
 * wrapped dtype is not identical to the input dtype), the wrapped transfer
 * function can assume a contiguous input.
 * Otherwise use `must_wrap` to ensure that wrapping occurs, which guarantees
 * a contiguous, aligned, call of the wrapped function.
 ','line_number':3108,'multiline':True]
['text':' Finalize the existing cast information: ','line_number':3145,'multiline':True]
['text':' These are always legacy casts that only support native-byte-order: ','line_number':3151,'multiline':True]
['text':'
     * Similar to the normal multi-step cast, but we always have to wrap
     * it all up, but we can simply do this via a "recursive" call.
     * TODO: This is slightly wasteful, since it unnecessarily checks casting,
     *       but this whole function is about corner cases, which should rather
     *       have an explicit implementation instead if we want performance.
     ','line_number':3164,'multiline':True]
['text':' clear buffer if it includes references ','line_number':3188,'multiline':True]
['text':'
 * This function wraps the legacy casts stored on the `dtype->f->cast`
 * or registered with `PyArray_RegisterCastFunc`.
 * For casts between two dtypes with the same type (within DType casts)
 * it also wraps the `copyswapn` function.
 *
 * This function is called from `ArrayMethod.get_loop()` when a specialized
 * cast function is missing.
 *
 * In general, the legacy cast functions do not support unaligned access,
 * so an ArrayMethod using this must signal that.  In a few places we do
 * signal support for unaligned access (or byte swapping).
 * In this case `allow_wrapped=1` will wrap it into an additional multi-step
 * cast as necessary.
 ','line_number':3214,'multiline':True]
['text':' Note: We ignore `needs_wrap`; needs-wrap is handled by another cast ','line_number':3238,'multiline':True]
['text':'
         * This is a cast within the same dtype. For legacy user-dtypes,
         * it is always valid to handle this using the copy swap function.
         ','line_number':3242,'multiline':True]
['text':'
         * Legacy casts do not support unaligned which requires wrapping.
         * However, normally we ensure that wrapping happens before calling
         * this function, so this path should never happen.
         ','line_number':3267,'multiline':True]
['text':'
     * If we are here, use the legacy code to wrap the above cast (which
     * does not support unaligned data) into copyswapn.
     ','line_number':3280,'multiline':True]
['text':' We assume wrapped is contiguous here ','line_number':3293,'multiline':True]
['text':' Create the wrapper function's auxdata ','line_number':3330,'multiline':True]
['text':' Fall back to wrapping a non-masked transfer function ','line_number':3340,'multiline':True]
['text':' If the src object will need a DECREF, get a function to handle that ','line_number':3352,'multiline':True]
['text':' The context is almost unused, but clear it for cleanup. ','line_number':3371,'multiline':True]
['text':' Make sure the copy is reasonable ','line_number':3391,'multiline':True]
['text':' Check data alignment, both uint and true ','line_number':3401,'multiline':True]
['text':' Get the function to do the casting ','line_number':3411,'multiline':True]
['text':' Cast ','line_number':3427,'multiline':True]
['text':' Cleanup ','line_number':3432,'multiline':True]
['text':'
 * Prepares shape and strides for a simple raw array iteration.
 * This sorts the strides into FORTRAN order, reverses any negative
 * strides, then coalesces axes where possible. The results are
 * filled in the output parameters.
 *
 * This is intended for simple, lightweight iteration over arrays
 * where no buffering of any kind is needed, and the array may
 * not be stored as a PyArrayObject.
 *
 * The arrays shape, out_shape, strides, and out_strides must all
 * point to different data.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':3447,'multiline':True]
['text':' Special case 0 and 1 dimensions ','line_number':3471,'multiline':True]
['text':' Always make a positive stride ','line_number':3483,'multiline':True]
['text':' Sort the axes based on the destination strides ','line_number':3495,'multiline':True]
['text':' Reverse any negative strides ','line_number':3503,'multiline':True]
['text':' Detect 0-size arrays here ','line_number':3511,'multiline':True]
['text':' Coalesce any dimensions where possible ','line_number':3521,'multiline':True]
['text':' Drop axis i ','line_number':3525,'multiline':True]
['text':' Drop axis j ','line_number':3530,'multiline':True]
['text':' Coalesce axes i and j ','line_number':3533,'multiline':True]
['text':' Can't coalesce, go to next i ','line_number':3537,'multiline':True]
['text':' DEBUG ','line_number':3546,'multiline':True]
['text':'
 * The same as PyArray_PrepareOneRawArrayIter, but for two
 * operands instead of one. Any broadcasting of the two operands
 * should have already been done before calling this function,
 * as the ndim and shape is only specified once for both operands.
 *
 * Only the strides of the first operand are used to reorder
 * the dimensions, no attempt to consider all the strides together
 * is made, as is done in the NpyIter object.
 *
 * You can use this together with NPY_RAW_ITER_START and
 * NPY_RAW_ITER_TWO_NEXT to handle the looping boilerplate of everything
 * but the innermost loop (which is for idim == 0).
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':3567,'multiline':True]
['text':' Special case 0 and 1 dimensions ','line_number':3594,'multiline':True]
['text':' Always make a positive stride for the first operand ','line_number':3609,'multiline':True]
['text':' Sort the axes based on the destination strides ','line_number':3625,'multiline':True]
['text':' Reverse any negative strides of operand A ','line_number':3634,'multiline':True]
['text':' Detect 0-size arrays here ','line_number':3646,'multiline':True]
['text':' Coalesce any dimensions where possible ','line_number':3658,'multiline':True]
['text':' Drop axis i ','line_number':3662,'multiline':True]
['text':' Drop axis j ','line_number':3668,'multiline':True]
['text':' Coalesce axes i and j ','line_number':3672,'multiline':True]
['text':' Can't coalesce, go to next i ','line_number':3676,'multiline':True]
['text':'
 * The same as PyArray_PrepareOneRawArrayIter, but for three
 * operands instead of one. Any broadcasting of the three operands
 * should have already been done before calling this function,
 * as the ndim and shape is only specified once for all operands.
 *
 * Only the strides of the first operand are used to reorder
 * the dimensions, no attempt to consider all the strides together
 * is made, as is done in the NpyIter object.
 *
 * You can use this together with NPY_RAW_ITER_START and
 * NPY_RAW_ITER_THREE_NEXT to handle the looping boilerplate of everything
 * but the innermost loop (which is for idim == 0).
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':3691,'multiline':True]
['text':' Special case 0 and 1 dimensions ','line_number':3720,'multiline':True]
['text':' Always make a positive stride for the first operand ','line_number':3739,'multiline':True]
['text':' Sort the axes based on the destination strides ','line_number':3759,'multiline':True]
['text':' Reverse any negative strides of operand A ','line_number':3769,'multiline':True]
['text':' Detect 0-size arrays here ','line_number':3784,'multiline':True]
['text':' Coalesce any dimensions where possible ','line_number':3798,'multiline':True]
['text':' Drop axis i ','line_number':3802,'multiline':True]
['text':' Drop axis j ','line_number':3809,'multiline':True]
['text':' Coalesce axes i and j ','line_number':3814,'multiline':True]
['text':' Can't coalesce, go to next i ','line_number':3818,'multiline':True]
