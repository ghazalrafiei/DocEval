['text':'
 * Tries to convert 'o' into an npy_intp interpreted as an
 * index. Returns 1 if it was successful, 0 otherwise. Does
 * not set an exception.
 ','line_number':30,'multiline':True]
['text':'
 * This function converts one element of the indexing tuple
 * into a step size and a number of steps, returning the
 * starting index. Non-slices are signalled in 'n_steps',
 * as NEWAXIS_INDEX, ELLIPSIS_INDEX, or SINGLE_INDEX.
 ','line_number':47,'multiline':True]
['text':'********************** Element-wise Array Iterator **********************','line_number':102,'multiline':True]
['text':'  Aided by Peter J. Verveer's  nd_image package and numpy's arraymap  ***','line_number':103,'multiline':True]
['text':'         and Python's array iterator                                   **','line_number':104,'multiline':True]
['text':' get the dataptr from its current coordinates for simple iterator ','line_number':106,'multiline':True]
['text':'
 * This is common initialization code between PyArrayIterObject and
 * PyArrayNeighborhoodIterObject
 *
 * Steals a reference to the array object which gets removed at deallocation,
 * if the iterator is allocated statically and its dealloc not called, it
 * can be thought of as borrowing the reference.
 ','line_number':122,'multiline':True]
['text':' The legacy iterator only supports 32 dimensions ','line_number':136,'multiline':True]
['text':'NUMPY_API
 * Get Iterator.
 ','line_number':177,'multiline':True]
['text':'
     * Note that internally PyArray_RawIterBaseInit may be called directly on a
     * statically allocated PyArrayIterObject.
     ','line_number':183,'multiline':True]
['text':' it = PyObject_New(PyArrayIterObject, &PyArrayIter_Type);','line_number':204,'multiline':True]
['text':' PyArray_RawIterBaseInit steals a reference ','line_number':209,'multiline':True]
['text':'NUMPY_API
 * Get Iterator broadcast to a particular shape
 ','line_number':214,'multiline':True]
['text':'NUMPY_API
 * Get Iterator that iterates over all but one axis (don't use this with
 * PyArray_ITER_GOTO1D).  The axis will be over-written if negative
 * with the axis having the smallest stride.
 ','line_number':289,'multiline':True]
['text':' adjust so that will not iterate over axis ','line_number':333,'multiline':True]
['text':'
     * (won't fix factors so don't use
     * PyArray_ITER_GOTO1D with this iterator)
     ','line_number':341,'multiline':True]
['text':'NUMPY_API
 * Adjusts previously broadcasted iterators so that the axis with
 * the smallest sum of iterator strides is not iterated over.
 * Returns dimension which is smallest in the range [0,multi->nd).
 * A -1 is returned if multi->nd == 0.
 *
 * don't use with PyArray_ITER_GOTO1D because factors are not adjusted
 ','line_number':348,'multiline':True]
['text':' Find longest dimension ','line_number':376,'multiline':True]
['text':' Returns an array scalar holding the element desired ','line_number':396,'multiline':True]
['text':'
     * Note that it is possible to statically allocate a PyArrayIterObject,
     * which does not call this function.
     ','line_number':414,'multiline':True]
['text':' Get size of return array ','line_number':452,'multiline':True]
['text':' Set up loop ','line_number':466,'multiline':True]
['text':' Always returns arrays ','line_number':560,'multiline':True]
['text':'
     * Tuples >1d not accepted --- i.e. no newaxis
     * Could implement this with adjusted strides and dimensions in iterator
     * Check for Boolean -- this is first because Bool is a subclass of Int
     ','line_number':594,'multiline':True]
['text':' empty array ','line_number':609,'multiline':True]
['text':' set up a cast to handle item copying ','line_number':625,'multiline':True]
['text':' We can assume the newly allocated output array is aligned ','line_number':629,'multiline':True]
['text':' Check for Integer or Slice ','line_number':637,'multiline':True]
['text':' Integer ','line_number':650,'multiline':True]
['text':' convert to INTP array if Integer array scalar or List ','line_number':683,'multiline':True]
['text':' Any remaining valid input is an array or has been turned into one ','line_number':697,'multiline':True]
['text':' Check for Boolean array ','line_number':702,'multiline':True]
['text':' Only integer arrays left ','line_number':708,'multiline':True]
['text':' Loop over Boolean array ','line_number':765,'multiline':True]
['text':'
     * Check for Boolean -- this is first because
     * Bool is a subclass of Int
     ','line_number':883,'multiline':True]
['text':' set up cast to handle single-element copies into arrval ','line_number':938,'multiline':True]
['text':' We can assume the newly allocated array is aligned ','line_number':942,'multiline':True]
['text':' Check Slice ','line_number':950,'multiline':True]
['text':' convert to INTP array if Integer array scalar or List ','line_number':991,'multiline':True]
['text':' Check for Boolean object ','line_number':1003,'multiline':True]
['text':' Check for integer array ','line_number':1011,'multiline':True]
['text':'mp_length','line_number':1045,'multiline':True]
['text':'mp_subscript','line_number':1046,'multiline':True]
['text':'mp_ass_subscript','line_number':1047,'multiline':True]
['text':' Two options:
 *  1) underlying array is contiguous
 *     -- return 1-d wrapper around it
 *  2) underlying array is not contiguous
 *     -- make new 1-d contiguous array with updateifcopy flag set
 *        to copy back to the old array
 *
 *  If underlying array is readonly, then we make the output array readonly
 *     and updateifcopy does not apply.
 *
 *  Changed 2017-07-21, 1.14.0.
 *
 *  In order to start the process of removing UPDATEIFCOPY, see gh-7054, the
 *  behavior is changed to always return an non-writeable copy when the base
 *  array is non-contiguous. Doing that will hopefully smoke out those few
 *  folks who assign to the result with the expectation that the base array
 *  will be changed. At a later date non-contiguous arrays will always return
 *  writeable copies.
 *
 *  Note that the type and argument expected for the __array__ method is
 *  ignored.
 ','line_number':1051,'multiline':True]
['text':' to get array ','line_number':1120,'multiline':True]
['text':' sentinel ','line_number':1127,'multiline':True]
['text':'
         * coordinates not kept track of ---
         * need to generate from index
         ','line_number':1166,'multiline':True]
['text':'* END of Array Iterator *','line_number':1209,'multiline':True]
['text':' Adjust dimensionality and strides for index object iterators
   --- i.e. broadcast
','line_number':1240,'multiline':True]
['text':'NUMPY_API','line_number':1243,'multiline':True]
['text':' Initializing avoids a compiler warning. ','line_number':1248,'multiline':True]
['text':' Discover the broadcast number of dimensions ','line_number':1252,'multiline':True]
['text':' Discover the broadcast shape in each dimension ','line_number':1258,'multiline':True]
['text':' This prepends 1 to shapes not already equal to nd ','line_number':1263,'multiline':True]
['text':'
     * Reset the iterator dimensions and strides of each iterator
     * object -- using 0 valued strides for broadcasting
     * Need to check for overflow
     ','line_number':1282,'multiline':True]
['text':'
             * If this dimension was added or shape of
             * underlying array was 1
             ','line_number':1305,'multiline':True]
['text':'
 * Common implementation for all PyArrayMultiIterObject constructors.
 ','line_number':1335,'multiline':True]
['text':'NUMPY_API
 * Get MultiIterator from array of Python objects and any additional
 *
 * PyObject **mps - array of PyObjects
 * int n - number of PyObjects in the array
 * int nadd - number of additional arrays to include in the iterator.
 *
 * Returns a multi-iterator object.
 ','line_number':1408,'multiline':True]
['text':'NUMPY_API
 * Get MultiIterator,
 ','line_number':1442,'multiline':True]
['text':' needed for pypy','line_number':1478,'multiline':False]
['text':' sentinel ','line_number':1614,'multiline':True]
['text':'========================= Neighborhood iterator ======================','line_number':1630,'multiline':True]
['text':' Non-object types ','line_number':1651,'multiline':True]
['text':' set the dataptr from its current coordinates ','line_number':1674,'multiline':True]
['text':' For an array x of dimension n, and given index i, returns j, 0 <= j < n
 * such as x[i] = x[j], with x assumed to be mirrored. For example, for x =
 * {1, 2, 3} (n = 3)
 *
 * index -5 -4 -3 -2 -1 0 1 2 3 4 5 6
 * value  2  3  3  2  1 1 2 3 3 2 1 1
 *
 * _npy_pos_index_mirror(4, 3) will return 1, because x[4] = x[1]','line_number':1693,'multiline':True]
['text':' Mirror i such as it is guaranteed to be positive ','line_number':1706,'multiline':True]
['text':' compute k and l such as i = k * n + l, 0 <= l < k ','line_number':1711,'multiline':True]
['text':' set the dataptr from its current coordinates ','line_number':1729,'multiline':True]
['text':' compute l such as i = k * n + l, 0 <= l < |k| ','line_number':1746,'multiline':True]
['text':'
 * fill and x->ao should have equivalent types
 ','line_number':1780,'multiline':True]
['text':'NUMPY_API
 * A Neighborhood Iterator object.
','line_number':1783,'multiline':True]
['text':' PyArray_RawIterBaseInit steals a reference ','line_number':1799,'multiline':True]
['text':' Compute the neighborhood size and copy the shape ','line_number':1810,'multiline':True]
['text':' limits keep track of valid ranges for the neighborhood: if a bound
         * of the neighborhood is outside the array, then limits is the same as
         * boundaries. On the contrary, if a bound is strictly inside the
         * array, then limits correspond to the array range. For example, for
         * an array [1, 2, 3], if bounds are [-1, 3], limits will be [-1, 3],
         * but if bounds are [1, 2], then limits will be [0, 2].
         *
         * This is used by neighborhood iterators stacked on top of this one ','line_number':1817,'multiline':True]
['text':' New reference in returned value of _set_constant if array
             * object ','line_number':1844,'multiline':True]
['text':'
     * XXX: we force x iterator to be non contiguous because we need
     * coordinates... Modifying the iterator here is not great
     ','line_number':1869,'multiline':True]
