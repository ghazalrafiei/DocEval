['text':' -*-c-*- ','line_number':1,'multiline':True]
['text':' for NPY_CHAR ','line_number':6,'multiline':True]
['text':' test PyArray_IsPythonScalar, before including private py3 compat header ','line_number':46,'multiline':True]
['text':'* Function to test calling via ctypes ','line_number':65,'multiline':True]
['text':'
 * TODO:
 *  - Handle mode
 ','line_number':71,'multiline':True]
['text':'*begin repeat
 * #name = double, int#
 * #type = npy_double, npy_int#
 * #typenum = NPY_DOUBLE, NPY_INT#
 ','line_number':76,'multiline':True]
['text':'
     * For each point in itx, copy the current neighborhood into an array which
     * is appended at the output list
     ','line_number':90,'multiline':True]
['text':'*end repeat*','line_number':121,'multiline':True]
['text':'
     * For each point in itx, copy the current neighborhood into an array which
     * is appended at the output list
     ','line_number':133,'multiline':True]
['text':' Compute boundaries for the neighborhood iterator ','line_number':209,'multiline':True]
['text':' PyLong_AsSsize checks for PyLong ','line_number':217,'multiline':True]
['text':' Create the neighborhood iterator ','line_number':229,'multiline':True]
['text':'
     * For each point in itx, copy the current neighborhood into an array which
     * is appended at the output list
     ','line_number':304,'multiline':True]
['text':' Compute boundaries for the neighborhood iterator ','line_number':386,'multiline':True]
['text':' PyLong_AsSsize checks for PyLong ','line_number':394,'multiline':True]
['text':' Create the neighborhood iterator ','line_number':406,'multiline':True]
['text':' PyLong_AsSsize checks for PyLong ','line_number':421,'multiline':True]
['text':'
 * Helper to test fromstring of 0 terminated strings, as the C-API supports
 * the -1 length identifier.
 ','line_number':474,'multiline':True]
['text':'
 * Create a custom field dtype from an existing void one (and test some errors).
 * The dtypes created by this function may be not be usable (or even crash
 * while using).
 ','line_number':491,'multiline':True]
['text':' check that the result should be more or less valid ','line_number':510,'multiline':True]
['text':' Copy and then appropriate this dtype ','line_number':522,'multiline':True]
['text':' Test that we reject this, if fields was not already set ','line_number':532,'multiline':True]
['text':'
         * Test that we reject this if the type is not set to something that
         * we are pretty sure can be safely replaced.
         ','line_number':536,'multiline':True]
['text':' Fix original type in the error_path == 2 case and delete it ','line_number':547,'multiline':True]
['text':' hold on to the original (leaks a reference) ','line_number':552,'multiline':True]
['text':' set to an invalid value (as a subclass might accidentally) ','line_number':573,'multiline':True]
['text':' Reset to a NULL (good value) ','line_number':578,'multiline':True]
['text':' check no elison for avoided increfs ','line_number':590,'multiline':True]
['text':' refcount 1 array but should not be elided ','line_number':599,'multiline':True]
['text':' return original copy, should be equal to input ','line_number':603,'multiline':True]
['text':' check no elison for get from list without incref ','line_number':610,'multiline':True]
['text':' get item without increasing refcount, item may still be on the python
     * stack but above the inaccessible top ','line_number':618,'multiline':True]
['text':' used to test NPY_CHAR usage emits deprecation warning ','line_number':626,'multiline':True]
['text':' used to create array with WRITEBACKIFCOPY flag ','line_number':634,'multiline':True]
['text':' used to test WRITEBACKIFCOPY without resolution emits runtime warning ','line_number':651,'multiline':True]
['text':' calls array_dealloc even on PyPy ','line_number':665,'multiline':True]
['text':' resolve WRITEBACKIFCOPY ','line_number':669,'multiline':True]
['text':' resolve WRITEBACKIFCOPY ','line_number':681,'multiline':True]
['text':'
 * Create python string from a FLAG and or the corresponding PyBuf flag
 * for the use in get_buffer_info.
 ','line_number':693,'multiline':True]
['text':'
 * Get information for a buffer through PyBuf_GetBuffer with the
 * corresponding flags or'ed. Note that the python caller has to
 * make sure that or'ing those flags actually makes sense.
 * More information should probably be returned for future tests.
 ','line_number':712,'multiline':True]
['text':' One of the flags must match ','line_number':764,'multiline':True]
['text':'
 * Return a new array object wrapping existing C-allocated (dummy) data.
 * Such an array does not own its data (must not free it), but because it
 * wraps C data, it also has no base object. Used to test arr.flags.writeable
 * setting behaviour.
 ','line_number':801,'multiline':True]
['text':' Create an empty array (which points to a random place) ','line_number':820,'multiline':True]
['text':'
             * TODO: In principle probably needs to recursively check this,
             *       also we may allow casts to abstract dtypes at some point.
             ','line_number':849,'multiline':True]
['text':' Pass some information about this cast out! ','line_number':866,'multiline':True]
['text':'
 * Helper to test the identity cache, takes a list of values and adds
 * all to the cache except the last key/value pair.  The last value is
 * ignored, instead the last key is looked up.
 * None is returned, if the key is not found.
 * If `replace` is True, duplicate entries are ignored when adding to the
 * hashtable.
 ','line_number':899,'multiline':True]
['text':' Replace the sequence with a guaranteed fast-sequence ','line_number':940,'multiline':True]
['text':'
 * Test C-api level item getting.
 ','line_number':985,'multiline':True]
['text':'
 * Test C-api PyArray_AsCArray item getter
 ','line_number':1014,'multiline':True]
['text':' max 3-dim ','line_number':1021,'multiline':True]
['text':' PyArray_AsCArray steals a reference to this ','line_number':1042,'multiline':True]
['text':'
 * Test nditer of too large arrays using remove axis, etc.
 ','line_number':1092,'multiline':True]
['text':' Remove an axis (negative, do not remove any) ','line_number':1138,'multiline':True]
['text':' Test IterNext getting ','line_number':1146,'multiline':True]
['text':' Test Multi Index removal ','line_number':1158,'multiline':True]
['text':' Test GotoMultiIndex (just 0 hardcoded) ','line_number':1164,'multiline':True]
['text':' Test setting iterrange (hardcoded range of 0, 1) ','line_number':1170,'multiline':True]
['text':' Do nothing ','line_number':1182,'multiline':True]
['text':' Doesn't happen usually ','line_number':1342,'multiline':True]
['text':' False means negative zero ','line_number':1427,'multiline':True]
['text':'*begin repeat
 * #N = 1,2,3#
 ','line_number':1816,'multiline':True]
['text':'*end repeat*','line_number':1829,'multiline':True]
['text':'
 * npymath wrappers
 ','line_number':1864,'multiline':True]
['text':'*begin repeat
 * #name = cabs, carg#
 ','line_number':1868,'multiline':True]
['text':'*begin repeat1
 * #itype = npy_cfloat, npy_cdouble, npy_clongdouble#
 * #ITYPE = NPY_CFLOAT, NPY_CDOUBLE, NPY_CLONGDOUBLE#
 * #otype = npy_float, npy_double, npy_longdouble#
 * #OTYPE = NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE#
 * #suffix= f, , l#
 ','line_number':1872,'multiline':True]
['text':'*end repeat1*','line_number':1907,'multiline':True]
['text':'*end repeat*','line_number':1909,'multiline':True]
['text':'*begin repeat
 * #name = log10, cosh, sinh, tan, tanh#
 ','line_number':1911,'multiline':True]
['text':'*begin repeat1
 * #type = npy_float, npy_double, npy_longdouble#
 * #TYPE = NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE#
 * #suffix= f, , l#
 ','line_number':1915,'multiline':True]
['text':'*end repeat1*','line_number':1948,'multiline':True]
['text':'*end repeat*','line_number':1950,'multiline':True]
['text':'
 * For development/testing purposes, it's convenient to have access to the
 * system printf for floats. This is a very simple printf interface.
 ','line_number':1952,'multiline':True]
['text':' would be better to use lg, but not available in C90 ','line_number':1973,'multiline':True]
['text':' used to test NPY_ARRAY_ENSURENOCOPY raises ValueError ','line_number':2133,'multiline':True]
['text':'*begin repeat
 * #name = cabs, carg#
 ','line_number':2288,'multiline':True]
['text':'*begin repeat1
 * #suffix = f, , l#
 ','line_number':2292,'multiline':True]
['text':'*end repeat1*','line_number':2298,'multiline':True]
['text':'*end repeat*','line_number':2300,'multiline':True]
['text':'*begin repeat
 * #name = log10, cosh, sinh, tan, tanh#
 ','line_number':2302,'multiline':True]
['text':'*begin repeat1
 * #suffix= f, , l#
 ','line_number':2306,'multiline':True]
['text':'*end repeat1*','line_number':2312,'multiline':True]
['text':'*end repeat*','line_number':2314,'multiline':True]
['text':' Sentinel ','line_number':2351,'multiline':True]
