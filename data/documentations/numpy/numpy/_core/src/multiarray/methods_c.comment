['text':' for npy_mul_sizes_with_overflow ','line_number':20,'multiline':True]
['text':' NpyArg_ParseKeywords
 *
 * Utility function that provides the keyword parsing functionality of
 * PyArg_ParseTupleAndKeywords without having to have an args argument.
 *
 ','line_number':39,'multiline':True]
['text':'
 * Forwards a method call to a Python function while adding `self`:
 * callable(self, ...)
 ','line_number':65,'multiline':True]
['text':' Practically guaranteed NPY_MAXARGS is enough. ','line_number':75,'multiline':True]
['text':'
     * `PY_VECTORCALL_ARGUMENTS_OFFSET` seems never set, probably `args[-1]`
     * is always `self` but do not rely on it unless Python documents that.
     ','line_number':78,'multiline':True]
['text':'
             * If this fails Python uses `PY_VECTORCALL_ARGUMENTS_OFFSET` and
             * we should probably add a fast-path for that (hopefully almost)
             * always taken.
             ','line_number':88,'multiline':True]
['text':'
 * Forwards an ndarray method to the function numpy._core._methods.<name>(...),
 * caching the callable in a local static variable. Note that the
 * initialization is not thread-safe, but relies on the CPython GIL to
 * be correct.
 ','line_number':107,'multiline':True]
['text':' this matches the unpacking behavior of ufuncs ','line_number':143,'multiline':True]
['text':' If user specified a positional argument, guess whether it
       represents a type or a dtype for backward compatibility. ','line_number':264,'multiline':True]
['text':' type specified? ','line_number':267,'multiline':True]
['text':' this matches the unpacking behavior of ufuncs ','line_number':316,'multiline':True]
['text':' this matches the unpacking behavior of ufuncs ','line_number':343,'multiline':True]
['text':'NUMPY_API
  Get a subset of bytes from each element of the array
  steals reference to typed, must not be NULL
','line_number':378,'multiline':True]
['text':' check that we are not reinterpreting memory containing Objects. ','line_number':402,'multiline':True]
['text':' only returns True or raises ','line_number':411,'multiline':True]
['text':' check that values are valid ','line_number':423,'multiline':True]
['text':'NUMPY_API
  Set a subset of bytes from each element of the array
  steals reference to dtype, must not be NULL
','line_number':469,'multiline':True]
['text':' getfield returns a view we can write to ','line_number':497,'multiline':True]
['text':' This doesn't change the descriptor just the actual data...
 ','line_number':530,'multiline':True]
['text':'NUMPY_API','line_number':533,'multiline':True]
['text':' Use iterator ','line_number':551,'multiline':True]
['text':' 2020-03-30, NumPy 1.19 ','line_number':626,'multiline':True]
['text':' Like PyArray_ToFile but takes the file as a python object ','line_number':633,'multiline':True]
['text':' This should grow an order= keyword to be consistent
 ','line_number':656,'multiline':True]
['text':' If there is a tuple as a single argument, treat it as the argument ','line_number':715,'multiline':True]
['text':' Special case of C-order flat indexing... :| ','line_number':733,'multiline':True]
['text':' Convert the flat index into a multi-index ','line_number':747,'multiline':True]
['text':' A multi-index tuple ','line_number':753,'multiline':True]
['text':'
     * TODO: UNSAFE default for compatibility, I think
     *       switching to SAME_KIND by default would be good.
     ','line_number':778,'multiline':True]
['text':' If it is not a concrete dtype instance find the best one for the array ','line_number':801,'multiline':True]
['text':'
     * If the memory layout matches and, data types are equivalent,
     * and it's not a subtype if subok is False, then we
     * can skip the copy.
     ','line_number':811,'multiline':True]
['text':' This steals the reference to dtype ','line_number':849,'multiline':True]
['text':' Decrease the number of dimensions removing subarray ones again ','line_number':858,'multiline':True]
['text':' default sub-type implementation ','line_number':879,'multiline':True]
['text':'
         * E.g. when called from Python, the type may already be correct.
         * Typical ufunc paths previously got here through __array_prepare__.
         ','line_number':923,'multiline':True]
['text':' convert to PyArray_Type ','line_number':945,'multiline':True]
['text':'
 * Check whether any of the input and output args have a non-default
 * __array_ufunc__ method. Return 1 if so, 0 if not, and -1 on error.
 *
 * This function primarily exists to help ndarray.__array_ufunc__ determine
 * whether it can support a ufunc (which is the case only if none of the
 * operands have an override).  Thus, unlike in umath/override.c, the
 * actual overrides are not needed and one can stop looking once one is found.
 ','line_number':980,'multiline':True]
['text':' check inputs ','line_number':998,'multiline':True]
['text':' check outputs, if any ','line_number':1018,'multiline':True]
['text':' check where if it exists ','line_number':1030,'multiline':True]
['text':' ndarray cannot handle overrides itself ','line_number':1064,'multiline':True]
['text':'
     * TODO(?): call into UFunc code at a later point, since here arguments are
     * already normalized and we do not have to look for __array_ufunc__ again.
     ','line_number':1077,'multiline':True]
['text':' no need to DECREF borrowed references ufunc and method_name ','line_number':1090,'multiline':True]
['text':' Separate from array_copy to make __copy__ preserve Fortran contiguity. ','line_number':1134,'multiline':True]
['text':' this matches the unpacking behavior of ufuncs ','line_number':1225,'multiline':True]
['text':' call deepcopy on this argument ','line_number':1553,'multiline':True]
['text':' If the array contains objects, need to deepcopy them as well ','line_number':1593,'multiline':True]
['text':' Convert Array to flat list (using getitem) ','line_number':1655,'multiline':True]
['text':' version number of this pickle type. Increment if we need to
       change the format. Be sure to handle the old versions in
       array_setstate. ','line_number':1708,'multiline':True]
['text':' Return a tuple of (callable object, arguments, object's state) ','line_number':1716,'multiline':True]
['text':'  We will put everything in the object's state, so that on UnPickle
        it can use the string object as memory without a copy ','line_number':1717,'multiline':True]
['text':' dummy data-type ','line_number':1737,'multiline':True]
['text':' Now fill in object's state.  This is a tuple with
       5 arguments

       1) an integer with the pickle version.
       2) a Tuple giving the shape
       3) a PyArray_Descr Object (with correct bytorder set)
       4) a npy_bool stating if Fortran or not
       5) a Python object representing the data (a string, or
       a list or any user-defined object).

       Notice because Python does not describe a mechanism to write
       raw data to the pickle, this performs a copy to a string first
       This issue is now addressed in protocol 5, where a buffer is serialized
       instead of a string,
    ','line_number':1740,'multiline':True]
['text':' We do not call array_reduce directly but instead lookup and call
     * the __reduce__ method to make sure that it's possible to customize
     * pickling in sub-classes. ','line_number':1792,'multiline':True]
['text':' we expect protocol 5 to be available in Python 3.8 ','line_number':1817,'multiline':True]
['text':' Construct a PickleBuffer of the array ','line_number':1828,'multiline':True]
['text':' if the array if Fortran-contiguous and not C-contiguous,
         * the PickleBuffer instance will hold a view on the transpose
         * of the initial array, that is C-contiguous. ','line_number':1832,'multiline':True]
['text':' Some arrays may refuse to export a buffer, in which case
         * just fall back on regular __reduce_ex__ implementation
         * (gh-12745).
         ','line_number':1852,'multiline':True]
['text':' Get the _frombuffer() function for reconstruction ','line_number':1860,'multiline':True]
['text':' The PickleBuffer class from version 5 of the pickle protocol
         * can only be used for arrays backed by a contiguous data buffer.
         * For all other cases we fallback to the generic array_reduce
         * method that involves using a temporary bytes allocation. ','line_number':1899,'multiline':True]
['text':' This will free any memory associated with a and
       use the string in setstate as the (writeable) memory.
    ','line_number':1927,'multiline':True]
['text':' If we ever need another pickle format, increment the version
       number. But we should still be able to handle the old versions.
       We've only got one right now. ','line_number':1947,'multiline':True]
['text':'
     * Reassigning fa->descr messes with the reallocation strategy,
     * since fa could be a 0-d or scalar, and then
     * PyDataMem_UserFREE will be confused
     ','line_number':1957,'multiline':True]
['text':'
     * We should do two things here:
     * 1. Validate the input, that it is neither invalid, nor "too big"
     *    ("too big" ignores dimensios of size 0).
     * 2. Find `PyArray_NBYTES` of the result, as this is what we may need to
     *    copy from the pickled data (may not match allocation currently if 0).
     * Compare with `PyArray_NewFromDescr`, raise MemoryError for simplicity.
     ','line_number':1973,'multiline':True]
['text':' Backward compatibility with Python 2 NumPy pickles ','line_number':2017,'multiline':True]
['text':' More informative error message ','line_number':2024,'multiline':True]
['text':'
         * Allocation will never be 0, see comment in ctors.c
         * line 820
         ','line_number':2053,'multiline':True]
['text':' This can happen if someone arbitrarily sets NPY_ARRAY_OWNDATA ','line_number':2059,'multiline':True]
['text':' Bytes should always be considered immutable, but we just grab the
         * pointer if they are large, to save memory. ','line_number':2099,'multiline':True]
['text':' Store the handler in case the default is modified ','line_number':2106,'multiline':True]
['text':' byte-swap on pickle-read ','line_number':2121,'multiline':True]
['text':' The handlers should never be called in this case ','line_number':2157,'multiline':True]
['text':' Store the functions in case the default handler is modified ','line_number':2173,'multiline':True]
['text':'NUMPY_API','line_number':2199,'multiline':True]
['text':'NUMPY_API','line_number':2222,'multiline':True]
['text':' object + dimension and strides ','line_number':2259,'multiline':True]
['text':' this matches the unpacking behavior of ufuncs ','line_number':2443,'multiline':True]
['text':' this matches the unpacking behavior of ufuncs ','line_number':2488,'multiline':True]
['text':' this matches the unpacking behavior of ufuncs ','line_number':2587,'multiline':True]
['text':'
                 * _IsWritable (and PyArray_UpdateFlags) allows flipping this,
                 * although the C-Api user who created the array may have
                 * chosen to make it non-writable for a good reason, so
                 * deprecate.
                 ','line_number':2660,'multiline':True]
['text':' 2017-05-03, NumPy 1.17.0 ','line_number':2669,'multiline':True]
['text':' let python try calling __complex__ on the object. ','line_number':2723,'multiline':True]
['text':' for subtypes ','line_number':2788,'multiline':True]
['text':' for the sys module ','line_number':2805,'multiline':True]
['text':' for the copy module ','line_number':2810,'multiline':True]
['text':' for Pickling ','line_number':2818,'multiline':True]
['text':' for typing; requires python >= 3.9 ','line_number':2843,'multiline':True]
['text':' Original and Extended methods added 2005 ','line_number':2848,'multiline':True]
['text':' For data interchange between libraries','line_number':3002,'multiline':False]
['text':' For Array API compatibility','line_number':3011,'multiline':False]
['text':' sentinel ','line_number':3016,'multiline':True]
