['text':'
 * This file implements the API functions for NumPy's nditer that
 * are specialized using the templating system.
 *
 * Copyright (c) 2010-2011 by Mark Wiebe (mwwiebe@gmail.com)
 * The University of British Columbia
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]
['text':' Indicate that this .c file is allowed to include the header ','line_number':11,'multiline':True]
['text':' SPECIALIZED iternext functions that handle the non-buffering part ','line_number':15,'multiline':True]
['text':'*begin repeat
 * #const_itflags = 0,
 *                  NPY_ITFLAG_HASINDEX,
 *                  NPY_ITFLAG_EXLOOP,
 *                  NPY_ITFLAG_RANGE,
 *                  NPY_ITFLAG_RANGE|NPY_ITFLAG_HASINDEX#
 * #tag_itflags = 0, IND, NOINN, RNG, RNGuIND#
 ','line_number':17,'multiline':True]
['text':'*begin repeat1
 * #const_ndim = 1, 2, NPY_MAXDIMS#
 * #tag_ndim = 1, 2, ANY#
 ','line_number':25,'multiline':True]
['text':'*begin repeat2
 * #const_nop = 1, 2, NPY_MAXDIMS#
 * #tag_nop = 1, 2, ANY#
 ','line_number':29,'multiline':True]
['text':' Specialized iternext (@const_itflags@,@tag_ndim@,@tag_nop@) ','line_number':34,'multiline':True]
['text':' When ranged iteration is enabled, use the iterindex ','line_number':62,'multiline':True]
['text':' Increment index 0 ','line_number':76,'multiline':True]
['text':' Increment pointer 0 ','line_number':78,'multiline':True]
['text':' Finished when the index equals the shape ','line_number':87,'multiline':True]
['text':' Increment index 1 ','line_number':102,'multiline':True]
['text':' Increment pointer 1 ','line_number':104,'multiline':True]
['text':' Reset the 1st index to 0 ','line_number':110,'multiline':True]
['text':' Reset the 1st pointer to the value of the 2nd ','line_number':112,'multiline':True]
['text':' Increment index 2 ','line_number':124,'multiline':True]
['text':' Increment pointer 2 ','line_number':126,'multiline':True]
['text':' Reset the 1st and 2nd indices to 0 ','line_number':132,'multiline':True]
['text':' Reset the 1st and 2nd pointers to the value of the 3rd ','line_number':135,'multiline':True]
['text':' Increment the index ','line_number':145,'multiline':True]
['text':' Increment the pointer ','line_number':147,'multiline':True]
['text':' Reset the indices and pointers of all previous axisdatas ','line_number':154,'multiline':True]
['text':' Reset the index to 0 ','line_number':158,'multiline':True]
['text':' Reset the pointer to the updated value ','line_number':160,'multiline':True]
['text':' ndim != 2 ','line_number':173,'multiline':True]
['text':' ndim != 1 ','line_number':175,'multiline':True]
['text':'*end repeat2*','line_number':178,'multiline':True]
['text':'*end repeat1*','line_number':179,'multiline':True]
['text':'*end repeat*','line_number':180,'multiline':True]
['text':'*begin repeat
 * #const_nop = 1, 2, 3, 4, NPY_MAXDIMS#
 * #tag_nop = 1, 2, 3, 4, ANY#
 ','line_number':183,'multiline':True]
['text':'
 * Iternext function that handles the reduction buffering part.  This
 * is done with a double loop to avoid frequent re-buffering.
 ','line_number':188,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':196,'multiline':True]
['text':'
     * If the iterator handles the inner loop, need to increment all
     * the indices and pointers
     ','line_number':212,'multiline':True]
['text':' Increment within the buffer ','line_number':217,'multiline':True]
['text':' The outer increment for the reduce double loop ','line_number':234,'multiline':True]
['text':' Save the previously used data pointers ','line_number':247,'multiline':True]
['text':' Write back to the arrays ','line_number':251,'multiline':True]
['text':' Check if we're past the end ','line_number':257,'multiline':True]
['text':' Increment to the next buffer ','line_number':262,'multiline':True]
['text':' Prepare the next buffers and set iterend/size ','line_number':267,'multiline':True]
['text':'*end repeat*','line_number':276,'multiline':True]
['text':' iternext function that handles the buffering part ','line_number':278,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':283,'multiline':True]
['text':'
     * If the iterator handles the inner loop, need to increment all
     * the indices and pointers
     ','line_number':288,'multiline':True]
['text':' Increment within the buffer ','line_number':293,'multiline':True]
['text':' Write back to the arrays ','line_number':311,'multiline':True]
['text':' Check if we're past the end ','line_number':317,'multiline':True]
['text':' Increment to the next buffer ','line_number':322,'multiline':True]
['text':' Prepare the next buffers and set iterend/size ','line_number':327,'multiline':True]
['text':'*end repeat2*','line_number':336,'multiline':True]
['text':'*end repeat1*','line_number':337,'multiline':True]
['text':'*end repeat*','line_number':338,'multiline':True]
['text':' Specialization of iternext for when the iteration size is 1 ','line_number':340,'multiline':True]
['text':'NUMPY_API
 * Compute the specialized iteration function for an iterator
 *
 * If errmsg is non-NULL, it should point to a variable which will
 * receive the error message, and no Python exception will be set.
 * This is so that the function can be called from code not holding
 * the GIL.
 ','line_number':347,'multiline':True]
['text':'
     * When there is just one iteration and buffering is disabled
     * the iternext function is very simple.
     ','line_number':372,'multiline':True]
['text':'
     * If buffering is enabled.
     ','line_number':380,'multiline':True]
['text':'
     * Ignore all the flags that don't affect the iterator memory
     * layout or the iternext function.  Currently only HASINDEX,
     * EXLOOP, and RANGE affect them here.
     ','line_number':403,'multiline':True]
['text':' Switch statements let the compiler optimize this most effectively ','line_number':410,'multiline':True]
['text':'
     * The combinations HASINDEX|EXLOOP and RANGE|EXLOOP are excluded
     * by the New functions
     ','line_number':412,'multiline':True]
['text':'*begin repeat
 * #const_itflags = 0,
 *                  NPY_ITFLAG_HASINDEX,
 *                  NPY_ITFLAG_EXLOOP,
 *                  NPY_ITFLAG_RANGE,
 *                  NPY_ITFLAG_RANGE|NPY_ITFLAG_HASINDEX#
 * #tag_itflags = 0, IND, NOINN, RNG, RNGuIND#
 ','line_number':416,'multiline':True]
['text':'*begin repeat1
 * #const_ndim = 1, 2#
 * #tag_ndim = 1, 2#
 ','line_number':426,'multiline':True]
['text':'*begin repeat2
 * #const_nop = 1, 2#
 * #tag_nop = 1, 2#
 ','line_number':432,'multiline':True]
['text':'*end repeat2*','line_number':438,'multiline':True]
['text':' Not specialized on nop ','line_number':439,'multiline':True]
['text':'*end repeat1*','line_number':443,'multiline':True]
['text':' Not specialized on ndim ','line_number':444,'multiline':True]
['text':'*begin repeat1
 * #const_nop = 1, 2#
 * #tag_nop = 1, 2#
 ','line_number':447,'multiline':True]
['text':'*end repeat1*','line_number':453,'multiline':True]
['text':' Not specialized on nop ','line_number':454,'multiline':True]
['text':'*end repeat*','line_number':459,'multiline':True]
['text':' The switch above should have caught all the possibilities. ','line_number':461,'multiline':True]
['text':' SPECIALIZED getindex functions ','line_number':476,'multiline':True]
['text':'*begin repeat
 * #const_itflags = 0,
 *    NPY_ITFLAG_HASINDEX,
 *    NPY_ITFLAG_IDENTPERM,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_IDENTPERM,
 *    NPY_ITFLAG_NEGPERM,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_NEGPERM,
 *    NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_IDENTPERM|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_IDENTPERM|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_NEGPERM|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_NEGPERM|NPY_ITFLAG_BUFFER#
 * #tag_itflags = 0, IND, IDP, INDuIDP, NEGP, INDuNEGP,
 *                BUF, INDuBUF, IDPuBUF, INDuIDPuBUF, NEGPuBUF, INDuNEGPuBUF#
 ','line_number':478,'multiline':True]
['text':' If the perm entry is negative, reverse the index ','line_number':525,'multiline':True]
['text':' not ident perm ','line_number':532,'multiline':True]
['text':'*end repeat*','line_number':534,'multiline':True]
['text':'NUMPY_API
 * Compute a specialized get_multi_index function for the iterator
 *
 * If errmsg is non-NULL, it should point to a variable which will
 * receive the error message, and no Python exception will be set.
 * This is so that the function can be called from code not holding
 * the GIL.
 ','line_number':536,'multiline':True]
['text':' These flags must be correct ','line_number':551,'multiline':True]
['text':'
     * Only these flags affect the iterator memory layout or
     * the get_multi_index behavior. IDENTPERM and NEGPERM are mutually
     * exclusive, so that reduces the number of cases slightly.
     ','line_number':581,'multiline':True]
['text':'*begin repeat
 * #const_itflags = 0,
 *    NPY_ITFLAG_HASINDEX,
 *    NPY_ITFLAG_IDENTPERM,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_IDENTPERM,
 *    NPY_ITFLAG_NEGPERM,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_NEGPERM,
 *    NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_IDENTPERM|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_IDENTPERM|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_NEGPERM|NPY_ITFLAG_BUFFER,
 *    NPY_ITFLAG_HASINDEX|NPY_ITFLAG_NEGPERM|NPY_ITFLAG_BUFFER#
 * #tag_itflags = 0, IND, IDP, INDuIDP, NEGP, INDuNEGP,
 *                BUF, INDuBUF, IDPuBUF, INDuIDPuBUF, NEGPuBUF, INDuNEGPuBUF#
 ','line_number':592,'multiline':True]
['text':'*end repeat*','line_number':610,'multiline':True]
['text':' The switch above should have caught all the possibilities. ','line_number':612,'multiline':True]
