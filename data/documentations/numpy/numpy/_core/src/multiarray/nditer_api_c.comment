['text':'
 * This file implements most of the main API functions of NumPy's nditer.
 * This excludes functions specialized using the templating system.
 *
 * Copyright (c) 2010-2011 by Mark Wiebe (mwwiebe@gmail.com)
 * The University of British Columbia
 *
 * Copyright (c) 2011 Enthought, Inc
 *
 * See LICENSE.txt for the license.
 ','line_number':1,'multiline':True]
['text':' Allow this .c file to include nditer_impl.h ','line_number':14,'multiline':True]
['text':' Internal helper functions private to this file ','line_number':22,'multiline':True]
['text':'NUMPY_API
 * Removes an axis from iteration. This requires that NPY_ITER_MULTI_INDEX
 * was set for iterator creation, and does not work if buffering is
 * enabled. This function also resets the iterator to its initial state.
 *
 * Returns NPY_SUCCEED or NPY_FAIL.
 ','line_number':28,'multiline':True]
['text':' Reverse axis, since the iterator treats them that way ','line_number':74,'multiline':True]
['text':' First find the axis in question ','line_number':77,'multiline':True]
['text':' If this is it, and it's iterated forward, done ','line_number':79,'multiline':True]
['text':' If this is it, but it's iterated backward, must reverse the axis ','line_number':84,'multiline':True]
['text':'
             * Adjust baseoffsets and resetbaseptr back to the start of
             * this axis.
             ','line_number':91,'multiline':True]
['text':' Adjust the permutation ','line_number':112,'multiline':True]
['text':' Shift all the axisdata structures by one ','line_number':128,'multiline':True]
['text':' Adjust the iteration size and reset iterend ','line_number':132,'multiline':True]
['text':' Shrink the iterator ','line_number':145,'multiline':True]
['text':' If it is now 0-d fill the singleton dimension ','line_number':147,'multiline':True]
['text':'NUMPY_API
 * Removes multi-index support from an iterator.
 *
 * Returns NPY_SUCCEED or NPY_FAIL.
 ','line_number':160,'multiline':True]
['text':' Make sure the iterator is reset ','line_number':170,'multiline':True]
['text':'NUMPY_API
 * Removes the inner loop handling (so HasExternalLoop returns true)
 ','line_number':189,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':196,'multiline':True]
['text':' Check conditions under which this can be done ','line_number':199,'multiline':True]
['text':' Set the flag ','line_number':213,'multiline':True]
['text':'
         * Check whether we can apply the single iteration
         * optimization to the iternext function.
         ','line_number':218,'multiline':True]
['text':' Reset the iterator ','line_number':230,'multiline':True]
['text':'NUMPY_API
 * Resets the iterator to its initial state
 *
 * The use of errmsg is discouraged, it cannot be guaranteed that the GIL
 * will not be grabbed on casting errors even when this is passed.
 *
 * If errmsg is non-NULL, it should point to a variable which will
 * receive the error message, and no Python exception will be set.
 * This is so that the function can be called from code not holding
 * the GIL. Note that cast errors may still lead to the GIL being
 * grabbed temporarily.
 ','line_number':239,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':255,'multiline':True]
['text':' If buffer allocation was delayed, do it now ','line_number':261,'multiline':True]
['text':'
             * If the iterindex is already right, no need to
             * do anything (and no cast error has previously occurred).
             ','line_number':272,'multiline':True]
['text':' Prepare the next buffers and set iterend/size ','line_number':294,'multiline':True]
['text':'NUMPY_API
 * Resets the iterator to its initial state, with new base data pointers.
 * This function requires great caution.
 *
 * If errmsg is non-NULL, it should point to a variable which will
 * receive the error message, and no Python exception will be set.
 * This is so that the function can be called from code not holding
 * the GIL. Note that cast errors may still lead to the GIL being
 * grabbed temporarily.
 ','line_number':306,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':320,'multiline':True]
['text':' If buffer allocation was delayed, do it now ','line_number':327,'multiline':True]
['text':' The new data pointers for resetting ','line_number':344,'multiline':True]
['text':' Prepare the next buffers and set iterend/size ','line_number':352,'multiline':True]
['text':'NUMPY_API
 * Resets the iterator to a new iterator index range
 *
 * If errmsg is non-NULL, it should point to a variable which will
 * receive the error message, and no Python exception will be set.
 * This is so that the function can be called from code not holding
 * the GIL. Note that cast errors may still lead to the GIL being
 * grabbed temporarily.
 ','line_number':364,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':378,'multiline':True]
['text':'int nop = NIT_NOP(iter);','line_number':379,'multiline':True]
['text':'NUMPY_API
 * Sets the iterator to the specified multi-index, which must have the
 * correct number of entries for 'ndim'.  It is only valid
 * when NPY_ITER_MULTI_INDEX was passed to the constructor.  This operation
 * fails if the multi-index is out of bounds.
 *
 * Returns NPY_SUCCEED on success, NPY_FAIL on failure.
 ','line_number':433,'multiline':True]
['text':' Compute the iterindex corresponding to the multi-index ','line_number':478,'multiline':True]
['text':' If the perm entry is negative, reverse the index ','line_number':487,'multiline':True]
['text':' Bounds-check this index ','line_number':494,'multiline':True]
['text':'NUMPY_API
 * If the iterator is tracking an index, sets the iterator
 * to the specified index.
 *
 * Returns NPY_SUCCEED on success, NPY_FAIL on failure.
 ','line_number':525,'multiline':True]
['text':' Compute the iterindex corresponding to the flat_index ','line_number':573,'multiline':True]
['text':' Extract the index from the flat_index ','line_number':582,'multiline':True]
['text':' Add its contribution to iterindex ','line_number':593,'multiline':True]
['text':'NUMPY_API
 * Sets the iterator position to the specified iterindex,
 * which matches the iteration order of the iterator.
 *
 * Returns NPY_SUCCEED on success, NPY_FAIL on failure.
 ','line_number':613,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':623,'multiline':True]
['text':' Check if the new iterindex is already within the buffer ','line_number':650,'multiline':True]
['text':' Start the buffer at the provided iterindex ','line_number':666,'multiline':True]
['text':' Write back to the arrays ','line_number':668,'multiline':True]
['text':' Prepare the next buffers and set iterend/size ','line_number':675,'multiline':True]
['text':'NUMPY_API
 * Gets the current iteration index
 ','line_number':688,'multiline':True]
['text':' iterindex is only used if NPY_ITER_RANGED or NPY_ITER_BUFFERED was set ','line_number':698,'multiline':True]
['text':'NUMPY_API
 * Whether the buffer allocation is being delayed
 ','line_number':725,'multiline':True]
['text':'NUMPY_API
 * Whether the iterator handles the inner loop
 ','line_number':734,'multiline':True]
['text':'NUMPY_API
 * Whether the iterator is tracking a multi-index
 ','line_number':743,'multiline':True]
['text':'NUMPY_API
 * Whether the iterator is tracking an index
 ','line_number':752,'multiline':True]
['text':'NUMPY_API
 * Checks to see whether this is the first time the elements
 * of the specified reduction operand which the iterator points at are
 * being seen for the first time. The function returns
 * a reasonable answer for reduction operands and when buffering is
 * disabled. The answer may be incorrect for buffered non-reduction
 * operands.
 *
 * This function is intended to be used in EXTERNAL_LOOP mode only,
 * and will produce some wrong answers when that mode is not enabled.
 *
 * If this function returns true, the caller should also
 * check the inner loop stride of the operand, because if
 * that stride is 0, then only the first element of the innermost
 * external loop is being visited for the first time.
 *
 * WARNING: For performance reasons, 'iop' is not bounds-checked,
 *          it is not confirmed that 'iop' is actually a reduction
 *          operand, and it is not confirmed that EXTERNAL_LOOP
 *          mode is enabled. These checks are the responsibility of
 *          the caller, and should be done outside of any inner loops.
 ','line_number':761,'multiline':True]
['text':'
         * If this is a reduction dimension and the coordinate
         * is not at the start, it's definitely not the first visit
         ','line_number':800,'multiline':True]
['text':'
     * In reduction buffering mode, there's a double loop being
     * tracked in the buffer part of the iterator data structure.
     * We only need to check the outer level of this two-level loop,
     * because of the requirement that EXTERNAL_LOOP be enabled.
     ','line_number':811,'multiline':True]
['text':' The outer reduce loop ','line_number':819,'multiline':True]
['text':'NUMPY_API
 * Whether the iteration could be done with no buffering.
 ','line_number':829,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':836,'multiline':True]
['text':' If any operand requires a cast, buffering is mandatory ','line_number':847,'multiline':True]
['text':'NUMPY_API
 * Whether the iteration loop, and in particular the iternext()
 * function, needs API access.  If this is true, the GIL must
 * be retained while iterating.
 *
 * NOTE: Internally (currently), `NpyIter_GetTransferFlags` will
 *       additionally provide information on whether floating point errors
 *       may be given during casts.  The flags only require the API use
 *       necessary for buffering though.  So an iterate which does not require
 *       buffering may indicate `NpyIter_IterationNeedsAPI`, but not include
 *       the flag in `NpyIter_GetTransferFlags`.
 ','line_number':857,'multiline':True]
['text':'
 * Fetch the ArrayMethod (runtime) flags for all "transfer functions' (i.e.
 * copy to buffer/casts).
 *
 * TODO: This should be public API, but that only makes sense when the
 *       ArrayMethod API is made public.
 ','line_number':876,'multiline':True]
['text':'NUMPY_API
 * Gets the number of dimensions being iterated
 ','line_number':890,'multiline':True]
['text':'NUMPY_API
 * Gets the number of operands being iterated
 ','line_number':899,'multiline':True]
['text':'NUMPY_API
 * Gets the number of elements being iterated
 ','line_number':908,'multiline':True]
['text':'NUMPY_API
 * Whether the iterator is buffered
 ','line_number':917,'multiline':True]
['text':'NUMPY_API
 * Whether the inner loop can grow if buffering is unneeded
 ','line_number':926,'multiline':True]
['text':'NUMPY_API
 * Gets the size of the buffer, or 0 if buffering is not enabled
 ','line_number':935,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':942,'multiline':True]
['text':'NUMPY_API
 * Gets the range of iteration indices being iterated
 ','line_number':955,'multiline':True]
['text':'NUMPY_API
 * Gets the broadcast shape if a multi-index is being tracked by the iterator,
 * otherwise gets the shape of the iteration as Fortran-order
 * (fastest-changing index first).
 *
 * The reason Fortran-order is returned when a multi-index
 * is not enabled is that this is providing a direct view into how
 * the iterator traverses the n-dimensional space. The iterator organizes
 * its memory from fastest index to slowest index, and when
 * a multi-index is enabled, it uses a permutation to recover the original
 * order.
 *
 * Returns NPY_SUCCEED or NPY_FAIL.
 ','line_number':966,'multiline':True]
['text':'NUMPY_API
 * Builds a set of strides which are the same as the strides of an
 * output array created using the NPY_ITER_ALLOCATE flag, where NULL
 * was passed for op_axes.  This is for data packed contiguously,
 * but not necessarily in C or Fortran order. This should be used
 * together with NpyIter_GetShape and NpyIter_GetNDim.
 *
 * A use case for this function is to match the shape and layout of
 * the iterator and tack on one or more dimensions.  For example,
 * in order to generate a vector per input value for a numerical gradient,
 * you pass in ndim*itemsize for itemsize, then add another dimension to
 * the end with size ndim and stride itemsize.  To do the Hessian matrix,
 * you do the same thing but add two dimensions, or take advantage of
 * the symmetry and pack it into 1 dimension with a particular encoding.
 *
 * This function may only be called if the iterator is tracking a multi-index
 * and if NPY_ITER_DONT_NEGATE_STRIDES was used to prevent an axis from
 * being iterated in reverse order.
 *
 * If an array is created with this method, simply adding 'itemsize'
 * for each iteration will traverse the new array matching the
 * iterator.
 *
 * Returns NPY_SUCCEED or NPY_FAIL.
 ','line_number':1013,'multiline':True]
['text':'NUMPY_API
 * Get the array of data pointers (1 per object being iterated)
 *
 * This function may be safely called without holding the Python GIL.
 ','line_number':1082,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1091,'multiline':True]
['text':'NUMPY_API
 * Get the array of data pointers (1 per object being iterated),
 * directly into the arrays (never pointing to a buffer), for starting
 * unbuffered iteration. This always returns the addresses for the
 * iterator position as reset to iterator index 0.
 *
 * These pointers are different from the pointers accepted by
 * NpyIter_ResetBasePointers, because the direction along some
 * axes may have been reversed, requiring base offsets.
 *
 * This function may be safely called without holding the Python GIL.
 ','line_number':1104,'multiline':True]
['text':'npy_uint32 itflags = NIT_ITFLAGS(iter);','line_number':1119,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1120,'multiline':True]
['text':'NUMPY_API
 * Get the array of data type pointers (1 per object being iterated)
 ','line_number':1126,'multiline':True]
['text':'npy_uint32 itflags = NIT_ITFLAGS(iter);','line_number':1132,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1133,'multiline':True]
['text':'int nop = NIT_NOP(iter);','line_number':1134,'multiline':True]
['text':'NUMPY_API
 * Get the array of objects being iterated
 ','line_number':1139,'multiline':True]
['text':'npy_uint32 itflags = NIT_ITFLAGS(iter);','line_number':1145,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1146,'multiline':True]
['text':'NUMPY_API
 * Returns a view to the i-th object with the iterator's internal axes
 ','line_number':1152,'multiline':True]
['text':' Don't provide views if buffering is enabled ','line_number':1176,'multiline':True]
['text':' Retrieve the shape and strides from the axisdata ','line_number':1190,'multiline':True]
['text':'NUMPY_API
 * Get a pointer to the index, if it is being tracked
 ','line_number':1207,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1214,'multiline':True]
['text':' The index is just after the data pointers ','line_number':1220,'multiline':True]
['text':'NUMPY_API
 * Gets an array of read flags (1 per object being iterated)
 ','line_number':1228,'multiline':True]
['text':'npy_uint32 itflags = NIT_ITFLAGS(iter);','line_number':1234,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1235,'multiline':True]
['text':'NUMPY_API
 * Gets an array of write flags (1 per object being iterated)
 ','line_number':1245,'multiline':True]
['text':'npy_uint32 itflags = NIT_ITFLAGS(iter);','line_number':1251,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1252,'multiline':True]
['text':'NUMPY_API
 * Get the array of strides for the inner loop (when HasExternalLoop is true)
 *
 * This function may be safely called without holding the Python GIL.
 ','line_number':1263,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1272,'multiline':True]
['text':'NUMPY_API
 * Gets the array of strides for the specified axis.
 * If the iterator is tracking a multi-index, gets the strides
 * for the axis specified, otherwise gets the strides for
 * the iteration axis as Fortran order (fastest-changing axis first).
 *
 * Returns NULL if an error occurs.
 ','line_number':1285,'multiline':True]
['text':' Reverse axis, since the iterator treats them that way ','line_number':1311,'multiline':True]
['text':' First find the axis in question ','line_number':1314,'multiline':True]
['text':'NUMPY_API
 * Get an array of strides which are fixed.  Any strides which may
 * change during iteration receive the value NPY_MAX_INTP.  Once
 * the iterator is ready to iterate, call this to get the strides
 * which will always be fixed in the inner loop, then choose optimized
 * inner loop functions which take advantage of those fixed strides.
 *
 * This function may be safely called without holding the Python GIL.
 ','line_number':1330,'multiline':True]
['text':'
             * Operands which are always/never buffered have fixed strides,
             * and everything has fixed strides when ndim is 0 or 1
             ','line_number':1358,'multiline':True]
['text':' If it's a reduction, 0-stride inner loop may have fixed stride ','line_number':1366,'multiline':True]
['text':' If it's a reduction operand, definitely fixed stride ','line_number':1368,'multiline':True]
['text':'
                 * Otherwise it's guaranteed to be a fixed stride if the
                 * stride is 0 for all the dimensions.
                 ','line_number':1372,'multiline':True]
['text':' If all the strides were 0, the stride won't change ','line_number':1385,'multiline':True]
['text':'
             * Inner loop contiguous array means its stride won't change when
             * switching between buffering and not buffering
             ','line_number':1394,'multiline':True]
['text':'
             * Otherwise the strides can change if the operand is sometimes
             * buffered, sometimes not.
             ','line_number':1401,'multiline':True]
['text':' If there's no buffering, the strides are always fixed ','line_number':1411,'multiline':True]
['text':'NUMPY_API
 * Get a pointer to the size of the inner loop  (when HasExternalLoop is true)
 *
 * This function may be safely called without holding the Python GIL.
 ','line_number':1416,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1425,'multiline':True]
['text':'NUMPY_API
 * For debugging
 ','line_number':1439,'multiline':True]
['text':' Print the fixed strides when there's no inner loop ','line_number':1602,'multiline':True]
['text':' The HASMULTIINDEX or IDENTPERM flags do not apply after coalescing ','line_number':1692,'multiline':True]
['text':' Check that all the axes can be coalesced ','line_number':1702,'multiline':True]
['text':'
     * If the number of axes shrunk, reset the perm and
     * compress the data into the new layout.
     ','line_number':1733,'multiline':True]
['text':' Reset to an identity perm ','line_number':1740,'multiline':True]
['text':'
 * If errmsg is non-NULL, it should point to a variable which will
 * receive the error message, and no Python exception will be set.
 * This is so that the function can be called from code not holding
 * the GIL.
 ','line_number':1748,'multiline':True]
['text':'npy_uint32 itflags = NIT_ITFLAGS(iter);','line_number':1757,'multiline':True]
['text':'int ndim = NIT_NDIM(iter);','line_number':1758,'multiline':True]
['text':'
         * If we have determined that a buffer may be needed,
         * allocate one.
         ','line_number':1771,'multiline':True]
['text':'
 * This sets the AXISDATA portion of the iterator to the specified
 * iterindex, updating the pointers as well.  This function does
 * no error checking.
 ','line_number':1806,'multiline':True]
['text':'
         * Set the multi-index, from the fastest-changing to the
         * slowest-changing.
         ','line_number':1846,'multiline':True]
['text':'
         * Accumulate the successive pointers with their
         * offsets in the opposite order, starting from the
         * original data pointers.
         ','line_number':1866,'multiline':True]
['text':'
 * This gets called after the buffers have been exhausted, and
 * their data needs to be written back to the arrays.  The multi-index
 * must be positioned for the beginning of the buffer.
 ','line_number':1891,'multiline':True]
['text':' If we're past the end, nothing to copy ','line_number':1924,'multiline':True]
['text':'
         * Copy the data back to the arrays.  If the type has refs,
         * this function moves them so the buffer's refs are released.
         *
         * The flag USINGBUFFER is set when the buffer was used, so
         * only copy back when this flag is on.
         ','line_number':1941,'multiline':True]
['text':'
             * If this operand is being reduced in the inner loop,
             * its buffering stride was set to zero, and just
             * one element was copied.
             ','line_number':1958,'multiline':True]
['text':' WRITEMASKED operand ','line_number':2016,'multiline':True]
['text':'
                 * The mask pointer may be in the buffer or in
                 * the array, detect which one.
                 ','line_number':2020,'multiline':True]
['text':' Regular operand ','line_number':2042,'multiline':True]
['text':' If there's no copy back, we may have to decrement refs.  In
         * this case, the transfer is instead a function which clears
         * (DECREFs) the single input.
         *
         * The flag USINGBUFFER is set when the buffer was used, so
         * only decrement refs when this flag is on.
         ','line_number':2055,'multiline':True]
['text':' Since this should only decrement, it should never error ','line_number':2070,'multiline':True]
['text':'
 * This gets called after the iterator has been positioned to a multi-index
 * for the start of a buffer.  It decides which operands need a buffer,
 * and copies the data into the buffers.
 ','line_number':2081,'multiline':True]
['text':'
     * Have to get this flag before npyiter_checkreducesize sets
     * it for the next iteration.
     ','line_number':2112,'multiline':True]
['text':' Calculate the size if using any buffers ','line_number':2124,'multiline':True]
['text':' If last time around, the reduce loop structure was full, we reuse it ','line_number':2132,'multiline':True]
['text':'
         * Try to do make the outersize as big as possible. This allows
         * it to shrink when processing the last bit of the outer reduce loop,
         * then grow again at the beginning of the next outer reduce loop.
         ','line_number':2143,'multiline':True]
['text':' If the full transfer size doesn't fit in the buffer, truncate it ','line_number':2151,'multiline':True]
['text':'
             * If the previous time around less data was copied it may not
             * be safe to reuse the buffers even if the pointers match.
             ','line_number':2160,'multiline':True]
['text':'
     * If there are any reduction operands, we may have to make
     * the size smaller so we don't copy the same value into
     * a buffer twice, as the buffering does not have a mechanism
     * to combine values itself.
     ','line_number':2176,'multiline':True]
['text':' Calculate the maximum size if using a single stride and no buffers ','line_number':2213,'multiline':True]
['text':' Never need to buffer this operand ','line_number':2229,'multiline':True]
['text':'
                 * Should not adjust the stride - ad_strides[iop]
                 * could be zero, but strides[iop] was initialized
                 * to the first non-trivial stride.
                 ','line_number':2237,'multiline':True]
['text':' The flag NPY_OP_ITFLAG_USINGBUFFER can be ignored here ','line_number':2242,'multiline':True]
['text':' Never need to buffer this operand ','line_number':2245,'multiline':True]
['text':'
                 * Should not adjust the stride - ad_strides[iop]
                 * could be zero, but strides[iop] was initialized
                 * to the first non-trivial stride.
                 ','line_number':2250,'multiline':True]
['text':' The flag NPY_OP_ITFLAG_USINGBUFFER can be ignored here ','line_number':2255,'multiline':True]
['text':' Just a copy ','line_number':2258,'multiline':True]
['text':' Do not reuse buffer if it did not exist ','line_number':2260,'multiline':True]
['text':'
                 * No copyswap or cast was requested, so all we're
                 * doing is copying the data to fill the buffer and
                 * produce a single stride.  If the underlying data
                 * already does that, no need to copy it.
                 ','line_number':2265,'multiline':True]
['text':' Signal that the buffer is not being used ','line_number':2274,'multiline':True]
['text':' If some other op is reduced, we have a double reduce loop ','line_number':2277,'multiline':True]
['text':' Signal that the buffer is not being used ','line_number':2288,'multiline':True]
['text':' In this case, the buffer is being used ','line_number':2292,'multiline':True]
['text':' Signal that the buffer is being used ','line_number':2300,'multiline':True]
['text':' Just a copy, but with a reduction ','line_number':2304,'multiline':True]
['text':' Do not reuse buffer if it did not exist ','line_number':2306,'multiline':True]
['text':' It's all in one stride in the inner loop dimension ','line_number':2313,'multiline':True]
['text':' Signal that the buffer is not being used ','line_number':2318,'multiline':True]
['text':' It's all in one stride in the reduce outer loop ','line_number':2321,'multiline':True]
['text':' Outer reduce loop advances by one item ','line_number':2329,'multiline':True]
['text':' Signal that the buffer is not being used ','line_number':2332,'multiline':True]
['text':' In this case, the buffer is being used ','line_number':2335,'multiline':True]
['text':' Both outer and inner reduce loops have stride 0 ','line_number':2339,'multiline':True]
['text':' Outer reduce loop advances by one item ','line_number':2343,'multiline':True]
['text':' Signal that the buffer is being used ','line_number':2347,'multiline':True]
['text':' Signal that the buffer is not being used ','line_number':2357,'multiline':True]
['text':' It's all in one stride in the reduce outer loop ','line_number':2361,'multiline':True]
['text':' Outer reduce loop advances by one item ','line_number':2368,'multiline':True]
['text':' Signal that the buffer is not being used ','line_number':2371,'multiline':True]
['text':' In this case, the buffer is being used ','line_number':2374,'multiline':True]
['text':' Reduction in outer reduce loop ','line_number':2380,'multiline':True]
['text':' Advance to next items in outer reduce loop ','line_number':2384,'multiline':True]
['text':' Signal that the buffer is being used ','line_number':2388,'multiline':True]
['text':' In this case, the buffer is always being used ','line_number':2395,'multiline':True]
['text':' Signal that the buffer is being used ','line_number':2398,'multiline':True]
['text':' The buffer is being used with reduction ','line_number':2410,'multiline':True]
['text':' Both outer and inner reduce loops have stride 0 ','line_number':2416,'multiline':True]
['text':' Outer reduce loop advances by one item ','line_number':2421,'multiline':True]
['text':' Reduction in outer reduce loop ','line_number':2433,'multiline':True]
['text':' Advance to next items in outer reduce loop ','line_number':2438,'multiline':True]
['text':'
         * If OP_ITFLAG_USINGBUFFER is enabled and the read func is not NULL,
         * the buffer needs to be read.
         ','line_number':2448,'multiline':True]
['text':' If we reach here, buffering is required ','line_number':2464,'multiline':True]
['text':'
             * If this operand is being reduced in the inner loop,
             * set its buffering stride to zero, and just copy
             * one element.
             ','line_number':2467,'multiline':True]
['text':'
                         * When we're reducing a single element, and
                         * it's still the same element, don't overwrite
                         * it even when reuse reduce loops is unset.
                         * This preserves the precision of the
                         * intermediate calculation.
                         ','line_number':2483,'multiline':True]
['text':'
             * If the whole buffered loop structure remains the same,
             * and the source pointer for this data didn't change,
             * we don't have to copy the data again.
             ','line_number':2536,'multiline':True]
['text':'
             * Copy data to the buffers if necessary.
             *
             * We always copy if the operand has references. In that case
             * a "write" function must be in use that either copies or clears
             * the buffer.
             * This write from buffer call does not check for skip-transfer
             * so we have to assume the buffer is cleared.  For dtypes that
             * do not have references, we can assume that the write function
             * will leave the source (buffer) unmodified.
             ','line_number':2549,'multiline':True]
['text':'
     * If buffering wasn't needed, we can grow the inner
     * loop to as large as possible.
     *
     * TODO: Could grow REDUCE loop too with some more logic above.
     ','line_number':2578,'multiline':True]
['text':'*
 * This function clears any references still held by the buffers and should
 * only be used to discard buffers if an error occurred.
 *
 * @param iter Iterator
 ','line_number':2603,'multiline':True]
['text':' if the buffers are empty already, there is nothing to do ','line_number':2616,'multiline':True]
['text':'
     * The iterator may be using a dtype with references (as of writing this
     * means Python objects, but does not need to stay that way).
     * In that case, further cleanup may be necessary and we clear buffers
     * explicitly.
     ','line_number':2620,'multiline':True]
['text':' Cleanup any buffers with references ','line_number':2629,'multiline':True]
['text':' This should never fail; if it does write it out ','line_number':2647,'multiline':True]
['text':' Signal that the buffers are empty ','line_number':2651,'multiline':True]
['text':'
 * This checks how much space can be buffered without encountering the
 * same value twice, or for operands whose innermost stride is zero,
 * without encountering a different value.  By reducing the buffered
 * amount to this size, reductions can be safely buffered.
 *
 * Reductions are buffered with two levels of looping, to avoid
 * frequent copying to the buffers.  The return value is the over-all
 * buffer size, and when the flag NPY_ITFLAG_REDUCE is set, reduce_innersize
 * receives the size of the inner of the two levels of looping.
 *
 * The value placed in reduce_outerdim is the index into the AXISDATA
 * for where the second level of the double loop begins.
 *
 * The return value is always a multiple of the value placed in
 * reduce_innersize.
 ','line_number':2657,'multiline':True]
['text':' Default to no outer axis ','line_number':2692,'multiline':True]
['text':' If there's only one dimension, no need to calculate anything ','line_number':2695,'multiline':True]
['text':' Indicate which REDUCE operands have stride 0 in the inner loop ','line_number':2704,'multiline':True]
['text':' Initialize nonzerocoord based on the first coordinate ','line_number':2718,'multiline':True]
['text':' Go forward through axisdata, calculating the space available ','line_number':2721,'multiline':True]
['text':'
             * If a reduce stride switched from zero to non-zero, or
             * vice versa, that's the point where the data will stop
             * being the same element or will repeat, and if the
             * buffer starts with an all zero multi-index up to this
             * point, gives us the reduce_innersize.
             ','line_number':2729,'multiline':True]
['text':'
                 * If we already found more elements than count, or
                 * the starting coordinate wasn't zero, the two-level
                 * looping is unnecessary/can't be done, so return.
                 ','line_number':2742,'multiline':True]
['text':' NOTE: This is similar to the (coord != 0) case below. ','line_number':2757,'multiline':True]
['text':' If we broke out of the loop early, we found reduce_innersize ','line_number':2767,'multiline':True]
['text':'
     * If there was any non-zero coordinate, the reduction inner
     * loop doesn't fit in the buffersize, or the reduction inner loop
     * covered the entire iteration size, can't do the double loop.
     ','line_number':2783,'multiline':True]
['text':' In this case, we can't reuse the reduce loops ','line_number':2793,'multiline':True]
['text':'
         * In this case, it is only safe to reuse the buffer if the amount
         * of data copied is not more than the current axes, as is the
         * case when reuse_reduce_loops was active already.
         * It should be in principle OK when the idim loop returns immediately.
         ','line_number':2800,'multiline':True]
['text':' In this case, we can reuse the reduce loops ','line_number':2809,'multiline':True]
['text':'
     * Continue through the rest of the dimensions.  If there are
     * two separated reduction axes, we may have to cut the buffer
     * short again.
     ','line_number':2819,'multiline':True]
['text':' Indicate which REDUCE operands have stride 0 at the current level ','line_number':2827,'multiline':True]
['text':'
             * If a reduce stride switched from zero to non-zero, or
             * vice versa, that's the point where the data will stop
             * being the same element or will repeat, and if the
             * buffer starts with an all zero multi-index up to this
             * point, gives us the reduce_innersize.
             ','line_number':2847,'multiline':True]
['text':'
                 * This terminates the outer level of our double loop.
                 ','line_number':2860,'multiline':True]
