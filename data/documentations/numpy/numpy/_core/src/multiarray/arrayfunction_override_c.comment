['text':' Return the ndarray.__array_function__ method. ','line_number':14,'multiline':True]
['text':'
 * Get an object's __array_function__ method in the fastest way possible.
 * Never raises an exception. Returns NULL if the method doesn't exist.
 ','line_number':25,'multiline':True]
['text':' Fast return for ndarray ','line_number':38,'multiline':True]
['text':' TODO[gh-14801]: propagate crashes during attribute access? ','line_number':46,'multiline':True]
['text':'
 * Like list.insert(), but for C arrays of PyObject*. Skips error checking.
 ','line_number':53,'multiline':True]
['text':'
 * Collects arguments with __array_function__ and their corresponding methods
 * in the order in which they should be tried (i.e., skipping redundant types).
 * `relevant_args` is expected to have been produced by PySequence_Fast.
 * Returns the number of arguments, or -1 on failure.
 ','line_number':66,'multiline':True]
['text':' Have we seen this type before? ','line_number':86,'multiline':True]
['text':' "subclasses before superclasses, otherwise left to right" ','line_number':109,'multiline':True]
['text':'
 * Is this object ndarray.__array_function__?
 ','line_number':139,'multiline':True]
['text':'
 * Core implementation of ndarray.__array_function__. This is exposed
 * separately so we can avoid the overhead of a Python method call from
 * within `implement_array_function`.
 ','line_number':154,'multiline':True]
['text':'
 * Calls __array_function__ on the provided argument, with a fast-path for
 * ndarray.
 ','line_number':188,'multiline':True]
['text':'
 * Helper to convert from vectorcall convention, since the protocol requires
 * args and kwargs to be passed as tuple and dict explicitly.
 * We always pass a dict, so always returns it.
 ','line_number':208,'multiline':True]
['text':' No acceptable override found, raise TypeError. ','line_number':256,'multiline':True]
['text':'
 * Implements the __array_function__ protocol for C array creation functions
 * only. Added as an extension to NEP-18 in an effort to bring NEP-35 to
 * life with minimal dispatch overhead.
 *
 * The caller must ensure that `like != Py_None` or `like == NULL`.
 ','line_number':270,'multiline':True]
['text':' If `like` doesn't implement `__array_function__`, raise a `TypeError` ','line_number':288,'multiline':True]
['text':'
         * Return a borrowed reference of Py_NotImplemented to defer back to
         * the original function.
         ','line_number':296,'multiline':True]
['text':' We needs args and kwargs for __array_function__ (when not using it). ','line_number':304,'multiline':True]
['text':' The like argument must be present in the keyword arguments, remove it ','line_number':323,'multiline':True]
['text':' Fetch the actual symbol (the long way right now) ','line_number':328,'multiline':True]
['text':' This shouldn't really happen as there is only one type, but... ','line_number':349,'multiline':True]
['text':'
 * Python wrapper for get_implementing_args_and_methods, for testing purposes.
 ','line_number':365,'multiline':True]
['text':' create a Python object for implementing_args ','line_number':395,'multiline':True]
['text':' The following fields are used to clean up TypeError messages only: ','line_number':422,'multiline':True]
['text':'
         * We expect the error to be unnormalized, but maybe it isn't always
         * the case, so normalize and fetch args[0] if it isn't a string.
         ','line_number':451,'multiline':True]
['text':' replacement not successful, so restore original error ','line_number':495,'multiline':True]
['text':' __array_function__ passes args, kwargs.  These may be filled: ','line_number':510,'multiline':True]
['text':' Typical path, need to call the relevant_arg_func and unpack them ','line_number':522,'multiline':True]
['text':' For like= dispatching from Python, the public_symbol is the impl ','line_number':543,'multiline':True]
['text':'
         * We are dealing with `like=` from Python.  For simplicity, the
         * Python code passes it on as the first argument.
         ','line_number':546,'multiline':True]
['text':' do not pass the like argument ','line_number':567,'multiline':True]
['text':'
     * Handle the typical case of no overrides. This is merely an optimization
     * if some arguments are ndarray objects, but is also necessary if no
     * arguments implement __array_function__ at all (e.g., if they are all
     * built-in types).
     ','line_number':573,'multiline':True]
['text':' Directly call the actual implementation. ','line_number':587,'multiline':True]
['text':' Find args and kwargs as tuple and dict, as we pass them out: ','line_number':592,'multiline':True]
['text':'
     * Create a Python object for types.
     * We use a tuple, because it's the fastest Python collection to create
     * and has the bonus of being immutable.
     ','line_number':598,'multiline':True]
['text':' Call __array_function__ methods ','line_number':613,'multiline':True]
['text':' Try the next one ','line_number':623,'multiline':True]
['text':' Either a good result, or an exception was raised. ','line_number':628,'multiline':True]
['text':' NULL in the relevant arg function means we use `like=` ','line_number':675,'multiline':True]
['text':' Fetch names to clean up TypeErrors (show actual name) ','line_number':679,'multiline':True]
['text':' Need to be like a Python function that has arbitrary attributes ','line_number':695,'multiline':True]
['text':' Print like a normal function ','line_number':719,'multiline':True]
['text':' Act like a static method, no need to bind ','line_number':728,'multiline':True]
['text':' We have a dict, so in theory could traverse, but in practice... ','line_number':770,'multiline':True]
