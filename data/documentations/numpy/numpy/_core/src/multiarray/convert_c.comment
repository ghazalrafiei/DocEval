['text':'
 * allocate nbytes of diskspace for file fp
 * this allows the filesystem to make smarter allocation decisions and gives a
 * fast exit on not enough free space
 * returns -1 and raises exception on no space, ignores all other errors
 ','line_number':29,'multiline':True]
['text':'
     * unknown behavior on non-linux so don't try it
     * we don't want explicit zeroing to happen
     ','line_number':38,'multiline':True]
['text':' small files not worth the system call ','line_number':44,'multiline':True]
['text':' btrfs can take a while to allocate making release worthwhile ','line_number':49,'multiline':True]
['text':'
     * flush in case there might be some unexpected interactions between the
     * fallocate call and unwritten data in the descriptor
     ','line_number':51,'multiline':True]
['text':'
     * the flag "1" (=FALLOC_FL_KEEP_SIZE) is needed for the case of files
     * opened in append mode (issue #8329)
     ','line_number':56,'multiline':True]
['text':'
     * early exit on no space, other errors will also get found during fwrite
     ','line_number':63,'multiline':True]
['text':'
 * Converts a subarray of 'self' into lists, with starting data pointer
 * 'dataptr' and from dimension 'startdim' to the last dimension of 'self'.
 *
 * Returns a new reference.
 ','line_number':75,'multiline':True]
['text':' Base case ','line_number':87,'multiline':True]
['text':'NUMPY_API
 * To List
 ','line_number':114,'multiline':True]
['text':' XXX: FIXME --- add ordering argument to
   Allow Fortran ordering on write
   This will need the addition of a Fortran-order iterator.
 ','line_number':123,'multiline':True]
['text':'NUMPY_API
  To File
','line_number':128,'multiline':True]
['text':' binary data ','line_number':142,'multiline':True]
['text':' For zero-width data types there's nothing to write ','line_number':149,'multiline':True]
['text':'
             * Workaround Win64 fwrite() bug. Issue gh-2256
             * The native 64 windows runtime has this issue, the above will
             * also trigger UCRT (which doesn't), so it could be more precise.
             *
             * If you touch this code, please run this test which is so slow
             * it was removed from the test suite. Note that the original
             * failure mode involves an infinite loop during tofile()
             *
             * import tempfile, numpy as np
             * from numpy.testing import (assert_)
             * fourgbplus = 2**32 + 2**16
             * testbytes = np.arange(8, dtype=np.int8)
             * n = len(testbytes)
             * flike = tempfile.NamedTemporaryFile()
             * f = flike.file
             * np.tile(testbytes, fourgbplus // testbytes.nbytes).tofile(f)
             * flike.seek(0)
             * a = np.fromfile(f, dtype=np.int8)
             * flike.close()
             * assert_(len(a) == fourgbplus)
             * # check only start and end for speed:
             * assert_((a[:n] == testbytes).all())
             * assert_((a[-n:] == testbytes).all())
             ','line_number':161,'multiline':True]
['text':'
         * text data
         ','line_number':241,'multiline':True]
['text':'
             * This is as documented.  If we have a low precision float value
             * then it may convert to float64 and store unnecessary digits.
             * TODO: This could be fixed, by not using `arr.item()` or using
             *       the array printing/formatting functionality.
             ','line_number':249,'multiline':True]
['text':'
                 * standard writing
                 ','line_number':261,'multiline':True]
['text':'
                 * use format string
                 ','line_number':272,'multiline':True]
['text':' write separator for all but last one ','line_number':309,'multiline':True]
['text':'NUMPY_API','line_number':327,'multiline':True]
['text':'        if (PyArray_TYPE(self) == NPY_OBJECT) {
              PyErr_SetString(PyExc_ValueError, "a string for the data" \
              "in an object array is not appropriate");
              return NULL;
              }
    ','line_number':341,'multiline':True]
['text':' iterators are always in C-order ','line_number':356,'multiline':True]
['text':'NUMPY_API','line_number':389,'multiline':True]
['text':'
     * If we knew that the output array has at least one element, we would
     * not actually need a helping buffer, we always null it, just in case.
     *
     * (The longlong here should help with alignment.)
     ','line_number':398,'multiline':True]
['text':' We need a large temporary buffer... ','line_number':410,'multiline':True]
['text':'
     * There is no cast anymore, the above already coerced using scalar
     * coercion rules
     ','line_number':423,'multiline':True]
['text':'
 * Internal function to fill an array with zeros.
 * Used in einsum and dot, which ensures the dtype is, in some sense, numerical
 * and not a str or struct
 *
 * dst: The destination array.
 * wheremask: If non-NULL, a boolean mask specifying where to set the values.
 *
 * Returns 0 on success, -1 on failure.
 ','line_number':439,'multiline':True]
['text':' Create a raw bool scalar with the value False ','line_number':461,'multiline':True]
['text':'NUMPY_API
 * Copy an array.
 ','line_number':477,'multiline':True]
['text':'NUMPY_API
 * View
 * steals a reference to type -- accepts NULL
 ','line_number':504,'multiline':True]
