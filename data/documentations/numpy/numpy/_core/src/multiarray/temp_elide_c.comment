['text':'
 * Functions used to try to avoid/elide temporaries in python expressions
 * of type a + b + b by translating some operations into in-place operations.
 * This example translates to this bytecode:
 *
 *        0 LOAD_FAST                0 (a)
 *        3 LOAD_FAST                1 (b)
 *        6 BINARY_ADD
 *        7 LOAD_FAST                1 (b)
 *       10 BINARY_ADD
 *
 * The two named variables get their reference count increased by the load
 * instructions so they always have a reference count larger than 1.
 * The temporary of the first BINARY_ADD on the other hand only has a count of
 * 1. Only temporaries can have a count of 1 in python so we can use this to
 * transform the second operation into an in-place operation and not affect the
 * output of the program.
 * CPython does the same thing to resize memory instead of copying when doing
 * string concatenation.
 * The gain can be very significant (4x-6x) when avoiding the temporary allows
 * the operation to remain in the cpu caches and can still be 50% faster for
 * array larger than cpu cache size.
 *
 * A complication is that a DSO (dynamic shared object) module (e.g. cython)
 * could call the PyNumber functions directly on arrays with reference count of
 * 1.
 * This is handled by checking the call stack to verify that we have been
 * called directly from the cpython interpreter.
 * To achieve this we check that all functions in the callstack until the
 * cpython frame evaluation function are located in cpython or numpy.
 * This is an expensive operation so temporaries are only avoided for rather
 * large arrays.
 *
 * A possible future improvement would be to change cpython to give us access
 * to the top of the stack. Then we could just check that the objects involved
 * are on the cpython stack instead of checking the function callstack.
 *
 * Elision can be applied to all operations that do have in-place variants and
 * do not change types (addition, subtraction, multiplication, float division,
 * logical and bitwise operations ...)
 * For commutative operations (addition, multiplication, ...) if eliding into
 * the lefthand side fails it can succeed on the righthand side by swapping the
 * arguments. E.g. b * (a * 2) can be elided by changing it to (2 * a) * b.
 *
 * TODO only supports systems with backtrace(), Windows can probably be
 * supported too by using the appropriate Windows APIs.
 ','line_number':13,'multiline':True]
['text':' 1 prints elided operations, 2 prints stacktraces ','line_number':62,'multiline':True]
['text':' TODO can pep523 be used to somehow? ','line_number':66,'multiline':True]
['text':'
 * Heuristic size of the array in bytes at which backtrace overhead generation
 * becomes less than speed gained by in-place operations. Depends on stack depth
 * being checked.  Measurements with 10 stacks show it getting worthwhile
 * around 100KiB but to be conservative put it higher around where the L2 cache
 * spills.
 ','line_number':68,'multiline':True]
['text':'
 * in debug mode always elide but skip scalars as these can convert to 0d array
 * during in-place operations
 ','line_number':78,'multiline':True]
['text':'
 * linear search pointer in table
 * number of pointers is usually quite small but if a performance impact can be
 * measured this could be converted to a binary search
 ','line_number':92,'multiline':True]
['text':'
     * get base addresses of multiarray and python, check if
     * backtrace is in these libraries only calling dladdr if a new max address
     * is found.
     * When after the initial multiarray stack everything is inside python we
     * can elide as no C-API user could have messed up the reference counts.
     * Only check until the python frame evaluation function is found
     * approx 10us overhead for stack size of 10
     *
     * TODO some calls go over scalarmath in umath but we cannot get the base
     * address of it from multiarraymodule as it is not linked against it
     ','line_number':112,'multiline':True]
['text':'
     * measured DSO object memory start and end, if an address is located
     * inside these bounds it is part of that library so we don't need to call
     * dladdr on it (assuming linear memory)
     ','line_number':125,'multiline':True]
['text':' known address storage to save dladdr calls ','line_number':135,'multiline':True]
['text':' cannot determine callers ','line_number':144,'multiline':True]
['text':' complete failure, disable elision ','line_number':152,'multiline':True]
['text':' setup DSO base addresses, ends updated later ','line_number':158,'multiline':True]
['text':' get python base address ','line_number':161,'multiline':True]
['text':' get multiarray base address ','line_number':170,'multiline':True]
['text':' loop over callstack addresses to check if they leave numpy or cpython ','line_number':182,'multiline':True]
['text':' check stored DSO boundaries first ','line_number':194,'multiline':True]
['text':' update DSO boundaries via dladdr if necessary ','line_number':202,'multiline':True]
['text':' update DSO end ','line_number':209,'multiline':True]
['text':' no longer in ok libraries and not reached PyEval -> no elide ','line_number':220,'multiline':True]
['text':' in python check if the frame eval function was reached ','line_number':226,'multiline':True]
['text':' if reached eval we are done ','line_number':228,'multiline':True]
['text':'
             * check if its some other function, use pointer lookup table to
             * save expensive dladdr calls
             ','line_number':233,'multiline':True]
['text':' new python address, check for PyEvalFrame ','line_number':241,'multiline':True]
['text':' store address to not have to dladdr it again ','line_number':250,'multiline':True]
['text':' store other py function to not have to dladdr it again ','line_number':257,'multiline':True]
['text':' all stacks after numpy are from python, we can elide ','line_number':263,'multiline':True]
['text':'
 * check if in "alhs @op@ orhs" that alhs is a temporary (refcnt == 1) so we
 * can do in-place operations instead of creating a new temporary
 * "cannot" is set to true if it cannot be done even with swapped arguments
 ','line_number':277,'multiline':True]
['text':'
     * to be a candidate the array needs to have reference count 1, be an exact
     * array of a basic type, own its data and size larger than threshold
     ','line_number':285,'multiline':True]
['text':' create array from right hand side ','line_number':302,'multiline':True]
['text':'
         * if rhs is not a scalar dimensions must match
         * TODO: one could allow broadcasting on equal types
         ','line_number':309,'multiline':True]
['text':' must be safe to cast (checks values for scalar in rhs) ','line_number':321,'multiline':True]
['text':'
 * try eliding a binary op, if commutative is true also try swapped arguments
 ','line_number':333,'multiline':True]
['text':' set when no elision can be done independent of argument order ','line_number':341,'multiline':True]
['text':' try elide unary temporary ','line_number':363,'multiline':True]
['text':' unsupported interpreter or missing backtrace ','line_number':385,'multiline':True]
