['text':'
 * The only function exported here is `PyArray_LegacyCanCastTypeTo`, which
 * is currently still in use when first registering a userdtype.
 *
 * The extremely limited use means that it can probably remain unmaintained
 * until such a time where legay user dtypes are deprecated and removed
 * entirely.
 ','line_number':1,'multiline':True]
['text':'
 * Compare the field dictionaries for two types.
 *
 * Return 1 if the field types and field names of the two descrs are equal and
 * in the same order, 0 if not.
 ','line_number':22,'multiline':True]
['text':'
 * Compare the subarray data for two types.
 * Return 1 if they are the same, 0 if not.
 ','line_number':55,'multiline':True]
['text':' Fast table lookup for small type numbers ','line_number':144,'multiline':True]
['text':' Identity ','line_number':150,'multiline':True]
['text':'
     * cancastto is a NPY_NOTYPE terminated C-int-array of types that
     * the data-type can be cast to safely.
     ','line_number':156,'multiline':True]
['text':' Check String and Unicode more closely ','line_number':184,'multiline':True]
['text':'
             * For datetime/timedelta, only treat casts moving towards
             * more precision as safe.
             ','line_number':198,'multiline':True]
['text':'
             * If to_type_num is STRING or unicode
             * see if the length is long enough to hold the
             * stringified value of the object.
             ','line_number':235,'multiline':True]
['text':'
             * Boolean value cast to string type is 5 characters max
             * for string 'False'.
             ','line_number':241,'multiline':True]
['text':'
                 * Need at least 5 characters to convert from boolean
                 * to 'True' or 'False'.
                 ','line_number':254,'multiline':True]
['text':' Guard against unexpected integer size ','line_number':262,'multiline':True]
['text':' Guard against unexpected integer size ','line_number':272,'multiline':True]
['text':' Extra character needed for sign ','line_number':276,'multiline':True]
['text':'
 * Compare two field dictionaries for castability.
 *
 * Return 1 if 'field1' can be cast to 'field2' according to the rule
 * 'casting', 0 if not.
 *
 * Castabiliy of field dictionaries is defined recursively: 'field1' and
 * 'field2' must have the same field names (possibly in different
 * orders), and the corresponding field types must be castable according
 * to the given casting rule.
 ','line_number':288,'multiline':True]
['text':' Iterate over all the fields and compare for castability ','line_number':316,'multiline':True]
['text':' Compare the dtype of the field for castability ','line_number':322,'multiline':True]
['text':'
     * Fast paths for equality and for basic types.
     ','line_number':339,'multiline':True]
['text':'
     * Cases with subarrays and fields need special treatment.
     ','line_number':349,'multiline':True]
['text':'
         * If from is a structured data type, then it can be cast to a simple
         * non-object one only for unsafe casting *and* if it has a single
         * field; recurse just in case the single field is itself structured.
         ','line_number':353,'multiline':True]
['text':'
                 * For a subarray, we need to get the underlying type;
                 * since we already are casting unsafely, we can ignore
                 * the shape.
                 ','line_number':366,'multiline':True]
['text':'
         * Casting from one structured data type to another depends on the fields;
         * we pass that case on to the EquivTypenums case below.
         *
         * TODO: move that part up here? Need to check whether equivalent type
         * numbers is an addition constraint that is needed.
         *
         * TODO/FIXME: For now, always allow structured to structured for unsafe
         * casting; this is not correct, but needed since the treatment in can_cast
         * below got out of sync with astype; see gh-13667.
         ','line_number':380,'multiline':True]
['text':'
         * If "from" is a simple data type and "to" has fields, then only
         * unsafe casting works (and that works always, even to multiple fields).
         ','line_number':396,'multiline':True]
['text':'
     * Everything else we consider castable for unsafe for now.
     * FIXME: ensure what we do here is consistent with "astype",
     * i.e., deal more correctly with subarrays and user-defined dtype.
     ','line_number':402,'multiline':True]
['text':'
     * Equivalent simple types can be cast with any value of 'casting', but
     * we need to be careful about structured to structured.
     ','line_number':410,'multiline':True]
['text':' For complicated case, use EquivTypes (for now) ','line_number':415,'multiline':True]
['text':' Only NPY_NO_CASTING prevents byte order conversion ','line_number':420,'multiline':True]
['text':'
                     * `from' and `to' must have the same fields, and
                     * corresponding fields must be (recursively) castable.
                     ','line_number':449,'multiline':True]
['text':' If safe or same-kind casts are allowed ','line_number':520,'multiline':True]
['text':'
             * Also allow casting from lower to higher kinds, according
             * to the ordering provided by dtype_kind_to_ordering.
             * Some kinds, like datetime, don't fit in the hierarchy,
             * and are special cased as -1.
             ','line_number':526,'multiline':True]
['text':' both types being timedelta is already handled before. ','line_number':538,'multiline':True]
['text':' NPY_NO_CASTING or NPY_EQUIV_CASTING was specified ','line_number':549,'multiline':True]
