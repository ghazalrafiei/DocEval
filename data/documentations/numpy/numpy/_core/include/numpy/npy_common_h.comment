['text':' need Python.h for npy_intp, npy_uintp ','line_number':4,'multiline':True]
['text':' numpconfig.h is auto-generated ','line_number':7,'multiline':True]
['text':'
 * using static inline modifiers when defining npy_math functions
 * allows the compiler to make optimizations when possible
 ','line_number':13,'multiline':True]
['text':'
 * gcc does not unroll even with -O3
 * use with care, unrolling on modern cpus rarely speeds things up
 ','line_number':25,'multiline':True]
['text':' highest gcc optimization level, enabled autovectorizer ','line_number':36,'multiline':True]
['text':'
 * mark an argument (starting from 1) that must not be NULL and is not checked
 * DO NOT USE IF FUNCTION CHECKS FOR NULL!! the compiler will remove the check
 ','line_number':43,'multiline':True]
['text':'
 * give a hint to the compiler which branch is more likely or unlikely
 * to occur, e.g. rare error cases:
 *
 * if (NPY_UNLIKELY(failure == 0))
 *    return NULL;
 *
 * the double !! is to cast the expression (e.g. NULL) to a boolean required by
 * the intrinsic
 ','line_number':53,'multiline':True]
['text':' unlike _mm_prefetch also works on non-x86 ','line_number':72,'multiline':True]
['text':' _MM_HINT_ET[01] (rw = 1) unsupported, only available in gcc >= 4.9 ','line_number':76,'multiline':True]
['text':' `NPY_INLINE` kept for backwards compatibility; use `inline` instead ','line_number':86,'multiline':True]
['text':' clang included here to handle clang-cl on Windows ','line_number':89,'multiline':True]
['text':' 64 bit file position support, also on win-amd64. Issue gh-2256 ','line_number':140,'multiline':True]
['text':' enums for detected endianness ','line_number':190,'multiline':True]
['text':'
 * This is to typedef npy_intp to the appropriate size for Py_ssize_t.
 * (Before NumPy 2.0 we used Py_intptr_t and Py_uintptr_t from `pyport.h`.)
 ','line_number':197,'multiline':True]
['text':'
 * Define sizes that were not defined in numpyconfig.h.
 ','line_number':204,'multiline':True]
['text':' NPY_INTP_FMT Note:
 *      Unlike the other NPY_*_FMT macros, which are used with PyOS_snprintf,
 *      NPY_INTP_FMT is used with PyErr_Format and PyUnicode_FromFormat. Those
 *      functions use different formatting codes that are portably specified
 *      according to the Python documentation. See issue gh-2388.
 ','line_number':223,'multiline':True]
['text':'
 * Some platforms don't define bool, long long, or long double.
 * Handle that here.
 ','line_number':261,'multiline':True]
['text':'
 * `NPY_SIZEOF_LONGDOUBLE` isn't usually equal to sizeof(long double).
 * In some certain cases, it may forced to be equal to sizeof(double)
 * even against the compiler implementation and the same goes for
 * `complex long double`.
 *
 * Therefore, avoid `long double`, use `npy_longdouble` instead,
 * and when it comes to standard math functions make sure of using
 * the double version when `NPY_SIZEOF_LONGDOUBLE` == `NPY_SIZEOF_DOUBLE`.
 * For example:
 *   npy_longdouble *ptr, x;
 *   #if NPY_SIZEOF_LONGDOUBLE == NPY_SIZEOF_DOUBLE
 *       npy_longdouble r = modf(x, ptr);
 *   #else
 *       npy_longdouble r = modfl(x, ptr);
 *   #endif
 *
 * See https://github.com/numpy/numpy/issues/20348
 ','line_number':306,'multiline':True]
['text':' These are for completeness ','line_number':346,'multiline':True]
['text':' !defined(_MSC_VER) || defined(__INTEL_COMPILER) ','line_number':382,'multiline':True]
['text':'
 * numarray-style bit-width typedefs
 ','line_number':390,'multiline':True]
['text':' Need to find the number of bits for each type and
           make definitions accordingly.

           C states that sizeof(char) == 1 by definition

           So, just using the sizeof keyword won't help.

           It also looks like Python itself uses sizeof(char) quite a
           bit, which by definition should be 1 all the time.

           Idea: Make Use of CHAR_BIT which should tell us how many
           BITS per CHARACTER
        ','line_number':416,'multiline':True]
['text':' Include platform definitions -- These are in the C89/90 standard ','line_number':430,'multiline':True]
['text':' half/float16 isn't a floating-point type in C ','line_number':974,'multiline':True]
['text':' datetime typedefs ','line_number':1057,'multiline':True]
['text':' End of typedefs for numarray style bit-width names ','line_number':1063,'multiline':True]
['text':' NUMPY_CORE_INCLUDE_NUMPY_NPY_COMMON_H_ ','line_number':1065,'multiline':True]
