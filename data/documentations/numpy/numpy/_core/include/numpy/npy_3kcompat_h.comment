['text':'
 * This is a convenience header file providing compatibility utilities
 * for supporting different minor versions of Python 3.
 * It was originally used to support the transition from Python 2,
 * hence the "3k" naming.
 *
 * If you want to use this for your own projects, it's recommended to make a
 * copy of it. Although the stuff below is unlikely to change, we don't provide
 * strong backwards compatibility guarantees at the moment.
 ','line_number':1,'multiline':True]
['text':'
 * PyInt -> PyLong
 ','line_number':29,'multiline':True]
['text':'
 * This is a renamed copy of the Python non-limited API function _PyLong_AsInt. It is
 * included here because it is missing from the PyPy API. It completes the PyLong_As*
 * group of functions and can be useful in replacing PyInt_Check.
 ','line_number':34,'multiline':True]
['text':' INT_MAX and INT_MIN are defined in Python.h ','line_number':45,'multiline':True]
['text':' XXX: could be cute and give a different
           message for overflow == -1 ','line_number':47,'multiline':True]
['text':' Return True only if the long fits in a C long ','line_number':58,'multiline':True]
['text':' NOTE:
 *
 * Since the PyLong type is very different from the fixed-range PyInt,
 * we don't define PyInt_Type -> PyLong_Type.
 ','line_number':75,'multiline':True]
['text':' NPY_PY3K ','line_number':80,'multiline':True]
['text':' Py3 changes PySlice_GetIndicesEx' first argument's type to PyObject* ','line_number':82,'multiline':True]
['text':' Introduced in https://github.com/python/cpython/commit/d2ec81a8c99796b51fb8c49b77a7fe369863226f ','line_number':91,'multiline':True]
['text':' Introduced in https://github.com/python/cpython/commit/b10dc3e7a11fcdb97e285882eba6da92594f90f9 ','line_number':93,'multiline':True]
['text':' Introduced in https://github.com/python/cpython/commit/c86a11221df7e37da389f9c6ce6e47ea22dc44ff ','line_number':95,'multiline':True]
['text':'
 * PyString -> PyBytes
 ','line_number':102,'multiline':True]
['text':' NPY_PY3K ','line_number':168,'multiline':True]
['text':'
 * Macros to protect CRT calls against instant termination when passed an
 * invalid parameter (https://bugs.python.org/issue23524).
 ','line_number':170,'multiline':True]
['text':' _MSC_VER >= 1900 ','line_number':188,'multiline':True]
['text':'
 * PyFile_* compatibility
 ','line_number':204,'multiline':True]
['text':'
 * Get a FILE* handle to the file represented by the Python object
 ','line_number':208,'multiline':True]
['text':' For Python 2 PyFileObject, use PyFile_AsFile ','line_number':220,'multiline':True]
['text':' Flush first to ensure things end up in the file in the correct order ','line_number':227,'multiline':True]
['text':'
     * The handle needs to be dup'd because we have to call fclose
     * at the end
     ','line_number':238,'multiline':True]
['text':' Convert to FILE* handle ','line_number':263,'multiline':True]
['text':' Record the original raw file handle position ','line_number':279,'multiline':True]
['text':' The io module is needed to determine if buffering is used ','line_number':282,'multiline':True]
['text':' File object instances of RawIOBase are unbuffered ','line_number':288,'multiline':True]
['text':' Succeed if the IO is unbuffered ','line_number':298,'multiline':True]
['text':' Seek raw handle to the Python-side position ','line_number':308,'multiline':True]
['text':'
 * Close the dup-ed file handle, and seek the Python one to the current position
 ','line_number':328,'multiline':True]
['text':' For Python 2 PyFileObject, do nothing ','line_number':338,'multiline':True]
['text':' Close the FILE* handle ','line_number':347,'multiline':True]
['text':'
     * Restore original file handle position, in order to not confuse
     * Python-side data structures
     ','line_number':350,'multiline':True]
['text':' The io module is needed to determine if buffering is used ','line_number':361,'multiline':True]
['text':' File object instances of RawIOBase are unbuffered ','line_number':366,'multiline':True]
['text':' Succeed if the IO is unbuffered ','line_number':375,'multiline':True]
['text':' Seek Python-side handle to the FILE* handle position ','line_number':389,'multiline':True]
['text':' For Python 2, check if it is a PyFileObject ','line_number':402,'multiline':True]
['text':' This is a copy of _PyErr_ChainExceptions
 ','line_number':441,'multiline':True]
['text':' only py3 supports this anyway ','line_number':450,'multiline':True]
['text':' This is a copy of _PyErr_ChainExceptions, with:
 *  - a minimal implementation for python 2
 *  - __cause__ used instead of __context__
 ','line_number':471,'multiline':True]
['text':' only py3 supports this anyway ','line_number':482,'multiline':True]
['text':'
 * PyObject_Cmp
 ','line_number':502,'multiline':True]
['text':'
 * PyCObject functions adapted to PyCapsules.
 *
 * The main job here is to get rid of the improved error handling
 * of PyCapsules. It's a shame...
 ','line_number':540,'multiline':True]
['text':' NUMPY_CORE_INCLUDE_NUMPY_NPY_3KCOMPAT_H_ ','line_number':595,'multiline':True]
