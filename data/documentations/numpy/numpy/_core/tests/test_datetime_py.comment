['text':' Use pytz to test out various time zones if available','line_number':14,'multiline':False]
['text':' python < 3.5','line_number':24,'multiline':False]
['text':' alias for us','line_number':31,'multiline':False]
['text':' Generic units shouldn't add [] to the end','line_number':38,'multiline':False]
['text':' Should be possible to specify the endianness','line_number':41,'multiline':False]
['text':' Check that the parser rejects bad datetime types','line_number':58,'multiline':False]
['text':' Cannot cast safely/same_kind between timedelta and datetime','line_number':71,'multiline':False]
['text':' Can cast safely/same_kind from integer to timedelta','line_number':77,'multiline':False]
['text':' Cannot cast safely from unsigned integer of the same size, which','line_number':85,'multiline':False]
['text':' could overflow','line_number':86,'multiline':False]
['text':' Cannot cast safely/same_kind from float to timedelta','line_number':90,'multiline':False]
['text':' Cannot cast safely/same_kind from integer to datetime','line_number':94,'multiline':False]
['text':' Cannot cast safely/same_kind from bool to datetime','line_number':98,'multiline':False]
['text':' Can cast safely/same_kind from bool to timedelta','line_number':101,'multiline':False]
['text':' Can cast datetime safely from months/years to days','line_number':105,'multiline':False]
['text':' Cannot cast timedelta safely from months/years to days','line_number':108,'multiline':False]
['text':' Can cast datetime same_kind from months/years to days','line_number':111,'multiline':False]
['text':' Can't cast timedelta same_kind from months/years to days','line_number':114,'multiline':False]
['text':' Can cast datetime same_kind across the date/time boundary','line_number':117,'multiline':False]
['text':' Can cast timedelta same_kind across the date/time boundary','line_number':119,'multiline':False]
['text':' Cannot cast safely if the integer multiplier doesn't divide','line_number':123,'multiline':False]
['text':' But can cast same_kind','line_number':126,'multiline':False]
['text':' Can cast safely if the integer multiplier does divide','line_number':128,'multiline':False]
['text':' We can always cast types with generic units (corresponding to NaT) to','line_number':131,'multiline':False]
['text':' more specific types','line_number':132,'multiline':False]
['text':' but not the other way around','line_number':137,'multiline':False]
['text':' regression tests related to gh-19631;','line_number':144,'multiline':False]
['text':' test metric prefixes from seconds down to','line_number':145,'multiline':False]
['text':' attoseconds for bidirectional conversions','line_number':146,'multiline':False]
['text':' regression tests for gh-6452','line_number':180,'multiline':False]
['text':' NaT < NaT should be False internally for','line_number':189,'multiline':False]
['text':' sort stability','line_number':190,'multiline':False]
['text':' NaT < NaT should be False internally for','line_number':198,'multiline':False]
['text':' sort stability','line_number':199,'multiline':False]
['text':' the example provided in gh-12629','line_number':205,'multiline':False]
['text':' multiple NaTs','line_number':208,'multiline':False]
['text':' this sort explores another code path for NaT','line_number':211,'multiline':False]
['text':' 2-D array','line_number':214,'multiline':False]
['text':' fix for gh-12629 and gh-15063; NaT sorting to end of array','line_number':224,'multiline':False]
['text':' Construct with different units','line_number':231,'multiline':False]
['text':' Default construction means NaT','line_number':237,'multiline':False]
['text':' Some basic strings and repr','line_number':240,'multiline':False]
['text':' None gets constructed as NaT','line_number':248,'multiline':False]
['text':' Default construction of NaT is in generic units','line_number':251,'multiline':False]
['text':' Construction from integers requires a specified unit','line_number':255,'multiline':False]
['text':' When constructing from a scalar or zero-dimensional array,','line_number':258,'multiline':False]
['text':' it either keeps the units or you can override them.','line_number':259,'multiline':False]
['text':' Construction from datetime.date','line_number':278,'multiline':False]
['text':' Construction from datetime.datetime','line_number':283,'multiline':False]
['text':' Construction with time units from a date is okay','line_number':288,'multiline':False]
['text':' Construction with date units from a datetime is also okay','line_number':298,'multiline':False]
['text':' verify that supplying an explicit timezone works, but is deprecated','line_number':307,'multiline':False]
['text':' at the moment, we don't automatically convert these to datetime64','line_number':320,'multiline':False]
['text':' find "supertype" for non-dates and dates','line_number':330,'multiline':False]
['text':' test all date / time units and use','line_number':353,'multiline':False]
['text':' "generic" to select generic unit','line_number':354,'multiline':False]
['text':' regression test for gh-7617','line_number':359,'multiline':False]
['text':' Construct with different units','line_number':368,'multiline':False]
['text':' Default construction means 0','line_number':374,'multiline':False]
['text':' None gets constructed as NaT','line_number':377,'multiline':False]
['text':' Some basic strings and repr','line_number':380,'multiline':False]
['text':' Construction from an integer produces generic units','line_number':390,'multiline':False]
['text':' When constructing from a scalar or zero-dimensional array,','line_number':393,'multiline':False]
['text':' it either keeps the units or you can override them.','line_number':394,'multiline':False]
['text':' Construction from datetime.timedelta','line_number':413,'multiline':False]
['text':' Cannot construct across nonlinear time unit boundaries','line_number':433,'multiline':False]
['text':' Regression test for gh-11096','line_number':454,'multiline':False]
['text':' Regression test for gh-11151','line_number':463,'multiline':False]
['text':' expected value from the array constructor workaround','line_number':466,'multiline':False]
['text':' described in above issue','line_number':467,'multiline':False]
['text':' gh-17552','line_number':473,'multiline':False]
['text':' String construction detecting units','line_number':477,'multiline':False]
['text':' Python date object','line_number':539,'multiline':False]
['text':' Python datetime object','line_number':543,'multiline':False]
['text':' 'today' special value','line_number':548,'multiline':False]
['text':' 'now' special value','line_number':552,'multiline':False]
['text':' Arrays','line_number':560,'multiline':False]
['text':' Scalars -> Scalars','line_number':567,'multiline':False]
['text':' Arrays -> Scalars','line_number':574,'multiline':False]
['text':' NaN -> NaT','line_number':581,'multiline':False]
['text':' Will fail if the date changes during the exact right moment','line_number':679,'multiline':False]
['text':' datetime.datetime.now() returns local time, not UTC','line_number':682,'multiline':False]
['text':'a = np.array(['now', datetime.datetime.now()], dtype='M8[s]')','line_number':683,'multiline':False]
['text':'assert_equal(a[0], a[1])','line_number':684,'multiline':False]
['text':' we can give a datetime.date time units','line_number':686,'multiline':False]
['text':' String to datetime','line_number':696,'multiline':False]
['text':' Datetime to string','line_number':703,'multiline':False]
['text':' Unicode to datetime','line_number':709,'multiline':False]
['text':' Datetime to unicode','line_number':716,'multiline':False]
['text':' Datetime to long string - gh-9712','line_number':722,'multiline':False]
['text':' Test that every byte-swapping combination also returns the same','line_number':745,'multiline':False]
['text':' results (previous tests check that this comparison works fine).','line_number':746,'multiline':False]
['text':' Unfortunately, timedelta does not roundtrip:','line_number':758,'multiline':False]
['text':' assume this is correct','line_number':760,'multiline':False]
['text':' Check that conversion from times to string works if src is swapped:','line_number':762,'multiline':False]
['text':' And also if both are swapped:','line_number':766,'multiline':False]
['text':' only destination is swapped:','line_number':769,'multiline':False]
['text':' Check that conversion from string to times works if src is swapped:','line_number':773,'multiline':False]
['text':' And if both are swapped:','line_number':778,'multiline':False]
['text':' Only destination is swapped:','line_number':781,'multiline':False]
['text':' Check that one NaT doesn't corrupt subsequent entries','line_number':795,'multiline':False]
['text':' Check right-alignment with NaTs','line_number':804,'multiline':False]
['text':' Test with other byteorder:','line_number':810,'multiline':False]
['text':' Check that pickle roundtripping works','line_number':817,'multiline':False]
['text':' Check that loading pickles from 1.6 works','line_number':830,'multiline':False]
['text':' datetime <op> datetime computes the metadata gcd','line_number':853,'multiline':False]
['text':' timedelta <op> timedelta computes the metadata gcd','line_number':854,'multiline':False]
['text':' timedelta <op> timedelta raises when there is no reasonable gcd','line_number':874,'multiline':False]
['text':' timedelta and float cannot be safely cast with each other','line_number':879,'multiline':False]
['text':' timedelta <op> timedelta may overflow with big unit ranges','line_number':885,'multiline':False]
['text':' gh-4486','line_number':892,'multiline':False]
['text':' All datetime types should be able to roundtrip through object','line_number':902,'multiline':False]
['text':' With date units','line_number':906,'multiline':False]
['text':' With time units','line_number':921,'multiline':False]
['text':' Make sure that months are truncating correctly','line_number':939,'multiline':False]
['text':' Check some years with date units','line_number':952,'multiline':False]
['text':' Check some datetimes with time units','line_number':973,'multiline':False]
['text':' Check some days with units that won't overflow','line_number':994,'multiline':False]
['text':' Shouldn't be able to compare datetime and timedelta','line_number':1006,'multiline':False]
['text':' not even if "unsafe"','line_number':1010,'multiline':False]
['text':' One-dimensional arrays','line_number':1027,'multiline':False]
['text':' NumPy scalars','line_number':1033,'multiline':False]
['text':' negative ufunc','line_number':1039,'multiline':False]
['text':' positive ufunc','line_number':1045,'multiline':False]
['text':' absolute ufunc','line_number':1051,'multiline':False]
['text':' sign ufunc','line_number':1055,'multiline':False]
['text':' The ufuncs always produce native-endian results','line_number':1061,'multiline':False]
['text':' One-dimensional arrays','line_number':1067,'multiline':False]
['text':' NumPy scalars','line_number':1075,'multiline':False]
['text':' m8 + m8','line_number':1083,'multiline':False]
['text':' m8 + bool','line_number':1086,'multiline':False]
['text':' m8 + int','line_number':1089,'multiline':False]
['text':' bool + m8','line_number':1092,'multiline':False]
['text':' int + m8','line_number':1095,'multiline':False]
['text':' M8 + bool','line_number':1098,'multiline':False]
['text':' M8 + int','line_number':1102,'multiline':False]
['text':' bool + M8','line_number':1106,'multiline':False]
['text':' int + M8','line_number':1110,'multiline':False]
['text':' M8 + m8','line_number':1114,'multiline':False]
['text':' m8 + M8','line_number':1118,'multiline':False]
['text':' In M8 + m8, the result goes to higher precision','line_number':1123,'multiline':False]
['text':' M8 + M8','line_number':1131,'multiline':False]
['text':' One-dimensional arrays','line_number':1137,'multiline':False]
['text':' NumPy scalars','line_number':1147,'multiline':False]
['text':' m8 - m8','line_number':1157,'multiline':False]
['text':' m8 - bool','line_number':1162,'multiline':False]
['text':' m8 - int','line_number':1165,'multiline':False]
['text':' int - m8','line_number':1168,'multiline':False]
['text':' int - m8','line_number':1171,'multiline':False]
['text':' M8 - bool','line_number':1174,'multiline':False]
['text':' M8 - int','line_number':1178,'multiline':False]
['text':' M8 - m8','line_number':1182,'multiline':False]
['text':' In M8 - m8, the result goes to higher precision','line_number':1187,'multiline':False]
['text':' M8 - M8 with different goes to higher precision','line_number':1192,'multiline':False]
['text':' m8 - M8','line_number':1202,'multiline':False]
['text':' bool - M8','line_number':1204,'multiline':False]
['text':' int - M8','line_number':1206,'multiline':False]
['text':' One-dimensional arrays','line_number':1212,'multiline':False]
['text':' NumPy scalars','line_number':1217,'multiline':False]
['text':' m8 * int','line_number':1222,'multiline':False]
['text':' int * m8','line_number':1225,'multiline':False]
['text':' m8 * float','line_number':1228,'multiline':False]
['text':' float * m8','line_number':1231,'multiline':False]
['text':' m8 * m8','line_number':1235,'multiline':False]
['text':' m8 * M8','line_number':1237,'multiline':False]
['text':' M8 * m8','line_number':1239,'multiline':False]
['text':' M8 * int','line_number':1241,'multiline':False]
['text':' int * M8','line_number':1243,'multiline':False]
['text':' M8 * float','line_number':1245,'multiline':False]
['text':' float * M8','line_number':1247,'multiline':False]
['text':' NaTs','line_number':1250,'multiline':False]
['text':' m8 same units round down','line_number':1266,'multiline':False]
['text':' m8 same units round down with negative','line_number':1270,'multiline':False]
['text':' m8 same units negative no round down','line_number':1274,'multiline':False]
['text':' m8 different units','line_number':1278,'multiline':False]
['text':' m8 generic units','line_number':1282,'multiline':False]
['text':' Y // M works','line_number':1286,'multiline':False]
['text':' handle 1D arrays','line_number':1290,'multiline':False]
['text':' div by 0','line_number':1300,'multiline':False]
['text':' div with NaT','line_number':1303,'multiline':False]
['text':' special case for int64 min','line_number':1306,'multiline':False]
['text':' in integer floor division','line_number':1307,'multiline':False]
['text':' the smallest integer that can't be represented','line_number':1318,'multiline':False]
['text':' exactly in a double should be preserved if we avoid','line_number':1319,'multiline':False]
['text':' casting to double in floordiv operation','line_number':1320,'multiline':False]
['text':' stress the alternate floordiv code path where','line_number':1322,'multiline':False]
['text':' operand signs don't match and remainder isn't 0','line_number':1323,'multiline':False]
['text':' Python reference integer floor','line_number':1330,'multiline':False]
['text':' years and months sometimes can't be unambiguously','line_number':1335,'multiline':False]
['text':' divided for floor division operation','line_number':1336,'multiline':False]
['text':' reuse the test cases from floordiv','line_number':1347,'multiline':False]
['text':' m8 same units round down with negative','line_number':1350,'multiline':False]
['text':' m8 same units negative no round down','line_number':1353,'multiline':False]
['text':' m8 different units','line_number':1356,'multiline':False]
['text':' m8 generic units','line_number':1359,'multiline':False]
['text':' Y // M works','line_number':1362,'multiline':False]
['text':' handle 1D arrays','line_number':1365,'multiline':False]
['text':' reuse cases from floordiv','line_number':1375,'multiline':False]
['text':' div by 0','line_number':1376,'multiline':False]
['text':' div with NaT','line_number':1379,'multiline':False]
['text':' special case for int64 min','line_number':1382,'multiline':False]
['text':' in integer floor division','line_number':1383,'multiline':False]
['text':' One-dimensional arrays','line_number':1397,'multiline':False]
['text':' NumPy scalars','line_number':1403,'multiline':False]
['text':' m8 / int','line_number':1409,'multiline':False]
['text':' m8 / float','line_number':1412,'multiline':False]
['text':' m8 / m8','line_number':1415,'multiline':False]
['text':' int / m8','line_number':1424,'multiline':False]
['text':' float / m8','line_number':1426,'multiline':False]
['text':' m8 / M8','line_number':1428,'multiline':False]
['text':' M8 / m8','line_number':1430,'multiline':False]
['text':' M8 / int','line_number':1432,'multiline':False]
['text':' int / M8','line_number':1434,'multiline':False]
['text':' M8 / float','line_number':1436,'multiline':False]
['text':' float / M8','line_number':1438,'multiline':False]
['text':' NaTs','line_number':1441,'multiline':False]
['text':' Division by inf','line_number':1450,'multiline':False]
['text':' Division by nan','line_number':1454,'multiline':False]
['text':' Test all the comparison operators','line_number':1460,'multiline':False]
['text':' The metadata of the result should become the GCD','line_number':1500,'multiline':False]
['text':' of the operand metadata','line_number':1501,'multiline':False]
['text':' Viewed as integers, the comparison is opposite because','line_number':1512,'multiline':False]
['text':' of the units chosen','line_number':1513,'multiline':False]
['text':' Interaction with NaT','line_number':1516,'multiline':False]
['text':' Also do timedelta','line_number':1528,'multiline':False]
['text':' Viewed as integers, the comparison is opposite because','line_number':1539,'multiline':False]
['text':' of the units chosen','line_number':1540,'multiline':False]
['text':' should raise between datetime and timedelta','line_number':1543,'multiline':False]
['text':'','line_number':1544,'multiline':False]
['text':' TODO: Allowing unsafe casting by','line_number':1545,'multiline':False]
['text':'       default in ufuncs strikes again... :(','line_number':1546,'multiline':False]
['text':'assert_raises(TypeError, np.minimum, a, b)','line_number':1549,'multiline':False]
['text':'assert_raises(TypeError, np.maximum, a, b)','line_number':1550,'multiline':False]
['text':'assert_raises(TypeError, np.fmin, a, b)','line_number':1551,'multiline':False]
['text':'assert_raises(TypeError, np.fmax, a, b)','line_number':1552,'multiline':False]
['text':' Allow space instead of 'T' between date and time','line_number':1603,'multiline':False]
['text':' Allow positive years','line_number':1606,'multiline':False]
['text':' Allow negative years','line_number':1609,'multiline':False]
['text':' UTC specifier','line_number':1612,'multiline':False]
['text':' Time zone offset','line_number':1621,'multiline':False]
['text':' Arbitrary bad string','line_number':1639,'multiline':False]
['text':' Character after year must be '-'','line_number':1641,'multiline':False]
['text':' Cannot have trailing '-'','line_number':1643,'multiline':False]
['text':' Month must be in range [1,12]','line_number':1645,'multiline':False]
['text':' Month must have two digits','line_number':1648,'multiline':False]
['text':' 'Mor' is not a valid month','line_number':1651,'multiline':False]
['text':' Cannot have trailing '-'','line_number':1653,'multiline':False]
['text':' Day must be in range [1,len(month)]','line_number':1655,'multiline':False]
['text':' Cannot have trailing characters','line_number':1671,'multiline':False]
['text':' Hours must be in range [0, 23]','line_number':1677,'multiline':False]
['text':' No trailing ':'','line_number':1688,'multiline':False]
['text':' Minutes must be in range [0, 59]','line_number':1691,'multiline':False]
['text':' No trailing ':'','line_number':1696,'multiline':False]
['text':' Seconds must be in range [0, 59]','line_number':1699,'multiline':False]
['text':' Timezone offset must within a reasonable range','line_number':1704,'multiline':False]
['text':' gh-13062','line_number':1733,'multiline':False]
['text':' Check all the units with default string conversion','line_number':1740,'multiline':False]
['text':' check non-ascii and bytes too','line_number':1758,'multiline':False]
['text':' String conversion with the unit= parameter','line_number':1789,'multiline':False]
['text':' unit='auto' parameter','line_number':1817,'multiline':False]
['text':' 'auto' doesn't split up hour and minute','line_number':1830,'multiline':False]
['text':' 'auto' doesn't split up the date','line_number':1837,'multiline':False]
['text':' timezone='local' vs 'UTC'','line_number':1847,'multiline':False]
['text':' Dates to strings with a timezone attached is disabled by default','line_number':1874,'multiline':False]
['text':' Check that we can print out the date in the specified time zone','line_number':1877,'multiline':False]
['text':' With two datetimes provided as strings','line_number':1886,'multiline':False]
['text':' Unit should be detected as months here','line_number':1899,'multiline':False]
['text':' datetime, integer|timedelta works as well','line_number':1905,'multiline':False]
['text':' produces arange (start, start + stop) in this case','line_number':1906,'multiline':False]
['text':' Step of 0 is disallowed','line_number':1916,'multiline':False]
['text':' Promotion across nonlinear unit boundaries is disallowed','line_number':1919,'multiline':False]
['text':' Step of 0 is disallowed','line_number':1940,'multiline':False]
['text':' Promotion across nonlinear unit boundaries is disallowed','line_number':1943,'multiline':False]
['text':' case from gh-12092','line_number':1950,'multiline':False]
['text':' negative value cases','line_number':1954,'multiline':False]
['text':' larger value cases','line_number':1961,'multiline':False]
['text':' different units','line_number':1968,'multiline':False]
['text':' NaT is propagated','line_number':1975,'multiline':False]
['text':' Y % M works','line_number':1979,'multiline':False]
['text':' years and months sometimes can't be unambiguously','line_number':1988,'multiline':False]
['text':' divided for modulus operation','line_number':1989,'multiline':False]
['text':' cases where one operand is not','line_number':2006,'multiline':False]
['text':' timedelta64','line_number':2007,'multiline':False]
['text':' NOTE: some of the operations may be supported','line_number':2014,'multiline':False]
['text':' in the future','line_number':2015,'multiline':False]
['text':' test mainly because it worked only via a bug in that allowed:','line_number':2037,'multiline':False]
['text':' `timedelta.sum(dtype="f8")` to ignore the dtype request.','line_number':2038,'multiline':False]
['text':' subtracting two datetime64 works, but we cannot reduce it, since','line_number':2043,'multiline':False]
['text':' the result of that subtraction will have a different dtype.','line_number':2044,'multiline':False]
['text':' First Monday in June','line_number':2058,'multiline':False]
['text':' Last Monday in June','line_number':2062,'multiline':False]
['text':' Default M-F business days, different roll modes','line_number':2070,'multiline':False]
['text':' roll='raise' by default','line_number':2097,'multiline':False]
['text':' Bigger offset values','line_number':2100,'multiline':False]
['text':' NaT values when roll is not raise','line_number':2110,'multiline':False]
['text':' Check that it removes NaT, duplicates, and weekends','line_number':2119,'multiline':False]
['text':' and sorts the result.','line_number':2120,'multiline':False]
['text':' Default M-F weekmask','line_number':2126,'multiline':False]
['text':' Check string weekmask with varying whitespace.','line_number':2129,'multiline':False]
['text':' Check length 7 0/1 string','line_number':2133,'multiline':False]
['text':' Check length 7 string weekmask.','line_number':2137,'multiline':False]
['text':' All-zeros weekmask should raise','line_number':2141,'multiline':False]
['text':' weekday names must be correct case','line_number':2143,'multiline':False]
['text':' All-zeros weekmask should raise','line_number':2145,'multiline':False]
['text':' Invalid weekday name codes should raise','line_number':2147,'multiline':False]
['text':' With exactly one holiday','line_number':2153,'multiline':False]
['text':' With the holiday appearing twice','line_number':2172,'multiline':False]
['text':' With a NaT holiday','line_number':2181,'multiline':False]
['text':' With another holiday after','line_number':2190,'multiline':False]
['text':' With another holiday before','line_number':2199,'multiline':False]
['text':' With another holiday before and after','line_number':2208,'multiline':False]
['text':' A bigger forward jump across more than one week/holiday','line_number':2218,'multiline':False]
['text':' A bigger backward jump across more than one week/holiday','line_number':2256,'multiline':False]
['text':' Can't supply both a weekmask/holidays and busdaycal','line_number':2288,'multiline':False]
['text':' Roll with the holidays','line_number':2294,'multiline':False]
['text':' Validate against busday_offset broadcast against','line_number':2327,'multiline':False]
['text':' a range of offsets','line_number':2328,'multiline':False]
['text':' Returns negative value when reversed','line_number':2333,'multiline':False]
['text':' -1 since the '2011-01-01' is not a busday','line_number':2334,'multiline':False]
['text':' 2011-12-31 is a saturday','line_number':2338,'multiline':False]
['text':' only the first generated date is in the future of 2011-12-31','line_number':2341,'multiline':False]
['text':' Returns negative value when reversed','line_number':2346,'multiline':False]
['text':' Can't supply both a weekmask/holidays and busdaycal','line_number':2352,'multiline':False]
['text':' Number of Mondays in March 2011','line_number':2358,'multiline':False]
['text':' Returns negative value when reversed','line_number':2360,'multiline':False]
['text':' Weekend/weekday tests','line_number':2382,'multiline':False]
['text':' All the holidays are not business days','line_number':2387,'multiline':False]
['text':' Test parsing on either side of the Y2038 boundary','line_number':2392,'multiline':False]
['text':' Test parsing on either side of the Y2038 boundary with','line_number':2398,'multiline':False]
['text':' a manually specified timezone offset','line_number':2399,'multiline':False]
['text':' Test parsing a date after Y2038','line_number':2407,'multiline':False]
['text':' Test that only datetime dtype arrays are accepted','line_number':2433,'multiline':False]
['text':' construct a co-recursive list','line_number':2468,'multiline':False]
['text':' At some point this caused a stack overflow (gh-11154). Now raises','line_number':2475,'multiline':False]
['text':' ValueError since the nested list cannot be converted to a datetime.','line_number':2476,'multiline':False]
['text':' try a numpy string type','line_number':2486,'multiline':False]
['text':' compound units','line_number':2493,'multiline':False]
['text':' above should not have overflowed','line_number':2504,'multiline':False]
['text':' TODO: add absolute (gold standard) time span limit strings','line_number':2521,'multiline':False]
['text':' Convert to string and back. Explicit unit needed since the day and','line_number':2524,'multiline':False]
['text':' week reprs are not distinguishable.','line_number':2525,'multiline':False]
['text':' byte units are converted to unicode','line_number':2537,'multiline':False]
['text':' μs is normalized to μ','line_number':2545,'multiline':False]
['text':' GH#17017','line_number':2554,'multiline':False]
