['text':' An array of all possible float16 values','line_number':21,'multiline':False]
['text':' NaN value can cause an invalid FP exception if HW is been used','line_number':25,'multiline':False]
['text':' An array of all non-NaN float16 values, in sorted order','line_number':30,'multiline':False]
['text':' An array of all finite float16 values, in sorted order','line_number':38,'multiline':False]
['text':' Because the underlying routines preserve the NaN bits, every','line_number':46,'multiline':False]
['text':' value is preserved when converting to/from other floats.','line_number':47,'multiline':False]
['text':' Convert from float32 back to float16','line_number':49,'multiline':False]
['text':' avoid testing NaNs due to differ bits wither Q/SNaNs','line_number':52,'multiline':False]
['text':' Convert from float64 back to float16','line_number':57,'multiline':False]
['text':' Convert float16 to longdouble and back','line_number':64,'multiline':False]
['text':' This doesn't necessarily preserve the extra NaN bits,','line_number':65,'multiline':False]
['text':' so exclude NaNs.','line_number':66,'multiline':False]
['text':' Check the range for which all integers can be represented','line_number':72,'multiline':False]
['text':' Currently uses S/U32 (which is sufficient for float32)','line_number':80,'multiline':False]
['text':' Assumes that round to even is used during casting.','line_number':98,'multiline':False]
['text':' Test all (positive) finite numbers, denormals are most interesting','line_number':101,'multiline':False]
['text':' however:','line_number':102,'multiline':False]
['text':' Shift the values by half a bit up or a down (or do not shift),','line_number':106,'multiline':False]
['text':' Increase the float by a minimal value:','line_number':114,'multiline':False]
['text':' Convert back to float16 and its bit pattern:','line_number':120,'multiline':False]
['text':' The above calculations tries the original values, or the exact','line_number':123,'multiline':False]
['text':' mid points between the float16 values. It then further offsets them','line_number':124,'multiline':False]
['text':' by as little as possible. If no offset occurs, "round to even"','line_number':125,'multiline':False]
['text':' logic will be necessary, an arbitrarily small offset should cause','line_number':126,'multiline':False]
['text':' normal up/down rounding always.','line_number':127,'multiline':False]
['text':' Calculate the expected pattern:','line_number':129,'multiline':False]
['text':' There cannot be a shift, either shift is None, so all rounding','line_number':137,'multiline':False]
['text':' will go back to original, or shift is reduced by offset too much.','line_number':138,'multiline':False]
['text':' If rounding occurs, is it normal rounding or round to even?','line_number':141,'multiline':False]
['text':' Round to even occurs, modify only non-even, cast to allow + (-1)','line_number':143,'multiline':False]
['text':' Test specifically that all bits are considered when deciding','line_number':154,'multiline':False]
['text':' whether round to even should occur (i.e. no bits are lost at the','line_number':155,'multiline':False]
['text':' end. Compare also gh-12721. The most bits can get lost for the','line_number':156,'multiline':False]
['text':' smallest denormal:','line_number':157,'multiline':False]
['text':' Will be rounded to zero based on round to even rule:','line_number':161,'multiline':False]
['text':' The significand will be all 0 for the float_t, test that we do not','line_number':165,'multiline':False]
['text':' lose the lower ones of these:','line_number':166,'multiline':False]
['text':' slightly increasing the value should make it round up:','line_number':168,'multiline':False]
['text':' Check some of the ufuncs','line_number':175,'multiline':False]
['text':' Check comparisons of all values with NaN','line_number':182,'multiline':False]
['text':' 1/10, 1/3','line_number':207,'multiline':False]
['text':' Maximum magnitude','line_number':208,'multiline':False]
['text':' Minimum normal','line_number':209,'multiline':False]
['text':' Minimum subnormal','line_number':210,'multiline':False]
['text':' Signed zeros','line_number':211,'multiline':False]
['text':' Rounds to minimum subnormal','line_number':226,'multiline':False]
['text':' Underflows to zero (nearest even mode)','line_number':227,'multiline':False]
['text':' Underflows to zero','line_number':228,'multiline':False]
['text':' rounds to 1.0+2**(-10)','line_number':229,'multiline':False]
['text':' rounds to 1.0 (nearest even mode)','line_number':230,'multiline':False]
['text':' rounds to 1.0','line_number':231,'multiline':False]
['text':' rounds to 65504','line_number':232,'multiline':False]
['text':' rounds to inf','line_number':233,'multiline':False]
['text':' Check float64->float16 rounding','line_number':244,'multiline':False]
['text':' Check float32->float16 rounding','line_number':249,'multiline':False]
['text':' Create an array of all finite float16s','line_number':259,'multiline':False]
['text':' Convert to 64-bit float manually','line_number':262,'multiline':False]
['text':' Implicit bit of normalized floats','line_number':266,'multiline':False]
['text':' Denormalized exponent is -14','line_number':268,'multiline':False]
['text':' All non-NaN float16 values in reverse order','line_number':294,'multiline':False]
['text':' 32-bit float copy','line_number':297,'multiline':False]
['text':' Should sort the same','line_number':300,'multiline':False]
['text':' Comparisons should work','line_number':305,'multiline':False]
['text':' All != except for +/-0','line_number':310,'multiline':False]
['text':' fill','line_number':317,'multiline':False]
['text':' fillwithscalar','line_number':321,'multiline':False]
['text':' nonzero and copyswap','line_number':326,'multiline':False]
['text':' dot','line_number':335,'multiline':False]
['text':' argmax','line_number':341,'multiline':False]
['text':' getitem','line_number':349,'multiline':False]
['text':' All non-negative finite #'s','line_number':356,'multiline':False]
['text':' switch to negatives','line_number':383,'multiline':False]
['text':' Underflow errors','line_number':504,'multiline':False]
['text':' Overflow errors','line_number':524,'multiline':False]
['text':' Invalid value errors','line_number':541,'multiline':False]
['text':' These should not raise','line_number':546,'multiline':False]
