['text':' Need to test an object that does not fully implement math interface','line_number':40,'multiline':False]
['text':' resulting array should be sorted and arg values should be unique','line_number':45,'multiline':False]
['text':' Can't do this, fall back to standard allocation (which','line_number':65,'multiline':False]
['text':' should always be sufficiently aligned)','line_number':66,'multiline':False]
['text':' Note: slices producing 0-size arrays do not necessarily change','line_number':84,'multiline':False]
['text':' data pointer --- so we use and allocate size+1','line_number':85,'multiline':False]
['text':' Ensure that any base being writeable is sufficient to change flag;','line_number':105,'multiline':False]
['text':' this is especially interesting for arrays from an array interface.','line_number':106,'multiline':False]
['text':' Create subclass so base will not be collapsed, this is OK to change','line_number':112,'multiline':False]
['text':' Can be set to True again.','line_number':117,'multiline':False]
['text':' Must assume not writeable, since only base is not:','line_number':134,'multiline':False]
['text':' gh-9440 - make sure fromstring, from buffer on readonly buffers','line_number':138,'multiline':False]
['text':' set writeable False','line_number':139,'multiline':False]
['text':' Small arrays will be copied without setting base.','line_number':168,'multiline':False]
['text':' See condition for using PyArray_SetBaseObject in','line_number':169,'multiline':False]
['text':' array_setstate.','line_number':170,'multiline':False]
['text':' Test that the writeable flag can be changed for an array wrapping','line_number':178,'multiline':False]
['text':' low level C-data, but not owning its data.','line_number':179,'multiline':False]
['text':' Also see that this is deprecated to change from python.','line_number':180,'multiline':False]
['text':' Toggling the writeable flag works on the view:','line_number':188,'multiline':False]
['text':' Flag can be unset on the arr_writeable:','line_number':193,'multiline':False]
['text':' make sure it is readonly','line_number':202,'multiline':False]
['text':' only warn once','line_number':224,'multiline':False]
['text':' Delete _warn_on_write after deprecation and simplify','line_number':229,'multiline':False]
['text':' the parameterization:','line_number':230,'multiline':False]
['text':' not power of two are accessed byte-wise and thus considered aligned','line_number':261,'multiline':False]
['text':' see #3793','line_number':271,'multiline':False]
['text':' Regression test for https://github.com/numpy/numpy/pull/3526','line_number':330,'multiline':False]
['text':' int_ doesn't inherit from Python int, because it's not fixed-width','line_number':334,'multiline':False]
['text':' Check behavior reported in gh-2503:','line_number':350,'multiline':False]
['text':' Check that the true extent of the array is used.','line_number':371,'multiline':False]
['text':' Test relies on as_strided base not exposing a buffer.','line_number':372,'multiline':False]
['text':' Test for offset calculations:','line_number':380,'multiline':False]
['text':' test 0d','line_number':388,'multiline':False]
['text':' Filling from a scalar','line_number':410,'multiline':False]
['text':' Filling from a tuple that can be converted','line_number':414,'multiline':False]
['text':' to a scalar','line_number':415,'multiline':False]
['text':' gh-22922','line_number':422,'multiline':False]
['text':' missing arguments','line_number':519,'multiline':False]
['text':' too many arguments','line_number':521,'multiline':False]
['text':' This should likely be made positional only, but do not change','line_number':530,'multiline':False]
['text':' the name accidentally.','line_number':531,'multiline':False]
['text':' Broadcasting the input to the output','line_number':542,'multiline':False]
['text':' For compatibility with <= 1.5, a limited version of broadcasting','line_number':548,'multiline':False]
['text':' the output to the input.','line_number':549,'multiline':False]
['text':'','line_number':550,'multiline':False]
['text':' This behavior is inconsistent with NumPy broadcasting','line_number':551,'multiline':False]
['text':' in general, because it only uses one of the two broadcasting','line_number':552,'multiline':False]
['text':' rules (adding a new "1" dimension to the left of the shape),','line_number':553,'multiline':False]
['text':' applied to the output instead of an input. In NumPy 2.0, this kind','line_number':554,'multiline':False]
['text':' of broadcasting assignment will likely be disallowed.','line_number':555,'multiline':False]
['text':' The other type of broadcasting would require a reduction operation.','line_number':558,'multiline':False]
['text':' Address issue #2276','line_number':566,'multiline':False]
['text':' gh-5049','line_number':581,'multiline':False]
['text':' previously this would invoke __str__','line_number':596,'multiline':False]
['text':' this would crash for the same reason','line_number':599,'multiline':False]
['text':' gh-8902','line_number':603,'multiline':False]
['text':' only relevant if longdouble is larger than float','line_number':618,'multiline':False]
['text':' we're looking for loss of precision','line_number':619,'multiline':False]
['text':' gh-8902','line_number':622,'multiline':False]
['text':' construction','line_number':626,'multiline':False]
['text':' scalar = scalar','line_number':630,'multiline':False]
['text':' 0d = scalar','line_number':634,'multiline':False]
['text':' 0d = 0d','line_number':638,'multiline':False]
['text':' scalar = 0d','line_number':642,'multiline':False]
['text':' cast to str should do "str(scalar)", not "str(scalar.item())"','line_number':650,'multiline':False]
['text':' Example: In python2, str(float) is truncated, so we want to avoid','line_number':651,'multiline':False]
['text':' str(np.float64(...).item()) as this would incorrectly truncate.','line_number':652,'multiline':False]
['text':' gh-9821','line_number':674,'multiline':False]
['text':' `a[...] is a` in numpy <1.9.','line_number':688,'multiline':False]
['text':' `b[...] is b` in numpy <1.9.','line_number':689,'multiline':False]
['text':' strides and shape must be the same length','line_number':757,'multiline':False]
['text':' contiguity checks are for gh-11245','line_number':768,'multiline':False]
['text':' With positive strides','line_number':832,'multiline':False]
['text':' With positive and negative strides','line_number':841,'multiline':False]
['text':' With just one element overlapping','line_number':854,'multiline':False]
['text':' current default','line_number':901,'multiline':False]
['text':' Same length scalars (those that go to the same void) work:','line_number':902,'multiline':False]
['text':' Promoting different lengths will fail (pre 1.20 this worked)','line_number':906,'multiline':False]
['text':' by going via S5 and casting to V5.','line_number':907,'multiline':False]
['text':' Check the same for the casting path:','line_number':913,'multiline':False]
['text':' The following fails to promote the two dtypes, resulting in an error','line_number':926,'multiline':False]
['text':' 45341 is the smallest integer greater than sqrt(2**31 - 1).','line_number':934,'multiline':False]
['text':' 3037000500 is the smallest integer greater than sqrt(2**63 - 1).','line_number':935,'multiline':False]
['text':' We want to make sure that the square byte array with those dimensions','line_number':936,'multiline':False]
['text':' is too big on 32 or 64 bit systems respectively.','line_number':937,'multiline':False]
['text':' This test is guaranteed to fail due to a too large allocation','line_number':951,'multiline':False]
['text':' true for ieee floats','line_number':960,'multiline':False]
['text':' test big array as they might be allocated different by the system','line_number':979,'multiline':False]
['text':' This test can fail on 32-bit systems due to insufficient','line_number':984,'multiline':False]
['text':' contiguous memory. Deallocating the previous array increases the','line_number':985,'multiline':False]
['text':' chance of success.','line_number':986,'multiline':False]
['text':' test initialization from PyLong(0)','line_number':990,'multiline':False]
['text':' test zeros_like returns the same as zeros','line_number':1000,'multiline':False]
['text':' explicitly check some special cases','line_number':1007,'multiline':False]
['text':' don't throw decode errors on garbage memory','line_number':1034,'multiline':False]
['text':' gh-5100, want object array from iterable object without len()','line_number':1077,'multiline':False]
['text':' gh-7264, segfault for this example','line_number':1091,'multiline':False]
['text':' segfault?','line_number':1098,'multiline':False]
['text':' Special case where a bad __getitem__ makes us fall back on __iter__:','line_number':1102,'multiline':False]
['text':' Segfault!','line_number':1113,'multiline':False]
['text':' gh-7393','line_number':1118,'multiline':False]
['text':' len(d) should give 3, but len(d[0]) will fail','line_number':1127,'multiline':False]
['text':' Test that array creation succeeds for arrays addressable by intp','line_number':1132,'multiline':False]
['text':' on the byte level and fails for too large arrays.','line_number':1133,'multiline':False]
['text':' without dtype=object, the ragged object raises','line_number':1147,'multiline':False]
['text':' Lists of mismatching depths are treated as object arrays','line_number':1154,'multiline':False]
['text':' The ragged dimension of a list is turned into an object array','line_number':1168,'multiline':False]
['text':' should both of these emit deprecation warnings?','line_number':1190,'multiline':False]
['text':' None of these should raise, even though they are missing dtype=object','line_number':1195,'multiline':False]
['text':' NumPy has support for object fields to be NULL (meaning None)','line_number':1205,'multiline':False]
['text':' but generally, we should always fill with the proper None, and','line_number':1206,'multiline':False]
['text':' downstream may rely on that.  (For fully initialized arrays!)','line_number':1207,'multiline':False]
['text':' We expect a fill value of None, which is not NULL:','line_number':1209,'multiline':False]
['text':' Since the subarray is always in C-order, a transpose','line_number':1230,'multiline':False]
['text':' does not swap the subarray:','line_number':1231,'multiline':False]
['text':' In Fortran order, the subarray gets appended','line_number':1234,'multiline':False]
['text':' like in all other cases, not prepended as a special case','line_number':1235,'multiline':False]
['text':' Check that comparisons between record arrays with','line_number':1241,'multiline':False]
['text':' multi-dimensional field types work properly','line_number':1242,'multiline':False]
['text':' Check that broadcasting with a subarray works, including cases that','line_number':1264,'multiline':False]
['text':' require promotion to work:','line_number':1265,'multiline':False]
['text':' Check that broadcasting Fortran-style arrays with a subarray work','line_number':1279,'multiline':False]
['text':' Check that incompatible sub-array shapes don't result to broadcasting','line_number':1285,'multiline':False]
['text':' The main importance is that it does not return True:','line_number':1288,'multiline':False]
['text':' The main importance is that it does not return True:','line_number':1294,'multiline':False]
['text':' Check that comparison works on empty arrays with nontrivially','line_number':1299,'multiline':False]
['text':' shaped fields','line_number':1300,'multiline':False]
['text':' Check that structured arrays can be compared so long as their','line_number':1318,'multiline':False]
['text':' dtypes promote fine:','line_number':1319,'multiline':False]
['text':' Including with embedded subarray dtype (although subarray comparison','line_number':1330,'multiline':False]
['text':' itself may still be a bit weird and compare the raw data)','line_number':1331,'multiline':False]
['text':' In principle, one could decide to return an array of False for some','line_number':1341,'multiline':False]
['text':' if comparisons are impossible.  But right now we return TypeError','line_number':1342,'multiline':False]
['text':' when "void" dtype are involved.','line_number':1343,'multiline':False]
['text':' Cannot compare non-structured to structured:','line_number':1346,'multiline':False]
['text':' Added title prevents promotion, but casts are OK:','line_number':1350,'multiline':False]
['text':' Check that casting a structured array to change its byte order','line_number':1362,'multiline':False]
['text':' works','line_number':1363,'multiline':False]
['text':' Check that equality comparison works on structured arrays if','line_number':1372,'multiline':False]
['text':' they are 'equiv'-castable','line_number':1373,'multiline':False]
['text':' Check that 'equiv' casting can change byte order','line_number':1379,'multiline':False]
['text':' Check that 'safe' casting can change byte order and up-cast','line_number':1384,'multiline':False]
['text':' fields','line_number':1385,'multiline':False]
['text':' Check that 'same_kind' casting can change byte order and','line_number':1392,'multiline':False]
['text':' change field widths within a "kind"','line_number':1393,'multiline':False]
['text':' Check that casting fails if the casting rule should fail on','line_number':1400,'multiline':False]
['text':' any of the fields','line_number':1401,'multiline':False]
['text':' Check that non-'unsafe' casting can't change the set of field names','line_number':1414,'multiline':False]
['text':' https://github.com/numpy/numpy/issues/3286','line_number':1422,'multiline':False]
['text':' TypeError?','line_number':1424,'multiline':False]
['text':' https://github.com/numpy/numpy/issues/3253','line_number':1426,'multiline':False]
['text':' TypeError?','line_number':1428,'multiline':False]
['text':' https://github.com/numpy/numpy/issues/3126','line_number':1431,'multiline':False]
['text':' make sure object field assignment with ndarray value','line_number':1440,'multiline':False]
['text':' on void scalar mimics setitem behavior','line_number':1441,'multiline':False]
['text':' next line should work identically to b['x'][0] = np.arange(3)','line_number':1443,'multiline':False]
['text':' check that broadcasting check still works','line_number':1447,'multiline':False]
['text':' Test for PR #6430 / issues #473, #4955, #2585','line_number':1456,'multiline':False]
['text':' Variation on test case from #4955','line_number':1469,'multiline':False]
['text':' Variation on test case from #2585','line_number':1474,'multiline':False]
['text':' Allow zero-width dtypes in ndarray constructor','line_number':1479,'multiline':False]
['text':' More tests for indexing an array with zero-width fields','line_number':1484,'multiline':False]
['text':' check for no uninitialized memory due to viewing S0 array','line_number':1493,'multiline':False]
['text':' assign using setitem','line_number':1519,'multiline':False]
['text':' assign using "dtype_transfer" code paths','line_number':1520,'multiline':False]
['text':' test field-reordering, assignment by position, and self-assignment','line_number':1541,'multiline':False]
['text':' test that this works even for 'simple_unaligned' structs','line_number':1547,'multiline':False]
['text':' (ie, that PyArray_EquivTypes cares about field order too)','line_number':1548,'multiline':False]
['text':' test gh-7262','line_number':1554,'multiline':False]
['text':' field exists, but repeated','line_number':1563,'multiline':False]
['text':' no exception','line_number':1564,'multiline':False]
['text':' gh-15494','line_number':1567,'multiline':False]
['text':' dtypes with different field names are not promotable','line_number':1568,'multiline':False]
['text':' dtypes with same field names/order but different memory offsets','line_number':1577,'multiline':False]
['text':' and byte-order are promotable to packed nbo.','line_number':1578,'multiline':False]
['text':' gh-13667','line_number':1582,'multiline':False]
['text':' dtypes with different fieldnames but castable field types are castable','line_number':1583,'multiline':False]
['text':' make sure assignment still works','line_number':1592,'multiline':False]
['text':' tests of type-promotion of corresponding fields','line_number':1594,'multiline':False]
['text':' test nested case','line_number':1602,'multiline':False]
['text':' note that offsets are lost when promoting:','line_number':1608,'multiline':False]
['text':' Structured dtypes are packed when promoted (we consider the packed','line_number':1619,'multiline':False]
['text':' form to be "canonical"), so tere is no extra padding.','line_number':1620,'multiline':False]
['text':' Remove non "canonical" dtype options:','line_number':1622,'multiline':False]
['text':' But the "expected" one, should just be returned unchanged:','line_number':1631,'multiline':False]
['text':' A scalar viewing an array preserves its view even when creating a','line_number':1636,'multiline':False]
['text':' new array. This test documents behaviour, it may not be the best','line_number':1637,'multiline':False]
['text':' desired behaviour.','line_number':1638,'multiline':False]
['text':' view into the array','line_number':1641,'multiline':False]
['text':' But never when a dtype is passed in:','line_number':1643,'multiline':False]
['text':' A scalar which owns its data does not have this property.','line_number':1645,'multiline':False]
['text':' It is not easy to create one, one method is to use pickle:','line_number':1646,'multiline':False]
['text':' check all 12 bit combinations in a length 17 array','line_number':1689,'multiline':False]
['text':' covers most cases of the 16 byte unrolled code','line_number':1690,'multiline':False]
['text':' check all combinations in a length 17 array','line_number':1695,'multiline':False]
['text':' covers all cases of the 16 byte unrolled code','line_number':1696,'multiline':False]
['text':' prevent mistakes as e.g. gh-4060','line_number':1700,'multiline':False]
['text':' empty string -> false','line_number':1710,'multiline':False]
['text':' anything else -> true','line_number':1719,'multiline':False]
['text':' not constructable directly','line_number':1748,'multiline':False]
['text':' Previously, these would all hang','line_number':1761,'multiline':False]
['text':' previously an error','line_number':1783,'multiline':False]
['text':' viewing as itself should be allowed','line_number':1793,'multiline':False]
['text':' viewing as any non-empty type gives an empty result','line_number':1796,'multiline':False]
['text':' when using pickle protocol 5 with buffer callbacks,','line_number':1829,'multiline':False]
['text':' array_from_buffer is reconstructed from a buffer holding a view','line_number':1830,'multiline':False]
['text':' to the initial array's data, so modifying an element in array','line_number':1831,'multiline':False]
['text':' should modify it in array_from_buffer too.','line_number':1832,'multiline':False]
['text':' gh-12031, caused SEGFAULT','line_number':1918,'multiline':False]
['text':' gh-6272 check overlap on out','line_number':1926,'multiline':False]
['text':' With output array','line_number':1999,'multiline':False]
['text':' Complex rounding','line_number':2009,'multiline':False]
['text':' test ordering for floats and complex containing nans. It is only','line_number':2028,'multiline':False]
['text':' necessary to check the less-than comparison, so sorts that','line_number':2029,'multiline':False]
['text':' only follow the insertion sort path are sufficient. We only','line_number':2030,'multiline':False]
['text':' test doubles and complex doubles as the logic is the same.','line_number':2031,'multiline':False]
['text':' check doubles','line_number':2033,'multiline':False]
['text':' check complex','line_number':2038,'multiline':False]
['text':' all c scalar sorts use the same code with different types','line_number':2046,'multiline':False]
['text':' so it suffices to run a quick check with one type. The number','line_number':2047,'multiline':False]
['text':' of sorted items must be greater than ~50 to check the actual','line_number':2048,'multiline':False]
['text':' algorithm because quick and merge sort fall over to insertion','line_number':2049,'multiline':False]
['text':' sort for small arrays.','line_number':2050,'multiline':False]
['text':' test complex sorts. These use the same code as the scalars','line_number':2085,'multiline':False]
['text':' but the compare function differs.','line_number':2086,'multiline':False]
['text':' test sorting of complex arrays requiring byte-swapping, gh-5441','line_number':2108,'multiline':False]
['text':' np.array will perform the encoding to bytes for us in the bytes test','line_number':2119,'multiline':False]
['text':' test object array sorts.','line_number':2132,'multiline':False]
['text':' test record array sorts.','line_number':2150,'multiline':False]
['text':' test datetime64 and timedelta64 sorts.','line_number':2168,'multiline':False]
['text':' check axis handling. This should be the same for all type','line_number':2181,'multiline':False]
['text':' specific sorts, so we only check it for one type and one kind','line_number':2182,'multiline':False]
['text':' check axis handling for multidimensional empty arrays','line_number':2197,'multiline':False]
['text':' test generic class with bogus ordering,','line_number':2207,'multiline':False]
['text':' should not segfault.','line_number':2208,'multiline':False]
['text':' gh-8210 - previously segfaulted','line_number':2221,'multiline':False]
['text':'gh-9404','line_number':2234,'multiline':False]
['text':'gh-3879','line_number':2238,'multiline':False]
['text':' test degraded dataset would take minutes to run with normal qsort','line_number':2249,'multiline':False]
['text':' create a median of 3 killer where each median is the sorted second','line_number':2253,'multiline':False]
['text':' last element of the quicksort partition','line_number':2254,'multiline':False]
['text':' Test copying a Fortran array','line_number':2275,'multiline':False]
['text':' Now test starting with a C array.','line_number':2281,'multiline':False]
['text':' Force the entry of NULLs into array','line_number':2290,'multiline':False]
['text':' Ensure no error is raised, see gh-21833','line_number':2294,'multiline':False]
['text':' Test sorting an array with fields','line_number':2311,'multiline':False]
['text':' all c scalar argsorts use the same code with different types','line_number':2348,'multiline':False]
['text':' so it suffices to run a quick check with one type. The number','line_number':2349,'multiline':False]
['text':' of sorted items must be greater than ~50 to check the actual','line_number':2350,'multiline':False]
['text':' algorithm because quick and merge sort fall over to insertion','line_number':2351,'multiline':False]
['text':' sort for small arrays.','line_number':2352,'multiline':False]
['text':' test complex argsorts. These use the same code as the scalars','line_number':2362,'multiline':False]
['text':' but the compare function differs.','line_number':2363,'multiline':False]
['text':' test argsort of complex arrays requiring byte-swapping, gh-5441','line_number':2377,'multiline':False]
['text':' test string argsorts.','line_number':2385,'multiline':False]
['text':' test unicode argsorts.','line_number':2396,'multiline':False]
['text':' test object array argsorts.','line_number':2407,'multiline':False]
['text':' test structured array argsorts.','line_number':2418,'multiline':False]
['text':' test datetime64 argsorts.','line_number':2429,'multiline':False]
['text':' test timedelta64 argsorts.','line_number':2439,'multiline':False]
['text':' check axis handling. This should be the same for all type','line_number':2449,'multiline':False]
['text':' specific argsorts, so we only check it for one type and one kind','line_number':2450,'multiline':False]
['text':' check axis handling for multidimensional empty arrays','line_number':2458,'multiline':False]
['text':' check that stable argsorts are stable','line_number':2469,'multiline':False]
['text':' scalars','line_number':2471,'multiline':False]
['text':' complex','line_number':2474,'multiline':False]
['text':' string','line_number':2477,'multiline':False]
['text':' unicode','line_number':2480,'multiline':False]
['text':' test for floats arrays containing nans. Explicitly test','line_number':2496,'multiline':False]
['text':' half, single, and double precision floats to verify that','line_number':2497,'multiline':False]
['text':' the NaN-handling is correct.','line_number':2498,'multiline':False]
['text':' check keyword arguments','line_number':2505,'multiline':False]
['text':' test for complex arrays containing nans.','line_number':2512,'multiline':False]
['text':' The search sorted routines use the compare functions for the','line_number':2513,'multiline':False]
['text':' array type, so this checks if that is consistent with the sort','line_number':2514,'multiline':False]
['text':' order.','line_number':2515,'multiline':False]
['text':' check double complex','line_number':2516,'multiline':False]
['text':' Check 0 elements','line_number':2536,'multiline':False]
['text':' Check 1 element','line_number':2543,'multiline':False]
['text':' Check all elements equal','line_number':2548,'multiline':False]
['text':' Test searching unaligned array','line_number':2556,'multiline':False]
['text':' Test searching unaligned array','line_number':2561,'multiline':False]
['text':' Test searching for unaligned keys','line_number':2566,'multiline':False]
['text':' Test smart resetting of binsearch indices','line_number':2573,'multiline':False]
['text':' Test all type specific binary search functions','line_number':2581,'multiline':False]
['text':' Test empty array, use a fresh array to get warnings in','line_number':2597,'multiline':False]
['text':' valgrind if access happens.','line_number':2598,'multiline':False]
['text':' Test searchsorted on unicode strings.','line_number':2606,'multiline':False]
['text':' 1.6.1 contained a string length miscalculation in','line_number':2608,'multiline':False]
['text':' arraytypes.c.src:UNICODE_compare() which manifested as','line_number':2609,'multiline':False]
['text':' incorrect/inconsistent results from searchsorted.','line_number':2610,'multiline':False]
['text':' bounds check','line_number':2641,'multiline':False]
['text':' Test searching unaligned array','line_number':2661,'multiline':False]
['text':' Test searching unaligned array','line_number':2668,'multiline':False]
['text':' Test searching for unaligned keys','line_number':2674,'multiline':False]
['text':' Test all type specific indirect binary search functions','line_number':2681,'multiline':False]
['text':' We want the sorter array to be of a type that is different','line_number':2689,'multiline':False]
['text':' from np.intp in all platforms, to check for #4698','line_number':2690,'multiline':False]
['text':' We want the sorter array to be of a type that is different','line_number':2695,'multiline':False]
['text':' from np.intp in all platforms, to check for #4698','line_number':2696,'multiline':False]
['text':' Test empty array, use a fresh array to get warnings in','line_number':2703,'multiline':False]
['text':' valgrind if access happens.','line_number':2704,'multiline':False]
['text':' Test non-contiguous sorter array','line_number':2711,'multiline':False]
['text':' Functions returning indices should always return base ndarrays','line_number':2724,'multiline':False]
['text':' Test out of range values in kth raise an error, gh-5469','line_number':2737,'multiline':False]
['text':' Test out of range values in kth raise an error, gh-5469','line_number':2744,'multiline':False]
['text':' Test non-integer values in kth raise an error/','line_number':2750,'multiline':False]
['text':' Test also for generic type argpartition, which uses sorting','line_number':2753,'multiline':False]
['text':' and used to not bound check kth','line_number':2754,'multiline':False]
['text':' Test out of range values in kth raise an error, gh-5469','line_number':2759,'multiline':False]
['text':' Test also for generic type partition, which uses sorting','line_number':2762,'multiline':False]
['text':' and used to not bound check kth','line_number':2763,'multiline':False]
['text':' check axis handling for multidimensional empty arrays','line_number':2769,'multiline':False]
['text':' check axis handling for multidimensional empty arrays','line_number':2781,'multiline':False]
['text':' kth not modified','line_number':2809,'multiline':False]
['text':' sorted','line_number':2850,'multiline':False]
['text':' rsorted','line_number':2859,'multiline':False]
['text':' median of 3 killer, O(n^2) on pure median 3 pivot quickselect','line_number':2875,'multiline':False]
['text':' exercises the median of median of 5 code used to keep O(n)','line_number':2876,'multiline':False]
['text':' max','line_number':2886,'multiline':False]
['text':' equal elements','line_number':2897,'multiline':False]
['text':' all before are smaller','line_number':2964,'multiline':False]
['text':' all after are larger','line_number':2966,'multiline':False]
['text':' array_less does not seem to work right','line_number':2976,'multiline':False]
['text':' array_less does not seem to work right','line_number':2989,'multiline':False]
['text':' check inplace','line_number':2998,'multiline':False]
['text':' test unsorted kth','line_number':3044,'multiline':False]
['text':' equal kth','line_number':3057,'multiline':False]
['text':' a few rounds of random data testing','line_number':3118,'multiline':False]
['text':'  A test for functionality of argpartition on lists.','line_number':3132,'multiline':False]
['text':' gemm vs syrk optimizations','line_number':3175,'multiline':False]
['text':' syrk validations','line_number':3186,'multiline':False]
['text':' syrk - different shape, stride, and view validations','line_number':3195,'multiline':False]
['text':' syrk - different shape','line_number':3223,'multiline':False]
['text':' check vector arg for contiguous before gemv','line_number':3234,'multiline':False]
['text':' gh-12156','line_number':3235,'multiline':False]
['text':' check for unaligned data','line_number':3246,'multiline':False]
['text':' make sure it is not aligned','line_number':3251,'multiline':False]
['text':' function versus methods','line_number':3265,'multiline':False]
['text':' test passing in an output array','line_number':3269,'multiline':False]
['text':' test keyword args','line_number':3274,'multiline':False]
['text':' Test BLAS and non-BLAS code paths, including all dtypes','line_number':3289,'multiline':False]
['text':' that dot() supports','line_number':3290,'multiline':False]
['text':' Valid dot() output arrays must be aligned','line_number':3296,'multiline':False]
['text':' Check invalid output array','line_number':3304,'multiline':False]
['text':' gh-9641','line_number':3309,'multiline':False]
['text':' make sure out can be any ndarray (not only subclass of inputs)','line_number':3316,'multiline':False]
['text':' Don't override the error from calling __array__()','line_number':3326,'multiline':False]
['text':' overlapping memory','line_number':3332,'multiline':False]
['text':' Order of axis argument doesn't matter:','line_number':3363,'multiline':False]
['text':' Regression test for a bug that crept in at one point','line_number':3380,'multiline':False]
['text':' Regression test for issue 9615','line_number':3390,'multiline':False]
['text':' Exercises a special-case code path for dot products of length','line_number':3391,'multiline':False]
['text':' zero in cblasfuncs (making it is specific to floating dtypes).','line_number':3392,'multiline':False]
['text':' The class would need to overwrite trace to ensure single-element','line_number':3422,'multiline':False]
['text':' output also has the right subclass.','line_number':3423,'multiline':False]
['text':' test 1-d','line_number':3437,'multiline':False]
['text':' test 2-d','line_number':3442,'multiline':False]
['text':' test 1-d','line_number':3450,'multiline':False]
['text':' test 2-d','line_number':3455,'multiline':False]
['text':' check must be writeable','line_number':3460,'multiline':False]
['text':' when calling np.put, make sure a','line_number':3465,'multiline':False]
['text':' TypeError is raised if the object','line_number':3466,'multiline':False]
['text':' isn't an ndarray','line_number':3467,'multiline':False]
['text':' 'K' doesn't reverse the axes of negative strides','line_number':3498,'multiline':False]
['text':' Test simple 1-d copy behaviour:','line_number':3502,'multiline':False]
['text':' Not contiguous and 1-sized axis with non matching stride','line_number':3508,'multiline':False]
['text':' contiguous and 1-sized axis with non matching stride works:','line_number':3517,'multiline':False]
['text':' Test negative strides (not very interesting since non-contiguous):','line_number':3526,'multiline':False]
['text':' 1-element tidy strides test:','line_number':3533,'multiline':False]
['text':' 0-d corner case:','line_number':3541,'multiline':False]
['text':' Test that certain non-inplace ravels work right (mostly) for 'K':','line_number':3546,'multiline':False]
['text':' check exceptions','line_number':3581,'multiline':False]
['text':' check shape','line_number':3591,'multiline':False]
['text':' check array contents','line_number':3596,'multiline':False]
['text':' check a view is always returned, gh-5260','line_number':3602,'multiline':False]
['text':' check on non-contiguous input array','line_number':3604,'multiline':False]
['text':' Minimal test for the out argument being passed on correctly','line_number':3646,'multiline':False]
['text':' NOTE: The ability to pass `out` is currently undocumented!','line_number':3647,'multiline':False]
['text':' test refcount 1 inplace conversion','line_number':3706,'multiline':False]
['text':' true divide','line_number':3727,'multiline':False]
['text':' ndarray.__rop__ always calls ufunc','line_number':3736,'multiline':False]
['text':' ndarray.__iop__ always calls ufunc','line_number':3737,'multiline':False]
['text':' ndarray.__op__, __rop__:','line_number':3738,'multiline':False]
['text':'   - defer if other has __array_ufunc__ and it is None','line_number':3739,'multiline':False]
['text':'           or other is not a subclass and has higher array priority','line_number':3740,'multiline':False]
['text':'   - else, call ufunc','line_number':3741,'multiline':False]
['text':' Python method name (without underscores)','line_number':3744,'multiline':False]
['text':'   -> (numpy ufunc, has_in_place_version, preferred_dtype)','line_number':3745,'multiline':False]
['text':' 'ge':       (np.less_equal, False),','line_number':3761,'multiline':False]
['text':' 'gt':       (np.less, False),','line_number':3762,'multiline':False]
['text':' 'le':       (np.greater_equal, False),','line_number':3763,'multiline':False]
['text':' 'lt':       (np.greater, False),','line_number':3764,'multiline':False]
['text':' 'eq':       (np.equal, False),','line_number':3765,'multiline':False]
['text':' 'ne':       (np.not_equal, False),','line_number':3766,'multiline':False]
['text':' Create an object with the given base, in the given module, with a','line_number':3787,'multiline':False]
['text':' bunch of placeholder __op__ methods, and optionally a','line_number':3788,'multiline':False]
['text':' __array_ufunc__ and __array_priority__.','line_number':3789,'multiline':False]
['text':' Use this range to avoid special case weirdnesses around','line_number':3808,'multiline':False]
['text':' divide-by-0, pow(x, 2), overflow due to pow(big, big), etc.','line_number':3809,'multiline':False]
['text':' arr __op__ obj','line_number':3832,'multiline':False]
['text':' __array__ gets ignored','line_number':3842,'multiline':False]
['text':' obj __op__ arr','line_number':3848,'multiline':False]
['text':' __array__ gets ignored','line_number':3859,'multiline':False]
['text':' __array_ufunc__ = "asdf" creates a TypeError','line_number':3863,'multiline':False]
['text':' arr __iop__ obj','line_number':3867,'multiline':False]
['text':' array scalars don't have in-place operators','line_number':3868,'multiline':False]
['text':' __array__ gets ignored','line_number':3884,'multiline':False]
['text':' No array priority, no array_ufunc -> nothing called','line_number':3907,'multiline':False]
['text':' Negative array priority, no array_ufunc -> nothing called','line_number':3909,'multiline':False]
['text':' (has to be very negative, because scalar priority is -1000000.0)','line_number':3910,'multiline':False]
['text':' Positive array priority, no array_ufunc -> binops and iops only','line_number':3912,'multiline':False]
['text':' ndarray ignores array_priority for ndarray subclasses','line_number':3914,'multiline':False]
['text':' Positive array_priority and array_ufunc -> array_ufunc only','line_number':3917,'multiline':False]
['text':' array_ufunc set to None -> defer binops only','line_number':3922,'multiline':False]
['text':' Mainly checks that this does not crash.  The second array has a lower','line_number':3929,'multiline':False]
['text':' priority than -1 ("error value").  If the __radd__ actually exists,','line_number':3930,'multiline':False]
['text':' bad things can happen (I think via the scalar paths).','line_number':3931,'multiline':False]
['text':' In principle both of these can probably just be errors in the future.','line_number':3932,'multiline':False]
['text':' Priority failure uses the same as scalars (smaller -1000).  So the','line_number':3946,'multiline':False]
['text':' LowPriority wins with 'result' for each element (inner operation).','line_number':3947,'multiline':False]
['text':' gh-5674','line_number':3954,'multiline':False]
['text':' Check that index is set appropriately, also if only an output','line_number':3970,'multiline':False]
['text':' is passed on (latter is another regression tests for github bug 4753)','line_number':3971,'multiline':False]
['text':' This also checks implicitly that 'out' is always a tuple.','line_number':3972,'multiline':False]
['text':' calls below mean we must be in an output.','line_number':3978,'multiline':False]
['text':' 1 input, 1 output','line_number':3985,'multiline':False]
['text':' 1 input, 2 outputs','line_number':3993,'multiline':False]
['text':' Out argument must be tuple, since there are multiple outputs','line_number':4003,'multiline':False]
['text':' 2 inputs, 1 output','line_number':4008,'multiline':False]
['text':' regression test for github bug 4753','line_number':4018,'multiline':False]
['text':' regression test for gh-9112','line_number':4039,'multiline':False]
['text':' explicit cast to float, to ensure the fast power path is taken.','line_number':4045,'multiline':False]
['text':' test pow on arrays of object dtype','line_number':4060,'multiline':False]
['text':' want to ensure a fast pow path is not taken','line_number':4065,'multiline':False]
['text':' elision is only triggered on relatively large arrays','line_number':4103,'multiline':False]
['text':' test extension (e.g. cython) calling PyNumber_* slots without','line_number':4106,'multiline':False]
['text':' increasing the reference counts','line_number':4107,'multiline':False]
['text':'','line_number':4108,'multiline':False]
['text':' def incref_elide(a):','line_number':4109,'multiline':False]
['text':'    d = input.copy() # refcount 1','line_number':4110,'multiline':False]
['text':'    return d, d + d # PyNumber_Add without increasing refcount','line_number':4111,'multiline':False]
['text':' the return original should not be changed to an inplace operation','line_number':4116,'multiline':False]
['text':' scanning if the refcount == 1 object is on the python stack to check','line_number':4121,'multiline':False]
['text':' that we are called directly from python is flawed as object may still','line_number':4122,'multiline':False]
['text':' be above the stack pointer and we have no access to the top of it','line_number':4123,'multiline':False]
['text':'','line_number':4124,'multiline':False]
['text':' def incref_elide_l(d):','line_number':4125,'multiline':False]
['text':'    return l[4] + l[4] # PyNumber_Add without increasing refcount','line_number':4126,'multiline':False]
['text':' padding with 1 makes sure the object on the stack is not overwritten','line_number':4128,'multiline':False]
['text':' the return original should not be changed to an inplace operation','line_number':4131,'multiline':False]
['text':' check that we don't elide into a temporary which would need casting','line_number':4136,'multiline':False]
['text':' commutative elision into the astype result','line_number':4153,'multiline':False]
['text':' no elision into lower type','line_number':4157,'multiline':False]
['text':' test unary abs with different output dtype','line_number':4163,'multiline':False]
['text':' test no elision on broadcast to higher dimension','line_number':4170,'multiline':False]
['text':' only triggers elision code path in debug mode as triggering it in','line_number':4171,'multiline':False]
['text':' normal mode needs 256kb large matching dimension, so a lot of memory','line_number':4172,'multiline':False]
['text':' check inplace op does not create ndarray from scalars','line_number':4180,'multiline':False]
['text':' The imaginary part of a real array is readonly. This needs to go','line_number':4185,'multiline':False]
['text':' through fast_scalar_power which is only called for powers of','line_number':4186,'multiline':False]
['text':' +1, -1, 0, 0.5, and 2, so use 2. Also need valid refcount for','line_number':4187,'multiline':False]
['text':' elision which can be gotten for the imaginary part of a real','line_number':4188,'multiline':False]
['text':' array. Should not error.','line_number':4189,'multiline':False]
['text':' don't try to elide readonly temporaries','line_number':4194,'multiline':False]
['text':' Test simple values (-1 is special for error return paths)','line_number':4218,'multiline':False]
['text':' A 0-D array looks a bit like a sequence but must take the integer','line_number':4221,'multiline':False]
['text':' path:','line_number':4222,'multiline':False]
['text':' Test simple sequences (intp_from_sequence only supports length 1):','line_number':4224,'multiline':False]
['text':' These converters currently convert overflows to a ValueError','line_number':4246,'multiline':False]
['text':' When using pickle protocol 5, Fortran-contiguous arrays can be','line_number':4291,'multiline':False]
['text':' serialized using out-of-band buffers','line_number':4292,'multiline':False]
['text':' make sure non-contiguous arrays can be pickled-depickled','line_number':4308,'multiline':False]
['text':' using any protocol','line_number':4309,'multiline':False]
['text':' check for reference leaks (gh-12793)','line_number':4333,'multiline':False]
['text':' version 0 pickles, using protocol=2 to pickle','line_number':4340,'multiline':False]
['text':' version 0 doesn't have a version field','line_number':4341,'multiline':False]
['text':' noqa','line_number':4343,'multiline':False]
['text':' noqa','line_number':4349,'multiline':False]
['text':' noqa','line_number':4355,'multiline':False]
['text':' version 1 pickles, using protocol=2 to pickle','line_number':4360,'multiline':False]
['text':' noqa','line_number':4362,'multiline':False]
['text':' noqa','line_number':4368,'multiline':False]
['text':' noqa','line_number':4374,'multiline':False]
['text':' noqa','line_number':4380,'multiline':False]
['text':' contiguous arrays','line_number':4498,'multiline':False]
['text':' non-contiguous arrays','line_number':4528,'multiline':False]
['text':' one dimension lesser for non-zero sized','line_number':4549,'multiline':False]
['text':' array should raise an error','line_number':4550,'multiline':False]
['text':' see also gh-616','line_number':4581,'multiline':False]
['text':' Check some simple shape mismatches','line_number':4584,'multiline':False]
['text':' these could be relaxed possibly (used to allow even the previous)','line_number':4591,'multiline':False]
['text':' make sure both ndarray.argmax/argmin and','line_number':4621,'multiline':False]
['text':' numpy.argmax/argmin support out/axis args','line_number':4622,'multiline':False]
['text':' check positional args','line_number':4626,'multiline':False]
['text':' check keyword args','line_number':4632,'multiline':False]
['text':' See gh-6032','line_number':4644,'multiline':False]
['text':' To hit the tail of SIMD multi-level(x4, x1) inner loops','line_number':4681,'multiline':False]
['text':' on variant SIMD widthes','line_number':4682,'multiline':False]
['text':' Assorted tests with NaTs','line_number':4719,'multiline':False]
['text':' add padding to test SIMD loops','line_number':4762,'multiline':False]
['text':' To hit the tail of SIMD multi-level(x4, x1) inner loops','line_number':4824,'multiline':False]
['text':' on variant SIMD widthes','line_number':4825,'multiline':False]
['text':' Assorted tests with NaTs','line_number':4862,'multiline':False]
['text':' add padding to test SIMD loops','line_number':4905,'multiline':False]
['text':' Do not ignore NaT','line_number':4955,'multiline':False]
['text':' The tests that call us pass clip_min and clip_max that','line_number':4996,'multiline':False]
['text':' might not fit in the destination dtype. They were written','line_number':4997,'multiline':False]
['text':' assuming the previous unsafe casting, which now must be','line_number':4998,'multiline':False]
['text':' passed explicitly to avoid a warning.','line_number':4999,'multiline':False]
['text':' E.g. clipping uint with negative integers fails to promote','line_number':5030,'multiline':False]
['text':' (changed with NEP 50 and may be adaptable)','line_number':5031,'multiline':False]
['text':' Similar to last check in `test_basic`','line_number':5032,'multiline':False]
['text':' Also test string of a length which uses an untypical length','line_number':5104,'multiline':False]
['text':' Note mixed byteorder.','line_number':5118,'multiline':False]
['text':' gh-6272 check overlap','line_number':5131,'multiline':False]
['text':' Also test string of a length which uses an untypical length','line_number':5179,'multiline':False]
['text':' Note mixed byteorder.','line_number':5208,'multiline':False]
['text':' gh-6272 check overlap on out','line_number':5215,'multiline':False]
['text':' 0d arrays should not be an exception to this rule','line_number':5222,'multiline':False]
['text':' gh-6312','line_number':5265,'multiline':False]
['text':' gh-7528','line_number':5281,'multiline':False]
['text':' This fixture covers two cases:','line_number':5298,'multiline':False]
['text':' one where the filename is a string and','line_number':5299,'multiline':False]
['text':' another where it is a pathlib object','line_number':5300,'multiline':False]
['text':' this should probably be supported as a file','line_number':5307,'multiline':False]
['text':' but for now test for proper errors','line_number':5308,'multiline':False]
['text':' NB. doesn't work with flush+seek, due to use of C stdio','line_number':5350,'multiline':False]
['text':' gh-6246','line_number':5390,'multiline':False]
['text':' gh-6632','line_number':5402,'multiline':False]
['text':' check the fallocate path on files > 16MB','line_number':5409,'multiline':False]
['text':' check offset','line_number':5414,'multiline':False]
['text':' check append mode (gh-8329)','line_number':5419,'multiline':False]
['text':' delete file contents','line_number':5420,'multiline':False]
['text':' gh-6632','line_number':5429,'multiline':False]
['text':' gh-4118','line_number':5436,'multiline':False]
['text':' gh-4118','line_number':5456,'multiline':False]
['text':' seek between read&write required by ANSI C','line_number':5475,'multiline':False]
['text':' gh-12300','line_number':5481,'multiline':False]
['text':' Ensure we have a file with consistent contents','line_number':5483,'multiline':False]
['text':' subsequent seeks should stack','line_number':5512,'multiline':False]
['text':' can't use _check_from because fromstring can't handle True/False','line_number':5653,'multiline':False]
['text':'assert_equal(s, '1.51,2.0,3.51,4.0')','line_number':5668,'multiline':False]
['text':' Dup-ed file handle should be closed or remove will fail on Windows OS','line_number':5684,'multiline':False]
['text':' Also make sure that we close the Python handle','line_number':5687,'multiline':False]
['text':' Test subarray dtypes which are absorbed into the shape','line_number':5692,'multiline':False]
['text':' binary fromstring is deprecated','line_number':5700,'multiline':False]
['text':' We currently do not support parsing subarray dtypes','line_number':5705,'multiline':False]
['text':' Test that requesting more values does not cause any problems','line_number':5717,'multiline':False]
['text':' in conjunction with subarray dimensions being absorbed into the','line_number':5718,'multiline':False]
['text':' array dimension.','line_number':5719,'multiline':False]
['text':' Objects (including NumPy arrays), which do not use the','line_number':5743,'multiline':False]
['text':' `release_buffer` slot should be directly used as a base object.','line_number':5744,'multiline':False]
['text':' See also gh-21612','line_number':5745,'multiline':False]
['text':' The old buffer protocol was not safe for some things that the new','line_number':5756,'multiline':False]
['text':' one is.  But `frombuffer` always used the old one for a long time.','line_number':5757,'multiline':False]
['text':' Checks that it is safe with the new one (using memoryviews)','line_number':5758,'multiline':False]
['text':' cannot close while array uses the buffer','line_number':5765,'multiline':False]
['text':' includes regression test for reference count error gh-13165','line_number':5815,'multiline':False]
['text':' Check the value of `.index` is updated correctly (see also gh-19153)','line_number':5836,'multiline':False]
['text':' If the type was incorrect, this would show up on big-endian machines','line_number':5837,'multiline':False]
['text':' The flat iterator and thus attribute is currently unfortunately','line_number':5841,'multiline':False]
['text':' limited to only 32 dimensions (after bumping it to 64 for 2.0)','line_number':5842,'multiline':False]
['text':' avoid pyflakes unused variable warning.','line_number':5867,'multiline':False]
['text':' to it multiple times to test it does not break alloc cache gh-9216','line_number':5886,'multiline':False]
['text':' check memory is initialized on resize, gh-4857','line_number':5924,'multiline':False]
['text':' check that sizes containing a zero don't trigger a reallocate for','line_number':5935,'multiline':False]
['text':' already empty arrays','line_number':5936,'multiline':False]
['text':' avoid pyflakes unused variable warning.','line_number':5946,'multiline':False]
['text':' Error raised when multiple fields have the same name','line_number':5959,'multiline':False]
['text':' Bytes are not allowed in field names and not recognized in titles','line_number':5963,'multiline':False]
['text':' on Py3','line_number':5964,'multiline':False]
['text':' Error raised when multiple fields have the same name(unicode included)','line_number':5981,'multiline':False]
['text':' A single name string provided to fromarrays() is allowed to be unicode','line_number':5985,'multiline':False]
['text':' on both Python 2 and 3:','line_number':5986,'multiline':False]
['text':' Test that we can sort with order as a unicode field name in both Python 2 and','line_number':5993,'multiline':False]
['text':' 3:','line_number':5994,'multiline':False]
['text':' Test unicode and 8-bit / byte strings can be used','line_number':6001,'multiline':False]
['text':' byte string indexing fails gracefully','line_number':6005,'multiline':False]
['text':' Subfield','line_number':6019,'multiline':False]
['text':' Subfield','line_number':6022,'multiline':False]
['text':' multiple subfields','line_number':6029,'multiline':False]
['text':' non-ascii unicode field indexing is well behaved','line_number':6037,'multiline':False]
['text':' make sure these do not raise errors (gh-5631)','line_number':6058,'multiline':False]
['text':' We must be specific about the endianness here:','line_number':6079,'multiline':False]
['text':' ... and again without the keyword.','line_number':6081,'multiline':False]
['text':' object type','line_number':6145,'multiline':False]
['text':' scalar case','line_number':6151,'multiline':False]
['text':' integer types','line_number':6155,'multiline':False]
['text':' scalar case','line_number':6162,'multiline':False]
['text':' mean for float types','line_number':6166,'multiline':False]
['text':' scalar case','line_number':6173,'multiline':False]
['text':' var, std for float types','line_number':6177,'multiline':False]
['text':' deal with complex types','line_number':6181,'multiline':False]
['text':' scalar case','line_number':6185,'multiline':False]
['text':' stats for integer types','line_number':6192,'multiline':False]
['text':' FIXME:','line_number':6193,'multiline':False]
['text':' this needs definition as there are lots places along the line','line_number':6194,'multiline':False]
['text':' where type casting may take place.','line_number':6195,'multiline':False]
['text':' for f in self.funcs:','line_number':6197,'multiline':False]
['text':'    for c in np.typecodes['AllInteger']:','line_number':6198,'multiline':False]
['text':'        tgt = np.dtype(c).type','line_number':6199,'multiline':False]
['text':'        res = f(mat, axis=1, dtype=c).dtype.type','line_number':6200,'multiline':False]
['text':'        assert_(res is tgt)','line_number':6201,'multiline':False]
['text':'        # scalar case','line_number':6202,'multiline':False]
['text':'        res = f(mat, axis=None, dtype=c).dtype.type','line_number':6203,'multiline':False]
['text':'        assert_(res is tgt)','line_number':6204,'multiline':False]
['text':' stats for float types','line_number':6206,'multiline':False]
['text':' scalar case','line_number':6212,'multiline':False]
['text':' This fail if the sum inside mean is done in float16 instead','line_number':6267,'multiline':False]
['text':' of float32.','line_number':6268,'multiline':False]
['text':' Ensure that AxisError is raised instead of IndexError when axis is','line_number':6272,'multiline':False]
['text':' out of bounds, see gh-15817.','line_number':6273,'multiline':False]
['text':' Test fast-paths for every builtin complex type','line_number':6328,'multiline':False]
['text':' _var paths for complex number introduce additions on views that','line_number':6338,'multiline':False]
['text':' increase dimensions. Ensure this generalizes to higher dims','line_number':6339,'multiline':False]
['text':' Test that var fast-path does not cause failures for complex arrays','line_number':6349,'multiline':False]
['text':' with non-native byteorder','line_number':6350,'multiline':False]
['text':' Ensure that AxisError is raised instead of IndexError when axis is','line_number':6356,'multiline':False]
['text':' out of bounds, see gh-15817.','line_number':6357,'multiline':False]
['text':' test real','line_number':6474,'multiline':False]
['text':' test complex','line_number':6482,'multiline':False]
['text':' test boolean','line_number':6490,'multiline':False]
['text':' integer arrays are exact','line_number':6501,'multiline':False]
['text':' Different sizes match different branches in vdot.','line_number':6508,'multiline':False]
['text':' Make a and b uncontiguous:','line_number':6513,'multiline':False]
['text':' with scalar','line_number':6647,'multiline':False]
['text':' v.shape == (16,)','line_number':6687,'multiline':False]
['text':' r.shape == (1024,)','line_number':6688,'multiline':False]
['text':' integer arrays are exact','line_number':6743,'multiline':False]
['text':' this will always segfault if the bug is present','line_number':6771,'multiline':False]
['text':' Calculation in double precision','line_number':6775,'multiline':False]
['text':' Calculation with aligned single precision','line_number':6779,'multiline':False]
['text':' Strided A rows','line_number':6783,'multiline':False]
['text':' Strided A columns, strided X vector','line_number':6788,'multiline':False]
['text':' Check the strides are as expected','line_number':6795,'multiline':False]
['text':' Strides in A rows + cols only','line_number':6801,'multiline':False]
['text':' Strides just in A cols','line_number':6804,'multiline':False]
['text':' Strides in A cols and X','line_number':6809,'multiline':False]
['text':' complex case needs 18GiB+','line_number':6814,'multiline':False]
['text':' Large vector multiplications are chunked with 32bit BLAS','line_number':6816,'multiline':False]
['text':' Test that the chunking does the right thing, see also gh-22262','line_number':6817,'multiline':False]
['text':' See gh-14247, error checking was missing for failed dtype discovery','line_number':6823,'multiline':False]
['text':' Should work with these types. Will want to add','line_number':6839,'multiline':False]
['text':' "O" at some point','line_number':6840,'multiline':False]
['text':' mismatched vector vector','line_number':6845,'multiline':False]
['text':' mismatched matrix vector','line_number':6846,'multiline':False]
['text':' mismatched vector matrix','line_number':6847,'multiline':False]
['text':' mismatched matrix matrix','line_number':6848,'multiline':False]
['text':' vector scalar','line_number':6849,'multiline':False]
['text':' scalar vector','line_number':6850,'multiline':False]
['text':' matrix scalar','line_number':6851,'multiline':False]
['text':' scalar matrix','line_number':6852,'multiline':False]
['text':' cannot broadcast','line_number':6853,'multiline':False]
['text':' broadcast first argument','line_number':6863,'multiline':False]
['text':' broadcast second argument','line_number':6864,'multiline':False]
['text':' matrix stack sizes match','line_number':6865,'multiline':False]
['text':' vector vector returns scalars.','line_number':6874,'multiline':False]
['text':' vector vector returns scalars','line_number':6891,'multiline':False]
['text':' boolean type','line_number':6908,'multiline':False]
['text':' no broadcast, we must make v1 into a 2d ndarray','line_number':6923,'multiline':False]
['text':' boolean type','line_number':6927,'multiline':False]
['text':' boolean type','line_number':6947,'multiline':False]
['text':' boolean type','line_number':6974,'multiline':False]
['text':' matrix @ matrix','line_number':7003,'multiline':False]
['text':' stacked @ matrix','line_number':7009,'multiline':False]
['text':' matrix @ stacked','line_number':7013,'multiline':False]
['text':' stacked @ stacked','line_number':7017,'multiline':False]
['text':' boolean type','line_number':7021,'multiline':False]
['text':' matrix @ matrix','line_number':7033,'multiline':False]
['text':' stacked @ matrix','line_number':7039,'multiline':False]
['text':' matrix @ stacked','line_number':7043,'multiline':False]
['text':' stacked @ stacked','line_number':7047,'multiline':False]
['text':' test as positional argument','line_number':7060,'multiline':False]
['text':' test as keyword argument','line_number':7066,'multiline':False]
['text':' test out with not allowed type cast (safe casting)','line_number':7072,'multiline':False]
['text':' test out with type upcast to complex','line_number':7077,'multiline':False]
['text':' Check that the output cannot be broadcast, so that it cannot be','line_number':7087,'multiline':False]
['text':' size zero when the outer dimensions (iterator size) has size zero.','line_number':7088,'multiline':False]
['text':' test out non-contiguous','line_number':7103,'multiline':False]
['text':' test out contiguous in only last dim','line_number':7113,'multiline':False]
['text':' test transposes of out, args','line_number':7118,'multiline':False]
['text':' non-contiguous','line_number':7125,'multiline':False]
['text':' matrix-matrix','line_number':7130,'multiline':False]
['text':' matrix-matrix-transpose, contiguous and non','line_number':7132,'multiline':False]
['text':' matrix-matrix non-contiguous','line_number':7135,'multiline':False]
['text':' vector-matrix, matrix-vector, contiguous','line_number':7137,'multiline':False]
['text':' vector-matrix, matrix-vector, vector non-contiguous','line_number':7139,'multiline':False]
['text':' vector-matrix, matrix-vector, matrix non-contiguous','line_number':7141,'multiline':False]
['text':' vector-matrix, matrix-vector, both non-contiguous','line_number':7143,'multiline':False]
['text':' size == 0','line_number':7145,'multiline':False]
['text':' test that matmul fails if `__mul__` is missing','line_number':7184,'multiline':False]
['text':' test that matmul fails if `__add__` is missing','line_number':7193,'multiline':False]
['text':' gh-14439','line_number':7202,'multiline':False]
['text':' matmul with boolean output should always be 0, 1','line_number':7206,'multiline':False]
['text':' Ticket 844.','line_number':7339,'multiline':False]
['text':' Inner product of a vector with itself segfaults or give','line_number':7340,'multiline':False]
['text':' meaningless result','line_number':7341,'multiline':False]
['text':' github issue 6532','line_number':7347,'multiline':False]
['text':' check an inner product involving a matrix transpose','line_number':7349,'multiline':False]
['text':' check a matrix product','line_number':7358,'multiline':False]
['text':' check the syrk vs. gemm paths','line_number':7361,'multiline':False]
['text':' check an inner product involving an aliased and reversed view','line_number':7365,'multiline':False]
['text':' Maxdims for the legacy iterator is 32, but the maximum number','line_number':7428,'multiline':False]
['text':' of arguments is actually larger (a itself also counts here)','line_number':7429,'multiline':False]
['text':' Choose is unfortunately limited to 32 dims as of NumPy 2.0','line_number':7437,'multiline':False]
['text':' TODO: test for multidimensional','line_number':7481,'multiline':False]
['text':' Simple, 2d tests','line_number':7487,'multiline':False]
['text':' Test zero and one padding for simple data type','line_number':7489,'multiline':False]
['text':' Test with start in the middle','line_number':7515,'multiline':False]
['text':' Simple, 1d tests','line_number':7532,'multiline':False]
['text':' Test padding with constant values','line_number':7534,'multiline':False]
['text':' Test mirror modes','line_number':7551,'multiline':False]
['text':' Circular mode','line_number':7561,'multiline':False]
['text':' Test stacking neighborhood iterators','line_number':7571,'multiline':False]
['text':' Simple, 1d test: stacking 2 constant-padded neigh iterators','line_number':7573,'multiline':False]
['text':' Test zero and one padding for simple data type','line_number':7576,'multiline':False]
['text':' 2nd simple, 1d test: stacking 2 neigh iterators, mixing const padding and','line_number':7598,'multiline':False]
['text':' mirror padding','line_number':7599,'multiline':False]
['text':' Stacking zero on top of mirror','line_number':7602,'multiline':False]
['text':' Stacking mirror on top of zero','line_number':7613,'multiline':False]
['text':' Stacking mirror on top of zero: 2nd','line_number':7624,'multiline':False]
['text':' Stacking mirror on top of zero: 3rd','line_number':7635,'multiline':False]
['text':' 3rd simple, 1d test: stacking 2 neigh iterators, mixing const padding and','line_number':7646,'multiline':False]
['text':' circular padding','line_number':7647,'multiline':False]
['text':' Stacking zero on top of mirror','line_number':7650,'multiline':False]
['text':' Stacking mirror on top of zero','line_number':7661,'multiline':False]
['text':' Stacking mirror on top of zero: 2nd','line_number':7672,'multiline':False]
['text':' Stacking mirror on top of zero: 3rd','line_number':7683,'multiline':False]
['text':' 4th simple, 1d test: stacking 2 neigh iterators, but with lower iterator','line_number':7694,'multiline':False]
['text':' being strictly within the array','line_number':7695,'multiline':False]
['text':' Stacking zero on top of zero, first neighborhood strictly inside the','line_number':7698,'multiline':False]
['text':' array','line_number':7699,'multiline':False]
['text':' Stacking mirror on top of zero, first neighborhood strictly inside the','line_number':7706,'multiline':False]
['text':' array','line_number':7707,'multiline':False]
['text':' Stacking mirror on top of zero, first neighborhood strictly inside the','line_number':7714,'multiline':False]
['text':' array','line_number':7715,'multiline':False]
['text':' Native padding should work also for structs and sub-arrays','line_number':7785,'multiline':False]
['text':' Trailing padding should be included, *and*, the item size','line_number':7790,'multiline':False]
['text':' should match the alignment if in aligned mode','line_number':7791,'multiline':False]
['text':' The byte order after @T{=i} should be '=', not '@'.','line_number':7832,'multiline':False]
['text':' Check this by noting the absence of native alignment.','line_number':7833,'multiline':False]
['text':' Natively aligned sub-arrays may require some internal padding','line_number':7838,'multiline':False]
['text':' gh-9053 - previously, we relied on dictionary key order','line_number':7860,'multiline':False]
['text':' check long long can be represented as non-native','line_number':7944,'multiline':False]
['text':' Native-only data types can be passed through the buffer interface','line_number':7948,'multiline':False]
['text':' only in native byte order','line_number':7949,'multiline':False]
['text':' (max half precision)','line_number':7965,'multiline':False]
['text':' ~= 6.10352 * 10**-5 (minimum positive normal)','line_number':7966,'multiline':False]
['text':' ~= 5.96046 * 10**-8 (minimum strictly positive subnormal)','line_number':7967,'multiline':False]
['text':' ~= 1/3','line_number':7972,'multiline':False]
['text':' datetimes cannot be used in buffers','line_number':7985,'multiline':False]
['text':' skip void','line_number':7988,'multiline':False]
['text':' Issue #4015.','line_number':8004,'multiline':False]
['text':' datetime64 cannot be used fully in a buffer yet','line_number':8008,'multiline':False]
['text':' Should be fixed in the next Numpy major release','line_number':8009,'multiline':False]
['text':' Check SIMPLE flag, see also gh-3613 (exception should be BufferError)','line_number':8111,'multiline':False]
['text':' User dtypes should export successfully when FORMAT was not requested.','line_number':8120,'multiline':False]
['text':' This is currently also necessary to implement pickling:','line_number':8126,'multiline':False]
['text':' avoid pyflakes unused variable warning.','line_number':8145,'multiline':False]
['text':' Note: c defined as parameter so that it is persistent and leak','line_number':8168,'multiline':False]
['text':' checks will notice gh-16934 (buffer info cache leak).','line_number':8169,'multiline':False]
['text':' strides need to be fixed at export','line_number':8170,'multiline':False]
['text':' Writing C-contiguous data to a BytesIO buffer should work','line_number':8174,'multiline':False]
['text':' overlapping fields cannot be represented by PEP3118','line_number':8199,'multiline':False]
['text':' Try constructing a memory with too many dimensions:','line_number':8216,'multiline':False]
['text':' The above seems to create some deep cycles, clean them up for','line_number':8228,'multiline':False]
['text':' easier reference count debugging:','line_number':8229,'multiline':False]
['text':' gh-6741','line_number':8236,'multiline':False]
['text':' wchar has no corresponding numpy type - if this changes in future, we','line_number':8245,'multiline':False]
['text':' need a better way to construct an invalid memoryview format.','line_number':8246,'multiline':False]
['text':' gh-11150, due to bpo-10746','line_number':8259,'multiline':False]
['text':' gh-10528','line_number':8267,'multiline':False]
['text':' corrupt buffer info:','line_number':8291,'multiline':False]
['text':' Fix buffer info again before we delete (or we lose the memory)','line_number':8297,'multiline':False]
['text':' Also check (unrelated and more limited but similar) frombuffer:','line_number':8316,'multiline':False]
['text':' Test both numpy and python scalars','line_number':8332,'multiline':False]
['text':' Test never-copy raises error:','line_number':8338,'multiline':False]
['text':' Casting with a dtype (to unsigned integers) can be special:','line_number':8347,'multiline':False]
['text':' Some types are compatible even though they are different, no','line_number':8353,'multiline':False]
['text':' copy is necessary for them. This is mostly true for some integers','line_number':8354,'multiline':False]
['text':' Casting is not necessary, base check is sufficient here','line_number':8373,'multiline':False]
['text':' Casting is necessary, assert copy works:','line_number':8384,'multiline':False]
['text':' Buffer interface gives direct memory access (no copy)','line_number':8399,'multiline':False]
['text':' Checking bases is a bit tricky since numpy creates another','line_number':8403,'multiline':False]
['text':' memoryview, so use may_share_memory.','line_number':8404,'multiline':False]
['text':' Array interface gives direct memory access (much like a memoryview)','line_number':8415,'multiline':False]
['text':' __array__ should return a copy, numpy cannot know this','line_number':8434,'multiline':False]
['text':' however.','line_number':8435,'multiline':False]
['text':' An additional copy is currently forced by numpy in this case,','line_number':8443,'multiline':False]
['text':' you could argue, numpy does not trust the ArrayLike. This','line_number':8444,'multiline':False]
['text':' may be open for change:','line_number':8445,'multiline':False]
['text':' numpy trusts the ArrayLike','line_number':8451,'multiline':False]
['text':' The order is the main (python side) reason that can cause','line_number':8461,'multiline':False]
['text':' a never-copy to fail.','line_number':8462,'multiline':False]
['text':' Prepare C-order, F-order and non-contiguous arrays:','line_number':8463,'multiline':False]
['text':' Make array non-contiguous','line_number':8470,'multiline':False]
['text':' Whether a copy is necessary depends on the order of arr:','line_number':8474,'multiline':False]
['text':' Keeporder and Anyorder are OK with non-contiguous output.','line_number':8480,'multiline':False]
['text':' This is not consistent with the `astype` behaviour which','line_number':8481,'multiline':False]
['text':' enforces contiguity for "A". It is probably historic from when','line_number':8482,'multiline':False]
['text':' "K" did not exist.','line_number':8483,'multiline':False]
['text':' Test it for both the array and a memoryview','line_number':8486,'multiline':False]
['text':' res.base.obj refers to the memoryview','line_number':8496,'multiline':False]
['text':' ticket #2046, should not seqfault, raise AttributeError','line_number':8534,'multiline':False]
['text':' Test scalar coercion within the array interface','line_number':8594,'multiline':False]
['text':' See gh-6361','line_number':8618,'multiline':False]
['text':' See gh-7994','line_number':8628,'multiline':False]
['text':' NOTE: Because Py2 str/Py3 bytes supports the buffer interface, setting','line_number':8636,'multiline':False]
['text':' the interface data to bytes would invoke the bug this tests for, that','line_number':8637,'multiline':False]
['text':' __array_interface__ with shape=() is not allowed if the data is an object','line_number':8638,'multiline':False]
['text':' exposing the buffer interface','line_number':8639,'multiline':False]
['text':' should not be UnicodeEncodeError','line_number':8674,'multiline':False]
['text':' All integer','line_number':8713,'multiline':False]
['text':' Unsigned integers','line_number':8724,'multiline':False]
['text':' Unsigned vs signed','line_number':8730,'multiline':False]
['text':' Signed integers and floats','line_number':8739,'multiline':False]
['text':' previously stack overflow','line_number':8773,'multiline':False]
['text':' resolve circular reference','line_number':8774,'multiline':False]
['text':' gh-9972 means that these aren't always the same','line_number':8777,'multiline':False]
['text':' gh-9972','line_number':8787,'multiline':False]
['text':' The delegation of int() to __trunc__ was deprecated in','line_number':8792,'multiline':False]
['text':' Python 3.11.','line_number':8793,'multiline':False]
['text':' object','line_number':8842,'multiline':False]
['text':' zero sized','line_number':8844,'multiline':False]
['text':' object cast','line_number':8849,'multiline':False]
['text':' minimal dtype result with NaN scalar (e.g required by pandas)','line_number':8870,'multiline':False]
['text':' With NEP 50 adopted, the float will overflow here:','line_number':8878,'multiline':False]
['text':' non bool mask','line_number':8912,'multiline':False]
['text':' invert','line_number':8916,'multiline':False]
['text':' gh-4778 check strings are properly filled with nulls','line_number':8949,'multiline':False]
['text':' check native datatype sized strings','line_number':8955,'multiline':False]
['text':' pass empty where result through an assignment which reads the data of','line_number':8962,'multiline':False]
['text':' empty arrays, error detectable with valgrind, see gh-8922','line_number':8963,'multiline':False]
['text':' invalid read regression gh-9304','line_number':8970,'multiline':False]
['text':' sys.getsizeof() is not valid on PyPy','line_number':8987,'multiline':False]
['text':' This will go away when __array_priority__ is settled, meanwhile','line_number':9047,'multiline':False]
['text':' it serves to check unintended changes.','line_number':9048,'multiline':False]
['text':' gh-15363','line_number':9155,'multiline':False]
['text':' gh-3258','line_number':9164,'multiline':False]
['text':' gh-7227','line_number':9170,'multiline':False]
['text':' until gh-5543, ensure that the behaviour matches what it used to be','line_number':9209,'multiline':False]
['text':' gh-9647','line_number':9268,'multiline':False]
['text':' create a copy to ensure that pytest does not mess with the refcounts','line_number':9269,'multiline':False]
['text':' `ctypes_ptr` should hold onto `arr`','line_number':9276,'multiline':False]
['text':' but when the `ctypes_ptr` object dies, so should `arr`','line_number':9281,'multiline':False]
['text':' Pypy does not recycle arr objects immediately. Trigger gc to','line_number':9284,'multiline':False]
['text':' release arr. Cpython uses refcounts. An explicit call to gc','line_number':9285,'multiline':False]
['text':' should not be needed here.','line_number':9286,'multiline':False]
['text':' `ctypes_ptr` should hold onto `arr`','line_number':9297,'multiline':False]
['text':' but when the `ctypes_ptr` object dies, so should `arr`','line_number':9302,'multiline':False]
['text':' all these tests use the WRITEBACKIFCOPY mechanism','line_number':9310,'multiline':False]
['text':' force non-c-contiguous','line_number':9324,'multiline':False]
['text':' uses arr_insert','line_number':9325,'multiline':False]
['text':' hit one of the failing paths','line_number':9328,'multiline':False]
['text':' force non-c-contiguous','line_number':9332,'multiline':False]
['text':' force non-c-contiguous','line_number':9337,'multiline':False]
['text':' uses arr_putmask','line_number':9338,'multiline':False]
['text':' triggers the WRITEBACKIFCOPY resolution, assuming refcount semantics','line_number':9361,'multiline':False]
['text':' if HAVE_CBLAS, will use WRITEBACKIFCOPY','line_number':9365,'multiline':False]
['text':' arr changes after resolve, even though we assigned to arr_wb','line_number':9381,'multiline':False]
['text':' after resolve, the two arrays no longer reference each other','line_number':9383,'multiline':False]
['text':' assigning to arr_wb does not get transferred to arr','line_number':9386,'multiline':False]
['text':' arr remains unchanged after discard','line_number':9414,'multiline':False]
['text':' after discard, the two arrays no longer reference each other','line_number':9416,'multiline':False]
['text':' assigning to arr_wb does not get transferred to arr','line_number':9421,'multiline':False]
['text':' empty range','line_number':9443,'multiline':False]
['text':' Arange makes some sense for booleans and works up to length 2.','line_number':9464,'multiline':False]
['text':' But it is weird since `arange(2, 4, dtype=bool)` works.','line_number':9465,'multiline':False]
['text':' Arguably, much or all of this could be deprecated/removed.','line_number':9466,'multiline':False]
['text':' This case is especially weird, but drops out without special case:','line_number':9476,'multiline':False]
['text':' Explicitly test error for strings which may call "b" - "a":','line_number':9492,'multiline':False]
['text':' start, stop, and step','line_number':9507,'multiline':False]
['text':' should ensure float64 output','line_number':9508,'multiline':False]
['text':' Cover stranger error path, test only to achieve code coverage!','line_number':9512,'multiline':False]
['text':' Fails discovering start dtype','line_number':9515,'multiline':False]
['text':' gh-11237','line_number':9523,'multiline':False]
['text':' gh-11237','line_number':9557,'multiline':False]
['text':' crash, but keep this object alive','line_number':9560,'multiline':False]
['text':' a plain object can't be weakref'd','line_number':9563,'multiline':False]
['text':' get a weak reference to an object within an array','line_number':9566,'multiline':False]
['text':' get an array that crashed in __array_finalize__','line_number':9570,'multiline':False]
['text':' reference should still be held by obj_arr','line_number':9578,'multiline':False]
['text':' gh-7475','line_number':9600,'multiline':False]
['text':' gh-9153: ndarray.__eq__ uses special logic for structured arrays, which','line_number':9606,'multiline':False]
['text':' did not respect overrides with __array_priority__ or __array_ufunc__.','line_number':9607,'multiline':False]
['text':' The PR fixed this for __array_priority__ and __array_ufunc__ = None.','line_number':9608,'multiline':False]
['text':' structured comparison (successful)','line_number':9633,'multiline':False]
['text':' impossible comparison: result is all True or False','line_number':9634,'multiline':False]
['text':' valid comparison','line_number':9635,'multiline':False]
['text':' Test how the three different possible code-paths deal with subclasses','line_number':9638,'multiline':False]
['text':' We expect 2 calls (more if there were more fields):','line_number':9652,'multiline':False]
['text':' Missing: ("m8[ns]", "l") as timedelta currently promotes ints','line_number':9660,'multiline':False]
['text':' Structured/void dtypes have explicit paths not tested here.','line_number':9663,'multiline':False]
['text':' Make sure they broadcast to test result shape, use random values, since','line_number':9666,'multiline':False]
['text':' the actual value should be ignored','line_number':9667,'multiline':False]
['text':' incompatible shapes raise though','line_number':9681,'multiline':False]
['text':' Basic test with another operation:','line_number':9689,'multiline':False]
['text':' These are currently guaranteed to be the boolean singletons, but maybe','line_number':9710,'multiline':False]
['text':' returning NumPy booleans would also be OK:','line_number':9711,'multiline':False]
['text':' This needs to convert the internal array to True/False, which fails:','line_number':9722,'multiline':False]
['text':' Smoketest npymath functions','line_number':9741,'multiline':False]
['text':' Fallback implementations may emit a warning for +-inf (see gh-24876):','line_number':9744,'multiline':False]
['text':'     RuntimeWarning: invalid value encountered in absolute','line_number':9745,'multiline':False]
['text':' Smoketest npymath functions','line_number':9752,'multiline':False]
['text':' alignment code needs to satisfy these requirements:','line_number':9773,'multiline':False]
['text':'  1. numpy structs match C struct layout','line_number':9774,'multiline':False]
['text':'  2. ufuncs/casting is safe wrt to aligned access','line_number':9775,'multiline':False]
['text':'  3. copy code is safe wrt to "uint alidned" access','line_number':9776,'multiline':False]
['text':'','line_number':9777,'multiline':False]
['text':' Complex types are the main problem, whose alignment may not be the same','line_number':9778,'multiline':False]
['text':' as their "uint alignment".','line_number':9779,'multiline':False]
['text':'','line_number':9780,'multiline':False]
['text':' This test might only fail on certain platforms, where uint64 alignment is','line_number':9781,'multiline':False]
['text':' not equal to complex64 alignment. The second 2 tests will only fail','line_number':9782,'multiline':False]
['text':' for DEBUG=1.','line_number':9783,'multiline':False]
['text':' check that C struct matches numpy struct size','line_number':9793,'multiline':False]
['text':' check that ufuncs don't complain in debug mode','line_number':9799,'multiline':False]
['text':' (this is probably OK if the aligned flag is true above)','line_number':9800,'multiline':False]
['text':' 4-byte aligned, often','line_number':9801,'multiline':False]
['text':' assert fails?','line_number':9802,'multiline':False]
['text':' check that copy code doesn't complain in debug mode','line_number':9804,'multiline':False]
['text':' assert in lowlevel_strided_loops fails?','line_number':9806,'multiline':False]
['text':' adapted from scipy._lib.tests.test__util.test__aligned_zeros','line_number':9809,'multiline':False]
['text':' Checks that unusual memory alignments don't trip up numpy.','line_number':9810,'multiline':False]
['text':' object dtype can't be misaligned','line_number':9839,'multiline':False]
['text':' particularly test that complex64 and float128 use right alignment','line_number':9845,'multiline':False]
['text':' code-paths, since these are particularly problematic. It is useful to','line_number':9846,'multiline':False]
['text':' turn on USE_DEBUG for this test, so lowlevel-loop asserts are run.','line_number':9847,'multiline':False]
['text':' test casting, both to and from misaligned','line_number':9854,'multiline':False]
['text':' test copy, both to and from misaligned','line_number':9867,'multiline':False]
['text':' contig copy','line_number':9868,'multiline':False]
['text':' strided copy','line_number':9872,'multiline':False]
['text':' x is non-contiguous','line_number':9899,'multiline':False]
['text':' x is non-contiguous','line_number':9908,'multiline':False]
['text':' Make sure the problem is because of the dtype size','line_number':9918,'multiline':False]
['text':' x is non-contiguous in the first dimension, contiguous in the last','line_number':9923,'multiline':False]
['text':' x is non-contiguous in the first dimension, contiguous in the last','line_number':9930,'multiline':False]
['text':' Make sure the problem is because of the dtype size','line_number':9935,'multiline':False]
['text':' x is F-contiguous','line_number':9941,'multiline':False]
['text':' x is contiguous in axis=-1, but not C-contiguous in other axes','line_number':9948,'multiline':False]
['text':' Test various array sizes that hit different code paths in quicksort-avx512','line_number':9958,'multiline':False]
['text':' Regular data with nan sprinkled','line_number':9962,'multiline':False]
['text':' (2) with +INF','line_number':9968,'multiline':False]
['text':' (3) with -INF','line_number':9973,'multiline':False]
['text':' (4) with +/-INF','line_number':9979,'multiline':False]
['text':' Random data with MAX and MIN sprinkled','line_number':9997,'multiline':False]
['text':' Random data with NPY_MAX_UINT32 sprinkled','line_number':10007,'multiline':False]
['text':' (1) Regular data with a few nan: doesn't use vectorized sort','line_number':10023,'multiline':False]
['text':' (2) Random data with inf at the end of array','line_number':10028,'multiline':False]
['text':' See: https://github.com/intel/x86-simd-sort/pull/39','line_number':10029,'multiline':False]
['text':' (1) random data with min and max values','line_number':10039,'multiline':False]
['text':' (2) random data with max value at the end of array','line_number':10048,'multiline':False]
['text':' See: https://github.com/intel/x86-simd-sort/pull/39','line_number':10049,'multiline':False]
['text':' (1) random data with min and max values','line_number':10077,'multiline':False]
['text':' (2) random data with max value at the end of array','line_number':10090,'multiline':False]
