['text':' int index','line_number':25,'multiline':False]
['text':' all assignments of size "nelems"','line_number':43,'multiline':False]
['text':' Test automatically generated assignments which overlap in memory.','line_number':70,'multiline':False]
['text':' Fuzz test the diophantine solver','line_number':83,'multiline':False]
['text':' Ensure big and small integer problems','line_number':95,'multiline':False]
['text':' Check the simplified decision problem agrees','line_number':116,'multiline':False]
['text':' Check no solution exists (provided the problem is','line_number':120,'multiline':False]
['text':' small enough so that brute force checking doesn't','line_number':121,'multiline':False]
['text':' take too long)','line_number':122,'multiline':False]
['text':' Check the simplified decision problem agrees','line_number':132,'multiline':False]
['text':' Check validity','line_number':136,'multiline':False]
['text':' Smoke test integer overflow detection','line_number':143,'multiline':False]
['text':' Check that the algorithm works internally in 128-bit;','line_number':148,'multiline':False]
['text':' solving this problem requires large intermediate numbers','line_number':149,'multiline':False]
['text':' Manual test cases for may_share_memory','line_number':184,'multiline':False]
['text':' Base arrays','line_number':186,'multiline':False]
['text':' Generate all negative stride combinations','line_number':192,'multiline':False]
['text':' The default is a simple extent check','line_number':200,'multiline':False]
['text':' Exact checks','line_number':204,'multiline':False]
['text':' 0-size arrays cannot overlap','line_number':216,'multiline':False]
['text':' Test itemsize is dealt with','line_number':220,'multiline':False]
['text':' Check unit size','line_number':228,'multiline':False]
['text':' First a few regular views','line_number':258,'multiline':False]
['text':' An array with zero stride internal overlap','line_number':264,'multiline':False]
['text':' An array with non-zero stride internal overlap','line_number':271,'multiline':False]
['text':' Then discontiguous views','line_number':279,'multiline':False]
['text':' Check that overlap problems with common strides are solved with','line_number':323,'multiline':False]
['text':' little work.','line_number':324,'multiline':False]
['text':' assert_equal is slow...','line_number':341,'multiline':False]
['text':' Check that overlap problems with common strides are always','line_number':356,'multiline':False]
['text':' solved with little work.','line_number':357,'multiline':False]
['text':' Overlap problems with not necessarily common strides take more','line_number':366,'multiline':False]
['text':' work.','line_number':367,'multiline':False]
['text':'','line_number':368,'multiline':False]
['text':' The work bound below can't be reduced much. Harder problems can','line_number':369,'multiline':False]
['text':' also exist but not be detected here, as the set of problems','line_number':370,'multiline':False]
['text':' comes from RNG.','line_number':371,'multiline':False]
['text':' Smoke tests','line_number':416,'multiline':False]
['text':' Slicing an array never generates internal overlap','line_number':422,'multiline':False]
['text':' Brute-force check','line_number':455,'multiline':False]
['text':' Compare','line_number':468,'multiline':False]
['text':' Stride tricks can construct arrays with internal overlap','line_number':477,'multiline':False]
['text':' We don't care about memory bounds, the array is not','line_number':479,'multiline':False]
['text':' read/write accessed','line_number':480,'multiline':False]
['text':' Check low-dimensional special cases','line_number':483,'multiline':False]
['text':' 1-dim','line_number':485,'multiline':False]
['text':' 0-dim','line_number':486,'multiline':False]
['text':' Fuzz check; the brute-force check is fairly slow','line_number':514,'multiline':False]
['text':' Regression check for gh-5604','line_number':542,'multiline':False]
['text':' Determine size for reduction axis (None if scalar)','line_number':634,'multiline':False]
['text':' Slice b to get an output array of the correct size','line_number':639,'multiline':False]
['text':' Check result','line_number':664,'multiline':False]
['text':' Complex typically has a smaller alignment than itemsize','line_number':673,'multiline':False]
['text':' accumulate doesn't support this','line_number':682,'multiline':False]
['text':' reduceat doesn't support this','line_number':702,'multiline':False]
['text':' Exactly same input/output arrays','line_number':725,'multiline':False]
['text':' Overlap with index','line_number':729,'multiline':False]
['text':' Ensure the shapes are so that euclidean_pdist is happy','line_number':754,'multiline':False]
['text':' Call','line_number':770,'multiline':False]
['text':' Overlap with index','line_number':792,'multiline':False]
['text':' Overlap with second data array','line_number':796,'multiline':False]
['text':' Exercise ufunc fast-paths (that avoid creation of an `np.nditer`)','line_number':802,'multiline':False]
['text':' Trigger "fancy ufunc loop" code path','line_number':813,'multiline':False]
['text':' Also, mask overlapping with output','line_number':824,'multiline':False]
['text':' Scalar cases','line_number':863,'multiline':False]
['text':' Check behavior at wheremask overlap','line_number':870,'multiline':False]
['text':' Check behavior with same input and output arrays','line_number':878,'multiline':False]
['text':' Check different data dependency orders','line_number':896,'multiline':False]
['text':' Scalar cases','line_number':918,'multiline':False]
['text':' bigger than bufsize','line_number':930,'multiline':False]
