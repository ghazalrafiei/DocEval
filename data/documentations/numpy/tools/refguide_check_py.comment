['text':'!/usr/bin/env python3','line_number':1,'multiline':False]
['text':' Enable specific Sphinx directives','line_number':54,'multiline':False]
['text':' Docs for these modules are included in the parent module','line_number':92,'multiline':False]
['text':' these names are known to fail doctesting and we like to keep it that way','line_number':99,'multiline':False]
['text':' e.g. sometimes pseudocode is acceptable etc','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' Optionally, a subset of methods can be skipped by setting dict-values','line_number':102,'multiline':False]
['text':' to a container of method-names','line_number':103,'multiline':False]
['text':' cases where NumPy docstrings import things from SciPy:','line_number':105,'multiline':False]
['text':' cases where NumPy docstrings import things from other 3'rd party libs:','line_number':112,'multiline':False]
['text':' remote / local file IO with DataSource is problematic in doctest:','line_number':114,'multiline':False]
['text':' Skip non-numpy RST files, historical release notes','line_number':119,'multiline':False]
['text':' Any single-directory exact match will skip the directory and all subdirs.','line_number':120,'multiline':False]
['text':' Any exact match (like 'doc/release') will scan subdirs but skip files in','line_number':121,'multiline':False]
['text':' the matched directory.','line_number':122,'multiline':False]
['text':' Any filename will skip that file','line_number':123,'multiline':False]
['text':' See PR 17222, these should be fixed','line_number':138,'multiline':False]
['text':' these names are not required to be present in ALL despite being in','line_number':146,'multiline':False]
['text':' autosummary:: listing','line_number':147,'multiline':False]
['text':' these names are not required to be in an autosummary:: listing','line_number':155,'multiline':False]
['text':' despite being in ALL','line_number':156,'multiline':False]
['text':' NOTE: should NumPy have a better match between autosummary','line_number':158,'multiline':False]
['text':' listings and __all__? For now, TR isn't convinced this is a','line_number':159,'multiline':False]
['text':' priority -- focus on just getting docstrings executed / correct','line_number':160,'multiline':False]
['text':' deprecated windows in scipy.signal namespace','line_number':163,'multiline':False]
['text':' Must be a pure documentation module','line_number':281,'multiline':False]
['text':' Modules are almost always private; real submodules need a separate','line_number':284,'multiline':False]
['text':' run of refguide_check.','line_number':285,'multiline':False]
['text':' Run through docutils','line_number':477,'multiline':False]
['text':' Print errors, disregarding unimportant ones','line_number':498,'multiline':False]
['text':' python 3','line_number':556,'multiline':False]
['text':'## Doctest helpers ####','line_number':611,'multiline':False]
['text':' the namespace to run examples in','line_number':613,'multiline':False]
['text':' the namespace to do checks in','line_number':616,'multiline':False]
['text':' recognize numpy repr's','line_number':622,'multiline':False]
['text':' cut it short if they are equal','line_number':697,'multiline':False]
['text':' skip stopwords in source','line_number':701,'multiline':False]
['text':' skip random stuff','line_number':705,'multiline':False]
['text':' skip function/object addresses','line_number':709,'multiline':False]
['text':' ignore comments (e.g. signal.freqresp)','line_number':713,'multiline':False]
['text':' try the standard doctest','line_number':717,'multiline':False]
['text':' OK then, convert strings to objects','line_number':724,'multiline':False]
['text':' Maybe we're printing a numpy array? This produces invalid python','line_number':729,'multiline':False]
['text':' code: `print(np.arange(3))` produces "[0 1 2]" w/o commas between','line_number':730,'multiline':False]
['text':' values. So, reinsert commas and retry.','line_number':731,'multiline':False]
['text':' TODO: handle (1) abbreviation (`print(np.arange(10000))`), and','line_number':732,'multiline':False]
['text':'              (2) n-dim arrays with n > 1','line_number':733,'multiline':False]
['text':' suppose that "want"  is a tuple, and "got" is smth like','line_number':745,'multiline':False]
['text':' MoodResult(statistic=10, pvalue=0.1).','line_number':746,'multiline':False]
['text':' Then convert the latter to the tuple (10, 0.1),','line_number':747,'multiline':False]
['text':' and then compare the tuples.','line_number':748,'multiline':False]
['text':' no more than one for now','line_number':755,'multiline':False]
['text':' fold it back to a tuple','line_number':757,'multiline':False]
['text':' ... and defer to numpy','line_number':763,'multiline':False]
['text':' heterog tuple, eg (1, np.array([1., 2.]))','line_number':767,'multiline':False]
['text':' This should be done exactly as written to correctly handle all of','line_number':774,'multiline':False]
['text':' numpy-comparable objects, strings, and heterogeneous tuples','line_number':775,'multiline':False]
['text':' Redirect stderr to the stdout or output','line_number':809,'multiline':False]
['text':' Run tests, trying to restore global state afterward','line_number':823,'multiline':False]
['text':' try to ensure random seed is NOT reproducible','line_number':827,'multiline':False]
['text':' We broke the tests up into chunks to try to avoid PSEUDOCODE','line_number':832,'multiline':False]
['text':' This has the unfortunate side effect of restarting the global','line_number':833,'multiline':False]
['text':' namespace for each test chunk, so variables will be "lost" after','line_number':834,'multiline':False]
['text':' a chunk. Chain the globals to avoid this','line_number':835,'multiline':False]
['text':' Process our options','line_number':838,'multiline':False]
['text':' Loop over non-deprecated items','line_number':875,'multiline':False]
['text':' likely need compiling, skip it','line_number':999,'multiline':False]
['text':' ctypes integrate tutotial','line_number':1000,'multiline':False]
['text':' split the text into "blocks" and try to detect and omit pseudocode blocks.','line_number':1003,'multiline':False]
['text':' fix line number since `parser.get_doctest` does not increment','line_number':1012,'multiline':False]
['text':' the reported line number by base_line_no in the error message','line_number':1013,'multiline':False]
['text':' omit it','line_number':1020,'multiline':False]
['text':' `part` looks like a good code, let's doctest it','line_number':1023,'multiline':False]
['text':' Reassemble the good bits and doctest them:','line_number':1027,'multiline':False]
['text':' stub out a "module" which is needed when reporting the result','line_number':1102,'multiline':False]
['text':' Report results','line_number':1229,'multiline':False]
