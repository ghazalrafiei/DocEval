['text':' Nonzero boolean function ','line_number':43,'multiline':True]
['text':' Handle zero-sized arrays specially ','line_number':52,'multiline':True]
['text':'
         * Create and use an iterator to count the nonzeros.
         *   flag NPY_ITER_READONLY
         *     - The array is never written to.
         *   flag NPY_ITER_EXTERNAL_LOOP
         *     - Inner loop is done outside the iterator for efficiency.
         *   flag NPY_ITER_NPY_ITER_REFS_OK
         *     - Reference types are acceptable.
         *   order NPY_KEEPORDER
         *     - Visit elements in memory order, regardless of strides.
         *       This is good for performance when the specific order
         *       elements are visited is unimportant.
         *   casting NPY_NO_CASTING
         *     - No casting is required for this operation.
         ','line_number':57,'multiline':True]
['text':'
         * The iternext function gets stored in a local variable
         * so it can be called repeatedly in an efficient manner.
         ','line_number':81,'multiline':True]
['text':' The location of the data pointer which the iterator may update ','line_number':90,'multiline':True]
['text':' The location of the stride which the iterator may update ','line_number':92,'multiline':True]
['text':' The location of the inner loop size which the iterator may update ','line_number':94,'multiline':True]
['text':' Get the inner loop data/stride/count values ','line_number':99,'multiline':True]
['text':' This is a typical inner loop for NPY_ITER_EXTERNAL_LOOP ','line_number':104,'multiline':True]
['text':' Increment the iterator to the next inner loop ','line_number':112,'multiline':True]
['text':'
         * No inner iteration - inner loop is handled by CopyArray code
         ','line_number':139,'multiline':True]
['text':'
         * Tell the constructor to automatically allocate the output.
         * The data type of the output will match that of the input.
         ','line_number':143,'multiline':True]
['text':' Construct the iterator ','line_number':152,'multiline':True]
['text':'
         * Make a copy of the iternext function pointer and
         * a few other variables the inner loop needs.
         ','line_number':159,'multiline':True]
['text':'
         * The inner loop size and data pointers may change during the
         * loop, so just cache the addresses.
         ','line_number':166,'multiline':True]
['text':'
         * Note that because the iterator allocated the output,
         * it matches the iteration order and is packed tightly,
         * so we don't need to check it like the input.
         ','line_number':173,'multiline':True]
['text':' For efficiency, should specialize this based on item size... ','line_number':184,'multiline':True]
['text':' Get the result from the iterator object array ','line_number':195,'multiline':True]
['text':' # iteration axes ','line_number':725,'multiline':True]
['text':' 3-D operand ','line_number':726,'multiline':True]
['text':' 2-D operand ','line_number':727,'multiline':True]
['text':' 1-D operand ','line_number':728,'multiline':True]
['text':' 0-D (scalar) operand ','line_number':729,'multiline':True]
['text':' Set to a trivial empty range ','line_number':858,'multiline':True]
['text':' Set the base pointers ','line_number':860,'multiline':True]
['text':' Set to the desired range ','line_number':862,'multiline':True]
['text':'
         * With the exact same operands, no copies allowed, and
         * no axis in op_axes used both in iter1 and iter2.
         * Buffering may be enabled for iter2, but not for iter1.
         ','line_number':916,'multiline':True]
['text':' Use the iter2 values ','line_number':930,'multiline':True]
['text':' use the addresses dataptr[0], ... dataptr[nop-1] ','line_number':1178,'multiline':True]
['text':' use the addresses dataptr[0], ... dataptr[nop-1] ','line_number':1195,'multiline':True]
['text':' The constructor should have buffersize passed as this value ','line_number':1217,'multiline':True]
['text':' One loop with a fixed inner size ','line_number':1226,'multiline':True]
['text':'
             * This loop could be manually unrolled by a factor
             * which divides into FIXED_BUFFER_SIZE
             ','line_number':1229,'multiline':True]
['text':' use the addresses dataptr[0], ... dataptr[nop-1] ','line_number':1234,'multiline':True]
['text':' Finish-up loop with variable inner size ','line_number':1243,'multiline':True]
['text':' use the addresses dataptr[0], ... dataptr[nop-1] ','line_number':1247,'multiline':True]
