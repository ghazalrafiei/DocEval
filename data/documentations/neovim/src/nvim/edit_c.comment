['text':' edit.c: functions for Insert mode','line_number':1,'multiline':False]
['text':' cmdchar to handle once in init_prompt','line_number':72,'multiline':False]
['text':' previous char was backspace','line_number':78,'multiline':False]
['text':' line is empty before insert','line_number':79,'multiline':False]
['text':' topline before insertion','line_number':80,'multiline':False]
['text':' just inserted a space','line_number':82,'multiline':False]
['text':' remember if insert mode was restarted','line_number':84,'multiline':False]
['text':' after a ctrl+o','line_number':85,'multiline':False]
['text':'/ Set when doing something for completion that may call edit() recursively,','line_number':100,'multiline':False]
['text':'/ which is not allowed.','line_number':101,'multiline':False]
['text':' length of line when insert started','line_number':104,'multiline':False]
['text':' vcol for first inserted blank','line_number':105,'multiline':False]
['text':' set Insstart_orig to Insstart','line_number':106,'multiline':False]
['text':' the text of the previous insert, K_SPECIAL is escaped','line_number':108,'multiline':False]
['text':' nr of chars in front of previous insert','line_number':109,'multiline':False]
['text':' nr of chars in front of current insert','line_number':110,'multiline':False]
['text':' "restart_edit" when calling edit()','line_number':111,'multiline':False]
['text':' may do cindenting on this line','line_number':113,'multiline':False]
['text':' reverse insert mode on','line_number':115,'multiline':False]
['text':' how much to skip after edit','line_number':116,'multiline':False]
['text':' was the last char 'legal'?','line_number':117,'multiline':False]
['text':' start column of revins session','line_number':118,'multiline':False]
['text':' call u_save() before inserting a','line_number':120,'multiline':False]
['text':' char.  Set when edit() is called.','line_number':121,'multiline':False]
['text':' after that arrow_used is used.','line_number':122,'multiline':False]
['text':' CTRL-G U prevents syncing undo','line_number':124,'multiline':False]
['text':' for the next left/right cursor key','line_number':125,'multiline':False]
['text':' Remember whether editing was restarted after CTRL-O','line_number':135,'multiline':False]
['text':' sleep before redrawing, needed for "CTRL-O :" that results in an','line_number':137,'multiline':False]
['text':' error message','line_number':138,'multiline':False]
['text':' set Insstart_orig to Insstart','line_number':140,'multiline':False]
['text':' clear stuff for CTRL-X mode','line_number':143,'multiline':False]
['text':' Trigger InsertEnter autocommands.  Do not do this for "r<CR>" or "grx".','line_number':145,'multiline':False]
['text':' Check for changed highlighting, e.g. for ModeMsg.','line_number':161,'multiline':False]
['text':' Make sure the cursor didn't move.  Do call check_cursor_col() in','line_number':166,'multiline':False]
['text':' case the text was modified.  Since Insert mode was not started yet','line_number':167,'multiline':False]
['text':' a call to check_cursor_col() may move the cursor, especially with','line_number':168,'multiline':False]
['text':' the "A" command, thus set State to avoid that. Also check that the','line_number':169,'multiline':False]
['text':' line number is still valid (lines may have been deleted).','line_number':170,'multiline':False]
['text':' Do not restore if v:char was set to a non-empty string.','line_number':171,'multiline':False]
['text':' When doing a paste with the middle mouse button, Insstart is set to','line_number':184,'multiline':False]
['text':' where the paste started.','line_number':185,'multiline':False]
['text':' "gR" or "gr" command','line_number':206,'multiline':False]
['text':' "gI" command','line_number':211,'multiline':False]
['text':' "r<CR>" command','line_number':213,'multiline':False]
['text':' insert only one <CR>','line_number':214,'multiline':False]
['text':' need to position cursor again when on a TAB and','line_number':233,'multiline':False]
['text':' when on a char with inline virtual text','line_number':234,'multiline':False]
['text':' Enable langmap or IME, indicated by 'iminsert'.','line_number':239,'multiline':False]
['text':' Note that IME may enabled/disabled without us noticing here, thus the','line_number':240,'multiline':False]
['text':' 'iminsert' value may not reflect what is actually used.  It is updated','line_number':241,'multiline':False]
['text':' when hitting <Esc>.','line_number':242,'multiline':False]
['text':' there is no reverse replace mode','line_number':249,'multiline':False]
['text':' Handle restarting Insert mode.','line_number':258,'multiline':False]
['text':' Don't do this for "CTRL-O ." (repeat an insert): we get here with','line_number':259,'multiline':False]
['text':' restart_edit non-zero, and something in the stuff buffer.','line_number':260,'multiline':False]
['text':' After a paste we consider text typed to be part of the insert for','line_number':262,'multiline':False]
['text':' the pasted text. You can backspace over the pasted text too.','line_number':263,'multiline':False]
['text':' If the cursor was after the end-of-line before the CTRL-O and it is','line_number':271,'multiline':False]
['text':' now at the end-of-line, put it after the end-of-line (this is not','line_number':272,'multiline':False]
['text':' correct in very rare cases).','line_number':273,'multiline':False]
['text':' Also do this if curswant is greater than the current virtual','line_number':274,'multiline':False]
['text':' column.  Eg after "^O$" or "^O80|".','line_number':275,'multiline':False]
['text':' we are in insert mode now, don't need to start it anymore','line_number':295,'multiline':False]
['text':' Need to save the line for undo before inserting the first char.','line_number':298,'multiline':False]
['text':' The cursor line is not in a closed fold, unless restarting.','line_number':303,'multiline':False]
['text':' If 'showmode' is set, show the current (insert/replace/..) mode.','line_number':308,'multiline':False]
['text':' A warning message for changing a readonly file is given here, before','line_number':309,'multiline':False]
['text':' actually changing anything.  It's put after the mode, if any.','line_number':310,'multiline':False]
['text':' may show different cursor shape','line_number':320,'multiline':False]
['text':' clear digraphs','line_number':321,'multiline':False]
['text':' Get the current length of the redo buffer, those characters have to be','line_number':323,'multiline':False]
['text':' skipped if we want to get to the inserted characters.','line_number':324,'multiline':False]
['text':' If s->count != 0, `ins_esc` will prepare the redo buffer for reprocessing','line_number':337,'multiline':False]
['text':' and return false, causing `state_enter` to be called again.','line_number':338,'multiline':False]
['text':' Always update o_lnum, so that a "CTRL-O ." that adds a line','line_number':341,'multiline':False]
['text':' still puts the cursor back after the inserted text.','line_number':342,'multiline':False]
['text':' When CTRL-C was typed got_int will be set, with the result','line_number':350,'multiline':False]
['text':' that the autocommands won't be executed. When mapped got_int','line_number':351,'multiline':False]
['text':' is not set, but let's keep the behavior the same.','line_number':352,'multiline':False]
['text':' If typed something may trigger CursorHoldI again.','line_number':364,'multiline':False]
['text':' but not in CTRL-X mode, a script can't restore the state','line_number':366,'multiline':False]
['text':' If the cursor was moved we didn't just insert a space','line_number':371,'multiline':False]
['text':' reset on illegal motions','line_number':384,'multiline':False]
['text':' don't repeat insert when arrow key used','line_number':389,'multiline':False]
['text':' Exit Insert mode and go to Terminal mode.','line_number':398,'multiline':False]
['text':' ":stopinsert" used','line_number':405,'multiline':False]
['text':' exit insert mode','line_number':407,'multiline':False]
['text':' set curwin->w_curswant for next K_DOWN or K_UP','line_number':410,'multiline':False]
['text':' If there is no typeahead may check for timestamps (e.g., for when a','line_number':415,'multiline':False]
['text':' menu invoked a shell command).','line_number':416,'multiline':False]
['text':' When emsg() was called msg_scroll will have been set.','line_number':424,'multiline':False]
['text':' Open fold at the cursor line, according to 'foldopen'.','line_number':427,'multiline':False]
['text':' Close folds where the cursor isn't, according to 'foldclose'','line_number':432,'multiline':False]
['text':' If we inserted a character at the last position of the last line in the','line_number':442,'multiline':False]
['text':' window, scroll the window one line up. This avoids an extra redraw.  This','line_number':443,'multiline':False]
['text':' is detected when the cursor column is smaller after inserting something.','line_number':444,'multiline':False]
['text':' Don't do this when the topline changed already, it has already been','line_number':445,'multiline':False]
['text':' adjusted (by insertchar() calling open_line())).','line_number':446,'multiline':False]
['text':' Also don't do this when 'smoothscroll' is set, as the window should then','line_number':447,'multiline':False]
['text':' be scrolled by screen lines.','line_number':448,'multiline':False]
['text':' May need to adjust w_topline to show the cursor.','line_number':475,'multiline':False]
['text':' may set must_redraw','line_number':480,'multiline':False]
['text':' Redraw the display when no characters are waiting.','line_number':482,'multiline':False]
['text':' Also shows mode, ruler and positions cursor.','line_number':483,'multiline':False]
['text':' remember previous char for CTRL-D','line_number':499,'multiline':False]
['text':' After using CTRL-G U the next cursor key will not break undo.','line_number':502,'multiline':False]
['text':' Insert mode ended, possibly from a callback.','line_number':516,'multiline':False]
['text':' get another key','line_number':527,'multiline':False]
['text':' Don't want K_EVENT with cursorhold for the second key, e.g., after CTRL-V.','line_number':531,'multiline':False]
['text':' Special handling of keys while the popup menu is visible or wanted','line_number':536,'multiline':False]
['text':' and the cursor is still in the completed word.  Only when there is','line_number':537,'multiline':False]
['text':' a match, skip this when no matches were found.','line_number':538,'multiline':False]
['text':' BS: Delete one character from "compl_leader".','line_number':543,'multiline':False]
['text':' continue','line_number':547,'multiline':False]
['text':' When no match was selected or it was edited.','line_number':550,'multiline':False]
['text':' CTRL-L: Add one character from the current match to','line_number':552,'multiline':False]
['text':' "compl_leader".  Except when at the original match and','line_number':553,'multiline':False]
['text':' there is nothing to add, CTRL-L works like CTRL-P then.','line_number':554,'multiline':False]
['text':' continue','line_number':559,'multiline':False]
['text':' A non-white character that fits in with the current','line_number':562,'multiline':False]
['text':' completion: Add to "compl_leader".','line_number':563,'multiline':False]
['text':' Trigger InsertCharPre.','line_number':565,'multiline':False]
['text':' continue','line_number':576,'multiline':False]
['text':' Pressing CTRL-Y selects the current match.  When','line_number':579,'multiline':False]
['text':' compl_enter_selects is set the Enter key does the same.','line_number':580,'multiline':False]
['text':' Prepare for or stop CTRL-X mode. This doesn't do completion, but it does','line_number':591,'multiline':False]
['text':' fix up the text when finishing completion.','line_number':592,'multiline':False]
['text':' continue','line_number':595,'multiline':False]
['text':' CTRL-\ CTRL-N goes to Normal mode,','line_number':598,'multiline':False]
['text':' CTRL-\ CTRL-O is like CTRL-O but without moving the cursor','line_number':599,'multiline':False]
['text':' may need to redraw when no more chars available now','line_number':601,'multiline':False]
['text':' it's something else','line_number':609,'multiline':False]
['text':' cursor keeps its column','line_number':615,'multiline':False]
['text':' pretend CTRL-V is last typed character','line_number':634,'multiline':False]
['text':' continue','line_number':635,'multiline':False]
['text':' A key name preceded by a bang means this key is not to be','line_number':640,'multiline':False]
['text':' inserted.  Skip ahead to the re-indenting below.','line_number':641,'multiline':False]
['text':' continue','line_number':645,'multiline':False]
['text':' A key name preceded by a star means that indenting has to be','line_number':648,'multiline':False]
['text':' done before inserting the key.','line_number':649,'multiline':False]
['text':' If 'keymodel' contains "startsel", may start selection.  If it','line_number':673,'multiline':False]
['text':' does, a CTRL-O and c will be stuffed, we need to get these','line_number':674,'multiline':False]
['text':' characters.','line_number':675,'multiline':False]
['text':' continue','line_number':677,'multiline':False]
['text':' The big switch to handle a character in insert mode.','line_number':685,'multiline':False]
['text':' TODO(tarruda): This could look better if a lookup table is used.','line_number':686,'multiline':False]
['text':' (similar to normal mode `nv_cmds[]`)','line_number':687,'multiline':False]
['text':' End input mode','line_number':689,'multiline':False]
['text':' End input mode','line_number':695,'multiline':False]
['text':' Close the cmdline window.','line_number':697,'multiline':False]
['text':' don't stop executing autocommands et al','line_number':699,'multiline':False]
['text':' exit insert mode','line_number':701,'multiline':False]
['text':' buffer changed to a non-prompt buffer, get out of','line_number':706,'multiline':False]
['text':' Insert mode','line_number':707,'multiline':False]
['text':' exit insert mode','line_number':714,'multiline':False]
['text':' insert CTRL-Z as normal char','line_number':717,'multiline':False]
['text':' execute one command','line_number':719,'multiline':False]
['text':' don't move the cursor left when 'virtualedit' has "onemore".','line_number':731,'multiline':False]
['text':' exit insert mode','line_number':738,'multiline':False]
['text':' toggle insert/replace mode','line_number':740,'multiline':False]
['text':' end of Select mode mapping - ignore','line_number':745,'multiline':False]
['text':' Help key works like <ESC> <Help>','line_number':748,'multiline':False]
['text':' exit insert mode','line_number':752,'multiline':False]
['text':' Insert the previously inserted text.','line_number':759,'multiline':False]
['text':' For ^@ the trailing ESC will end the insert, unless there is an','line_number':762,'multiline':False]
['text':' error.','line_number':763,'multiline':False]
['text':' exit insert mode','line_number':766,'multiline':False]
['text':' insert the contents of a register','line_number':771,'multiline':False]
['text':' commands starting with CTRL-G','line_number':777,'multiline':False]
['text':' switch input mode and/or langmap','line_number':781,'multiline':False]
['text':' switch between languages','line_number':785,'multiline':False]
['text':' Make indent one shiftwidth smaller.','line_number':792,'multiline':False]
['text':' Make indent one shiftwidth greater.','line_number':799,'multiline':False]
['text':' delete character under the cursor','line_number':811,'multiline':False]
['text':' delete character before the cursor','line_number':817,'multiline':False]
['text':' delete word before the cursor','line_number':823,'multiline':False]
['text':' In a prompt window CTRL-W is used for window commands.','line_number':825,'multiline':False]
['text':' Use Shift-CTRL-W to delete a word.','line_number':826,'multiline':False]
['text':' delete all inserted text in current line','line_number':837,'multiline':False]
['text':' CTRL-X CTRL-U completes with 'completefunc'.','line_number':838,'multiline':False]
['text':' mouse keys','line_number':848,'multiline':False]
['text':' Default action for scroll wheel up: scroll up','line_number':869,'multiline':False]
['text':' Default action for scroll wheel down: scroll down','line_number':873,'multiline':False]
['text':' Scroll wheel left','line_number':877,'multiline':False]
['text':' Scroll wheel right','line_number':881,'multiline':False]
['text':' Something mapped to nothing','line_number':885,'multiline':False]
['text':' some event','line_number':888,'multiline':False]
['text':' If CTRL-G U was used apply it to the next typed key.','line_number':890,'multiline':False]
['text':' <Cmd>command<CR>','line_number':896,'multiline':False]
['text':' nvim_select_popupmenu_item() can be called from the handling of','line_number':904,'multiline':False]
['text':' K_EVENT, K_COMMAND, or K_LUA.','line_number':905,'multiline':False]
['text':' TODO(bfredl): Not entirely sure this indirection is necessary','line_number':906,'multiline':False]
['text':' but doing like this ensures using nvim_select_popupmenu_item is','line_number':907,'multiline':False]
['text':' equivalent to selecting the item with a typed key.','line_number':908,'multiline':False]
['text':' Set this to NULL so that ins_complete() will update the message.','line_number':911,'multiline':False]
['text':' accept the item and stop completion','line_number':915,'multiline':False]
['text':' The K_EVENT, K_COMMAND, or K_LUA caused undo to be synced.','line_number':923,'multiline':False]
['text':' Need to save the line for undo before inserting the next char.','line_number':924,'multiline':False]
['text':' <Home>','line_number':929,'multiline':False]
['text':' <End>','line_number':936,'multiline':False]
['text':' <Left>','line_number':943,'multiline':False]
['text':' <S-Left>','line_number':951,'multiline':False]
['text':' <Right>','line_number':956,'multiline':False]
['text':' <S-Right>','line_number':964,'multiline':False]
['text':' <Up>','line_number':969,'multiline':False]
['text':' <S-Up>','line_number':979,'multiline':False]
['text':' <Down>','line_number':989,'multiline':False]
['text':' <S-Down>','line_number':999,'multiline':False]
['text':' When not mapped, use like a normal TAB','line_number':1009,'multiline':False]
['text':' TAB or Complete patterns along path','line_number':1013,'multiline':False]
['text':' insert TAB as a normal char','line_number':1020,'multiline':False]
['text':' <Enter>','line_number':1025,'multiline':False]
['text':' In a quickfix window a <CR> jumps to the error under the','line_number':1030,'multiline':False]
['text':' cursor.','line_number':1031,'multiline':False]
['text':' quickfix window','line_number':1033,'multiline':False]
['text':' location list window','line_number':1035,'multiline':False]
['text':' Execute the command in the cmdline window.','line_number':1041,'multiline':False]
['text':' buffer changed to a non-prompt buffer, get out of','line_number':1048,'multiline':False]
['text':' Insert mode','line_number':1049,'multiline':False]
['text':' out of memory','line_number':1055,'multiline':False]
['text':' digraph or keyword completion','line_number':1061,'multiline':False]
['text':' Enter CTRL-X mode','line_number':1075,'multiline':False]
['text':' Tag name completion after ^X','line_number':1079,'multiline':False]
['text':' File name completion after ^X','line_number':1087,'multiline':False]
['text':' Spelling completion after ^X','line_number':1095,'multiline':False]
['text':' Whole line completion after ^X','line_number':1104,'multiline':False]
['text':' Do previous/next pattern completion','line_number':1110,'multiline':False]
['text':' if 'complete' is empty then plain ^P is no longer special,','line_number':1112,'multiline':False]
['text':' but it is under other ^X modes','line_number':1113,'multiline':False]
['text':' copy from previous line or scroll down','line_number':1123,'multiline':False]
['text':' copy from next line or scroll up','line_number':1124,'multiline':False]
['text':' Insert a normal character.','line_number':1131,'multiline':False]
['text':' Trigger InsertCharPre.','line_number':1134,'multiline':False]
['text':' Insert the new value of v:char literally.','line_number':1139,'multiline':False]
['text':' If the new value is already inserted or an empty string','line_number':1154,'multiline':False]
['text':' then don't insert any character.','line_number':1155,'multiline':False]
['text':' Try to perform smart-indenting.','line_number':1160,'multiline':False]
['text':' Insert a normal character and check for abbreviations on a','line_number':1174,'multiline':False]
['text':' special character.  Let CTRL-] expand abbreviations without','line_number':1175,'multiline':False]
['text':' inserting it.','line_number':1176,'multiline':False]
['text':' Add ABBR_OFF for characters above 0x100, this is','line_number':1178,'multiline':False]
['text':' what check_abbr() expects.','line_number':1179,'multiline':False]
['text':' When inserting a character the cursor line must never be in a','line_number':1189,'multiline':False]
['text':' closed fold.','line_number':1190,'multiline':False]
['text':' end of switch (s->c)','line_number':1193,'multiline':False]
['text':' continue','line_number':1195,'multiline':False]
['text':' don't redraw folds here','line_number':1201,'multiline':False]
['text':' allow smartindenting','line_number':1207,'multiline':False]
['text':' Indent now if a key was typed that is in 'cinkeys'.','line_number':1212,'multiline':False]
['text':' re-indent the current line','line_number':1215,'multiline':False]
['text':'/ edit(): Start inserting text.','line_number':1221,'multiline':False]
['text':'/','line_number':1222,'multiline':False]
['text':'/ "cmdchar" can be:','line_number':1223,'multiline':False]
['text':'/ 'i' normal insert command','line_number':1224,'multiline':False]
['text':'/ 'a' normal append command','line_number':1225,'multiline':False]
['text':'/ 'R' replace command','line_number':1226,'multiline':False]
['text':'/ 'r' "r<CR>" command: insert one <CR>.','line_number':1227,'multiline':False]
['text':'/     Note: count can be > 1, for redo, but still only one <CR> is inserted.','line_number':1228,'multiline':False]
['text':'/           <Esc> is not used for redo.','line_number':1229,'multiline':False]
['text':'/ 'g' "gI" command.','line_number':1230,'multiline':False]
['text':'/ 'V' "gR" command for Virtual Replace mode.','line_number':1231,'multiline':False]
['text':'/ 'v' "gr" command for single character Virtual Replace mode.','line_number':1232,'multiline':False]
['text':'/','line_number':1233,'multiline':False]
['text':'/ This function is not called recursively.  For CTRL-O commands, it returns','line_number':1234,'multiline':False]
['text':'/ and lets the caller handle the Normal-mode command.','line_number':1235,'multiline':False]
['text':'/','line_number':1236,'multiline':False]
['text':'/ @param  cmdchar  command that started the insert','line_number':1237,'multiline':False]
['text':'/ @param  startln  if true, insert at start of line','line_number':1238,'multiline':False]
['text':'/ @param  count    repeat count for the command','line_number':1239,'multiline':False]
['text':'/','line_number':1240,'multiline':False]
['text':'/ @return true if a CTRL-O command caused the return (insert mode pending).','line_number':1241,'multiline':False]
['text':' Do not enter terminal mode from ex_normal(), which would cause havoc','line_number':1246,'multiline':False]
['text':' (such as terminal-mode recursiveness). Instead set a flag to force-set','line_number':1247,'multiline':False]
['text':' the value of `restart_edit` before `ex_normal` returns.','line_number':1248,'multiline':False]
['text':' Don't allow inserting in the sandbox.','line_number':1256,'multiline':False]
['text':' Don't allow changes in the buffer while editing the cmdline.  The','line_number':1262,'multiline':False]
['text':' caller of getcmdline() may get confused.','line_number':1263,'multiline':False]
['text':' Don't allow recursive insert mode when busy with completion.','line_number':1264,'multiline':False]
['text':' Allow in dummy buffers since they are only used internally','line_number':1265,'multiline':False]
['text':'/ Redraw for Insert mode.','line_number':1288,'multiline':False]
['text':'/ This is postponed until getting the next character to make '$' in the 'cpo'','line_number':1289,'multiline':False]
['text':'/ option work correctly.','line_number':1290,'multiline':False]
['text':'/ Only redraw when there are no characters available.  This speeds up','line_number':1291,'multiline':False]
['text':'/ inserting sequences of characters (e.g., for CTRL-R).','line_number':1292,'multiline':False]
['text':'/','line_number':1293,'multiline':False]
['text':'/ @param ready  not busy with something','line_number':1294,'multiline':False]
['text':' Trigger CursorMoved if the cursor moved.  Not when the popup menu is','line_number':1301,'multiline':False]
['text':' visible, the command might delete it.','line_number':1302,'multiline':False]
['text':' Need to update the screen first, to make sure syntax','line_number':1307,'multiline':False]
['text':' highlighting is correct after making a change (e.g., inserting','line_number':1308,'multiline':False]
['text':' a "(".  The autocommand may also require a redraw, so it's done','line_number':1309,'multiline':False]
['text':' again below, unfortunately.','line_number':1310,'multiline':False]
['text':' Make sure curswant is correct, an autocommand may call','line_number':1314,'multiline':False]
['text':' getcurpos()','line_number':1315,'multiline':False]
['text':' Trigger TextChangedI if changedtick_i differs.','line_number':1322,'multiline':False]
['text':' save and restore curwin and curbuf, in case the autocmd changes them','line_number':1329,'multiline':False]
['text':' see ins_apply_autocmds()','line_number':1334,'multiline':False]
['text':' Trigger TextChangedP if changedtick_pum differs. When the popupmenu','line_number':1340,'multiline':False]
['text':' closes TextChangedI will need to trigger for backwards compatibility,','line_number':1341,'multiline':False]
['text':' thus use different b_last_changedtick* variables.','line_number':1342,'multiline':False]
['text':' save and restore curwin and curbuf, in case the autocmd changes them','line_number':1349,'multiline':False]
['text':' see ins_apply_autocmds()','line_number':1354,'multiline':False]
['text':' Trigger BufModified if b_changed_invalid is set.','line_number':1364,'multiline':False]
['text':' Trigger SafeState if nothing is pending.','line_number':1372,'multiline':False]
['text':' clear cmdline and show mode','line_number':1384,'multiline':False]
['text':' may remove error message now','line_number':1388,'multiline':False]
['text':' Handle a CTRL-V or CTRL-Q typed in Insert mode.','line_number':1391,'multiline':False]
['text':' may need to redraw when no more chars available now','line_number':1396,'multiline':False]
['text':' Do not include modifiers into the key for CTRL-SHIFT-V.','line_number':1407,'multiline':False]
['text':' when the line fits in 'columns' the '^' is at the start of the next','line_number':1410,'multiline':False]
['text':' line and will not removed by the redraw','line_number':1411,'multiline':False]
['text':' Put a character directly onto the screen.  It's not stored in a buffer.','line_number':1420,'multiline':False]
['text':' Used while handling CTRL-K, CTRL-V, etc. in Insert mode.','line_number':1421,'multiline':False]
['text':' nothing was put on screen','line_number':1423,'multiline':False]
['text':' right half of double-wide char','line_number':1424,'multiline':False]
['text':' left half of double-wide char','line_number':1425,'multiline':False]
['text':' pc_schar was filled','line_number':1426,'multiline':False]
['text':' saved char','line_number':1427,'multiline':False]
['text':' just in case w_topline isn't valid','line_number':1436,'multiline':False]
['text':' pc_col is the left half of a double-width char','line_number':1458,'multiline':False]
['text':' save the character to be able to put it back','line_number':1463,'multiline':False]
['text':'/ @return    the effective prompt for the specified buffer.','line_number':1475,'multiline':False]
['text':'/ @return  the effective prompt for the current buffer.','line_number':1485,'multiline':False]
['text':' Prepare for prompt mode: Make sure the last line has the prompt text.','line_number':1492,'multiline':False]
['text':' Move the cursor to this line.','line_number':1493,'multiline':False]
['text':' prompt is missing, insert it or append a line with it','line_number':1501,'multiline':False]
['text':' Insert always starts after the prompt, allow editing text after it.','line_number':1512,'multiline':False]
['text':' Make sure the cursor is in a valid position.','line_number':1528,'multiline':False]
['text':'/ @return  true if the cursor is in the editable position of the prompt line.','line_number':1532,'multiline':False]
['text':' Undo the previous edit_putchar().','line_number':1540,'multiline':False]
['text':' TODO(bfredl): this could be smarter and also handle the dubyawidth case','line_number':1550,'multiline':False]
['text':'/ Called when "$" is in 'cpoptions': display a '$' at the end of the changed','line_number':1558,'multiline':False]
['text':'/ text.  Only works when cursor is in the line that changes.','line_number':1559,'multiline':False]
['text':' If on the last byte of a multi-byte move to the first byte.','line_number':1571,'multiline':False]
['text':' Recompute w_wrow and w_wcol','line_number':1574,'multiline':False]
['text':' Call this function before moving the cursor from the normal insert position','line_number':1582,'multiline':False]
['text':' in insert mode.','line_number':1583,'multiline':False]
['text':'/ Insert an indent (for <Tab> or CTRL-T) or delete an indent (for CTRL-D).','line_number':1592,'multiline':False]
['text':'/ Keep the cursor on the same character.','line_number':1593,'multiline':False]
['text':'/ type == INDENT_INC   increase indent (for CTRL-T or <Tab>)','line_number':1594,'multiline':False]
['text':'/ type == INDENT_DEC   decrease indent (for CTRL-D)','line_number':1595,'multiline':False]
['text':'/ type == INDENT_SET   set indent to "amount"','line_number':1596,'multiline':False]
['text':'/','line_number':1597,'multiline':False]
['text':'/ @param round               if true, round the indent to 'shiftwidth' (only with _INC and _Dec).','line_number':1598,'multiline':False]
['text':'/ @param replaced            replaced character, put on replace stack','line_number':1599,'multiline':False]
['text':'/ @param call_changed_bytes  call changed_bytes()','line_number':1600,'multiline':False]
['text':' reduction for Insstart.col','line_number':1603,'multiline':False]
['text':' init for GCC','line_number':1604,'multiline':False]
['text':' init for GCC','line_number':1605,'multiline':False]
['text':' MODE_VREPLACE state needs to know what the line was like before changing','line_number':1607,'multiline':False]
['text':' Deal with NULL below','line_number':1609,'multiline':False]
['text':' for the following tricks we don't want list mode','line_number':1613,'multiline':False]
['text':' For Replace mode we need to fix the replace stack later, which is only','line_number':1619,'multiline':False]
['text':' possible when the cursor is in the indent.  Remember the number of','line_number':1620,'multiline':False]
['text':' characters before the cursor if it's possible.','line_number':1621,'multiline':False]
['text':' determine offset from first non-blank','line_number':1624,'multiline':False]
['text':' If the cursor is in the indent, compute how many screen columns the','line_number':1631,'multiline':False]
['text':' cursor is to the left of the first non-blank.','line_number':1632,'multiline':False]
['text':' can't fix replace stack','line_number':1637,'multiline':False]
['text':' Set the new indent.  The cursor will be put on the first non-blank.','line_number':1641,'multiline':False]
['text':' Avoid being called recursively.','line_number':1647,'multiline':False]
['text':' Try to put cursor on same character.','line_number':1656,'multiline':False]
['text':' If the cursor is at or after the first non-blank in the line,','line_number':1657,'multiline':False]
['text':' compute the cursor column relative to the column of the first','line_number':1658,'multiline':False]
['text':' non-blank character.','line_number':1659,'multiline':False]
['text':' If we are not in insert mode, leave the cursor on the first non-blank.','line_number':1660,'multiline':False]
['text':' If the cursor is before the first non-blank, position it relative','line_number':1661,'multiline':False]
['text':' to the first non-blank, counted in screen columns.','line_number':1662,'multiline':False]
['text':' When changing the indent while the cursor is touching it, reset','line_number':1664,'multiline':False]
['text':' Insstart_col to 0.','line_number':1665,'multiline':False]
['text':' Compute the screen column where the cursor should be.','line_number':1673,'multiline':False]
['text':' Advance the cursor until we reach the right screen column.','line_number':1677,'multiline':False]
['text':' May need to insert spaces to be able to position the cursor on','line_number':1696,'multiline':False]
['text':' the right screen column.','line_number':1697,'multiline':False]
['text':' When changing the indent while the cursor is in it, reset','line_number':1708,'multiline':False]
['text':' Insstart_col to 0.','line_number':1709,'multiline':False]
['text':' May have to adjust the start of the insert.','line_number':1723,'multiline':False]
['text':' For MODE_REPLACE state, may have to fix the replace stack, if it's','line_number':1739,'multiline':False]
['text':' possible.  If the number of characters before the cursor decreased, need','line_number':1740,'multiline':False]
['text':' to pop a few characters from the replace stack.','line_number':1741,'multiline':False]
['text':' If the number of characters before the cursor increased, need to push a','line_number':1742,'multiline':False]
['text':' few NULs onto the replace stack.','line_number':1743,'multiline':False]
['text':' remove a NUL from the replace stack','line_number':1746,'multiline':False]
['text':' For MODE_VREPLACE state, we also have to fix the replace stack.  In this','line_number':1759,'multiline':False]
['text':' case it is always possible because we backspace over the whole line and','line_number':1760,'multiline':False]
['text':' then put it back again the way we wanted it.','line_number':1761,'multiline':False]
['text':' Save new line','line_number':1763,'multiline':False]
['text':' We only put back the new line up to the cursor','line_number':1766,'multiline':False]
['text':' Put back original line','line_number':1770,'multiline':False]
['text':' Backspace from cursor to start of line','line_number':1776,'multiline':False]
['text':' Insert new stuff into line again','line_number':1779,'multiline':False]
['text':' TODO(bfredl): test for crazy edge cases, like we stand on a TAB or','line_number':1786,'multiline':False]
['text':' something? does this even do the right text change then?','line_number':1787,'multiline':False]
['text':'/ Truncate the space at the end of a line.  This is to be used only in an','line_number':1796,'multiline':False]
['text':'/ insert mode.  It handles fixing the replace stack for MODE_REPLACE and','line_number':1797,'multiline':False]
['text':'/ MODE_VREPLACE modes.','line_number':1798,'multiline':False]
['text':' find start of trailing white space','line_number':1803,'multiline':False]
['text':' remove a NUL from the replace stack','line_number':1806,'multiline':False]
['text':'/ Backspace the cursor until the given column.  Handles MODE_REPLACE and','line_number':1812,'multiline':False]
['text':'/ MODE_VREPLACE modes correctly.  May also be used when not in insert mode at','line_number':1813,'multiline':False]
['text':'/ all.  Will attempt not to go before "col" even when there is a composing','line_number':1814,'multiline':False]
['text':'/ character.','line_number':1815,'multiline':False]
['text':'/ Like del_char(), but make sure not to go before column "limit_col".','line_number':1828,'multiline':False]
['text':'/ Only matters when there are composing characters.','line_number':1829,'multiline':False]
['text':'/','line_number':1830,'multiline':False]
['text':'/ @param  limit_col  only delete the character if it is after this column','line_number':1831,'multiline':False]
['text':'','line_number':1832,'multiline':False]
['text':'/ @return true when something was deleted.','line_number':1833,'multiline':False]
['text':' Make sure the cursor is at the start of a character, but','line_number':1839,'multiline':False]
['text':' skip forward again when going too far back because of a','line_number':1840,'multiline':False]
['text':' composing character.','line_number':1841,'multiline':False]
['text':' end of line','line_number':1846,'multiline':False]
['text':'/ Next character is interpreted literally.','line_number':1861,'multiline':False]
['text':'/ A one, two or three digit decimal number is interpreted as its byte value.','line_number':1862,'multiline':False]
['text':'/ If one or two digits are entered, the next character is given to vungetc().','line_number':1863,'multiline':False]
['text':'/ For Unicode a character > 255 may be returned.','line_number':1864,'multiline':False]
['text':'/','line_number':1865,'multiline':False]
['text':'/ @param  no_simplify  do not include modifiers into the key','line_number':1866,'multiline':False]
['text':' don't map the next key hits','line_number':1878,'multiline':False]
['text':' A character with non-Shift modifiers should not be a valid','line_number':1887,'multiline':False]
['text':' character for i_CTRL-V_digit.','line_number':1888,'multiline':False]
['text':' limit range to 0-255','line_number':1924,'multiline':False]
['text':' hex: up to two chars','line_number':1928,'multiline':False]
['text':' Unicode: up to four or eight chars','line_number':1932,'multiline':False]
['text':' decimal or octal: up to three chars','line_number':1936,'multiline':False]
['text':' no number entered','line_number':1940,'multiline':False]
['text':' NUL is stored as NL','line_number':1941,'multiline':False]
['text':' NUL is stored as NL','line_number':1950,'multiline':False]
['text':' A character typed with i_CTRL-V_digit cannot have modifiers.','line_number':1957,'multiline':False]
['text':' CTRL-C typed after CTRL-V is not an interrupt','line_number':1960,'multiline':False]
['text':'/ Insert character, taking care of special keys and mod_mask','line_number':1964,'multiline':False]
['text':'/','line_number':1965,'multiline':False]
['text':'/ @param ctrlv `c` was typed after CTRL-V','line_number':1966,'multiline':False]
['text':' Special function key, translate into "<Key>". Up to the last '>' is','line_number':1969,'multiline':False]
['text':' inserted with ins_str(), so as not to replace characters in replace','line_number':1970,'multiline':False]
['text':' mode.','line_number':1971,'multiline':False]
['text':' Only use mod_mask for special keys, to avoid things like <S-Space>,','line_number':1972,'multiline':False]
['text':' unless 'allow_modmask' is true.','line_number':1973,'multiline':False]
['text':' Command-key never produces a normal key.','line_number':1974,'multiline':False]
['text':' Special characters in this context are those that need processing other','line_number':1996,'multiline':False]
['text':' than the simple insertion that can be performed here. This includes ESC','line_number':1997,'multiline':False]
['text':' which terminates the insert, and CR/NL which need special processing to','line_number':1998,'multiline':False]
['text':' open up a new line. This routine tries to optimize insertions performed by','line_number':1999,'multiline':False]
['text':' the "redo", "undo" or "put" commands, so it needs to know when it should','line_number':2000,'multiline':False]
['text':' stop and defer processing to the "normal" mechanism.','line_number':2001,'multiline':False]
['text':' '0' and '^' are special, because they can be followed by CTRL-D.','line_number':2002,'multiline':False]
['text':'/','line_number':2005,'multiline':False]
['text':'/ "flags": INSCHAR_FORMAT - force formatting','line_number':2006,'multiline':False]
['text':'/          INSCHAR_CTRLV  - char typed just after CTRL-V','line_number':2007,'multiline':False]
['text':'/          INSCHAR_NO_FEX - don't use 'formatexpr'','line_number':2008,'multiline':False]
['text':'/','line_number':2009,'multiline':False]
['text':'/   NOTE: passes the flags value straight through to internal_format() which,','line_number':2010,'multiline':False]
['text':'/         beside INSCHAR_FORMAT (above), is also looking for these:','line_number':2011,'multiline':False]
['text':'/          INSCHAR_DO_COM   - format comments','line_number':2012,'multiline':False]
['text':'/          INSCHAR_COM_LIST - format comments with num list or 2nd line indent','line_number':2013,'multiline':False]
['text':'/','line_number':2014,'multiline':False]
['text':'/ @param c              character to insert or NUL','line_number':2015,'multiline':False]
['text':'/ @param flags          INSCHAR_FORMAT, etc.','line_number':2016,'multiline':False]
['text':'/ @param second_indent  indent for second line if >= 0','line_number':2017,'multiline':False]
['text':' Try to break the line in two or more pieces when:','line_number':2026,'multiline':False]
['text':' - Always do this if we have been called to do formatting only.','line_number':2027,'multiline':False]
['text':' - Always do this when 'formatoptions' has the 'a' flag and the line','line_number':2028,'multiline':False]
['text':'   ends in white space.','line_number':2029,'multiline':False]
['text':' - Otherwise:','line_number':2030,'multiline':False]
['text':'     - Don't do this if inserting a blank','line_number':2031,'multiline':False]
['text':'     - Don't do this if an existing character is being replaced, unless','line_number':2032,'multiline':False]
['text':'       we're in MODE_VREPLACE state.','line_number':2033,'multiline':False]
['text':'     - Do this if the cursor is not on the line where insert started','line_number':2034,'multiline':False]
['text':'     or - 'formatoptions' doesn't have 'l' or the line was not too long','line_number':2035,'multiline':False]
['text':'           before the insert.','line_number':2036,'multiline':False]
['text':'        - 'formatoptions' doesn't have 'b' or a blank was inserted at or','line_number':2037,'multiline':False]
['text':'          before 'textwidth'','line_number':2038,'multiline':False]
['text':' Format with 'formatexpr' when it's set.  Use internal formatting','line_number':2050,'multiline':False]
['text':' when 'formatexpr' isn't set or it returns non-zero.','line_number':2051,'multiline':False]
['text':' It may be required to save for undo again, e.g. when setline()','line_number':2059,'multiline':False]
['text':' was called.','line_number':2060,'multiline':False]
['text':' only formatting was wanted','line_number':2068,'multiline':False]
['text':' Check whether this character should end a comment.','line_number':2072,'multiline':False]
['text':' end-comment string','line_number':2074,'multiline':False]
['text':' Need to remove existing (middle) comment leader and insert end','line_number':2076,'multiline':False]
['text':' comment leader.  First, check what comment leader we can find.','line_number':2077,'multiline':False]
['text':' Just checking','line_number':2080,'multiline':False]
['text':' Skip middle-comment string','line_number':2081,'multiline':False]
['text':' find end of middle flags','line_number':2082,'multiline':False]
['text':' Don't count trailing white space for middle_len','line_number':2086,'multiline':False]
['text':' Find the end-comment string','line_number':2091,'multiline':False]
['text':' find end of end flags','line_number':2092,'multiline':False]
['text':' Skip white space before the cursor','line_number':2097,'multiline':False]
['text':' Skip to before the middle leader','line_number':2102,'multiline':False]
['text':' Check some expected things before we go on','line_number':2105,'multiline':False]
['text':' Backspace over all the stuff we want to replace','line_number':2107,'multiline':False]
['text':' Insert the end-comment string, except for the last','line_number':2110,'multiline':False]
['text':' character, which will get inserted as normal later.','line_number':2111,'multiline':False]
['text':' If there's any pending input, grab up to INPUT_BUFLEN at once.','line_number':2123,'multiline':False]
['text':' This speeds up normal text input considerably.','line_number':2124,'multiline':False]
['text':' Don't do this when 'cindent' or 'indentexpr' is set, because we might','line_number':2125,'multiline':False]
['text':' need to re-indent at a ':', or any other character (but not what','line_number':2126,'multiline':False]
['text':' 'paste' is set)..','line_number':2127,'multiline':False]
['text':' Don't do this when there an InsertCharPre autocommand is defined,','line_number':2128,'multiline':False]
['text':' because we need to fire the event for every character.','line_number':2129,'multiline':False]
['text':' Do the check for InsertCharPre before the call to vpeekc() because the','line_number':2130,'multiline':False]
['text':' InsertCharPre autocommand could change the input buffer.','line_number':2131,'multiline':False]
['text':' Stop the string when:','line_number':2149,'multiline':False]
['text':' - no more chars available','line_number':2150,'multiline':False]
['text':' - finding a special character (command key)','line_number':2151,'multiline':False]
['text':' - buffer is full','line_number':2152,'multiline':False]
['text':' - running into the 'textwidth' boundary','line_number':2153,'multiline':False]
['text':' - need to check for abbreviation: A non-word char after a word-char','line_number':2154,'multiline':False]
['text':' clear digraphs','line_number':2166,'multiline':False]
['text':' may be the start of a digraph','line_number':2167,'multiline':False]
['text':' Put a character in the redo buffer, for when just after a CTRL-V.','line_number':2200,'multiline':False]
['text':' Only digits need special treatment.  Translate them into a string of','line_number':2205,'multiline':False]
['text':' three digits.','line_number':2206,'multiline':False]
['text':'/ start_arrow() is called when an arrow key is used in insert mode.','line_number':2215,'multiline':False]
['text':'/ For undo/redo it resembles hitting the <ESC> key.','line_number':2216,'multiline':False]
['text':'/','line_number':2217,'multiline':False]
['text':'/ @param end_insert_pos  can be NULL','line_number':2218,'multiline':False]
['text':'/ Like start_arrow() but with end_change argument.','line_number':2224,'multiline':False]
['text':'/ Will prepare for redo of CTRL-G U if "end_change" is false.','line_number':2225,'multiline':False]
['text':'/','line_number':2226,'multiline':False]
['text':'/ @param end_insert_pos  can be NULL','line_number':2227,'multiline':False]
['text':'/ @param end_change      end undoable change','line_number':2228,'multiline':False]
['text':'/ @param end_insert_pos  can be NULL','line_number':2238,'multiline':False]
['text':'/ @param end_change      end undoable change','line_number':2239,'multiline':False]
['text':' something has been inserted','line_number':2242,'multiline':False]
['text':' This means we stopped the current insert.','line_number':2245,'multiline':False]
['text':' If we skipped highlighting word at cursor, do it now.','line_number':2250,'multiline':False]
['text':' It may be skipped again, thus reset spell_redraw_lnum first.','line_number':2251,'multiline':False]
['text':' stop_arrow() is called before a change is made in insert mode.','line_number':2262,'multiline':False]
['text':' If an arrow key has been used, start a new insertion.','line_number':2263,'multiline':False]
['text':' Returns FAIL if undo is impossible, shouldn't insert then.','line_number':2264,'multiline':False]
['text':' new insertion starts here','line_number':2268,'multiline':False]
['text':' Don't update the original insert position when moved to the','line_number':2270,'multiline':False]
['text':' right, except when nothing was inserted yet.','line_number':2271,'multiline':False]
['text':' Pretend we start an insertion.','line_number':2286,'multiline':False]
['text':' Always open fold at the cursor line when inserting something.','line_number':2294,'multiline':False]
['text':'/ Do a few things to stop inserting.','line_number':2300,'multiline':False]
['text':'/ "end_insert_pos" is where insert ended.  It is NULL when we already jumped','line_number':2301,'multiline':False]
['text':'/ to another window/buffer.','line_number':2302,'multiline':False]
['text':'/','line_number':2303,'multiline':False]
['text':'/ @param esc     called by ins_esc()','line_number':2304,'multiline':False]
['text':'/ @param nomove  <c-\><c-o>, don't move cursor','line_number':2305,'multiline':False]
['text':' abandon replace stack','line_number':2309,'multiline':False]
['text':' Save the inserted text for later redo with ^@ and CTRL-A.','line_number':2311,'multiline':False]
['text':' Don't do it when "restart_edit" was set and nothing was inserted,','line_number':2312,'multiline':False]
['text':' otherwise CTRL-O w and then <Left> will clear "last_insert".','line_number':2313,'multiline':False]
['text':' Auto-format now.  It may seem strange to do this when stopping an','line_number':2326,'multiline':False]
['text':' insertion (or moving the cursor), but it's required when appending','line_number':2327,'multiline':False]
['text':' a line and having it end in a space.  But only do it when something','line_number':2328,'multiline':False]
['text':' was actually inserted, otherwise undo won't work.','line_number':2329,'multiline':False]
['text':' When the cursor is at the end of the line after a space the','line_number':2333,'multiline':False]
['text':' formatting will move it to the following word.  Avoid that by','line_number':2334,'multiline':False]
['text':' moving the cursor onto the space.','line_number':2335,'multiline':False]
['text':' If the cursor is still at the same character, also keep','line_number':2351,'multiline':False]
['text':' the "coladd".','line_number':2352,'multiline':False]
['text':' If a space was inserted for auto-formatting, remove it now.','line_number':2361,'multiline':False]
['text':' If we just did an auto-indent, remove the white space from the end','line_number':2364,'multiline':False]
['text':' of the line, and put the cursor back.','line_number':2365,'multiline':False]
['text':' Do this when ESC was used or moving the cursor up/down.','line_number':2366,'multiline':False]
['text':' Check for the old position still being valid, just in case the text','line_number':2367,'multiline':False]
['text':' got changed unexpectedly.','line_number':2368,'multiline':False]
['text':' make sure it is not past the line','line_number':2376,'multiline':False]
['text':' should not happen','line_number':2386,'multiline':False]
['text':' reset tpos, could have been invalidated in the loop above','line_number':2392,'multiline':False]
['text':' put cursor back on the NUL','line_number':2396,'multiline':False]
['text':' <C-S-Right> may have started Visual mode, adjust the position for','line_number':2400,'multiline':False]
['text':' deleted characters.','line_number':2401,'multiline':False]
['text':' Set '[ and '] to the inserted text.  When end_insert_pos is NULL we are','line_number':2412,'multiline':False]
['text':' now in a different buffer.','line_number':2413,'multiline':False]
['text':' Set the last inserted text to a single character.','line_number':2421,'multiline':False]
['text':' Used for the replace command.','line_number':2422,'multiline':False]
['text':' Use the CTRL-V only when entering a special char','line_number':2428,'multiline':False]
['text':' move cursor to start of line','line_number':2445,'multiline':False]
['text':' if flags & BL_WHITE  move to first non-white','line_number':2446,'multiline':False]
['text':' if flags & BL_SOL    move to first non-white if startofline is set,','line_number':2447,'multiline':False]
['text':'                          otherwise keep "curswant" column','line_number':2448,'multiline':False]
['text':' if flags & BL_FIX    don't leave the cursor on a NUL.','line_number':2449,'multiline':False]
['text':' oneright oneleft cursor_down cursor_up','line_number':2471,'multiline':False]
['text':'','line_number':2472,'multiline':False]
['text':' Move one char {right,left,down,up}.','line_number':2473,'multiline':False]
['text':' Doesn't move onto the NUL past the end of the line, unless it is allowed.','line_number':2474,'multiline':False]
['text':' Return OK when successful, FAIL when we hit a line of file boundary.','line_number':2475,'multiline':False]
['text':' Adjust for multi-wide char (excluding TAB)','line_number':2484,'multiline':False]
['text':' Return OK if the cursor moved, FAIL otherwise (at window edge).','line_number':2489,'multiline':False]
['text':' already at the very end','line_number':2496,'multiline':False]
['text':' move "l" bytes right, but don't end up on the NUL, unless 'virtualedit'','line_number':2501,'multiline':False]
['text':' contains "onemore".','line_number':2502,'multiline':False]
['text':' We might get stuck on 'showbreak', skip over it.','line_number':2522,'multiline':False]
['text':' getviscol() is slow, skip it when 'showbreak' is empty,','line_number':2526,'multiline':False]
['text':' 'breakindent' is not set and there are no multi-byte','line_number':2527,'multiline':False]
['text':' characters','line_number':2528,'multiline':False]
['text':' Adjust for multi-wide char (not a TAB)','line_number':2536,'multiline':False]
['text':' if the character on the left of the current cursor is a multi-byte','line_number':2555,'multiline':False]
['text':' character, move to its first byte','line_number':2556,'multiline':False]
['text':'/ Move the cursor up "n" lines in window "wp".','line_number':2562,'multiline':False]
['text':'/ Takes care of closed folds.','line_number':2563,'multiline':False]
['text':' Count each sequence of folded lines as one logical line.','line_number':2571,'multiline':False]
['text':' go to the start of the current fold','line_number':2573,'multiline':False]
['text':' move up one line','line_number':2577,'multiline':False]
['text':' If we entered a fold, move to the beginning, unless in','line_number':2582,'multiline':False]
['text':' Insert mode or when 'foldopen' contains "all": it will open','line_number':2583,'multiline':False]
['text':' in a moment.','line_number':2584,'multiline':False]
['text':'/ @param upd_topline  When true: update topline','line_number':2599,'multiline':False]
['text':' This fails if the cursor is already in the first line.','line_number':2602,'multiline':False]
['text':' try to advance to the column we want to be at','line_number':2608,'multiline':False]
['text':' make sure curwin->w_topline is valid','line_number':2612,'multiline':False]
['text':'/ Move the cursor down "n" lines in window "wp".','line_number':2618,'multiline':False]
['text':'/ Takes care of closed folds.','line_number':2619,'multiline':False]
['text':' count each sequence of folded lines as one logical line','line_number':2630,'multiline':False]
['text':' Move to last line of fold, will fail if it's the end-of-file.','line_number':2632,'multiline':False]
['text':'/ @param upd_topline  When true: update topline','line_number':2652,'multiline':False]
['text':' This fails if the cursor is already in the last line.','line_number':2655,'multiline':False]
['text':' try to advance to the column we want to be at','line_number':2661,'multiline':False]
['text':' make sure curwin->w_topline is valid','line_number':2665,'multiline':False]
['text':'/ Stuff the last inserted text in the read buffer.','line_number':2671,'multiline':False]
['text':'/ Last_insert actually is a copy of the redo buffer, so we','line_number':2672,'multiline':False]
['text':'/ first have to remove the command.','line_number':2673,'multiline':False]
['text':'/','line_number':2674,'multiline':False]
['text':'/ @param c       Command character to be inserted','line_number':2675,'multiline':False]
['text':'/ @param count   Repeat this many times','line_number':2676,'multiline':False]
['text':'/ @param no_esc  Don't add an ESC at the end','line_number':2677,'multiline':False]
['text':' may want to stuff the command character, to start Insert mode','line_number':2689,'multiline':False]
['text':' remove the ESC.','line_number':2694,'multiline':False]
['text':' when the last char is either "0" or "^" it will be quoted if no ESC','line_number':2698,'multiline':False]
['text':' comes after it OR if it will inserted more than once and "ptr"','line_number':2699,'multiline':False]
['text':' starts with ^D.  -- Acevedo','line_number':2700,'multiline':False]
['text':' A trailing "0" is inserted as "<C-V>048", "^" as "<C-V>^".','line_number':2710,'multiline':False]
['text':' put the ESC back','line_number':2721,'multiline':False]
['text':' may want to stuff a trailing ESC, to get out of Insert mode','line_number':2724,'multiline':False]
['text':' Get last inserted string, and remove trailing <Esc>.','line_number':2741,'multiline':False]
['text':' Returns pointer to allocated memory (must be freed) or NULL.','line_number':2742,'multiline':False]
['text':' remove trailing ESC','line_number':2750,'multiline':False]
['text':'/ Check the word in front of the cursor for an abbreviation.','line_number':2757,'multiline':False]
['text':'/ Called when the non-id character "c" has been entered.','line_number':2758,'multiline':False]
['text':'/ When an abbreviation is recognized it is removed from the text and','line_number':2759,'multiline':False]
['text':'/ the replacement string is inserted in typebuf.tb_buf[], followed by "c".','line_number':2760,'multiline':False]
['text':'/','line_number':2761,'multiline':False]
['text':'/ @param  c  character','line_number':2762,'multiline':False]
['text':'/','line_number':2763,'multiline':False]
['text':'/ @return true if the word is a known abbreviation.','line_number':2764,'multiline':False]
['text':' Don't check for abbreviation in paste mode, when disabled and just','line_number':2768,'multiline':False]
['text':' after moving around with cursor keys.','line_number':2769,'multiline':False]
['text':' replace-stack functions','line_number':2778,'multiline':False]
['text':'','line_number':2779,'multiline':False]
['text':' When replacing characters, the replaced characters are remembered for each','line_number':2780,'multiline':False]
['text':' new character.  This is used to re-insert the old text when backspacing.','line_number':2781,'multiline':False]
['text':'','line_number':2782,'multiline':False]
['text':' There is a NUL headed list of characters for each character that is','line_number':2783,'multiline':False]
['text':' currently in the file after the insertion point.  When BS is used, one NUL','line_number':2784,'multiline':False]
['text':' headed list is put back for the deleted character.','line_number':2785,'multiline':False]
['text':'','line_number':2786,'multiline':False]
['text':' For a newline, there are two NUL headed lists.  One contains the characters','line_number':2787,'multiline':False]
['text':' that the NL replaced.  The extra one stores the characters after the cursor','line_number':2788,'multiline':False]
['text':' that were deleted (always white space).','line_number':2789,'multiline':False]
['text':' next entry in replace stack','line_number':2792,'multiline':False]
['text':' max. number of entries','line_number':2793,'multiline':False]
['text':'/ Push character that is replaced onto the replace stack.','line_number':2795,'multiline':False]
['text':'/','line_number':2796,'multiline':False]
['text':'/ replace_offset is normally 0, in which case replace_push will add a new','line_number':2797,'multiline':False]
['text':'/ character at the end of the stack.  If replace_offset is not 0, that many','line_number':2798,'multiline':False]
['text':'/ characters will be left on the stack above the newly inserted character.','line_number':2799,'multiline':False]
['text':'/','line_number':2800,'multiline':False]
['text':'/ @param c character that is replaced (NUL is none)','line_number':2801,'multiline':False]
['text':' nothing to do','line_number':2804,'multiline':False]
['text':'/ Push a character onto the replace stack.  Handles a multi-byte character in','line_number':2820,'multiline':False]
['text':'/ reverse byte order, so that the first byte is popped off first.','line_number':2821,'multiline':False]
['text':'/','line_number':2822,'multiline':False]
['text':'/ @return  the number of bytes done (includes composing characters).','line_number':2823,'multiline':False]
['text':'/ Pop one item from the replace stack.','line_number':2834,'multiline':False]
['text':'/','line_number':2835,'multiline':False]
['text':'/ @return -1 if stack is empty, replaced character or NUL otherwise','line_number':2836,'multiline':False]
['text':'/ Join the top two items on the replace stack.  This removes to "off"'th NUL','line_number':2842,'multiline':False]
['text':'/ encountered.','line_number':2843,'multiline':False]
['text':'/','line_number':2844,'multiline':False]
['text':'/ @param off  offset for which NUL to remove','line_number':2845,'multiline':False]
['text':'/ Pop bytes from the replace stack until a NUL is found, and insert them','line_number':2858,'multiline':False]
['text':'/ before the cursor.  Can only be used in MODE_REPLACE or MODE_VREPLACE state.','line_number':2859,'multiline':False]
['text':' don't want MODE_REPLACE here','line_number':2865,'multiline':False]
['text':' Insert bytes popped from the replace stack. "cc" is the first byte.  If it','line_number':2873,'multiline':False]
['text':' indicates a multi-byte char, pop the other bytes too.','line_number':2874,'multiline':False]
['text':' Handle composing chars.','line_number':2890,'multiline':False]
['text':' stack empty','line_number':2893,'multiline':False]
['text':' Not a multi-byte char, put it back.','line_number':2897,'multiline':False]
['text':' Not a composing char, put it back.','line_number':2910,'multiline':False]
['text':' make the replace stack empty','line_number':2919,'multiline':False]
['text':' (called when exiting replace mode)','line_number':2920,'multiline':False]
['text':' Handle doing a BS for one character.','line_number':2928,'multiline':False]
['text':' cc < 0: replace stack empty, just move cursor','line_number':2929,'multiline':False]
['text':' cc == 0: character was inserted, delete it','line_number':2930,'multiline':False]
['text':' cc > 0: character was replaced, put cc (first byte of original char) back','line_number':2931,'multiline':False]
['text':' and check for more characters to be put back','line_number':2932,'multiline':False]
['text':' When "limit_col" is >= 0, don't delete before this column.  Matters when','line_number':2933,'multiline':False]
['text':' using composing characters, use del_char_after_col() instead of del_char().','line_number':2934,'multiline':False]
['text':' Get the number of screen cells used by the character we are','line_number':2945,'multiline':False]
['text':' going to delete.','line_number':2946,'multiline':False]
['text':' Get the number of screen cells used by the inserted characters','line_number':2958,'multiline':False]
['text':' Delete spaces that were inserted after the cursor to keep the','line_number':2968,'multiline':False]
['text':' text aligned.','line_number':2969,'multiline':False]
['text':' mark the buffer as changed and prepare for displaying','line_number':2978,'multiline':False]
['text':'/ Check that C-indenting is on.','line_number':2985,'multiline':False]
['text':'/ Check that "cinkeys" contains the key "keytyped",','line_number':2992,'multiline':False]
['text':'/ when == '*': Only if key is preceded with '*' (indent before insert)','line_number':2993,'multiline':False]
['text':'/ when == '!': Only if key is preceded with '!' (don't insert)','line_number':2994,'multiline':False]
['text':'/ when == ' ': Only if key is not preceded with '*' or '!' (indent afterwards)','line_number':2995,'multiline':False]
['text':'/','line_number':2996,'multiline':False]
['text':'/ "keytyped" can have a few special values:','line_number':2997,'multiline':False]
['text':'/ KEY_OPEN_FORW :','line_number':2998,'multiline':False]
['text':'/ KEY_OPEN_BACK :','line_number':2999,'multiline':False]
['text':'/ KEY_COMPLETE  : Just finished completion.','line_number':3000,'multiline':False]
['text':'/','line_number':3001,'multiline':False]
['text':'/ @param  keytyped       key that was typed','line_number':3002,'multiline':False]
['text':'/ @param  when           condition on when to perform the check','line_number':3003,'multiline':False]
['text':'/ @param  line_is_empty  when true, accept keys with '0' before them.','line_number':3004,'multiline':False]
['text':' Can happen with CTRL-Y and CTRL-E on a short line.','line_number':3015,'multiline':False]
['text':' 'indentexpr' set: use 'indentkeys'','line_number':3020,'multiline':False]
['text':' 'indentexpr' empty: use 'cinkeys'','line_number':3022,'multiline':False]
['text':' Find out if we want to try a match with this key, depending on','line_number':3025,'multiline':False]
['text':' 'when' and a '*' or '!' before the key.','line_number':3026,'multiline':False]
['text':' If there is a '0', only accept a match if the line is empty.','line_number':3039,'multiline':False]
['text':' But may still match when typing last char of a word.','line_number':3040,'multiline':False]
['text':' Does it look like a control character?','line_number':3051,'multiline':False]
['text':' 'o' means "o" command, open forward.','line_number':3058,'multiline':False]
['text':' 'O' means "O" command, open backward.','line_number':3059,'multiline':False]
['text':' 'e' means to check for "else" at start of line and just before the','line_number':3071,'multiline':False]
['text':' cursor.','line_number':3072,'multiline':False]
['text':' ':' only causes an indent if it is at the end of a label or case','line_number':3083,'multiline':False]
['text':' statement, or when it was before typing the ':' (to fix','line_number':3084,'multiline':False]
['text':' class::method for C++).','line_number':3085,'multiline':False]
['text':' Need to get the line again after cin_islabel().','line_number':3092,'multiline':False]
['text':' Is it a key in <>, maybe?','line_number':3110,'multiline':False]
['text':' make up some named keys <o>, <O>, <e>, <0>, <>>, <<>, <*>,','line_number':3113,'multiline':False]
['text':' <:> and <!> so that people can re-indent on o, O, e, 0, <,','line_number':3114,'multiline':False]
['text':' >, *, : and ! keys if they really really want to.','line_number':3115,'multiline':False]
['text':' Is it a word: "=word"?','line_number':3131,'multiline':False]
['text':' Just completed a word, check if it starts with "look".','line_number':3151,'multiline':False]
['text':' search back for the start of a word.','line_number':3152,'multiline':False]
['text':' TODO(@brammool): multi-byte','line_number':3168,'multiline':False]
['text':' "0=word": Check if there are only blanks before the','line_number':3184,'multiline':False]
['text':' word.','line_number':3185,'multiline':False]
['text':' Ok, it's a boring generic character.','line_number':3197,'multiline':False]
['text':' Skip over ", ".','line_number':3207,'multiline':False]
['text':' If we are going to wait for a character, show a '"'.','line_number':3219,'multiline':False]
['text':' may need to redraw when no more chars available now','line_number':3222,'multiline':False]
['text':' Don't map the register name. This also prevents the mode message to be','line_number':3229,'multiline':False]
['text':' deleted when ESC is hit.','line_number':3230,'multiline':False]
['text':' Get a third key for literal register insertion','line_number':3236,'multiline':False]
['text':' Don't call u_sync() while typing the expression or giving an error','line_number':3245,'multiline':False]
['text':' message for it. Only call it explicitly.','line_number':3246,'multiline':False]
['text':' Sync undo when evaluating the expression calls setline() or','line_number':3251,'multiline':False]
['text':' append(), so that it can be undone separately.','line_number':3252,'multiline':False]
['text':' Cursor may be moved back a column.','line_number':3257,'multiline':False]
['text':' remove the '"'','line_number':3263,'multiline':False]
['text':' Append the command to the redo buffer.','line_number':3266,'multiline':False]
['text':' remove the '"'','line_number':3275,'multiline':False]
['text':' When the '=' register was used and a function was invoked that','line_number':3277,'multiline':False]
['text':' did ":stopinsert" then stuff_empty() returns false but we won't','line_number':3278,'multiline':False]
['text':' insert anything, need to remove the '"'','line_number':3279,'multiline':False]
['text':' If the inserted register is empty, we need to remove the '"'','line_number':3290,'multiline':False]
['text':' Disallow starting Visual mode here, would get a weird mode.','line_number':3295,'multiline':False]
['text':' CTRL-G commands in Insert mode.','line_number':3301,'multiline':False]
['text':' Right after CTRL-X the cursor will be after the ruler.','line_number':3304,'multiline':False]
['text':' Don't map the second key. This also prevents the mode message to be','line_number':3307,'multiline':False]
['text':' deleted when ESC is hit.','line_number':3308,'multiline':False]
['text':' CTRL-G k and CTRL-G <Up>: cursor up to Insstart.col','line_number':3315,'multiline':False]
['text':' CTRL-G j and CTRL-G <Down>: cursor down to Insstart.col','line_number':3322,'multiline':False]
['text':' CTRL-G u: start new undoable edit','line_number':3329,'multiline':False]
['text':' Need to reset Insstart, esp. because a BS that joins','line_number':3334,'multiline':False]
['text':' a line to the previous one must save for undo.','line_number':3335,'multiline':False]
['text':' CTRL-G U: do not break undo with the next char.','line_number':3340,'multiline':False]
['text':' Allow one left/right cursor movement with the next char,','line_number':3342,'multiline':False]
['text':' without breaking undo.','line_number':3343,'multiline':False]
['text':' Esc after CTRL-G cancels it.','line_number':3348,'multiline':False]
['text':' Unknown CTRL-G command, reserved for future expansion.','line_number':3351,'multiline':False]
['text':' CTRL-^ in Insert mode.','line_number':3357,'multiline':False]
['text':' ":lmap" mappings exists, Toggle use of ":lmap" mappings.','line_number':3361,'multiline':False]
['text':' Show/unshow value of 'keymap' in status lines.','line_number':3372,'multiline':False]
['text':'/ Handle ESC in insert mode.','line_number':3376,'multiline':False]
['text':'/','line_number':3377,'multiline':False]
['text':'/ @param[in,out]  count    repeat count of the insert command','line_number':3378,'multiline':False]
['text':'/ @param          cmdchar  command that started the insert','line_number':3379,'multiline':False]
['text':'/ @param          nomove   when true, don't move the cursor','line_number':3380,'multiline':False]
['text':'/','line_number':3381,'multiline':False]
['text':'/ @return true when leaving insert mode, false when repeating the insert.','line_number':3382,'multiline':False]
['text':' Don't append the ESC for "r<CR>" and "grx".','line_number':3396,'multiline':False]
['text':' Repeating insert may take a long time.  Check for','line_number':3401,'multiline':False]
['text':' interrupt now and then.','line_number':3402,'multiline':False]
['text':' repeat what was typed','line_number':3410,'multiline':False]
['text':' Vi repeats the insert without replacing characters.','line_number':3411,'multiline':False]
['text':' No ESC in redo buffer','line_number':3418,'multiline':False]
['text':' Repeat the insert','line_number':3422,'multiline':False]
['text':' When an autoindent was removed, curswant stays after the','line_number':3433,'multiline':False]
['text':' indent','line_number':3434,'multiline':False]
['text':' Remember the last Insert position in the '^ mark.','line_number':3439,'multiline':False]
['text':' The cursor should end up on the last inserted character.','line_number':3445,'multiline':False]
['text':' Don't do it for CTRL-O, unless past the end of the line.','line_number':3446,'multiline':False]
['text':' Correct cursor for multi-byte character.','line_number':3459,'multiline':False]
['text':' need to position cursor again when on a TAB and','line_number':3466,'multiline':False]
['text':' when on a char with inline virtual text','line_number':3467,'multiline':False]
['text':' may show different cursor shape','line_number':3473,'multiline':False]
['text':' When recording or for CTRL-O, need to display the new mode.','line_number':3475,'multiline':False]
['text':' Otherwise remove the mode message.','line_number':3476,'multiline':False]
['text':' Exit Insert mode','line_number':3483,'multiline':False]
['text':' Toggle language: revins_on.','line_number':3487,'multiline':False]
['text':' Move to end of reverse inserted text.','line_number':3488,'multiline':False]
['text':'/ If 'keymodel' contains "startsel", may start selection.','line_number':3509,'multiline':False]
['text':'/','line_number':3510,'multiline':False]
['text':'/ @param  c  character to check','line_number':3511,'multiline':False]
['text':'','line_number':3512,'multiline':False]
['text':'/ @return true when a CTRL-O and other keys stuffed.','line_number':3513,'multiline':False]
['text':' Start selection right away, the cursor can move with CTRL-O when','line_number':3537,'multiline':False]
['text':' beyond the end of the line.','line_number':3538,'multiline':False]
['text':' Execute the key in (insert) Select mode.','line_number':3541,'multiline':False]
['text':' <Insert> key in Insert mode: toggle insert/replace mode.','line_number':3554,'multiline':False]
['text':' may show different cursor shape','line_number':3569,'multiline':False]
['text':' Pressed CTRL-O in Insert mode.','line_number':3572,'multiline':False]
['text':' cursor always keeps its column','line_number':3584,'multiline':False]
['text':' If the cursor is on an indent, ^T/^D insert/delete one','line_number':3590,'multiline':False]
['text':' shiftwidth.  Otherwise ^T/^D behave like a "<<" or ">>".','line_number':3591,'multiline':False]
['text':' Always round the indent to 'shiftwidth', this is compatible','line_number':3592,'multiline':False]
['text':' with vi.  But vi only supports ^T and ^D after an','line_number':3593,'multiline':False]
['text':' autoindent, we support it everywhere.','line_number':3594,'multiline':False]
['text':' 0^D and ^^D: remove all indent.','line_number':3602,'multiline':False]
['text':' delete the '^' or '0'','line_number':3606,'multiline':False]
['text':' In Replace mode, restore the characters that '^' or '0' replaced.','line_number':3607,'multiline':False]
['text':' remember curr. indent','line_number':3612,'multiline':False]
['text':' no cindenting after ^D or ^T','line_number':3625,'multiline':False]
['text':' delete newline','line_number':3633,'multiline':False]
['text':' only if "eol" included','line_number':3635,'multiline':False]
['text':' Adjust orig_line_count in case more lines have been deleted than','line_number':3640,'multiline':False]
['text':' have been added. That makes sure, that open_line() later','line_number':3641,'multiline':False]
['text':' can access all buffer lines correctly','line_number':3642,'multiline':False]
['text':' delete char under cursor','line_number':3648,'multiline':False]
['text':' Delete one character for ins_bs().','line_number':3658,'multiline':False]
['text':' Don't delete characters before the insert point when in','line_number':3664,'multiline':False]
['text':' Replace mode','line_number':3665,'multiline':False]
['text':'/ Handle Backspace, delete-word and delete-line in Insert mode.','line_number':3675,'multiline':False]
['text':'/','line_number':3676,'multiline':False]
['text':'/ @param          c                 character that was typed','line_number':3677,'multiline':False]
['text':'/ @param          mode              backspace mode to use','line_number':3678,'multiline':False]
['text':'/ @param[in,out]  inserted_space_p  whether a space was the last','line_number':3679,'multiline':False]
['text':'                                    character inserted','line_number':3680,'multiline':False]
['text':'/','line_number':3681,'multiline':False]
['text':'/ @return true when backspace was actually used.','line_number':3682,'multiline':False]
['text':' init for GCC','line_number':3687,'multiline':False]
['text':' can't delete anything in an empty file','line_number':3691,'multiline':False]
['text':' can't backup past first character in buffer','line_number':3692,'multiline':False]
['text':' can't backup past starting point unless 'backspace' > 1','line_number':3693,'multiline':False]
['text':' can backup to a previous line if 'backspace' == 0','line_number':3694,'multiline':False]
['text':' After BS, don't auto-end comment','line_number':3716,'multiline':False]
['text':' put cursor after last inserted char','line_number':3717,'multiline':False]
['text':' Virtualedit:','line_number':3720,'multiline':False]
['text':'    BACKSPACE_CHAR eats a virtual space','line_number':3721,'multiline':False]
['text':'    BACKSPACE_WORD eats all coladd','line_number':3722,'multiline':False]
['text':'    BACKSPACE_LINE eats all coladd and keeps going','line_number':3723,'multiline':False]
['text':' Delete newline!','line_number':3736,'multiline':False]
['text':' In replace mode:','line_number':3747,'multiline':False]
['text':' cc < 0: NL was inserted, delete it','line_number':3748,'multiline':False]
['text':' cc >= 0: NL was replaced, put original characters back','line_number':3749,'multiline':False]
['text':' returns -1 if NL was inserted','line_number':3752,'multiline':False]
['text':' In replace mode, in the line we started replacing, we only move the','line_number':3754,'multiline':False]
['text':' cursor.','line_number':3755,'multiline':False]
['text':' remember current char','line_number':3761,'multiline':False]
['text':' When "aw" is in 'formatoptions' we must delete the space at','line_number':3764,'multiline':False]
['text':' the end of the line, otherwise the line will be broken','line_number':3765,'multiline':False]
['text':' again when auto-formatting.','line_number':3766,'multiline':False]
['text':' In MODE_REPLACE mode we have to put back the text that was','line_number':3786,'multiline':False]
['text':' replaced by the NL. On the replace stack is first a','line_number':3787,'multiline':False]
['text':' NUL-terminated sequence of characters that were deleted and then','line_number':3788,'multiline':False]
['text':' the characters that NL replaced.','line_number':3789,'multiline':False]
['text':' Do the next ins_char() in MODE_NORMAL state, to','line_number':3791,'multiline':False]
['text':' prevent ins_char() from replacing characters and','line_number':3792,'multiline':False]
['text':' avoiding showmatch().','line_number':3793,'multiline':False]
['text':' restore characters (blanks) deleted after cursor','line_number':3796,'multiline':False]
['text':' restore the characters that NL replaced','line_number':3803,'multiline':False]
['text':' Delete character(s) before the cursor.','line_number':3810,'multiline':False]
['text':' put cursor on last inserted char','line_number':3811,'multiline':False]
['text':' keep indent','line_number':3815,'multiline':False]
['text':' should now fix the indent to match with the previous line','line_number':3823,'multiline':False]
['text':' Handle deleting one 'shiftwidth' or 'softtabstop'.','line_number':3829,'multiline':False]
['text':' Compute the virtual column where we want to be.  Since','line_number':3842,'multiline':False]
['text':' 'showbreak' may get in the way, need to get the last column of','line_number':3843,'multiline':False]
['text':' the previous character.','line_number':3844,'multiline':False]
['text':' delete characters until we are at or before want_vcol','line_number':3859,'multiline':False]
['text':' insert extra spaces until we are at want_vcol','line_number':3865,'multiline':False]
['text':' Remember the first char we inserted','line_number':3867,'multiline':False]
['text':' If we are now back where we started delete one character.  Can','line_number':3884,'multiline':False]
['text':' happen when using 'sts' and 'linebreak'.','line_number':3885,'multiline':False]
['text':' Delete up to starting point, start of line or previous word.','line_number':3890,'multiline':False]
['text':' put cursor on char to be deleted','line_number':3894,'multiline':False]
['text':' look multi-byte character class','line_number':3898,'multiline':False]
['text':' start of word?','line_number':3901,'multiline':False]
['text':' end of word?','line_number':3906,'multiline':False]
['text':' If there are combining characters and 'delcombine' is set','line_number':3923,'multiline':False]
['text':' move the cursor back.  Don't back up before the base character.','line_number':3924,'multiline':False]
['text':' Just a single backspace?:','line_number':3936,'multiline':False]
['text':' It's a little strange to put backspaces into the redo','line_number':3959,'multiline':False]
['text':' buffer, but it makes auto-indent a lot easier to deal','line_number':3960,'multiline':False]
['text':' with.','line_number':3961,'multiline':False]
['text':' If deleted before the insertion point, adjust it','line_number':3964,'multiline':False]
['text':' vi behaviour: the cursor moves backward but the character that','line_number':3970,'multiline':False]
['text':'               was there remains visible','line_number':3971,'multiline':False]
['text':' Vim behaviour: the cursor moves backward and the character that','line_number':3972,'multiline':False]
['text':'                was there is erased from the screen.','line_number':3973,'multiline':False]
['text':' We can emulate the vi behaviour by pretending there is a dollar','line_number':3974,'multiline':False]
['text':' displayed even when there isn't.','line_number':3975,'multiline':False]
['text':'  --pkv Sun Jan 19 01:56:40 EST 2003','line_number':3976,'multiline':False]
['text':' When deleting a char the cursor line must never be in a closed fold.','line_number':3981,'multiline':False]
['text':' E.g., when 'foldmethod' is indent and deleting the first non-white','line_number':3982,'multiline':False]
['text':' char before a Tab.','line_number':3983,'multiline':False]
['text':' end undoable change','line_number':3992,'multiline':False]
['text':' If exit reversed string, position is fixed','line_number':4004,'multiline':False]
['text':' if 'whichwrap' set for cursor in insert mode may go to previous line.','line_number':4010,'multiline':False]
['text':' always break undo when moving upwards/downwards, else undo may break','line_number':4011,'multiline':False]
['text':' so we stay at the end','line_number':4015,'multiline':False]
['text':' end undoable change','line_number':4056,'multiline':False]
['text':'/ @param end_change      end undoable change','line_number':4074,'multiline':False]
['text':' end undoable change','line_number':4077,'multiline':False]
['text':' if 'whichwrap' set for cursor in insert mode, may move the','line_number':4100,'multiline':False]
['text':' cursor to the next line','line_number':4101,'multiline':False]
['text':' end undoable change','line_number':4114,'multiline':False]
['text':'/ @param startcol  when true move to Insstart.col','line_number':4133,'multiline':False]
['text':' <C-PageUp>: tab page back','line_number':4161,'multiline':False]
['text':'/ @param startcol  when true move to Insstart.col','line_number':4178,'multiline':False]
['text':' <C-PageDown>: tab page forward','line_number':4206,'multiline':False]
['text':'/ Handle TAB in Insert or Replace mode.','line_number':4223,'multiline':False]
['text':'/','line_number':4224,'multiline':False]
['text':'/ @return true when the TAB needs to be inserted like a normal character.','line_number':4225,'multiline':False]
['text':' When nothing special, insert TAB like a normal character.','line_number':4243,'multiline':False]
['text':' These five lines mean 'tabstop' != 'shiftwidth'','line_number':4248,'multiline':False]
['text':' insert tab in indent, use 'shiftwidth'','line_number':4269,'multiline':False]
['text':' use 'softtabstop' when set','line_number':4274,'multiline':False]
['text':' otherwise use 'tabstop'','line_number':4279,'multiline':False]
['text':' Insert the first space with ins_char().    It will delete one char in','line_number':4285,'multiline':False]
['text':' replace mode.  Insert the rest with ins_str(); it will not delete any','line_number':4286,'multiline':False]
['text':' chars.  For MODE_VREPLACE state, we use ins_char() for all characters.','line_number':4287,'multiline':False]
['text':' no char replaced','line_number':4294,'multiline':False]
['text':' When 'expandtab' not set: Replace spaces by TABs where possible.','line_number':4300,'multiline':False]
['text':' init for GCC','line_number':4305,'multiline':False]
['text':' Get the current line.  For MODE_VREPLACE state, don't make real','line_number':4312,'multiline':False]
['text':' changes yet, just work on a copy of the line.','line_number':4313,'multiline':False]
['text':' When 'L' is not in 'cpoptions' a tab always takes up 'ts' spaces.','line_number':4324,'multiline':False]
['text':' Find first white before the cursor','line_number':4329,'multiline':False]
['text':' In Replace mode, don't change characters before the insert point.','line_number':4336,'multiline':False]
['text':' compute virtual column numbers of first white and cursor','line_number':4344,'multiline':False]
['text':' Use as many TABs as possible.  Beware of 'breakindent', 'showbreak'','line_number':4352,'multiline':False]
['text':' and 'linebreak' adding extra virtual columns.','line_number':4353,'multiline':False]
['text':' Column of first change','line_number':4362,'multiline':False]
['text':' May have to adjust Insstart','line_number':4363,'multiline':False]
['text':' Skip over the spaces we need.','line_number':4378,'multiline':False]
['text':' Must have a char with 'showbreak' just before it.','line_number':4390,'multiline':False]
['text':' Delete following spaces.','line_number':4396,'multiline':False]
['text':' correct replace stack.','line_number':4400,'multiline':False]
['text':' In MODE_VREPLACE state, we haven't changed anything yet.  Do it','line_number':4414,'multiline':False]
['text':' now by backspacing over the changed spacing and then inserting','line_number':4415,'multiline':False]
['text':' the new spacing.','line_number':4416,'multiline':False]
['text':' Backspace from real cursor to change_col','line_number':4418,'multiline':False]
['text':' Insert each char in saved_line from changed_col to','line_number':4421,'multiline':False]
['text':' ptr-cursor','line_number':4422,'multiline':False]
['text':'/ Handle CR or NL in insert mode.','line_number':4436,'multiline':False]
['text':'/','line_number':4437,'multiline':False]
['text':'/ @return false when it can't undo.','line_number':4438,'multiline':False]
['text':' Strange Vi behaviour: In Replace mode, typing a NL will not delete the','line_number':4449,'multiline':False]
['text':' character under the cursor.  Only push a NUL on the replace stack,','line_number':4450,'multiline':False]
['text':' nothing to put back when the NL is deleted.','line_number':4451,'multiline':False]
['text':' In MODE_VREPLACE state, a NL replaces the rest of the line, and starts','line_number':4457,'multiline':False]
['text':' replacing the next line, so we push all of the characters left on the','line_number':4458,'multiline':False]
['text':' line onto the replace stack.  This is not done here though, it is done','line_number':4459,'multiline':False]
['text':' in open_line().','line_number':4460,'multiline':False]
['text':' Put cursor on NUL if on the last char and coladd is 1 (happens after','line_number':4462,'multiline':False]
['text':' CTRL-O).','line_number':4463,'multiline':False]
['text':' NL in reverse insert will always start in the end of current line.','line_number':4468,'multiline':False]
['text':' When inserting a line the cursor line must never be in a closed fold.','line_number':4479,'multiline':False]
['text':' Handle digraph in insert mode.','line_number':4485,'multiline':False]
['text':' Returns character still to be inserted, or NUL when nothing remaining to be','line_number':4486,'multiline':False]
['text':' done.','line_number':4487,'multiline':False]
['text':' may need to redraw when no more chars available now','line_number':4494,'multiline':False]
['text':' don't map the digraph chars. This also prevents the','line_number':4502,'multiline':False]
['text':' mode message to be deleted when ESC is hit','line_number':4503,'multiline':False]
['text':' when the line fits in 'columns' the '?' is at the start of the next','line_number':4510,'multiline':False]
['text':' line and will not be removed by the redraw','line_number':4511,'multiline':False]
['text':' special key','line_number':4515,'multiline':False]
['text':' may need to redraw when no more chars available now','line_number':4523,'multiline':False]
['text':' when the line fits in 'columns' the '?' is at the start of the','line_number':4539,'multiline':False]
['text':' next line and will not be removed by a redraw','line_number':4540,'multiline':False]
['text':' Handle CTRL-E and CTRL-Y in Insert mode: copy char from other line.','line_number':4554,'multiline':False]
['text':' Returns the char to be inserted, or NUL if none found.','line_number':4555,'multiline':False]
['text':' try to advance to the cursor column','line_number':4565,'multiline':False]
['text':' CTRL-Y or CTRL-E typed in Insert mode.','line_number':4591,'multiline':False]
['text':' The character must be taken literally, insert like it','line_number':4606,'multiline':False]
['text':' was typed after a CTRL-V, and pretend 'textwidth'','line_number':4607,'multiline':False]
['text':' wasn't set.  Digits, 'o' and 'x' are special after a','line_number':4608,'multiline':False]
['text':' CTRL-V, don't use it for these.','line_number':4609,'multiline':False]
['text':' pretend CTRL-V is last character','line_number':4619,'multiline':False]
['text':' Try to do some very smart auto-indenting.','line_number':4626,'multiline':False]
['text':' Used when inserting a "normal" character.','line_number':4627,'multiline':False]
['text':' do some very smart indenting when entering '{' or '}'','line_number':4632,'multiline':False]
['text':' for '}' set indent equal to indent of line containing matching '{'','line_number':4638,'multiline':False]
['text':' If the matching '{' has a ')' immediately before it (ignoring','line_number':4641,'multiline':False]
['text':' white-space), then line up with the start of the line','line_number':4642,'multiline':False]
['text':' containing the matching '(' if there is one.  This handles the','line_number':4643,'multiline':False]
['text':' case where an "if (..\n..) {" statement continues over multiple','line_number':4644,'multiline':False]
['text':' lines -- webb','line_number':4645,'multiline':False]
['text':' skip blanks before '{'','line_number':4648,'multiline':False]
['text':' when inserting '{' after "O" reduce indent, but not','line_number':4664,'multiline':False]
['text':' more than indent of previous line','line_number':4665,'multiline':False]
['text':' ignore empty lines and lines starting with '#'.','line_number':4673,'multiline':False]
['text':' set indent of '#' always to 0','line_number':4689,'multiline':False]
['text':' remember current indent for next line','line_number':4691,'multiline':False]
['text':' Adjust ai_col, the char at this position can be deleted.','line_number':4696,'multiline':False]
['text':' Get the value that w_virtcol would have when 'list' is off.','line_number':4702,'multiline':False]
['text':' Unless 'cpo' contains the 'L' flag.','line_number':4703,'multiline':False]
['text':' check validity of cursor in current buffer','line_number':4706,'multiline':False]
['text':' Handle the InsertCharPre autocommand.','line_number':4718,'multiline':False]
['text':' "c" is the character that was typed.','line_number':4719,'multiline':False]
['text':' Return a pointer to allocated memory with the replacement string.','line_number':4720,'multiline':False]
['text':' Return NULL to continue inserting "c".','line_number':4721,'multiline':False]
['text':' Return quickly when there is nothing to do.','line_number':4727,'multiline':False]
['text':' Lock the text to avoid weird things from happening.','line_number':4733,'multiline':False]
['text':' Get the value of v:char.  It may be empty or more than one','line_number':4739,'multiline':False]
['text':' character.  Only use it when changed, otherwise continue with the','line_number':4740,'multiline':False]
['text':' original character to avoid breaking autoindent.','line_number':4741,'multiline':False]
['text':' Restore the State, it may have been changed.','line_number':4750,'multiline':False]
['text':'/ Trigger "event" and take care of fixing undo.','line_number':4766,'multiline':False]
['text':' If u_savesub() was called then we are not prepared to start','line_number':4773,'multiline':False]
['text':' a new line.  Call u_save() with no contents to fix that.','line_number':4774,'multiline':False]
['text':' Except when leaving Insert mode.','line_number':4775,'multiline':False]
