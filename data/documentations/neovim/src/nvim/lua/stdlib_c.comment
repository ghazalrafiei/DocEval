['text':'/ convert byte index to UTF-32 and UTF-16 indices','line_number':160,'multiline':False]
['text':'/','line_number':161,'multiline':False]
['text':'/ Expects a string and an optional index. If no index is supplied, the length','line_number':162,'multiline':False]
['text':'/ of the string is returned.','line_number':163,'multiline':False]
['text':'/','line_number':164,'multiline':False]
['text':'/ Returns two values: the UTF-32 and UTF-16 indices.','line_number':165,'multiline':False]
['text':'/ return byte indices of codepoints in a string (only supports utf-8 currently).','line_number':189,'multiline':False]
['text':'/','line_number':190,'multiline':False]
['text':'/ Expects a string.','line_number':191,'multiline':False]
['text':'/','line_number':192,'multiline':False]
['text':'/ Returns a list of codepoints.','line_number':193,'multiline':False]
['text':'/ Return the offset from the 1-indexed byte position to the first byte of the','line_number':212,'multiline':False]
['text':'/ current character.','line_number':213,'multiline':False]
['text':'/','line_number':214,'multiline':False]
['text':'/ Expects a string and an int.','line_number':215,'multiline':False]
['text':'/','line_number':216,'multiline':False]
['text':'/ Returns the byte offset to the first byte of the current character','line_number':217,'multiline':False]
['text':'/ pointed into by the offset.','line_number':218,'multiline':False]
['text':'/ Return the offset from the 1-indexed byte position to the last','line_number':232,'multiline':False]
['text':'/ byte of the current character.','line_number':233,'multiline':False]
['text':'/','line_number':234,'multiline':False]
['text':'/ Expects a string and an int.','line_number':235,'multiline':False]
['text':'/','line_number':236,'multiline':False]
['text':'/ Returns the byte offset to the last byte of the current character','line_number':237,'multiline':False]
['text':'/ pointed into by the offset.','line_number':238,'multiline':False]
['text':'/ convert UTF-32 or UTF-16 indices to byte index.','line_number':252,'multiline':False]
['text':'/','line_number':253,'multiline':False]
['text':'/ Expects up to three args: string, index and use_utf16.','line_number':254,'multiline':False]
['text':'/ If use_utf16 is not supplied it defaults to false (use UTF-32)','line_number':255,'multiline':False]
['text':'/','line_number':256,'multiline':False]
['text':'/ Returns the byte index.','line_number':257,'multiline':False]
['text':' [udata, meta]','line_number':303,'multiline':False]
['text':' [udata]','line_number':304,'multiline':False]
['text':' non-local return if not found','line_number':349,'multiline':False]
['text':' Delete the key','line_number':368,'multiline':False]
['text':' Doesn't exist, nothing to do','line_number':370,'multiline':False]
['text':' Notify watchers','line_number':373,'multiline':False]
['text':' Delete the entry','line_number':378,'multiline':False]
['text':' Update the key','line_number':381,'multiline':False]
['text':' Convert the lua value to a vimscript type in the temporary variable','line_number':384,'multiline':False]
['text':' Need to create an entry','line_number':393,'multiline':False]
['text':' Clear the old value','line_number':409,'multiline':False]
['text':' Update the value','line_number':413,'multiline':False]
['text':' Notify watchers','line_number':416,'multiline':False]
['text':' Clear the temporary variable','line_number':422,'multiline':False]
['text':' non-local return if not found','line_number':430,'multiline':False]
['text':' try to autoload script','line_number':436,'multiline':False]
['text':' nil','line_number':438,'multiline':False]
['text':' nil','line_number':443,'multiline':False]
['text':'/ Compare two strings, ignoring case','line_number':449,'multiline':False]
['text':'/','line_number':450,'multiline':False]
['text':'/ Expects two values on the stack: compared strings. Returns one of the','line_number':451,'multiline':False]
['text':'/ following numbers: 0, -1 or 1.','line_number':452,'multiline':False]
['text':'/','line_number':453,'multiline':False]
['text':'/ Does no error handling: never call it with non-string or with some arguments','line_number':454,'multiline':False]
['text':'/ omitted.','line_number':455,'multiline':False]
['text':' Compare "a\0" greater then "a".','line_number':472,'multiline':False]
['text':' Can't shift both strings by the same amount of bytes: lowercase','line_number':479,'multiline':False]
['text':' letter may have different byte-length than uppercase.','line_number':480,'multiline':False]
['text':'/ Convert string from one encoding to another','line_number':497,'multiline':False]
['text':' Update foldlevels (e.g., by evaluating 'foldexpr') for all lines in the current window without','line_number':539,'multiline':False]
['text':' invoking other side effects. Unlike `zx`, it does not close manually opened folds and does not','line_number':540,'multiline':False]
['text':' open folds under the cursor.','line_number':541,'multiline':False]
['text':' recompute folds','line_number':544,'multiline':False]
['text':' Access to internal functions. For use in runtime/','line_number':551,'multiline':False]
['text':' _getvar','line_number':554,'multiline':False]
['text':' _setvar','line_number':558,'multiline':False]
['text':' _updatefolds','line_number':562,'multiline':False]
['text':' TODO(bfredl): some of basic string functions should already be','line_number':570,'multiline':False]
['text':' (or be easy to make) threadsafe','line_number':571,'multiline':False]
['text':' stricmp','line_number':573,'multiline':False]
['text':' str_utfindex','line_number':576,'multiline':False]
['text':' str_byteindex','line_number':579,'multiline':False]
['text':' str_utf_pos','line_number':582,'multiline':False]
['text':' str_utf_start','line_number':585,'multiline':False]
['text':' str_utf_end','line_number':588,'multiline':False]
['text':' regex','line_number':591,'multiline':False]
['text':' [meta, meta]','line_number':597,'multiline':False]
['text':' [meta]','line_number':598,'multiline':False]
['text':' don't use metatable now','line_number':599,'multiline':False]
['text':' vim.spell','line_number':601,'multiline':False]
['text':' vim.iconv','line_number':605,'multiline':False]
['text':' depends on p_ambw, p_emoji','line_number':606,'multiline':False]
['text':' vim.base64','line_number':610,'multiline':False]
['text':' vim.mpack','line_number':617,'multiline':False]
['text':' package.loaded.mpack = vim.mpack','line_number':622,'multiline':False]
['text':' otherwise luv will be reinitialized when require'mpack'','line_number':623,'multiline':False]
['text':' vim.lpeg','line_number':630,'multiline':False]
['text':' package.loaded.lpeg = vim.lpeg','line_number':636,'multiline':False]
['text':' vim.diff','line_number':643,'multiline':False]
['text':' vim.json','line_number':647,'multiline':False]
['text':' if building with puc lua, use internal fallback for require'bit'','line_number':652,'multiline':False]
['text':'/ like luaL_error, but allow cleanup','line_number':659,'multiline':False]
