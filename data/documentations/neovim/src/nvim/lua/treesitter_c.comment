['text':' lua bindings for tree-sitter.','line_number':1,'multiline':False]
['text':' NB: this file mostly contains a generic lua interface for tree-sitter','line_number':2,'multiline':False]
['text':' trees and nodes, and could be broken out as a reusable lua package','line_number':3,'multiline':False]
['text':' cursors are not exposed, but still needs garbage collection','line_number':129,'multiline':False]
['text':' [meta]','line_number':145,'multiline':False]
['text':' [meta, meta]','line_number':148,'multiline':False]
['text':' [meta]','line_number':149,'multiline':False]
['text':' [] (don't use it now)','line_number':151,'multiline':False]
['text':'/ Init the tslua library.','line_number':154,'multiline':False]
['text':'/','line_number':155,'multiline':False]
['text':'/ All global state is stored in the registry of the lua_State.','line_number':156,'multiline':False]
['text':' type metatables','line_number':159,'multiline':False]
['text':' Creates the language into the internal language map.','line_number':177,'multiline':False]
['text':'','line_number':178,'multiline':False]
['text':' Returns true if the language is correctly loaded in the language map','line_number':179,'multiline':False]
['text':' [retval]','line_number':262,'multiline':False]
['text':' [retval, symbols]','line_number':267,'multiline':False]
['text':' not used by the API','line_number':271,'multiline':False]
['text':' [retval, symbols, elem]','line_number':274,'multiline':False]
['text':' [retval, symbols, elem]','line_number':278,'multiline':False]
['text':' [retval, symbols]','line_number':279,'multiline':False]
['text':' [retval]','line_number':282,'multiline':False]
['text':' [retval, fields]','line_number':285,'multiline':False]
['text':' Field IDs go from 1 to nfields inclusive (extra index 0 maps to NULL)','line_number':286,'multiline':False]
['text':' [retval, fields]','line_number':289,'multiline':False]
['text':' [retval]','line_number':292,'multiline':False]
['text':' [retval, version]','line_number':295,'multiline':False]
['text':' Gather language name','line_number':303,'multiline':False]
['text':' [udata, meta]','line_number':319,'multiline':False]
['text':' [udata]','line_number':320,'multiline':False]
['text':' Translate embedded \n to NUL','line_number':378,'multiline':False]
['text':' now add the final \n. If it didn't fit, input_cb will be called again','line_number':382,'multiline':False]
['text':' on the same line with advanced column.','line_number':383,'multiline':False]
['text':' This switch is necessary because of the behavior of lua_isstring, that','line_number':439,'multiline':False]
['text':' consider numbers as strings...','line_number':440,'multiline':False]
['text':' Sometimes parsing fails (timeout, or wrong parser ABI)','line_number':470,'multiline':False]
['text':' In those case, just return an error.','line_number':471,'multiline':False]
['text':' The new tree will be pushed to the stack, without copy, ownership is now to the lua GC.','line_number':476,'multiline':False]
['text':' Old tree is owned by lua GC since before','line_number':477,'multiline':False]
['text':' [tree]','line_number':481,'multiline':False]
['text':' [tree, ranges]','line_number':483,'multiline':False]
['text':' [tree]','line_number':507,'multiline':False]
['text':' Use the top of the stack (without popping it) to create a TSRange, it can be','line_number':557,'multiline':False]
['text':' either a lua table or a TSNode','line_number':558,'multiline':False]
['text':' should be a table of 6 elements','line_number':564,'multiline':False]
['text':' [ range, start_row]','line_number':569,'multiline':False]
['text':' [ range, start_col]','line_number':573,'multiline':False]
['text':' [ range, start_byte]','line_number':577,'multiline':False]
['text':' [ range, end_row]','line_number':581,'multiline':False]
['text':' [ range, end_col]','line_number':585,'multiline':False]
['text':' [ range, end_byte]','line_number':589,'multiline':False]
['text':' [ range ]','line_number':591,'multiline':False]
['text':' [ parser, ranges ]','line_number':641,'multiline':False]
['text':' [ parser, ranges, range ]','line_number':643,'multiline':False]
['text':' This memcpies ranges, thus we can free it afterwards','line_number':648,'multiline':False]
['text':' Tree methods','line_number':773,'multiline':False]
['text':'/ Push tree interface on to the lua stack.','line_number':775,'multiline':False]
['text':'/','line_number':776,'multiline':False]
['text':'/ The tree is not copied. Ownership of the tree is transferred from C to','line_number':777,'multiline':False]
['text':'/ Lua. If needed use ts_tree_copy() in the caller','line_number':778,'multiline':False]
['text':' [udata]','line_number':786,'multiline':False]
['text':' [udata, meta]','line_number':790,'multiline':False]
['text':' [udata]','line_number':791,'multiline':False]
['text':' To prevent the tree from being garbage collected, create a reference to it','line_number':793,'multiline':False]
['text':' in the fenv which will be passed to userdata nodes of the tree.','line_number':794,'multiline':False]
['text':' Note: environments (fenvs) associated with userdata have no meaning in Lua','line_number':795,'multiline':False]
['text':' and are only used to associate a table.','line_number':796,'multiline':False]
['text':' [udata, reftable]','line_number':797,'multiline':False]
['text':' [udata, reftable, udata]','line_number':798,'multiline':False]
['text':' [udata, reftable]','line_number':799,'multiline':False]
['text':' [udata]','line_number':800,'multiline':False]
['text':' Node methods','line_number':835,'multiline':False]
['text':'/ Push node interface on to the Lua stack','line_number':837,'multiline':False]
['text':'/','line_number':838,'multiline':False]
['text':'/ Top of stack must either be the tree this node belongs to or another node','line_number':839,'multiline':False]
['text':'/ of the same tree! This value is not popped. Can only be called inside a','line_number':840,'multiline':False]
['text':'/ cfunction with the tslua environment.','line_number':841,'multiline':False]
['text':' [nil]','line_number':846,'multiline':False]
['text':' [udata]','line_number':849,'multiline':False]
['text':' [udata, meta]','line_number':851,'multiline':False]
['text':' [udata]','line_number':852,'multiline':False]
['text':' Copy the fenv which contains the nodes tree.','line_number':854,'multiline':False]
['text':' [udata, reftable]','line_number':855,'multiline':False]
['text':' [udata]','line_number':856,'multiline':False]
['text':' [table]','line_number':1021,'multiline':False]
['text':' [table, node]','line_number':1029,'multiline':False]
['text':' First call should return first child','line_number':1171,'multiline':False]
['text':' [node]','line_number':1184,'multiline':False]
['text':' [node, field_name_or_nil]','line_number':1192,'multiline':False]
['text':' [udata]','line_number':1207,'multiline':False]
['text':' [udata, mt]','line_number':1210,'multiline':False]
['text':' [udata]','line_number':1211,'multiline':False]
['text':' [udata, source_node]','line_number':1212,'multiline':False]
['text':' [udata, reftable]','line_number':1324,'multiline':False]
['text':' [udata, reftable, tree_udata]','line_number':1325,'multiline':False]
['text':'/ assumes the match table being on top of the stack','line_number':1360,'multiline':False]
['text':' [index]','line_number':1377,'multiline':False]
['text':' [index, match]','line_number':1378,'multiline':False]
['text':' Upvalues are:','line_number':1387,'multiline':False]
['text':' [ cursor, node, query, current_match ]','line_number':1388,'multiline':False]
['text':' TODO(vigoux): handle capture quantifiers here','line_number':1409,'multiline':False]
['text':' [index]','line_number':1410,'multiline':False]
['text':' [index, node]','line_number':1411,'multiline':False]
['text':' Now check if we need to run the predicates','line_number':1413,'multiline':False]
['text':' [index, node, match]','line_number':1420,'multiline':False]
['text':' reset the start depth','line_number':1453,'multiline':False]
['text':' stack: [dict, ..., nil]','line_number':1472,'multiline':False]
['text':' stack: [dict, ..., key, value]','line_number':1474,'multiline':False]
['text':' TODO(lewis6991): remove ifdef when min TS version is 0.20.9','line_number':1478,'multiline':False]
['text':' pop the value; lua_next will pop the key.','line_number':1485,'multiline':False]
['text':' stack: [dict, ..., key]','line_number':1486,'multiline':False]
['text':' [udata]','line_number':1490,'multiline':False]
['text':' [udata]','line_number':1496,'multiline':False]
['text':' [udata, node]','line_number':1497,'multiline':False]
['text':' include query separately, as to keep a ref to it for gc','line_number':1499,'multiline':False]
['text':' [udata, node, query]','line_number':1500,'multiline':False]
['text':' placeholder for match state','line_number':1503,'multiline':False]
['text':' [u, n, q, match]','line_number':1504,'multiline':False]
['text':' [closure]','line_number':1505,'multiline':False]
['text':' [closure]','line_number':1507,'multiline':False]
['text':' Query methods','line_number':1521,'multiline':False]
['text':' [udata]','line_number':1548,'multiline':False]
['text':' [udata, meta]','line_number':1550,'multiline':False]
['text':' [udata]','line_number':1551,'multiline':False]
['text':' Error types that report names','line_number':1604,'multiline':False]
['text':' [retval]','line_number':1659,'multiline':False]
['text':' [retval, patterns]','line_number':1660,'multiline':False]
['text':' [retval, patterns, pat]','line_number':1667,'multiline':False]
['text':' [retval, patterns, pat, pred]','line_number':1668,'multiline':False]
['text':' [retval, patterns, pat]','line_number':1673,'multiline':False]
['text':' [retval, patterns, pat, pred]','line_number':1674,'multiline':False]
['text':' [retval, patterns, pat, pred, item]','line_number':1683,'multiline':False]
['text':' [..., pat, pred, item]','line_number':1685,'multiline':False]
['text':' [retval, patterns, pat, pred]','line_number':1689,'multiline':False]
['text':' last predicate should have ended with TypeDone','line_number':1691,'multiline':False]
['text':' [retval, patterns, pat]','line_number':1692,'multiline':False]
['text':' [retval, patterns]','line_number':1693,'multiline':False]
['text':' [retval]','line_number':1695,'multiline':False]
['text':' [retval, captures]','line_number':1698,'multiline':False]
['text':' [retval, captures, capture]','line_number':1702,'multiline':False]
['text':' [retval]','line_number':1705,'multiline':False]
