['text':' ex_docmd.c: functions for executing an Ex command line.','line_number':1,'multiline':False]
['text':' Struct for storing a line inside a while/for loop','line_number':114,'multiline':False]
['text':' command line','line_number':116,'multiline':False]
['text':' sourcing_lnum of the line','line_number':117,'multiline':False]
['text':'/ Structure used to store info for line position in a while or for loop.','line_number':122,'multiline':False]
['text':'/ This is required, because do_one_cmd() may invoke ex_function(), which','line_number':123,'multiline':False]
['text':'/ reads more lines that may come from the while/for loop.','line_number':124,'multiline':False]
['text':' growarray with line info','line_number':126,'multiline':False]
['text':' last read line from growarray','line_number':127,'multiline':False]
['text':' true when looping a second time','line_number':128,'multiline':False]
['text':' When "repeating" is false use "getline" and "cookie" to get lines','line_number':129,'multiline':False]
['text':' Struct to save a few things while debugging.  Used in do_cmdline() only.','line_number':134,'multiline':False]
['text':' Declare cmdnames[].','line_number':153,'multiline':False]
['text':' Necessary for debugging an inactive ":catch", ":finally", ":endtry".','line_number':171,'multiline':False]
['text':'/ Repeatedly get commands for Ex mode, until the ":vi" command is given.','line_number':202,'multiline':False]
['text':' When using ":global /pat/ visual" and then "Q" we return to continue','line_number':209,'multiline':False]
['text':' the :global command.','line_number':210,'multiline':False]
['text':' don't redisplay the window','line_number':216,'multiline':False]
['text':' don't wait for return','line_number':217,'multiline':False]
['text':' Check for a ":normal" command and no more characters left.','line_number':221,'multiline':False]
['text':' Make sure the message overwrites the right line and isn't throttled.','line_number':243,'multiline':False]
['text':' go up one line, to overwrite the ":<CR>" line, so the','line_number':245,'multiline':False]
['text':' output doesn't contain empty lines.','line_number':246,'multiline':False]
['text':' must be at EOF','line_number':256,'multiline':False]
['text':'/ Print the executed command for when 'verbose' is set.','line_number':273,'multiline':False]
['text':'/','line_number':274,'multiline':False]
['text':'/ @param lnum  if 0, only print the command.','line_number':275,'multiline':False]
['text':' don't overwrite this','line_number':288,'multiline':False]
['text':'/ Execute a simple command line.  Used for translated commands like "*".','line_number':295,'multiline':False]
['text':'/ do_cmdline(): execute one Ex command line','line_number':301,'multiline':False]
['text':'/','line_number':302,'multiline':False]
['text':'/ 1. Execute "cmdline" when it is not NULL.','line_number':303,'multiline':False]
['text':'/    If "cmdline" is NULL, or more lines are needed, fgetline() is used.','line_number':304,'multiline':False]
['text':'/ 2. Split up in parts separated with '|'.','line_number':305,'multiline':False]
['text':'/','line_number':306,'multiline':False]
['text':'/ This function can be called recursively!','line_number':307,'multiline':False]
['text':'/','line_number':308,'multiline':False]
['text':'/ flags:','line_number':309,'multiline':False]
['text':'/   DOCMD_VERBOSE  - The command will be included in the error message.','line_number':310,'multiline':False]
['text':'/   DOCMD_NOWAIT   - Don't call wait_return() and friends.','line_number':311,'multiline':False]
['text':'/   DOCMD_REPEAT   - Repeat execution until fgetline() returns NULL.','line_number':312,'multiline':False]
['text':'/   DOCMD_KEYTYPED - Don't reset KeyTyped.','line_number':313,'multiline':False]
['text':'/   DOCMD_EXCRESET - Reset the exception environment (used for debugging).','line_number':314,'multiline':False]
['text':'/   DOCMD_KEEPLINE - Store first typed line (for repeating with ".").','line_number':315,'multiline':False]
['text':'/','line_number':316,'multiline':False]
['text':'/ @param cookie  argument for fgetline()','line_number':317,'multiline':False]
['text':'/','line_number':318,'multiline':False]
['text':'/ @return FAIL if cmdline could not be executed, OK otherwise','line_number':319,'multiline':False]
['text':' next cmd to execute','line_number':322,'multiline':False]
['text':' copy of cmd line','line_number':323,'multiline':False]
['text':' used "fgetline" to obtain command','line_number':324,'multiline':False]
['text':' recursive depth','line_number':325,'multiline':False]
['text':' line number count','line_number':327,'multiline':False]
['text':' incremented RedrawingDisabled','line_number':328,'multiline':False]
['text':' conditional stack','line_number':330,'multiline':False]
['text':' keep lines for ":while"/":for"','line_number':333,'multiline':False]
['text':' active line in lines_ga','line_number':334,'multiline':False]
['text':' function or script name','line_number':335,'multiline':False]
['text':' ptr to breakpoint field in cookie','line_number':336,'multiline':False]
['text':' ptr to dbg_tick field in cookie','line_number':337,'multiline':False]
['text':' saved things for debug mode','line_number':338,'multiline':False]
['text':' "fgetline" and "cookie" passed to do_one_cmd()','line_number':341,'multiline':False]
['text':' recursiveness','line_number':345,'multiline':False]
['text':' For every pair of do_cmdline()/do_one_cmd() calls, use an extra memory','line_number':347,'multiline':False]
['text':' location for storing error messages to be converted to an exception.','line_number':348,'multiline':False]
['text':' This ensures that the do_errthrow() call in do_one_cmd() does not','line_number':349,'multiline':False]
['text':' combine the messages stored by an earlier invocation of do_one_cmd()','line_number':350,'multiline':False]
['text':' with the command name of the later one.  This would happen when','line_number':351,'multiline':False]
['text':' BufWritePost autocommands are executed after a write error.','line_number':352,'multiline':False]
['text':' It's possible to create an endless loop with ":execute", catch that','line_number':357,'multiline':False]
['text':' here.  The value of 200 allows nested function calls, ":source", etc.','line_number':358,'multiline':False]
['text':' Allow 200 or 'maxfuncdepth', whatever is larger.','line_number':359,'multiline':False]
['text':' When converting to an exception, we do not include the command name','line_number':362,'multiline':False]
['text':' since this is not an error of the specific command.','line_number':363,'multiline':False]
['text':' Inside a function use a higher nesting level.','line_number':375,'multiline':False]
['text':' Get the function or script name and the address where the next breakpoint','line_number':381,'multiline':False]
['text':' line and the debug tick for a function or script are stored.','line_number':382,'multiline':False]
['text':' Initialize "force_abort"  and "suppress_errthrow" at the top level.','line_number':393,'multiline':False]
['text':' If requested, store and reset the global values controlling the','line_number':399,'multiline':False]
['text':' exception handling (used when debugging).  Otherwise clear it to avoid','line_number':400,'multiline':False]
['text':' a bogus compiler warning when the optimizer uses inline functions...','line_number':401,'multiline':False]
['text':' "did_throw" will be set to true when an exception is being thrown.','line_number':410,'multiline':False]
['text':' "did_emsg" will be set to true when emsg() is used, in which case we','line_number':412,'multiline':False]
['text':' cancel the whole command line, and any if/endif or loop.','line_number':413,'multiline':False]
['text':' If force_abort is set, we cancel everything.','line_number':414,'multiline':False]
['text':' KeyTyped is only set when calling vgetc().  Reset it here when not','line_number':417,'multiline':False]
['text':' calling vgetc() (sourced command lines).','line_number':418,'multiline':False]
['text':' Continue executing command lines:','line_number':424,'multiline':False]
['text':' - when inside an ":if", ":while" or ":for"','line_number':425,'multiline':False]
['text':' - for multiple commands on one line, separated with '|'','line_number':426,'multiline':False]
['text':' - when repeating until there are no more lines (for ":source")','line_number':427,'multiline':False]
['text':' stop skipping cmds for an error msg after all endif/while/for','line_number':432,'multiline':False]
['text':' 1. If repeating a line in a loop, get a line from lines_ga.','line_number':441,'multiline':False]
['text':' 2. If no line given: Get an allocated line with fgetline().','line_number':442,'multiline':False]
['text':' 3. If a line is given: Make a copy, so we can mess with it.','line_number':443,'multiline':False]
['text':' 1. If repeating, get a previous line from lines_ga.','line_number':445,'multiline':False]
['text':' Each '|' separated command is stored separately in lines_ga, to','line_number':447,'multiline':False]
['text':' be able to jump to it.  Don't use next_cmdline now.','line_number':448,'multiline':False]
['text':' Check if a function has returned or, unless it has an unclosed','line_number':451,'multiline':False]
['text':' try conditional, aborted.','line_number':452,'multiline':False]
['text':' Check if a sourced file hit a ":finish" command.','line_number':466,'multiline':False]
['text':' If breakpoints have been added/deleted need to check for it.','line_number':472,'multiline':False]
['text':' Did we encounter a breakpoint?','line_number':483,'multiline':False]
['text':' Find next breakpoint.','line_number':486,'multiline':False]
['text':' 2. If no line given, get an allocated line with fgetline().','line_number':500,'multiline':False]
['text':' Need to set msg_didout for the first line after an ":if",','line_number':502,'multiline':False]
['text':' otherwise the ":if" will be overwritten.','line_number':503,'multiline':False]
['text':' Don't call wait_return() for aborted command line.  The NULL','line_number':512,'multiline':False]
['text':' returned for the end of a sourced file or executed function','line_number':513,'multiline':False]
['text':' doesn't do this.','line_number':514,'multiline':False]
['text':' Keep the first typed line.  Clear it when more lines are typed.','line_number':523,'multiline':False]
['text':' 3. Make a copy of the command so we can mess with it.','line_number':533,'multiline':False]
['text':' Inside a while/for loop, and when the command looks like a ":while"','line_number':539,'multiline':False]
['text':' or ":for", the line is stored, because we may need it later when','line_number':540,'multiline':False]
['text':' looping.','line_number':541,'multiline':False]
['text':'','line_number':542,'multiline':False]
['text':' When there is a '|' and another command, it is stored separately,','line_number':543,'multiline':False]
['text':' because we need to be able to jump back to it from an','line_number':544,'multiline':False]
['text':' :endwhile/:endfor.','line_number':545,'multiline':False]
['text':'','line_number':546,'multiline':False]
['text':' Pass a different "fgetline" function to do_one_cmd() below,','line_number':547,'multiline':False]
['text':' that it stores lines in or reads them from "lines_ga".  Makes it','line_number':548,'multiline':False]
['text':' possible to define a function inside a while/for loop.','line_number':549,'multiline':False]
['text':' Save the current line when encountering it the first time.','line_number':559,'multiline':False]
['text':' All output from the commands is put below each other, without','line_number':572,'multiline':False]
['text':' waiting for a return. Don't do this when executing commands','line_number':573,'multiline':False]
['text':' from a script or when being called recursive (e.g. for ":e','line_number':574,'multiline':False]
['text':' +command file").','line_number':575,'multiline':False]
['text':' no output yet','line_number':578,'multiline':False]
['text':' put messages below each other','line_number':580,'multiline':False]
['text':' don't wait for return until finished','line_number':581,'multiline':False]
['text':' 2. Execute one '|' separated command.','line_number':591,'multiline':False]
['text':'    do_one_cmd() will return NULL if there is no trailing '|'.','line_number':592,'multiline':False]
['text':'    "cmdline_copy" can change, e.g. for '%' and '#' expansion.','line_number':593,'multiline':False]
['text':' Use "current_line" from "cmd_loop_cookie", it may have been','line_number':599,'multiline':False]
['text':' incremented when defining a function.','line_number':600,'multiline':False]
['text':' If the command was typed, remember it for the ':' register.','line_number':607,'multiline':False]
['text':' Do this AFTER executing the command to make :@: work.','line_number':608,'multiline':False]
['text':' need to copy the command after the '|' to cmdline_copy, for the','line_number':616,'multiline':False]
['text':' next do_one_cmd()','line_number':617,'multiline':False]
['text':' reset did_emsg for a function that is not aborted by an error','line_number':622,'multiline':False]
['text':' An ":endwhile", ":endfor" and ":continue" is handled here.','line_number':632,'multiline':False]
['text':' If we were executing commands, jump back to the ":while" or','line_number':633,'multiline':False]
['text':' ":for".','line_number':634,'multiline':False]
['text':' If we were not executing commands, decrement cs_looplevel.','line_number':635,'multiline':False]
['text':' Jump back to the matching ":while" or ":for".  Be careful','line_number':639,'multiline':False]
['text':' not to use a cs_line[] from an entry that isn't a ":while"','line_number':640,'multiline':False]
['text':' or ":for": It would make "current_line" invalid and can','line_number':641,'multiline':False]
['text':' cause a crash.','line_number':642,'multiline':False]
['text':' remember we jumped there','line_number':650,'multiline':False]
['text':' check if CTRL-C typed','line_number':652,'multiline':False]
['text':' Check for the next breakpoint at or after the ":while"','line_number':654,'multiline':False]
['text':' or ":for".','line_number':655,'multiline':False]
['text':' can only get here with ":endwhile" or ":endfor"','line_number':662,'multiline':False]
['text':' For a ":while" or ":for" we need to remember the line number.','line_number':669,'multiline':False]
['text':' When not inside any ":while" loop, clear remembered lines.','line_number':675,'multiline':False]
['text':' A ":finally" makes did_emsg, got_int and did_throw pending for','line_number':684,'multiline':False]
['text':' being restored at the ":endtry".  Reset them here and set the','line_number':685,'multiline':False]
['text':' ACTIVE and FINALLY flags, so that the finally clause gets executed.','line_number':686,'multiline':False]
['text':' This includes the case where a missing ":endif", ":endwhile" or','line_number':687,'multiline':False]
['text':' ":endfor" was detected by the ":finally" itself.','line_number':688,'multiline':False]
['text':' Update global "trylevel" for recursive calls to do_cmdline() from','line_number':698,'multiline':False]
['text':' within this loop.','line_number':699,'multiline':False]
['text':' If the outermost try conditional (across function calls and sourced','line_number':702,'multiline':False]
['text':' files) is aborted because of an error, an interrupt, or an uncaught','line_number':703,'multiline':False]
['text':' exception, cancel everything.  If it is left normally, reset','line_number':704,'multiline':False]
['text':' force_abort to get the non-EH compatible abortion behavior for','line_number':705,'multiline':False]
['text':' the rest of the script.','line_number':706,'multiline':False]
['text':' Convert an interrupt to an exception if appropriate.','line_number':711,'multiline':False]
['text':' Continue executing command lines when:','line_number':714,'multiline':False]
['text':' - no CTRL-C typed, no aborting error, no exception thrown or try','line_number':715,'multiline':False]
['text':'   conditionals need to be checked for executing finally clauses or','line_number':716,'multiline':False]
['text':'   catching an interrupt exception','line_number':717,'multiline':False]
['text':' - didn't get an error message or lines are not typed','line_number':718,'multiline':False]
['text':' - there is a command after '|', inside a :if, :while, :for or :try, or','line_number':719,'multiline':False]
['text':'   looping for ":source" command or function call.','line_number':720,'multiline':False]
['text':' Keep going when inside try/catch, so that the error can be','line_number':724,'multiline':False]
['text':' deal with, except when it is a syntax error, it may cause','line_number':725,'multiline':False]
['text':' the :endtry to be missed.','line_number':726,'multiline':False]
['text':' If a sourced file or executed function ran to its end, report the','line_number':739,'multiline':False]
['text':' unclosed conditional.','line_number':740,'multiline':False]
['text':' Reset "trylevel" in case of a ":finish" or ":return" or a missing','line_number':757,'multiline':False]
['text':' ":endtry" in a sourced file or executed function.  If the try','line_number':758,'multiline':False]
['text':' conditional is in its finally clause, ignore anything pending.','line_number':759,'multiline':False]
['text':' If it is in a catch clause, finish the caught exception.','line_number':760,'multiline':False]
['text':' Also cleanup any "cs_forinfo" structures.','line_number':761,'multiline':False]
['text':' remove try block not in its finally clause','line_number':766,'multiline':False]
['text':' If a missing ":endtry", ":endwhile", ":endfor", or ":endif" or a memory','line_number':774,'multiline':False]
['text':' lack was reported above and the error message is to be converted to an','line_number':775,'multiline':False]
['text':' exception, do this now after rewinding the cstack.','line_number':776,'multiline':False]
['text':' When an exception is being thrown out of the outermost try','line_number':780,'multiline':False]
['text':' conditional, discard the uncaught exception, disable the conversion','line_number':781,'multiline':False]
['text':' of interrupts or errors to exceptions, and ensure that no more','line_number':782,'multiline':False]
['text':' commands are executed.','line_number':783,'multiline':False]
['text':' On an interrupt or an aborting error not converted to an exception,','line_number':787,'multiline':False]
['text':' disable the conversion of errors to exceptions.  (Interrupts are not','line_number':788,'multiline':False]
['text':' converted any more, here.) This enables also the interrupt message','line_number':789,'multiline':False]
['text':' when force_abort is set and did_emsg unset in case of an interrupt','line_number':790,'multiline':False]
['text':' from a finally clause after an error.','line_number':791,'multiline':False]
['text':' The current cstack will be freed when do_cmdline() returns.  An uncaught','line_number':796,'multiline':False]
['text':' exception will have to be rethrown in the previous cstack.  If a function','line_number':797,'multiline':False]
['text':' has just returned or a script file was just finished and the previous','line_number':798,'multiline':False]
['text':' cstack belongs to the same function or, respectively, script file, it','line_number':799,'multiline':False]
['text':' will have to be checked for finally clauses to be executed due to the','line_number':800,'multiline':False]
['text':' ":return" or ":finish".  This is done in do_one_cmd().','line_number':801,'multiline':False]
['text':' When leaving a function, reduce nesting level.','line_number':813,'multiline':False]
['text':' Go to debug mode when returning from a function in which we are','line_number':817,'multiline':False]
['text':' single-stepping.','line_number':818,'multiline':False]
['text':' Restore the exception environment (done after returning from the','line_number':828,'multiline':False]
['text':' debugger).','line_number':829,'multiline':False]
['text':' Cleanup if "cs_emsg_silent_list" remains.','line_number':836,'multiline':False]
['text':' If there was too much output to fit on the command line, ask the user to','line_number':845,'multiline':False]
['text':' hit return before redrawing the screen. With the ":global" command we do','line_number':846,'multiline':False]
['text':' this only once after the command is finished.','line_number':847,'multiline':False]
['text':' When just finished an ":if"-":else" which was typed, no need to','line_number':853,'multiline':False]
['text':' wait for hit-return.  Also for an error situation.','line_number':854,'multiline':False]
['text':' don't wait when restarting edit','line_number':858,'multiline':False]
['text':' The msg_start() above clears msg_didout. The wait_return() we do','line_number':860,'multiline':False]
['text':' here should not overwrite the command that may be shown before','line_number':861,'multiline':False]
['text':' doing that.','line_number':862,'multiline':False]
['text':' in case do_cmdline used recursively','line_number':868,'multiline':False]
['text':'/ Handle when "did_throw" is set after executing commands.','line_number':875,'multiline':False]
['text':' If the uncaught exception is a user exception, report it as an','line_number':882,'multiline':False]
['text':' error.  If it is an error exception, display the saved error','line_number':883,'multiline':False]
['text':' message now.  For an interrupt exception, do nothing; the','line_number':884,'multiline':False]
['text':' interrupt message is given elsewhere.','line_number':885,'multiline':False]
['text':' uses IObuff if 'verbose'','line_number':904,'multiline':False]
['text':' kind=emsg for :throw, exceptions. #9993','line_number':907,'multiline':False]
['text':'/ Obtain a line when inside a ":while" or ":for" loop.','line_number':926,'multiline':False]
['text':' trying to read past ":endwhile"/":endfor"','line_number':933,'multiline':False]
['text':' First time inside the ":while"/":for": get line normally.','line_number':936,'multiline':False]
['text':'/ Store a line in "gap" so that a ":while" loop can execute it again.','line_number':957,'multiline':False]
['text':'/ If "fgetline" is get_loop_line(), return true if the getline it uses equals','line_number':965,'multiline':False]
['text':'/ "func".  * Otherwise return true when "fgetline" equals "func".','line_number':966,'multiline':False]
['text':'/','line_number':967,'multiline':False]
['text':'/ @param cookie  argument for fgetline()','line_number':968,'multiline':False]
['text':' When "fgetline" is "get_loop_line()" use the "cookie" to find the','line_number':971,'multiline':False]
['text':' function that's originally used to obtain the lines.  This may be','line_number':972,'multiline':False]
['text':' nested several levels.','line_number':973,'multiline':False]
['text':'/ If "fgetline" is get_loop_line(), return the cookie used by the original','line_number':983,'multiline':False]
['text':'/ getline function.  Otherwise return "cookie".','line_number':984,'multiline':False]
['text':'/','line_number':985,'multiline':False]
['text':'/ @param cookie  argument for fgetline()','line_number':986,'multiline':False]
['text':' When "fgetline" is "get_loop_line()" use the "cookie" to find the','line_number':989,'multiline':False]
['text':' cookie that's originally used to obtain the lines.  This may be nested','line_number':990,'multiline':False]
['text':' several levels.','line_number':991,'multiline':False]
['text':'/ Helper function to apply an offset for buffer commands, i.e. ":bdelete",','line_number':1001,'multiline':False]
['text':'/ ":bwipeout", etc.','line_number':1002,'multiline':False]
['text':'/','line_number':1003,'multiline':False]
['text':'/ @return  the buffer number.','line_number':1004,'multiline':False]
['text':' skip over unloaded buffers','line_number':1022,'multiline':False]
['text':' we might have gone too far, last buffer is not loaded','line_number':1032,'multiline':False]
['text':'/ @return  the window number of "win" or,','line_number':1045,'multiline':False]
['text':'/          the number of windows if "win" is NULL','line_number':1046,'multiline':False]
['text':'/ Figure out the address type for ":wincmd".','line_number':1079,'multiline':False]
['text':' window size or any count','line_number':1125,'multiline':False]
['text':' buffer number','line_number':1131,'multiline':False]
['text':' window number','line_number':1146,'multiline':False]
['text':' no count','line_number':1161,'multiline':False]
['text':'/ Skip colons and trailing whitespace, returning a pointer to the first','line_number':1167,'multiline':False]
['text':'/ non-colon, non-whitespace character.','line_number':1168,'multiline':False]
['text':'','line_number':1169,'multiline':False]
['text':'/ @param skipleadingwhite Skip leading whitespace too','line_number':1170,'multiline':False]
['text':'/ Set the addr type for command','line_number':1184,'multiline':False]
['text':'/','line_number':1185,'multiline':False]
['text':'/ @param p pointer to character after command name in cmdline','line_number':1186,'multiline':False]
['text':' ea.addr_type for user commands is set by find_ucmd','line_number':1189,'multiline':False]
['text':' :wincmd range depends on the argument','line_number':1198,'multiline':False]
['text':' :.cc in quickfix window uses line number','line_number':1202,'multiline':False]
['text':'/ Get default range number for command based on its address type','line_number':1208,'multiline':False]
['text':' Default is the cursor line number.  Avoid using an invalid','line_number':1214,'multiline':False]
['text':' line number though.','line_number':1215,'multiline':False]
['text':' Will give an error later if a range is found.','line_number':1243,'multiline':False]
['text':'/ Set default command range for -range=% based on the addr type of the command','line_number':1248,'multiline':False]
['text':' Accept numbered register only when no count allowed (:put)','line_number':1308,'multiline':False]
['text':' Do not allow register = for user commands','line_number':1311,'multiline':False]
['text':' for '=' register: accept the rest of the line as an expression','line_number':1317,'multiline':False]
['text':' Change line1 and line2 of Ex command to use count','line_number':1329,'multiline':False]
['text':' e.g. :buffer 2, :sleep 3','line_number':1332,'multiline':False]
['text':' Be vi compatible: no error message for out of range.','line_number':1341,'multiline':False]
['text':' Check for a count.  When accepting a EX_BUFNAME, don't use "123foo" as a','line_number':1350,'multiline':False]
['text':' count, it's a buffer name.','line_number':1351,'multiline':False]
['text':' If eap->arg is still pointing to the first argument, just make eap->args[0] point to the','line_number':1362,'multiline':False]
['text':' same location. This is needed for usecases like vim.cmd.sleep('10m'). If eap->arg is','line_number':1363,'multiline':False]
['text':' pointing outside the first argument, shift arguments by 1.','line_number':1364,'multiline':False]
['text':'/ Check if command is not implemented','line_number':1385,'multiline':False]
['text':'/ Parse command line and return information about the first command.','line_number':1392,'multiline':False]
['text':'/ If parsing is done successfully, need to free cmod_filter_pat and cmod_filter_regmatch.regprog','line_number':1393,'multiline':False]
['text':'/ after calling, usually done using undo_cmdmod() or execute_cmd().','line_number':1394,'multiline':False]
['text':'/','line_number':1395,'multiline':False]
['text':'/ @param cmdline Command line string','line_number':1396,'multiline':False]
['text':'/ @param[out] eap Ex command arguments','line_number':1397,'multiline':False]
['text':'/ @param[out] cmdinfo Command parse information','line_number':1398,'multiline':False]
['text':'/ @param[out] errormsg Error message, if any','line_number':1399,'multiline':False]
['text':'/','line_number':1400,'multiline':False]
['text':'/ @return Success or failure','line_number':1401,'multiline':False]
['text':' parsing the command modifiers may set ex_pressedreturn','line_number':1406,'multiline':False]
['text':' parsing the command range may require moving the cursor','line_number':1408,'multiline':False]
['text':' parsing the command range may set the last search pattern','line_number':1410,'multiline':False]
['text':' Initialize cmdinfo','line_number':1413,'multiline':False]
['text':' Initialize eap','line_number':1416,'multiline':False]
['text':' Parse command modifiers','line_number':1426,'multiline':False]
['text':' Save location after command modifiers','line_number':1432,'multiline':False]
['text':' Skip ranges to find command name since we need the command to know what kind of range it uses','line_number':1434,'multiline':False]
['text':' Set command address type and parse command range','line_number':1445,'multiline':False]
['text':' Skip colon and whitespace','line_number':1452,'multiline':False]
['text':' Fail if command is a comment or if command doesn't exist','line_number':1454,'multiline':False]
['text':' Fail if command is invalid','line_number':1458,'multiline':False]
['text':' If the modifier was parsed OK the error must be in the following command','line_number':1461,'multiline':False]
['text':' Correctly set 'forceit' for commands','line_number':1468,'multiline':False]
['text':' Parse arguments.','line_number':1477,'multiline':False]
['text':' Skip to start of argument.','line_number':1481,'multiline':False]
['text':' Don't do this for the ":!" command, because ":!! -l" needs the space.','line_number':1482,'multiline':False]
['text':' Don't treat ":r! filter" like a bang','line_number':1489,'multiline':False]
['text':' :r! filter','line_number':1492,'multiline':False]
['text':' Check for '|' to separate commands and '"' to start comments.','line_number':1496,'multiline':False]
['text':' Don't do this for ":read !cmd" and ":write !cmd".','line_number':1497,'multiline':False]
['text':' Fail if command doesn't support bang but is used with a bang','line_number':1501,'multiline':False]
['text':' Fail if command doesn't support a range but it is given a range','line_number':1506,'multiline':False]
['text':' Set default range for command if required','line_number':1511,'multiline':False]
['text':' Parse register and count','line_number':1516,'multiline':False]
['text':' Remove leading whitespace and colon from next command','line_number':1522,'multiline':False]
['text':' Set the "magic" values (characters that get treated specially)','line_number':1527,'multiline':False]
['text':' Shift Ex-command arguments to the right.','line_number':1546,'multiline':False]
['text':' If there are no arguments, make eap->arg point to the end of string.','line_number':1563,'multiline':False]
['text':' If filename expansion is enabled, expand filenames','line_number':1572,'multiline':False]
['text':' Accept buffer name.  Cannot be used at the same time with a buffer','line_number':1579,'multiline':False]
['text':' number.  Don't do this for a user command.','line_number':1580,'multiline':False]
['text':' If argument positions are not specified, search the argument for the buffer name.','line_number':1584,'multiline':False]
['text':' :bdelete, :bwipeout and :bunload take several arguments, separated by spaces:','line_number':1585,'multiline':False]
['text':' find next space (skipping over escaped characters).','line_number':1586,'multiline':False]
['text':' The others take one argument: ignore trailing spaces.','line_number':1587,'multiline':False]
['text':' If argument positions are specified, just use the first argument','line_number':1604,'multiline':False]
['text':' failed','line_number':1611,'multiline':False]
['text':' The :try command saves the emsg_silent flag, reset it here when','line_number':1616,'multiline':False]
['text':' ":silent! try" was used, it should only apply to :try itself.','line_number':1617,'multiline':False]
['text':' Execute the command','line_number':1626,'multiline':False]
['text':' Execute a user-defined command.','line_number':1628,'multiline':False]
['text':' Call the function to execute the builtin command or the preview callback.','line_number':1631,'multiline':False]
['text':'/ Execute an Ex command using parsed command line information.','line_number':1647,'multiline':False]
['text':'/ Does not do any validation of the Ex command arguments.','line_number':1648,'multiline':False]
['text':'/','line_number':1649,'multiline':False]
['text':'/ @param eap Ex-command arguments','line_number':1650,'multiline':False]
['text':'/ @param cmdinfo Command parse information','line_number':1651,'multiline':False]
['text':'/ @param preview Execute command preview callback instead of actual command','line_number':1652,'multiline':False]
['text':' Apply command modifiers','line_number':1668,'multiline':False]
['text':' allow :put in terminals','line_number':1672,'multiline':False]
['text':' Command not allowed in the command line window','line_number':1678,'multiline':False]
['text':' Command not allowed when text is locked','line_number':1682,'multiline':False]
['text':' Disallow editing another buffer when "curbuf->b_ro_locked" is set.','line_number':1686,'multiline':False]
['text':' Do allow ":checktime" (it is postponed).','line_number':1687,'multiline':False]
['text':' Do allow ":edit" (check for an argument later).','line_number':1688,'multiline':False]
['text':' Do allow ":file" with no arguments','line_number':1689,'multiline':False]
['text':' Put the first line at the start of a closed fold, put the last line','line_number':1703,'multiline':False]
['text':' at the end of a closed fold.','line_number':1704,'multiline':False]
['text':' Use first argument as count when possible','line_number':1709,'multiline':False]
['text':' Execute the command','line_number':1717,'multiline':False]
['text':' Undo command modifiers','line_number':1724,'multiline':False]
['text':' Count this line for profiling if skip is true.','line_number':1733,'multiline':False]
['text':' Skip the command when it's not going to be executed.','line_number':1769,'multiline':False]
['text':' The commands like :if, :endif, etc. always need to be executed.','line_number':1770,'multiline':False]
['text':' Also make an exception for commands that handle a trailing command','line_number':1771,'multiline':False]
['text':' themselves.','line_number':1772,'multiline':False]
['text':' commands that need evaluation','line_number':1775,'multiline':False]
['text':' Commands that handle '|' themselves.  Check: A command should','line_number':1791,'multiline':False]
['text':' either have the EX_TRLBAR flag, appear in this list or appear in','line_number':1792,'multiline':False]
['text':' the list at ":help :bar".','line_number':1793,'multiline':False]
['text':'/ Execute one Ex command.','line_number':1869,'multiline':False]
['text':'/','line_number':1870,'multiline':False]
['text':'/ If "flags" has DOCMD_VERBOSE, the command will be included in the error','line_number':1871,'multiline':False]
['text':'/ message.','line_number':1872,'multiline':False]
['text':'/','line_number':1873,'multiline':False]
['text':'/ 1. skip comment lines and leading space','line_number':1874,'multiline':False]
['text':'/ 2. handle command modifiers','line_number':1875,'multiline':False]
['text':'/ 3. skip over the range to find the command','line_number':1876,'multiline':False]
['text':'/ 4. parse the range','line_number':1877,'multiline':False]
['text':'/ 5. parse the command','line_number':1878,'multiline':False]
['text':'/ 6. parse arguments','line_number':1879,'multiline':False]
['text':'/ 7. switch on command name','line_number':1880,'multiline':False]
['text':'/','line_number':1881,'multiline':False]
['text':'/ Note: "fgetline" can be NULL.','line_number':1882,'multiline':False]
['text':'/','line_number':1883,'multiline':False]
['text':'/ This function may be called recursively!','line_number':1884,'multiline':False]
['text':'/','line_number':1885,'multiline':False]
['text':'/ @param cookie  argument for fgetline()','line_number':1886,'multiline':False]
['text':' error message','line_number':1890,'multiline':False]
['text':' When the last file has not been edited :q has to be typed twice.','line_number':1900,'multiline':False]
['text':' avoid that a function call in 'statusline' does this','line_number':1902,'multiline':False]
['text':' avoid that an autocommand, e.g. QuitPre, does this','line_number':1904,'multiline':False]
['text':' Reset browse, confirm, etc..  They are restored when returning, for','line_number':1909,'multiline':False]
['text':' recursive calls.','line_number':1910,'multiline':False]
['text':' "#!anything" is handled like a comment.','line_number':1913,'multiline':False]
['text':' 1. Skip comment lines and leading white space and colons.','line_number':1918,'multiline':False]
['text':' 2. Handle command modifiers.','line_number':1919,'multiline':False]
['text':' The "ea" structure holds the arguments that can be used.','line_number':1921,'multiline':False]
['text':' 3. Skip over the range to find the command. Let "p" point to after it.','line_number':1941,'multiline':False]
['text':'','line_number':1942,'multiline':False]
['text':' We need the command to know what kind of range it uses.','line_number':1943,'multiline':False]
['text':' May go to debug mode.  If this happens and the ">quit" debug command is','line_number':1954,'multiline':False]
['text':' used, throw an interrupt exception and skip the next command.','line_number':1955,'multiline':False]
['text':' 4. Parse a range specifier of the form: addr [,addr] [;addr] ..','line_number':1963,'multiline':False]
['text':'','line_number':1964,'multiline':False]
['text':' where 'addr' is:','line_number':1965,'multiline':False]
['text':'','line_number':1966,'multiline':False]
['text':' %          (entire file)','line_number':1967,'multiline':False]
['text':' $  [+-NUM]','line_number':1968,'multiline':False]
['text':' 'x [+-NUM] (where x denotes a currently defined mark)','line_number':1969,'multiline':False]
['text':' .  [+-NUM]','line_number':1970,'multiline':False]
['text':' [+-NUM]..','line_number':1971,'multiline':False]
['text':' NUM','line_number':1972,'multiline':False]
['text':'','line_number':1973,'multiline':False]
['text':' The ea.cmd pointer is updated to point to the first character following the','line_number':1974,'multiline':False]
['text':' range spec. If an initial address is found, but no second, the upper bound','line_number':1975,'multiline':False]
['text':' is equal to the lower.','line_number':1976,'multiline':False]
['text':' 5. Parse the command.','line_number':1984,'multiline':False]
['text':' Skip ':' and any white space','line_number':1986,'multiline':False]
['text':' If we got a line, but no command, then go to the line.','line_number':1989,'multiline':False]
['text':' If we find a '|' or '\n' we set ea.nextcmd.','line_number':1990,'multiline':False]
['text':' strange vi behaviour:','line_number':1993,'multiline':False]
['text':' ":3"     jumps to line 3','line_number':1994,'multiline':False]
['text':' ":3|..." prints line 3','line_number':1995,'multiline':False]
['text':' ":|"     prints current line','line_number':1996,'multiline':False]
['text':' skip this if inside :if','line_number':1997,'multiline':False]
['text':' If this looks like an undefined user command and there are CmdUndefined','line_number':2026,'multiline':False]
['text':' autocommands defined, trigger the matching autocommands.','line_number':2027,'multiline':False]
['text':' If the autocommands did something and didn't cause an error, try','line_number':2038,'multiline':False]
['text':' finding the command again.','line_number':2039,'multiline':False]
['text':' Check for wrong commands.','line_number':2050,'multiline':False]
['text':' If the modifier was parsed OK the error must be in the following','line_number':2054,'multiline':False]
['text':' command','line_number':2055,'multiline':False]
['text':' set when Not Implemented','line_number':2067,'multiline':False]
['text':' Forced commands.','line_number':2070,'multiline':False]
['text':' 6. Parse arguments.  Then check for errors.','line_number':2079,'multiline':False]
['text':' Command not allowed in sandbox.','line_number':2086,'multiline':False]
['text':' allow :put in terminals','line_number':2091,'multiline':False]
['text':' Command not allowed in non-'modifiable' buffer','line_number':2093,'multiline':False]
['text':' Command not allowed in the command line window','line_number':2100,'multiline':False]
['text':' Command not allowed when text is locked','line_number':2105,'multiline':False]
['text':' Disallow editing another buffer when "curbuf->b_ro_locked" is set.','line_number':2111,'multiline':False]
['text':' Do allow ":checktime" (it is postponed).','line_number':2112,'multiline':False]
['text':' Do allow ":edit" (check for an argument later).','line_number':2113,'multiline':False]
['text':' Do allow ":file" with no arguments (check for an argument later).','line_number':2114,'multiline':False]
['text':' no range allowed','line_number':2125,'multiline':False]
['text':' no <!> allowed','line_number':2131,'multiline':False]
['text':' Don't complain about the range if it is not used','line_number':2136,'multiline':False]
['text':' (could happen if line_count is accidentally set to 0).','line_number':2137,'multiline':False]
['text':' If the range is backwards, ask for confirmation and, if given, swap','line_number':2139,'multiline':False]
['text':' ea.line1 & ea.line2 so it's forwards again.','line_number':2140,'multiline':False]
['text':' When global command is busy, don't ask, will fail below.','line_number':2141,'multiline':False]
['text':' default is 1, not cursor','line_number':2162,'multiline':False]
['text':' Put the first line at the start of a closed fold, put the last line','line_number':2170,'multiline':False]
['text':' at the end of a closed fold.','line_number':2171,'multiline':False]
['text':' For the ":make" and ":grep" commands we insert the 'makeprg'/'grepprg'','line_number':2176,'multiline':False]
['text':' option here, so things like % get expanded.','line_number':2177,'multiline':False]
['text':' Skip to start of argument.','line_number':2183,'multiline':False]
['text':' Don't do this for the ":!" command, because ":!! -l" needs the space.','line_number':2184,'multiline':False]
['text':' ":file" cannot be run with an argument when "curbuf->b_ro_locked" is set','line_number':2187,'multiline':False]
['text':' Check for "++opt=val" argument.','line_number':2192,'multiline':False]
['text':' Must be first, allow ":w ++enc=utf8 !cmd"','line_number':2193,'multiline':False]
['text':' append','line_number':2204,'multiline':False]
['text':' typed wrong','line_number':2205,'multiline':False]
['text':' :w !filter','line_number':2211,'multiline':False]
['text':' :r! filter if ea.forceit','line_number':2217,'multiline':False]
['text':' :r !filter','line_number':2219,'multiline':False]
['text':' count number of '>' or '<'','line_number':2225,'multiline':False]
['text':' Check for "+command" argument, before checking for next command.','line_number':2232,'multiline':False]
['text':' Don't do this for ":read !cmd" and ":write !cmd".','line_number':2233,'multiline':False]
['text':' Check for '|' to separate commands and '"' to start comments.','line_number':2238,'multiline':False]
['text':' Don't do this for ":read !cmd" and ":write !cmd".','line_number':2239,'multiline':False]
['text':' Check for <newline> to end a shell command.','line_number':2247,'multiline':False]
['text':' Also do this for ":read !cmd", ":write !cmd" and ":global".','line_number':2248,'multiline':False]
['text':' Any others?','line_number':2249,'multiline':False]
['text':' Remove one backslash before a newline, so that it's possible to','line_number':2251,'multiline':False]
['text':' pass a newline to the shell and also a newline that is preceded','line_number':2252,'multiline':False]
['text':' with a backslash.  This makes it impossible to end a shell','line_number':2253,'multiline':False]
['text':' command in a backslash, but that doesn't appear useful.','line_number':2254,'multiline':False]
['text':' Halving the number of backslashes is incompatible with previous','line_number':2255,'multiline':False]
['text':' versions.','line_number':2256,'multiline':False]
['text':' Parse register and count','line_number':2271,'multiline':False]
['text':' Check for flags: 'l', 'p' and '#'.','line_number':2277,'multiline':False]
['text':' no arguments allowed but there is something','line_number':2283,'multiline':False]
['text':' 7. Execute the command.','line_number':2297,'multiline':False]
['text':' If the command just executed called do_cmdline(), any throw or ":return"','line_number':2303,'multiline':False]
['text':' or ":finish" encountered there must also check the cstack of the still','line_number':2304,'multiline':False]
['text':' active do_cmdline() that called this do_one_cmd().  Rethrow an uncaught','line_number':2305,'multiline':False]
['text':' exception, or reanimate a returned function or finished script file and','line_number':2306,'multiline':False]
['text':' return or finish it again.','line_number':2307,'multiline':False]
['text':' can happen with zero line number','line_number':2321,'multiline':False]
['text':' not really a next command','line_number':2346,'multiline':False]
['text':'/ @return an error message with argument included.','line_number':2358,'multiline':False]
['text':'/ Uses a static buffer, only the last error will be kept.','line_number':2359,'multiline':False]
['text':'/ "msg" will be translated, caller should use N_().','line_number':2360,'multiline':False]
['text':'/ Parse and skip over command modifiers:','line_number':2368,'multiline':False]
['text':'/ - update eap->cmd','line_number':2369,'multiline':False]
['text':'/ - store flags in "cmod".','line_number':2370,'multiline':False]
['text':'/ - Set ex_pressedreturn for an empty command line.','line_number':2371,'multiline':False]
['text':'/','line_number':2372,'multiline':False]
['text':'/ @param skip_only      if false, undo_cmdmod() must be called later to free','line_number':2373,'multiline':False]
['text':'/                       any cmod_filter_pat and cmod_filter_regmatch.regprog,','line_number':2374,'multiline':False]
['text':'/                       and ex_pressedreturn may be set.','line_number':2375,'multiline':False]
['text':'/ @param[out] errormsg  potential error message.','line_number':2376,'multiline':False]
['text':'/','line_number':2377,'multiline':False]
['text':'/ Call apply_cmdmod() to get the side effects of the modifiers:','line_number':2378,'multiline':False]
['text':'/ - Increment "sandbox" for ":sandbox"','line_number':2379,'multiline':False]
['text':'/ - set p_verbose for ":verbose"','line_number':2380,'multiline':False]
['text':'/ - set msg_silent for ":silent"','line_number':2381,'multiline':False]
['text':'/ - set 'eventignore' to "all" for ":noautocmd"','line_number':2382,'multiline':False]
['text':'/','line_number':2383,'multiline':False]
['text':'/ @return  FAIL when the command is not to be executed.','line_number':2384,'multiline':False]
['text':' Repeat until no more command modifiers are found.','line_number':2389,'multiline':False]
['text':' in ex mode, an empty line works like :+','line_number':2397,'multiline':False]
['text':' ignore comment and empty lines','line_number':2407,'multiline':False]
['text':' When adding an entry, also modify cmdmods[]','line_number':2420,'multiline':False]
['text':' only accept ":filter {pat} cmd"','line_number':2469,'multiline':False]
['text':' NOTE: This puts a NUL after the pattern.','line_number':2485,'multiline':False]
['text':' ":hide" and ":hide | cmd" are not modifiers','line_number':2507,'multiline':False]
['text':' ":silent!", but not "silent !cmd"','line_number':2556,'multiline':False]
['text':' zero means not set, one is verbose == 0, etc.','line_number':2606,'multiline':False]
['text':' default: verbose == 1','line_number':2609,'multiline':False]
['text':'/ Apply the command modifiers.  Saves current state in "cmdmod", call','line_number':2620,'multiline':False]
['text':'/ undo_cmdmod() later.','line_number':2621,'multiline':False]
['text':' Set 'eventignore' to "all".','line_number':2653,'multiline':False]
['text':' First save the existing option value for restoring it later.','line_number':2654,'multiline':False]
['text':'/ Undo and free contents of "cmod".','line_number':2660,'multiline':False]
['text':' Restore 'eventignore' to the value before ":noautocmd".','line_number':2675,'multiline':False]
['text':' messages could be enabled for a serious error, need to check if the','line_number':2685,'multiline':False]
['text':' counters don't become negative','line_number':2686,'multiline':False]
['text':' Restore msg_scroll, it's set by file I/O commands, even when no','line_number':2694,'multiline':False]
['text':' message is actually displayed.','line_number':2695,'multiline':False]
['text':' "silent reg" or "silent echo x" inside "redir" leaves msg_col','line_number':2698,'multiline':False]
['text':' somewhere in the line.  Put it back in the first column.','line_number':2699,'multiline':False]
['text':'/ Parse the address range, if any, in "eap".','line_number':2709,'multiline':False]
['text':'/ May set the last search pattern, unless "silent" is true.','line_number':2710,'multiline':False]
['text':'/','line_number':2711,'multiline':False]
['text':'/ @return  FAIL and set "errormsg" or return OK.','line_number':2712,'multiline':False]
['text':' Repeat for all ',' or ';' separated addresses.','line_number':2721,'multiline':False]
['text':' error detected','line_number':2728,'multiline':False]
['text':' '%' - all lines','line_number':2732,'multiline':False]
['text':' there is no Vim command which uses '%' and','line_number':2765,'multiline':False]
['text':' ADDR_WINDOWS or ADDR_TABS','line_number':2766,'multiline':False]
['text':' Will give an error later if a range is found.','line_number':2792,'multiline':False]
['text':' '*' - visual area','line_number':2797,'multiline':False]
['text':' Don't leave the cursor on an illegal line or column, but do','line_number':2829,'multiline':False]
['text':' accept zero as address, so 0;/PATTERN/ works correctly','line_number':2830,'multiline':False]
['text':' (where zero usually means to use the first line).','line_number':2831,'multiline':False]
['text':' Check the cursor position before returning.','line_number':2832,'multiline':False]
['text':' One address given: set start and end lines.','line_number':2846,'multiline':False]
['text':' ... but only implicit: really no address given','line_number':2849,'multiline':False]
['text':'/ Check for an Ex command with optional tail.','line_number':2863,'multiline':False]
['text':'/ If there is a match advance "pp" to the argument and return true.','line_number':2864,'multiline':False]
['text':'/','line_number':2865,'multiline':False]
['text':'/ @param pp   start of command','line_number':2866,'multiline':False]
['text':'/ @param cmd  name of command','line_number':2867,'multiline':False]
['text':'/ @param len  required length','line_number':2868,'multiline':False]
['text':'/ Append "cmd" to the error message in IObuff.','line_number':2885,'multiline':False]
['text':'/ Takes care of limiting the length and handling 0xa0, which would be','line_number':2886,'multiline':False]
['text':'/ invisible otherwise.','line_number':2887,'multiline':False]
['text':' Not enough space, truncate and put in "...".','line_number':2895,'multiline':False]
['text':'/ Return true and set "*idx" if "p" points to a one letter command.','line_number':2916,'multiline':False]
['text':'/ - The 'k' command can directly be followed by any character.','line_number':2917,'multiline':False]
['text':'/ - The 's' command can be followed directly by 'c', 'g', 'i', 'I' or 'r'','line_number':2918,'multiline':False]
['text':'/          but :sre[wind] is another command, as are :scr[iptnames],','line_number':2919,'multiline':False]
['text':'/          :scs[cope], :sim[alt], :sig[ns] and :sil[ent].','line_number':2920,'multiline':False]
['text':'/ Find an Ex command by its name, either built-in or user.','line_number':2943,'multiline':False]
['text':'/ Start of the name can be found at eap->cmd.','line_number':2944,'multiline':False]
['text':'/ Sets eap->cmdidx and returns a pointer to char after the command name.','line_number':2945,'multiline':False]
['text':'/ "full" is set to true if the whole command name matched.','line_number':2946,'multiline':False]
['text':'/','line_number':2947,'multiline':False]
['text':'/ @return  NULL for an ambiguous user command.','line_number':2948,'multiline':False]
['text':' Isolate the command and search for it in the command table.','line_number':2952,'multiline':False]
['text':' for python 3.x support ":py3", ":python3", ":py3file", etc.','line_number':2960,'multiline':False]
['text':' check for non-alpha command','line_number':2967,'multiline':False]
['text':' The "d" command can directly be followed by 'l' or 'p' flag.','line_number':2972,'multiline':False]
['text':' Check for ":dl", ":dell", etc. to ":deletel": that's','line_number':2974,'multiline':False]
['text':' :delete with the 'l' flag.  Same for 'p'.','line_number':2975,'multiline':False]
['text':' Use a precomputed index for fast look-up in cmdnames[]','line_number':3001,'multiline':False]
['text':' taking into account the first 2 letters of eap->cmd.','line_number':3002,'multiline':False]
['text':' Make :def an unknown command to avoid confusing behavior. #23149','line_number':3015,'multiline':False]
['text':' Look for a user defined command as a last resort.','line_number':3031,'multiline':False]
['text':' User defined commands may contain digits.','line_number':3034,'multiline':False]
['text':' :123verbose  :3tab','line_number':3051,'multiline':False]
['text':'/ @return  length of a command modifier (including optional count) or,','line_number':3079,'multiline':False]
['text':'/          zero when it's not a modifier.','line_number':3080,'multiline':False]
['text':'/ @return  > 0 if an Ex command "name" exists or,','line_number':3104,'multiline':False]
['text':'/            2 if there is an exact match or,','line_number':3105,'multiline':False]
['text':'/            3 if there is an ambiguous match.','line_number':3106,'multiline':False]
['text':' Check command modifiers.','line_number':3109,'multiline':False]
['text':' Check built-in commands and user defined commands.','line_number':3122,'multiline':False]
['text':' For ":2match" and ":3match" we need to skip the number.','line_number':3123,'multiline':False]
['text':' trailing garbage','line_number':3137,'multiline':False]
['text':'/ "fullcommand" function','line_number':3142,'multiline':False]
['text':' Make :def an unknown command to avoid confusing behavior. #23149','line_number':3172,'multiline':False]
['text':'/ Skip a range specifier of the form: addr [,addr] [;addr] ..','line_number':3194,'multiline':False]
['text':'/','line_number':3195,'multiline':False]
['text':'/ Backslashed delimiters after / or ? will be skipped, and commands will','line_number':3196,'multiline':False]
['text':'/ not be expanded between /'s and ?'s or after "'".','line_number':3197,'multiline':False]
['text':'/','line_number':3198,'multiline':False]
['text':'/ Also skip white space and ":" characters.','line_number':3199,'multiline':False]
['text':'/','line_number':3200,'multiline':False]
['text':'/ @param ctx  pointer to xp_context or NULL','line_number':3201,'multiline':False]
['text':'/','line_number':3202,'multiline':False]
['text':'/ @return the "cmd" pointer advanced to beyond the range.','line_number':3203,'multiline':False]
['text':' Skip ":" and white space.','line_number':3233,'multiline':False]
['text':'/ Gets a single EX address.','line_number':3248,'multiline':False]
['text':'/','line_number':3249,'multiline':False]
['text':'/ Sets ptr to the next character after the part that was interpreted.','line_number':3250,'multiline':False]
['text':'/ Sets ptr to NULL when an error is encountered (stored in `errormsg`).','line_number':3251,'multiline':False]
['text':'/ May set the last used search pattern.','line_number':3252,'multiline':False]
['text':'/','line_number':3253,'multiline':False]
['text':'/ @param skip           only skip the address, don't use it','line_number':3254,'multiline':False]
['text':'/ @param silent         no errors or side effects','line_number':3255,'multiline':False]
['text':'/ @param to_other_file  flag: may jump to other file','line_number':3256,'multiline':False]
['text':'/ @param address_count  1 for first, >1 after comma','line_number':3257,'multiline':False]
['text':'/ @param errormsg       Error message, if any','line_number':3258,'multiline':False]
['text':'/','line_number':3259,'multiline':False]
['text':'/ @return               MAXLNUM when no Ex address was found.','line_number':3260,'multiline':False]
['text':' '.' - Cursor position','line_number':3275,'multiline':False]
['text':' '$' - last line','line_number':3311,'multiline':False]
['text':' ''' - mark','line_number':3362,'multiline':False]
['text':' Only accept a mark in another file when it is','line_number':3375,'multiline':False]
['text':' used by itself: ":'M".','line_number':3376,'multiline':False]
['text':' Jumped to another file.','line_number':3382,'multiline':False]
['text':' '/' or '?' - search','line_number':3396,'multiline':False]
['text':' skip "/pat/"','line_number':3403,'multiline':False]
['text':' save curwin->w_cursor','line_number':3411,'multiline':False]
['text':' When '/' or '?' follows another address, start from','line_number':3413,'multiline':False]
['text':' there.','line_number':3414,'multiline':False]
['text':' Start a forward search at the end of the line (unless','line_number':3420,'multiline':False]
['text':' before the first line).','line_number':3421,'multiline':False]
['text':' Start a backward search at the start of the line.','line_number':3422,'multiline':False]
['text':' This makes sure we never match in the current','line_number':3423,'multiline':False]
['text':' line, and can match anywhere in the','line_number':3424,'multiline':False]
['text':' next/previous line.','line_number':3425,'multiline':False]
['text':' adjust command string pointer','line_number':3440,'multiline':False]
['text':' "\?", "\/" or "\&", repeat search','line_number':3445,'multiline':False]
['text':' When search follows another address, start from there.','line_number':3463,'multiline':False]
['text':' Start the search just like for the above do_search().','line_number':3465,'multiline':False]
['text':' absolute line number','line_number':3481,'multiline':False]
['text':' "+1" is same as ".+1"','line_number':3496,'multiline':False]
['text':' "number" is same as "+number"','line_number':3529,'multiline':False]
['text':' '+' is '+1'','line_number':3533,'multiline':False]
['text':' "number", "+number" or "-number"','line_number':3536,'multiline':False]
['text':' Relative line addressing: need to adjust for lines in a','line_number':3551,'multiline':False]
['text':' closed fold after the first address.','line_number':3552,'multiline':False]
['text':'/ Get flags from an Ex command argument.','line_number':3575,'multiline':False]
['text':'/ Stub function for command which is Not Implemented. NI!','line_number':3590,'multiline':False]
['text':'/ Stub function for script command which is Not Implemented. NI!','line_number':3598,'multiline':False]
['text':'/ Skips over ":perl <<EOF" constructs.','line_number':3599,'multiline':False]
['text':'/ Check range in Ex command for validity.','line_number':3610,'multiline':False]
['text':'/','line_number':3611,'multiline':False]
['text':'/ @return  NULL when valid, error message when invalid.','line_number':3612,'multiline':False]
['text':' add 1 if ARGCOUNT is 0','line_number':3629,'multiline':False]
['text':' Only a boundary check, not whether the buffers actually','line_number':3635,'multiline':False]
['text':' exist.','line_number':3636,'multiline':False]
['text':' Any range is OK.','line_number':3675,'multiline':False]
['text':' No error for value that is too big, will use the last entry.','line_number':3679,'multiline':False]
['text':' Will give an error elsewhere.','line_number':3695,'multiline':False]
['text':'/ Correct the range for zero line number, if required.','line_number':3702,'multiline':False]
['text':' zero in range not allowed','line_number':3705,'multiline':False]
['text':'/ For a ":vimgrep" or ":vimgrepadd" command return a pointer past the','line_number':3715,'multiline':False]
['text':'/ pattern.  Otherwise return eap->arg.','line_number':3716,'multiline':False]
['text':'/ For the ":make" and ":grep" commands insert the 'makeprg'/'grepprg' option','line_number':3733,'multiline':False]
['text':'/ in the command line, so that things like % get expanded.','line_number':3734,'multiline':False]
['text':' Don't do it when ":vimgrep" is used for ":grep".','line_number':3742,'multiline':False]
['text':' Replace $* by given arguments','line_number':3751,'multiline':False]
['text':' No $* in arg, build "<makeprg> <arg>" instead','line_number':3753,'multiline':False]
['text':' 'eap->cmd' is not set here, because it is not used at CMD_make','line_number':3762,'multiline':False]
['text':'/ Expand file name in Ex command argument.','line_number':3770,'multiline':False]
['text':'/ When an error is detected, "errormsgp" is set to a non-NULL pointer.','line_number':3771,'multiline':False]
['text':'/','line_number':3772,'multiline':False]
['text':'/ @return  FAIL for failure, OK otherwise.','line_number':3773,'multiline':False]
['text':' Skip a regexp pattern for ":vimgrep[add] pat file..."','line_number':3776,'multiline':False]
['text':' Decide to expand wildcards *before* replacing '%', '#', etc.  If','line_number':3779,'multiline':False]
['text':' the file name contains a wildcard it should not cause expanding.','line_number':3780,'multiline':False]
['text':' (it will be expanded anyway if there is a wildcard before replacing).','line_number':3781,'multiline':False]
['text':' Skip over `=expr`, wildcards in it are not expanded.','line_number':3784,'multiline':False]
['text':' Quick check if this cannot be the start of a special string.','line_number':3793,'multiline':False]
['text':' Also removes backslash before '%', '#' and '<'.','line_number':3794,'multiline':False]
['text':' Try to find a match at this position.','line_number':3800,'multiline':False]
['text':' error detected','line_number':3805,'multiline':False]
['text':' no match found','line_number':3808,'multiline':False]
['text':' Wildcards won't be expanded below, the replacement is taken','line_number':3813,'multiline':False]
['text':' literally.  But do expand "~/file", "~user/file" and "$HOME/file".','line_number':3814,'multiline':False]
['text':' Need to escape white space et al. with a backslash.','line_number':3822,'multiline':False]
['text':' Don't do this for:','line_number':3823,'multiline':False]
['text':' - replacement that already has been escaped: "##"','line_number':3824,'multiline':False]
['text':' - shell commands (may have to use quotes instead).','line_number':3825,'multiline':False]
['text':' Don't escape a backslash here, because rem_backslash() doesn't','line_number':3839,'multiline':False]
['text':' remove it later.','line_number':3840,'multiline':False]
['text':' For a shell command a '!' must be escaped.','line_number':3857,'multiline':False]
['text':' One file argument: Expand wildcards.','line_number':3873,'multiline':False]
['text':' Don't do this with ":r !command" or ":w !command".','line_number':3874,'multiline':False]
['text':' Replace environment variables.','line_number':3876,'multiline':False]
['text':' May expand environment variables.  This','line_number':3878,'multiline':False]
['text':' can be done much faster with expand_env() than with','line_number':3879,'multiline':False]
['text':' something else (e.g., calling a shell).','line_number':3880,'multiline':False]
['text':' After expanding environment variables, check again','line_number':3881,'multiline':False]
['text':' if there are still wildcards present.','line_number':3882,'multiline':False]
['text':' Halve the number of backslashes (this is Vi compatible).','line_number':3896,'multiline':False]
['text':' For Unix, when wildcards are expanded, this is','line_number':3897,'multiline':False]
['text':' done by ExpandOne() below.','line_number':3898,'multiline':False]
['text':'/ Replace part of the command line, keeping eap->cmd, eap->arg, eap->args and','line_number':3927,'multiline':False]
['text':'/ eap->nextcmd correct.','line_number':3928,'multiline':False]
['text':'/ "src" points to the part that is to be replaced, of length "srclen".','line_number':3929,'multiline':False]
['text':'/ "repl" is the replacement string.','line_number':3930,'multiline':False]
['text':'/','line_number':3931,'multiline':False]
['text':'/ @return  a pointer to the character after the replaced string.','line_number':3932,'multiline':False]
['text':' The new command line is build in new_cmdline[].','line_number':3935,'multiline':False]
['text':' First allocate it.','line_number':3936,'multiline':False]
['text':' Careful: a "+cmd" argument may have been NUL terminated.','line_number':3937,'multiline':False]
['text':' add space for next command','line_number':3941,'multiline':False]
['text':' Copy the stuff before the expanded part.','line_number':3946,'multiline':False]
['text':' Copy the expanded stuff.','line_number':3947,'multiline':False]
['text':' Copy what came after the expanded part.','line_number':3948,'multiline':False]
['text':' Copy the next commands, if there are any.','line_number':3949,'multiline':False]
['text':' length of part before match','line_number':3950,'multiline':False]
['text':' remember the end of the string','line_number':3954,'multiline':False]
['text':' remember where to continue','line_number':3956,'multiline':False]
['text':' append next command','line_number':3958,'multiline':False]
['text':' If replaced text is after or in the same position as the argument,','line_number':3968,'multiline':False]
['text':' the argument's position relative to the beginning of the cmdline stays the same.','line_number':3969,'multiline':False]
['text':' Otherwise, argument gets shifted alongside the replaced text.','line_number':3972,'multiline':False]
['text':' The amount of the shift is equal to the difference of the old and new string length.','line_number':3973,'multiline':False]
['text':'/ Check for '|' to separate commands and '"' to start comments.','line_number':3987,'multiline':False]
['text':' skip CTRL-V and next char','line_number':3995,'multiline':False]
['text':' remove CTRL-V and skip next char','line_number':3997,'multiline':False]
['text':' stop at NUL after CTRL-V','line_number':4000,'multiline':False]
['text':' Skip over `=expr` when wildcards are expanded.','line_number':4004,'multiline':False]
['text':' stop at NUL after CTRL-V','line_number':4007,'multiline':False]
['text':' Check for '"': start of comment or '|': next command */','line_number':4011,'multiline':False]
['text':' :@" does not start a comment!','line_number':4012,'multiline':False]
['text':' :redir @" doesn't either.','line_number':4013,'multiline':False]
['text':' We remove the '\' before the '|', unless EX_CTRLV is used','line_number':4019,'multiline':False]
['text':' AND 'b' is present in 'cpoptions'.','line_number':4020,'multiline':False]
['text':' remove the '\'','line_number':4023,'multiline':False]
['text':' remove trailing spaces','line_number':4033,'multiline':False]
['text':'/ get + command from ex argument','line_number':4038,'multiline':False]
['text':' +[command]','line_number':4044,'multiline':False]
['text':' terminate command with NUL','line_number':4052,'multiline':False]
['text':' skip over spaces','line_number':4056,'multiline':False]
['text':'/ Find end of "+command" argument.  Skip over "\ " and "\\".','line_number':4062,'multiline':False]
['text':'/','line_number':4063,'multiline':False]
['text':'/ @param rembs  true to halve the number of backslashes','line_number':4064,'multiline':False]
['text':'/ Function given to ExpandGeneric() to obtain the list of bad= names.','line_number':4095,'multiline':False]
['text':' Note: Keep this in sync with get_bad_opt().','line_number':4098,'multiline':False]
['text':'/ Get "++opt=arg" argument.','line_number':4111,'multiline':False]
['text':'/','line_number':4112,'multiline':False]
['text':'/ @return  FAIL or OK.','line_number':4113,'multiline':False]
['text':' Note: Keep this in sync with get_argopt_name.','line_number':4120,'multiline':False]
['text':' ":edit ++[no]bin[ary] file"','line_number':4122,'multiline':False]
['text':' ":read ++edit file"','line_number':4137,'multiline':False]
['text':' ":write ++p foo/bar/file','line_number':4144,'multiline':False]
['text':' Make 'fileencoding' lower case.','line_number':4185,'multiline':False]
['text':' Check ++bad= argument.  Must be a single-byte character, "keep" or','line_number':4190,'multiline':False]
['text':' "drop".','line_number':4191,'multiline':False]
['text':'/ Function given to ExpandGeneric() to obtain the list of ++opt names.','line_number':4200,'multiline':False]
['text':' Note: Keep this in sync with getargopt().','line_number':4203,'multiline':False]
['text':'/ Command-line expansion for ++opt=name.','line_number':4220,'multiline':False]
['text':' Special handling of "ff" which acts as a short form of','line_number':4251,'multiline':False]
['text':' "fileformat", as "ff" is not a substring of it.','line_number':4252,'multiline':False]
['text':'/ Handle the argument for a tabpage related ex command.','line_number':4265,'multiline':False]
['text':'/ When an error is encountered then eap->errmsg is set.','line_number':4266,'multiline':False]
['text':'/','line_number':4267,'multiline':False]
['text':'/ @return  a tabpage number.','line_number':4268,'multiline':False]
['text':' argument +N/-N means: go to N places to the','line_number':4276,'multiline':False]
['text':' right/left relative to the current position.','line_number':4277,'multiline':False]
['text':' No numbers as argument.','line_number':4303,'multiline':False]
['text':' No numbers as argument.','line_number':4311,'multiline':False]
['text':' Disallow autocommands in secure mode.','line_number':4360,'multiline':False]
['text':'/ ":doautocmd": Apply the automatic commands to the current buffer.','line_number':4371,'multiline':False]
['text':' Only when there is no <nomodeline>.','line_number':4379,'multiline':False]
['text':'/ :[N]bunload[!] [N] [bufname] unload buffer','line_number':4385,'multiline':False]
['text':'/ :[N]bdelete[!] [N] [bufname] delete buffer from buffer list','line_number':4386,'multiline':False]
['text':'/ :[N]bwipeout[!] [N] [bufname] delete buffer really','line_number':4387,'multiline':False]
['text':'/ :[N]buffer [N]       to buffer N','line_number':4399,'multiline':False]
['text':'/ :[N]sbuffer [N]      to buffer N','line_number':4400,'multiline':False]
['text':' default is current buffer','line_number':4406,'multiline':False]
['text':'/ :[N]bmodified [N]    to next mod. buffer','line_number':4417,'multiline':False]
['text':'/ :[N]sbmodified [N]   to next mod. buffer','line_number':4418,'multiline':False]
['text':'/ :[N]bnext [N]        to next buffer','line_number':4427,'multiline':False]
['text':'/ :[N]sbnext [N]       split and to next buffer','line_number':4428,'multiline':False]
['text':'/ :[N]bNext [N]        to previous buffer','line_number':4437,'multiline':False]
['text':'/ :[N]bprevious [N]    to previous buffer','line_number':4438,'multiline':False]
['text':'/ :[N]sbNext [N]       split and to previous buffer','line_number':4439,'multiline':False]
['text':'/ :[N]sbprevious [N]   split and to previous buffer','line_number':4440,'multiline':False]
['text':'/ :brewind             to first buffer','line_number':4449,'multiline':False]
['text':'/ :bfirst              to first buffer','line_number':4450,'multiline':False]
['text':'/ :sbrewind            split and to first buffer','line_number':4451,'multiline':False]
['text':'/ :sbfirst             split and to first buffer','line_number':4452,'multiline':False]
['text':'/ :blast               to last buffer','line_number':4461,'multiline':False]
['text':'/ :sblast              split and to last buffer','line_number':4462,'multiline':False]
['text':'/ @return  the next command, after the first '|' or '\n' or,','line_number':4476,'multiline':False]
['text':'/          NULL if not found.','line_number':4477,'multiline':False]
['text':'/ Check if *p is a separator between Ex commands, skipping over white space.','line_number':4489,'multiline':False]
['text':'/','line_number':4490,'multiline':False]
['text':'/ @return  NULL if it isn't, the following character if it is.','line_number':4491,'multiline':False]
['text':'/ - if there are more files to edit','line_number':4502,'multiline':False]
['text':'/ - and this is the last window','line_number':4503,'multiline':False]
['text':'/ - and forceit not used','line_number':4504,'multiline':False]
['text':'/ - and not repeated twice on a row','line_number':4505,'multiline':False]
['text':'/','line_number':4506,'multiline':False]
['text':'/ @param   message  when false check only, no messages','line_number':4507,'multiline':False]
['text':'/','line_number':4508,'multiline':False]
['text':'/ @return  FAIL and give error message if 'message' true, return OK otherwise','line_number':4509,'multiline':False]
['text':' next try to quit is allowed','line_number':4530,'multiline':False]
['text':'/ Function given to ExpandGeneric() to obtain the list of command names.','line_number':4537,'multiline':False]
['text':'/ Call this function if we thought we were going to exit, but we won't','line_number':4575,'multiline':False]
['text':'/ (because of an error).  May need to restore the terminal mode.','line_number':4576,'multiline':False]
['text':' Bail out when autocommands closed the window.','line_number':4586,'multiline':False]
['text':' Refuse to quit when the buffer in the last window is being closed (can','line_number':4587,'multiline':False]
['text':' only happen in autocommands).','line_number':4588,'multiline':False]
['text':' Refuse to quit when locked or when the window was closed or the','line_number':4598,'multiline':False]
['text':' buffer in the last window is being closed (can only happen in','line_number':4599,'multiline':False]
['text':' autocommands).','line_number':4600,'multiline':False]
['text':'/ ":quit": quit current window, quit Vim if the last window is closed.','line_number':4611,'multiline':False]
['text':'/ ":{nr}quit": quit window {nr}','line_number':4612,'multiline':False]
['text':' Don't quit while editing the command line.','line_number':4619,'multiline':False]
['text':' Refuse to quit when locked.','line_number':4639,'multiline':False]
['text':' Trigger QuitPre and maybe ExitPre','line_number':4644,'multiline':False]
['text':' If there is only one relevant window we will exit.','line_number':4649,'multiline':False]
['text':' quit last window','line_number':4661,'multiline':False]
['text':' Note: only_one_window() returns true, even so a help window is','line_number':4662,'multiline':False]
['text':' still open. In that case only quit, if no address has been','line_number':4663,'multiline':False]
['text':' specified. Example:','line_number':4664,'multiline':False]
['text':' :h|wincmd w|1q     - don't quit','line_number':4665,'multiline':False]
['text':' :h|wincmd w|q      - quit','line_number':4666,'multiline':False]
['text':' close window; may free buffer','line_number':4671,'multiline':False]
['text':'/ ":cquit".','line_number':4676,'multiline':False]
['text':' this does not always pass on the exit code to the Manx compiler. why?','line_number':4680,'multiline':False]
['text':'/ Do preparations for "qall" and "wqall".','line_number':4686,'multiline':False]
['text':'/ Returns FAIL when quitting should be aborted.','line_number':4687,'multiline':False]
['text':' open_cmdwin() takes care of this','line_number':4692,'multiline':False]
['text':' Don't quit while editing the command line.','line_number':4699,'multiline':False]
['text':'/ ":qall": try to quit all windows','line_number':4712,'multiline':False]
['text':'/ ":close": close current window, unless it is the last one','line_number':4725,'multiline':False]
['text':'/ ":pclose": Close any preview window.','line_number':4751,'multiline':False]
['text':'/ Close window "win" and take care of handling closing the last window for a','line_number':4762,'multiline':False]
['text':'/ modified buffer.','line_number':4763,'multiline':False]
['text':'/','line_number':4764,'multiline':False]
['text':'/ @param tp  NULL or the tab page "win" is in','line_number':4765,'multiline':False]
['text':' Never close the autocommand window.','line_number':4768,'multiline':False]
['text':' free buffer when not hiding it or when it's a scratch buffer','line_number':4792,'multiline':False]
['text':'/ ":tabclose": close current tab page, unless it is the last one.','line_number':4800,'multiline':False]
['text':'/ ":tabclose N": close tab page N.','line_number':4801,'multiline':False]
['text':'/ ":tabonly": close all tab pages except the current one','line_number':4832,'multiline':False]
['text':' Repeat this up to a 1000 times, because autocommands may','line_number':4851,'multiline':False]
['text':' mess up the lists.','line_number':4852,'multiline':False]
['text':' if we failed to close it quit','line_number':4857,'multiline':False]
['text':' start over, "tp" is now invalid','line_number':4861,'multiline':False]
['text':'/ Close the current tab page.','line_number':4872,'multiline':False]
['text':' First close all the windows but the current one.  If that worked then','line_number':4875,'multiline':False]
['text':' close the last window in this tab, that will close it.','line_number':4876,'multiline':False]
['text':'/ Close tab page "tp", which is not the current tab page.','line_number':4888,'multiline':False]
['text':'/ Note that autocommands may make "tp" invalid.','line_number':4889,'multiline':False]
['text':'/ Also takes care of the tab pages line disappearing when closing the','line_number':4890,'multiline':False]
['text':'/ last-but-one tab page.','line_number':4891,'multiline':False]
['text':' Limit to 1000 windows, autocommands may add a window while we close','line_number':4897,'multiline':False]
['text':' one.  OK, so I'm paranoid...','line_number':4898,'multiline':False]
['text':' Autocommands may delete the tab page under our fingers and we may','line_number':4904,'multiline':False]
['text':' fail to close a window with a modified buffer.','line_number':4905,'multiline':False]
['text':'/ ":only".','line_number':4912,'multiline':False]
['text':' ":hide" or ":hide | cmd": hide current window','line_number':4936,'multiline':False]
['text':' don't free buffer','line_number':4942,'multiline':False]
['text':'/ ":stop" and ":suspend": Suspend Vim.','line_number':4961,'multiline':False]
['text':'/ ":exit", ":xit" and ":wq": Write file and quit the current window.','line_number':4972,'multiline':False]
['text':' Don't quit while editing the command line.','line_number':4979,'multiline':False]
['text':' we plan to exit if there is only one relevant window','line_number':4985,'multiline':False]
['text':' Write the buffer for ":wq" or when it was changed.','line_number':4989,'multiline':False]
['text':' Trigger QuitPre and ExitPre.','line_number':4990,'multiline':False]
['text':' Check if we can exit now, after autocommands have changed things.','line_number':4991,'multiline':False]
['text':' quit last window, exit Vim','line_number':4999,'multiline':False]
['text':' Quit current window, may free the buffer.','line_number':5003,'multiline':False]
['text':'/ ":print", ":list", ":number".','line_number':5008,'multiline':False]
['text':' put cursor at last line','line_number':5024,'multiline':False]
['text':'/ ":preserve".','line_number':5037,'multiline':False]
['text':'/ ":recover".','line_number':5043,'multiline':False]
['text':' Set recoverymode right away to avoid the ATTENTION prompt.','line_number':5046,'multiline':False]
['text':'/ Command modifier used in a wrong way.','line_number':5060,'multiline':False]
['text':'/ :sview [+command] file       split window with new file, read-only','line_number':5066,'multiline':False]
['text':'/ :split [[+command] file]     split window with current or new file','line_number':5067,'multiline':False]
['text':'/ :vsplit [[+command] file]    split window vertically with current or new file','line_number':5068,'multiline':False]
['text':'/ :new [[+command] file]       split window with no or new file','line_number':5069,'multiline':False]
['text':'/ :vnew [[+command] file]      split vertically window with no or new file','line_number':5070,'multiline':False]
['text':'/ :sfind [+command] file       split window with file in 'path'','line_number':5071,'multiline':False]
['text':'/','line_number':5072,'multiline':False]
['text':'/ :tabedit                     open new Tab page with empty window','line_number':5073,'multiline':False]
['text':'/ :tabedit [+command] file     open new Tab page and edit "file"','line_number':5074,'multiline':False]
['text':'/ :tabnew [[+command] file]    just like :tabedit','line_number':5075,'multiline':False]
['text':'/ :tabfind [+command] file     open new Tab page and find "file"','line_number':5076,'multiline':False]
['text':' A ":split" in the quickfix window works like ":new".  Don't want two','line_number':5085,'multiline':False]
['text':' quickfix windows.  But it's OK when doing ":tab split".','line_number':5086,'multiline':False]
['text':' Either open new tab page or split the window.','line_number':5110,'multiline':False]
['text':' set the alternate buffer for the window we came from','line_number':5117,'multiline':False]
['text':' Reset 'scrollbind' when editing another file, but keep it when','line_number':5127,'multiline':False]
['text':' doing ":split" without arguments.','line_number':5128,'multiline':False]
['text':'/ Open a new tab page.','line_number':5141,'multiline':False]
['text':'/ :tabnext command','line_number':5152,'multiline':False]
['text':' No numbers as argument.','line_number':5173,'multiline':False]
['text':' CMD_tabnext','line_number':5190,'multiline':False]
['text':'/ :tabmove command','line_number':5199,'multiline':False]
['text':'/ :tabs command: List tabs and their contents.','line_number':5208,'multiline':False]
['text':'/ ":mode":','line_number':5251,'multiline':False]
['text':'/ If no argument given, get the screen size and redraw.','line_number':5252,'multiline':False]
['text':'/ ":resize".','line_number':5263,'multiline':False]
['text':'/ set, increment or decrement current window height','line_number':5264,'multiline':False]
['text':' default is very wide','line_number':5278,'multiline':False]
['text':' default is very high','line_number':5285,'multiline':False]
['text':'/ ":find [+command] <file>" command.','line_number':5292,'multiline':False]
['text':' Repeat finding the file "count" times.  This matters when it appears','line_number':5301,'multiline':False]
['text':' several times in the path.','line_number':5302,'multiline':False]
['text':'/ ":edit", ":badd", ":balt", ":visual".','line_number':5322,'multiline':False]
['text':'/ ":edit <file>" command and alike.','line_number':5328,'multiline':False]
['text':'/','line_number':5329,'multiline':False]
['text':'/ @param old_curwin  curwin before doing a split or NULL','line_number':5330,'multiline':False]
['text':' ":vi" command ends Ex mode.','line_number':5333,'multiline':False]
['text':' Special case:  ":global/pat/visual\NLvi-commands"','line_number':5339,'multiline':False]
['text':' ":new" or ":tabnew" without argument: edit a new empty buffer','line_number':5371,'multiline':False]
['text':' Can't edit another file when "textlock" or "curbuf->b_ro_locked" is set.','line_number':5378,'multiline':False]
['text':' Only ":edit" or ":script" can bring us here, others are stopped earlier.','line_number':5379,'multiline':False]
['text':' 'readonly' doesn't make sense','line_number':5387,'multiline':False]
['text':' in an empty buffer','line_number':5388,'multiline':False]
['text':' After a split we can use an existing buffer.','line_number':5397,'multiline':False]
['text':' Editing the file failed.  If the window was split, close it.','line_number':5402,'multiline':False]
['text':' Reset the error/interrupt/exception state here so that','line_number':5408,'multiline':False]
['text':' aborting() returns false when closing a window.','line_number':5409,'multiline':False]
['text':' Restore the error/interrupt/exception state if not','line_number':5413,'multiline':False]
['text':' discarded by a new aborting error, interrupt, or','line_number':5414,'multiline':False]
['text':' uncaught exception.','line_number':5415,'multiline':False]
['text':' When editing an already visited buffer, 'readonly' won't be set','line_number':5420,'multiline':False]
['text':' but the previous value is kept.  With ":view" and ":sview" we','line_number':5421,'multiline':False]
['text':' want the  file to be readonly, except when another window is','line_number':5422,'multiline':False]
['text':' editing the same buffer.','line_number':5423,'multiline':False]
['text':' if ":split file" worked, set alternate file name in old window to new','line_number':5438,'multiline':False]
['text':' file','line_number':5439,'multiline':False]
['text':'/ ":gui" and ":gvim" when there is no GUI.','line_number':5452,'multiline':False]
['text':'/ ":syncbind" forces all 'scrollbind' windows to have the same relative','line_number':5472,'multiline':False]
['text':'/ offset.','line_number':5473,'multiline':False]
['text':'/ (1998-11-02 16:21:01  R. Edward Ralston <eralston@computer.org>)','line_number':5474,'multiline':False]
['text':' determine max topline','line_number':5485,'multiline':False]
['text':' Set all scrollbind windows to the same topline.','line_number':5503,'multiline':False]
['text':' :r!cmd','line_number':5539,'multiline':False]
['text':' check for no file name','line_number':5550,'multiline':False]
['text':' Delete the empty line that remains.  Historically ex does','line_number':5568,'multiline':False]
['text':' this but vi doesn't.','line_number':5569,'multiline':False]
['text':'/ Get the previous directory for the given chdir scope.','line_number':5600,'multiline':False]
['text':'/ Deal with the side effects of changing the current directory.','line_number':5615,'multiline':False]
['text':'/','line_number':5616,'multiline':False]
['text':'/ @param scope  Scope of the function call (global, tab or window).','line_number':5617,'multiline':False]
['text':' Always overwrite the window-local CWD.','line_number':5620,'multiline':False]
['text':' Overwrite the tab-local CWD for :cd, :tcd.','line_number':5623,'multiline':False]
['text':' If still in global directory, set CWD as the global directory.','line_number':5630,'multiline':False]
['text':' We are now in the global directory, no need to remember its name.','line_number':5642,'multiline':False]
['text':'/ Change directory function used by :cd/:tcd/:lcd Ex commands and the chdir() function.','line_number':5663,'multiline':False]
['text':'/ @param new_dir  The directory to change to.','line_number':5664,'multiline':False]
['text':'/ @param scope    Scope of the function call (global, tab or window).','line_number':5665,'multiline':False]
['text':'/ @return true if the directory is successfully changed.','line_number':5666,'multiline':False]
['text':' ":cd -": Change to previous directory','line_number':5674,'multiline':False]
['text':' For UNIX ":cd" means: go to home directory.','line_number':5690,'multiline':False]
['text':' On other systems too if 'cdhome' is set.','line_number':5691,'multiline':False]
['text':' Use NameBuff for home directory name.','line_number':5697,'multiline':False]
['text':'/ ":cd", ":tcd", ":lcd", ":chdir", "tchdir" and ":lchdir".','line_number':5731,'multiline':False]
['text':' for non-UNIX ":cd" means: print current directory unless 'cdhome' is set','line_number':5736,'multiline':False]
['text':' Echo the new current directory if the command was typed.','line_number':5757,'multiline':False]
['text':'/ ":pwd".','line_number':5764,'multiline':False]
['text':'/ ":=".','line_number':5789,'multiline':False]
['text':' equivalent to :lua= expr','line_number':5793,'multiline':False]
['text':'/ Sleep for "msec" milliseconds, but return early on CTRL-C.','line_number':5819,'multiline':False]
['text':' flush before waiting','line_number':5822,'multiline':False]
['text':' If CTRL-C was typed to interrupt the sleep, drop the CTRL-C from the','line_number':5825,'multiline':False]
['text':' input buffer, otherwise a following call to input() fails.','line_number':5826,'multiline':False]
['text':'/ ":winsize" command (obsolete).','line_number':5832,'multiline':False]
['text':' CTRL-W g and CTRL-W CTRL-G  have an extra command character','line_number':5858,'multiline':False]
['text':' Pass flags on for ":vertical wincmd ]".','line_number':5874,'multiline':False]
['text':'/ Handle command that work like operators: ":delete", ":yank", ":>" and ":<".','line_number':5883,'multiline':False]
['text':' position cursor for undo','line_number':5895,'multiline':False]
['text':' CMD_rshift or CMD_lshift','line_number':5916,'multiline':False]
['text':'/ ":put".','line_number':5930,'multiline':False]
['text':' ":0put" works like ":1put!".','line_number':5933,'multiline':False]
['text':'/ Handle ":copy" and ":move".','line_number':5944,'multiline':False]
['text':' error detected','line_number':5949,'multiline':False]
['text':' move or copy lines from 'eap->line1'-'eap->line2' to below line 'n'','line_number':5958,'multiline':False]
['text':'/ Print the current line if flags were given to the Ex command.','line_number':5976,'multiline':False]
['text':'/ ":smagic" and ":snomagic".','line_number':5986,'multiline':False]
['text':'/ ":smagic" and ":snomagic" preview callback.','line_number':5996,'multiline':False]
['text':'/ ":join".','line_number':6008,'multiline':False]
['text':' :2,2join does nothing','line_number':6013,'multiline':False]
['text':'/ ":[addr]@r": execute register','line_number':6027,'multiline':False]
['text':' Get the register name. No name means use the previous one.','line_number':6035,'multiline':False]
['text':' Put the register in the typeahead buffer with the "silent" flag.','line_number':6041,'multiline':False]
['text':' Execute from the typeahead buffer.','line_number':6051,'multiline':False]
['text':' Continue until the stuff buffer is empty and all added characters','line_number':6052,'multiline':False]
['text':' have been consumed.','line_number':6053,'multiline':False]
['text':'/ ":!".','line_number':6061,'multiline':False]
['text':'/ ":undo".','line_number':6067,'multiline':False]
['text':' :undo!','line_number':6072,'multiline':False]
['text':' :undo','line_number':6074,'multiline':False]
['text':' undo! 123','line_number':6081,'multiline':False]
['text':' change number for "undo!" must be lesser than current change number','line_number':6082,'multiline':False]
['text':' ensure that target change number is in same branch','line_number':6087,'multiline':False]
['text':' while also counting the amount of undoes it'd take to reach target','line_number':6088,'multiline':False]
['text':' :undo 123','line_number':6100,'multiline':False]
['text':'/ ":redo".','line_number':6121,'multiline':False]
['text':'/ ":earlier" and ":later".','line_number':6127,'multiline':False]
['text':'/ ":redir": start/stop redirection.','line_number':6161,'multiline':False]
['text':' Expand environment variables and "~/".','line_number':6182,'multiline':False]
['text':' redirect to a register a-z (resp. A-Z for appending)','line_number':6191,'multiline':False]
['text':' append','line_number':6196,'multiline':False]
['text':' Can use both "@a" and "@a>".','line_number':6199,'multiline':False]
['text':' Make register empty when not using @A-@Z and the','line_number':6203,'multiline':False]
['text':' command is valid.','line_number':6204,'multiline':False]
['text':' redirect to a variable','line_number':6217,'multiline':False]
['text':' TODO(vim): redirect to a buffer','line_number':6231,'multiline':False]
['text':' Make sure redirection is not off.  Can happen for cmdline completion','line_number':6236,'multiline':False]
['text':' that indirectly invokes a command to catch its output.','line_number':6237,'multiline':False]
['text':'/ ":redraw": force redraw','line_number':6244,'multiline':False]
['text':' Ignore :redraw during 'inccommand' preview. #9777','line_number':6248,'multiline':False]
['text':' Reset msg_didout, so that a message that's there is overwritten.','line_number':6270,'multiline':False]
['text':' No need to wait after an intentional redraw.','line_number':6274,'multiline':False]
['text':'/ ":redrawstatus": force redraw of status line(s) and window bar(s)','line_number':6280,'multiline':False]
['text':' Ignore :redrawstatus during 'inccommand' preview. #9777','line_number':6284,'multiline':False]
['text':'/ ":redrawtabline": force redraw of the tabline','line_number':6310,'multiline':False]
['text':'/ Try creating a directory, give error message on failure','line_number':6339,'multiline':False]
['text':'/','line_number':6340,'multiline':False]
['text':'/ @param[in]  name  Directory to create.','line_number':6341,'multiline':False]
['text':'/ @param[in]  prot  Directory permissions.','line_number':6342,'multiline':False]
['text':'/','line_number':6343,'multiline':False]
['text':'/ @return OK in case of success, FAIL otherwise.','line_number':6344,'multiline':False]
['text':'/ Open a file for writing for an Ex command, with some checks.','line_number':6356,'multiline':False]
['text':'/','line_number':6357,'multiline':False]
['text':'/ @param mode  "w" for create new file or "a" for append','line_number':6358,'multiline':False]
['text':'/','line_number':6359,'multiline':False]
['text':'/ @return  file descriptor, or NULL on failure.','line_number':6360,'multiline':False]
['text':' with Unix it is possible to open a directory','line_number':6364,'multiline':False]
['text':'/ ":mark" and ":k".','line_number':6383,'multiline':False]
['text':' No argument?','line_number':6386,'multiline':False]
['text':' more than one character?','line_number':6391,'multiline':False]
['text':' save curwin->w_cursor','line_number':6396,'multiline':False]
['text':' set mark','line_number':6399,'multiline':False]
['text':' restore curwin->w_cursor','line_number':6402,'multiline':False]
['text':'/ Update w_topline, w_leftcol and the cursor position.','line_number':6405,'multiline':False]
['text':' put cursor on valid line','line_number':6408,'multiline':False]
['text':'/ Save the current State and go to Normal mode.','line_number':6416,'multiline':False]
['text':'/','line_number':6417,'multiline':False]
['text':'/ @return  true if the typeahead could be saved.','line_number':6418,'multiline':False]
['text':' no msg scrolling in Normal mode','line_number':6431,'multiline':False]
['text':' don't go to Insert mode','line_number':6432,'multiline':False]
['text':' Save the current typeahead.  This is required to allow using ":normal"','line_number':6434,'multiline':False]
['text':' from an event handler and makes sure we don't hang when the argument','line_number':6435,'multiline':False]
['text':' ends with half a command.','line_number':6436,'multiline':False]
['text':' Restore the previous typeahead.','line_number':6444,'multiline':False]
['text':' Some function (terminal_enter()) was aware of ex_normal and decided to','line_number':6451,'multiline':False]
['text':' override the value of restart_edit anyway.','line_number':6452,'multiline':False]
['text':' don't reset msg_didout now','line_number':6460,'multiline':False]
['text':' Restore the state (needed when called from a function executed for','line_number':6463,'multiline':False]
['text':' 'indentexpr'). Update the mouse and cursor, they may have changed.','line_number':6464,'multiline':False]
['text':' may show different cursor shape','line_number':6466,'multiline':False]
['text':'/ ":normal[!] {commands}": Execute normal mode commands.','line_number':6474,'multiline':False]
['text':' vgetc() expects K_SPECIAL to have been escaped.  Don't do','line_number':6493,'multiline':False]
['text':' this for the K_SPECIAL leading byte, otherwise special keys will not','line_number':6494,'multiline':False]
['text':' work.','line_number':6495,'multiline':False]
['text':' Count the number of characters to be escaped.','line_number':6499,'multiline':False]
['text':' trailbyte K_SPECIAL','line_number':6503,'multiline':False]
['text':' Repeat the :normal command for each line in the range.  When no','line_number':6528,'multiline':False]
['text':' range given, execute it just once, without positioning the cursor','line_number':6529,'multiline':False]
['text':' first.','line_number':6530,'multiline':False]
['text':' Might not return to the main loop when in an event handler.','line_number':6543,'multiline':False]
['text':' may show different cursor shape','line_number':6551,'multiline':False]
['text':'/ ":startinsert", ":startreplace" and ":startgreplace"','line_number':6555,'multiline':False]
['text':' cursor line can be zero on startup','line_number':6559,'multiline':False]
['text':' Ignore the command when already in Insert mode.  Inserting an','line_number':6566,'multiline':False]
['text':' expression register that invokes a function can do this.','line_number':6567,'multiline':False]
['text':' avoid MAXCOL','line_number':6584,'multiline':False]
['text':'/ ":stopinsert"','line_number':6592,'multiline':False]
['text':'/ Execute normal mode command "cmd".','line_number':6600,'multiline':False]
['text':'/ "remap" can be REMAP_NONE or REMAP_YES.','line_number':6601,'multiline':False]
['text':' Stuff the argument into the typeahead buffer.','line_number':6604,'multiline':False]
['text':'/ Execute normal_cmd() until there is no typeahead left.','line_number':6609,'multiline':False]
['text':'/','line_number':6610,'multiline':False]
['text':'/ @param was_typed whether or not something was typed','line_number':6611,'multiline':False]
['text':' execute a Normal mode cmd','line_number':6623,'multiline':False]
['text':'/ ":psearch"','line_number':6634,'multiline':False]
['text':' ":psearch", ":isearch" and ":dsearch"','line_number':6648,'multiline':False]
['text':' ":ilist" and ":dlist"','line_number':6655,'multiline':False]
['text':' ":ijump" and ":djump"','line_number':6658,'multiline':False]
['text':' ":isplit" and ":dsplit"','line_number':6661,'multiline':False]
['text':' get count','line_number':6667,'multiline':False]
['text':' Match regexp, not just whole words','line_number':6671,'multiline':False]
['text':' Check for trailing illegal characters.','line_number':6679,'multiline':False]
['text':'/ ":ptag", ":ptselect", ":ptjump", ":ptnext", etc.','line_number':6694,'multiline':False]
['text':' will be reset to 0 in ex_tag_cmd()','line_number':6697,'multiline':False]
['text':'/ ":pedit"','line_number':6701,'multiline':False]
['text':' Open the preview window or popup and make it the current window.','line_number':6706,'multiline':False]
['text':' Edit the file.','line_number':6710,'multiline':False]
['text':' Return cursor to where we were','line_number':6714,'multiline':False]
['text':'/ ":stag", ":stselect" and ":stjump".','line_number':6722,'multiline':False]
['text':'/ ":tag", ":tselect", ":tjump", ":tnext", etc.','line_number':6733,'multiline':False]
['text':' ":tjump"','line_number':6745,'multiline':False]
['text':' ":tselect"','line_number':6748,'multiline':False]
['text':' ":tprevious"','line_number':6750,'multiline':False]
['text':' ":tNext"','line_number':6752,'multiline':False]
['text':' ":tnext"','line_number':6755,'multiline':False]
['text':' ":pop"','line_number':6758,'multiline':False]
['text':' ":tfirst"','line_number':6760,'multiline':False]
['text':' ":trewind"','line_number':6762,'multiline':False]
['text':' ":tlast"','line_number':6765,'multiline':False]
['text':' ":tag"','line_number':6767,'multiline':False]
['text':' SPEC_CLIENT,','line_number':6796,'multiline':False]
['text':'/ Check "str" for starting with a special cmdline variable.','line_number':6799,'multiline':False]
['text':'/ If found return one of the SPEC_ values and set "*usedlen" to the length of','line_number':6800,'multiline':False]
['text':'/ the variable.  Otherwise return -1 and "*usedlen" is unchanged.','line_number':6801,'multiline':False]
['text':' cursor word','line_number':6808,'multiline':False]
['text':' cursor WORD','line_number':6809,'multiline':False]
['text':' expr under cursor','line_number':6810,'multiline':False]
['text':' cursor path name','line_number':6811,'multiline':False]
['text':' ":so" file name','line_number':6812,'multiline':False]
['text':' ":so" file line number','line_number':6813,'multiline':False]
['text':' call stack','line_number':6814,'multiline':False]
['text':' script file name','line_number':6815,'multiline':False]
['text':' autocommand file name','line_number':6816,'multiline':False]
['text':' autocommand buffer number','line_number':6817,'multiline':False]
['text':' autocommand match name','line_number':6818,'multiline':False]
['text':' script file line number','line_number':6819,'multiline':False]
['text':' script ID: <SNR>123_','line_number':6820,'multiline':False]
['text':' [SPEC_CLIENT] = "<client>",','line_number':6821,'multiline':False]
['text':'/ Evaluate cmdline variables.','line_number':6835,'multiline':False]
['text':'/','line_number':6836,'multiline':False]
['text':'/ change "%"       to curbuf->b_ffname','line_number':6837,'multiline':False]
['text':'/        "#"       to curwin->w_alt_fnum','line_number':6838,'multiline':False]
['text':'/        "<cword>" to word under the cursor','line_number':6839,'multiline':False]
['text':'/        "<cWORD>" to WORD under the cursor','line_number':6840,'multiline':False]
['text':'/        "<cexpr>" to C-expression under the cursor','line_number':6841,'multiline':False]
['text':'/        "<cfile>" to path name under the cursor','line_number':6842,'multiline':False]
['text':'/        "<sfile>" to sourced file name','line_number':6843,'multiline':False]
['text':'/        "<stack>" to call stack','line_number':6844,'multiline':False]
['text':'/        "<script>" to current script name','line_number':6845,'multiline':False]
['text':'/        "<slnum>" to sourced file line number','line_number':6846,'multiline':False]
['text':'/        "<afile>" to file name for autocommand','line_number':6847,'multiline':False]
['text':'/        "<abuf>"  to buffer number for autocommand','line_number':6848,'multiline':False]
['text':'/        "<amatch>" to matching name for autocommand','line_number':6849,'multiline':False]
['text':'/','line_number':6850,'multiline':False]
['text':'/ When an error is detected, "errormsg" is set to a non-NULL pointer (may be','line_number':6851,'multiline':False]
['text':'/ "" for error without a message) and NULL is returned.','line_number':6852,'multiline':False]
['text':'/','line_number':6853,'multiline':False]
['text':'/ @param src             pointer into commandline','line_number':6854,'multiline':False]
['text':'/ @param srcstart        beginning of valid memory for src','line_number':6855,'multiline':False]
['text':'/ @param usedlen         characters after src that are used','line_number':6856,'multiline':False]
['text':'/ @param lnump           line number for :e command, or NULL','line_number':6857,'multiline':False]
['text':'/ @param errormsg        pointer to error message','line_number':6858,'multiline':False]
['text':'/ @param escaped         return value has escaped white space (can be NULL)','line_number':6859,'multiline':False]
['text':'/ @param empty_is_error  empty result is considered an error','line_number':6860,'multiline':False]
['text':'/','line_number':6861,'multiline':False]
['text':'/ @return          an allocated string if a valid match was found.','line_number':6862,'multiline':False]
['text':'/                  Returns NULL if no match was found.  "usedlen" then still contains the','line_number':6863,'multiline':False]
['text':'/                  number of characters to skip.','line_number':6864,'multiline':False]
['text':' Assume valid result.','line_number':6871,'multiline':False]
['text':' Check if there is something to do.','line_number':6881,'multiline':False]
['text':' no match','line_number':6883,'multiline':False]
['text':' Skip when preceded with a backslash "\%" and "\#".','line_number':6888,'multiline':False]
['text':' Note: In "\\%" the % is also not recognized!','line_number':6889,'multiline':False]
['text':' remove backslash','line_number':6892,'multiline':False]
['text':' word or WORD under cursor','line_number':6896,'multiline':False]
['text':'','line_number':6910,'multiline':False]
['text':' '#': Alternate file name','line_number':6911,'multiline':False]
['text':' '%': Current file name','line_number':6912,'multiline':False]
['text':'        File name under the cursor','line_number':6913,'multiline':False]
['text':'        File name for autocommand','line_number':6914,'multiline':False]
['text':'    and following modifiers','line_number':6915,'multiline':False]
['text':'','line_number':6916,'multiline':False]
['text':' '%': current file','line_number':6919,'multiline':False]
['text':' Must have ":p:h" to be valid','line_number':6922,'multiline':False]
['text':' '#' or "#99": alternate file','line_number':6929,'multiline':False]
['text':' "##": the argument list','line_number':6930,'multiline':False]
['text':' "#<99" uses v:oldfiles.','line_number':6941,'multiline':False]
['text':' just a minus sign, don't skip over it','line_number':6946,'multiline':False]
['text':' length of what we expand','line_number':6949,'multiline':False]
['text':' Should we give an error message for #<text?','line_number':6953,'multiline':False]
['text':' Must have ":p:h" to be valid','line_number':6976,'multiline':False]
['text':' file name under cursor','line_number':6984,'multiline':False]
['text':' remember allocated string','line_number':6990,'multiline':False]
['text':' file name for autocommand','line_number':6993,'multiline':False]
['text':' Still need to turn the fname into a full path.  It was','line_number':6995,'multiline':False]
['text':' postponed to avoid a delay when <afile> is not used.','line_number':6996,'multiline':False]
['text':' Copy into `autocmd_fname`, don't reassign it. #8165','line_number':6999,'multiline':False]
['text':' buffer number for autocommand','line_number':7011,'multiline':False]
['text':' match name for autocommand','line_number':7020,'multiline':False]
['text':' file name for ":so" command','line_number':7028,'multiline':False]
['text':' remember allocated string','line_number':7034,'multiline':False]
['text':' call stack','line_number':7036,'multiline':False]
['text':' remember allocated string','line_number':7042,'multiline':False]
['text':' script file name','line_number':7044,'multiline':False]
['text':' remember allocated string','line_number':7050,'multiline':False]
['text':' line in file for ":so" command','line_number':7053,'multiline':False]
['text':' line in script file','line_number':7062,'multiline':False]
['text':' should not happen','line_number':7083,'multiline':False]
['text':' avoid gcc warning','line_number':7085,'multiline':False]
['text':' Length of new string.','line_number':7089,'multiline':False]
['text':' Remove the file name extension.','line_number':7091,'multiline':False]
['text':' xgettext:no-c-format','line_number':7112,'multiline':False]
['text':'/ Expand the <sfile> string in "arg".','line_number':7126,'multiline':False]
['text':'/','line_number':7127,'multiline':False]
['text':'/ @return  an allocated string, or NULL for any error.','line_number':7128,'multiline':False]
['text':' replace "<sfile>" with the sourced file name, and do ":" stuff','line_number':7137,'multiline':False]
['text':' no match (cannot happen)','line_number':7148,'multiline':False]
['text':' continue after the match','line_number':7161,'multiline':False]
['text':'/ ":rshada" and ":wshada".','line_number':7168,'multiline':False]
['text':'/ Make a dialog message in "buff[DIALOG_MSG_SIZE]".','line_number':7183,'multiline':False]
['text':'/ "format" must contain "%s".','line_number':7184,'multiline':False]
['text':'/ ":filetype [plugin] [indent] {on,off,detect}"','line_number':7197,'multiline':False]
['text':'/ on: Load the filetype.vim file to install autocommands for file types.','line_number':7198,'multiline':False]
['text':'/ off: Load the ftoff.vim file to remove all autocommands for file types.','line_number':7199,'multiline':False]
['text':'/ plugin on: load filetype.vim and ftplugin.vim','line_number':7200,'multiline':False]
['text':'/ plugin off: load ftplugof.vim','line_number':7201,'multiline':False]
['text':'/ indent on: load filetype.vim and indent.vim','line_number':7202,'multiline':False]
['text':'/ indent off: load indoff.vim','line_number':7203,'multiline':False]
['text':' Print current status.','line_number':7207,'multiline':False]
['text':' Accept "plugin" and "indent" in any order.','line_number':7219,'multiline':False]
['text':'/ Source ftplugin.vim and indent.vim to create the necessary FileType','line_number':7269,'multiline':False]
['text':'/ autocommands. We do this separately from filetype.vim so that these','line_number':7270,'multiline':False]
['text':'/ autocommands will always fire first (and thus can be overridden) while still','line_number':7271,'multiline':False]
['text':'/ allowing general filetype detection to be disabled in the user's init file.','line_number':7272,'multiline':False]
['text':'/ Enable filetype detection if the user did not explicitly disable it.','line_number':7285,'multiline':False]
['text':' Normally .vim files are sourced before .lua files when both are','line_number':7289,'multiline':False]
['text':' supported, but we reverse the order here because we want the Lua','line_number':7290,'multiline':False]
['text':' autocommand to be defined first so that it runs first','line_number':7291,'multiline':False]
['text':'/ ":setfiletype [FALLBACK] {name}"','line_number':7297,'multiline':False]
['text':'/ ":nohlsearch"','line_number':7330,'multiline':False]
['text':' First set the marks for all lines closed/open.','line_number':7355,'multiline':False]
['text':' Execute the command on the marked lines.','line_number':7362,'multiline':False]
['text':' clear rest of the marks','line_number':7363,'multiline':False]
['text':'/ @return  true if the supplied Ex cmdidx is for a location list command','line_number':7366,'multiline':False]
['text':'/          instead of a quickfix command.','line_number':7367,'multiline':False]
['text':' ex_cmd must be a null terminated string before passing to add_win_cmd_modifiers','line_number':7396,'multiline':False]
['text':' Run {cmd} in 'shell'.','line_number':7412,'multiline':False]
['text':' No {cmd}: run the job with tokenized 'shell'.','line_number':7417,'multiline':False]
['text':'/ ":fclose"','line_number':7444,'multiline':False]
['text':' acceptable non-existing command','line_number':7453,'multiline':False]
['text':'/ Get argt of command with id','line_number':7741,'multiline':False]
