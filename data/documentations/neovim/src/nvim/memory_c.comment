['text':' Various routines dealing with allocation and deallocation of memory.','line_number':1,'multiline':False]
['text':'/ Try to free memory. Used when trying to recover from out of memory errors.','line_number':64,'multiline':False]
['text':'/ @see {xmalloc}','line_number':65,'multiline':False]
['text':' avoid recursive calls','line_number':69,'multiline':False]
['text':' free any scrollback text','line_number':75,'multiline':False]
['text':' Try to save all buffers and release as many blocks as possible','line_number':77,'multiline':False]
['text':'/ malloc() wrapper','line_number':85,'multiline':False]
['text':'/','line_number':86,'multiline':False]
['text':'/ try_malloc() is a malloc() wrapper that tries to free some memory before','line_number':87,'multiline':False]
['text':'/ trying again.','line_number':88,'multiline':False]
['text':'/','line_number':89,'multiline':False]
['text':'/ @see {try_to_free_memory}','line_number':90,'multiline':False]
['text':'/ @param size','line_number':91,'multiline':False]
['text':'/ @return pointer to allocated space. NULL if out of memory','line_number':92,'multiline':False]
['text':'/ try_malloc() wrapper that shows an out-of-memory error message to the user','line_number':104,'multiline':False]
['text':'/ before returning NULL','line_number':105,'multiline':False]
['text':'/','line_number':106,'multiline':False]
['text':'/ @see {try_malloc}','line_number':107,'multiline':False]
['text':'/ @param size','line_number':108,'multiline':False]
['text':'/ @return pointer to allocated space. NULL if out of memory','line_number':109,'multiline':False]
['text':'/ malloc() wrapper that never returns NULL','line_number':119,'multiline':False]
['text':'/','line_number':120,'multiline':False]
['text':'/ xmalloc() succeeds or gracefully aborts when out of memory.','line_number':121,'multiline':False]
['text':'/ Before aborting try to free some memory and call malloc again.','line_number':122,'multiline':False]
['text':'/','line_number':123,'multiline':False]
['text':'/ @see {try_to_free_memory}','line_number':124,'multiline':False]
['text':'/ @param size','line_number':125,'multiline':False]
['text':'/ @return pointer to allocated space. Never NULL','line_number':126,'multiline':False]
['text':'/ free() wrapper that delegates to the backing memory manager','line_number':137,'multiline':False]
['text':'/','line_number':138,'multiline':False]
['text':'/ @note Use XFREE_CLEAR() instead, if possible.','line_number':139,'multiline':False]
['text':'/ calloc() wrapper','line_number':145,'multiline':False]
['text':'/','line_number':146,'multiline':False]
['text':'/ @see {xmalloc}','line_number':147,'multiline':False]
['text':'/ @param count','line_number':148,'multiline':False]
['text':'/ @param size','line_number':149,'multiline':False]
['text':'/ @return pointer to allocated space. Never NULL','line_number':150,'multiline':False]
['text':'/ realloc() wrapper','line_number':167,'multiline':False]
['text':'/','line_number':168,'multiline':False]
['text':'/ @see {xmalloc}','line_number':169,'multiline':False]
['text':'/ @param size','line_number':170,'multiline':False]
['text':'/ @return pointer to reallocated space. Never NULL','line_number':171,'multiline':False]
['text':'/ xmalloc() wrapper that allocates size + 1 bytes and zeroes the last byte','line_number':187,'multiline':False]
['text':'/','line_number':188,'multiline':False]
['text':'/ Commonly used to allocate strings, e.g. `char *s = xmallocz(len)`.','line_number':189,'multiline':False]
['text':'/','line_number':190,'multiline':False]
['text':'/ @see {xmalloc}','line_number':191,'multiline':False]
['text':'/ @param size','line_number':192,'multiline':False]
['text':'/ @return pointer to allocated space. Never NULL','line_number':193,'multiline':False]
['text':'/ Allocates (len + 1) bytes of memory, duplicates `len` bytes of','line_number':208,'multiline':False]
['text':'/ `data` to the allocated memory, zero terminates the allocated memory,','line_number':209,'multiline':False]
['text':'/ and returns a pointer to the allocated memory. If the allocation fails,','line_number':210,'multiline':False]
['text':'/ the program dies.','line_number':211,'multiline':False]
['text':'/','line_number':212,'multiline':False]
['text':'/ @see {xmalloc}','line_number':213,'multiline':False]
['text':'/ @param data Pointer to the data that will be copied','line_number':214,'multiline':False]
['text':'/ @param len number of bytes that will be copied','line_number':215,'multiline':False]
['text':'/ A version of strchr() that returns a pointer to the terminating NUL if it','line_number':235,'multiline':False]
['text':'/ doesn't find `c`.','line_number':236,'multiline':False]
['text':'/','line_number':237,'multiline':False]
['text':'/ @param str The string to search.','line_number':238,'multiline':False]
['text':'/ @param c   The char to look for.','line_number':239,'multiline':False]
['text':'/ @returns a pointer to the first instance of `c`, or to the NUL terminator','line_number':240,'multiline':False]
['text':'/          if not found.','line_number':241,'multiline':False]
['text':'/ A version of memchr() that returns a pointer one past the end','line_number':249,'multiline':False]
['text':'/ if it doesn't find `c`.','line_number':250,'multiline':False]
['text':'/','line_number':251,'multiline':False]
['text':'/ @param addr The address of the memory object.','line_number':252,'multiline':False]
['text':'/ @param c    The char to look for.','line_number':253,'multiline':False]
['text':'/ @param size The size of the memory object.','line_number':254,'multiline':False]
['text':'/ @returns a pointer to the first instance of `c`, or one past the end if not','line_number':255,'multiline':False]
['text':'/          found.','line_number':256,'multiline':False]
['text':'/ Replaces every instance of `c` with `x`.','line_number':264,'multiline':False]
['text':'/','line_number':265,'multiline':False]
['text':'/ @warning Will read past `str + strlen(str)` if `c == NUL`.','line_number':266,'multiline':False]
['text':'/','line_number':267,'multiline':False]
['text':'/ @param str A NUL-terminated string.','line_number':268,'multiline':False]
['text':'/ @param c   The unwanted byte.','line_number':269,'multiline':False]
['text':'/ @param x   The replacement.','line_number':270,'multiline':False]
['text':'/ Replaces every instance of `c` with `x`.','line_number':280,'multiline':False]
['text':'/','line_number':281,'multiline':False]
['text':'/ @param data An object in memory. May contain NULs.','line_number':282,'multiline':False]
['text':'/ @param c    The unwanted byte.','line_number':283,'multiline':False]
['text':'/ @param x    The replacement.','line_number':284,'multiline':False]
['text':'/ @param len  The length of data.','line_number':285,'multiline':False]
['text':'/ Counts the number of occurrences of `c` in `str`.','line_number':295,'multiline':False]
['text':'/','line_number':296,'multiline':False]
['text':'/ @warning Unsafe if `c == NUL`.','line_number':297,'multiline':False]
['text':'/','line_number':298,'multiline':False]
['text':'/ @param str Pointer to the string to search.','line_number':299,'multiline':False]
['text':'/ @param c   The byte to search for.','line_number':300,'multiline':False]
['text':'/ @returns the number of occurrences of `c` in `str`.','line_number':301,'multiline':False]
['text':' Skip the instance of c.','line_number':309,'multiline':False]
['text':'/ Counts the number of occurrences of byte `c` in `data[len]`.','line_number':314,'multiline':False]
['text':'/','line_number':315,'multiline':False]
['text':'/ @param data Pointer to the data to search.','line_number':316,'multiline':False]
['text':'/ @param c    The byte to search for.','line_number':317,'multiline':False]
['text':'/ @param len  The length of `data`.','line_number':318,'multiline':False]
['text':'/ @returns the number of occurrences of `c` in `data[len]`.','line_number':319,'multiline':False]
['text':' Skip the instance of c.','line_number':327,'multiline':False]
['text':'/ Copies the string pointed to by src (including the terminating NUL','line_number':332,'multiline':False]
['text':'/ character) into the array pointed to by dst.','line_number':333,'multiline':False]
['text':'/','line_number':334,'multiline':False]
['text':'/ @returns pointer to the terminating NUL char copied into the dst buffer.','line_number':335,'multiline':False]
['text':'/          This is the only difference with strcpy(), which returns dst.','line_number':336,'multiline':False]
['text':'/','line_number':337,'multiline':False]
['text':'/ WARNING: If copying takes place between objects that overlap, the behavior','line_number':338,'multiline':False]
['text':'/ is undefined.','line_number':339,'multiline':False]
['text':'/','line_number':340,'multiline':False]
['text':'/ Nvim version of POSIX 2008 stpcpy(3). We do not require POSIX 2008, so','line_number':341,'multiline':False]
['text':'/ implement our own version.','line_number':342,'multiline':False]
['text':'/','line_number':343,'multiline':False]
['text':'/ @param dst','line_number':344,'multiline':False]
['text':'/ @param src','line_number':345,'multiline':False]
['text':'/ Copies not more than n bytes (bytes that follow a NUL character are not','line_number':353,'multiline':False]
['text':'/ copied) from the array pointed to by src to the array pointed to by dst.','line_number':354,'multiline':False]
['text':'/','line_number':355,'multiline':False]
['text':'/ If a NUL character is written to the destination, xstpncpy() returns the','line_number':356,'multiline':False]
['text':'/ address of the first such NUL character. Otherwise, it shall return','line_number':357,'multiline':False]
['text':'/ &dst[maxlen].','line_number':358,'multiline':False]
['text':'/','line_number':359,'multiline':False]
['text':'/ WARNING: If copying takes place between objects that overlap, the behavior','line_number':360,'multiline':False]
['text':'/ is undefined.','line_number':361,'multiline':False]
['text':'/','line_number':362,'multiline':False]
['text':'/ WARNING: xstpncpy will ALWAYS write maxlen bytes. If src is shorter than','line_number':363,'multiline':False]
['text':'/ maxlen, zeroes will be written to the remaining bytes.','line_number':364,'multiline':False]
['text':'/','line_number':365,'multiline':False]
['text':'/ @param dst','line_number':366,'multiline':False]
['text':'/ @param src','line_number':367,'multiline':False]
['text':'/ @param maxlen','line_number':368,'multiline':False]
['text':'/ xstrlcpy - Copy a NUL-terminated string into a sized buffer','line_number':384,'multiline':False]
['text':'/','line_number':385,'multiline':False]
['text':'/ Compatible with *BSD strlcpy: the result is always a valid NUL-terminated','line_number':386,'multiline':False]
['text':'/ string that fits in the buffer (unless, of course, the buffer size is','line_number':387,'multiline':False]
['text':'/ zero). It does not pad out the result like strncpy() does.','line_number':388,'multiline':False]
['text':'/','line_number':389,'multiline':False]
['text':'/ @param[out]  dst  Buffer to store the result.','line_number':390,'multiline':False]
['text':'/ @param[in]  src  String to be copied.','line_number':391,'multiline':False]
['text':'/ @param[in]  dsize  Size of `dst`.','line_number':392,'multiline':False]
['text':'/','line_number':393,'multiline':False]
['text':'/ @return Length of `src`. May be greater than `dsize - 1`, which would mean','line_number':394,'multiline':False]
['text':'/         that string was truncated.','line_number':395,'multiline':False]
['text':' Does not include NUL.','line_number':407,'multiline':False]
['text':'/ Appends `src` to string `dst` of size `dsize` (unlike strncat, dsize is the','line_number':410,'multiline':False]
['text':'/ full size of `dst`, not space left).  At most dsize-1 characters','line_number':411,'multiline':False]
['text':'/ will be copied.  Always NUL terminates. `src` and `dst` may overlap.','line_number':412,'multiline':False]
['text':'/','line_number':413,'multiline':False]
['text':'/ @see vim_strcat from Vim.','line_number':414,'multiline':False]
['text':'/ @see strlcat from OpenBSD.','line_number':415,'multiline':False]
['text':'/','line_number':416,'multiline':False]
['text':'/ @param[in,out]  dst  Buffer to be appended-to. Must have a NUL byte.','line_number':417,'multiline':False]
['text':'/ @param[in]  src  String to put at the end of `dst`.','line_number':418,'multiline':False]
['text':'/ @param[in]  dsize  Size of `dst` including NUL byte. Must be greater than 0.','line_number':419,'multiline':False]
['text':'/','line_number':420,'multiline':False]
['text':'/ @return Length of the resulting string as if destination size was #SIZE_MAX.','line_number':421,'multiline':False]
['text':'/         May be greater than `dsize - 1`, which would mean that string was','line_number':422,'multiline':False]
['text':'/         truncated.','line_number':423,'multiline':False]
['text':' Does not include NUL.','line_number':439,'multiline':False]
['text':'/ strdup() wrapper','line_number':442,'multiline':False]
['text':'/','line_number':443,'multiline':False]
['text':'/ @see {xmalloc}','line_number':444,'multiline':False]
['text':'/ @param str 0-terminated string that will be copied','line_number':445,'multiline':False]
['text':'/ @return pointer to a copy of the string','line_number':446,'multiline':False]
['text':'/ strdup() wrapper','line_number':454,'multiline':False]
['text':'/','line_number':455,'multiline':False]
['text':'/ Unlike xstrdup() allocates a new empty string if it receives NULL.','line_number':456,'multiline':False]
['text':'/ A version of memchr that starts the search at `src + len`.','line_number':466,'multiline':False]
['text':'/','line_number':467,'multiline':False]
['text':'/ Based on glibc's memrchr.','line_number':468,'multiline':False]
['text':'/','line_number':469,'multiline':False]
['text':'/ @param src The source memory object.','line_number':470,'multiline':False]
['text':'/ @param c   The byte to search for.','line_number':471,'multiline':False]
['text':'/ @param len The length of the memory object.','line_number':472,'multiline':False]
['text':'/ @returns a pointer to the found byte in src[len], or NULL.','line_number':473,'multiline':False]
['text':'/ strndup() wrapper','line_number':485,'multiline':False]
['text':'/','line_number':486,'multiline':False]
['text':'/ @see {xmalloc}','line_number':487,'multiline':False]
['text':'/ @param str 0-terminated string that will be copied','line_number':488,'multiline':False]
['text':'/ @return pointer to a copy of the string','line_number':489,'multiline':False]
['text':'/ Duplicates a chunk of memory using xmalloc','line_number':498,'multiline':False]
['text':'/','line_number':499,'multiline':False]
['text':'/ @see {xmalloc}','line_number':500,'multiline':False]
['text':'/ @param data pointer to the chunk','line_number':501,'multiline':False]
['text':'/ @param len size of the chunk','line_number':502,'multiline':False]
['text':'/ @return a pointer','line_number':503,'multiline':False]
['text':'/ Returns true if strings `a` and `b` are equal. Arguments may be NULL.','line_number':511,'multiline':False]
['text':' Avoid repeating the error message many times (they take 1 second each).','line_number':518,'multiline':False]
['text':' Did_outofmem_msg is reset when a character is read.','line_number':519,'multiline':False]
['text':' Don't hide this message','line_number':526,'multiline':False]
['text':' Must come first to avoid coming back here when printing the error','line_number':529,'multiline':False]
['text':' message fails, e.g. when setting v:errmsg.','line_number':530,'multiline':False]
['text':'/ Writes time_t to "buf[8]".','line_number':536,'multiline':False]
['text':' time_t can be up to 8 bytes in size, more than uintmax_t in 32 bits','line_number':539,'multiline':False]
['text':' systems, thus we can't use put_bytes() here.','line_number':540,'multiline':False]
['text':'/ Finish the allocations in an arena.','line_number':562,'multiline':False]
['text':'/','line_number':563,'multiline':False]
['text':'/ This does not immediately free the memory, but leaves existing allocated','line_number':564,'multiline':False]
['text':'/ objects valid, and returns an opaque ArenaMem handle, which can be used to','line_number':565,'multiline':False]
['text':'/ free the allocations using `arena_mem_free`, when the objects allocated','line_number':566,'multiline':False]
['text':'/ from the arena are not needed anymore.','line_number':567,'multiline':False]
['text':'/ @param arena if NULL, do a global allocation. caller must then free the value!','line_number':599,'multiline':False]
['text':'/ @param size if zero, will still return a non-null pointer, but not a usable or unique one','line_number':600,'multiline':False]
['text':' if allocation is too big, allocate a large block with the requested','line_number':612,'multiline':False]
['text':' size, but still with block pointer head. We do this even for','line_number':613,'multiline':False]
['text':' arena->size / 2, as there likely is space left for the next','line_number':614,'multiline':False]
['text':' small allocation in the current block.','line_number':615,'multiline':False]
['text':' to simplify free-list management, arena->cur_blk must','line_number':621,'multiline':False]
['text':' always be a normal, ARENA_BLOCK_SIZE sized, block','line_number':622,'multiline':False]
['text':' resets arena->pos','line_number':629,'multiline':False]
['text':' peel of the first block, as it is guaranteed to be ARENA_BLOCK_SIZE,','line_number':642,'multiline':False]
['text':' not a custom fix_blk','line_number':643,'multiline':False]
['text':' Free everything that we allocated.','line_number':692,'multiline':False]
['text':' Can be used to detect memory leaks, e.g., with ccmalloc.','line_number':693,'multiline':False]
['text':' NOTE: This is tricky!  Things are freed that functions depend on.  Don't be','line_number':694,'multiline':False]
['text':' surprised if Vim crashes...','line_number':695,'multiline':False]
['text':' Some things can't be freed, esp. things local to a library function.','line_number':696,'multiline':False]
['text':' When we cause a crash here it is caught and Vim tries to exit cleanly.','line_number':701,'multiline':False]
['text':' Don't try freeing everything again.','line_number':702,'multiline':False]
['text':' Don't want to trigger autocommands from here on.','line_number':707,'multiline':False]
['text':' Close all tabs and windows.  Reset 'equalalways' to avoid redraws.','line_number':710,'multiline':False]
['text':' to keep things simple, don't perform this','line_number':717,'multiline':False]
['text':' ritual inside a float','line_number':718,'multiline':False]
['text':' Free all spell info.','line_number':723,'multiline':False]
['text':' Clear user commands (before deleting buffers).','line_number':726,'multiline':False]
['text':' Clear menus.','line_number':729,'multiline':False]
['text':' Clear mappings, abbreviations, breakpoints.','line_number':734,'multiline':False]
['text':' NB: curbuf not used with local=false arg','line_number':735,'multiline':False]
['text':' Obviously named calls.','line_number':745,'multiline':False]
['text':' free any scrollback text','line_number':763,'multiline':False]
['text':' Free some global vars.','line_number':765,'multiline':False]
['text':' Clear cmdline history.','line_number':770,'multiline':False]
['text':' Close all script inputs.','line_number':776,'multiline':False]
['text':' Destroy all windows.  Must come before freeing buffers.','line_number':779,'multiline':False]
['text':' Free all option values.  Must come after closing windows.','line_number':782,'multiline':False]
['text':' Free all buffers.  Reset 'autochdir' to avoid accessing things that','line_number':785,'multiline':False]
['text':' were freed already.','line_number':786,'multiline':False]
['text':' Must be after eval_clear to avoid it trying to access b:changedtick after','line_number':787,'multiline':False]
['text':' freeing it.','line_number':788,'multiline':False]
['text':' Since options (in addition to other stuff) have been freed above we need to ensure no','line_number':795,'multiline':False]
['text':' callbacks are called, so free them before closing the buffer.','line_number':796,'multiline':False]
['text':' Didn't work, try next one.','line_number':800,'multiline':False]
['text':' Clear registers.','line_number':804,'multiline':False]
['text':' highlight info','line_number':809,'multiline':False]
['text':' message history','line_number':817,'multiline':False]
['text':' free screenlines (can't display anything now!)','line_number':833,'multiline':False]
['text':' should be last, in case earlier free functions deallocates arenas','line_number':857,'multiline':False]
