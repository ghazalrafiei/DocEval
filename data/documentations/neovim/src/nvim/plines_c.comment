['text':' plines.c: calculate the vertical and horizontal size of text in a window','line_number':1,'multiline':False]
['text':'/ Functions calculating horizontal size of text, when displayed in a window.','line_number':32,'multiline':False]
['text':'/ Return the number of characters 'c' will take on the screen, taking','line_number':34,'multiline':False]
['text':'/ into account the size of a tab.','line_number':35,'multiline':False]
['text':'/ Also see getvcol()','line_number':36,'multiline':False]
['text':'/','line_number':37,'multiline':False]
['text':'/ @param p','line_number':38,'multiline':False]
['text':'/ @param col','line_number':39,'multiline':False]
['text':'/','line_number':40,'multiline':False]
['text':'/ @return Number of characters.','line_number':41,'multiline':False]
['text':'/ Return the number of characters the string 's' will take on the screen,','line_number':51,'multiline':False]
['text':'/ taking into account the size of a tab.','line_number':52,'multiline':False]
['text':'/','line_number':53,'multiline':False]
['text':'/ @param s','line_number':54,'multiline':False]
['text':'/','line_number':55,'multiline':False]
['text':'/ @return Number of characters the string will take on the screen.','line_number':56,'multiline':False]
['text':'/ Like linetabsize_str(), but "s" starts at column "startcol".','line_number':62,'multiline':False]
['text':'/','line_number':63,'multiline':False]
['text':'/ @param startcol','line_number':64,'multiline':False]
['text':'/ @param s','line_number':65,'multiline':False]
['text':'/','line_number':66,'multiline':False]
['text':'/ @return Number of characters the string will take on the screen.','line_number':67,'multiline':False]
['text':'/ Like linetabsize_str(), but for a given window instead of the current one.','line_number':79,'multiline':False]
['text':'/','line_number':80,'multiline':False]
['text':'/ @param wp','line_number':81,'multiline':False]
['text':'/ @param line','line_number':82,'multiline':False]
['text':'/ @param len','line_number':83,'multiline':False]
['text':'/','line_number':84,'multiline':False]
['text':'/ @return Number of characters the string will take on the screen.','line_number':85,'multiline':False]
['text':'/ Return the number of cells line "lnum" of window "wp" will take on the','line_number':95,'multiline':False]
['text':'/ screen, taking into account the size of a tab and inline virtual text.','line_number':96,'multiline':False]
['text':' check for inline virtual text after the end of the line','line_number':108,'multiline':False]
['text':'/ Prepare the structure passed to chartabsize functions.','line_number':115,'multiline':False]
['text':'/','line_number':116,'multiline':False]
['text':'/ "line" is the start of the line, "ptr" is the first relevant character.','line_number':117,'multiline':False]
['text':'/ When "lnum" is zero do not use inline virtual text.','line_number':118,'multiline':False]
['text':'/ Free any allocated item in "cts".','line_number':141,'multiline':False]
['text':'/ like win_chartabsize(), but also check for line breaks on the screen','line_number':146,'multiline':False]
['text':'/','line_number':147,'multiline':False]
['text':'/ @param cts','line_number':148,'multiline':False]
['text':'/','line_number':149,'multiline':False]
['text':'/ @return The number of characters taken up on the screen.','line_number':150,'multiline':False]
['text':'/ Call lbr_chartabsize() and advance the pointer.','line_number':163,'multiline':False]
['text':'/','line_number':164,'multiline':False]
['text':'/ @param cts','line_number':165,'multiline':False]
['text':'/','line_number':166,'multiline':False]
['text':'/ @return The number of characters take up on the screen.','line_number':167,'multiline':False]
['text':'/ Get the number of characters taken up on the screen indicated by "cts".','line_number':175,'multiline':False]
['text':'/ "cts->cts_cur_text_width_left" and "cts->cts_cur_text_width_right" are set','line_number':176,'multiline':False]
['text':'/ to the extra size for inline virtual text.','line_number':177,'multiline':False]
['text':'/ This function is used very often, keep it fast!!!!','line_number':178,'multiline':False]
['text':'/','line_number':179,'multiline':False]
['text':'/ If "headp" not NULL, set "*headp" to the size of 'showbreak'/'breakindent'','line_number':180,'multiline':False]
['text':'/ included in the return value.','line_number':181,'multiline':False]
['text':'/ When "cts->cts_max_head_vcol" is positive, only count in "*headp" the size','line_number':182,'multiline':False]
['text':'/ of 'showbreak'/'breakindent' before "cts->cts_max_head_vcol".','line_number':183,'multiline':False]
['text':'/ When "cts->cts_max_head_vcol" is negative, only count in "*headp" the size','line_number':184,'multiline':False]
['text':'/ of 'showbreak'/'breakindent' before where cursor should be placed.','line_number':185,'multiline':False]
['text':'/','line_number':186,'multiline':False]
['text':'/ Warning: "*headp" may not be set if it's 0, init to 0 before calling.','line_number':187,'multiline':False]
['text':' start of the line','line_number':191,'multiline':False]
['text':' No 'linebreak', 'showbreak' and 'breakindent': return quickly.','line_number':199,'multiline':False]
['text':' First get normal size, without 'linebreak' or inline virtual text','line_number':210,'multiline':False]
['text':' NUL is not displayed','line_number':213,'multiline':False]
['text':' tab size changes because of the inserted text','line_number':237,'multiline':False]
['text':' Count the ">" in the last column.','line_number':252,'multiline':False]
['text':' May have to add something for 'breakindent' and/or 'showbreak'','line_number':257,'multiline':False]
['text':' string at the start of a screen line.','line_number':258,'multiline':False]
['text':' When "size" is 0, no new screen line is started.','line_number':261,'multiline':False]
['text':' cells taken by 'showbreak'/'breakindent' before current char','line_number':269,'multiline':False]
['text':' cells taken by 'showbreak'/'breakindent' halfway current char','line_number':297,'multiline':False]
['text':' Calculate effective window width.','line_number':306,'multiline':False]
['text':' Divide "size - prev_rem" by "width", rounding up.','line_number':313,'multiline':False]
['text':' start from where to consider linebreak','line_number':342,'multiline':False]
['text':' If 'linebreak' set check at a blank before a non-blank if the line','line_number':343,'multiline':False]
['text':' needs a break here','line_number':344,'multiline':False]
['text':' Count all characters from first non-blank after a blank up to next','line_number':357,'multiline':False]
['text':' non-blank after a blank.','line_number':358,'multiline':False]
['text':' doesn't fit','line_number':381,'multiline':False]
['text':'/ Like win_lbr_chartabsize(), except that we know 'linebreak' is off and','line_number':391,'multiline':False]
['text':'/ 'wrap' is on.  This means we need to check for a double-byte character that','line_number':392,'multiline':False]
['text':'/ doesn't fit at the end of the screen line.','line_number':393,'multiline':False]
['text':'/','line_number':394,'multiline':False]
['text':'/ @param cts','line_number':395,'multiline':False]
['text':'/ @param headp','line_number':396,'multiline':False]
['text':'/','line_number':397,'multiline':False]
['text':'/ @return The number of characters take up on the screen.','line_number':398,'multiline':False]
['text':' Add one cell for a double-width character in the last column of the','line_number':412,'multiline':False]
['text':' window, displayed with a ">".','line_number':413,'multiline':False]
['text':'/ Check that virtual column "vcol" is in the rightmost column of window "wp".','line_number':423,'multiline':False]
['text':'/','line_number':424,'multiline':False]
['text':'/ @param  wp    window','line_number':425,'multiline':False]
['text':'/ @param  vcol  column number','line_number':426,'multiline':False]
['text':' there is no border','line_number':431,'multiline':False]
['text':' width of first line (after line number)','line_number':434,'multiline':False]
['text':' width of further lines','line_number':443,'multiline':False]
['text':'/ Get how many virtual columns inline virtual text should offset the cursor.','line_number':451,'multiline':False]
['text':'/','line_number':452,'multiline':False]
['text':'/ @param cts     should contain information stored by win_lbr_chartabsize()','line_number':453,'multiline':False]
['text':'/                about widths of left and right gravity virtual text','line_number':454,'multiline':False]
['text':'/ @param on_NUL  whether this is the end of the line','line_number':455,'multiline':False]
['text':'/ Get virtual column number of pos.','line_number':468,'multiline':False]
['text':'/  start: on the first position of this character (TAB, ctrl)','line_number':469,'multiline':False]
['text':'/ cursor: where the cursor is on this character (first char, except for TAB)','line_number':470,'multiline':False]
['text':'/    end: on the last position of this character (TAB, ctrl)','line_number':471,'multiline':False]
['text':'/','line_number':472,'multiline':False]
['text':'/ This is used very often, keep it fast!','line_number':473,'multiline':False]
['text':'/','line_number':474,'multiline':False]
['text':'/ @param wp','line_number':475,'multiline':False]
['text':'/ @param pos','line_number':476,'multiline':False]
['text':'/ @param start','line_number':477,'multiline':False]
['text':'/ @param cursor','line_number':478,'multiline':False]
['text':'/ @param end','line_number':479,'multiline':False]
['text':' points to current char','line_number':482,'multiline':False]
['text':' points to char at pos->col','line_number':483,'multiline':False]
['text':' start of the line','line_number':490,'multiline':False]
['text':' continue until the NUL','line_number':493,'multiline':False]
['text':' In a few cases the position can be beyond the end of the line.','line_number':496,'multiline':False]
['text':' This function is used very often, do some speed optimizations.','line_number':512,'multiline':False]
['text':' When 'list', 'linebreak', 'showbreak' and 'breakindent' are not set','line_number':513,'multiline':False]
['text':' and there are no virtual text use a simple loop.','line_number':514,'multiline':False]
['text':' Also use this when 'list' is set but tabs take their normal size.','line_number':515,'multiline':False]
['text':' make sure we don't go past the end of the line','line_number':525,'multiline':False]
['text':' NUL at end of line only takes one column','line_number':527,'multiline':False]
['text':' A tab gets expanded, depending on the current column','line_number':532,'multiline':False]
['text':' For utf-8, if the byte is >= 0x80, need to look at','line_number':536,'multiline':False]
['text':' further bytes to find the cell width.','line_number':537,'multiline':False]
['text':' If a double-cell char doesn't fit at the end of a line','line_number':544,'multiline':False]
['text':' it wraps to the next line, it's like this char is three','line_number':545,'multiline':False]
['text':' cells wide.','line_number':546,'multiline':False]
['text':' character at pos->col','line_number':557,'multiline':False]
['text':' A tab gets expanded, depending on the current column','line_number':566,'multiline':False]
['text':' Other things also take up space.','line_number':567,'multiline':False]
['text':' make sure we don't go past the end of the line','line_number':571,'multiline':False]
['text':' NUL at end of line only takes one column, unless there is virtual text','line_number':573,'multiline':False]
['text':' character at pos->col','line_number':580,'multiline':False]
['text':' cursor at end','line_number':606,'multiline':False]
['text':' cursor at start','line_number':610,'multiline':False]
['text':'/ Get virtual cursor column in the current window, pretending 'list' is off.','line_number':616,'multiline':False]
['text':'/','line_number':617,'multiline':False]
['text':'/ @param posp','line_number':618,'multiline':False]
['text':'/','line_number':619,'multiline':False]
['text':'/ @retujrn The virtual cursor column.','line_number':620,'multiline':False]
['text':'/ Get virtual column in virtual mode.','line_number':636,'multiline':False]
['text':'/','line_number':637,'multiline':False]
['text':'/ @param wp','line_number':638,'multiline':False]
['text':'/ @param pos','line_number':639,'multiline':False]
['text':'/ @param start','line_number':640,'multiline':False]
['text':'/ @param cursor','line_number':641,'multiline':False]
['text':'/ @param end','line_number':642,'multiline':False]
['text':' For virtual mode, only want one value','line_number':648,'multiline':False]
['text':' Cannot put the cursor on part of a wide character.','line_number':654,'multiline':False]
['text':' past end of line','line_number':662,'multiline':False]
['text':'/ Get the leftmost and rightmost virtual column of pos1 and pos2.','line_number':687,'multiline':False]
['text':'/ Used for Visual block mode.','line_number':688,'multiline':False]
['text':'/','line_number':689,'multiline':False]
['text':'/ @param wp','line_number':690,'multiline':False]
['text':'/ @param pos1','line_number':691,'multiline':False]
['text':'/ @param pos2','line_number':692,'multiline':False]
['text':'/ @param left','line_number':693,'multiline':False]
['text':'/ @param right','line_number':694,'multiline':False]
['text':'/ Functions calculating vertical size of text when displayed inside a window.','line_number':727,'multiline':False]
['text':'/ Calls horizontal size functions defined above.','line_number':728,'multiline':False]
['text':'/ Check if there may be filler lines anywhere in window "wp".','line_number':730,'multiline':False]
['text':'/ Return the number of filler lines above "lnum".','line_number':736,'multiline':False]
['text':'/','line_number':737,'multiline':False]
['text':'/ @param wp','line_number':738,'multiline':False]
['text':'/ @param lnum','line_number':739,'multiline':False]
['text':'/','line_number':740,'multiline':False]
['text':'/ @return Number of filler lines above lnum','line_number':741,'multiline':False]
['text':' be quick when there are no filler lines','line_number':746,'multiline':False]
['text':'/ Return the number of window lines occupied by buffer line "lnum".','line_number':757,'multiline':False]
['text':'/ Includes any filler lines.','line_number':758,'multiline':False]
['text':'/','line_number':759,'multiline':False]
['text':'/ @param limit_winheight  when true limit to window height','line_number':760,'multiline':False]
['text':' Check for filler lines above this buffer line.','line_number':763,'multiline':False]
['text':'/ Return the number of window lines occupied by buffer line "lnum".','line_number':767,'multiline':False]
['text':'/ Does not include filler lines.','line_number':768,'multiline':False]
['text':'/','line_number':769,'multiline':False]
['text':'/ @param limit_winheight  when true limit to window height','line_number':770,'multiline':False]
['text':' Folded lines are handled just like an empty line.','line_number':781,'multiline':False]
['text':'/ Get number of window lines physical line "lnum" will occupy in window "wp".','line_number':793,'multiline':False]
['text':'/ Does not care about folding, 'wrap' or filler lines.','line_number':794,'multiline':False]
['text':' be quick for an empty line','line_number':801,'multiline':False]
['text':' If list mode is on, then the '$' at the end of the line may take up one','line_number':807,'multiline':False]
['text':' extra column.','line_number':808,'multiline':False]
['text':' Add column offset for 'number', 'relativenumber' and 'foldcolumn'.','line_number':813,'multiline':False]
['text':' bigger than the number of screen lines','line_number':816,'multiline':False]
['text':'/ Like plines_win(), but only reports the number of physical screen lines','line_number':827,'multiline':False]
['text':'/ used from the start of the line to the given column number.','line_number':828,'multiline':False]
['text':' Check for filler lines above this buffer line.','line_number':831,'multiline':False]
['text':' If *cts.cts_ptr is a TAB, and the TAB is not displayed as ^I, and we're not','line_number':853,'multiline':False]
['text':' in MODE_INSERT state, then col must be adjusted so that it represents the','line_number':854,'multiline':False]
['text':' last screen position of the TAB.  This only fixes an error when the TAB','line_number':855,'multiline':False]
['text':' wraps from one screen line to the next (when 'columns' is not a multiple','line_number':856,'multiline':False]
['text':' of 'ts') -- webb.','line_number':857,'multiline':False]
['text':' Add column offset for 'number', 'relativenumber', 'foldcolumn', etc.','line_number':865,'multiline':False]
['text':'/ Get the number of screen lines buffer line "lnum" will take in window "wp".','line_number':878,'multiline':False]
['text':'/ This takes care of both folds and topfill.','line_number':879,'multiline':False]
['text':'/','line_number':880,'multiline':False]
['text':'/ XXX: Because of topfill, this only makes sense when lnum >= wp->w_topline.','line_number':881,'multiline':False]
['text':'/','line_number':882,'multiline':False]
['text':'/ @param[in]  wp               window the line is in','line_number':883,'multiline':False]
['text':'/ @param[in]  lnum             line number','line_number':884,'multiline':False]
['text':'/ @param[out] nextp            if not NULL, the line after a fold','line_number':885,'multiline':False]
['text':'/ @param[out] foldedp          if not NULL, whether lnum is on a fold','line_number':886,'multiline':False]
['text':'/ @param[in]  cache            whether to use the window's cache for folds','line_number':887,'multiline':False]
['text':'/ @param[in]  limit_winheight  when true limit to window height','line_number':888,'multiline':False]
['text':'/','line_number':889,'multiline':False]
['text':'/ @return the total number of screen lines','line_number':890,'multiline':False]
['text':'/ Get the number of screen lines a range of buffer lines will take in window "wp".','line_number':902,'multiline':False]
['text':'/ This takes care of both folds and topfill.','line_number':903,'multiline':False]
['text':'/','line_number':904,'multiline':False]
['text':'/ XXX: Because of topfill, this only makes sense when first >= wp->w_topline.','line_number':905,'multiline':False]
['text':'/','line_number':906,'multiline':False]
['text':'/ @param first            first line number','line_number':907,'multiline':False]
['text':'/ @param last             last line number','line_number':908,'multiline':False]
['text':'/ @param limit_winheight  when true limit each line to window height','line_number':909,'multiline':False]
['text':'/','line_number':910,'multiline':False]
['text':'/ @see win_text_height','line_number':911,'multiline':False]
['text':'/ Get the number of screen lines a range of text will take in window "wp".','line_number':924,'multiline':False]
['text':'/','line_number':925,'multiline':False]
['text':'/ @param[in] start_lnum  Starting line number, 1-based inclusive.','line_number':926,'multiline':False]
['text':'/ @param[in] start_vcol  >= 0: Starting virtual column index on "start_lnum",','line_number':927,'multiline':False]
['text':'/                              0-based inclusive, rounded down to full screen lines.','line_number':928,'multiline':False]
['text':'/                        < 0:  Count a full "start_lnum", including filler lines above.','line_number':929,'multiline':False]
['text':'/ @param[in] end_lnum    Ending line number, 1-based inclusive.','line_number':930,'multiline':False]
['text':'/ @param[in] end_vcol    >= 0: Ending virtual column index on "end_lnum",','line_number':931,'multiline':False]
['text':'/                              0-based exclusive, rounded up to full screen lines.','line_number':932,'multiline':False]
['text':'/                        < 0:  Count a full "end_lnum", not including filler lines below.','line_number':933,'multiline':False]
['text':'/ @param[out] fill       If not NULL, set to the number of filler lines in the range.','line_number':934,'multiline':False]
