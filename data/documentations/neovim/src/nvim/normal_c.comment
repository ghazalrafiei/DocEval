['text':'','line_number':1,'multiline':False]
['text':' normal.c:    Contains the main routine for processing characters in command','line_number':2,'multiline':False]
['text':'              mode.  Communicates closely with the code in ops.c to handle','line_number':3,'multiline':False]
['text':'              the operators.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' `got_int` was true','line_number':84,'multiline':False]
['text':' command-line window normal mode','line_number':85,'multiline':False]
['text':' true if the normal mode was pushed from','line_number':86,'multiline':False]
['text':' ex mode(:global or :visual for example)','line_number':87,'multiline':False]
['text':' top-level normal mode','line_number':88,'multiline':False]
['text':' operator arguments','line_number':89,'multiline':False]
['text':' command arguments','line_number':90,'multiline':False]
['text':' saved Visual mode','line_number':99,'multiline':False]
['text':' nv_*(): functions called to handle Normal and Visual mode commands.','line_number':116,'multiline':False]
['text':' n_*(): functions called to handle Normal mode commands.','line_number':117,'multiline':False]
['text':' v_*(): functions called to handle Visual mode commands.','line_number':118,'multiline':False]
['text':'/ Function to be called for a Normal or Visual mode command.','line_number':122,'multiline':False]
['text':'/ The argument is a cmdarg_T.','line_number':123,'multiline':False]
['text':' Values for cmd_flags.','line_number':126,'multiline':False]
['text':' may need to get a second char','line_number':127,'multiline':False]
['text':' get second char when no operator pending','line_number':128,'multiline':False]
['text':' always get a second char','line_number':129,'multiline':False]
['text':' second char needs language adjustment','line_number':130,'multiline':False]
['text':' may start selection','line_number':132,'multiline':False]
['text':' may start selection with shift modifier','line_number':133,'multiline':False]
['text':' may stop selection without shift modif.','line_number':134,'multiline':False]
['text':' 'rightleft' modifies command','line_number':135,'multiline':False]
['text':' don't clear regname','line_number':136,'multiline':False]
['text':' not allowed in command-line window','line_number':137,'multiline':False]
['text':' Generally speaking, every Normal mode command should either clear any','line_number':139,'multiline':False]
['text':' pending operator (with *clearop*()), or set the motion type variable','line_number':140,'multiline':False]
['text':' oap->motion_type.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' When a cursor motion command is made, it is marked as being a character or','line_number':143,'multiline':False]
['text':' line oriented motion.  Then, if an operator is in effect, the operation','line_number':144,'multiline':False]
['text':' becomes character or line oriented accordingly.','line_number':145,'multiline':False]
['text':'/ This table contains one entry for every Normal or Visual mode command.','line_number':147,'multiline':False]
['text':'/ The order doesn't matter, init_normal_cmds() will create a sorted index.','line_number':148,'multiline':False]
['text':'/ It is faster when all keys from zero to '~' are present.','line_number':149,'multiline':False]
['text':'/< (first) command character','line_number':151,'multiline':False]
['text':'/< function for this command','line_number':152,'multiline':False]
['text':'/< NV_ flags','line_number':153,'multiline':False]
['text':'/< value for ca.arg','line_number':154,'multiline':False]
['text':' pound sign','line_number':284,'multiline':False]
['text':' Number of commands in nv_cmds[].','line_number':347,'multiline':False]
['text':' Sorted index of commands in nv_cmds[].','line_number':350,'multiline':False]
['text':' The highest index for which','line_number':353,'multiline':False]
['text':' nv_cmds[idx].cmd_char == nv_cmd_idx[nv_cmds[idx].cmd_char]','line_number':354,'multiline':False]
['text':'/ Compare functions for qsort() below, that checks the command character','line_number':357,'multiline':False]
['text':'/ through the index in nv_cmd_idx[].','line_number':358,'multiline':False]
['text':' The commands are sorted on absolute value.','line_number':361,'multiline':False]
['text':'/ Initialize the nv_cmd_idx[] table.','line_number':373,'multiline':False]
['text':' Fill the index table with a one to one relation.','line_number':378,'multiline':False]
['text':' Sort the commands by the command character.','line_number':383,'multiline':False]
['text':' Find the first entry that can't be indexed by the command character.','line_number':386,'multiline':False]
['text':'/ Search for a command in the commands table.','line_number':396,'multiline':False]
['text':'/','line_number':397,'multiline':False]
['text':'/ @return  -1 for invalid command.','line_number':398,'multiline':False]
['text':' A multi-byte character is never a command.','line_number':401,'multiline':False]
['text':' We use the absolute value of the character.  Special keys have a','line_number':406,'multiline':False]
['text':' negative value, but are sorted on their absolute value.','line_number':407,'multiline':False]
['text':' If the character is in the first part: The character is the index into','line_number':412,'multiline':False]
['text':' nv_cmd_idx[].','line_number':413,'multiline':False]
['text':' Perform a binary search.','line_number':419,'multiline':False]
['text':'/ If currently editing a cmdline or text is locked: beep and give an error','line_number':442,'multiline':False]
['text':'/ message, return true.','line_number':443,'multiline':False]
['text':'/ If text is locked, "curbuf->b_ro_locked" or "allbuf_lock" is set:','line_number':457,'multiline':False]
['text':'/ Give an error message, possibly beep and return true.','line_number':458,'multiline':False]
['text':'/ "oap" may be NULL.','line_number':459,'multiline':False]
['text':'/ Check if an operator was started but not finished yet.','line_number':478,'multiline':False]
['text':'/ Includes typing a count or a register name.','line_number':479,'multiline':False]
['text':'/ Normal state entry point. This is called on:','line_number':490,'multiline':False]
['text':'/','line_number':491,'multiline':False]
['text':'/ - Startup, In this case the function never returns.','line_number':492,'multiline':False]
['text':'/ - The command-line window is opened(`q:`). Returns when `cmdwin_result` != 0.','line_number':493,'multiline':False]
['text':'/ - The :visual command is called from :global in ex mode, `:global/PAT/visual`','line_number':494,'multiline':False]
['text':'/   for example. Returns when re-entering ex mode(because ex mode recursion is','line_number':495,'multiline':False]
['text':'/   not allowed)','line_number':496,'multiline':False]
['text':'/','line_number':497,'multiline':False]
['text':'/ This used to be called main_loop() on main.c','line_number':498,'multiline':False]
['text':' also resets s->ca.retval','line_number':514,'multiline':False]
['text':' Use a count remembered from before entering an operator. After typing "3d"','line_number':517,'multiline':False]
['text':' we return from normal_cmd() and come back here, the "3" is remembered in','line_number':518,'multiline':False]
['text':' "opcount".','line_number':519,'multiline':False]
['text':' If there is an operator pending, then the command we take this time will','line_number':522,'multiline':False]
['text':' terminate it. Finish_op tells us to finish the operation before returning','line_number':523,'multiline':False]
['text':' this time (unless the operation was cancelled).','line_number':524,'multiline':False]
['text':' may show different cursor shape','line_number':528,'multiline':False]
['text':' When not finishing an operator and no register name typed, reset the count.','line_number':532,'multiline':False]
['text':' Restore counts from before receiving K_EVENT.  This means after','line_number':538,'multiline':False]
['text':' typing "3", handling K_EVENT and then typing "2" we get "32", not','line_number':539,'multiline':False]
['text':' "3 * 2".','line_number':540,'multiline':False]
['text':' Set v:count here, when called from main() and not a stuffed command, so','line_number':551,'multiline':False]
['text':' that v:count can be used in an expression mapping when there is no count.','line_number':552,'multiline':False]
['text':' Do set it for redo','line_number':553,'multiline':False]
['text':' when 'keymodel' contains "stopsel" may stop Select/Visual mode','line_number':561,'multiline':False]
['text':' Keys that work different when 'keymodel' contains "startsel"','line_number':569,'multiline':False]
['text':' Just in case','line_number':575,'multiline':False]
['text':' without NV_NCH we never need to check for an additional char','line_number':592,'multiline':False]
['text':' NV_NCH_NOP is set and no operator is pending, get a second char','line_number':594,'multiline':False]
['text':' NV_NCH_ALW is set, always get a second char','line_number':596,'multiline':False]
['text':' 'q' without a pending operator, recording or executing a register,','line_number':598,'multiline':False]
['text':' needs to be followed by a second char, examples:','line_number':599,'multiline':False]
['text':' - qc => record using register c','line_number':600,'multiline':False]
['text':' - q: => open command-line window','line_number':601,'multiline':False]
['text':' 'a' or 'i' after an operator is a text object, examples:','line_number':606,'multiline':False]
['text':' - ciw => change inside word','line_number':607,'multiline':False]
['text':' - da( => delete parenthesis and everything inside.','line_number':608,'multiline':False]
['text':' Also, don't do anything when these keys are received in visual mode','line_number':609,'multiline':False]
['text':' so just get another char.','line_number':610,'multiline':False]
['text':'','line_number':611,'multiline':False]
['text':' TODO(tarruda): Visual state needs to be refactored into a','line_number':612,'multiline':False]
['text':' separate state that "inherits" from normal state.','line_number':613,'multiline':False]
['text':' In Visual mode and with "^O" in Insert mode, a short message will be','line_number':620,'multiline':False]
['text':' overwritten by the mode message.  Wait a bit, until a key is hit.','line_number':621,'multiline':False]
['text':' In Visual mode, it's more important to keep the Visual area updated','line_number':622,'multiline':False]
['text':' than keeping a message (e.g. from a /pat search).','line_number':623,'multiline':False]
['text':' Only do this if the command was typed, not from a mapping.','line_number':624,'multiline':False]
['text':' Don't wait when emsg_silent is non-zero.','line_number':625,'multiline':False]
['text':' Also wait a bit after an error message, e.g. for "^O:".','line_number':626,'multiline':False]
['text':' Don't redraw the screen, it would remove the message.','line_number':627,'multiline':False]
['text':' 'showmode' is set and messages can be printed','line_number':629,'multiline':False]
['text':' must restart insert mode(ctrl+o or ctrl+l) or we just entered visual','line_number':631,'multiline':False]
['text':' mode','line_number':632,'multiline':False]
['text':' command-line must be cleared or redrawn','line_number':636,'multiline':False]
['text':' some message was printed or scrolled','line_number':638,'multiline':False]
['text':' it is fine to remove the current message','line_number':640,'multiline':False]
['text':' the command was the result of direct user input and not a mapping','line_number':642,'multiline':False]
['text':' must restart insert mode, not in visual mode and error message is','line_number':644,'multiline':False]
['text':' being shown','line_number':645,'multiline':False]
['text':' no register was used','line_number':648,'multiline':False]
['text':' Draw the cursor with the right shape here','line_number':663,'multiline':False]
['text':' If need to redraw, and there is a "keep_msg", redraw before the','line_number':668,'multiline':False]
['text':' delay','line_number':669,'multiline':False]
['text':' Showmode() will clear keep_msg, but we want to use it anyway.','line_number':675,'multiline':False]
['text':' First update w_topline.','line_number':676,'multiline':False]
['text':' now reset it, otherwise it's put in the history again','line_number':679,'multiline':False]
['text':' show different cursor shape','line_number':687,'multiline':False]
['text':' wait at least one second','line_number':690,'multiline':False]
['text':' wait up to three seconds','line_number':692,'multiline':False]
['text':' TODO(tarruda): Split into a "normal pending" state that can handle K_EVENT','line_number':699,'multiline':False]
['text':' get character for replace mode','line_number':703,'multiline':False]
['text':' get extra character literally','line_number':704,'multiline':False]
['text':' getting a text character','line_number':705,'multiline':False]
['text':' no mapping for nchar, but allow key codes','line_number':708,'multiline':False]
['text':' Don't generate a CursorHold event here, most commands can't handle','line_number':709,'multiline':False]
['text':' it, e.g., nv_replace(), nv_csearch().','line_number':710,'multiline':False]
['text':' For 'g' get the next character now, so that we can check for','line_number':713,'multiline':False]
['text':' "gr", "g'" and "g`".','line_number':714,'multiline':False]
['text':' need to get a third character','line_number':720,'multiline':False]
['text':' get it literally','line_number':722,'multiline':False]
['text':' get it in replace mode','line_number':724,'multiline':False]
['text':' no third character needed','line_number':727,'multiline':False]
['text':' get it in replace mode','line_number':731,'multiline':False]
['text':' Get a second or third character.','line_number':738,'multiline':False]
['text':' using :lmap mappings','line_number':740,'multiline':False]
['text':' pretend Replace mode','line_number':742,'multiline':False]
['text':' show different cursor shape','line_number':743,'multiline':False]
['text':' Allow mappings defined with ":lmap".','line_number':746,'multiline':False]
['text':' Undo the decrement done above','line_number':760,'multiline':False]
['text':' Typing CTRL-K gets a digraph.','line_number':768,'multiline':False]
['text':' Guessing how to update showcmd here...','line_number':775,'multiline':False]
['text':' adjust chars > 127, except after "tTfFr" commands','line_number':781,'multiline':False]
['text':' When the next character is CTRL-\ a following CTRL-N means the','line_number':785,'multiline':False]
['text':' command is aborted and we go to Normal mode.','line_number':786,'multiline':False]
['text':' There is a busy wait here when typing "f<C-\>" and then','line_number':799,'multiline':False]
['text':' something different from CTRL-N.  Can't be avoided.','line_number':800,'multiline':False]
['text':' When getting a text character and the next character is a','line_number':819,'multiline':False]
['text':' multi-byte character, it could be a composing character.','line_number':820,'multiline':False]
['text':' However, don't wait for it to arrive. Also, do enable mapping,','line_number':821,'multiline':False]
['text':' because if it's put back with vungetc() it's too late to apply','line_number':822,'multiline':False]
['text':' mapping.','line_number':823,'multiline':False]
['text':' it wasn't, put it back','line_number':829,'multiline':False]
['text':' Vim may be in a different mode when the user types the next key,','line_number':838,'multiline':False]
['text':' but when replaying a recording the next key is already in the','line_number':839,'multiline':False]
['text':' typeahead buffer, so record a <Nop> before that to prevent the','line_number':840,'multiline':False]
['text':' vpeekc() above from applying wrong mappings when replaying.','line_number':841,'multiline':False]
['text':' Handle a count before a command and compute ca.count0.','line_number':883,'multiline':False]
['text':' Note that '0' is a command and not the start of a count, but it's','line_number':884,'multiline':False]
['text':' part of a count after other digits.','line_number':885,'multiline':False]
['text':' delete the digit and ~@%','line_number':890,'multiline':False]
['text':' Set v:count here, when called from main() and not a stuffed','line_number':897,'multiline':False]
['text':' command, so that v:count can be used in an expression mapping','line_number':898,'multiline':False]
['text':' right after the count. Do set it for redo.','line_number':899,'multiline':False]
['text':' no mapping for nchar, but keys','line_number':906,'multiline':False]
['text':' don't map zero here','line_number':909,'multiline':False]
['text':' If we got CTRL-W there may be a/another count','line_number':920,'multiline':False]
['text':' remember first count','line_number':923,'multiline':False]
['text':' no mapping for nchar, but keys','line_number':926,'multiline':False]
['text':' get next character','line_number':927,'multiline':False]
['text':' If we didn't start or finish an operator, reset oap->regname, unless we','line_number':944,'multiline':False]
['text':' need it later.','line_number':945,'multiline':False]
['text':' Get the length of mapped chars again after typing a count, second','line_number':953,'multiline':False]
['text':' character or "z333<cr>".','line_number':954,'multiline':False]
['text':' If an operation is pending, handle it.  But not for K_IGNORE or','line_number':959,'multiline':False]
['text':' K_MOUSEMOVE.','line_number':960,'multiline':False]
['text':' Wait for a moment when a message is displayed that will be overwritten','line_number':965,'multiline':False]
['text':' by the mode message.','line_number':966,'multiline':False]
['text':' Finish up after executing a Normal mode command.','line_number':971,'multiline':False]
['text':' Reset finish_op, in case it was set','line_number':982,'multiline':False]
['text':' Redraw the cursor with another shape, if we were in Operator-pending','line_number':986,'multiline':False]
['text':' mode or did a replace command.','line_number':987,'multiline':False]
['text':' may show different cursor shape','line_number':990,'multiline':False]
['text':' check if we moved since setting pcmark','line_number':998,'multiline':False]
['text':' #6203','line_number':1001,'multiline':False]
['text':' may need to update w_leftcol','line_number':1004,'multiline':False]
['text':' may need to update w_leftcol','line_number':1009,'multiline':False]
['text':' May restart edit(), if we got here with CTRL-O in Insert mode (but not','line_number':1013,'multiline':False]
['text':' if still inside a mapping that started in Visual mode).','line_number':1014,'multiline':False]
['text':' May switch from Visual to Select mode after CTRL-O command.','line_number':1015,'multiline':False]
['text':' Save count before an operator for next time','line_number':1038,'multiline':False]
['text':' got CTRL-W command','line_number':1046,'multiline':False]
['text':' If a mapping was started in Visual or Select mode, remember the length','line_number':1052,'multiline':False]
['text':' of the mapping.  This is used below to not return to Insert mode for as','line_number':1053,'multiline':False]
['text':' long as the mapping is being executed.','line_number':1054,'multiline':False]
['text':' In Select mode, typed text replaces the selection.','line_number':1066,'multiline':False]
['text':' Fake a "c"hange command.','line_number':1069,'multiline':False]
['text':' When "restart_edit" is set fake a "d"elete command, Insert mode will restart automatically.','line_number':1070,'multiline':False]
['text':' Insert the typed character in the typeahead buffer, so that it can','line_number':1071,'multiline':False]
['text':' be mapped in Insert mode.  Required for ":lmap" to work.','line_number':1072,'multiline':False]
['text':' When recording and gotchars() was called the character will be','line_number':1075,'multiline':False]
['text':' recorded again, remove the previous recording.','line_number':1076,'multiline':False]
['text':' don't delay going to insert mode','line_number':1086,'multiline':False]
['text':' do go to Insert mode','line_number':1087,'multiline':False]
['text':' Save the count values so that ca.opcount and ca.count0 are exactly','line_number':1095,'multiline':False]
['text':' the same when coming back here after handling K_EVENT.','line_number':1096,'multiline':False]
['text':' If we're in the middle of an operator (including after entering a','line_number':1100,'multiline':False]
['text':' yank buffer with '"') AND we had a count before the operator, then','line_number':1101,'multiline':False]
['text':' that count overrides the current value of ca.count0.','line_number':1102,'multiline':False]
['text':' What this means effectively, is that commands like "3dw" get turned','line_number':1103,'multiline':False]
['text':' into "d3w" which makes things fall into place pretty neatly.','line_number':1104,'multiline':False]
['text':' If you give a count before AND after the operator, they are','line_number':1105,'multiline':False]
['text':' multiplied.','line_number':1106,'multiline':False]
['text':' Always remember the count.  It will be set to zero (on the next call,','line_number':1118,'multiline':False]
['text':' above) when there is no pending operator.','line_number':1119,'multiline':False]
['text':' When called from main(), save the count for use by the "count" built-in','line_number':1120,'multiline':False]
['text':' variable.','line_number':1121,'multiline':False]
['text':' Only set v:count when called from main() and not a stuffed command.','line_number':1125,'multiline':False]
['text':' Do set it for redo.','line_number':1126,'multiline':False]
['text':' Find the command character in the table of commands.','line_number':1131,'multiline':False]
['text':' For CTRL-W we already got nchar when looking for a count.','line_number':1132,'multiline':False]
['text':' Not a known command: beep.','line_number':1143,'multiline':False]
['text':' this command is not allowed now','line_number':1150,'multiline':False]
['text':' In Visual/Select mode, a few keys are handled in a special way.','line_number':1155,'multiline':False]
['text':' Invert horizontal movements and operations.  Only when typed by the','line_number':1163,'multiline':False]
['text':' user directly, not when the result of a mapping or "x" translated','line_number':1164,'multiline':False]
['text':' to "dl".','line_number':1165,'multiline':False]
['text':' Get an additional character if we need one.','line_number':1169,'multiline':False]
['text':' Flush the showcmd characters onto the screen so we can see them while','line_number':1174,'multiline':False]
['text':' the command is being executed.  Only do this when the shown command was','line_number':1175,'multiline':False]
['text':' actually displayed, otherwise this will slow down a lot when executing','line_number':1176,'multiline':False]
['text':' mappings.','line_number':1177,'multiline':False]
['text':' don't scroll screen up for normal command','line_number':1195,'multiline':False]
['text':' remember where the cursor was','line_number':1199,'multiline':False]
['text':' When 'keymodel' contains "startsel" some keys start Select/Visual','line_number':1201,'multiline':False]
['text':' mode.','line_number':1202,'multiline':False]
['text':' Execute the command!','line_number':1216,'multiline':False]
['text':' Call the command function found in the commands table.','line_number':1217,'multiline':False]
['text':' if wait_return still needed call it now','line_number':1236,'multiline':False]
['text':' Reset "got_int" now that we got back to the main loop.  Except when','line_number':1244,'multiline':False]
['text':' inside a ":g/pat/cmd" command, then the "got_int" needs to abort','line_number':1245,'multiline':False]
['text':' the ":g" command.','line_number':1246,'multiline':False]
['text':' For ":g/pat/vi" we reset "got_int" when used once.  When used','line_number':1247,'multiline':False]
['text':' a second time we go back to Ex mode and abort the ":g" command.','line_number':1248,'multiline':False]
['text':' Typed two CTRL-C in a row: go back to ex mode as if "Q" was','line_number':1252,'multiline':False]
['text':' used and keep "got_int" set, so that it aborts ":g".','line_number':1253,'multiline':False]
['text':' flush all buffers','line_number':1258,'multiline':False]
['text':' Trigger CursorMoved if the cursor moved.','line_number':1278,'multiline':False]
['text':' Trigger TextChanged if changedtick differs.','line_number':1290,'multiline':False]
['text':' Trigger BufModified if b_modified changed','line_number':1300,'multiline':False]
['text':'/ If nothing is pending and we are going to wait for the user to','line_number':1308,'multiline':False]
['text':'/ type a character, trigger SafeState.','line_number':1309,'multiline':False]
['text':' Include a closed fold completely in the Visual area.','line_number':1317,'multiline':False]
['text':' When 'foldclose' is set, apply 'foldlevel' to folds that don't','line_number':1320,'multiline':False]
['text':' contain the cursor.','line_number':1321,'multiline':False]
['text':' When 'foldopen' is "all", open the fold(s) under the cursor.','line_number':1322,'multiline':False]
['text':' This may mark the window for redrawing.','line_number':1323,'multiline':False]
['text':' Before redrawing, make sure w_topline is correct, and w_leftcol','line_number':1335,'multiline':False]
['text':' if lines don't wrap, and w_skipcol if lines wrap.','line_number':1336,'multiline':False]
['text':' update inverted part','line_number':1343,'multiline':False]
['text':' Display message after redraw. If an external message is still visible,','line_number':1361,'multiline':False]
['text':' it contains the kept message already.','line_number':1362,'multiline':False]
['text':' msg_start() will set keep_msg to NULL, make a copy','line_number':1366,'multiline':False]
['text':' first.  Don't reset keep_msg, msg_attr_keep() uses it to','line_number':1367,'multiline':False]
['text':' check for duplicates.  Never put this message in','line_number':1368,'multiline':False]
['text':' history.','line_number':1369,'multiline':False]
['text':' show fileinfo after redraw','line_number':1376,'multiline':False]
['text':' can delete error message now','line_number':1382,'multiline':False]
['text':' reset lines_left in msg_start()','line_number':1384,'multiline':False]
['text':' clear scroll-back text on next msg','line_number':1385,'multiline':False]
['text':'/ Function executed before each iteration of normal mode.','line_number':1390,'multiline':False]
['text':'/','line_number':1391,'multiline':False]
['text':'/ @return:','line_number':1392,'multiline':False]
['text':'/           1 if the iteration should continue normally','line_number':1393,'multiline':False]
['text':'/          -1 if the iteration should be skipped','line_number':1394,'multiline':False]
['text':'/           0 if the main loop must exit','line_number':1395,'multiline':False]
['text':' If skip redraw is set (for ":" in wait_return()), don't redraw now.','line_number':1409,'multiline':False]
['text':' If there is nothing in the stuff_buffer or do_redraw is true,','line_number':1410,'multiline':False]
['text':' update cursor and redraw.','line_number':1411,'multiline':False]
['text':' Ensure curwin->w_topline and curwin->w_leftcol are up to date','line_number':1416,'multiline':False]
['text':' before triggering a WinScrolled autocommand.','line_number':1417,'multiline':False]
['text':' Updating diffs from changed() does not always work properly,','line_number':1427,'multiline':False]
['text':' esp. updating folds.  Do an update just before redrawing if','line_number':1428,'multiline':False]
['text':' needed.','line_number':1429,'multiline':False]
['text':' Scroll-binding for diff mode may have been postponed until','line_number':1435,'multiline':False]
['text':' here.  Avoids doing it for every change.','line_number':1436,'multiline':False]
['text':' Now that we have drawn the first screen all the startup stuff','line_number':1446,'multiline':False]
['text':' has been done, close any file for startup messages.','line_number':1447,'multiline':False]
['text':' After the first screen update may start triggering WinScrolled','line_number':1454,'multiline':False]
['text':' autocmd events.  Store all the scroll positions and sizes now.','line_number':1455,'multiline':False]
['text':' May perform garbage collection when waiting for a character, but','line_number':1459,'multiline':False]
['text':' only at the very toplevel.  Otherwise we may be using a List or','line_number':1460,'multiline':False]
['text':' Dict internally somewhere.','line_number':1461,'multiline':False]
['text':' "may_garbage_collect" is reset in vgetc() which is invoked through','line_number':1462,'multiline':False]
['text':' do_exmode() and normal_cmd().','line_number':1463,'multiline':False]
['text':' Update w_curswant if w_set_curswant has been set.','line_number':1466,'multiline':False]
['text':' Postponed until here to avoid computing w_virtcol too often.','line_number':1467,'multiline':False]
['text':' command-line window and cmdwin_result is set','line_number':1479,'multiline':False]
['text':'/ Set v:count and v:count1 according to "cap".','line_number':1487,'multiline':False]
['text':'/ Set v:prevcount only when "set_prevcount" is true.','line_number':1488,'multiline':False]
['text':' multiply with cap->opcount the same way as above','line_number':1493,'multiline':False]
['text':' only set v:prevcount once','line_number':1498,'multiline':False]
['text':'/ End Visual mode.','line_number':1501,'multiline':False]
['text':'/ This function should ALWAYS be called to end Visual mode, except from','line_number':1502,'multiline':False]
['text':'/ do_pending_operator().','line_number':1503,'multiline':False]
['text':' Save the current VIsual area for '< and '> marks, and "gv"','line_number':1510,'multiline':False]
['text':'/ Reset VIsual_active and VIsual_reselect.','line_number':1526,'multiline':False]
['text':' delete the inversion later','line_number':1531,'multiline':False]
['text':'/ Reset VIsual_active and VIsual_reselect if it's set.','line_number':1536,'multiline':False]
['text':' delete the inversion later','line_number':1541,'multiline':False]
['text':'/ Check for a balloon-eval special item to include when searching for an','line_number':1554,'multiline':False]
['text':'/ identifier.  When "dir" is BACKWARD "ptr[-1]" must be valid!','line_number':1555,'multiline':False]
['text':'/','line_number':1556,'multiline':False]
['text':'/ @return  true if the character at "*ptr" should be included.','line_number':1557,'multiline':False]
['text':'/','line_number':1558,'multiline':False]
['text':'/ @param dir    the direction of searching, is either FORWARD or BACKWARD','line_number':1559,'multiline':False]
['text':'/ @param *colp  is in/decremented if "ptr[-dir]" should also be included.','line_number':1560,'multiline':False]
['text':'/ @param bnp    points to a counter for square brackets.','line_number':1561,'multiline':False]
['text':' Accept everything inside [].','line_number':1564,'multiline':False]
['text':' skip over "s.var"','line_number':1575,'multiline':False]
['text':' two-character item: s->var','line_number':1580,'multiline':False]
['text':'/ Find the identifier under or to the right of the cursor.','line_number':1589,'multiline':False]
['text':'/ "find_type" can have one of three values:','line_number':1590,'multiline':False]
['text':'/ FIND_IDENT:   find an identifier (keyword)','line_number':1591,'multiline':False]
['text':'/ FIND_STRING:  find any non-white text','line_number':1592,'multiline':False]
['text':'/ FIND_IDENT + FIND_STRING: find any non-white text, identifier preferred.','line_number':1593,'multiline':False]
['text':'/ FIND_EVAL:  find text useful for C program debugging','line_number':1594,'multiline':False]
['text':'/','line_number':1595,'multiline':False]
['text':'/ There are three steps:','line_number':1596,'multiline':False]
['text':'/ 1. Search forward for the start of an identifier/text.  Doesn't move if','line_number':1597,'multiline':False]
['text':'/    already on one.','line_number':1598,'multiline':False]
['text':'/ 2. Search backward for the start of this identifier/text.','line_number':1599,'multiline':False]
['text':'/    This doesn't match the real Vi but I like it a little better and it','line_number':1600,'multiline':False]
['text':'/    shouldn't bother anyone.','line_number':1601,'multiline':False]
['text':'/ 3. Search forward to the end of this identifier/text.','line_number':1602,'multiline':False]
['text':'/    When FIND_IDENT isn't defined, we backup until a blank.','line_number':1603,'multiline':False]
['text':'/','line_number':1604,'multiline':False]
['text':'/ @return  the length of the text, or zero if no text is found.','line_number':1605,'multiline':False]
['text':'/','line_number':1606,'multiline':False]
['text':'/ If text is found, a pointer to the text is put in "*text".  This','line_number':1607,'multiline':False]
['text':'/ points into the current buffer line and is not always NUL terminated.','line_number':1608,'multiline':False]
['text':'/ Like find_ident_under_cursor(), but for any window and any position.','line_number':1616,'multiline':False]
['text':'/ However: Uses 'iskeyword' from the current window!.','line_number':1617,'multiline':False]
['text':'/','line_number':1618,'multiline':False]
['text':'/ @param textcol  column where "text" starts, can be NULL','line_number':1619,'multiline':False]
['text':' init to shut up GCC','line_number':1624,'multiline':False]
['text':' bracket nesting','line_number':1629,'multiline':False]
['text':' if i == 0: try to find an identifier','line_number':1631,'multiline':False]
['text':' if i == 1: try to find any non-white text','line_number':1632,'multiline':False]
['text':' 1. skip to start of identifier/text','line_number':1635,'multiline':False]
['text':' Stop at a ']' to evaluate "a[x]".','line_number':1638,'multiline':False]
['text':' When starting on a ']' count it, so that we include the '['.','line_number':1649,'multiline':False]
['text':'','line_number':1652,'multiline':False]
['text':' 2. Back up to start of identifier/text.','line_number':1653,'multiline':False]
['text':'','line_number':1654,'multiline':False]
['text':' Remember class of character under cursor.','line_number':1655,'multiline':False]
['text':' If we don't want just any old text, or we've found an','line_number':1676,'multiline':False]
['text':' identifier, stop searching.','line_number':1677,'multiline':False]
['text':' Didn't find an identifier or text.','line_number':1687,'multiline':False]
['text':' 3. Find the end if the identifier/text.','line_number':1701,'multiline':False]
['text':' Search for point of changing multibyte character class.','line_number':1705,'multiline':False]
['text':'/ Prepare for redo of a normal command.','line_number':1721,'multiline':False]
['text':'/ Prepare for redo of any command.','line_number':1728,'multiline':False]
['text':'/ Note that only the last argument can be a multi-byte char.','line_number':1729,'multiline':False]
['text':'/ Prepare for redo of any command with extra count after "cmd2".','line_number':1735,'multiline':False]
['text':' yank from specified buffer','line_number':1740,'multiline':False]
['text':'/ Check for operator active and clear it.','line_number':1767,'multiline':False]
['text':'/','line_number':1768,'multiline':False]
['text':'/ Beep and return true if an operator was active.','line_number':1769,'multiline':False]
['text':'/ Check for operator or Visual active.  Clear active operator.','line_number':1779,'multiline':False]
['text':'/','line_number':1780,'multiline':False]
['text':'/ Beep and return true if an operator or Visual was active.','line_number':1781,'multiline':False]
['text':'/ Remove the shift modifier from a special key.','line_number':1806,'multiline':False]
['text':'/ If the mode is currently displayed clear the command line or update the','line_number':1826,'multiline':False]
['text':'/ command displayed.','line_number':1827,'multiline':False]
['text':' unshow visual mode later','line_number':1831,'multiline':False]
['text':' Routines for displaying a partly typed command','line_number':1838,'multiline':False]
['text':' For push_showcmd()','line_number':1839,'multiline':False]
['text':' Show the size of the Visual area.','line_number':1855,'multiline':False]
['text':' Include closed folds as a whole.','line_number':1863,'multiline':False]
['text':' Make 'sbr' empty for a moment to get the correct size.','line_number':1872,'multiline':False]
['text':' end of line','line_number':1899,'multiline':False]
['text':' truncate','line_number':1912,'multiline':False]
['text':' Don't actually display something if there is nothing to clear.','line_number':1918,'multiline':False]
['text':'/ Add 'c' to string of shown command chars.','line_number':1927,'multiline':False]
['text':'/','line_number':1928,'multiline':False]
['text':'/ @return  true if output has been written (and setcursor() has been called).','line_number':1929,'multiline':False]
['text':' Ignore keys that are scrollbar updates and mouse clicks','line_number':1952,'multiline':False]
['text':'/ Delete 'len' characters from the end of the shown command.','line_number':1989,'multiline':False]
['text':'/ push_showcmd() and pop_showcmd() are used when waiting for the user to type','line_number':2007,'multiline':False]
['text':'/ something and there is a partial mapping.','line_number':2008,'multiline':False]
['text':' put cursor back where it belongs','line_number':2037,'multiline':False]
['text':' put cursor back where it belongs','line_number':2046,'multiline':False]
['text':' 'showcmdloc' is "last" or empty','line_number':2050,'multiline':False]
['text':' placeholder for future highlight support','line_number':2059,'multiline':False]
['text':' clear the rest of an old message by outputting up to SHOWCMD_COLS spaces','line_number':2076,'multiline':False]
['text':'/ When "check" is false, prepare for commands that scroll the window.','line_number':2082,'multiline':False]
['text':'/ When "check" is true, take care of scroll-binding after the window has','line_number':2083,'multiline':False]
['text':'/ scrolled.  Called from normal_cmd() and edit().','line_number':2084,'multiline':False]
['text':' If a ":syncbind" command was just used, don't scroll, only reset','line_number':2094,'multiline':False]
['text':' the values.','line_number':2095,'multiline':False]
['text':' Synchronize other windows, as necessary according to','line_number':2099,'multiline':False]
['text':' 'scrollbind'.  Don't do this after an ":edit" command, except','line_number':2100,'multiline':False]
['text':' when 'diff' is set.','line_number':2101,'multiline':False]
['text':' jump flag set in 'scrollopt'','line_number':2110,'multiline':False]
['text':' When switching between windows, make sure that the relative','line_number':2111,'multiline':False]
['text':' vertical offset is valid for the new window.  The relative','line_number':2112,'multiline':False]
['text':' offset is invalid whenever another 'scrollbind' window has','line_number':2113,'multiline':False]
['text':' scrolled to a point that would force the current window to','line_number':2114,'multiline':False]
['text':' scroll past the beginning or end of its buffer.  When the','line_number':2115,'multiline':False]
['text':' resync is performed, some of the other 'scrollbind' windows may','line_number':2116,'multiline':False]
['text':' need to jump so that the current window's relative position is','line_number':2117,'multiline':False]
['text':' visible on-screen.','line_number':2118,'multiline':False]
['text':'/ Synchronize any windows that have "scrollbind" set, based on the','line_number':2131,'multiline':False]
['text':'/ number of rows by which the current window has changed','line_number':2132,'multiline':False]
['text':'/ (1998-11-02 16:21:01  R. Edward Ralston <eralston@computer.org>)','line_number':2133,'multiline':False]
['text':' check 'scrollopt' string for vertical and horizontal scroll options','line_number':2144,'multiline':False]
['text':' loop through the scrollbound windows and scroll accordingly','line_number':2149,'multiline':False]
['text':' skip original window and windows with 'noscrollbind'','line_number':2154,'multiline':False]
['text':' do the vertical scroll','line_number':2159,'multiline':False]
['text':' do the horizontal scroll','line_number':2186,'multiline':False]
['text':' reset current-window','line_number':2192,'multiline':False]
['text':'/ Command character that's ignored.','line_number':2199,'multiline':False]
['text':'/ Used for CTRL-Q and CTRL-S to avoid problems with terminals that use','line_number':2200,'multiline':False]
['text':'/ xon/xoff.','line_number':2201,'multiline':False]
['text':' don't call edit() now','line_number':2204,'multiline':False]
['text':'/ Command character that doesn't do anything, but unlike nv_ignore() does','line_number':2207,'multiline':False]
['text':'/ start edit().  Used for "startinsert" executed while starting up.','line_number':2208,'multiline':False]
['text':'/ Command character doesn't exist.','line_number':2213,'multiline':False]
['text':'/ <Help> and <F1> commands.','line_number':2219,'multiline':False]
['text':'/ CTRL-A and CTRL-X: Add or subtract from letter or number under cursor.','line_number':2227,'multiline':False]
['text':'/ CTRL-F, CTRL-B, etc: Scroll page up or down.','line_number':2244,'multiline':False]
['text':' <C-PageUp>: tab page back; <C-PageDown>: tab page forward','line_number':2252,'multiline':False]
['text':'/ Implementation of "gd" and "gD" command.','line_number':2263,'multiline':False]
['text':'/','line_number':2264,'multiline':False]
['text':'/ @param thisblock  1 for "1gd" and "1gD"','line_number':2265,'multiline':False]
['text':' clear any search statistics','line_number':2279,'multiline':False]
['text':'/ @return true if line[offset] is not inside a C-style comment or string,','line_number':2285,'multiline':False]
['text':'/         false otherwise.','line_number':2286,'multiline':False]
['text':'/ Search for variable declaration of "ptr[len]".','line_number':2318,'multiline':False]
['text':'/ When "locally" is true in the current function ("gd"), otherwise in the','line_number':2319,'multiline':False]
['text':'/ current file ("gD").','line_number':2320,'multiline':False]
['text':'/','line_number':2321,'multiline':False]
['text':'/ @param thisblock  when true check the {} block scope.','line_number':2322,'multiline':False]
['text':'/ @param flags_arg  flags passed to searchit()','line_number':2323,'multiline':False]
['text':'/','line_number':2324,'multiline':False]
['text':'/ @return           fail when not found.','line_number':2325,'multiline':False]
['text':' Put "\V" before the pattern to avoid that the special meaning of "."','line_number':2338,'multiline':False]
['text':' and "~" causes trouble.','line_number':2339,'multiline':False]
['text':' don't wrap around end of file now','line_number':2345,'multiline':False]
['text':' don't switch ignorecase off now','line_number':2346,'multiline':False]
['text':' With "gD" go to line 1.','line_number':2348,'multiline':False]
['text':' With "gd" Search back for the start of the current function, then go','line_number':2349,'multiline':False]
['text':' back until a blank line.  If this fails go to line 1.','line_number':2350,'multiline':False]
['text':' Set in findpar() otherwise','line_number':2352,'multiline':False]
['text':' Search forward for the identifier, ignore comment lines.','line_number':2364,'multiline':False]
['text':' match after start is failure too','line_number':2370,'multiline':False]
['text':' Check that the block the match is in doesn't end before the','line_number':2377,'multiline':False]
['text':' position where we started the search from.','line_number':2378,'multiline':False]
['text':' There can't be a useful match before the end of this block.','line_number':2380,'multiline':False]
['text':' Skip to the end','line_number':2381,'multiline':False]
['text':' If we previously found a valid position, use it.','line_number':2388,'multiline':False]
['text':' Ignore this line, continue at start of next line.','line_number':2396,'multiline':False]
['text':' If the current position is not a valid identifier and a previous match is','line_number':2403,'multiline':False]
['text':' present, favor that one instead.','line_number':2404,'multiline':False]
['text':' global search: use first match found','line_number':2409,'multiline':False]
['text':' If we previously found a valid position, use it.','line_number':2414,'multiline':False]
['text':' For finding a local variable and the match is before the "{" or','line_number':2421,'multiline':False]
['text':' inside a comment, continue searching.  For K&R style function','line_number':2422,'multiline':False]
['text':' declarations this skips the function header without types.','line_number':2423,'multiline':False]
['text':' Remove SEARCH_START from flags to avoid getting stuck at one position.','line_number':2429,'multiline':False]
['text':' "n" searches forward now','line_number':2438,'multiline':False]
['text':'/ Move 'dist' lines in direction 'dir', counting lines by *screen*','line_number':2449,'multiline':False]
['text':'/ lines rather than lines in the file.','line_number':2450,'multiline':False]
['text':'/ 'dist' must be positive.','line_number':2451,'multiline':False]
['text':'/','line_number':2452,'multiline':False]
['text':'/ @return  true if able to move cursor, false otherwise.','line_number':2453,'multiline':False]
['text':' margin offset for first screen line','line_number':2459,'multiline':False]
['text':' margin offset for wrapped screen line','line_number':2460,'multiline':False]
['text':' text width for first screen line','line_number':2461,'multiline':False]
['text':' text width for wrapped screen line','line_number':2462,'multiline':False]
['text':' Avoid divide by zero.','line_number':2473,'multiline':False]
['text':' Instead of sticking at the last character of the buffer line we','line_number':2478,'multiline':False]
['text':' try to stick in the last column of the screen.','line_number':2479,'multiline':False]
['text':' Move back within the line. This can give a negative value','line_number':2508,'multiline':False]
['text':' for w_curswant if width1 < width2 (with cpoptions+=n),','line_number':2509,'multiline':False]
['text':' which will get clipped to column 0.','line_number':2510,'multiline':False]
['text':' to previous line','line_number':2513,'multiline':False]
['text':' dir == FORWARD','line_number':2527,'multiline':False]
['text':' move forward within line','line_number':2535,'multiline':False]
['text':' to next line','line_number':2538,'multiline':False]
['text':' Check if the cursor has moved below the number display','line_number':2546,'multiline':False]
['text':' when width1 < width2 (with cpoptions+=n). Subtract width2','line_number':2547,'multiline':False]
['text':' to get a negative value for w_curswant, which will get','line_number':2548,'multiline':False]
['text':' clipped to column 0.','line_number':2549,'multiline':False]
['text':' Check for landing on a character that got split at the end of the','line_number':2566,'multiline':False]
['text':' last line.  We want to advance a screenline, not end up in the same','line_number':2567,'multiline':False]
['text':' screenline or move two screenlines.','line_number':2568,'multiline':False]
['text':' stick in the last column','line_number':2592,'multiline':False]
['text':'/ Handle CTRL-E and CTRL-Y commands: scroll a line up or down.','line_number':2599,'multiline':False]
['text':'/ cap->arg must be true for CTRL-E.','line_number':2600,'multiline':False]
['text':'/ Scroll "count" lines up or down, and redraw.','line_number':2608,'multiline':False]
['text':' Adjust the cursor position for 'scrolloff'.  Mark w_topline as','line_number':2621,'multiline':False]
['text':' valid, otherwise the screen jumps back at the end of the file.','line_number':2622,'multiline':False]
['text':' If moved back to where we were, at least move the cursor, otherwise','line_number':2627,'multiline':False]
['text':' we get stuck at one position.  Don't move the cursor up if the','line_number':2628,'multiline':False]
['text':' first line of the buffer is already on the screen','line_number':2629,'multiline':False]
['text':' Mark w_topline as valid, otherwise the screen jumps back at the','line_number':2645,'multiline':False]
['text':' end of the file.','line_number':2646,'multiline':False]
['text':'/ Get the count specified after a 'z' command. Only the 'z<CR>', 'zl', 'zh',','line_number':2660,'multiline':False]
['text':'/ 'z<Left>', and 'z<Right>' commands accept a count after 'z'.','line_number':2661,'multiline':False]
['text':'/ @return  true to process the 'z' command and false to skip it.','line_number':2662,'multiline':False]
['text':' "z123{nchar}": edit the count before obtaining {nchar}','line_number':2667,'multiline':False]
['text':' no mapping for nchar, but allow key codes','line_number':2675,'multiline':False]
['text':'/ "zug" and "zuw": undo "zg" and "zw"','line_number':2709,'multiline':False]
['text':'/ "zg": add good word to word list','line_number':2710,'multiline':False]
['text':'/ "zw": add wrong word to word list','line_number':2711,'multiline':False]
['text':'/ "zG": add good word to temp word list','line_number':2712,'multiline':False]
['text':'/ "zW": add wrong word to temp word list','line_number':2713,'multiline':False]
['text':' no mapping for nchar, but allow key codes','line_number':2720,'multiline':False]
['text':' Find bad word under the cursor.  When 'spell' is','line_number':2745,'multiline':False]
['text':' off this fails and find_ident_under_cursor() is','line_number':2746,'multiline':False]
['text':' used below.','line_number':2747,'multiline':False]
['text':'/ Commands that start with "z".','line_number':2769,'multiline':False]
['text':' "zf" and "zF" are always an operator, "zd", "zo", "zO", "zc"','line_number':2783,'multiline':False]
['text':' and "zC" only in Visual mode.  "zj" and "zk" are motion','line_number':2784,'multiline':False]
['text':' commands.','line_number':2785,'multiline':False]
['text':' For "z+", "z<CR>", "zt", "z.", "zz", "z^", "z-", "zb":','line_number':2793,'multiline':False]
['text':' If line number given, set cursor.','line_number':2794,'multiline':False]
['text':' "z+", "z<CR>" and "zt": put cursor at top of screen','line_number':2808,'multiline':False]
['text':' No count given: put cursor at the line below screen','line_number':2811,'multiline':False]
['text':' make sure w_botline is valid','line_number':2812,'multiline':False]
['text':' "z." and "zz": put cursor in middle of screen','line_number':2832,'multiline':False]
['text':' "z^", "z-" and "zb": put cursor at bottom of screen','line_number':2843,'multiline':False]
['text':' Strange Vi behavior: <count>z^ finds line at top of window','line_number':2844,'multiline':False]
['text':' when <count> is at bottom of window, and puts that one at','line_number':2845,'multiline':False]
['text':' bottom of window.','line_number':2846,'multiline':False]
['text':' "zH" - scroll screen right half-page','line_number':2866,'multiline':False]
['text':' "zh" - scroll screen to the right','line_number':2871,'multiline':False]
['text':' "zL" - scroll window left half-page','line_number':2880,'multiline':False]
['text':' "zl" - scroll window to the left if not wrapping','line_number':2885,'multiline':False]
['text':' "zs" - scroll screen, cursor at the start','line_number':2893,'multiline':False]
['text':' like the cursor is in col 0','line_number':2897,'multiline':False]
['text':' "ze" - scroll screen, cursor at the end','line_number':2913,'multiline':False]
['text':' like the cursor is in col 0','line_number':2917,'multiline':False]
['text':' "zp", "zP" in block mode put without addind trailing spaces','line_number':2934,'multiline':False]
['text':' "zy" Yank without trailing spaces','line_number':2939,'multiline':False]
['text':' "zF": create fold command','line_number':2944,'multiline':False]
['text':' "zf": create fold operator','line_number':2945,'multiline':False]
['text':' "zF" is like "zfzf"','line_number':2953,'multiline':False]
['text':' "zd": delete fold at cursor','line_number':2963,'multiline':False]
['text':' "zD": delete fold at cursor recursively','line_number':2964,'multiline':False]
['text':' "zE": erase all folds','line_number':2977,'multiline':False]
['text':' "zn": fold none: reset 'foldenable'','line_number':2989,'multiline':False]
['text':' "zN": fold Normal: set 'foldenable'','line_number':2994,'multiline':False]
['text':' "zi": invert folding: toggle 'foldenable'','line_number':2999,'multiline':False]
['text':' "za": open closed fold or close open fold at cursor','line_number':3004,'multiline':False]
['text':' "zA": open fold at cursor recursively','line_number':3014,'multiline':False]
['text':' "zo": open fold at cursor or Visual area','line_number':3024,'multiline':False]
['text':' "zO": open fold recursively','line_number':3033,'multiline':False]
['text':' "zc": close fold at cursor or Visual area','line_number':3042,'multiline':False]
['text':' "zC": close fold recursively','line_number':3052,'multiline':False]
['text':' "zv": open folds at the cursor','line_number':3062,'multiline':False]
['text':' "zx": re-apply 'foldlevel' and open folds at the cursor','line_number':3067,'multiline':False]
['text':' recompute folds','line_number':3070,'multiline':False]
['text':' update right now','line_number':3071,'multiline':False]
['text':' "zX": undo manual opens/closes, re-apply 'foldlevel'','line_number':3075,'multiline':False]
['text':' recompute folds','line_number':3078,'multiline':False]
['text':' force an update','line_number':3079,'multiline':False]
['text':' "zm": fold more','line_number':3082,'multiline':False]
['text':' force an update','line_number':3090,'multiline':False]
['text':' "zM": close all folds','line_number':3094,'multiline':False]
['text':' force an update','line_number':3097,'multiline':False]
['text':' "zr": reduce folding','line_number':3101,'multiline':False]
['text':'  "zR": open all folds','line_number':3112,'multiline':False]
['text':' force an update','line_number':3114,'multiline':False]
['text':' "zj" move to next fold downwards','line_number':3117,'multiline':False]
['text':' "zk" move to next fold upwards','line_number':3118,'multiline':False]
['text':' "zug" and "zuw": undo "zg" and "zw"','line_number':3125,'multiline':False]
['text':' "zg": add good word to word list','line_number':3126,'multiline':False]
['text':' "zw": add wrong word to word list','line_number':3127,'multiline':False]
['text':' "zG": add good word to temp word list','line_number':3128,'multiline':False]
['text':' "zW": add wrong word to temp word list','line_number':3129,'multiline':False]
['text':' "z=": suggestions for a badly spelled word','line_number':3135,'multiline':False]
['text':' Redraw when 'foldenable' changed','line_number':3145,'multiline':False]
['text':' Adjust 'foldenable' in diff-synced windows.','line_number':3148,'multiline':False]
['text':' Redraw when 'foldlevel' changed.','line_number':3159,'multiline':False]
['text':'/ "Q" command.','line_number':3165,'multiline':False]
['text':'/ Handle a ":" command and <Cmd> or Lua mappings.','line_number':3181,'multiline':False]
['text':' Using ":" as a movement is charwise exclusive.','line_number':3194,'multiline':False]
['text':' translate "count:" into ":.,.+(count - 1)"','line_number':3198,'multiline':False]
['text':' When typing, don't type below an old message','line_number':3206,'multiline':False]
['text':' get a command line and execute it','line_number':3214,'multiline':False]
['text':' The Ex command failed, do not execute the operator.','line_number':3220,'multiline':False]
['text':' The start of the operator has become invalid by the Ex command.','line_number':3227,'multiline':False]
['text':'/ Handle CTRL-G command.','line_number':3232,'multiline':False]
['text':' toggle Selection/Visual mode','line_number':3235,'multiline':False]
['text':' print full name if count given or :cd used','line_number':3240,'multiline':False]
['text':'/ Handle CTRL-H <Backspace> command.','line_number':3245,'multiline':False]
['text':' BS key behaves like 'x' in Select mode','line_number':3249,'multiline':False]
['text':'/ CTRL-L: clear screen and redraw.','line_number':3256,'multiline':False]
['text':' Clear all syntax states to force resyncing.','line_number':3263,'multiline':False]
['text':'/ CTRL-O: In Select mode: switch to Visual mode for one command.','line_number':3271,'multiline':False]
['text':'/ Otherwise: Go to older pcmark.','line_number':3272,'multiline':False]
['text':' restart Select mode later','line_number':3279,'multiline':False]
['text':'/ CTRL-^ command, short for ":e #".  Works even when the alternate buffer is','line_number':3286,'multiline':False]
['text':'/ not named.','line_number':3287,'multiline':False]
['text':'/ "Z" commands.','line_number':3296,'multiline':False]
['text':' "ZZ": equivalent to ":x".','line_number':3304,'multiline':False]
['text':' "ZQ": equivalent to ":q!" (Elvis compatible).','line_number':3309,'multiline':False]
['text':'/ Call nv_ident() as if "c1" was used, with "c2" as next character.','line_number':3319,'multiline':False]
['text':'/ 'K' normal-mode command. Get the command to lookup the keyword under the','line_number':3333,'multiline':False]
['text':'/ cursor.','line_number':3334,'multiline':False]
['text':' in the help buffer','line_number':3339,'multiline':False]
['text':' 'keywordprg' is an ex command','line_number':3345,'multiline':False]
['text':' Send the count to the ex command.','line_number':3346,'multiline':False]
['text':' An external command will probably use an argument starting','line_number':3356,'multiline':False]
['text':' with "-" as an option.  To avoid trouble we skip the "-".','line_number':3357,'multiline':False]
['text':' found dashes only','line_number':3363,'multiline':False]
['text':' When a count is given, turn it into a range.  Is this','line_number':3370,'multiline':False]
['text':' really what we want?','line_number':3371,'multiline':False]
['text':'/ Handle the commands that use the word under the cursor.','line_number':3396,'multiline':False]
['text':'/ [g] CTRL-]   :ta to current identifier','line_number':3397,'multiline':False]
['text':'/ [g] 'K'      run program for current identifier','line_number':3398,'multiline':False]
['text':'/ [g] '*'      / to current identifier or string','line_number':3399,'multiline':False]
['text':'/ [g] '#'      ? to current identifier or string','line_number':3400,'multiline':False]
['text':'/  g  ']'      :tselect for current identifier','line_number':3401,'multiline':False]
['text':' init for GCC','line_number':3406,'multiline':False]
['text':' "g" command','line_number':3408,'multiline':False]
['text':' "g*", "g#", "g]" and "gCTRL-]"','line_number':3411,'multiline':False]
['text':' the pound sign, '#' for English keyboards','line_number':3419,'multiline':False]
['text':' The "]", "CTRL-]" and "K" commands accept an argument in Visual mode.','line_number':3423,'multiline':False]
['text':' Allocate buffer to put the command in.  Inserting backslashes can','line_number':3442,'multiline':False]
['text':' double the length of the word.  p_kp / curbuf->b_p_kp could be added','line_number':3443,'multiline':False]
['text':' and some numbers.','line_number':3444,'multiline':False]
['text':' 'keywordprg'','line_number':3445,'multiline':False]
['text':' found white space only','line_number':3448,'multiline':False]
['text':' 'keywordprg' is an ex command','line_number':3451,'multiline':False]
['text':' Put cursor at start of word, makes search skip the word','line_number':3459,'multiline':False]
['text':' under the cursor.','line_number':3460,'multiline':False]
['text':' Call setpcmark() first, so "*``" puts the cursor back where','line_number':3461,'multiline':False]
['text':' it was.','line_number':3462,'multiline':False]
['text':' don't use 'smartcase' now','line_number':3469,'multiline':False]
['text':' Now grab the chars in the identifier','line_number':3497,'multiline':False]
['text':' Escape the argument properly for an Ex command','line_number':3501,'multiline':False]
['text':' Escape the argument properly for a shell command','line_number':3504,'multiline':False]
['text':' ":help" handles unescaped argument','line_number':3520,'multiline':False]
['text':' put a backslash before \ and some others','line_number':3531,'multiline':False]
['text':' When current byte is a part of multibyte character, copy all','line_number':3535,'multiline':False]
['text':' bytes of that character.','line_number':3536,'multiline':False]
['text':' Execute the command.','line_number':3546,'multiline':False]
['text':' put pattern in search history','line_number':3553,'multiline':False]
['text':' Start insert mode in terminal buffer','line_number':3564,'multiline':False]
['text':'/ Get visually selected text, within one line only.','line_number':3574,'multiline':False]
['text':'/','line_number':3575,'multiline':False]
['text':'/ @param pp    return: start of selected text','line_number':3576,'multiline':False]
['text':'/ @param lenp  return: length of selected text','line_number':3577,'multiline':False]
['text':'/','line_number':3578,'multiline':False]
['text':'/ @return      false if more than one line selected.','line_number':3579,'multiline':False]
['text':' Correct the length to include all bytes of the last character.','line_number':3606,'multiline':False]
['text':'/ CTRL-T: backwards in tag stack','line_number':3614,'multiline':False]
['text':'/ Handle scrolling command 'H', 'L' and 'M'.','line_number':3622,'multiline':False]
['text':' make sure curwin->w_botline is valid','line_number':3632,'multiline':False]
['text':' Count a fold for one screen line.','line_number':3638,'multiline':False]
['text':' Don't count filler lines above the window.','line_number':3654,'multiline':False]
['text':' make sure w_empty_rows is valid','line_number':3657,'multiline':False]
['text':' Count half the number of filler lines to be "below this','line_number':3660,'multiline':False]
['text':' line" and half to be "above the next line".','line_number':3661,'multiline':False]
['text':' (cap->cmdchar == 'H')','line_number':3677,'multiline':False]
['text':' Count a fold for one screen line.','line_number':3680,'multiline':False]
['text':' Correct for 'so', except when an operator is pending.','line_number':3695,'multiline':False]
['text':'/ Cursor right commands.','line_number':3702,'multiline':False]
['text':' <C-Right> and <S-Right> move a word or WORD right','line_number':3708,'multiline':False]
['text':' In virtual edit mode, there's no such thing as "past_line", as lines','line_number':3720,'multiline':False]
['text':' are (theoretically) infinitely long.','line_number':3721,'multiline':False]
['text':'    <Space> wraps to next line if 'whichwrap' has 's'.','line_number':3729,'multiline':False]
['text':'        'l' wraps to next line if 'whichwrap' has 'l'.','line_number':3730,'multiline':False]
['text':' CURS_RIGHT wraps to next line if 'whichwrap' has '>'.','line_number':3731,'multiline':False]
['text':' When deleting we also count the NL as a character.','line_number':3736,'multiline':False]
['text':' Set cap->oap->inclusive when last char in the line is','line_number':3737,'multiline':False]
['text':' included, move to next line after that','line_number':3738,'multiline':False]
['text':' Only beep and flush if not moved at all','line_number':3753,'multiline':False]
['text':'/ Cursor left commands.','line_number':3778,'multiline':False]
['text':'/','line_number':3779,'multiline':False]
['text':'/ @return  true when operator end should not be adjusted.','line_number':3780,'multiline':False]
['text':' <C-Left> and <S-Left> move a word or WORD left','line_number':3786,'multiline':False]
['text':' <BS> and <Del> wrap to previous line if 'whichwrap' has 'b'.','line_number':3798,'multiline':False]
['text':'                 'h' wraps to previous line if 'whichwrap' has 'h'.','line_number':3799,'multiline':False]
['text':'           CURS_LEFT wraps to previous line if 'whichwrap' has '<'.','line_number':3800,'multiline':False]
['text':' When the NL before the first char has to be deleted we','line_number':3810,'multiline':False]
['text':' put the cursor on the NUL after the previous line.','line_number':3811,'multiline':False]
['text':' This is a very special case, be careful!','line_number':3812,'multiline':False]
['text':' Don't adjust op_end now, otherwise it won't work.','line_number':3813,'multiline':False]
['text':' Only beep and flush if not moved at all','line_number':3825,'multiline':False]
['text':'/ Cursor up commands.','line_number':3837,'multiline':False]
['text':'/ cap->arg is true for "-": Move cursor to first non-blank.','line_number':3838,'multiline':False]
['text':' <S-Up> is page up','line_number':3842,'multiline':False]
['text':'/ Cursor down commands.','line_number':3856,'multiline':False]
['text':'/ cap->arg is true for CR and "+": Move cursor to first non-blank.','line_number':3857,'multiline':False]
['text':' <S-Down> is page down','line_number':3861,'multiline':False]
['text':' Quickfix window only: view the result under the cursor.','line_number':3865,'multiline':False]
['text':' In the cmdline window a <CR> executes the command.','line_number':3868,'multiline':False]
['text':' In a prompt buffer a <CR> in the last line invokes the callback.','line_number':3873,'multiline':False]
['text':'/ Grab the file name under the cursor and edit it.','line_number':3889,'multiline':False]
['text':' do autowrite if necessary','line_number':3901,'multiline':False]
['text':'/ <End> command: to end of current line or last line.','line_number':3919,'multiline':False]
['text':' CTRL-END = goto last line','line_number':3922,'multiline':False]
['text':' to end of current line','line_number':3925,'multiline':False]
['text':'/ Handle the "$" command.','line_number':3930,'multiline':False]
['text':' In virtual mode when off the edge of a line and an operator','line_number':3935,'multiline':False]
['text':' is pending (whew!) keep the cursor where it is.','line_number':3936,'multiline':False]
['text':' Otherwise, send it to the end of the line.','line_number':3937,'multiline':False]
['text':' so we stay at the end','line_number':3940,'multiline':False]
['text':'/ Implementation of '?' and '/' commands.','line_number':3950,'multiline':False]
['text':'/ If cap->arg is true don't set PC mark.','line_number':3951,'multiline':False]
['text':' Translate "g??" to "g?g?"','line_number':3958,'multiline':False]
['text':' When using 'incsearch' the cursor may be moved to set a different search','line_number':3965,'multiline':False]
['text':' start position.','line_number':3966,'multiline':False]
['text':'/ Handle "N" and "n" commands.','line_number':3979,'multiline':False]
['text':'/ cap->arg is SEARCH_REV for "N", 0 for "n".','line_number':3980,'multiline':False]
['text':' Avoid getting stuck on the current cursor position, which can happen when','line_number':3988,'multiline':False]
['text':' an offset is given and the cursor is on the last char in the buffer:','line_number':3989,'multiline':False]
['text':' Repeat with count + 1.','line_number':3990,'multiline':False]
['text':'/ Search for "pat" in direction "dir" ('/' or '?', 0 for repeat).','line_number':3997,'multiline':False]
['text':'/ Uses only cap->count1 and cap->oap from "cap".','line_number':3998,'multiline':False]
['text':'/','line_number':3999,'multiline':False]
['text':'/ @param opt  extra flags for do_search()','line_number':4000,'multiline':False]
['text':'/','line_number':4001,'multiline':False]
['text':'/ @return 0 for failure, 1 for found, 2 for found and line offset added.','line_number':4002,'multiline':False]
['text':' "/$" will put the cursor after the end of the line, may need to','line_number':4030,'multiline':False]
['text':' correct that here','line_number':4031,'multiline':False]
['text':'/ Character search commands.','line_number':4036,'multiline':False]
['text':'/ cap->arg is BACKWARD for 'F' and 'T', FORWARD for 'f' and 't', true for','line_number':4037,'multiline':False]
['text':'/ ',' and false for ';'.','line_number':4038,'multiline':False]
['text':'/ cap->nchar is NUL for ',' and ';' (repeat the search)','line_number':4039,'multiline':False]
['text':' Include a Tab for "tx" and for "dfx".','line_number':4057,'multiline':False]
['text':'/ "[{", "[(", "]}" or "])": go to Nth unclosed '{', '(', '}' or ')'','line_number':4073,'multiline':False]
['text':'/ "[#", "]#": go to start/end of Nth innermost #if..#endif construct.','line_number':4074,'multiline':False]
['text':'/ "[/", "[*", "]/", "]*": go to Nth comment start/end.','line_number':4075,'multiline':False]
['text':'/ "[m" or "]m" search for prev/next start of (Java) method.','line_number':4076,'multiline':False]
['text':'/ "[M" or "]M" search for prev/next end of (Java) method.','line_number':4077,'multiline':False]
['text':' init for GCC','line_number':4081,'multiline':False]
['text':' nothing found','line_number':4104,'multiline':False]
['text':' use last one found','line_number':4109,'multiline':False]
['text':' Handle "[m", "]m", "[M" and "[M".  The findmatchlimit() only','line_number':4119,'multiline':False]
['text':' brought us to the match for "[m" and "]M" when inside a method.','line_number':4120,'multiline':False]
['text':' Try finding the '{' or '}' we want to be at.','line_number':4121,'multiline':False]
['text':' Also repeat for the given count.','line_number':4122,'multiline':False]
['text':' norm is true for "]M" and "[m"','line_number':4125,'multiline':False]
['text':' found a match: we were inside a method','line_number':4129,'multiline':False]
['text':' if not found anything, that's an error','line_number':4142,'multiline':False]
['text':' Must have found end/start of class: use it.','line_number':4151,'multiline':False]
['text':' Or found the place to be at.','line_number':4152,'multiline':False]
['text':' if no match found at all, we started outside of the','line_number':4158,'multiline':False]
['text':' class and we're inside now.  Just go on.','line_number':4159,'multiline':False]
['text':' found start/end of other method: go to match','line_number':4165,'multiline':False]
['text':'/ "[" and "]" commands.','line_number':4191,'multiline':False]
['text':'/ cap->arg is BACKWARD for "[" and FORWARD for "]".','line_number':4192,'multiline':False]
['text':' cursor position before command','line_number':4200,'multiline':False]
['text':' TODO(Unknown): don't do this for an error.','line_number':4201,'multiline':False]
['text':' "[f" or "]f" : Edit file under the cursor (same as "gf")','line_number':4203,'multiline':False]
['text':' Find the occurrence(s) of the identifier or define under cursor','line_number':4207,'multiline':False]
['text':' in current and included files or jump to the first occurrence.','line_number':4208,'multiline':False]
['text':'','line_number':4209,'multiline':False]
['text':'                    search       list           jump','line_number':4210,'multiline':False]
['text':'                  fwd   bwd    fwd   bwd     fwd    bwd','line_number':4211,'multiline':False]
['text':' identifier       "]i"  "[i"   "]I"  "[I"   "]^I"  "[^I"','line_number':4212,'multiline':False]
['text':' define           "]d"  "[d"   "]D"  "[D"   "]^D"  "[^D"','line_number':4213,'multiline':False]
['text':' Make a copy, if the line was changed it will be freed.','line_number':4220,'multiline':False]
['text':' "[{", "[(", "]}" or "])": go to Nth unclosed '{', '(', '}' or ')'','line_number':4240,'multiline':False]
['text':' "[#", "]#": go to start/end of Nth innermost #if..#endif construct.','line_number':4241,'multiline':False]
['text':' "[/", "[*", "]/", "]*": go to Nth comment start/end.','line_number':4242,'multiline':False]
['text':' "[m" or "]m" search for prev/next start of (Java) method.','line_number':4243,'multiline':False]
['text':' "[M" or "]M" search for prev/next end of (Java) method.','line_number':4244,'multiline':False]
['text':' "[[", "[]", "]]" and "][": move to start or end of function','line_number':4247,'multiline':False]
['text':' "]]" or "[["','line_number':4248,'multiline':False]
['text':' "][" or "[]"','line_number':4251,'multiline':False]
['text':' Imitate strange Vi behaviour: When using "]]" with an operator we also stop at '}'.','line_number':4254,'multiline':False]
['text':' "[p", "[P", "]P" and "]p": put with indent adjustment','line_number':4268,'multiline':False]
['text':' "['", "[`", "]'" and "]`": jump to next mark','line_number':4271,'multiline':False]
['text':' [ or ] followed by a middle mouse click: put selected text with','line_number':4290,'multiline':False]
['text':' indent adjustment.  Any other button just does as usual.','line_number':4291,'multiline':False]
['text':' "[z" and "]z": move to start or end of open fold.','line_number':4296,'multiline':False]
['text':' "[c" and "]c": move to next or previous diff-change.','line_number':4302,'multiline':False]
['text':' "[s", "[S", "]s" and "]S": move to next spell error.','line_number':4308,'multiline':False]
['text':' Not a valid cap->nchar.','line_number':4322,'multiline':False]
['text':'/ Handle Normal mode "%" command.','line_number':4327,'multiline':False]
['text':' {cnt}% : goto {cnt} percentage in file','line_number':4333,'multiline':False]
['text':' Round up, so 'normal 100%' always jumps at the line line.','line_number':4339,'multiline':False]
['text':' Beyond 21474836 lines, (ml_line_count * 100 + 99) would','line_number':4340,'multiline':False]
['text':' overflow on 32-bits, so use a formula with less accuracy','line_number':4341,'multiline':False]
['text':' to avoid overflows.','line_number':4342,'multiline':False]
['text':' "%" : go to matching paren','line_number':4358,'multiline':False]
['text':'/ Handle "(" and ")" commands.','line_number':4380,'multiline':False]
['text':'/ cap->arg is BACKWARD for "(" and FORWARD for ")".','line_number':4381,'multiline':False]
['text':' The motion used to be inclusive for "(", but that is not what Vi does.','line_number':4386,'multiline':False]
['text':' Don't leave the cursor on the NUL past end of line.','line_number':4395,'multiline':False]
['text':'/ "m" command: Mark a position.','line_number':4403,'multiline':False]
['text':'/ "{" and "}" commands.','line_number':4415,'multiline':False]
['text':'/ cmd->arg is BACKWARD for "{" and FORWARD for "}".','line_number':4416,'multiline':False]
['text':'/ "u" command: Undo or make lower case.','line_number':4434,'multiline':False]
['text':' translate "<Visual>u" to "<Visual>gu" and "guu" to "gugu"','line_number':4439,'multiline':False]
['text':'/ <Undo> command.','line_number':4448,'multiline':False]
['text':'/ Handle the "r" command.','line_number':4463,'multiline':False]
['text':' get another character','line_number':4476,'multiline':False]
['text':' Don't redo a multibyte character with CTRL-V.','line_number':4480,'multiline':False]
['text':' Abort if the character is a special key.','line_number':4488,'multiline':False]
['text':' Visual mode "r"','line_number':4494,'multiline':False]
['text':' Use a special (negative) number to make a difference between a','line_number':4500,'multiline':False]
['text':' literal CR or NL and a line break.','line_number':4501,'multiline':False]
['text':' Break tabs, etc.','line_number':4512,'multiline':False]
['text':' Add extra space and put the cursor on the first one.','line_number':4518,'multiline':False]
['text':' Abort if not enough characters to replace.','line_number':4527,'multiline':False]
['text':' Replacing with a TAB is done by edit() when it is complicated because','line_number':4535,'multiline':False]
['text':' 'expandtab' or 'smarttab' is set.  CTRL-V TAB inserts a literal TAB.','line_number':4536,'multiline':False]
['text':' Other characters are done below to avoid problems with things like','line_number':4537,'multiline':False]
['text':' CTRL-V 048 (for edit() this would be R CTRL-V 0 ESC).','line_number':4538,'multiline':False]
['text':' save line for undo','line_number':4547,'multiline':False]
['text':' Replace character(s) by a single newline.','line_number':4553,'multiline':False]
['text':' Strange vi behaviour: Only one newline is inserted.','line_number':4554,'multiline':False]
['text':' Delete the characters here.','line_number':4555,'multiline':False]
['text':' Insert the newline with an insert command, takes care of','line_number':4556,'multiline':False]
['text':' autoindent.      The insert command depends on being on the last','line_number':4557,'multiline':False]
['text':' character of a line or not.','line_number':4558,'multiline':False]
['text':' delete the characters','line_number':4559,'multiline':False]
['text':' Give 'r' to edit(), to get the redo command right.','line_number':4563,'multiline':False]
['text':' This is slow, but it handles replacing a single-byte with a','line_number':4579,'multiline':False]
['text':' multi-byte and the other way around.  Also handles adding','line_number':4580,'multiline':False]
['text':' composing characters for utf-8.','line_number':4581,'multiline':False]
['text':' will be decremented further down','line_number':4590,'multiline':False]
['text':' cursor on the last replaced char','line_number':4604,'multiline':False]
['text':' if the character on the left of the current cursor is a multi-byte','line_number':4605,'multiline':False]
['text':' character, move two characters left','line_number':4606,'multiline':False]
['text':'/ 'o': Exchange start and end of Visual area.','line_number':4616,'multiline':False]
['text':'/ 'O': same, but in block mode exchange left and right corners.','line_number':4617,'multiline':False]
['text':' 'selection "exclusive" and cursor at right-bottom corner: move it','line_number':4631,'multiline':False]
['text':' right one column','line_number':4632,'multiline':False]
['text':'/ "R" (cap->arg is false) and "gR" (cap->arg is true).','line_number':4660,'multiline':False]
['text':' "R" is replace lines','line_number':4663,'multiline':False]
['text':' remember original area for gv','line_number':4666,'multiline':False]
['text':'/ "gr".','line_number':4686,'multiline':False]
['text':' Do same as "r" in Visual mode for now','line_number':4692,'multiline':False]
['text':' get another character','line_number':4704,'multiline':False]
['text':' Prefix a control character with CTRL-V to avoid it being used as','line_number':4708,'multiline':False]
['text':' a command.','line_number':4709,'multiline':False]
['text':'/ Swap case for "~" command, when it does not work like an operator.','line_number':4721,'multiline':False]
['text':'/ Move the cursor to the mark position','line_number':4775,'multiline':False]
['text':'/','line_number':4776,'multiline':False]
['text':'/ Wrapper to mark_move_to() that also handles normal mode command arguments.','line_number':4777,'multiline':False]
['text':'/ @note  It will switch the buffer if neccesarry, move the cursor and set the','line_number':4778,'multiline':False]
['text':'/ view depending on the given flags.','line_number':4779,'multiline':False]
['text':'/ @param cap  command line arguments','line_number':4780,'multiline':False]
['text':'/ @param flags for mark_move_to()','line_number':4781,'multiline':False]
['text':'/ @param mark  mark','line_number':4782,'multiline':False]
['text':'/ @return  The result of calling mark_move_to()','line_number':4783,'multiline':False]
['text':' ignored if not kMTCharWise','line_number':4794,'multiline':False]
['text':'/ Handle commands that are operators in Visual mode.','line_number':4799,'multiline':False]
['text':' Uppercase means linewise, except in block mode, then "D" deletes till','line_number':4804,'multiline':False]
['text':' the end of the line, and "C" replaces till EOL','line_number':4805,'multiline':False]
['text':'/ "s" and "S" commands.','line_number':4818,'multiline':False]
['text':' "vs" and "vS" are the same as "vc"','line_number':4825,'multiline':False]
['text':'/ Abbreviated commands.','line_number':4837,'multiline':False]
['text':' DEL key behaves like 'x'','line_number':4841,'multiline':False]
['text':' in Visual mode these commands are operators','line_number':4843,'multiline':False]
['text':'/ Translate a command into another command.','line_number':4851,'multiline':False]
['text':'/ "'" and "`" commands.  Also for "g'" and "g`".','line_number':4867,'multiline':False]
['text':'/ cap->arg is true for "'" and "g'".','line_number':4868,'multiline':False]
['text':' flags for moving to the mark','line_number':4872,'multiline':False]
['text':' When there is a pending operator, do not restore the view as this is usually unexpected.','line_number':4874,'multiline':False]
['text':' Result from moving to the mark','line_number':4877,'multiline':False]
['text':' getting file may reset it','line_number':4878,'multiline':False]
['text':' May need to clear the coladd that a mark includes.','line_number':4893,'multiline':False]
['text':'/ Handle CTRL-O, CTRL-I, "g;", "g,", and "CTRL-Tab" commands.','line_number':4907,'multiline':False]
['text':'/ Movement in the jumplist and changelist.','line_number':4908,'multiline':False]
['text':' flags for moving to the mark','line_number':4912,'multiline':False]
['text':' Result from moving to the mark','line_number':4913,'multiline':False]
['text':' getting file may reset it.','line_number':4914,'multiline':False]
['text':' Changelist and jumplist have their own error messages. Therefore avoid','line_number':4933,'multiline':False]
['text':' calling nv_mark_move_to() when not found to avoid incorrect error','line_number':4934,'multiline':False]
['text':' messages.','line_number':4935,'multiline':False]
['text':'/ Handle '"' command.','line_number':4957,'multiline':False]
['text':' remember count before '"'','line_number':4968,'multiline':False]
['text':'/ Handle "v", "V" and "CTRL-V" commands.','line_number':4975,'multiline':False]
['text':'/ Also for "gh", "gH" and "g^H" commands: Always start Select mode, cap->arg','line_number':4976,'multiline':False]
['text':'/ is true.','line_number':4977,'multiline':False]
['text':'/ Handle CTRL-Q just like CTRL-V.','line_number':4978,'multiline':False]
['text':' 'v', 'V' and CTRL-V can be used while an operator is pending to make it','line_number':4985,'multiline':False]
['text':' charwise, linewise, or blockwise.','line_number':4986,'multiline':False]
['text':' operator doesn't finish now but later','line_number':4989,'multiline':False]
['text':' change Visual mode','line_number':4994,'multiline':False]
['text':' stop visual mode','line_number':4995,'multiline':False]
['text':' toggle char/block mode','line_number':4997,'multiline':False]
['text':'           or char/line mode','line_number':4998,'multiline':False]
['text':' update the inversion','line_number':5003,'multiline':False]
['text':' start Visual mode','line_number':5004,'multiline':False]
['text':' use previously selected part','line_number':5006,'multiline':False]
['text':' start Select mode when 'selectmode' contains "cmd"','line_number':5012,'multiline':False]
['text':' show visual mode later','line_number':5017,'multiline':False]
['text':' For V and ^V, we multiply the number of lines even if there','line_number':5019,'multiline':False]
['text':' was only one -- webb','line_number':5020,'multiline':False]
['text':' Update curswant on the original line, that is where "col" is valid.','line_number':5043,'multiline':False]
['text':' show the inversion','line_number':5054,'multiline':False]
['text':' start Select mode when 'selectmode' contains "cmd"','line_number':5057,'multiline':False]
['text':' include one more char','line_number':5062,'multiline':False]
['text':' With a count select that many characters or lines.','line_number':5065,'multiline':False]
['text':'/ Start selection for Shift-movement keys.','line_number':5076,'multiline':False]
['text':' if 'selectmode' contains "key", start Select mode','line_number':5079,'multiline':False]
['text':'/ Start Select mode, if "c" is in 'selectmode' and not in a mapping or menu.','line_number':5084,'multiline':False]
['text':'/ When "c" is 'o' (checking for "mouse") then also when mapped.','line_number':5085,'multiline':False]
['text':'/ Start Visual mode "c".','line_number':5092,'multiline':False]
['text':'/ Should set VIsual_select before calling this.','line_number':5093,'multiline':False]
['text':' Corner case: the 0 position in a tab may change when going into','line_number':5099,'multiline':False]
['text':' virtualedit.  Recalculate curwin->w_cursor to avoid bad highlighting.','line_number':5100,'multiline':False]
['text':'','line_number':5101,'multiline':False]
['text':' Check for redraw after changing the state.','line_number':5112,'multiline':False]
['text':' show visual mode later','line_number':5116,'multiline':False]
['text':' Only need to redraw this line, unless still need to redraw an old','line_number':5118,'multiline':False]
['text':' Visual area (when 'lazyredraw' is set).','line_number':5119,'multiline':False]
['text':'/ CTRL-W: Window commands','line_number':5126,'multiline':False]
['text':' "CTRL-W :" is the same as typing ":"; useful in a terminal window','line_number':5130,'multiline':False]
['text':' everything is in window.c','line_number':5135,'multiline':False]
['text':'/ CTRL-Z: Suspend','line_number':5139,'multiline':False]
['text':' stop Visual mode','line_number':5144,'multiline':False]
['text':'/ "gv": Reselect the previous Visual area.  If Visual already active,','line_number':5149,'multiline':False]
['text':'/       exchange previous and current Visual area.','line_number':5150,'multiline':False]
['text':' set w_cursor to the start of the Visual area, tpos to the end','line_number':5165,'multiline':False]
['text':' Set Visual to the start and w_cursor to the end of the Visual','line_number':5189,'multiline':False]
['text':' area.  Make sure they are on an existing character.','line_number':5190,'multiline':False]
['text':' When called from normal "g" command: start Select mode when','line_number':5197,'multiline':False]
['text':' 'selectmode' contains "cmd".  When called for K_SELECT, always','line_number':5198,'multiline':False]
['text':' start Select mode.','line_number':5199,'multiline':False]
['text':'/ "g0", "g^" : Like "0" and "^" but for screen lines.','line_number':5211,'multiline':False]
['text':'/ "gm": middle of "g0" and "g$".','line_number':5212,'multiline':False]
['text':' Go to the middle of the screen line.  When 'number' or','line_number':5232,'multiline':False]
['text':' 'relativenumber' is on and lines are wrapping the middle can be more','line_number':5233,'multiline':False]
['text':' to the left.','line_number':5234,'multiline':False]
['text':'/ "g_": to the last non-blank character in the line or <count> lines downward.','line_number':5250,'multiline':False]
['text':' In Visual mode we may end up after the line.','line_number':5263,'multiline':False]
['text':' Decrease the cursor column until it's on a non-blank.','line_number':5268,'multiline':False]
['text':'/ "g$" : Like "$" but for screen lines.','line_number':5276,'multiline':False]
['text':' so we stay at the end','line_number':5287,'multiline':False]
['text':' Make sure we stick in this column.','line_number':5299,'multiline':False]
['text':' Check for landing on a character that got split at','line_number':5302,'multiline':False]
['text':' the end of the line.  We do not want to advance to','line_number':5303,'multiline':False]
['text':' the next screen line.','line_number':5304,'multiline':False]
['text':' if it fails, let the cursor still move to the last char','line_number':5314,'multiline':False]
['text':' if the character doesn't fit move one back','line_number':5320,'multiline':False]
['text':' Make sure we stick in this column.','line_number':5330,'multiline':False]
['text':'/ "gi": start Insert at the last position.','line_number':5341,'multiline':False]
['text':'/ Commands starting with "g".','line_number':5359,'multiline':False]
['text':' "g^A/g^X": Sequentially increment visually selected region.','line_number':5366,'multiline':False]
['text':' "gR": Enter virtual replace mode.','line_number':5379,'multiline':False]
['text':' "gv": Reselect the previous Visual area.  If Visual already active,','line_number':5393,'multiline':False]
['text':'       exchange previous and current Visual area.','line_number':5394,'multiline':False]
['text':' "gV": Don't reselect the previous Visual area after a Select mode mapping of menu.','line_number':5398,'multiline':False]
['text':' "gh":  start Select mode.','line_number':5403,'multiline':False]
['text':' "gH":  start Select line mode.','line_number':5404,'multiline':False]
['text':' "g^H": start Select block mode.','line_number':5405,'multiline':False]
['text':' "gn", "gN" visually select next/previous search match','line_number':5417,'multiline':False]
['text':' "gn" selects next match','line_number':5418,'multiline':False]
['text':' "gN" selects previous match','line_number':5419,'multiline':False]
['text':' "gj" and "gk" two new funny movement keys -- up and down','line_number':5427,'multiline':False]
['text':' movement based on *screen* line rather than *file* line.','line_number':5428,'multiline':False]
['text':' with 'nowrap' it works just like the normal "j" command.','line_number':5431,'multiline':False]
['text':' with 'nowrap' it works just like the normal "k" command.','line_number':5445,'multiline':False]
['text':' "gJ": join two lines without inserting a space.','line_number':5457,'multiline':False]
['text':' "g0", "g^" : Like "0" and "^" but for screen lines.','line_number':5462,'multiline':False]
['text':' "gm": middle of "g0" and "g$".','line_number':5463,'multiline':False]
['text':' "g_": to the last non-blank character in the line or <count> lines downward.','line_number':5484,'multiline':False]
['text':' "g$" : Like "$" but for screen lines.','line_number':5489,'multiline':False]
['text':' "g*" and "g#", like "*" and "#" but without using "\<" and "\>"','line_number':5496,'multiline':False]
['text':' pound sign (sometimes equal to '#')','line_number':5500,'multiline':False]
['text':' :tag or :tselect for current identifier','line_number':5502,'multiline':False]
['text':' :tselect for current identifier','line_number':5503,'multiline':False]
['text':' ge and gE: go back to end of word','line_number':5507,'multiline':False]
['text':' "g CTRL-G": display info about cursor position','line_number':5518,'multiline':False]
['text':' "gi": start Insert at the last position.','line_number':5523,'multiline':False]
['text':' "gI": Start insert in column 1.','line_number':5528,'multiline':False]
['text':' "gf": goto file, edit file under cursor','line_number':5536,'multiline':False]
['text':' "]f" and "[f": can also be used.','line_number':5537,'multiline':False]
['text':' "g'm" and "g`m": jump to mark without setting pcmark','line_number':5543,'multiline':False]
['text':' "gs": Goto sleep.','line_number':5551,'multiline':False]
['text':' "ga": Display the ascii value of the character under the','line_number':5556,'multiline':False]
['text':' cursor.    It is displayed in decimal, hex, and octal. -- webb','line_number':5557,'multiline':False]
['text':' "g8": Display the bytes used for the UTF-8 character under the','line_number':5562,'multiline':False]
['text':' cursor.    It is displayed in hex.','line_number':5563,'multiline':False]
['text':' "8g8" finds illegal byte sequence.','line_number':5564,'multiline':False]
['text':' "g<": show scrollback text','line_number':5572,'multiline':False]
['text':' "gg": Goto the first line in file.  With a count it goes to','line_number':5577,'multiline':False]
['text':' that line number like for "G". -- webb','line_number':5578,'multiline':False]
['text':'  Two-character operators:','line_number':5584,'multiline':False]
['text':'  "gq"       Format text','line_number':5585,'multiline':False]
['text':'  "gw"       Format text and keep cursor position','line_number':5586,'multiline':False]
['text':'  "g~"       Toggle the case of the text.','line_number':5587,'multiline':False]
['text':'  "gu"       Change text to lower case.','line_number':5588,'multiline':False]
['text':'  "gU"       Change text to upper case.','line_number':5589,'multiline':False]
['text':'  "g?"       rot13 encoding','line_number':5590,'multiline':False]
['text':'  "g@"       call 'operatorfunc'','line_number':5591,'multiline':False]
['text':' "gd": Find first occurrence of pattern under the cursor in the current function','line_number':5604,'multiline':False]
['text':' "gD": idem, but in the current file.','line_number':5605,'multiline':False]
['text':' g<*Mouse> : <C-*mouse>','line_number':5611,'multiline':False]
['text':' "gP" and "gp": same as "P" and "p" but leave cursor just after new text','line_number':5635,'multiline':False]
['text':' "go": goto byte count from start of buffer','line_number':5641,'multiline':False]
['text':' "gQ": improved Ex mode','line_number':5646,'multiline':False]
['text':' "g+" and "g-": undo or redo along the timeline','line_number':5680,'multiline':False]
['text':'/ Handle "o" and "O" commands.','line_number':5693,'multiline':False]
['text':' Open above the first line of a folded sequence of lines','line_number':5701,'multiline':False]
['text':' Open below the last line of a folded sequence of lines','line_number':5705,'multiline':False]
['text':' trigger TextChangedI for the 'o/O' command','line_number':5709,'multiline':False]
['text':' force redraw of cursorline','line_number':5717,'multiline':False]
['text':'/ "." command: redo last change.','line_number':5724,'multiline':False]
['text':' If "restart_edit" is true, the last but one command is repeated','line_number':5731,'multiline':False]
['text':' instead of the last command (inserting text). This is used for','line_number':5732,'multiline':False]
['text':' CTRL-O <.> in insert mode.','line_number':5733,'multiline':False]
['text':'/ CTRL-R: undo undo or specify register in select mode','line_number':5739,'multiline':False]
['text':' Get register name','line_number':5743,'multiline':False]
['text':' the unnamed register is 0','line_number':5750,'multiline':False]
['text':'/ Handle "U" command.','line_number':5766,'multiline':False]
['text':' In Visual mode and typing "gUU" triggers an operator','line_number':5769,'multiline':False]
['text':' translate "gUU" to "gUgU"','line_number':5771,'multiline':False]
['text':'/ '~' command: If tilde is not an operator and Visual is off: swap case of a','line_number':5786,'multiline':False]
['text':'/ single character.','line_number':5787,'multiline':False]
['text':'/ Handle an operator command.','line_number':5801,'multiline':False]
['text':'/ The actual work is done by do_pending_operator().','line_number':5802,'multiline':False]
['text':' double operator works on lines','line_number':5813,'multiline':False]
['text':'/ Set v:operator to the characters for "optype".','line_number':5822,'multiline':False]
['text':'/ Handle linewise operator "dd", "yy", etc.','line_number':5842,'multiline':False]
['text':'/','line_number':5843,'multiline':False]
['text':'/ "_" is is a strange motion command that helps make operators more logical.','line_number':5844,'multiline':False]
['text':'/ It is actually implemented, but not documented in the real Vi.  This motion','line_number':5845,'multiline':False]
['text':'/ command actually refers to "the current line".  Commands like "dd" and "yy"','line_number':5846,'multiline':False]
['text':'/ are really an alternate form of "d_" and "y_".  It does accept a count, so','line_number':5847,'multiline':False]
['text':'/ "d3_" works to delete 3 lines.','line_number':5848,'multiline':False]
['text':' only with linewise motions','line_number':5855,'multiline':False]
['text':' 'Y' does not move cursor','line_number':5861,'multiline':False]
['text':'/ <Home> command.','line_number':5866,'multiline':False]
['text':' CTRL-HOME is like "gg"','line_number':5869,'multiline':False]
['text':' Don't move cursor past eol (only necessary in a','line_number':5876,'multiline':False]
['text':' one-character line).','line_number':5877,'multiline':False]
['text':'/ "|" command.','line_number':5880,'multiline':False]
['text':' keep curswant at the column where we wanted to go, not where','line_number':5892,'multiline':False]
['text':' we ended; differs if line is too short','line_number':5893,'multiline':False]
['text':'/ Handle back-word command "b" and "B".','line_number':5897,'multiline':False]
['text':'/ cap->arg is 1 for "B"','line_number':5898,'multiline':False]
['text':'/ Handle word motion commands "e", "E", "w" and "W".','line_number':5911,'multiline':False]
['text':'/ cap->arg is true for "E" and "W".','line_number':5912,'multiline':False]
['text':' Set inclusive for the "E" and "e" command.','line_number':5920,'multiline':False]
['text':' "cw" and "cW" are a special case.','line_number':5928,'multiline':False]
['text':' This is a little strange.  To match what the real Vi does, we','line_number':5932,'multiline':False]
['text':' effectively map "cw" to "ce", and "cW" to "cE", provided that we are','line_number':5933,'multiline':False]
['text':' not on a space or a TAB.  This seems impolite at first, but it's','line_number':5934,'multiline':False]
['text':' really more what we mean when we say "cw".','line_number':5935,'multiline':False]
['text':'','line_number':5936,'multiline':False]
['text':' Another strangeness: When standing on the end of a word "ce" will','line_number':5937,'multiline':False]
['text':' change until the end of the next word, but "cw" will change only one','line_number':5938,'multiline':False]
['text':' character!  This is done by setting "flag".','line_number':5939,'multiline':False]
['text':' Don't leave the cursor on the NUL past the end of line. Unless we','line_number':5956,'multiline':False]
['text':' didn't move it forward.','line_number':5957,'multiline':False]
['text':'/ Used after a movement command: If the cursor ends up on the NUL after the','line_number':5972,'multiline':False]
['text':'/ end of the line, may move it back to the last character and make the motion','line_number':5973,'multiline':False]
['text':'/ inclusive.','line_number':5974,'multiline':False]
['text':' The cursor cannot remain on the NUL when:','line_number':5977,'multiline':False]
['text':' - the column is > 0','line_number':5978,'multiline':False]
['text':' - not in Visual mode or 'selection' is "o"','line_number':5979,'multiline':False]
['text':' - 'virtualedit' is not "all" and not "onemore".','line_number':5980,'multiline':False]
['text':' prevent cursor from moving on the trail byte','line_number':5986,'multiline':False]
['text':'/ "0" and "^" commands.','line_number':5992,'multiline':False]
['text':'/ cap->arg is the argument for beginline().','line_number':5993,'multiline':False]
['text':' Don't move cursor past eol (only necessary in a','line_number':6002,'multiline':False]
['text':' one-character line).','line_number':6003,'multiline':False]
['text':'/ In exclusive Visual mode, may include the last character.','line_number':6006,'multiline':False]
['text':'/ Exclude last character at end of Visual area for 'selection' == "exclusive".','line_number':6016,'multiline':False]
['text':'/ Should check VIsual_mode before calling this.','line_number':6017,'multiline':False]
['text':'/','line_number':6018,'multiline':False]
['text':'/ @return  true when backed up to the previous line.','line_number':6019,'multiline':False]
['text':'/ SELECT key in Normal or Visual mode: end of Select mode mapping.','line_number':6043,'multiline':False]
['text':' fake "gv" command','line_number':6050,'multiline':False]
['text':'/ "G", "gg", CTRL-END, CTRL-HOME.','line_number':6056,'multiline':False]
['text':'/ cap->arg is true for "G".','line_number':6057,'multiline':False]
['text':' When a count is given, use it instead of the default lnum','line_number':6070,'multiline':False]
['text':'/ CTRL-\ in Normal mode.','line_number':6086,'multiline':False]
['text':' unshow mode later','line_number':6092,'multiline':False]
['text':' stop Visual','line_number':6099,'multiline':False]
['text':'/ ESC in Normal mode: beep, but don't flush buffers.','line_number':6107,'multiline':False]
['text':'/ Don't even beep if we are canceling a command.','line_number':6108,'multiline':False]
['text':' true for CTRL-C','line_number':6116,'multiline':False]
['text':' remove "-- (insert) --"','line_number':6127,'multiline':False]
['text':' don't stop executing autocommands et al.','line_number':6134,'multiline':False]
['text':' When :normal runs out of characters while in the command line window','line_number':6138,'multiline':False]
['text':' vgetorpeek() will repeatedly return ESC.  Exit the cmdline window to','line_number':6139,'multiline':False]
['text':' break the loop.','line_number':6140,'multiline':False]
['text':' stop Visual','line_number':6146,'multiline':False]
['text':' make sure cursor is not beyond EOL','line_number':6147,'multiline':False]
['text':'/ Move the cursor for the "A" command.','line_number':6156,'multiline':False]
['text':' Pretend Insert mode here to allow the cursor on the','line_number':6162,'multiline':False]
['text':' character past the end of the line','line_number':6163,'multiline':False]
['text':'/ Handle "A", "a", "I", "i" and <Insert> commands.','line_number':6172,'multiline':False]
['text':' <Insert> is equal to "i"','line_number':6175,'multiline':False]
['text':' in Visual mode "A" and "I" are an operator','line_number':6180,'multiline':False]
['text':' in Visual mode and after an operator "a" and "i" are for text objects','line_number':6183,'multiline':False]
['text':' "A"ppend after the line','line_number':6192,'multiline':False]
['text':' "I"nsert before the first non-blank','line_number':6196,'multiline':False]
['text':' "a"ppend is like "i"nsert on the next character.','line_number':6200,'multiline':False]
['text':' increment coladd when in virtual space, increment the','line_number':6201,'multiline':False]
['text':' column otherwise, also to append after an unprintable char','line_number':6202,'multiline':False]
['text':' Pretend Insert mode here to allow the cursor on the','line_number':6217,'multiline':False]
['text':' character past the end of the line','line_number':6218,'multiline':False]
['text':'/ Invoke edit() and take care of "restart_edit" and the return value.','line_number':6228,'multiline':False]
['text':'/','line_number':6229,'multiline':False]
['text':'/ @param repl  "r" or "gr" command','line_number':6230,'multiline':False]
['text':' Complicated: When the user types "a<C-O>a" we don't want to do Insert','line_number':6235,'multiline':False]
['text':' mode recursively.  But when doing "a<C-O>." or "a<C-O>rx" we do allow','line_number':6236,'multiline':False]
['text':' it.','line_number':6237,'multiline':False]
['text':' Always reset "restart_edit", this is not a restarted edit.','line_number':6244,'multiline':False]
['text':' Reset Changedtick_i, so that TextChangedI will only be triggered for stuff','line_number':6247,'multiline':False]
['text':' from insert mode, for 'o/O' this has already been done in n_opencmd','line_number':6248,'multiline':False]
['text':'/ "a" or "i" while an operator is pending or in Visual mode: object motion.','line_number':6261,'multiline':False]
['text':' "ix" = inner object: exclude white space','line_number':6268,'multiline':False]
['text':' "ax" = an object: include white space','line_number':6270,'multiline':False]
['text':' Make sure (), [], {} and <> are in 'matchpairs'','line_number':6272,'multiline':False]
['text':' "aw" = a word','line_number':6277,'multiline':False]
['text':' "aW" = a WORD','line_number':6280,'multiline':False]
['text':' "ab" = a braces block','line_number':6283,'multiline':False]
['text':' "aB" = a Brackets block','line_number':6288,'multiline':False]
['text':' "a[" = a [] block','line_number':6293,'multiline':False]
['text':' "a<" = a <> block','line_number':6297,'multiline':False]
['text':' "at" = a tag block (xml and html)','line_number':6301,'multiline':False]
['text':' Do not adjust oap->end in do_pending_operator()','line_number':6302,'multiline':False]
['text':' otherwise there are different results for 'dit'','line_number':6303,'multiline':False]
['text':' (note leading whitespace in last line):','line_number':6304,'multiline':False]
['text':' 1) <b>      2) <b>','line_number':6305,'multiline':False]
['text':'    foobar      foobar','line_number':6306,'multiline':False]
['text':'    </b>            </b>','line_number':6307,'multiline':False]
['text':' "ap" = a paragraph','line_number':6311,'multiline':False]
['text':' "as" = a sentence','line_number':6314,'multiline':False]
['text':' "a'" = a single quoted string','line_number':6318,'multiline':False]
['text':' "a`" = a backtick quoted string','line_number':6319,'multiline':False]
['text':'/ "q" command: Start/stop recording.','line_number':6336,'multiline':False]
['text':'/ "q:", "q/", "q?": edit command-line in command-line window.','line_number':6337,'multiline':False]
['text':' "gqq" is the same as "gqgq": format line','line_number':6341,'multiline':False]
['text':' (stop) recording into a named register, unless executing a','line_number':6360,'multiline':False]
['text':' register.','line_number':6361,'multiline':False]
['text':'/ Handle the "@r" command.','line_number':6368,'multiline':False]
['text':'/ Handle the CTRL-U and CTRL-D commands.','line_number':6388,'multiline':False]
['text':'/ Handle "J" or "gJ" command.','line_number':6400,'multiline':False]
['text':' join the visual lines','line_number':6403,'multiline':False]
['text':' default for join is two lines!','line_number':6413,'multiline':False]
['text':' can't join when on the last line','line_number':6417,'multiline':False]
['text':'/ "P", "gP", "p" and "gp" commands.','line_number':6430,'multiline':False]
['text':'/ "P", "gP", "p" and "gp" commands.','line_number':6436,'multiline':False]
['text':'/','line_number':6437,'multiline':False]
['text':'/ @param fix_indent  true for "[p", "[P", "]p" and "]P".','line_number':6438,'multiline':False]
['text':' "dp" is ":diffput"','line_number':6448,'multiline':False]
['text':' Putting in Visual mode: The put text replaces the selected','line_number':6481,'multiline':False]
['text':' text.  First delete the selected text, then put the new text.','line_number':6482,'multiline':False]
['text':' Need to save and restore the registers that the delete','line_number':6483,'multiline':False]
['text':' overwrites if the old contents is being put.','line_number':6484,'multiline':False]
['text':' '+' and '*' could be the same selection','line_number':6488,'multiline':False]
['text':' The delete might overwrite the register we want to put, save it first','line_number':6492,'multiline':False]
['text':' To place the cursor correctly after a blockwise put, and to leave the','line_number':6496,'multiline':False]
['text':' text in the correct position when putting over a selection with','line_number':6497,'multiline':False]
['text':' 'virtualedit' and past the end of the line, we use the 'c' operator in','line_number':6498,'multiline':False]
['text':' do_put(), which requires the visual selection to still be active.','line_number':6499,'multiline':False]
['text':' Now delete the selected text. Avoid messages here.','line_number':6501,'multiline':False]
['text':' delete PUT_LINE_BACKWARD;','line_number':6511,'multiline':False]
['text':' When deleted a linewise Visual area, put the register as','line_number':6515,'multiline':False]
['text':' lines to avoid it joined with the next line.  When deletion was','line_number':6516,'multiline':False]
['text':' charwise, split a line when putting lines.','line_number':6517,'multiline':False]
['text':' cursor is at the end of the line or end of file, put','line_number':6531,'multiline':False]
['text':' forward.','line_number':6532,'multiline':False]
['text':' May have been reset in do_put().','line_number':6535,'multiline':False]
['text':' If a register was saved, free it','line_number':6540,'multiline':False]
['text':' What to reselect with "gv"?  Selecting the just put text seems to','line_number':6546,'multiline':False]
['text':' be the most useful, since the original text was removed.','line_number':6547,'multiline':False]
['text':' need to adjust cursor position','line_number':6551,'multiline':False]
['text':' When all lines were selected and deleted do_put() leaves an empty','line_number':6557,'multiline':False]
['text':' line that needs to be deleted now.','line_number':6558,'multiline':False]
['text':' If the cursor was in that line, move it to the end of the last','line_number':6563,'multiline':False]
['text':' line.','line_number':6564,'multiline':False]
['text':'/ "o" and "O" commands.','line_number':6573,'multiline':False]
['text':' "do" is ":diffget"','line_number':6576,'multiline':False]
['text':' switch start and end of visual/','line_number':6582,'multiline':False]
['text':'/ Handle an arbitrary event in normal mode','line_number':6591,'multiline':False]
['text':' Garbage collection should have been executed before blocking for events in','line_number':6594,'multiline':False]
['text':' the `os_inchar` in `state_enter`, but we also disable it here in case the','line_number':6595,'multiline':False]
['text':' `os_inchar` branch was not executed (!multiqueue_empty(loop.events), which','line_number':6596,'multiline':False]
['text':' could have `may_garbage_collect` set to true in `normal_check`).','line_number':6597,'multiline':False]
['text':'','line_number':6598,'multiline':False]
['text':' That is because here we may run code that calls `os_inchar`','line_number':6599,'multiline':False]
['text':' later(`f_confirm` or `get_keystroke` for example), but in these cases it is','line_number':6600,'multiline':False]
['text':' not safe to perform garbage collection because there could be unreferenced','line_number':6601,'multiline':False]
['text':' lists or dicts being used.','line_number':6602,'multiline':False]
['text':' Tricky: if restart_edit was set before the handler we are in ctrl-o mode,','line_number':6608,'multiline':False]
['text':' but if not, the event should be allowed to trigger :startinsert.','line_number':6609,'multiline':False]
['text':' don't call edit() or restart Select now','line_number':6610,'multiline':False]
