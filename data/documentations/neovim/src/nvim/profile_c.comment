['text':'/ Struct used in sn_prl_ga for every line of a script.','line_number':37,'multiline':False]
['text':'/< nr of times line was executed','line_number':39,'multiline':False]
['text':'/< time spent in a line + children','line_number':40,'multiline':False]
['text':'/< time spent in a line itself','line_number':41,'multiline':False]
['text':'/ Gets the current time.','line_number':48,'multiline':False]
['text':'/','line_number':49,'multiline':False]
['text':'/ @return the current time','line_number':50,'multiline':False]
['text':'/ Computes the time elapsed.','line_number':56,'multiline':False]
['text':'/','line_number':57,'multiline':False]
['text':'/ @return Elapsed time from `tm` until now.','line_number':58,'multiline':False]
['text':'/ Gets a string representing time `tm`.','line_number':64,'multiline':False]
['text':'/','line_number':65,'multiline':False]
['text':'/ @warning Do not modify or free this string, not multithread-safe.','line_number':66,'multiline':False]
['text':'/','line_number':67,'multiline':False]
['text':'/ @param tm Time','line_number':68,'multiline':False]
['text':'/ @return Static string representing `tm` in the form "seconds.microseconds".','line_number':69,'multiline':False]
['text':'/ Gets the time `msec` into the future.','line_number':78,'multiline':False]
['text':'/','line_number':79,'multiline':False]
['text':'/ @param msec milliseconds, the maximum number of milliseconds is','line_number':80,'multiline':False]
['text':'/             (2^63 / 10^6) - 1 = 9.223372e+12.','line_number':81,'multiline':False]
['text':'/ @return if msec > 0, returns the time msec past now. Otherwise returns','line_number':82,'multiline':False]
['text':'/         the zero time.','line_number':83,'multiline':False]
['text':' no limit','line_number':87,'multiline':False]
['text':'/ Checks if current time has passed `tm`.','line_number':95,'multiline':False]
['text':'/','line_number':96,'multiline':False]
['text':'/ @return true if the current time is past `tm`, false if not or if the','line_number':97,'multiline':False]
['text':'/         timer was not set.','line_number':98,'multiline':False]
['text':' timer was not set','line_number':102,'multiline':False]
['text':'/ Gets the zero time.','line_number':109,'multiline':False]
['text':'/','line_number':110,'multiline':False]
['text':'/ @return the zero time','line_number':111,'multiline':False]
['text':'/ Divides time `tm` by `count`.','line_number':117,'multiline':False]
['text':'/','line_number':118,'multiline':False]
['text':'/ @return 0 if count <= 0, otherwise tm / count','line_number':119,'multiline':False]
['text':'/ Adds time `tm2` to `tm1`.','line_number':129,'multiline':False]
['text':'/','line_number':130,'multiline':False]
['text':'/ @return `tm1` + `tm2`','line_number':131,'multiline':False]
['text':'/ Subtracts time `tm2` from `tm1`.','line_number':137,'multiline':False]
['text':'/','line_number':138,'multiline':False]
['text':'/ Unsigned overflow (wraparound) occurs if `tm2` is greater than `tm1`.','line_number':139,'multiline':False]
['text':'/ Use `profile_signed()` to get the signed integer value.','line_number':140,'multiline':False]
['text':'/','line_number':141,'multiline':False]
['text':'/ @see profile_signed','line_number':142,'multiline':False]
['text':'/','line_number':143,'multiline':False]
['text':'/ @return `tm1` - `tm2`','line_number':144,'multiline':False]
['text':'/ Adds the `self` time from the total time and the `children` time.','line_number':150,'multiline':False]
['text':'/','line_number':151,'multiline':False]
['text':'/ @return if `total` <= `children`, then self, otherwise `self` + `total` -','line_number':152,'multiline':False]
['text':'/         `children`','line_number':153,'multiline':False]
['text':' check that the result won't be negative, which can happen with','line_number':157,'multiline':False]
['text':' recursive calls.','line_number':158,'multiline':False]
['text':' add the total time to self and subtract the children's time from self','line_number':163,'multiline':False]
['text':'/ Gets the current waittime.','line_number':167,'multiline':False]
['text':'/','line_number':168,'multiline':False]
['text':'/ @return the current waittime','line_number':169,'multiline':False]
['text':'/ Sets the current waittime.','line_number':175,'multiline':False]
['text':'/ Subtracts the passed waittime since `tm`.','line_number':181,'multiline':False]
['text':'/','line_number':182,'multiline':False]
['text':'/ @return `tma` - (waittime - `tm`)','line_number':183,'multiline':False]
['text':'/ Checks if time `tm1` is equal to `tm2`.','line_number':190,'multiline':False]
['text':'/','line_number':191,'multiline':False]
['text':'/ @return true if `tm1` == `tm2`','line_number':192,'multiline':False]
['text':'/ Converts time duration `tm` (`profile_sub` result) to a signed integer.','line_number':198,'multiline':False]
['text':'/','line_number':199,'multiline':False]
['text':'/ @return signed representation of the given time value','line_number':200,'multiline':False]
['text':' (tm > INT64_MAX) is >=150 years, so we can assume it was produced by','line_number':204,'multiline':False]
['text':' arithmetic of two proftime_T values.  For human-readable representation','line_number':205,'multiline':False]
['text':' (and Vim-compat) we want the difference after unsigned wraparound. #10452','line_number':206,'multiline':False]
['text':'/ Compares profiling times.','line_number':210,'multiline':False]
['text':'/','line_number':211,'multiline':False]
['text':'/ Times `tm1` and `tm2` must be less than 150 years apart.','line_number':212,'multiline':False]
['text':'/','line_number':213,'multiline':False]
['text':'/ @return <0: `tm2` < `tm1`','line_number':214,'multiline':False]
['text':'/          0: `tm2` == `tm1`','line_number':215,'multiline':False]
['text':'/         >0: `tm2` > `tm1`','line_number':216,'multiline':False]
['text':'/ Reset all profiling information.','line_number':227,'multiline':False]
['text':' Reset sourced files.','line_number':230,'multiline':False]
['text':' Reset functions.','line_number':252,'multiline':False]
['text':'/ ":profile cmd args"','line_number':285,'multiline':False]
['text':' The rest is similar to ":breakadd".','line_number':321,'multiline':False]
['text':'/ Command line expansion for :profile.','line_number':326,'multiline':False]
['text':'/< expand :profile sub-commands','line_number':328,'multiline':False]
['text':'/< expand :profile func {funcname}','line_number':329,'multiline':False]
['text':'/ Function given to ExpandGeneric() to obtain the profile command','line_number':343,'multiline':False]
['text':'/ specific expansion.','line_number':344,'multiline':False]
['text':'/ Handle command line completion for :profile command.','line_number':356,'multiline':False]
['text':' Default: expand subcommands.','line_number':359,'multiline':False]
['text':'/ Called when starting to wait for the user to type a character.','line_number':385,'multiline':False]
['text':'/ Called when finished waiting for the user to type a character.','line_number':391,'multiline':False]
['text':'/ @return  true when a function defined in the current script should be','line_number':398,'multiline':False]
['text':'/          profiled.','line_number':399,'multiline':False]
['text':'/ Print the count and times for one function or function line.','line_number':409,'multiline':False]
['text':'/','line_number':410,'multiline':False]
['text':'/ @param prefer_self  when equal print only self time','line_number':411,'multiline':False]
['text':'/ @param prefer_self  when equal print only self time','line_number':432,'multiline':False]
['text':'/ Compare function for total time sorting.','line_number':450,'multiline':False]
['text':'/ Compare function for self time sorting.','line_number':458,'multiline':False]
['text':'/ Start profiling function "fp".','line_number':466,'multiline':False]
['text':' avoid getting error for allocating zero bytes','line_number':473,'multiline':False]
['text':'/ Prepare profiling for entering a child or something else that is not','line_number':498,'multiline':False]
['text':'/ counted for the script/function itself.','line_number':499,'multiline':False]
['text':'/ Should always be called in pair with prof_child_exit().','line_number':500,'multiline':False]
['text':'/','line_number':501,'multiline':False]
['text':'/ @param tm  place to store waittime','line_number':502,'multiline':False]
['text':'/ Take care of time spent in a child.','line_number':514,'multiline':False]
['text':'/ Should always be called after prof_child_enter().','line_number':515,'multiline':False]
['text':'/','line_number':516,'multiline':False]
['text':'/ @param tm  where waittime was stored','line_number':517,'multiline':False]
['text':' don't count waiting time','line_number':524,'multiline':False]
['text':'/ Called when starting to read a function line.','line_number':534,'multiline':False]
['text':'/ "sourcing_lnum" must be correct!','line_number':535,'multiline':False]
['text':'/ When skipping lines it may not actually be executed, but we won't find out','line_number':536,'multiline':False]
['text':'/ until later and we need to store the time now.','line_number':537,'multiline':False]
['text':' Skip continuation lines.','line_number':545,'multiline':False]
['text':'/ Called when actually executing a function line.','line_number':556,'multiline':False]
['text':'/ Called when done with a function line.','line_number':567,'multiline':False]
['text':'/ Dump the profiling results for all functions in file "fd".','line_number':588,'multiline':False]
['text':' nothing to dump','line_number':596,'multiline':False]
['text':'/ Start profiling a script.','line_number':661,'multiline':False]
['text':'/ Save time when starting to invoke another script or function.','line_number':674,'multiline':False]
['text':'/','line_number':675,'multiline':False]
['text':'/ @param tm  place to store wait time','line_number':676,'multiline':False]
['text':'/ Count time spent in children after invoking another script or function.','line_number':688,'multiline':False]
['text':' don't count wait time','line_number':698,'multiline':False]
['text':'/ Dump the profiling results for all scripts in file "fd".','line_number':705,'multiline':False]
['text':' Keep going till the end of file, so that trailing','line_number':728,'multiline':False]
['text':' continuation lines are listed.','line_number':729,'multiline':False]
['text':' When a line has been truncated, append NL, taking care','line_number':734,'multiline':False]
['text':' of multi-byte characters .','line_number':735,'multiline':False]
['text':' Move to the first byte of this char.','line_number':739,'multiline':False]
['text':' utf_head_off() doesn't work, because it checks','line_number':740,'multiline':False]
['text':' for a truncated character.','line_number':741,'multiline':False]
['text':'/ Dump the profiling info.','line_number':770,'multiline':False]
['text':'/ Called when starting to read a script line.','line_number':787,'multiline':False]
['text':'/ "sourcing_lnum" must be correct!','line_number':788,'multiline':False]
['text':'/ When skipping lines it may not actually be executed, but we won't find out','line_number':789,'multiline':False]
['text':'/ until later and we need to store the time now.','line_number':790,'multiline':False]
['text':' Grow the array before starting the timer, so that the time spent','line_number':798,'multiline':False]
['text':' here isn't counted.','line_number':799,'multiline':False]
['text':' Zero counters for a line that was not used before.','line_number':804,'multiline':False]
['text':'/ Called when actually executing a function line.','line_number':818,'multiline':False]
['text':'/ Called when done with a function line.','line_number':830,'multiline':False]
['text':'/ globals for use in the startuptime related functionality (time_*).','line_number':852,'multiline':False]
['text':'/ Saves the previous time before doing something that could nest.','line_number':856,'multiline':False]
['text':'/','line_number':857,'multiline':False]
['text':'/ After calling this function, the static global `g_prev_time` will','line_number':858,'multiline':False]
['text':'/ contain the current time.','line_number':859,'multiline':False]
['text':'/','line_number':860,'multiline':False]
['text':'/ @param[out] rel to the time elapsed so far','line_number':861,'multiline':False]
['text':'/ @param[out] start the current time','line_number':862,'multiline':False]
['text':' subtract the previous time from now, store it in `rel`','line_number':867,'multiline':False]
['text':' reset global `g_prev_time` for the next call','line_number':871,'multiline':False]
['text':'/ Computes the prev time after doing something that could nest.','line_number':875,'multiline':False]
['text':'/','line_number':876,'multiline':False]
['text':'/ Subtracts `tp` from the static global `g_prev_time`.','line_number':877,'multiline':False]
['text':'/','line_number':878,'multiline':False]
['text':'/ @param tp the time to subtract','line_number':879,'multiline':False]
['text':'/ Prints the difference between `then` and `now`.','line_number':885,'multiline':False]
['text':'/','line_number':886,'multiline':False]
['text':'/ the format is "msec.usec".','line_number':887,'multiline':False]
['text':'/ Initializes the startuptime code.','line_number':894,'multiline':False]
['text':'/','line_number':895,'multiline':False]
['text':'/ Must be called once before calling other startuptime code (such as','line_number':896,'multiline':False]
['text':'/ time_{push,pop,msg,...}).','line_number':897,'multiline':False]
['text':'/','line_number':898,'multiline':False]
['text':'/ @param message the message that will be displayed','line_number':899,'multiline':False]
['text':' initialize the global variables','line_number':906,'multiline':False]
['text':'/ Prints out timing info.','line_number':916,'multiline':False]
['text':'/','line_number':917,'multiline':False]
['text':'/ @warning don't forget to call `time_start()` once before calling this.','line_number':918,'multiline':False]
['text':'/','line_number':919,'multiline':False]
['text':'/ @param mesg the message to display next to the timing information','line_number':920,'multiline':False]
['text':'/ @param start only for do_source: start time','line_number':921,'multiline':False]
['text':' print out the difference between `start` (init earlier) and `now`','line_number':928,'multiline':False]
['text':' if `start` was supplied, print the diff between `start` and `now`','line_number':932,'multiline':False]
['text':' print the difference between the global `g_prev_time` and `now`','line_number':938,'multiline':False]
['text':' reset `g_prev_time` and print the message','line_number':942,'multiline':False]
