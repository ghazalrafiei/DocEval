['text':'/ Type for hash number (hash calculation result).','line_number':5,'multiline':False]
['text':'/ Hashtable item.','line_number':8,'multiline':False]
['text':'/','line_number':9,'multiline':False]
['text':'/ Each item has a NUL terminated string key.','line_number':10,'multiline':False]
['text':'/ A key can appear only once in the table.','line_number':11,'multiline':False]
['text':'/','line_number':12,'multiline':False]
['text':'/ A hash number is computed from the key for quick lookup.  When the hashes','line_number':13,'multiline':False]
['text':'/ of two different keys point to the same entry an algorithm is used to','line_number':14,'multiline':False]
['text':'/ iterate over other entries in the table until the right one is found.','line_number':15,'multiline':False]
['text':'/ To make the iteration work removed keys are different from entries where a','line_number':16,'multiline':False]
['text':'/ key was never present.','line_number':17,'multiline':False]
['text':'/','line_number':18,'multiline':False]
['text':'/ Note that this does not contain a pointer to the key and another pointer to','line_number':19,'multiline':False]
['text':'/ the value. Instead, it is assumed that the key is contained within the','line_number':20,'multiline':False]
['text':'/ value, so that you can get a pointer to the value subtracting an offset from','line_number':21,'multiline':False]
['text':'/ the pointer to the key.','line_number':22,'multiline':False]
['text':'/ This reduces the size of this item by 1/3.','line_number':23,'multiline':False]
['text':'/ Cached hash number for hi_key.','line_number':25,'multiline':False]
['text':'/ Item key.','line_number':28,'multiline':False]
['text':'/','line_number':29,'multiline':False]
['text':'/ Possible values mean the following:','line_number':30,'multiline':False]
['text':'/ NULL                      : Item was never used.','line_number':31,'multiline':False]
['text':'/ HI_KEY_REMOVED            : Item was removed.','line_number':32,'multiline':False]
['text':'/ (Any other pointer value) : Item is currently being used.','line_number':33,'multiline':False]
['text':'/ Initial size for a hashtable.','line_number':38,'multiline':False]
['text':'/ Our items are relatively small and growing is expensive, thus start with 16.','line_number':39,'multiline':False]
['text':'/ Must be a power of 2.','line_number':40,'multiline':False]
['text':'/ This allows for storing 10 items (2/3 of 16) before a resize is needed.','line_number':41,'multiline':False]
['text':'/ An array-based hashtable.','line_number':45,'multiline':False]
['text':'/','line_number':46,'multiline':False]
['text':'/ Keys are NUL terminated strings. They cannot be repeated within a table.','line_number':47,'multiline':False]
['text':'/ Values are of any type.','line_number':48,'multiline':False]
['text':'/','line_number':49,'multiline':False]
['text':'/ The hashtable grows to accommodate more entries when needed.','line_number':50,'multiline':False]
['text':'/< mask used for hash value','line_number':52,'multiline':False]
['text':'/< (nr of items in array is "ht_mask" + 1)','line_number':53,'multiline':False]
['text':'/< number of items used','line_number':54,'multiline':False]
['text':'/< number of items used or removed','line_number':55,'multiline':False]
['text':'/< incremented when adding or removing an item','line_number':56,'multiline':False]
['text':'/< counter for hash_lock()','line_number':57,'multiline':False]
['text':'/< points to the array, allocated when it's','line_number':58,'multiline':False]
['text':'/< not "ht_smallarray"','line_number':59,'multiline':False]
['text':'/< initial array','line_number':60,'multiline':False]
