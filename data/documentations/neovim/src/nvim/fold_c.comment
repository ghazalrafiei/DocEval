['text':' vim: set fdm=marker fdl=1 fdc=3','line_number':1,'multiline':False]
['text':' fold.c: code for folding','line_number':3,'multiline':False]
['text':' local declarations. {{{1','line_number':54,'multiline':False]
['text':' typedef fold_T {{{2','line_number':55,'multiline':False]
['text':' The toplevel folds for each window are stored in the w_folds growarray.','line_number':57,'multiline':False]
['text':' Each toplevel fold can contain an array of second level folds in the','line_number':58,'multiline':False]
['text':' fd_nested growarray.','line_number':59,'multiline':False]
['text':' The info stored in both growarrays is the same: An array of fold_T.','line_number':60,'multiline':False]
['text':' first line of fold; for nested fold','line_number':63,'multiline':False]
['text':' relative to parent','line_number':64,'multiline':False]
['text':' number of lines in the fold','line_number':65,'multiline':False]
['text':' array of nested folds','line_number':66,'multiline':False]
['text':' see below','line_number':67,'multiline':False]
['text':' kTrue, kFalse, or kNone: fold smaller than','line_number':68,'multiline':False]
['text':' 'foldminlines'; kNone applies to nested','line_number':69,'multiline':False]
['text':' folds too','line_number':70,'multiline':False]
['text':' fold is open (nested ones can be closed)','line_number':74,'multiline':False]
['text':' fold is closed','line_number':75,'multiline':False]
['text':' depends on 'foldlevel' (nested folds too)','line_number':76,'multiline':False]
['text':' maximum fold depth','line_number':79,'multiline':False]
['text':' Define "fline_T", passed to get fold level for a line. {{{2','line_number':81,'multiline':False]
['text':' window','line_number':83,'multiline':False]
['text':' current line number','line_number':84,'multiline':False]
['text':' offset between lnum and real line number','line_number':85,'multiline':False]
['text':' line nr used by foldUpdateIEMSRecurse()','line_number':86,'multiline':False]
['text':' current level (-1 for undefined)','line_number':87,'multiline':False]
['text':' level used for next line','line_number':88,'multiline':False]
['text':' number of folds that are forced to start at','line_number':89,'multiline':False]
['text':' this line.','line_number':90,'multiline':False]
['text':' level of fold that is forced to end below','line_number':91,'multiline':False]
['text':' this line','line_number':92,'multiline':False]
['text':' level of fold that is forced to end above','line_number':93,'multiline':False]
['text':' this line (copy of "end" of prev. line)','line_number':94,'multiline':False]
['text':' Flag is set when redrawing is needed.','line_number':97,'multiline':False]
['text':' Function used by foldUpdateIEMSRecurse','line_number':100,'multiline':False]
['text':' static functions {{{2','line_number':103,'multiline':False]
['text':' While updating the folds lines between invalid_top and invalid_bot have an','line_number':110,'multiline':False]
['text':' undefined fold level.  Only used for the window currently being updated.','line_number':111,'multiline':False]
['text':' When using 'foldexpr' we sometimes get the level of the next line, which','line_number':115,'multiline':False]
['text':' calls foldlevel() to get the level of the current line, which hasn't been','line_number':116,'multiline':False]
['text':' stored yet.  To get around this chicken-egg problem the level of the','line_number':117,'multiline':False]
['text':' previous line is stored here when available.  prev_lnum is zero when the','line_number':118,'multiline':False]
['text':' level is not available.','line_number':119,'multiline':False]
['text':' Flags used for "done" argument of setManualFold.','line_number':123,'multiline':False]
['text':' did close or open a fold','line_number':125,'multiline':False]
['text':' did find a fold','line_number':126,'multiline':False]
['text':' Exported folding functions. {{{1','line_number':132,'multiline':False]
['text':' copyFoldingState() {{{2','line_number':133,'multiline':False]
['text':'/ Copy that folding state from window "wp_from" to window "wp_to".','line_number':134,'multiline':False]
['text':' hasAnyFolding() {{{2','line_number':142,'multiline':False]
['text':'/ @return  true if there may be folded lines in the current window.','line_number':143,'multiline':False]
['text':' very simple now, but can become more complex later','line_number':146,'multiline':False]
['text':' hasFolding() {{{2','line_number':151,'multiline':False]
['text':'/ When returning true, *firstp and *lastp are set to the first and last','line_number':152,'multiline':False]
['text':'/ lnum of the sequence of folded lines (skipped when NULL).','line_number':153,'multiline':False]
['text':'/','line_number':154,'multiline':False]
['text':'/ @return  true if line "lnum" in the current window is part of a closed fold.','line_number':155,'multiline':False]
['text':' hasFoldingWin() {{{2','line_number':161,'multiline':False]
['text':'/ Search folds starting at lnum','line_number':162,'multiline':False]
['text':'/ @param lnum first line to search','line_number':163,'multiline':False]
['text':'/ @param[out] first first line of fold containing lnum','line_number':164,'multiline':False]
['text':'/ @param[out] lastp last line with a fold','line_number':165,'multiline':False]
['text':'/ @param cache when true: use cached values of window','line_number':166,'multiline':False]
['text':'/ @param[out] infop where to store fold info','line_number':167,'multiline':False]
['text':'/','line_number':168,'multiline':False]
['text':'/ @return true if range contains folds','line_number':169,'multiline':False]
['text':' Return quickly when there is no folding at all in this window.','line_number':175,'multiline':False]
['text':' First look in cached info for displayed lines.  This is probably','line_number':188,'multiline':False]
['text':' the fastest, but it can only be used if the entry is still valid.','line_number':189,'multiline':False]
['text':' Recursively search for a fold that contains "lnum".','line_number':206,'multiline':False]
['text':' Remember lowest level of fold that starts in "lnum".','line_number':213,'multiline':False]
['text':' is this fold closed?','line_number':221,'multiline':False]
['text':' Fold closed: Set last and quit loop.','line_number':225,'multiline':False]
['text':' Fold found, but it's open: Check nested folds.  Line number is','line_number':230,'multiline':False]
['text':' relative to containing fold.','line_number':231,'multiline':False]
['text':' foldLevel() {{{2','line_number':264,'multiline':False]
['text':'/ @return  fold level at line number "lnum" in the current window.','line_number':265,'multiline':False]
['text':' While updating the folds lines between invalid_top and invalid_bot have','line_number':268,'multiline':False]
['text':' an undefined fold level.  Otherwise update the folds first.','line_number':269,'multiline':False]
['text':' Return quickly when there is no folding at all in this window.','line_number':278,'multiline':False]
['text':' lineFolded() {{{2','line_number':286,'multiline':False]
['text':'/ Low level function to check if a line is folded.  Doesn't use any caching.','line_number':287,'multiline':False]
['text':'/','line_number':288,'multiline':False]
['text':'/ @return  true if line is folded or,','line_number':289,'multiline':False]
['text':'/          false if line is not folded.','line_number':290,'multiline':False]
['text':' fold_info() {{{2','line_number':296,'multiline':False]
['text':'/','line_number':297,'multiline':False]
['text':'/ Count the number of lines that are folded at line number "lnum".','line_number':298,'multiline':False]
['text':'/ Normally "lnum" is the first line of a possible fold, and the returned','line_number':299,'multiline':False]
['text':'/ number is the number of lines in the fold.','line_number':300,'multiline':False]
['text':'/ Doesn't use caching from the displayed window.','line_number':301,'multiline':False]
['text':'/','line_number':302,'multiline':False]
['text':'/ @return with the fold level info.','line_number':303,'multiline':False]
['text':'/         fi_lines = number of folded lines from "lnum",','line_number':304,'multiline':False]
['text':'/                    or 0 if line is not folded.','line_number':305,'multiline':False]
['text':' foldmethodIsManual() {{{2','line_number':320,'multiline':False]
['text':'/ @return  true if 'foldmethod' is "manual"','line_number':321,'multiline':False]
['text':' foldmethodIsIndent() {{{2','line_number':327,'multiline':False]
['text':'/ @return  true if 'foldmethod' is "indent"','line_number':328,'multiline':False]
['text':' foldmethodIsExpr() {{{2','line_number':334,'multiline':False]
['text':'/ @return  true if 'foldmethod' is "expr"','line_number':335,'multiline':False]
['text':' foldmethodIsMarker() {{{2','line_number':341,'multiline':False]
['text':'/ @return  true if 'foldmethod' is "marker"','line_number':342,'multiline':False]
['text':' foldmethodIsSyntax() {{{2','line_number':348,'multiline':False]
['text':'/ @return  true if 'foldmethod' is "syntax"','line_number':349,'multiline':False]
['text':' foldmethodIsDiff() {{{2','line_number':355,'multiline':False]
['text':'/ @return  true if 'foldmethod' is "diff"','line_number':356,'multiline':False]
['text':' closeFold() {{{2','line_number':362,'multiline':False]
['text':'/ Close fold for current window at position "pos".','line_number':363,'multiline':False]
['text':'/ Repeat "count" times.','line_number':364,'multiline':False]
['text':' closeFoldRecurse() {{{2','line_number':370,'multiline':False]
['text':'/ Close fold for current window at position `pos` recursively.','line_number':371,'multiline':False]
['text':' opFoldRange() {{{2','line_number':377,'multiline':False]
['text':'/','line_number':378,'multiline':False]
['text':'/ Open or Close folds for current window in lines "first" to "last".','line_number':379,'multiline':False]
['text':'/ Used for "zo", "zO", "zc" and "zC" in Visual mode.','line_number':380,'multiline':False]
['text':'/','line_number':381,'multiline':False]
['text':'/ @param opening     true to open, false to close','line_number':382,'multiline':False]
['text':'/ @param recurse     true to do it recursively','line_number':383,'multiline':False]
['text':'/ @param had_visual  true when Visual selection used','line_number':384,'multiline':False]
['text':' avoid error messages','line_number':387,'multiline':False]
['text':' Opening one level only: next fold to open is after the one going to','line_number':395,'multiline':False]
['text':' be opened.','line_number':396,'multiline':False]
['text':' Closing one level only: next line to close a fold is after just','line_number':401,'multiline':False]
['text':' closed fold.','line_number':402,'multiline':False]
['text':' Force a redraw to remove the Visual highlighting.','line_number':410,'multiline':False]
['text':' openFold() {{{2','line_number':416,'multiline':False]
['text':'/ Open fold for current window at position "pos".','line_number':417,'multiline':False]
['text':'/ Repeat "count" times.','line_number':418,'multiline':False]
['text':' openFoldRecurse() {{{2','line_number':424,'multiline':False]
['text':'/ Open fold for current window at position `pos` recursively.','line_number':425,'multiline':False]
['text':' foldOpenCursor() {{{2','line_number':431,'multiline':False]
['text':'/ Open folds until the cursor line is not in a closed fold.','line_number':432,'multiline':False]
['text':' newFoldLevel() {{{2','line_number':447,'multiline':False]
['text':'/ Set new foldlevel for current window.','line_number':448,'multiline':False]
['text':' Set the same foldlevel in other windows in diff mode.','line_number':454,'multiline':False]
['text':' Set all flags for the first level of folds to FD_LEVEL.  Following','line_number':468,'multiline':False]
['text':' manual open/close will then change the flags to FD_OPEN or','line_number':469,'multiline':False]
['text':' FD_CLOSED for those folds that don't use 'foldlevel'.','line_number':470,'multiline':False]
['text':' foldCheckClose() {{{2','line_number':480,'multiline':False]
['text':'/ Apply 'foldlevel' to all folds that don't contain the cursor.','line_number':481,'multiline':False]
['text':' 'foldclose' can only be "all" right now','line_number':488,'multiline':False]
['text':' checkCloseRec() {{{2','line_number':496,'multiline':False]
['text':' Only manually opened folds may need to be closed.','line_number':503,'multiline':False]
['text':' foldCreateAllowed() {{{2','line_number':518,'multiline':False]
['text':'/ @return  true if it's allowed to manually create or delete a fold or,','line_number':519,'multiline':False]
['text':'/          give an error message and return false if not.','line_number':520,'multiline':False]
['text':' foldCreate() {{{2','line_number':534,'multiline':False]
['text':'/ Create a fold from line "start" to line "end" (inclusive) in the current','line_number':535,'multiline':False]
['text':'/ window.','line_number':536,'multiline':False]
['text':' reverse the range','line_number':546,'multiline':False]
['text':' When 'foldmethod' is "marker" add markers, which creates the folds.','line_number':553,'multiline':False]
['text':' Find the place to insert the new fold','line_number':563,'multiline':False]
['text':' New fold is completely inside this fold: Go one level deeper.','line_number':574,'multiline':False]
['text':' This fold and new fold overlap: Insert here and move some folds','line_number':588,'multiline':False]
['text':' inside the new fold.','line_number':589,'multiline':False]
['text':' Count number of folds that will be contained in the new fold.','line_number':606,'multiline':False]
['text':' If the first fold starts before the new fold, let the new fold','line_number':615,'multiline':False]
['text':' start there.  Otherwise the existing fold would change.','line_number':616,'multiline':False]
['text':' When last contained fold isn't completely contained, adjust end','line_number':621,'multiline':False]
['text':' of new fold.','line_number':622,'multiline':False]
['text':' Move contained folds to inside new fold','line_number':626,'multiline':False]
['text':' Adjust line numbers in contained folds to be relative to the','line_number':631,'multiline':False]
['text':' new fold.','line_number':632,'multiline':False]
['text':' Move remaining entries to after the new fold.','line_number':637,'multiline':False]
['text':' insert new fold','line_number':644,'multiline':False]
['text':' We want the new fold to be closed.  If it would remain open because','line_number':649,'multiline':False]
['text':' of using 'foldlevel', need to adjust fd_flags of containing folds.','line_number':650,'multiline':False]
['text':' redraw','line_number':660,'multiline':False]
['text':' deleteFold() {{{2','line_number':665,'multiline':False]
['text':'/ @param start delete all folds from start to end when not 0','line_number':666,'multiline':False]
['text':'/ @param end delete all folds from start to end when not 0','line_number':667,'multiline':False]
['text':'/ @param recursive delete recursively if true','line_number':668,'multiline':False]
['text':'/ @param had_visual true when Visual selection used','line_number':669,'multiline':False]
['text':' Find the deepest fold for "start".','line_number':685,'multiline':False]
['text':' lnum is inside this fold, remember info','line_number':695,'multiline':False]
['text':' if "lnum" is folded, don't check nesting','line_number':700,'multiline':False]
['text':' check nested folds','line_number':706,'multiline':False]
['text':' redraw window','line_number':734,'multiline':False]
['text':' Force a redraw to remove the Visual highlighting.','line_number':740,'multiline':False]
['text':' Deleting markers may make cursor column invalid','line_number':745,'multiline':False]
['text':' send one nvim_buf_lines_event at the end','line_number':752,'multiline':False]
['text':' last_lnum is the line *after* the last line of the outermost fold','line_number':753,'multiline':False]
['text':' that was modified. Note also that deleting a fold might only require','line_number':754,'multiline':False]
['text':' the modification of the *first* line of the fold, but we send through a','line_number':755,'multiline':False]
['text':' notification that includes every line that was part of the fold','line_number':756,'multiline':False]
['text':' clearFolding() {{{2','line_number':762,'multiline':False]
['text':'/ Remove all folding for window "win".','line_number':763,'multiline':False]
['text':' foldUpdate() {{{2','line_number':770,'multiline':False]
['text':'/ Update folds for changes in the buffer of a window.','line_number':771,'multiline':False]
['text':'/ Note that inserted/deleted lines must have already been taken care of by','line_number':772,'multiline':False]
['text':'/ calling foldMarkAdjust().','line_number':773,'multiline':False]
['text':'/ The changes in lines from top to bot (inclusive).','line_number':774,'multiline':False]
['text':' will update later','line_number':782,'multiline':False]
['text':' Mark all folds from top to bot (or bot to top) as maybe-small.','line_number':790,'multiline':False]
['text':' reset got_int here, otherwise it won't work','line_number':811,'multiline':False]
['text':'/ Updates folds when leaving insert-mode.','line_number':818,'multiline':False]
['text':' foldmethod=manual: No need to update.','line_number':821,'multiline':False]
['text':' These foldmethods are too slow, do not auto-update on insert-leave.','line_number':822,'multiline':False]
['text':' foldUpdateAll() {{{2','line_number':831,'multiline':False]
['text':'/ Update all lines in a window for folding.','line_number':832,'multiline':False]
['text':'/ Used when a fold setting changes or after reloading the buffer.','line_number':833,'multiline':False]
['text':'/ The actual updating is postponed until fold info is used, to avoid doing','line_number':834,'multiline':False]
['text':'/ every time a setting is changed or a syntax item is added.','line_number':835,'multiline':False]
['text':' foldMoveTo() {{{2','line_number':842,'multiline':False]
['text':'/','line_number':843,'multiline':False]
['text':'/ If "updown" is false: Move to the start or end of the fold.','line_number':844,'multiline':False]
['text':'/ If "updown" is true: move to fold at the same level.','line_number':845,'multiline':False]
['text':'/ @return FAIL if not moved.','line_number':846,'multiline':False]
['text':'/','line_number':847,'multiline':False]
['text':'/ @param dir  FORWARD or BACKWARD','line_number':848,'multiline':False]
['text':' Repeat "count" times.','line_number':857,'multiline':False]
['text':' Find nested folds.  Stop when a fold is closed.  The deepest fold','line_number':859,'multiline':False]
['text':' that moves the cursor is used.','line_number':860,'multiline':False]
['text':' When moving up, consider a fold above the cursor; when','line_number':877,'multiline':False]
['text':' moving down consider a fold below the cursor.','line_number':878,'multiline':False]
['text':' don't look for contained folds, they will always move','line_number':889,'multiline':False]
['text':' the cursor too far.','line_number':890,'multiline':False]
['text':' Check if this fold is closed.','line_number':895,'multiline':False]
['text':' "[z" and "]z" stop at closed fold','line_number':901,'multiline':False]
['text':' to start of next fold if there is one','line_number':909,'multiline':False]
['text':' to end of previous fold if there is one','line_number':917,'multiline':False]
['text':' Open fold found, set cursor to its start/end and then check','line_number':926,'multiline':False]
['text':' nested folds.','line_number':927,'multiline':False]
['text':' Check nested folds (if any).','line_number':945,'multiline':False]
['text':' foldInitWin() {{{2','line_number':965,'multiline':False]
['text':'/ Init the fold info in a new window.','line_number':966,'multiline':False]
['text':' find_wl_entry() {{{2','line_number':972,'multiline':False]
['text':'/ Find an entry in the win->w_lines[] array for buffer line "lnum".','line_number':973,'multiline':False]
['text':'/ Only valid entries are considered (for entries where wl_valid is false the','line_number':974,'multiline':False]
['text':'/ line number can be wrong).','line_number':975,'multiline':False]
['text':'/','line_number':976,'multiline':False]
['text':'/ @return  index of entry or -1 if not found.','line_number':977,'multiline':False]
['text':' foldAdjustVisual() {{{2','line_number':993,'multiline':False]
['text':'/ Adjust the Visual area to include any fold at the start or end completely.','line_number':994,'multiline':False]
['text':' prevent cursor from moving on the trail byte','line_number':1024,'multiline':False]
['text':' cursor_foldstart() {{{2','line_number':1028,'multiline':False]
['text':'/ Move the cursor to the first line of a closed fold.','line_number':1029,'multiline':False]
['text':' Internal functions for "fold_T" {{{1','line_number':1035,'multiline':False]
['text':' cloneFoldGrowArray() {{{2','line_number':1036,'multiline':False]
['text':'/ Will "clone" (i.e deep copy) a garray_T of folds.','line_number':1037,'multiline':False]
['text':' foldFind() {{{2','line_number':1063,'multiline':False]
['text':'/ Search for line "lnum" in folds of growarray "gap".','line_number':1064,'multiline':False]
['text':'/ Set "*fpp" to the fold struct for the fold that contains "lnum" or','line_number':1065,'multiline':False]
['text':'/ the first fold below it (careful: it can be beyond the end of the array!).','line_number':1066,'multiline':False]
['text':'/','line_number':1067,'multiline':False]
['text':'/ @return  false when there is no fold that contains "lnum".','line_number':1068,'multiline':False]
['text':' Perform a binary search.','line_number':1076,'multiline':False]
['text':' "low" is lowest index of possible match.','line_number':1077,'multiline':False]
['text':' "high" is highest index of possible match.','line_number':1078,'multiline':False]
['text':' fold below lnum, adjust high','line_number':1085,'multiline':False]
['text':' fold above lnum, adjust low','line_number':1088,'multiline':False]
['text':' lnum is inside this fold','line_number':1091,'multiline':False]
['text':' foldLevelWin() {{{2','line_number':1100,'multiline':False]
['text':'/ @return  fold level at line number "lnum" in window "wp".','line_number':1101,'multiline':False]
['text':' Recursively search for a fold that contains "lnum".','line_number':1108,'multiline':False]
['text':' Check nested folds.  Line number is relative to containing fold.','line_number':1114,'multiline':False]
['text':' checkupdate() {{{2','line_number':1123,'multiline':False]
['text':'/ Check if the folds in window "wp" are invalid and update them if needed.','line_number':1124,'multiline':False]
['text':' will update all','line_number':1131,'multiline':False]
['text':' setFoldRepeat() {{{2','line_number':1135,'multiline':False]
['text':'/ Open or close fold for current window at position `pos`.','line_number':1136,'multiline':False]
['text':'/ Repeat "count" times.','line_number':1137,'multiline':False]
['text':' Only give an error message when no fold could be opened.','line_number':1144,'multiline':False]
['text':' setManualFold() {{{2','line_number':1153,'multiline':False]
['text':'/ Open or close the fold in the current window which contains "lnum".','line_number':1154,'multiline':False]
['text':'/ Also does this for other windows in diff mode when needed.','line_number':1155,'multiline':False]
['text':'/','line_number':1156,'multiline':False]
['text':'/ @param opening  true when opening, false when closing','line_number':1157,'multiline':False]
['text':'/ @param recurse  true when closing/opening recursive','line_number':1158,'multiline':False]
['text':' Do the same operation in other windows in diff mode.  Calculate the','line_number':1164,'multiline':False]
['text':' line number from the diffs.','line_number':1165,'multiline':False]
['text':' setManualFoldWin() {{{2','line_number':1179,'multiline':False]
['text':'/ Open or close the fold in window "wp" which contains "lnum".','line_number':1180,'multiline':False]
['text':'/ "donep", when not NULL, points to flag that is set to DONE_FOLD when some','line_number':1181,'multiline':False]
['text':'/ fold was found and to DONE_ACTION when some fold was opened or closed.','line_number':1182,'multiline':False]
['text':'/ When "donep" is NULL give an error message when no fold was found for','line_number':1183,'multiline':False]
['text':'/ "lnum", but only if "wp" is "curwin".','line_number':1184,'multiline':False]
['text':'/','line_number':1185,'multiline':False]
['text':'/ @param opening  true when opening, false when closing','line_number':1186,'multiline':False]
['text':'/ @param recurse  true when closing/opening recursive','line_number':1187,'multiline':False]
['text':'/','line_number':1188,'multiline':False]
['text':'/ @return         the line number of the next line that could be closed.','line_number':1189,'multiline':False]
['text':'/                 It's only valid when "opening" is true!','line_number':1190,'multiline':False]
['text':' Find the fold, open or close it.','line_number':1205,'multiline':False]
['text':' If there is a following fold, continue there next time.','line_number':1209,'multiline':False]
['text':' lnum is inside this fold','line_number':1216,'multiline':False]
['text':' If there is a following fold, continue there next time.','line_number':1219,'multiline':False]
['text':' Change from level-dependent folding to manual.','line_number':1224,'multiline':False]
['text':' Simple case: Close recursively means closing the fold.','line_number':1238,'multiline':False]
['text':' When opening, open topmost closed fold.','line_number':1245,'multiline':False]
['text':' fold is open, check nested folds','line_number':1256,'multiline':False]
['text':' When closing and not recurse, close deepest open fold.','line_number':1264,'multiline':False]
['text':' foldOpenNested() {{{2','line_number':1285,'multiline':False]
['text':'/ Open all nested folds in fold "fpr" recursively.','line_number':1286,'multiline':False]
['text':' deleteFoldEntry() {{{2','line_number':1296,'multiline':False]
['text':'/ Delete fold "idx" from growarray "gap".','line_number':1297,'multiline':False]
['text':'/','line_number':1298,'multiline':False]
['text':'/ @param recursive  when true, also delete all the folds contained in it.','line_number':1299,'multiline':False]
['text':'/                   when false, contained folds are moved one level up.','line_number':1300,'multiline':False]
['text':' recursively delete the contained folds','line_number':1306,'multiline':False]
['text':' Move nested folds one level up, to overwrite the fold that is','line_number':1313,'multiline':False]
['text':' deleted.','line_number':1314,'multiline':False]
['text':' Get "fp" again, the array may have been reallocated.','line_number':1318,'multiline':False]
['text':' adjust fd_top and fd_flags for the moved folds','line_number':1321,'multiline':False]
['text':' move the existing folds down to make room','line_number':1333,'multiline':False]
['text':' move the contained folds one level up','line_number':1338,'multiline':False]
['text':' deleteFoldRecurse() {{{2','line_number':1346,'multiline':False]
['text':'/ Delete nested folds in a fold.','line_number':1347,'multiline':False]
['text':' foldMarkAdjust() {{{2','line_number':1354,'multiline':False]
['text':'/ Update line numbers of folds for inserted/deleted lines.','line_number':1355,'multiline':False]
['text':' If deleting marks from line1 to line2, but not deleting all those','line_number':1359,'multiline':False]
['text':' lines, set line2 so that only deleted lines have their folds removed.','line_number':1360,'multiline':False]
['text':' If appending a line in Insert mode, it should be included in the fold','line_number':1364,'multiline':False]
['text':' just above the line.','line_number':1365,'multiline':False]
['text':' foldMarkAdjustRecurse() {{{2','line_number':1372,'multiline':False]
['text':' In Insert mode an inserted line at the top of a fold is considered part','line_number':1382,'multiline':False]
['text':' of the fold, otherwise it isn't.','line_number':1383,'multiline':False]
['text':' Find the fold containing or just below "line1".','line_number':1390,'multiline':False]
['text':' Adjust all folds below "line1" that are affected.','line_number':1394,'multiline':False]
['text':' Check for these situations:','line_number':1396,'multiline':False]
['text':'    1  2  3','line_number':1397,'multiline':False]
['text':'    1  2  3','line_number':1398,'multiline':False]
['text':' line1     2      3  4  5','line_number':1399,'multiline':False]
['text':'       2  3  4  5','line_number':1400,'multiline':False]
['text':'       2  3  4  5','line_number':1401,'multiline':False]
['text':' line2     2      3  4  5','line_number':1402,'multiline':False]
['text':'          3     5  6','line_number':1403,'multiline':False]
['text':'          3     5  6','line_number':1404,'multiline':False]
['text':' last line of fold','line_number':1406,'multiline':False]
['text':' 1. fold completely above line1: nothing to do','line_number':1408,'multiline':False]
['text':' 6. fold below line2: only adjust for amount_after','line_number':1413,'multiline':False]
['text':' 4. fold completely contained in range','line_number':1421,'multiline':False]
['text':' Deleting lines: delete the fold completely','line_number':1423,'multiline':False]
['text':' adjust index for deletion','line_number':1425,'multiline':False]
['text':' 2 or 3: need to correct nested folds too','line_number':1432,'multiline':False]
['text':' 2. fold contains line1, line2 is below fold','line_number':1436,'multiline':False]
['text':' 3. fold contains line1 and line2','line_number':1443,'multiline':False]
['text':' 5. fold is below line1 and contains line2; need to','line_number':1447,'multiline':False]
['text':' correct nested folds too','line_number':1448,'multiline':False]
['text':' getDeepestNesting() {{{2','line_number':1466,'multiline':False]
['text':'/ Get the lowest 'foldlevel' value that makes the deepest nested fold in','line_number':1467,'multiline':False]
['text':'/ window `wp`.','line_number':1468,'multiline':False]
['text':' check_closed() {{{2','line_number':1490,'multiline':False]
['text':'/ Check if a fold is closed and update the info needed to check nested folds.','line_number':1491,'multiline':False]
['text':'/','line_number':1492,'multiline':False]
['text':'/ @param[in,out] use_levelp true: outer fold had FD_LEVEL','line_number':1493,'multiline':False]
['text':'/ @param[in,out] fp fold to check','line_number':1494,'multiline':False]
['text':'/ @param level folding depth','line_number':1495,'multiline':False]
['text':'/ @param[out] maybe_smallp true: outer this had fd_small == kNone','line_number':1496,'multiline':False]
['text':'/ @param lnum_off line number offset for fp->fd_top','line_number':1497,'multiline':False]
['text':'/ @return true if fold is closed','line_number':1498,'multiline':False]
['text':' Check if this fold is closed.  If the flag is FD_LEVEL this','line_number':1504,'multiline':False]
['text':' fold and all folds it contains depend on 'foldlevel'.','line_number':1505,'multiline':False]
['text':' Small fold isn't closed anyway.','line_number':1515,'multiline':False]
['text':' checkSmall() {{{2','line_number':1531,'multiline':False]
['text':'/ Update fd_small field of fold "fp".','line_number':1532,'multiline':False]
['text':'/','line_number':1533,'multiline':False]
['text':'/ @param lnum_off  offset for fp->fd_top','line_number':1534,'multiline':False]
['text':' Mark any nested folds to maybe-small','line_number':1541,'multiline':False]
['text':' setSmallMaybe() {{{2','line_number':1559,'multiline':False]
['text':'/ Set small flags in "gap" to kNone.','line_number':1560,'multiline':False]
['text':' foldCreateMarkers() {{{2','line_number':1569,'multiline':False]
['text':'/ Create a fold from line "start" to line "end" (inclusive) in window `wp`','line_number':1570,'multiline':False]
['text':'/ by adding markers.','line_number':1571,'multiline':False]
['text':' Update both changes here, to avoid all folds after the start are','line_number':1584,'multiline':False]
['text':' changed when the start marker is inserted and the end isn't.','line_number':1585,'multiline':False]
['text':' Note: foldAddMarker() may not actually change start and/or end if','line_number':1588,'multiline':False]
['text':' u_save() is unable to save the buffer line, but we send the','line_number':1589,'multiline':False]
['text':' nvim_buf_lines_event anyway since it won't do any harm.','line_number':1590,'multiline':False]
['text':' foldAddMarker() {{{2','line_number':1595,'multiline':False]
['text':'/ Add "marker[markerlen]" in 'commentstring' to position `pos`.','line_number':1596,'multiline':False]
['text':' Allocate a new line: old-line + 'cms'-start + marker + 'cms'-end','line_number':1605,'multiline':False]
['text':' Check if the line ends with an unclosed comment','line_number':1614,'multiline':False]
['text':' Append the marker to the end of the line','line_number':1618,'multiline':False]
['text':' deleteFoldMarkers() {{{2','line_number':1635,'multiline':False]
['text':'/ Delete the markers for a fold, causing it to be deleted.','line_number':1636,'multiline':False]
['text':'/','line_number':1637,'multiline':False]
['text':'/ @param lnum_off  offset for fp->fd_top','line_number':1638,'multiline':False]
['text':' foldDelMarker() {{{2','line_number':1653,'multiline':False]
['text':'/ Delete marker "marker[markerlen]" at the end of line "lnum".','line_number':1654,'multiline':False]
['text':'/ Delete 'commentstring' if it matches.','line_number':1655,'multiline':False]
['text':'/ If the marker is not found, there is no error message.  Could be a missing','line_number':1656,'multiline':False]
['text':'/ close-marker.','line_number':1657,'multiline':False]
['text':' end marker may be missing and fold extends below the last line','line_number':1660,'multiline':False]
['text':' Found the marker, include a digit if it's there.','line_number':1671,'multiline':False]
['text':' Also delete 'commentstring' if it matches.','line_number':1677,'multiline':False]
['text':' Make new line: text-before-marker + text-after-marker','line_number':1687,'multiline':False]
['text':' get_foldtext() {{{2','line_number':1700,'multiline':False]
['text':'/ Generates text to display','line_number':1701,'multiline':False]
['text':'/','line_number':1702,'multiline':False]
['text':'/ @param buf allocated memory of length FOLD_TEXT_LEN. Used when 'foldtext'','line_number':1703,'multiline':False]
['text':'/            isn't set puts the result in "buf[FOLD_TEXT_LEN]".','line_number':1704,'multiline':False]
['text':'/ @param at line "lnum", with last line "lnume".','line_number':1705,'multiline':False]
['text':'/ @return the text for a closed fold','line_number':1706,'multiline':False]
['text':'/','line_number':1707,'multiline':False]
['text':'/ Otherwise the result is in allocated memory.','line_number':1708,'multiline':False]
['text':' an error occurred when evaluating 'fdt' setting','line_number':1714,'multiline':False]
['text':' window changed, try evaluating foldtext setting once again','line_number':1721,'multiline':False]
['text':' a previous error should not abort evaluating 'foldexpr'','line_number':1726,'multiline':False]
['text':' Set "v:foldstart" and "v:foldend".','line_number':1733,'multiline':False]
['text':' Set "v:folddashes" to a string of "level" dashes.','line_number':1737,'multiline':False]
['text':' Set "v:foldlevel" to "level".','line_number':1738,'multiline':False]
['text':' skip evaluating 'foldtext' on errors','line_number':1748,'multiline':False]
['text':' handle exceptions, but don't display errors','line_number':1757,'multiline':False]
['text':' Replace unprintable characters, if there are any.  But','line_number':1793,'multiline':False]
['text':' replace a TAB with a space.','line_number':1794,'multiline':False]
['text':' foldtext_cleanup() {{{2','line_number':1829,'multiline':False]
['text':'/ Remove 'foldmarker' and 'commentstring' from "str" (in-place).','line_number':1830,'multiline':False]
['text':' Ignore leading and trailing white space in 'commentstring'.','line_number':1833,'multiline':False]
['text':' locate "%s" in 'commentstring', use the part before and after it.','line_number':1840,'multiline':False]
['text':' exclude white space before "%s"','line_number':1847,'multiline':False]
['text':' skip "%s" and white space after it','line_number':1852,'multiline':False]
['text':' May remove 'commentstring' start.  Useful when it's a double','line_number':1874,'multiline':False]
['text':' quote and we already removed a double quote.','line_number':1875,'multiline':False]
['text':' Folding by indent, expr, marker and syntax. {{{1','line_number':1904,'multiline':False]
['text':' Function declarations. {{{2','line_number':1905,'multiline':False]
['text':' foldUpdateIEMS() {{{2','line_number':1907,'multiline':False]
['text':'/ Update the folding for window "wp", at least from lines "top" to "bot".','line_number':1908,'multiline':False]
['text':'/ IEMS = "Indent Expr Marker Syntax"','line_number':1909,'multiline':False]
['text':' Avoid problems when being called recursively.','line_number':1912,'multiline':False]
['text':' Need to update all folds.','line_number':1918,'multiline':False]
['text':' Mark all folds as maybe-small.','line_number':1923,'multiline':False]
['text':' add the context for "diff" folding','line_number':1927,'multiline':False]
['text':' When deleting lines at the end of the buffer "top" can be past the end','line_number':1937,'multiline':False]
['text':' of the buffer.','line_number':1938,'multiline':False]
['text':' Init marker variables to speed up foldlevelMarker().','line_number':1962,'multiline':False]
['text':' Need to get the level of the line above top, it is used if there is','line_number':1965,'multiline':False]
['text':' no marker at the top.','line_number':1966,'multiline':False]
['text':' Get the fold level at top - 1.','line_number':1968,'multiline':False]
['text':' The fold may end just above the top, check for that.','line_number':1971,'multiline':False]
['text':' If a fold started here, we already had the level, if it stops','line_number':1976,'multiline':False]
['text':' here, we need to use lvl_next.  Could also start and end a fold','line_number':1977,'multiline':False]
['text':' in the same line.','line_number':1978,'multiline':False]
['text':' start one line back, because a "<1" may indicate the end of a','line_number':1991,'multiline':False]
['text':' fold in the topline','line_number':1992,'multiline':False]
['text':' Start one line back, because if the line above "top" has an','line_number':2002,'multiline':False]
['text':' undefined fold level, folding it relies on the line under it,','line_number':2003,'multiline':False]
['text':' which is "top".','line_number':2004,'multiline':False]
['text':' Backup to a line for which the fold level is defined.  Since it's','line_number':2010,'multiline':False]
['text':' always defined for line one, we will stop there.','line_number':2011,'multiline':False]
['text':' Reset lvl_next each time, because it will be set to a value for','line_number':2014,'multiline':False]
['text':' the next line, but we search backwards here.','line_number':2015,'multiline':False]
['text':' If folding is defined by the syntax, it is possible that a change in','line_number':2024,'multiline':False]
['text':' one line will cause all sub-folds of the current fold to change (e.g.,','line_number':2025,'multiline':False]
['text':' closing a C-style comment can cause folds in the subsequent lines to','line_number':2026,'multiline':False]
['text':' appear). To take that into account we should adjust the value of "bot"','line_number':2027,'multiline':False]
['text':' to point to the end of the current fold:','line_number':2028,'multiline':False]
['text':' Do at least one line.','line_number':2057,'multiline':False]
['text':' Always stop at the end of the file ("end" can be past the end of','line_number':2065,'multiline':False]
['text':' the file).','line_number':2066,'multiline':False]
['text':' For "marker", "expr"  and "syntax"  methods: If a change caused','line_number':2071,'multiline':False]
['text':' a fold to be removed, we need to continue at least until where','line_number':2072,'multiline':False]
['text':' it ended.','line_number':2073,'multiline':False]
['text':' For "syntax" method: Compare the foldlevel that the syntax','line_number':2088,'multiline':False]
['text':' tells us to the foldlevel from the existing folds.  If they','line_number':2089,'multiline':False]
['text':' don't match continue updating folds.','line_number':2090,'multiline':False]
['text':' A level 1 fold starts at a line with foldlevel > 0.','line_number':2097,'multiline':False]
['text':' There can't be any folds from start until end now.','line_number':2114,'multiline':False]
['text':' If some fold changed, need to redraw and position cursor.','line_number':2117,'multiline':False]
['text':' If we updated folds past "bot", need to redraw more lines.  Don't do','line_number':2122,'multiline':False]
['text':' this in other situations, the changed lines will be redrawn anyway and','line_number':2123,'multiline':False]
['text':' this method can cause the whole window to be updated.','line_number':2124,'multiline':False]
['text':' foldUpdateIEMSRecurse() {{{2','line_number':2137,'multiline':False]
['text':'/ Update a fold that starts at "flp->lnum".  At this line there is always a','line_number':2138,'multiline':False]
['text':'/ valid foldlevel, and its level >= "level".','line_number':2139,'multiline':False]
['text':'/','line_number':2140,'multiline':False]
['text':'/ "flp" is valid for "flp->lnum" when called and it's valid when returning.','line_number':2141,'multiline':False]
['text':'/ "flp->lnum" is set to the lnum just below the fold, if it ends before','line_number':2142,'multiline':False]
['text':'/ "bot", it's "bot" plus one if the fold continues and it's bigger when using','line_number':2143,'multiline':False]
['text':'/ the marker method and a text change made following folds to change.','line_number':2144,'multiline':False]
['text':'/ When returning, "flp->lnum_save" is the line number that was used to get','line_number':2145,'multiline':False]
['text':'/ the level when the level at "flp->lnum" is invalid.','line_number':2146,'multiline':False]
['text':'/ Remove any folds from "startlnum" up to here at this level.','line_number':2147,'multiline':False]
['text':'/ Recursively update nested folds.','line_number':2148,'multiline':False]
['text':'/ Below line "bot" there are no changes in the text.','line_number':2149,'multiline':False]
['text':'/ "flp->lnum", "flp->lnum_save" and "bot" are relative to the start of the','line_number':2150,'multiline':False]
['text':'/ outer fold.','line_number':2151,'multiline':False]
['text':'/ "flp->off" is the offset to the real line number in the buffer.','line_number':2152,'multiline':False]
['text':'/','line_number':2153,'multiline':False]
['text':'/ All this would be a lot simpler if all folds in the range would be deleted','line_number':2154,'multiline':False]
['text':'/ and then created again.  But we would lose all information about the','line_number':2155,'multiline':False]
['text':'/ folds, even when making changes that don't affect the folding (e.g. "vj~").','line_number':2156,'multiline':False]
['text':'/','line_number':2157,'multiline':False]
['text':'/ @param topflags  containing fold flags','line_number':2158,'multiline':False]
['text':'/','line_number':2159,'multiline':False]
['text':'/ @return  bot, which may have been increased for lines that also need to be','line_number':2160,'multiline':False]
['text':'/ updated as a result of a detected change in the fold.','line_number':2161,'multiline':False]
['text':' If using the marker method, the start line is not the start of a fold','line_number':2168,'multiline':False]
['text':' at the level we're dealing with and the level is non-zero, we must use','line_number':2169,'multiline':False]
['text':' the previous fold.  But ignore a fold that starts at or below','line_number':2170,'multiline':False]
['text':' startlnum, it must be deleted.','line_number':2171,'multiline':False]
['text':' first lnum we got','line_number':2185,'multiline':False]
['text':' Loop over all lines in this fold, or until "bot" is hit.','line_number':2189,'multiline':False]
['text':' Handle nested folds inside of this fold.','line_number':2190,'multiline':False]
['text':' "flp->lnum" is the current line.  When finding the end of the fold, it','line_number':2191,'multiline':False]
['text':' is just below the end of the fold.','line_number':2192,'multiline':False]
['text':' "*flp" contains the level of the line "flp->lnum" or a following one if','line_number':2193,'multiline':False]
['text':' there are lines with an invalid fold level.  "flp->lnum_save" is the','line_number':2194,'multiline':False]
['text':' line number that was used to get the fold level (below "flp->lnum" when','line_number':2195,'multiline':False]
['text':' it has an invalid fold level).  When called the fold level is always','line_number':2196,'multiline':False]
['text':' valid, thus "flp->lnum_save" is equal to "flp->lnum".','line_number':2197,'multiline':False]
['text':' Updating folds can be slow, check for CTRL-C.','line_number':2200,'multiline':False]
['text':' Set "lvl" to the level of line "flp->lnum".  When flp->start is set','line_number':2203,'multiline':False]
['text':' and after the first line of the fold, set the level to zero to','line_number':2204,'multiline':False]
['text':' force the fold to end.  Do the same when had_end is set: Previous','line_number':2205,'multiline':False]
['text':' line was marked as end of a fold.','line_number':2206,'multiline':False]
['text':' For "marker" and "syntax" methods:','line_number':2217,'multiline':False]
['text':' - If a change caused a nested fold to be removed, we need to','line_number':2218,'multiline':False]
['text':'   delete it and continue at least until where it ended.','line_number':2219,'multiline':False]
['text':' - If a change caused a nested fold to be created, or this fold','line_number':2220,'multiline':False]
['text':'   to continue below its original end, need to finish this fold.','line_number':2221,'multiline':False]
['text':' Compute how deep the folds currently are, if it's deeper','line_number':2230,'multiline':False]
['text':' than "lvl" then some must be deleted, need to update','line_number':2231,'multiline':False]
['text':' at least one nested fold.','line_number':2232,'multiline':False]
['text':' At the start of the first nested fold and at the end of the current','line_number':2251,'multiline':False]
['text':' fold: check if existing folds at this level, before the current','line_number':2252,'multiline':False]
['text':' one, need to be deleted or truncated.','line_number':2253,'multiline':False]
['text':' Remove or update folds that have lines between startlnum and','line_number':2260,'multiline':False]
['text':' firstlnum.','line_number':2261,'multiline':False]
['text':' set concat to 1 if it's allowed to concatenate this fold','line_number':2263,'multiline':False]
['text':' with a previous one that touches it.','line_number':2264,'multiline':False]
['text':' Find an existing fold to re-use.  Preferably one that','line_number':2272,'multiline':False]
['text':' includes startlnum, otherwise one that ends just before','line_number':2273,'multiline':False]
['text':' startlnum or starts after it.','line_number':2274,'multiline':False]
['text':' Use existing fold for the new fold.  If it starts','line_number':2285,'multiline':False]
['text':' before where we started looking, extend it.  If it','line_number':2286,'multiline':False]
['text':' starts at another line, update nested folds to keep','line_number':2287,'multiline':False]
['text':' their position, compensating for the new fd_top.','line_number':2288,'multiline':False]
['text':' We have found a fold beginning exactly where we want one.','line_number':2290,'multiline':False]
['text':' We will move the start of this fold up, hence we move all','line_number':2293,'multiline':False]
['text':' nested folds (with relative line numbers) down.','line_number':2294,'multiline':False]
['text':' Will move fold down, move nested folds relatively up.','line_number':2299,'multiline':False]
['text':' Before there was a fold spanning from above startlnum to below','line_number':2312,'multiline':False]
['text':' firstlnum. This fold is valid above startlnum (because we are','line_number':2313,'multiline':False]
['text':' not updating that range), but there is now a break in it.','line_number':2314,'multiline':False]
['text':' If the break is because we are now forced to start a new fold','line_number':2315,'multiline':False]
['text':' at the level "level" at line fline->lnum, then we need to','line_number':2316,'multiline':False]
['text':' split the fold at fline->lnum.','line_number':2317,'multiline':False]
['text':' If the break is because the range [startlnum, firstlnum) is','line_number':2318,'multiline':False]
['text':' now at a lower indent than "level", we need to split the fold','line_number':2319,'multiline':False]
['text':' in this range.','line_number':2320,'multiline':False]
['text':' Any splits have to be done recursively.','line_number':2321,'multiline':False]
['text':' If using the "marker" or "syntax" method, we','line_number':2336,'multiline':False]
['text':' need to continue until the end of the fold is','line_number':2337,'multiline':False]
['text':' found.','line_number':2338,'multiline':False]
['text':' A fold that starts at or after startlnum and stops','line_number':2358,'multiline':False]
['text':' before the new fold must be deleted.  Continue','line_number':2359,'multiline':False]
['text':' looking for the next one.','line_number':2360,'multiline':False]
['text':' A fold has some lines above startlnum, truncate it','line_number':2364,'multiline':False]
['text':' to stop just above startlnum.','line_number':2365,'multiline':False]
['text':' Insert new fold.  Careful: ga_data may be NULL and it','line_number':2373,'multiline':False]
['text':' may change!','line_number':2374,'multiline':False]
['text':' The new fold continues until bot, unless we find the','line_number':2383,'multiline':False]
['text':' end earlier.','line_number':2384,'multiline':False]
['text':' When the containing fold is open, the new fold is open.','line_number':2387,'multiline':False]
['text':' The new fold is closed if the fold above it is closed.','line_number':2388,'multiline':False]
['text':' The first fold depends on the containing fold.','line_number':2389,'multiline':False]
['text':' If using the "marker", "expr" or "syntax" method, we','line_number':2402,'multiline':False]
['text':' need to continue until the end of the fold is found.','line_number':2403,'multiline':False]
['text':' Found a line with a lower foldlevel, this fold ends just above','line_number':2416,'multiline':False]
['text':' "flp->lnum".','line_number':2417,'multiline':False]
['text':' The fold includes the line "flp->lnum" and "flp->lnum_save".','line_number':2421,'multiline':False]
['text':' Check "fp" for safety.','line_number':2422,'multiline':False]
['text':' There is a nested fold, handle it recursively.','line_number':2424,'multiline':False]
['text':' At least do one line (can happen when finish is true).','line_number':2425,'multiline':False]
['text':' Line numbers in the nested fold are relative to the start of','line_number':2430,'multiline':False]
['text':' this fold.','line_number':2431,'multiline':False]
['text':' This fold may end at the same line, don't incr. flp->lnum.','line_number':2445,'multiline':False]
['text':' Get the level of the next line, then continue the loop to check','line_number':2447,'multiline':False]
['text':' if it ends there.','line_number':2448,'multiline':False]
['text':' Skip over undefined lines, to find the foldlevel after it.','line_number':2449,'multiline':False]
['text':' For the last line in the file the foldlevel is always valid.','line_number':2450,'multiline':False]
['text':' Make the previous level available to foldlevel().','line_number':2454,'multiline':False]
['text':' leave flp->lnum_save to lnum of the line that was used to get','line_number':2472,'multiline':False]
['text':' the level, flp->lnum to the lnum of the next line.','line_number':2473,'multiline':False]
['text':' only happens when got_int is set','line_number':2479,'multiline':False]
['text':' Get here when:','line_number':2483,'multiline':False]
['text':' lvl < level: the folds ends just above "flp->lnum"','line_number':2484,'multiline':False]
['text':' lvl >= level: fold continues below "bot"','line_number':2485,'multiline':False]
['text':' Current fold at least extends until lnum.','line_number':2487,'multiline':False]
['text':' running into the end of the buffer (deleted last line)','line_number':2493,'multiline':False]
['text':' Delete contained folds from the end of the last one found until where','line_number':2497,'multiline':False]
['text':' we stopped looking.','line_number':2498,'multiline':False]
['text':' End of fold found, update the length when it got shorter.','line_number':2503,'multiline':False]
['text':' fold continued below bot','line_number':2506,'multiline':False]
['text':' marker method: truncate the fold and make sure the','line_number':2510,'multiline':False]
['text':' previously included lines are processed again','line_number':2511,'multiline':False]
['text':' indent or expr method: split fold to create a new one','line_number':2515,'multiline':False]
['text':' below bot','line_number':2516,'multiline':False]
['text':' delete following folds that end before the current line','line_number':2528,'multiline':False]
['text':' Make fold that includes lnum start at lnum.','line_number':2537,'multiline':False]
['text':' merge new fold with existing fold that follows','line_number':2547,'multiline':False]
['text':' Need to redraw the lines we inspected, which might be further down than','line_number':2556,'multiline':False]
['text':' was asked for.','line_number':2557,'multiline':False]
['text':' foldInsert() {{{2','line_number':2565,'multiline':False]
['text':'/ Insert a new fold in "gap" at position "i".','line_number':2566,'multiline':False]
['text':' foldSplit() {{{2','line_number':2579,'multiline':False]
['text':'/ Split the "i"th fold in "gap", which starts before "top" and ends below','line_number':2580,'multiline':False]
['text':'/ "bot" in two pieces, one ending above "top" and the other starting below','line_number':2581,'multiline':False]
['text':'/ "bot".','line_number':2582,'multiline':False]
['text':'/ The caller must first have taken care of any nested folds from "top" to','line_number':2583,'multiline':False]
['text':'/ "bot"!','line_number':2584,'multiline':False]
['text':' The fold continues below bot, need to split it.','line_number':2590,'multiline':False]
['text':' check for wrap around (MAXLNUM, and 32bit)','line_number':2595,'multiline':False]
['text':' Move nested folds below bot to new fold.  There can't be','line_number':2602,'multiline':False]
['text':' any between top and bot, they have been removed by the caller.','line_number':2603,'multiline':False]
['text':' foldRemove() {{{2','line_number':2624,'multiline':False]
['text':'/ Remove folds within the range "top" to and including "bot".','line_number':2625,'multiline':False]
['text':'/ Check for these situations:','line_number':2626,'multiline':False]
['text':'/      1  2  3','line_number':2627,'multiline':False]
['text':'/      1  2  3','line_number':2628,'multiline':False]
['text':'/ top     2  3  4  5','line_number':2629,'multiline':False]
['text':'/     2  3  4  5','line_number':2630,'multiline':False]
['text':'/ bot     2  3  4  5','line_number':2631,'multiline':False]
['text':'/        3     5  6','line_number':2632,'multiline':False]
['text':'/        3     5  6','line_number':2633,'multiline':False]
['text':'/','line_number':2634,'multiline':False]
['text':'/ 1: not changed','line_number':2635,'multiline':False]
['text':'/ 2: truncate to stop above "top"','line_number':2636,'multiline':False]
['text':'/ 3: split in two parts, one stops above "top", other starts below "bot".','line_number':2637,'multiline':False]
['text':'/ 4: deleted','line_number':2638,'multiline':False]
['text':'/ 5: made to start below "bot".','line_number':2639,'multiline':False]
['text':'/ 6: not changed','line_number':2640,'multiline':False]
['text':' nothing to do','line_number':2644,'multiline':False]
['text':' Find fold that includes top or a following one.','line_number':2650,'multiline':False]
['text':' 2: or 3: need to delete nested folds','line_number':2652,'multiline':False]
['text':' 3: need to split it.','line_number':2655,'multiline':False]
['text':' 2: truncate fold at "top".','line_number':2659,'multiline':False]
['text':' 6: Found a fold below bot, can stop looking.','line_number':2668,'multiline':False]
['text':' Found an entry below top.','line_number':2672,'multiline':False]
['text':' 5: Make fold that includes bot start below bot.','line_number':2675,'multiline':False]
['text':' 4: Delete completely contained fold.','line_number':2684,'multiline':False]
['text':' foldReverseOrder() {{{2','line_number':2690,'multiline':False]
['text':' foldMoveRange() {{{2','line_number':2704,'multiline':False]
['text':'/ Move folds within the inclusive range "line1" to "line2" to after "dest"','line_number':2705,'multiline':False]
['text':'/ require "line1" <= "line2" <= "dest"','line_number':2706,'multiline':False]
['text':'/','line_number':2707,'multiline':False]
['text':'/ There are the following situations for the first fold at or below line1 - 1.','line_number':2708,'multiline':False]
['text':'/       1  2  3  4','line_number':2709,'multiline':False]
['text':'/       1  2  3  4','line_number':2710,'multiline':False]
['text':'/ line1    2  3  4','line_number':2711,'multiline':False]
['text':'/          2  3  4  5  6  7','line_number':2712,'multiline':False]
['text':'/ line2       3  4  5  6  7','line_number':2713,'multiline':False]
['text':'/             3  4     6  7  8  9','line_number':2714,'multiline':False]
['text':'/ dest           4        7  8  9','line_number':2715,'multiline':False]
['text':'/                4        7  8    10','line_number':2716,'multiline':False]
['text':'/                4        7  8    10','line_number':2717,'multiline':False]
['text':'/','line_number':2718,'multiline':False]
['text':'/ In the following descriptions, "moved" means moving in the buffer, *and* in','line_number':2719,'multiline':False]
['text':'/ the fold array.','line_number':2720,'multiline':False]
['text':'/ Meanwhile, "shifted" just means moving in the buffer.','line_number':2721,'multiline':False]
['text':'/ 1. not changed','line_number':2722,'multiline':False]
['text':'/ 2. truncated above line1','line_number':2723,'multiline':False]
['text':'/ 3. length reduced by  line2 - line1, folds starting between the end of 3 and','line_number':2724,'multiline':False]
['text':'/    dest are truncated and shifted up','line_number':2725,'multiline':False]
['text':'/ 4. internal folds moved (from [line1, line2] to dest)','line_number':2726,'multiline':False]
['text':'/ 5. moved to dest.','line_number':2727,'multiline':False]
['text':'/ 6. truncated below line2 and moved.','line_number':2728,'multiline':False]
['text':'/ 7. length reduced by line2 - dest, folds starting between line2 and dest are','line_number':2729,'multiline':False]
['text':'/    removed, top is moved down by move_len.','line_number':2730,'multiline':False]
['text':'/ 8. truncated below dest and shifted up.','line_number':2731,'multiline':False]
['text':'/ 9. shifted up','line_number':2732,'multiline':False]
['text':'/ 10. not changed','line_number':2733,'multiline':False]
['text':' I want to stop *at here*, foldRemove() stops *above* top','line_number':2736,'multiline':False]
['text':' Case 4 -- don't have to change this fold, but have to move nested','line_number':2756,'multiline':False]
['text':' folds.','line_number':2757,'multiline':False]
['text':' Case 3 -- Remove nested folds between line1 and line2 & reduce the','line_number':2762,'multiline':False]
['text':' length of fold by "range_len".','line_number':2763,'multiline':False]
['text':' Folds after this one must be dealt with.','line_number':2764,'multiline':False]
['text':' Case 2 -- truncate fold *above* line1.','line_number':2769,'multiline':False]
['text':' Folds after this one must be dealt with.','line_number':2770,'multiline':False]
['text':' Look at the next fold, and treat that one as if it were the first after','line_number':2773,'multiline':False]
['text':' "line1" (because now it is).','line_number':2774,'multiline':False]
['text':' No folds after "line1" and before "dest"','line_number':2779,'multiline':False]
['text':' Case 10.','line_number':2780,'multiline':False]
['text':' Case 9. (for all case 9's) -- shift up.','line_number':2784,'multiline':False]
['text':' Case 8. -- ensure truncated at dest, shift up','line_number':2788,'multiline':False]
['text':' Case 7 -- remove nested folds and shrink','line_number':2794,'multiline':False]
['text':' Case 5 or 6: changes rely on whether there are folds between the end of','line_number':2802,'multiline':False]
['text':' this fold and "dest".','line_number':2803,'multiline':False]
['text':' 5, or 6','line_number':2808,'multiline':False]
['text':' 6, truncate before moving','line_number':2810,'multiline':False]
['text':' Record index of the first fold after the moved range.','line_number':2817,'multiline':False]
['text':' All folds are now correct, but not necessarily in the correct order.','line_number':2830,'multiline':False]
['text':' We must swap folds in the range [move_end, dest_index) with those in the','line_number':2831,'multiline':False]
['text':' range [move_start, move_end).','line_number':2832,'multiline':False]
['text':' There are no folds after those moved, so none were moved out of order.','line_number':2834,'multiline':False]
['text':' foldMerge() {{{2','line_number':2847,'multiline':False]
['text':'/ Merge two adjacent folds (and the nested ones in them).','line_number':2848,'multiline':False]
['text':'/ This only works correctly when the folds are really adjacent!  Thus "fp1"','line_number':2849,'multiline':False]
['text':'/ must end just above "fp2".','line_number':2850,'multiline':False]
['text':'/ The resulting fold is "fp1", nested folds are moved from "fp2" to "fp1".','line_number':2851,'multiline':False]
['text':'/ Fold entry "fp2" in "gap" is deleted.','line_number':2852,'multiline':False]
['text':' If the last nested fold in fp1 touches the first nested fold in fp2,','line_number':2860,'multiline':False]
['text':' merge them recursively.','line_number':2861,'multiline':False]
['text':' Move nested folds in fp2 to the end of fp1.','line_number':2866,'multiline':False]
['text':' foldlevelIndent() {{{2','line_number':2883,'multiline':False]
['text':'/ Low level function to get the foldlevel for the "indent" method.','line_number':2884,'multiline':False]
['text':'/ Doesn't use any caching.','line_number':2885,'multiline':False]
['text':'/','line_number':2886,'multiline':False]
['text':'/ @return  a level of -1 if the foldlevel depends on surrounding lines.','line_number':2887,'multiline':False]
['text':' empty line or lines starting with a character in 'foldignore': level','line_number':2895,'multiline':False]
['text':' depends on surrounding lines','line_number':2896,'multiline':False]
['text':' first and last line can't be undefined, use level 0','line_number':2898,'multiline':False]
['text':' foldlevelDiff() {{{2','line_number':2912,'multiline':False]
['text':'/ Low level function to get the foldlevel for the "diff" method.','line_number':2913,'multiline':False]
['text':'/ Doesn't use any caching.','line_number':2914,'multiline':False]
['text':' foldlevelExpr() {{{2','line_number':2924,'multiline':False]
['text':'/ Low level function to get the foldlevel for the "expr" method.','line_number':2925,'multiline':False]
['text':'/ Doesn't use any caching.','line_number':2926,'multiline':False]
['text':'/','line_number':2927,'multiline':False]
['text':'/ @return  a level of -1 if the foldlevel depends on surrounding lines.','line_number':2928,'multiline':False]
['text':' KeyTyped may be reset to 0 when calling a function which invokes','line_number':2945,'multiline':False]
['text':' do_cmdline().  To make 'foldopen' work correctly restore KeyTyped.','line_number':2946,'multiline':False]
['text':' "a1", "a2", .. : add to the fold level','line_number':2954,'multiline':False]
['text':' "s1", "s2", .. : subtract from the fold level','line_number':2963,'multiline':False]
['text':' ">1", ">2", .. : start a fold with a certain level','line_number':2975,'multiline':False]
['text':' "<1", "<2", .. : end a fold with a certain level','line_number':2982,'multiline':False]
['text':' "=": No change in level','line_number':2988,'multiline':False]
['text':' "-1", "0", "1", ..: set fold level','line_number':2993,'multiline':False]
['text':' Use the current level for the next line, so that "a1"','line_number':2996,'multiline':False]
['text':' will work there.','line_number':2997,'multiline':False]
['text':' If the level is unknown for the first or the last line in the file, use','line_number':3006,'multiline':False]
['text':' level 0.','line_number':3007,'multiline':False]
['text':' parseMarker() {{{2','line_number':3022,'multiline':False]
['text':'/ Parse 'foldmarker' and set "foldendmarker", "foldstartmarkerlen" and','line_number':3023,'multiline':False]
['text':'/ "foldendmarkerlen".','line_number':3024,'multiline':False]
['text':'/ Relies on the option value to have been checked for correctness already.','line_number':3025,'multiline':False]
['text':' foldlevelMarker() {{{2','line_number':3033,'multiline':False]
['text':'/ Low level function to get the foldlevel for the "marker" method.','line_number':3034,'multiline':False]
['text':'/ "foldendmarker", "foldstartmarkerlen" and "foldendmarkerlen" must have been','line_number':3035,'multiline':False]
['text':'/ set before calling this.','line_number':3036,'multiline':False]
['text':'/ Requires that flp->lvl is set to the fold level of the previous line!','line_number':3037,'multiline':False]
['text':'/ Careful: This means you can't call this function twice on the same line.','line_number':3038,'multiline':False]
['text':'/ Doesn't use any caching.','line_number':3039,'multiline':False]
['text':'/ Sets flp->start when a start marker was found.','line_number':3040,'multiline':False]
['text':' cache a few values for speed','line_number':3045,'multiline':False]
['text':' Default: no start found, next level is same as current level','line_number':3051,'multiline':False]
['text':' found startmarker: set flp->lvl','line_number':3059,'multiline':False]
['text':' found endmarker: set flp->lvl_next','line_number':3079,'multiline':False]
['text':' never start a fold with an end marker','line_number':3086,'multiline':False]
['text':' The level can't go negative, must be missing a start marker.','line_number':3099,'multiline':False]
['text':' foldlevelSyntax() {{{2','line_number':3105,'multiline':False]
['text':'/ Low level function to get the foldlevel for the "syntax" method.','line_number':3106,'multiline':False]
['text':'/ Doesn't use any caching.','line_number':3107,'multiline':False]
['text':' Use the maximum fold level at the start of this line and the next.','line_number':3112,'multiline':False]
['text':' fold(s) start here','line_number':3118,'multiline':False]
['text':' functions for storing the fold state in a View {{{1','line_number':3124,'multiline':False]
['text':' put_folds() {{{2','line_number':3125,'multiline':False]
['text':'/ Write commands to "fd" to restore the manual folds in window "wp".','line_number':3126,'multiline':False]
['text':'/','line_number':3127,'multiline':False]
['text':'/ @return  FAIL if writing fails.','line_number':3128,'multiline':False]
['text':' If some folds are manually opened/closed, need to restore that.','line_number':3139,'multiline':False]
['text':' put_folds_recurse() {{{2','line_number':3147,'multiline':False]
['text':'/ Write commands to "fd" to recreate manually created folds.','line_number':3148,'multiline':False]
['text':'/','line_number':3149,'multiline':False]
['text':'/ @return  FAIL when writing failed.','line_number':3150,'multiline':False]
['text':' Do nested folds first, they will be created closed.','line_number':3155,'multiline':False]
['text':' put_foldopen_recurse() {{{2','line_number':3170,'multiline':False]
['text':'/ Write commands to "fd" to open and close manually opened/closed folds.','line_number':3171,'multiline':False]
['text':'/','line_number':3172,'multiline':False]
['text':'/ @return  FAIL when writing failed.','line_number':3173,'multiline':False]
['text':' open nested folds while this fold is open','line_number':3180,'multiline':False]
['text':' close the parent when needed','line_number':3191,'multiline':False]
['text':' Open or close the leaf according to the window foldlevel.','line_number':3198,'multiline':False]
['text':' Do not close a leaf that is already closed, as it will close','line_number':3199,'multiline':False]
['text':' the parent.','line_number':3200,'multiline':False]
['text':' put_fold_open_close() {{{2','line_number':3216,'multiline':False]
['text':'/ Write the open or close command to "fd".','line_number':3217,'multiline':False]
['text':'/','line_number':3218,'multiline':False]
['text':'/ @return  FAIL when writing failed.','line_number':3219,'multiline':False]
['text':' }}}1','line_number':3233,'multiline':False]
['text':'/ "foldclosed()" and "foldclosedend()" functions','line_number':3235,'multiline':False]
['text':'/ "foldclosed()" function','line_number':3254,'multiline':False]
['text':'/ "foldclosedend()" function','line_number':3260,'multiline':False]
['text':'/ "foldlevel()" function','line_number':3266,'multiline':False]
['text':'/ "foldtext()" function','line_number':3275,'multiline':False]
['text':' Find first non-empty line in the fold.','line_number':3285,'multiline':False]
['text':' Find interesting text in this line.','line_number':3293,'multiline':False]
['text':' skip C comment-start','line_number':3295,'multiline':False]
['text':' for %s','line_number':3308,'multiline':False]
['text':' for %3ld','line_number':3309,'multiline':False]
['text':' concatenated','line_number':3310,'multiline':False]
['text':' remove 'foldmarker' and 'commentstring'','line_number':3315,'multiline':False]
['text':'/ "foldtextresult(lnum)" function','line_number':3321,'multiline':False]
['text':' reject recursive use','line_number':3330,'multiline':False]
['text':' Treat illegal types and illegal string values for {lnum} the same.','line_number':3334,'multiline':False]
