['text':'/ A list used for saving values of "emsg_silent".  Used by ex_try() to save the','line_number':7,'multiline':False]
['text':'/ value of "emsg_silent" if it was non-zero.  When this is done, the CSF_SILENT','line_number':8,'multiline':False]
['text':'/ flag below is set.','line_number':9,'multiline':False]
['text':'/< saved value of "emsg_silent"','line_number':12,'multiline':False]
['text':'/< next element on the list','line_number':13,'multiline':False]
['text':'/ For conditional commands a stack is kept of nested conditionals.','line_number':17,'multiline':False]
['text':'/ When cs_idx < 0, there is no conditional command.','line_number':18,'multiline':False]
['text':'/< CSF_ flags','line_number':23,'multiline':False]
['text':'/< CSTP_: what's pending in ":finally"','line_number':24,'multiline':False]
['text':'/< return typeval for pending return','line_number':26,'multiline':False]
['text':'/< exception for pending throw','line_number':27,'multiline':False]
['text':'/< info used by ":for"','line_number':29,'multiline':False]
['text':'/< line nr of ":while"/":for" line','line_number':30,'multiline':False]
['text':'/< current entry, or -1 if none','line_number':31,'multiline':False]
['text':'/< nr of nested ":while"s and ":for"s','line_number':32,'multiline':False]
['text':'/< nr of nested ":try"s','line_number':33,'multiline':False]
['text':'/< saved values of "emsg_silent"','line_number':34,'multiline':False]
['text':'/< loop flags: CSL_ flags','line_number':35,'multiline':False]
['text':'/ There is no CSF_IF, the lack of CSF_WHILE, CSF_FOR and CSF_TRY means ":if"','line_number':40,'multiline':False]
['text':'/ was used.','line_number':41,'multiline':False]
['text':'/< condition was TRUE','line_number':43,'multiline':False]
['text':'/< current state is active','line_number':44,'multiline':False]
['text':'/< ":else" has been passed','line_number':45,'multiline':False]
['text':'/< is a ":while"','line_number':46,'multiline':False]
['text':'/< is a ":for"','line_number':47,'multiline':False]
['text':'/< is a ":try"','line_number':49,'multiline':False]
['text':'/< ":finally" has been passed','line_number':50,'multiline':False]
['text':'/< exception thrown to this try conditional','line_number':51,'multiline':False]
['text':'/< exception caught by this try conditional','line_number':52,'multiline':False]
['text':'/< CSF_CAUGHT was handled by finish_exception()','line_number':53,'multiline':False]
['text':'/< "emsg_silent" reset by ":try"','line_number':54,'multiline':False]
['text':' Note that CSF_ELSE is only used when CSF_TRY and CSF_WHILE are unset','line_number':56,'multiline':False]
['text':' (an ":if"), and CSF_SILENT is only used when CSF_TRY is set.','line_number':57,'multiline':False]
['text':'/ What's pending for being reactivated at the ":endtry" of this try','line_number':59,'multiline':False]
['text':'/ conditional:','line_number':60,'multiline':False]
['text':'/< nothing pending in ":finally" clause','line_number':62,'multiline':False]
['text':'/< an error is pending','line_number':63,'multiline':False]
['text':'/< an interrupt is pending','line_number':64,'multiline':False]
['text':'/< a throw is pending','line_number':65,'multiline':False]
['text':'/< ":break" is pending','line_number':66,'multiline':False]
['text':'/< ":continue" is pending','line_number':67,'multiline':False]
['text':'/< ":return" is pending','line_number':68,'multiline':False]
['text':'/< ":finish" is pending','line_number':69,'multiline':False]
['text':'/ Flags for the cs_lflags item in cstack_T.','line_number':72,'multiline':False]
['text':'/< just found ":while" or ":for"','line_number':74,'multiline':False]
['text':'/< just found ":endwhile" or ":endfor"','line_number':75,'multiline':False]
['text':'/< just found ":continue"','line_number':76,'multiline':False]
['text':'/< just found ":finally"','line_number':77,'multiline':False]
['text':'/ A list of error messages that can be converted to an exception.  "throw_msg"','line_number':80,'multiline':False]
['text':'/ is only set in the first element of the list.  Usually, it points to the','line_number':81,'multiline':False]
['text':'/ original message stored in that element, but sometimes it points to a later','line_number':82,'multiline':False]
['text':'/ message in the list.  See cause_errthrow().','line_number':83,'multiline':False]
['text':'/< next of several messages in a row','line_number':86,'multiline':False]
['text':'/< original message, allocated','line_number':87,'multiline':False]
['text':'/< msg to throw: usually original one','line_number':88,'multiline':False]
['text':'/< value from estack_sfile(), allocated','line_number':89,'multiline':False]
['text':'/< line number for "sfile"','line_number':90,'multiline':False]
['text':'/< whether this is a multiline message','line_number':91,'multiline':False]
['text':'/ The exception types.','line_number':94,'multiline':False]
['text':'/< exception caused by ":throw" command','line_number':96,'multiline':False]
['text':'/< error exception','line_number':97,'multiline':False]
['text':'/< interrupt exception triggered by Ctrl-C','line_number':98,'multiline':False]
['text':'/ Structure describing an exception.','line_number':101,'multiline':False]
['text':'/ (don't use "struct exception", it's used by the math library).','line_number':102,'multiline':False]
['text':'/< exception type','line_number':105,'multiline':False]
['text':'/< exception value','line_number':106,'multiline':False]
['text':'/< message(s) causing error exception','line_number':107,'multiline':False]
['text':'/< name of the throw point','line_number':108,'multiline':False]
['text':'/< line number of the throw point','line_number':109,'multiline':False]
['text':'/< next exception on the caught stack','line_number':110,'multiline':False]
['text':'/ Structure to save the error/interrupt/exception state between calls to','line_number':113,'multiline':False]
['text':'/ enter_cleanup() and leave_cleanup().  Must be allocated as an automatic','line_number':114,'multiline':False]
['text':'/ variable by the (common) caller of these functions.','line_number':115,'multiline':False]
['text':'/< error/interrupt/exception state','line_number':118,'multiline':False]
['text':'/< exception value','line_number':119,'multiline':False]
['text':'/ Exception state that is saved and restored when calling timer callback','line_number':122,'multiline':False]
['text':'/ functions and deferred functions.','line_number':123,'multiline':False]
