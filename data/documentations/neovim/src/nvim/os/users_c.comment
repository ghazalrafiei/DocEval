['text':' users.c -- operating system user information','line_number':1,'multiline':False]
['text':' All user names (for ~user completion as done by shell).','line_number':29,'multiline':False]
['text':' Add a user name to the list of users in garray_T *users.','line_number':32,'multiline':False]
['text':' Do nothing if user name is NULL or empty.','line_number':33,'multiline':False]
['text':' Initialize users garray and fill it with os usernames.','line_number':48,'multiline':False]
['text':' Return Ok for success, FAIL for failure.','line_number':49,'multiline':False]
['text':' The $USER environment variable may be a valid remote user name (NIS,','line_number':92,'multiline':False]
['text':' LDAP) not already listed by getpwent(), as getpwent() only lists','line_number':93,'multiline':False]
['text':' local user names.  If $USER is not already listed, check whether it','line_number':94,'multiline':False]
['text':' is a valid remote user name using getpwnam() and if it is, add it to','line_number':95,'multiline':False]
['text':' the list of user names.','line_number':96,'multiline':False]
['text':' NOLINT','line_number':110,'multiline':False]
['text':'/ Gets the username that owns the current Nvim process.','line_number':123,'multiline':False]
['text':'/','line_number':124,'multiline':False]
['text':'/ @param s[out] Username.','line_number':125,'multiline':False]
['text':'/ @param len Length of `s`.','line_number':126,'multiline':False]
['text':'/','line_number':127,'multiline':False]
['text':'/ @return OK if a name found.','line_number':128,'multiline':False]
['text':' TODO(equalsraf): Windows GetUserName()','line_number':134,'multiline':False]
['text':'/ Gets the username associated with `uid`.','line_number':139,'multiline':False]
['text':'/','line_number':140,'multiline':False]
['text':'/ @param uid User id.','line_number':141,'multiline':False]
['text':'/ @param s[out] Username, or `uid` on failure.','line_number':142,'multiline':False]
['text':'/ @param len Length of `s`.','line_number':143,'multiline':False]
['text':'/','line_number':144,'multiline':False]
['text':'/ @return OK if a username was found, else FAIL.','line_number':145,'multiline':False]
['text':' NOLINT(runtime/threadsafe_fn)','line_number':151,'multiline':False]
['text':' a number is not a name','line_number':158,'multiline':False]
['text':'/ Gets the user directory for the given username, or NULL on failure.','line_number':161,'multiline':False]
['text':'/','line_number':162,'multiline':False]
['text':'/ Caller must free() the returned string.','line_number':163,'multiline':False]
['text':' NOLINT(runtime/threadsafe_fn)','line_number':170,'multiline':False]
['text':' save the string from the static passwd entry into malloced memory','line_number':172,'multiline':False]
['text':'/ Find all user names for user completion.','line_number':188,'multiline':False]
['text':'/','line_number':189,'multiline':False]
['text':'/ Done only once and then cached.','line_number':190,'multiline':False]
['text':'/ Given to ExpandGeneric() to obtain an user names.','line_number':204,'multiline':False]
['text':'/ Check whether name matches a user name.','line_number':214,'multiline':False]
['text':'/','line_number':215,'multiline':False]
['text':'/ @return 0 if name does not match any user name.','line_number':216,'multiline':False]
['text':'/         1 if name partially matches the beginning of a user name.','line_number':217,'multiline':False]
['text':'/         2 is name fully matches a user name.','line_number':218,'multiline':False]
['text':' full match','line_number':227,'multiline':False]
['text':' partial match','line_number':230,'multiline':False]
