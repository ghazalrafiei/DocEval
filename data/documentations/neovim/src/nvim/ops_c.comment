['text':' ops.c: implementation of various operators: op_shift, op_delete, op_tilde,','line_number':1,'multiline':False]
['text':'        op_change, op_yank, do_put, do_join','line_number':2,'multiline':False]
['text':' ptr to last written yankreg','line_number':68,'multiline':False]
['text':' for behavior between start_batch_changes() and end_batch_changes())','line_number':70,'multiline':False]
['text':' inside a script','line_number':71,'multiline':False]
['text':' delay clipboard update','line_number':72,'multiline':False]
['text':' clipboard was updated','line_number':73,'multiline':False]
['text':' structure used by block_prep, op_delete and op_yank for blockwise operators','line_number':76,'multiline':False]
['text':' also op_change, op_shift, op_insert, op_replace - AKelly','line_number':77,'multiline':False]
['text':' 'extra' cols before first char','line_number':79,'multiline':False]
['text':' 'extra' cols after last char','line_number':80,'multiline':False]
['text':' chars in block','line_number':81,'multiline':False]
['text':' pointer to 1st char (partially) in block','line_number':82,'multiline':False]
['text':' index of chars (partially) in block','line_number':83,'multiline':False]
['text':' start col of 1st char wholly inside block','line_number':84,'multiline':False]
['text':' start col of 1st char wholly after block','line_number':85,'multiline':False]
['text':' true if line is too short to fit in block','line_number':86,'multiline':False]
['text':' true if curswant==MAXCOL when starting','line_number':87,'multiline':False]
['text':' true if block within one character','line_number':88,'multiline':False]
['text':' screen cols of ws before block','line_number':89,'multiline':False]
['text':' chars of ws before block','line_number':90,'multiline':False]
['text':' number of vcols of post-block char','line_number':91,'multiline':False]
['text':' number of vcols of pre-block char','line_number':92,'multiline':False]
['text':' Flags for third item in "opchars".','line_number':102,'multiline':False]
['text':' operator always works on lines','line_number':103,'multiline':False]
['text':' operator changes text','line_number':104,'multiline':False]
['text':'/ The names of operators.','line_number':106,'multiline':False]
['text':'/ IMPORTANT: Index must correspond with defines in ops.h!!!','line_number':107,'multiline':False]
['text':'/ The third field indicates whether the operator always works on lines.','line_number':108,'multiline':False]
['text':' OP_NOP','line_number':110,'multiline':False]
['text':' OP_DELETE','line_number':111,'multiline':False]
['text':' OP_YANK','line_number':112,'multiline':False]
['text':' OP_CHANGE','line_number':113,'multiline':False]
['text':' OP_LSHIFT','line_number':114,'multiline':False]
['text':' OP_RSHIFT','line_number':115,'multiline':False]
['text':' OP_FILTER','line_number':116,'multiline':False]
['text':' OP_TILDE','line_number':117,'multiline':False]
['text':' OP_INDENT','line_number':118,'multiline':False]
['text':' OP_FORMAT','line_number':119,'multiline':False]
['text':' OP_COLON','line_number':120,'multiline':False]
['text':' OP_UPPER','line_number':121,'multiline':False]
['text':' OP_LOWER','line_number':122,'multiline':False]
['text':' DO_JOIN','line_number':123,'multiline':False]
['text':' DO_JOIN_NS','line_number':124,'multiline':False]
['text':' OP_ROT13','line_number':125,'multiline':False]
['text':' OP_REPLACE','line_number':126,'multiline':False]
['text':' OP_INSERT','line_number':127,'multiline':False]
['text':' OP_APPEND','line_number':128,'multiline':False]
['text':' OP_FOLD','line_number':129,'multiline':False]
['text':' OP_FOLDOPEN','line_number':130,'multiline':False]
['text':' OP_FOLDOPENREC','line_number':131,'multiline':False]
['text':' OP_FOLDCLOSE','line_number':132,'multiline':False]
['text':' OP_FOLDCLOSEREC','line_number':133,'multiline':False]
['text':' OP_FOLDDEL','line_number':134,'multiline':False]
['text':' OP_FOLDDELREC','line_number':135,'multiline':False]
['text':' OP_FORMAT2','line_number':136,'multiline':False]
['text':' OP_FUNCTION','line_number':137,'multiline':False]
['text':' OP_NR_ADD','line_number':138,'multiline':False]
['text':' OP_NR_SUB','line_number':139,'multiline':False]
['text':'/ Translate a command name into an operator type.','line_number':152,'multiline':False]
['text':'/ Must only be called with a valid operator name!','line_number':153,'multiline':False]
['text':' ignore second character','line_number':159,'multiline':False]
['text':' when tilde is an operator','line_number':163,'multiline':False]
['text':' add','line_number':167,'multiline':False]
['text':' subtract','line_number':171,'multiline':False]
['text':' OP_YANK','line_number':174,'multiline':False]
['text':'/ @return  true if operator "op" always works on whole lines.','line_number':189,'multiline':False]
['text':'/ @return  true if operator "op" changes text.','line_number':195,'multiline':False]
['text':'/ Get first operator command character.','line_number':201,'multiline':False]
['text':'/','line_number':202,'multiline':False]
['text':'/ @return  'g' or 'z' if there is another command character.','line_number':203,'multiline':False]
['text':'/ Get second operator command character.','line_number':209,'multiline':False]
['text':'/ handle a shift operation','line_number':215,'multiline':False]
['text':' empty line','line_number':232,'multiline':False]
['text':' Move the line right if it doesn't start with '#', 'smartindent'','line_number':237,'multiline':False]
['text':' isn't set or 'cindent' isn't set or '#' isn't in 'cino'.','line_number':238,'multiline':False]
['text':' put cursor on first line, for ">>"','line_number':247,'multiline':False]
['text':' shift_line() may have set cursor.col','line_number':249,'multiline':False]
['text':' put cursor on last line, for ":>"','line_number':251,'multiline':False]
['text':' The cursor line is not in a closed fold','line_number':253,'multiline':False]
['text':' Set "'[" and "']" marks.','line_number':275,'multiline':False]
['text':'/ Shift the current line one shiftwidth left (if left != 0) or right','line_number':287,'multiline':False]
['text':'/ leaves cursor on first blank in the line.','line_number':288,'multiline':False]
['text':'/','line_number':289,'multiline':False]
['text':'/ @param call_changed_bytes  call changed_bytes()','line_number':290,'multiline':False]
['text':' get current indent','line_number':295,'multiline':False]
['text':' round off indent','line_number':297,'multiline':False]
['text':' number of 'shiftwidth' rounded down','line_number':298,'multiline':False]
['text':' extra spaces','line_number':299,'multiline':False]
['text':' first remove extra spaces','line_number':300,'multiline':False]
['text':' original vi indent','line_number':312,'multiline':False]
['text':' Set new indent','line_number':323,'multiline':False]
['text':'/ Shift one line of the current block one shiftwidth right or left.','line_number':331,'multiline':False]
['text':'/ Leaves cursor on first character in block.','line_number':332,'multiline':False]
['text':' don't want revins in indent','line_number':345,'multiline':False]
['text':' don't want MODE_REPLACE for State','line_number':347,'multiline':False]
['text':' total is number of screen columns to be inserted/removed','line_number':353,'multiline':False]
['text':' multiplication overflow','line_number':356,'multiline':False]
['text':'  1. Get start vcol','line_number':364,'multiline':False]
['text':'  2. Total ws vcols','line_number':365,'multiline':False]
['text':'  3. Divvy into TABs & spp','line_number':366,'multiline':False]
['text':'  4. Construct new string','line_number':367,'multiline':False]
['text':' all virtual WS up to & incl a split TAB','line_number':368,'multiline':False]
['text':' TODO(vim): is passing bd.textstart for start of the line OK?','line_number':380,'multiline':False]
['text':' OK, now total=all the VWS reqd, and textstart points at the 1st','line_number':394,'multiline':False]
['text':' non-ws char in the block.','line_number':395,'multiline':False]
['text':' if we're splitting a TAB, allow for it','line_number':403,'multiline':False]
['text':' the length of the line after the block shift','line_number':407,'multiline':False]
['text':' Note that STRMOVE() copies the trailing NUL.','line_number':416,'multiline':False]
['text':' left','line_number':418,'multiline':False]
['text':' end of the part of the line which is','line_number':419,'multiline':False]
['text':' copied verbatim','line_number':420,'multiline':False]
['text':' the (displayed) width of this part','line_number':421,'multiline':False]
['text':' of line','line_number':422,'multiline':False]
['text':' Firstly, let's find the first non-whitespace character that is','line_number':425,'multiline':False]
['text':' displayed after the block's start column and the character's column','line_number':426,'multiline':False]
['text':' number. Also, let's calculate the width of all the whitespace','line_number':427,'multiline':False]
['text':' characters that are displayed in the block and precede the searched','line_number':428,'multiline':False]
['text':' non-whitespace character.','line_number':429,'multiline':False]
['text':' If "bd.startspaces" is set, "bd.textstart" points to the character,','line_number':431,'multiline':False]
['text':' the part of which is displayed at the block's beginning. Let's start','line_number':432,'multiline':False]
['text':' searching from the next character.','line_number':433,'multiline':False]
['text':' The character's column is in "bd.start_vcol".','line_number':438,'multiline':False]
['text':' We will shift by "total" or "block_space_width", whichever is less.','line_number':453,'multiline':False]
['text':' The column to which we will shift the text.','line_number':457,'multiline':False]
['text':' Now let's find out how much of the beginning of the line we can','line_number':460,'multiline':False]
['text':' reuse without modification.','line_number':461,'multiline':False]
['text':' If "bd.startspaces" is set, "bd.textstart" points to the character','line_number':465,'multiline':False]
['text':' preceding the block. We have to subtract its width to obtain its','line_number':466,'multiline':False]
['text':' column number.','line_number':467,'multiline':False]
['text':' If "destination_col" is different from the width of the initial','line_number':485,'multiline':False]
['text':' part of the line that will be copied, it means we encountered a tab','line_number':486,'multiline':False]
['text':' character, which we will have to partly replace with spaces.','line_number':487,'multiline':False]
['text':' nr of spaces that replace a TAB','line_number':489,'multiline':False]
['text':' The replacement line will consist of:','line_number':494,'multiline':False]
['text':' - the beginning of the original line up to "verbatim_copy_end",','line_number':495,'multiline':False]
['text':' - "fill" number of spaces,','line_number':496,'multiline':False]
['text':' - the rest of the line, pointed to by non_white.','line_number':497,'multiline':False]
['text':' the length of the line after the block shift','line_number':498,'multiline':False]
['text':' Note that STRMOVE() copies the trailing NUL.','line_number':507,'multiline':False]
['text':' replace the line','line_number':510,'multiline':False]
['text':'/ Insert string "s" (b_insert ? before : after) block :AKelly','line_number':521,'multiline':False]
['text':'/ Caller must prepare for undo.','line_number':522,'multiline':False]
['text':' extra spaces to replace a cut TAB','line_number':526,'multiline':False]
['text':' non-zero if cutting a TAB','line_number':527,'multiline':False]
['text':' pointer along new line','line_number':528,'multiline':False]
['text':' new, old lines','line_number':530,'multiline':False]
['text':' don't want MODE_REPLACE for State','line_number':532,'multiline':False]
['text':' OP_INSERT, line ends before block start','line_number':537,'multiline':False]
['text':' we're cutting a TAB','line_number':546,'multiline':False]
['text':' append','line_number':549,'multiline':False]
['text':' spaces = padding after block','line_number':551,'multiline':False]
['text':' we're cutting a TAB','line_number':554,'multiline':False]
['text':' spaces = padding to block edge','line_number':557,'multiline':False]
['text':' if $ used, just append to EOL (ie spaces==0)','line_number':558,'multiline':False]
['text':' avoid copying part of a multi-byte character','line_number':568,'multiline':False]
['text':' can happen when the cursor was moved','line_number':571,'multiline':False]
['text':' Make sure the allocated size matches what is actually copied below.','line_number':576,'multiline':False]
['text':' copy up to shifted part','line_number':581,'multiline':False]
['text':' insert pre-padding','line_number':586,'multiline':False]
['text':' copy the new text','line_number':589,'multiline':False]
['text':' insert post-padding','line_number':596,'multiline':False]
['text':' We're splitting a TAB, don't copy it.','line_number':598,'multiline':False]
['text':' We allowed for that TAB, remember this now','line_number':600,'multiline':False]
['text':' Not a TAB, no extra spaces','line_number':604,'multiline':False]
['text':' Set "']" mark to the end of the block instead of the end of','line_number':619,'multiline':False]
['text':' the insert in the first line.','line_number':620,'multiline':False]
['text':' for all lnum','line_number':624,'multiline':False]
['text':'/ Handle reindenting a block of lines.','line_number':631,'multiline':False]
['text':' Don't even try when 'modifiable' is off.','line_number':639,'multiline':False]
['text':' Save for undo.  Do this once for all lines, much faster than doing this','line_number':645,'multiline':False]
['text':' for each line separately, especially when undoing.','line_number':646,'multiline':False]
['text':' it's a slow thing to do, so give feedback so there's no worry','line_number':651,'multiline':False]
['text':' that the computer's just hung.','line_number':652,'multiline':False]
['text':' Be vi-compatible: For lisp indenting the first line is not','line_number':660,'multiline':False]
['text':' indented, unless there is only one line.','line_number':661,'multiline':False]
['text':' empty or blank line','line_number':665,'multiline':False]
['text':' get the indent for this line','line_number':668,'multiline':False]
['text':' did change the indent, call changed_lines() later','line_number':671,'multiline':False]
['text':' make sure it's valid','line_number':679,'multiline':False]
['text':' put cursor on first non-blank of indented line','line_number':683,'multiline':False]
['text':' Mark changed lines so that they will be redrawn.  When Visual','line_number':687,'multiline':False]
['text':' highlighting was present, need to continue until the last line.  When','line_number':688,'multiline':False]
['text':' there is no change still need to remove the Visual highlighting.','line_number':689,'multiline':False]
['text':' set '[ and '] marks','line_number':703,'multiline':False]
['text':' Keep the last expression line here, for repeating.','line_number':709,'multiline':False]
['text':'/ Get an expression for the "\"=expr1" or "CTRL-R =expr1"','line_number':712,'multiline':False]
['text':'/','line_number':713,'multiline':False]
['text':'/ @return  '=' when OK, NUL otherwise.','line_number':714,'multiline':False]
['text':' use previous line','line_number':721,'multiline':False]
['text':'/ Set the expression for the '=' register.','line_number':729,'multiline':False]
['text':'/ Argument must be an allocated string.','line_number':730,'multiline':False]
['text':'/ Get the result of the '=' register expression.','line_number':737,'multiline':False]
['text':'/','line_number':738,'multiline':False]
['text':'/ @return  a pointer to allocated memory, or NULL for failure.','line_number':739,'multiline':False]
['text':' Make a copy of the expression, because evaluating it may cause it to be','line_number':748,'multiline':False]
['text':' changed.','line_number':749,'multiline':False]
['text':' When we are invoked recursively limit the evaluation to 10 levels.','line_number':752,'multiline':False]
['text':' Then return the string as-is.','line_number':753,'multiline':False]
['text':'/ Get the '=' register expression itself, without evaluating it.','line_number':765,'multiline':False]
['text':'/ @return  whether `regname` is a valid name of a yank register.','line_number':774,'multiline':False]
['text':'/','line_number':775,'multiline':False]
['text':'/ @note: There is no check for 0 (default register), caller should do this.','line_number':776,'multiline':False]
['text':'/ The black hole register '_' is regarded as valid.','line_number':777,'multiline':False]
['text':'/','line_number':778,'multiline':False]
['text':'/ @param regname name of register','line_number':779,'multiline':False]
['text':'/ @param writing allow only writable registers','line_number':780,'multiline':False]
['text':'/ @return yankreg_T to use, according to the value of `regname`.','line_number':796,'multiline':False]
['text':'/ Cannot handle the '_' (black hole) register.','line_number':797,'multiline':False]
['text':'/ Must only be called with a valid register name!','line_number':798,'multiline':False]
['text':'/','line_number':799,'multiline':False]
['text':'/ @param regname The name of the register used or 0 for the unnamed register','line_number':800,'multiline':False]
['text':'/ @param mode One of the following three flags:','line_number':801,'multiline':False]
['text':'/','line_number':802,'multiline':False]
['text':'/ `YREG_PASTE`:','line_number':803,'multiline':False]
['text':'/ Prepare for pasting the register `regname`. With no regname specified,','line_number':804,'multiline':False]
['text':'/ read from last written register, or from unnamed clipboard (depending on the','line_number':805,'multiline':False]
['text':'/ `clipboard=unnamed` option). Queries the clipboard provider if necessary.','line_number':806,'multiline':False]
['text':'/','line_number':807,'multiline':False]
['text':'/ `YREG_YANK`:','line_number':808,'multiline':False]
['text':'/ Preparare for yanking into `regname`. With no regname specified,','line_number':809,'multiline':False]
['text':'/ yank into `"0` register. Update `y_previous` for next unnamed paste.','line_number':810,'multiline':False]
['text':'/','line_number':811,'multiline':False]
['text':'/ `YREG_PUT`:','line_number':812,'multiline':False]
['text':'/ Obtain the location that would be read when pasting `regname`.','line_number':813,'multiline':False]
['text':' reg is set to clipboard contents.','line_number':819,'multiline':False]
['text':' in case clipboard not available, paste from previous used register','line_number':824,'multiline':False]
['text':' when not 0-9, a-z, A-Z or '-'/'+'/'*': use register 0','line_number':829,'multiline':False]
['text':' remember the written register for unnamed paste','line_number':836,'multiline':False]
['text':'/ @return  a copy of contents in register `name` for use in do_put. Should be','line_number':847,'multiline':False]
['text':'/          freed by caller.','line_number':848,'multiline':False]
['text':'/ Check if the current yank register has kMTLineWise register type','line_number':867,'multiline':False]
['text':' black hole is always empty','line_number':873,'multiline':False]
['text':'/ Start or stop recording into a yank register.','line_number':880,'multiline':False]
['text':'/','line_number':881,'multiline':False]
['text':'/ @return  FAIL for failure, OK otherwise.','line_number':882,'multiline':False]
['text':' start recording','line_number':889,'multiline':False]
['text':' registers 0-9, a-z and " are allowed','line_number':890,'multiline':False]
['text':' TODO(bfredl): showmode based messaging is currently missing with cmdheight=0','line_number':895,'multiline':False]
['text':' stop recording','line_number':902,'multiline':False]
['text':' Set the v:event dictionary with information about the recording.','line_number':904,'multiline':False]
['text':' The recorded text contents.','line_number':907,'multiline':False]
['text':' Remove escaping for K_SPECIAL in multi-byte chars.','line_number':910,'multiline':False]
['text':' Name of requested register, or empty string for unnamed operation.','line_number':915,'multiline':False]
['text':' Get the recorded key hits.  K_SPECIAL will be escaped, this','line_number':922,'multiline':False]
['text':' needs to be removed again to put it in a register.  exec_reg then','line_number':923,'multiline':False]
['text':' adds the escaping back later.','line_number':924,'multiline':False]
['text':' We don't want to change the default register here, so save and','line_number':937,'multiline':False]
['text':' restore the current register name.','line_number':938,'multiline':False]
['text':'/ Stuff string "p" into yank register "regname" as a single line (append if','line_number':959,'multiline':False]
['text':'/ uppercase). "p" must have been allocated.','line_number':960,'multiline':False]
['text':'/','line_number':961,'multiline':False]
['text':'/ @return  FAIL for failure, OK otherwise','line_number':962,'multiline':False]
['text':' check for read-only register','line_number':965,'multiline':False]
['text':' black hole: don't do anything','line_number':970,'multiline':False]
['text':'/ When executing a register as a series of ex-commands, if the','line_number':1000,'multiline':False]
['text':'/ line-continuation character is used for a line, then join it with one or','line_number':1001,'multiline':False]
['text':'/ more previous lines. Note that lines are processed backwards starting from','line_number':1002,'multiline':False]
['text':'/ the last line in the register.','line_number':1003,'multiline':False]
['text':'/','line_number':1004,'multiline':False]
['text':'/ @param lines list of lines in the register','line_number':1005,'multiline':False]
['text':'/ @param idx   index of the line starting with \ or "\. Join this line with all the immediate','line_number':1006,'multiline':False]
['text':'/              predecessor lines that start with a \ and the first line that doesn't start','line_number':1007,'multiline':False]
['text':'/              with a \. Lines that start with a comment "\ character are ignored.','line_number':1008,'multiline':False]
['text':'/ @returns the concatenated line. The index of the line that should be','line_number':1009,'multiline':False]
['text':'/          processed next is returned in idx.','line_number':1010,'multiline':False]
['text':' search backwards to find the first line of this command.','line_number':1020,'multiline':False]
['text':' Any line not starting with \ or "\ is the start of the','line_number':1021,'multiline':False]
['text':' command.','line_number':1022,'multiline':False]
['text':' join all the lines','line_number':1031,'multiline':False]
['text':' Adjust the growsize to the current length to','line_number':1036,'multiline':False]
['text':' speed up concatenating many lines.','line_number':1037,'multiline':False]
['text':'/ Execute a yank register: copy it into the stuff buffer','line_number':1052,'multiline':False]
['text':'/','line_number':1053,'multiline':False]
['text':'/ @param colon   insert ':' before each line','line_number':1054,'multiline':False]
['text':'/ @param addcr   always add '\n' to end of line','line_number':1055,'multiline':False]
['text':'/ @param silent  set "silent" flag in typeahead buffer','line_number':1056,'multiline':False]
['text':'/','line_number':1057,'multiline':False]
['text':'/ @return FAIL for failure, OK otherwise','line_number':1058,'multiline':False]
['text':' repeat previous one','line_number':1063,'multiline':False]
['text':' check for valid regname','line_number':1070,'multiline':False]
['text':' black hole: don't stuff anything','line_number':1077,'multiline':False]
['text':' use last command line','line_number':1081,'multiline':False]
['text':' don't keep the cmdline containing @:','line_number':1086,'multiline':False]
['text':' Escape all control characters with a CTRL-V','line_number':1088,'multiline':False]
['text':' When in Visual mode "'<,'>" will be prepended to the command.','line_number':1095,'multiline':False]
['text':' Remove it when it's already there.','line_number':1096,'multiline':False]
['text':' use last inserted text','line_number':1110,'multiline':False]
['text':' Disallow remapping for ":@r".','line_number':1124,'multiline':False]
['text':' Insert lines into typeahead buffer, from last one to first one.','line_number':1127,'multiline':False]
['text':' from y_size - 1 to 0 included','line_number':1129,'multiline':False]
['text':' insert NL between lines and after last line if type is kMTLineWise','line_number':1130,'multiline':False]
['text':' Handle line-continuation for :@<register>','line_number':1137,'multiline':False]
['text':' disable the 'q' command','line_number':1161,'multiline':False]
['text':'/ If "restart_edit" is not zero, put it in the typeahead buffer, so that it's','line_number':1166,'multiline':False]
['text':'/ used only after other typeahead has been processed.','line_number':1167,'multiline':False]
['text':'/ Insert register contents "s" into the typeahead buffer, so that it will be','line_number':1189,'multiline':False]
['text':'/ executed again.','line_number':1190,'multiline':False]
['text':'/','line_number':1191,'multiline':False]
['text':'/ @param esc    when true then it is to be taken literally: Escape K_SPECIAL','line_number':1192,'multiline':False]
['text':'/               characters and no remapping.','line_number':1193,'multiline':False]
['text':'/ @param colon  add ':' before the line','line_number':1194,'multiline':False]
['text':'/ Insert a yank register: copy it into the Read buffer.','line_number':1226,'multiline':False]
['text':'/ Used by CTRL-R command and middle mouse button in insert mode.','line_number':1227,'multiline':False]
['text':'/','line_number':1228,'multiline':False]
['text':'/ @param literally_arg  insert literally, not as if typed','line_number':1229,'multiline':False]
['text':'/','line_number':1230,'multiline':False]
['text':'/ @return FAIL for failure, OK otherwise','line_number':1231,'multiline':False]
['text':' It is possible to get into an endless loop by having CTRL-R a in','line_number':1238,'multiline':False]
['text':' register a and then, in insert mode, doing CTRL-R a.','line_number':1239,'multiline':False]
['text':' If you hit CTRL-C, the loop will be broken here.','line_number':1240,'multiline':False]
['text':' check for valid regname','line_number':1246,'multiline':False]
['text':' Insert last inserted text.','line_number':1252,'multiline':False]
['text':' Name or number register.','line_number':1262,'multiline':False]
['text':' Insert a newline between lines and after last line if','line_number':1275,'multiline':False]
['text':' y_type is kMTLineWise.','line_number':1276,'multiline':False]
['text':'/ If "regname" is a special register, return true and store a pointer to its','line_number':1287,'multiline':False]
['text':'/ value in "argp".','line_number':1288,'multiline':False]
['text':'/','line_number':1289,'multiline':False]
['text':'/ @param allocated  return: true when value was allocated','line_number':1290,'multiline':False]
['text':'/ @param errmsg     give error message when failing','line_number':1291,'multiline':False]
['text':'/','line_number':1292,'multiline':False]
['text':'/ @return  true if "regname" is a special register,','line_number':1293,'multiline':False]
['text':' file name','line_number':1299,'multiline':False]
['text':' will give emsg if not set','line_number':1301,'multiline':False]
['text':' alternate file name','line_number':1306,'multiline':False]
['text':' may give emsg if not set','line_number':1307,'multiline':False]
['text':' result of expression','line_number':1310,'multiline':False]
['text':' last command line','line_number':1315,'multiline':False]
['text':' last search-pattern','line_number':1322,'multiline':False]
['text':' last inserted text','line_number':1329,'multiline':False]
['text':' Filename under cursor','line_number':1337,'multiline':False]
['text':' Path under cursor, expand via "path"','line_number':1338,'multiline':False]
['text':' word under cursor','line_number':1347,'multiline':False]
['text':' WORD (mnemonic All) under cursor','line_number':1348,'multiline':False]
['text':' Line under cursor','line_number':1359,'multiline':False]
['text':' black hole: always empty','line_number':1367,'multiline':False]
['text':'/ Paste a yank register into the command line.','line_number':1375,'multiline':False]
['text':'/ Only for non-special registers.','line_number':1376,'multiline':False]
['text':'/ Used by CTRL-R in command-line mode.','line_number':1377,'multiline':False]
['text':'/ insert_reg() can't be used here, because special characters from the','line_number':1378,'multiline':False]
['text':'/ register contents will be interpreted as commands.','line_number':1379,'multiline':False]
['text':'/','line_number':1380,'multiline':False]
['text':'/ @param regname   Register name.','line_number':1381,'multiline':False]
['text':'/ @param literally_arg Insert text literally instead of "as typed".','line_number':1382,'multiline':False]
['text':'/ @param remcr     When true, don't add CR characters.','line_number':1383,'multiline':False]
['text':'/','line_number':1384,'multiline':False]
['text':'/ @returns FAIL for failure, OK otherwise','line_number':1385,'multiline':False]
['text':' Insert ^M between lines, unless `remcr` is true.','line_number':1398,'multiline':False]
['text':' Check for CTRL-C, in case someone tries to paste a few thousand','line_number':1403,'multiline':False]
['text':' lines and gets bored.','line_number':1404,'multiline':False]
['text':'/ Shift the delete registers: "9 is cleared, "8 becomes "9, etc.','line_number':1413,'multiline':False]
['text':' free register "9','line_number':1416,'multiline':False]
['text':' set register "1 to empty','line_number':1423,'multiline':False]
['text':'/ Handle a delete operation.','line_number':1426,'multiline':False]
['text':'/','line_number':1427,'multiline':False]
['text':'/ @return  FAIL if undo failed, OK otherwise.','line_number':1428,'multiline':False]
['text':' nothing to do','line_number':1435,'multiline':False]
['text':' Nothing to delete, return here. Do prepare undo, for op_change().','line_number':1439,'multiline':False]
['text':' Use the register given with CTRL_R, defaults to zero','line_number':1450,'multiline':False]
['text':' Imitate the strange Vi behaviour: If the delete spans more than one','line_number':1456,'multiline':False]
['text':' line and motion_type == kMTCharWise and the result is a blank line, make the','line_number':1457,'multiline':False]
['text':' delete linewise.  Don't do this for the change command or Visual mode.','line_number':1458,'multiline':False]
['text':' Check for trying to delete (e.g. "D") in an empty line.','line_number':1474,'multiline':False]
['text':' Note: For the change operator it is ok.','line_number':1475,'multiline':False]
['text':' It's an error to operate on an empty region, when 'E' included in','line_number':1480,'multiline':False]
['text':' 'cpoptions' (Vi compatible).','line_number':1481,'multiline':False]
['text':' Virtual editing: Nothing gets deleted, but we set the '[ and ']','line_number':1483,'multiline':False]
['text':' marks as if it happened.','line_number':1484,'multiline':False]
['text':' Do a yank of whatever we're about to delete.','line_number':1493,'multiline':False]
['text':' If a yank register was specified, put the deleted text into that','line_number':1494,'multiline':False]
['text':' register.  For the black hole register '_' don't yank anything.','line_number':1495,'multiline':False]
['text':' check for read-only register','line_number':1500,'multiline':False]
['text':' yank into specif'd reg','line_number':1505,'multiline':False]
['text':' yank without message','line_number':1506,'multiline':False]
['text':' Put deleted text into register 1 and shift number registers if the','line_number':1510,'multiline':False]
['text':' delete contains a line break, or when using a specific operator (Vi','line_number':1511,'multiline':False]
['text':' compatible)','line_number':1512,'multiline':False]
['text':' Yank into small delete register when no named register specified','line_number':1521,'multiline':False]
['text':' and the delete is within one line.','line_number':1522,'multiline':False]
['text':' block mode delete','line_number':1539,'multiline':False]
['text':' nothing to delete','line_number':1548,'multiline':False]
['text':' Adjust cursor position for tab replaced by spaces and 'lbr'.','line_number':1552,'multiline':False]
['text':' "n" == number of chars deleted','line_number':1558,'multiline':False]
['text':' If we delete a TAB, it may be replaced by several characters.','line_number':1559,'multiline':False]
['text':' Thus the number of characters may increase!','line_number':1560,'multiline':False]
['text':' copy up to deleted part','line_number':1564,'multiline':False]
['text':' insert spaces','line_number':1566,'multiline':False]
['text':' copy the part after the deleted part','line_number':1569,'multiline':False]
['text':' replace the line','line_number':1572,'multiline':False]
['text':' no lines deleted','line_number':1583,'multiline':False]
['text':' Delete the lines except the first one.  Temporarily move the','line_number':1586,'multiline':False]
['text':' cursor to the next line.  Save the current line number, if the','line_number':1587,'multiline':False]
['text':' last line is deleted it may be changed.','line_number':1588,'multiline':False]
['text':' don't delete indent','line_number':1599,'multiline':False]
['text':' cursor on first non-white','line_number':1600,'multiline':False]
['text':' delete the indent when ESC hit','line_number':1601,'multiline':False]
['text':' cursor in column 0','line_number':1604,'multiline':False]
['text':' delete the rest of the line','line_number':1608,'multiline':False]
['text':' leave cursor past last char in line','line_number':1614,'multiline':False]
['text':' "U" command not possible after "2cc"','line_number':1616,'multiline':False]
['text':'  "U" command not possible after "dd"','line_number':1621,'multiline':False]
['text':' For virtualedit: break the tabs that are partly included.','line_number':1625,'multiline':False]
['text':' save first line for undo','line_number':1628,'multiline':False]
['text':' Break a tab only when it's included in the area.','line_number':1644,'multiline':False]
['text':' save last line for undo','line_number':1648,'multiline':False]
['text':' delete characters within one line','line_number':1661,'multiline':False]
['text':' save line for undo','line_number':1662,'multiline':False]
['text':' if 'cpoptions' contains '$', display '$' at end of change','line_number':1666,'multiline':False]
['text':' fix up things for virtualedit-delete:','line_number':1677,'multiline':False]
['text':' break the tabs which are going to get in our way','line_number':1678,'multiline':False]
['text':' Delete at least one char (e.g, when on a control char).','line_number':1687,'multiline':False]
['text':' When deleted a char in the line, reset coladd.','line_number':1692,'multiline':False]
['text':' delete characters between lines','line_number':1701,'multiline':False]
['text':' save deleted and changed lines for undo','line_number':1704,'multiline':False]
['text':' start position for delete','line_number':1711,'multiline':False]
['text':' delete from cursor to end of line','line_number':1715,'multiline':False]
['text':' remember curwin->w_cursor','line_number':1717,'multiline':False]
['text':' delete from start of line until op_end','line_number':1722,'multiline':False]
['text':' restore curwin->w_cursor','line_number':1727,'multiline':False]
['text':'/ Adjust end of operating area for ending on a multi-byte character.','line_number':1755,'multiline':False]
['text':'/ Used for deletion.','line_number':1756,'multiline':False]
['text':'/ Put character 'c' at position 'lp'','line_number':1767,'multiline':False]
['text':'/ Replace the character under the cursor with "c".','line_number':1777,'multiline':False]
['text':'/ This takes care of multi-byte characters.','line_number':1778,'multiline':False]
['text':' Backup to the replaced character.','line_number':1786,'multiline':False]
['text':'/ Replace a whole area with one character.','line_number':1790,'multiline':False]
['text':' nothing to do','line_number':1799,'multiline':False]
['text':' block mode replace','line_number':1816,'multiline':False]
['text':' make sure cursor position is valid','line_number':1825,'multiline':False]
['text':' nothing to replace','line_number':1828,'multiline':False]
['text':' n == number of extra chars required','line_number':1831,'multiline':False]
['text':' If we split a TAB, it may be replaced by several characters.','line_number':1832,'multiline':False]
['text':' Thus the number of characters may increase!','line_number':1833,'multiline':False]
['text':' If the range starts in virtual space, count the initial','line_number':1834,'multiline':False]
['text':' coladd offset as part of "startspaces"','line_number':1835,'multiline':False]
['text':' allow for pre spaces','line_number':1844,'multiline':False]
['text':' allow for post spp','line_number':1848,'multiline':False]
['text':' Figure out how many characters to replace.','line_number':1852,'multiline':False]
['text':' A double-wide character can be replaced only up to half the','line_number':1858,'multiline':False]
['text':' times.','line_number':1859,'multiline':False]
['text':' Compute bytes needed, move character count to num_chars.','line_number':1868,'multiline':False]
['text':' copy up to deleted part','line_number':1884,'multiline':False]
['text':' insert pre-spaces','line_number':1887,'multiline':False]
['text':' insert replacement chars CHECK FOR ALLOCATED SPACE','line_number':1889,'multiline':False]
['text':' REPLACE_CR_NCHAR/REPLACE_NL_NCHAR is used for entering CR literally.','line_number':1890,'multiline':False]
['text':' strlen(newp) at this point','line_number':1896,'multiline':False]
['text':' insert post-spaces','line_number':1902,'multiline':False]
['text':' copy the part after the changed part','line_number':1905,'multiline':False]
['text':' Replacing with \r or \n means splitting the line.','line_number':1910,'multiline':False]
['text':' replace the line','line_number':1916,'multiline':False]
['text':' Characterwise or linewise motion replace.','line_number':1932,'multiline':False]
['text':' TODO(bfredl): we could batch all the splicing','line_number':1944,'multiline':False]
['text':' done on the same line, at least','line_number':1945,'multiline':False]
['text':' This is slow, but it handles replacing a single-byte','line_number':1955,'multiline':False]
['text':' with a multi-byte and the other way around.','line_number':1956,'multiline':False]
['text':' oap->end has to be recalculated when','line_number':1967,'multiline':False]
['text':' the tab breaks','line_number':1968,'multiline':False]
['text':' with "coladd" set may move to just after a TAB','line_number':1977,'multiline':False]
['text':' oap->end has been trimmed so it's effectively inclusive;','line_number':1992,'multiline':False]
['text':' as a result an extra +1 must be counted so we don't','line_number':1993,'multiline':False]
['text':' trample the NUL byte.','line_number':1994,'multiline':False]
['text':' Advance to next character, stop at the end of the file.','line_number':2009,'multiline':False]
['text':' Set "'[" and "']" marks.','line_number':2021,'multiline':False]
['text':'/ Handle the (non-standard vi) tilde operator.  Also for "gu", "gU" and "g?".','line_number':2029,'multiline':False]
['text':' Visual block mode','line_number':2041,'multiline':False]
['text':' not block mode','line_number':2053,'multiline':False]
['text':' No change: need to remove the Visual selection','line_number':2085,'multiline':False]
['text':' Set '[ and '] marks.','line_number':2090,'multiline':False]
['text':'/ Invoke swapchar() on "length" bytes at position "pos".','line_number':2101,'multiline':False]
['text':'/','line_number':2102,'multiline':False]
['text':'/ @param pos     is advanced to just after the changed characters.','line_number':2103,'multiline':False]
['text':'/ @param length  is rounded up to include the whole last multi-byte character.','line_number':2104,'multiline':False]
['text':'/ Also works correctly when the number of bytes changes.','line_number':2105,'multiline':False]
['text':'/','line_number':2106,'multiline':False]
['text':'/ @return  true if some character was changed.','line_number':2107,'multiline':False]
['text':' we're counting bytes, not characters','line_number':2116,'multiline':False]
['text':' at end of file','line_number':2121,'multiline':False]
['text':'/ @param op_type','line_number':2128,'multiline':False]
['text':'/                 == OP_UPPER: make uppercase,','line_number':2129,'multiline':False]
['text':'/                 == OP_LOWER: make lowercase,','line_number':2130,'multiline':False]
['text':'/                 == OP_ROT13: do rot13 encoding,','line_number':2131,'multiline':False]
['text':'/                 else swap case of character at 'pos'','line_number':2132,'multiline':False]
['text':'/','line_number':2133,'multiline':False]
['text':'/ @return  true when something actually changed.','line_number':2134,'multiline':False]
['text':' Only do rot13 encoding for ASCII characters.','line_number':2140,'multiline':False]
['text':' Special handling of German sharp s: change to "SS".','line_number':2148,'multiline':False]
['text':' don't use del_char(), it also removes composing chars','line_number':2176,'multiline':False]
['text':'/ Insert and append operators for Visual mode.','line_number':2188,'multiline':False]
['text':' edit() changes this - record it for OP_APPEND','line_number':2196,'multiline':False]
['text':' vis block is still marked. Get rid of it now.','line_number':2199,'multiline':False]
['text':' When 'virtualedit' is used, need to insert the extra spaces before','line_number':2205,'multiline':False]
['text':' doing block_prep().  When only "block" is used, virtual edit is','line_number':2206,'multiline':False]
['text':' already disabled, but still need it when calling','line_number':2207,'multiline':False]
['text':' coladvance_force().','line_number':2208,'multiline':False]
['text':' coladvance_force() uses get_ve_flags() to get the 'virtualedit'','line_number':2209,'multiline':False]
['text':' state for the current window.  To override that state, we need to','line_number':2210,'multiline':False]
['text':' set the window-local value of ve_flags rather than the global value.','line_number':2211,'multiline':False]
['text':' Get the info about the block before entering the text','line_number':2226,'multiline':False]
['text':' Get indent information','line_number':2228,'multiline':False]
['text':' Move the cursor to the character right of the block.','line_number':2242,'multiline':False]
['text':' First line was too short, make it longer and adjust the','line_number':2249,'multiline':False]
['text':' values in "bd".','line_number':2250,'multiline':False]
['text':' Works just like an 'i'nsert on the next character.','line_number':2263,'multiline':False]
['text':' When a tab was inserted, and the characters in front of the tab','line_number':2275,'multiline':False]
['text':' have been converted to a tab as well, the column of the cursor','line_number':2276,'multiline':False]
['text':' might have actually been reduced, so need to adjust here.','line_number':2277,'multiline':False]
['text':' If user has moved off this line, we don't know what to do, so do','line_number':2283,'multiline':False]
['text':' nothing.','line_number':2284,'multiline':False]
['text':' Also don't repeat the insert when Insert mode ended with CTRL-C.','line_number':2285,'multiline':False]
['text':' if indent kicked in, the firstline might have changed','line_number':2295,'multiline':False]
['text':' but only do that, if the indent actually increased','line_number':2296,'multiline':False]
['text':' The user may have moved the cursor before inserting something, try','line_number':2305,'multiline':False]
['text':' to adjust the block for that.  But only do it, if the difference','line_number':2306,'multiline':False]
['text':' does not come from indent kicking in.','line_number':2307,'multiline':False]
['text':' reset pre_textlen to the value of OP_INSERT','line_number':2321,'multiline':False]
['text':' Spaces and tabs in the indent may have changed to other spaces and','line_number':2329,'multiline':False]
['text':' tabs.  Get the starting column again and correct the length.','line_number':2330,'multiline':False]
['text':' Don't do this when "$" used, end-of-line will have changed.','line_number':2331,'multiline':False]
['text':'','line_number':2332,'multiline':False]
['text':' if indent was added and the inserted text was after the indent,','line_number':2333,'multiline':False]
['text':' correct the selection for the new indent.','line_number':2334,'multiline':False]
['text':' undo for where "oap" is used below','line_number':2343,'multiline':False]
['text':' Subsequent calls to ml_get() flush the firstline data - take a','line_number':2360,'multiline':False]
['text':' copy of the required string.','line_number':2361,'multiline':False]
['text':' offset when cursor was moved in insert mode','line_number':2365,'multiline':False]
['text':' account for pressing cursor in insert mode when '$' was used','line_number':2368,'multiline':False]
['text':' moved outside of the visual block, what to do?','line_number':2375,'multiline':False]
['text':' short line, point to the NUL','line_number':2381,'multiline':False]
['text':' block handled here','line_number':2388,'multiline':False]
['text':'/ handle a change operation','line_number':2400,'multiline':False]
['text':'/','line_number':2401,'multiline':False]
['text':'/ @return  true if edit() returns because of a CTRL-O command','line_number':2402,'multiline':False]
['text':' Like opening a new line, do smart indent','line_number':2413,'multiline':False]
['text':' First delete the text in the region.  In an empty buffer only need to','line_number':2416,'multiline':False]
['text':' save for undo','line_number':2417,'multiline':False]
['text':' check for still on same line (<CR> in inserted text meaningless)','line_number':2431,'multiline':False]
['text':' skip blank lines too','line_number':2432,'multiline':False]
['text':' Add spaces before getting the current line length.','line_number':2434,'multiline':False]
['text':' Reset finish_op now, don't want it set inside edit().','line_number':2449,'multiline':False]
['text':' In Visual block mode, handle copying the new text to all lines of the','line_number':2457,'multiline':False]
['text':' block.','line_number':2458,'multiline':False]
['text':' Don't repeat the insert when Insert mode ended with CTRL-C.','line_number':2459,'multiline':False]
['text':' Auto-indenting may have changed the indent.  If the cursor was past','line_number':2463,'multiline':False]
['text':' the indent, exclude that indent change from the inserted text.','line_number':2464,'multiline':False]
['text':' Subsequent calls to ml_get() flush the firstline data - take a','line_number':2478,'multiline':False]
['text':' copy of the inserted text.','line_number':2479,'multiline':False]
['text':' If the block starts in virtual space, count the','line_number':2488,'multiline':False]
['text':' initial coladd offset as part of "startspaces"','line_number':2489,'multiline':False]
['text':' copy up to block start','line_number':2499,'multiline':False]
['text':'/ Free contents of yankreg `reg`.','line_number':2533,'multiline':False]
['text':'/ Called for normal freeing and in case of error.','line_number':2534,'multiline':False]
['text':'/','line_number':2535,'multiline':False]
['text':'/ @param reg  must not be NULL (but `reg->y_array` might be)','line_number':2536,'multiline':False]
['text':' from y_size - 1 to 0 included','line_number':2545,'multiline':False]
['text':'/ Yanks the text between "oap->start" and "oap->end" into a yank register.','line_number':2551,'multiline':False]
['text':'/ If we are to append (uppercase register), we first yank into a new yank','line_number':2552,'multiline':False]
['text':'/ register and then concatenate the old and the new one.','line_number':2553,'multiline':False]
['text':'/ Do not call this from a delete operation. Use op_yank_reg() instead.','line_number':2554,'multiline':False]
['text':'/','line_number':2555,'multiline':False]
['text':'/ @param oap operator arguments','line_number':2556,'multiline':False]
['text':'/ @param message show message when more than `&report` lines are yanked.','line_number':2557,'multiline':False]
['text':'/ @returns whether the operation register was writable.','line_number':2558,'multiline':False]
['text':' check for read-only register','line_number':2562,'multiline':False]
['text':' black hole: nothing to do','line_number':2568,'multiline':False]
['text':' new yank register when appending','line_number':2581,'multiline':False]
['text':' copy of current register','line_number':2587,'multiline':False]
['text':' append to existing contents','line_number':2588,'multiline':False]
['text':' free previously yanked lines','line_number':2592,'multiline':False]
['text':' If the cursor was in column 1 before and after the movement, and the','line_number':2595,'multiline':False]
['text':' operator is not inclusive, the yank is always linewise.','line_number':2596,'multiline':False]
['text':' set the yank register type','line_number':2609,'multiline':False]
['text':' index in y_array[]','line_number':2615,'multiline':False]
['text':' current line number','line_number':2616,'multiline':False]
['text':' Visual block mode','line_number':2619,'multiline':False]
['text':' Part of a tab selected -- but don't double-count it.','line_number':2651,'multiline':False]
['text':' Don't add space for double-wide','line_number':2666,'multiline':False]
['text':' char; endcol will be on last byte','line_number':2667,'multiline':False]
['text':' of multi-byte char.','line_number':2668,'multiline':False]
['text':' Special case: inside a single char','line_number':2672,'multiline':False]
['text':' NOTREACHED','line_number':2698,'multiline':False]
['text':' append the new block to the old block','line_number':2704,'multiline':False]
['text':' kMTLineWise overrides kMTCharWise and kMTBlockWise','line_number':2714,'multiline':False]
['text':' Concatenate the last line of the old block with the first line of','line_number':2718,'multiline':False]
['text':' the new block, unless being Vi compatible.','line_number':2719,'multiline':False]
['text':' Display message about yank?','line_number':2740,'multiline':False]
['text':' Some versions of Vi use ">=" here, some don't...','line_number':2744,'multiline':False]
['text':' redisplay now, so message is not deleted','line_number':2754,'multiline':False]
['text':' Set "'[" and "']" marks.','line_number':2772,'multiline':False]
['text':'/ Copy a block range into a register.','line_number':2782,'multiline':False]
['text':'/','line_number':2783,'multiline':False]
['text':'/ @param exclude_trailing_space  if true, do not copy trailing whitespaces.','line_number':2784,'multiline':False]
['text':'/ Execute autocommands for TextYankPost.','line_number':2813,'multiline':False]
['text':'/','line_number':2814,'multiline':False]
['text':'/ @param oap Operator arguments.','line_number':2815,'multiline':False]
['text':'/ @param reg The yank register used.','line_number':2816,'multiline':False]
['text':' No autocommand was defined, or we yanked from this autocommand.','line_number':2823,'multiline':False]
['text':' Set the v:event dictionary with information about the yank.','line_number':2830,'multiline':False]
['text':' The yanked text contents.','line_number':2833,'multiline':False]
['text':' Register type.','line_number':2841,'multiline':False]
['text':' Name of requested register, or empty string for unnamed operation.','line_number':2846,'multiline':False]
['text':' Motion type: inclusive or exclusive.','line_number':2851,'multiline':False]
['text':' Kind of operation: yank, delete, change).','line_number':2855,'multiline':False]
['text':' Selection type: visual or not.','line_number':2860,'multiline':False]
['text':'/ Put contents of register "regname" into the text.','line_number':2873,'multiline':False]
['text':'/ Caller must check "regname" to be valid!','line_number':2874,'multiline':False]
['text':'/','line_number':2875,'multiline':False]
['text':'/ @param flags  PUT_FIXINDENT     make indent look nice','line_number':2876,'multiline':False]
['text':'/               PUT_CURSEND       leave cursor after end of new text','line_number':2877,'multiline':False]
['text':'/               PUT_LINE          force linewise put (":put")','line_number':2878,'multiline':False]
['text':'/               PUT_BLOCK_INNER   in block mode, do not add trailing spaces','line_number':2879,'multiline':False]
['text':'/ @param dir    BACKWARD for 'P', FORWARD for 'p'','line_number':2880,'multiline':False]
['text':' init for gcc','line_number':2883,'multiline':False]
['text':' init for gcc','line_number':2894,'multiline':False]
['text':' init for gcc','line_number':2895,'multiline':False]
['text':' default for '[ mark','line_number':2908,'multiline':False]
['text':' default for '] mark','line_number':2909,'multiline':False]
['text':' Using inserted text works differently, because the register includes','line_number':2911,'multiline':False]
['text':' special characters (newlines, etc.).','line_number':2912,'multiline':False]
['text':' PUT_LINE has special handling below which means we use 'i' to start.','line_number':2916,'multiline':False]
['text':' To avoid 'autoindent' on linewise puts, create a new line with `:put _`.','line_number':2921,'multiline':False]
['text':' If given a count when putting linewise, we stuff the readbuf with the','line_number':2926,'multiline':False]
['text':' dot register 'count' times split by newlines.','line_number':2927,'multiline':False]
['text':' To avoid 'autoindent' affecting the text, use Ctrl_U to remove any','line_number':2933,'multiline':False]
['text':' whitespace. Can't just insert Ctrl_U into readbuf1, this would go','line_number':2934,'multiline':False]
['text':' back to the previous line in the case of 'noautoindent' and','line_number':2935,'multiline':False]
['text':' 'backspace' includes "eol". So we insert a dummy space for Ctrl_U','line_number':2936,'multiline':False]
['text':' to consume.','line_number':2937,'multiline':False]
['text':' Putting the text is done later, so can't move the cursor to the next','line_number':2946,'multiline':False]
['text':' character.  Simulate it with motion commands after the insert.','line_number':2947,'multiline':False]
['text':' Avoid ringing the bell from attempting to move into the space after','line_number':2952,'multiline':False]
['text':' the current line. We can stuff the readbuffer with "l" if:','line_number':2953,'multiline':False]
['text':' 1) 'virtualedit' is "all" or "onemore"','line_number':2954,'multiline':False]
['text':' 2) We are not at the end of the line','line_number':2955,'multiline':False]
['text':' 3) We are not  (one past the end of the line && on the last line)','line_number':2956,'multiline':False]
['text':'    This allows a visual put over a selection one past the end of the','line_number':2957,'multiline':False]
['text':'    line joining the current line with the one below.','line_number':2958,'multiline':False]
['text':' curwin->w_cursor.col marks the byte position of the cursor in the','line_number':2960,'multiline':False]
['text':' currunt line. It increases up to a max of','line_number':2961,'multiline':False]
['text':' strlen(ml_get(curwin->w_cursor.lnum)). With 'virtualedit' and the','line_number':2962,'multiline':False]
['text':' cursor past the end of the line, curwin->w_cursor.coladd is','line_number':2963,'multiline':False]
['text':' incremented instead of curwin->w_cursor.col.','line_number':2964,'multiline':False]
['text':' So the 'u' command restores cursor position after ".p, save the cursor','line_number':2983,'multiline':False]
['text':' position now (though not saving any text).','line_number':2984,'multiline':False]
['text':' For special registers '%' (file name), '#' (alternate file name) and','line_number':2993,'multiline':False]
['text':' ':' (last command line), etc. we have to create a fake yank register.','line_number':2994,'multiline':False]
['text':' Autocommands may be executed when saving lines for undo.  This might','line_number':3002,'multiline':False]
['text':' make y_array invalid, so we start undo now to avoid that.','line_number':3003,'multiline':False]
['text':' For the = register we need to split the string at NL','line_number':3012,'multiline':False]
['text':' characters.','line_number':3013,'multiline':False]
['text':' Loop twice: count the number of lines and save them.','line_number':3014,'multiline':False]
['text':' A trailing '\n' makes the register linewise.','line_number':3029,'multiline':False]
['text':' use fake one-line yank register','line_number':3042,'multiline':False]
['text':' in case of replacing visually selected text','line_number':3046,'multiline':False]
['text':' the yankreg might already have been saved to avoid','line_number':3047,'multiline':False]
['text':' just restoring the deleted text.','line_number':3048,'multiline':False]
['text':' "p" or "P" in Visual mode: split the lines to put the text in','line_number':3066,'multiline':False]
['text':' between.','line_number':3067,'multiline':False]
['text':' Must be "p" for a Visual block, put lines below the block.','line_number':3090,'multiline':False]
['text':' default for '[ mark','line_number':3094,'multiline':False]
['text':' default for '] mark','line_number':3095,'multiline':False]
['text':' :put command or "p" in Visual line mode.','line_number':3098,'multiline':False]
['text':' Correct line number for closed fold.  Don't move the cursor yet,','line_number':3118,'multiline':False]
['text':' u_save() uses it.','line_number':3119,'multiline':False]
['text':' In an empty buffer the empty line is going to be replaced, include','line_number':3128,'multiline':False]
['text':' it in the saved lines.','line_number':3129,'multiline':False]
['text':' for mark_adjust()','line_number':3139,'multiline':False]
['text':' Don't need to insert spaces when "p" on the last position of a','line_number':3150,'multiline':False]
['text':' tab or "P" on the first position.','line_number':3151,'multiline':False]
['text':' Block mode','line_number':3167,'multiline':False]
['text':' move to start of next multi-byte character','line_number':3179,'multiline':False]
['text':' can just be 0 or 1, needed for blockwise paste beyond the current','line_number':3209,'multiline':False]
['text':' buffer end','line_number':3210,'multiline':False]
['text':' add a new line','line_number':3218,'multiline':False]
['text':' get the old line and advance to the position to insert at','line_number':3226,'multiline':False]
['text':' Count a tab for what it's worth (if list mode not on)','line_number':3233,'multiline':False]
['text':' line too short, pad with spaces','line_number':3244,'multiline':False]
['text':' Only a Tab can be split into spaces.  Other','line_number':3253,'multiline':False]
['text':' characters will have to be moved to after the','line_number':3254,'multiline':False]
['text':' block, causing misalignment.','line_number':3255,'multiline':False]
['text':' calculate number of spaces required to fill right side of','line_number':3264,'multiline':False]
['text':' block','line_number':3265,'multiline':False]
['text':' Insert the new text.','line_number':3279,'multiline':False]
['text':' First check for multiplication overflow.','line_number':3280,'multiline':False]
['text':' copy part up to cursor to new line','line_number':3291,'multiline':False]
['text':' may insert some spaces before the new text','line_number':3296,'multiline':False]
['text':' insert the new text','line_number':3300,'multiline':False]
['text':' insert block's trailing spaces only if there's text behind','line_number':3305,'multiline':False]
['text':' didn't use these spaces','line_number':3310,'multiline':False]
['text':' may insert some spaces after the new text','line_number':3314,'multiline':False]
['text':' move the text after the cursor to the end of the line.','line_number':3318,'multiline':False]
['text':' Set '[ mark.','line_number':3335,'multiline':False]
['text':' adjust '] mark','line_number':3339,'multiline':False]
['text':' in Insert mode we might be after the NUL, correct for that','line_number':3352,'multiline':False]
['text':' Character or Line mode','line_number':3361,'multiline':False]
['text':' if type is kMTCharWise, FORWARD is the same as BACKWARD on the next','line_number':3363,'multiline':False]
['text':' char','line_number':3364,'multiline':False]
['text':' put it on the next of the multi-byte character.','line_number':3368,'multiline':False]
['text':' Line mode: BACKWARD is the same as FORWARD on the previous line','line_number':3377,'multiline':False]
['text':' simple case: insert into one line at a time','line_number':3382,'multiline':False]
['text':' init for gcc','line_number':3384,'multiline':False]
['text':' "col" is valid for the first line, in following lines','line_number':3394,'multiline':False]
['text':' the virtual column needs to be used.  Matters for','line_number':3395,'multiline':False]
['text':' multi-byte characters.','line_number':3396,'multiline':False]
['text':' multiplication overflow','line_number':3411,'multiline':False]
['text':' compute the byte offset for the last character','line_number':3442,'multiline':False]
['text':' Place cursor on last putted char.','line_number':3445,'multiline':False]
['text':' make sure curwin->w_virtcol is updated','line_number':3447,'multiline':False]
['text':' reset lnum to the last visual line','line_number':3460,'multiline':False]
['text':' put '] at the first byte of the last character','line_number':3465,'multiline':False]
['text':' For "CTRL-O p" in Insert mode, put cursor after last char','line_number':3469,'multiline':False]
['text':' Insert at least one line.  When y_type is kMTCharWise, break the first','line_number':3478,'multiline':False]
['text':' line in two.','line_number':3479,'multiline':False]
['text':' Split the current line in two at the insert position.','line_number':3483,'multiline':False]
['text':' First insert y_array[size - 1] in front of second line.','line_number':3484,'multiline':False]
['text':' Then append y_array[0] to first line.','line_number':3485,'multiline':False]
['text':' insert second line','line_number':3492,'multiline':False]
['text':' copy first part of line','line_number':3499,'multiline':False]
['text':' append to first line','line_number':3501,'multiline':False]
['text':' Leave # lines at start','line_number':3526,'multiline':False]
['text':' Ignore empty lines','line_number':3528,'multiline':False]
['text':' remember how many chars were removed','line_number':3538,'multiline':False]
['text':' Account for last pasted NL + last NL','line_number':3560,'multiline':False]
['text':' Adjust marks.','line_number':3571,'multiline':False]
['text':' note changed text for displaying and folding','line_number':3584,'multiline':False]
['text':' Put the '] mark on the first byte of the last inserted character.','line_number':3593,'multiline':False]
['text':' Correct the length for change in indent.','line_number':3594,'multiline':False]
['text':' ":put": put cursor on last inserted line','line_number':3609,'multiline':False]
['text':' put cursor after inserted text','line_number':3613,'multiline':False]
['text':' put cursor on first non-blank in first inserted line','line_number':3630,'multiline':False]
['text':' put cursor on first inserted character','line_number':3636,'multiline':False]
['text':' Make sure the cursor is not after the NUL.','line_number':3645,'multiline':False]
['text':' If the cursor is past the end of the line put it at the end.','line_number':3668,'multiline':False]
['text':'/ When the cursor is on the NUL past the end of the line and it should not be','line_number':3672,'multiline':False]
['text':'/ there move it left.','line_number':3673,'multiline':False]
['text':' Put the cursor on the last character in the line.','line_number':3686,'multiline':False]
['text':' Coladd is set to the width of the last character.','line_number':3692,'multiline':False]
['text':'/ @return  true if lines starting with '#' should be left aligned.','line_number':3698,'multiline':False]
['text':'/ @return  the character name of the register with the given number','line_number':3706,'multiline':False]
['text':'/ @return the index of the register "" points to.','line_number':3724,'multiline':False]
['text':'/ ":dis" and ":registers": Display the contents of the yank registers.','line_number':3730,'multiline':False]
['text':' Highlight title','line_number':3743,'multiline':False]
['text':' did not ask for this register','line_number':3757,'multiline':False]
['text':' do not list register being written to, the','line_number':3774,'multiline':False]
['text':' pointer can be freed','line_number':3775,'multiline':False]
['text':' display last inserted text','line_number':3815,'multiline':False]
['text':' display last command line','line_number':3823,'multiline':False]
['text':' display current file name','line_number':3830,'multiline':False]
['text':' display alternate file name','line_number':3838,'multiline':False]
['text':' display last search pattern','line_number':3849,'multiline':False]
['text':' display last used expression','line_number':3857,'multiline':False]
['text':'/ display a string for do_dis()','line_number':3865,'multiline':False]
['text':'/ truncate at end of screen line','line_number':3866,'multiline':False]
['text':'/','line_number':3867,'multiline':False]
['text':'/ @param skip_esc  if true, ignore trailing ESC','line_number':3868,'multiline':False]
['text':'/ If \p "process" is true and the line begins with a comment leader (possibly','line_number':3887,'multiline':False]
['text':'/ after some white space), return a pointer to the text after it.','line_number':3888,'multiline':False]
['text':'/ Put a boolean value indicating whether the line ends with an unclosed','line_number':3889,'multiline':False]
['text':'/ comment in "is_comment".','line_number':3890,'multiline':False]
['text':'/','line_number':3891,'multiline':False]
['text':'/ @param line - line to be processed','line_number':3892,'multiline':False]
['text':'/ @param process - if false, will only check whether the line ends','line_number':3893,'multiline':False]
['text':'/         with an unclosed comment,','line_number':3894,'multiline':False]
['text':'/ @param include_space - whether to skip space following the comment leader','line_number':3895,'multiline':False]
['text':'/ @param[out] is_comment - whether the current line ends with an unclosed','line_number':3896,'multiline':False]
['text':'/  comment.','line_number':3897,'multiline':False]
['text':' Let's check whether the line ends with an unclosed comment.','line_number':3905,'multiline':False]
['text':' If the last comment leader has COM_END in flags, there's no comment.','line_number':3906,'multiline':False]
['text':' Find:','line_number':3929,'multiline':False]
['text':' - COM_END,','line_number':3930,'multiline':False]
['text':' - colon,','line_number':3931,'multiline':False]
['text':' whichever comes first.','line_number':3932,'multiline':False]
['text':' If we found a colon, it means that we are not processing a line','line_number':3941,'multiline':False]
['text':' starting with a closing part of a three-part comment. That's good,','line_number':3942,'multiline':False]
['text':' because we don't want to remove those as this would be annoying.','line_number':3943,'multiline':False]
['text':'/ @param count              number of lines (minimal 2) to join at cursor position.','line_number':3951,'multiline':False]
['text':'/ @param save_undo          when true, save lines for undo first.','line_number':3952,'multiline':False]
['text':'/ @param use_formatoptions  set to false when e.g. processing backspace and comment','line_number':3953,'multiline':False]
['text':'/                           leaders should not be removed.','line_number':3954,'multiline':False]
['text':'/ @param setmark            when true, sets the '[ and '] mark, else, the caller is expected','line_number':3955,'multiline':False]
['text':'/                           to set those marks.','line_number':3956,'multiline':False]
['text':'/','line_number':3957,'multiline':False]
['text':'/ @return  FAIL for failure, OK otherwise','line_number':3958,'multiline':False]
['text':' size of the current line','line_number':3966,'multiline':False]
['text':' size of the long new line','line_number':3967,'multiline':False]
['text':' Allocate an array to store the number of spaces inserted before each','line_number':3979,'multiline':False]
['text':' line.  We will use it to pre-compute the length of the new line and the','line_number':3980,'multiline':False]
['text':' proper placement of each original line in the new one.','line_number':3981,'multiline':False]
['text':' number of spaces inserted before a line','line_number':3982,'multiline':False]
['text':' Don't move anything yet, just compute the final line length','line_number':3987,'multiline':False]
['text':' and setup the array of space strings lengths','line_number':3988,'multiline':False]
['text':' This loops forward over joined lines.','line_number':3989,'multiline':False]
['text':' Set the '[ mark.','line_number':3994,'multiline':False]
['text':' We don't want to remove the comment leader if the','line_number':3999,'multiline':False]
['text':' previous line is not a comment.','line_number':4000,'multiline':False]
['text':' don't add a space if the line is ending in a space','line_number':4022,'multiline':False]
['text':' Extra space when 'joinspaces' set and line ends in '.', '?', or '!'.','line_number':4028,'multiline':False]
['text':' store the column position before last line','line_number':4061,'multiline':False]
['text':' allocate the space for the new line','line_number':4064,'multiline':False]
['text':' Move affected lines to the new long one.','line_number':4069,'multiline':False]
['text':' This loops backwards over the joined lines, including the original line.','line_number':4070,'multiline':False]
['text':'','line_number':4071,'multiline':False]
['text':' Move marks from each deleted line to the joined line, adjusting the','line_number':4072,'multiline':False]
['text':' column.  This is not Vi compatible, but Vi deletes the marks, thus that','line_number':4073,'multiline':False]
['text':' should not really be a problem.','line_number':4074,'multiline':False]
['text':' If deleting more spaces than adding, the cursor moves no more than','line_number':4086,'multiline':False]
['text':' what is added if it is inside these spaces.','line_number':4087,'multiline':False]
['text':' Set the '] mark.','line_number':4114,'multiline':False]
['text':' Only report the change in the first line here, del_lines() will report','line_number':4119,'multiline':False]
['text':' the deleted line.','line_number':4120,'multiline':False]
['text':' Delete following lines. To do this we move the cursor there','line_number':4124,'multiline':False]
['text':' briefly, and then move it back. After del_lines() the cursor may','line_number':4125,'multiline':False]
['text':' have moved up (last line deleted), so the current lnum is kept in t.','line_number':4126,'multiline':False]
['text':' Set the cursor column:','line_number':4134,'multiline':False]
['text':' Vi compatible: use the column of the first join','line_number':4135,'multiline':False]
['text':' vim:             use the column of the last join','line_number':4136,'multiline':False]
['text':'/ Reset 'linebreak' and take care of side effects.','line_number':4152,'multiline':False]
['text':'/ @return  the previous value, to be passed to restore_lbr().','line_number':4153,'multiline':False]
['text':' changing 'linebreak' may require w_virtcol to be updated','line_number':4159,'multiline':False]
['text':'/ Restore 'linebreak' and take care of side effects.','line_number':4165,'multiline':False]
['text':' changing 'linebreak' may require w_virtcol to be updated','line_number':4172,'multiline':False]
['text':'/ prepare a few things for block mode yank/delete/tilde','line_number':4177,'multiline':False]
['text':'/','line_number':4178,'multiline':False]
['text':'/ for delete:','line_number':4179,'multiline':False]
['text':'/ - textlen includes the first/last char to be (partly) deleted','line_number':4180,'multiline':False]
['text':'/ - start/endspaces is the number of columns that are taken by the','line_number':4181,'multiline':False]
['text':'/   first/last deleted char minus the number of columns that have to be','line_number':4182,'multiline':False]
['text':'/   deleted.','line_number':4183,'multiline':False]
['text':'/ for yank and tilde:','line_number':4184,'multiline':False]
['text':'/ - textlen includes the first/last char to be wholly yanked','line_number':4185,'multiline':False]
['text':'/ - start/endspaces is the number of columns of the first/last yanked char','line_number':4186,'multiline':False]
['text':'/   that are to be yanked.','line_number':4187,'multiline':False]
['text':' Avoid a problem with unwanted linebreaks in block mode.','line_number':4191,'multiline':False]
['text':' Count a tab for what it's worth (if list mode not on)','line_number':4212,'multiline':False]
['text':' line too short','line_number':4230,'multiline':False]
['text':' notice: this converts partly selected Multibyte characters to','line_number':4237,'multiline':False]
['text':' spaces, too.','line_number':4238,'multiline':False]
['text':' it's all in one character','line_number':4245,'multiline':False]
['text':' just putting the sum of those two into','line_number':4255,'multiline':False]
['text':' bdp->startspaces doesn't work for Visual replace,','line_number':4256,'multiline':False]
['text':' so we have to split the tab in two','line_number':4257,'multiline':False]
['text':' Count a tab for what it's worth (if list mode not on)','line_number':4267,'multiline':False]
['text':' line too short','line_number':4279,'multiline':False]
['text':' Alternative: include spaces to fill up the block.','line_number':4281,'multiline':False]
['text':' Disadvantage: can lead to trailing spaces when the line is','line_number':4282,'multiline':False]
['text':' short where the text is put','line_number':4283,'multiline':False]
['text':' if (!is_del || oap->op_type == OP_APPEND)','line_number':4284,'multiline':False]
['text':'/ Handle the add/subtract operator.','line_number':4310,'multiline':False]
['text':'/','line_number':4311,'multiline':False]
['text':'/ @param[in]  oap      Arguments of operator.','line_number':4312,'multiline':False]
['text':'/ @param[in]  Prenum1  Amount of addition or subtraction.','line_number':4313,'multiline':False]
['text':'/ @param[in]  g_cmd    Prefixed with `g`.','line_number':4314,'multiline':False]
['text':' do_addsub() might trigger re-evaluation of 'foldexpr' halfway, when the','line_number':4321,'multiline':False]
['text':' buffer is not completely updated yet. Postpone updating folds until before','line_number':4322,'multiline':False]
['text':' the call to changed_lines().','line_number':4323,'multiline':False]
['text':' Visual block mode','line_number':4350,'multiline':False]
['text':' oap->motion_type == kMTCharWise','line_number':4359,'multiline':False]
['text':' Remember the start position of the first change.','line_number':4379,'multiline':False]
['text':' No change: need to remove the Visual selection','line_number':4397,'multiline':False]
['text':' Set '[ mark if something changed. Keep the last end','line_number':4401,'multiline':False]
['text':' position from do_addsub().','line_number':4402,'multiline':False]
['text':'/ Add or subtract from a number in a line.','line_number':4414,'multiline':False]
['text':'/','line_number':4415,'multiline':False]
['text':'/ @param op_type OP_NR_ADD or OP_NR_SUB.','line_number':4416,'multiline':False]
['text':'/ @param pos     Cursor position.','line_number':4417,'multiline':False]
['text':'/ @param length  Target number length.','line_number':4418,'multiline':False]
['text':'/ @param Prenum1 Amount of addition or subtraction.','line_number':4419,'multiline':False]
['text':'/','line_number':4420,'multiline':False]
['text':'/ @return true if some character was changed.','line_number':4421,'multiline':False]
['text':' 'X' or 'x': hex; '0': octal; 'B' or 'b': bin','line_number':4426,'multiline':False]
['text':' 0xABC','line_number':4427,'multiline':False]
['text':' "heX"','line_number':4439,'multiline':False]
['text':' "Octal"','line_number':4440,'multiline':False]
['text':' "Bin"','line_number':4441,'multiline':False]
['text':' "alPha"','line_number':4442,'multiline':False]
['text':' "Unsigned"','line_number':4443,'multiline':False]
['text':' First check if we are on a hexadecimal number, after the "0x".','line_number':4459,'multiline':False]
['text':' In case of binary/hexadecimal pattern overlap match, rescan','line_number':4481,'multiline':False]
['text':' Found hexadecimal or binary number, move to its start.','line_number':4503,'multiline':False]
['text':' Search forward and then backward to find the start of number.','line_number':4507,'multiline':False]
['text':' If a number was found, and saving for undo works, replace the number.','line_number':4545,'multiline':False]
['text':' decrement or increment alphabetic character','line_number':4553,'multiline':False]
['text':' negative number','line_number':4587,'multiline':False]
['text':' get the number value (unsigned)','line_number':4592,'multiline':False]
['text':' ignore leading '-' for hex, octal and bin numbers','line_number':4606,'multiline':False]
['text':' add or subtract','line_number':4613,'multiline':False]
['text':' if number is too big don't add/subtract','line_number':4624,'multiline':False]
['text':' handle wraparound for decimal numbers','line_number':4629,'multiline':False]
['text':' add','line_number':4637,'multiline':False]
['text':' sticking at zero.','line_number':4650,'multiline':False]
['text':' sticking at 2^64 - 1.','line_number':4653,'multiline':False]
['text':' need to remove the '-'','line_number':4660,'multiline':False]
['text':' Delete the old number.','line_number':4665,'multiline':False]
['text':' Don't include the '-' in the length, only the length of the part','line_number':4672,'multiline':False]
['text':' after it is kept the same.','line_number':4673,'multiline':False]
['text':' del_char() will mark line needing displaying','line_number':4685,'multiline':False]
['text':' Prepare the leading characters in buf1[].','line_number':4690,'multiline':False]
['text':' When there are many leading zeros it could be very long.','line_number':4691,'multiline':False]
['text':' Allocate a bit too much.','line_number':4692,'multiline':False]
['text':' Put the number characters in buf2[].','line_number':4707,'multiline':False]
['text':' leading zeros','line_number':4712,'multiline':False]
['text':' Adjust number of zeros to the new number of digits, so the','line_number':4735,'multiline':False]
['text':' total length of the number remains the same.','line_number':4736,'multiline':False]
['text':' Don't do this when','line_number':4737,'multiline':False]
['text':' the result may look like an octal number.','line_number':4738,'multiline':False]
['text':' insert the new number','line_number':4746,'multiline':False]
['text':' set the '[ and '] marks','line_number':4754,'multiline':False]
['text':'/ Used for getregtype()','line_number':4775,'multiline':False]
['text':'/','line_number':4776,'multiline':False]
['text':'/ @return  the type of a register or','line_number':4777,'multiline':False]
['text':'/          kMTUnknown for error.','line_number':4778,'multiline':False]
['text':' file name','line_number':4782,'multiline':False]
['text':' alternate file name','line_number':4783,'multiline':False]
['text':' expression','line_number':4784,'multiline':False]
['text':' last command line','line_number':4785,'multiline':False]
['text':' last search-pattern','line_number':4786,'multiline':False]
['text':' last inserted text','line_number':4787,'multiline':False]
['text':' Filename under cursor','line_number':4788,'multiline':False]
['text':' Path under cursor, expand via "path"','line_number':4789,'multiline':False]
['text':' word under cursor','line_number':4790,'multiline':False]
['text':' WORD (mnemonic All) under cursor','line_number':4791,'multiline':False]
['text':' black hole: always empty','line_number':4792,'multiline':False]
['text':'/ Format the register type as a string.','line_number':4811,'multiline':False]
['text':'/','line_number':4812,'multiline':False]
['text':'/ @param reg_type The register type.','line_number':4813,'multiline':False]
['text':'/ @param reg_width The width, only used if "reg_type" is kMTBlockWise.','line_number':4814,'multiline':False]
['text':'/ @param[out] buf Buffer to store formatted string. The allocated size should','line_number':4815,'multiline':False]
['text':'/                 be at least NUMBUFLEN+2 to always fit the value.','line_number':4816,'multiline':False]
['text':'/ @param buf_len The allocated size of the buffer.','line_number':4817,'multiline':False]
['text':'/ When `flags` has `kGRegList` return a list with text `s`.','line_number':4840,'multiline':False]
['text':'/ Otherwise just return `s`.','line_number':4841,'multiline':False]
['text':'/','line_number':4842,'multiline':False]
['text':'/ @return  a void * for use in get_reg_contents().','line_number':4843,'multiline':False]
['text':'/ Gets the contents of a register.','line_number':4854,'multiline':False]
['text':'/ @remark Used for `@r` in expressions and for `getreg()`.','line_number':4855,'multiline':False]
['text':'/','line_number':4856,'multiline':False]
['text':'/ @param regname  The register.','line_number':4857,'multiline':False]
['text':'/ @param flags    see @ref GRegFlags','line_number':4858,'multiline':False]
['text':'/','line_number':4859,'multiline':False]
['text':'/ @returns The contents of the register as an allocated string.','line_number':4860,'multiline':False]
['text':'/ @returns A linked list when `flags` contains @ref kGRegList.','line_number':4861,'multiline':False]
['text':'/ @returns NULL for error.','line_number':4862,'multiline':False]
['text':' Don't allow using an expression register inside an expression.','line_number':4865,'multiline':False]
['text':' "@@" is used for unnamed register','line_number':4876,'multiline':False]
['text':' check for valid regname','line_number':4880,'multiline':False]
['text':' Compute length of resulting string.','line_number':4911,'multiline':False]
['text':' Insert a newline between lines and after last line if','line_number':4915,'multiline':False]
['text':' y_type is kMTLineWise.','line_number':4916,'multiline':False]
['text':' Copy the lines of the yank register into the string.','line_number':4924,'multiline':False]
['text':' Insert a NL between lines and after the last line if y_type is','line_number':4930,'multiline':False]
['text':' kMTLineWise.','line_number':4931,'multiline':False]
['text':' check for valid reg name','line_number':4943,'multiline':False]
['text':' Don't want to change the current (unnamed) register.','line_number':4948,'multiline':False]
['text':' Send text of clipboard register to the clipboard.','line_number':4960,'multiline':False]
['text':' ':let @" = "val"' should change the meaning of the "" register','line_number':4963,'multiline':False]
['text':'/ store `str` in register `name`','line_number':4969,'multiline':False]
['text':'/','line_number':4970,'multiline':False]
['text':'/ @see write_reg_contents_ex','line_number':4971,'multiline':False]
['text':' black hole: nothing to do','line_number':4992,'multiline':False]
['text':'/ write_reg_contents_ex - store `str` in register `name`','line_number':5007,'multiline':False]
['text':'/','line_number':5008,'multiline':False]
['text':'/ If `str` ends in '\n' or '\r', use linewise, otherwise use charwise.','line_number':5009,'multiline':False]
['text':'/','line_number':5010,'multiline':False]
['text':'/ @warning when `name` is '/', `len` and `must_append` are ignored. This','line_number':5011,'multiline':False]
['text':'/          means that `str` MUST be NUL-terminated.','line_number':5012,'multiline':False]
['text':'/','line_number':5013,'multiline':False]
['text':'/ @param name The name of the register','line_number':5014,'multiline':False]
['text':'/ @param str The contents to write','line_number':5015,'multiline':False]
['text':'/ @param len If >= 0, write `len` bytes of `str`. Otherwise, write','line_number':5016,'multiline':False]
['text':'/               `strlen(str)` bytes. If `len` is larger than the','line_number':5017,'multiline':False]
['text':'/               allocated size of `src`, the behaviour is undefined.','line_number':5018,'multiline':False]
['text':'/ @param must_append If true, append the contents of `str` to the current','line_number':5019,'multiline':False]
['text':'/                    contents of the register. Note that regardless of','line_number':5020,'multiline':False]
['text':'/                    `must_append`, this function will append when `name`','line_number':5021,'multiline':False]
['text':'/                    is an uppercase letter.','line_number':5022,'multiline':False]
['text':'/ @param yank_type The motion type (kMTUnknown to auto detect)','line_number':5023,'multiline':False]
['text':'/ @param block_len width of visual block','line_number':5024,'multiline':False]
['text':' Special case: '/' search pattern','line_number':5032,'multiline':False]
['text':' append has been specified and expr_line already exists, so we'll','line_number':5064,'multiline':False]
['text':' append the new string to expr_line.','line_number':5065,'multiline':False]
['text':' modify the global expr_line, extend/shrink it if necessary (realloc).','line_number':5072,'multiline':False]
['text':' Copy the input string into the adjusted memory at the specified','line_number':5073,'multiline':False]
['text':' offset.','line_number':5074,'multiline':False]
['text':' black hole: nothing to do','line_number':5082,'multiline':False]
['text':'/ str_to_reg - Put a string into a register.','line_number':5094,'multiline':False]
['text':'/','line_number':5095,'multiline':False]
['text':'/ When the register is not empty, the string is appended.','line_number':5096,'multiline':False]
['text':'/','line_number':5097,'multiline':False]
['text':'/ @param y_ptr pointer to yank register','line_number':5098,'multiline':False]
['text':'/ @param yank_type The motion type (kMTUnknown to auto detect)','line_number':5099,'multiline':False]
['text':'/ @param str string or list of strings to put in register','line_number':5100,'multiline':False]
['text':'/ @param len length of the string (Ignored when str_list=true.)','line_number':5101,'multiline':False]
['text':'/ @param blocklen width of visual block, or -1 for "I don't know."','line_number':5102,'multiline':False]
['text':'/ @param str_list True if str is `char **`.','line_number':5103,'multiline':False]
['text':' NULL means empty register','line_number':5108,'multiline':False]
['text':' extra line at the end','line_number':5119,'multiline':False]
['text':' append to last line in register','line_number':5120,'multiline':False]
['text':' Count the number of lines within the string','line_number':5122,'multiline':False]
['text':' count extra newline at the end','line_number':5131,'multiline':False]
['text':' uncount newline when appending first line','line_number':5135,'multiline':False]
['text':' Without any lines make the register empty.','line_number':5139,'multiline':False]
['text':' Grow the register array to hold the pointers to the new lines.','line_number':5145,'multiline':False]
['text':' The current line number.','line_number':5149,'multiline':False]
['text':' If called with `blocklen < 0`, we have to update the yank reg's width.','line_number':5151,'multiline':False]
['text':' Find the end of each line and save it into the array.','line_number':5154,'multiline':False]
['text':' When appending, copy the previous line and free it after.','line_number':5174,'multiline':False]
['text':' only first line is appended','line_number':5185,'multiline':False]
['text':' Convert NULs to '\n' to prevent truncation.','line_number':5189,'multiline':False]
['text':'/  Count the number of bytes, characters and "words" in a line.','line_number':5209,'multiline':False]
['text':'/','line_number':5210,'multiline':False]
['text':'/  "Words" are counted by looking for boundaries between non-space and','line_number':5211,'multiline':False]
['text':'/  space characters.  (it seems to produce results that match 'wc'.)','line_number':5212,'multiline':False]
['text':'/','line_number':5213,'multiline':False]
['text':'/  Return value is byte count; word count for the line is added to "*wc".','line_number':5214,'multiline':False]
['text':'/  Char count is added to "*cc".','line_number':5215,'multiline':False]
['text':'/','line_number':5216,'multiline':False]
['text':'/  The function will only examine the first "limit" characters in the','line_number':5217,'multiline':False]
['text':'/  line, stopping if it encounters an end-of-line (NUL byte).  In that','line_number':5218,'multiline':False]
['text':'/  case, eol_size will be added to the character count to account for','line_number':5219,'multiline':False]
['text':'/  the size of the EOL character.','line_number':5220,'multiline':False]
['text':' Add eol_size if the end of line was reached before hitting limit.','line_number':5247,'multiline':False]
['text':'/ Give some info about the position of the cursor (for "g CTRL-G").','line_number':5256,'multiline':False]
['text':'/ In Visual mode, give some info about the selected region.  (In this case,','line_number':5257,'multiline':False]
['text':'/ the *_count_cursor variables store running totals for the selection.)','line_number':5258,'multiline':False]
['text':'/','line_number':5259,'multiline':False]
['text':'/ @param dict  when not NULL, store the info there instead of showing it.','line_number':5260,'multiline':False]
['text':' Compute the length of the file in characters.','line_number':5278,'multiline':False]
['text':' Make 'sbr' empty for a moment to get the correct size.','line_number':5310,'multiline':False]
['text':' Swap the start, end vcol if needed','line_number':5322,'multiline':False]
['text':' Check for a CTRL-C every 100000 characters.','line_number':5333,'multiline':False]
['text':' Do extra processing for VIsual mode.','line_number':5342,'multiline':False]
['text':' In non-visual mode, check for the line the cursor is on','line_number':5382,'multiline':False]
['text':' Add to the running totals','line_number':5393,'multiline':False]
['text':' Correction for when last line doesn't have an EOL.','line_number':5398,'multiline':False]
['text':' Don't shorten this message, the user asked for it.','line_number':5478,'multiline':False]
['text':' Don't shorten this message, the user asked for it.','line_number':5491,'multiline':False]
['text':'/ Handle indent and format operators and visual mode ":".','line_number':5507,'multiline':False]
['text':' Make the range look nice, so it can be repeated.','line_number':5514,'multiline':False]
['text':' When using !! on a closed fold the range ".!" works best to operate','line_number':5521,'multiline':False]
['text':' on, it will be made the whole closed fold later.','line_number':5522,'multiline':False]
['text':' Make it a range with the end line.','line_number':5526,'multiline':False]
['text':' do not use ".+number" for a closed fold, it would count','line_number':5533,'multiline':False]
['text':' folded lines twice','line_number':5534,'multiline':False]
['text':' do_cmdline() does the rest','line_number':5560,'multiline':False]
['text':'/ callback function for 'operatorfunc'','line_number':5563,'multiline':False]
['text':'/ Process the 'operatorfunc' option value.','line_number':5566,'multiline':False]
['text':'/ Mark the global 'operatorfunc' callback with "copyID" so that it is not','line_number':5582,'multiline':False]
['text':'/ garbage collected.','line_number':5583,'multiline':False]
['text':'/ Handle the "g@" operator: call 'operatorfunc'.','line_number':5589,'multiline':False]
['text':' Set '[ and '] marks to text to be operated on.','line_number':5599,'multiline':False]
['text':' Exclude the end position.','line_number':5603,'multiline':False]
['text':' Reset virtual_op so that 'virtualedit' can be changed in the','line_number':5617,'multiline':False]
['text':' function.','line_number':5618,'multiline':False]
['text':' Reset finish_op so that mode() returns the right value.','line_number':5622,'multiline':False]
['text':'/ Calculate start/end virtual columns for operating in block mode.','line_number':5640,'multiline':False]
['text':'/','line_number':5641,'multiline':False]
['text':'/ @param initial  when true: adjust position for 'selectmode'','line_number':5642,'multiline':False]
['text':' prevent from moving onto a trail byte','line_number':5655,'multiline':False]
['text':' if '$' was used, get oap->end_vcol from longest line','line_number':5676,'multiline':False]
['text':' Correct oap->end.col and oap->start.col to be the','line_number':5691,'multiline':False]
['text':' upper-left and lower-right corner of the block area.','line_number':5692,'multiline':False]
['text':'','line_number':5693,'multiline':False]
['text':' (Actually, this does convert column positions into character','line_number':5694,'multiline':False]
['text':' positions)','line_number':5695,'multiline':False]
['text':'/ Information for redoing the previous Visual selection.','line_number':5705,'multiline':False]
['text':'/< 'v', 'V', or Ctrl-V','line_number':5707,'multiline':False]
['text':'/< number of lines','line_number':5708,'multiline':False]
['text':'/< number of cols or end column','line_number':5709,'multiline':False]
['text':'/< count for Visual operator','line_number':5710,'multiline':False]
['text':'/< extra argument','line_number':5711,'multiline':False]
['text':'/ Handle an operator after Visual mode or when the movement is finished.','line_number':5719,'multiline':False]
['text':'/ "gui_yank" is true when yanking text for the clipboard.','line_number':5720,'multiline':False]
['text':' The visual area is remembered for redo','line_number':5726,'multiline':False]
['text':' If an operation is pending, handle it...','line_number':5731,'multiline':False]
['text':' Yank can be redone when 'y' is in 'cpoptions', but not when yanking','line_number':5738,'multiline':False]
['text':' for the clipboard.','line_number':5739,'multiline':False]
['text':' Avoid a problem with unwanted linebreaks in block mode','line_number':5742,'multiline':False]
['text':' If the motion was linewise, "inclusive" will not have been set.','line_number':5748,'multiline':False]
['text':' Use "exclusive" to be consistent.  Makes "dvj" work nice.','line_number':5749,'multiline':False]
['text':' If the motion already was charwise, toggle "inclusive"','line_number':5753,'multiline':False]
['text':' Change line- or charwise motion into Visual block mode.','line_number':5758,'multiline':False]
['text':' Only redo yank when 'y' flag is in 'cpoptions'.','line_number':5768,'multiline':False]
['text':' Never redo "zf" (define fold).','line_number':5769,'multiline':False]
['text':' Also redo Operator-pending Visual mode mappings.','line_number':5772,'multiline':False]
['text':' was a search','line_number':5786,'multiline':False]
['text':' If 'cpoptions' does not contain 'r', insert the search','line_number':5787,'multiline':False]
['text':' pattern to really repeat the same command.','line_number':5788,'multiline':False]
['text':' do_cmdline() has stored the first typed line in','line_number':5794,'multiline':False]
['text':' "repeat_cmdline".  When several lines are typed repeating','line_number':5795,'multiline':False]
['text':' won't be possible.','line_number':5796,'multiline':False]
['text':' Redo of an operation on a Visual area. Use the same size from','line_number':5815,'multiline':False]
['text':' redo_VIsual.rv_line_count and redo_VIsual.rv_vcol.','line_number':5816,'multiline':False]
['text':' Save the current VIsual area for '< and '> marks, and "gv"','line_number':5840,'multiline':False]
['text':' In Select mode, a linewise selection is operated upon like a','line_number':5849,'multiline':False]
['text':' charwise selection.','line_number':5850,'multiline':False]
['text':' Special case: gH<Del> deletes the last line.','line_number':5851,'multiline':False]
['text':' If 'selection' is "exclusive", backup one character for','line_number':5864,'multiline':False]
['text':' charwise selections.','line_number':5865,'multiline':False]
['text':' Set oap->start to the first position of the operated text, oap->end','line_number':5876,'multiline':False]
['text':' to the end of the operated text.  w_cursor is equal to oap->start.','line_number':5877,'multiline':False]
['text':' Include folded lines completely.','line_number':5879,'multiline':False]
['text':' w_virtcol may have been updated; if the cursor goes back to its','line_number':5895,'multiline':False]
['text':' previous position w_virtcol becomes invalid and isn't updated','line_number':5896,'multiline':False]
['text':' automatically.','line_number':5897,'multiline':False]
['text':' Include folded lines completely.','line_number':5900,'multiline':False]
['text':' Just in case lines were deleted that make the position invalid.','line_number':5914,'multiline':False]
['text':' Set "virtual_op" before resetting VIsual_active.','line_number':5918,'multiline':False]
['text':' Prepare to reselect and redo Visual: this is based on the','line_number':5925,'multiline':False]
['text':' size of the Visual text','line_number':5926,'multiline':False]
['text':' can't redo yank (unless 'y' is in 'cpoptions') and ":"','line_number':5948,'multiline':False]
['text':' Prepare for redoing.  Only use the nchar field for "r",','line_number':5959,'multiline':False]
['text':' otherwise it might be the second char of the operator.','line_number':5960,'multiline':False]
['text':' reverse what nv_replace() did','line_number':5971,'multiline':False]
['text':' also repeat the count for 'operatorfunc'','line_number':5979,'multiline':False]
['text':' oap->inclusive defaults to true.','line_number':5994,'multiline':False]
['text':' If oap->end is on a NUL (empty line) oap->inclusive becomes','line_number':5995,'multiline':False]
['text':' false.  This makes "d}P" and "v}dP" work the same.','line_number':5996,'multiline':False]
['text':' Try to include the newline, unless it's an operator','line_number':6007,'multiline':False]
['text':' that works on lines only.','line_number':6008,'multiline':False]
['text':' Switch Visual off now, so screen updating does','line_number':6022,'multiline':False]
['text':' not show inverted text when the screen is redrawn.','line_number':6023,'multiline':False]
['text':' With OP_YANK and sometimes with OP_COLON and OP_FILTER there is','line_number':6024,'multiline':False]
['text':' no screen redraw, so it is done here to remove the inverted','line_number':6025,'multiline':False]
['text':' part.','line_number':6026,'multiline':False]
['text':' Make sure redrawing is correct.','line_number':6037,'multiline':False]
['text':' Include the trailing byte of a multi-byte char.','line_number':6044,'multiline':False]
['text':' oap->empty is set when start and end are the same.  The inclusive','line_number':6053,'multiline':False]
['text':' flag affects this too, unless yanking and the end is on a NUL.','line_number':6054,'multiline':False]
['text':' For delete, change and yank, it's an error to operate on an','line_number':6061,'multiline':False]
['text':' empty region, when 'E' included in 'cpoptions' (Vi compatible).','line_number':6062,'multiline':False]
['text':' Force a redraw when operating on an empty Visual region, when','line_number':6066,'multiline':False]
['text':' 'modifiable is off or creating a fold.','line_number':6067,'multiline':False]
['text':' If the end of an operator is in column one while oap->motion_type','line_number':6074,'multiline':False]
['text':' is kMTCharWise and oap->inclusive is false, we put op_end after the last','line_number':6075,'multiline':False]
['text':' character in the previous line. If op_start is on or before the','line_number':6076,'multiline':False]
['text':' first non-blank in the line, the operator becomes linewise','line_number':6077,'multiline':False]
['text':' (strange, but that's the way vi does it).','line_number':6078,'multiline':False]
['text':' remember that we did this','line_number':6085,'multiline':False]
['text':' don't reselect now','line_number':6124,'multiline':False]
['text':' save cursor line for undo if it wasn't saved yet','line_number':6130,'multiline':False]
['text':' don't reselect now','line_number':6154,'multiline':False]
['text':' This is a new edit command, not a restart.  Need to','line_number':6159,'multiline':False]
['text':' remember it to make i_CTRL-O work with mappings for','line_number':6160,'multiline':False]
['text':' Visual mode.  But do this only once and not when typed.','line_number':6161,'multiline':False]
['text':' Restore linebreak, so that when the user edits it looks as before.','line_number':6169,'multiline':False]
['text':' trigger TextChangedI','line_number':6172,'multiline':False]
['text':' will call edit()','line_number':6175,'multiline':False]
['text':' Use any last used !cmd.','line_number':6186,'multiline':False]
['text':' do_bang() will put cmd in redo buffer.','line_number':6188,'multiline':False]
['text':' If 'equalprg' is empty, do the indenting internally.','line_number':6195,'multiline':False]
['text':' use expression','line_number':6229,'multiline':False]
['text':' use external command','line_number':6232,'multiline':False]
['text':' use internal function','line_number':6234,'multiline':False]
['text':' use internal function','line_number':6240,'multiline':False]
['text':' Restore linebreak, so that when the user edits it looks as before.','line_number':6246,'multiline':False]
['text':' call 'operatorfunc'','line_number':6248,'multiline':False]
['text':' Restore the info for redoing Visual mode, the function may','line_number':6251,'multiline':False]
['text':' invoke another operator and unintentionally change it.','line_number':6252,'multiline':False]
['text':' don't reselect now','line_number':6259,'multiline':False]
['text':' This is a new edit command, not a restart.  Need to','line_number':6264,'multiline':False]
['text':' remember it to make i_CTRL-O work with mappings for','line_number':6265,'multiline':False]
['text':' Visual mode.  But do this only once.','line_number':6266,'multiline':False]
['text':' Restore linebreak, so that when the user edits it looks as before.','line_number':6270,'multiline':False]
['text':' trigger TextChangedI','line_number':6273,'multiline':False]
['text':' Reset linebreak, so that formatting works correctly.','line_number':6278,'multiline':False]
['text':' TODO(brammool): when inserting in several lines, should format all','line_number':6281,'multiline':False]
['text':' the lines.','line_number':6282,'multiline':False]
['text':' don't reselect now','line_number':6294,'multiline':False]
['text':' Restore linebreak, so that when the user edits it looks as before.','line_number':6299,'multiline':False]
['text':' don't reselect now','line_number':6307,'multiline':False]
['text':' don't reselect now','line_number':6315,'multiline':False]
['text':' don't reselect now','line_number':6326,'multiline':False]
['text':' if 'sol' not set, go back to old column for some commands','line_number':6349,'multiline':False]
['text':'/ Check if the default register (used in an unnamed paste) should be a','line_number':6365,'multiline':False]
['text':'/ clipboard register. This happens when `clipboard=unnamed[plus]` is set','line_number':6366,'multiline':False]
['text':'/ and a provider is available.','line_number':6367,'multiline':False]
['text':'/','line_number':6368,'multiline':False]
['text':'/ @returns the name of of a clipboard register that should be used, or `NUL` if none.','line_number':6369,'multiline':False]
['text':'/ Determine if register `*name` should be used as a clipboard.','line_number':6377,'multiline':False]
['text':'/ In an unnamed operation, `*name` is `NUL` and will be adjusted to */+ if','line_number':6378,'multiline':False]
['text':'/ `clipboard=unnamed[plus]` is set.','line_number':6379,'multiline':False]
['text':'/','line_number':6380,'multiline':False]
['text':'/ @param name The name of register, or `NUL` if unnamed.','line_number':6381,'multiline':False]
['text':'/ @param quiet Suppress error messages','line_number':6382,'multiline':False]
['text':'/ @param writing if we're setting the contents of the clipboard','line_number':6383,'multiline':False]
['text':'/','line_number':6384,'multiline':False]
['text':'/ @returns the yankreg that should be written into, or `NULL`','line_number':6385,'multiline':False]
['text':'/ if the register isn't a clipboard or provider isn't available.','line_number':6386,'multiline':False]
['text':' Do NOT error (emsg()) here--if it interrupts :redir we get into','line_number':6403,'multiline':False]
['text':' a weird state, stuck in "redirect mode".','line_number':6404,'multiline':False]
['text':' ... else, be silent (don't flood during :while, :redir, etc.).','line_number':6407,'multiline':False]
['text':' unnamed register: "implicit" clipboard','line_number':6417,'multiline':False]
['text':' For "set" (copy), defer the clipboard call.','line_number':6419,'multiline':False]
['text':' For "get" (paste), use the internal value.','line_number':6423,'multiline':False]
['text':'/ @param[out] reg Expected to be empty','line_number':6441,'multiline':False]
['text':' allow "b7" for a block at least 7 spaces wide','line_number':6472,'multiline':False]
['text':' a known-to-be charwise yank might have a final linebreak','line_number':6493,'multiline':False]
['text':' but otherwise there is no line after the final newline','line_number':6494,'multiline':False]
['text':' show message on error','line_number':6525,'multiline':False]
['text':' failure has already been indicated by provider','line_number':6542,'multiline':False]
['text':' provider did not specify regtype, calculate it below','line_number':6581,'multiline':False]
['text':' Timestamp is not saved for clipboard registers because clipboard registers','line_number':6589,'multiline':False]
['text':' are not saved in the ShaDa file.','line_number':6590,'multiline':False]
['text':' a known-to-be charwise yank might have a final linebreak','line_number':6601,'multiline':False]
['text':' but otherwise there is no line after the final newline','line_number':6602,'multiline':False]
['text':'/ Avoid slow things (clipboard) during batch operations (while/for-loops).','line_number':6686,'multiline':False]
['text':'/ Counterpart to start_batch_changes().','line_number':6695,'multiline':False]
['text':' recursive','line_number':6699,'multiline':False]
['text':' must be before, as set_clipboard will invoke','line_number':6704,'multiline':False]
['text':' start/end_batch_changes recursively','line_number':6705,'multiline':False]
['text':' unnamed ("implicit" clipboard)','line_number':6707,'multiline':False]
['text':' unnamed ("implicit" clipboard)','line_number':6719,'multiline':False]
['text':'/ Check whether register is empty','line_number':6734,'multiline':False]
['text':'/ Iterate over global registers.','line_number':6745,'multiline':False]
['text':'/','line_number':6746,'multiline':False]
['text':'/ @see op_register_iter','line_number':6747,'multiline':False]
['text':'/ Iterate over registers `regs`.','line_number':6755,'multiline':False]
['text':'/','line_number':6756,'multiline':False]
['text':'/ @param[in]   iter      Iterator. Pass NULL to start iteration.','line_number':6757,'multiline':False]
['text':'/ @param[in]   regs      Registers list to be iterated.','line_number':6758,'multiline':False]
['text':'/ @param[out]  name      Register name.','line_number':6759,'multiline':False]
['text':'/ @param[out]  reg       Register contents.','line_number':6760,'multiline':False]
['text':'/','line_number':6761,'multiline':False]
['text':'/ @return Pointer that must be passed to next `op_register_iter` call or','line_number':6762,'multiline':False]
['text':'/         NULL if iteration is over.','line_number':6763,'multiline':False]
['text':'/ Get a number of non-empty registers','line_number':6790,'multiline':False]
['text':'/ Set register to a given value','line_number':6803,'multiline':False]
['text':'/','line_number':6804,'multiline':False]
['text':'/ @param[in]  name  Register name.','line_number':6805,'multiline':False]
['text':'/ @param[in]  reg  Register value.','line_number':6806,'multiline':False]
['text':'/ @param[in]  is_unnamed  Whether to set the unnamed regiseter to reg','line_number':6807,'multiline':False]
['text':'/','line_number':6808,'multiline':False]
['text':'/ @return true on success, false on failure.','line_number':6809,'multiline':False]
['text':'/ Get register with the given name','line_number':6825,'multiline':False]
['text':'/','line_number':6826,'multiline':False]
['text':'/ @param[in]  name  Register name.','line_number':6827,'multiline':False]
['text':'/','line_number':6828,'multiline':False]
['text':'/ @return Pointer to the register contents or NULL.','line_number':6829,'multiline':False]
['text':'/ Set the previous yank register','line_number':6839,'multiline':False]
['text':'/','line_number':6840,'multiline':False]
['text':'/ @param[in]  name  Register name.','line_number':6841,'multiline':False]
['text':'/','line_number':6842,'multiline':False]
['text':'/ @return true on success, false on failure.','line_number':6843,'multiline':False]
['text':'/ Get the byte count of buffer region. End-exclusive.','line_number':6855,'multiline':False]
['text':'/','line_number':6856,'multiline':False]
['text':'/ @return number of bytes','line_number':6857,'multiline':False]
