['text':' ex_getln.c: Functions for entering and editing an Ex command line.','line_number':1,'multiline':False]
['text':'/ Last value of prompt_id, incremented when doing new prompt','line_number':79,'multiline':False]
['text':' Struct to store the viewstate during 'incsearch' highlighting and 'inccommand' preview.','line_number':82,'multiline':False]
['text':' Struct to store the state of 'incsearch' highlighting.','line_number':93,'multiline':False]
['text':' where 'incsearch' starts searching','line_number':95,'multiline':False]
['text':' true when <ESC> just typed','line_number':112,'multiline':False]
['text':' when true check for abbr.','line_number':113,'multiline':False]
['text':' string to match','line_number':114,'multiline':False]
['text':' current history line in use','line_number':115,'multiline':False]
['text':' history line before attempting','line_number':116,'multiline':False]
['text':' to jump to next match','line_number':117,'multiline':False]
['text':' history type to be used','line_number':118,'multiline':False]
['text':' did wild_list() recently','line_number':120,'multiline':False]
['text':' index in wim_flags[]','line_number':121,'multiline':False]
['text':' remember State when called','line_number':123,'multiline':False]
['text':' one of the keys was typed','line_number':125,'multiline':False]
['text':' mouse drag and release events are ignored, unless they are','line_number':126,'multiline':False]
['text':' preceded with a mouse down event','line_number':127,'multiline':False]
['text':'/< buffer where b_im_ptr is valid','line_number':132,'multiline':False]
['text':'/ Return value when handling keys in command-line mode.','line_number':177,'multiline':False]
['text':'/ The current cmdline_info.  It is initialized in getcmdline() and after that','line_number':185,'multiline':False]
['text':'/ used by other functions.  When invoking getcmdline() recursively it needs','line_number':186,'multiline':False]
['text':'/ to be saved with save_cmdline() and restored with restore_cmdline().','line_number':187,'multiline':False]
['text':' position set by set_cmdline_pos()','line_number':190,'multiline':False]
['text':'/ currently displayed block of context','line_number':192,'multiline':False]
['text':'/ Flag for command_line_handle_key to ignore <C-c>','line_number':195,'multiline':False]
['text':'/','line_number':196,'multiline':False]
['text':'/ Used if it was received while processing highlight function in order for','line_number':197,'multiline':False]
['text':'/ user interrupting highlight function to not interrupt command-line.','line_number':198,'multiline':False]
['text':'/< key value of 'cedit' option','line_number':201,'multiline':False]
['text':' may be restored later','line_number':241,'multiline':False]
['text':' Return true when 'incsearch' highlighting is to be done.','line_number':247,'multiline':False]
['text':' Sets search_first_line and search_last_line to the address range.','line_number':248,'multiline':False]
['text':' by default search all lines','line_number':266,'multiline':False]
['text':' Skip over "substitute" to find the pattern separator.','line_number':294,'multiline':False]
['text':' skip over ! and flags','line_number':310,'multiline':False]
['text':' skip over "!/".','line_number':325,'multiline':False]
['text':' Don't do 'hlsearch' highlighting if the pattern matches everything.','line_number':349,'multiline':False]
['text':' found a non-empty pattern or //','line_number':360,'multiline':False]
['text':' parse the address range','line_number':364,'multiline':False]
['text':' Allow for reverse match.','line_number':369,'multiline':False]
['text':' :s defaults to the current line','line_number':378,'multiline':False]
['text':' May do 'incsearch' highlighting if desired.','line_number':390,'multiline':False]
['text':' Parsing range may already set the last search pattern.','line_number':397,'multiline':False]
['text':' NOTE: must call restore_last_search_pattern() before returning!','line_number':398,'multiline':False]
['text':' if there is a character waiting, search and redraw later','line_number':408,'multiline':False]
['text':' start at the original cursor position','line_number':417,'multiline':False]
['text':' start after the last line','line_number':420,'multiline':False]
['text':' start at the first line in the range','line_number':424,'multiline':False]
['text':' do_search() result','line_number':428,'multiline':False]
['text':' Use the previous pattern for ":s//".','line_number':430,'multiline':False]
['text':' If there is no pattern, don't do anything.','line_number':435,'multiline':False]
['text':' turn off previous highlight','line_number':438,'multiline':False]
['text':' So it doesn't beep if bad expr','line_number':444,'multiline':False]
['text':' Set the time limit to half a second.','line_number':445,'multiline':False]
['text':' match outside of address range','line_number':464,'multiline':False]
['text':' if interrupted while searching, behave like it failed','line_number':469,'multiline':False]
['text':' remove <C-C> from input stream','line_number':471,'multiline':False]
['text':' don't abandon the command line','line_number':472,'multiline':False]
['text':' cancelled searching because a char was typed','line_number':475,'multiline':False]
['text':' highlight position','line_number':482,'multiline':False]
['text':' remove highlight','line_number':484,'multiline':False]
['text':' first restore the old curwin values, so the screen is','line_number':487,'multiline':False]
['text':' positioned in the same way as the actual search command','line_number':488,'multiline':False]
['text':' shutup gcc 4','line_number':503,'multiline':False]
['text':' Disable 'hlsearch' highlighting if the pattern matches','line_number':506,'multiline':False]
['text':' everything. Avoids a flash when typing "foo\|".','line_number':507,'multiline':False]
['text':' May redraw the status line to show the cursor position.','line_number':520,'multiline':False]
['text':' Leave it at the end to make CTRL-R CTRL-W work.  But not when beyond the','line_number':530,'multiline':False]
['text':' end of the pattern, e.g. for ":s/pat/".','line_number':531,'multiline':False]
['text':' When CTRL-L typed: add character from the match to the pattern.','line_number':543,'multiline':False]
['text':' May set "*c" to the added character.','line_number':544,'multiline':False]
['text':' Return OK when calling command_line_not_changed.','line_number':545,'multiline':False]
['text':' Parsing range may already set the last search pattern.','line_number':552,'multiline':False]
['text':' NOTE: must call restore_last_search_pattern() before returning!','line_number':553,'multiline':False]
['text':' Add a character from under the cursor for 'incsearch'','line_number':556,'multiline':False]
['text':' If 'ignorecase' and 'smartcase' are set and the','line_number':568,'multiline':False]
['text':' command line has no uppercase characters, convert','line_number':569,'multiline':False]
['text':' the character to lowercase','line_number':570,'multiline':False]
['text':' put a backslash before special characters','line_number':577,'multiline':False]
['text':' put the '" mark at the original position','line_number':598,'multiline':False]
['text':' by default search all lines','line_number':607,'multiline':False]
['text':' needed for TAB','line_number':613,'multiline':False]
['text':'/ Initialize the current command-line info.','line_number':621,'multiline':False]
['text':' always start in insert mode','line_number':624,'multiline':False]
['text':' set some variables for redrawcmd()','line_number':628,'multiline':False]
['text':' alloc initial ccline.cmdbuff','line_number':632,'multiline':False]
['text':' autoindent for :insert and :append','line_number':641,'multiline':False]
['text':'/ Internal entry point for cmdline mode.','line_number':651,'multiline':False]
['text':'/','line_number':652,'multiline':False]
['text':'/ @param count  only used for incremental search','line_number':653,'multiline':False]
['text':'/ @param indent  indent for inside conditionals','line_number':654,'multiline':False]
['text':'/ @param clear_ccline  clear ccline first','line_number':655,'multiline':False]
['text':' can be invoked recursively, identify each level','line_number':658,'multiline':False]
['text':' Currently ccline can never be in use if clear_ccline is false.','line_number':679,'multiline':False]
['text':' Some changes will be needed if this is no longer the case.','line_number':680,'multiline':False]
['text':' Being called recursively.  Since ccline is global, we need to save','line_number':682,'multiline':False]
['text':' the current buffer and restore it when returning.','line_number':683,'multiline':False]
['text':' Somehow got into a loop recursively calling getcmdline(), bail out.','line_number':700,'multiline':False]
['text':' don't redirect the typed command','line_number':713,'multiline':False]
['text':' draw prompt or indent','line_number':716,'multiline':False]
['text':' Avoid scrolling when called by a recursive do_cmdline(), e.g. when','line_number':734,'multiline':False]
['text':' doing ":@0" when register 0 doesn't contain a CR.','line_number':735,'multiline':False]
['text':' Use ":lmap" mappings for search pattern and input().','line_number':741,'multiline':False]
['text':' may show different cursor shape','line_number':754,'multiline':False]
['text':' set v:event to a dictionary with information about the commandline','line_number':767,'multiline':False]
['text':' set hiscnt to impossible history value','line_number':789,'multiline':False]
['text':' init digraph typeahead','line_number':791,'multiline':False]
['text':' If something above caused an error, reset the flags, we do want to type','line_number':793,'multiline':False]
['text':' and execute commands. Display may be messed up a bit.','line_number':794,'multiline':False]
['text':' Redraw the statusline in case it uses the current mode using the mode()','line_number':799,'multiline':False]
['text':' function.','line_number':800,'multiline':False]
['text':' not readonly:','line_number':835,'multiline':False]
['text':' error printed below, to avoid redraw issues','line_number':840,'multiline':False]
['text':' We could have reached here without having a chance to clean up wild menu','line_number':850,'multiline':False]
['text':' if certain special keys like <Esc> or <C-\> were used as wildchar. Make','line_number':851,'multiline':False]
['text':' sure to still clean up to avoid memory corruption.','line_number':852,'multiline':False]
['text':' Put line in history buffer (":" and "=" only when it was typed).','line_number':866,'multiline':False]
['text':' If the screen was shifted up, redraw the whole screen (later).','line_number':884,'multiline':False]
['text':' If the line is too long, clear it, so ruler and shown command do','line_number':885,'multiline':False]
['text':' not get printed in the middle of it.','line_number':886,'multiline':False]
['text':' When the command line was typed, no need for a wait-return prompt.','line_number':903,'multiline':False]
['text':' restore preview state','line_number':911,'multiline':False]
['text':' may show different cursor shape','line_number':916,'multiline':False]
['text':' redraw to show mode change','line_number':931,'multiline':False]
['text':' Don't redirect the typed command.','line_number':949,'multiline':False]
['text':' Repeated, because a ":redir" inside','line_number':950,'multiline':False]
['text':' completion may switch it on.','line_number':951,'multiline':False]
['text':' reset after CTRL-D which had a more-prompt','line_number':952,'multiline':False]
['text':' There can't really be a reason why an error','line_number':954,'multiline':False]
['text':' that occurs while typing a command should','line_number':955,'multiline':False]
['text':' cause the command not to be executed.','line_number':956,'multiline':False]
['text':' Trigger SafeState if nothing is pending.','line_number':958,'multiline':False]
['text':' set the cursor on the right spot','line_number':961,'multiline':False]
['text':'/ Handle CTRL-\ pressed in Command-line mode:','line_number':966,'multiline':False]
['text':'/ - CTRL-\ CTRL-N or CTRL-\ CTRL-G goes to Normal mode.','line_number':967,'multiline':False]
['text':'/ - CTRL-\ e prompts for an expression.','line_number':968,'multiline':False]
['text':' CTRL-\ e doesn't work when obtaining an expression, unless it','line_number':977,'multiline':False]
['text':' is in a mapping.','line_number':978,'multiline':False]
['text':' Replace the command line with the result of an expression.','line_number':989,'multiline':False]
['text':' This will call getcmdline() recursively in get_expr_register().','line_number':990,'multiline':False]
['text':' keep it at the end','line_number':992,'multiline':False]
['text':' Evaluate the expression.  Set "textlock" to avoid nasty things','line_number':999,'multiline':False]
['text':' like going to another buffer.','line_number':1000,'multiline':False]
['text':' Restore the cursor or use the position set with','line_number':1012,'multiline':False]
['text':' set_cmdline_pos().','line_number':1013,'multiline':False]
['text':' Don't do p_wc completion.','line_number':1020,'multiline':False]
['text':' don't abandon the command line','line_number':1026,'multiline':False]
['text':' will free ccline.cmdbuff after putting it in history','line_number':1033,'multiline':False]
['text':'/ Completion for 'wildchar' or 'wildcharm' key.','line_number':1037,'multiline':False]
['text':'/ - hitting <ESC> twice means: abandon command line.','line_number':1038,'multiline':False]
['text':'/ - wildcard expansion is only done when the 'wildchar' key is really','line_number':1039,'multiline':False]
['text':'/   typed, not when it comes from a macro','line_number':1040,'multiline':False]
['text':'/ @return  CMDLINE_CHANGED if command line is changed or CMDLINE_NOT_CHANGED.','line_number':1041,'multiline':False]
['text':' typed p_wc at least twice','line_number':1049,'multiline':False]
['text':' if 'wildmode' contains "list" may still need to list','line_number':1050,'multiline':False]
['text':' don't insert 'wildchar' now','line_number':1065,'multiline':False]
['text':' typed p_wc first time','line_number':1067,'multiline':False]
['text':' if 'wildmode' first contains "longest", get longest','line_number':1071,'multiline':False]
['text':' common part','line_number':1072,'multiline':False]
['text':' if interrupted while completing, behave like it failed','line_number':1079,'multiline':False]
['text':' remove <C-C> from input stream','line_number':1081,'multiline':False]
['text':' don't abandon the command line','line_number':1082,'multiline':False]
['text':' when more than one match, and 'wildmode' first contains','line_number':1088,'multiline':False]
['text':' "list", or no change and 'wildmode' contains "longest,list",','line_number':1089,'multiline':False]
['text':' list all matches','line_number':1090,'multiline':False]
['text':' a "longest" that didn't do anything is skipped (but not','line_number':1092,'multiline':False]
['text':' "list:longest")','line_number':1093,'multiline':False]
['text':' remove match','line_number':1102,'multiline':False]
['text':' get another key','line_number':1154,'multiline':False]
['text':' nvim_select_popupmenu_item() can be called from the handling of','line_number':1169,'multiline':False]
['text':' K_EVENT, K_COMMAND, or K_LUA.','line_number':1170,'multiline':False]
['text':' Invert horizontal movements and operations.  Only when','line_number':1192,'multiline':False]
['text':' typed by the user directly, not when the result of a','line_number':1193,'multiline':False]
['text':' mapping.','line_number':1194,'multiline':False]
['text':' Ignore got_int when CTRL-C was typed here.','line_number':1212,'multiline':False]
['text':' Don't ignore it in :global, we really need to break then, e.g., for','line_number':1213,'multiline':False]
['text':' ":g/pat/normal /pat" (without the <CR>).','line_number':1214,'multiline':False]
['text':' Don't ignore it for the input() function.','line_number':1215,'multiline':False]
['text':' do clear got_int in Ex mode to avoid infinite Ctrl-C loop','line_number':1218,'multiline':False]
['text':' free old command line when finished moving around in the history','line_number':1224,'multiline':False]
['text':' list','line_number':1225,'multiline':False]
['text':' When there are matching completions to select <S-Tab> works like','line_number':1236,'multiline':False]
['text':' CTRL-P (unless 'wc' is <S-Tab>).','line_number':1237,'multiline':False]
['text':' Ctrl-Y: Accept the current selection and close the popup menu.','line_number':1249,'multiline':False]
['text':' Ctrl-E: cancel the cmdline popup menu and return the original text.','line_number':1250,'multiline':False]
['text':' The wildmenu is cleared if the pressed key is not used for','line_number':1257,'multiline':False]
['text':' navigating the wild menu (i.e. the key is not 'wildchar' or','line_number':1258,'multiline':False]
['text':' 'wildcharm' or Ctrl-N or Ctrl-P or Ctrl-A or Ctrl-L).','line_number':1259,'multiline':False]
['text':' If the popup menu is displayed, then PageDown and PageUp keys are','line_number':1260,'multiline':False]
['text':' also used to navigate the menu.','line_number':1261,'multiline':False]
['text':' free expanded names when finished walking through matches','line_number':1269,'multiline':False]
['text':' CTRL-\ CTRL-N or CTRL-\ CTRL-G goes to Normal mode,','line_number':1278,'multiline':False]
['text':' CTRL-\ e prompts for an expression.','line_number':1279,'multiline':False]
['text':' back to cmd mode','line_number':1287,'multiline':False]
['text':' backslash key not processed by','line_number':1289,'multiline':False]
['text':' command_line_handle_ctrl_bsl()','line_number':1290,'multiline':False]
['text':' TODO(vim): why is ex_normal_busy checked here?','line_number':1295,'multiline':False]
['text':' Open a window to edit the command line (and history).','line_number':1298,'multiline':False]
['text':' In Ex mode a backslash escapes a newline.','line_number':1311,'multiline':False]
['text':' Might have typed ESC previously, don't','line_number':1321,'multiline':False]
['text':' truncate the cmdline now.','line_number':1322,'multiline':False]
['text':' Completion for 'wildchar' or 'wildcharm' key.','line_number':1337,'multiline':False]
['text':' <S-Tab> goes to last match, in a clumsy way','line_number':1346,'multiline':False]
['text':' Trigger the popup menu when wildoptions=pum','line_number':1351,'multiline':False]
['text':' NUL is stored as NL','line_number':1361,'multiline':False]
['text':' default: check for abbreviation','line_number':1365,'multiline':False]
['text':' If already used to cancel/accept wildmenu, don't process the key further.','line_number':1367,'multiline':False]
['text':' May adjust 'incsearch' highlighting for typing CTRL-G and CTRL-T, go to next','line_number':1375,'multiline':False]
['text':' or previous match.','line_number':1376,'multiline':False]
['text':' Returns FAIL when calling command_line_not_changed.','line_number':1377,'multiline':False]
['text':' Parsing range may already set the last search pattern.','line_number':1384,'multiline':False]
['text':' NOTE: must call restore_last_search_pattern() before returning!','line_number':1385,'multiline':False]
['text':' start searching at the end of the match','line_number':1420,'multiline':False]
['text':' not at the beginning of the next column','line_number':1421,'multiline':False]
['text':' move just before the current match, so that','line_number':1446,'multiline':False]
['text':' when nv_search finishes the cursor will be','line_number':1447,'multiline':False]
['text':' put back on the match','line_number':1448,'multiline':False]
['text':' move just after the current match, so that','line_number':1452,'multiline':False]
['text':' when nv_search finishes the cursor will be','line_number':1453,'multiline':False]
['text':' put back on the match','line_number':1454,'multiline':False]
['text':' wrap around','line_number':1459,'multiline':False]
['text':'/ Handle backspace, delete and CTRL-W keys in the command-line mode.','line_number':1487,'multiline':False]
['text':' Delete current character is the same as backspace on next','line_number':1494,'multiline':False]
['text':' character, except at end of line','line_number':1495,'multiline':False]
['text':' Truncate at the end, required for multi-byte chars.','line_number':1532,'multiline':False]
['text':' save view settings, so that the screen won't be restored at the','line_number':1536,'multiline':False]
['text':' wrong position','line_number':1537,'multiline':False]
['text':' In ex and debug mode it doesn't make sense to return.','line_number':1543,'multiline':False]
['text':' no commandline to return','line_number':1548,'multiline':False]
['text':' delete ':'','line_number':1551,'multiline':False]
['text':'/ Handle the CTRL-^ key in the command-line mode and toggle the use of the','line_number':1560,'multiline':False]
['text':'/ language :lmap mappings and/or Input Method.','line_number':1561,'multiline':False]
['text':' ":lmap" mappings exists, toggle use of mappings.','line_number':1566,'multiline':False]
['text':' may show different cursor shape','line_number':1584,'multiline':False]
['text':' Show/unshow value of 'keymap' in status lines later.','line_number':1585,'multiline':False]
['text':'/ Handle the CTRL-R key in the command-line mode and insert the contents of a','line_number':1589,'multiline':False]
['text':'/ numbered or named register.','line_number':1590,'multiline':False]
['text':' CTRL-R <char>','line_number':1598,'multiline':False]
['text':' CTRL-R CTRL-O == CTRL-R CTRL-R','line_number':1600,'multiline':False]
['text':' CTRL-R CTRL-R <char>','line_number':1604,'multiline':False]
['text':' Insert the result of an expression.','line_number':1608,'multiline':False]
['text':' can't do this recursively','line_number':1611,'multiline':False]
['text':' or when typing a password','line_number':1612,'multiline':False]
['text':' use ESC to cancel inserting register','line_number':1621,'multiline':False]
['text':' When there was a serious error abort getting the','line_number':1625,'multiline':False]
['text':' command line.','line_number':1626,'multiline':False]
['text':' will free ccline.cmdbuff after','line_number':1628,'multiline':False]
['text':' putting it in history','line_number':1629,'multiline':False]
['text':' Don't do p_wc completion.','line_number':1632,'multiline':False]
['text':' set_cmdline_pos() was used','line_number':1634,'multiline':False]
['text':' remove the double quote','line_number':1644,'multiline':False]
['text':' With "literally": the command line has already changed.','line_number':1648,'multiline':False]
['text':' Else: the text has been stuffed, but the command line didn't change yet.','line_number':1649,'multiline':False]
['text':'/ Handle the Left and Right mouse clicks in the command-line mode.','line_number':1653,'multiline':False]
['text':' Count ">" for double-wide char that doesn't fit.','line_number':1671,'multiline':False]
['text':' one step backwards','line_number':1682,'multiline':False]
['text':' first time','line_number':1685,'multiline':False]
['text':' at top of list','line_number':1692,'multiline':False]
['text':' one step forwards','line_number':1696,'multiline':False]
['text':' on last entry, clear the line','line_number':1697,'multiline':False]
['text':' not on a history line, nothing to do','line_number':1703,'multiline':False]
['text':' wrap around','line_number':1709,'multiline':False]
['text':'/ Handle the Up, Down, Page Up, Page down, CTRL-N and CTRL-P key in the','line_number':1730,'multiline':False]
['text':'/ command-line mode.','line_number':1731,'multiline':False]
['text':' no history','line_number':1735,'multiline':False]
['text':' save current command string so it can be restored later','line_number':1741,'multiline':False]
['text':' jumped to other entry','line_number':1752,'multiline':False]
['text':' back to the old one','line_number':1759,'multiline':False]
['text':' Correct for the separator character used when','line_number':1768,'multiline':False]
['text':' adding the history entry vs the one used now.','line_number':1769,'multiline':False]
['text':' First loop: count length.','line_number':1770,'multiline':False]
['text':' Second loop: copy the characters.','line_number':1771,'multiline':False]
['text':' Replace old sep with new sep, unless it is','line_number':1775,'multiline':False]
['text':' escaped.','line_number':1776,'multiline':False]
['text':' Escape new sep, unless it is already','line_number':1783,'multiline':False]
['text':' escaped.','line_number':1784,'multiline':False]
['text':' Big switch for a typed command line character.','line_number':1820,'multiline':False]
['text':' back to cmd mode','line_number':1831,'multiline':False]
['text':' may show different cursor shape','line_number':1839,'multiline':False]
['text':' delete all characters left of the cursor','line_number':1850,'multiline':False]
['text':' Truncate at the end, required for multi-byte chars.','line_number':1858,'multiline':False]
['text':' get here if p_wc != ESC or when ESC typed twice','line_number':1867,'multiline':False]
['text':' In exmode it doesn't make sense to return.  Except when','line_number':1869,'multiline':False]
['text':' ":normal" runs out of characters. Also when highlight callback is active','line_number':1870,'multiline':False]
['text':' <C-c> should interrupt only it.','line_number':1871,'multiline':False]
['text':' will free ccline.cmdbuff after','line_number':1878,'multiline':False]
['text':' putting it in history','line_number':1879,'multiline':False]
['text':' back to cmd mode','line_number':1880,'multiline':False]
['text':' insert register','line_number':1882,'multiline':False]
['text':' back to cmd mode','line_number':1885,'multiline':False]
['text':' Use ^D as normal char instead','line_number':1894,'multiline':False]
['text':' don't do incremental search now','line_number':1899,'multiline':False]
['text':' Move to first byte of possibly multibyte char.','line_number':1930,'multiline':False]
['text':' Ignore mouse event or open_cmdwin() result.','line_number':1947,'multiline':False]
['text':' Ignore mouse','line_number':1952,'multiline':False]
['text':' Ignore drag and release events when the button-down wasn't','line_number':1963,'multiline':False]
['text':' seen before.','line_number':1964,'multiline':False]
['text':' Mouse scroll wheel: ignored here','line_number':1974,'multiline':False]
['text':' Alternate buttons ignored here','line_number':1979,'multiline':False]
['text':' end of Select mode mapping - ignore','line_number':1989,'multiline':False]
['text':' begin of command line','line_number':1992,'multiline':False]
['text':' end of command line','line_number':2001,'multiline':False]
['text':' all matches','line_number':2010,'multiline':False]
['text':' As Ctrl-A completes all the matches, close the popup','line_number':2012,'multiline':False]
['text':' menu (if present)','line_number':2013,'multiline':False]
['text':' completion: longest common part','line_number':2029,'multiline':False]
['text':' next match','line_number':2035,'multiline':False]
['text':' previous match','line_number':2036,'multiline':False]
['text':' If the popup menu is displayed, then PageUp and PageDown','line_number':2057,'multiline':False]
['text':' are used to scroll the menu.','line_number':2058,'multiline':False]
['text':' next match','line_number':2076,'multiline':False]
['text':' previous match','line_number':2077,'multiline':False]
['text':' Get next (two) characters.','line_number':2089,'multiline':False]
['text':' Do not include modifiers into the key for CTRL-SHIFT-V.','line_number':2090,'multiline':False]
['text':' don't do abbreviation now','line_number':2093,'multiline':False]
['text':' may need to remove ^ when composing char was typed','line_number':2095,'multiline':False]
['text':' TODO(bfredl): why not make unputcmdline also work with true?','line_number':2098,'multiline':False]
['text':' CTRL-_: switch language mode','line_number':2121,'multiline':False]
['text':' Normal character with no special meaning.  Just set mod_mask','line_number':2128,'multiline':False]
['text':' to 0x0 so that typing Shift-Space in the GUI doesn't enter','line_number':2129,'multiline':False]
['text':' the string <S-Space>.  This should only happen after ^V.','line_number':2130,'multiline':False]
['text':' End of switch on command line character.','line_number':2137,'multiline':False]
['text':' We come here if we have a normal character.','line_number':2138,'multiline':False]
['text':' Add ABBR_OFF for characters above 0x100, this is','line_number':2140,'multiline':False]
['text':' what check_abbr() expects.','line_number':2141,'multiline':False]
['text':' put the character in the command line','line_number':2147,'multiline':False]
['text':' exclude composing chars','line_number':2152,'multiline':False]
['text':' Incremental searches for "/" and "?":','line_number':2160,'multiline':False]
['text':' Enter command_line_not_changed() when a character has been read but the','line_number':2161,'multiline':False]
['text':' command line did not change. Then we only search and redraw if something','line_number':2162,'multiline':False]
['text':' changed in the past.','line_number':2163,'multiline':False]
['text':' Enter command_line_changed() when the command line did change.','line_number':2164,'multiline':False]
['text':'/ Guess that the pattern matches everything.  Only finds specific cases, such','line_number':2171,'multiline':False]
['text':'/ as a trailing \|, which can happen while typing a pattern.','line_number':2172,'multiline':False]
['text':' remove trailing \v and the like','line_number':2189,'multiline':False]
['text':' true, if the pattern is empty, or the pattern ends with \| and magic is','line_number':2195,'multiline':False]
['text':' set (or it ends with '|' and very magic is set)','line_number':2196,'multiline':False]
['text':'/ Sets up command preview buffer.','line_number':2214,'multiline':False]
['text':'/','line_number':2215,'multiline':False]
['text':'/ @return Pointer to command preview buffer if succeeded, NULL if failed.','line_number':2216,'multiline':False]
['text':' If preview buffer doesn't exist, open one.','line_number':2221,'multiline':False]
['text':' Preview buffer cannot preview itself!','line_number':2233,'multiline':False]
['text':' Rename preview buffer.','line_number':2238,'multiline':False]
['text':' Temporarily switch to preview buffer to set it up for previewing.','line_number':2248,'multiline':False]
['text':' Reset 'textwidth' (was set by ftplugin)','line_number':2253,'multiline':False]
['text':'/ Open command preview window if it's not already open.','line_number':2260,'multiline':False]
['text':'/ Returns to original window after opening command preview window.','line_number':2261,'multiline':False]
['text':'/','line_number':2262,'multiline':False]
['text':'/ @param cmdpreview_buf Pointer to command preview buffer','line_number':2263,'multiline':False]
['text':'/','line_number':2264,'multiline':False]
['text':'/ @return Pointer to command preview window if succeeded, NULL if failed.','line_number':2265,'multiline':False]
['text':' Open preview window.','line_number':2270,'multiline':False]
['text':' Switch to preview buffer','line_number':2278,'multiline':False]
['text':'/ Closes any open command preview windows.','line_number':2295,'multiline':False]
['text':'/ Save the undo state of a buffer for command preview.','line_number':2304,'multiline':False]
['text':'/ Restore the undo state of a buffer for command preview.','line_number':2323,'multiline':False]
['text':'/ Save current state and prepare windows and buffers for command preview.','line_number':2343,'multiline':False]
['text':' Don't save state of command preview buffer or preview window.','line_number':2355,'multiline':False]
['text':' Make sure we can undo all changes','line_number':2373,'multiline':False]
['text':' Save window cursor position and viewstate','line_number':2379,'multiline':False]
['text':' Save 'cursorline' and 'cursorcolumn'','line_number':2383,'multiline':False]
['text':' Disable 'cursorline' so it doesn't mess up the highlights','line_number':2389,'multiline':False]
['text':' Disable 'cursorcolumn' so it doesn't mess up the highlights','line_number':2390,'multiline':False]
['text':' Don't show search highlighting during live substitution','line_number':2400,'multiline':False]
['text':' Disable :leftabove/botright modifiers','line_number':2401,'multiline':False]
['text':' Disable :tab modifier','line_number':2402,'multiline':False]
['text':' Disable swap for preview buffer','line_number':2403,'multiline':False]
['text':'/ Restore the state of buffers and windows for command preview.','line_number':2408,'multiline':False]
['text':' Clear preview highlights.','line_number':2418,'multiline':False]
['text':' Calculate how many undo steps are necessary to restore earlier state.','line_number':2424,'multiline':False]
['text':' Ensure all the entries will be undone','line_number':2431,'multiline':False]
['text':' Undo invisibly. This also moves the cursor!','line_number':2435,'multiline':False]
['text':' Restore 'undolevels'','line_number':2452,'multiline':False]
['text':' Restore window cursor position and viewstate','line_number':2459,'multiline':False]
['text':' Restore 'cursorline' and 'cursorcolumn'','line_number':2463,'multiline':False]
['text':' Restore cmdmod','line_number':2470,'multiline':False]
['text':' Restore 'hlsearch'','line_number':2471,'multiline':False]
['text':' Restore search patterns','line_number':2472,'multiline':False]
['text':' Restore window sizes','line_number':2473,'multiline':False]
['text':'/ Show 'inccommand' preview if command is previewable. It works like this:','line_number':2480,'multiline':False]
['text':'/    1. Store current undo information so we can revert to current state later.','line_number':2481,'multiline':False]
['text':'/    2. Execute the preview callback with the parsed command, preview buffer number and preview','line_number':2482,'multiline':False]
['text':'/       namespace number as arguments. The preview callback sets the highlight and does the','line_number':2483,'multiline':False]
['text':'/       changes required for the preview if needed.','line_number':2484,'multiline':False]
['text':'/    3. Preview callback returns 0, 1 or 2. 0 means no preview is shown. 1 means preview is shown','line_number':2485,'multiline':False]
['text':'/       but preview window doesn't need to be opened. 2 means preview is shown and preview window','line_number':2486,'multiline':False]
['text':'/       needs to be opened if inccommand=split.','line_number':2487,'multiline':False]
['text':'/    4. Use the return value of the preview callback to determine whether to','line_number':2488,'multiline':False]
['text':'/       open the preview window or not and open preview window if needed.','line_number':2489,'multiline':False]
['text':'/    5. If the return value of the preview callback is not 0, update the screen while the effects','line_number':2490,'multiline':False]
['text':'/       of the preview are still in place.','line_number':2491,'multiline':False]
['text':'/    6. Revert all changes made by the preview callback.','line_number':2492,'multiline':False]
['text':'/','line_number':2493,'multiline':False]
['text':'/ @return whether preview is shown or not.','line_number':2494,'multiline':False]
['text':' Parse the command line and return if it fails.','line_number':2497,'multiline':False]
['text':' Copy the command line so we can modify it.','line_number':2500,'multiline':False]
['text':' Block errors when parsing the command line, and don't update v:errmsg','line_number':2504,'multiline':False]
['text':' Check if command is previewable, if not, don't attempt to show preview','line_number':2511,'multiline':False]
['text':' Swap invalid command range if needed','line_number':2517,'multiline':False]
['text':' inccommand=split','line_number':2525,'multiline':False]
['text':' Block error reporting as the command may be incomplete,','line_number':2529,'multiline':False]
['text':' but still update v:errmsg','line_number':2530,'multiline':False]
['text':' Block messages, namely ones that prompt','line_number':2531,'multiline':False]
['text':' Block events','line_number':2532,'multiline':False]
['text':' Save current state and prepare for command preview.','line_number':2534,'multiline':False]
['text':' Open preview buffer if inccommand=split.','line_number':2537,'multiline':False]
['text':' Setup preview namespace if it's not already set.','line_number':2543,'multiline':False]
['text':' Set cmdpreview state.','line_number':2548,'multiline':False]
['text':' Execute the preview callback and use its return value to determine whether to show preview or','line_number':2551,'multiline':False]
['text':' open the preview window. The preview callback also handles doing the changes and highlights for','line_number':2552,'multiline':False]
['text':' the preview.','line_number':2553,'multiline':False]
['text':' If inccommand=split and preview callback returns 2, open preview window.','line_number':2562,'multiline':False]
['text':' If there's not enough room to open the preview window, just preview without the window.','line_number':2565,'multiline':False]
['text':' If preview callback return value is nonzero, update screen now.','line_number':2569,'multiline':False]
['text':' Close preview window if it's open.','line_number':2577,'multiline':False]
['text':' Restore state.','line_number':2582,'multiline':False]
['text':' Unblock events','line_number':2585,'multiline':False]
['text':' Unblock messages','line_number':2586,'multiline':False]
['text':' Unblock error reporting','line_number':2587,'multiline':False]
['text':'/ Trigger CmdlineChanged autocommands.','line_number':2594,'multiline':False]
['text':' set v:event to a dictionary with information about the commandline','line_number':2607,'multiline':False]
['text':' Trigger CmdlineChanged autocommands.','line_number':2629,'multiline':False]
['text':' only if interactive','line_number':2634,'multiline':False]
['text':' 'inccommand' is set','line_number':2635,'multiline':False]
['text':' buffer is modifiable','line_number':2636,'multiline':False]
['text':' not typing a password','line_number':2637,'multiline':False]
['text':' 'inccommand' preview has been shown.','line_number':2640,'multiline':False]
['text':' TODO(bfredl): add an immediate redraw flag for cmdline mode which will trigger','line_number':2644,'multiline':False]
['text':' at next wait-for-input','line_number':2645,'multiline':False]
['text':' Clear 'inccommand' preview.','line_number':2646,'multiline':False]
['text':' Always redraw the whole command line to fix shaping and','line_number':2654,'multiline':False]
['text':' right-left typing.  Not efficient, but it works.','line_number':2655,'multiline':False]
['text':' Do it only when there are no characters left to read','line_number':2656,'multiline':False]
['text':' to avoid useless intermediate redraws.','line_number':2657,'multiline':False]
['text':' if cmdline is external the ui handles shaping, no redraw needed.','line_number':2658,'multiline':False]
['text':'/ Abandon the command line.','line_number':2667,'multiline':False]
['text':'/ getcmdline() - accept a command line starting with firstc.','line_number':2679,'multiline':False]
['text':'/','line_number':2680,'multiline':False]
['text':'/ firstc == ':'            get ":" command line.','line_number':2681,'multiline':False]
['text':'/ firstc == '/' or '?'     get search pattern','line_number':2682,'multiline':False]
['text':'/ firstc == '='            get expression','line_number':2683,'multiline':False]
['text':'/ firstc == '@'            get text for input() function','line_number':2684,'multiline':False]
['text':'/ firstc == '>'            get text for debug mode','line_number':2685,'multiline':False]
['text':'/ firstc == NUL            get text for :insert command','line_number':2686,'multiline':False]
['text':'/ firstc == -1             like NUL, and break on CTRL-C','line_number':2687,'multiline':False]
['text':'/','line_number':2688,'multiline':False]
['text':'/ The line is collected in ccline.cmdbuff, which is reallocated to fit the','line_number':2689,'multiline':False]
['text':'/ command line.','line_number':2690,'multiline':False]
['text':'/','line_number':2691,'multiline':False]
['text':'/ Careful: getcmdline() can be called recursively!','line_number':2692,'multiline':False]
['text':'/','line_number':2693,'multiline':False]
['text':'/ Return pointer to allocated string if there is a commandline, NULL','line_number':2694,'multiline':False]
['text':'/ otherwise.','line_number':2695,'multiline':False]
['text':'/','line_number':2696,'multiline':False]
['text':'/ @param count  only used for incremental search','line_number':2697,'multiline':False]
['text':'/ @param indent  indent for inside conditionals','line_number':2698,'multiline':False]
['text':'/ Get a command line with a prompt','line_number':2704,'multiline':False]
['text':'/','line_number':2705,'multiline':False]
['text':'/ This is prepared to be called recursively from getcmdline() (e.g. by','line_number':2706,'multiline':False]
['text':'/ f_input() when evaluating an expression from `<C-r>=`).','line_number':2707,'multiline':False]
['text':'/','line_number':2708,'multiline':False]
['text':'/ @param[in]  firstc  Prompt type: e.g. '@' for input(), '>' for debug.','line_number':2709,'multiline':False]
['text':'/ @param[in]  prompt  Prompt string: what is displayed before the user text.','line_number':2710,'multiline':False]
['text':'/ @param[in]  attr  Prompt highlighting.','line_number':2711,'multiline':False]
['text':'/ @param[in]  xp_context  Type of expansion.','line_number':2712,'multiline':False]
['text':'/ @param[in]  xp_arg  User-defined expansion argument.','line_number':2713,'multiline':False]
['text':'/ @param[in]  highlight_callback  Callback used for highlighting user input.','line_number':2714,'multiline':False]
['text':'/','line_number':2715,'multiline':False]
['text':'/ @return [allocated] Command line or NULL.','line_number':2716,'multiline':False]
['text':' Save the values of the current cmdline and restore them below.','line_number':2727,'multiline':False]
['text':' Restore msg_col, the prompt from input() may have changed it.','line_number':2750,'multiline':False]
['text':' But only if called recursively and the commandline is therefore being','line_number':2751,'multiline':False]
['text':' restored to an old one; if not, the input() prompt stays on the screen,','line_number':2752,'multiline':False]
['text':' so we need its modified msg_col left intact.','line_number':2753,'multiline':False]
['text':'/ Read the 'wildmode' option, fill wim_flags[].','line_number':2761,'multiline':False]
['text':' Note: Keep this in sync with p_wim_values.','line_number':2773,'multiline':False]
['text':' fill remaining entries with last flag','line_number':2801,'multiline':False]
['text':' only when there are no errors, wim_flags[] is changed','line_number':2807,'multiline':False]
['text':'/ Return true when the text must not be changed and we can't switch to','line_number':2814,'multiline':False]
['text':'/ another window or buffer.  True when editing the command line etc.','line_number':2815,'multiline':False]
['text':' Give an error message for a command that isn't allowed while the cmdline','line_number':2827,'multiline':False]
['text':' window is open or editing the cmdline in another way.','line_number':2828,'multiline':False]
['text':'/ Check for text, window or buffer locked.','line_number':2843,'multiline':False]
['text':'/ Give an error message and return true if something is locked.','line_number':2844,'multiline':False]
['text':'/ Check if "curbuf->b_ro_locked" or "allbuf_lock" is set and','line_number':2854,'multiline':False]
['text':'/ return true when it is and give an error message.','line_number':2855,'multiline':False]
['text':' Check if "allbuf_lock" is set and return true when it is and give an error','line_number':2865,'multiline':False]
['text':' message.','line_number':2866,'multiline':False]
['text':' showing '*', always 1 position','line_number':2878,'multiline':False]
['text':'/ Compute the offset of the cursor on the command line for the prompt and','line_number':2884,'multiline':False]
['text':'/ indent.','line_number':2885,'multiline':False]
['text':'/ Compute the column position for a byte position on the command line.','line_number':2891,'multiline':False]
['text':' maximum column','line_number':2894,'multiline':False]
['text':' overflow, Columns or Rows at weird value','line_number':2899,'multiline':False]
['text':' Count ">" for double-wide multi-byte char that doesn't fit.','line_number':2909,'multiline':False]
['text':' If the cmdline doesn't fit, show cursor on last visible char.','line_number':2912,'multiline':False]
['text':' Don't move the cursor itself, so we can still append.','line_number':2913,'multiline':False]
['text':'/ Check if the character at "idx", which is "cells" wide, is a multi-byte','line_number':2922,'multiline':False]
['text':'/ character that doesn't fit, so that a ">" must be displayed.','line_number':2923,'multiline':False]
['text':'/ Get an Ex command line for the ":" command.','line_number':2933,'multiline':False]
['text':'/','line_number':2934,'multiline':False]
['text':'/ @param c  normally ':', NUL for ":append"','line_number':2935,'multiline':False]
['text':'/ @param indent  indent for inside conditionals','line_number':2936,'multiline':False]
['text':' When executing a register, remove ':' that's in front of each line.','line_number':2939,'multiline':False]
['text':'/ Return true if the cursor is at the end of the cmdline.','line_number':2953,'multiline':False]
['text':' Allocate a new command line buffer.','line_number':2960,'multiline':False]
['text':' Assigns the new buffer to ccline.cmdbuff and ccline.cmdbufflen.','line_number':2961,'multiline':False]
['text':' give some extra space to avoid having to allocate all the time','line_number':2964,'multiline':False]
['text':'/ Re-allocate the command line to length len + something extra.','line_number':2975,'multiline':False]
['text':' no need to resize','line_number':2979,'multiline':False]
['text':' will get some more','line_number':2983,'multiline':False]
['text':' There isn't always a NUL after the command, but it may need to be','line_number':2984,'multiline':False]
['text':' there, thus copy up to the NUL and add a NUL.','line_number':2985,'multiline':False]
['text':' If xp_pattern points inside the old cmdbuff it needs to be adjusted','line_number':2996,'multiline':False]
['text':' to point into the newly allocated memory.','line_number':2997,'multiline':False]
['text':'/ Color expression cmdline using built-in expressions parser','line_number':3006,'multiline':False]
['text':'/','line_number':3007,'multiline':False]
['text':'/ @param[in]  colored_ccline  Command-line to color.','line_number':3008,'multiline':False]
['text':'/ @param[out]  ret_ccline_colors  What should be colored.','line_number':3009,'multiline':False]
['text':'/','line_number':3010,'multiline':False]
['text':'/ Always colors the whole cmdline.','line_number':3011,'multiline':False]
['text':'/ Color command-line','line_number':3064,'multiline':False]
['text':'/','line_number':3065,'multiline':False]
['text':'/ Should use built-in command parser or user-specified one. Currently only the','line_number':3066,'multiline':False]
['text':'/ latter is supported.','line_number':3067,'multiline':False]
['text':'/','line_number':3068,'multiline':False]
['text':'/ @param[in,out]  colored_ccline  Command-line to color. Also holds a cache:','line_number':3069,'multiline':False]
['text':'/                                 if ->prompt_id and ->cmdbuff values happen','line_number':3070,'multiline':False]
['text':'/                                 to be equal to those from colored_cmdline it','line_number':3071,'multiline':False]
['text':'/                                 will just do nothing, assuming that ->colors','line_number':3072,'multiline':False]
['text':'/                                 already contains needed data.','line_number':3073,'multiline':False]
['text':'/','line_number':3074,'multiline':False]
['text':'/ Always colors the whole cmdline.','line_number':3075,'multiline':False]
['text':'/','line_number':3076,'multiline':False]
['text':'/ @return true if draw_cmdline may proceed, false if it does not need anything','line_number':3077,'multiline':False]
['text':'/         to do.','line_number':3078,'multiline':False]
['text':' Check whether result of the previous call is still valid.','line_number':3094,'multiline':False]
['text':' Nothing to do, exiting.','line_number':3104,'multiline':False]
['text':' Currently this should only happen while processing input() prompts.','line_number':3133,'multiline':False]
['text':' msg_start() called by e.g. :echo may shift command-line to the first column','line_number':3157,'multiline':False]
['text':' even though msg_silent is here. Two ways to workaround this problem without','line_number':3158,'multiline':False]
['text':' altering message.c: use full_screen or save and restore msg_col.','line_number':3159,'multiline':False]
['text':'','line_number':3160,'multiline':False]
['text':' Saving and restoring full_screen does not work well with :redraw!. Saving','line_number':3161,'multiline':False]
['text':' and restoring msg_col is neither ideal, but while with full_screen it','line_number':3162,'multiline':False]
['text':' appears shifted one character to the right and cursor position is no longer','line_number':3163,'multiline':False]
['text':' correct, with msg_col it just misses leading `:`. Since `redraw!` in','line_number':3164,'multiline':False]
['text':' callback lags this is least of the user problems.','line_number':3165,'multiline':False]
['text':'','line_number':3166,'multiline':False]
['text':' Also using try_enter() because error messages may overwrite typed','line_number':3167,'multiline':False]
['text':' command-line which is not expected.','line_number':3168,'multiline':False]
['text':' Note: errors “output” is cached just as well as regular results.','line_number':3269,'multiline':False]
['text':' Draw part of the cmdline at the current cursor position.  But draw stars','line_number':3294,'multiline':False]
['text':' when cmdline_star is true.','line_number':3295,'multiline':False]
['text':'/ Extra redrawing needed for redraw! and on ui_attach','line_number':3405,'multiline':False]
['text':'/ assumes "redrawcmdline()" will already be invoked','line_number':3406,'multiline':False]
['text':' don't redraw a cmdline already shown in the cmdline window','line_number':3421,'multiline':False]
['text':'/ called by ui_flush, do what redraws necessary to keep cmdline updated.','line_number':3431,'multiline':False]
['text':' Put a character on the command line.  Shifts the following text to the','line_number':3453,'multiline':False]
['text':' right when "shift" is true.  Used for CTRL-V, CTRL-K, etc.','line_number':3454,'multiline':False]
['text':' "c" must be printable (fit in one display cell)!','line_number':3455,'multiline':False]
['text':'/ Undo a putcmdline(c, false).','line_number':3479,'multiline':False]
['text':' Put the given string, of the given length, onto the command line.','line_number':3497,'multiline':False]
['text':' If len is -1, then strlen() is used to calculate the length.','line_number':3498,'multiline':False]
['text':' If 'redraw' is true then the new part of the command line, and the remaining','line_number':3499,'multiline':False]
['text':' part will be redrawn, otherwise it will not.  If this function is called','line_number':3500,'multiline':False]
['text':' twice in a row, then 'redraw' should be false and redrawcmd() should be','line_number':3501,'multiline':False]
['text':' called afterwards.','line_number':3502,'multiline':False]
['text':' Count nr of characters in the new string.','line_number':3521,'multiline':False]
['text':' Count nr of bytes in cmdline that are overwritten by these','line_number':3526,'multiline':False]
['text':' characters.','line_number':3527,'multiline':False]
['text':' When the inserted text starts with a composing character,','line_number':3544,'multiline':False]
['text':' backup to the character before it.  There could be two of them.','line_number':3545,'multiline':False]
['text':' Check the previous character for Arabic combining pair.','line_number':3555,'multiline':False]
['text':' Also backup the cursor position.','line_number':3565,'multiline':False]
['text':' Avoid clearing the rest of the line too often.','line_number':3581,'multiline':False]
['text':' overflow, Columns or Rows at weird value','line_number':3589,'multiline':False]
['text':' count ">" for a double-wide char that doesn't fit.','line_number':3597,'multiline':False]
['text':' Stop cursor at the end of the screen, but do increment the','line_number':3599,'multiline':False]
['text':' insert position, so that entering a very long command','line_number':3600,'multiline':False]
['text':' works, even though you can't see it.','line_number':3601,'multiline':False]
['text':'/ Save ccline, because obtaining the "=" register may execute "normal :cmd"','line_number':3619,'multiline':False]
['text':'/ and overwrite it.','line_number':3620,'multiline':False]
['text':' signal that ccline is not in use','line_number':3626,'multiline':False]
['text':'/ Restore ccline after it has been saved with save_cmdline().','line_number':3629,'multiline':False]
['text':'/ Paste a yank register into the command line.','line_number':3636,'multiline':False]
['text':'/ Used by CTRL-R command in command-line mode.','line_number':3637,'multiline':False]
['text':'/ insert_reg() can't be used here, because special characters from the','line_number':3638,'multiline':False]
['text':'/ register contents will be interpreted as commands.','line_number':3639,'multiline':False]
['text':'/','line_number':3640,'multiline':False]
['text':'/ @param regname   Register name.','line_number':3641,'multiline':False]
['text':'/ @param literally Insert text literally instead of "as typed".','line_number':3642,'multiline':False]
['text':'/ @param remcr     When true, remove trailing CR.','line_number':3643,'multiline':False]
['text':'/','line_number':3644,'multiline':False]
['text':'/ @returns FAIL for failure, OK otherwise','line_number':3645,'multiline':False]
['text':' check for valid regname; also accept special characters for CTRL-R in','line_number':3651,'multiline':False]
['text':' the command line','line_number':3652,'multiline':False]
['text':' A register containing CTRL-R can cause an endless loop.  Allow using','line_number':3659,'multiline':False]
['text':' CTRL-C to break the loop.','line_number':3660,'multiline':False]
['text':' Need to  set "textlock" to avoid nasty things like going to another','line_number':3666,'multiline':False]
['text':' buffer when evaluating an expression.','line_number':3667,'multiline':False]
['text':' Got the value of a special register in "arg".','line_number':3673,'multiline':False]
['text':' When 'incsearch' is set and CTRL-R CTRL-W used: skip the duplicate','line_number':3678,'multiline':False]
['text':' part of the word.','line_number':3679,'multiline':False]
['text':' Locate start of last word in the cmd buffer.','line_number':3685,'multiline':False]
['text':' Put a string on the command line.','line_number':3709,'multiline':False]
['text':' When "literally" is true, insert literally.','line_number':3710,'multiline':False]
['text':' When "literally" is false, insert as typed, but don't leave the command','line_number':3711,'multiline':False]
['text':' line.','line_number':3712,'multiline':False]
['text':' This function is called when the screen size changes and with incremental','line_number':3734,'multiline':False]
['text':' search and in other situations where the command line may have been','line_number':3735,'multiline':False]
['text':' overwritten.','line_number':3736,'multiline':False]
['text':' do the reverse of cmd_startcol()','line_number':3764,'multiline':False]
['text':' Redraw what is currently on the command line.','line_number':3775,'multiline':False]
['text':' when 'incsearch' is set there may be no command line while redrawing','line_number':3787,'multiline':False]
['text':' Don't use more prompt, truncate the cmdline if it doesn't fit.','line_number':3800,'multiline':False]
['text':' An emsg() before may have set msg_scroll. This is used in normal mode,','line_number':3812,'multiline':False]
['text':' in cmdline mode we can reset them now.','line_number':3813,'multiline':False]
['text':' next message overwrites cmdline','line_number':3814,'multiline':False]
['text':' Typing ':' at the more prompt may set skip_redraw.  We don't want this','line_number':3816,'multiline':False]
['text':' in cmdline mode.','line_number':3817,'multiline':False]
['text':' always start in column 0','line_number':3867,'multiline':False]
['text':' clear the bottom line(s)','line_number':3868,'multiline':False]
['text':' will reset clear_cmdline','line_number':3869,'multiline':False]
['text':' Check the word in front of the cursor for an abbreviation.','line_number':3874,'multiline':False]
['text':' Called when the non-id character "c" has been entered.','line_number':3875,'multiline':False]
['text':' When an abbreviation is recognized it is removed from the text with','line_number':3876,'multiline':False]
['text':' backspaces and the replacement string is inserted, followed by "c".','line_number':3877,'multiline':False]
['text':' no abbreviations or in paste mode','line_number':3882,'multiline':False]
['text':' Do not consider '<,'> be part of the mapping, skip leading whitespace.','line_number':3886,'multiline':False]
['text':' Actually accepts any mark.','line_number':3887,'multiline':False]
['text':' check abbreviation from the beginning of the commandline','line_number':3897,'multiline':False]
['text':'/ Escape special characters in "fname", depending on "what":','line_number':3904,'multiline':False]
['text':'/','line_number':3905,'multiline':False]
['text':'/ @param[in]  fname  File name to escape.','line_number':3906,'multiline':False]
['text':'/ @param[in]  what   What to escape for:','line_number':3907,'multiline':False]
['text':'/ - VSE_NONE: for when used as a file name argument after a Vim command.','line_number':3908,'multiline':False]
['text':'/ - VSE_SHELL: for a shell command.','line_number':3909,'multiline':False]
['text':'/ - VSE_BUFFER: for the ":buffer" command.','line_number':3910,'multiline':False]
['text':'/','line_number':3911,'multiline':False]
['text':'/ @return [allocated] escaped file name.','line_number':3912,'multiline':False]
['text':' Don't escape '[', '{' and '!' if they are in 'isfname' and for the','line_number':3922,'multiline':False]
['text':' ":buffer" command.','line_number':3923,'multiline':False]
['text':' For csh and similar shells need to put two backslashes before '!'.','line_number':3940,'multiline':False]
['text':' One is taken by Vim, one by the shell.','line_number':3941,'multiline':False]
['text':' '>' and '+' are special at the start of some commands, e.g. ":edit" and','line_number':3948,'multiline':False]
['text':' ":write".  "cd -" has a special meaning.','line_number':3949,'multiline':False]
['text':'/ Put a backslash before the file name in "pp", which is in allocated memory.','line_number':3957,'multiline':False]
['text':'/ For each file name in files[num_files]:','line_number':3967,'multiline':False]
['text':'/ If 'orig_pat' starts with "~/", replace the home directory with "~".','line_number':3968,'multiline':False]
['text':'/ Get a pointer to the current command line info.','line_number':3980,'multiline':False]
['text':'/ Get pointer to the command line info to use. save_cmdline() may clear','line_number':3991,'multiline':False]
['text':'/ ccline and put the previous value in ccline.prev_ccline.','line_number':3992,'multiline':False]
['text':'/ Get the current command-line type.','line_number':4006,'multiline':False]
['text':'/ Returns ':' or '/' or '?' or '@' or '>' or '-'','line_number':4007,'multiline':False]
['text':'/ Only works when the command line is being edited.','line_number':4008,'multiline':False]
['text':'/ Returns NUL when something is wrong.','line_number':4009,'multiline':False]
['text':'/ Get the current command line in allocated memory.','line_number':4023,'multiline':False]
['text':'/ Only works when the command line is being edited.','line_number':4024,'multiline':False]
['text':'/','line_number':4025,'multiline':False]
['text':'/ @return  NULL when something is wrong.','line_number':4026,'multiline':False]
['text':'/ Get the current command-line completion type.','line_number':4040,'multiline':False]
['text':'/ "getcmdcompltype()" function','line_number':4073,'multiline':False]
['text':'/ "getcmdline()" function','line_number':4080,'multiline':False]
['text':'/ "getcmdpos()" function','line_number':4087,'multiline':False]
['text':'/ "getcmdscreenpos()" function','line_number':4094,'multiline':False]
['text':'/ "getcmdtype()" function','line_number':4101,'multiline':False]
['text':'/ Set the command line str to "str".','line_number':4109,'multiline':False]
['text':'/ @return  1 when failed, 0 when OK.','line_number':4110,'multiline':False]
['text':' Trigger CmdlineChanged autocommands.','line_number':4129,'multiline':False]
['text':'/ Set the command line byte position to "pos".  Zero is the first position.','line_number':4135,'multiline':False]
['text':'/ Only works when the command line is being edited.','line_number':4136,'multiline':False]
['text':'/ @return  1 when failed, 0 when OK.','line_number':4137,'multiline':False]
['text':' The position is not set directly but after CTRL-\ e or CTRL-R = has','line_number':4146,'multiline':False]
['text':' changed the command line.','line_number':4147,'multiline':False]
['text':'/ "setcmdline()" function','line_number':4156,'multiline':False]
['text':' Use tv_get_string() to handle a NULL string like an empty string.','line_number':4178,'multiline':False]
['text':'/ "setcmdpos()" function','line_number':4182,'multiline':False]
['text':'/ Return the first character of the current command line.','line_number':4192,'multiline':False]
['text':'/ Get indices that specify a range within a list (not a range of text lines','line_number':4198,'multiline':False]
['text':'/ in a buffer!) from a string.  Used for ":history" and ":clist".','line_number':4199,'multiline':False]
['text':'/','line_number':4200,'multiline':False]
['text':'/ @param str string to parse range from','line_number':4201,'multiline':False]
['text':'/ @param num1 from','line_number':4202,'multiline':False]
['text':'/ @param num2 to','line_number':4203,'multiline':False]
['text':'/','line_number':4204,'multiline':False]
['text':'/ @return OK if parsed successfully, otherwise FAIL.','line_number':4205,'multiline':False]
['text':' parse "from" part of range','line_number':4213,'multiline':False]
['text':' overflow','line_number':4216,'multiline':False]
['text':' parse "to" part of range','line_number':4225,'multiline':False]
['text':' overflow','line_number':4230,'multiline':False]
['text':' no number given at all','line_number':4236,'multiline':False]
['text':' only one number given','line_number':4239,'multiline':False]
['text':'/ Check value of 'cedit' and set cedit_key.','line_number':4250,'multiline':False]
['text':'/ Returns NULL if value is OK, error message otherwise.','line_number':4251,'multiline':False]
['text':'/ Open a window on the current command line and history.  Allow editing in','line_number':4266,'multiline':False]
['text':'/ the window.  Returns when the window is closed.','line_number':4267,'multiline':False]
['text':'/ Returns:','line_number':4268,'multiline':False]
['text':'/     CR       if the command is to be executed','line_number':4269,'multiline':False]
['text':'/     Ctrl_C   if it is to be abandoned','line_number':4270,'multiline':False]
['text':'/     K_IGNORE if editing continues','line_number':4271,'multiline':False]
['text':' Can't do this when text or buffer is locked.','line_number':4285,'multiline':False]
['text':' Can't do this recursively.  Can't do it when typing a password.','line_number':4286,'multiline':False]
['text':' Save current window sizes.','line_number':4294,'multiline':False]
['text':' When using completion in Insert mode with <C-R>=<C-F> one can open the','line_number':4297,'multiline':False]
['text':' command line window, but we don't want the popup menu then.','line_number':4298,'multiline':False]
['text':' don't use a new tab page','line_number':4301,'multiline':False]
['text':' Create a window for the command-line buffer.','line_number':4305,'multiline':False]
['text':' Don't let quitting the More prompt make this fail.','line_number':4311,'multiline':False]
['text':' Set "cmdwin_type" before any autocommands may mess things up.','line_number':4314,'multiline':False]
['text':' Create empty command-line buffer.','line_number':4319,'multiline':False]
['text':' Some autocommand messed it up?','line_number':4321,'multiline':False]
['text':' Command-line buffer has bufhidden=wipe, unlike a true "scratch" buffer.','line_number':4328,'multiline':False]
['text':' Don't allow switching to another buffer.','line_number':4335,'multiline':False]
['text':' Showing the prompt may have set need_wait_return, reset it.','line_number':4338,'multiline':False]
['text':' Reset 'textwidth' after setting 'filetype' (the Vim filetype plugin','line_number':4351,'multiline':False]
['text':' sets 'textwidth' to 78).','line_number':4352,'multiline':False]
['text':' Fill the buffer with the history.','line_number':4355,'multiline':False]
['text':' Replace the empty last line with the current command-line and put the','line_number':4372,'multiline':False]
['text':' cursor there.','line_number':4373,'multiline':False]
['text':' No Ex mode here!','line_number':4385,'multiline':False]
['text':' Reset here so it can be set by a CmdWinEnter autocommand.','line_number':4391,'multiline':False]
['text':' Trigger CmdwinEnter autocommands.','line_number':4394,'multiline':False]
['text':' autocmd with ":startinsert"','line_number':4398,'multiline':False]
['text':' Call the main loop until <CR> or CTRL-C is typed.','line_number':4406,'multiline':False]
['text':' Trigger CmdwinLeave autocommands.','line_number':4414,'multiline':False]
['text':' Restore KeyTyped in case it is modified by autocommands','line_number':4417,'multiline':False]
['text':' Safety check: The old window or buffer was deleted: It's a bug when','line_number':4426,'multiline':False]
['text':' this happens!','line_number':4427,'multiline':False]
['text':' autocmds may abort script processing','line_number':4433,'multiline':False]
['text':' Set the new command line from the cmdline buffer.','line_number':4437,'multiline':False]
['text':' :qa[!] typed','line_number':4439,'multiline':False]
['text':' Execute the command directly.','line_number':4443,'multiline':False]
['text':' First need to cancel what we were doing.','line_number':4447,'multiline':False]
['text':' :q or :close, don't execute any command','line_number':4454,'multiline':False]
['text':' and don't modify the cmd window.','line_number':4455,'multiline':False]
['text':' If the cursor is on the last character, it probably should be after it.','line_number':4470,'multiline':False]
['text':' Avoid command-line window first character being concealed.','line_number':4480,'multiline':False]
['text':' First go back to the original window.','line_number':4482,'multiline':False]
['text':' win_goto() may trigger an autocommand that already closes the','line_number':4488,'multiline':False]
['text':' cmdline window.','line_number':4489,'multiline':False]
['text':' win_close() may have already wiped the buffer when 'bh' is','line_number':4494,'multiline':False]
['text':' set to 'wipe', autocommands may have closed other windows','line_number':4495,'multiline':False]
['text':' Restore window sizes.','line_number':4500,'multiline':False]
['text':'/ @return true if in the cmdwin, not editing the command line.','line_number':4516,'multiline':False]
['text':'/ Get script string','line_number':4523,'multiline':False]
['text':'/','line_number':4524,'multiline':False]
['text':'/ Used for commands which accept either `:command script` or','line_number':4525,'multiline':False]
['text':'/','line_number':4526,'multiline':False]
['text':'/     :command << endmarker','line_number':4527,'multiline':False]
['text':'/       script','line_number':4528,'multiline':False]
['text':'/     endmarker','line_number':4529,'multiline':False]
['text':'/','line_number':4530,'multiline':False]
['text':'/ @param  eap  Command being run.','line_number':4531,'multiline':False]
['text':'/ @param[out]  lenp  Location where length of resulting string is saved. Will','line_number':4532,'multiline':False]
['text':'/                    be set to zero when skipping.','line_number':4533,'multiline':False]
['text':'/','line_number':4534,'multiline':False]
['text':'/ @return [allocated] NULL or script. Does not show any error messages.','line_number':4535,'multiline':False]
['text':'/                     NULL is returned when skipping and on error.','line_number':4536,'multiline':False]
['text':' Set length without trailing NUL.','line_number':4565,'multiline':False]
['text':' First move cursor to end of match, then to the start.  This','line_number':4576,'multiline':False]
['text':' moves the whole match onto the screen when 'nowrap' is set.','line_number':4577,'multiline':False]
