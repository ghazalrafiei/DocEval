['text':' User-settable options. Checklist for adding a new option:','line_number':1,'multiline':False]
['text':' - Put it in options.lua','line_number':2,'multiline':False]
['text':' - For a global option: Add a variable for it in option_defs.h.','line_number':3,'multiline':False]
['text':' - For a buffer or window local option:','line_number':4,'multiline':False]
['text':'   - Add a BV_XX or WV_XX entry to option_defs.h','line_number':5,'multiline':False]
['text':'   - Add a variable to the window or buffer struct in buffer_defs.h.','line_number':6,'multiline':False]
['text':'   - For a window option, add some code to copy_winopt().','line_number':7,'multiline':False]
['text':'   - For a window string option, add code to check_winopt()','line_number':8,'multiline':False]
['text':'     and clear_winopt(). If setting the option needs parsing,','line_number':9,'multiline':False]
['text':'     add some code to didset_window_options().','line_number':10,'multiline':False]
['text':'   - For a buffer option, add some code to buf_copy_options().','line_number':11,'multiline':False]
['text':'   - For a buffer string option, add code to check_buf_options().','line_number':12,'multiline':False]
['text':' - If it's a numeric option, add any necessary bounds checks to check_num_option_bounds().','line_number':13,'multiline':False]
['text':' - If it's a list of flags, add some code in do_set(), search for WW_ALL.','line_number':14,'multiline':False]
['text':' - Add documentation! doc/options.txt, and any other related places.','line_number':15,'multiline':False]
['text':' - Add an entry in runtime/optwin.vim.','line_number':16,'multiline':False]
['text':' Saved values for when 'bin' is set.','line_number':121,'multiline':False]
['text':' Saved values for when 'paste' is set.','line_number':127,'multiline':False]
['text':'/ :set boolean option prefix','line_number':137,'multiline':False]
['text':'/< "no" prefix','line_number':139,'multiline':False]
['text':'/< no prefix','line_number':140,'multiline':False]
['text':'/< "inv" prefix','line_number':141,'multiline':False]
['text':' options[] is initialized here.','line_number':148,'multiline':False]
['text':' The order of the options MUST be alphabetic for ":set all" and findoption().','line_number':149,'multiline':False]
['text':' All option names MUST start with a lowercase letter (for findoption()).','line_number':150,'multiline':False]
['text':' Exception: "t_" options are at the end.','line_number':151,'multiline':False]
['text':' The options with a NULL variable are 'hidden': a set command for them is','line_number':152,'multiline':False]
['text':' ignored and they are not printed.','line_number':153,'multiline':False]
['text':' susy baka: cmdheight calls itself OPT_GLOBAL but is really tablocal!','line_number':170,'multiline':False]
['text':'/ Initialize the 'shell' option to a default value.','line_number':174,'multiline':False]
['text':' Find default value for 'shell' option.','line_number':177,'multiline':False]
['text':' Don't use it if it is empty.','line_number':178,'multiline':False]
['text':' two quotes and a trailing NUL','line_number':182,'multiline':False]
['text':'/ Set the default for 'backupskip' to include environment variables for','line_number':192,'multiline':False]
['text':'/ temp files.','line_number':193,'multiline':False]
['text':' NOLINT(readability/braces)','line_number':216,'multiline':False]
['text':' First time count the NUL, otherwise count the ','.','line_number':222,'multiline':False]
['text':'/ Initialize the 'cdpath' option to a default value.','line_number':250,'multiline':False]
['text':' start with ",", current dir first','line_number':259,'multiline':False]
['text':' cannot happen','line_number':277,'multiline':False]
['text':'/ Expand environment variables and things like "~" for the defaults.','line_number':282,'multiline':False]
['text':'/ If option_expand() returns non-NULL the variable is expanded.  This can','line_number':283,'multiline':False]
['text':'/ only happen for non-indirect options.','line_number':284,'multiline':False]
['text':'/ Also set the default to the expanded value, so ":set" does not list','line_number':285,'multiline':False]
['text':'/ them.','line_number':286,'multiline':False]
['text':'/ Don't set the P_ALLOCED flag, because we don't want to free the','line_number':287,'multiline':False]
['text':'/ default.','line_number':288,'multiline':False]
['text':'/ Initialize the encoding used for "default" in 'fileencodings'.','line_number':314,'multiline':False]
['text':' enc_locale() will try to find the encoding of the current locale.','line_number':317,'multiline':False]
['text':' This will be used when "default" is used as encoding specifier','line_number':318,'multiline':False]
['text':' in 'fileencodings'.','line_number':319,'multiline':False]
['text':' Use utf-8 as "default" if locale encoding can't be detected.','line_number':322,'multiline':False]
['text':'/ Initialize the options, first part.','line_number':328,'multiline':False]
['text':'/','line_number':329,'multiline':False]
['text':'/ Called only once from main(), just after creating the first buffer.','line_number':330,'multiline':False]
['text':'/ If "clean_arg" is true, Nvim was started with --clean.','line_number':331,'multiline':False]
['text':'/','line_number':332,'multiline':False]
['text':'/ NOTE: ELOG() etc calls are not allowed here, as log location depends on','line_number':333,'multiline':False]
['text':'/ env var expansion which depends on expression evaluation and other','line_number':334,'multiline':False]
['text':'/ editor state initialized here. Do logging in set_init_2 or later.','line_number':335,'multiline':False]
['text':' Set default for &runtimepath. All necessary expansions are performed in','line_number':356,'multiline':False]
['text':' this function.','line_number':357,'multiline':False]
['text':' Make a copy of 'rtp' for 'packpath'','line_number':361,'multiline':False]
['text':' ownership taken','line_number':363,'multiline':False]
['text':' Set all the options (except the terminal options) to their default','line_number':366,'multiline':False]
['text':' value.  Also set the global value for local options.','line_number':367,'multiline':False]
['text':' no local 'autoread' value','line_number':371,'multiline':False]
['text':' Set all options to their default value','line_number':377,'multiline':False]
['text':' set 'laststatus'','line_number':380,'multiline':False]
['text':' Must be before option_expand(), because that one needs vim_isIDc()','line_number':383,'multiline':False]
['text':' Use the current chartab for the generic chartab. This is not in','line_number':386,'multiline':False]
['text':' didset_options() because it only depends on 'encoding'.','line_number':387,'multiline':False]
['text':' Expand environment variables and things like "~" for the defaults.','line_number':390,'multiline':False]
['text':' Buffer is unchanged','line_number':393,'multiline':False]
['text':' Detect use of mlterm.','line_number':395,'multiline':False]
['text':' Mlterm is a terminal emulator akin to xterm that has some special','line_number':396,'multiline':False]
['text':' abilities (bidi namely).','line_number':397,'multiline':False]
['text':' NOTE: mlterm's author is being asked to 'set' a variable','line_number':398,'multiline':False]
['text':'       instead of an environment variable due to inheritance.','line_number':399,'multiline':False]
['text':' GNU gettext 0.10.37 supports this feature: set the codeset used for','line_number':410,'multiline':False]
['text':' translated messages independently from the current locale.','line_number':411,'multiline':False]
['text':' Set the default for 'helplang'.','line_number':415,'multiline':False]
['text':'/ Set an option to its default value.','line_number':419,'multiline':False]
['text':'/ This does not take care of side effects!','line_number':420,'multiline':False]
['text':'/','line_number':421,'multiline':False]
['text':'/ @param opt_flags OPT_FREE, OPT_LOCAL and/or OPT_GLOBAL','line_number':422,'multiline':False]
['text':' pointer to variable for current option','line_number':427,'multiline':False]
['text':' skip hidden option, nothing to do for it','line_number':431,'multiline':False]
['text':' Use set_string_option_direct() for local options to handle freeing and allocating the','line_number':433,'multiline':False]
['text':' value.','line_number':434,'multiline':False]
['text':' 'scrolloff' and 'sidescrolloff' local values have a','line_number':451,'multiline':False]
['text':' different default value than the global default.','line_number':452,'multiline':False]
['text':' May also set global value for local option.','line_number':457,'multiline':False]
['text':' P_BOOL','line_number':462,'multiline':False]
['text':' 'modeline' defaults to off for root','line_number':465,'multiline':False]
['text':' May also set global value for local option.','line_number':470,'multiline':False]
['text':' The default value is not insecure.','line_number':477,'multiline':False]
['text':'/ Set all options (except terminal options) to their default value.','line_number':485,'multiline':False]
['text':'/','line_number':486,'multiline':False]
['text':'/ @param opt_flags  OPT_FREE, OPT_LOCAL and/or OPT_GLOBAL','line_number':487,'multiline':False]
['text':' The 'scroll' option must be computed for all windows.','line_number':496,'multiline':False]
['text':'/ Set the Vi-default value of a string option.','line_number':504,'multiline':False]
['text':'/ Used for 'sh', 'backupskip' and 'term'.','line_number':505,'multiline':False]
['text':'/','line_number':506,'multiline':False]
['text':'/ @param  opt_idx    Option index in options[] table.','line_number':507,'multiline':False]
['text':'/ @param  val        The value of the option.','line_number':508,'multiline':False]
['text':'/ @param  allocated  If true, do not copy default as it was already allocated.','line_number':509,'multiline':False]
['text':'/ For an option value that contains comma separated items, find "newval" in','line_number':526,'multiline':False]
['text':'/ "origval".  Return NULL if not found.','line_number':527,'multiline':False]
['text':' Count backslashes.  Only a comma with an even number of backslashes','line_number':544,'multiline':False]
['text':' or a single backslash preceded by a comma before it is recognized as','line_number':545,'multiline':False]
['text':' a separator.','line_number':546,'multiline':False]
['text':'/ Set the Vi-default value of a number option.','line_number':557,'multiline':False]
['text':'/ Used for 'lines' and 'columns'.','line_number':558,'multiline':False]
['text':'/ Free all options.','line_number':567,'multiline':False]
['text':' global option: free value and default value.','line_number':572,'multiline':False]
['text':' buffer-local option: free global value','line_number':580,'multiline':False]
['text':'/ Initialize the options, part two: After getting Rows and Columns.','line_number':592,'multiline':False]
['text':' set in set_init_1 but logging is not allowed there','line_number':595,'multiline':False]
['text':' 'scroll' defaults to half the window height. The stored default is zero,','line_number':598,'multiline':False]
['text':' which results in the actual value computed from the window height.','line_number':599,'multiline':False]
['text':' 'window' is only for backwards compatibility with Vi.','line_number':605,'multiline':False]
['text':' Default is Rows - 1.','line_number':606,'multiline':False]
['text':'/ Initialize the options, part three: After reading the .vimrc','line_number':613,'multiline':False]
['text':' set cursor shapes from 'guicursor'','line_number':616,'multiline':False]
['text':' Set 'shellpipe' and 'shellredir', depending on the 'shell' option.','line_number':618,'multiline':False]
['text':' This is done after other initializations, where 'shell' might have been','line_number':619,'multiline':False]
['text':' set, but only if they have not been set before.','line_number':620,'multiline':False]
['text':'','line_number':629,'multiline':False]
['text':' Default for p_sp is "| tee", for p_srr is ">".','line_number':630,'multiline':False]
['text':' For known shells it is changed here to include stderr.','line_number':631,'multiline':False]
['text':'','line_number':632,'multiline':False]
['text':' Always use POSIX shell style redirection if we reach this','line_number':653,'multiline':False]
['text':' Apply the first entry of 'fileformats' to the initial buffer.','line_number':669,'multiline':False]
['text':' 'title', 'icon'','line_number':675,'multiline':False]
['text':'/ When 'helplang' is still at its default value, set it to "lang".','line_number':678,'multiline':False]
['text':'/ Only the first two characters of "lang" are used.','line_number':679,'multiline':False]
['text':' safety check','line_number':687,'multiline':False]
['text':' zh_CN becomes "cn", zh_TW becomes "tw".','line_number':698,'multiline':False]
['text':' any C like setting, such as C.UTF-8, becomes "en"','line_number':703,'multiline':False]
['text':'/ 'title' and 'icon' only default to true if they have not been set or reset','line_number':711,'multiline':False]
['text':'/ in .vimrc and we can read the old value.','line_number':712,'multiline':False]
['text':'/ When 'title' and 'icon' have been reset in .vimrc, we won't even check if','line_number':713,'multiline':False]
['text':'/ they can be reset.  This reduces startup time when using X on a remote','line_number':714,'multiline':False]
['text':'/ machine.','line_number':715,'multiline':False]
['text':' If GUI is (going to be) used, we can always set the window title and','line_number':718,'multiline':False]
['text':' icon name.  Saves a bit of time, because the X11 display server does','line_number':719,'multiline':False]
['text':' not need to be contacted.','line_number':720,'multiline':False]
['text':'/ Get the default value for a string option.','line_number':746,'multiline':False]
['text':' expand environment variables and ~ since the default value was','line_number':750,'multiline':False]
['text':' already expanded, only required when an environment variable was set','line_number':751,'multiline':False]
['text':' later','line_number':752,'multiline':False]
['text':'/ Copy the new string value into allocated memory for the option.','line_number':767,'multiline':False]
['text':'/ Can't use set_string_option_direct(), because we need to remove the backslashes.','line_number':768,'multiline':False]
['text':' get a bit too much','line_number':774,'multiline':False]
['text':' Copy the string, skip over escaped chars.','line_number':782,'multiline':False]
['text':' For MS-Windows backslashes before normal file name characters','line_number':783,'multiline':False]
['text':' are not removed, and keep backslash at start, for "\\machine\path",','line_number':784,'multiline':False]
['text':' but do remove it for "\\\\machine\\path".','line_number':785,'multiline':False]
['text':' The reverse is found in escape_option_str_cmdline().','line_number':786,'multiline':False]
['text':' remove backslash','line_number':797,'multiline':False]
['text':' copy multibyte char','line_number':801,'multiline':False]
['text':'/ Expand environment variables and ~ in string option value 'newval'.','line_number':815,'multiline':False]
['text':'/ Concatenate the original and new values of a string option, adding a "," if','line_number':834,'multiline':False]
['text':'/ needed.','line_number':835,'multiline':False]
['text':' Strip a trailing comma, would get 2.','line_number':842,'multiline':False]
['text':'/ Remove a value from a string option.  Copy string option value in "origval"','line_number':860,'multiline':False]
['text':'/ to "newval" and then remove the string "strval" of length "len".','line_number':861,'multiline':False]
['text':' Remove newval[] from origval[]. (Note: "len" has been set above','line_number':864,'multiline':False]
['text':' and is used here).','line_number':865,'multiline':False]
['text':' may need to remove a comma','line_number':868,'multiline':False]
['text':' include comma after string','line_number':871,'multiline':False]
['text':' include comma before string','line_number':876,'multiline':False]
['text':'/ Remove flags that appear twice in the string option value 'newval'.','line_number':885,'multiline':False]
['text':' Remove flags that appear twice.','line_number':889,'multiline':False]
['text':' if options have P_FLAGLIST and P_ONECOMMA such as 'whichwrap'','line_number':891,'multiline':False]
['text':' Remove the duplicated value and the next comma.','line_number':895,'multiline':False]
['text':'/ Get the string value specified for a ":set" command.  The following set','line_number':910,'multiline':False]
['text':'/ options are supported:','line_number':911,'multiline':False]
['text':'/     set {opt}&','line_number':912,'multiline':False]
['text':'/     set {opt}<','line_number':913,'multiline':False]
['text':'/     set {opt}={val}','line_number':914,'multiline':False]
['text':'/     set {opt}:{val}','line_number':915,'multiline':False]
['text':' set to default val','line_number':924,'multiline':False]
['text':' set to global val','line_number':926,'multiline':False]
['text':' jump to after the '=' or ':'','line_number':929,'multiline':False]
['text':' Set 'keywordprg' to ":help" if an empty','line_number':931,'multiline':False]
['text':' value was passed to :set by the user.','line_number':932,'multiline':False]
['text':' Copy the new string into allocated memory.','line_number':938,'multiline':False]
['text':' Expand environment variables and ~.','line_number':941,'multiline':False]
['text':' Don't do it when adding without inserting a comma.','line_number':942,'multiline':False]
['text':' locate newval[] in origval[] when removing it','line_number':947,'multiline':False]
['text':' and when adding to avoid duplicates','line_number':948,'multiline':False]
['text':' do not add if already there','line_number':954,'multiline':False]
['text':' if no duplicate, move pointer to end of original value','line_number':960,'multiline':False]
['text':' concatenate the two strings; add a ',' if needed','line_number':966,'multiline':False]
['text':' Remove newval[] from origval[]. (Note: "len" has been set above','line_number':970,'multiline':False]
['text':' and is used here).','line_number':971,'multiline':False]
['text':' Remove flags that appear twice.','line_number':976,'multiline':False]
['text':' arg was temporarily changed, restore it','line_number':982,'multiline':False]
['text':' "+="','line_number':995,'multiline':False]
['text':' "^="','line_number':997,'multiline':False]
['text':' "-="','line_number':999,'multiline':False]
['text':'/ @param[in]   arg       Pointer to start option name','line_number':1018,'multiline':False]
['text':'/ @param[out]  opt_idxp  Option index in options[] table.','line_number':1019,'multiline':False]
['text':'/ @param[out]  keyp','line_number':1020,'multiline':False]
['text':'/ @param[out]  len       Length of option name','line_number':1021,'multiline':False]
['text':'/ @return  FAIL if an error is detected, OK otherwise','line_number':1022,'multiline':False]
['text':' find end of name','line_number':1025,'multiline':False]
['text':' look out for <t_>;>','line_number':1032,'multiline':False]
['text':' could be term code','line_number':1044,'multiline':False]
['text':' The two characters after "t_" may not be alphanumeric.','line_number':1052,'multiline':False]
['text':' Only bools can have a prefix of 'inv' or 'no'','line_number':1077,'multiline':False]
['text':' Skip all options that are not window-local (used when showing','line_number':1083,'multiline':False]
['text':' an already loaded buffer in a window).','line_number':1084,'multiline':False]
['text':' Skip all options that are window-local (used for :vimgrep).','line_number':1090,'multiline':False]
['text':' Disallow changing some options from modelines.','line_number':1096,'multiline':False]
['text':' In diff mode some options are overruled.  This avoids that','line_number':1106,'multiline':False]
['text':' 'foldmethod' becomes "marker" instead of "diff" and that','line_number':1107,'multiline':False]
['text':' "wrap" gets set.','line_number':1108,'multiline':False]
['text':' shut up coverity warning','line_number':1110,'multiline':False]
['text':' Disallow changing some options in the sandbox','line_number':1117,'multiline':False]
['text':'/ Get new option value from argp. Allocated OptVal must be freed by caller.','line_number':1126,'multiline':False]
['text':' When setting the local value of a global option, the old value may be the global value.','line_number':1136,'multiline':False]
['text':' ":set opt!": invert','line_number':1147,'multiline':False]
['text':' ":set opt&": reset to default value','line_number':1148,'multiline':False]
['text':' ":set opt<": reset to global value','line_number':1149,'multiline':False]
['text':' For 'autoread', kNone means to use global value.','line_number':1165,'multiline':False]
['text':' ":set invopt": invert','line_number':1172,'multiline':False]
['text':' ":set opt" or ":set noopt": set or reset','line_number':1173,'multiline':False]
['text':' Different ways to set a number option:','line_number':1188,'multiline':False]
['text':' &            set to default value','line_number':1189,'multiline':False]
['text':' <            set to global value','line_number':1190,'multiline':False]
['text':' <xx>         accept special key codes for 'wildchar'','line_number':1191,'multiline':False]
['text':' c            accept any non-digit for 'wildchar'','line_number':1192,'multiline':False]
['text':' [-]0-9       set number','line_number':1193,'multiline':False]
['text':' other        error','line_number':1194,'multiline':False]
['text':' for 'undolevels' NO_LOCAL_UNDOLEVEL means using the global newval_num','line_number':1200,'multiline':False]
['text':' for 'scrolloff'/'sidescrolloff' -1 means using the global newval_num','line_number':1204,'multiline':False]
['text':' Allow negative, octal and hex numbers.','line_number':1220,'multiline':False]
['text':' Get the new value for the option','line_number':1246,'multiline':False]
['text':' 1: nothing, 0: "no", 2: "inv" in front of name','line_number':1259,'multiline':False]
['text':' find end of name','line_number':1264,'multiline':False]
['text':' remember character after option name','line_number':1273,'multiline':False]
['text':' skip white space, allow ":set ai  ?"','line_number':1276,'multiline':False]
['text':' next non-white char after option name','line_number':1286,'multiline':False]
['text':' found a mismatch: skip','line_number':1288,'multiline':False]
['text':' flags for current option','line_number':1293,'multiline':False]
['text':' pointer to variable for current option','line_number':1294,'multiline':False]
['text':' hidden option: skip','line_number':1297,'multiline':False]
['text':' Only give an error message when requesting the value of','line_number':1298,'multiline':False]
['text':' a hidden option, ignore setting it.','line_number':1299,'multiline':False]
['text':' "opt&vim": set to Vim default','line_number':1321,'multiline':False]
['text':' "opt&vi": set to Vi default','line_number':1323,'multiline':False]
['text':'','line_number':1334,'multiline':False]
['text':' allow '=' and ':' as MS-DOS command.com allows only one','line_number':1335,'multiline':False]
['text':' '=' character per "set" command line. grrr. (jw)','line_number':1336,'multiline':False]
['text':'','line_number':1337,'multiline':False]
['text':' print value','line_number':1342,'multiline':False]
['text':' cursor below last one','line_number':1344,'multiline':False]
['text':' cursor at status line','line_number':1346,'multiline':False]
['text':' remember that we did a line','line_number':1347,'multiline':False]
['text':' Mention where the option was last set.','line_number':1352,'multiline':False]
['text':' Don't try to change hidden option.','line_number':1388,'multiline':False]
['text':'/ Parse 'arg' for option settings.','line_number':1403,'multiline':False]
['text':'/','line_number':1404,'multiline':False]
['text':'/ 'arg' may be IObuff, but only when no errors can be present and option','line_number':1405,'multiline':False]
['text':'/ does not need to be expanded with option_expand().','line_number':1406,'multiline':False]
['text':'/ "opt_flags":','line_number':1407,'multiline':False]
['text':'/ 0 for ":set"','line_number':1408,'multiline':False]
['text':'/ OPT_GLOBAL   for ":setglobal"','line_number':1409,'multiline':False]
['text':'/ OPT_LOCAL    for ":setlocal" and a modeline','line_number':1410,'multiline':False]
['text':'/ OPT_MODELINE for a modeline','line_number':1411,'multiline':False]
['text':'/ OPT_WINONLY  to only set window-local options','line_number':1412,'multiline':False]
['text':'/ OPT_NOWIN    to skip setting window-local options','line_number':1413,'multiline':False]
['text':'/','line_number':1414,'multiline':False]
['text':'/ @param arg  option string (may be written to!)','line_number':1415,'multiline':False]
['text':'/','line_number':1416,'multiline':False]
['text':'/ @return  FAIL if an error is detected, OK otherwise','line_number':1417,'multiline':False]
['text':' already showed one value','line_number':1420,'multiline':False]
['text':' loop to process all options','line_number':1426,'multiline':False]
['text':' ":set all"  show all options.','line_number':1429,'multiline':False]
['text':' ":set all&" set all options to their default value.','line_number':1430,'multiline':False]
['text':' Only for :set command set global value of local options.','line_number':1434,'multiline':False]
['text':' remember for error message','line_number':1445,'multiline':False]
['text':' Advance to next argument.','line_number':1451,'multiline':False]
['text':' - skip until a blank found, taking care of backslashes','line_number':1452,'multiline':False]
['text':' - skip blanks','line_number':1453,'multiline':False]
['text':' - skip one "=val" argument (for hidden options ":set gfn =xx")','line_number':1454,'multiline':False]
['text':' append the argument with the error','line_number':1467,'multiline':False]
['text':' make sure all characters are printable','line_number':1473,'multiline':False]
['text':' wait_return() done later','line_number':1476,'multiline':False]
['text':' show error highlighted','line_number':1477,'multiline':False]
['text':' After displaying option values in silent mode.','line_number':1489,'multiline':False]
['text':' use os_msg(), not os_errmsg()','line_number':1491,'multiline':False]
['text':' use os_msg(), not os_errmsg()','line_number':1494,'multiline':False]
['text':'/ Convert a key name or string into a key value.','line_number':1500,'multiline':False]
['text':'/ Used for 'wildchar' and 'cedit' options.','line_number':1501,'multiline':False]
['text':' When changing 'title', 'titlestring', 'icon' or 'iconstring', call','line_number':1513,'multiline':False]
['text':' maketitle() to create and display it.','line_number':1514,'multiline':False]
['text':' When switching the title or icon off, call ui_set_{icon,title}(NULL) to get','line_number':1515,'multiline':False]
['text':' the old value back.','line_number':1516,'multiline':False]
['text':'/ set_options_bin -  called when 'bin' changes value.','line_number':1524,'multiline':False]
['text':'/','line_number':1525,'multiline':False]
['text':'/ @param opt_flags  OPT_LOCAL and/or OPT_GLOBAL','line_number':1526,'multiline':False]
['text':' The option values that are changed when 'bin' changes are','line_number':1529,'multiline':False]
['text':' copied when 'bin is set and restored when 'bin' is reset.','line_number':1530,'multiline':False]
['text':' switched on','line_number':1532,'multiline':False]
['text':' no automatic line wrap','line_number':1548,'multiline':False]
['text':' no automatic line wrap','line_number':1549,'multiline':False]
['text':' no modelines','line_number':1550,'multiline':False]
['text':' no expandtab','line_number':1551,'multiline':False]
['text':' needed when called for the "-b" argument','line_number':1558,'multiline':False]
['text':' switched off','line_number':1560,'multiline':False]
['text':' Remember where the dependent option were reset','line_number':1575,'multiline':False]
['text':'/ Find the parameter represented by the given character (eg ', :, ", or /),','line_number':1579,'multiline':False]
['text':'/ and return its associated value in the 'shada' string.','line_number':1580,'multiline':False]
['text':'/ Only works for number parameters, not for 'r' or 'n'.','line_number':1581,'multiline':False]
['text':'/ If the parameter is not specified in the string or there is no following','line_number':1582,'multiline':False]
['text':'/ number, return -1.','line_number':1583,'multiline':False]
['text':'/ Find the parameter represented by the given character (eg ''', ':', '"', or','line_number':1593,'multiline':False]
['text':'/ '/') in the 'shada' option and return a pointer to the string after it.','line_number':1594,'multiline':False]
['text':'/ Return NULL if the parameter is not specified in the string.','line_number':1595,'multiline':False]
['text':' 'n' is always the last one','line_number':1602,'multiline':False]
['text':' skip until next ','','line_number':1605,'multiline':False]
['text':' hit the end without finding parameter','line_number':1606,'multiline':False]
['text':'/ Expand environment variables for some string options.','line_number':1613,'multiline':False]
['text':'/ These string options cannot be indirect!','line_number':1614,'multiline':False]
['text':'/ If "val" is NULL expand the current value of the option.','line_number':1615,'multiline':False]
['text':'/ Return pointer to NameBuff, or NULL when not expanded.','line_number':1616,'multiline':False]
['text':' if option doesn't need expansion nothing to do','line_number':1619,'multiline':False]
['text':' If val is longer than MAXPATHL no meaningful expansion can be done,','line_number':1628,'multiline':False]
['text':' expand_env() would truncate the string.','line_number':1629,'multiline':False]
['text':' Expanding this with NameBuff, expand_env() must not be passed IObuff.','line_number':1634,'multiline':False]
['text':' Escape spaces when expanding 'tags', they are used to separate file','line_number':1635,'multiline':False]
['text':' names.','line_number':1636,'multiline':False]
['text':' For 'spellsuggest' expand after "file:".','line_number':1637,'multiline':False]
['text':' they are the same','line_number':1642,'multiline':False]
['text':'/ After setting various option values: recompute variables that depend on','line_number':1649,'multiline':False]
['text':'/ option values.','line_number':1650,'multiline':False]
['text':' initialize the table for 'iskeyword' et.al.','line_number':1653,'multiline':False]
['text':' set cedit_key','line_number':1662,'multiline':False]
['text':' initialize the table for 'breakat'.','line_number':1664,'multiline':False]
['text':' More side effects of setting options.','line_number':1669,'multiline':False]
['text':' Initialize the highlight_attr[] table.','line_number':1672,'multiline':False]
['text':' Parse default for 'fillchars'.','line_number':1675,'multiline':False]
['text':' Parse default for 'listchars'.','line_number':1678,'multiline':False]
['text':' Parse default for 'wildmode'.','line_number':1681,'multiline':False]
['text':'/ Check for string options that are NULL (normally only termcap options).','line_number':1689,'multiline':False]
['text':'/ Check if option was set insecurely.','line_number':1699,'multiline':False]
['text':'/','line_number':1700,'multiline':False]
['text':'/ @param  wp         Window.','line_number':1701,'multiline':False]
['text':'/ @param  opt_idx    Option index in options[] table.','line_number':1702,'multiline':False]
['text':'/ @param  opt_flags  Option flags.','line_number':1703,'multiline':False]
['text':'/','line_number':1704,'multiline':False]
['text':'/ @return  True if option was set from a modeline or in secure mode, false if it wasn't.','line_number':1705,'multiline':False]
['text':'/ Get a pointer to the flags used for the P_INSECURE flag of option','line_number':1714,'multiline':False]
['text':'/ "opt_idx".  For some local options a local flags field is used.','line_number':1715,'multiline':False]
['text':'/ NOTE: Caller must make sure that "wp" is set to the window from which','line_number':1716,'multiline':False]
['text':'/ the option is used.','line_number':1717,'multiline':False]
['text':' Nothing special, return global flags field.','line_number':1740,'multiline':False]
['text':'/ Redraw the window title and/or tab page text later.','line_number':1744,'multiline':False]
['text':'/ Return true if "val" is a valid name: only consists of alphanumeric ASCII','line_number':1751,'multiline':False]
['text':'/ characters or characters in "allowed".','line_number':1752,'multiline':False]
['text':'/ Handle setting `winhighlight' in window "wp"','line_number':1771,'multiline':False]
['text':' namespace already exist. invalidate existing items','line_number':1788,'multiline':False]
['text':'/ Get the script context of global option at index opt_idx.','line_number':1821,'multiline':False]
['text':'/ Set the script_ctx for an option, taking care of setting the buffer- or','line_number':1828,'multiline':False]
['text':'/ window-local value.','line_number':1829,'multiline':False]
['text':' Modeline already has the line number set.','line_number':1840,'multiline':False]
['text':' Remember where the option was set.  For local options need to do that','line_number':1845,'multiline':False]
['text':' in the buffer or window structure.','line_number':1846,'multiline':False]
['text':' also setting the "all buffers" value','line_number':1856,'multiline':False]
['text':'/ Apply the OptionSet autocommand.','line_number':1863,'multiline':False]
['text':' Don't do this while starting up, failure or recursively.','line_number':1867,'multiline':False]
['text':'/ Process the updated 'arabic' option value.','line_number':1903,'multiline':False]
['text':' 'arabic' is set, handle various sub-settings.','line_number':1910,'multiline':False]
['text':' set rightleft mode','line_number':1912,'multiline':False]
['text':' Enable Arabic shaping (major part of what Arabic requires)','line_number':1918,'multiline':False]
['text':' Arabic requires a utf-8 encoding, inform the user if it's not','line_number':1925,'multiline':False]
['text':' set.','line_number':1926,'multiline':False]
['text':' set 'delcombine'','line_number':1935,'multiline':False]
['text':' Force-set the necessary keymap for arabic.','line_number':1938,'multiline':False]
['text':' 'arabic' is reset, handle various sub-settings.','line_number':1941,'multiline':False]
['text':' reset rightleft mode','line_number':1943,'multiline':False]
['text':' 'arabicshape' isn't reset, it is a global option and','line_number':1949,'multiline':False]
['text':' another window may still need it "on".','line_number':1950,'multiline':False]
['text':' 'delcombine' isn't reset, it is a global option and another','line_number':1953,'multiline':False]
['text':' window may still want it "on".','line_number':1954,'multiline':False]
['text':' Revert to the default keymap','line_number':1956,'multiline':False]
['text':'/ Process the updated 'autochdir' option value.','line_number':1964,'multiline':False]
['text':' Change directories when the 'acd' option is set now.','line_number':1967,'multiline':False]
['text':'/ Process the updated 'binary' option value.','line_number':1972,'multiline':False]
['text':' when 'bin' is set also set some other options','line_number':1977,'multiline':False]
['text':'/ Called when the 'breakat' option changes value.','line_number':1984,'multiline':False]
['text':'/ Process the updated 'buflisted' option value.','line_number':2000,'multiline':False]
['text':' when 'buflisted' changes, trigger autocommands','line_number':2005,'multiline':False]
['text':'/ Process the new 'cmdheight' option value.','line_number':2013,'multiline':False]
['text':' if p_ch changed value, change the command line height','line_number':2025,'multiline':False]
['text':' Only compute the new window layout when startup has been','line_number':2026,'multiline':False]
['text':' completed. Otherwise the frame sizes may be wrong.','line_number':2027,'multiline':False]
['text':'/ Process the updated 'diff' option value.','line_number':2037,'multiline':False]
['text':' May add or remove the buffer from the list of diff buffers.','line_number':2041,'multiline':False]
['text':'/ Process the updated 'endoffile' or 'endofline' or 'fixendofline' or 'bomb'','line_number':2049,'multiline':False]
['text':'/ option value.','line_number':2050,'multiline':False]
['text':' redraw the window title and tab page text','line_number':2053,'multiline':False]
['text':'/ Process the updated 'equalalways' option value.','line_number':2058,'multiline':False]
['text':'/ Process the new 'foldlevel' option value.','line_number':2069,'multiline':False]
['text':'/ Process the new 'foldminlines' option value.','line_number':2076,'multiline':False]
['text':'/ Process the new 'foldnestmax' option value.','line_number':2084,'multiline':False]
['text':'/ Process the new 'helpheight' option value.','line_number':2094,'multiline':False]
['text':' Change window height NOW','line_number':2097,'multiline':False]
['text':'/ Process the updated 'hlsearch' option value.','line_number':2109,'multiline':False]
['text':' when 'hlsearch' is set or reset: reset no_hlsearch','line_number':2112,'multiline':False]
['text':'/ Process the updated 'ignorecase' option value.','line_number':2117,'multiline':False]
['text':' when 'ignorecase' is set or reset and 'hlsearch' is set, redraw','line_number':2120,'multiline':False]
['text':'/ Process the new 'iminset' option value.','line_number':2127,'multiline':False]
['text':' Show/unshow value of 'keymap' in status lines.','line_number':2131,'multiline':False]
['text':'/ Process the updated 'langnoremap' option value.','line_number':2137,'multiline':False]
['text':' 'langnoremap' -> !'langremap'','line_number':2140,'multiline':False]
['text':'/ Process the updated 'langremap' option value.','line_number':2145,'multiline':False]
['text':' 'langremap' -> !'langnoremap'','line_number':2148,'multiline':False]
['text':'/ Process the new 'laststatus' option value.','line_number':2153,'multiline':False]
['text':' When switching to global statusline, decrease topframe height','line_number':2159,'multiline':False]
['text':' Also clear the cmdline to remove the ruler if there is one','line_number':2160,'multiline':False]
['text':' When switching from global statusline, increase height of topframe by STATUS_HEIGHT','line_number':2166,'multiline':False]
['text':' in order to to re-add the space that was previously taken by the global statusline','line_number':2167,'multiline':False]
['text':' (re)set last window status line.','line_number':2173,'multiline':False]
['text':'/ Process the updated 'lisp' option value.','line_number':2177,'multiline':False]
['text':' When 'lisp' option changes include/exclude '-' in keyword characters.','line_number':2181,'multiline':False]
['text':' ignore errors','line_number':2182,'multiline':False]
['text':'/ Process the updated 'modifiable' option value.','line_number':2186,'multiline':False]
['text':' when 'modifiable' is changed, redraw the window title','line_number':2189,'multiline':False]
['text':'/ Process the updated 'modified' option value.','line_number':2195,'multiline':False]
['text':' Buffer is unchanged','line_number':2200,'multiline':False]
['text':'/ Process the updated 'number' or 'relativenumber' option value.','line_number':2207,'multiline':False]
['text':' When 'relativenumber'/'number' is changed and 'statuscolumn' is set, reset width.','line_number':2212,'multiline':False]
['text':'/ Process the new 'numberwidth' option value.','line_number':2219,'multiline':False]
['text':' trigger a redraw','line_number':2223,'multiline':False]
['text':'/ Process the updated 'paste' option value.','line_number':2228,'multiline':False]
['text':' Paste switched from off to on.','line_number':2238,'multiline':False]
['text':' Save the current values, so they can be restored later.','line_number':2239,'multiline':False]
['text':' save options for each buffer','line_number':2241,'multiline':False]
['text':' save global options','line_number':2256,'multiline':False]
['text':' save global values for local buffer options','line_number':2261,'multiline':False]
['text':' Always set the option values, also when 'paste' is set when it is','line_number':2273,'multiline':False]
['text':' already on.','line_number':2274,'multiline':False]
['text':' set options for each buffer','line_number':2275,'multiline':False]
['text':' textwidth is 0','line_number':2277,'multiline':False]
['text':' wrapmargin is 0','line_number':2278,'multiline':False]
['text':' softtabstop is 0','line_number':2279,'multiline':False]
['text':' no auto-indent','line_number':2280,'multiline':False]
['text':' no expandtab','line_number':2281,'multiline':False]
['text':' set global options','line_number':2289,'multiline':False]
['text':' no showmatch','line_number':2290,'multiline':False]
['text':' no smarttab','line_number':2291,'multiline':False]
['text':' redraw to remove the ruler','line_number':2293,'multiline':False]
['text':' no ruler','line_number':2295,'multiline':False]
['text':' no reverse insert','line_number':2296,'multiline':False]
['text':' set global values for local buffer options','line_number':2297,'multiline':False]
['text':' Paste switched from on to off: Restore saved values.','line_number':2308,'multiline':False]
['text':' restore options for each buffer','line_number':2310,'multiline':False]
['text':' restore global options','line_number':2329,'multiline':False]
['text':' redraw to draw the ruler','line_number':2333,'multiline':False]
['text':' set global values for local buffer options','line_number':2337,'multiline':False]
['text':' Remember where the dependent options were reset','line_number':2351,'multiline':False]
['text':'/ Process the updated 'previewwindow' option value.','line_number':2357,'multiline':False]
['text':' There can be only one window with 'previewwindow' set.','line_number':2366,'multiline':False]
['text':'/ Process the new 'pumblend' option value.','line_number':2377,'multiline':False]
['text':'/ Process the updated 'readonly' option value.','line_number':2390,'multiline':False]
['text':' when 'readonly' is reset globally, also reset readonlymode','line_number':2393,'multiline':False]
['text':' when 'readonly' is set may give W10 again','line_number':2398,'multiline':False]
['text':'/ Process the new 'scrollback' option value.','line_number':2408,'multiline':False]
['text':' Force the scrollback to take immediate effect only when decreasing it.','line_number':2416,'multiline':False]
['text':'/ Process the updated 'scrollbind' option value.','line_number':2422,'multiline':False]
['text':' when 'scrollbind' is set: snapshot the current position to avoid a jump','line_number':2427,'multiline':False]
['text':' at the end of normal_cmd()','line_number':2428,'multiline':False]
['text':'/ Process the updated 'shellslash' option value.','line_number':2438,'multiline':False]
['text':' need to adjust the file name arguments and buffer names.','line_number':2451,'multiline':False]
['text':'/ Process the new 'shiftwidth' or the 'tabstop' option value.','line_number':2459,'multiline':False]
['text':' When 'shiftwidth' changes, or it's zero and 'tabstop' changes:','line_number':2469,'multiline':False]
['text':' parse 'cinoptions'.','line_number':2470,'multiline':False]
['text':'/ Process the new 'showtabline' option value.','line_number':2478,'multiline':False]
['text':' (re)set tab page line','line_number':2481,'multiline':False]
['text':' recompute window positions and heights','line_number':2482,'multiline':False]
['text':'/ Process the updated 'smoothscroll' option value.','line_number':2486,'multiline':False]
['text':'/ Process the updated 'spell' option value.','line_number':2497,'multiline':False]
['text':'/ Process the updated 'swapfile' option value.','line_number':2508,'multiline':False]
['text':' when 'swf' is set, create swapfile, when reset remove swapfile','line_number':2512,'multiline':False]
['text':' create the swap file','line_number':2514,'multiline':False]
['text':' no need to reset curbuf->b_may_swap, ml_open_file() will check','line_number':2516,'multiline':False]
['text':' buf->b_p_swf','line_number':2517,'multiline':False]
['text':' remove the swap file','line_number':2518,'multiline':False]
['text':'/ Process the new 'textwidth' option value.','line_number':2523,'multiline':False]
['text':'/ Process the updated 'title' or the 'icon' option value.','line_number':2533,'multiline':False]
['text':' when 'title' changed, may need to change the title; same for 'icon'','line_number':2536,'multiline':False]
['text':'/ Process the new 'titlelen' option value.','line_number':2541,'multiline':False]
['text':' if 'titlelen' has changed, redraw the title','line_number':2546,'multiline':False]
['text':'/ Process the updated 'undofile' option value.','line_number':2554,'multiline':False]
['text':' Only take action when the option was set.','line_number':2557,'multiline':False]
['text':' When reset we do not delete the undo file, the option may be set again','line_number':2562,'multiline':False]
['text':' without making any changes in between.','line_number':2563,'multiline':False]
['text':' When 'undofile' is set globally: for every buffer, otherwise','line_number':2567,'multiline':False]
['text':' only for the current buffer: Try to read in the undofile,','line_number':2568,'multiline':False]
['text':' if one exists, the buffer wasn't changed and the buffer was','line_number':2569,'multiline':False]
['text':' loaded','line_number':2570,'multiline':False]
['text':'/ Process the new global 'undolevels' option value.','line_number':2582,'multiline':False]
['text':' sync undo before 'undolevels' changes','line_number':2585,'multiline':False]
['text':' use the old value, otherwise u_sync() may not work properly','line_number':2586,'multiline':False]
['text':'/ Process the new buffer local 'undolevels' option value.','line_number':2593,'multiline':False]
['text':' use the old value, otherwise u_sync() may not work properly','line_number':2596,'multiline':False]
['text':'/ Process the new 'undolevels' option value.','line_number':2603,'multiline':False]
['text':' global 'undolevels'','line_number':2609,'multiline':False]
['text':' buffer local 'undolevels'','line_number':2611,'multiline':False]
['text':'/ Process the new 'updatecount' option value.','line_number':2618,'multiline':False]
['text':' when 'updatecount' changes from zero to non-zero, open swap files','line_number':2623,'multiline':False]
['text':'/ Process the new 'wildchar' / 'wildcharm' option value.','line_number':2631,'multiline':False]
['text':' Don't allow key values that wouldn't work as wildchar.','line_number':2636,'multiline':False]
['text':'/ Process the new 'winblend' option value.','line_number':2644,'multiline':False]
['text':'/ Process the new 'window' option value.','line_number':2660,'multiline':False]
['text':'/ Process the new 'winheight' value.','line_number':2671,'multiline':False]
['text':' Change window height NOW','line_number':2674,'multiline':False]
['text':'/ Process the new 'winwidth' option value.','line_number':2685,'multiline':False]
['text':'/ Process the updated 'wrap' option value.','line_number':2696,'multiline':False]
['text':' Set w_leftcol or w_skipcol to zero.','line_number':2700,'multiline':False]
['text':' When 'syntax' is set, load the syntax of that name','line_number':2710,'multiline':False]
['text':' Only pass true for "force" when the value changed or not used','line_number':2716,'multiline':False]
['text':' recursively, to avoid endless recurrence.','line_number':2717,'multiline':False]
['text':' Skip the first name if it is "cjk".','line_number':2729,'multiline':False]
['text':' Source the spell/LANG.{vim,lua} in 'runtimepath'.','line_number':2734,'multiline':False]
['text':' They could set 'spellcapcheck' depending on the language.','line_number':2735,'multiline':False]
['text':' Use the first name in 'spelllang' up to '_region' or','line_number':2736,'multiline':False]
['text':' '.encoding'.','line_number':2737,'multiline':False]
['text':'/ Check the bounds of numeric options.','line_number':2750,'multiline':False]
['text':' remember old Rows','line_number':2754,'multiline':False]
['text':' Check the (new) bounds for Rows and Columns here.','line_number':2755,'multiline':False]
['text':' True max size is defined by check_screensize()','line_number':2771,'multiline':False]
['text':' If the screen (shell) height has been changed, assume it is the','line_number':2775,'multiline':False]
['text':' physical screenheight.','line_number':2776,'multiline':False]
['text':' Changing the screen size is not allowed while updating the screen.','line_number':2778,'multiline':False]
['text':' TODO(bfredl): is this branch ever needed?','line_number':2784,'multiline':False]
['text':' Postpone the resizing; check the size and cmdline position for','line_number':2785,'multiline':False]
['text':' messages.','line_number':2786,'multiline':False]
['text':' If 'scroll' became invalid because of a side effect silently adjust it.','line_number':2809,'multiline':False]
['text':' curwin->w_p_scr > curwin->w_height','line_number':2811,'multiline':False]
['text':' Rows changed, just adjust p_sj','line_number':2816,'multiline':False]
['text':'/ Options that need some validation.','line_number':2827,'multiline':False]
['text':' Many number options assume their value is in the signed int range.','line_number':2832,'multiline':False]
['text':'/ Called after an option changed: check if something needs to be redrawn.','line_number':2978,'multiline':False]
['text':' Careful: P_RALL is a combination of other P_ flags','line_number':2981,'multiline':False]
['text':' mark all status lines and window bars dirty','line_number':2984,'multiline':False]
['text':' mark tablines dirty','line_number':2988,'multiline':False]
['text':'/ Find index for named option','line_number':3011,'multiline':False]
['text':'/','line_number':3012,'multiline':False]
['text':'/ @param[in]  arg  Option to find index for.','line_number':3013,'multiline':False]
['text':'/ @param[in]  len  Length of the option.','line_number':3014,'multiline':False]
['text':'/','line_number':3015,'multiline':False]
['text':'/ @return Index of the option or kOptInvalid if option was not found.','line_number':3016,'multiline':False]
['text':' quick access table','line_number':3020,'multiline':False]
['text':' For first call: Initialize the quick-access table.','line_number':3022,'multiline':False]
['text':' It contains the index for the first option that starts with a certain','line_number':3023,'multiline':False]
['text':' letter.  There are 26 letters, plus the first "t_" option.','line_number':3024,'multiline':False]
['text':' Check for name starting with an illegal character.','line_number':3041,'multiline':False]
['text':' Match full name','line_number':3053,'multiline':False]
['text':' Break if first character no longer matches.','line_number':3057,'multiline':False]
['text':' Match short name','line_number':3069,'multiline':False]
['text':' Nvim: handle option aliases.','line_number':3080,'multiline':False]
['text':'/ Get value of TTY option.','line_number':3099,'multiline':False]
['text':'/','line_number':3100,'multiline':False]
['text':'/ @param  name  Name of TTY option.','line_number':3101,'multiline':False]
['text':'/','line_number':3102,'multiline':False]
['text':'/ @return [allocated] TTY option value. Returns NIL_OPTVAL if option isn't a TTY option.','line_number':3103,'multiline':False]
['text':' XXX: All other t_* options were removed in 3baba1e7.','line_number':3120,'multiline':False]
['text':'/ Find index for an option','line_number':3148,'multiline':False]
['text':'/','line_number':3149,'multiline':False]
['text':'/ @param[in]  arg  Option name.','line_number':3150,'multiline':False]
['text':'/','line_number':3151,'multiline':False]
['text':'/ @return Option index or kOptInvalid if option was not found.','line_number':3152,'multiline':False]
['text':'/ Free an allocated OptVal.','line_number':3159,'multiline':False]
['text':' Don't free empty string option','line_number':3168,'multiline':False]
['text':'/ Copy an OptVal.','line_number':3176,'multiline':False]
['text':'/ Check if two option values are equal.','line_number':3190,'multiline':False]
['text':'/ Match type of OptVal with the type of the target option. Returns true if the types match and','line_number':3211,'multiline':False]
['text':'/ false otherwise.','line_number':3212,'multiline':False]
['text':'/ Create OptVal from var pointer.','line_number':3231,'multiline':False]
['text':'/','line_number':3232,'multiline':False]
['text':'/ @param       opt_idx  Option index in options[] table.','line_number':3233,'multiline':False]
['text':'/ @param[out]  varp     Pointer to option variable.','line_number':3234,'multiline':False]
['text':' Special case: 'modified' is b_changed, but we also want to consider it set when 'ff' or 'fenc'','line_number':3237,'multiline':False]
['text':' changed.','line_number':3238,'multiline':False]
['text':'/ Set option var pointer value from Optval.','line_number':3269,'multiline':False]
['text':'/','line_number':3270,'multiline':False]
['text':'/ @param       opt_idx      Option index in options[] table.','line_number':3271,'multiline':False]
['text':'/ @param[out]  varp         Pointer to option variable.','line_number':3272,'multiline':False]
['text':'/ @param[in]   value        New option value.','line_number':3273,'multiline':False]
['text':'/ @param       free_oldval  Free old value.','line_number':3274,'multiline':False]
['text':'/ Return C-string representation of OptVal. Caller must free the returned C-string.','line_number':3300,'multiline':False]
['text':'/ Convert an OptVal to an API Object.','line_number':3322,'multiline':False]
['text':'/ Convert an API Object to an OptVal.','line_number':3345,'multiline':False]
['text':'/ Unset the local value of an option. The exact semantics of this depend on the option.','line_number':3364,'multiline':False]
['text':'/ TODO(famiu): Remove this once we have a dedicated OptVal type for unset local options.','line_number':3365,'multiline':False]
['text':'/','line_number':3366,'multiline':False]
['text':'/ @param      opt_idx  Option index in options[] table.','line_number':3367,'multiline':False]
['text':'/ @param[in]  varp  Pointer to option variable.','line_number':3368,'multiline':False]
['text':'/','line_number':3369,'multiline':False]
['text':'/ @return [allocated] Option value equal to the unset value for the option.','line_number':3370,'multiline':False]
['text':' For global-local options, use the unset value of the local value.','line_number':3374,'multiline':False]
['text':' String global-local options always use an empty string for the unset value.','line_number':3376,'multiline':False]
['text':' This should never happen.','line_number':3388,'multiline':False]
['text':' For options that aren't global-local, just set the local value to the global value.','line_number':3392,'multiline':False]
['text':'/ Get an allocated string containing a list of valid types for an option.','line_number':3396,'multiline':False]
['text':'/ For options with a singular type, it returns the name of the type. For options with multiple','line_number':3397,'multiline':False]
['text':'/ possible types, it returns a slash separated list of types. For example, if an option can be a','line_number':3398,'multiline':False]
['text':'/ number, boolean or string, the function returns "Number/Boolean/String"','line_number':3399,'multiline':False]
['text':' Ensure that the string is NUL-terminated.','line_number':3432,'multiline':False]
['text':'/ Check if option is hidden.','line_number':3439,'multiline':False]
['text':'/','line_number':3440,'multiline':False]
['text':'/ @param  opt_idx  Option index in options[] table.','line_number':3441,'multiline':False]
['text':'/','line_number':3442,'multiline':False]
['text':'/ @return  True if option is hidden, false otherwise. Returns false if option name is invalid.','line_number':3443,'multiline':False]
['text':'/ Get option flags.','line_number':3449,'multiline':False]
['text':'/','line_number':3450,'multiline':False]
['text':'/ @param  opt_idx  Option index in options[] table.','line_number':3451,'multiline':False]
['text':'/','line_number':3452,'multiline':False]
['text':'/ @return  Option flags. Returns 0 for invalid option name.','line_number':3453,'multiline':False]
['text':'/ Gets the value for an option.','line_number':3459,'multiline':False]
['text':'/','line_number':3460,'multiline':False]
['text':'/ @param       opt_idx  Option index in options[] table.','line_number':3461,'multiline':False]
['text':'/ @param[in]   scope    Option scope (can be OPT_LOCAL, OPT_GLOBAL or a combination).','line_number':3462,'multiline':False]
['text':'/','line_number':3463,'multiline':False]
['text':'/ @return [allocated] Option value. Returns NIL_OPTVAL for invalid option index.','line_number':3464,'multiline':False]
['text':' option not in the options[] table.','line_number':3467,'multiline':False]
['text':'/ Return information for option at 'opt_idx'','line_number':3477,'multiline':False]
['text':'/ Check if local value of global-local option is unset for current buffer / window.','line_number':3484,'multiline':False]
['text':'/ Always returns false for options that aren't global-local.','line_number':3485,'multiline':False]
['text':'/','line_number':3486,'multiline':False]
['text':'/ TODO(famiu): Remove this once we have an OptVal type to indicate an unset local value.','line_number':3487,'multiline':False]
['text':' Local value of option that isn't global-local is always considered set.','line_number':3490,'multiline':False]
['text':' Get pointer to local value in varp_local, and a pointer to the currently used value in varp.','line_number':3495,'multiline':False]
['text':' If the local value is the one currently being used, that indicates that it's set.','line_number':3496,'multiline':False]
['text':' Otherwise it indicates the local value is unset.','line_number':3497,'multiline':False]
['text':'/ Handle side-effects of setting an option.','line_number':3504,'multiline':False]
['text':'/','line_number':3505,'multiline':False]
['text':'/ @param       opt_idx         Index in options[] table. Must not be kOptInvalid.','line_number':3506,'multiline':False]
['text':'/ @param[in]   varp            Option variable pointer, cannot be NULL.','line_number':3507,'multiline':False]
['text':'/ @param       old_value       Old option value.','line_number':3508,'multiline':False]
['text':'/ @param       new_value       New option value.','line_number':3509,'multiline':False]
['text':'/ @param       opt_flags       Option flags.','line_number':3510,'multiline':False]
['text':'/ @param[out]  value_checked   Value was checked to be safe, no need to set P_INSECURE.','line_number':3511,'multiline':False]
['text':'/ @param       value_replaced  Value was replaced completely.','line_number':3512,'multiline':False]
['text':'/ @param[out]  errbuf          Buffer for error message.','line_number':3513,'multiline':False]
['text':'/ @param       errbuflen       Length of error buffer.','line_number':3514,'multiline':False]
['text':'/','line_number':3515,'multiline':False]
['text':'/ @return  NULL on success, an untranslated error message on error.','line_number':3516,'multiline':False]
['text':' Disallow changing immutable options.','line_number':3542,'multiline':False]
['text':' Disallow changing some options from secure mode.','line_number':3546,'multiline':False]
['text':' Check for a "normal" directory or file name in some string options.','line_number':3550,'multiline':False]
['text':' Invoke the option specific callback function to validate and apply the new value.','line_number':3555,'multiline':False]
['text':' The 'filetype' and 'syntax' option callback functions may change the os_value_changed field.','line_number':3557,'multiline':False]
['text':' The 'keymap', 'filetype' and 'syntax' option callback functions may change the','line_number':3559,'multiline':False]
['text':' os_value_checked field.','line_number':3560,'multiline':False]
['text':' The 'isident', 'iskeyword', 'isprint' and 'isfname' options may change the character table.','line_number':3562,'multiline':False]
['text':' On failure, this needs to be restored.','line_number':3563,'multiline':False]
['text':' If an error is detected, restore the previous value and don't do any further processing.','line_number':3567,'multiline':False]
['text':' When resetting some values, need to act on it.','line_number':3570,'multiline':False]
['text':' Unset new_value as it is no longer valid.','line_number':3575,'multiline':False]
['text':' NOLINT(clang-analyzer-deadcode.DeadStores)','line_number':3576,'multiline':False]
['text':' Re-assign the new value as its value may get freed or modified by the option callback.','line_number':3580,'multiline':False]
['text':' Remember where the option was set.','line_number':3583,'multiline':False]
['text':' Free options that are in allocated memory.','line_number':3585,'multiline':False]
['text':' Use "free_oldval", because recursiveness may change the flags (esp. init_highlight()).','line_number':3586,'multiline':False]
['text':' Check the bound for num options.','line_number':3592,'multiline':False]
['text':' Re-assign new_value because the new value was modified by the bound check.','line_number':3596,'multiline':False]
['text':' Global option with local value set to use global value.','line_number':3601,'multiline':False]
['text':' Free the local value and clear it.','line_number':3602,'multiline':False]
['text':' May set global value for local option.','line_number':3607,'multiline':False]
['text':' Trigger the autocommand only after setting the flags.','line_number':3612,'multiline':False]
['text':' 'filetype' is set, trigger the FileType autocommand','line_number':3616,'multiline':False]
['text':' Skip this when called from a modeline','line_number':3617,'multiline':False]
['text':' Force autocmd when the filetype was changed','line_number':3618,'multiline':False]
['text':' In case 'columns' or 'ls' changed.','line_number':3626,'multiline':False]
['text':' in case 'mouse' changed','line_number':3630,'multiline':False]
['text':' Changing Formatlistpattern when briopt includes the list setting:','line_number':3632,'multiline':False]
['text':' redraw','line_number':3633,'multiline':False]
['text':' add / remove window bars for 'winbar'','line_number':3636,'multiline':False]
['text':' When an option is set in the sandbox, from a modeline or in secure mode set the P_INSECURE','line_number':3650,'multiline':False]
['text':' flag.  Otherwise, if a new value is stored reset the flag.','line_number':3651,'multiline':False]
['text':'/ Set the value of an option using an OptVal.','line_number':3662,'multiline':False]
['text':'/','line_number':3663,'multiline':False]
['text':'/ @param       opt_idx         Index in options[] table. Must not be kOptInvalid.','line_number':3664,'multiline':False]
['text':'/ @param[in]   varp            Option variable pointer, cannot be NULL.','line_number':3665,'multiline':False]
['text':'/ @param       value           New option value. Might get freed.','line_number':3666,'multiline':False]
['text':'/ @param       opt_flags       Option flags.','line_number':3667,'multiline':False]
['text':'/ @param       value_replaced  Value was replaced completely.','line_number':3668,'multiline':False]
['text':'/ @param[out]  errbuf          Buffer for error message.','line_number':3669,'multiline':False]
['text':'/ @param       errbuflen       Length of error buffer.','line_number':3670,'multiline':False]
['text':'/','line_number':3671,'multiline':False]
['text':'/ @return  NULL on success, an untranslated error message on error.','line_number':3672,'multiline':False]
['text':' Don't try to unset local value if scope is global.','line_number':3691,'multiline':False]
['text':' TODO(famiu): Change this to forbid changing all non-local scopes when the API scope bug is','line_number':3692,'multiline':False]
['text':' fixed.','line_number':3693,'multiline':False]
['text':' When using ":set opt=val" for a global option with a local value the local value will be reset,','line_number':3714,'multiline':False]
['text':' use the global value here.','line_number':3715,'multiline':False]
['text':' Save the local and global values before changing anything. This is needed as for a global-only','line_number':3724,'multiline':False]
['text':' option setting the "local value" in fact sets the global value (since there is only one value).','line_number':3725,'multiline':False]
['text':'','line_number':3726,'multiline':False]
['text':' TODO(famiu): This needs to be changed to use the current type of the old value instead of','line_number':3727,'multiline':False]
['text':' value.type, when multi-type options are added.','line_number':3728,'multiline':False]
['text':' If local value of global-local option is unset, use global value as local value.','line_number':3733,'multiline':False]
['text':' Value that's actually being used.','line_number':3739,'multiline':False]
['text':' For local scope of a global-local option, it is equal to the global value.','line_number':3740,'multiline':False]
['text':' In every other case, it is the same as old_value.','line_number':3741,'multiline':False]
['text':' Don't change the value and return early if validation failed.','line_number':3748,'multiline':False]
['text':' New value (and varp) may become invalid if the buffer is closed by autocommands.','line_number':3759,'multiline':False]
['text':' When an option is set in the sandbox, from a modeline or in secure mode, then deal with side','line_number':3765,'multiline':False]
['text':' effects in secure mode. Also when the value was set with the P_INSECURE flag and is not','line_number':3766,'multiline':False]
['text':' completely replaced.','line_number':3767,'multiline':False]
['text':' Calculate saved_new_value again as its value might be changed by bound checks.','line_number':3783,'multiline':False]
['text':' NOTE: Currently there are no buffer/window local UI options, but if there ever are buffer','line_number':3784,'multiline':False]
['text':' or window local UI options added in the future, varp might become invalid if the buffer or','line_number':3785,'multiline':False]
['text':' window is closed during an autocommand, and a check would have to be added for it.','line_number':3786,'multiline':False]
['text':' Free copied values as they are not needed anymore','line_number':3793,'multiline':False]
['text':'/ Set the value of an option.','line_number':3804,'multiline':False]
['text':'/','line_number':3805,'multiline':False]
['text':'/ @param      opt_idx    Index in options[] table. Must not be kOptInvalid.','line_number':3806,'multiline':False]
['text':'/ @param[in]  value      Option value. If NIL_OPTVAL, the option value is cleared.','line_number':3807,'multiline':False]
['text':'/ @param[in]  opt_flags  Flags: OPT_LOCAL, OPT_GLOBAL, or 0 (both).','line_number':3808,'multiline':False]
['text':'/','line_number':3809,'multiline':False]
['text':'/ @return  NULL on success, an untranslated error message on error.','line_number':3810,'multiline':False]
['text':' Disallow changing some options in the sandbox','line_number':3818,'multiline':False]
['text':' hidden option is not changed','line_number':3825,'multiline':False]
['text':'/ Set the value of an option. Supports TTY options, unlike set_option_value().','line_number':3832,'multiline':False]
['text':'/','line_number':3833,'multiline':False]
['text':'/ @param      name       Option name. Used for error messages and for setting TTY options.','line_number':3834,'multiline':False]
['text':'/ @param      opt_idx    Option indx in options[] table. If less than zero, `name` is used to','line_number':3835,'multiline':False]
['text':'/                        check if the option is a TTY option, and an error is shown if it's not.','line_number':3836,'multiline':False]
['text':'/                        If the option is a TTY option, the function fails silently.','line_number':3837,'multiline':False]
['text':'/ @param      value      Option value. If NIL_OPTVAL, the option value is cleared.','line_number':3838,'multiline':False]
['text':'/ @param[in]  opt_flags  Flags: OPT_LOCAL, OPT_GLOBAL, or 0 (both).','line_number':3839,'multiline':False]
['text':'/','line_number':3840,'multiline':False]
['text':'/ @return  NULL on success, an untranslated error message on error.','line_number':3841,'multiline':False]
['text':' Fail silently; many old vimrcs set t_xx options.','line_number':3850,'multiline':False]
['text':'/ Call set_option_value() and when an error is returned, report it.','line_number':3860,'multiline':False]
['text':'/','line_number':3861,'multiline':False]
['text':'/ @param  opt_idx    Option index in options[] table.','line_number':3862,'multiline':False]
['text':'/ @param  value      Option value. If NIL_OPTVAL, the option value is cleared.','line_number':3863,'multiline':False]
['text':'/ @param  opt_flags  OPT_LOCAL or 0 (both)','line_number':3864,'multiline':False]
['text':' Translate a string like "t_xx", "<t_xx>" or "<S-Tab>" to a key number.','line_number':3874,'multiline':False]
['text':' When "has_lt" is true there is a '<' before "*arg_arg".','line_number':3875,'multiline':False]
['text':' Returns 0 when the key is not recognized.','line_number':3876,'multiline':False]
['text':' Don't use get_special_key_code() for t_xx, we don't want it to call','line_number':3882,'multiline':False]
['text':' add_termcap_entry().','line_number':3883,'multiline':False]
['text':' put arg at the '<'','line_number':3887,'multiline':False]
['text':' can't handle modifiers here','line_number':3891,'multiline':False]
['text':'/ if 'all' == false: show changed options','line_number':3903,'multiline':False]
['text':'/ if 'all' == true: show all normal options','line_number':3904,'multiline':False]
['text':'/','line_number':3905,'multiline':False]
['text':'/ @param opt_flags  OPT_LOCAL and/or OPT_GLOBAL','line_number':3906,'multiline':False]
['text':' Highlight title','line_number':3914,'multiline':False]
['text':' Do the loop two times:','line_number':3923,'multiline':False]
['text':' 1. display the short items','line_number':3924,'multiline':False]
['text':' 2. display the long items (only strings and numbers)','line_number':3925,'multiline':False]
['text':' When "opt_flags" has OPT_ONECOLUMN do everything in run 2.','line_number':3926,'multiline':False]
['text':' collect the items in items[]','line_number':3928,'multiline':False]
['text':' apply :filter /pat/','line_number':3933,'multiline':False]
['text':' a toggle option fits always','line_number':3951,'multiline':False]
['text':' display the items','line_number':3965,'multiline':False]
['text':' run == 2','line_number':3976,'multiline':False]
['text':' go to next line','line_number':3980,'multiline':False]
['text':' 'q' typed in more','line_number':3981,'multiline':False]
['text':' make columns','line_number':3986,'multiline':False]
['text':'/ Return true if option "p" has its default value.','line_number':3996,'multiline':False]
['text':' hidden option is always at default','line_number':4000,'multiline':False]
['text':' P_STRING','line_number':4008,'multiline':False]
['text':'/ Send update to UIs with values of UI relevant options','line_number':4012,'multiline':False]
['text':' cstr_as_string handles NULL string','line_number':4028,'multiline':False]
['text':'/ showoneopt: show the value of one option','line_number':4038,'multiline':False]
['text':'/ must not be called with a hidden option!','line_number':4039,'multiline':False]
['text':'/','line_number':4040,'multiline':False]
['text':'/ @param opt_flags  OPT_LOCAL or OPT_GLOBAL','line_number':4041,'multiline':False]
['text':' use os_msg(), not os_errmsg()','line_number':4047,'multiline':False]
['text':' for 'modified' we also need to check if 'ff' or 'fenc' changed.','line_number':4051,'multiline':False]
['text':' put value string in NameBuff','line_number':4063,'multiline':False]
['text':'/ Write modified options as ":set" commands to a file.','line_number':4072,'multiline':False]
['text':'/','line_number':4073,'multiline':False]
['text':'/ There are three values for "opt_flags":','line_number':4074,'multiline':False]
['text':'/ OPT_GLOBAL:         Write global option values and fresh values of','line_number':4075,'multiline':False]
['text':'/             buffer-local options (used for start of a session','line_number':4076,'multiline':False]
['text':'/             file).','line_number':4077,'multiline':False]
['text':'/ OPT_GLOBAL + OPT_LOCAL: Idem, add fresh values of window-local options for','line_number':4078,'multiline':False]
['text':'/             curwin (used for a vimrc file).','line_number':4079,'multiline':False]
['text':'/ OPT_LOCAL:          Write buffer-local option values for curbuf, fresh','line_number':4080,'multiline':False]
['text':'/             and local values for window-local options of','line_number':4081,'multiline':False]
['text':'/             curwin.  Local values are also written when at the','line_number':4082,'multiline':False]
['text':'/             default value, because a modeline or autocommand','line_number':4083,'multiline':False]
['text':'/             may have set them when doing ":edit file" and the','line_number':4084,'multiline':False]
['text':'/             user has set them back at the default or fresh','line_number':4085,'multiline':False]
['text':'/             value.','line_number':4086,'multiline':False]
['text':'/             When "local_only" is true, don't write fresh','line_number':4087,'multiline':False]
['text':'/             values, only local values (for ":mkview").','line_number':4088,'multiline':False]
['text':'/ (fresh value = value used for a new buffer or window for a local option).','line_number':4089,'multiline':False]
['text':'/','line_number':4090,'multiline':False]
['text':'/ Return FAIL on error, OK otherwise.','line_number':4091,'multiline':False]
['text':' Some options are never written:','line_number':4094,'multiline':False]
['text':' - Options that don't have a default (terminal name, columns, lines).','line_number':4095,'multiline':False]
['text':' - Terminal options.','line_number':4096,'multiline':False]
['text':' - Hidden options.','line_number':4097,'multiline':False]
['text':'','line_number':4098,'multiline':False]
['text':' Do the loop over "options[]" twice: once for options with the','line_number':4099,'multiline':False]
['text':' P_PRI_MKRC flag and once without.','line_number':4100,'multiline':False]
['text':' skip global option when only doing locals','line_number':4108,'multiline':False]
['text':' Do not store options like 'bufhidden' and 'syntax' in a vimrc','line_number':4113,'multiline':False]
['text':' file, they are always buffer-specific.','line_number':4114,'multiline':False]
['text':' currently used value','line_number':4119,'multiline':False]
['text':' Hidden options are never written.','line_number':4120,'multiline':False]
['text':' Global values are only written when not at the default value.','line_number':4124,'multiline':False]
['text':' fresh value','line_number':4135,'multiline':False]
['text':' skip window-local option when only doing globals','line_number':4138,'multiline':False]
['text':' When fresh value of window-local option is not at the','line_number':4142,'multiline':False]
['text':' default, need to write it too.','line_number':4143,'multiline':False]
['text':' local value','line_number':4145,'multiline':False]
['text':' Round 1: fresh value for window-local options.','line_number':4155,'multiline':False]
['text':' Round 2: other values','line_number':4156,'multiline':False]
['text':' P_STRING','line_number':4173,'multiline':False]
['text':' Don't set 'syntax' and 'filetype' again if the value is','line_number':4176,'multiline':False]
['text':' already right, avoids reloading the syntax file.','line_number':4177,'multiline':False]
['text':'/ Generate set commands for the local fold options only.  Used when','line_number':4202,'multiline':False]
['text':'/ 'sessionoptions' or 'viewoptions' contains "folds" but not "options".','line_number':4203,'multiline':False]
['text':' replace home directory in the whole option value into "buf"','line_number':4233,'multiline':False]
['text':' If the option value is longer than MAXPATHL, we need to append','line_number':4237,'multiline':False]
['text':' each comma separated part of the option separately, so that it','line_number':4238,'multiline':False]
['text':' can be expanded when read back.','line_number':4239,'multiline':False]
['text':' write line break to clear the option, e.g. ':set rtp='','line_number':4244,'multiline':False]
['text':' for each comma separated option part, append value to','line_number':4250,'multiline':False]
['text':' the option, :set rtp+=value','line_number':4251,'multiline':False]
['text':' print 'wildchar' and 'wildcharm' as a key name','line_number':4290,'multiline':False]
['text':' global/local option using global value','line_number':4305,'multiline':False]
['text':' "cannot happen"','line_number':4382,'multiline':False]
['text':'/ Get pointer to option variable, depending on local or global scope.','line_number':4387,'multiline':False]
['text':'/','line_number':4388,'multiline':False]
['text':'/ @param scope  can be OPT_LOCAL, OPT_GLOBAL or a combination.','line_number':4389,'multiline':False]
['text':'/ Get pointer to option variable at 'opt_idx', depending on local or global','line_number':4395,'multiline':False]
['text':'/ scope.','line_number':4396,'multiline':False]
['text':' hidden option, always return NULL','line_number':4404,'multiline':False]
['text':' global option with local value: use local value if it's been set','line_number':4413,'multiline':False]
['text':' always return a valid pointer to avoid a crash!','line_number':4687,'multiline':False]
['text':'/ Get pointer to option variable.','line_number':4691,'multiline':False]
['text':'/ Get the value of 'equalprg', either the buffer-local one or the global one.','line_number':4697,'multiline':False]
['text':'/ Copy options from one window to another.','line_number':4706,'multiline':False]
['text':'/ Used when splitting a window.','line_number':4707,'multiline':False]
['text':' no need to allocate memory','line_number':4718,'multiline':False]
['text':'/ Copy the options from one winopt_T to another.','line_number':4723,'multiline':False]
['text':'/ Doesn't free the old option values in "to", use clear_winopt() for that.','line_number':4724,'multiline':False]
['text':'/ The 'scroll' option is not copied, because it depends on the window height.','line_number':4725,'multiline':False]
['text':'/ The 'previewwindow' option is reset, there can be only one preview window.','line_number':4726,'multiline':False]
['text':' Copy the script context so that we know were the value was last set.','line_number':4783,'multiline':False]
['text':' don't want NULL pointers','line_number':4785,'multiline':False]
['text':'/ Check string options in a window for a NULL value.','line_number':4788,'multiline':False]
['text':'/ Check for NULL pointers in a winopt_T and replace them with empty_string_option.','line_number':4795,'multiline':False]
['text':'/ Free the allocated memory inside a winopt_T.','line_number':4822,'multiline':False]
['text':' sets w_hl_needs_update also for w_p_winbl','line_number':4856,'multiline':False]
['text':'/ Index into the options table for a buffer-local option enum.','line_number':4863,'multiline':False]
['text':'/ Initialize buf_opt_idx[] if not done already.','line_number':4867,'multiline':False]
['text':'/ Copy global option values to local options for one buffer.','line_number':4883,'multiline':False]
['text':'/ Used when creating a new buffer and sometimes when entering a buffer.','line_number':4884,'multiline':False]
['text':'/ flags:','line_number':4885,'multiline':False]
['text':'/ BCO_ENTER    We will enter the buffer "buf".','line_number':4886,'multiline':False]
['text':'/ BCO_ALWAYS   Always copy the options, but only set b_p_initialized when','line_number':4887,'multiline':False]
['text':'/      appropriate.','line_number':4888,'multiline':False]
['text':'/ BCO_NOHELP   Don't copy the values to a help buffer.','line_number':4889,'multiline':False]
['text':' init for GCC','line_number':4893,'multiline':False]
['text':' Skip this when the option defaults have not been set yet.  Happens when','line_number':4896,'multiline':False]
['text':' main() allocates the first buffer.','line_number':4897,'multiline':False]
['text':'','line_number':4899,'multiline':False]
['text':' Always copy when entering and 'cpo' contains 'S'.','line_number':4900,'multiline':False]
['text':' Don't copy when already initialized.','line_number':4901,'multiline':False]
['text':' Don't copy when 'cpo' contains 's' and not entering.','line_number':4902,'multiline':False]
['text':'    'S'      BCO_ENTER  initialized  's'  should_copy','line_number':4903,'multiline':False]
['text':'    yes        yes          X         X      true','line_number':4904,'multiline':False]
['text':'    yes        no          yes        X      false','line_number':4905,'multiline':False]
['text':'    no          X          yes        X      false','line_number':4906,'multiline':False]
['text':'     X         no          no        yes     false','line_number':4907,'multiline':False]
['text':'     X         no          no        no      true','line_number':4908,'multiline':False]
['text':'    no         yes         no         X      true','line_number':4909,'multiline':False]
['text':'/','line_number':4910,'multiline':False]
['text':' Don't copy the options specific to a help buffer when','line_number':4921,'multiline':False]
['text':' BCO_NOHELP is given or the options were initialized already','line_number':4922,'multiline':False]
['text':' (jumping back to a help file with CTRL-T or CTRL-O)','line_number':4923,'multiline':False]
['text':' don't free b_p_isk','line_number':4925,'multiline':False]
['text':' Always free the allocated strings.  If not already initialized,','line_number':4929,'multiline':False]
['text':' reset 'readonly' and copy 'fileformat'.','line_number':4930,'multiline':False]
['text':' don't copy readonly','line_number':4933,'multiline':False]
['text':' Don't copy 'filetype', it must be detected','line_number':5046,'multiline':False]
['text':' Don't copy 'syntax', it must be set','line_number':5054,'multiline':False]
['text':' This isn't really an option, but copying the langmap and IME','line_number':5080,'multiline':False]
['text':' state from the current buffer is better than resetting it.','line_number':5081,'multiline':False]
['text':' options that are normally global but also have a local value','line_number':5087,'multiline':False]
['text':' are not copied, start using the global value','line_number':5088,'multiline':False]
['text':' Don't copy the options set by ex_help(), use the saved values,','line_number':5116,'multiline':False]
['text':' when going from a help buffer to a non-help buffer.','line_number':5117,'multiline':False]
['text':' Don't touch these at all when BCO_NOHELP is used and going from','line_number':5118,'multiline':False]
['text':' or to a help buffer.','line_number':5119,'multiline':False]
['text':' When the options should be copied (ignoring BCO_ALWAYS), set the','line_number':5149,'multiline':False]
['text':' flag that indicates that the options have been initialized.','line_number':5150,'multiline':False]
['text':' make sure we don't have NULLs','line_number':5156,'multiline':False]
['text':'/ Reset the 'modifiable' option and its default value.','line_number':5162,'multiline':False]
['text':'/ Set the global value for 'iminsert' to the local value.','line_number':5170,'multiline':False]
['text':'/ Set the global value for 'imsearch' to the local value.','line_number':5176,'multiline':False]
['text':'/ @param opt_flags  OPT_GLOBAL and/or OPT_LOCAL','line_number':5188,'multiline':False]
['text':' count number of backslashes before ' ' or ','','line_number':5205,'multiline':False]
['text':' break at a space with an even number of backslashes','line_number':5211,'multiline':False]
['text':' expand terminal option name','line_number':5237,'multiline':False]
['text':' unknown name','line_number':5242,'multiline':False]
['text':' expand option name','line_number':5257,'multiline':False]
['text':' Allow * wildcard.','line_number':5264,'multiline':False]
['text':' handle "-=" and "+="','line_number':5284,'multiline':False]
['text':' Below are for handling expanding a specific option's value after the '=' or ':'','line_number':5303,'multiline':False]
['text':' Certain options currently have special case handling to reuse the','line_number':5314,'multiline':False]
['text':' expansion logic with other commands.','line_number':5315,'multiline':False]
['text':' Now pick. If the option has a custom expander, use that. Otherwise, just','line_number':5325,'multiline':False]
['text':' fill with the existing option value.','line_number':5326,'multiline':False]
['text':' Only string options below','line_number':5343,'multiline':False]
['text':' Options that have P_EXPAND are considered to all use file/dir expansion.','line_number':5345,'multiline':False]
['text':' for 'tags' need three backslashes for a space','line_number':5363,'multiline':False]
['text':' For an option that is a list of file names, or comma/colon-separated','line_number':5375,'multiline':False]
['text':' values, split it by the delimiter and find the start of the current','line_number':5376,'multiline':False]
['text':' pattern, while accounting for backslash-escaped space/commas/colons.','line_number':5377,'multiline':False]
['text':' Triple-backslashed escaped file names (e.g. 'path') can also be','line_number':5378,'multiline':False]
['text':' delimited by space.','line_number':5379,'multiline':False]
['text':' count number of backslashes before ' ' or ','','line_number':5382,'multiline':False]
['text':' An option that is a list of single-character flags should always start','line_number':5402,'multiline':False]
['text':' at the end as we don't complete words.','line_number':5403,'multiline':False]
['text':' Some options can either be using file/dir expansions, or custom value','line_number':5408,'multiline':False]
['text':' expansion depending on what the user typed. Unfortunately we have to','line_number':5409,'multiline':False]
['text':' manually handle it here to make sure we have the correct xp_context set.','line_number':5410,'multiline':False]
['text':' for 'spellsuggest' start at "file:"','line_number':5411,'multiline':False]
['text':'/ Returns true if "str" either matches "regmatch" or fuzzy matches "pat".','line_number':5422,'multiline':False]
['text':'/','line_number':5423,'multiline':False]
['text':'/ If "test_only" is true and "fuzzy" is false and if "str" matches the regular','line_number':5424,'multiline':False]
['text':'/ expression "regmatch", then returns true.  Otherwise returns false.','line_number':5425,'multiline':False]
['text':'/','line_number':5426,'multiline':False]
['text':'/ If "test_only" is false and "fuzzy" is false and if "str" matches the','line_number':5427,'multiline':False]
['text':'/ regular expression "regmatch", then stores the match in matches[idx] and','line_number':5428,'multiline':False]
['text':'/ returns true.','line_number':5429,'multiline':False]
['text':'/','line_number':5430,'multiline':False]
['text':'/ If "test_only" is true and "fuzzy" is true and if "str" fuzzy matches','line_number':5431,'multiline':False]
['text':'/ "fuzzystr", then returns true. Otherwise returns false.','line_number':5432,'multiline':False]
['text':'/','line_number':5433,'multiline':False]
['text':'/ If "test_only" is false and "fuzzy" is true and if "str" fuzzy matches','line_number':5434,'multiline':False]
['text':'/ "fuzzystr", then stores the match details in fuzmatch[idx] and returns true.','line_number':5435,'multiline':False]
['text':' Nr of matching non-term-code settings','line_number':5464,'multiline':False]
['text':' remember the ignore-case flag','line_number':5467,'multiline':False]
['text':' do this loop twice:','line_number':5472,'multiline':False]
['text':' loop == 0: count the number of matching options','line_number':5473,'multiline':False]
['text':' loop == 1: copy the matching options into allocated memory','line_number':5474,'multiline':False]
['text':' Compare against the abbreviated option name (for regular','line_number':5510,'multiline':False]
['text':' expression match). Fuzzy matching (previous if) already','line_number':5511,'multiline':False]
['text':' matches against both the expanded and abbreviated names.','line_number':5512,'multiline':False]
['text':'/ Escape an option value that can be used on the command-line with :set.','line_number':5542,'multiline':False]
['text':'/ Caller needs to free the returned string, unless NULL is returned.','line_number':5543,'multiline':False]
['text':' A backslash is required before some characters.  This is the reverse of','line_number':5546,'multiline':False]
['text':' what happens in do_set().','line_number':5547,'multiline':False]
['text':' For MS-Windows et al. we don't double backslashes at the start and','line_number':5551,'multiline':False]
['text':' before a file name character.','line_number':5552,'multiline':False]
['text':' The reverse is found at stropt_copy_value().','line_number':5553,'multiline':False]
['text':'/ Expansion handler for :set= when we just want to fill in with the existing value.','line_number':5567,'multiline':False]
['text':' For a terminal key code expand_option_idx is kOptInvalid.','line_number':5575,'multiline':False]
['text':' Put string of option value in NameBuff.','line_number':5581,'multiline':False]
['text':'/ Expansion handler for :set=/:set+= when the option has a custom expansion handler.','line_number':5595,'multiline':False]
['text':' Not supposed to reach this. This function is only for options with','line_number':5599,'multiline':False]
['text':' custom expansion callbacks.','line_number':5600,'multiline':False]
['text':' Retrieve the existing value, but escape it as a reverse of setting it.','line_number':5613,'multiline':False]
['text':' We technically only need to do this when oe_append or','line_number':5614,'multiline':False]
['text':' oe_include_orig_val is true.','line_number':5615,'multiline':False]
['text':'/ Expansion handler for :set-=','line_number':5627,'multiline':False]
['text':' term option','line_number':5631,'multiline':False]
['text':' Split the option by comma, then present each option to the user if','line_number':5644,'multiline':False]
['text':' it matches the pattern.','line_number':5645,'multiline':False]
['text':' This condition needs to go first, because 'whichwrap' has both','line_number':5646,'multiline':False]
['text':' P_COMMA and P_FLAGLIST.','line_number':5647,'multiline':False]
['text':' Make a copy as we need to inject null characters destructively.','line_number':5653,'multiline':False]
['text':' "\," is interpreted as a literal comma rather than option','line_number':5664,'multiline':False]
['text':' separator when reading options in copy_option_part(). Skip','line_number':5665,'multiline':False]
['text':' it.','line_number':5666,'multiline':False]
['text':' null-terminate this value, required by later functions','line_number':5670,'multiline':False]
['text':' empty value, don't add to list','line_number':5677,'multiline':False]
['text':' Only present the flags that are set on the option as the other flags','line_number':5695,'multiline':False]
['text':' are not meaningful to do set-= on.','line_number':5696,'multiline':False]
['text':' Don't suggest anything if cmdline is non-empty. Vim's set-=','line_number':5699,'multiline':False]
['text':' behavior requires consecutive strings and it's usually','line_number':5700,'multiline':False]
['text':' unintuitive to users if they try to subtract multiple flags at','line_number':5701,'multiline':False]
['text':' once.','line_number':5702,'multiline':False]
['text':' If more than one flags, split the flags up and expose each','line_number':5718,'multiline':False]
['text':' character as individual choice.','line_number':5719,'multiline':False]
['text':'/ Get the value for the numeric or string option///opp in a nice format into','line_number':5732,'multiline':False]
['text':'/ NameBuff[].  Must not be called with a hidden option!','line_number':5733,'multiline':False]
['text':'/','line_number':5734,'multiline':False]
['text':'/ @param opt_flags  OPT_GLOBAL and/or OPT_LOCAL','line_number':5735,'multiline':False]
['text':' P_STRING','line_number':5753,'multiline':False]
['text':' Just in case.','line_number':5755,'multiline':False]
['text':'/ Return true if "varp" points to 'wildchar' or 'wildcharm' and it can be','line_number':5765,'multiline':False]
['text':'/ printed as a keyname.','line_number':5766,'multiline':False]
['text':'/ "*wcp" is set to the value of the option if it's 'wildchar' or 'wildcharm'.','line_number':5767,'multiline':False]
['text':'/ @returns true if "x" is present in 'shortmess' option, or','line_number':5779,'multiline':False]
['text':'/ 'shortmess' contains 'a' and "x" is present in SHM_ALL_ABBREVIATIONS.','line_number':5780,'multiline':False]
['text':'/ vimrc_found() - Called when a vimrc or "VIMINIT" has been found.','line_number':5789,'multiline':False]
['text':'/','line_number':5790,'multiline':False]
['text':'/ Set the values for options that didn't get set yet to the defaults.','line_number':5791,'multiline':False]
['text':'/ When "fname" is not NULL, use it to set $"envname" when it wasn't set yet.','line_number':5792,'multiline':False]
['text':' Set $MYVIMRC to the first vimrc file found.','line_number':5798,'multiline':False]
['text':'/ Check whether global option has been set.','line_number':5810,'multiline':False]
['text':'/','line_number':5811,'multiline':False]
['text':'/ @param[in]  name  Option name.','line_number':5812,'multiline':False]
['text':'/','line_number':5813,'multiline':False]
['text':'/ @return True if option was set.','line_number':5814,'multiline':False]
['text':'/ Reset the flag indicating option "name" was set.','line_number':5821,'multiline':False]
['text':'/','line_number':5822,'multiline':False]
['text':'/ @param[in]  name  Option name.','line_number':5823,'multiline':False]
['text':'/ fill_culopt_flags() -- called when 'culopt' changes value','line_number':5830,'multiline':False]
['text':' Note: Keep this in sync with p_culopt_values.','line_number':5842,'multiline':False]
['text':' Can't have both "line" and "screenline".','line_number':5865,'multiline':False]
['text':'/ Get the value of 'magic' taking "magic_overruled" into account.','line_number':5874,'multiline':False]
['text':'/ Set the callback function value for an option that accepts a function name,','line_number':5888,'multiline':False]
['text':'/ lambda, et al. (e.g. 'operatorfunc', 'tagfunc', etc.)','line_number':5889,'multiline':False]
['text':'/ @return  OK if the option is successfully set to a function, otherwise FAIL','line_number':5890,'multiline':False]
['text':' Lambda expression or a funcref','line_number':5902,'multiline':False]
['text':' treat everything else as a function name string','line_number':5908,'multiline':False]
['text':'/ Check if backspacing over something is allowed.','line_number':5937,'multiline':False]
['text':'/ @param  what  BS_INDENT, BS_EOL, BS_START, or BS_NOSTOP','line_number':5938,'multiline':False]
['text':' support for number values was removed but we keep '2' since it is used in','line_number':5945,'multiline':False]
['text':' legacy tests','line_number':5946,'multiline':False]
['text':'/ Get the local or global value of 'backupcopy'.','line_number':5954,'multiline':False]
['text':'/','line_number':5955,'multiline':False]
['text':'/ @param buf The buffer.','line_number':5956,'multiline':False]
['text':'/ Get the local or global value of 'formatlistpat'.','line_number':5962,'multiline':False]
['text':'/','line_number':5963,'multiline':False]
['text':'/ @param buf The buffer.','line_number':5964,'multiline':False]
['text':'/ Get the local or global value of the 'virtualedit' flags.','line_number':5973,'multiline':False]
['text':'/ Get the local or global value of 'showbreak'.','line_number':5979,'multiline':False]
['text':'/','line_number':5980,'multiline':False]
['text':'/ @param win  If not NULL, the window to get the local option from; global','line_number':5981,'multiline':False]
['text':'/             otherwise.','line_number':5982,'multiline':False]
['text':'/ Return the current end-of-line type: EOL_DOS, EOL_UNIX or EOL_MAC.','line_number':5995,'multiline':False]
['text':'/ Like get_fileformat(), but override 'fileformat' with "p" for "++opt=val"','line_number':6010,'multiline':False]
['text':'/ argument.','line_number':6011,'multiline':False]
['text':'/','line_number':6012,'multiline':False]
['text':'/ @param eap  can be NULL!','line_number':6013,'multiline':False]
['text':'/ Return the default fileformat from 'fileformats'.','line_number':6037,'multiline':False]
['text':'/ Set the current end-of-line type to EOL_UNIX, EOL_MAC, or EOL_DOS.','line_number':6049,'multiline':False]
['text':'/','line_number':6050,'multiline':False]
['text':'/ Sets 'fileformat'.','line_number':6051,'multiline':False]
['text':'/','line_number':6052,'multiline':False]
['text':'/ @param eol_style End-of-line style.','line_number':6053,'multiline':False]
['text':'/ @param opt_flags OPT_LOCAL and/or OPT_GLOBAL','line_number':6054,'multiline':False]
['text':' p is NULL if "eol_style" is EOL_UNKNOWN.','line_number':6071,'multiline':False]
['text':' This may cause the buffer to become (un)modified.','line_number':6076,'multiline':False]
['text':' Set window title later.','line_number':6079,'multiline':False]
['text':'/ Skip to next part of an option argument: skip space and comma','line_number':6082,'multiline':False]
['text':'/ Isolate one part of a string option separated by `sep_chars`.','line_number':6094,'multiline':False]
['text':'/','line_number':6095,'multiline':False]
['text':'/ @param[in,out]  option    advanced to the next part','line_number':6096,'multiline':False]
['text':'/ @param[in,out]  buf       copy of the isolated part','line_number':6097,'multiline':False]
['text':'/ @param[in]      maxlen    length of `buf`','line_number':6098,'multiline':False]
['text':'/ @param[in]      sep_chars chars that separate the option parts','line_number':6099,'multiline':False]
['text':'/','line_number':6100,'multiline':False]
['text':'/ @return length of `*option`','line_number':6101,'multiline':False]
['text':' skip '.' at start of option part, for 'suffixes'','line_number':6107,'multiline':False]
['text':' Skip backslash before a separator character and space.','line_number':6112,'multiline':False]
['text':' skip non-standard separator','line_number':6123,'multiline':False]
['text':' p points to next file name','line_number':6126,'multiline':False]
['text':'/ Return true when 'shell' has "csh" in the tail.','line_number':6132,'multiline':False]
['text':'/ Return true when 'shell' has "fish" in the tail.','line_number':6138,'multiline':False]
['text':'/ Get window or buffer local options','line_number':6144,'multiline':False]
['text':'/ Return the effective 'scrolloff' value for the current window, using the','line_number':6174,'multiline':False]
['text':'/ global value when appropriate.','line_number':6175,'multiline':False]
['text':' Disallow scrolloff in terminal-mode. #11915','line_number':6178,'multiline':False]
['text':'/ Return the effective 'sidescrolloff' value for the current window, using the','line_number':6185,'multiline':False]
['text':'/ global value when appropriate.','line_number':6186,'multiline':False]
['text':' welcome to the jungle','line_number':6230,'multiline':False]
['text':' Scope is either OPT_LOCAL or a fallback mode was requested.','line_number':6241,'multiline':False]
['text':' TODO(bfredl): do you even nocp?','line_number':6259,'multiline':False]
