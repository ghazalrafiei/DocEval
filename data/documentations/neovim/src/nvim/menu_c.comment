['text':' Code for menus.  Used for the GUI and 'wildmenu'.','line_number':1,'multiline':False]
['text':' GUI/Motif support by Robert Webb','line_number':2,'multiline':False]
['text':' maximum depth of menus','line_number':39,'multiline':False]
['text':'/ The character for each menu mode','line_number':45,'multiline':False]
['text':' Return true if "name" is a window toolbar menu name.','line_number':51,'multiline':False]
['text':'/ Do the :menu command and relatives.','line_number':64,'multiline':False]
['text':'/ @param eap Ex command arguments','line_number':65,'multiline':False]
['text':' command mapped to the menu entry','line_number':68,'multiline':False]
['text':' kTrue for "menu enable",','line_number':76,'multiline':False]
['text':' kFalse for "menu disable','line_number':77,'multiline':False]
['text':' Ignore obsolete "<special>" modifier.','line_number':95,'multiline':False]
['text':' Locate an optional "icon=filename" argument','line_number':102,'multiline':False]
['text':' TODO(nvim): Currently this is only parsed. Should expose it to UIs.','line_number':103,'multiline':False]
['text':' Fill in the priority table.','line_number':118,'multiline':False]
['text':' mark end of the table','line_number':144,'multiline':False]
['text':' Check for "disable" or "enable" argument.','line_number':146,'multiline':False]
['text':' If there is no argument, display all menus.','line_number':155,'multiline':False]
['text':' If there is only a menu name, display menus with that name.','line_number':169,'multiline':False]
['text':' Change sensitivity of the menu.','line_number':181,'multiline':False]
['text':' For the PopUp menu, remove a menu for each mode separately.','line_number':182,'multiline':False]
['text':' Careful: menu_enable_recurse() changes menu_path.','line_number':183,'multiline':False]
['text':' meaning: do all menus','line_number':184,'multiline':False]
['text':' Delete menu(s).','line_number':199,'multiline':False]
['text':' meaning: remove all menus','line_number':200,'multiline':False]
['text':' For the PopUp menu, remove a menu for each mode separately.','line_number':204,'multiline':False]
['text':' Careful: remove_menu() changes menu_path','line_number':215,'multiline':False]
['text':' Add menu(s).','line_number':218,'multiline':False]
['text':' Replace special key codes.','line_number':219,'multiline':False]
['text':' "<Nop>" means nothing','line_number':220,'multiline':False]
['text':' Menu tips are plain text.','line_number':224,'multiline':False]
['text':' For the PopUp menu, add a menu for each mode separately.','line_number':235,'multiline':False]
['text':' Include all modes, to make ":amenu" work','line_number':240,'multiline':False]
['text':'/ Add the menu with the given name to the menu hierarchy','line_number':257,'multiline':False]
['text':'/','line_number':258,'multiline':False]
['text':'/ @param[out]  menuarg menu entry','line_number':259,'multiline':False]
['text':'/ @param[] pri_tab priority table','line_number':260,'multiline':False]
['text':'/ @param[in] call_data Right hand side command','line_number':261,'multiline':False]
['text':' Make a copy so we can stuff around with it, since it could be const','line_number':273,'multiline':False]
['text':' Get name of this element in the menu hierarchy, and the simplified','line_number':280,'multiline':False]
['text':' name (without mnemonic and accelerator text).','line_number':281,'multiline':False]
['text':' Only a mnemonic or accelerator is not valid.','line_number':292,'multiline':False]
['text':' See if it's already there','line_number':297,'multiline':False]
['text':' Count menus, to find where this one needs to be inserted.','line_number':318,'multiline':False]
['text':' Ignore menus that are not in the menubar (PopUp and Toolbar)','line_number':319,'multiline':False]
['text':' Not already there, so let's add it','line_number':339,'multiline':False]
['text':' separate mnemonic and accelerator text from actual menu name','line_number':345,'multiline':False]
['text':' Add after menu that has lower priority.','line_number':357,'multiline':False]
['text':' If this menu option was previously only available in other','line_number':365,'multiline':False]
['text':' modes, then make sure it's available for this one now','line_number':366,'multiline':False]
['text':' Also enable a menu when it's created or changed.','line_number':367,'multiline':False]
['text':' Only add system menu items which have not been defined yet.','line_number':384,'multiline':False]
['text':' First check if this was an ":amenu".','line_number':385,'multiline':False]
['text':' loop over all modes, may add more than one','line_number':395,'multiline':False]
['text':' free any old menu','line_number':398,'multiline':False]
['text':' For "amenu", may insert an extra character.','line_number':401,'multiline':False]
['text':' Don't do this for "<Nop>".','line_number':402,'multiline':False]
['text':' Delete any empty submenu we added before discovering the error.  Repeat','line_number':450,'multiline':False]
['text':' for higher levels.','line_number':451,'multiline':False]
['text':' safety check','line_number':459,'multiline':False]
['text':' Set the (sub)menu with the given name to enabled or disabled.','line_number':468,'multiline':False]
['text':' Called recursively.','line_number':469,'multiline':False]
['text':' Got to bottom of hierarchy','line_number':473,'multiline':False]
['text':' Get name of this element in the menu hierarchy','line_number':475,'multiline':False]
['text':' Find the menu','line_number':478,'multiline':False]
['text':' When name is empty, we are doing all menu items for the given','line_number':495,'multiline':False]
['text':' modes, so keep looping, otherwise we are just doing the named','line_number':496,'multiline':False]
['text':' menu item (which has been found) so break here.','line_number':497,'multiline':False]
['text':'/ Remove the (sub)menu with the given name from the menu hierarchy','line_number':512,'multiline':False]
['text':'/ Called recursively.','line_number':513,'multiline':False]
['text':'/','line_number':514,'multiline':False]
['text':'/ @param silent  don't give error messages','line_number':515,'multiline':False]
['text':' Got to bottom of hierarchy','line_number':521,'multiline':False]
['text':' Get name of this element in the menu hierarchy','line_number':523,'multiline':False]
['text':' Find the menu','line_number':526,'multiline':False]
['text':' When name is empty, we are removing all menu items for the given','line_number':546,'multiline':False]
['text':' modes, so keep looping, otherwise we are just removing the named','line_number':547,'multiline':False]
['text':' menu item (which has been found) so break here.','line_number':548,'multiline':False]
['text':' Remove the menu item for the given mode[s].  If the menu item','line_number':553,'multiline':False]
['text':' is no longer valid in ANY mode, delete it','line_number':554,'multiline':False]
['text':' Recalculate modes for menu based on the new updated children','line_number':576,'multiline':False]
['text':' The menu item is no longer valid in ANY mode, so delete it','line_number':586,'multiline':False]
['text':' Free the given menu structure and remove it from the linked list.','line_number':595,'multiline':False]
['text':' Free the menu->string with the given index.','line_number':612,'multiline':False]
['text':'/ Export menus','line_number':628,'multiline':False]
['text':'/','line_number':629,'multiline':False]
['text':'/ @param[in] menu if null, starts from root_menu','line_number':630,'multiline':False]
['text':'/ @param modes, a choice of \ref MENU_MODES','line_number':631,'multiline':False]
['text':'/ @return dict with name/commands','line_number':632,'multiline':False]
['text':'/ @see show_menus_recursive','line_number':633,'multiline':False]
['text':'/ @see menu_get','line_number':634,'multiline':False]
['text':' > max value of utf8_char2bytes','line_number':647,'multiline':False]
['text':' leaf menu','line_number':662,'multiline':False]
['text':' visit recursively all children','line_number':682,'multiline':False]
['text':'/ Export menus matching path \p path_name','line_number':695,'multiline':False]
['text':'/','line_number':696,'multiline':False]
['text':'/ @param path_name','line_number':697,'multiline':False]
['text':'/ @param modes supported modes, see \ref MENU_MODES','line_number':698,'multiline':False]
['text':'/ @param[in,out] list must be allocated','line_number':699,'multiline':False]
['text':'/ @return false if could not find path_name','line_number':700,'multiline':False]
['text':' If a (non-empty) path query was given, only the first node in the','line_number':713,'multiline':False]
['text':' find_menu() result is relevant.  Else we want all nodes.','line_number':714,'multiline':False]
['text':'/ Find menu matching `name` and `modes`.','line_number':721,'multiline':False]
['text':'/','line_number':722,'multiline':False]
['text':'/ @param menu top menu to start looking from','line_number':723,'multiline':False]
['text':'/ @param name path towards the menu','line_number':724,'multiline':False]
['text':'/ @return menu if \p name is null, found menu or NULL','line_number':725,'multiline':False]
['text':' find the end of one dot-separated name and put a NUL at the dot','line_number':729,'multiline':False]
['text':' Found menu','line_number':733,'multiline':False]
['text':' found a full match','line_number':740,'multiline':False]
['text':' Found a match, search the sub-menu.','line_number':752,'multiline':False]
['text':'/ Show the mapping associated with a menu item or hierarchy in a sub-menu.','line_number':759,'multiline':False]
['text':' First, find the (sub)menu with the given name','line_number':764,'multiline':False]
['text':' When there are no menus at all, the title still needs to be shown.','line_number':770,'multiline':False]
['text':' Now we have found the matching menu, and we list the mappings','line_number':772,'multiline':False]
['text':' Highlight title','line_number':773,'multiline':False]
['text':'/ Recursively show the mappings associated with the menus under the given one','line_number':782,'multiline':False]
['text':' "q" hit for "--more--"','line_number':791,'multiline':False]
['text':' Same highlighting as for directories!?','line_number':801,'multiline':False]
['text':' "q" hit for "--more--"','line_number':809,'multiline':False]
['text':' recursively show all children.  Skip PopUp[nvoci].','line_number':849,'multiline':False]
['text':' Used when expanding menu names.','line_number':858,'multiline':False]
['text':' true for ":emenu" command','line_number':861,'multiline':False]
['text':' Work out what to complete when doing command line completion of menu names.','line_number':863,'multiline':False]
['text':' Check for priority numbers, enable and disable','line_number':875,'multiline':False]
['text':' ":popup" only uses menus, not entries','line_number':908,'multiline':False]
['text':' TODO(vim): check for next command?','line_number':912,'multiline':False]
['text':' Complete the menu name','line_number':914,'multiline':False]
['text':' With :unmenu, you only want to match menus for the appropriate mode.','line_number':915,'multiline':False]
['text':' With :menu though you might want to add a menu with the same name as','line_number':916,'multiline':False]
['text':' one in another mode, so match menus from other modes too.','line_number':917,'multiline':False]
['text':' Found menu','line_number':934,'multiline':False]
['text':' Menu path continues, but we have reached a leaf.','line_number':937,'multiline':False]
['text':' Or menu exists only in another mode.','line_number':938,'multiline':False]
['text':' No menu found with the name we were looking for','line_number':947,'multiline':False]
['text':' We're in the mapping part','line_number':959,'multiline':False]
['text':' Function given to ExpandGeneric() to obtain the list of (sub)menus (not','line_number':965,'multiline':False]
['text':' entries).','line_number':966,'multiline':False]
['text':' first call: start at first item','line_number':973,'multiline':False]
['text':' Skip PopUp[nvoci].','line_number':978,'multiline':False]
['text':' at end of linked list','line_number':985,'multiline':False]
['text':' Advance to next menu entry.','line_number':1003,'multiline':False]
['text':' Function given to ExpandGeneric() to obtain the list of menus and menu','line_number':1012,'multiline':False]
['text':' entries.','line_number':1013,'multiline':False]
['text':' hack','line_number':1018,'multiline':False]
['text':' first call: start at first item','line_number':1022,'multiline':False]
['text':' Skip Browse-style entries, popup menus and separators.','line_number':1027,'multiline':False]
['text':' at end of linked list','line_number':1035,'multiline':False]
['text':' hack on menu separators:  use a 'magic' char for the separator','line_number':1049,'multiline':False]
['text':' so that '.' in names gets escaped properly','line_number':1050,'multiline':False]
['text':' Advance to next menu entry.','line_number':1068,'multiline':False]
['text':'/ Skip over this element of the menu path and return the start of the next','line_number':1077,'multiline':False]
['text':'/ element.  Any \ and ^Vs are removed from the current element.','line_number':1078,'multiline':False]
['text':'/','line_number':1079,'multiline':False]
['text':'/ @param name may be modified.','line_number':1080,'multiline':False]
['text':'/ @return start of the next element','line_number':1081,'multiline':False]
['text':'/ Return true when "name" matches with menu "menu".  The name is compared in','line_number':1100,'multiline':False]
['text':'/ two ways: raw menu name and menu name without '&'.  ignore part after a TAB.','line_number':1101,'multiline':False]
['text':'/ Returns the \ref MENU_MODES specified by menu command `cmd`.','line_number':1125,'multiline':False]
['text':'/  (eg :menu! returns MENU_CMDLINE_MODE | MENU_INSERT_MODE)','line_number':1126,'multiline':False]
['text':'/','line_number':1127,'multiline':False]
['text':'/ @param[in] cmd      string like "nmenu", "vmenu", etc.','line_number':1128,'multiline':False]
['text':'/ @param[in] forceit  bang (!) was given after the command','line_number':1129,'multiline':False]
['text':'/ @param[out] noremap If not NULL, the flag it points to is set according','line_number':1130,'multiline':False]
['text':'/                     to whether the command is a "nore" command.','line_number':1131,'multiline':False]
['text':'/ @param[out] unmenu  If not NULL, the flag it points to is set according','line_number':1132,'multiline':False]
['text':'/                     to whether the command is an "unmenu" command.','line_number':1133,'multiline':False]
['text':' vmenu, vunmenu, vnoremenu','line_number':1139,'multiline':False]
['text':' xmenu, xunmenu, xnoremenu','line_number':1142,'multiline':False]
['text':' smenu, sunmenu, snoremenu','line_number':1145,'multiline':False]
['text':' omenu','line_number':1148,'multiline':False]
['text':' imenu','line_number':1151,'multiline':False]
['text':' tlmenu, tlunmenu, tlnoremenu','line_number':1155,'multiline':False]
['text':' tmenu','line_number':1160,'multiline':False]
['text':' cmenu','line_number':1162,'multiline':False]
['text':' amenu','line_number':1165,'multiline':False]
['text':' nmenu, not noremenu','line_number':1171,'multiline':False]
['text':' menu!!','line_number':1179,'multiline':False]
['text':' menu','line_number':1182,'multiline':False]
['text':'/ Return the string representation of the menu modes. Does the opposite','line_number':1197,'multiline':False]
['text':'/ of get_menu_cmd_modes().','line_number':1198,'multiline':False]
['text':' Modify a menu name starting with "PopUp" to include the mode character.','line_number':1249,'multiline':False]
['text':' Returns the name in allocated memory.','line_number':1250,'multiline':False]
['text':'/ Duplicate the menu item text and then process to see if a mnemonic key','line_number':1267,'multiline':False]
['text':'/ and/or accelerator text has been identified.','line_number':1268,'multiline':False]
['text':'/','line_number':1269,'multiline':False]
['text':'/ @param str The menu item text.','line_number':1270,'multiline':False]
['text':'/ @param[out] mnemonic If non-NULL, *mnemonic is set to the character after','line_number':1271,'multiline':False]
['text':'/             the first '&'.','line_number':1272,'multiline':False]
['text':'/ @param[out] actext If non-NULL, *actext is set to the text after the first','line_number':1273,'multiline':False]
['text':'/             TAB, but only if a TAB was found. Memory pointed to is newly','line_number':1274,'multiline':False]
['text':'/             allocated.','line_number':1275,'multiline':False]
['text':'/','line_number':1276,'multiline':False]
['text':'/ @return a pointer to allocated memory.','line_number':1277,'multiline':False]
['text':' Locate accelerator text, after the first TAB','line_number':1284,'multiline':False]
['text':' Find mnemonic characters "&a" and reduce "&&" to "&".','line_number':1296,'multiline':False]
['text':' trailing "&"','line_number':1300,'multiline':False]
['text':' Return true if "name" can be a menu in the MenuBar.','line_number':1313,'multiline':False]
['text':' Return true if "name" is a popup menu name.','line_number':1323,'multiline':False]
['text':' Return true if "name" is a toolbar menu name.','line_number':1330,'multiline':False]
['text':'/ Return true if the name is a menu separator identifier: Starts and ends','line_number':1337,'multiline':False]
['text':'/ with '-'','line_number':1338,'multiline':False]
['text':'/ True if a popup menu or starts with \ref MNU_HIDDEN_CHAR','line_number':1344,'multiline':False]
['text':'/','line_number':1345,'multiline':False]
['text':'/ @return true if the menu is hidden','line_number':1346,'multiline':False]
['text':' must be a "r" command, like Insert mode','line_number':1376,'multiline':False]
['text':'/ Display the Special "PopUp" menu as a pop-up at the current mouse','line_number':1392,'multiline':False]
['text':'/ position.  The "PopUpn" menu is for Normal mode, "PopUpi" for Insert mode,','line_number':1393,'multiline':False]
['text':'/ etc.','line_number':1394,'multiline':False]
['text':' Only show a popup when it is defined and has entries','line_number':1414,'multiline':False]
['text':'/ Execute "menu".  Use by ":emenu" and the window toolbar.','line_number':1422,'multiline':False]
['text':'/ @param eap  NULL for the window toolbar.','line_number':1423,'multiline':False]
['text':'/ @param mode_idx  specify a MENU_INDEX_ value,','line_number':1424,'multiline':False]
['text':'/                  use MENU_INDEX_INVALID to depend on the current state','line_number':1425,'multiline':False]
['text':' Use the Insert mode entry when returning to Insert mode.','line_number':1432,'multiline':False]
['text':' Detect real visual mode -- if we are really in visual mode we','line_number':1440,'multiline':False]
['text':' don't need to do any guesswork to figure out what the selection','line_number':1441,'multiline':False]
['text':' is. Just execute the visual binding for the menu.','line_number':1442,'multiline':False]
['text':' GEDDES: This is not perfect - but it is a','line_number':1449,'multiline':False]
['text':' quick way of detecting whether we are doing this from a','line_number':1450,'multiline':False]
['text':' selection - see if the range matches up with the visual','line_number':1451,'multiline':False]
['text':' select start and end.','line_number':1452,'multiline':False]
['text':' Set it up for visual mode - equivalent to gv.','line_number':1455,'multiline':False]
['text':' Set it up for line-wise visual mode','line_number':1461,'multiline':False]
['text':' Activate visual mode','line_number':1470,'multiline':False]
['text':' Adjust the cursor to make sure it is in the correct pos','line_number':1479,'multiline':False]
['text':' for exclusive mode','line_number':1480,'multiline':False]
['text':' When executing a script or function execute the commands right now.','line_number':1492,'multiline':False]
['text':' Also for the window toolbar','line_number':1493,'multiline':False]
['text':' Otherwise put them in the typeahead buffer.','line_number':1494,'multiline':False]
['text':' case MENU_INDEX_TIP: cannot happen','line_number':1530,'multiline':False]
['text':'/ Lookup a menu by the descriptor name e.g. "File.New"','line_number':1538,'multiline':False]
['text':'/ Returns NULL if the menu is not found','line_number':1539,'multiline':False]
['text':' Find in the menu hierarchy','line_number':1548,'multiline':False]
['text':'/ Given a menu descriptor, e.g. "File.New", find it in the menu hierarchy and','line_number':1582,'multiline':False]
['text':'/ execute it.','line_number':1583,'multiline':False]
['text':' Found the menu, so execute.','line_number':1617,'multiline':False]
['text':'/ Given a menu descriptor, e.g. "File.New", find it in the menu hierarchy.','line_number':1621,'multiline':False]
['text':' find the end of one dot-separated name and put a NUL at the dot','line_number':1628,'multiline':False]
['text':' found a menu item instead of a sub-menu','line_number':1634,'multiline':False]
['text':' found a full match','line_number':1643,'multiline':False]
['text':' didn't find it','line_number':1650,'multiline':False]
['text':' Found a match, search the sub-menu.','line_number':1654,'multiline':False]
['text':' Translation of menu names.  Just a simple lookup table.','line_number':1667,'multiline':False]
['text':' English name','line_number':1670,'multiline':False]
['text':' same, without '&'','line_number':1671,'multiline':False]
['text':' translated name','line_number':1672,'multiline':False]
['text':' ":menutrans".','line_number':1683,'multiline':False]
['text':' This function is also defined without the +multi_lang feature, in which','line_number':1684,'multiline':False]
['text':' case the commands are ignored.','line_number':1685,'multiline':False]
['text':' ":menutrans clear": clear all translations.','line_number':1694,'multiline':False]
['text':' Delete all "menutrans_" global variables.','line_number':1698,'multiline':False]
['text':' ":menutrans from to": add translation','line_number':1701,'multiline':False]
['text':' Find the character just after one part of a menu name.','line_number':1726,'multiline':False]
['text':' Lookup part of a menu name in the translations.','line_number':1738,'multiline':False]
['text':' Return a pointer to the translation or NULL if not found.','line_number':1739,'multiline':False]
['text':' Now try again while ignoring '&' characters.','line_number':1750,'multiline':False]
['text':' Unescape the name in the translate dictionary table.','line_number':1766,'multiline':False]
['text':' Isolate the menu name.','line_number':1776,'multiline':False]
['text':' Skip the menu name, and translate <Tab> into a real TAB.','line_number':1777,'multiline':False]
['text':'/ Get the information about a menu item in mode 'which'','line_number':1799,'multiline':False]
['text':' Return all the top-level menus','line_number':1804,'multiline':False]
['text':' get all the children.  Skip PopUp[nvoci].','line_number':1807,'multiline':False]
['text':' leaf menu','line_number':1828,'multiline':False]
['text':' Get the first mode in which the menu is available','line_number':1831,'multiline':False]
['text':' just in case, avoid Coverity warning','line_number':1834,'multiline':False]
['text':' If there are submenus, add all the submenu display names','line_number':1847,'multiline':False]
['text':'/ "menu_info()" function','line_number':1858,'multiline':False]
['text':'/ Return information about a menu (including all the child menus)','line_number':1859,'multiline':False]
['text':' menu mode','line_number':1870,'multiline':False]
['text':' Default is modes for "menu"','line_number':1875,'multiline':False]
['text':' Locate the specified menu or menu item','line_number':1883,'multiline':False]
['text':' Find in the menu hierarchy','line_number':1889,'multiline':False]
['text':' specified menu not found','line_number':1906,'multiline':False]
