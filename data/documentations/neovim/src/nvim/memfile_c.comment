['text':'/ An abstraction to handle blocks of memory which can be stored in a file.','line_number':1,'multiline':False]
['text':'/ This is the implementation of a sort of virtual memory.','line_number':2,'multiline':False]
['text':'/','line_number':3,'multiline':False]
['text':'/ A memfile consists of a sequence of blocks:','line_number':4,'multiline':False]
['text':'/ - Blocks numbered from 0 upwards have been assigned a place in the actual','line_number':5,'multiline':False]
['text':'/   file. The block number is equal to the page number in the file.','line_number':6,'multiline':False]
['text':'/ - Blocks with negative numbers are currently in memory only. They can be','line_number':7,'multiline':False]
['text':'/   assigned a place in the file when too much memory is being used. At that','line_number':8,'multiline':False]
['text':'/   moment, they get a new, positive, number. A list is used for translation','line_number':9,'multiline':False]
['text':'/   of negative to positive numbers.','line_number':10,'multiline':False]
['text':'/','line_number':11,'multiline':False]
['text':'/ The size of a block is a multiple of a page size, normally the page size of','line_number':12,'multiline':False]
['text':'/ the device the file is on. Most blocks are 1 page long. A block of multiple','line_number':13,'multiline':False]
['text':'/ pages is used for a line that does not fit in a single page.','line_number':14,'multiline':False]
['text':'/','line_number':15,'multiline':False]
['text':'/ Each block can be in memory and/or in a file. The block stays in memory','line_number':16,'multiline':False]
['text':'/ as long as it is locked. If it is no longer locked it can be swapped out to','line_number':17,'multiline':False]
['text':'/ the file. It is only written to the file if it has been changed.','line_number':18,'multiline':False]
['text':'/','line_number':19,'multiline':False]
['text':'/ Under normal operation the file is created when opening the memory file and','line_number':20,'multiline':False]
['text':'/ deleted when closing the memory file. Only with recovery an existing memory','line_number':21,'multiline':False]
['text':'/ file is opened.','line_number':22,'multiline':False]
['text':'/','line_number':23,'multiline':False]
['text':'/ The functions for using a memfile:','line_number':24,'multiline':False]
['text':'/','line_number':25,'multiline':False]
['text':'/ mf_open()         open a new or existing memfile','line_number':26,'multiline':False]
['text':'/ mf_open_file()    open a swap file for an existing memfile','line_number':27,'multiline':False]
['text':'/ mf_close()        close (and delete) a memfile','line_number':28,'multiline':False]
['text':'/ mf_new()          create a new block in a memfile and lock it','line_number':29,'multiline':False]
['text':'/ mf_get()          get an existing block and lock it','line_number':30,'multiline':False]
['text':'/ mf_put()          unlock a block, may be marked for writing','line_number':31,'multiline':False]
['text':'/ mf_free()         remove a block','line_number':32,'multiline':False]
['text':'/ mf_sync()         sync changed parts of memfile to disk','line_number':33,'multiline':False]
['text':'/ mf_release_all()  release as much memory as possible','line_number':34,'multiline':False]
['text':'/ mf_trans_del()    may translate negative to positive block number','line_number':35,'multiline':False]
['text':'/ mf_fullname()     make file name full path (use before first :cd)','line_number':36,'multiline':False]
['text':'/ default page size','line_number':65,'multiline':False]
['text':'/ Open a new or existing memory block file.','line_number':73,'multiline':False]
['text':'/','line_number':74,'multiline':False]
['text':'/ @param fname  Name of file to use.','line_number':75,'multiline':False]
['text':'/               - If NULL, it means no file (use memory only).','line_number':76,'multiline':False]
['text':'/               - If not NULL:','line_number':77,'multiline':False]
['text':'/                 * Should correspond to an existing file.','line_number':78,'multiline':False]
['text':'/                 * String must have been allocated (it is not copied).','line_number':79,'multiline':False]
['text':'/                 * If opening the file fails, it is freed and function fails.','line_number':80,'multiline':False]
['text':'/ @param flags  Flags for open() call.','line_number':82,'multiline':False]
['text':'/','line_number':83,'multiline':False]
['text':'/ @return - The open memory file, on success.','line_number':84,'multiline':False]
['text':'/         - NULL, on failure (e.g. file does not exist).','line_number':85,'multiline':False]
['text':' no file, use memory only','line_number':90,'multiline':False]
['text':' try to open the file','line_number':94,'multiline':False]
['text':' fail if file could not be opened','line_number':97,'multiline':False]
['text':' free list is empty','line_number':101,'multiline':False]
['text':' Try to set the page size equal to device's block size. Speeds up I/O a lot.','line_number':107,'multiline':False]
['text':' When recovering, the actual block size will be retrieved from block 0','line_number':120,'multiline':False]
['text':' in ml_recover(). The size used here may be wrong, therefore mf_blocknr_max','line_number':121,'multiline':False]
['text':' must be rounded up.','line_number':122,'multiline':False]
['text':' no file or empty file','line_number':126,'multiline':False]
['text':'/ Open a file for an existing memfile.','line_number':142,'multiline':False]
['text':'/','line_number':143,'multiline':False]
['text':'/ Used when updatecount set from 0 to some value.','line_number':144,'multiline':False]
['text':'/','line_number':145,'multiline':False]
['text':'/ @param fname  Name of file to use.','line_number':146,'multiline':False]
['text':'/               - If NULL, it means no file (use memory only).','line_number':147,'multiline':False]
['text':'/               - If not NULL:','line_number':148,'multiline':False]
['text':'/                 * Should correspond to an existing file.','line_number':149,'multiline':False]
['text':'/                 * String must have been allocated (it is not copied).','line_number':150,'multiline':False]
['text':'/                 * If opening the file fails, it is freed and function fails.','line_number':151,'multiline':False]
['text':'/','line_number':152,'multiline':False]
['text':'/ @return OK    On success.','line_number':153,'multiline':False]
['text':'/         FAIL  If file could not be opened.','line_number':154,'multiline':False]
['text':'/ Close a memory file and optionally delete the associated file.','line_number':165,'multiline':False]
['text':'/','line_number':166,'multiline':False]
['text':'/ @param del_file  Whether to delete associated file.','line_number':167,'multiline':False]
['text':' safety check','line_number':170,'multiline':False]
['text':' free entries in used list','line_number':180,'multiline':False]
['text':' free entries in free list','line_number':185,'multiline':False]
['text':' free hashtable and its items','line_number':189,'multiline':False]
['text':'/ Close the swap file for a memfile. Used when 'swapfile' is reset.','line_number':194,'multiline':False]
['text':'/','line_number':195,'multiline':False]
['text':'/ @param getlines  Whether to get all lines into memory.','line_number':196,'multiline':False]
['text':' nothing to close','line_number':200,'multiline':False]
['text':' get all blocks in memory by accessing all lines (clumsy!)','line_number':205,'multiline':False]
['text':' close the file','line_number':211,'multiline':False]
['text':' delete the swap file','line_number':217,'multiline':False]
['text':'/ Set new size for a memfile. Used when block 0 of a swapfile has been read','line_number':222,'multiline':False]
['text':'/ and the size it indicates differs from what was guessed.','line_number':223,'multiline':False]
['text':'/ Get a new block','line_number':229,'multiline':False]
['text':'/','line_number':230,'multiline':False]
['text':'/ @param negative    Whether a negative block number is desired (data block).','line_number':231,'multiline':False]
['text':'/ @param page_count  Desired number of pages.','line_number':232,'multiline':False]
['text':' Decide on the number to use:','line_number':237,'multiline':False]
['text':' If there is a free block, use its number.','line_number':238,'multiline':False]
['text':' Otherwise use mf_block_min for a negative number, mf_block_max for','line_number':239,'multiline':False]
['text':' a positive number.','line_number':240,'multiline':False]
['text':' first free block','line_number':241,'multiline':False]
['text':' If the block in the free list has more pages, take only the number','line_number':244,'multiline':False]
['text':' of pages needed and allocate a new bhdr_T with data.','line_number':245,'multiline':False]
['text':' need to allocate memory for this block','line_number':250,'multiline':False]
['text':' If the number of pages matches use the bhdr_T from the free list and','line_number':251,'multiline':False]
['text':' allocate the data.','line_number':252,'multiline':False]
['text':' get a new number','line_number':257,'multiline':False]
['text':' new block is always dirty','line_number':267,'multiline':False]
['text':' Init the data to all zero, to avoid reading uninitialized data.','line_number':272,'multiline':False]
['text':' This also avoids that the passwd file ends up in the swap file!','line_number':273,'multiline':False]
['text':' Get existing block "nr" with "page_count" pages.','line_number':279,'multiline':False]
['text':'','line_number':280,'multiline':False]
['text':' Caller should first check a negative nr with mf_trans_del().','line_number':281,'multiline':False]
['text':'','line_number':282,'multiline':False]
['text':' @return  NULL if not found','line_number':283,'multiline':False]
['text':' check block number exists','line_number':286,'multiline':False]
['text':' see if it is in the cache','line_number':291,'multiline':False]
['text':' not in the hash list','line_number':293,'multiline':False]
['text':' can't be in the file','line_number':294,'multiline':False]
['text':' could check here if the block is in the free list','line_number':298,'multiline':False]
['text':' cannot read the block','line_number':310,'multiline':False]
['text':' put in front of hash table','line_number':319,'multiline':False]
['text':'/ Release the block *hp.','line_number':324,'multiline':False]
['text':'/','line_number':325,'multiline':False]
['text':'/ @param dirty   Whether block must be written to file later.','line_number':326,'multiline':False]
['text':'/ @param infile  Whether block should be in file (needed for recovery).','line_number':327,'multiline':False]
['text':' may translate negative in positive nr','line_number':344,'multiline':False]
['text':'/ Signal block as no longer used (may put it in the free list).','line_number':348,'multiline':False]
['text':' free data','line_number':351,'multiline':False]
['text':' get *hp out of the hash table','line_number':352,'multiline':False]
['text':' don't want negative numbers in free list','line_number':354,'multiline':False]
['text':' put *hp in the free list','line_number':357,'multiline':False]
['text':'/ Sync memory file to disk.','line_number':361,'multiline':False]
['text':'/','line_number':362,'multiline':False]
['text':'/ @param flags  MFS_ALL    If not given, blocks with negative numbers are not','line_number':363,'multiline':False]
['text':'/                          synced, even when they are dirty.','line_number':364,'multiline':False]
['text':'/               MFS_STOP   Stop syncing when a character becomes available,','line_number':365,'multiline':False]
['text':'/                          but sync at least one block.','line_number':366,'multiline':False]
['text':'/               MFS_FLUSH  Make sure buffers are flushed to disk, so they will','line_number':367,'multiline':False]
['text':'/                          survive a system crash.','line_number':368,'multiline':False]
['text':'/               MFS_ZERO   Only write block 0.','line_number':369,'multiline':False]
['text':'/','line_number':370,'multiline':False]
['text':'/ @return FAIL  If failure. Possible causes:','line_number':371,'multiline':False]
['text':'/               - No file (nothing to do).','line_number':372,'multiline':False]
['text':'/               - Write error (probably full disk).','line_number':373,'multiline':False]
['text':'/         OK    Otherwise.','line_number':374,'multiline':False]
['text':' there is no file, nothing to do','line_number':380,'multiline':False]
['text':' Only a CTRL-C while writing will break us here, not one typed previously.','line_number':385,'multiline':False]
['text':' Sync from last to first (may reduce the probability of an inconsistent','line_number':388,'multiline':False]
['text':' file). If a write fails, it is very likely caused by a full filesystem.','line_number':389,'multiline':False]
['text':' Then we only try to write blocks within the existing file. If that also','line_number':390,'multiline':False]
['text':' fails then we give up.','line_number':391,'multiline':False]
['text':' note, "last" block is typically earlier in the hash list','line_number':394,'multiline':False]
['text':' double error: quit syncing','line_number':404,'multiline':False]
['text':' Stop when char available now.','line_number':409,'multiline':False]
['text':' If the whole list is flushed, the memfile is not dirty anymore.','line_number':422,'multiline':False]
['text':' In case of an error, dirty flag is also set, to avoid trying all the time.','line_number':423,'multiline':False]
['text':'/ Set dirty flag for all blocks in memory file with a positive block number.','line_number':439,'multiline':False]
['text':'/ These are blocks that need to be written to a newly created swapfile.','line_number':440,'multiline':False]
['text':'/ Release as many blocks as possible.','line_number':452,'multiline':False]
['text':'/','line_number':453,'multiline':False]
['text':'/ Used in case of out of memory','line_number':454,'multiline':False]
['text':'/','line_number':455,'multiline':False]
['text':'/ @return  Whether any memory was released.','line_number':456,'multiline':False]
['text':' If no swap file yet, try to open one.','line_number':463,'multiline':False]
['text':' Flush as many blocks as possible, only if there is a swapfile.','line_number':468,'multiline':False]
['text':' Rerun with the same value of i. another item will have taken','line_number':478,'multiline':False]
['text':' its place (or it was the last)','line_number':479,'multiline':False]
['text':'/ Allocate a block header and a block of memory for it.','line_number':490,'multiline':False]
['text':'/ Free a block header and its block memory.','line_number':499,'multiline':False]
['text':'/ Insert a block in the free list.','line_number':506,'multiline':False]
['text':'/ Remove the first block in the free list and return it.','line_number':513,'multiline':False]
['text':'/','line_number':514,'multiline':False]
['text':'/ Caller must check that mfp->mf_free_first is not NULL.','line_number':515,'multiline':False]
['text':'/ Read a block from disk.','line_number':523,'multiline':False]
['text':'/','line_number':524,'multiline':False]
['text':'/ @return  OK    On success.','line_number':525,'multiline':False]
['text':'/          FAIL  On failure. Could be:','line_number':526,'multiline':False]
['text':'/                - No file.','line_number':527,'multiline':False]
['text':'/                - Error reading file.','line_number':528,'multiline':False]
['text':' there is no file, can't read','line_number':531,'multiline':False]
['text':' TODO(elmart): Check (page_size * hp->bh_bnum) within off_T bounds.','line_number':536,'multiline':False]
['text':' check for overflow; we know that page_size must be > 0','line_number':542,'multiline':False]
['text':'/ Write a block to disk.','line_number':553,'multiline':False]
['text':'/','line_number':554,'multiline':False]
['text':'/ @return  OK    On success.','line_number':555,'multiline':False]
['text':'/          FAIL  On failure. Could be:','line_number':556,'multiline':False]
['text':'/                - No file.','line_number':557,'multiline':False]
['text':'/                - Could not translate negative block number to positive.','line_number':558,'multiline':False]
['text':'/                - Seek error in swap file.','line_number':559,'multiline':False]
['text':'/                - Write error in swap file.','line_number':560,'multiline':False]
['text':' number of pages written','line_number':564,'multiline':False]
['text':' there is no file, can't write','line_number':566,'multiline':False]
['text':' must assign file block number','line_number':570,'multiline':False]
['text':' number of bytes in a page','line_number':576,'multiline':False]
['text':'/ We don't want gaps in the file. Write the blocks in front of *hp','line_number':578,'multiline':False]
['text':'/ to extend the file.','line_number':579,'multiline':False]
['text':'/ If block 'mf_infile_count' is not in the hash list, it has been','line_number':580,'multiline':False]
['text':'/ freed. Fill the space in the file with data from the current block.','line_number':581,'multiline':False]
['text':' block nr which is being written','line_number':583,'multiline':False]
['text':' beyond end of file','line_number':584,'multiline':False]
['text':' NULL caught below','line_number':586,'multiline':False]
['text':' TODO(elmart): Check (page_size * nr) within off_T bounds.','line_number':591,'multiline':False]
['text':' offset in the file','line_number':592,'multiline':False]
['text':' freed block, fill with dummy data','line_number':597,'multiline':False]
['text':' number of bytes written','line_number':602,'multiline':False]
['text':'/ Avoid repeating the error message, this mostly happens when the','line_number':605,'multiline':False]
['text':'/ disk is full. We give the message again only after a successful','line_number':606,'multiline':False]
['text':'/ write or when hitting a key. We keep on trying, in case some','line_number':607,'multiline':False]
['text':'/ space becomes available.','line_number':608,'multiline':False]
['text':' written a non-dummy block','line_number':616,'multiline':False]
['text':' appended to file','line_number':619,'multiline':False]
['text':' written the desired block','line_number':622,'multiline':False]
['text':'/ Make block number positive and add it to the translation list.','line_number':629,'multiline':False]
['text':'/','line_number':630,'multiline':False]
['text':'/ @return  OK    On success.','line_number':631,'multiline':False]
['text':'/          FAIL  On failure.','line_number':632,'multiline':False]
['text':' it's already positive','line_number':635,'multiline':False]
['text':' Get a new number for the block.','line_number':639,'multiline':False]
['text':' If the first item in the free list has sufficient pages, use its number.','line_number':640,'multiline':False]
['text':' Otherwise use mf_blocknr_max.','line_number':641,'multiline':False]
['text':' If the page count of the free block was larger, reduce it.','line_number':647,'multiline':False]
['text':' If the page count matches, remove the block from the free list.','line_number':648,'multiline':False]
['text':' adjust number','line_number':661,'multiline':False]
['text':' Insert "np" into "mf_trans" hashtable with key "np->nt_old_bnum".','line_number':666,'multiline':False]
['text':'/ Lookup translation from trans list and delete the entry.','line_number':672,'multiline':False]
['text':'/','line_number':673,'multiline':False]
['text':'/ @return  The positive new number  When found.','line_number':674,'multiline':False]
['text':'/          The old number           When not found.','line_number':675,'multiline':False]
['text':' not found','line_number':679,'multiline':False]
['text':' remove entry from the trans list','line_number':686,'multiline':False]
['text':'/ Frees mf_fname and mf_ffname.','line_number':692,'multiline':False]
['text':'/ Set the simple file name and the full file name of memfile's swapfile, out','line_number':699,'multiline':False]
['text':'/ of simple file name and some other considerations.','line_number':700,'multiline':False]
['text':'/','line_number':701,'multiline':False]
['text':'/ Only called when creating or renaming the swapfile. Either way it's a new','line_number':702,'multiline':False]
['text':'/ name so we must work out the full path name.','line_number':703,'multiline':False]
['text':'/ Make name of memfile's swapfile a full path.','line_number':710,'multiline':False]
['text':'/','line_number':711,'multiline':False]
['text':'/ Used before doing a :cd','line_number':712,'multiline':False]
['text':'/ Return true if there are any translations pending for memfile.','line_number':724,'multiline':False]
['text':'/ Open memfile's swapfile.','line_number':730,'multiline':False]
['text':'/','line_number':731,'multiline':False]
['text':'/ "fname" must be in allocated memory, and is consumed (also when error).','line_number':732,'multiline':False]
['text':'/','line_number':733,'multiline':False]
['text':'/ @param  flags  Flags for open().','line_number':734,'multiline':False]
['text':'/ @return A bool indicating success of the `open` call.','line_number':735,'multiline':False]
['text':' fname cannot be NameBuff, because it must have been allocated.','line_number':738,'multiline':False]
['text':'/ Extra security check: When creating a swap file it really shouldn't','line_number':742,'multiline':False]
['text':'/ exist yet. If there is a symbolic link, this is most likely an attack.','line_number':743,'multiline':False]
['text':' try to open the file','line_number':750,'multiline':False]
['text':' If the file cannot be opened, use memory only','line_number':754,'multiline':False]
