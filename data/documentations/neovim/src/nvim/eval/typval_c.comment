['text':'/ struct storing information about current sort','line_number':39,'multiline':False]
['text':'/ Structure representing one list item, used for sort array.','line_number':52,'multiline':False]
['text':'/< Sorted list item.','line_number':54,'multiline':False]
['text':'/< Sorted list item index.','line_number':55,'multiline':False]
['text':' TODO(ZyX-I): Remove DICT_MAXNEST, make users be non-recursive instead','line_number':101,'multiline':False]
['text':'{{{1 Lists','line_number':107,'multiline':False]
['text':'{{{2 List item','line_number':108,'multiline':False]
['text':'/ Allocate a list item','line_number':110,'multiline':False]
['text':'/','line_number':111,'multiline':False]
['text':'/ @warning Allocated item is not initialized, do not forget to initialize it','line_number':112,'multiline':False]
['text':'/          and specifically set lv_lock.','line_number':113,'multiline':False]
['text':'/','line_number':114,'multiline':False]
['text':'/ @return [allocated] new list item.','line_number':115,'multiline':False]
['text':'/ Remove a list item from a List and free it','line_number':122,'multiline':False]
['text':'/','line_number':123,'multiline':False]
['text':'/ Also clears the value.','line_number':124,'multiline':False]
['text':'/','line_number':125,'multiline':False]
['text':'/ @param[out]  l  List to remove item from.','line_number':126,'multiline':False]
['text':'/ @param[in,out]  item  Item to remove.','line_number':127,'multiline':False]
['text':'/','line_number':128,'multiline':False]
['text':'/ @return Pointer to the list item just after removed one, NULL if removed','line_number':129,'multiline':False]
['text':'/         item was the last one.','line_number':130,'multiline':False]
['text':'{{{2 List watchers','line_number':141,'multiline':False]
['text':'/ Add a watcher to a list','line_number':143,'multiline':False]
['text':'/','line_number':144,'multiline':False]
['text':'/ @param[out]  l  List to add watcher to.','line_number':145,'multiline':False]
['text':'/ @param[in]  lw  Watcher to add.','line_number':146,'multiline':False]
['text':'/ Remove a watcher from a list','line_number':154,'multiline':False]
['text':'/','line_number':155,'multiline':False]
['text':'/ Does not give a warning if watcher was not found.','line_number':156,'multiline':False]
['text':'/','line_number':157,'multiline':False]
['text':'/ @param[out]  l  List to remove watcher from.','line_number':158,'multiline':False]
['text':'/ @param[in]  lwrem  Watcher to remove.','line_number':159,'multiline':False]
['text':'/ Advance watchers to the next item','line_number':173,'multiline':False]
['text':'/','line_number':174,'multiline':False]
['text':'/ Used just before removing an item from a list.','line_number':175,'multiline':False]
['text':'/','line_number':176,'multiline':False]
['text':'/ @param[out]  l  List from which item is removed.','line_number':177,'multiline':False]
['text':'/ @param[in]  item  List item being removed.','line_number':178,'multiline':False]
['text':'{{{2 Alloc/free','line_number':189,'multiline':False]
['text':'/ Allocate an empty list','line_number':191,'multiline':False]
['text':'/','line_number':192,'multiline':False]
['text':'/ Caller should take care of the reference count.','line_number':193,'multiline':False]
['text':'/','line_number':194,'multiline':False]
['text':'/ @param[in]  len  Expected number of items to be populated before list','line_number':195,'multiline':False]
['text':'/                  becomes accessible from Vimscript. It is still valid to','line_number':196,'multiline':False]
['text':'/                  underpopulate a list, value only controls how many elements','line_number':197,'multiline':False]
['text':'/                  will be allocated in advance. Currently does nothing.','line_number':198,'multiline':False]
['text':'/                  @see ListLenSpecials.','line_number':199,'multiline':False]
['text':'/','line_number':200,'multiline':False]
['text':'/ @return [allocated] new list.','line_number':201,'multiline':False]
['text':' Prepend the list to the list of lists for garbage collection.','line_number':207,'multiline':False]
['text':'/ Initialize a static list with 10 items','line_number':218,'multiline':False]
['text':'/','line_number':219,'multiline':False]
['text':'/ @param[out]  sl  Static list to initialize.','line_number':220,'multiline':False]
['text':'/ Initialize static list with undefined number of elements','line_number':247,'multiline':False]
['text':'/','line_number':248,'multiline':False]
['text':'/ @param[out]  l  List to initialize.','line_number':249,'multiline':False]
['text':'/ Free items contained in a list','line_number':257,'multiline':False]
['text':'/','line_number':258,'multiline':False]
['text':'/ @param[in,out]  l  List to clear.','line_number':259,'multiline':False]
['text':' Remove the item before deleting it.','line_number':264,'multiline':False]
['text':'/ Free a list itself, ignoring items it contains','line_number':275,'multiline':False]
['text':'/','line_number':276,'multiline':False]
['text':'/ Ignores the reference count.','line_number':277,'multiline':False]
['text':'/','line_number':278,'multiline':False]
['text':'/ @param[in,out]  l  List to free.','line_number':279,'multiline':False]
['text':' Remove the list from the list of lists for garbage collection.','line_number':283,'multiline':False]
['text':'/ Free a list, including all items it points to','line_number':297,'multiline':False]
['text':'/','line_number':298,'multiline':False]
['text':'/ Ignores the reference count. Does not do anything if','line_number':299,'multiline':False]
['text':'/ tv_in_free_unref_items is true.','line_number':300,'multiline':False]
['text':'/','line_number':301,'multiline':False]
['text':'/ @param[in,out]  l  List to free.','line_number':302,'multiline':False]
['text':'/ Unreference a list','line_number':314,'multiline':False]
['text':'/','line_number':315,'multiline':False]
['text':'/ Decrements the reference count and frees when it becomes zero or less.','line_number':316,'multiline':False]
['text':'/','line_number':317,'multiline':False]
['text':'/ @param[in,out]  l  List to unreference.','line_number':318,'multiline':False]
['text':'{{{2 Add/remove','line_number':326,'multiline':False]
['text':'/ Remove items "item" to "item2" from list "l"','line_number':328,'multiline':False]
['text':'/','line_number':329,'multiline':False]
['text':'/ @warning Does not free the listitem or the value!','line_number':330,'multiline':False]
['text':'/','line_number':331,'multiline':False]
['text':'/ @param[out]  l  List to remove from.','line_number':332,'multiline':False]
['text':'/ @param[in]  item  First item to remove.','line_number':333,'multiline':False]
['text':'/ @param[in]  item2  Last item to remove.','line_number':334,'multiline':False]
['text':' Notify watchers.','line_number':338,'multiline':False]
['text':'/ Like tv_list_drop_items, but also frees all removed items','line_number':357,'multiline':False]
['text':'/ Move items "item" to "item2" from list "l" to the end of the list "tgt_l"','line_number':373,'multiline':False]
['text':'/','line_number':374,'multiline':False]
['text':'/ @param[out]  l  List to move from.','line_number':375,'multiline':False]
['text':'/ @param[in]  item  First item to move.','line_number':376,'multiline':False]
['text':'/ @param[in]  item2  Last item to move.','line_number':377,'multiline':False]
['text':'/ @param[out]  tgt_l  List to move to.','line_number':378,'multiline':False]
['text':'/ @param[in]  cnt  Number of items moved.','line_number':379,'multiline':False]
['text':'/ Insert list item','line_number':396,'multiline':False]
['text':'/','line_number':397,'multiline':False]
['text':'/ @param[out]  l  List to insert to.','line_number':398,'multiline':False]
['text':'/ @param[in,out]  ni  Item to insert.','line_number':399,'multiline':False]
['text':'/ @param[in]  item  Item to insert before. If NULL, inserts at the end of the','line_number':400,'multiline':False]
['text':'/                   list.','line_number':401,'multiline':False]
['text':' Append new item at end of list.','line_number':406,'multiline':False]
['text':' Insert new item before existing item.','line_number':409,'multiline':False]
['text':'/ Insert Vimscript value into a list','line_number':424,'multiline':False]
['text':'/','line_number':425,'multiline':False]
['text':'/ @param[out]  l  List to insert to.','line_number':426,'multiline':False]
['text':'/ @param[in,out]  tv  Value to insert. Is copied (@see tv_copy()) to an','line_number':427,'multiline':False]
['text':'/                     allocated listitem_T and inserted.','line_number':428,'multiline':False]
['text':'/ @param[in]  item  Item to insert before. If NULL, inserts at the end of the','line_number':429,'multiline':False]
['text':'/                   list.','line_number':430,'multiline':False]
['text':'/ Append item to the end of list','line_number':439,'multiline':False]
['text':'/','line_number':440,'multiline':False]
['text':'/ @param[out]  l  List to append to.','line_number':441,'multiline':False]
['text':'/ @param[in,out]  item  Item to append.','line_number':442,'multiline':False]
['text':' empty list','line_number':447,'multiline':False]
['text':'/ Append Vimscript value to the end of list','line_number':460,'multiline':False]
['text':'/','line_number':461,'multiline':False]
['text':'/ @param[out]  l  List to append to.','line_number':462,'multiline':False]
['text':'/ @param[in,out]  tv  Value to append. Is copied (@see tv_copy()) to an','line_number':463,'multiline':False]
['text':'/                     allocated listitem_T.','line_number':464,'multiline':False]
['text':'/ Like tv_list_append_tv(), but tv is moved to a list','line_number':473,'multiline':False]
['text':'/','line_number':474,'multiline':False]
['text':'/ This means that it is no longer valid to use contents of the typval_T after','line_number':475,'multiline':False]
['text':'/ function exits.','line_number':476,'multiline':False]
['text':'/ Append a list to a list as one item','line_number':485,'multiline':False]
['text':'/','line_number':486,'multiline':False]
['text':'/ @param[out]  l  List to append to.','line_number':487,'multiline':False]
['text':'/ @param[in,out]  itemlist  List to append. Reference count is increased.','line_number':488,'multiline':False]
['text':'/ Append a dictionary to a list','line_number':500,'multiline':False]
['text':'/','line_number':501,'multiline':False]
['text':'/ @param[out]  l  List to append to.','line_number':502,'multiline':False]
['text':'/ @param[in,out]  dict  Dictionary to append. Reference count is increased.','line_number':503,'multiline':False]
['text':'/ Make a copy of "str" and append it as an item to list "l"','line_number':517,'multiline':False]
['text':'/','line_number':518,'multiline':False]
['text':'/ @param[out]  l  List to append to.','line_number':519,'multiline':False]
['text':'/ @param[in]  str  String to append.','line_number':520,'multiline':False]
['text':'/ @param[in]  len  Length of the appended string. May be -1, in this','line_number':521,'multiline':False]
['text':'/                  case string is considered to be usual zero-terminated','line_number':522,'multiline':False]
['text':'/                  string or NULL “empty” string.','line_number':523,'multiline':False]
['text':'/ Append given string to the list','line_number':538,'multiline':False]
['text':'/','line_number':539,'multiline':False]
['text':'/ Unlike list_append_string this function does not copy the string.','line_number':540,'multiline':False]
['text':'/','line_number':541,'multiline':False]
['text':'/ @param[out]  l    List to append to.','line_number':542,'multiline':False]
['text':'/ @param[in]   str  String to append.','line_number':543,'multiline':False]
['text':'/ Append number to the list','line_number':554,'multiline':False]
['text':'/','line_number':555,'multiline':False]
['text':'/ @param[out]  l  List to append to.','line_number':556,'multiline':False]
['text':'/ @param[in]  n  Number to append. Will be recorded in the allocated','line_number':557,'multiline':False]
['text':'/                listitem_T.','line_number':558,'multiline':False]
['text':'{{{2 Operations on the whole list','line_number':568,'multiline':False]
['text':'/ Make a copy of list','line_number':570,'multiline':False]
['text':'/','line_number':571,'multiline':False]
['text':'/ @param[in]  conv  If non-NULL, then all internal strings will be converted.','line_number':572,'multiline':False]
['text':'/                   Only used when `deep` is true.','line_number':573,'multiline':False]
['text':'/ @param[in]  orig  Original list to copy.','line_number':574,'multiline':False]
['text':'/ @param[in]  deep  If false, then shallow copy will be done.','line_number':575,'multiline':False]
['text':'/ @param[in]  copyID  See var_item_copy().','line_number':576,'multiline':False]
['text':'/','line_number':577,'multiline':False]
['text':'/ @return Copied list. May be NULL in case original list is NULL or some','line_number':578,'multiline':False]
['text':'/         failure happens. The refcount of the new list is set to 1.','line_number':579,'multiline':False]
['text':' Do this before adding the items, because one of the items may','line_number':591,'multiline':False]
['text':' refer back to this list.','line_number':592,'multiline':False]
['text':'/ Get the list item in "l" with index "n1".  "n1" is adjusted if needed.','line_number':620,'multiline':False]
['text':'/ Return NULL if there is no such item.','line_number':621,'multiline':False]
['text':'/ Check that "n2" can be used as the second index in a range of list "l".','line_number':634,'multiline':False]
['text':'/ If "n1" or "n2" is negative it is changed to the positive index.','line_number':635,'multiline':False]
['text':'/ "li1" is the item for item "n1".','line_number':636,'multiline':False]
['text':'/ Return OK or FAIL.','line_number':637,'multiline':False]
['text':' Check that n2 isn't before n1.','line_number':652,'multiline':False]
['text':'/ Assign values from list "src" into a range of "dest".','line_number':665,'multiline':False]
['text':'/ "idx1_arg" is the index of the first item in "dest" to be replaced.','line_number':666,'multiline':False]
['text':'/ "idx2" is the index of last item to be replaced, but when "empty_idx2" is','line_number':667,'multiline':False]
['text':'/ true then replace all items after "idx1".','line_number':668,'multiline':False]
['text':'/ "op" is the operator, normally "=" but can be "+=" and the like.','line_number':669,'multiline':False]
['text':'/ "varname" is used for error messages.','line_number':670,'multiline':False]
['text':'/ Returns OK or FAIL.','line_number':671,'multiline':False]
['text':' Check whether any of the list items is locked before making any changes.','line_number':679,'multiline':False]
['text':' Assign the List values to the list items.','line_number':694,'multiline':False]
['text':' Need to add an empty item.','line_number':710,'multiline':False]
['text':' "dest_li" may have become invalid after append, don’t use it.','line_number':712,'multiline':False]
['text':' Valid again.','line_number':713,'multiline':False]
['text':'/ Flatten up to "maxitems" in "list", starting at "first" to depth "maxdepth".','line_number':732,'multiline':False]
['text':'/ When "first" is NULL use the first item.','line_number':733,'multiline':False]
['text':'/ Does nothing if "maxdepth" is 0.','line_number':734,'multiline':False]
['text':'/','line_number':735,'multiline':False]
['text':'/ @param[in,out] list   List to flatten','line_number':736,'multiline':False]
['text':'/ @param[in] maxdepth   Maximum depth that will be flattened','line_number':737,'multiline':False]
['text':'/','line_number':738,'multiline':False]
['text':'/ @return OK or FAIL','line_number':739,'multiline':False]
['text':'/ Extend first list with the second','line_number':782,'multiline':False]
['text':'/','line_number':783,'multiline':False]
['text':'/ @param[out]  l1  List to extend.','line_number':784,'multiline':False]
['text':'/ @param[in]  l2  List to extend with.','line_number':785,'multiline':False]
['text':'/ @param[in]  bef  If not NULL, extends before this item.','line_number':786,'multiline':False]
['text':' We also quit the loop when we have inserted the original item count of','line_number':793,'multiline':False]
['text':' the list, avoid a hang when we extend a list with itself.','line_number':794,'multiline':False]
['text':'/ Concatenate lists into a new list','line_number':802,'multiline':False]
['text':'/','line_number':803,'multiline':False]
['text':'/ @param[in]  l1  First list.','line_number':804,'multiline':False]
['text':'/ @param[in]  l2  Second list.','line_number':805,'multiline':False]
['text':'/ @param[out]  ret_tv  Location where new list is saved.','line_number':806,'multiline':False]
['text':'/','line_number':807,'multiline':False]
['text':'/ @return OK or FAIL.','line_number':808,'multiline':False]
['text':' For a range we allow invalid values and return an empty list.','line_number':856,'multiline':False]
['text':' A list index out of range is an error.','line_number':857,'multiline':False]
['text':' copy the item to "var1" to avoid that freeing the list makes it','line_number':882,'multiline':False]
['text':' invalid.','line_number':883,'multiline':False]
['text':'/ Join list into a string, helper function','line_number':897,'multiline':False]
['text':'/','line_number':898,'multiline':False]
['text':'/ @param[out]  gap  Garray where result will be saved.','line_number':899,'multiline':False]
['text':'/ @param[in]  l  List to join.','line_number':900,'multiline':False]
['text':'/ @param[in]  sep  Used separator.','line_number':901,'multiline':False]
['text':'/ @param[in]  join_gap  Garray to keep each list item string.','line_number':902,'multiline':False]
['text':'/','line_number':903,'multiline':False]
['text':'/ @return OK in case of success, FAIL otherwise.','line_number':904,'multiline':False]
['text':' Stringify each item in the list.','line_number':912,'multiline':False]
['text':' Allocate result buffer with its total size, avoid re-allocation and','line_number':932,'multiline':False]
['text':' multiple copy operations.  Add 2 for a tailing ']' and NUL.','line_number':933,'multiline':False]
['text':'/ Join list into a string using given separator','line_number':956,'multiline':False]
['text':'/','line_number':957,'multiline':False]
['text':'/ @param[out]  gap  Garray where result will be saved.','line_number':958,'multiline':False]
['text':'/ @param[in]  l  Joined list.','line_number':959,'multiline':False]
['text':'/ @param[in]  sep  Separator.','line_number':960,'multiline':False]
['text':'/','line_number':961,'multiline':False]
['text':'/ @return OK in case of success, FAIL otherwise.','line_number':962,'multiline':False]
['text':'/ "join()" function','line_number':983,'multiline':False]
['text':'/ "list2str()" function','line_number':1007,'multiline':False]
['text':' empty list results in empty string','line_number':1021,'multiline':False]
['text':'/ "remove({list})" function','line_number':1036,'multiline':False]
['text':' Type error: do nothing, errmsg already given.','line_number':1052,'multiline':False]
['text':' Remove one item, return its value.','line_number':1057,'multiline':False]
['text':' Remove range of items, return list with values.','line_number':1063,'multiline':False]
['text':' Type error: do nothing.','line_number':1066,'multiline':False]
['text':' Didn't find "item2" after "item".','line_number':1079,'multiline':False]
['text':'/ Compare functions for f_sort() and f_uniq() below.','line_number':1094,'multiline':False]
['text':' encode_tv2string() puts quotes around a string and allocates memory.  Don't','line_number':1126,'multiline':False]
['text':' do that for string variables. Use a single quote when comparing with','line_number':1127,'multiline':False]
['text':' a non-string to do what the docs promise.','line_number':1128,'multiline':False]
['text':' When the result would be zero, compare the item indexes.  Makes the','line_number':1169,'multiline':False]
['text':' sort stable.','line_number':1170,'multiline':False]
['text':' WARNING: When using uniq si1 and si2 are actually listitem_T **, no','line_number':1172,'multiline':False]
['text':' indexes are there.','line_number':1173,'multiline':False]
['text':' shortcut after failure in previous call; compare all items equal','line_number':1196,'multiline':False]
['text':' Copy the values.  This is needed to be able to set v_lock to VAR_FIXED','line_number':1210,'multiline':False]
['text':' in the copy without changing the original list items.','line_number':1211,'multiline':False]
['text':' tv_clear() uses this','line_number':1215,'multiline':False]
['text':' XXX: ITEM_COMPARE_FAIL is unused','line_number':1225,'multiline':False]
['text':' return value has wrong type','line_number':1237,'multiline':False]
['text':' When the result would be zero, compare the pointers themselves.  Makes','line_number':1241,'multiline':False]
['text':' the sort stable.','line_number':1242,'multiline':False]
['text':' WARNING: When using uniq si1 and si2 are actually listitem_T **, no','line_number':1244,'multiline':False]
['text':' indexes are there.','line_number':1245,'multiline':False]
['text':'/ sort() List "l"','line_number':1262,'multiline':False]
['text':' Make an array with each entry pointing to an item in the List.','line_number':1267,'multiline':False]
['text':' f_sort(): ptrs will be the list to sort','line_number':1270,'multiline':False]
['text':' Sort the array with item pointers.','line_number':1284,'multiline':False]
['text':' Clear the list and append the items in the sorted order.','line_number':1287,'multiline':False]
['text':'/ uniq() List "l"','line_number':1303,'multiline':False]
['text':' Make an array with each entry pointing to an item in the List.','line_number':1308,'multiline':False]
['text':' f_uniq(): ptrs will be a stack of items to remove.','line_number':1311,'multiline':False]
['text':'/ Parse the optional arguments to sort() and uniq() and return the values in "info".','line_number':1335,'multiline':False]
['text':' optional second argument: {func}','line_number':1351,'multiline':False]
['text':' type error; errmsg already given','line_number':1360,'multiline':False]
['text':' empty string means default sort','line_number':1372,'multiline':False]
['text':' optional third argument: {dict}','line_number':1394,'multiline':False]
['text':'/ "sort()" or "uniq()" function','line_number':1404,'multiline':False]
['text':' Pointer to current info struct used in compare function. Save and restore','line_number':1412,'multiline':False]
['text':' the current one for nested calls.','line_number':1413,'multiline':False]
['text':' short list sorts pretty quickly','line_number':1427,'multiline':False]
['text':'/ "sort({list})" function','line_number':1443,'multiline':False]
['text':'/ "uniq({list})" function','line_number':1449,'multiline':False]
['text':'/ Check whether two lists are equal','line_number':1455,'multiline':False]
['text':'/','line_number':1456,'multiline':False]
['text':'/ @param[in]  l1  First list to compare.','line_number':1457,'multiline':False]
['text':'/ @param[in]  l2  Second list to compare.','line_number':1458,'multiline':False]
['text':'/ @param[in]  ic  True if case is to be ignored.','line_number':1459,'multiline':False]
['text':'/ @param[in]  recursive  True when used recursively.','line_number':1460,'multiline':False]
['text':'/','line_number':1461,'multiline':False]
['text':'/ @return True if lists are equal, false otherwise.','line_number':1462,'multiline':False]
['text':' empty and NULL list are considered equal','line_number':1473,'multiline':False]
['text':'/ Reverse list in-place','line_number':1494,'multiline':False]
['text':'/','line_number':1495,'multiline':False]
['text':'/ @param[in,out]  l  List to reverse.','line_number':1496,'multiline':False]
['text':'{{{2 Indexing/searching','line_number':1519,'multiline':False]
['text':'/ Locate item with a given index in a list and return it','line_number':1521,'multiline':False]
['text':'/','line_number':1522,'multiline':False]
['text':'/ @param[in]  l  List to index.','line_number':1523,'multiline':False]
['text':'/ @param[in]  n  Index. Negative index is counted from the end, -1 is the last','line_number':1524,'multiline':False]
['text':'/                item.','line_number':1525,'multiline':False]
['text':'/','line_number':1526,'multiline':False]
['text':'/ @return Item at the given index or NULL if `n` is out of range.','line_number':1527,'multiline':False]
['text':' When there is a cached index may start search from there.','line_number':1545,'multiline':False]
['text':' Closest to the start of the list.','line_number':1548,'multiline':False]
['text':' Closest to the end of the list.','line_number':1552,'multiline':False]
['text':' Closest to the cached index.','line_number':1556,'multiline':False]
['text':' Closest to the start of the list.','line_number':1562,'multiline':False]
['text':' Closest to the end of the list.','line_number':1566,'multiline':False]
['text':' Search forward.','line_number':1573,'multiline':False]
['text':' Search backward.','line_number':1578,'multiline':False]
['text':' Cache the used index.','line_number':1584,'multiline':False]
['text':'/ Get list item l[n] as a number','line_number':1591,'multiline':False]
['text':'/','line_number':1592,'multiline':False]
['text':'/ @param[in]  l  List to index.','line_number':1593,'multiline':False]
['text':'/ @param[in]  n  Index in a list.','line_number':1594,'multiline':False]
['text':'/ @param[out]  ret_error  Location where 1 will be saved if index was not','line_number':1595,'multiline':False]
['text':'/                         found. May be NULL. If everything is OK,','line_number':1596,'multiline':False]
['text':'/                         `*ret_error` is not touched.','line_number':1597,'multiline':False]
['text':'/','line_number':1598,'multiline':False]
['text':'/ @return Integer value at the given index or -1.','line_number':1599,'multiline':False]
['text':'/ Get list item l[n] as a string','line_number':1613,'multiline':False]
['text':'/','line_number':1614,'multiline':False]
['text':'/ @param[in]  l  List to index.','line_number':1615,'multiline':False]
['text':'/ @param[in]  n  Index in a list.','line_number':1616,'multiline':False]
['text':'/','line_number':1617,'multiline':False]
['text':'/ @return List item string value or NULL in case of error.','line_number':1618,'multiline':False]
['text':'/ Like tv_list_find() but when a negative index is used that is not found use','line_number':1630,'multiline':False]
['text':'/ zero and set "idx" to zero.  Used for first index of a range.','line_number':1631,'multiline':False]
['text':'/ Locate item in a list and return its index','line_number':1645,'multiline':False]
['text':'/','line_number':1646,'multiline':False]
['text':'/ @param[in]  l  List to search.','line_number':1647,'multiline':False]
['text':'/ @param[in]  item  Item to search for.','line_number':1648,'multiline':False]
['text':'/','line_number':1649,'multiline':False]
['text':'/ @return Index of an item or -1 if item is not in the list.','line_number':1650,'multiline':False]
['text':'{{{1 Dictionaries','line_number':1667,'multiline':False]
['text':'{{{2 Dictionary watchers','line_number':1668,'multiline':False]
['text':'/ Perform all necessary cleanup for a `DictWatcher` instance','line_number':1670,'multiline':False]
['text':'/','line_number':1671,'multiline':False]
['text':'/ @param  watcher  Watcher to free.','line_number':1672,'multiline':False]
['text':'/ Add watcher to a dictionary','line_number':1681,'multiline':False]
['text':'/','line_number':1682,'multiline':False]
['text':'/ @param[in]  dict  Dictionary to add watcher to.','line_number':1683,'multiline':False]
['text':'/ @param[in]  key_pattern  Pattern to watch for.','line_number':1684,'multiline':False]
['text':'/ @param[in]  key_pattern_len  Key pattern length.','line_number':1685,'multiline':False]
['text':'/ @param  callback  Function to be called on events.','line_number':1686,'multiline':False]
['text':'/ Check whether two callbacks are equal','line_number':1703,'multiline':False]
['text':'/','line_number':1704,'multiline':False]
['text':'/ @param[in]  cb1  First callback to check.','line_number':1705,'multiline':False]
['text':'/ @param[in]  cb2  Second callback to check.','line_number':1706,'multiline':False]
['text':'/','line_number':1707,'multiline':False]
['text':'/ @return True if they are equal, false otherwise.','line_number':1708,'multiline':False]
['text':' FIXME: this is inconsistent with tv_equal but is needed for precision','line_number':1719,'multiline':False]
['text':' maybe change dictwatcheradd to return a watcher id instead?','line_number':1720,'multiline':False]
['text':'/ Unref/free callback','line_number':1731,'multiline':False]
['text':'/ Copy a callback into a typval_T.','line_number':1753,'multiline':False]
['text':' TODO(tjdevries): Unified Callback.','line_number':1769,'multiline':False]
['text':' At this point this isn't possible, but it'd be nice to put','line_number':1770,'multiline':False]
['text':' these handled more neatly in one place.','line_number':1771,'multiline':False]
['text':' So instead, we just do the default and put nil','line_number':1772,'multiline':False]
['text':' Copy callback from "src" to "dest", incrementing the refcounts.','line_number':1780,'multiline':False]
['text':'/ Generate a string description of a callback','line_number':1803,'multiline':False]
['text':' TODO(tjdevries): Is this enough space for this?','line_number':1815,'multiline':False]
['text':'/ Remove watcher from a dictionary','line_number':1828,'multiline':False]
['text':'/','line_number':1829,'multiline':False]
['text':'/ @param  dict  Dictionary to remove watcher from.','line_number':1830,'multiline':False]
['text':'/ @param[in]  key_pattern  Pattern to remove watcher for.','line_number':1831,'multiline':False]
['text':'/ @param[in]  key_pattern_len  Pattern length.','line_number':1832,'multiline':False]
['text':'/ @param  callback  Callback to remove watcher for.','line_number':1833,'multiline':False]
['text':'/','line_number':1834,'multiline':False]
['text':'/ @return True on success, false if relevant watcher was not found.','line_number':1835,'multiline':False]
['text':'/ Test if `key` matches with with `watcher->key_pattern`','line_number':1874,'multiline':False]
['text':'/','line_number':1875,'multiline':False]
['text':'/ @param[in]  watcher  Watcher to check key pattern from.','line_number':1876,'multiline':False]
['text':'/ @param[in]  key  Key to check.','line_number':1877,'multiline':False]
['text':'/','line_number':1878,'multiline':False]
['text':'/ @return true if key matches, false otherwise.','line_number':1879,'multiline':False]
['text':' For now only allow very simple globbing in key patterns: a '*' at the end','line_number':1883,'multiline':False]
['text':' of the string means it should match everything up to the '*' instead of the','line_number':1884,'multiline':False]
['text':' whole string.','line_number':1885,'multiline':False]
['text':'/ Send a change notification to all dictionary watchers that match given key','line_number':1893,'multiline':False]
['text':'/','line_number':1894,'multiline':False]
['text':'/ @param[in]  dict  Dictionary which was modified.','line_number':1895,'multiline':False]
['text':'/ @param[in]  key  Key which was modified.','line_number':1896,'multiline':False]
['text':'/ @param[in]  newtv  New key value.','line_number':1897,'multiline':False]
['text':'/ @param[in]  oldtv  Old key value.','line_number':1898,'multiline':False]
['text':'{{{2 Dictionary item','line_number':1962,'multiline':False]
['text':'/ Allocate a dictionary item','line_number':1964,'multiline':False]
['text':'/','line_number':1965,'multiline':False]
['text':'/ @note that the type and value of the item (->di_tv) still needs to','line_number':1966,'multiline':False]
['text':'/       be initialized.','line_number':1967,'multiline':False]
['text':'/','line_number':1968,'multiline':False]
['text':'/ @param[in]  key  Key, is copied to the new item.','line_number':1969,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':1970,'multiline':False]
['text':'/','line_number':1971,'multiline':False]
['text':'/ @return [allocated] new dictionary item.','line_number':1972,'multiline':False]
['text':'/ Allocate a dictionary item','line_number':1986,'multiline':False]
['text':'/','line_number':1987,'multiline':False]
['text':'/ @note that the type and value of the item (->di_tv) still needs to','line_number':1988,'multiline':False]
['text':'/       be initialized.','line_number':1989,'multiline':False]
['text':'/','line_number':1990,'multiline':False]
['text':'/ @param[in]  key  Key, is copied to the new item.','line_number':1991,'multiline':False]
['text':'/','line_number':1992,'multiline':False]
['text':'/ @return [allocated] new dictionary item.','line_number':1993,'multiline':False]
['text':'/ Free a dictionary item, also clearing the value','line_number':2001,'multiline':False]
['text':'/','line_number':2002,'multiline':False]
['text':'/ @param  item  Item to free.','line_number':2003,'multiline':False]
['text':'/ Make a copy of a dictionary item','line_number':2013,'multiline':False]
['text':'/','line_number':2014,'multiline':False]
['text':'/ @param[in]  di  Item to copy.','line_number':2015,'multiline':False]
['text':'/','line_number':2016,'multiline':False]
['text':'/ @return [allocated] new dictionary item.','line_number':2017,'multiline':False]
['text':'/ Remove item from dictionary and free it','line_number':2026,'multiline':False]
['text':'/','line_number':2027,'multiline':False]
['text':'/ @param  dict  Dictionary to remove item from.','line_number':2028,'multiline':False]
['text':'/ @param  item  Item to remove.','line_number':2029,'multiline':False]
['text':'{{{2 Alloc/free','line_number':2042,'multiline':False]
['text':'/ Allocate an empty dictionary.','line_number':2044,'multiline':False]
['text':'/ Caller should take care of the reference count.','line_number':2045,'multiline':False]
['text':'/','line_number':2046,'multiline':False]
['text':'/ @return [allocated] new dictionary.','line_number':2047,'multiline':False]
['text':' Add the dict to the list of dicts for garbage collection.','line_number':2053,'multiline':False]
['text':'/ Free items contained in a dictionary','line_number':2073,'multiline':False]
['text':'/','line_number':2074,'multiline':False]
['text':'/ @param[in,out]  d  Dictionary to clear.','line_number':2075,'multiline':False]
['text':' Lock the hashtab, we don't want it to resize while freeing items.','line_number':2079,'multiline':False]
['text':' Remove the item before deleting it, just in case there is','line_number':2083,'multiline':False]
['text':' something recursive causing trouble.','line_number':2084,'multiline':False]
['text':'/ Free a dictionary itself, ignoring items it contains','line_number':2102,'multiline':False]
['text':'/','line_number':2103,'multiline':False]
['text':'/ Ignores the reference count.','line_number':2104,'multiline':False]
['text':'/','line_number':2105,'multiline':False]
['text':'/ @param[in,out]  d  Dictionary to free.','line_number':2106,'multiline':False]
['text':' Remove the dict from the list of dicts for garbage collection.','line_number':2110,'multiline':False]
['text':'/ Free a dictionary, including all items it contains','line_number':2124,'multiline':False]
['text':'/','line_number':2125,'multiline':False]
['text':'/ Ignores the reference count.','line_number':2126,'multiline':False]
['text':'/','line_number':2127,'multiline':False]
['text':'/ @param  d  Dictionary to free.','line_number':2128,'multiline':False]
['text':'/ Unreference a dictionary','line_number':2138,'multiline':False]
['text':'/','line_number':2139,'multiline':False]
['text':'/ Decrements the reference count and frees dictionary when it becomes zero.','line_number':2140,'multiline':False]
['text':'/','line_number':2141,'multiline':False]
['text':'/ @param[in]  d  Dictionary to operate on.','line_number':2142,'multiline':False]
['text':'{{{2 Indexing/searching','line_number':2150,'multiline':False]
['text':'/ Find item in dictionary','line_number':2152,'multiline':False]
['text':'/','line_number':2153,'multiline':False]
['text':'/ @param[in]  d  Dictionary to check.','line_number':2154,'multiline':False]
['text':'/ @param[in]  key  Dictionary key.','line_number':2155,'multiline':False]
['text':'/ @param[in]  len  Key length. If negative, then strlen(key) is used.','line_number':2156,'multiline':False]
['text':'/','line_number':2157,'multiline':False]
['text':'/ @return found item or NULL if nothing was found.','line_number':2158,'multiline':False]
['text':'/ Get a typval item from a dictionary and copy it into "rettv".','line_number':2174,'multiline':False]
['text':'/','line_number':2175,'multiline':False]
['text':'/ @param[in]  d  Dictionary to check.','line_number':2176,'multiline':False]
['text':'/ @param[in]  key  Dictionary key.','line_number':2177,'multiline':False]
['text':'/ @param[in]  rettv  Return value.','line_number':2178,'multiline':False]
['text':'/ @return OK in case of success or FAIL if nothing was found.','line_number':2179,'multiline':False]
['text':'/ Get a number item from a dictionary','line_number':2191,'multiline':False]
['text':'/','line_number':2192,'multiline':False]
['text':'/ Returns 0 if the entry does not exist.','line_number':2193,'multiline':False]
['text':'/','line_number':2194,'multiline':False]
['text':'/ @param[in]  d  Dictionary to get item from.','line_number':2195,'multiline':False]
['text':'/ @param[in]  key  Key to find in dictionary.','line_number':2196,'multiline':False]
['text':'/','line_number':2197,'multiline':False]
['text':'/ @return Dictionary item.','line_number':2198,'multiline':False]
['text':'/ Get a number item from a dictionary.','line_number':2205,'multiline':False]
['text':'/','line_number':2206,'multiline':False]
['text':'/ Returns "def" if the entry doesn't exist.','line_number':2207,'multiline':False]
['text':'/','line_number':2208,'multiline':False]
['text':'/ @param[in]  d  Dictionary to get item from.','line_number':2209,'multiline':False]
['text':'/ @param[in]  key  Key to find in dictionary.','line_number':2210,'multiline':False]
['text':'/ @param[in]  def  Default value.','line_number':2211,'multiline':False]
['text':'/','line_number':2212,'multiline':False]
['text':'/ @return Dictionary item.','line_number':2213,'multiline':False]
['text':'/ Converts a dict to an environment','line_number':2234,'multiline':False]
['text':' + 1 for NULL','line_number':2242,'multiline':False]
['text':' must be null terminated','line_number':2254,'multiline':False]
['text':'/ Get a string item from a dictionary','line_number':2259,'multiline':False]
['text':'/','line_number':2260,'multiline':False]
['text':'/ @param[in]  d  Dictionary to get item from.','line_number':2261,'multiline':False]
['text':'/ @param[in]  key  Dictionary key.','line_number':2262,'multiline':False]
['text':'/ @param[in]  save  If true, returned string will be placed in the allocated','line_number':2263,'multiline':False]
['text':'/                   memory.','line_number':2264,'multiline':False]
['text':'/','line_number':2265,'multiline':False]
['text':'/ @return NULL if key does not exist, empty string in case of type error,','line_number':2266,'multiline':False]
['text':'/         string item value otherwise. If returned value is not NULL, it may','line_number':2267,'multiline':False]
['text':'/         be allocated depending on `save` argument.','line_number':2268,'multiline':False]
['text':'/ Get a string item from a dictionary','line_number':2280,'multiline':False]
['text':'/','line_number':2281,'multiline':False]
['text':'/ @param[in]  d  Dictionary to get item from.','line_number':2282,'multiline':False]
['text':'/ @param[in]  key  Dictionary key.','line_number':2283,'multiline':False]
['text':'/ @param[in]  numbuf  Buffer for non-string items converted to strings, at','line_number':2284,'multiline':False]
['text':'/                     least of #NUMBUFLEN length.','line_number':2285,'multiline':False]
['text':'/','line_number':2286,'multiline':False]
['text':'/ @return NULL if key does not exist, empty string in case of type error,','line_number':2287,'multiline':False]
['text':'/         string item value otherwise.','line_number':2288,'multiline':False]
['text':'/ Get a string item from a dictionary','line_number':2299,'multiline':False]
['text':'/','line_number':2300,'multiline':False]
['text':'/ @param[in]  d  Dictionary to get item from.','line_number':2301,'multiline':False]
['text':'/ @param[in]  key  Dictionary key.','line_number':2302,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2303,'multiline':False]
['text':'/ @param[in]  numbuf  Buffer for non-string items converted to strings, at','line_number':2304,'multiline':False]
['text':'/                     least of #NUMBUFLEN length.','line_number':2305,'multiline':False]
['text':'/ @param[in]  def  Default return when key does not exist.','line_number':2306,'multiline':False]
['text':'/','line_number':2307,'multiline':False]
['text':'/ @return `def` when key does not exist,','line_number':2308,'multiline':False]
['text':'/         NULL in case of type error,','line_number':2309,'multiline':False]
['text':'/         string item value in case of success.','line_number':2310,'multiline':False]
['text':'/ Get a function from a dictionary','line_number':2323,'multiline':False]
['text':'/','line_number':2324,'multiline':False]
['text':'/ @param[in]  d  Dictionary to get callback from.','line_number':2325,'multiline':False]
['text':'/ @param[in]  key  Dictionary key.','line_number':2326,'multiline':False]
['text':'/ @param[in]  key_len  Key length, may be -1 to use strlen().','line_number':2327,'multiline':False]
['text':'/ @param[out]  result  The address where a pointer to the wanted callback','line_number':2328,'multiline':False]
['text':'/                      will be left.','line_number':2329,'multiline':False]
['text':'/','line_number':2330,'multiline':False]
['text':'/ @return true/false on success/failure.','line_number':2331,'multiline':False]
['text':'/ Check for adding a function to g: or l:.','line_number':2357,'multiline':False]
['text':'/ If the name is wrong give an error message and return true.','line_number':2358,'multiline':False]
['text':'{{{2 dict_add*','line_number':2366,'multiline':False]
['text':'/ Add item to dictionary','line_number':2368,'multiline':False]
['text':'/','line_number':2369,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add to.','line_number':2370,'multiline':False]
['text':'/ @param[in]  item  Item to add.','line_number':2371,'multiline':False]
['text':'/','line_number':2372,'multiline':False]
['text':'/ @return FAIL if key already exists.','line_number':2373,'multiline':False]
['text':'/ Add a list entry to dictionary','line_number':2383,'multiline':False]
['text':'/','line_number':2384,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2385,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2386,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2387,'multiline':False]
['text':'/ @param  list  List to add. Will have reference count incremented.','line_number':2388,'multiline':False]
['text':'/','line_number':2389,'multiline':False]
['text':'/ @return OK in case of success, FAIL when key already exists.','line_number':2390,'multiline':False]
['text':'/ Add a typval entry to dictionary.','line_number':2407,'multiline':False]
['text':'/','line_number':2408,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2409,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2410,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2411,'multiline':False]
['text':'/','line_number':2412,'multiline':False]
['text':'/ @return FAIL if out of memory or key already exists.','line_number':2413,'multiline':False]
['text':'/ Add a dictionary entry to dictionary','line_number':2426,'multiline':False]
['text':'/','line_number':2427,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2428,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2429,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2430,'multiline':False]
['text':'/ @param  dict  Dictionary to add. Will have reference count incremented.','line_number':2431,'multiline':False]
['text':'/','line_number':2432,'multiline':False]
['text':'/ @return OK in case of success, FAIL when key already exists.','line_number':2433,'multiline':False]
['text':'/ Add a number entry to dictionary','line_number':2450,'multiline':False]
['text':'/','line_number':2451,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2452,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2453,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2454,'multiline':False]
['text':'/ @param[in]  nr  Number to add.','line_number':2455,'multiline':False]
['text':'/','line_number':2456,'multiline':False]
['text':'/ @return OK in case of success, FAIL when key already exists.','line_number':2457,'multiline':False]
['text':'/ Add a floating point number entry to dictionary','line_number':2472,'multiline':False]
['text':'/','line_number':2473,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2474,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2475,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2476,'multiline':False]
['text':'/ @param[in]  nr  Floating point number to add.','line_number':2477,'multiline':False]
['text':'/','line_number':2478,'multiline':False]
['text':'/ @return OK in case of success, FAIL when key already exists.','line_number':2479,'multiline':False]
['text':'/ Add a boolean entry to dictionary','line_number':2494,'multiline':False]
['text':'/','line_number':2495,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2496,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2497,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2498,'multiline':False]
['text':'/ @param[in]  val BoolVarValue to add.','line_number':2499,'multiline':False]
['text':'/','line_number':2500,'multiline':False]
['text':'/ @return OK in case of success, FAIL when key already exists.','line_number':2501,'multiline':False]
['text':'/ Add a string entry to dictionary','line_number':2515,'multiline':False]
['text':'/','line_number':2516,'multiline':False]
['text':'/ @see tv_dict_add_allocated_str','line_number':2517,'multiline':False]
['text':'/ Add a string entry to dictionary','line_number':2525,'multiline':False]
['text':'/','line_number':2526,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2527,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2528,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2529,'multiline':False]
['text':'/ @param[in]  val  String to add. NULL adds empty string.','line_number':2530,'multiline':False]
['text':'/ @param[in]  len  Use this many bytes from `val`, or -1 for whole string.','line_number':2531,'multiline':False]
['text':'/','line_number':2532,'multiline':False]
['text':'/ @return OK in case of success, FAIL when key already exists.','line_number':2533,'multiline':False]
['text':'/ Add a string entry to dictionary','line_number':2545,'multiline':False]
['text':'/','line_number':2546,'multiline':False]
['text':'/ Unlike tv_dict_add_str() saves val to the new dictionary item in place of','line_number':2547,'multiline':False]
['text':'/ creating a new copy.','line_number':2548,'multiline':False]
['text':'/','line_number':2549,'multiline':False]
['text':'/ @warning String will be freed even in case addition fails.','line_number':2550,'multiline':False]
['text':'/','line_number':2551,'multiline':False]
['text':'/ @param[out]  d  Dictionary to add entry to.','line_number':2552,'multiline':False]
['text':'/ @param[in]  key  Key to add.','line_number':2553,'multiline':False]
['text':'/ @param[in]  key_len  Key length.','line_number':2554,'multiline':False]
['text':'/ @param[in]  val  String to add.','line_number':2555,'multiline':False]
['text':'/','line_number':2556,'multiline':False]
['text':'/ @return OK in case of success, FAIL when key already exists.','line_number':2557,'multiline':False]
['text':'{{{2 Operations on the whole dict','line_number':2573,'multiline':False]
['text':'/ Clear all the keys of a Dictionary. "d" remains a valid empty Dictionary.','line_number':2575,'multiline':False]
['text':'/','line_number':2576,'multiline':False]
['text':'/ @param  d  The Dictionary to clear','line_number':2577,'multiline':False]
['text':'/ Extend dictionary with items from another dictionary','line_number':2592,'multiline':False]
['text':'/','line_number':2593,'multiline':False]
['text':'/ @param  d1  Dictionary to extend.','line_number':2594,'multiline':False]
['text':'/ @param[in]  d2  Dictionary to extend with.','line_number':2595,'multiline':False]
['text':'/ @param[in]  action  "error", "force", "move", "keep":','line_number':2596,'multiline':False]
['text':'/                     e*, including "error": duplicate key gives an error.','line_number':2597,'multiline':False]
['text':'/                     f*, including "force": duplicate d2 keys override d1.','line_number':2598,'multiline':False]
['text':'/                     m*, including "move": move items instead of copying.','line_number':2599,'multiline':False]
['text':'/                     other, including "keep": duplicate d2 keys ignored.','line_number':2600,'multiline':False]
['text':' don't rehash on hash_remove()','line_number':2609,'multiline':False]
['text':' Check the key to be valid when adding to any scope.','line_number':2615,'multiline':False]
['text':' Cheap way to move a dict item from "d2" to "d1".','line_number':2621,'multiline':False]
['text':' If dict_add() fails then "d2" won't be empty.','line_number':2622,'multiline':False]
['text':' Disallow replacing a builtin function.','line_number':2646,'multiline':False]
['text':'/ Compare two dictionaries','line_number':2670,'multiline':False]
['text':'/','line_number':2671,'multiline':False]
['text':'/ @param[in]  d1  First dictionary.','line_number':2672,'multiline':False]
['text':'/ @param[in]  d2  Second dictionary.','line_number':2673,'multiline':False]
['text':'/ @param[in]  ic  True if case is to be ignored.','line_number':2674,'multiline':False]
['text':'/ @param[in]  recursive  True when used recursively.','line_number':2675,'multiline':False]
['text':' empty and NULL dicts are considered equal','line_number':2686,'multiline':False]
['text':'/ Make a copy of dictionary','line_number':2705,'multiline':False]
['text':'/','line_number':2706,'multiline':False]
['text':'/ @param[in]  conv  If non-NULL, then all internal strings will be converted.','line_number':2707,'multiline':False]
['text':'/ @param[in]  orig  Original dictionary to copy.','line_number':2708,'multiline':False]
['text':'/ @param[in]  deep  If false, then shallow copy will be done.','line_number':2709,'multiline':False]
['text':'/ @param[in]  copyID  See var_item_copy().','line_number':2710,'multiline':False]
['text':'/','line_number':2711,'multiline':False]
['text':'/ @return Copied dictionary. May be NULL in case original dictionary is NULL','line_number':2712,'multiline':False]
['text':'/         or some failure happens. The refcount of the new dictionary is set','line_number':2713,'multiline':False]
['text':'/         to 1.','line_number':2714,'multiline':False]
['text':'/ Set all existing keys in "dict" as read-only.','line_number':2768,'multiline':False]
['text':'/','line_number':2769,'multiline':False]
['text':'/ This does not protect against adding new keys to the Dictionary.','line_number':2770,'multiline':False]
['text':'/','line_number':2771,'multiline':False]
['text':'/ @param  dict  The dict whose keys should be frozen.','line_number':2772,'multiline':False]
['text':'{{{1 Blobs','line_number':2781,'multiline':False]
['text':'{{{2 Alloc/free','line_number':2782,'multiline':False]
['text':'/ Allocate an empty blob.','line_number':2784,'multiline':False]
['text':'/','line_number':2785,'multiline':False]
['text':'/ Caller should take care of the reference count.','line_number':2786,'multiline':False]
['text':'/','line_number':2787,'multiline':False]
['text':'/ @return [allocated] new blob.','line_number':2788,'multiline':False]
['text':'/ Free a blob. Ignores the reference count.','line_number':2797,'multiline':False]
['text':'/','line_number':2798,'multiline':False]
['text':'/ @param[in,out]  b  Blob to free.','line_number':2799,'multiline':False]
['text':'/ Unreference a blob.','line_number':2807,'multiline':False]
['text':'/','line_number':2808,'multiline':False]
['text':'/ Decrements the reference count and frees blob when it becomes zero.','line_number':2809,'multiline':False]
['text':'/','line_number':2810,'multiline':False]
['text':'/ @param[in,out]  b  Blob to operate on.','line_number':2811,'multiline':False]
['text':'{{{2 Operations on the whole blob','line_number':2819,'multiline':False]
['text':'/ Check whether two blobs are equal.','line_number':2821,'multiline':False]
['text':'/','line_number':2822,'multiline':False]
['text':'/ @param[in]  b1  First blob.','line_number':2823,'multiline':False]
['text':'/ @param[in]  b2  Second blob.','line_number':2824,'multiline':False]
['text':'/','line_number':2825,'multiline':False]
['text':'/ @return true if blobs are equal, false otherwise.','line_number':2826,'multiline':False]
['text':' empty and NULL are considered the same','line_number':2833,'multiline':False]
['text':'/ Returns a slice of "blob" from index "n1" to "n2" in "rettv".  The length of','line_number':2852,'multiline':False]
['text':'/ the blob is "len".  Returns an empty blob if the indexes are out of range.','line_number':2853,'multiline':False]
['text':' The resulting variable is a sub-blob.  If the indexes','line_number':2857,'multiline':False]
['text':' are out of range the result is empty.','line_number':2858,'multiline':False]
['text':'/ Return the byte value in "blob" at index "idx" in "rettv".  If the index is','line_number':2891,'multiline':False]
['text':'/ too big or negative that is an error.  The length of the blob is "len".','line_number':2892,'multiline':False]
['text':' The resulting variable is a byte value.','line_number':2895,'multiline':False]
['text':' If the index is too big or negative that is an error.','line_number':2896,'multiline':False]
['text':'/ Check if "n1" is a valid index for a blob with length "bloblen".','line_number':2925,'multiline':False]
['text':'/ Check if "n1"-"n2" is a valid range for a blob with length "bloblen".','line_number':2937,'multiline':False]
['text':'/ Set bytes "n1" to "n2" (inclusive) in "dest" to the value of "src".','line_number':2949,'multiline':False]
['text':'/ Caller must make sure "src" is a blob.','line_number':2950,'multiline':False]
['text':'/ Returns FAIL if the number of bytes does not match.','line_number':2951,'multiline':False]
['text':'/ Store one byte "byte" in blob "blob" at "idx".','line_number':2965,'multiline':False]
['text':'/ Append one byte if needed.','line_number':2966,'multiline':False]
['text':' Allow for appending a byte.  Setting a byte beyond','line_number':2971,'multiline':False]
['text':' the end is an error otherwise.','line_number':2972,'multiline':False]
['text':'/ "remove({blob})" function','line_number':2982,'multiline':False]
['text':' count from the end','line_number':2998,'multiline':False]
['text':' Remove one item, return its value.','line_number':3006,'multiline':False]
['text':' Remove range of items, return blob with values.','line_number':3012,'multiline':False]
['text':' count from the end','line_number':3018,'multiline':False]
['text':'/ blob2list() function','line_number':3041,'multiline':False]
['text':'/ list2blob() function','line_number':3057,'multiline':False]
['text':'{{{1 Generic typval operations','line_number':3086,'multiline':False]
['text':'{{{2 Init/alloc/clear','line_number':3087,'multiline':False]
['text':'{{{3 Alloc','line_number':3088,'multiline':False]
['text':'/ Allocate an empty list for a return value','line_number':3090,'multiline':False]
['text':'/','line_number':3091,'multiline':False]
['text':'/ Also sets reference count.','line_number':3092,'multiline':False]
['text':'/','line_number':3093,'multiline':False]
['text':'/ @param[out]  ret_tv  Structure where list is saved.','line_number':3094,'multiline':False]
['text':'/ @param[in]  len  Expected number of items to be populated before list','line_number':3095,'multiline':False]
['text':'/                  becomes accessible from Vimscript. It is still valid to','line_number':3096,'multiline':False]
['text':'/                  underpopulate a list, value only controls how many elements','line_number':3097,'multiline':False]
['text':'/                  will be allocated in advance. @see ListLenSpecials.','line_number':3098,'multiline':False]
['text':'/','line_number':3099,'multiline':False]
['text':'/ @return [allocated] pointer to the created list.','line_number':3100,'multiline':False]
['text':'/ Allocate an empty dictionary for a return value','line_number':3118,'multiline':False]
['text':'/','line_number':3119,'multiline':False]
['text':'/ Also sets reference count.','line_number':3120,'multiline':False]
['text':'/','line_number':3121,'multiline':False]
['text':'/ @param[out]  ret_tv  Structure where dictionary is saved.','line_number':3122,'multiline':False]
['text':'/ Turn a dictionary into a list','line_number':3130,'multiline':False]
['text':'/','line_number':3131,'multiline':False]
['text':'/ @param[in] tv      Dictionary to convert. Is checked for actually being','line_number':3132,'multiline':False]
['text':'/                    a dictionary, will give an error if not.','line_number':3133,'multiline':False]
['text':'/ @param[out] rettv  Location where result will be saved.','line_number':3134,'multiline':False]
['text':'/ @param[in] what    What to save in rettv.','line_number':3135,'multiline':False]
['text':' NULL dict behaves like an empty dict','line_number':3145,'multiline':False]
['text':' items()','line_number':3161,'multiline':False]
['text':'/ "items(dict)" function','line_number':3183,'multiline':False]
['text':'/ "keys()" function','line_number':3189,'multiline':False]
['text':'/ "values(dict)" function','line_number':3195,'multiline':False]
['text':'/ "has_key()" function','line_number':3201,'multiline':False]
['text':'/ "remove({dict})" function','line_number':3217,'multiline':False]
['text':'/ Allocate an empty blob for a return value.','line_number':3243,'multiline':False]
['text':'/','line_number':3244,'multiline':False]
['text':'/ Also sets reference count.','line_number':3245,'multiline':False]
['text':'/','line_number':3246,'multiline':False]
['text':'/ @param[out]  ret_tv  Structure where blob is saved.','line_number':3247,'multiline':False]
['text':'/ Copy a blob typval to a different typval.','line_number':3255,'multiline':False]
['text':'/','line_number':3256,'multiline':False]
['text':'/ @param[in]  from  Blob object to copy from.','line_number':3257,'multiline':False]
['text':'/ @param[out]  to  Blob object to copy to.','line_number':3258,'multiline':False]
['text':'{{{3 Clear','line_number':3278,'multiline':False]
['text':' Dictionary should already be freed by the time.','line_number':3364,'multiline':False]
['text':' If it was not freed then it is a part of the reference cycle.','line_number':3365,'multiline':False]
['text':' As well as all arguments.','line_number':3368,'multiline':False]
['text':'/ Free memory for a variable value and set the value to NULL or 0','line_number':3523,'multiline':False]
['text':'/','line_number':3524,'multiline':False]
['text':'/ @param[in,out]  tv  Value to free.','line_number':3525,'multiline':False]
['text':' WARNING: do not translate the string here, gettext is slow and function','line_number':3532,'multiline':False]
['text':' is used *very* often. At the current state encode_vim_to_nothing() does','line_number':3533,'multiline':False]
['text':' not error out and does not use the argument anywhere.','line_number':3534,'multiline':False]
['text':'','line_number':3535,'multiline':False]
['text':' If situation changes and this argument will be used, translate it in the','line_number':3536,'multiline':False]
['text':' place where it is used.','line_number':3537,'multiline':False]
['text':'{{{3 Free','line_number':3543,'multiline':False]
['text':'/ Free allocated Vimscript object and value stored inside','line_number':3545,'multiline':False]
['text':'/','line_number':3546,'multiline':False]
['text':'/ @param  tv  Object to free.','line_number':3547,'multiline':False]
['text':'{{{3 Copy','line_number':3583,'multiline':False]
['text':'/ Copy typval from one location to another','line_number':3585,'multiline':False]
['text':'/','line_number':3586,'multiline':False]
['text':'/ When needed allocates string or increases reference count. Does not make','line_number':3587,'multiline':False]
['text':'/ a copy of a container, but copies its reference!','line_number':3588,'multiline':False]
['text':'/','line_number':3589,'multiline':False]
['text':'/ It is OK for `from` and `to` to point to the same location; this is used to','line_number':3590,'multiline':False]
['text':'/ make a copy later.','line_number':3591,'multiline':False]
['text':'/','line_number':3592,'multiline':False]
['text':'/ @param[in]  from  Location to copy from.','line_number':3593,'multiline':False]
['text':'/ @param[out]  to  Location to copy to.','line_number':3594,'multiline':False]
['text':'{{{2 Locks','line_number':3639,'multiline':False]
['text':'/ Lock or unlock an item','line_number':3641,'multiline':False]
['text':'/','line_number':3642,'multiline':False]
['text':'/ @param[out]  tv  Item to (un)lock.','line_number':3643,'multiline':False]
['text':'/ @param[in]  deep  Levels to (un)lock, -1 to (un)lock everything.','line_number':3644,'multiline':False]
['text':'/ @param[in]  lock  True if it is needed to lock an item, false to unlock.','line_number':3645,'multiline':False]
['text':'/ @param[in]  check_refcount  If true, do not lock a list or dict with a','line_number':3646,'multiline':False]
['text':'/                             reference count larger than 1.','line_number':3647,'multiline':False]
['text':' TODO(ZyX-I): Make this not recursive','line_number':3651,'multiline':False]
['text':' lock/unlock the item itself','line_number':3663,'multiline':False]
['text':' Recursive: lock/unlock the items the List contains.','line_number':3687,'multiline':False]
['text':' recursive: lock/unlock the items the List contains','line_number':3700,'multiline':False]
['text':'/ Check whether Vimscript value is locked itself or refers to a locked container','line_number':3723,'multiline':False]
['text':'/','line_number':3724,'multiline':False]
['text':'/ @warning Fixed container is not the same as locked.','line_number':3725,'multiline':False]
['text':'/','line_number':3726,'multiline':False]
['text':'/ @param[in]  tv  Value to check.','line_number':3727,'multiline':False]
['text':'/','line_number':3728,'multiline':False]
['text':'/ @return True if value is locked, false otherwise.','line_number':3729,'multiline':False]
['text':'/ Return true if typval is locked','line_number':3741,'multiline':False]
['text':'/','line_number':3742,'multiline':False]
['text':'/ Also gives an error message when typval is locked.','line_number':3743,'multiline':False]
['text':'/','line_number':3744,'multiline':False]
['text':'/ @param[in]  tv  Typval.','line_number':3745,'multiline':False]
['text':'/ @param[in]  name  Variable name, used in the error message.','line_number':3746,'multiline':False]
['text':'/ @param[in]  name_len  Variable name length. Use #TV_TRANSLATE to translate','line_number':3747,'multiline':False]
['text':'/                       variable name and compute the length. Use #TV_CSTRING','line_number':3748,'multiline':False]
['text':'/                       to compute the length with strlen() without','line_number':3749,'multiline':False]
['text':'/                       translating.','line_number':3750,'multiline':False]
['text':'/','line_number':3751,'multiline':False]
['text':'/                       Both #TV_… values are used for optimization purposes:','line_number':3752,'multiline':False]
['text':'/                       variable name with its length is needed only in case','line_number':3753,'multiline':False]
['text':'/                       of error, when no error occurs computing them is','line_number':3754,'multiline':False]
['text':'/                       a waste of CPU resources. This especially applies to','line_number':3755,'multiline':False]
['text':'/                       gettext.','line_number':3756,'multiline':False]
['text':'/','line_number':3757,'multiline':False]
['text':'/ @return true if variable is locked, false otherwise.','line_number':3758,'multiline':False]
['text':'/ @return true if variable "name" has a locked (immutable) value','line_number':3787,'multiline':False]
['text':'{{{2 Comparison','line_number':3818,'multiline':False]
['text':'/ Compare two Vimscript values','line_number':3822,'multiline':False]
['text':'/','line_number':3823,'multiline':False]
['text':'/ Like "==", but strings and numbers are different, as well as floats and','line_number':3824,'multiline':False]
['text':'/ numbers.','line_number':3825,'multiline':False]
['text':'/','line_number':3826,'multiline':False]
['text':'/ @warning Too nested structures may be considered equal even if they are not.','line_number':3827,'multiline':False]
['text':'/','line_number':3828,'multiline':False]
['text':'/ @param[in]  tv1  First value to compare.','line_number':3829,'multiline':False]
['text':'/ @param[in]  tv2  Second value to compare.','line_number':3830,'multiline':False]
['text':'/ @param[in]  ic  True if case is to be ignored.','line_number':3831,'multiline':False]
['text':'/ @param[in]  recursive  True when used recursively.','line_number':3832,'multiline':False]
['text':'/','line_number':3833,'multiline':False]
['text':'/ @return true if values are equal.','line_number':3834,'multiline':False]
['text':' TODO(ZyX-I): Make this not recursive','line_number':3838,'multiline':False]
['text':' Catch recursive loops.','line_number':3839,'multiline':False]
['text':' Catch lists and dicts that have an endless loop by limiting','line_number':3845,'multiline':False]
['text':' recursiveness to a limit.  We guess they are equal then.','line_number':3846,'multiline':False]
['text':' A fixed limit has the problem of still taking an awful long time.','line_number':3847,'multiline':False]
['text':' Reduce the limit every time running into it. That should work fine for','line_number':3848,'multiline':False]
['text':' deeply linked structures that are not recursively linked and catch','line_number':3849,'multiline':False]
['text':' recursiveness quickly.','line_number':3850,'multiline':False]
['text':' VAR_UNKNOWN can be the result of an invalid expression, let’s say it','line_number':3903,'multiline':False]
['text':' does not equal anything, not even self.','line_number':3904,'multiline':False]
['text':'{{{2 Type checks','line_number':3912,'multiline':False]
['text':'/ Check that given value is a number or string','line_number':3914,'multiline':False]
['text':'/','line_number':3915,'multiline':False]
['text':'/ Error messages are compatible with tv_get_number() previously used for the','line_number':3916,'multiline':False]
['text':'/ same purpose in buf*() functions. Special values are not accepted (previous','line_number':3917,'multiline':False]
['text':'/ behaviour: silently fail to find buffer).','line_number':3918,'multiline':False]
['text':'/','line_number':3919,'multiline':False]
['text':'/ @param[in]  tv  Value to check.','line_number':3920,'multiline':False]
['text':'/','line_number':3921,'multiline':False]
['text':'/ @return true if everything is OK, false otherwise.','line_number':3922,'multiline':False]
['text':'/ Check that given value is a number or can be converted to it','line_number':3974,'multiline':False]
['text':'/','line_number':3975,'multiline':False]
['text':'/ Error messages are compatible with tv_get_number_chk() previously used for','line_number':3976,'multiline':False]
['text':'/ the same purpose.','line_number':3977,'multiline':False]
['text':'/','line_number':3978,'multiline':False]
['text':'/ @param[in]  tv  Value to check.','line_number':3979,'multiline':False]
['text':'/','line_number':3980,'multiline':False]
['text':'/ @return true if everything is OK, false otherwise.','line_number':3981,'multiline':False]
['text':'/ Check that given value is a Vimscript String or can be "cast" to it.','line_number':4018,'multiline':False]
['text':'/','line_number':4019,'multiline':False]
['text':'/ Error messages are compatible with tv_get_string_chk() previously used for','line_number':4020,'multiline':False]
['text':'/ the same purpose.','line_number':4021,'multiline':False]
['text':'/','line_number':4022,'multiline':False]
['text':'/ @param[in]  tv  Value to check.','line_number':4023,'multiline':False]
['text':'/','line_number':4024,'multiline':False]
['text':'/ @return true if everything is OK, false otherwise.','line_number':4025,'multiline':False]
['text':'{{{2 Get','line_number':4049,'multiline':False]
['text':'/ Get the number value of a Vimscript object','line_number':4051,'multiline':False]
['text':'/','line_number':4052,'multiline':False]
['text':'/ @note Use tv_get_number_chk() if you need to determine whether there was an','line_number':4053,'multiline':False]
['text':'/       error.','line_number':4054,'multiline':False]
['text':'/','line_number':4055,'multiline':False]
['text':'/ @param[in]  tv  Object to get value from.','line_number':4056,'multiline':False]
['text':'/','line_number':4057,'multiline':False]
['text':'/ @return Number value: vim_str2nr() output for VAR_STRING objects, value','line_number':4058,'multiline':False]
['text':'/         for VAR_NUMBER objects, -1 for other types.','line_number':4059,'multiline':False]
['text':'/ Get the number value of a Vimscript object','line_number':4067,'multiline':False]
['text':'/','line_number':4068,'multiline':False]
['text':'/ @param[in]  tv  Object to get value from.','line_number':4069,'multiline':False]
['text':'/ @param[out]  ret_error  If type error occurred then `true` will be written','line_number':4070,'multiline':False]
['text':'/                         to this location. Otherwise it is not touched.','line_number':4071,'multiline':False]
['text':'/','line_number':4072,'multiline':False]
['text':'/                         @note Needs to be initialized to `false` to be','line_number':4073,'multiline':False]
['text':'/                               useful.','line_number':4074,'multiline':False]
['text':'/','line_number':4075,'multiline':False]
['text':'/ @return Number value: vim_str2nr() output for VAR_STRING objects, value','line_number':4076,'multiline':False]
['text':'/         for VAR_NUMBER objects, -1 (ret_error == NULL) or 0 (otherwise) for','line_number':4077,'multiline':False]
['text':'/         other types.','line_number':4078,'multiline':False]
['text':'/ Get the line number from Vimscript object','line_number':4126,'multiline':False]
['text':'/','line_number':4127,'multiline':False]
['text':'/ @param[in]  tv  Object to get value from. Is expected to be a number or','line_number':4128,'multiline':False]
['text':'/                 a special string like ".", "$", … (works with current buffer','line_number':4129,'multiline':False]
['text':'/                 only).','line_number':4130,'multiline':False]
['text':'/','line_number':4131,'multiline':False]
['text':'/ @return Line number or -1 or 0.','line_number':4132,'multiline':False]
['text':' No valid number, try using same function as line() does.','line_number':4140,'multiline':False]
['text':'/ Get the floating-point value of a Vimscript object','line_number':4149,'multiline':False]
['text':'/','line_number':4150,'multiline':False]
['text':'/ Raises an error if object is not number or floating-point.','line_number':4151,'multiline':False]
['text':'/','line_number':4152,'multiline':False]
['text':'/ @param[in]  tv  Object to get value of.','line_number':4153,'multiline':False]
['text':'/','line_number':4154,'multiline':False]
['text':'/ @return Floating-point value of the variable or zero.','line_number':4155,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a string.','line_number':4193,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a non-empty string.','line_number':4204,'multiline':False]
['text':'/ Check for an optional string argument at "idx"','line_number':4218,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a number.','line_number':4226,'multiline':False]
['text':'/ Check for an optional number argument at "idx"','line_number':4237,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a float or a number.','line_number':4245,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a bool.','line_number':4256,'multiline':False]
['text':'/ Check for an optional bool argument at "idx".','line_number':4270,'multiline':False]
['text':'/ Return FAIL if the type is wrong.','line_number':4271,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a blob.','line_number':4281,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a list.','line_number':4292,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a dict.','line_number':4303,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a non-NULL dict.','line_number':4314,'multiline':False]
['text':'/ Check for an optional dict argument at "idx"','line_number':4328,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a string or','line_number':4336,'multiline':False]
['text':'/ a number.','line_number':4337,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a string or a list.','line_number':4348,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a string, a list or a blob.','line_number':4359,'multiline':False]
['text':'/ Check for an optional string or list argument at "idx"','line_number':4372,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a string','line_number':4380,'multiline':False]
['text':'/ or a function reference.','line_number':4381,'multiline':False]
['text':'/ Give an error and return FAIL unless "args[idx]" is a list or a blob.','line_number':4394,'multiline':False]
['text':'/ Get the string value of a "stringish" Vimscript object.','line_number':4405,'multiline':False]
['text':'/','line_number':4406,'multiline':False]
['text':'/ @param[in]  tv  Object to get value of.','line_number':4407,'multiline':False]
['text':'/ @param  buf  Buffer used to hold numbers and special variables converted to','line_number':4408,'multiline':False]
['text':'/              string. When function encounters one of these stringified value','line_number':4409,'multiline':False]
['text':'/              will be written to buf and buf will be returned.','line_number':4410,'multiline':False]
['text':'/','line_number':4411,'multiline':False]
['text':'/              Buffer must have NUMBUFLEN size.','line_number':4412,'multiline':False]
['text':'/','line_number':4413,'multiline':False]
['text':'/ @return Object value if it is VAR_STRING object, number converted to','line_number':4414,'multiline':False]
['text':'/         a string for VAR_NUMBER, v: variable name for VAR_SPECIAL or NULL.','line_number':4415,'multiline':False]
['text':'/ Get the string value of a "stringish" Vimscript object.','line_number':4450,'multiline':False]
['text':'/','line_number':4451,'multiline':False]
['text':'/ @warning For number and special values it uses a single, static buffer. It','line_number':4452,'multiline':False]
['text':'/          may be used only once, next call to tv_get_string may reuse it. Use','line_number':4453,'multiline':False]
['text':'/          tv_get_string_buf() if you need to use tv_get_string() output after','line_number':4454,'multiline':False]
['text':'/          calling it again.','line_number':4455,'multiline':False]
['text':'/','line_number':4456,'multiline':False]
['text':'/ @param[in]  tv  Object to get value of.','line_number':4457,'multiline':False]
['text':'/','line_number':4458,'multiline':False]
['text':'/ @return Object value if it is VAR_STRING object, number converted to','line_number':4459,'multiline':False]
['text':'/         a string for VAR_NUMBER, v: variable name for VAR_SPECIAL or NULL.','line_number':4460,'multiline':False]
['text':'/ Get the string value of a "stringish" Vimscript object.','line_number':4469,'multiline':False]
['text':'/','line_number':4470,'multiline':False]
['text':'/ @warning For number and special values it uses a single, static buffer. It','line_number':4471,'multiline':False]
['text':'/          may be used only once, next call to tv_get_string may reuse it. Use','line_number':4472,'multiline':False]
['text':'/          tv_get_string_buf() if you need to use tv_get_string() output after','line_number':4473,'multiline':False]
['text':'/          calling it again.','line_number':4474,'multiline':False]
['text':'/','line_number':4475,'multiline':False]
['text':'/ @note tv_get_string_chk() and tv_get_string_buf_chk() are similar, but','line_number':4476,'multiline':False]
['text':'/       return NULL on error.','line_number':4477,'multiline':False]
['text':'/','line_number':4478,'multiline':False]
['text':'/ @param[in]  tv  Object to get value of.','line_number':4479,'multiline':False]
['text':'/','line_number':4480,'multiline':False]
['text':'/ @return Object value if it is VAR_STRING object, number converted to','line_number':4481,'multiline':False]
['text':'/         a string for VAR_NUMBER, v: variable name for VAR_SPECIAL or empty','line_number':4482,'multiline':False]
['text':'/         string.','line_number':4483,'multiline':False]
['text':'/ Get the string value of a "stringish" Vimscript object.','line_number':4491,'multiline':False]
['text':'/','line_number':4492,'multiline':False]
['text':'/ @note tv_get_string_chk() and tv_get_string_buf_chk() are similar, but','line_number':4493,'multiline':False]
['text':'/       return NULL on error.','line_number':4494,'multiline':False]
['text':'/','line_number':4495,'multiline':False]
['text':'/ @param[in]  tv  Object to get value of.','line_number':4496,'multiline':False]
['text':'/ @param  buf  Buffer used to hold numbers and special variables converted to','line_number':4497,'multiline':False]
['text':'/              string. When function encounters one of these stringified value','line_number':4498,'multiline':False]
['text':'/              will be written to buf and buf will be returned.','line_number':4499,'multiline':False]
['text':'/','line_number':4500,'multiline':False]
['text':'/              Buffer must have NUMBUFLEN size.','line_number':4501,'multiline':False]
['text':'/','line_number':4502,'multiline':False]
['text':'/ @return Object value if it is VAR_STRING object, number converted to','line_number':4503,'multiline':False]
['text':'/         a string for VAR_NUMBER, v: variable name for VAR_SPECIAL or empty','line_number':4504,'multiline':False]
['text':'/         string.','line_number':4505,'multiline':False]
['text':'/ Return true when "tv" is not falsy: non-zero, non-empty string, non-empty','line_number':4514,'multiline':False]
['text':'/ list, etc.  Mostly like what JavaScript does, except that empty list and','line_number':4515,'multiline':False]
['text':'/ empty dictionary are false.','line_number':4516,'multiline':False]
