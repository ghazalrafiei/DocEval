['text':'/ @file encode.c','line_number':1,'multiline':False]
['text':'/','line_number':2,'multiline':False]
['text':'/ File containing functions for encoding and decoding Vimscript values.','line_number':3,'multiline':False]
['text':'/','line_number':4,'multiline':False]
['text':'/ Split out from eval.c.','line_number':5,'multiline':False]
['text':' For _()','line_number':33,'multiline':False]
['text':'/ Msgpack callback for writing to a Blob','line_number':48,'multiline':False]
['text':'/ Msgpack callback for writing to readfile()-style list','line_number':56,'multiline':False]
['text':' Continue the last list element','line_number':68,'multiline':False]
['text':'/ Abort conversion to string after a recursion error.','line_number':102,'multiline':False]
['text':'/ Show a error message when converting to msgpack value','line_number':105,'multiline':False]
['text':'/','line_number':106,'multiline':False]
['text':'/ @param[in]  msg  Error message to dump. Must contain exactly two %s that','line_number':107,'multiline':False]
['text':'/                  will be replaced with what was being dumped: first with','line_number':108,'multiline':False]
['text':'/                  something like “F” or “function argument”, second with path','line_number':109,'multiline':False]
['text':'/                  to the failed value.','line_number':110,'multiline':False]
['text':'/ @param[in]  mpstack  Path to the failed value.','line_number':111,'multiline':False]
['text':'/ @param[in]  objname  Dumped object name.','line_number':112,'multiline':False]
['text':'/','line_number':113,'multiline':False]
['text':'/ @return FAIL.','line_number':114,'multiline':False]
['text':'/ Convert readfile()-style list to a char * buffer with length','line_number':207,'multiline':False]
['text':'/','line_number':208,'multiline':False]
['text':'/ @param[in]  list  Converted list.','line_number':209,'multiline':False]
['text':'/ @param[out]  ret_len  Resulting buffer length.','line_number':210,'multiline':False]
['text':'/ @param[out]  ret_buf  Allocated buffer with the result or NULL if ret_len is','line_number':211,'multiline':False]
['text':'/                       zero.','line_number':212,'multiline':False]
['text':'/','line_number':213,'multiline':False]
['text':'/ @return true in case of success, false in case of failure.','line_number':214,'multiline':False]
['text':'/ Read bytes from list','line_number':247,'multiline':False]
['text':'/','line_number':248,'multiline':False]
['text':'/ @param[in,out]  state  Structure describing position in list from which','line_number':249,'multiline':False]
['text':'/                        reading should start. Is updated to reflect position','line_number':250,'multiline':False]
['text':'/                        at which reading ended.','line_number':251,'multiline':False]
['text':'/ @param[out]  buf  Buffer to write to.','line_number':252,'multiline':False]
['text':'/ @param[in]  nbuf  Buffer length.','line_number':253,'multiline':False]
['text':'/ @param[out]  read_bytes  Is set to amount of bytes read.','line_number':254,'multiline':False]
['text':'/','line_number':255,'multiline':False]
['text':'/ @return OK when reading was finished, FAIL in case of error (i.e. list item','line_number':256,'multiline':False]
['text':'/         was not a string), NOTDONE if reading was successful, but there are','line_number':257,'multiline':False]
['text':'/         more bytes to read.','line_number':258,'multiline':False]
['text':' Allocate space for "0z", the two hex chars per byte, and a ','line_number':328,'multiline':True]
['text':' "." separator after every eight hex chars. ','line_number':329,'multiline':True]
['text':' Example: "0z00112233.44556677.8899" ','line_number':330,'multiline':True]
['text':' Only give this message once for a recursive call to avoid ','line_number':448,'multiline':True]
['text':' flooding the user with errors. ','line_number':449,'multiline':True]
['text':' Only give this message once for a recursive call to avoid ','line_number':528,'multiline':True]
['text':' flooding the user with errors. ','line_number':529,'multiline':True]
['text':'/ Escape sequences used in JSON','line_number':577,'multiline':False]
['text':'/ Convert given string to JSON string','line_number':590,'multiline':False]
['text':'/','line_number':591,'multiline':False]
['text':'/ @param[out]  gap  Garray where result will be saved.','line_number':592,'multiline':False]
['text':'/ @param[in]  buf  Converted string.','line_number':593,'multiline':False]
['text':'/ @param[in]  len  Converted string length.','line_number':594,'multiline':False]
['text':'/','line_number':595,'multiline':False]
['text':'/ @return OK in case of success, FAIL otherwise.','line_number':596,'multiline':False]
['text':' Encode character as \uNNNN if','line_number':608,'multiline':False]
['text':' 1. It is an ASCII control character (0x0 .. 0x1F; 0x7F not','line_number':609,'multiline':False]
['text':'    utf_printable and thus not checked specially).','line_number':610,'multiline':False]
['text':' 2. Code point is not printable according to utf_printable().','line_number':611,'multiline':False]
['text':' This is done to make resulting values displayable on screen also not from','line_number':612,'multiline':False]
['text':' Neovim.','line_number':613,'multiline':False]
['text':' Is false on invalid unicode, but this should already be handled.','line_number':660,'multiline':False]
['text':'/ Check whether given key can be used in json_encode()','line_number':754,'multiline':False]
['text':'/','line_number':755,'multiline':False]
['text':'/ @param[in]  tv  Key to check.','line_number':756,'multiline':False]
['text':'/ Return a string with the string representation of a variable.','line_number':838,'multiline':False]
['text':'/ Puts quotes around strings, so that they can be parsed back by eval().','line_number':839,'multiline':False]
['text':'/','line_number':840,'multiline':False]
['text':'/ @param[in]  tv  typval_T to convert.','line_number':841,'multiline':False]
['text':'/ @param[out]  len  Location where length of the result will be saved.','line_number':842,'multiline':False]
['text':'/','line_number':843,'multiline':False]
['text':'/ @return String representation of the variable or NULL.','line_number':844,'multiline':False]
['text':'/ Return a string with the string representation of a variable.','line_number':862,'multiline':False]
['text':'/ Does not put quotes around strings, as ":echo" displays values.','line_number':863,'multiline':False]
['text':'/','line_number':864,'multiline':False]
['text':'/ @param[in]  tv  typval_T to convert.','line_number':865,'multiline':False]
['text':'/ @param[out]  len  Location where length of the result will be saved.','line_number':866,'multiline':False]
['text':'/','line_number':867,'multiline':False]
['text':'/ @return String representation of the variable or NULL.','line_number':868,'multiline':False]
['text':'/ Return a string with the string representation of a variable.','line_number':890,'multiline':False]
['text':'/ Puts quotes around strings, so that they can be parsed back by eval().','line_number':891,'multiline':False]
['text':'/','line_number':892,'multiline':False]
['text':'/ @param[in]  tv  typval_T to convert.','line_number':893,'multiline':False]
['text':'/ @param[out]  len  Location where length of the result will be saved.','line_number':894,'multiline':False]
['text':'/','line_number':895,'multiline':False]
['text':'/ @return String representation of the variable or NULL.','line_number':896,'multiline':False]
