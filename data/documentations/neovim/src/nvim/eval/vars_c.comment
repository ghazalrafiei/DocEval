['text':' eval/vars.c: functions for dealing with variables','line_number':1,'multiline':False]
['text':' TODO(ZyX-I): Remove DICT_MAXNEST, make users be non-recursive instead','line_number':50,'multiline':False]
['text':' maximum nesting of lists and dicts','line_number':52,'multiline':False]
['text':'/ Evaluate one Vim expression {expr} in string "p" and append the','line_number':61,'multiline':False]
['text':'/ resulting string to "gap".  "p" points to the opening "{".','line_number':62,'multiline':False]
['text':'/ When "evaluate" is false only skip over the expression.','line_number':63,'multiline':False]
['text':'/ Return a pointer to the character after "}", NULL for an error.','line_number':64,'multiline':False]
['text':' skip the opening {','line_number':67,'multiline':False]
['text':'/ Evaluate all the Vim expressions {expr} in "str" and return the resulting','line_number':96,'multiline':False]
['text':'/ string in allocated memory.  "{{" is reduced to "{" and "}}" to "}".','line_number':97,'multiline':False]
['text':'/ Used for a heredoc assignment.','line_number':98,'multiline':False]
['text':'/ Returns NULL for an error.','line_number':99,'multiline':False]
['text':' Look for a block start.','line_number':109,'multiline':False]
['text':' Escaped brace, unescape and continue.','line_number':116,'multiline':False]
['text':' Include the brace in the literal string.','line_number':117,'multiline':False]
['text':' Append the literal part.','line_number':126,'multiline':False]
['text':' Skip the second brace.','line_number':134,'multiline':False]
['text':' Evaluate the expression and append the result.','line_number':139,'multiline':False]
['text':'/ Get a list of lines from a HERE document. The here document is a list of','line_number':151,'multiline':False]
['text':'/ lines surrounded by a marker.','line_number':152,'multiline':False]
['text':'/     cmd << {marker}','line_number':153,'multiline':False]
['text':'/       {line1}','line_number':154,'multiline':False]
['text':'/       {line2}','line_number':155,'multiline':False]
['text':'/       ....','line_number':156,'multiline':False]
['text':'/     {marker}','line_number':157,'multiline':False]
['text':'/','line_number':158,'multiline':False]
['text':'/ The {marker} is a string. If the optional 'trim' word is supplied before the','line_number':159,'multiline':False]
['text':'/ marker, then the leading indentation before the lines (matching the','line_number':160,'multiline':False]
['text':'/ indentation in the 'cmd' line) is stripped.','line_number':161,'multiline':False]
['text':'/','line_number':162,'multiline':False]
['text':'/ When getting lines for an embedded script (e.g. python, lua, perl, ruby,','line_number':163,'multiline':False]
['text':'/ tcl, mzscheme), "script_get" is set to true. In this case, if the marker is','line_number':164,'multiline':False]
['text':'/ missing, then '.' is accepted as a marker.','line_number':165,'multiline':False]
['text':'/','line_number':166,'multiline':False]
['text':'/ @return  a List with {lines} or NULL on failure.','line_number':167,'multiline':False]
['text':' Check for the optional 'trim' word before the marker','line_number':181,'multiline':False]
['text':' Trim the indentation from all the lines in the here document.','line_number':190,'multiline':False]
['text':' The amount of indentation trimmed is the same as the indentation','line_number':191,'multiline':False]
['text':' of the first line after the :let command line.  To find the end','line_number':192,'multiline':False]
['text':' marker the indent of the :let command line is trimmed.','line_number':193,'multiline':False]
['text':' The marker is the next word.','line_number':212,'multiline':False]
['text':' When getting lines for an embedded script, if the marker is missing,','line_number':226,'multiline':False]
['text':' accept '.' as the marker.','line_number':227,'multiline':False]
['text':' with "trim": skip the indent matching the :let line to find the','line_number':251,'multiline':False]
['text':' marker','line_number':252,'multiline':False]
['text':' If expression evaluation failed in the heredoc, then skip till the','line_number':261,'multiline':False]
['text':' end marker.','line_number':262,'multiline':False]
['text':' set the text indent from the first line.','line_number':268,'multiline':False]
['text':' with "trim": skip the indent matching the first line','line_number':277,'multiline':False]
['text':' expression evaluation failed','line_number':290,'multiline':False]
['text':' expression evaluation in the heredoc failed','line_number':304,'multiline':False]
['text':'/ ":let" list all variable values','line_number':311,'multiline':False]
['text':'/ ":let var1 var2" list variable values','line_number':312,'multiline':False]
['text':'/ ":let var = expr" assignment command.','line_number':313,'multiline':False]
['text':'/ ":let var += expr" assignment command.','line_number':314,'multiline':False]
['text':'/ ":let var -= expr" assignment command.','line_number':315,'multiline':False]
['text':'/ ":let var *= expr" assignment command.','line_number':316,'multiline':False]
['text':'/ ":let var /= expr" assignment command.','line_number':317,'multiline':False]
['text':'/ ":let var %= expr" assignment command.','line_number':318,'multiline':False]
['text':'/ ":let var .= expr" assignment command.','line_number':319,'multiline':False]
['text':'/ ":let var ..= expr" assignment command.','line_number':320,'multiline':False]
['text':'/ ":let [var1, var2] = expr" unpack list.','line_number':321,'multiline':False]
['text':'/ ":let [name, ..., ; lastname] = expr" unpack list.','line_number':322,'multiline':False]
['text':'/','line_number':323,'multiline':False]
['text':'/ ":cons[t] var = expr1" define constant','line_number':324,'multiline':False]
['text':'/ ":cons[t] [name1, name2, ...] = expr1" define constants unpacking list','line_number':325,'multiline':False]
['text':'/ ":cons[t] [name, ..., ; lastname] = expr" define constants unpacking list','line_number':326,'multiline':False]
['text':' For var.='str'.','line_number':343,'multiline':False]
['text':' ":let" without "=": list variables','line_number':351,'multiline':False]
['text':' ":let var1 var2"','line_number':355,'multiline':False]
['text':' ":let"','line_number':358,'multiline':False]
['text':' HERE document','line_number':372,'multiline':False]
['text':' +=, -=, *=, /=, %= or .=','line_number':392,'multiline':False]
['text':' ..=','line_number':393,'multiline':False]
['text':'/ Assign the typevalue "tv" to the variable or variables at "arg_start".','line_number':423,'multiline':False]
['text':'/ Handles both "var" with any type and "[var, var; var]" with a list type.','line_number':424,'multiline':False]
['text':'/ When "op" is not NULL it points to a string with characters that','line_number':425,'multiline':False]
['text':'/ must appear after the variable(s).  Use "+", "-" or "." for add, subtract','line_number':426,'multiline':False]
['text':'/ or concatenate.','line_number':427,'multiline':False]
['text':'/','line_number':428,'multiline':False]
['text':'/ @param copy  copy values from "tv", don't move','line_number':429,'multiline':False]
['text':'/ @param semicolon  from skip_var_list()','line_number':430,'multiline':False]
['text':'/ @param var_count  from skip_var_list()','line_number':431,'multiline':False]
['text':'/ @param is_const  lock variables for :const','line_number':432,'multiline':False]
['text':'/','line_number':433,'multiline':False]
['text':'/ @return  OK or FAIL;','line_number':434,'multiline':False]
['text':' ":let var = expr" or ":for var in list"','line_number':442,'multiline':False]
['text':' ":let [v1, v2] = list" or ":for [v1, v2] in listlist"','line_number':449,'multiline':False]
['text':' List l may actually be NULL, but it should fail with E688 or even earlier','line_number':465,'multiline':False]
['text':' if you try to do ":let [] = v:_null_list".','line_number':466,'multiline':False]
['text':' Put the rest of the list (may be empty) in the var after ';'.','line_number':482,'multiline':False]
['text':' Create a new list for this.','line_number':483,'multiline':False]
['text':'/ Skip over assignable variable "var" or list of variables "[var, var]".','line_number':510,'multiline':False]
['text':'/ Used for ":let varvar = expr" and ":for varvar in expr".','line_number':511,'multiline':False]
['text':'/ For "[var, var]" increment "*var_count" for each variable.','line_number':512,'multiline':False]
['text':'/ for "[var, var; var]" set "semicolon".','line_number':513,'multiline':False]
['text':'/','line_number':514,'multiline':False]
['text':'/ @return  NULL for an error.','line_number':515,'multiline':False]
['text':' "[var, var]": find the matching ']'.','line_number':520,'multiline':False]
['text':' skip whites after '[', ';' or ','','line_number':523,'multiline':False]
['text':'/ Skip one (assignable) variable name, including @r, $VAR, &option, d.key,','line_number':550,'multiline':False]
['text':'/ l[idx].','line_number':551,'multiline':False]
['text':'/ List variables for hashtab "ht" with prefix "prefix".','line_number':561,'multiline':False]
['text':'/','line_number':562,'multiline':False]
['text':'/ @param empty  if true also list NULL strings as empty strings.','line_number':563,'multiline':False]
['text':' apply :filter /pat/ to variable name','line_number':577,'multiline':False]
['text':'/ List global variables.','line_number':592,'multiline':False]
['text':'/ List buffer variables.','line_number':598,'multiline':False]
['text':'/ List window variables.','line_number':604,'multiline':False]
['text':'/ List tab page variables.','line_number':610,'multiline':False]
['text':'/ List variables in "arg".','line_number':616,'multiline':False]
['text':' get_name_len() takes care of expanding curly braces','line_number':634,'multiline':False]
['text':' This is mainly to keep test 49 working: when expanding','line_number':639,'multiline':False]
['text':' curly braces fails overrule the exception error message.','line_number':640,'multiline':False]
['text':' handle d.key, l[idx], f(expr)','line_number':654,'multiline':False]
['text':'/ Set an environment variable, part of ex_let_one().','line_number':705,'multiline':False]
['text':' Find the end of the name.','line_number':715,'multiline':False]
['text':'/ Set an option, part of ex_let_one().','line_number':752,'multiline':False]
['text':' Find the end of the name.','line_number':762,'multiline':False]
['text':' Don't assume current and new values are of the same type in order to future-proof the code for','line_number':800,'multiline':False]
['text':' when an option can have multiple types.','line_number':801,'multiline':False]
['text':' number or bool','line_number':807,'multiline':False]
['text':' string','line_number':830,'multiline':False]
['text':'/ Set a register, part of ex_let_one().','line_number':850,'multiline':False]
['text':'/ Set one item of `:let var = expr` or `:let [v1, v2] = list` to its value','line_number':887,'multiline':False]
['text':'/','line_number':888,'multiline':False]
['text':'/ @param[in]  arg  Start of the variable name.','line_number':889,'multiline':False]
['text':'/ @param[in]  tv  Value to assign to the variable.','line_number':890,'multiline':False]
['text':'/ @param[in]  copy  If true, copy value from `tv`.','line_number':891,'multiline':False]
['text':'/ @param[in]  endchars  Valid characters after variable name or NULL.','line_number':892,'multiline':False]
['text':'/ @param[in]  op  Operation performed: *op is `+`, `-`, `.` for `+=`, etc.','line_number':893,'multiline':False]
['text':'/                 NULL for `=`.','line_number':894,'multiline':False]
['text':'/','line_number':895,'multiline':False]
['text':'/ @return a pointer to the char just after the var name or NULL in case of','line_number':896,'multiline':False]
['text':'/         error.','line_number':897,'multiline':False]
['text':' ":let $VAR = expr": Set environment variable.','line_number':905,'multiline':False]
['text':' ":let &option = expr": Set option value.','line_number':908,'multiline':False]
['text':' ":let &l:option = expr": Set local option value.','line_number':909,'multiline':False]
['text':' ":let &g:option = expr": Set global option value.','line_number':910,'multiline':False]
['text':' ":let @r = expr": Set register contents.','line_number':913,'multiline':False]
['text':' ":let var = expr": Set internal variable.','line_number':916,'multiline':False]
['text':' ":let {expr} = expr": Idem, name made with curly braces','line_number':917,'multiline':False]
['text':'/ ":unlet[!] var1 ... " command.','line_number':936,'multiline':False]
['text':'/ ":lockvar" and ":unlockvar" commands','line_number':942,'multiline':False]
['text':'/ Common parsing logic for :unlet, :lockvar and :unlockvar.','line_number':958,'multiline':False]
['text':'/','line_number':959,'multiline':False]
['text':'/ Invokes `callback` afterwards if successful and `eap->skip == false`.','line_number':960,'multiline':False]
['text':'/','line_number':961,'multiline':False]
['text':'/ @param[in]  eap  Ex command arguments for the command.','line_number':962,'multiline':False]
['text':'/ @param[in]  argstart  Start of the string argument for the command.','line_number':963,'multiline':False]
['text':'/ @param[in]  deep  Levels to (un)lock for :(un)lockvar, -1 to (un)lock','line_number':964,'multiline':False]
['text':'/                   everything.','line_number':965,'multiline':False]
['text':'/ @param[in]  callback  Appropriate handler for the command.','line_number':966,'multiline':False]
['text':' suppress clang "Uninitialized argument value"','line_number':984,'multiline':False]
['text':' Parse the name and find the end.','line_number':990,'multiline':False]
['text':' error, but continue parsing.','line_number':994,'multiline':False]
['text':'/ Unlet a variable indicated by `lp`.','line_number':1022,'multiline':False]
['text':'/','line_number':1023,'multiline':False]
['text':'/ @param[in]  lp  The lvalue.','line_number':1024,'multiline':False]
['text':'/ @param[in]  name_end  End of the string argument for the command.','line_number':1025,'multiline':False]
['text':'/ @param[in]  eap  Ex command arguments for :unlet.','line_number':1026,'multiline':False]
['text':'/ @param[in]  deep  Unused.','line_number':1027,'multiline':False]
['text':'/','line_number':1028,'multiline':False]
['text':'/ @return OK on success, or FAIL on failure.','line_number':1029,'multiline':False]
['text':' Environment variable, normal name or expanded name.','line_number':1040,'multiline':False]
['text':' ll_list is not NULL when lvalue is not in a list, NULL lists','line_number':1048,'multiline':False]
['text':' yield E689.','line_number':1049,'multiline':False]
['text':' unlet a List item.','line_number':1061,'multiline':False]
['text':' unlet a Dictionary item.','line_number':1064,'multiline':False]
['text':' need to save key because dictitem_remove will free it','line_number':1074,'multiline':False]
['text':'/ Unlet one item or a range of items from a list.','line_number':1090,'multiline':False]
['text':'/ Return OK or FAIL.','line_number':1091,'multiline':False]
['text':' Delete a range of List items.','line_number':1096,'multiline':False]
['text':'/ unlet a variable','line_number':1110,'multiline':False]
['text':'/','line_number':1111,'multiline':False]
['text':'/ @param[in]  name  Variable name to unlet.','line_number':1112,'multiline':False]
['text':'/ @param[in]  name_len  Variable name length.','line_number':1113,'multiline':False]
['text':'/ @param[in]  forceit  If true, do not complain if variable doesn’t exist.','line_number':1114,'multiline':False]
['text':'/','line_number':1115,'multiline':False]
['text':'/ @return OK if it existed, FAIL otherwise.','line_number':1116,'multiline':False]
['text':'/ Lock or unlock variable indicated by `lp`.','line_number':1180,'multiline':False]
['text':'/','line_number':1181,'multiline':False]
['text':'/ Locks if `eap->cmdidx == CMD_lockvar`, unlocks otherwise.','line_number':1182,'multiline':False]
['text':'/','line_number':1183,'multiline':False]
['text':'/ @param[in]  lp  The lvalue.','line_number':1184,'multiline':False]
['text':'/ @param[in]  name_end  Unused.','line_number':1185,'multiline':False]
['text':'/ @param[in]  eap  Ex command arguments for :(un)lockvar.','line_number':1186,'multiline':False]
['text':'/ @param[in]  deep  Levels to (un)lock, -1 to (un)lock everything.','line_number':1187,'multiline':False]
['text':'/','line_number':1188,'multiline':False]
['text':'/ @return OK on success, or FAIL on failure.','line_number':1189,'multiline':False]
['text':' Normal name or expanded name.','line_number':1201,'multiline':False]
['text':' For historical reasons this error is not given for Lists and','line_number':1209,'multiline':False]
['text':' Dictionaries. E.g. b: dictionary may be locked/unlocked.','line_number':1210,'multiline':False]
['text':' nothing to do','line_number':1225,'multiline':False]
['text':' (un)lock a range of List items.','line_number':1229,'multiline':False]
['text':' (un)lock a List item.','line_number':1236,'multiline':False]
['text':' (un)lock a Dictionary item.','line_number':1239,'multiline':False]
['text':'/ Get the value of internal variable "name".','line_number':1246,'multiline':False]
['text':'/ Return OK or FAIL.  If OK is returned "rettv" must be cleared.','line_number':1247,'multiline':False]
['text':'/','line_number':1248,'multiline':False]
['text':'/ @param len  length of "name"','line_number':1249,'multiline':False]
['text':'/ @param rettv  NULL when only checking existence','line_number':1250,'multiline':False]
['text':'/ @param dip  non-NULL when typval's dict item is needed','line_number':1251,'multiline':False]
['text':'/ @param verbose  may give error message','line_number':1252,'multiline':False]
['text':'/ @param no_autoload  do not use script autoloading','line_number':1253,'multiline':False]
['text':'/ @return  the string value of a (global/local) variable or','line_number':1281,'multiline':False]
['text':'/          NULL when it doesn't exist.','line_number':1282,'multiline':False]
['text':'/','line_number':1283,'multiline':False]
['text':'/ @see  tv_get_string() for how long the pointer remains valid.','line_number':1284,'multiline':False]
['text':'/ Clean up a list of internal variables.','line_number':1296,'multiline':False]
['text':'/ Frees all allocated variables and the value they contain.','line_number':1297,'multiline':False]
['text':'/ Clears hashtab "ht", does not free it.','line_number':1298,'multiline':False]
['text':'/ Like vars_clear(), but only free the value if "free_val" is true.','line_number':1304,'multiline':False]
['text':' Free the variable.  Don't remove it from the hashtab,','line_number':1317,'multiline':False]
['text':' ht_array might change then.  hash_clear() takes care of it','line_number':1318,'multiline':False]
['text':' later.','line_number':1319,'multiline':False]
['text':'/ Delete a variable from hashtab "ht" at item "hi".','line_number':1333,'multiline':False]
['text':'/ Clear the variable value and free the dictitem.','line_number':1334,'multiline':False]
['text':'/ List the value of one internal variable.','line_number':1344,'multiline':False]
['text':'/ @param[in]  name_len  Length of the name. May be -1, in this case strlen()','line_number':1353,'multiline':False]
['text':'/                       will be used.','line_number':1354,'multiline':False]
['text':'/ @param[in,out]  first  When true clear rest of screen and set to false.','line_number':1355,'multiline':False]
['text':' don't use msg() to avoid overwriting "v:statusmsg"','line_number':1359,'multiline':False]
['text':' "a:" vars don't have a name stored','line_number':1362,'multiline':False]
['text':'/ Additional handling for setting a v: variable.','line_number':1396,'multiline':False]
['text':'/','line_number':1397,'multiline':False]
['text':'/ @return  true if the variable should be set normally,','line_number':1398,'multiline':False]
['text':'/          false if nothing else needs to be done.','line_number':1399,'multiline':False]
['text':' Careful: when assigning to v:errmsg and tv_get_string()','line_number':1411,'multiline':False]
['text':' causes an error message the variable will already be set.','line_number':1412,'multiline':False]
['text':' Take over the string to avoid an extra alloc/free.','line_number':1417,'multiline':False]
['text':' Notify watchers','line_number':1421,'multiline':False]
['text':' Notify watchers','line_number':1439,'multiline':False]
['text':'/ Set variable to the given value','line_number':1452,'multiline':False]
['text':'/','line_number':1453,'multiline':False]
['text':'/ If the variable already exists, the value is updated. Otherwise the variable','line_number':1454,'multiline':False]
['text':'/ is created.','line_number':1455,'multiline':False]
['text':'/','line_number':1456,'multiline':False]
['text':'/ @param[in]  name  Variable name to set.','line_number':1457,'multiline':False]
['text':'/ @param[in]  name_len  Length of the variable name.','line_number':1458,'multiline':False]
['text':'/ @param  tv  Variable value.','line_number':1459,'multiline':False]
['text':'/ @param[in]  copy  True if value in tv is to be copied.','line_number':1460,'multiline':False]
['text':'/ Set variable to the given value','line_number':1467,'multiline':False]
['text':'/','line_number':1468,'multiline':False]
['text':'/ If the variable already exists, the value is updated. Otherwise the variable','line_number':1469,'multiline':False]
['text':'/ is created.','line_number':1470,'multiline':False]
['text':'/','line_number':1471,'multiline':False]
['text':'/ @param[in]  name  Variable name to set.','line_number':1472,'multiline':False]
['text':'/ @param[in]  name_len  Length of the variable name.','line_number':1473,'multiline':False]
['text':'/ @param  tv  Variable value.','line_number':1474,'multiline':False]
['text':'/ @param[in]  copy  True if value in tv is to be copied.','line_number':1475,'multiline':False]
['text':'/ @param[in]  is_const  True if value in tv is to be locked.','line_number':1476,'multiline':False]
['text':' Search in parent scope which is possible to reference from lambda','line_number':1493,'multiline':False]
['text':' Check in this order for backwards compatibility:','line_number':1509,'multiline':False]
['text':' - Whether the variable is read-only','line_number':1510,'multiline':False]
['text':' - Whether the variable value is locked','line_number':1511,'multiline':False]
['text':' - Whether the variable is locked','line_number':1512,'multiline':False]
['text':' existing variable, need to clear the value','line_number':1519,'multiline':False]
['text':' Handle setting internal v: variables separately where needed to','line_number':1521,'multiline':False]
['text':' prevent changing the type.','line_number':1522,'multiline':False]
['text':' Add a new variable.','line_number':1536,'multiline':False]
['text':' Can't add "v:" or "a:" variable.','line_number':1537,'multiline':False]
['text':' Make sure the variable name is valid.','line_number':1543,'multiline':False]
['text':' Make sure dict is valid','line_number':1548,'multiline':False]
['text':' Like :lockvar! name: lock the value and what it contains, but only','line_number':1577,'multiline':False]
['text':' if the reference count is up to one.  That locks only literal','line_number':1578,'multiline':False]
['text':' values.','line_number':1579,'multiline':False]
['text':'/ Check whether variable is read-only (DI_FLAGS_RO, DI_FLAGS_RO_SBX)','line_number':1584,'multiline':False]
['text':'/','line_number':1585,'multiline':False]
['text':'/ Also gives an error message.','line_number':1586,'multiline':False]
['text':'/','line_number':1587,'multiline':False]
['text':'/ @param[in]  flags  di_flags attribute value.','line_number':1588,'multiline':False]
['text':'/ @param[in]  name  Variable name, for use in error message.','line_number':1589,'multiline':False]
['text':'/ @param[in]  name_len  Variable name length. Use #TV_TRANSLATE to translate','line_number':1590,'multiline':False]
['text':'/                       variable name and compute the length. Use #TV_CSTRING','line_number':1591,'multiline':False]
['text':'/                       to compute the length with strlen() without','line_number':1592,'multiline':False]
['text':'/                       translating.','line_number':1593,'multiline':False]
['text':'/','line_number':1594,'multiline':False]
['text':'/                       Both #TV_… values are used for optimization purposes:','line_number':1595,'multiline':False]
['text':'/                       variable name with its length is needed only in case','line_number':1596,'multiline':False]
['text':'/                       of error, when no error occurs computing them is','line_number':1597,'multiline':False]
['text':'/                       a waste of CPU resources. This especially applies to','line_number':1598,'multiline':False]
['text':'/                       gettext.','line_number':1599,'multiline':False]
['text':'/','line_number':1600,'multiline':False]
['text':'/ @return True if variable is read-only: either always or in sandbox when','line_number':1601,'multiline':False]
['text':'/         sandbox is enabled, false otherwise.','line_number':1602,'multiline':False]
['text':'/ Return true if di_flags "flags" indicates variable "name" is locked.','line_number':1628,'multiline':False]
['text':'/ Also give an error message.','line_number':1629,'multiline':False]
['text':'/ Check whether variable is fixed (DI_FLAGS_FIX)','line_number':1648,'multiline':False]
['text':'/','line_number':1649,'multiline':False]
['text':'/ Also gives an error message.','line_number':1650,'multiline':False]
['text':'/','line_number':1651,'multiline':False]
['text':'/ @param[in]  flags  di_flags attribute value.','line_number':1652,'multiline':False]
['text':'/ @param[in]  name  Variable name, for use in error message.','line_number':1653,'multiline':False]
['text':'/ @param[in]  name_len  Variable name length. Use #TV_TRANSLATE to translate','line_number':1654,'multiline':False]
['text':'/                       variable name and compute the length. Use #TV_CSTRING','line_number':1655,'multiline':False]
['text':'/                       to compute the length with strlen() without','line_number':1656,'multiline':False]
['text':'/                       translating.','line_number':1657,'multiline':False]
['text':'/','line_number':1658,'multiline':False]
['text':'/                       Both #TV_… values are used for optimization purposes:','line_number':1659,'multiline':False]
['text':'/                       variable name with its length is needed only in case','line_number':1660,'multiline':False]
['text':'/                       of error, when no error occurs computing them is','line_number':1661,'multiline':False]
['text':'/                       a waste of CPU resources. This especially applies to','line_number':1662,'multiline':False]
['text':'/                       gettext.','line_number':1663,'multiline':False]
['text':'/','line_number':1664,'multiline':False]
['text':'/ @return True if variable is fixed, false otherwise.','line_number':1665,'multiline':False]
['text':'/ Check if name is a valid name to assign funcref to','line_number':1682,'multiline':False]
['text':'/','line_number':1683,'multiline':False]
['text':'/ @param[in]  name  Possible function/funcref name.','line_number':1684,'multiline':False]
['text':'/ @param[in]  new_var  True if it is a name for a variable.','line_number':1685,'multiline':False]
['text':'/','line_number':1686,'multiline':False]
['text':'/ @return false in case of success, true in case of failure. Also gives an','line_number':1687,'multiline':False]
['text':'/         error message if appropriate.','line_number':1688,'multiline':False]
['text':' Allow for w: b: s: and t:.','line_number':1692,'multiline':False]
['text':' Allow autoload variable.','line_number':1693,'multiline':False]
['text':' Don't allow hiding a function.  When "v" is not NULL we might be','line_number':1700,'multiline':False]
['text':' assigning another function to the same var, the type is checked','line_number':1701,'multiline':False]
['text':' below.','line_number':1702,'multiline':False]
['text':'/ Check if a variable name is valid','line_number':1710,'multiline':False]
['text':'/','line_number':1711,'multiline':False]
['text':'/ @param[in]  varname  Variable name to check.','line_number':1712,'multiline':False]
['text':'/','line_number':1713,'multiline':False]
['text':'/ @return false when variable name is not valid, true when it is. Also gives','line_number':1714,'multiline':False]
['text':'/         an error message if appropriate.','line_number':1715,'multiline':False]
['text':'/ Implements the logic to retrieve local variable and option values.','line_number':1730,'multiline':False]
['text':'/ Used by "getwinvar()" "gettabvar()" "gettabwinvar()" "getbufvar()".','line_number':1731,'multiline':False]
['text':'/','line_number':1732,'multiline':False]
['text':'/ @param deftv   default value if not found','line_number':1733,'multiline':False]
['text':'/ @param htname  't'ab, 'w'indow or 'b'uffer local','line_number':1734,'multiline':False]
['text':'/ @param tp      can be NULL','line_number':1735,'multiline':False]
['text':'/ @param buf     ignored if htname is not 'b'','line_number':1736,'multiline':False]
['text':' Set curwin to be our win, temporarily.  Also set the tabpage,','line_number':1749,'multiline':False]
['text':' otherwise the window is not valid. Only do this when needed,','line_number':1750,'multiline':False]
['text':' autocommands get blocked.','line_number':1751,'multiline':False]
['text':' If we have a buffer reference avoid the switching, we're saving and','line_number':1752,'multiline':False]
['text':' restoring curbuf directly.','line_number':1753,'multiline':False]
['text':' Change curbuf so the option is read from the correct buffer.','line_number':1760,'multiline':False]
['text':' get all window-local or buffer-local options in a dict','line_number':1766,'multiline':False]
['text':' Local option','line_number':1774,'multiline':False]
['text':' Empty string: return a dict with all the local variables.','line_number':1781,'multiline':False]
['text':' Look up the variable.','line_number':1802,'multiline':False]
['text':' restore previous notion of curwin','line_number':1812,'multiline':False]
['text':' use the default value','line_number':1818,'multiline':False]
['text':'/ getwinvar() and gettabwinvar()','line_number':1825,'multiline':False]
['text':'/','line_number':1826,'multiline':False]
['text':'/ @param off  1 for gettabwinvar()','line_number':1827,'multiline':False]
['text':'/ Convert typval to option value for a particular option.','line_number':1843,'multiline':False]
['text':'/','line_number':1844,'multiline':False]
['text':'/ @param[in]   tv      typval to convert.','line_number':1845,'multiline':False]
['text':'/ @param[in]   option  Option name.','line_number':1846,'multiline':False]
['text':'/ @param[in]   flags   Option flags.','line_number':1847,'multiline':False]
['text':'/ @param[out]  error   Whether an error occurred.','line_number':1848,'multiline':False]
['text':'/','line_number':1849,'multiline':False]
['text':'/ @return  Typval converted to OptVal. Must be freed by caller.','line_number':1850,'multiline':False]
['text':'/          Returns NIL_OPTVAL for invalid option name.','line_number':1851,'multiline':False]
['text':' If the option can be set to a function reference or a lambda','line_number':1859,'multiline':False]
['text':' and the passed value is a function reference, then convert it to','line_number':1860,'multiline':False]
['text':' the name (string) of the function reference.','line_number':1861,'multiline':False]
['text':' This could be either "0" or a string that's not a number.','line_number':1868,'multiline':False]
['text':' So we need to check if it's actually a number.','line_number':1869,'multiline':False]
['text':' There's another character after zeros or the string is empty.','line_number':1874,'multiline':False]
['text':' In both cases, we are trying to set a num option using a string.','line_number':1875,'multiline':False]
['text':' Avoid setting string option to a boolean or a special value.','line_number':1882,'multiline':False]
['text':' This should never happen.','line_number':1892,'multiline':False]
['text':'/ Convert an option value to typval.','line_number':1901,'multiline':False]
['text':'/','line_number':1902,'multiline':False]
['text':'/ @param[in]  value  Option value to convert.','line_number':1903,'multiline':False]
['text':'/','line_number':1904,'multiline':False]
['text':'/ @return  OptVal converted to typval.','line_number':1905,'multiline':False]
['text':' return v:null for None boolean value','line_number':1924,'multiline':False]
['text':'/ Set option "varname" to the value of "varp" for the current buffer/window.','line_number':1940,'multiline':False]
['text':'/ "setwinvar()" and "settabwinvar()" functions','line_number':1963,'multiline':False]
['text':' get_name_len() takes care of expanding curly braces','line_number':2009,'multiline':False]
['text':' Handle d.key, l[idx], f(expr).','line_number':2020,'multiline':False]
['text':'/ "gettabvar()" function','line_number':2035,'multiline':False]
['text':'/ "gettabwinvar()" function','line_number':2049,'multiline':False]
['text':'/ "getwinvar()" function','line_number':2055,'multiline':False]
['text':'/ "getbufvar()" function','line_number':2061,'multiline':False]
['text':'/ "settabvar()" function','line_number':2070,'multiline':False]
['text':' Restore current tabpage.','line_number':2097,'multiline':False]
['text':'/ "settabwinvar()" function','line_number':2103,'multiline':False]
['text':'/ "setwinvar()" function','line_number':2109,'multiline':False]
['text':'/ "setbufvar()" function','line_number':2115,'multiline':False]
['text':' Set curbuf to be our buf, temporarily.','line_number':2133,'multiline':False]
['text':' reset notion of buffer','line_number':2138,'multiline':False]
