['text':' Determines how deeply nested %{} blocks will be evaluated in statusline.','line_number':47,'multiline':False]
['text':'/ Enumeration specifying the valid numeric bases that can','line_number':50,'multiline':False]
['text':'/ be used when printing numbers in the status line.','line_number':51,'multiline':False]
['text':'/ Redraw the status line of window `wp`.','line_number':57,'multiline':False]
['text':'/','line_number':58,'multiline':False]
['text':'/ If inversion is possible we use it. Else '=' characters are used.','line_number':59,'multiline':False]
['text':' May get here recursively when 'statusline' (indirectly)','line_number':67,'multiline':False]
['text':' invokes ":redrawstatus".  Simply ignore the call then.','line_number':68,'multiline':False]
['text':' Also ignore if wildmenu is showing.','line_number':70,'multiline':False]
['text':' no status line, either global statusline is enabled or the window is a last window','line_number':78,'multiline':False]
['text':' Don't redraw right now, do it later. Don't update status line when','line_number':81,'multiline':False]
['text':' popup menu is visible and may be drawn over it','line_number':82,'multiline':False]
['text':' redraw custom status line','line_number':85,'multiline':False]
['text':' len += (int)strlen(p + len);  // dead assignment','line_number':116,'multiline':False]
['text':' No room for file name!','line_number':124,'multiline':False]
['text':' Count total number of display cells.','line_number':129,'multiline':False]
['text':' Find first character that will fit.','line_number':132,'multiline':False]
['text':' Going from start to end is much faster for DBCS.','line_number':133,'multiline':False]
['text':' Draw the 'showcmd' information if 'showcmdloc' == "statusline".','line_number':159,'multiline':False]
['text':' May need to draw the character below the vertical separator.','line_number':171,'multiline':False]
['text':'/ Only call if (wp->w_vsep_width != 0).','line_number':196,'multiline':False]
['text':'/','line_number':197,'multiline':False]
['text':'/ @return  true if the status line of window "wp" is connected to the status','line_number':198,'multiline':False]
['text':'/ line of the window right of it.  If not, then it's a vertical separator.','line_number':199,'multiline':False]
['text':'/ Clear status line, window bar or tab page line click definition table','line_number':218,'multiline':False]
['text':'/','line_number':219,'multiline':False]
['text':'/ @param[out]  tpcd  Table to clear.','line_number':220,'multiline':False]
['text':'/ @param[in]  tpcd_size  Size of the table.','line_number':221,'multiline':False]
['text':'/ Allocate or resize the click definitions array if needed.','line_number':234,'multiline':False]
['text':'/ Fill the click definitions array if needed.','line_number':245,'multiline':False]
['text':' window bar and status line only support click functions','line_number':273,'multiline':False]
['text':'/ Redraw the status line, window bar or ruler of window "wp".','line_number':286,'multiline':False]
['text':'/ When "wp" is NULL redraw the tab pages line from 'tabline'.','line_number':287,'multiline':False]
['text':' There is a tiny chance that this gets called recursively: When','line_number':307,'multiline':False]
['text':' redrawing a status line triggers redrawing the ruler or tabline.','line_number':308,'multiline':False]
['text':' Avoid trouble by not allowing recursion.','line_number':309,'multiline':False]
['text':' setup environment for the task at hand','line_number':315,'multiline':False]
['text':' Use 'tabline'.  Always at the first line of the screen.','line_number':317,'multiline':False]
['text':' row zero is first row of text','line_number':328,'multiline':False]
['text':' advance past any leading group spec - implicit in ru_col','line_number':355,'multiline':False]
['text':' writing in last column may cause scrolling','line_number':377,'multiline':False]
['text':' Temporarily reset 'cursorbind', we don't want a side effect from moving','line_number':396,'multiline':False]
['text':' the cursor away and back.','line_number':397,'multiline':False]
['text':' Make a copy, because the statusline may include a function call that','line_number':402,'multiline':False]
['text':' might change the option value and free the memory.','line_number':403,'multiline':False]
['text':' Draw each snippet with the specified highlighting.','line_number':414,'multiline':False]
['text':' Make all characters printable.','line_number':423,'multiline':False]
['text':' Make sure to use an empty string instead of p, if p is beyond buf + len.','line_number':438,'multiline':False]
['text':' fill up with "fillchar"','line_number':443,'multiline':False]
['text':' Fill the tab_page_click_defs, w_status_click_defs or w_winbar_click_defs array for clicking','line_number':450,'multiline':False]
['text':' in the tab page line, status line or window bar','line_number':451,'multiline':False]
['text':' Return when called recursively. This can happen when the winbar contains an expression','line_number':466,'multiline':False]
['text':' that triggers a redraw.','line_number':467,'multiline':False]
['text':' Do nothing.','line_number':474,'multiline':False]
['text':'/ must be called after a grid_line_start() at the intended row','line_number':481,'multiline':False]
['text':' If 'ruler' off, don't do anything','line_number':487,'multiline':False]
['text':' Check if cursor.lnum is valid, since win_redr_ruler() may be called','line_number':492,'multiline':False]
['text':' after deleting lines, before cursor.lnum is corrected.','line_number':493,'multiline':False]
['text':' Don't draw the ruler while doing insert-completion, it might overwrite','line_number':498,'multiline':False]
['text':' the (long) mode message.','line_number':499,'multiline':False]
['text':' Check if not in Insert mode and the line is empty (will show "0-1").','line_number':512,'multiline':False]
['text':' In list mode virtcol needs to be recomputed','line_number':539,'multiline':False]
['text':' Some sprintfs return the length, some return a pointer.','line_number':550,'multiline':False]
['text':' To avoid portability problems we use strlen() here.','line_number':551,'multiline':False]
['text':' Add a "50%" if there is room for it.','line_number':560,'multiline':False]
['text':' On the last line, don't print in the last column (scrolls the','line_number':561,'multiline':False]
['text':' screen up on some terminals).','line_number':562,'multiline':False]
['text':' can't use last char of screen','line_number':566,'multiline':False]
['text':' Never use more than half the window/screen width, leave the other half','line_number':573,'multiline':False]
['text':' for the filename.','line_number':574,'multiline':False]
['text':' Need at least 3 chars left for get_rel_pos() + NUL.','line_number':579,'multiline':False]
['text':' Truncate at window boundary.','line_number':600,'multiline':False]
['text':'/ Get the character to use in a status line.  Get its attributes in "*attr".','line_number':615,'multiline':False]
['text':'/ Redraw the status line according to 'statusline' and take care of any','line_number':630,'multiline':False]
['text':'/ errors encountered.','line_number':631,'multiline':False]
['text':' When called recursively return.  This can happen when the statusline','line_number':636,'multiline':False]
['text':' contains an expression that triggers a redraw.','line_number':637,'multiline':False]
['text':' Do not include unlisted buffers','line_number':675,'multiline':False]
['text':'/ Draw the tab pages line at the top of the Vim window.','line_number':693,'multiline':False]
['text':' Clear tab_page_click_defs: Clicking outside of tabs has no effect.','line_number':715,'multiline':False]
['text':' Use the 'tabline' option if it's set.','line_number':719,'multiline':False]
['text':' Get buffer name in NameBuff[]','line_number':802,'multiline':False]
['text':' Store the tab page number in tab_page_click_defs[], so that','line_number':820,'multiline':False]
['text':' jump_to_mouse() knows where each one is.','line_number':821,'multiline':False]
['text':' Draw the 'showcmd' information if 'showcmdloc' == "tabline".','line_number':839,'multiline':False]
['text':' Put an "X" for closing the current tab if there are several.','line_number':849,'multiline':False]
['text':' Reset the flag here again, in case evaluating 'tabline' causes it to be','line_number':862,'multiline':False]
['text':' set.','line_number':863,'multiline':False]
['text':'/ Build the 'statuscolumn' string for line "lnum". When "relnum" == -1,','line_number':867,'multiline':False]
['text':'/ the v:lnum and v:relnum variables don't have to be updated.','line_number':868,'multiline':False]
['text':'/','line_number':869,'multiline':False]
['text':'/ @return  The width of the built status column string for line "lnum"','line_number':870,'multiline':False]
['text':' Only update click definitions once per window per redraw.','line_number':873,'multiline':False]
['text':' Don't update when current width is 0, since it will be redrawn again if not empty.','line_number':874,'multiline':False]
['text':'/ Build a string from the status line items in "fmt".','line_number':898,'multiline':False]
['text':'/ Return length of string in screen cells.','line_number':899,'multiline':False]
['text':'/','line_number':900,'multiline':False]
['text':'/ Normally works for window "wp", except when working for 'tabline' then it','line_number':901,'multiline':False]
['text':'/ is "curwin".','line_number':902,'multiline':False]
['text':'/','line_number':903,'multiline':False]
['text':'/ Items are drawn interspersed with the text that surrounds it','line_number':904,'multiline':False]
['text':'/ Specials: %-<wid>(xxx%) => group, %= => separation marker, %< => truncation','line_number':905,'multiline':False]
['text':'/ Item: %-<minwid>.<maxwid><itemch> All but <itemch> are optional','line_number':906,'multiline':False]
['text':'/','line_number':907,'multiline':False]
['text':'/ If maxwidth is not zero, the string will be filled at any middle marker','line_number':908,'multiline':False]
['text':'/ or truncated if too long, fillchar is used for all whitespace.','line_number':909,'multiline':False]
['text':'/','line_number':910,'multiline':False]
['text':'/ @param wp  The window to build a statusline for','line_number':911,'multiline':False]
['text':'/ @param out  The output buffer to write the statusline to','line_number':912,'multiline':False]
['text':'/             Note: This should not be NameBuff','line_number':913,'multiline':False]
['text':'/ @param outlen  The length of the output buffer','line_number':914,'multiline':False]
['text':'/ @param fmt  The statusline format string','line_number':915,'multiline':False]
['text':'/ @param opt_idx  Index of the option corresponding to "fmt"','line_number':916,'multiline':False]
['text':'/ @param opt_scope  The scope corresponding to "opt_idx"','line_number':917,'multiline':False]
['text':'/ @param fillchar  Character to use when filling empty space in the statusline','line_number':918,'multiline':False]
['text':'/ @param maxwidth  The maximum width to make the statusline','line_number':919,'multiline':False]
['text':'/ @param hltab  HL attributes (can be NULL)','line_number':920,'multiline':False]
['text':'/ @param tabtab  Tab clicks definition (can be NULL)','line_number':921,'multiline':False]
['text':'/ @param stcp  Status column attributes (can be NULL)','line_number':922,'multiline':False]
['text':'/','line_number':923,'multiline':False]
['text':'/ @return  The final width of the statusline','line_number':924,'multiline':False]
['text':' Initial value, grows as needed.','line_number':929,'multiline':False]
['text':' TODO(Bram): find out why using called_emsg_before makes tests fail, does it','line_number':943,'multiline':False]
['text':' matter?','line_number':944,'multiline':False]
['text':' const int called_emsg_before = called_emsg;','line_number':945,'multiline':False]
['text':' Allocate one more, because the last element is used to indicate the','line_number':952,'multiline':False]
['text':' end of the list.','line_number':953,'multiline':False]
['text':' If "fmt" was set insecurely it needs to be evaluated in the sandbox.','line_number':960,'multiline':False]
['text':' "opt_idx" will be kOptInvalid when caller is nvim_eval_statusline().','line_number':961,'multiline':False]
['text':' When the format starts with "%!" then evaluate it as an expression and','line_number':965,'multiline':False]
['text':' use the result as the actual format string.','line_number':966,'multiline':False]
['text':' The cursor in windows other than the current one isn't always','line_number':986,'multiline':False]
['text':' up-to-date, esp. because of autocommands and timers.','line_number':987,'multiline':False]
['text':' Get line & check if empty (cursorpos will show "0-1").','line_number':994,'multiline':False]
['text':' Get the byte value now, in case we need it below. This is more','line_number':998,'multiline':False]
['text':' efficient than making a copy of the line.','line_number':999,'multiline':False]
['text':' Line may have changed since checking the cursor column, or the lnum','line_number':1003,'multiline':False]
['text':' was adjusted above.','line_number':1004,'multiline':False]
['text':' out_p is the current position in the output buffer','line_number':1020,'multiline':False]
['text':' out_end_p is the last valid character in the output buffer','line_number':1023,'multiline':False]
['text':' Note: The null termination character must occur here or earlier,','line_number':1024,'multiline':False]
['text':'       so any user-visible characters must occur before here.','line_number':1025,'multiline':False]
['text':' Proceed character by character through the statusline format string','line_number':1028,'multiline':False]
['text':' fmt_p is the current position in the input buffer','line_number':1029,'multiline':False]
['text':' Copy the formatting verbatim until we reach the end of the string','line_number':1048,'multiline':False]
['text':' or find a formatting item (denoted by `%`)','line_number':1049,'multiline':False]
['text':' or run out of room in our output buffer.','line_number':1050,'multiline':False]
['text':' If we have processed the entire format string or run out of','line_number':1055,'multiline':False]
['text':' room in our output buffer, exit the loop.','line_number':1056,'multiline':False]
['text':' The rest of this loop will handle a single `%` item.','line_number':1061,'multiline':False]
['text':' Note: We increment here to skip over the `%` character we are currently','line_number':1062,'multiline':False]
['text':'       on so we can process the item's contents.','line_number':1063,'multiline':False]
['text':' Ignore `%` at the end of the format string','line_number':1066,'multiline':False]
['text':' Two `%` in a row is the escape sequence to print a','line_number':1071,'multiline':False]
['text':' single `%` in the output buffer.','line_number':1072,'multiline':False]
['text':' STL_SEPARATE: Separation between items, filled with white space.','line_number':1079,'multiline':False]
['text':' Ignored when we are inside of a grouping','line_number':1082,'multiline':False]
['text':' STL_TRUNCMARK: Where to begin truncating if the statusline is too long.','line_number':1091,'multiline':False]
['text':' The end of a grouping','line_number':1099,'multiline':False]
['text':' Ignore if we are not actually inside a group currently','line_number':1102,'multiline':False]
['text':' Determine how long the group is.','line_number':1108,'multiline':False]
['text':' Note: We set the current output position to null','line_number':1109,'multiline':False]
['text':'       so `vim_strsize` will work.','line_number':1110,'multiline':False]
['text':' If the group contained internal items','line_number':1115,'multiline':False]
['text':' and the group did not have a minimum width,','line_number':1116,'multiline':False]
['text':' and if there were no normal items in the group,','line_number':1117,'multiline':False]
['text':' move the output pointer back to where the group started.','line_number':1118,'multiline':False]
['text':' Note: This erases any non-item characters that were in the group.','line_number':1119,'multiline':False]
['text':'       Otherwise there would be no reason to do this step.','line_number':1120,'multiline':False]
['text':' remove group if all items are empty and highlight group','line_number':1123,'multiline':False]
['text':' doesn't change','line_number':1124,'multiline':False]
['text':' empty group','line_number':1143,'multiline':False]
['text':' do not use the highlighting from the removed group','line_number':1147,'multiline':False]
['text':' adjust the start position of TabPage to the next','line_number':1151,'multiline':False]
['text':' item position','line_number':1152,'multiline':False]
['text':' If the group is longer than it is allowed to be','line_number':1160,'multiline':False]
['text':' truncate by removing bytes from the start of the group text.','line_number':1161,'multiline':False]
['text':' { Determine the number of bytes to remove','line_number':1163,'multiline':False]
['text':' Find the first character that should be included.','line_number':1165,'multiline':False]
['text':' }','line_number':1171,'multiline':False]
['text':' Prepend the `<` to indicate that the output was truncated.','line_number':1173,'multiline':False]
['text':' { Move the truncated output','line_number':1176,'multiline':False]
['text':' Fill up space left over by half a double-wide char.','line_number':1179,'multiline':False]
['text':' }','line_number':1183,'multiline':False]
['text':' correct the start of the items for the truncation','line_number':1185,'multiline':False]
['text':' Shift everything back by the number of removed bytes','line_number':1187,'multiline':False]
['text':' Minus one for the leading '<' added above.','line_number':1188,'multiline':False]
['text':' If the item was partially or completely truncated, set its','line_number':1191,'multiline':False]
['text':' start to the start of the group','line_number':1192,'multiline':False]
['text':' If the group is shorter than the minimum width, add padding characters.','line_number':1197,'multiline':False]
['text':' If the group is left-aligned, add characters to the right.','line_number':1200,'multiline':False]
['text':' If the group is right-aligned, shift everything to the right and','line_number':1206,'multiline':False]
['text':' prepend with filler characters.','line_number':1207,'multiline':False]
['text':' { Move the group to the right','line_number':1209,'multiline':False]
['text':' }','line_number':1216,'multiline':False]
['text':' Adjust item start positions','line_number':1218,'multiline':False]
['text':' Prepend the fill characters','line_number':1223,'multiline':False]
['text':' Denotes that numbers should be left-padded with zeros','line_number':1235,'multiline':False]
['text':' Denotes that the item should be left-aligned.','line_number':1241,'multiline':False]
['text':' This is tracked by using a negative length.','line_number':1242,'multiline':False]
['text':' The first digit group is the item's min width','line_number':1248,'multiline':False]
['text':' User highlight groups override the min width field','line_number':1253,'multiline':False]
['text':' to denote the styling to use.','line_number':1254,'multiline':False]
['text':' TABPAGE pairs are used to denote a region that when clicked will','line_number':1264,'multiline':False]
['text':' either switch to or close a tab.','line_number':1265,'multiline':False]
['text':'','line_number':1266,'multiline':False]
['text':' Ex: tabline=%0Ttab\ zero%X','line_number':1267,'multiline':False]
['text':'   This tabline has a TABPAGENR item with minwid `0`,','line_number':1268,'multiline':False]
['text':'   which is then closed with a TABCLOSENR item.','line_number':1269,'multiline':False]
['text':'   Clicking on this region with mouse enabled will switch to tab 0.','line_number':1270,'multiline':False]
['text':'   Setting the minwid to a different value will switch','line_number':1271,'multiline':False]
['text':'   to that tab, if it exists','line_number':1272,'multiline':False]
['text':'','line_number':1273,'multiline':False]
['text':' Ex: tabline=%1Xtab\ one%X','line_number':1274,'multiline':False]
['text':'   This tabline has a TABCLOSENR item with minwid `1`,','line_number':1275,'multiline':False]
['text':'   which is then closed with a TABCLOSENR item.','line_number':1276,'multiline':False]
['text':'   Clicking on this region with mouse enabled will close tab 0.','line_number':1277,'multiline':False]
['text':'   This is determined by the following formula:','line_number':1278,'multiline':False]
['text':'      tab to close = (1 - minwid)','line_number':1279,'multiline':False]
['text':'   This is because for TABPAGENR we use `minwid` = `tab number`.','line_number':1280,'multiline':False]
['text':'   For TABCLOSENR we store the tab number as a negative value.','line_number':1281,'multiline':False]
['text':'   Because 0 is a valid TABPAGENR value, we have to','line_number':1282,'multiline':False]
['text':'   start our numbering at `-1`.','line_number':1283,'multiline':False]
['text':'   So, `-1` corresponds to us wanting to close tab `0`','line_number':1284,'multiline':False]
['text':'','line_number':1285,'multiline':False]
['text':' Note: These options are only valid when creating a tabline.','line_number':1286,'multiline':False]
['text':' %X ends the close label, go back to the previous tab label nr.','line_number':1290,'multiline':False]
['text':' close nrs are stored as negative values','line_number':1298,'multiline':False]
['text':' Denotes the end of the minwid','line_number':1328,'multiline':False]
['text':' the maxwid may follow immediately after','line_number':1329,'multiline':False]
['text':' Bound the minimum width at 50.','line_number':1337,'multiline':False]
['text':' Make the number negative to denote left alignment of the item','line_number':1338,'multiline':False]
['text':' Denotes the start of a new group','line_number':1341,'multiline':False]
['text':' Denotes end of expanded %{} block','line_number':1353,'multiline':False]
['text':' An invalid item was specified.','line_number':1360,'multiline':False]
['text':' Continue processing on the next character of the format string.','line_number':1361,'multiline':False]
['text':' can happen with "%0"','line_number':1363,'multiline':False]
['text':' The status line item type','line_number':1370,'multiline':False]
['text':' OK - now for the real work','line_number':1373,'multiline':False]
['text':' Set fillable to false so that ' ' in the filename will not','line_number':1383,'multiline':False]
['text':' get replaced with the fillchar','line_number':1384,'multiline':False]
['text':' '{'','line_number':1400,'multiline':False]
['text':' Attempt to copy the expression to evaluate into','line_number':1410,'multiline':False]
['text':' the output buffer as a null-terminated string.','line_number':1411,'multiline':False]
['text':' missing '}' or out of space','line_number':1417,'multiline':False]
['text':' remove the % at the end of %{% expr %}','line_number':1422,'multiline':False]
['text':' Move our position in the output buffer','line_number':1427,'multiline':False]
['text':' to the beginning of the expression','line_number':1428,'multiline':False]
['text':' { Evaluate the expression','line_number':1431,'multiline':False]
['text':' Store the current buffer number as a string variable','line_number':1433,'multiline':False]
['text':' Visual mode is only valid in the current window.','line_number':1444,'multiline':False]
['text':' Note: The result stored in `t` is unused.','line_number':1449,'multiline':False]
['text':' Remove the variable we just stored','line_number':1456,'multiline':False]
['text':' }','line_number':1460,'multiline':False]
['text':' Check if the evaluated result is a number.','line_number':1462,'multiline':False]
['text':' If so, convert the number to an int and free the string.','line_number':1463,'multiline':False]
['text':' If the output of the expression needs to be evaluated','line_number':1472,'multiline':False]
['text':' replace the %{} block with the result of evaluation','line_number':1473,'multiline':False]
['text':' Overload %l with v:lnum for 'statuscolumn'','line_number':1504,'multiline':False]
['text':' Don't display %V if it's the same as %c.','line_number':1525,'multiline':False]
['text':' Store the position percentage in our temporary buffer.','line_number':1540,'multiline':False]
['text':' Note: We cannot store the value in `num` because','line_number':1541,'multiline':False]
['text':'       `get_rel_pos` can return a named position. Ex: "Top"','line_number':1542,'multiline':False]
['text':' Note: This is important because `append_arg_number` starts appending','line_number':1556,'multiline':False]
['text':'       at the end of the null-terminated string.','line_number':1557,'multiline':False]
['text':'       Setting the first byte to null means it will place the argument','line_number':1558,'multiline':False]
['text':'       number string at the beginning of the buffer.','line_number':1559,'multiline':False]
['text':' Note: The call will only return true if it actually','line_number':1562,'multiline':False]
['text':'       appended data to the `buf_tmp` buffer.','line_number':1563,'multiline':False]
['text':' Overload %r with v:relnum for 'statuscolumn'','line_number':1608,'multiline':False]
['text':' 'C' for 'statuscolumn'','line_number':1629,'multiline':False]
['text':' 's' for 'statuscolumn'','line_number':1630,'multiline':False]
['text':' Copy the filetype if it is not null and the formatted string will fit','line_number':1672,'multiline':False]
['text':' in the temporary buffer','line_number':1673,'multiline':False]
['text':' (including the brackets and null terminating character)','line_number':1674,'multiline':False]
['text':' Copy the filetype if it is not null and the formatted string will fit','line_number':1685,'multiline':False]
['text':' in the temporary buffer','line_number':1686,'multiline':False]
['text':' (including the comma and null terminating character)','line_number':1687,'multiline':False]
['text':' Uppercase the file extension','line_number':1691,'multiline':False]
['text':' { The name of the highlight is surrounded by `#`','line_number':1734,'multiline':False]
['text':' }','line_number':1739,'multiline':False]
['text':' Create a highlight item based on the name','line_number':1741,'multiline':False]
['text':' If we made it this far, the item is normal and starts at','line_number':1753,'multiline':False]
['text':' our current position in the output buffer.','line_number':1754,'multiline':False]
['text':' Non-normal items would have `continued`.','line_number':1755,'multiline':False]
['text':' Copy the item string into the output buffer','line_number':1759,'multiline':False]
['text':' { Skip the leading `,` or ` ` if the item is a flag','line_number':1761,'multiline':False]
['text':'  and the proper conditions are met','line_number':1762,'multiline':False]
['text':' }','line_number':1772,'multiline':False]
['text':' If this item is non-empty, record that the last thing','line_number':1776,'multiline':False]
['text':' we put in the output buffer was an item','line_number':1777,'multiline':False]
['text':' If the item is too wide, truncate it from the beginning','line_number':1782,'multiline':False]
['text':' Early out if there isn't enough room for the truncation marker','line_number':1789,'multiline':False]
['text':' Add the truncation marker','line_number':1794,'multiline':False]
['text':' If the item is right aligned and not wide enough,','line_number':1798,'multiline':False]
['text':' pad with fill characters.','line_number':1799,'multiline':False]
['text':' Don't put a "-" in front of a digit.','line_number':1802,'multiline':False]
['text':' For a 'statuscolumn' sign or fold item, shift the added items','line_number':1810,'multiline':False]
['text':' Note: The negative value denotes a left aligned item.','line_number':1818,'multiline':False]
['text':'       Here we switch the minimum width back to a positive value.','line_number':1819,'multiline':False]
['text':' { Copy the string text into the output buffer','line_number':1823,'multiline':False]
['text':' Change a space by fillchar, unless fillchar is '-' and a','line_number':1825,'multiline':False]
['text':' digit follows.','line_number':1826,'multiline':False]
['text':' }','line_number':1834,'multiline':False]
['text':' For a 'statuscolumn' sign or fold item, add an item to reset the highlight group','line_number':1836,'multiline':False]
['text':' For left-aligned items, fill any remaining space with the fillchar','line_number':1844,'multiline':False]
['text':' Otherwise if the item is a number, copy that to the output buffer.','line_number':1849,'multiline':False]
['text':' not sufficient space','line_number':1852,'multiline':False]
['text':' { Build the formatting string','line_number':1856,'multiline':False]
['text':' Note: The `*` means we take the width as one of the arguments','line_number':1868,'multiline':False]
['text':' }','line_number':1872,'multiline':False]
['text':' { Determine how many characters the number will take up when printed','line_number':1874,'multiline':False]
['text':'  Note: We have to cast the base because the compiler uses','line_number':1875,'multiline':False]
['text':'        unsigned ints for the enum values.','line_number':1876,'multiline':False]
['text':' VIRTCOL_ALT takes up an extra character because','line_number':1882,'multiline':False]
['text':' of the `-` we added above.','line_number':1883,'multiline':False]
['text':' }','line_number':1887,'multiline':False]
['text':' If the number is going to take up too much room','line_number':1892,'multiline':False]
['text':' Figure out the approximate number in "scientific" type notation.','line_number':1893,'multiline':False]
['text':' Ex: 14532 with maxwid of 4 -> '14>3'','line_number':1894,'multiline':False]
['text':' Add two to the width because the power piece will take','line_number':1896,'multiline':False]
['text':' two extra characters','line_number':1897,'multiline':False]
['text':' How many extra characters there are','line_number':1900,'multiline':False]
['text':' { Reduce the number by base^n','line_number':1903,'multiline':False]
['text':' }','line_number':1907,'multiline':False]
['text':' { Add the format string for the exponent bit','line_number':1909,'multiline':False]
['text':' Use the same base as the first number','line_number':1912,'multiline':False]
['text':' }','line_number':1915,'multiline':False]
['text':' Advance the output buffer position to the end of the','line_number':1922,'multiline':False]
['text':' number we just printed','line_number':1923,'multiline':False]
['text':' Otherwise, there was nothing to print so mark the item as empty','line_number':1926,'multiline':False]
['text':' Only free the string buffer if we allocated it.','line_number':1931,'multiline':False]
['text':' Note: This is not needed if `str` is pointing at `tmp`','line_number':1932,'multiline':False]
['text':' Item not NULL, but not a flag','line_number':1938,'multiline':False]
['text':' Item processed, move to the next','line_number':1941,'multiline':False]
['text':' Free the format buffer if we allocated it internally','line_number':1948,'multiline':False]
['text':' We have now processed the entire statusline format string.','line_number':1953,'multiline':False]
['text':' What follows is post-processing to handle alignment and highlighting.','line_number':1954,'multiline':False]
['text':' Return truncated width for 'statuscolumn'','line_number':1957,'multiline':False]
['text':' Result is too long, must truncate somewhere.','line_number':1962,'multiline':False]
['text':' If there are no items, truncate from beginning','line_number':1966,'multiline':False]
['text':' Otherwise, look for the truncation item','line_number':1970,'multiline':False]
['text':' Default to truncating at the first item','line_number':1972,'multiline':False]
['text':' Truncate at %< stl_items.','line_number':1978,'multiline':False]
['text':' If the truncation point we found is beyond the maximum','line_number':1986,'multiline':False]
['text':' length of the string, truncate the end of the string.','line_number':1987,'multiline':False]
['text':' Walk from the beginning of the','line_number':1989,'multiline':False]
['text':' string to find the last character that will fit.','line_number':1990,'multiline':False]
['text':' Note: Only advance the pointer if the next','line_number':1999,'multiline':False]
['text':'       character will fit in the available output space','line_number':2000,'multiline':False]
['text':' Ignore any items in the statusline that occur after','line_number':2004,'multiline':False]
['text':' the truncation point','line_number':2005,'multiline':False]
['text':' Truncate the output','line_number':2018,'multiline':False]
['text':' Truncate at the truncation point we found','line_number':2022,'multiline':False]
['text':' { Determine how many bytes to remove','line_number':2024,'multiline':False]
['text':' }','line_number':2030,'multiline':False]
['text':' { Truncate the string','line_number':2032,'multiline':False]
['text':' Put a `<` to mark where we truncated at','line_number':2036,'multiline':False]
['text':' }','line_number':2038,'multiline':False]
['text':' { Change the start point for items based on','line_number':2040,'multiline':False]
['text':'  their position relative to our truncation point','line_number':2041,'multiline':False]
['text':' Note: The offset is one less than the truncation length because','line_number':2043,'multiline':False]
['text':'       the truncation marker `<` is not counted.','line_number':2044,'multiline':False]
['text':' Items starting at or after the end of the truncated section need','line_number':2048,'multiline':False]
['text':' to be moved backwards.','line_number':2049,'multiline':False]
['text':' Anything inside the truncated area is set to start','line_number':2053,'multiline':False]
['text':' at the `<` truncation character.','line_number':2054,'multiline':False]
['text':' }','line_number':2058,'multiline':False]
['text':' Advance the pointer to the end of the string','line_number':2061,'multiline':False]
['text':' Fill up for half a double-wide character.','line_number':2065,'multiline':False]
['text':' If there is room left in our statusline, and room left in our buffer,','line_number':2073,'multiline':False]
['text':' add characters at the separate marker (if there is one) to','line_number':2074,'multiline':False]
['text':' fill up the available space.','line_number':2075,'multiline':False]
['text':' Find how many separators there are, which we will use when','line_number':2078,'multiline':False]
['text':' figuring out how many groups there are.','line_number':2079,'multiline':False]
['text':' Create an array of the start location for each separator mark.','line_number':2083,'multiline':False]
['text':' If we have separated groups, then we deal with it now','line_number':2089,'multiline':False]
['text':' Store the info about highlighting.','line_number':2116,'multiline':False]
['text':' Store the info about tab pages labels.','line_number':2131,'multiline':False]
['text':' When inside update_screen we do not want redrawing a statusline, ruler,','line_number':2167,'multiline':False]
['text':' title, etc. to trigger another redraw, it may cause an endless loop.','line_number':2168,'multiline':False]
['text':' Check for an error.  If there is one the display will be messed up and','line_number':2174,'multiline':False]
['text':' might loop redrawing.  Avoid that by making the corresponding option','line_number':2175,'multiline':False]
['text':' empty.','line_number':2176,'multiline':False]
['text':' TODO(Bram): find out why using called_emsg_before makes tests fail, does it','line_number':2177,'multiline':False]
['text':' matter?','line_number':2178,'multiline':False]
['text':' if (called_emsg > called_emsg_before)','line_number':2179,'multiline':False]
['text':' A user function may reset KeyTyped, restore it.','line_number':2184,'multiline':False]
