['text':' File searching functions for 'path', 'tags' and 'cdpath' options.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' External visible functions:','line_number':3,'multiline':False]
['text':'   vim_findfile_init()          creates/initialises the search context','line_number':4,'multiline':False]
['text':'   vim_findfile_free_visited()  free list of visited files/dirs of search','line_number':5,'multiline':False]
['text':'                                context','line_number':6,'multiline':False]
['text':'   vim_findfile()               find a file in the search context','line_number':7,'multiline':False]
['text':'   vim_findfile_cleanup()       cleanup/free search context created by','line_number':8,'multiline':False]
['text':'                                vim_findfile_init()','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' All static functions and variables start with 'ff_'','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' In general it works like this:','line_number':13,'multiline':False]
['text':' First you create yourself a search context by calling vim_findfile_init().','line_number':14,'multiline':False]
['text':' It is possible to give a search context from a previous call to','line_number':15,'multiline':False]
['text':' vim_findfile_init(), so it can be reused. After this you call vim_findfile()','line_number':16,'multiline':False]
['text':' until you are satisfied with the result or it returns NULL. On every call it','line_number':17,'multiline':False]
['text':' returns the next file which matches the conditions given to','line_number':18,'multiline':False]
['text':' vim_findfile_init(). If it doesn't find a next file it returns NULL.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' It is possible to call vim_findfile_init() again to reinitialise your search','line_number':21,'multiline':False]
['text':' with some new parameters. Don't forget to pass your old search context to','line_number':22,'multiline':False]
['text':' it, so it can reuse it and especially reuse the list of already visited','line_number':23,'multiline':False]
['text':' directories. If you want to delete the list of already visited directories','line_number':24,'multiline':False]
['text':' simply call vim_findfile_free_visited().','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' When you are done call vim_findfile_cleanup() to free the search context.','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' The function vim_findfile_init() has a long comment, which describes the','line_number':29,'multiline':False]
['text':' needed parameters.','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' ATTENTION:','line_number':34,'multiline':False]
['text':' ==========','line_number':35,'multiline':False]
['text':' We use an allocated search context, these functions are NOT thread-safe!!!!!','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' To minimize parameter passing (or because I'm too lazy), only the','line_number':38,'multiline':False]
['text':' external visible functions get a search context as a parameter. This is','line_number':39,'multiline':False]
['text':' then assigned to a static global, which is used throughout the local','line_number':40,'multiline':False]
['text':' functions.','line_number':41,'multiline':False]
['text':' used for expanding filenames','line_number':73,'multiline':False]
['text':' type for the directory search stack','line_number':75,'multiline':False]
['text':' the fix part (no wildcards) and the part containing the wildcards','line_number':79,'multiline':False]
['text':' of the search path','line_number':80,'multiline':False]
['text':' files/dirs found in the above directory, matched by the first wildcard','line_number':84,'multiline':False]
['text':' of wc_part','line_number':85,'multiline':False]
['text':' needed for partly handled dirs','line_number':88,'multiline':False]
['text':' to store status of partly handled directories','line_number':90,'multiline':False]
['text':' 0: we work on this directory for the first time','line_number':91,'multiline':False]
['text':' 1: this directory was partly searched in an earlier step','line_number':92,'multiline':False]
['text':' How deep are we in the directory tree?','line_number':95,'multiline':False]
['text':' Counts backward from value of level parameter to vim_findfile_init','line_number':96,'multiline':False]
['text':' Did we already expand '**' to an empty string?','line_number':99,'multiline':False]
['text':' type for already visited directories or files.','line_number':103,'multiline':False]
['text':' Visited directories are different if the wildcard string are','line_number':107,'multiline':False]
['text':' different. So we have to save it.','line_number':108,'multiline':False]
['text':' use FileID for comparison (needed because of links), else use filename.','line_number':111,'multiline':False]
['text':' The memory for this struct is allocated according to the length of','line_number':114,'multiline':False]
['text':' ffv_fname.','line_number':115,'multiline':False]
['text':' We might have to manage several visited lists during a search.','line_number':119,'multiline':False]
['text':' This is especially needed for the tags option. If tags is set to:','line_number':120,'multiline':False]
['text':'      "./++/tags,./++/TAGS,++/tags"  (replace + with *)','line_number':121,'multiline':False]
['text':' So we have to do 3 searches:','line_number':122,'multiline':False]
['text':'   1) search from the current files directory downward for the file "tags"','line_number':123,'multiline':False]
['text':'   2) search from the current files directory downward for the file "TAGS"','line_number':124,'multiline':False]
['text':'   3) search from Vims current directory downwards for the file "tags"','line_number':125,'multiline':False]
['text':' As you can see, the first and the third search are for the same file, so for','line_number':126,'multiline':False]
['text':' the third search we can use the visited list of the first search. For the','line_number':127,'multiline':False]
['text':' second search we must start from an empty visited list.','line_number':128,'multiline':False]
['text':' The struct ff_visited_list_hdr is used to manage a linked list of already','line_number':129,'multiline':False]
['text':' visited lists.','line_number':130,'multiline':False]
['text':' the filename the attached visited list is for','line_number':134,'multiline':False]
['text':' '**' can be expanded to several directory levels.','line_number':140,'multiline':False]
['text':' Set the default maximum depth.','line_number':141,'multiline':False]
['text':' The search context:','line_number':144,'multiline':False]
['text':'   ffsc_stack_ptr:    the stack for the dirs to search','line_number':145,'multiline':False]
['text':'   ffsc_visited_list: the currently active visited list','line_number':146,'multiline':False]
['text':'   ffsc_dir_visited_list: the currently active visited list for search dirs','line_number':147,'multiline':False]
['text':'   ffsc_visited_lists_list: the list of all visited lists','line_number':148,'multiline':False]
['text':'   ffsc_dir_visited_lists_list: the list of all visited lists for search dirs','line_number':149,'multiline':False]
['text':'   ffsc_file_to_search:     the file to search for','line_number':150,'multiline':False]
['text':'   ffsc_start_dir:    the starting directory, if search path was relative','line_number':151,'multiline':False]
['text':'   ffsc_fix_path:     the fix part of the given path (without wildcards)','line_number':152,'multiline':False]
['text':'                      Needed for upward search.','line_number':153,'multiline':False]
['text':'   ffsc_wc_path:      the part of the given path containing wildcards','line_number':154,'multiline':False]
['text':'   ffsc_level:        how many levels of dirs to search downwards','line_number':155,'multiline':False]
['text':'   ffsc_stopdirs_v:   array of stop directories for upward search','line_number':156,'multiline':False]
['text':'   ffsc_find_what:    FINDFILE_BOTH, FINDFILE_DIR or FINDFILE_FILE','line_number':157,'multiline':False]
['text':'   ffsc_tagfile:      searching for tags file, don't use 'suffixesadd'','line_number':158,'multiline':False]
['text':' locally needed functions','line_number':175,'multiline':False]
['text':'/ Initialization routine for vim_findfile().','line_number':184,'multiline':False]
['text':'/','line_number':185,'multiline':False]
['text':'/ Returns the newly allocated search context or NULL if an error occurred.','line_number':186,'multiline':False]
['text':'/','line_number':187,'multiline':False]
['text':'/ Don't forget to clean up by calling vim_findfile_cleanup() if you are done','line_number':188,'multiline':False]
['text':'/ with the search context.','line_number':189,'multiline':False]
['text':'/','line_number':190,'multiline':False]
['text':'/ Find the file 'filename' in the directory 'path'.','line_number':191,'multiline':False]
['text':'/ The parameter 'path' may contain wildcards. If so only search 'level'','line_number':192,'multiline':False]
['text':'/ directories deep. The parameter 'level' is the absolute maximum and is','line_number':193,'multiline':False]
['text':'/ not related to restricts given to the '**' wildcard. If 'level' is 100','line_number':194,'multiline':False]
['text':'/ and you use '**200' vim_findfile() will stop after 100 levels.','line_number':195,'multiline':False]
['text':'/','line_number':196,'multiline':False]
['text':'/ 'filename' cannot contain wildcards!  It is used as-is, no backslashes to','line_number':197,'multiline':False]
['text':'/ escape special characters.','line_number':198,'multiline':False]
['text':'/','line_number':199,'multiline':False]
['text':'/ If 'stopdirs' is not NULL and nothing is found downward, the search is','line_number':200,'multiline':False]
['text':'/ restarted on the next higher directory level. This is repeated until the','line_number':201,'multiline':False]
['text':'/ start-directory of a search is contained in 'stopdirs'. 'stopdirs' has the','line_number':202,'multiline':False]
['text':'/ format ";*<dirname>*\(;<dirname>\)*;\=$".','line_number':203,'multiline':False]
['text':'/','line_number':204,'multiline':False]
['text':'/ If the 'path' is relative, the starting dir for the search is either VIM's','line_number':205,'multiline':False]
['text':'/ current dir or if the path starts with "./" the current files dir.','line_number':206,'multiline':False]
['text':'/ If the 'path' is absolute, the starting dir is that part of the path before','line_number':207,'multiline':False]
['text':'/ the first wildcard.','line_number':208,'multiline':False]
['text':'/','line_number':209,'multiline':False]
['text':'/ Upward search is only done on the starting dir.','line_number':210,'multiline':False]
['text':'/','line_number':211,'multiline':False]
['text':'/ If 'free_visited' is true the list of already visited files/directories is','line_number':212,'multiline':False]
['text':'/ cleared. Set this to false if you just want to search from another','line_number':213,'multiline':False]
['text':'/ directory, but want to be sure that no directory from a previous search is','line_number':214,'multiline':False]
['text':'/ searched again. This is useful if you search for a file at different places.','line_number':215,'multiline':False]
['text':'/ The list of visited files/dirs can also be cleared with the function','line_number':216,'multiline':False]
['text':'/ vim_findfile_free_visited().','line_number':217,'multiline':False]
['text':'/','line_number':218,'multiline':False]
['text':'/ Set the parameter 'find_what' to FINDFILE_DIR if you want to search for','line_number':219,'multiline':False]
['text':'/ directories only, FINDFILE_FILE for files only, FINDFILE_BOTH for both.','line_number':220,'multiline':False]
['text':'/','line_number':221,'multiline':False]
['text':'/ A search context returned by a previous call to vim_findfile_init() can be','line_number':222,'multiline':False]
['text':'/ passed in the parameter "search_ctx_arg".  This context is reused and','line_number':223,'multiline':False]
['text':'/ reinitialized with the new parameters.  The list of already visited','line_number':224,'multiline':False]
['text':'/ directories from this context is only deleted if the parameter','line_number':225,'multiline':False]
['text':'/ "free_visited" is true.  Be aware that the passed "search_ctx_arg" is freed','line_number':226,'multiline':False]
['text':'/ if the reinitialization fails.','line_number':227,'multiline':False]
['text':'/','line_number':228,'multiline':False]
['text':'/ If you don't have a search context from a previous call "search_ctx_arg"','line_number':229,'multiline':False]
['text':'/ must be NULL.','line_number':230,'multiline':False]
['text':'/','line_number':231,'multiline':False]
['text':'/ This function silently ignores a few errors, vim_findfile() will have','line_number':232,'multiline':False]
['text':'/ limited functionality then.','line_number':233,'multiline':False]
['text':'/','line_number':234,'multiline':False]
['text':'/ @param tagfile  expanding names of tags files','line_number':235,'multiline':False]
['text':'/ @param rel_fname  file name to use for "."','line_number':236,'multiline':False]
['text':' If a search context is given by the caller, reuse it, else allocate a','line_number':244,'multiline':False]
['text':' new one.','line_number':245,'multiline':False]
['text':' clear the search context, but NOT the visited lists','line_number':254,'multiline':False]
['text':' clear visited list if wanted','line_number':257,'multiline':False]
['text':' Reuse old visited lists. Get the visited list for the given','line_number':261,'multiline':False]
['text':' filename. If no list for the current filename exists, creates a new','line_number':262,'multiline':False]
['text':' one.','line_number':263,'multiline':False]
['text':' Store information on starting dir now if path is relative.','line_number':280,'multiline':False]
['text':' If path is absolute, we do that later.','line_number':281,'multiline':False]
['text':' Make the start dir an absolute path name.','line_number':289,'multiline':False]
['text':' "c:dir" needs "c:" to be expanded, otherwise use current dir','line_number':300,'multiline':False]
['text':' NOLINT(readability/braces)','line_number':311,'multiline':False]
['text':' A path that starts with "/dir" is relative to the drive, not to the','line_number':320,'multiline':False]
['text':' directory (but not for "//machine/dir").  Only use the drive name.','line_number':321,'multiline':False]
['text':' If stopdirs are given, split them into an array of pointers.','line_number':330,'multiline':False]
['text':' If this fails (mem allocation), there is no upward search at all or a','line_number':331,'multiline':False]
['text':' stop directory is not recognized -> continue silently.','line_number':332,'multiline':False]
['text':' If stopdirs just contains a ";" or is empty,','line_number':333,'multiline':False]
['text':' search_ctx->ffsc_stopdirs_v will only contain a  NULL pointer. This','line_number':334,'multiline':False]
['text':' is handled as unlimited upward search.  See function','line_number':335,'multiline':False]
['text':' ff_path_in_stoplist() for details.','line_number':336,'multiline':False]
['text':' this might be "", which means ascent till top of directory tree.','line_number':361,'multiline':False]
['text':' split into:','line_number':372,'multiline':False]
['text':'  -fix path','line_number':373,'multiline':False]
['text':'  -wildcard_stuff (might be NULL)','line_number':374,'multiline':False]
['text':' save the fix part of the path','line_number':381,'multiline':False]
['text':' copy wc_path and add restricts to the '**' wildcard.','line_number':385,'multiline':False]
['text':' The octet after a '**' is used as a (binary) counter.','line_number':386,'multiline':False]
['text':' So '**3' is transposed to '**^C' ('^C' is ASCII value 3)','line_number':387,'multiline':False]
['text':' or '**76' is transposed to '**N'( 'N' is ASCII value 76).','line_number':388,'multiline':False]
['text':' If no restrict is given after '**' the default is used.','line_number':389,'multiline':False]
['text':' Due to this technique the path looks awful if you print it as a','line_number':390,'multiline':False]
['text':' string.','line_number':391,'multiline':False]
['text':' restrict is 0 -> remove already added '**'','line_number':406,'multiline':False]
['text':' store the fix part as startdir.','line_number':429,'multiline':False]
['text':' This is needed if the parameter path is fully qualified.','line_number':430,'multiline':False]
['text':' create an absolute path','line_number':435,'multiline':False]
['text':' do not add '..' to the path and start upwards searching','line_number':459,'multiline':False]
['text':' We clear the search context now!','line_number':494,'multiline':False]
['text':' Even when the caller gave us a (perhaps valid) context we free it here,','line_number':495,'multiline':False]
['text':' as we might have already destroyed it.','line_number':496,'multiline':False]
['text':'/ @return  the stopdir string.  Check that ';' is not escaped.','line_number':501,'multiline':False]
['text':' Overwrite the escape char,','line_number':508,'multiline':False]
['text':' use strlen(r_ptr) to move the trailing '\0'.','line_number':509,'multiline':False]
['text':'/ Clean up the given search context. Can handle a NULL pointer.','line_number':524,'multiline':False]
['text':'/ Find a file in a search context.','line_number':536,'multiline':False]
['text':'/ The search context was created with vim_findfile_init() above.','line_number':537,'multiline':False]
['text':'/','line_number':538,'multiline':False]
['text':'/ To get all matching files call this function until you get NULL.','line_number':539,'multiline':False]
['text':'/','line_number':540,'multiline':False]
['text':'/ If the passed search_context is NULL, NULL is returned.','line_number':541,'multiline':False]
['text':'/','line_number':542,'multiline':False]
['text':'/ The search algorithm is depth first. To change this replace the','line_number':543,'multiline':False]
['text':'/ stack with a list (don't forget to leave partly searched directories on the','line_number':544,'multiline':False]
['text':'/ top of the list).','line_number':545,'multiline':False]
['text':'/','line_number':546,'multiline':False]
['text':'/ @return  a pointer to an allocated file name or,','line_number':547,'multiline':False]
['text':'/          NULL if nothing found.','line_number':548,'multiline':False]
['text':' filepath is used as buffer for various actions and as the storage to','line_number':566,'multiline':False]
['text':' return a found filename.','line_number':567,'multiline':False]
['text':' store the end of the start dir -- needed for upward search','line_number':570,'multiline':False]
['text':' upward search loop','line_number':575,'multiline':False]
['text':' downward search loop','line_number':577,'multiline':False]
['text':' check if user wants to stop the search','line_number':579,'multiline':False]
['text':' get directory to work on from stack','line_number':585,'multiline':False]
['text':' TODO(vim): decide if we leave this test in','line_number':591,'multiline':False]
['text':'','line_number':592,'multiline':False]
['text':' GOOD: don't search a directory(-tree) twice.','line_number':593,'multiline':False]
['text':' BAD:  - check linked list for every new directory entered.','line_number':594,'multiline':False]
['text':'       - check for double files also done below','line_number':595,'multiline':False]
['text':'','line_number':596,'multiline':False]
['text':' Here we check if we already searched this directory.','line_number':597,'multiline':False]
['text':' We already searched a directory if:','line_number':598,'multiline':False]
['text':' 1) The directory is the same.','line_number':599,'multiline':False]
['text':' 2) We would use the same wildcard string.','line_number':600,'multiline':False]
['text':'','line_number':601,'multiline':False]
['text':' Good if you have links on same directory via several ways','line_number':602,'multiline':False]
['text':'  or you have selfreferences in directories (e.g. SuSE Linux 6.3:','line_number':603,'multiline':False]
['text':'  /etc/rc.d/init.d is linked to /etc/rc.d -> endless loop)','line_number':604,'multiline':False]
['text':'','line_number':605,'multiline':False]
['text':' This check is only needed for directories we work on for the','line_number':606,'multiline':False]
['text':' first time (hence stackp->ff_filearray == NULL)','line_number':607,'multiline':False]
['text':' don't overwrite this either','line_number':616,'multiline':False]
['text':' don't overwrite this either','line_number':627,'multiline':False]
['text':' check depth','line_number':632,'multiline':False]
['text':' If no filearray till now expand wildcards','line_number':640,'multiline':False]
['text':' The function expand_wildcards() can handle an array of paths','line_number':641,'multiline':False]
['text':' and all possible expands are returned in one array. We use this','line_number':642,'multiline':False]
['text':' to handle the expansion of '**' into an empty string.','line_number':643,'multiline':False]
['text':' we use filepath to build the path expand_wildcards() should expand.','line_number':647,'multiline':False]
['text':' if we have a start dir copy it in','line_number':651,'multiline':False]
['text':' append the fix part of the search path','line_number':665,'multiline':False]
['text':' pointer to the restrict byte','line_number':680,'multiline':False]
['text':' The restrict byte is not a character!','line_number':681,'multiline':False]
['text':' remove '**<numb> from wildcards','line_number':694,'multiline':False]
['text':' if not done before, expand '**' to empty','line_number':701,'multiline':False]
['text':' Here we copy until the next path separator or the end of','line_number':707,'multiline':False]
['text':' the path. If we stop at a path separator, there is','line_number':708,'multiline':False]
['text':' still something else left. This is handled below by','line_number':709,'multiline':False]
['text':' pushing every directory returned from expand_wildcards()','line_number':710,'multiline':False]
['text':' on the stack again for further search.','line_number':711,'multiline':False]
['text':' Expand wildcards like "*" and "$VAR".','line_number':727,'multiline':False]
['text':' If the path is a URL don't try this.','line_number':728,'multiline':False]
['text':' Add EW_NOTWILD because the expanded path may contain','line_number':734,'multiline':False]
['text':' wildcard characters that are to be taken literally.','line_number':735,'multiline':False]
['text':' This is a bit of a hack.','line_number':736,'multiline':False]
['text':' this is the first time we work on this directory','line_number':750,'multiline':False]
['text':' We don't have further wildcards to expand, so we have to','line_number':752,'multiline':False]
['text':' check for the final file now.','line_number':753,'multiline':False]
['text':' not a directory','line_number':757,'multiline':False]
['text':' prepare the filename to be checked for existence below','line_number':759,'multiline':False]
['text':' Try without extra suffix and then with suffixes','line_number':772,'multiline':False]
['text':' from 'suffixesadd'.','line_number':773,'multiline':False]
['text':' if file exists and we didn't already find it','line_number':781,'multiline':False]
['text':' don't overwrite this either','line_number':798,'multiline':False]
['text':' push dir to examine rest of subdirs later','line_number':805,'multiline':False]
['text':' don't overwrite this either','line_number':823,'multiline':False]
['text':' Not found or found already, try next suffix.','line_number':830,'multiline':False]
['text':' still wildcards left, push the directories for further search','line_number':839,'multiline':False]
['text':' not a directory','line_number':842,'multiline':False]
['text':' if wildcards contains '**' we have to descent till we reach the','line_number':854,'multiline':False]
['text':' leaves of the directory tree.','line_number':855,'multiline':False]
['text':' don't repush same directory','line_number':861,'multiline':False]
['text':' not a directory','line_number':864,'multiline':False]
['text':' we are done with the current directory','line_number':872,'multiline':False]
['text':' If we reached this, we didn't find anything downwards.','line_number':876,'multiline':False]
['text':' Let's check if we should do an upward search.','line_number':877,'multiline':False]
['text':' is the last starting directory in the stop list?','line_number':882,'multiline':False]
['text':' cut of last dir','line_number':889,'multiline':False]
['text':' create a new stack entry','line_number':913,'multiline':False]
['text':'/ Free the list of lists of visited files and directories','line_number':927,'multiline':False]
['text':'/ Can handle it if the passed search_context is NULL;','line_number':928,'multiline':False]
['text':'/ @return  the already visited list for the given filename. If none is found it','line_number':970,'multiline':False]
['text':'/          allocates a new one.','line_number':971,'multiline':False]
['text':' check if a visited list for the given filename exists','line_number':977,'multiline':False]
['text':' don't overwrite this either','line_number':986,'multiline':False]
['text':' don't overwrite this either','line_number':1000,'multiline':False]
['text':' if we reach this we didn't find a list and we have to allocate new list','line_number':1005,'multiline':False]
['text':'/ Check if two wildcard paths are equal.','line_number':1016,'multiline':False]
['text':'/ They are equal if:','line_number':1017,'multiline':False]
['text':'/  - both paths are NULL','line_number':1018,'multiline':False]
['text':'/  - they have the same length','line_number':1019,'multiline':False]
['text':'/  - char by char comparison is OK','line_number':1020,'multiline':False]
['text':'/  - the only differences are in the counters behind a '**', so','line_number':1021,'multiline':False]
['text':'/    '**\20' is equal to '**\24'','line_number':1022,'multiline':False]
['text':'/ maintains the list of already visited files and dirs','line_number':1054,'multiline':False]
['text':'/','line_number':1055,'multiline':False]
['text':'/ @return  FAIL if the given file/dir is already in the list or,','line_number':1056,'multiline':False]
['text':'/          OK if it is newly added','line_number':1057,'multiline':False]
['text':' For a URL we only compare the name, otherwise we compare the','line_number':1064,'multiline':False]
['text':' device/inode.','line_number':1065,'multiline':False]
['text':' check against list of already visited files','line_number':1076,'multiline':False]
['text':' are the wildcard parts equal','line_number':1081,'multiline':False]
['text':' already visited','line_number':1083,'multiline':False]
['text':' New file/dir.  Add it to the list of visited files/dirs.','line_number':1089,'multiline':False]
['text':'/ create stack element from given path pieces','line_number':1113,'multiline':False]
['text':' the following saves NULL pointer checks in vim_findfile','line_number':1127,'multiline':False]
['text':'/ Push a dir on the directory stack.','line_number':1141,'multiline':False]
['text':' check for NULL pointer, not to return an error to the user, but','line_number':1144,'multiline':False]
['text':' to prevent a crash','line_number':1145,'multiline':False]
['text':'/ Pop a dir from the directory stack.','line_number':1154,'multiline':False]
['text':'/','line_number':1155,'multiline':False]
['text':'/ @return  NULL if stack is empty.','line_number':1156,'multiline':False]
['text':'/ free the given stack element','line_number':1169,'multiline':False]
['text':' free handles possible NULL pointers','line_number':1176,'multiline':False]
['text':'/ Clear the search context, but NOT the visited list.','line_number':1187,'multiline':False]
['text':' clear up stack','line_number':1192,'multiline':False]
['text':' reset everything','line_number':1213,'multiline':False]
['text':'/ check if the given path is in the stopdirs','line_number':1221,'multiline':False]
['text':'/','line_number':1222,'multiline':False]
['text':'/ @return  true if yes else false','line_number':1223,'multiline':False]
['text':' eat up trailing path separators, except the first','line_number':1228,'multiline':False]
['text':' if no path consider it as match','line_number':1233,'multiline':False]
['text':' match for parent directory. So '/home' also matches','line_number':1240,'multiline':False]
['text':' '/home/rks'. Check for PATHSEP in stopdirs_v[i], else','line_number':1241,'multiline':False]
['text':' '/home/r' would also match '/home/rks'','line_number':1242,'multiline':False]
['text':'/ Find the file name "ptr[len]" in the path.  Also finds directory names.','line_number':1256,'multiline':False]
['text':'/','line_number':1257,'multiline':False]
['text':'/ On the first call set the parameter 'first' to true to initialize','line_number':1258,'multiline':False]
['text':'/ the search.  For repeating calls to false.','line_number':1259,'multiline':False]
['text':'/','line_number':1260,'multiline':False]
['text':'/ Repeating calls will return other files called 'ptr[len]' from the path.','line_number':1261,'multiline':False]
['text':'/','line_number':1262,'multiline':False]
['text':'/ Only on the first call 'ptr' and 'len' are used.  For repeating calls they','line_number':1263,'multiline':False]
['text':'/ don't need valid values.','line_number':1264,'multiline':False]
['text':'/','line_number':1265,'multiline':False]
['text':'/ If nothing found on the first call the option FNAME_MESS will issue the','line_number':1266,'multiline':False]
['text':'/ message:','line_number':1267,'multiline':False]
['text':'/          'Can't find file "<file>" in path'','line_number':1268,'multiline':False]
['text':'/ On repeating calls:','line_number':1269,'multiline':False]
['text':'/          'No more file "<file>" found in path'','line_number':1270,'multiline':False]
['text':'/','line_number':1271,'multiline':False]
['text':'/ options:','line_number':1272,'multiline':False]
['text':'/ FNAME_MESS       give error message when not found','line_number':1273,'multiline':False]
['text':'/','line_number':1274,'multiline':False]
['text':'/ Uses NameBuff[]!','line_number':1275,'multiline':False]
['text':'/','line_number':1276,'multiline':False]
['text':'/ @param ptr  file name','line_number':1277,'multiline':False]
['text':'/ @param len  length of file name','line_number':1278,'multiline':False]
['text':'/ @param first  use count'th matching file name','line_number':1279,'multiline':False]
['text':'/ @param rel_fname  file name searching relative to','line_number':1280,'multiline':False]
['text':'/ @param[in,out] file_to_find  modified copy of file name','line_number':1281,'multiline':False]
['text':'/ @param[in,out] search_ctx  state of the search','line_number':1282,'multiline':False]
['text':'/','line_number':1283,'multiline':False]
['text':'/ @return  an allocated string for the file name.  NULL for error.','line_number':1284,'multiline':False]
['text':'/ Find the directory name "ptr[len]" in the path.','line_number':1303,'multiline':False]
['text':'/','line_number':1304,'multiline':False]
['text':'/ options:','line_number':1305,'multiline':False]
['text':'/ FNAME_MESS       give error message when not found','line_number':1306,'multiline':False]
['text':'/ FNAME_UNESC      unescape backslashes','line_number':1307,'multiline':False]
['text':'/','line_number':1308,'multiline':False]
['text':'/ Uses NameBuff[]!','line_number':1309,'multiline':False]
['text':'/','line_number':1310,'multiline':False]
['text':'/ @param ptr  file name','line_number':1311,'multiline':False]
['text':'/ @param len  length of file name','line_number':1312,'multiline':False]
['text':'/ @param rel_fname  file name searching relative to','line_number':1313,'multiline':False]
['text':'/ @param[in,out] file_to_find  modified copy of file name','line_number':1314,'multiline':False]
['text':'/ @param[in,out] search_ctx  state of the search','line_number':1315,'multiline':False]
['text':'/','line_number':1316,'multiline':False]
['text':'/ @return  an allocated string for the file name.  NULL for error.','line_number':1317,'multiline':False]
['text':'/ @param ptr  file name','line_number':1326,'multiline':False]
['text':'/ @param len  length of file name','line_number':1327,'multiline':False]
['text':'/ @param first  use count'th matching file name','line_number':1328,'multiline':False]
['text':'/ @param path_option  p_path or p_cdpath','line_number':1329,'multiline':False]
['text':'/ @param find_what  FINDFILE_FILE, _DIR or _BOTH','line_number':1330,'multiline':False]
['text':'/ @param rel_fname  file name we are looking relative to.','line_number':1331,'multiline':False]
['text':'/ @param suffixes  list of suffixes, 'suffixesadd' option','line_number':1332,'multiline':False]
['text':'/ @param[in,out] file_to_find  modified copy of file name','line_number':1333,'multiline':False]
['text':'/ @param[in,out] search_ctx_arg  state of the search','line_number':1334,'multiline':False]
['text':' Do not attempt to search "relative" to a URL. #6009','line_number':1348,'multiline':False]
['text':' copy file name into NameBuff, expanding environment variables','line_number':1357,'multiline':False]
['text':' Change all "\ " to " ".','line_number':1366,'multiline':False]
['text':' "..", "../path", "." and "./path": don't use the path_option','line_number':1382,'multiline':False]
['text':' handle "\tmp" as absolute path','line_number':1385,'multiline':False]
['text':' handle "c:name" as absolute path','line_number':1387,'multiline':False]
['text':' Absolute path, no need to use "path_option".','line_number':1391,'multiline':False]
['text':' If this is not a first call, return NULL.  We already returned a','line_number':1392,'multiline':False]
['text':' filename on the first call.','line_number':1393,'multiline':False]
['text':' When FNAME_REL flag given first use the directory of the file.','line_number':1400,'multiline':False]
['text':' Otherwise or when this fails use the current directory.','line_number':1401,'multiline':False]
['text':' When the file doesn't exist, try adding parts of 'suffixesadd'.','line_number':1417,'multiline':False]
['text':' Loop over all paths in the 'path' or 'cdpath' option.','line_number':1436,'multiline':False]
['text':' When "first" is set, first setup to the start of the option.','line_number':1437,'multiline':False]
['text':' Otherwise continue to find the next match.','line_number':1438,'multiline':False]
['text':' vim_findfile_free_visited can handle a possible NULL pointer','line_number':1440,'multiline':False]
['text':' We searched all paths of the option, now we can free the search context.','line_number':1458,'multiline':False]
['text':' copy next path','line_number':1466,'multiline':False]
['text':' get the stopdir string','line_number':1470,'multiline':False]
['text':' No autocommand was defined or we changed','line_number':1509,'multiline':False]
['text':' the directory from this autocommand.','line_number':1510,'multiline':False]
['text':' Should never happen.','line_number':1531,'multiline':False]
['text':' Should never happen.','line_number':1559,'multiline':False]
['text':'/ Change to a file's directory.','line_number':1570,'multiline':False]
['text':'/ Caller must call shorten_fnames()!','line_number':1571,'multiline':False]
['text':'/','line_number':1572,'multiline':False]
['text':'/ @return  OK or FAIL','line_number':1573,'multiline':False]
['text':' nothing to do','line_number':1586,'multiline':False]
['text':'/ Change directory to "new_dir". Search 'cdpath' for relative directory names.','line_number':1605,'multiline':False]
