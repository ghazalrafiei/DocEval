['text':' cmdexpand.c: functions for command-line completion','line_number':1,'multiline':False]
['text':'/ Type used by call_user_expand_func','line_number':70,'multiline':False]
['text':'/< Only show path tail in lists ?','line_number':77,'multiline':False]
['text':'/ "compl_match_array" points the currently displayed list of entries in the','line_number':79,'multiline':False]
['text':'/ popup menu.  It is NULL when there is no popup menu.','line_number':80,'multiline':False]
['text':'/ First column in cmdline of the matched item for completion.','line_number':83,'multiline':False]
['text':'/ Returns true if fuzzy completion is supported for a given cmdline completion','line_number':89,'multiline':False]
['text':'/ context.','line_number':90,'multiline':False]
['text':'/ Returns true if fuzzy completion for cmdline completion is enabled and','line_number':117,'multiline':False]
['text':'/ "fuzzystr" is not empty.  If search pattern is empty, then don't use fuzzy','line_number':118,'multiline':False]
['text':'/ matching.','line_number':119,'multiline':False]
['text':'/ Sort function for the completion matches.','line_number':126,'multiline':False]
['text':'/ <SNR> functions should be sorted to the end.','line_number':127,'multiline':False]
['text':'/ Escape special characters in the cmdline completion matches.','line_number':142,'multiline':False]
['text':' Insert a backslash into a file name before a space, \, %, #','line_number':153,'multiline':False]
['text':' and wildmatch characters, except '~'.','line_number':154,'multiline':False]
['text':' for ":set path=" we need to escape spaces twice','line_number':156,'multiline':False]
['text':' If 'str' starts with "\~", replace "~" at start of','line_number':182,'multiline':False]
['text':' files[i] with "\~".','line_number':183,'multiline':False]
['text':' If the first file starts with a '+' escape it.  Otherwise it','line_number':190,'multiline':False]
['text':' could be seen as "+cmd".','line_number':191,'multiline':False]
['text':' Insert a backslash before characters in a tag name that','line_number':196,'multiline':False]
['text':' would terminate the ":tag" command.','line_number':197,'multiline':False]
['text':'/ Escape special characters in the cmdline completion matches.','line_number':206,'multiline':False]
['text':' May change home directory back to "~"','line_number':209,'multiline':False]
['text':'/ Return FAIL if this is not an appropriate context in which to do','line_number':219,'multiline':False]
['text':'/ completion of anything, return OK if it is (even if there are no matches).','line_number':220,'multiline':False]
['text':'/ For the caller, this means that the character is just passed through like a','line_number':221,'multiline':False]
['text':'/ normal character (instead of being expanded).  This allows :s/^I^D etc.','line_number':222,'multiline':False]
['text':'/','line_number':223,'multiline':False]
['text':'/ @param options  extra options for ExpandOne()','line_number':224,'multiline':False]
['text':'/ @param escape  if true, escape the returned matches','line_number':225,'multiline':False]
['text':' Something illegal on command line','line_number':238,'multiline':False]
['text':' Caller can use the character as a normal char instead','line_number':241,'multiline':False]
['text':' If cmd_silent is set then don't show the dots, because redrawcmd() below','line_number':245,'multiline':False]
['text':' won't remove them.','line_number':246,'multiline':False]
['text':' show that we are busy','line_number':248,'multiline':False]
['text':' Get next/previous match for a previous expanded pattern.','line_number':259,'multiline':False]
['text':' If fuzzy matching, don't modify the search string','line_number':264,'multiline':False]
['text':' Translate string into pattern and expand it.','line_number':269,'multiline':False]
['text':' xp->xp_pattern might have been modified by ExpandOne (for example,','line_number':280,'multiline':False]
['text':' in lua completion), so recompute the pattern index and length','line_number':281,'multiline':False]
['text':' Longest match: make sure it is not shorter, happens with :help.','line_number':285,'multiline':False]
['text':' When expanding a ":map" command and no matches are found, assume that','line_number':319,'multiline':False]
['text':' the key is supposed to be inserted literally','line_number':320,'multiline':False]
['text':' free expanded pattern','line_number':328,'multiline':False]
['text':'/ Create and display a cmdline completion popup menu with items from','line_number':335,'multiline':False]
['text':'/ "matches".','line_number':336,'multiline':False]
['text':' Add all the completion matches','line_number':341,'multiline':False]
['text':' Compute the popup menu starting column','line_number':353,'multiline':False]
['text':' no default selection','line_number':361,'multiline':False]
['text':'/ Returns true if the cmdline completion popup menu is being displayed.','line_number':375,'multiline':False]
['text':' compl_match_array != NULL should already imply pum_visible() in Nvim.','line_number':378,'multiline':False]
['text':'/ Remove the cmdline completion popup menu (if present), free the list of items.','line_number':382,'multiline':False]
['text':'/ Return the number of characters that should be skipped in the wildmenu','line_number':395,'multiline':False]
['text':'/ These are backslashes used for escaping.  Do show backslashes in help tags.','line_number':396,'multiline':False]
['text':' TODO(bfredl): Why in the actual fuck are we special casing the','line_number':403,'multiline':False]
['text':' shell variety deep in the redraw logic? Shell special snowflakiness','line_number':404,'multiline':False]
['text':' should already be eliminated multiple layers before reaching the','line_number':405,'multiline':False]
['text':' screen infracstructure.','line_number':406,'multiline':False]
['text':'/ Get the length of an item as it will be shown in the status line.','line_number':416,'multiline':False]
['text':' Check for menu separators - replace with '|'.','line_number':424,'multiline':False]
['text':'/ Show wildchar matches in the status line.','line_number':438,'multiline':False]
['text':'/ Show at least the "match" item.','line_number':439,'multiline':False]
['text':'/ We start at item "first_match" in the list and show all matches that fit.','line_number':440,'multiline':False]
['text':'/','line_number':441,'multiline':False]
['text':'/ If inversion is possible we use it. Else '=' characters are used.','line_number':442,'multiline':False]
['text':'/','line_number':443,'multiline':False]
['text':'/ @param matches  list of matches','line_number':444,'multiline':False]
['text':' length in screen cells','line_number':448,'multiline':False]
['text':' interrupted completion?','line_number':459,'multiline':False]
['text':' don't show match but original text','line_number':465,'multiline':False]
['text':' count 1 for the ending ">"','line_number':469,'multiline':False]
['text':' jumping left, as far as we can go','line_number':474,'multiline':False]
['text':' check if match fits on the screen','line_number':478,'multiline':False]
['text':' jumping right, put match at the left','line_number':485,'multiline':False]
['text':' if showing the last match, we can add some on the left','line_number':488,'multiline':False]
['text':' Check for menu separators - replace with '|'','line_number':530,'multiline':False]
['text':' NOLINT(runtime/printf)','line_number':542,'multiline':False]
['text':' Put the wildmenu just above the command line.  If there is','line_number':574,'multiline':False]
['text':' no room, scroll the screen one line up.','line_number':575,'multiline':False]
['text':' Create status line if needed by setting 'laststatus' to 2.','line_number':585,'multiline':False]
['text':' Set 'winminheight' to zero to avoid that the window is','line_number':586,'multiline':False]
['text':' resized.','line_number':587,'multiline':False]
['text':' Tricky: wildmenu can be drawn either over a status line, or at empty','line_number':599,'multiline':False]
['text':' scrolled space in the message output','line_number':600,'multiline':False]
['text':'/ Get the next or prev cmdline completion match. The index of the match is set','line_number':618,'multiline':False]
['text':'/ in "xp->xp_selected"','line_number':619,'multiline':False]
['text':' at the first entry, don't select any entries','line_number':637,'multiline':False]
['text':' no entry is selected. select the last entry','line_number':640,'multiline':False]
['text':' go up by the pum height','line_number':643,'multiline':False]
['text':' few entries left, select the first entry','line_number':650,'multiline':False]
['text':' at the last entry, don't select any entries','line_number':656,'multiline':False]
['text':' no entry is selected. select the first entry','line_number':659,'multiline':False]
['text':' go down by the pum height','line_number':662,'multiline':False]
['text':' few entries left, select the last entry','line_number':669,'multiline':False]
['text':' mode == WILD_PUM_WANT','line_number':673,'multiline':False]
['text':' When wrapping around, return the original string, set findex to -1.','line_number':678,'multiline':False]
['text':'/ Start the command-line expansion and get the matches.','line_number':704,'multiline':False]
['text':' number without matching suffix','line_number':707,'multiline':False]
['text':' Do the expansion.','line_number':710,'multiline':False]
['text':' Illegal file name has been silently skipped.  But when there','line_number':713,'multiline':False]
['text':' are wildcards, the real problem is that there was no match,','line_number':714,'multiline':False]
['text':' causing the pattern to be added, which has illegal characters.','line_number':715,'multiline':False]
['text':' Escape the matches for use on the command line.','line_number':725,'multiline':False]
['text':' Check for matching suffixes in file names.','line_number':728,'multiline':False]
['text':' More than one match; check suffix.','line_number':738,'multiline':False]
['text':' The files will have been sorted on matching suffix in','line_number':739,'multiline':False]
['text':' expand_wildcards, only need to check the first two.','line_number':740,'multiline':False]
['text':' Can we ever get here unless it's while expanding','line_number':749,'multiline':False]
['text':' interactively?  If not, we can get rid of this all','line_number':750,'multiline':False]
['text':' together. Don't really want to wait for this message','line_number':751,'multiline':False]
['text':' (and possibly have to hit return to continue!).','line_number':752,'multiline':False]
['text':'/ Return the longest common part in the list of cmdline completion matches.','line_number':768,'multiline':False]
['text':'/ Do wildcard expansion on the string "str".','line_number':802,'multiline':False]
['text':'/ Chars that should not be expanded must be preceded with a backslash.','line_number':803,'multiline':False]
['text':'/ Return a pointer to allocated memory containing the new string.','line_number':804,'multiline':False]
['text':'/ Return NULL for failure.','line_number':805,'multiline':False]
['text':'/','line_number':806,'multiline':False]
['text':'/ "orig" is the originally expanded string, copied to allocated memory.  It','line_number':807,'multiline':False]
['text':'/ should either be kept in "xp->xp_orig" or freed.  When "mode" is WILD_NEXT','line_number':808,'multiline':False]
['text':'/ or WILD_PREV "orig" should be NULL.','line_number':809,'multiline':False]
['text':'/','line_number':810,'multiline':False]
['text':'/ Results are cached in xp->xp_files and xp->xp_numfiles, except when "mode"','line_number':811,'multiline':False]
['text':'/ is WILD_EXPAND_FREE or WILD_ALL.','line_number':812,'multiline':False]
['text':'/','line_number':813,'multiline':False]
['text':'/ mode = WILD_FREE:        just free previously expanded matches','line_number':814,'multiline':False]
['text':'/ mode = WILD_EXPAND_FREE: normal expansion, do not keep matches','line_number':815,'multiline':False]
['text':'/ mode = WILD_EXPAND_KEEP: normal expansion, keep matches','line_number':816,'multiline':False]
['text':'/ mode = WILD_NEXT:        use next match in multiple match, wrap to first','line_number':817,'multiline':False]
['text':'/ mode = WILD_PREV:        use previous match in multiple match, wrap to first','line_number':818,'multiline':False]
['text':'/ mode = WILD_ALL:         return all matches concatenated','line_number':819,'multiline':False]
['text':'/ mode = WILD_LONGEST:     return longest matched part','line_number':820,'multiline':False]
['text':'/ mode = WILD_ALL_KEEP:    get all matches, keep matches','line_number':821,'multiline':False]
['text':'/ mode = WILD_APPLY:       apply the item selected in the cmdline completion','line_number':822,'multiline':False]
['text':'/                          popup menu and close the menu.','line_number':823,'multiline':False]
['text':'/ mode = WILD_CANCEL:      cancel and close the cmdline completion popup and','line_number':824,'multiline':False]
['text':'/                          use the original text.','line_number':825,'multiline':False]
['text':'/ mode = WILD_PUM_WANT:    use the match at index pum_want.item','line_number':826,'multiline':False]
['text':'/','line_number':827,'multiline':False]
['text':'/ options = WILD_LIST_NOTFOUND:    list entries without a match','line_number':828,'multiline':False]
['text':'/ options = WILD_HOME_REPLACE:     do home_replace() for buffer names','line_number':829,'multiline':False]
['text':'/ options = WILD_USE_NL:           Use '\n' for WILD_ALL','line_number':830,'multiline':False]
['text':'/ options = WILD_NO_BEEP:          Don't beep for multiple matches','line_number':831,'multiline':False]
['text':'/ options = WILD_ADD_SLASH:        add a slash after directory names','line_number':832,'multiline':False]
['text':'/ options = WILD_KEEP_ALL:         don't remove 'wildignore' entries','line_number':833,'multiline':False]
['text':'/ options = WILD_SILENT:           don't print warning messages','line_number':834,'multiline':False]
['text':'/ options = WILD_ESCAPE:           put backslash before special chars','line_number':835,'multiline':False]
['text':'/ options = WILD_ICASE:            ignore case for files','line_number':836,'multiline':False]
['text':'/','line_number':837,'multiline':False]
['text':'/ The variables xp->xp_context and xp->xp_backslash must have been set!','line_number':838,'multiline':False]
['text':'/','line_number':839,'multiline':False]
['text':'/ @param orig  allocated copy of original of expanded string','line_number':840,'multiline':False]
['text':' first handle the case of using an old match','line_number':846,'multiline':False]
['text':' free old names','line_number':861,'multiline':False]
['text':' The entries from xp_files may be used in the PUM, remove it.','line_number':867,'multiline':False]
['text':' only release file name','line_number':874,'multiline':False]
['text':' Find longest common part','line_number':886,'multiline':False]
['text':' next p_wc gets first one','line_number':889,'multiline':False]
['text':' Concatenate all matching names.  Unless interrupted, this can be slow','line_number':892,'multiline':False]
['text':' and the result probably won't be used.','line_number':893,'multiline':False]
['text':' prefix "no"','line_number':899,'multiline':False]
['text':' prefix "inv"','line_number':901,'multiline':False]
['text':' Free "orig" if it wasn't stored in "xp->xp_orig".','line_number':929,'multiline':False]
['text':'/ Prepare an expand structure for use.','line_number':937,'multiline':False]
['text':'/ Cleanup an expand structure after use.','line_number':947,'multiline':False]
['text':'/ Display one line of completion matches. Multiple matches are displayed in','line_number':957,'multiline':False]
['text':'/ each line (used by wildmode=list and CTRL-D)','line_number':958,'multiline':False]
['text':'/','line_number':959,'multiline':False]
['text':'/ @param matches      list of completion match names','line_number':960,'multiline':False]
['text':'/ @param numMatches   number of completion matches in "matches"','line_number':961,'multiline':False]
['text':'/ @param lines        number of output lines','line_number':962,'multiline':False]
['text':'/ @param linenr       line number of matches to display','line_number':963,'multiline':False]
['text':'/ @param maxlen       maximum number of characters in each line','line_number':964,'multiline':False]
['text':'/ @param showtail     display only the tail of the full path of a file name','line_number':965,'multiline':False]
['text':'/ @param dir_attr     highlight attribute to use for directory names','line_number':966,'multiline':False]
['text':' highlight directories','line_number':989,'multiline':False]
['text':' Expansion was done before and special characters','line_number':991,'multiline':False]
['text':' were escaped, need to halve backslashes.  Also','line_number':992,'multiline':False]
['text':' $HOME has been replaced with ~/.','line_number':993,'multiline':False]
['text':' Expansion was done here, file names are literal.','line_number':1003,'multiline':False]
['text':' when not wrapped around','line_number':1018,'multiline':False]
['text':'/ Show all matches for completion on the command line.','line_number':1024,'multiline':False]
['text':'/ Returns EXPAND_NOTHING when the character that triggered expansion should','line_number':1025,'multiline':False]
['text':'/ be inserted like a normal character.','line_number':1026,'multiline':False]
['text':' cmdline completion popup menu (with wildoptions=pum)','line_number':1059,'multiline':False]
['text':' lines_left will be set','line_number':1064,'multiline':False]
['text':' prepare for paging','line_number':1065,'multiline':False]
['text':' lines_left will be set again','line_number':1069,'multiline':False]
['text':' prepare for paging','line_number':1070,'multiline':False]
['text':' only int. the completion, not the cmd line','line_number':1074,'multiline':False]
['text':' find the length of the longest file name','line_number':1078,'multiline':False]
['text':' compute the number of columns and lines for the listing','line_number':1097,'multiline':False]
['text':' two spaces between file names','line_number':1098,'multiline':False]
['text':' find out highlighting for directories','line_number':1106,'multiline':False]
['text':' list the files line by line','line_number':1115,'multiline':False]
['text':' we redraw the command below the lines that we have just listed','line_number':1124,'multiline':False]
['text':' This is a bit tricky, but it saves a lot of screen updating.','line_number':1125,'multiline':False]
['text':' will put it back later','line_number':1126,'multiline':False]
['text':'/ path_tail() version for showmatches() and redraw_wildmenu():','line_number':1136,'multiline':False]
['text':'/ Return the tail of file name path "s", ignoring a trailing "/".','line_number':1137,'multiline':False]
['text':'/ Return true if we only need to show the tail of completion matches.','line_number':1163,'multiline':False]
['text':'/ When not completing file names or there is a wildcard in the path false is','line_number':1164,'multiline':False]
['text':'/ returned.','line_number':1165,'multiline':False]
['text':' When not completing file names a "/" may mean something different.','line_number':1168,'multiline':False]
['text':' there is no path separator','line_number':1176,'multiline':False]
['text':' Skip escaped wildcards.  Only when the backslash is not a path','line_number':1181,'multiline':False]
['text':' separator, on DOS the '*' "path\*\file" must not be skipped.','line_number':1182,'multiline':False]
['text':'/ Prepare a string for expansion.','line_number':1192,'multiline':False]
['text':'/','line_number':1193,'multiline':False]
['text':'/ When expanding file names: The string will be used with expand_wildcards().','line_number':1194,'multiline':False]
['text':'/ Copy "fname[len]" into allocated memory and add a '*' at the end.','line_number':1195,'multiline':False]
['text':'/ When expanding other names: The string will be used with regcomp().  Copy','line_number':1196,'multiline':False]
['text':'/ the name into allocated memory and prepend "^".','line_number':1197,'multiline':False]
['text':'/','line_number':1198,'multiline':False]
['text':'/ @param context EXPAND_FILES etc.','line_number':1199,'multiline':False]
['text':' Matching will be done internally (on something other than files).','line_number':1209,'multiline':False]
['text':' So we convert the file-matching-type wildcards into our kind for','line_number':1210,'multiline':False]
['text':' use with vim_regcomp().  First work out how long it will be:','line_number':1211,'multiline':False]
['text':' For help tags the translation is done in find_help_tags().','line_number':1213,'multiline':False]
['text':' For a tag pattern starting with "/" no translation is needed.','line_number':1214,'multiline':False]
['text':' +2 for '^' at start, NUL at end','line_number':1228,'multiline':False]
['text':' '*' needs to be replaced by ".*"','line_number':1231,'multiline':False]
['text':' '~' needs to be replaced by "\~"','line_number':1232,'multiline':False]
['text':' Buffer names are like file names.  "." should be literal','line_number':1234,'multiline':False]
['text':' "." becomes "\."','line_number':1236,'multiline':False]
['text':' Custom expansion takes care of special things, match','line_number':1238,'multiline':False]
['text':' backslashes literally (perhaps also for other types?)','line_number':1239,'multiline':False]
['text':' '\' becomes "\\"','line_number':1242,'multiline':False]
['text':' Skip backslash.  But why?  At least keep it for custom','line_number':1250,'multiline':False]
['text':' expansion.','line_number':1251,'multiline':False]
['text':' Don't add a star to *, ~, ~user, $var or `cmd`.','line_number':1290,'multiline':False]
['text':' * would become **, which walks the whole tree.','line_number':1291,'multiline':False]
['text':' ~ would be at the start of the file name, but not the tail.','line_number':1292,'multiline':False]
['text':' $ could be anywhere in the tail.','line_number':1293,'multiline':False]
['text':' ` could be anywhere in the file name.','line_number':1294,'multiline':False]
['text':' When the name ends in '$' don't add a star, remove the '$'.','line_number':1295,'multiline':False]
['text':'/ Must parse the command line so far to work out what context we are in.','line_number':1319,'multiline':False]
['text':'/ Completion can then be done based on that context.','line_number':1320,'multiline':False]
['text':'/ This routine sets the variables:','line_number':1321,'multiline':False]
['text':'/  xp->xp_pattern          The start of the pattern to be expanded within','line_number':1322,'multiline':False]
['text':'/                              the command line (ends at the cursor).','line_number':1323,'multiline':False]
['text':'/  xp->xp_context          The type of thing to expand.  Will be one of:','line_number':1324,'multiline':False]
['text':'/','line_number':1325,'multiline':False]
['text':'/  EXPAND_UNSUCCESSFUL     Used sometimes when there is something illegal on','line_number':1326,'multiline':False]
['text':'/                          the command line, like an unknown command.  Caller','line_number':1327,'multiline':False]
['text':'/                          should beep.','line_number':1328,'multiline':False]
['text':'/  EXPAND_NOTHING          Unrecognised context for completion, use char like','line_number':1329,'multiline':False]
['text':'/                          a normal char, rather than for completion.  eg','line_number':1330,'multiline':False]
['text':'/                          :s/^I/','line_number':1331,'multiline':False]
['text':'/  EXPAND_COMMANDS         Cursor is still touching the command, so complete','line_number':1332,'multiline':False]
['text':'/                          it.','line_number':1333,'multiline':False]
['text':'/  EXPAND_BUFFERS          Complete file names for :buf and :sbuf commands.','line_number':1334,'multiline':False]
['text':'/  EXPAND_FILES            After command with EX_XFILE set, or after setting','line_number':1335,'multiline':False]
['text':'/                          with P_EXPAND set.  eg :e ^I, :w>>^I','line_number':1336,'multiline':False]
['text':'/  EXPAND_DIRECTORIES      In some cases this is used instead of the latter','line_number':1337,'multiline':False]
['text':'/                          when we know only directories are of interest.','line_number':1338,'multiline':False]
['text':'/                          E.g.  :set dir=^I  and  :cd ^I','line_number':1339,'multiline':False]
['text':'/  EXPAND_SHELLCMD         After ":!cmd", ":r !cmd"  or ":w !cmd".','line_number':1340,'multiline':False]
['text':'/  EXPAND_SETTINGS         Complete variable names.  eg :set d^I','line_number':1341,'multiline':False]
['text':'/  EXPAND_BOOL_SETTINGS    Complete boolean variables only,  eg :set no^I','line_number':1342,'multiline':False]
['text':'/  EXPAND_TAGS             Complete tags from the files in p_tags.  eg :ta a^I','line_number':1343,'multiline':False]
['text':'/  EXPAND_TAGS_LISTFILES   As above, but list filenames on ^D, after :tselect','line_number':1344,'multiline':False]
['text':'/  EXPAND_HELP             Complete tags from the file 'helpfile'/tags','line_number':1345,'multiline':False]
['text':'/  EXPAND_EVENTS           Complete event names','line_number':1346,'multiline':False]
['text':'/  EXPAND_SYNTAX           Complete :syntax command arguments','line_number':1347,'multiline':False]
['text':'/  EXPAND_HIGHLIGHT        Complete highlight (syntax) group names','line_number':1348,'multiline':False]
['text':'/  EXPAND_AUGROUP          Complete autocommand group names','line_number':1349,'multiline':False]
['text':'/  EXPAND_USER_VARS        Complete user defined variable names, eg :unlet a^I','line_number':1350,'multiline':False]
['text':'/  EXPAND_MAPPINGS         Complete mapping and abbreviation names,','line_number':1351,'multiline':False]
['text':'/                            eg :unmap a^I , :cunab x^I','line_number':1352,'multiline':False]
['text':'/  EXPAND_FUNCTIONS        Complete internal or user defined function names,','line_number':1353,'multiline':False]
['text':'/                            eg :call sub^I','line_number':1354,'multiline':False]
['text':'/  EXPAND_USER_FUNC        Complete user defined function names, eg :delf F^I','line_number':1355,'multiline':False]
['text':'/  EXPAND_EXPRESSION       Complete internal or user defined function/variable','line_number':1356,'multiline':False]
['text':'/                          names in expressions, eg :while s^I','line_number':1357,'multiline':False]
['text':'/  EXPAND_ENV_VARS         Complete environment variable names','line_number':1358,'multiline':False]
['text':'/  EXPAND_USER             Complete user names','line_number':1359,'multiline':False]
['text':' only expansion for ':', '>' and '=' command-lines','line_number':1364,'multiline':False]
['text':'/ Sets the index of a built-in or user defined command "cmd" in eap->cmdidx.','line_number':1374,'multiline':False]
['text':'/ For user defined commands, the completion context is set in "xp" and the','line_number':1375,'multiline':False]
['text':'/ completion flags in "complp".','line_number':1376,'multiline':False]
['text':'/','line_number':1377,'multiline':False]
['text':'/ @return  a pointer to the text after the command or NULL for failure.','line_number':1378,'multiline':False]
['text':' Isolate the command and search for it in the command table.','line_number':1384,'multiline':False]
['text':' Exceptions:','line_number':1385,'multiline':False]
['text':' - the 'k' command can directly be followed by any character, but do','line_number':1386,'multiline':False]
['text':' accept "keepmarks", "keepalt" and "keepjumps". As fuzzy matching can','line_number':1387,'multiline':False]
['text':' find matches anywhere in the command name, do this only for command','line_number':1388,'multiline':False]
['text':' expansion based on regular expression and not for fuzzy matching.','line_number':1389,'multiline':False]
['text':' - the 's' command can be followed directly by 'c', 'g', 'i', 'I' or 'r'','line_number':1390,'multiline':False]
['text':' Allow * wild card','line_number':1396,'multiline':False]
['text':' a user command may contain digits','line_number':1399,'multiline':False]
['text':' for python 3.x: ":py3*" commands completion','line_number':1405,'multiline':False]
['text':' check for non-alpha command','line_number':1412,'multiline':False]
['text':' User defined commands support alphanumeric characters.','line_number':1425,'multiline':False]
['text':' Also when doing fuzzy expansion for non-shell commands, support','line_number':1426,'multiline':False]
['text':' alphanumeric characters.','line_number':1427,'multiline':False]
['text':' Allow * wild card','line_number':1430,'multiline':False]
['text':' If the cursor is touching the command, and it ends in an alphanumeric','line_number':1436,'multiline':False]
['text':' character, complete the command name.','line_number':1437,'multiline':False]
['text':' Ambiguous user command.','line_number':1450,'multiline':False]
['text':' Not still touching the command and it was an illegal one','line_number':1455,'multiline':False]
['text':'/ Set the completion context for a command argument with wild card characters.','line_number':1463,'multiline':False]
['text':' Beginning of word.','line_number':1468,'multiline':False]
['text':' Allow spaces within back-quotes to count as part of the argument','line_number':1471,'multiline':False]
['text':' being expanded.','line_number':1472,'multiline':False]
['text':' An argument can contain just about everything, except','line_number':1485,'multiline':False]
['text':' characters that end the command and white space.','line_number':1486,'multiline':False]
['text':' avoid getting stuck when space is in 'isfname'','line_number':1488,'multiline':False]
['text':' If we are still inside the quotes, and we passed a space, just','line_number':1507,'multiline':False]
['text':' expand from there.','line_number':1508,'multiline':False]
['text':' For a shell command more chars need to be escaped.','line_number':1514,'multiline':False]
['text':' When still after the command name expand executables.','line_number':1519,'multiline':False]
['text':' Check for environment variable.','line_number':1525,'multiline':False]
['text':' Avoid that the assignment uses EXPAND_FILES again.','line_number':1535,'multiline':False]
['text':' Check for user names.','line_number':1541,'multiline':False]
['text':' Complete ~user only if it partially matches a user name.','line_number':1544,'multiline':False]
['text':' A full match ~user<Tab> will be replaced by user's home','line_number':1545,'multiline':False]
['text':' directory i.e. something like ~user<Tab> -> /home/user/','line_number':1546,'multiline':False]
['text':'/ Set the completion context for the "++opt=arg" argument.  Always returns NULL.','line_number':1554,'multiline':False]
['text':'/ Set the completion context for the :filter command. Returns a pointer to the','line_number':1568,'multiline':False]
['text':'/ next command after the :filter command.','line_number':1569,'multiline':False]
['text':'/ Set the completion context for the :match command. Returns a pointer to the','line_number':1582,'multiline':False]
['text':'/ next command after the :match command.','line_number':1583,'multiline':False]
['text':' also complete "None"','line_number':1587,'multiline':False]
['text':'/ Returns a pointer to the next command after a :global or a :v command.','line_number':1598,'multiline':False]
['text':'/ Returns NULL if there is no next command.','line_number':1599,'multiline':False]
['text':' Get the delimiter.','line_number':1602,'multiline':False]
['text':' Skip delimiter if there is one.','line_number':1604,'multiline':False]
['text':'/ Returns a pointer to the next command after a :substitute or a :& command.','line_number':1620,'multiline':False]
['text':'/ Returns NULL if there is no next command.','line_number':1621,'multiline':False]
['text':' Skip "from" part.','line_number':1626,'multiline':False]
['text':' Skip "to" part.','line_number':1631,'multiline':False]
['text':' Skip delimiter.','line_number':1639,'multiline':False]
['text':'/ Returns a pointer to the next command after a :isearch/:dsearch/:ilist','line_number':1654,'multiline':False]
['text':'/ :dlist/:ijump/:psearch/:djump/:isplit/:dsplit command.','line_number':1655,'multiline':False]
['text':'/ Returns NULL if there is no next command.','line_number':1656,'multiline':False]
['text':' Skip count.','line_number':1659,'multiline':False]
['text':' Match regexp, not just whole words.','line_number':1665,'multiline':False]
['text':' Check for trailing illegal characters.','line_number':1674,'multiline':False]
['text':'/ Set the completion context for the :unlet command. Always returns NULL.','line_number':1685,'multiline':False]
['text':'/ Set the completion context for the :language command. Always returns NULL.','line_number':1703,'multiline':False]
['text':'/< expand ":breakadd" sub-commands','line_number':1726,'multiline':False]
['text':'/< expand ":breakdel" sub-commands','line_number':1727,'multiline':False]
['text':'/< expand ":profdel" sub-commands','line_number':1728,'multiline':False]
['text':'/ Set the completion context for the :breakadd command. Always returns NULL.','line_number':1731,'multiline':False]
['text':' :breakadd file [lnum] <filename>','line_number':1752,'multiline':False]
['text':' :breakadd func [lnum] <funcname>','line_number':1753,'multiline':False]
['text':' skip line number (if specified)','line_number':1757,'multiline':False]
['text':' :breakadd expr <expression>','line_number':1773,'multiline':False]
['text':'/ Set the completion context in "xp" for command "cmd" with index "cmdidx".','line_number':1797,'multiline':False]
['text':'/ The argument to the command is "arg" and the argument flags is "argt".','line_number':1798,'multiline':False]
['text':'/ For user-defined commands and for environment variables, "context" has the','line_number':1799,'multiline':False]
['text':'/ completion type.','line_number':1800,'multiline':False]
['text':'/','line_number':1801,'multiline':False]
['text':'/ @return  a pointer to the next command, or NULL if there is no next command.','line_number':1802,'multiline':False]
['text':' Command modifiers: return the argument.','line_number':1829,'multiline':False]
['text':' Also for commands with an argument that is a command.','line_number':1830,'multiline':False]
['text':' All completion for the +cmdline_compl feature goes here.','line_number':1872,'multiline':False]
['text':' If current buffer is in diff mode, complete buffer names','line_number':1991,'multiline':False]
['text':' which are in diff mode, and different than current buffer.','line_number':1992,'multiline':False]
['text':'/ This is all pretty much copied from do_one_cmd(), with all the extra stuff','line_number':2169,'multiline':False]
['text':'/ we don't need/want deleted.  Maybe this could be done better if we didn't','line_number':2170,'multiline':False]
['text':'/ repeat all this stuff.  The only problem is that they may not stay','line_number':2171,'multiline':False]
['text':'/ perfectly compatible with each other, but then the command line syntax','line_number':2172,'multiline':False]
['text':'/ probably won't change that much -- webb.','line_number':2173,'multiline':False]
['text':'/','line_number':2174,'multiline':False]
['text':'/ @param buff  buffer for command string','line_number':2175,'multiline':False]
['text':' Filter instead of file name.','line_number':2182,'multiline':False]
['text':' Default until we get past command','line_number':2187,'multiline':False]
['text':' 1. skip comment lines and leading space, colons or bars','line_number':2190,'multiline':False]
['text':' ignore comment lines','line_number':2198,'multiline':False]
['text':' 3. skip over a range specifier of the form: addr [,addr] [;addr] ..','line_number':2203,'multiline':False]
['text':' There's another command','line_number':2215,'multiline':False]
['text':' Get the command index.','line_number':2218,'multiline':False]
['text':' Default now that we're past command','line_number':2224,'multiline':False]
['text':' forced commands','line_number':2226,'multiline':False]
['text':' 6. parse arguments','line_number':2231,'multiline':False]
['text':' Does command allow "++argopt" argument?','line_number':2238,'multiline':False]
['text':' Still touching the command after "++"?','line_number':2246,'multiline':False]
['text':' append','line_number':2258,'multiline':False]
['text':' :w !filter','line_number':2263,'multiline':False]
['text':' :r! filter if forced','line_number':2270,'multiline':False]
['text':' :r !filter','line_number':2271,'multiline':False]
['text':' allow any number of '>' or '<'','line_number':2278,'multiline':False]
['text':' Does command allow "+command"?','line_number':2284,'multiline':False]
['text':' Check if we're in the +command','line_number':2286,'multiline':False]
['text':' Still touching the command after '+'?','line_number':2290,'multiline':False]
['text':' Skip space(s) after +command to get to the real argument.','line_number':2295,'multiline':False]
['text':' Check for '|' to separate commands and '"' to start comments.','line_number':2299,'multiline':False]
['text':' Don't do this for ":read !cmd" and ":write !cmd".','line_number':2300,'multiline':False]
['text':' ":redir @" is not the start of a comment','line_number':2303,'multiline':False]
['text':' It's a comment','line_number':2319,'multiline':False]
['text':' no arguments allowed but there is something','line_number':2327,'multiline':False]
['text':' Find start of last argument (argument just before cursor):','line_number':2331,'multiline':False]
['text':' argument starts after a space','line_number':2337,'multiline':False]
['text':' skip over escaped character','line_number':2341,'multiline':False]
['text':' Switch on command name.','line_number':2351,'multiline':False]
['text':'/ Set the completion context in "xp" for command "str"','line_number':2355,'multiline':False]
['text':'/','line_number':2356,'multiline':False]
['text':'/ @param str  start of command line','line_number':2357,'multiline':False]
['text':'/ @param len  length of command line (excl. NUL)','line_number':2358,'multiline':False]
['text':'/ @param col  position of cursor','line_number':2359,'multiline':False]
['text':'/ @param use_ccline  use ccline for info','line_number':2360,'multiline':False]
['text':' Avoid a UMR warning from Purify, only save the character if it has been','line_number':2366,'multiline':False]
['text':' written before.','line_number':2367,'multiline':False]
['text':' pass CMD_SIZE because there is no real command','line_number':2375,'multiline':False]
['text':' Store the string here so that call_user_expand_func() can get to them','line_number':2387,'multiline':False]
['text':' easily.','line_number':2388,'multiline':False]
['text':'/ Expand the command line "str" from context "xp".','line_number':2395,'multiline':False]
['text':'/ "xp" must have been set by set_cmd_context().','line_number':2396,'multiline':False]
['text':'/ xp->xp_pattern points into "str", to where the text that is to be expanded','line_number':2397,'multiline':False]
['text':'/ starts.','line_number':2398,'multiline':False]
['text':'/ Returns EXPAND_UNSUCCESSFUL when there is something illegal before the','line_number':2399,'multiline':False]
['text':'/ cursor.','line_number':2400,'multiline':False]
['text':'/ Returns EXPAND_NOTHING when there is nothing to expand, might insert the','line_number':2401,'multiline':False]
['text':'/ key that triggered expansion literally.','line_number':2402,'multiline':False]
['text':'/ Returns EXPAND_OK otherwise.','line_number':2403,'multiline':False]
['text':'/','line_number':2404,'multiline':False]
['text':'/ @param str  start of command line','line_number':2405,'multiline':False]
['text':'/ @param col  position of cursor','line_number':2406,'multiline':False]
['text':'/ @param matchcount  return: nr of matches','line_number':2407,'multiline':False]
['text':'/ @param matches  return: array of pointers to matches','line_number':2408,'multiline':False]
['text':' Something illegal on command line','line_number':2416,'multiline':False]
['text':' Caller can use the character as a normal char instead','line_number':2419,'multiline':False]
['text':' add star to file name, or convert to regexp if not exp. files.','line_number':2423,'multiline':False]
['text':' If fuzzy matching, don't modify the search string','line_number':2427,'multiline':False]
['text':' find all files that match the description','line_number':2437,'multiline':False]
['text':'/ Expand file or directory names.','line_number':2447,'multiline':False]
['text':' for ":set path=" and ":set tags=" halve backslashes for escaped space','line_number':2453,'multiline':False]
['text':' Expand wildcards, supporting %:h and the like.','line_number':2492,'multiline':False]
['text':'/ Function given to ExpandGeneric() to obtain the possible arguments of the','line_number':2515,'multiline':False]
['text':'/ ":breakadd {expr, file, func, here}" command.','line_number':2516,'multiline':False]
['text':'/ ":breakdel {func, file, here}" command.','line_number':2517,'multiline':False]
['text':' breakadd {expr, file, func, here}','line_number':2523,'multiline':False]
['text':' breakdel {func, file, here}','line_number':2527,'multiline':False]
['text':' profdel {func, file}','line_number':2532,'multiline':False]
['text':'/ Function given to ExpandGeneric() to obtain the possible arguments for the','line_number':2541,'multiline':False]
['text':'/ ":scriptnames" command.','line_number':2542,'multiline':False]
['text':'/ Function given to ExpandGeneric() to obtain the possible arguments of the','line_number':2554,'multiline':False]
['text':'/ ":messages {clear}" command.','line_number':2555,'multiline':False]
['text':'/ Completion for |:checkhealth| command.','line_number':2572,'multiline':False]
['text':'/','line_number':2573,'multiline':False]
['text':'/ Given to ExpandGeneric() to obtain all available heathcheck names.','line_number':2574,'multiline':False]
['text':'/ @param[in] idx  Index of the healthcheck item.','line_number':2575,'multiline':False]
['text':'/ @param[in] xp  Not used.','line_number':2576,'multiline':False]
['text':'/ Do the expansion based on xp->xp_context and "rmp".','line_number':2598,'multiline':False]
['text':' Find a context in the table and call the ExpandGeneric() with the','line_number':2641,'multiline':False]
['text':' right function to do the expansion.','line_number':2642,'multiline':False]
['text':'/ Map wild expand options to flags for expand_wildcards()','line_number':2657,'multiline':False]
['text':' include directories','line_number':2660,'multiline':False]
['text':'/ Do the expansion based on xp->xp_context and "pat".','line_number':2683,'multiline':False]
['text':'/','line_number':2684,'multiline':False]
['text':'/ @param options  WILD_ flags','line_number':2685,'multiline':False]
['text':' With an empty argument we would get all the help tags, which is','line_number':2703,'multiline':False]
['text':' very slow.  Get matches for "help" instead.','line_number':2704,'multiline':False]
['text':' When expanding a function name starting with s:, match the <SNR>nr_','line_number':2759,'multiline':False]
['text':' prefix.','line_number':2760,'multiline':False]
['text':' set ignore-case according to p_ic, p_scs and pat','line_number':2781,'multiline':False]
['text':'/ Expand a list of names.','line_number':2810,'multiline':False]
['text':'/','line_number':2811,'multiline':False]
['text':'/ Generic function for command line completion.  It calls a function to','line_number':2812,'multiline':False]
['text':'/ obtain strings, one by one.  The strings are matched against a regexp','line_number':2813,'multiline':False]
['text':'/ program.  Matching strings are copied into an array, which is returned.','line_number':2814,'multiline':False]
['text':'/','line_number':2815,'multiline':False]
['text':'/ @param func  returns a string from the list','line_number':2816,'multiline':False]
['text':' End of list.','line_number':2833,'multiline':False]
['text':' Skip empty strings.','line_number':2836,'multiline':False]
['text':' Test for separator added by get_menu_names().','line_number':2874,'multiline':False]
['text':' Sort the matches when using regular expression matching and sorting','line_number':2886,'multiline':False]
['text':' applies to the completion context. Menus and scriptnames should be kept','line_number':2887,'multiline':False]
['text':' in the specified order.','line_number':2888,'multiline':False]
['text':' <SNR> functions should be sorted to the end.','line_number':2896,'multiline':False]
['text':' Sort the matches.','line_number':2901,'multiline':False]
['text':' <SNR> functions should be sorted to the end.','line_number':2904,'multiline':False]
['text':' Reset the variables used for special highlight names expansion, so that','line_number':2919,'multiline':False]
['text':' they don't show up when getting normal highlight names by ID.','line_number':2920,'multiline':False]
['text':'/ Expand shell command matches in one directory of $PATH.','line_number':2924,'multiline':False]
['text':' Expand matches in one directory of $PATH.','line_number':2933,'multiline':False]
['text':' Check if this name was already found.','line_number':2945,'multiline':False]
['text':' Remove the path that was prepended.','line_number':2950,'multiline':False]
['text':'/ Complete a shell command.','line_number':2962,'multiline':False]
['text':'/','line_number':2963,'multiline':False]
['text':'/ @param      filepat     is a pattern to match with command names.','line_number':2964,'multiline':False]
['text':'/ @param[out] matches     is pointer to array of pointers to matches.','line_number':2965,'multiline':False]
['text':'/                         *matches will either be set to NULL or point to','line_number':2966,'multiline':False]
['text':'/                         allocated memory.','line_number':2967,'multiline':False]
['text':'/ @param[out] numMatches  is pointer to number of matches.','line_number':2968,'multiline':False]
['text':'/ @param      flagsarg    is a combination of EW_* flags.','line_number':2969,'multiline':False]
['text':' for ":set path=" and ":set tags=" halve backslashes for escaped space','line_number':2980,'multiline':False]
['text':' Track memory allocation for *path.','line_number':2990,'multiline':False]
['text':' For an absolute name we don't use $PATH.','line_number':2995,'multiline':False]
['text':' Go over all directories in $PATH.  Expand matches in that directory and','line_number':3006,'multiline':False]
['text':' collect them in "ga". When "." is not in $PATH also expand for the','line_number':3007,'multiline':False]
['text':' current directory, to find "subdir/cmd".','line_number':3008,'multiline':False]
['text':' Find directories in the current directory, path is empty.','line_number':3022,'multiline':False]
['text':' Do not match directories inside a $PATH item.','line_number':3029,'multiline':False]
['text':'/ Call "user_expand_func()" to invoke a user defined Vim script function and','line_number':3053,'multiline':False]
['text':'/ return the result (either a string, a List or NULL).','line_number':3054,'multiline':False]
['text':'/ Expand names with a function defined by the user (EXPAND_USER_DEFINED and','line_number':3094,'multiline':False]
['text':'/ EXPAND_USER_LIST).','line_number':3095,'multiline':False]
['text':' match everything','line_number':3133,'multiline':False]
['text':'/ Expand names with a list returned by a function defined by the user.','line_number':3170,'multiline':False]
['text':' Loop over the items in the list.','line_number':3182,'multiline':False]
['text':' Skip non-string items and empty strings.','line_number':3186,'multiline':False]
['text':' Loop over the items in the list.','line_number':3211,'multiline':False]
['text':' Skip non-string items and empty strings.','line_number':3215,'multiline':False]
['text':'/ Expand `file` for all comma-separated directories in `path`.','line_number':3227,'multiline':False]
['text':'/ Adds matches to `ga`.','line_number':3228,'multiline':False]
['text':'/ If "dirs" is true only expand directory names.','line_number':3229,'multiline':False]
['text':' Loop over all entries in {path}.','line_number':3238,'multiline':False]
['text':' Copy one item of the path to buf[] and concatenate the file name.','line_number':3240,'multiline':False]
['text':' NOLINT','line_number':3244,'multiline':False]
['text':' Concatenate new results to previous ones.','line_number':3252,'multiline':False]
['text':' take over the pointers and put them in "ga"','line_number':3254,'multiline':False]
['text':'/ Translate some keys pressed when 'wildmenu' is used.','line_number':3267,'multiline':False]
['text':' Hitting CR after "emenu Name.": complete submenu','line_number':3280,'multiline':False]
['text':'/ Delete characters on the command line, from "from" to the current position.','line_number':3292,'multiline':False]
['text':'/ Handle a key pressed when the wild menu for the menu names','line_number':3302,'multiline':False]
['text':'/ (EXPAND_MENUNAMES) is displayed.','line_number':3303,'multiline':False]
['text':' Hitting <Down> after "emenu Name.": complete submenu','line_number':3306,'multiline':False]
['text':' in case the key was mapped','line_number':3310,'multiline':False]
['text':' Hitting <Up>: Remove one submenu name in front of the','line_number':3312,'multiline':False]
['text':' cursor','line_number':3313,'multiline':False]
['text':' check for start of menu name','line_number':3319,'multiline':False]
['text':' check for start of submenu name','line_number':3325,'multiline':False]
['text':' in case the key was mapped','line_number':3340,'multiline':False]
['text':'/ Handle a key pressed when the wild menu for file names (EXPAND_FILES) or','line_number':3347,'multiline':False]
['text':'/ directory names (EXPAND_DIRECTORIES) or shell command names','line_number':3348,'multiline':False]
['text':'/ (EXPAND_SHELLCMD) is displayed.','line_number':3349,'multiline':False]
['text':' go down a directory','line_number':3365,'multiline':False]
['text':' in case the key was mapped','line_number':3367,'multiline':False]
['text':' If in a direct ancestor, strip off one ../ to go down','line_number':3369,'multiline':False]
['text':' in case the key was mapped','line_number':3387,'multiline':False]
['text':' go up a directory','line_number':3390,'multiline':False]
['text':' TODO(tarruda): this is only for DOS/Unix systems - need to put in','line_number':3423,'multiline':False]
['text':' machine-specific stuff here and in upseg init','line_number':3424,'multiline':False]
['text':' Now complete in the new directory. Set KeyTyped in case the','line_number':3431,'multiline':False]
['text':' Up key came from a mapping.','line_number':3432,'multiline':False]
['text':'/ Handle a key pressed when wild menu is displayed','line_number':3440,'multiline':False]
['text':' Special translations for 'wildmenu'','line_number':3443,'multiline':False]
['text':'/ Free expanded names when finished walking through the matches','line_number':3456,'multiline':False]
['text':' Entered command line, move it up','line_number':3471,'multiline':False]
['text':' restore 'laststatus' and 'winminheight'','line_number':3476,'multiline':False]
['text':' redraw the screen NOW','line_number':3480,'multiline':False]
['text':' don't redraw statusline if WM_LIST is showing','line_number':3484,'multiline':False]
['text':' must be before redraw_statuslines #8385','line_number':3487,'multiline':False]
['text':'/ "getcompletion()" function','line_number':3498,'multiline':False]
['text':' For filtered results, 'wildignore' is used','line_number':3519,'multiline':False]
['text':' Must be "custom,funcname" pattern','line_number':3550,'multiline':False]
['text':' Must be "customlist,funcname" pattern','line_number':3560,'multiline':False]
['text':' when fuzzy matching, don't modify the search string','line_number':3586,'multiline':False]
