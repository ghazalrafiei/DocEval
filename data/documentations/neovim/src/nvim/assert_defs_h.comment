['text':' support static asserts (aka compile-time asserts)','line_number':6,'multiline':False]
['text':' some compilers don't properly support short-circuiting apparently, giving','line_number':8,'multiline':False]
['text':' ugly syntax errors when using things like defined(__clang__) &&','line_number':9,'multiline':False]
['text':' defined(__has_feature) && __has_feature(...). Therefore we define Clang's','line_number':10,'multiline':False]
['text':' __has_feature and __has_extension macro's before referring to them.','line_number':11,'multiline':False]
['text':'/ @def STATIC_ASSERT','line_number':20,'multiline':False]
['text':'/ @brief Assert at compile time if condition is not satisfied.','line_number':21,'multiline':False]
['text':'/','line_number':22,'multiline':False]
['text':'/ Should be put on its own line, followed by a semicolon.','line_number':23,'multiline':False]
['text':'/','line_number':24,'multiline':False]
['text':'/ Example:','line_number':25,'multiline':False]
['text':'/','line_number':26,'multiline':False]
['text':'/     STATIC_ASSERT(sizeof(void *) == 8, "Expected 64-bit mode");','line_number':27,'multiline':False]
['text':'/','line_number':28,'multiline':False]
['text':'/ @param[in]  condition  Condition to check, should be an integer constant','line_number':29,'multiline':False]
['text':'/                        expression.','line_number':30,'multiline':False]
['text':'/ @param[in]  message  Message which will be given if check fails.','line_number':31,'multiline':False]
['text':'/ @def STATIC_ASSERT_EXPR','line_number':33,'multiline':False]
['text':'/ @brief Like #STATIC_ASSERT, but can be used where expressions are used.','line_number':34,'multiline':False]
['text':'/','line_number':35,'multiline':False]
['text':'/ STATIC_ASSERT_EXPR may be put in brace initializer lists. Error message','line_number':36,'multiline':False]
['text':'/ given in this case is not very nice with the current implementation though','line_number':37,'multiline':False]
['text':'/ and `message` argument is ignored.','line_number':38,'multiline':False]
['text':' define STATIC_ASSERT as C11's _Static_assert whenever either C11 mode is','line_number':40,'multiline':False]
['text':' detected or the compiler is known to support it. Note that Clang in C99','line_number':41,'multiline':False]
['text':' mode defines __has_feature(c_static_assert) as false and','line_number':42,'multiline':False]
['text':' __has_extension(c_static_assert) as true. Meaning it does support it, but','line_number':43,'multiline':False]
['text':' warns. A similar thing goes for gcc, which warns when it's not compiling','line_number':44,'multiline':False]
['text':' as C11 but does support _Static_assert since 4.6. Since we prefer the','line_number':45,'multiline':False]
['text':' clearer messages we get from _Static_assert, we suppress the warnings','line_number':46,'multiline':False]
['text':' temporarily.','line_number':47,'multiline':False]
['text':' the easiest case, when the mode is C11 (generic compiler) or Clang','line_number':58,'multiline':False]
['text':' advertises explicit support for c_static_assert, meaning it won't warn.','line_number':59,'multiline':False]
['text':' if we're dealing with gcc >= 4.6 in C99 mode, we can still use','line_number':62,'multiline':False]
['text':' _Static_assert but we need to suppress warnings, this is pretty ugly.','line_number':63,'multiline':False]
['text':' NOLINT(whitespace/parens)','line_number':64,'multiline':True]
['text':' the same goes for clang in C99 mode, but we suppress a different warning','line_number':85,'multiline':False]
['text':' TODO(aktau): verify that this works, don't have MSVC on hand.','line_number':99,'multiline':False]
['text':' fallback for compilers that don't support _Static_assert or static_assert','line_number':104,'multiline':False]
['text':' not as pretty but gets the job done. Credit goes to PÃ¡draig Brady and','line_number':105,'multiline':False]
['text':' contributors.','line_number':106,'multiline':False]
['text':' These can't be used after statements in c89.','line_number':113,'multiline':False]
['text':' This can't be used twice on the same line so ensure if using in headers','line_number':118,'multiline':False]
['text':' that the headers are not included twice (by wrapping in #ifndef...#endif)','line_number':119,'multiline':False]
['text':' Note it doesn't cause an issue when used on same line of separate modules','line_number':120,'multiline':False]
['text':' compiled with gcc -combine -fwhole-program.','line_number':121,'multiline':False]
['text':'/ @def STRICT_ADD','line_number':126,'multiline':False]
['text':'/ @brief Adds (a + b) and stores result in `c`.  Aborts on overflow.','line_number':127,'multiline':False]
['text':'/','line_number':128,'multiline':False]
['text':'/ Requires GCC 5+ and Clang 3.8+','line_number':129,'multiline':False]
['text':'/   https://clang.llvm.org/docs/LanguageExtensions.html','line_number':130,'multiline':False]
['text':'/   https://gcc.gnu.org/onlinedocs/gcc/Integer-Overflow-Builtins.html','line_number':131,'multiline':False]
['text':'/','line_number':132,'multiline':False]
['text':'/ Alternative for compilers without __builtin_xx_overflow ?','line_number':133,'multiline':False]
['text':'/   https://stackoverflow.com/a/44830670/152142','line_number':134,'multiline':False]
['text':'/','line_number':135,'multiline':False]
['text':'/ @param a  Operand 1.','line_number':136,'multiline':False]
['text':'/ @param b  Operand 2.','line_number':137,'multiline':False]
['text':'/ @param c  Where to store the result.','line_number':138,'multiline':False]
['text':'/ @param t  Result type. Not used if compiler supports __builtin_add_overflow.','line_number':139,'multiline':False]
['text':'/ @def STRICT_SUB','line_number':153,'multiline':False]
['text':'/ @brief Subtracts (a - b) and stores result in `c`.  Aborts on overflow.','line_number':154,'multiline':False]
['text':'/ @see STRICT_ADD','line_number':155,'multiline':False]
