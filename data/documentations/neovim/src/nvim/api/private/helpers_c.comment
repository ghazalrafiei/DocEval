['text':'/ Start block that may cause Vimscript exceptions while evaluating another code','line_number':44,'multiline':False]
['text':'/','line_number':45,'multiline':False]
['text':'/ Used when caller is supposed to be operating when other Vimscript code is being','line_number':46,'multiline':False]
['text':'/ processed and that “other Vimscript code” must not be affected.','line_number':47,'multiline':False]
['text':'/','line_number':48,'multiline':False]
['text':'/ @param[out]  tstate  Location where try state should be saved.','line_number':49,'multiline':False]
['text':' TODO(ZyX-I): Check whether try_enter()/try_leave() may use','line_number':52,'multiline':False]
['text':'              enter_cleanup()/leave_cleanup(). Or','line_number':53,'multiline':False]
['text':'              save_dbg_stuff()/restore_dbg_stuff().','line_number':54,'multiline':False]
['text':'/ End try block, set the error message if any and restore previous state','line_number':74,'multiline':False]
['text':'/','line_number':75,'multiline':False]
['text':'/ @warning Return is consistent with most functions (false on error), not with','line_number':76,'multiline':False]
['text':'/          try_end (true on error).','line_number':77,'multiline':False]
['text':'/','line_number':78,'multiline':False]
['text':'/ @param[in]  tstate  Previous state to restore.','line_number':79,'multiline':False]
['text':'/ @param[out]  err  Location where error should be saved.','line_number':80,'multiline':False]
['text':'/','line_number':81,'multiline':False]
['text':'/ @return false if error occurred, true otherwise.','line_number':82,'multiline':False]
['text':'/ Start block that may cause vimscript exceptions','line_number':105,'multiline':False]
['text':'/','line_number':106,'multiline':False]
['text':'/ Each try_start() call should be mirrored by try_end() call.','line_number':107,'multiline':False]
['text':'/','line_number':108,'multiline':False]
['text':'/ To be used as a replacement of `:try … catch … endtry` in C code, in cases','line_number':109,'multiline':False]
['text':'/ when error flag could not already be set. If there may be pending error','line_number':110,'multiline':False]
['text':'/ state at the time try_start() is executed which needs to be preserved,','line_number':111,'multiline':False]
['text':'/ try_enter()/try_leave() pair should be used instead.','line_number':112,'multiline':False]
['text':'/ End try block, set the error message if any and return true if an error','line_number':118,'multiline':False]
['text':'/ occurred.','line_number':119,'multiline':False]
['text':'/','line_number':120,'multiline':False]
['text':'/ @param err Pointer to the stack-allocated error object','line_number':121,'multiline':False]
['text':'/ @return true if an error occurred','line_number':122,'multiline':False]
['text':' Note: all globals manipulated here should be saved/restored in','line_number':125,'multiline':False]
['text':' try_enter/try_leave.','line_number':126,'multiline':False]
['text':' Set by emsg(), affects aborting().  See also enter_cleanup().','line_number':129,'multiline':False]
['text':' If we got an interrupt, discard the current exception','line_number':135,'multiline':False]
['text':'/ Recursively expands a vimscript value in a dict','line_number':172,'multiline':False]
['text':'/','line_number':173,'multiline':False]
['text':'/ @param dict The vimscript dict','line_number':174,'multiline':False]
['text':'/ @param key The key','line_number':175,'multiline':False]
['text':'/ @param[out] err Details of an error that may have occurred','line_number':176,'multiline':False]
['text':'/ Set a value in a scope dict. Objects are recursively expanded into their','line_number':212,'multiline':False]
['text':'/ vimscript equivalents.','line_number':213,'multiline':False]
['text':'/','line_number':214,'multiline':False]
['text':'/ @param dict The vimscript dict','line_number':215,'multiline':False]
['text':'/ @param key The key','line_number':216,'multiline':False]
['text':'/ @param value The new value','line_number':217,'multiline':False]
['text':'/ @param del Delete key in place of setting it. Argument `value` is ignored in','line_number':218,'multiline':False]
['text':'/            this case.','line_number':219,'multiline':False]
['text':'/ @param retval If true the old value will be converted and returned.','line_number':220,'multiline':False]
['text':'/ @param[out] err Details of an error that may have occurred','line_number':221,'multiline':False]
['text':'/ @return The old value if `retval` is true and the key was present, else NIL','line_number':222,'multiline':False]
['text':' Delete the key','line_number':235,'multiline':False]
['text':' Doesn't exist, fail','line_number':237,'multiline':False]
['text':' Notify watchers','line_number':240,'multiline':False]
['text':' Return the old value','line_number':244,'multiline':False]
['text':' Delete the entry','line_number':248,'multiline':False]
['text':' Update the key','line_number':252,'multiline':False]
['text':' Convert the object to a vimscript type in the temporary variable','line_number':255,'multiline':False]
['text':' Need to create an entry','line_number':261,'multiline':False]
['text':' Return the old value','line_number':265,'multiline':False]
['text':' Update the value','line_number':285,'multiline':False]
['text':' Notify watchers','line_number':288,'multiline':False]
['text':' Clear the temporary variable','line_number':294,'multiline':False]
['text':'/ Allocates a String consisting of a single char. Does not support multibyte','line_number':346,'multiline':False]
['text':'/ characters. The resulting string is also NUL-terminated, to facilitate','line_number':347,'multiline':False]
['text':'/ interoperating with code using C strings.','line_number':348,'multiline':False]
['text':'/','line_number':349,'multiline':False]
['text':'/ @param char the char to convert','line_number':350,'multiline':False]
['text':'/ @return the resulting String, if the input char was NUL, an','line_number':351,'multiline':False]
['text':'/         empty String is returned','line_number':352,'multiline':False]
['text':'/ Copies a C string into a String (binary safe string, characters + length).','line_number':362,'multiline':False]
['text':'/ The resulting string is also NUL-terminated, to facilitate interoperating','line_number':363,'multiline':False]
['text':'/ with code using C strings.','line_number':364,'multiline':False]
['text':'/','line_number':365,'multiline':False]
['text':'/ @param str the C string to copy','line_number':366,'multiline':False]
['text':'/ @return the resulting String, if the input string was NULL, an','line_number':367,'multiline':False]
['text':'/         empty String is returned','line_number':368,'multiline':False]
['text':'/ Copies a String to an allocated, NUL-terminated C string.','line_number':382,'multiline':False]
['text':'/','line_number':383,'multiline':False]
['text':'/ @param str the String to copy','line_number':384,'multiline':False]
['text':'/ @return the resulting C string','line_number':385,'multiline':False]
['text':'/ Copies buffer to an allocated String.','line_number':392,'multiline':False]
['text':'/ The resulting string is also NUL-terminated, to facilitate interoperating','line_number':393,'multiline':False]
['text':'/ with code using C strings.','line_number':394,'multiline':False]
['text':'/','line_number':395,'multiline':False]
['text':'/ @param buf the buffer to copy','line_number':396,'multiline':False]
['text':'/ @param size length of the buffer','line_number':397,'multiline':False]
['text':'/ @return the resulting String, if the input string was NULL, an','line_number':398,'multiline':False]
['text':'/         empty String is returned','line_number':399,'multiline':False]
['text':'/ Creates a String using the given C string. Unlike','line_number':421,'multiline':False]
['text':'/ cstr_to_string this function DOES NOT copy the C string.','line_number':422,'multiline':False]
['text':'/','line_number':423,'multiline':False]
['text':'/ @param str the C string to use','line_number':424,'multiline':False]
['text':'/ @return The resulting String, or an empty String if','line_number':425,'multiline':False]
['text':'/           str was NULL','line_number':426,'multiline':False]
['text':'/ Return the owned memory of a ga as a String','line_number':435,'multiline':False]
['text':'/','line_number':436,'multiline':False]
['text':'/ Reinitializes the ga to a valid empty state.','line_number':437,'multiline':False]
['text':'/ Creates "readfile()-style" ArrayOf(String) from a binary string.','line_number':447,'multiline':False]
['text':'/','line_number':448,'multiline':False]
['text':'/ - Lines break at \n (NL/LF/line-feed).','line_number':449,'multiline':False]
['text':'/ - NUL bytes are replaced with NL.','line_number':450,'multiline':False]
['text':'/ - If the last byte is a linebreak an extra empty list item is added.','line_number':451,'multiline':False]
['text':'/','line_number':452,'multiline':False]
['text':'/ @param input  Binary string','line_number':453,'multiline':False]
['text':'/ @param crlf  Also break lines at CR and CRLF.','line_number':454,'multiline':False]
['text':'/ @return [allocated] String array','line_number':455,'multiline':False]
['text':' Advance past CRLF.','line_number':471,'multiline':False]
['text':' If line ends at end-of-buffer, add empty final item.','line_number':479,'multiline':False]
['text':' This is "readfile()-style", see also ":help channel-lines".','line_number':480,'multiline':False]
['text':'/ Normalizes 0-based indexes to buffer line numbers.','line_number':489,'multiline':False]
['text':' A negative index counts from the bottom.','line_number':494,'multiline':False]
['text':' Check for oob and clamp.','line_number':497,'multiline':False]
['text':' Convert the index to a 1-based line number.','line_number':505,'multiline':False]
['text':'/ Returns a substring of a buffer line','line_number':510,'multiline':False]
['text':'/','line_number':511,'multiline':False]
['text':'/ @param buf          Buffer handle','line_number':512,'multiline':False]
['text':'/ @param lnum         Line number (1-based)','line_number':513,'multiline':False]
['text':'/ @param start_col    Starting byte offset into line (0-based)','line_number':514,'multiline':False]
['text':'/ @param end_col      Ending byte offset into line (0-based, exclusive)','line_number':515,'multiline':False]
['text':'/ @param err          Error object','line_number':516,'multiline':False]
['text':'/ @return The text between start_col and end_col on line lnum of buffer buf','line_number':517,'multiline':False]
['text':'/ @returns a shared value. caller must not modify it!','line_number':642,'multiline':False]
['text':' all the copy_[object] functions allow arena=NULL,','line_number':740,'multiline':False]
['text':' then global allocations are used, and the resulting object','line_number':741,'multiline':False]
['text':' should be freed with an api_free_[object] function','line_number':742,'multiline':False]
['text':'/ Creates a deep clone of an object','line_number':772,'multiline':False]
['text':' Limit error message to 1 MB.','line_number':811,'multiline':False]
['text':'/ Force obj to bool.','line_number':820,'multiline':False]
['text':'/ If it fails, returns false and sets err','line_number':821,'multiline':False]
['text':'/ @param obj          The object to coerce to a boolean','line_number':822,'multiline':False]
['text':'/ @param what         The name of the object, used for error message','line_number':823,'multiline':False]
['text':'/ @param nil_value    What to return if the type is nil.','line_number':824,'multiline':False]
['text':'/ @param err          Set if there was an error in converting to a bool','line_number':825,'multiline':False]
['text':' C semantics: non-zero int is true','line_number':831,'multiline':False]
['text':' caller decides what NIL (missing retval in Lua) means','line_number':833,'multiline':False]
['text':' TODO(bfredl): use object_to_hl_id and allow integer','line_number':905,'multiline':False]
['text':' see also nlua_pop_keydict for the lua specific implementation','line_number':920,'multiline':False]
['text':' caller should check HAS_KEY to override the nil behavior, or GET_BOOL_OR_TRUE','line_number':956,'multiline':False]
['text':' to directly use true when nil','line_number':957,'multiline':False]
['text':' allow empty array as empty dict for lua (directly or via lua-client RPC)','line_number':974,'multiline':False]
['text':'/ Set a named mark','line_number':1021,'multiline':False]
['text':'/ buffer and mark name must be validated already','line_number':1022,'multiline':False]
['text':'/ @param buffer     Buffer to set the mark on','line_number':1023,'multiline':False]
['text':'/ @param name       Mark name','line_number':1024,'multiline':False]
['text':'/ @param line       Line number','line_number':1025,'multiline':False]
['text':'/ @param col        Column/row number','line_number':1026,'multiline':False]
['text':'/ @return true if the mark was set, else false','line_number':1027,'multiline':False]
['text':' If line == 0 the marks is being deleted','line_number':1031,'multiline':False]
['text':'/ Get default statusline highlight for window','line_number':1062,'multiline':False]
['text':' TODO(autocmd): Figure out what this should be','line_number':1080,'multiline':False]
['text':' return SID_API_CLIENT;','line_number':1081,'multiline':False]
['text':'/ Sets sctx for API calls.','line_number':1089,'multiline':False]
['text':'/','line_number':1090,'multiline':False]
['text':'/ @param channel_id     api clients id. Used to determine if it's a internal','line_number':1091,'multiline':False]
['text':'/                       call or a rpc call.','line_number':1092,'multiline':False]
['text':'/ @return returns       previous value of current_sctx. To be used','line_number':1093,'multiline':False]
['text':'/                       to be used for restoring sctx to previous state.','line_number':1094,'multiline':False]
