['text':'/ Parse command line.','line_number':40,'multiline':False]
['text':'/','line_number':41,'multiline':False]
['text':'/ Doesn't check the validity of command arguments.','line_number':42,'multiline':False]
['text':'/','line_number':43,'multiline':False]
['text':'/ @param str       Command line string to parse. Cannot contain "\n".','line_number':44,'multiline':False]
['text':'/ @param opts      Optional parameters. Reserved for future use.','line_number':45,'multiline':False]
['text':'/ @param[out] err  Error details, if any.','line_number':46,'multiline':False]
['text':'/ @return Dictionary containing command information, with these keys:','line_number':47,'multiline':False]
['text':'/         - cmd: (string) Command name.','line_number':48,'multiline':False]
['text':'/         - range: (array) (optional) Command range (|<line1>| |<line2>|).','line_number':49,'multiline':False]
['text':'/                          Omitted if command doesn't accept a range.','line_number':50,'multiline':False]
['text':'/                          Otherwise, has no elements if no range was specified, one element if','line_number':51,'multiline':False]
['text':'/                          only a single range item was specified, or two elements if both range','line_number':52,'multiline':False]
['text':'/                          items were specified.','line_number':53,'multiline':False]
['text':'/         - count: (number) (optional) Command |<count>|.','line_number':54,'multiline':False]
['text':'/                           Omitted if command cannot take a count.','line_number':55,'multiline':False]
['text':'/         - reg: (string) (optional) Command |<register>|.','line_number':56,'multiline':False]
['text':'/                         Omitted if command cannot take a register.','line_number':57,'multiline':False]
['text':'/         - bang: (boolean) Whether command contains a |<bang>| (!) modifier.','line_number':58,'multiline':False]
['text':'/         - args: (array) Command arguments.','line_number':59,'multiline':False]
['text':'/         - addr: (string) Value of |:command-addr|. Uses short name or "line" for -addr=lines.','line_number':60,'multiline':False]
['text':'/         - nargs: (string) Value of |:command-nargs|.','line_number':61,'multiline':False]
['text':'/         - nextcmd: (string) Next command if there are multiple commands separated by a |:bar|.','line_number':62,'multiline':False]
['text':'/                             Empty if there isn't a next command.','line_number':63,'multiline':False]
['text':'/         - magic: (dictionary) Which characters have special meaning in the command arguments.','line_number':64,'multiline':False]
['text':'/             - file: (boolean) The command expands filenames. Which means characters such as "%",','line_number':65,'multiline':False]
['text':'/                               "#" and wildcards are expanded.','line_number':66,'multiline':False]
['text':'/             - bar: (boolean) The "|" character is treated as a command separator and the double','line_number':67,'multiline':False]
['text':'/                              quote character (\") is treated as the start of a comment.','line_number':68,'multiline':False]
['text':'/         - mods: (dictionary) |:command-modifiers|.','line_number':69,'multiline':False]
['text':'/             - filter: (dictionary) |:filter|.','line_number':70,'multiline':False]
['text':'/                 - pattern: (string) Filter pattern. Empty string if there is no filter.','line_number':71,'multiline':False]
['text':'/                 - force: (boolean) Whether filter is inverted or not.','line_number':72,'multiline':False]
['text':'/             - silent: (boolean) |:silent|.','line_number':73,'multiline':False]
['text':'/             - emsg_silent: (boolean) |:silent!|.','line_number':74,'multiline':False]
['text':'/             - unsilent: (boolean) |:unsilent|.','line_number':75,'multiline':False]
['text':'/             - sandbox: (boolean) |:sandbox|.','line_number':76,'multiline':False]
['text':'/             - noautocmd: (boolean) |:noautocmd|.','line_number':77,'multiline':False]
['text':'/             - browse: (boolean) |:browse|.','line_number':78,'multiline':False]
['text':'/             - confirm: (boolean) |:confirm|.','line_number':79,'multiline':False]
['text':'/             - hide: (boolean) |:hide|.','line_number':80,'multiline':False]
['text':'/             - horizontal: (boolean) |:horizontal|.','line_number':81,'multiline':False]
['text':'/             - keepalt: (boolean) |:keepalt|.','line_number':82,'multiline':False]
['text':'/             - keepjumps: (boolean) |:keepjumps|.','line_number':83,'multiline':False]
['text':'/             - keepmarks: (boolean) |:keepmarks|.','line_number':84,'multiline':False]
['text':'/             - keeppatterns: (boolean) |:keeppatterns|.','line_number':85,'multiline':False]
['text':'/             - lockmarks: (boolean) |:lockmarks|.','line_number':86,'multiline':False]
['text':'/             - noswapfile: (boolean) |:noswapfile|.','line_number':87,'multiline':False]
['text':'/             - tab: (integer) |:tab|. -1 when omitted.','line_number':88,'multiline':False]
['text':'/             - verbose: (integer) |:verbose|. -1 when omitted.','line_number':89,'multiline':False]
['text':'/             - vertical: (boolean) |:vertical|.','line_number':90,'multiline':False]
['text':'/             - split: (string) Split modifier string, is an empty string when there's no split','line_number':91,'multiline':False]
['text':'/                               modifier. If there is a split modifier it can be one of:','line_number':92,'multiline':False]
['text':'/               - "aboveleft": |:aboveleft|.','line_number':93,'multiline':False]
['text':'/               - "belowright": |:belowright|.','line_number':94,'multiline':False]
['text':'/               - "topleft": |:topleft|.','line_number':95,'multiline':False]
['text':'/               - "botright": |:botright|.','line_number':96,'multiline':False]
['text':' Parse command line','line_number':102,'multiline':False]
['text':' Parse arguments','line_number':117,'multiline':False]
['text':' For nargs = 1 or '?', pass the entire argument list as a single argument,','line_number':121,'multiline':False]
['text':' otherwise split arguments by whitespace.','line_number':122,'multiline':False]
['text':'/ Executes an Ex command.','line_number':292,'multiline':False]
['text':'/','line_number':293,'multiline':False]
['text':'/ Unlike |nvim_command()| this command takes a structured Dictionary instead of a String. This','line_number':294,'multiline':False]
['text':'/ allows for easier construction and manipulation of an Ex command. This also allows for things','line_number':295,'multiline':False]
['text':'/ such as having spaces inside a command argument, expanding filenames in a command that otherwise','line_number':296,'multiline':False]
['text':'/ doesn't expand filenames, etc. Command arguments may also be Number, Boolean or String.','line_number':297,'multiline':False]
['text':'/','line_number':298,'multiline':False]
['text':'/ The first argument may also be used instead of count for commands that support it in order to','line_number':299,'multiline':False]
['text':'/ make their usage simpler with |vim.cmd()|. For example, instead of','line_number':300,'multiline':False]
['text':'/ `vim.cmd.bdelete{ count = 2 }`, you may do `vim.cmd.bdelete(2)`.','line_number':301,'multiline':False]
['text':'/','line_number':302,'multiline':False]
['text':'/ On execution error: fails with Vimscript error, updates v:errmsg.','line_number':303,'multiline':False]
['text':'/','line_number':304,'multiline':False]
['text':'/ @see |nvim_exec2()|','line_number':305,'multiline':False]
['text':'/ @see |nvim_command()|','line_number':306,'multiline':False]
['text':'/','line_number':307,'multiline':False]
['text':'/ @param cmd       Command to execute. Must be a Dictionary that can contain the same values as','line_number':308,'multiline':False]
['text':'/                  the return value of |nvim_parse_cmd()| except "addr", "nargs" and "nextcmd"','line_number':309,'multiline':False]
['text':'/                  which are ignored if provided. All values except for "cmd" are optional.','line_number':310,'multiline':False]
['text':'/ @param opts      Optional parameters.','line_number':311,'multiline':False]
['text':'/                  - output: (boolean, default false) Whether to return command output.','line_number':312,'multiline':False]
['text':'/ @param[out] err  Error details, if any.','line_number':313,'multiline':False]
['text':'/ @return Command output (non-error, non-shell |:!|) if `output` is true, else empty string.','line_number':314,'multiline':False]
['text':' If this looks like an undefined user command and there are CmdUndefined','line_number':358,'multiline':False]
['text':' autocommands defined, trigger the matching autocommands.','line_number':359,'multiline':False]
['text':' If the autocommands did something and didn't cause an error, try','line_number':365,'multiline':False]
['text':' finding the command again.','line_number':366,'multiline':False]
['text':' Get the command flags so that we can know what type of arguments the command uses.','line_number':383,'multiline':False]
['text':' Not required for a user command since `find_ex_command` already deals with it in that case.','line_number':384,'multiline':False]
['text':' Parse command arguments since it's needed to get the command address type.','line_number':389,'multiline':False]
['text':' Process all arguments. Convert non-String arguments to String and check if String arguments','line_number':391,'multiline':False]
['text':' have non-whitespace characters.','line_number':392,'multiline':False]
['text':' Check if correct number of arguments is used.','line_number':428,'multiline':False]
['text':' Simply pass the first argument (if it exists) as the arg pointer to `set_cmd_addr_type()`','line_number':452,'multiline':False]
['text':' since it only ever checks the first argument.','line_number':453,'multiline':False]
['text':' Default range for range=%','line_number':484,'multiline':False]
['text':' Default range.','line_number':486,'multiline':False]
['text':' Default is 1, not cursor.','line_number':489,'multiline':False]
['text':' "filter! // is not no-op, so add a filter if either the pattern is non-empty or if filter','line_number':558,'multiline':False]
['text':' is inverted.','line_number':559,'multiline':False]
['text':' Silently ignore negative integers to allow mods.tab to be set to -1.','line_number':570,'multiline':False]
['text':' Silently ignore negative integers to allow mods.verbose to be set to -1.','line_number':577,'multiline':False]
['text':' Empty string, do nothing.','line_number':588,'multiline':False]
['text':' CMOD_ERRSILENT must imply CMOD_SILENT, otherwise apply_cmdmod() and undo_cmdmod() won't','line_number':627,'multiline':False]
['text':' work properly.','line_number':628,'multiline':False]
['text':' Finally, build the command line string that will be stored inside ea.cmdlinep.','line_number':638,'multiline':False]
['text':' This also sets the values of ea.cmd, ea.arg, ea.args and ea.arglens.','line_number':639,'multiline':False]
['text':' prevent leading spaces','line_number':656,'multiline':False]
['text':' Put msg_col back where it was, since nothing should have been written.','line_number':666,'multiline':False]
['text':' redir usually (except :echon) prepends a newline.','line_number':680,'multiline':False]
['text':'/ Check if a string contains only whitespace characters.','line_number':706,'multiline':False]
['text':' Found a non-whitespace character','line_number':711,'multiline':False]
['text':' Terminate at first occurrence of a NUL character','line_number':714,'multiline':False]
['text':'/ Build cmdline string for command, used by `nvim_cmd()`.','line_number':721,'multiline':False]
['text':' Make it big enough to handle most typical commands','line_number':727,'multiline':False]
['text':' Add command modifiers','line_number':729,'multiline':False]
['text':' Command range / count.','line_number':786,'multiline':False]
['text':' Make sure address count is not greater than 2','line_number':792,'multiline':False]
['text':' Keep the index of the position where command name starts, so eap->cmd can point to it.','line_number':796,'multiline':False]
['text':' Command bang.','line_number':800,'multiline':False]
['text':' Command register.','line_number':805,'multiline':False]
['text':' Done appending to cmdline, ensure it is NUL terminated','line_number':820,'multiline':False]
['text':' Now that all the arguments are appended, use the command index and argument indices to set the','line_number':823,'multiline':False]
['text':' values of eap->cmd, eap->arg and eap->args.','line_number':824,'multiline':False]
['text':' Account for space','line_number':829,'multiline':False]
['text':' If there isn't an argument, make eap->arg point to end of cmdline.','line_number':833,'multiline':False]
['text':' Subtract 1 to account for NUL','line_number':835,'multiline':False]
['text':' Finally, make cmdlinep point to the cmdline string.','line_number':837,'multiline':False]
['text':' Replace, :make and :grep with 'makeprg' and 'grepprg'.','line_number':840,'multiline':False]
['text':' If replace_makeprg() modified the cmdline string, correct the eap->arg pointer.','line_number':843,'multiline':False]
['text':' This cannot be a user command, so eap->args will not be used.','line_number':845,'multiline':False]
['text':'/ Creates a global |user-commands| command.','line_number':852,'multiline':False]
['text':'/','line_number':853,'multiline':False]
['text':'/ For Lua usage see |lua-guide-commands-create|.','line_number':854,'multiline':False]
['text':'/','line_number':855,'multiline':False]
['text':'/ Example:','line_number':856,'multiline':False]
['text':'/','line_number':857,'multiline':False]
['text':'/ ```vim','line_number':858,'multiline':False]
['text':'/ :call nvim_create_user_command('SayHello', 'echo "Hello world!"', {'bang': v:true})','line_number':859,'multiline':False]
['text':'/ :SayHello','line_number':860,'multiline':False]
['text':'/ Hello world!','line_number':861,'multiline':False]
['text':'/ ```','line_number':862,'multiline':False]
['text':'/','line_number':863,'multiline':False]
['text':'/ @param  name    Name of the new user command. Must begin with an uppercase letter.','line_number':864,'multiline':False]
['text':'/ @param  command Replacement command to execute when this user command is executed. When called','line_number':865,'multiline':False]
['text':'/                 from Lua, the command can also be a Lua function. The function is called with a','line_number':866,'multiline':False]
['text':'/                 single table argument that contains the following keys:','line_number':867,'multiline':False]
['text':'/                 - name: (string) Command name','line_number':868,'multiline':False]
['text':'/                 - args: (string) The args passed to the command, if any |<args>|','line_number':869,'multiline':False]
['text':'/                 - fargs: (table) The args split by unescaped whitespace (when more than one','line_number':870,'multiline':False]
['text':'/                 argument is allowed), if any |<f-args>|','line_number':871,'multiline':False]
['text':'/                 - nargs: (string) Number of arguments |:command-nargs|','line_number':872,'multiline':False]
['text':'/                 - bang: (boolean) "true" if the command was executed with a ! modifier |<bang>|','line_number':873,'multiline':False]
['text':'/                 - line1: (number) The starting line of the command range |<line1>|','line_number':874,'multiline':False]
['text':'/                 - line2: (number) The final line of the command range |<line2>|','line_number':875,'multiline':False]
['text':'/                 - range: (number) The number of items in the command range: 0, 1, or 2 |<range>|','line_number':876,'multiline':False]
['text':'/                 - count: (number) Any count supplied |<count>|','line_number':877,'multiline':False]
['text':'/                 - reg: (string) The optional register, if specified |<reg>|','line_number':878,'multiline':False]
['text':'/                 - mods: (string) Command modifiers, if any |<mods>|','line_number':879,'multiline':False]
['text':'/                 - smods: (table) Command modifiers in a structured format. Has the same','line_number':880,'multiline':False]
['text':'/                 structure as the "mods" key of |nvim_parse_cmd()|.','line_number':881,'multiline':False]
['text':'/ @param  opts    Optional |command-attributes|.','line_number':882,'multiline':False]
['text':'/                 - Set boolean attributes such as |:command-bang| or |:command-bar| to true (but','line_number':883,'multiline':False]
['text':'/                   not |:command-buffer|, use |nvim_buf_create_user_command()| instead).','line_number':884,'multiline':False]
['text':'/                 - "complete" |:command-complete| also accepts a Lua function which works like','line_number':885,'multiline':False]
['text':'/                   |:command-completion-customlist|.','line_number':886,'multiline':False]
['text':'/                 - Other parameters:','line_number':887,'multiline':False]
['text':'/                   - desc: (string) Used for listing the command when a Lua function is used for','line_number':888,'multiline':False]
['text':'/                                    {command}.','line_number':889,'multiline':False]
['text':'/                   - force: (boolean, default true) Override any previous definition.','line_number':890,'multiline':False]
['text':'/                   - preview: (function) Preview callback for 'inccommand' |:command-preview|','line_number':891,'multiline':False]
['text':'/ @param[out] err Error details, if any.','line_number':892,'multiline':False]
['text':'/ Delete a user-defined command.','line_number':900,'multiline':False]
['text':'/','line_number':901,'multiline':False]
['text':'/ @param  name    Name of the command to delete.','line_number':902,'multiline':False]
['text':'/ @param[out] err Error details, if any.','line_number':903,'multiline':False]
['text':'/ Creates a buffer-local command |user-commands|.','line_number':910,'multiline':False]
['text':'/','line_number':911,'multiline':False]
['text':'/ @param  buffer  Buffer handle, or 0 for current buffer.','line_number':912,'multiline':False]
['text':'/ @param[out] err Error details, if any.','line_number':913,'multiline':False]
['text':'/ @see nvim_create_user_command','line_number':914,'multiline':False]
['text':'/ Delete a buffer-local user-defined command.','line_number':930,'multiline':False]
['text':'/','line_number':931,'multiline':False]
['text':'/ Only commands created with |:command-buffer| or','line_number':932,'multiline':False]
['text':'/ |nvim_buf_create_user_command()| can be deleted with this function.','line_number':933,'multiline':False]
['text':'/','line_number':934,'multiline':False]
['text':'/ @param  buffer  Buffer handle, or 0 for current buffer.','line_number':935,'multiline':False]
['text':'/ @param  name    Name of the command to delete.','line_number':936,'multiline':False]
['text':'/ @param[out] err Error details, if any.','line_number':937,'multiline':False]
['text':' Default value, nothing to do','line_number':995,'multiline':False]
['text':' Do not goto err, since uc_add_command now owns luaref, compl_luaref, and compl_arg','line_number':1158,'multiline':False]
['text':'/ Gets a map of global (non-buffer-local) Ex commands.','line_number':1169,'multiline':False]
['text':'/','line_number':1170,'multiline':False]
['text':'/ Currently only |user-commands| are supported, not builtin Ex commands.','line_number':1171,'multiline':False]
['text':'/','line_number':1172,'multiline':False]
['text':'/ @see |nvim_get_all_options_info()|','line_number':1173,'multiline':False]
['text':'/','line_number':1174,'multiline':False]
['text':'/ @param  opts  Optional parameters. Currently only supports','line_number':1175,'multiline':False]
['text':'/               {"builtin":false}','line_number':1176,'multiline':False]
['text':'/ @param[out]  err   Error details, if any.','line_number':1177,'multiline':False]
['text':'/','line_number':1178,'multiline':False]
['text':'/ @returns Map of maps describing commands.','line_number':1179,'multiline':False]
['text':'/ Gets a map of buffer-local |user-commands|.','line_number':1186,'multiline':False]
['text':'/','line_number':1187,'multiline':False]
['text':'/ @param  buffer  Buffer handle, or 0 for current buffer','line_number':1188,'multiline':False]
['text':'/ @param  opts  Optional parameters. Currently not used.','line_number':1189,'multiline':False]
['text':'/ @param[out]  err   Error details, if any.','line_number':1190,'multiline':False]
['text':'/','line_number':1191,'multiline':False]
['text':'/ @returns Map of maps describing commands.','line_number':1192,'multiline':False]
