['text':'/ Gets a highlight group by name','line_number':77,'multiline':False]
['text':'/','line_number':78,'multiline':False]
['text':'/ similar to |hlID()|, but allocates a new ID if not present.','line_number':79,'multiline':False]
['text':'/ Gets all or specific highlight groups in a namespace.','line_number':86,'multiline':False]
['text':'/','line_number':87,'multiline':False]
['text':'/ @note When the `link` attribute is defined in the highlight definition','line_number':88,'multiline':False]
['text':'/       map, other attributes will not be taking effect (see |:hi-link|).','line_number':89,'multiline':False]
['text':'/','line_number':90,'multiline':False]
['text':'/ @param ns_id Get highlight groups for namespace ns_id |nvim_get_namespaces()|.','line_number':91,'multiline':False]
['text':'/              Use 0 to get global highlight groups |:highlight|.','line_number':92,'multiline':False]
['text':'/ @param opts  Options dict:','line_number':93,'multiline':False]
['text':'/                 - name: (string) Get a highlight definition by name.','line_number':94,'multiline':False]
['text':'/                 - id: (integer) Get a highlight definition by id.','line_number':95,'multiline':False]
['text':'/                 - link: (boolean, default true) Show linked group name instead of effective definition |:hi-link|.','line_number':96,'multiline':False]
['text':'/                 - create: (boolean, default true) When highlight group doesn't exist create it.','line_number':97,'multiline':False]
['text':'/','line_number':98,'multiline':False]
['text':'/ @param[out] err Error details, if any.','line_number':99,'multiline':False]
['text':'/ @return Highlight groups as a map from group name to a highlight definition map as in |nvim_set_hl()|,','line_number':100,'multiline':False]
['text':'/                   or only a single highlight definition map if requested by name or id.','line_number':101,'multiline':False]
['text':'/ Sets a highlight group.','line_number':108,'multiline':False]
['text':'/','line_number':109,'multiline':False]
['text':'/ @note Unlike the `:highlight` command which can update a highlight group,','line_number':110,'multiline':False]
['text':'/       this function completely replaces the definition. For example:','line_number':111,'multiline':False]
['text':'/       ``nvim_set_hl(0, 'Visual', {})`` will clear the highlight group','line_number':112,'multiline':False]
['text':'/       'Visual'.','line_number':113,'multiline':False]
['text':'/','line_number':114,'multiline':False]
['text':'/ @note The fg and bg keys also accept the string values `"fg"` or `"bg"`','line_number':115,'multiline':False]
['text':'/       which act as aliases to the corresponding foreground and background','line_number':116,'multiline':False]
['text':'/       values of the Normal group. If the Normal group has not been defined,','line_number':117,'multiline':False]
['text':'/       using these values results in an error.','line_number':118,'multiline':False]
['text':'/','line_number':119,'multiline':False]
['text':'/','line_number':120,'multiline':False]
['text':'/ @note If `link` is used in combination with other attributes; only the','line_number':121,'multiline':False]
['text':'/       `link` will take effect (see |:hi-link|).','line_number':122,'multiline':False]
['text':'/','line_number':123,'multiline':False]
['text':'/ @param ns_id Namespace id for this highlight |nvim_create_namespace()|.','line_number':124,'multiline':False]
['text':'/              Use 0 to set a highlight group globally |:highlight|.','line_number':125,'multiline':False]
['text':'/              Highlights from non-global namespaces are not active by default, use','line_number':126,'multiline':False]
['text':'/              |nvim_set_hl_ns()| or |nvim_win_set_hl_ns()| to activate them.','line_number':127,'multiline':False]
['text':'/ @param name  Highlight group name, e.g. "ErrorMsg"','line_number':128,'multiline':False]
['text':'/ @param val   Highlight definition map, accepts the following keys:','line_number':129,'multiline':False]
['text':'/                - fg (or foreground): color name or "#RRGGBB", see note.','line_number':130,'multiline':False]
['text':'/                - bg (or background): color name or "#RRGGBB", see note.','line_number':131,'multiline':False]
['text':'/                - sp (or special): color name or "#RRGGBB"','line_number':132,'multiline':False]
['text':'/                - blend: integer between 0 and 100','line_number':133,'multiline':False]
['text':'/                - bold: boolean','line_number':134,'multiline':False]
['text':'/                - standout: boolean','line_number':135,'multiline':False]
['text':'/                - underline: boolean','line_number':136,'multiline':False]
['text':'/                - undercurl: boolean','line_number':137,'multiline':False]
['text':'/                - underdouble: boolean','line_number':138,'multiline':False]
['text':'/                - underdotted: boolean','line_number':139,'multiline':False]
['text':'/                - underdashed: boolean','line_number':140,'multiline':False]
['text':'/                - strikethrough: boolean','line_number':141,'multiline':False]
['text':'/                - italic: boolean','line_number':142,'multiline':False]
['text':'/                - reverse: boolean','line_number':143,'multiline':False]
['text':'/                - nocombine: boolean','line_number':144,'multiline':False]
['text':'/                - link: name of another highlight group to link to, see |:hi-link|.','line_number':145,'multiline':False]
['text':'/                - default: Don't override existing definition |:hi-default|','line_number':146,'multiline':False]
['text':'/                - ctermfg: Sets foreground of cterm color |ctermfg|','line_number':147,'multiline':False]
['text':'/                - ctermbg: Sets background of cterm color |ctermbg|','line_number':148,'multiline':False]
['text':'/                - cterm: cterm attribute map, like |highlight-args|. If not set,','line_number':149,'multiline':False]
['text':'/                         cterm attributes will match those from the attribute map','line_number':150,'multiline':False]
['text':'/                         documented above.','line_number':151,'multiline':False]
['text':'/                - force: if true force update the highlight group when it exists.','line_number':152,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':153,'multiline':False]
['text':'/','line_number':154,'multiline':False]
['text':' TODO(bfredl): val should take update vs reset flag','line_number':155,'multiline':False]
['text':'/ Gets the active highlight namespace.','line_number':171,'multiline':False]
['text':'/','line_number':172,'multiline':False]
['text':'/ @param opts Optional parameters','line_number':173,'multiline':False]
['text':'/           - winid: (number) |window-ID| for retrieving a window's highlight','line_number':174,'multiline':False]
['text':'/             namespace. A value of -1 is returned when |nvim_win_set_hl_ns()|','line_number':175,'multiline':False]
['text':'/             has not been called for the window (or was called with a namespace','line_number':176,'multiline':False]
['text':'/             of -1).','line_number':177,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':178,'multiline':False]
['text':'/ @return Namespace id, or -1','line_number':179,'multiline':False]
['text':'/ Set active namespace for highlights defined with |nvim_set_hl()|. This can be set for','line_number':194,'multiline':False]
['text':'/ a single window, see |nvim_win_set_hl_ns()|.','line_number':195,'multiline':False]
['text':'/','line_number':196,'multiline':False]
['text':'/ @param ns_id the namespace to use','line_number':197,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':198,'multiline':False]
['text':'/ Set active namespace for highlights defined with |nvim_set_hl()| while redrawing.','line_number':211,'multiline':False]
['text':'/','line_number':212,'multiline':False]
['text':'/ This function meant to be called while redrawing, primarily from','line_number':213,'multiline':False]
['text':'/ |nvim_set_decoration_provider()| on_win and on_line callbacks, which','line_number':214,'multiline':False]
['text':'/ are allowed to change the namespace during a redraw cycle.','line_number':215,'multiline':False]
['text':'/','line_number':216,'multiline':False]
['text':'/ @param ns_id the namespace to activate','line_number':217,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':218,'multiline':False]
['text':'/ Sends input-keys to Nvim, subject to various quirks controlled by `mode`','line_number':227,'multiline':False]
['text':'/ flags. This is a blocking call, unlike |nvim_input()|.','line_number':228,'multiline':False]
['text':'/','line_number':229,'multiline':False]
['text':'/ On execution error: does not fail, but updates v:errmsg.','line_number':230,'multiline':False]
['text':'/','line_number':231,'multiline':False]
['text':'/ To input sequences like <C-o> use |nvim_replace_termcodes()| (typically','line_number':232,'multiline':False]
['text':'/ with escape_ks=false) to replace |keycodes|, then pass the result to','line_number':233,'multiline':False]
['text':'/ nvim_feedkeys().','line_number':234,'multiline':False]
['text':'/','line_number':235,'multiline':False]
['text':'/ Example:','line_number':236,'multiline':False]
['text':'/','line_number':237,'multiline':False]
['text':'/ ```vim','line_number':238,'multiline':False]
['text':'/ :let key = nvim_replace_termcodes("<C-o>", v:true, v:false, v:true)','line_number':239,'multiline':False]
['text':'/ :call nvim_feedkeys(key, 'n', v:false)','line_number':240,'multiline':False]
['text':'/ ```','line_number':241,'multiline':False]
['text':'/','line_number':242,'multiline':False]
['text':'/ @param keys         to be typed','line_number':243,'multiline':False]
['text':'/ @param mode         behavior flags, see |feedkeys()|','line_number':244,'multiline':False]
['text':'/ @param escape_ks    If true, escape K_SPECIAL bytes in `keys`.','line_number':245,'multiline':False]
['text':'/                     This should be false if you already used','line_number':246,'multiline':False]
['text':'/                     |nvim_replace_termcodes()|, and true otherwise.','line_number':247,'multiline':False]
['text':'/ @see feedkeys()','line_number':248,'multiline':False]
['text':'/ @see vim_strsave_escape_ks','line_number':249,'multiline':False]
['text':' Need to escape K_SPECIAL before putting the string in the','line_number':282,'multiline':False]
['text':' typeahead buffer.','line_number':283,'multiline':False]
['text':' Avoid a 1 second delay when the keys start Insert mode.','line_number':301,'multiline':False]
['text':'/ Queues raw user-input. Unlike |nvim_feedkeys()|, this uses a low-level','line_number':314,'multiline':False]
['text':'/ input buffer and the call is non-blocking (input is processed','line_number':315,'multiline':False]
['text':'/ asynchronously by the eventloop).','line_number':316,'multiline':False]
['text':'/','line_number':317,'multiline':False]
['text':'/ On execution error: does not fail, but updates v:errmsg.','line_number':318,'multiline':False]
['text':'/','line_number':319,'multiline':False]
['text':'/ @note |keycodes| like <CR> are translated, so "<" is special.','line_number':320,'multiline':False]
['text':'/       To input a literal "<", send <LT>.','line_number':321,'multiline':False]
['text':'/','line_number':322,'multiline':False]
['text':'/ @note For mouse events use |nvim_input_mouse()|. The pseudokey form','line_number':323,'multiline':False]
['text':'/       "<LeftMouse><col,row>" is deprecated since |api-level| 6.','line_number':324,'multiline':False]
['text':'/','line_number':325,'multiline':False]
['text':'/ @param keys to be typed','line_number':326,'multiline':False]
['text':'/ @return Number of bytes actually written (can be fewer than','line_number':327,'multiline':False]
['text':'/         requested if the buffer becomes full).','line_number':328,'multiline':False]
['text':'/ Send mouse event from GUI.','line_number':336,'multiline':False]
['text':'/','line_number':337,'multiline':False]
['text':'/ Non-blocking: does not wait on any result, but queues the event to be','line_number':338,'multiline':False]
['text':'/ processed soon by the event loop.','line_number':339,'multiline':False]
['text':'/','line_number':340,'multiline':False]
['text':'/ @note Currently this doesn't support "scripting" multiple mouse events','line_number':341,'multiline':False]
['text':'/       by calling it multiple times in a loop: the intermediate mouse','line_number':342,'multiline':False]
['text':'/       positions will be ignored. It should be used to implement real-time','line_number':343,'multiline':False]
['text':'/       mouse input in a GUI. The deprecated pseudokey form','line_number':344,'multiline':False]
['text':'/       ("<LeftMouse><col,row>") of |nvim_input()| has the same limitation.','line_number':345,'multiline':False]
['text':'/','line_number':346,'multiline':False]
['text':'/ @param button Mouse button: one of "left", "right", "middle", "wheel", "move".','line_number':347,'multiline':False]
['text':'/ @param action For ordinary buttons, one of "press", "drag", "release".','line_number':348,'multiline':False]
['text':'/               For the wheel, one of "up", "down", "left", "right". Ignored for "move".','line_number':349,'multiline':False]
['text':'/ @param modifier String of modifiers each represented by a single char.','line_number':350,'multiline':False]
['text':'/                 The same specifiers are used as for a key press, except','line_number':351,'multiline':False]
['text':'/                 that the "-" separator is optional, so "C-A-", "c-a"','line_number':352,'multiline':False]
['text':'/                 and "CA" can all be used to specify Ctrl+Alt+click.','line_number':353,'multiline':False]
['text':'/ @param grid Grid number if the client uses |ui-multigrid|, else 0.','line_number':354,'multiline':False]
['text':'/ @param row Mouse row-position (zero-based, like redraw events)','line_number':355,'multiline':False]
['text':'/ @param col Mouse column-position (zero-based, like redraw events)','line_number':356,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':357,'multiline':False]
['text':' code = KE_MOUSEDOWN','line_number':388,'multiline':False]
['text':' pass','line_number':398,'multiline':False]
['text':'/ Replaces terminal codes and |keycodes| (<CR>, <Esc>, ...) in a string with','line_number':429,'multiline':False]
['text':'/ the internal representation.','line_number':430,'multiline':False]
['text':'/','line_number':431,'multiline':False]
['text':'/ @param str        String to be converted.','line_number':432,'multiline':False]
['text':'/ @param from_part  Legacy Vim parameter. Usually true.','line_number':433,'multiline':False]
['text':'/ @param do_lt      Also translate <lt>. Ignored if `special` is false.','line_number':434,'multiline':False]
['text':'/ @param special    Replace |keycodes|, e.g. <CR> becomes a "\r" char.','line_number':435,'multiline':False]
['text':'/ @see replace_termcodes','line_number':436,'multiline':False]
['text':'/ @see cpoptions','line_number':437,'multiline':False]
['text':' Empty string','line_number':442,'multiline':False]
['text':'/ Execute Lua code. Parameters (if any) are available as `...` inside the','line_number':462,'multiline':False]
['text':'/ chunk. The chunk can return a value.','line_number':463,'multiline':False]
['text':'/','line_number':464,'multiline':False]
['text':'/ Only statements are executed. To evaluate an expression, prefix it','line_number':465,'multiline':False]
['text':'/ with `return`: return my_function(...)','line_number':466,'multiline':False]
['text':'/','line_number':467,'multiline':False]
['text':'/ @param code       Lua code to execute','line_number':468,'multiline':False]
['text':'/ @param args       Arguments to the code','line_number':469,'multiline':False]
['text':'/ @param[out] err   Details of an error encountered while parsing','line_number':470,'multiline':False]
['text':'/                   or executing the Lua code.','line_number':471,'multiline':False]
['text':'/','line_number':472,'multiline':False]
['text':'/ @return           Return value of Lua code if present or NIL.','line_number':473,'multiline':False]
['text':'/ Notify the user with a message','line_number':481,'multiline':False]
['text':'/','line_number':482,'multiline':False]
['text':'/ Relays the call to vim.notify . By default forwards your message in the','line_number':483,'multiline':False]
['text':'/ echo area but can be overridden to trigger desktop notifications.','line_number':484,'multiline':False]
['text':'/','line_number':485,'multiline':False]
['text':'/ @param msg        Message to display to the user','line_number':486,'multiline':False]
['text':'/ @param log_level  The log level','line_number':487,'multiline':False]
['text':'/ @param opts       Reserved for future use.','line_number':488,'multiline':False]
['text':'/ @param[out] err   Error details, if any','line_number':489,'multiline':False]
['text':'/ Calculates the number of display cells occupied by `text`.','line_number':501,'multiline':False]
['text':'/ Control characters including <Tab> count as one cell.','line_number':502,'multiline':False]
['text':'/','line_number':503,'multiline':False]
['text':'/ @param text       Some text','line_number':504,'multiline':False]
['text':'/ @param[out] err   Error details, if any','line_number':505,'multiline':False]
['text':'/ @return Number of cells','line_number':506,'multiline':False]
['text':'/ Gets the paths contained in |runtime-search-path|.','line_number':517,'multiline':False]
['text':'/','line_number':518,'multiline':False]
['text':'/ @return List of paths','line_number':519,'multiline':False]
['text':'/ Find files in runtime directories','line_number':531,'multiline':False]
['text':'/','line_number':532,'multiline':False]
['text':'/ "name" can contain wildcards. For example','line_number':533,'multiline':False]
['text':'/ nvim_get_runtime_file("colors/*.vim", true) will return all color','line_number':534,'multiline':False]
['text':'/ scheme files. Always use forward slashes (/) in the search pattern for','line_number':535,'multiline':False]
['text':'/ subdirectories regardless of platform.','line_number':536,'multiline':False]
['text':'/','line_number':537,'multiline':False]
['text':'/ It is not an error to not find any files. An empty array is returned then.','line_number':538,'multiline':False]
['text':'/','line_number':539,'multiline':False]
['text':'/ @param name pattern of files to search for','line_number':540,'multiline':False]
['text':'/ @param all whether to return all matches or only the first','line_number':541,'multiline':False]
['text':'/ @return list of absolute paths to the found files','line_number':542,'multiline':False]
['text':'/ Find files in runtime directories','line_number':575,'multiline':False]
['text':'/','line_number':576,'multiline':False]
['text':'/ @param pat pattern of files to search for','line_number':577,'multiline':False]
['text':'/ @param all whether to return all matches or only the first','line_number':578,'multiline':False]
['text':'/ @param opts is_lua: only search Lua subdirs','line_number':579,'multiline':False]
['text':'/ @return list of absolute paths to the found files','line_number':580,'multiline':False]
['text':'/ Changes the global working directory.','line_number':603,'multiline':False]
['text':'/','line_number':604,'multiline':False]
['text':'/ @param dir      Directory path','line_number':605,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':606,'multiline':False]
['text':'/ Gets the current line.','line_number':630,'multiline':False]
['text':'/','line_number':631,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':632,'multiline':False]
['text':'/ @return Current line string','line_number':633,'multiline':False]
['text':'/ Sets the current line.','line_number':640,'multiline':False]
['text':'/','line_number':641,'multiline':False]
['text':'/ @param line     Line contents','line_number':642,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':643,'multiline':False]
['text':'/ Deletes the current line.','line_number':651,'multiline':False]
['text':'/','line_number':652,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':653,'multiline':False]
['text':'/ Gets a global (g:) variable.','line_number':661,'multiline':False]
['text':'/','line_number':662,'multiline':False]
['text':'/ @param name     Variable name','line_number':663,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':664,'multiline':False]
['text':'/ @return Variable value','line_number':665,'multiline':False]
['text':' try to autoload script','line_number':670,'multiline':False]
['text':'/ Sets a global (g:) variable.','line_number':683,'multiline':False]
['text':'/','line_number':684,'multiline':False]
['text':'/ @param name     Variable name','line_number':685,'multiline':False]
['text':'/ @param value    Variable value','line_number':686,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':687,'multiline':False]
['text':'/ Removes a global (g:) variable.','line_number':694,'multiline':False]
['text':'/','line_number':695,'multiline':False]
['text':'/ @param name     Variable name','line_number':696,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':697,'multiline':False]
['text':'/ Gets a v: variable.','line_number':704,'multiline':False]
['text':'/','line_number':705,'multiline':False]
['text':'/ @param name     Variable name','line_number':706,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':707,'multiline':False]
['text':'/ @return         Variable value','line_number':708,'multiline':False]
['text':'/ Sets a v: variable, if it is not readonly.','line_number':715,'multiline':False]
['text':'/','line_number':716,'multiline':False]
['text':'/ @param name     Variable name','line_number':717,'multiline':False]
['text':'/ @param value    Variable value','line_number':718,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':719,'multiline':False]
['text':'/ Echo a message.','line_number':726,'multiline':False]
['text':'/','line_number':727,'multiline':False]
['text':'/ @param chunks  A list of [text, hl_group] arrays, each representing a','line_number':728,'multiline':False]
['text':'/                text chunk with specified highlight. `hl_group` element','line_number':729,'multiline':False]
['text':'/                can be omitted for no highlight.','line_number':730,'multiline':False]
['text':'/ @param history  if true, add to |message-history|.','line_number':731,'multiline':False]
['text':'/ @param opts  Optional parameters.','line_number':732,'multiline':False]
['text':'/          - verbose: Message was printed as a result of 'verbose' option','line_number':733,'multiline':False]
['text':'/            if Nvim was invoked with -V3log_file, the message will be','line_number':734,'multiline':False]
['text':'/            redirected to the log_file and suppressed from direct output.','line_number':735,'multiline':False]
['text':' flush now','line_number':752,'multiline':False]
['text':' history takes ownership','line_number':756,'multiline':False]
['text':'/ Writes a message to the Vim output buffer. Does not append "\n", the','line_number':764,'multiline':False]
['text':'/ message is buffered (won't display) until a linefeed is written.','line_number':765,'multiline':False]
['text':'/','line_number':766,'multiline':False]
['text':'/ @param str Message','line_number':767,'multiline':False]
['text':'/ Writes a message to the Vim error buffer. Does not append "\n", the','line_number':774,'multiline':False]
['text':'/ message is buffered (won't display) until a linefeed is written.','line_number':775,'multiline':False]
['text':'/','line_number':776,'multiline':False]
['text':'/ @param str Message','line_number':777,'multiline':False]
['text':'/ Writes a message to the Vim error buffer. Appends "\n", so the buffer is','line_number':784,'multiline':False]
['text':'/ flushed (and displayed).','line_number':785,'multiline':False]
['text':'/','line_number':786,'multiline':False]
['text':'/ @param str Message','line_number':787,'multiline':False]
['text':'/ @see nvim_err_write()','line_number':788,'multiline':False]
['text':'/ Gets the current list of buffer handles','line_number':795,'multiline':False]
['text':'/','line_number':796,'multiline':False]
['text':'/ Includes unlisted (unloaded/deleted) buffers, like `:ls!`.','line_number':797,'multiline':False]
['text':'/ Use |nvim_buf_is_loaded()| to check if a buffer is loaded.','line_number':798,'multiline':False]
['text':'/','line_number':799,'multiline':False]
['text':'/ @return List of buffer handles','line_number':800,'multiline':False]
['text':'/ Gets the current buffer.','line_number':820,'multiline':False]
['text':'/','line_number':821,'multiline':False]
['text':'/ @return Buffer handle','line_number':822,'multiline':False]
['text':'/ Sets the current buffer.','line_number':829,'multiline':False]
['text':'/','line_number':830,'multiline':False]
['text':'/ @param buffer   Buffer handle','line_number':831,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':832,'multiline':False]
['text':'/ Gets the current list of window handles.','line_number':853,'multiline':False]
['text':'/','line_number':854,'multiline':False]
['text':'/ @return List of window handles','line_number':855,'multiline':False]
['text':'/ Gets the current window.','line_number':875,'multiline':False]
['text':'/','line_number':876,'multiline':False]
['text':'/ @return Window handle','line_number':877,'multiline':False]
['text':'/ Sets the current window.','line_number':884,'multiline':False]
['text':'/','line_number':885,'multiline':False]
['text':'/ @param window Window handle','line_number':886,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':887,'multiline':False]
['text':'/ Creates a new, empty, unnamed buffer.','line_number':908,'multiline':False]
['text':'/','line_number':909,'multiline':False]
['text':'/ @param listed Sets 'buflisted'','line_number':910,'multiline':False]
['text':'/ @param scratch Creates a "throwaway" |scratch-buffer| for temporary work','line_number':911,'multiline':False]
['text':'/                (always 'nomodified'). Also sets 'nomodeline' on the buffer.','line_number':912,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':913,'multiline':False]
['text':'/ @return Buffer handle, or 0 on error','line_number':914,'multiline':False]
['text':'/','line_number':915,'multiline':False]
['text':'/ @see buf_open_scratch','line_number':916,'multiline':False]
['text':' Open the memline for the buffer. This will avoid spurious autocmds when','line_number':928,'multiline':False]
['text':' a later nvim_buf_set_lines call would have needed to "open" the buffer.','line_number':929,'multiline':False]
['text':' Set last_changedtick to avoid triggering a TextChanged autocommand right','line_number':939,'multiline':False]
['text':' after it was added.','line_number':940,'multiline':False]
['text':' Only strictly needed for scratch, but could just as well be consistent','line_number':945,'multiline':False]
['text':' and do this now. buffer is created NOW, not when it latter first happen','line_number':946,'multiline':False]
['text':' to reach a window or aucmd_prepbuf() ..','line_number':947,'multiline':False]
['text':' ml_open() should not have opened swapfile already','line_number':953,'multiline':False]
['text':'/ Open a terminal instance in a buffer','line_number':966,'multiline':False]
['text':'/','line_number':967,'multiline':False]
['text':'/ By default (and currently the only option) the terminal will not be','line_number':968,'multiline':False]
['text':'/ connected to an external process. Instead, input send on the channel','line_number':969,'multiline':False]
['text':'/ will be echoed directly by the terminal. This is useful to display','line_number':970,'multiline':False]
['text':'/ ANSI terminal sequences returned as part of a rpc message, or similar.','line_number':971,'multiline':False]
['text':'/','line_number':972,'multiline':False]
['text':'/ Note: to directly initiate the terminal using the right size, display the','line_number':973,'multiline':False]
['text':'/ buffer in a configured window before calling this. For instance, for a','line_number':974,'multiline':False]
['text':'/ floating display, first create an empty buffer using |nvim_create_buf()|,','line_number':975,'multiline':False]
['text':'/ then display it using |nvim_open_win()|, and then  call this function.','line_number':976,'multiline':False]
['text':'/ Then |nvim_chan_send()| can be called immediately to process sequences','line_number':977,'multiline':False]
['text':'/ in a virtual terminal having the intended size.','line_number':978,'multiline':False]
['text':'/','line_number':979,'multiline':False]
['text':'/ @param buffer the buffer to use (expected to be empty)','line_number':980,'multiline':False]
['text':'/ @param opts   Optional parameters.','line_number':981,'multiline':False]
['text':'/          - on_input: Lua callback for input sent, i e keypresses in terminal','line_number':982,'multiline':False]
['text':'/            mode. Note: keypresses are sent raw as they would be to the pty','line_number':983,'multiline':False]
['text':'/            master end. For instance, a carriage return is sent','line_number':984,'multiline':False]
['text':'/            as a "\r", not as a "\n". |textlock| applies. It is possible','line_number':985,'multiline':False]
['text':'/            to call |nvim_chan_send()| directly in the callback however.','line_number':986,'multiline':False]
['text':'/                 ["input", term, bufnr, data]','line_number':987,'multiline':False]
['text':'/          - force_crlf: (boolean, default true) Convert "\n" to "\r\n".','line_number':988,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':989,'multiline':False]
['text':'/ @return Channel id, or 0 on error','line_number':990,'multiline':False]
['text':' NB: overridden in terminal_check_size if a window is already','line_number':1016,'multiline':False]
['text':' displaying the buffer','line_number':1017,'multiline':False]
['text':' TODO(bfredl): Lua callback','line_number':1052,'multiline':False]
['text':'/ Send data to channel `id`. For a job, it writes it to the','line_number':1064,'multiline':False]
['text':'/ stdin of the process. For the stdio channel |channel-stdio|,','line_number':1065,'multiline':False]
['text':'/ it writes to Nvim's stdout.  For an internal terminal instance','line_number':1066,'multiline':False]
['text':'/ (|nvim_open_term()|) it writes directly to terminal output.','line_number':1067,'multiline':False]
['text':'/ See |channel-bytes| for more information.','line_number':1068,'multiline':False]
['text':'/','line_number':1069,'multiline':False]
['text':'/ This function writes raw data, not RPC messages.  If the channel','line_number':1070,'multiline':False]
['text':'/ was created with `rpc=true` then the channel expects RPC','line_number':1071,'multiline':False]
['text':'/ messages, use |vim.rpcnotify()| and |vim.rpcrequest()| instead.','line_number':1072,'multiline':False]
['text':'/','line_number':1073,'multiline':False]
['text':'/ @param chan id of the channel','line_number':1074,'multiline':False]
['text':'/ @param data data to write. 8-bit clean: can contain NUL bytes.','line_number':1075,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':1076,'multiline':False]
['text':'/ Gets the current list of tabpage handles.','line_number':1090,'multiline':False]
['text':'/','line_number':1091,'multiline':False]
['text':'/ @return List of tabpage handles','line_number':1092,'multiline':False]
['text':'/ Gets the current tabpage.','line_number':1112,'multiline':False]
['text':'/','line_number':1113,'multiline':False]
['text':'/ @return Tabpage handle','line_number':1114,'multiline':False]
['text':'/ Sets the current tabpage.','line_number':1121,'multiline':False]
['text':'/','line_number':1122,'multiline':False]
['text':'/ @param tabpage  Tabpage handle','line_number':1123,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':1124,'multiline':False]
['text':'/ Pastes at cursor, in any mode.','line_number':1145,'multiline':False]
['text':'/','line_number':1146,'multiline':False]
['text':'/ Invokes the `vim.paste` handler, which handles each mode appropriately.','line_number':1147,'multiline':False]
['text':'/ Sets redo/undo. Faster than |nvim_input()|. Lines break at LF ("\n").','line_number':1148,'multiline':False]
['text':'/','line_number':1149,'multiline':False]
['text':'/ Errors ('nomodifiable', `vim.paste()` failure, …) are reflected in `err`','line_number':1150,'multiline':False]
['text':'/ but do not affect the return value (which is strictly decided by','line_number':1151,'multiline':False]
['text':'/ `vim.paste()`).  On error, subsequent calls are ignored ("drained") until','line_number':1152,'multiline':False]
['text':'/ the next paste is initiated (phase 1 or -1).','line_number':1153,'multiline':False]
['text':'/','line_number':1154,'multiline':False]
['text':'/ @param data  Multiline input. May be binary (containing NUL bytes).','line_number':1155,'multiline':False]
['text':'/ @param crlf  Also break lines at CR and CRLF.','line_number':1156,'multiline':False]
['text':'/ @param phase  -1: paste in a single call (i.e. without streaming).','line_number':1157,'multiline':False]
['text':'/               To "stream" a paste, call `nvim_paste` sequentially with','line_number':1158,'multiline':False]
['text':'/               these `phase` values:','line_number':1159,'multiline':False]
['text':'/                 - 1: starts the paste (exactly once)','line_number':1160,'multiline':False]
['text':'/                 - 2: continues the paste (zero or more times)','line_number':1161,'multiline':False]
['text':'/                 - 3: ends the paste (exactly once)','line_number':1162,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':1163,'multiline':False]
['text':'/ @return','line_number':1164,'multiline':False]
['text':'/     - true: Client may continue pasting.','line_number':1165,'multiline':False]
['text':'/     - false: Client must cancel the paste.','line_number':1166,'multiline':False]
['text':' Start of paste-stream.','line_number':1179,'multiline':False]
['text':' Skip remaining chunks.  Report error only once per "stream".','line_number':1182,'multiline':False]
['text':' Dot-repeat.','line_number':1196,'multiline':False]
['text':' vim.paste() decides if client should cancel.  Errors do NOT cancel: we','line_number':1198,'multiline':False]
['text':' want to drain remaining chunks (rather than divert them to main input).','line_number':1199,'multiline':False]
['text':' Dot-repeat.','line_number':1201,'multiline':False]
['text':' readfile()-style: "\n" is indicated by presence of N+1 item.','line_number':1206,'multiline':False]
['text':' Dot-repeat.','line_number':1213,'multiline':False]
['text':' End of paste-stream.','line_number':1218,'multiline':False]
['text':'/ Puts text at cursor, in any mode.','line_number':1225,'multiline':False]
['text':'/','line_number':1226,'multiline':False]
['text':'/ Compare |:put| and |p| which are always linewise.','line_number':1227,'multiline':False]
['text':'/','line_number':1228,'multiline':False]
['text':'/ @param lines  |readfile()|-style list of lines. |channel-lines|','line_number':1229,'multiline':False]
['text':'/ @param type  Edit behavior: any |getregtype()| result, or:','line_number':1230,'multiline':False]
['text':'/              - "b" |blockwise-visual| mode (may include width, e.g. "b3")','line_number':1231,'multiline':False]
['text':'/              - "c" |charwise| mode','line_number':1232,'multiline':False]
['text':'/              - "l" |linewise| mode','line_number':1233,'multiline':False]
['text':'/              - ""  guess by contents, see |setreg()|','line_number':1234,'multiline':False]
['text':'/ @param after  If true insert after cursor (like |p|), or before (like |P|).','line_number':1235,'multiline':False]
['text':'/ @param follow  If true place cursor at end of inserted text.','line_number':1236,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':1237,'multiline':False]
['text':' Nothing to do.','line_number':1247,'multiline':False]
['text':' Avoid "N more lines" message.','line_number':1263,'multiline':False]
['text':'/ Subscribes to event broadcasts.','line_number':1274,'multiline':False]
['text':'/','line_number':1275,'multiline':False]
['text':'/ @param channel_id Channel id (passed automatically by the dispatcher)','line_number':1276,'multiline':False]
['text':'/ @param event      Event type string','line_number':1277,'multiline':False]
['text':'/ Unsubscribes to event broadcasts.','line_number':1288,'multiline':False]
['text':'/','line_number':1289,'multiline':False]
['text':'/ @param channel_id Channel id (passed automatically by the dispatcher)','line_number':1290,'multiline':False]
['text':'/ @param event      Event type string','line_number':1291,'multiline':False]
['text':'/ Returns the 24-bit RGB value of a |nvim_get_color_map()| color name or','line_number':1304,'multiline':False]
['text':'/ "#rrggbb" hexadecimal string.','line_number':1305,'multiline':False]
['text':'/','line_number':1306,'multiline':False]
['text':'/ Example:','line_number':1307,'multiline':False]
['text':'/','line_number':1308,'multiline':False]
['text':'/ ```vim','line_number':1309,'multiline':False]
['text':'/ :echo nvim_get_color_by_name("Pink")','line_number':1310,'multiline':False]
['text':'/ :echo nvim_get_color_by_name("#cbcbcb")','line_number':1311,'multiline':False]
['text':'/ ```','line_number':1312,'multiline':False]
['text':'/','line_number':1313,'multiline':False]
['text':'/ @param name Color name or "#rrggbb" string','line_number':1314,'multiline':False]
['text':'/ @return 24-bit RGB value, or -1 for invalid argument.','line_number':1315,'multiline':False]
['text':'/ Returns a map of color names and RGB values.','line_number':1323,'multiline':False]
['text':'/','line_number':1324,'multiline':False]
['text':'/ Keys are color names (e.g. "Aqua") and values are 24-bit RGB color values','line_number':1325,'multiline':False]
['text':'/ (e.g. 65535).','line_number':1326,'multiline':False]
['text':'/','line_number':1327,'multiline':False]
['text':'/ @return Map of color names and RGB values.','line_number':1328,'multiline':False]
['text':'/ Gets a map of the current editor state.','line_number':1341,'multiline':False]
['text':'/','line_number':1342,'multiline':False]
['text':'/ @param opts  Optional parameters.','line_number':1343,'multiline':False]
['text':'/               - types:  List of |context-types| ("regs", "jumps", "bufs",','line_number':1344,'multiline':False]
['text':'/                 "gvars", …) to gather, or empty for "all".','line_number':1345,'multiline':False]
['text':'/ @param[out]  err  Error details, if any','line_number':1346,'multiline':False]
['text':'/','line_number':1347,'multiline':False]
['text':'/ @return map of global |context|.','line_number':1348,'multiline':False]
['text':'/ Sets the current editor state from the given |context| map.','line_number':1390,'multiline':False]
['text':'/','line_number':1391,'multiline':False]
['text':'/ @param  dict  |Context| map.','line_number':1392,'multiline':False]
['text':'/ Gets the current mode. |mode()|','line_number':1412,'multiline':False]
['text':'/ "blocking" is true if Nvim is waiting for input.','line_number':1413,'multiline':False]
['text':'/','line_number':1414,'multiline':False]
['text':'/ @returns Dictionary { "mode": String, "blocking": Boolean }','line_number':1415,'multiline':False]
['text':'/ Gets a list of global (non-buffer-local) |mapping| definitions.','line_number':1430,'multiline':False]
['text':'/','line_number':1431,'multiline':False]
['text':'/ @param  mode       Mode short-name ("n", "i", "v", ...)','line_number':1432,'multiline':False]
['text':'/ @returns Array of |maparg()|-like dictionaries describing mappings.','line_number':1433,'multiline':False]
['text':'/          The "buffer" key is always zero.','line_number':1434,'multiline':False]
['text':'/ Sets a global |mapping| for the given mode.','line_number':1441,'multiline':False]
['text':'/','line_number':1442,'multiline':False]
['text':'/ To set a buffer-local mapping, use |nvim_buf_set_keymap()|.','line_number':1443,'multiline':False]
['text':'/','line_number':1444,'multiline':False]
['text':'/ Unlike |:map|, leading/trailing whitespace is accepted as part of the {lhs} or {rhs}.','line_number':1445,'multiline':False]
['text':'/ Empty {rhs} is |<Nop>|. |keycodes| are replaced as usual.','line_number':1446,'multiline':False]
['text':'/','line_number':1447,'multiline':False]
['text':'/ Example:','line_number':1448,'multiline':False]
['text':'/','line_number':1449,'multiline':False]
['text':'/ ```vim','line_number':1450,'multiline':False]
['text':'/ call nvim_set_keymap('n', ' <NL>', '', {'nowait': v:true})','line_number':1451,'multiline':False]
['text':'/ ```','line_number':1452,'multiline':False]
['text':'/','line_number':1453,'multiline':False]
['text':'/ is equivalent to:','line_number':1454,'multiline':False]
['text':'/','line_number':1455,'multiline':False]
['text':'/ ```vim','line_number':1456,'multiline':False]
['text':'/ nmap <nowait> <Space><NL> <Nop>','line_number':1457,'multiline':False]
['text':'/ ```','line_number':1458,'multiline':False]
['text':'/','line_number':1459,'multiline':False]
['text':'/ @param channel_id','line_number':1460,'multiline':False]
['text':'/ @param  mode  Mode short-name (map command prefix: "n", "i", "v", "x", …)','line_number':1461,'multiline':False]
['text':'/               or "!" for |:map!|, or empty string for |:map|.','line_number':1462,'multiline':False]
['text':'/               "ia", "ca" or "!a" for abbreviation in Insert mode, Cmdline mode, or both, respectively','line_number':1463,'multiline':False]
['text':'/ @param  lhs   Left-hand-side |{lhs}| of the mapping.','line_number':1464,'multiline':False]
['text':'/ @param  rhs   Right-hand-side |{rhs}| of the mapping.','line_number':1465,'multiline':False]
['text':'/ @param  opts  Optional parameters map: Accepts all |:map-arguments| as keys except |<buffer>|,','line_number':1466,'multiline':False]
['text':'/               values are booleans (default false). Also:','line_number':1467,'multiline':False]
['text':'/               - "noremap" disables |recursive_mapping|, like |:noremap|','line_number':1468,'multiline':False]
['text':'/               - "desc" human-readable description.','line_number':1469,'multiline':False]
['text':'/               - "callback" Lua function called in place of {rhs}.','line_number':1470,'multiline':False]
['text':'/               - "replace_keycodes" (boolean) When "expr" is true, replace keycodes in the','line_number':1471,'multiline':False]
['text':'/                 resulting string (see |nvim_replace_termcodes()|). Returning nil from the Lua','line_number':1472,'multiline':False]
['text':'/                 "callback" is equivalent to returning an empty string.','line_number':1473,'multiline':False]
['text':'/ @param[out]   err   Error details, if any.','line_number':1474,'multiline':False]
['text':'/ Unmaps a global |mapping| for the given mode.','line_number':1482,'multiline':False]
['text':'/','line_number':1483,'multiline':False]
['text':'/ To unmap a buffer-local mapping, use |nvim_buf_del_keymap()|.','line_number':1484,'multiline':False]
['text':'/','line_number':1485,'multiline':False]
['text':'/ @see |nvim_set_keymap()|','line_number':1486,'multiline':False]
['text':'/ Returns a 2-tuple (Array), where item 0 is the current channel id and item','line_number':1493,'multiline':False]
['text':'/ 1 is the |api-metadata| map (Dictionary).','line_number':1494,'multiline':False]
['text':'/','line_number':1495,'multiline':False]
['text':'/ @returns 2-tuple [{channel-id}, {api-metadata}]','line_number':1496,'multiline':False]
['text':'/ Self-identifies the client.','line_number':1509,'multiline':False]
['text':'/','line_number':1510,'multiline':False]
['text':'/ The client/plugin/application should call this after connecting, to provide','line_number':1511,'multiline':False]
['text':'/ hints about its identity and purpose, for debugging and orchestration.','line_number':1512,'multiline':False]
['text':'/','line_number':1513,'multiline':False]
['text':'/ Can be called more than once; the caller should merge old info if','line_number':1514,'multiline':False]
['text':'/ appropriate. Example: library first identifies the channel, then a plugin','line_number':1515,'multiline':False]
['text':'/ using that library later identifies itself.','line_number':1516,'multiline':False]
['text':'/','line_number':1517,'multiline':False]
['text':'/ @note "Something is better than nothing". You don't need to include all the','line_number':1518,'multiline':False]
['text':'/       fields.','line_number':1519,'multiline':False]
['text':'/','line_number':1520,'multiline':False]
['text':'/ @param channel_id','line_number':1521,'multiline':False]
['text':'/ @param name Short name for the connected client','line_number':1522,'multiline':False]
['text':'/ @param version  Dictionary describing the version, with these','line_number':1523,'multiline':False]
['text':'/                 (optional) keys:','line_number':1524,'multiline':False]
['text':'/     - "major" major version (defaults to 0 if not set, for no release yet)','line_number':1525,'multiline':False]
['text':'/     - "minor" minor version','line_number':1526,'multiline':False]
['text':'/     - "patch" patch number','line_number':1527,'multiline':False]
['text':'/     - "prerelease" string describing a prerelease, like "dev" or "beta1"','line_number':1528,'multiline':False]
['text':'/     - "commit" hash or similar identifier of commit','line_number':1529,'multiline':False]
['text':'/ @param type Must be one of the following values. Client libraries should','line_number':1530,'multiline':False]
['text':'/             default to "remote" unless overridden by the user.','line_number':1531,'multiline':False]
['text':'/     - "remote" remote client connected "Nvim flavored" MessagePack-RPC (responses','line_number':1532,'multiline':False]
['text':'/                must be in reverse order of requests). |msgpack-rpc|','line_number':1533,'multiline':False]
['text':'/     - "msgpack-rpc" remote client connected to Nvim via fully MessagePack-RPC','line_number':1534,'multiline':False]
['text':'/                     compliant protocol.','line_number':1535,'multiline':False]
['text':'/     - "ui" gui frontend','line_number':1536,'multiline':False]
['text':'/     - "embedder" application using Nvim as a component (for example,','line_number':1537,'multiline':False]
['text':'/                  IDE/editor implementing a vim mode).','line_number':1538,'multiline':False]
['text':'/     - "host" plugin host, typically started by nvim','line_number':1539,'multiline':False]
['text':'/     - "plugin" single plugin, started by nvim','line_number':1540,'multiline':False]
['text':'/ @param methods Builtin methods in the client. For a host, this does not','line_number':1541,'multiline':False]
['text':'/                include plugin methods which will be discovered later.','line_number':1542,'multiline':False]
['text':'/                The key should be the method name, the values are dicts with','line_number':1543,'multiline':False]
['text':'/                these (optional) keys (more keys may be added in future','line_number':1544,'multiline':False]
['text':'/                versions of Nvim, thus unknown keys are ignored. Clients','line_number':1545,'multiline':False]
['text':'/                must only use keys defined in this or later versions of','line_number':1546,'multiline':False]
['text':'/                Nvim):','line_number':1547,'multiline':False]
['text':'/     - "async"  if true, send as a notification. If false or unspecified,','line_number':1548,'multiline':False]
['text':'/                use a blocking request','line_number':1549,'multiline':False]
['text':'/     - "nargs" Number of arguments. Could be a single integer or an array','line_number':1550,'multiline':False]
['text':'/                of two integers, minimum and maximum inclusive.','line_number':1551,'multiline':False]
['text':'/','line_number':1552,'multiline':False]
['text':'/ @param attributes Arbitrary string:string map of informal client properties.','line_number':1553,'multiline':False]
['text':'/     Suggested keys:','line_number':1554,'multiline':False]
['text':'/     - "website": Client homepage URL (e.g. GitHub repository)','line_number':1555,'multiline':False]
['text':'/     - "license": License description ("Apache 2", "GPLv3", "MIT", …)','line_number':1556,'multiline':False]
['text':'/     - "logo":    URI or path to image, preferably small logo or icon.','line_number':1557,'multiline':False]
['text':'/                  .png or .svg format is preferred.','line_number':1558,'multiline':False]
['text':'/','line_number':1559,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':1560,'multiline':False]
['text':'/ Gets information about a channel.','line_number':1588,'multiline':False]
['text':'/','line_number':1589,'multiline':False]
['text':'/ @returns Dictionary describing a channel, with these keys:','line_number':1590,'multiline':False]
['text':'/    - "id"       Channel id.','line_number':1591,'multiline':False]
['text':'/    - "argv"     (optional) Job arguments list.','line_number':1592,'multiline':False]
['text':'/    - "stream"   Stream underlying the channel.','line_number':1593,'multiline':False]
['text':'/         - "stdio"      stdin and stdout of this Nvim instance','line_number':1594,'multiline':False]
['text':'/         - "stderr"     stderr of this Nvim instance','line_number':1595,'multiline':False]
['text':'/         - "socket"     TCP/IP socket or named pipe','line_number':1596,'multiline':False]
['text':'/         - "job"        Job with communication over its stdio.','line_number':1597,'multiline':False]
['text':'/    -  "mode"    How data received on the channel is interpreted.','line_number':1598,'multiline':False]
['text':'/         - "bytes"      Send and receive raw bytes.','line_number':1599,'multiline':False]
['text':'/         - "terminal"   |terminal| instance interprets ASCII sequences.','line_number':1600,'multiline':False]
['text':'/         - "rpc"        |RPC| communication on the channel is active.','line_number':1601,'multiline':False]
['text':'/    -  "pty"     (optional) Name of pseudoterminal. On a POSIX system this','line_number':1602,'multiline':False]
['text':'/                 is a device path like "/dev/pts/1". If the name is unknown,','line_number':1603,'multiline':False]
['text':'/                 the key will still be present if a pty is used (e.g. for','line_number':1604,'multiline':False]
['text':'/                 conpty on Windows).','line_number':1605,'multiline':False]
['text':'/    -  "buffer"  (optional) Buffer with connected |terminal| instance.','line_number':1606,'multiline':False]
['text':'/    -  "client"  (optional) Info about the peer (client on the other end of','line_number':1607,'multiline':False]
['text':'/                 the RPC channel), if provided by it via','line_number':1608,'multiline':False]
['text':'/                 |nvim_set_client_info()|.','line_number':1609,'multiline':False]
['text':'/','line_number':1610,'multiline':False]
['text':'/ Get information about all open channels.','line_number':1620,'multiline':False]
['text':'/','line_number':1621,'multiline':False]
['text':'/ @returns Array of Dictionaries, each describing a channel with','line_number':1622,'multiline':False]
['text':'/          the format specified at |nvim_get_chan_info()|.','line_number':1623,'multiline':False]
['text':'/ Calls many API methods atomically.','line_number':1630,'multiline':False]
['text':'/','line_number':1631,'multiline':False]
['text':'/ This has two main usages:','line_number':1632,'multiline':False]
['text':'/ 1. To perform several requests from an async context atomically, i.e.','line_number':1633,'multiline':False]
['text':'/    without interleaving redraws, RPC requests from other clients, or user','line_number':1634,'multiline':False]
['text':'/    interactions (however API methods may trigger autocommands or event','line_number':1635,'multiline':False]
['text':'/    processing which have such side effects, e.g. |:sleep| may wake timers).','line_number':1636,'multiline':False]
['text':'/ 2. To minimize RPC overhead (roundtrips) of a sequence of many requests.','line_number':1637,'multiline':False]
['text':'/','line_number':1638,'multiline':False]
['text':'/ @param channel_id','line_number':1639,'multiline':False]
['text':'/ @param calls an array of calls, where each call is described by an array','line_number':1640,'multiline':False]
['text':'/              with two elements: the request name, and an array of arguments.','line_number':1641,'multiline':False]
['text':'/ @param[out] err Validation error details (malformed `calls` parameter),','line_number':1642,'multiline':False]
['text':'/             if any. Errors from batched calls are given in the return value.','line_number':1643,'multiline':False]
['text':'/','line_number':1644,'multiline':False]
['text':'/ @return Array of two elements. The first is an array of return','line_number':1645,'multiline':False]
['text':'/ values. The second is NIL if all calls succeeded. If a call resulted in','line_number':1646,'multiline':False]
['text':'/ an error, it is a three-element array with the zero-based index of the call','line_number':1647,'multiline':False]
['text':'/ which resulted in an error, the error type and the error message. If an','line_number':1648,'multiline':False]
['text':'/ error occurred, the values from all preceding calls will still be returned.','line_number':1649,'multiline':False]
['text':' also used for freeing the variables','line_number':1657,'multiline':False]
['text':' error handled after loop','line_number':1686,'multiline':False]
['text':' TODO(bfredl): wasteful copy. It could be avoided to encoding to msgpack','line_number':1689,'multiline':False]
['text':' directly here. But `result` might become invalid when next api function','line_number':1690,'multiline':False]
['text':' is called in the loop.','line_number':1691,'multiline':False]
['text':'/ Writes a message to vim output or error buffer. The string is split','line_number':1714,'multiline':False]
['text':'/ and flushed after each newline. Incomplete lines are kept for writing','line_number':1715,'multiline':False]
['text':'/ later.','line_number':1716,'multiline':False]
['text':'/','line_number':1717,'multiline':False]
['text':'/ @param message  Message to write','line_number':1718,'multiline':False]
['text':'/ @param to_err   true: message is an error (uses `emsg` instead of `msg`)','line_number':1719,'multiline':False]
['text':'/ @param writeln  Append a trailing newline','line_number':1720,'multiline':False]
['text':' Functions used for testing purposes','line_number':1763,'multiline':False]
['text':'/ Returns object given as argument.','line_number':1765,'multiline':False]
['text':'/','line_number':1766,'multiline':False]
['text':'/ This API function is used for testing. One should not rely on its presence','line_number':1767,'multiline':False]
['text':'/ in plugins.','line_number':1768,'multiline':False]
['text':'/','line_number':1769,'multiline':False]
['text':'/ @param[in]  obj  Object to return.','line_number':1770,'multiline':False]
['text':'/','line_number':1771,'multiline':False]
['text':'/ @return its argument.','line_number':1772,'multiline':False]
['text':'/ Returns array given as argument.','line_number':1778,'multiline':False]
['text':'/','line_number':1779,'multiline':False]
['text':'/ This API function is used for testing. One should not rely on its presence','line_number':1780,'multiline':False]
['text':'/ in plugins.','line_number':1781,'multiline':False]
['text':'/','line_number':1782,'multiline':False]
['text':'/ @param[in]  arr  Array to return.','line_number':1783,'multiline':False]
['text':'/','line_number':1784,'multiline':False]
['text':'/ @return its argument.','line_number':1785,'multiline':False]
['text':'/ Returns dictionary given as argument.','line_number':1791,'multiline':False]
['text':'/','line_number':1792,'multiline':False]
['text':'/ This API function is used for testing. One should not rely on its presence','line_number':1793,'multiline':False]
['text':'/ in plugins.','line_number':1794,'multiline':False]
['text':'/','line_number':1795,'multiline':False]
['text':'/ @param[in]  dct  Dictionary to return.','line_number':1796,'multiline':False]
['text':'/','line_number':1797,'multiline':False]
['text':'/ @return its argument.','line_number':1798,'multiline':False]
['text':'/ Returns floating-point value given as argument.','line_number':1804,'multiline':False]
['text':'/','line_number':1805,'multiline':False]
['text':'/ This API function is used for testing. One should not rely on its presence','line_number':1806,'multiline':False]
['text':'/ in plugins.','line_number':1807,'multiline':False]
['text':'/','line_number':1808,'multiline':False]
['text':'/ @param[in]  flt  Value to return.','line_number':1809,'multiline':False]
['text':'/','line_number':1810,'multiline':False]
['text':'/ @return its argument.','line_number':1811,'multiline':False]
['text':'/ Gets internal stats.','line_number':1817,'multiline':False]
['text':'/','line_number':1818,'multiline':False]
['text':'/ @return Map of various internal stats.','line_number':1819,'multiline':False]
['text':'/ Gets a list of dictionaries representing attached UIs.','line_number':1831,'multiline':False]
['text':'/','line_number':1832,'multiline':False]
['text':'/ @return Array of UI dictionaries, each with these keys:','line_number':1833,'multiline':False]
['text':'/   - "height"  Requested height of the UI','line_number':1834,'multiline':False]
['text':'/   - "width"   Requested width of the UI','line_number':1835,'multiline':False]
['text':'/   - "rgb"     true if the UI uses RGB colors (false implies |cterm-colors|)','line_number':1836,'multiline':False]
['text':'/   - "ext_..." Requested UI extensions, see |ui-option|','line_number':1837,'multiline':False]
['text':'/   - "chan"    |channel-id| of remote UI','line_number':1838,'multiline':False]
['text':'/ Gets the immediate children of process `pid`.','line_number':1845,'multiline':False]
['text':'/','line_number':1846,'multiline':False]
['text':'/ @return Array of child process ids, empty if process not found.','line_number':1847,'multiline':False]
['text':' syscall failed (possibly because of kernel options), try shelling out.','line_number':1861,'multiline':False]
['text':'/ Gets info describing process `pid`.','line_number':1885,'multiline':False]
['text':'/','line_number':1886,'multiline':False]
['text':'/ @return Map of process properties, or NIL if process not found.','line_number':1887,'multiline':False]
['text':' Process not found.','line_number':1901,'multiline':False]
['text':' Cross-platform process info APIs are miserable, so use `ps` instead.','line_number':1905,'multiline':False]
['text':' Process not found.','line_number':1910,'multiline':False]
['text':'/ Selects an item in the completion popup menu.','line_number':1921,'multiline':False]
['text':'/','line_number':1922,'multiline':False]
['text':'/ If neither |ins-completion| nor |cmdline-completion| popup menu is active','line_number':1923,'multiline':False]
['text':'/ this API call is silently ignored.','line_number':1924,'multiline':False]
['text':'/ Useful for an external UI using |ui-popupmenu| to control the popup menu with the mouse.','line_number':1925,'multiline':False]
['text':'/ Can also be used in a mapping; use <Cmd> |:map-cmd| or a Lua mapping to ensure the mapping','line_number':1926,'multiline':False]
['text':'/ doesn't end completion mode.','line_number':1927,'multiline':False]
['text':'/','line_number':1928,'multiline':False]
['text':'/ @param item    Index (zero-based) of the item to select. Value of -1 selects nothing','line_number':1929,'multiline':False]
['text':'/                and restores the original text.','line_number':1930,'multiline':False]
['text':'/ @param insert  For |ins-completion|, whether the selection should be inserted in the buffer.','line_number':1931,'multiline':False]
['text':'/                Ignored for |cmdline-completion|.','line_number':1932,'multiline':False]
['text':'/ @param finish  Finish the completion and dismiss the popup menu. Implies {insert}.','line_number':1933,'multiline':False]
['text':'/ @param opts    Optional parameters. Reserved for future use.','line_number':1934,'multiline':False]
['text':'/ @param[out] err Error details, if any','line_number':1935,'multiline':False]
['text':'/ NB: if your UI doesn't use hlstate, this will not return hlstate first time','line_number':1947,'multiline':False]
['text':' TODO(bfredl): if grid == 0 we should read from the compositor's buffer.','line_number':1952,'multiline':False]
['text':' The only problem is that it does not yet exist.','line_number':1953,'multiline':False]
['text':' will not work first time','line_number':1976,'multiline':False]
['text':'/ For testing. The condition in schar_cache_clear_if_full is hard to','line_number':1989,'multiline':False]
['text':'/ reach, so this function can be used to force a cache clear in a test.','line_number':1990,'multiline':False]
['text':'/ Deletes an uppercase/file named mark. See |mark-motions|.','line_number':2003,'multiline':False]
['text':'/','line_number':2004,'multiline':False]
['text':'/ @note Lowercase name (or other buffer-local mark) is an error.','line_number':2005,'multiline':False]
['text':'/ @param name       Mark name','line_number':2006,'multiline':False]
['text':'/ @return true if the mark was deleted, else false.','line_number':2007,'multiline':False]
['text':'/ @see |nvim_buf_del_mark()|','line_number':2008,'multiline':False]
['text':'/ @see |nvim_get_mark()|','line_number':2009,'multiline':False]
['text':' Only allow file/uppercase marks','line_number':2017,'multiline':False]
['text':' TODO(muniter): Refactor this ASCII_ISUPPER macro to a proper function','line_number':2018,'multiline':False]
['text':'/ Returns a `(row, col, buffer, buffername)` tuple representing the position','line_number':2027,'multiline':False]
['text':'/ of the uppercase/file named mark. "End of line" column position is returned','line_number':2028,'multiline':False]
['text':'/ as |v:maxcol| (big number). See |mark-motions|.','line_number':2029,'multiline':False]
['text':'/','line_number':2030,'multiline':False]
['text':'/ Marks are (1,0)-indexed. |api-indexing|','line_number':2031,'multiline':False]
['text':'/','line_number':2032,'multiline':False]
['text':'/ @note Lowercase name (or other buffer-local mark) is an error.','line_number':2033,'multiline':False]
['text':'/ @param name       Mark name','line_number':2034,'multiline':False]
['text':'/ @param opts       Optional parameters. Reserved for future use.','line_number':2035,'multiline':False]
['text':'/ @return 4-tuple (row, col, buffer, buffername), (0, 0, 0, '') if the mark is','line_number':2036,'multiline':False]
['text':'/ not set.','line_number':2037,'multiline':False]
['text':'/ @see |nvim_buf_set_mark()|','line_number':2038,'multiline':False]
['text':'/ @see |nvim_del_mark()|','line_number':2039,'multiline':False]
['text':' false avoids loading the mark buffer','line_number':2053,'multiline':False]
['text':' Marks are from an open buffer it fnum is non zero','line_number':2059,'multiline':False]
['text':' Marks comes from shada','line_number':2064,'multiline':False]
['text':'/ Evaluates statusline string.','line_number':2100,'multiline':False]
['text':'/','line_number':2101,'multiline':False]
['text':'/ @param str Statusline string (see 'statusline').','line_number':2102,'multiline':False]
['text':'/ @param opts Optional parameters.','line_number':2103,'multiline':False]
['text':'/           - winid: (number) |window-ID| of the window to use as context for statusline.','line_number':2104,'multiline':False]
['text':'/           - maxwidth: (number) Maximum width of statusline.','line_number':2105,'multiline':False]
['text':'/           - fillchar: (string) Character to fill blank spaces in the statusline (see','line_number':2106,'multiline':False]
['text':'/                                'fillchars'). Treated as single-width even if it isn't.','line_number':2107,'multiline':False]
['text':'/           - highlights: (boolean) Return highlight information.','line_number':2108,'multiline':False]
['text':'/           - use_winbar: (boolean) Evaluate winbar instead of statusline.','line_number':2109,'multiline':False]
['text':'/           - use_tabline: (boolean) Evaluate tabline instead of statusline. When true, {winid}','line_number':2110,'multiline':False]
['text':'/                                    is ignored. Mutually exclusive with {use_winbar}.','line_number':2111,'multiline':False]
['text':'/           - use_statuscol_lnum: (number) Evaluate statuscolumn for this line number instead of statusline.','line_number':2112,'multiline':False]
['text':'/','line_number':2113,'multiline':False]
['text':'/ @param[out] err Error details, if any.','line_number':2114,'multiline':False]
['text':'/ @return Dictionary containing statusline information, with these keys:','line_number':2115,'multiline':False]
['text':'/       - str: (string) Characters that will be displayed on the statusline.','line_number':2116,'multiline':False]
['text':'/       - width: (number) Display width of the statusline.','line_number':2117,'multiline':False]
['text':'/       - highlights: Array containing highlight information of the statusline. Only included when','line_number':2118,'multiline':False]
['text':'/                     the "highlights" key in {opts} is true. Each element of the array is a','line_number':2119,'multiline':False]
['text':'/                     |Dictionary| with these keys:','line_number':2120,'multiline':False]
['text':'/           - start: (number) Byte index (0-based) of first character that uses the highlight.','line_number':2121,'multiline':False]
['text':'/           - group: (string) Name of highlight group.','line_number':2122,'multiline':False]
['text':' Temporarily reset 'cursorbind' to prevent side effects from moving the cursor away and back.','line_number':2235,'multiline':False]
['text':' Restore original value of 'cursorbind'','line_number':2253,'multiline':False]
['text':' strlen("User") + strlen("2147483647") + NUL','line_number':2259,'multiline':False]
['text':' If first character doesn't have a defined highlight,','line_number':2261,'multiline':False]
['text':' add the default highlight at the beginning of the highlight list','line_number':2262,'multiline':False]
['text':' TODO(bfredl): consider printing message to user, as will be relevant','line_number':2299,'multiline':False]
['text':' if we fork nvim processes as async workers','line_number':2300,'multiline':False]
