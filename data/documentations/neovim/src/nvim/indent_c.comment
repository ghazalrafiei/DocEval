['text':'/ Set the integer values corresponding to the string setting of 'vartabstop'.','line_number':49,'multiline':False]
['text':'/ "array" will be set, caller must free it if needed.','line_number':50,'multiline':False]
['text':'/','line_number':51,'multiline':False]
['text':'/ @return  false for an error.','line_number':52,'multiline':False]
['text':' Catch negative values, overflow and ridiculous big values.','line_number':96,'multiline':False]
['text':'/ Calculate the number of screen spaces a tab will occupy.','line_number':114,'multiline':False]
['text':'/ If "vts" is set then the tab widths are taken from that array,','line_number':115,'multiline':False]
['text':'/ otherwise the value of ts is used.','line_number':116,'multiline':False]
['text':'/ Find the size of the tab that covers a particular column.','line_number':144,'multiline':False]
['text':'/ Find the column on which a tab starts.','line_number':170,'multiline':False]
['text':'/ Find the number of tabs and spaces necessary to get from one column','line_number':192,'multiline':False]
['text':'/ to another.','line_number':193,'multiline':False]
['text':' suppress clang "Division by zero"','line_number':202,'multiline':False]
['text':' Find the padding needed to reach the next tabstop.','line_number':220,'multiline':False]
['text':' If the space needed is less than the padding no tabs can be used.','line_number':233,'multiline':False]
['text':' At least one tab has been used. See if any more will fit.','line_number':243,'multiline':False]
['text':'/ See if two tabstop arrays contain the same values.','line_number':258,'multiline':False]
['text':'/ Copy a tabstop array, allocating space for the new array.','line_number':282,'multiline':False]
['text':'/ Return a count of the number of tabstops.','line_number':300,'multiline':False]
['text':'/ Return the first tabstop, or 8 if there are no tabstops defined.','line_number':306,'multiline':False]
['text':'/ Return the effective shiftwidth value for current buffer, using the','line_number':312,'multiline':False]
['text':'/ 'tabstop' value when 'shiftwidth' is zero.','line_number':313,'multiline':False]
['text':'/ Idem, using "pos".','line_number':320,'multiline':False]
['text':'/ Idem, using the first non-black in the current line.','line_number':331,'multiline':False]
['text':'/ Idem, using virtual column "col".','line_number':340,'multiline':False]
['text':'/ Return the effective softtabstop value for the current buffer,','line_number':347,'multiline':False]
['text':'/ using the shiftwidth  value when 'softtabstop' is negative.','line_number':348,'multiline':False]
['text':' Count the size (in window cells) of the indent in the current line.','line_number':355,'multiline':False]
['text':' Count the size (in window cells) of the indent in line "lnum".','line_number':364,'multiline':False]
['text':' Count the size (in window cells) of the indent in line "lnum" of buffer','line_number':373,'multiline':False]
['text':' "buf".','line_number':374,'multiline':False]
['text':'/ Count the size (in window cells) of the indent in line "ptr", with','line_number':380,'multiline':False]
['text':'/ 'tabstop' at "ts".','line_number':381,'multiline':False]
['text':'/ If @param list is true, count only screen size for tabs.','line_number':382,'multiline':False]
['text':' Count a tab for what it is worth.','line_number':389,'multiline':False]
['text':' count a tab for what it is worth','line_number':392,'multiline':False]
['text':' In list mode, when tab is not set, count screen char width','line_number':395,'multiline':False]
['text':' for Tab, displays: ^I','line_number':396,'multiline':False]
['text':' Count a space for one.','line_number':400,'multiline':False]
['text':'/ Count the size (in window cells) of the indent in line "ptr", using','line_number':409,'multiline':False]
['text':'/ variable tabstops.','line_number':410,'multiline':False]
['text':'/ if "list" is true, count only screen size for tabs.','line_number':411,'multiline':False]
['text':' count a tab for what it is worth','line_number':417,'multiline':False]
['text':' In list mode, when tab is not set, count screen char width','line_number':421,'multiline':False]
['text':' for Tab, displays: ^I','line_number':422,'multiline':False]
['text':' count a space for one','line_number':426,'multiline':False]
['text':' Set the indent of the current line.','line_number':434,'multiline':False]
['text':' Leaves the cursor on the first non-blank in the line.','line_number':435,'multiline':False]
['text':' Caller must take care of undo.','line_number':436,'multiline':False]
['text':' "flags":','line_number':437,'multiline':False]
['text':'  SIN_CHANGED:    call changed_bytes() if the line was changed.','line_number':438,'multiline':False]
['text':'  SIN_INSERT: insert the indent in front of the line.','line_number':439,'multiline':False]
['text':'  SIN_UNDO:   save line for undo before changing it.','line_number':440,'multiline':False]
['text':'  SIN_NOMARK: don't move extmarks (because just after ml_append or something)','line_number':441,'multiline':False]
['text':'  @param size measured in spaces','line_number':442,'multiline':False]
['text':' Returns true if the line was changed.','line_number':443,'multiline':False]
['text':' Measured in characters.','line_number':451,'multiline':False]
['text':' Measured in spaces.','line_number':454,'multiline':False]
['text':' Number of initial whitespace chars when 'et' and 'pi' are both set.','line_number':458,'multiline':False]
['text':' First check if there is anything to do and compute the number of','line_number':461,'multiline':False]
['text':' characters needed for the indent.','line_number':462,'multiline':False]
['text':' Calculate the buffer size for the new indent, and check to see if it','line_number':467,'multiline':False]
['text':' isn't already set.','line_number':468,'multiline':False]
['text':' If 'expandtab' isn't set: use TABs; if both 'expandtab' and','line_number':469,'multiline':False]
['text':' 'preserveindent' are set count the number of characters at the','line_number':470,'multiline':False]
['text':' beginning of the line to be copied.','line_number':471,'multiline':False]
['text':' If 'preserveindent' is set then reuse as much as possible of','line_number':474,'multiline':False]
['text':' the existing indent structure for the new indent.','line_number':475,'multiline':False]
['text':' Count as many characters as we can use.','line_number':479,'multiline':False]
['text':' Stop if this tab will overshoot the target.','line_number':486,'multiline':False]
['text':' These diverge from this point.','line_number':501,'multiline':False]
['text':' Set initial number of whitespace chars to copy if we are','line_number':503,'multiline':False]
['text':' preserving indent but expandtab is set.','line_number':504,'multiline':False]
['text':' Fill to next tabstop with a tab, if possible.','line_number':508,'multiline':False]
['text':' ind_done += tab_pad;','line_number':517,'multiline':False]
['text':' Count tabs required for indent.','line_number':522,'multiline':False]
['text':' Count spaces required for indent.','line_number':539,'multiline':False]
['text':' ind_done++;','line_number':549,'multiline':False]
['text':' Return if the indent is OK already.','line_number':552,'multiline':False]
['text':' Allocate memory for the new line.','line_number':557,'multiline':False]
['text':' If 'preserveindent' and 'expandtab' are both set keep the original','line_number':565,'multiline':False]
['text':' characters and allocate accordingly.  We will fill the rest with spaces','line_number':566,'multiline':False]
['text':' after the if (!curbuf->b_p_et) below.','line_number':567,'multiline':False]
['text':' number of columns (in bytes) that were presved','line_number':568,'multiline':False]
['text':' = orig_char_len + size - ind_done + line_len','line_number':570,'multiline':False]
['text':' Set total length of indent in characters, which may have been','line_number':578,'multiline':False]
['text':' undercounted until now.','line_number':579,'multiline':False]
['text':' Skip over any additional white space (useful when newindent is less','line_number':590,'multiline':False]
['text':' than old).','line_number':591,'multiline':False]
['text':' Put the characters in the new line.','line_number':604,'multiline':False]
['text':' if 'expandtab' isn't set: use TABs','line_number':605,'multiline':False]
['text':' If 'preserveindent' is set then reuse as much as possible of','line_number':607,'multiline':False]
['text':' the existing indent structure for the new indent.','line_number':608,'multiline':False]
['text':' Stop if this tab will overshoot the target.','line_number':619,'multiline':False]
['text':' Fill to next tabstop with a tab, if possible.','line_number':633,'multiline':False]
['text':' Replace the line (unless undo fails).','line_number':665,'multiline':False]
['text':' this may free "newline"','line_number':670,'multiline':False]
['text':' Correct saved cursor position if it is in this line.','line_number':685,'multiline':False]
['text':' Cursor was after the indent, adjust for the number of','line_number':688,'multiline':False]
['text':' bytes added/removed.','line_number':689,'multiline':False]
['text':' Cursor was in the indent, and is now after it, put it back','line_number':692,'multiline':False]
['text':' at the start of the indent (replacing spaces with TAB).','line_number':693,'multiline':False]
['text':' Return the indent of the current line after a number.  Return -1 if no','line_number':705,'multiline':False]
['text':' number was found.  Used for 'n' in 'formatoptions': numbered list.','line_number':706,'multiline':False]
['text':' Since a pattern is used it can actually handle more than numbers.','line_number':707,'multiline':False]
['text':' Length of comment leader.','line_number':713,'multiline':False]
['text':' In format_lines() (i.e. not insert mode), fo+=q is needed too...','line_number':720,'multiline':False]
['text':' vim_regexec() expects a pointer to a line.  This lets us','line_number':729,'multiline':False]
['text':' start matching for the flp beyond any comment leader...','line_number':730,'multiline':False]
['text':'/ This is called when 'breakindentopt' is changed and when a window is','line_number':746,'multiline':False]
['text':'/ initialized','line_number':747,'multiline':False]
['text':' Note: Keep this in sync with p_briopt_values','line_number':758,'multiline':False]
['text':' Return appropriate space number for breakindent, taking influencing','line_number':793,'multiline':False]
['text':' parameters into account. Window must be specified, since it is not','line_number':794,'multiline':False]
['text':' necessarily always the current one.','line_number':795,'multiline':False]
['text':' cached indent value','line_number':799,'multiline':False]
['text':' cached tabstop value','line_number':800,'multiline':False]
['text':' cached buffer number','line_number':801,'multiline':False]
['text':' cached copy of "line"','line_number':802,'multiline':False]
['text':' changedtick of cached value','line_number':803,'multiline':False]
['text':' cached vartabs values','line_number':804,'multiline':False]
['text':' cached list value','line_number':805,'multiline':False]
['text':' cached w_p_briopt_list value','line_number':806,'multiline':False]
['text':' cached formatlistpat value','line_number':807,'multiline':False]
['text':' window width minus window margin space, i.e. what rests for text','line_number':809,'multiline':False]
['text':' used cached indent, unless','line_number':814,'multiline':False]
['text':' - buffer changed','line_number':815,'multiline':False]
['text':' - 'tabstop' changed','line_number':816,'multiline':False]
['text':' - buffer was changed','line_number':817,'multiline':False]
['text':' - 'briopt_list changed' changed or','line_number':818,'multiline':False]
['text':' - 'formatlistpattern' changed','line_number':819,'multiline':False]
['text':' - line changed','line_number':820,'multiline':False]
['text':' - 'vartabs' changed','line_number':821,'multiline':False]
['text':' add additional indent for numbered lists','line_number':846,'multiline':False]
['text':' column value has priority','line_number':865,'multiline':False]
['text':' Add offset for number column, if 'n' is in 'cpoptions'','line_number':872,'multiline':False]
['text':' add additional indent for numbered lists','line_number':875,'multiline':False]
['text':' indent minus the length of the showbreak string','line_number':880,'multiline':False]
['text':' never indent past left window margin','line_number':885,'multiline':False]
['text':' always leave at least bri_min characters on the left,','line_number':889,'multiline':False]
['text':' if text width is sufficient','line_number':890,'multiline':False]
['text':' When extra == 0: Return true if the cursor is before or on the first','line_number':898,'multiline':False]
['text':' non-blank in the line.','line_number':899,'multiline':False]
['text':' When extra == 1: Return true if the cursor is before the first non-blank in','line_number':900,'multiline':False]
['text':' the line.','line_number':901,'multiline':False]
['text':'/ @return  true if the conditions are OK for smart indenting.','line_number':917,'multiline':False]
['text':'/ Give a "resulting text too long" error and maybe set got_int.','line_number':923,'multiline':False]
['text':' when not inside a try/catch set got_int to break out of any loop','line_number':927,'multiline':False]
['text':'/ ":retab".','line_number':933,'multiline':False]
['text':' For start of white-space string','line_number':941,'multiline':False]
['text':' For start of white-space string','line_number':942,'multiline':False]
['text':' init to non-NULL','line_number':944,'multiline':False]
['text':' string value of tab argument','line_number':946,'multiline':False]
['text':' first changed line','line_number':949,'multiline':False]
['text':' last changed line','line_number':950,'multiline':False]
['text':' don't want list mode here','line_number':953,'multiline':False]
['text':' This ensures that either new_vts_array and new_ts_str are freshly','line_number':963,'multiline':False]
['text':' allocated, or new_vts_array points to an existing array and new_ts_str','line_number':964,'multiline':False]
['text':' is null.','line_number':965,'multiline':False]
['text':' called u_save for current line','line_number':976,'multiline':False]
['text':' First consecutive white-space','line_number':980,'multiline':False]
['text':' Retabulate this string of white-space','line_number':991,'multiline':False]
['text':' len is virtual length of white string','line_number':993,'multiline':False]
['text':' flag out-of-memory','line_number':1010,'multiline':False]
['text':' len is actual number of white characters used','line_number':1015,'multiline':False]
['text':' "new_line" may have been copied','line_number':1035,'multiline':False]
['text':' out of memory','line_number':1061,'multiline':False]
['text':' If a single value was given then it can be considered equal to','line_number':1070,'multiline':False]
['text':' either the value of 'tabstop' or the value of 'vartabstop'.','line_number':1071,'multiline':False]
['text':' not changed','line_number':1075,'multiline':False]
['text':' not changed','line_number':1078,'multiline':False]
['text':' restore 'list'','line_number':1086,'multiline':False]
['text':' set the new tabstop','line_number':1088,'multiline':False]
['text':' If 'vartabstop' is in use or if the value given to retab has more','line_number':1089,'multiline':False]
['text':' than one tabstop then update 'vartabstop'.','line_number':1090,'multiline':False]
['text':' 'vartabstop' wasn't in use and a single value was given to','line_number':1098,'multiline':False]
['text':' retab then update 'tabstop'.','line_number':1099,'multiline':False]
['text':'/ Get indent level from 'indentexpr'.','line_number':1110,'multiline':False]
['text':' Save and restore cursor position and curswant, in case it was changed','line_number':1121,'multiline':False]
['text':' * via :normal commands.','line_number':1122,'multiline':False]
['text':' Need to make a copy, the 'indentexpr' option could be changed while','line_number':1134,'multiline':False]
['text':' evaluating it.','line_number':1135,'multiline':False]
['text':' Restore the cursor position so that 'indentexpr' doesn't need to.','line_number':1146,'multiline':False]
['text':' Pretend to be in Insert mode, allow cursor past end of line for "o"','line_number':1147,'multiline':False]
['text':' command.','line_number':1148,'multiline':False]
['text':' Reset did_throw, unless 'debug' has "throw" and inside a try/catch.','line_number':1157,'multiline':False]
['text':' If there is an error, just keep the current indent.','line_number':1163,'multiline':False]
['text':' When 'p' is present in 'cpoptions, a Vi compatible method is used.','line_number':1171,'multiline':False]
['text':' The incompatible newer method is quite a bit better at indenting','line_number':1172,'multiline':False]
['text':' code in lisp-like languages than the traditional one; it's still','line_number':1173,'multiline':False]
['text':' mostly heuristics however -- Dirk van Deun, dirk@rave.org','line_number':1174,'multiline':False]
['text':' TODO(unknown):','line_number':1176,'multiline':False]
['text':' Findmatch() should be adapted for lisp, also to make showmatch','line_number':1177,'multiline':False]
['text':' work correctly: now (v5.3) it seems all C/C++ oriented:','line_number':1178,'multiline':False]
['text':' - it does not recognize the #\( and #\) notations as character literals','line_number':1179,'multiline':False]
['text':' - it doesn't know about comments starting with a semicolon','line_number':1180,'multiline':False]
['text':' - it incorrectly interprets '(' as a character literal','line_number':1181,'multiline':False]
['text':' All this messes up get_lisp_indent in some rare cases.','line_number':1182,'multiline':False]
['text':' Update from Sergey Khorev:','line_number':1183,'multiline':False]
['text':' I tried to fix the first two issues.','line_number':1184,'multiline':False]
['text':' Set vi_lisp to use the vi-compatible method.','line_number':1192,'multiline':False]
['text':' Extra trick: Take the indent of the first previous non-white','line_number':1210,'multiline':False]
['text':' line that is at the same () level.','line_number':1211,'multiline':False]
['text':' Skipping escaped characters in the string','line_number':1237,'multiline':False]
['text':' Some keywords require "body" indenting rules (the','line_number':1286,'multiline':False]
['text':' non-standard-lisp ones are Scheme special forms):','line_number':1287,'multiline':False]
['text':' (let ((a 1))    instead    (let ((a 1))','line_number':1288,'multiline':False]
['text':'   (...))       of       (...))','line_number':1289,'multiline':False]
['text':' Not a comment line.','line_number':1311,'multiline':False]
['text':' Test *that != '(' to accommodate first let/do','line_number':1312,'multiline':False]
['text':' argument if it is more than one line.','line_number':1313,'multiline':False]
['text':' No matching '(' or '[' found, use zero indent.','line_number':1363,'multiline':False]
['text':'/ Re-indent the current line, based on the current contents of it and the','line_number':1386,'multiline':False]
['text':'/ surrounding lines. Fixing the cursor position seems really easy -- I'm very','line_number':1387,'multiline':False]
['text':'/ confused what all the part that handles Control-T is doing that I'm not.','line_number':1388,'multiline':False]
['text':'/ "get_the_indent" should be get_c_indent, get_expr_indent or get_lisp_indent.','line_number':1389,'multiline':False]
['text':' delete the indent if the line stays empty','line_number':1400,'multiline':False]
['text':'/ Return true if 'indentexpr' should be used for Lisp indenting.','line_number':1404,'multiline':False]
['text':'/ Caller may want to check 'autoindent'.','line_number':1405,'multiline':False]
['text':'/ Fix indent for 'lisp' and 'cindent'.','line_number':1413,'multiline':False]
['text':' no auto-indenting when 'paste' is set','line_number':1417,'multiline':False]
