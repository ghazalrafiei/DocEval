['text':'/ change.c: functions related to changing text','line_number':1,'multiline':False]
['text':'/ If the file is readonly, give a warning message with the first change.','line_number':55,'multiline':False]
['text':'/ Don't do this for autocommands.','line_number':56,'multiline':False]
['text':'/ Doesn't use emsg(), because it flushes the macro buffer.','line_number':57,'multiline':False]
['text':'/ If we have undone all changes b_changed will be false, but "b_did_warn"','line_number':58,'multiline':False]
['text':'/ will be true.','line_number':59,'multiline':False]
['text':'/ "col" is the column for the message; non-zero when in insert mode and','line_number':60,'multiline':False]
['text':'/ 'showmode' is on.','line_number':61,'multiline':False]
['text':'/ Careful: may trigger autocommands that reload the buffer.','line_number':62,'multiline':False]
['text':' Do what msg() does, but with a column offset if the warning should','line_number':77,'multiline':False]
['text':' be after the mode message.','line_number':78,'multiline':False]
['text':' give the user time to think about it','line_number':91,'multiline':False]
['text':' don't redraw and erase the message','line_number':94,'multiline':False]
['text':'/ Call this function when something in a buffer is changed.','line_number':101,'multiline':False]
['text':'/','line_number':102,'multiline':False]
['text':'/ Most often called through changed_bytes() and changed_lines(), which also','line_number':103,'multiline':False]
['text':'/ mark the area of the display to be redrawn.','line_number':104,'multiline':False]
['text':'/','line_number':105,'multiline':False]
['text':'/ Careful: may trigger autocommands that reload the buffer.','line_number':106,'multiline':False]
['text':' Give a warning about changing a read-only file.  This may also','line_number':112,'multiline':False]
['text':' check-out the file, thus change "curbuf"!','line_number':113,'multiline':False]
['text':' Create a swap file if that is wanted.','line_number':116,'multiline':False]
['text':' Don't do this for "nofile" and "nowrite" buffer types.','line_number':117,'multiline':False]
['text':' The ml_open_file() can cause an ATTENTION message.','line_number':124,'multiline':False]
['text':' Wait two seconds, to make sure the user reads this unexpected','line_number':125,'multiline':False]
['text':' message.  Since we could be anywhere, call wait_return() now,','line_number':126,'multiline':False]
['text':' and don't let the emsg() set msg_scroll.','line_number':127,'multiline':False]
['text':' If a pattern is highlighted, the position may now be invalid.','line_number':141,'multiline':False]
['text':'/ Internal part of changed(), no user interaction.','line_number':145,'multiline':False]
['text':'/ Also used for recovery.','line_number':146,'multiline':False]
['text':' set window title later','line_number':154,'multiline':False]
['text':'/ Common code for when a change was made.','line_number':157,'multiline':False]
['text':'/ See changed_lines() for the arguments.','line_number':158,'multiline':False]
['text':'/ Careful: may trigger autocommands that reload the buffer.','line_number':159,'multiline':False]
['text':' mark the buffer as modified','line_number':162,'multiline':False]
['text':' set the '. mark','line_number':171,'multiline':False]
['text':' Set the markview only if lnum is visible, as changes might be done','line_number':174,'multiline':False]
['text':' outside of the current window view.','line_number':175,'multiline':False]
['text':' Create a new entry if a new undo-able change was started or we','line_number':184,'multiline':False]
['text':' don't have an entry yet.','line_number':185,'multiline':False]
['text':' Don't create a new entry when the line number is the same','line_number':191,'multiline':False]
['text':' as the last one and the column is not too far away.  Avoids','line_number':192,'multiline':False]
['text':' creating many entries for typing "xxxxx".','line_number':193,'multiline':False]
['text':' This is the first of a new sequence of undo-able changes','line_number':206,'multiline':False]
['text':' and it's at some distance of the last change.  Use a new','line_number':207,'multiline':False]
['text':' position in the changelist.','line_number':208,'multiline':False]
['text':' changelist is full: remove oldest entry','line_number':212,'multiline':False]
['text':' Correct position in changelist for other windows on','line_number':217,'multiline':False]
['text':' this buffer.','line_number':218,'multiline':False]
['text':' For other windows, if the position in the changelist is','line_number':225,'multiline':False]
['text':' at the end it stays at the end.','line_number':226,'multiline':False]
['text':' The current window is always after the last change, so that "g,"','line_number':237,'multiline':False]
['text':' takes you back to it.','line_number':238,'multiline':False]
['text':' Mark this window to be redrawn later.','line_number':250,'multiline':False]
['text':' last line after the change','line_number':255,'multiline':False]
['text':' Reset "w_skipcol" if the topline length has become smaller to','line_number':257,'multiline':False]
['text':' such a degree that nothing will be visible anymore, accounting','line_number':258,'multiline':False]
['text':' for 'smoothscroll' <<< or 'listchars' "precedes" marker.','line_number':259,'multiline':False]
['text':' Check if a change in the buffer has invalidated the cached','line_number':270,'multiline':False]
['text':' values for the cursor.','line_number':271,'multiline':False]
['text':' Update the folds for this window.  Can't postpone this, because','line_number':272,'multiline':False]
['text':' a following operator might work on the whole fold: ">>dd".','line_number':273,'multiline':False]
['text':' The change may cause lines above or below the change to become','line_number':276,'multiline':False]
['text':' included in a fold.  Set lnum/lnume to the first/last line that','line_number':277,'multiline':False]
['text':' might be displayed differently.','line_number':278,'multiline':False]
['text':' Set w_cline_folded here as an efficient way to update it when','line_number':279,'multiline':False]
['text':' inserting lines just above a closed fold.','line_number':280,'multiline':False]
['text':' If the changed line is in a range of previously folded lines,','line_number':290,'multiline':False]
['text':' compare with the first line in that range.','line_number':291,'multiline':False]
['text':' Assume that botline doesn't change (inserted lines make','line_number':305,'multiline':False]
['text':' other lines scroll down below botline).','line_number':306,'multiline':False]
['text':' Check if any w_lines[] entries have become invalid.','line_number':310,'multiline':False]
['text':' For entries below the change: Correct the lnums for','line_number':311,'multiline':False]
['text':' inserted/deleted lines.  Makes it possible to stop displaying','line_number':312,'multiline':False]
['text':' after the change.','line_number':313,'multiline':False]
['text':' Do not change wl_lnum at index zero, it is used to','line_number':317,'multiline':False]
['text':' compare with w_topline.  Invalidate it instead.','line_number':318,'multiline':False]
['text':' If the buffer has virt_lines, invalidate the line','line_number':319,'multiline':False]
['text':' after the changed lines as the virt_lines for a','line_number':320,'multiline':False]
['text':' changed line may become invalid.','line_number':321,'multiline':False]
['text':' line included in change','line_number':325,'multiline':False]
['text':' line below change','line_number':328,'multiline':False]
['text':' change somewhere inside this range of folded lines,','line_number':333,'multiline':False]
['text':' may need to be redrawn','line_number':334,'multiline':False]
['text':' Take care of side effects for setting w_topline when folds have','line_number':340,'multiline':False]
['text':' changed.  Esp. when the buffer was changed in another window.','line_number':341,'multiline':False]
['text':' If lines have been added or removed, relative numbering always','line_number':346,'multiline':False]
['text':' requires a redraw.','line_number':347,'multiline':False]
['text':' Cursor line highlighting probably need to be updated with','line_number':353,'multiline':False]
['text':' "UPD_VALID" if it's below the change.','line_number':354,'multiline':False]
['text':' If the cursor line is inside the change we need to redraw more.','line_number':355,'multiline':False]
['text':' Call update_screen() later, which checks out what needs to be redrawn,','line_number':366,'multiline':False]
['text':' since it notices b_mod_set and then uses b_mod_*.','line_number':367,'multiline':False]
['text':' when the cursor line is changed always trigger CursorMoved','line_number':372,'multiline':False]
['text':' find the maximum area that must be redisplayed','line_number':383,'multiline':False]
['text':' set the area that must be redisplayed to one line','line_number':390,'multiline':False]
['text':'/ Changed bytes within a single line for the current buffer.','line_number':398,'multiline':False]
['text':'/ - marks the windows on this buffer to be redisplayed','line_number':399,'multiline':False]
['text':'/ - marks the buffer changed by calling changed()','line_number':400,'multiline':False]
['text':'/ - invalidates cached values','line_number':401,'multiline':False]
['text':'/ Careful: may trigger autocommands that reload the buffer.','line_number':402,'multiline':False]
['text':' When text has been changed at the end of the line, possibly the start of','line_number':407,'multiline':False]
['text':' the next line may have SpellCap that should be removed or it needs to be','line_number':408,'multiline':False]
['text':' displayed.  Schedule the next line for redrawing just in case.','line_number':409,'multiline':False]
['text':' Don't do this when displaying '$' at the end of changed text.','line_number':410,'multiline':False]
['text':' notify any channels that are watching','line_number':416,'multiline':False]
['text':' Diff highlighting in other diff windows may need to be updated too.','line_number':419,'multiline':False]
['text':'/ insert/delete bytes at column','line_number':433,'multiline':False]
['text':'/','line_number':434,'multiline':False]
['text':'/ Like changed_bytes() but also adjust extmark for "new" bytes.','line_number':435,'multiline':False]
['text':'/ Appended "count" lines below line "lnum" in the current buffer.','line_number':445,'multiline':False]
['text':'/ Must be called AFTER the change and after mark_adjust().','line_number':446,'multiline':False]
['text':'/ Takes care of marking the buffer to be redrawn and sets the changed flag.','line_number':447,'multiline':False]
['text':'/ Like appended_lines(), but adjust marks first.','line_number':453,'multiline':False]
['text':'/ Deleted "count" lines at line "lnum" in the current buffer.','line_number':460,'multiline':False]
['text':'/ Must be called AFTER the change and after mark_adjust().','line_number':461,'multiline':False]
['text':'/ Takes care of marking the buffer to be redrawn and sets the changed flag.','line_number':462,'multiline':False]
['text':'/ Like deleted_lines(), but adjust marks first.','line_number':468,'multiline':False]
['text':'/ Make sure the cursor is on a valid line before calling, a GUI callback may','line_number':469,'multiline':False]
['text':'/ be triggered to display the cursor.','line_number':470,'multiline':False]
['text':' if we deleted the entire buffer, we need to implicitly add a new empty line','line_number':476,'multiline':False]
['text':'/ Marks the area to be redrawn after a change.','line_number':482,'multiline':False]
['text':'/ Consider also calling changed_line_display_buf().','line_number':483,'multiline':False]
['text':'/','line_number':484,'multiline':False]
['text':'/ @param buf the buffer where lines were changed','line_number':485,'multiline':False]
['text':'/ @param lnum first line with change','line_number':486,'multiline':False]
['text':'/ @param lnume line below last changed line','line_number':487,'multiline':False]
['text':'/ @param xtra number of extra lines (negative when deleting)','line_number':488,'multiline':False]
['text':' find the maximum area that must be redisplayed','line_number':492,'multiline':False]
['text':' adjust old bot position for xtra lines','line_number':497,'multiline':False]
['text':' set the area that must be redisplayed','line_number':508,'multiline':False]
['text':'/ Changed lines for a buffer.','line_number':516,'multiline':False]
['text':'/ Must be called AFTER the change and after mark_adjust().','line_number':517,'multiline':False]
['text':'/ - mark the buffer changed by calling changed()','line_number':518,'multiline':False]
['text':'/ - mark the windows on this buffer to be redisplayed','line_number':519,'multiline':False]
['text':'/ - invalidate cached values','line_number':520,'multiline':False]
['text':'/ "lnum" is the first line that needs displaying, "lnume" the first line','line_number':521,'multiline':False]
['text':'/ below the changed lines (BEFORE the change).','line_number':522,'multiline':False]
['text':'/ When only inserting lines, "lnum" and "lnume" are equal.','line_number':523,'multiline':False]
['text':'/ Takes care of calling changed() and updating b_mod_*.','line_number':524,'multiline':False]
['text':'/ Careful: may trigger autocommands that reload the buffer.','line_number':525,'multiline':False]
['text':'/','line_number':526,'multiline':False]
['text':'/ @param lnum  first line with change','line_number':527,'multiline':False]
['text':'/ @param col  column in first line with change','line_number':528,'multiline':False]
['text':'/ @param lnume  line below last changed line','line_number':529,'multiline':False]
['text':'/ @param xtra  number of extra lines (negative when deleting)','line_number':530,'multiline':False]
['text':'/ @param do_buf_event  some callers like undo/redo call changed_lines() and','line_number':531,'multiline':False]
['text':'/ then increment changedtick *again*. This flag allows these callers to send','line_number':532,'multiline':False]
['text':'/ the nvim_buf_lines_event events after they're done modifying changedtick.','line_number':533,'multiline':False]
['text':' When the number of lines doesn't change then mark_adjust() isn't','line_number':540,'multiline':False]
['text':' called and other diff buffers still need to be marked for','line_number':541,'multiline':False]
['text':' displaying.','line_number':542,'multiline':False]
['text':'/ Called when the changed flag must be reset for buffer `buf`.','line_number':566,'multiline':False]
['text':'/ When `ff` is true also reset 'fileformat'.','line_number':567,'multiline':False]
['text':'/ When `always_inc_changedtick` is true b:changedtick is incremented even','line_number':568,'multiline':False]
['text':'/ when the changed flag was off.','line_number':569,'multiline':False]
['text':' set window title later','line_number':581,'multiline':False]
['text':'/ Save the current values of 'fileformat' and 'fileencoding', so that we know','line_number':588,'multiline':False]
['text':'/ the file must be considered changed when the value is different.','line_number':589,'multiline':False]
['text':' Only use free/alloc when necessary, they take time.','line_number':597,'multiline':False]
['text':'/ Return true if 'fileformat' and/or 'fileencoding' has a different value','line_number':605,'multiline':False]
['text':'/ from when editing started (save_file_ff() called).','line_number':606,'multiline':False]
['text':'/ Also when 'endofline' was changed and 'binary' is set, or when 'bomb' was','line_number':607,'multiline':False]
['text':'/ changed and 'binary' is not set.','line_number':608,'multiline':False]
['text':'/ Also when 'endofline' was changed and 'fixeol' is not set.','line_number':609,'multiline':False]
['text':'/ When "ignore_empty" is true don't consider a new, empty buffer to be','line_number':610,'multiline':False]
['text':'/ changed.','line_number':611,'multiline':False]
['text':' In a buffer that was never loaded the options are not valid.','line_number':615,'multiline':False]
['text':'/ Insert string "p" at the cursor position.  Stops at a NUL byte.','line_number':641,'multiline':False]
['text':'/ Handles Replace mode and multi-byte characters.','line_number':642,'multiline':False]
['text':'/ Insert string "p" with length "len" at the cursor position.','line_number':648,'multiline':False]
['text':'/ Handles Replace mode and multi-byte characters.','line_number':649,'multiline':False]
['text':' avoid reading past p[len]','line_number':654,'multiline':False]
['text':'/ Insert or replace a single character at the cursor position.','line_number':660,'multiline':False]
['text':'/ When in MODE_REPLACE or MODE_VREPLACE state, replace any existing character.','line_number':661,'multiline':False]
['text':'/ Caller must have prepared for undo.','line_number':662,'multiline':False]
['text':'/ For multi-byte characters we get the whole character, the caller must','line_number':663,'multiline':False]
['text':'/ convert bytes to a character.','line_number':664,'multiline':False]
['text':' When "c" is 0x100, 0x200, etc. we don't want to insert a NUL byte.','line_number':670,'multiline':False]
['text':' Happens for CTRL-Vu9900.','line_number':671,'multiline':False]
['text':' Break tabs if needed.','line_number':680,'multiline':False]
['text':' length of old line including NUL','line_number':688,'multiline':False]
['text':' The lengths default to the values for when not replacing.','line_number':690,'multiline':False]
['text':' nr of bytes inserted','line_number':691,'multiline':False]
['text':' nr of bytes deleted (0 when not replacing)','line_number':692,'multiline':False]
['text':' Disable 'list' temporarily, unless 'cpo' contains the 'L' flag.','line_number':696,'multiline':False]
['text':' Returns the old value of list, so when finished,','line_number':697,'multiline':False]
['text':' curwin->w_p_list should be set back to this.','line_number':698,'multiline':False]
['text':' In virtual replace mode each character may replace one or more','line_number':703,'multiline':False]
['text':' characters (zero if it's a TAB).  Count the number of bytes to','line_number':704,'multiline':False]
['text':' be deleted to make room for the new character, counting screen','line_number':705,'multiline':False]
['text':' cells.  May result in adding spaces to fill a gap.','line_number':706,'multiline':False]
['text':' Don't need to remove a TAB that takes us to the right','line_number':712,'multiline':False]
['text':' position.','line_number':713,'multiline':False]
['text':' Deleted a bit too much, insert spaces.','line_number':718,'multiline':False]
['text':' normal replace','line_number':725,'multiline':False]
['text':' Push the replaced bytes onto the replace stack, so that they can be','line_number':729,'multiline':False]
['text':' put back when BS is used.  The bytes of a multi-byte character are','line_number':730,'multiline':False]
['text':' done the other way around, so that the first byte is popped off','line_number':731,'multiline':False]
['text':' first (it tells the byte length of the character).','line_number':732,'multiline':False]
['text':' Copy bytes before the cursor.','line_number':741,'multiline':False]
['text':' Copy bytes after the changed character(s).','line_number':746,'multiline':False]
['text':' Insert or overwrite the new character.','line_number':752,'multiline':False]
['text':' Fill with spaces when necessary.','line_number':755,'multiline':False]
['text':' Replace the line in the buffer.','line_number':760,'multiline':False]
['text':' mark the buffer as changed and prepare for displaying','line_number':763,'multiline':False]
['text':' If we're in Insert or Replace mode and 'showmatch' is set, then briefly','line_number':766,'multiline':False]
['text':' show the match for right parens and braces.','line_number':767,'multiline':False]
['text':' Normal insert: move cursor right','line_number':775,'multiline':False]
['text':' TODO(Bram): should try to update w_row here, to avoid recomputing it later.','line_number':778,'multiline':False]
['text':'/ Insert a string at the cursor position.','line_number':781,'multiline':False]
['text':'/ Note: Does NOT handle Replace mode.','line_number':782,'multiline':False]
['text':'/ Caller must have prepared for undo.','line_number':783,'multiline':False]
['text':' Delete one character under the cursor.','line_number':810,'multiline':False]
['text':' If "fixpos" is true, don't leave the cursor on the NUL after the line.','line_number':811,'multiline':False]
['text':' Caller must have prepared for undo.','line_number':812,'multiline':False]
['text':'','line_number':813,'multiline':False]
['text':' return FAIL for failure, OK otherwise','line_number':814,'multiline':False]
['text':' Make sure the cursor is at the start of a character.','line_number':817,'multiline':False]
['text':'/ Like del_bytes(), but delete characters instead of bytes.','line_number':825,'multiline':False]
['text':'/ Delete "count" bytes under the cursor.','line_number':838,'multiline':False]
['text':'/ If "fixpos" is true, don't leave the cursor on the NUL after the line.','line_number':839,'multiline':False]
['text':'/ Caller must have prepared for undo.','line_number':840,'multiline':False]
['text':'/','line_number':841,'multiline':False]
['text':'/ @param  count           number of bytes to be deleted','line_number':842,'multiline':False]
['text':'/ @param  fixpos_arg      leave the cursor on the NUL after the line','line_number':843,'multiline':False]
['text':'/ @param  use_delcombine  'delcombine' option applies','line_number':844,'multiline':False]
['text':'/','line_number':845,'multiline':False]
['text':'/ @return FAIL for failure, OK otherwise','line_number':846,'multiline':False]
['text':' Can't do anything when the cursor is on the NUL after the line.','line_number':855,'multiline':False]
['text':' If "count" is zero there is nothing to do.','line_number':859,'multiline':False]
['text':' If "count" is negative the caller must be doing something wrong.','line_number':863,'multiline':False]
['text':' If 'delcombine' is set and deleting (less than) one character, only','line_number':869,'multiline':False]
['text':' delete the last combining character.','line_number':870,'multiline':False]
['text':' Find the last composing char, there can be several.','line_number':874,'multiline':False]
['text':' When count is too big, reduce it.','line_number':885,'multiline':False]
['text':' includes trailing NUL','line_number':886,'multiline':False]
['text':' If we just took off the last character of a non-blank line, and','line_number':888,'multiline':False]
['text':' fixpos is true, we don't want to end up positioned at the NUL,','line_number':889,'multiline':False]
['text':' unless "restart_edit" is set or 'virtualedit' contains "onemore".','line_number':890,'multiline':False]
['text':' If the old line has been allocated the deletion can be done in the','line_number':901,'multiline':False]
['text':' existing line. Otherwise a new line has to be allocated.','line_number':902,'multiline':False]
['text':' check if oldp was allocated','line_number':903,'multiline':False]
['text':' use same allocated memory','line_number':907,'multiline':False]
['text':' need to allocate a new line','line_number':908,'multiline':False]
['text':' mark the buffer as changed and prepare for displaying','line_number':917,'multiline':False]
['text':'/ Copy the indent from ptr to the current line (and fill to size).','line_number':923,'multiline':False]
['text':'/ Leaves the cursor on the first non-blank in the line.','line_number':924,'multiline':False]
['text':'/ @return true if the line was changed.','line_number':925,'multiline':False]
['text':' Round 1: compute the number of characters needed for the indent','line_number':934,'multiline':False]
['text':' Round 2: copy the characters.','line_number':935,'multiline':False]
['text':' Count/copy the usable portion of the source line.','line_number':943,'multiline':False]
['text':' Stop if this tab will overshoot the target.','line_number':950,'multiline':False]
['text':' Fill to next tabstop with a tab, if possible.','line_number':970,'multiline':False]
['text':' Add tabs required for indent.','line_number':983,'multiline':False]
['text':' Count/add spaces required for indent.','line_number':1001,'multiline':False]
['text':' Allocate memory for the result: the copied indent, new indent','line_number':1012,'multiline':False]
['text':' and the rest of the line.','line_number':1013,'multiline':False]
['text':' Append the original line','line_number':1023,'multiline':False]
['text':' Replace the line','line_number':1026,'multiline':False]
['text':' Put the cursor after the indent.','line_number':1029,'multiline':False]
['text':'/ open_line: Add a new line below or above the current line.','line_number':1034,'multiline':False]
['text':'/','line_number':1035,'multiline':False]
['text':'/ For MODE_VREPLACE state, we only add a new line when we get to the end of','line_number':1036,'multiline':False]
['text':'/ the file, otherwise we just start replacing the next line.','line_number':1037,'multiline':False]
['text':'/','line_number':1038,'multiline':False]
['text':'/ Caller must take care of undo.  Since MODE_VREPLACE may affect any number of','line_number':1039,'multiline':False]
['text':'/ lines however, it may call u_save_cursor() again when starting to change a','line_number':1040,'multiline':False]
['text':'/ new line.','line_number':1041,'multiline':False]
['text':'/ "flags": OPENLINE_DELSPACES delete spaces after cursor','line_number':1042,'multiline':False]
['text':'/          OPENLINE_DO_COM    format comments','line_number':1043,'multiline':False]
['text':'/          OPENLINE_KEEPTRAIL keep trailing spaces','line_number':1044,'multiline':False]
['text':'/          OPENLINE_MARKFIX   adjust mark positions after the line break','line_number':1045,'multiline':False]
['text':'/          OPENLINE_COM_LIST  format comments with list or 2nd line indent','line_number':1046,'multiline':False]
['text':'/','line_number':1047,'multiline':False]
['text':'/ "second_line_indent": indent for after ^^D in Insert mode or if flag','line_number':1048,'multiline':False]
['text':'/                       OPENLINE_COM_LIST','line_number':1049,'multiline':False]
['text':'/ "did_do_comment" is set to true when intentionally putting the comment','line_number':1050,'multiline':False]
['text':'/ leader in front of the new line.','line_number':1051,'multiline':False]
['text':'/','line_number':1052,'multiline':False]
['text':'/ @param dir  FORWARD or BACKWARD','line_number':1053,'multiline':False]
['text':'/','line_number':1054,'multiline':False]
['text':'/ @return true on success, false on failure','line_number':1055,'multiline':False]
['text':' copy of the next line','line_number':1058,'multiline':False]
['text':' what goes to next line','line_number':1059,'multiline':False]
['text':' less columns for mark in new line','line_number':1060,'multiline':False]
['text':' columns to skip for mark adjust','line_number':1061,'multiline':False]
['text':' old cursor position','line_number':1062,'multiline':False]
['text':' new cursor column','line_number':1063,'multiline':False]
['text':' auto-indent of the new line','line_number':1064,'multiline':False]
['text':' truncate current line afterwards','line_number':1065,'multiline':False]
['text':' return value','line_number':1066,'multiline':False]
['text':' length of p_extra string','line_number':1067,'multiline':False]
['text':' length of comment leader','line_number':1068,'multiline':False]
['text':' start index of the comment leader','line_number':1069,'multiline':False]
['text':' position in 'comments' for comment leader','line_number':1070,'multiline':False]
['text':' copy of comment leader','line_number':1071,'multiline':False]
['text':' allocated memory','line_number':1072,'multiline':False]
['text':' init for GCC','line_number':1074,'multiline':False]
['text':' reset did_si afterwards','line_number':1078,'multiline':False]
['text':' init for GCC','line_number':1079,'multiline':False]
['text':' appended a new line','line_number':1081,'multiline':False]
['text':' copy of preserveindent setting','line_number':1082,'multiline':False]
['text':' make a copy of the current line so we can mess with it','line_number':1087,'multiline':False]
['text':' With MODE_VREPLACE we make a copy of the next line, which we will be','line_number':1091,'multiline':False]
['text':' starting to replace.  First make the new line empty and let vim play','line_number':1092,'multiline':False]
['text':' with the indenting and comment leader to its heart's content.  Then','line_number':1093,'multiline':False]
['text':' we grab what it ended up putting on the new line, put back the','line_number':1094,'multiline':False]
['text':' original line, and call ins_char() to put each new character onto','line_number':1095,'multiline':False]
['text':' the line, replacing what was there before and pushing the right','line_number':1096,'multiline':False]
['text':' stuff onto the replace stack.  -- webb.','line_number':1097,'multiline':False]
['text':' In MODE_VREPLACE state, a NL replaces the rest of the line, and','line_number':1104,'multiline':False]
['text':' starts replacing the next line, so push all of the characters left','line_number':1105,'multiline':False]
['text':' on the line onto the replace stack.  We'll push any other characters','line_number':1106,'multiline':False]
['text':' that might be replaced at the start of the next line (due to','line_number':1107,'multiline':False]
['text':' autoindent etc) a bit later.','line_number':1108,'multiline':False]
['text':' Call twice because BS over NL expects it','line_number':1109,'multiline':False]
['text':' need first char after new line break','line_number':1120,'multiline':False]
['text':' cannot do "U" command when adding lines','line_number':1129,'multiline':False]
['text':' If we just did an auto-indent, then we didn't type anything on','line_number':1133,'multiline':False]
['text':' the prior line, and it should be truncated.  Do this even if 'ai' is not','line_number':1134,'multiline':False]
['text':' set because automatically inserting a comment leader also sets did_ai.','line_number':1135,'multiline':False]
['text':' If 'autoindent' and/or 'smartindent' is set, try to figure out what','line_number':1140,'multiline':False]
['text':' indent to use for the new line.','line_number':1141,'multiline':False]
['text':' count white space on current line','line_number':1143,'multiline':False]
['text':' for ^^D command in insert mode','line_number':1148,'multiline':False]
['text':' Do smart indenting.','line_number':1151,'multiline':False]
['text':' In insert/replace mode (only when dir == FORWARD)','line_number':1152,'multiline':False]
['text':' we may move some text to the next line. If it starts with '{'','line_number':1153,'multiline':False]
['text':' don't add an indent. Fixes inserting a NL before '{' in line','line_number':1154,'multiline':False]
['text':'   "if (condition) {"','line_number':1155,'multiline':False]
['text':' Skip preprocessor directives, unless they are recognised as comments.','line_number':1168,'multiline':False]
['text':' This case gets the following right:','line_number':1181,'multiline':False]
['text':'     \*','line_number':1182,'multiline':False]
['text':'      * A comment (read '\' as '/').','line_number':1183,'multiline':False]
['text':'      */','line_number':1184,'multiline':False]
['text':'     #define IN_THE_WAY','line_number':1185,'multiline':False]
['text':'     This should line up here;','line_number':1186,'multiline':False]
['text':' End of C comment, indent should line up','line_number':1194,'multiline':False]
['text':' with the line containing the start of','line_number':1195,'multiline':False]
['text':' the comment.','line_number':1196,'multiline':False]
['text':' this may make "ptr" invalid, get it again','line_number':1203,'multiline':False]
['text':' Not a comment line','line_number':1209,'multiline':False]
['text':' Find last non-blank in line','line_number':1210,'multiline':False]
['text':' find the character just before the '{' or ';'','line_number':1217,'multiline':False]
['text':' Try to catch lines that are split over multiple','line_number':1226,'multiline':False]
['text':' lines.  eg:','line_number':1227,'multiline':False]
['text':'     if (condition &&','line_number':1228,'multiline':False]
['text':'             condition) {','line_number':1229,'multiline':False]
['text':'         Should line up here!','line_number':1230,'multiline':False]
['text':'     }','line_number':1231,'multiline':False]
['text':' If last character is '{' do indent, without','line_number':1240,'multiline':False]
['text':' checking for "if" and the like.','line_number':1241,'multiline':False]
['text':' do indent','line_number':1243,'multiline':False]
['text':' don't delete it when '{' typed','line_number':1244,'multiline':False]
['text':' Look for "if" and the like, use 'cinwords'.','line_number':1245,'multiline':False]
['text':' Don't do this if the previous line ended in ';' or','line_number':1246,'multiline':False]
['text':' '}'.','line_number':1247,'multiline':False]
['text':' dir == BACKWARD','line_number':1253,'multiline':False]
['text':' Skip preprocessor directives, unless they are','line_number':1254,'multiline':False]
['text':' recognised as comments.','line_number':1255,'multiline':False]
['text':' Got to end of file','line_number':1269,'multiline':False]
['text':' if line starts with '}': do indent','line_number':1275,'multiline':False]
['text':' can delete indent when '{' typed','line_number':1277,'multiline':False]
['text':' May do indenting after opening a new line.','line_number':1290,'multiline':False]
['text':' Find out if the current line starts with a comment leader.','line_number':1295,'multiline':False]
['text':' This may then be inserted in front of the new line.','line_number':1296,'multiline':False]
['text':' Check for a line comment after code.','line_number':1302,'multiline':False]
['text':' replaces comment leader','line_number':1318,'multiline':False]
['text':' length of *lead_repl','line_number':1319,'multiline':False]
['text':' middle-comment string','line_number':1320,'multiline':False]
['text':' end-comment string','line_number':1321,'multiline':False]
['text':' where lead_end has been found','line_number':1322,'multiline':False]
['text':' append extra space','line_number':1323,'multiline':False]
['text':' requires blank after middle','line_number':1325,'multiline':False]
['text':' If the comment leader has the start, middle or end flag, it may not','line_number':1328,'multiline':False]
['text':' be used or may be replaced with the middle leader.','line_number':1329,'multiline':False]
['text':' Doing "O" on a start of comment does not insert leader.','line_number':1338,'multiline':False]
['text':' find start of middle part','line_number':1344,'multiline':False]
['text':' Isolate the strings of the middle and end leader.','line_number':1349,'multiline':False]
['text':' find end of middle flags','line_number':1350,'multiline':False]
['text':' find end of end flags','line_number':1358,'multiline':False]
['text':' Check whether we allow automatic ending of comments','line_number':1359,'multiline':False]
['text':' means we want to set it','line_number':1361,'multiline':False]
['text':' we can set it now','line_number':1367,'multiline':False]
['text':' If the end of the comment is in the same line, don't use','line_number':1371,'multiline':False]
['text':' the comment leader.','line_number':1372,'multiline':False]
['text':' Doing "o" on a start of comment inserts the middle leader.','line_number':1383,'multiline':False]
['text':' If we have hit RETURN immediately after the start','line_number':1390,'multiline':False]
['text':' comment leader, then put a space after the middle','line_number':1391,'multiline':False]
['text':' comment leader on the next line.','line_number':1392,'multiline':False]
['text':' Doing "o" on the end of a comment does not insert leader.','line_number':1405,'multiline':False]
['text':' Remember where the end is, might want to use it to find the','line_number':1406,'multiline':False]
['text':' start (for C-comments).','line_number':1407,'multiline':False]
['text':' Doing "O" on the end of a comment inserts the middle leader.','line_number':1414,'multiline':False]
['text':' Find the string for the middle leader, searching backwards.','line_number':1415,'multiline':False]
['text':' We can probably always add an extra space when doing "O" on','line_number':1423,'multiline':False]
['text':' the comment-end','line_number':1424,'multiline':False]
['text':' Check whether we allow automatic ending of comments','line_number':1427,'multiline':False]
['text':' means we want to set it','line_number':1430,'multiline':False]
['text':' Find last character in end-comment string','line_number':1434,'multiline':False]
['text':' Comment leader for first line only: Don't repeat leader','line_number':1443,'multiline':False]
['text':' when using "O", blank out leader when using "o".','line_number':1444,'multiline':False]
['text':' allocate buffer (may concatenate p_extra later)','line_number':1455,'multiline':False]
['text':' remember to free it later','line_number':1464,'multiline':False]
['text':' TODO(vim): handle multi-byte and double width chars','line_number':1468,'multiline':False]
['text':' Replace leader with lead_repl, right or left adjusted','line_number':1475,'multiline':False]
['text':' right adjusted leader','line_number':1489,'multiline':False]
['text':' find last non-white in the leader to line up with','line_number':1490,'multiline':False]
['text':' Compute the length of the replaced characters in','line_number':1495,'multiline':False]
['text':' screen characters, not bytes.','line_number':1496,'multiline':False]
['text':' blank-out any other chars from the old leader.','line_number':1519,'multiline':False]
['text':' left adjusted leader','line_number':1537,'multiline':False]
['text':' Compute the length of the replaced characters in','line_number':1539,'multiline':False]
['text':' screen characters, not bytes. Move the part that is','line_number':1540,'multiline':False]
['text':' not to be overwritten.','line_number':1541,'multiline':False]
['text':' Replace any remaining non-white chars in the old','line_number':1561,'multiline':False]
['text':' leader by spaces.  Keep Tabs, the indent must','line_number':1562,'multiline':False]
['text':' remain the same.','line_number':1563,'multiline':False]
['text':' Don't put a space before a TAB.','line_number':1566,'multiline':False]
['text':' Replace a double-wide char with','line_number':1575,'multiline':False]
['text':' two spaces','line_number':1576,'multiline':False]
['text':' Recompute the indent, it may have changed.','line_number':1590,'multiline':False]
['text':' Add the indent offset','line_number':1597,'multiline':False]
['text':' Correct trailing spaces for the shift, so that','line_number':1605,'multiline':False]
['text':' alignment remains equal.','line_number':1606,'multiline':False]
['text':' Don't do it when there is a tab before the space','line_number':1609,'multiline':False]
['text':' If the leader ends in white space, don't add an','line_number':1617,'multiline':False]
['text':' extra space','line_number':1618,'multiline':False]
['text':' if a new indent will be set below, remove the indent that','line_number':1632,'multiline':False]
['text':' is in the comment leader','line_number':1633,'multiline':False]
['text':' We have finished a comment, so we don't use the leader.','line_number':1643,'multiline':False]
['text':' If this was a C-comment and 'ai' or 'si' is set do a normal','line_number':1644,'multiline':False]
['text':' indent to align with the line containing the start of the','line_number':1645,'multiline':False]
['text':' comment.','line_number':1646,'multiline':False]
['text':' (State == MODE_INSERT || State == MODE_REPLACE), only when dir == FORWARD','line_number':1660,'multiline':False]
['text':' restore char that NUL replaced','line_number':1662,'multiline':False]
['text':' When 'ai' set or "flags" has OPENLINE_DELSPACES, skip to the first','line_number':1664,'multiline':False]
['text':' non-blank.','line_number':1665,'multiline':False]
['text':'','line_number':1666,'multiline':False]
['text':' When in MODE_REPLACE state, put the deleted blanks on the replace','line_number':1667,'multiline':False]
['text':' stack, preceded by a NUL, so they can be put back when a BS is','line_number':1668,'multiline':False]
['text':' entered.','line_number':1669,'multiline':False]
['text':' end of extra blanks','line_number':1671,'multiline':False]
['text':' columns for marks adjusted for removed columns','line_number':1684,'multiline':False]
['text':' append empty line','line_number':1689,'multiline':False]
['text':' concatenate leader and p_extra, if there is a leader','line_number':1692,'multiline':False]
['text':' Here whitespace is inserted after the comment char.','line_number':1698,'multiline':False]
['text':' Below, set_indent(newindent, SIN_INSERT) will insert the','line_number':1699,'multiline':False]
['text':' whitespace needed before the comment char.','line_number':1700,'multiline':False]
['text':' So truncating blanks works with comments','line_number':1709,'multiline':False]
['text':' turns out there was no leader','line_number':1712,'multiline':False]
['text':' Postpone calling changed_lines(), because it would mess up folding','line_number':1724,'multiline':False]
['text':' with markers.','line_number':1725,'multiline':False]
['text':' In MODE_VREPLACE state we are starting to replace the next line.','line_number':1729,'multiline':False]
['text':' In case we NL to a new line, BS to the previous one, and NL','line_number':1732,'multiline':False]
['text':' again, we don't want to save the new line for undo twice.','line_number':1733,'multiline':False]
['text':' errors are ignored!','line_number':1734,'multiline':False]
['text':' TODO(vigoux): extmark_splice_cols here??','line_number':1739,'multiline':False]
['text':' Copy the indent','line_number':1755,'multiline':False]
['text':' Set the 'preserveindent' option so that any further screwing','line_number':1759,'multiline':False]
['text':' with the line doesn't entirely destroy our efforts to preserve','line_number':1760,'multiline':False]
['text':' it.  It gets restored at the function end.','line_number':1761,'multiline':False]
['text':' In MODE_REPLACE state, for each character in the new indent, there','line_number':1770,'multiline':False]
['text':' must be a NUL on the replace stack, for when it is deleted with BS','line_number':1771,'multiline':False]
['text':' In MODE_REPLACE state, for each character in the extra leader, there','line_number':1784,'multiline':False]
['text':' must be a NUL on the replace stack, for when it is deleted with BS.','line_number':1785,'multiline':False]
['text':' truncate current line at cursor','line_number':1796,'multiline':False]
['text':' Remove trailing white space, unless OPENLINE_KEEPTRAIL used.','line_number':1798,'multiline':False]
['text':' TODO(vigoux): maybe there is issues there with expandtabs ?','line_number':1806,'multiline':False]
['text':' Move marks after the line break to the new line.','line_number':1820,'multiline':False]
['text':' Always move extmarks - Here we move only the line where the','line_number':1826,'multiline':False]
['text':' cursor is, the previous mark_adjust takes care of the lines after','line_number':1827,'multiline':False]
['text':' Put the cursor on the new line.  Careful: the scrollup() above may','line_number':1837,'multiline':False]
['text':' have moved w_cursor, we must use old_cursor.','line_number':1838,'multiline':False]
['text':' bail out and just get the final length of the line we just manipulated','line_number':1842,'multiline':False]
['text':' In MODE_VREPLACE state, we are handling the replace stack ourselves, so','line_number':1853,'multiline':False]
['text':' stop fixthisline() from doing it (via change_indent()) by telling it','line_number':1854,'multiline':False]
['text':' we're in normal MODE_INSERT state.','line_number':1855,'multiline':False]
['text':' So we know to put things right later','line_number':1857,'multiline':False]
['text':' do lisp indenting','line_number':1868,'multiline':False]
['text':' do 'cindent' or 'indentexpr' indenting','line_number':1872,'multiline':False]
['text':' Finally, MODE_VREPLACE gets the stuff on the new line, then puts back','line_number':1882,'multiline':False]
['text':' the original line, and inserts the new stuff char by char, pushing old','line_number':1883,'multiline':False]
['text':' stuff onto the replace stack (via ins_char()).','line_number':1884,'multiline':False]
['text':' Put new line in p_extra','line_number':1886,'multiline':False]
['text':' Put back original line','line_number':1889,'multiline':False]
['text':' Insert new stuff into line again','line_number':1892,'multiline':False]
['text':' will call changed_bytes()','line_number':1895,'multiline':False]
['text':' success!','line_number':1900,'multiline':False]
['text':'/ Delete from cursor to end of line.','line_number':1909,'multiline':False]
['text':'/ Caller must have prepared for undo.','line_number':1910,'multiline':False]
['text':'/ If "fixpos" is true fix the cursor position when done.','line_number':1911,'multiline':False]
['text':' mark the buffer as changed and prepare for displaying','line_number':1925,'multiline':False]
['text':' If "fixpos" is true we don't want to end up positioned at the NUL.','line_number':1928,'multiline':False]
['text':'/ Delete "nlines" lines at the cursor.','line_number':1934,'multiline':False]
['text':'/ Saves the lines for undo first if "undo" is true.','line_number':1935,'multiline':False]
['text':' save the deleted lines for undo','line_number':1945,'multiline':False]
['text':' nothing to delete','line_number':1951,'multiline':False]
['text':' If we delete the last line in the file, stop','line_number':1958,'multiline':False]
['text':' Correct the cursor position before calling deleted_lines_mark(), it may','line_number':1964,'multiline':False]
['text':' trigger a callback to display the cursor.','line_number':1965,'multiline':False]
['text':' adjust marks, mark the buffer as changed and prepare for displaying','line_number':1969,'multiline':False]
['text':'/ Returns the length in bytes of the prefix of the given string which introduces a comment.','line_number':1973,'multiline':False]
['text':'/','line_number':1974,'multiline':False]
['text':'/ If this string is not a comment then 0 is returned.','line_number':1975,'multiline':False]
['text':'/ When "flags" is not NULL, it is set to point to the flags of the recognized comment leader.','line_number':1976,'multiline':False]
['text':'/ "backward" must be true for the "O" command.','line_number':1977,'multiline':False]
['text':'/ If "include_space" is set, include trailing whitespace while calculating the length.','line_number':1978,'multiline':False]
['text':' buffer for one option part','line_number':1983,'multiline':False]
['text':' pointer to comment string','line_number':1984,'multiline':False]
['text':' leading white space is ignored','line_number':1990,'multiline':False]
['text':' Repeat to match several nested comment strings.','line_number':1994,'multiline':False]
['text':' scan through the 'comments' option for a match','line_number':1996,'multiline':False]
['text':' Get one option part into part_buf[].  Advance "list" to next','line_number':1999,'multiline':False]
['text':' one.  Put "string" at start of string.','line_number':2000,'multiline':False]
['text':' remember where flags started','line_number':2002,'multiline':False]
['text':' missing ':', ignore this part','line_number':2007,'multiline':False]
['text':' isolate flags from string','line_number':2010,'multiline':False]
['text':' If we found a middle match previously, use that match when this','line_number':2012,'multiline':False]
['text':' is not a middle or end.','line_number':2013,'multiline':False]
['text':' When we already found a nested comment, only accept further','line_number':2020,'multiline':False]
['text':' nested comments.','line_number':2021,'multiline':False]
['text':' When 'O' flag present and using "O" command skip this one.','line_number':2026,'multiline':False]
['text':' Line contents and string must match.','line_number':2031,'multiline':False]
['text':' When string starts with white space, must have some white space','line_number':2032,'multiline':False]
['text':' (but the amount does not need to match, there might be a mix of','line_number':2033,'multiline':False]
['text':' TABs and spaces).','line_number':2034,'multiline':False]
['text':' missing white space','line_number':2037,'multiline':False]
['text':' string doesn't match','line_number':2045,'multiline':False]
['text':' When 'b' flag used, there must be white space or an','line_number':2047,'multiline':False]
['text':' end-of-line after the string in the line.','line_number':2048,'multiline':False]
['text':' We have found a match, stop searching unless this is a middle','line_number':2054,'multiline':False]
['text':' comment. The middle comment can be a substring of the end','line_number':2055,'multiline':False]
['text':' comment in which case it's better to return the length of the','line_number':2056,'multiline':False]
['text':' end comment and its flags.  Thus we keep searching with middle','line_number':2057,'multiline':False]
['text':' and end matches and use an end match if it matches better.','line_number':2058,'multiline':False]
['text':' Use this match instead of the middle match, since it's a','line_number':2067,'multiline':False]
['text':' longer thus better match.','line_number':2068,'multiline':False]
['text':' Use the previously found middle match after failing to find a','line_number':2080,'multiline':False]
['text':' match with an end.','line_number':2081,'multiline':False]
['text':' No match found, stop scanning.','line_number':2089,'multiline':False]
['text':' Include any trailing white space.','line_number':2096,'multiline':False]
['text':' If this comment doesn't nest, stop here.','line_number':2105,'multiline':False]
['text':'/ Return the offset at which the last comment in line starts. If there is no','line_number':2114,'multiline':False]
['text':'/ comment in the whole line, -1 is returned.','line_number':2115,'multiline':False]
['text':'/','line_number':2116,'multiline':False]
['text':'/ When "flags" is not null, it is set to point to the flags describing the','line_number':2117,'multiline':False]
['text':'/ recognized comment leader.','line_number':2118,'multiline':False]
['text':' buffer for one option part','line_number':2128,'multiline':False]
['text':' Repeat to match several nested comment strings.','line_number':2130,'multiline':False]
['text':' scan through the 'comments' option for a match','line_number':2133,'multiline':False]
['text':' Get one option part into part_buf[].  Advance list to next one.','line_number':2138,'multiline':False]
['text':' put string at start of string.','line_number':2139,'multiline':False]
['text':' If everything is fine, this cannot actually','line_number':2142,'multiline':False]
['text':' happen.','line_number':2143,'multiline':False]
['text':' Isolate flags from string.','line_number':2146,'multiline':False]
['text':' Line contents and string must match.','line_number':2149,'multiline':False]
['text':' When string starts with white space, must have some white space','line_number':2150,'multiline':False]
['text':' (but the amount does not need to match, there might be a mix of','line_number':2151,'multiline':False]
['text':' TABs and spaces).','line_number':2152,'multiline':False]
['text':' do nothing','line_number':2162,'multiline':False]
['text':' When 'b' flag used, there must be white space or an','line_number':2168,'multiline':False]
['text':' end-of-line after the string in the line.','line_number':2169,'multiline':False]
['text':' For a middlepart comment, only consider it to match if','line_number':2176,'multiline':False]
['text':' everything before the current position in the line is','line_number':2177,'multiline':False]
['text':' whitespace.  Otherwise we would think we are inside a','line_number':2178,'multiline':False]
['text':' comment if the middle part appears somewhere in the middle','line_number':2179,'multiline':False]
['text':' of the line.  E.g. for C the "*" appears often.','line_number':2180,'multiline':False]
['text':' We have found a match, stop searching.','line_number':2187,'multiline':False]
['text':' buffer for one option part','line_number':2199,'multiline':False]
['text':' If this comment nests, continue searching.','line_number':2202,'multiline':False]
['text':' Let's verify whether the comment leader found is a substring','line_number':2209,'multiline':False]
['text':' of other comment leaders. If it is, let's adjust the','line_number':2210,'multiline':False]
['text':' lower_check_bound so that we make sure that we have determined','line_number':2211,'multiline':False]
['text':' the comment leader correctly.','line_number':2212,'multiline':False]
['text':' Now we have to verify whether string ends with a substring','line_number':2236,'multiline':False]
['text':' beginning the com_leader.','line_number':2237,'multiline':False]
