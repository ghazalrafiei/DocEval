['text':'
 *  LibXDiff by Davide Libenzi ( File Differential Library )
 *  Copyright (C) 2003-2016 Davide Libenzi, Johannes E. Schindelin
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, see
 *  <http://www.gnu.org/licenses/>.
 *
 *  Davide Libenzi <davidel@xmailserver.org>
 *
 ','line_number':1,'multiline':True]
['text':'
 * The basic idea of patience diff is to find lines that are unique in
 * both files.  These are intuitively the ones that we want to see as
 * common lines.
 *
 * The maximal ordered sequence of such line pairs (where ordered means
 * that the order in the sequence agrees with the order of the lines in
 * both files) naturally defines an initial set of common lines.
 *
 * Now, the algorithm tries to extend the set of common lines by growing
 * the line ranges where the files have identical lines.
 *
 * Between those common lines, the patience diff algorithm is applied
 * recursively, until no unique line pairs can be found; these line ranges
 * are handled by the well-known Myers algorithm.
 ','line_number':24,'multiline':True]
['text':'
 * This is a hash mapping from line hash to line numbers in the first and
 * second file.
 ','line_number':43,'multiline':True]
['text':'
		 * 0 = unused entry, 1 = first line, 2 = second, etc.
		 * line2 is NON_UNIQUE if the line is not unique
		 * in either the first or the second file.
		 ','line_number':51,'multiline':True]
['text':'
		 * "next" & "previous" are used for the longest common
		 * sequence;
		 * initially, "next" reflects only the order in file1.
		 ','line_number':57,'multiline':True]
['text':'
		 * If 1, this entry can serve as an anchor. See
		 * Documentation/diff-options.txt for more information.
		 ','line_number':64,'multiline':True]
['text':' were common records found? ','line_number':70,'multiline':True]
['text':' The argument "pass" is 1 for the first file, 2 for the second. ','line_number':87,'multiline':True]
['text':'
	 * After xdl_prepare_env() (or more precisely, due to
	 * xdl_classify_record()), the "ha" member of the records (AKA lines)
	 * is _not_ the hash anymore, but a linearized version of it.  In
	 * other words, the "ha" member is guaranteed to start with 0 and
	 * the second record's ha can only be 0 or 1, etc.
	 *
	 * So we multiply ha by 2 in the hope that the hashing was
	 * "unique enough".
	 ','line_number':94,'multiline':True]
['text':'
 * This function has to be called for each recursion into the inter-hunk
 * parts, as previously non-unique lines can become unique when being
 * restricted to a smaller part of the files.
 *
 * It is assumed that env has been prepared using xdl_prepare().
 ','line_number':135,'multiline':True]
['text':' We know exactly how large we want the hash map ','line_number':152,'multiline':True]
['text':' First, fill with entries from the first file ','line_number':160,'multiline':True]
['text':' Then search for matches in the second file ','line_number':164,'multiline':True]
['text':'
 * Find the longest sequence with a smaller last element (meaning a smaller
 * line2, as we construct the sequence with entries ordered by line1).
 ','line_number':171,'multiline':True]
['text':' by construction, no two entries can be equal ','line_number':182,'multiline':True]
['text':' return the index in "sequence", _not_ the sequence length ','line_number':188,'multiline':True]
['text':'
 * The idea is to start with the list of common unique lines sorted by
 * the order in file1.  For each of these pairs, the longest (partial)
 * sequence whose last element's line2 is smaller is determined.
 *
 * For efficiency, the sequences are kept in a list containing exactly one
 * item per sequence length: the sequence with the smallest last
 * element (in terms of line2).
 ','line_number':192,'multiline':True]
['text':'
	 * If not -1, this entry in sequence must never be overridden.
	 * Therefore, overriding entries before this has no effect, so
	 * do not do that either.
	 ','line_number':207,'multiline':True]
['text':' Added to silence Coverity.','line_number':214,'multiline':False]
['text':' No common unique lines were found ','line_number':235,'multiline':True]
['text':' Iterate starting at the last element, adjusting the "next" members ','line_number':241,'multiline':True]
['text':' Try to grow the line ranges of common lines ','line_number':270,'multiline':True]
['text':' Recurse ','line_number':289,'multiline':True]
['text':'
 * Recursively find the longest common sequence of unique lines,
 * and if none was found, ask xdl_do_diff() to do the job.
 *
 * This function assumes that env was prepared with xdl_prepare_env().
 ','line_number':325,'multiline':True]
['text':' trivial case: one side is empty ','line_number':339,'multiline':True]
['text':' are there any matching lines at all? ','line_number':355,'multiline':True]
['text':' environment is cleaned up in xdl_diff() ','line_number':383,'multiline':True]
