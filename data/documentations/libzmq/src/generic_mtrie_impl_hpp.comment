['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'  The character is out of range of currently handled','line_number':49,'multiline':False]
['text':'  characters. We have to extend the table.','line_number':50,'multiline':False]
['text':'  The new character is above the current character range.','line_number':67,'multiline':False]
['text':'  The new character is below the current character range.','line_number':76,'multiline':False]
['text':'  If next node does not exist, create one.','line_number':90,'multiline':False]
['text':'  We are at the node corresponding to the prefix. We are done.','line_number':115,'multiline':False]
['text':'  This used to be implemented as a non-tail recursive traversal of the trie,','line_number':137,'multiline':False]
['text':'  which means remote clients controlled the depth of the recursion and the','line_number':138,'multiline':False]
['text':'  stack size.','line_number':139,'multiline':False]
['text':'  To simulate the non-tail recursion, with post-recursion changes depending on','line_number':140,'multiline':False]
['text':'  the result of the recursive call, a stack is used to re-visit the same node','line_number':141,'multiline':False]
['text':'  and operate on it again after children have been visited.','line_number':142,'multiline':False]
['text':'  A boolean is used to record whether the node had already been visited and to','line_number':143,'multiline':False]
['text':'  determine if the pre- or post- children visit actions have to be taken.','line_number':144,'multiline':False]
['text':'  In the case of a node with (N > 1) children, the node has to be re-visited','line_number':145,'multiline':False]
['text':'  N times, in the correct order after each child visit.','line_number':146,'multiline':False]
['text':'  Remove the subscription from this node.','line_number':158,'multiline':False]
['text':'  Adjust the buffer.','line_number':169,'multiline':False]
['text':'  If there are no subnodes in the trie, we are done with this node','line_number':179,'multiline':False]
['text':'  pre-processing.','line_number':180,'multiline':False]
['text':'  If there's one subnode (optimisation).','line_number':183,'multiline':False]
['text':'  Mark this node as pre-processed and push it, so that the next','line_number':186,'multiline':False]
['text':'  visit after the operation on the child can do the removals.','line_number':187,'multiline':False]
['text':'  If there are multiple subnodes.','line_number':202,'multiline':False]
['text':'  When first visiting this node, initialize the new_min/max parameters','line_number':203,'multiline':False]
['text':'  which will then be used after each child has been processed, on the','line_number':204,'multiline':False]
['text':'  post-children iterations.','line_number':205,'multiline':False]
['text':'  New min non-null character in the node table after the removal','line_number':207,'multiline':False]
['text':'  New max non-null character in the node table after the removal','line_number':209,'multiline':False]
['text':'  Mark this node as pre-processed and push it, so that the next','line_number':213,'multiline':False]
['text':'  visit after the operation on the child can do the removals.','line_number':214,'multiline':False]
['text':'  Reset back for the next time, in case this node doesn't get deleted.','line_number':233,'multiline':False]
['text':'  This is done unconditionally, unlike when setting this variable to true.','line_number':234,'multiline':False]
['text':'  If there are no subnodes in the trie, we are done with this node','line_number':239,'multiline':False]
['text':'  post-processing.','line_number':240,'multiline':False]
['text':'  If there's one subnode (optimisation).','line_number':243,'multiline':False]
['text':'  Prune the node if it was made redundant by the removal','line_number':245,'multiline':False]
['text':'  If there are multiple subnodes.','line_number':254,'multiline':False]
['text':'  Prune redundant nodes from the mtrie','line_number':257,'multiline':False]
['text':'  The node is not redundant, so it's a candidate for being','line_number':266,'multiline':False]
['text':'  the new min/max node.','line_number':267,'multiline':False]
['text':'','line_number':268,'multiline':False]
['text':'  We loop through the node array from left to right, so the','line_number':269,'multiline':False]
['text':'  first non-null, non-redundant node encountered is the new','line_number':270,'multiline':False]
['text':'  minimum index. Conversely, the last non-redundant, non-null','line_number':271,'multiline':False]
['text':'  node encountered is the new maximum index.','line_number':272,'multiline':False]
['text':'  If there are more children to visit, push again the current','line_number':284,'multiline':False]
['text':'  node, so that pre-processing can happen on the next child.','line_number':285,'multiline':False]
['text':'  If we are done, reset the child index so that the ::rm is','line_number':286,'multiline':False]
['text':'  fully idempotent.','line_number':287,'multiline':False]
['text':'  All children have been visited and removed if needed, and','line_number':296,'multiline':False]
['text':'  all pre- and post-visit operations have been carried.','line_number':297,'multiline':False]
['text':'  Resize/free the node table if needed.','line_number':298,'multiline':False]
['text':'  Free the node table if it's no longer used.','line_number':301,'multiline':False]
['text':'  Compact the node table if possible','line_number':309,'multiline':False]
['text':'  If there's only one live node in the table we can','line_number':311,'multiline':False]
['text':'  switch to using the more compact single-node','line_number':312,'multiline':False]
['text':'  representation','line_number':313,'multiline':False]
['text':'  This used to be implemented as a non-tail recursive traversal of the trie,','line_number':379,'multiline':False]
['text':'  which means remote clients controlled the depth of the recursion and the','line_number':380,'multiline':False]
['text':'  stack size.','line_number':381,'multiline':False]
['text':'  To simulate the non-tail recursion, with post-recursion changes depending on','line_number':382,'multiline':False]
['text':'  the result of the recursive call, a stack is used to re-visit the same node','line_number':383,'multiline':False]
['text':'  and operate on it again after children have been visited.','line_number':384,'multiline':False]
['text':'  A boolean is used to record whether the node had already been visited and to','line_number':385,'multiline':False]
['text':'  determine if the pre- or post- children visit actions have to be taken.','line_number':386,'multiline':False]
['text':'  Compact the table if possible','line_number':454,'multiline':False]
['text':'  If there's only one live node in the table we can','line_number':456,'multiline':False]
['text':'  switch to using the more compact single-node','line_number':457,'multiline':False]
['text':'  representation','line_number':458,'multiline':False]
['text':'  We can compact the table "from the left"','line_number':472,'multiline':False]
['text':'  We can compact the table "from the right"','line_number':491,'multiline':False]
['text':'  Signal the pipes attached to this node.','line_number':529,'multiline':False]
['text':'  If we are at the end of the message, there's nothing more to match.','line_number':538,'multiline':False]
['text':'  If there are no subnodes in the trie, return.','line_number':542,'multiline':False]
['text':'  If there's one subnode (optimisation).','line_number':547,'multiline':False]
['text':'  If there are multiple subnodes.','line_number':553,'multiline':False]
