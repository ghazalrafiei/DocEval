['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'  raw_socket functionality in ROUTER is deprecated','line_number':23,'multiline':False]
['text':' zmq_assert (rc) is not applicable here, since it is not a bug.','line_number':59,'multiline':False]
['text':'  If this is the first part of the message it's the ID of the','line_number':163,'multiline':False]
['text':'  peer to send the message to.','line_number':164,'multiline':False]
['text':'  If we have malformed message (prefix with no subsequent message)','line_number':168,'multiline':False]
['text':'  then just silently ignore it.','line_number':169,'multiline':False]
['text':'  TODO: The connections should be killed instead.','line_number':170,'multiline':False]
['text':'  Find the pipe associated with the routing id stored in the prefix.','line_number':174,'multiline':False]
['text':'  If there's no such pipe just silently ignore the message, unless','line_number':175,'multiline':False]
['text':'  router_mandatory is set.','line_number':176,'multiline':False]
['text':' Check whether pipe is closed or not','line_number':184,'multiline':False]
['text':' Check whether pipe is full or not','line_number':186,'multiline':False]
['text':'  Ignore the MORE flag for raw-sock or assert?','line_number':214,'multiline':False]
['text':'  Check whether this is the last part of the message.','line_number':218,'multiline':False]
['text':'  Push the message into the pipe. If there's no out pipe, just drop it.','line_number':221,'multiline':False]
['text':' Close the remote connection if user has asked to do so','line_number':223,'multiline':False]
['text':' by sending zero length message.','line_number':224,'multiline':False]
['text':' Pending messages in the pipe will be dropped (on receiving term- ack)','line_number':225,'multiline':False]
['text':' Message failed to send - we must close it ourselves.','line_number':238,'multiline':False]
['text':' HWM was checked before, so the pipe must be gone. Roll back','line_number':241,'multiline':False]
['text':' messages that were piped, for example REP labels.','line_number':242,'multiline':False]
['text':'  Detach the message from the data buffer.','line_number':256,'multiline':False]
['text':'  It's possible that we receive peer's routing id. That happens','line_number':290,'multiline':False]
['text':'  after reconnection. The current implementation assumes that','line_number':291,'multiline':False]
['text':'  the peer always uses the same routing id.','line_number':292,'multiline':False]
['text':'  If we are in the middle of reading a message, just return the next part.','line_number':301,'multiline':False]
['text':'  We are at the beginning of a message.','line_number':313,'multiline':False]
['text':'  Keep the message part we have in the prefetch buffer','line_number':314,'multiline':False]
['text':'  and return the ID of the peer instead.','line_number':315,'multiline':False]
['text':'  If we are in the middle of reading the messages, there are','line_number':346,'multiline':False]
['text':'  definitely more parts available.','line_number':347,'multiline':False]
['text':'  We may already have a message pre-fetched.','line_number':351,'multiline':False]
['text':'  Try to read the next message.','line_number':355,'multiline':False]
['text':'  The message, if read, is kept in the pre-fetch buffer.','line_number':356,'multiline':False]
['text':'  It's possible that we receive peer's routing id. That happens','line_number':360,'multiline':False]
['text':'  after reconnection. The current implementation assumes that','line_number':361,'multiline':False]
['text':'  the peer always uses the same routing id.','line_number':362,'multiline':False]
['text':'  TODO: handle the situation when the peer changes its routing id.','line_number':363,'multiline':False]
['text':'  In theory, ROUTER socket is always ready for writing (except when','line_number':394,'multiline':False]
['text':'  MANDATORY is set). Whether actual attempt to write succeeds depends','line_number':395,'multiline':False]
['text':'  on which pipe the message is going to be routed to.','line_number':396,'multiline':False]
['text':' TODO remove the const_cast, see comment in lookup_out_pipe','line_number':409,'multiline':False]
['text':'* \todo does it make any sense to check the inpipe as well? ','line_number':422,'multiline':True]
['text':'  Not allowed to duplicate an existing rid','line_number':437,'multiline':False]
['text':'  Always assign an integral routing id for raw-socket','line_number':441,'multiline':False]
['text':'  Pick up handshake cases and also case where next integral routing id is set','line_number':447,'multiline':False]
['text':'  Fall back on the auto-generation','line_number':454,'multiline':False]
['text':'  Try to remove an existing routing id entry to allow the new','line_number':465,'multiline':False]
['text':'  connection to take the routing id.','line_number':466,'multiline':False]
['text':'  Ignore peers with duplicate ID','line_number':472,'multiline':False]
['text':'  We will allow the new connection to take over this','line_number':475,'multiline':False]
['text':'  routing id. Temporarily assign a new routing id to the','line_number':476,'multiline':False]
['text':'  existing pipe so we can terminate it asynchronously.','line_number':477,'multiline':False]
