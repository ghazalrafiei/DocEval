['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':' These headers end up pulling in zmq.h somewhere in their include','line_number':16,'multiline':False]
['text':' dependency chain','line_number':17,'multiline':False]
['text':'  Macros for repetitive code.','line_number':32,'multiline':False]
['text':'  PROXY_CLEANUP() must not be used before these variables are initialized.','line_number':34,'multiline':False]
['text':'  ZMQ_HAVE_POLLER','line_number':55,'multiline':False]
['text':'  Copy message to capture socket if any','line_number':60,'multiline':False]
['text':' Forward a burst of messages','line_number':96,'multiline':False]
['text':' Forward all the parts of one message','line_number':101,'multiline':False]
['text':' End of burst','line_number':106,'multiline':False]
['text':'  Copy message to capture socket if any','line_number':120,'multiline':False]
['text':' Handle control request [5]PAUSE, [6]RESUME, [9]TERMINATE,','line_number':146,'multiline':False]
['text':' [10]STATISTICS.  Only STATISTICS results in a send.','line_number':147,'multiline':False]
['text':' The stats are a cross product:','line_number':165,'multiline':False]
['text':'','line_number':166,'multiline':False]
['text':' (Front,Back) X (Recv,Sent) X (Number,Bytes).','line_number':167,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':' that is flattened into sequence of 8 message parts according to the','line_number':169,'multiline':False]
['text':' zmq_proxy_steerable(3) documentation as:','line_number':170,'multiline':False]
['text':'','line_number':171,'multiline':False]
['text':' (frn, frb, fsn, fsb, brn, brb, bsn, bsb)','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':' f=front/b=back, r=recv/s=send, n=number/b=bytes.','line_number':174,'multiline':False]
['text':' satisfy REP duty and reply no matter what.','line_number':204,'multiline':False]
['text':'  The algorithm below assumes ratio of requests and replies processed','line_number':225,'multiline':False]
['text':'  under full load to be 1:1.','line_number':226,'multiline':False]
['text':'  Proxy can be in these three states','line_number':228,'multiline':False]
['text':' increase to 4 if we have control_','line_number':237,'multiline':False]
['text':'  Don't allocate these pollers from stack because they will take more than 900 kB of stack!','line_number':241,'multiline':False]
['text':'  On Windows this blows up default stack of 1 MB and aborts the program.','line_number':242,'multiline':False]
['text':'  I wanted to use std::shared_ptr here as the best solution but that requires C++11...','line_number':243,'multiline':False]
['text':'  Poll for everything.','line_number':245,'multiline':False]
['text':'  Poll only 'ZMQ_POLLIN' on all sockets. Initial blocking poll in loop.','line_number':247,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on 'frontend_'.','line_number':249,'multiline':False]
['text':'  If frontend_==backend_ 'poller_send_blocked' and 'poller_receive_blocked' are the same, 'ZMQ_POLLIN' is ignored.','line_number':251,'multiline':False]
['text':'  In that case 'poller_send_blocked' is not used. We need only 'poller_receive_blocked'.','line_number':252,'multiline':False]
['text':'  We also don't need 'poller_both_blocked', 'poller_backend_only' nor 'poller_frontend_only' no need to initialize it.','line_number':253,'multiline':False]
['text':'  We save some RAM and time for initialization.','line_number':254,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on 'backend_'.','line_number':256,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on both 'frontend_' and 'backend_'.','line_number':258,'multiline':False]
['text':'  Only 'ZMQ_POLLIN' and 'ZMQ_POLLOUT' on 'frontend_'.','line_number':260,'multiline':False]
['text':'  Only 'ZMQ_POLLIN' and 'ZMQ_POLLOUT' on 'backend_'.','line_number':262,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on 'backend_'.','line_number':266,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on both 'frontend_' and 'backend_'.','line_number':268,'multiline':False]
['text':'  Only 'ZMQ_POLLIN' and 'ZMQ_POLLOUT' on 'frontend_'.','line_number':270,'multiline':False]
['text':'  Only 'ZMQ_POLLIN' and 'ZMQ_POLLOUT' on 'backend_'.','line_number':272,'multiline':False]
['text':'  Poller for blocking wait, initially all 'ZMQ_POLLIN'.','line_number':286,'multiline':False]
['text':'  Register 'frontend_' and 'backend_' with pollers.','line_number':288,'multiline':False]
['text':'  Everything.','line_number':290,'multiline':False]
['text':'  All 'ZMQ_POLLIN's.','line_number':292,'multiline':False]
['text':'  If frontend_==backend_ 'poller_send_blocked' and 'poller_receive_blocked' are the same,','line_number':296,'multiline':False]
['text':'  so we don't need 'poller_send_blocked'. We need only 'poller_receive_blocked'.','line_number':297,'multiline':False]
['text':'  We also don't need 'poller_both_blocked', no need to initialize it.','line_number':298,'multiline':False]
['text':'  Everything.','line_number':303,'multiline':False]
['text':'  All 'ZMQ_POLLIN's.','line_number':305,'multiline':False]
['text':'  Waiting only for 'ZMQ_POLLOUT'.','line_number':308,'multiline':False]
['text':'  Waiting only for 'ZMQ_POLLOUT'.','line_number':311,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on 'backend_'.','line_number':315,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on 'backend_'.','line_number':319,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on 'frontend_'.','line_number':323,'multiline':False]
['text':'  All except 'ZMQ_POLLIN' on 'frontend_'.','line_number':327,'multiline':False]
['text':' wherever you go, there you are.','line_number':340,'multiline':False]
['text':'  Blocking wait initially only for 'ZMQ_POLLIN' - 'poller_wait' points to 'poller_in'.','line_number':367,'multiline':False]
['text':'  If one of receiving end's queue is full ('ZMQ_POLLOUT' not available),','line_number':368,'multiline':False]
['text':'  'poller_wait' is pointed to 'poller_receive_blocked', 'poller_send_blocked' or 'poller_both_blocked'.','line_number':369,'multiline':False]
['text':'  Some of events waited for by 'poller_wait' have arrived, now poll for everything without blocking.','line_number':375,'multiline':False]
['text':'  Process events.','line_number':381,'multiline':False]
['text':'  This 'if' needs to be after check for 'frontend_' in order never','line_number':393,'multiline':False]
['text':'  to be reached in case frontend_==backend_, so we ensure backend_in=false in that case.','line_number':394,'multiline':False]
['text':'  Process a request, 'ZMQ_POLLIN' on 'frontend_' and 'ZMQ_POLLOUT' on 'backend_'.','line_number':402,'multiline':False]
['text':'  In case of frontend_==backend_ there's no 'ZMQ_POLLOUT' event.','line_number':403,'multiline':False]
['text':'  Process a reply, 'ZMQ_POLLIN' on 'backend_' and 'ZMQ_POLLOUT' on 'frontend_'.','line_number':413,'multiline':False]
['text':'  If 'frontend_' and 'backend_' are the same this is not needed because previous processing','line_number':414,'multiline':False]
['text':'  covers all of the cases. 'backend_in' is always false if frontend_==backend_ due to','line_number':415,'multiline':False]
['text':'  design in 'for' event processing loop.','line_number':416,'multiline':False]
['text':'  If request/reply is processed that means we had at least one 'ZMQ_POLLOUT' event.','line_number':427,'multiline':False]
['text':'  Enable corresponding 'ZMQ_POLLIN' for blocking wait if any was disabled.','line_number':428,'multiline':False]
['text':'  'frontend_' -> 'backend_'','line_number':430,'multiline':False]
['text':'  'backend_' -> 'frontend_'','line_number':437,'multiline':False]
['text':'  No requests have been processed, there were no 'ZMQ_POLLIN' with corresponding 'ZMQ_POLLOUT' events.','line_number':446,'multiline':False]
['text':'  That means that out queue(s) is/are full or one out queue is full and second one has no messages to process.','line_number':447,'multiline':False]
['text':'  Disable receiving 'ZMQ_POLLIN' for sockets for which there's no 'ZMQ_POLLOUT',','line_number':448,'multiline':False]
['text':'  or wait only on both 'backend_''s or 'frontend_''s 'ZMQ_POLLIN' and 'ZMQ_POLLOUT'.','line_number':449,'multiline':False]
['text':' If frontend_in and frontend_out are true, obviously backend_in and backend_out are both false.','line_number':452,'multiline':False]
['text':' In that case we need to wait for both 'ZMQ_POLLIN' and 'ZMQ_POLLOUT' only on 'backend_'.','line_number':453,'multiline':False]
['text':' We'll never get here in case of frontend_==backend_ because then frontend_out will always be false.','line_number':454,'multiline':False]
['text':'  Will never be reached if frontend_==backend_, 'backend_in' will','line_number':464,'multiline':False]
['text':'  always be false due to design in 'for' event processing loop.','line_number':465,'multiline':False]
['text':' If backend_in and backend_out are true, obviously frontend_in and frontend_out are both false.','line_number':467,'multiline':False]
['text':' In that case we need to wait for both 'ZMQ_POLLIN' and 'ZMQ_POLLOUT' only on 'frontend_'.','line_number':468,'multiline':False]
['text':'  ZMQ_HAVE_POLLER','line_number':484,'multiline':False]
['text':'  The algorithm below assumes ratio of requests and replies processed','line_number':496,'multiline':False]
['text':'  under full load to be 1:1.','line_number':497,'multiline':False]
['text':'  Proxy can be in these three states','line_number':509,'multiline':False]
['text':'  Wait while there are either requests or replies to process.','line_number':513,'multiline':False]
['text':'  Get the pollout separately because when combining this with pollin it maxes the CPU','line_number':524,'multiline':False]
['text':'  because pollout shall most of the time return directly.','line_number':525,'multiline':False]
['text':'  POLLOUT is only checked when frontend and backend sockets are not the same.','line_number':526,'multiline':False]
['text':'  Process a reply','line_number':541,'multiline':False]
['text':'  ZMQ_HAVE_POLLER','line_number':555,'multiline':False]
