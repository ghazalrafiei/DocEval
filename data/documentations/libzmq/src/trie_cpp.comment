['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'  We are at the node corresponding to the prefix. We are done.','line_number':32,'multiline':False]
['text':'  The character is out of range of currently handled','line_number':40,'multiline':False]
['text':'  characters. We have to extend the table.','line_number':41,'multiline':False]
['text':'  The new character is above the current character range.','line_number':58,'multiline':False]
['text':'  The new character is below the current character range.','line_number':67,'multiline':False]
['text':'  If next node does not exist, create one.','line_number':81,'multiline':False]
['text':'  TODO: Shouldn't an error be reported if the key does not exist?','line_number':102,'multiline':False]
['text':'  Prune redundant nodes','line_number':120,'multiline':False]
['text':'  The just pruned node is was the only live node','line_number':126,'multiline':False]
['text':'  Compact the table if possible','line_number':136,'multiline':False]
['text':'  We can switch to using the more compact single-node','line_number':138,'multiline':False]
['text':'  representation since the table only contains one live node','line_number':139,'multiline':False]
['text':'  Since we always compact the table the pruned node must','line_number':141,'multiline':False]
['text':'  either be the left-most or right-most ptr in the node','line_number':142,'multiline':False]
['text':'  table','line_number':143,'multiline':False]
['text':'  The pruned node is the left-most node ptr in the','line_number':145,'multiline':False]
['text':'  node table => keep the right-most node','line_number':146,'multiline':False]
['text':'  The pruned node is the right-most node ptr in the','line_number':150,'multiline':False]
['text':'  node table => keep the left-most node','line_number':151,'multiline':False]
['text':'  We can compact the table "from the left".','line_number':159,'multiline':False]
['text':'  Find the left-most non-null node ptr, which we'll use as','line_number':160,'multiline':False]
['text':'  our new min','line_number':161,'multiline':False]
['text':'  We can compact the table "from the right".','line_number':186,'multiline':False]
['text':'  Find the right-most non-null node ptr, which we'll use to','line_number':187,'multiline':False]
['text':'  determine the new table size','line_number':188,'multiline':False]
['text':'  This function is on critical path. It deliberately doesn't use','line_number':214,'multiline':False]
['text':'  recursion to get a bit better performance.','line_number':215,'multiline':False]
['text':'  We've found a corresponding subscription!','line_number':218,'multiline':False]
['text':'  We've checked all the data and haven't found matching subscription.','line_number':222,'multiline':False]
['text':'  If there's no corresponding slot for the first character','line_number':226,'multiline':False]
['text':'  of the prefix, the message does not match.','line_number':227,'multiline':False]
['text':'  Move to the next character.','line_number':232,'multiline':False]
['text':'  If this node is a subscription, apply the function.','line_number':261,'multiline':False]
['text':'  Adjust the buffer.','line_number':265,'multiline':False]
['text':'  If there are no subnodes in the trie, return.','line_number':272,'multiline':False]
['text':'  If there's one subnode (optimisation).','line_number':276,'multiline':False]
['text':'  If there are multiple subnodes.','line_number':284,'multiline':False]
