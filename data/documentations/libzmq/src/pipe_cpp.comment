['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'   Creates two pipe objects. These objects are connected by two ypipes,','line_number':19,'multiline':False]
['text':'   each to pass messages in one direction.','line_number':20,'multiline':False]
['text':'  Peer can be set once only.','line_number':110,'multiline':False]
['text':' Sink can be set once only.','line_number':117,'multiline':False]
['text':'  Check if there's an item in the pipe.','line_number':151,'multiline':False]
['text':'  If the next item in the pipe is message delimiter,','line_number':157,'multiline':False]
['text':'  initiate termination process.','line_number':158,'multiline':False]
['text':'  If this is a credential, ignore it and receive next message.','line_number':183,'multiline':False]
['text':'  If delimiter was read, start termination process of the pipe.','line_number':192,'multiline':False]
['text':'  Remove incomplete message from the outbound pipe.','line_number':238,'multiline':False]
['text':'  The peer does not exist anymore at this point.','line_number':251,'multiline':False]
['text':'  Remember the peer's message sequence number.','line_number':269,'multiline':False]
['text':'  Destroy old outpipe. Note that the read end of the pipe was already','line_number':280,'multiline':False]
['text':'  migrated to this thread.','line_number':281,'multiline':False]
['text':'  Plug in the new outpipe.','line_number':293,'multiline':False]
['text':'  If appropriate, notify the user about the hiccup.','line_number':298,'multiline':False]
['text':'  This is the simple case of peer-induced termination. If there are no','line_number':308,'multiline':False]
['text':'  more pending messages to read, or if the pipe was configured to drop','line_number':309,'multiline':False]
['text':'  pending messages, we can move directly to the term_ack_sent state.','line_number':310,'multiline':False]
['text':'  Otherwise we'll hang up in waiting_for_delimiter state till all','line_number':311,'multiline':False]
['text':'  pending messages are read.','line_number':312,'multiline':False]
['text':'  Delimiter happened to arrive before the term command. Now we have the','line_number':323,'multiline':False]
['text':'  term command as well, so we can move straight to term_ack_sent state.','line_number':324,'multiline':False]
['text':'  This is the case where both ends of the pipe are closed in parallel.','line_number':331,'multiline':False]
['text':'  We simply reply to the request by ack and continue waiting for our','line_number':332,'multiline':False]
['text':'  own ack.','line_number':333,'multiline':False]
['text':'  Notify the user that all the references to the pipe should be dropped.','line_number':343,'multiline':False]
['text':'  In term_ack_sent and term_req_sent2 states there's nothing to do.','line_number':347,'multiline':False]
['text':'  Simply deallocate the pipe. In term_req_sent1 state we have to ack','line_number':348,'multiline':False]
['text':'  the peer before deallocating this side of the pipe.','line_number':349,'multiline':False]
['text':'  All the other states are invalid.','line_number':350,'multiline':False]
['text':'  We'll deallocate the inbound pipe, the peer will deallocate the outbound','line_number':357,'multiline':False]
['text':'  pipe (which is an inbound pipe from its point of view).','line_number':358,'multiline':False]
['text':'  First, delete all the unread messages in the pipe. We have to do it by','line_number':359,'multiline':False]
['text':'  hand because msg_t doesn't have automatic destructor. Then deallocate','line_number':360,'multiline':False]
['text':'  the ypipe itself.','line_number':361,'multiline':False]
['text':'  Deallocate the pipe object','line_number':373,'multiline':False]
['text':'  Overload the value specified at pipe creation.','line_number':389,'multiline':False]
['text':'  If terminate was already called, we can ignore the duplicate invocation.','line_number':392,'multiline':False]
['text':'  If the pipe is in the final phase of async termination, it's going to','line_number':396,'multiline':False]
['text':'  closed anyway. No need to do anything special here.','line_number':397,'multiline':False]
['text':'  The simple sync termination case. Ask the peer to terminate and wait','line_number':401,'multiline':False]
['text':'  for the ack.','line_number':402,'multiline':False]
['text':'  There are still pending messages available, but the user calls','line_number':407,'multiline':False]
['text':'  'terminate'. We can act as if all the pending messages were read.','line_number':408,'multiline':False]
['text':'  Drop any unfinished outbound messages.','line_number':410,'multiline':False]
['text':'  If there are pending messages still available, do nothing.','line_number':416,'multiline':False]
['text':'  We've already got delimiter, but not term command yet. We can ignore','line_number':419,'multiline':False]
['text':'  the delimiter and ack synchronously terminate as if we were in','line_number':420,'multiline':False]
['text':'  active state.','line_number':421,'multiline':False]
['text':'  There are no other states.','line_number':426,'multiline':False]
['text':'  Stop outbound flow of messages.','line_number':431,'multiline':False]
['text':'  Drop any unfinished outbound messages.','line_number':435,'multiline':False]
['text':'  Write the delimiter into the pipe. Note that watermarks are not','line_number':438,'multiline':False]
['text':'  checked; thus the delimiter can be written even when the pipe is full.','line_number':439,'multiline':False]
['text':'  Compute the low water mark. Following point should be taken','line_number':454,'multiline':False]
['text':'  into consideration:','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':'  1. LWM has to be less than HWM.','line_number':457,'multiline':False]
['text':'  2. LWM cannot be set to very low value (such as zero) as after filling','line_number':458,'multiline':False]
['text':'     the queue it would start to refill only after all the messages are','line_number':459,'multiline':False]
['text':'     read from it and thus unnecessarily hold the progress back.','line_number':460,'multiline':False]
['text':'  3. LWM cannot be set to very high value (such as HWM-1) as it would','line_number':461,'multiline':False]
['text':'     result in lock-step filling of the queue - if a single message is','line_number':462,'multiline':False]
['text':'     read from a full queue, writer thread is resumed to write exactly one','line_number':463,'multiline':False]
['text':'     message to the queue and go back to sleep immediately. This would','line_number':464,'multiline':False]
['text':'     result in low performance.','line_number':465,'multiline':False]
['text':'','line_number':466,'multiline':False]
['text':'  Given the 3. it would be good to keep HWM and LWM as far apart as','line_number':467,'multiline':False]
['text':'  possible to reduce the thread switching overhead to almost zero.','line_number':468,'multiline':False]
['text':'  Let's make LWM 1/2 of HWM.','line_number':469,'multiline':False]
['text':'  If termination is already under way do nothing.','line_number':491,'multiline':False]
['text':'  We'll drop the pointer to the inpipe. From now on, the peer is','line_number':495,'multiline':False]
['text':'  responsible for deallocating it.','line_number':496,'multiline':False]
['text':'  Create new inpipe.','line_number':498,'multiline':False]
['text':'  Notify the peer about the hiccup.','line_number':507,'multiline':False]
['text':' if either send or recv side has hwm <= 0 it means infinite so we should set hwms infinite','line_number':516,'multiline':False]
['text':' Rollback any incomplete message in the pipe, and push the disconnect message.','line_number':574,'multiline':False]
