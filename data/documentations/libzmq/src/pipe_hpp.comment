['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'  Create a pipepair for bi-directional transfer of messages.','line_number':20,'multiline':False]
['text':'  First HWM is for messages passed from first pipe to the second pipe.','line_number':21,'multiline':False]
['text':'  Second HWM is for messages passed from second pipe to the first pipe.','line_number':22,'multiline':False]
['text':'  Delay specifies how the pipe behaves when the peer terminates. If true','line_number':23,'multiline':False]
['text':'  pipe receives all the pending messages before terminating, otherwise it','line_number':24,'multiline':False]
['text':'  terminates straight away.','line_number':25,'multiline':False]
['text':'  If conflate is true, only the most recently arrived message could be','line_number':26,'multiline':False]
['text':'  read (older messages are discarded)','line_number':27,'multiline':False]
['text':'  Note that pipe can be stored in three different arrays.','line_number':43,'multiline':False]
['text':'  The array of inbound pipes (1), the array of outbound pipes (2) and','line_number':44,'multiline':False]
['text':'  the generic array of pipes to be deallocated (3).','line_number':45,'multiline':False]
['text':'  This allows pipepair to create pipe objects.','line_number':52,'multiline':False]
['text':'  Specifies the object to send events to.','line_number':59,'multiline':False]
['text':'  Pipe endpoint can store an routing ID to be used by its clients.','line_number':62,'multiline':False]
['text':'  Pipe endpoint can store an opaque ID to be used by its clients.','line_number':66,'multiline':False]
['text':'  Returns true if there is at least one message to read in the pipe.','line_number':70,'multiline':False]
['text':'  Reads a message to the underlying pipe.','line_number':73,'multiline':False]
['text':'  Checks whether messages can be written to the pipe. If the pipe is','line_number':76,'multiline':False]
['text':'  closed or if writing the message would cause high watermark the','line_number':77,'multiline':False]
['text':'  function returns false.','line_number':78,'multiline':False]
['text':'  Writes a message to the underlying pipe. Returns false if the','line_number':81,'multiline':False]
['text':'  message does not pass check_write. If false, the message object','line_number':82,'multiline':False]
['text':'  retains ownership of its message buffer.','line_number':83,'multiline':False]
['text':'  Remove unfinished parts of the outbound message from the pipe.','line_number':86,'multiline':False]
['text':'  Flush the messages downstream.','line_number':89,'multiline':False]
['text':'  Temporarily disconnects the inbound message stream and drops','line_number':92,'multiline':False]
['text':'  all the messages on the fly. Causes 'hiccuped' event to be generated','line_number':93,'multiline':False]
['text':'  in the peer.','line_number':94,'multiline':False]
['text':'  Ensure the pipe won't block on receiving pipe_term.','line_number':97,'multiline':False]
['text':'  Ask pipe to terminate. The termination will happen asynchronously','line_number':100,'multiline':False]
['text':'  and user will be notified about actual deallocation by 'terminated'','line_number':101,'multiline':False]
['text':'  event. If delay is true, the pending messages will be processed','line_number':102,'multiline':False]
['text':'  before actual shutdown.','line_number':103,'multiline':False]
['text':'  Set the high water marks.','line_number':106,'multiline':False]
['text':'  Set the boost to high water marks, used by inproc sockets so total hwm are sum of connect and bind sockets watermarks','line_number':109,'multiline':False]
['text':' send command to peer for notify the change of hwm','line_number':112,'multiline':False]
['text':'  Returns true if HWM is not reached','line_number':115,'multiline':False]
['text':'  Type of the underlying lock-free pipe.','line_number':129,'multiline':False]
['text':'  Command handlers.','line_number':132,'multiline':False]
['text':'  Handler for delimiter read from the pipe.','line_number':144,'multiline':False]
['text':'  Constructor is private. Pipe can only be created using','line_number':147,'multiline':False]
['text':'  pipepair function.','line_number':148,'multiline':False]
['text':'  Pipepair uses this function to let us know about','line_number':156,'multiline':False]
['text':'  the peer pipe object.','line_number':157,'multiline':False]
['text':'  Destructor is private. Pipe objects destroy themselves.','line_number':160,'multiline':False]
['text':'  Underlying pipes for both directions.','line_number':163,'multiline':False]
['text':'  Can the pipe be read from / written to?','line_number':167,'multiline':False]
['text':'  High watermark for the outbound pipe.','line_number':171,'multiline':False]
['text':'  Low watermark for the inbound pipe.','line_number':174,'multiline':False]
['text':' boosts for high and low watermarks, used with inproc sockets so hwm are sum of send and recv hmws on each side of pipe','line_number':177,'multiline':False]
['text':'  Number of messages read and written so far.','line_number':181,'multiline':False]
['text':'  Last received peer's msgs_read. The actual number in the peer','line_number':185,'multiline':False]
['text':'  can be higher at the moment.','line_number':186,'multiline':False]
['text':'  The pipe object on the other side of the pipepair.','line_number':189,'multiline':False]
['text':'  Sink to send events to.','line_number':192,'multiline':False]
['text':'  States of the pipe endpoint:','line_number':195,'multiline':False]
['text':'  active: common state before any termination begins,','line_number':196,'multiline':False]
['text':'  delimiter_received: delimiter was read from pipe before','line_number':197,'multiline':False]
['text':'      term command was received,','line_number':198,'multiline':False]
['text':'  waiting_for_delimiter: term command was already received','line_number':199,'multiline':False]
['text':'      from the peer but there are still pending messages to read,','line_number':200,'multiline':False]
['text':'  term_ack_sent: all pending messages were already read and','line_number':201,'multiline':False]
['text':'      all we are waiting for is ack from the peer,','line_number':202,'multiline':False]
['text':'  term_req_sent1: 'terminate' was explicitly called by the user,','line_number':203,'multiline':False]
['text':'  term_req_sent2: user called 'terminate' and then we've got','line_number':204,'multiline':False]
['text':'      term command from the peer as well.','line_number':205,'multiline':False]
['text':'  If true, we receive all the pending inbound messages before','line_number':216,'multiline':False]
['text':'  terminating. If false, we terminate immediately when the peer','line_number':217,'multiline':False]
['text':'  asks us to.','line_number':218,'multiline':False]
['text':'  Routing id of the writer. Used uniquely by the reader side.','line_number':221,'multiline':False]
['text':'  Routing id of the writer. Used uniquely by the reader side.','line_number':224,'multiline':False]
['text':'  Returns true if the message is delimiter; false otherwise.','line_number':227,'multiline':False]
['text':'  Computes appropriate low watermark from the given high watermark.','line_number':230,'multiline':False]
['text':' The endpoints of this pipe.','line_number':235,'multiline':False]
['text':' Disconnect msg','line_number':238,'multiline':False]
