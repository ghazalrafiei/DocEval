['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':' Wrapper type for a node's data layout.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' There are 3 32-bit unsigned integers that act as a header. These','line_number':13,'multiline':False]
['text':' integers represent the following values in this order:','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' (1) The reference count of the key held by the node. This is 0 if','line_number':16,'multiline':False]
['text':' the node doesn't hold a key.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' (2) The number of characters in the node's prefix. The prefix is a','line_number':19,'multiline':False]
['text':' part of one or more keys in the tree, e.g. the prefix of each node','line_number':20,'multiline':False]
['text':' in a trie consists of a single character.','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' (3) The number of outgoing edges from this node.','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' The rest of the layout consists of 3 chunks in this order:','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' (1) The node's prefix as a sequence of one or more bytes. The root','line_number':27,'multiline':False]
['text':' node always has an empty prefix, unlike other nodes in the tree.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' (2) The first byte of the prefix of each of this node's children.','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' (3) The pointer to each child node.','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' The link to each child is looked up using its index, e.g. the child','line_number':34,'multiline':False]
['text':' with index 0 will have its first byte and node pointer at the start','line_number':35,'multiline':False]
['text':' of the chunk of first bytes and node pointers respectively.','line_number':36,'multiline':False]
['text':'  Add key to the tree. Returns true if this was a new key rather','line_number':95,'multiline':False]
['text':'  than a duplicate.','line_number':96,'multiline':False]
['text':'  Remove key from the tree. Returns true if the item is actually','line_number':99,'multiline':False]
['text':'  removed from the tree.','line_number':100,'multiline':False]
['text':'  Check whether particular key is in the tree.','line_number':103,'multiline':False]
['text':'  Apply the function supplied to each key in the tree.','line_number':106,'multiline':False]
['text':'  Retrieve size of the radix tree. Note this is a multithread safe function.','line_number':110,'multiline':False]
