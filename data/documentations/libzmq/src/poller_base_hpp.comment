['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':' A build of libzmq must provide an implementation of the poller_t concept. By','line_number':16,'multiline':False]
['text':' convention, this is done via a typedef.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' At the time of writing, the following implementations of the poller_t','line_number':19,'multiline':False]
['text':' concept exist: zmq::devpoll_t, zmq::epoll_t, zmq::kqueue_t, zmq::poll_t,','line_number':20,'multiline':False]
['text':' zmq::pollset_t, zmq::select_t','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' An implementation of the poller_t concept must provide the following public','line_number':23,'multiline':False]
['text':' methods:','line_number':24,'multiline':False]
['text':'   Returns load of the poller.','line_number':25,'multiline':False]
['text':' int get_load() const;','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'   Add a timeout to expire in timeout_ milliseconds. After the','line_number':28,'multiline':False]
['text':'   expiration, timer_event on sink_ object will be called with','line_number':29,'multiline':False]
['text':'   argument set to id_.','line_number':30,'multiline':False]
['text':' void add_timer(int timeout_, zmq::i_poll_events *sink_, int id_);','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'   Cancel the timer created by sink_ object with ID equal to id_.','line_number':33,'multiline':False]
['text':' void cancel_timer(zmq::i_poll_events *sink_, int id_);','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'   Adds a fd to the poller. Initially, no events are activated. These must','line_number':36,'multiline':False]
['text':'   be activated by the set_* methods using the returned handle_.','line_number':37,'multiline':False]
['text':' handle_t add_fd(fd_t fd_, zmq::i_poll_events *events_);','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'   Deactivates any events that may be active for the given handle_, and','line_number':40,'multiline':False]
['text':'   removes the fd associated with the given handle_.','line_number':41,'multiline':False]
['text':' void rm_fd(handle_t handle_);','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':'   The set_* and reset_* methods activate resp. deactivate polling for','line_number':44,'multiline':False]
['text':'   input/output readiness on the respective handle_, such that the','line_number':45,'multiline':False]
['text':'   in_event/out_event methods on the associated zmq::i_poll_events object','line_number':46,'multiline':False]
['text':'   will be called.','line_number':47,'multiline':False]
['text':'   Note: while handle_t and fd_t may be the same type, and may even have the','line_number':48,'multiline':False]
['text':'   same values for some implementation, this may not be assumed in general.','line_number':49,'multiline':False]
['text':'   The methods may only be called with the handle returned by add_fd.','line_number':50,'multiline':False]
['text':' void set_pollin(handle_t handle_);','line_number':51,'multiline':False]
['text':' void reset_pollin(handle_t handle_);','line_number':52,'multiline':False]
['text':' void set_pollout(handle_t handle_);//','line_number':53,'multiline':False]
['text':' void reset_pollout(handle_t handle_);','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':'   Starts operation of the poller. See below for details.','line_number':56,'multiline':False]
['text':' void start();','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':'   Request termination of the poller.','line_number':59,'multiline':False]
['text':'   TODO: might be removed in the future, as it has no effect.','line_number':60,'multiline':False]
['text':' void stop();','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':'   Returns the maximum number of fds that can be added to an instance of the','line_number':63,'multiline':False]
['text':'   poller at the same time, or -1 if there is no such fixed limit.','line_number':64,'multiline':False]
['text':' static int max_fds();','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':' Most of the methods may only be called from a zmq::i_poll_events callback','line_number':67,'multiline':False]
['text':' function when invoked by the poller (and, therefore, typically from the','line_number':68,'multiline':False]
['text':' poller's worker thread), with the following exceptions:','line_number':69,'multiline':False]
['text':' - get_load may be called from outside','line_number':70,'multiline':False]
['text':' - add_fd and add_timer may be called from outside before start','line_number':71,'multiline':False]
['text':' - start may be called from outside once','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' After a poller is started, it waits for the registered events (input/output','line_number':74,'multiline':False]
['text':' readiness, timeout) to happen, and calls the respective functions on the','line_number':75,'multiline':False]
['text':' zmq::i_poll_events object. It terminates when no further registrations (fds','line_number':76,'multiline':False]
['text':' or timers) exist.','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':' Before start, add_fd must have been called at least once. Behavior may be','line_number':79,'multiline':False]
['text':' undefined otherwise.','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':' If the poller is implemented by a single worker thread (the','line_number':82,'multiline':False]
['text':' worker_poller_base_t base  class may be used to implement such a poller),','line_number':83,'multiline':False]
['text':' no synchronization is required for the data structures modified by','line_number':84,'multiline':False]
['text':' add_fd, rm_fd, add_timer, cancel_timer, (re)set_poll(in|out). However,','line_number':85,'multiline':False]
['text':' reentrancy must be considered, e.g. when one of the functions modifies','line_number':86,'multiline':False]
['text':' a container that is being iterated by the poller.','line_number':87,'multiline':False]
['text':' A class that can be used as abase class for implementations of the poller','line_number':90,'multiline':False]
['text':' concept.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':' For documentation of the public methods, see the description of the poller_t','line_number':93,'multiline':False]
['text':' concept.','line_number':94,'multiline':False]
['text':' Methods from the poller concept.','line_number':101,'multiline':False]
['text':'  Called by individual poller implementations to manage the load.','line_number':107,'multiline':False]
['text':'  Executes any timers that are due. Returns number of milliseconds','line_number':110,'multiline':False]
['text':'  to wait to match the next timer or 0 meaning "no timers".','line_number':111,'multiline':False]
['text':'  Clock instance private to this I/O thread.','line_number':115,'multiline':False]
['text':'  List of active timers.','line_number':118,'multiline':False]
['text':'  Load of the poller. Currently the number of file descriptors','line_number':127,'multiline':False]
['text':'  registered.','line_number':128,'multiline':False]
['text':'  Base class for a poller with a single worker thread.','line_number':134,'multiline':False]
['text':' Methods from the poller concept.','line_number':140,'multiline':False]
['text':'  Checks whether the currently executing thread is the worker thread','line_number':144,'multiline':False]
['text':'  via an assertion.','line_number':145,'multiline':False]
['text':'  Should be called by the add_fd, removed_fd, set_*, reset_* functions','line_number':146,'multiline':False]
['text':'  to ensure correct usage.','line_number':147,'multiline':False]
['text':'  Stops the worker thread. Should be called from the destructor of the','line_number':150,'multiline':False]
['text':'  leaf class.','line_number':151,'multiline':False]
['text':'  Main worker thread routine.','line_number':155,'multiline':False]
['text':' Reference to ZMQ context.','line_number':160,'multiline':False]
['text':'  Handle of the physical thread doing the I/O work.','line_number':163,'multiline':False]
