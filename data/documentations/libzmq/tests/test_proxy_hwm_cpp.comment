['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'','line_number':10,'multiline':False]
['text':' Asynchronous proxy test using ZMQ_XPUB_NODROP and HWM:','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' Topology:','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'   XPUB                      SUB','line_number':15,'multiline':False]
['text':'    |                         |','line_number':16,'multiline':False]
['text':'    \-----> XSUB -> XPUB -----/','line_number':17,'multiline':False]
['text':'           ^^^^^^^^^^^^^^','line_number':18,'multiline':False]
['text':'             ZMQ proxy','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' All connections use "inproc" transport and have artificially-low HWMs set.','line_number':21,'multiline':False]
['text':' Then the PUB socket starts flooding the Proxy. The SUB is artificially slow','line_number':22,'multiline':False]
['text':' at receiving messages.','line_number':23,'multiline':False]
['text':' This scenario simulates what happens when a SUB is slower than','line_number':24,'multiline':False]
['text':' its (X)PUB: since ZMQ_XPUB_NODROP=1, the XPUB will block and then','line_number':25,'multiline':False]
['text':' also the (X)PUB socket will block.','line_number':26,'multiline':False]
['text':' The exact number of the messages that go through before (X)PUB blocks depends','line_number':27,'multiline':False]
['text':' on ZeroMQ internals and how the OS will schedule the different threads.','line_number':28,'multiline':False]
['text':' In the meanwhile asking statistics to the Proxy must NOT be blocking.','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':' Wait before starting TX operations till 1 subscriber has subscribed','line_number':73,'multiline':False]
['text':' (in this test there's 1 subscriber only)','line_number':74,'multiline':False]
['text':' Fill in message content with 'AAAAAA' ','line_number':84,'multiline':True]
['text':' Send the message to the socket ','line_number':87,'multiline':True]
['text':' VERIFY EXPECTED RESULTS','line_number':97,'multiline':False]
['text':' EXPLANATION FOR TX TO BE CONSIDERED SUCCESSFUL:','line_number':98,'multiline':False]
['text':' this test has 3 threads doing I/O across 2 queues. Depending on the scheduling,','line_number':99,'multiline':False]
['text':' it might happen that 20, 30 or 40 messages go through before the pub blocks.','line_number':100,'multiline':False]
['text':' That's because the receiver thread gets kicked once every (hwm_ + 1) / 2 sent','line_number':101,'multiline':False]
['text':' messages (search for zeromq sources compute_lwm function).','line_number':102,'multiline':False]
['text':' So depending on the scheduling of the second thread, the publisher might get one,','line_number':103,'multiline':False]
['text':' two or three more batches in. The ceiling is 40 as there's 2 queues.','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' CLEANUP','line_number':108,'multiline':False]
['text':' receive all sent messages','line_number':128,'multiline':False]
['text':' after receiving 1st message, set a finite timeout (default is infinite)','line_number':141,'multiline':False]
['text':' VERIFY EXPECTED RESULTS','line_number':153,'multiline':False]
['text':' EXPLANATION FOR RX TO BE CONSIDERED SUCCESSFUL:','line_number':154,'multiline':False]
['text':' see publisher thread why we have 3 possible outcomes as number of RX messages','line_number':155,'multiline':False]
['text':' INFORM THAT WE COMPLETED:','line_number':159,'multiline':False]
['text':' CLEANUP','line_number':163,'multiline':False]
['text':' CONTROL REQ','line_number':173,'multiline':False]
['text':' this one can be used to send command to the proxy','line_number':177,'multiline':False]
['text':' connect CONTROL-REQ: a socket to which send commands','line_number':180,'multiline':False]
['text':' IMPORTANT: by setting the tx/rx timeouts, we avoid getting blocked when interrogating a proxy which is','line_number':185,'multiline':False]
['text':'            itself blocked in a zmq_msg_send() on its XPUB socket having ZMQ_XPUB_NODROP=1!','line_number':186,'multiline':False]
['text':' Start!','line_number':204,'multiline':False]
['text':' 1ms -> in best case we will get 1000updates/second','line_number':207,'multiline':False]
['text':' FRONTEND SUB','line_number':219,'multiline':False]
['text':' the frontend is the one exposed to internal threads (INPROC)','line_number':223,'multiline':False]
['text':' bind FRONTEND','line_number':228,'multiline':False]
['text':' BACKEND PUB','line_number':233,'multiline':False]
['text':' the backend is the one exposed to the external world (TCP)','line_number':237,'multiline':False]
['text':' bind BACKEND','line_number':247,'multiline':False]
['text':' CONTROL REP','line_number':252,'multiline':False]
['text':' this one is used by the proxy to receive&reply to commands','line_number':256,'multiline':False]
['text':' bind CONTROL','line_number':259,'multiline':False]
['text':' start proxying!','line_number':264,'multiline':False]
['text':' The main thread simply starts several clients and a server, and then','line_number':274,'multiline':False]
['text':' waits for the server to finish.','line_number':275,'multiline':False]
['text':' START ALL SECONDARY THREADS','line_number':285,'multiline':False]
['text':' CLEANUP','line_number':305,'multiline':False]
