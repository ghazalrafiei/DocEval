['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':' TEST 1.','line_number':12,'multiline':False]
['text':' First we're going to attempt to send messages to two','line_number':13,'multiline':False]
['text':' pipes, one connected, the other not. We should see','line_number':14,'multiline':False]
['text':' the PUSH load balancing to both pipes, and hence half','line_number':15,'multiline':False]
['text':' of the messages getting queued, as connect() creates a','line_number':16,'multiline':False]
['text':' pipe immediately.','line_number':17,'multiline':False]
['text':' Bind the one valid receiver','line_number':24,'multiline':False]
['text':' Create a socket pushing to two endpoints - only 1 message should arrive.','line_number':30,'multiline':False]
['text':' This pipe will not connect','line_number':38,'multiline':False]
['text':' This pipe will','line_number':40,'multiline':False]
['text':' We send 10 messages, 5 should just get stuck in the queue','line_number':43,'multiline':False]
['text':' for the not-yet-connected pipe','line_number':44,'multiline':False]
['text':' We now consume from the connected pipe','line_number':50,'multiline':False]
['text':' - we should see just 5','line_number':51,'multiline':False]
['text':'  Break when we didn't get a message','line_number':62,'multiline':False]
['text':' TEST 2','line_number':76,'multiline':False]
['text':' This time we will do the same thing, connect two pipes,','line_number':77,'multiline':False]
['text':' one of which will succeed in connecting to a bound','line_number':78,'multiline':False]
['text':' receiver, the other of which will fail. However, we will','line_number':79,'multiline':False]
['text':' also set the delay attach on connect flag, which should','line_number':80,'multiline':False]
['text':' cause the pipe attachment to be delayed until the connection','line_number':81,'multiline':False]
['text':' succeeds.','line_number':82,'multiline':False]
['text':' Bind the valid socket','line_number':84,'multiline':False]
['text':' Create a socket pushing to two endpoints - all messages should arrive.','line_number':95,'multiline':False]
['text':' Set the key flag','line_number':104,'multiline':False]
['text':' Connect to the invalid socket','line_number':109,'multiline':False]
['text':' Connect to the valid socket','line_number':111,'multiline':False]
['text':' Send 10 messages, all should be routed to the connected pipe','line_number':114,'multiline':False]
['text':'  Break when we didn't get a message','line_number':129,'multiline':False]
['text':' TEST 3','line_number':141,'multiline':False]
['text':' This time we want to validate that the same blocking behaviour','line_number':142,'multiline':False]
['text':' occurs with an existing connection that is broken. We will send','line_number':143,'multiline':False]
['text':' messages to a connected pipe, disconnect and verify the messages','line_number':144,'multiline':False]
['text':' block. Then we reconnect and verify messages flow again.','line_number':145,'multiline':False]
['text':'  Frontend connects to backend using DELAY_ATTACH_ON_CONNECT','line_number':163,'multiline':False]
['text':'  Ping backend to frontend so we know when the connection is up','line_number':171,'multiline':False]
['text':' Send message from frontend to backend','line_number':175,'multiline':False]
['text':' Wait for disconnect to happen','line_number':180,'multiline':False]
['text':' Send a message, might succeed depending on scheduling of the I/O thread','line_number':183,'multiline':False]
['text':'  Recreate backend socket','line_number':189,'multiline':False]
['text':'  Ping backend to frontend so we know when the connection is up','line_number':195,'multiline':False]
['text':' After the reconnect, should succeed','line_number':199,'multiline':False]
