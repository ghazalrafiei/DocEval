['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':' author: E. G. Patrick Bos, Netherlands eScience Center, 2021','line_number':3,'multiline':False]
['text':' memset','line_number':8,'multiline':False]
['text':' types.h and wait.h for waitpid:','line_number':9,'multiline':False]
['text':'signum','line_number':15,'multiline':True]
['text':' Get a random TCP port first ','line_number':53,'multiline':True]
['text':' retry if fork fails','line_number':62,'multiline':False]
['text':' parent','line_number':64,'multiline':False]
['text':' to make sure we don't hang when the child has already exited at the end, we set a receive timeout of five seconds','line_number':67,'multiline':False]
['text':' bind is on the master process to avoid zombie children to hold on to binds','line_number':72,'multiline':False]
['text':' first send a test message to check whether the signal mask is setup in the child process','line_number':74,'multiline':False]
['text':' then send the signal','line_number':78,'multiline':False]
['text':' for good measure, and to make sure everything went as expected, close off with another handshake, which will trigger the second poll call on the other side','line_number':81,'multiline':False]
['text':' in case the 1 second sleep was not enough on the child side, we are also fine with an EAGAIN here','line_number':83,'multiline':False]
['text':' finish','line_number':86,'multiline':False]
['text':' wait for child','line_number':90,'multiline':False]
['text':' retry on interrupted system call','line_number':96,'multiline':False]
['text':' child','line_number':113,'multiline':False]
['text':' set up signal mask and install handler for SIGTERM','line_number':115,'multiline':False]
['text':' first receive test message and send back handshake','line_number':132,'multiline':False]
['text':' now start ppolling, which should exit with EINTR because of the SIGTERM','line_number':136,'multiline':False]
['text':' poll again for the final handshake','line_number':141,'multiline':False]
['text':' receive and send back handshake','line_number':145,'multiline':False]
['text':' finish','line_number':149,'multiline':False]
['text':' wait before closing socket, so that parent has time to receive','line_number':150,'multiline':False]
['text':' ZMQ_HAVE_PPOLL','line_number':158,'multiline':False]
['text':' We note that using zmq_poll instead of zmq_ppoll in the test above, while','line_number':161,'multiline':False]
['text':' also not using the sigmask, will fail most of the time, because it is','line_number':162,'multiline':False]
['text':' impossible to predict during which call the signal will be handled. Of','line_number':163,'multiline':False]
['text':' course, every call could be surrounded with an EINTR check and a subsequent','line_number':164,'multiline':False]
['text':' check of sigterm_received's value, but even then a race condition can occur,','line_number':165,'multiline':False]
['text':' see the explanation given here: https://250bpm.com/blog:12/','line_number':166,'multiline':False]
