['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'  This test requires a KRB5 environment with the following','line_number':10,'multiline':False]
['text':'  service principal (substitute your host.domain and REALM):','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':'    zmqtest2/host.domain@REALM   (host.domain should be host running test)','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'  Export keys for this principal to a keytab file and set the environment','line_number':15,'multiline':False]
['text':'  variables KRB5_KTNAME and KRB5_CLIENT_KTNAME to FILE:/path/to/your/keytab.','line_number':16,'multiline':False]
['text':'  The test will use it both for client and server roles.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':'  The test is derived in large part from test_security_curve.cpp','line_number':19,'multiline':False]
['text':'  --------------------------------------------------------------------------','line_number':25,'multiline':False]
['text':'  This methods receives and validates ZAP requests (allowing or denying','line_number':26,'multiline':False]
['text':'  each client connection).','line_number':27,'multiline':False]
['text':'  N.B. on failure, each crypto type in keytab will be tried','line_number':28,'multiline':False]
['text':'  Process ZAP requests forever','line_number':32,'multiline':False]
['text':'  Terminating','line_number':36,'multiline':False]
['text':'fprintf (stderr, "ALLOW %s\n", principal);','line_number':56,'multiline':False]
['text':'fprintf (stderr, "DENY %s\n", principal);','line_number':62,'multiline':False]
['text':'  Spawn ZAP handler','line_number':97,'multiline':False]
['text':'  We create and bind ZAP socket in main thread to avoid case','line_number':98,'multiline':False]
['text':'  where child thread does not start up fast enough.','line_number':99,'multiline':False]
['text':'  Server socket will accept connections','line_number':104,'multiline':False]
['text':'  Monitor handshake events on the server','line_number':116,'multiline':False]
['text':'  Create socket for collecting monitor events','line_number':122,'multiline':False]
['text':'  Connect it to the inproc endpoints so they'll get events','line_number':125,'multiline':False]
['text':'  Shutdown','line_number':132,'multiline':False]
['text':'  Wait until ZAP handler terminates','line_number':139,'multiline':False]
['text':'  Check security with valid but unauthorized credentials','line_number':163,'multiline':False]
['text':'  Note: ZAP may see multiple requests - after a failure, client will','line_number':164,'multiline':False]
['text':'  fall back to other crypto types for principal, if available.','line_number':165,'multiline':False]
['text':'  Check GSSAPI security with NULL client credentials','line_number':186,'multiline':False]
['text':'  This must be caught by the gssapi_server class, not passed to ZAP','line_number':187,'multiline':False]
['text':'  Check GSSAPI security with PLAIN client credentials','line_number':201,'multiline':False]
['text':'  This must be caught by the curve_server class, not passed to ZAP','line_number':202,'multiline':False]
['text':' Unauthenticated messages from a vanilla socket shouldn't be received','line_number':215,'multiline':False]
['text':' send anonymous ZMTP/1.0 greeting','line_number':219,'multiline':False]
['text':' send sneaky message that shouldn't be received','line_number':221,'multiline':False]
['text':' Avoid entanglements with user's credential cache','line_number':235,'multiline':False]
