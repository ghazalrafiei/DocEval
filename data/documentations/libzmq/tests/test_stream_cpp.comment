['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'  ZMTP protocol greeting structure','line_number':10,'multiline':False]
['text':'  0xFF 8*0x00 0x7F','line_number':15,'multiline':False]
['text':'  0x03 0x01 for ZMTP/3.1','line_number':16,'multiline':False]
['text':'  "NULL"','line_number':17,'multiline':False]
['text':'  Socket type constants','line_number':22,'multiline':False]
['text':'  This is a greeting matching what 0MQ will send us; note the','line_number':24,'multiline':False]
['text':'  8-byte size is set to 1 for backwards compatibility','line_number':25,'multiline':False]
['text':'  We'll be using this socket in raw mode','line_number':35,'multiline':False]
['text':'  We'll be using this socket as the other peer','line_number':46,'multiline':False]
['text':'  Send a message on the dealer socket','line_number':52,'multiline':False]
['text':'  Connecting sends a zero message','line_number':55,'multiline':False]
['text':'  First frame is routing id','line_number':56,'multiline':False]
['text':'  Verify the existence of Peer-Address metadata','line_number':62,'multiline':False]
['text':'  Second frame is zero','line_number':67,'multiline':False]
['text':'  Verify the existence of Peer-Address metadata','line_number':72,'multiline':False]
['text':'  Real data follows','line_number':77,'multiline':False]
['text':'  First frame is routing id','line_number':78,'multiline':False]
['text':'  Verify the existence of Peer-Address metadata','line_number':82,'multiline':False]
['text':'  Second frame is greeting signature','line_number':87,'multiline':False]
['text':'  Send our own protocol greeting','line_number':90,'multiline':False]
['text':'  Now we expect the data from the DEALER socket','line_number':96,'multiline':False]
['text':'  We want the rest of greeting along with the Ready command','line_number':97,'multiline':False]
['text':'  First frame is the routing id of the connection (each time)','line_number':100,'multiline':False]
['text':'  Second frame contains the next chunk of data','line_number':104,'multiline':False]
['text':'  First two bytes are major and minor version numbers.','line_number':110,'multiline':False]
['text':'  ZMTP/3.1','line_number':111,'multiline':False]
['text':'  Mechanism is "NULL"','line_number':114,'multiline':False]
['text':'  Announce we are ready','line_number':122,'multiline':False]
['text':'  Send Ready command','line_number':127,'multiline':False]
['text':'  Now we expect the data from the DEALER socket','line_number':133,'multiline':False]
['text':'  First frame is, again, the routing id of the connection','line_number':134,'multiline':False]
['text':'  Third frame contains Hello message from DEALER','line_number':139,'multiline':False]
['text':'  Then we have a 5-byte message "Hello"','line_number':143,'multiline':False]
['text':'  Flags = 0','line_number':144,'multiline':False]
['text':'  Size = 5','line_number':145,'multiline':False]
['text':'  Send "World" back to DEALER','line_number':148,'multiline':False]
['text':'  Expect response on DEALER socket','line_number':156,'multiline':False]
['text':'  Test large messages over STREAM socket','line_number':159,'multiline':False]
['text':'  Get routing id frame','line_number':169,'multiline':False]
['text':'  Get next chunk','line_number':172,'multiline':False]
['text':'  Set-up our context and sockets','line_number':190,'multiline':False]
['text':'  Connecting sends a zero message','line_number':205,'multiline':False]
['text':'  Server: First frame is routing id, second frame is zero','line_number':206,'multiline':False]
['text':'  Client: First frame is routing id, second frame is zero','line_number':211,'multiline':False]
['text':'  Sent HTTP request on client socket','line_number':217,'multiline':False]
['text':'  Get server routing id','line_number':218,'multiline':False]
['text':'  First frame is server routing id','line_number':222,'multiline':False]
['text':'  Second frame is HTTP GET request','line_number':225,'multiline':False]
['text':'  Get HTTP request; ID frame and then request','line_number':229,'multiline':False]
['text':'  Send reply back to client','line_number':235,'multiline':False]
['text':'  Send zero to close connection to client','line_number':244,'multiline':False]
['text':'  Get reply at client and check that it's complete','line_number':248,'multiline':False]
['text':' //  Get disconnection notification','line_number':257,'multiline':False]
['text':' FIXME: why does this block? Bug in STREAM disconnect notification?','line_number':258,'multiline':False]
['text':' id_size = zmq_recv (client, id, 256, 0);','line_number':259,'multiline':False]
['text':' assert (id_size > 0);','line_number':260,'multiline':False]
['text':' rc = zmq_recv (client, buffer, 256, 0);','line_number':261,'multiline':False]
['text':' assert (rc == 0);','line_number':262,'multiline':False]
