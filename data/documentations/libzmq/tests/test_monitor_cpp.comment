['text':' SPDX-License-Identifier: MPL-2.0 ','line_number':1,'multiline':True]
['text':'  Socket monitoring only works over inproc://','line_number':17,'multiline':False]
['text':'  Stats command needs to be called on a valid socket with monitoring','line_number':22,'multiline':False]
['text':'  enabled','line_number':23,'multiline':False]
['text':'  We'll monitor these two sockets','line_number':35,'multiline':False]
['text':'  Monitor all events on client and server sockets','line_number':39,'multiline':False]
['text':'  Create two sockets for collecting monitor events','line_number':45,'multiline':False]
['text':'  Connect these to the inproc endpoints so they'll get events','line_number':49,'multiline':False]
['text':'  Now do a basic ping test','line_number':55,'multiline':False]
['text':'  Close client and server','line_number':61,'multiline':False]
['text':'  TODO why does this use zero_linger?','line_number':62,'multiline':False]
['text':'  Now collect and check events from both sockets','line_number':66,'multiline':False]
['text':'  This is the flow of server events','line_number':79,'multiline':False]
['text':'  Sometimes the server sees the client closing before it gets closed.','line_number':84,'multiline':False]
['text':'  TODO: When not waiting until the monitor stopped, the I/O thread runs','line_number':92,'multiline':False]
['text':'  into some deadlock. This must be fixed, but until it is fixed, we wait','line_number':93,'multiline':False]
['text':'  here in order to have more reliable test execution.','line_number':94,'multiline':False]
['text':'  Close down the sockets','line_number':99,'multiline':False]
['text':'  TODO why does this use zero_linger?','line_number':100,'multiline':False]
['text':'  Socket monitoring only works with ZMQ_PAIR, ZMQ_PUB and ZMQ_PUSH.','line_number':112,'multiline':False]
['text':'  Create a unique endpoint for each call so we don't have','line_number':128,'multiline':False]
['text':'  to wait for the sockets to unbind.','line_number':129,'multiline':False]
['text':'  We'll monitor these two sockets','line_number':135,'multiline':False]
['text':'  Monitor all events on client and server sockets','line_number':139,'multiline':False]
['text':'  Choose the appropriate consumer socket type.','line_number':145,'multiline':False]
['text':'  Create two sockets for collecting monitor events','line_number':159,'multiline':False]
['text':'  Additionally subscribe to all events if a PUB socket is used.','line_number':163,'multiline':False]
['text':'  Connect these to the inproc endpoints so they'll get events','line_number':171,'multiline':False]
['text':'  Now do a basic ping test','line_number':175,'multiline':False]
['text':'  Close client and server','line_number':187,'multiline':False]
['text':'  TODO why does this use zero_linger?','line_number':188,'multiline':False]
['text':'  Now collect and check events from both sockets','line_number':195,'multiline':False]
['text':'  This is the flow of server events','line_number':221,'multiline':False]
['text':'  Sometimes the server sees the client closing before it gets closed.','line_number':229,'multiline':False]
['text':'  TODO: When not waiting until the monitor stopped, the I/O thread runs','line_number':237,'multiline':False]
['text':'  into some deadlock. This must be fixed, but until it is fixed, we wait','line_number':238,'multiline':False]
['text':'  here in order to have more reliable test execution.','line_number':239,'multiline':False]
['text':'  Close down the sockets','line_number':246,'multiline':False]
['text':'  TODO why does this use zero_linger?','line_number':247,'multiline':False]
['text':'  We'll monitor these two sockets','line_number':292,'multiline':False]
['text':'  Should fail if there are no pipes to monitor','line_number':298,'multiline':False]
['text':'  Set lower HWM - queues will be filled so we should see it in the stats','line_number':305,'multiline':False]
['text':'  Set very low TCP buffers so that messages cannot be stored in-flight','line_number':309,'multiline':False]
['text':'  Send until we block','line_number':333,'multiline':False]
['text':'  Saturate the TCP buffers too','line_number':335,'multiline':False]
['text':'  Saturate all pipes - send + receive - on all connections','line_number':338,'multiline':False]
['text':'  Drain one of the pulls - doesn't matter how many messages, at least one','line_number':345,'multiline':False]
['text':'  To kick the application thread, do a dummy getsockopt - users here','line_number':352,'multiline':False]
['text':'  should use the monitor and the other sockets in a poll.','line_number':353,'multiline':False]
['text':'  Note that the pipe stats on the sender will not get updated until the','line_number':357,'multiline':False]
['text':'  receiver has processed at least lwm ((hwm + 1) / 2) messages AND until','line_number':358,'multiline':False]
['text':'  the application thread has ran through the mailbox, as the update is','line_number':359,'multiline':False]
['text':'  delivered via a message (send_activate_write)','line_number':360,'multiline':False]
['text':'  Ask for stats and check that they match','line_number':363,'multiline':False]
['text':'  Close client and server','line_number':387,'multiline':False]
['text':' ZMQ_EVENT_PIPES_STATS','line_number':411,'multiline':False]
