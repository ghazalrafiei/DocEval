['text':'************************************************
*               pcre2grep program                *
************************************************','line_number':1,'multiline':True]
['text':' This is a grep program that uses the 8-bit PCRE regular expression library
via the PCRE2 updated API to do its pattern matching. On Unix-like, Windows,
and native z/OS systems it can recurse into directories, and in z/OS it can
handle PDS files.

Note that for native z/OS, in addition to defining the NATIVE_ZOS macro, an
additional header is required. That header is not included in the main PCRE2
distribution because other apparatus is needed to compile pcre2grep for z/OS.
The header can be found in the special z/OS distribution, which is available
from www.zaconsultants.net or from www.cbttape.org.

           Copyright (c) 1997-2020 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
','line_number':5,'multiline':True]
['text':' Some CMake's define it still ','line_number':66,'multiline':True]
['text':' For _setmode() ','line_number':78,'multiline':True]
['text':' For _O_BINARY ','line_number':79,'multiline':True]
['text':' Older versions of MSVC lack snprintf(). This define allows for
warning/error-free compilation and testing with MSVC compilers back to at least
MSVC 10/2010. Except for VC6 (which is missing some fundamentals and fails). ','line_number':105,'multiline':True]
['text':' old VC and older compilers don't support %td or %zu, and even some that claim to
be C99 don't support it (hence DISABLE_PERCENT_ZT). ','line_number':113,'multiline':True]
['text':' Values for the "filenames" variable, which specifies options for file name
output. The order is important; it is assumed that a file name is wanted for
all values greater than FN_DEFAULT. ','line_number':143,'multiline':True]
['text':' File reading styles ','line_number':149,'multiline':True]
['text':' Actions for the -d and -D options ','line_number':153,'multiline':True]
['text':' Actions for special processing options (flag bits) ','line_number':158,'multiline':True]
['text':' Binary file options ','line_number':164,'multiline':True]
['text':' Return values from decode_dollar_escape() ','line_number':168,'multiline':True]
['text':' In newer versions of gcc, with FORTIFY_SOURCE set (the default in some
environments), a warning is issued if the value of fwrite() is ignored.
Unfortunately, casting to (void) does not suppress the warning. To get round
this, we use a macro that compiles a fudge. Oddly, this does not also seem to
apply to fprintf(). ','line_number':172,'multiline':True]
['text':' Under Windows, we have to set stdout to be binary, so that it does not
convert \r\n at the ends of output lines to \r\r\n. However, that means that
any messages written to stdout must have \r\n as their line terminator. This is
handled by using STDOUT_NL as the newline string. We also use a normal double
quote for the example, as single quotes aren't usually available. ','line_number':180,'multiline':True]
['text':' This code is returned from decode_dollar_escape() when $n is encountered,
and used to mean "output STDOUT_NL". It is, of course, not a valid Unicode code
point. ','line_number':196,'multiline':True]
['text':'************************************************
*               Global variables                 *
************************************************','line_number':204,'multiline':True]
['text':' Jeffrey Friedl has some debugging requirements that are not part of the
regular code. ','line_number':208,'multiline':True]
['text':' Not long, so that it works with OP_NUMBER ','line_number':232,'multiline':True]
['text':' Structure for list of --only-matching capturing numbers. ','line_number':289,'multiline':True]
['text':' Structure for holding the two variables that describe a number chain. ','line_number':300,'multiline':True]
['text':' Structure for list of file names (for -f and --{in,ex}clude-from) ','line_number':309,'multiline':True]
['text':' Structure for holding the two variables that describe a file name chain. ','line_number':326,'multiline':True]
['text':' Structure for pattern and its compiled form; used for matching patterns and
also for include/exclude patterns. ','line_number':338,'multiline':True]
['text':' Structure holding the two variables that describe a pattern chain. A pointer
to such structures is used for each appropriate option. ','line_number':359,'multiline':True]
['text':' Structure for options and list of them ','line_number':379,'multiline':True]
['text':' Options without a single-letter equivalent get a negative value. This can be
used to identify them. ','line_number':392,'multiline':True]
['text':' Table of names for newline types. Must be kept in step with the definitions
of PCRE2_NEWLINE_xx in pcre2.h. ','line_number':488,'multiline':True]
['text':' UTF-8 tables  ','line_number':494,'multiline':True]
['text':'************************************************
*    Emulated memmove() for systems without it   *
************************************************','line_number':511,'multiline':True]
['text':' This function can make use of bcopy() if it is available. Otherwise do it by
steam, as there are some non-Unix environments that lack both memmove() and
bcopy(). ','line_number':515,'multiline':True]
['text':' not HAVE_BCOPY ','line_number':541,'multiline':True]
['text':' not VPCOMPAT && not HAVE_MEMMOVE ','line_number':545,'multiline':True]
['text':'************************************************
*           Convert code point to UTF-8          *
************************************************','line_number':549,'multiline':True]
['text':' A static buffer is used. Returns the number of bytes. ','line_number':553,'multiline':True]
['text':'************************************************
*         Case-independent string compare        *
************************************************','line_number':574,'multiline':True]
['text':'************************************************
*         Parse GREP_COLORS                      *
************************************************','line_number':592,'multiline':True]
['text':' Extract ms or mt from GREP_COLORS.

Argument:  the string, possibly NULL
Returns:   the value of ms or mt, or NULL if neither present
','line_number':596,'multiline':True]
['text':'************************************************
*         Exit from the program                  *
************************************************','line_number':621,'multiline':True]
['text':' If there has been a resource error, give a suitable message.

Argument:  the return code
Returns:   does not return
','line_number':625,'multiline':True]
['text':' VMS does exit codes differently: both exit(1) and exit(0) return with a
status of 1, which is not helpful. To help with this problem, define a symbol
(akin to an environment variable) called "PCRE2GREP_RC" and put the exit code
therein. ','line_number':634,'multiline':True]
['text':'************************************************
*          Add item to chain of patterns         *
************************************************','line_number':659,'multiline':True]
['text':' Used to add an item onto a chain, or just return an unconnected item if the
"after" argument is NULL.

Arguments:
  s          pattern string to add
  patlen     length of pattern
  after      if not NULL points to item to insert after

Returns:     new pattern block or NULL on error
','line_number':663,'multiline':True]
['text':'************************************************
*           Free chain of patterns               *
************************************************','line_number':704,'multiline':True]
['text':' Used for several chains of patterns.

Argument: pointer to start of chain
Returns:  nothing
','line_number':708,'multiline':True]
['text':'************************************************
*           Free chain of file names             *
************************************************','line_number':727,'multiline':True]
['text':'
Argument: pointer to start of chain
Returns:  nothing
','line_number':731,'multiline':True]
['text':'************************************************
*            OS-specific functions               *
************************************************','line_number':748,'multiline':True]
['text':' These definitions are needed in all Windows environments, even those where
Unix-style directory scanning can be used (see below). ','line_number':752,'multiline':True]
['text':' Convert ANSI BGR format to RGB used by Windows ','line_number':768,'multiline':True]
['text':' aixterm high intensity colour codes ','line_number':791,'multiline':True]
['text':' This fails when redirected to con; try again if so. ','line_number':809,'multiline':True]
['text':' No valid colour found - turn off colouring ','line_number':818,'multiline':True]
['text':' WIN32 ','line_number':823,'multiline':True]
['text':' The following sets of functions are defined so that they can be made system
specific. At present there are versions for Unix-style environments, Windows,
native z/OS, and "no support". ','line_number':826,'multiline':True]
['text':'************ Directory scanning Unix-style and z/OS **********','line_number':831,'multiline':True]
['text':'************ Directory and PDS/E scanning for z/OS **********','line_number':839,'multiline':True]
['text':'************ z/OS looks mostly like Unix with USS ***********','line_number':840,'multiline':True]
['text':' However, z/OS needs the #include statements in this header ','line_number':841,'multiline':True]
['text':' That header is not included in the main PCRE distribution because
   other apparatus is needed to compile pcre2grep for z/OS. The header
   can be found in the special z/OS distribution, which is available
   from www.zaconsultants.net or from www.cbttape.org. ','line_number':843,'multiline':True]
['text':' In the expectation that opening as a file will fail ','line_number':857,'multiline':True]
['text':' Control never reaches here ','line_number':877,'multiline':True]
['text':'************ Test for regular file, Unix-style *********','line_number':887,'multiline':True]
['text':' In the expectation that opening as a file will fail ','line_number':894,'multiline':True]
['text':'************ Test for a terminal in z/OS *********','line_number':900,'multiline':True]
['text':' isatty() does not work in a TSO environment, so always give FALSE.','line_number':901,'multiline':True]
['text':'************ Test for a terminal, Unix-style *********','line_number':916,'multiline':True]
['text':'************ Print optionally coloured match Unix-style and z/OS *********','line_number':933,'multiline':True]
['text':' End of Unix-style or native z/OS environment functions. ','line_number':944,'multiline':True]
['text':'************ Directory scanning in Windows **********','line_number':947,'multiline':True]
['text':' I (Philip Hazel) have no means of testing this code. It was contributed by
Lionel Fourquaux. David Burgess added a patch to define INVALID_FILE_ATTRIBUTES
when it did not exist. David Byron added a patch that moved the #include of
<windows.h> to before the INVALID_FILE_ATTRIBUTES definition rather than after.
','line_number':949,'multiline':True]
['text':' Keep compiler happy; never executed ','line_number':1031,'multiline':True]
['text':'************ Test for regular file in Windows *********','line_number':1043,'multiline':True]
['text':' I don't know how to do this, or if it can be done; assume all paths are
regular if they are not directories. ','line_number':1045,'multiline':True]
['text':'************ Test for a terminal in Windows *********','line_number':1054,'multiline':True]
['text':'************ Print optionally coloured match in Windows *********','line_number':1069,'multiline':True]
['text':' End of Windows functions ','line_number':1088,'multiline':True]
['text':'************ Directory scanning when we can't do it **********','line_number':1091,'multiline':True]
['text':' The type is void, and apart from isdirectory(), the functions do nothing. ','line_number':1093,'multiline':True]
['text':'************ Test for regular file when we can't do it *********','line_number':1106,'multiline':True]
['text':' Assume all files are regular. ','line_number':1108,'multiline':True]
['text':'************ Test for a terminal when we can't do it *********','line_number':1113,'multiline':True]
['text':'************ Print optionally coloured match when we can't do it *********','line_number':1128,'multiline':True]
['text':' End of system-specific functions ','line_number':1137,'multiline':True]
['text':'************************************************
*     Provide strerror() for non-ANSI libraries  *
************************************************','line_number':1142,'multiline':True]
['text':' Some old-fashioned systems still around (e.g. SunOS4) don't have strerror()
in their libraries, but can provide the same facility by this simple
alternative function. ','line_number':1146,'multiline':True]
['text':' HAVE_STRERROR ','line_number':1159,'multiline':True]
['text':'************************************************
*                Usage function                  *
************************************************','line_number':1163,'multiline':True]
['text':'************************************************
*                Help function                   *
************************************************','line_number':1184,'multiline':True]
['text':'************************************************
*            Test exclude/includes               *
************************************************','line_number':1257,'multiline':True]
['text':' If any exclude pattern matches, the path is excluded. Otherwise, unless
there are no includes, the path must match an include pattern.

Arguments:
  path      the path to be matched
  ip        the chain of include patterns
  ep        the chain of exclude patterns

Returns:    TRUE if the path is not excluded
','line_number':1261,'multiline':True]
['text':'************************************************
*         Decode integer argument value          *
************************************************','line_number':1296,'multiline':True]
['text':' Integer arguments can be followed by K or M. Avoid the use of strtoul()
because SunOS4 doesn't have it. This is used only for unpicking arguments, so
just keep it simple.

Arguments:
  option_data   the option data string
  op            the option item (for error messages)
  longop        TRUE if option given in long form

Returns:        a long integer
','line_number':1300,'multiline':True]
['text':' Error ','line_number':1331,'multiline':True]
['text':'************************************************
*       Add item to a chain of numbers           *
************************************************','line_number':1352,'multiline':True]
['text':' Used to add an item onto a chain, or just return an unconnected item if the
"after" argument is NULL.

Arguments:
  n          the number to add
  after      if not NULL points to item to insert after

Returns:     new number block
','line_number':1356,'multiline':True]
['text':'************************************************
*            Read one line of input              *
************************************************','line_number':1389,'multiline':True]
['text':' Normally, input that is to be scanned is read using fread() (or gzread, or
BZ2_read) into a large buffer, so many lines may be read at once. However,
doing this for tty input means that no output appears until a lot of input has
been typed. Instead, tty input is handled line by line. We cannot use fgets()
for this, because it does not stop at a binary zero, and therefore there is no
way of telling how many characters it has read, because there may be binary
zeros embedded in the data. This function is also used for reading patterns
from files (the -f option).

Arguments:
  buffer     the buffer to read into
  length     the maximum number of characters to read
  f          the file

Returns:     the number of characters read, zero at end of file
','line_number':1393,'multiline':True]
['text':'************************************************
*             Find end of line                   *
************************************************','line_number':1425,'multiline':True]
['text':' The length of the endline sequence that is found is set via lenptr. This may
be zero at the very end of the file if there is no line-ending sequence there.

Arguments:
  p         current position in line
  endptr    end of available data
  lenptr    where to put the length of the eol sequence

Returns:    pointer after the last byte of the line,
            including the newline byte(s)
','line_number':1429,'multiline':True]
['text':' Just in case ','line_number':1446,'multiline':True]
['text':' Number of additional bytes ','line_number':1503,'multiline':True]
['text':' End of loop for ANYCRLF case ','line_number':1533,'multiline':True]
['text':' Must have hit the end ','line_number':1535,'multiline':True]
['text':' Number of additional bytes ','line_number':1547,'multiline':True]
['text':' LF ','line_number':1561,'multiline':True]
['text':' VT ','line_number':1562,'multiline':True]
['text':' FF ','line_number':1563,'multiline':True]
['text':' CR ','line_number':1567,'multiline':True]
['text':' Unicode NEL ','line_number':1577,'multiline':True]
['text':' Unicode LS ','line_number':1581,'multiline':True]
['text':' Unicode PS ','line_number':1582,'multiline':True]
['text':' Not EBCDIC ','line_number':1585,'multiline':True]
['text':' End of loop for ANY case ','line_number':1590,'multiline':True]
['text':' Must have hit the end ','line_number':1592,'multiline':True]
['text':' End of overall switch ','line_number':1594,'multiline':True]
['text':'************************************************
*         Find start of previous line            *
************************************************','line_number':1599,'multiline':True]
['text':' This is called when looking back for before lines to print.

Arguments:
  p         start of the subsequent line
  startptr  start of available data

Returns:    pointer to the start of the previous line
','line_number':1603,'multiline':True]
['text':' Just in case ','line_number':1617,'multiline':True]
['text':' Control can never get here ','line_number':1640,'multiline':True]
['text':' Number of additional bytes ','line_number':1660,'multiline':True]
['text':' LF ','line_number':1674,'multiline':True]
['text':' CR ','line_number':1675,'multiline':True]
['text':' LF ','line_number':1684,'multiline':True]
['text':' VT ','line_number':1685,'multiline':True]
['text':' FF ','line_number':1686,'multiline':True]
['text':' CR ','line_number':1687,'multiline':True]
['text':' Unicode NEL ','line_number':1689,'multiline':True]
['text':' Unicode LS ','line_number':1690,'multiline':True]
['text':' Unicode PS ','line_number':1691,'multiline':True]
['text':' Not EBCDIC ','line_number':1692,'multiline':True]
['text':' Back one character ','line_number':1699,'multiline':True]
['text':' End of loop for ANY case ','line_number':1700,'multiline':True]
['text':' Hit start of data ','line_number':1702,'multiline':True]
['text':' End of overall switch ','line_number':1703,'multiline':True]
['text':'************************************************
*              Output newline at end             *
************************************************','line_number':1708,'multiline':True]
['text':' This function is called if the final line of a file has been written to
stdout, but it does not have a terminating newline.

Arguments:  none
Returns:    nothing
','line_number':1712,'multiline':True]
['text':' Just in case ','line_number':1724,'multiline':True]
['text':'************************************************
*       Print the previous "after" lines         *
************************************************','line_number':1746,'multiline':True]
['text':' This is called if we are about to lose said lines because of buffer filling,
and at the end of the file. The data in the line is written using fwrite() so
that a binary zero does not terminate it.

Arguments:
  lastmatchnumber   the number of the last matching line, plus one
  lastmatchrestart  where we restarted after the last match
  endptr            end of available data
  printname         filename for printing

Returns:            nothing
','line_number':1750,'multiline':True]
['text':' If we have printed any lines, arrange for a hyphen separator if anything
  else follows. Also, if the last line is the final line in the file and it had
  no newline, add one. ','line_number':1782,'multiline':True]
['text':'************************************************
*   Apply patterns to subject till one matches   *
************************************************','line_number':1797,'multiline':True]
['text':' This function is called to run through all patterns, looking for a match. It
is used multiple times for the same subject when colouring is enabled, in order
to find all possible matches.

Arguments:
  matchptr     the start of the subject
  length       the length of the subject to match
  options      options for pcre2_match
  startoffset  where to start matching
  mrc          address of where to put the result of pcre2_match()

Returns:      TRUE if there was a match
              FALSE if there was no match
              invert if there was a non-fatal error
','line_number':1801,'multiline':True]
['text':' In case binary zero included ','line_number':1841,'multiline':True]
['text':' No more matching; don't show the line again ','line_number':1859,'multiline':True]
['text':' No match, no errors ','line_number':1862,'multiline':True]
['text':'************************************************
*          Decode dollar escape sequence         *
************************************************','line_number':1867,'multiline':True]
['text':' Called from various places to decode $ escapes in output strings. The escape
sequences are as follows:

$<digits> or ${<digits>} returns a capture number. However, if callout is TRUE,
zero is never returned; '0' is substituted.

$a returns bell.
$b returns backspace.
$e returns escape.
$f returns form feed.
$n returns newline.
$r returns carriage return.
$t returns tab.
$v returns vertical tab.
$o<digits> returns the character represented by the given octal
  number; up to three digits are processed.
$o{<digits>} does the same, up to 7 digits, but gives an error for mode-invalid
  code points.
$x<digits> returns the character represented by the given hexadecimal
  number; up to two digits are processed.
$x{<digits} does the same, up to 6 digits, but gives an error for mode-invalid
  code points.
Any other character is substituted by itself. E.g: $$ is replaced by a single
dollar.

Arguments:
  begin      the start of the whole string
  string     points to the $
  callout    TRUE if in a callout (inhibits error messages)
  value      where to return a value
  last       where to return pointer to the last used character

Returns:     DDE_ERROR    after a syntax error
             DDE_CAPTURE  if *value is a capture number
             DDE_CHAR     if *value is a character code
','line_number':1871,'multiline':True]
['text':' Syntax error: a character must be present after $. ','line_number':1920,'multiline':True]
['text':' Syntax error: a decimal number required. ','line_number':1930,'multiline':True]
['text':' Fall through ','line_number':1939,'multiline':True]
['text':' The maximum capture number is 65535, so any number greater than that will
  always be an unknown capture number. We just stop incrementing, in order to
  avoid overflow. ','line_number':1941,'multiline':True]
['text':' Point to last digit ','line_number':1953,'multiline':True]
['text':' In a callout, capture number 0 is not available. No error can be given,
  so just return the character '0'. ','line_number':1955,'multiline':True]
['text':' Limit octal numbers to 3 digits without braces, or up to 7 with braces,
  for valid Unicode code points. ','line_number':1969,'multiline':True]
['text':' Point to last digit ','line_number':1988,'multiline':True]
['text':' Limit hex numbers to 2 digits without braces, or up to 6 with braces,
  for valid Unicode code points. ','line_number':1991,'multiline':True]
['text':' Point to last digit ','line_number':2013,'multiline':True]
['text':' Check maximum code point values, but take note of STDOUT_NL_CODE. ','line_number':2057,'multiline':True]
['text':'************************************************
*          Check output text for errors          *
************************************************','line_number':2077,'multiline':True]
['text':' Called early, to get errors before doing anything for -O text; also called
from callouts to check before outputting.

Arguments:
  string    an --output text string
  callout   TRUE if in a callout (stops printing errors)

Returns:    TRUE if OK, FALSE on error
','line_number':2081,'multiline':True]
['text':'************************************************
*              Display output text               *
************************************************','line_number':2108,'multiline':True]
['text':' Display the output text, which is assumed to have already been syntax
checked. Output may contain escape sequences started by the dollar sign.

Arguments:
  string:       the output text
  callout:      TRUE for the builtin callout, FALSE for --output
  subject       the start of the subject
  ovector:      capture offsets
  capture_top:  number of captures

Returns:        TRUE if something was output, other than newline
                FALSE if nothing was output, or newline was last output
','line_number':2112,'multiline':True]
['text':' Will print value ','line_number':2147,'multiline':True]
['text':' Should not occur ','line_number':2163,'multiline':True]
['text':' Not a $ escape ','line_number':2168,'multiline':True]
['text':'************************************************
*        Parse and execute callout scripts       *
************************************************','line_number':2186,'multiline':True]
['text':' If SUPPORT_PCRE2GREP_CALLOUT_FORK is defined, this function parses a callout
string block and executes the program specified by the string. The string is a
list of substrings separated by pipe characters. The first substring represents
the executable name, and the following substrings specify the arguments:

  program_name|param1|param2|...

Any substring (including the program name) can contain escape sequences
started by the dollar character. The escape sequences are substituted as
follows:

  $<digits> or ${<digits>} is replaced by the captured substring of the given
  decimal number, which must be greater than zero. If the number is greater
  than the number of capturing substrings, or if the capture is unset, the
  replacement is empty.

  Any other character is substituted by itself. E.g: $$ is replaced by a single
  dollar or $| replaced by a pipe character.

Alternatively, if string starts with pipe, the remainder is taken as an output
string, same as --output. This is the only form that is supported if
SUPPORT_PCRE2GREP_FORK is not defined. In this case, --om-separator is used to
separate each callout, defaulting to newline.

Example:

  echo -e "abcde\n12345" | pcre2grep \
    '(.)(..(.))(?C"/bin/echo|Arg1: [$1] [$2] [$3]|Arg2: $|${1}$| ($4)")()' -

  Output:

    Arg1: [a] [bcd] [d] Arg2: |a| ()
    abcde
    Arg1: [1] [234] [4] Arg2: |1| ()
    12345

Arguments:
  blockptr     the callout block

Returns:       currently it always returns with 0
','line_number':2190,'multiline':True]
['text':' SUPPORT_PCRE2GREP_CALLOUT_FORK ','line_number':2252,'multiline':True]
['text':' Avoid compiler warning ','line_number':2254,'multiline':True]
['text':' Only callouts with strings are supported. ','line_number':2256,'multiline':True]
['text':' If there's no command, output the remainder directly. ','line_number':2260,'multiline':True]
['text':' Checking syntax and compute the number of string fragments. Callout strings
are silently ignored in the event of a syntax error. ','line_number':2274,'multiline':True]
['text':' Too many args ','line_number':2282,'multiline':True]
['text':' Negate the effect of argslen++ below. ','line_number':2298,'multiline':True]
['text':' Should not occur ','line_number':2306,'multiline':True]
['text':' Get memory for the argument vector and its strings. ','line_number':2319,'multiline':True]
['text':' Now reprocess the string and set up the arguments. ','line_number':2331,'multiline':True]
['text':' Even though this should not occur, the string having ','line_number':2384,'multiline':True]
['text':' been checked above, we need to include the free() ','line_number':2385,'multiline':True]
['text':' calls so that source checkers do not complain. ','line_number':2386,'multiline':True]
['text':' Advance along the string ','line_number':2396,'multiline':True]
['text':' Running an external command is system-dependent. Handle Windows and VMS as
necessary, otherwise assume fork(). ','line_number':2405,'multiline':True]
['text':' Neither Windows nor VMS ','line_number':2431,'multiline':True]
['text':' Control gets here if there is an error, e.g. a non-existent program ','line_number':2436,'multiline':True]
['text':' End Windows/VMS/other handling ','line_number':2441,'multiline':True]
['text':' Currently negative return values are not supported, only zero (match
continues) or non-zero (match fails). ','line_number':2446,'multiline':True]
['text':' SUPPORT_PCRE2GREP_CALLOUT_FORK ','line_number':2450,'multiline':True]
['text':' SUPPORT_PCRE2GREP_CALLOUT ','line_number':2452,'multiline':True]
['text':'************************************************
*     Read a portion of the file into buffer     *
************************************************','line_number':2456,'multiline':True]
['text':' Avoid warning when not used ','line_number':2464,'multiline':True]
['text':'************************************************
*            Grep an individual file             *
************************************************','line_number':2485,'multiline':True]
['text':' This is called from grep_or_recurse() below. It uses a buffer that is three
times the value of bufthird. The matching point is never allowed to stray into
the top third of the buffer, thus keeping more of the file available for
context printing or for multiline scanning. For large files, the pointer will
be in the middle third most of the time, so the bottom third is available for
"before" context printing.

Arguments:
  handle       the fopened FILE stream for a normal file
               the gzFile pointer when reading is via libz
               the BZFILE pointer when reading is via libbz2
  frtype       FR_PLAIN, FR_LIBZ, or FR_LIBBZ2
  filename     the file name or NULL (for errors)
  printname    the file name if it is to be printed for each match
               or NULL if the file name is not to be printed
               it cannot be NULL if filenames[_nomatch]_only is set

Returns:       0 if there was at least one match
               1 otherwise (no matches)
               2 if an overlong line is encountered
               3 if there is a read error on a .bz2 file
','line_number':2489,'multiline':True]
['text':' Ensure initialized ','line_number':2529,'multiline':True]
['text':' Only non-negative if relevant ','line_number':2530,'multiline':True]
['text':' Do the first read into the start of the buffer and set up the pointer to end
of what we have. In the case of libz, a non-zipped .gz file will be read as a
plain file. However, if a .bz2 file isn't actually bzipped, the first read will
fail. ','line_number':2532,'multiline':True]
['text':' Gotcha: bufflength is PCRE2_SIZE ','line_number':2556,'multiline':True]
['text':' Unless binary-files=text, see if we have a binary file. This uses the same
rule as GNU grep, namely, a search for a binary zero byte near the start of the
file. However, when the newline convention is binary zero, we can't do this. ','line_number':2561,'multiline':True]
['text':' Loop while the current pointer is not at the end of the file. For large
files, endptr will be at the end of the buffer when we are in the middle of the
file, but ptr will never get there, because as soon as it gets over 2/3 of the
way, the buffer is shifted left and re-filled. ','line_number':2573,'multiline':True]
['text':' If the -m option set a limit for the number of matched or non-matched
  lines, check it here. A limit of zero means that no matching is ever done.
  For stdin from a file, set the file position. ','line_number':2589,'multiline':True]
['text':' At this point, ptr is at the start of a line. We need to find the length
  of the subject string to pass to pcre2_match(). In multiline mode, it is the
  length remainder of the data in the buffer. Otherwise, it is the length of
  the next line, excluding the terminating newline. After matching, we always
  advance by the length of the next line. In multiline mode the PCRE2_FIRSTLINE
  option is used for compiling, so that any match is constrained to be in the
  first line. ','line_number':2601,'multiline':True]
['text':' Check to see if the line we are looking at extends right to the very end
  of the buffer without a line terminator. This means the line is too long to
  handle at the current buffer size. Until the buffer reaches its maximum size,
  try doubling it and reading more data. ','line_number':2613,'multiline':True]
['text':' Copy the data and adjust pointers to the new buffer location. ','line_number':2640,'multiline':True]
['text':' Read more data into the buffer and then try to find the line ending
      again. ','line_number':2650,'multiline':True]
['text':' We come back here after a match when only_matching_count is non-zero, in
  order to find any further matches in the same line. This applies to
  --only-matching, --file-offsets, and --line-offsets. ','line_number':2672,'multiline':True]
['text':' Run through all the patterns until one matches or there is an error other
  than NOMATCH. This code is in a subroutine so that it can be re-used for
  finding subsequent matches when colouring matched lines. After finding one
  match, set PCRE2_NOTEMPTY to disable any further matches of null strings in
  this line. ','line_number':2678,'multiline':True]
['text':' If it's a match or a not-match (as required), do what's wanted. NOTE: Use
  only FWRITE_IGNORE() - which is just a packaged fwrite() that ignores its
  return code - to output data lines, so that binary zeroes are treated as just
  another data character. ','line_number':2687,'multiline':True]
['text':' We've failed if we want a file that doesn't have any matches. ','line_number':2696,'multiline':True]
['text':' Remember that this line matched (for counting matched lines) ','line_number':2700,'multiline':True]
['text':' If all we want is a yes/no answer, we can return immediately. ','line_number':2704,'multiline':True]
['text':' Just count if just counting is wanted. ','line_number':2708,'multiline':True]
['text':' When handling a binary file and binary-files==binary, the "binary"
    variable will be set true (it's false in all other cases). In this
    situation we just want to output the file name. No need to scan further. ','line_number':2712,'multiline':True]
['text':' Likewise, if all we want is a file name, there is no need to scan any
    more lines in the file. ','line_number':2722,'multiline':True]
['text':' The --only-matching option prints just the substring that matched,
    and/or one or more captured portions of it, as long as these strings are
    not empty. The --file-offsets and --line-offsets options output offsets for
    the matching substring (all three set only_matching_count non-zero). None
    of these mutually exclusive options prints any context. Afterwards, adjust
    the start and then jump back to look for further matches in the same line.
    If we are in invert mode, however, nothing is printed and we do not restart
    - this could still be useful because the return code is set. ','line_number':2731,'multiline':True]
['text':' Handle --line-offsets ','line_number':2749,'multiline':True]
['text':' Handle --file-offsets ','line_number':2755,'multiline':True]
['text':' Handle --output (which has already been syntax checked) ','line_number':2762,'multiline':True]
['text':' Handle --only-matching, which may occur many times ','line_number':2772,'multiline':True]
['text':' Prepare to repeat to find the next match in the line. ','line_number':2799,'multiline':True]
['text':' Had some success ','line_number':2803,'multiline':True]
['text':' If the pattern contained a lookbehind that included \K, it is
        possible that the end of the match might be at or before the actual
        starting offset we have just used. In this case, start one character
        further on. ','line_number':2805,'multiline':True]
['text':' Restart after the match ','line_number':2810,'multiline':True]
['text':' Were at end ','line_number':2814,'multiline':True]
['text':' If the current match ended past the end of the line (only possible
        in multiline mode), we must move on to the line in which it did end
        before searching for more matches. ','line_number':2819,'multiline':True]
['text':' This is the default case when none of the above options is set. We print
    the matching lines(s), possibly preceded and/or followed by other lines of
    context. ','line_number':2838,'multiline':True]
['text':' See if there is a requirement to print some "after" lines from a
      previous match. We never print any overlaps. ','line_number':2846,'multiline':True]
['text':' It is important to advance lastmatchrestart during this printing so
        that it interacts correctly with any "before" printing below. Print
        each line's data using fwrite() in case there are binary zeroes. ','line_number':2861,'multiline':True]
['text':' If there were non-contiguous lines printed above, insert hyphens. ','line_number':2877,'multiline':True]
['text':' See if there is a requirement to print some "before" lines for this
      match. Again, don't print overlaps. ','line_number':2886,'multiline':True]
['text':' Now print the matching line(s); ensure we set hyphenpending at the end
      of the file if any context lines are being output. ','line_number':2917,'multiline':True]
['text':' In multiline mode, or if colouring, we have to split the line(s) up
      and search for further matches, but not of course if the line is a
      non-match. In multiline mode this is necessary in case there is another
      match that spans the end of the current line. When colouring we want to
      colour all matches. ','line_number':2926,'multiline':True]
['text':' The use of \K may make the end offset earlier than the start. In
        this situation, swap them round. ','line_number':2937,'multiline':True]
['text':' Advance after previous match. ','line_number':2955,'multiline':True]
['text':' If the pattern contained a lookbehind that included \K, it is
          possible that the end of the match might be at or before the actual
          starting offset we have just used. In this case, start one character
          further on. ','line_number':2957,'multiline':True]
['text':' If the current match ended past the end of the line (only possible
          in multiline mode), we must move on to the line in which it did end
          before searching for more matches. Because the PCRE2_FIRSTLINE option
          is set, the start of the match will always be before the first
          newline sequence. ','line_number':2968,'multiline':True]
['text':' If startoffset is at the exact end of the line it means this
          complete line was the final part of the match, so there is nothing
          more to do. ','line_number':2986,'multiline':True]
['text':' Otherwise, run a match from within the final line, and if found,
          loop for any that may follow. ','line_number':2992,'multiline':True]
['text':' The use of \K may make the end offset earlier than the start. In
          this situation, swap them round. ','line_number':2997,'multiline':True]
['text':' In multiline mode, we may have already printed the complete line
        and its line-ending characters (if they matched the pattern), so there
        may be no more to print. ','line_number':3011,'multiline':True]
['text':' Not colouring or multiline; no need to search for further matches. ','line_number':3019,'multiline':True]
['text':' End of doing what has to be done for a match. If --line-buffered was
    given, flush the output. ','line_number':3024,'multiline':True]
['text':' Had some success ','line_number':3028,'multiline':True]
['text':' Remember where the last match happened for after_context. We remember
    where we are about to restart, and that line's number. ','line_number':3030,'multiline':True]
['text':' If a line was printed and we are now at the end of the file and the last
    line had no newline, output one. ','line_number':3036,'multiline':True]
['text':' For a match in multiline inverted mode (which of course did not cause
  anything to be printed), we have to move on to the end of the match before
  proceeding. ','line_number':3043,'multiline':True]
['text':' Advance to after the newline and increment the line number. The file
  offset to the current line is maintained in filepos. ','line_number':3061,'multiline':True]
['text':' If there was at least one match (or a non-match, as required) in the line,
  increment the count for the -m option. ','line_number':3069,'multiline':True]
['text':' If input is line buffered, and the buffer is not yet full, read another
  line and add it into the buffer. ','line_number':3074,'multiline':True]
['text':' If we haven't yet reached the end of the file (the buffer is full), and
  the current point is in the top 1/3 of the buffer, slide the buffer down by
  1/3 and refill it. Before we do this, if some unprinted "after" lines are
  about to be lost, print them. ','line_number':3084,'multiline':True]
['text':' Indicates no after lines pending ','line_number':3096,'multiline':True]
['text':' Now do the shuffle ','line_number':3099,'multiline':True]
['text':' Adjust any last match point ','line_number':3108,'multiline':True]
['text':' Loop through the whole file ','line_number':3112,'multiline':True]
['text':' End of file; print final "after" lines if wanted; do_after_lines sets
hyphenpending if it prints something. ','line_number':3114,'multiline':True]
['text':' Print the file name if we are looking for those without matches and there
were none. If we found a match, we won't have got this far. ','line_number':3123,'multiline':True]
['text':' Print the match count if wanted ','line_number':3132,'multiline':True]
['text':' Can be set without count_only ','line_number':3145,'multiline':True]
['text':'************************************************
*     Grep a file or recurse into a directory    *
************************************************','line_number':3151,'multiline':True]
['text':' Given a path name, if it's a directory, scan all the files if we are
recursing; if it's a file, grep it.

Arguments:
  pathname          the path to investigate
  dir_recurse       TRUE if recursing is wanted (-r or -drecurse)
  only_one_at_top   TRUE if the path is the only one at toplevel

Returns:  -1 the file/directory was skipped
           0 if there was at least one match
           1 if there were no matches
           2 there was some kind of error

However, file opening failures are suppressed if "silent" is set.
','line_number':3155,'multiline':True]
['text':' Ensure initialized ','line_number':3178,'multiline':True]
['text':' If the file name is "-" we scan stdin ','line_number':3197,'multiline':True]
['text':' Inclusion and exclusion: --include-dir and --exclude-dir apply only to
directories, whereas --include and --exclude apply to everything else. The test
is against the final component of the path. ','line_number':3207,'multiline':True]
['text':' If the file is a directory, skip if not recursing or if explicitly excluded.
Otherwise, scan the directory and recurse for each path within it. The scanning
code is localized so it can be made system-specific. ','line_number':3214,'multiline':True]
['text':' For z/OS, determine the file type. ','line_number':3219,'multiline':True]
['text':' Handle a PDS in separate code ','line_number':3233,'multiline':True]
['text':' Deal with regular files in the normal way below. These types are:
   zos_type == __ZOS_PDS_MEMBER
   zos_type == __ZOS_PS
   zos_type == __ZOS_VSAM_KSDS
   zos_type == __ZOS_VSAM_ESDS
   zos_type == __ZOS_VSAM_RRDS
','line_number':3240,'multiline':True]
['text':' Handle a z/OS directory using common code. ','line_number':3248,'multiline':True]
['text':' NATIVE_ZOS ','line_number':3252,'multiline':True]
['text':' Handle directories: common code for all OS ','line_number':3255,'multiline':True]
['text':' If the realpath() function is available, we can try to prevent endless
      recursion caused by a symlink pointing to a parent directory (GitHub
      issue #2 (old Bugzilla #2794). Original patch from Thomas Tempelmann.
      Modified to avoid using strlcat() because that isn't a standard C
      function, and also modified not to copy back the fully resolved path,
      because that affects the output from pcre2grep. ','line_number':3289,'multiline':True]
['text':' This path is invalid - we can skip processing this ','line_number':3302,'multiline':True]
['text':' We have a recursion ','line_number':3304,'multiline':True]
['text':' We have a recursion ','line_number':3311,'multiline':True]
['text':' HAVE_REALPATH ','line_number':3314,'multiline':True]
['text':' If the file is not a directory, check for a regular file, and if it is not,
skip it if that's been requested. Otherwise, check for an explicit inclusion or
exclusion. ','line_number':3360,'multiline':True]
['text':' all other OS ','line_number':3367,'multiline':True]
['text':' File skipped ','line_number':3371,'multiline':True]
['text':' Control reaches here if we have a regular file, or if we have a directory
and recursion or skipping was not requested, or if we have anything else and
skipping was not requested. The scan proceeds. If this is the first and only
argument at top level, we don't show the file name, unless we are only showing
the file name, or the filename was forced (-H). ','line_number':3373,'multiline':True]
['text':' Open using zlib if it is supported and the file name ends with .gz. ','line_number':3383,'multiline':True]
['text':' Otherwise open with bz2lib if it is supported and the name ends with .bz2. ','line_number':3402,'multiline':True]
['text':' Otherwise use plain fopen(). The label is so that we can come back here if
an attempt to read a .bz2 file indicates that it really is a plain file. ','line_number':3414,'multiline':True]
['text':' All the opening methods return errno when they fail. ','line_number':3426,'multiline':True]
['text':' Now grep the file ','line_number':3436,'multiline':True]
['text':' Close in an appropriate manner. ','line_number':3441,'multiline':True]
['text':' If it is a .bz2 file and the result is 3, it means that the first attempt to
read failed. If the error indicates that the file isn't in fact bzipped, try
again as a normal file. ','line_number':3449,'multiline':True]
['text':' The normal "something went wrong" code ','line_number':3468,'multiline':True]
['text':' Normal file close ','line_number':3475,'multiline':True]
['text':' Pass back the yield from pcre2grep(). ','line_number':3479,'multiline':True]
['text':'************************************************
*          Handle a no-data option               *
************************************************','line_number':3486,'multiline':True]
['text':' Stops compiler warning ','line_number':3496,'multiline':True]
['text':'************************************************
*          Construct printed ordinal             *
************************************************','line_number':3547,'multiline':True]
['text':' This turns a number into "1st", "3rd", etc. ','line_number':3551,'multiline':True]
['text':'************************************************
*          Compile a single pattern              *
************************************************','line_number':3574,'multiline':True]
['text':' Do nothing if the pattern has already been compiled. This is the case for
include/exclude patterns read from a file.

When the -F option has been used, each "pattern" may be a list of strings,
separated by line breaks. They will be matched literally. We split such a
string and compile the first substring, inserting an additional block into the
pattern chain.

Arguments:
  p              points to the pattern block
  options        the PCRE options
  fromfile       TRUE if the pattern was read from a file
  fromtext       file name or identifying text (e.g. "include")
  count          0 if this is the only command line pattern, or
                 number of the command line pattern, or
                 linenumber for a pattern from a file

Returns:         TRUE on success, FALSE after an error
','line_number':3578,'multiline':True]
['text':' Handle successful compile. Try JIT-compiling if supported and enabled. We
ignore any JIT compiler errors, relying falling back to interpreting if
anything goes wrong with JIT. ','line_number':3627,'multiline':True]
['text':' Handle compile errors ','line_number':3639,'multiline':True]
['text':'************************************************
*     Read and compile a file of patterns        *
************************************************','line_number':3664,'multiline':True]
['text':' This is used for --filelist, --include-from, and --exclude-from.

Arguments:
  name         the name of the file; "-" is stdin
  patptr       pointer to the pattern chain anchor
  patlastptr   pointer to the last pattern pointer

Returns:       TRUE if all went well
','line_number':3668,'multiline':True]
['text':' Skip blank lines ','line_number':3707,'multiline':True]
['text':' Note: this call to add_pattern() puts a pointer to the local variable
  "buffer" into the pattern chain. However, that pointer is used only when
  compiling the pattern, which happens immediately below, so we flatten it
  afterwards, as a precaution against any later code trying to use it. ','line_number':3709,'multiline':True]
['text':' This loop is needed because compiling a "pattern" when -F is set may add
  on additional literal patterns if the original contains a newline. In the
  common case, it never will, because read_one_line() stops at a newline.
  However, the -N option can be used to give pcre2grep a different newline
  setting. ','line_number':3722,'multiline':True]
['text':' Insurance ','line_number':3736,'multiline':True]
['text':'************************************************
*                Main program                    *
************************************************','line_number':3748,'multiline':True]
['text':' Returns 0 if something matched, 1 if nothing matched, 2 after an error. ','line_number':3752,'multiline':True]
['text':' In Windows, stdout is set up as a text stream, which means that \n is
converted to \r\n. This causes output lines that are copied from the input to
change from ....\r\n to ....\r\r\n, which is not right. We therefore ensure
that stdout is a binary stream. Note that this means all other output to stdout
must use STDOUT_NL to terminate lines. ','line_number':3769,'multiline':True]
['text':' Process the options ','line_number':3779,'multiline':True]
['text':' default to keep compiler happy ','line_number':3784,'multiline':True]
['text':' If we hit an argument that is just "-", it may be a reference to STDIN,
  but only if we have previously had -e or -f to define the patterns. ','line_number':3790,'multiline':True]
['text':' Handle a long name option, or -- to terminate the options ','line_number':3799,'multiline':True]
['text':' -- terminates options ','line_number':3806,'multiline':True]
['text':' out of the options-handling loop ','line_number':3809,'multiline':True]
['text':' Some long options have data that follows after =, for example file=name.
    Some options have variations in the long name spelling: specifically, we
    allow "regexp" because GNU grep allows it, though I personally go along
    with Jeffrey Friedl and Larry Wall in preferring "regex" without the "p".
    These options are entered in the table as "regex(p)". Options can be in
    both these categories. ','line_number':3814,'multiline':True]
['text':' Handle options with only one spelling of the name ','line_number':3826,'multiline':True]
['text':' Does not contain '(' ','line_number':3828,'multiline':True]
['text':' Not thing=data case ','line_number':3830,'multiline':True]
['text':' Special case xxx=data ','line_number':3834,'multiline':True]
['text':' Handle options with an alternate spelling of the name ','line_number':3852,'multiline':True]
['text':' One-char options; many that have no data may be in a single argument; we
  continue till we hit the last one or one that needs data. ','line_number':3900,'multiline':True]
['text':' Break out if this is the last character in the string; it's handled
      below like a single multi-char option. ','line_number':3923,'multiline':True]
['text':' Check for a single-character option that has data: OP_OP_NUMBER(S)
      are used for ones that either have a numerical number or defaults, i.e.
      the data is optional. If a digit follows, there is data; if not, carry on
      with other single-character options in the same string. ','line_number':3928,'multiline':True]
['text':' Check for an option with data ','line_number':3937,'multiline':True]
['text':' Handle a single-character option with no data, then loop for the
      next character in the string. ','line_number':3942,'multiline':True]
['text':' At this point we should have op pointing to a matched option. If the type
  is NO_DATA, it means that there is no data, and the option might set
  something in the PCRE options. ','line_number':3949,'multiline':True]
['text':' If the option type is OP_OP_STRING or OP_OP_NUMBER(S), it's an option that
  either has a value or defaults to something. It cannot have data in a
  separate item. At the moment, the only such options are "colo(u)r",
  and "only-matching". ','line_number':3959,'multiline':True]
['text':' Otherwise, find the data string for the option. ','line_number':3982,'multiline':True]
['text':' If the option type is OP_OP_NUMBERS, the value is a number that is to be
  added to a chain of numbers. ','line_number':3994,'multiline':True]
['text':' If the option type is OP_PATLIST, it's the -e option, or one of the
  include/exclude options, which can be called multiple times to create lists
  of patterns. ','line_number':4005,'multiline':True]
['text':' If the option type is OP_FILELIST, it's one of the options that names a
  file. ','line_number':4018,'multiline':True]
['text':' Handle OP_BINARY_FILES ','line_number':4039,'multiline':True]
['text':' Otherwise, deal with a single string or numeric data value. ','line_number':4057,'multiline':True]
['text':' Options have been decoded. If -C was used, its value is used as a default
for -A and -B. ','line_number':4073,'multiline':True]
['text':' Only one of --only-matching, --output, --file-offsets, or --line-offsets is
permitted. They display, each in their own way, only the data that has matched.
','line_number':4082,'multiline':True]
['text':' Check that there is a big enough ovector for all -o settings. ','line_number':4097,'multiline':True]
['text':' Check the text supplied to --output for errors. ','line_number':4110,'multiline':True]
['text':' Set up default compile and match contexts and a match data block. ','line_number':4116,'multiline':True]
['text':' If string (script) callouts are supported, set up the callout processing
function. ','line_number':4124,'multiline':True]
['text':' Put limits into the match data block. ','line_number':4131,'multiline':True]
['text':' If a locale has not been provided as an option, see if the LC_CTYPE or
LC_ALL environment variable is set, and if so, use it. ','line_number':4137,'multiline':True]
['text':' If a locale is set, use it to generate the tables the PCRE needs. Passing
NULL to pcre2_maketables() means that malloc() is used to get the memory. ','line_number':4152,'multiline':True]
['text':' Sort out colouring ','line_number':4167,'multiline':True]
['text':' Sort out a newline setting. ','line_number':4201,'multiline':True]
['text':' Find default newline convention ','line_number':4220,'multiline':True]
['text':' Interpret the text values for -d and -D ','line_number':4227,'multiline':True]
['text':' Set the extra options ','line_number':4252,'multiline':True]
['text':' Check the values for Jeffrey Friedl's debugging options. ','line_number':4256,'multiline':True]
['text':' If use_jit is set, check whether JIT is available. If not, do not try
to use JIT. ','line_number':4258,'multiline':True]
['text':' Get memory for the main buffer. ','line_number':4268,'multiline':True]
['text':' If no patterns were provided by -e, and there are no files provided by -f,
the first argument is the one and only pattern, and it must exist. ','line_number':4285,'multiline':True]
['text':' Compile the patterns that were provided on the command line, either by
multiple uses of -e or as a single unkeyed pattern. We cannot do this until
after all the command-line options are read so that we know which PCRE options
to use. When -F is used, compile_pattern() may add another block into the
chain, so we must not access the next pointer till after the compile. ','line_number':4297,'multiline':True]
['text':' Read and compile the regular expressions that are provided in files. ','line_number':4310,'multiline':True]
['text':' Unless JIT has been explicitly disabled, arrange a stack for it to use. ','line_number':4317,'multiline':True]
['text':' -F, -w, and -x do not apply to include or exclude patterns, so we must
adjust the options. ','line_number':4328,'multiline':True]
['text':' If there are include or exclude patterns read from the command line, compile
them. ','line_number':4334,'multiline':True]
['text':' Read and compile include/exclude patterns from files. ','line_number':4348,'multiline':True]
['text':' If there are no files that contain lists of files to search, and there are
no file arguments, search stdin, and then exit. ','line_number':4362,'multiline':True]
['text':' Using a buffered stdin, that then is seek is not portable,
     so attempt to remove the buffer, to workaround reported issues
     affecting several BSD and AIX ','line_number':4367,'multiline':True]
['text':' If any files that contains a list of files to search have been specified,
read them line by line and search the given files. ','line_number':4377,'multiline':True]
['text':' After handling file-list, work through remaining arguments. Pass in the fact
that there is only one argument at top level - this suppresses the file name if
the argument is not a directory and filenames are not otherwise forced. ','line_number':4410,'multiline':True]
['text':' If separating builtin echo callouts by implicit newline, add one more for
the final item. ','line_number':4425,'multiline':True]
['text':' Show the total number of matches if requested, but not if only one file's
count was printed. ','line_number':4432,'multiline':True]
['text':' End of pcre2grep ','line_number':4480,'multiline':True]
