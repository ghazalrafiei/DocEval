['text':'************************************************
*      Perl-Compatible Regular Expressions       *
************************************************','line_number':1,'multiline':True]
['text':' PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
','line_number':5,'multiline':True]
['text':' This module contains mode-dependent macro and structure definitions. The
file is #included by pcre2_internal.h if PCRE2_CODE_UNIT_WIDTH is defined.
These mode-dependent items are kept in a separate file so that they can also be
#included multiple times for different code unit widths by pcre2test in order
to have access to the hidden structures at all supported widths.

Some of the mode-dependent macros are required at different widths for
different parts of the pcre2test code (in particular, the included
pcre_printint.c file). We undefine them here so that they can be re-defined for
multiple inclusions. Not all of these are used in pcre2test, but it's easier
just to undefine them all. ','line_number':42,'multiline':True]
['text':' -------------------------- MACROS ----------------------------- ','line_number':86,'multiline':True]
['text':' PCRE keeps offsets in its compiled code as at least 16-bit quantities
(always stored in big-endian order in 8-bit mode) by default. These are used,
for example, to link from the start of a subpattern to its alternatives and its
end. The use of 16 bits per offset limits the size of an 8-bit compiled regex
to around 64K, which is big enough for almost everybody. However, I received a
request for an even bigger limit. For this reason, and also to make the code
easier to maintain, the storing and loading of offsets from the compiled code
unit string is now handled by the macros that are defined here.

The macros are controlled by the value of LINK_SIZE. This defaults to 2, but
values of 3 or 4 are also supported. ','line_number':88,'multiline':True]
['text':' ------------------- 8-bit support  ------------------ ','line_number':100,'multiline':True]
['text':' Keep it positive ','line_number':129,'multiline':True]
['text':' ------------------- 16-bit support  ------------------ ','line_number':136,'multiline':True]
['text':' Keep it positive ','line_number':157,'multiline':True]
['text':' ------------------- 32-bit support  ------------------ ','line_number':164,'multiline':True]
['text':' Keep it positive ','line_number':173,'multiline':True]
['text':' --------------- Other mode-specific macros ----------------- ','line_number':180,'multiline':True]
['text':' PCRE uses some other (at least) 16-bit quantities that do not change when
the size of offsets changes. There are used for repeat counts and for other
things such as capturing parenthesis numbers in back references.

Define the number of code units required to hold a 16-bit count/offset, and
macros to load and store such a value. For reasons that I do not understand,
the expression in the 8-bit GET2 macro is treated by gcc as a signed
expression, even when a is declared as unsigned. It seems that any kind of
arithmetic results in a signed value. Hence the cast. ','line_number':182,'multiline':True]
['text':' Code units are 16 or 32 bits ','line_number':197,'multiline':True]
['text':' Other macros that are different for 8-bit mode. The MAX_255 macro checks
whether its argument, which is assumed to be one code unit, is less than 256.
The CHMAX_255 macro does not assume one code unit. The maximum length of a MARK
name must fit in one code unit; currently it is set to 255 or 65535. The
TABLE_GET macro is used to access elements of tables containing exactly 256
items. Its argument is a code unit. When code points can be greater than 255, a
check is needed before accessing these tables. ','line_number':203,'multiline':True]
['text':' SUPPORT_UNICODE ','line_number':220,'multiline':True]
['text':' Code units are 16 or 32 bits ','line_number':222,'multiline':True]
['text':' ----------------- Character-handling macros ----------------- ','line_number':231,'multiline':True]
['text':' There is a proposed future special "UTF-21" mode, in which only the lowest
21 bits of a 32-bit character are interpreted as UTF, with the remaining 11
high-order bits available to the application for other uses. In preparation for
the future implementation of this mode, there are macros that load a data item
and, if in this special mode, mask it to 21 bits. These macros all have names
starting with UCHAR21. In all other modes, including the normal 32-bit
library, the macros all have the same simple definitions. When the new mode is
implemented, it is expected that these definitions will be varied appropriately
using #ifdef when compiling the library that supports the special mode. ','line_number':233,'multiline':True]
['text':' When UTF encoding is being used, a character is no longer just a single
byte in 8-bit mode or a single short in 16-bit mode. The macros for character
handling generate simple sequences when used in the basic mode, and more
complicated ones for UTF characters. GETCHARLENTEST and other macros are not
used when UTF is not supported. To make sure they can never even appear when
UTF support is omitted, we don't even define them. ','line_number':248,'multiline':True]
['text':' #define MAX_UTF_SINGLE_CU ','line_number':257,'multiline':True]
['text':' #define HAS_EXTRALEN(c) ','line_number':258,'multiline':True]
['text':' #define GET_EXTRALEN(c) ','line_number':259,'multiline':True]
['text':' #define NOT_FIRSTCU(c) ','line_number':260,'multiline':True]
['text':' #define GETCHARLENTEST(c, eptr, len) ','line_number':267,'multiline':True]
['text':' #define BACKCHAR(eptr) ','line_number':268,'multiline':True]
['text':' #define FORWARDCHAR(eptr) ','line_number':269,'multiline':True]
['text':' #define FORWARCCHARTEST(eptr,end) ','line_number':270,'multiline':True]
['text':' #define ACROSSCHAR(condition, eptr, action) ','line_number':271,'multiline':True]
['text':' SUPPORT_UNICODE ','line_number':273,'multiline':True]
['text':' ------------------- 8-bit support  ------------------ ','line_number':275,'multiline':True]
['text':' UTF chars may use multiple code units ','line_number':278,'multiline':True]
['text':' The largest UTF code point that can be encoded as a single code unit. ','line_number':280,'multiline':True]
['text':' Tests whether the code point needs extra characters to decode. ','line_number':284,'multiline':True]
['text':' Returns with the additional number of characters if IS_MULTICHAR(c) is TRUE.
Otherwise it has an undefined behaviour. ','line_number':288,'multiline':True]
['text':' Returns TRUE, if the given value is not the first code unit of a UTF
sequence. ','line_number':293,'multiline':True]
['text':' Get the next UTF-8 character, not advancing the pointer. This is called when
we know we are in UTF-8 mode. ','line_number':298,'multiline':True]
['text':' Get the next UTF-8 character, testing for UTF-8 mode, and not advancing the
pointer. ','line_number':305,'multiline':True]
['text':' Get the next UTF-8 character, advancing the pointer. This is called when we
know we are in UTF-8 mode. ','line_number':312,'multiline':True]
['text':' Get the next character, testing for UTF-8 mode, and advancing the pointer.
This is called when we don't know if we are in UTF-8 mode. ','line_number':319,'multiline':True]
['text':' Get the next UTF-8 character, not advancing the pointer, incrementing length
if there are extra bytes. This is called when we know we are in UTF-8 mode. ','line_number':326,'multiline':True]
['text':' Get the next UTF-8 character, testing for UTF-8 mode, not advancing the
pointer, incrementing length if there are extra bytes. This is called when we
do not know if we are in UTF-8 mode. ','line_number':333,'multiline':True]
['text':' If the pointer is not at the start of a character, move it back until
it is. This is called only in UTF-8 mode - we don't put a test within the macro
because almost all calls are already within a block of UTF-8 only code. ','line_number':341,'multiline':True]
['text':' Same as above, just in the other direction. ','line_number':347,'multiline':True]
['text':' Same as above, but it allows a fully customizable form. ','line_number':351,'multiline':True]
['text':' Deposit a character into memory, returning the number of code units. ','line_number':355,'multiline':True]
['text':' ------------------- 16-bit support  ------------------ ','line_number':361,'multiline':True]
['text':' UTF chars may use multiple code units ','line_number':364,'multiline':True]
['text':' The largest UTF code point that can be encoded as a single code unit. ','line_number':366,'multiline':True]
['text':' Tests whether the code point needs extra characters to decode. ','line_number':370,'multiline':True]
['text':' Returns with the additional number of characters if IS_MULTICHAR(c) is TRUE.
Otherwise it has an undefined behaviour. ','line_number':374,'multiline':True]
['text':' Returns TRUE, if the given value is not the first code unit of a UTF
sequence. ','line_number':379,'multiline':True]
['text':' Base macro to pick up the low surrogate of a UTF-16 character, not
advancing the pointer. ','line_number':384,'multiline':True]
['text':' Get the next UTF-16 character, not advancing the pointer. This is called when
we know we are in UTF-16 mode. ','line_number':390,'multiline':True]
['text':' Get the next UTF-16 character, testing for UTF-16 mode, and not advancing the
pointer. ','line_number':397,'multiline':True]
['text':' Base macro to pick up the low surrogate of a UTF-16 character, advancing
the pointer. ','line_number':404,'multiline':True]
['text':' Get the next UTF-16 character, advancing the pointer. This is called when we
know we are in UTF-16 mode. ','line_number':410,'multiline':True]
['text':' Get the next character, testing for UTF-16 mode, and advancing the pointer.
This is called when we don't know if we are in UTF-16 mode. ','line_number':417,'multiline':True]
['text':' Base macro to pick up the low surrogate of a UTF-16 character, not
advancing the pointer, incrementing the length. ','line_number':424,'multiline':True]
['text':' Get the next UTF-16 character, not advancing the pointer, incrementing
length if there is a low surrogate. This is called when we know we are in
UTF-16 mode. ','line_number':430,'multiline':True]
['text':' Get the next UTF-816character, testing for UTF-16 mode, not advancing the
pointer, incrementing length if there is a low surrogate. This is called when
we do not know if we are in UTF-16 mode. ','line_number':438,'multiline':True]
['text':' If the pointer is not at the start of a character, move it back until
it is. This is called only in UTF-16 mode - we don't put a test within the
macro because almost all calls are already within a block of UTF-16 only
code. ','line_number':446,'multiline':True]
['text':' Same as above, just in the other direction. ','line_number':453,'multiline':True]
['text':' Same as above, but it allows a fully customizable form. ','line_number':457,'multiline':True]
['text':' Deposit a character into memory, returning the number of code units. ','line_number':461,'multiline':True]
['text':' ------------------- 32-bit support  ------------------ ','line_number':467,'multiline':True]
['text':' These are trivial for the 32-bit library, since all UTF-32 characters fit
into one PCRE2_UCHAR unit. ','line_number':471,'multiline':True]
['text':' Get the next UTF-32 character, not advancing the pointer. This is called when
we know we are in UTF-32 mode. ','line_number':479,'multiline':True]
['text':' Get the next UTF-32 character, testing for UTF-32 mode, and not advancing the
pointer. ','line_number':485,'multiline':True]
['text':' Get the next UTF-32 character, advancing the pointer. This is called when we
know we are in UTF-32 mode. ','line_number':491,'multiline':True]
['text':' Get the next character, testing for UTF-32 mode, and advancing the pointer.
This is called when we don't know if we are in UTF-32 mode. ','line_number':497,'multiline':True]
['text':' Get the next UTF-32 character, not advancing the pointer, not incrementing
length (since all UTF-32 is of length 1). This is called when we know we are in
UTF-32 mode. ','line_number':503,'multiline':True]
['text':' Get the next UTF-32character, testing for UTF-32 mode, not advancing the
pointer, not incrementing the length (since all UTF-32 is of length 1).
This is called when we do not know if we are in UTF-32 mode. ','line_number':510,'multiline':True]
['text':' If the pointer is not at the start of a character, move it back until
it is. This is called only in UTF-32 mode - we don't put a test within the
macro because almost all calls are already within a block of UTF-32 only
code.

These are all no-ops since all UTF-32 characters fit into one PCRE2_UCHAR. ','line_number':517,'multiline':True]
['text':' Same as above, just in the other direction. ','line_number':526,'multiline':True]
['text':' Same as above, but it allows a fully customizable form. ','line_number':531,'multiline':True]
['text':' Deposit a character into memory, returning the number of code units. ','line_number':535,'multiline':True]
['text':' UTF-32 character handling ','line_number':539,'multiline':True]
['text':' SUPPORT_UNICODE ','line_number':540,'multiline':True]
['text':' Mode-dependent macros that have the same definition in all modes. ','line_number':543,'multiline':True]
['text':' ----------------------- HIDDEN STRUCTURES ----------------------------- ','line_number':551,'multiline':True]
['text':' NOTE: All these structures *must* start with a pcre2_memctl structure. The
code that uses them is simpler because it assumes this. ','line_number':553,'multiline':True]
['text':' The real general context structure. At present it holds only data for custom
memory control. ','line_number':556,'multiline':True]
['text':' The real compile context structure ','line_number':563,'multiline':True]
['text':' The real match context structure. ','line_number':577,'multiline':True]
['text':' The real convert context structure. ','line_number':595,'multiline':True]
['text':' The real compiled code structure. The type for the blocksize field is
defined specially because it is required in pcre2_serialize_decode() when
copying the size from possibly unaligned memory into a variable of the same
type. Use a macro rather than a typedef to avoid compiler warnings when this
file is included multiple times by pcre2test. LOOKBEHIND_MAX specifies the
largest lookbehind that is supported. (OP_REVERSE in a pattern has a 16-bit
argument in 8-bit and 16-bit modes, so we need no more than a 16-bit field
here.) ','line_number':603,'multiline':True]
['text':' Memory control fields ','line_number':619,'multiline':True]
['text':' The character tables ','line_number':620,'multiline':True]
['text':' Pointer to JIT code ','line_number':621,'multiline':True]
['text':' Bitmap for starting code unit < 256 ','line_number':622,'multiline':True]
['text':' Total (bytes) that was malloc-ed ','line_number':623,'multiline':True]
['text':' Paranoid and endianness check ','line_number':624,'multiline':True]
['text':' Options passed to pcre2_compile() ','line_number':625,'multiline':True]
['text':' Options after processing the pattern ','line_number':626,'multiline':True]
['text':' Taken from compile_context ','line_number':627,'multiline':True]
['text':' Various state flags ','line_number':628,'multiline':True]
['text':' Limit set in the pattern ','line_number':629,'multiline':True]
['text':' Limit set in the pattern ','line_number':630,'multiline':True]
['text':' Limit set in the pattern ','line_number':631,'multiline':True]
['text':' Starting code unit ','line_number':632,'multiline':True]
['text':' This codeunit must be seen ','line_number':633,'multiline':True]
['text':' What \R matches ','line_number':634,'multiline':True]
['text':' What is a newline? ','line_number':635,'multiline':True]
['text':' Longest lookbehind (characters) ','line_number':636,'multiline':True]
['text':' Minimum length of match ','line_number':637,'multiline':True]
['text':' Highest numbered group ','line_number':638,'multiline':True]
['text':' Highest numbered back reference ','line_number':639,'multiline':True]
['text':' Size (code units) of table entries ','line_number':640,'multiline':True]
['text':' Number of name entries in the table ','line_number':641,'multiline':True]
['text':' The real match data structure. Define ovector as large as it can ever
actually be so that array bound checkers don't grumble. Memory for this
structure is obtained by calling pcre2_match_data_create(), which sets the size
as the offset of ovector plus a pair of elements for each capturable string, so
the size varies from call to call. As the maximum number of capturing
subpatterns is 65535 we must allow for 65536 strings to include the overall
match. (See also the heapframe structure below.) ','line_number':644,'multiline':True]
['text':' The pattern used for the match ','line_number':654,'multiline':True]
['text':' The subject that was matched ','line_number':655,'multiline':True]
['text':' Pointer to last mark ','line_number':656,'multiline':True]
['text':' Offset to leftmost code unit ','line_number':657,'multiline':True]
['text':' Offset to rightmost code unit ','line_number':658,'multiline':True]
['text':' Offset to starting code unit ','line_number':659,'multiline':True]
['text':' Type of match (normal, JIT, DFA) ','line_number':660,'multiline':True]
['text':' Various flags ','line_number':661,'multiline':True]
['text':' Number of pairs ','line_number':662,'multiline':True]
['text':' The return code from the match ','line_number':663,'multiline':True]
['text':' Must be last in the structure ','line_number':664,'multiline':True]
['text':' ----------------------- PRIVATE STRUCTURES ----------------------------- ','line_number':668,'multiline':True]
['text':' These structures are not needed for pcre2test. ','line_number':670,'multiline':True]
['text':' Structures for checking for mutual recursion when scanning compiled or
parsed code. ','line_number':674,'multiline':True]
['text':' Structure for building a cache when filling in recursion offsets. ','line_number':687,'multiline':True]
['text':' Structure for maintaining a chain of pointers to the currently incomplete
branches, for testing for left recursion while compiling. ','line_number':694,'multiline':True]
['text':' Structure for building a list of named groups during the first pass of
compiling. ','line_number':702,'multiline':True]
['text':' Points to the name in the pattern ','line_number':706,'multiline':True]
['text':' Group number ','line_number':707,'multiline':True]
['text':' Length of the name ','line_number':708,'multiline':True]
['text':' TRUE if a duplicate ','line_number':709,'multiline':True]
['text':' Structure for passing "static" information around between the functions
doing the compiling, so that they are thread-safe. ','line_number':712,'multiline':True]
['text':' Points to the compile context ','line_number':716,'multiline':True]
['text':' Points to lower casing table ','line_number':717,'multiline':True]
['text':' Points to case-flipping table ','line_number':718,'multiline':True]
['text':' Points to character type table ','line_number':719,'multiline':True]
['text':' Points to table of type maps ','line_number':720,'multiline':True]
['text':' The start of working space ','line_number':721,'multiline':True]
['text':' The start of the compiled code ','line_number':722,'multiline':True]
['text':' The start of the pattern ','line_number':723,'multiline':True]
['text':' The end of the pattern ','line_number':724,'multiline':True]
['text':' The name/number table ','line_number':725,'multiline':True]
['text':' Size of workspace ','line_number':726,'multiline':True]
['text':' Offsets for \1 to \9 ','line_number':727,'multiline':True]
['text':' Offset of error in pattern ','line_number':728,'multiline':True]
['text':' Number of entries so far ','line_number':729,'multiline':True]
['text':' Size of each entry ','line_number':730,'multiline':True]
['text':' Depth of nested parentheses ','line_number':731,'multiline':True]
['text':' Depth of nested assertions ','line_number':732,'multiline':True]
['text':' Chain of open capture items ','line_number':733,'multiline':True]
['text':' Points to vector in pre-compile ','line_number':734,'multiline':True]
['text':' Number of entries in the list ','line_number':735,'multiline':True]
['text':' External (initial) options ','line_number':736,'multiline':True]
['text':' External flag bits to be set ','line_number':737,'multiline':True]
['text':' Count of capturing parentheses ','line_number':738,'multiline':True]
['text':' Last capture encountered ','line_number':739,'multiline':True]
['text':' Parsed pattern buffer ','line_number':740,'multiline':True]
['text':' Parsed pattern should not get here ','line_number':741,'multiline':True]
['text':' Group info vector ','line_number':742,'multiline':True]
['text':' Maximum back reference ','line_number':743,'multiline':True]
['text':' Bitmap of low back refs ','line_number':744,'multiline':True]
['text':' Newline type ','line_number':745,'multiline':True]
['text':' Newline string length ','line_number':746,'multiline':True]
['text':' Overall class range start ','line_number':747,'multiline':True]
['text':' Overall class range end ','line_number':748,'multiline':True]
['text':' Newline string when fixed length ','line_number':749,'multiline':True]
['text':' "After variable item" flag for reqbyte ','line_number':750,'multiline':True]
['text':' Maximum lookbehind (characters) ','line_number':751,'multiline':True]
['text':' (*ACCEPT) encountered ','line_number':752,'multiline':True]
['text':' (*PRUNE) or (*SKIP) encountered ','line_number':753,'multiline':True]
['text':' Had a recursion or subroutine call ','line_number':754,'multiline':True]
['text':' Duplicate names exist ','line_number':755,'multiline':True]
['text':' Structure for keeping the properties of the in-memory stack used
by the JIT matcher. ','line_number':758,'multiline':True]
['text':' Structure for items in a linked list that represents an explicit recursive
call within the pattern when running pcre2_dfa_match(). ','line_number':766,'multiline':True]
['text':' Structure for "stack" frames that are used for remembering backtracking
positions during matching. As these are used in a vector, with the ovector item
being extended, the size of the structure must be a multiple of PCRE2_SIZE. The
only way to check this at compile time is to force an error by generating an
array with a negative size. By putting this in a typedef (which is never used),
we don't generate any code when all is well. ','line_number':775,'multiline':True]
['text':' The first set of fields are variables that have to be preserved over calls
  to RRMATCH(), but which do not need to be copied to new frames. ','line_number':784,'multiline':True]
['text':' The current position in the pattern ','line_number':787,'multiline':True]
['text':' Used for short-term PCRE_SPTR values ','line_number':788,'multiline':True]
['text':' Used for character, string, or code lengths ','line_number':789,'multiline':True]
['text':' Amount to subtract on RRETURN ','line_number':790,'multiline':True]
['text':' Used for short-term PCRE2_SIZE values ','line_number':791,'multiline':True]
['text':' "Recursion" depth ','line_number':792,'multiline':True]
['text':' Type information for group frames ','line_number':793,'multiline':True]
['text':' Used for short-term 32-bit or BOOL values ','line_number':794,'multiline':True]
['text':' Where to go on in internal "return" ','line_number':795,'multiline':True]
['text':' Processing opcode ','line_number':796,'multiline':True]
['text':' At this point, the structure is 16-bit aligned. On most architectures
  the alignment requirement for a pointer will ensure that the eptr field below
  is 32-bit or 64-bit aligned. However, on m68k it is fine to have a pointer
  that is 16-bit aligned. We must therefore ensure that what comes between here
  and eptr is an odd multiple of 16 bits so as to get back into 32-bit
  alignment. This happens naturally when PCRE2_UCHAR is 8 bits wide, but needs
  fudges in the other cases. In the 32-bit case the padding comes first so that
  the occu field itself is 32-bit aligned. Without the padding, this structure
  is no longer a multiple of PCRE2_SIZE on m68k, and the check below fails. ','line_number':798,'multiline':True]
['text':' Used for other case code units ','line_number':809,'multiline':True]
['text':' Used for other case code units ','line_number':811,'multiline':True]
['text':' Ensure 32-bit alignment (see above) ','line_number':812,'multiline':True]
['text':' Ensure 32-bit alignment (see above) ','line_number':814,'multiline':True]
['text':' Used for other case code units ','line_number':815,'multiline':True]
['text':' The rest have to be copied from the previous frame whenever a new frame
  becomes current. The final field is specified as a large vector so that
  runtime array bound checks don't catch references to it. However, for any
  specific call to pcre2_match() the memory allocated for each frame structure
  allows for exactly the right size ovector for the number of capturing
  parentheses. (See also the comment for pcre2_real_match_data above.) ','line_number':818,'multiline':True]
['text':' MUST BE FIRST ','line_number':825,'multiline':True]
['text':' Can be adjusted by \K ','line_number':826,'multiline':True]
['text':' Most recent mark on the success path ','line_number':827,'multiline':True]
['text':' Current (deepest) recursion number ','line_number':828,'multiline':True]
['text':' Most recent capture ','line_number':829,'multiline':True]
['text':' Saved offset to most recent group frame ','line_number':830,'multiline':True]
['text':' Offset after highest capture ','line_number':831,'multiline':True]
['text':' Must be last in the structure ','line_number':832,'multiline':True]
['text':' This typedef is a check that the size of the heapframe structure is a
multiple of PCRE2_SIZE. See various comments above. ','line_number':835,'multiline':True]
['text':' Structure for computing the alignment of heapframe. ','line_number':841,'multiline':True]
['text':' Completely unalign the current offset ','line_number':844,'multiline':True]
['text':' Offset is its alignment ','line_number':845,'multiline':True]
['text':' This define is the minimum alignment required for a heapframe, in bytes. ','line_number':848,'multiline':True]
['text':' Structure for passing "static" information around between the functions
doing traditional NFA matching (pcre2_match() and friends). ','line_number':852,'multiline':True]
['text':' For general use ','line_number':856,'multiline':True]
['text':' Size of a backtracking frame ','line_number':857,'multiline':True]
['text':' Points to vector of frames ','line_number':858,'multiline':True]
['text':' Points after the end of the vector ','line_number':859,'multiline':True]
['text':' The original vector on the stack ','line_number':860,'multiline':True]
['text':' As it says ','line_number':861,'multiline':True]
['text':' As it says ','line_number':862,'multiline':True]
['text':' As it says ','line_number':863,'multiline':True]
['text':' Number of times a new frame is created ','line_number':864,'multiline':True]
['text':' Hit the end of the subject at some point ','line_number':865,'multiline':True]
['text':' Pattern contains (*THEN) ','line_number':866,'multiline':True]
['text':' Allow empty hard partial ','line_number':867,'multiline':True]
['text':' Points to lower casing table ','line_number':868,'multiline':True]
['text':' Points to case-flipping table ','line_number':869,'multiline':True]
['text':' Points to table of type maps ','line_number':870,'multiline':True]
['text':' The start offset value ','line_number':871,'multiline':True]
['text':' Highwater mark at end of match ','line_number':872,'multiline':True]
['text':' PARTIAL options ','line_number':873,'multiline':True]
['text':' \R interpretation ','line_number':874,'multiline':True]
['text':' Number of names in name table ','line_number':875,'multiline':True]
['text':' Size of entry in names table ','line_number':876,'multiline':True]
['text':' Table of group names ','line_number':877,'multiline':True]
['text':' For use when recursing ','line_number':878,'multiline':True]
['text':' Start of the subject string ','line_number':879,'multiline':True]
['text':' Where UTF-checked from ','line_number':880,'multiline':True]
['text':' End of the subject string ','line_number':881,'multiline':True]
['text':' Subject position at end match ','line_number':882,'multiline':True]
['text':' Earliest consulted character ','line_number':883,'multiline':True]
['text':' Latest consulted character ','line_number':884,'multiline':True]
['text':' Mark pointer to pass back on success ','line_number':885,'multiline':True]
['text':' Mark pointer to pass back on failure ','line_number':886,'multiline':True]
['text':' For passing back info ','line_number':887,'multiline':True]
['text':' For passing back a (*SKIP) name ','line_number':888,'multiline':True]
['text':' Current recurse when (*VERB) happens ','line_number':889,'multiline':True]
['text':' Match options ','line_number':890,'multiline':True]
['text':' Pattern options ','line_number':891,'multiline':True]
['text':' For counting SKIP_ARGs ','line_number':892,'multiline':True]
['text':' For re-run when SKIP arg name not found ','line_number':893,'multiline':True]
['text':' Newline type ','line_number':894,'multiline':True]
['text':' Newline string length ','line_number':895,'multiline':True]
['text':' Newline string when fixed ','line_number':896,'multiline':True]
['text':' Points to a callout block ','line_number':897,'multiline':True]
['text':' To pass back to callouts ','line_number':898,'multiline':True]
['text':' Callout function or NULL ','line_number':899,'multiline':True]
['text':' A similar structure is used for the same purpose by the DFA matching
functions. ','line_number':902,'multiline':True]
['text':' For general use ','line_number':906,'multiline':True]
['text':' Start of the compiled pattern ','line_number':907,'multiline':True]
['text':' Start of the subject string ','line_number':908,'multiline':True]
['text':' End of subject string ','line_number':909,'multiline':True]
['text':' Earliest consulted character ','line_number':910,'multiline':True]
['text':' Latest consulted character ','line_number':911,'multiline':True]
['text':' Character tables ','line_number':912,'multiline':True]
['text':' The start offset value ','line_number':913,'multiline':True]
['text':' As it says ','line_number':914,'multiline':True]
['text':' As it says ','line_number':915,'multiline':True]
['text':' As it says ','line_number':916,'multiline':True]
['text':' As it says ','line_number':917,'multiline':True]
['text':' Number of calls of internal function ','line_number':918,'multiline':True]
['text':' Match options ','line_number':919,'multiline':True]
['text':' Pattern options ','line_number':920,'multiline':True]
['text':' Newline type ','line_number':921,'multiline':True]
['text':' Newline string length ','line_number':922,'multiline':True]
['text':' Allow empty hard partial ','line_number':923,'multiline':True]
['text':' Newline string when fixed ','line_number':924,'multiline':True]
['text':' \R interpretation ','line_number':925,'multiline':True]
['text':' Points to a callout block ','line_number':926,'multiline':True]
['text':' To pass back to callouts ','line_number':927,'multiline':True]
['text':' Callout function or NULL ','line_number':928,'multiline':True]
['text':' Linked list of recursion data ','line_number':929,'multiline':True]
['text':' PCRE2_PCRE2TEST ','line_number':932,'multiline':True]
['text':' End of pcre2_intmodedep.h ','line_number':934,'multiline':True]
