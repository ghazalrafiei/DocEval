['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]
['text':' Length of an instruction word. ','line_number':36,'multiline':True]
['text':' Last register + 1. ','line_number':39,'multiline':True]
['text':' See sljit_emit_enter and sljit_emit_op0 if you want to change them. ','line_number':47,'multiline':True]
['text':' Thumb16 encodings. ','line_number':61,'multiline':True]
['text':' Thumb16 helpers. ','line_number':69,'multiline':True]
['text':' Thumb32 encodings. ','line_number':77,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':90,'multiline':True]
['text':'  Instrucion forms                                                     ','line_number':91,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':92,'multiline':True]
['text':' dot '.' changed to _
   I immediate form (possibly followed by number of immediate bits). ','line_number':94,'multiline':True]
['text':' Branch to ARM code is not optimized yet. ','line_number':258,'multiline':True]
['text':' +1 comes from the prefix IT instruction. ','line_number':278,'multiline':True]
['text':' Encoding T1 of 'B' instruction ','line_number':329,'multiline':True]
['text':' Encoding T3 of 'B' instruction ','line_number':334,'multiline':True]
['text':' Encoding T2 of 'B' instruction ','line_number':346,'multiline':True]
['text':' Really complex instruction form for branches. ','line_number':354,'multiline':True]
['text':' The others have a common form. ','line_number':361,'multiline':True]
['text':' Encoding T4 of 'B' instruction ','line_number':362,'multiline':True]
['text':' Encoding T1 of 'BL' instruction ','line_number':364,'multiline':True]
['text':' These structures are ordered by their address. ','line_number':415,'multiline':True]
['text':' Set thumb mode flag. ','line_number':478,'multiline':True]
['text':' Available by default. ','line_number':489,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':503,'multiline':True]
['text':'  Core code generator functions.                                       ','line_number':504,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':505,'multiline':True]
['text':' Thumb immediate form. ','line_number':510,'multiline':True]
['text':' Some special cases. ','line_number':517,'multiline':True]
['text':' Assembly optimization: count leading zeroes? ','line_number':526,'multiline':True]
['text':' Since imm >= 128, this must be true. ','line_number':548,'multiline':True]
['text':' Cannot be encoded. ','line_number':552,'multiline':True]
['text':' MOVS cannot be used since it destroy flags. ','line_number':561,'multiline':True]
['text':' set low 16 bits, set hi 16 bits to 0. ','line_number':572,'multiline':True]
['text':' set hi 16 bit if needed. ','line_number':576,'multiline':True]
['text':' SET_FLAGS must be 0x100000 as it is also the value of S bit (can be used for optimization). ','line_number':585,'multiline':True]
['text':' dst must be register, TMP_REG1
	   arg1 must be register, imm
	   arg2 must be register, imm ','line_number':591,'multiline':True]
['text':' Both are immediates, no temporaries are used. ','line_number':598,'multiline':True]
['text':' No form with immediate operand. ','line_number':611,'multiline':True]
['text':' Since the flags should be set, we just fallback to the register mode.
			   Although some clever things could be done here, "NOT IMM" does not worth the efforts. ','line_number':619,'multiline':True]
['text':' SLJIT_ASHR ','line_number':754,'multiline':True]
['text':' Both arguments are registers. ','line_number':778,'multiline':True]
['text':' cmp TMP_REG2, dst asr #31. ','line_number':851,'multiline':True]
['text':'
  1st letter:
  w = word
  b = byte
  h = half

  2nd letter:
  s = signed
  u = unsigned

  3rd letter:
  l = load
  s = store
','line_number':896,'multiline':True]
['text':' w u l ','line_number':912,'multiline':True]
['text':' ldr ','line_number':912,'multiline':True]
['text':' w u s ','line_number':913,'multiline':True]
['text':' str ','line_number':913,'multiline':True]
['text':' w s l ','line_number':914,'multiline':True]
['text':' ldr ','line_number':914,'multiline':True]
['text':' w s s ','line_number':915,'multiline':True]
['text':' str ','line_number':915,'multiline':True]
['text':' b u l ','line_number':917,'multiline':True]
['text':' ldrb ','line_number':917,'multiline':True]
['text':' b u s ','line_number':918,'multiline':True]
['text':' strb ','line_number':918,'multiline':True]
['text':' b s l ','line_number':919,'multiline':True]
['text':' ldrsb ','line_number':919,'multiline':True]
['text':' b s s ','line_number':920,'multiline':True]
['text':' strb ','line_number':920,'multiline':True]
['text':' h u l ','line_number':922,'multiline':True]
['text':' ldrh ','line_number':922,'multiline':True]
['text':' h u s ','line_number':923,'multiline':True]
['text':' strh ','line_number':923,'multiline':True]
['text':' h s l ','line_number':924,'multiline':True]
['text':' ldrsh ','line_number':924,'multiline':True]
['text':' h s s ','line_number':925,'multiline':True]
['text':' strh ','line_number':925,'multiline':True]
['text':' w u l ','line_number':929,'multiline':True]
['text':' ldr imm5 ','line_number':929,'multiline':True]
['text':' w u s ','line_number':930,'multiline':True]
['text':' str imm5 ','line_number':930,'multiline':True]
['text':' w s l ','line_number':931,'multiline':True]
['text':' ldr imm5 ','line_number':931,'multiline':True]
['text':' w s s ','line_number':932,'multiline':True]
['text':' str imm5 ','line_number':932,'multiline':True]
['text':' b u l ','line_number':934,'multiline':True]
['text':' ldrb imm5 ','line_number':934,'multiline':True]
['text':' b u s ','line_number':935,'multiline':True]
['text':' strb imm5 ','line_number':935,'multiline':True]
['text':' b s l ','line_number':936,'multiline':True]
['text':' not allowed ','line_number':936,'multiline':True]
['text':' b s s ','line_number':937,'multiline':True]
['text':' strb imm5 ','line_number':937,'multiline':True]
['text':' h u l ','line_number':939,'multiline':True]
['text':' ldrh imm5 ','line_number':939,'multiline':True]
['text':' h u s ','line_number':940,'multiline':True]
['text':' strh imm5 ','line_number':940,'multiline':True]
['text':' h s l ','line_number':941,'multiline':True]
['text':' not allowed ','line_number':941,'multiline':True]
['text':' h s s ','line_number':942,'multiline':True]
['text':' strh imm5 ','line_number':942,'multiline':True]
['text':' w u l ','line_number':948,'multiline':True]
['text':' ldr.w ','line_number':948,'multiline':True]
['text':' w u s ','line_number':949,'multiline':True]
['text':' str.w ','line_number':949,'multiline':True]
['text':' w s l ','line_number':950,'multiline':True]
['text':' ldr.w ','line_number':950,'multiline':True]
['text':' w s s ','line_number':951,'multiline':True]
['text':' str.w ','line_number':951,'multiline':True]
['text':' b u l ','line_number':953,'multiline':True]
['text':' ldrb.w ','line_number':953,'multiline':True]
['text':' b u s ','line_number':954,'multiline':True]
['text':' strb.w ','line_number':954,'multiline':True]
['text':' b s l ','line_number':955,'multiline':True]
['text':' ldrsb.w ','line_number':955,'multiline':True]
['text':' b s s ','line_number':956,'multiline':True]
['text':' strb.w ','line_number':956,'multiline':True]
['text':' h u l ','line_number':958,'multiline':True]
['text':' ldrh.w ','line_number':958,'multiline':True]
['text':' h u s ','line_number':959,'multiline':True]
['text':' strsh.w ','line_number':959,'multiline':True]
['text':' h s l ','line_number':960,'multiline':True]
['text':' ldrsh.w ','line_number':960,'multiline':True]
['text':' h s s ','line_number':961,'multiline':True]
['text':' strsh.w ','line_number':961,'multiline':True]
['text':' p u l ','line_number':963,'multiline':True]
['text':' pld ','line_number':963,'multiline':True]
['text':' Helper function. Dst should be reg + value, using at most 1 instruction, flags does not set. ','line_number':966,'multiline':True]
['text':' SP based immediate. ','line_number':1060,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1077,'multiline':True]
['text':'  Entry, exit                                                          ','line_number':1078,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1079,'multiline':True]
['text':' At least two registers must be set for PUSH_W and one for PUSH instruction. ','line_number':1107,'multiline':True]
['text':' Stack must be aligned to 8 bytes: (LR, R4) ','line_number':1112,'multiline':True]
['text':' not-equal ','line_number':1256,'multiline':True]
['text':' !_WIN32 ','line_number':1274,'multiline':True]
['text':' _WIN32 ','line_number':1281,'multiline':True]
['text':' The TMP_REG1 register must keep its value. ','line_number':1309,'multiline':True]
['text':' The local_size does not include the saved registers. ','line_number':1368,'multiline':True]
['text':' At least one register must be set for POP instruction. ','line_number':1405,'multiline':True]
['text':' At least two registers must be set for POP_W instruction. ','line_number':1417,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1436,'multiline':True]
['text':'  Operators                                                            ','line_number':1437,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1438,'multiline':True]
['text':' !__ARM_FEATURE_IDIV && !__ARM_ARCH_EXT_IDIV__ ','line_number':1460,'multiline':True]
['text':' !__ARM_FEATURE_IDIV && !__ARM_ARCH_EXT_IDIV__ ','line_number':1492,'multiline':True]
['text':' str rX, [sp, #-8/-16]! ','line_number':1510,'multiline':True]
['text':' str rX, [sp, #4] ','line_number':1513,'multiline':True]
['text':' str rX, [sp, #8] ','line_number':1517,'multiline':True]
['text':' ldr rX, [sp, #8] ','line_number':1537,'multiline':True]
['text':' ldr rX, [sp, #4] ','line_number':1541,'multiline':True]
['text':' ldr rX, [sp], #8/16 ','line_number':1544,'multiline':True]
['text':' __ARM_FEATURE_IDIV || __ARM_ARCH_EXT_IDIV__ ','line_number':1547,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1747,'multiline':True]
['text':'  Floating point operators                                             ','line_number':1748,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1749,'multiline':True]
['text':' Fast loads and stores. ','line_number':1760,'multiline':True]
['text':' Store the integer value from a VFP register. ','line_number':1816,'multiline':True]
['text':' Load the integer value into a VFP register. ','line_number':1831,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1960,'multiline':True]
['text':'  Other instructions                                                   ','line_number':1961,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1962,'multiline':True]
['text':' Memory. ','line_number':1975,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1979,'multiline':True]
['text':'  Conditional instructions                                             ','line_number':1980,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1981,'multiline':True]
['text':' fallthrough ','line_number':1997,'multiline':True]
['text':' fallthrough ','line_number':2006,'multiline':True]
['text':' fallthrough ','line_number':2035,'multiline':True]
['text':' fallthrough ','line_number':2043,'multiline':True]
['text':' SLJIT_JUMP ','line_number':2048,'multiline':True]
['text':' Keep lr register on the stack. ','line_number':2147,'multiline':True]
['text':' Process arguments in reversed direction. ','line_number':2167,'multiline':True]
['text':' Remove return value. ','line_number':2247,'multiline':True]
['text':' ldmia sp!, {..., lr} ','line_number':2324,'multiline':True]
['text':' These jumps are converted to jump/call instructions when possible. ','line_number':2361,'multiline':True]
['text':' !__SOFTFP__ ','line_number':2420,'multiline':True]
['text':' ldmia sp!, {..., lr} ','line_number':2422,'multiline':True]
['text':' __SOFTFP__ ','line_number':2435,'multiline':True]
['text':' The movsi (immediate) instruction does not set flags in IT block. ','line_number':2459,'multiline':True]
['text':' The condition must always be set, even if the ORR/EORI is not executed above. ','line_number':2487,'multiline':True]
['text':' set low 16 bits, set hi 16 bits to 0. ','line_number':2512,'multiline':True]
