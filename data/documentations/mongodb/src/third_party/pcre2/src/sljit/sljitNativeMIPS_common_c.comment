['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]
['text':' Latest MIPS architecture. ','line_number':27,'multiline':True]
['text':' Disable automatic detection, covers both -msoft-float and -mno-float ','line_number':30,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_32 ','line_number':41,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_32 ','line_number':43,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_32 ','line_number':49,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_32 ','line_number':51,'multiline':True]
['text':' SLJIT_MIPS_REV < 1 ','line_number':53,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':55,'multiline':True]
['text':' Length of an instruction word
   Both for mips-32 and mips-64 ','line_number':58,'multiline':True]
['text':' For position independent code, t9 must contain the function address. ','line_number':66,'multiline':True]
['text':' Floating point status register. ','line_number':69,'multiline':True]
['text':' Return address register. ','line_number':71,'multiline':True]
['text':' Flags are kept in volatile registers. ','line_number':74,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':100,'multiline':True]
['text':'  Instrucion forms                                                     ','line_number':101,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':102,'multiline':True]
['text':' Absolute registers. ','line_number':110,'multiline':True]
['text':' CMP.cond.fmt ','line_number':122,'multiline':True]
['text':' S = (20 << 21) D = (21 << 21) ','line_number':123,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':125,'multiline':True]
['text':' S = (16 << 21) D = (17 << 21) ','line_number':126,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':141,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':144,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':159,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':165,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':180,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':187,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':205,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':207,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':217,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':220,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':228,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':231,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':262,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':269,'multiline':True]
['text':' SLJIT_MIPS_REV >= 1 ','line_number':274,'multiline':True]
['text':' dest_reg is the absolute name of the register
   Useful for reordering instructions in the delay slot. ','line_number':292,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':314,'multiline':True]
['text':' B instructions. ','line_number':349,'multiline':True]
['text':' J instuctions. ','line_number':406,'multiline':True]
['text':' These structures are ordered by their address. ','line_number':552,'multiline':True]
['text':' Set the fields of immediate loads. ','line_number':620,'multiline':True]
['text':' GCC workaround for invalid code generation with -O2. ','line_number':678,'multiline':True]
['text':' __GNUC__ && !SLJIT_IS_FPU_AVAILABLE ','line_number':689,'multiline':True]
['text':' SLJIT_MIPS_REV >= 1 ','line_number':709,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':716,'multiline':True]
['text':'  Entry, exit                                                          ','line_number':717,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':718,'multiline':True]
['text':' Creates an index in data_transfer_insts array. ','line_number':720,'multiline':True]
['text':' Separates integer and floating point registers ','line_number':727,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_32 ','line_number':813,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_32 ','line_number':815,'multiline':True]
['text':' Frequent case. ','line_number':818,'multiline':True]
['text':' This alignment is valid because offset is not used after storing FPU regs. ','line_number':847,'multiline':True]
['text':' The first maximum two floating point arguments are passed in floating point
	   registers if no integer argument precedes them. The first 16 byte data is
	   passed in four integer registers, the rest is placed onto the stack.
	   The floating point registers are also part of the first 16 byte data, so
	   their corresponding integer registers are not used when they are present. ','line_number':870,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_32 ','line_number':926,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_32 ','line_number':960,'multiline':True]
['text':' This alignment is valid because offset is not used after storing FPU regs. ','line_number':1042,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1082,'multiline':True]
['text':'  Operators                                                            ','line_number':1083,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1084,'multiline':True]
['text':' u w s ','line_number':1093,'multiline':True]
['text':' sw ','line_number':1093,'multiline':True]
['text':' sd ','line_number':1093,'multiline':True]
['text':' u w l ','line_number':1094,'multiline':True]
['text':' lw ','line_number':1094,'multiline':True]
['text':' ld ','line_number':1094,'multiline':True]
['text':' u b s ','line_number':1095,'multiline':True]
['text':' sb ','line_number':1095,'multiline':True]
['text':' u b l ','line_number':1096,'multiline':True]
['text':' lbu ','line_number':1096,'multiline':True]
['text':' u h s ','line_number':1097,'multiline':True]
['text':' sh ','line_number':1097,'multiline':True]
['text':' u h l ','line_number':1098,'multiline':True]
['text':' lhu ','line_number':1098,'multiline':True]
['text':' u i s ','line_number':1099,'multiline':True]
['text':' sw ','line_number':1099,'multiline':True]
['text':' u i l ','line_number':1100,'multiline':True]
['text':' lw ','line_number':1100,'multiline':True]
['text':' lwu ','line_number':1100,'multiline':True]
['text':' s w s ','line_number':1102,'multiline':True]
['text':' sw ','line_number':1102,'multiline':True]
['text':' sd ','line_number':1102,'multiline':True]
['text':' s w l ','line_number':1103,'multiline':True]
['text':' lw ','line_number':1103,'multiline':True]
['text':' ld ','line_number':1103,'multiline':True]
['text':' s b s ','line_number':1104,'multiline':True]
['text':' sb ','line_number':1104,'multiline':True]
['text':' s b l ','line_number':1105,'multiline':True]
['text':' lb ','line_number':1105,'multiline':True]
['text':' s h s ','line_number':1106,'multiline':True]
['text':' sh ','line_number':1106,'multiline':True]
['text':' s h l ','line_number':1107,'multiline':True]
['text':' lh ','line_number':1107,'multiline':True]
['text':' s i s ','line_number':1108,'multiline':True]
['text':' sw ','line_number':1108,'multiline':True]
['text':' s i l ','line_number':1109,'multiline':True]
['text':' lw ','line_number':1109,'multiline':True]
['text':' d   s ','line_number':1111,'multiline':True]
['text':' sdc1 ','line_number':1111,'multiline':True]
['text':' d   l ','line_number':1112,'multiline':True]
['text':' ldc1 ','line_number':1112,'multiline':True]
['text':' s   s ','line_number':1113,'multiline':True]
['text':' swc1 ','line_number':1113,'multiline':True]
['text':' s   l ','line_number':1114,'multiline':True]
['text':' lwc1 ','line_number':1114,'multiline':True]
['text':' reg_ar is an absoulute register! ','line_number':1119,'multiline':True]
['text':' Can perform an operation using at most 1 instruction. ','line_number':1121,'multiline':True]
['text':' Works for both absoulte and relative addresses. ','line_number':1127,'multiline':True]
['text':' See getput_arg below.
   Note: can_cache is called only for binary operators. Those
   operators always uses word arguments without write back. ','line_number':1137,'multiline':True]
['text':' Simple operation except for updates. ','line_number':1144,'multiline':True]
['text':' Emit the necessary instructions. See can_cache above. ','line_number':1162,'multiline':True]
['text':' Using the cache. ','line_number':1186,'multiline':True]
['text':' arg1 goes to TMP_REG1 or src reg
	   arg2 goes to TMP_REG2, imm or src reg
	   TMP_REG3 can be used for caching
	   result goes to TMP_REG2, so put result can use TMP_REG1 and TMP_REG3. ','line_number':1300,'multiline':True]
['text':' And swap arguments. ','line_number':1341,'multiline':True]
['text':' src2w = src2_r unneeded. ','line_number':1345,'multiline':True]
['text':' Source 1. ','line_number':1350,'multiline':True]
['text':' Source 2. ','line_number':1371,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_64 ','line_number':1453,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_64 ','line_number':1456,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':1459,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_64 ','line_number':1462,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_64 ','line_number':1464,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':1467,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_64 ','line_number':1483,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_64 ','line_number':1486,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':1489,'multiline':True]
['text':' !SLJIT_MIPS_REV ','line_number':1493,'multiline':True]
['text':' !SLJIT_CONFIG_MIPS_64 ','line_number':1499,'multiline':True]
['text':' SLJIT_CONFIG_MIPS_64 ','line_number':1501,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':1504,'multiline':True]
['text':' SLJIT_MIPS_REV >= 1 ','line_number':1534,'multiline':True]
['text':' SLJIT_MIPS_REV < 1 ','line_number':1696,'multiline':True]
['text':' SLJIT_MIPS_REV >= 1 ','line_number':1698,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1725,'multiline':True]
['text':'  Floating point operators                                             ','line_number':1726,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1727,'multiline':True]
['text':' Store the integer value from a VFP register. ','line_number':1752,'multiline':True]
['text':' Load the integer value into a VFP register. ','line_number':1775,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1962,'multiline':True]
['text':'  Other instructions                                                   ','line_number':1963,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1964,'multiline':True]
['text':' Memory. ','line_number':1975,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1981,'multiline':True]
['text':'  Conditional instructions                                             ','line_number':1982,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1983,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':2029,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':2040,'multiline':True]
['text':' Not conditional branch. ','line_number':2093,'multiline':True]
['text':' Flip type bit for the XORI below. ','line_number':2340,'multiline':True]
['text':' Flip type bit for the XORI below. ','line_number':2344,'multiline':True]
['text':' fallthrough ','line_number':2345,'multiline':True]
['text':' SLJIT_MIPS_REV < 6 ','line_number':2354,'multiline':True]
['text':' SLJIT_MIPS_REV >= 6 ','line_number':2356,'multiline':True]
['text':' OTHER_FLAG cannot be specified as src2 argument at the moment. ','line_number':2381,'multiline':True]
['text':' SLJIT_MIPS_REV >= 1 && SLJIT_MIPS_REV < 6 ','line_number':2398,'multiline':True]
['text':' SLJIT_MIPS_REV < 1 || SLJIT_MIPS_REV >= 6 ','line_number':2458,'multiline':True]
['text':' SLJIT_MIPS_REV >= 1 ','line_number':2460,'multiline':True]
