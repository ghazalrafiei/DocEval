['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]
['text':' Last register + 1. ','line_number':44,'multiline':True]
['text':' In ARM instruction words.
   Cache lines are usually 32 byte aligned. ','line_number':52,'multiline':True]
['text':' See sljit_emit_enter and sljit_emit_op0 if you want to change them. ','line_number':62,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':80,'multiline':True]
['text':'  Instrucion forms                                                     ','line_number':81,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':82,'multiline':True]
['text':' The instruction includes the AL condition.
   INST_NAME - CONDITIONAL remove this flag. ','line_number':84,'multiline':True]
['text':' Arm v7 specific instructions. ','line_number':137,'multiline':True]
['text':' Pushing the constant pool into the instruction stream. ','line_number':150,'multiline':True]
['text':' The label could point the address after the constant pool. ','line_number':156,'multiline':True]
['text':' Must allocate a new entry in the literal pool. ','line_number':225,'multiline':True]
['text':' Place for at least two instruction (doesn't matter whether the first has a literal). ','line_number':272,'multiline':True]
['text':' Must follow tightly the previous instruction (to be able to convert it to bl instruction). ','line_number':280,'multiline':True]
['text':' Set unused flag for all literals in the constant pool.
	   I.e.: unused literals can belong to branches, which can be encoded as B or BL.
	   We can "compress" the constant pool by discarding these literals. ','line_number':296,'multiline':True]
['text':' Data transfer instruction with Rn == r15. ','line_number':303,'multiline':True]
['text':' Must be a load instruction with immediate offset. ','line_number':308,'multiline':True]
['text':' In some rare ocasions we may need future patches. The probability is close to 0 in practice. ','line_number':332,'multiline':True]
['text':' Using the values generated by patch_pc_relative_loads. ','line_number':346,'multiline':True]
['text':' Branch to Thumb code has not been optimized yet. ','line_number':431,'multiline':True]
['text':' Branch to Thumb code has not been optimized yet. ','line_number':456,'multiline':True]
['text':' Turn to branch. ','line_number':482,'multiline':True]
['text':' Get the position of the constant. ','line_number':506,'multiline':True]
['text':' Second code generation pass. ','line_number':690,'multiline':True]
['text':' Points after the current instruction. ','line_number':748,'multiline':True]
['text':' These structures are ordered by their address. ','line_number':767,'multiline':True]
['text':' code_ptr can be affected above. ','line_number':781,'multiline':True]
['text':' Fortunately, no need to shift. ','line_number':805,'multiline':True]
['text':' Unconditional branch. ','line_number':811,'multiline':True]
['text':' Set the value again (can be a simple constant). ','line_number':908,'multiline':True]
['text':' Available by default. ','line_number':953,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':969,'multiline':True]
['text':'  Entry, exit                                                          ','line_number':970,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':971,'multiline':True]
['text':' Creates an index in data_transfer_insts array. ','line_number':973,'multiline':True]
['text':' Flag bits for emit_op. ','line_number':981,'multiline':True]
['text':' s/l - store/load (1 bit)
   u/s - signed/unsigned (1 bit)
   w/b/h/N - word/byte/half/NOT allowed (2 bit)
   Storing signed and unsigned values are the same operations. ','line_number':987,'multiline':True]
['text':' s u w ','line_number':993,'multiline':True]
['text':' str ','line_number':993,'multiline':True]
['text':' s u b ','line_number':994,'multiline':True]
['text':' strb ','line_number':994,'multiline':True]
['text':' s u h ','line_number':995,'multiline':True]
['text':' strh ','line_number':995,'multiline':True]
['text':' s u N ','line_number':996,'multiline':True]
['text':' not allowed ','line_number':996,'multiline':True]
['text':' s s w ','line_number':997,'multiline':True]
['text':' str ','line_number':997,'multiline':True]
['text':' s s b ','line_number':998,'multiline':True]
['text':' strb ','line_number':998,'multiline':True]
['text':' s s h ','line_number':999,'multiline':True]
['text':' strh ','line_number':999,'multiline':True]
['text':' s s N ','line_number':1000,'multiline':True]
['text':' not allowed ','line_number':1000,'multiline':True]
['text':' l u w ','line_number':1002,'multiline':True]
['text':' ldr ','line_number':1002,'multiline':True]
['text':' l u b ','line_number':1003,'multiline':True]
['text':' ldrb ','line_number':1003,'multiline':True]
['text':' l u h ','line_number':1004,'multiline':True]
['text':' ldrh ','line_number':1004,'multiline':True]
['text':' l u p ','line_number':1005,'multiline':True]
['text':' preload ','line_number':1005,'multiline':True]
['text':' l s w ','line_number':1006,'multiline':True]
['text':' ldr ','line_number':1006,'multiline':True]
['text':' l s b ','line_number':1007,'multiline':True]
['text':' ldrsb ','line_number':1007,'multiline':True]
['text':' l s h ','line_number':1008,'multiline':True]
['text':' ldrsh ','line_number':1008,'multiline':True]
['text':' l s N ','line_number':1009,'multiline':True]
['text':' not allowed ','line_number':1009,'multiline':True]
['text':' Normal ldr/str instruction.
   Type2: ldrsb, ldrh, ldrsh ','line_number':1015,'multiline':True]
['text':' Flags for emit_op: ','line_number':1025,'multiline':True]
['text':' Arguments are swapped. ','line_number':1026,'multiline':True]
['text':' Inverted immediate. ','line_number':1028,'multiline':True]
['text':' Source and destination is register. ','line_number':1030,'multiline':True]
['text':' Unused return value. ','line_number':1032,'multiline':True]
['text':' SET_FLAGS must be (1 << 20) as it is also the value of S bit (can be used for optimization). ','line_number':1034,'multiline':True]
['text':' dst: reg
   src1: reg
   src2: reg or imm (if allowed)
   SRC2_IMM must be (1 << 25) as it is also the value of I bit (can be used for optimization). ','line_number':1036,'multiline':True]
['text':' Push saved and temporary registers
	   multiple registers: stmdb sp!, {..., lr}
	   single register: str reg, [sp, #-4]! ','line_number':1076,'multiline':True]
['text':' Stack must be aligned to 8 bytes: ','line_number':1084,'multiline':True]
['text':' The local_size does not include the saved registers. ','line_number':1287,'multiline':True]
['text':' Pop saved and temporary registers
	   multiple registers: ldmia sp!, {...}
	   single register: ldr reg, [sp], #4 ','line_number':1316,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1340,'multiline':True]
['text':'  Operators                                                            ','line_number':1341,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1342,'multiline':True]
['text':' cmp TMP_REG1, dst asr #31. ','line_number':1456,'multiline':True]
['text':' Tests whether the immediate can be stored in the 12 bit imm field.
   Returns with 0 if not possible. ','line_number':1489,'multiline':True]
['text':' Step1: Search a zero byte (8 continous zero bit). ','line_number':1536,'multiline':True]
['text':' Rol imm by rol. ','line_number':1541,'multiline':True]
['text':' Calculate arm rol. ','line_number':1543,'multiline':True]
['text':' rol by 8. ','line_number':1550,'multiline':True]
['text':' Rol imm by rol. ','line_number':1556,'multiline':True]
['text':' Calculate arm rol. ','line_number':1558,'multiline':True]
['text':' The low 8 bit must be zero. ','line_number':1571,'multiline':True]
['text':' Create imm by 1 inst. ','line_number':1649,'multiline':True]
['text':' Create imm by 2 inst. ','line_number':1659,'multiline':True]
['text':' Load integer. ','line_number':1663,'multiline':True]
['text':' Bit 25: RM is offset. ','line_number':1706,'multiline':True]
['text':' src1 is reg or TMP_REG1
	   src2 is reg, TMP_REG2, or imm
	   result goes to TMP_REG2, so put result can use TMP_REG1. ','line_number':1774,'multiline':True]
['text':' We prefers register and simple consts. ','line_number':1778,'multiline':True]
['text':' Note: additive operation (commutative). ','line_number':1853,'multiline':True]
['text':' Source 1. ','line_number':1865,'multiline':True]
['text':' Destination. ','line_number':1877,'multiline':True]
['text':' Source 2. ','line_number':1893,'multiline':True]
['text':' str rX, [sp, #-8/-16]! ','line_number':1965,'multiline':True]
['text':' str rX, [sp, #4] ','line_number':1968,'multiline':True]
['text':' str rX, [sp, #8] ','line_number':1972,'multiline':True]
['text':' ldr rX, [sp, #8] ','line_number':1986,'multiline':True]
['text':' ldr rX, [sp, #4] ','line_number':1990,'multiline':True]
['text':' ldr rX, [sp], #8/16 ','line_number':1993,'multiline':True]
['text':' !SLJIT_CONFIG_ARM_V7 ','line_number':2127,'multiline':True]
['text':' SLJIT_CONFIG_ARM_V7 ','line_number':2129,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2157,'multiline':True]
['text':'  Floating point operators                                             ','line_number':2158,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2159,'multiline':True]
['text':' Fast loads and stores. ','line_number':2179,'multiline':True]
['text':' Store the integer value from a VFP register. ','line_number':2225,'multiline':True]
['text':' Load the integer value into a VFP register. ','line_number':2240,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2376,'multiline':True]
['text':'  Other instructions                                                   ','line_number':2377,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2378,'multiline':True]
['text':' Memory. ','line_number':2391,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2395,'multiline':True]
['text':'  Conditional instructions                                             ','line_number':2396,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2397,'multiline':True]
['text':' fallthrough ','line_number':2413,'multiline':True]
['text':' fallthrough ','line_number':2422,'multiline':True]
['text':' fallthrough ','line_number':2451,'multiline':True]
['text':' fallthrough ','line_number':2459,'multiline':True]
['text':' Keep lr register on the stack. ','line_number':2573,'multiline':True]
['text':' Process arguments in reversed direction. ','line_number':2591,'multiline':True]
['text':' !__SOFTFP__ ','line_number':2663,'multiline':True]
['text':' Remove return value. ','line_number':2671,'multiline':True]
['text':' __SOFTFP__ ','line_number':2705,'multiline':True]
['text':' !__SOFTFP__ ','line_number':2751,'multiline':True]
['text':' __SOFTFP__ ','line_number':2765,'multiline':True]
['text':' These jumps are converted to jump/call instructions when possible. ','line_number':2789,'multiline':True]
['text':' !__SOFTFP__ ','line_number':2857,'multiline':True]
['text':' __SOFTFP__ ','line_number':2871,'multiline':True]
