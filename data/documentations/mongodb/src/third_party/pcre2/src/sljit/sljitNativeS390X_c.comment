['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]
['text':' Instructions. ','line_number':41,'multiline':True]
['text':' Instruction tags (most significant halfword). ','line_number':44,'multiline':True]
['text':' there are also a[2-15] available, but they are slower to access and
 * their use is limited as mundaym explained:
 *   https://github.com/zherczeg/sljit/pull/91#discussion_r486895689
 ','line_number':54,'multiline':True]
['text':' General Purpose Registers [0-15]. ','line_number':59,'multiline':True]
['text':'
 * WARNING
 * the following code is non standard and should be improved for
 * consistency, but doesn't use SLJIT_NUMBER_OF_REGISTERS based
 * registers because r0 and r1 are the ABI recommended volatiles.
 * there is a gpr() function that maps sljit to physical register numbers
 * that should be used instead of the usual index into reg_map[] and
 * will be retired ASAP (TODO: carenas)
 ','line_number':62,'multiline':True]
['text':' reg_map[SLJIT_NUMBER_OF_REGISTERS + 2]: 0 in address calculations; reserved ','line_number':72,'multiline':True]
['text':' reg_map[SLJIT_NUMBER_OF_REGISTERS + 3]: reserved ','line_number':73,'multiline':True]
['text':' reg_map[1]: 1st argument ','line_number':74,'multiline':True]
['text':' reg_map[2]: 2nd argument ','line_number':75,'multiline':True]
['text':' reg_map[3]: 3rd argument ','line_number':76,'multiline':True]
['text':' reg_map[4]: 4th argument ','line_number':77,'multiline':True]
['text':' reg_map[5]: 5th argument; 1st saved register ','line_number':78,'multiline':True]
['text':' reg_map[6] ','line_number':79,'multiline':True]
['text':' reg_map[7] ','line_number':80,'multiline':True]
['text':' reg_map[8] ','line_number':81,'multiline':True]
['text':' reg_map[9] ','line_number':82,'multiline':True]
['text':' reg_map[10] ','line_number':83,'multiline':True]
['text':' reg_map[11]: GOT ','line_number':84,'multiline':True]
['text':' reg_map[12]: Literal Pool pointer ','line_number':85,'multiline':True]
['text':' reg_map[0]: return address and flag register ','line_number':86,'multiline':True]
['text':' reg_map[SLJIT_NUMBER_OF_REGISTERS + 1]: stack pointer ','line_number':87,'multiline':True]
['text':' WARNING: r12 and r13 shouldn't be used as per ABI recommendation ','line_number':89,'multiline':True]
['text':' TODO(carenas): r12 might conflict in PIC code, reserve? ','line_number':90,'multiline':True]
['text':' TODO(carenas): r13 is usually pointed to "pool" per ABI, using a tmp
 *                like we do know might be faster though, reserve?
 ','line_number':91,'multiline':True]
['text':' TODO(carenas): should be named TMP_REG[1-2] for consistency ','line_number':95,'multiline':True]
['text':' TODO(carenas): flags should move to a different register so that
 *                link register doesn't need to change
 ','line_number':99,'multiline':True]
['text':' When reg cannot be unused. ','line_number':103,'multiline':True]
['text':' Link registers. The normal link register is r14, but since
   we use that for flags we need to use r0 instead to do fast
   calls so that flags are preserved. ','line_number':106,'multiline':True]
['text':' r14 ','line_number':109,'multiline':True]
['text':' r0 ','line_number':110,'multiline':True]
['text':' must be first ','line_number':136,'multiline':True]
['text':' required to build literal pool ','line_number':137,'multiline':True]
['text':' Convert SLJIT register to hardware register. ','line_number':140,'multiline':True]
['text':' Size of instruction in bytes. Tags must already be cleared. ','line_number':153,'multiline':True]
['text':' keep faulting instructions ','line_number':156,'multiline':True]
['text':' fallthrough ','line_number':189,'multiline':True]
['text':' fallthrough ','line_number':192,'multiline':True]
['text':' Map the given type to a 4-bit condition code mask. ','line_number':204,'multiline':True]
['text':' equal {,to zero} ','line_number':206,'multiline':True]
['text':' less than {,zero} ','line_number':207,'multiline':True]
['text':' greater than {,zero} ','line_number':208,'multiline':True]
['text':' {overflow,NaN} ','line_number':209,'multiline':True]
['text':' fallthrough ','line_number':221,'multiline':True]
['text':' fallthrough ','line_number':235,'multiline':True]
['text':' fallthrough ','line_number':263,'multiline':True]
['text':' fallthrough ','line_number':272,'multiline':True]
['text':' Overflow is considered greater, see SLJIT_SUB. ','line_number':275,'multiline':True]
['text':' fallthrough ','line_number':284,'multiline':True]
['text':' fallthrough ','line_number':292,'multiline':True]
['text':' Facility to bit index mappings.
   Note: some facilities share the same bit index. ','line_number':308,'multiline':True]
['text':' Report whether a facility is known to be present due to the compiler
   settings. This function should always be compiled to a constant
   value given a constant argument. ','line_number':325,'multiline':True]
['text':' z990 ','line_number':333,'multiline':True]
['text':' z9-109 ','line_number':336,'multiline':True]
['text':' z10 ','line_number':338,'multiline':True]
['text':' z196 ','line_number':340,'multiline':True]
['text':' zEC12 ','line_number':342,'multiline':True]
['text':' z13 ','line_number':345,'multiline':True]
['text':' z14 ','line_number':348,'multiline':True]
['text':' Report whether the given facility is available. This function always
   performs a runtime check. ','line_number':374,'multiline':True]
['text':' outputs  ','line_number':394,'multiline':True]
['text':' inputs   ','line_number':395,'multiline':True]
['text':' clobbers ','line_number':396,'multiline':True]
['text':' Static check first. May allow the function to be optimized away. ','line_number':410,'multiline':True]
['text':' TODO(carenas): variadic macro is not strictly needed ','line_number':447,'multiline':True]
['text':' RR form instructions. ','line_number':451,'multiline':True]
['text':' AND ','line_number':458,'multiline':True]
['text':' BRANCH AND SAVE ','line_number':461,'multiline':True]
['text':' BRANCH ON CONDITION ','line_number':464,'multiline':True]
['text':' TODO(mundaym): type for mask? ','line_number':465,'multiline':True]
['text':' DIVIDE ','line_number':467,'multiline':True]
['text':' EXCLUSIVE OR ','line_number':470,'multiline':True]
['text':' LOAD ','line_number':473,'multiline':True]
['text':' LOAD COMPLEMENT ','line_number':476,'multiline':True]
['text':' OR ','line_number':479,'multiline':True]
['text':' RRE form instructions ','line_number':484,'multiline':True]
['text':' AND ','line_number':491,'multiline':True]
['text':' DIVIDE LOGICAL ','line_number':494,'multiline':True]
['text':' DIVIDE SINGLE ','line_number':498,'multiline':True]
['text':' EXCLUSIVE OR ','line_number':501,'multiline':True]
['text':' LOAD ','line_number':504,'multiline':True]
['text':' LOAD BYTE ','line_number':508,'multiline':True]
['text':' LOAD COMPLEMENT ','line_number':512,'multiline':True]
['text':' LOAD HALFWORD ','line_number':515,'multiline':True]
['text':' LOAD LOGICAL ','line_number':519,'multiline':True]
['text':' LOAD LOGICAL CHARACTER ','line_number':522,'multiline':True]
['text':' LOAD LOGICAL HALFWORD ','line_number':526,'multiline':True]
['text':' MULTIPLY LOGICAL ','line_number':530,'multiline':True]
['text':' MULTIPLY SINGLE ','line_number':533,'multiline':True]
['text':' OR ','line_number':536,'multiline':True]
['text':' SUBTRACT ','line_number':539,'multiline':True]
['text':' RI-a form instructions ','line_number':544,'multiline':True]
['text':' ADD HALFWORD IMMEDIATE ','line_number':551,'multiline':True]
['text':' LOAD HALFWORD IMMEDIATE ','line_number':554,'multiline':True]
['text':' LOAD LOGICAL IMMEDIATE ','line_number':558,'multiline':True]
['text':' MULTIPLY HALFWORD IMMEDIATE ','line_number':564,'multiline':True]
['text':' OR IMMEDIATE ','line_number':568,'multiline':True]
['text':' RIL-a form instructions (requires extended immediate facility) ','line_number':573,'multiline':True]
['text':' ADD IMMEDIATE ','line_number':581,'multiline':True]
['text':' ADD IMMEDIATE HIGH ','line_number':584,'multiline':True]
['text':' TODO(mundaym): high-word facility? ','line_number':585,'multiline':True]
['text':' AND IMMEDIATE ','line_number':587,'multiline':True]
['text':' EXCLUSIVE OR IMMEDIATE ','line_number':590,'multiline':True]
['text':' INSERT IMMEDIATE ','line_number':593,'multiline':True]
['text':' LOAD IMMEDIATE ','line_number':597,'multiline':True]
['text':' LOAD LOGICAL IMMEDIATE ','line_number':600,'multiline':True]
['text':' SUBTRACT LOGICAL IMMEDIATE ','line_number':604,'multiline':True]
['text':' RX-a form instructions ','line_number':609,'multiline':True]
['text':' LOAD ','line_number':618,'multiline':True]
['text':' LOAD ADDRESS ','line_number':621,'multiline':True]
['text':' LOAD HALFWORD ','line_number':624,'multiline':True]
['text':' MULTIPLY SINGLE ','line_number':627,'multiline':True]
['text':' STORE ','line_number':630,'multiline':True]
['text':' STORE CHARACTER ','line_number':633,'multiline':True]
['text':' STORE HALFWORD ','line_number':636,'multiline':True]
['text':' RXY-a instructions ','line_number':641,'multiline':True]
['text':' LOAD ','line_number':650,'multiline':True]
['text':' LOAD BYTE ','line_number':655,'multiline':True]
['text':' LOAD HALFWORD ','line_number':659,'multiline':True]
['text':' LOAD LOGICAL ','line_number':663,'multiline':True]
['text':' LOAD LOGICAL CHARACTER ','line_number':666,'multiline':True]
['text':' LOAD LOGICAL HALFWORD ','line_number':670,'multiline':True]
['text':' MULTIPLY SINGLE ','line_number':674,'multiline':True]
['text':' STORE ','line_number':678,'multiline':True]
['text':' STORE CHARACTER ','line_number':682,'multiline':True]
['text':' STORE HALFWORD ','line_number':685,'multiline':True]
['text':' RSY-a instructions ','line_number':690,'multiline':True]
['text':' LOAD MULTIPLE ','line_number':699,'multiline':True]
['text':' SHIFT LEFT LOGICAL ','line_number':702,'multiline':True]
['text':' SHIFT RIGHT SINGLE ','line_number':705,'multiline':True]
['text':' STORE MULTIPLE ','line_number':708,'multiline':True]
['text':' RIE-f instructions (require general-instructions-extension facility) ','line_number':713,'multiline':True]
['text':' ROTATE THEN AND SELECTED BITS ','line_number':727,'multiline':True]
['text':' SLJIT_S390X_RIEF(rnsbg,  0xec0000000054) ','line_number':728,'multiline':True]
['text':' ROTATE THEN EXCLUSIVE OR SELECTED BITS ','line_number':730,'multiline':True]
['text':' SLJIT_S390X_RIEF(rxsbg,  0xec0000000057) ','line_number':731,'multiline':True]
['text':' ROTATE THEN OR SELECTED BITS ','line_number':733,'multiline':True]
['text':' ROTATE THEN INSERT SELECTED BITS ','line_number':736,'multiline':True]
['text':' SLJIT_S390X_RIEF(risbg,  0xec0000000055) ','line_number':737,'multiline':True]
['text':' SLJIT_S390X_RIEF(risbgn, 0xec0000000059) ','line_number':738,'multiline':True]
['text':' ROTATE THEN INSERT SELECTED BITS HIGH ','line_number':740,'multiline':True]
['text':' ROTATE THEN INSERT SELECTED BITS LOW ','line_number':743,'multiline':True]
['text':' SLJIT_S390X_RIEF(risblg, 0xec0000000051) ','line_number':744,'multiline':True]
['text':' RRF-c instructions (require load/store-on-condition 1 facility) ','line_number':748,'multiline':True]
['text':' LOAD HALFWORD IMMEDIATE ON CONDITION ','line_number':760,'multiline':True]
['text':' RIE-g instructions (require load/store-on-condition 2 facility) ','line_number':766,'multiline':True]
['text':' LOAD HALFWORD IMMEDIATE ON CONDITION ','line_number':779,'multiline':True]
['text':' BRANCH RELATIVE AND SAVE LONG ','line_number':793,'multiline':True]
['text':' LOAD ADDRESS RELATIVE LONG ','line_number':796,'multiline':True]
['text':' LOAD RELATIVE LONG ','line_number':799,'multiline':True]
['text':' INSERT PROGRAM MASK ','line_number':829,'multiline':True]
['text':' SET PROGRAM MASK ','line_number':835,'multiline':True]
['text':' ROTATE THEN INSERT SELECTED BITS HIGH (ZERO) ','line_number':841,'multiline':True]
['text':' Condition codes: bits 18 and 19.
	   Transformation:
	     0 (zero and no overflow) : unchanged
	     1 (non-zero and no overflow) : unchanged
	     2 (zero and overflow) : decreased by 1
	     3 (non-zero and overflow) : decreased by 1 if non-zero ','line_number':851,'multiline':True]
['text':' load 64-bit immediate into register without clobbering flags ','line_number':866,'multiline':True]
['text':' 4 byte instructions ','line_number':869,'multiline':True]
['text':' 6 byte instructions (requires extended immediate facility) ','line_number':885,'multiline':True]
['text':' TODO(mundaym): instruction sequences that don't use extended immediates ','line_number':900,'multiline':True]
['text':' transform memory operand into D(X,B) form with a signed 20-bit offset ','line_number':910,'multiline':True]
['text':' clobbered, must not be r0 ','line_number':913,'multiline':True]
['text':' shift and put the result into tmp ','line_number':925,'multiline':True]
['text':' clear offset ','line_number':929,'multiline':True]
['text':' clear offset ','line_number':935,'multiline':True]
['text':' transform memory operand into D(X,B) form with an unsigned 12-bit offset ','line_number':943,'multiline':True]
['text':' clobbered, must not be r0 ','line_number':946,'multiline':True]
['text':' shift and put the result into tmp ','line_number':958,'multiline':True]
['text':' clear offset ','line_number':962,'multiline':True]
['text':' clear offset ','line_number':968,'multiline':True]
['text':' May clobber tmp1. ','line_number':980,'multiline':True]
['text':' May clobber tmp1. ','line_number':1002,'multiline':True]
['text':' Extra instructions needed for address computation can be executed independently. ','line_number':1291,'multiline':True]
['text':' instructions ','line_number':1400,'multiline':True]
['text':' literal pool ','line_number':1401,'multiline':True]
['text':' TODO(carenas): only need 32 bit ','line_number':1407,'multiline':True]
['text':' branch handling ','line_number':1413,'multiline':True]
['text':' TODO(carenas): compiler->executable_size could be calculated
         *                before to avoid the following loop (except for
         *                pool_size)
         ','line_number':1418,'multiline':True]
['text':' calculate the size of the code ','line_number':1422,'multiline':True]
['text':' TODO(carenas): instruction tag vs size/addr == j
			 * using instruction tags for const is creative
			 * but unlike all other architectures, and is not
			 * done consistently for all other objects.
			 * This might need reviewing later.
			 ','line_number':1429,'multiline':True]
['text':' encoded: ','line_number':1445,'multiline':True]
['text':'   brasl %r14, <rel_addr> (or brcl <mask>, <rel_addr>) ','line_number':1446,'multiline':True]
['text':' replace with: ','line_number':1447,'multiline':True]
['text':'   lgrl %r1, <pool_addr> ','line_number':1448,'multiline':True]
['text':'   bras %r14, %r1 (or bcr <mask>, %r1) ','line_number':1449,'multiline':True]
['text':' emit trailing label ','line_number':1463,'multiline':True]
['text':' pad code size to 8 bytes so is accessible with half word offsets ','line_number':1473,'multiline':True]
['text':' the literal pool needs to be doubleword aligned ','line_number':1474,'multiline':True]
['text':' allocate target buffer ','line_number':1478,'multiline':True]
['text':' TODO(carenas): pool is optional, and the ABI recommends it to
         *                be created before the function code, instead of
         *                globally; if generated code is too big could
         *                need offsets bigger than 32bit words and asser()
         ','line_number':1485,'multiline':True]
['text':' update label addresses ','line_number':1494,'multiline':True]
['text':' reset jumps ','line_number':1502,'multiline':True]
['text':' emit the code ','line_number':1506,'multiline':True]
['text':' clear the const tag ','line_number':1514,'multiline':True]
['text':' update instruction with relative address of constant ','line_number':1517,'multiline':True]
['text':' halfword (not byte) offset ','line_number':1522,'multiline':True]
['text':' update address ','line_number':1527,'multiline':True]
['text':' store initial value into pool and update pool address ','line_number':1530,'multiline':True]
['text':' move to next constant ','line_number':1533,'multiline':True]
['text':' load address into tmp1 ','line_number':1541,'multiline':True]
['text':' store jump target into pool and update pool address ','line_number':1551,'multiline':True]
['text':' branch to tmp1 ','line_number':1554,'multiline':True]
['text':' brcl -> bcr ','line_number':1558,'multiline':True]
['text':' brasl -> basr ','line_number':1561,'multiline':True]
['text':' offset must be halfword aligned ','line_number':1573,'multiline':True]
['text':' TODO(mundaym): handle arbitrary offsets ','line_number':1576,'multiline':True]
['text':' patch jump target ','line_number':1578,'multiline':True]
['text':' store target into pool ','line_number':1589,'multiline':True]
['text':' TODO(mundaym): implement all ','line_number':1619,'multiline':True]
['text':' FLOGR instruction ','line_number':1622,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1631,'multiline':True]
['text':'  Entry, exit                                                          ','line_number':1632,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1633,'multiline':True]
['text':' Saved registers are stored in callee allocated save area. ','line_number':1646,'multiline':True]
['text':' save registers TODO(MGM): optimize ','line_number':1651,'multiline':True]
['text':' std ','line_number':1673,'multiline':True]
['text':' std ','line_number':1678,'multiline':True]
['text':' lay ','line_number':1685,'multiline':True]
['text':' ly ','line_number':1724,'multiline':True]
['text':' lay ','line_number':1726,'multiline':True]
['text':' save registers TODO(MGM): optimize ','line_number':1730,'multiline':True]
['text':' ld ','line_number':1752,'multiline':True]
['text':' ld ','line_number':1757,'multiline':True]
['text':' return ','line_number':1770,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1773,'multiline':True]
['text':'  Operators                                                            ','line_number':1774,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':1775,'multiline':True]
['text':' The following invalid instruction is emitted by gdb. ','line_number':1788,'multiline':True]
['text':' 2-byte trap ','line_number':1789,'multiline':True]
['text':' 2-byte nop ','line_number':1791,'multiline':True]
['text':' signed multiplication from: ','line_number':1796,'multiline':True]
['text':' Hacker's Delight, Second Edition: Chapter 8-3. ','line_number':1797,'multiline':True]
['text':' unsigned multiplication ','line_number':1803,'multiline':True]
['text':' quotient ','line_number':1814,'multiline':True]
['text':' remainder ','line_number':1816,'multiline':True]
['text':' quotient ','line_number':1824,'multiline':True]
['text':' remainder ','line_number':1826,'multiline':True]
['text':' quotient ','line_number':1834,'multiline':True]
['text':' remainder ','line_number':1836,'multiline':True]
['text':' quotient ','line_number':1843,'multiline':True]
['text':' remainder ','line_number':1845,'multiline':True]
['text':' swap result registers ','line_number':1855,'multiline':True]
['text':' LEVAL will be defined later with different parameters as needed ','line_number':1861,'multiline':True]
['text':' LOAD REGISTER ','line_number':1880,'multiline':True]
['text':' 32-bit ','line_number':1885,'multiline':True]
['text':' 64-bit ','line_number':1903,'multiline':True]
['text':' LOAD IMMEDIATE ','line_number':1936,'multiline':True]
['text':' LOAD ','line_number':1961,'multiline':True]
['text':' TODO(carenas): avoid reg being defined later ','line_number':1962,'multiline':True]
['text':' TODO(carenas): convert all calls below to LEVAL ','line_number':1968,'multiline':True]
['text':' STORE and STORE IMMEDIATE ','line_number':2015,'multiline':True]
['text':' TODO(mundaym): MOVE IMMEDIATE? ','line_number':2020,'multiline':True]
['text':' MOVE CHARACTERS ','line_number':2048,'multiline':True]
['text':' no immediates ','line_number':2090,'multiline':True]
['text':' TODO(mundaym): optimize loads and stores ','line_number':2099,'multiline':True]
['text':' emulate ~x with x^-1 ','line_number':2102,'multiline':True]
['text':' emulate ~x with x^-1 ','line_number':2110,'multiline':True]
['text':' clobbers tmp1 ','line_number':2123,'multiline':True]
['text':' TODO(mundaym): no eimm (?) ','line_number':2127,'multiline':True]
['text':' clobbers tmp1 ','line_number':2134,'multiline':True]
['text':' TODO(mundaym): no eimm (?) ','line_number':2138,'multiline':True]
['text':' TODO(carenas): doesn't need FAIL_IF ','line_number':2148,'multiline':True]
['text':' ar ','line_number':2175,'multiline':True]
['text':' agr ','line_number':2176,'multiline':True]
['text':' ark ','line_number':2177,'multiline':True]
['text':' agrk ','line_number':2178,'multiline':True]
['text':' a ','line_number':2179,'multiline':True]
['text':' ay ','line_number':2180,'multiline':True]
['text':' ag ','line_number':2181,'multiline':True]
['text':' alr ','line_number':2185,'multiline':True]
['text':' algr ','line_number':2186,'multiline':True]
['text':' alrk ','line_number':2187,'multiline':True]
['text':' algrk ','line_number':2188,'multiline':True]
['text':' al ','line_number':2189,'multiline':True]
['text':' aly ','line_number':2190,'multiline':True]
['text':' alg ','line_number':2191,'multiline':True]
['text':' asi ','line_number':2207,'multiline':True]
['text':' agsi ','line_number':2207,'multiline':True]
['text':' alsi ','line_number':2209,'multiline':True]
['text':' algsi ','line_number':2209,'multiline':True]
['text':' ahik ','line_number':2215,'multiline':True]
['text':' aghik ','line_number':2215,'multiline':True]
['text':' alhsik ','line_number':2217,'multiline':True]
['text':' alghsik ','line_number':2217,'multiline':True]
['text':' alfi ','line_number':2224,'multiline':True]
['text':' algfi ','line_number':2224,'multiline':True]
['text':' slgfi ','line_number':2229,'multiline':True]
['text':' afi ','line_number':2234,'multiline':True]
['text':' agfi ','line_number':2234,'multiline':True]
['text':' sr ','line_number':2254,'multiline':True]
['text':' sgr ','line_number':2255,'multiline':True]
['text':' srk ','line_number':2256,'multiline':True]
['text':' sgrk ','line_number':2257,'multiline':True]
['text':' s ','line_number':2258,'multiline':True]
['text':' sy ','line_number':2259,'multiline':True]
['text':' sg ','line_number':2260,'multiline':True]
['text':' slr ','line_number':2264,'multiline':True]
['text':' slgr ','line_number':2265,'multiline':True]
['text':' slrk ','line_number':2266,'multiline':True]
['text':' slgrk ','line_number':2267,'multiline':True]
['text':' sl ','line_number':2268,'multiline':True]
['text':' sly ','line_number':2269,'multiline':True]
['text':' slg ','line_number':2270,'multiline':True]
['text':' cfi ','line_number':2293,'multiline':True]
['text':' cgfi ','line_number':2293,'multiline':True]
['text':' clfi ','line_number':2299,'multiline':True]
['text':' clgfi ','line_number':2299,'multiline':True]
['text':' alghsik ','line_number':2303,'multiline':True]
['text':' c ','line_number':2308,'multiline':True]
['text':' cl ','line_number':2308,'multiline':True]
['text':' cy ','line_number':2313,'multiline':True]
['text':' cg ','line_number':2313,'multiline':True]
['text':' cly ','line_number':2315,'multiline':True]
['text':' clg ','line_number':2315,'multiline':True]
['text':' cr ','line_number':2320,'multiline':True]
['text':' cgr ','line_number':2320,'multiline':True]
['text':' clr ','line_number':2322,'multiline':True]
['text':' clgr ','line_number':2322,'multiline':True]
['text':' lcr ','line_number':2327,'multiline':True]
['text':' lcgr ','line_number':2327,'multiline':True]
['text':' asi ','line_number':2338,'multiline':True]
['text':' agsi ','line_number':2338,'multiline':True]
['text':' alsi ','line_number':2340,'multiline':True]
['text':' algsi ','line_number':2340,'multiline':True]
['text':' ahik ','line_number':2346,'multiline':True]
['text':' aghik ','line_number':2346,'multiline':True]
['text':' alhsik ','line_number':2348,'multiline':True]
['text':' alghsik ','line_number':2348,'multiline':True]
['text':' slfi ','line_number':2356,'multiline':True]
['text':' slgfi ','line_number':2356,'multiline':True]
['text':' algfi ','line_number':2361,'multiline':True]
['text':' afi ','line_number':2366,'multiline':True]
['text':' agfi ','line_number':2366,'multiline':True]
['text':' In case of overflow, the sign bit of the two source operands must be different, and
			     - the first operand is greater if the sign bit of the result is set
			     - the first operand is less if the sign bit of the result is not set
			   The -result operation sets the corrent sign, because the result cannot be zero.
			   The overflow is considered greater, since the result must be equal to INT_MIN so its sign bit is set. ','line_number':2380,'multiline':True]
['text':' msr ','line_number':2399,'multiline':True]
['text':' msgr ','line_number':2400,'multiline':True]
['text':' msrkc ','line_number':2401,'multiline':True]
['text':' msgrkc ','line_number':2402,'multiline':True]
['text':' ms ','line_number':2403,'multiline':True]
['text':' msy ','line_number':2404,'multiline':True]
['text':' msg ','line_number':2405,'multiline':True]
['text':' msrkc ','line_number':2411,'multiline':True]
['text':' msgrkc ','line_number':2412,'multiline':True]
['text':' msc ','line_number':2414,'multiline':True]
['text':' msgc ','line_number':2415,'multiline':True]
['text':' if have_misc2 fails, this operation should be emulated. 32 bit emulation:
		FAIL_IF(push_inst(compiler, lgfr(tmp0, src1_r)));
		FAIL_IF(push_inst(compiler, msgfr(tmp0, src2_r)));
		if (dst_r != tmp0) {
			FAIL_IF(push_inst(compiler, lr(dst_r, tmp0)));
		}
		FAIL_IF(push_inst(compiler, aih(tmp0, 1)));
		FAIL_IF(push_inst(compiler, nihf(tmp0, ~1U)));
		FAIL_IF(push_inst(compiler, ipm(tmp1)));
		FAIL_IF(push_inst(compiler, oilh(tmp1, 0x2000))); ','line_number':2426,'multiline':True]
['text':' mhi ','line_number':2442,'multiline':True]
['text':' mghi ','line_number':2442,'multiline':True]
['text':' msfi ','line_number':2447,'multiline':True]
['text':' msgfi ','line_number':2447,'multiline':True]
['text':' nihf ','line_number':2475,'multiline':True]
['text':' nilf ','line_number':2476,'multiline':True]
['text':' oihf ','line_number':2480,'multiline':True]
['text':' oilf ','line_number':2481,'multiline':True]
['text':' oihf ','line_number':2486,'multiline':True]
['text':' oilf ','line_number':2488,'multiline':True]
['text':' oihh ','line_number':2492,'multiline':True]
['text':' oihl ','line_number':2494,'multiline':True]
['text':' oilh ','line_number':2496,'multiline':True]
['text':' oill ','line_number':2498,'multiline':True]
['text':' xihf ','line_number':2503,'multiline':True]
['text':' xilf ','line_number':2505,'multiline':True]
['text':' nr ','line_number':2510,'multiline':True]
['text':' ngr ','line_number':2511,'multiline':True]
['text':' nrk ','line_number':2512,'multiline':True]
['text':' ngrk ','line_number':2513,'multiline':True]
['text':' n ','line_number':2514,'multiline':True]
['text':' ny ','line_number':2515,'multiline':True]
['text':' ng ','line_number':2516,'multiline':True]
['text':' or ','line_number':2520,'multiline':True]
['text':' ogr ','line_number':2521,'multiline':True]
['text':' ork ','line_number':2522,'multiline':True]
['text':' ogrk ','line_number':2523,'multiline':True]
['text':' o ','line_number':2524,'multiline':True]
['text':' oy ','line_number':2525,'multiline':True]
['text':' og ','line_number':2526,'multiline':True]
['text':' xr ','line_number':2530,'multiline':True]
['text':' xgr ','line_number':2531,'multiline':True]
['text':' xrk ','line_number':2532,'multiline':True]
['text':' xgrk ','line_number':2533,'multiline':True]
['text':' x ','line_number':2534,'multiline':True]
['text':' xy ','line_number':2535,'multiline':True]
['text':' xg ','line_number':2536,'multiline':True]
['text':' sll ','line_number':2622,'multiline':True]
['text':' srl ','line_number':2624,'multiline':True]
['text':' sra ','line_number':2626,'multiline':True]
['text':' sllk ','line_number':2632,'multiline':True]
['text':' sllg ','line_number':2632,'multiline':True]
['text':' srlk ','line_number':2634,'multiline':True]
['text':' srlg ','line_number':2634,'multiline':True]
['text':' srak ','line_number':2636,'multiline':True]
['text':' srag ','line_number':2636,'multiline':True]
['text':' alcr ','line_number':2648,'multiline':True]
['text':' alcgr ','line_number':2649,'multiline':True]
['text':' alc ','line_number':2653,'multiline':True]
['text':' alcg ','line_number':2654,'multiline':True]
['text':' slbr ','line_number':2658,'multiline':True]
['text':' slbgr ','line_number':2659,'multiline':True]
['text':' slb ','line_number':2663,'multiline':True]
['text':' slbg ','line_number':2664,'multiline':True]
['text':' TODO(carenas): implement? ','line_number':2762,'multiline':True]
['text':' TODO(carenas): implement ','line_number':2768,'multiline':True]
['text':' TODO(carenas): probably should not success by default ','line_number':2771,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2802,'multiline':True]
['text':'  Floating point operators                                             ','line_number':2803,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':2804,'multiline':True]
['text':' ste ','line_number':2822,'multiline':True]
['text':' std ','line_number':2822,'multiline':True]
['text':' le ','line_number':2824,'multiline':True]
['text':' ld ','line_number':2824,'multiline':True]
['text':' stey ','line_number':2832,'multiline':True]
['text':' stdy ','line_number':2832,'multiline':True]
['text':' ley ','line_number':2834,'multiline':True]
['text':' ldy ','line_number':2834,'multiline':True]
['text':' M3 is set to 5 ','line_number':2864,'multiline':True]
['text':' cgebr ','line_number':2866,'multiline':True]
['text':' cgdbr ','line_number':2866,'multiline':True]
['text':' cfebr ','line_number':2868,'multiline':True]
['text':' cfdbr ','line_number':2868,'multiline':True]
['text':' cegbr ','line_number':2895,'multiline':True]
['text':' cdgbr ','line_number':2895,'multiline':True]
['text':' cefbr ','line_number':2897,'multiline':True]
['text':' cdfbr ','line_number':2897,'multiline':True]
['text':' cebr ','line_number':2919,'multiline':True]
['text':' ceb ','line_number':2920,'multiline':True]
['text':' cdbr ','line_number':2922,'multiline':True]
['text':' cdb ','line_number':2923,'multiline':True]
['text':' ldebr ','line_number':2943,'multiline':True]
['text':' ldeb ','line_number':2943,'multiline':True]
['text':' ler ','line_number':2956,'multiline':True]
['text':' ldr ','line_number':2956,'multiline':True]
['text':' Only SLJIT_CONV_F32_FROM_F64. ','line_number':2961,'multiline':True]
['text':' ledbr ','line_number':2962,'multiline':True]
['text':' lcebr ','line_number':2965,'multiline':True]
['text':' lcdbr ','line_number':2965,'multiline':True]
['text':' lpebr ','line_number':2969,'multiline':True]
['text':' lpdbr ','line_number':2969,'multiline':True]
['text':' ler ','line_number':2985,'multiline':True]
['text':' ldr ','line_number':2985,'multiline':True]
['text':' aebr ','line_number':3029,'multiline':True]
['text':' adbr ','line_number':3029,'multiline':True]
['text':' aeb ','line_number':3030,'multiline':True]
['text':' adb ','line_number':3030,'multiline':True]
['text':' sebr ','line_number':3033,'multiline':True]
['text':' sdbr ','line_number':3033,'multiline':True]
['text':' seb ','line_number':3034,'multiline':True]
['text':' sdb ','line_number':3034,'multiline':True]
['text':' meebr ','line_number':3037,'multiline':True]
['text':' mdbr ','line_number':3037,'multiline':True]
['text':' meeb ','line_number':3038,'multiline':True]
['text':' mdb ','line_number':3038,'multiline':True]
['text':' debr ','line_number':3042,'multiline':True]
['text':' ddbr ','line_number':3042,'multiline':True]
['text':' deb ','line_number':3043,'multiline':True]
['text':' ddb ','line_number':3043,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':3056,'multiline':True]
['text':'  Other instructions                                                   ','line_number':3057,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':3058,'multiline':True]
['text':' memory ','line_number':3069,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':3073,'multiline':True]
['text':'  Conditional instructions                                             ','line_number':3074,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':3075,'multiline':True]
['text':' record jump ','line_number':3100,'multiline':True]
['text':' emit jump instruction ','line_number':3107,'multiline':True]
['text':' target address must be even ','line_number':3144,'multiline':True]
['text':' 64-bit ','line_number':3149,'multiline':True]
['text':' emit jump instruction ','line_number':3152,'multiline':True]
['text':' 64-bit ','line_number':3170,'multiline':True]
['text':' dst is also source operand ','line_number':3209,'multiline':True]
['text':' fallthrough ','line_number':3216,'multiline':True]
['text':' can write straight into destination ','line_number':3218,'multiline':True]
['text':' TODO(mundaym): fold into cmov helper function? ','line_number':3225,'multiline':True]
['text':' TODO(mundaym): no load/store-on-condition 2 facility (ipm? branch-and-set?) ','line_number':3232,'multiline':True]
['text':' apply bitwise op and set condition codes ','line_number':3237,'multiline':True]
['text':' store result to memory if required ','line_number':3255,'multiline':True]
['text':' TODO(mundaym): fast path with lscond2 ','line_number':3274,'multiline':True]
['text':' TODO(mundaym): implement ','line_number':3285,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':3289,'multiline':True]
['text':'  Other instructions                                                   ','line_number':3290,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':3291,'multiline':True]
['text':' On s390x we build a literal pool to hold constants. This has two main
   advantages:

     1. we only need one instruction in the instruction stream (LGRL)
     2. we can store 64 bit addresses and use 32 bit offsets

   To retrofit the extra information needed to build the literal pool we
   add a new sljit_s390x_const struct that contains the initial value but
   can still be cast to a sljit_const. ','line_number':3293,'multiline':True]
['text':' always 64-bit ','line_number':3326,'multiline':True]
['text':' Update the constant pool. ','line_number':3333,'multiline':True]
['text':' TODO(carenas): EVAL probably should move up or be refactored ','line_number':3378,'multiline':True]
['text':' TODO(carenas): undef other macros that spill like is_u12? ','line_number':3385,'multiline':True]
