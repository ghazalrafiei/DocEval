['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]
['text':'
  This file contains the basic configuration options for the SLJIT compiler
  and their default values. These options can be overridden in the
  sljitConfigPre.h header file when SLJIT_HAVE_CONFIG_PRE is set to a
  non-zero value.
','line_number':34,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':41,'multiline':True]
['text':'  Architecture                                                         ','line_number':42,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':43,'multiline':True]
['text':' Architecture selection. ','line_number':45,'multiline':True]
['text':' #define SLJIT_CONFIG_X86_32 1 ','line_number':46,'multiline':True]
['text':' #define SLJIT_CONFIG_X86_64 1 ','line_number':47,'multiline':True]
['text':' #define SLJIT_CONFIG_ARM_V5 1 ','line_number':48,'multiline':True]
['text':' #define SLJIT_CONFIG_ARM_V7 1 ','line_number':49,'multiline':True]
['text':' #define SLJIT_CONFIG_ARM_THUMB2 1 ','line_number':50,'multiline':True]
['text':' #define SLJIT_CONFIG_ARM_64 1 ','line_number':51,'multiline':True]
['text':' #define SLJIT_CONFIG_PPC_32 1 ','line_number':52,'multiline':True]
['text':' #define SLJIT_CONFIG_PPC_64 1 ','line_number':53,'multiline':True]
['text':' #define SLJIT_CONFIG_MIPS_32 1 ','line_number':54,'multiline':True]
['text':' #define SLJIT_CONFIG_MIPS_64 1 ','line_number':55,'multiline':True]
['text':' #define SLJIT_CONFIG_SPARC_32 1 ','line_number':56,'multiline':True]
['text':' #define SLJIT_CONFIG_S390X 1 ','line_number':57,'multiline':True]
['text':' #define SLJIT_CONFIG_AUTO 1 ','line_number':59,'multiline':True]
['text':' #define SLJIT_CONFIG_UNSUPPORTED 1 ','line_number':60,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':62,'multiline':True]
['text':'  Utilities                                                            ','line_number':63,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':64,'multiline':True]
['text':' Implements a stack like data structure (by using mmap / VirtualAlloc  ','line_number':66,'multiline':True]
['text':' or a custom allocator). ','line_number':67,'multiline':True]
['text':' Enabled by default ','line_number':69,'multiline':True]
['text':' Uses user provided allocator to allocate the stack (see SLJIT_UTIL_STACK) ','line_number':73,'multiline':True]
['text':' Disabled by default ','line_number':75,'multiline':True]
['text':' Single threaded application. Does not require any locks. ','line_number':79,'multiline':True]
['text':' Disabled by default. ','line_number':81,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':85,'multiline':True]
['text':'  Configuration                                                        ','line_number':86,'multiline':True]
['text':' --------------------------------------------------------------------- ','line_number':87,'multiline':True]
['text':' If SLJIT_STD_MACROS_DEFINED is not defined, the application should
   define SLJIT_MALLOC, SLJIT_FREE, SLJIT_MEMCPY, and NULL. ','line_number':89,'multiline':True]
['text':' Disabled by default. ','line_number':92,'multiline':True]
['text':' Executable code allocation:
   If SLJIT_EXECUTABLE_ALLOCATOR is not defined, the application should
   define SLJIT_MALLOC_EXEC, SLJIT_FREE_EXEC, and SLJIT_EXEC_OFFSET. ','line_number':96,'multiline':True]
['text':' Enabled by default. ','line_number':100,'multiline':True]
['text':' When SLJIT_PROT_EXECUTABLE_ALLOCATOR is enabled SLJIT uses
   an allocator which does not set writable and executable
   permission flags at the same time.
   Instead, it creates a shared memory segment (usually backed by a file)
   and maps it twice, with different permissions, depending on the use
   case.
   The trade-off is increased use of virtual memory, incompatibility with
   fork(), and some possible additional security risks by the use of
   publicly accessible files for the generated code. ','line_number':103,'multiline':True]
['text':' Disabled by default. ','line_number':113,'multiline':True]
['text':' When SLJIT_WX_EXECUTABLE_ALLOCATOR is enabled SLJIT uses an
   allocator which does not set writable and executable permission
   flags at the same time.
   Instead, it creates a new independent map on each invocation and
   switches permissions at the underlying pages as needed.
   The trade-off is increased memory use and degraded performance. ','line_number':117,'multiline':True]
['text':' Disabled by default. ','line_number':124,'multiline':True]
['text':' !SLJIT_EXECUTABLE_ALLOCATOR ','line_number':128,'multiline':True]
['text':' Force cdecl calling convention even if a better calling
   convention (e.g. fastcall) is supported by the C compiler.
   If this option is disabled (this is the default), functions
   called from JIT should be defined with SLJIT_FUNC attribute.
   Standard C functions can still be called by using the
   SLJIT_CALL_CDECL jump type. ','line_number':130,'multiline':True]
['text':' Disabled by default ','line_number':137,'multiline':True]
['text':' Return with error when an invalid argument is passed. ','line_number':141,'multiline':True]
['text':' Disabled by default ','line_number':143,'multiline':True]
['text':' Debug checks (assertions, etc.). ','line_number':147,'multiline':True]
['text':' Enabled by default ','line_number':149,'multiline':True]
['text':' Verbose operations. ','line_number':153,'multiline':True]
['text':' Enabled by default ','line_number':155,'multiline':True]
['text':'
  SLJIT_IS_FPU_AVAILABLE
    The availability of the FPU can be controlled by SLJIT_IS_FPU_AVAILABLE.
      zero value - FPU is NOT present.
      nonzero value - FPU is present.
','line_number':159,'multiline':True]
['text':' For further configurations, see the beginning of sljitConfigInternal.h ','line_number':166,'multiline':True]
['text':' extern "C" ','line_number':169,'multiline':True]
['text':' SLJIT_CONFIG_H_ ','line_number':172,'multiline':True]
