['text':'
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ','line_number':1,'multiline':True]
['text':'
   SLJIT defines the following architecture dependent types and macros:

   Types:
     sljit_s8, sljit_u8   : signed and unsigned 8 bit integer type
     sljit_s16, sljit_u16 : signed and unsigned 16 bit integer type
     sljit_s32, sljit_u32 : signed and unsigned 32 bit integer type
     sljit_sw, sljit_uw   : signed and unsigned machine word, enough to store a pointer
     sljit_p              : unsgined pointer value (usually the same as sljit_uw, but
                            some 64 bit ABIs may use 32 bit pointers)
     sljit_f32            : 32 bit single precision floating point value
     sljit_f64            : 64 bit double precision floating point value

   Macros for feature detection (boolean):
     SLJIT_32BIT_ARCHITECTURE : 32 bit architecture
     SLJIT_64BIT_ARCHITECTURE : 64 bit architecture
     SLJIT_LITTLE_ENDIAN : little endian architecture
     SLJIT_BIG_ENDIAN : big endian architecture
     SLJIT_UNALIGNED : allows unaligned memory accesses for non-fpu operations (only!)
     SLJIT_INDIRECT_CALL : see SLJIT_FUNC_ADDR() for more information

   Constants:
     SLJIT_NUMBER_OF_REGISTERS : number of available registers
     SLJIT_NUMBER_OF_SCRATCH_REGISTERS : number of available scratch registers
     SLJIT_NUMBER_OF_SAVED_REGISTERS : number of available saved registers
     SLJIT_NUMBER_OF_FLOAT_REGISTERS : number of available floating point registers
     SLJIT_NUMBER_OF_SCRATCH_FLOAT_REGISTERS : number of available floating point scratch registers
     SLJIT_NUMBER_OF_SAVED_FLOAT_REGISTERS : number of available floating point saved registers
     SLJIT_WORD_SHIFT : the shift required to apply when accessing a sljit_sw/sljit_uw array by index
     SLJIT_F32_SHIFT : the shift required to apply when accessing
                       a single precision floating point array by index
     SLJIT_F64_SHIFT : the shift required to apply when accessing
                       a double precision floating point array by index
     SLJIT_PREF_SHIFT_REG : x86 systems prefers ecx for shifting by register
                            the scratch register index of ecx is stored in this variable
     SLJIT_LOCALS_OFFSET : local space starting offset (SLJIT_SP + SLJIT_LOCALS_OFFSET)
     SLJIT_RETURN_ADDRESS_OFFSET : a return instruction always adds this offset to the return address

   Other macros:
     SLJIT_FUNC : calling convention attribute for both calling JIT from C and C calling back from JIT
     SLJIT_W(number) : defining 64 bit constants on 64 bit architectures (platform independent helper)
','line_number':44,'multiline':True]
['text':'***************','line_number':87,'multiline':True]
['text':' Sanity check. ','line_number':88,'multiline':True]
['text':'***************','line_number':89,'multiline':True]
['text':' SLJIT_CONFIG_AUTO ','line_number':124,'multiline':True]
['text':' !SLJIT_CONFIG_AUTO ','line_number':126,'multiline':True]
['text':' !SLJIT_CONFIG ','line_number':127,'multiline':True]
['text':'******************************************************','line_number':129,'multiline':True]
['text':' Automatic CPU detection (requires compiler support). ','line_number':130,'multiline':True]
['text':'******************************************************','line_number':131,'multiline':True]
['text':' Unsupported architecture ','line_number':164,'multiline':True]
['text':' _WIN32 ','line_number':168,'multiline':True]
['text':' !_WIN32 ','line_number':184,'multiline':True]
['text':' SLJIT_CONFIG_AUTO ','line_number':185,'multiline':True]
['text':'****************************','line_number':191,'multiline':True]
['text':' CPU family type detection. ','line_number':192,'multiline':True]
['text':'****************************','line_number':193,'multiline':True]
['text':'*********************************************************','line_number':212,'multiline':True]
['text':' Intel Control-flow Enforcement Technology (CET) spport. ','line_number':213,'multiline':True]
['text':'*********************************************************','line_number':214,'multiline':True]
['text':' SLJIT_CONFIG_X86 ','line_number':226,'multiline':True]
['text':'********************************','line_number':228,'multiline':True]
['text':' External function definitions. ','line_number':229,'multiline':True]
['text':'********************************','line_number':230,'multiline':True]
['text':' General macros:
   Note: SLJIT is designed to be independent from them as possible.

   In release mode (SLJIT_DEBUG is not defined) only the following
   external functions are needed:
','line_number':232,'multiline':True]
['text':'*************************','line_number':259,'multiline':True]
['text':' Compiler helper macros. ','line_number':260,'multiline':True]
['text':'*************************','line_number':261,'multiline':True]
['text':' !defined(SLJIT_LIKELY) && !defined(SLJIT_UNLIKELY) ','line_number':273,'multiline':True]
['text':' Inline functions. Some old compilers do not support them. ','line_number':276,'multiline':True]
['text':' __SUNPRO_C ','line_number':282,'multiline':True]
['text':' !SLJIT_INLINE ','line_number':286,'multiline':True]
['text':' Not inline functions. ','line_number':289,'multiline':True]
['text':' !SLJIT_INLINE ','line_number':295,'multiline':True]
['text':' Unused arguments. ','line_number':298,'multiline':True]
['text':'*******************************','line_number':302,'multiline':True]
['text':' Type of public API functions. ','line_number':303,'multiline':True]
['text':'*******************************','line_number':304,'multiline':True]
['text':' Static ABI functions. For all-in-one programs. ','line_number':308,'multiline':True]
['text':' Disable unused warnings in gcc. ','line_number':311,'multiline':True]
['text':' (defined SLJIT_CONFIG_STATIC && SLJIT_CONFIG_STATIC) ','line_number':319,'multiline':True]
['text':' defined SLJIT_API_FUNC_ATTRIBUTE ','line_number':320,'multiline':True]
['text':'**************************','line_number':322,'multiline':True]
['text':' Instruction cache flush. ','line_number':323,'multiline':True]
['text':'**************************','line_number':324,'multiline':True]
['text':'
 * TODO:
 *
 * clang >= 15 could be safe to enable below
 * older versions are known to abort in some targets
 * https://github.com/PhilipHazel/pcre2/issues/92
 *
 * beware APPLE is known to have removed the code in iOS so
 * it will need to be excempted or result in broken builds
 ','line_number':326,'multiline':True]
['text':'
 * https://gcc.gnu.org/bugzilla//show_bug.cgi?id=91248
 * https://gcc.gnu.org/bugzilla//show_bug.cgi?id=93811
 * gcc's clear_cache builtin for power and sparc are broken
 ','line_number':339,'multiline':True]
['text':' gcc >= 10 ','line_number':349,'multiline':True]
['text':' (!defined SLJIT_CACHE_FLUSH && defined __has_builtin) ','line_number':350,'multiline':True]
['text':' Not required to implement on archs with unified caches. ','line_number':357,'multiline':True]
['text':' Supported by all macs since Mac OS 10.5.
   However, it does not work on non-jailbroken iOS devices,
   although the compilation is successful. ','line_number':362,'multiline':True]
['text':' The __clear_cache() implementation of GCC is a dummy function on PowerPC. ','line_number':371,'multiline':True]
['text':' The __clear_cache() implementation of GCC is a dummy function on Sparc. ','line_number':378,'multiline':True]
['text':' Android ARMv7 with gcc lacks __clear_cache; use cacheflush instead. ','line_number':390,'multiline':True]
['text':' Call __ARM_NR_cacheflush on ARM-Linux or the corresponding MIPS syscall. ','line_number':402,'multiline':True]
['text':' !SLJIT_CACHE_FLUSH ','line_number':408,'multiline':True]
['text':'****************************************************','line_number':410,'multiline':True]
['text':'    Integer and floating point type definitions.    ','line_number':411,'multiline':True]
['text':'****************************************************','line_number':412,'multiline':True]
['text':' 8 bit byte type. ','line_number':414,'multiline':True]
['text':' 16 bit half-word type. ','line_number':418,'multiline':True]
['text':' 32 bit integer type. ','line_number':422,'multiline':True]
['text':' Machine word type. Enough for storing a pointer.
     32 bit for 32 bit machines.
     64 bit for 64 bit machines. ','line_number':426,'multiline':True]
['text':' Just to have something. ','line_number':430,'multiline':True]
['text':' These types do not require windows.h ','line_number':448,'multiline':True]
['text':' !_WIN32 ','line_number':455,'multiline':True]
['text':' _WIN32 ','line_number':458,'multiline':True]
['text':' Floating point types. ','line_number':463,'multiline':True]
['text':' Shift for pointer sized data. ','line_number':467,'multiline':True]
['text':' Shift for double precision sized data. ','line_number':470,'multiline':True]
['text':' Defining long constants. ','line_number':476,'multiline':True]
['text':' !windows ','line_number':482,'multiline':True]
['text':' windows ','line_number':484,'multiline':True]
['text':' 32 bit ','line_number':485,'multiline':True]
['text':' unknown ','line_number':487,'multiline':True]
['text':' !SLJIT_W ','line_number':489,'multiline':True]
['text':'***********************','line_number':491,'multiline':True]
['text':' Endianness detection. ','line_number':492,'multiline':True]
['text':'***********************','line_number':493,'multiline':True]
['text':' These macros are mostly useful for the applications. ','line_number':497,'multiline':True]
['text':' Auto detecting mips revision. ','line_number':518,'multiline':True]
['text':' clang either forgets to define (clang-7) __mips_isa_rev at all
 * or sets it to zero (clang-8,-9) for -march=octeon (MIPS64 R2+)
 * and -march=p5600 (MIPS32 R5).
 * It also sets the __mips macro to 64 or 32 for -mipsN when N <= 5
 * (should be set to N exactly) so we cannot rely on this too.
 ','line_number':524,'multiline':True]
['text':' !SLJIT_MIPS_REV ','line_number':533,'multiline':True]
['text':' !defined(SLJIT_BIG_ENDIAN) && !defined(SLJIT_LITTLE_ENDIAN) ','line_number':544,'multiline':True]
['text':' Sanity check. ','line_number':546,'multiline':True]
['text':' !SLJIT_UNALIGNED ','line_number':568,'multiline':True]
['text':' Auto detect SSE2 support using CPUID.
   On 64 bit x86 cpus, sse2 must be present. ','line_number':571,'multiline':True]
['text':'***************************************************************************************','line_number':576,'multiline':True]
['text':' Calling convention of functions generated by SLJIT or called from the generated code. ','line_number':577,'multiline':True]
['text':'***************************************************************************************','line_number':578,'multiline':True]
['text':' gcc >= 3.4 ','line_number':594,'multiline':True]
['text':' Unknown compiler. ','line_number':606,'multiline':True]
['text':' The cdecl calling convention is usually the x86 default. ','line_number':608,'multiline':True]
['text':' SLJIT_USE_CDECL_CALLING_CONVENTION ','line_number':611,'multiline':True]
['text':' !SLJIT_FUNC ','line_number':613,'multiline':True]
['text':' It seems certain ppc compilers use an indirect addressing for functions
   which makes things complicated. ','line_number':618,'multiline':True]
['text':' SLJIT_INDIRECT_CALL ','line_number':622,'multiline':True]
['text':' The offset which needs to be substracted from the return address to
determine the next executed instruction after return. ','line_number':624,'multiline':True]
['text':' SLJIT_RETURN_ADDRESS_OFFSET ','line_number':632,'multiline':True]
['text':'*************************************************','line_number':634,'multiline':True]
['text':' Functions of the built-in executable allocator. ','line_number':635,'multiline':True]
['text':'*************************************************','line_number':636,'multiline':True]
['text':' SLJIT_MALLOC_EXEC ','line_number':647,'multiline':True]
['text':' SLJIT_FREE_EXEC ','line_number':651,'multiline':True]
['text':' SLJIT_EXECUTABLE_ALLOCATOR ','line_number':660,'multiline':True]
['text':'********************************************','line_number':662,'multiline':True]
['text':' Registers and locals offset determination. ','line_number':663,'multiline':True]
['text':'********************************************','line_number':664,'multiline':True]
['text':' _WIN64 ','line_number':683,'multiline':True]
['text':' !_WIN64 ','line_number':687,'multiline':True]
['text':' Add +1 for double alignment. ','line_number':723,'multiline':True]
['text':' SLJIT_CONFIG_PPC_64 || _AIX ','line_number':727,'multiline':True]
['text':' saved registers (16), return struct pointer (1), space for 6 argument words (1),
   4th double arg (2), double alignment (1). ','line_number':750,'multiline':True]
['text':'
 * https://refspecs.linuxbase.org/ELF/zSeries/lzsabi0_zSeries.html#STACKFRAME
 *
 * 160
 *  .. FR6
 *  .. FR4
 *  .. FR2
 * 128 FR0
 * 120 R15 (used for SP)
 * 112 R14
 * 104 R13
 *  96 R12
 *  ..
 *  48 R6
 *  ..
 *  16 R2
 *   8 RESERVED
 *   0 SP
 ','line_number':757,'multiline':True]
['text':'******************************','line_number':802,'multiline':True]
['text':' CPU status flags management. ','line_number':803,'multiline':True]
['text':'******************************','line_number':804,'multiline':True]
['text':'***********************************','line_number':814,'multiline':True]
['text':' Debug and verbose related macros. ','line_number':815,'multiline':True]
['text':'***********************************','line_number':816,'multiline':True]
['text':' SLJIT_HALT_PROCESS must halt the process. ','line_number':822,'multiline':True]
['text':' !SLJIT_HALT_PROCESS ','line_number':826,'multiline':True]
['text':' !SLJIT_ASSERT || !SLJIT_UNREACHABLE ','line_number':828,'multiline':True]
['text':' Feel free to redefine these two macros. ','line_number':830,'multiline':True]
['text':' !SLJIT_ASSERT ','line_number':841,'multiline':True]
['text':' !SLJIT_UNREACHABLE ','line_number':851,'multiline':True]
['text':' (defined SLJIT_DEBUG && SLJIT_DEBUG) ','line_number':853,'multiline':True]
['text':' Forcing empty, but valid statements. ','line_number':855,'multiline':True]
['text':' (defined SLJIT_DEBUG && SLJIT_DEBUG) ','line_number':864,'multiline':True]
['text':' !SLJIT_COMPILE_ASSERT ','line_number':871,'multiline':True]
['text':' extern "C" ','line_number':874,'multiline':True]
['text':' SLJIT_CONFIG_INTERNAL_H_ ','line_number':877,'multiline':True]
