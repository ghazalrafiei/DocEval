['text':' ----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':'  feed_args.hpp :  functions for processing each argument ','line_number':2,'multiline':False]
['text':'                      (feed, feed_manip, and distribute)','line_number':3,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':4,'multiline':False]
['text':'  Copyright Samuel Krempp 2003. Use, modification, and distribution are','line_number':6,'multiline':False]
['text':'  subject to the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'  See http://www.boost.org/libs/format for library home page','line_number':10,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':12,'multiline':False]
['text':' 0 if no space-padding','line_number':36,'multiline':False]
['text':' applies centered/left/right  padding  to the string  [beg, beg+size[','line_number':38,'multiline':False]
['text':' Effects : the result is placed in res.','line_number':39,'multiline':False]
['text':' no need to pad.','line_number':44,'multiline':False]
['text':' allocate once for the 2 inserts','line_number':54,'multiline':False]
['text':' now make the res string :','line_number':62,'multiline':False]
['text':' -mk_str(..) ','line_number':70,'multiline':False]
['text':' __DECCXX needs to be tricked to disambiguate this simple overload..','line_number':74,'multiline':False]
['text':' the trick is in "boost/format/msvc_disambiguater.hpp"','line_number':75,'multiline':False]
['text':' send the first N-1 items, not the last','line_number':94,'multiline':False]
['text':' this selects the last element','line_number':104,'multiline':False]
['text':' -__DECCXX workaround','line_number':117,'multiline':False]
['text':' If std::min<unsigned> or std::max<unsigned> are already instantiated','line_number':161,'multiline':False]
['text':' at this point then we get a blizzard of warning messages when we call','line_number':162,'multiline':False]
['text':' those templates with std::size_t as arguments.  Weird and very annoyning...','line_number':163,'multiline':False]
['text':' does the actual conversion of x, with given params, into a string','line_number':167,'multiline':False]
['text':' using the supplied stringbuf.','line_number':168,'multiline':False]
['text':' the stream format state can be modified by manipulators in the argument :','line_number':183,'multiline':False]
['text':' in case x is a group, apply the manip part of it, ','line_number':185,'multiline':False]
['text':' in order to find width','line_number':186,'multiline':False]
['text':' handle padding via mk_str, not natively in stream ','line_number':195,'multiline':False]
['text':' 2-stepped padding','line_number':210,'multiline':False]
['text':' internal can be implied by zeropad, or user-set.','line_number':211,'multiline':False]
['text':' left, right, and centered alignment overrule internal,','line_number':212,'multiline':False]
['text':' but spacepad or truncate might be mixed with internal (using manipulator)','line_number':213,'multiline':False]
['text':' may pad','line_number':214,'multiline':False]
['text':' okay, only one thing was printed and padded, so res is fine','line_number':223,'multiline':False]
['text':'   length w exceeded','line_number':226,'multiline':False]
['text':' either it was multi-output with first output padding up all width..','line_number':227,'multiline':False]
['text':' either it was one big arg and we are fine.','line_number':228,'multiline':False]
['text':' Note that res_size<w is possible  (in case of bad user-defined formatting)','line_number':229,'multiline':False]
['text':' invalidate pointers.','line_number':231,'multiline':False]
['text':' make a new stream, to start re-formatting from scratch :','line_number':233,'multiline':False]
['text':' we now have the minimal-length output','line_number':247,'multiline':False]
['text':' minimal length is already >= w, so no padding (cool!)','line_number':254,'multiline':False]
['text':' hum..  we need to pad (multi_output, or spacepad present)','line_number':257,'multiline':False]
['text':'find where we should pad','line_number':258,'multiline':False]
['text':' end- put(..)','line_number':278,'multiline':False]
['text':' call put(x, ..) on every occurrence of the current argument :','line_number':283,'multiline':False]
['text':' namespace detail','line_number':316,'multiline':False]
['text':' namespace io','line_number':317,'multiline':False]
['text':' namespace boost','line_number':318,'multiline':False]
['text':'  BOOST_FORMAT_FEED_ARGS_HPP','line_number':321,'multiline':False]
