['text':' Boost.Range library concept checks','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Copyright Neil Groves 2009. Use, modification and distribution','line_number':3,'multiline':False]
['text':'  are subject to the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'  Copyright Daniel Walker 2006. Use, modification and distribution','line_number':8,'multiline':False]
['text':'  are subject to the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' For more information, see http://www.boost.org/libs/range/','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'!
 * \file
 * \brief Concept checks for the Boost Range library.
 *
 * The structures in this file may be used in conjunction with the
 * Boost Concept Check library to insure that the type of a function
 * parameter is compatible with a range concept. If not, a meaningful
 * compile time error is generated. Checks are provided for the range
 * concepts related to iterator traversal categories. For example, the
 * following line checks that the type T models the ForwardRange
 * concept.
 *
 * \code
 * BOOST_CONCEPT_ASSERT((ForwardRangeConcept<T>));
 * \endcode
 *
 * A different concept check is required to ensure writeable value
 * access. For example to check for a ForwardRange that can be written
 * to, the following code is required.
 *
 * \code
 * BOOST_CONCEPT_ASSERT((WriteableForwardRangeConcept<T>));
 * \endcode
 *
 * \see http://www.boost.org/libs/range/doc/range.html for details
 * about range concepts.
 * \see http://www.boost.org/libs/iterator/doc/iterator_concepts.html
 * for details about iterator concepts.
 * \see http://www.boost.org/libs/concept_check/concept_check.htm for
 * details about concept checks.
 ','line_number':30,'multiline':True]
['text':' List broken compiler versions here:','line_number':68,'multiline':False]
['text':' GNUC 4.2 has strange issues correctly detecting compliance with the Concepts','line_number':71,'multiline':False]
['text':' hence the least disruptive approach is to turn-off the concept checking for','line_number':72,'multiline':False]
['text':' this version of the compiler.','line_number':73,'multiline':False]
['text':' GCC XML, unsurprisingly, has the same issues','line_number':80,'multiline':False]
['text':' Default to using the concept asserts unless we have defined it off','line_number':95,'multiline':False]
['text':' during the search for black listed compilers.','line_number':96,'multiline':False]
['text':' Rationale for the inclusion of redefined iterator concept','line_number':109,'multiline':False]
['text':' classes:','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' The Range algorithms often do not require that the iterators are','line_number':112,'multiline':False]
['text':' Assignable or default constructable, but the correct standard','line_number':113,'multiline':False]
['text':' conformant iterators do require the iterators to be a model of the','line_number':114,'multiline':False]
['text':' Assignable concept.','line_number':115,'multiline':False]
['text':' Iterators that contains a functor that is not assignable therefore','line_number':116,'multiline':False]
['text':' are not correct models of the standard iterator concepts,','line_number':117,'multiline':False]
['text':' despite being adequate for most algorithms. An example of this','line_number':118,'multiline':False]
['text':' use case is the combination of the boost::adaptors::filtered','line_number':119,'multiline':False]
['text':' class with a boost::lambda::bind generated functor.','line_number':120,'multiline':False]
['text':' Ultimately modeling the range concepts using composition','line_number':121,'multiline':False]
['text':' with the Boost.Iterator concepts would render the library','line_number':122,'multiline':False]
['text':' incompatible with many common Boost.Lambda expressions.','line_number':123,'multiline':False]
['text':' deliberately we are loose with the postfix version for the single pass','line_number':163,'multiline':False]
['text':' iterator due to the commonly poor adherence to the specification means that','line_number':164,'multiline':False]
['text':' many algorithms would be unusable, whereas actually without the check they','line_number':165,'multiline':False]
['text':' work','line_number':166,'multiline':False]
['text':' See the above note in the SinglePassIteratorConcept about the handling of the','line_number':199,'multiline':False]
['text':' postfix increment. Since with forward and better iterators there is no need','line_number':200,'multiline':False]
['text':' for a proxy, we can sensibly require that the dereference result','line_number':201,'multiline':False]
['text':' is convertible to reference.','line_number':202,'multiline':False]
['text':' namespace range_detail','line_number':261,'multiline':False]
['text':'! Check if a type T models the SinglePassRange range concept.','line_number':263,'multiline':False]
['text':' A few compilers don't like the rvalue reference T types so just','line_number':268,'multiline':False]
['text':' remove it.','line_number':269,'multiline':False]
['text':' This has been modified from assigning to this->i','line_number':286,'multiline':False]
['text':' (where i was a member variable) to improve','line_number':287,'multiline':False]
['text':' compatibility with Boost.Lambda','line_number':288,'multiline':False]
['text':' Rationale:','line_number':308,'multiline':False]
['text':' The type of m_range is T* rather than T because it allows','line_number':309,'multiline':False]
['text':' T to be an abstract class. The other obvious alternative of','line_number':310,'multiline':False]
['text':' T& produces a warning on some compilers.','line_number':311,'multiline':False]
['text':'! Check if a type T models the ForwardRange range concept.','line_number':316,'multiline':False]
['text':'! Check if a type T models the WriteableForwardRange range concept.','line_number':342,'multiline':False]
['text':'! Check if a type T models the BidirectionalRange range concept.','line_number':350,'multiline':False]
['text':'! Check if a type T models the WriteableBidirectionalRange range concept.','line_number':360,'multiline':False]
['text':'! Check if a type T models the RandomAccessRange range concept.','line_number':368,'multiline':False]
['text':'! Check if a type T models the WriteableRandomAccessRange range concept.','line_number':378,'multiline':False]
['text':' namespace boost','line_number':386,'multiline':False]
['text':' BOOST_RANGE_CONCEPTS_HPP','line_number':388,'multiline':False]
