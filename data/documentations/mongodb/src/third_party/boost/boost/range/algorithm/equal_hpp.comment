['text':' Boost.Range library','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Copyright Neil Groves 2009.','line_number':3,'multiline':False]
['text':'  Use, modification and distribution is subject to the Boost Software','line_number':4,'multiline':False]
['text':'  License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' For more information, see http://www.boost.org/libs/range/','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' An implementation of equality comparison that is optimized for iterator','line_number':21,'multiline':False]
['text':' traversal categories less than RandomAccessTraversal.','line_number':22,'multiline':False]
['text':' If we have reached the end of the left range then this is','line_number':36,'multiline':False]
['text':' the end of the loop. They are equal if and only if we have','line_number':37,'multiline':False]
['text':' simultaneously reached the end of the right range.','line_number':38,'multiline':False]
['text':' If we have reached the end of the right range at this line','line_number':42,'multiline':False]
['text':' it indicates that the right range is shorter than the left','line_number':43,'multiline':False]
['text':' and hence the result is false.','line_number':44,'multiline':False]
['text':' continue looping if and only if the values are equal','line_number':48,'multiline':False]
['text':' Reaching this line in the algorithm indicates that a value','line_number':56,'multiline':False]
['text':' inequality has been detected.','line_number':57,'multiline':False]
['text':' If we have reached the end of the left range then this is','line_number':76,'multiline':False]
['text':' the end of the loop. They are equal if and only if we have','line_number':77,'multiline':False]
['text':' simultaneously reached the end of the right range.','line_number':78,'multiline':False]
['text':' If we have reached the end of the right range at this line','line_number':82,'multiline':False]
['text':' it indicates that the right range is shorter than the left','line_number':83,'multiline':False]
['text':' and hence the result is false.','line_number':84,'multiline':False]
['text':' continue looping if and only if the values are equal','line_number':88,'multiline':False]
['text':' Reaching this line in the algorithm indicates that a value','line_number':96,'multiline':False]
['text':' inequality has been detected.','line_number':97,'multiline':False]
['text':' An implementation of equality comparison that is optimized for','line_number':101,'multiline':False]
['text':' random access iterators.','line_number':102,'multiline':False]
['text':' namespace range_detail','line_number':159,'multiline':False]
['text':'/ \brief template function equal','line_number':164,'multiline':False]
['text':'/','line_number':165,'multiline':False]
['text':'/ range-based version of the equal std algorithm','line_number':166,'multiline':False]
['text':'/','line_number':167,'multiline':False]
['text':'/ \pre SinglePassRange1 is a model of the SinglePassRangeConcept','line_number':168,'multiline':False]
['text':'/ \pre SinglePassRange2 is a model of the SinglePassRangeConcept','line_number':169,'multiline':False]
['text':'/ \pre BinaryPredicate is a model of the BinaryPredicateConcept','line_number':170,'multiline':False]
['text':'/ \overload','line_number':182,'multiline':False]
['text':' namespace range','line_number':196,'multiline':False]
['text':' namespace boost','line_number':198,'multiline':False]
['text':' include guard','line_number':200,'multiline':False]
