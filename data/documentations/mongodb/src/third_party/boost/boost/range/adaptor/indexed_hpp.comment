['text':'  Copyright 2014 Neil Groves','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Copyright (c) 2010 Ilya Murav'jov','line_number':3,'multiline':False]
['text':' ','line_number':4,'multiline':False]
['text':'  Use, modification and distribution is subject to the Boost Software License,','line_number':5,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Credits:','line_number':9,'multiline':False]
['text':'  My (Neil's) first indexed adaptor was hindered by having the underlying','line_number':10,'multiline':False]
['text':'  iterator return the same reference as the wrapped iterator. This meant that','line_number':11,'multiline':False]
['text':'  to obtain the index one had to get to the index_iterator and call the','line_number':12,'multiline':False]
['text':'  index() function on it. Ilya politely pointed out that this was useless in','line_number':13,'multiline':False]
['text':'  a number of scenarios since one naturally hides the use of iterators in','line_number':14,'multiline':False]
['text':'  good range-based code. Ilya provided a new interface (which has remained)','line_number':15,'multiline':False]
['text':'  and a first implementation. Much of this original implementation has','line_number':16,'multiline':False]
['text':'  been simplified and now supports more compilers and platforms.','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' namespace adaptors','line_number':51,'multiline':False]
['text':' Why yet another "pair" class:','line_number':56,'multiline':False]
['text':' - std::pair can't store references','line_number':57,'multiline':False]
['text':' - no need for typing for index type (default to "std::ptrdiff_t"); this is','line_number':58,'multiline':False]
['text':' useful in BOOST_FOREACH() expressions that have pitfalls with commas','line_number':59,'multiline':False]
['text':'   ( see http://www.boost.org/doc/libs/1_44_0/doc/html/foreach/pitfalls.html )','line_number':60,'multiline':False]
['text':' - meaningful access functions index(), value()','line_number':61,'multiline':False]
['text':' member functions index(), value() (non-const and const)','line_number':93,'multiline':False]
['text':' namespace range','line_number':115,'multiline':False]
['text':' Meta-function to get the traversal for the range and therefore iterator','line_number':129,'multiline':False]
['text':' returned by the indexed adaptor for a specified iterator type.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':' Random access -> Random access','line_number':132,'multiline':False]
['text':' Bidirectional -> Forward','line_number':133,'multiline':False]
['text':' Forward -> Forward','line_number':134,'multiline':False]
['text':' SinglePass -> SinglePass','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' The rationale for demoting a Bidirectional input to Forward is that the end','line_number':137,'multiline':False]
['text':' iterator cannot cheaply have an index computed for it. Therefore I chose to','line_number':138,'multiline':False]
['text':' demote to forward traversal. I can maintain the ability to traverse randomly','line_number':139,'multiline':False]
['text':' when the input is Random Access since the index for the end iterator is cheap','line_number':140,'multiline':False]
['text':' to compute.','line_number':141,'multiline':False]
['text':' Constructor for non-random access iterators.','line_number':283,'multiline':False]
['text':' This sets the end iterator index to i despite this being incorrect it','line_number':284,'multiline':False]
['text':' is never observable since bidirectional iterators are demoted to','line_number':285,'multiline':False]
['text':' forward iterators.','line_number':286,'multiline':False]
['text':' namespace range_detail ','line_number':308,'multiline':False]
['text':' namespace adaptors','line_number':367,'multiline':False]
['text':' namespace boost','line_number':368,'multiline':False]
['text':' namespace std','line_number':391,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_HDR_TUPLE)','line_number':393,'multiline':False]
['text':' include guard','line_number':395,'multiline':False]
