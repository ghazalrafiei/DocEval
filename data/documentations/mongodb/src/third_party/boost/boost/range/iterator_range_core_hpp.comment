['text':' Boost.Range library','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Copyright Neil Groves & Thorsten Ottosen & Pavol Droba 2003-2004.','line_number':3,'multiline':False]
['text':'  Use, modification and distribution is subject to the Boost Software','line_number':4,'multiline':False]
['text':'  License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' For more information, see http://www.boost.org/libs/range/','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Credits:','line_number':10,'multiline':False]
['text':' 'michel' reported Trac 9072 which included a patch for allowing references','line_number':11,'multiline':False]
['text':' to function types.','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' Define __STL_CONFIG_H, if appropriate.','line_number':17,'multiline':False]
['text':'! \file
    Defines the \c iterator_class and related functions.
    \c iterator_range is a simple wrapper of iterator pair idiom. It provides
    a rich subset of Container interface.
','line_number':50,'multiline':True]
['text':'','line_number':61,'multiline':False]
['text':' The functions adl_begin and adl_end are implemented in a separate','line_number':62,'multiline':False]
['text':' class for gcc-2.9x','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' This version is maintained since it is used in other boost libraries','line_number':107,'multiline':False]
['text':' such as Boost.Assign','line_number':108,'multiline':False]
['text':' note: must be unsigned','line_number':191,'multiline':False]
['text':' Needed because value-type is the same for','line_number':193,'multiline':False]
['text':' const and non-const iterators','line_number':194,'multiline':False]
['text':'! const_iterator type','line_number':198,'multiline':False]
['text':'!
        There is no distinction between const_iterator and iterator.
        These typedefs are provides to fulfill container interface
    ','line_number':199,'multiline':True]
['text':'! iterator type','line_number':204,'multiline':False]
['text':' Deprecated','line_number':271,'multiline':False]
['text':' Deprecated','line_number':339,'multiline':False]
['text':' Rationale:','line_number':368,'multiline':False]
['text':' typedef these here to reduce verbiage in the implementation of this','line_number':369,'multiline':False]
['text':' type.','line_number':370,'multiline':False]
['text':'','line_number':394,'multiline':False]
['text':' When storing transform iterators, operator[]()','line_number':395,'multiline':False]
['text':' fails because it returns by reference. Therefore','line_number':396,'multiline':False]
['text':' operator()() is provided for these cases.','line_number':397,'multiline':False]
['text':'','line_number':398,'multiline':False]
['text':'  iterator range template class -----------------------------------------//','line_number':414,'multiline':False]
['text':'! iterator_range class','line_number':416,'multiline':False]
['text':'!
            An \c iterator_range delimits a range in a sequence by beginning and ending iterators.
            An iterator_range can be passed to an algorithm which requires a sequence as an input.
            For example, the \c toupper() function may be used most frequently on strings,
            but can also be used on iterator_ranges:

            \code
                boost::tolower( find( s, "UPPERCASE STRING" ) );
            \endcode

            Many algorithms working with sequences take a pair of iterators,
            delimiting a working range, as an arguments. The \c iterator_range class is an
            encapsulation of a range identified by a pair of iterators.
            It provides a collection interface,
            so it is possible to pass an instance to an algorithm requiring a collection as an input.
        ','line_number':417,'multiline':True]
['text':'','line_number':567,'multiline':False]
['text':' Allow subclasses an easy way to access the','line_number':568,'multiline':False]
['text':' base type','line_number':569,'multiline':False]
['text':'','line_number':570,'multiline':False]
['text':'  iterator range free-standing operators ---------------------------//','line_number':574,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':576,'multiline':False]
['text':' comparison operators','line_number':577,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////','line_number':578,'multiline':False]
['text':'  iterator range utilities -----------------------------------------//','line_number':744,'multiline':False]
['text':'! iterator_range construct helper','line_number':746,'multiline':False]
['text':'!
            Construct an \c iterator_range from a pair of iterators

            \param Begin A begin iterator
            \param End An end iterator
            \return iterator_range object
        ','line_number':747,'multiline':True]
['text':'! iterator_range construct helper','line_number':768,'multiline':False]
['text':'!
            Construct an \c iterator_range from a \c Range containing the begin
            and end iterators.
        ','line_number':769,'multiline':True]
['text':'','line_number':797,'multiline':False]
['text':' Not worth the effort','line_number':798,'multiline':False]
['text':'','line_number':799,'multiline':False]
['text':'if( advance_begin == 0 && advance_end == 0 )','line_number':800,'multiline':False]
['text':'    return make_iterator_range( r );','line_number':801,'multiline':False]
['text':'','line_number':802,'multiline':False]
['text':'! copy a range into a sequence','line_number':831,'multiline':False]
['text':'!
            Construct a new sequence of the specified type from the elements
            in the given range

            \param Range An input range
            \return New sequence
        ','line_number':832,'multiline':True]
['text':' namespace 'boost'','line_number':845,'multiline':False]
