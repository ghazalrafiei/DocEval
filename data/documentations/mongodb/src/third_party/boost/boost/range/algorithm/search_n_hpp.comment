['text':'  Copyright Neil Groves 2009. Use, modification and','line_number':1,'multiline':False]
['text':'  distribution is subject to the Boost Software License, Version','line_number':2,'multiline':False]
['text':'  1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':3,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' For more information, see http://www.boost.org/libs/range/','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Rationale: search_n is implemented rather than delegate to','line_number':26,'multiline':False]
['text':' the standard library implementation because some standard','line_number':27,'multiline':False]
['text':' library implementations are broken eg. MSVC.','line_number':28,'multiline':False]
['text':' search_n forward iterator version','line_number':30,'multiline':False]
['text':' search_n random-access iterator version','line_number':56,'multiline':False]
['text':' look_ahead here is pointing to the last element of the','line_number':77,'multiline':False]
['text':' next possible match','line_number':78,'multiline':False]
['text':' skip loop...','line_number':79,'multiline':False]
['text':' no match','line_number':82,'multiline':False]
['text':' matched','line_number':92,'multiline':False]
['text':' no match','line_number':96,'multiline':False]
['text':' search_n for forward iterators using a binary predicate','line_number':104,'multiline':False]
['text':' to determine a match','line_number':105,'multiline':False]
['text':' search_n for random-access iterators using a binary predicate','line_number':139,'multiline':False]
['text':' to determine a match','line_number':140,'multiline':False]
['text':' look_ahead points to the last element of the next','line_number':162,'multiline':False]
['text':' possible match','line_number':163,'multiline':False]
['text':' skip loop','line_number':164,'multiline':False]
['text':' no match','line_number':167,'multiline':False]
['text':' success','line_number':176,'multiline':False]
['text':' no match','line_number':180,'multiline':False]
['text':'BOOST_RANGE_CONCEPT_ASSERT((EqualityComparableConcept2<typename std::iterator_traits<ForwardIterator>::value_type, Value>));','line_number':195,'multiline':False]
['text':' namespace range_detail','line_number':234,'multiline':False]
['text':'/ \brief template function search','line_number':238,'multiline':False]
['text':'/','line_number':239,'multiline':False]
['text':'/ range-based version of the search std algorithm','line_number':240,'multiline':False]
['text':'/','line_number':241,'multiline':False]
['text':'/ \pre ForwardRange is a model of the ForwardRangeConcept','line_number':242,'multiline':False]
['text':'/ \pre Integer is an integral type','line_number':243,'multiline':False]
['text':'/ \pre Value is a model of the EqualityComparableConcept','line_number':244,'multiline':False]
['text':'/ \pre ForwardRange's value type is a model of the EqualityComparableConcept','line_number':245,'multiline':False]
['text':'/ \pre Object's of ForwardRange's value type can be compared for equality with Objects of type Value','line_number':246,'multiline':False]
['text':'/ \overload','line_number':255,'multiline':False]
['text':'/ \overload','line_number':264,'multiline':False]
['text':'/ \overload','line_number':278,'multiline':False]
['text':' range_return overloads','line_number':292,'multiline':False]
['text':'/ \overload','line_number':294,'multiline':False]
['text':'/ \overload','line_number':307,'multiline':False]
['text':'/ \overload','line_number':320,'multiline':False]
['text':'/ \overload','line_number':338,'multiline':False]
['text':' namespace range','line_number':356,'multiline':False]
['text':' namespace boost','line_number':358,'multiline':False]
['text':' include guard','line_number':360,'multiline':False]
