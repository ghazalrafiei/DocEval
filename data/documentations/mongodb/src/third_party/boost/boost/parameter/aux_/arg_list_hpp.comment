['text':' Copyright Daniel Wallin, David Abrahams 2005.','line_number':1,'multiline':False]
['text':' Copyright Cromwell D. Enage 2017.','line_number':2,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':3,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' Structures used to build the tuple of actual arguments.  The tuple is a','line_number':13,'multiline':False]
['text':' nested cons-style list of arg_list specializations terminated by an','line_number':14,'multiline':False]
['text':' empty_arg_list.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Each specialization of arg_list is derived from its successor in the','line_number':17,'multiline':False]
['text':' list type.  This feature is used along with using declarations to build','line_number':18,'multiline':False]
['text':' member function overload sets that can match against keywords.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' MPL sequence support','line_number':22,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':30,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':45,'multiline':False]
['text':' Terminates arg_list<> and represents an empty list.  Since this is just','line_number':66,'multiline':False]
['text':' the terminating case, you might want to look at arg_list first to get a','line_number':67,'multiline':False]
['text':' feel for what's really happening here.','line_number':68,'multiline':False]
['text':' Variadic constructor also serves as default constructor.','line_number':76,'multiline':False]
['text':' A metafunction class that, given a keyword and a default type,','line_number':82,'multiline':False]
['text':' returns the appropriate result type for a keyword lookup given','line_number':83,'multiline':False]
['text':' that default.','line_number':84,'multiline':False]
['text':' Terminator for has_key, indicating that the keyword is unique.','line_number':99,'multiline':False]
['text':' If either of these operators are called, it means there is no','line_number':103,'multiline':False]
['text':' argument in the list that matches the supplied keyword.  Just','line_number':104,'multiline':False]
['text':' return the default value.','line_number':105,'multiline':False]
['text':' If this operator is called, it means there is no argument in the','line_number':120,'multiline':False]
['text':' list that matches the supplied keyword.  Just evaluate and return','line_number':121,'multiline':False]
['text':' the default value.','line_number':122,'multiline':False]
['text':' No argument corresponding to ParameterRequirements::key_type','line_number':131,'multiline':False]
['text':' was found if we match this overload, so unless that parameter','line_number':132,'multiline':False]
['text':' has a default, we indicate that the actual arguments don't','line_number':133,'multiline':False]
['text':' match the function's requirements.','line_number':134,'multiline':False]
['text':' MPL sequence support','line_number':139,'multiline':False]
['text':' convenience','line_number':140,'multiline':False]
['text':' For dispatching to sequence intrinsics','line_number':141,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':144,'multiline':False]
['text':' A tuple of tagged arguments, terminated with empty_arg_list.  Every','line_number':163,'multiline':False]
['text':' TaggedArg is an instance of tagged_argument<> or','line_number':164,'multiline':False]
['text':' tagged_argument_rref<>.','line_number':165,'multiline':False]
['text':' Stores the argument','line_number':185,'multiline':False]
['text':' !defined(BOOST_PARAMETER_CAN_USE_MP11)','line_number':202,'multiline':False]
['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':215,'multiline':False]
['text':' Create a new list by prepending arg to a copy of tail.  Used when','line_number':217,'multiline':False]
['text':' incrementally building this structure with the comma operator.','line_number':218,'multiline':False]
['text':' Store the arguments in successive nodes of this list.','line_number':226,'multiline':False]
['text':' Use tag dispatching to determine whether to forward all arguments','line_number':227,'multiline':False]
['text':' to the Next constructor, or store the first argument and forward','line_number':228,'multiline':False]
['text':' the rest. -- Cromwell D. Enage','line_number':229,'multiline':False]
['text':' A metafunction class that, given a keyword and a default type,','line_number':316,'multiline':False]
['text':' returns the appropriate result type for a keyword lookup given','line_number':317,'multiline':False]
['text':' that default.','line_number':318,'multiline':False]
['text':' Overload for key_type, so the assert below will fire','line_number':347,'multiline':False]
['text':' if the same keyword is used again.','line_number':348,'multiline':False]
['text':'','line_number':382,'multiline':False]
['text':' Begin implementation of indexing operators','line_number':383,'multiline':False]
['text':' for looking up specific arguments by name.','line_number':384,'multiline':False]
['text':'','line_number':385,'multiline':False]
['text':' Helpers that handle the case when TaggedArg is empty<T>.','line_number':387,'multiline':False]
['text':' Builds an overload set including operator[]s defined','line_number':470,'multiline':False]
['text':' in base classes.','line_number':471,'multiline':False]
['text':'','line_number':474,'multiline':False]
['text':' End of indexing support','line_number':475,'multiline':False]
['text':'','line_number':476,'multiline':False]
['text':' For parameter_requirements matching this node's key_type, return','line_number':478,'multiline':False]
['text':' a bool constant wrapper indicating whether the requirements are','line_number':479,'multiline':False]
['text':' satisfied by TaggedArg.  Used only for compile-time computation','line_number':480,'multiline':False]
['text':' and never really called, so a declaration is enough.','line_number':481,'multiline':False]
['text':' Builds an overload set including satisfies functions defined','line_number':515,'multiline':False]
['text':' in base classes.','line_number':516,'multiline':False]
['text':' Comma operator to compose argument list without using parameters<>.','line_number':519,'multiline':False]
['text':' Useful for argument lists with undetermined length.','line_number':520,'multiline':False]
['text':' MPL sequence support','line_number':551,'multiline':False]
['text':' Convenience for users','line_number':552,'multiline':False]
['text':' For the benefit of iterators','line_number':553,'multiline':False]
['text':' For dispatching to sequence intrinsics','line_number':554,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':557,'multiline':False]
['text':' !defined(BOOST_PARAMETER_HAS_PERFECT_FORWARDING)','line_number':559,'multiline':False]
['text':' Terminates arg_list<> and represents an empty list.  Since this is just','line_number':566,'multiline':False]
['text':' the terminating case, you might want to look at arg_list first to get a','line_number':567,'multiline':False]
['text':' feel for what's really happening here.','line_number':568,'multiline':False]
['text':' Constructor taking BOOST_PARAMETER_COMPOSE_MAX_ARITY empty_arg_list','line_number':575,'multiline':False]
['text':' arguments; this makes initialization.','line_number':576,'multiline':False]
['text':' A metafunction class that, given a keyword and a default type,','line_number':586,'multiline':False]
['text':' returns the appropriate result type for a keyword lookup given','line_number':587,'multiline':False]
['text':' that default.','line_number':588,'multiline':False]
['text':' Terminator for has_key, indicating that the keyword is unique.','line_number':598,'multiline':False]
['text':' The overload set technique doesn't work with these older compilers,','line_number':603,'multiline':False]
['text':' so they need some explicit handholding.','line_number':604,'multiline':False]
['text':' A metafunction class that, given a keyword, returns the type of the','line_number':606,'multiline':False]
['text':' base sublist whose get() function can produce the value for that key.','line_number':607,'multiline':False]
['text':' Borland workarounds needed','line_number':616,'multiline':False]
['text':' If either of these operators are called, it means there is no','line_number':618,'multiline':False]
['text':' argument in the list that matches the supplied keyword.  Just','line_number':619,'multiline':False]
['text':' return the default value.','line_number':620,'multiline':False]
['text':' If this operator is called, it means there is no argument in the','line_number':628,'multiline':False]
['text':' list that matches the supplied keyword.  Just evaluate and return','line_number':629,'multiline':False]
['text':' the default value.','line_number':630,'multiline':False]
['text':' No argument corresponding to ParameterRequirements::key_type','line_number':639,'multiline':False]
['text':' was found if we match this overload, so unless that parameter','line_number':640,'multiline':False]
['text':' has a default, we indicate that the actual arguments don't','line_number':641,'multiline':False]
['text':' match the function's requirements.','line_number':642,'multiline':False]
['text':' MPL sequence support','line_number':647,'multiline':False]
['text':' convenience','line_number':648,'multiline':False]
['text':' For dispatching to sequence intrinsics','line_number':649,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':652,'multiline':False]
['text':' A tuple of tagged arguments, terminated with empty_arg_list.  Every','line_number':679,'multiline':False]
['text':' TaggedArg is an instance of tagged_argument<>.','line_number':680,'multiline':False]
['text':' Stores the argument','line_number':691,'multiline':False]
['text':' Create a new list by prepending arg to a copy of tail.  Used when','line_number':711,'multiline':False]
['text':' incrementally building this structure with the comma operator.','line_number':712,'multiline':False]
['text':' Store the arguments in successive nodes of this list.','line_number':720,'multiline':False]
['text':' typename A0, typename A1, ...','line_number':722,'multiline':False]
['text':' A0& a0, A1& a1, ...','line_number':729,'multiline':False]
['text':' a1, a2, ...','line_number':736,'multiline':False]
['text':' A metafunction class that, given a keyword and a default type,','line_number':747,'multiline':False]
['text':' returns the appropriate result type for a keyword lookup given','line_number':748,'multiline':False]
['text':' that default.','line_number':749,'multiline':False]
['text':' Overload for key_type, so the assert below will fire','line_number':771,'multiline':False]
['text':' if the same keyword is used again.','line_number':772,'multiline':False]
['text':' SFINAE/MSVC workarounds needed','line_number':801,'multiline':False]
['text':' Borland workarounds not needed','line_number':802,'multiline':False]
['text':'','line_number':805,'multiline':False]
['text':' Begin implementation of indexing operators','line_number':806,'multiline':False]
['text':' for looking up specific arguments by name.','line_number':807,'multiline':False]
['text':'','line_number':808,'multiline':False]
['text':' Helpers that handle the case when TaggedArg is empty<T>.','line_number':810,'multiline':False]
['text':' These older compilers don't support the overload set creation','line_number':831,'multiline':False]
['text':' idiom well, so we need to do all the return type calculation','line_number':832,'multiline':False]
['text':' for the compiler and dispatch through an outer function template.','line_number':833,'multiline':False]
['text':' A metafunction class that, given a keyword, returns the base','line_number':835,'multiline':False]
['text':' sublist whose get() function can produce the value for that key.','line_number':836,'multiline':False]
['text':' Outer indexing operators that dispatch to the right node's','line_number':854,'multiline':False]
['text':' get() function.','line_number':855,'multiline':False]
['text':' These just return the stored value; when empty_arg_list is reached,','line_number':902,'multiline':False]
['text':' indicating no matching argument was passed, the default is','line_number':903,'multiline':False]
['text':' returned, or if no default_ or lazy_default was passed, compilation','line_number':904,'multiline':False]
['text':' fails.','line_number':905,'multiline':False]
['text':' !BOOST_WORKAROUND(BOOST_BORLANDC, BOOST_TESTED_AT(0x564))','line_number':930,'multiline':False]
['text':' Builds an overload set including operator[]s defined','line_number':957,'multiline':False]
['text':' in base classes.','line_number':958,'multiline':False]
['text':'','line_number':961,'multiline':False]
['text':' End of indexing support','line_number':962,'multiline':False]
['text':'','line_number':963,'multiline':False]
['text':' For parameter_requirements matching this node's key_type, return','line_number':965,'multiline':False]
['text':' a bool constant wrapper indicating whether the requirements are','line_number':966,'multiline':False]
['text':' satisfied by TaggedArg.  Used only for compile-time computation','line_number':967,'multiline':False]
['text':' and never really called, so a declaration is enough.','line_number':968,'multiline':False]
['text':' Builds an overload set including satisfies functions defined','line_number':998,'multiline':False]
['text':' in base classes.','line_number':999,'multiline':False]
['text':' Borland workarounds needed','line_number':1001,'multiline':False]
['text':' Comma operator to compose argument list without using parameters<>.','line_number':1003,'multiline':False]
['text':' Useful for argument lists with undetermined length.','line_number':1004,'multiline':False]
['text':' MPL sequence support','line_number':1020,'multiline':False]
['text':' Convenience for users','line_number':1021,'multiline':False]
['text':' For the benefit of iterators','line_number':1022,'multiline':False]
['text':' For dispatching to sequence intrinsics','line_number':1023,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':1026,'multiline':False]
['text':' BOOST_PARAMETER_HAS_PERFECT_FORWARDING','line_number':1028,'multiline':False]
['text':' Comma operator to compose argument list without using parameters<>.','line_number':1088,'multiline':False]
['text':' Useful for argument lists with undetermined length.','line_number':1089,'multiline':False]
['text':' Comma operator to compose argument list without using parameters<>.','line_number':1129,'multiline':False]
['text':' Useful for argument lists with undetermined length.','line_number':1130,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':1151,'multiline':False]
['text':' BOOST_PARAMETER_CAN_USE_MP11','line_number':1153,'multiline':False]
['text':' MPL sequence support','line_number':1159,'multiline':False]
['text':' The incremented iterator','line_number':1165,'multiline':False]
['text':' dereferencing yields the key type','line_number':1169,'multiline':False]
['text':' namespace boost::parameter::aux','line_number':1177,'multiline':False]
['text':' MPL sequence support','line_number':1181,'multiline':False]
['text':' namespace boost::mpl','line_number':1205,'multiline':False]
['text':' namespace boost::mpl','line_number':1229,'multiline':False]
['text':' namespace boost::mpl','line_number':1252,'multiline':False]
['text':' namespace boost::mpl','line_number':1275,'multiline':False]
['text':' namespace boost::mpl','line_number':1286,'multiline':False]
['text':' namespace boost::mpl','line_number':1297,'multiline':False]
['text':' namespace boost::mpl','line_number':1328,'multiline':False]
['text':' include guard','line_number':1330,'multiline':False]
