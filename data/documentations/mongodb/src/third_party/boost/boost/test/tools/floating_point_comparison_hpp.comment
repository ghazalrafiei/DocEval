['text':'  (C) Copyright Gennadiy Rozental 2001.','line_number':1,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at ','line_number':3,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'  See http://www.boost.org/libs/test for the library home page.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'!@file ','line_number':8,'multiline':False]
['text':'!@brief algorithms for comparing floating point values','line_number':9,'multiline':False]
['text':' ***************************************************************************','line_number':10,'multiline':False]
['text':' Boost.Test','line_number':15,'multiline':False]
['text':' Boost','line_number':19,'multiline':False]
['text':' for std::numeric_limits','line_number':20,'multiline':False]
['text':' STL','line_number':31,'multiline':False]
['text':'____________________________________________________________________________//','line_number':36,'multiline':False]
['text':' ************************************************************************** //','line_number':42,'multiline':False]
['text':' **************              fpc::tolerance_based            ************** //','line_number':43,'multiline':False]
['text':' ************************************************************************** //','line_number':44,'multiline':False]
['text':'! @internal','line_number':47,'multiline':False]
['text':'! Protects the instanciation of std::numeric_limits from non-supported types (eg. T=array)','line_number':48,'multiline':False]
['text':' from https://stackoverflow.com/a/16509511/1617295','line_number':55,'multiline':False]
['text':' warning: we cannot instanciate std::numeric_limits for incomplete types, we use is_abstract_class_or_function','line_number':70,'multiline':False]
['text':' prior to the specialization below','line_number':71,'multiline':False]
['text':'!@brief Indicates if a type can be compared using a tolerance scheme
 *
 * This is a metafunction that should evaluate to @c mpl::true_ if the type
 * @c T can be compared using a tolerance based method, typically for floating point
 * types.
 *
 * This metafunction can be specialized further to declare user types that are
 * floating point (eg. boost.multiprecision).
 ','line_number':80,'multiline':True]
['text':' ************************************************************************** //','line_number':92,'multiline':False]
['text':' **************                 fpc::strength                ************** //','line_number':93,'multiline':False]
['text':' ************************************************************************** //','line_number':94,'multiline':False]
['text':'! Method for comparing floating point numbers','line_number':96,'multiline':False]
['text':'!< "Very close"   - equation 2' in docs, the default','line_number':98,'multiline':False]
['text':'!< "Close enough" - equation 3' in docs.','line_number':99,'multiline':False]
['text':' ************************************************************************** //','line_number':103,'multiline':False]
['text':' **************         tolerance presentation types         ************** //','line_number':104,'multiline':False]
['text':' ************************************************************************** //','line_number':105,'multiline':False]
['text':'____________________________________________________________________________//','line_number':114,'multiline':False]
['text':'____________________________________________________________________________//','line_number':122,'multiline':False]
['text':'____________________________________________________________________________//','line_number':131,'multiline':False]
['text':' ************************************************************************** //','line_number':133,'multiline':False]
['text':' **************                    details                   ************** //','line_number':134,'multiline':False]
['text':' ************************************************************************** //','line_number':135,'multiline':False]
['text':' FPT is Floating-Point Type: float, double, long double or User-Defined.','line_number':139,'multiline':False]
['text':'____________________________________________________________________________//','line_number':147,'multiline':False]
['text':' for our purposes it doesn't really matter what value is returned here','line_number':160,'multiline':False]
['text':'____________________________________________________________________________//','line_number':170,'multiline':False]
['text':' both f1 and f2 are unsigned here','line_number':172,'multiline':False]
['text':' Avoid overflow.','line_number':177,'multiline':False]
['text':' Avoid underflow.','line_number':181,'multiline':False]
['text':'____________________________________________________________________________//','line_number':189,'multiline':False]
['text':'____________________________________________________________________________//','line_number':198,'multiline':False]
['text':'____________________________________________________________________________//','line_number':207,'multiline':False]
['text':' namespace fpc_detail','line_number':209,'multiline':False]
['text':' ************************************************************************** //','line_number':211,'multiline':False]
['text':' **************             close_at_tolerance               ************** //','line_number':212,'multiline':False]
['text':' ************************************************************************** //','line_number':213,'multiline':False]
['text':'!@brief Predicate for comparing floating point numbers
 *
 * This predicate is used to compare floating point numbers. In addition the comparison produces maximum 
 * related difference, which can be used to generate detailed error message
 * The methods for comparing floating points are detailed in the documentation. The method is chosen
 * by the @ref boost::math::fpc::strength given at construction.
 *
 * This predicate is not suitable for comparing to 0 or to infinity.
 ','line_number':216,'multiline':True]
['text':' Public typedefs','line_number':228,'multiline':False]
['text':' Constructor','line_number':231,'multiline':False]
['text':' no reason for tolerance to be negative','line_number':238,'multiline':False]
['text':' Access methods','line_number':241,'multiline':False]
['text':'! Returns the tolerance','line_number':242,'multiline':False]
['text':'! Returns the comparison method','line_number':245,'multiline':False]
['text':'! Returns the failing fraction','line_number':248,'multiline':False]
['text':'! Compares two floating point numbers a and b such that their "left" relative difference |a-b|/a and/or
     * "right" relative difference |a-b|/b does not exceed specified relative (fraction) tolerance.
     *
     *  @param[in] left first floating point number to be compared
     *  @param[in] right second floating point number to be compared
     *
     * What is reported by @c tested_rel_diff in case of failure depends on the comparison method:
     * - for @c FPC_STRONG: the max of the two fractions
     * - for @c FPC_WEAK: the min of the two fractions
     * The rationale behind is to report the tolerance to set in order to make a test pass.
     ','line_number':251,'multiline':True]
['text':' Data members','line_number':277,'multiline':False]
['text':' ************************************************************************** //','line_number':283,'multiline':False]
['text':' **************            small_with_tolerance              ************** //','line_number':284,'multiline':False]
['text':' ************************************************************************** //','line_number':285,'multiline':False]
['text':'!@brief Predicate for comparing floating point numbers against 0
 *
 * Serves the same purpose as boost::math::fpc::close_at_tolerance, but used when one
 * of the operand is null. 
 ','line_number':288,'multiline':True]
['text':' Public typedefs','line_number':296,'multiline':False]
['text':' Constructor','line_number':299,'multiline':False]
['text':' <= absolute tolerance','line_number':300,'multiline':False]
['text':' no reason for the tolerance to be negative','line_number':303,'multiline':False]
['text':' Action method','line_number':306,'multiline':False]
['text':' Data members','line_number':313,'multiline':False]
['text':' ************************************************************************** //','line_number':317,'multiline':False]
['text':' **************                  is_small                    ************** //','line_number':318,'multiline':False]
['text':' ************************************************************************** //','line_number':319,'multiline':False]
['text':'____________________________________________________________________________//','line_number':328,'multiline':False]
['text':' namespace fpc','line_number':330,'multiline':False]
['text':' namespace math','line_number':331,'multiline':False]
['text':' namespace boost','line_number':332,'multiline':False]
['text':' BOOST_FLOATING_POINT_COMAPARISON_HPP_071894GER','line_number':336,'multiline':False]
