['text':'  (C) Copyright Gennadiy Rozental 2001.','line_number':1,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':3,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'  See http://www.boost.org/libs/test for the library home page.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'!@file','line_number':8,'multiline':False]
['text':'!@brief Defines framework for automated assertion construction','line_number':9,'multiline':False]
['text':' ***************************************************************************','line_number':10,'multiline':False]
['text':' Boost.Test','line_number':15,'multiline':False]
['text':' Boost','line_number':20,'multiline':False]
['text':' STL','line_number':28,'multiline':False]
['text':'____________________________________________________________________________//','line_number':35,'multiline':False]
['text':' ************************************************************************** //','line_number':41,'multiline':False]
['text':' **************             assertion::operators             ************** //','line_number':42,'multiline':False]
['text':' ************************************************************************** //','line_number':43,'multiline':False]
['text':' precedence 4: ->*, .*','line_number':44,'multiline':False]
['text':' precedence 5: *, /, %','line_number':45,'multiline':False]
['text':' precedence 6: +, -','line_number':46,'multiline':False]
['text':' precedence 7: << , >>','line_number':47,'multiline':False]
['text':' precedence 8: <, <=, > and >=','line_number':48,'multiline':False]
['text':' precedence 9: == and !=','line_number':49,'multiline':False]
['text':' precedence 10: bitwise AND','line_number':50,'multiline':False]
['text':' precedence 11: bitwise XOR','line_number':51,'multiline':False]
['text':' precedence 12: bitwise OR','line_number':52,'multiline':False]
['text':' precedence 13: logical AND','line_number':53,'multiline':False]
['text':'  disabled','line_number':54,'multiline':False]
['text':' precedence 14: logical OR','line_number':55,'multiline':False]
['text':'  disabled','line_number':56,'multiline':False]
['text':' precedence 15: ternary conditional','line_number':57,'multiline':False]
['text':'  disabled','line_number':58,'multiline':False]
['text':' precedence 16: = and OP= operators','line_number':59,'multiline':False]
['text':' precedence 17: throw operator','line_number':60,'multiline':False]
['text':'  not supported','line_number':61,'multiline':False]
['text':' precedence 18: comma','line_number':62,'multiline':False]
['text':'  not supported','line_number':63,'multiline':False]
['text':'','line_number':74,'multiline':True]
['text':'____________________________________________________________________________//','line_number':76,'multiline':False]
['text':'','line_number':98,'multiline':True]
['text':'','line_number':104,'multiline':True]
['text':'____________________________________________________________________________//','line_number':108,'multiline':False]
['text':'','line_number':122,'multiline':True]
['text':'____________________________________________________________________________//','line_number':124,'multiline':False]
['text':'','line_number':130,'multiline':True]
['text':'','line_number':139,'multiline':True]
['text':'','line_number':172,'multiline':True]
['text':'____________________________________________________________________________//','line_number':179,'multiline':False]
['text':' namespace op','line_number':181,'multiline':False]
['text':' ************************************************************************** //','line_number':183,'multiline':False]
['text':' **************          assertion::expression_base          ************** //','line_number':184,'multiline':False]
['text':' ************************************************************************** //','line_number':185,'multiline':False]
['text':' Defines expression operators','line_number':186,'multiline':False]
['text':'','line_number':210,'multiline':True]
['text':'','line_number':224,'multiline':True]
['text':' Disabled operators','line_number':231,'multiline':False]
['text':'rhs','line_number':234,'multiline':True]
['text':'rhs','line_number':243,'multiline':True]
['text':' ************************************************************************** //','line_number':259,'multiline':False]
['text':' **************            assertion::value_expr             ************** //','line_number':260,'multiline':False]
['text':' ************************************************************************** //','line_number':261,'multiline':False]
['text':' simple value expression','line_number':262,'multiline':False]
['text':' Public types','line_number':267,'multiline':False]
['text':' Constructor','line_number':270,'multiline':False]
['text':' Specific expression interface','line_number':284,'multiline':False]
['text':' Mutating operators','line_number':294,'multiline':False]
['text':'','line_number':304,'multiline':True]
['text':' expression interface','line_number':309,'multiline':False]
['text':'ostr','line_number':327,'multiline':True]
['text':'v','line_number':327,'multiline':True]
['text':'ostr','line_number':328,'multiline':True]
['text':'v','line_number':328,'multiline':True]
['text':' Data members','line_number':330,'multiline':False]
['text':' ************************************************************************** //','line_number':334,'multiline':False]
['text':' **************            assertion::binary_expr            ************** //','line_number':335,'multiline':False]
['text':' ************************************************************************** //','line_number':336,'multiline':False]
['text':' binary expression','line_number':337,'multiline':False]
['text':' Public types','line_number':342,'multiline':False]
['text':' Constructor','line_number':345,'multiline':False]
['text':' Specific expression interface','line_number':362,'multiline':False]
['text':' To support custom manipulators','line_number':384,'multiline':False]
['text':' Data members','line_number':388,'multiline':False]
['text':' ************************************************************************** //','line_number':393,'multiline':False]
['text':' **************               assertion::seed                ************** //','line_number':394,'multiline':False]
['text':' ************************************************************************** //','line_number':395,'multiline':False]
['text':' seed added ot the input expression to form an assertion expression','line_number':396,'multiline':False]
['text':' ->* is highest precedence left to right operator','line_number':400,'multiline':False]
['text':' namespace assertion','line_number':418,'multiline':False]
['text':' namespace test_tools','line_number':419,'multiline':False]
['text':' namespace boost','line_number':420,'multiline':False]
['text':' BOOST_TEST_TOOLS_ASSERTION_HPP_100911GER','line_number':424,'multiline':False]
