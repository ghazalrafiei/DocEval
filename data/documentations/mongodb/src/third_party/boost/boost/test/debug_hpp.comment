['text':'  (C) Copyright Gennadiy Rozental 2001.','line_number':1,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':3,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'  See http://www.boost.org/libs/test for the library home page.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'! @file','line_number':8,'multiline':False]
['text':'! @brief defines portable debug interfaces','line_number':9,'multiline':False]
['text':'!','line_number':10,'multiline':False]
['text':'! Intended to standardize interface of programs with debuggers','line_number':11,'multiline':False]
['text':' ***************************************************************************','line_number':12,'multiline':False]
['text':' Boost.Test','line_number':17,'multiline':False]
['text':' Boost','line_number':21,'multiline':False]
['text':' STL','line_number':24,'multiline':False]
['text':'____________________________________________________________________________//','line_number':29,'multiline':False]
['text':'/ Contains debugger and debug C Runtime interfaces','line_number':32,'multiline':False]
['text':'/ @defgroup DebuggerInterface Debugger and debug C Runtime portable interfaces','line_number':35,'multiline':False]
['text':'/ @{','line_number':36,'multiline':False]
['text':'/ These interfaces are intended to be used by application to:','line_number':37,'multiline':False]
['text':'/ - check if we are running under debugger','line_number':38,'multiline':False]
['text':'/ - attach the debugger to itself','line_number':39,'multiline':False]
['text':'/','line_number':40,'multiline':False]
['text':'/ Unfortunately these actions differ widely between different debuggers available in a field. These interface present generalized standard form of','line_number':41,'multiline':False]
['text':'/ performing these actions. Implementation depends a lot on the environment application is running in and thus there are several custom implementations','line_number':42,'multiline':False]
['text':'/ supported by the Boost.Test','line_number':43,'multiline':False]
['text':'/','line_number':44,'multiline':False]
['text':'/ In addition here you find interfaces for memory leaks detection and reporting.','line_number':45,'multiline':False]
['text':'/','line_number':46,'multiline':False]
['text':'/ All these interfaces are defined in namespace boost::debug','line_number':47,'multiline':False]
['text':' ************************************************************************** //','line_number':49,'multiline':False]
['text':'/ Checks if programs runs under debugger','line_number':50,'multiline':False]
['text':'/ @returns true if current process is under debugger. False otherwise','line_number':52,'multiline':False]
['text':' ************************************************************************** //','line_number':53,'multiline':False]
['text':' ************************************************************************** //','line_number':56,'multiline':False]
['text':'/ Cause program to break execution in debugger at call point','line_number':57,'multiline':False]
['text':' ************************************************************************** //','line_number':58,'multiline':False]
['text':' ************************************************************************** //','line_number':62,'multiline':False]
['text':'/ Collection of data, which is used by debugger starter routine','line_number':63,'multiline':False]
['text':' ************************************************************************** //','line_number':64,'multiline':False]
['text':'/< pid of a program to attach to','line_number':67,'multiline':False]
['text':'/< what to do after debugger is attached','line_number':68,'multiline':False]
['text':'/< path to executable for current process','line_number':69,'multiline':False]
['text':'/< if debugger has a GUI, which display to use (on UNIX)','line_number':70,'multiline':False]
['text':'/< path to a uniquely named lock file, which is used to pause current application while debugger is being initialized','line_number':71,'multiline':False]
['text':'/ Signature of debugger starter routine. Takes an instance of dbg_startup_into as only argument','line_number':74,'multiline':False]
['text':' ************************************************************************** //','line_number':77,'multiline':False]
['text':'/ Specifies which debugger to use when attaching and optionally what routine to use to start that debugger','line_number':78,'multiline':False]
['text':'/ There are  many different debuggers available for different platforms. Some of them also can be used in a different setups/configuratins.','line_number':80,'multiline':False]
['text':'/ For example, gdb can be used in plain text mode, inside ddd, inside (x)emacs or in a separate xterm window.','line_number':81,'multiline':False]
['text':'/ Boost.Test identifies each configuration with unique string.','line_number':82,'multiline':False]
['text':'/ Also different debuggers configurations require different routines which is specifically tailored to start that debugger configuration.','line_number':83,'multiline':False]
['text':'/ Boost.Test comes with set of predefined configuration names and corresponding routines for these configurations:','line_number':84,'multiline':False]
['text':'/   - TODO','line_number':85,'multiline':False]
['text':'/','line_number':86,'multiline':False]
['text':'/ You can use this routine to select which one of the predefined debugger configurations to use in which case you do not need to provide starter','line_number':87,'multiline':False]
['text':'/ routine (the one provided by Boost.Test will be used). You can also use this routine to select your own debugger by providing unique configuration','line_number':88,'multiline':False]
['text':'/ id and starter routine for this configuration.','line_number':89,'multiline':False]
['text':'/','line_number':90,'multiline':False]
['text':'/ @param[in] dbg_id   Unique id for debugger configuration (for example, gdb)','line_number':91,'multiline':False]
['text':'/ @param[in] s        Optional starter routine for selected configuration (use only you want to define your own configuration)','line_number':92,'multiline':False]
['text':'/ @returns            Id of previously selected debugger configuration','line_number':93,'multiline':False]
['text':' ************************************************************************** //','line_number':96,'multiline':False]
['text':'/ Attaches debugger to the current process','line_number':97,'multiline':False]
['text':'/ Using  currently selected debugger, this routine attempts to attach the debugger to this process.','line_number':99,'multiline':False]
['text':'/ @param[in] break_or_continue tells what we wan to do after the debugger is attached. If true - process execution breaks','line_number':100,'multiline':False]
['text':'/                              in the point in invocation of this function. Otherwise execution continues, but now it is','line_number':101,'multiline':False]
['text':'/                              under the debugger','line_number':102,'multiline':False]
['text':'/ @returns true if debugger successfully attached. False otherwise','line_number':103,'multiline':False]
['text':' ************************************************************************** //','line_number':104,'multiline':False]
['text':' ************************************************************************** //','line_number':108,'multiline':False]
['text':'/ Switches on/off memory leaks detection','line_number':109,'multiline':False]
['text':'/ On platforms where memory leak detection is possible inside of running application (at the moment this is only Windows family) you can','line_number':111,'multiline':False]
['text':'/ switch this feature on and off using this interface. In addition you can specify the name of the file to write a report into. Otherwise','line_number':112,'multiline':False]
['text':'/ the report is going to be generated in standard error stream.','line_number':113,'multiline':False]
['text':'/ @param[in] on_off boolean switch','line_number':114,'multiline':False]
['text':'/ @param[in] report_file file, where the report should be directed to','line_number':115,'multiline':False]
['text':' ************************************************************************** //','line_number':116,'multiline':False]
['text':' ************************************************************************** //','line_number':120,'multiline':False]
['text':'/ Causes program to break execution in debugger at specific allocation point','line_number':121,'multiline':False]
['text':'/ On some platforms/memory managers (at the moment only on Windows/Visual Studio) one can tell a C Runtime to break','line_number':123,'multiline':False]
['text':'/ on specific memory allocation. This can be used in combination with memory leak detection (which reports leaked memory','line_number':124,'multiline':False]
['text':'/ allocation number) to locate the place where leak initiated.','line_number':125,'multiline':False]
['text':'/ @param[in] mem_alloc_order_num Specific memory allocation number','line_number':126,'multiline':False]
['text':' ************************************************************************** //','line_number':127,'multiline':False]
['text':' namespace debug','line_number':131,'multiline':False]
['text':'/ @}','line_number':132,'multiline':False]
['text':' namespace boost','line_number':134,'multiline':False]
