['text':'  (C) Copyright Gennadiy Rozental 2001.','line_number':1,'multiline':False]
['text':'  (C) Copyright Beman Dawes 2001.','line_number':2,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':3,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'  See http://www.boost.org/libs/test for the library home page.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'!@file','line_number':9,'multiline':False]
['text':'!@brief Defines public interface of the Execution Monitor and related classes','line_number':10,'multiline':False]
['text':' ***************************************************************************','line_number':11,'multiline':False]
['text':' Boost.Test','line_number':16,'multiline':False]
['text':' Boost','line_number':23,'multiline':False]
['text':' for the FP constants and control routines','line_number':34,'multiline':False]
['text':' based on ISO C standard','line_number':61,'multiline':False]
['text':'! Indicates tha the floating point exception handling is supported','line_number':70,'multiline':False]
['text':'! through SEH','line_number':71,'multiline':False]
['text':'! Indicates that floating point exception handling is supported for the','line_number':77,'multiline':False]
['text':'! non SEH version of it, for the GLIBC extensions only','line_number':78,'multiline':False]
['text':' see discussions on the related topic: https://svn.boost.org/trac/boost/ticket/11756','line_number':79,'multiline':False]
['text':' Additional macro documentations not being generated without this hack','line_number':85,'multiline':False]
['text':'! Disables the support of the alternative stack','line_number':88,'multiline':False]
['text':'! during the compilation of the Boost.test framework. This is especially useful','line_number':89,'multiline':False]
['text':'! in case it is not possible to detect the lack of alternative stack support for','line_number':90,'multiline':False]
['text':'! your compiler (for instance, ESXi).','line_number':91,'multiline':False]
['text':'____________________________________________________________________________//','line_number':96,'multiline':False]
['text':'/ @defgroup ExecutionMonitor Function Execution Monitor','line_number':100,'multiline':False]
['text':'/ @{','line_number':101,'multiline':False]
['text':'/ @section Intro Introduction','line_number':102,'multiline':False]
['text':'/ Sometimes we need to call a function and make sure that no user or system originated exceptions are being thrown by it. Uniform exception reporting','line_number':103,'multiline':False]
['text':'/ is also may be convenient. That's the purpose of the Boost.Test's Execution Monitor.','line_number':104,'multiline':False]
['text':'/','line_number':105,'multiline':False]
['text':'/ The Execution Monitor is a lower-level component of the Boost Test Library. It is the base for implementing all other Boost.Test components, but also','line_number':106,'multiline':False]
['text':'/ can be used standalone to get controlled execution of error-prone functions with a uniform error notification. The Execution Monitor calls a user-supplied','line_number':107,'multiline':False]
['text':'/ function in a controlled environment, relieving users from messy error detection.','line_number':108,'multiline':False]
['text':'/','line_number':109,'multiline':False]
['text':'/ The Execution Monitor usage is demonstrated in the example exec_mon_example.','line_number':110,'multiline':False]
['text':'/','line_number':111,'multiline':False]
['text':'/ @section DesignRationale Design Rationale','line_number':112,'multiline':False]
['text':'/','line_number':113,'multiline':False]
['text':'/ The Execution Monitor design assumes that it can be used when no (or almost no) memory available. Also the Execution Monitor','line_number':114,'multiline':False]
['text':'/ is intended to be portable to as many platforms as possible.','line_number':115,'multiline':False]
['text':'/','line_number':116,'multiline':False]
['text':'/ @section UserGuide User's guide','line_number':117,'multiline':False]
['text':'/ The Execution Monitor is designed to solve the problem of executing potentially dangerous function that may result in any number of error conditions,','line_number':118,'multiline':False]
['text':'/ in monitored environment that should prevent any undesirable exceptions to propagate out of function call and produce consistent result report for all outcomes.','line_number':119,'multiline':False]
['text':'/ The Execution Monitor is able to produce informative report for all standard C++ exceptions and intrinsic types. All other exceptions are reported as unknown.','line_number':120,'multiline':False]
['text':'/ If you prefer different message for your exception type or need to perform any action, the Execution Monitor supports custom exception translators.','line_number':121,'multiline':False]
['text':'/ There are several other parameters of the monitored environment can be configured by setting appropriate properties of the Execution Monitor.','line_number':122,'multiline':False]
['text':'/','line_number':123,'multiline':False]
['text':'/ All symbols in the Execution Monitor implementation are located in the namespace boost. To use the Execution Monitor you need to:','line_number':124,'multiline':False]
['text':'/ -# include @c boost/test/execution_monitor.hpp','line_number':125,'multiline':False]
['text':'/ -# Make an instance of execution_monitor.','line_number':126,'multiline':False]
['text':'/ -# Optionally register custom exception translators for exception classes which require special processing.','line_number':127,'multiline':False]
['text':'/','line_number':128,'multiline':False]
['text':'/ @subsection FuncExec Monitored function execution','line_number':129,'multiline':False]
['text':'/','line_number':130,'multiline':False]
['text':'/ The class execution_monitor can monitor functions with the following signatures:','line_number':131,'multiline':False]
['text':'/ - int ()','line_number':132,'multiline':False]
['text':'/ - void ()','line_number':133,'multiline':False]
['text':'/','line_number':134,'multiline':False]
['text':'/ This function is expected to be self sufficient part of your application. You can't pass any arguments to this function directly. Instead you','line_number':135,'multiline':False]
['text':'/ should bind them into executable nullary function using bind function (either standard or boost variant). Neither you can return any other value,','line_number':136,'multiline':False]
['text':'/ but an integer result code. If necessary you can bind output parameters by reference or use some other more complicated nullary functor, which','line_number':137,'multiline':False]
['text':'/ maintains state. This includes class methods, static class methods etc.','line_number':138,'multiline':False]
['text':'/','line_number':139,'multiline':False]
['text':'/ To start the monitored function, invoke the method execution_monitor::execute and pass the monitored function as an argument. If the call succeeds,','line_number':140,'multiline':False]
['text':'/ the method returns the result code produced by the monitored function. If any of the following conditions occur:','line_number':141,'multiline':False]
['text':'/ - Uncaught C++ exception','line_number':142,'multiline':False]
['text':'/ - Hardware or software signal, trap, or other exception','line_number':143,'multiline':False]
['text':'/ - Timeout reached','line_number':144,'multiline':False]
['text':'/ - Debug assert event occurred (under Microsoft Visual C++ or compatible compiler)','line_number':145,'multiline':False]
['text':'/','line_number':146,'multiline':False]
['text':'/ then the method throws the execution_exception. The exception contains unique error_code value identifying the error condition and the detailed message','line_number':147,'multiline':False]
['text':'/ that can be used to report the error.','line_number':148,'multiline':False]
['text':'/','line_number':149,'multiline':False]
['text':'/ @subsection Reporting Errors reporting and translation','line_number':150,'multiline':False]
['text':'/','line_number':151,'multiline':False]
['text':'/ If you need to report an error inside monitored function execution you have to throw an exception. Do not use the execution_exception - it's not intended','line_number':152,'multiline':False]
['text':'/ to be used for this purpose. The simplest choice is to use one of the following C++ types as an exception:','line_number':153,'multiline':False]
['text':'/ - C string','line_number':154,'multiline':False]
['text':'/ - std:string','line_number':155,'multiline':False]
['text':'/ - any exception class in std::exception hierarchy','line_number':156,'multiline':False]
['text':'/ - boost::exception','line_number':157,'multiline':False]
['text':'/','line_number':158,'multiline':False]
['text':'/ execution_monitor will catch and report these types of exceptions. If exception is thrown which is unknown to execution_monitor, it can only','line_number':159,'multiline':False]
['text':'/ report the fact of the exception. So in case if you prefer to use your own exception types or can't govern what exceptions are generated by monitored','line_number':160,'multiline':False]
['text':'/ function and would like to see proper error message in a report, execution_monitor can be configured with custom "translator" routine, which will have','line_number':161,'multiline':False]
['text':'/ a chance to either record the fact of the exception itself or translate it into one of standard exceptions and rethrow (or both). The translator routine','line_number':162,'multiline':False]
['text':'/ is registered per exception type and is invoked when exception of this class (or one inherited from it) is thrown inside monitored routine. You can','line_number':163,'multiline':False]
['text':'/ register as many independent translators as you like. See execution_monitor::register_exception_translator specification for requirements on translator','line_number':164,'multiline':False]
['text':'/ function.','line_number':165,'multiline':False]
['text':'/','line_number':166,'multiline':False]
['text':'/ Finally, if you need to abort the monitored function execution without reporting any errors, you can throw an exception execution_aborted. As a result','line_number':167,'multiline':False]
['text':'/ the execution is aborted and zero result code is produced by the method execution_monitor::execute.','line_number':168,'multiline':False]
['text':'/','line_number':169,'multiline':False]
['text':'/ @subsection Parameters Supported parameters','line_number':170,'multiline':False]
['text':'/','line_number':171,'multiline':False]
['text':'/ The Execution Monitor behavior is configurable through the set of parameters (properties) associated with the instance of the monitor. See execution_monitor','line_number':172,'multiline':False]
['text':'/ specification for a list of supported parameters and their semantic.','line_number':173,'multiline':False]
['text':' ************************************************************************** //','line_number':175,'multiline':False]
['text':' **************        detail::translator_holder_base        ************** //','line_number':176,'multiline':False]
['text':' ************************************************************************** //','line_number':177,'multiline':False]
['text':' Constructor','line_number':188,'multiline':False]
['text':' Destructor','line_number':195,'multiline':False]
['text':' translator holder interface','line_number':198,'multiline':False]
['text':' invokes the function F inside the try/catch guarding against specific exception','line_number':199,'multiline':False]
['text':' erases specific translator holder from the chain','line_number':202,'multiline':False]
['text':' Data members','line_number':223,'multiline':False]
['text':' namespace detail','line_number':228,'multiline':False]
['text':' ************************************************************************** //','line_number':230,'multiline':False]
['text':'/ @class execution_exception','line_number':231,'multiline':False]
['text':'/ @brief This class is used to report any kind of an failure during execution of a monitored function inside of execution_monitor','line_number':232,'multiline':False]
['text':'/','line_number':233,'multiline':False]
['text':'/ The instance of this class is thrown out of execution_monitor::execute invocation when failure is detected. Regardless of a kind of failure occurred','line_number':234,'multiline':False]
['text':'/ the instance will provide a uniform way to catch and report it.','line_number':235,'multiline':False]
['text':'/','line_number':236,'multiline':False]
['text':'/ One important design rationale for this class is that we should be ready to work after fatal memory corruptions or out of memory conditions. To facilitate','line_number':237,'multiline':False]
['text':'/ this class never allocates any memory and assumes that strings it refers to are either some constants or live in a some kind of persistent (preallocated) memory.','line_number':238,'multiline':False]
['text':' ************************************************************************** //','line_number':239,'multiline':False]
['text':'/ These values are sometimes used as program return codes.','line_number':244,'multiline':False]
['text':'/ The particular values have been chosen to avoid conflicts with','line_number':245,'multiline':False]
['text':'/ commonly used program return codes: values < 100 are often user','line_number':246,'multiline':False]
['text':'/ assigned, values > 255 are sometimes used to report system errors.','line_number':247,'multiline':False]
['text':'/ Gaps in values allow for orderly expansion.','line_number':248,'multiline':False]
['text':'/','line_number':249,'multiline':False]
['text':'/ @note(1) Only uncaught C++ exceptions are treated as errors.','line_number':250,'multiline':False]
['text':'/ If a function catches a C++ exception, it never reaches','line_number':251,'multiline':False]
['text':'/ the execution_monitor.','line_number':252,'multiline':False]
['text':'/','line_number':253,'multiline':False]
['text':'/ The implementation decides what is a system_fatal_error and what is','line_number':254,'multiline':False]
['text':'/ just a system_exception. Fatal errors are so likely to have corrupted','line_number':255,'multiline':False]
['text':'/ machine state (like a stack overflow or addressing exception) that it','line_number':256,'multiline':False]
['text':'/ is unreasonable to continue execution.','line_number':257,'multiline':False]
['text':'/','line_number':258,'multiline':False]
['text':'/ @note(2) These errors include Unix signals and Windows structured','line_number':259,'multiline':False]
['text':'/ exceptions. They are often initiated by hardware traps.','line_number':260,'multiline':False]
['text':'/< for completeness only; never returned','line_number':262,'multiline':False]
['text':'/< user reported non-fatal error','line_number':263,'multiline':False]
['text':'/< see note (1) above','line_number':264,'multiline':False]
['text':'/< see note (2) above','line_number':265,'multiline':False]
['text':'/< only detectable on certain platforms','line_number':266,'multiline':False]
['text':'/< user reported fatal error','line_number':267,'multiline':False]
['text':'/< see note (2) above','line_number':268,'multiline':False]
['text':'/ Simple model for the location of failure in a source code','line_number':271,'multiline':False]
['text':'/< File name','line_number':276,'multiline':False]
['text':'/< Line number','line_number':277,'multiline':False]
['text':'/< Function name','line_number':278,'multiline':False]
['text':'/ @name Constructors','line_number':281,'multiline':False]
['text':'/ Constructs instance based on message, location and error code','line_number':283,'multiline':False]
['text':'/ @param[in] ec           error code','line_number':285,'multiline':False]
['text':'/ @param[in] what_msg     error message','line_number':286,'multiline':False]
['text':'/ @param[in] location     error location','line_number':287,'multiline':False]
['text':'/ @name Access methods','line_number':290,'multiline':False]
['text':'/ Exception error code','line_number':292,'multiline':False]
['text':'/ Exception message','line_number':294,'multiline':False]
['text':'/ Exception location','line_number':296,'multiline':False]
['text':'/@}','line_number':298,'multiline':False]
['text':' Data members','line_number':301,'multiline':False]
['text':' execution_exception','line_number':305,'multiline':False]
['text':' ************************************************************************** //','line_number':307,'multiline':False]
['text':'/ @brief Function execution monitor','line_number':308,'multiline':False]
['text':'/ This class is used to uniformly detect and report an occurrence of several types of signals and exceptions, reducing various','line_number':310,'multiline':False]
['text':'/ errors to a uniform execution_exception that is returned to a caller.','line_number':311,'multiline':False]
['text':'/','line_number':312,'multiline':False]
['text':'/ The execution_monitor behavior can be customized through a set of public parameters (properties) associated with the execution_monitor instance.','line_number':313,'multiline':False]
['text':'/ All parameters are implemented as public unit_test::readwrite_property data members of the class execution_monitor.','line_number':314,'multiline':False]
['text':' ************************************************************************** //','line_number':315,'multiline':False]
['text':'/ Default constructor initializes all execution monitor properties','line_number':321,'multiline':False]
['text':'/ Should monitor catch system errors.','line_number':324,'multiline':False]
['text':'/','line_number':325,'multiline':False]
['text':'/ The @em p_catch_system_errors property is a boolean flag (default value is true) specifying whether or not execution_monitor should trap system','line_number':326,'multiline':False]
['text':'/ errors/system level exceptions/signals, which would cause program to crash in a regular case (without execution_monitor).','line_number':327,'multiline':False]
['text':'/ Set this property to false, for example, if you wish to force coredump file creation. The Unit Test Framework provides a','line_number':328,'multiline':False]
['text':'/ runtime parameter @c \-\-catch_system_errors=yes to alter the behavior in monitored test cases.','line_number':329,'multiline':False]
['text':'/  Should monitor try to attach debugger in case of caught system error.','line_number':332,'multiline':False]
['text':'/','line_number':333,'multiline':False]
['text':'/ The @em p_auto_start_dbg property is a boolean flag (default value is false) specifying whether or not execution_monitor should try to attach debugger','line_number':334,'multiline':False]
['text':'/ in case system error is caught.','line_number':335,'multiline':False]
['text':'/  Specifies the seconds that elapse before a timer_error occurs.','line_number':339,'multiline':False]
['text':'/','line_number':340,'multiline':False]
['text':'/ The @em p_timeout property is an integer timeout (in microseconds) for monitored function execution. Use this parameter to monitor code with possible deadlocks','line_number':341,'multiline':False]
['text':'/ or infinite loops. This feature is only available for some operating systems (not yet Microsoft Windows).','line_number':342,'multiline':False]
['text':'/  Should monitor use alternative stack for the signal catching.','line_number':345,'multiline':False]
['text':'/','line_number':346,'multiline':False]
['text':'/ The @em p_use_alt_stack property is a boolean flag (default value is false) specifying whether or not execution_monitor should use an alternative stack','line_number':347,'multiline':False]
['text':'/ for the sigaction based signal catching. When enabled the signals are delivered to the execution_monitor on a stack different from current execution','line_number':348,'multiline':False]
['text':'/ stack, which is safer in case if it is corrupted by monitored function. For more details on alternative stack handling see appropriate manuals.','line_number':349,'multiline':False]
['text':'/ Should monitor try to detect hardware floating point exceptions (!= 0), and which specific exception to catch.','line_number':352,'multiline':False]
['text':'/','line_number':353,'multiline':False]
['text':'/ The @em p_detect_fp_exceptions property is a boolean flag (default value is false) specifying whether or not execution_monitor should install hardware','line_number':354,'multiline':False]
['text':'/ traps for the floating point exception on platforms where it's supported.','line_number':355,'multiline':False]
['text':' @name Monitoring entry points','line_number':359,'multiline':False]
['text':'/ @brief Execution monitor entry point for functions returning integer value','line_number':361,'multiline':False]
['text':'/','line_number':362,'multiline':False]
['text':'/ This method executes supplied function F inside a try/catch block and also may include other unspecified platform dependent error detection code.','line_number':363,'multiline':False]
['text':'/','line_number':364,'multiline':False]
['text':'/ This method throws an execution_exception on an uncaught C++ exception, a hardware or software signal, trap, or other user exception.','line_number':365,'multiline':False]
['text':'/','line_number':366,'multiline':False]
['text':'/ @note execute() doesn't consider it an error for F to return a non-zero value.','line_number':367,'multiline':False]
['text':'/ @param[in] F  Function to monitor','line_number':368,'multiline':False]
['text':'/ @returns  value returned by function call F().','line_number':369,'multiline':False]
['text':'/ @see vexecute','line_number':370,'multiline':False]
['text':'/ @brief Execution monitor entry point for functions returning void','line_number':373,'multiline':False]
['text':'/','line_number':374,'multiline':False]
['text':'/ This method is semantically identical to execution_monitor::execute, but doesn't produce any result code.','line_number':375,'multiline':False]
['text':'/ @param[in] F  Function to monitor','line_number':376,'multiline':False]
['text':'/ @see execute','line_number':377,'multiline':False]
['text':' @}','line_number':379,'multiline':False]
['text':' @name Exception translator registration','line_number':381,'multiline':False]
['text':'/ @brief Registers custom (user supplied) exception translator','line_number':383,'multiline':False]
['text':'/ This method template registers a translator for an exception type specified as a first template argument. For example','line_number':385,'multiline':False]
['text':'/ @code','line_number':386,'multiline':False]
['text':'/    void myExceptTr( MyException const& ex ) { /*do something with the exception here*/}','line_number':387,'multiline':False]
['text':'/    em.register_exception_translator<MyException>( myExceptTr );','line_number':388,'multiline':False]
['text':'/ @endcode','line_number':389,'multiline':False]
['text':'/ The translator should be any unary function/functor object which accepts MyException const&. This can be free standing function','line_number':390,'multiline':False]
['text':'/ or bound class method. The second argument is an optional string tag you can associate with this translator routine. The only reason','line_number':391,'multiline':False]
['text':'/ to specify the tag is if you plan to erase the translator eventually. This can be useful in scenario when you reuse the same','line_number':392,'multiline':False]
['text':'/ execution_monitor instance to monitor different routines and need to register a translator specific to the routine being monitored.','line_number':393,'multiline':False]
['text':'/ While it is possible to erase the translator based on an exception type it was registered for, tag string provides simpler way of doing this.','line_number':394,'multiline':False]
['text':'/ @tparam ExceptionType type of the exception we register a translator for','line_number':395,'multiline':False]
['text':'/ @tparam ExceptionTranslator type of the translator we register for this exception','line_number':396,'multiline':False]
['text':'/ @param[in] tr         translator function object with the signature <em> void (ExceptionType const&)</em>','line_number':397,'multiline':False]
['text':'/ @param[in] tag        tag associated with this translator','line_number':398,'multiline':False]
['text':'/ @brief Erases custom exception translator based on a tag','line_number':402,'multiline':False]
['text':'/ Use the same tag as the one used during translator registration','line_number':404,'multiline':False]
['text':'/ @param[in] tag  tag associated with translator you wants to erase','line_number':405,'multiline':False]
['text':'/ @brief Erases custom exception translator based on an exception type','line_number':411,'multiline':False]
['text':'/','line_number':412,'multiline':False]
['text':'/ tparam ExceptionType Exception type for which you want to erase the translator','line_number':413,'multiline':False]
['text':'@}','line_number':419,'multiline':False]
['text':' implementation helpers','line_number':423,'multiline':False]
['text':' Data members','line_number':426,'multiline':False]
['text':' execution_monitor','line_number':429,'multiline':False]
['text':' ************************************************************************** //','line_number':431,'multiline':False]
['text':' **************          detail::translator_holder           ************** //','line_number':432,'multiline':False]
['text':' ************************************************************************** //','line_number':433,'multiline':False]
['text':' translator holder interface','line_number':444,'multiline':False]
['text':' Data members','line_number':463,'multiline':False]
['text':' namespace detail','line_number':467,'multiline':False]
['text':' ************************************************************************** //','line_number':477,'multiline':False]
['text':'/ @class execution_aborted','line_number':478,'multiline':False]
['text':'/ @brief This is a trivial default constructible class. Use it to report graceful abortion of a monitored function execution.','line_number':479,'multiline':False]
['text':' ************************************************************************** //','line_number':480,'multiline':False]
['text':' ************************************************************************** //','line_number':484,'multiline':False]
['text':' **************                  system_error                ************** //','line_number':485,'multiline':False]
['text':' ************************************************************************** //','line_number':486,'multiline':False]
['text':' Constructor','line_number':490,'multiline':False]
['text':'!@internal','line_number':497,'multiline':False]
['text':' ************************************************************************** //','line_number':500,'multiline':False]
['text':' **************Floating point exception management interface ************** //','line_number':501,'multiline':False]
['text':' ************************************************************************** //','line_number':502,'multiline':False]
['text':' *** ','line_number':509,'multiline':True]
['text':' *** ','line_number':518,'multiline':True]
['text':' *** ','line_number':525,'multiline':True]
['text':' *** ','line_number':563,'multiline':True]
['text':'____________________________________________________________________________//','line_number':567,'multiline':False]
['text':' return the previous set of enabled exceptions when successful, and BOOST_FPE_INV otherwise','line_number':569,'multiline':False]
['text':'____________________________________________________________________________//','line_number':573,'multiline':False]
['text':' namespace fpe','line_number':575,'multiline':False]
['text':'/@}','line_number':577,'multiline':False]
['text':' namespace boost','line_number':579,'multiline':False]
