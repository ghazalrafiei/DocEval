['text':'  (C) Copyright Gennadiy Rozental 2001.','line_number':1,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':3,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'  See http://www.boost.org/libs/test for the library home page.','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'/ @file','line_number':8,'multiline':False]
['text':'/ @brief Defines unit test log formatter interface','line_number':9,'multiline':False]
['text':'/','line_number':10,'multiline':False]
['text':'/ You can define a class with implements this interface and use an instance of it','line_number':11,'multiline':False]
['text':'/ as a Unit Test Framework log formatter','line_number':12,'multiline':False]
['text':' ***************************************************************************','line_number':13,'multiline':False]
['text':' Boost.Test','line_number':18,'multiline':False]
['text':' STL','line_number':23,'multiline':False]
['text':' for std::string','line_number':25,'multiline':False]
['text':'____________________________________________________________________________//','line_number':30,'multiline':False]
['text':' ************************************************************************** //','line_number':35,'multiline':False]
['text':'/ Collection of log entry attributes','line_number':36,'multiline':False]
['text':' ************************************************************************** //','line_number':37,'multiline':False]
['text':'/< log entry file name','line_number':45,'multiline':False]
['text':'/< log entry line number','line_number':46,'multiline':False]
['text':'/< log entry level','line_number':47,'multiline':False]
['text':' ************************************************************************** //','line_number':57,'multiline':False]
['text':'/ Collection of log checkpoint attributes','line_number':58,'multiline':False]
['text':' ************************************************************************** //','line_number':59,'multiline':False]
['text':'/< log checkpoint file name','line_number':63,'multiline':False]
['text':'/< log checkpoint file name','line_number':64,'multiline':False]
['text':'/< log checkpoint message','line_number':65,'multiline':False]
['text':' ************************************************************************** //','line_number':75,'multiline':False]
['text':'/ @brief Abstract Unit Test Framework log formatter interface','line_number':76,'multiline':False]
['text':'/','line_number':77,'multiline':False]
['text':'/ During the test module execution Unit Test Framework can report messages about success','line_number':78,'multiline':False]
['text':'/ or failure of assertions, which test suites are being run and more (specifically which','line_number':79,'multiline':False]
['text':'/ messages are reported depends on log level threshold selected by the user).','line_number':80,'multiline':False]
['text':'/','line_number':81,'multiline':False]
['text':'/ All these messages constitute Unit Test Framework log. There are many ways (formats) to present','line_number':82,'multiline':False]
['text':'/ these messages to the user.','line_number':83,'multiline':False]
['text':'/','line_number':84,'multiline':False]
['text':'/ Boost.Test comes with three formats:','line_number':85,'multiline':False]
['text':'/ - Compiler-like log format: intended for human consumption/diagnostic','line_number':86,'multiline':False]
['text':'/ - XML based log format:  intended for processing by automated regression test systems.','line_number':87,'multiline':False]
['text':'/ - JUNIT based log format:  intended for processing by automated regression test systems.','line_number':88,'multiline':False]
['text':'/','line_number':89,'multiline':False]
['text':'/ If you want to produce some other format you need to implement class with specific interface and use','line_number':90,'multiline':False]
['text':'/ method @c unit_test_log_t::set_formatter during a test module initialization to set an active formatter.','line_number':91,'multiline':False]
['text':'/ The class unit_test_log_formatter defines this interface.','line_number':92,'multiline':False]
['text':'/','line_number':93,'multiline':False]
['text':'/ This interface requires you to format all possible messages being produced in the log.','line_number':94,'multiline':False]
['text':'/ These includes error messages about failed assertions, messages about caught exceptions and','line_number':95,'multiline':False]
['text':'/ information messages about test units being started/ended. All the methods in this interface takes','line_number':96,'multiline':False]
['text':'/ a reference to standard stream as a first argument. This is where final messages needs to be directed','line_number':97,'multiline':False]
['text':'/ to. Also you are given all the information necessary to produce a message.','line_number':98,'multiline':False]
['text':'/','line_number':99,'multiline':False]
['text':'/ @par Since Boost 1.62:','line_number':100,'multiline':False]
['text':'/ - Each formatter may indicate the default output stream. This is convenient for instance for streams intended','line_number':101,'multiline':False]
['text':'/   for automated processing that indicate a file. See @c get_default_stream_description for more details.','line_number':102,'multiline':False]
['text':'/ - Each formatter may manage its own log level through the getter/setter @c get_log_level and @c set_log_level .','line_number':103,'multiline':False]
['text':'/','line_number':104,'multiline':False]
['text':'/ @see','line_number':105,'multiline':False]
['text':'/ - boost::unit_test::test_observer for an indication of the calls of the test observer interface','line_number':106,'multiline':False]
['text':'/ Types of log entries (messages written into a log)','line_number':109,'multiline':False]
['text':'/< Information message from the framework','line_number':110,'multiline':False]
['text':'/< Information message from the user','line_number':111,'multiline':False]
['text':'/< Warning (non error) condition notification message','line_number':112,'multiline':False]
['text':'/< Non fatal error notification message','line_number':113,'multiline':False]
['text':'/< Fatal error notification message','line_number':114,'multiline':False]
['text':'! Constructor','line_number':117,'multiline':False]
['text':' Destructor','line_number':122,'multiline':False]
['text':' @name Test start/finish','line_number':125,'multiline':False]
['text':'/ Invoked at the beginning of test module execution','line_number':127,'multiline':False]
['text':'/','line_number':128,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages to','line_number':129,'multiline':False]
['text':'/ @param[in] test_cases_amount total test case amount to be run','line_number':130,'multiline':False]
['text':'/ @see log_finish','line_number':131,'multiline':False]
['text':'/ Invoked at the end of test module execution','line_number':134,'multiline':False]
['text':'/','line_number':135,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':136,'multiline':False]
['text':'/ @see log_start','line_number':137,'multiline':False]
['text':'/ Invoked when Unit Test Framework build information is requested','line_number':140,'multiline':False]
['text':'/','line_number':141,'multiline':False]
['text':'/ @param[in] os               output stream to write a messages into','line_number':142,'multiline':False]
['text':'/ @param[in] log_build_info   indicates if build info should be logged or not','line_number':143,'multiline':False]
['text':' @}','line_number':145,'multiline':False]
['text':' @name Test unit start/finish','line_number':147,'multiline':False]
['text':'/ Invoked when test unit starts (either test suite or test case)','line_number':149,'multiline':False]
['text':'/','line_number':150,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':151,'multiline':False]
['text':'/ @param[in] tu   test unit being started','line_number':152,'multiline':False]
['text':'/ @see test_unit_finish','line_number':153,'multiline':False]
['text':'/ Invoked when test unit finishes','line_number':156,'multiline':False]
['text':'/','line_number':157,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':158,'multiline':False]
['text':'/ @param[in] tu   test unit being finished','line_number':159,'multiline':False]
['text':'/ @param[in] elapsed time in microseconds spend executing this test unit','line_number':160,'multiline':False]
['text':'/ @see test_unit_start','line_number':161,'multiline':False]
['text':'/ Invoked if test unit skipped for any reason','line_number':164,'multiline':False]
['text':'/','line_number':165,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':166,'multiline':False]
['text':'/ @param[in] tu   skipped test unit','line_number':167,'multiline':False]
['text':'/ @param[in] reason explanation why was it skipped','line_number':168,'multiline':False]
['text':' reason ','line_number':169,'multiline':True]
['text':'/ Deprecated version of this interface','line_number':174,'multiline':False]
['text':'/ @deprecated','line_number':175,'multiline':False]
['text':' os ','line_number':176,'multiline':True]
['text':' tu ','line_number':176,'multiline':True]
['text':'/ Invoked when a test unit is aborted','line_number':178,'multiline':False]
['text':' os ','line_number':179,'multiline':True]
['text':' tu ','line_number':179,'multiline':True]
['text':'/ Invoked when a test unit times-out','line_number':181,'multiline':False]
['text':' os ','line_number':182,'multiline':True]
['text':' tu ','line_number':182,'multiline':True]
['text':' @}','line_number':185,'multiline':False]
['text':' @name Uncaught exception report','line_number':187,'multiline':False]
['text':'/ Invoked when Unit Test Framework detects uncaught exception','line_number':189,'multiline':False]
['text':'/','line_number':190,'multiline':False]
['text':'/ The framwork calls this function when an uncaught exception it detected.','line_number':191,'multiline':False]
['text':'/ This call is followed by context information:','line_number':192,'multiline':False]
['text':'/ - one call to @c entry_context_start,','line_number':193,'multiline':False]
['text':'/ - as many calls to @c log_entry_context as there are context entries','line_number':194,'multiline':False]
['text':'/ - one call to @c entry_context_finish','line_number':195,'multiline':False]
['text':'/','line_number':196,'multiline':False]
['text':'/ The logging of the exception information is finilized by a call to @c log_exception_finish.','line_number':197,'multiline':False]
['text':'/','line_number':198,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':199,'multiline':False]
['text':'/ @param[in] lcd  information about the last checkpoint before the exception was triggered','line_number':200,'multiline':False]
['text':'/ @param[in] ex   information about the caught exception','line_number':201,'multiline':False]
['text':'/ @see log_exception_finish','line_number':202,'multiline':False]
['text':'/ Invoked when Unit Test Framework detects uncaught exception','line_number':205,'multiline':False]
['text':'/','line_number':206,'multiline':False]
['text':'/ Call to this function finishes uncaught exception report.','line_number':207,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':208,'multiline':False]
['text':'/ @see log_exception_start','line_number':209,'multiline':False]
['text':' @}','line_number':211,'multiline':False]
['text':' @name Regular log entry','line_number':213,'multiline':False]
['text':'/ Invoked by Unit Test Framework to start new log entry','line_number':215,'multiline':False]
['text':'/ Call to this function starts new log entry. It is followed by series of log_entry_value calls and finally call to log_entry_finish.','line_number':217,'multiline':False]
['text':'/ A log entry may consist of one or more values being reported. Some of these values will be plain strings, while others can be complicated','line_number':218,'multiline':False]
['text':'/ expressions in a form of "lazy" expression template lazy_ostream.','line_number':219,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':220,'multiline':False]
['text':'/ @param[in] led  log entry attributes','line_number':221,'multiline':False]
['text':'/ @param[in] let  log entry type log_entry_finish','line_number':222,'multiline':False]
['text':'/ @see log_entry_value, log_entry_finish','line_number':223,'multiline':False]
['text':'/','line_number':224,'multiline':False]
['text':'/ @note call to this function may happen before any call to test_unit_start or all calls to test_unit_finish as the','line_number':225,'multiline':False]
['text':'/ framework might log errors raised during global initialization/shutdown.','line_number':226,'multiline':False]
['text':'/ Invoked by Unit Test Framework to report a log entry content','line_number':229,'multiline':False]
['text':'/','line_number':230,'multiline':False]
['text':'/ This is one of two overloaded methods to report log entry content. This one is used to report plain string value.','line_number':231,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into.','line_number':232,'multiline':False]
['text':'/ @param[in] value log entry string value','line_number':233,'multiline':False]
['text':'/ @see log_entry_start, log_entry_finish','line_number':234,'multiline':False]
['text':'/ Invoked by Unit Test Framework to report a log entry content','line_number':237,'multiline':False]
['text':'/ This is one of two overloaded methods to report log entry content. This one is used to report some complicated expression passed as','line_number':239,'multiline':False]
['text':'/ an expression template lazy_ostream. In most cases default implementation provided by the framework should work as is (it just converts','line_number':240,'multiline':False]
['text':'/ the lazy expression into a string.','line_number':241,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':242,'multiline':False]
['text':'/ @param[in] value log entry "lazy" value','line_number':243,'multiline':False]
['text':'/ @see log_entry_start, log_entry_finish','line_number':244,'multiline':False]
['text':' there is a default impl','line_number':245,'multiline':False]
['text':'/ Invoked by Unit Test Framework to finish a log entry report','line_number':247,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':249,'multiline':False]
['text':'/ @see log_entry_start, log_entry_start','line_number':250,'multiline':False]
['text':' @}','line_number':252,'multiline':False]
['text':' @name Log entry context report','line_number':254,'multiline':False]
['text':'/ Invoked by Unit Test Framework to start log entry context report','line_number':256,'multiline':False]
['text':'','line_number':257,'multiline':False]
['text':'/ Unit Test Framework logs for failed assertions and uncaught exceptions context if one was defined by a test module.','line_number':258,'multiline':False]
['text':'/ Context consists of multiple "scopes" identified by description messages assigned by the test module using','line_number':259,'multiline':False]
['text':'/ BOOST_TEST_INFO/BOOST_TEST_CONTEXT statements.','line_number':260,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':261,'multiline':False]
['text':'/ @param[in] l    entry log_level, to be used to fine tune the message','line_number':262,'multiline':False]
['text':'/ @see log_entry_context, entry_context_finish','line_number':263,'multiline':False]
['text':'/ Invoked by Unit Test Framework to report log entry context "scope" description','line_number':266,'multiline':False]
['text':'','line_number':267,'multiline':False]
['text':'/ Each "scope" description is reported by separate call to log_entry_context.','line_number':268,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':269,'multiline':False]
['text':'/ @param[in] l    entry log_level, to be used to fine tune the message','line_number':270,'multiline':False]
['text':'/ @param[in] value  context "scope" description','line_number':271,'multiline':False]
['text':'/ @see log_entry_start, entry_context_finish','line_number':272,'multiline':False]
['text':'/ Invoked by Unit Test Framework to finish log entry context report','line_number':275,'multiline':False]
['text':'/','line_number':276,'multiline':False]
['text':'/ @param[in] os   output stream to write a messages into','line_number':277,'multiline':False]
['text':'/ @param[in] l    entry log_level, to be used to fine tune the message','line_number':278,'multiline':False]
['text':'/ @see log_entry_start, entry_context_context','line_number':279,'multiline':False]
['text':' @}','line_number':281,'multiline':False]
['text':' @name Log level management','line_number':283,'multiline':False]
['text':'/ Sets the log level of the logger/formatter','line_number':285,'multiline':False]
['text':'/','line_number':286,'multiline':False]
['text':'/ Some loggers need to manage the log level by their own. This','line_number':287,'multiline':False]
['text':'/ member function let the implementation decide of that.','line_number':288,'multiline':False]
['text':'/ @par Since Boost 1.62','line_number':289,'multiline':False]
['text':'/ Returns the log level of the logger/formatter','line_number':292,'multiline':False]
['text':'/ @par Since Boost 1.62','line_number':293,'multiline':False]
['text':' @}','line_number':295,'multiline':False]
['text':' @name Stream management','line_number':298,'multiline':False]
['text':'/ Returns a default stream for this logger.','line_number':300,'multiline':False]
['text':'/','line_number':301,'multiline':False]
['text':'/ The returned string describes the stream as if it was passed from','line_number':302,'multiline':False]
['text':'/ the command line @c "--log_sink" parameter. With that regards, @b stdout and @b stderr','line_number':303,'multiline':False]
['text':'/ have special meaning indicating the standard output or error stream respectively.','line_number':304,'multiline':False]
['text':'/','line_number':305,'multiline':False]
['text':'/ @par Since Boost 1.62','line_number':306,'multiline':False]
['text':' @}','line_number':312,'multiline':False]
['text':' namespace unit_test','line_number':320,'multiline':False]
['text':' namespace boost','line_number':321,'multiline':False]
['text':'____________________________________________________________________________//','line_number':323,'multiline':False]
['text':' BOOST_TEST_UNIT_TEST_LOG_FORMATTER_HPP_071894GER','line_number':327,'multiline':False]
