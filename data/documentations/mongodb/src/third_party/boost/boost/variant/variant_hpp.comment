['text':'-----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' boost variant/variant.hpp header file','line_number':2,'multiline':False]
['text':' See http://www.boost.org for updates, documentation, and revision history.','line_number':3,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Copyright (c) 2002-2003 Eric Friedman, Itay Maman','line_number':6,'multiline':False]
['text':' Copyright (c) 2012-2022 Antony Polukhin','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':' Thanks to Adam Romanek for providing patches for exception-disabled env.','line_number':13,'multiline':False]
['text':' for std::size_t','line_number':18,'multiline':False]
['text':' for placement new','line_number':19,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':92,'multiline':False]
['text':' Implementation Macros:','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':' BOOST_VARIANT_VISITATION_UNROLLING_LIMIT','line_number':95,'multiline':False]
['text':'   Defined in boost/variant/detail/visitation_impl.hpp.','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' BOOST_VARIANT_MINIMIZE_SIZE','line_number':98,'multiline':False]
['text':'   When #defined, implementation employs all known means to minimize the','line_number':99,'multiline':False]
['text':'   size of variant obje   cts. However, often unsuccessful due to alignment','line_number':100,'multiline':False]
['text':'   issues, and potentially harmful to runtime speed, so not enabled by','line_number':101,'multiline':False]
['text':'   default. (TODO: Investigate further.)','line_number':102,'multiline':False]
['text':' for SCHAR_MAX','line_number':105,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':121,'multiline':False]
['text':' (detail) metafunction max_value','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' Finds the maximum value of the unary metafunction F over Sequence.','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':' helpers, for metafunction result (below)','line_number':129,'multiline':False]
['text':' metafunction result','line_number':136,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':156,'multiline':False]
['text':' (detail) metafunction find_fallback_type','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' Provides a fallback (i.e., nothrow default-constructible) type from the','line_number':159,'multiline':False]
['text':' specified sequence, or no_fallback_type if not found.','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' This implementation is designed to prefer boost::blank over other potential','line_number':162,'multiline':False]
['text':' fallback types, regardless of its position in the specified sequence.','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':' helpers, for metafunction result (below)','line_number':184,'multiline':False]
['text':' [Find the first suitable fallback type...]','line_number':188,'multiline':False]
['text':' [...now search the rest of the sequence for boost::blank...]','line_number':199,'multiline':False]
['text':' metafunction result','line_number':209,'multiline':False]
['text':' [...and return the results of the search:]','line_number':211,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':225,'multiline':False]
['text':' (detail) metafunction is_variant_move_noexcept_constructible','line_number':226,'multiline':False]
['text':'','line_number':227,'multiline':False]
['text':' Returns true_type if all the types are nothrow move constructible.','line_number':228,'multiline':False]
['text':'','line_number':229,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':242,'multiline':False]
['text':' (detail) metafunction is_variant_move_noexcept_assignable','line_number':243,'multiline':False]
['text':'','line_number':244,'multiline':False]
['text':' Returns true_type if all the types are nothrow move constructible.','line_number':245,'multiline':False]
['text':'','line_number':246,'multiline':False]
['text':' BOOST_NO_CXX11_NOEXCEPT','line_number':258,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':260,'multiline':False]
['text':' (detail) metafunction is_variant_constructible_from','line_number':261,'multiline':False]
['text':'','line_number':262,'multiline':False]
['text':' Derives from true_type if at least one variant's type is constructible from T.','line_number':263,'multiline':False]
['text':'','line_number':264,'multiline':False]
['text':' #ifndef BOOST_NO_CXX11_RVALUE_REFERENCE','line_number':323,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':326,'multiline':False]
['text':' (detail) metafunction make_storage','line_number':327,'multiline':False]
['text':'','line_number':328,'multiline':False]
['text':' Provides an aligned storage type capable of holding any of the types','line_number':329,'multiline':False]
['text':' specified in the given type-sequence.','line_number':330,'multiline':False]
['text':'','line_number':331,'multiline':False]
['text':' helpers, for metafunction result (below)','line_number':336,'multiline':False]
['text':' borland','line_number':358,'multiline':False]
['text':' temporary workaround -- use maximal alignment','line_number':360,'multiline':False]
['text':' borland workaround','line_number':363,'multiline':False]
['text':' metafunction result','line_number':365,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':373,'multiline':False]
['text':' (detail) class destroyer','line_number':374,'multiline':False]
['text':'','line_number':375,'multiline':False]
['text':' Internal visitor that destroys the value it visits.','line_number':376,'multiline':False]
['text':'','line_number':377,'multiline':False]
['text':' visitor interfaces','line_number':381,'multiline':False]
['text':' must be noexcept','line_number':386,'multiline':False]
['text':' suppresses warnings','line_number':390,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':396,'multiline':False]
['text':' (detail) class template known_get','line_number':397,'multiline':False]
['text':'','line_number':398,'multiline':False]
['text':' Visitor that returns a reference to content of the specified type.','line_number':399,'multiline':False]
['text':'','line_number':400,'multiline':False]
['text':' Precondition: visited variant MUST contain logical content of type T.','line_number':401,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':' visitor interface','line_number':408,'multiline':False]
['text':' logical error to be here: see precondition above','line_number':418,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':423,'multiline':False]
['text':' (detail) class copy_into','line_number':424,'multiline':False]
['text':'','line_number':425,'multiline':False]
['text':' Internal visitor that copies the value it visits into the given buffer.','line_number':426,'multiline':False]
['text':'','line_number':427,'multiline':False]
['text':' representation','line_number':431,'multiline':False]
['text':' structors','line_number':435,'multiline':False]
['text':' internal visitor interface','line_number':442,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':464,'multiline':False]
['text':' (detail) class move_into','line_number':465,'multiline':False]
['text':'','line_number':466,'multiline':False]
['text':' Internal visitor that moves the value it visits into the given buffer.','line_number':467,'multiline':False]
['text':'','line_number':468,'multiline':False]
['text':' representation','line_number':473,'multiline':False]
['text':' structors','line_number':477,'multiline':False]
['text':' internal visitor interface','line_number':484,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':500,'multiline':False]
['text':' (detail) class assign_storage','line_number':501,'multiline':False]
['text':'','line_number':502,'multiline':False]
['text':' Internal visitor that assigns the given storage (which must be a','line_number':503,'multiline':False]
['text':' constructed value of the same type) to the value it visits.','line_number':504,'multiline':False]
['text':'','line_number':505,'multiline':False]
['text':' representation','line_number':509,'multiline':False]
['text':' structors','line_number':513,'multiline':False]
['text':' internal visitor interfaces','line_number':520,'multiline':False]
['text':' NOTE TO USER :','line_number':539,'multiline':False]
['text':' Compile error here indicates one of variant's bounded types does','line_number':540,'multiline':False]
['text':' not meet the requirements of the Assignable concept. Thus,','line_number':541,'multiline':False]
['text':' variant is not Assignable.','line_number':542,'multiline':False]
['text':'','line_number':543,'multiline':False]
['text':' Hint: Are any of the bounded types const-qualified or references?','line_number':544,'multiline':False]
['text':'','line_number':545,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':551,'multiline':False]
['text':' (detail) class move_storage','line_number':552,'multiline':False]
['text':'','line_number':553,'multiline':False]
['text':' Internal visitor that moves the given storage (which must be a','line_number':554,'multiline':False]
['text':' constructed value of the same type) to the value it visits.','line_number':555,'multiline':False]
['text':'','line_number':556,'multiline':False]
['text':' representation','line_number':560,'multiline':False]
['text':' structors','line_number':564,'multiline':False]
['text':' internal visitor interfaces','line_number':571,'multiline':False]
['text':' NOTE TO USER :','line_number':590,'multiline':False]
['text':' Compile error here indicates one of variant's bounded types does','line_number':591,'multiline':False]
['text':' not meet the requirements of the Assignable concept. Thus,','line_number':592,'multiline':False]
['text':' variant is not Assignable.','line_number':593,'multiline':False]
['text':'','line_number':594,'multiline':False]
['text':' Hint: Are any of the bounded types const-qualified or references?','line_number':595,'multiline':False]
['text':'','line_number':596,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':602,'multiline':False]
['text':' (detail) class direct_assigner','line_number':603,'multiline':False]
['text':'','line_number':604,'multiline':False]
['text':' Generic static visitor that: if and only if the visited value is of the','line_number':605,'multiline':False]
['text':' specified type, assigns the given value to the visited value and returns','line_number':606,'multiline':False]
['text':' true; else returns false.','line_number':607,'multiline':False]
['text':'','line_number':608,'multiline':False]
['text':' representation','line_number':613,'multiline':False]
['text':' structors','line_number':617,'multiline':False]
['text':' visitor interface','line_number':624,'multiline':False]
['text':' silence MSVC warning C4512: assignment operator could not be generated','line_number':640,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':645,'multiline':False]
['text':' (detail) class direct_mover','line_number':646,'multiline':False]
['text':'','line_number':647,'multiline':False]
['text':' Generic static visitor that: if and only if the visited value is of the','line_number':648,'multiline':False]
['text':' specified type, move assigns the given value to the visited value and returns','line_number':649,'multiline':False]
['text':' true; else returns false.','line_number':650,'multiline':False]
['text':'','line_number':651,'multiline':False]
['text':' representation','line_number':656,'multiline':False]
['text':' structors','line_number':660,'multiline':False]
['text':' visitor interface','line_number':667,'multiline':False]
['text':' silence MSVC warning C4512: assignment operator could not be generated','line_number':683,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':689,'multiline':False]
['text':' (detail) class backup_assigner','line_number':690,'multiline':False]
['text':'','line_number':691,'multiline':False]
['text':' Internal visitor that "assigns" the given value to the visited value,','line_number':692,'multiline':False]
['text':' using backup to recover if the destroy-copy sequence fails.','line_number':693,'multiline':False]
['text':'','line_number':694,'multiline':False]
['text':' NOTE: This needs to be a friend of variant, as it needs access to','line_number':695,'multiline':False]
['text':' indicate_which, indicate_backup_which, etc.','line_number':696,'multiline':False]
['text':'','line_number':697,'multiline':False]
['text':' representation','line_number':702,'multiline':False]
['text':' structors','line_number':709,'multiline':False]
['text':' helpers, for visitor interface (below)','line_number':720,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':731,'multiline':False]
['text':' Move lhs content to backup...','line_number':735,'multiline':False]
['text':' nothrow','line_number':737,'multiline':False]
['text':' ...destroy lhs content...','line_number':739,'multiline':False]
['text':' nothrow','line_number':740,'multiline':False]
['text':' ...and attempt to copy rhs content into lhs storage:','line_number':744,'multiline':False]
['text':' In case of failure, copy backup pointer to lhs storage...','line_number':749,'multiline':False]
['text':' nothrow','line_number':751,'multiline':False]
['text':' nothrow','line_number':754,'multiline':False]
['text':' ...and rethrow:','line_number':756,'multiline':False]
['text':' In case of success, indicate new content type:','line_number':761,'multiline':False]
['text':' nothrow','line_number':762,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':768,'multiline':False]
['text':' Move lhs content to backup...','line_number':772,'multiline':False]
['text':' nothrow','line_number':775,'multiline':False]
['text':' ...destroy lhs content...','line_number':777,'multiline':False]
['text':' nothrow','line_number':778,'multiline':False]
['text':' ...and attempt to copy rhs content into lhs storage:','line_number':782,'multiline':False]
['text':' In case of failure, restore backup content to lhs storage...','line_number':787,'multiline':False]
['text':' nothrow','line_number':791,'multiline':False]
['text':' ...and rethrow:','line_number':793,'multiline':False]
['text':' In case of success, indicate new content type:','line_number':798,'multiline':False]
['text':' nothrow','line_number':799,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':805,'multiline':False]
['text':' Backup lhs content...','line_number':809,'multiline':False]
['text':' ...destroy lhs content...','line_number':812,'multiline':False]
['text':' nothrow','line_number':813,'multiline':False]
['text':' ...and attempt to copy rhs content into lhs storage:','line_number':817,'multiline':False]
['text':' In case of failure, copy backup pointer to lhs storage...','line_number':822,'multiline':False]
['text':' nothrow','line_number':824,'multiline':False]
['text':' ...indicate now using backup...','line_number':826,'multiline':False]
['text':' nothrow','line_number':827,'multiline':False]
['text':' ...and rethrow:','line_number':829,'multiline':False]
['text':' In case of success, indicate new content type...','line_number':834,'multiline':False]
['text':' nothrow','line_number':835,'multiline':False]
['text':' ...and delete backup:','line_number':837,'multiline':False]
['text':' nothrow','line_number':838,'multiline':False]
['text':' visitor interface','line_number':841,'multiline':False]
['text':' silence MSVC warning C4512: assignment operator could not be generated','line_number':854,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':859,'multiline':False]
['text':' (detail) class swap_with','line_number':860,'multiline':False]
['text':'','line_number':861,'multiline':False]
['text':' Visitor that swaps visited value with content of given variant.','line_number':862,'multiline':False]
['text':'','line_number':863,'multiline':False]
['text':' Precondition: Given variant MUST have same logical type as visited value.','line_number':864,'multiline':False]
['text':'','line_number':865,'multiline':False]
['text':' representation','line_number':870,'multiline':False]
['text':' structors','line_number':874,'multiline':False]
['text':' internal visitor interfaces','line_number':881,'multiline':False]
['text':' Since the precondition ensures types are same, get T...','line_number':886,'multiline':False]
['text':' ...and swap:','line_number':890,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':899,'multiline':False]
['text':' (detail) class reflect','line_number':900,'multiline':False]
['text':'','line_number':901,'multiline':False]
['text':' Generic static visitor that performs a typeid on the value it visits.','line_number':902,'multiline':False]
['text':'','line_number':903,'multiline':False]
['text':' visitor interfaces','line_number':908,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':918,'multiline':False]
['text':' (detail) class comparer','line_number':919,'multiline':False]
['text':'','line_number':920,'multiline':False]
['text':' Generic static visitor that compares the content of the given lhs variant','line_number':921,'multiline':False]
['text':' with the visited rhs content using Comp.','line_number':922,'multiline':False]
['text':'','line_number':923,'multiline':False]
['text':' Precondition: lhs.which() == rhs.which()','line_number':924,'multiline':False]
['text':'','line_number':925,'multiline':False]
['text':' representation','line_number':930,'multiline':False]
['text':' structors','line_number':934,'multiline':False]
['text':' visitor interfaces','line_number':941,'multiline':False]
['text':' Since the precondition ensures lhs and rhs types are same, get T...','line_number':946,'multiline':False]
['text':' ...and compare lhs and rhs contents:','line_number':950,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':959,'multiline':False]
['text':' (detail) class equal_comp','line_number':960,'multiline':False]
['text':'','line_number':961,'multiline':False]
['text':' Generic function object compares lhs with rhs using operator==.','line_number':962,'multiline':False]
['text':'','line_number':963,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':973,'multiline':False]
['text':' (detail) class less_comp','line_number':974,'multiline':False]
['text':'','line_number':975,'multiline':False]
['text':' Generic function object compares lhs with rhs using operator<.','line_number':976,'multiline':False]
['text':'','line_number':977,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':987,'multiline':False]
['text':' (detail) class template invoke_visitor','line_number':988,'multiline':False]
['text':'','line_number':989,'multiline':False]
['text':' Internal visitor that invokes the given visitor using:','line_number':990,'multiline':False]
['text':'  * for wrappers (e.g., recursive_wrapper), the wrapper's held value.','line_number':991,'multiline':False]
['text':'  * for all other values, the value itself.','line_number':992,'multiline':False]
['text':'','line_number':993,'multiline':False]
['text':' representation','line_number':997,'multiline':False]
['text':' visitor typedefs','line_number':1001,'multiline':False]
['text':' structors','line_number':1006,'multiline':False]
['text':' internal visitor interfaces','line_number':1013,'multiline':False]
['text':'using workaround with is_same<T, T> to prenvent compilation error, because we need to use T in enable_if to make SFINAE work','line_number':1017,'multiline':False]
['text':'using workaround with is_same<T, T> to prenvent compilation error, because we need to use T in enable_if to make SFINAE work','line_number':1024,'multiline':False]
['text':'BORLAND','line_number':1045,'multiline':False]
['text':'RVALUE REFERENCES','line_number':1047,'multiline':False]
['text':' internal visitor interfaces, cont.','line_number':1049,'multiline':False]
['text':' silence MSVC warning C4512: assignment operator could not be generated','line_number':1089,'multiline':False]
['text':' namespace detail::variant','line_number':1094,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1096,'multiline':False]
['text':' class template variant (concept inspired by Andrei Alexandrescu)','line_number':1097,'multiline':False]
['text':'','line_number':1098,'multiline':False]
['text':' See docs and boost/variant/variant_fwd.hpp for more information.','line_number':1099,'multiline':False]
['text':'','line_number':1100,'multiline':False]
['text':' helpers, for typedefs (below)','line_number':1107,'multiline':False]
['text':' helpers, for typedefs (below)','line_number':1129,'multiline':False]
['text':' over_sequence<...>::type','line_number':1133,'multiline':False]
['text':' public typedefs','line_number':1144,'multiline':False]
['text':' used by is_variant_constructible_from<> trait','line_number':1154,'multiline':False]
['text':' internal typedefs','line_number':1161,'multiline':False]
['text':' defined(BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT)','line_number':1172,'multiline':False]
['text':' helpers, for typedefs (below)','line_number':1174,'multiline':False]
['text':'','line_number':1187,'multiline':True]
['text':'','line_number':1201,'multiline':True]
['text':' public typedefs','line_number':1211,'multiline':False]
['text':' helpers, for internal typedefs (below)','line_number':1217,'multiline':False]
['text':'','line_number':1223,'multiline':True]
['text':' internal typedefs','line_number':1233,'multiline':False]
['text':' static precondition assertions','line_number':1239,'multiline':False]
['text':' NOTE TO USER :','line_number':1241,'multiline':False]
['text':' variant< type-sequence > syntax is not supported on this compiler!','line_number':1242,'multiline':False]
['text':'','line_number':1243,'multiline':False]
['text':' BOOST_VARIANT_NO_TYPE_SEQUENCE_SUPPORT workaround','line_number':1246,'multiline':False]
['text':' helpers, for representation (below)','line_number':1248,'multiline':False]
['text':' helpers, for representation (below)','line_number':1284,'multiline':False]
['text':' which_ on:','line_number':1286,'multiline':False]
['text':' * [0,  size<internal_types>) indicates stack content','line_number':1287,'multiline':False]
['text':' * [-size<internal_types>, 0) indicates pointer to heap backup','line_number':1288,'multiline':False]
['text':' if which_ >= 0:','line_number':1289,'multiline':False]
['text':' * then which() -> which_','line_number':1290,'multiline':False]
['text':' * else which() -> -(which_ + 1)','line_number':1291,'multiline':False]
['text':' defined(BOOST_VARIANT_MINIMIZE_SIZE)','line_number':1297,'multiline':False]
['text':' [if O1_size available, then attempt which_t size optimization...]','line_number':1299,'multiline':False]
['text':' [select signed char if fewer than SCHAR_MAX types, else signed int:]','line_number':1300,'multiline':False]
['text':' BOOST_VARIANT_MINIMIZE_SIZE switch','line_number':1311,'multiline':False]
['text':' representation -- private when possible','line_number':1313,'multiline':False]
['text':' helpers, for queries (below)','line_number':1333,'multiline':False]
['text':' queries','line_number':1340,'multiline':False]
['text':' If using heap backup...','line_number':1344,'multiline':False]
['text':' ...then return adjusted which_:','line_number':1346,'multiline':False]
['text':' Otherwise, return which_ directly:','line_number':1349,'multiline':False]
['text':' helpers, for structors (below)','line_number':1353,'multiline':False]
['text':' structors','line_number':1368,'multiline':False]
['text':' behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized','line_number':1382,'multiline':False]
['text':' NOTE TO USER :','line_number':1385,'multiline':False]
['text':' Compile error from here indicates that the first bound','line_number':1386,'multiline':False]
['text':' type is not default-constructible, and so variant cannot','line_number':1387,'multiline':False]
['text':' support its own default-construction.','line_number':1388,'multiline':False]
['text':'','line_number':1389,'multiline':False]
['text':' zero is the index of the first bounded type','line_number':1391,'multiline':False]
['text':' helpers, for structors, cont. (below)','line_number':1397,'multiline':False]
['text':' representation','line_number':1402,'multiline':False]
['text':' structors','line_number':1406,'multiline':False]
['text':' internal visitor interfaces (below)','line_number':1413,'multiline':False]
['text':' NOTE TO USER :','line_number':1418,'multiline':False]
['text':' Compile error here indicates one of the source variant's types','line_number':1419,'multiline':False]
['text':' cannot be unambiguously converted to the destination variant's','line_number':1420,'multiline':False]
['text':' types (or that no conversion exists).','line_number':1421,'multiline':False]
['text':'','line_number':1422,'multiline':False]
['text':' representation','line_number':1478,'multiline':False]
['text':' structors','line_number':1482,'multiline':False]
['text':' internal visitor interfaces (below)','line_number':1489,'multiline':False]
['text':' NOTE TO USER :','line_number':1494,'multiline':False]
['text':' Compile error here indicates one of the source variant's types','line_number':1495,'multiline':False]
['text':' cannot be unambiguously converted to the destination variant's','line_number':1496,'multiline':False]
['text':' types (or that no conversion exists).','line_number':1497,'multiline':False]
['text':'','line_number':1498,'multiline':False]
['text':' helpers, for structors, below','line_number':1542,'multiline':False]
['text':' is_foreign_variant','line_number':1548,'multiline':False]
['text':' NOTE TO USER :','line_number':1551,'multiline':False]
['text':' Compile error here indicates that the given type is not','line_number':1552,'multiline':False]
['text':' unambiguously convertible to one of the variant's types','line_number':1553,'multiline':False]
['text':' (or that no conversion exists).','line_number':1554,'multiline':False]
['text':'','line_number':1555,'multiline':False]
['text':' is_foreign_variant','line_number':1569,'multiline':False]
['text':' NOTE TO USER :','line_number':1572,'multiline':False]
['text':' Compile error here indicates that the given type is not','line_number':1573,'multiline':False]
['text':' unambiguously convertible to one of the variant's types','line_number':1574,'multiline':False]
['text':' (or that no conversion exists).','line_number':1575,'multiline':False]
['text':'','line_number':1576,'multiline':False]
['text':' is_foreign_variant','line_number':1590,'multiline':False]
['text':' is_foreign_variant','line_number':1604,'multiline':False]
['text':' [Determine if the given variant is itself a bounded type, or if its','line_number':1617,'multiline':False]
['text':'  content needs to be converted (i.e., it is a 'foreign' variant):]','line_number':1618,'multiline':False]
['text':'','line_number':1619,'multiline':False]
['text':' Convert construct from operand:','line_number':1634,'multiline':False]
['text':' [Determine if the given variant is itself a bounded type, or if its','line_number':1645,'multiline':False]
['text':'  content needs to be converted (i.e., it is a 'foreign' variant):]','line_number':1646,'multiline':False]
['text':'','line_number':1647,'multiline':False]
['text':' Convert move construct from operand:','line_number':1662,'multiline':False]
['text':' structors, cont.','line_number':1708,'multiline':False]
['text':' structors, cont.','line_number':1756,'multiline':False]
['text':' [MSVC6 requires copy constructor appear after template constructors]','line_number':1758,'multiline':False]
['text':' Copy the value of operand into *this...','line_number':1761,'multiline':False]
['text':' ...and activate the *this's primary storage on success:','line_number':1765,'multiline':False]
['text':' Move the value of operand into *this...','line_number':1772,'multiline':False]
['text':' ...and activate the *this's primary storage on success:','line_number':1776,'multiline':False]
['text':' helpers, for modifiers (below)','line_number':1781,'multiline':False]
['text':' class assigner','line_number':1788,'multiline':False]
['text':'','line_number':1789,'multiline':False]
['text':' Internal visitor that "assigns" the visited value to the given variant','line_number':1790,'multiline':False]
['text':' by appropriate destruction and copy-construction.','line_number':1791,'multiline':False]
['text':'','line_number':1792,'multiline':False]
['text':' representation','line_number':1797,'multiline':False]
['text':' structors','line_number':1802,'multiline':False]
['text':' helpers, for internal visitor interface (below)','line_number':1810,'multiline':False]
['text':' has_nothrow_copy','line_number':1815,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':1816,'multiline':False]
['text':' has_fallback_type','line_number':1817,'multiline':False]
['text':' Destroy lhs's content...','line_number':1820,'multiline':False]
['text':' nothrow','line_number':1821,'multiline':False]
['text':' ...copy rhs content into lhs's storage...','line_number':1823,'multiline':False]
['text':' nothrow','line_number':1825,'multiline':False]
['text':' ...and indicate new content type:','line_number':1827,'multiline':False]
['text':' nothrow','line_number':1828,'multiline':False]
['text':' has_nothrow_copy','line_number':1834,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':1835,'multiline':False]
['text':' has_fallback_type','line_number':1836,'multiline':False]
['text':' Attempt to make a temporary copy (so as to move it below)...','line_number':1839,'multiline':False]
['text':' ...and upon success destroy lhs's content...','line_number':1842,'multiline':False]
['text':' nothrow','line_number':1843,'multiline':False]
['text':' ...move the temporary copy into lhs's storage...','line_number':1845,'multiline':False]
['text':' nothrow','line_number':1847,'multiline':False]
['text':' ...and indicate new content type:','line_number':1849,'multiline':False]
['text':' nothrow','line_number':1850,'multiline':False]
['text':' In case of failure, default-construct fallback type in lhs's storage...','line_number':1854,'multiline':False]
['text':' nothrow','line_number':1856,'multiline':False]
['text':' ...indicate construction of fallback type...','line_number':1858,'multiline':False]
['text':' nothrow','line_number':1861,'multiline':False]
['text':' has_nothrow_copy','line_number':1867,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':1868,'multiline':False]
['text':' has_fallback_type','line_number':1869,'multiline':False]
['text':' Destroy lhs's content...','line_number':1872,'multiline':False]
['text':' nothrow','line_number':1873,'multiline':False]
['text':' ...and attempt to copy rhs's content into lhs's storage:','line_number':1877,'multiline':False]
['text':' ...and rethrow:','line_number':1885,'multiline':False]
['text':' In the event of success, indicate new content type:','line_number':1890,'multiline':False]
['text':' nothrow','line_number':1891,'multiline':False]
['text':' has_nothrow_copy','line_number':1897,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':1898,'multiline':False]
['text':' has_fallback_type','line_number':1899,'multiline':False]
['text':' internal visitor interfaces','line_number':1907,'multiline':False]
['text':' reduces compile-time','line_number':1914,'multiline':False]
['text':' silence MSVC warning C4512: assignment operator could not be generated','line_number':1929,'multiline':False]
['text':' class move_assigner','line_number':1937,'multiline':False]
['text':'','line_number':1938,'multiline':False]
['text':' Internal visitor that "move assigns" the visited value to the given variant','line_number':1939,'multiline':False]
['text':' by appropriate destruction and move-construction.','line_number':1940,'multiline':False]
['text':'','line_number':1941,'multiline':False]
['text':' structors','line_number':1946,'multiline':False]
['text':' helpers, for internal visitor interface (below)','line_number':1953,'multiline':False]
['text':' has_nothrow_copy','line_number':1958,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':1959,'multiline':False]
['text':' has_fallback_type','line_number':1960,'multiline':False]
['text':' has_nothrow_copy','line_number':1969,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':1970,'multiline':False]
['text':' has_fallback_type','line_number':1971,'multiline':False]
['text':' ...destroy lhs's content...','line_number':1974,'multiline':False]
['text':' nothrow','line_number':1975,'multiline':False]
['text':' ...move the rhs_content into lhs's storage...','line_number':1977,'multiline':False]
['text':' nothrow','line_number':1979,'multiline':False]
['text':' ...and indicate new content type:','line_number':1981,'multiline':False]
['text':' nothrow','line_number':1982,'multiline':False]
['text':' has_nothrow_copy','line_number':1988,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':1989,'multiline':False]
['text':' has_fallback_type','line_number':1990,'multiline':False]
['text':' Destroy lhs's content...','line_number':1993,'multiline':False]
['text':' nothrow','line_number':1994,'multiline':False]
['text':' ...and attempt to copy rhs's content into lhs's storage:','line_number':1998,'multiline':False]
['text':' ...and rethrow:','line_number':2006,'multiline':False]
['text':' In the event of success, indicate new content type:','line_number':2011,'multiline':False]
['text':' nothrow','line_number':2012,'multiline':False]
['text':' has_nothrow_copy','line_number':2018,'multiline':False]
['text':' is_nothrow_move_constructible','line_number':2019,'multiline':False]
['text':' has_fallback_type','line_number':2020,'multiline':False]
['text':' internal visitor interfaces','line_number':2026,'multiline':False]
['text':' reduces compile-time','line_number':2033,'multiline':False]
['text':' silence MSVC warning C4512: assignment operator could not be generated','line_number':2048,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':2054,'multiline':False]
['text':' If the contained types are EXACTLY the same...','line_number':2058,'multiline':False]
['text':' ...then assign rhs's storage to lhs's content:','line_number':2061,'multiline':False]
['text':' Otherwise, perform general (copy-based) variant assignment:','line_number':2067,'multiline':False]
['text':' If the contained types are EXACTLY the same...','line_number':2076,'multiline':False]
['text':' ...then move rhs's storage to lhs's content:','line_number':2079,'multiline':False]
['text':' Otherwise, perform general (move-based) variant assignment:','line_number':2085,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':2090,'multiline':False]
['text':' helpers, for modifiers (below)','line_number':2092,'multiline':False]
['text':' If direct T-to-T assignment is not possible...','line_number':2097,'multiline':False]
['text':' ...then convert rhs to variant and assign:','line_number':2101,'multiline':False]
['text':'','line_number':2102,'multiline':False]
['text':' While potentially inefficient, the following construction of a','line_number':2103,'multiline':False]
['text':' variant allows T as any type convertible to one of the bounded','line_number':2104,'multiline':False]
['text':' types without excessive code redundancy.','line_number':2105,'multiline':False]
['text':'','line_number':2106,'multiline':False]
['text':' If direct T-to-T move assignment is not possible...','line_number':2116,'multiline':False]
['text':' ...then convert rhs to variant and assign:','line_number':2120,'multiline':False]
['text':'','line_number':2121,'multiline':False]
['text':' While potentially inefficient, the following construction of a','line_number':2122,'multiline':False]
['text':' variant allows T as any type convertible to one of the bounded','line_number':2123,'multiline':False]
['text':' types without excessive code redundancy.','line_number':2124,'multiline':False]
['text':'','line_number':2125,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':2130,'multiline':False]
['text':' modifiers','line_number':2132,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':2148,'multiline':False]
['text':' [MSVC6 requires copy assign appear after templated operator=]','line_number':2163,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':2179,'multiline':False]
['text':' If the contained types are the same...','line_number':2183,'multiline':False]
['text':' ...then swap the values directly:','line_number':2186,'multiline':False]
['text':' ...otherwise, perform general variant swap:','line_number':2192,'multiline':False]
['text':' queries','line_number':2199,'multiline':False]
['text':'','line_number':2201,'multiline':False]
['text':' NOTE: member which() defined above.','line_number':2202,'multiline':False]
['text':'','line_number':2203,'multiline':False]
['text':' prevent comparison with foreign types','line_number':2216,'multiline':False]
['text':' comparison operators','line_number':2254,'multiline':False]
['text':' [MSVC6 requires these operators appear after template operators]','line_number':2256,'multiline':False]
['text':'','line_number':2271,'multiline':False]
['text':' Dirk Schreib suggested this collating order.','line_number':2272,'multiline':False]
['text':'','line_number':2273,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2284,'multiline':False]
['text':' comparison operators != > <= >=','line_number':2285,'multiline':False]
['text':' helpers, for visitation support (below) -- private when possible','line_number':2306,'multiline':False]
['text':' defined(BOOST_NO_MEMBER_TEMPLATE_FRIENDS)','line_number':2314,'multiline':False]
['text':' !defined(BOOST_NO_MEMBER_TEMPLATE_FRIENDS)','line_number':2318,'multiline':False]
['text':' visitation support','line_number':2363,'multiline':False]
['text':' class variant','line_number':2407,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2409,'multiline':False]
['text':' metafunction make_variant_over','line_number':2410,'multiline':False]
['text':'','line_number':2411,'multiline':False]
['text':' See docs and boost/variant/variant_fwd.hpp for more information.','line_number':2412,'multiline':False]
['text':'','line_number':2413,'multiline':False]
['text':' precondition assertions','line_number':2417,'multiline':False]
['text':' metafunction result','line_number':2426,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2434,'multiline':False]
['text':' function template swap','line_number':2435,'multiline':False]
['text':'','line_number':2436,'multiline':False]
['text':' Swaps two variants of the same type (i.e., identical specification).','line_number':2437,'multiline':False]
['text':'','line_number':2438,'multiline':False]
['text':' namespace boost','line_number':2448,'multiline':False]
['text':' implementation additions','line_number':2450,'multiline':False]
['text':' BOOST_NO_IOSTREAM','line_number':2454,'multiline':False]
['text':' BOOST_VARIANT_VARIANT_HPP','line_number':2456,'multiline':False]
