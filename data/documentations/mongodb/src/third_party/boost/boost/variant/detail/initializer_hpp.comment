['text':'-----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' boost variant/detail/initializer.hpp header file','line_number':2,'multiline':False]
['text':' See http://www.boost.org for updates, documentation, and revision history.','line_number':3,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Copyright (c) 2002-2003','line_number':6,'multiline':False]
['text':' Eric Friedman, Itay Maman','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':' for placement new','line_number':16,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':43,'multiline':False]
['text':' (detail) support to simulate standard overload resolution rules','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' The below initializers allows variant to follow standard overload','line_number':46,'multiline':False]
['text':' resolution rules over the specified set of bounded types.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' On compilers where using declarations in class templates can correctly','line_number':49,'multiline':False]
['text':' avoid name hiding, use an optimal solution based on the variant's typelist.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' Otherwise, use a preprocessor workaround based on knowledge of the fixed','line_number':52,'multiline':False]
['text':' size of the variant's psuedo-variadic template parameter list.','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':' (detail) quoted metafunction make_initializer_node','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' Exposes a pair whose first type is a node in the initializer hierarchy.','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' helpers, for metafunction result (below)','line_number':67,'multiline':False]
['text':' helpers, for static functions (below)','line_number':77,'multiline':False]
['text':' static functions','line_number':100,'multiline':False]
['text':' which','line_number':111,'multiline':False]
['text':' This assert must newer trigger, because all the reference contents are','line_number':117,'multiline':False]
['text':' handled by the initilize(void* dest, param_T operand) function above','line_number':118,'multiline':False]
['text':' which','line_number':123,'multiline':False]
['text':' metafunction result','line_number':130,'multiline':False]
['text':' (detail) class initializer_root','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':' Every level of the initializer hierarchy must expose the name','line_number':142,'multiline':False]
['text':' "initialize," so initializer_root provides a dummy function:','line_number':143,'multiline':False]
['text':'','line_number':144,'multiline':False]
['text':' static functions','line_number':147,'multiline':False]
['text':' defined(BOOST_NO_USING_DECLARATION_OVERLOADS_FROM_TYPENAME_BASE)','line_number':153,'multiline':False]
['text':' Obsolete. Remove.','line_number':155,'multiline':False]
['text':'','line_number':158,'multiline':True]
['text':' Obsolete. Remove.','line_number':160,'multiline':False]
['text':'','line_number':168,'multiline':True]
['text':' static functions','line_number':173,'multiline':False]
['text':'which','line_number':192,'multiline':True]
['text':'','line_number':194,'multiline':True]
['text':' BOOST_NO_USING_DECLARATION_OVERLOADS_FROM_TYPENAME_BASE workaround','line_number':206,'multiline':False]
['text':' namespace detail::variant','line_number':208,'multiline':False]
['text':' namespace boost','line_number':209,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':211,'multiline':False]
['text':' macro BOOST_VARIANT_AUX_INITIALIZER_T','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' Given both the variant's typelist and a basename for forming the list of','line_number':214,'multiline':False]
['text':' bounded types (i.e., T becomes T1, T2, etc.), exposes the initializer','line_number':215,'multiline':False]
['text':' most appropriate to the current compiler.','line_number':216,'multiline':False]
['text':'','line_number':217,'multiline':False]
['text':'','line_number':232,'multiline':True]
['text':' defined(BOOST_NO_USING_DECLARATION_OVERLOADS_FROM_TYPENAME_BASE)','line_number':234,'multiline':False]
['text':' Obsolete. Remove.','line_number':236,'multiline':False]
['text':'','line_number':239,'multiline':True]
['text':'','line_number':245,'multiline':True]
['text':' BOOST_NO_USING_DECLARATION_OVERLOADS_FROM_TYPENAME_BASE workaround','line_number':247,'multiline':False]
['text':' BOOST_VARIANT_DETAIL_INITIALIZER_HPP','line_number':249,'multiline':False]
