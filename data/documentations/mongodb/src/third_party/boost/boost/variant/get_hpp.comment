['text':'-----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' boost variant/get.hpp header file','line_number':2,'multiline':False]
['text':' See http://www.boost.org for updates, documentation, and revision history.','line_number':3,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Copyright (c) 2003 Eric Friedman, Itay Maman','line_number':6,'multiline':False]
['text':' Copyright (c) 2014-2022 Antony Polukhin','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':37,'multiline':False]
['text':' class bad_get','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' The exception thrown in the event of a failed get of a value.','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':' std::exception implementation','line_number':45,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':59,'multiline':False]
['text':' function template get<T>','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' Retrieves content of given variant object if content is of type T.','line_number':62,'multiline':False]
['text':' Otherwise: pointer ver. returns 0; reference ver. throws bad_get.','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' (detail) class template get_visitor','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' Generic static visitor that: if the value is of the specified type,','line_number':70,'multiline':False]
['text':' returns a pointer to the value it visits; else a null pointer.','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':' private typedefs','line_number':76,'multiline':False]
['text':' visitor typedefs','line_number':81,'multiline':False]
['text':' visitor interfaces','line_number':85,'multiline':False]
['text':' namespace detail::variant','line_number':99,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////////////////','line_number':115,'multiline':False]
['text':' relaxed_get<U>(variant) methods','line_number':116,'multiline':False]
['text':'','line_number':117,'multiline':False]
['text':' MSVC-2014 has fixed the incorrect diagnostics.','line_number':182,'multiline':False]
['text':' returning address of local variable or temporary','line_number':184,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////////////////','line_number':209,'multiline':False]
['text':' strict_get<U>(variant) methods','line_number':210,'multiline':False]
['text':'','line_number':211,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////////////////////////////','line_number':304,'multiline':False]
['text':' get<U>(variant) methods','line_number':305,'multiline':False]
['text':'','line_number':306,'multiline':False]
['text':' namespace boost','line_number':386,'multiline':False]
['text':' BOOST_VARIANT_GET_HPP','line_number':388,'multiline':False]
