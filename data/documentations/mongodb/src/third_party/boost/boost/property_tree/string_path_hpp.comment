['text':' ----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' Copyright (C) 2009 Sebastian Redl','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. ','line_number':4,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at ','line_number':5,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' For more information, see www.boost.org','line_number':8,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':9,'multiline':False]
['text':' Here we boldly assume that anything that is not random-access','line_number':36,'multiline':False]
['text':' preserves validity. This is valid for the STL sequences.','line_number':37,'multiline':False]
['text':' Convert the iterator to an index, and later back.','line_number':45,'multiline':False]
['text':'/ Default path class. A path is a sequence of values. Groups of values','line_number':69,'multiline':False]
['text':'/ are separated by the separator value, which defaults to '.' cast to','line_number':70,'multiline':False]
['text':'/ the sequence's value type. The group of values is then passed to the','line_number':71,'multiline':False]
['text':'/ translator to get a key.','line_number':72,'multiline':False]
['text':'/','line_number':73,'multiline':False]
['text':'/ If instantiated with std::string and id_translator\<std::string\>,','line_number':74,'multiline':False]
['text':'/ it accepts paths of the form "one.two.three.four".','line_number':75,'multiline':False]
['text':'/','line_number':76,'multiline':False]
['text':'/ @tparam String Any Sequence. If the sequence does not support random-','line_number':77,'multiline':False]
['text':'/                access iteration, concatenation of paths assumes that','line_number':78,'multiline':False]
['text':'/                insertions at the end preserve iterator validity.','line_number':79,'multiline':False]
['text':'/ @tparam Translator A translator with internal_type == String.','line_number':80,'multiline':False]
['text':'/ Create an empty path.','line_number':90,'multiline':False]
['text':'/ Create a path by parsing the given string.','line_number':92,'multiline':False]
['text':'/ @param value A sequence, possibly with separators, that describes','line_number':93,'multiline':False]
['text':'/              the path, e.g. "one.two.three".','line_number':94,'multiline':False]
['text':'/ @param separator The separator used in parsing. Defaults to '.'.','line_number':95,'multiline':False]
['text':'/ @param tr The translator used by this path to convert the individual','line_number':96,'multiline':False]
['text':'/           parts to keys.','line_number':97,'multiline':False]
['text':'/ Create a path by parsing the given string.','line_number':100,'multiline':False]
['text':'/ @param value A zero-terminated array of values. Only use if zero-','line_number':101,'multiline':False]
['text':'/              termination makes sense for your type, and your','line_number':102,'multiline':False]
['text':'/              sequence supports construction from it. Intended for','line_number':103,'multiline':False]
['text':'/              string literals.','line_number':104,'multiline':False]
['text':'/ @param separator The separator used in parsing. Defaults to '.'.','line_number':105,'multiline':False]
['text':'/ @param tr The translator used by this path to convert the individual','line_number':106,'multiline':False]
['text':'/           parts to keys.','line_number':107,'multiline':False]
['text':' Default copying doesn't do the right thing with the iterator','line_number':112,'multiline':False]
['text':'/ Take a single element off the path at the front and return it.','line_number':116,'multiline':False]
['text':'/ Test if the path is empty.','line_number':119,'multiline':False]
['text':'/ Test if the path contains a single element, i.e. no separators.','line_number':122,'multiline':False]
['text':'/ Get the separator used by this path.','line_number':125,'multiline':False]
['text':'/ Append a second path to this one.','line_number':132,'multiline':False]
['text':'/ @pre o's separator is the same as this one's, or o has no separators','line_number':133,'multiline':False]
['text':' If it's single, there's no separator. This allows to do','line_number':135,'multiline':False]
['text':' p /= "piece";','line_number':136,'multiline':False]
['text':' even for non-default separators.','line_number':137,'multiline':False]
['text':' Unless we're at the end, skip the separator we found.','line_number':214,'multiline':False]
['text':' By default, this is the path for strings. You can override this by','line_number':238,'multiline':False]
['text':' specializing path_of for a more specific form of std::basic_string.','line_number':239,'multiline':False]
['text':' These shouldn't be necessary, but GCC won't find the one above.','line_number':256,'multiline':False]
