['text':' ----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':' Copyright (C) 2002-2006 Marcin Kalicinski','line_number':2,'multiline':False]
['text':' Copyright (C) 2009 Sebastian Redl','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. ','line_number':5,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at ','line_number':6,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' For more information, see www.boost.org','line_number':9,'multiline':False]
['text':' ----------------------------------------------------------------------------','line_number':10,'multiline':False]
['text':' for std::pair','line_number':29,'multiline':False]
['text':'*
     * Property tree main structure. A property tree is a hierarchical data
     * structure which has one element of type @p Data in each node, as well
     * as an ordered sequence of sub-nodes, which are additionally identified
     * by a non-unique key of type @p Key.
     *
     * Key equivalency is defined by @p KeyCompare, a predicate defining a
     * strict weak ordering.
     *
     * Property tree defines a Container-like interface to the (key-node) pairs
     * of its direct sub-nodes. The iterators are bidirectional. The sequence
     * of nodes is held in insertion order, not key order.
     ','line_number':34,'multiline':True]
['text':' Internal types','line_number':53,'multiline':False]
['text':'*
         * Simpler way to refer to this basic_ptree\<C,K,P,A\> type.
         * Note that this is private, and made public only for doxygen.
         ','line_number':54,'multiline':True]
['text':' Basic types','line_number':61,'multiline':False]
['text':' Container view types','line_number':66,'multiline':False]
['text':' The problem with the iterators is that I can't make them complete','line_number':70,'multiline':False]
['text':' until the container is complete. Sucks. Especially for the reverses.','line_number':71,'multiline':False]
['text':' Associative view types','line_number':77,'multiline':False]
['text':' Property tree view types','line_number':81,'multiline':False]
['text':' The big five','line_number':85,'multiline':False]
['text':'* Creates a node with no children and default-constructed data. ','line_number':87,'multiline':True]
['text':'* Creates a node with no children and a copy of the given data. ','line_number':89,'multiline':True]
['text':'* Basic guarantee only. ','line_number':93,'multiline':True]
['text':'* Swap with other tree. Only constant-time and nothrow if the
         * data type's swap is.
         ','line_number':96,'multiline':True]
['text':' Container view functions','line_number':101,'multiline':False]
['text':'* The number of direct children of this node. ','line_number':103,'multiline':True]
['text':'* Whether there are any direct children. ','line_number':106,'multiline':True]
['text':'* Insert a copy of the given tree with its key just before the given
         * position in this node. This operation invalidates no iterators.
         * @return An iterator to the newly created child.
         ','line_number':123,'multiline':True]
['text':'* Range insert. Equivalent to:
         * @code
         * for(; first != last; ++first) insert(where, *first);
         * @endcode
         ','line_number':129,'multiline':True]
['text':'* Erase the child pointed at by the iterator. This operation
         * invalidates the given iterator, as well as its equivalent
         * assoc_iterator.
         * @return A valid iterator pointing to the element after the erased.
         ','line_number':136,'multiline':True]
['text':'* Range erase. Equivalent to:
         * @code
         * while(first != last;) first = erase(first);
         * @endcode
         ','line_number':143,'multiline':True]
['text':'* Equivalent to insert(begin(), value). ','line_number':150,'multiline':True]
['text':'* Equivalent to insert(end(), value). ','line_number':153,'multiline':True]
['text':'* Equivalent to erase(begin()). ','line_number':156,'multiline':True]
['text':'* Equivalent to erase(boost::prior(end())). ','line_number':159,'multiline':True]
['text':'* Reverses the order of direct children in the property tree. ','line_number':162,'multiline':True]
['text':'* Sorts the direct children of this node according to the predicate.
         * The predicate is passed the whole pair of key and child.
         ','line_number':165,'multiline':True]
['text':'* Sorts the direct children of this node according to key order. ','line_number':170,'multiline':True]
['text':' Equality','line_number':173,'multiline':False]
['text':'* Two property trees are the same if they have the same data, the keys
         * and order of their children are the same, and the children compare
         * equal, recursively.
         ','line_number':175,'multiline':True]
['text':' Associative view','line_number':182,'multiline':False]
['text':'* Returns an iterator to the first child, in key order. ','line_number':184,'multiline':True]
['text':'* Returns an iterator to the first child, in key order. ','line_number':186,'multiline':True]
['text':'* Returns the not-found iterator. Equivalent to end() in a real
         * associative container.
         ','line_number':189,'multiline':True]
['text':'* Returns the not-found iterator. Equivalent to end() in a real
         * associative container.
         ','line_number':193,'multiline':True]
['text':'* Find a child with the given key, or not_found() if there is none.
         * There is no guarantee about which child is returned if multiple have
         * the same key.
         ','line_number':198,'multiline':True]
['text':'* Find a child with the given key, or not_found() if there is none.
         * There is no guarantee about which child is returned if multiple have
         * the same key.
         ','line_number':204,'multiline':True]
['text':'* Find the range of children that have the given key. ','line_number':210,'multiline':True]
['text':'* Find the range of children that have the given key. ','line_number':214,'multiline':True]
['text':'* Count the number of direct children with the given key. ','line_number':218,'multiline':True]
['text':'* Erase all direct children with the given key and return the count.
         ','line_number':221,'multiline':True]
['text':'* Get the iterator that points to the same element as the argument.
         * @note A valid assoc_iterator range (a, b) does not imply that
         *       (to_iterator(a), to_iterator(b)) is a valid range.
         ','line_number':225,'multiline':True]
['text':'* Get the iterator that points to the same element as the argument.
         * @note A valid const_assoc_iterator range (a, b) does not imply that
         *       (to_iterator(a), to_iterator(b)) is a valid range.
         ','line_number':231,'multiline':True]
['text':' Property tree view','line_number':237,'multiline':False]
['text':'* Reference to the actual data in this node. ','line_number':239,'multiline':True]
['text':'* Reference to the actual data in this node. ','line_number':242,'multiline':True]
['text':'* Clear this tree completely, of both data and children. ','line_number':245,'multiline':True]
['text':'* Get the child at the given path, or throw @c ptree_bad_path.
         * @note Depending on the path, the result at each level may not be
         *       completely deterministic, i.e. if the same key appears multiple
         *       times, which child is chosen is not specified. This can lead
         *       to the path not being resolved even though there is a
         *       descendant with this path. Example:
         * @code
         *   a -> b -> c
         *     -> b
         * @endcode
         *       The path "a.b.c" will succeed if the resolution of "b" chooses
         *       the first such node, but fail if it chooses the second.
         ','line_number':248,'multiline':True]
['text':'* Get the child at the given path, or throw @c ptree_bad_path. ','line_number':263,'multiline':True]
['text':'* Get the child at the given path, or return @p default_value. ','line_number':266,'multiline':True]
['text':'* Get the child at the given path, or return @p default_value. ','line_number':269,'multiline':True]
['text':'* Get the child at the given path, or return boost::null. ','line_number':273,'multiline':True]
['text':'* Get the child at the given path, or return boost::null. ','line_number':276,'multiline':True]
['text':'* Set the node at the given path to the given value. Create any
         * missing parents. If the node at the path already exists, replace it.
         * @return A reference to the inserted subtree.
         * @note Because of the way paths work, it is not generally guaranteed
         *       that a node newly created can be accessed using the same path.
         * @note If the path could refer to multiple nodes, it is unspecified
         *       which one gets replaced.
         ','line_number':280,'multiline':True]
['text':'* Add the node at the given path. Create any missing parents. If there
         * already is a node at the path, add another one with the same key.
         * @param path Path to the child. The last fragment must not have an
         *             index.
         * @return A reference to the inserted subtree.
         * @note Because of the way paths work, it is not generally guaranteed
         *       that a node newly created can be accessed using the same path.
         ','line_number':290,'multiline':True]
['text':'* Take the value of this node and attempt to translate it to a
         * @c Type object using the supplied translator.
         * @throw ptree_bad_data if the conversion fails.
         ','line_number':300,'multiline':True]
['text':'* Take the value of this node and attempt to translate it to a
         * @c Type object using the default translator.
         * @throw ptree_bad_data if the conversion fails.
         ','line_number':308,'multiline':True]
['text':'* Take the value of this node and attempt to translate it to a
         * @c Type object using the supplied translator. Return @p default_value
         * if this fails.
         ','line_number':315,'multiline':True]
['text':'* Make get_value do the right thing for string literals. ','line_number':322,'multiline':True]
['text':'* Take the value of this node and attempt to translate it to a
         * @c Type object using the default translator. Return @p default_value
         * if this fails.
         ','line_number':330,'multiline':True]
['text':'* Make get_value do the right thing for string literals. ','line_number':338,'multiline':True]
['text':'* Take the value of this node and attempt to translate it to a
         * @c Type object using the supplied translator. Return boost::null if
         * this fails.
         ','line_number':346,'multiline':True]
['text':'* Take the value of this node and attempt to translate it to a
         * @c Type object using the default translator. Return boost::null if
         * this fails.
         ','line_number':353,'multiline':True]
['text':'* Replace the value at this node with the given value, translated
         * to the tree's data type using the supplied translator.
         * @throw ptree_bad_data if the conversion fails.
        ','line_number':360,'multiline':True]
['text':'* Replace the value at this node with the given value, translated
         * to the tree's data type using the default translator.
         * @throw ptree_bad_data if the conversion fails.
        ','line_number':367,'multiline':True]
['text':'* Shorthand for get_child(path).get_value(tr). ','line_number':374,'multiline':True]
['text':'* Shorthand for get_child(path).get_value\<Type\>(). ','line_number':379,'multiline':True]
['text':'* Shorthand for get_child(path, empty_ptree())
         *                    .get_value(default_value, tr).
         * That is, return the translated value if possible, and the default
         * value if the node doesn't exist or conversion fails.
         ','line_number':383,'multiline':True]
['text':'* Make get do the right thing for string literals. ','line_number':393,'multiline':True]
['text':'* Shorthand for get_child(path, empty_ptree())
         *                    .get_value(default_value).
         * That is, return the translated value if possible, and the default
         * value if the node doesn't exist or conversion fails.
         ','line_number':401,'multiline':True]
['text':'* Make get do the right thing for string literals. ','line_number':410,'multiline':True]
['text':'* Shorthand for:
         * @code
         * if(optional\<self_type&\> node = get_child_optional(path))
         *   return node->get_value_optional(tr);
         * return boost::null;
         * @endcode
         * That is, return the value if it exists and can be converted, or nil.
        ','line_number':418,'multiline':True]
['text':'* Shorthand for:
         * @code
         * if(optional\<const self_type&\> node = get_child_optional(path))
         *   return node->get_value_optional();
         * return boost::null;
         * @endcode
         * That is, return the value if it exists and can be converted, or nil.
        ','line_number':429,'multiline':True]
['text':'* Set the value of the node at the given path to the supplied value,
         * translated to the tree's data type. If the node doesn't exist, it is
         * created, including all its missing parents.
         * @return The node that had its value changed.
         * @throw ptree_bad_data if the conversion fails.
        ','line_number':440,'multiline':True]
['text':'* Set the value of the node at the given path to the supplied value,
         * translated to the tree's data type. If the node doesn't exist, it is
         * created, including all its missing parents.
         * @return The node that had its value changed.
         * @throw ptree_bad_data if the conversion fails.
        ','line_number':449,'multiline':True]
['text':'* If the node identified by the path does not exist, create it,
         * including all its missing parents.
         * If the node already exists, add a sibling with the same key.
         * Set the newly created node's value to the given paremeter,
         * translated with the supplied translator.
         * @param path Path to the child. The last fragment must not have an
         *             index.
         * @param value The value to add.
         * @param tr The translator to use.
         * @return The node that was added.
         * @throw ptree_bad_data if the conversion fails.
        ','line_number':458,'multiline':True]
['text':'* If the node identified by the path does not exist, create it,
         * including all its missing parents.
         * If the node already exists, add a sibling with the same key.
         * Set the newly created node's value to the given paremeter,
         * translated with the supplied translator.
         * @param path Path to the child. The last fragment must not have an
         *             index.
         * @param value The value to add.
         * @return The node that was added.
         * @throw ptree_bad_data if the conversion fails.
        ','line_number':475,'multiline':True]
['text':' Hold the data of this node','line_number':490,'multiline':False]
['text':' Hold the children - this is a void* because we can't complete the','line_number':492,'multiline':False]
['text':' container type within the class.','line_number':493,'multiline':False]
['text':' Getter tree-walk. Not const-safe! Gets the node the path refers to,','line_number':496,'multiline':False]
['text':' or null. Destroys p's value.','line_number':497,'multiline':False]
['text':' Modifer tree-walk. Gets the parent of the node referred to by the','line_number':500,'multiline':False]
['text':' path, creating nodes as necessary. p is the path to the remaining','line_number':501,'multiline':False]
['text':' child.','line_number':502,'multiline':False]
['text':' This struct contains typedefs for the concrete types.','line_number':505,'multiline':False]
