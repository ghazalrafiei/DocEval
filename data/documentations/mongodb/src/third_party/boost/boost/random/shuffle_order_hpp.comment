['text':' boost random/shuffle_order.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Copyright Steven Watanabe 2010
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 ','line_number':1,'multiline':True]
['text':' std::copy','line_number':19,'multiline':False]
['text':'*
 * Instatiations of class template @c shuffle_order_engine model a
 * \pseudo_random_number_generator. It mixes the output
 * of some (usually \linear_congruential_engine)
 * \uniform_random_number_generator to get better statistical properties.
 * The algorithm is described in
 *
 *  @blockquote
 *  "Improving a poor random number generator", Carter Bays
 *  and S.D. Durham, ACM Transactions on Mathematical Software,
 *  Vol 2, No. 1, March 1976, pp. 59-64.
 *  http://doi.acm.org/10.1145/355666.355670
 *  @endblockquote
 *
 * The output of the base generator is buffered in an array of
 * length k. Every output X(n) has a second role: It gives an
 * index into the array where X(n+1) will be retrieved. Used
 * array elements are replaced with fresh output from the base
 * generator.
 *
 * Template parameters are the base generator and the array
 * length k, which should be around 100.
 ','line_number':35,'multiline':True]
['text':'*
     * Constructs a @c shuffle_order_engine by invoking the
     * default constructor of the base generator.
     *
     * Complexity: Exactly k+1 invocations of the base generator.
     ','line_number':72,'multiline':True]
['text':'*
     * Constructs a @c shuffle_output_engine by invoking the one-argument
     * constructor of the base generator with the parameter seed.
     *
     * Complexity: Exactly k+1 invocations of the base generator.
     ','line_number':79,'multiline':True]
['text':'*
     * Constructs a @c shuffle_output_engine by using a copy
     * of the provided generator.
     *
     * Precondition: The template argument UniformRandomNumberGenerator
     * shall denote a CopyConstructible type.
     *
     * Complexity: Exactly k+1 invocations of the base generator.
     ','line_number':90,'multiline':True]
['text':'*
     * Invokes the one-argument seed method of the base generator
     * with the parameter seed and re-initializes the internal buffer array.
     *
     * Complexity: Exactly k+1 invocations of the base generator.
     ','line_number':108,'multiline':True]
['text':'*
     * Invokes the one-argument seed method of the base generator
     * with the parameter seq and re-initializes the internal buffer array.
     *
     * Complexity: Exactly k+1 invocations of the base generator.
     ','line_number':117,'multiline':True]
['text':' calculating the range every time may seem wasteful.  However, this','line_number':131,'multiline':False]
['text':' makes the information locally available for the optimizer.','line_number':132,'multiline':False]
['text':' try to do it in the native type if we know that it won't','line_number':143,'multiline':False]
['text':' overflow','line_number':144,'multiline':False]
['text':' Otherwise try to use uint64_t','line_number':147,'multiline':False]
['text':' assert(0 <= j && j < k);','line_number':156,'multiline':False]
['text':'* Advances the generator by z steps. ','line_number':162,'multiline':True]
['text':'* Fills a range with pseudo-random values. ','line_number':170,'multiline':True]
['text':'* Returns the smallest value that the generator can produce. ','line_number':175,'multiline':True]
['text':'* Returns the largest value that the generator can produce. ','line_number':178,'multiline':True]
['text':'* Writes a @c shuffle_order_engine to a @c std::ostream. ','line_number':182,'multiline':True]
['text':'* Reads a @c shuffle_order_engine from a @c std::istream. ','line_number':192,'multiline':True]
['text':'* Returns true if the two generators will produce identical sequences. ','line_number':202,'multiline':True]
['text':'* Returns true if the two generators will produce different sequences. ','line_number':205,'multiline':True]
['text':'/ \cond show_private','line_number':210,'multiline':False]
['text':' we cannot use std::generate, because it uses pass-by-value for _rng','line_number':214,'multiline':False]
['text':'/ \endcond','line_number':220,'multiline':False]
['text':'  A definition is required even for integral static constants','line_number':228,'multiline':False]
['text':'*
 * According to Harry Erwin (private e-mail), the specialization
 * @c kreutzer1986 was suggested in:
 *
 * @blockquote
 * "System Simulation: Programming Styles and Languages (International
 * Computer Science Series)", Wolfgang Kreutzer, Addison-Wesley, December 1986.
 * @endblockquote
 ','line_number':237,'multiline':True]
['text':'*
 * The specialization @c knuth_b is specified by the C++ standard.
 * It is described in
 *
 * @blockquote
 * "The Art of Computer Programming, Second Edition, Volume 2,
 * Seminumerical Algorithms", Donald Knuth, Addison-Wesley, 1981.
 * @endblockquote
 ','line_number':250,'multiline':True]
['text':' namespace random','line_number':261,'multiline':False]
['text':' namespace boost','line_number':265,'multiline':False]
['text':' BOOST_RANDOM_SHUFFLE_OUTPUT_HPP','line_number':269,'multiline':False]
