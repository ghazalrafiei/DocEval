['text':' boost random/poisson_distribution.hpp header file
 *
 * Copyright Jens Maurer 2002
 * Copyright Steven Watanabe 2010
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 ','line_number':1,'multiline':True]
['text':'*
 * An instantiation of the class template @c poisson_distribution is a
 * model of \random_distribution.  The poisson distribution has
 * \f$p(i) = \frac{e^{-\lambda}\lambda^i}{i!}\f$
 *
 * This implementation is based on the PTRD algorithm described
 * 
 *  @blockquote
 *  "The transformed rejection method for generating Poisson random variables",
 *  Wolfgang Hormann, Insurance: Mathematics and Economics
 *  Volume 12, Issue 1, February 1993, Pages 39-45
 *  @endblockquote
 ','line_number':54,'multiline':True]
['text':'*
         * Construct a param_type object with the parameter "mean"
         *
         * Requires: mean > 0
         ','line_number':76,'multiline':True]
['text':' Returns the "mean" parameter of the distribution. ','line_number':86,'multiline':True]
['text':'* Writes the parameters of the distribution to a @c std::ostream. ','line_number':89,'multiline':True]
['text':'* Reads the parameters of the distribution from a @c std::istream. ','line_number':99,'multiline':True]
['text':'* Returns true if the parameters have the same values. ','line_number':108,'multiline':True]
['text':'* Returns true if the parameters have different values. ','line_number':113,'multiline':True]
['text':'*
     * Constructs a @c poisson_distribution with the parameter @c mean.
     *
     * Requires: mean > 0
     ','line_number':122,'multiline':True]
['text':'*
     * Construct an @c poisson_distribution object from the
     * parameters.
     ','line_number':134,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the
     * poisson distribution.
     ','line_number':144,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the
     * poisson distribution with parameters specified by param.
     ','line_number':158,'multiline':True]
['text':'* Returns the "mean" parameter of the distribution. ','line_number':168,'multiline':True]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':171,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':173,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':177,'multiline':True]
['text':'* Sets parameters of the distribution. ','line_number':179,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':186,'multiline':True]
['text':'* Writes the parameters of the distribution to a @c std::ostream. ','line_number':193,'multiline':True]
['text':'* Reads the parameters of the distribution from a @c std::istream. ','line_number':203,'multiline':True]
['text':'* Returns true if the two distributions will produce the same
        sequence of values, given equal generators. ','line_number':213,'multiline':True]
['text':'* Returns true if the two distributions could produce different
        sequences of values, given equal generators. ','line_number':220,'multiline':True]
['text':'/ @cond show_private','line_number':230,'multiline':False]
['text':' for ptrd','line_number':337,'multiline':False]
['text':' for inversion','line_number':345,'multiline':False]
['text':'/ @endcond','line_number':349,'multiline':False]
['text':' namespace random','line_number':352,'multiline':False]
['text':' namespace boost','line_number':356,'multiline':False]
['text':' BOOST_RANDOM_POISSON_DISTRIBUTION_HPP','line_number':360,'multiline':False]
