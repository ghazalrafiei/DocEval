['text':' boost random/additive_combine.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]
['text':' for std::min and std::max','line_number':21,'multiline':False]
['text':'*
 * An instantiation of class template @c additive_combine_engine models a
 * \pseudo_random_number_generator. It combines two multiplicative
 * \linear_congruential_engine number generators, i.e. those with @c c = 0.
 * It is described in
 *
 *  @blockquote
 *  "Efficient and Portable Combined Random Number Generators", Pierre L'Ecuyer,
 *  Communications of the ACM, Vol. 31, No. 6, June 1988, pp. 742-749, 774
 *  @endblockquote
 *
 * The template parameters MLCG1 and MLCG2 shall denote two different
 * \linear_congruential_engine number generators, each with c = 0. Each
 * invocation returns a random number
 * X(n) := (MLCG1(n) - MLCG2(n)) mod (m1 - 1),
 * where m1 denotes the modulus of MLCG1. 
 ','line_number':32,'multiline':True]
['text':' Required by old Boost.Random concept','line_number':57,'multiline':False]
['text':'*
     * Returns the smallest value that the generator can produce
     ','line_number':59,'multiline':True]
['text':'*
     * Returns the largest value that the generator can produce
     ','line_number':64,'multiline':True]
['text':'*
     * Constructs an @c additive_combine_engine using the
     * default constructors of the two base generators.
     ','line_number':70,'multiline':True]
['text':'*
     * Constructs an @c additive_combine_engine, using seed as
     * the constructor argument for both base generators.
     ','line_number':75,'multiline':True]
['text':'*
     * Constructs an @c additive_combine_engine, using seq as
     * the constructor argument for both base generators.
     *
     * @xmlwarning
     * The semantics of this function are liable to change.
     * A @c seed_seq is designed to generate all the seeds
     * in one shot, but this seeds the two base engines
     * independantly and probably ends up giving the same
     * sequence to both.
     * @endxmlwarning
     ','line_number':85,'multiline':True]
['text':'*
     * Constructs an @c additive_combine_engine, using
     * @c seed1 and @c seed2 as the constructor argument to
     * the first and second base generators, respectively.
     ','line_number':103,'multiline':True]
['text':'*
     * Contructs an @c additive_combine_engine with
     * values from the range defined by the input iterators first
     * and last.  first will be modified to point to the element
     * after the last one used.
     *
     * Throws: @c std::invalid_argument if the input range is too small.
     *
     * Exception Safety: Basic
     ','line_number':111,'multiline':True]
['text':'*
     * Seeds an @c additive_combine_engine using the default
     * seeds of the two base generators.
     ','line_number':124,'multiline':True]
['text':'*
     * Seeds an @c additive_combine_engine, using @c seed as the
     * seed for both base generators.
     ','line_number':134,'multiline':True]
['text':'*
     * Seeds an @c additive_combine_engine, using @c seq to
     * seed both base generators.
     *
     * See the warning on the corresponding constructor.
     ','line_number':145,'multiline':True]
['text':'*
     * Seeds an @c additive_combine generator, using @c seed1 and @c seed2 as
     * the seeds to the first and second base generators, respectively.
     ','line_number':158,'multiline':True]
['text':'*
     * Seeds an @c additive_combine_engine with
     * values from the range defined by the input iterators first
     * and last.  first will be modified to point to the element
     * after the last one used.
     *
     * Throws: @c std::invalid_argument if the input range is too small.
     *
     * Exception Safety: Basic
     ','line_number':169,'multiline':True]
['text':'* Returns the next value of the generator. ','line_number':185,'multiline':True]
['text':'* Fills a range with random values ','line_number':193,'multiline':True]
['text':'* Advances the state of the generator by @c z. ','line_number':198,'multiline':True]
['text':'*
     * Writes the state of an @c additive_combine_engine to a @c
     * std::ostream.  The textual representation of an @c
     * additive_combine_engine is the textual representation of
     * the first base generator followed by the textual representation
     * of the second base generator.
     ','line_number':205,'multiline':True]
['text':'*
     * Reads the state of an @c additive_combine_engine from a
     * @c std::istream.
     ','line_number':215,'multiline':True]
['text':'*
     * Returns: true iff the two @c additive_combine_engines will
     * produce the same sequence of values.
     ','line_number':222,'multiline':True]
['text':'*
     * Returns: true iff the two @c additive_combine_engines will
     * produce different sequences of values.
     ','line_number':228,'multiline':True]
['text':'/ \cond show_deprecated','line_number':244,'multiline':False]
['text':'* Provided for backwards compatibility. ','line_number':246,'multiline':True]
['text':'/ \endcond','line_number':262,'multiline':False]
['text':'*
 * The specialization \ecuyer1988 was suggested in
 *
 *  @blockquote
 *  "Efficient and Portable Combined Random Number Generators", Pierre L'Ecuyer,
 *  Communications of the ACM, Vol. 31, No. 6, June 1988, pp. 742-749, 774
 *  @endblockquote
 ','line_number':264,'multiline':True]
['text':' namespace random','line_number':277,'multiline':False]
['text':' namespace boost','line_number':281,'multiline':False]
['text':' BOOST_RANDOM_ADDITIVE_COMBINE_HPP','line_number':283,'multiline':False]
