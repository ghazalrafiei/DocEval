['text':' boost random/uniform_int_distribution.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Copyright Steven Watanabe 2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-04-08  added min<max assertion (N. Becker)
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]
['text':' disable division by zero warning, since we can't','line_number':44,'multiline':False]
['text':' actually divide by zero.','line_number':45,'multiline':False]
['text':'* is_integral<Engine::result_type> ','line_number':52,'multiline':True]
['text':' ranges are always unsigned or unbounded','line_number':57,'multiline':False]
['text':' this will probably never happen in real life','line_number':67,'multiline':False]
['text':' basically nothing to do; just take care we don't overflow / underflow','line_number':68,'multiline':False]
['text':' use rejection method to handle things like 0..3 --> 0..4','line_number':72,'multiline':False]
['text':' concatenate several invocations of the base RNG','line_number':74,'multiline':False]
['text':' take extra care to avoid overflows','line_number':75,'multiline':False]
['text':'  limit == floor((range+1)/(brange+1))','line_number':77,'multiline':False]
['text':'  Therefore limit*(brange+1) <= range+1','line_number':78,'multiline':False]
['text':' We consider "result" as expressed to base (brange+1):','line_number':88,'multiline':False]
['text':' For every power of (brange+1), we determine a random factor','line_number':89,'multiline':False]
['text':' loop invariants:','line_number':93,'multiline':False]
['text':'  result < mult','line_number':94,'multiline':False]
['text':'  mult <= range','line_number':95,'multiline':False]
['text':' Postcondition: result <= range, thus no overflow','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':' limit*(brange+1)<=range+1                   def. of limit       (1)','line_number':99,'multiline':False]
['text':' eng()-bmin<=brange                          eng() post.         (2)','line_number':100,'multiline':False]
['text':' and mult<=limit.                            loop condition      (3)','line_number':101,'multiline':False]
['text':' Therefore mult*(eng()-bmin+1)<=range+1      by (1),(2),(3)      (4)','line_number':102,'multiline':False]
['text':' Therefore mult*(eng()-bmin)+mult<=range+1   rearranging (4)     (5)','line_number':103,'multiline':False]
['text':' result<mult                                 loop invariant      (6)','line_number':104,'multiline':False]
['text':' Therefore result+mult*(eng()-bmin)<range+1  by (5), (6)         (7)','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':' Postcondition: result < mult*(brange+1)','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' result<mult                                 loop invariant      (1)','line_number':109,'multiline':False]
['text':' eng()-bmin<=brange                          eng() post.         (2)','line_number':110,'multiline':False]
['text':' Therefore result+mult*(eng()-bmin) <','line_number':111,'multiline':False]
['text':'           mult+mult*(eng()-bmin)            by (1)              (3)','line_number':112,'multiline':False]
['text':' Therefore result+(eng()-bmin)*mult <','line_number':113,'multiline':False]
['text':'           mult+mult*brange                  by (2), (3)         (4)','line_number':114,'multiline':False]
['text':' Therefore result+(eng()-bmin)*mult <','line_number':115,'multiline':False]
['text':'           mult*(brange+1)                   by (4)','line_number':116,'multiline':False]
['text':' equivalent to (mult * (brange+1)) == range+1, but avoids overflow.','line_number':119,'multiline':False]
['text':' The destination range is an integer power of','line_number':121,'multiline':False]
['text':' the generator's range.','line_number':122,'multiline':False]
['text':' Postcondition: mult <= range','line_number':126,'multiline':False]
['text':' ','line_number':127,'multiline':False]
['text':' limit*(brange+1)<=range+1                   def. of limit       (1)','line_number':128,'multiline':False]
['text':' mult<=limit                                 loop condition      (2)','line_number':129,'multiline':False]
['text':' Therefore mult*(brange+1)<=range+1          by (1), (2)         (3)','line_number':130,'multiline':False]
['text':' mult*(brange+1)!=range+1                    preceding if        (4)','line_number':131,'multiline':False]
['text':' Therefore mult*(brange+1)<range+1           by (3), (4)         (5)','line_number':132,'multiline':False]
['text':' ','line_number':133,'multiline':False]
['text':' Postcondition: result < mult','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' See the second postcondition on the change to result. ','line_number':136,'multiline':False]
['text':' loop postcondition: range/mult < brange+1','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' mult > limit                                  loop condition      (1)','line_number':141,'multiline':False]
['text':' Suppose range/mult >= brange+1                Assumption          (2)','line_number':142,'multiline':False]
['text':' range >= mult*(brange+1)                      by (2)              (3)','line_number':143,'multiline':False]
['text':' range+1 > mult*(brange+1)                     by (3)              (4)','line_number':144,'multiline':False]
['text':' range+1 > (limit+1)*(brange+1)                by (1), (4)         (5)','line_number':145,'multiline':False]
['text':' (range+1)/(brange+1) > limit+1                by (5)              (6)','line_number':146,'multiline':False]
['text':' limit < floor((range+1)/(brange+1))           by (6)              (7)','line_number':147,'multiline':False]
['text':' limit==floor((range+1)/(brange+1))            def. of limit       (8)','line_number':148,'multiline':False]
['text':' not (2)                                       reductio            (9)','line_number':149,'multiline':False]
['text':'','line_number':150,'multiline':False]
['text':' loop postcondition: (range/mult)*mult+(mult-1) >= range','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':' (range/mult)*mult + range%mult == range       identity            (1)','line_number':153,'multiline':False]
['text':' range%mult < mult                             def. of %           (2)','line_number':154,'multiline':False]
['text':' (range/mult)*mult+mult > range                by (1), (2)         (3)','line_number':155,'multiline':False]
['text':' (range/mult)*mult+(mult-1) >= range           by (3)              (4)','line_number':156,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':' Note that the maximum value of result at this point is (mult-1),','line_number':158,'multiline':False]
['text':' so after this final step, we generate numbers that can be','line_number':159,'multiline':False]
['text':' at least as large as range.  We have to really careful to avoid','line_number':160,'multiline':False]
['text':' overflow in this final addition and in the rejection.  Anything','line_number':161,'multiline':False]
['text':' that overflows is larger than range and can thus be rejected.','line_number':162,'multiline':False]
['text':' range/mult < brange+1  -> no endless loop','line_number':164,'multiline':False]
['text':' The multiplcation would overflow.  Reject immediately.','line_number':172,'multiline':False]
['text':' unsigned integers are guaranteed to wrap on overflow.','line_number':176,'multiline':False]
['text':' The addition overflowed.  Reject.','line_number':179,'multiline':False]
['text':' Too big.  Reject.','line_number':183,'multiline':False]
['text':' brange > range','line_number':188,'multiline':False]
['text':' it's safe to add 1 to range, as long as we cast it first,','line_number':199,'multiline':False]
['text':' because we know that it is less than brange.  However,','line_number':200,'multiline':False]
['text':' we do need to be careful not to cause overflow by adding 1','line_number':201,'multiline':False]
['text':' to brange.  We use mixed_range_type throughout for mixed','line_number':202,'multiline':False]
['text':' arithmetic between base_unsigned and range_type - in the case','line_number':203,'multiline':False]
['text':' that range_type has more bits than base_unsigned it is always','line_number':204,'multiline':False]
['text':' safe to use range_type for this albeit it may be more effient','line_number':205,'multiline':False]
['text':' to use base_unsigned.  The latter is a narrowing conversion though','line_number':206,'multiline':False]
['text':' which may be disallowed if range_type is a multiprecision type','line_number':207,'multiline':False]
['text':' and there are no explicit converison operators.','line_number':208,'multiline':False]
['text':' result and range are non-negative, and result is possibly larger','line_number':222,'multiline':False]
['text':' than range, so the cast is safe','line_number':223,'multiline':False]
['text':'* is_integral<Engine::result_type> ','line_number':237,'multiline':True]
['text':'*
 * The class template uniform_int_distribution models a \random_distribution.
 * On each invocation, it returns a random integer value uniformly
 * distributed in the set of integers {min, min+1, min+2, ..., max}.
 *
 * The template parameter IntType shall denote an integer-like value type.
 ','line_number':253,'multiline':True]
['text':'*
         * Constructs the parameters of a uniform_int_distribution.
         *
         * Requires min <= max
         ','line_number':273,'multiline':True]
['text':'* Returns the minimum value of the distribution. ','line_number':286,'multiline':True]
['text':'* Returns the maximum value of the distribution. ','line_number':288,'multiline':True]
['text':'* Writes the parameters to a @c std::ostream. ','line_number':291,'multiline':True]
['text':'* Reads the parameters from a @c std::istream. ','line_number':298,'multiline':True]
['text':'* Returns true if the two sets of parameters are equal. ','line_number':313,'multiline':True]
['text':'* Returns true if the two sets of parameters are different. ','line_number':317,'multiline':True]
['text':'*
     * Constructs a uniform_int_distribution. @c min and @c max are
     * the parameters of the distribution.
     *
     * Requires: min <= max
     ','line_number':326,'multiline':True]
['text':'* Constructs a uniform_int_distribution from its parameters. ','line_number':339,'multiline':True]
['text':'*  Returns the minimum value of the distribution ','line_number':343,'multiline':True]
['text':'*  Returns the maximum value of the distribution ','line_number':345,'multiline':True]
['text':'*  Returns the minimum value of the distribution ','line_number':348,'multiline':True]
['text':'*  Returns the maximum value of the distribution ','line_number':350,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':353,'multiline':True]
['text':'* Sets the parameters of the distribution. ','line_number':355,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':362,'multiline':True]
['text':'* Returns an integer uniformly distributed in the range [min, max]. ','line_number':368,'multiline':True]
['text':'*
     * Returns an integer uniformly distributed in the range
     * [param.a(), param.b()].
     ','line_number':373,'multiline':True]
['text':'* Writes the distribution to a @c std::ostream. ','line_number':381,'multiline':True]
['text':'* Reads the distribution from a @c std::istream. ','line_number':388,'multiline':True]
['text':'*
     * Returns true if the two distributions will produce identical sequences
     * of values given equal generators.
     ','line_number':398,'multiline':True]
['text':'*
     * Returns true if the two distributions may produce different sequences
     * of values given equal generators.
     ','line_number':405,'multiline':True]
['text':' namespace random','line_number':416,'multiline':False]
['text':' namespace boost','line_number':417,'multiline':False]
['text':' BOOST_RANDOM_UNIFORM_INT_HPP','line_number':419,'multiline':False]
