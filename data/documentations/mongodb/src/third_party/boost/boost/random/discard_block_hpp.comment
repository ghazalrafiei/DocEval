['text':' boost random/discard_block.hpp header file
 *
 * Copyright Jens Maurer 2002
 * Copyright Steven Watanabe 2010
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-03-02  created
 ','line_number':1,'multiline':True]
['text':'*
 * The class template \discard_block_engine is a model of
 * \pseudo_random_number_generator.  It modifies
 * another generator by discarding parts of its output.
 * Out of every block of @c p results, the first @c r
 * will be returned and the rest discarded.
 *
 * Requires: 0 < p <= r
 ','line_number':33,'multiline':True]
['text':'* Uses the default seed for the base generator. ','line_number':60,'multiline':True]
['text':'* Constructs a new \discard_block_engine with a copy of rng. ','line_number':62,'multiline':True]
['text':'* Constructs a new \discard_block_engine with rng. ','line_number':66,'multiline':True]
['text':'*
     * Creates a new \discard_block_engine and seeds the underlying
     * generator with @c value
     ','line_number':70,'multiline':True]
['text':'*
     * Creates a new \discard_block_engine and seeds the underlying
     * generator with @c seq
     ','line_number':78,'multiline':True]
['text':'*
     * Creates a new \discard_block_engine and seeds the underlying
     * generator with first and last.
     ','line_number':85,'multiline':True]
['text':'* default seeds the underlying generator. ','line_number':92,'multiline':True]
['text':'* Seeds the underlying generator with s. ','line_number':94,'multiline':True]
['text':'* Seeds the underlying generator with seq. ','line_number':97,'multiline':True]
['text':'* Seeds the underlying generator with first and last. ','line_number':100,'multiline':True]
['text':'* Returns the underlying engine. ','line_number':104,'multiline':True]
['text':'* Returns the next value of the generator. ','line_number':107,'multiline':True]
['text':' discard values of random number generator','line_number':111,'multiline':False]
['text':' Don't use discard, since we still need to','line_number':112,'multiline':False]
['text':' be somewhat compatible with TR1.','line_number':113,'multiline':False]
['text':' _rng.discard(total_block - _n);','line_number':114,'multiline':False]
['text':'*
     * Returns the smallest value that the generator can produce.
     * This is the same as the minimum of the underlying generator.
     ','line_number':135,'multiline':True]
['text':'*
     * Returns the largest value that the generator can produce.
     * This is the same as the maximum of the underlying generator.
     ','line_number':141,'multiline':True]
['text':'* Writes a \discard_block_engine to a @c std::ostream. ','line_number':149,'multiline':True]
['text':'* Reads a \discard_block_engine from a @c std::istream. ','line_number':159,'multiline':True]
['text':'* Returns true if the two generators will produce identical sequences. ','line_number':169,'multiline':True]
['text':'* Returns true if the two generators will produce different sequences. ','line_number':173,'multiline':True]
['text':'  A definition is required even for integral static constants','line_number':184,'multiline':False]
['text':'/ \cond \show_deprecated','line_number':197,'multiline':False]
['text':'/ \endcond','line_number':218,'multiline':False]
['text':' namespace random','line_number':237,'multiline':False]
['text':' namespace boost','line_number':239,'multiline':False]
['text':' BOOST_RANDOM_DISCARD_BLOCK_HPP','line_number':241,'multiline':False]
