['text':' boost random/piecewise_linear_distribution.hpp header file
 *
 * Copyright Steven Watanabe 2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 ','line_number':1,'multiline':True]
['text':'*
 * The class @c piecewise_linear_distribution models a \random_distribution.
 ','line_number':37,'multiline':True]
['text':'*
         * Constructs a @c param_type object, representing a distribution
         * that produces values uniformly distributed in the range [0, 1).
         ','line_number':51,'multiline':True]
['text':'*
         * Constructs a @c param_type object from two iterator ranges
         * containing the interval boundaries and weights at the boundaries.
         * If there are fewer than two boundaries, then this is equivalent to
         * the default constructor and the distribution will produce values
         * uniformly distributed in the range [0, 1).
         *
         * The values of the interval boundaries must be strictly
         * increasing, and the number of weights must be the same as
         * the number of interval boundaries.  If there are extra
         * weights, they are ignored.
         ','line_number':62,'multiline':True]
['text':'*
         * Constructs a @c param_type object from an initializer_list
         * containing the interval boundaries and a unary function
         * specifying the weights at the boundaries.  Each weight is
         * determined by calling the function at the corresponding point.
         *
         * If the initializer_list contains fewer than two elements,
         * this is equivalent to the default constructor and the
         * distribution will produce values uniformly distributed
         * in the range [0, 1).
         ','line_number':93,'multiline':True]
['text':'*
         * Constructs a @c param_type object from Boost.Range ranges holding
         * the interval boundaries and the weights at the boundaries.  If
         * there are fewer than two interval boundaries, this is equivalent
         * to the default constructor and the distribution will produce
         * values uniformly distributed in the range [0, 1).  The
         * number of weights must be equal to the number of
         * interval boundaries.
         ','line_number':125,'multiline':True]
['text':'*
         * Constructs the parameters for a distribution that approximates a
         * function.  The range of the distribution is [xmin, xmax).  This
         * range is divided into nw equally sized intervals and the weights
         * are found by calling the unary function f on the boundaries of the
         * intervals.
         ','line_number':150,'multiline':True]
['text':'*  Returns a vector containing the interval boundaries. ','line_number':171,'multiline':True]
['text':'*
         * Returns a vector containing the probability densities
         * at all the interval boundaries.
         ','line_number':174,'multiline':True]
['text':'* Writes the parameters to a @c std::ostream. ','line_number':196,'multiline':True]
['text':'* Reads the parameters from a @c std::istream. ','line_number':204,'multiline':True]
['text':'* Returns true if the two sets of parameters are the same. ','line_number':218,'multiline':True]
['text':'* Returns true if the two sets of parameters are different. ','line_number':224,'multiline':True]
['text':'*
     * Creates a new @c piecewise_linear_distribution that
     * produces values uniformly distributed in the range [0, 1).
     ','line_number':234,'multiline':True]
['text':'*
     * Constructs a piecewise_linear_distribution from two iterator ranges
     * containing the interval boundaries and the weights at the boundaries.
     * If there are fewer than two boundaries, then this is equivalent to
     * the default constructor and creates a distribution that
     * produces values uniformly distributed in the range [0, 1).
     *
     * The values of the interval boundaries must be strictly
     * increasing, and the number of weights must be equal to
     * the number of interval boundaries.  If there are extra
     * weights, they are ignored.
     *
     * For example,
     *
     * @code
     * double intervals[] = { 0.0, 1.0, 2.0 };
     * double weights[] = { 0.0, 1.0, 0.0 };
     * piecewise_constant_distribution<> dist(
     *     &intervals[0], &intervals[0] + 3, &weights[0]);
     * @endcode
     *
     * produces a triangle distribution.
     ','line_number':242,'multiline':True]
['text':'*
     * Constructs a piecewise_linear_distribution from an
     * initializer_list containing the interval boundaries
     * and a unary function specifying the weights.  Each
     * weight is determined by calling the function at the
     * corresponding interval boundary.
     *
     * If the initializer_list contains fewer than two elements,
     * this is equivalent to the default constructor and the
     * distribution will produce values uniformly distributed
     * in the range [0, 1).
     ','line_number':282,'multiline':True]
['text':'*
     * Constructs a piecewise_linear_distribution from Boost.Range
     * ranges holding the interval boundaries and the weights.  If
     * there are fewer than two interval boundaries, this is equivalent
     * to the default constructor and the distribution will produce
     * values uniformly distributed in the range [0, 1).  The
     * number of weights must be equal to the number of
     * interval boundaries.
     ','line_number':312,'multiline':True]
['text':'*
     * Constructs a piecewise_linear_distribution that approximates a
     * function.  The range of the distribution is [xmin, xmax).  This
     * range is divided into nw equally sized intervals and the weights
     * are found by calling the unary function f on the interval boundaries.
     ','line_number':333,'multiline':True]
['text':'*
     * Constructs a piecewise_linear_distribution from its parameters.
     ','line_number':357,'multiline':True]
['text':'*
     * Returns a value distributed according to the parameters of the
     * piecewise_linear_distribution.
     ','line_number':367,'multiline':True]
['text':'*
     * Returns a value distributed according to the parameters
     * specified by param.
     ','line_number':387,'multiline':True]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':397,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':400,'multiline':True]
['text':'*
     * Returns a vector containing the probability densities
     * at the interval boundaries.
     ','line_number':404,'multiline':True]
['text':'*  Returns a vector containing the interval boundaries. ','line_number':425,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':428,'multiline':True]
['text':'* Sets the parameters of the distribution. ','line_number':433,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':443,'multiline':True]
['text':'* Writes a distribution to a @c std::ostream. ','line_number':449,'multiline':True]
['text':'* Reads a distribution from a @c std::istream ','line_number':457,'multiline':True]
['text':'*
     * Returns true if the two distributions will return the
     * same sequence of values, when passed equal generators.
     ','line_number':468,'multiline':True]
['text':'*
     * Returns true if the two distributions may return different
     * sequences of values, when passed equal generators.
     ','line_number':477,'multiline':True]
['text':'/ @cond \show_private','line_number':485,'multiline':False]
['text':'/ @endcond','line_number':525,'multiline':False]
