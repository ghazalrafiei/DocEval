['text':' boost random/normal_distribution.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Copyright Steven Watanabe 2010-2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]
['text':' tables for the ziggurat algorithm','line_number':37,'multiline':False]
['text':' These store the value y - bound, or something proportional to that difference:','line_number':138,'multiline':False]
['text':' There are three cases to consider:','line_number':141,'multiline':False]
['text':' - convex regions (where x[i] > x[j] >= 1)','line_number':142,'multiline':False]
['text':' - concave regions (where 1 <= x[i] < x[j])','line_number':143,'multiline':False]
['text':' - region containing the inflection point (where x[i] > 1 > x[j])','line_number':144,'multiline':False]
['text':' For convex (concave), exp^(-x^2/2) is bounded below (above) by the tangent at','line_number':145,'multiline':False]
['text':' (x[i],y[i]) and is bounded above (below) by the diagonal line from (x[i+1],y[i+1]) to','line_number':146,'multiline':False]
['text':' (x[i],y[i]).','line_number':147,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' *If* the inflection point region satisfies slope(x[i+1]) < slope(diagonal), then we','line_number':149,'multiline':False]
['text':' can treat the inflection region as a convex region: this condition is necessary and','line_number':150,'multiline':False]
['text':' sufficient to ensure that the curve lies entirely below the diagonal (that, in turn,','line_number':151,'multiline':False]
['text':' also implies that it will be above the tangent at x[i]).','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':' For the current table size (128), this is satisfied: slope(x[i+1]) = -0.60653 <','line_number':154,'multiline':False]
['text':' slope(diag) = -0.60649, and so we have only two cases below instead of three.','line_number':155,'multiline':False]
['text':' convex (incl. inflection)','line_number':157,'multiline':False]
['text':' concave','line_number':161,'multiline':False]
['text':' if above the upper bound reject immediately','line_number':166,'multiline':False]
['text':' If below the lower bound accept immediately','line_number':169,'multiline':False]
['text':' Otherwise it's between the bounds and we need a full check','line_number':171,'multiline':False]
['text':' Generate from the tail using rejection sampling from the exponential(x_1) distribution,','line_number':182,'multiline':False]
['text':' shifted by x_1.  This looks a little different from the usual rejection sampling because it','line_number':183,'multiline':False]
['text':' transforms the condition by taking the log of both sides, thus avoiding the costly exp() call','line_number':184,'multiline':False]
['text':' on the RHS, then takes advantage of the fact that -log(unif01) is simply generating an','line_number':185,'multiline':False]
['text':' exponential (by inverse cdf sampling) by replacing the log(unif01) on the LHS with a','line_number':186,'multiline':False]
['text':' exponential(1) draw, y.','line_number':187,'multiline':False]
['text':' If we were doing non-transformed rejection sampling, this condition would be:','line_number':196,'multiline':False]
['text':' if (unif01 < exp(-.5*x*x)) return x + tail_start;','line_number':197,'multiline':False]
['text':' namespace detail','line_number':203,'multiline':False]
['text':'*
 * Instantiations of class template normal_distribution model a
 * \random_distribution. Such a distribution produces random numbers
 * @c x distributed with probability density function
 * \f$\displaystyle p(x) =
 *   \frac{1}{\sqrt{2\pi}\sigma} e^{-\frac{(x-\mu)^2}{2\sigma^2}}
 * \f$,
 * where mean and sigma are the parameters of the distribution.
 *
 * The implementation uses the "ziggurat" algorithm, as described in
 *
 *  @blockquote
 *  "The Ziggurat Method for Generating Random Variables",
 *  George Marsaglia and Wai Wan Tsang, Journal of Statistical Software,
 *  Volume 5, Number 8 (2000), 1-7.
 *  @endblockquote
 ','line_number':206,'multiline':True]
['text':'*
         * Constructs a @c param_type with a given mean and
         * standard deviation.
         *
         * Requires: sigma >= 0
         ','line_number':234,'multiline':True]
['text':'* Returns the mean of the distribution. ','line_number':246,'multiline':True]
['text':'* Returns the standand deviation of the distribution. ','line_number':249,'multiline':True]
['text':'* Writes a @c param_type to a @c std::ostream. ','line_number':252,'multiline':True]
['text':'* Reads a @c param_type from a @c std::istream. ','line_number':256,'multiline':True]
['text':'* Returns true if the two sets of parameters are the same. ','line_number':260,'multiline':True]
['text':'* Returns true if the two sets of parameters are the different. ','line_number':264,'multiline':True]
['text':'*
     * Constructs a @c normal_distribution object. @c mean and @c sigma are
     * the parameters for the distribution.
     *
     * Requires: sigma >= 0
     ','line_number':272,'multiline':True]
['text':'*
     * Constructs a @c normal_distribution object from its parameters.
     ','line_number':285,'multiline':True]
['text':'*  Returns the mean of the distribution. ','line_number':292,'multiline':True]
['text':'* Returns the standard deviation of the distribution. ','line_number':294,'multiline':True]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':297,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':300,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':304,'multiline':True]
['text':'* Sets the parameters of the distribution. ','line_number':306,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':313,'multiline':True]
['text':'*  Returns a normal variate. ','line_number':319,'multiline':True]
['text':'* Returns a normal variate with parameters specified by @c param. ','line_number':327,'multiline':True]
['text':'* Writes a @c normal_distribution to a @c std::ostream. ','line_number':334,'multiline':True]
['text':'* Reads a @c normal_distribution from a @c std::istream. ','line_number':341,'multiline':True]
['text':'*
     * Returns true if the two instances of @c normal_distribution will
     * return identical sequences of values given equal generators.
     ','line_number':348,'multiline':True]
['text':'*
     * Returns true if the two instances of @c normal_distribution will
     * return different sequences of values given equal generators.
     ','line_number':357,'multiline':True]
['text':' namespace random','line_number':368,'multiline':False]
['text':' namespace boost','line_number':372,'multiline':False]
['text':' BOOST_RANDOM_NORMAL_DISTRIBUTION_HPP','line_number':374,'multiline':False]
