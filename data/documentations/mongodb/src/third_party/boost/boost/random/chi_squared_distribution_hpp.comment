['text':' boost random/chi_squared_distribution.hpp header file
 *
 * Copyright Steven Watanabe 2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 ','line_number':1,'multiline':True]
['text':'*
 * The chi squared distribution is a real valued distribution with
 * one parameter, @c n.  The distribution produces values > 0.
 *
 * The distribution function is
 * \f$\displaystyle P(x) = \frac{x^{(n/2)-1}e^{-x/2}}{\Gamma(n/2)2^{n/2}}\f$.
 ','line_number':25,'multiline':True]
['text':'*
         * Construct a param_type object.  @c n
         * is the parameter of the distribution.
         *
         * Requires: t >=0 && 0 <= p <= 1
         ','line_number':41,'multiline':True]
['text':'* Returns the @c n parameter of the distribution. ','line_number':50,'multiline':True]
['text':'* Writes the parameters of the distribution to a @c std::ostream. ','line_number':53,'multiline':True]
['text':'* Reads the parameters of the distribution from a @c std::istream. ','line_number':63,'multiline':True]
['text':'* Returns true if the parameters have the same values. ','line_number':72,'multiline':True]
['text':'* Returns true if the parameters have different values. ','line_number':77,'multiline':True]
['text':'*
     * Construct a @c chi_squared_distribution object. @c n
     * is the parameter of the distribution.
     *
     * Requires: t >=0 && 0 <= p <= 1
     ','line_number':86,'multiline':True]
['text':'*
     * Construct an @c chi_squared_distribution object from the
     * parameters.
     ','line_number':97,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the
     * chi squared distribution.
     ','line_number':106,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the
     * chi squared distribution with parameters specified by @c param.
     ','line_number':116,'multiline':True]
['text':'* Returns the @c n parameter of the distribution. ','line_number':126,'multiline':True]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':129,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':131,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':135,'multiline':True]
['text':'* Sets parameters of the distribution. ','line_number':137,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':145,'multiline':True]
['text':'* Writes the parameters of the distribution to a @c std::ostream. ','line_number':152,'multiline':True]
['text':'* Reads the parameters of the distribution from a @c std::istream. ','line_number':162,'multiline':True]
['text':'* Returns true if the two distributions will produce the same
        sequence of values, given equal generators. ','line_number':173,'multiline':True]
['text':'* Returns true if the two distributions could produce different
        sequences of values, given equal generators. ','line_number':180,'multiline':True]
['text':'/ @cond show_private','line_number':190,'multiline':False]
['text':'/ @endcond','line_number':202,'multiline':False]
