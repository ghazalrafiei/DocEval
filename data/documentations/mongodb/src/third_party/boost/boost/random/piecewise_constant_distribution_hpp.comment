['text':' boost random/piecewise_constant_distribution.hpp header file
 *
 * Copyright Steven Watanabe 2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 ','line_number':1,'multiline':True]
['text':'*
 * The class @c piecewise_constant_distribution models a \random_distribution.
 ','line_number':35,'multiline':True]
['text':'*
         * Constructs a @c param_type object, representing a distribution
         * that produces values uniformly distributed in the range [0, 1).
         ','line_number':49,'multiline':True]
['text':'*
         * Constructs a @c param_type object from two iterator ranges
         * containing the interval boundaries and the interval weights.
         * If there are less than two boundaries, then this is equivalent to
         * the default constructor and creates a single interval, [0, 1).
         *
         * The values of the interval boundaries must be strictly
         * increasing, and the number of weights must be one less than
         * the number of interval boundaries.  If there are extra
         * weights, they are ignored.
         ','line_number':59,'multiline':True]
['text':'*
         * Constructs a @c param_type object from an
         * initializer_list containing the interval boundaries
         * and a unary function specifying the weights.  Each
         * weight is determined by calling the function at the
         * midpoint of the corresponding interval.
         *
         * If the initializer_list contains less than two elements,
         * this is equivalent to the default constructor and the
         * distribution will produce values uniformly distributed
         * in the range [0, 1).
         ','line_number':88,'multiline':True]
['text':'*
         * Constructs a @c param_type object from Boost.Range
         * ranges holding the interval boundaries and the weights.  If
         * there are less than two interval boundaries, this is equivalent
         * to the default constructor and the distribution will produce
         * values uniformly distributed in the range [0, 1).  The
         * number of weights must be one less than the number of
         * interval boundaries.
         ','line_number':118,'multiline':True]
['text':'*
         * Constructs the parameters for a distribution that approximates a
         * function.  The range of the distribution is [xmin, xmax).  This
         * range is divided into nw equally sized intervals and the weights
         * are found by calling the unary function f on the midpoints of the
         * intervals.
         ','line_number':141,'multiline':True]
['text':'*  Returns a vector containing the interval boundaries. ','line_number':161,'multiline':True]
['text':'*
         * Returns a vector containing the probability densities
         * over all the intervals of the distribution.
         ','line_number':164,'multiline':True]
['text':'* Writes the parameters to a @c std::ostream. ','line_number':181,'multiline':True]
['text':'* Reads the parameters from a @c std::istream. ','line_number':189,'multiline':True]
['text':'* Returns true if the two sets of parameters are the same. ','line_number':203,'multiline':True]
['text':'* Returns true if the two sets of parameters are different. ','line_number':209,'multiline':True]
['text':'*
     * Creates a new @c piecewise_constant_distribution with
     * a single interval, [0, 1).
     ','line_number':220,'multiline':True]
['text':'*
     * Constructs a piecewise_constant_distribution from two iterator ranges
     * containing the interval boundaries and the interval weights.
     * If there are less than two boundaries, then this is equivalent to
     * the default constructor and creates a single interval, [0, 1).
     *
     * The values of the interval boundaries must be strictly
     * increasing, and the number of weights must be one less than
     * the number of interval boundaries.  If there are extra
     * weights, they are ignored.
     *
     * For example,
     *
     * @code
     * double intervals[] = { 0.0, 1.0, 4.0 };
     * double weights[] = { 1.0, 1.0 };
     * piecewise_constant_distribution<> dist(
     *     &intervals[0], &intervals[0] + 3, &weights[0]);
     * @endcode
     *
     * The distribution has a 50% chance of producing a
     * value between 0 and 1 and a 50% chance of producing
     * a value between 1 and 4.
     ','line_number':229,'multiline':True]
['text':'*
     * Constructs a piecewise_constant_distribution from an
     * initializer_list containing the interval boundaries
     * and a unary function specifying the weights.  Each
     * weight is determined by calling the function at the
     * midpoint of the corresponding interval.
     *
     * If the initializer_list contains less than two elements,
     * this is equivalent to the default constructor and the
     * distribution will produce values uniformly distributed
     * in the range [0, 1).
     ','line_number':275,'multiline':True]
['text':'*
     * Constructs a piecewise_constant_distribution from Boost.Range
     * ranges holding the interval boundaries and the weights.  If
     * there are less than two interval boundaries, this is equivalent
     * to the default constructor and the distribution will produce
     * values uniformly distributed in the range [0, 1).  The
     * number of weights must be one less than the number of
     * interval boundaries.
     ','line_number':308,'multiline':True]
['text':'*
     * Constructs a piecewise_constant_distribution that approximates a
     * function.  The range of the distribution is [xmin, xmax).  This
     * range is divided into nw equally sized intervals and the weights
     * are found by calling the unary function f on the midpoints of the
     * intervals.
     ','line_number':329,'multiline':True]
['text':'*
     * Constructs a piecewise_constant_distribution from its parameters.
     ','line_number':351,'multiline':True]
['text':'*
     * Returns a value distributed according to the parameters of the
     * piecewist_constant_distribution.
     ','line_number':360,'multiline':True]
['text':'*
     * Returns a value distributed according to the parameters
     * specified by param.
     ','line_number':371,'multiline':True]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':381,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':384,'multiline':True]
['text':'*
     * Returns a vector containing the probability density
     * over each interval.
     ','line_number':388,'multiline':True]
['text':'*  Returns a vector containing the interval boundaries. ','line_number':400,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':403,'multiline':True]
['text':'* Sets the parameters of the distribution. ','line_number':408,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':418,'multiline':True]
['text':'* Writes a distribution to a @c std::ostream. ','line_number':424,'multiline':True]
['text':'* Reads a distribution from a @c std::istream ','line_number':432,'multiline':True]
['text':'*
     * Returns true if the two distributions will return the
     * same sequence of values, when passed equal generators.
     ','line_number':443,'multiline':True]
['text':'*
     * Returns true if the two distributions may return different
     * sequences of values, when passed equal generators.
     ','line_number':452,'multiline':True]
