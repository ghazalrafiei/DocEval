['text':' boost random/mixmax.hpp header file
 *
 * Copyright Kostas Savvidis 2008-2019
 *
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2019-04-23 created
 ','line_number':1,'multiline':True]
['text':'*
 * Instantiations of class template mixmax_engine model,
 * \pseudo_random_number_generator .
 *  It uses the  MIXMAX generator algorithms from:
 *
 *  @blockquote
 *  G.K.Savvidy and N.G.Ter-Arutyunian,
 *  On the Monte Carlo simulation of physical systems,
 *  J.Comput.Phys. 97, 566 (1991);
 *  Preprint EPI-865-16-86, Yerevan, Jan. 1986
 *  http://dx.doi.org/10.1016/0021-9991(91)90015-D
 *
 *  K.Savvidy
 *  The MIXMAX random number generator
 *  Comp. Phys. Commun. 196 (2015), pp 161–165
 *  http://dx.doi.org/10.1016/j.cpc.2015.06.003
 *
 *  K.Savvidy and G.Savvidy
 *  Spectrum and Entropy of C-systems. MIXMAX random number generator
 *  Chaos, Solitons & Fractals, Volume 91, (2016) pp. 33–38
 *  http://dx.doi.org/10.1016/j.chaos.2016.05.003
 *  @endblockquote
 *
 * The generator crucially depends on the choice of the
 * parameters. The valid sets of parameters are from the published papers above.
 *
 ','line_number':30,'multiline':True]
['text':' MIXMAX TEMPLATE PARAMETERS','line_number':58,'multiline':False]
['text':' Interfaces required by C++11 std::random and boost::random','line_number':61,'multiline':False]
['text':'/< The main internal parameter, size of the defining MIXMAX matrix','line_number':68,'multiline':False]
['text':' CONSTRUCTORS:','line_number':69,'multiline':False]
['text':'/< Constructor, unit vector as initial state, acted on by A^2^512','line_number':70,'multiline':False]
['text':'/< Constructor, one 64-bit seed','line_number':71,'multiline':False]
['text':'/< Constructor, four 32-bit seeds for 128-bit seeding flexibility','line_number':72,'multiline':False]
['text':'/< seed with one 64-bit seed','line_number':73,'multiline':False]
['text':' DATATYPES','line_number':75,'multiline':False]
['text':' struct alias','line_number':82,'multiline':False]
['text':' SEEDING FUNCTIONS','line_number':85,'multiline':False]
['text':'* Sets the state of the generator using values from an iterator range. ','line_number':89,'multiline':True]
['text':'* Sets the state of the generator using values from a seed_seq. ','line_number':96,'multiline':True]
['text':'* return one uint64 between min=0 and max=2^61-1 ','line_number':103,'multiline':True]
['text':'* Fills a range with random values ','line_number':114,'multiline':True]
['text':'/< discard n steps, required in boost::random','line_number':118,'multiline':False]
['text':'* save the state of the RNG to a stream ','line_number':120,'multiline':True]
['text':'* read the state of the RNG from a stream ','line_number':133,'multiline':True]
['text':' will set std::ios::failbit if the input format is not right','line_number':137,'multiline':False]
['text':' seeds with the i-th unit vector, i = 0..Ndim-1,  for testing only','line_number':168,'multiline':False]
['text':'/< constructor, with no params, seeds with seed=0,  random numbers are as good as from any other seed','line_number':177,'multiline':False]
['text':'/< constructor, one uint64_t seed, random numbers are statistically independent from any two distinct seeds, e.g. consecutive seeds are ok','line_number':183,'multiline':False]
['text':' constructor, four 32-bit seeds for 128-bit seeding flexibility','line_number':188,'multiline':False]
['text':' operates with a raw vector, uses known sum of elements of Y','line_number':195,'multiline':False]
['text':' will keep a running sum of all new elements','line_number':198,'multiline':False]
['text':' new Y[i] = old Y[i] + old partial * m','line_number':203,'multiline':False]
['text':' set the counter to Ndim if iteration should happen right away','line_number':215,'multiline':False]
['text':'
     makes a derived state vector, Vout, from the mother state vector Vin
     by skipping a large number of steps, determined by the given seeding ID's
     
     it is mathematically guaranteed that the substreams derived in this way from the SAME (!!!) Vin will not collide provided
     1) at least one bit of ID is different
     2) less than 10^100 numbers are drawn from the stream
     (this is good enough : a single CPU will not exceed this in the lifetime of the universe, 10^19 sec,
     even if it had a clock cycle of Planck time, 10^44 Hz )
     
     Caution: never apply this to a derived vector, just choose some mother vector Vin, for example the unit vector by seed_vielbein(X,0),
     and use it in all your runs, just change runID to get completely nonoverlapping streams of random numbers on a different day.
     
     clusterID and machineID are provided for the benefit of large organizations who wish to ensure that a simulation
     which is running in parallel on a large number of  clusters and machines will have non-colliding source of random numbers.
     
     did i repeat it enough times? the non-collision guarantee is absolute, not probabilistic
     
     ','line_number':228,'multiline':True]
['text':' go from lower order to higher order ID','line_number':262,'multiline':False]
['text':' j is lag, enumerates terms of the poly','line_number':269,'multiline':False]
['text':' for zero lag Y is already given','line_number':270,'multiline':False]
['text':' same coeff for all i','line_number':271,'multiline':False]
['text':' bring up the r-th bit in the ID','line_number':280,'multiline':False]
['text':' returns sumtot, and copy the vector over to Vout','line_number':284,'multiline':False]
['text':' works on all platforms, including 32-bit linux, PPC and PPC64, ARM and Windows','line_number':289,'multiline':False]
['text':' @copydoc boost::random::detail::mixmax_engine_doc ','line_number':307,'multiline':True]
['text':'* Instantiation with a valid parameter set. ','line_number':308,'multiline':True]
['text':' namespace random','line_number':310,'multiline':False]
['text':' namespace boost','line_number':311,'multiline':False]
['text':' BOOST_RANDOM_MIXMAX_HPP','line_number':313,'multiline':False]
