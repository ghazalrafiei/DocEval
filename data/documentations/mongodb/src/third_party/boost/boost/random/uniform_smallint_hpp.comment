['text':' boost random/uniform_smallint.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-04-08  added min<max assertion (N. Becker)
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]
['text':' uniform integer distribution on a small range [min, max]','line_number':39,'multiline':False]
['text':'*
 * The distribution function uniform_smallint models a \random_distribution.
 * On each invocation, it returns a random integer value uniformly distributed
 * in the set of integer numbers {min, min+1, min+2, ..., max}. It assumes
 * that the desired range (max-min+1) is small compared to the range of the
 * underlying source of random numbers and thus makes no attempt to limit
 * quantization errors.
 *
 * Let \f$r_{\mathtt{out}} = (\mbox{max}-\mbox{min}+1)\f$ the desired range of
 * integer numbers, and
 * let \f$r_{\mathtt{base}}\f$ be the range of the underlying source of random
 * numbers. Then, for the uniform distribution, the theoretical probability
 * for any number i in the range \f$r_{\mathtt{out}}\f$ will be
 * \f$\displaystyle p_{\mathtt{out}}(i) = \frac{1}{r_{\mathtt{out}}}\f$.
 * Likewise, assume a uniform distribution on \f$r_{\mathtt{base}}\f$ for
 * the underlying source of random numbers, i.e.
 * \f$\displaystyle p_{\mathtt{base}}(i) = \frac{1}{r_{\mathtt{base}}}\f$.
 * Let \f$p_{\mathtt{out\_s}}(i)\f$ denote the random
 * distribution generated by @c uniform_smallint. Then the sum over all
 * i in \f$r_{\mathtt{out}}\f$ of
 * \f$\displaystyle
 * \left(\frac{p_{\mathtt{out\_s}}(i)}{p_{\mathtt{out}}(i)} - 1\right)^2\f$
 * shall not exceed
 * \f$\displaystyle \frac{r_{\mathtt{out}}}{r_{\mathtt{base}}^2}
 * (r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}})
 * (r_{\mathtt{out}} - r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}})\f$.
 *
 * The template parameter IntType shall denote an integer-like value type.
 *
 * @xmlnote
 * The property above is the square sum of the relative differences
 * in probabilities between the desired uniform distribution
 * \f$p_{\mathtt{out}}(i)\f$ and the generated distribution
 * \f$p_{\mathtt{out\_s}}(i)\f$.
 * The property can be fulfilled with the calculation
 * \f$(\mbox{base\_rng} \mbox{ mod } r_{\mathtt{out}})\f$, as follows:
 * Let \f$r = r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}}\f$.
 * The base distribution on \f$r_{\mathtt{base}}\f$ is folded onto the
 * range \f$r_{\mathtt{out}}\f$. The numbers i < r have assigned
 * \f$\displaystyle
 * \left\lfloor\frac{r_{\mathtt{base}}}{r_{\mathtt{out}}}\right\rfloor+1\f$
 * numbers of the base distribution, the rest has only \f$\displaystyle
 * \left\lfloor\frac{r_{\mathtt{base}}}{r_{\mathtt{out}}}\right\rfloor\f$.
 * Therefore,
 * \f$\displaystyle p_{\mathtt{out\_s}}(i) =
 * \left(\left\lfloor\frac{r_{\mathtt{base}}}
 * {r_{\mathtt{out}}}\right\rfloor+1\right) /
 * r_{\mathtt{base}}\f$ for i < r and \f$\displaystyle p_{\mathtt{out\_s}}(i) =
 * \left\lfloor\frac{r_{\mathtt{base}}}
 * {r_{\mathtt{out}}}\right\rfloor/r_{\mathtt{base}}\f$ otherwise.
 * Substituting this in the
 * above sum formula leads to the desired result.
 * @endxmlnote
 *
 * Note: The upper bound for
 * \f$(r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}})
 * (r_{\mathtt{out}} - r_{\mathtt{base}} \mbox{ mod } r_{\mathtt{out}})\f$ is
 * \f$\displaystyle \frac{r_{\mathtt{out}}^2}{4}\f$.  Regarding the upper bound
 * for the square sum of the relative quantization error of
 * \f$\displaystyle \frac{r_\mathtt{out}^3}{4r_{\mathtt{base}}^2}\f$, it
 * seems wise to either choose \f$r_{\mathtt{base}}\f$ so that
 * \f$r_{\mathtt{base}} > 10r_{\mathtt{out}}^2\f$ or ensure that
 * \f$r_{\mathtt{base}}\f$ is
 * divisible by \f$r_{\mathtt{out}}\f$.
 ','line_number':41,'multiline':True]
['text':'* constructs the parameters of a @c uniform_smallint distribution. ','line_number':119,'multiline':True]
['text':'* Returns the minimum value. ','line_number':126,'multiline':True]
['text':'* Returns the maximum value. ','line_number':128,'multiline':True]
['text':'* Writes the parameters to a @c std::ostream. ','line_number':132,'multiline':True]
['text':'* Reads the parameters from a @c std::istream. ','line_number':139,'multiline':True]
['text':'* Returns true if the two sets of parameters are equal. ','line_number':146,'multiline':True]
['text':'* Returns true if the two sets of parameters are different. ','line_number':150,'multiline':True]
['text':'*
     * Constructs a @c uniform_smallint. @c min and @c max are the
     * lower and upper bounds of the output range, respectively.
     ','line_number':158,'multiline':True]
['text':'*
     * Constructs a @c uniform_smallint from its parameters.
     ','line_number':165,'multiline':True]
['text':'* Returns the minimum value of the distribution. ','line_number':171,'multiline':True]
['text':'* Returns the maximum value of the distribution. ','line_number':173,'multiline':True]
['text':'* Returns the minimum value of the distribution. ','line_number':175,'multiline':True]
['text':'* Returns the maximum value of the distribution. ','line_number':177,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':180,'multiline':True]
['text':'* Sets the parameters of the distribution. ','line_number':182,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':189,'multiline':True]
['text':'* Returns a value uniformly distributed in the range [min(), max()]. ','line_number':195,'multiline':True]
['text':'* Returns a value uniformly distributed in the range [param.a(), param.b()]. ','line_number':203,'multiline':True]
['text':'* Writes the distribution to a @c std::ostream. ','line_number':208,'multiline':True]
['text':'* Reads the distribution from a @c std::istream. ','line_number':215,'multiline':True]
['text':'*
     * Returns true if the two distributions will produce identical
     * sequences of values given equal generators.
     ','line_number':222,'multiline':True]
['text':'*
     * Returns true if the two distributions may produce different
     * sequences of values given equal generators.
     ','line_number':229,'multiline':True]
['text':' \cond show_private','line_number':237,'multiline':False]
['text':' equivalent to (eng() - eng.min()) % (_max - _min + 1) + _min,','line_number':241,'multiline':False]
['text':' but guarantees no overflow.','line_number':242,'multiline':False]
['text':' This involves mixed arithmetic between the base generators range','line_number':263,'multiline':False]
['text':' type, and the result_type's range type.  mixed_range_type is','line_number':264,'multiline':False]
['text':' normally the same as base_unsigned which is the most efficient','line_number':265,'multiline':False]
['text':' option, but requires a narrowing explcit cast if result_type','line_number':266,'multiline':False]
['text':' is a multiprecision type.  If no such casts are available then use','line_number':267,'multiline':False]
['text':' multiprecision arithmetic throughout instead.','line_number':268,'multiline':False]
['text':' what is the worst that can possibly happen here?','line_number':282,'multiline':False]
['text':' base_result may not be able to represent all the values in [0, range]','line_number':283,'multiline':False]
['text':' exactly.  If this happens, it will cause round off error and we','line_number':284,'multiline':False]
['text':' won't be able to produce all the values in the range.  We don't','line_number':285,'multiline':False]
['text':' care about this because the user has already told us not to by','line_number':286,'multiline':False]
['text':' using uniform_smallint.  However, we do need to be careful','line_number':287,'multiline':False]
['text':' to clamp the result, or floating point rounding can produce','line_number':288,'multiline':False]
['text':' an out of range result.','line_number':289,'multiline':False]
['text':' \endcond','line_number':294,'multiline':False]
['text':' namespace random','line_number':300,'multiline':False]
['text':' namespace boost','line_number':304,'multiline':False]
['text':' BOOST_RANDOM_UNIFORM_SMALLINT_HPP','line_number':306,'multiline':False]
