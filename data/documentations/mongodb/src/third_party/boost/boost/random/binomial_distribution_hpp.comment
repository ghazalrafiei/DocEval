['text':' boost random/binomial_distribution.hpp header file
 *
 * Copyright Steven Watanabe 2010
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 ','line_number':1,'multiline':True]
['text':'*
 * The binomial distribution is an integer valued distribution with
 * two parameters, @c t and @c p.  The values of the distribution
 * are within the range [0,t].
 *
 * The distribution function is
 * \f$\displaystyle P(k) = {t \choose k}p^k(1-p)^{t-k}\f$.
 *
 * The algorithm used is the BTRD algorithm described in
 *
 *  @blockquote
 *  "The generation of binomial random variates", Wolfgang Hormann,
 *  Journal of Statistical Computation and Simulation, Volume 46,
 *  Issue 1 & 2 April 1993 , pages 101 - 110
 *  @endblockquote
 ','line_number':51,'multiline':True]
['text':'*
         * Construct a param_type object.  @c t and @c p
         * are the parameters of the distribution.
         *
         * Requires: t >=0 && 0 <= p <= 1
         ','line_number':76,'multiline':True]
['text':'* Returns the @c t parameter of the distribution. ','line_number':85,'multiline':True]
['text':'* Returns the @c p parameter of the distribution. ','line_number':87,'multiline':True]
['text':'* Writes the parameters of the distribution to a @c std::ostream. ','line_number':90,'multiline':True]
['text':'* Reads the parameters of the distribution from a @c std::istream. ','line_number':100,'multiline':True]
['text':'* Returns true if the parameters have the same values. ','line_number':109,'multiline':True]
['text':'* Returns true if the parameters have different values. ','line_number':114,'multiline':True]
['text':'*
     * Construct a @c binomial_distribution object. @c t and @c p
     * are the parameters of the distribution.
     *
     * Requires: t >=0 && 0 <= p <= 1
     ','line_number':124,'multiline':True]
['text':'*
     * Construct an @c binomial_distribution object from the
     * parameters.
     ','line_number':137,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the
     * binomial distribution.
     ','line_number':147,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the
     * binomial distribution with parameters specified by @c param.
     ','line_number':167,'multiline':True]
['text':'* Returns the @c t parameter of the distribution. ','line_number':177,'multiline':True]
['text':'* Returns the @c p parameter of the distribution. ','line_number':179,'multiline':True]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':182,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':184,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':187,'multiline':True]
['text':'* Sets parameters of the distribution. ','line_number':189,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':197,'multiline':True]
['text':'* Writes the parameters of the distribution to a @c std::ostream. ','line_number':204,'multiline':True]
['text':'* Reads the parameters of the distribution from a @c std::istream. ','line_number':214,'multiline':True]
['text':'* Returns true if the two distributions will produce the same
        sequence of values, given equal generators. ','line_number':224,'multiline':True]
['text':'* Returns true if the two distributions could produce different
        sequences of values, given equal generators. ','line_number':231,'multiline':True]
['text':'/ @cond show_private','line_number':241,'multiline':False]
['text':' BTRD is safe when np >= 10','line_number':253,'multiline':False]
['text':' computes the correction factor for the Stirling approximation','line_number':257,'multiline':False]
['text':' for log(k!)','line_number':258,'multiline':False]
['text':' final acceptance/rejection','line_number':343,'multiline':False]
['text':' If r gets too small then the round-off error','line_number':382,'multiline':False]
['text':' becomes a problem.  At this point, p(i) is','line_number':383,'multiline':False]
['text':' decreasing exponentially, so if we just call','line_number':384,'multiline':False]
['text':' it 0, it's close enough.  Note that the','line_number':385,'multiline':False]
['text':' minimum value of q_n is about 1e-7, so we','line_number':386,'multiline':False]
['text':' may need to be a little careful to make sure that','line_number':387,'multiline':False]
['text':' we don't terminate the first time through the loop','line_number':388,'multiline':False]
['text':' for float.  (Hence the test that r is decreasing)','line_number':389,'multiline':False]
['text':' parameters','line_number':398,'multiline':False]
['text':' common data','line_number':402,'multiline':False]
['text':' for btrd','line_number':406,'multiline':False]
['text':' for inversion','line_number':418,'multiline':False]
['text':'/ @endcond','line_number':422,'multiline':False]
['text':' backwards compatibility','line_number':427,'multiline':False]
