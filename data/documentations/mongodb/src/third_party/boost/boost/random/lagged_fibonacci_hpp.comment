['text':' boost random/lagged_fibonacci.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2013-10-14  fixed some warnings with Wshadow (mgaunard)
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]
['text':' std::max','line_number':22,'multiline':False]
['text':' std::pow','line_number':24,'multiline':False]
['text':'*
 * Instantiations of class template \lagged_fibonacci_engine model a
 * \pseudo_random_number_generator. It uses a lagged Fibonacci
 * algorithm with two lags @c p and @c q:
 * x(i) = x(i-p) + x(i-q) (mod 2<sup>w</sup>) with p > q.
 ','line_number':39,'multiline':True]
['text':'* Returns the smallest value that the generator can produce. ','line_number':57,'multiline':True]
['text':'* Returns the largest value that the generator can produce. ','line_number':59,'multiline':True]
['text':'* Creates a new @c lagged_fibonacci_engine and calls @c seed(). ','line_number':63,'multiline':True]
['text':'* Creates a new @c lagged_fibonacci_engine and calls @c seed(value). ','line_number':66,'multiline':True]
['text':'* Creates a new @c lagged_fibonacci_engine and calls @c seed(seq). ','line_number':71,'multiline':True]
['text':'*
     * Creates a new @c lagged_fibonacci_engine and calls @c seed(first, last).
     ','line_number':76,'multiline':True]
['text':' compiler-generated copy ctor and assignment operator are fine','line_number':82,'multiline':False]
['text':'* Calls @c seed(default_seed). ','line_number':84,'multiline':True]
['text':'*
     * Sets the state of the generator to values produced by
     * a \minstd_rand0 generator.
     ','line_number':87,'multiline':True]
['text':'*
     * Sets the state of the generator using values produced by seq.
     ','line_number':99,'multiline':True]
['text':'*
     * Sets the state of the generator to values from the iterator
     * range [first, last).  If there are not enough elements in the
     * range [first, last) throws @c std::invalid_argument.
     ','line_number':108,'multiline':True]
['text':'* Returns the next value of the generator. ','line_number':120,'multiline':True]
['text':'* Fills a range with random values ','line_number':128,'multiline':True]
['text':'* Advances the state of the generator by @c z. ','line_number':133,'multiline':True]
['text':'*
     * Writes the textual representation of the generator to a @c std::ostream.
     ','line_number':141,'multiline':True]
['text':'*
     * Reads the textual representation of the generator from a @c std::istream.
     ','line_number':152,'multiline':True]
['text':'*
     * Returns true if the two generators will produce identical
     * sequences of outputs.
     ','line_number':163,'multiline':True]
['text':'*
     * Returns true if the two generators will produce different
     * sequences of outputs.
     ','line_number':170,'multiline':True]
['text':'/ \cond show_private','line_number':177,'multiline':False]
['text':'/ \endcond','line_number':179,'multiline':False]
['text':'  A definition is required even for integral static constants','line_number':186,'multiline':False]
['text':'/ \cond show_private','line_number':197,'multiline':False]
['text':' two loops to avoid costly modulo operations','line_number':202,'multiline':False]
['text':' extra scope for MSVC brokenness w.r.t. for scope','line_number':203,'multiline':False]
['text':'/ \endcond','line_number':212,'multiline':False]
['text':'/ \cond show_deprecated','line_number':214,'multiline':False]
['text':' provided for backwards compatibility','line_number':216,'multiline':False]
['text':'/ \endcond','line_number':231,'multiline':False]
['text':' lagged Fibonacci generator for the range [0..1)','line_number':233,'multiline':False]
['text':' contributed by Matthias Troyer','line_number':234,'multiline':False]
['text':' for p=55, q=24 originally by G. J. Mitchell and D. P. Moore 1958','line_number':235,'multiline':False]
['text':'*
 * Instantiations of class template @c lagged_fibonacci_01 model a
 * \pseudo_random_number_generator. It uses a lagged Fibonacci
 * algorithm with two lags @c p and @c q, evaluated in floating-point
 * arithmetic: x(i) = x(i-p) + x(i-q) (mod 1) with p > q. See
 *
 *  @blockquote
 *  "Uniform random number generators for supercomputers", Richard Brent,
 *  Proc. of Fifth Australian Supercomputer Conference, Melbourne,
 *  Dec. 1992, pp. 704-706.
 *  @endblockquote
 *
 * @xmlnote
 * The quality of the generator crucially depends on the choice
 * of the parameters. User code should employ one of the sensibly
 * parameterized generators such as \lagged_fibonacci607 instead.
 * @endxmlnote
 *
 * The generator requires considerable amounts of memory for the storage
 * of its state array. For example, \lagged_fibonacci607 requires about
 * 4856 bytes and \lagged_fibonacci44497 requires about 350 KBytes.
 ','line_number':237,'multiline':True]
['text':'* Constructs a @c lagged_fibonacci_01 generator and calls @c seed(). ','line_number':271,'multiline':True]
['text':'* Constructs a @c lagged_fibonacci_01 generator and calls @c seed(value). ','line_number':273,'multiline':True]
['text':'* Constructs a @c lagged_fibonacci_01 generator and calls @c seed(gen). ','line_number':276,'multiline':True]
['text':' compiler-generated copy ctor and assignment operator are fine','line_number':282,'multiline':False]
['text':'* Calls seed(default_seed). ','line_number':284,'multiline':True]
['text':'*
     * Constructs a \minstd_rand0 generator with the constructor parameter
     * value and calls seed with it. Distinct seeds in the range
     * [1, 2147483647) will produce generators with different states. Other
     * seeds will be equivalent to some seed within this range. See
     * \linear_congruential_engine for details.
     ','line_number':287,'multiline':True]
['text':'*
     * Seeds this @c lagged_fibonacci_01_engine using values produced by
     * @c seq.generate.
     ','line_number':301,'multiline':True]
['text':'*
     * Seeds this @c lagged_fibonacci_01_engine using values from the
     * iterator range [first, last).  If there are not enough elements
     * in the range, throws @c std::invalid_argument.
     ','line_number':311,'multiline':True]
['text':'* Returns the smallest value that the generator can produce. ','line_number':323,'multiline':True]
['text':'* Returns the upper bound of the generators outputs. ','line_number':325,'multiline':True]
['text':'* Returns the next value of the generator. ','line_number':328,'multiline':True]
['text':'* Fills a range with random values ','line_number':336,'multiline':True]
['text':'* Advances the state of the generator by @c z. ','line_number':341,'multiline':True]
['text':'*
     * Writes the textual representation of the generator to a @c std::ostream.
     ','line_number':349,'multiline':True]
['text':' allow for Koenig lookup','line_number':354,'multiline':False]
['text':'*
     * Reads the textual representation of the generator from a @c std::istream.
     ','line_number':364,'multiline':True]
['text':'*
     * Returns true if the two generators will produce identical
     * sequences of outputs.
     ','line_number':378,'multiline':True]
['text':'*
     * Returns true if the two generators will produce different
     * sequences of outputs.
     ','line_number':385,'multiline':True]
['text':'/ \cond show_private','line_number':392,'multiline':False]
['text':'/ \endcond','line_number':399,'multiline':False]
['text':'  A definition is required even for integral static constants','line_number':405,'multiline':False]
['text':'/ \cond show_private','line_number':418,'multiline':False]
['text':' two loops to avoid costly modulo operations','line_number':422,'multiline':False]
['text':' extra scope for MSVC brokenness w.r.t. for scope','line_number':423,'multiline':False]
['text':'/ \endcond','line_number':439,'multiline':False]
['text':'/ \cond show_deprecated','line_number':441,'multiline':False]
['text':' provided for backwards compatibility','line_number':443,'multiline':False]
['text':'/ \endcond','line_number':458,'multiline':False]
['text':'*
 * The specializations lagged_fibonacci607 ... lagged_fibonacci44497
 * use well tested lags.
 *
 * See
 *
 *  @blockquote
 *  "On the Periods of Generalized Fibonacci Recurrences", Richard P. Brent
 *  Computer Sciences Laboratory Australian National University, December 1992
 *  @endblockquote
 *
 * The lags used here can be found in
 *
 *  @blockquote
 *  "Uniform random number generators for supercomputers", Richard Brent,
 *  Proc. of Fifth Australian Supercomputer Conference, Melbourne,
 *  Dec. 1992, pp. 704-706.
 *  @endblockquote
 ','line_number':481,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':504,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':506,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':508,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':510,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':512,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':514,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':516,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':518,'multiline':True]
['text':'* @copydoc boost::random::detail::lagged_fibonacci_doc ','line_number':520,'multiline':True]
['text':' namespace random','line_number':523,'multiline':False]
['text':' namespace boost','line_number':535,'multiline':False]
['text':' BOOST_RANDOM_LAGGED_FIBONACCI_HPP','line_number':537,'multiline':False]
