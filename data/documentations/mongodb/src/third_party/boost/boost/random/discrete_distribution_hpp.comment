['text':' boost random/discrete_distribution.hpp header file
 *
 * Copyright Steven Watanabe 2009-2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 ','line_number':1,'multiline':True]
['text':' weight_average * n + excess == current partial sum','line_number':53,'multiline':False]
['text':' This is a bit messy, but it's guaranteed not to overflow','line_number':54,'multiline':False]
['text':' average ','line_number':95,'multiline':True]
['text':' weights ','line_number':186,'multiline':True]
['text':'*
 * The class @c discrete_distribution models a \random_distribution.
 * It produces integers in the range [0, n) with the probability
 * of producing each value is specified by the parameters of the
 * distribution.
 ','line_number':220,'multiline':True]
['text':'*
         * Constructs a @c param_type object, representing a distribution
         * with \f$p(0) = 1\f$ and \f$p(k|k>0) = 0\f$.
         ','line_number':237,'multiline':True]
['text':'*
         * If @c first == @c last, equivalent to the default constructor.
         * Otherwise, the values of the range represent weights for the
         * possible values of the distribution.
         ','line_number':242,'multiline':True]
['text':'*
         * If wl.size() == 0, equivalent to the default constructor.
         * Otherwise, the values of the @c initializer_list represent
         * weights for the possible values of the distribution.
         ','line_number':253,'multiline':True]
['text':'*
         * If the range is empty, equivalent to the default constructor.
         * Otherwise, the elements of the range represent
         * weights for the possible values of the distribution.
         ','line_number':264,'multiline':True]
['text':'*
         * If nw is zero, equivalent to the default constructor.
         * Otherwise, the range of the distribution is [0, nw),
         * and the weights are found by  calling fw with values
         * evenly distributed between \f$\mbox{xmin} + \delta/2\f$ and
         * \f$\mbox{xmax} - \delta/2\f$, where
         * \f$\delta = (\mbox{xmax} - \mbox{xmin})/\mbox{nw}\f$.
         ','line_number':276,'multiline':True]
['text':'*
         * Returns a vector containing the probabilities of each possible
         * value of the distribution.
         ','line_number':296,'multiline':True]
['text':'* Writes the parameters to a @c std::ostream. ','line_number':305,'multiline':True]
['text':'* Reads the parameters from a @c std::istream. ','line_number':312,'multiline':True]
['text':'* Returns true if the two sets of parameters are the same. ','line_number':323,'multiline':True]
['text':'* Returns true if the two sets of parameters are different. ','line_number':328,'multiline':True]
['text':'/ @cond show_private','line_number':331,'multiline':False]
['text':'/ @endcond','line_number':341,'multiline':False]
['text':'*
     * Creates a new @c discrete_distribution object that has
     * \f$p(0) = 1\f$ and \f$p(i|i>0) = 0\f$.
     ','line_number':344,'multiline':True]
['text':'*
     * Constructs a discrete_distribution from an iterator range.
     * If @c first == @c last, equivalent to the default constructor.
     * Otherwise, the values of the range represent weights for the
     * possible values of the distribution.
     ','line_number':352,'multiline':True]
['text':'*
     * Constructs a @c discrete_distribution from a @c std::initializer_list.
     * If the @c initializer_list is empty, equivalent to the default
     * constructor.  Otherwise, the values of the @c initializer_list
     * represent weights for the possible values of the distribution.
     * For example, given the distribution
     *
     * @code
     * discrete_distribution<> dist{1, 4, 5};
     * @endcode
     *
     * The probability of a 0 is 1/10, the probability of a 1 is 2/5,
     * the probability of a 2 is 1/2, and no other values are possible.
     ','line_number':364,'multiline':True]
['text':'*
     * Constructs a discrete_distribution from a Boost.Range range.
     * If the range is empty, equivalent to the default constructor.
     * Otherwise, the values of the range represent weights for the
     * possible values of the distribution.
     ','line_number':383,'multiline':True]
['text':'*
     * Constructs a discrete_distribution that approximates a function.
     * If nw is zero, equivalent to the default constructor.
     * Otherwise, the range of the distribution is [0, nw),
     * and the weights are found by  calling fw with values
     * evenly distributed between \f$\mbox{xmin} + \delta/2\f$ and
     * \f$\mbox{xmax} - \delta/2\f$, where
     * \f$\delta = (\mbox{xmax} - \mbox{xmin})/\mbox{nw}\f$.
     ','line_number':394,'multiline':True]
['text':'*
     * Constructs a discrete_distribution from its parameters.
     ','line_number':415,'multiline':True]
['text':'*
     * Returns a value distributed according to the parameters of the
     * discrete_distribution.
     ','line_number':423,'multiline':True]
['text':'*
     * Returns a value distributed according to the parameters
     * specified by param.
     ','line_number':444,'multiline':True]
['text':' This shouldn't be reachable, but round-off error','line_number':465,'multiline':False]
['text':' can prevent any match from being found when val is','line_number':466,'multiline':False]
['text':' very close to 1.','line_number':467,'multiline':False]
['text':' WeightType is integral and sum(parm._probabilities)','line_number':470,'multiline':False]
['text':' would overflow.  Just use the easy solution.','line_number':471,'multiline':False]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':476,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':478,'multiline':True]
['text':'*
     * Returns a vector containing the probabilities of each
     * value of the distribution.  For example, given
     *
     * @code
     * discrete_distribution<> dist = { 1, 4, 5 };
     * std::vector<double> p = dist.param();
     * @endcode
     *
     * the vector, p will contain {0.1, 0.4, 0.5}.
     *
     * If @c WeightType is integral, then the weights
     * will be returned unchanged.
     ','line_number':482,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':513,'multiline':True]
['text':'* Sets the parameters of the distribution. ','line_number':518,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':524,'multiline':True]
['text':'* Writes a distribution to a @c std::ostream. ','line_number':530,'multiline':True]
['text':'* Reads a distribution from a @c std::istream ','line_number':537,'multiline':True]
['text':'*
     * Returns true if the two distributions will return the
     * same sequence of values, when passed equal generators.
     ','line_number':547,'multiline':True]
['text':'*
     * Returns true if the two distributions may return different
     * sequences of values, when passed equal generators.
     ','line_number':555,'multiline':True]
['text':'/ @cond show_private','line_number':563,'multiline':False]
['text':'/ @endcond','line_number':632,'multiline':False]
