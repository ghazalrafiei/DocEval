['text':' boost random/exponential_distribution.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Copyright Steven Watanabe 2011
 * Copyright Jason Rhinelander 2016
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 * Revision history
 *  2001-02-18  moved to individual header files
 ','line_number':1,'multiline':True]
['text':' tables for the ziggurat algorithm','line_number':35,'multiline':False]
['text':' For i=0 we need to generate from the tail, but because this is an exponential','line_number':193,'multiline':False]
['text':' distribution, the tail looks exactly like the body, so we can simply repeat with a','line_number':194,'multiline':False]
['text':' shift:','line_number':195,'multiline':False]
['text':' All we care about is whether these are < or > 0; these values are equal to','line_number':201,'multiline':False]
['text':' (lbound) or proportional to (ubound) `y` minus the lower/upper bound.','line_number':202,'multiline':False]
['text':' if above the upper bound reject immediately','line_number':206,'multiline':False]
['text':' If below the lower bound accept immediately','line_number':209,'multiline':False]
['text':' Otherwise it's between the bounds and we need a full check','line_number':211,'multiline':False]
['text':' namespace detail','line_number':225,'multiline':False]
['text':'*
 * The exponential distribution is a model of \random_distribution with
 * a single parameter lambda.
 *
 * It has \f$\displaystyle p(x) = \lambda e^{-\lambda x}\f$
 *
 * The implementation uses the "ziggurat" algorithm, as described in
 *
 *  @blockquote
 *  "The Ziggurat Method for Generating Random Variables",
 *  George Marsaglia and Wai Wan Tsang, Journal of Statistical Software
 *  Volume 5, Number 8 (2000), 1-7.
 *  @endblockquote
 ','line_number':228,'multiline':True]
['text':'*
         * Constructs parameters with a given lambda.
         *
         * Requires: lambda > 0
         ','line_number':255,'multiline':True]
['text':'* Returns the lambda parameter of the distribution. ','line_number':263,'multiline':True]
['text':'* Writes the parameters to a @c std::ostream. ','line_number':266,'multiline':True]
['text':'* Reads the parameters from a @c std::istream. ','line_number':273,'multiline':True]
['text':'* Returns true if the two sets of parameters are equal. ','line_number':280,'multiline':True]
['text':'* Returns true if the two sets of parameters are different. ','line_number':284,'multiline':True]
['text':'*
     * Constructs an exponential_distribution with a given lambda.
     *
     * Requires: lambda > 0
     ','line_number':291,'multiline':True]
['text':'*
     * Constructs an exponential_distribution from its parameters
     ','line_number':299,'multiline':True]
['text':' compiler-generated copy ctor and assignment operator are fine','line_number':305,'multiline':False]
['text':'* Returns the lambda parameter of the distribution. ','line_number':307,'multiline':True]
['text':'* Returns the smallest value that the distribution can produce. ','line_number':310,'multiline':True]
['text':'* Returns the largest value that the distribution can produce. ','line_number':313,'multiline':True]
['text':'* Returns the parameters of the distribution. ','line_number':317,'multiline':True]
['text':'* Sets the parameters of the distribution. ','line_number':319,'multiline':True]
['text':'*
     * Effects: Subsequent uses of the distribution do not depend
     * on values produced by any engine prior to invoking reset.
     ','line_number':322,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the
     * exponential distribution.
     ','line_number':328,'multiline':True]
['text':'*
     * Returns a random variate distributed according to the exponential
     * distribution with parameters specified by param.
     ','line_number':339,'multiline':True]
['text':'* Writes the distribution to a std::ostream. ','line_number':349,'multiline':True]
['text':'* Reads the distribution from a std::istream. ','line_number':356,'multiline':True]
['text':'*
     * Returns true iff the two distributions will produce identical
     * sequences of values given equal generators.
     ','line_number':363,'multiline':True]
['text':'*
     * Returns true iff the two distributions will produce different
     * sequences of values given equal generators.
     ','line_number':370,'multiline':True]
['text':' namespace random','line_number':380,'multiline':False]
['text':' namespace boost','line_number':384,'multiline':False]
['text':' BOOST_RANDOM_EXPONENTIAL_DISTRIBUTION_HPP','line_number':386,'multiline':False]
