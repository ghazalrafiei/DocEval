['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! Represents some amount of elapsed time measure to a given resolution','line_number':25,'multiline':False]
['text':'! This class represents a standard set of capabilities for all
      counted time durations.  Time duration implementations should derive
      from this class passing their type as the first template parameter.
      This design allows the subclass duration types to provide custom
      construction policies or other custom features not provided here.

      @tparam T The subclass type
      @tparam rep_type The time resolution traits for this duration type.
  ','line_number':26,'multiline':True]
['text':' dividable, addable, and subtractable operator templates
   * won't work with this class (MSVC++ 6.0). return type
   * from '+=' is different than expected return type
   * from '+'. multipliable probably wont work
   * either (haven't tried) ','line_number':40,'multiline':True]
['text':' A tag for type categorization. Can be used to detect Boost.DateTime duration types in generic code.','line_number':47,'multiline':False]
['text':'the subclass','line_number':49,'multiline':False]
['text':'! Construct from special_values','line_number':66,'multiline':False]
['text':'! Returns smallest representable duration','line_number':69,'multiline':False]
['text':'! Return the number of ticks in a second','line_number':74,'multiline':False]
['text':'! Provide the resolution of this duration type','line_number':79,'multiline':False]
['text':'! Returns number of hours in the duration','line_number':84,'multiline':False]
['text':'! Returns normalized number of minutes','line_number':89,'multiline':False]
['text':'! Returns normalized number of seconds (0..60)','line_number':94,'multiline':False]
['text':'! Returns total number of seconds truncating any fractional seconds','line_number':99,'multiline':False]
['text':'! Returns total number of milliseconds truncating any fractional seconds','line_number':104,'multiline':False]
['text':'! Returns total number of nanoseconds truncating any sub millisecond values','line_number':112,'multiline':False]
['text':'! Returns total number of microseconds truncating any sub microsecond values','line_number':120,'multiline':False]
['text':'! Returns count of fractional seconds at given resolution','line_number':128,'multiline':False]
['text':'! Returns number of possible digits in fractional seconds','line_number':133,'multiline':False]
['text':'! unary- Allows for time_duration td = -td1','line_number':170,'multiline':False]
['text':'! Division operations on a duration with an integer.','line_number':197,'multiline':False]
['text':'! Multiplication operations an a duration with an integer','line_number':203,'multiline':False]
['text':'! Is ticks_ a special value?','line_number':218,'multiline':False]
['text':'! Is duration pos-infinity','line_number':229,'multiline':False]
['text':'! Is duration neg-infinity','line_number':240,'multiline':False]
['text':'! Is duration not-a-date-time','line_number':251,'multiline':False]
['text':'! Used for special_values output','line_number':263,'multiline':False]
['text':'! Template for instantiating derived adjusting durations','line_number':276,'multiline':False]
['text':' These templates are designed to work with multiples of
   * 10 for frac_of_second and resolution adjustment
   ','line_number':277,'multiline':True]
['text':' To avoid integer overflow we precompute the duration resolution conversion coefficient (ticket #3471)','line_number':288,'multiline':False]
['text':' The argument (ss) must be an integral type','line_number':294,'multiline':False]
['text':'namespace date_time','line_number':304,'multiline':False]
