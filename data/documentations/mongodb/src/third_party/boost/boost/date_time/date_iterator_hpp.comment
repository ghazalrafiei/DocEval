['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! An iterator over dates with varying resolution (day, week, month, year, etc)','line_number':16,'multiline':False]
['text':'! Base date iterator type','line_number':19,'multiline':False]
['text':'! This class provides the skeleton for the creation of iterators.
   *  New and interesting interators can be created by plugging in a new
   *  function that derives the next value from the current state.
   *  generation of various types of -based information.
   *
   *  <b>Template Parameters</b>
   *
   *  <b>date_type</b>
   *
   *  The date_type is a concrete date_type. The date_type must
   *  define a duration_type and a calendar_type.
   ','line_number':20,'multiline':True]
['text':' works, but benefit unclear at the moment','line_number':34,'multiline':False]
['text':'   class date_itr_base : public std::iterator<std::input_iterator_tag,','line_number':35,'multiline':False]
['text':'                                             date_type, void, void, void>{','line_number':36,'multiline':False]
['text':'! Overrides the base date iterator providing hook for functors','line_number':68,'multiline':False]
['text':'
   *  <b>offset_functor</b>
   *
   *  The offset functor must define a get_offset function that takes the
   *  current point in time and calculates and offset.
   *
   ','line_number':69,'multiline':True]
['text':'namespace date_time','line_number':98,'multiline':False]
