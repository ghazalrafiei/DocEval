['text':' Copyright (c) 2004-2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'some of the cache was used return the rest','line_number':41,'multiline':False]
['text':'! Returns true if more characters were parsed than was necessary','line_number':48,'multiline':False]
['text':'! Should be used in conjunction with last_char()
   *  to get the remaining character.
   ','line_number':49,'multiline':True]
['text':' cache will hold characters that have been read from the stream','line_number':57,'multiline':False]
['text':'for debug -- really only char streams...','line_number':64,'multiline':False]
['text':'! Recursive data structure to allow efficient parsing of various strings','line_number':78,'multiline':False]
['text':'! This class provides a quick lookup by building what amounts to a
 *  tree data structure.  It also features a match function which can
 *  can handle nasty input interators by caching values as it recurses
 *  the tree so that it can backtrack as needed.
 ','line_number':79,'multiline':True]
['text':'! Parameter "starting_point" designates where the numbering begins.
   * A starting_point of zero will start the numbering at zero
   * (Sun=0, Mon=1, ...) were a starting_point of one starts the
   * numbering at one (Jan=1, Feb=2, ...). The default is zero,
   * negative vaules are not allowed ','line_number':99,'multiline':True]
['text':' iterate thru all the elements and build the tree','line_number':107,'multiline':False]
['text':'set the last tree node = index+1  indicating a value','line_number':114,'multiline':False]
['text':'! Recursive function that finds a matching string in the tree.','line_number':157,'multiline':False]
['text':'! Must check match_results::has_remaining() after match() is
   * called. This is required so the user can determine if
   * stream iterator is already pointing to the expected
   * character or not (match() might advance sitr to next char in stream).
   *
   * A parse_match_result that has been returned from a failed match
   * attempt can be sent in to the match function of a different
   * string_parse_tree to attempt a match there. Use the iterators
   * for the partially consumed stream, the parse_match_result object,
   * and '0' for the level parameter. ','line_number':158,'multiline':True]
['text':' if we conditionally advance sitr, we won't have','line_number':177,'multiline':False]
['text':' to consume the next character past the input','line_number':178,'multiline':False]
['text':'bail - input exhausted','line_number':181,'multiline':False]
['text':'result.cache += c;','line_number':183,'multiline':False]
['text':'sitr++;','line_number':184,'multiline':False]
['text':' if we're looking for characters from the cache,','line_number':187,'multiline':False]
['text':' we don't want to increment sitr','line_number':188,'multiline':False]
['text':' equal if not found','line_number':194,'multiline':False]
['text':' -1 is default value','line_number':199,'multiline':False]
['text':'! Must check match_results::has_remaining() after match() is
   * called. This is required so the user can determine if
   * stream iterator is already pointing to the expected
   * character or not (match() might advance sitr to next char in stream).
   ','line_number':224,'multiline':True]
['text':' lookup to_lower of char in tree.','line_number':233,'multiline':False]
['text':'    string_type cache;','line_number':235,'multiline':False]
['text':'    os << "starting level: " << level << std::endl;','line_number':246,'multiline':False]
['text':'namespace','line_number':280,'multiline':False]
