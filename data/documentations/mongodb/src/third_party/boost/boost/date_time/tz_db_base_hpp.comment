['text':' Copyright (c) 2003-2005 CrystalClear Software, Inc.
 * Subject to the Boost Software License, Version 1.0. 
 * (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! Exception thrown when tz database cannot locate requested data file','line_number':29,'multiline':False]
['text':'! Exception thrown when tz database locates incorrect field structure in data file','line_number':41,'multiline':False]
['text':'! Creates a database of time_zones from csv datafile','line_number':50,'multiline':False]
['text':'! The csv file containing the zone_specs used by the
     * tz_db_base is intended to be customized by the
     * library user. When customizing this file (or creating your own) the
     * file must follow a specific format.
     * 
     * This first line is expected to contain column headings and is therefore
     * not processed by the tz_db_base.
     *
     * Each record (line) must have eleven fields. Some of those fields can
     * be empty. Every field (even empty ones) must be enclosed in 
     * double-quotes.
     * Ex:
     * @code
     * "America/Phoenix" <- string enclosed in quotes
     * ""                <- empty field
     * @endcode
     * 
     * Some fields represent a length of time. The format of these fields 
     * must be:
     * @code
     * "{+|-}hh:mm[:ss]" <- length-of-time format
     * @endcode
     * Where the plus or minus is mandatory and the seconds are optional.
     * 
     * Since some time zones do not use daylight savings it is not always 
     * necessary for every field in a zone_spec to contain a value. All 
     * zone_specs must have at least ID and GMT offset. Zones that use 
     * daylight savings must have all fields filled except: 
     * STD ABBR, STD NAME, DST NAME. You should take note 
     * that DST ABBR is mandatory for zones that use daylight savings 
     * (see field descriptions for further details).
     *
     * ******* Fields and their description/details ********* 
     *     
     * ID: 
     * Contains the identifying string for the zone_spec. Any string will
     * do as long as it's unique. No two ID's can be the same. 
     *
     * STD ABBR:
     * STD NAME:
     * DST ABBR:
     * DST NAME:
     * These four are all the names and abbreviations used by the time 
     * zone being described. While any string will do in these fields, 
     * care should be taken. These fields hold the strings that will be 
     * used in the output of many of the local_time classes. 
     * Ex:
     * @code
     * time_zone nyc = tz_db.time_zone_from_region("America/New_York");
     * local_time ny_time(date(2004, Aug, 30), IS_DST, nyc);
     * cout << ny_time.to_long_string() << endl;
     * // 2004-Aug-30 00:00:00 Eastern Daylight Time
     * cout << ny_time.to_short_string() << endl;
     * // 2004-Aug-30 00:00:00 EDT
     * @endcode
     *
     * NOTE: The exact format/function names may vary - see local_time 
     * documentation for further details.
     *
     * GMT offset:
     * This is the number of hours added to utc to get the local time 
     * before any daylight savings adjustments are made. Some examples 
     * are: America/New_York offset -5 hours, & Africa/Cairo offset +2 hours.
     * The format must follow the length-of-time format described above.
     *
     * DST adjustment:
     * The amount of time added to gmt_offset when daylight savings is in 
     * effect. The format must follow the length-of-time format described
     * above.
     *
     * DST Start Date rule:
     * This is a specially formatted string that describes the day of year
     * in which the transition take place. It holds three fields of it's own,
     * separated by semicolons. 
     * The first field indicates the "nth" weekday of the month. The possible 
     * values are: 1 (first), 2 (second), 3 (third), 4 (fourth), 5 (fifth), 
     * and -1 (last).
     * The second field indicates the day-of-week from 0-6 (Sun=0).
     * The third field indicates the month from 1-12 (Jan=1).
     * 
     * Examples are: "-1;5;9"="Last Friday of September", 
     * "2;1;3"="Second Monday of March"
     *
     * Start time:
     * Start time is the number of hours past midnight, on the day of the
     * start transition, the transition takes place. More simply put, the 
     * time of day the transition is made (in 24 hours format). The format
     * must follow the length-of-time format described above with the 
     * exception that it must always be positive.
     *
     * DST End date rule:
     * See DST Start date rule. The difference here is this is the day 
     * daylight savings ends (transition to STD).
     *
     * End time:
     * Same as Start time.
     ','line_number':51,'multiline':True]
['text':' Having CharT as a template parameter created problems 
       * with posix_time::duration_from_string. Templatizing 
       * duration_from_string was not possible at this time, however, 
       * it should be possible in the future (when poor compilers get 
       * fixed or stop being used). 
       * Since this class was designed to use CharT as a parameter it 
       * is simply typedef'd here to ease converting in back to a 
       * parameter the future ','line_number':151,'multiline':True]
['text':'! Constructs an empty database','line_number':167,'multiline':False]
['text':'! Process csv data file, may throw exceptions','line_number':170,'multiline':False]
['text':'! May throw bad_field_count exceptions ','line_number':171,'multiline':True]
['text':'! Process csv data file, may throw exceptions','line_number':181,'multiline':False]
['text':'! May throw data_not_accessible, or bad_field_count exceptions ','line_number':182,'multiline':True]
['text':' first line is column headings','line_number':191,'multiline':False]
['text':'! returns true if record successfully added to map','line_number':195,'multiline':False]
['text':'! Takes a region name in the form of "America/Phoenix", and a 
       * time_zone object for that region. The id string must be a unique 
       * name that does not already exist in the database. ','line_number':196,'multiline':True]
['text':'! Returns a time_zone object built from the specs for the given region','line_number':206,'multiline':False]
['text':'! Returns a time_zone object built from the specs for the given 
       * region. If region does not exist a local_time::record_not_found 
       * exception will be thrown ','line_number':207,'multiline':True]
['text':' get the record','line_number':213,'multiline':False]
['text':'null pointer','line_number':216,'multiline':False]
['text':'! Returns a vector of strings holding the time zone regions in the database','line_number':221,'multiline':False]
['text':' start and end rule are of the same type','line_number':238,'multiline':False]
['text':' TODO: mechanisms need to be put in place to handle different
       * types of rule specs. parse_rules() only handles nth_kday
       * rule types. ','line_number':241,'multiline':True]
['text':'! parses rule specs for transition day rules','line_number':245,'multiline':False]
['text':' start and end rule are of the same type, ','line_number':248,'multiline':False]
['text':' both are included here for readability','line_number':249,'multiline':False]
['text':' these are: [start|end] nth, day, month','line_number':253,'multiline':False]
['text':'! helper function for parse_rules()','line_number':271,'multiline':False]
['text':' shouldn't get here - add error handling later','line_number':288,'multiline':False]
['text':' silence warnings','line_number':291,'multiline':False]
['text':'! splits the [start|end]_date_rule string into 3 ints','line_number':294,'multiline':False]
['text':' 3 fields','line_number':307,'multiline':False]
['text':'! Take a line from the csv, turn it into a time_zone_type.','line_number':324,'multiline':False]
['text':'! Take a line from the csv, turn it into a time_zone_type,
       * and add it to the map. Zone_specs in csv file are expected to 
       * have eleven fields that describe the time zone. Returns true if 
       * zone_spec successfully added to database ','line_number':325,'multiline':True]
['text':'take a shot at fixing gcc 4.x error','line_number':346,'multiline':False]
['text':' should never reach','line_number':353,'multiline':False]
['text':' initializations','line_number':356,'multiline':False]
['text':' start building components of a time_zone','line_number':363,'multiline':False]
['text':' namespace','line_number':395,'multiline':False]
['text':' DATE_TIME_TZ_DB_BASE_HPP__','line_number':397,'multiline':False]
