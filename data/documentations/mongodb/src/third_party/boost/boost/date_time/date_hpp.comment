['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'!Representation of timepoint at the one day level resolution.','line_number':20,'multiline':False]
['text':'!
    The date template represents an interface shell for a date class
    that is based on a year-month-day system such as the gregorian
    or iso systems.  It provides basic operations to enable calculation
    and comparisons.

    <b>Theory</b>

    This date representation fundamentally departs from the C tm struct
    approach.  The goal for this type is to provide efficient date
    operations (add, subtract) and storage (minimize space to represent)
    in a concrete class.  Thus, the date uses a count internally to
    represent a particular date.  The calendar parameter defines
    the policies for converting the the year-month-day and internal
    counted form here.  Applications that need to perform heavy
    formatting of the same date repeatedly will perform better
    by using the year-month-day representation.

    Internally the date uses a day number to represent the date.
    This is a monotonic time representation. This representation
    allows for fast comparison as well as simplifying
    the creation of writing numeric operations.  Essentially, the
    internal day number is like adjusted julian day.  The adjustment
    is determined by the Epoch date which is represented as day 1 of
    the calendar.  Day 0 is reserved for negative infinity so that
    any actual date is automatically greater than negative infinity.
    When a date is constructed from a date or formatted for output,
    the appropriate conversions are applied to create the year, month,
    day representations.
  ','line_number':21,'multiline':True]
['text':'let the compiler write copy, assignment, and destructor','line_number':77,'multiline':False]
['text':'! check to see if date is a special value','line_number':110,'multiline':False]
['text':'! check to see if date is not a value','line_number':115,'multiline':False]
['text':'! check to see if date is one of the infinity values','line_number':120,'multiline':False]
['text':'! check to see if date is greater than all possible dates','line_number':125,'multiline':False]
['text':'! check to see if date is greater than all possible dates','line_number':130,'multiline':False]
['text':'! return as a special value or a not_special if a normal date','line_number':135,'multiline':False]
['text':' The duration underlying type may be wider than the date underlying type.','line_number':144,'multiline':False]
['text':' Thus we calculate the difference in terms of two durations from some common fixed base date.','line_number':145,'multiline':False]
['text':' In this case the difference will be a special value, too','line_number':151,'multiline':False]
['text':'allow internal access from operators','line_number':174,'multiline':False]
['text':'see reference','line_number':189,'multiline':False]
['text':'! This is a private constructor which allows for the creation of new
      dates.  It is not exposed to users since that would require class
      users to understand the inner workings of the date class.
    ','line_number':191,'multiline':True]
['text':' namespace date_time','line_number':204,'multiline':False]
