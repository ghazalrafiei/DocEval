['text':' Copyright (c) 2004 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! @file filetime_functions.hpp
 * Function(s) for converting between a FILETIME structure and a
 * time object. This file is only available on systems that have
 * BOOST_HAS_FTIME defined.
 ','line_number':12,'multiline':True]
['text':' skip this file if no FILETIME','line_number':20,'multiline':False]
['text':'! Create a time object from an initialized FILETIME struct.','line_number':30,'multiline':False]
['text':'!
 * Create a time object from an initialized FILETIME struct.
 * A FILETIME struct holds 100-nanosecond units (0.0000001). When
 * built with microsecond resolution the file_time's sub second value
 * will be truncated. Nanosecond resolution has no truncation.
 *
 * \note The function is templated on the FILETIME type, so that
 *       it can be used with both native FILETIME and the ad-hoc
 *       boost::detail::winapi::FILETIME_ type.
 ','line_number':31,'multiline':True]
['text':' https://svn.boost.org/trac/boost/ticket/2523','line_number':49,'multiline':False]
['text':' Since this function can be called with arbitrary times, including ones that','line_number':50,'multiline':False]
['text':' are before 1970-Jan-01, we'll have to cast the time a bit differently,','line_number':51,'multiline':False]
['text':' than it is done in the microsec_clock::file_time_to_microseconds function. This allows to','line_number':52,'multiline':False]
['text':' avoid integer wrapping for dates before 1970-Jan-01.','line_number':53,'multiline':False]
['text':' 100-nanos since 1601-Jan-01','line_number':55,'multiline':False]
['text':' 100-nanoseconds since the last second','line_number':58,'multiline':False]
['text':' microseconds since the last second','line_number':60,'multiline':False]
['text':' nanoseconds since the last second','line_number':62,'multiline':False]
['text':' split sec into usable chunks: days, hours, minutes, & seconds','line_number':65,'multiline':False]
['text':' seconds per day','line_number':66,'multiline':False]
['text':' sec_per_hour','line_number':69,'multiline':False]
['text':' sec_per_min','line_number':71,'multiline':False]
['text':' seconds','line_number':73,'multiline':False]
['text':' boost::date_time','line_number':80,'multiline':False]
['text':' BOOST_HAS_FTIME','line_number':82,'multiline':False]
['text':' DATE_TIME_FILETIME_FUNCTIONS_HPP__','line_number':84,'multiline':False]
