['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! Functor to iterate a fixed number of days','line_number':19,'multiline':False]
['text':'! Provides calculation to find next nth month given a date','line_number':39,'multiline':False]
['text':'! This adjustment function provides the logic for 'month-based'
   *  advancement on a ymd based calendar.  The policy it uses
   *  to handle the non existant end of month days is to back
   *  up to the last day of the month.  Also, if the starting
   *  date is the last day of a month, this functor will attempt
   *  to adjust to the end of the month.

   ','line_number':40,'multiline':True]
['text':'force the value to the end of month','line_number':65,'multiline':False]
['text':'calc the year wrap around, add() returns 0 or 1 if wrapped','line_number':70,'multiline':False]
['text':'       std::cout << "trace wi: " << wi.as_int() << std::endl;','line_number':72,'multiline':False]
['text':'       std::cout << "trace year: " << year << std::endl;','line_number':73,'multiline':False]
['text':'find the last day for the new month','line_number':74,'multiline':False]
['text':'original was the end of month -- force to last day of month','line_number':76,'multiline':False]
['text':'! Returns a negative duration_type','line_number':86,'multiline':False]
['text':'force the value to the end of month','line_number':94,'multiline':False]
['text':'calc the year wrap around, add() returns 0 or 1 if wrapped','line_number':99,'multiline':False]
['text':'find the last day for the new month','line_number':101,'multiline':False]
['text':'original was the end of month -- force to last day of month','line_number':103,'multiline':False]
['text':'! Functor to iterate a over weeks','line_number':119,'multiline':False]
['text':'! Functor to iterate by a year adjusting for leap years','line_number':139,'multiline':False]
['text':'typedef typename date_type::year_type year_type;','line_number':144,'multiline':False]
['text':'namespace date_time','line_number':160,'multiline':False]
