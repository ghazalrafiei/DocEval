['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the 
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland 
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! @file local_time_adjustor.hpp
  Time adjustment calculations for local times
','line_number':12,'multiline':True]
['text':' boost::date_time::dst_flags','line_number':21,'multiline':False]
['text':' not_a_date_time','line_number':22,'multiline':False]
['text':'! Provides a base offset adjustment from utc','line_number':28,'multiline':False]
['text':'! Allow sliding utc adjustment with fixed dst rules','line_number':47,'multiline':False]
['text':'! Presumes local time','line_number':59,'multiline':False]
['text':'! Embed the rules for local time adjustments at compile time','line_number':77,'multiline':False]
['text':'! Calculates the offset from a utc time to local based on dst and utc offset','line_number':85,'multiline':False]
['text':'! @param t UTC time to calculate offset to local time
       *  This adjustment depends on the following observations about the
       *  workings of the DST boundary offset.  Since UTC time labels are
       *  monotonically increasing we can determine if a given local time
       *  is in DST or not and therefore adjust the offset appropriately.
       * 
       *  The logic is as follows.  Starting with UTC time use the offset to
       *  create a label for an non-dst adjusted local time.  Then call
       *  dst_rules::local_is_dst with the non adjust local time.  The
       *  results of this function will either unabiguously decide that
       *  the initial local time is in dst or return an illegal or
       *  ambiguous result.  An illegal result only occurs at the end
       *  of dst (where labels are skipped) and indicates that dst has
       *  ended.  An ambiguous result means that we need to recheck by
       *  making a dst adjustment and then rechecking.  If the dst offset
       *  is added to the utc time and the recheck proves non-ambiguous
       *  then we are past the boundary.  If it is still ambiguous then
       *  we are ahead of the boundary and dst is still in effect.
       *
       *  TODO -- check if all dst offsets are positive.  If not then
       *  the algorithm needs to check for this and reverse the 
       *  illegal/ambiguous logic.
       ','line_number':86,'multiline':True]
['text':'get initial local time guess by applying utc offset','line_number':111,'multiline':False]
['text':'if still ambibuous then the utc time still translates to a dst time','line_number':122,'multiline':False]
['text':' we are past the dst boundary','line_number':126,'multiline':False]
['text':'case','line_number':131,'multiline':False]
['text':'TODO  better exception type','line_number':132,'multiline':False]
['text':' should never reach','line_number':134,'multiline':False]
['text':'! Get the offset to UTC given a local time','line_number':137,'multiline':False]
['text':' should never reach','line_number':157,'multiline':False]
['text':'why ask why?','line_number':165,'multiline':False]
['text':'! Template that simplifies the creation of local time calculator ','line_number':167,'multiline':False]
['text':'! Use this template to create the timezone to utc convertors as required.
     * 
     *  This class will also work for other regions that don't use dst and
     *  have a utc offset which is an integral number of hours.
     *
     *  <b>Template Parameters</b>
     *  -time_type  -- Time class to use
     *  -utc_offset -- Number hours local time is adjust from utc
     *  -use_dst -- true (default) if region uses dst, false otherwise
     *  For example:
     *  @code
     *  //eastern timezone is utc-5
     typedef date_time::local_adjustor<ptime, -5, us_dst> us_eastern;
     typedef date_time::local_adjustor<ptime, -6, us_dst> us_central;
     typedef date_time::local_adjustor<ptime, -7, us_dst> us_mountain;
     typedef date_time::local_adjustor<ptime, -8, us_dst> us_pacific;
     typedef date_time::local_adjustor<ptime, -7, no_dst> us_arizona;
     @endcode
      
    ','line_number':168,'multiline':True]
['text':'! Convert a utc time to local time','line_number':198,'multiline':False]
['text':'! Convert a local time to utc','line_number':204,'multiline':False]
['text':'namespace date_time','line_number':214,'multiline':False]
