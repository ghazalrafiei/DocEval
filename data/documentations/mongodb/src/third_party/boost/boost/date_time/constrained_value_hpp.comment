['text':' Copyright (c) 2002,2003 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the 
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland 
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! Namespace containing constrained_value template and types','line_number':21,'multiline':False]
['text':'! Represent a min or max violation type','line_number':23,'multiline':False]
['text':'! A template to specify a constrained basic value type','line_number':26,'multiline':False]
['text':'! This template provides a quick way to generate
   *  an integer type with a constrained range.  The type
   *  provides for the ability to specify the min, max, and
   *  and error handling policy.
   *  
   *  <b>value policies</b>
   *  A class that provides the range limits via the min and
   *  max functions as well as a function on_error that 
   *  determines how errors are handled.  A common strategy
   *  would be to assert or throw and exception.  The on_error
   *  is passed both the current value and the new value that
   *  is in error.
   *
   ','line_number':27,'multiline':True]
['text':'    typedef except_type exception_type;','line_number':45,'multiline':False]
['text':'! Return the max allowed value (traits method)','line_number':55,'multiline':False]
['text':'! Return the min allowed value (traits method)','line_number':59,'multiline':False]
['text':'! Coerce into the representation type','line_number':63,'multiline':False]
['text':'adding 1 below gets rid of a compiler warning which occurs when the ','line_number':70,'multiline':False]
['text':'min_value is 0 and the type is unsigned....','line_number':71,'multiline':False]
['text':'! Template to shortcut the constrained_value policy creation process','line_number':84,'multiline':False]
['text':' In order to support throw_exception mechanism in the BOOST_NO_EXCEPTIONS mode,','line_number':91,'multiline':False]
['text':' we'll have to provide a way to acquire std::exception from the exception being thrown.','line_number':92,'multiline':False]
['text':' However, we cannot derive from it, since it would make it interceptable by this class,','line_number':93,'multiline':False]
['text':' which might not be what the user wanted.','line_number':94,'multiline':False]
['text':' TODO: Make the message more descriptive by using arguments to on_error','line_number':97,'multiline':False]
['text':'namespace CV','line_number':124,'multiline':False]
