['text':' Copyright (c) 2002,2003,2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 ','line_number':4,'multiline':True]
['text':'! @file date_generators.hpp
  Definition and implementation of date algorithm templates
','line_number':12,'multiline':True]
['text':'! Base class for all generators that take a year and produce a date.','line_number':25,'multiline':False]
['text':'! This class is a base class for polymorphic function objects that take
    a year and produce a concrete date.
    @tparam date_type The type representing a date.  This type must
    export a calender_type which defines a year_type.
  ','line_number':26,'multiline':True]
['text':'! Returns a string for use in a POSIX time_zone string','line_number':40,'multiline':False]
['text':'! Generates a date by applying the year to the given month and day.','line_number':44,'multiline':False]
['text':'!
    Example usage:
    @code
    partial_date pd(1, Jan);
    partial_date pd2(70);
    date d = pd.get_date(2002); //2002-Jan-01
    date d2 = pd2.get_date(2002); //2002-Mar-10
    @endcode
    \ingroup date_alg
  ','line_number':45,'multiline':True]
['text':'! Partial date created from number of days into year. Range 1-366','line_number':69,'multiline':False]
['text':'! Allowable values range from 1 to 366. 1=Jan1, 366=Dec31. If argument
    * exceeds range, partial_date will be created with closest in-range value.
    * 60 will always be Feb29, if get_date() is called with a non-leap year
    * an exception will be thrown ','line_number':70,'multiline':True]
['text':' default values','line_number':75,'multiline':False]
['text':' prevents wrapping','line_number':80,'multiline':False]
['text':'! Return a concrete date when provided with a year specific year.','line_number':91,'multiline':False]
['text':'! Will throw an 'invalid_argument' exception if a partial_date object,
    * instantiated with Feb-29, has get_date called with a non-leap year.
    * Example:
    * @code
    * partial_date pd(29, Feb);
    * pd.get_date(2003); // throws invalid_argument exception
    * pg.get_date(2000); // returns 2000-2-29
    * @endcode
         ','line_number':92,'multiline':True]
['text':'return date_type(y, month_, day_);','line_number':113,'multiline':False]
['text':'months are equal','line_number':123,'multiline':False]
['text':' added for streaming purposes','line_number':127,'multiline':False]
['text':'! Returns string suitable for use in POSIX time zone string','line_number':137,'multiline':False]
['text':'! Returns string formatted with up to 3 digits:
    * Jan-01 == "0"
    * Feb-29 == "58"
    * Dec-31 == "365" ','line_number':138,'multiline':True]
['text':' numbered 0-365 while day_of_year is 1 based...','line_number':147,'multiline':False]
['text':'! Returns nth arg as string. 1 -> "first", 2 -> "second", max is 5.','line_number':156,'multiline':False]
['text':'! Useful generator functor for finding holidays','line_number':169,'multiline':False]
['text':'! Based on the idea in Cal. Calc. for finding holidays that are
   *  the 'first Monday of September'. When instantiated with
   *  'fifth' kday of month, the result will be the last kday of month
   *  which can be the fourth or fifth depending on the structure of
   *  the month.
   *
   *  The algorithm here basically guesses for the first
   *  day of the month.  Then finds the first day of the correct
   *  type.  That is, if the first of the month is a Tuesday
   *  and it needs Wednesday then we simply increment by a day
   *  and then we can add the length of a week until we get
   *  to the 'nth kday'.  There are probably more efficient
   *  algorithms based on using a mod 7, but this one works
   *  reasonably well for basic applications.
   *  \ingroup date_alg
   ','line_number':170,'multiline':True]
['text':'! Return a concrete date when provided with a year specific year.','line_number':203,'multiline':False]
['text':'first day of month','line_number':206,'multiline':False]
['text':' remove wrapping to next month behavior','line_number':217,'multiline':False]
['text':' added for streaming','line_number':223,'multiline':False]
['text':'! Returns string suitable for use in POSIX time zone string','line_number':240,'multiline':False]
['text':'! Returns a string formatted as "M4.3.0" ==> 3rd Sunday in April. ','line_number':241,'multiline':True]
['text':'! Useful generator functor for finding holidays and daylight savings','line_number':257,'multiline':False]
['text':'! Similar to nth_kday_of_month, but requires less paramters
   *  \ingroup date_alg
   ','line_number':258,'multiline':True]
['text':'!Specify the first 'Sunday' in 'April' spec','line_number':270,'multiline':False]
['text':'!@param dow The day of week, eg: Sunday, Monday, etc
     * @param m The month of the year, eg: Jan, Feb, Mar, etc
     ','line_number':271,'multiline':True]
['text':'! Return a concrete date when provided with a year specific year.','line_number':278,'multiline':False]
['text':' added for streaming','line_number':288,'multiline':False]
['text':'! Returns string suitable for use in POSIX time zone string','line_number':297,'multiline':False]
['text':'! Returns a string formatted as "M4.1.0" ==> 1st Sunday in April. ','line_number':298,'multiline':True]
['text':'! Calculate something like Last Sunday of January','line_number':315,'multiline':False]
['text':'! Useful generator functor for finding holidays and daylight savings
   *  Get the last day of the month and then calculate the difference
   *  to the last previous day.
   *  @tparam date_type A date class that exports day_of_week, month_type, etc.
   *  \ingroup date_alg
   ','line_number':316,'multiline':True]
['text':'!Specify the date spec like last 'Sunday' in 'April' spec','line_number':331,'multiline':False]
['text':'!@param dow The day of week, eg: Sunday, Monday, etc
     * @param m The month of the year, eg: Jan, Feb, Mar, etc
     ','line_number':332,'multiline':True]
['text':'! Return a concrete date when provided with a year specific year.','line_number':339,'multiline':False]
['text':' added for streaming','line_number':349,'multiline':False]
['text':'! Returns string suitable for use in POSIX time zone string','line_number':358,'multiline':False]
['text':'! Returns a string formatted as "M4.5.0" ==> last Sunday in April. ','line_number':359,'multiline':True]
['text':'! Calculate something like "First Sunday after Jan 1,2002','line_number':375,'multiline':False]
['text':'! Date generator that takes a date and finds kday after
   *@code
     typedef boost::date_time::first_kday_after<date> firstkdayafter;
     firstkdayafter fkaf(Monday);
     fkaf.get_date(date(2002,Feb,1));
   @endcode
   *  \ingroup date_alg
   ','line_number':376,'multiline':True]
['text':'! Return next kday given.','line_number':394,'multiline':False]
['text':' added for streaming','line_number':404,'multiline':False]
['text':'! Calculate something like "First Sunday before Jan 1,2002','line_number':413,'multiline':False]
['text':'! Date generator that takes a date and finds kday after
   *@code
     typedef boost::date_time::first_kday_before<date> firstkdaybefore;
     firstkdaybefore fkbf(Monday);
     fkbf.get_date(date(2002,Feb,1));
   @endcode
   *  \ingroup date_alg
   ','line_number':414,'multiline':True]
['text':'! Return next kday given.','line_number':432,'multiline':False]
['text':' added for streaming','line_number':442,'multiline':False]
['text':'! Calculates the number of days until the next weekday','line_number':451,'multiline':False]
['text':'! Calculates the number of days until the next weekday.
   * If the date given falls on a Sunday and the given weekday
   * is Tuesday the result will be 2 days ','line_number':452,'multiline':True]
['text':'! Calculates the number of days since the previous weekday','line_number':468,'multiline':False]
['text':'! Calculates the number of days since the previous weekday
   * If the date given falls on a Sunday and the given weekday
   * is Tuesday the result will be 5 days. The answer will be a positive
   * number because Tuesday is 5 days before Sunday, not -5 days before. ','line_number':469,'multiline':True]
['text':' we want a number of days, not an offset. The value returned must','line_number':483,'multiline':False]
['text':' be zero or larger.','line_number':484,'multiline':False]
['text':'! Generates a date object representing the date of the following weekday from the given date','line_number':488,'multiline':False]
['text':'! Generates a date object representing the date of the following
   * weekday from the given date. If the date given is 2004-May-9
   * (a Sunday) and the given weekday is Tuesday then the resulting date
   * will be 2004-May-11. ','line_number':489,'multiline':True]
['text':'! Generates a date object representing the date of the previous weekday from the given date','line_number':500,'multiline':False]
['text':'! Generates a date object representing the date of the previous
   * weekday from the given date. If the date given is 2004-May-9
   * (a Sunday) and the given weekday is Tuesday then the resulting date
   * will be 2004-May-4. ','line_number':501,'multiline':True]
['text':'namespace date_time','line_number':512,'multiline':False]
