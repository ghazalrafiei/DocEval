['text':' Multiply indexed container.
 *
 * Copyright 2003-2021 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]
['text':' keep it first to prevent nasty warns in MSVC ','line_number':18,'multiline':True]
['text':' namespace multi_index::detail ','line_number':86,'multiline':True]
['text':' spurious warning on multiple operator=()'s ','line_number':90,'multiline':True]
['text':' The "ISO C++ Template Parser" option in CW8.3 has a problem with the
 * lifetime of const references bound to temporaries --precisely what
 * scopeguards are.
 ','line_number':116,'multiline':True]
['text':' All types are inherited from super, a few are explicitly
   * brought forward here to save us some typename's.
   ','line_number':148,'multiline':True]
['text':' global project() needs to see this publicly ','line_number':168,'multiline':True]
['text':' construct/copy/destroy ','line_number':172,'multiline':True]
['text':' VisualAge seems to have an ETI issue with the default value for
     * argument al.
     ','line_number':186,'multiline':True]
['text':' VisualAge seems to have an ETI issue with the default values
     * for arguments args_list and al.
     ','line_number':217,'multiline':True]
['text':' As per http://www.boost.org/doc/html/move/emulation_limitations.html
   * #move.emulation_limitations.assignment_operator
   ','line_number':339,'multiline':True]
['text':' swap_allocators ','line_number':350,'multiline':True]
['text':' swap_allocators ','line_number':362,'multiline':True]
['text':' swap_allocators ','line_number':373,'multiline':True]
['text':' swap_allocators ','line_number':376,'multiline':True]
['text':' swap_allocators ','line_number':380,'multiline':True]
['text':' retrieval of indices by number ','line_number':411,'multiline':True]
['text':' retrieval of indices by tag ','line_number':436,'multiline':True]
['text':' projection of iterators by number ','line_number':467,'multiline':True]
['text':' fails in Sun C++ 5.7 ','line_number':487,'multiline':True]
['text':' fails in Sun C++ 5.7 ','line_number':503,'multiline':True]
['text':' projection of iterators by tag ','line_number':516,'multiline':True]
['text':' fails in Sun C++ 5.7 ','line_number':536,'multiline':True]
['text':' fails in Sun C++ 5.7 ','line_number':552,'multiline':True]
['text':' Not until this point are the indices required to be consistent,
     * hence the position of the invariant checker.
     ','line_number':595,'multiline':True]
['text':' Not until this point are the indices required to be consistent,
     * hence the position of the invariant checker.
     ','line_number':626,'multiline':True]
['text':' serialization ','line_number':1101,'multiline':True]
['text':' invariant stuff ','line_number':1174,'multiline':True]
['text':' C4522 ','line_number':1206,'multiline':True]
['text':' retrieval of indices by number ','line_number':1209,'multiline':True]
['text':' retrieval of indices by tag ','line_number':1269,'multiline':True]
['text':' projection of iterators by number ','line_number':1327,'multiline':True]
['text':' Sun C++ 5.7 fails ','line_number':1354,'multiline':True]
['text':' Sun C++ 5.7 fails ','line_number':1380,'multiline':True]
['text':' projection of iterators by tag ','line_number':1396,'multiline':True]
['text':' Sun C++ 5.7 fails ','line_number':1426,'multiline':True]
['text':' Sun C++ 5.7 fails ','line_number':1453,'multiline':True]
['text':' Comparison. Simple forward to first index. ','line_number':1469,'multiline':True]
['text':'  specialized algorithms ','line_number':1537,'multiline':True]
['text':' namespace multi_index ','line_number':1547,'multiline':True]
['text':' class version = 1 : we now serialize the size through
 * boost::serialization::collection_size_type.
 * class version = 2 : proper use of {save|load}_construct_data.
 ','line_number':1550,'multiline':True]
['text':' namespace serialization ','line_number':1563,'multiline':True]
['text':' Associated global functions are promoted to namespace boost, except
 * comparison operators and swap, which are meant to be Koenig looked-up.
 ','line_number':1566,'multiline':True]
['text':' namespace boost ','line_number':1573,'multiline':True]
