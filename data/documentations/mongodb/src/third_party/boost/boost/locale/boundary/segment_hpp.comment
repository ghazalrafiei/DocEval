['text':'','line_number':1,'multiline':False]
['text':'  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'/ \cond INTERNAL','line_number':24,'multiline':False]
['text':'/ \endcond','line_number':76,'multiline':False]
['text':'/','line_number':78,'multiline':False]
['text':'/ \addtogroup boundary','line_number':79,'multiline':False]
['text':'/ @{','line_number':80,'multiline':False]
['text':'/','line_number':82,'multiline':False]
['text':'/ \brief a segment object that represents a pair of two iterators that define the range where','line_number':83,'multiline':False]
['text':'/ this segment exits and a rule that defines it.','line_number':84,'multiline':False]
['text':'/','line_number':85,'multiline':False]
['text':'/ This type of object is dereferenced by the iterators of segment_index. Using a rule() member function','line_number':86,'multiline':False]
['text':'/ you can get a specific rule this segment was selected with. For example, when you use','line_number':87,'multiline':False]
['text':'/ word boundary analysis, you can check if the specific word contains Kana letters by checking (rule() & \ref word_kana)!=0','line_number':88,'multiline':False]
['text':'/ For a sentence analysis you can check if the sentence is selected because a sentence terminator is found (\ref sentence_term) or','line_number':89,'multiline':False]
['text':'/ there is a line break (\ref sentence_sep).','line_number':90,'multiline':False]
['text':'/','line_number':91,'multiline':False]
['text':'/ This object can be automatically converted to std::basic_string with the same type of character. It is also','line_number':92,'multiline':False]
['text':'/ valid range that has begin() and end() member functions returning iterators on the location of the segment.','line_number':93,'multiline':False]
['text':'/','line_number':94,'multiline':False]
['text':'/ \see','line_number':95,'multiline':False]
['text':'/','line_number':96,'multiline':False]
['text':'/ - \ref segment_index','line_number':97,'multiline':False]
['text':'/ - \ref boundary_point ','line_number':98,'multiline':False]
['text':'/ - \ref boundary_point_index ','line_number':99,'multiline':False]
['text':'/','line_number':100,'multiline':False]
['text':'/','line_number':104,'multiline':False]
['text':'/ The type of the underlying character ','line_number':105,'multiline':False]
['text':'/','line_number':106,'multiline':False]
['text':'/','line_number':108,'multiline':False]
['text':'/ The type of the string it is converted to','line_number':109,'multiline':False]
['text':'/','line_number':110,'multiline':False]
['text':'/','line_number':112,'multiline':False]
['text':'/ The value that iterators return  - the character itself','line_number':113,'multiline':False]
['text':'/','line_number':114,'multiline':False]
['text':'/','line_number':116,'multiline':False]
['text':'/ The iterator that allows to iterate the range','line_number':117,'multiline':False]
['text':'/','line_number':118,'multiline':False]
['text':'/','line_number':120,'multiline':False]
['text':'/ The iterator that allows to iterate the range','line_number':121,'multiline':False]
['text':'/','line_number':122,'multiline':False]
['text':'/','line_number':124,'multiline':False]
['text':'/ The type that represent a difference between two iterators','line_number':125,'multiline':False]
['text':'/','line_number':126,'multiline':False]
['text':'/','line_number':129,'multiline':False]
['text':'/ Default constructor','line_number':130,'multiline':False]
['text':'/','line_number':131,'multiline':False]
['text':'/','line_number':133,'multiline':False]
['text':'/ Create a segment using two iterators and a rule that represents this point','line_number':134,'multiline':False]
['text':'/','line_number':135,'multiline':False]
['text':'/','line_number':141,'multiline':False]
['text':'/ Set the start of the range','line_number':142,'multiline':False]
['text':'/','line_number':143,'multiline':False]
['text':'/','line_number':148,'multiline':False]
['text':'/ Set the end of the range','line_number':149,'multiline':False]
['text':'/','line_number':150,'multiline':False]
['text':'/','line_number':156,'multiline':False]
['text':'/ Get the start of the range','line_number':157,'multiline':False]
['text':'/','line_number':158,'multiline':False]
['text':'/','line_number':163,'multiline':False]
['text':'/ Set the end of the range','line_number':164,'multiline':False]
['text':'/','line_number':165,'multiline':False]
['text':'/','line_number':171,'multiline':False]
['text':'/ Convert the range to a string automatically','line_number':172,'multiline':False]
['text':'/','line_number':173,'multiline':False]
['text':'/','line_number':180,'multiline':False]
['text':'/ Create a string from the range explicitly','line_number':181,'multiline':False]
['text':'/','line_number':182,'multiline':False]
['text':'/','line_number':188,'multiline':False]
['text':'/ Get the length of the text chunk','line_number':189,'multiline':False]
['text':'/','line_number':190,'multiline':False]
['text':'/','line_number':197,'multiline':False]
['text':'/ Check if the segment is empty','line_number':198,'multiline':False]
['text':'/','line_number':199,'multiline':False]
['text':'/','line_number':205,'multiline':False]
['text':'/ Get the rule that is used for selection of this segment.','line_number':206,'multiline':False]
['text':'/','line_number':207,'multiline':False]
['text':'/','line_number':212,'multiline':False]
['text':'/ Set a rule that is used for segment selection','line_number':213,'multiline':False]
['text':'/','line_number':214,'multiline':False]
['text':' make sure we override std::pair's operator==','line_number':220,'multiline':False]
['text':'/ Compare two segments','line_number':222,'multiline':False]
['text':'/ Compare two segments','line_number':228,'multiline':False]
['text':'/ Compare two segments','line_number':240,'multiline':False]
['text':'/ Compare two segments','line_number':246,'multiline':False]
['text':'/ Compare two segments','line_number':253,'multiline':False]
['text':'/ Compare two segments','line_number':259,'multiline':False]
['text':'/ Compare two segments','line_number':265,'multiline':False]
['text':'/ Compare two segments','line_number':271,'multiline':False]
['text':'/ Compare string and segment','line_number':278,'multiline':False]
['text':'/ Compare string and segment','line_number':284,'multiline':False]
['text':'/ Compare string and segment','line_number':291,'multiline':False]
['text':'/ Compare string and segment','line_number':297,'multiline':False]
['text':'/ Compare string and segment','line_number':303,'multiline':False]
['text':'/ Compare string and segment','line_number':309,'multiline':False]
['text':'/ Compare string and segment','line_number':316,'multiline':False]
['text':'/ Compare string and segment','line_number':322,'multiline':False]
['text':'/ Compare string and segment','line_number':329,'multiline':False]
['text':'/ Compare string and segment','line_number':335,'multiline':False]
['text':'/ Compare string and segment','line_number':341,'multiline':False]
['text':'/ Compare string and segment','line_number':347,'multiline':False]
['text':'/ Compare C string and segment','line_number':355,'multiline':False]
['text':'/ Compare C string and segment','line_number':361,'multiline':False]
['text':'/ Compare C string and segment','line_number':368,'multiline':False]
['text':'/ Compare C string and segment','line_number':374,'multiline':False]
['text':'/ Compare C string and segment','line_number':380,'multiline':False]
['text':'/ Compare C string and segment','line_number':386,'multiline':False]
['text':'/ Compare C string and segment','line_number':393,'multiline':False]
['text':'/ Compare C string and segment','line_number':399,'multiline':False]
['text':'/ Compare C string and segment','line_number':406,'multiline':False]
['text':'/ Compare C string and segment','line_number':412,'multiline':False]
['text':'/ Compare C string and segment','line_number':418,'multiline':False]
['text':'/ Compare C string and segment','line_number':424,'multiline':False]
['text':'/< convenience typedef','line_number':436,'multiline':False]
['text':'/< convenience typedef','line_number':437,'multiline':False]
['text':'/< convenience typedef','line_number':439,'multiline':False]
['text':'/< convenience typedef','line_number':442,'multiline':False]
['text':'/< convenience typedef','line_number':445,'multiline':False]
['text':'/< convenience typedef','line_number':446,'multiline':False]
['text':'/< convenience typedef','line_number':448,'multiline':False]
['text':'/< convenience typedef','line_number':451,'multiline':False]
['text':'/','line_number':458,'multiline':False]
['text':'/ Write the segment to the stream character by character','line_number':459,'multiline':False]
['text':'/','line_number':460,'multiline':False]
['text':'/ @}','line_number':471,'multiline':False]
['text':' boundary','line_number':473,'multiline':False]
['text':' locale','line_number':474,'multiline':False]
['text':' boost','line_number':475,'multiline':False]
['text':' vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4','line_number':483,'multiline':False]
