['text':'','line_number':1,'multiline':False]
['text':'  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'/','line_number':15,'multiline':False]
['text':'/ \brief Namespace that holds basic operations on UTF encoded sequences ','line_number':16,'multiline':False]
['text':'/','line_number':17,'multiline':False]
['text':'/ All functions defined in this namespace do not require linking with Boost.Locale library','line_number':18,'multiline':False]
['text':'/','line_number':19,'multiline':False]
['text':'/ \cond INTERNAL','line_number':21,'multiline':False]
['text':'/ \endcond','line_number':29,'multiline':False]
['text':'/','line_number':31,'multiline':False]
['text':'/ \brief The integral type that can hold a Unicode code point','line_number':32,'multiline':False]
['text':'/','line_number':33,'multiline':False]
['text':'/','line_number':36,'multiline':False]
['text':'/ \brief Special constant that defines illegal code point','line_number':37,'multiline':False]
['text':'/','line_number':38,'multiline':False]
['text':'/','line_number':41,'multiline':False]
['text':'/ \brief Special constant that defines incomplete code point','line_number':42,'multiline':False]
['text':'/','line_number':43,'multiline':False]
['text':'/','line_number':46,'multiline':False]
['text':'/ \brief the function checks if \a v is a valid code point','line_number':47,'multiline':False]
['text':'/','line_number':48,'multiline':False]
['text':' surragates','line_number':53,'multiline':False]
['text':'/','line_number':59,'multiline':False]
['text':'/ \brief UTF Traits class - functions to convert UTF sequences to and from Unicode code points','line_number':60,'multiline':False]
['text':'/','line_number':61,'multiline':False]
['text':'/','line_number':64,'multiline':False]
['text':'/ The type of the character','line_number':65,'multiline':False]
['text':'/','line_number':66,'multiline':False]
['text':'/','line_number':68,'multiline':False]
['text':'/ Read one code point from the range [p,e) and return it.','line_number':69,'multiline':False]
['text':'/','line_number':70,'multiline':False]
['text':'/ - If the sequence that was read is incomplete sequence returns \ref incomplete,','line_number':71,'multiline':False]
['text':'/ - If illegal sequence detected returns \ref illegal','line_number':72,'multiline':False]
['text':'/','line_number':73,'multiline':False]
['text':'/ Requirements','line_number':74,'multiline':False]
['text':'/','line_number':75,'multiline':False]
['text':'/ - Iterator is valid input iterator','line_number':76,'multiline':False]
['text':'/','line_number':77,'multiline':False]
['text':'/ Postconditions','line_number':78,'multiline':False]
['text':'/','line_number':79,'multiline':False]
['text':'/ - p points to the last consumed character','line_number':80,'multiline':False]
['text':'/ ','line_number':81,'multiline':False]
['text':'/','line_number':85,'multiline':False]
['text':'/ Maximal width of valid sequence in the code units:','line_number':86,'multiline':False]
['text':'/','line_number':87,'multiline':False]
['text':'/ - UTF-8  - 4','line_number':88,'multiline':False]
['text':'/ - UTF-16 - 2','line_number':89,'multiline':False]
['text':'/ - UTF-32 - 1','line_number':90,'multiline':False]
['text':'/','line_number':91,'multiline':False]
['text':'/','line_number':93,'multiline':False]
['text':'/ The width of specific code point in the code units.','line_number':94,'multiline':False]
['text':'/','line_number':95,'multiline':False]
['text':'/ Requirement: value is a valid Unicode code point','line_number':96,'multiline':False]
['text':'/ Returns value in range [1..max_width]','line_number':97,'multiline':False]
['text':'/','line_number':98,'multiline':False]
['text':'/','line_number':101,'multiline':False]
['text':'/ Get the size of the trail part of variable length encoded sequence.','line_number':102,'multiline':False]
['text':'/','line_number':103,'multiline':False]
['text':'/ Returns -1 if C is not valid lead character','line_number':104,'multiline':False]
['text':'/ ','line_number':105,'multiline':False]
['text':'/','line_number':107,'multiline':False]
['text':'/ Returns true if c is trail code unit, always false for UTF-32','line_number':108,'multiline':False]
['text':'/','line_number':109,'multiline':False]
['text':'/','line_number':111,'multiline':False]
['text':'/ Returns true if c is lead code unit, always true of UTF-32','line_number':112,'multiline':False]
['text':'/','line_number':113,'multiline':False]
['text':'/','line_number':116,'multiline':False]
['text':'/ Convert valid Unicode code point \a value to the UTF sequence.','line_number':117,'multiline':False]
['text':'/','line_number':118,'multiline':False]
['text':'/ Requirements: ','line_number':119,'multiline':False]
['text':'/','line_number':120,'multiline':False]
['text':'/ - \a value is valid code point','line_number':121,'multiline':False]
['text':'/ - \a out is an output iterator should be able to accept at least width(value) units','line_number':122,'multiline':False]
['text':'/ ','line_number':123,'multiline':False]
['text':'/ Returns the iterator past the last written code unit.','line_number':124,'multiline':False]
['text':'/','line_number':125,'multiline':False]
['text':'/','line_number':128,'multiline':False]
['text':'/ Decodes valid UTF sequence that is pointed by p into code point.','line_number':129,'multiline':False]
['text':'/','line_number':130,'multiline':False]
['text':'/ If the sequence is invalid or points to end the behavior is undefined','line_number':131,'multiline':False]
['text':'/','line_number':132,'multiline':False]
['text':' First byte is fully validated here','line_number':200,'multiline':False]
['text':'','line_number':206,'multiline':False]
['text':' Ok as only ASCII may be of size = 0','line_number':207,'multiline':False]
['text':' also optimize for ASCII text','line_number':208,'multiline':False]
['text':'','line_number':209,'multiline':False]
['text':' Read the rest','line_number':215,'multiline':False]
['text':' Check code point validity: no surrogates and','line_number':241,'multiline':False]
['text':' valid range','line_number':242,'multiline':False]
['text':' make sure it is the most compact representation','line_number':246,'multiline':False]
['text':' non-BMP rare','line_number':265,'multiline':False]
['text':' utf8','line_number':309,'multiline':False]
['text':' See RFC 2781','line_number':315,'multiline':False]
['text':'/','line_number':336,'multiline':False]
['text':'/ Returns true if c is trail code unit, always false for UTF-32','line_number':337,'multiline':False]
['text':'/','line_number':338,'multiline':False]
['text':'/','line_number':343,'multiline':False]
['text':'/ Returns true if c is lead code unit, always true of UTF-32','line_number':344,'multiline':False]
['text':'/','line_number':345,'multiline':False]
['text':' utf16;','line_number':398,'multiline':False]
['text':'c','line_number':410,'multiline':True]
['text':'c','line_number':414,'multiline':True]
['text':'u','line_number':436,'multiline':True]
['text':' utf32','line_number':447,'multiline':False]
['text':' utf','line_number':452,'multiline':False]
['text':' locale','line_number':453,'multiline':False]
['text':' boost','line_number':454,'multiline':False]
['text':' vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4','line_number':459,'multiline':False]
