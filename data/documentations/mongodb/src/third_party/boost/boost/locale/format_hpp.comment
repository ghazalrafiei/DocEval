['text':'','line_number':1,'multiline':False]
['text':'  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'/','line_number':26,'multiline':False]
['text':'/ \defgroup format Format','line_number':27,'multiline':False]
['text':'/','line_number':28,'multiline':False]
['text':'/ This module provides printf like functionality integrated into iostreams and suitable for localization','line_number':29,'multiline':False]
['text':'/','line_number':30,'multiline':False]
['text':'/ @{','line_number':31,'multiline':False]
['text':'/','line_number':32,'multiline':False]
['text':'/ \cond INTERNAL','line_number':34,'multiline':False]
['text':'ptr','line_number':84,'multiline':True]
['text':' formattible','line_number':98,'multiline':False]
['text':'/ \endcond','line_number':130,'multiline':False]
['text':'/','line_number':132,'multiline':False]
['text':'/ \brief a printf like class that allows type-safe and locale aware message formatting','line_number':133,'multiline':False]
['text':'/','line_number':134,'multiline':False]
['text':'/ This class creates a formatted message similar to printf or boost::format and receives','line_number':135,'multiline':False]
['text':'/ formatted entries via operator %.','line_number':136,'multiline':False]
['text':'/','line_number':137,'multiline':False]
['text':'/ For example','line_number':138,'multiline':False]
['text':'/ \code','line_number':139,'multiline':False]
['text':'/  cout << format("Hello {1}, you are {2} years old") % name % age << endl;','line_number':140,'multiline':False]
['text':'/ \endcode','line_number':141,'multiline':False]
['text':'/','line_number':142,'multiline':False]
['text':'/ Formatting is enclosed between curly brackets \c { \c } and defined by a comma separated list of flags in the format key[=value]','line_number':143,'multiline':False]
['text':'/ value may also be text included between single quotes \c ' that is used for special purposes where inclusion of non-ASCII','line_number':144,'multiline':False]
['text':'/ text is allowed','line_number':145,'multiline':False]
['text':'/','line_number':146,'multiline':False]
['text':'/ Including of literal \c { and \c } is possible by specifying double brackets \c {{ and \c }} accordingly.','line_number':147,'multiline':False]
['text':'/','line_number':148,'multiline':False]
['text':'/','line_number':149,'multiline':False]
['text':'/ For example:','line_number':150,'multiline':False]
['text':'/','line_number':151,'multiline':False]
['text':'/ \code ','line_number':152,'multiline':False]
['text':'/   cout << format("The height of water at {1,time} is {2,num=fixed,precision=3}") % time % height;','line_number':153,'multiline':False]
['text':'/ \endcode','line_number':154,'multiline':False]
['text':'/','line_number':155,'multiline':False]
['text':'/ The special key -- a number without a value defines the position of an input parameter.','line_number':156,'multiline':False]
['text':'/ List of keys:','line_number':157,'multiline':False]
['text':'/ -   \c [0-9]+ -- digits, the index of a formatted parameter -- mandatory key.','line_number':158,'multiline':False]
['text':'/ -   \c num or \c number -- format a number. Optional values are:','line_number':159,'multiline':False]
['text':'/     -  \c hex -- display hexadecimal number','line_number':160,'multiline':False]
['text':'/     -  \c oct -- display in octal format','line_number':161,'multiline':False]
['text':'/     -  \c sci or \c scientific -- display in scientific format','line_number':162,'multiline':False]
['text':'/     -  \c fix or \c fixed -- display in fixed format','line_number':163,'multiline':False]
['text':'/     .      ','line_number':164,'multiline':False]
['text':'/     For example \c number=sci','line_number':165,'multiline':False]
['text':'/ -  \c cur or \c currency -- format currency. Optional values are:','line_number':166,'multiline':False]
['text':'/ ','line_number':167,'multiline':False]
['text':'/     -  \c iso -- display using ISO currency symbol.','line_number':168,'multiline':False]
['text':'/     -  \c nat or \c national -- display using national currency symbol.','line_number':169,'multiline':False]
['text':'/     .','line_number':170,'multiline':False]
['text':'/ -  \c per or \c percent -- format percent value.','line_number':171,'multiline':False]
['text':'/ -  \c date, \c time , \c datetime or \c dt -- format date, time or date and time. Optional values are:','line_number':172,'multiline':False]
['text':'/     -  \c s or \c short -- display in short format','line_number':173,'multiline':False]
['text':'/     -  \c m or \c medium -- display in medium format.','line_number':174,'multiline':False]
['text':'/     -  \c l or \c long -- display in long format.','line_number':175,'multiline':False]
['text':'/     -  \c f or \c full -- display in full format.','line_number':176,'multiline':False]
['text':'/     .','line_number':177,'multiline':False]
['text':'/ -  \c ftime with string (quoted) parameter -- display as with \c strftime see, \c as::ftime manipulator','line_number':178,'multiline':False]
['text':'/ -  \c spell or \c spellout -- spell the number.','line_number':179,'multiline':False]
['text':'/ -  \c ord or \c ordinal -- format ordinal number (1st, 2nd... etc)','line_number':180,'multiline':False]
['text':'/ -  \c left or \c < -- align to left.','line_number':181,'multiline':False]
['text':'/ -  \c right or \c > -- align to right.','line_number':182,'multiline':False]
['text':'/ -  \c width or \c w -- set field width (requires parameter).','line_number':183,'multiline':False]
['text':'/ -  \c precision or \c p -- set precision (requires parameter).','line_number':184,'multiline':False]
['text':'/ -  \c locale -- with parameter -- switch locale for current operation. This command generates locale','line_number':185,'multiline':False]
['text':'/     with formatting facets giving more fine grained control of formatting. For example:','line_number':186,'multiline':False]
['text':'/    \code','line_number':187,'multiline':False]
['text':'/    cout << format("Today {1,date} ({1,date,locale=he_IL.UTF-8@calendar=hebrew,date} Hebrew Date)") % date;','line_number':188,'multiline':False]
['text':'/    \endcode','line_number':189,'multiline':False]
['text':'/ -  \c timezone or \c tz -- the name of the timezone to display the time in. For example:\n','line_number':190,'multiline':False]
['text':'/    \code','line_number':191,'multiline':False]
['text':'/    cout << format("Time is: Local {1,time}, ({1,time,tz=EET} Eastern European Time)") % date;','line_number':192,'multiline':False]
['text':'/    \endcode','line_number':193,'multiline':False]
['text':'/ -  \c local - display the time in local time','line_number':194,'multiline':False]
['text':'/ -  \c gmt - display the time in UTC time scale','line_number':195,'multiline':False]
['text':'/    \code','line_number':196,'multiline':False]
['text':'/    cout << format("Local time is: {1,time,local}, universal time is {1,time,gmt}") % time;','line_number':197,'multiline':False]
['text':'/    \endcode','line_number':198,'multiline':False]
['text':'/ ','line_number':199,'multiline':False]
['text':'/ ','line_number':200,'multiline':False]
['text':'/ Invalid formatting strings are slightly ignored. This would prevent from translator','line_number':201,'multiline':False]
['text':'/ to crash the program in unexpected location.','line_number':202,'multiline':False]
['text':'/ ','line_number':203,'multiline':False]
['text':'/< Underlying character type','line_number':207,'multiline':False]
['text':'/< The translation message type','line_number':208,'multiline':False]
['text':'/ \cond INTERNAL','line_number':209,'multiline':False]
['text':'/ \endcond ','line_number':211,'multiline':False]
['text':'/< string type for this type of character','line_number':213,'multiline':False]
['text':'/< output stream type for this type of character','line_number':214,'multiline':False]
['text':'/','line_number':217,'multiline':False]
['text':'/ Create a format class for \a format_string','line_number':218,'multiline':False]
['text':'/','line_number':219,'multiline':False]
['text':'/','line_number':226,'multiline':False]
['text':'/ Create a format class using message \a trans. The message if translated first according','line_number':227,'multiline':False]
['text':'/ to the rules of target locale and then interpreted as format string','line_number':228,'multiline':False]
['text':'/','line_number':229,'multiline':False]
['text':'/','line_number':237,'multiline':False]
['text':'/ Add new parameter to format list. The object should be a type','line_number':238,'multiline':False]
['text':'/ with defined expression out << object where \c out is \c std::basic_ostream.','line_number':239,'multiline':False]
['text':'/','line_number':240,'multiline':False]
['text':'/','line_number':248,'multiline':False]
['text':'/ Format a string using a locale \a loc','line_number':249,'multiline':False]
['text':'/','line_number':250,'multiline':False]
['text':'/','line_number':259,'multiline':False]
['text':'/ write a formatted string to output stream \a out using out's locale','line_number':260,'multiline':False]
['text':'/','line_number':261,'multiline':False]
['text':'','line_number':410,'multiline':False]
['text':' Non-copyable ','line_number':411,'multiline':False]
['text':'','line_number':412,'multiline':False]
['text':'/','line_number':454,'multiline':False]
['text':'/ Write formatted message to stream.','line_number':455,'multiline':False]
['text':'/','line_number':456,'multiline':False]
['text':'/ This operator actually causes actual text formatting. It uses the locale of \a out stream','line_number':457,'multiline':False]
['text':'/','line_number':458,'multiline':False]
['text':'/','line_number':467,'multiline':False]
['text':'/ Definition of char based format','line_number':468,'multiline':False]
['text':'/','line_number':469,'multiline':False]
['text':'/','line_number':472,'multiline':False]
['text':'/ Definition of wchar_t based format','line_number':473,'multiline':False]
['text':'/','line_number':474,'multiline':False]
['text':'/','line_number':478,'multiline':False]
['text':'/ Definition of char16_t based format','line_number':479,'multiline':False]
['text':'/','line_number':480,'multiline':False]
['text':'/','line_number':485,'multiline':False]
['text':'/ Definition of char32_t based format','line_number':486,'multiline':False]
['text':'/','line_number':487,'multiline':False]
['text':'/','line_number':491,'multiline':False]
['text':'/ @}','line_number':492,'multiline':False]
['text':'/','line_number':493,'multiline':False]
['text':'/','line_number':504,'multiline':False]
['text':'/ \example hello.cpp','line_number':505,'multiline':False]
['text':'/','line_number':506,'multiline':False]
['text':'/ Basic example of using various functions provided by this library','line_number':507,'multiline':False]
['text':'/','line_number':508,'multiline':False]
['text':'/ \example whello.cpp','line_number':509,'multiline':False]
['text':'/','line_number':510,'multiline':False]
['text':'/ Basic example of using various functions with wide strings provided by this library','line_number':511,'multiline':False]
['text':'/','line_number':512,'multiline':False]
['text':'/','line_number':513,'multiline':False]
['text':' vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4','line_number':515,'multiline':False]
