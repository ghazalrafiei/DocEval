['text':' Three-state boolean logic library','line_number':1,'multiline':False]
['text':' Copyright Douglas Gregor 2002-2004. Use, modification and','line_number':3,'multiline':False]
['text':' distribution is subject to the Boost Software License, Version','line_number':4,'multiline':False]
['text':' 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' For more information, see http://www.boost.org','line_number':9,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':23,'multiline':False]
['text':'*
 * INTERNAL ONLY
 *
 * \brief A type used only to uniquely identify the 'indeterminate'
 * function/keyword.
 ','line_number':25,'multiline':True]
['text':' BCB would use 8 bytes by default','line_number':34,'multiline':False]
['text':' end namespace detail','line_number':38,'multiline':False]
['text':'*
 * INTERNAL ONLY
 * The type of the 'indeterminate' keyword. This has the same type as the
 * function 'indeterminate' so that we can recognize when the keyword is
 * used.
 ','line_number':40,'multiline':True]
['text':'*
 * \brief Keyword and test function for the indeterminate tribool value
 *
 * The \c indeterminate function has a dual role. It's first role is
 * as a unary function that tells whether the tribool value is in the
 * "indeterminate" state. It's second role is as a keyword
 * representing the indeterminate (just like "true" and "false"
 * represent the true and false states). If you do not like the name
 * "indeterminate", and would prefer to use a different name, see the
 * macro \c BOOST_TRIBOOL_THIRD_STATE.
 *
 * \returns <tt>x.value == tribool::indeterminate_value</tt>
 * \throws nothrow
 ','line_number':48,'multiline':True]
['text':'*
 * \brief A 3-state boolean type.
 *
 * 3-state boolean values are either true, false, or
 * indeterminate.
 ','line_number':66,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':76,'multiline':False]
['text':'*
   * Construct a new 3-state boolean value with the value 'false'.
   *
   * \throws nothrow
   ','line_number':85,'multiline':True]
['text':'*
   * Construct a new 3-state boolean value with the given boolean
   * value, which may be \c true or \c false.
   *
   * \throws nothrow
   ','line_number':92,'multiline':True]
['text':'*
   * Construct a new 3-state boolean value with an indeterminate value.
   *
   * \throws nothrow
   ','line_number':100,'multiline':True]
['text':'*
   * Use a 3-state boolean in a boolean context. Will evaluate true in a
   * boolean context only when the 3-state boolean is definitely true.
   *
   * \returns true if the 3-state boolean is true, false otherwise
   * \throws nothrow
   ','line_number':107,'multiline':True]
['text':'*
   * The actual stored value in this 3-state boolean, which may be false, true,
   * or indeterminate.
   ','line_number':130,'multiline':True]
['text':' Check if the given tribool has an indeterminate value. Also doubles as a','line_number':137,'multiline':False]
['text':' keyword for the 'indeterminate' value','line_number':138,'multiline':False]
['text':'* @defgroup logical Logical operations
 ','line_number':144,'multiline':True]
['text':'@{','line_number':146,'multiline':False]
['text':'*
 * \brief Computes the logical negation of a tribool
 *
 * \returns the logical negation of the tribool, according to the
 * table:
 *  <table border=1>
 *    <tr>
 *      <th><center><code>!</code></center></th>
 *      <th/>
 *    </tr>
 *    <tr>
 *      <th><center>false</center></th>
 *      <td><center>true</center></td>
 *    </tr>
 *    <tr>
 *      <th><center>true</center></th>
 *      <td><center>false</center></td>
 *    </tr>
 *    <tr>
 *      <th><center>indeterminate</center></th>
 *      <td><center>indeterminate</center></td>
 *    </tr>
 *  </table>
 * \throws nothrow
 ','line_number':147,'multiline':True]
['text':'*
 * \brief Computes the logical conjunction of two tribools
 *
 * \returns the result of logically ANDing the two tribool values,
 * according to the following table:
 *       <table border=1>
 *           <tr>
 *             <th><center><code>&amp;&amp;</code></center></th>
 *             <th><center>false</center></th>
 *             <th><center>true</center></th>
 *             <th><center>indeterminate</center></th>
 *           </tr>
 *           <tr>
 *             <th><center>false</center></th>
 *             <td><center>false</center></td>
 *             <td><center>false</center></td>
 *             <td><center>false</center></td>
 *           </tr>
 *           <tr>
 *             <th><center>true</center></th>
 *             <td><center>false</center></td>
 *             <td><center>true</center></td>
 *             <td><center>indeterminate</center></td>
 *           </tr>
 *           <tr>
 *             <th><center>indeterminate</center></th>
 *             <td><center>false</center></td>
 *             <td><center>indeterminate</center></td>
 *             <td><center>indeterminate</center></td>
 *           </tr>
 *       </table>
 * \throws nothrow
 ','line_number':179,'multiline':True]
['text':'*
 * \overload
 ','line_number':220,'multiline':True]
['text':'*
 * \overload
 ','line_number':226,'multiline':True]
['text':'*
 * \overload
 ','line_number':232,'multiline':True]
['text':'*
 * \overload
 ','line_number':238,'multiline':True]
['text':'*
 * \brief Computes the logical disjunction of two tribools
 *
 * \returns the result of logically ORing the two tribool values,
 * according to the following table:
 *       <table border=1>
 *           <tr>
 *             <th><center><code>||</code></center></th>
 *             <th><center>false</center></th>
 *             <th><center>true</center></th>
 *             <th><center>indeterminate</center></th>
 *           </tr>
 *           <tr>
 *             <th><center>false</center></th>
 *             <td><center>false</center></td>
 *             <td><center>true</center></td>
 *             <td><center>indeterminate</center></td>
 *           </tr>
 *           <tr>
 *             <th><center>true</center></th>
 *             <td><center>true</center></td>
 *             <td><center>true</center></td>
 *             <td><center>true</center></td>
 *           </tr>
 *           <tr>
 *             <th><center>indeterminate</center></th>
 *             <td><center>indeterminate</center></td>
 *             <td><center>true</center></td>
 *             <td><center>indeterminate</center></td>
 *           </tr>
 *       </table>
 *  \throws nothrow
 ','line_number':244,'multiline':True]
['text':'*
 * \overload
 ','line_number':285,'multiline':True]
['text':'*
 * \overload
 ','line_number':291,'multiline':True]
['text':'*
 * \overload
 ','line_number':297,'multiline':True]
['text':'*
 * \overload
 ','line_number':303,'multiline':True]
['text':'@}','line_number':308,'multiline':False]
['text':'*
 * \brief Compare tribools for equality
 *
 * \returns the result of comparing two tribool values, according to
 * the following table:
 *       <table border=1>
 *          <tr>
 *            <th><center><code>==</code></center></th>
 *            <th><center>false</center></th>
 *            <th><center>true</center></th>
 *            <th><center>indeterminate</center></th>
 *          </tr>
 *          <tr>
 *            <th><center>false</center></th>
 *            <td><center>true</center></td>
 *            <td><center>false</center></td>
 *            <td><center>indeterminate</center></td>
 *          </tr>
 *          <tr>
 *            <th><center>true</center></th>
 *            <td><center>false</center></td>
 *            <td><center>true</center></td>
 *            <td><center>indeterminate</center></td>
 *          </tr>
 *          <tr>
 *            <th><center>indeterminate</center></th>
 *            <td><center>indeterminate</center></td>
 *            <td><center>indeterminate</center></td>
 *            <td><center>indeterminate</center></td>
 *          </tr>
 *      </table>
 * \throws nothrow
 ','line_number':310,'multiline':True]
['text':'*
 * \overload
 ','line_number':351,'multiline':True]
['text':'*
 * \overload
 ','line_number':356,'multiline':True]
['text':'*
 * \overload
 ','line_number':361,'multiline':True]
['text':'*
 * \overload
 ','line_number':367,'multiline':True]
['text':'*
 * \brief Compare tribools for inequality
 *
 * \returns the result of comparing two tribool values for inequality,
 * according to the following table:
 *       <table border=1>
 *           <tr>
 *             <th><center><code>!=</code></center></th>
 *             <th><center>false</center></th>
 *             <th><center>true</center></th>
 *             <th><center>indeterminate</center></th>
 *           </tr>
 *           <tr>
 *             <th><center>false</center></th>
 *             <td><center>false</center></td>
 *             <td><center>true</center></td>
 *             <td><center>indeterminate</center></td>
 *           </tr>
 *           <tr>
 *             <th><center>true</center></th>
 *             <td><center>true</center></td>
 *             <td><center>false</center></td>
 *             <td><center>indeterminate</center></td>
 *           </tr>
 *           <tr>
 *             <th><center>indeterminate</center></th>
 *             <td><center>indeterminate</center></td>
 *             <td><center>indeterminate</center></td>
 *             <td><center>indeterminate</center></td>
 *           </tr>
 *       </table>
 * \throws nothrow
 ','line_number':373,'multiline':True]
['text':'*
 * \overload
 ','line_number':414,'multiline':True]
['text':'*
 * \overload
 ','line_number':419,'multiline':True]
['text':'*
 * \overload
 ','line_number':424,'multiline':True]
['text':'*
 * \overload
 ','line_number':430,'multiline':True]
['text':' end namespace boost::logic','line_number':436,'multiline':False]
['text':' Pull tribool and indeterminate into namespace "boost"','line_number':438,'multiline':False]
['text':'*
 * \brief Declare a new name for the third state of a tribool
 *
 * Use this macro to declare a new name for the third state of a
 * tribool. This state can have any number of new names (in addition
 * to \c indeterminate), all of which will be equivalent. The new name will be
 * placed in the namespace in which the macro is expanded.
 *
 * Example:
 *   BOOST_TRIBOOL_THIRD_STATE(true_or_false)
 *
 *   tribool x(true_or_false);
 *   // potentially set x
 *   if (true_or_false(x)) {
 *     // don't know what x is
 *   }
 ','line_number':444,'multiline':True]
['text':' BOOST_LOGIC_TRIBOOL_HPP','line_number':468,'multiline':False]
