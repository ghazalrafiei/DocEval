['text':'','line_number':1,'multiline':False]
['text':' detail/scheduler.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' The type of a function used to obtain a task instance.','line_number':46,'multiline':False]
['text':' Constructor. Specifies the number of concurrent threads that are likely to','line_number':50,'multiline':False]
['text':' run the scheduler. If set to 1 certain optimisation are performed.','line_number':51,'multiline':False]
['text':' Destructor.','line_number':56,'multiline':False]
['text':' Destroy all user-defined handler objects owned by the service.','line_number':59,'multiline':False]
['text':' Initialise the task, if required.','line_number':62,'multiline':False]
['text':' Run the event loop until interrupted or no more work.','line_number':65,'multiline':False]
['text':' Run until interrupted or one operation is performed.','line_number':68,'multiline':False]
['text':' Run until timeout, interrupted, or one operation is performed.','line_number':71,'multiline':False]
['text':' Poll for operations without blocking.','line_number':75,'multiline':False]
['text':' Poll for one operation without blocking.','line_number':78,'multiline':False]
['text':' Interrupt the event processing loop.','line_number':81,'multiline':False]
['text':' Determine whether the scheduler is stopped.','line_number':84,'multiline':False]
['text':' Restart in preparation for a subsequent run invocation.','line_number':87,'multiline':False]
['text':' Notify that some work has started.','line_number':90,'multiline':False]
['text':' Used to compensate for a forthcoming work_finished call. Must be called','line_number':96,'multiline':False]
['text':' from within a scheduler-owned thread.','line_number':97,'multiline':False]
['text':' Notify that some work has finished.','line_number':100,'multiline':False]
['text':' Return whether a handler can be dispatched immediately.','line_number':107,'multiline':False]
['text':'/ Capture the current exception so it can be rethrown from a run function.','line_number':110,'multiline':False]
['text':' Request invocation of the given operation and return immediately. Assumes','line_number':113,'multiline':False]
['text':' that work_started() has not yet been called for the operation.','line_number':114,'multiline':False]
['text':' Request invocation of the given operations and return immediately. Assumes','line_number':118,'multiline':False]
['text':' that work_started() has not yet been called for the operations.','line_number':119,'multiline':False]
['text':' Request invocation of the given operation and return immediately. Assumes','line_number':123,'multiline':False]
['text':' that work_started() was previously called for the operation.','line_number':124,'multiline':False]
['text':' Request invocation of the given operations and return immediately. Assumes','line_number':127,'multiline':False]
['text':' that work_started() was previously called for each operation.','line_number':128,'multiline':False]
['text':' Enqueue the given operation following a failed attempt to dispatch the','line_number':131,'multiline':False]
['text':' operation for immediate invocation.','line_number':132,'multiline':False]
['text':' Process unfinished operations as part of a shutdownoperation. Assumes that','line_number':135,'multiline':False]
['text':' work_started() was previously called for the operations.','line_number':136,'multiline':False]
['text':' Get the concurrency hint that was used to initialise the scheduler.','line_number':139,'multiline':False]
['text':' The mutex type used by this scheduler.','line_number':146,'multiline':False]
['text':' The event type used by this scheduler.','line_number':149,'multiline':False]
['text':' Structure containing thread-specific data.','line_number':152,'multiline':False]
['text':' Run at most one operation. May block.','line_number':155,'multiline':False]
['text':' Run at most one operation with a timeout. May block.','line_number':159,'multiline':False]
['text':' Poll for at most one operation.','line_number':163,'multiline':False]
['text':' Stop the task and all idle threads.','line_number':167,'multiline':False]
['text':' Wake a single idle thread, or the task, and always unlock the mutex.','line_number':170,'multiline':False]
['text':' Get the default task.','line_number':174,'multiline':False]
['text':' Helper class to run the scheduler in its own thread.','line_number':178,'multiline':False]
['text':' Helper class to perform task-related operations on block exit.','line_number':182,'multiline':False]
['text':' Helper class to call work-related operations on block exit.','line_number':186,'multiline':False]
['text':' Whether to optimise for single-threaded use cases.','line_number':190,'multiline':False]
['text':' Mutex to protect access to internal data.','line_number':193,'multiline':False]
['text':' Event to wake up blocked threads.','line_number':196,'multiline':False]
['text':' The task to be run by this service.','line_number':199,'multiline':False]
['text':' The function used to get the task.','line_number':202,'multiline':False]
['text':' Operation object to represent the position of the task in the queue.','line_number':205,'multiline':False]
['text':' Whether the task has been interrupted.','line_number':211,'multiline':False]
['text':' The count of unfinished work.','line_number':214,'multiline':False]
['text':' The queue of handlers that are ready to be delivered.','line_number':217,'multiline':False]
['text':' Flag to indicate that the dispatcher has been stopped.','line_number':220,'multiline':False]
['text':' Flag to indicate that the dispatcher has been shut down.','line_number':223,'multiline':False]
['text':' The concurrency hint used to initialise the scheduler.','line_number':226,'multiline':False]
['text':' The thread that is running the scheduler.','line_number':229,'multiline':False]
['text':' namespace detail','line_number':233,'multiline':False]
['text':' namespace asio','line_number':234,'multiline':False]
['text':' namespace boost','line_number':235,'multiline':False]
['text':' defined(BOOST_ASIO_HEADER_ONLY)','line_number':241,'multiline':False]
['text':' BOOST_ASIO_DETAIL_SCHEDULER_HPP','line_number':243,'multiline':False]
