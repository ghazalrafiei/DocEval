['text':'','line_number':1,'multiline':False]
['text':' basic_writable_pipe.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':43,'multiline':False]
['text':'/ Provides pipe functionality.','line_number':50,'multiline':False]
['text':'*
 * The basic_writable_pipe class provides a wrapper over pipe
 * functionality.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':51,'multiline':True]
['text':'/ The type of the executor associated with the object.','line_number':63,'multiline':False]
['text':'/ Rebinds the pipe type to another executor.','line_number':66,'multiline':False]
['text':'/ The pipe type when rebound to the specified executor.','line_number':70,'multiline':False]
['text':'/ The native representation of a pipe.','line_number':74,'multiline':False]
['text':'/ A basic_writable_pipe is always the lowest layer.','line_number':88,'multiline':False]
['text':'/ Construct a basic_writable_pipe without opening it.','line_number':91,'multiline':False]
['text':'*
   * This constructor creates a pipe without opening it.
   *
   * @param ex The I/O executor that the pipe will use, by default, to dispatch
   * handlers for any asynchronous operations performed on the pipe.
   ','line_number':92,'multiline':True]
['text':'/ Construct a basic_writable_pipe without opening it.','line_number':103,'multiline':False]
['text':'*
   * This constructor creates a pipe without opening it.
   *
   * @param context An execution context which provides the I/O executor that
   * the pipe will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the pipe.
   ','line_number':104,'multiline':True]
['text':'/ Construct a basic_writable_pipe on an existing native pipe.','line_number':121,'multiline':False]
['text':'*
   * This constructor creates a pipe object to hold an existing native
   * pipe.
   *
   * @param ex The I/O executor that the pipe will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the
   * pipe.
   *
   * @param native_pipe A native pipe.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':122,'multiline':True]
['text':'/ Construct a basic_writable_pipe on an existing native pipe.','line_number':144,'multiline':False]
['text':'*
   * This constructor creates a pipe object to hold an existing native
   * pipe.
   *
   * @param context An execution context which provides the I/O executor that
   * the pipe will use, by default, to dispatch handlers for any
   * asynchronous operations performed on the pipe.
   *
   * @param native_pipe A native pipe.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':145,'multiline':True]
['text':'/ Move-construct a basic_writable_pipe from another.','line_number':172,'multiline':False]
['text':'*
   * This constructor moves a pipe from one object to another.
   *
   * @param other The other basic_writable_pipe object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_writable_pipe(const executor_type&)
   * constructor.
   ','line_number':173,'multiline':True]
['text':'/ Move-assign a basic_writable_pipe from another.','line_number':188,'multiline':False]
['text':'*
   * This assignment operator moves a pipe from one object to another.
   *
   * @param other The other basic_writable_pipe object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_writable_pipe(const executor_type&)
   * constructor.
   ','line_number':189,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':204,'multiline':False]
['text':'/ Destroys the pipe.','line_number':206,'multiline':False]
['text':'*
   * This function destroys the pipe, cancelling any outstanding
   * asynchronous wait operations associated with the pipe as if by
   * calling @c cancel.
   ','line_number':207,'multiline':True]
['text':'/ Get the executor associated with the object.','line_number':216,'multiline':False]
['text':'/ Get a reference to the lowest layer.','line_number':222,'multiline':False]
['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since a basic_writable_pipe cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':223,'multiline':True]
['text':'/ Get a const reference to the lowest layer.','line_number':236,'multiline':False]
['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since a basic_writable_pipe cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':237,'multiline':True]
['text':'/ Assign an existing native pipe to the pipe.','line_number':250,'multiline':False]
['text':'
   * This function opens the pipe to hold an existing native pipe.
   *
   * @param native_pipe A native pipe.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':251,'multiline':True]
['text':'/ Assign an existing native pipe to the pipe.','line_number':265,'multiline':False]
['text':'
   * This function opens the pipe to hold an existing native pipe.
   *
   * @param native_pipe A native pipe.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':266,'multiline':True]
['text':'/ Determine whether the pipe is open.','line_number':280,'multiline':False]
['text':'/ Close the pipe.','line_number':286,'multiline':False]
['text':'*
   * This function is used to close the pipe. Any asynchronous write operations
   * will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':287,'multiline':True]
['text':'/ Close the pipe.','line_number':301,'multiline':False]
['text':'*
   * This function is used to close the pipe. Any asynchronous write operations
   * will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':302,'multiline':True]
['text':'/ Get the native pipe representation.','line_number':315,'multiline':False]
['text':'*
   * This function may be used to obtain the underlying representation of the
   * pipe. This is intended to allow access to native pipe
   * functionality that is not otherwise provided.
   ','line_number':316,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the pipe.','line_number':326,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous write operations to
   * finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':327,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the pipe.','line_number':341,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous write operations to
   * finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':342,'multiline':True]
['text':'/ Write some data to the pipe.','line_number':355,'multiline':False]
['text':'*
   * This function is used to write data to the pipe. The function call will
   * block until one or more bytes of the data has been written successfully,
   * or until an error occurs.
   *
   * @param buffers One or more data buffers to be written to the pipe.
   *
   * @returns The number of bytes written.
   *
   * @throws boost::system::system_error Thrown on failure. An error code of
   * boost::asio::error::eof indicates that the connection was closed by the
   * peer.
   *
   * @note The write_some operation may not transmit all of the data to the
   * peer. Consider using the @ref write function if you need to ensure that
   * all data is written before the blocking operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * pipe.write_some(boost::asio::buffer(data, size));
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':356,'multiline':True]
['text':'/ Write some data to the pipe.','line_number':392,'multiline':False]
['text':'*
   * This function is used to write data to the pipe. The function call will
   * block until one or more bytes of the data has been written successfully,
   * or until an error occurs.
   *
   * @param buffers One or more data buffers to be written to the pipe.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @returns The number of bytes written. Returns 0 if an error occurred.
   *
   * @note The write_some operation may not transmit all of the data to the
   * peer. Consider using the @ref write function if you need to ensure that
   * all data is written before the blocking operation completes.
   ','line_number':393,'multiline':True]
['text':'/ Start an asynchronous write.','line_number':416,'multiline':False]
['text':'*
   * This function is used to asynchronously write data to the pipe. It is an
   * initiating function for an @ref asynchronous_operation, and always returns
   * immediately.
   *
   * @param buffers One or more data buffers to be written to the pipe.
   * Although the buffers object may be copied as necessary, ownership of the
   * underlying memory blocks is retained by the caller, which must guarantee
   * that they remain valid until the completion handler is called.
   *
   * @param token The @ref completion_token that will be used to produce a
   * completion handler, which will be called when the write completes.
   * Potential completion tokens include @ref use_future, @ref use_awaitable,
   * @ref yield_context, or a function object with the correct completion
   * signature. The function signature of the completion handler must be:
   * @code void handler(
   *   const boost::system::error_code& error, // Result of operation.
   *   std::size_t bytes_transferred // Number of bytes written.
   * ); @endcode
   * Regardless of whether the asynchronous operation completes immediately or
   * not, the completion handler will not be invoked from within this function.
   * On immediate completion, invocation of the handler will be performed in a
   * manner equivalent to using boost::asio::post().
   *
   * @par Completion Signature
   * @code void(boost::system::error_code, std::size_t) @endcode
   *
   * @note The write operation may not transmit all of the data to the peer.
   * Consider using the @ref async_write function if you need to ensure that all
   * data is written before the asynchronous operation completes.
   *
   * @par Example
   * To write a single data buffer use the @ref buffer function as follows:
   * @code
   * pipe.async_write_some(boost::asio::buffer(data, size), handler);
   * @endcode
   * See the @ref buffer documentation for information on writing multiple
   * buffers in one go, and how to use it with arrays, boost::array or
   * std::vector.
   ','line_number':417,'multiline':True]
['text':' Disallow copying and assignment.','line_number':473,'multiline':False]
['text':' If you get an error on the following line it means that your handler','line_number':496,'multiline':False]
['text':' does not meet the documented type requirements for a WriteHandler.','line_number':497,'multiline':False]
['text':' namespace asio','line_number':519,'multiline':False]
['text':' namespace boost','line_number':520,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_PIPE)','line_number':524,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':525,'multiline':False]
['text':' BOOST_ASIO_BASIC_WRITABLE_PIPE_HPP','line_number':527,'multiline':False]
