['text':'','line_number':1,'multiline':False]
['text':' completion_condition.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' The default maximum number of bytes to transfer in a single operation.','line_number':28,'multiline':False]
['text':' Adapt result of old-style completion conditions (which had a bool result','line_number':31,'multiline':False]
['text':' where true indicated that the operation was complete).','line_number':32,'multiline':False]
['text':' Adapt result of current completion conditions (which have a size_t result','line_number':38,'multiline':False]
['text':' where 0 means the operation is complete, and otherwise the result is the','line_number':39,'multiline':False]
['text':' maximum number of bytes to transfer on the next underlying operation).','line_number':40,'multiline':False]
['text':' namespace detail','line_number':101,'multiline':False]
['text':'*
 * @defgroup completion_condition Completion Condition Function Objects
 *
 * Function objects used for determining when a read or write operation should
 * complete.
 ','line_number':103,'multiline':True]
['text':'@{','line_number':109,'multiline':True]
['text':'/ Return a completion condition function object that indicates that a read or','line_number':111,'multiline':False]
['text':'/ write operation should continue until all of the data has been transferred,','line_number':112,'multiline':False]
['text':'/ or until an error occurs.','line_number':113,'multiline':False]
['text':'*
 * This function is used to create an object, of unspecified type, that meets
 * CompletionCondition requirements.
 *
 * @par Example
 * Reading until a buffer is full:
 * @code
 * boost::array<char, 128> buf;
 * boost::system::error_code ec;
 * std::size_t n = boost::asio::read(
 *     sock, boost::asio::buffer(buf),
 *     boost::asio::transfer_all(), ec);
 * if (ec)
 * {
 *   // An error occurred.
 * }
 * else
 * {
 *   // n == 128
 * }
 * @endcode
 ','line_number':114,'multiline':True]
['text':'/ Return a completion condition function object that indicates that a read or','line_number':145,'multiline':False]
['text':'/ write operation should continue until a minimum number of bytes has been','line_number':146,'multiline':False]
['text':'/ transferred, or until an error occurs.','line_number':147,'multiline':False]
['text':'*
 * This function is used to create an object, of unspecified type, that meets
 * CompletionCondition requirements.
 *
 * @par Example
 * Reading until a buffer is full or contains at least 64 bytes:
 * @code
 * boost::array<char, 128> buf;
 * boost::system::error_code ec;
 * std::size_t n = boost::asio::read(
 *     sock, boost::asio::buffer(buf),
 *     boost::asio::transfer_at_least(64), ec);
 * if (ec)
 * {
 *   // An error occurred.
 * }
 * else
 * {
 *   // n >= 64 && n <= 128
 * }
 * @endcode
 ','line_number':148,'multiline':True]
['text':'/ Return a completion condition function object that indicates that a read or','line_number':179,'multiline':False]
['text':'/ write operation should continue until an exact number of bytes has been','line_number':180,'multiline':False]
['text':'/ transferred, or until an error occurs.','line_number':181,'multiline':False]
['text':'*
 * This function is used to create an object, of unspecified type, that meets
 * CompletionCondition requirements.
 *
 * @par Example
 * Reading until a buffer is full or contains exactly 64 bytes:
 * @code
 * boost::array<char, 128> buf;
 * boost::system::error_code ec;
 * std::size_t n = boost::asio::read(
 *     sock, boost::asio::buffer(buf),
 *     boost::asio::transfer_exactly(64), ec);
 * if (ec)
 * {
 *   // An error occurred.
 * }
 * else
 * {
 *   // n == 64
 * }
 * @endcode
 ','line_number':182,'multiline':True]
['text':'@}','line_number':213,'multiline':True]
['text':' namespace asio','line_number':215,'multiline':False]
['text':' namespace boost','line_number':216,'multiline':False]
['text':' BOOST_ASIO_COMPLETION_CONDITION_HPP','line_number':220,'multiline':False]
