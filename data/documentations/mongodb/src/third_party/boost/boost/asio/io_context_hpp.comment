['text':'','line_number':1,'multiline':False]
['text':' io_context.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_CHRONO)','line_number':32,'multiline':False]
['text':' namespace detail','line_number':67,'multiline':False]
['text':'/ Provides core I/O functionality.','line_number':69,'multiline':False]
['text':'*
 * The io_context class provides the core I/O functionality for users of the
 * asynchronous I/O objects, including:
 *
 * @li boost::asio::ip::tcp::socket
 * @li boost::asio::ip::tcp::acceptor
 * @li boost::asio::ip::udp::socket
 * @li boost::asio::deadline_timer.
 *
 * The io_context class also includes facilities intended for developers of
 * custom asynchronous services.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Safe, with the specific exceptions of the restart()
 * and notify_fork() functions. Calling restart() while there are unfinished
 * run(), run_one(), run_for(), run_until(), poll() or poll_one() calls results
 * in undefined behaviour. The notify_fork() function should not be called
 * while any io_context function, or any function on an I/O object that is
 * associated with the io_context, is being called in another thread.
 *
 * @par Concepts:
 * Dispatcher.
 *
 * @par Synchronous and asynchronous operations
 *
 * Synchronous operations on I/O objects implicitly run the io_context object
 * for an individual operation. The io_context functions run(), run_one(),
 * run_for(), run_until(), poll() or poll_one() must be called for the
 * io_context to perform asynchronous operations on behalf of a C++ program.
 * Notification that an asynchronous operation has completed is delivered by
 * invocation of the associated handler. Handlers are invoked only by a thread
 * that is currently calling any overload of run(), run_one(), run_for(),
 * run_until(), poll() or poll_one() for the io_context.
 *
 * @par Effect of exceptions thrown from handlers
 *
 * If an exception is thrown from a handler, the exception is allowed to
 * propagate through the throwing thread's invocation of run(), run_one(),
 * run_for(), run_until(), poll() or poll_one(). No other threads that are
 * calling any of these functions are affected. It is then the responsibility
 * of the application to catch the exception.
 *
 * After the exception has been caught, the run(), run_one(), run_for(),
 * run_until(), poll() or poll_one() call may be restarted @em without the need
 * for an intervening call to restart(). This allows the thread to rejoin the
 * io_context object's thread pool without impacting any other threads in the
 * pool.
 *
 * For example:
 *
 * @code
 * boost::asio::io_context io_context;
 * ...
 * for (;;)
 * {
 *   try
 *   {
 *     io_context.run();
 *     break; // run() exited normally
 *   }
 *   catch (my_exception& e)
 *   {
 *     // Deal with exception as appropriate.
 *   }
 * }
 * @endcode
 *
 * @par Submitting arbitrary tasks to the io_context
 *
 * To submit functions to the io_context, use the @ref boost::asio::dispatch,
 * @ref boost::asio::post or @ref boost::asio::defer free functions.
 *
 * For example:
 *
 * @code void my_task()
 * {
 *   ...
 * }
 *
 * ...
 *
 * boost::asio::io_context io_context;
 *
 * // Submit a function to the io_context.
 * boost::asio::post(io_context, my_task);
 *
 * // Submit a lambda object to the io_context.
 * boost::asio::post(io_context,
 *     []()
 *     {
 *       ...
 *     });
 *
 * // Run the io_context until it runs out of work.
 * io_context.run(); @endcode
 *
 * @par Stopping the io_context from running out of work
 *
 * Some applications may need to prevent an io_context object's run() call from
 * returning when there is no more work to do. For example, the io_context may
 * be being run in a background thread that is launched prior to the
 * application's asynchronous operations. The run() call may be kept running by
 * using the @ref make_work_guard function to create an object of type
 * boost::asio::executor_work_guard<io_context::executor_type>:
 *
 * @code boost::asio::io_context io_context;
 * boost::asio::executor_work_guard<boost::asio::io_context::executor_type>
 *   = boost::asio::make_work_guard(io_context);
 * ... @endcode
 *
 * To effect a shutdown, the application will then need to call the io_context
 * object's stop() member function. This will cause the io_context run() call
 * to return as soon as possible, abandoning unfinished operations and without
 * permitting ready handlers to be dispatched.
 *
 * Alternatively, if the application requires that all operations and handlers
 * be allowed to finish normally, the work object may be explicitly reset.
 *
 * @code boost::asio::io_context io_context;
 * boost::asio::executor_work_guard<boost::asio::io_context::executor_type>
 *   = boost::asio::make_work_guard(io_context);
 * ...
 * work.reset(); // Allow run() to exit. @endcode
 ','line_number':70,'multiline':True]
['text':'/ Executor used to submit functions to an io_context.','line_number':211,'multiline':False]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':217,'multiline':False]
['text':' !defined(BOOST_ASIO_NO_EXTENSIONS)','line_number':224,'multiline':False]
['text':'   && !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':225,'multiline':False]
['text':'/ The type used to count the number of handlers executed by the context.','line_number':227,'multiline':False]
['text':'/ Constructor.','line_number':230,'multiline':False]
['text':'/ Constructor.','line_number':233,'multiline':False]
['text':'*
   * Construct with a hint about the required level of concurrency.
   *
   * @param concurrency_hint A suggestion to the implementation on how many
   * threads it should allow to run simultaneously.
   ','line_number':234,'multiline':True]
['text':'/ Destructor.','line_number':242,'multiline':False]
['text':'*
   * On destruction, the io_context performs the following sequence of
   * operations:
   *
   * @li For each service object @c svc in the io_context set, in reverse order
   * of the beginning of service object lifetime, performs
   * @c svc->shutdown().
   *
   * @li Uninvoked handler objects that were scheduled for deferred invocation
   * on the io_context, or any associated strand, are destroyed.
   *
   * @li For each service object @c svc in the io_context set, in reverse order
   * of the beginning of service object lifetime, performs
   * <tt>delete static_cast<io_context::service*>(svc)</tt>.
   *
   * @note The destruction sequence described above permits programs to
   * simplify their resource management by using @c shared_ptr<>. Where an
   * object's lifetime is tied to the lifetime of a connection (or some other
   * sequence of asynchronous operations), a @c shared_ptr to the object would
   * be bound into the handlers for all asynchronous operations associated with
   * it. This works as follows:
   *
   * @li When a single connection ends, all associated asynchronous operations
   * complete. The corresponding handler objects are destroyed, and all
   * @c shared_ptr references to the objects are destroyed.
   *
   * @li To shut down the whole program, the io_context function stop() is
   * called to terminate any run() calls as soon as possible. The io_context
   * destructor defined above destroys all handlers, causing all @c shared_ptr
   * references to all connection objects to be destroyed.
   ','line_number':243,'multiline':True]
['text':'/ Obtains the executor associated with the io_context.','line_number':276,'multiline':False]
['text':'/ Run the io_context object's event processing loop.','line_number':279,'multiline':False]
['text':'*
   * The run() function blocks until all work has finished and there are no
   * more handlers to be dispatched, or until the io_context has been stopped.
   *
   * Multiple threads may call the run() function to set up a pool of threads
   * from which the io_context may execute handlers. All threads that are
   * waiting in the pool are equivalent and the io_context may choose any one
   * of them to invoke a handler.
   *
   * A normal exit from the run() function implies that the io_context object
   * is stopped (the stopped() function returns @c true). Subsequent calls to
   * run(), run_one(), poll() or poll_one() will return immediately unless there
   * is a prior call to restart().
   *
   * @return The number of handlers that were executed.
   *
   * @note Calling the run() function from a thread that is currently calling
   * one of run(), run_one(), run_for(), run_until(), poll() or poll_one() on
   * the same io_context object may introduce the potential for deadlock. It is
   * the caller's reponsibility to avoid this.
   *
   * The poll() function may also be used to dispatch ready handlers, but
   * without blocking.
   ','line_number':280,'multiline':True]
['text':'/ (Deprecated: Use non-error_code overload.) Run the io_context object's','line_number':307,'multiline':False]
['text':'/ event processing loop.','line_number':308,'multiline':False]
['text':'*
   * The run() function blocks until all work has finished and there are no
   * more handlers to be dispatched, or until the io_context has been stopped.
   *
   * Multiple threads may call the run() function to set up a pool of threads
   * from which the io_context may execute handlers. All threads that are
   * waiting in the pool are equivalent and the io_context may choose any one
   * of them to invoke a handler.
   *
   * A normal exit from the run() function implies that the io_context object
   * is stopped (the stopped() function returns @c true). Subsequent calls to
   * run(), run_one(), poll() or poll_one() will return immediately unless there
   * is a prior call to restart().
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @return The number of handlers that were executed.
   *
   * @note Calling the run() function from a thread that is currently calling
   * one of run(), run_one(), run_for(), run_until(), poll() or poll_one() on
   * the same io_context object may introduce the potential for deadlock. It is
   * the caller's reponsibility to avoid this.
   *
   * The poll() function may also be used to dispatch ready handlers, but
   * without blocking.
   ','line_number':309,'multiline':True]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':336,'multiline':False]
['text':'/ Run the io_context object's event processing loop for a specified','line_number':339,'multiline':False]
['text':'/ duration.','line_number':340,'multiline':False]
['text':'*
   * The run_for() function blocks until all work has finished and there are no
   * more handlers to be dispatched, until the io_context has been stopped, or
   * until the specified duration has elapsed.
   *
   * @param rel_time The duration for which the call may block.
   *
   * @return The number of handlers that were executed.
   ','line_number':341,'multiline':True]
['text':'/ Run the io_context object's event processing loop until a specified time.','line_number':353,'multiline':False]
['text':'*
   * The run_until() function blocks until all work has finished and there are
   * no more handlers to be dispatched, until the io_context has been stopped,
   * or until the specified time has been reached.
   *
   * @param abs_time The time point until which the call may block.
   *
   * @return The number of handlers that were executed.
   ','line_number':354,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_CHRONO) || defined(GENERATING_DOCUMENTATION)','line_number':365,'multiline':False]
['text':'/ Run the io_context object's event processing loop to execute at most one','line_number':367,'multiline':False]
['text':'/ handler.','line_number':368,'multiline':False]
['text':'*
   * The run_one() function blocks until one handler has been dispatched, or
   * until the io_context has been stopped.
   *
   * @return The number of handlers that were executed. A zero return value
   * implies that the io_context object is stopped (the stopped() function
   * returns @c true). Subsequent calls to run(), run_one(), poll() or
   * poll_one() will return immediately unless there is a prior call to
   * restart().
   *
   * @note Calling the run_one() function from a thread that is currently
   * calling one of run(), run_one(), run_for(), run_until(), poll() or
   * poll_one() on the same io_context object may introduce the potential for
   * deadlock. It is the caller's reponsibility to avoid this.
   ','line_number':369,'multiline':True]
['text':'/ (Deprecated: Use non-error_code overload.) Run the io_context object's','line_number':387,'multiline':False]
['text':'/ event processing loop to execute at most one handler.','line_number':388,'multiline':False]
['text':'*
   * The run_one() function blocks until one handler has been dispatched, or
   * until the io_context has been stopped.
   *
   * @return The number of handlers that were executed. A zero return value
   * implies that the io_context object is stopped (the stopped() function
   * returns @c true). Subsequent calls to run(), run_one(), poll() or
   * poll_one() will return immediately unless there is a prior call to
   * restart().
   *
   * @return The number of handlers that were executed.
   *
   * @note Calling the run_one() function from a thread that is currently
   * calling one of run(), run_one(), run_for(), run_until(), poll() or
   * poll_one() on the same io_context object may introduce the potential for
   * deadlock. It is the caller's reponsibility to avoid this.
   ','line_number':389,'multiline':True]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':407,'multiline':False]
['text':'/ Run the io_context object's event processing loop for a specified duration','line_number':410,'multiline':False]
['text':'/ to execute at most one handler.','line_number':411,'multiline':False]
['text':'*
   * The run_one_for() function blocks until one handler has been dispatched,
   * until the io_context has been stopped, or until the specified duration has
   * elapsed.
   *
   * @param rel_time The duration for which the call may block.
   *
   * @return The number of handlers that were executed.
   ','line_number':412,'multiline':True]
['text':'/ Run the io_context object's event processing loop until a specified time','line_number':424,'multiline':False]
['text':'/ to execute at most one handler.','line_number':425,'multiline':False]
['text':'*
   * The run_one_until() function blocks until one handler has been dispatched,
   * until the io_context has been stopped, or until the specified time has
   * been reached.
   *
   * @param abs_time The time point until which the call may block.
   *
   * @return The number of handlers that were executed.
   ','line_number':426,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_CHRONO) || defined(GENERATING_DOCUMENTATION)','line_number':438,'multiline':False]
['text':'/ Run the io_context object's event processing loop to execute ready','line_number':440,'multiline':False]
['text':'/ handlers.','line_number':441,'multiline':False]
['text':'*
   * The poll() function runs handlers that are ready to run, without blocking,
   * until the io_context has been stopped or there are no more ready handlers.
   *
   * @return The number of handlers that were executed.
   ','line_number':442,'multiline':True]
['text':'/ (Deprecated: Use non-error_code overload.) Run the io_context object's','line_number':451,'multiline':False]
['text':'/ event processing loop to execute ready handlers.','line_number':452,'multiline':False]
['text':'*
   * The poll() function runs handlers that are ready to run, without blocking,
   * until the io_context has been stopped or there are no more ready handlers.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @return The number of handlers that were executed.
   ','line_number':453,'multiline':True]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':462,'multiline':False]
['text':'/ Run the io_context object's event processing loop to execute one ready','line_number':464,'multiline':False]
['text':'/ handler.','line_number':465,'multiline':False]
['text':'*
   * The poll_one() function runs at most one handler that is ready to run,
   * without blocking.
   *
   * @return The number of handlers that were executed.
   ','line_number':466,'multiline':True]
['text':'/ (Deprecated: Use non-error_code overload.) Run the io_context object's','line_number':475,'multiline':False]
['text':'/ event processing loop to execute one ready handler.','line_number':476,'multiline':False]
['text':'*
   * The poll_one() function runs at most one handler that is ready to run,
   * without blocking.
   *
   * @param ec Set to indicate what error occurred, if any.
   *
   * @return The number of handlers that were executed.
   ','line_number':477,'multiline':True]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':486,'multiline':False]
['text':'/ Stop the io_context object's event processing loop.','line_number':488,'multiline':False]
['text':'*
   * This function does not block, but instead simply signals the io_context to
   * stop. All invocations of its run() or run_one() member functions should
   * return as soon as possible. Subsequent calls to run(), run_one(), poll()
   * or poll_one() will return immediately until restart() is called.
   ','line_number':489,'multiline':True]
['text':'/ Determine whether the io_context object has been stopped.','line_number':497,'multiline':False]
['text':'*
   * This function is used to determine whether an io_context object has been
   * stopped, either through an explicit call to stop(), or due to running out
   * of work. When an io_context object is stopped, calls to run(), run_one(),
   * poll() or poll_one() will return immediately without invoking any
   * handlers.
   *
   * @return @c true if the io_context object is stopped, otherwise @c false.
   ','line_number':498,'multiline':True]
['text':'/ Restart the io_context in preparation for a subsequent run() invocation.','line_number':509,'multiline':False]
['text':'*
   * This function must be called prior to any second or later set of
   * invocations of the run(), run_one(), poll() or poll_one() functions when a
   * previous invocation of these functions returned due to the io_context
   * being stopped or running out of work. After a call to restart(), the
   * io_context object's stopped() function will return @c false.
   *
   * This function must not be called while there are any unfinished calls to
   * the run(), run_one(), poll() or poll_one() functions.
   ','line_number':510,'multiline':True]
['text':'/ (Deprecated: Use restart().) Reset the io_context in preparation for a','line_number':523,'multiline':False]
['text':'/ subsequent run() invocation.','line_number':524,'multiline':False]
['text':'*
   * This function must be called prior to any second or later set of
   * invocations of the run(), run_one(), poll() or poll_one() functions when a
   * previous invocation of these functions returned due to the io_context
   * being stopped or running out of work. After a call to restart(), the
   * io_context object's stopped() function will return @c false.
   *
   * This function must not be called while there are any unfinished calls to
   * the run(), run_one(), poll() or poll_one() functions.
   ','line_number':525,'multiline':True]
['text':'/ (Deprecated: Use boost::asio::dispatch().) Request the io_context to','line_number':537,'multiline':False]
['text':'/ invoke the given handler.','line_number':538,'multiline':False]
['text':'*
   * This function is used to ask the io_context to execute the given handler.
   *
   * The io_context guarantees that the handler will only be called in a thread
   * in which the run(), run_one(), poll() or poll_one() member functions is
   * currently being invoked. The handler may be executed inside this function
   * if the guarantee can be met.
   *
   * @param handler The handler to be called. The io_context will make
   * a copy of the handler object as required. The function signature of the
   * handler must be: @code void handler(); @endcode
   *
   * @note This function throws an exception only if:
   *
   * @li the handler's @c asio_handler_allocate function; or
   *
   * @li the handler's copy constructor
   *
   * throws an exception.
   ','line_number':539,'multiline':True]
['text':'/ (Deprecated: Use boost::asio::post().) Request the io_context to invoke','line_number':563,'multiline':False]
['text':'/ the given handler and return immediately.','line_number':564,'multiline':False]
['text':'*
   * This function is used to ask the io_context to execute the given handler,
   * but without allowing the io_context to call the handler from inside this
   * function.
   *
   * The io_context guarantees that the handler will only be called in a thread
   * in which the run(), run_one(), poll() or poll_one() member functions is
   * currently being invoked.
   *
   * @param handler The handler to be called. The io_context will make
   * a copy of the handler object as required. The function signature of the
   * handler must be: @code void handler(); @endcode
   *
   * @note This function throws an exception only if:
   *
   * @li the handler's @c asio_handler_allocate function; or
   *
   * @li the handler's copy constructor
   *
   * throws an exception.
   ','line_number':565,'multiline':True]
['text':'/ (Deprecated: Use boost::asio::bind_executor().) Create a new handler that','line_number':590,'multiline':False]
['text':'/ automatically dispatches the wrapped handler on the io_context.','line_number':591,'multiline':False]
['text':'*
   * This function is used to create a new handler function object that, when
   * invoked, will automatically pass the wrapped handler to the io_context
   * object's dispatch function.
   *
   * @param handler The handler to be wrapped. The io_context will make a copy
   * of the handler object as required. The function signature of the handler
   * must be: @code void handler(A1 a1, ... An an); @endcode
   *
   * @return A function object that, when invoked, passes the wrapped handler to
   * the io_context object's dispatch function. Given a function object with the
   * signature:
   * @code R f(A1 a1, ... An an); @endcode
   * If this function object is passed to the wrap function like so:
   * @code io_context.wrap(f); @endcode
   * then the return value is a function object with the signature
   * @code void g(A1 a1, ... An an); @endcode
   * that, when invoked, executes code equivalent to:
   * @code io_context.dispatch(boost::bind(f, a1, ... an)); @endcode
   ','line_number':592,'multiline':True]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':619,'multiline':False]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':628,'multiline':False]
['text':' Helper function to add the implementation.','line_number':630,'multiline':False]
['text':' Backwards compatible overload for use with services derived from','line_number':633,'multiline':False]
['text':' io_context::service.','line_number':634,'multiline':False]
['text':' The implementation.','line_number':645,'multiline':False]
['text':' namespace detail','line_number':651,'multiline':False]
['text':'/ Executor implementation type used to submit functions to an io_context.','line_number':653,'multiline':False]
['text':'/ Copy constructor.','line_number':659,'multiline':False]
['text':'/ Move constructor.','line_number':671,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':679,'multiline':False]
['text':'/ Destructor.','line_number':681,'multiline':False]
['text':'/ Assignment operator.','line_number':689,'multiline':False]
['text':'/ Move assignment operator.','line_number':694,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':697,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':703,'multiline':False]
['text':'/ Obtain an executor with the @c blocking.possibly property.','line_number':705,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.possibly); @endcode
   ','line_number':706,'multiline':True]
['text':'/ Obtain an executor with the @c blocking.never property.','line_number':722,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::blocking.never); @endcode
   ','line_number':723,'multiline':True]
['text':'/ Obtain an executor with the @c relationship.fork property.','line_number':739,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::relationship.fork); @endcode
   ','line_number':740,'multiline':True]
['text':'/ Obtain an executor with the @c relationship.continuation property.','line_number':756,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::relationship.continuation); @endcode
   ','line_number':757,'multiline':True]
['text':'/ Obtain an executor with the @c outstanding_work.tracked property.','line_number':773,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::outstanding_work.tracked); @endcode
   ','line_number':774,'multiline':True]
['text':'/ Obtain an executor with the @c outstanding_work.untracked property.','line_number':791,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::outstanding_work.untracked); @endcode
   ','line_number':792,'multiline':True]
['text':'/ Obtain an executor with the specified @c allocator property.','line_number':809,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::allocator(my_allocator)); @endcode
   ','line_number':810,'multiline':True]
['text':'/ Obtain an executor with the default @c allocator property.','line_number':827,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::require customisation point.
   *
   * For example:
   * @code auto ex1 = my_io_context.get_executor();
   * auto ex2 = boost::asio::require(ex1,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':828,'multiline':True]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':849,'multiline':False]
['text':'/ Query the current value of the @c mapping property.','line_number':851,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * if (boost::asio::query(ex, boost::asio::execution::mapping)
   *       == boost::asio::execution::mapping.thread)
   *   ... @endcode
   ','line_number':852,'multiline':True]
['text':'/ Query the current value of the @c context property.','line_number':868,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * boost::asio::io_context& ctx = boost::asio::query(
   *     ex, boost::asio::execution::context); @endcode
   ','line_number':869,'multiline':True]
['text':'/ Query the current value of the @c blocking property.','line_number':883,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * if (boost::asio::query(ex, boost::asio::execution::blocking)
   *       == boost::asio::execution::blocking.always)
   *   ... @endcode
   ','line_number':884,'multiline':True]
['text':'/ Query the current value of the @c relationship property.','line_number':902,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * if (boost::asio::query(ex, boost::asio::execution::relationship)
   *       == boost::asio::execution::relationship.continuation)
   *   ... @endcode
   ','line_number':903,'multiline':True]
['text':'/ Query the current value of the @c outstanding_work property.','line_number':921,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * if (boost::asio::query(ex, boost::asio::execution::outstanding_work)
   *       == boost::asio::execution::outstanding_work.tracked)
   *   ... @endcode
   ','line_number':922,'multiline':True]
['text':'/ Query the current value of the @c allocator property.','line_number':940,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * auto alloc = boost::asio::query(ex,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':941,'multiline':True]
['text':'/ Query the current value of the @c allocator property.','line_number':957,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * boost::asio::query customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * auto alloc = boost::asio::query(ex,
   *     boost::asio::execution::allocator); @endcode
   ','line_number':958,'multiline':True]
['text':'/ Determine whether the io_context is running in the current thread.','line_number':974,'multiline':False]
['text':'*
   * @return @c true if the current thread is running the io_context. Otherwise
   * returns @c false.
   ','line_number':975,'multiline':True]
['text':'/ Compare two executors for equality.','line_number':981,'multiline':False]
['text':'*
   * Two executors are equal if they refer to the same underlying io_context.
   ','line_number':982,'multiline':True]
['text':'/ Compare two executors for inequality.','line_number':992,'multiline':False]
['text':'*
   * Two executors are equal if they refer to the same underlying io_context.
   ','line_number':993,'multiline':True]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':1006,'multiline':False]
['text':'/ Execution function.','line_number':1008,'multiline':False]
['text':'*
   * Do not call this function directly. It is intended for use with the
   * execution::execute customisation point.
   *
   * For example:
   * @code auto ex = my_io_context.get_executor();
   * execution::execute(ex, my_function_object); @endcode
   ','line_number':1009,'multiline':True]
['text':'/ Obtain the underlying execution context.','line_number':1022,'multiline':False]
['text':'/ Inform the io_context that it has some outstanding work to do.','line_number':1025,'multiline':False]
['text':'*
   * This function is used to inform the io_context that some work has begun.
   * This ensures that the io_context's run() and run_one() functions do not
   * exit while the work is underway.
   ','line_number':1026,'multiline':True]
['text':'/ Inform the io_context that some work is no longer outstanding.','line_number':1033,'multiline':False]
['text':'*
   * This function is used to inform the io_context that some work has
   * finished. Once the count of unfinished work reaches zero, the io_context
   * is stopped and the run() and run_one() functions may exit.
   ','line_number':1034,'multiline':True]
['text':'/ Request the io_context to invoke the given function object.','line_number':1041,'multiline':False]
['text':'*
   * This function is used to ask the io_context to execute the given function
   * object. If the current thread is running the io_context, @c dispatch()
   * executes the function before returning. Otherwise, the function will be
   * scheduled to run on the io_context.
   *
   * @param f The function object to be called. The executor will make a copy
   * of the handler object as required. The function signature of the function
   * object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':1042,'multiline':True]
['text':'/ Request the io_context to invoke the given function object.','line_number':1059,'multiline':False]
['text':'*
   * This function is used to ask the io_context to execute the given function
   * object. The function object will never be executed inside @c post().
   * Instead, it will be scheduled to run on the io_context.
   *
   * @param f The function object to be called. The executor will make a copy
   * of the handler object as required. The function signature of the function
   * object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':1060,'multiline':True]
['text':'/ Request the io_context to invoke the given function object.','line_number':1076,'multiline':False]
['text':'*
   * This function is used to ask the io_context to execute the given function
   * object. The function object will never be executed inside @c defer().
   * Instead, it will be scheduled to run on the io_context.
   *
   * If the current thread belongs to the io_context, @c defer() will delay
   * scheduling the function object until the current thread returns control to
   * the pool.
   *
   * @param f The function object to be called. The executor will make a copy
   * of the handler object as required. The function signature of the function
   * object must be: @code void function(); @endcode
   *
   * @param a An allocator that may be used by the executor to allocate the
   * internal storage needed for function invocation.
   ','line_number':1077,'multiline':True]
['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':1096,'multiline':False]
['text':' Constructor used by io_context::get_executor().','line_number':1102,'multiline':False]
['text':' Constructor used by require().','line_number':1111,'multiline':False]
['text':' The underlying io_context and runtime bits.','line_number':1132,'multiline':False]
['text':'/ (Deprecated: Use executor_work_guard.) Class to inform the io_context when','line_number':1137,'multiline':False]
['text':'/ it has work to do.','line_number':1138,'multiline':False]
['text':'*
 * The work class is used to inform the io_context when work starts and
 * finishes. This ensures that the io_context object's run() function will not
 * exit while work is underway, and that it does exit when there is no
 * unfinished work remaining.
 *
 * The work class is copy-constructible so that it may be used as a data member
 * in a handler class. It is not assignable.
 ','line_number':1139,'multiline':True]
['text':'/ Constructor notifies the io_context that work is starting.','line_number':1151,'multiline':False]
['text':'*
   * The constructor is used to inform the io_context that some work has begun.
   * This ensures that the io_context object's run() function will not exit
   * while the work is underway.
   ','line_number':1152,'multiline':True]
['text':'/ Copy constructor notifies the io_context that work is starting.','line_number':1159,'multiline':False]
['text':'*
   * The constructor is used to inform the io_context that some work has begun.
   * This ensures that the io_context object's run() function will not exit
   * while the work is underway.
   ','line_number':1160,'multiline':True]
['text':'/ Destructor notifies the io_context that the work is complete.','line_number':1167,'multiline':False]
['text':'*
   * The destructor is used to inform the io_context that some work has
   * finished. Once the count of unfinished work reaches zero, the io_context
   * object's run() function is permitted to exit.
   ','line_number':1168,'multiline':True]
['text':'/ Get the io_context associated with the work.','line_number':1175,'multiline':False]
['text':' Prevent assignment.','line_number':1179,'multiline':False]
['text':' The io_context implementation.','line_number':1182,'multiline':False]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':1185,'multiline':False]
['text':'/ Base class for all io_context services.','line_number':1187,'multiline':False]
['text':'/ Get the io_context object that owns the service.','line_number':1192,'multiline':False]
['text':'/ Destroy all user-defined handler objects owned by the service.','line_number':1196,'multiline':False]
['text':'/ (Deprecated: Use shutdown().) Destroy all user-defined handler objects','line_number':1200,'multiline':False]
['text':'/ owned by the service.','line_number':1201,'multiline':False]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':1203,'multiline':False]
['text':'/ Handle notification of a fork-related event to perform any necessary','line_number':1205,'multiline':False]
['text':'/ housekeeping.','line_number':1206,'multiline':False]
['text':'*
   * This function is not a pure virtual so that services only have to
   * implement it if necessary. The default implementation does nothing.
   ','line_number':1207,'multiline':True]
['text':'/ (Deprecated: Use notify_fork().) Handle notification of a fork-related','line_number':1215,'multiline':False]
['text':'/ event to perform any necessary housekeeping.','line_number':1216,'multiline':False]
['text':'*
   * This function is not a pure virtual so that services only have to
   * implement it if necessary. The default implementation does nothing.
   ','line_number':1217,'multiline':True]
['text':' !defined(BOOST_ASIO_NO_DEPRECATED)','line_number':1223,'multiline':False]
['text':'/ Constructor.','line_number':1226,'multiline':False]
['text':'*
   * @param owner The io_context object that owns the service.
   ','line_number':1227,'multiline':True]
['text':'/ Destructor.','line_number':1232,'multiline':False]
['text':' Special service base class to keep classes header-file only.','line_number':1238,'multiline':False]
['text':' Constructor.','line_number':1246,'multiline':False]
['text':' namespace detail','line_number':1256,'multiline':False]
['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EQUALITY_COMPARABLE_TRAIT)','line_number':1273,'multiline':False]
['text':' !defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)','line_number':1288,'multiline':False]
['text':' !defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT)','line_number':1389,'multiline':False]
['text':' !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT)','line_number':1439,'multiline':False]
['text':' !defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)','line_number':1510,'multiline':False]
['text':' namespace traits','line_number':1512,'multiline':False]
['text':' namespace execution','line_number':1521,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':1523,'multiline':False]
['text':' namespace asio','line_number':1525,'multiline':False]
['text':' namespace boost','line_number':1526,'multiline':False]
['text':' defined(BOOST_ASIO_HEADER_ONLY)','line_number':1533,'multiline':False]
['text':' If both io_context.hpp and strand.hpp have been included, automatically','line_number':1535,'multiline':False]
['text':' include the header file needed for the io_context::strand class.','line_number':1536,'multiline':False]
['text':' defined(BOOST_ASIO_STRAND_HPP)','line_number':1540,'multiline':False]
['text':' !defined(BOOST_ASIO_NO_EXTENSIONS)','line_number':1541,'multiline':False]
['text':' BOOST_ASIO_IO_CONTEXT_HPP','line_number':1543,'multiline':False]
