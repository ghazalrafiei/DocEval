['text':'','line_number':1,'multiline':False]
['text':' experimental/detail/channel_service.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' Possible states for a channel end.','line_number':42,'multiline':False]
['text':' The base implementation type of all channels.','line_number':51,'multiline':False]
['text':' Default constructor.','line_number':54,'multiline':False]
['text':' The current state of the channel.','line_number':64,'multiline':False]
['text':' The maximum number of elements that may be buffered in the channel.','line_number':68,'multiline':False]
['text':' The operations that are waiting on the channel.','line_number':71,'multiline':False]
['text':' Pointers to adjacent channel implementations in linked list.','line_number':74,'multiline':False]
['text':' The mutex type to protect the internal implementation.','line_number':78,'multiline':False]
['text':' The implementation for a specific value type.','line_number':82,'multiline':False]
['text':' Constructor.','line_number':86,'multiline':False]
['text':' Destroy all user-defined handler objects owned by the service.','line_number':89,'multiline':False]
['text':' Construct a new channel implementation.','line_number':92,'multiline':False]
['text':' Destroy a channel implementation.','line_number':95,'multiline':False]
['text':' Move-construct a new channel implementation.','line_number':99,'multiline':False]
['text':' Move-assign from another channel implementation.','line_number':104,'multiline':False]
['text':' Get the capacity of the channel.','line_number':110,'multiline':False]
['text':' Determine whether the channel is open.','line_number':114,'multiline':False]
['text':' Reset the channel to its initial state.','line_number':117,'multiline':False]
['text':' Close the channel.','line_number':121,'multiline':False]
['text':' Cancel all operations associated with the channel.','line_number':125,'multiline':False]
['text':' Cancel the operation associated with the channel that has the given key.','line_number':129,'multiline':False]
['text':' Determine whether a value can be read from the channel without blocking.','line_number':134,'multiline':False]
['text':' Synchronously send a new value into the channel.','line_number':137,'multiline':False]
['text':' Synchronously send a number of new values into the channel.','line_number':143,'multiline':False]
['text':' Asynchronously send a new value into the channel.','line_number':149,'multiline':False]
['text':' Allocate and construct an operation to wrap the handler.','line_number':160,'multiline':False]
['text':' Optionally register for per-operation cancellation.','line_number':169,'multiline':False]
['text':' Synchronously receive a value from the channel.','line_number':184,'multiline':False]
['text':' Asynchronously send a new value into the channel.','line_number':189,'multiline':False]
['text':' Asynchronously receive a value from the channel.','line_number':190,'multiline':False]
['text':' Allocate and construct an operation to wrap the handler.','line_number':199,'multiline':False]
['text':' Optionally register for per-operation cancellation.','line_number':207,'multiline':False]
['text':' Helper function object to handle a closed notification.','line_number':223,'multiline':False]
['text':' Destroy a base channel implementation.','line_number':243,'multiline':False]
['text':' Helper function to start an asynchronous put operation.','line_number':246,'multiline':False]
['text':' Helper function to start an asynchronous get operation.','line_number':252,'multiline':False]
['text':' Helper class used to implement per-operation cancellation.','line_number':258,'multiline':False]
['text':' Mutex to protect access to the linked list of implementations.','line_number':286,'multiline':False]
['text':' The head of a linked list of all implementations.','line_number':289,'multiline':False]
['text':' The implementation for a specific value type.','line_number':293,'multiline':False]
['text':' The traits type associated with the channel.','line_number':298,'multiline':False]
['text':' Type of an element stored in the buffer.','line_number':301,'multiline':False]
['text':' Move from another buffer.','line_number':336,'multiline':False]
['text':' Get number of buffered elements.','line_number':345,'multiline':False]
['text':' Push a new value to the back of the buffer.','line_number':351,'multiline':False]
['text':' Push new values to the back of the buffer.','line_number':357,'multiline':False]
['text':' Get the element at the front of the buffer.','line_number':366,'multiline':False]
['text':' Pop a value from the front of the buffer.','line_number':372,'multiline':False]
['text':' Clear all buffered values.','line_number':378,'multiline':False]
['text':' Buffered values.','line_number':385,'multiline':False]
['text':' The implementation for a void value type.','line_number':389,'multiline':False]
['text':' The traits type associated with the channel.','line_number':395,'multiline':False]
['text':' Type of an element stored in the buffer.','line_number':398,'multiline':False]
['text':' Construct with empty buffer.','line_number':433,'multiline':False]
['text':' Move from another buffer.','line_number':439,'multiline':False]
['text':' Get number of buffered elements.','line_number':446,'multiline':False]
['text':' Push a new value to the back of the buffer.','line_number':452,'multiline':False]
['text':' Push new values to the back of the buffer.','line_number':458,'multiline':False]
['text':' Get the element at the front of the buffer.','line_number':467,'multiline':False]
['text':' Pop a value from the front of the buffer.','line_number':473,'multiline':False]
['text':' Clear all values from the buffer.','line_number':479,'multiline':False]
['text':' Number of buffered "values".','line_number':486,'multiline':False]
['text':' namespace detail','line_number':490,'multiline':False]
['text':' namespace experimental','line_number':491,'multiline':False]
['text':' namespace asio','line_number':492,'multiline':False]
['text':' namespace boost','line_number':493,'multiline':False]
['text':' BOOST_ASIO_EXPERIMENTAL_DETAIL_CHANNEL_SERVICE_HPP','line_number':499,'multiline':False]
