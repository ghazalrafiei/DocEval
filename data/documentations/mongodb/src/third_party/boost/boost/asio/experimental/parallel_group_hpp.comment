['text':'','line_number':1,'multiline':False]
['text':' experimental/parallel_group.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' Helper trait for getting the completion signature from an async operation.','line_number':30,'multiline':False]
['text':' Helper trait for getting a tuple from a completion signature.','line_number':47,'multiline':False]
['text':' Helper trait for concatenating completion signatures.','line_number':58,'multiline':False]
['text':' namespace detail','line_number':99,'multiline':False]
['text':'/ A group of asynchronous operations that may be launched in parallel.','line_number':101,'multiline':False]
['text':'*
 * See the documentation for boost::asio::experimental::make_parallel_group for
 * a usage example.
 ','line_number':102,'multiline':True]
['text':'/ Constructor.','line_number':110,'multiline':False]
['text':'/ The completion signature for the group of operations.','line_number':116,'multiline':False]
['text':'/ Initiate an asynchronous wait for the group of operations.','line_number':120,'multiline':False]
['text':'*
   * Launches the group and asynchronously waits for completion.
   *
   * @param cancellation_condition A function object, called on completion of
   * an operation within the group, that is used to determine whether to cancel
   * the remaining operations. The function object is passed the arguments of
   * the completed operation's handler. To trigger cancellation of the remaining
   * operations, it must return a boost::asio::cancellation_type value other
   * than <tt>boost::asio::cancellation_type::none</tt>.
   *
   * @param token A @ref completion_token whose signature is comprised of
   * a @c std::array<std::size_t, N> indicating the completion order of the
   * operations, followed by all operations' completion handler arguments.
   *
   * The library provides the following @c cancellation_condition types:
   *
   * @li boost::asio::experimental::wait_for_all
   * @li boost::asio::experimental::wait_for_one
   * @li boost::asio::experimental::wait_for_one_error
   * @li boost::asio::experimental::wait_for_one_success
   ','line_number':121,'multiline':True]
['text':'/ Create a group of operations that may be launched in parallel.','line_number':166,'multiline':False]
['text':'*
 * For example:
 * @code boost::asio::experimental::make_parallel_group(
 *    [&](auto token)
 *    {
 *      return in.async_read_some(boost::asio::buffer(data), token);
 *    },
 *    [&](auto token)
 *    {
 *      return timer.async_wait(token);
 *    }
 *  ).async_wait(
 *    boost::asio::experimental::wait_for_all(),
 *    [](
 *        std::array<std::size_t, 2> completion_order,
 *        boost::system::error_code ec1, std::size_t n1,
 *        boost::system::error_code ec2
 *    )
 *    {
 *      switch (completion_order[0])
 *      {
 *      case 0:
 *        {
 *          std::cout << "descriptor finished: " << ec1 << ", " << n1 << "\n";
 *        }
 *        break;
 *      case 1:
 *        {
 *          std::cout << "timer finished: " << ec2 << "\n";
 *        }
 *        break;
 *      }
 *    }
 *  );
 * @endcode
 ','line_number':167,'multiline':True]
['text':' namespace experimental','line_number':210,'multiline':False]
['text':' namespace asio','line_number':211,'multiline':False]
['text':' namespace boost','line_number':212,'multiline':False]
['text':' BOOST_ASIO_EXPERIMENTAL_PARALLEL_GROUP_HPP','line_number':218,'multiline':False]
