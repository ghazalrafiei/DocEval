['text':'','line_number':1,'multiline':False]
['text':' windows/basic_overlapped_handle.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':35,'multiline':False]
['text':'/ Provides Windows handle functionality for objects that support','line_number':43,'multiline':False]
['text':'/ overlapped I/O.','line_number':44,'multiline':False]
['text':'*
 * The windows::overlapped_handle class provides the ability to wrap a Windows
 * handle. The underlying object referred to by the handle must support
 * overlapped I/O.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':45,'multiline':True]
['text':'/ The type of the executor associated with the object.','line_number':58,'multiline':False]
['text':'/ Rebinds the handle type to another executor.','line_number':61,'multiline':False]
['text':'/ The handle type when rebound to the specified executor.','line_number':65,'multiline':False]
['text':'/ The native representation of a handle.','line_number':69,'multiline':False]
['text':'/ An overlapped_handle is always the lowest layer.','line_number':77,'multiline':False]
['text':'/ Construct an overlapped handle without opening it.','line_number':80,'multiline':False]
['text':'*
   * This constructor creates an overlapped handle without opening it.
   *
   * @param ex The I/O executor that the overlapped handle will use, by default,
   * to dispatch handlers for any asynchronous operations performed on the
   * overlapped handle.
   ','line_number':81,'multiline':True]
['text':'/ Construct an overlapped handle without opening it.','line_number':93,'multiline':False]
['text':'*
   * This constructor creates an overlapped handle without opening it.
   *
   * @param context An execution context which provides the I/O executor that
   * the overlapped handle will use, by default, to dispatch handlers for any
   * asynchronous operations performed on the overlapped handle.
   ','line_number':94,'multiline':True]
['text':'/ Construct an overlapped handle on an existing native handle.','line_number':111,'multiline':False]
['text':'*
   * This constructor creates an overlapped handle object to hold an existing
   * native handle.
   *
   * @param ex The I/O executor that the overlapped handle will use, by default,
   * to dispatch handlers for any asynchronous operations performed on the
   * overlapped handle.
   *
   * @param native_handle The new underlying handle implementation.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':112,'multiline':True]
['text':'/ Construct an overlapped handle on an existing native handle.','line_number':133,'multiline':False]
['text':'*
   * This constructor creates an overlapped handle object to hold an existing
   * native handle.
   *
   * @param context An execution context which provides the I/O executor that
   * the overlapped handle will use, by default, to dispatch handlers for any
   * asynchronous operations performed on the overlapped handle.
   *
   * @param native_handle The new underlying handle implementation.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':134,'multiline':True]
['text':'/ Move-construct an overlapped handle from another.','line_number':160,'multiline':False]
['text':'*
   * This constructor moves a handle from one object to another.
   *
   * @param other The other overlapped handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c overlapped_handle(const executor_type&)
   * constructor.
   ','line_number':161,'multiline':True]
['text':'/ Move-assign an overlapped handle from another.','line_number':176,'multiline':False]
['text':'*
   * This assignment operator moves a handle from one object to another.
   *
   * @param other The other overlapped handle object from which the move will
   * occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c overlapped_handle(const executor_type&)
   * constructor.
   ','line_number':177,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':192,'multiline':False]
['text':'/ Get the executor associated with the object.','line_number':194,'multiline':False]
['text':'/ Get a reference to the lowest layer.','line_number':200,'multiline':False]
['text':'*
   * This function returns a reference to the lowest layer in a stack of
   * layers. Since an overlapped_handle cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A reference to the lowest layer in the stack of layers. Ownership
   * is not transferred to the caller.
   ','line_number':201,'multiline':True]
['text':'/ Get a const reference to the lowest layer.','line_number':214,'multiline':False]
['text':'*
   * This function returns a const reference to the lowest layer in a stack of
   * layers. Since an overlapped_handle cannot contain any further layers, it
   * simply returns a reference to itself.
   *
   * @return A const reference to the lowest layer in the stack of layers.
   * Ownership is not transferred to the caller.
   ','line_number':215,'multiline':True]
['text':'/ Assign an existing native handle to the handle.','line_number':228,'multiline':False]
['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':229,'multiline':True]
['text':'/ Assign an existing native handle to the handle.','line_number':243,'multiline':False]
['text':'
   * This function opens the handle to hold an existing native handle.
   *
   * @param handle A native handle.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':244,'multiline':True]
['text':'/ Determine whether the handle is open.','line_number':258,'multiline':False]
['text':'/ Close the handle.','line_number':264,'multiline':False]
['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':265,'multiline':True]
['text':'/ Close the handle.','line_number':279,'multiline':False]
['text':'*
   * This function is used to close the handle. Any asynchronous read or write
   * operations will be cancelled immediately, and will complete with the
   * boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':280,'multiline':True]
['text':'/ Get the native handle representation.','line_number':293,'multiline':False]
['text':'*
   * This function may be used to obtain the underlying representation of the
   * handle. This is intended to allow access to native handle functionality
   * that is not otherwise provided.
   ','line_number':294,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':304,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @throws boost::system::system_error Thrown on failure.
   ','line_number':305,'multiline':True]
['text':'/ Cancel all asynchronous operations associated with the handle.','line_number':319,'multiline':False]
['text':'*
   * This function causes all outstanding asynchronous read or write operations
   * to finish immediately, and the handlers for cancelled operations will be
   * passed the boost::asio::error::operation_aborted error.
   *
   * @param ec Set to indicate what error occurred, if any.
   ','line_number':320,'multiline':True]
['text':'/ Protected destructor to prevent deletion through this type.','line_number':334,'multiline':False]
['text':'*
   * This function destroys the handle, cancelling any outstanding asynchronous
   * wait operations associated with the handle as if by calling @c cancel.
   ','line_number':335,'multiline':True]
['text':' Disallow copying and assignment.','line_number':347,'multiline':False]
['text':' namespace windows','line_number':353,'multiline':False]
['text':' namespace asio','line_number':354,'multiline':False]
['text':' namespace boost','line_number':355,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE)','line_number':359,'multiline':False]
['text':'   || defined(BOOST_ASIO_HAS_WINDOWS_STREAM_HANDLE)','line_number':360,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':361,'multiline':False]
['text':' BOOST_ASIO_WINDOWS_BASIC_OVERLAPPED_HANDLE_HPP','line_number':363,'multiline':False]
