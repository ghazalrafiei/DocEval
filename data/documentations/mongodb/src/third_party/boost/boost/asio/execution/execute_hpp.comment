['text':'','line_number':1,'multiline':False]
['text':' execution/execute.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ A customisation point that executes a function on an executor.','line_number':33,'multiline':False]
['text':'*
 * The name <tt>execution::execute</tt> denotes a customisation point object.
 *
 * For some subexpressions <tt>e</tt> and <tt>f</tt>, let <tt>E</tt> be a type
 * such that <tt>decltype((e))</tt> is <tt>E</tt> and let <tt>F</tt> be a type
 * such that <tt>decltype((f))</tt> is <tt>F</tt>. The expression
 * <tt>execution::execute(e, f)</tt> is ill-formed if <tt>F</tt> does not model
 * <tt>invocable</tt>, or if <tt>E</tt> does not model either <tt>executor</tt>
 * or <tt>sender</tt>. Otherwise, it is expression-equivalent to:
 *
 * @li <tt>e.execute(f)</tt>, if that expression is valid. If the function
 *   selected does not execute the function object <tt>f</tt> on the executor
 *   <tt>e</tt>, the program is ill-formed with no diagnostic required.
 *
 * @li Otherwise, <tt>execute(e, f)</tt>, if that expression is valid, with
 *   overload resolution performed in a context that includes the declaration
 *   <tt>void execute();</tt> and that does not include a declaration of
 *   <tt>execution::execute</tt>. If the function selected by overload
 *   resolution does not execute the function object <tt>f</tt> on the executor
 *   <tt>e</tt>, the program is ill-formed with no diagnostic required.
 ','line_number':34,'multiline':True]
['text':'/ A type trait that determines whether a @c execute expression is well-formed.','line_number':57,'multiline':False]
['text':'*
 * Class template @c can_execute is a trait that is derived from
 * @c true_type if the expression <tt>execution::execute(std::declval<T>(),
 * std::declval<F>())</tt> is well formed; otherwise @c false_type.
 ','line_number':58,'multiline':True]
['text':' namespace execution','line_number':69,'multiline':False]
['text':' namespace asio','line_number':70,'multiline':False]
['text':' namespace boost','line_number':71,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':73,'multiline':False]
['text':' namespace detail','line_number':87,'multiline':False]
['text':' namespace execution','line_number':88,'multiline':False]
['text':' namespace asio','line_number':89,'multiline':False]
['text':' namespace boost','line_number':90,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)','line_number':192,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)','line_number':194,'multiline':False]
['text':' namespace boost_asio_execution_execute_fn','line_number':252,'multiline':False]
['text':' namespace','line_number':261,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':279,'multiline':False]
['text':' namespace execution','line_number':281,'multiline':False]
['text':' namespace asio','line_number':282,'multiline':False]
['text':' namespace boost','line_number':283,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':285,'multiline':False]
['text':' BOOST_ASIO_EXECUTION_EXECUTE_HPP','line_number':289,'multiline':False]
