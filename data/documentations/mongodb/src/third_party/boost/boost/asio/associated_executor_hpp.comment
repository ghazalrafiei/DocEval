['text':'','line_number':1,'multiline':False]
['text':' associated_executor.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' namespace detail','line_number':84,'multiline':False]
['text':'/ Traits type used to obtain the executor associated with an object.','line_number':86,'multiline':False]
['text':'*
 * A program may specialise this traits type if the @c T template parameter in
 * the specialisation is a user-defined type. The template parameter @c
 * Executor shall be a type meeting the Executor requirements.
 *
 * Specialisations shall meet the following requirements, where @c t is a const
 * reference to an object of type @c T, and @c e is an object of type @c
 * Executor.
 *
 * @li Provide a nested typedef @c type that identifies a type meeting the
 * Executor requirements.
 *
 * @li Provide a noexcept static member function named @c get, callable as @c
 * get(t) and with return type @c type.
 *
 * @li Provide a noexcept static member function named @c get, callable as @c
 * get(t,e) and with return type @c type.
 ','line_number':87,'multiline':True]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':109,'multiline':False]
['text':'/ If @c T has a nested type @c executor_type, <tt>T::executor_type</tt>.','line_number':112,'multiline':False]
['text':'/ Otherwise @c Executor.','line_number':113,'multiline':False]
['text':'/ If @c T has a nested type @c executor_type, returns','line_number':116,'multiline':False]
['text':'/ <tt>t.get_executor()</tt>. Otherwise returns @c ex.','line_number':117,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':120,'multiline':False]
['text':'/ Helper function to obtain an object's associated executor.','line_number':123,'multiline':False]
['text':'*
 * @returns <tt>associated_executor<T>::get(t)</tt>
 ','line_number':124,'multiline':True]
['text':'/ Helper function to obtain an object's associated executor.','line_number':134,'multiline':False]
['text':'*
 * @returns <tt>associated_executor<T, Executor>::get(t, ex)</tt>
 ','line_number':135,'multiline':True]
['text':'/ Helper function to obtain an object's associated executor.','line_number':148,'multiline':False]
['text':'*
 * @returns <tt>associated_executor<T, typename
 * ExecutionContext::executor_type>::get(t, ctx.get_executor())</tt>
 ','line_number':149,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_ALIAS_TEMPLATES)','line_number':169,'multiline':False]
['text':' namespace detail','line_number':191,'multiline':False]
['text':'/ Specialisation of associated_executor for @c std::reference_wrapper.','line_number':196,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':201,'multiline':False]
['text':'/ Forwards @c type to the associator specialisation for the unwrapped type','line_number':203,'multiline':False]
['text':'/ @c T.','line_number':204,'multiline':False]
['text':'/ Forwards the request to get the executor to the associator specialisation','line_number':207,'multiline':False]
['text':'/ for the unwrapped type @c T.','line_number':208,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_STD_REFERENCE_WRAPPER)','line_number':216,'multiline':False]
['text':'   || defined(GENERATING_DOCUMENTATION)','line_number':217,'multiline':False]
['text':' namespace asio','line_number':219,'multiline':False]
['text':' namespace boost','line_number':220,'multiline':False]
['text':' BOOST_ASIO_ASSOCIATED_EXECUTOR_HPP','line_number':224,'multiline':False]
