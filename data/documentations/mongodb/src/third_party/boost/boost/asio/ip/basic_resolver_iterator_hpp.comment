['text':'','line_number':1,'multiline':False]
['text':' ip/basic_resolver_iterator.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' defined(BOOST_ASIO_WINDOWS_RUNTIME)','line_number':31,'multiline':False]
['text':'/ An iterator over the entries produced by a resolver.','line_number':39,'multiline':False]
['text':'*
 * The boost::asio::ip::basic_resolver_iterator class template is used to define
 * iterators over the results returned by a resolver.
 *
 * The iterator's value_type, obtained when the iterator is dereferenced, is:
 * @code const basic_resolver_entry<InternetProtocol> @endcode
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Unsafe.
 ','line_number':40,'multiline':True]
['text':'/ The type used for the distance between two iterators.','line_number':55,'multiline':False]
['text':'/ The type of the value pointed to by the iterator.','line_number':58,'multiline':False]
['text':'/ The type of the result of applying operator->() to the iterator.','line_number':61,'multiline':False]
['text':'/ The type of the result of applying operator*() to the iterator.','line_number':64,'multiline':False]
['text':'/ The iterator category.','line_number':67,'multiline':False]
['text':'/ Default constructor creates an end iterator.','line_number':70,'multiline':False]
['text':'/ Copy constructor.','line_number':76,'multiline':False]
['text':'/ Move constructor.','line_number':84,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':91,'multiline':False]
['text':'/ Assignment operator.','line_number':93,'multiline':False]
['text':'/ Move-assignment operator.','line_number':102,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':114,'multiline':False]
['text':'/ Dereference an iterator.','line_number':116,'multiline':False]
['text':'/ Dereference an iterator.','line_number':122,'multiline':False]
['text':'/ Increment operator (prefix).','line_number':128,'multiline':False]
['text':'/ Increment operator (postfix).','line_number':135,'multiline':False]
['text':'/ Test two iterators for equality.','line_number':143,'multiline':False]
['text':'/ Test two iterators for inequality.','line_number':150,'multiline':False]
['text':' Reset state to match a default constructed end iterator.','line_number':162,'multiline':False]
['text':' namespace ip','line_number':188,'multiline':False]
['text':' namespace asio','line_number':189,'multiline':False]
['text':' namespace boost','line_number':190,'multiline':False]
['text':' BOOST_ASIO_IP_BASIC_RESOLVER_ITERATOR_HPP','line_number':194,'multiline':False]
