['text':'','line_number':1,'multiline':False]
['text':' experimental/basic_concurrent_channel.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' namespace detail','line_number':33,'multiline':False]
['text':'/ A channel for messages.','line_number':35,'multiline':False]
['text':'*
 * The basic_concurrent_channel class template is used for sending messages
 * between different parts of the same application. A <em>message</em> is
 * defined as a collection of arguments to be passed to a completion handler,
 * and the set of messages supported by a channel is specified by its @c Traits
 * and <tt>Signatures...</tt> template parameters. Messages may be sent and
 * received using asynchronous or non-blocking synchronous operations.
 *
 * Unless customising the traits, applications will typically use the @c
 * experimental::concurrent_channel alias template. For example:
 * @code void send_loop(int i, steady_timer& timer,
 *     concurrent_channel<void(error_code, int)>& ch)
 * {
 *   if (i < 10)
 *   {
 *     timer.expires_after(chrono::seconds(1));
 *     timer.async_wait(
 *         [i, &timer, &ch](error_code error)
 *         {
 *           if (!error)
 *           {
 *             ch.async_send(error_code(), i,
 *                 [i, &timer, &ch](error_code error)
 *                 {
 *                   if (!error)
 *                   {
 *                     send_loop(i + 1, timer, ch);
 *                   }
 *                 });
 *           }
 *         });
 *   }
 *   else
 *   {
 *     ch.close();
 *   }
 * }
 *
 * void receive_loop(concurent_channel<void(error_code, int)>& ch)
 * {
 *   ch.async_receive(
 *       [&ch](error_code error, int i)
 *       {
 *         if (!error)
 *         {
 *           std::cout << "Received " << i << "\n";
 *           receive_loop(ch);
 *         }
 *       });
 * } @endcode
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Safe.
 *
 * The basic_concurrent_channel class template is thread-safe, and would
 * typically be used for passing messages between application code that run on
 * different threads. Consider using @ref basic_channel, and its alias template
 * @c experimental::channel, to pass messages between code running in a single
 * thread or on the same strand.
 ','line_number':36,'multiline':True]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':103,'multiline':False]
['text':'/ The type of the executor associated with the channel.','line_number':125,'multiline':False]
['text':'/ Rebinds the channel type to another executor.','line_number':128,'multiline':False]
['text':'/ The channel type when rebound to the specified executor.','line_number':132,'multiline':False]
['text':'/ The traits type associated with the channel.','line_number':136,'multiline':False]
['text':'/ Construct a basic_concurrent_channel.','line_number':139,'multiline':False]
['text':'*
   * This constructor creates and channel.
   *
   * @param ex The I/O executor that the channel will use, by default, to
   * dispatch handlers for any asynchronous operations performed on the channel.
   *
   * @param max_buffer_size The maximum number of messages that may be buffered
   * in the channel.
   ','line_number':140,'multiline':True]
['text':'/ Construct and open a basic_concurrent_channel.','line_number':159,'multiline':False]
['text':'*
   * This constructor creates and opens a channel.
   *
   * @param context An execution context which provides the I/O executor that
   * the channel will use, by default, to dispatch handlers for any asynchronous
   * operations performed on the channel.
   *
   * @param max_buffer_size The maximum number of messages that may be buffered
   * in the channel.
   ','line_number':160,'multiline':True]
['text':'/ Move-construct a basic_concurrent_channel from another.','line_number':185,'multiline':False]
['text':'*
   * This constructor moves a channel from one object to another.
   *
   * @param other The other basic_concurrent_channel object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_concurrent_channel(const executor_type&)
   * constructor.
   ','line_number':186,'multiline':True]
['text':'/ Move-assign a basic_concurrent_channel from another.','line_number':203,'multiline':False]
['text':'*
   * This assignment operator moves a channel from one object to another.
   * Cancels any outstanding asynchronous operations associated with the target
   * object.
   *
   * @param other The other basic_concurrent_channel object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_concurrent_channel(const executor_type&)
   * constructor.
   ','line_number':204,'multiline':True]
['text':' All channels have access to each other's implementations.','line_number':228,'multiline':False]
['text':'/ Move-construct a basic_concurrent_channel from another.','line_number':232,'multiline':False]
['text':'*
   * This constructor moves a channel from one object to another.
   *
   * @param other The other basic_concurrent_channel object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_concurrent_channel(const executor_type&)
   * constructor.
   ','line_number':233,'multiline':True]
['text':'/ Move-assign a basic_concurrent_channel from another.','line_number':255,'multiline':False]
['text':'*
   * This assignment operator moves a channel from one object to another.
   * Cancels any outstanding asynchronous operations associated with the target
   * object.
   *
   * @param other The other basic_concurrent_channel object from which the move
   * will occur.
   *
   * @note Following the move, the moved-from object is in the same state as if
   * constructed using the @c basic_concurrent_channel(const executor_type&)
   * constructor.
   ','line_number':256,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':284,'multiline':False]
['text':'/ Destructor.','line_number':286,'multiline':False]
['text':'/ Get the executor associated with the object.','line_number':292,'multiline':False]
['text':'/ Get the capacity of the channel's buffer.','line_number':298,'multiline':False]
['text':'/ Determine whether the channel is open.','line_number':304,'multiline':False]
['text':'/ Reset the channel to its initial state.','line_number':310,'multiline':False]
['text':'/ Close the channel.','line_number':316,'multiline':False]
['text':'/ Cancel all asynchronous operations waiting on the channel.','line_number':322,'multiline':False]
['text':'*
   * All outstanding send operations will complete with the error
   * @c boost::asio::experimental::error::channel_cancelled. Outstanding receive
   * operations complete with the result as determined by the channel traits.
   ','line_number':323,'multiline':True]
['text':'/ Determine whether a message can be received without blocking.','line_number':333,'multiline':False]
['text':'/ Try to send a message without blocking.','line_number':341,'multiline':False]
['text':'*
   * Fails if the buffer is full and there are no waiting receive operations.
   *
   * @returns @c true on success, @c false on failure.
   ','line_number':342,'multiline':True]
['text':'/ Try to send a number of messages without blocking.','line_number':350,'multiline':False]
['text':'*
   * @returns The number of messages that were sent.
   ','line_number':351,'multiline':True]
['text':'/ Asynchronously send a message.','line_number':357,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':364,'multiline':False]
['text':'/ Try to receive a message without blocking.','line_number':366,'multiline':False]
['text':'*
   * Fails if the buffer is full and there are no waiting receive operations.
   *
   * @returns @c true on success, @c false on failure.
   ','line_number':367,'multiline':True]
['text':'/ Asynchronously receive a message.','line_number':378,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':388,'multiline':False]
['text':' Disallow copying and assignment.','line_number':395,'multiline':False]
['text':' Helper function to get an executor's context.','line_number':404,'multiline':False]
['text':' Helper function to get an executor's context.','line_number':412,'multiline':False]
['text':' The service associated with the I/O object.','line_number':476,'multiline':False]
['text':' The underlying implementation of the I/O object.','line_number':479,'multiline':False]
['text':' The associated executor.','line_number':483,'multiline':False]
['text':' namespace experimental','line_number':487,'multiline':False]
['text':' namespace asio','line_number':488,'multiline':False]
['text':' namespace boost','line_number':489,'multiline':False]
['text':' BOOST_ASIO_EXPERIMENTAL_BASIC_CONCURRENT_CHANNEL_HPP','line_number':493,'multiline':False]
