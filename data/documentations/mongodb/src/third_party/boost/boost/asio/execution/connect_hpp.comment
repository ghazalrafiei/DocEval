['text':'','line_number':1,'multiline':False]
['text':' execution/connect.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ A customisation point that connects a sender to a receiver.','line_number':38,'multiline':False]
['text':'*
 * The name <tt>execution::connect</tt> denotes a customisation point object.
 * For some subexpressions <tt>s</tt> and <tt>r</tt>, let <tt>S</tt> be a type
 * such that <tt>decltype((s))</tt> is <tt>S</tt> and let <tt>R</tt> be a type
 * such that <tt>decltype((r))</tt> is <tt>R</tt>. The expression
 * <tt>execution::connect(s, r)</tt> is expression-equivalent to:
 *
 * @li <tt>s.connect(r)</tt>, if that expression is valid, if its type
 *   satisfies <tt>operation_state</tt>, and if <tt>S</tt> satisfies
 *   <tt>sender</tt>.
 *
 * @li Otherwise, <tt>connect(s, r)</tt>, if that expression is valid, if its
 *   type satisfies <tt>operation_state</tt>, and if <tt>S</tt> satisfies
 *   <tt>sender</tt>, with overload resolution performed in a context that
 *   includes the declaration <tt>void connect();</tt> and that does not include
 *   a declaration of <tt>execution::connect</tt>.
 *
 * @li Otherwise, <tt>as_operation{s, r}</tt>, if <tt>r</tt> is not an instance
 *  of <tt>as_receiver<F, S></tt> for some type <tt>F</tt>, and if
 *  <tt>receiver_of<R> && executor_of<remove_cvref_t<S>,
 *  as_invocable<remove_cvref_t<R>, S>></tt> is <tt>true</tt>, where
 *  <tt>as_operation</tt> is an implementation-defined class equivalent to
 *  @code template <class S, class R>
 *  struct as_operation
 *  {
 *    remove_cvref_t<S> e_;
 *    remove_cvref_t<R> r_;
 *    void start() noexcept try {
 *      execution::execute(std::move(e_),
 *          as_invocable<remove_cvref_t<R>, S>{r_});
 *    } catch(...) {
 *      execution::set_error(std::move(r_), current_exception());
 *    }
 *  }; @endcode
 *  and <tt>as_invocable</tt> is a class template equivalent to the following:
 *  @code template<class R>
 *  struct as_invocable
 *  {
 *    R* r_;
 *    explicit as_invocable(R& r) noexcept
 *      : r_(std::addressof(r)) {}
 *    as_invocable(as_invocable && other) noexcept
 *      : r_(std::exchange(other.r_, nullptr)) {}
 *    ~as_invocable() {
 *      if(r_)
 *        execution::set_done(std::move(*r_));
 *    }
 *    void operator()() & noexcept try {
 *      execution::set_value(std::move(*r_));
 *      r_ = nullptr;
 *    } catch(...) {
 *      execution::set_error(std::move(*r_), current_exception());
 *      r_ = nullptr;
 *    }
 *  };
 *  @endcode
 *
 * @li Otherwise, <tt>execution::connect(s, r)</tt> is ill-formed.
 ','line_number':39,'multiline':True]
['text':'/ A type trait that determines whether a @c connect expression is','line_number':100,'multiline':False]
['text':'/ well-formed.','line_number':101,'multiline':False]
['text':'*
 * Class template @c can_connect is a trait that is derived from
 * @c true_type if the expression <tt>execution::connect(std::declval<S>(),
 * std::declval<R>())</tt> is well formed; otherwise @c false_type.
 ','line_number':102,'multiline':True]
['text':'/ A type trait to determine the result of a @c connect expression.','line_number':113,'multiline':False]
['text':'/ The type of the connect expression.','line_number':117,'multiline':False]
['text':'*
   * The type of the expression <tt>execution::connect(std::declval<S>(),
   * std::declval<R>())</tt>.
   ','line_number':118,'multiline':True]
['text':'/ A type alis to determine the result of a @c connect expression.','line_number':125,'multiline':False]
['text':' namespace execution','line_number':129,'multiline':False]
['text':' namespace asio','line_number':130,'multiline':False]
['text':' namespace boost','line_number':131,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':133,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':274,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':418,'multiline':False]
['text':' namespace boost_asio_execution_connect_fn','line_number':430,'multiline':False]
['text':' namespace','line_number':439,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':454,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':469,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_ALIAS_TEMPLATES)','line_number':483,'multiline':False]
['text':' namespace execution','line_number':485,'multiline':False]
['text':' namespace asio','line_number':486,'multiline':False]
['text':' namespace boost','line_number':487,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':489,'multiline':False]
['text':' BOOST_ASIO_EXECUTION_CONNECT_HPP','line_number':493,'multiline':False]
