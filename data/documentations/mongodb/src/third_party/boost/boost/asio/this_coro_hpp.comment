['text':'','line_number':1,'multiline':False]
['text':' this_coro.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ Awaitable type that returns the executor of the current coroutine.','line_number':27,'multiline':False]
['text':'/ Awaitable object that returns the executor of the current coroutine.','line_number':35,'multiline':False]
['text':'/ Awaitable type that returns the cancellation state of the current coroutine.','line_number':42,'multiline':False]
['text':'/ Awaitable object that returns the cancellation state of the current','line_number':50,'multiline':False]
['text':'/ coroutine.','line_number':51,'multiline':False]
['text':'*
 * @par Example
 * @code boost::asio::awaitable<void> my_coroutine()
 * {
 *   boost::asio::cancellation_state cs
 *     = co_await boost::asio::this_coro::cancellation_state;
 *
 *   // ...
 *
 *   if (cs.cancelled() != boost::asio::cancellation_type::none)
 *     // ...
 * } @endcode
 ','line_number':52,'multiline':True]
['text':'/ Returns an awaitable object that may be used to reset the cancellation state','line_number':73,'multiline':False]
['text':'/ of the current coroutine.','line_number':74,'multiline':False]
['text':'*
 * Let <tt>P</tt> be the cancellation slot associated with the current
 * coroutine's @ref co_spawn completion handler. Assigns a new
 * boost::asio::cancellation_state object <tt>S</tt>, constructed as
 * <tt>S(P)</tt>, into the current coroutine's cancellation state object.
 *
 * @par Example
 * @code boost::asio::awaitable<void> my_coroutine()
 * {
 *   co_await boost::asio::this_coro::reset_cancellation_state();
 *
 *   // ...
 * } @endcode
 *
 * @note The cancellation state is shared by all coroutines in the same "thread
 * of execution" that was created using boost::asio::co_spawn.
 ','line_number':75,'multiline':True]
['text':'/ Returns an awaitable object that may be used to reset the cancellation state','line_number':95,'multiline':False]
['text':'/ of the current coroutine.','line_number':96,'multiline':False]
['text':'*
 * Let <tt>P</tt> be the cancellation slot associated with the current
 * coroutine's @ref co_spawn completion handler. Assigns a new
 * boost::asio::cancellation_state object <tt>S</tt>, constructed as <tt>S(P,
 * std::forward<Filter>(filter))</tt>, into the current coroutine's
 * cancellation state object.
 *
 * @par Example
 * @code boost::asio::awaitable<void> my_coroutine()
 * {
 *   co_await boost::asio::this_coro::reset_cancellation_state(
 *       boost::asio::enable_partial_cancellation());
 *
 *   // ...
 * } @endcode
 *
 * @note The cancellation state is shared by all coroutines in the same "thread
 * of execution" that was created using boost::asio::co_spawn.
 ','line_number':97,'multiline':True]
['text':'/ Returns an awaitable object that may be used to reset the cancellation state','line_number':120,'multiline':False]
['text':'/ of the current coroutine.','line_number':121,'multiline':False]
['text':'*
 * Let <tt>P</tt> be the cancellation slot associated with the current
 * coroutine's @ref co_spawn completion handler. Assigns a new
 * boost::asio::cancellation_state object <tt>S</tt>, constructed as <tt>S(P,
 * std::forward<InFilter>(in_filter),
 * std::forward<OutFilter>(out_filter))</tt>, into the current coroutine's
 * cancellation state object.
 *
 * @par Example
 * @code boost::asio::awaitable<void> my_coroutine()
 * {
 *   co_await boost::asio::this_coro::reset_cancellation_state(
 *       boost::asio::enable_partial_cancellation(),
 *       boost::asio::disable_cancellation());
 *
 *   // ...
 * } @endcode
 *
 * @note The cancellation state is shared by all coroutines in the same "thread
 * of execution" that was created using boost::asio::co_spawn.
 ','line_number':122,'multiline':True]
['text':'/ Returns an awaitable object that may be used to determine whether the','line_number':149,'multiline':False]
['text':'/ coroutine throws if trying to suspend when it has been cancelled.','line_number':150,'multiline':False]
['text':'*
 * @par Example
 * @code boost::asio::awaitable<void> my_coroutine()
 * {
 *   if (co_await boost::asio::this_coro::throw_if_cancelled)
 *     // ...
 *
 *   // ...
 * } @endcode
 ','line_number':151,'multiline':True]
['text':'/ Returns an awaitable object that may be used to specify whether the','line_number':164,'multiline':False]
['text':'/ coroutine throws if trying to suspend when it has been cancelled.','line_number':165,'multiline':False]
['text':'*
 * @par Example
 * @code boost::asio::awaitable<void> my_coroutine()
 * {
 *   co_await boost::asio::this_coro::throw_if_cancelled(false);
 *
 *   // ...
 * } @endcode
 ','line_number':166,'multiline':True]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':178,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':274,'multiline':False]
['text':' namespace this_coro','line_number':276,'multiline':False]
['text':' namespace asio','line_number':277,'multiline':False]
['text':' namespace boost','line_number':278,'multiline':False]
['text':' BOOST_ASIO_THIS_CORO_HPP','line_number':282,'multiline':False]
