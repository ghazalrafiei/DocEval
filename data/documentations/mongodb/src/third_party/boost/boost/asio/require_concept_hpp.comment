['text':'','line_number':1,'multiline':False]
['text':' require_concept.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ A customisation point that applies a concept-enforcing property to an','line_number':32,'multiline':False]
['text':'/ object.','line_number':33,'multiline':False]
['text':'*
 * The name <tt>require_concept</tt> denotes a customization point object. The
 * expression <tt>boost::asio::require_concept(E, P)</tt> for some
 * subexpressions <tt>E</tt> and <tt>P</tt> (with types <tt>T =
 * decay_t<decltype(E)></tt> and <tt>Prop = decay_t<decltype(P)></tt>) is
 * expression-equivalent to:
 *
 * @li If <tt>is_applicable_property_v<T, Prop> &&
 *   Prop::is_requirable_concept</tt> is not a well-formed constant expression
 *   with value <tt>true</tt>, <tt>boost::asio::require_concept(E, P)</tt> is
 *   ill-formed.
 *
 * @li Otherwise, <tt>E</tt> if the expression <tt>Prop::template
 *   static_query_v<T> == Prop::value()</tt> is a well-formed constant
 *   expression with value <tt>true</tt>.
 *
 * @li Otherwise, <tt>(E).require_concept(P)</tt> if the expression
 *   <tt>(E).require_concept(P)</tt> is well-formed.
 *
 * @li Otherwise, <tt>require_concept(E, P)</tt> if the expression
 *   <tt>require_concept(E, P)</tt> is a valid expression with overload
 *   resolution performed in a context that does not include the declaration
 *   of the <tt>require_concept</tt> customization point object.
 *
 * @li Otherwise, <tt>boost::asio::require_concept(E, P)</tt> is ill-formed.
 ','line_number':34,'multiline':True]
['text':'/ A type trait that determines whether a @c require_concept expression is','line_number':62,'multiline':False]
['text':'/ well-formed.','line_number':63,'multiline':False]
['text':'*
 * Class template @c can_require_concept is a trait that is derived from
 * @c true_type if the expression
 * <tt>boost::asio::require_concept(std::declval<T>(),
 * std::declval<Property>())</tt> is well formed; otherwise @c false_type.
 ','line_number':64,'multiline':True]
['text':'/ A type trait that determines whether a @c require_concept expression will','line_number':76,'multiline':False]
['text':'/ not throw.','line_number':77,'multiline':False]
['text':'*
 * Class template @c is_nothrow_require_concept is a trait that is derived from
 * @c true_type if the expression
 * <tt>boost::asio::require_concept(std::declval<T>(),
 * std::declval<Property>())</tt> is @c noexcept; otherwise @c false_type.
 ','line_number':78,'multiline':True]
['text':'/ A type trait that determines the result type of a @c require_concept','line_number':90,'multiline':False]
['text':'/ expression.','line_number':91,'multiline':False]
['text':'*
 * Class template @c require_concept_result is a trait that determines the
 * result type of the expression
 * <tt>boost::asio::require_concept(std::declval<T>(),
 * std::declval<Property>())</tt>.
 ','line_number':92,'multiline':True]
['text':'/ The result of the @c require_concept expression.','line_number':101,'multiline':False]
['text':' namespace asio','line_number':105,'multiline':False]
['text':' namespace boost','line_number':106,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':108,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_CONCEPT_MEMBER_TRAIT)','line_number':237,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_CONCEPT_MEMBER_TRAIT)','line_number':239,'multiline':False]
['text':' namespace boost_asio_require_concept_fn','line_number':297,'multiline':False]
['text':' namespace','line_number':305,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':324,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':340,'multiline':False]
['text':' namespace asio','line_number':349,'multiline':False]
['text':' namespace boost','line_number':350,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':352,'multiline':False]
['text':' BOOST_ASIO_REQUIRE_CONCEPT_HPP','line_number':356,'multiline':False]
