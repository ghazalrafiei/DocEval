['text':'','line_number':1,'multiline':False]
['text':' query.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':'/ A customisation point that queries the value of a property.','line_number':32,'multiline':False]
['text':'*
 * The name <tt>query</tt> denotes a customization point object. The
 * expression <tt>boost::asio::query(E, P)</tt> for some
 * subexpressions <tt>E</tt> and <tt>P</tt> (with types <tt>T =
 * decay_t<decltype(E)></tt> and <tt>Prop = decay_t<decltype(P)></tt>) is
 * expression-equivalent to:
 *
 * @li If <tt>is_applicable_property_v<T, Prop></tt> is not a well-formed
 *   constant expression with value <tt>true</tt>, <tt>boost::asio::query(E,
 *   P)</tt> is ill-formed.
 *
 * @li Otherwise, <tt>Prop::template static_query_v<T></tt> if the expression
 *   <tt>Prop::template static_query_v<T></tt> is a well-formed constant
 *   expression.
 *
 * @li Otherwise, <tt>(E).query(P)</tt> if the expression
 *   <tt>(E).query(P)</tt> is well-formed.
 *
 * @li Otherwise, <tt>query(E, P)</tt> if the expression
 *   <tt>query(E, P)</tt> is a valid expression with overload
 *   resolution performed in a context that does not include the declaration
 *   of the <tt>query</tt> customization point object.
 *
 * @li Otherwise, <tt>boost::asio::query(E, P)</tt> is ill-formed.
 ','line_number':33,'multiline':True]
['text':'/ A type trait that determines whether a @c query expression is well-formed.','line_number':60,'multiline':False]
['text':'*
 * Class template @c can_query is a trait that is derived from
 * @c true_type if the expression <tt>boost::asio::query(std::declval<T>(),
 * std::declval<Property>())</tt> is well formed; otherwise @c false_type.
 ','line_number':61,'multiline':True]
['text':'/ A type trait that determines whether a @c query expression will','line_number':72,'multiline':False]
['text':'/ not throw.','line_number':73,'multiline':False]
['text':'*
 * Class template @c is_nothrow_query is a trait that is derived from
 * @c true_type if the expression <tt>boost::asio::query(std::declval<T>(),
 * std::declval<Property>())</tt> is @c noexcept; otherwise @c false_type.
 ','line_number':74,'multiline':True]
['text':'/ A type trait that determines the result type of a @c query expression.','line_number':85,'multiline':False]
['text':'*
 * Class template @c query_result is a trait that determines the result
 * type of the expression <tt>boost::asio::query(std::declval<T>(),
 * std::declval<Property>())</tt>.
 ','line_number':86,'multiline':True]
['text':'/ The result of the @c query expression.','line_number':94,'multiline':False]
['text':' namespace asio','line_number':98,'multiline':False]
['text':' namespace boost','line_number':99,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':101,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)','line_number':211,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_DEDUCED_QUERY_MEMBER_TRAIT)','line_number':213,'multiline':False]
['text':' namespace boost_asio_query_fn','line_number':271,'multiline':False]
['text':' namespace','line_number':279,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':297,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIABLE_TEMPLATES)','line_number':312,'multiline':False]
['text':' namespace asio','line_number':321,'multiline':False]
['text':' namespace boost','line_number':322,'multiline':False]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':324,'multiline':False]
['text':' BOOST_ASIO_QUERY_HPP','line_number':328,'multiline':False]
