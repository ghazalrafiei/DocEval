['text':'','line_number':1,'multiline':False]
['text':' bind_executor.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' Helper to automatically define nested typedef result_type.','line_number':35,'multiline':False]
['text':' Helper to automatically define nested typedef argument_type.','line_number':101,'multiline':False]
['text':' Helper to automatically define nested typedefs first_argument_type and','line_number':125,'multiline':False]
['text':' second_argument_type.','line_number':126,'multiline':False]
['text':' Helper to perform uses_executor construction of the target type, if','line_number':153,'multiline':False]
['text':' required.','line_number':154,'multiline':False]
['text':' Helper to enable SFINAE on zero-argument operator() below.','line_number':189,'multiline':False]
['text':' namespace detail','line_number':204,'multiline':False]
['text':'/ A call wrapper type to bind an executor of type @c Executor to an object of','line_number':206,'multiline':False]
['text':'/ type @c T.','line_number':207,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':216,'multiline':False]
['text':'/ The type of the target object.','line_number':219,'multiline':False]
['text':'/ The type of the associated executor.','line_number':222,'multiline':False]
['text':'/ The return type if a function.','line_number':226,'multiline':False]
['text':'*
   * The type of @c result_type is based on the type @c T of the wrapper's
   * target object:
   *
   * @li if @c T is a pointer to function type, @c result_type is a synonym for
   * the return type of @c T;
   *
   * @li if @c T is a class type with a member type @c result_type, then @c
   * result_type is a synonym for @c T::result_type;
   *
   * @li otherwise @c result_type is not defined.
   ','line_number':227,'multiline':True]
['text':'/ The type of the function's argument.','line_number':241,'multiline':False]
['text':'*
   * The type of @c argument_type is based on the type @c T of the wrapper's
   * target object:
   *
   * @li if @c T is a pointer to a function type accepting a single argument,
   * @c argument_type is a synonym for the return type of @c T;
   *
   * @li if @c T is a class type with a member type @c argument_type, then @c
   * argument_type is a synonym for @c T::argument_type;
   *
   * @li otherwise @c argument_type is not defined.
   ','line_number':242,'multiline':True]
['text':'/ The type of the function's first argument.','line_number':256,'multiline':False]
['text':'*
   * The type of @c first_argument_type is based on the type @c T of the
   * wrapper's target object:
   *
   * @li if @c T is a pointer to a function type accepting two arguments, @c
   * first_argument_type is a synonym for the return type of @c T;
   *
   * @li if @c T is a class type with a member type @c first_argument_type,
   * then @c first_argument_type is a synonym for @c T::first_argument_type;
   *
   * @li otherwise @c first_argument_type is not defined.
   ','line_number':257,'multiline':True]
['text':'/ The type of the function's second argument.','line_number':271,'multiline':False]
['text':'*
   * The type of @c second_argument_type is based on the type @c T of the
   * wrapper's target object:
   *
   * @li if @c T is a pointer to a function type accepting two arguments, @c
   * second_argument_type is a synonym for the return type of @c T;
   *
   * @li if @c T is a class type with a member type @c first_argument_type,
   * then @c second_argument_type is a synonym for @c T::second_argument_type;
   *
   * @li otherwise @c second_argument_type is not defined.
   ','line_number':272,'multiline':True]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':285,'multiline':False]
['text':'/ Construct an executor wrapper for the specified object.','line_number':287,'multiline':False]
['text':'*
   * This constructor is only valid if the type @c T is constructible from type
   * @c U.
   ','line_number':288,'multiline':True]
['text':'/ Copy constructor.','line_number':299,'multiline':False]
['text':'/ Construct a copy, but specify a different executor.','line_number':305,'multiline':False]
['text':'/ Construct a copy of a different executor wrapper type.','line_number':312,'multiline':False]
['text':'*
   * This constructor is only valid if the @c Executor type is constructible
   * from type @c OtherExecutor, and the type @c T is constructible from type
   * @c U.
   ','line_number':313,'multiline':True]
['text':'/ Construct a copy of a different executor wrapper type, but specify a','line_number':324,'multiline':False]
['text':'/ different executor.','line_number':325,'multiline':False]
['text':'*
   * This constructor is only valid if the type @c T is constructible from type
   * @c U.
   ','line_number':326,'multiline':True]
['text':'/ Move constructor.','line_number':339,'multiline':False]
['text':'/ Move construct the target object, but specify a different executor.','line_number':346,'multiline':False]
['text':'/ Move construct from a different executor wrapper type.','line_number':353,'multiline':False]
['text':'/ Move construct from a different executor wrapper type, but specify a','line_number':361,'multiline':False]
['text':'/ different executor.','line_number':362,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE) || defined(GENERATING_DOCUMENTATION)','line_number':370,'multiline':False]
['text':'/ Destructor.','line_number':372,'multiline':False]
['text':'/ Obtain a reference to the target object.','line_number':377,'multiline':False]
['text':'/ Obtain a reference to the target object.','line_number':383,'multiline':False]
['text':'/ Obtain the associated executor.','line_number':389,'multiline':False]
['text':'/ Forwarding function call operator.','line_number':402,'multiline':False]
['text':'/ Forwarding function call operator.','line_number':410,'multiline':False]
['text':'','line_number':444,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_STD_TYPE_TRAITS) && !defined(_MSC_VER)','line_number':448,'multiline':False]
['text':'','line_number':477,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_STD_TYPE_TRAITS) && !defined(_MSC_VER)','line_number':481,'multiline':False]
['text':'/ Associate an object of type @c T with an executor of type @c Executor.','line_number':488,'multiline':False]
['text':'/ Associate an object of type @c T with an execution context's executor.','line_number':500,'multiline':False]
['text':' namespace detail','line_number':573,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)','line_number':623,'multiline':False]
['text':'','line_number':665,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)','line_number':669,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)','line_number':694,'multiline':False]
['text':'','line_number':729,'multiline':True]
['text':' defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)','line_number':733,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':765,'multiline':False]
['text':' namespace asio','line_number':767,'multiline':False]
['text':' namespace boost','line_number':768,'multiline':False]
['text':' BOOST_ASIO_BIND_EXECUTOR_HPP','line_number':772,'multiline':False]
