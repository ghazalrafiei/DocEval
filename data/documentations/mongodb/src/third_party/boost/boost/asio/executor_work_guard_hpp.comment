['text':'','line_number':1,'multiline':False]
['text':' executor_work_guard.hpp','line_number':2,'multiline':False]
['text':' ~~~~~~~~~~~~~~~~~~~~~~~','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':7,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' defined(_MSC_VER) && (_MSC_VER >= 1200)','line_number':16,'multiline':False]
['text':' !defined(BOOST_ASIO_EXECUTOR_WORK_GUARD_DECL)','line_number':36,'multiline':False]
['text':'/ An object of type @c executor_work_guard controls ownership of outstanding','line_number':40,'multiline':False]
['text':'/ executor work within a scope.','line_number':41,'multiline':False]
['text':'/ The underlying executor type.','line_number':46,'multiline':False]
['text':'/ Constructs a @c executor_work_guard object for the specified executor.','line_number':49,'multiline':False]
['text':'*
   * Stores a copy of @c e and calls <tt>on_work_started()</tt> on it.
   ','line_number':50,'multiline':True]
['text':'/ Copy constructor.','line_number':55,'multiline':False]
['text':'/ Move constructor.','line_number':58,'multiline':False]
['text':'/ Destructor.','line_number':61,'multiline':False]
['text':'*
   * Unless the object has already been reset, or is in a moved-from state,
   * calls <tt>on_work_finished()</tt> on the stored executor.
   ','line_number':62,'multiline':True]
['text':'/ Obtain the associated executor.','line_number':68,'multiline':False]
['text':'/ Whether the executor_work_guard object owns some outstanding work.','line_number':71,'multiline':False]
['text':'/ Indicate that the work is no longer outstanding.','line_number':74,'multiline':False]
['text':'*
   * Unless the object has already been reset, or is in a moved-from state,
   * calls <tt>on_work_finished()</tt> on the stored executor.
   ','line_number':75,'multiline':True]
['text':' defined(GENERATING_DOCUMENTATION)','line_number':82,'multiline':False]
['text':' defined(BOOST_ASIO_HAS_MOVE)','line_number':119,'multiline':False]
['text':' Disallow assignment.','line_number':147,'multiline':False]
['text':' !defined(BOOST_ASIO_NO_TS_EXECUTORS)','line_number':154,'multiline':False]
['text':'  defined(BOOST_ASIO_HAS_MOVE)','line_number':201,'multiline':False]
['text':' Disallow assignment.','line_number':229,'multiline':False]
['text':' !defined(GENERATING_DOCUMENTATION)','line_number':245,'multiline':False]
['text':'/ Create an @ref executor_work_guard object.','line_number':247,'multiline':False]
['text':'*
 * @param ex An executor.
 *
 * @returns A work guard constructed with the specified executor.
 ','line_number':248,'multiline':True]
['text':'/ Create an @ref executor_work_guard object.','line_number':263,'multiline':False]
['text':'*
 * @param ctx An execution context, from which an executor will be obtained.
 *
 * @returns A work guard constructed with the execution context's executor,
 * obtained by performing <tt>ctx.get_executor()</tt>.
 ','line_number':264,'multiline':True]
['text':'/ Create an @ref executor_work_guard object.','line_number':282,'multiline':False]
['text':'*
 * @param t An arbitrary object, such as a completion handler, for which the
 * associated executor will be obtained.
 *
 * @returns A work guard constructed with the associated executor of the object
 * @c t, which is obtained as if by calling <tt>get_associated_executor(t)</tt>.
 ','line_number':283,'multiline':True]
['text':'/ Create an @ref executor_work_guard object.','line_number':308,'multiline':False]
['text':'*
 * @param t An arbitrary object, such as a completion handler, for which the
 * associated executor will be obtained.
 *
 * @param ex An executor to be used as the candidate object when determining the
 * associated executor.
 *
 * @returns A work guard constructed with the associated executor of the object
 * @c t, which is obtained as if by calling <tt>get_associated_executor(t,
 * ex)</tt>.
 ','line_number':309,'multiline':True]
['text':'/ Create an @ref executor_work_guard object.','line_number':332,'multiline':False]
['text':'*
 * @param t An arbitrary object, such as a completion handler, for which the
 * associated executor will be obtained.
 *
 * @param ctx An execution context, from which an executor is obtained to use as
 * the candidate object for determining the associated executor.
 *
 * @returns A work guard constructed with the associated executor of the object
 * @c t, which is obtained as if by calling <tt>get_associated_executor(t,
 * ctx.get_executor())</tt>.
 ','line_number':333,'multiline':True]
['text':' namespace asio','line_number':367,'multiline':False]
['text':' namespace boost','line_number':368,'multiline':False]
['text':' BOOST_ASIO_EXECUTOR_WORK_GUARD_HPP','line_number':372,'multiline':False]
