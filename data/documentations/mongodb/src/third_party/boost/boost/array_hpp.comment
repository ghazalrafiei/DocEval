['text':' The following code declares class array,
 * an STL container (as wrapper) for arrays of constant size.
 *
 * See
 *      http://www.boost.org/libs/array/
 * for documentation.
 *
 * The original author site is at: http://www.josuttis.com/
 *
 * (C) Copyright Nicolai M. Josuttis 2001.
 *
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 *  9 Jan 2013 - (mtc) Added constexpr
 * 14 Apr 2012 - (mtc) Added support for boost::hash
 * 28 Dec 2010 - (mtc) Added cbegin and cend (and crbegin and crend) for C++Ox compatibility.
 * 10 Mar 2010 - (mtc) fill method added, matching resolution of the standard library working group.
 *      See <http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776> or Trac issue #3168
 *      Eventually, we should remove "assign" which is now a synonym for "fill" (Marshall Clow)
 * 10 Mar 2010 - added workaround for SUNCC and !STLPort [trac #3893] (Marshall Clow)
 * 29 Jan 2004 - c_array() added, BOOST_NO_PRIVATE_IN_AGGREGATE removed (Nico Josuttis)
 * 23 Aug 2002 - fix for Non-MSVC compilers combined with MSVC libraries.
 * 05 Aug 2001 - minor update (Nico Josuttis)
 * 20 Jan 2001 - STLport fix (Beman Dawes)
 * 29 Sep 2000 - Initial Revision (Nico Josuttis)
 *
 * Jan 29, 2004
 ','line_number':1,'multiline':True]
['text':' 'std::equal': Function call with parameters that may be unsafe','line_number':38,'multiline':False]
['text':' boost::array<T,N>' : default constructor could not be generated ','line_number':39,'multiline':False]
['text':' warning C4610: class 'boost::array<T,N>' can never be instantiated - user defined constructor required ','line_number':40,'multiline':False]
['text':' FIXES for broken compilers','line_number':53,'multiline':False]
['text':' fixed-size array of elements of type T','line_number':62,'multiline':False]
['text':' type definitions','line_number':65,'multiline':False]
['text':' iterator support','line_number':74,'multiline':False]
['text':' reverse iterator support','line_number':83,'multiline':False]
['text':' workaround for broken reverse_iterator implementations','line_number':93,'multiline':False]
['text':' operator[]','line_number':114,'multiline':False]
['text':'BOOST_CONSTEXPR','line_number':120,'multiline':True]
['text':' at() with range check','line_number':125,'multiline':False]
['text':'BOOST_CONSTEXPR','line_number':127,'multiline':True]
['text':' front() and back()','line_number':129,'multiline':False]
['text':' size is constant','line_number':150,'multiline':False]
['text':' swap (note: linear complexity)','line_number':156,'multiline':False]
['text':' direct access to data (read-only)','line_number':162,'multiline':False]
['text':' use array as C array (direct read/write access to data)','line_number':166,'multiline':False]
['text':' assignment with type conversion','line_number':169,'multiline':False]
['text':' assign one value to all elements','line_number':176,'multiline':False]
['text':' A synonym for fill','line_number':177,'multiline':False]
['text':' check range (may be private because it is static)','line_number':183,'multiline':False]
['text':' type definitions','line_number':194,'multiline':False]
['text':' iterator support','line_number':203,'multiline':False]
['text':' reverse iterator support','line_number':212,'multiline':False]
['text':' workaround for broken reverse_iterator implementations','line_number':222,'multiline':False]
['text':' operator[]','line_number':243,'multiline':False]
['text':'i','line_number':244,'multiline':True]
['text':'BOOST_CONSTEXPR','line_number':249,'multiline':True]
['text':'i','line_number':249,'multiline':True]
['text':' at() with range check','line_number':254,'multiline':False]
['text':'i','line_number':255,'multiline':True]
['text':'BOOST_CONSTEXPR','line_number':256,'multiline':True]
['text':'i','line_number':256,'multiline':True]
['text':' front() and back()','line_number':258,'multiline':False]
['text':' size is constant','line_number':279,'multiline':False]
['text':'y','line_number':285,'multiline':True]
['text':' direct access to data (read-only)','line_number':288,'multiline':False]
['text':' use array as C array (direct read/write access to data)','line_number':292,'multiline':False]
['text':' assignment with type conversion','line_number':295,'multiline':False]
['text':' assign one value to all elements','line_number':301,'multiline':False]
['text':' check range (may be private because it is static)','line_number':305,'multiline':False]
['text':'','line_number':310,'multiline':False]
['text':' We need to return something here to keep','line_number':311,'multiline':False]
['text':' some compilers happy: however we will never','line_number':312,'multiline':False]
['text':' actually get here....','line_number':313,'multiline':False]
['text':'','line_number':314,'multiline':False]
['text':' comparisons','line_number':321,'multiline':False]
['text':' global swap()','line_number':347,'multiline':False]
['text':'  Trac ticket #4757; the Sun Solaris compiler can't handle','line_number':354,'multiline':False]
['text':'  syntax like 'T(&get_c_array(boost::array<T,N>& arg))[N]'','line_number':355,'multiline':False]
['text':'  ','line_number':356,'multiline':False]
['text':'  We can't just use this for all compilers, because the ','line_number':357,'multiline':False]
['text':'      borland compilers can't handle this form. ','line_number':358,'multiline':False]
['text':' Specific for boost::array: simply returns its elems data member.','line_number':366,'multiline':False]
['text':' Specific for boost::array: simply returns its elems data member.','line_number':373,'multiline':False]
['text':' Specific for boost::array: simply returns its elems data member.','line_number':380,'multiline':False]
['text':' Const version.','line_number':387,'multiline':False]
['text':' Overload for std::array, assuming that std::array will have','line_number':396,'multiline':False]
['text':' explicit conversion functions as discussed at the WG21 meeting','line_number':397,'multiline':False]
['text':' in Summit, March 2009.','line_number':398,'multiline':False]
['text':' Const version.','line_number':405,'multiline':False]
['text':' namespace boost ','line_number':433,'multiline':True]
['text':'  If we don't have std::array, I'm assuming that we don't have std::get','line_number':436,'multiline':False]
['text':'BOOST_ARRAY_HPP','line_number':456,'multiline':True]
