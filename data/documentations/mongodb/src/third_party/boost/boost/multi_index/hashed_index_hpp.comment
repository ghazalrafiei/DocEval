['text':' Copyright 2003-2021 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]
['text':' keep it first to prevent nasty warns in MSVC ','line_number':16,'multiline':True]
['text':' hashed_index adds a layer of hashed indexing to a given Super ','line_number':79,'multiline':True]
['text':' Most of the implementation of unique and non-unique indices is
 * shared. We tell from one another on instantiation time by using
 * Category tags defined in hash_index_node.hpp.
 ','line_number':81,'multiline':True]
['text':' this used in base member initializer list ','line_number':88,'multiline':True]
['text':' The "ISO C++ Template Parser" option in CW8.3 has a problem with the
 * lifetime of const references bound to temporaries --precisely what
 * scopeguards are.
 ','line_number':100,'multiline':True]
['text':' cross-index access ','line_number':109,'multiline':True]
['text':' types ','line_number':130,'multiline':True]
['text':' needed to avoid commas in some macros ','line_number':206,'multiline':True]
['text':' construct/destroy/copy
   * Default and copy ctors are in the protected section as indices are
   * not supposed to be created on their own. No range ctor either.
   ','line_number':212,'multiline':True]
['text':' size and capacity ','line_number':238,'multiline':True]
['text':' iterators ','line_number':244,'multiline':True]
['text':' modifiers ','line_number':275,'multiline':True]
['text':' MSVC++ 6.0 optimizer on safe mode code chokes if this
     * this is not added. Left it for all compilers as it does no
     * harm.
     ','line_number':443,'multiline':True]
['text':' MSVC++ 6.0 optimizer on safe mode code chokes if this
     * this is not added. Left it for all compilers as it does no
     * harm.
     ','line_number':464,'multiline':True]
['text':' same container ','line_number':533,'multiline':True]
['text':' different containers ','line_number':565,'multiline':True]
['text':' observers ','line_number':580,'multiline':True]
['text':' lookup ','line_number':586,'multiline':True]
['text':' Internally, these ops rely on const_iterator being the same
   * type as iterator.
   ','line_number':588,'multiline':True]
['text':' Implementation note: When CompatibleKey is consistently promoted to
   * KeyFromValue::result_type for equality comparison, the promotion is made
   * once in advance to increase efficiency.
   ','line_number':592,'multiline':True]
['text':' bucket interface ','line_number':664,'multiline':True]
['text':' hash policy ','line_number':725,'multiline':True]
['text':' Copy ctor just takes the internal configuration objects from x. The rest
     * is done in subsequent call to copy_().
     ','line_number':783,'multiline':True]
['text':' the container is guaranteed to be empty by now ','line_number':808,'multiline':True]
['text':' n-1 of group ','line_number':1002,'multiline':True]
['text':' Make the second node prior() pointer back-linked so that it won't
         * refer to a deleted node when the time for its own destruction comes.
         ','line_number':1003,'multiline':True]
['text':' comparison ','line_number':1180,'multiline':True]
['text':' defect macro refers to class, not function, templates, but anyway ','line_number':1183,'multiline':True]
['text':' From is_permutation code in
       * http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3068.pdf
       ','line_number':1215,'multiline':True]
['text':' serialization ','line_number':1235,'multiline':True]
['text':' invariant stuff ','line_number':1254,'multiline':True]
['text':' This forwarding function eases things for the boost::mem_fn construct
   * in BOOST_MULTI_INDEX_HASHED_INDEX_CHECK_INVARIANT. Actually,
   * final_check_invariant is already an inherited member function of index.
   ','line_number':1282,'multiline':True]
['text':' range of size 1 or 2 ','line_number':1360,'multiline':True]
['text':' last of bucket ','line_number':1367,'multiline':True]
['text':' group of size>2 ','line_number':1369,'multiline':True]
['text':' range of size 1 or 2 ','line_number':1388,'multiline':True]
['text':' last of bucket ','line_number':1397,'multiline':True]
['text':' group of size>2 ','line_number':1399,'multiline':True]
['text':' only this can possibly throw ','line_number':1478,'multiline':True]
['text':' only this can possibly throw ','line_number':1531,'multiline':True]
['text':' group of 3 or more ','line_number':1598,'multiline':True]
['text':' in place <-> equal to some other member of the group ','line_number':1600,'multiline':True]
['text':' end of range ','line_number':1608,'multiline':True]
['text':' x lies outside ','line_number':1610,'multiline':True]
['text':' x not found ','line_number':1615,'multiline':True]
['text':' skip range (and potentially x, too, which is fine) ','line_number':1621,'multiline':True]
['text':' group of 1 or 2 ','line_number':1625,'multiline':True]
['text':' C4355 ','line_number':1793,'multiline':True]
['text':' comparison ','line_number':1796,'multiline':True]
['text':'  specialized algorithms ','line_number':1820,'multiline':True]
['text':' namespace multi_index::detail ','line_number':1833,'multiline':True]
['text':' hashed index specifiers ','line_number':1835,'multiline':True]
['text':' namespace multi_index ','line_number':1887,'multiline':True]
['text':' namespace boost ','line_number':1889,'multiline':True]
['text':' Boost.Foreach compatibility ','line_number':1891,'multiline':True]
