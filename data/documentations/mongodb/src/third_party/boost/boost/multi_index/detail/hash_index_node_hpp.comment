['text':' Copyright 2003-2020 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]
['text':' keep it first to prevent nasty warns in MSVC ','line_number':16,'multiline':True]
['text':' Certain C++ requirements on unordered associative containers (see LWG issue
 * #579) imply a data structure where nodes are linked in a single list, which
 * in its turn forces implementors to add additional overhed per node to
 * associate each with its corresponding bucket. Others resort to storing hash
 * values, we use an alternative structure providing unconditional O(1)
 * manipulation, even in situations of unfair hash distribution, plus some
 * lookup speedups. For unique indices we maintain a doubly linked list of
 * nodes except that if N is the first node of a bucket its associated
 * bucket node is embedded between N and the preceding node in the following
 * manner:
 *
 *        +---+   +---+       +---+   +---+
 *     <--+   |<--+   |    <--+   |<--+   |
 *   ...  | B0|   | B1|  ...  | B1|   | B2|  ...
 *        |   |-+ |   +-->    |   |-+ |   +-->
 *        +-+-+ | +---+       +-+-+ | +---+
 *              |   ^               |   ^
 *              |   |               |   |
 *              | +-+               | +-+
 *              | |                 | |
 *              v |                 v |  
 *       --+---+---+---+--   --+---+---+---+--
 *     ... |   | B1|   |  ...  |   | B2|   | ...
 *       --+---+---+---+--   --+---+---+---+--
 *
 *
 * The fist and last nodes of buckets can be checked with
 *
 *   first node of a bucket: Npn != N
 *   last node of a bucket:  Nnp != N
 *
 * (n and p short for ->next(), ->prior(), bucket nodes have prior pointers
 * only). Pure insert and erase (without lookup) can be unconditionally done
 * in O(1).
 * For non-unique indices we add the following additional complexity: when
 * there is a group of 3 or more equivalent elements, they are linked as
 * follows:
 *
 *         +-----------------------+
 *         |                       v
 *   +---+ | +---+       +---+   +---+
 *   |   | +-+   |       |   |<--+   |
 *   | F |   | S |  ...  | P |   | L |
 *   |   +-->|   |       |   +-+ |   |
 *   +---+   +---+       +---+ | +---+
 *     ^                       |
 *     +-----------------------+
 * 
 * F, S, P and L are the first, second, penultimate and last node in the
 * group, respectively (S and P can coincide if the group has size 3.) This
 * arrangement is used to skip equivalent elements in O(1) when doing lookup,
 * while preserving O(1) insert/erase. The following invariants identify
 * special positions (some of the operations have to be carefully implemented
 * as Xnn is not valid if Xn points to a bucket):
 *
 *   first node of a bucket: Npnp  == N
 *   last node of a bucket:  Nnpp  == N
 *   first node of a group:  Nnp != N && Nnppn == N
 *   second node of a group: Npn != N && Nppnn == N
 *   n-1 node of a group:    Nnp != N && Nnnpp == N
 *   last node of a group:   Npn != N && Npnnp == N
 * 
 * The memory overhead is one pointer per bucket plus two pointers per node,
 * probably unbeatable. The resulting structure is bidirectonally traversable,
 * though currently we are just providing forward iteration.
 ','line_number':27,'multiline':True]
['text':' half-header (only prior() pointer) to use for the bucket array ','line_number':97,'multiline':True]
['text':' full header (prior() and next()) for the nodes ','line_number':123,'multiline':True]
['text':' Boost.MultiIndex requires machinery to reverse unlink operations. A simple
 * way to make a pointer-manipulation function undoable is to templatize
 * its internal pointer assignments with a functor that, besides doing the
 * assignment, keeps track of the original pointer values and can later undo
 * the operations in reverse order.
 ','line_number':157,'multiline':True]
['text':' undo op ','line_number':191,'multiline':True]
['text':' in the absence of aliasing, restitution order is immaterial ','line_number':193,'multiline':True]
['text':' We know the maximum number of pointer and base pointer assignments that
   * the two unlink versions do, so we can statically reserve the needed
   * storage.
   ','line_number':208,'multiline':True]
['text':' algorithmic stuff for unique and non-unique variants ','line_number':219,'multiline':True]
['text':' empty bucket ','line_number':257,'multiline':True]
['text':' used only at rehashing ','line_number':304,'multiline':True]
['text':' returns true iff bucket is emptied ','line_number':316,'multiline':True]
['text':' empty bucket ','line_number':398,'multiline':True]
['text':' last of bucket ','line_number':456,'multiline':True]
['text':' first of group size ','line_number':461,'multiline':True]
['text':' n-1 of group ','line_number':465,'multiline':True]
['text':' first of bucket ','line_number':469,'multiline':True]
['text':' last of bucket ','line_number':474,'multiline':True]
['text':' first of group ','line_number':479,'multiline':True]
['text':' last of group and bucket ','line_number':484,'multiline':True]
['text':' second of group ','line_number':489,'multiline':True]
['text':' last of group, ~(last of bucket) ','line_number':492,'multiline':True]
['text':' used only at rehashing ','line_number':498,'multiline':True]
['text':' empty bucket ','line_number':503,'multiline':True]
['text':' returns first of group true iff bucket is emptied ','line_number':528,'multiline':True]
['text':' interoperability with hashed_index_iterator ','line_number':756,'multiline':True]
['text':' namespace multi_index::detail ','line_number':771,'multiline':True]
['text':' namespace multi_index ','line_number':773,'multiline':True]
['text':' namespace boost ','line_number':775,'multiline':True]
