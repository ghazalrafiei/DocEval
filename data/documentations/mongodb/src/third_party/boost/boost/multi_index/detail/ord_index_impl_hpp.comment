['text':' Copyright 2003-2021 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 *
 * The internal implementation of red-black trees is based on that of SGI STL
 * stl_tree.h file: 
 *
 * Copyright (c) 1996,1997
 * Silicon Graphics Computer Systems, Inc.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Silicon Graphics makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Hewlett-Packard Company makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 ','line_number':1,'multiline':True]
['text':' keep it first to prevent nasty warns in MSVC ','line_number':43,'multiline':True]
['text':' ordered_index adds a layer of ordered indexing to a given Super and accepts
 * an augmenting policy for optional addition of order statistics.
 ','line_number':107,'multiline':True]
['text':' Most of the implementation of unique and non-unique indices is
 * shared. We tell from one another on instantiation time by using
 * these tags.
 ','line_number':111,'multiline':True]
['text':' this used in base member initializer list ','line_number':121,'multiline':True]
['text':' The "ISO C++ Template Parser" option in CW8.3 has a problem with the
 * lifetime of const references bound to temporaries --precisely what
 * scopeguards are.
 ','line_number':139,'multiline':True]
['text':' cross-index access ','line_number':148,'multiline':True]
['text':' for the benefit of AugmentPolicy::augmented_interface ','line_number':159,'multiline':True]
['text':' types ','line_number':164,'multiline':True]
['text':' needed to avoid commas in some macros ','line_number':237,'multiline':True]
['text':' construct/copy/destroy
   * Default and copy ctors are in the protected section as indices are
   * not supposed to be created on their own. No range ctor either.
   * Assignment operators defined at ordered_index rather than here.
   ','line_number':243,'multiline':True]
['text':' iterators ','line_number':254,'multiline':True]
['text':' capacity ','line_number':293,'multiline':True]
['text':' modifiers ','line_number':299,'multiline':True]
['text':' end() ','line_number':345,'multiline':True]
['text':' MSVC++ 6.0 optimizer on safe mode code chokes if this
     * this is not added. Left it for all compilers as it does no
     * harm.
     ','line_number':461,'multiline':True]
['text':' MSVC++ 6.0 optimizer on safe mode code chokes if this
     * this is not added. Left it for all compilers as it does no
     * harm.
     ','line_number':482,'multiline':True]
['text':' same container ','line_number':554,'multiline':True]
['text':' different containers ','line_number':587,'multiline':True]
['text':' observers ','line_number':602,'multiline':True]
['text':' set operations ','line_number':608,'multiline':True]
['text':' Internally, these ops rely on const_iterator being the same
   * type as iterator.
   ','line_number':610,'multiline':True]
['text':' range ','line_number':704,'multiline':True]
['text':' Copy ctor just takes the key and compare objects from x. The rest is
     * done in a subsequent call to copy_().
     ','line_number':753,'multiline':True]
['text':' the container is guaranteed to be empty by now ','line_number':776,'multiline':True]
['text':' header() does not satisfy this nor the previous check ','line_number':833,'multiline':True]
['text':' serialization ','line_number':1069,'multiline':True]
['text':' invariant stuff ','line_number':1086,'multiline':True]
['text':' This forwarding function eases things for the boost::mem_fn construct
   * in BOOST_MULTI_INDEX_ORD_INDEX_CHECK_INVARIANT. Actually,
   * final_check_invariant is already an inherited member function of
   * ordered_index_impl.
   ','line_number':1127,'multiline':True]
['text':' for the benefit of AugmentPolicy::augmented_interface ','line_number':1135,'multiline':True]
['text':' used to distinguish header() from root, in iterator.operator++ ','line_number':1149,'multiline':True]
['text':' coverity[uninit_ctor]: suppress warning ','line_number':1158,'multiline':True]
['text':' inconsistent rearrangement ','line_number':1515,'multiline':True]
['text':' serialization ','line_number':1529,'multiline':True]
['text':' for the benefit of AugmentPolicy::augmented_interface ','line_number':1531,'multiline':True]
['text':' construct/copy/destroy
   * Default and copy ctors are in the protected section as indices are
   * not supposed to be created on their own. No range ctor either.
   ','line_number':1568,'multiline':True]
['text':' C4355 ','line_number':1600,'multiline':True]
['text':' comparison ','line_number':1603,'multiline':True]
['text':'  specialized algorithms ','line_number':1707,'multiline':True]
['text':' namespace multi_index::detail ','line_number':1722,'multiline':True]
['text':' namespace multi_index ','line_number':1724,'multiline':True]
['text':' namespace boost ','line_number':1726,'multiline':True]
['text':' Boost.Foreach compatibility ','line_number':1728,'multiline':True]
