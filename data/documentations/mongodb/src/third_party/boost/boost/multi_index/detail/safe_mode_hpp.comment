['text':' Copyright 2003-2022 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 ','line_number':1,'multiline':True]
['text':' Safe mode machinery, in the spirit of Cay Hortmann's "Safe STL"
 * (http://www.horstmann.com/safestl.html).
 * In this mode, containers have to redefine their iterators as
 * safe_iterator<base_iterator> and keep a tracking object member of
 * type safe_container<safe_iterator<base_iterator> >. These classes provide
 * an internal record of which iterators are at a given moment associated
 * to a given container, and properly mark the iterators as invalid
 * when the container gets destroyed.
 * Iterators are chained in a single attached list, whose header is
 * kept by the container. More elaborate data structures would yield better
 * performance, but I decided to keep complexity to a minimum since
 * speed is not an issue here.
 * Safe mode iterators automatically check that only proper operations
 * are performed on them: for instance, an invalid iterator cannot be
 * dereferenced. Additionally, a set of utilty macros and functions are
 * provided that serve to implement preconditions and cooperate with
 * the framework within the container.
 * Iterators can also be unchecked, i.e. they do not have info about
 * which container they belong in. This situation arises when the iterator
 * is restored from a serialization archive: only information on the node
 * is available, and it is not possible to determine to which container
 * the iterator is associated to. The only sensible policy is to assume
 * unchecked iterators are valid, though this can certainly generate false
 * positive safe mode checks.
 * This is not a full-fledged safe mode framework, and is only intended
 * for use within the limits of Boost.MultiIndex.
 ','line_number':16,'multiline':True]
['text':' Assertion macros. These resolve to no-ops if
 * !defined(BOOST_MULTI_INDEX_ENABLE_SAFE_MODE).
 ','line_number':44,'multiline':True]
['text':' keep it first to prevent nasty warns in MSVC ','line_number':119,'multiline':True]
['text':' Checking routines. Assume the best for unchecked iterators
 * (i.e. they pass the checking when there is not enough info
 * to know.)
 ','line_number':145,'multiline':True]
['text':' crucial that this check goes after previous break ','line_number':230,'multiline':True]
['text':' crucial that this check goes after previous break ','line_number':252,'multiline':True]
['text':' fwd decls ','line_number':291,'multiline':True]
['text':' fwd decls ','line_number':298,'multiline':True]
['text':' Detaches all remaining iterators, which by now will
     * be those pointing to the end of the container.
     ','line_number':391,'multiline':True]
['text':' namespace multi_index::safe_mode::safe_mode_detail ','line_number':441,'multiline':True]
['text':' In order to enable safe mode on a container:
 *   - The container must keep a member of type safe_container<iterator>,
 *   - iterators must be generated via safe_iterator, which adapts a
 *     preexistent unsafe iterator class. safe_iterators are passed the
 *     address of the previous safe_container member at construction time.
 ','line_number':443,'multiline':True]
['text':' get_node is not to be used by the user ','line_number':489,'multiline':True]
['text':' Serialization. Note that Iterator::save and Iterator:load
   * are assumed to be defined and public: at first sight it seems
   * like we could have resorted to the public serialization interface
   * for doing the forwarding to the adapted iterator class:
   *   ar<<base_reference();
   *   ar>>base_reference();
   * but this would cause incompatibilities if a saving
   * program is in safe mode and the loading program is not, or
   * viceversa --in safe mode, the archived iterator data is one layer
   * deeper, this is especially relevant with XML archives.
   * It'd be nice if Boost.Serialization provided some forwarding
   * facility for use by adaptor classes.
   ','line_number':543,'multiline':True]
['text':' Invalidates all iterators equivalent to that given. Safe containers
 * must call this when deleting elements: the safe mode framework cannot
 * perform this operation automatically without outside help.
 ','line_number':613,'multiline':True]
['text':' Transfers iterators equivalent to that given to Dst, if that container has
 * the same iterator type; otherwise, detaches them.
 ','line_number':642,'multiline':True]
['text':' same iterator type ','line_number':657,'multiline':True]
['text':' nothing to do with it, was passed by value and will die now ','line_number':681,'multiline':True]
['text':' same iterator type ','line_number':687,'multiline':True]
['text':' namespace multi_index::safe_mode::safe_mode_detail ','line_number':692,'multiline':True]
['text':' namespace multi_index::safe_mode ','line_number':694,'multiline':True]
['text':' namespace multi_index ','line_number':696,'multiline':True]
['text':' namespace serialization ','line_number':708,'multiline':True]
['text':' namespace boost ','line_number':711,'multiline':True]
['text':' BOOST_MULTI_INDEX_ENABLE_SAFE_MODE ','line_number':713,'multiline':True]
