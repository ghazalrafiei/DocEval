['text':'  Copyright (c) 2001-2011 Hartmut Kaiser','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]
['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':21,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':24,'multiline':False]
['text':'  This file contains attribute extraction utilities. The utilities','line_number':25,'multiline':False]
['text':'  provided also accept spirit's unused_type; all no-ops. Compiler','line_number':26,'multiline':False]
['text':'  optimization will easily strip these away.','line_number':27,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':28,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':32,'multiline':False]
['text':' extract first and second element of a fusion sequence','line_number':33,'multiline':False]
['text':' This is the default case: the plain attribute values','line_number':45,'multiline':False]
['text':' This handles the case where the attribute is a single element fusion','line_number':59,'multiline':False]
['text':' sequence. We silently extract the only element and treat it as the','line_number':60,'multiline':False]
['text':' attribute to generate output from.','line_number':61,'multiline':False]
['text':'= void','line_number':80,'multiline':True]
['text':' This handles optional attributes.','line_number':85,'multiline':False]
['text':' This handles attributes wrapped inside a boost::ref().','line_number':110,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':123,'multiline':False]
['text':' handle case where container value type is convertible to result type','line_number':138,'multiline':False]
['text':' we simply return the front element of the container','line_number':139,'multiline':False]
['text':' return first element from container','line_number':143,'multiline':False]
['text':' handle strings','line_number':153,'multiline':False]
['text':' everything else gets just passed through','line_number':172,'multiline':False]
['text':' return first element from container','line_number':186,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':204,'multiline':False]
['text':' overload for non-container attributes','line_number':207,'multiline':False]
['text':' overload for containers (but not for variants or optionals','line_number':215,'multiline':False]
['text':' holding containers)','line_number':216,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':251,'multiline':False]
