['text':'=============================================================================
    Copyright (c) 1998-2003 Joel de Guzman
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'  Spirit predefined maximum number of simultaneously usable different','line_number':15,'multiline':False]
['text':'  scanner types.','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'  This limit defines the maximum number of possible different scanner','line_number':18,'multiline':False]
['text':'  types for which a specific rule<> may be used. If this isn't defined, a','line_number':19,'multiline':False]
['text':'  rule<> may be used with one scanner type only (multiple scanner support','line_number':20,'multiline':False]
['text':'  is disabled).','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':23,'multiline':False]
['text':'  Ensure a meaningful maximum number of simultaneously usable scanner types','line_number':28,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':39,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'  scanner_list (a fake scanner)','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':'      Typically, rules are tied to a specific scanner type and','line_number':50,'multiline':False]
['text':'      a particular rule cannot be used with anything else. Sometimes','line_number':51,'multiline':False]
['text':'      there's a need for rules that can accept more than one scanner','line_number':52,'multiline':False]
['text':'      type. The scanner_list<S0, ...SN> can be used as a template','line_number':53,'multiline':False]
['text':'      parameter to the rule class to specify up to the number of','line_number':54,'multiline':False]
['text':'      scanner types defined by the BOOST_SPIRIT_RULE_SCANNERTYPE_LIMIT','line_number':55,'multiline':False]
['text':'      constant. Example:','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'          rule<scanner_list<ScannerT0, ScannerT1> > r;','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':'      *** This feature is available only to compilers that support','line_number':60,'multiline':False]
['text':'      partial template specialization. ***','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':63,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':'  rule class','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'      The rule is a polymorphic parser that acts as a named place-','line_number':78,'multiline':False]
['text':'      holder capturing the behavior of an EBNF expression assigned to','line_number':79,'multiline':False]
['text':'      it.','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':'      The rule is a template class parameterized by:','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':'          1) scanner (scanner_t, see scanner.hpp),','line_number':84,'multiline':False]
['text':'          2) the rule's context (context_t, see parser_context.hpp)','line_number':85,'multiline':False]
['text':'          3) an arbitrary tag (tag_t, see parser_id.hpp) that allows','line_number':86,'multiline':False]
['text':'             a rule to be tagged for identification.','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':'      These template parameters may be specified in any order. The','line_number':89,'multiline':False]
['text':'      scanner will default to scanner<> when it is not specified.','line_number':90,'multiline':False]
['text':'      The context will default to parser_context when not specified.','line_number':91,'multiline':False]
['text':'      The tag will default to parser_address_tag when not specified.','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':'      The definition of the rule (its right hand side, RHS) held by','line_number':94,'multiline':False]
['text':'      the rule through a scoped_ptr. When a rule is seen in the RHS','line_number':95,'multiline':False]
['text':'      of an assignment or copy construction EBNF expression, the rule','line_number':96,'multiline':False]
['text':'      is held by the LHS rule by reference.','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':99,'multiline':False]
['text':' namespace BOOST_SPIRIT_CLASSIC_NS','line_number':173,'multiline':False]
