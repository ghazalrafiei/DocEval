['text':'=============================================================================
    Phoenix V1.2.1
    Copyright (c) 2001-2002 Joel de Guzman

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':14,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':17,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':'  argument class','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':'      Lazy arguments','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':'      An actor base class that extracts and returns the Nth argument','line_number':23,'multiline':False]
['text':'      from the argument list passed in the 'args' tuple in the eval','line_number':24,'multiline':False]
['text':'      member function (see actor.hpp). There are some predefined','line_number':25,'multiline':False]
['text':'      argument constants that can be used as actors (arg1..argN).','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'      The argument actor is a place-holder for the actual arguments','line_number':28,'multiline':False]
['text':'      passed by the client. For example, wherever arg1 is seen placed','line_number':29,'multiline':False]
['text':'      in a lazy function (see functions.hpp) or lazy operator (see','line_number':30,'multiline':False]
['text':'      operators.hpp), this will be replaced by the actual first','line_number':31,'multiline':False]
['text':'      argument in the actual function evaluation. Argument actors are','line_number':32,'multiline':False]
['text':'      essentially lazy arguments. A lazy argument is a full actor in','line_number':33,'multiline':False]
['text':'      its own right and can be evaluated through the actor's operator().','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'      Example:','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':'          char        c = 'A';','line_number':38,'multiline':False]
['text':'          int         i = 123;','line_number':39,'multiline':False]
['text':'          const char* s = "Hello World";','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':'          cout << arg1(c) << ' ';','line_number':42,'multiline':False]
['text':'          cout << arg1(i, s) << ' ';','line_number':43,'multiline':False]
['text':'          cout << arg2(i, s) << ' ';','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':'       will print out "A 123 Hello World"','line_number':46,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':48,'multiline':False]
['text':'////////////////////////////////','line_number':64,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':'  value class','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':'      Lazy values','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':'      A bound actual parameter is kept in a value class for deferred','line_number':99,'multiline':False]
['text':'      access later when needed. A value object is immutable. Value','line_number':100,'multiline':False]
['text':'      objects are typically created through the val(x) free function','line_number':101,'multiline':False]
['text':'      which returns a value<T> with T deduced from the type of x. x is','line_number':102,'multiline':False]
['text':'      held in the value<T> object by value.','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':'      Lazy values are actors. As such, lazy values can be evaluated','line_number':105,'multiline':False]
['text':'      through the actor's operator(). Such invocation gives the value's','line_number':106,'multiline':False]
['text':'      identity. Example:','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':'          cout << val(3)() << val("Hello World")();','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':'      prints out "3 Hello World"','line_number':111,'multiline':False]
['text':'','line_number':112,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':113,'multiline':False]
['text':'args','line_number':127,'multiline':True]
['text':'////////////////////////////////','line_number':135,'multiline':False]
['text':'////////////////////////////////','line_number':143,'multiline':False]
['text':'  This is undefined and not allowed.','line_number':146,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'  Arbitrary types T are typically converted to a actor<value<T> >','line_number':150,'multiline':False]
['text':'  (see as_actor<T> in actor.hpp). A specialization is also provided','line_number':151,'multiline':False]
['text':'  for arrays. T[N] arrays are converted to actor<value<T const*> >.','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':154,'multiline':False]
['text':'////////////////////////////////','line_number':163,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':172,'multiline':False]
['text':'','line_number':173,'multiline':False]
['text':'  variable class','line_number':174,'multiline':False]
['text':'','line_number':175,'multiline':False]
['text':'      Lazy variables','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':'      A bound actual parameter may also be held by non-const reference','line_number':178,'multiline':False]
['text':'      in a variable class for deferred access later when needed. A','line_number':179,'multiline':False]
['text':'      variable object is mutable, i.e. its referenced variable can be','line_number':180,'multiline':False]
['text':'      modified. Variable objects are typically created through the','line_number':181,'multiline':False]
['text':'      var(x) free function which returns a variable<T> with T deduced','line_number':182,'multiline':False]
['text':'      from the type of x. x is held in the value<T> object by','line_number':183,'multiline':False]
['text':'      reference.','line_number':184,'multiline':False]
['text':'','line_number':185,'multiline':False]
['text':'      Lazy variables are actors. As such, lazy variables can be','line_number':186,'multiline':False]
['text':'      evaluated through the actor's operator(). Such invocation gives','line_number':187,'multiline':False]
['text':'      the variables's identity. Example:','line_number':188,'multiline':False]
['text':'','line_number':189,'multiline':False]
['text':'          int i = 3;','line_number':190,'multiline':False]
['text':'          char const* s = "Hello World";','line_number':191,'multiline':False]
['text':'          cout << var(i)() << var(s)();','line_number':192,'multiline':False]
['text':'','line_number':193,'multiline':False]
['text':'      prints out "3 Hello World"','line_number':194,'multiline':False]
['text':'','line_number':195,'multiline':False]
['text':'      Another free function const_(x) may also be used. const_(x) creates','line_number':196,'multiline':False]
['text':'      a variable<T const&> object using a constant reference.','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':199,'multiline':False]
['text':'assignment operator could not be generated','line_number':202,'multiline':False]
['text':'args','line_number':216,'multiline':True]
['text':'////////////////////////////////','line_number':228,'multiline':False]
['text':'////////////////////////////////','line_number':236,'multiline':False]
['text':'////////////////////////////////','line_number':244,'multiline':False]
['text':'  This is undefined and not allowed.','line_number':247,'multiline':False]
['text':'////////////////////////////////','line_number':249,'multiline':False]
['text':'  This is undefined and not allowed.','line_number':252,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':254,'multiline':False]
['text':'  namespace phoenix','line_number':255,'multiline':False]
