['text':'=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman
    Copyright (c) 2001-2011 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':' conditional expression is constant','line_number':25,'multiline':False]
['text':' 'int' : forcing value to bool 'true' or 'false' warning','line_number':26,'multiline':False]
['text':' Here's the thing... typical encodings (except ASCII) deal with unsigned','line_number':31,'multiline':False]
['text':' integers > 127. ASCII uses only 127. Yet, most char and wchar_t are signed.','line_number':32,'multiline':False]
['text':' Thus, a char with value > 127 is negative (e.g. char 233 is -23). When you','line_number':33,'multiline':False]
['text':' cast this to an unsigned int with 32 bits, you get 4294967273!','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' The trick is to cast to an unsigned version of the source char first','line_number':36,'multiline':False]
['text':' before casting to the target. {P.S. Don't worry about the code, the','line_number':37,'multiline':False]
['text':' optimizer will optimize the if-else branches}','line_number':38,'multiline':False]
['text':' source is signed, target is unsigned','line_number':47,'multiline':False]
['text':' source is unsigned, target is signed','line_number':53,'multiline':False]
['text':' source and target has same signedness','line_number':60,'multiline':False]
['text':' just cast','line_number':61,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':71,'multiline':False]
['text':' classification tags','line_number':72,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':84,'multiline':False]
['text':' classification/conversion tags','line_number':85,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':95,'multiline':False]
['text':'  Unicode Major Categories','line_number':96,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':97,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':106,'multiline':False]
['text':'  Unicode General Categories','line_number':107,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':108,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':146,'multiline':False]
['text':'  Unicode Derived Categories','line_number':147,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':148,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':157,'multiline':False]
['text':'  Unicode Scripts','line_number':158,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':159,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':256,'multiline':False]
['text':' This composite tag type encodes both the character','line_number':257,'multiline':False]
['text':' set and the specific char tag (used for classification','line_number':258,'multiline':False]
['text':' or conversion). char_code_base and char_encoding_base','line_number':259,'multiline':False]
['text':' can be used to test for modifier membership (see modifier.hpp)','line_number':260,'multiline':False]
['text':' e.g. ascii','line_number':272,'multiline':False]
['text':' e.g. tag::alnum','line_number':273,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':279,'multiline':False]
['text':' Test characters for classification','line_number':280,'multiline':False]
['text':'*','line_number':295,'multiline':True]
['text':'*','line_number':338,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':340,'multiline':False]
['text':'  Unicode Major Categories','line_number':341,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':342,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':351,'multiline':False]
['text':'  Unicode General Categories','line_number':352,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':353,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':391,'multiline':False]
['text':'  Unicode Derived Categories','line_number':392,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':393,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':402,'multiline':False]
['text':'  Unicode Scripts','line_number':403,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':404,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':505,'multiline':False]
['text':' Convert characters','line_number':506,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':544,'multiline':False]
['text':' Info on character classification','line_number':545,'multiline':False]
['text':'*','line_number':554,'multiline':True]
['text':'*','line_number':582,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':584,'multiline':False]
['text':'  Unicode Major Categories','line_number':585,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':586,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':595,'multiline':False]
['text':'  Unicode General Categories','line_number':596,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':597,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':635,'multiline':False]
['text':'  Unicode Derived Categories','line_number':636,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':637,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':646,'multiline':False]
['text':'  Unicode Scripts','line_number':647,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':648,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':752,'multiline':False]
