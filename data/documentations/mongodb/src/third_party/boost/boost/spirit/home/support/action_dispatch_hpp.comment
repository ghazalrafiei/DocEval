['text':'=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman
    Copyright (c) 2001-2011 Hartmut Kaiser
    http://spirit.sourceforge.net/

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':' omit function parameters without specializing for each possible','line_number':40,'multiline':False]
['text':' type of callable entity','line_number':41,'multiline':False]
['text':' many thanks to Eelis/##iso-c++ for this contribution','line_number':42,'multiline':False]
['text':' this will be used to pass around POD types which are safe','line_number':45,'multiline':False]
['text':' to go through the ellipsis operator (if ever used)','line_number':46,'multiline':False]
['text':' the first parameter is a placeholder to obtain SFINAE when','line_number':50,'multiline':False]
['text':' doing overload resolution, the second one is the actual','line_number':51,'multiline':False]
['text':' forwarder, where we can apply our implementation','line_number':52,'multiline':False]
['text':' gcc should accept fake<T>() but it prints a sorry, needs','line_number':56,'multiline':False]
['text':' a check once the bug is sorted out, use a FAKE_CALL macro for now','line_number':57,'multiline':False]
['text':' the forwarders, here we could tweak the implementation of','line_number':63,'multiline':False]
['text':' how parameters are passed to the functions, if needed','line_number':64,'multiline':False]
['text':' SFINAE for our calling syntax, the forwarders are stored based','line_number':104,'multiline':False]
['text':' on what function call gives a proper result','line_number':105,'multiline':False]
['text':' this code can probably be more generic once implementations are','line_number':106,'multiline':False]
['text':' steady','line_number':107,'multiline':False]
['text':' this function calls the forwarder and is responsible for','line_number':142,'multiline':False]
['text':' stripping the tail of the parameters','line_number':143,'multiline':False]
['text':' general handler for everything not explicitly specialized below','line_number':162,'multiline':False]
['text':' handler for phoenix actors','line_number':172,'multiline':False]
['text':' If the component this action has to be invoked for is a tuple, we','line_number':174,'multiline':False]
['text':' wrap any non-fusion tuple into a fusion tuple (done by pass_attribute)','line_number':175,'multiline':False]
['text':' and pass through any fusion tuple.','line_number':176,'multiline':False]
['text':' specializations for plain function pointers taking different number of','line_number':187,'multiline':False]
['text':' arguments','line_number':188,'multiline':False]
