['text':'=============================================================================
    Copyright (c) 2001-2003 Joel de Guzman
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':16,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':'  range class','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':'      Implements a closed range of values. This class is used in','line_number':27,'multiline':False]
['text':'      the implementation of the range_run class.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'      { Low level implementation detail }','line_number':30,'multiline':False]
['text':'      { Not to be confused with BOOST_SPIRIT_CLASSIC_NS::range }','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':33,'multiline':False]
['text':'////////////////////////////////','line_number':49,'multiline':False]
['text':' This additional operator is required for the checked STL shipped','line_number':59,'multiline':False]
['text':' with VC8 testing the ordering of the iterators passed to the','line_number':60,'multiline':False]
['text':' std::lower_bound algo this range_char_compare<> predicate is passed','line_number':61,'multiline':False]
['text':' to.','line_number':62,'multiline':False]
['text':'////////////////////////////////','line_number':67,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':'  range_run','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':'      An implementation of a sparse bit (boolean) set. The set uses','line_number':79,'multiline':False]
['text':'      a sorted vector of disjoint ranges. This class implements the','line_number':80,'multiline':False]
['text':'      bare minimum essentials from which the full range of set','line_number':81,'multiline':False]
['text':'      operators can be implemented. The set is constructed from','line_number':82,'multiline':False]
['text':'      ranges. Internally, adjacent or overlapping ranges are','line_number':83,'multiline':False]
['text':'      coalesced.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':'      range_runs are very space-economical in situations where there','line_number':86,'multiline':False]
['text':'      are lots of ranges and a few individual disjoint values.','line_number':87,'multiline':False]
['text':'      Searching is O(log n) where n is the number of ranges.','line_number':88,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':'      { Low level implementation detail }','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':92,'multiline':False]
['text':' namespace BOOST_SPIRIT_CLASSIC_NS::utility::impl','line_number':123,'multiline':False]
