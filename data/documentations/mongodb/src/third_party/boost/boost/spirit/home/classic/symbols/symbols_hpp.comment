['text':'=============================================================================
    Copyright (c) 2001-2003 Joel de Guzman
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':23,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'  symbols class','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'      This class implements a symbol table. The symbol table holds a','line_number':32,'multiline':False]
['text':'      dictionary of symbols where each symbol is a sequence of CharTs.','line_number':33,'multiline':False]
['text':'      The template class can work efficiently with 8, 16 and 32 bit','line_number':34,'multiline':False]
['text':'      characters. Mutable data of type T is associated with each','line_number':35,'multiline':False]
['text':'      symbol.','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':'      The class is a parser. The parse member function returns','line_number':38,'multiline':False]
['text':'      additional information in the symbol_match class (see below).','line_number':39,'multiline':False]
['text':'      The additional data is a pointer to some data associated with','line_number':40,'multiline':False]
['text':'      the matching symbol.','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':'      The actual set implementation is supplied by the SetT template','line_number':43,'multiline':False]
['text':'      parameter. By default, this uses the tst class (see tst.ipp).','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':'      Symbols are added into the symbol table statically using the','line_number':46,'multiline':False]
['text':'      construct:','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'          sym = a, b, c, d ...;','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'      where sym is a symbol table and a..d are strings. Example:','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':'          sym = "pineapple", "orange", "banana", "apple";','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':'      Alternatively, symbols may be added dynamically through the','line_number':55,'multiline':False]
['text':'      member functor 'add' (see symbol_inserter below). The member','line_number':56,'multiline':False]
['text':'      functor 'add' may be attached to a parser as a semantic action','line_number':57,'multiline':False]
['text':'      taking in a begin/end pair:','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':'          p[sym.add]','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':'      where p is a parser (and sym is a symbol table). On success,','line_number':62,'multiline':False]
['text':'      the matching portion of the input is added to the symbol table.','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':'      'add' may also be used to directly initialize data. Examples:','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':'          sym.add("hello", 1)("crazy", 2)("world", 3);','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':69,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':'  Symbol table utilities','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':'  add','line_number':138,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':'      adds a symbol 'sym' (string) to a symbol table 'table' plus an','line_number':140,'multiline':False]
['text':'      optional data 'data' associated with the symbol. Returns a pointer to','line_number':141,'multiline':False]
['text':'      the data associated with the symbol or NULL if add failed (e.g. when','line_number':142,'multiline':False]
['text':'      the symbol is already added before).','line_number':143,'multiline':False]
['text':'','line_number':144,'multiline':False]
['text':'  find','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':'      finds a symbol 'sym' (string) from a symbol table 'table'. Returns a','line_number':147,'multiline':False]
['text':'      pointer to the data associated with the symbol or NULL if not found','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':150,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':'  symbol_inserter class','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':'      The symbols class holds an instance of this class named 'add'.','line_number':161,'multiline':False]
['text':'      This can be called directly just like a member function,','line_number':162,'multiline':False]
['text':'      passing in a first/last iterator and optional data:','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':'          sym.add(first, last, data);','line_number':165,'multiline':False]
['text':'','line_number':166,'multiline':False]
['text':'      Or, passing in a C string and optional data:','line_number':167,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':'          sym.add(c_string, data);','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':'      where sym is a symbol table. The 'data' argument is optional.','line_number':171,'multiline':False]
['text':'      This may also be used as a semantic action since it conforms','line_number':172,'multiline':False]
['text':'      to the action interface (see action.hpp):','line_number':173,'multiline':False]
['text':'','line_number':174,'multiline':False]
['text':'          p[sym.add]','line_number':175,'multiline':False]
['text':'','line_number':176,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':177,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':223,'multiline':False]
['text':' namespace BOOST_SPIRIT_CLASSIC_NS','line_number':226,'multiline':False]
