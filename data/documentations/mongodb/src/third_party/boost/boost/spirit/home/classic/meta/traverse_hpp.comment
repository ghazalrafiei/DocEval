['text':'=============================================================================
    Copyright (c) 2002-2003 Joel de Guzman
    Copyright (c) 2002-2003 Hartmut Kaiser
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':'  Post-order traversal of auxiliary parsers.','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':23,'multiline':False]
['text':'  Return the parser type, which is generated as the result of the','line_number':26,'multiline':False]
['text':'  traverse function below.','line_number':27,'multiline':False]
['text':'  Traverse a given parser and refactor it with the help of the given','line_number':41,'multiline':False]
['text':'  MetaT metafunction template.','line_number':42,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':'  Transform policies','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':'      The following policy classes could be used to assemble some new','line_number':58,'multiline':False]
['text':'      transformation metafunction which uses identity transformations','line_number':59,'multiline':False]
['text':'      for some parser_category type parsers.','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':62,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':64,'multiline':False]
['text':'  transform plain parsers','line_number':65,'multiline':False]
['text':' plain parsers should be embedded and returned correctly','line_number':72,'multiline':False]
['text':'env','line_number':78,'multiline':True]
['text':'////////////////////////////////','line_number':84,'multiline':False]
['text':'  transform unary parsers','line_number':85,'multiline':False]
['text':'env','line_number':109,'multiline':True]
['text':'////////////////////////////////','line_number':116,'multiline':False]
['text':'  transform action parsers','line_number':117,'multiline':False]
['text':'env','line_number':132,'multiline':True]
['text':'////////////////////////////////','line_number':138,'multiline':False]
['text':'  transform binary parsers','line_number':139,'multiline':False]
['text':'env','line_number':167,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':175,'multiline':False]
['text':'','line_number':176,'multiline':False]
['text':'  transform_policies template','line_number':177,'multiline':False]
['text':'','line_number':178,'multiline':False]
['text':'      The transform_policies template metafunction could serve as a','line_number':179,'multiline':False]
['text':'      base class for new metafunctions to be passed to the traverse meta','line_number':180,'multiline':False]
['text':'      template (see above), where only minimal parts have to be','line_number':181,'multiline':False]
['text':'      overwritten.','line_number':182,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':184,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':201,'multiline':False]
['text':'','line_number':202,'multiline':False]
['text':'  Identity transformation','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':'      The identity_transform metafunction supplied to the traverse','line_number':205,'multiline':False]
['text':'      template will generate a new parser, which will be exactly','line_number':206,'multiline':False]
['text':'      identical to the parser given as the parameter to the traverse','line_number':207,'multiline':False]
['text':'      metafunction. I.e. the following conceptual 'equation' will be','line_number':208,'multiline':False]
['text':'      always true:','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':'      some_parser ==','line_number':211,'multiline':False]
['text':'          post_order::traverse(identity_transform(), some_parser)','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':214,'multiline':False]
['text':' namespace BOOST_SPIRIT_CLASSIC_NS','line_number':220,'multiline':False]
['text':' !defined(BOOST_SPIRIT_TRAVERSE_HPP)','line_number':222,'multiline':False]
