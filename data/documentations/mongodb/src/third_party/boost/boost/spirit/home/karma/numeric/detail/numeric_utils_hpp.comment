['text':'  Copyright (c) 2001-2011 Hartmut Kaiser','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]
['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':'  The value BOOST_KARMA_NUMERICS_LOOP_UNROLL specifies, how to unroll the','line_number':29,'multiline':False]
['text':'  integer string generation loop (see below).','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'      Set the value to some integer in between 0 (no unrolling) and the','line_number':32,'multiline':False]
['text':'      largest expected generated integer string length (complete unrolling).','line_number':33,'multiline':False]
['text':'      If not specified, this value defaults to 6.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':36,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'  return the absolute value from a given number, avoiding over- and','line_number':49,'multiline':False]
['text':'  underflow','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':52,'multiline':False]
['text':' = void','line_number':53,'multiline':True]
['text':' allow for ADL to find the correct overloads for fabs','line_number':59,'multiline':False]
['text':' implementation is well-defined for one's complement, ','line_number':72,'multiline':True]
['text':' two's complement, and signed magnitude architectures ','line_number':73,'multiline':True]
['text':' by the C++ Standard. [conv.integral] [expr.unary.op] ','line_number':74,'multiline':True]
['text':'','line_number':79,'multiline':True]
['text':'','line_number':90,'multiline':True]
['text':' unary minus operator applied to unsigned type, result still unsigned','line_number':94,'multiline':False]
['text':' specialization for pointers','line_number':147,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':165,'multiline':False]
['text':' = void','line_number':166,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////','line_number':208,'multiline':False]
['text':' = void','line_number':209,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////','line_number':251,'multiline':False]
['text':' = void','line_number':252,'multiline':True]
['text':' NaN numbers are not equal to anything','line_number':257,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':295,'multiline':False]
['text':' = void','line_number':296,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////','line_number':339,'multiline':False]
['text':' allow for ADL to find the correct overload for floor and','line_number':360,'multiline':False]
['text':' lround','line_number':361,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':379,'multiline':False]
['text':' allow for ADL to find the correct overloads for ltrunc','line_number':403,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':421,'multiline':False]
['text':'','line_number':422,'multiline':False]
['text':'  Traits class for radix specific number conversion','line_number':423,'multiline':False]
['text':'','line_number':424,'multiline':False]
['text':'      Convert a digit from binary representation to character','line_number':425,'multiline':False]
['text':'      representation:','line_number':426,'multiline':False]
['text':'','line_number':427,'multiline':False]
['text':'          static int call(unsigned n);','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':430,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':472,'multiline':False]
['text':' Allow ADL to find the correct overload for floor','line_number':485,'multiline':False]
['text':' specialization for division by 10','line_number':503,'multiline':False]
['text':' Allow ADL to find the correct overload for floor','line_number':516,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////','line_number':534,'multiline':False]
['text':' this cast is safe since we know the result is not larger','line_number':541,'multiline':False]
['text':' than Radix','line_number':542,'multiline':False]
['text':' Allow ADL to find the correct overload for fmod','line_number':549,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':564,'multiline':False]
['text':'','line_number':565,'multiline':False]
['text':'  The int_inserter template takes care of the integer to string','line_number':566,'multiline':False]
['text':'  conversion. If specified, the loop is unrolled for better performance.','line_number':567,'multiline':False]
['text':'','line_number':568,'multiline':False]
['text':'      Set the value BOOST_KARMA_NUMERICS_LOOP_UNROLL to some integer in','line_number':569,'multiline':False]
['text':'      between 0 (no unrolling) and the largest expected generated integer','line_number':570,'multiline':False]
['text':'      string length (complete unrolling).','line_number':571,'multiline':False]
['text':'      If not specified, this value defaults to 6.','line_number':572,'multiline':False]
['text':'','line_number':573,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':574,'multiline':False]
['text':'','line_number':579,'multiline':True]
['text':'','line_number':585,'multiline':True]
['text':' remainder_type::call returns n % Radix','line_number':600,'multiline':False]
['text':'  Common code for integer string representations','line_number':621,'multiline':False]
['text':' helper function returning the biggest number representable either in','line_number':630,'multiline':False]
['text':' a boost::long_long_type (if this does exist) or in a plain long','line_number':631,'multiline':False]
['text':' otherwise','line_number':632,'multiline':False]
['text':' Specialization for doubles and floats, falling back to long integers','line_number':645,'multiline':False]
['text':' for representable values. These specializations speed up formatting','line_number':646,'multiline':False]
['text':' of floating point numbers considerably as all the required','line_number':647,'multiline':False]
['text':' arithmetics will be executed using integral data types.','line_number':648,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':687,'multiline':False]
['text':'','line_number':688,'multiline':False]
['text':'  The uint_inserter template takes care of the conversion of any integer','line_number':689,'multiline':False]
['text':'  to a string, while interpreting the number as an unsigned type.','line_number':690,'multiline':False]
['text':'','line_number':691,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':692,'multiline':False]
['text':'  Common code for integer string representations','line_number':700,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':711,'multiline':False]
['text':'','line_number':712,'multiline':False]
['text':'  The sign_inserter template generates a sign for a given numeric value.','line_number':713,'multiline':False]
['text':'','line_number':714,'multiline':False]
['text':'    The parameter forcesign allows to generate a sign even for positive','line_number':715,'multiline':False]
['text':'    numbers.','line_number':716,'multiline':False]
['text':'','line_number':717,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':718,'multiline':False]
['text':' generate a sign for negative numbers only','line_number':726,'multiline':False]
['text':' generate a sign for all numbers except zero','line_number':739,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':760,'multiline':False]
['text':'  These are helper functions for the real policies allowing to generate','line_number':761,'multiline':False]
['text':'  a single character and a string','line_number':762,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':763,'multiline':False]
