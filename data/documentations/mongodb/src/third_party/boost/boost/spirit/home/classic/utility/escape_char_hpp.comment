['text':'=============================================================================
    Copyright (c) 2001-2003 Daniel Nuffer
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':23,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'  escape_char_action class','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'      Links an escape char parser with a user defined semantic action.','line_number':32,'multiline':False]
['text':'      The semantic action may be a function or a functor. A function','line_number':33,'multiline':False]
['text':'      should be compatible with the interface:','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'          void f(CharT ch);','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':'      A functor should have a member operator() with a compatible signature','line_number':38,'multiline':False]
['text':'      as above. The matching character is passed into the function/functor.','line_number':39,'multiline':False]
['text':'      This is the default class that character parsers use when dealing with','line_number':40,'multiline':False]
['text':'      the construct:','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':'          p[f]','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':'      where p is a parser and f is a function or functor.','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':47,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':'  escape_char_parser class','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':'      The escape_char_parser helps in conjunction with the escape_char_action','line_number':89,'multiline':False]
['text':'      template class (see above) in parsing escaped characters. There are two','line_number':90,'multiline':False]
['text':'      different variants of this parser: one for parsing C style escaped','line_number':91,'multiline':False]
['text':'      characters and one for parsing LEX style escaped characters.','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':'      The C style escaped character parser is generated, when the template','line_number':94,'multiline':False]
['text':'      parameter 'Flags' is equal to 'c_escapes' (a constant defined in the','line_number':95,'multiline':False]
['text':'      file impl/escape_char.ipp). This parser recognizes all valid C escape','line_number':96,'multiline':False]
['text':'      character sequences: '\t', '\b', '\f', '\n', '\r', '\"', '\'', '\\'','line_number':97,'multiline':False]
['text':'      and the numeric style escapes '\120' (octal) and '\x2f' (hexadecimal)','line_number':98,'multiline':False]
['text':'      and converts these to their character equivalent, for instance the','line_number':99,'multiline':False]
['text':'      sequence of a backslash and a 'b' is parsed as the character '\b'.','line_number':100,'multiline':False]
['text':'      All other escaped characters are rejected by this parser.','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':'      The LEX style escaped character parser is generated, when the template','line_number':103,'multiline':False]
['text':'      parameter 'Flags' is equal to 'lex_escapes' (a constant defined in the','line_number':104,'multiline':False]
['text':'      file impl/escape_char.ipp). This parser recognizes all the C style','line_number':105,'multiline':False]
['text':'      escaped character sequences (as described above) and additionally','line_number':106,'multiline':False]
['text':'      does not reject all other escape sequences. All not mentioned escape','line_number':107,'multiline':False]
['text':'      sequences are converted by the parser to the plain character, for','line_number':108,'multiline':False]
['text':'      instance '\a' will be parsed as 'a'.','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':'      All not escaped characters are parsed without modification.','line_number':111,'multiline':False]
['text':'','line_number':112,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':113,'multiline':False]
['text':' only the values c_escapes and lex_escapes are valid for Flags','line_number':122,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':165,'multiline':False]
['text':'','line_number':166,'multiline':False]
['text':'  predefined escape_char_parser objects','line_number':167,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':'      These objects should be used for generating correct escaped character','line_number':169,'multiline':False]
['text':'      parsers.','line_number':170,'multiline':False]
['text':'','line_number':171,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':172,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':179,'multiline':False]
['text':' namespace BOOST_SPIRIT_CLASSIC_NS','line_number':182,'multiline':False]
