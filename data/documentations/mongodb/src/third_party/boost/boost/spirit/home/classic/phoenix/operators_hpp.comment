['text':'=============================================================================
    Phoenix V1.2.1
    Copyright (c) 2001-2002 Joel de Guzman

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':28,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'  Operators','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':'      Lazy operators','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':'      This class provides a mechanism for lazily evaluating operators.','line_number':37,'multiline':False]
['text':'      Syntactically, a lazy operator looks like an ordinary C/C++','line_number':38,'multiline':False]
['text':'      infix, prefix or postfix operator. The operator application','line_number':39,'multiline':False]
['text':'      looks the same. However, unlike ordinary operators, the actual','line_number':40,'multiline':False]
['text':'      operator execution is deferred. (see actor.hpp, primitives.hpp','line_number':41,'multiline':False]
['text':'      and composite.hpp for an overview). Samples:','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':'          arg1 + arg2','line_number':44,'multiline':False]
['text':'          1 + arg1 * arg2','line_number':45,'multiline':False]
['text':'          1 / -arg1','line_number':46,'multiline':False]
['text':'          arg1 < 150','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'      T1 set of classes implement all the C++ free operators. Like','line_number':49,'multiline':False]
['text':'      lazy functions (see functions.hpp), lazy operators are not','line_number':50,'multiline':False]
['text':'      immediately executed when invoked. Instead, a composite (see','line_number':51,'multiline':False]
['text':'      composite.hpp) object is created and returned to the caller.','line_number':52,'multiline':False]
['text':'      Example:','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':'          (arg1 + arg2) * arg3','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':'      does nothing more than return a composite. T1 second function','line_number':57,'multiline':False]
['text':'      call will evaluate the actual operators. Example:','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':'          int i = 4, j = 5, k = 6;','line_number':60,'multiline':False]
['text':'          cout << ((arg1 + arg2) * arg3)(i, j, k);','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':'      will print out "54".','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':'      Arbitrarily complex expressions can be lazily evaluated','line_number':65,'multiline':False]
['text':'      following three simple rules:','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':'          1) Lazy evaluated binary operators apply when at least one','line_number':68,'multiline':False]
['text':'          of the operands is an actor object (see actor.hpp and','line_number':69,'multiline':False]
['text':'          primitives.hpp). Consequently, if an operand is not an actor','line_number':70,'multiline':False]
['text':'          object, it is implicitly converted to an object of type','line_number':71,'multiline':False]
['text':'          actor<value<T> > (where T is the original type of the','line_number':72,'multiline':False]
['text':'          operand).','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':'          2) Lazy evaluated unary operators apply only to operands','line_number':75,'multiline':False]
['text':'          which are actor objects.','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'          3) The result of a lazy operator is a composite actor object','line_number':78,'multiline':False]
['text':'          that can in turn apply to rule 1.','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':'      Example:','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':'          arg1 + 3','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':'      is a lazy expression involving the operator+. Following rule 1,','line_number':85,'multiline':False]
['text':'      lazy evaluation is triggered since arg1 is an instance of an','line_number':86,'multiline':False]
['text':'      actor<argument<N> > class (see primitives.hpp). The right','line_number':87,'multiline':False]
['text':'      operand <3> is implicitly converted to an actor<value<int> >.','line_number':88,'multiline':False]
['text':'      The result of this binary + expression is a composite object,','line_number':89,'multiline':False]
['text':'      following rule 3.','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'      Take note that although at least one of the operands must be a','line_number':92,'multiline':False]
['text':'      valid actor class in order for lazy evaluation to take effect,','line_number':93,'multiline':False]
['text':'      if this is not the case and we still want to lazily evaluate an','line_number':94,'multiline':False]
['text':'      expression, we can use var(x), val(x) or cref(x) to transform','line_number':95,'multiline':False]
['text':'      the operand into a valid action object (see primitives.hpp).','line_number':96,'multiline':False]
['text':'      Example:','line_number':97,'multiline':False]
['text':'','line_number':98,'multiline':False]
['text':'          val(1) << 3;','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':'      Supported operators:','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':'          Unary operators:','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':'              prefix:   ~, !, -, +, ++, --, & (reference), * (dereference)','line_number':105,'multiline':False]
['text':'              postfix:  ++, --','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':'          Binary operators:','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':'              =, [], +=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=','line_number':110,'multiline':False]
['text':'              +, -, *, /, %, &, |, ^, <<, >>','line_number':111,'multiline':False]
['text':'              ==, !=, <, >, <=, >=','line_number':112,'multiline':False]
['text':'              &&, ||','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':'      Each operator has a special tag type associated with it. For','line_number':115,'multiline':False]
['text':'      example the binary + operator has a plus_op tag type associated','line_number':116,'multiline':False]
['text':'      with it. This is used to specialize either the unary_operator or','line_number':117,'multiline':False]
['text':'      binary_operator template classes (see unary_operator and','line_number':118,'multiline':False]
['text':'      binary_operator below). Specializations of these unary_operator','line_number':119,'multiline':False]
['text':'      and binary_operator are the actual workhorses that implement the','line_number':120,'multiline':False]
['text':'      operations. The behavior of each lazy operator depends on these','line_number':121,'multiline':False]
['text':'      unary_operator and binary_operator specializations. 'preset'','line_number':122,'multiline':False]
['text':'      specializations conform to the canonical operator rules modeled','line_number':123,'multiline':False]
['text':'      by the behavior of integers and pointers:','line_number':124,'multiline':False]
['text':'','line_number':125,'multiline':False]
['text':'          Prefix -, + and ~ accept constant arguments and return an','line_number':126,'multiline':False]
['text':'          object by value.','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':'          The ! accept constant arguments and returns a boolean','line_number':129,'multiline':False]
['text':'          result.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':'          The & (address-of), * (dereference) both return a reference','line_number':132,'multiline':False]
['text':'          to an object.','line_number':133,'multiline':False]
['text':'','line_number':134,'multiline':False]
['text':'          Prefix ++ returns a reference to its mutable argument after','line_number':135,'multiline':False]
['text':'          it is incremented.','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':'          Postfix ++ returns the mutable argument by value before it','line_number':138,'multiline':False]
['text':'          is incremented.','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':'          The += and its family accept mutable right hand side (rhs)','line_number':141,'multiline':False]
['text':'          operand and return a reference to the rhs operand.','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':'          Infix + and its family accept constant arguments and return','line_number':144,'multiline':False]
['text':'          an object by value.','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':'          The == and its family accept constant arguments and return a','line_number':147,'multiline':False]
['text':'          boolean result.','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'          Operators && and || accept constant arguments and return a','line_number':150,'multiline':False]
['text':'          boolean result and are short circuit evaluated as expected.','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':153,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':155,'multiline':False]
['text':'','line_number':156,'multiline':False]
['text':'  Operator tags','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':'      Each C++ operator has a corresponding tag type. This is','line_number':159,'multiline':False]
['text':'      used as a means for specializing the unary_operator and','line_number':160,'multiline':False]
['text':'      binary_operator (see below). The tag also serves as the','line_number':161,'multiline':False]
['text':'      lazy operator type compatible as a composite operation','line_number':162,'multiline':False]
['text':'      see (composite.hpp).','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':165,'multiline':False]
['text':'  Unary operator tags','line_number':167,'multiline':False]
['text':'  Binary operator tags','line_number':175,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':193,'multiline':False]
['text':'','line_number':194,'multiline':False]
['text':'  unary_operator<TagT, T>','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':'      The unary_operator class implements most of the C++ unary','line_number':197,'multiline':False]
['text':'      operators. Each specialization is basically a simple static eval','line_number':198,'multiline':False]
['text':'      function plus a result_type typedef that determines the return','line_number':199,'multiline':False]
['text':'      type of the eval function.','line_number':200,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':'      TagT is one of the unary operator tags above and T is the data','line_number':202,'multiline':False]
['text':'      type (argument) involved in the operation.','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':'      Only the behavior of C/C++ built-in types are taken into account','line_number':205,'multiline':False]
['text':'      in the specializations provided below. For user-defined types,','line_number':206,'multiline':False]
['text':'      these specializations may still be used provided that the','line_number':207,'multiline':False]
['text':'      operator overloads of such types adhere to the standard behavior','line_number':208,'multiline':False]
['text':'      of built-in types.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':'      T1 separate special_ops.hpp file implements more stl savvy','line_number':211,'multiline':False]
['text':'      specializations. Other more specialized unary_operator','line_number':212,'multiline':False]
['text':'      implementations may be defined by the client for specific','line_number':213,'multiline':False]
['text':'      unary operator tags/data types.','line_number':214,'multiline':False]
['text':'','line_number':215,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':216,'multiline':False]
['text':'////////////////////////////////','line_number':220,'multiline':False]
['text':'////////////////////////////////','line_number':229,'multiline':False]
['text':'////////////////////////////////','line_number':238,'multiline':False]
['text':'////////////////////////////////','line_number':247,'multiline':False]
['text':'////////////////////////////////','line_number':256,'multiline':False]
['text':'////////////////////////////////','line_number':265,'multiline':False]
['text':'////////////////////////////////','line_number':274,'multiline':False]
['text':'////////////////////////////////','line_number':283,'multiline':False]
['text':'  G++ eager template instantiation','line_number':287,'multiline':False]
['text':'  somehow requires this.','line_number':288,'multiline':False]
['text':'////////////////////////////////','line_number':292,'multiline':False]
['text':'  G++ eager template instantiation','line_number':297,'multiline':False]
['text':'  somehow requires this.','line_number':298,'multiline':False]
['text':'////////////////////////////////','line_number':303,'multiline':False]
['text':'////////////////////////////////','line_number':312,'multiline':False]
['text':'////////////////////////////////','line_number':321,'multiline':False]
['text':'////////////////////////////////','line_number':330,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':339,'multiline':False]
['text':'','line_number':340,'multiline':False]
['text':'  rank<T>','line_number':341,'multiline':False]
['text':'','line_number':342,'multiline':False]
['text':'      rank<T> class has a static int constant 'value' that defines the','line_number':343,'multiline':False]
['text':'      absolute rank of a type. rank<T> is used to choose the result','line_number':344,'multiline':False]
['text':'      type of binary operators such as +. The type with the higher','line_number':345,'multiline':False]
['text':'      rank wins and is used as the operator's return type. T1 generic','line_number':346,'multiline':False]
['text':'      user defined type has a very high rank and always wins when','line_number':347,'multiline':False]
['text':'      compared against a user defined type. If this is not desirable,','line_number':348,'multiline':False]
['text':'      one can write a rank specialization for the type.','line_number':349,'multiline':False]
['text':'','line_number':350,'multiline':False]
['text':'      Take note that ranks 0..9999 are reserved for the framework.','line_number':351,'multiline':False]
['text':'','line_number':352,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':353,'multiline':False]
['text':' !defined(BOOST_NO_INTRINSIC_WCHAR_T)','line_number':365,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':394,'multiline':False]
['text':'','line_number':395,'multiline':False]
['text':'  higher_rank<T0, T1>','line_number':396,'multiline':False]
['text':'','line_number':397,'multiline':False]
['text':'      Chooses the type (T0 or T1) with the higher rank.','line_number':398,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':400,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':408,'multiline':False]
['text':'','line_number':409,'multiline':False]
['text':'  binary_operator<TagT, T0, T1>','line_number':410,'multiline':False]
['text':'','line_number':411,'multiline':False]
['text':'      The binary_operator class implements most of the C++ binary','line_number':412,'multiline':False]
['text':'      operators. Each specialization is basically a simple static eval','line_number':413,'multiline':False]
['text':'      function plus a result_type typedef that determines the return','line_number':414,'multiline':False]
['text':'      type of the eval function.','line_number':415,'multiline':False]
['text':'','line_number':416,'multiline':False]
['text':'      TagT is one of the binary operator tags above T0 and T1 are the','line_number':417,'multiline':False]
['text':'      (arguments') data types involved in the operation.','line_number':418,'multiline':False]
['text':'','line_number':419,'multiline':False]
['text':'      Only the behavior of C/C++ built-in types are taken into account','line_number':420,'multiline':False]
['text':'      in the specializations provided below. For user-defined types,','line_number':421,'multiline':False]
['text':'      these specializations may still be used provided that the','line_number':422,'multiline':False]
['text':'      operator overloads of such types adhere to the standard behavior','line_number':423,'multiline':False]
['text':'      of built-in types.','line_number':424,'multiline':False]
['text':'','line_number':425,'multiline':False]
['text':'      T1 separate special_ops.hpp file implements more stl savvy','line_number':426,'multiline':False]
['text':'      specializations. Other more specialized unary_operator','line_number':427,'multiline':False]
['text':'      implementations may be defined by the client for specific','line_number':428,'multiline':False]
['text':'      unary operator tags/data types.','line_number':429,'multiline':False]
['text':'','line_number':430,'multiline':False]
['text':'      All binary_operator except the logical_and_op and logical_or_op','line_number':431,'multiline':False]
['text':'      have an eval static function that carries out the actual operation.','line_number':432,'multiline':False]
['text':'      The logical_and_op and logical_or_op d are special because these','line_number':433,'multiline':False]
['text':'      two operators are short-circuit evaluated.','line_number':434,'multiline':False]
['text':'','line_number':435,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':436,'multiline':False]
['text':'////////////////////////////////','line_number':440,'multiline':False]
['text':'////////////////////////////////','line_number':449,'multiline':False]
['text':'  G++ eager template instantiation','line_number':453,'multiline':False]
['text':'  somehow requires this.','line_number':454,'multiline':False]
['text':'////////////////////////////////','line_number':458,'multiline':False]
['text':'////////////////////////////////','line_number':467,'multiline':False]
['text':'////////////////////////////////','line_number':476,'multiline':False]
['text':'////////////////////////////////','line_number':485,'multiline':False]
['text':'////////////////////////////////','line_number':494,'multiline':False]
['text':'////////////////////////////////','line_number':503,'multiline':False]
['text':'////////////////////////////////','line_number':512,'multiline':False]
['text':'////////////////////////////////','line_number':521,'multiline':False]
['text':'////////////////////////////////','line_number':530,'multiline':False]
['text':'////////////////////////////////','line_number':539,'multiline':False]
['text':'////////////////////////////////','line_number':548,'multiline':False]
['text':'////////////////////////////////','line_number':557,'multiline':False]
['text':'////////////////////////////////','line_number':566,'multiline':False]
['text':'////////////////////////////////','line_number':575,'multiline':False]
['text':'////////////////////////////////','line_number':584,'multiline':False]
['text':'////////////////////////////////','line_number':593,'multiline':False]
['text':'////////////////////////////////','line_number':602,'multiline':False]
['text':'////////////////////////////////','line_number':611,'multiline':False]
['text':'////////////////////////////////','line_number':620,'multiline':False]
['text':'////////////////////////////////','line_number':629,'multiline':False]
['text':'////////////////////////////////','line_number':638,'multiline':False]
['text':'////////////////////////////////','line_number':647,'multiline':False]
['text':'////////////////////////////////','line_number':656,'multiline':False]
['text':'////////////////////////////////','line_number':665,'multiline':False]
['text':'////////////////////////////////','line_number':674,'multiline':False]
['text':'////////////////////////////////','line_number':683,'multiline':False]
['text':'////////////////////////////////','line_number':692,'multiline':False]
['text':'////////////////////////////////','line_number':701,'multiline':False]
['text':'////////////////////////////////','line_number':710,'multiline':False]
['text':'////////////////////////////////','line_number':719,'multiline':False]
['text':'  no eval function, see comment above.','line_number':724,'multiline':False]
['text':'////////////////////////////////','line_number':727,'multiline':False]
['text':'  no eval function, see comment above.','line_number':732,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':735,'multiline':False]
['text':'','line_number':736,'multiline':False]
['text':'  negative lazy operator (prefix -)','line_number':737,'multiline':False]
['text':'','line_number':738,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':739,'multiline':False]
['text':'////////////////////////////////','line_number':754,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':762,'multiline':False]
['text':'','line_number':763,'multiline':False]
['text':'  positive lazy operator (prefix +)','line_number':764,'multiline':False]
['text':'','line_number':765,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':766,'multiline':False]
['text':'////////////////////////////////','line_number':781,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':789,'multiline':False]
['text':'','line_number':790,'multiline':False]
['text':'  logical not lazy operator (prefix !)','line_number':791,'multiline':False]
['text':'','line_number':792,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':793,'multiline':False]
['text':'////////////////////////////////','line_number':808,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':816,'multiline':False]
['text':'','line_number':817,'multiline':False]
['text':'  invert lazy operator (prefix ~)','line_number':818,'multiline':False]
['text':'','line_number':819,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':820,'multiline':False]
['text':'////////////////////////////////','line_number':835,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':843,'multiline':False]
['text':'','line_number':844,'multiline':False]
['text':'  reference lazy operator (prefix &)','line_number':845,'multiline':False]
['text':'','line_number':846,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':847,'multiline':False]
['text':'////////////////////////////////','line_number':862,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':870,'multiline':False]
['text':'','line_number':871,'multiline':False]
['text':'  dereference lazy operator (prefix *)','line_number':872,'multiline':False]
['text':'','line_number':873,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':874,'multiline':False]
['text':'////////////////////////////////','line_number':889,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':897,'multiline':False]
['text':'','line_number':898,'multiline':False]
['text':'  pre increment lazy operator (prefix ++)','line_number':899,'multiline':False]
['text':'','line_number':900,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':901,'multiline':False]
['text':'////////////////////////////////','line_number':916,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':924,'multiline':False]
['text':'','line_number':925,'multiline':False]
['text':'  pre decrement lazy operator (prefix --)','line_number':926,'multiline':False]
['text':'','line_number':927,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':928,'multiline':False]
['text':'////////////////////////////////','line_number':943,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':951,'multiline':False]
['text':'','line_number':952,'multiline':False]
['text':'  post increment lazy operator (postfix ++)','line_number':953,'multiline':False]
['text':'','line_number':954,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':955,'multiline':False]
['text':'////////////////////////////////','line_number':970,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':978,'multiline':False]
['text':'','line_number':979,'multiline':False]
['text':'  post decrement lazy operator (postfix --)','line_number':980,'multiline':False]
['text':'','line_number':981,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':982,'multiline':False]
['text':'////////////////////////////////','line_number':997,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1005,'multiline':False]
['text':'','line_number':1006,'multiline':False]
['text':'  assignment lazy operator (infix =)','line_number':1007,'multiline':False]
['text':'  The acual lazy operator is a member of the actor class.','line_number':1008,'multiline':False]
['text':'','line_number':1009,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1010,'multiline':False]
['text':'////////////////////////////////','line_number':1026,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1035,'multiline':False]
['text':'','line_number':1036,'multiline':False]
['text':'  index lazy operator (array index [])','line_number':1037,'multiline':False]
['text':'  The acual lazy operator is a member of the actor class.','line_number':1038,'multiline':False]
['text':'','line_number':1039,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1040,'multiline':False]
['text':'////////////////////////////////','line_number':1056,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1065,'multiline':False]
['text':'','line_number':1066,'multiline':False]
['text':'  plus assign lazy operator (infix +=)','line_number':1067,'multiline':False]
['text':'','line_number':1068,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1069,'multiline':False]
['text':'////////////////////////////////','line_number':1085,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1093,'multiline':False]
['text':'','line_number':1094,'multiline':False]
['text':'  minus assign lazy operator (infix -=)','line_number':1095,'multiline':False]
['text':'','line_number':1096,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1097,'multiline':False]
['text':'////////////////////////////////','line_number':1113,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1121,'multiline':False]
['text':'','line_number':1122,'multiline':False]
['text':'  times assign lazy operator (infix *=)','line_number':1123,'multiline':False]
['text':'','line_number':1124,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1125,'multiline':False]
['text':'////////////////////////////////','line_number':1141,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1149,'multiline':False]
['text':'','line_number':1150,'multiline':False]
['text':'  divide assign lazy operator (infix /=)','line_number':1151,'multiline':False]
['text':'','line_number':1152,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1153,'multiline':False]
['text':'////////////////////////////////','line_number':1169,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1177,'multiline':False]
['text':'','line_number':1178,'multiline':False]
['text':'  mod assign lazy operator (infix %=)','line_number':1179,'multiline':False]
['text':'','line_number':1180,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1181,'multiline':False]
['text':'////////////////////////////////','line_number':1197,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1205,'multiline':False]
['text':'','line_number':1206,'multiline':False]
['text':'  and assign lazy operator (infix &=)','line_number':1207,'multiline':False]
['text':'','line_number':1208,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1209,'multiline':False]
['text':'////////////////////////////////','line_number':1225,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1233,'multiline':False]
['text':'','line_number':1234,'multiline':False]
['text':'  or assign lazy operator (infix |=)','line_number':1235,'multiline':False]
['text':'','line_number':1236,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1237,'multiline':False]
['text':'////////////////////////////////','line_number':1253,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1261,'multiline':False]
['text':'','line_number':1262,'multiline':False]
['text':'  xor assign lazy operator (infix ^=)','line_number':1263,'multiline':False]
['text':'','line_number':1264,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1265,'multiline':False]
['text':'////////////////////////////////','line_number':1281,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1289,'multiline':False]
['text':'','line_number':1290,'multiline':False]
['text':'  shift left assign lazy operator (infix <<=)','line_number':1291,'multiline':False]
['text':'','line_number':1292,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1293,'multiline':False]
['text':'////////////////////////////////','line_number':1309,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1317,'multiline':False]
['text':'','line_number':1318,'multiline':False]
['text':'  shift right assign lazy operator (infix >>=)','line_number':1319,'multiline':False]
['text':'','line_number':1320,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1321,'multiline':False]
['text':'////////////////////////////////','line_number':1337,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1345,'multiline':False]
['text':'','line_number':1346,'multiline':False]
['text':'  plus lazy operator (infix +)','line_number':1347,'multiline':False]
['text':'','line_number':1348,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1349,'multiline':False]
['text':'////////////////////////////////','line_number':1365,'multiline':False]
['text':'////////////////////////////////','line_number':1373,'multiline':False]
['text':'////////////////////////////////','line_number':1381,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1389,'multiline':False]
['text':'','line_number':1390,'multiline':False]
['text':'  minus lazy operator (infix -)','line_number':1391,'multiline':False]
['text':'','line_number':1392,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1393,'multiline':False]
['text':'////////////////////////////////','line_number':1409,'multiline':False]
['text':'////////////////////////////////','line_number':1417,'multiline':False]
['text':'////////////////////////////////','line_number':1425,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1433,'multiline':False]
['text':'','line_number':1434,'multiline':False]
['text':'  times lazy operator (infix *)','line_number':1435,'multiline':False]
['text':'','line_number':1436,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1437,'multiline':False]
['text':'////////////////////////////////','line_number':1453,'multiline':False]
['text':'////////////////////////////////','line_number':1461,'multiline':False]
['text':'////////////////////////////////','line_number':1469,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1477,'multiline':False]
['text':'','line_number':1478,'multiline':False]
['text':'  divide lazy operator (infix /)','line_number':1479,'multiline':False]
['text':'','line_number':1480,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1481,'multiline':False]
['text':'////////////////////////////////','line_number':1497,'multiline':False]
['text':'////////////////////////////////','line_number':1505,'multiline':False]
['text':'////////////////////////////////','line_number':1513,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1521,'multiline':False]
['text':'','line_number':1522,'multiline':False]
['text':'  mod lazy operator (infix %)','line_number':1523,'multiline':False]
['text':'','line_number':1524,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1525,'multiline':False]
['text':'////////////////////////////////','line_number':1541,'multiline':False]
['text':'////////////////////////////////','line_number':1549,'multiline':False]
['text':'////////////////////////////////','line_number':1557,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1565,'multiline':False]
['text':'','line_number':1566,'multiline':False]
['text':'  and lazy operator (infix &)','line_number':1567,'multiline':False]
['text':'','line_number':1568,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1569,'multiline':False]
['text':'////////////////////////////////','line_number':1585,'multiline':False]
['text':'////////////////////////////////','line_number':1593,'multiline':False]
['text':'////////////////////////////////','line_number':1601,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1609,'multiline':False]
['text':'','line_number':1610,'multiline':False]
['text':'  or lazy operator (infix |)','line_number':1611,'multiline':False]
['text':'','line_number':1612,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1613,'multiline':False]
['text':'////////////////////////////////','line_number':1629,'multiline':False]
['text':'////////////////////////////////','line_number':1637,'multiline':False]
['text':'////////////////////////////////','line_number':1645,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1653,'multiline':False]
['text':'','line_number':1654,'multiline':False]
['text':'  xor lazy operator (infix ^)','line_number':1655,'multiline':False]
['text':'','line_number':1656,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1657,'multiline':False]
['text':'////////////////////////////////','line_number':1673,'multiline':False]
['text':'////////////////////////////////','line_number':1681,'multiline':False]
['text':'////////////////////////////////','line_number':1689,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1697,'multiline':False]
['text':'','line_number':1698,'multiline':False]
['text':'  shift left lazy operator (infix <<)','line_number':1699,'multiline':False]
['text':'','line_number':1700,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1701,'multiline':False]
['text':'////////////////////////////////','line_number':1717,'multiline':False]
['text':'////////////////////////////////','line_number':1725,'multiline':False]
['text':'////////////////////////////////','line_number':1733,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1741,'multiline':False]
['text':'','line_number':1742,'multiline':False]
['text':'  shift right lazy operator (infix >>)','line_number':1743,'multiline':False]
['text':'','line_number':1744,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1745,'multiline':False]
['text':'////////////////////////////////','line_number':1761,'multiline':False]
['text':'////////////////////////////////','line_number':1769,'multiline':False]
['text':'////////////////////////////////','line_number':1777,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1785,'multiline':False]
['text':'','line_number':1786,'multiline':False]
['text':'  equal lazy operator (infix ==)','line_number':1787,'multiline':False]
['text':'','line_number':1788,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1789,'multiline':False]
['text':'////////////////////////////////','line_number':1805,'multiline':False]
['text':'////////////////////////////////','line_number':1813,'multiline':False]
['text':'////////////////////////////////','line_number':1821,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1829,'multiline':False]
['text':'','line_number':1830,'multiline':False]
['text':'  not equal lazy operator (infix !=)','line_number':1831,'multiline':False]
['text':'','line_number':1832,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1833,'multiline':False]
['text':'////////////////////////////////','line_number':1849,'multiline':False]
['text':'////////////////////////////////','line_number':1857,'multiline':False]
['text':'////////////////////////////////','line_number':1865,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1873,'multiline':False]
['text':'','line_number':1874,'multiline':False]
['text':'  less than lazy operator (infix <)','line_number':1875,'multiline':False]
['text':'','line_number':1876,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1877,'multiline':False]
['text':'////////////////////////////////','line_number':1893,'multiline':False]
['text':'////////////////////////////////','line_number':1901,'multiline':False]
['text':'////////////////////////////////','line_number':1909,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1917,'multiline':False]
['text':'','line_number':1918,'multiline':False]
['text':'  less than equal lazy operator (infix <=)','line_number':1919,'multiline':False]
['text':'','line_number':1920,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1921,'multiline':False]
['text':'////////////////////////////////','line_number':1937,'multiline':False]
['text':'////////////////////////////////','line_number':1945,'multiline':False]
['text':'////////////////////////////////','line_number':1953,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1961,'multiline':False]
['text':'','line_number':1962,'multiline':False]
['text':'  greater than lazy operator (infix >)','line_number':1963,'multiline':False]
['text':'','line_number':1964,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1965,'multiline':False]
['text':'////////////////////////////////','line_number':1981,'multiline':False]
['text':'////////////////////////////////','line_number':1989,'multiline':False]
['text':'////////////////////////////////','line_number':1997,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2005,'multiline':False]
['text':'','line_number':2006,'multiline':False]
['text':'  greater than equal lazy operator (infix >=)','line_number':2007,'multiline':False]
['text':'','line_number':2008,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2009,'multiline':False]
['text':'////////////////////////////////','line_number':2025,'multiline':False]
['text':'////////////////////////////////','line_number':2033,'multiline':False]
['text':'////////////////////////////////','line_number':2041,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2049,'multiline':False]
['text':'','line_number':2050,'multiline':False]
['text':'  logical and lazy operator (infix &&)','line_number':2051,'multiline':False]
['text':'','line_number':2052,'multiline':False]
['text':'  The logical_and_composite class and its corresponding generators are','line_number':2053,'multiline':False]
['text':'  provided to allow short-circuit evaluation of the operator's','line_number':2054,'multiline':False]
['text':'  operands.','line_number':2055,'multiline':False]
['text':'','line_number':2056,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2057,'multiline':False]
['text':'  actors','line_number':2082,'multiline':False]
['text':'////////////////////////////////','line_number':2086,'multiline':False]
['text':'////////////////////////////////','line_number':2097,'multiline':False]
['text':'////////////////////////////////','line_number':2108,'multiline':False]
['text':'////////////////////////////////','line_number':2119,'multiline':False]
['text':' !(__ICL && __ICL <= 500)','line_number':2129,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2131,'multiline':False]
['text':'','line_number':2132,'multiline':False]
['text':'  logical or lazy operator (infix ||)','line_number':2133,'multiline':False]
['text':'','line_number':2134,'multiline':False]
['text':'  The logical_or_composite class and its corresponding generators are','line_number':2135,'multiline':False]
['text':'  provided to allow short-circuit evaluation of the operator's','line_number':2136,'multiline':False]
['text':'  operands.','line_number':2137,'multiline':False]
['text':'','line_number':2138,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2139,'multiline':False]
['text':'  actors','line_number':2164,'multiline':False]
['text':'////////////////////////////////','line_number':2167,'multiline':False]
['text':'////////////////////////////////','line_number':2178,'multiline':False]
['text':'////////////////////////////////','line_number':2189,'multiline':False]
['text':'  namespace phoenix','line_number':2200,'multiline':False]
