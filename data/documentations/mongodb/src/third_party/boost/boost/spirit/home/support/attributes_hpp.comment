['text':'=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman
    Copyright (c) 2001-2012 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================','line_number':1,'multiline':True]
['text':' for std::iterator_traits, std::distance','line_number':48,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':53,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':56,'multiline':False]
['text':' This file deals with attribute related functions and meta-functions','line_number':57,'multiline':False]
['text':' including generalized attribute transformation utilities for Spirit','line_number':58,'multiline':False]
['text':' components.','line_number':59,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':60,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':62,'multiline':False]
['text':' Find out if T can be a (strong) substitute for Expected attribute','line_number':63,'multiline':False]
['text':'= void','line_number':99,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':112,'multiline':False]
['text':' Find out if T can be a weak substitute for Expected attribute','line_number':113,'multiline':False]
['text':' A type, which is convertible to the attribute is at the same time','line_number':116,'multiline':False]
['text':' usable as its weak substitute.','line_number':117,'multiline':False]
['text':'        // An exposed attribute is a weak substitute for a supplied container','line_number':121,'multiline':False]
['text':'        // attribute if it is a weak substitute for its value_type. This is','line_number':122,'multiline':False]
['text':'        // true as all character parsers are compatible with a container','line_number':123,'multiline':False]
['text':'        // attribute having the corresponding character type as its value_type.','line_number':124,'multiline':False]
['text':'        template <typename T, typename Expected>','line_number':125,'multiline':False]
['text':'        struct is_weak_substitute_for_value_type','line_number':126,'multiline':False]
['text':'          : is_weak_substitute<T, typename container_value<Expected>::type>','line_number':127,'multiline':False]
['text':'        {};','line_number':128,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':'        template <typename T, typename Expected>','line_number':130,'multiline':False]
['text':'        struct is_weak_substitute_impl<T, Expected,','line_number':131,'multiline':False]
['text':'            typename enable_if<','line_number':132,'multiline':False]
['text':'                mpl::and_<','line_number':133,'multiline':False]
['text':'                    mpl::not_<is_string<T> >','line_number':134,'multiline':False]
['text':'                  , is_string<Expected>','line_number':135,'multiline':False]
['text':'                  , is_weak_substitute_for_value_type<T, Expected> >','line_number':136,'multiline':False]
['text':'            >::type>','line_number':137,'multiline':False]
['text':'          : mpl::true_','line_number':138,'multiline':False]
['text':'        {};','line_number':139,'multiline':False]
['text':' An exposed container attribute is a weak substitute for a supplied','line_number':141,'multiline':False]
['text':' container attribute if and only if their value_types are weak','line_number':142,'multiline':False]
['text':' substitutes.','line_number':143,'multiline':False]
['text':' Two fusion sequences are weak substitutes if and only if their','line_number':161,'multiline':False]
['text':' elements are pairwise weak substitutes.','line_number':162,'multiline':False]
['text':' If this is not defined, the main template definition above will return','line_number':173,'multiline':False]
['text':' true if T is convertible to the first type in a fusion::vector. We','line_number':174,'multiline':False]
['text':' globally declare any non-Fusion sequence T as not compatible with any','line_number':175,'multiline':False]
['text':' Fusion sequence 'Expected'.','line_number':176,'multiline':False]
['text':' main template forwards to detail namespace, this helps older compilers','line_number':187,'multiline':False]
['text':' to disambiguate things','line_number':188,'multiline':False]
['text':'= void','line_number':189,'multiline':True]
['text':'*','line_number':220,'multiline':True]
['text':' make sure unused variant parameters do not affect the outcome','line_number':222,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':245,'multiline':False]
['text':' = void','line_number':246,'multiline':True]
['text':' By declaring a nested struct in your class/struct, you tell','line_number':261,'multiline':False]
['text':' spirit that it is regarded as a variant type. The minimum','line_number':262,'multiline':False]
['text':' required interface for such a variant is that it has constructors','line_number':263,'multiline':False]
['text':' for various types supported by your variant and a typedef 'types'','line_number':264,'multiline':False]
['text':' which is an mpl sequence of the contained types.','line_number':265,'multiline':False]
['text':'','line_number':266,'multiline':False]
['text':' This is an intrusive interface. For a non-intrusive interface,','line_number':267,'multiline':False]
['text':' use the not_is_variant trait.','line_number':268,'multiline':False]
['text':' = void','line_number':272,'multiline':True]
['text':' we treat every type as if it where the variant (as this meta function is','line_number':282,'multiline':False]
['text':' invoked for variant types only)','line_number':283,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':299,'multiline':False]
['text':' The compute_compatible_component_variant','line_number':300,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':301,'multiline':False]
['text':'  A component is compatible to a given Attribute type if the','line_number':304,'multiline':False]
['text':'  Attribute is the same as the expected type of the component or if','line_number':305,'multiline':False]
['text':'  it is convertible to the expected type.','line_number':306,'multiline':False]
['text':' true_ if the attribute matches one of the types in the variant','line_number':356,'multiline':False]
['text':' return the type in the variant the attribute is compatible with','line_number':360,'multiline':False]
['text':' return whether the given type is compatible with the Expected type','line_number':365,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':389,'multiline':False]
['text':' return the type currently stored in the given variant','line_number':390,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':406,'multiline':False]
['text':' = void','line_number':407,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':417,'multiline':False]
['text':' attribute_of','line_number':418,'multiline':False]
['text':'','line_number':419,'multiline':False]
['text':' Get the component's attribute','line_number':420,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':421,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':430,'multiline':False]
['text':' attribute_not_unused','line_number':431,'multiline':False]
['text':'','line_number':432,'multiline':False]
['text':' An mpl meta-function class that determines whether a component's','line_number':433,'multiline':False]
['text':' attribute is not unused.','line_number':434,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':435,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':446,'multiline':False]
['text':' Retrieve the attribute type to use from the given type','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':' This is needed to extract the correct attribute type from proxy classes','line_number':449,'multiline':False]
['text':' as utilized in FUSION_ADAPT_ADT et. al.','line_number':450,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':451,'multiline':False]
['text':' = void','line_number':452,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':455,'multiline':False]
['text':' Retrieve the size of a fusion sequence (compile time)','line_number':456,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':457,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':468,'multiline':False]
['text':' Retrieve the size of an attribute (runtime)','line_number':469,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':470,'multiline':False]
['text':' = void','line_number':519,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':590,'multiline':False]
['text':' pass_attribute','line_number':591,'multiline':False]
['text':'','line_number':592,'multiline':False]
['text':' Determines how we pass attributes to semantic actions. This','line_number':593,'multiline':False]
['text':' may be specialized. By default, all attributes are wrapped in','line_number':594,'multiline':False]
['text':' a fusion sequence, because the attribute has to be treated as being','line_number':595,'multiline':False]
['text':' a single value in any case (even if it actually already is a fusion','line_number':596,'multiline':False]
['text':' sequence in its own).','line_number':597,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':598,'multiline':False]
['text':' = void','line_number':599,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':605,'multiline':False]
['text':' Subclass a pass_attribute specialization from this to wrap','line_number':606,'multiline':False]
['text':' the attribute in a tuple only IFF it is not already a fusion tuple.','line_number':607,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':608,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':634,'multiline':False]
['text':' build_optional','line_number':635,'multiline':False]
['text':'','line_number':636,'multiline':False]
['text':' Build a boost::optional from T. Return unused_type if T is unused_type.','line_number':637,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':638,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':657,'multiline':False]
['text':' build_std_vector','line_number':658,'multiline':False]
['text':'','line_number':659,'multiline':False]
['text':' Build a std::vector from T. Return unused_type if T is unused_type.','line_number':660,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':661,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':674,'multiline':False]
['text':' filter_unused_attributes','line_number':675,'multiline':False]
['text':'','line_number':676,'multiline':False]
['text':' Remove unused_types from a sequence','line_number':677,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':678,'multiline':False]
['text':' Compute the list of all *used* attributes of sub-components','line_number':680,'multiline':False]
['text':' (filter all unused attributes from the list)','line_number':681,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':687,'multiline':False]
['text':' sequence_attribute_transform','line_number':688,'multiline':False]
['text':'','line_number':689,'multiline':False]
['text':' This transform is invoked for every attribute in a sequence allowing','line_number':690,'multiline':False]
['text':' to modify the attribute type exposed by a component to the enclosing','line_number':691,'multiline':False]
['text':' sequence component. By default no transformation is performed.','line_number':692,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':693,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':699,'multiline':False]
['text':' permutation_attribute_transform','line_number':700,'multiline':False]
['text':'','line_number':701,'multiline':False]
['text':' This transform is invoked for every attribute in a sequence allowing','line_number':702,'multiline':False]
['text':' to modify the attribute type exposed by a component to the enclosing','line_number':703,'multiline':False]
['text':' permutation component. By default a build_optional transformation is','line_number':704,'multiline':False]
['text':' performed.','line_number':705,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':706,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':712,'multiline':False]
['text':' sequential_or_attribute_transform','line_number':713,'multiline':False]
['text':'','line_number':714,'multiline':False]
['text':' This transform is invoked for every attribute in a sequential_or allowing','line_number':715,'multiline':False]
['text':' to modify the attribute type exposed by a component to the enclosing','line_number':716,'multiline':False]
['text':' sequential_or component. By default a build_optional transformation is','line_number':717,'multiline':False]
['text':' performed.','line_number':718,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':719,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':725,'multiline':False]
['text':' build_fusion_vector','line_number':726,'multiline':False]
['text':'','line_number':727,'multiline':False]
['text':' Build a fusion vector from a fusion sequence. All unused attributes','line_number':728,'multiline':False]
['text':' are filtered out. If the result is empty after the removal of unused','line_number':729,'multiline':False]
['text':' types, return unused_type. If the input sequence is an unused_type,','line_number':730,'multiline':False]
['text':' also return unused_type.','line_number':731,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':732,'multiline':False]
['text':' Remove all unused attributes','line_number':736,'multiline':False]
['text':' Build a fusion vector from a fusion sequence (Sequence),','line_number':741,'multiline':False]
['text':' But *only if* the sequence is not empty. i.e. if the','line_number':742,'multiline':False]
['text':' sequence is empty, our result will be unused_type.','line_number':743,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':760,'multiline':False]
['text':' build_attribute_sequence','line_number':761,'multiline':False]
['text':'','line_number':762,'multiline':False]
['text':' Build a fusion sequence attribute sequence from a sequence of','line_number':763,'multiline':False]
['text':' components. Transform<T>::type is called on each element.','line_number':764,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':765,'multiline':False]
['text':' never called, but needed for decltype-based result_of (C++0x)','line_number':787,'multiline':False]
['text':' Compute the list of attributes of all sub-components','line_number':795,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':801,'multiline':False]
['text':' has_no_unused','line_number':802,'multiline':False]
['text':'','line_number':803,'multiline':False]
['text':' Test if there are no unused attributes in Sequence','line_number':804,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':805,'multiline':False]
['text':' N element case, no unused','line_number':819,'multiline':False]
['text':' N element case with unused','line_number':824,'multiline':False]
['text':' 1 element case, no unused','line_number':835,'multiline':False]
['text':' 1 element case, with unused','line_number':840,'multiline':False]
['text':' 2 element case, no unused','line_number':845,'multiline':False]
['text':' 2 element case, with unused','line_number':850,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':865,'multiline':False]
['text':' alternative_attribute_transform','line_number':866,'multiline':False]
['text':'','line_number':867,'multiline':False]
['text':' This transform is invoked for every attribute in an alternative allowing','line_number':868,'multiline':False]
['text':' to modify the attribute type exposed by a component to the enclosing','line_number':869,'multiline':False]
['text':' alternative component. By default no transformation is performed.','line_number':870,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':871,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':877,'multiline':False]
['text':' build_variant','line_number':878,'multiline':False]
['text':'','line_number':879,'multiline':False]
['text':' Build a boost::variant from a fusion sequence. build_variant makes sure','line_number':880,'multiline':False]
['text':' that 1) all attributes in the variant are unique 2) puts the unused','line_number':881,'multiline':False]
['text':' attribute, if there is any, to the front and 3) collapses single element','line_number':882,'multiline':False]
['text':' variants, variant<T> to T.','line_number':883,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':884,'multiline':False]
['text':' Remove all unused attributes.','line_number':888,'multiline':False]
['text':' If the original attribute list does not contain any unused','line_number':895,'multiline':False]
['text':' attributes, it is used, otherwise a single unused_type is','line_number':896,'multiline':False]
['text':' pushed to the front of the list. This is to make sure that if','line_number':897,'multiline':False]
['text':' there is an unused_type in the list, it is the first one.','line_number':898,'multiline':False]
['text':' Make sure each of the types occur only once in the type list','line_number':907,'multiline':False]
['text':' If there is only one type in the list of types we strip off the','line_number':918,'multiline':False]
['text':' variant. IOTW, collapse single element variants, variant<T> to T.','line_number':919,'multiline':False]
['text':' Take note that this also collapses variant<unused_type, T> to T.','line_number':920,'multiline':False]
['text':' Domain-agnostic class template partial specializations and','line_number':928,'multiline':False]
['text':' type agnostic domain partial specializations are ambious.','line_number':929,'multiline':False]
['text':' To resolve the ambiguity type agnostic domain partial','line_number':930,'multiline':False]
['text':' specializations are dispatched via intermediate type.','line_number':931,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':944,'multiline':False]
['text':'  transform_attribute','line_number':945,'multiline':False]
['text':'','line_number':946,'multiline':False]
['text':'  Sometimes the user needs to transform the attribute types for certain','line_number':947,'multiline':False]
['text':'  attributes. This template can be used as a customization point, where','line_number':948,'multiline':False]
['text':'  the user is able specify specific transformation rules for any attribute','line_number':949,'multiline':False]
['text':'  type.','line_number':950,'multiline':False]
['text':'','line_number':951,'multiline':False]
['text':'  Note: the transformations involving unused_type are internal details','line_number':952,'multiline':False]
['text':'  and may be subject to change at any time.','line_number':953,'multiline':False]
['text':'','line_number':954,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':955,'multiline':False]
['text':' = void','line_number':957,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':977,'multiline':False]
['text':' swap_impl','line_number':978,'multiline':False]
['text':'','line_number':979,'multiline':False]
['text':' Swap (with proper handling of unused_types)','line_number':980,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':981,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1010,'multiline':False]
['text':'  Strips single element fusion vectors into its 'naked'','line_number':1011,'multiline':False]
['text':'  form: vector<T> --> T','line_number':1012,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1013,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1033,'multiline':False]
['text':' meta function to return whether the argument is a one element fusion','line_number':1034,'multiline':False]
['text':' sequence','line_number':1035,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1036,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1049,'multiline':False]
['text':' clear','line_number':1050,'multiline':False]
['text':'','line_number':1051,'multiline':False]
['text':' Clear data efficiently','line_number':1052,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1053,'multiline':False]
['text':' this is used by the variant and fusion sequence dispatch','line_number':1059,'multiline':False]
['text':' default','line_number':1069,'multiline':False]
['text':' for fusion sequences','line_number':1076,'multiline':False]
['text':' dispatch default or fusion sequence','line_number':1083,'multiline':False]
['text':' STL containers','line_number':1090,'multiline':False]
['text':' = void','line_number':1098,'multiline':True]
['text':' optionals','line_number':1107,'multiline':False]
['text':' leave optional uninitialized','line_number':1114,'multiline':False]
['text':' variants','line_number':1118,'multiline':False]
['text':' iterator range','line_number':1128,'multiline':False]
['text':' main dispatch','line_number':1138,'multiline':False]
['text':' for unused','line_number':1145,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1150,'multiline':False]
['text':' print elements in a variant','line_number':1175,'multiline':False]
['text':' for plain data types','line_number':1194,'multiline':False]
['text':' for fusion data types','line_number':1201,'multiline':False]
['text':' non-stl container','line_number':1210,'multiline':False]
['text':' stl container','line_number':1217,'multiline':False]
['text':' for variant types','line_number':1238,'multiline':False]
['text':' for non-variant types','line_number':1245,'multiline':False]
['text':' main entry point','line_number':1252,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1271,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':1283,'multiline':False]
['text':' generate debug output for lookahead token (character) stream','line_number':1284,'multiline':False]
['text':' allow for ADL to find the proper iscntrl','line_number':1292,'multiline':False]
['text':' for token types where the comparison with char constants wouldn't work','line_number':1315,'multiline':False]
['text':' allow to customize the token printer routine','line_number':1338,'multiline':False]
