['text':'=============================================================================
    Copyright (c) 2002-2003 Hartmut Kaiser
    http://spirit.sourceforge.net/

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':16,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':'  Types to distinguish nested and non-nested confix parsers','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':25,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':'  Types to distinguish between confix parsers, which are implicitly lexems','line_number':31,'multiline':False]
['text':'  and without this behaviour','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':34,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'  confix_parser_type class implementation','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':42,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':45,'multiline':False]
['text':'  implicitly insert a lexeme_d into the parsing process','line_number':46,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':74,'multiline':False]
['text':'  parse confix sequences with refactoring','line_number':75,'multiline':False]
['text':'this_','line_number':112,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':126,'multiline':False]
['text':'  parse confix sequences without refactoring','line_number':127,'multiline':False]
['text':'this_','line_number':161,'multiline':True]
['text':' the refactoring is handled by the refactoring parsers, so here there','line_number':172,'multiline':False]
['text':' is no need to pay attention to these issues.','line_number':173,'multiline':False]
['text':' namespace impl','line_number':213,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':215,'multiline':False]
['text':' namespace boost::spirit','line_number':218,'multiline':False]
