['text':'=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman
    Copyright (c) 2001-2011 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':29,'multiline':False]
['text':' Enablers','line_number':30,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':31,'multiline':False]
['text':'[composite_parsers_kleene_enable_','line_number':32,'multiline':False]
['text':' enables *p','line_number':34,'multiline':False]
['text':']','line_number':36,'multiline':False]
['text':'[composite_parsers_kleene','line_number':41,'multiline':False]
['text':' Build a std::vector from the subject's attribute. Note','line_number':50,'multiline':False]
['text':' that build_std_vector may return unused_type if the','line_number':51,'multiline':False]
['text':' subject's attribute is an unused_type.','line_number':52,'multiline':False]
['text':' ensure the attribute is actually a container type','line_number':78,'multiline':False]
['text':']','line_number':100,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':102,'multiline':False]
['text':' Parser generators: make_xxx function (objects)','line_number':103,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':104,'multiline':False]
['text':'[composite_parsers_kleene_generator','line_number':105,'multiline':False]
['text':']','line_number':110,'multiline':False]
['text':'     ///////////////////////////////////////////////////////////////////////////','line_number':112,'multiline':False]
['text':'     // Define what attributes are compatible with a kleene','line_number':113,'multiline':False]
['text':'     template <typename Attribute, typename Subject, typename Context, typename Iterator>','line_number':114,'multiline':False]
['text':'     struct is_attribute_compatible<Attribute, kleene<Subject>, Context, Iterator>','line_number':115,'multiline':False]
['text':'       : traits::is_container_compatible<qi::domain, Attribute','line_number':116,'multiline':False]
['text':'               , kleene<Subject>, Context, Iterator>','line_number':117,'multiline':False]
['text':'     {};','line_number':118,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':123,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////','line_number':128,'multiline':False]
