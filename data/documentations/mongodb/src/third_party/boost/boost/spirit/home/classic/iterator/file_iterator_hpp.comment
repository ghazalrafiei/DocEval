['text':'=============================================================================
    Copyright (c) 2003 Giovanni Bajo
    Copyright (c) 2003 Thomas Witt
    Copyright (c) 2003 Hartmut Kaiser
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================','line_number':1,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':'  File Iterator structure','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'  The new structure is designed on layers. The top class (used by the user)','line_number':15,'multiline':False]
['text':'  is file_iterator, which implements a full random access iterator through','line_number':16,'multiline':False]
['text':'  the file, and some specific member functions (constructor that opens','line_number':17,'multiline':False]
['text':'  the file, make_end() to generate the end iterator, operator bool to check','line_number':18,'multiline':False]
['text':'  if the file was opened correctly).','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':'  file_iterator implements the random access iterator interface by the means','line_number':21,'multiline':False]
['text':'  of boost::iterator_adaptor, that is inhering an object created with it.','line_number':22,'multiline':False]
['text':'  iterator_adaptor gets a low-level file iterator implementation (with just','line_number':23,'multiline':False]
['text':'  a few member functions) and a policy (that basically describes to it how','line_number':24,'multiline':False]
['text':'  the low-level file iterator interface is). The advantage is that','line_number':25,'multiline':False]
['text':'  with boost::iterator_adaptor only 5 functions are needed to implement','line_number':26,'multiline':False]
['text':'  a fully conformant random access iterator, instead of dozens of functions','line_number':27,'multiline':False]
['text':'  and operators.','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':'  There are two low-level file iterators implemented in this module. The','line_number':30,'multiline':False]
['text':'  first (std_file_iterator) uses cstdio stream functions (fopen/fread), which','line_number':31,'multiline':False]
['text':'  support full buffering, and is available everywhere (it's standard C++).','line_number':32,'multiline':False]
['text':'  The second (mmap_file_iterator) is currently available only on Windows','line_number':33,'multiline':False]
['text':'  platforms, and uses memory mapped files, which gives a decent speed boost.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':'  TODO LIST:','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'  - In the Win32 mmap iterator, we could check if keeping a handle to the','line_number':40,'multiline':False]
['text':'    opened file is really required. If it's not, we can just store the file','line_number':41,'multiline':False]
['text':'    length (for make_end()) and save performance. Notice that this should be','line_number':42,'multiline':False]
['text':'    tested under different Windows versions, the behaviour might change.','line_number':43,'multiline':False]
['text':'  - Add some error support (by the means of some exceptions) in case of','line_number':44,'multiline':False]
['text':'    low-level I/O failure.','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':47,'multiline':False]
['text':' _POSIX_MAPPED_FILES','line_number':71,'multiline':False]
['text':' BOOST_HAS_UNISTD_H','line_number':72,'multiline':False]
['text':' BOOST_SPIRIT_FILEITERATOR_STD','line_number':78,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':80,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':95,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':'  file_iter_generator','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'  Template meta-function to invoke boost::iterator_adaptor','line_number':102,'multiline':False]
['text':'  NOTE: This cannot be moved into the implementation file because of','line_number':103,'multiline':False]
['text':'  a bug of MSVC 7.0 and previous versions (base classes types are','line_number':104,'multiline':False]
['text':'  looked up at compilation time, not instantion types, and','line_number':105,'multiline':False]
['text':'  file_iterator would break).','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////','line_number':108,'multiline':False]
['text':' BOOST_ITERATOR_ADAPTORS_VERSION < 0x0200','line_number':113,'multiline':False]
['text':' BOOST_ITERATOR_ADAPTORS_VERSION < 0x0200','line_number':132,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':134,'multiline':False]
['text':' namespace impl ','line_number':135,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':138,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':'  file_iterator','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':'  Iterates through an opened file.','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':'  The main iterator interface is implemented by the iterator_adaptors','line_number':144,'multiline':False]
['text':'  library, which wraps a conforming iterator interface around the','line_number':145,'multiline':False]
['text':'  impl::BaseIterator class. This class merely derives the iterator_adaptors','line_number':146,'multiline':False]
['text':'  generated class to implement the custom constructors and make_end()','line_number':147,'multiline':False]
['text':'  member function.','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':150,'multiline':False]
['text':' operator bool. This borrows a trick from boost::shared_ptr to avoid','line_number':180,'multiline':False]
['text':'   to interfere with arithmetic operations.','line_number':181,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':220,'multiline':False]
['text':' namespace BOOST_SPIRIT_CLASSIC_NS ','line_number':223,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':225,'multiline':False]
['text':' implementation ','line_number':226,'multiline':True]
['text':' BOOST_SPIRIT_FILE_ITERATOR_HPP ','line_number':228,'multiline':True]
