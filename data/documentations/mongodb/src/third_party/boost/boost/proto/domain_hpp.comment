['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file domain.hpp','line_number':2,'multiline':False]
['text':'/ Contains definition of domain\<\> class template and helpers for','line_number':3,'multiline':False]
['text':'/ defining domains with a generator and a grammar for controlling','line_number':4,'multiline':False]
['text':'/ operator overloading.','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':7,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':' function 'xxx' marked as __forceinline not inlined','line_number':23,'multiline':False]
['text':'/ \brief For use in defining domain tags to be used','line_number':43,'multiline':False]
['text':'/ with \c proto::extends\<\>. A \e Domain associates','line_number':44,'multiline':False]
['text':'/ an expression type with a \e Generator, and optionally','line_number':45,'multiline':False]
['text':'/ a \e Grammar.','line_number':46,'multiline':False]
['text':'/','line_number':47,'multiline':False]
['text':'/ The Generator determines how new expressions in the','line_number':48,'multiline':False]
['text':'/ domain are constructed. Typically, a generator wraps','line_number':49,'multiline':False]
['text':'/ all new expressions in a wrapper that imparts','line_number':50,'multiline':False]
['text':'/ domain-specific behaviors to expressions within its','line_number':51,'multiline':False]
['text':'/ domain. (See \c proto::extends\<\>.)','line_number':52,'multiline':False]
['text':'/','line_number':53,'multiline':False]
['text':'/ The Grammar determines whether a given expression is','line_number':54,'multiline':False]
['text':'/ valid within the domain, and automatically disables','line_number':55,'multiline':False]
['text':'/ any operator overloads which would cause an invalid','line_number':56,'multiline':False]
['text':'/ expression to be created. By default, the Grammar','line_number':57,'multiline':False]
['text':'/ parameter defaults to the wildcard, \c proto::_, which','line_number':58,'multiline':False]
['text':'/ makes all expressions valid within the domain.','line_number':59,'multiline':False]
['text':'/','line_number':60,'multiline':False]
['text':'/ The Super declares the domain currently being defined','line_number':61,'multiline':False]
['text':'/ to be a sub-domain of Super. Expressions in sub-domains','line_number':62,'multiline':False]
['text':'/ can be freely combined with expressions in its super-','line_number':63,'multiline':False]
['text':'/ domain (and <I>its</I> super-domain, etc.).','line_number':64,'multiline':False]
['text':'/','line_number':65,'multiline':False]
['text':'/ Example:','line_number':66,'multiline':False]
['text':'/ \code','line_number':67,'multiline':False]
['text':'/ template<typename Expr>','line_number':68,'multiline':False]
['text':'/ struct MyExpr;','line_number':69,'multiline':False]
['text':'/','line_number':70,'multiline':False]
['text':'/ struct MyGrammar','line_number':71,'multiline':False]
['text':'/   : or_< terminal<_>, plus<MyGrammar, MyGrammar> >','line_number':72,'multiline':False]
['text':'/ {};','line_number':73,'multiline':False]
['text':'/','line_number':74,'multiline':False]
['text':'/ // Define MyDomain, in which all expressions are','line_number':75,'multiline':False]
['text':'/ // wrapped in MyExpr<> and only expressions that','line_number':76,'multiline':False]
['text':'/ // conform to MyGrammar are allowed.','line_number':77,'multiline':False]
['text':'/ struct MyDomain','line_number':78,'multiline':False]
['text':'/   : domain<generator<MyExpr>, MyGrammar>','line_number':79,'multiline':False]
['text':'/ {};','line_number':80,'multiline':False]
['text':'/','line_number':81,'multiline':False]
['text':'/ // Use MyDomain to define MyExpr','line_number':82,'multiline':False]
['text':'/ template<typename Expr>','line_number':83,'multiline':False]
['text':'/ struct MyExpr','line_number':84,'multiline':False]
['text':'/   : extends<Expr, MyExpr<Expr>, MyDomain>','line_number':85,'multiline':False]
['text':'/ {','line_number':86,'multiline':False]
['text':'/     // ...','line_number':87,'multiline':False]
['text':'/ };','line_number':88,'multiline':False]
['text':'/ \endcode','line_number':89,'multiline':False]
['text':'/','line_number':90,'multiline':False]
['text':' = default_generator','line_number':92,'multiline':False]
['text':' = proto::_','line_number':93,'multiline':False]
['text':' = no_super_domain','line_number':94,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':104,'multiline':False]
['text':'/ \brief A unary MonomorphicFunctionObject that turns objects into Proto','line_number':107,'multiline':False]
['text':'/ expression objects in this domain.','line_number':108,'multiline':False]
['text':'/','line_number':109,'multiline':False]
['text':'/ The <tt>as_expr\<\></tt> function object turns objects into Proto expressions, if','line_number':110,'multiline':False]
['text':'/ they are not already, by making them Proto terminals held by value if','line_number':111,'multiline':False]
['text':'/ possible. Objects that are already Proto expressions are left alone.','line_number':112,'multiline':False]
['text':'/','line_number':113,'multiline':False]
['text':'/ If <tt>wants_basic_expr\<Generator\>::value</tt> is true, then let \c E be \c basic_expr;','line_number':114,'multiline':False]
['text':'/ otherwise, let \t E be \c expr. Given an lvalue \c t of type \c T:','line_number':115,'multiline':False]
['text':'/','line_number':116,'multiline':False]
['text':'/ If \c T is not a Proto expression type the resulting terminal is','line_number':117,'multiline':False]
['text':'/ calculated as follows:','line_number':118,'multiline':False]
['text':'/','line_number':119,'multiline':False]
['text':'/   If \c T is a function type, an abstract type, or a type derived from','line_number':120,'multiline':False]
['text':'/   \c std::ios_base, let \c A be <tt>T &</tt>.','line_number':121,'multiline':False]
['text':'/   Otherwise, let \c A be the type \c T stripped of cv-qualifiers.','line_number':122,'multiline':False]
['text':'/   Then, the result of applying <tt>as_expr\<T\>()(t)</tt> is','line_number':123,'multiline':False]
['text':'/   <tt>Generator()(E\<tag::terminal, term\<A\> \>::make(t))</tt>.','line_number':124,'multiline':False]
['text':'/','line_number':125,'multiline':False]
['text':'/ If \c T is a Proto expression type and its generator type is different from','line_number':126,'multiline':False]
['text':'/ \c Generator, the result is <tt>Generator()(t)</tt>.','line_number':127,'multiline':False]
['text':'/','line_number':128,'multiline':False]
['text':'/ Otherwise, the result is \c t converted to an (un-const) rvalue.','line_number':129,'multiline':False]
['text':'/','line_number':130,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':142,'multiline':False]
['text':'/','line_number':143,'multiline':False]
['text':'/ \brief A unary MonomorphicFunctionObject that turns objects into Proto','line_number':157,'multiline':False]
['text':'/ expression objects in this domain.','line_number':158,'multiline':False]
['text':'/','line_number':159,'multiline':False]
['text':'/ The <tt>as_child\<\></tt> function object turns objects into Proto expressions, if','line_number':160,'multiline':False]
['text':'/ they are not already, by making them Proto terminals held by reference.','line_number':161,'multiline':False]
['text':'/ Objects that are already Proto expressions are simply returned by reference.','line_number':162,'multiline':False]
['text':'/','line_number':163,'multiline':False]
['text':'/ If <tt>wants_basic_expr\<Generator\>::value</tt> is true, then let \c E be \c basic_expr;','line_number':164,'multiline':False]
['text':'/ otherwise, let \t E be \c expr. Given an lvalue \c t of type \c T:','line_number':165,'multiline':False]
['text':'/','line_number':166,'multiline':False]
['text':'/ If \c T is not a Proto expression type the resulting terminal is','line_number':167,'multiline':False]
['text':'/ <tt>Generator()(E\<tag::terminal, term\<T &\> \>::make(t))</tt>.','line_number':168,'multiline':False]
['text':'/','line_number':169,'multiline':False]
['text':'/ If \c T is a Proto expression type and its generator type is different from','line_number':170,'multiline':False]
['text':'/ \c Generator, the result is <tt>Generator()(t)</tt>.','line_number':171,'multiline':False]
['text':'/','line_number':172,'multiline':False]
['text':'/ Otherwise, the result is the lvalue \c t.','line_number':173,'multiline':False]
['text':'/','line_number':174,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':186,'multiline':False]
['text':'/','line_number':187,'multiline':False]
['text':'/ \brief The domain expressions have by default, if','line_number':202,'multiline':False]
['text':'/ \c proto::extends\<\> has not been used to associate','line_number':203,'multiline':False]
['text':'/ a domain with an expression.','line_number':204,'multiline':False]
['text':'/','line_number':205,'multiline':False]
['text':'/ \brief A domain to use when you prefer the use of','line_number':210,'multiline':False]
['text':'/ \c proto::basic_expr\<\> over \c proto::expr\<\>.','line_number':211,'multiline':False]
['text':'/','line_number':212,'multiline':False]
['text':'/ \brief A pseudo-domain for use in functions and','line_number':217,'multiline':False]
['text':'/ metafunctions that require a domain parameter. It','line_number':218,'multiline':False]
['text':'/ indicates that the domain of the parent node should','line_number':219,'multiline':False]
['text':'/ be inferred from the domains of the child nodes.','line_number':220,'multiline':False]
['text':'/','line_number':221,'multiline':False]
['text':'/ \attention \c deduce_domain is not itself a valid domain.','line_number':222,'multiline':False]
['text':'/','line_number':223,'multiline':False]
['text':'/ \brief Given a domain, a tag type and an argument list,','line_number':228,'multiline':False]
['text':'/ compute the type of the expression to generate. This is','line_number':229,'multiline':False]
['text':'/ either an instance of \c proto::expr\<\> or','line_number':230,'multiline':False]
['text':'/ \c proto::basic_expr\<\>.','line_number':231,'multiline':False]
['text':'/','line_number':232,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':239,'multiline':False]
['text':'/','line_number':240,'multiline':False]
['text':'/ A metafunction that returns \c mpl::true_','line_number':249,'multiline':False]
['text':'/ if the type \c T is the type of a Proto domain;','line_number':250,'multiline':False]
['text':'/ \c mpl::false_ otherwise. If \c T inherits from','line_number':251,'multiline':False]
['text':'/ \c proto::domain\<\>, \c is_domain\<T\> is','line_number':252,'multiline':False]
['text':'/ \c mpl::true_.','line_number':253,'multiline':False]
['text':' = void','line_number':254,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':259,'multiline':False]
['text':'/','line_number':260,'multiline':False]
['text':'/ A metafunction that returns the domain of','line_number':266,'multiline':False]
['text':'/ a given type. If \c T is a Proto expression','line_number':267,'multiline':False]
['text':'/ type, it returns that expression's associated','line_number':268,'multiline':False]
['text':'/ domain. If not, it returns','line_number':269,'multiline':False]
['text':'/ \c proto::default_domain.','line_number':270,'multiline':False]
['text':' = void','line_number':271,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':277,'multiline':False]
['text':'/','line_number':278,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':285,'multiline':False]
['text':'/','line_number':286,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':293,'multiline':False]
['text':'/','line_number':294,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':301,'multiline':False]
['text':'/','line_number':302,'multiline':False]
['text':'/ A metafunction that returns \c mpl::true_','line_number':309,'multiline':False]
['text':'/ if the type \c SubDomain is a sub-domain of','line_number':310,'multiline':False]
['text':'/ \c SuperDomain; \c mpl::false_ otherwise.','line_number':311,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':317,'multiline':False]
['text':'/','line_number':318,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':324,'multiline':False]
['text':'/','line_number':325,'multiline':False]
