['text':'==============================================================================','line_number':1,'multiline':False]
['text':'         Copyright 2003 - 2011  LASMEA UMR 6602 CNRS/Univ. Clermont II','line_number':2,'multiline':False]
['text':'         Copyright 2009 - 2011  LRI    UMR 8623 CNRS/Univ Paris Sud XI','line_number':3,'multiline':False]
['text':'         Copyright 2011         Eric Niebler','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'          Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'                 See accompanying file LICENSE.txt or copy at','line_number':7,'multiline':False]
['text':'                     http://www.boost.org/LICENSE_1_0.txt','line_number':8,'multiline':False]
['text':'==============================================================================','line_number':9,'multiline':False]
['text':'!
 * \file
 * \brief Defines the BOOST_PROTO_REMOVE_TYPENAME macro
 ','line_number':13,'multiline':True]
['text':'==============================================================================','line_number':23,'multiline':False]
['text':' Boost.Preprocessor author P. Mensodines confirmed on an Boost email thread','line_number':24,'multiline':False]
['text':' (subject ``check if a token is a keyword (was "BOOST_PP_IS_UNARY()")'')','line_number':25,'multiline':False]
['text':' that it is OK to used `PP_IS_UNARY()` to check if tokens match predefined','line_number':26,'multiline':False]
['text':' "keyword" as it is done by the macros below (even if `PP_IS_UNARY()` is','line_number':27,'multiline':False]
['text':' technically only part of Boost.Preprocessor private API).','line_number':28,'multiline':False]
['text':'==============================================================================','line_number':29,'multiline':False]
['text':'==============================================================================','line_number':31,'multiline':False]
['text':' `checking_prefix ## tokens` expand to unary (e.g., `(1)`) iff `tokens` start','line_number':32,'multiline':False]
['text':' with keyword to check.','line_number':33,'multiline':False]
['text':'==============================================================================','line_number':34,'multiline':False]
['text':'','line_number':37,'multiline':True]
['text':'==============================================================================','line_number':39,'multiline':False]
['text':' `is_front_macro(tokens)` is 1 iff `tokens` start with keyword to remove.','line_number':40,'multiline':False]
['text':' `removing_prefix ## <keyword-to-remove>` must expand to nothing.','line_number':41,'multiline':False]
['text':'==============================================================================','line_number':42,'multiline':False]
['text':' without EXPAND doesn't expand on MSVC ','line_number':44,'multiline':True]
['text':'','line_number':51,'multiline':True]
['text':' unary ','line_number':53,'multiline':True]
['text':' unary ','line_number':54,'multiline':True]
['text':' nothing ','line_number':55,'multiline':True]
['text':' nothing ','line_number':56,'multiline':True]
['text':'','line_number':60,'multiline':True]
['text':'==============================================================================','line_number':62,'multiline':False]
['text':'!
 * \ingroup preprocessor
 * For any symbol \c X, this macro returns the same symbol from which a potential
 * leading \c typename keyword has been removed. If no typename keyword is present,
 * this macros evaluates to \c X itself without error.
 *
 * The original implementation of this macro is from Lorenzo Caminiti.
 *
 * \param X Symbol to remove \c typename from
 ','line_number':63,'multiline':True]
['text':'==============================================================================','line_number':73,'multiline':False]
['text':'','line_number':80,'multiline':True]
