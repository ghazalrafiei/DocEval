['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file extends.hpp','line_number':2,'multiline':False]
['text':'/ Macros and a base class for defining end-user expression types','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':5,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' for offsetof','line_number':12,'multiline':False]
['text':' function 'xxx' marked as __forceinline not inlined','line_number':39,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':45,'multiline':False]
['text':'/','line_number':46,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':48,'multiline':False]
['text':'/','line_number':49,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':52,'multiline':False]
['text':'/','line_number':53,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':57,'multiline':False]
['text':'/','line_number':58,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':61,'multiline':False]
['text':'/','line_number':62,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':65,'multiline':False]
['text':'/','line_number':66,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':69,'multiline':False]
['text':'/','line_number':70,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':73,'multiline':False]
['text':'/','line_number':74,'multiline':False]
['text':'','line_number':104,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':106,'multiline':False]
['text':'/','line_number':107,'multiline':False]
['text':'','line_number':137,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':139,'multiline':False]
['text':'/','line_number':140,'multiline':False]
['text':'','line_number':143,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':145,'multiline':False]
['text':'/','line_number':146,'multiline':False]
['text':'','line_number':149,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':151,'multiline':False]
['text':'/','line_number':152,'multiline':False]
['text':'','line_number':156,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':158,'multiline':False]
['text':'/','line_number':159,'multiline':False]
['text':'','line_number':164,'multiline':True]
['text':'*< INTERNAL ONLY ','line_number':169,'multiline':True]
['text':'*< INTERNAL ONLY ','line_number':179,'multiline':True]
['text':'','line_number':212,'multiline':True]
['text':'*< INTERNAL ONLY ','line_number':217,'multiline':True]
['text':'','line_number':254,'multiline':True]
['text':' MSVC 8.0 and higher seem to need copy-assignment operator to be overloaded on *both*','line_number':256,'multiline':False]
['text':' const and non-const rhs arguments.','line_number':257,'multiline':False]
['text':'','line_number':262,'multiline':True]
['text':'','line_number':266,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':269,'multiline':False]
['text':'/','line_number':270,'multiline':False]
['text':'','line_number':307,'multiline':True]
['text':'','line_number':312,'multiline':True]
['text':'','line_number':317,'multiline':True]
['text':'','line_number':322,'multiline':True]
['text':'','line_number':327,'multiline':True]
['text':'','line_number':332,'multiline':True]
['text':'','line_number':337,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':339,'multiline':False]
['text':'/','line_number':340,'multiline':False]
['text':'','line_number':377,'multiline':True]
['text':'','line_number':382,'multiline':True]
['text':'','line_number':387,'multiline':True]
['text':'','line_number':392,'multiline':True]
['text':'/ INTERNAL ONLY','line_number':394,'multiline':False]
['text':'/','line_number':395,'multiline':False]
['text':'','line_number':412,'multiline':True]
['text':'','line_number':418,'multiline':True]
['text':'','line_number':423,'multiline':True]
['text':'','line_number':429,'multiline':True]
['text':'','line_number':439,'multiline':True]
['text':'','line_number':449,'multiline':True]
['text':'','line_number':459,'multiline':True]
['text':'','line_number':467,'multiline':True]
['text':'','line_number':473,'multiline':True]
['text':'','line_number':479,'multiline':True]
['text':'/ \brief Empty type to be used as a dummy template parameter of','line_number':483,'multiline':False]
['text':'/     POD expression wrappers. It allows argument-dependent lookup','line_number':484,'multiline':False]
['text':'/     to find Proto's operator overloads.','line_number':485,'multiline':False]
['text':'/','line_number':486,'multiline':False]
['text':'/ \c proto::is_proto_expr allows argument-dependent lookup','line_number':487,'multiline':False]
['text':'/     to find Proto's operator overloads. For example:','line_number':488,'multiline':False]
['text':'/','line_number':489,'multiline':False]
['text':'/ \code','line_number':490,'multiline':False]
['text':'/ template<typename T, typename Dummy = proto::is_proto_expr>','line_number':491,'multiline':False]
['text':'/ struct my_terminal','line_number':492,'multiline':False]
['text':'/ {','line_number':493,'multiline':False]
['text':'/     BOOST_PROTO_BASIC_EXTENDS(','line_number':494,'multiline':False]
['text':'/         typename proto::terminal<T>::type','line_number':495,'multiline':False]
['text':'/       , my_terminal<T>','line_number':496,'multiline':False]
['text':'/       , default_domain','line_number':497,'multiline':False]
['text':'/     )','line_number':498,'multiline':False]
['text':'/ };','line_number':499,'multiline':False]
['text':'/','line_number':500,'multiline':False]
['text':'/ // ...','line_number':501,'multiline':False]
['text':'/ my_terminal<int> _1, _2;','line_number':502,'multiline':False]
['text':'/ _1 + _2; // OK, uses proto::operator+','line_number':503,'multiline':False]
['text':'/ \endcode','line_number':504,'multiline':False]
['text':'/','line_number':505,'multiline':False]
['text':'/ Without the second \c Dummy template parameter, Proto's operator','line_number':506,'multiline':False]
['text':'/ overloads would not be considered by name lookup.','line_number':507,'multiline':False]
['text':'/ \brief extends\<\> class template for adding behaviors to a Proto expression template','line_number':511,'multiline':False]
['text':'/','line_number':512,'multiline':False]
['text':' = proto::default_domain','line_number':516,'multiline':False]
['text':' = Expr::proto_arity_c','line_number':517,'multiline':False]
['text':' Instead of using BOOST_PROTO_EXTENDS_FUNCTION, which uses','line_number':536,'multiline':False]
['text':' nested preprocessor loops, use file iteration here to generate','line_number':537,'multiline':False]
['text':' the operator() overloads, which is more efficient.','line_number':538,'multiline':False]
['text':'/ \brief extends\<\> class template for adding behaviors to a Proto expression template','line_number':542,'multiline':False]
['text':'/','line_number':543,'multiline':False]
['text':' Instead of using BOOST_PROTO_EXTENDS_FUNCTION, which uses','line_number':562,'multiline':False]
['text':' nested preprocessor loops, use file iteration here to generate','line_number':563,'multiline':False]
['text':' the operator() overloads, which is more efficient.','line_number':564,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':568,'multiline':False]
['text':'/','line_number':569,'multiline':False]
['text':'*< INTERNAL ONLY ','line_number':580,'multiline':True]
['text':'*< INTERNAL ONLY ','line_number':587,'multiline':True]
['text':' Instead of using BOOST_PROTO_EXTENDS_FUNCTION, which uses','line_number':592,'multiline':False]
['text':' nested preprocessor loops, use file iteration here to generate','line_number':593,'multiline':False]
['text':' the operator() overloads, which is more efficient.','line_number':594,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':621,'multiline':False]
['text':'/','line_number':622,'multiline':False]
['text':'','line_number':629,'multiline':True]
['text':'/ \brief For declaring virtual data members in an extension class.','line_number':631,'multiline':False]
['text':'/','line_number':632,'multiline':False]
['text':'','line_number':639,'multiline':True]
['text':'/ \brief For declaring virtual data members in an extension class.','line_number':641,'multiline':False]
['text':'/','line_number':642,'multiline':False]
['text':'','line_number':645,'multiline':True]
