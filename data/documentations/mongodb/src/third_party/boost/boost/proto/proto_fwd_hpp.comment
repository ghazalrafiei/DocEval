['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file proto_fwd.hpp','line_number':2,'multiline':False]
['text':'/ Forward declarations of all of proto's public types and functions.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':5,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' Proto can only use the decltype-based result_of if N3276 has been','line_number':97,'multiline':False]
['text':' implemented by the compiler.','line_number':98,'multiline':False]
['text':' See http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2011/n3276.pdf','line_number':99,'multiline':False]
['text':' Unless compiler support is there, use tr1_result_of instead of','line_number':105,'multiline':False]
['text':' result_of to avoid the problems addressed by N3276.','line_number':106,'multiline':False]
['text':' If we're using the decltype-based result_of, we need to be a bit','line_number':113,'multiline':False]
['text':' stricter about the return types of some functions.','line_number':114,'multiline':False]
['text':' qualifier applied to function type has no meaning; ignored','line_number':129,'multiline':False]
['text':' 'class' : multiple assignment operators specified','line_number':130,'multiline':False]
['text':' function 'xxx' marked as __forceinline not inlined','line_number':131,'multiline':False]
['text':' leave this undefined','line_number':154,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':214,'multiline':False]
['text':'/','line_number':215,'multiline':False]
['text':'','line_number':218,'multiline':True]
['text':'','line_number':245,'multiline':True]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':252,'multiline':False]
['text':' Operator tags','line_number':253,'multiline':False]
['text':' Fusion tags','line_number':307,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':319,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':322,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':344,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':368,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////////////','line_number':390,'multiline':False]
['text':' Boost bug https://svn.boost.org/trac/boost/ticket/4602','line_number':423,'multiline':False]
['text':'int const N = INT_MAX;','line_number':424,'multiline':False]
['text':' Generic expression metafunctions and','line_number':533,'multiline':False]
['text':' grammar elements','line_number':534,'multiline':False]
['text':' Specific expression metafunctions and','line_number':544,'multiline':False]
['text':' grammar elements, for convenience','line_number':545,'multiline':False]
['text':' Q: can we replace fold_tree with fold<flatten(_), state, fun> ?','line_number':821,'multiline':False]
['text':' A: once segmented Fusion works well.','line_number':822,'multiline':False]
['text':' _child2, _child3, _child4, ...','line_number':867,'multiline':False]
['text':' namespace boost::proto','line_number':890,'multiline':False]
