['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file arg.hpp','line_number':2,'multiline':False]
['text':'/ Contains definition of the argN transforms.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':5,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'/ \brief A PrimitiveTransform that returns the current expression','line_number':22,'multiline':False]
['text':'/ unmodified','line_number':23,'multiline':False]
['text':'/','line_number':24,'multiline':False]
['text':'/ Example:','line_number':25,'multiline':False]
['text':'/','line_number':26,'multiline':False]
['text':'/ \code','line_number':27,'multiline':False]
['text':'/ proto::terminal<int>::type i = {42};','line_number':28,'multiline':False]
['text':'/ proto::terminal<int>::type & j = proto::_expr()(i);','line_number':29,'multiline':False]
['text':'/ assert( boost::addressof(i) == boost::addressof(j) );','line_number':30,'multiline':False]
['text':'/ \endcode','line_number':31,'multiline':False]
['text':'/ Returns the current expression.','line_number':39,'multiline':False]
['text':'/ \param e The current expression.','line_number':40,'multiline':False]
['text':'/ \return \c e','line_number':41,'multiline':False]
['text':'/ \throw nothrow','line_number':42,'multiline':False]
['text':'/ \brief A PrimitiveTransform that returns the current state','line_number':55,'multiline':False]
['text':'/ unmodified','line_number':56,'multiline':False]
['text':'/','line_number':57,'multiline':False]
['text':'/ Example:','line_number':58,'multiline':False]
['text':'/','line_number':59,'multiline':False]
['text':'/ \code','line_number':60,'multiline':False]
['text':'/ proto::terminal<int>::type i = {42};','line_number':61,'multiline':False]
['text':'/ char ch = proto::_state()(i, 'a');','line_number':62,'multiline':False]
['text':'/ assert( ch == 'a' );','line_number':63,'multiline':False]
['text':'/ \endcode','line_number':64,'multiline':False]
['text':'/ Returns the current state.','line_number':72,'multiline':False]
['text':'/ \param s The current state.','line_number':73,'multiline':False]
['text':'/ \return \c s','line_number':74,'multiline':False]
['text':'/ \throw nothrow','line_number':75,'multiline':False]
['text':'/ \brief A PrimitiveTransform that returns the current data','line_number':88,'multiline':False]
['text':'/ unmodified','line_number':89,'multiline':False]
['text':'/','line_number':90,'multiline':False]
['text':'/ Example:','line_number':91,'multiline':False]
['text':'/','line_number':92,'multiline':False]
['text':'/ \code','line_number':93,'multiline':False]
['text':'/ proto::terminal<int>::type i = {42};','line_number':94,'multiline':False]
['text':'/ std::string str("hello");','line_number':95,'multiline':False]
['text':'/ std::string & data = proto::_data()(i, 'a', str);','line_number':96,'multiline':False]
['text':'/ assert( &str == &data );','line_number':97,'multiline':False]
['text':'/ \endcode','line_number':98,'multiline':False]
['text':'/ \brief A PrimitiveTransform that returns N-th child of the current','line_number':111,'multiline':False]
['text':'/ expression.','line_number':112,'multiline':False]
['text':'/','line_number':113,'multiline':False]
['text':'/ Example:','line_number':114,'multiline':False]
['text':'/','line_number':115,'multiline':False]
['text':'/ \code','line_number':116,'multiline':False]
['text':'/ proto::terminal<int>::type i = {42};','line_number':117,'multiline':False]
['text':'/ proto::terminal<int>::type & j = proto::_child_c<0>()(-i);','line_number':118,'multiline':False]
['text':'/ assert( boost::addressof(i) == boost::addressof(j) );','line_number':119,'multiline':False]
['text':'/ \endcode','line_number':120,'multiline':False]
['text':'/ Returns the N-th child of \c e','line_number':131,'multiline':False]
['text':'/ \pre <tt>arity_of\<Expr\>::value \> N</tt> ','line_number':132,'multiline':False]
['text':'/ \param e The current expression.','line_number':133,'multiline':False]
['text':'/ \return <tt>proto::child_c\<N\>(e)</tt>','line_number':134,'multiline':False]
['text':'/ \throw nothrow','line_number':135,'multiline':False]
['text':'/ \brief A PrimitiveTransform that returns the value of the','line_number':152,'multiline':False]
['text':'/ current terminal expression.','line_number':153,'multiline':False]
['text':'/','line_number':154,'multiline':False]
['text':'/ Example:','line_number':155,'multiline':False]
['text':'/','line_number':156,'multiline':False]
['text':'/ \code','line_number':157,'multiline':False]
['text':'/ proto::terminal<int>::type i = {42};','line_number':158,'multiline':False]
['text':'/ int j = proto::_value()(i);','line_number':159,'multiline':False]
['text':'/ assert( 42 == j );','line_number':160,'multiline':False]
['text':'/ \endcode','line_number':161,'multiline':False]
['text':'/ Returns the value of the specified terminal expression.','line_number':171,'multiline':False]
['text':'/ \pre <tt>arity_of\<Expr\>::value == 0</tt>.','line_number':172,'multiline':False]
['text':'/ \param e The current expression.','line_number':173,'multiline':False]
['text':'/ \return <tt>proto::value(e)</tt>','line_number':174,'multiline':False]
['text':'/ \throw nothrow','line_number':175,'multiline':False]
['text':'/ \brief A PrimitiveTransform that does nothing','line_number':192,'multiline':False]
['text':'/ and returns void.','line_number':193,'multiline':False]
['text':'/ Does nothing and returns void','line_number':201,'multiline':False]
['text':'/ \brief A unary CallableTransform that wraps its argument','line_number':211,'multiline':False]
['text':'/ in a \c boost::reference_wrapper\<\>.','line_number':212,'multiline':False]
['text':'/','line_number':213,'multiline':False]
['text':'/ Example:','line_number':214,'multiline':False]
['text':'/','line_number':215,'multiline':False]
['text':'/ \code','line_number':216,'multiline':False]
['text':'/ proto::terminal<int>::type i = {42};','line_number':217,'multiline':False]
['text':'/ boost::reference_wrapper<proto::terminal<int>::type> j','line_number':218,'multiline':False]
['text':'/     = proto::when<_, proto::_byref(_)>()(i);','line_number':219,'multiline':False]
['text':'/ assert( boost::addressof(i) == boost::addressof(j.get()) );','line_number':220,'multiline':False]
['text':'/ \endcode','line_number':221,'multiline':False]
['text':'/ Wrap the parameter \c t in a \c boost::reference_wrapper\<\>','line_number':239,'multiline':False]
['text':'/ \param t The object to wrap','line_number':240,'multiline':False]
['text':'/ \return <tt>boost::ref(t)</tt>','line_number':241,'multiline':False]
['text':'/ \throw nothrow','line_number':242,'multiline':False]
['text':'/ \overload','line_number':249,'multiline':False]
['text':'/','line_number':250,'multiline':False]
['text':'/ \brief A unary CallableTransform that strips references','line_number':258,'multiline':False]
['text':'/ and \c boost::reference_wrapper\<\> from its argument.','line_number':259,'multiline':False]
['text':'/','line_number':260,'multiline':False]
['text':'/ Example:','line_number':261,'multiline':False]
['text':'/','line_number':262,'multiline':False]
['text':'/ \code','line_number':263,'multiline':False]
['text':'/ proto::terminal<int>::type i = {42};','line_number':264,'multiline':False]
['text':'/ int j = 67;','line_number':265,'multiline':False]
['text':'/ int k = proto::when<_, proto::_byval(proto::_state)>()(i, boost::ref(j));','line_number':266,'multiline':False]
['text':'/ assert( 67 == k );','line_number':267,'multiline':False]
['text':'/ \endcode','line_number':268,'multiline':False]
['text':'/ \param t The object to unref','line_number':290,'multiline':False]
['text':'/ \return <tt>t</tt>','line_number':291,'multiline':False]
['text':'/ \throw nothrow','line_number':292,'multiline':False]
['text':'/ \overload','line_number':299,'multiline':False]
['text':'/','line_number':300,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':308,'multiline':False]
['text':'/','line_number':309,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':315,'multiline':False]
['text':'/','line_number':316,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':322,'multiline':False]
['text':'/','line_number':323,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':329,'multiline':False]
['text':'/','line_number':330,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':336,'multiline':False]
['text':'/','line_number':337,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':343,'multiline':False]
['text':'/','line_number':344,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':350,'multiline':False]
['text':'/','line_number':351,'multiline':False]
