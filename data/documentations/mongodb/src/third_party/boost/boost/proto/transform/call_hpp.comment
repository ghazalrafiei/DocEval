['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file call.hpp','line_number':2,'multiline':False]
['text':'/ Contains definition of the call<> transform.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':5,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' function 'xxx' marked as __forceinline not inlined','line_number':14,'multiline':False]
['text':'/ \brief Wrap \c PrimitiveTransform so that <tt>when\<\></tt> knows','line_number':36,'multiline':False]
['text':'/ it is callable. Requires that the parameter is actually a','line_number':37,'multiline':False]
['text':'/ PrimitiveTransform.','line_number':38,'multiline':False]
['text':'/','line_number':39,'multiline':False]
['text':'/ This form of <tt>call\<\></tt> is useful for annotating an','line_number':40,'multiline':False]
['text':'/ arbitrary PrimitiveTransform as callable when using it with','line_number':41,'multiline':False]
['text':'/ <tt>when\<\></tt>. Consider the following transform, which','line_number':42,'multiline':False]
['text':'/ is parameterized with another transform.','line_number':43,'multiline':False]
['text':'/','line_number':44,'multiline':False]
['text':'/ \code','line_number':45,'multiline':False]
['text':'/ template<typename Grammar>','line_number':46,'multiline':False]
['text':'/ struct Foo','line_number':47,'multiline':False]
['text':'/   : when<','line_number':48,'multiline':False]
['text':'/         unary_plus<Grammar>','line_number':49,'multiline':False]
['text':'/       , Grammar(_child)   // May or may not work.','line_number':50,'multiline':False]
['text':'/     >','line_number':51,'multiline':False]
['text':'/ {};','line_number':52,'multiline':False]
['text':'/ \endcode','line_number':53,'multiline':False]
['text':'/','line_number':54,'multiline':False]
['text':'/ The problem with the above is that <tt>when\<\></tt> may or','line_number':55,'multiline':False]
['text':'/ may not recognize \c Grammar as callable, depending on how','line_number':56,'multiline':False]
['text':'/ \c Grammar is implemented. (See <tt>is_callable\<\></tt> for','line_number':57,'multiline':False]
['text':'/ a discussion of this issue.) You can guard against','line_number':58,'multiline':False]
['text':'/ the issue by wrapping \c Grammar in <tt>call\<\></tt>, such','line_number':59,'multiline':False]
['text':'/ as:','line_number':60,'multiline':False]
['text':'/','line_number':61,'multiline':False]
['text':'/ \code','line_number':62,'multiline':False]
['text':'/ template<typename Grammar>','line_number':63,'multiline':False]
['text':'/ struct Foo','line_number':64,'multiline':False]
['text':'/   : when<','line_number':65,'multiline':False]
['text':'/         unary_plus<Grammar>','line_number':66,'multiline':False]
['text':'/       , call<Grammar>(_child)   // OK, this works','line_number':67,'multiline':False]
['text':'/     >','line_number':68,'multiline':False]
['text':'/ {};','line_number':69,'multiline':False]
['text':'/ \endcode','line_number':70,'multiline':False]
['text':'/','line_number':71,'multiline':False]
['text':'/ The above could also have been written as:','line_number':72,'multiline':False]
['text':'/','line_number':73,'multiline':False]
['text':'/ \code','line_number':74,'multiline':False]
['text':'/ template<typename Grammar>','line_number':75,'multiline':False]
['text':'/ struct Foo','line_number':76,'multiline':False]
['text':'/   : when<','line_number':77,'multiline':False]
['text':'/         unary_plus<Grammar>','line_number':78,'multiline':False]
['text':'/       , call<Grammar(_child)>   // OK, this works, too','line_number':79,'multiline':False]
['text':'/     >','line_number':80,'multiline':False]
['text':'/ {};','line_number':81,'multiline':False]
['text':'/ \endcode','line_number':82,'multiline':False]
['text':'/ \brief A specialization that treats function pointer Transforms as','line_number':88,'multiline':False]
['text':'/ if they were function type Transforms.','line_number':89,'multiline':False]
['text':'/','line_number':90,'multiline':False]
['text':'/ This specialization requires that \c Fun is actually a function type.','line_number':91,'multiline':False]
['text':'/','line_number':92,'multiline':False]
['text':'/ This specialization is required for nested transforms such as','line_number':93,'multiline':False]
['text':'/ <tt>call\<T0(T1(_))\></tt>. In C++, functions that are used as','line_number':94,'multiline':False]
['text':'/ parameters to other functions automatically decay to funtion','line_number':95,'multiline':False]
['text':'/ pointer types. In other words, the type <tt>T0(T1(_))</tt> is','line_number':96,'multiline':False]
['text':'/ indistinguishable from <tt>T0(T1(*)(_))</tt>. This specialization','line_number':97,'multiline':False]
['text':'/ is required to handle these nested function pointer type transforms','line_number':98,'multiline':False]
['text':'/ properly.','line_number':99,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':105,'multiline':False]
['text':'/ \brief Either call the PolymorphicFunctionObject with 0','line_number':111,'multiline':False]
['text':'/ arguments, or invoke the PrimitiveTransform with 3','line_number':112,'multiline':False]
['text':'/ arguments.','line_number':113,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':117,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':135,'multiline':False]
['text':'/ Either call the PolymorphicFunctionObject \c Fun with 0 arguments; or','line_number':141,'multiline':False]
['text':'/ invoke the PrimitiveTransform \c Fun with 3 arguments: the current','line_number':142,'multiline':False]
['text':'/ expression, state, and data.','line_number':143,'multiline':False]
['text':'/','line_number':144,'multiline':False]
['text':'/ If \c Fun is a nullary PolymorphicFunctionObject, return <tt>Fun()()</tt>.','line_number':145,'multiline':False]
['text':'/ Otherwise, return <tt>Fun()(e, s, d)</tt>.','line_number':146,'multiline':False]
['text':'/','line_number':147,'multiline':False]
['text':'/ \param e The current expression','line_number':148,'multiline':False]
['text':'/ \param s The current state','line_number':149,'multiline':False]
['text':'/ \param d An arbitrary data','line_number':150,'multiline':False]
['text':'/ If \c Fun is a nullary PolymorphicFunctionObject, \c type is a typedef','line_number':152,'multiline':False]
['text':'/ for <tt>boost::result_of\<Fun()\>::type</tt>. Otherwise, it is','line_number':153,'multiline':False]
['text':'/ a typedef for <tt>boost::result_of\<Fun(Expr, State, Data)\>::type</tt>.','line_number':154,'multiline':False]
['text':'/ \brief Either call the PolymorphicFunctionObject with 1','line_number':161,'multiline':False]
['text':'/ argument, or invoke the PrimitiveTransform with 3','line_number':162,'multiline':False]
['text':'/ arguments.','line_number':163,'multiline':False]
['text':'/ Let \c x be <tt>when\<_, A0\>()(e, s, d)</tt> and \c X','line_number':208,'multiline':False]
['text':'/ be the type of \c x.','line_number':209,'multiline':False]
['text':'/ If \c Fun is a unary PolymorphicFunctionObject that accepts \c x,','line_number':210,'multiline':False]
['text':'/ then \c type is a typedef for <tt>boost::result_of\<Fun(X)\>::type</tt>.','line_number':211,'multiline':False]
['text':'/ Otherwise, it is a typedef for <tt>boost::result_of\<Fun(X, State, Data)\>::type</tt>.','line_number':212,'multiline':False]
['text':'/ Either call the PolymorphicFunctionObject with 1 argument:','line_number':214,'multiline':False]
['text':'/ the result of applying the \c A0 transform; or','line_number':215,'multiline':False]
['text':'/ invoke the PrimitiveTransform with 3 arguments:','line_number':216,'multiline':False]
['text':'/ result of applying the \c A0 transform, the state, and the','line_number':217,'multiline':False]
['text':'/ data.','line_number':218,'multiline':False]
['text':'/','line_number':219,'multiline':False]
['text':'/ Let \c x be <tt>when\<_, A0\>()(e, s, d)</tt>.','line_number':220,'multiline':False]
['text':'/ If \c Fun is a unary PolymorphicFunctionObject that accepts \c x,','line_number':221,'multiline':False]
['text':'/ then return <tt>Fun()(x)</tt>. Otherwise, return','line_number':222,'multiline':False]
['text':'/ <tt>Fun()(x, s, d)</tt>.','line_number':223,'multiline':False]
['text':'/','line_number':224,'multiline':False]
['text':'/ \param e The current expression','line_number':225,'multiline':False]
['text':'/ \param s The current state','line_number':226,'multiline':False]
['text':'/ \param d An arbitrary data','line_number':227,'multiline':False]
['text':'/ \brief Either call the PolymorphicFunctionObject with 2','line_number':234,'multiline':False]
['text':'/ arguments, or invoke the PrimitiveTransform with 3','line_number':235,'multiline':False]
['text':'/ arguments.','line_number':236,'multiline':False]
['text':'/ Let \c x be <tt>when\<_, A0\>()(e, s, d)</tt> and \c X','line_number':285,'multiline':False]
['text':'/ be the type of \c x.','line_number':286,'multiline':False]
['text':'/ Let \c y be <tt>when\<_, A1\>()(e, s, d)</tt> and \c Y','line_number':287,'multiline':False]
['text':'/ be the type of \c y.','line_number':288,'multiline':False]
['text':'/ If \c Fun is a binary PolymorphicFunction object that accepts \c x','line_number':289,'multiline':False]
['text':'/ and \c y, then \c type is a typedef for','line_number':290,'multiline':False]
['text':'/ <tt>boost::result_of\<Fun(X, Y)\>::type</tt>. Otherwise, it is','line_number':291,'multiline':False]
['text':'/ a typedef for <tt>boost::result_of\<Fun(X, Y, Data)\>::type</tt>.','line_number':292,'multiline':False]
['text':'/ Either call the PolymorphicFunctionObject with 2 arguments:','line_number':294,'multiline':False]
['text':'/ the result of applying the \c A0 transform, and the','line_number':295,'multiline':False]
['text':'/ result of applying the \c A1 transform; or invoke the','line_number':296,'multiline':False]
['text':'/ PrimitiveTransform with 3 arguments: the result of applying','line_number':297,'multiline':False]
['text':'/ the \c A0 transform, the result of applying the \c A1','line_number':298,'multiline':False]
['text':'/ transform, and the data.','line_number':299,'multiline':False]
['text':'/','line_number':300,'multiline':False]
['text':'/ Let \c x be <tt>when\<_, A0\>()(e, s, d)</tt>.','line_number':301,'multiline':False]
['text':'/ Let \c y be <tt>when\<_, A1\>()(e, s, d)</tt>.','line_number':302,'multiline':False]
['text':'/ If \c Fun is a binary PolymorphicFunction object that accepts \c x','line_number':303,'multiline':False]
['text':'/ and \c y, return <tt>Fun()(x, y)</tt>. Otherwise, return','line_number':304,'multiline':False]
['text':'/ <tt>Fun()(x, y, d)</tt>.','line_number':305,'multiline':False]
['text':'/','line_number':306,'multiline':False]
['text':'/ \param e The current expression','line_number':307,'multiline':False]
['text':'/ \param s The current state','line_number':308,'multiline':False]
['text':'/ \param d An arbitrary data','line_number':309,'multiline':False]
['text':'/ \brief Call the PolymorphicFunctionObject or the','line_number':316,'multiline':False]
['text':'/ PrimitiveTransform with the current expression, state','line_number':317,'multiline':False]
['text':'/ and data, transformed according to \c A0, \c A1, and','line_number':318,'multiline':False]
['text':'/ \c A2, respectively.','line_number':319,'multiline':False]
['text':'/ Let \c x be <tt>when\<_, A0\>()(e, s, d)</tt>.','line_number':371,'multiline':False]
['text':'/ Let \c y be <tt>when\<_, A1\>()(e, s, d)</tt>.','line_number':372,'multiline':False]
['text':'/ Let \c z be <tt>when\<_, A2\>()(e, s, d)</tt>.','line_number':373,'multiline':False]
['text':'/ Return <tt>Fun()(x, y, z)</tt>.','line_number':374,'multiline':False]
['text':'/','line_number':375,'multiline':False]
['text':'/ \param e The current expression','line_number':376,'multiline':False]
['text':'/ \param s The current state','line_number':377,'multiline':False]
['text':'/ \param d An arbitrary data','line_number':378,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':388,'multiline':False]
['text':'/','line_number':389,'multiline':False]
['text':' namespace boost::proto','line_number':395,'multiline':False]
