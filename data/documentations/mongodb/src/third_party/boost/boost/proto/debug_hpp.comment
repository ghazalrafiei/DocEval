['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file debug.hpp','line_number':2,'multiline':False]
['text':'/ Utilities for debugging Proto expression trees','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':5,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'* \brief INTERNAL ONLY ','line_number':28,'multiline':True]
['text':'','line_number':33,'multiline':True]
['text':' copyable functor to pass by value to fusion::foreach','line_number':116,'multiline':False]
['text':'/ \brief Pretty-print a Proto expression tree.','line_number':185,'multiline':False]
['text':'/','line_number':186,'multiline':False]
['text':'/ A PolymorphicFunctionObject which accepts a Proto expression','line_number':187,'multiline':False]
['text':'/ tree and pretty-prints it to an \c ostream for debugging','line_number':188,'multiline':False]
['text':'/ purposes.','line_number':189,'multiline':False]
['text':'/ \param sout  The \c ostream to which the expression tree','line_number':196,'multiline':False]
['text':'/              will be written.','line_number':197,'multiline':False]
['text':'/ \param depth The starting indentation depth for this node.','line_number':198,'multiline':False]
['text':'/              Children nodes will be displayed at a starting','line_number':199,'multiline':False]
['text':'/              depth of <tt>depth+4</tt>.','line_number':200,'multiline':False]
['text':'/ \brief Pretty-print the current node in a Proto expression','line_number':206,'multiline':False]
['text':'/ tree.','line_number':207,'multiline':False]
['text':'/ \brief Pretty-print a Proto expression tree.','line_number':220,'multiline':False]
['text':'/','line_number':221,'multiline':False]
['text':'/ \note Equivalent to <tt>functional::display_expr(0, sout)(expr)</tt>','line_number':222,'multiline':False]
['text':'/ \param expr The Proto expression tree to pretty-print','line_number':223,'multiline':False]
['text':'/ \param sout The \c ostream to which the output should be','line_number':224,'multiline':False]
['text':'/             written. If not specified, defaults to','line_number':225,'multiline':False]
['text':'/             <tt>std::cout</tt>.','line_number':226,'multiline':False]
['text':'/ \overload','line_number':233,'multiline':False]
['text':'/','line_number':234,'multiline':False]
['text':'/ \brief Assert at compile time that a particular expression','line_number':241,'multiline':False]
['text':'/        matches the specified grammar.','line_number':242,'multiline':False]
['text':'/','line_number':243,'multiline':False]
['text':'/ \note Equivalent to <tt>BOOST_MPL_ASSERT((proto::matches\<Expr, Grammar\>))</tt>','line_number':244,'multiline':False]
['text':'/ \param expr The Proto expression to check againts <tt>Grammar</tt>','line_number':245,'multiline':False]
['text':'expr','line_number':247,'multiline':True]
['text':'/ \brief Assert at compile time that a particular expression','line_number':252,'multiline':False]
['text':'/        does not match the specified grammar.','line_number':253,'multiline':False]
['text':'/','line_number':254,'multiline':False]
['text':'/ \note Equivalent to <tt>BOOST_MPL_ASSERT_NOT((proto::matches\<Expr, Grammar\>))</tt>','line_number':255,'multiline':False]
['text':'/ \param expr The Proto expression to check againts <tt>Grammar</tt>','line_number':256,'multiline':False]
['text':'expr','line_number':258,'multiline':True]
['text':'/ \brief Assert at compile time that a particular expression','line_number':263,'multiline':False]
['text':'/        matches the specified grammar.','line_number':264,'multiline':False]
['text':'/','line_number':265,'multiline':False]
['text':'/ \note Equivalent to <tt>proto::assert_matches\<Grammar\>(Expr)</tt>','line_number':266,'multiline':False]
['text':'/ \param Expr The Proto expression to check againts <tt>Grammar</tt>','line_number':267,'multiline':False]
['text':'/ \param Grammar The grammar used to validate Expr.','line_number':268,'multiline':False]
['text':'/ \brief Assert at compile time that a particular expression','line_number':272,'multiline':False]
['text':'/        does not match the specified grammar.','line_number':273,'multiline':False]
['text':'/','line_number':274,'multiline':False]
['text':'/ \note Equivalent to <tt>proto::assert_matches_not\<Grammar\>(Expr)</tt>','line_number':275,'multiline':False]
['text':'/ \param Expr The Proto expression to check againts <tt>Grammar</tt>','line_number':276,'multiline':False]
['text':'/ \param Grammar The grammar used to validate Expr.','line_number':277,'multiline':False]
