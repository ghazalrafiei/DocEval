['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file traits.hpp','line_number':2,'multiline':False]
['text':'/ Contains definitions for child\<\>, child_c\<\>, left\<\>,','line_number':3,'multiline':False]
['text':'/ right\<\>, tag_of\<\>, and the helper functions child(), child_c(),','line_number':4,'multiline':False]
['text':'/ value(), left() and right().','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':7,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':' warning C4180: qualifier applied to function type has no meaning; ignored','line_number':38,'multiline':False]
['text':' function 'xxx' marked as __forceinline not inlined','line_number':40,'multiline':False]
['text':'/ \brief Boolean metafunction which detects whether a type is','line_number':73,'multiline':False]
['text':'/ a callable function object type or not.','line_number':74,'multiline':False]
['text':'/','line_number':75,'multiline':False]
['text':'/ <tt>is_callable\<\></tt> is used by the <tt>when\<\></tt> transform','line_number':76,'multiline':False]
['text':'/ to determine whether a function type <tt>R(A1,A2,...AN)</tt> is a','line_number':77,'multiline':False]
['text':'/ callable transform or an object transform. (The former are evaluated','line_number':78,'multiline':False]
['text':'/ using <tt>call\<\></tt> and the later with <tt>make\<\></tt>.) If','line_number':79,'multiline':False]
['text':'/ <tt>is_callable\<R\>::value</tt> is \c true, the function type is','line_number':80,'multiline':False]
['text':'/ a callable transform; otherwise, it is an object transform.','line_number':81,'multiline':False]
['text':'/','line_number':82,'multiline':False]
['text':'/ Unless specialized for a type \c T, <tt>is_callable\<T\>::value</tt>','line_number':83,'multiline':False]
['text':'/ is computed as follows:','line_number':84,'multiline':False]
['text':'/','line_number':85,'multiline':False]
['text':'/ \li If \c T is a template type <tt>X\<Y0,Y1,...YN\></tt>, where all \c Yx','line_number':86,'multiline':False]
['text':'/ are types for \c x in <tt>[0,N]</tt>, <tt>is_callable\<T\>::value</tt>','line_number':87,'multiline':False]
['text':'/ is <tt>is_same\<YN, proto::callable\>::value</tt>.','line_number':88,'multiline':False]
['text':'/ \li If \c T has a nested type \c proto_is_callable_ that is a typedef','line_number':89,'multiline':False]
['text':'/ for \c void, <tt>is_callable\<T\>::value</tt> is \c true. (Note: this is','line_number':90,'multiline':False]
['text':'/ the case for any type that derives from \c proto::callable.)','line_number':91,'multiline':False]
['text':'/ \li Otherwise, <tt>is_callable\<T\>::value</tt> is \c false.','line_number':92,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':98,'multiline':False]
['text':'/','line_number':99,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':105,'multiline':False]
['text':'/','line_number':106,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':112,'multiline':False]
['text':'/','line_number':113,'multiline':False]
['text':' work around GCC bug','line_number':120,'multiline':False]
['text':' work around GCC bug','line_number':126,'multiline':False]
['text':'= void','line_number':135,'multiline':True]
['text':'/ \brief Boolean metafunction which detects whether a type is','line_number':146,'multiline':False]
['text':'/ a PrimitiveTransform type or not.','line_number':147,'multiline':False]
['text':'/','line_number':148,'multiline':False]
['text':'/ <tt>is_transform\<\></tt> is used by the <tt>call\<\></tt> transform','line_number':149,'multiline':False]
['text':'/ to determine whether the function types <tt>R()</tt>, <tt>R(A1)</tt>,','line_number':150,'multiline':False]
['text':'/ and <tt>R(A1, A2)</tt> should be passed the expression, state and data','line_number':151,'multiline':False]
['text':'/ parameters (as needed).','line_number':152,'multiline':False]
['text':'/','line_number':153,'multiline':False]
['text':'/ Unless specialized for a type \c T, <tt>is_transform\<T\>::value</tt>','line_number':154,'multiline':False]
['text':'/ is computed as follows:','line_number':155,'multiline':False]
['text':'/','line_number':156,'multiline':False]
['text':'/ \li If \c T has a nested type \c proto_is_transform_ that is a typedef','line_number':157,'multiline':False]
['text':'/ for \c void, <tt>is_transform\<T\>::value</tt> is \c true. (Note: this is','line_number':158,'multiline':False]
['text':'/ the case for any type that derives from an instantiation of \c proto::transform.)','line_number':159,'multiline':False]
['text':'/ \li Otherwise, <tt>is_transform\<T\>::value</tt> is \c false.','line_number':160,'multiline':False]
['text':'= void','line_number':168,'multiline':True]
['text':'/ \brief A Boolean metafunction that indicates whether a type requires','line_number':189,'multiline':False]
['text':'/ aggregate initialization.','line_number':190,'multiline':False]
['text':'/','line_number':191,'multiline':False]
['text':'/ <tt>is_aggregate\<\></tt> is used by the <tt>make\<\></tt> transform','line_number':192,'multiline':False]
['text':'/ to determine how to construct an object of some type \c T, given some','line_number':193,'multiline':False]
['text':'/ initialization arguments <tt>a0,a1,...aN</tt>.','line_number':194,'multiline':False]
['text':'/ If <tt>is_aggregate\<T\>::value</tt> is \c true, then an object of','line_number':195,'multiline':False]
['text':'/ type T will be initialized as <tt>T t = {a0,a1,...aN};</tt>. Otherwise,','line_number':196,'multiline':False]
['text':'/ it will be initialized as <tt>T t(a0,a1,...aN)</tt>.','line_number':197,'multiline':False]
['text':'/ \brief A Boolean metafunction that indicates whether a given','line_number':203,'multiline':False]
['text':'/ type \c T is a Proto expression type.','line_number':204,'multiline':False]
['text':'/','line_number':205,'multiline':False]
['text':'/ If \c T has a nested type \c proto_is_expr_ that is a typedef','line_number':206,'multiline':False]
['text':'/ for \c void, <tt>is_expr\<T\>::value</tt> is \c true. (Note, this','line_number':207,'multiline':False]
['text':'/ is the case for <tt>proto::expr\<\></tt>, any type that is derived','line_number':208,'multiline':False]
['text':'/ from <tt>proto::extends\<\></tt> or that uses the','line_number':209,'multiline':False]
['text':'/ <tt>BOOST_PROTO_BASIC_EXTENDS()</tt> macro.) Otherwise,','line_number':210,'multiline':False]
['text':'/ <tt>is_expr\<T\>::value</tt> is \c false.','line_number':211,'multiline':False]
['text':' = void','line_number':212,'multiline':True]
['text':'/ \brief A Boolean metafunction that indicates whether a given','line_number':217,'multiline':False]
['text':'/ type \c T is a Proto expression type.','line_number':218,'multiline':False]
['text':'/','line_number':219,'multiline':False]
['text':'/ If \c T has a nested type \c proto_is_expr_ that is a typedef','line_number':220,'multiline':False]
['text':'/ for \c void, <tt>is_expr\<T\>::value</tt> is \c true. (Note, this','line_number':221,'multiline':False]
['text':'/ is the case for <tt>proto::expr\<\></tt>, any type that is derived','line_number':222,'multiline':False]
['text':'/ from <tt>proto::extends\<\></tt> or that uses the','line_number':223,'multiline':False]
['text':'/ <tt>BOOST_PROTO_BASIC_EXTENDS()</tt> macro.) Otherwise,','line_number':224,'multiline':False]
['text':'/ <tt>is_expr\<T\>::value</tt> is \c false.','line_number':225,'multiline':False]
['text':'/ \brief A metafunction that returns the tag type of a','line_number':236,'multiline':False]
['text':'/ Proto expression.','line_number':237,'multiline':False]
['text':'/ \brief A metafunction that returns the arity of a','line_number':250,'multiline':False]
['text':'/ Proto expression.','line_number':251,'multiline':False]
['text':'/ \brief A metafunction that computes the return type of the \c as_expr()','line_number':264,'multiline':False]
['text':'/ function.','line_number':265,'multiline':False]
['text':'= default_domain','line_number':266,'multiline':True]
['text':'/ \brief A metafunction that computes the return type of the \c as_child()','line_number':272,'multiline':False]
['text':'/ function.','line_number':273,'multiline':False]
['text':'= default_domain','line_number':274,'multiline':True]
['text':'/ \brief A metafunction that returns the type of the Nth child','line_number':280,'multiline':False]
['text':'/ of a Proto expression, where N is an MPL Integral Constant.','line_number':281,'multiline':False]
['text':'/','line_number':282,'multiline':False]
['text':'/ <tt>result_of::child\<Expr, N\></tt> is equivalent to','line_number':283,'multiline':False]
['text':'/ <tt>result_of::child_c\<Expr, N::value\></tt>.','line_number':284,'multiline':False]
['text':' = mpl::long_<0>','line_number':285,'multiline':True]
['text':'/ \brief A metafunction that returns the type of the value','line_number':290,'multiline':False]
['text':'/ of a terminal Proto expression.','line_number':291,'multiline':False]
['text':'/','line_number':292,'multiline':False]
['text':'/ Verify that we are actually operating on a terminal','line_number':296,'multiline':False]
['text':'/ The raw type of the Nth child as it is stored within','line_number':299,'multiline':False]
['text':'/ \c Expr. This may be a value or a reference','line_number':300,'multiline':False]
['text':'/ The "value" type of the child, suitable for storage by value,','line_number':303,'multiline':False]
['text':'/ computed as follows:','line_number':304,'multiline':False]
['text':'/ \li <tt>T const(&)[N]</tt> becomes <tt>T[N]</tt>','line_number':305,'multiline':False]
['text':'/ \li <tt>T[N]</tt> becomes <tt>T[N]</tt>','line_number':306,'multiline':False]
['text':'/ \li <tt>T(&)[N]</tt> becomes <tt>T[N]</tt>','line_number':307,'multiline':False]
['text':'/ \li <tt>R(&)(A0,...)</tt> becomes <tt>R(&)(A0,...)</tt>','line_number':308,'multiline':False]
['text':'/ \li <tt>T const &</tt> becomes <tt>T</tt>','line_number':309,'multiline':False]
['text':'/ \li <tt>T &</tt> becomes <tt>T</tt>','line_number':310,'multiline':False]
['text':'/ \li <tt>T</tt> becomes <tt>T</tt>','line_number':311,'multiline':False]
['text':'/ Verify that we are actually operating on a terminal','line_number':318,'multiline':False]
['text':'/ The raw type of the Nth child as it is stored within','line_number':321,'multiline':False]
['text':'/ \c Expr. This may be a value or a reference','line_number':322,'multiline':False]
['text':'/ The "reference" type of the child, suitable for storage by','line_number':325,'multiline':False]
['text':'/ reference, computed as follows:','line_number':326,'multiline':False]
['text':'/ \li <tt>T const(&)[N]</tt> becomes <tt>T const(&)[N]</tt>','line_number':327,'multiline':False]
['text':'/ \li <tt>T[N]</tt> becomes <tt>T(&)[N]</tt>','line_number':328,'multiline':False]
['text':'/ \li <tt>T(&)[N]</tt> becomes <tt>T(&)[N]</tt>','line_number':329,'multiline':False]
['text':'/ \li <tt>R(&)(A0,...)</tt> becomes <tt>R(&)(A0,...)</tt>','line_number':330,'multiline':False]
['text':'/ \li <tt>T const &</tt> becomes <tt>T const &</tt>','line_number':331,'multiline':False]
['text':'/ \li <tt>T &</tt> becomes <tt>T &</tt>','line_number':332,'multiline':False]
['text':'/ \li <tt>T</tt> becomes <tt>T &</tt>','line_number':333,'multiline':False]
['text':'/ Verify that we are actually operating on a terminal','line_number':340,'multiline':False]
['text':'/ The raw type of the Nth child as it is stored within','line_number':343,'multiline':False]
['text':'/ \c Expr. This may be a value or a reference','line_number':344,'multiline':False]
['text':'/ The "const reference" type of the child, suitable for storage by','line_number':347,'multiline':False]
['text':'/ const reference, computed as follows:','line_number':348,'multiline':False]
['text':'/ \li <tt>T const(&)[N]</tt> becomes <tt>T const(&)[N]</tt>','line_number':349,'multiline':False]
['text':'/ \li <tt>T[N]</tt> becomes <tt>T const(&)[N]</tt>','line_number':350,'multiline':False]
['text':'/ \li <tt>T(&)[N]</tt> becomes <tt>T(&)[N]</tt>','line_number':351,'multiline':False]
['text':'/ \li <tt>R(&)(A0,...)</tt> becomes <tt>R(&)(A0,...)</tt>','line_number':352,'multiline':False]
['text':'/ \li <tt>T const &</tt> becomes <tt>T const &</tt>','line_number':353,'multiline':False]
['text':'/ \li <tt>T &</tt> becomes <tt>T &</tt>','line_number':354,'multiline':False]
['text':'/ \li <tt>T</tt> becomes <tt>T const &</tt>','line_number':355,'multiline':False]
['text':'/ \brief A metafunction that returns the type of the left child','line_number':359,'multiline':False]
['text':'/ of a binary Proto expression.','line_number':360,'multiline':False]
['text':'/','line_number':361,'multiline':False]
['text':'/ <tt>result_of::left\<Expr\></tt> is equivalent to','line_number':362,'multiline':False]
['text':'/ <tt>result_of::child_c\<Expr, 0\></tt>.','line_number':363,'multiline':False]
['text':'/ \brief A metafunction that returns the type of the right child','line_number':369,'multiline':False]
['text':'/ of a binary Proto expression.','line_number':370,'multiline':False]
['text':'/','line_number':371,'multiline':False]
['text':'/ <tt>result_of::right\<Expr\></tt> is equivalent to','line_number':372,'multiline':False]
['text':'/ <tt>result_of::child_c\<Expr, 1\></tt>.','line_number':373,'multiline':False]
['text':' namespace result_of','line_number':379,'multiline':False]
['text':'/ \brief A metafunction for generating terminal expression types,','line_number':381,'multiline':False]
['text':'/ a grammar element for matching terminal expressions, and a','line_number':382,'multiline':False]
['text':'/ PrimitiveTransform that returns the current expression unchanged.','line_number':383,'multiline':False]
['text':'/ \param e The current expression','line_number':396,'multiline':False]
['text':'/ \pre <tt>matches\<Expr, terminal\<T\> \>::value</tt> is \c true.','line_number':397,'multiline':False]
['text':'/ \return \c e','line_number':398,'multiline':False]
['text':'/ \throw nothrow','line_number':399,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':412,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':414,'multiline':False]
['text':'/ \brief A metafunction for generating ternary conditional expression types,','line_number':418,'multiline':False]
['text':'/ a grammar element for matching ternary conditional expressions, and a','line_number':419,'multiline':False]
['text':'/ PrimitiveTransform that dispatches to the <tt>pass_through\<\></tt>','line_number':420,'multiline':False]
['text':'/ transform.','line_number':421,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':434,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':436,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':438,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':440,'multiline':False]
['text':'/ \brief A metafunction for generating nullary expression types with a','line_number':444,'multiline':False]
['text':'/ specified tag type,','line_number':445,'multiline':False]
['text':'/ a grammar element for matching nullary expressions, and a','line_number':446,'multiline':False]
['text':'/ PrimitiveTransform that returns the current expression unchanged.','line_number':447,'multiline':False]
['text':'/','line_number':448,'multiline':False]
['text':'/ Use <tt>nullary_expr\<_, _\></tt> as a grammar element to match any','line_number':449,'multiline':False]
['text':'/ nullary expression.','line_number':450,'multiline':False]
['text':'/ \param e The current expression','line_number':463,'multiline':False]
['text':'/ \pre <tt>matches\<Expr, nullary_expr\<Tag, T\> \>::value</tt> is \c true.','line_number':464,'multiline':False]
['text':'/ \return \c e','line_number':465,'multiline':False]
['text':'/ \throw nothrow','line_number':466,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':479,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':481,'multiline':False]
['text':'/ \brief A metafunction for generating unary expression types with a','line_number':485,'multiline':False]
['text':'/ specified tag type,','line_number':486,'multiline':False]
['text':'/ a grammar element for matching unary expressions, and a','line_number':487,'multiline':False]
['text':'/ PrimitiveTransform that dispatches to the <tt>pass_through\<\></tt>','line_number':488,'multiline':False]
['text':'/ transform.','line_number':489,'multiline':False]
['text':'/','line_number':490,'multiline':False]
['text':'/ Use <tt>unary_expr\<_, _\></tt> as a grammar element to match any','line_number':491,'multiline':False]
['text':'/ unary expression.','line_number':492,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':505,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':507,'multiline':False]
['text':'/ \brief A metafunction for generating binary expression types with a','line_number':511,'multiline':False]
['text':'/ specified tag type,','line_number':512,'multiline':False]
['text':'/ a grammar element for matching binary expressions, and a','line_number':513,'multiline':False]
['text':'/ PrimitiveTransform that dispatches to the <tt>pass_through\<\></tt>','line_number':514,'multiline':False]
['text':'/ transform.','line_number':515,'multiline':False]
['text':'/','line_number':516,'multiline':False]
['text':'/ Use <tt>binary_expr\<_, _, _\></tt> as a grammar element to match any','line_number':517,'multiline':False]
['text':'/ binary expression.','line_number':518,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':531,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':533,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':535,'multiline':False]
['text':'','line_number':555,'multiline':True]
['text':'','line_number':574,'multiline':True]
['text':'/ \brief A callable PolymorphicFunctionObject that is','line_number':628,'multiline':False]
['text':'/ equivalent to the \c as_expr() function.','line_number':629,'multiline':False]
['text':' = default_domain','line_number':630,'multiline':True]
['text':'/ \brief Wrap an object in a Proto terminal if it isn't a','line_number':650,'multiline':False]
['text':'/ Proto expression already.','line_number':651,'multiline':False]
['text':'/ \param t The object to wrap.','line_number':652,'multiline':False]
['text':'/ \return <tt>proto::as_expr\<Domain\>(t)</tt>','line_number':653,'multiline':False]
['text':'/ \overload','line_number':662,'multiline':False]
['text':'/','line_number':663,'multiline':False]
['text':'/ \brief A callable PolymorphicFunctionObject that is','line_number':691,'multiline':False]
['text':'/ equivalent to the \c as_child() function.','line_number':692,'multiline':False]
['text':' = default_domain','line_number':693,'multiline':True]
['text':'/ \brief Wrap an object in a Proto terminal if it isn't a','line_number':713,'multiline':False]
['text':'/ Proto expression already.','line_number':714,'multiline':False]
['text':'/ \param t The object to wrap.','line_number':715,'multiline':False]
['text':'/ \return <tt>proto::as_child\<Domain\>(t)</tt>','line_number':716,'multiline':False]
['text':'/ \overload','line_number':725,'multiline':False]
['text':'/','line_number':726,'multiline':False]
['text':'/ \brief A callable PolymorphicFunctionObject that is','line_number':736,'multiline':False]
['text':'/ equivalent to the \c child_c() function.','line_number':737,'multiline':False]
['text':'/ \brief Return the Nth child of the given expression.','line_number':752,'multiline':False]
['text':'/ \param expr The expression node.','line_number':753,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true','line_number':754,'multiline':False]
['text':'/ \pre <tt>N \< Expr::proto_arity::value</tt>','line_number':755,'multiline':False]
['text':'/ \return <tt>proto::child_c\<N\>(expr)</tt>','line_number':756,'multiline':False]
['text':'/ \throw nothrow','line_number':757,'multiline':False]
['text':'/ \overload','line_number':766,'multiline':False]
['text':'/','line_number':767,'multiline':False]
['text':'/ \brief A callable PolymorphicFunctionObject that is','line_number':777,'multiline':False]
['text':'/ equivalent to the \c child() function.','line_number':778,'multiline':False]
['text':'/','line_number':779,'multiline':False]
['text':'/ A callable PolymorphicFunctionObject that is','line_number':780,'multiline':False]
['text':'/ equivalent to the \c child() function. \c N is required','line_number':781,'multiline':False]
['text':'/ to be an MPL Integral Constant.','line_number':782,'multiline':False]
['text':' = mpl::long_<0>','line_number':783,'multiline':True]
['text':'/ \brief Return the Nth child of the given expression.','line_number':797,'multiline':False]
['text':'/ \param expr The expression node.','line_number':798,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true','line_number':799,'multiline':False]
['text':'/ \pre <tt>N::value \< Expr::proto_arity::value</tt>','line_number':800,'multiline':False]
['text':'/ \return <tt>proto::child\<N\>(expr)</tt>','line_number':801,'multiline':False]
['text':'/ \throw nothrow','line_number':802,'multiline':False]
['text':'/ \overload','line_number':811,'multiline':False]
['text':'/','line_number':812,'multiline':False]
['text':'/ \brief A callable PolymorphicFunctionObject that is','line_number':822,'multiline':False]
['text':'/ equivalent to the \c value() function.','line_number':823,'multiline':False]
['text':'/ \brief Return the value of the given terminal expression.','line_number':837,'multiline':False]
['text':'/ \param expr The terminal expression node.','line_number':838,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true','line_number':839,'multiline':False]
['text':'/ \pre <tt>0 == Expr::proto_arity::value</tt>','line_number':840,'multiline':False]
['text':'/ \return <tt>proto::value(expr)</tt>','line_number':841,'multiline':False]
['text':'/ \throw nothrow','line_number':842,'multiline':False]
['text':'/ \overload','line_number':851,'multiline':False]
['text':'/','line_number':852,'multiline':False]
['text':'/ \brief A callable PolymorphicFunctionObject that is','line_number':862,'multiline':False]
['text':'/ equivalent to the \c left() function.','line_number':863,'multiline':False]
['text':'/ \brief Return the left child of the given binary expression.','line_number':877,'multiline':False]
['text':'/ \param expr The expression node.','line_number':878,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true','line_number':879,'multiline':False]
['text':'/ \pre <tt>2 == Expr::proto_arity::value</tt>','line_number':880,'multiline':False]
['text':'/ \return <tt>proto::left(expr)</tt>','line_number':881,'multiline':False]
['text':'/ \throw nothrow','line_number':882,'multiline':False]
['text':'/ \overload','line_number':891,'multiline':False]
['text':'/','line_number':892,'multiline':False]
['text':'/ \brief A callable PolymorphicFunctionObject that is','line_number':902,'multiline':False]
['text':'/ equivalent to the \c right() function.','line_number':903,'multiline':False]
['text':'/ \brief Return the right child of the given binary expression.','line_number':917,'multiline':False]
['text':'/ \param expr The expression node.','line_number':918,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true','line_number':919,'multiline':False]
['text':'/ \pre <tt>2 == Expr::proto_arity::value</tt>','line_number':920,'multiline':False]
['text':'/ \return <tt>proto::right(expr)</tt>','line_number':921,'multiline':False]
['text':'/ \throw nothrow','line_number':922,'multiline':False]
['text':'/ \brief A function that wraps non-Proto expression types in Proto','line_number':942,'multiline':False]
['text':'/ terminals and leaves Proto expression types alone.','line_number':943,'multiline':False]
['text':'/','line_number':944,'multiline':False]
['text':'/ The <tt>as_expr()</tt> function turns objects into Proto terminals if','line_number':945,'multiline':False]
['text':'/ they are not Proto expression types already. Non-Proto types are','line_number':946,'multiline':False]
['text':'/ held by value, if possible. Types which are already Proto types are','line_number':947,'multiline':False]
['text':'/ left alone and returned by reference.','line_number':948,'multiline':False]
['text':'/','line_number':949,'multiline':False]
['text':'/ This function can be called either with an explicitly specified','line_number':950,'multiline':False]
['text':'/ \c Domain parameter (i.e., <tt>as_expr\<Domain\>(t)</tt>), or','line_number':951,'multiline':False]
['text':'/ without (i.e., <tt>as_expr(t)</tt>). If no domain is','line_number':952,'multiline':False]
['text':'/ specified, \c default_domain is assumed.','line_number':953,'multiline':False]
['text':'/','line_number':954,'multiline':False]
['text':'/ If <tt>is_expr\<T\>::value</tt> is \c true, then the argument is','line_number':955,'multiline':False]
['text':'/ returned unmodified, by reference. Otherwise, the argument is wrapped','line_number':956,'multiline':False]
['text':'/ in a Proto terminal expression node according to the following rules.','line_number':957,'multiline':False]
['text':'/ If \c T is a function type, let \c A be <tt>T &</tt>. Otherwise, let','line_number':958,'multiline':False]
['text':'/ \c A be the type \c T stripped of cv-qualifiers. Then, \c as_expr()','line_number':959,'multiline':False]
['text':'/ returns <tt>Domain()(terminal\<A\>::type::make(t))</tt>.','line_number':960,'multiline':False]
['text':'/','line_number':961,'multiline':False]
['text':'/ \param t The object to wrap.','line_number':962,'multiline':False]
['text':'/ \overload','line_number':971,'multiline':False]
['text':'/','line_number':972,'multiline':False]
['text':'/ \overload','line_number':981,'multiline':False]
['text':'/','line_number':982,'multiline':False]
['text':'/ \overload','line_number':991,'multiline':False]
['text':'/','line_number':992,'multiline':False]
['text':'/ \brief A function that wraps non-Proto expression types in Proto','line_number':1001,'multiline':False]
['text':'/ terminals (by reference) and returns Proto expression types by','line_number':1002,'multiline':False]
['text':'/ reference','line_number':1003,'multiline':False]
['text':'/','line_number':1004,'multiline':False]
['text':'/ The <tt>as_child()</tt> function turns objects into Proto terminals if','line_number':1005,'multiline':False]
['text':'/ they are not Proto expression types already. Non-Proto types are','line_number':1006,'multiline':False]
['text':'/ held by reference. Types which are already Proto types are simply','line_number':1007,'multiline':False]
['text':'/ returned as-is.','line_number':1008,'multiline':False]
['text':'/','line_number':1009,'multiline':False]
['text':'/ This function can be called either with an explicitly specified','line_number':1010,'multiline':False]
['text':'/ \c Domain parameter (i.e., <tt>as_child\<Domain\>(t)</tt>), or','line_number':1011,'multiline':False]
['text':'/ without (i.e., <tt>as_child(t)</tt>). If no domain is','line_number':1012,'multiline':False]
['text':'/ specified, \c default_domain is assumed.','line_number':1013,'multiline':False]
['text':'/','line_number':1014,'multiline':False]
['text':'/ If <tt>is_expr\<T\>::value</tt> is \c true, then the argument is','line_number':1015,'multiline':False]
['text':'/ returned as-is. Otherwise, \c as_child() returns','line_number':1016,'multiline':False]
['text':'/ <tt>Domain()(terminal\<T &\>::type::make(t))</tt>.','line_number':1017,'multiline':False]
['text':'/','line_number':1018,'multiline':False]
['text':'/ \param t The object to wrap.','line_number':1019,'multiline':False]
['text':'/ \overload','line_number':1028,'multiline':False]
['text':'/','line_number':1029,'multiline':False]
['text':'/ \overload','line_number':1038,'multiline':False]
['text':'/','line_number':1039,'multiline':False]
['text':'/ \overload','line_number':1048,'multiline':False]
['text':'/','line_number':1049,'multiline':False]
['text':'/ \brief Return the Nth child of the specified Proto expression.','line_number':1058,'multiline':False]
['text':'/','line_number':1059,'multiline':False]
['text':'/ Return the Nth child of the specified Proto expression. If','line_number':1060,'multiline':False]
['text':'/ \c N is not specified, as in \c child(expr), then \c N is assumed','line_number':1061,'multiline':False]
['text':'/ to be <tt>mpl::long_\<0\></tt>. The child is returned by','line_number':1062,'multiline':False]
['text':'/ reference.','line_number':1063,'multiline':False]
['text':'/','line_number':1064,'multiline':False]
['text':'/ \param expr The Proto expression.','line_number':1065,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true.','line_number':1066,'multiline':False]
['text':'/ \pre \c N is an MPL Integral Constant.','line_number':1067,'multiline':False]
['text':'/ \pre <tt>N::value \< Expr::proto_arity::value</tt>','line_number':1068,'multiline':False]
['text':'/ \throw nothrow','line_number':1069,'multiline':False]
['text':'/ \return A reference to the Nth child','line_number':1070,'multiline':False]
['text':'/ \overload','line_number':1079,'multiline':False]
['text':'/','line_number':1080,'multiline':False]
['text':'/ \overload','line_number':1089,'multiline':False]
['text':'/','line_number':1090,'multiline':False]
['text':'/ \overload','line_number':1099,'multiline':False]
['text':'/','line_number':1100,'multiline':False]
['text':'/ \brief Return the Nth child of the specified Proto expression.','line_number':1109,'multiline':False]
['text':'/','line_number':1110,'multiline':False]
['text':'/ Return the Nth child of the specified Proto expression. The child','line_number':1111,'multiline':False]
['text':'/ is returned by reference.','line_number':1112,'multiline':False]
['text':'/','line_number':1113,'multiline':False]
['text':'/ \param expr The Proto expression.','line_number':1114,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true.','line_number':1115,'multiline':False]
['text':'/ \pre <tt>N \< Expr::proto_arity::value</tt>','line_number':1116,'multiline':False]
['text':'/ \throw nothrow','line_number':1117,'multiline':False]
['text':'/ \return A reference to the Nth child','line_number':1118,'multiline':False]
['text':'/ \overload','line_number':1127,'multiline':False]
['text':'/','line_number':1128,'multiline':False]
['text':'/ \brief Return the value stored within the specified Proto','line_number':1137,'multiline':False]
['text':'/ terminal expression.','line_number':1138,'multiline':False]
['text':'/','line_number':1139,'multiline':False]
['text':'/ Return the value stored within the specified Proto','line_number':1140,'multiline':False]
['text':'/ terminal expression. The value is returned by','line_number':1141,'multiline':False]
['text':'/ reference.','line_number':1142,'multiline':False]
['text':'/','line_number':1143,'multiline':False]
['text':'/ \param expr The Proto terminal expression.','line_number':1144,'multiline':False]
['text':'/ \pre <tt>N::value == 0</tt>','line_number':1145,'multiline':False]
['text':'/ \throw nothrow','line_number':1146,'multiline':False]
['text':'/ \return A reference to the terminal's value','line_number':1147,'multiline':False]
['text':'/ \overload','line_number':1156,'multiline':False]
['text':'/','line_number':1157,'multiline':False]
['text':'/ \brief Return the left child of the specified binary Proto','line_number':1166,'multiline':False]
['text':'/ expression.','line_number':1167,'multiline':False]
['text':'/','line_number':1168,'multiline':False]
['text':'/ Return the left child of the specified binary Proto expression. The','line_number':1169,'multiline':False]
['text':'/ child is returned by reference.','line_number':1170,'multiline':False]
['text':'/','line_number':1171,'multiline':False]
['text':'/ \param expr The Proto expression.','line_number':1172,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true.','line_number':1173,'multiline':False]
['text':'/ \pre <tt>2 == Expr::proto_arity::value</tt>','line_number':1174,'multiline':False]
['text':'/ \throw nothrow','line_number':1175,'multiline':False]
['text':'/ \return A reference to the left child','line_number':1176,'multiline':False]
['text':'/ \overload','line_number':1185,'multiline':False]
['text':'/','line_number':1186,'multiline':False]
['text':'/ \brief Return the right child of the specified binary Proto','line_number':1195,'multiline':False]
['text':'/ expression.','line_number':1196,'multiline':False]
['text':'/','line_number':1197,'multiline':False]
['text':'/ Return the right child of the specified binary Proto expression. The','line_number':1198,'multiline':False]
['text':'/ child is returned by reference.','line_number':1199,'multiline':False]
['text':'/','line_number':1200,'multiline':False]
['text':'/ \param expr The Proto expression.','line_number':1201,'multiline':False]
['text':'/ \pre <tt>is_expr\<Expr\>::value</tt> is \c true.','line_number':1202,'multiline':False]
['text':'/ \pre <tt>2 == Expr::proto_arity::value</tt>','line_number':1203,'multiline':False]
['text':'/ \throw nothrow','line_number':1204,'multiline':False]
['text':'/ \return A reference to the right child','line_number':1205,'multiline':False]
['text':'/ \overload','line_number':1214,'multiline':False]
['text':'/','line_number':1215,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':1224,'multiline':False]
['text':'/','line_number':1225,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':1231,'multiline':False]
['text':'/','line_number':1232,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':1238,'multiline':False]
['text':'/','line_number':1239,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':1245,'multiline':False]
['text':'/','line_number':1246,'multiline':False]
