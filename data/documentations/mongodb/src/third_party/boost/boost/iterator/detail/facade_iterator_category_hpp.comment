['text':' Copyright David Abrahams 2003. Use, modification and distribution is','line_number':1,'multiline':False]
['text':' subject to the Boost Software License, Version 1.0. (See accompanying','line_number':2,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':3,'multiline':False]
['text':' used in iterator_tag inheritance logic','line_number':11,'multiline':False]
['text':' try to keep this last','line_number':25,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' iterator_category deduction for iterator_facade','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Using inheritance for only input_iterator_tag helps to avoid','line_number':45,'multiline':False]
['text':' ambiguities when a stdlib implementation dispatches on a','line_number':46,'multiline':False]
['text':' function which is overloaded on both input_iterator_tag and','line_number':47,'multiline':False]
['text':' output_iterator_tag, as STLPort does, in its __valid_range','line_number':48,'multiline':False]
['text':' function.  I claim it's better to avoid the ambiguity in these','line_number':49,'multiline':False]
['text':' cases.','line_number':50,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':' True iff the user has explicitly disabled writability of this','line_number':58,'multiline':False]
['text':' iterator.  Pass the iterator_facade's Value parameter and its','line_number':59,'multiline':False]
['text':' nested ::reference type.','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' Adding Thomas' logic?','line_number':64,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':' Convert an iterator_facade's traversal category, Value parameter,','line_number':77,'multiline':False]
['text':' and ::reference type to an appropriate old-style category.','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':' Due to changeset 21683, this now never results in a category convertible','line_number':80,'multiline':False]
['text':' to output_iterator_tag.','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' Change at: https://svn.boost.org/trac/boost/changeset/21683','line_number':83,'multiline':False]
['text':' check for readability','line_number':104,'multiline':False]
['text':' True iff T is convertible to an old-style iterator category.','line_number':114,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':' A composite iterator_category tag convertible to Category (a pure','line_number':130,'multiline':False]
['text':' old-style category) and Traversal (a pure traversal tag).','line_number':131,'multiline':False]
['text':' Traversal must be a strict increase of the traversal power given by','line_number':132,'multiline':False]
['text':' Category.','line_number':133,'multiline':False]
['text':'','line_number':134,'multiline':False]
['text':' Make sure this isn't used to build any categories where','line_number':139,'multiline':False]
['text':' convertibility to Traversal is redundant.  Should just use the','line_number':140,'multiline':False]
['text':' Category element in that case.','line_number':141,'multiline':False]
['text':' Computes an iterator_category tag whose traversal is Traversal and','line_number':156,'multiline':False]
['text':' which is appropriate for an iterator','line_number':157,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':' Compute an iterator_category for iterator_facade','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':' old-style categories are fine as-is','line_number':184,'multiline':False]
['text':' namespace boost::iterators::detail','line_number':190,'multiline':False]
['text':' FACADE_ITERATOR_CATEGORY_DWA20031118_HPP','line_number':194,'multiline':False]
