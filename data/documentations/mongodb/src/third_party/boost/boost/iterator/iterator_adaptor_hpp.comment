['text':' (C) Copyright David Abrahams 2002.','line_number':1,'multiline':False]
['text':' (C) Copyright Jeremy Siek    2002.','line_number':2,'multiline':False]
['text':' (C) Copyright Thomas Witt    2002.','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' Used as a default template argument internally, merely to','line_number':37,'multiline':False]
['text':' indicate "use the default", this can also be passed by users','line_number':38,'multiline':False]
['text':' explicitly in order to specify that the default should be used.','line_number':39,'multiline':False]
['text':' namespace iterators','line_number':42,'multiline':False]
['text':' the incompleteness of use_default causes massive problems for','line_number':44,'multiline':False]
['text':' is_convertible (naturally).  This workaround is fortunately not','line_number':45,'multiline':False]
['text':' needed for vc6/vc7.','line_number':46,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' Result type used in enable_if_convertible meta function.','line_number':57,'multiline':False]
['text':' This can be an incomplete type, as only pointers to','line_number':58,'multiline':False]
['text':' enable_if_convertible< ... >::type are used.','line_number':59,'multiline':False]
['text':' We could have used void for this, but conversion to','line_number':60,'multiline':False]
['text':' void* is just to easy.','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':' enable_if for use in adapted iterators constructors.','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' In order to provide interoperability between adapted constant and','line_number':70,'multiline':False]
['text':' mutable iterators, adapted iterators will usually provide templated','line_number':71,'multiline':False]
['text':' conversion constructors of the following form','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' template <class BaseIterator>','line_number':74,'multiline':False]
['text':' class adapted_iterator :','line_number':75,'multiline':False]
['text':'   public iterator_adaptor< adapted_iterator<Iterator>, Iterator >','line_number':76,'multiline':False]
['text':' {','line_number':77,'multiline':False]
['text':' public:','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':'   ...','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':'   template <class OtherIterator>','line_number':82,'multiline':False]
['text':'   adapted_iterator(','line_number':83,'multiline':False]
['text':'       OtherIterator const& it','line_number':84,'multiline':False]
['text':'     , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0);','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':'   ...','line_number':87,'multiline':False]
['text':' };','line_number':88,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':' enable_if_convertible is used to remove those overloads from the overload','line_number':90,'multiline':False]
['text':' set that cannot be instantiated. For all practical purposes only overloads','line_number':91,'multiline':False]
['text':' for constant/mutable interaction will remain. This has the advantage that','line_number':92,'multiline':False]
['text':' meta functions like boost::is_convertible do not return false positives,','line_number':93,'multiline':False]
['text':' as they can only look at the signature of the conversion constructor','line_number':94,'multiline':False]
['text':' and not at the actual instantiation.','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':' enable_if_interoperable can be safely used in user code. It falls back to','line_number':97,'multiline':False]
['text':' always enabled for compilers that don't support enable_if or is_convertible.','line_number':98,'multiline':False]
['text':' There is no need for compiler specific workarounds in user code.','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' The operators implementation relies on boost::is_convertible not returning','line_number':101,'multiline':False]
['text':' false positives for user/library defined iterator types. See comments','line_number':102,'multiline':False]
['text':' on operator implementation for consequences.','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' For some reason vc7.1 needs us to "cut off" instantiation','line_number':115,'multiline':False]
['text':' of is_convertible in a few cases.','line_number':116,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' Default template argument handling for iterator_adaptor','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' If T is use_default, return the result of invoking','line_number':145,'multiline':False]
['text':' DefaultNullaryFn, otherwise return T.','line_number':146,'multiline':False]
['text':' A metafunction which computes an iterator_adaptor's base class,','line_number':157,'multiline':False]
['text':' a specialization of iterator_facade.','line_number':158,'multiline':False]
['text':' workaround for aC++ CR JAGaf33512','line_number':208,'multiline':False]
['text':'','line_number':216,'multiline':False]
['text':' Iterator Adaptor','line_number':217,'multiline':False]
['text':'','line_number':218,'multiline':False]
['text':' The parameter ordering changed slightly with respect to former','line_number':219,'multiline':False]
['text':' versions of iterator_adaptor The idea is that when the user needs','line_number':220,'multiline':False]
['text':' to fiddle with the reference type it is highly likely that the','line_number':221,'multiline':False]
['text':' iterator category has to be adjusted as well.  Any of the','line_number':222,'multiline':False]
['text':' following four template arguments may be ommitted or explicitly','line_number':223,'multiline':False]
['text':' replaced by use_default.','line_number':224,'multiline':False]
['text':'','line_number':225,'multiline':False]
['text':'   Value - if supplied, the value_type of the resulting iterator, unless','line_number':226,'multiline':False]
['text':'      const. If const, a conforming compiler strips constness for the','line_number':227,'multiline':False]
['text':'      value_type. If not supplied, iterator_traits<Base>::value_type is used','line_number':228,'multiline':False]
['text':'','line_number':229,'multiline':False]
['text':'   Category - the traversal category of the resulting iterator. If not','line_number':230,'multiline':False]
['text':'      supplied, iterator_traversal<Base>::type is used.','line_number':231,'multiline':False]
['text':'','line_number':232,'multiline':False]
['text':'   Reference - the reference type of the resulting iterator, and in','line_number':233,'multiline':False]
['text':'      particular, the result type of operator*(). If not supplied but','line_number':234,'multiline':False]
['text':'      Value is supplied, Value& is used. Otherwise','line_number':235,'multiline':False]
['text':'      iterator_traits<Base>::reference is used.','line_number':236,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':'   Difference - the difference_type of the resulting iterator. If not','line_number':238,'multiline':False]
['text':'      supplied, iterator_traits<Base>::difference_type is used.','line_number':239,'multiline':False]
['text':'','line_number':240,'multiline':False]
['text':' for convenience in derived classes','line_number':274,'multiline':False]
['text':'','line_number':277,'multiline':False]
['text':' lvalue access to the Base object for Derived','line_number':278,'multiline':False]
['text':'','line_number':279,'multiline':False]
['text':'','line_number':287,'multiline':False]
['text':' Core iterator interface for iterator_facade.  This is private','line_number':288,'multiline':False]
['text':' to prevent temptation for Derived classes to use it, which','line_number':289,'multiline':False]
['text':' will often result in an error.  Derived classes should use','line_number':290,'multiline':False]
['text':' base_reference(), above, to get direct access to m_iterator.','line_number':291,'multiline':False]
['text':'','line_number':292,'multiline':False]
['text':' Maybe readd with same_distance','line_number':301,'multiline':False]
['text':'           BOOST_STATIC_ASSERT(','line_number':302,'multiline':False]
['text':'               (detail::same_category_and_difference<Derived,OtherDerived>::value)','line_number':303,'multiline':False]
['text':'               );','line_number':304,'multiline':False]
['text':' Maybe readd with same_distance','line_number':336,'multiline':False]
['text':'           BOOST_STATIC_ASSERT(','line_number':337,'multiline':False]
['text':'               (detail::same_category_and_difference<Derived,OtherDerived>::value)','line_number':338,'multiline':False]
['text':'               );','line_number':339,'multiline':False]
['text':' data members','line_number':345,'multiline':False]
['text':' namespace iterators','line_number':349,'multiline':False]
['text':' namespace boost','line_number':354,'multiline':False]
['text':' BOOST_ITERATOR_ADAPTOR_23022003THW_HPP','line_number':358,'multiline':False]
