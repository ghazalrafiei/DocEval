['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]
['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':9,'multiline':False]
['text':' base64_from_binary.hpp','line_number':10,'multiline':False]
['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .','line_number':12,'multiline':False]
['text':' Use, modification and distribution is subject to the Boost Software','line_number':13,'multiline':False]
['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':14,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':15,'multiline':False]
['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':17,'multiline':False]
['text':' size_t','line_number':21,'multiline':False]
['text':' namespace std','line_number':25,'multiline':False]
['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':35,'multiline':False]
['text':' convert binary integers to base64 characters','line_number':36,'multiline':False]
['text':' namespace detail','line_number':54,'multiline':False]
['text':' note: what we would like to do is','line_number':56,'multiline':False]
['text':' template<class Base, class CharType = typename Base::value_type>','line_number':57,'multiline':False]
['text':'  typedef transform_iterator<','line_number':58,'multiline':False]
['text':'      from_6_bit<CharType>,','line_number':59,'multiline':False]
['text':'      transform_width<Base, 6, sizeof(Base::value_type) * 8, CharType>','line_number':60,'multiline':False]
['text':'  > base64_from_binary;','line_number':61,'multiline':False]
['text':' but C++ won't accept this.  Rather than using a "type generator" and','line_number':62,'multiline':False]
['text':' using a different syntax, make a derivation which should be equivalent.','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' Another issue addressed here is that the transform_iterator doesn't have','line_number':65,'multiline':False]
['text':' a templated constructor.  This makes it incompatible with the dataflow','line_number':66,'multiline':False]
['text':' ideal.  This is also addressed here.','line_number':67,'multiline':False]
['text':'template<class Base, class CharType = typename Base::value_type>','line_number':69,'multiline':False]
['text':' make composible buy using templated constructor','line_number':87,'multiline':False]
['text':' intel 7.1 doesn't like default copy constructor','line_number':95,'multiline':False]
['text':'    base64_from_binary(){};','line_number':102,'multiline':False]
['text':' namespace iterators','line_number':105,'multiline':False]
['text':' namespace archive','line_number':106,'multiline':False]
['text':' namespace boost','line_number':107,'multiline':False]
['text':' BOOST_ARCHIVE_ITERATORS_BASE64_FROM_BINARY_HPP','line_number':109,'multiline':False]
