['text':'  Boost config.hpp configuration header file  ------------------------------//','line_number':1,'multiline':False]
['text':'  boostinspect:ndprecated_macros -- tell the inspect tool to ignore this file','line_number':2,'multiline':False]
['text':'  Copyright (c) 2001-2003 John Maddock','line_number':4,'multiline':False]
['text':'  Copyright (c) 2001 Darin Adler','line_number':5,'multiline':False]
['text':'  Copyright (c) 2001 Peter Dimov','line_number':6,'multiline':False]
['text':'  Copyright (c) 2002 Bill Kempf','line_number':7,'multiline':False]
['text':'  Copyright (c) 2002 Jens Maurer','line_number':8,'multiline':False]
['text':'  Copyright (c) 2002-2003 David Abrahams','line_number':9,'multiline':False]
['text':'  Copyright (c) 2003 Gennaro Prota','line_number':10,'multiline':False]
['text':'  Copyright (c) 2003 Eric Friedman','line_number':11,'multiline':False]
['text':'  Copyright (c) 2010 Eric Jourdanneau, Joel Falcou','line_number':12,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':13,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':14,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':15,'multiline':False]
['text':'  See http://www.boost.org/ for most recent version.','line_number':17,'multiline':False]
['text':'  Boost config.hpp policy and rationale documentation has been moved to','line_number':19,'multiline':False]
['text':'  http://www.boost.org/libs/config/','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':'  This file is intended to be stable, and relatively unchanging.','line_number':22,'multiline':False]
['text':'  It should contain boilerplate code only - no compiler specific','line_number':23,'multiline':False]
['text':'  code unless it is unavoidable - no changes unless unavoidable.','line_number':24,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':' Some GCC-4.x versions issue warnings even when __extension__ is used,','line_number':31,'multiline':False]
['text':' so use this as a workaround:','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' ensure that visibility macros are always defined, thus simplifying use','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':' look for long long by looking for the appropriate macros in <limits.h>.','line_number':51,'multiline':False]
['text':' Note that we use limits.h rather than climits for maximal portability,','line_number':52,'multiline':False]
['text':' remember that since these just declare a bunch of macros, there should be','line_number':53,'multiline':False]
['text':' no namespace issues from this.','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' GCC 3.x will clean up all of those nasty macro definitions that','line_number':66,'multiline':False]
['text':' BOOST_NO_CTYPE_FUNCTIONS is intended to help work around, so undefine','line_number':67,'multiline':False]
['text':' it under GCC 3.x.','line_number':68,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' Assume any extensions are in namespace std:: unless stated otherwise:','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' If cv-qualified specializations are not allowed, then neither are cv-void ones:','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' If there is no numeric_limits template, then it can't have any compile time','line_number':89,'multiline':False]
['text':' constants either!','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' if there is no long long then there is no specialisation','line_number':100,'multiline':False]
['text':' for numeric_limits<long long> either:','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':' if there is no __int64 then there is no specialisation','line_number':108,'multiline':False]
['text':' for numeric_limits<__int64> either:','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':'','line_number':115,'multiline':False]
['text':' if member templates are supported then so is the','line_number':116,'multiline':False]
['text':' VC6 subset of member templates:','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':' Without partial specialization, can't test for partial specialisation bugs:','line_number':125,'multiline':False]
['text':'','line_number':126,'multiline':False]
['text':'','line_number':132,'multiline':False]
['text':' Without partial specialization, we can't have array-type partial specialisations:','line_number':133,'multiline':False]
['text':'','line_number':134,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' Without partial specialization, std::iterator_traits can't work:','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' Without partial specialization, partial','line_number':149,'multiline':False]
['text':' specialization with default args won't work either:','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':' Without member template support, we can't have template constructors','line_number':158,'multiline':False]
['text':' in the standard library either:','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':' Without member template support, we can't have a conforming','line_number':168,'multiline':False]
['text':' std::allocator template either:','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':' without ADL support then using declarations will break ADL as well:','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':'','line_number':184,'multiline':False]
['text':' Without typeid support we have no dynamic RTTI either:','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
['text':'','line_number':191,'multiline':False]
['text':' If we have a standard allocator, then we have a partial one as well:','line_number':192,'multiline':False]
['text':'','line_number':193,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':' We can't have a working std::use_facet if there is no std::locale:','line_number':199,'multiline':False]
['text':'','line_number':200,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':' We can't have a std::messages facet if there is no std::locale:','line_number':206,'multiline':False]
['text':'','line_number':207,'multiline':False]
['text':'','line_number':212,'multiline':False]
['text':' We can't have a working std::wstreambuf if there is no std::locale:','line_number':213,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':'','line_number':219,'multiline':False]
['text':' We can't have a <cwctype> if there is no <cwchar>:','line_number':220,'multiline':False]
['text':'','line_number':221,'multiline':False]
['text':'','line_number':226,'multiline':False]
['text':' We can't have a swprintf if there is no <cwchar>:','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':'','line_number':233,'multiline':False]
['text':' If Win32 support is turned off, then we must turn off','line_number':234,'multiline':False]
['text':' threading support also, unless there is some other','line_number':235,'multiline':False]
['text':' thread API enabled:','line_number':236,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':' Turn on threading support if the compiler thinks that it's in','line_number':244,'multiline':False]
['text':' multithreaded mode.  We put this here because there are only a','line_number':245,'multiline':False]
['text':' limited number of macros that identify this (if there's any missing','line_number':246,'multiline':False]
['text':' from here then add to the appropriate compiler section):','line_number':247,'multiline':False]
['text':'','line_number':248,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' Turn threading support off if BOOST_DISABLE_THREADS is defined:','line_number':256,'multiline':False]
['text':'','line_number':257,'multiline':False]
['text':'','line_number':262,'multiline':False]
['text':' Turn threading support off if we don't recognise the threading API:','line_number':263,'multiline':False]
['text':'','line_number':264,'multiline':False]
['text':'','line_number':271,'multiline':False]
['text':' Turn threading detail macros off if we don't (want to) use threading','line_number':272,'multiline':False]
['text':'','line_number':273,'multiline':False]
['text':'','line_number':284,'multiline':False]
['text':' If the compiler claims to be C99 conformant, then it had better','line_number':285,'multiline':False]
['text':' have a <stdint.h>:','line_number':286,'multiline':False]
['text':'','line_number':287,'multiline':False]
['text':'','line_number':298,'multiline':False]
['text':' Define BOOST_NO_SLIST and BOOST_NO_HASH if required.','line_number':299,'multiline':False]
['text':' Note that this is for backwards compatibility only.','line_number':300,'multiline':False]
['text':'','line_number':301,'multiline':False]
['text':'','line_number':310,'multiline':False]
['text':' Set BOOST_SLIST_HEADER if not set already:','line_number':311,'multiline':False]
['text':'','line_number':312,'multiline':False]
['text':'','line_number':317,'multiline':False]
['text':' Set BOOST_HASH_SET_HEADER if not set already:','line_number':318,'multiline':False]
['text':'','line_number':319,'multiline':False]
['text':'','line_number':324,'multiline':False]
['text':' Set BOOST_HASH_MAP_HEADER if not set already:','line_number':325,'multiline':False]
['text':'','line_number':326,'multiline':False]
['text':'  BOOST_HAS_ABI_HEADERS','line_number':331,'multiline':False]
['text':'  This macro gets set if we have headers that fix the ABI,','line_number':332,'multiline':False]
['text':'  and prevent ODR violations when linking to external libraries:','line_number':333,'multiline':False]
['text':'  BOOST_NO_STDC_NAMESPACE workaround  --------------------------------------//','line_number':342,'multiline':False]
['text':'  Because std::size_t usage is so common, even in boost headers which do not','line_number':343,'multiline':False]
['text':'  otherwise use the C library, the <cstddef> workaround is included here so','line_number':344,'multiline':False]
['text':'  that ugly workaround code need not appear in many other boost headers.','line_number':345,'multiline':False]
['text':'  NOTE WELL: This is a workaround for non-conforming compilers; <cstddef>','line_number':346,'multiline':False]
['text':'  must still be #included in the usual places so that <cstddef> inclusion','line_number':347,'multiline':False]
['text':'  works as expected with standard conforming compilers.  The resulting','line_number':348,'multiline':False]
['text':'  double inclusion of <cstddef> is harmless.','line_number':349,'multiline':False]
['text':'  Workaround for the unfortunate min/max macros defined by some platform headers','line_number':356,'multiline':False]
['text':'  BOOST_NO_STD_MIN_MAX workaround  -----------------------------------------//','line_number':368,'multiline':False]
['text':' BOOST_STATIC_CONSTANT workaround --------------------------------------- //','line_number':385,'multiline':False]
['text':' On compilers which don't allow in-class initialization of static integral','line_number':386,'multiline':False]
['text':' constant members, we must use enums as a workaround if we want the constants','line_number':387,'multiline':False]
['text':' to be available at compile-time. This macro gives us a convenient way to','line_number':388,'multiline':False]
['text':' declare such constants.','line_number':389,'multiline':False]
['text':' BOOST_USE_FACET / HAS_FACET workaround ----------------------------------//','line_number':397,'multiline':False]
['text':' When the standard library does not have a conforming std::use_facet there','line_number':398,'multiline':False]
['text':' are various workarounds available, but they differ from library to library.','line_number':399,'multiline':False]
['text':' The same problem occurs with has_facet.','line_number':400,'multiline':False]
['text':' These macros provide a consistent way to access a locale's facets.','line_number':401,'multiline':False]
['text':' Usage:','line_number':402,'multiline':False]
['text':'    replace','line_number':403,'multiline':False]
['text':'       std::use_facet<Type>(loc);','line_number':404,'multiline':False]
['text':'    with','line_number':405,'multiline':False]
['text':'       BOOST_USE_FACET(Type, loc);','line_number':406,'multiline':False]
['text':'    Note do not add a std:: prefix to the front of BOOST_USE_FACET!','line_number':407,'multiline':False]
['text':'  Use for BOOST_HAS_FACET is analogous.','line_number':408,'multiline':False]
['text':' BOOST_NESTED_TEMPLATE workaround ------------------------------------------//','line_number':426,'multiline':False]
['text':' Member templates are supported by some compilers even though they can't use','line_number':427,'multiline':False]
['text':' the A::template member<U> syntax, as a workaround replace:','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':' typedef typename A::template rebind<U> binder;','line_number':430,'multiline':False]
['text':'','line_number':431,'multiline':False]
['text':' with:','line_number':432,'multiline':False]
['text':'','line_number':433,'multiline':False]
['text':' typedef typename A::BOOST_NESTED_TEMPLATE rebind<U> binder;','line_number':434,'multiline':False]
['text':' BOOST_UNREACHABLE_RETURN(x) workaround -------------------------------------//','line_number':442,'multiline':False]
['text':' Normally evaluates to nothing, unless BOOST_NO_UNREACHABLE_RETURN_DETECTION','line_number':443,'multiline':False]
['text':' is defined, in which case it evaluates to return x; Use when you have a return','line_number':444,'multiline':False]
['text':' statement that can never be reached.','line_number':445,'multiline':False]
['text':' BOOST_DEDUCED_TYPENAME workaround ------------------------------------------//','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':' Some compilers don't support the use of `typename' for dependent','line_number':457,'multiline':False]
['text':' types in deduced contexts, e.g.','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':'     template <class T> void f(T, typename T::type);','line_number':460,'multiline':False]
['text':'                                  ^^^^^^^^','line_number':461,'multiline':False]
['text':' Replace these declarations with:','line_number':462,'multiline':False]
['text':'','line_number':463,'multiline':False]
['text':'     template <class T> void f(T, BOOST_DEDUCED_TYPENAME T::type);','line_number':464,'multiline':False]
['text':'','line_number':478,'multiline':False]
['text':' If we're on a CUDA device (note DEVICE not HOST, irrespective of compiler) then disable __int128 and __float128 support if present:','line_number':479,'multiline':False]
['text':'','line_number':480,'multiline':False]
['text':' long long workaround ------------------------------------------//','line_number':488,'multiline':False]
['text':' On gcc (and maybe other compilers?) long long is alway supported','line_number':489,'multiline':False]
['text':' but it's use may generate either warnings (with -ansi), or errors','line_number':490,'multiline':False]
['text':' (with -pedantic -ansi) unless it's use is prefixed by __extension__','line_number':491,'multiline':False]
['text':'','line_number':492,'multiline':False]
['text':' same again for __int128:','line_number':504,'multiline':False]
['text':' same again for __float128:','line_number':516,'multiline':False]
['text':' BOOST_[APPEND_]EXPLICIT_TEMPLATE_[NON_]TYPE macros --------------------------//','line_number':527,'multiline':False]
['text':' These macros are obsolete. Port away and remove.','line_number':529,'multiline':False]
['text':' When BOOST_NO_STD_TYPEINFO is defined, we can just import','line_number':541,'multiline':False]
['text':' the global definition into std namespace, ','line_number':542,'multiline':False]
['text':' see https://svn.boost.org/trac10/ticket/4115','line_number':543,'multiline':False]
['text':' Since we do now have typeinfo, undef the macro:','line_number':547,'multiline':False]
['text':' ---------------------------------------------------------------------------//','line_number':551,'multiline':False]
['text':' Helper macro BOOST_STRINGIZE:','line_number':553,'multiline':False]
['text':' Helper macro BOOST_JOIN:','line_number':554,'multiline':False]
['text':'','line_number':558,'multiline':False]
['text':' Set some default values for compiler/library/platform names.','line_number':559,'multiline':False]
['text':' These are for debugging config setup only:','line_number':560,'multiline':False]
['text':'','line_number':561,'multiline':False]
['text':'','line_number':577,'multiline':False]
['text':' Set some default values GPU support','line_number':578,'multiline':False]
['text':'','line_number':579,'multiline':False]
['text':' BOOST_RESTRICT ---------------------------------------------//','line_number':584,'multiline':False]
['text':' Macro to use in place of 'restrict' keyword variants','line_number':585,'multiline':False]
['text':' Clang also defines __GNUC__ (as 4)','line_number':593,'multiline':False]
['text':' BOOST_MAY_ALIAS -----------------------------------------------//','line_number':603,'multiline':False]
['text':' The macro expands to an attribute to mark a type that is allowed to alias other types.','line_number':604,'multiline':False]
['text':' The macro is defined in the compiler-specific headers.','line_number':605,'multiline':False]
['text':' BOOST_FORCEINLINE ---------------------------------------------//','line_number':611,'multiline':False]
['text':' Macro to use in place of 'inline' to force a function to be inline','line_number':612,'multiline':False]
['text':' Clang also defines __GNUC__ (as 4)','line_number':617,'multiline':False]
['text':' BOOST_NOINLINE ---------------------------------------------//','line_number':624,'multiline':False]
['text':' Macro to use in place of 'inline' to prevent a function to be inlined','line_number':625,'multiline':False]
['text':' Clang also defines __GNUC__ (as 4)','line_number':630,'multiline':False]
['text':' nvcc doesn't always parse __noinline__,','line_number':632,'multiline':False]
['text':' see: https://svn.boost.org/trac/boost/ticket/9392','line_number':633,'multiline':False]
['text':' See https://github.com/boostorg/config/issues/392','line_number':636,'multiline':False]
['text':' BOOST_NORETURN ---------------------------------------------//','line_number':646,'multiline':False]
['text':' Macro to use before a function declaration/definition to designate','line_number':647,'multiline':False]
['text':' the function as not returning normally (i.e. with a return statement','line_number':648,'multiline':False]
['text':' or by leaving the function scope, if the function return type is void).','line_number':649,'multiline':False]
['text':' Branch prediction hints','line_number':671,'multiline':False]
['text':' These macros are intended to wrap conditional expressions that yield true or false','line_number':672,'multiline':False]
['text':'','line_number':673,'multiline':False]
['text':'  if (BOOST_LIKELY(var == 10))','line_number':674,'multiline':False]
['text':'  {','line_number':675,'multiline':False]
['text':'     // the most probable code here','line_number':676,'multiline':False]
['text':'  }','line_number':677,'multiline':False]
['text':'','line_number':678,'multiline':False]
['text':' Type and data alignment specification','line_number':692,'multiline':False]
['text':'','line_number':693,'multiline':False]
['text':' Lack of non-public defaulted functions is implied by the lack of any defaulted functions','line_number':707,'multiline':False]
['text':' Lack of defaulted moves is implied by the lack of either rvalue references or any defaulted functions','line_number':712,'multiline':False]
['text':' Defaulted and deleted function declaration helpers','line_number':717,'multiline':False]
['text':' These macros are intended to be inside a class definition.','line_number':718,'multiline':False]
['text':' BOOST_DEFAULTED_FUNCTION accepts the function declaration and its','line_number':719,'multiline':False]
['text':' body, which will be used if the compiler doesn't support defaulted functions.','line_number':720,'multiline':False]
['text':' BOOST_DELETED_FUNCTION only accepts the function declaration. It','line_number':721,'multiline':False]
['text':' will expand to a private function declaration, if the compiler doesn't support','line_number':722,'multiline':False]
['text':' deleted functions. Because of this it is recommended to use BOOST_DELETED_FUNCTION','line_number':723,'multiline':False]
['text':' in the end of the class definition.','line_number':724,'multiline':False]
['text':'','line_number':725,'multiline':False]
['text':'  class my_class','line_number':726,'multiline':False]
['text':'  {','line_number':727,'multiline':False]
['text':'  public:','line_number':728,'multiline':False]
['text':'      // Default-constructible','line_number':729,'multiline':False]
['text':'      BOOST_DEFAULTED_FUNCTION(my_class(), {})','line_number':730,'multiline':False]
['text':'      // Copying prohibited','line_number':731,'multiline':False]
['text':'      BOOST_DELETED_FUNCTION(my_class(my_class const&))','line_number':732,'multiline':False]
['text':'      BOOST_DELETED_FUNCTION(my_class& operator= (my_class const&))','line_number':733,'multiline':False]
['text':'  };','line_number':734,'multiline':False]
['text':'','line_number':735,'multiline':False]
['text':'','line_number':748,'multiline':False]
['text':' Set BOOST_NO_DECLTYPE_N3276 when BOOST_NO_DECLTYPE is defined','line_number':749,'multiline':False]
['text':'','line_number':750,'multiline':False]
['text':'  -------------------- Deprecated macros for 1.50 ---------------------------','line_number':755,'multiline':False]
['text':'  These will go away in a future release','line_number':756,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_UNORDERED_SET or BOOST_NO_CXX11_HDR_UNORDERED_MAP','line_number':758,'multiline':False]
['text':'           instead of BOOST_NO_STD_UNORDERED','line_number':759,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_INITIALIZER_LIST instead of BOOST_NO_INITIALIZER_LISTS','line_number':766,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_ARRAY instead of BOOST_NO_0X_HDR_ARRAY','line_number':771,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_CHRONO instead of BOOST_NO_0X_HDR_CHRONO','line_number':775,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_CODECVT instead of BOOST_NO_0X_HDR_CODECVT','line_number':779,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_CONDITION_VARIABLE instead of BOOST_NO_0X_HDR_CONDITION_VARIABLE','line_number':783,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_FORWARD_LIST instead of BOOST_NO_0X_HDR_FORWARD_LIST','line_number':787,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_FUTURE instead of BOOST_NO_0X_HDR_FUTURE','line_number':791,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_INITIALIZER_LIST','line_number':796,'multiline':False]
['text':'  instead of BOOST_NO_0X_HDR_INITIALIZER_LIST or BOOST_NO_INITIALIZER_LISTS','line_number':797,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_MUTEX instead of BOOST_NO_0X_HDR_MUTEX','line_number':807,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_RANDOM instead of BOOST_NO_0X_HDR_RANDOM','line_number':811,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_RATIO instead of BOOST_NO_0X_HDR_RATIO','line_number':815,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_REGEX instead of BOOST_NO_0X_HDR_REGEX','line_number':819,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_SYSTEM_ERROR instead of BOOST_NO_0X_HDR_SYSTEM_ERROR','line_number':823,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_THREAD instead of BOOST_NO_0X_HDR_THREAD','line_number':827,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_TUPLE instead of BOOST_NO_0X_HDR_TUPLE','line_number':831,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_TYPE_TRAITS instead of BOOST_NO_0X_HDR_TYPE_TRAITS','line_number':835,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_TYPEINDEX instead of BOOST_NO_0X_HDR_TYPEINDEX','line_number':839,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_UNORDERED_MAP instead of BOOST_NO_0X_HDR_UNORDERED_MAP','line_number':843,'multiline':False]
['text':'  Use BOOST_NO_CXX11_HDR_UNORDERED_SET instead of BOOST_NO_0X_HDR_UNORDERED_SET','line_number':847,'multiline':False]
['text':'  ------------------ End of deprecated macros for 1.50 ---------------------------','line_number':852,'multiline':False]
['text':'  -------------------- Deprecated macros for 1.51 ---------------------------','line_number':854,'multiline':False]
['text':'  These will go away in a future release','line_number':855,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_AUTO_DECLARATIONS instead of   BOOST_NO_AUTO_DECLARATIONS','line_number':857,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_AUTO_MULTIDECLARATIONS instead of   BOOST_NO_AUTO_MULTIDECLARATIONS','line_number':861,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_CHAR16_T instead of   BOOST_NO_CHAR16_T','line_number':865,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_CHAR32_T instead of   BOOST_NO_CHAR32_T','line_number':869,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_TEMPLATE_ALIASES instead of   BOOST_NO_TEMPLATE_ALIASES','line_number':873,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_CONSTEXPR instead of   BOOST_NO_CONSTEXPR','line_number':877,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_DECLTYPE_N3276 instead of   BOOST_NO_DECLTYPE_N3276','line_number':881,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_DECLTYPE instead of   BOOST_NO_DECLTYPE','line_number':885,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_DEFAULTED_FUNCTIONS instead of   BOOST_NO_DEFAULTED_FUNCTIONS','line_number':889,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_DELETED_FUNCTIONS instead of   BOOST_NO_DELETED_FUNCTIONS','line_number':893,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_EXPLICIT_CONVERSION_OPERATORS instead of   BOOST_NO_EXPLICIT_CONVERSION_OPERATORS','line_number':897,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_EXTERN_TEMPLATE instead of   BOOST_NO_EXTERN_TEMPLATE','line_number':901,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS instead of   BOOST_NO_FUNCTION_TEMPLATE_DEFAULT_ARGS','line_number':905,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_LAMBDAS instead of   BOOST_NO_LAMBDAS','line_number':909,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_LOCAL_CLASS_TEMPLATE_PARAMETERS instead of   BOOST_NO_LOCAL_CLASS_TEMPLATE_PARAMETERS','line_number':913,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_NOEXCEPT instead of   BOOST_NO_NOEXCEPT','line_number':917,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_NULLPTR instead of   BOOST_NO_NULLPTR','line_number':921,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_RAW_LITERALS instead of   BOOST_NO_RAW_LITERALS','line_number':925,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_RVALUE_REFERENCES instead of   BOOST_NO_RVALUE_REFERENCES','line_number':929,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_SCOPED_ENUMS instead of   BOOST_NO_SCOPED_ENUMS','line_number':933,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_STATIC_ASSERT instead of   BOOST_NO_STATIC_ASSERT','line_number':937,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_STD_UNORDERED instead of   BOOST_NO_STD_UNORDERED','line_number':941,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_UNICODE_LITERALS instead of   BOOST_NO_UNICODE_LITERALS','line_number':945,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_UNIFIED_INITIALIZATION_SYNTAX instead of   BOOST_NO_UNIFIED_INITIALIZATION_SYNTAX','line_number':949,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_VARIADIC_TEMPLATES instead of   BOOST_NO_VARIADIC_TEMPLATES','line_number':953,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_VARIADIC_MACROS instead of   BOOST_NO_VARIADIC_MACROS','line_number':957,'multiline':False]
['text':'  Use     BOOST_NO_CXX11_NUMERIC_LIMITS instead of   BOOST_NO_NUMERIC_LIMITS_LOWEST','line_number':961,'multiline':False]
['text':'  ------------------ End of deprecated macros for 1.51 ---------------------------','line_number':965,'multiline':False]
['text':'','line_number':968,'multiline':False]
['text':' Helper macro for marking types and methods final','line_number':969,'multiline':False]
['text':'','line_number':970,'multiline':False]
['text':'','line_number':977,'multiline':False]
['text':' Helper macros BOOST_NOEXCEPT, BOOST_NOEXCEPT_IF, BOOST_NOEXCEPT_EXPR','line_number':978,'multiline':False]
['text':' These aid the transition to C++11 while still supporting C++03 compilers','line_number':979,'multiline':False]
['text':'','line_number':980,'multiline':False]
['text':'','line_number':992,'multiline':False]
['text':' Helper macro BOOST_FALLTHROUGH','line_number':993,'multiline':False]
['text':' Fallback definition of BOOST_FALLTHROUGH macro used to mark intended','line_number':994,'multiline':False]
['text':' fall-through between case labels in a switch statement. We use a definition','line_number':995,'multiline':False]
['text':' that requires a semicolon after it to avoid at least one type of misuse even','line_number':996,'multiline':False]
['text':' on unsupported compilers.','line_number':997,'multiline':False]
['text':'','line_number':998,'multiline':False]
['text':'','line_number':1003,'multiline':False]
['text':' constexpr workarounds','line_number':1004,'multiline':False]
['text':'','line_number':1005,'multiline':False]
['text':'','line_number':1019,'multiline':False]
['text':' C++17 inline variables','line_number':1020,'multiline':False]
['text':'','line_number':1021,'multiline':False]
['text':'','line_number':1027,'multiline':False]
['text':' C++17 if constexpr','line_number':1028,'multiline':False]
['text':'','line_number':1029,'multiline':False]
['text':'','line_number':1038,'multiline':False]
['text':' Unused variable/typedef workarounds:','line_number':1039,'multiline':False]
['text':'','line_number':1040,'multiline':False]
['text':'','line_number':1044,'multiline':False]
['text':' [[nodiscard]]:','line_number':1045,'multiline':False]
['text':'','line_number':1046,'multiline':False]
['text':' clang-6 accepts [[nodiscard]] with -std=c++14, but warns about it -pedantic','line_number':1055,'multiline':False]
['text':'','line_number':1072,'multiline':False]
['text':' Set BOOST_HAS_STATIC_ASSERT when BOOST_NO_CXX11_STATIC_ASSERT is not defined','line_number':1073,'multiline':False]
['text':'','line_number':1074,'multiline':False]
['text':'','line_number':1079,'multiline':False]
['text':' Set BOOST_HAS_RVALUE_REFS when BOOST_NO_CXX11_RVALUE_REFERENCES is not defined','line_number':1080,'multiline':False]
['text':'','line_number':1081,'multiline':False]
['text':'','line_number':1086,'multiline':False]
['text':' Set BOOST_HAS_VARIADIC_TMPL when BOOST_NO_CXX11_VARIADIC_TEMPLATES is not defined','line_number':1087,'multiline':False]
['text':'','line_number':1088,'multiline':False]
['text':'','line_number':1092,'multiline':False]
['text':' Set BOOST_NO_CXX11_FIXED_LENGTH_VARIADIC_TEMPLATE_EXPANSION_PACKS when','line_number':1093,'multiline':False]
['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES is set:','line_number':1094,'multiline':False]
['text':'','line_number':1095,'multiline':False]
['text':' This is a catch all case for obsolete compilers / std libs:','line_number':1100,'multiline':False]
['text':' msvc std lib already configured','line_number':1101,'multiline':False]
['text':'','line_number':1138,'multiline':False]
['text':' Define the std level that the compiler claims to support:','line_number':1139,'multiline':False]
['text':'','line_number':1140,'multiline':False]
['text':' For convenience, this is always included:','line_number':1209,'multiline':False]
['text':'','line_number':1216,'multiline':False]
['text':' Define composite agregate macros:','line_number':1217,'multiline':False]
['text':'','line_number':1218,'multiline':False]
['text':'','line_number':1221,'multiline':False]
['text':' Finish off with checks for macros that are depricated / no longer supported,','line_number':1222,'multiline':False]
['text':' if any of these are set then it's very likely that much of Boost will no','line_number':1223,'multiline':False]
['text':' longer work.  So stop with a #error for now, but give the user a chance','line_number':1224,'multiline':False]
['text':' to continue at their own risk if they really want to:','line_number':1225,'multiline':False]
['text':'','line_number':1226,'multiline':False]
