['text':'  (C) Copyright Dustin Spicuzza 2009.','line_number':1,'multiline':False]
['text':'      Adapted to vxWorks 6.9 by Peter Brockamp 2012.','line_number':2,'multiline':False]
['text':'      Updated for VxWorks 7 by Brian Kuhl 2016','line_number':3,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':4,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'  See http://www.boost.org for most recent version.','line_number':8,'multiline':False]
['text':'  Old versions of vxWorks (namely everything below 6.x) are','line_number':10,'multiline':False]
['text':'  absolutely unable to use boost. Old STLs and compilers ','line_number':11,'multiline':False]
['text':'  like (GCC 2.96) . Do not even think of getting this to work, ','line_number':12,'multiline':False]
['text':'  a miserable failure will  be guaranteed!','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'  VxWorks supports C++ linkage in the kernel with','line_number':15,'multiline':False]
['text':'  DKMs (Downloadable Kernel Modules). But, until recently ','line_number':16,'multiline':False]
['text':'  the kernel used a C89 library with no','line_number':17,'multiline':False]
['text':'  wide character support and no guarantee of ANSI C. ','line_number':18,'multiline':False]
['text':'  Regardless of the C library the same Dinkum ','line_number':19,'multiline':False]
['text':'  STL library is used in both contexts. ','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':'  Similarly the Dinkum abridged STL that supports the loosely specified ','line_number':22,'multiline':False]
['text':'  embedded C++ standard has not been tested and is unlikely to work ','line_number':23,'multiline':False]
['text':'  on anything but the simplest library.','line_number':24,'multiline':False]
['text':' ====================================================================','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' Some important information regarding the usage of POSIX semaphores:','line_number':27,'multiline':False]
['text':' -------------------------------------------------------------------','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' VxWorks as a real time operating system handles threads somewhat','line_number':30,'multiline':False]
['text':' different from what "normal" OSes do, regarding their scheduling!','line_number':31,'multiline':False]
['text':' This could lead to a scenario called "priority inversion" when using','line_number':32,'multiline':False]
['text':' semaphores, see http://en.wikipedia.org/wiki/Priority_inversion.','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' Now, VxWorks POSIX-semaphores for DKM's default to the usage of','line_number':35,'multiline':False]
['text':' priority inverting semaphores, which is fine. On the other hand,','line_number':36,'multiline':False]
['text':' for RTP's it defaults to using non priority inverting semaphores,','line_number':37,'multiline':False]
['text':' which could easily pose a serious problem for a real time process.','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' To change the default properties for POSIX-semaphores in VxWorks 7','line_number':40,'multiline':False]
['text':' enable core > CORE_USER Menu > DEFAULT_PTHREAD_PRIO_INHERIT ','line_number':41,'multiline':False]
['text':'  ','line_number':42,'multiline':False]
['text':' In VxWorks 6.x so as to integrate with boost. ','line_number':43,'multiline':False]
['text':' - Edit the file ','line_number':44,'multiline':False]
['text':'   installDir/vxworks-6.x/target/usr/src/posix/pthreadLib.c','line_number':45,'multiline':False]
['text':' - Around line 917 there should be the definition of the default','line_number':46,'multiline':False]
['text':'   mutex attributes:','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'   LOCAL pthread_mutexattr_t defaultMutexAttr =','line_number':49,'multiline':False]
['text':'       {','line_number':50,'multiline':False]
['text':'       PTHREAD_INITIALIZED_OBJ, PTHREAD_PRIO_NONE, 0,','line_number':51,'multiline':False]
['text':'       PTHREAD_MUTEX_DEFAULT','line_number':52,'multiline':False]
['text':'       };','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':'   Here, replace PTHREAD_PRIO_NONE by PTHREAD_PRIO_INHERIT.','line_number':55,'multiline':False]
['text':' - Around line 1236 there should be a definition for the function','line_number':56,'multiline':False]
['text':'   pthread_mutexattr_init(). A couple of lines below you should','line_number':57,'multiline':False]
['text':'   find a block of code like this:','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':'   pAttr->mutexAttrStatus      = PTHREAD_INITIALIZED_OBJ;','line_number':60,'multiline':False]
['text':'   pAttr->mutexAttrProtocol    = PTHREAD_PRIO_NONE;','line_number':61,'multiline':False]
['text':'   pAttr->mutexAttrPrioceiling = 0;','line_number':62,'multiline':False]
['text':'   pAttr->mutexAttrType        = PTHREAD_MUTEX_DEFAULT;','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':'   Here again, replace PTHREAD_PRIO_NONE by PTHREAD_PRIO_INHERIT.','line_number':65,'multiline':False]
['text':' - Finally, rebuild your VSB. This will rebuild the libraries','line_number':66,'multiline':False]
['text':'   with the changed properties. That's it! Now, using boost should','line_number':67,'multiline':False]
['text':'   no longer cause any problems with task deadlocks!','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':'  ====================================================================','line_number':70,'multiline':False]
['text':' Block out all versions before vxWorks 6.x, as these don't work:','line_number':72,'multiline':False]
['text':' Include header with the vxWorks version information and query them','line_number':73,'multiline':False]
['text':' Handle versions above 5.X but below 6.9','line_number':80,'multiline':False]
['text':' TODO: Starting from what version does vxWorks work with boost?','line_number':82,'multiline':False]
['text':' We can't reasonably insert a #warning "" as a user hint here,','line_number':83,'multiline':False]
['text':' as this will show up with every file including some boost header,','line_number':84,'multiline':False]
['text':' badly bugging the user... So for the time being we just leave it.','line_number':85,'multiline':False]
['text':' vxWorks specific config options:','line_number':88,'multiline':False]
['text':' --------------------------------','line_number':89,'multiline':False]
['text':' Generally available headers:','line_number':93,'multiline':False]
['text':'#define BOOST_HAS_SLIST','line_number':97,'multiline':False]
['text':' vxWorks does not have installed an iconv-library by default,','line_number':99,'multiline':False]
['text':' so unfortunately no Unicode support from scratch is available!','line_number':100,'multiline':False]
['text':' Thus, instead it is suggested to switch to ICU, as this seems','line_number':101,'multiline':False]
['text':' to be the most complete and portable option...','line_number':102,'multiline':False]
['text':' Generally available functionality:','line_number':107,'multiline':False]
['text':' Generally available threading API's:','line_number':114,'multiline':False]
['text':' Functionality available for RTPs only:','line_number':119,'multiline':False]
['text':' Functionality available for DKMs only:','line_number':126,'multiline':False]
['text':' Luckily, at the moment there seems to be none!','line_number':128,'multiline':False]
['text':' These #defines allow detail/posix_features to work, since vxWorks doesn't','line_number':131,'multiline':False]
['text':' #define them itself for DKMs (for RTPs on the contrary it does):','line_number':132,'multiline':False]
['text':' no sysconf( _SC_PAGESIZE) in kernel','line_number':140,'multiline':False]
['text':' vxWorks-around: <time.h> #defines CLOCKS_PER_SEC as sysClkRateGet() but','line_number':145,'multiline':False]
['text':'                 miserably fails to #include the required <sysLib.h> to make','line_number':146,'multiline':False]
['text':'                 sysClkRateGet() available! So we manually include it here.','line_number':147,'multiline':False]
['text':' vxWorks-around: In <stdint.h> the macros INT32_C(), UINT32_C(), INT64_C() and','line_number':153,'multiline':False]
['text':'                 UINT64_C() are defined erroneously, yielding not a signed/','line_number':154,'multiline':False]
['text':'                 unsigned long/long long type, but a signed/unsigned int/long','line_number':155,'multiline':False]
['text':'                 type. Eventually this leads to compile errors in ratio_fwd.hpp,','line_number':156,'multiline':False]
['text':'                 when trying to define several constants which do not fit into a','line_number':157,'multiline':False]
['text':'                 long type! We correct them here by redefining.','line_number':158,'multiline':False]
['text':' Special behaviour for DKMs:','line_number':162,'multiline':False]
['text':' Some macro-magic to do the job','line_number':164,'multiline':False]
['text':' Correctly setup the macros','line_number':169,'multiline':False]
['text':' #include Libraries required for the following function adaption','line_number':179,'multiline':False]
['text':' _WRS_VXWORKS_MAJOR < 7','line_number':181,'multiline':False]
['text':' recent kernels use Dinkum clib v7.00+','line_number':187,'multiline':False]
['text':' with widechar but older kernels','line_number':188,'multiline':False]
['text':' do not have the <cwchar>-header,','line_number':189,'multiline':False]
['text':' but apparently they do have an intrinsic wchar_t meanwhile!','line_number':190,'multiline':False]
['text':' Lots of wide-functions and -headers are unavailable for DKMs as well:','line_number':193,'multiline':False]
['text':' Use C-linkage for the following helper functions','line_number':201,'multiline':False]
['text':' vxWorks-around: The required functions getrlimit() and getrlimit() are missing.','line_number':206,'multiline':False]
['text':'                 But we have the similar functions getprlimit() and setprlimit(),','line_number':207,'multiline':False]
['text':'                 which may serve the purpose.','line_number':208,'multiline':False]
['text':'                 Problem: The vxWorks-documentation regarding these functions','line_number':209,'multiline':False]
['text':'                 doesn't deserve its name! It isn't documented what the first two','line_number':210,'multiline':False]
['text':'                 parameters idtype and id mean, so we must fall back to an educated','line_number':211,'multiline':False]
['text':'                 guess - null, argh... :-/','line_number':212,'multiline':False]
['text':' TODO: getprlimit() and setprlimit() do exist for RTPs only, for whatever reason.','line_number':214,'multiline':False]
['text':'       Thus for DKMs there would have to be another implementation.','line_number':215,'multiline':False]
['text':' vxWorks has ftruncate() only, so we do simulate truncate():','line_number':226,'multiline':False]
['text':' Fake symlink handling by dummy functions:','line_number':247,'multiline':False]
['text':' vxWorks has no symlinks -> always return an error!','line_number':249,'multiline':False]
['text':' vxWorks has no symlinks -> always return an error!','line_number':255,'multiline':False]
['text':'tzv','line_number':262,'multiline':True]
['text':' extern "C"','line_number':272,'multiline':False]
['text':' 
 * moved to os/utils/unix/freind_h/times.h in VxWorks 7
 * to avoid conflict with MPL operator times
 ','line_number':275,'multiline':True]
['text':' vxWorks provides neither struct tms nor function times()!','line_number':282,'multiline':False]
['text':' We implement an empty dummy-function, simply setting the user','line_number':283,'multiline':False]
['text':' and system time to the half of thew actual system ticks-value','line_number':284,'multiline':False]
['text':' and the child user and system time to 0.','line_number':285,'multiline':False]
['text':' Rather ugly but at least it suppresses compiler errors...','line_number':286,'multiline':False]
['text':' Unfortunately, this of course *does* have an severe impact on','line_number':287,'multiline':False]
['text':' dependant libraries, actually this is chrono only! Here it will','line_number':288,'multiline':False]
['text':' not be possible to correctly use user and system times! But','line_number':289,'multiline':False]
['text':' as vxWorks is lacking the ability to calculate user and system','line_number':290,'multiline':False]
['text':' process times there seems to be no other possible solution.','line_number':291,'multiline':False]
['text':' User CPU time','line_number':293,'multiline':False]
['text':' System CPU time','line_number':294,'multiline':False]
['text':' User CPU time of terminated child processes','line_number':295,'multiline':False]
['text':' System CPU time of terminated child processes','line_number':296,'multiline':False]
['text':' vxWorks is lacking the concept of a child process!','line_number':307,'multiline':False]
['text':' -> Set the wait times for childs to 0','line_number':308,'multiline':False]
['text':' __cplusplus','line_number':316,'multiline':False]
['text':' _WRS_VXWORKS_MAJOR < 7','line_number':317,'multiline':False]
['text':' FD_ZERO uses bzero() but doesn't include strings.h','line_number':321,'multiline':False]
['text':' Put the selfmade functions into the std-namespace, just in case','line_number':323,'multiline':False]
['text':' __cplusplus','line_number':336,'multiline':False]
['text':' Some more macro-magic:','line_number':338,'multiline':False]
['text':' vxWorks-around: Some functions are not present or broken in vxWorks','line_number':339,'multiline':False]
['text':'                 but may be patched to life via helper macros...','line_number':340,'multiline':False]
['text':' Include signal.h which might contain a typo to be corrected here','line_number':342,'multiline':False]
['text':' getpagesize is deprecated anyway!','line_number':346,'multiline':False]
['text':' lstat() == stat(), as vxWorks has no symlinks!','line_number':347,'multiline':False]
['text':' Is file a socket?','line_number':351,'multiline':False]
['text':' vxWorks has no FPE_FLTINV, so define one as a dummy','line_number':354,'multiline':False]
['text':' Correct a supposed typo in vxWorks' <signal.h>','line_number':357,'multiline':False]
['text':' locale_t is a POSIX-extension, currently not present in vxWorks!','line_number':359,'multiline':False]
['text':' #include boilerplate code:','line_number':361,'multiline':False]
['text':' vxWorks lies about XSI conformance, there is no nl_types.h:','line_number':364,'multiline':False]
['text':' vxWorks 7 adds C++11 support ','line_number':367,'multiline':False]
['text':' however it is optional, and does not match exactly the support determined','line_number':368,'multiline':False]
['text':' by examining the Dinkum STL version and GCC version (or ICC and DCC) ','line_number':369,'multiline':False]
['text':' C11 addressof operator on memory location','line_number':371,'multiline':False]
['text':' max_digits10 in test/../print_helper.hpp','line_number':374,'multiline':False]
['text':'serialization/test/test_list.cpp','line_number':383,'multiline':False]
['text':'math/../test_data.hpp','line_number':387,'multiline':False]
['text':' workaround link error in spirit','line_number':400,'multiline':False]
['text':' NONE is used in enums in lamda and other libraries','line_number':405,'multiline':False]
['text':' restrict is an iostreams class','line_number':407,'multiline':False]
['text':' affects some typeof tests','line_number':409,'multiline':False]
['text':' use fake poll() from Unix layer in ASIO to get full functionality ','line_number':412,'multiline':False]
['text':' most libraries will use select() but this define allows 'iostream' functionality','line_number':413,'multiline':False]
['text':' which is based on poll() only','line_number':414,'multiline':False]
