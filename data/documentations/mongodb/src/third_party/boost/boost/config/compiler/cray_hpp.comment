['text':'  Copyright 2011 John Maddock','line_number':1,'multiline':False]
['text':'  Copyright 2013, 2017-2018 Cray, Inc.','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'  See http://www.boost.org for most recent version.','line_number':7,'multiline':False]
['text':' Cray C++ compiler setup.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' There are a few parameters that affect the macros defined in this file:','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' - What version of CCE (Cray Compiling Environment) are we running? This','line_number':13,'multiline':False]
['text':'   comes from the '_RELEASE_MAJOR', '_RELEASE_MINOR', and','line_number':14,'multiline':False]
['text':'   '_RELEASE_PATCHLEVEL' macros.','line_number':15,'multiline':False]
['text':' - What C++ standards conformance level are we using (e.g. '-h','line_number':16,'multiline':False]
['text':'   std=c++14')? This comes from the '__cplusplus' macro.','line_number':17,'multiline':False]
['text':' - Are we using GCC extensions ('-h gnu' or '-h nognu')? If we have '-h','line_number':18,'multiline':False]
['text':'   gnu' then CCE emulates GCC, and the macros '__GNUC__',','line_number':19,'multiline':False]
['text':'   '__GNUC_MINOR__', and '__GNUC_PATCHLEVEL__' are defined.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':' This file is organized as follows:','line_number':22,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':' - Verify that the combination of parameters listed above is supported.','line_number':24,'multiline':False]
['text':'   If we have an unsupported combination, we abort with '#error'.','line_number':25,'multiline':False]
['text':' - Establish baseline values for all Boost macros.','line_number':26,'multiline':False]
['text':' - Apply changes to the baseline macros based on compiler version. These','line_number':27,'multiline':False]
['text':'   changes are cummulative so each version section only describes the','line_number':28,'multiline':False]
['text':'   changes since the previous version.','line_number':29,'multiline':False]
['text':'   - Within each version section, we may also apply changes based on','line_number':30,'multiline':False]
['text':'     other parameters (i.e. C++ standards conformance level and GCC','line_number':31,'multiline':False]
['text':'     extensions).','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' To test changes to this file:','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':' ```','line_number':36,'multiline':False]
['text':' module load cce/8.6.5 # Pick the version you want to test.','line_number':37,'multiline':False]
['text':' cd boost/libs/config/test/all','line_number':38,'multiline':False]
['text':' b2 -j 8 toolset=cray cxxstd=03 cxxstd=11 cxxstd=14 cxxstd-dialect=gnu linkflags=-lrt','line_number':39,'multiline':False]
['text':' ```','line_number':40,'multiline':False]
['text':' Note: Using 'cxxstd-dialect=iso' is not supported at this time (the','line_number':41,'multiline':False]
['text':' tests run, but many tests fail).','line_number':42,'multiline':False]
['text':'','line_number':43,'multiline':False]
['text':' Note: 'linkflags=-lrt' is needed in Cray Linux Environment. Otherwise','line_number':44,'multiline':False]
['text':' you get an 'undefined reference to clock_gettime' error.','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' Note: If a test '*_fail.cpp' file compiles, but fails to run, then it is','line_number':47,'multiline':False]
['text':' reported as a defect. However, this is not actually a defect. This is an','line_number':48,'multiline':False]
['text':' area where the test system is somewhat broken. Tests that are failing','line_number':49,'multiline':False]
['text':' because of this problem are noted in the comments.','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' Pay attention to the macro definitions for the macros you wish to','line_number':52,'multiline':False]
['text':' modify. For example, only macros categorized as compiler macros should','line_number':53,'multiline':False]
['text':' appear in this file; platform macros should not appear in this file.','line_number':54,'multiline':False]
['text':' Also, some macros have to be defined to specific values; it is not','line_number':55,'multiline':False]
['text':' always enough to define or undefine a macro.','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':' Macro definitions are available in the source code at:','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' `boost/libs/config/doc/html/boost_config/boost_macro_reference.html`','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' Macro definitions are also available online at:','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' http://www.boost.org/doc/libs/master/libs/config/doc/html/boost_config/boost_macro_reference.html','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':' Typically, if you enable a feature, and the tests pass, then you have','line_number':66,'multiline':False]
['text':' nothing to worry about. However, it's sometimes hard to figure out if a','line_number':67,'multiline':False]
['text':' disabled feature needs to stay disabled. To get a list of disabled','line_number':68,'multiline':False]
['text':' features, run 'b2' in 'boost/libs/config/checks'. These are the macros','line_number':69,'multiline':False]
['text':' you should pay attention to (in addition to macros that cause test','line_number':70,'multiline':False]
['text':' failures).','line_number':71,'multiline':False]
['text':'//','line_number':73,'multiline':False]
['text':'// Front matter','line_number':74,'multiline':False]
['text':'//','line_number':75,'multiline':False]
['text':' In a developer build of the Cray compiler (i.e. a compiler built by a','line_number':77,'multiline':False]
['text':' Cray employee), the release patch level is reported as "x". This gives','line_number':78,'multiline':False]
['text':' versions that look like e.g. "8.6.x".','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' To accomplish this, the the Cray compiler preprocessor inserts:','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' #define _RELEASE_PATCHLEVEL x','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':' If we are using a developer build of the compiler, we want to use the','line_number':85,'multiline':False]
['text':' configuration macros for the most recent patch level of the release. To','line_number':86,'multiline':False]
['text':' accomplish this, we'll pretend that _RELEASE_PATCHLEVEL is 99.','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' However, it's difficult to detect if _RELEASE_PATCHLEVEL is x. We must','line_number':89,'multiline':False]
['text':' consider that the x will be expanded if x is defined as a macro','line_number':90,'multiline':False]
['text':' elsewhere. For example, imagine if someone put "-D x=3" on the command','line_number':91,'multiline':False]
['text':' line, and _RELEASE_PATCHLEVEL is x. Then _RELEASE_PATCHLEVEL would','line_number':92,'multiline':False]
['text':' expand to 3, and we could not distinguish it from an actual','line_number':93,'multiline':False]
['text':' _RELEASE_PATCHLEVEL of 3. This problem only affects developer builds; in','line_number':94,'multiline':False]
['text':' production builds, _RELEASE_PATCHLEVEL is always an integer.','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':' IMPORTANT: In developer builds, if x is defined as a macro, you will get','line_number':97,'multiline':False]
['text':' an incorrect configuration. The behavior in this case is undefined.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' Even if x is not defined, we have to use some trickery to detect if','line_number':100,'multiline':False]
['text':' _RELEASE_PATCHLEVEL is x. First we define BOOST_CRAY_x to some arbitrary','line_number':101,'multiline':False]
['text':' magic value, 9867657. Then we use BOOST_CRAY_APPEND to append the','line_number':102,'multiline':False]
['text':' expanded value of _RELEASE_PATCHLEVEL to the string "BOOST_CRAY_".','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' - If _RELEASE_PATCHLEVEL is undefined, we get "BOOST_CRAY_".','line_number':105,'multiline':False]
['text':' - If _RELEASE_PATCHLEVEL is 5, we get "BOOST_CRAY_5".','line_number':106,'multiline':False]
['text':' - If _RELEASE_PATCHLEVEL is x (and x is not defined) we get','line_number':107,'multiline':False]
['text':'   "BOOST_CRAY_x":','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' Then we check if BOOST_CRAY_x is equal to the output of','line_number':110,'multiline':False]
['text':' BOOST_CRAY_APPEND. In other words, the output of BOOST_CRAY_APPEND is','line_number':111,'multiline':False]
['text':' treated as a macro name, and expanded again. If we can safely assume','line_number':112,'multiline':False]
['text':' that BOOST_CRAY_ is not a macro defined as our magic number, and','line_number':113,'multiline':False]
['text':' BOOST_CRAY_5 is not a macro defined as our magic number, then the only','line_number':114,'multiline':False]
['text':' way the equality test can pass is if _RELEASE_PATCHLEVEL expands to x.','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':' So, that is how we detect if we are using a developer build of the Cray','line_number':117,'multiline':False]
['text':' compiler.','line_number':118,'multiline':False]
['text':' Arbitrary number','line_number':120,'multiline':False]
['text':' This is a developer build.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':' - _RELEASE_PATCHLEVEL is defined as x, and x is not defined as a macro.','line_number':128,'multiline':False]
['text':' Pretend _RELEASE_PATCHLEVEL is 99, so we get the configuration for the','line_number':130,'multiline':False]
['text':' most recent patch level in this release.','line_number':131,'multiline':False]
['text':' This is a production build.','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':' _RELEASE_PATCHLEVEL is not defined as x, or x is defined as a macro.','line_number':139,'multiline':False]
['text':' BOOST_CRAY_x == BOOST_CRAY_APPEND(_RELEASE_PATCHLEVEL)','line_number':143,'multiline':False]
['text':' Since the Cray compiler defines '__GNUC__', we have to emulate some','line_number':158,'multiline':False]
['text':' additional GCC macros in order to make everything work.','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':' FIXME: Perhaps Cray should fix the compiler to define these additional','line_number':161,'multiline':False]
['text':' macros for GCC emulation?','line_number':162,'multiline':False]
['text':'//','line_number':168,'multiline':False]
['text':'// Parameter validation','line_number':169,'multiline':False]
['text':'//','line_number':170,'multiline':False]
['text':' FIXME: Do we really need to support compilers before 8.5? Do they pass','line_number':172,'multiline':False]
['text':' the Boost.Config tests?','line_number':173,'multiline':False]
['text':' We only support recent EDG based compilers.','line_number':179,'multiline':False]
['text':'//','line_number':185,'multiline':False]
['text':'// Baseline values','line_number':186,'multiline':False]
['text':'//','line_number':187,'multiline':False]
['text':'#define BOOST_BCB_PARTIAL_SPECIALIZATION_BUG','line_number':228,'multiline':False]
['text':'#define BOOST_HAS_FPCLASSIFY','line_number':230,'multiline':False]
['text':'','line_number':235,'multiline':False]
['text':' Everything that follows is working around what are thought to be','line_number':236,'multiline':False]
['text':' compiler shortcomings. Revist all of these regularly.','line_number':237,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':'#define BOOST_USE_ENUM_STATIC_ASSERT','line_number':240,'multiline':False]
['text':'#define BOOST_BUGGY_INTEGRAL_CONSTANT_EXPRESSIONS //(this may be implied by the previous #define','line_number':241,'multiline':False]
['text':' These constants should be provided by the compiler.','line_number':243,'multiline':False]
['text':'//','line_number':254,'multiline':False]
['text':'// Version changes','line_number':255,'multiline':False]
['text':'//','line_number':256,'multiline':False]
['text':'','line_number':258,'multiline':False]
['text':' 8.5.0','line_number':259,'multiline':False]
['text':'','line_number':260,'multiline':False]
['text':' __cplusplus < 201402L','line_number':330,'multiline':False]
['text':' __cplusplus >= 201103L','line_number':332,'multiline':False]
['text':' BOOST_CRAY_VERSION >= 80500','line_number':334,'multiline':False]
['text':'','line_number':336,'multiline':False]
['text':' 8.6.4','line_number':337,'multiline':False]
['text':' (versions prior to 8.6.5 do not define _RELEASE_PATCHLEVEL)','line_number':338,'multiline':False]
['text':'','line_number':339,'multiline':False]
['text':' This is a platform macro, but it improves test results.','line_number':345,'multiline':False]
['text':' This is correct. Test compiles, but fails to run.','line_number':346,'multiline':False]
['text':' This is correct, even though '*_fail.cpp' test fails.','line_number':354,'multiline':False]
['text':' 'BOOST_NO_DEDUCED_TYPENAME' test is broken. The test files are enabled /','line_number':358,'multiline':False]
['text':' disabled with an '#ifdef BOOST_DEDUCED_TYPENAME'. However,','line_number':359,'multiline':False]
['text':' 'boost/libs/config/include/boost/config/detail/suffix.hpp' ensures that','line_number':360,'multiline':False]
['text':' 'BOOST_DEDUCED_TYPENAME' is always defined (the value it is defined as','line_number':361,'multiline':False]
['text':' depends on 'BOOST_NO_DEDUCED_TYPENAME'). So, modifying','line_number':362,'multiline':False]
['text':' 'BOOST_NO_DEDUCED_TYPENAME' has no effect on which tests are run.','line_number':363,'multiline':False]
['text':'','line_number':364,'multiline':False]
['text':' The 'no_ded_typename_pass.cpp' test should always compile and run','line_number':365,'multiline':False]
['text':' successfully, because 'BOOST_DEDUCED_TYPENAME' must always have an','line_number':366,'multiline':False]
['text':' appropriate value (it's not just something that you turn on or off).','line_number':367,'multiline':False]
['text':' Therefore, if you wish to test changes to 'BOOST_NO_DEDUCED_TYPENAME',','line_number':368,'multiline':False]
['text':' you have to modify 'no_ded_typename_pass.cpp' to unconditionally include','line_number':369,'multiline':False]
['text':' 'boost_no_ded_typename.ipp'.','line_number':370,'multiline':False]
['text':' This is correct. Test is broken.','line_number':371,'multiline':False]
['text':' __cplusplus >= 199711L','line_number':374,'multiline':False]
['text':' This is correct. Test compiles, but fails to run.','line_number':381,'multiline':False]
['text':' __cplusplus >= 201103L','line_number':385,'multiline':False]
['text':' __cplusplus == 201402L','line_number':390,'multiline':False]
['text':' BOOST_CRAY_VERSION >= 80600','line_number':392,'multiline':False]
['text':'','line_number':394,'multiline':False]
['text':' 8.6.5','line_number':395,'multiline':False]
['text':' (no change from 8.6.4)','line_number':396,'multiline':False]
['text':'','line_number':397,'multiline':False]
['text':'','line_number':399,'multiline':False]
['text':' 8.7.0','line_number':400,'multiline':False]
['text':'','line_number':401,'multiline':False]
['text':' __cplusplus >= 199711L','line_number':406,'multiline':False]
['text':' __cplusplus >= 201103L','line_number':411,'multiline':False]
['text':' __cplusplus == 201402L','line_number':414,'multiline':False]
['text':' BOOST_CRAY_VERSION >= 80700','line_number':416,'multiline':False]
['text':'','line_number':418,'multiline':False]
['text':' Next release','line_number':419,'multiline':False]
['text':'','line_number':420,'multiline':False]
['text':' __cplusplus >= 199711L','line_number':425,'multiline':False]
['text':' __cplusplus >= 201103L','line_number':428,'multiline':False]
['text':' __cplusplus == 201402L','line_number':431,'multiline':False]
['text':' BOOST_CRAY_VERSION > 80799','line_number':433,'multiline':False]
['text':'//','line_number':435,'multiline':False]
['text':'// Remove temporary macros','line_number':436,'multiline':False]
['text':'//','line_number':437,'multiline':False]
['text':' I've commented out some '#undef' statements to signify that we purposely','line_number':439,'multiline':False]
['text':' want to keep certain macros.','line_number':440,'multiline':False]
['text':'#undef __GXX_EXPERIMENTAL_CXX0X__','line_number':442,'multiline':False]
['text':'#undef BOOST_COMPILER','line_number':443,'multiline':False]
