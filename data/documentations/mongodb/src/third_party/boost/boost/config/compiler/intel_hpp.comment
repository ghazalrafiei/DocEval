['text':'  (C) Copyright John Maddock 2001-8.','line_number':1,'multiline':False]
['text':'  (C) Copyright Peter Dimov 2001.','line_number':2,'multiline':False]
['text':'  (C) Copyright Jens Maurer 2001.','line_number':3,'multiline':False]
['text':'  (C) Copyright David Abrahams 2002 - 2003.','line_number':4,'multiline':False]
['text':'  (C) Copyright Aleksey Gurtovoy 2002 - 2003.','line_number':5,'multiline':False]
['text':'  (C) Copyright Guillaume Melquiond 2002 - 2003.','line_number':6,'multiline':False]
['text':'  (C) Copyright Beman Dawes 2003.','line_number':7,'multiline':False]
['text':'  (C) Copyright Martin Wille 2003.','line_number':8,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':9,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':10,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':'  See http://www.boost.org for most recent version.','line_number':13,'multiline':False]
['text':'  Intel compiler setup:','line_number':15,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' These appear to be supported, even though VC++ may not support them:','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' This one may be a little risky to enable??','line_number':33,'multiline':False]
['text':' defined(_MSC_VER)','line_number':42,'multiline':False]
['text':' Broken in all versions up to 17 (newer versions not tested)','line_number':51,'multiline':False]
['text':' defined(_MSC_VER)','line_number':60,'multiline':False]
['text':' Intel bug in 12.1.','line_number':66,'multiline':False]
['text':' Flags determined by comparing output of 'icpc -dM -E' with and without '-std=c++0x'','line_number':78,'multiline':False]
['text':' defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 1500) && (defined(_MSC_VER) || defined(__GNUC__))','line_number':106,'multiline':False]
['text':' Intel bug in 12.1.','line_number':112,'multiline':False]
['text':' Flags determined by comparing output of 'icpc -dM -E' with and without '-std=c++0x'','line_number':124,'multiline':False]
['text':' added check for <= VC 7 (Peter Dimov)','line_number':154,'multiline':False]
['text':' Boost libraries assume strong standard conformance unless otherwise','line_number':156,'multiline':False]
['text':' indicated by a config macro. As configured by Intel, the EDG front-end','line_number':157,'multiline':False]
['text':' requires certain compiler options be set to achieve that strong conformance.','line_number':158,'multiline':False]
['text':' Particularly /Qoption,c,--arg_dep_lookup (reported by Kirk Klobe & Thomas Witt)','line_number':159,'multiline':False]
['text':' and /Zc:wchar_t,forScope. See boost-root/tools/build/intel-win32-tools.jam for','line_number':160,'multiline':False]
['text':' details as they apply to particular versions of the compiler. When the','line_number':161,'multiline':False]
['text':' compiler does not predefine a macro indicating if an option has been set,','line_number':162,'multiline':False]
['text':' this config file simply assumes the option has been set.','line_number':163,'multiline':False]
['text':' Thus BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP will not be defined, even if','line_number':164,'multiline':False]
['text':' the compiler option is not enabled.','line_number':165,'multiline':False]
['text':' Void returns, 64 bit integrals don't work when emulating VC 6 (Peter Dimov)','line_number':170,'multiline':False]
['text':' See http://aspn.activestate.com/ASPN/Mail/Message/boost/1614864','line_number':183,'multiline':False]
['text':' We should test the macro _WCHAR_T_DEFINED to check if the compiler','line_number':187,'multiline':False]
['text':' supports wchar_t natively. *BUT* there is a problem here: the standard','line_number':188,'multiline':False]
['text':' headers define this macro if they typedef wchar_t. Anyway, we're lucky','line_number':189,'multiline':False]
['text':' because they define it without a value, while Intel C++ defines it','line_number':190,'multiline':False]
['text':' to 1. So we can check its value to see if the macro was defined natively','line_number':191,'multiline':False]
['text':' or not.','line_number':192,'multiline':False]
['text':' Under UNIX, the situation is exactly the same, but the macro _WCHAR_T','line_number':193,'multiline':False]
['text':' is used instead.','line_number':194,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':' Figure out when Intel is emulating this gcc bug','line_number':202,'multiline':False]
['text':' (All Intel versions prior to 9.0.26, and versions','line_number':203,'multiline':False]
['text':' later than that if they are set up to emulate gcc 3.2','line_number':204,'multiline':False]
['text':' or earlier):','line_number':205,'multiline':False]
['text':'','line_number':206,'multiline':False]
['text':' GCC or VC emulation:','line_number':212,'multiline':False]
['text':'','line_number':215,'multiline':False]
['text':' Verify that we have actually got BOOST_NO_INTRINSIC_WCHAR_T','line_number':216,'multiline':False]
['text':' set correctly, if we don't do this now, we will get errors later','line_number':217,'multiline':False]
['text':' in type_traits code among other things, getting this correct','line_number':218,'multiline':False]
['text':' for the Intel compiler is actually remarkably fragile and tricky:','line_number':219,'multiline':False]
['text':'','line_number':220,'multiline':False]
['text':' if you see an error here then you need to unset BOOST_NO_INTRINSIC_WCHAR_T','line_number':226,'multiline':False]
['text':' where it is defined above:','line_number':227,'multiline':False]
['text':' if you see an error here then define BOOST_NO_INTRINSIC_WCHAR_T on the command line:','line_number':232,'multiline':False]
['text':' I checked version 6.0 build 020312Z, it implements the NRVO.','line_number':247,'multiline':False]
['text':' Correct this as you find out which version of the compiler','line_number':248,'multiline':False]
['text':' implemented the NRVO first.  (Daniel Frey)','line_number':249,'multiline':False]
['text':' Branch prediction hints','line_number':254,'multiline':False]
['text':' I'm not sure 8.0 was the first version to support these builtins,','line_number':255,'multiline':False]
['text':' update the condition if the version is not accurate. (Andrey Semashev)','line_number':256,'multiline':False]
['text':' RTTI','line_number':262,'multiline':False]
['text':' __RTTI is the EDG macro','line_number':263,'multiline':False]
['text':' __INTEL_RTTI__ is the Intel macro','line_number':264,'multiline':False]
['text':' __GXX_RTTI is the g++ macro','line_number':265,'multiline':False]
['text':' _CPPRTTI is the MSVC++ macro','line_number':266,'multiline':False]
['text':' in MS mode, static typeid works even when RTTI is off','line_number':273,'multiline':False]
['text':'','line_number':280,'multiline':False]
['text':' versions check:','line_number':281,'multiline':False]
['text':' we don't support Intel prior to version 6.0:','line_number':282,'multiline':False]
['text':' Intel on MacOS requires','line_number':287,'multiline':False]
['text':' Intel on Altix Itanium','line_number':292,'multiline':False]
['text':'','line_number':297,'multiline':False]
['text':' An attempt to value-initialize a pointer-to-member may trigger an','line_number':298,'multiline':False]
['text':' internal error on Intel <= 11.1 (last checked version), as was','line_number':299,'multiline':False]
['text':' reported by John Maddock, Intel support issue 589832, May 2010.','line_number':300,'multiline':False]
['text':' Moreover, according to test results from Huang-Vista-x86_32_intel,','line_number':301,'multiline':False]
['text':' intel-vc9-win-11.1 may leave a non-POD array uninitialized, in some','line_number':302,'multiline':False]
['text':' cases when it should be value-initialized.','line_number':303,'multiline':False]
['text':' (Niels Dekker, LKEB, May 2010)','line_number':304,'multiline':False]
['text':' Apparently Intel 12.1 (compiler version number 9999 !!) has the same issue (compiler regression).','line_number':305,'multiline':False]
['text':'','line_number':312,'multiline':False]
['text':' Dynamic shared object (DSO) and dynamic-link library (DLL) support','line_number':313,'multiline':False]
['text':'','line_number':314,'multiline':False]
['text':' Type aliasing hint','line_number':321,'multiline':False]
['text':'','line_number':326,'multiline':False]
['text':' C++0x features','line_number':327,'multiline':False]
['text':' For each feature we need to check both the Intel compiler version, ','line_number':328,'multiline':False]
['text':' and the version of MSVC or GCC that we are emulating.','line_number':329,'multiline':False]
['text':' See http://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler/','line_number':330,'multiline':False]
['text':' for a list of which features were implemented in which Intel releases.','line_number':331,'multiline':False]
['text':'','line_number':332,'multiline':False]
['text':' BOOST_NO_CXX11_CONSTEXPR:','line_number':334,'multiline':False]
['text':' Available in earlier Intel versions, but fail our tests:','line_number':336,'multiline':False]
['text':' BOOST_NO_CXX11_NULLPTR:','line_number':339,'multiline':False]
['text':' BOOST_NO_CXX11_TEMPLATE_ALIASES','line_number':343,'multiline':False]
['text':' BOOST_NO_CXX11_DECLTYPE','line_number':348,'multiline':False]
['text':' BOOST_NO_CXX11_DECLTYPE_N3276','line_number':353,'multiline':False]
['text':' BOOST_NO_CXX11_FUNCTION_TEMPLATE_DEFAULT_ARGS','line_number':358,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':363,'multiline':False]
['text':' This is available from earlier Intel versions, but breaks Filesystem and other libraries:','line_number':365,'multiline':False]
['text':' BOOST_NO_CXX11_STATIC_ASSERT','line_number':369,'multiline':False]
['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':374,'multiline':False]
['text':' BOOST_NO_CXX11_VARIADIC_MACROS','line_number':379,'multiline':False]
['text':' BOOST_NO_CXX11_AUTO_DECLARATIONS','line_number':384,'multiline':False]
['text':' BOOST_NO_CXX11_AUTO_MULTIDECLARATIONS','line_number':389,'multiline':False]
['text':' BOOST_NO_CXX11_CHAR16_T','line_number':394,'multiline':False]
['text':' BOOST_NO_CXX11_CHAR32_T','line_number':399,'multiline':False]
['text':' BOOST_NO_CXX11_DEFAULTED_FUNCTIONS','line_number':404,'multiline':False]
['text':' BOOST_NO_CXX11_DELETED_FUNCTIONS','line_number':409,'multiline':False]
['text':' BOOST_NO_CXX11_HDR_INITIALIZER_LIST','line_number':414,'multiline':False]
['text':' BOOST_NO_CXX11_SCOPED_ENUMS','line_number':419,'multiline':False]
['text':' This is available but broken in earlier Intel releases.','line_number':421,'multiline':False]
['text':' BOOST_NO_SFINAE_EXPR','line_number':425,'multiline':False]
['text':' BOOST_NO_CXX11_SFINAE_EXPR','line_number':430,'multiline':False]
['text':' BOOST_NO_CXX11_EXPLICIT_CONVERSION_OPERATORS','line_number':435,'multiline':False]
['text':' This is available in earlier Intel releases, but breaks Multiprecision:','line_number':437,'multiline':False]
['text':' BOOST_NO_CXX11_LAMBDAS','line_number':441,'multiline':False]
['text':' BOOST_NO_CXX11_LOCAL_CLASS_TEMPLATE_PARAMETERS','line_number':446,'multiline':False]
['text':' BOOST_NO_CXX11_RANGE_BASED_FOR','line_number':451,'multiline':False]
['text':' BOOST_NO_CXX11_RAW_LITERALS','line_number':456,'multiline':False]
['text':' BOOST_NO_CXX11_UNICODE_LITERALS','line_number':461,'multiline':False]
['text':' BOOST_NO_CXX11_NOEXCEPT','line_number':466,'multiline':False]
['text':' Available in earlier Intel release, but generates errors when used with ','line_number':468,'multiline':False]
['text':' conditional exception specifications, for example in multiprecision:','line_number':469,'multiline':False]
['text':' BOOST_NO_CXX11_UNIFIED_INITIALIZATION_SYNTAX','line_number':473,'multiline':False]
['text':' BOOST_NO_CXX11_USER_DEFINED_LITERALS','line_number':478,'multiline':False]
['text':' BOOST_NO_CXX11_ALIGNAS','line_number':483,'multiline':False]
['text':' BOOST_NO_CXX11_TRAILING_RESULT_TYPES','line_number':488,'multiline':False]
['text':' BOOST_NO_CXX11_INLINE_NAMESPACES','line_number':493,'multiline':False]
['text':' BOOST_NO_CXX11_REF_QUALIFIERS','line_number':498,'multiline':False]
['text':' BOOST_NO_CXX11_FINAL','line_number':503,'multiline':False]
['text':' BOOST_NO_CXX11_OVERRIDE','line_number':504,'multiline':False]
['text':' BOOST_NO_CXX11_UNRESTRICTED_UNION','line_number':510,'multiline':False]
['text':' defined(BOOST_INTEL_STDCXX0X)','line_number':515,'multiline':False]
['text':'','line_number':517,'multiline':False]
['text':' Broken in all versions up to 15:','line_number':518,'multiline':False]
['text':' A regression in Intel's compiler means that <tuple> seems to be broken in this release as well as <future> :','line_number':527,'multiline':False]
['text':'','line_number':533,'multiline':False]
['text':' fenv.h appears not to work with Intel prior to 12.0:','line_number':534,'multiline':False]
['text':'','line_number':535,'multiline':False]
['text':' Intel 13.10 fails to access defaulted functions of a base class declared in private or protected sections,','line_number':539,'multiline':False]
['text':' producing the following errors:','line_number':540,'multiline':False]
['text':' error #453: protected function "..." (declared at ...") is not accessible through a "..." pointer or object','line_number':541,'multiline':False]
['text':' defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 1500) && (defined(_MSC_VER) || defined(__GNUC__))','line_number':562,'multiline':False]
['text':'','line_number':563,'multiline':False]
['text':' last known and checked version:','line_number':564,'multiline':False]
['text':'','line_number':569,'multiline':False]
['text':'      We don't emit this warning any more, since we have so few','line_number':570,'multiline':False]
['text':'      defect macros set anyway (just the one).','line_number':571,'multiline':False]
['text':'','line_number':572,'multiline':False]
['text':'#     pragma message("boost: Unknown compiler version - please run the configure tests and report the results")','line_number':573,'multiline':False]
