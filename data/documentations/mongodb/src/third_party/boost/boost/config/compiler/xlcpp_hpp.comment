['text':' (C) Copyright Douglas Gregor 2010','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'  See http://www.boost.org for most recent version.','line_number':7,'multiline':False]
['text':'  compiler setup for IBM XL C/C++ for Linux (Little Endian) based on clang.','line_number':9,'multiline':False]
['text':' Detecting `-fms-extension` compiler flag assuming that _MSC_VER defined when that flag is used.','line_number':13,'multiline':False]
['text':' When compiling with clang before __has_extension was defined,','line_number':18,'multiline':False]
['text':' even if one writes 'defined(__has_extension) && __has_extension(xxx)',','line_number':19,'multiline':False]
['text':' clang reports a compiler error. So the only workaround found is:','line_number':20,'multiline':False]
['text':' Branch prediction hints','line_number':48,'multiline':False]
['text':' Clang supports "long long" in all compilation modes.','line_number':56,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':' Dynamic shared object (DSO) and dynamic-link library (DLL) support','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':' The BOOST_FALLTHROUGH macro can be used to annotate implicit fall-through','line_number':69,'multiline':False]
['text':' between switch labels.','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':' Currently clang on Windows using VC++ RTL does not support C++11's char16_t or char32_t','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' clang < 3.5 has a defect with dependent type, like following.','line_number':224,'multiline':False]
['text':'','line_number':225,'multiline':False]
['text':'  template <class T>','line_number':226,'multiline':False]
['text':'  constexpr typename enable_if<pred<T> >::type foo(T &)','line_number':227,'multiline':False]
['text':'  { } // error: no return statement in constexpr function','line_number':228,'multiline':False]
['text':'','line_number':229,'multiline':False]
['text':' This issue also affects C++11 mode, but C++11 constexpr requires return stmt.','line_number':230,'multiline':False]
['text':' Therefore we don't care such case.','line_number':231,'multiline':False]
['text':'','line_number':232,'multiline':False]
['text':' Note that we can't check Clang version directly as the numbering system changes depending who's','line_number':233,'multiline':False]
['text':' creating the Clang release (see https://github.com/boostorg/config/pull/39#issuecomment-59927873)','line_number':234,'multiline':False]
['text':' so instead verify that we have a feature that was introduced at the same time as working C++14','line_number':235,'multiline':False]
['text':' constexpr (generic lambda's in this case):','line_number':236,'multiline':False]
['text':'','line_number':237,'multiline':False]
['text':' Clang 3.9+ in c++1z','line_number':258,'multiline':False]
['text':' All versions with __cplusplus above this value seem to support this:','line_number':269,'multiline':False]
['text':' Unused attribute:','line_number':274,'multiline':False]
['text':' Type aliasing hint.','line_number':279,'multiline':False]
['text':' Macro used to identify the Clang compiler.','line_number':288,'multiline':False]
