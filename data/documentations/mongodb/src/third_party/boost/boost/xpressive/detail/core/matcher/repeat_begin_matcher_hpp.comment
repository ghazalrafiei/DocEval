['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':' repeat_end_matcher.hpp','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':4,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' MS compatible compilers support #pragma once','line_number':11,'multiline':False]
['text':'','line_number':23,'multiline':False]
['text':' Note: here is the variable-width xpression quantifier. It always','line_number':24,'multiline':False]
['text':' matches at least once, so if the min is 0, it is the responsibility','line_number':25,'multiline':False]
['text':' of the parser to make it alternate with an epsilon matcher.','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':29,'multiline':False]
['text':' repeat_begin_matcher','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' "push" next onto the stack, so it can be "popped" in','line_number':53,'multiline':False]
['text':' repeat_end_matcher and used to loop back.','line_number':54,'multiline':False]
