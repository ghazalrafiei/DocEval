['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'/ \file cpp_regex_traits.hpp','line_number':2,'multiline':False]
['text':'/ Contains the definition of the cpp_regex_traits\<\> template, which is a','line_number':3,'multiline':False]
['text':'/ wrapper for std::locale that can be used to customize the behavior of','line_number':4,'multiline':False]
['text':'/ static and dynamic regexes.','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':7,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':' MS compatible compilers support #pragma once','line_number':14,'multiline':False]
['text':' From John Maddock:','line_number':34,'multiline':False]
['text':' Fix for gcc prior to 3.4: std::ctype<wchar_t> doesn't allow masks to be combined, for example:','line_number':35,'multiline':False]
['text':' std::use_facet<std::ctype<wchar_t> >(locale()).is(std::ctype_base::lower|std::ctype_base::upper, L'a');','line_number':36,'multiline':False]
['text':' incorrectly returns false.','line_number':37,'multiline':False]
['text':' NOTE: later version of the gcc define __GLIBCXX__, not __GLIBCPP__','line_number':38,'multiline':False]
['text':' define an unsigned integral typedef of the same size as std::ctype_base::mask','line_number':48,'multiline':False]
['text':' Calculate what the size of the umaskex_t type should be to fix the 3 extra bitmasks','line_number':52,'multiline':False]
['text':'   11 char categories in ctype_base','line_number':53,'multiline':False]
['text':' +  3 extra categories for xpressive','line_number':54,'multiline':False]
['text':' = 14 total bits needed','line_number':55,'multiline':False]
['text':' define an unsigned integral type with at least umaskex_bits','line_number':58,'multiline':False]
['text':' cast a ctype mask to a umaskex_t','line_number':62,'multiline':False]
['text':' Work around a gcc warning on cygwin','line_number':70,'multiline':False]
['text':' an unsigned integer with the highest bit set','line_number':85,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':88,'multiline':False]
['text':' unused_mask','line_number':89,'multiline':False]
['text':'   find a bit in an int that isn't set','line_number':90,'multiline':False]
['text':' Reserve some bits for the implementation','line_number':121,'multiline':False]
['text':' Bitwise-or all the ctype masks together','line_number':132,'multiline':False]
['text':' define a new mask for "underscore" ("word" == alnum | underscore)','line_number':138,'multiline':False]
['text':' define a new mask for "blank"','line_number':141,'multiline':False]
['text':' define a new mask for "newline"','line_number':144,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':148,'multiline':False]
['text':' Ugly work-around for buggy ctype facets.','line_number':149,'multiline':False]
['text':' convenient constant for the extra masks','line_number':188,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':191,'multiline':False]
['text':' cpp_regex_traits_base','line_number':192,'multiline':False]
['text':'   BUGBUG this should be replaced with a regex facet that lets you query for','line_number':193,'multiline':False]
['text':'   an array of underscore characters and an array of line separator characters.','line_number':194,'multiline':False]
['text':' HACKHACK Cygwin and mingw have buggy ctype facets for wchar_t','line_number':212,'multiline':False]
['text':' namespace detail','line_number':308,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':311,'multiline':False]
['text':' cpp_regex_traits','line_number':312,'multiline':False]
['text':'','line_number':313,'multiline':False]
['text':'/ \brief Encapsaulates a \c std::locale for use by the','line_number':314,'multiline':False]
['text':'/ \c basic_regex\<\> class template.','line_number':315,'multiline':False]
['text':'/ Initialize a cpp_regex_traits object to use the specified std::locale,','line_number':327,'multiline':False]
['text':'/ or the global std::locale if none is specified.','line_number':328,'multiline':False]
['text':'/','line_number':329,'multiline':False]
['text':'/ Checks two cpp_regex_traits objects for equality','line_number':337,'multiline':False]
['text':'/','line_number':338,'multiline':False]
['text':'/ \return this->getloc() == that.getloc().','line_number':339,'multiline':False]
['text':'/ Checks two cpp_regex_traits objects for inequality','line_number':345,'multiline':False]
['text':'/','line_number':346,'multiline':False]
['text':'/ \return this->getloc() != that.getloc().','line_number':347,'multiline':False]
['text':'/ Convert a char to a Char','line_number':353,'multiline':False]
['text':'/','line_number':354,'multiline':False]
['text':'/ \param ch The source character.','line_number':355,'multiline':False]
['text':'/ \return std::use_facet\<std::ctype\<char_type\> \>(this->getloc()).widen(ch).','line_number':356,'multiline':False]
['text':'/ Returns a hash value for a Char in the range [0, UCHAR_MAX]','line_number':362,'multiline':False]
['text':'/','line_number':363,'multiline':False]
['text':'/ \param ch The source character.','line_number':364,'multiline':False]
['text':'/ \return a value between 0 and UCHAR_MAX, inclusive.','line_number':365,'multiline':False]
['text':'/ No-op','line_number':371,'multiline':False]
['text':'/','line_number':372,'multiline':False]
['text':'/ \param ch The source character.','line_number':373,'multiline':False]
['text':'/ \return ch','line_number':374,'multiline':False]
['text':'/ Converts a character to lower-case using the internally-stored std::locale.','line_number':380,'multiline':False]
['text':'/','line_number':381,'multiline':False]
['text':'/ \param ch The source character.','line_number':382,'multiline':False]
['text':'/ \return std::tolower(ch, this->getloc()).','line_number':383,'multiline':False]
['text':'/ Converts a character to lower-case using the internally-stored std::locale.','line_number':389,'multiline':False]
['text':'/','line_number':390,'multiline':False]
['text':'/ \param ch The source character.','line_number':391,'multiline':False]
['text':'/ \return std::tolower(ch, this->getloc()).','line_number':392,'multiline':False]
['text':'/ Converts a character to upper-case using the internally-stored std::locale.','line_number':398,'multiline':False]
['text':'/','line_number':399,'multiline':False]
['text':'/ \param ch The source character.','line_number':400,'multiline':False]
['text':'/ \return std::toupper(ch, this->getloc()).','line_number':401,'multiline':False]
['text':'/ Returns a \c string_type containing all the characters that compare equal','line_number':407,'multiline':False]
['text':'/ disregrarding case to the one passed in. This function can only be called','line_number':408,'multiline':False]
['text':'/ if <tt>has_fold_case\<cpp_regex_traits\<Char\> \>::value</tt> is \c true.','line_number':409,'multiline':False]
['text':'/','line_number':410,'multiline':False]
['text':'/ \param ch The source character.','line_number':411,'multiline':False]
['text':'/ \return \c string_type containing all chars which are equal to \c ch when disregarding','line_number':412,'multiline':False]
['text':'/     case','line_number':413,'multiline':False]
['text':'/ Checks to see if a character is within a character range.','line_number':427,'multiline':False]
['text':'/','line_number':428,'multiline':False]
['text':'/ \param first The bottom of the range, inclusive.','line_number':429,'multiline':False]
['text':'/ \param last The top of the range, inclusive.','line_number':430,'multiline':False]
['text':'/ \param ch The source character.','line_number':431,'multiline':False]
['text':'/ \return first <= ch && ch <= last.','line_number':432,'multiline':False]
['text':'/ Checks to see if a character is within a character range, irregardless of case.','line_number':438,'multiline':False]
['text':'/','line_number':439,'multiline':False]
['text':'/ \param first The bottom of the range, inclusive.','line_number':440,'multiline':False]
['text':'/ \param last The top of the range, inclusive.','line_number':441,'multiline':False]
['text':'/ \param ch The source character.','line_number':442,'multiline':False]
['text':'/ \return in_range(first, last, ch) || in_range(first, last, tolower(ch, this->getloc())) ||','line_number':443,'multiline':False]
['text':'/     in_range(first, last, toupper(ch, this->getloc()))','line_number':444,'multiline':False]
['text':'/ \attention The default implementation doesn't do proper Unicode','line_number':445,'multiline':False]
['text':'/     case folding, but this is the best we can do with the standard','line_number':446,'multiline':False]
['text':'/     ctype facet.','line_number':447,'multiline':False]
['text':' NOTE: this default implementation doesn't do proper Unicode','line_number':450,'multiline':False]
['text':' case folding, but this is the best we can do with the standard','line_number':451,'multiline':False]
['text':' std::ctype facet.','line_number':452,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':458,'multiline':False]
['text':'string_type transform(char_type const *begin, char_type const *end) const','line_number':459,'multiline':False]
['text':'{','line_number':460,'multiline':False]
['text':'    return this->collate_->transform(begin, end);','line_number':461,'multiline':False]
['text':'}','line_number':462,'multiline':False]
['text':'/ Returns a sort key for the character sequence designated by the iterator range [F1, F2)','line_number':464,'multiline':False]
['text':'/ such that if the character sequence [G1, G2) sorts before the character sequence [H1, H2)','line_number':465,'multiline':False]
['text':'/ then v.transform(G1, G2) \< v.transform(H1, H2).','line_number':466,'multiline':False]
['text':'/','line_number':467,'multiline':False]
['text':'/ \attention Not currently used','line_number':468,'multiline':False]
['text':'string_type str(begin, end);','line_number':472,'multiline':False]
['text':'return this->transform(str.data(), str.data() + str.size());','line_number':473,'multiline':False]
['text':'/ Returns a sort key for the character sequence designated by the iterator range [F1, F2)','line_number':479,'multiline':False]
['text':'/ such that if the character sequence [G1, G2) sorts before the character sequence [H1, H2)','line_number':480,'multiline':False]
['text':'/ when character case is not considered then','line_number':481,'multiline':False]
['text':'/ v.transform_primary(G1, G2) \< v.transform_primary(H1, H2).','line_number':482,'multiline':False]
['text':'/','line_number':483,'multiline':False]
['text':'/ \attention Not currently used','line_number':484,'multiline':False]
['text':' TODO implement me','line_number':488,'multiline':False]
['text':'/ Returns a sequence of characters that represents the collating element','line_number':492,'multiline':False]
['text':'/ consisting of the character sequence designated by the iterator range [F1, F2).','line_number':493,'multiline':False]
['text':'/ Returns an empty string if the character sequence is not a valid collating element.','line_number':494,'multiline':False]
['text':'/','line_number':495,'multiline':False]
['text':'/ \attention Not currently used','line_number':496,'multiline':False]
['text':' TODO implement me','line_number':500,'multiline':False]
['text':'/ For the character class name represented by the specified character sequence,','line_number':504,'multiline':False]
['text':'/ return the corresponding bitmask representation.','line_number':505,'multiline':False]
['text':'/','line_number':506,'multiline':False]
['text':'/ \param begin A forward iterator to the start of the character sequence representing','line_number':507,'multiline':False]
['text':'/     the name of the character class.','line_number':508,'multiline':False]
['text':'/ \param end The end of the character sequence.','line_number':509,'multiline':False]
['text':'/ \param icase Specifies whether the returned bitmask should represent the case-insensitive','line_number':510,'multiline':False]
['text':'/     version of the character class.','line_number':511,'multiline':False]
['text':'/ \return A bitmask representing the character class.','line_number':512,'multiline':False]
['text':' convert the string to lowercase','line_number':523,'multiline':False]
['text':' erase case-sensitivity if icase==true','line_number':531,'multiline':False]
['text':'/ Tests a character against a character class bitmask.','line_number':539,'multiline':False]
['text':'/','line_number':540,'multiline':False]
['text':'/ \param ch The character to test.','line_number':541,'multiline':False]
['text':'/ \param mask The character class bitmask against which to test.','line_number':542,'multiline':False]
['text':'/ \pre mask is a bitmask returned by lookup_classname, or is several such masks bit-or'ed','line_number':543,'multiline':False]
['text':'/     together.','line_number':544,'multiline':False]
['text':'/ \return true if the character is a member of any of the specified character classes, false','line_number':545,'multiline':False]
['text':'/     otherwise.','line_number':546,'multiline':False]
['text':'/ Convert a digit character into the integer it represents.','line_number':552,'multiline':False]
['text':'/','line_number':553,'multiline':False]
['text':'/ \param ch The digit character.','line_number':554,'multiline':False]
['text':'/ \param radix The radix to use for the conversion.','line_number':555,'multiline':False]
['text':'/ \pre radix is one of 8, 10, or 16.','line_number':556,'multiline':False]
['text':'/ \return -1 if ch is not a digit character, the integer value of the character otherwise.','line_number':557,'multiline':False]
['text':'/     The conversion is performed by imbueing a std::stringstream with this-\>getloc();','line_number':558,'multiline':False]
['text':'/     setting the radix to one of oct, hex or dec; inserting ch into the stream; and','line_number':559,'multiline':False]
['text':'/     extracting an int.','line_number':560,'multiline':False]
['text':'/ Imbues *this with loc','line_number':573,'multiline':False]
['text':'/','line_number':574,'multiline':False]
['text':'/ \param loc A std::locale.','line_number':575,'multiline':False]
['text':'/ \return the previous std::locale used by *this.','line_number':576,'multiline':False]
['text':'this->collate_ = &BOOST_USE_FACET(std::collate<char_type>, this->loc_);','line_number':582,'multiline':False]
['text':'/ Returns the current std::locale used by *this.','line_number':587,'multiline':False]
['text':'/','line_number':588,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':596,'multiline':False]
['text':' char_class_pair','line_number':597,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':598,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':605,'multiline':False]
['text':' char_class','line_number':606,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':607,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':633,'multiline':False]
['text':' lookup_classname_impl','line_number':634,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':635,'multiline':False]
['text':' find the classname','line_number':639,'multiline':False]
['text':'/ INTERNAL ONLY','line_number':651,'multiline':False]
['text':'std::collate<char_type> const *collate_;','line_number':667,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':670,'multiline':False]
['text':' cpp_regex_traits<>::hash specializations','line_number':671,'multiline':False]
['text':' Narrow C++ traits has fold_case() member function.','line_number':698,'multiline':False]
