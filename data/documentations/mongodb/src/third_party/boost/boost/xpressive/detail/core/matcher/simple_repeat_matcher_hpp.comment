['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':' simple_repeat_matcher.hpp','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':4,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' MS compatible compilers support #pragma once','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':28,'multiline':False]
['text':' simple_repeat_traits','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':56,'multiline':False]
['text':' simple_repeat_matcher','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':' it is the job of the parser to make sure this never happens','line_number':78,'multiline':False]
['text':' greedy, fixed-width quantifier','line_number':93,'multiline':False]
['text':' greedily match as much as we can','line_number':101,'multiline':False]
['text':' If this repeater is at the front of the pattern, note','line_number':107,'multiline':False]
['text':' how much of the input we consumed so that a repeated search','line_number':108,'multiline':False]
['text':' doesn't have to cover the same ground again.','line_number':109,'multiline':False]
['text':' try matching the rest of the pattern, and back off if necessary','line_number':123,'multiline':False]
['text':' non-greedy fixed-width quantification','line_number':138,'multiline':False]
['text':' when greedily matching any character, skip to the end instead of iterating there.','line_number':168,'multiline':False]
['text':' is there enough room?','line_number':175,'multiline':False]
['text':' BUGBUG can all non-greedy quantification be done with the fixed width quantifier?','line_number':222,'multiline':False]
['text':' BUGBUG matchers are chained together using static_xpression so that matchers to','line_number':224,'multiline':False]
['text':' the left can invoke matchers to the right. This is so that if the left matcher','line_number':225,'multiline':False]
['text':' succeeds but the right matcher fails, the left matcher is given the opportunity','line_number':226,'multiline':False]
['text':' to try something else. This is how backtracking works. However, if the left matcher','line_number':227,'multiline':False]
['text':' can succeed only one way (as with any_matcher, for example), it does not need','line_number':228,'multiline':False]
['text':' backtracking. In this case, leaving its stack frame active is a waste of stack','line_number':229,'multiline':False]
['text':' space. Can something be done?','line_number':230,'multiline':False]
