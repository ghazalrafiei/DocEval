['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':' quant_style.hpp','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':4,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' MS compatible compilers support #pragma once','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':26,'multiline':False]
['text':' is_xpr','line_number':27,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':34,'multiline':False]
['text':' quant_enum','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':44,'multiline':False]
['text':' quant_style','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' Which quantification strategy to use?','line_number':52,'multiline':False]
['text':' how many characters this matcher consumes','line_number':55,'multiline':False]
['text':' whether this matcher has observable side-effects','line_number':58,'multiline':False]
['text':'','line_number':73,'multiline':True]
['text':'    // Replace transmogrify stupidity with rebindable matchers/placeholders','line_number':75,'multiline':False]
['text':'#define BOOST_XPR_IDENTITY_REBIND(TYPE)                                         \/','line_number':76,'multiline':False]
['text':'    template<typename BidiIter, typename ICase, typename Traits>                \/','line_number':77,'multiline':False]
['text':'    struct rebind                                                               \/','line_number':78,'multiline':False]
['text':'    {                                                                           \/','line_number':79,'multiline':False]
['text':'        typedef TYPE type;                                                      \/','line_number':80,'multiline':False]
['text':'    };                                                                          \/','line_number':81,'multiline':False]
['text':'    /**/','line_number':82,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':84,'multiline':False]
['text':' quant_style_none','line_number':85,'multiline':False]
['text':'  this sub-expression cannot be quantified','line_number':86,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':89,'multiline':False]
['text':' quant_style_fixed_unknown_width','line_number':90,'multiline':False]
['text':'  this sub-expression is fixed width for the purpose of quantification, but','line_number':91,'multiline':False]
['text':'  the width cannot be determined at compile time. An example would be the','line_number':92,'multiline':False]
['text':'  string_matcher or the mark_matcher.','line_number':93,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':96,'multiline':False]
['text':' quant_style_variable_width','line_number':97,'multiline':False]
['text':'  this sub-expression can match a variable number of characters','line_number':98,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':101,'multiline':False]
['text':' quant_style_fixed_width','line_number':102,'multiline':False]
['text':'  for when the sub-expression has a fixed width that is known at compile time','line_number':103,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':110,'multiline':False]
['text':' quant_style_assertion','line_number':111,'multiline':False]
['text':'  a zero-width assertion.','line_number':112,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':118,'multiline':False]
['text':' quant_type','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':' namespace boost::xpressive::detail','line_number':127,'multiline':False]
