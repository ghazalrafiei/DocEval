['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':' parse_charset.hpp','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Copyright 2008 Eric Niebler. Distributed under the Boost','line_number':4,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' MS compatible compilers support #pragma once','line_number':11,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':37,'multiline':False]
['text':' escape_value','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':49,'multiline':False]
['text':' char_overflow_handler','line_number':50,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' throw(regex_error)','line_number':54,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':68,'multiline':False]
['text':' parse_escape','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' define an unsigned type the same size as char_type','line_number':80,'multiline':False]
['text':' bell character','line_number':107,'multiline':False]
['text':' escape character','line_number':112,'multiline':False]
['text':' control character','line_number':117,'multiline':False]
['text':' Convert to character according to ECMA-262, section 15.10.2.10:','line_number':127,'multiline':False]
['text':' formfeed character','line_number':131,'multiline':False]
['text':' newline','line_number':136,'multiline':False]
['text':' return','line_number':141,'multiline':False]
['text':' horizontal tab','line_number':146,'multiline':False]
['text':' vertical tab','line_number':151,'multiline':False]
['text':' hex escape sequence','line_number':156,'multiline':False]
['text':' Unicode escape sequence','line_number':164,'multiline':False]
['text':' backslash','line_number':172,'multiline':False]
['text':'esc.ch_ = BOOST_XPR_CHAR_(char_type, '\\');','line_number':174,'multiline':False]
['text':'++begin;','line_number':175,'multiline':False]
['text':'break;','line_number':176,'multiline':False]
['text':' all other escaped characters represent themselves','line_number':177,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':187,'multiline':False]
['text':' parse_charset','line_number':188,'multiline':False]
['text':'','line_number':189,'multiline':False]
['text':' check to see if we have an inverse charset','line_number':209,'multiline':False]
['text':' skip the end token if-and-only-if it is the first token in the charset','line_number':216,'multiline':False]
['text':' remember the current position and grab the next token','line_number':231,'multiline':False]
['text':' remember the current position','line_number':240,'multiline':False]
['text':' ch_prev is lower bound of a range','line_number':244,'multiline':False]
['text':' un-get these tokens and fall through','line_number':249,'multiline':False]
['text':' backspace','line_number':257,'multiline':False]
['text':' not a range.','line_number':271,'multiline':False]
['text':' backup to hyphen token','line_number':272,'multiline':False]
['text':' un-get these tokens','line_number':291,'multiline':False]
['text':' backspace','line_number':297,'multiline':False]
['text':' un-get this token','line_number':321,'multiline':False]
['text':' namespace boost::xpressive::detail','line_number':366,'multiline':False]
