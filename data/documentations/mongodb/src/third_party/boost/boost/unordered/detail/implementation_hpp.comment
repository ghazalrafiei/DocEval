['text':' Copyright (C) 2003-2004 Jeremy B. Maitin-Shepard.','line_number':1,'multiline':False]
['text':' Copyright (C) 2005-2016 Daniel James','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':4,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':60,'multiline':False]
['text':' Configuration','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' Unless documented elsewhere these configuration macros should be considered','line_number':63,'multiline':False]
['text':' an implementation detail, I'll try not to break them, but you never know.','line_number':64,'multiline':False]
['text':' Use Sun C++ workarounds','line_number':66,'multiline':False]
['text':' I'm not sure which versions of the compiler require these workarounds, so','line_number':67,'multiline':False]
['text':' I'm just using them of everything older than the current test compilers','line_number':68,'multiline':False]
['text':' (as of May 2017).','line_number':69,'multiline':False]
['text':' BOOST_UNORDERED_EMPLACE_LIMIT = The maximum number of parameters in','line_number':79,'multiline':False]
['text':' emplace (not including things like hints). Don't set it to a lower value, as','line_number':80,'multiline':False]
['text':' that might break something.','line_number':81,'multiline':False]
['text':' BOOST_UNORDERED_TUPLE_ARGS','line_number':87,'multiline':False]
['text':'','line_number':88,'multiline':False]
['text':' Maximum number of std::tuple members to support, or 0 if std::tuple','line_number':89,'multiline':False]
['text':' isn't avaiable. More are supported when full C++11 is used.','line_number':90,'multiline':False]
['text':' Already defined, so do nothing','line_number':92,'multiline':False]
['text':' Assume if we have C++11 tuple it's properly variadic,','line_number':95,'multiline':False]
['text':' and just use a max number of 10 arguments.','line_number':96,'multiline':False]
['text':' Visual C++ has a decent enough tuple for piecewise construction,','line_number':100,'multiline':False]
['text':' so use that if available, using _VARIADIC_MAX for the maximum','line_number':101,'multiline':False]
['text':' number of parameters. Note that this comes after the check','line_number':102,'multiline':False]
['text':' for a full C++11 tuple.','line_number':103,'multiline':False]
['text':' Assume that we don't have std::tuple','line_number':113,'multiline':False]
['text':' BOOST_UNORDERED_CXX11_CONSTRUCTION','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' Use C++11 construction, requires variadic arguments, good construct support','line_number':124,'multiline':False]
['text':' in allocator_traits and piecewise construction of std::pair','line_number':125,'multiline':False]
['text':' Otherwise allocators aren't used for construction/destruction','line_number':126,'multiline':False]
['text':' Sun C++ std::pair piecewise construction doesn't seem to be exception safe.','line_number':131,'multiline':False]
['text':' (At least for Sun C++ 12.5 using libstdc++).','line_number':132,'multiline':False]
['text':' Piecewise construction in GCC 4.6 doesn't work for uncopyable types.','line_number':135,'multiline':False]
['text':' BOOST_UNORDERED_SUPPRESS_DEPRECATED','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':' Define to stop deprecation attributes','line_number':148,'multiline':False]
['text':' BOOST_UNORDERED_DEPRECATED','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' Wrapper around various depreaction attributes.','line_number':156,'multiline':False]
['text':' BOOST_UNORDERED_TEMPLATE_DEDUCTION_GUIDES','line_number':177,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':234,'multiline':False]
['text':' iterator SFINAE','line_number':235,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':260,'multiline':False]
['text':' primes','line_number':261,'multiline':False]
['text':' clang-format off','line_number':263,'multiline':False]
['text':' clang-format on','line_number':272,'multiline':False]
['text':' no throw','line_number':303,'multiline':False]
['text':' no throw','line_number':316,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':329,'multiline':False]
['text':' insert_size/initial_size','line_number':330,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':356,'multiline':False]
['text':' compressed','line_number':357,'multiline':False]
['text':' Prevent assignment just to make use of assign or','line_number':445,'multiline':False]
['text':' move_assign explicit.','line_number':446,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':450,'multiline':False]
['text':' pair_traits','line_number':451,'multiline':False]
['text':'','line_number':452,'multiline':False]
['text':' Used to get the types from a pair without instantiating it.','line_number':453,'multiline':False]
['text':' assignment operator could not be generated.','line_number':469,'multiline':False]
['text':' behavior change: an object of POD type','line_number':470,'multiline':False]
['text':' constructed with an initializer of the form ()','line_number':471,'multiline':False]
['text':' will be default-initialized.','line_number':472,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':475,'multiline':False]
['text':' Bits and pieces for implementing traits','line_number':476,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':537,'multiline':False]
['text':' emplace_args','line_number':538,'multiline':False]
['text':'','line_number':539,'multiline':False]
['text':' Either forwarding variadic arguments, or storing the arguments in','line_number':540,'multiline':False]
['text':' emplace_args##n','line_number':541,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':667,'multiline':False]
['text':'','line_number':668,'multiline':False]
['text':' Some utilities for implementing allocator_traits, but useful elsewhere so','line_number':669,'multiline':False]
['text':' they're always defined.','line_number':670,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':676,'multiline':False]
['text':' Integral_constrant, true_type, false_type','line_number':677,'multiline':False]
['text':'','line_number':678,'multiline':False]
['text':' Uses the standard versions if available.','line_number':679,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':703,'multiline':False]
['text':' Type checkers used for the transparent member functions added by C++20 and up','line_number':704,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':736,'multiline':False]
['text':' Explicitly call a destructor','line_number':737,'multiline':False]
['text':' unreferenced formal parameter','line_number':741,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':752,'multiline':False]
['text':' value_base','line_number':753,'multiline':False]
['text':'','line_number':754,'multiline':False]
['text':' Space used to store values.','line_number':755,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':780,'multiline':False]
['text':' optional','line_number':781,'multiline':False]
['text':' TODO: Use std::optional when available.','line_number':782,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////','line_number':867,'multiline':False]
['text':'','line_number':868,'multiline':False]
['text':' Allocator traits','line_number':869,'multiline':False]
['text':'','line_number':870,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':889,'multiline':False]
['text':' Functions used to construct nodes. Emulates variadic construction,','line_number':890,'multiline':False]
['text':' piecewise construction etc.','line_number':891,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':893,'multiline':False]
['text':' construct_value','line_number':894,'multiline':False]
['text':'','line_number':895,'multiline':False]
['text':' Only use allocator_traits::construct, allocator_traits::destroy when full','line_number':896,'multiline':False]
['text':' C++11 support is available.','line_number':897,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':954,'multiline':False]
['text':' Construct from tuple','line_number':955,'multiline':False]
['text':'','line_number':956,'multiline':False]
['text':' Used to emulate piecewise construction.','line_number':957,'multiline':False]
['text':' construct_from_tuple for boost::tuple','line_number':971,'multiline':False]
['text':' The workaround for old Sun compilers comes later in the file.','line_number':972,'multiline':False]
['text':' construct_from_tuple for std::tuple','line_number':1003,'multiline':False]
['text':' construct_from_tuple for boost::tuple on old versions of sunpro.','line_number':1037,'multiline':False]
['text':'','line_number':1038,'multiline':False]
['text':' Old versions of Sun C++ had problems with template overloads of','line_number':1039,'multiline':False]
['text':' boost::tuple, so to fix it I added a distinct type for each length to','line_number':1040,'multiline':False]
['text':' the overloads. That means there's no possible ambiguity between the','line_number':1041,'multiline':False]
['text':' different overloads, so that the compiler doesn't get confused','line_number':1042,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':1107,'multiline':False]
['text':' Trait to check for piecewise construction.','line_number':1108,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':1126,'multiline':False]
['text':' Construct from variadic parameters','line_number':1127,'multiline':False]
['text':' For backwards compatibility, implement a special case for','line_number':1137,'multiline':False]
['text':' piecewise_construct with boost::tuple','line_number':1138,'multiline':False]
['text':' Special case for piecewise_construct','line_number':1157,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':1186,'multiline':False]
['text':' Construct from variadic parameters','line_number':1187,'multiline':False]
['text':' Special case for piecewise_construct','line_number':1196,'multiline':False]
['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':1220,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':1222,'multiline':False]
['text':' Construct from emplace_args','line_number':1223,'multiline':False]
['text':' Explicitly write out first three overloads for the sake of sane','line_number':1225,'multiline':False]
['text':' error messages.','line_number':1226,'multiline':False]
['text':' Use a macro for the rest.','line_number':1252,'multiline':False]
['text':' Construct with piecewise_construct','line_number':1276,'multiline':False]
['text':' BOOST_NO_CXX11_VARIADIC_TEMPLATES','line_number':1300,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////','line_number':1310,'multiline':False]
['text':'','line_number':1311,'multiline':False]
['text':' Node construction','line_number':1312,'multiline':False]
['text':' no throw','line_number':1332,'multiline':False]
['text':' no throw','line_number':1383,'multiline':False]
['text':' Some nicer construct_node functions, might try to','line_number':1410,'multiline':False]
['text':' improve implementation later.','line_number':1411,'multiline':False]
['text':' It doesn't seem to be possible to construct a tuple with 3 variadic','line_number':1484,'multiline':False]
['text':' rvalue reference members when using older versions of clang with','line_number':1485,'multiline':False]
['text':' libstdc++, so just use std::make_tuple instead of','line_number':1486,'multiline':False]
['text':' std::forward_as_tuple.','line_number':1487,'multiline':False]
['text':' The 'iterator_detail' namespace was a misguided attempt at avoiding ADL','line_number':1588,'multiline':False]
['text':' in the detail namespace. It didn't work because the template parameters','line_number':1589,'multiline':False]
['text':' were in detail. I'm not changing it at the moment to be safe. I might','line_number':1590,'multiline':False]
['text':' do in the future if I change the iterator types.','line_number':1591,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':1596,'multiline':False]
['text':' Iterators','line_number':1597,'multiline':False]
['text':'','line_number':1598,'multiline':False]
['text':' all no throw','line_number':1599,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////','line_number':1850,'multiline':False]
['text':'','line_number':1851,'multiline':False]
['text':' Node Holder','line_number':1852,'multiline':False]
['text':'','line_number':1853,'multiline':False]
['text':' Temporary store for nodes. Deletes any that aren't used.','line_number':1854,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////','line_number':1934,'multiline':False]
['text':'','line_number':1935,'multiline':False]
['text':' Bucket','line_number':1936,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////','line_number':1970,'multiline':False]
['text':'','line_number':1971,'multiline':False]
['text':' Hash Policy','line_number':1972,'multiline':False]
['text':'bcount_log2','line_number':1982,'multiline':True]
['text':' https://en.wikipedia.org/wiki/Hash_function#Fibonacci_hashing','line_number':2003,'multiline':False]
['text':' SizeT const m = 11400714819323198485ull; // 2^64 / phi','line_number':2004,'multiline':False]
['text':' https://en.wikipedia.org/wiki/Hash_function#Fibonacci_hashing','line_number':2039,'multiline':False]
['text':' 2^32 / phi','line_number':2040,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':2096,'multiline':False]
['text':' Functions','line_number':2097,'multiline':False]
['text':'','line_number':2098,'multiline':False]
['text':' This double buffers the storage for the hash function and key equality','line_number':2099,'multiline':False]
['text':' predicate in order to have exception safe copy/swap. To do so,','line_number':2100,'multiline':False]
['text':' use 'construct_spare' to construct in the spare space, and then when','line_number':2101,'multiline':False]
['text':' ready to use 'switch_functions' to switch to the new functions.','line_number':2102,'multiline':False]
['text':' If an exception is thrown between these two calls, use','line_number':2103,'multiline':False]
['text':' 'cleanup_spare_functions' to destroy the unused constructed functions.','line_number':2104,'multiline':False]
['text':' 0/1 - Currently active functions','line_number':2127,'multiline':False]
['text':' +2 - Both constructed','line_number':2128,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////','line_number':2225,'multiline':False]
['text':' rvalue parameters when type can't be a BOOST_RV_REF(T) parameter','line_number':2226,'multiline':False]
['text':' e.g. for int','line_number':2227,'multiline':False]
['text':' conditional expression is constant','line_number':2256,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':2259,'multiline':False]
['text':' convert double to std::size_t','line_number':2260,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2317,'multiline':False]
['text':' Members','line_number':2318,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2337,'multiline':False]
['text':' Data access','line_number':2338,'multiline':False]
['text':' -1 to account for the start bucket.','line_number':2398,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2452,'multiline':False]
['text':' Load methods','line_number':2453,'multiline':False]
['text':' From 6.3.1/13:','line_number':2459,'multiline':False]
['text':' Only resize when size >= mlf_ * count','line_number':2460,'multiline':False]
['text':' From insert/emplace requirements:','line_number':2480,'multiline':False]
['text':'','line_number':2481,'multiline':False]
['text':' size <= mlf_ * count','line_number':2482,'multiline':False]
['text':' => count >= size / mlf_','line_number':2483,'multiline':False]
['text':'','line_number':2484,'multiline':False]
['text':' Or from rehash post-condition:','line_number':2485,'multiline':False]
['text':'','line_number':2486,'multiline':False]
['text':' count >= size / mlf_','line_number':2487,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2495,'multiline':False]
['text':' Constructors','line_number':2496,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2536,'multiline':False]
['text':' Clear buckets and Create buckets','line_number':2537,'multiline':False]
['text':'','line_number':2538,'multiline':False]
['text':' IMPORTANT: If the container already contains any elements, the','line_number':2539,'multiline':False]
['text':'            buckets will not contain any links to them. This will','line_number':2540,'multiline':False]
['text':'            need to be dealt with, for example by:','line_number':2541,'multiline':False]
['text':'            - deleting them','line_number':2542,'multiline':False]
['text':'            - putting them in a 'node_holder' for future use','line_number':2543,'multiline':False]
['text':'              (as in assignment)','line_number':2544,'multiline':False]
['text':'            - placing them in buckets (see rehash_impl)','line_number':2545,'multiline':False]
['text':' Clear the bucket pointers.','line_number':2547,'multiline':False]
['text':' Create container buckets. If the container already contains any','line_number':2556,'multiline':False]
['text':' buckets','line_number':2557,'multiline':False]
['text':' the linked list will be transferred to the new buckets, but none','line_number':2558,'multiline':False]
['text':' of the bucket pointers will be set. See above note.','line_number':2559,'multiline':False]
['text':'','line_number':2560,'multiline':False]
['text':' Strong exception safety.','line_number':2561,'multiline':False]
['text':' Construct the new buckets and dummy node, and destroy the old','line_number':2566,'multiline':False]
['text':' buckets','line_number':2567,'multiline':False]
['text':' nothrow from here...','line_number':2587,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2600,'multiline':False]
['text':' Swap and Move','line_number':2601,'multiline':False]
['text':' According to 23.2.1.8, if propagate_on_container_swap is','line_number':2607,'multiline':False]
['text':' false the behaviour is undefined unless the allocators','line_number':2608,'multiline':False]
['text':' are equal.','line_number':2609,'multiline':False]
['text':' Not nothrow swappable','line_number':2618,'multiline':False]
['text':' Nothrow swappable','line_number':2649,'multiline':False]
['text':' Only swaps the allocators if propagate_on_container_swap.','line_number':2666,'multiline':False]
['text':' If not propagate_on_container_swap and allocators aren't','line_number':2667,'multiline':False]
['text':' equal, behaviour is undefined.','line_number':2668,'multiline':False]
['text':' Only call with nodes allocated with the currect allocator, or','line_number':2678,'multiline':False]
['text':' one that is equal to it. (Can't assert because other's','line_number':2679,'multiline':False]
['text':' allocators might have already been moved).','line_number':2680,'multiline':False]
['text':' For use in the constructor when allocators might be different.','line_number':2694,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2719,'multiline':False]
['text':' Delete/destruct','line_number':2720,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2769,'multiline':False]
['text':' Fix buckets after delete/extract','line_number':2770,'multiline':False]
['text':'','line_number':2771,'multiline':False]
['text':' (prev,next) should mark an open range of nodes in a single bucket','line_number':2772,'multiline':False]
['text':' which','line_number':2773,'multiline':False]
['text':' have either been unlinked, or are about to be.','line_number':2774,'multiline':False]
['text':' If next is in the same bucket, then there's nothing to do.','line_number':2784,'multiline':False]
['text':' Update the bucket containing next.','line_number':2789,'multiline':False]
['text':' Check if this bucket is now empty.','line_number':2793,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2802,'multiline':False]
['text':' Clear','line_number':2803,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':2807,'multiline':False]
['text':' Assignment','line_number':2808,'multiline':False]
['text':' Strong exception safety.','line_number':2824,'multiline':False]
['text':' Delete everything with current allocators before assigning','line_number':2857,'multiline':False]
['text':' the new ones.','line_number':2858,'multiline':False]
['text':' Copy over other data, all no throw.','line_number':2862,'multiline':False]
['text':' Finally copy the elements.','line_number':2867,'multiline':False]
['text':' Propagate allocator','line_number':2885,'multiline':False]
['text':' Don't propagate allocator','line_number':2901,'multiline':False]
['text':' Accessors','line_number':2950,'multiline':False]
['text':' Find Node','line_number':2962,'multiline':False]
['text':' the `first_in_group()` checks are required for the multi-containers','line_number':3009,'multiline':False]
['text':' for the unique containers, this condition seems to be always true','line_number':3010,'multiline':False]
['text':'','line_number':3011,'multiline':False]
['text':' Find the node before the key, so that it can be erased.','line_number':3023,'multiline':False]
['text':' Extract and erase','line_number':3030,'multiline':False]
['text':' Reserve and rehash','line_number':3062,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3069,'multiline':False]
['text':' Unique keys','line_number':3070,'multiline':False]
['text':' equals','line_number':3072,'multiline':False]
['text':' Emplace/Insert','line_number':3089,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3351,'multiline':False]
['text':' Insert range methods','line_number':3352,'multiline':False]
['text':'','line_number':3353,'multiline':False]
['text':' if hash function throws, or inserting > 1 element, basic exception','line_number':3354,'multiline':False]
['text':' safety strong otherwise','line_number':3355,'multiline':False]
['text':' Note: can't use get_key as '*i' might not be value_type - it','line_number':3363,'multiline':False]
['text':' could be a pair with first_types as key_type without const or','line_number':3364,'multiline':False]
['text':' a different second_type.','line_number':3365,'multiline':False]
['text':' No side effects in this initial code','line_number':3373,'multiline':False]
['text':' reserve has basic exception safety if the hash function','line_number':3408,'multiline':False]
['text':' throws, strong otherwise.','line_number':3409,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3416,'multiline':False]
['text':' Extract','line_number':3417,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3436,'multiline':False]
['text':' Erase','line_number':3437,'multiline':False]
['text':'','line_number':3438,'multiline':False]
['text':' no throw','line_number':3439,'multiline':False]
['text':' Find the node before i.','line_number':3470,'multiline':False]
['text':' Delete the nodes.','line_number':3475,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3486,'multiline':False]
['text':' fill_buckets_unique','line_number':3487,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3520,'multiline':False]
['text':' Equivalent keys','line_number':3521,'multiline':False]
['text':' Equality','line_number':3523,'multiline':False]
['text':' Emplace/Insert','line_number':3609,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3748,'multiline':False]
['text':' Insert range methods','line_number':3749,'multiline':False]
['text':' if hash function throws, or inserting > 1 element, basic exception','line_number':3751,'multiline':False]
['text':' safety. Strong otherwise','line_number':3752,'multiline':False]
['text':' Only require basic exception safety here','line_number':3765,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3786,'multiline':False]
['text':' Extract','line_number':3787,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3812,'multiline':False]
['text':' Erase','line_number':3813,'multiline':False]
['text':'','line_number':3814,'multiline':False]
['text':' no throw','line_number':3815,'multiline':False]
['text':' Delete the nodes.','line_number':3858,'multiline':False]
['text':' Is it inefficient to call fix_bucket for every node?','line_number':3859,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':3877,'multiline':False]
['text':' fill_buckets','line_number':3878,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':3930,'multiline':False]
['text':' Clear','line_number':3931,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////','line_number':3954,'multiline':False]
['text':' Reserve & Rehash','line_number':3955,'multiline':False]
['text':' basic exception safety','line_number':3957,'multiline':False]
['text':' if hash function throws, basic exception safety','line_number':3972,'multiline':False]
['text':' strong otherwise.','line_number':3973,'multiline':False]
['text':' Iterator through the rest of the group of equal nodes,','line_number':4013,'multiline':False]
['text':' setting the bucket.','line_number':4014,'multiline':False]
['text':' n is now the last node in the group','line_number':4025,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':4057,'multiline':False]
['text':' key extractors','line_number':4058,'multiline':False]
['text':'','line_number':4059,'multiline':False]
['text':' no throw','line_number':4060,'multiline':False]
['text':'','line_number':4061,'multiline':False]
['text':' 'extract_key' is called with the emplace parameters to return a','line_number':4062,'multiline':False]
['text':' key if available or 'no_key' is one isn't and will need to be','line_number':4063,'multiline':False]
['text':' constructed. This could be done by overloading the emplace','line_number':4064,'multiline':False]
['text':' implementation','line_number':4065,'multiline':False]
['text':' for the different cases, but that's a bit tricky on compilers without','line_number':4066,'multiline':False]
['text':' variadic templates.','line_number':4067,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////','line_number':4228,'multiline':False]
['text':' Unique nodes','line_number':4229,'multiline':False]
['text':' If the allocator uses raw pointers use ptr_node','line_number':4316,'multiline':False]
['text':' Otherwise use node.','line_number':4317,'multiline':False]
