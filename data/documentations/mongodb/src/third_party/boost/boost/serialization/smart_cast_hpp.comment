['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]
['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':9,'multiline':False]
['text':' smart_cast.hpp:','line_number':10,'multiline':False]
['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .','line_number':12,'multiline':False]
['text':' Use, modification and distribution is subject to the Boost Software','line_number':13,'multiline':False]
['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':14,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':15,'multiline':False]
['text':'  See http://www.boost.org/libs/serialization for updates, documentation, and revision history.','line_number':17,'multiline':False]
['text':' casting of pointers and references.','line_number':19,'multiline':False]
['text':' In casting between different C++ classes, there are a number of','line_number':21,'multiline':False]
['text':' rules that have to be kept in mind in deciding whether to use','line_number':22,'multiline':False]
['text':' static_cast or dynamic_cast.','line_number':23,'multiline':False]
['text':' a) dynamic casting can only be applied when one of the types is polymorphic','line_number':25,'multiline':False]
['text':' Otherwise static_cast must be used.','line_number':26,'multiline':False]
['text':' b) only dynamic casting can do runtime error checking','line_number':27,'multiline':False]
['text':' use of static_cast is generally un checked even when compiled for debug','line_number':28,'multiline':False]
['text':' c) static_cast would be considered faster than dynamic_cast.','line_number':29,'multiline':False]
['text':' If casting is applied to a template parameter, there is no apriori way','line_number':31,'multiline':False]
['text':' to know which of the two casting methods will be permitted or convenient.','line_number':32,'multiline':False]
['text':' smart_cast uses C++ type_traits, and program debug mode to select the','line_number':34,'multiline':False]
['text':' most convenient cast to use.','line_number':35,'multiline':False]
['text':' NULL','line_number':39,'multiline':False]
['text':' if we're in debug mode','line_number':86,'multiline':False]
['text':' do a checked dynamic cast','line_number':89,'multiline':False]
['text':' borland 5.51 chokes here so we can't use it','line_number':92,'multiline':False]
['text':' note: if remove_reference isn't function for these types','line_number':93,'multiline':False]
['text':' cross casting will be selected this will work but will','line_number':94,'multiline':False]
['text':' not be the most efficient method. This will conflict with','line_number':95,'multiline':False]
['text':' the original smart_cast motivation.','line_number':96,'multiline':False]
['text':' borland chokes w/o full qualification here','line_number':108,'multiline':False]
['text':' typex works around gcc 2.95 issue','line_number':112,'multiline':False]
['text':' unfortunately, this below fails to work for virtual base','line_number':139,'multiline':False]
['text':' classes.  need has_virtual_base to do this.','line_number':140,'multiline':False]
['text':' Subject for further study','line_number':141,'multiline':False]
['text':' borland chokes w/o full qualification here','line_number':175,'multiline':False]
['text':' if we get here, its because we are using one argument in the','line_number':222,'multiline':False]
['text':' cast on a system which doesn't support partial template','line_number':223,'multiline':False]
['text':' specialization','line_number':224,'multiline':False]
['text':' smart_cast_impl','line_number':232,'multiline':False]
['text':' this implements:','line_number':234,'multiline':False]
['text':' smart_cast<Target *, Source *>(Source * s)','line_number':235,'multiline':False]
['text':' smart_cast<Target &, Source &>(s)','line_number':236,'multiline':False]
['text':' note that it will fail with','line_number':237,'multiline':False]
['text':' smart_cast<Target &>(s)','line_number':238,'multiline':False]
['text':' else','line_number':250,'multiline':False]
['text':' else','line_number':253,'multiline':False]
['text':' else','line_number':256,'multiline':False]
['text':' this implements:','line_number':265,'multiline':False]
['text':' smart_cast_reference<Target &>(Source & s)','line_number':266,'multiline':False]
['text':' namespace serialization','line_number':272,'multiline':False]
['text':' namespace boost','line_number':273,'multiline':False]
['text':' BOOST_SERIALIZATION_SMART_CAST_HPP','line_number':275,'multiline':False]
