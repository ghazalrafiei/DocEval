['text':'  (C) Copyright Howard Hinnant','line_number':1,'multiline':False]
['text':'  (C) Copyright 2011 Vicente J. Botet Escriba','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'*
 * Duration formatting facet for output.
 ','line_number':8,'multiline':True]
['text':'*
     * @tparam ChatT a character type
     * @tparam OutputIterator a model of @c OutputIterator
     *
     * The @c duration_put facet provides facilities for formatted output of duration values.
     * The member function of @c duration_put take a duration and format it into character string representation.
     *
     ','line_number':36,'multiline':True]
['text':'*
       * Type of character the facet is instantiated on.
       ','line_number':48,'multiline':True]
['text':'*
       * Type of character string passed to member functions.
       ','line_number':52,'multiline':True]
['text':'*
       * Type of iterator used to write in the character buffer.
       ','line_number':56,'multiline':True]
['text':'*
       * Construct a duration_put facet.
       * @param refs
       * @Effects Construct a duration_put facet.
       * If the @c refs argument is @c 0 then destruction of the object is
       * delegated to the @c locale, or locales, containing it. This allows
       * the user to ignore lifetime management issues. On the other had,
       * if @c refs is @c 1 then the object must be explicitly deleted;
       * the @c locale will not do so. In this case, the object can be
       * maintained across the lifetime of multiple locales.
       ','line_number':61,'multiline':True]
['text':'*
       *
       * @param s an output stream iterator
       * @param ios a reference to a ios_base
       * @param fill the character used as filler
       * @param d the duration
       * @param pattern begin of the formatting pattern
       * @param pat_end end of the formatting pattern
       *
       * @Effects Steps through the sequence from @c pattern to @c pat_end,
       * identifying characters that are part of a pattern sequence. Each character
       * that is not part of a pattern sequence is written to @c s immediately, and
       * each pattern sequence, as it is identified, results in a call to
       * @c put_value or @c put_unit;
       * thus, pattern elements and other characters are interleaved in the output
       * in the order in which they appear in the pattern. Pattern sequences are
       * identified by converting each character @c c to a @c char value as if by
       * @c ct.narrow(c,0), where @c ct is a reference to @c ctype<charT> obtained from
       * @c ios.getloc(). The first character of each sequence is equal to @c '%',
       * followed by a pattern specifier character @c spec, which can be @c 'v' for
       * the duration value or @c 'u' for the duration unit. .
       * For each valid pattern sequence identified, calls
       * <c>put_value(s, ios, fill, d)</c> or <c>put_unit(s, ios, fill, d)</c>.
       *
       * @Returns An iterator pointing immediately after the last character produced.
       ','line_number':77,'multiline':True]
['text':'*
       *
       * @param s an output stream iterator
       * @param ios a reference to a ios_base
       * @param fill the character used as filler
       * @param d the duration
       * @Effects imbue in @c ios the @c duration_units_default facet if not already present.
       * Retrieves Stores the duration pattern from the @c duration_unit facet in let say @c str. Last as if
       * @code
       *   return put(s, ios, d, str.data(), str.data() + str.size());
       * @endcode
       * @Returns An iterator pointing immediately after the last character produced.
       ','line_number':159,'multiline':True]
['text':'*
       *
       * @param s an output stream iterator
       * @param ios a reference to a ios_base
       * @param fill the character used as filler
       * @param d the duration
       * @Effects As if s=std::use_facet<std::num_put<CharT, iter_type> >(ios.getloc()).put(s, ios, fill, static_cast<long int> (d.count())).
       * @Returns s, iterator pointing immediately after the last character produced.
       ','line_number':191,'multiline':True]
['text':'*
       *
       * @param s an output stream iterator
       * @param ios a reference to a ios_base
       * @param fill the character used as filler
       * @param d the duration
       * @Effects Let facet be the duration_units<CharT> facet associated to ios. If the associated unit is named,
       * as if
       * @code
          string_type str = facet.get_unit(get_duration_style(ios), d);
          s=std::copy(str.begin(), str.end(), s);
       * @endcode
       * Otherwise, format the unit as "[Period::num/Period::den]" followed by the unit associated to [N/D] obtained using facet.get_n_d_unit(get_duration_style(ios), d)
       * @Returns s, iterator pointing immediately after the last character produced.
       ','line_number':228,'multiline':True]
['text':'*
       * Unique identifier for this type of facet.
       ','line_number':297,'multiline':True]
['text':'*
       * @Effects Destroy the facet
       ','line_number':302,'multiline':True]
['text':' chrono','line_number':314,'multiline':False]
['text':' boost','line_number':315,'multiline':False]
['text':' header','line_number':317,'multiline':False]
