['text':'  (C) Copyright Howard Hinnant','line_number':1,'multiline':False]
['text':'  (C) Copyright 2011 Vicente J. Botet Escriba','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'*
 * Duration formatting facet for input.
 ','line_number':25,'multiline':True]
['text':' Reduce r * num / den','line_number':60,'multiline':False]
['text':' Conversion to Period is integral and not exact','line_number':66,'multiline':False]
['text':'*
     * @c duration_get is used to parse a character sequence, extracting
     * components of a duration into a class duration.
     * Each get member parses a format as produced by a corresponding format specifier to time_put<>::put.
     * If the sequence being parsed matches the correct format, the
     * corresponding member of the class duration argument are set to the
     * value used to produce the sequence;
     * otherwise either an error is reported or unspecified values are assigned.
     * In other words, user confirmation is required for reliable parsing of
     * user-entered durations, but machine-generated formats can be parsed
     * reliably. This allows parsers to be aggressive about interpreting user
     * variations on standard formats.
     *
     * If the end iterator is reached during parsing of the get() member
     * function, the member sets std::ios_base::eofbit in err.
     ','line_number':81,'multiline':True]
['text':'*
       * Type of character the facet is instantiated on.
       ','line_number':101,'multiline':True]
['text':'*
       * Type of character string passed to member functions.
       ','line_number':105,'multiline':True]
['text':'*
       * Type of iterator used to scan the character buffer.
       ','line_number':109,'multiline':True]
['text':'*
       * Construct a @c duration_get facet.
       * @param refs
       * @Effects Construct a @c duration_get facet.
       * If the @c refs argument is @c 0 then destruction of the object is
       * delegated to the @c locale, or locales, containing it. This allows
       * the user to ignore lifetime management issues. On the other had,
       * if @c refs is @c 1 then the object must be explicitly deleted;
       * the @c locale will not do so. In this case, the object can be
       * maintained across the lifetime of multiple locales.
       ','line_number':114,'multiline':True]
['text':'*
       * @param s start input stream iterator
       * @param end end input stream iterator
       * @param ios a reference to a ios_base
       * @param err the ios_base state
       * @param d the duration
       * @param pattern begin of the formatting pattern
       * @param pat_end end of the formatting pattern
       *
       * Requires: [pattern,pat_end) shall be a valid range.
       *
       * Effects: The function starts by evaluating err = std::ios_base::goodbit.
       * It then enters a loop, reading zero or more characters from s at
       * each iteration. Unless otherwise specified below, the loop
       * terminates when the first of the following conditions holds:
       * - The expression pattern == pat_end evaluates to true.
       * - The expression err == std::ios_base::goodbit evaluates to false.
       * - The expression s == end evaluates to true, in which case the
       * function evaluates err = std::ios_base::eofbit | std::ios_base::failbit.
       * - The next element of pattern is equal to '%', followed by a conversion
       * specifier character, format.
       * If the number of elements in the range [pattern,pat_end) is not
       * sufficient to unambiguously determine whether the conversion
       * specification is complete and valid, the function evaluates
       * err = std::ios_base::failbit. Otherwise, the function evaluates
       * s = get_value(s, end, ios, err, r) when the conversion specification is 'v' and
       * s = get_value(s, end, ios, err, rt) when the conversion specification is 'u'.
       * If err == std::ios_base::goodbit holds after
       * the evaluation of the expression, the function increments pattern to
       * point just past the end of the conversion specification and continues
       * looping.
       * - The expression isspace(*pattern, ios.getloc()) evaluates to true, in
       * which case the function first increments pattern until
       * pattern == pat_end || !isspace(*pattern, ios.getloc()) evaluates to true,
       * then advances s until s == end || !isspace(*s, ios.getloc()) is true,
       * and finally resumes looping.
       * - The next character read from s matches the element pointed to by
       * pattern in a case-insensitive comparison, in which case the function
       * evaluates ++pattern, ++s and continues looping. Otherwise, the function
       * evaluates err = std::ios_base::failbit.
       *
       * Once r and rt are retrieved,
       * Returns: s
       ','line_number':131,'multiline':True]
['text':' r should be multiplied by (num/den) / Period','line_number':279,'multiline':False]
['text':' Reduce (num/den) / Period to lowest terms','line_number':280,'multiline':False]
['text':' (num/den) / Period overflows','line_number':290,'multiline':False]
['text':' num / den is now factor to multiply by r','line_number':299,'multiline':False]
['text':' Conversion to Period overflowed','line_number':304,'multiline':False]
['text':' Conversion to Period overflowed','line_number':314,'multiline':False]
['text':' Success!  Store it.','line_number':319,'multiline':False]
['text':'*
       *
       * @param s start input stream iterator
       * @param end end input stream iterator
       * @param ios a reference to a ios_base
       * @param err the ios_base state
       * @param d the duration
       * Stores the duration pattern from the @c duration_unit facet in let say @c str. Last as if
       * @code
       *   return get(s, end, ios, err, ios, d, str.data(), str.data() + str.size());
       * @codeend
       * @Returns An iterator pointing just beyond the last character that can be determined to be part of a valid name
       ','line_number':325,'multiline':True]
['text':'*
       *
       * @param s start input stream iterator
       * @param end end input stream iterator
       * @param ios a reference to a ios_base
       * @param err the ios_base state
       * @param r a reference to the duration representation.
       * @Effects As if
       * @code
       * return std::use_facet<std::num_get<cahr_type, iter_type> >(ios.getloc()).get(s, end, ios, err, r);
       * @endcode
       *
       * @Returns An iterator pointing just beyond the last character that can be determined to be part of a valid name
       ','line_number':356,'multiline':True]
['text':' mandatory '{'','line_number':381,'multiline':False]
['text':' mandatory ';'','line_number':390,'multiline':False]
['text':' mandatory ';'','line_number':399,'multiline':False]
['text':' mandatory '}'','line_number':408,'multiline':False]
['text':'*
       *
       * @param s start input stream iterator
       * @param e end input stream iterator
       * @param ios a reference to a ios_base
       * @param err the ios_base state
       * @param rt a reference to the duration run-time ratio.
       * @Returns An iterator pointing just beyond the last character that can be determined to be part of a valid name
       ','line_number':415,'multiline':True]
['text':' parse [N/D]s or [N/D]second or [N/D]seconds format','line_number':444,'multiline':False]
['text':' parse s or second or seconds','line_number':484,'multiline':False]
['text':'*
       * Unique identifier for this type of facet.
       ','line_number':493,'multiline':True]
['text':'*
       * @Effects Destroy the facet
       ','line_number':498,'multiline':True]
['text':'*
       * Extracts the run-time ratio associated to the duration when it is given in prefix form.
       *
       * This is an extension point of this facet so that we can take in account other periods that can have a useful
       * translation in other contexts, as e.g. days and weeks.
       *
       * @param facet the duration_units facet
       * @param i start input stream iterator.
       * @param e end input stream iterator.
       * @param ios a reference to a ios_base.
       * @param err the ios_base state.
       * @return @c s
       ','line_number':507,'multiline':True]
['text':' parse SI name, short or long','line_number':523,'multiline':False]
['text':'~ std::use_facet<std::ctype<CharT> >(loc),','line_number':529,'multiline':False]
['text':'*
       * Extracts the run-time ratio associated to the duration when it is given in prefix form.
       *
       * This is an extension point of this facet so that we can take in account other periods that can have a useful
       * translation in other contexts, as e.g. days and weeks.
       *
       * @param facet the duration_units facet
       * @param i start input stream iterator.
       * @param e end input stream iterator.
       * @param ios a reference to a ios_base.
       * @param err the ios_base state.
       * @param rt a reference to the duration run-time ratio.
       * @Effects
       * @Returns An iterator pointing just beyond the last character that can be determined to be part of a valid name.
       ','line_number':542,'multiline':True]
['text':' parse SI name, short or long','line_number':560,'multiline':False]
['text':'~ std::use_facet<std::ctype<CharT> >(loc),','line_number':567,'multiline':False]
['text':'*
     * Unique identifier for this type of facet.
     ','line_number':581,'multiline':True]
['text':' chrono','line_number':587,'multiline':False]
['text':' boost','line_number':589,'multiline':False]
['text':' header','line_number':591,'multiline':False]
