['text':'  (C) Copyright Howard Hinnant','line_number':1,'multiline':False]
['text':'  (C) Copyright 2011 Vicente J. Botet Escriba','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'*
 * Duration formatting facet for output.
 ','line_number':8,'multiline':True]
['text':'*
     * @tparam ChatT a character type
     * @tparam OutputIterator a model of @c OutputIterator
     *
     * The @c time_point_put facet provides facilities for formatted output of @c time_point values.
     * The member function of @c time_point_put take a @c time_point and format it into character string representation.
     *
     ','line_number':25,'multiline':True]
['text':'*
       * Type of character the facet is instantiated on.
       ','line_number':37,'multiline':True]
['text':'*
       * Type of character string passed to member functions.
       ','line_number':41,'multiline':True]
['text':'*
       * Type of iterator used to write in the character buffer.
       ','line_number':45,'multiline':True]
['text':'*
       * Construct a time_point_put facet.
       * @param refs
       * @Effects Construct a time_point_put facet.
       * If the @c refs argument is @c 0 then destruction of the object is
       * delegated to the @c locale, or locales, containing it. This allows
       * the user to ignore lifetime management issues. On the other had,
       * if @c refs is @c 1 then the object must be explicitly deleted;
       * the @c locale will not do so. In this case, the object can be
       * maintained across the lifetime of multiple locales.
       ','line_number':50,'multiline':True]
['text':'*
       * @param i an output stream iterator
       * @param ios a reference to a ios_base
       * @param fill the character used as filler
       * @param tp the @c time_point
       * @param pattern begin of the formatting pattern
       * @param pat_end end of the formatting pattern
       *
       * @Effects Steps through the sequence from @c pattern to @c pat_end,
       * identifying characters that are part of a pattern sequence. Each character
       * that is not part of a pattern sequence is written to @c s immediately, and
       * each pattern sequence, as it is identified, results in a call to
       * @c put_duration or @c put_epoch;
       * thus, pattern elements and other characters are interleaved in the output
       * in the order in which they appear in the pattern. Pattern sequences are
       * identified by converting each character @c c to a @c char value as if by
       * @c ct.narrow(c,0), where @c ct is a reference to @c ctype<charT> obtained from
       * @c ios.getloc(). The first character of each sequence is equal to @c '%',
       * followed by a pattern specifier character @c spec, which can be @c 'd' for
       * the duration value or @c 'e' for the epoch.
       * For each valid pattern sequence identified, calls
       * <c>put_duration(s, ios, fill, tp.time_since_epoch())</c> or <c>put_epoch(s, ios)</c>.
       *
       * @Returns An iterator pointing immediately after the last character produced.
       ','line_number':66,'multiline':True]
['text':'*
       * @param i an output stream iterator
       * @param ios a reference to a ios_base
       * @param fill the character used as filler
       * @param tp the @c time_point
       * @param pattern begin of the formatting pattern
       * @param pat_end end of the formatting pattern
       *
       * @Effects Stores the time_point pattern from the @c time_point_unit facet in let say @c str. Last as if
       * @code
       *   return put(s, ios, dill, tp, str.data(), str.data() + str.size());
       * @endcode
       * @Returns An iterator pointing immediately after the last character produced.
       ','line_number':148,'multiline':True]
['text':'*
       * @param i an output stream iterator
       * @param ios a reference to a ios_base
       * @param fill the character used as filler
       * @param d the @c duration
       * @Effects As if <c>facet.put(s, ios, fill, d)</c> where facet is the @c duration_put<CharT> facet associated
       * to the @c ios or a new instance of @c duration_put<CharT>.
       * @Returns An iterator pointing immediately after the last character produced.
       ','line_number':180,'multiline':True]
['text':'*
       *
       * @param i an output stream iterator
       * @param ios a reference to a ios_base
       * @Effects As if
       * @code
       * string_type str = facet.template get_epoch<Clock>();
       * s=std::copy(str.begin(), str.end(), s);
       * @endcode
       * where facet is the @c time_point_units<CharT> facet associated
       * to the @c ios or a new instance of @c time_point_units_default<CharT>.
       * @Returns s, iterator pointing immediately after the last character produced.
       ','line_number':204,'multiline':True]
['text':'*
       * Unique identifier for this type of facet.
       ','line_number':241,'multiline':True]
['text':'*
       * @Effects Destroy the facet
       ','line_number':246,'multiline':True]
['text':' chrono','line_number':258,'multiline':False]
['text':' boost','line_number':259,'multiline':False]
['text':' header','line_number':261,'multiline':False]
