['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Daniel K. O. 2005.','line_number':3,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2007-2014','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]
['text':'/ @cond','line_number':35,'multiline':False]
['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':39,'multiline':False]
['text':' namespace detail','line_number':102,'multiline':False]
['text':'/ @endcond','line_number':104,'multiline':False]
['text':'! avltree_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':106,'multiline':False]
['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':107,'multiline':False]
['text':'! following interface:','line_number':108,'multiline':False]
['text':'!','line_number':109,'multiline':False]
['text':'! <b>Typedefs</b>:','line_number':110,'multiline':False]
['text':'!','line_number':111,'multiline':False]
['text':'! <tt>node</tt>: The type of the node that forms the binary search tree','line_number':112,'multiline':False]
['text':'!','line_number':113,'multiline':False]
['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':114,'multiline':False]
['text':'!','line_number':115,'multiline':False]
['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':116,'multiline':False]
['text':'!','line_number':117,'multiline':False]
['text':'! <tt>balance</tt>: The type of the balance factor','line_number':118,'multiline':False]
['text':'!','line_number':119,'multiline':False]
['text':'! <b>Static functions</b>:','line_number':120,'multiline':False]
['text':'!','line_number':121,'multiline':False]
['text':'! <tt>static node_ptr get_parent(const_node_ptr n);</tt>','line_number':122,'multiline':False]
['text':'!','line_number':123,'multiline':False]
['text':'! <tt>static void set_parent(node_ptr n, node_ptr parent);</tt>','line_number':124,'multiline':False]
['text':'!','line_number':125,'multiline':False]
['text':'! <tt>static node_ptr get_left(const_node_ptr n);</tt>','line_number':126,'multiline':False]
['text':'!','line_number':127,'multiline':False]
['text':'! <tt>static void set_left(node_ptr n, node_ptr left);</tt>','line_number':128,'multiline':False]
['text':'!','line_number':129,'multiline':False]
['text':'! <tt>static node_ptr get_right(const_node_ptr n);</tt>','line_number':130,'multiline':False]
['text':'!','line_number':131,'multiline':False]
['text':'! <tt>static void set_right(node_ptr n, node_ptr right);</tt>','line_number':132,'multiline':False]
['text':'!','line_number':133,'multiline':False]
['text':'! <tt>static balance get_balance(const_node_ptr n);</tt>','line_number':134,'multiline':False]
['text':'!','line_number':135,'multiline':False]
['text':'! <tt>static void set_balance(node_ptr n, balance b);</tt>','line_number':136,'multiline':False]
['text':'!','line_number':137,'multiline':False]
['text':'! <tt>static balance negative();</tt>','line_number':138,'multiline':False]
['text':'!','line_number':139,'multiline':False]
['text':'! <tt>static balance zero();</tt>','line_number':140,'multiline':False]
['text':'!','line_number':141,'multiline':False]
['text':'! <tt>static balance positive();</tt>','line_number':142,'multiline':False]
['text':'/ @cond','line_number':156,'multiline':False]
['text':'/ @endcond','line_number':160,'multiline':False]
['text':'! This type is the information that will be','line_number':163,'multiline':False]
['text':'! filled by insert_unique_check','line_number':164,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::get_header(const_node_ptr)','line_number':169,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::begin_node','line_number':172,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::end_node','line_number':175,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_tree','line_number':178,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':181,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr)','line_number':183,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr,node_ptr,node_ptr)','line_number':193,'multiline':False]
['text':'Swap balance','line_number':199,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr)','line_number':205,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr,node_ptr)','line_number':213,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink(node_ptr)','line_number':220,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink_leftmost_without_rebalance','line_number':232,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unique(const_node_ptr)','line_number':235,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::size(const_node_ptr)','line_number':238,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::next_node(node_ptr)','line_number':241,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::prev_node(node_ptr)','line_number':244,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init(node_ptr)','line_number':247,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':249,'multiline':False]
['text':'! <b>Requires</b>: node must not be part of any tree.','line_number':251,'multiline':False]
['text':'!','line_number':252,'multiline':False]
['text':'! <b>Effects</b>: Initializes the header to represent an empty tree.','line_number':253,'multiline':False]
['text':'!   unique(header) == true.','line_number':254,'multiline':False]
['text':'!','line_number':255,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':256,'multiline':False]
['text':'!','line_number':257,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':258,'multiline':False]
['text':'!','line_number':259,'multiline':False]
['text':'! <b>Nodes</b>: If node is inserted in a tree, this function corrupts the tree.','line_number':260,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::erase(node_ptr,node_ptr)','line_number':267,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_unique','line_number':276,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_equal','line_number':290,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clone(const_node_ptr,node_ptr,Cloner,Disposer)','line_number':301,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clear_and_dispose(node_ptr,Disposer)','line_number':311,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':315,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::upper_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':320,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::find(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':325,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::equal_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':330,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::bounded_range(const_node_ptr,const KeyType&,const KeyType&,KeyNodePtrCompare,bool,bool)','line_number':335,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::count(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':341,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':345,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_upper_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':347,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_lower_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':357,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal(node_ptr,node_ptr,node_ptr,NodePtrCompare)','line_number':367,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_before(node_ptr,node_ptr,node_ptr)','line_number':377,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_back(node_ptr,node_ptr)','line_number':386,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_front(node_ptr,node_ptr)','line_number':393,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':401,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':407,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':412,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_commit(node_ptr,node_ptr,const insert_commit_data &)','line_number':414,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::is_header','line_number':422,'multiline':False]
['text':'/ @cond','line_number':427,'multiline':False]
['text':'If equal height, balance must be zero','line_number':453,'multiline':False]
['text':'If right is taller than left, then the difference must be at least 1 and the balance positive','line_number':460,'multiline':False]
['text':'If left is taller than right, then the difference must be at least 1 and the balance negative','line_number':471,'multiline':False]
['text':'Rebalance avltree','line_number':491,'multiline':False]
['text':'Don't cache x_is_leftchild or similar because x can be null and','line_number':501,'multiline':False]
['text':'equal to both x_parent_left and x_parent_right','line_number':502,'multiline':False]
['text':' the height didn't change, let's stop here','line_number':508,'multiline':False]
['text':'//x is left child or x and sibling are null','line_number':511,'multiline':False]
['text':' balanced','line_number':512,'multiline':False]
['text':' x is right child (x_parent_left is the left child)','line_number':516,'multiline':False]
['text':' x_parent_left MUST have a right child','line_number':519,'multiline':False]
['text':' if changed from negative to NodeTraits::positive(), no need to check above','line_number':528,'multiline':False]
['text':'x is right child or x and sibling are null','line_number':535,'multiline':False]
['text':' balanced','line_number':536,'multiline':False]
['text':' x is left child (x_parent_right is the right child)','line_number':540,'multiline':False]
['text':' x_parent_right MUST have then a left child','line_number':543,'multiline':False]
['text':' if changed from NodeTraits::positive() to negative, no need to check above','line_number':551,'multiline':False]
['text':' never reached','line_number':558,'multiline':False]
['text':' Rebalance.','line_number':566,'multiline':False]
['text':' if x is left, parent will have parent->bal_factor = negative','line_number':573,'multiline':False]
['text':' else, parent->bal_factor = NodeTraits::positive()','line_number':574,'multiline':False]
['text':' if x is a left child, parent->bal_factor = zero','line_number':579,'multiline':False]
['text':' x is a right child, needs rebalancing','line_number':582,'multiline':False]
['text':' if x is a left child, needs rebalancing','line_number':591,'multiline':False]
['text':' never reached','line_number':603,'multiline':False]
['text':' balancing...','line_number':610,'multiline':False]
['text':' never reached','line_number':629,'multiline':False]
['text':' [note: 'a_oldleft' is 'b']','line_number':634,'multiline':False]
['text':'             |                               |         //','line_number':635,'multiline':False]
['text':'             a(-2)                           c         //','line_number':636,'multiline':False]
['text':'            / \                             / \        //','line_number':637,'multiline':False]
['text':'           /   \        ==>                /   \       //','line_number':638,'multiline':False]
['text':'      (pos)b    [g]                       b     a      //','line_number':639,'multiline':False]
['text':'          / \                            / \   / \     //','line_number':640,'multiline':False]
['text':'        [d]  c                         [d]  e f  [g]   //','line_number':641,'multiline':False]
['text':'            / \                                        //','line_number':642,'multiline':False]
['text':'           e   f                                       //','line_number':643,'multiline':False]
['text':'No need to link c with a [NodeTraits::set_parent(c, a) + NodeTraits::set_left(a, c)]','line_number':646,'multiline':False]
['text':'as c is not root and another rotation is coming','line_number':647,'multiline':False]
['text':' [note: 'a_oldright' is 'b']','line_number':654,'multiline':False]
['text':'              |                               |           //','line_number':655,'multiline':False]
['text':'              a(pos)                          c           //','line_number':656,'multiline':False]
['text':'             / \                             / \          //','line_number':657,'multiline':False]
['text':'            /   \                           /   \         //','line_number':658,'multiline':False]
['text':'          [d]   b(neg)         ==>         a     b        //','line_number':659,'multiline':False]
['text':'               / \                        / \   / \       //','line_number':660,'multiline':False]
['text':'              c  [g]                    [d] e  f  [g]     //','line_number':661,'multiline':False]
['text':'             / \                                          //','line_number':662,'multiline':False]
['text':'            e   f                                         //','line_number':663,'multiline':False]
['text':'No need to link c with a [NodeTraits::set_parent(c, a) + NodeTraits::set_right(a, c)]','line_number':666,'multiline':False]
['text':'as c is not root and another rotation is coming.','line_number':667,'multiline':False]
['text':' reset the balancing factor','line_number':677,'multiline':False]
['text':' this doesn't happen during insertions','line_number':682,'multiline':False]
['text':' reset the balancing factor','line_number':692,'multiline':False]
['text':' this doesn't happen during insertions','line_number':697,'multiline':False]
['text':'/ @endcond','line_number':703,'multiline':False]
['text':'/ @cond','line_number':706,'multiline':False]
['text':'/ @endcond','line_number':720,'multiline':False]
['text':'namespace intrusive','line_number':722,'multiline':False]
['text':'namespace boost','line_number':723,'multiline':False]
['text':'BOOST_INTRUSIVE_AVLTREE_ALGORITHMS_HPP','line_number':727,'multiline':False]
