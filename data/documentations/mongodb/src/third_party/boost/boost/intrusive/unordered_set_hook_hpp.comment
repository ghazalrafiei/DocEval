['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Olaf Krzikalla 2004-2006.','line_number':3,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga  2006-2013','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]
['text':'/ @cond','line_number':32,'multiline':False]
['text':'Class to avoid defining the same algo as a circular list, as hooks would be ambiguous between them','line_number':149,'multiline':False]
['text':'/ @endcond','line_number':182,'multiline':False]
['text':'! Helper metafunction to define a \c unordered_set_base_hook that yields to the same','line_number':184,'multiline':False]
['text':'! type when the same options (either explicitly or implicitly) are used.','line_number':185,'multiline':False]
['text':'/ @cond','line_number':193,'multiline':False]
['text':'/ @endcond','line_number':213,'multiline':False]
['text':'! Derive a class from unordered_set_base_hook in order to store objects in','line_number':217,'multiline':False]
['text':'! in an unordered_set/unordered_multi_set. unordered_set_base_hook holds the data necessary to maintain','line_number':218,'multiline':False]
['text':'! the unordered_set/unordered_multi_set and provides an appropriate value_traits class for unordered_set/unordered_multi_set.','line_number':219,'multiline':False]
['text':'!','line_number':220,'multiline':False]
['text':'! The hook admits the following options: \c tag<>, \c void_pointer<>,','line_number':221,'multiline':False]
['text':'! \c link_mode<>, \c store_hash<> and \c optimize_multikey<>.','line_number':222,'multiline':False]
['text':'!','line_number':223,'multiline':False]
['text':'! \c tag<> defines a tag to identify the node.','line_number':224,'multiline':False]
['text':'! The same tag value can be used in different classes, but if a class is','line_number':225,'multiline':False]
['text':'! derived from more than one \c list_base_hook, then each \c list_base_hook needs its','line_number':226,'multiline':False]
['text':'! unique tag.','line_number':227,'multiline':False]
['text':'!','line_number':228,'multiline':False]
['text':'! \c void_pointer<> is the pointer type that will be used internally in the hook','line_number':229,'multiline':False]
['text':'! and the container configured to use this hook.','line_number':230,'multiline':False]
['text':'!','line_number':231,'multiline':False]
['text':'! \c link_mode<> will specify the linking mode of the hook (\c normal_link,','line_number':232,'multiline':False]
['text':'! \c auto_unlink or \c safe_link).','line_number':233,'multiline':False]
['text':'!','line_number':234,'multiline':False]
['text':'! \c store_hash<> will tell the hook to store the hash of the value','line_number':235,'multiline':False]
['text':'! to speed up rehashings.','line_number':236,'multiline':False]
['text':'!','line_number':237,'multiline':False]
['text':'! \c optimize_multikey<> will tell the hook to store a link to form a group','line_number':238,'multiline':False]
['text':'! with other value with the same value to speed up searches and insertions','line_number':239,'multiline':False]
['text':'! in unordered_multisets with a great number of with equivalent keys.','line_number':240,'multiline':False]
['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':257,'multiline':False]
['text':'!   initializes the node to an unlinked state.','line_number':258,'multiline':False]
['text':'!','line_number':259,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':260,'multiline':False]
['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':263,'multiline':False]
['text':'!   initializes the node to an unlinked state. The argument is ignored.','line_number':264,'multiline':False]
['text':'!','line_number':265,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':266,'multiline':False]
['text':'!','line_number':267,'multiline':False]
['text':'! <b>Rationale</b>: Providing a copy-constructor','line_number':268,'multiline':False]
['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':269,'multiline':False]
['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':270,'multiline':False]
['text':'!   move-semantics.','line_number':271,'multiline':False]
['text':'! <b>Effects</b>: Empty function. The argument is ignored.','line_number':274,'multiline':False]
['text':'!','line_number':275,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':276,'multiline':False]
['text':'!','line_number':277,'multiline':False]
['text':'! <b>Rationale</b>: Providing an assignment operator','line_number':278,'multiline':False]
['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':279,'multiline':False]
['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':280,'multiline':False]
['text':'!   move-semantics.','line_number':281,'multiline':False]
['text':'! <b>Effects</b>: If link_mode is \c normal_link, the destructor does','line_number':284,'multiline':False]
['text':'!   nothing (ie. no code is generated). If link_mode is \c safe_link and the','line_number':285,'multiline':False]
['text':'!   object is stored in an unordered_set an assertion is raised. If link_mode is','line_number':286,'multiline':False]
['text':'!   \c auto_unlink and \c is_linked() is true, the node is unlinked.','line_number':287,'multiline':False]
['text':'!','line_number':288,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':289,'multiline':False]
['text':'! <b>Effects</b>: Swapping two nodes swaps the position of the elements','line_number':292,'multiline':False]
['text':'!   related to those nodes in one or two containers. That is, if the node','line_number':293,'multiline':False]
['text':'!   this is part of the element e1, the node x is part of the element e2','line_number':294,'multiline':False]
['text':'!   and both elements are included in the containers s1 and s2, then after','line_number':295,'multiline':False]
['text':'!   the swap-operation e1 is in s2 at the position of e2 and e2 is in s1','line_number':296,'multiline':False]
['text':'!   at the position of e1. If one element is not in a container, then','line_number':297,'multiline':False]
['text':'!   after the swap-operation the other element is not in a container.','line_number':298,'multiline':False]
['text':'!   Iterators to e1 and e2 related to those nodes are invalidated.','line_number':299,'multiline':False]
['text':'!','line_number':300,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':301,'multiline':False]
['text':'!','line_number':302,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':303,'multiline':False]
['text':'! <b>Precondition</b>: link_mode must be \c safe_link or \c auto_unlink.','line_number':306,'multiline':False]
['text':'!','line_number':307,'multiline':False]
['text':'! <b>Returns</b>: true, if the node belongs to a container, false','line_number':308,'multiline':False]
['text':'!   otherwise. This function can be used to test whether \c unordered_set::iterator_to','line_number':309,'multiline':False]
['text':'!   will return a valid iterator.','line_number':310,'multiline':False]
['text':'!','line_number':311,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':312,'multiline':False]
['text':'! <b>Effects</b>: Removes the node if it's inserted in a container.','line_number':315,'multiline':False]
['text':'!   This function is only allowed if link_mode is \c auto_unlink.','line_number':316,'multiline':False]
['text':'!','line_number':317,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':318,'multiline':False]
['text':'! Helper metafunction to define a \c unordered_set_member_hook that yields to the same','line_number':324,'multiline':False]
['text':'! type when the same options (either explicitly or implicitly) are used.','line_number':325,'multiline':False]
['text':'/ @cond','line_number':333,'multiline':False]
['text':'/ @endcond','line_number':353,'multiline':False]
['text':'! Put a public data member unordered_set_member_hook in order to store objects of this class in','line_number':357,'multiline':False]
['text':'! an unordered_set/unordered_multi_set. unordered_set_member_hook holds the data necessary for maintaining the','line_number':358,'multiline':False]
['text':'! unordered_set/unordered_multi_set and provides an appropriate value_traits class for unordered_set/unordered_multi_set.','line_number':359,'multiline':False]
['text':'!','line_number':360,'multiline':False]
['text':'! The hook admits the following options: \c void_pointer<>,','line_number':361,'multiline':False]
['text':'! \c link_mode<> and \c store_hash<>.','line_number':362,'multiline':False]
['text':'!','line_number':363,'multiline':False]
['text':'! \c void_pointer<> is the pointer type that will be used internally in the hook','line_number':364,'multiline':False]
['text':'! and the container configured to use this hook.','line_number':365,'multiline':False]
['text':'!','line_number':366,'multiline':False]
['text':'! \c link_mode<> will specify the linking mode of the hook (\c normal_link,','line_number':367,'multiline':False]
['text':'! \c auto_unlink or \c safe_link).','line_number':368,'multiline':False]
['text':'!','line_number':369,'multiline':False]
['text':'! \c store_hash<> will tell the hook to store the hash of the value','line_number':370,'multiline':False]
['text':'! to speed up rehashings.','line_number':371,'multiline':False]
['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':388,'multiline':False]
['text':'!   initializes the node to an unlinked state.','line_number':389,'multiline':False]
['text':'!','line_number':390,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':391,'multiline':False]
['text':'! <b>Effects</b>: If link_mode is \c auto_unlink or \c safe_link','line_number':394,'multiline':False]
['text':'!   initializes the node to an unlinked state. The argument is ignored.','line_number':395,'multiline':False]
['text':'!','line_number':396,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':397,'multiline':False]
['text':'!','line_number':398,'multiline':False]
['text':'! <b>Rationale</b>: Providing a copy-constructor','line_number':399,'multiline':False]
['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':400,'multiline':False]
['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':401,'multiline':False]
['text':'!   move-semantics.','line_number':402,'multiline':False]
['text':'! <b>Effects</b>: Empty function. The argument is ignored.','line_number':405,'multiline':False]
['text':'!','line_number':406,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':407,'multiline':False]
['text':'!','line_number':408,'multiline':False]
['text':'! <b>Rationale</b>: Providing an assignment operator','line_number':409,'multiline':False]
['text':'!   makes classes using the hook STL-compliant without forcing the','line_number':410,'multiline':False]
['text':'!   user to do some additional work. \c swap can be used to emulate','line_number':411,'multiline':False]
['text':'!   move-semantics.','line_number':412,'multiline':False]
['text':'! <b>Effects</b>: If link_mode is \c normal_link, the destructor does','line_number':415,'multiline':False]
['text':'!   nothing (ie. no code is generated). If link_mode is \c safe_link and the','line_number':416,'multiline':False]
['text':'!   object is stored in an unordered_set an assertion is raised. If link_mode is','line_number':417,'multiline':False]
['text':'!   \c auto_unlink and \c is_linked() is true, the node is unlinked.','line_number':418,'multiline':False]
['text':'!','line_number':419,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':420,'multiline':False]
['text':'! <b>Effects</b>: Swapping two nodes swaps the position of the elements','line_number':423,'multiline':False]
['text':'!   related to those nodes in one or two containers. That is, if the node','line_number':424,'multiline':False]
['text':'!   this is part of the element e1, the node x is part of the element e2','line_number':425,'multiline':False]
['text':'!   and both elements are included in the containers s1 and s2, then after','line_number':426,'multiline':False]
['text':'!   the swap-operation e1 is in s2 at the position of e2 and e2 is in s1','line_number':427,'multiline':False]
['text':'!   at the position of e1. If one element is not in a container, then','line_number':428,'multiline':False]
['text':'!   after the swap-operation the other element is not in a container.','line_number':429,'multiline':False]
['text':'!   Iterators to e1 and e2 related to those nodes are invalidated.','line_number':430,'multiline':False]
['text':'!','line_number':431,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':432,'multiline':False]
['text':'!','line_number':433,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':434,'multiline':False]
['text':'! <b>Precondition</b>: link_mode must be \c safe_link or \c auto_unlink.','line_number':437,'multiline':False]
['text':'!','line_number':438,'multiline':False]
['text':'! <b>Returns</b>: true, if the node belongs to a container, false','line_number':439,'multiline':False]
['text':'!   otherwise. This function can be used to test whether \c unordered_set::iterator_to','line_number':440,'multiline':False]
['text':'!   will return a valid iterator.','line_number':441,'multiline':False]
['text':'!','line_number':442,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':443,'multiline':False]
['text':'! <b>Effects</b>: Removes the node if it's inserted in a container.','line_number':446,'multiline':False]
['text':'!   This function is only allowed if link_mode is \c auto_unlink.','line_number':447,'multiline':False]
['text':'!','line_number':448,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':449,'multiline':False]
['text':'namespace intrusive','line_number':454,'multiline':False]
['text':'namespace boost','line_number':455,'multiline':False]
['text':'BOOST_INTRUSIVE_UNORDERED_SET_HOOK_HPP','line_number':459,'multiline':False]
