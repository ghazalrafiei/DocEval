['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Olaf Krzikalla 2004-2006.','line_number':3,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga  2006-2014','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]
['text':'! circular_slist_algorithms provides basic algorithms to manipulate nodes','line_number':30,'multiline':False]
['text':'! forming a circular singly linked list. An empty circular list is formed by a node','line_number':31,'multiline':False]
['text':'! whose pointer to the next node points to itself.','line_number':32,'multiline':False]
['text':'!','line_number':33,'multiline':False]
['text':'! circular_slist_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':34,'multiline':False]
['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':35,'multiline':False]
['text':'! following interface:','line_number':36,'multiline':False]
['text':'!','line_number':37,'multiline':False]
['text':'! <b>Typedefs</b>:','line_number':38,'multiline':False]
['text':'!','line_number':39,'multiline':False]
['text':'! <tt>node</tt>: The type of the node that forms the circular list','line_number':40,'multiline':False]
['text':'!','line_number':41,'multiline':False]
['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':42,'multiline':False]
['text':'!','line_number':43,'multiline':False]
['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':44,'multiline':False]
['text':'!','line_number':45,'multiline':False]
['text':'! <b>Static functions</b>:','line_number':46,'multiline':False]
['text':'!','line_number':47,'multiline':False]
['text':'! <tt>static node_ptr get_next(const_node_ptr n);</tt>','line_number':48,'multiline':False]
['text':'!','line_number':49,'multiline':False]
['text':'! <tt>static void set_next(node_ptr n, node_ptr next);</tt>','line_number':50,'multiline':False]
['text':'/ @cond','line_number':53,'multiline':False]
['text':'/ @endcond','line_number':55,'multiline':False]
['text':'/ @cond','line_number':57,'multiline':False]
['text':'/ @endcond','line_number':59,'multiline':False]
['text':'! <b>Effects</b>: Constructs an non-used list element, putting the next','line_number':68,'multiline':False]
['text':'!   pointer to null:','line_number':69,'multiline':False]
['text':'!  <tt>NodeTraits::get_next(this_node) == node_ptr()</tt>','line_number':70,'multiline':False]
['text':'!','line_number':71,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':72,'multiline':False]
['text':'!','line_number':73,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':74,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':77,'multiline':False]
['text':'!','line_number':78,'multiline':False]
['text':'! <b>Effects</b>: Returns true is "this_node" is the only node of a circular list:','line_number':79,'multiline':False]
['text':'!  or it's a not inserted node:','line_number':80,'multiline':False]
['text':'!  <tt>return node_ptr() == NodeTraits::get_next(this_node) || NodeTraits::get_next(this_node) == this_node</tt>','line_number':81,'multiline':False]
['text':'!','line_number':82,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':83,'multiline':False]
['text':'!','line_number':84,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':85,'multiline':False]
['text':'! <b>Effects</b>: Returns true is "this_node" has the same state as','line_number':88,'multiline':False]
['text':'!  if it was inited using "init(node_ptr)"','line_number':89,'multiline':False]
['text':'!','line_number':90,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':91,'multiline':False]
['text':'!','line_number':92,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':93,'multiline':False]
['text':'! <b>Requires</b>: prev_node must be in a circular list or be an empty circular list.','line_number':96,'multiline':False]
['text':'!','line_number':97,'multiline':False]
['text':'! <b>Effects</b>: Unlinks the next node of prev_node from the circular list.','line_number':98,'multiline':False]
['text':'!','line_number':99,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':100,'multiline':False]
['text':'!','line_number':101,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':102,'multiline':False]
['text':'! <b>Requires</b>: prev_node and last_node must be in a circular list','line_number':105,'multiline':False]
['text':'!  or be an empty circular list.','line_number':106,'multiline':False]
['text':'!','line_number':107,'multiline':False]
['text':'! <b>Effects</b>: Unlinks the range (prev_node, last_node) from the circular list.','line_number':108,'multiline':False]
['text':'!','line_number':109,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':110,'multiline':False]
['text':'!','line_number':111,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':112,'multiline':False]
['text':'! <b>Requires</b>: prev_node must be a node of a circular list.','line_number':115,'multiline':False]
['text':'!','line_number':116,'multiline':False]
['text':'! <b>Effects</b>: Links this_node after prev_node in the circular list.','line_number':117,'multiline':False]
['text':'!','line_number':118,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':119,'multiline':False]
['text':'!','line_number':120,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':121,'multiline':False]
['text':'! <b>Requires</b>: b and e must be nodes of the same circular list or an empty range.','line_number':124,'multiline':False]
['text':'!   and p must be a node of a different circular list.','line_number':125,'multiline':False]
['text':'!','line_number':126,'multiline':False]
['text':'! <b>Effects</b>: Removes the nodes from (b, e] range from their circular list and inserts','line_number':127,'multiline':False]
['text':'!   them after p in p's circular list.','line_number':128,'multiline':False]
['text':'!','line_number':129,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':130,'multiline':False]
['text':'!','line_number':131,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':132,'multiline':False]
['text':'#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':135,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty list, making this_node the only','line_number':137,'multiline':False]
['text':'!   node of the circular list:','line_number':138,'multiline':False]
['text':'!  <tt>NodeTraits::get_next(this_node) == this_node</tt>.','line_number':139,'multiline':False]
['text':'!','line_number':140,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':141,'multiline':False]
['text':'!','line_number':142,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':143,'multiline':False]
['text':'! <b>Requires</b>: this_node and prev_init_node must be in the same circular list.','line_number':147,'multiline':False]
['text':'!','line_number':148,'multiline':False]
['text':'! <b>Effects</b>: Returns the previous node of this_node in the circular list starting.','line_number':149,'multiline':False]
['text':'!   the search from prev_init_node. The first node checked for equality','line_number':150,'multiline':False]
['text':'!   is NodeTraits::get_next(prev_init_node).','line_number':151,'multiline':False]
['text':'!','line_number':152,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements between prev_init_node and this_node.','line_number':153,'multiline':False]
['text':'!','line_number':154,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':155,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':159,'multiline':False]
['text':'!','line_number':160,'multiline':False]
['text':'! <b>Effects</b>: Returns the previous node of this_node in the circular list.','line_number':161,'multiline':False]
['text':'!','line_number':162,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the circular list.','line_number':163,'multiline':False]
['text':'!','line_number':164,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':165,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':169,'multiline':False]
['text':'!','line_number':170,'multiline':False]
['text':'! <b>Effects</b>: Returns the previous node of the previous node of this_node in the circular list.','line_number':171,'multiline':False]
['text':'!','line_number':172,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the circular list.','line_number':173,'multiline':False]
['text':'!','line_number':174,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':175,'multiline':False]
['text':'! <b>Requires</b>: this_node and p must be in the same circular list.','line_number':179,'multiline':False]
['text':'!','line_number':180,'multiline':False]
['text':'! <b>Effects</b>: Returns the previous node of the previous node of this_node in the','line_number':181,'multiline':False]
['text':'!   circular list starting. the search from p. The first node checked','line_number':182,'multiline':False]
['text':'!   for equality is NodeTraits::get_next((NodeTraits::get_next(p)).','line_number':183,'multiline':False]
['text':'!','line_number':184,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the circular list.','line_number':185,'multiline':False]
['text':'!','line_number':186,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':187,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':200,'multiline':False]
['text':'!','line_number':201,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of nodes in a circular list. If the circular list','line_number':202,'multiline':False]
['text':'!  is empty, returns 1.','line_number':203,'multiline':False]
['text':'!','line_number':204,'multiline':False]
['text':'! <b>Complexity</b>: Linear','line_number':205,'multiline':False]
['text':'!','line_number':206,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':207,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list, be an empty circular list or be inited.','line_number':219,'multiline':False]
['text':'!','line_number':220,'multiline':False]
['text':'! <b>Effects</b>: Unlinks the node from the circular list.','line_number':221,'multiline':False]
['text':'!','line_number':222,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the circular list','line_number':223,'multiline':False]
['text':'!','line_number':224,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':225,'multiline':False]
['text':'! <b>Requires</b>: nxt_node must be a node of a circular list.','line_number':232,'multiline':False]
['text':'!','line_number':233,'multiline':False]
['text':'! <b>Effects</b>: Links this_node before nxt_node in the circular list.','line_number':234,'multiline':False]
['text':'!','line_number':235,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the circular list.','line_number':236,'multiline':False]
['text':'!','line_number':237,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':238,'multiline':False]
['text':'! <b>Requires</b>: this_node and other_node must be nodes inserted','line_number':242,'multiline':False]
['text':'!  in circular lists or be empty circular lists.','line_number':243,'multiline':False]
['text':'!','line_number':244,'multiline':False]
['text':'! <b>Effects</b>: Swaps the position of the nodes: this_node is inserted in','line_number':245,'multiline':False]
['text':'!   other_nodes position in the second circular list and the other_node is inserted','line_number':246,'multiline':False]
['text':'!   in this_node's position in the first circular list.','line_number':247,'multiline':False]
['text':'!','line_number':248,'multiline':False]
['text':'! <b>Complexity</b>: Linear to number of elements of both lists','line_number':249,'multiline':False]
['text':'!','line_number':250,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':251,'multiline':False]
['text':'! <b>Effects</b>: Reverses the order of elements in the list.','line_number':273,'multiline':False]
['text':'!','line_number':274,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':275,'multiline':False]
['text':'!','line_number':276,'multiline':False]
['text':'! <b>Complexity</b>: This function is linear to the contained elements.','line_number':277,'multiline':False]
['text':'! <b>Effects</b>: Moves the node p n positions towards the end of the list.','line_number':289,'multiline':False]
['text':'!','line_number':290,'multiline':False]
['text':'! <b>Returns</b>: The previous node of p after the function if there has been any movement,','line_number':291,'multiline':False]
['text':'!   Null if n leads to no movement.','line_number':292,'multiline':False]
['text':'!','line_number':293,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':294,'multiline':False]
['text':'!','line_number':295,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements plus the number moved positions.','line_number':296,'multiline':False]
['text':'Null shift, nothing to do','line_number':299,'multiline':False]
['text':'count() == 1 or 2, nothing to do','line_number':303,'multiline':False]
['text':'Now find the new last node according to the shift count.','line_number':310,'multiline':False]
['text':'If we find p before finding the new last node','line_number':311,'multiline':False]
['text':'unlink p, shortcut the search now that we know the size of the list','line_number':312,'multiline':False]
['text':'and continue.','line_number':313,'multiline':False]
['text':'Shortcut the shift with the modulo of the size of the list','line_number':318,'multiline':False]
['text':'Unlink p and continue the new first node search','line_number':323,'multiline':False]
['text':'If the p has not been found in the previous loop, find it','line_number':330,'multiline':False]
['text':'starting in the new first node and unlink it','line_number':331,'multiline':False]
['text':'Now link p after the new last node','line_number':336,'multiline':False]
['text':'! <b>Effects</b>: Moves the node p n positions towards the beginning of the list.','line_number':341,'multiline':False]
['text':'!','line_number':342,'multiline':False]
['text':'! <b>Returns</b>: The previous node of p after the function if there has been any movement,','line_number':343,'multiline':False]
['text':'!   Null if n leads equals to no movement.','line_number':344,'multiline':False]
['text':'!','line_number':345,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':346,'multiline':False]
['text':'!','line_number':347,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements plus the number moved positions.','line_number':348,'multiline':False]
['text':'Null shift, nothing to do','line_number':351,'multiline':False]
['text':'count() == 1 or 2, nothing to do','line_number':355,'multiline':False]
['text':'Iterate until p is found to know where the current last node is.','line_number':358,'multiline':False]
['text':'If the shift count is less than the size of the list, we can also obtain','line_number':359,'multiline':False]
['text':'the position of the new last node after the shift.','line_number':360,'multiline':False]
['text':'If the shift was bigger or equal than the size, obtain the equivalent','line_number':368,'multiline':False]
['text':'forward shifts and find the new last node.','line_number':369,'multiline':False]
['text':'Now find the equivalent forward shifts.','line_number':371,'multiline':False]
['text':'Shortcut the shift with the modulo of the size of the list','line_number':372,'multiline':False]
['text':'If the shift is a multiple of the size there is nothing to do','line_number':374,'multiline':False]
['text':'empty','line_number':380,'multiline':False]
['text':'Now unlink p and link it after the new last node','line_number':384,'multiline':False]
['text':'/ @cond','line_number':391,'multiline':False]
['text':'/ @endcond','line_number':399,'multiline':False]
['text':'namespace intrusive','line_number':401,'multiline':False]
['text':'namespace boost','line_number':402,'multiline':False]
['text':'BOOST_INTRUSIVE_CIRCULAR_SLIST_ALGORITHMS_HPP','line_number':406,'multiline':False]
