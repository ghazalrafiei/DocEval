['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Olaf Krzikalla 2004-2006.','line_number':3,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga  2006-2014','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]
['text':'for node_pair','line_number':22,'multiline':False]
['text':'! linear_slist_algorithms provides basic algorithms to manipulate nodes','line_number':31,'multiline':False]
['text':'! forming a linear singly linked list.','line_number':32,'multiline':False]
['text':'!','line_number':33,'multiline':False]
['text':'! linear_slist_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':34,'multiline':False]
['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':35,'multiline':False]
['text':'! following interface:','line_number':36,'multiline':False]
['text':'!','line_number':37,'multiline':False]
['text':'! <b>Typedefs</b>:','line_number':38,'multiline':False]
['text':'!','line_number':39,'multiline':False]
['text':'! <tt>node</tt>: The type of the node that forms the linear list','line_number':40,'multiline':False]
['text':'!','line_number':41,'multiline':False]
['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':42,'multiline':False]
['text':'!','line_number':43,'multiline':False]
['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':44,'multiline':False]
['text':'!','line_number':45,'multiline':False]
['text':'! <b>Static functions</b>:','line_number':46,'multiline':False]
['text':'!','line_number':47,'multiline':False]
['text':'! <tt>static node_ptr get_next(const_node_ptr n);</tt>','line_number':48,'multiline':False]
['text':'!','line_number':49,'multiline':False]
['text':'! <tt>static void set_next(node_ptr n, node_ptr next);</tt>','line_number':50,'multiline':False]
['text':'/ @cond','line_number':53,'multiline':False]
['text':'/ @endcond','line_number':55,'multiline':False]
['text':'/ @cond','line_number':57,'multiline':False]
['text':'/ @endcond','line_number':59,'multiline':False]
['text':'A simple struct containing:','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':' typedef node_ptr type;','line_number':67,'multiline':False]
['text':' node_ptr first;','line_number':68,'multiline':False]
['text':' node_ptr second;','line_number':69,'multiline':False]
['text':'! <b>Effects</b>: Constructs an non-used list element, putting the next','line_number':74,'multiline':False]
['text':'!   pointer to null:','line_number':75,'multiline':False]
['text':'!  <tt>NodeTraits::get_next(this_node) == node_ptr()</tt>','line_number':76,'multiline':False]
['text':'!','line_number':77,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':78,'multiline':False]
['text':'!','line_number':79,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':80,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':83,'multiline':False]
['text':'!','line_number':84,'multiline':False]
['text':'! <b>Effects</b>: Returns true is "this_node" is the only node of a circular list:','line_number':85,'multiline':False]
['text':'!  or it's a not inserted node:','line_number':86,'multiline':False]
['text':'!  <tt>return node_ptr() == NodeTraits::get_next(this_node) || NodeTraits::get_next(this_node) == this_node</tt>','line_number':87,'multiline':False]
['text':'!','line_number':88,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':89,'multiline':False]
['text':'!','line_number':90,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':91,'multiline':False]
['text':'! <b>Effects</b>: Returns true is "this_node" has the same state as if','line_number':94,'multiline':False]
['text':'!  it was inited using "init(node_ptr)"','line_number':95,'multiline':False]
['text':'!','line_number':96,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':97,'multiline':False]
['text':'!','line_number':98,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':99,'multiline':False]
['text':'! <b>Requires</b>: prev_node must be in a circular list or be an empty circular list.','line_number':102,'multiline':False]
['text':'!','line_number':103,'multiline':False]
['text':'! <b>Effects</b>: Unlinks the next node of prev_node from the circular list.','line_number':104,'multiline':False]
['text':'!','line_number':105,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':106,'multiline':False]
['text':'!','line_number':107,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':108,'multiline':False]
['text':'! <b>Requires</b>: prev_node and last_node must be in a circular list','line_number':111,'multiline':False]
['text':'!  or be an empty circular list.','line_number':112,'multiline':False]
['text':'!','line_number':113,'multiline':False]
['text':'! <b>Effects</b>: Unlinks the range (prev_node, last_node) from the linear list.','line_number':114,'multiline':False]
['text':'!','line_number':115,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':116,'multiline':False]
['text':'!','line_number':117,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':118,'multiline':False]
['text':'! <b>Requires</b>: prev_node must be a node of a linear list.','line_number':121,'multiline':False]
['text':'!','line_number':122,'multiline':False]
['text':'! <b>Effects</b>: Links this_node after prev_node in the linear list.','line_number':123,'multiline':False]
['text':'!','line_number':124,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':125,'multiline':False]
['text':'!','line_number':126,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':127,'multiline':False]
['text':'! <b>Requires</b>: b and e must be nodes of the same linear list or an empty range.','line_number':130,'multiline':False]
['text':'!   and p must be a node of a different linear list.','line_number':131,'multiline':False]
['text':'!','line_number':132,'multiline':False]
['text':'! <b>Effects</b>: Removes the nodes from (b, e] range from their linear list and inserts','line_number':133,'multiline':False]
['text':'!   them after p in p's linear list.','line_number':134,'multiline':False]
['text':'!','line_number':135,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':136,'multiline':False]
['text':'!','line_number':137,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':138,'multiline':False]
['text':'#if defined(BOOST_INTRUSIVE_DOXYGEN_INVOKED)','line_number':141,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty list, making this_node the only','line_number':143,'multiline':False]
['text':'!   node of the circular list:','line_number':144,'multiline':False]
['text':'!  <tt>NodeTraits::get_next(this_node) == this_node</tt>.','line_number':145,'multiline':False]
['text':'!','line_number':146,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':147,'multiline':False]
['text':'!','line_number':148,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':149,'multiline':False]
['text':'! <b>Requires</b>: this_node and prev_init_node must be in the same linear list.','line_number':153,'multiline':False]
['text':'!','line_number':154,'multiline':False]
['text':'! <b>Effects</b>: Returns the previous node of this_node in the linear list starting.','line_number':155,'multiline':False]
['text':'!   the search from prev_init_node. The first node checked for equality','line_number':156,'multiline':False]
['text':'!   is NodeTraits::get_next(prev_init_node).','line_number':157,'multiline':False]
['text':'!','line_number':158,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements between prev_init_node and this_node.','line_number':159,'multiline':False]
['text':'!','line_number':160,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':161,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a linear list or be an empty linear list.','line_number':166,'multiline':False]
['text':'!','line_number':167,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of nodes in a linear list. If the linear list','line_number':168,'multiline':False]
['text':'!  is empty, returns 1.','line_number':169,'multiline':False]
['text':'!','line_number':170,'multiline':False]
['text':'! <b>Complexity</b>: Linear','line_number':171,'multiline':False]
['text':'!','line_number':172,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':173,'multiline':False]
['text':'! <b>Requires</b>: this_node and other_node must be nodes inserted','line_number':185,'multiline':False]
['text':'!  in linear lists or be empty linear lists.','line_number':186,'multiline':False]
['text':'!','line_number':187,'multiline':False]
['text':'! <b>Effects</b>: Moves all the nodes previously chained after this_node after other_node','line_number':188,'multiline':False]
['text':'!   and vice-versa.','line_number':189,'multiline':False]
['text':'!','line_number':190,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':191,'multiline':False]
['text':'!','line_number':192,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':193,'multiline':False]
['text':'! <b>Effects</b>: Reverses the order of elements in the list.','line_number':202,'multiline':False]
['text':'!','line_number':203,'multiline':False]
['text':'! <b>Returns</b>: The new first node of the list.','line_number':204,'multiline':False]
['text':'!','line_number':205,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':206,'multiline':False]
['text':'!','line_number':207,'multiline':False]
['text':'! <b>Complexity</b>: This function is linear to the contained elements.','line_number':208,'multiline':False]
['text':'! <b>Effects</b>: Moves the first n nodes starting at p to the end of the list.','line_number':224,'multiline':False]
['text':'!','line_number':225,'multiline':False]
['text':'! <b>Returns</b>: A pair containing the new first and last node of the list or','line_number':226,'multiline':False]
['text':'!   if there has been any movement, a null pair if n leads to no movement.','line_number':227,'multiline':False]
['text':'!','line_number':228,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':229,'multiline':False]
['text':'!','line_number':230,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements plus the number moved positions.','line_number':231,'multiline':False]
['text':'Null shift, or count() == 0 or 1, nothing to do','line_number':235,'multiline':False]
['text':'Now find the new last node according to the shift count.','line_number':245,'multiline':False]
['text':'If we find 0 before finding the new last node','line_number':246,'multiline':False]
['text':'unlink p, shortcut the search now that we know the size of the list','line_number':247,'multiline':False]
['text':'and continue.','line_number':248,'multiline':False]
['text':'Shortcut the shift with the modulo of the size of the list','line_number':253,'multiline':False]
['text':'Unlink p and continue the new first node search','line_number':258,'multiline':False]
['text':'unlink_after(new_last);','line_number':260,'multiline':False]
['text':'If the p has not been found in the previous loop, find it','line_number':265,'multiline':False]
['text':'starting in the new first node and unlink it','line_number':266,'multiline':False]
['text':'Now link p after the new last node','line_number':271,'multiline':False]
['text':'! <b>Effects</b>: Moves the first n nodes starting at p to the beginning of the list.','line_number':279,'multiline':False]
['text':'!','line_number':280,'multiline':False]
['text':'! <b>Returns</b>: A pair containing the new first and last node of the list or','line_number':281,'multiline':False]
['text':'!   if there has been any movement, a null pair if n leads to no movement.','line_number':282,'multiline':False]
['text':'!','line_number':283,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':284,'multiline':False]
['text':'!','line_number':285,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements plus the number moved positions.','line_number':286,'multiline':False]
['text':'Null shift, or count() == 0 or 1, nothing to do','line_number':290,'multiline':False]
['text':'Iterate until p is found to know where the current last node is.','line_number':296,'multiline':False]
['text':'If the shift count is less than the size of the list, we can also obtain','line_number':297,'multiline':False]
['text':'the position of the new last node after the shift.','line_number':298,'multiline':False]
['text':'If the shift was bigger or equal than the size, obtain the equivalent','line_number':306,'multiline':False]
['text':'forward shifts and find the new last node.','line_number':307,'multiline':False]
['text':'Now find the equivalent forward shifts.','line_number':309,'multiline':False]
['text':'Shortcut the shift with the modulo of the size of the list','line_number':310,'multiline':False]
['text':'If the shift is a multiple of the size there is nothing to do','line_number':312,'multiline':False]
['text':'empty','line_number':319,'multiline':False]
['text':'Get the first new node','line_number':323,'multiline':False]
['text':'Now put the old beginning after the old end','line_number':325,'multiline':False]
['text':'/ @cond','line_number':334,'multiline':False]
['text':'/ @endcond','line_number':342,'multiline':False]
['text':'namespace intrusive','line_number':344,'multiline':False]
['text':'namespace boost','line_number':345,'multiline':False]
['text':'BOOST_INTRUSIVE_LINEAR_SLIST_ALGORITHMS_HPP','line_number':349,'multiline':False]
