['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Olaf Krzikalla 2004-2006.','line_number':3,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga  2006-2014','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]
['text':'! circular_list_algorithms provides basic algorithms to manipulate nodes','line_number':30,'multiline':False]
['text':'! forming a circular doubly linked list. An empty circular list is formed by a node','line_number':31,'multiline':False]
['text':'! whose pointers point to itself.','line_number':32,'multiline':False]
['text':'!','line_number':33,'multiline':False]
['text':'! circular_list_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':34,'multiline':False]
['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':35,'multiline':False]
['text':'! following interface:','line_number':36,'multiline':False]
['text':'!','line_number':37,'multiline':False]
['text':'! <b>Typedefs</b>:','line_number':38,'multiline':False]
['text':'!','line_number':39,'multiline':False]
['text':'! <tt>node</tt>: The type of the node that forms the circular list','line_number':40,'multiline':False]
['text':'!','line_number':41,'multiline':False]
['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':42,'multiline':False]
['text':'!','line_number':43,'multiline':False]
['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':44,'multiline':False]
['text':'!','line_number':45,'multiline':False]
['text':'! <b>Static functions</b>:','line_number':46,'multiline':False]
['text':'!','line_number':47,'multiline':False]
['text':'! <tt>static node_ptr get_previous(const_node_ptr n);</tt>','line_number':48,'multiline':False]
['text':'!','line_number':49,'multiline':False]
['text':'! <tt>static void set_previous(node_ptr n, node_ptr prev);</tt>','line_number':50,'multiline':False]
['text':'!','line_number':51,'multiline':False]
['text':'! <tt>static node_ptr get_next(const_node_ptr n);</tt>','line_number':52,'multiline':False]
['text':'!','line_number':53,'multiline':False]
['text':'! <tt>static void set_next(node_ptr n, node_ptr next);</tt>','line_number':54,'multiline':False]
['text':'! <b>Effects</b>: Constructs an non-used list element, so that','line_number':64,'multiline':False]
['text':'! inited(this_node) == true','line_number':65,'multiline':False]
['text':'!','line_number':66,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':67,'multiline':False]
['text':'!','line_number':68,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':69,'multiline':False]
['text':'! <b>Effects</b>: Returns true is "this_node" is in a non-used state','line_number':77,'multiline':False]
['text':'! as if it was initialized by the "init" function.','line_number':78,'multiline':False]
['text':'!','line_number':79,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':80,'multiline':False]
['text':'!','line_number':81,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':82,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty list, making this_node the only','line_number':86,'multiline':False]
['text':'!   node of the circular list:','line_number':87,'multiline':False]
['text':'!  <tt>NodeTraits::get_next(this_node) == NodeTraits::get_previous(this_node)','line_number':88,'multiline':False]
['text':'!  == this_node</tt>.','line_number':89,'multiline':False]
['text':'!','line_number':90,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':91,'multiline':False]
['text':'!','line_number':92,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':93,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':100,'multiline':False]
['text':'!','line_number':101,'multiline':False]
['text':'! <b>Effects</b>: Returns true is "this_node" is the only node of a circular list:','line_number':102,'multiline':False]
['text':'!  <tt>return NodeTraits::get_next(this_node) == this_node</tt>','line_number':103,'multiline':False]
['text':'!','line_number':104,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':105,'multiline':False]
['text':'!','line_number':106,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':107,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':114,'multiline':False]
['text':'!','line_number':115,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of nodes in a circular list. If the circular list','line_number':116,'multiline':False]
['text':'!  is empty, returns 1.','line_number':117,'multiline':False]
['text':'!','line_number':118,'multiline':False]
['text':'! <b>Complexity</b>: Linear','line_number':119,'multiline':False]
['text':'!','line_number':120,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':121,'multiline':False]
['text':'! <b>Requires</b>: this_node must be in a circular list or be an empty circular list.','line_number':133,'multiline':False]
['text':'!','line_number':134,'multiline':False]
['text':'! <b>Effects</b>: Unlinks the node from the circular list.','line_number':135,'multiline':False]
['text':'!','line_number':136,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':137,'multiline':False]
['text':'!','line_number':138,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':139,'multiline':False]
['text':'! <b>Requires</b>: b and e must be nodes of the same circular list or an empty range.','line_number':149,'multiline':False]
['text':'!','line_number':150,'multiline':False]
['text':'! <b>Effects</b>: Unlinks the node [b, e) from the circular list.','line_number':151,'multiline':False]
['text':'!','line_number':152,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':153,'multiline':False]
['text':'!','line_number':154,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':155,'multiline':False]
['text':'! <b>Requires</b>: nxt_node must be a node of a circular list.','line_number':165,'multiline':False]
['text':'!','line_number':166,'multiline':False]
['text':'! <b>Effects</b>: Links this_node before nxt_node in the circular list.','line_number':167,'multiline':False]
['text':'!','line_number':168,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':169,'multiline':False]
['text':'!','line_number':170,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':171,'multiline':False]
['text':'nxt_node might be an alias for prev->next_','line_number':177,'multiline':False]
['text':'so use it before NodeTraits::set_next(prev, ...)','line_number':178,'multiline':False]
['text':'is called and the reference changes its value','line_number':179,'multiline':False]
['text':'! <b>Requires</b>: prev_node must be a node of a circular list.','line_number':184,'multiline':False]
['text':'!','line_number':185,'multiline':False]
['text':'! <b>Effects</b>: Links this_node after prev_node in the circular list.','line_number':186,'multiline':False]
['text':'!','line_number':187,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':188,'multiline':False]
['text':'!','line_number':189,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':190,'multiline':False]
['text':'prev_node might be an alias for next->next_','line_number':196,'multiline':False]
['text':'so use it before update it before NodeTraits::set_previous(next, ...)','line_number':197,'multiline':False]
['text':'is called and the reference changes it's value','line_number':198,'multiline':False]
['text':'! <b>Requires</b>: this_node and other_node must be nodes inserted','line_number':203,'multiline':False]
['text':'!  in circular lists or be empty circular lists.','line_number':204,'multiline':False]
['text':'!','line_number':205,'multiline':False]
['text':'! <b>Effects</b>: Swaps the position of the nodes: this_node is inserted in','line_number':206,'multiline':False]
['text':'!   other_nodes position in the second circular list and the other_node is inserted','line_number':207,'multiline':False]
['text':'!   in this_node's position in the first circular list.','line_number':208,'multiline':False]
['text':'!','line_number':209,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':210,'multiline':False]
['text':'!','line_number':211,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':212,'multiline':False]
['text':'these first two swaps must happen before the other two','line_number':230,'multiline':False]
['text':'! <b>Requires</b>: b and e must be nodes of the same circular list or an empty range.','line_number':244,'multiline':False]
['text':'!   and p must be a node of a different circular list or may not be an iterator in','line_number':245,'multiline':False]
['text':'    [b, e).','line_number':246,'multiline':False]
['text':'!','line_number':247,'multiline':False]
['text':'! <b>Effects</b>: Removes the nodes from [b, e) range from their circular list and inserts','line_number':248,'multiline':False]
['text':'!   them before p in p's circular list.','line_number':249,'multiline':False]
['text':'!','line_number':250,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':251,'multiline':False]
['text':'!','line_number':252,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':253,'multiline':False]
['text':'! <b>Requires</b>: i must a node of a circular list','line_number':269,'multiline':False]
['text':'!   and p must be a node of a different circular list.','line_number':270,'multiline':False]
['text':'!','line_number':271,'multiline':False]
['text':'! <b>Effects</b>: Removes the node i from its circular list and inserts','line_number':272,'multiline':False]
['text':'!   it before p in p's circular list.','line_number':273,'multiline':False]
['text':'!   If p == i or p == NodeTraits::get_next(i), this function is a null operation.','line_number':274,'multiline':False]
['text':'!','line_number':275,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':276,'multiline':False]
['text':'!','line_number':277,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':278,'multiline':False]
['text':'! <b>Effects</b>: Reverses the order of elements in the list.','line_number':295,'multiline':False]
['text':'!','line_number':296,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':297,'multiline':False]
['text':'!','line_number':298,'multiline':False]
['text':'! <b>Complexity</b>: This function is linear time.','line_number':299,'multiline':False]
['text':'! <b>Effects</b>: Moves the node p n positions towards the end of the list.','line_number':313,'multiline':False]
['text':'!','line_number':314,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':315,'multiline':False]
['text':'!','line_number':316,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of moved positions.','line_number':317,'multiline':False]
['text':'Null shift, nothing to do','line_number':320,'multiline':False]
['text':'size() == 0 or 1, nothing to do','line_number':323,'multiline':False]
['text':'Now get the new first node','line_number':326,'multiline':False]
['text':'! <b>Effects</b>: Moves the node p n positions towards the beginning of the list.','line_number':333,'multiline':False]
['text':'!','line_number':334,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':335,'multiline':False]
['text':'!','line_number':336,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of moved positions.','line_number':337,'multiline':False]
['text':'Null shift, nothing to do','line_number':340,'multiline':False]
['text':'size() == 0 or 1, nothing to do','line_number':343,'multiline':False]
['text':'Now get the new last node','line_number':347,'multiline':False]
['text':'! <b>Requires</b>: f and l must be in a circular list.','line_number':354,'multiline':False]
['text':'!','line_number':355,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of nodes in the range [f, l).','line_number':356,'multiline':False]
['text':'!','line_number':357,'multiline':False]
['text':'! <b>Complexity</b>: Linear','line_number':358,'multiline':False]
['text':'!','line_number':359,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':360,'multiline':False]
['text':'Main loop','line_number':399,'multiline':False]
['text':'Might throw','line_number':401,'multiline':False]
['text':'Process current node','line_number':403,'multiline':False]
['text':'/ @cond','line_number':451,'multiline':False]
['text':'/ @endcond','line_number':459,'multiline':False]
['text':'namespace intrusive','line_number':461,'multiline':False]
['text':'namespace boost','line_number':462,'multiline':False]
['text':'BOOST_INTRUSIVE_CIRCULAR_LIST_ALGORITHMS_HPP','line_number':466,'multiline':False]
