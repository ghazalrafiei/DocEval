['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga  2013-2013','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'Use "pack" member template to pack options','line_number':34,'multiline':False]
['text':'Avoid packing "void" to shorten template names','line_number':41,'multiline':False]
['text':' join options','line_number':61,'multiline':False]
['text':'index_tuple','line_number':101,'multiline':False]
['text':'build_number_seq','line_number':105,'multiline':False]
['text':'invert_typelist','line_number':122,'multiline':False]
['text':'sizeof_typelist','line_number':148,'multiline':False]
['text':'invert_typelist_impl','line_number':158,'multiline':False]
['text':'invert_typelist','line_number':183,'multiline':False]
['text':'Do pack','line_number':195,'multiline':False]
['text':'!defined(BOOST_INTRUSIVE_VARIADIC_TEMPLATES)','line_number':236,'multiline':False]
['text':'','line_number':248,'multiline':False]
['text':'','line_number':260,'multiline':False]
['text':'#ifndef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':262,'multiline':False]
['text':'! This class is a utility that takes:','line_number':264,'multiline':False]
['text':'!   - a default options class defining initial static constant','line_number':265,'multiline':False]
['text':'!   and typedefs','line_number':266,'multiline':False]
['text':'!   - several options defined with BOOST_INTRUSIVE_OPTION_CONSTANT and','line_number':267,'multiline':False]
['text':'! BOOST_INTRUSIVE_OPTION_TYPE','line_number':268,'multiline':False]
['text':'!','line_number':269,'multiline':False]
['text':'! and packs them together in a new type that defines all options as','line_number':270,'multiline':False]
['text':'! member typedefs or static constant values. Given options of form:','line_number':271,'multiline':False]
['text':'!','line_number':272,'multiline':False]
['text':'! \code','line_number':273,'multiline':False]
['text':'!   BOOST_INTRUSIVE_OPTION_TYPE(my_pointer, VoidPointer, VoidPointer, my_pointer_type)','line_number':274,'multiline':False]
['text':'!   BOOST_INTRUSIVE_OPTION_CONSTANT(incremental, bool, Enabled, is_incremental)','line_number':275,'multiline':False]
['text':'! \endcode','line_number':276,'multiline':False]
['text':'!','line_number':277,'multiline':False]
['text':'! the following expression','line_number':278,'multiline':False]
['text':'!','line_number':279,'multiline':False]
['text':'! \code','line_number':280,'multiline':False]
['text':'!','line_number':281,'multiline':False]
['text':'! struct default_options','line_number':282,'multiline':False]
['text':'! {','line_number':283,'multiline':False]
['text':'!   typedef long      int_type;','line_number':284,'multiline':False]
['text':'!   static const int  int_constant = -1;','line_number':285,'multiline':False]
['text':'! };','line_number':286,'multiline':False]
['text':'!','line_number':287,'multiline':False]
['text':'! pack_options< default_options, my_pointer<void*>, incremental<true> >::type','line_number':288,'multiline':False]
['text':'! \endcode','line_number':289,'multiline':False]
['text':'!','line_number':290,'multiline':False]
['text':'! will create a type that will contain the following typedefs/constants','line_number':291,'multiline':False]
['text':'!','line_number':292,'multiline':False]
['text':'! \code','line_number':293,'multiline':False]
['text':'!   struct unspecified_type','line_number':294,'multiline':False]
['text':'!   {','line_number':295,'multiline':False]
['text':'!      //Default options','line_number':296,'multiline':False]
['text':'!      typedef long      int_type;','line_number':297,'multiline':False]
['text':'!      static const int  int_constant  = -1;','line_number':298,'multiline':False]
['text':'!','line_number':299,'multiline':False]
['text':'!      //Packed options (will ovewrite any default option)','line_number':300,'multiline':False]
['text':'!      typedef void*     my_pointer_type;','line_number':301,'multiline':False]
['text':'!      static const bool is_incremental = true;','line_number':302,'multiline':False]
['text':'!   };','line_number':303,'multiline':False]
['text':'! \endcode','line_number':304,'multiline':False]
['text':'!','line_number':305,'multiline':False]
['text':'! If an option is specified in the default options argument and later','line_number':306,'multiline':False]
['text':'! redefined as an option, the last definition will prevail.','line_number':307,'multiline':False]
['text':'! Defines an option class of name OPTION_NAME that can be used to specify a type','line_number':314,'multiline':False]
['text':'! of type TYPE...','line_number':315,'multiline':False]
['text':'!','line_number':316,'multiline':False]
['text':'! \code','line_number':317,'multiline':False]
['text':'! struct OPTION_NAME<class TYPE>','line_number':318,'multiline':False]
['text':'! {  unspecified_content  };','line_number':319,'multiline':False]
['text':'! \endcode','line_number':320,'multiline':False]
['text':'!','line_number':321,'multiline':False]
['text':'! ...that after being combined with','line_number':322,'multiline':False]
['text':'! <code>boost::intrusive::pack_options</code>,','line_number':323,'multiline':False]
['text':'! will typedef TYPE as a typedef of name TYPEDEF_NAME. Example:','line_number':324,'multiline':False]
['text':'!','line_number':325,'multiline':False]
['text':'! \code','line_number':326,'multiline':False]
['text':'!   //[includes and namespaces omitted for brevity]','line_number':327,'multiline':False]
['text':'!','line_number':328,'multiline':False]
['text':'!   //This macro will create the following class:','line_number':329,'multiline':False]
['text':'!   //    template<class VoidPointer>','line_number':330,'multiline':False]
['text':'!   //    struct my_pointer','line_number':331,'multiline':False]
['text':'!   //    { unspecified_content };','line_number':332,'multiline':False]
['text':'!   BOOST_INTRUSIVE_OPTION_TYPE(my_pointer, VoidPointer, boost::remove_pointer<VoidPointer>::type, my_pointer_type)','line_number':333,'multiline':False]
['text':'!','line_number':334,'multiline':False]
['text':'!   struct empty_default{};','line_number':335,'multiline':False]
['text':'!','line_number':336,'multiline':False]
['text':'!   typedef pack_options< empty_default, typename my_pointer<void*> >::type::my_pointer_type type;','line_number':337,'multiline':False]
['text':'!','line_number':338,'multiline':False]
['text':'!   BOOST_STATIC_ASSERT(( boost::is_same<type, void>::value ));','line_number':339,'multiline':False]
['text':'!','line_number':340,'multiline':False]
['text':'! \endcode','line_number':341,'multiline':False]
['text':'! Defines an option class of name OPTION_NAME that can be used to specify a constant','line_number':344,'multiline':False]
['text':'! of type TYPE with value VALUE...','line_number':345,'multiline':False]
['text':'!','line_number':346,'multiline':False]
['text':'! \code','line_number':347,'multiline':False]
['text':'! struct OPTION_NAME<TYPE VALUE>','line_number':348,'multiline':False]
['text':'! {  unspecified_content  };','line_number':349,'multiline':False]
['text':'! \endcode','line_number':350,'multiline':False]
['text':'!','line_number':351,'multiline':False]
['text':'! ...that after being combined with','line_number':352,'multiline':False]
['text':'! <code>boost::intrusive::pack_options</code>,','line_number':353,'multiline':False]
['text':'! will contain a CONSTANT_NAME static constant of value VALUE. Example:','line_number':354,'multiline':False]
['text':'!','line_number':355,'multiline':False]
['text':'! \code','line_number':356,'multiline':False]
['text':'!   //[includes and namespaces omitted for brevity]','line_number':357,'multiline':False]
['text':'!','line_number':358,'multiline':False]
['text':'!   //This macro will create the following class:','line_number':359,'multiline':False]
['text':'!   //    template<bool Enabled>','line_number':360,'multiline':False]
['text':'!   //    struct incremental','line_number':361,'multiline':False]
['text':'!   //    { unspecified_content };','line_number':362,'multiline':False]
['text':'!   BOOST_INTRUSIVE_OPTION_CONSTANT(incremental, bool, Enabled, is_incremental)','line_number':363,'multiline':False]
['text':'!','line_number':364,'multiline':False]
['text':'!   struct empty_default{};','line_number':365,'multiline':False]
['text':'!','line_number':366,'multiline':False]
['text':'!   const bool is_incremental = pack_options< empty_default, incremental<true> >::type::is_incremental;','line_number':367,'multiline':False]
['text':'!','line_number':368,'multiline':False]
['text':'!   BOOST_STATIC_ASSERT(( is_incremental == true ));','line_number':369,'multiline':False]
['text':'!','line_number':370,'multiline':False]
['text':'! \endcode','line_number':371,'multiline':False]
['text':'#ifndef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':374,'multiline':False]
['text':'namespace intrusive {','line_number':377,'multiline':False]
['text':'namespace boost {','line_number':378,'multiline':False]
['text':'#ifndef BOOST_INTRUSIVE_PACK_OPTIONS_HPP','line_number':382,'multiline':False]
