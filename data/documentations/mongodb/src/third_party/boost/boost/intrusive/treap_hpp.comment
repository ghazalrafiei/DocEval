['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2008-2013','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'std::pair','line_number':38,'multiline':False]
['text':'/ @cond','line_number':47,'multiline':False]
['text':'/ @endcond','line_number':71,'multiline':False]
['text':'! The class template treap is an intrusive treap container that','line_number':73,'multiline':False]
['text':'! is used to construct intrusive set and multiset containers. The no-throw','line_number':74,'multiline':False]
['text':'! guarantee holds only, if the key_compare object and priority_compare object','line_number':75,'multiline':False]
['text':'! don't throw.','line_number':76,'multiline':False]
['text':'!','line_number':77,'multiline':False]
['text':'! The template parameter \c T is the type to be managed by the container.','line_number':78,'multiline':False]
['text':'! The user can specify additional options and if no options are provided','line_number':79,'multiline':False]
['text':'! default options are used.','line_number':80,'multiline':False]
['text':'!','line_number':81,'multiline':False]
['text':'! The container supports the following options:','line_number':82,'multiline':False]
['text':'! \c base_hook<>/member_hook<>/value_traits<>,','line_number':83,'multiline':False]
['text':'! \c constant_time_size<>, \c size_type<>,','line_number':84,'multiline':False]
['text':'! \c compare<>, \c priority<> and \c priority_of_value<>','line_number':85,'multiline':False]
['text':'/ @cond','line_number':92,'multiline':False]
['text':'Use public inheritance to avoid MSVC bugs with closures','line_number':94,'multiline':False]
['text':'/ @endcond','line_number':98,'multiline':False]
['text':'/ @cond','line_number':102,'multiline':False]
['text':'/ @endcond','line_number':114,'multiline':False]
['text':'/ @cond','line_number':153,'multiline':False]
['text':'noncopyable','line_number':156,'multiline':False]
['text':'/ @endcond','line_number':165,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty container.','line_number':170,'multiline':False]
['text':'!','line_number':171,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':172,'multiline':False]
['text':'!','line_number':173,'multiline':False]
['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':174,'multiline':False]
['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':175,'multiline':False]
['text':'!   or the copy constructor of the value_compare/priority_compare objects throw. Basic guarantee.','line_number':176,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty container.','line_number':181,'multiline':False]
['text':'!','line_number':182,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':183,'multiline':False]
['text':'!','line_number':184,'multiline':False]
['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':185,'multiline':False]
['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':186,'multiline':False]
['text':'!   or the copy constructor of the value_compare/priority_compare objects throw. Basic guarantee.','line_number':187,'multiline':False]
['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue of type value_type.','line_number':194,'multiline':False]
['text':'!   cmp must be a comparison function that induces a strict weak ordering.','line_number':195,'multiline':False]
['text':'!','line_number':196,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty container and inserts elements from','line_number':197,'multiline':False]
['text':'!   [b, e).','line_number':198,'multiline':False]
['text':'!','line_number':199,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if [b, e) is already sorted using','line_number':200,'multiline':False]
['text':'!   comp and otherwise N * log N, where N is the distance between first and last.','line_number':201,'multiline':False]
['text':'!','line_number':202,'multiline':False]
['text':'! <b>Throws</b>: If value_traits::node_traits::node','line_number':203,'multiline':False]
['text':'!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)','line_number':204,'multiline':False]
['text':'!   or the copy constructor/operator() of the key_compare/priority_compare objects','line_number':205,'multiline':False]
['text':'!   throw. Basic guarantee.','line_number':206,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::bstree(bstree &&)','line_number':220,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::operator=(bstree &&)','line_number':226,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::~bstree()','line_number':231,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::begin()','line_number':234,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::begin()const','line_number':237,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::cbegin()const','line_number':240,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::end()','line_number':243,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::end()const','line_number':246,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::cend()const','line_number':249,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator pointing to the highest priority object of the treap.','line_number':253,'multiline':False]
['text':'!','line_number':254,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':255,'multiline':False]
['text':'!','line_number':256,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':257,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator pointing to the highest priority object of the treap..','line_number':261,'multiline':False]
['text':'!','line_number':262,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':263,'multiline':False]
['text':'!','line_number':264,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':265,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator pointing to the highest priority object of the treap..','line_number':269,'multiline':False]
['text':'!','line_number':270,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':271,'multiline':False]
['text':'!','line_number':272,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':273,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::rbegin()','line_number':278,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::rbegin()const','line_number':281,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::crbegin()const','line_number':284,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::rend()','line_number':287,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::rend()const','line_number':290,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::crend()const','line_number':293,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::root()','line_number':296,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::root()const','line_number':299,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::croot()const','line_number':302,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the highest priority object of the','line_number':307,'multiline':False]
['text':'!    reversed treap.','line_number':308,'multiline':False]
['text':'!','line_number':309,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':310,'multiline':False]
['text':'!','line_number':311,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':312,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the highest priority objec','line_number':316,'multiline':False]
['text':'!    of the reversed treap.','line_number':317,'multiline':False]
['text':'!','line_number':318,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':319,'multiline':False]
['text':'!','line_number':320,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':321,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the highest priority object','line_number':325,'multiline':False]
['text':'!    of the reversed treap.','line_number':326,'multiline':False]
['text':'!','line_number':327,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':328,'multiline':False]
['text':'!','line_number':329,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':330,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::container_from_end_iterator(iterator)','line_number':335,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::container_from_end_iterator(const_iterator)','line_number':338,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::container_from_iterator(iterator)','line_number':341,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::container_from_iterator(const_iterator)','line_number':344,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::key_comp()const','line_number':347,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::value_comp()const','line_number':350,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::empty()const','line_number':353,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::size()const','line_number':356,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':358,'multiline':False]
['text':'! <b>Effects</b>: Returns the priority_compare object used by the container.','line_number':360,'multiline':False]
['text':'!','line_number':361,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':362,'multiline':False]
['text':'!','line_number':363,'multiline':False]
['text':'! <b>Throws</b>: If priority_compare copy-constructor throws.','line_number':364,'multiline':False]
['text':'! <b>Effects</b>: Swaps the contents of two treaps.','line_number':368,'multiline':False]
['text':'!','line_number':369,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':370,'multiline':False]
['text':'!','line_number':371,'multiline':False]
['text':'! <b>Throws</b>: If the comparison functor's swap call throws.','line_number':372,'multiline':False]
['text':'This can throw','line_number':375,'multiline':False]
['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':380,'multiline':False]
['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':381,'multiline':False]
['text':'!','line_number':382,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':383,'multiline':False]
['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':384,'multiline':False]
['text':'!   elements from src calling Cloner::operator()(const_reference )','line_number':385,'multiline':False]
['text':'!   and inserts them on *this. Copies the predicate from the source container.','line_number':386,'multiline':False]
['text':'!','line_number':387,'multiline':False]
['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':388,'multiline':False]
['text':'!   calling Disposer::operator()(pointer).','line_number':389,'multiline':False]
['text':'!','line_number':390,'multiline':False]
['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':391,'multiline':False]
['text':'!','line_number':392,'multiline':False]
['text':'! <b>Throws</b>: If cloner throws or predicate copy assignment throws. Basic guarantee.','line_number':393,'multiline':False]
['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':401,'multiline':False]
['text':'!   Cloner should yield to nodes equivalent to the original nodes.','line_number':402,'multiline':False]
['text':'!','line_number':403,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements from *this','line_number':404,'multiline':False]
['text':'!   calling Disposer::operator()(pointer), clones all the','line_number':405,'multiline':False]
['text':'!   elements from src calling Cloner::operator()(reference)','line_number':406,'multiline':False]
['text':'!   and inserts them on *this. Copies the predicate from the source container.','line_number':407,'multiline':False]
['text':'!','line_number':408,'multiline':False]
['text':'!   If cloner throws, all cloned elements are unlinked and disposed','line_number':409,'multiline':False]
['text':'!   calling Disposer::operator()(pointer).','line_number':410,'multiline':False]
['text':'!','line_number':411,'multiline':False]
['text':'! <b>Complexity</b>: Linear to erased plus inserted elements.','line_number':412,'multiline':False]
['text':'!','line_number':413,'multiline':False]
['text':'! <b>Throws</b>: If cloner throws or predicate copy assignment throws. Basic guarantee.','line_number':414,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue','line_number':422,'multiline':False]
['text':'!','line_number':423,'multiline':False]
['text':'! <b>Effects</b>: Inserts value into the container before the upper bound.','line_number':424,'multiline':False]
['text':'!','line_number':425,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for insert element is at','line_number':426,'multiline':False]
['text':'!   most logarithmic.','line_number':427,'multiline':False]
['text':'!','line_number':428,'multiline':False]
['text':'! <b>Throws</b>: If the internal key_compare or priority_compare functions throw. Strong guarantee.','line_number':429,'multiline':False]
['text':'!','line_number':430,'multiline':False]
['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':431,'multiline':False]
['text':'!   No copy-constructors are called.','line_number':432,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue, and "hint" must be','line_number':448,'multiline':False]
['text':'!   a valid iterator.','line_number':449,'multiline':False]
['text':'!','line_number':450,'multiline':False]
['text':'! <b>Effects</b>: Inserts x into the container, using "hint" as a hint to','line_number':451,'multiline':False]
['text':'!   where it will be inserted. If "hint" is the upper_bound','line_number':452,'multiline':False]
['text':'!   the insertion takes constant time (two comparisons in the worst case)','line_number':453,'multiline':False]
['text':'!','line_number':454,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but it is amortized','line_number':455,'multiline':False]
['text':'!   constant time if t is inserted immediately before hint.','line_number':456,'multiline':False]
['text':'!','line_number':457,'multiline':False]
['text':'! <b>Throws</b>: If the internal key_compare or priority_compare functions throw. Strong guarantee.','line_number':458,'multiline':False]
['text':'!','line_number':459,'multiline':False]
['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':460,'multiline':False]
['text':'!   No copy-constructors are called.','line_number':461,'multiline':False]
['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue','line_number':478,'multiline':False]
['text':'!   of type value_type.','line_number':479,'multiline':False]
['text':'!','line_number':480,'multiline':False]
['text':'! <b>Effects</b>: Inserts a each element of a range into the container','line_number':481,'multiline':False]
['text':'!   before the upper bound of the key of each element.','line_number':482,'multiline':False]
['text':'!','line_number':483,'multiline':False]
['text':'! <b>Complexity</b>: Insert range is in general O(N * log(N)), where N is the','line_number':484,'multiline':False]
['text':'!   size of the range. However, it is linear in N if the range is already sorted','line_number':485,'multiline':False]
['text':'!   by key_comp().','line_number':486,'multiline':False]
['text':'!','line_number':487,'multiline':False]
['text':'! <b>Throws</b>: If the internal key_compare or priority_compare functions throw.','line_number':488,'multiline':False]
['text':'!   Strong guarantee.','line_number':489,'multiline':False]
['text':'!','line_number':490,'multiline':False]
['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':491,'multiline':False]
['text':'!   No copy-constructors are called.','line_number':492,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue','line_number':501,'multiline':False]
['text':'!','line_number':502,'multiline':False]
['text':'! <b>Effects</b>: Inserts value into the container if the value','line_number':503,'multiline':False]
['text':'!   is not already present.','line_number':504,'multiline':False]
['text':'!','line_number':505,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for insert element is at','line_number':506,'multiline':False]
['text':'!   most logarithmic.','line_number':507,'multiline':False]
['text':'!','line_number':508,'multiline':False]
['text':'! <b>Throws</b>: If the internal key_compare or priority_compare functions throw.','line_number':509,'multiline':False]
['text':'!   Strong guarantee.','line_number':510,'multiline':False]
['text':'!','line_number':511,'multiline':False]
['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':512,'multiline':False]
['text':'!   No copy-constructors are called.','line_number':513,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue, and "hint" must be','line_number':523,'multiline':False]
['text':'!   a valid iterator','line_number':524,'multiline':False]
['text':'!','line_number':525,'multiline':False]
['text':'! <b>Effects</b>: Tries to insert x into the container, using "hint" as a hint','line_number':526,'multiline':False]
['text':'!   to where it will be inserted.','line_number':527,'multiline':False]
['text':'!','line_number':528,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but it is amortized','line_number':529,'multiline':False]
['text':'!   constant time (two comparisons in the worst case)','line_number':530,'multiline':False]
['text':'!   if t is inserted immediately before hint.','line_number':531,'multiline':False]
['text':'!','line_number':532,'multiline':False]
['text':'! <b>Throws</b>: If the internal key_compare or priority_compare functions throw.','line_number':533,'multiline':False]
['text':'!   Strong guarantee.','line_number':534,'multiline':False]
['text':'!','line_number':535,'multiline':False]
['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':536,'multiline':False]
['text':'!   No copy-constructors are called.','line_number':537,'multiline':False]
['text':'! <b>Requires</b>: Dereferencing iterator must yield an lvalue','line_number':547,'multiline':False]
['text':'!   of type value_type.','line_number':548,'multiline':False]
['text':'!','line_number':549,'multiline':False]
['text':'! <b>Effects</b>: Tries to insert each element of a range into the container.','line_number':550,'multiline':False]
['text':'!','line_number':551,'multiline':False]
['text':'! <b>Complexity</b>: Insert range is in general O(N * log(N)), where N is the','line_number':552,'multiline':False]
['text':'!   size of the range. However, it is linear in N if the range is already sorted','line_number':553,'multiline':False]
['text':'!   by key_comp().','line_number':554,'multiline':False]
['text':'!','line_number':555,'multiline':False]
['text':'! <b>Throws</b>: If the internal key_compare or priority_compare functions throw.','line_number':556,'multiline':False]
['text':'!   Strong guarantee.','line_number':557,'multiline':False]
['text':'!','line_number':558,'multiline':False]
['text':'! <b>Note</b>: Does not affect the validity of iterators and references.','line_number':559,'multiline':False]
['text':'!   No copy-constructors are called.','line_number':560,'multiline':False]
['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':575,'multiline':False]
['text':'!   a user provided key instead of the value itself.','line_number':576,'multiline':False]
['text':'!','line_number':577,'multiline':False]
['text':'! <b>Returns</b>: If there is an equivalent value','line_number':578,'multiline':False]
['text':'!   returns a pair containing an iterator to the already present value','line_number':579,'multiline':False]
['text':'!   and false. If the value can be inserted returns true in the returned','line_number':580,'multiline':False]
['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':581,'multiline':False]
['text':'!   the "insert_commit" function.','line_number':582,'multiline':False]
['text':'!','line_number':583,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity is at most logarithmic.','line_number':584,'multiline':False]
['text':'!','line_number':585,'multiline':False]
['text':'! <b>Throws</b>: If the comparison or predicate functions throw. Strong guarantee.','line_number':586,'multiline':False]
['text':'!','line_number':587,'multiline':False]
['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':588,'multiline':False]
['text':'!   a value_type is expensive: if there is an equivalent value','line_number':589,'multiline':False]
['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':590,'multiline':False]
['text':'!   node that is used to impose the order is much cheaper to construct','line_number':591,'multiline':False]
['text':'!   than the value_type and this function offers the possibility to use that','line_number':592,'multiline':False]
['text':'!   part to check if the insertion will be successful.','line_number':593,'multiline':False]
['text':'!','line_number':594,'multiline':False]
['text':'!   If the check is successful, the user can construct the value_type and use','line_number':595,'multiline':False]
['text':'!   "insert_commit" to insert the object in constant-time. This gives a total','line_number':596,'multiline':False]
['text':'!   logarithmic complexity to the insertion: check(O(log(N)) + commit(O(1)).','line_number':597,'multiline':False]
['text':'!','line_number':598,'multiline':False]
['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':599,'multiline':False]
['text':'!   objects are inserted or erased from the container.','line_number':600,'multiline':False]
['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':605,'multiline':False]
['text':'!   a user provided key instead of the value itself, using "hint"','line_number':606,'multiline':False]
['text':'!   as a hint to where it will be inserted.','line_number':607,'multiline':False]
['text':'!','line_number':608,'multiline':False]
['text':'! <b>Returns</b>: If there is an equivalent value','line_number':609,'multiline':False]
['text':'!   returns a pair containing an iterator to the already present value','line_number':610,'multiline':False]
['text':'!   and false. If the value can be inserted returns true in the returned','line_number':611,'multiline':False]
['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':612,'multiline':False]
['text':'!   the "insert_commit" function.','line_number':613,'multiline':False]
['text':'!','line_number':614,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but it's amortized','line_number':615,'multiline':False]
['text':'!   constant time if t is inserted immediately before hint.','line_number':616,'multiline':False]
['text':'!','line_number':617,'multiline':False]
['text':'! <b>Throws</b>: If the comparison or predicate functions throw. Strong guarantee.','line_number':618,'multiline':False]
['text':'!','line_number':619,'multiline':False]
['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':620,'multiline':False]
['text':'!   a value_type is expensive: if there is an equivalent value','line_number':621,'multiline':False]
['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':622,'multiline':False]
['text':'!   constructing that is used to impose the order is much cheaper to construct','line_number':623,'multiline':False]
['text':'!   than the value_type and this function offers the possibility to use that key','line_number':624,'multiline':False]
['text':'!   to check if the insertion will be successful.','line_number':625,'multiline':False]
['text':'!','line_number':626,'multiline':False]
['text':'!   If the check is successful, the user can construct the value_type and use','line_number':627,'multiline':False]
['text':'!   "insert_commit" to insert the object in constant-time. This can give a total','line_number':628,'multiline':False]
['text':'!   constant-time complexity to the insertion: check(O(1)) + commit(O(1)).','line_number':629,'multiline':False]
['text':'!','line_number':630,'multiline':False]
['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':631,'multiline':False]
['text':'!   objects are inserted or erased from the container.','line_number':632,'multiline':False]
['text':'! <b>Requires</b>: comp must be a comparison function that induces','line_number':637,'multiline':False]
['text':'!   the same strict weak ordering as key_compare.','line_number':638,'multiline':False]
['text':'!   prio_value_pcomp must be a comparison function that induces','line_number':639,'multiline':False]
['text':'!   the same strict weak ordering as priority_compare. The difference is that','line_number':640,'multiline':False]
['text':'!   prio_value_pcomp and comp compare an arbitrary key/priority with the contained values.','line_number':641,'multiline':False]
['text':'!','line_number':642,'multiline':False]
['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':643,'multiline':False]
['text':'!   a user provided key instead of the value itself.','line_number':644,'multiline':False]
['text':'!','line_number':645,'multiline':False]
['text':'! <b>Returns</b>: If there is an equivalent value','line_number':646,'multiline':False]
['text':'!   returns a pair containing an iterator to the already present value','line_number':647,'multiline':False]
['text':'!   and false. If the value can be inserted returns true in the returned','line_number':648,'multiline':False]
['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':649,'multiline':False]
['text':'!   the "insert_commit" function.','line_number':650,'multiline':False]
['text':'!','line_number':651,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity is at most logarithmic.','line_number':652,'multiline':False]
['text':'!','line_number':653,'multiline':False]
['text':'! <b>Throws</b>: If the comp or prio_value_pcomp','line_number':654,'multiline':False]
['text':'!   ordering functions throw. Strong guarantee.','line_number':655,'multiline':False]
['text':'!','line_number':656,'multiline':False]
['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':657,'multiline':False]
['text':'!   a value_type is expensive: if there is an equivalent value','line_number':658,'multiline':False]
['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':659,'multiline':False]
['text':'!   node that is used to impose the order is much cheaper to construct','line_number':660,'multiline':False]
['text':'!   than the value_type and this function offers the possibility to use that','line_number':661,'multiline':False]
['text':'!   part to check if the insertion will be successful.','line_number':662,'multiline':False]
['text':'!','line_number':663,'multiline':False]
['text':'!   If the check is successful, the user can construct the value_type and use','line_number':664,'multiline':False]
['text':'!   "insert_commit" to insert the object in constant-time. This gives a total','line_number':665,'multiline':False]
['text':'!   logarithmic complexity to the insertion: check(O(log(N)) + commit(O(1)).','line_number':666,'multiline':False]
['text':'!','line_number':667,'multiline':False]
['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':668,'multiline':False]
['text':'!   objects are inserted or erased from the container.','line_number':669,'multiline':False]
['text':'! <b>Requires</b>: comp must be a comparison function that induces','line_number':688,'multiline':False]
['text':'!   the same strict weak ordering as key_compare.','line_number':689,'multiline':False]
['text':'!   prio_value_pcomp must be a comparison function that induces','line_number':690,'multiline':False]
['text':'!   the same strict weak ordering as priority_compare. The difference is that','line_number':691,'multiline':False]
['text':'!   prio_value_pcomp and comp compare an arbitrary key/priority with the contained values.','line_number':692,'multiline':False]
['text':'!','line_number':693,'multiline':False]
['text':'! <b>Effects</b>: Checks if a value can be inserted in the container, using','line_number':694,'multiline':False]
['text':'!   a user provided key instead of the value itself, using "hint"','line_number':695,'multiline':False]
['text':'!   as a hint to where it will be inserted.','line_number':696,'multiline':False]
['text':'!','line_number':697,'multiline':False]
['text':'! <b>Returns</b>: If there is an equivalent value','line_number':698,'multiline':False]
['text':'!   returns a pair containing an iterator to the already present value','line_number':699,'multiline':False]
['text':'!   and false. If the value can be inserted returns true in the returned','line_number':700,'multiline':False]
['text':'!   pair boolean and fills "commit_data" that is meant to be used with','line_number':701,'multiline':False]
['text':'!   the "insert_commit" function.','line_number':702,'multiline':False]
['text':'!','line_number':703,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but it's amortized','line_number':704,'multiline':False]
['text':'!   constant time if t is inserted immediately before hint.','line_number':705,'multiline':False]
['text':'!','line_number':706,'multiline':False]
['text':'! <b>Throws</b>: If the comp or prio_value_pcomp','line_number':707,'multiline':False]
['text':'!   ordering functions throw. Strong guarantee.','line_number':708,'multiline':False]
['text':'!','line_number':709,'multiline':False]
['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':710,'multiline':False]
['text':'!   a value_type is expensive: if there is an equivalent value','line_number':711,'multiline':False]
['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':712,'multiline':False]
['text':'!   constructing that is used to impose the order is much cheaper to construct','line_number':713,'multiline':False]
['text':'!   than the value_type and this function offers the possibility to use that key','line_number':714,'multiline':False]
['text':'!   to check if the insertion will be successful.','line_number':715,'multiline':False]
['text':'!','line_number':716,'multiline':False]
['text':'!   If the check is successful, the user can construct the value_type and use','line_number':717,'multiline':False]
['text':'!   "insert_commit" to insert the object in constant-time. This can give a total','line_number':718,'multiline':False]
['text':'!   constant-time complexity to the insertion: check(O(1)) + commit(O(1)).','line_number':719,'multiline':False]
['text':'!','line_number':720,'multiline':False]
['text':'!   "commit_data" remains valid for a subsequent "insert_commit" only if no more','line_number':721,'multiline':False]
['text':'!   objects are inserted or erased from the container.','line_number':722,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue of type value_type. commit_data','line_number':741,'multiline':False]
['text':'!   must have been obtained from a previous call to "insert_check".','line_number':742,'multiline':False]
['text':'!   No objects should have been inserted or erased from the container between','line_number':743,'multiline':False]
['text':'!   the "insert_check" that filled "commit_data" and the call to "insert_commit".','line_number':744,'multiline':False]
['text':'!','line_number':745,'multiline':False]
['text':'! <b>Effects</b>: Inserts the value in the avl_set using the information obtained','line_number':746,'multiline':False]
['text':'!   from the "commit_data" that a previous "insert_check" filled.','line_number':747,'multiline':False]
['text':'!','line_number':748,'multiline':False]
['text':'! <b>Returns</b>: An iterator to the newly inserted object.','line_number':749,'multiline':False]
['text':'!','line_number':750,'multiline':False]
['text':'! <b>Complexity</b>: Constant time.','line_number':751,'multiline':False]
['text':'!','line_number':752,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':753,'multiline':False]
['text':'!','line_number':754,'multiline':False]
['text':'! <b>Notes</b>: This function has only sense if a "insert_check" has been','line_number':755,'multiline':False]
['text':'!   previously executed to fill "commit_data". No value should be inserted or','line_number':756,'multiline':False]
['text':'!   erased between the "insert_check" and "insert_commit" calls.','line_number':757,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue, "pos" must be','line_number':767,'multiline':False]
['text':'!   a valid iterator (or end) and must be the succesor of value','line_number':768,'multiline':False]
['text':'!   once inserted according to the predicate','line_number':769,'multiline':False]
['text':'!','line_number':770,'multiline':False]
['text':'! <b>Effects</b>: Inserts x into the container before "pos".','line_number':771,'multiline':False]
['text':'!','line_number':772,'multiline':False]
['text':'! <b>Complexity</b>: Constant time.','line_number':773,'multiline':False]
['text':'!','line_number':774,'multiline':False]
['text':'! <b>Throws</b>: If the internal priority_compare function throws. Strong guarantee.','line_number':775,'multiline':False]
['text':'!','line_number':776,'multiline':False]
['text':'! <b>Note</b>: This function does not check preconditions so if "pos" is not','line_number':777,'multiline':False]
['text':'! the successor of "value" container ordering invariant will be broken.','line_number':778,'multiline':False]
['text':'! This is a low-level function to be used only for performance reasons','line_number':779,'multiline':False]
['text':'! by advanced users.','line_number':780,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue, and it must be no less','line_number':797,'multiline':False]
['text':'!   than the greatest inserted key','line_number':798,'multiline':False]
['text':'!','line_number':799,'multiline':False]
['text':'! <b>Effects</b>: Inserts x into the container in the last position.','line_number':800,'multiline':False]
['text':'!','line_number':801,'multiline':False]
['text':'! <b>Complexity</b>: Constant time.','line_number':802,'multiline':False]
['text':'!','line_number':803,'multiline':False]
['text':'! <b>Throws</b>: If the internal priority_compare function throws. Strong guarantee.','line_number':804,'multiline':False]
['text':'!','line_number':805,'multiline':False]
['text':'! <b>Note</b>: This function does not check preconditions so if value is','line_number':806,'multiline':False]
['text':'!   less than the greatest inserted key container ordering invariant will be broken.','line_number':807,'multiline':False]
['text':'!   This function is slightly more efficient than using "insert_before".','line_number':808,'multiline':False]
['text':'!   This is a low-level function to be used only for performance reasons','line_number':809,'multiline':False]
['text':'!   by advanced users.','line_number':810,'multiline':False]
['text':'! <b>Requires</b>: value must be an lvalue, and it must be no greater','line_number':820,'multiline':False]
['text':'!   than the minimum inserted key','line_number':821,'multiline':False]
['text':'!','line_number':822,'multiline':False]
['text':'! <b>Effects</b>: Inserts x into the container in the first position.','line_number':823,'multiline':False]
['text':'!','line_number':824,'multiline':False]
['text':'! <b>Complexity</b>: Constant time.','line_number':825,'multiline':False]
['text':'!','line_number':826,'multiline':False]
['text':'! <b>Throws</b>: If the internal priority_compare function throws. Strong guarantee.','line_number':827,'multiline':False]
['text':'!','line_number':828,'multiline':False]
['text':'! <b>Note</b>: This function does not check preconditions so if value is','line_number':829,'multiline':False]
['text':'!   greater than the minimum inserted key container ordering invariant will be broken.','line_number':830,'multiline':False]
['text':'!   This function is slightly more efficient than using "insert_before".','line_number':831,'multiline':False]
['text':'!   This is a low-level function to be used only for performance reasons','line_number':832,'multiline':False]
['text':'!   by advanced users.','line_number':833,'multiline':False]
['text':'! <b>Effects</b>: Erases the element pointed to by i.','line_number':843,'multiline':False]
['text':'!','line_number':844,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for erase element is constant time.','line_number':845,'multiline':False]
['text':'!','line_number':846,'multiline':False]
['text':'! <b>Throws</b>: if the internal priority_compare function throws. Strong guarantee.','line_number':847,'multiline':False]
['text':'!','line_number':848,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':849,'multiline':False]
['text':'!    to the erased elements. No destructors are called.','line_number':850,'multiline':False]
['text':'! <b>Effects</b>: Erases the range pointed to by b end e.','line_number':865,'multiline':False]
['text':'!','line_number':866,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for erase range is at most','line_number':867,'multiline':False]
['text':'!   O(log(size() + N)), where N is the number of elements in the range.','line_number':868,'multiline':False]
['text':'!','line_number':869,'multiline':False]
['text':'! <b>Throws</b>: if the internal priority_compare function throws. Strong guarantee.','line_number':870,'multiline':False]
['text':'!','line_number':871,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':872,'multiline':False]
['text':'!    to the erased elements. No destructors are called.','line_number':873,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements with the given value.','line_number':877,'multiline':False]
['text':'!','line_number':878,'multiline':False]
['text':'! <b>Returns</b>: The number of erased elements.','line_number':879,'multiline':False]
['text':'!','line_number':880,'multiline':False]
['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':881,'multiline':False]
['text':'!','line_number':882,'multiline':False]
['text':'! <b>Throws</b>: if the internal priority_compare function throws. Strong guarantee.','line_number':883,'multiline':False]
['text':'!','line_number':884,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':885,'multiline':False]
['text':'!    to the erased elements. No destructors are called.','line_number':886,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements with the given key.','line_number':890,'multiline':False]
['text':'!   according to the comparison functor "comp".','line_number':891,'multiline':False]
['text':'!','line_number':892,'multiline':False]
['text':'! <b>Returns</b>: The number of erased elements.','line_number':893,'multiline':False]
['text':'!','line_number':894,'multiline':False]
['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':895,'multiline':False]
['text':'!','line_number':896,'multiline':False]
['text':'! <b>Throws</b>: if the internal priority_compare function throws.','line_number':897,'multiline':False]
['text':'!   Equivalent guarantee to <i>while(beg != end) erase(beg++);</i>','line_number':898,'multiline':False]
['text':'!','line_number':899,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':900,'multiline':False]
['text':'!    to the erased elements. No destructors are called.','line_number':901,'multiline':False]
['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':913,'multiline':False]
['text':'!','line_number':914,'multiline':False]
['text':'! <b>Effects</b>: Erases the element pointed to by i.','line_number':915,'multiline':False]
['text':'!   Disposer::operator()(pointer) is called for the removed element.','line_number':916,'multiline':False]
['text':'!','line_number':917,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for erase element is constant time.','line_number':918,'multiline':False]
['text':'!','line_number':919,'multiline':False]
['text':'! <b>Throws</b>: if the internal priority_compare function throws. Strong guarantee.','line_number':920,'multiline':False]
['text':'!','line_number':921,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators','line_number':922,'multiline':False]
['text':'!    to the erased elements.','line_number':923,'multiline':False]
['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':939,'multiline':False]
['text':'!','line_number':940,'multiline':False]
['text':'! <b>Effects</b>: Erases the range pointed to by b end e.','line_number':941,'multiline':False]
['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':942,'multiline':False]
['text':'!','line_number':943,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for erase range is at most','line_number':944,'multiline':False]
['text':'!   O(log(size() + N)), where N is the number of elements in the range.','line_number':945,'multiline':False]
['text':'!','line_number':946,'multiline':False]
['text':'! <b>Throws</b>: if the internal priority_compare function throws. Strong guarantee.','line_number':947,'multiline':False]
['text':'!','line_number':948,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators','line_number':949,'multiline':False]
['text':'!    to the erased elements.','line_number':950,'multiline':False]
['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':955,'multiline':False]
['text':'!','line_number':956,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements with the given value.','line_number':957,'multiline':False]
['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':958,'multiline':False]
['text':'!','line_number':959,'multiline':False]
['text':'! <b>Returns</b>: The number of erased elements.','line_number':960,'multiline':False]
['text':'!','line_number':961,'multiline':False]
['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':962,'multiline':False]
['text':'!','line_number':963,'multiline':False]
['text':'! <b>Throws</b>: if the priority_compare function throws then weak guarantee and heap invariants are broken.','line_number':964,'multiline':False]
['text':'!   The safest thing would be to clear or destroy the container.','line_number':965,'multiline':False]
['text':'!','line_number':966,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':967,'multiline':False]
['text':'!    to the erased elements. No destructors are called.','line_number':968,'multiline':False]
['text':'! <b>Requires</b>: Disposer::operator()(pointer) shouldn't throw.','line_number':978,'multiline':False]
['text':'!','line_number':979,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements with the given key.','line_number':980,'multiline':False]
['text':'!   according to the comparison functor "comp".','line_number':981,'multiline':False]
['text':'!   Disposer::operator()(pointer) is called for the removed elements.','line_number':982,'multiline':False]
['text':'!','line_number':983,'multiline':False]
['text':'! <b>Returns</b>: The number of erased elements.','line_number':984,'multiline':False]
['text':'!','line_number':985,'multiline':False]
['text':'! <b>Complexity</b>: O(log(size() + N).','line_number':986,'multiline':False]
['text':'!','line_number':987,'multiline':False]
['text':'! <b>Throws</b>: if the priority_compare function throws then weak guarantee and heap invariants are broken.','line_number':988,'multiline':False]
['text':'!   The safest thing would be to clear or destroy the container.','line_number':989,'multiline':False]
['text':'!','line_number':990,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators','line_number':991,'multiline':False]
['text':'!    to the erased elements.','line_number':992,'multiline':False]
['text':'! <b>Effects</b>: Erases all of the elements.','line_number':1004,'multiline':False]
['text':'!','line_number':1005,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements on the container.','line_number':1006,'multiline':False]
['text':'!   if it's a safe-mode or auto-unlink value_type. Constant time otherwise.','line_number':1007,'multiline':False]
['text':'!','line_number':1008,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1009,'multiline':False]
['text':'!','line_number':1010,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1011,'multiline':False]
['text':'!    to the erased elements. No destructors are called.','line_number':1012,'multiline':False]
['text':'! <b>Effects</b>: Erases all of the elements calling disposer(p) for','line_number':1016,'multiline':False]
['text':'!   each node to be erased.','line_number':1017,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for is at most O(log(size() + N)),','line_number':1018,'multiline':False]
['text':'!   where N is the number of elements in the container.','line_number':1019,'multiline':False]
['text':'!','line_number':1020,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1021,'multiline':False]
['text':'!','line_number':1022,'multiline':False]
['text':'! <b>Note</b>: Invalidates the iterators (but not the references)','line_number':1023,'multiline':False]
['text':'!    to the erased elements. Calls N times to disposer functor.','line_number':1024,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::merge_unique','line_number':1035,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::merge_equal(bstree<T, Options2...>&)','line_number':1061,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::check(ExtraChecker)const','line_number':1084,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::check()const','line_number':1094,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::count(const key_type &)const','line_number':1099,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::count(const KeyType&,KeyTypeKeyCompare)const','line_number':1102,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const key_type &)','line_number':1106,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const KeyType&,KeyTypeKeyCompare)','line_number':1109,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const key_type &)const','line_number':1113,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::lower_bound(const KeyType&,KeyTypeKeyCompare)const','line_number':1116,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const key_type &)','line_number':1120,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const KeyType&,KeyTypeKeyCompare)','line_number':1123,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const key_type &)const','line_number':1127,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::upper_bound(const KeyType&,KeyTypeKeyCompare)const','line_number':1130,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::find(const key_type &)','line_number':1134,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::find(const KeyType&,KeyTypeKeyCompare)','line_number':1137,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::find(const key_type &)const','line_number':1141,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::find(const KeyType&,KeyTypeKeyCompare)const','line_number':1144,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const key_type &)','line_number':1148,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const KeyType&,KeyTypeKeyCompare)','line_number':1151,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const key_type &)const','line_number':1155,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::equal_range(const KeyType&,KeyTypeKeyCompare)const','line_number':1159,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const key_type &,const key_type &,bool,bool)','line_number':1164,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const KeyType&,const KeyType&,KeyTypeKeyCompare,bool,bool)','line_number':1168,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const key_type &,const key_type &,bool,bool)const','line_number':1173,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::bounded_range(const KeyType&,const KeyType&,KeyTypeKeyCompare,bool,bool)const','line_number':1177,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::s_iterator_to(reference)','line_number':1182,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::s_iterator_to(const_reference)','line_number':1185,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::iterator_to(reference)','line_number':1188,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::iterator_to(const_reference)const','line_number':1191,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::init_node(reference)','line_number':1194,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::unlink_leftmost_without_rebalance','line_number':1197,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::replace_node','line_number':1200,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree::remove_node','line_number':1203,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':1220,'multiline':False]
['text':'/ @cond','line_number':1222,'multiline':False]
['text':'/ @endcond','line_number':1238,'multiline':False]
['text':'! Helper metafunction to define a \c treap that yields to the same type when the','line_number':1242,'multiline':False]
['text':'! same options (either explicitly or implicitly) are used.','line_number':1243,'multiline':False]
['text':'/ @endcond','line_number':1276,'multiline':False]
['text':'Assert if passed value traits are compatible with the type','line_number':1315,'multiline':False]
['text':'namespace intrusive','line_number':1366,'multiline':False]
['text':'namespace boost','line_number':1367,'multiline':False]
['text':'BOOST_INTRUSIVE_TREAP_HPP','line_number':1371,'multiline':False]
