['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga  2006-2014.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':' namespace detail','line_number':64,'multiline':False]
['text':'#ifndef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':66,'multiline':False]
['text':'! treap_algorithms provides basic algorithms to manipulate','line_number':68,'multiline':False]
['text':'! nodes forming a treap.','line_number':69,'multiline':False]
['text':'!','line_number':70,'multiline':False]
['text':'! (1) the header node is maintained with links not only to the root','line_number':71,'multiline':False]
['text':'! but also to the leftmost node of the tree, to enable constant time','line_number':72,'multiline':False]
['text':'! begin(), and to the rightmost node of the tree, to enable linear time','line_number':73,'multiline':False]
['text':'! performance when used with the generic set algorithms (set_union,','line_number':74,'multiline':False]
['text':'! etc.);','line_number':75,'multiline':False]
['text':'!','line_number':76,'multiline':False]
['text':'! (2) when a node being deleted has two children its successor node is','line_number':77,'multiline':False]
['text':'! relinked into its place, rather than copied, so that the only','line_number':78,'multiline':False]
['text':'! pointers invalidated are those referring to the deleted node.','line_number':79,'multiline':False]
['text':'!','line_number':80,'multiline':False]
['text':'! treap_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':81,'multiline':False]
['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':82,'multiline':False]
['text':'! following interface:','line_number':83,'multiline':False]
['text':'!','line_number':84,'multiline':False]
['text':'! <b>Typedefs</b>:','line_number':85,'multiline':False]
['text':'!','line_number':86,'multiline':False]
['text':'! <tt>node</tt>: The type of the node that forms the treap','line_number':87,'multiline':False]
['text':'!','line_number':88,'multiline':False]
['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':89,'multiline':False]
['text':'!','line_number':90,'multiline':False]
['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':91,'multiline':False]
['text':'!','line_number':92,'multiline':False]
['text':'! <b>Static functions</b>:','line_number':93,'multiline':False]
['text':'!','line_number':94,'multiline':False]
['text':'! <tt>static node_ptr get_parent(const_node_ptr n);</tt>','line_number':95,'multiline':False]
['text':'!','line_number':96,'multiline':False]
['text':'! <tt>static void set_parent(node_ptr n, node_ptr parent);</tt>','line_number':97,'multiline':False]
['text':'!','line_number':98,'multiline':False]
['text':'! <tt>static node_ptr get_left(const_node_ptr n);</tt>','line_number':99,'multiline':False]
['text':'!','line_number':100,'multiline':False]
['text':'! <tt>static void set_left(node_ptr n, node_ptr left);</tt>','line_number':101,'multiline':False]
['text':'!','line_number':102,'multiline':False]
['text':'! <tt>static node_ptr get_right(const_node_ptr n);</tt>','line_number':103,'multiline':False]
['text':'!','line_number':104,'multiline':False]
['text':'! <tt>static void set_right(node_ptr n, node_ptr right);</tt>','line_number':105,'multiline':False]
['text':'/ @cond','line_number':118,'multiline':False]
['text':'p is left child','line_number':153,'multiline':False]
['text':'p is right child','line_number':156,'multiline':False]
['text':'/ @endcond','line_number':164,'multiline':False]
['text':'! This type is the information that will be','line_number':167,'multiline':False]
['text':'! filled by insert_unique_check','line_number':168,'multiline':False]
['text':'/ @cond','line_number':170,'multiline':False]
['text':'/ @endcond','line_number':172,'multiline':False]
['text':'/ @cond','line_number':174,'multiline':False]
['text':'/ @endcond','line_number':176,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::get_header(const_node_ptr)','line_number':181,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::begin_node','line_number':184,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::end_node','line_number':187,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_tree','line_number':190,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr)','line_number':193,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr,node_ptr,node_ptr)','line_number':196,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr)','line_number':199,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr,node_ptr)','line_number':202,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':204,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink(node_ptr)','line_number':206,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink_leftmost_without_rebalance','line_number':219,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unique(const_node_ptr)','line_number':222,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::size(const_node_ptr)','line_number':225,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::next_node(node_ptr)','line_number':228,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::prev_node(node_ptr)','line_number':231,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init(node_ptr)','line_number':234,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init_header(node_ptr)','line_number':237,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':239,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::erase(node_ptr,node_ptr)','line_number':241,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clone(const_node_ptr,node_ptr,Cloner,Disposer)','line_number':251,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clear_and_dispose(node_ptr,Disposer)','line_number':256,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':260,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::upper_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':265,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::find(const_node_ptr, const KeyType&,KeyNodePtrCompare)','line_number':270,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::equal_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':275,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::bounded_range(const_node_ptr,const KeyType&,const KeyType&,KeyNodePtrCompare,bool,bool)','line_number':280,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::count(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':286,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':290,'multiline':False]
['text':'! <b>Requires</b>: "h" must be the header node of a tree.','line_number':292,'multiline':False]
['text':'!   NodePtrCompare is a function object that induces a strict weak','line_number':293,'multiline':False]
['text':'!   ordering compatible with the strict weak ordering used to create the','line_number':294,'multiline':False]
['text':'!   the tree. NodePtrCompare compares two node_ptrs.','line_number':295,'multiline':False]
['text':'!   NodePtrPriorityCompare is a priority function object that induces a strict weak','line_number':296,'multiline':False]
['text':'!   ordering compatible with the one used to create the','line_number':297,'multiline':False]
['text':'!   the tree. NodePtrPriorityCompare compares two node_ptrs.','line_number':298,'multiline':False]
['text':'!','line_number':299,'multiline':False]
['text':'! <b>Effects</b>: Inserts new_node into the tree before the upper bound','line_number':300,'multiline':False]
['text':'!   according to "comp" and rotates the tree according to "pcomp".','line_number':301,'multiline':False]
['text':'!','line_number':302,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for insert element is at','line_number':303,'multiline':False]
['text':'!   most logarithmic.','line_number':304,'multiline':False]
['text':'!','line_number':305,'multiline':False]
['text':'! <b>Throws</b>: If "comp" throw or "pcomp" throw.','line_number':306,'multiline':False]
['text':'! <b>Requires</b>: "h" must be the header node of a tree.','line_number':317,'multiline':False]
['text':'!   NodePtrCompare is a function object that induces a strict weak','line_number':318,'multiline':False]
['text':'!   ordering compatible with the strict weak ordering used to create the','line_number':319,'multiline':False]
['text':'!   the tree. NodePtrCompare compares two node_ptrs.','line_number':320,'multiline':False]
['text':'!   NodePtrPriorityCompare is a priority function object that induces a strict weak','line_number':321,'multiline':False]
['text':'!   ordering compatible with the one used to create the','line_number':322,'multiline':False]
['text':'!   the tree. NodePtrPriorityCompare compares two node_ptrs.','line_number':323,'multiline':False]
['text':'!','line_number':324,'multiline':False]
['text':'! <b>Effects</b>: Inserts new_node into the tree before the upper bound','line_number':325,'multiline':False]
['text':'!   according to "comp" and rotates the tree according to "pcomp".','line_number':326,'multiline':False]
['text':'!','line_number':327,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity for insert element is at','line_number':328,'multiline':False]
['text':'!   most logarithmic.','line_number':329,'multiline':False]
['text':'!','line_number':330,'multiline':False]
['text':'! <b>Throws</b>: If "comp" throws.','line_number':331,'multiline':False]
['text':'! <b>Requires</b>: "header" must be the header node of a tree.','line_number':342,'multiline':False]
['text':'!   NodePtrCompare is a function object that induces a strict weak','line_number':343,'multiline':False]
['text':'!   ordering compatible with the strict weak ordering used to create the','line_number':344,'multiline':False]
['text':'!   the tree. NodePtrCompare compares two node_ptrs. "hint" is node from','line_number':345,'multiline':False]
['text':'!   the "header"'s tree.','line_number':346,'multiline':False]
['text':'!   NodePtrPriorityCompare is a priority function object that induces a strict weak','line_number':347,'multiline':False]
['text':'!   ordering compatible with the one used to create the','line_number':348,'multiline':False]
['text':'!   the tree. NodePtrPriorityCompare compares two node_ptrs.','line_number':349,'multiline':False]
['text':'!','line_number':350,'multiline':False]
['text':'! <b>Effects</b>: Inserts new_node into the tree, using "hint" as a hint to','line_number':351,'multiline':False]
['text':'!   where it will be inserted. If "hint" is the upper_bound','line_number':352,'multiline':False]
['text':'!   the insertion takes constant time (two comparisons in the worst case).','line_number':353,'multiline':False]
['text':'!   Rotates the tree according to "pcomp".','line_number':354,'multiline':False]
['text':'!','line_number':355,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but it is amortized','line_number':356,'multiline':False]
['text':'!   constant time if new_node is inserted immediately before "hint".','line_number':357,'multiline':False]
['text':'!','line_number':358,'multiline':False]
['text':'! <b>Throws</b>: If "comp" throw or "pcomp" throw.','line_number':359,'multiline':False]
['text':'! <b>Requires</b>: "header" must be the header node of a tree.','line_number':370,'multiline':False]
['text':'!   "pos" must be a valid node of the tree (including header end) node.','line_number':371,'multiline':False]
['text':'!   "pos" must be a node pointing to the successor to "new_node"','line_number':372,'multiline':False]
['text':'!   once inserted according to the order of already inserted nodes. This function does not','line_number':373,'multiline':False]
['text':'!   check "pos" and this precondition must be guaranteed by the caller.','line_number':374,'multiline':False]
['text':'!   NodePtrPriorityCompare is a priority function object that induces a strict weak','line_number':375,'multiline':False]
['text':'!   ordering compatible with the one used to create the','line_number':376,'multiline':False]
['text':'!   the tree. NodePtrPriorityCompare compares two node_ptrs.','line_number':377,'multiline':False]
['text':'!','line_number':378,'multiline':False]
['text':'! <b>Effects</b>: Inserts new_node into the tree before "pos"','line_number':379,'multiline':False]
['text':'!   and rotates the tree according to "pcomp".','line_number':380,'multiline':False]
['text':'!','line_number':381,'multiline':False]
['text':'! <b>Complexity</b>: Constant-time.','line_number':382,'multiline':False]
['text':'!','line_number':383,'multiline':False]
['text':'! <b>Throws</b>: If "pcomp" throws, strong guarantee.','line_number':384,'multiline':False]
['text':'!','line_number':385,'multiline':False]
['text':'! <b>Note</b>: If "pos" is not the successor of the newly inserted "new_node"','line_number':386,'multiline':False]
['text':'! tree invariants might be broken.','line_number':387,'multiline':False]
['text':'! <b>Requires</b>: "header" must be the header node of a tree.','line_number':398,'multiline':False]
['text':'!   "new_node" must be, according to the used ordering no less than the','line_number':399,'multiline':False]
['text':'!   greatest inserted key.','line_number':400,'multiline':False]
['text':'!   NodePtrPriorityCompare is a priority function object that induces a strict weak','line_number':401,'multiline':False]
['text':'!   ordering compatible with the one used to create the','line_number':402,'multiline':False]
['text':'!   the tree. NodePtrPriorityCompare compares two node_ptrs.','line_number':403,'multiline':False]
['text':'!','line_number':404,'multiline':False]
['text':'! <b>Effects</b>: Inserts x into the tree in the last position','line_number':405,'multiline':False]
['text':'!   and rotates the tree according to "pcomp".','line_number':406,'multiline':False]
['text':'!','line_number':407,'multiline':False]
['text':'! <b>Complexity</b>: Constant-time.','line_number':408,'multiline':False]
['text':'!','line_number':409,'multiline':False]
['text':'! <b>Throws</b>: If "pcomp" throws, strong guarantee.','line_number':410,'multiline':False]
['text':'!','line_number':411,'multiline':False]
['text':'! <b>Note</b>: If "new_node" is less than the greatest inserted key','line_number':412,'multiline':False]
['text':'! tree invariants are broken. This function is slightly faster than','line_number':413,'multiline':False]
['text':'! using "insert_before".','line_number':414,'multiline':False]
['text':'! <b>Requires</b>: "header" must be the header node of a tree.','line_number':423,'multiline':False]
['text':'!   "new_node" must be, according to the used ordering, no greater than the','line_number':424,'multiline':False]
['text':'!   lowest inserted key.','line_number':425,'multiline':False]
['text':'!   NodePtrPriorityCompare is a priority function object that induces a strict weak','line_number':426,'multiline':False]
['text':'!   ordering compatible with the one used to create the','line_number':427,'multiline':False]
['text':'!   the tree. NodePtrPriorityCompare compares two node_ptrs.','line_number':428,'multiline':False]
['text':'!','line_number':429,'multiline':False]
['text':'! <b>Effects</b>: Inserts x into the tree in the first position','line_number':430,'multiline':False]
['text':'!   and rotates the tree according to "pcomp".','line_number':431,'multiline':False]
['text':'!','line_number':432,'multiline':False]
['text':'! <b>Complexity</b>: Constant-time.','line_number':433,'multiline':False]
['text':'!','line_number':434,'multiline':False]
['text':'! <b>Throws</b>: If "pcomp" throws, strong guarantee.','line_number':435,'multiline':False]
['text':'!','line_number':436,'multiline':False]
['text':'! <b>Note</b>: If "new_node" is greater than the lowest inserted key','line_number':437,'multiline':False]
['text':'! tree invariants are broken. This function is slightly faster than','line_number':438,'multiline':False]
['text':'! using "insert_before".','line_number':439,'multiline':False]
['text':'! <b>Requires</b>: "header" must be the header node of a tree.','line_number':448,'multiline':False]
['text':'!   KeyNodePtrCompare is a function object that induces a strict weak','line_number':449,'multiline':False]
['text':'!   ordering compatible with the strict weak ordering used to create the','line_number':450,'multiline':False]
['text':'!   the tree. NodePtrCompare compares KeyType with a node_ptr.','line_number':451,'multiline':False]
['text':'!','line_number':452,'multiline':False]
['text':'! <b>Effects</b>: Checks if there is an equivalent node to "key" in the','line_number':453,'multiline':False]
['text':'!   tree according to "comp" and obtains the needed information to realize','line_number':454,'multiline':False]
['text':'!   a constant-time node insertion if there is no equivalent node.','line_number':455,'multiline':False]
['text':'!','line_number':456,'multiline':False]
['text':'! <b>Returns</b>: If there is an equivalent value','line_number':457,'multiline':False]
['text':'!   returns a pair containing a node_ptr to the already present node','line_number':458,'multiline':False]
['text':'!   and false. If there is not equivalent key can be inserted returns true','line_number':459,'multiline':False]
['text':'!   in the returned pair's boolean and fills "commit_data" that is meant to','line_number':460,'multiline':False]
['text':'!   be used with the "insert_commit" function to achieve a constant-time','line_number':461,'multiline':False]
['text':'!   insertion function.','line_number':462,'multiline':False]
['text':'!','line_number':463,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity is at most logarithmic.','line_number':464,'multiline':False]
['text':'!','line_number':465,'multiline':False]
['text':'! <b>Throws</b>: If "comp" throws.','line_number':466,'multiline':False]
['text':'!','line_number':467,'multiline':False]
['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':468,'multiline':False]
['text':'!   a node is expensive and the user does not want to have two equivalent nodes','line_number':469,'multiline':False]
['text':'!   in the tree: if there is an equivalent value','line_number':470,'multiline':False]
['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':471,'multiline':False]
['text':'!   node that is used to impose the order is much cheaper to construct','line_number':472,'multiline':False]
['text':'!   than the node and this function offers the possibility to use that part','line_number':473,'multiline':False]
['text':'!   to check if the insertion will be successful.','line_number':474,'multiline':False]
['text':'!','line_number':475,'multiline':False]
['text':'!   If the check is successful, the user can construct the node and use','line_number':476,'multiline':False]
['text':'!   "insert_commit" to insert the node in constant-time. This gives a total','line_number':477,'multiline':False]
['text':'!   logarithmic complexity to the insertion: check(O(log(N)) + commit(O(1)).','line_number':478,'multiline':False]
['text':'!','line_number':479,'multiline':False]
['text':'!   "commit_data" remains valid for a subsequent "insert_unique_commit" only','line_number':480,'multiline':False]
['text':'!   if no more objects are inserted or erased from the set.','line_number':481,'multiline':False]
['text':'! <b>Requires</b>: "header" must be the header node of a tree.','line_number':496,'multiline':False]
['text':'!   KeyNodePtrCompare is a function object that induces a strict weak','line_number':497,'multiline':False]
['text':'!   ordering compatible with the strict weak ordering used to create the','line_number':498,'multiline':False]
['text':'!   the tree. NodePtrCompare compares KeyType with a node_ptr.','line_number':499,'multiline':False]
['text':'!   "hint" is node from the "header"'s tree.','line_number':500,'multiline':False]
['text':'!','line_number':501,'multiline':False]
['text':'! <b>Effects</b>: Checks if there is an equivalent node to "key" in the','line_number':502,'multiline':False]
['text':'!   tree according to "comp" using "hint" as a hint to where it should be','line_number':503,'multiline':False]
['text':'!   inserted and obtains the needed information to realize','line_number':504,'multiline':False]
['text':'!   a constant-time node insertion if there is no equivalent node.','line_number':505,'multiline':False]
['text':'!   If "hint" is the upper_bound the function has constant time','line_number':506,'multiline':False]
['text':'!   complexity (two comparisons in the worst case).','line_number':507,'multiline':False]
['text':'!','line_number':508,'multiline':False]
['text':'! <b>Returns</b>: If there is an equivalent value','line_number':509,'multiline':False]
['text':'!   returns a pair containing a node_ptr to the already present node','line_number':510,'multiline':False]
['text':'!   and false. If there is not equivalent key can be inserted returns true','line_number':511,'multiline':False]
['text':'!   in the returned pair's boolean and fills "commit_data" that is meant to','line_number':512,'multiline':False]
['text':'!   be used with the "insert_commit" function to achieve a constant-time','line_number':513,'multiline':False]
['text':'!   insertion function.','line_number':514,'multiline':False]
['text':'!','line_number':515,'multiline':False]
['text':'! <b>Complexity</b>: Average complexity is at most logarithmic, but it is','line_number':516,'multiline':False]
['text':'!   amortized constant time if new_node should be inserted immediately before "hint".','line_number':517,'multiline':False]
['text':'!','line_number':518,'multiline':False]
['text':'! <b>Throws</b>: If "comp" throws.','line_number':519,'multiline':False]
['text':'!','line_number':520,'multiline':False]
['text':'! <b>Notes</b>: This function is used to improve performance when constructing','line_number':521,'multiline':False]
['text':'!   a node is expensive and the user does not want to have two equivalent nodes','line_number':522,'multiline':False]
['text':'!   in the tree: if there is an equivalent value','line_number':523,'multiline':False]
['text':'!   the constructed object must be discarded. Many times, the part of the','line_number':524,'multiline':False]
['text':'!   node that is used to impose the order is much cheaper to construct','line_number':525,'multiline':False]
['text':'!   than the node and this function offers the possibility to use that part','line_number':526,'multiline':False]
['text':'!   to check if the insertion will be successful.','line_number':527,'multiline':False]
['text':'!','line_number':528,'multiline':False]
['text':'!   If the check is successful, the user can construct the node and use','line_number':529,'multiline':False]
['text':'!   "insert_commit" to insert the node in constant-time. This gives a total','line_number':530,'multiline':False]
['text':'!   logarithmic complexity to the insertion: check(O(log(N)) + commit(O(1)).','line_number':531,'multiline':False]
['text':'!','line_number':532,'multiline':False]
['text':'!   "commit_data" remains valid for a subsequent "insert_unique_commit" only','line_number':533,'multiline':False]
['text':'!   if no more objects are inserted or erased from the set.','line_number':534,'multiline':False]
['text':'! <b>Requires</b>: "header" must be the header node of a tree.','line_number':549,'multiline':False]
['text':'!   "commit_data" must have been obtained from a previous call to','line_number':550,'multiline':False]
['text':'!   "insert_unique_check". No objects should have been inserted or erased','line_number':551,'multiline':False]
['text':'!   from the set between the "insert_unique_check" that filled "commit_data"','line_number':552,'multiline':False]
['text':'!   and the call to "insert_commit".','line_number':553,'multiline':False]
['text':'!','line_number':554,'multiline':False]
['text':'!','line_number':555,'multiline':False]
['text':'! <b>Effects</b>: Inserts new_node in the set using the information obtained','line_number':556,'multiline':False]
['text':'!   from the "commit_data" that a previous "insert_check" filled.','line_number':557,'multiline':False]
['text':'!','line_number':558,'multiline':False]
['text':'! <b>Complexity</b>: Constant time.','line_number':559,'multiline':False]
['text':'!','line_number':560,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':561,'multiline':False]
['text':'!','line_number':562,'multiline':False]
['text':'! <b>Notes</b>: This function has only sense if a "insert_unique_check" has been','line_number':563,'multiline':False]
['text':'!   previously executed to fill "commit_data". No value should be inserted or','line_number':564,'multiline':False]
['text':'!   erased between the "insert_check" and "insert_commit" calls.','line_number':565,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_unique','line_number':573,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_equal','line_number':587,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::is_header','line_number':603,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':605,'multiline':False]
['text':'/ @cond','line_number':607,'multiline':False]
['text':'No-throw','line_number':638,'multiline':False]
['text':'First check rotations since pcomp can throw','line_number':649,'multiline':False]
['text':'/ @endcond','line_number':676,'multiline':False]
['text':'/ @cond','line_number':679,'multiline':False]
['text':'/ @endcond','line_number':693,'multiline':False]
['text':'namespace intrusive','line_number':695,'multiline':False]
['text':'namespace boost','line_number':696,'multiline':False]
['text':'BOOST_INTRUSIVE_TREAP_ALGORITHMS_HPP','line_number':700,'multiline':False]
