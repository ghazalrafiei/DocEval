['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2007-2014','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' See http://www.boost.org/libs/intrusive for documentation.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' Scapegoat tree algorithms are taken from the paper titled:','line_number':13,'multiline':False]
['text':' "Scapegoat Trees" by Igal Galperin Ronald L. Rivest.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':16,'multiline':False]
['text':'! sgtree_algorithms is configured with a NodeTraits class, which encapsulates the','line_number':34,'multiline':False]
['text':'! information about the node to be manipulated. NodeTraits must support the','line_number':35,'multiline':False]
['text':'! following interface:','line_number':36,'multiline':False]
['text':'!','line_number':37,'multiline':False]
['text':'! <b>Typedefs</b>:','line_number':38,'multiline':False]
['text':'!','line_number':39,'multiline':False]
['text':'! <tt>node</tt>: The type of the node that forms the binary search tree','line_number':40,'multiline':False]
['text':'!','line_number':41,'multiline':False]
['text':'! <tt>node_ptr</tt>: A pointer to a node','line_number':42,'multiline':False]
['text':'!','line_number':43,'multiline':False]
['text':'! <tt>const_node_ptr</tt>: A pointer to a const node','line_number':44,'multiline':False]
['text':'!','line_number':45,'multiline':False]
['text':'! <b>Static functions</b>:','line_number':46,'multiline':False]
['text':'!','line_number':47,'multiline':False]
['text':'! <tt>static node_ptr get_parent(const_node_ptr n);</tt>','line_number':48,'multiline':False]
['text':'!','line_number':49,'multiline':False]
['text':'! <tt>static void set_parent(node_ptr n, node_ptr parent);</tt>','line_number':50,'multiline':False]
['text':'!','line_number':51,'multiline':False]
['text':'! <tt>static node_ptr get_left(const_node_ptr n);</tt>','line_number':52,'multiline':False]
['text':'!','line_number':53,'multiline':False]
['text':'! <tt>static void set_left(node_ptr n, node_ptr left);</tt>','line_number':54,'multiline':False]
['text':'!','line_number':55,'multiline':False]
['text':'! <tt>static node_ptr get_right(const_node_ptr n);</tt>','line_number':56,'multiline':False]
['text':'!','line_number':57,'multiline':False]
['text':'! <tt>static void set_right(node_ptr n, node_ptr right);</tt>','line_number':58,'multiline':False]
['text':'/ @cond','line_number':71,'multiline':False]
['text':'/ @endcond','line_number':76,'multiline':False]
['text':'! This type is the information that will be','line_number':79,'multiline':False]
['text':'! filled by insert_unique_check','line_number':80,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::get_header(const_node_ptr)','line_number':88,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::begin_node','line_number':91,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::end_node','line_number':94,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_tree','line_number':97,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr)','line_number':100,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::swap_nodes(node_ptr,node_ptr,node_ptr,node_ptr)','line_number':103,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr)','line_number':106,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::replace_node(node_ptr,node_ptr,node_ptr)','line_number':109,'multiline':False]
['text':'Unlink is not possible since tree metadata is needed to update the tree','line_number':112,'multiline':False]
['text':'!static void unlink(node_ptr node) BOOST_NOEXCEPT;','line_number':113,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unlink_leftmost_without_rebalance','line_number':115,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::unique(const_node_ptr)','line_number':118,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::size(const_node_ptr)','line_number':121,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::next_node(node_ptr)','line_number':124,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::prev_node(node_ptr)','line_number':127,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init(node_ptr)','line_number':130,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::init_header(node_ptr)','line_number':133,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':135,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::erase(node_ptr,node_ptr)','line_number':137,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clone(const_node_ptr,node_ptr,Cloner,Disposer)','line_number':152,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::clear_and_dispose(node_ptr,Disposer)','line_number':157,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::lower_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':161,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::upper_bound(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':166,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::find(const_node_ptr, const KeyType&,KeyNodePtrCompare)','line_number':171,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::equal_range(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':176,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::bounded_range(const_node_ptr,const KeyType&,const KeyType&,KeyNodePtrCompare,bool,bool)','line_number':181,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::count(const_node_ptr,const KeyType&,KeyNodePtrCompare)','line_number':187,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':191,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_upper_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':193,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal_lower_bound(node_ptr,node_ptr,NodePtrCompare)','line_number':205,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_equal(node_ptr,node_ptr,node_ptr,NodePtrCompare)','line_number':217,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_before(node_ptr,node_ptr,node_ptr)','line_number':229,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_back(node_ptr,node_ptr)','line_number':241,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::push_front(node_ptr,node_ptr)','line_number':251,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':261,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_check(const_node_ptr,node_ptr,const KeyType&,KeyNodePtrCompare,insert_commit_data&)','line_number':274,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::insert_unique_commit(node_ptr,node_ptr,const insert_commit_data&)','line_number':288,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_unique','line_number':295,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::transfer_equal','line_number':311,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::is_header','line_number':325,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::is_header','line_number':328,'multiline':False]
['text':'! @copydoc ::boost::intrusive::bstree_algorithms::rebalance_subtree','line_number':331,'multiline':False]
['text':'#ifdef BOOST_INTRUSIVE_DOXYGEN_INVOKED','line_number':333,'multiline':False]
['text':'/ @cond','line_number':335,'multiline':False]
['text':'Nothing to do with only the root','line_number':365,'multiline':False]
['text':'Check if the root node is unbalanced','line_number':366,'multiline':False]
['text':'Scapegoat paper depth counts root depth as zero and "depth" counts root as 1,','line_number':367,'multiline':False]
['text':'but since "depth" is the depth of the ancestor of x, i == depth','line_number':368,'multiline':False]
['text':'Find the first non height-balanced node','line_number':371,'multiline':False]
['text':'as described in the section 4.2 of the paper.','line_number':372,'multiline':False]
['text':'This method is the alternative method described','line_number':373,'multiline':False]
['text':'in the paper. Authors claim that this method','line_number':374,'multiline':False]
['text':'may tend to yield more balanced trees on the average','line_number':375,'multiline':False]
['text':'than the weight balanced method.','line_number':376,'multiline':False]
['text':'Obtain parent's size (previous size + parent + sibling tree)','line_number':382,'multiline':False]
['text':'is 's' scapegoat?','line_number':386,'multiline':False]
['text':'The whole tree must be rebuilt','line_number':391,'multiline':False]
['text':'/ @endcond','line_number':396,'multiline':False]
['text':'/ @cond','line_number':399,'multiline':False]
['text':'/ @endcond','line_number':413,'multiline':False]
['text':'namespace intrusive','line_number':415,'multiline':False]
['text':'namespace boost','line_number':416,'multiline':False]
['text':'BOOST_INTRUSIVE_SGTREE_ALGORITHMS_HPP','line_number':420,'multiline':False]
