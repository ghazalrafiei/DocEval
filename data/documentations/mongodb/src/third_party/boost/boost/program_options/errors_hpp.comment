['text':' Copyright Vladimir Prus 2002-2004.','line_number':1,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt','line_number':3,'multiline':False]
['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':' non dll-interface class 'std::logic_error' used as base for dll-interface class 'boost::program_options::error'','line_number':20,'multiline':False]
['text':' class 'std::vector<_Ty>' needs to have dll-interface to be used by clients of class 'boost::program_options::ambiguous_option'','line_number':21,'multiline':False]
['text':' "--foo-bar" -> "foo-bar"','line_number':28,'multiline':False]
['text':'* Base class for all errors in the library. ','line_number':37,'multiline':True]
['text':'* Class thrown when there are too many positional options. 
        This is a programming error.
    ','line_number':44,'multiline':True]
['text':'* Class thrown when there are programming error related to style ','line_number':54,'multiline':True]
['text':'* Class thrown if config file can not be read ','line_number':62,'multiline':True]
['text':'* Base class for most exceptions in the library.
     *  
     *  Substitutes the values for the parameter name
     *      placeholders in the template to create the human
     *      readable error message
     *  
     *  Placeholders are surrounded by % signs: %example%
     *      Poor man's version of boost::format
     *  
     *  If a parameter name is absent, perform default substitutions
     *      instead so ugly placeholders are never left in-place.
     *  
     *  Options are displayed in "canonical" form
     *      This is the most unambiguous form of the
     *      *parsed* option name and would correspond to
     *      option_description::format_name()
     *      i.e. what is shown by print_usage()
     *  
     *  The "canonical" form depends on whether the option is
     *      specified in short or long form, using dashes or slashes
     *      or without a prefix (from a configuration file)
     *  
     *   ','line_number':71,'multiline':True]
['text':'* can be
         *      0 = no prefix (config file options)
         *      allow_long
         *      allow_dash_for_short
         *      allow_slash_for_short
         *      allow_long_disguise ','line_number':97,'multiline':True]
['text':'* substitutions
         *  from placeholders to values ','line_number':106,'multiline':True]
['text':'* template with placeholders ','line_number':113,'multiline':True]
['text':'* gcc says that throw specification on dtor is loosened 
         *  without this line                                     
         *  ','line_number':121,'multiline':True]
['text':'void dump() const','line_number':127,'multiline':False]
['text':'{','line_number':128,'multiline':False]
['text':'  std::cerr << "m_substitution_defaults:\n";','line_number':129,'multiline':False]
['text':'  for (std::map<std::string, string_pair>::const_iterator iter = m_substitution_defaults.begin();','line_number':130,'multiline':False]
['text':'        iter != m_substitution_defaults.end(); ++iter)','line_number':131,'multiline':False]
['text':'      std::cerr << "\t" << iter->first << ":" << iter->second.first << "=" << iter->second.second << "\n";','line_number':132,'multiline':False]
['text':'  std::cerr << "m_substitutions:\n";','line_number':133,'multiline':False]
['text':'  for (std::map<std::string, std::string>::const_iterator iter = m_substitutions.begin();','line_number':134,'multiline':False]
['text':'        iter != m_substitutions.end(); ++iter)','line_number':135,'multiline':False]
['text':'      std::cerr << "\t" << iter->first << "=" << iter->second << "\n";','line_number':136,'multiline':False]
['text':'  std::cerr << "m_error_template:\n";','line_number':137,'multiline':False]
['text':'  std::cerr << "\t" << m_error_template << "\n";','line_number':138,'multiline':False]
['text':'  std::cerr << "canonical_option_prefix:[" << get_canonical_option_prefix() << "]\n";','line_number':139,'multiline':False]
['text':'  std::cerr << "canonical_option_name:[" << get_canonical_option_name() <<"]\n";','line_number':140,'multiline':False]
['text':'  std::cerr << "what:[" << what() << "]\n";','line_number':141,'multiline':False]
['text':'}','line_number':142,'multiline':False]
['text':'* Substitute
         *      parameter_name->value to create the error message from
         *      the error template ','line_number':144,'multiline':True]
['text':'* If the parameter is missing, then make the
         *      from->to substitution instead ','line_number':150,'multiline':True]
['text':'* Add context to an exception ','line_number':160,'multiline':True]
['text':'* Overridden in error_with_no_option_name ','line_number':173,'multiline':True]
['text':'* Creates the error_message on the fly
         *      Currently a thin wrapper for substitute_placeholders() ','line_number':184,'multiline':True]
['text':'* Used to hold the error text returned by what() ','line_number':189,'multiline':True]
['text':' For on-demand formatting in 'what'','line_number':190,'multiline':False]
['text':'* Makes all substitutions using the template ','line_number':192,'multiline':True]
['text':' helper function for substitute_placeholders','line_number':195,'multiline':False]
['text':'* Construct option name in accordance with the appropriate
         *  prefix style: i.e. long dash or short slash etc ','line_number':198,'multiline':True]
['text':'* Class thrown when there are several option values, but
        user called a method which cannot return them all. ','line_number':205,'multiline':True]
['text':'* Class thrown when there are several occurrences of an
        option, but user called a method which cannot return 
        them all. ','line_number':215,'multiline':True]
['text':'* Class thrown when a required/mandatory option is missing ','line_number':227,'multiline':True]
['text':' option name is constructed by the option_descriptor and never on the fly','line_number':230,'multiline':False]
['text':'* Base class of unparsable options,
     *  when the desired option cannot be identified.
     *  
     *  
     *  It makes no sense to have an option name, when we can't match an option to the
     *      parameter
     *  
     *  Having this a part of the error_with_option_name hierachy makes error handling
     *      a lot easier, even if the name indicates some sort of conceptual dissonance!
     *  
     *   ','line_number':239,'multiline':True]
['text':'* Does NOT set option name, because no option name makes sense ','line_number':258,'multiline':True]
['text':'* Class thrown when option name is not recognized. ','line_number':265,'multiline':True]
['text':'* Class thrown when there's ambiguity amoung several possible options. ','line_number':278,'multiline':True]
['text':'* Makes all substitutions using the template ','line_number':291,'multiline':True]
['text':' TODO: copy ctor might throw','line_number':294,'multiline':False]
['text':'* Class thrown when there's syntax error either for command
     *  line or config file options. See derived children for
     *  concrete classes. ','line_number':299,'multiline':True]
['text':'* Convenience functions for backwards compatibility ','line_number':327,'multiline':True]
['text':'* Used to convert kind_t to a related error text ','line_number':330,'multiline':True]
['text':'* Convenience functions for backwards compatibility ','line_number':345,'multiline':True]
['text':'* Class thrown when there are syntax errors in given command line ','line_number':350,'multiline':True]
['text':'* Class thrown when value of option is incorrect. ','line_number':362,'multiline':True]
['text':'* Used to convert kind_t to a related error text ','line_number':388,'multiline':True]
['text':'* Class thrown if there is an invalid option value given ','line_number':393,'multiline':True]
['text':'* Class thrown if there is an invalid bool value given ','line_number':404,'multiline':True]
