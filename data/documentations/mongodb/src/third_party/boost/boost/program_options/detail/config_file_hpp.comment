['text':' Copyright Vladimir Prus 2002-2004.','line_number':1,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt','line_number':3,'multiline':False]
['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':' std::getline','line_number':23,'multiline':False]
['text':' class XYZ needs to have dll-interface to be used by clients of class XYZ','line_number':32,'multiline':False]
['text':'* Standalone parser for config files in ini-line format.
        The parser is a model of single-pass lvalue iterator, and
        default constructor creates past-the-end-iterator. The typical usage is:
        config_file_iterator i(is, ... set of options ...), e;
        for(; i !=e; ++i) {
            *i;
        }
        
        Syntax conventions:

        - config file can not contain positional options
        - '#' is comment character: it is ignored together with
          the rest of the line.
        - variable assignments are in the form
          name '=' value.
          spaces around '=' are trimmed.
        - Section names are given in brackets. 

         The actual option name is constructed by combining current section
         name and specified option name, with dot between. If section_name 
         already contains dot at the end, new dot is not inserted. For example:
         @verbatim
         [gui.accessibility]
         visual_bell=yes
         @endverbatim
         will result in option "gui.accessibility.visual_bell" with value
         "yes" been returned.

         TODO: maybe, we should just accept a pointer to options_description
         class.
     ','line_number':39,'multiline':True]
['text':' Method required by eof_iterator','line_number':81,'multiline':False]
['text':' Stubs for derived classes','line_number':90,'multiline':False]
['text':' Obtains next line from the config file','line_number':92,'multiline':False]
['text':' Note: really, this design is a bit ugly','line_number':93,'multiline':False]
['text':' The most clean thing would be to pass 'line_iterator' to','line_number':94,'multiline':False]
['text':' constructor of this class, but to avoid templating this class','line_number':95,'multiline':False]
['text':' we'd need polymorphic iterator, which does not exist yet.','line_number':96,'multiline':False]
['text':'* Adds another allowed option. If the 'name' ends with
            '*', then all options with the same prefix are
            allowed. For example, if 'name' is 'foo*', then 'foo1' and
            'foo_bar' are allowed. ','line_number':100,'multiline':True]
['text':' Returns true if 's' is a registered option name.','line_number':106,'multiline':False]
['text':' That's probably too much data for iterator, since','line_number':109,'multiline':False]
['text':' it will be copied, but let's not bother for now.','line_number':110,'multiline':False]
['text':' Invariant: no element is prefix of other element.','line_number':112,'multiline':False]
['text':'* Creates a config file parser for the specified stream.            
        ','line_number':126,'multiline':True]
['text':' base overrides','line_number':132,'multiline':False]
['text':' internal data','line_number':136,'multiline':False]
['text':' Specializing this function for wchar_t causes problems on','line_number':161,'multiline':False]
['text':' borland and vc7, as well as on metrowerks. On the first two','line_number':162,'multiline':False]
['text':' I don't know a workaround, so make use of 'to_internal' to','line_number':163,'multiline':False]
['text':' avoid specialization.','line_number':164,'multiline':False]
['text':' Specialization is needed to workaround getline bug on Comeau.','line_number':178,'multiline':False]
