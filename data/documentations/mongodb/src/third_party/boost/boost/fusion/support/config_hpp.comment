['text':'=============================================================================
    Copyright (c) 2014 Eric Niebler
    Copyright (c) 2014,2015,2018 Kohei Takahashi

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================','line_number':1,'multiline':True]
['text':' Enclose with inline namespace because unqualified lookup of GCC < 4.5 is broken.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':'      namespace detail {','line_number':21,'multiline':False]
['text':'          struct foo;','line_number':22,'multiline':False]
['text':'          struct X { };','line_number':23,'multiline':False]
['text':'      }','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':'      template <typename T> void foo(T) { }','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'      int main()','line_number':28,'multiline':False]
['text':'      {','line_number':29,'multiline':False]
['text':'            foo(detail::X());','line_number':30,'multiline':False]
['text':'            // prog.cc: In function 'int main()':','line_number':31,'multiline':False]
['text':'            // prog.cc:2: error: 'struct detail::foo' is not a function,','line_number':32,'multiline':False]
['text':'            // prog.cc:6: error: conflict with 'template<class T> void foo(T)'','line_number':33,'multiline':False]
['text':'            // prog.cc:10: error: in call to 'foo'','line_number':34,'multiline':False]
['text':'      }','line_number':35,'multiline':False]
['text':' All of rvalue-reference ready MSVC don't perform implicit conversion from','line_number':46,'multiline':False]
['text':' fundamental type to rvalue-reference of another fundamental type [1].','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' Following example doesn't compile','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'   int i;','line_number':51,'multiline':False]
['text':'   long &&l = i; // sigh..., std::forward<long&&>(i) also fail.','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':' however, following one will work.','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':'   int i;','line_number':56,'multiline':False]
['text':'   long &&l = static_cast<long &&>(i);','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':' OK, now can we replace all usage of std::forward to static_cast? -- I say NO!','line_number':59,'multiline':False]
['text':' All of rvalue-reference ready Clang doesn't compile above static_cast usage [2], sigh...','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':' References:','line_number':62,'multiline':False]
['text':' 1. https://connect.microsoft.com/VisualStudio/feedback/details/1037806/implicit-conversion-doesnt-perform-for-fund','line_number':63,'multiline':False]
['text':' 2. http://llvm.org/bugs/show_bug.cgi?id=19917','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':' Tentatively, we use static_cast to forward if run under MSVC.','line_number':66,'multiline':False]
['text':' Workaround for LWG 2408: C++17 SFINAE-friendly std::iterator_traits.','line_number':73,'multiline':False]
['text':' http://cplusplus.github.io/LWG/lwg-defects.html#2408','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' - GCC 4.5 enables the feature under C++11.','line_number':76,'multiline':False]
['text':'   https://gcc.gnu.org/ml/gcc-patches/2014-11/msg01105.html','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':' - MSVC 10.0 implements iterator intrinsics; MSVC 13.0 implements LWG2408.','line_number':79,'multiline':False]
['text':' Workaround for older GCC that doesn't accept `this` in constexpr.','line_number':92,'multiline':False]
['text':' Workaround for compilers not implementing N3031 (DR743 and DR950).','line_number':100,'multiline':False]
['text':' Workaround for GCC 4.6 that rejects defaulted function with noexcept.','line_number':123,'multiline':False]
