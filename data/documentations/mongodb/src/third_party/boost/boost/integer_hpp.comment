['text':'  boost integer.hpp header file  -------------------------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Beman Dawes and Daryle Walker 1999.  Distributed under the Boost','line_number':3,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'  See https://www.boost.org/libs/integer for documentation.','line_number':7,'multiline':False]
['text':'  Revision History','line_number':9,'multiline':False]
['text':'   22 Sep 01  Added value-based integer templates. (Daryle Walker)','line_number':10,'multiline':False]
['text':'   01 Apr 01  Modified to use new <boost/limits.hpp> header. (John Maddock)','line_number':11,'multiline':False]
['text':'   30 Jul 00  Add typename syntax fix (Jens Maurer)','line_number':12,'multiline':False]
['text':'   28 Aug 99  Initial version','line_number':13,'multiline':False]
['text':' self include','line_number':18,'multiline':False]
['text':' for boost::::boost::integer_traits','line_number':20,'multiline':False]
['text':' for ::std::numeric_limits','line_number':21,'multiline':False]
['text':' for boost::int64_t and BOOST_NO_INTEGRAL_INT64_T','line_number':22,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' We simply cannot include this header on gcc without getting copious warnings of the kind:','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' boost/integer.hpp:77:30: warning: use of C99 long long integer constant','line_number':28,'multiline':False]
['text':'','line_number':29,'multiline':False]
['text':' And yet there is no other reasonable implementation, so we declare this a system header','line_number':30,'multiline':False]
['text':' to suppress these warnings.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'  Helper templates  ------------------------------------------------------//','line_number':40,'multiline':False]
['text':'  fast integers from least integers','line_number':42,'multiline':False]
['text':'  int_fast_t<> works correctly for unsigned too, in spite of the name.','line_number':43,'multiline':False]
['text':' imps may specialize','line_number':49,'multiline':False]
['text':'  convert category to type','line_number':53,'multiline':False]
['text':' default is empty','line_number':54,'multiline':False]
['text':' default is empty','line_number':55,'multiline':False]
['text':'  specializatons: 1=long, 2=int, 3=short, 4=signed char,','line_number':57,'multiline':False]
['text':'     6=unsigned long, 7=unsigned int, 8=unsigned short, 9=unsigned char','line_number':58,'multiline':False]
['text':'  no specializations for 0 and 5: requests for a type > long are in error','line_number':59,'multiline':False]
['text':' namespace detail','line_number':109,'multiline':False]
['text':'  integer templates specifying number of bits  ---------------------------//','line_number':111,'multiline':False]
['text':'  signed','line_number':113,'multiline':False]
['text':' bits (including sign) required','line_number':114,'multiline':False]
['text':'  unsigned','line_number':134,'multiline':False]
['text':' bits required','line_number':135,'multiline':False]
['text':' It's really not clear why this workaround should be needed... shrug I guess!  JM','line_number':141,'multiline':False]
['text':' int_fast_t<> works correctly for unsigned too, in spite of the name.','line_number':164,'multiline':False]
['text':'  integer templates specifying extreme value  ----------------------------//','line_number':167,'multiline':False]
['text':'  signed','line_number':169,'multiline':False]
['text':' maximum value to require support','line_number':171,'multiline':False]
['text':' maximum value to require support','line_number':173,'multiline':False]
['text':' minimum value to require support','line_number':193,'multiline':False]
['text':' minimum value to require support','line_number':195,'multiline':False]
['text':'  unsigned','line_number':214,'multiline':False]
['text':' minimum value to require support','line_number':216,'multiline':False]
['text':' minimum value to require support','line_number':218,'multiline':False]
['text':' It's really not clear why this workaround should be needed... shrug I guess!  JM','line_number':223,'multiline':False]
['text':' BOOST_NO_INTEGRAL_INT64_T','line_number':232,'multiline':False]
['text':' BOOST_NO_INTEGRAL_INT64_T','line_number':241,'multiline':False]
['text':' namespace boost','line_number':260,'multiline':False]
['text':' BOOST_INTEGER_HPP','line_number':262,'multiline':False]
