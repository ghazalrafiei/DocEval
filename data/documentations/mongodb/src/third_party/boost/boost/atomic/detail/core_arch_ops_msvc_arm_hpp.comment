['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2009 Helge Bahmann
 * Copyright (c) 2012 Tim Blechmann
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/core_arch_ops_msvc_arm.hpp
 *
 * This header contains implementation of the \c core_arch_operations template.
 ','line_number':10,'multiline':True]
['text':' A note about memory_order_consume. Technically, this architecture allows to avoid','line_number':68,'multiline':False]
['text':' unnecessary memory barrier after consume load since it supports data dependency ordering.','line_number':69,'multiline':False]
['text':' However, some compiler optimizations may break a seemingly valid code relying on data','line_number':70,'multiline':False]
['text':' dependency tracking by injecting bogus branches to aid out of order execution.','line_number':71,'multiline':False]
['text':' This may happen not only in Boost.Atomic code but also in user's code, which we have no','line_number':72,'multiline':False]
['text':' control of. See this thread: http://lists.boost.org/Archives/boost/2014/06/213890.php.','line_number':73,'multiline':False]
['text':' For this reason we promote memory_order_consume to memory_order_acquire.','line_number':74,'multiline':False]
['text':' Combine order flags together and promote memory_order_consume to memory_order_acquire','line_number':113,'multiline':False]
['text':' namespace detail','line_number':813,'multiline':False]
['text':' namespace atomics','line_number':814,'multiline':False]
['text':' namespace boost','line_number':815,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_CORE_ARCH_OPS_MSVC_ARM_HPP_INCLUDED_','line_number':828,'multiline':False]
