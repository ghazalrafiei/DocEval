['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/core_arch_ops_gcc_aarch32.hpp
 *
 * This header contains implementation of the \c core_arch_operations template.
 ','line_number':8,'multiline':True]
['text':' ARMv8 (AArch32) instruction set is similar to ARMv7, but adds','line_number':35,'multiline':False]
['text':' lda(b/h) and ldaex(b/h/d) instructions for acquire loads and','line_number':36,'multiline':False]
['text':' stl(b/h) and stlex(b/h/d) instructions for release stores. This','line_number':37,'multiline':False]
['text':' makes explicit memory fences unnecessary for implementation of','line_number':38,'multiline':False]
['text':' the majority of the atomic operations.','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' ARMv8 deprecates applying "it" hints to some instructions, including','line_number':41,'multiline':False]
['text':' strex. It also deprecates "it" hints applying to more than one','line_number':42,'multiline':False]
['text':' of the following conditional instructions. This means we have to','line_number':43,'multiline':False]
['text':' use conditional jumps instead of making other instructions conditional.','line_number':44,'multiline':False]
['text':' Unlike 32-bit operations, for 64-bit loads and stores we must use ldrexd/strexd.','line_number':837,'multiline':False]
['text':' Other instructions result in a non-atomic sequence of 32-bit or more fine-grained accesses.','line_number':838,'multiline':False]
['text':' See "ARM Architecture Reference Manual ARMv8, for ARMv8-A architecture profile", Section E2.2 "Atomicity in the ARM architecture".','line_number':839,'multiline':False]
['text':' Section E2.3.7 "Memory barriers", subsection "Load-Acquire, Store-Release" extends atomicity guarantees given for ldrexd/strexd','line_number':840,'multiline':False]
['text':' to the new ldaexd/stlexd instructions with acquire/release semantics.','line_number':841,'multiline':False]
['text':'','line_number':842,'multiline':False]
['text':' In the asm blocks below we have to use 32-bit register pairs to compose 64-bit values. In order to pass the 64-bit operands','line_number':843,'multiline':False]
['text':' to/from asm blocks, we use undocumented gcc feature: the lower half (Rt) of the operand is accessible normally, via the numbered','line_number':844,'multiline':False]
['text':' placeholder (e.g. %0), and the upper half (Rt2) - via the same placeholder with an 'H' after the '%' sign (e.g. %H0).','line_number':845,'multiline':False]
['text':' See: http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/','line_number':846,'multiline':False]
['text':'','line_number':847,'multiline':False]
['text':' The ldrexd and strexd instructions operate on pairs of registers, meaning that each load loads two integers from memory in','line_number':848,'multiline':False]
['text':' successive address order, to the first and second registers in the pair, respectively, and store similarly stores two integers.','line_number':849,'multiline':False]
['text':' The order of these integers does not depend on the active endianness mode (although the byte order in the integers themselves','line_number':850,'multiline':False]
['text':' obviously does depend on endianness). This means we need to account for the current endianness mode ourselves, where it matters.','line_number':851,'multiline':False]
['text':' %0','line_number':877,'multiline':False]
['text':' %1','line_number':878,'multiline':False]
['text':' %0','line_number':886,'multiline':False]
['text':' %1','line_number':887,'multiline':False]
['text':' namespace detail','line_number':1115,'multiline':False]
['text':' namespace atomics','line_number':1116,'multiline':False]
['text':' namespace boost','line_number':1117,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_CORE_ARCH_OPS_GCC_AARCH32_HPP_INCLUDED_','line_number':1121,'multiline':False]
