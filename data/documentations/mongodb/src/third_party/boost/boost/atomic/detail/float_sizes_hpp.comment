['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2018 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/float_sizes.hpp
 *
 * This header defines macros for testing buitin floating point type sizes
 ','line_number':8,'multiline':True]
['text':' Detect value sizes of the different floating point types. The value sizes may be less than the corresponding type sizes','line_number':24,'multiline':False]
['text':' if the type contains padding bits. This is typical e.g. with 80-bit extended float types, which are often represented as 128-bit types.','line_number':25,'multiline':False]
['text':' See: https://en.wikipedia.org/wiki/IEEE_754','line_number':26,'multiline':False]
['text':' For Intel x87 extended double see: https://en.wikipedia.org/wiki/Extended_precision#x86_Architecture_Extended_Precision_Format','line_number':27,'multiline':False]
['text':' For IBM extended double (a.k.a. double-double) see: https://en.wikipedia.org/wiki/Long_double#Implementations, https://gcc.gnu.org/wiki/Ieee128PowerPC','line_number':28,'multiline':False]
['text':' IEEE 754 binary16','line_number':31,'multiline':False]
['text':' IEEE 754 binary32','line_number':33,'multiline':False]
['text':' IEEE 754 binary64','line_number':35,'multiline':False]
['text':' x87 extended double','line_number':37,'multiline':False]
['text':' IBM extended double','line_number':39,'multiline':False]
['text':' IEEE 754 binary128','line_number':41,'multiline':False]
['text':' IEEE 754 binary256','line_number':43,'multiline':False]
['text':' IEEE 754 binary16','line_number':47,'multiline':False]
['text':' IEEE 754 binary32','line_number':49,'multiline':False]
['text':' IEEE 754 binary64','line_number':51,'multiline':False]
['text':' x87 extended double','line_number':53,'multiline':False]
['text':' IBM extended double','line_number':55,'multiline':False]
['text':' IEEE 754 binary128','line_number':57,'multiline':False]
['text':' IEEE 754 binary256','line_number':59,'multiline':False]
['text':' IEEE 754 binary16','line_number':63,'multiline':False]
['text':' IEEE 754 binary32','line_number':65,'multiline':False]
['text':' IEEE 754 binary64','line_number':67,'multiline':False]
['text':' x87 extended double','line_number':69,'multiline':False]
['text':' IBM extended double','line_number':71,'multiline':False]
['text':' IEEE 754 binary128','line_number':73,'multiline':False]
['text':' IEEE 754 binary256','line_number':75,'multiline':False]
['text':' IEEE 754 decimal32','line_number':81,'multiline':False]
['text':' IEEE 754 decimal64','line_number':83,'multiline':False]
['text':' IEEE 754 decimal128','line_number':85,'multiline':False]
['text':' IEEE 754 decimal32','line_number':89,'multiline':False]
['text':' IEEE 754 decimal64','line_number':91,'multiline':False]
['text':' IEEE 754 decimal128','line_number':93,'multiline':False]
['text':' IEEE 754 decimal32','line_number':97,'multiline':False]
['text':' IEEE 754 decimal64','line_number':99,'multiline':False]
['text':' IEEE 754 decimal128','line_number':101,'multiline':False]
['text':' GCC and compatible compilers define internal macros with builtin type traits','line_number':107,'multiline':False]
['text':' Make our best guess. These sizes may not be accurate, but they are good enough to estimate the size of the storage required to hold these types.','line_number':123,'multiline':False]
['text':' !defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE)','line_number':134,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_FLOAT_SIZES_HPP_INCLUDED_','line_number':142,'multiline':False]
