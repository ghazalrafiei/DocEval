['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/fence_arch_ops_gcc_x86.hpp
 *
 * This header contains implementation of the \c fence_arch_operations struct.
 ','line_number':8,'multiline':True]
['text':'! Fence operations for x86','line_number':29,'multiline':False]
['text':' We could generate mfence for a seq_cst fence here, but a dummy lock-prefixed instruction is enough','line_number':36,'multiline':False]
['text':' and is faster than mfence on most modern x86 CPUs (as of 2020).','line_number':37,'multiline':False]
['text':' Note that we want to apply the atomic operation on any location so that:','line_number':38,'multiline':False]
['text':' - It is not shared with other threads. A variable on the stack suits this well.','line_number':39,'multiline':False]
['text':' - It is likely in cache. Being close to the top of the stack fits this well.','line_number':40,'multiline':False]
['text':' - It does not alias existing data on the stack, so that we don't introduce a false data dependency.','line_number':41,'multiline':False]
['text':' See some performance data here: https://shipilev.net/blog/2014/on-the-fence-with-dependencies/','line_number':42,'multiline':False]
['text':' Unfortunately, to make tools like valgrind happy, we have to initialize the dummy, which is','line_number':43,'multiline':False]
['text':' otherwise not needed.','line_number':44,'multiline':False]
['text':' namespace detail','line_number':63,'multiline':False]
['text':' namespace atomics','line_number':64,'multiline':False]
['text':' namespace boost','line_number':65,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_GCC_X86_HPP_INCLUDED_','line_number':69,'multiline':False]
