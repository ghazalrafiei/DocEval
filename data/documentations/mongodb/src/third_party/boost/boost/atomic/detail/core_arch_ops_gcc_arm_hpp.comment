['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2009 Helge Bahmann
 * Copyright (c) 2013 Tim Blechmann
 * Copyright (c) 2014, 2020 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/core_arch_ops_gcc_arm.hpp
 *
 * This header contains implementation of the \c core_arch_operations template.
 ','line_number':10,'multiline':True]
['text':' From the ARM Architecture Reference Manual for architecture v6:','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' LDREX{<cond>} <Rd>, [<Rn>]','line_number':41,'multiline':False]
['text':' <Rd> Specifies the destination register for the memory word addressed by <Rd>','line_number':42,'multiline':False]
['text':' <Rn> Specifies the register containing the address.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' STREX{<cond>} <Rd>, <Rm>, [<Rn>]','line_number':45,'multiline':False]
['text':' <Rd> Specifies the destination register for the returned status value.','line_number':46,'multiline':False]
['text':'      0  if the operation updates memory','line_number':47,'multiline':False]
['text':'      1  if the operation fails to update memory','line_number':48,'multiline':False]
['text':' <Rm> Specifies the register containing the word to be stored to memory.','line_number':49,'multiline':False]
['text':' <Rn> Specifies the register containing the address.','line_number':50,'multiline':False]
['text':' Rd must not be the same register as Rm or Rn.','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':' ARM v7 is like ARM v6 plus:','line_number':53,'multiline':False]
['text':' There are half-word and byte versions of the LDREX and STREX instructions,','line_number':54,'multiline':False]
['text':' LDREXH, LDREXB, STREXH and STREXB.','line_number':55,'multiline':False]
['text':' There are also double-word versions, LDREXD and STREXD.','line_number':56,'multiline':False]
['text':' (Actually it looks like these are available from version 6k onwards.)','line_number':57,'multiline':False]
['text':' load the original value','line_number':93,'multiline':False]
['text':' store the replacement, tmp = store failed','line_number':94,'multiline':False]
['text':' check if store succeeded','line_number':95,'multiline':False]
['text':' original = *(&storage)','line_number':118,'multiline':False]
['text':' flags = original==expected','line_number':119,'multiline':False]
['text':' [hint that the following 2 instructions are conditional on flags.equal]','line_number':120,'multiline':False]
['text':' if (flags.equal) *(&storage) = desired, success = store failed','line_number':121,'multiline':False]
['text':' if (flags.equal) success ^= 1 (i.e. make it 1 if store succeeded)','line_number':122,'multiline':False]
['text':' original = *(&storage)','line_number':155,'multiline':False]
['text':' flags = original==expected','line_number':156,'multiline':False]
['text':' if (!flags.equal) goto end','line_number':157,'multiline':False]
['text':' *(&storage) = desired, success = store failed','line_number':158,'multiline':False]
['text':' success ^= 1 (i.e. make it 1 if store succeeded); flags.equal = success == 0','line_number':159,'multiline':False]
['text':' if (flags.equal) goto retry','line_number':160,'multiline':False]
['text':' original = *(&storage)','line_number':190,'multiline':False]
['text':' result = original + value','line_number':191,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':192,'multiline':False]
['text':' flags = tmp==0','line_number':193,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':194,'multiline':False]
['text':' %0','line_number':196,'multiline':False]
['text':' %1','line_number':197,'multiline':False]
['text':' %2','line_number':198,'multiline':False]
['text':' %3','line_number':199,'multiline':False]
['text':' %4','line_number':200,'multiline':False]
['text':' original = *(&storage)','line_number':216,'multiline':False]
['text':' result = original - value','line_number':217,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':218,'multiline':False]
['text':' flags = tmp==0','line_number':219,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':220,'multiline':False]
['text':' %0','line_number':222,'multiline':False]
['text':' %1','line_number':223,'multiline':False]
['text':' %2','line_number':224,'multiline':False]
['text':' %3','line_number':225,'multiline':False]
['text':' %4','line_number':226,'multiline':False]
['text':' original = *(&storage)','line_number':242,'multiline':False]
['text':' result = original & value','line_number':243,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':244,'multiline':False]
['text':' flags = tmp==0','line_number':245,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':246,'multiline':False]
['text':' %0','line_number':248,'multiline':False]
['text':' %1','line_number':249,'multiline':False]
['text':' %2','line_number':250,'multiline':False]
['text':' %3','line_number':251,'multiline':False]
['text':' %4','line_number':252,'multiline':False]
['text':' original = *(&storage)','line_number':268,'multiline':False]
['text':' result = original | value','line_number':269,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':270,'multiline':False]
['text':' flags = tmp==0','line_number':271,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':272,'multiline':False]
['text':' %0','line_number':274,'multiline':False]
['text':' %1','line_number':275,'multiline':False]
['text':' %2','line_number':276,'multiline':False]
['text':' %3','line_number':277,'multiline':False]
['text':' %4','line_number':278,'multiline':False]
['text':' original = *(&storage)','line_number':294,'multiline':False]
['text':' result = original ^ value','line_number':295,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':296,'multiline':False]
['text':' flags = tmp==0','line_number':297,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':298,'multiline':False]
['text':' %0','line_number':300,'multiline':False]
['text':' %1','line_number':301,'multiline':False]
['text':' %2','line_number':302,'multiline':False]
['text':' %3','line_number':303,'multiline':False]
['text':' %4','line_number':304,'multiline':False]
['text':' load the original value and zero-extend to 32 bits','line_number':359,'multiline':False]
['text':' store the replacement, tmp = store failed','line_number':360,'multiline':False]
['text':' check if store succeeded','line_number':361,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':384,'multiline':False]
['text':' flags = original==expected','line_number':385,'multiline':False]
['text':' [hint that the following 2 instructions are conditional on flags.equal]','line_number':386,'multiline':False]
['text':' if (flags.equal) *(&storage) = desired, success = store failed','line_number':387,'multiline':False]
['text':' if (flags.equal) success ^= 1 (i.e. make it 1 if store succeeded)','line_number':388,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':421,'multiline':False]
['text':' flags = original==expected','line_number':422,'multiline':False]
['text':' if (!flags.equal) goto end','line_number':423,'multiline':False]
['text':' *(&storage) = desired, success = store failed','line_number':424,'multiline':False]
['text':' success ^= 1 (i.e. make it 1 if store succeeded); flags.equal = success == 0','line_number':425,'multiline':False]
['text':' if (flags.equal) goto retry','line_number':426,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':456,'multiline':False]
['text':' result = original + value','line_number':457,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':458,'multiline':False]
['text':' flags = tmp==0','line_number':459,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':460,'multiline':False]
['text':' %0','line_number':462,'multiline':False]
['text':' %1','line_number':463,'multiline':False]
['text':' %2','line_number':464,'multiline':False]
['text':' %3','line_number':465,'multiline':False]
['text':' %4','line_number':466,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':482,'multiline':False]
['text':' result = original - value','line_number':483,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':484,'multiline':False]
['text':' flags = tmp==0','line_number':485,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':486,'multiline':False]
['text':' %0','line_number':488,'multiline':False]
['text':' %1','line_number':489,'multiline':False]
['text':' %2','line_number':490,'multiline':False]
['text':' %3','line_number':491,'multiline':False]
['text':' %4','line_number':492,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':508,'multiline':False]
['text':' result = original & value','line_number':509,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':510,'multiline':False]
['text':' flags = tmp==0','line_number':511,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':512,'multiline':False]
['text':' %0','line_number':514,'multiline':False]
['text':' %1','line_number':515,'multiline':False]
['text':' %2','line_number':516,'multiline':False]
['text':' %3','line_number':517,'multiline':False]
['text':' %4','line_number':518,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':534,'multiline':False]
['text':' result = original | value','line_number':535,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':536,'multiline':False]
['text':' flags = tmp==0','line_number':537,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':538,'multiline':False]
['text':' %0','line_number':540,'multiline':False]
['text':' %1','line_number':541,'multiline':False]
['text':' %2','line_number':542,'multiline':False]
['text':' %3','line_number':543,'multiline':False]
['text':' %4','line_number':544,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':560,'multiline':False]
['text':' result = original ^ value','line_number':561,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':562,'multiline':False]
['text':' flags = tmp==0','line_number':563,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':564,'multiline':False]
['text':' %0','line_number':566,'multiline':False]
['text':' %1','line_number':567,'multiline':False]
['text':' %2','line_number':568,'multiline':False]
['text':' %3','line_number':569,'multiline':False]
['text':' %4','line_number':570,'multiline':False]
['text':' defined(BOOST_ATOMIC_DETAIL_ARM_HAS_LDREXB_STREXB)','line_number':588,'multiline':False]
['text':' original = *(&storage)','line_number':606,'multiline':False]
['text':' result = original + value','line_number':607,'multiline':False]
['text':' zero extend result from 8 to 32 bits','line_number':608,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':609,'multiline':False]
['text':' flags = tmp==0','line_number':610,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':611,'multiline':False]
['text':' %0','line_number':613,'multiline':False]
['text':' %1','line_number':614,'multiline':False]
['text':' %2','line_number':615,'multiline':False]
['text':' %3','line_number':616,'multiline':False]
['text':' %4','line_number':617,'multiline':False]
['text':' original = *(&storage)','line_number':633,'multiline':False]
['text':' result = original - value','line_number':634,'multiline':False]
['text':' zero extend result from 8 to 32 bits','line_number':635,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':636,'multiline':False]
['text':' flags = tmp==0','line_number':637,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':638,'multiline':False]
['text':' %0','line_number':640,'multiline':False]
['text':' %1','line_number':641,'multiline':False]
['text':' %2','line_number':642,'multiline':False]
['text':' %3','line_number':643,'multiline':False]
['text':' %4','line_number':644,'multiline':False]
['text':' original = *(&storage)','line_number':668,'multiline':False]
['text':' result = original + value','line_number':669,'multiline':False]
['text':' sign extend result from 8 to 32 bits','line_number':670,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':671,'multiline':False]
['text':' flags = tmp==0','line_number':672,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':673,'multiline':False]
['text':' %0','line_number':675,'multiline':False]
['text':' %1','line_number':676,'multiline':False]
['text':' %2','line_number':677,'multiline':False]
['text':' %3','line_number':678,'multiline':False]
['text':' %4','line_number':679,'multiline':False]
['text':' original = *(&storage)','line_number':695,'multiline':False]
['text':' result = original - value','line_number':696,'multiline':False]
['text':' sign extend result from 8 to 32 bits','line_number':697,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':698,'multiline':False]
['text':' flags = tmp==0','line_number':699,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':700,'multiline':False]
['text':' %0','line_number':702,'multiline':False]
['text':' %1','line_number':703,'multiline':False]
['text':' %2','line_number':704,'multiline':False]
['text':' %3','line_number':705,'multiline':False]
['text':' %4','line_number':706,'multiline':False]
['text':' defined(BOOST_ATOMIC_DETAIL_ARM_HAS_LDREXB_STREXB)','line_number':714,'multiline':False]
['text':' load the original value and zero-extend to 32 bits','line_number':753,'multiline':False]
['text':' store the replacement, tmp = store failed','line_number':754,'multiline':False]
['text':' check if store succeeded','line_number':755,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':778,'multiline':False]
['text':' flags = original==expected','line_number':779,'multiline':False]
['text':' [hint that the following 2 instructions are conditional on flags.equal]','line_number':780,'multiline':False]
['text':' if (flags.equal) *(&storage) = desired, success = store failed','line_number':781,'multiline':False]
['text':' if (flags.equal) success ^= 1 (i.e. make it 1 if store succeeded)','line_number':782,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':815,'multiline':False]
['text':' flags = original==expected','line_number':816,'multiline':False]
['text':' if (!flags.equal) goto end','line_number':817,'multiline':False]
['text':' *(&storage) = desired, success = store failed','line_number':818,'multiline':False]
['text':' success ^= 1 (i.e. make it 1 if store succeeded); flags.equal = success == 0','line_number':819,'multiline':False]
['text':' if (flags.equal) goto retry','line_number':820,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':850,'multiline':False]
['text':' result = original + value','line_number':851,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':852,'multiline':False]
['text':' flags = tmp==0','line_number':853,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':854,'multiline':False]
['text':' %0','line_number':856,'multiline':False]
['text':' %1','line_number':857,'multiline':False]
['text':' %2','line_number':858,'multiline':False]
['text':' %3','line_number':859,'multiline':False]
['text':' %4','line_number':860,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':876,'multiline':False]
['text':' result = original - value','line_number':877,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':878,'multiline':False]
['text':' flags = tmp==0','line_number':879,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':880,'multiline':False]
['text':' %0','line_number':882,'multiline':False]
['text':' %1','line_number':883,'multiline':False]
['text':' %2','line_number':884,'multiline':False]
['text':' %3','line_number':885,'multiline':False]
['text':' %4','line_number':886,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':902,'multiline':False]
['text':' result = original & value','line_number':903,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':904,'multiline':False]
['text':' flags = tmp==0','line_number':905,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':906,'multiline':False]
['text':' %0','line_number':908,'multiline':False]
['text':' %1','line_number':909,'multiline':False]
['text':' %2','line_number':910,'multiline':False]
['text':' %3','line_number':911,'multiline':False]
['text':' %4','line_number':912,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':928,'multiline':False]
['text':' result = original | value','line_number':929,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':930,'multiline':False]
['text':' flags = tmp==0','line_number':931,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':932,'multiline':False]
['text':' %0','line_number':934,'multiline':False]
['text':' %1','line_number':935,'multiline':False]
['text':' %2','line_number':936,'multiline':False]
['text':' %3','line_number':937,'multiline':False]
['text':' %4','line_number':938,'multiline':False]
['text':' original = zero_extend(*(&storage))','line_number':954,'multiline':False]
['text':' result = original ^ value','line_number':955,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':956,'multiline':False]
['text':' flags = tmp==0','line_number':957,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':958,'multiline':False]
['text':' %0','line_number':960,'multiline':False]
['text':' %1','line_number':961,'multiline':False]
['text':' %2','line_number':962,'multiline':False]
['text':' %3','line_number':963,'multiline':False]
['text':' %4','line_number':964,'multiline':False]
['text':' defined(BOOST_ATOMIC_DETAIL_ARM_HAS_LDREXH_STREXH)','line_number':982,'multiline':False]
['text':' original = *(&storage)','line_number':1000,'multiline':False]
['text':' result = original + value','line_number':1001,'multiline':False]
['text':' zero extend result from 16 to 32 bits','line_number':1002,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1003,'multiline':False]
['text':' flags = tmp==0','line_number':1004,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1005,'multiline':False]
['text':' %0','line_number':1007,'multiline':False]
['text':' %1','line_number':1008,'multiline':False]
['text':' %2','line_number':1009,'multiline':False]
['text':' %3','line_number':1010,'multiline':False]
['text':' %4','line_number':1011,'multiline':False]
['text':' original = *(&storage)','line_number':1027,'multiline':False]
['text':' result = original - value','line_number':1028,'multiline':False]
['text':' zero extend result from 16 to 32 bits','line_number':1029,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1030,'multiline':False]
['text':' flags = tmp==0','line_number':1031,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1032,'multiline':False]
['text':' %0','line_number':1034,'multiline':False]
['text':' %1','line_number':1035,'multiline':False]
['text':' %2','line_number':1036,'multiline':False]
['text':' %3','line_number':1037,'multiline':False]
['text':' %4','line_number':1038,'multiline':False]
['text':' original = *(&storage)','line_number':1062,'multiline':False]
['text':' result = original + value','line_number':1063,'multiline':False]
['text':' sign extend result from 16 to 32 bits','line_number':1064,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1065,'multiline':False]
['text':' flags = tmp==0','line_number':1066,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1067,'multiline':False]
['text':' %0','line_number':1069,'multiline':False]
['text':' %1','line_number':1070,'multiline':False]
['text':' %2','line_number':1071,'multiline':False]
['text':' %3','line_number':1072,'multiline':False]
['text':' %4','line_number':1073,'multiline':False]
['text':' original = *(&storage)','line_number':1089,'multiline':False]
['text':' result = original - value','line_number':1090,'multiline':False]
['text':' sign extend result from 16 to 32 bits','line_number':1091,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1092,'multiline':False]
['text':' flags = tmp==0','line_number':1093,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1094,'multiline':False]
['text':' %0','line_number':1096,'multiline':False]
['text':' %1','line_number':1097,'multiline':False]
['text':' %2','line_number':1098,'multiline':False]
['text':' %3','line_number':1099,'multiline':False]
['text':' %4','line_number':1100,'multiline':False]
['text':' defined(BOOST_ATOMIC_DETAIL_ARM_HAS_LDREXH_STREXH)','line_number':1108,'multiline':False]
['text':' Unlike 32-bit operations, for 64-bit loads and stores we must use ldrexd/strexd.','line_number':1112,'multiline':False]
['text':' Any other instructions result in a non-atomic sequence of 32-bit accesses.','line_number':1113,'multiline':False]
['text':' See "ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition",','line_number':1114,'multiline':False]
['text':' Section A3.5.3 "Atomicity in the ARM architecture".','line_number':1115,'multiline':False]
['text':' In the asm blocks below we have to use 32-bit register pairs to compose 64-bit values.','line_number':1117,'multiline':False]
['text':' In order to pass the 64-bit operands to/from asm blocks, we use undocumented gcc feature:','line_number':1118,'multiline':False]
['text':' the lower half (Rt) of the operand is accessible normally, via the numbered placeholder (e.g. %0),','line_number':1119,'multiline':False]
['text':' and the upper half (Rt2) - via the same placeholder with an 'H' after the '%' sign (e.g. %H0).','line_number':1120,'multiline':False]
['text':' See: http://hardwarebug.org/2010/07/06/arm-inline-asm-secrets/','line_number':1121,'multiline':False]
['text':' ARMv7 says ldrex (and other load-exclusive instructions) can be used without a matching strex, see','line_number':1141,'multiline':False]
['text':' "ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition", Section A3.4.5 "Load-Exclusive and Store-Exclusive usage restrictions".','line_number':1142,'multiline':False]
['text':' %0','line_number':1148,'multiline':False]
['text':' %1','line_number':1149,'multiline':False]
['text':' %0','line_number':1158,'multiline':False]
['text':' %1','line_number':1159,'multiline':False]
['text':' %2','line_number':1160,'multiline':False]
['text':' load the original value','line_number':1176,'multiline':False]
['text':' store the replacement, tmp = store failed','line_number':1177,'multiline':False]
['text':' check if store succeeded','line_number':1178,'multiline':False]
['text':' %0','line_number':1181,'multiline':False]
['text':' %1','line_number':1182,'multiline':False]
['text':' %2','line_number':1183,'multiline':False]
['text':' %3','line_number':1184,'multiline':False]
['text':' original = *(&storage)','line_number':1201,'multiline':False]
['text':' flags = original.lo==expected.lo','line_number':1202,'multiline':False]
['text':' [hint that the following 1 instruction is conditional on flags.equal]','line_number':1203,'multiline':False]
['text':' if (flags.equal) flags = original.hi==expected.hi','line_number':1204,'multiline':False]
['text':' *(&storage) = desired, success = store failed','line_number':1206,'multiline':False]
['text':' success ^= 1 (i.e. make it 1 if store succeeded)','line_number':1207,'multiline':False]
['text':' %0','line_number':1210,'multiline':False]
['text':' %1','line_number':1211,'multiline':False]
['text':' %2','line_number':1212,'multiline':False]
['text':' %3','line_number':1213,'multiline':False]
['text':' %4','line_number':1214,'multiline':False]
['text':' %5','line_number':1215,'multiline':False]
['text':' original = *(&storage)','line_number':1237,'multiline':False]
['text':' flags = original.lo==expected.lo','line_number':1238,'multiline':False]
['text':' [hint that the following 1 instruction is conditional on flags.equal]','line_number':1239,'multiline':False]
['text':' if (flags.equal) flags = original.hi==expected.hi','line_number':1240,'multiline':False]
['text':' *(&storage) = desired, success = store failed','line_number':1242,'multiline':False]
['text':' success ^= 1 (i.e. make it 1 if store succeeded), flags.equal = success == 0','line_number':1243,'multiline':False]
['text':' if (flags.equal) goto retry','line_number':1244,'multiline':False]
['text':' %0','line_number':1247,'multiline':False]
['text':' %1','line_number':1248,'multiline':False]
['text':' %2','line_number':1249,'multiline':False]
['text':' %3','line_number':1250,'multiline':False]
['text':' %4','line_number':1251,'multiline':False]
['text':' %5','line_number':1252,'multiline':False]
['text':' original = *(&storage)','line_number':1272,'multiline':False]
['text':' result = original + value','line_number':1273,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1275,'multiline':False]
['text':' flags = tmp==0','line_number':1276,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1277,'multiline':False]
['text':' %0','line_number':1279,'multiline':False]
['text':' %1','line_number':1280,'multiline':False]
['text':' %2','line_number':1281,'multiline':False]
['text':' %3','line_number':1282,'multiline':False]
['text':' %4','line_number':1283,'multiline':False]
['text':' original = *(&storage)','line_number':1299,'multiline':False]
['text':' result = original - value','line_number':1300,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1302,'multiline':False]
['text':' flags = tmp==0','line_number':1303,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1304,'multiline':False]
['text':' %0','line_number':1306,'multiline':False]
['text':' %1','line_number':1307,'multiline':False]
['text':' %2','line_number':1308,'multiline':False]
['text':' %3','line_number':1309,'multiline':False]
['text':' %4','line_number':1310,'multiline':False]
['text':' original = *(&storage)','line_number':1326,'multiline':False]
['text':' result = original & value','line_number':1327,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1329,'multiline':False]
['text':' flags = tmp==0','line_number':1330,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1331,'multiline':False]
['text':' %0','line_number':1333,'multiline':False]
['text':' %1','line_number':1334,'multiline':False]
['text':' %2','line_number':1335,'multiline':False]
['text':' %3','line_number':1336,'multiline':False]
['text':' %4','line_number':1337,'multiline':False]
['text':' original = *(&storage)','line_number':1353,'multiline':False]
['text':' result = original | value','line_number':1354,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1356,'multiline':False]
['text':' flags = tmp==0','line_number':1357,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1358,'multiline':False]
['text':' %0','line_number':1360,'multiline':False]
['text':' %1','line_number':1361,'multiline':False]
['text':' %2','line_number':1362,'multiline':False]
['text':' %3','line_number':1363,'multiline':False]
['text':' %4','line_number':1364,'multiline':False]
['text':' original = *(&storage)','line_number':1380,'multiline':False]
['text':' result = original ^ value','line_number':1381,'multiline':False]
['text':' *(&storage) = result, tmp = store failed','line_number':1383,'multiline':False]
['text':' flags = tmp==0','line_number':1384,'multiline':False]
['text':' if (!flags.equal) goto retry','line_number':1385,'multiline':False]
['text':' %0','line_number':1387,'multiline':False]
['text':' %1','line_number':1388,'multiline':False]
['text':' %2','line_number':1389,'multiline':False]
['text':' %3','line_number':1390,'multiline':False]
['text':' %4','line_number':1391,'multiline':False]
['text':' defined(BOOST_ATOMIC_DETAIL_ARM_HAS_LDREXD_STREXD)','line_number':1409,'multiline':False]
['text':' namespace detail','line_number':1411,'multiline':False]
['text':' namespace atomics','line_number':1412,'multiline':False]
['text':' namespace boost','line_number':1413,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_CORE_ARCH_OPS_GCC_ARM_HPP_INCLUDED_','line_number':1417,'multiline':False]
