['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/atomic_ref_impl.hpp
 *
 * This header contains implementation of \c atomic_ref template.
 ','line_number':8,'multiline':True]
['text':'
 * IMPLEMENTATION NOTE: All interface functions MUST be declared with BOOST_FORCEINLINE,
 *                      see comment for convert_memory_order_to_gcc in gcc_atomic_memory_order_utils.hpp.
 ','line_number':44,'multiline':True]
['text':' C++20 specifies that is_lock_free returns true if operations on *all* objects of the atomic_ref<T> type are lock-free.','line_number':105,'multiline':False]
['text':' This does not allow to return true or false depending on the referenced object runtime alignment. Currently, Boost.Atomic','line_number':106,'multiline':False]
['text':' follows this specification, although we may support runtime alignment checking in the future.','line_number':107,'multiline':False]
['text':'! General template. Implementation for user-defined types, such as structs, and pointers to non-object types','line_number':140,'multiline':False]
['text':'! Implementation for enums','line_number':259,'multiline':False]
['text':'! Implementation for integers','line_number':378,'multiline':False]
['text':' Standard methods','line_number':410,'multiline':False]
['text':' Boost.Atomic extensions','line_number':486,'multiline':False]
['text':' Operators','line_number':620,'multiline':False]
['text':'! Implementation for bool','line_number':704,'multiline':False]
['text':' Standard methods','line_number':734,'multiline':False]
['text':'! Implementation for floating point types','line_number':826,'multiline':False]
['text':' We only need to call clear_padding_bits if the compiler does not implement','line_number':861,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_CLEAR_PADDING, which is called in the base class constructor.','line_number':862,'multiline':False]
['text':' defined(BOOST_ATOMIC_NO_CLEAR_PADDING)','line_number':865,'multiline':False]
['text':' Boost.Atomic extensions','line_number':928,'multiline':False]
['text':' Operators','line_number':964,'multiline':False]
['text':' defined(BOOST_ATOMIC_NO_CLEAR_PADDING)','line_number':995,'multiline':False]
['text':' !defined(BOOST_ATOMIC_NO_FLOATING_POINT)','line_number':1024,'multiline':False]
['text':'! Implementation for pointers to object types','line_number':1027,'multiline':False]
['text':' Standard methods','line_number':1059,'multiline':False]
['text':' Boost.Atomic extensions','line_number':1120,'multiline':False]
['text':' Operators','line_number':1151,'multiline':False]
['text':' namespace detail','line_number':1220,'multiline':False]
['text':' namespace atomics','line_number':1221,'multiline':False]
['text':' namespace boost','line_number':1222,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_ATOMIC_REF_IMPL_HPP_INCLUDED_','line_number':1226,'multiline':False]
