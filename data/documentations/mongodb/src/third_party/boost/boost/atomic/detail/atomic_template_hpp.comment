['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2011 Helge Bahmann
 * Copyright (c) 2013 Tim Blechmann
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/atomic_template.hpp
 *
 * This header contains interface definition of \c atomic template.
 ','line_number':10,'multiline':True]
['text':' 'boost::atomics::atomic<T>' : multiple assignment operators specified','line_number':47,'multiline':False]
['text':'
 * IMPLEMENTATION NOTE: All interface functions MUST be declared with BOOST_FORCEINLINE,
 *                      see comment for convert_memory_order_to_gcc in ops_gcc_atomic.hpp.
 ','line_number':51,'multiline':True]
['text':' 15 == (memory_order_seq_cst | memory_order_consume), see memory_order.hpp','line_number':67,'multiline':False]
['text':' Given the enum values we can test the strength of memory order requirements with this single condition.','line_number':68,'multiline':False]
['text':' Intel compiler (at least 18.0 update 1) breaks if noexcept specification is used in defaulted function declarations:','line_number':120,'multiline':False]
['text':' error: the default constructor of "boost::atomics::atomic<T>" cannot be referenced -- it is a deleted function','line_number':121,'multiline':False]
['text':' GCC 4.6 doesn't seem to support that either. Clang 3.1 deduces wrong noexcept for the defaulted function and fails as well.','line_number':122,'multiline':False]
['text':'! General template. Implementation for user-defined types, such as structs and enums, and pointers to non-object types','line_number':182,'multiline':False]
['text':'! Implementation for integers','line_number':297,'multiline':False]
['text':' Standard methods','line_number':323,'multiline':False]
['text':' Boost.Atomic extensions','line_number':399,'multiline':False]
['text':' Operators','line_number':538,'multiline':False]
['text':'! Implementation for bool','line_number':623,'multiline':False]
['text':' Standard methods','line_number':647,'multiline':False]
['text':'! Implementation for floating point types','line_number':740,'multiline':False]
['text':' Boost.Atomic extensions','line_number':828,'multiline':False]
['text':' Operators','line_number':864,'multiline':False]
['text':' !defined(BOOST_ATOMIC_NO_FLOATING_POINT)','line_number':914,'multiline':False]
['text':'! Implementation for pointers to object types','line_number':917,'multiline':False]
['text':' uintptr_storage_type is the minimal storage type that is enough to store pointers. The actual storage_type theoretically may be larger,','line_number':936,'multiline':False]
['text':' if the target architecture only supports atomic ops on larger data. Typically, though, they are the same type.','line_number':937,'multiline':False]
['text':' Standard methods','line_number':953,'multiline':False]
['text':' Boost.Atomic extensions','line_number':1014,'multiline':False]
['text':' Operators','line_number':1047,'multiline':False]
['text':' namespace detail','line_number':1117,'multiline':False]
['text':' C++17 requires all instances of atomic<> return a value consistent with is_always_lock_free here','line_number':1157,'multiline':False]
['text':' namespace atomics','line_number':1241,'multiline':False]
['text':' namespace boost','line_number':1242,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_ATOMIC_TEMPLATE_HPP_INCLUDED_','line_number':1248,'multiline':False]
