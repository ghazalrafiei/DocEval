['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/fence_arch_ops_gcc_arm.hpp
 *
 * This header contains implementation of the \c fence_arch_operations struct.
 ','line_number':8,'multiline':True]
['text':'! Fence operations for legacy ARM','line_number':32,'multiline':False]
['text':' A memory barrier is effected using a "co-processor 15" instruction,','line_number':49,'multiline':False]
['text':' though a separate assembler mnemonic is available for it in v7.','line_number':50,'multiline':False]
['text':' Older binutils (supposedly, older than 2.21.1) didn't support symbolic or numeric arguments of the "dmb" instruction such as "ish" or "#11".','line_number':53,'multiline':False]
['text':' As a workaround we have to inject encoded bytes of the instruction. There are two encodings for the instruction: ARM and Thumb. See ARM Architecture Reference Manual, A8.8.43.','line_number':54,'multiline':False]
['text':' Since we cannot detect binutils version at compile time, we'll have to always use this hack.','line_number':55,'multiline':False]
['text':' dmb ish','line_number':59,'multiline':False]
['text':' dmb ish','line_number':61,'multiline':False]
['text':' namespace detail','line_number':84,'multiline':False]
['text':' namespace atomics','line_number':85,'multiline':False]
['text':' namespace boost','line_number':86,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_GCC_ARM_HPP_INCLUDED_','line_number':90,'multiline':False]
