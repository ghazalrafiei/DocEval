['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2011 Helge Bahmann
 * Copyright (c) 2013 Tim Blechmann
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/core_ops_gcc_sync.hpp
 *
 * This header contains implementation of the \c core_operations template.
 ','line_number':10,'multiline':True]
['text':' In general, we cannot guarantee atomicity of plain loads and stores of anything larger than a single byte on','line_number':72,'multiline':False]
['text':' an arbitrary CPU architecture. However, all modern architectures seem to guarantee atomic loads and stores of','line_number':73,'multiline':False]
['text':' suitably aligned objects of up to a pointer size. For larger objects we should probably use intrinsics to guarantee','line_number':74,'multiline':False]
['text':' atomicity. If there appears an architecture where this doesn't hold, this threshold needs to be updated (patches are welcome).','line_number':75,'multiline':False]
['text':' Note: don't use fetch_add or other arithmetics here since storage_type may not be an arithmetic type.','line_number':109,'multiline':False]
['text':' We don't care if CAS succeeds or not. If it does, it will just write the same value there was before.','line_number':112,'multiline':False]
['text':' GCC docs mention that not all architectures may support full exchange semantics for this intrinsic. However, GCC's implementation of','line_number':128,'multiline':False]
['text':' std::atomic<> uses this intrinsic unconditionally. We do so as well. In case if some architectures actually don't support this, we can always','line_number':129,'multiline':False]
['text':' add a check here and fall back to a CAS loop.','line_number':130,'multiline':False]
['text':' namespace detail','line_number':257,'multiline':False]
['text':' namespace atomics','line_number':258,'multiline':False]
['text':' namespace boost','line_number':259,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_CORE_OPS_GCC_SYNC_HPP_INCLUDED_','line_number':263,'multiline':False]
