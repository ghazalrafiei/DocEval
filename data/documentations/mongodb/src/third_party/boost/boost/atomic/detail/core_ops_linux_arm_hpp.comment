['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2009, 2011 Helge Bahmann
 * Copyright (c) 2009 Phil Endecott
 * Copyright (c) 2013 Tim Blechmann
 * Linux-specific code by Phil Endecott
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/core_ops_linux_arm.hpp
 *
 * This header contains implementation of the \c core_operations template.
 ','line_number':12,'multiline':True]
['text':' Different ARM processors have different atomic instructions.  In particular,','line_number':40,'multiline':False]
['text':' architecture versions before v6 (which are still in widespread use, e.g. the','line_number':41,'multiline':False]
['text':' Intel/Marvell XScale chips like the one in the NSLU2) have only atomic swap.','line_number':42,'multiline':False]
['text':' On Linux the kernel provides some support that lets us abstract away from','line_number':43,'multiline':False]
['text':' these differences: it provides emulated CAS and barrier functions at special','line_number':44,'multiline':False]
['text':' addresses that are guaranteed not to be interrupted by the kernel.  Using','line_number':45,'multiline':False]
['text':' this facility is slightly slower than inline assembler would be, but much','line_number':46,'multiline':False]
['text':' faster than a system call.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' https://lwn.net/Articles/314561/','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':' While this emulated CAS is "strong" in the sense that it does not fail','line_number':51,'multiline':False]
['text':' "spuriously" (i.e.: it never fails to perform the exchange when the value','line_number':52,'multiline':False]
['text':' found equals the value expected), it does not return the found value on','line_number':53,'multiline':False]
['text':' failure. To satisfy the atomic API, compare_exchange_{weak|strong} must','line_number':54,'multiline':False]
['text':' return the found value on failure, and we have to manually load this value','line_number':55,'multiline':False]
['text':' after the emulated CAS reports failure. This in turn introduces a race','line_number':56,'multiline':False]
['text':' between the CAS failing (due to the "wrong" value being found) and subsequently','line_number':57,'multiline':False]
['text':' loading (which might turn up the "right" value). From an application's','line_number':58,'multiline':False]
['text':' point of view this looks like "spurious failure", and therefore the','line_number':59,'multiline':False]
['text':' emulated CAS is only good enough to provide compare_exchange_weak','line_number':60,'multiline':False]
['text':' semantics.','line_number':61,'multiline':False]
['text':' namespace detail','line_number':163,'multiline':False]
['text':' namespace atomics','line_number':164,'multiline':False]
['text':' namespace boost','line_number':165,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_CORE_OPS_LINUX_ARM_HPP_INCLUDED_','line_number':169,'multiline':False]
