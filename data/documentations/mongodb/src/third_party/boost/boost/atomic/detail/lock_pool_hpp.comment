['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2011 Helge Bahmann
 * Copyright (c) 2013-2014, 2020 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/lock_pool.hpp
 *
 * This header contains declaration of the lock pool used to emulate atomic ops.
 ','line_number':9,'multiline':True]
['text':' Do not use sched_yield or pthread_yield as at least on Linux it doesn't block the thread if there are no other','line_number':44,'multiline':False]
['text':' pending threads on the current CPU. Proper sleeping is guaranteed to block the thread, which allows other threads','line_number':45,'multiline':False]
['text':' to potentially migrate to this CPU and complete the tasks we're waiting for.','line_number':46,'multiline':False]
['text':' Since many malloc/new implementations return pointers with higher alignment','line_number':77,'multiline':False]
['text':' than indicated by Alignment, it makes sense to mix higher bits','line_number':78,'multiline':False]
['text':' into the lower ones. On 64-bit platforms, malloc typically aligns to 16 bytes,','line_number':79,'multiline':False]
['text':' on 32-bit - to 8 bytes.','line_number':80,'multiline':False]
['text':' namespace lock_pool','line_number':144,'multiline':False]
['text':' namespace detail','line_number':145,'multiline':False]
['text':' namespace atomics','line_number':146,'multiline':False]
['text':' namespace boost','line_number':147,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_LOCK_POOL_HPP_INCLUDED_','line_number':151,'multiline':False]
