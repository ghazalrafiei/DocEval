['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014, 2020 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/core_ops_gcc_atomic.hpp
 *
 * This header contains implementation of the \c core_operations template.
 ','line_number':8,'multiline':True]
['text':' There are platforms where we need to use larger storage types','line_number':28,'multiline':False]
['text':' This is used to suppress warning #32013 described in gcc_atomic_memory_order_utils.hpp','line_number':39,'multiline':False]
['text':' for Intel Compiler.','line_number':40,'multiline':False]
['text':' In debug builds the compiler does not inline any functions, so basically','line_number':41,'multiline':False]
['text':' every atomic function call results in this warning. I don't know any other','line_number':42,'multiline':False]
['text':' way to selectively disable just this one warning.','line_number':43,'multiline':False]
['text':' Note: In the current implementation, core_operations_gcc_atomic are used only when the particularly sized __atomic','line_number':62,'multiline':False]
['text':' intrinsics are always lock-free (i.e. the corresponding LOCK_FREE macro is 2). Therefore it is safe to','line_number':63,'multiline':False]
['text':' always set is_always_lock_free to true here.','line_number':64,'multiline':False]
['text':' gcc up to 10.1 generates mov + mfence for seq_cst stores, which is slower than xchg','line_number':70,'multiline':False]
['text':' At least gcc 9.3 and clang 10 do not generate relaxed ldapr instructions that are available in ARMv8.3-RCPC extension.','line_number':83,'multiline':False]
['text':' https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95751','line_number':84,'multiline':False]
['text':' We want to only enable __atomic* intrinsics when the corresponding BOOST_ATOMIC_DETAIL_GCC_ATOMIC_*_LOCK_FREE macro indicates','line_number':155,'multiline':False]
['text':' the same or better lock-free guarantees as the BOOST_ATOMIC_*_LOCK_FREE macro. Otherwise, we want to leave core_operations','line_number':156,'multiline':False]
['text':' unspecialized, so that core_arch_operations is used instead.','line_number':157,'multiline':False]
['text':' BOOST_ATOMIC_INT64_LOCK_FREE > 0','line_number':187,'multiline':False]
['text':' BOOST_ATOMIC_INT32_LOCK_FREE > 0','line_number':216,'multiline':False]
['text':' BOOST_ATOMIC_INT16_LOCK_FREE > 0','line_number':253,'multiline':False]
['text':' BOOST_ATOMIC_INT8_LOCK_FREE > 0','line_number':298,'multiline':False]
['text':' namespace detail','line_number':300,'multiline':False]
['text':' namespace atomics','line_number':301,'multiline':False]
['text':' namespace boost','line_number':302,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_CORE_OPS_GCC_ATOMIC_HPP_INCLUDED_','line_number':306,'multiline':False]
