['text':'
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2009 Helge Bahmann
 * Copyright (c) 2013 Tim Blechmann
 * Copyright (c) 2014 Andrey Semashev
 ','line_number':1,'multiline':True]
['text':'!
 * \file   atomic/detail/ops_gcc_ppc_common.hpp
 *
 * This header contains basic utilities for gcc PowerPC backend.
 ','line_number':10,'multiline':True]
['text':' The implementation below uses information from this document:','line_number':31,'multiline':False]
['text':' http://www.rdrop.com/users/paulmck/scalability/paper/N2745r.2010.02.19a.html','line_number':32,'multiline':False]
['text':' A note about memory_order_consume. Technically, this architecture allows to avoid','line_number':34,'multiline':False]
['text':' unnecessary memory barrier after consume load since it supports data dependency ordering.','line_number':35,'multiline':False]
['text':' However, some compiler optimizations may break a seemingly valid code relying on data','line_number':36,'multiline':False]
['text':' dependency tracking by injecting bogus branches to aid out of order execution.','line_number':37,'multiline':False]
['text':' This may happen not only in Boost.Atomic code but also in user's code, which we have no','line_number':38,'multiline':False]
['text':' control of. See this thread: http://lists.boost.org/Archives/boost/2014/06/213890.php.','line_number':39,'multiline':False]
['text':' For this reason we promote memory_order_consume to memory_order_acquire.','line_number':40,'multiline':False]
['text':' namespace detail','line_number':67,'multiline':False]
['text':' namespace atomics','line_number':68,'multiline':False]
['text':' namespace boost','line_number':69,'multiline':False]
['text':' BOOST_ATOMIC_DETAIL_OPS_GCC_PPC_COMMON_HPP_INCLUDED_','line_number':73,'multiline':False]
