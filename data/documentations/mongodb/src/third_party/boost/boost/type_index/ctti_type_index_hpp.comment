['text':'','line_number':1,'multiline':False]
['text':' Copyright 2013-2022 Antony Polukhin.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':5,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'/ \file ctti_type_index.hpp','line_number':12,'multiline':False]
['text':'/ \brief Contains boost::typeindex::ctti_type_index class that is constexpr if C++14 constexpr is supported by compiler.','line_number':13,'multiline':False]
['text':'/','line_number':14,'multiline':False]
['text':'/ boost::typeindex::ctti_type_index class can be used as a drop-in replacement','line_number':15,'multiline':False]
['text':'/ for std::type_index.','line_number':16,'multiline':False]
['text':'/','line_number':17,'multiline':False]
['text':'/ It is used in situations when typeid() method is not available or ','line_number':18,'multiline':False]
['text':'/ BOOST_TYPE_INDEX_FORCE_NO_RTTI_COMPATIBILITY macro is defined.','line_number':19,'multiline':False]
['text':' That's the most trickiest part of the TypeIndex library:','line_number':38,'multiline':False]
['text':'      1) we do not want to give user ability to manually construct and compare `struct-that-represents-type`','line_number':39,'multiline':False]
['text':'      2) we need to distinguish between `struct-that-represents-type` and `const char*`','line_number':40,'multiline':False]
['text':'      3) we need a thread-safe way to have references to instances `struct-that-represents-type`','line_number':41,'multiline':False]
['text':'      4) we need a compile-time control to make sure that user does not copy or','line_number':42,'multiline':False]
['text':' default construct `struct-that-represents-type`','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' Solution would be the following:','line_number':45,'multiline':False]
['text':'/ \class ctti_data','line_number':47,'multiline':False]
['text':'/ Standard-layout class with private constructors and assignment operators.','line_number':48,'multiline':False]
['text':'/','line_number':49,'multiline':False]
['text':'/ You can not work with this class directly. The  purpose of this class is to hold type info ','line_number':50,'multiline':False]
['text':'/ \b when \b RTTI \b is \b off and allow ctti_type_index construction from itself.','line_number':51,'multiline':False]
['text':'/','line_number':52,'multiline':False]
['text':'/ \b Example:','line_number':53,'multiline':False]
['text':'/ \code','line_number':54,'multiline':False]
['text':'/ const detail::ctti_data& foo();','line_number':55,'multiline':False]
['text':'/ ...','line_number':56,'multiline':False]
['text':'/ type_index ti = type_index(foo());','line_number':57,'multiline':False]
['text':'/ std::cout << ti.pretty_name();','line_number':58,'multiline':False]
['text':'/ \endcode','line_number':59,'multiline':False]
['text':' namespace detail','line_number':74,'multiline':False]
['text':'/ Helper method for getting detail::ctti_data of a template parameter T.','line_number':76,'multiline':False]
['text':' Standard C++11, 5.2.10 Reinterpret cast:','line_number':79,'multiline':False]
['text':' An object pointer can be explicitly converted to an object pointer of a different type. When a prvalue','line_number':80,'multiline':False]
['text':' v of type "pointer to T1" is converted to the type "pointer to cv T2", the result is static_cast<cv','line_number':81,'multiline':False]
['text':' T2*>(static_cast<cv void*>(v)) if both T1 and T2 are standard-layout types (3.9) and the alignment','line_number':82,'multiline':False]
['text':' requirements of T2 are no stricter than those of T1, or if either type is void. Converting a prvalue of type','line_number':83,'multiline':False]
['text':' "pointer to T1" to the type "pointer to T2" (where T1 and T2 are object types and where the alignment','line_number':84,'multiline':False]
['text':' requirements of T2 are no stricter than those of T1) and back to its original type yields the original pointer','line_number':85,'multiline':False]
['text':' value.','line_number':86,'multiline':False]
['text':'','line_number':87,'multiline':False]
['text':' Alignments are checked in `type_index_test_ctti_alignment.cpp` test.','line_number':88,'multiline':False]
['text':'/ \class ctti_type_index','line_number':92,'multiline':False]
['text':'/ This class is a wrapper that pretends to work exactly like stl_type_index, but does','line_number':93,'multiline':False]
['text':'/ not require RTTI support. \b For \b description \b of \b functions \b see type_index_facade.','line_number':94,'multiline':False]
['text':'/','line_number':95,'multiline':False]
['text':'/ This class on C++14 compatible compilers has following functions marked as constexpr:','line_number':96,'multiline':False]
['text':'/     * default constructor','line_number':97,'multiline':False]
['text':'/     * copy constructors and assignemnt operations','line_number':98,'multiline':False]
['text':'/     * class methods: name(), before(const ctti_type_index& rhs), equal(const ctti_type_index& rhs)','line_number':99,'multiline':False]
['text':'/     * static methods type_id<T>(), type_id_with_cvr<T>()','line_number':100,'multiline':False]
['text':'/     * comparison operators','line_number':101,'multiline':False]
['text':'/','line_number':102,'multiline':False]
['text':'/ This class produces slightly longer type names, so consider using stl_type_index','line_number':103,'multiline':False]
['text':'/ in situations when typeid() is working.','line_number':104,'multiline':False]
['text':'left == right ||','line_number':153,'multiline':True]
['text':'left != right &&','line_number':159,'multiline':True]
['text':' MSVC sometimes adds whitespaces','line_number':200,'multiline':False]
['text':' namespace boost::typeindex','line_number':210,'multiline':False]
['text':' BOOST_TYPE_INDEX_CTTI_TYPE_INDEX_HPP','line_number':212,'multiline':False]
