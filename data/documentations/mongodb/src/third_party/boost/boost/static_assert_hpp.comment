['text':'  (C) Copyright John Maddock 2000.','line_number':1,'multiline':False]
['text':'  Use, modification and distribution are subject to the ','line_number':2,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file ','line_number':3,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'  See http://www.boost.org/libs/static_assert for documentation.','line_number':6,'multiline':False]
['text':'
 Revision history:
   02 August 2000
      Initial version.
','line_number':8,'multiline':True]
['text':'for std::size_t','line_number':19,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' This is horrible, but it seems to be the only we can shut up the','line_number':23,'multiline':False]
['text':' "anonymous variadic macros were introduced in C99 [-Wvariadic-macros]"','line_number':24,'multiline':False]
['text':' warning that get spewed out otherwise in non-C++11 mode.','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':' workaround for buggy integral-constant expression support:','line_number':42,'multiline':False]
['text':' gcc 3.3 and 3.4 don't produce good error messages with the default version:','line_number':47,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' If the compiler issues warnings about old C style casts,','line_number':52,'multiline':False]
['text':' then enable this:','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':' HP aCC cannot deal with missing names for template value parameters','line_number':79,'multiline':False]
['text':' HP aCC cannot deal with missing names for template value parameters','line_number':84,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':' Implicit instantiation requires that all member declarations be','line_number':90,'multiline':False]
['text':' instantiated, but that the definitions are *not* instantiated.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':' It's not particularly clear how this applies to enum's or typedefs;','line_number':93,'multiline':False]
['text':' both are described as declarations [7.1.3] and [7.2] in the standard,','line_number':94,'multiline':False]
['text':' however some compilers use "delayed evaluation" of one or more of','line_number':95,'multiline':False]
['text':' these when implicitly instantiating templates.  We use typedef declarations','line_number':96,'multiline':False]
['text':' by default, but try defining BOOST_USE_ENUM_STATIC_ASSERT if the enum','line_number':97,'multiline':False]
['text':' version gets better results from your compiler...','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' Implementation:','line_number':100,'multiline':False]
['text':' Both of these versions rely on sizeof(incomplete_type) generating an error','line_number':101,'multiline':False]
['text':' message containing the name of the incomplete type.  We use','line_number':102,'multiline':False]
['text':' "STATIC_ASSERTION_FAILURE" as the type name here to generate','line_number':103,'multiline':False]
['text':' an eye catching error message.  The result of the sizeof expression is either','line_number':104,'multiline':False]
['text':' used as an enum initialiser, or as a template argument depending which version','line_number':105,'multiline':False]
['text':' is in use...','line_number':106,'multiline':False]
['text':' Note that the argument to the assert is explicitly cast to bool using old-','line_number':107,'multiline':False]
['text':' style casts: too many compilers currently have problems with static_cast','line_number':108,'multiline':False]
['text':' when used inside integral constant expressions.','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':' agurt 15/sep/02: a special care is needed to force Intel C++ issue an error ','line_number':124,'multiline':False]
['text':' instead of warning in case of failure','line_number':125,'multiline':False]
['text':' agurt 15/sep/02: a special care is needed to force Intel C++ issue an error ','line_number':130,'multiline':False]
['text':' instead of warning in case of failure','line_number':131,'multiline':False]
['text':' special version for SGI MIPSpro compiler','line_number':136,'multiline':False]
['text':' special version for CodeWarrior <= 8.x','line_number':145,'multiline':False]
['text':' generic version','line_number':151,'multiline':False]
['text':' alternative enum based implementation:','line_number':166,'multiline':False]
['text':' defined(BOOST_NO_CXX11_STATIC_ASSERT)','line_number':177,'multiline':False]
['text':' BOOST_STATIC_ASSERT_HPP','line_number':179,'multiline':False]
