['text':'  boost cast.hpp header file  ----------------------------------------------//','line_number':1,'multiline':False]
['text':'  (C) Copyright Kevlin Henney and Dave Abrahams 1999.','line_number':3,'multiline':False]
['text':'  Distributed under the Boost','line_number':4,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'  See http://www.boost.org/libs/conversion for Documentation.','line_number':8,'multiline':False]
['text':'  Revision History','line_number':10,'multiline':False]
['text':'  02 Jun 14  Remove VC6 workarounds.','line_number':11,'multiline':False]
['text':'  16 Jul 11  Bugfixes for VC6.','line_number':12,'multiline':False]
['text':'  23 JUN 05  Code extracted from /boost/cast.hpp into this new header.','line_number':13,'multiline':False]
['text':'             Keeps this legacy version of numeric_cast<> for old compilers','line_number':14,'multiline':False]
['text':'             wich can't compile the new version in /boost/numeric/conversion/cast.hpp','line_number':15,'multiline':False]
['text':'             (Fernando Cacciola)','line_number':16,'multiline':False]
['text':'  02 Apr 01  Removed BOOST_NO_LIMITS workarounds and included','line_number':17,'multiline':False]
['text':'             <boost/limits.hpp> instead (the workaround did not','line_number':18,'multiline':False]
['text':'             actually compile when BOOST_NO_LIMITS was defined in','line_number':19,'multiline':False]
['text':'             any case, so we loose nothing). (John Maddock)','line_number':20,'multiline':False]
['text':'  21 Jan 01  Undid a bug I introduced yesterday. numeric_cast<> never','line_number':21,'multiline':False]
['text':'             worked with stock GCC; trying to get it to do that broke','line_number':22,'multiline':False]
['text':'             vc-stlport.','line_number':23,'multiline':False]
['text':'  20 Jan 01  Moved BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS to config.hpp.','line_number':24,'multiline':False]
['text':'             Removed unused BOOST_EXPLICIT_TARGET macro. Moved','line_number':25,'multiline':False]
['text':'             boost::detail::type to boost/type.hpp. Made it compile with','line_number':26,'multiline':False]
['text':'             stock gcc again (Dave Abrahams)','line_number':27,'multiline':False]
['text':'  29 Nov 00  Remove nested namespace cast, cleanup spacing before Formal','line_number':28,'multiline':False]
['text':'             Review (Beman Dawes)','line_number':29,'multiline':False]
['text':'  19 Oct 00  Fix numeric_cast for floating-point types (Dave Abrahams)','line_number':30,'multiline':False]
['text':'  15 Jul 00  Suppress numeric_cast warnings for GCC, Borland and MSVC','line_number':31,'multiline':False]
['text':'             (Dave Abrahams)','line_number':32,'multiline':False]
['text':'  30 Jun 00  More MSVC6 wordarounds.  See comments below.  (Dave Abrahams)','line_number':33,'multiline':False]
['text':'  28 Jun 00  Removed implicit_cast<>.  See comment below. (Beman Dawes)','line_number':34,'multiline':False]
['text':'  27 Jun 00  More MSVC6 workarounds','line_number':35,'multiline':False]
['text':'  15 Jun 00  Add workarounds for MSVC6','line_number':36,'multiline':False]
['text':'   2 Feb 00  Remove bad_numeric_cast ";" syntax error (Doncho Angelov)','line_number':37,'multiline':False]
['text':'  26 Jan 00  Add missing throw() to bad_numeric_cast::what(0 (Adam Levar)','line_number':38,'multiline':False]
['text':'  29 Dec 99  Change using declarations so usages in other namespaces work','line_number':39,'multiline':False]
['text':'             correctly (Dave Abrahams)','line_number':40,'multiline':False]
['text':'  23 Sep 99  Change polymorphic_downcast assert to also detect M.I. errors','line_number':41,'multiline':False]
['text':'             as suggested Darin Adler and improved by Valentin Bonnard.','line_number':42,'multiline':False]
['text':'   2 Sep 99  Remove controversial asserts, simplify, rename.','line_number':43,'multiline':False]
['text':'  30 Aug 99  Move to cast.hpp, replace value_cast with numeric_cast,','line_number':44,'multiline':False]
['text':'             place in nested namespace.','line_number':45,'multiline':False]
['text':'   3 Aug 99  Initial version','line_number':46,'multiline':False]
['text':'  LEGACY numeric_cast [only for some old broken compilers] --------------------------------------//','line_number':62,'multiline':False]
['text':'  Contributed by Kevlin Henney','line_number':64,'multiline':False]
['text':'  numeric_cast  ------------------------------------------------------------//','line_number':66,'multiline':False]
['text':' unary minus causes integral promotion, thus the static_cast<>','line_number':78,'multiline':False]
['text':' Move to namespace boost in utility.hpp?','line_number':84,'multiline':False]
['text':' cover implementations which supply no specialization for long','line_number':99,'multiline':False]
['text':' long / unsigned long long. Not intended to be full','line_number':100,'multiline':False]
['text':' numeric_limits replacements, but good enough for numeric_cast<>','line_number':101,'multiline':False]
['text':' hope this is portable','line_number':112,'multiline':False]
['text':' hope this is portable','line_number':121,'multiline':False]
['text':' hope this is portable','line_number':136,'multiline':False]
['text':' namespace detail','line_number':143,'multiline':False]
['text':' less_than_type_min -','line_number':145,'multiline':False]
['text':'    x_is_signed should be numeric_limits<X>::is_signed','line_number':146,'multiline':False]
['text':'    y_is_signed should be numeric_limits<Y>::is_signed','line_number':147,'multiline':False]
['text':'    y_min should be numeric_limits<Y>::min()','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'    check(x, y_min) returns true iff x < y_min without invoking comparisons','line_number':150,'multiline':False]
['text':'    between signed and unsigned values.','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':'    "poor man's partial specialization" is in use here.','line_number':153,'multiline':False]
['text':' greater_than_type_max -','line_number':178,'multiline':False]
['text':'    same_sign should be:','line_number':179,'multiline':False]
['text':'            numeric_limits<X>::is_signed == numeric_limits<Y>::is_signed','line_number':180,'multiline':False]
['text':'    y_max should be numeric_limits<Y>::max()','line_number':181,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':'    check(x, y_max) returns true iff x > y_max without invoking comparisons','line_number':183,'multiline':False]
['text':'    between signed and unsigned values.','line_number':184,'multiline':False]
['text':'','line_number':185,'multiline':False]
['text':'    "poor man's partial specialization" is in use here.','line_number':186,'multiline':False]
['text':' What does the standard say about this? I think it's right, and it','line_number':201,'multiline':False]
['text':' will work with every compiler I know of.','line_number':202,'multiline':False]
['text':' What does the standard say about this? I think it's right, and it','line_number':219,'multiline':False]
['text':' will work with every compiler I know of.','line_number':220,'multiline':False]
['text':' use #pragma hacks if available','line_number':226,'multiline':False]
['text':' Move to namespace boost in utility.hpp?','line_number':238,'multiline':False]
['text':' namespace detail','line_number':254,'multiline':False]
['text':' typedefs abbreviating respective trait classes','line_number':261,'multiline':False]
['text':' typedefs that act as compile time assertions','line_number':269,'multiline':False]
['text':' (to be replaced by boost compile time assertions','line_number':270,'multiline':False]
['text':' as and when they become available and are stable)','line_number':271,'multiline':False]
['text':' We need to use #pragma hacks if available','line_number':283,'multiline':False]
['text':' loss of negative range','line_number':291,'multiline':False]
['text':' underflow','line_number':292,'multiline':False]
['text':' overflow','line_number':293,'multiline':False]
['text':' numeric_cast','line_number':304,'multiline':False]
['text':' namespace boost','line_number':306,'multiline':False]
['text':' BOOST_OLD_NUMERIC_CAST_HPP','line_number':308,'multiline':False]
