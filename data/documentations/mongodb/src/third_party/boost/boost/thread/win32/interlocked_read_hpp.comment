['text':'  interlocked_read_win32.hpp','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'  (C) Copyright 2005-8 Anthony Williams','line_number':6,'multiline':False]
['text':'  (C) Copyright 2012 Vicente J. Botet Escriba','line_number':7,'multiline':False]
['text':'  (C) Copyright 2017 Andrey Semashev','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':10,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':11,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':12,'multiline':False]
['text':' Define compiler barriers','line_number':19,'multiline':False]
['text':' Since VS2005 and until VS2012 volatile reads always acquire and volatile writes are always release.','line_number':36,'multiline':False]
['text':' But VS2012 adds a compiler switch that can change behavior to the standard. On x86 though','line_number':37,'multiline':False]
['text':' the compiler generates a single instruction for the load/store, which is enough synchronization','line_number':38,'multiline':False]
['text':' as far as uarch is concerned. To prevent compiler reordering code around the load/store we add','line_number':39,'multiline':False]
['text':' compiler barriers.','line_number':40,'multiline':False]
['text':' _ARM_BARRIER_ISH, see armintr.h from MSVC 11 and later','line_number':84,'multiline':False]
['text':' _ARM_BARRIER_ISH, see armintr.h from MSVC 11 and later','line_number':97,'multiline':False]
['text':' _ARM_BARRIER_ISH, see armintr.h from MSVC 11 and later','line_number':105,'multiline':False]
['text':' _ARM_BARRIER_ISH, see armintr.h from MSVC 11 and later','line_number':112,'multiline':False]
