['text':'  shared_mutex.hpp','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Copyright Howard Hinnant 2007-2010.','line_number':6,'multiline':False]
['text':' Copyright Vicente J. Botet Escriba 2012.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':'
<shared_mutex> synopsis

namespace boost
{
namespace thread_v2
{

class shared_mutex
{
public:

    shared_mutex();
    ~shared_mutex();

    shared_mutex(const shared_mutex&) = delete;
    shared_mutex& operator=(const shared_mutex&) = delete;

    // Exclusive ownership

    void lock();
    bool try_lock();
    template <class Rep, class Period>
        bool try_lock_for(const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_lock_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock();

    // Shared ownership

    void lock_shared();
    bool try_lock_shared();
    template <class Rep, class Period>
        bool
        try_lock_shared_for(const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_lock_shared_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock_shared();
};

class upgrade_mutex
{
public:

    upgrade_mutex();
    ~upgrade_mutex();

    upgrade_mutex(const upgrade_mutex&) = delete;
    upgrade_mutex& operator=(const upgrade_mutex&) = delete;

    // Exclusive ownership

    void lock();
    bool try_lock();
    template <class Rep, class Period>
        bool try_lock_for(const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_lock_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock();

    // Shared ownership

    void lock_shared();
    bool try_lock_shared();
    template <class Rep, class Period>
        bool
        try_lock_shared_for(const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_lock_shared_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock_shared();

    // Upgrade ownership

    void lock_upgrade();
    bool try_lock_upgrade();
    template <class Rep, class Period>
        bool
        try_lock_upgrade_for(
                            const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_lock_upgrade_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock_upgrade();

    // Shared <-> Exclusive

    bool try_unlock_shared_and_lock();
    template <class Rep, class Period>
        bool
        try_unlock_shared_and_lock_for(
                            const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_unlock_shared_and_lock_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock_and_lock_shared();

    // Shared <-> Upgrade

    bool try_unlock_shared_and_lock_upgrade();
    template <class Rep, class Period>
        bool
        try_unlock_shared_and_lock_upgrade_for(
                            const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_unlock_shared_and_lock_upgrade_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock_upgrade_and_lock_shared();

    // Upgrade <-> Exclusive

    void unlock_upgrade_and_lock();
    bool try_unlock_upgrade_and_lock();
    template <class Rep, class Period>
        bool
        try_unlock_upgrade_and_lock_for(
                            const boost::chrono::duration<Rep, Period>& rel_time);
    template <class Clock, class Duration>
        bool
        try_unlock_upgrade_and_lock_until(
                      const boost::chrono::time_point<Clock, Duration>& abs_time);
    void unlock_and_lock_upgrade();
};

}  // thread_v2
}  // boost

 ','line_number':13,'multiline':True]
['text':' the gate2_ condition variable is only used by functions that','line_number':174,'multiline':False]
['text':' have taken write_entered_ but are waiting for no_readers()','line_number':175,'multiline':False]
['text':'return (state_ & write_entered_) == 0 &&','line_number':194,'multiline':False]
['text':'       (state_ & n_readers_) == 0;','line_number':195,'multiline':False]
['text':' Exclusive ownership','line_number':222,'multiline':False]
['text':' Shared ownership','line_number':242,'multiline':False]
['text':' Exclusive ownership','line_number':273,'multiline':False]
['text':' notify all since multiple *lock_shared*() calls may be able','line_number':343,'multiline':False]
['text':' to proceed in response to this notification','line_number':344,'multiline':False]
['text':' Shared ownership','line_number':348,'multiline':False]
['text':' thread_v2','line_number':426,'multiline':False]
['text':' boost','line_number':427,'multiline':False]
['text':' the gate2_ condition variable is only used by functions that','line_number':440,'multiline':False]
['text':' have taken write_entered_ but are waiting for no_readers()','line_number':441,'multiline':False]
['text':'return (state_ & (write_entered_ | upgradable_entered_)) == 0 &&','line_number':472,'multiline':False]
['text':'       (state_ & n_readers_) == 0;','line_number':473,'multiline':False]
['text':'return (state_ & (write_entered_ | upgradable_entered_)) == 0 &&','line_number':479,'multiline':False]
['text':'       (state_ & n_readers_) == 1;','line_number':480,'multiline':False]
['text':' Exclusive ownership','line_number':522,'multiline':False]
['text':' Shared ownership','line_number':542,'multiline':False]
['text':' Upgrade ownership','line_number':562,'multiline':False]
['text':' Shared <-> Exclusive','line_number':583,'multiline':False]
['text':'bool unlock_shared_and_lock(); // can cause a deadlock if used','line_number':586,'multiline':False]
['text':' Shared <-> Upgrade','line_number':602,'multiline':False]
['text':'bool unlock_shared_and_lock_upgrade(); // can cause a deadlock if used','line_number':605,'multiline':False]
['text':' Upgrade <-> Exclusive','line_number':621,'multiline':False]
['text':' Exclusive ownership','line_number':651,'multiline':False]
['text':' notify all since multiple *lock_shared*() calls and a *lock_upgrade*()','line_number':722,'multiline':False]
['text':' call may be able to proceed in response to this notification','line_number':723,'multiline':False]
['text':' Shared ownership','line_number':727,'multiline':False]
['text':' Upgrade ownership','line_number':805,'multiline':False]
['text':' notify all since both a *lock*() and a *lock_shared*() call','line_number':873,'multiline':False]
['text':' may be able to proceed in response to this notification','line_number':874,'multiline':False]
['text':' Shared <-> Exclusive','line_number':878,'multiline':False]
['text':' notify all since multiple *lock_shared*() calls and a *lock_upgrade*()','line_number':928,'multiline':False]
['text':' call may be able to proceed in response to this notification','line_number':929,'multiline':False]
['text':' Shared <-> Upgrade','line_number':933,'multiline':False]
['text':' notify all since only one *lock*() or *lock_upgrade*() call can win and','line_number':973,'multiline':False]
['text':' proceed in response to this notification, but a *lock_shared*() call may','line_number':974,'multiline':False]
['text':' also be waiting and could steal the notification','line_number':975,'multiline':False]
['text':' Upgrade <-> Exclusive','line_number':979,'multiline':False]
['text':' notify all since multiple *lock_shared*() calls may be able','line_number':1038,'multiline':False]
['text':' to proceed in response to this notification','line_number':1039,'multiline':False]
['text':' thread_v2','line_number':1043,'multiline':False]
['text':' boost','line_number':1044,'multiline':False]
['text':'using thread_v2::shared_mutex;','line_number':1047,'multiline':False]
