['text':'  basic_timed_mutex_win32.hpp','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'  (C) Copyright 2006-8 Anthony Williams','line_number':6,'multiline':False]
['text':'  (C) Copyright 2011-2012 Vicente J. Botet Escriba','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':9,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':10,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':' Take the lock flag if it's available','line_number':64,'multiline':False]
['text':' Loop until the number of waiters has been incremented or we've taken the lock flag','line_number':94,'multiline':False]
['text':' The loop is necessary since this function may be called by multiple threads simultaneously','line_number':95,'multiline':False]
['text':' else we've taken the lock flag','line_number':107,'multiline':False]
['text':' don't update old_count so that the calling function can see that','line_number':108,'multiline':False]
['text':' the old lock flag was 0 and know that we've taken the lock flag','line_number':109,'multiline':False]
['text':' Loop until someone else has taken the lock flag and cleared the event set flag or','line_number':116,'multiline':False]
['text':' until we've taken the lock flag and cleared the event set flag and decremented the','line_number':117,'multiline':False]
['text':' number of waiters','line_number':118,'multiline':False]
['text':' The loop is necessary since this function may be called by multiple threads simultaneously','line_number':119,'multiline':False]
['text':' if someone else has taken the lock flag','line_number':130,'multiline':False]
['text':' no need to update old_count since old_count == new_count (ignoring','line_number':131,'multiline':False]
['text':' event_set_flag_value which the calling function doesn't care about)','line_number':132,'multiline':False]
['text':' else we've taken the lock flag','line_number':133,'multiline':False]
['text':' don't update old_count so that the calling function can see that','line_number':134,'multiline':False]
['text':' the old lock flag was 0 and know that we've taken the lock flag','line_number':135,'multiline':False]
['text':' If the clock is the system clock, it may jump while this function','line_number':169,'multiline':False]
['text':' is waiting. To compensate for this and time out near the correct','line_number':170,'multiline':False]
['text':' time, we call WaitForSingleObjectEx() in a loop with a short','line_number':171,'multiline':False]
['text':' timeout and recheck the time remaining each time through the loop.','line_number':172,'multiline':False]
['text':' timeout occurred','line_number':176,'multiline':False]
['text':' The reference clock is steady and so no need to poll periodically, thus 0 ms max (i.e. no max)','line_number':207,'multiline':False]
['text':' The reference clock is steady and so no need to poll periodically, thus 0 ms max (i.e. no max)','line_number':223,'multiline':False]
['text':' The reference clock is steady and so no need to poll periodically, thus 0 ms max (i.e. no max)','line_number':230,'multiline':False]
['text':' Clear the lock flag using atomic addition (works since long is always 32 bits on Windows)','line_number':243,'multiline':False]
['text':' If someone is waiting to take the lock, set the event set flag and, if','line_number':245,'multiline':False]
['text':' the event set flag hadn't already been set, send an event.','line_number':246,'multiline':False]
['text':' Create an event in a thread-safe way','line_number':257,'multiline':False]
['text':' The first thread to create the event wins and all other thread will use that event','line_number':258,'multiline':False]
