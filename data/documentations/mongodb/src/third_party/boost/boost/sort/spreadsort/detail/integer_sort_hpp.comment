['text':' Details for templated Spreadsort-based integer_sort.','line_number':1,'multiline':False]
['text':'          Copyright Steven J. Ross 2001 - 2014.','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/sort for library home page.','line_number':8,'multiline':False]
['text':'
Some improvements suggested by:
Phil Endecott and Frank Gennari
','line_number':10,'multiline':True]
['text':' Return true if the list is sorted.  Otherwise, find the minimum and','line_number':31,'multiline':False]
['text':' maximum using <.','line_number':32,'multiline':False]
['text':'This assumes we have more than 1 element based on prior checks.','line_number':39,'multiline':False]
['text':'If everything is in sorted order, return','line_number':41,'multiline':False]
['text':'The maximum is the last sorted element','line_number':46,'multiline':False]
['text':'Start from the first unsorted element','line_number':48,'multiline':False]
['text':' Return true if the list is sorted.  Otherwise, find the minimum and','line_number':58,'multiline':False]
['text':' maximum.','line_number':59,'multiline':False]
['text':' Use a user-defined comparison operator','line_number':60,'multiline':False]
['text':'If everything is in sorted order, return','line_number':68,'multiline':False]
['text':'The maximum is the last sorted element','line_number':73,'multiline':False]
['text':'Gets a non-negative right bit shift to operate as a logarithmic divisor','line_number':84,'multiline':False]
['text':'If we can finish in one iteration without exceeding either','line_number':90,'multiline':False]
['text':'(2 to the max_finishing_splits) or n bins, do so','line_number':91,'multiline':False]
['text':'otherwise divide the data into an optimized number of pieces','line_number':96,'multiline':False]
['text':'Cannot exceed max_splits or cache misses slow down bin lookups','line_number':98,'multiline':False]
['text':'Implementation for recursive integer sorting','line_number':105,'multiline':False]
['text':'This step is roughly 10% of runtime, but it helps avoid worst-case','line_number':112,'multiline':False]
['text':'behavior and improve behavior with real data','line_number':113,'multiline':False]
['text':'If you know the maximum and minimum ahead of time, you can pass those','line_number':114,'multiline':False]
['text':'values in and skip this step for the first iteration','line_number':115,'multiline':False]
['text':'Calculating the size of each bin; this takes roughly 10% of runtime','line_number':129,'multiline':False]
['text':'Assign the bin positions','line_number':132,'multiline':False]
['text':'Swap into place','line_number':138,'multiline':False]
['text':'This dominates runtime, mostly in the swap and bin lookups','line_number':139,'multiline':False]
['text':'Iterating over each element in this bin','line_number':143,'multiline':False]
['text':'Swapping elements in current into place until the correct','line_number':146,'multiline':False]
['text':'element has been swapped in','line_number':147,'multiline':False]
['text':'3-way swap; this is about 1% faster than a 2-way swap','line_number':151,'multiline':False]
['text':'The main advantage is less copies are involved per item','line_number':152,'multiline':False]
['text':'put in the correct place','line_number':153,'multiline':False]
['text':'If we've bucketsorted, the array is sorted and we should skip recursion','line_number':172,'multiline':False]
['text':'log_divisor is the remaining range; calculating the comparison threshold','line_number':175,'multiline':False]
['text':'Recursing','line_number':180,'multiline':False]
['text':'don't sort unless there are at least two items to Compare','line_number':185,'multiline':False]
['text':'using boost::sort::pdqsort if its worst-case is better','line_number':188,'multiline':False]
['text':'Generic bitshift-based 3-way swapping code','line_number':200,'multiline':False]
['text':'Three-way swap; if the item to be swapped doesn't belong','line_number':217,'multiline':False]
['text':'in the current bin, swap it to where it belongs','line_number':218,'multiline':False]
['text':'Note: we could increment current once the swap is done in this case','line_number':224,'multiline':False]
['text':'but that seems to impair performance','line_number':225,'multiline':False]
['text':'Standard swapping wrapper for ascending values','line_number':235,'multiline':False]
['text':'Functor implementation for recursive sorting','line_number':247,'multiline':False]
['text':'Calculating the size of each bin','line_number':268,'multiline':False]
['text':'Swap into place','line_number':275,'multiline':False]
['text':'If we've bucketsorted, the array is sorted','line_number':282,'multiline':False]
['text':'Recursing','line_number':286,'multiline':False]
['text':'Functor implementation for recursive sorting with only Shift overridden','line_number':304,'multiline':False]
['text':'Calculating the size of each bin','line_number':325,'multiline':False]
['text':'Swap into place','line_number':332,'multiline':False]
['text':'If we've bucketsorted, the array is sorted','line_number':339,'multiline':False]
['text':'Recursing','line_number':343,'multiline':False]
['text':'Holds the bin vector and makes the initial recursive call','line_number':361,'multiline':False]
['text':'Only use spreadsort if the integer can fit in a size_t','line_number':363,'multiline':False]
['text':'Holds the bin vector and makes the initial recursive call','line_number':374,'multiline':False]
['text':'Only use spreadsort if the integer can fit in a uintmax_t','line_number':376,'multiline':False]
['text':'defaulting to boost::sort::pdqsort when integer_sort won't work','line_number':390,'multiline':False]
['text':'Warning that we're using boost::sort::pdqsort, even though integer_sort was called','line_number':393,'multiline':False]
['text':'Same for the full functor version','line_number':399,'multiline':False]
['text':'Only use spreadsort if the integer can fit in a size_t','line_number':402,'multiline':False]
['text':'Only use spreadsort if the integer can fit in a uintmax_t','line_number':418,'multiline':False]
['text':'defaulting to boost::sort::pdqsort when integer_sort won't work','line_number':436,'multiline':False]
['text':'Warning that we're using boost::sort::pdqsort, even though integer_sort was called','line_number':440,'multiline':False]
['text':'Same for the right shift version','line_number':446,'multiline':False]
['text':'Only use spreadsort if the integer can fit in a size_t','line_number':448,'multiline':False]
['text':'Only use spreadsort if the integer can fit in a uintmax_t','line_number':463,'multiline':False]
['text':'defaulting to boost::sort::pdqsort when integer_sort won't work','line_number':480,'multiline':False]
['text':'Warning that we're using boost::sort::pdqsort, even though integer_sort was called','line_number':484,'multiline':False]
