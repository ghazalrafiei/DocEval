['text':' Contains get_min_count, the core optimization of the spreadsort algorithm.','line_number':1,'multiline':False]
['text':' Also has other helper functions commonly useful across variants.','line_number':2,'multiline':False]
['text':'          Copyright Steven J. Ross 2001 - 2014.','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' See http://www.boost.org/libs/sort for library home page.','line_number':9,'multiline':False]
['text':'
Some improvements suggested by:
Phil Endecott and Frank Gennari
','line_number':11,'multiline':True]
['text':'This only works on unsigned data types','line_number':32,'multiline':False]
['text':'The && is necessary on some compilers to avoid infinite loops','line_number':38,'multiline':False]
['text':'it doesn't significantly impair performance','line_number':39,'multiline':False]
['text':'Gets the minimum size to call spreadsort on to control worst-case runtime.','line_number':44,'multiline':False]
['text':'This is called for a set of bins, instead of bin-by-bin, to minimize','line_number':45,'multiline':False]
['text':'runtime overhead.','line_number':46,'multiline':False]
['text':'This could be replaced by a lookup table of sizeof(Div_type)*8 but this','line_number':47,'multiline':False]
['text':'function is more general.','line_number':48,'multiline':False]
['text':'Assuring that constants have valid settings','line_number':56,'multiline':False]
['text':'if we can complete in one iteration, do so','line_number':65,'multiline':False]
['text':'This first check allows the compiler to optimize never-executed code out','line_number':66,'multiline':False]
['text':'Return no smaller than a certain minimum limit','line_number':69,'multiline':False]
['text':'sum of n to n + x = ((x + 1) * (n + (n + x)))/2 + log_mean_bin_size','line_number':76,'multiline':False]
['text':'Calculating the required number of iterations, and returning','line_number':80,'multiline':False]
['text':'1 << (iteration_count + min_size)','line_number':81,'multiline':False]
['text':'Preventing overflow; this situation shouldn't occur','line_number':86,'multiline':False]
['text':'A quick division can calculate the worst-case runtime for larger ranges','line_number':91,'multiline':False]
['text':'the max_splits - 1 is used to calculate the ceiling of the division','line_number':93,'multiline':False]
['text':'Preventing overflow; this situation shouldn't occur','line_number':96,'multiline':False]
['text':'n(log_range)/max_splits + C, optimizing worst-case performance','line_number':99,'multiline':False]
['text':' Resizes the bin cache and bin sizes, and initializes each bin size to 0.','line_number':103,'multiline':False]
['text':' This generates the memory overhead to use in radix sorting.','line_number':104,'multiline':False]
['text':' Clear the bin sizes','line_number':110,'multiline':False]
['text':'Make sure there is space for the bins','line_number':113,'multiline':False]
