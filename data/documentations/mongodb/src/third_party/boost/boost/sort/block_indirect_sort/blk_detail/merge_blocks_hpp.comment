['text':'----------------------------------------------------------------------------','line_number':1,'multiline':False]
['text':'/ @file merge_blocks.hpp','line_number':2,'multiline':False]
['text':'/ @brief contains the class merge_blocks, which is part of the','line_number':3,'multiline':False]
['text':'/        block_indirect_sort algorithm','line_number':4,'multiline':False]
['text':'/','line_number':5,'multiline':False]
['text':'/ @author Copyright (c) 2016 Francisco Jose Tapia (fjtapia@gmail.com )\n','line_number':6,'multiline':False]
['text':'/         Distributed under the Boost Software License, Version 1.0.\n','line_number':7,'multiline':False]
['text':'/         ( See accompanying file LICENSE_1_0.txt or copy at','line_number':8,'multiline':False]
['text':'/           http://www.boost.org/LICENSE_1_0.txt  )','line_number':9,'multiline':False]
['text':'/ @version 0.1','line_number':10,'multiline':False]
['text':'/','line_number':11,'multiline':False]
['text':'/ @remarks','line_number':12,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':13,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':30,'multiline':False]
['text':'                          USING SENTENCES','line_number':31,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':32,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':'/---------------------------------------------------------------------------','line_number':39,'multiline':False]
['text':'/ @struct merge_blocks','line_number':40,'multiline':False]
['text':'/ @brief This class merge the blocks. The blocks to merge are defined by two','line_number':41,'multiline':False]
['text':'/        ranges of positions in the index of the backbone','line_number':42,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':43,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':47,'multiline':False]
['text':'                  D E F I N I T I O N S','line_number':48,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':49,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':59,'multiline':False]
['text':'                V A R I A B L E S','line_number':60,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':61,'multiline':False]
['text':' Object with the elements to sort and all internal data structures of the','line_number':62,'multiline':False]
['text':' algorithm','line_number':63,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':66,'multiline':False]
['text':'                F U N C T I O N S','line_number':67,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':68,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':81,'multiline':False]
['text':'  function : function_merge_range_pos','line_number':82,'multiline':False]
['text':'/ @brief create a function_t with a call to merge_range_pos, and insert','line_number':83,'multiline':False]
['text':'/        in the stack of the backbone','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':'/ @param rng_input : range of positions of blocks in the index to merge','line_number':86,'multiline':False]
['text':'/ @param son_counter : atomic variable which is decremented when finish','line_number':87,'multiline':False]
['text':'/                      the function. This variable is used for to know','line_number':88,'multiline':False]
['text':'/                      when are finished all the function_t created','line_number':89,'multiline':False]
['text':'/                      inside an object','line_number':90,'multiline':False]
['text':'/ @param error : global indicator of error.','line_number':91,'multiline':False]
['text':'/','line_number':92,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':93,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':117,'multiline':False]
['text':'  function : function_cut_range','line_number':118,'multiline':False]
['text':'/ @brief create a function_t with a call to cut_range, and inser in','line_number':119,'multiline':False]
['text':'/        the stack of the backbone','line_number':120,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':'/ @param rng_input : range of positions in the index to cut','line_number':122,'multiline':False]
['text':'/ @param counter : atomic variable which is decremented when finish','line_number':123,'multiline':False]
['text':'/                  the function. This variable is used for to know','line_number':124,'multiline':False]
['text':'/                  when are finished all the function_t created','line_number':125,'multiline':False]
['text':'/                  inside an object','line_number':126,'multiline':False]
['text':'/ @param error : global indicator of error.','line_number':127,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':128,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':152,'multiline':False]
['text':' end struct merge_blocks','line_number':154,'multiline':False]
['text':'----------------------------------------------------------------------------','line_number':155,'multiline':False]
['text':'','line_number':156,'multiline':False]
['text':'############################################################################','line_number':157,'multiline':False]
['text':'                                                                          ##','line_number':158,'multiline':False]
['text':'                                                                          ##','line_number':159,'multiline':False]
['text':'            N O N     I N L I N E      F U N C T I O N S                  ##','line_number':160,'multiline':False]
['text':'                                                                          ##','line_number':161,'multiline':False]
['text':'                                                                          ##','line_number':162,'multiline':False]
['text':'############################################################################','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':165,'multiline':False]
['text':'  function : merge_blocks','line_number':166,'multiline':False]
['text':'/ @brief make the indirect merge of the two range_pos defined by their index','line_number':167,'multiline':False]
['text':'/        position [pos_index1, pos_index2 ) and [ pos_index2, pos_index3 )','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':'/ @param bkb : backbone with all the data to sort , and the internal data','line_number':170,'multiline':False]
['text':'/              structures of the algorithm','line_number':171,'multiline':False]
['text':'/ @param pos_index1 : first position of the first range in the index','line_number':172,'multiline':False]
['text':'/ @param pos_index2 : last position of the first range and first position','line_number':173,'multiline':False]
['text':'/                     of the second range in the index','line_number':174,'multiline':False]
['text':'/ @param pos_index3 : last position of the second range in the index','line_number':175,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':176,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':186,'multiline':False]
['text':' Merging of the two intervals','line_number':187,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':188,'multiline':False]
['text':'-------------------------------------------------------------------','line_number':202,'multiline':False]
['text':'  tail process','line_number':203,'multiline':False]
['text':'-------------------------------------------------------------------','line_number':204,'multiline':False]
['text':' Extracting the ranges for to merge the elements','line_number':218,'multiline':False]
['text':'','line_number':223,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':224,'multiline':False]
['text':'  function : tail_process','line_number':225,'multiline':False]
['text':'/ @brief make the process when the second vector of block_pos to merge is','line_number':226,'multiline':False]
['text':'/        the last, and have an incomplete block ( tail)','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':'/ @param vblkpos1 : first vector of block_pos elements to merge','line_number':229,'multiline':False]
['text':'/ @param vblkpos2 : second vector of block_pos elements to merge','line_number':230,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':231,'multiline':False]
['text':'','line_number':262,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':263,'multiline':False]
['text':'  function : cut_range','line_number':264,'multiline':False]
['text':'/ @brief when the rng_input is greather than Group_size, this function divide','line_number':265,'multiline':False]
['text':'/        it in several parts creating function_t elements, which are inserted','line_number':266,'multiline':False]
['text':'/        in the concurrent stack of the backbone','line_number':267,'multiline':False]
['text':'','line_number':268,'multiline':False]
['text':'/ @param rng_input : range to divide','line_number':269,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':270,'multiline':False]
['text':' wait until finish all the ranges','line_number':310,'multiline':False]
['text':'','line_number':314,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':315,'multiline':False]
['text':'  function : merge_range_pos','line_number':316,'multiline':False]
['text':'/ @brief make the indirect merge of the blocks inside the rng_input','line_number':317,'multiline':False]
['text':'','line_number':318,'multiline':False]
['text':'/ @param rng_input : range of positions of the blocks to merge','line_number':319,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':320,'multiline':False]
['text':'','line_number':341,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':342,'multiline':False]
['text':'  function : extract_ranges','line_number':343,'multiline':False]
['text':'/ @brief from a big range of positions of blocks in the index. Examine which','line_number':344,'multiline':False]
['text':'/        are mergeable, and generate a couple of ranges for to be merged.','line_number':345,'multiline':False]
['text':'/        With the ranges obtained generate function_t elements and are','line_number':346,'multiline':False]
['text':'/        inserted in the concurrent stack.','line_number':347,'multiline':False]
['text':'/        When the range obtained is smaller than Group_size, generate a','line_number':348,'multiline':False]
['text':'/        function_t calling to merge_range_pos, when is greater, generate a','line_number':349,'multiline':False]
['text':'/        function_t calling to cut_range','line_number':350,'multiline':False]
['text':'','line_number':351,'multiline':False]
['text':'/ @param rpos range_input : range of the position in the index, where must','line_number':352,'multiline':False]
['text':'/                           extract the ranges to merge','line_number':353,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':354,'multiline':False]
['text':' The names with x are positions of the index','line_number':362,'multiline':False]
['text':'','line_number':419,'multiline':False]
['text':'****************************************************************************','line_number':420,'multiline':False]
['text':'    End namespace blk_detail','line_number':421,'multiline':False]
['text':'    End namespace sort','line_number':422,'multiline':False]
['text':'    End namespace boost','line_number':423,'multiline':False]
['text':'****************************************************************************','line_number':424,'multiline':False]
['text':'','line_number':425,'multiline':False]
