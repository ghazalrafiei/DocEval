['text':'
 *
 * Copyright (c) 2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]
['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         perl_matcher_common.cpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Definitions of perl_matcher member functions that are 
  *                specific to the non-recursive implementation.
  ','line_number':12,'multiline':True]
['text':' warning suppression','line_number':49,'multiline':False]
['text':' this padding ensures correct alignment on 64-bit platforms:','line_number':57,'multiline':False]
['text':' Although this next line *should* be evaluated at compile time, in practice','line_number':185,'multiline':False]
['text':' some compilers (VC++) emit run-time initialisation which breaks thread','line_number':186,'multiline':False]
['text':' safety, so use a dispatch function instead:','line_number':187,'multiline':False]
['text':'(::boost::is_random_access_iterator<BidiIterator>::value ? &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_fast : &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_slow),','line_number':188,'multiline':False]
['text':'BOOST_REGEX_ASSERT(index);','line_number':251,'multiline':False]
['text':'BOOST_REGEX_ASSERT(index);','line_number':267,'multiline':False]
['text':' change our case sensitivity:','line_number':388,'multiline':False]
['text':' forward lookahead assert:','line_number':408,'multiline':False]
['text':' independent sub-expression, currently this is always recursive:','line_number':416,'multiline':False]
['text':' Must be unwinding from a COMMIT/SKIP/PRUNE and the independent ','line_number':428,'multiline':False]
['text':' sub failed, need to unwind everything else:','line_number':429,'multiline':False]
['text':' unwind all pushed states, apart from anything else this','line_number':438,'multiline':False]
['text':' ensures that all the states are correctly destructed','line_number':439,'multiline':False]
['text':' not just the memory freed.','line_number':440,'multiline':False]
['text':'','line_number':450,'multiline':False]
['text':' our captures have been stored in *m_presult','line_number':451,'multiline':False]
['text':' we need to unpack them, and insert them','line_number':452,'multiline':False]
['text':' back in the right order when we unwind the stack:','line_number':453,'multiline':False]
['text':'','line_number':454,'multiline':False]
['text':' match everything else:','line_number':459,'multiline':False]
['text':' unwind all pushed states, apart from anything else this','line_number':469,'multiline':False]
['text':' ensures that all the states are correctly destructed','line_number':470,'multiline':False]
['text':' not just the memory freed.','line_number':471,'multiline':False]
['text':' now place the stored captures back:','line_number':476,'multiline':False]
['text':' conditional expression:','line_number':493,'multiline':False]
['text':' zero width assertion, have to match this recursively:','line_number':505,'multiline':False]
['text':' unwind all pushed states, apart from anything else this','line_number':527,'multiline':False]
['text':' ensures that all the states are correctly destructed','line_number':528,'multiline':False]
['text':' not just the memory freed.','line_number':529,'multiline':False]
['text':' find out which of these two alternatives we need to take:','line_number':565,'multiline':False]
['text':' we can take the first alternative,','line_number':579,'multiline':False]
['text':' see if we need to push next alternative:','line_number':580,'multiline':False]
['text':' neither option is possible','line_number':593,'multiline':False]
['text':' find out which of these two alternatives we need to take:','line_number':608,'multiline':False]
['text':' we're moving to a different repeat from the last','line_number':625,'multiline':False]
['text':' one, so set up a counter object:','line_number':626,'multiline':False]
['text':'','line_number':629,'multiline':False]
['text':' If we've had at least one repeat already, and the last one ','line_number':630,'multiline':False]
['text':' matched the NULL string then set the repeat count to','line_number':631,'multiline':False]
['text':' maximum:','line_number':632,'multiline':False]
['text':'','line_number':633,'multiline':False]
['text':' we must take the repeat:','line_number':638,'multiline':False]
['text':' increase the counter:','line_number':641,'multiline':False]
['text':' try and take the repeat if we can:','line_number':652,'multiline':False]
['text':' store position in case we fail:','line_number':657,'multiline':False]
['text':' increase the counter:','line_number':660,'multiline':False]
['text':' can't take anything, fail...','line_number':670,'multiline':False]
['text':' non-greedy','line_number':672,'multiline':False]
['text':' try and skip the repeat if we can:','line_number':674,'multiline':False]
['text':' store position in case we fail:','line_number':679,'multiline':False]
['text':' increase the counter:','line_number':687,'multiline':False]
['text':' match compulsory repeats first:','line_number':708,'multiline':False]
['text':' repeat for as long as we can:','line_number':719,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':727,'multiline':False]
['text':' push backtrack info if available:','line_number':730,'multiline':False]
['text':' jump to next state:','line_number':733,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':739,'multiline':False]
['text':' not enough text left to match','line_number':761,'multiline':False]
['text':' push backtrack info if available:','line_number':769,'multiline':False]
['text':' jump to next state:','line_number':772,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':778,'multiline':False]
['text':'','line_number':800,'multiline':False]
['text':' start by working out how much we can skip:','line_number':801,'multiline':False]
['text':'','line_number':802,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':808,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':809,'multiline':False]
['text':' push backtrack info if available:','line_number':838,'multiline':False]
['text':' jump to next state:','line_number':841,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':847,'multiline':False]
['text':'','line_number':874,'multiline':False]
['text':' start by working out how much we can skip:','line_number':875,'multiline':False]
['text':'','line_number':876,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':882,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':883,'multiline':False]
['text':' push backtrack info if available:','line_number':912,'multiline':False]
['text':' jump to next state:','line_number':915,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':921,'multiline':False]
['text':'','line_number':949,'multiline':False]
['text':' start by working out how much we can skip:','line_number':950,'multiline':False]
['text':'','line_number':951,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':957,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':958,'multiline':False]
['text':' push backtrack info if available:','line_number':987,'multiline':False]
['text':' jump to next state:','line_number':990,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':996,'multiline':False]
['text':'','line_number':1014,'multiline':False]
['text':' See if we've seen this recursion before at this location, if we have then','line_number':1015,'multiline':False]
['text':' we need to prevent infinite recursion:','line_number':1016,'multiline':False]
['text':'','line_number':1017,'multiline':False]
['text':'','line_number':1027,'multiline':False]
['text':' Backup call stack:','line_number':1028,'multiline':False]
['text':'','line_number':1029,'multiline':False]
['text':'','line_number':1031,'multiline':False]
['text':' Set new call stack:','line_number':1032,'multiline':False]
['text':'','line_number':1033,'multiline':False]
['text':'if(static_cast<const re_recurse*>(pstate)->state_id > 0)','line_number':1044,'multiline':False]
['text':' matched forward lookahead:','line_number':1077,'multiline':False]
['text':' Ideally we would just junk all the states that are on the stack,','line_number':1126,'multiline':False]
['text':' however we might not unwind correctly in that case, so for now,','line_number':1127,'multiline':False]
['text':' just mark that we don't backtrack into whatever is left (or rather','line_number':1128,'multiline':False]
['text':' we'll unwind it unconditionally without pausing to try other matches).','line_number':1129,'multiline':False]
['text':' Have to decrement restart since it will get incremented again later:','line_number':1140,'multiline':False]
['text':' Just leave a mark that we need to skip to next alternative:','line_number':1165,'multiline':False]
['text':' Unenclosed closing ), occurs when (*ACCEPT) is inside some other ','line_number':1196,'multiline':False]
['text':' parenthesis which may or may not have other side effects associated with it.','line_number':1197,'multiline':False]
['text':' unwind may leave pstate NULL if we've unwound a forward lookahead, in which','line_number':1203,'multiline':False]
['text':' case just move to the next state and keep looking...','line_number':1204,'multiline':False]
['text':'***************************************************************************

Unwind and associated procedures follow, these perform what normal stack
unwinding does in the recursive implementation.

***************************************************************************','line_number':1225,'multiline':True]
['text':'','line_number':1263,'multiline':False]
['text':' keep unwinding our stack until we have something to do:','line_number':1264,'multiline':False]
['text':'','line_number':1265,'multiline':False]
['text':'','line_number':1271,'multiline':False]
['text':' return true if we have more states to try:','line_number':1272,'multiline':False]
['text':'','line_number':1273,'multiline':False]
['text':' nothing left to search','line_number':1280,'multiline':False]
['text':' end of stack nothing more to search','line_number':1281,'multiline':False]
['text':' restore previous values if no match was found:','line_number':1298,'multiline':False]
['text':'','line_number':1305,'multiline':False]
['text':' we have a match, push the capture information onto the stack:','line_number':1306,'multiline':False]
['text':'','line_number':1307,'multiline':False]
['text':' unwind stack:','line_number':1311,'multiline':False]
['text':' keep looking','line_number':1314,'multiline':False]
['text':' nothing left to search','line_number':1321,'multiline':False]
['text':' end of stack nothing more to search','line_number':1322,'multiline':False]
['text':' return false if the assertion was matched to stop search.','line_number':1336,'multiline':False]
['text':' keep looking','line_number':1361,'multiline':False]
['text':' keep looking','line_number':1373,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1389,'multiline':False]
['text':' backtrack till we can skip out:','line_number':1409,'multiline':False]
['text':' if we've hit base, destroy this state:','line_number':1417,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1438,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1458,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1463,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1474,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1483,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1502,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1517,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1526,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1531,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1540,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1559,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1580,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1585,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1595,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1600,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1609,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1628,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1649,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1654,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1664,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1669,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1678,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1698,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1719,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1724,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1734,'multiline':False]
['text':' can't repeat any more, remove the pushed state:','line_number':1739,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1748,'multiline':False]
['text':' We are backtracking back inside a recursion, need to push the info','line_number':1780,'multiline':False]
['text':' back onto the recursion stack, and do so unconditionally, otherwise','line_number':1781,'multiline':False]
['text':' we can get mismatched pushes and pops...','line_number':1782,'multiline':False]
['text':' Backtracking out of a recursion, we must pop state off the recursion','line_number':1801,'multiline':False]
['text':' stack unconditionally to ensure matched pushes and pops:','line_number':1802,'multiline':False]
['text':'','line_number':1837,'multiline':False]
['text':' If we stop because we just unwound an assertion, put the','line_number':1838,'multiline':False]
['text':' commit state back on the stack again:','line_number':1839,'multiline':False]
['text':'','line_number':1840,'multiline':False]
['text':' This prevents us from stopping when we exit from an independent sub-expression:','line_number':1853,'multiline':False]
['text':' Unwind everything till we hit an alternative:','line_number':1861,'multiline':False]
['text':' We're now pointing at the next alternative, need one more backtrack ','line_number':1865,'multiline':False]
['text':' since *all* the other alternatives must fail once we've reached a THEN clause:','line_number':1866,'multiline':False]
['text':'
template <class BidiIterator, class Allocator, class traits>
bool perl_matcher<BidiIterator, Allocator, traits>::unwind_parenthesis_pop(bool r)
{
   saved_state* pmp = static_cast<saved_state*>(m_backup_state);
   if(!r)
   {
      --parenthesis_stack_position;
   }
   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
   m_backup_state = pmp;
   return true;
}

template <class BidiIterator, class Allocator, class traits>
void perl_matcher<BidiIterator, Allocator, traits>::push_parenthesis_pop()
{
   saved_state* pmp = static_cast<saved_state*>(m_backup_state);
   --pmp;
   if(pmp < m_stack_base)
   {
      extend_stack();
      pmp = static_cast<saved_state*>(m_backup_state);
      --pmp;
   }
   (void) new (pmp)saved_state(16);
   m_backup_state = pmp;
}

template <class BidiIterator, class Allocator, class traits>
bool perl_matcher<BidiIterator, Allocator, traits>::unwind_parenthesis_push(bool r)
{
   saved_position<BidiIterator>* pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
   if(!r)
   {
      parenthesis_stack[parenthesis_stack_position++] = pmp->position;
   }
   boost::BOOST_REGEX_DETAIL_NS::inplace_destroy(pmp++);
   m_backup_state = pmp;
   return true;
}

template <class BidiIterator, class Allocator, class traits>
inline void perl_matcher<BidiIterator, Allocator, traits>::push_parenthesis_push(BidiIterator p)
{
   saved_position<BidiIterator>* pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
   --pmp;
   if(pmp < m_stack_base)
   {
      extend_stack();
      pmp = static_cast<saved_position<BidiIterator>*>(m_backup_state);
      --pmp;
   }
   (void) new (pmp)saved_position<BidiIterator>(0, p, 17);
   m_backup_state = pmp;
}
','line_number':1872,'multiline':True]
['text':' namespace BOOST_REGEX_DETAIL_NS','line_number':1929,'multiline':False]
['text':' namespace boost','line_number':1930,'multiline':False]
