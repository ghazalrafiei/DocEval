['text':'
 *
 * Copyright (c) 1998-2009 John Maddock
 * Copyright 2008 Eric Niebler. 
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]
['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         regex_format.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Provides formatting output routines for search and replace
  *                operations.  Note this is an internal header file included
  *                by regex.hpp, do not include on its own.
  ','line_number':12,'multiline':True]
['text':'','line_number':29,'multiline':False]
['text':' Forward declaration:','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' struct trivial_format_traits:','line_number':38,'multiline':False]
['text':' defines minimum localisation support for formatting','line_number':39,'multiline':False]
['text':' in the case that the actual regex traits is unavailable.','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':' msvc-8.0 issues a spurious warning on the call to std::advance here:','line_number':138,'multiline':False]
['text':' Workaround for Intel support issue #656654.','line_number':165,'multiline':False]
['text':' See also https://svn.boost.org/trac/boost/ticket/6359','line_number':166,'multiline':False]
['text':' the traits class for localised formatting operations','line_number':174,'multiline':False]
['text':' the match_results being used.','line_number':175,'multiline':False]
['text':' where to send output.','line_number':176,'multiline':False]
['text':' format string, current position','line_number':177,'multiline':False]
['text':' format string end','line_number':178,'multiline':False]
['text':' format flags to use','line_number':179,'multiline':False]
['text':' what to do with the next character','line_number':180,'multiline':False]
['text':' what state to restore to.','line_number':181,'multiline':False]
['text':' we are parsing a conditional','line_number':182,'multiline':False]
['text':' over and over:','line_number':204,'multiline':False]
['text':' skip the closing ')'','line_number':232,'multiline':False]
['text':' not a special character:','line_number':270,'multiline':False]
['text':'','line_number':283,'multiline':False]
['text':' On entry *m_position points to a '$' character','line_number':284,'multiline':False]
['text':' output the information that goes with it:','line_number':285,'multiline':False]
['text':'','line_number':286,'multiline':False]
['text':'','line_number':288,'multiline':False]
['text':' see if this is a trailing '$':','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':'','line_number':298,'multiline':False]
['text':' OK find out what kind it is:','line_number':299,'multiline':False]
['text':'','line_number':300,'multiline':False]
['text':' Named sub-expression:','line_number':327,'multiline':False]
['text':' see if we have a number:','line_number':344,'multiline':False]
['text':'len = (std::min)(static_cast<std::ptrdiff_t>(2), len);','line_number':347,'multiline':False]
['text':' Look for a Perl-5.10 verb:','line_number':351,'multiline':False]
['text':' leave the $ as is, and carry on:','line_number':354,'multiline':False]
['text':' otherwise output sub v:','line_number':361,'multiline':False]
['text':' ','line_number':372,'multiline':False]
['text':' We may have a capitalised string containing a Perl action:','line_number':373,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':' skip the escape and check for trailing escape:','line_number':491,'multiline':False]
['text':' now switch on the escape type:','line_number':497,'multiline':False]
['text':' maybe have \x{ddd}','line_number':530,'multiline':False]
['text':' invalid value treat everything as literals:','line_number':537,'multiline':False]
['text':' see if we have a perl specific escape:','line_number':583,'multiline':False]
['text':' see if we have a \n sed style backreference:','line_number':620,'multiline':False]
['text':' octal ecape sequence:','line_number':631,'multiline':False]
['text':' Otherwise output the character "as is":','line_number':640,'multiline':False]
['text':' oops trailing '?':','line_number':651,'multiline':False]
['text':' Try a named subexpression:','line_number':663,'multiline':False]
['text':' oops trailing '?':','line_number':671,'multiline':False]
['text':' Skip trailing '}':','line_number':675,'multiline':False]
['text':' oops not a number:','line_number':686,'multiline':False]
['text':' output varies depending upon whether sub-expression v matched or not:','line_number':691,'multiline':False]
['text':' skip the ':':','line_number':699,'multiline':False]
['text':' save output state, then turn it off:','line_number':701,'multiline':False]
['text':' format the rest of this scope:','line_number':704,'multiline':False]
['text':' restore output state:','line_number':706,'multiline':False]
['text':' save output state, then turn it off:','line_number':712,'multiline':False]
['text':' format until ':' or ')':','line_number':715,'multiline':False]
['text':' restore state:','line_number':719,'multiline':False]
['text':' skip the ':':','line_number':723,'multiline':False]
['text':' format the rest of this scope:','line_number':725,'multiline':False]
['text':' write a single character to output','line_number':746,'multiline':False]
['text':' according to which case translation mode we are in:','line_number':747,'multiline':False]
['text':'','line_number':921,'multiline':False]
['text':' F must be a pointer, a function, or a class with a function call operator:','line_number':922,'multiline':False]
['text':'','line_number':923,'multiline':False]
['text':' ','line_number':937,'multiline':False]
['text':' Type is std::integral_constant<int, N> where N is one of:','line_number':938,'multiline':False]
['text':'','line_number':939,'multiline':False]
['text':' 0 : F is a pointer to a presumably null-terminated string.','line_number':940,'multiline':False]
['text':' 1 : F is a character-container such as a std::string.','line_number':941,'multiline':False]
['text':' 2 : F is a Unary Functor.','line_number':942,'multiline':False]
['text':' 3 : F is a Binary Functor.','line_number':943,'multiline':False]
['text':' 4 : F is a Ternary Functor.','line_number':944,'multiline':False]
['text':'','line_number':945,'multiline':False]
['text':'','line_number':955,'multiline':False]
['text':' This static assertion will fail if the functor passed does not accept','line_number':956,'multiline':False]
['text':' the same type of arguments passed.','line_number':957,'multiline':False]
['text':'','line_number':958,'multiline':False]
['text':'f','line_number':987,'multiline':True]
['text':'f','line_number':1024,'multiline':True]
['text':'typedef typename Match::char_type char_type;','line_number':1047,'multiline':False]
['text':'typedef typename Match::char_type char_type;','line_number':1066,'multiline':False]
['text':' namespace BOOST_REGEX_DETAIL_NS','line_number':1096,'multiline':False]
['text':' namespace boost','line_number':1116,'multiline':False]
['text':' BOOST_REGEX_FORMAT_HPP','line_number':1118,'multiline':False]
