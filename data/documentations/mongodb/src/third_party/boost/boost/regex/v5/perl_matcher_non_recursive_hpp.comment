['text':'
 *
 * Copyright (c) 2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]
['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         perl_matcher_common.cpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Definitions of perl_matcher member functions that are 
  *                specific to the non-recursive implementation.
  ','line_number':12,'multiline':True]
['text':' warning suppression','line_number':39,'multiline':False]
['text':' this padding ensures correct alignment on 64-bit platforms:','line_number':47,'multiline':False]
['text':' Although this next line *should* be evaluated at compile time, in practice','line_number':175,'multiline':False]
['text':' some compilers (VC++) emit run-time initialisation which breaks thread','line_number':176,'multiline':False]
['text':' safety, so use a dispatch function instead:','line_number':177,'multiline':False]
['text':'(::boost::is_random_access_iterator<BidiIterator>::value ? &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_fast : &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_slow),','line_number':178,'multiline':False]
['text':'BOOST_REGEX_ASSERT(index);','line_number':241,'multiline':False]
['text':'BOOST_REGEX_ASSERT(index);','line_number':257,'multiline':False]
['text':' change our case sensitivity:','line_number':378,'multiline':False]
['text':' forward lookahead assert:','line_number':398,'multiline':False]
['text':' independent sub-expression, currently this is always recursive:','line_number':406,'multiline':False]
['text':' Must be unwinding from a COMMIT/SKIP/PRUNE and the independent ','line_number':418,'multiline':False]
['text':' sub failed, need to unwind everything else:','line_number':419,'multiline':False]
['text':' unwind all pushed states, apart from anything else this','line_number':429,'multiline':False]
['text':' ensures that all the states are correctly destructed','line_number':430,'multiline':False]
['text':' not just the memory freed.','line_number':431,'multiline':False]
['text':'','line_number':441,'multiline':False]
['text':' our captures have been stored in *m_presult','line_number':442,'multiline':False]
['text':' we need to unpack them, and insert them','line_number':443,'multiline':False]
['text':' back in the right order when we unwind the stack:','line_number':444,'multiline':False]
['text':'','line_number':445,'multiline':False]
['text':' match everything else:','line_number':450,'multiline':False]
['text':' unwind all pushed states, apart from anything else this','line_number':460,'multiline':False]
['text':' ensures that all the states are correctly destructed','line_number':461,'multiline':False]
['text':' not just the memory freed.','line_number':462,'multiline':False]
['text':' now place the stored captures back:','line_number':467,'multiline':False]
['text':' conditional expression:','line_number':484,'multiline':False]
['text':' zero width assertion, have to match this recursively:','line_number':496,'multiline':False]
['text':' unwind all pushed states, apart from anything else this','line_number':518,'multiline':False]
['text':' ensures that all the states are correctly destructed','line_number':519,'multiline':False]
['text':' not just the memory freed.','line_number':520,'multiline':False]
['text':' find out which of these two alternatives we need to take:','line_number':556,'multiline':False]
['text':' we can take the first alternative,','line_number':570,'multiline':False]
['text':' see if we need to push next alternative:','line_number':571,'multiline':False]
['text':' neither option is possible','line_number':584,'multiline':False]
['text':' find out which of these two alternatives we need to take:','line_number':599,'multiline':False]
['text':' we're moving to a different repeat from the last','line_number':616,'multiline':False]
['text':' one, so set up a counter object:','line_number':617,'multiline':False]
['text':'','line_number':620,'multiline':False]
['text':' If we've had at least one repeat already, and the last one ','line_number':621,'multiline':False]
['text':' matched the NULL string then set the repeat count to','line_number':622,'multiline':False]
['text':' maximum:','line_number':623,'multiline':False]
['text':'','line_number':624,'multiline':False]
['text':' we must take the repeat:','line_number':629,'multiline':False]
['text':' increase the counter:','line_number':632,'multiline':False]
['text':' try and take the repeat if we can:','line_number':643,'multiline':False]
['text':' store position in case we fail:','line_number':648,'multiline':False]
['text':' increase the counter:','line_number':651,'multiline':False]
['text':' can't take anything, fail...','line_number':661,'multiline':False]
['text':' non-greedy','line_number':663,'multiline':False]
['text':' try and skip the repeat if we can:','line_number':665,'multiline':False]
['text':' store position in case we fail:','line_number':670,'multiline':False]
['text':' increase the counter:','line_number':678,'multiline':False]
['text':' match compulsory repeats first:','line_number':699,'multiline':False]
['text':' repeat for as long as we can:','line_number':710,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':718,'multiline':False]
['text':' push backtrack info if available:','line_number':721,'multiline':False]
['text':' jump to next state:','line_number':724,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':730,'multiline':False]
['text':' not enough text left to match','line_number':752,'multiline':False]
['text':' push backtrack info if available:','line_number':760,'multiline':False]
['text':' jump to next state:','line_number':763,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':769,'multiline':False]
['text':'','line_number':791,'multiline':False]
['text':' start by working out how much we can skip:','line_number':792,'multiline':False]
['text':'','line_number':793,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':799,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':800,'multiline':False]
['text':' push backtrack info if available:','line_number':829,'multiline':False]
['text':' jump to next state:','line_number':832,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':838,'multiline':False]
['text':'','line_number':865,'multiline':False]
['text':' start by working out how much we can skip:','line_number':866,'multiline':False]
['text':'','line_number':867,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':873,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':874,'multiline':False]
['text':' push backtrack info if available:','line_number':903,'multiline':False]
['text':' jump to next state:','line_number':906,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':912,'multiline':False]
['text':'','line_number':940,'multiline':False]
['text':' start by working out how much we can skip:','line_number':941,'multiline':False]
['text':'','line_number':942,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':948,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':949,'multiline':False]
['text':' push backtrack info if available:','line_number':978,'multiline':False]
['text':' jump to next state:','line_number':981,'multiline':False]
['text':' non-greedy, push state and return true if we can skip:','line_number':987,'multiline':False]
['text':'','line_number':1005,'multiline':False]
['text':' See if we've seen this recursion before at this location, if we have then','line_number':1006,'multiline':False]
['text':' we need to prevent infinite recursion:','line_number':1007,'multiline':False]
['text':'','line_number':1008,'multiline':False]
['text':'','line_number':1018,'multiline':False]
['text':' Backup call stack:','line_number':1019,'multiline':False]
['text':'','line_number':1020,'multiline':False]
['text':'','line_number':1022,'multiline':False]
['text':' Set new call stack:','line_number':1023,'multiline':False]
['text':'','line_number':1024,'multiline':False]
['text':'if(static_cast<const re_recurse*>(pstate)->state_id > 0)','line_number':1035,'multiline':False]
['text':' matched forward lookahead:','line_number':1068,'multiline':False]
['text':' Ideally we would just junk all the states that are on the stack,','line_number':1117,'multiline':False]
['text':' however we might not unwind correctly in that case, so for now,','line_number':1118,'multiline':False]
['text':' just mark that we don't backtrack into whatever is left (or rather','line_number':1119,'multiline':False]
['text':' we'll unwind it unconditionally without pausing to try other matches).','line_number':1120,'multiline':False]
['text':' Have to decrement restart since it will get incremented again later:','line_number':1131,'multiline':False]
['text':' Just leave a mark that we need to skip to next alternative:','line_number':1156,'multiline':False]
['text':' Unenclosed closing ), occurs when (*ACCEPT) is inside some other ','line_number':1187,'multiline':False]
['text':' parenthesis which may or may not have other side effects associated with it.','line_number':1188,'multiline':False]
['text':' unwind may leave pstate NULL if we've unwound a forward lookahead, in which','line_number':1194,'multiline':False]
['text':' case just move to the next state and keep looking...','line_number':1195,'multiline':False]
['text':'***************************************************************************

Unwind and associated procedures follow, these perform what normal stack
unwinding does in the recursive implementation.

***************************************************************************','line_number':1216,'multiline':True]
['text':'','line_number':1254,'multiline':False]
['text':' keep unwinding our stack until we have something to do:','line_number':1255,'multiline':False]
['text':'','line_number':1256,'multiline':False]
['text':'','line_number':1262,'multiline':False]
['text':' return true if we have more states to try:','line_number':1263,'multiline':False]
['text':'','line_number':1264,'multiline':False]
['text':' nothing left to search','line_number':1271,'multiline':False]
['text':' end of stack nothing more to search','line_number':1272,'multiline':False]
['text':' restore previous values if no match was found:','line_number':1289,'multiline':False]
['text':'','line_number':1296,'multiline':False]
['text':' we have a match, push the capture information onto the stack:','line_number':1297,'multiline':False]
['text':'','line_number':1298,'multiline':False]
['text':' unwind stack:','line_number':1302,'multiline':False]
['text':' keep looking','line_number':1305,'multiline':False]
['text':' nothing left to search','line_number':1312,'multiline':False]
['text':' end of stack nothing more to search','line_number':1313,'multiline':False]
['text':' return false if the assertion was matched to stop search.','line_number':1327,'multiline':False]
['text':' keep looking','line_number':1351,'multiline':False]
['text':' keep looking','line_number':1364,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1380,'multiline':False]
['text':' backtrack till we can skip out:','line_number':1400,'multiline':False]
['text':' if we've hit base, destroy this state:','line_number':1408,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1429,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1449,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1454,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1465,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1474,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1493,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1508,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1517,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1522,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1531,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1550,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1571,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1576,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1586,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1591,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1600,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1619,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1640,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1645,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1655,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1660,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1669,'multiline':False]
['text':' if we have a match, just discard this state:','line_number':1689,'multiline':False]
['text':' wind forward until we can skip out of the repeat:','line_number':1710,'multiline':False]
['text':' failed repeat match, discard this state and look for another:','line_number':1715,'multiline':False]
['text':' remember where we got to if this is a leading repeat:','line_number':1725,'multiline':False]
['text':' can't repeat any more, remove the pushed state:','line_number':1730,'multiline':False]
['text':' can't repeat any more, remove the pushed state: ','line_number':1739,'multiline':False]
['text':' We are backtracking back inside a recursion, need to push the info','line_number':1771,'multiline':False]
['text':' back onto the recursion stack, and do so unconditionally, otherwise','line_number':1772,'multiline':False]
['text':' we can get mismatched pushes and pops...','line_number':1773,'multiline':False]
['text':' Backtracking out of a recursion, we must pop state off the recursion','line_number':1792,'multiline':False]
['text':' stack unconditionally to ensure matched pushes and pops:','line_number':1793,'multiline':False]
['text':'','line_number':1828,'multiline':False]
['text':' If we stop because we just unwound an assertion, put the','line_number':1829,'multiline':False]
['text':' commit state back on the stack again:','line_number':1830,'multiline':False]
['text':'','line_number':1831,'multiline':False]
['text':' This prevents us from stopping when we exit from an independent sub-expression:','line_number':1844,'multiline':False]
['text':' Unwind everything till we hit an alternative:','line_number':1852,'multiline':False]
['text':' We're now pointing at the next alternative, need one more backtrack ','line_number':1860,'multiline':False]
['text':' since *all* the other alternatives must fail once we've reached a THEN clause:','line_number':1861,'multiline':False]
['text':' namespace BOOST_REGEX_DETAIL_NS','line_number':1867,'multiline':False]
['text':' namespace boost','line_number':1868,'multiline':False]
