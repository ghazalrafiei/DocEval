['text':'
 *
 * Copyright (c) 2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]
['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         perl_matcher_common.cpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Definitions of perl_matcher member functions that are 
  *                specific to the recursive implementation.
  ','line_number':12,'multiline':True]
['text':' Although this next line *should* be evaluated at compile time, in practice','line_number':87,'multiline':False]
['text':' some compilers (VC++) emit run-time initialisation which breaks thread','line_number':88,'multiline':False]
['text':' safety, so use a dispatch function instead:','line_number':89,'multiline':False]
['text':'(::boost::is_random_access_iterator<BidiIterator>::value ? &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_fast : &perl_matcher<BidiIterator, Allocator, traits>::match_dot_repeat_slow),','line_number':90,'multiline':False]
['text':' forward lookahead assert:','line_number':135,'multiline':False]
['text':' independent sub-expression:','line_number':152,'multiline':False]
['text':'','line_number':166,'multiline':False]
['text':' our captures have been stored in *m_presult','line_number':167,'multiline':False]
['text':' we need to unpack them, and insert them','line_number':168,'multiline':False]
['text':' back in the right order when we unwind the stack:','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':' match everything else:','line_number':175,'multiline':False]
['text':' now place the stored captures back:','line_number':177,'multiline':False]
['text':' conditional expression:','line_number':196,'multiline':False]
['text':' zero width assertion, have to match this recursively:','line_number':208,'multiline':False]
['text':' Reset start of $0, since we have a \K escape','line_number':227,'multiline':False]
['text':'','line_number':248,'multiline':False]
['text':' we have a match, push the capture information onto the stack:','line_number':249,'multiline':False]
['text':'','line_number':250,'multiline':False]
['text':' find out which of these two alternatives we need to take:','line_number':271,'multiline':False]
['text':' we can take the first alternative,','line_number':285,'multiline':False]
['text':' see if we need to push next alternative:','line_number':286,'multiline':False]
['text':' neither option is possible','line_number':317,'multiline':False]
['text':'','line_number':328,'multiline':False]
['text':' Always copy the repeat count, so that the state is restored','line_number':329,'multiline':False]
['text':' when we exit this scope:','line_number':330,'multiline':False]
['text':'','line_number':331,'multiline':False]
['text':'','line_number':333,'multiline':False]
['text':' If we've had at least one repeat already, and the last one ','line_number':334,'multiline':False]
['text':' matched the NULL string then set the repeat count to','line_number':335,'multiline':False]
['text':' maximum:','line_number':336,'multiline':False]
['text':'','line_number':337,'multiline':False]
['text':' find out which of these two alternatives we need to take:','line_number':340,'multiline':False]
['text':' we must take the repeat:','line_number':355,'multiline':False]
['text':' increase the counter:','line_number':358,'multiline':False]
['text':' try and take the repeat if we can:','line_number':368,'multiline':False]
['text':' store position in case we fail:','line_number':371,'multiline':False]
['text':' increase the counter:','line_number':373,'multiline':False]
['text':' failed repeat, reset posistion and fall through for alternative:','line_number':380,'multiline':False]
['text':' can't take anything, fail...','line_number':388,'multiline':False]
['text':' non-greedy','line_number':390,'multiline':False]
['text':' try and skip the repeat if we can:','line_number':392,'multiline':False]
['text':' store position in case we fail:','line_number':395,'multiline':False]
['text':' failed alternative, reset posistion and fall through for repeat:','line_number':402,'multiline':False]
['text':' increase the counter:','line_number':407,'multiline':False]
['text':' match compulsary repeats first:','line_number':429,'multiline':False]
['text':' normal repeat:','line_number':440,'multiline':False]
['text':' non-greedy, keep trying till we get a match:','line_number':455,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':' start by working out how much we can skip:','line_number':492,'multiline':False]
['text':'','line_number':493,'multiline':False]
['text':' not enough text left to match','line_number':504,'multiline':False]
['text':' non-greedy, keep trying till we get a match:','line_number':515,'multiline':False]
['text':'','line_number':557,'multiline':False]
['text':' start by working out how much we can skip:','line_number':558,'multiline':False]
['text':'','line_number':559,'multiline':False]
['text':' non-greedy, keep trying till we get a match:','line_number':604,'multiline':False]
['text':' counldn't repeat even though it was the only option','line_number':616,'multiline':False]
['text':'','line_number':661,'multiline':False]
['text':' start by working out how much we can skip:','line_number':662,'multiline':False]
['text':'','line_number':663,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':669,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':670,'multiline':False]
['text':' non-greedy, keep trying till we get a match:','line_number':699,'multiline':False]
['text':' counldn't repeat even though it was the only option','line_number':711,'multiline':False]
['text':'','line_number':757,'multiline':False]
['text':' start by working out how much we can skip:','line_number':758,'multiline':False]
['text':'','line_number':759,'multiline':False]
['text':' Move end forward by "desired", preferably without using distance or advance if we can','line_number':765,'multiline':False]
['text':' as these can be slow for some iterator types.','line_number':766,'multiline':False]
['text':' non-greedy, keep trying till we get a match:','line_number':795,'multiline':False]
['text':' counldn't repeat even though it was the only option','line_number':807,'multiline':False]
['text':'','line_number':896,'multiline':False]
['text':' Set new call stack:','line_number':897,'multiline':False]
['text':'','line_number':898,'multiline':False]
['text':'','line_number':903,'multiline':False]
['text':' See if we've seen this recursion before at this location, if we have then','line_number':904,'multiline':False]
['text':' we need to prevent infinite recursion:','line_number':905,'multiline':False]
['text':'','line_number':906,'multiline':False]
['text':'','line_number':916,'multiline':False]
['text':' Now get on with it:','line_number':917,'multiline':False]
['text':'','line_number':918,'multiline':False]
['text':' resets all repeat counts since we're recursing and starting fresh on those','line_number':928,'multiline':False]
['text':' matched forward lookahead:','line_number':977,'multiline':False]
['text':' change our case sensitivity:','line_number':1062,'multiline':False]
['text':' Unenclosed closing ), occurs when (*ACCEPT) is inside some other ','line_number':1089,'multiline':False]
['text':' parenthesis which may or may not have other side effects associated with it.','line_number':1090,'multiline':False]
['text':' namespace BOOST_REGEX_DETAIL_NS','line_number':1113,'multiline':False]
['text':' namespace boost','line_number':1114,'multiline':False]
