['text':'
 *
 * Copyright (c) 2004 John Maddock
 * Copyright 2011 Garmin Ltd. or its subsidiaries
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]
['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         cpp_regex_traits.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Declares regular expression traits class cpp_regex_traits.
  ','line_number':12,'multiline':True]
['text':'','line_number':47,'multiline':False]
['text':' forward declaration is needed by some compilers:','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' class parser_buf:','line_number':56,'multiline':False]
['text':' acts as a stream buffer which wraps around a pair of pointers:','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':' class cpp_regex_traits_base:','line_number':149,'multiline':False]
['text':' acts as a container for locale and the facets we are using.','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':'','line_number':195,'multiline':False]
['text':' class cpp_regex_traits_char_layer:','line_number':196,'multiline':False]
['text':' implements methods that require specialization for narrow characters:','line_number':197,'multiline':False]
['text':'','line_number':198,'multiline':False]
['text':' TODO: use a hash table when available!','line_number':237,'multiline':False]
['text':' we need to start by initialising our syntax map so we know which','line_number':244,'multiline':False]
['text':' character is used for which purpose:','line_number':245,'multiline':False]
['text':'','line_number':264,'multiline':False]
['text':' if we have a valid catalog then load our messages:','line_number':265,'multiline':False]
['text':'','line_number':266,'multiline':False]
['text':'','line_number':319,'multiline':False]
['text':' specialized version for narrow characters:','line_number':320,'multiline':False]
['text':'','line_number':321,'multiline':False]
['text':'','line_number':352,'multiline':False]
['text':' class cpp_regex_traits_implementation:','line_number':353,'multiline':False]
['text':' provides pimpl implementation for cpp_regex_traits.','line_number':354,'multiline':False]
['text':'','line_number':355,'multiline':False]
['text':'cpp_regex_traits_implementation();','line_number':371,'multiline':False]
['text':' error messages indexed by numberic ID','line_number':406,'multiline':False]
['text':' character class names','line_number':407,'multiline':False]
['text':' collating element names','line_number':408,'multiline':False]
['text':' the form of the collation string','line_number':409,'multiline':False]
['text':' the collation group delimiter','line_number':410,'multiline':False]
['text':'','line_number':411,'multiline':False]
['text':' helpers:','line_number':412,'multiline':False]
['text':'','line_number':413,'multiline':False]
['text':'','line_number':433,'multiline':False]
['text':' PRECONDITIONS:','line_number':434,'multiline':False]
['text':'','line_number':435,'multiline':False]
['text':' A bug in gcc 3.2 (and maybe other versions as well) treats','line_number':436,'multiline':False]
['text':' p1 as a null terminated string, for efficiency reasons ','line_number':437,'multiline':False]
['text':' we work around this elsewhere, but just assert here that','line_number':438,'multiline':False]
['text':' we adhere to gcc's (buggy) preconditions...','line_number':439,'multiline':False]
['text':'','line_number':440,'multiline':False]
['text':'','line_number':444,'multiline':False]
['text':' A bug in VC11 and 12 causes the program to hang if we pass a null-string','line_number':445,'multiline':False]
['text':' to std::collate::transform, but only for certain locales :-(','line_number':446,'multiline':False]
['text':' Probably effects Intel and Clang or any compiler using the VC std library (Dinkumware).','line_number':447,'multiline':False]
['text':'','line_number':448,'multiline':False]
['text':'','line_number':454,'multiline':False]
['text':' swallowing all exceptions here is a bad idea','line_number':455,'multiline':False]
['text':' however at least one std lib will always throw','line_number':456,'multiline':False]
['text':' std::bad_alloc for certain arguments...','line_number':457,'multiline':False]
['text':'','line_number':458,'multiline':False]
['text':'','line_number':462,'multiline':False]
['text':' What we do here depends upon the format of the sort key returned by','line_number':463,'multiline':False]
['text':' sort key returned by this->transform:','line_number':464,'multiline':False]
['text':'','line_number':465,'multiline':False]
['text':' the best we can do is translate to lower case, then get a regular sort key:','line_number':470,'multiline':False]
['text':' get a regular sort key, and then truncate it:','line_number':479,'multiline':False]
['text':' get a regular sort key, and then truncate everything after the delim:','line_number':485,'multiline':False]
['text':' character is ignorable at the primary level:','line_number':503,'multiline':False]
['text':'','line_number':513,'multiline':False]
['text':' PRECONDITIONS:','line_number':514,'multiline':False]
['text':'','line_number':515,'multiline':False]
['text':' A bug in gcc 3.2 (and maybe other versions as well) treats','line_number':516,'multiline':False]
['text':' p1 as a null terminated string, for efficiency reasons ','line_number':517,'multiline':False]
['text':' we work around this elsewhere, but just assert here that','line_number':518,'multiline':False]
['text':' we adhere to gcc's (buggy) preconditions...','line_number':519,'multiline':False]
['text':'','line_number':520,'multiline':False]
['text':'','line_number':522,'multiline':False]
['text':' swallowing all exceptions here is a bad idea','line_number':523,'multiline':False]
['text':' however at least one std lib will always throw','line_number':524,'multiline':False]
['text':' std::bad_alloc for certain arguments...','line_number':525,'multiline':False]
['text':'','line_number':526,'multiline':False]
['text':'','line_number':529,'multiline':False]
['text':' A bug in VC11 and 12 causes the program to hang if we pass a null-string','line_number':530,'multiline':False]
['text':' to std::collate::transform, but only for certain locales :-(','line_number':531,'multiline':False]
['text':' Probably effects Intel and Clang or any compiler using the VC std library (Dinkumware).','line_number':532,'multiline':False]
['text':'','line_number':533,'multiline':False]
['text':'','line_number':543,'multiline':False]
['text':' some implementations (Dinkumware) append unnecessary trailing \0's:','line_number':544,'multiline':False]
['text':'','line_number':547,'multiline':False]
['text':' We may have NULL's used as separators between sections of the collate string,','line_number':548,'multiline':False]
['text':' an example would be Boost.Locale.  We have no way to detect this case via','line_number':549,'multiline':False]
['text':' #defines since this can be used with any compiler/platform combination.','line_number':550,'multiline':False]
['text':' Unfortunately our state machine (which was devised when all implementations','line_number':551,'multiline':False]
['text':' used underlying C language API's) can't cope with that case.  One workaround','line_number':552,'multiline':False]
['text':' is to replace each character with 2, fortunately this code isn't used that','line_number':553,'multiline':False]
['text':' much as this is now slower than before :-(','line_number':554,'multiline':False]
['text':'','line_number':555,'multiline':False]
['text':'','line_number':621,'multiline':False]
['text':' if we have a valid catalog then load our messages:','line_number':622,'multiline':False]
['text':'','line_number':623,'multiline':False]
['text':'','line_number':626,'multiline':False]
['text':' Error messages:','line_number':627,'multiline':False]
['text':'','line_number':628,'multiline':False]
['text':'','line_number':648,'multiline':False]
['text':' Custom class names:','line_number':649,'multiline':False]
['text':'','line_number':650,'multiline':False]
['text':'','line_number':678,'multiline':False]
['text':' get the collation format used by m_pcollate:','line_number':679,'multiline':False]
['text':'','line_number':680,'multiline':False]
['text':' BOOST_REGEX_DETAIL_NS','line_number':732,'multiline':False]
['text':'','line_number':836,'multiline':False]
['text':' Cygwin has a buggy ctype facet, see https://www.cygwin.com/ml/cygwin/2012-08/msg00178.html:','line_number':837,'multiline':False]
['text':'','line_number':838,'multiline':False]
['text':'','line_number':870,'multiline':False]
['text':' extension:','line_number':871,'multiline':False]
['text':' set the name of the message catalog in use (defaults to "boost_regex").','line_number':872,'multiline':False]
['text':'','line_number':873,'multiline':False]
['text':'','line_number':879,'multiline':False]
['text':' catalog name handler:','line_number':880,'multiline':False]
['text':'','line_number':881,'multiline':False]
['text':' buffer for parsing numbers.','line_number':893,'multiline':False]
['text':' stream for parsing numbers.','line_number':894,'multiline':False]
['text':' we do NOT want to parse any thousands separators inside the stream:','line_number':896,'multiline':False]
['text':' we need to start by initialising our syntax map so we know which','line_number':955,'multiline':False]
['text':' character is used for which purpose:','line_number':956,'multiline':False]
['text':'','line_number':976,'multiline':False]
['text':' if we have a valid catalog then load our messages:','line_number':977,'multiline':False]
['text':'','line_number':978,'multiline':False]
['text':'','line_number':1014,'multiline':False]
['text':' finish off by calculating our escape types:','line_number':1015,'multiline':False]
['text':'','line_number':1016,'multiline':False]
['text':' namespace detail','line_number':1030,'multiline':False]
['text':' boost','line_number':1033,'multiline':False]
