['text':'
 *
 * Copyright (c) 2004
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]
['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         unicode_iterator.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Iterator adapters for converting between different Unicode encodings.
  ','line_number':12,'multiline':True]
['text':'***************************************************************************

Contents:
~~~~~~~~~

1) Read Only, Input Adapters:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

template <class BaseIterator, class U8Type = ::boost::uint8_t>
class u32_to_u8_iterator;

Adapts sequence of UTF-32 code points to "look like" a sequence of UTF-8.

template <class BaseIterator, class U32Type = ::boost::uint32_t>
class u8_to_u32_iterator;

Adapts sequence of UTF-8 code points to "look like" a sequence of UTF-32.

template <class BaseIterator, class U16Type = ::boost::uint16_t>
class u32_to_u16_iterator;

Adapts sequence of UTF-32 code points to "look like" a sequence of UTF-16.

template <class BaseIterator, class U32Type = ::boost::uint32_t>
class u16_to_u32_iterator;

Adapts sequence of UTF-16 code points to "look like" a sequence of UTF-32.

2) Single pass output iterator adapters:

template <class BaseIterator>
class utf8_output_iterator;

Accepts UTF-32 code points and forwards them on as UTF-8 code points.

template <class BaseIterator>
class utf16_output_iterator;

Accepts UTF-32 code points and forwards them on as UTF-16 code points.

***************************************************************************','line_number':19,'multiline':True]
['text':' CHAR_BIT','line_number':72,'multiline':False]
['text':' if the most significant bit with a zero in it is in position','line_number':103,'multiline':False]
['text':' 8-N then there are N bytes in this UTF-8 sequence:','line_number':104,'multiline':False]
['text':' namespace detail','line_number':143,'multiline':False]
['text':' Both m_currents must be equal, or both even','line_number':172,'multiline':False]
['text':' this is the same as saying their sum must be even:','line_number':173,'multiline':False]
['text':' if we have a pending read then read now, so that we know whether','line_number':184,'multiline':False]
['text':' to skip a position, or move to a low-surrogate:','line_number':185,'multiline':False]
['text':' pending read:','line_number':188,'multiline':False]
['text':' move to the next surrogate position:','line_number':191,'multiline':False]
['text':' if we've reached the end skip a position:','line_number':193,'multiline':False]
['text':' decrementing an iterator always leads to a valid position:','line_number':211,'multiline':False]
['text':' construct:','line_number':232,'multiline':False]
['text':' begin by checking for a code point out of range:','line_number':249,'multiline':False]
['text':' split into two surrogates:','line_number':255,'multiline':False]
['text':' 16-bit code point:','line_number':264,'multiline':False]
['text':' value must not be a surrogate:','line_number':268,'multiline':False]
['text':' special values for pending iterator reads:','line_number':281,'multiline':False]
['text':' skip high surrogate first if there is one:','line_number':314,'multiline':False]
['text':' if we have a low surrogate then go back one more:','line_number':329,'multiline':False]
['text':' construct:','line_number':345,'multiline':False]
['text':'','line_number':354,'multiline':False]
['text':' Range checked version:','line_number':355,'multiline':False]
['text':'','line_number':356,'multiline':False]
['text':'','line_number':360,'multiline':False]
['text':' The range must not start with a low surrogate, or end in a high surrogate,','line_number':361,'multiline':False]
['text':' otherwise we run the risk of running outside the underlying input range.','line_number':362,'multiline':False]
['text':' Likewise b must not be located at a low surrogate.','line_number':363,'multiline':False]
['text':'','line_number':364,'multiline':False]
['text':' if the last value is a high surrogate then adjust m_position and m_value as needed:','line_number':397,'multiline':False]
['text':' precondition; next value must have be a low-surrogate:','line_number':400,'multiline':False]
['text':' postcondition; result must not be a surrogate:','line_number':408,'multiline':False]
['text':' either the m_current's must be equal, or one must be 0 and ','line_number':443,'multiline':False]
['text':' the other 4: which means neither must have bits 1 or 2 set:','line_number':444,'multiline':False]
['text':' if we have a pending read then read now, so that we know whether','line_number':456,'multiline':False]
['text':' to skip a position, or move to a low-surrogate:','line_number':457,'multiline':False]
['text':' pending read:','line_number':460,'multiline':False]
['text':' move to the next surrogate position:','line_number':463,'multiline':False]
['text':' if we've reached the end skip a position:','line_number':465,'multiline':False]
['text':' construct:','line_number':503,'multiline':False]
['text':' special values for pending iterator reads:','line_number':565,'multiline':False]
['text':' We must not start with a continuation character:','line_number':598,'multiline':False]
['text':' skip high surrogate first if there is one:','line_number':601,'multiline':False]
['text':' Since we haven't read in a value, we need to validate the code points:','line_number':605,'multiline':False]
['text':' We must have a continuation byte:','line_number':609,'multiline':False]
['text':' Keep backtracking until we don't have a trailing character:','line_number':629,'multiline':False]
['text':' now check that the sequence was valid:','line_number':632,'multiline':False]
['text':' construct:','line_number':648,'multiline':False]
['text':'','line_number':657,'multiline':False]
['text':' Checked constructor:','line_number':658,'multiline':False]
['text':'','line_number':659,'multiline':False]
['text':'','line_number':663,'multiline':False]
['text':' We must not start with a continuation character, or end with a ','line_number':664,'multiline':False]
['text':' truncated UTF-8 sequence otherwise we run the risk of going past','line_number':665,'multiline':False]
['text':' the start/end of the underlying sequence:','line_number':666,'multiline':False]
['text':'','line_number':667,'multiline':False]
['text':' we must not have a continuation character:','line_number':695,'multiline':False]
['text':' see how many extra bytes we have:','line_number':698,'multiline':False]
['text':' extract the extra bits, 6 from each extra byte:','line_number':700,'multiline':False]
['text':' We must have a continuation byte:','line_number':706,'multiline':False]
['text':' we now need to remove a few of the leftmost bits, but how many depends','line_number':711,'multiline':False]
['text':' upon how many extra bytes we've extracted:','line_number':712,'multiline':False]
['text':' check the result is in range:','line_number':721,'multiline':False]
['text':' The result must not be a surrogate:','line_number':724,'multiline':False]
['text':' We should not have had an invalidly encoded UTF8 sequence:','line_number':727,'multiline':False]
['text':' begin by checking for a code point out of range:','line_number':779,'multiline':False]
['text':' split into two surrogates:','line_number':782,'multiline':False]
['text':' 16-bit code point:','line_number':788,'multiline':False]
['text':' value must not be a surrogate:','line_number':789,'multiline':False]
['text':' namespace boost','line_number':868,'multiline':False]
['text':' BOOST_REGEX_UNICODE_ITERATOR_HPP','line_number':870,'multiline':False]
