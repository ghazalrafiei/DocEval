['text':'
 *
 * Copyright (c) 2004 John Maddock
 * Copyright 2011 Garmin Ltd. or its subsidiaries
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 ','line_number':1,'multiline':True]
['text':'
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         cpp_regex_traits.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Declares regular expression traits class cpp_regex_traits.
  ','line_number':12,'multiline':True]
['text':'','line_number':66,'multiline':False]
['text':' forward declaration is needed by some compilers:','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' class parser_buf:','line_number':75,'multiline':False]
['text':' acts as a stream buffer which wraps around a pair of pointers:','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':' class cpp_regex_traits_base:','line_number':170,'multiline':False]
['text':' acts as a container for locale and the facets we are using.','line_number':171,'multiline':False]
['text':'','line_number':172,'multiline':False]
['text':'','line_number':226,'multiline':False]
['text':' class cpp_regex_traits_char_layer:','line_number':227,'multiline':False]
['text':' implements methods that require specialization for narrow characters:','line_number':228,'multiline':False]
['text':'','line_number':229,'multiline':False]
['text':' TODO: use a hash table when available!','line_number':268,'multiline':False]
['text':' we need to start by initialising our syntax map so we know which','line_number':275,'multiline':False]
['text':' character is used for which purpose:','line_number':276,'multiline':False]
['text':'','line_number':296,'multiline':False]
['text':' if we have a valid catalog then load our messages:','line_number':297,'multiline':False]
['text':'','line_number':298,'multiline':False]
['text':'','line_number':354,'multiline':False]
['text':' specialized version for narrow characters:','line_number':355,'multiline':False]
['text':'','line_number':356,'multiline':False]
['text':'','line_number':410,'multiline':False]
['text':' class cpp_regex_traits_implementation:','line_number':411,'multiline':False]
['text':' provides pimpl implementation for cpp_regex_traits.','line_number':412,'multiline':False]
['text':'','line_number':413,'multiline':False]
['text':'cpp_regex_traits_implementation();','line_number':431,'multiline':False]
['text':' error messages indexed by numberic ID','line_number':466,'multiline':False]
['text':' character class names','line_number':467,'multiline':False]
['text':' collating element names','line_number':468,'multiline':False]
['text':' the form of the collation string','line_number':469,'multiline':False]
['text':' the collation group delimiter','line_number':470,'multiline':False]
['text':'','line_number':471,'multiline':False]
['text':' helpers:','line_number':472,'multiline':False]
['text':'','line_number':473,'multiline':False]
['text':'','line_number':503,'multiline':False]
['text':' PRECONDITIONS:','line_number':504,'multiline':False]
['text':'','line_number':505,'multiline':False]
['text':' A bug in gcc 3.2 (and maybe other versions as well) treats','line_number':506,'multiline':False]
['text':' p1 as a null terminated string, for efficiency reasons ','line_number':507,'multiline':False]
['text':' we work around this elsewhere, but just assert here that','line_number':508,'multiline':False]
['text':' we adhere to gcc's (buggy) preconditions...','line_number':509,'multiline':False]
['text':'','line_number':510,'multiline':False]
['text':'','line_number':514,'multiline':False]
['text':' A bug in VC11 and 12 causes the program to hang if we pass a null-string','line_number':515,'multiline':False]
['text':' to std::collate::transform, but only for certain locales :-(','line_number':516,'multiline':False]
['text':' Probably effects Intel and Clang or any compiler using the VC std library (Dinkumware).','line_number':517,'multiline':False]
['text':'','line_number':518,'multiline':False]
['text':'','line_number':524,'multiline':False]
['text':' swallowing all exceptions here is a bad idea','line_number':525,'multiline':False]
['text':' however at least one std lib will always throw','line_number':526,'multiline':False]
['text':' std::bad_alloc for certain arguments...','line_number':527,'multiline':False]
['text':'','line_number':528,'multiline':False]
['text':'','line_number':532,'multiline':False]
['text':' What we do here depends upon the format of the sort key returned by','line_number':533,'multiline':False]
['text':' sort key returned by this->transform:','line_number':534,'multiline':False]
['text':'','line_number':535,'multiline':False]
['text':' the best we can do is translate to lower case, then get a regular sort key:','line_number':540,'multiline':False]
['text':' get a regular sort key, and then truncate it:','line_number':549,'multiline':False]
['text':' get a regular sort key, and then truncate everything after the delim:','line_number':555,'multiline':False]
['text':' character is ignorable at the primary level:','line_number':573,'multiline':False]
['text':'','line_number':583,'multiline':False]
['text':' PRECONDITIONS:','line_number':584,'multiline':False]
['text':'','line_number':585,'multiline':False]
['text':' A bug in gcc 3.2 (and maybe other versions as well) treats','line_number':586,'multiline':False]
['text':' p1 as a null terminated string, for efficiency reasons ','line_number':587,'multiline':False]
['text':' we work around this elsewhere, but just assert here that','line_number':588,'multiline':False]
['text':' we adhere to gcc's (buggy) preconditions...','line_number':589,'multiline':False]
['text':'','line_number':590,'multiline':False]
['text':'','line_number':592,'multiline':False]
['text':' swallowing all exceptions here is a bad idea','line_number':593,'multiline':False]
['text':' however at least one std lib will always throw','line_number':594,'multiline':False]
['text':' std::bad_alloc for certain arguments...','line_number':595,'multiline':False]
['text':'','line_number':596,'multiline':False]
['text':'','line_number':599,'multiline':False]
['text':' A bug in VC11 and 12 causes the program to hang if we pass a null-string','line_number':600,'multiline':False]
['text':' to std::collate::transform, but only for certain locales :-(','line_number':601,'multiline':False]
['text':' Probably effects Intel and Clang or any compiler using the VC std library (Dinkumware).','line_number':602,'multiline':False]
['text':'','line_number':603,'multiline':False]
['text':'','line_number':613,'multiline':False]
['text':' Borland's STLPort version returns a NULL-terminated','line_number':614,'multiline':False]
['text':' string that has garbage at the end - each call to','line_number':615,'multiline':False]
['text':' std::collate<wchar_t>::transform returns a different string!','line_number':616,'multiline':False]
['text':' So as a workaround, we'll truncate the string at the first NULL','line_number':617,'multiline':False]
['text':' which _seems_ to work....','line_number':618,'multiline':False]
['text':'','line_number':622,'multiline':False]
['text':' some implementations (Dinkumware) append unnecessary trailing \0's:','line_number':623,'multiline':False]
['text':'','line_number':627,'multiline':False]
['text':' We may have NULL's used as separators between sections of the collate string,','line_number':628,'multiline':False]
['text':' an example would be Boost.Locale.  We have no way to detect this case via','line_number':629,'multiline':False]
['text':' #defines since this can be used with any compiler/platform combination.','line_number':630,'multiline':False]
['text':' Unfortunately our state machine (which was devised when all implementations','line_number':631,'multiline':False]
['text':' used underlying C language API's) can't cope with that case.  One workaround','line_number':632,'multiline':False]
['text':' is to replace each character with 2, fortunately this code isn't used that','line_number':633,'multiline':False]
['text':' much as this is now slower than before :-(','line_number':634,'multiline':False]
['text':'','line_number':635,'multiline':False]
['text':'','line_number':724,'multiline':False]
['text':' if we have a valid catalog then load our messages:','line_number':725,'multiline':False]
['text':'','line_number':726,'multiline':False]
['text':'','line_number':729,'multiline':False]
['text':' Error messages:','line_number':730,'multiline':False]
['text':'','line_number':731,'multiline':False]
['text':'','line_number':751,'multiline':False]
['text':' Custom class names:','line_number':752,'multiline':False]
['text':'','line_number':753,'multiline':False]
['text':'','line_number':804,'multiline':False]
['text':' get the collation format used by m_pcollate:','line_number':805,'multiline':False]
['text':'','line_number':806,'multiline':False]
['text':' BOOST_REGEX_DETAIL_NS','line_number':909,'multiline':False]
['text':'','line_number':1014,'multiline':False]
['text':' Cygwin has a buggy ctype facet, see https://www.cygwin.com/ml/cygwin/2012-08/msg00178.html:','line_number':1015,'multiline':False]
['text':'','line_number':1016,'multiline':False]
['text':'','line_number':1051,'multiline':False]
['text':' extension:','line_number':1052,'multiline':False]
['text':' set the name of the message catalog in use (defaults to "boost_regex").','line_number':1053,'multiline':False]
['text':'','line_number':1054,'multiline':False]
['text':'','line_number':1060,'multiline':False]
['text':' catalog name handler:','line_number':1061,'multiline':False]
['text':'','line_number':1062,'multiline':False]
['text':' buffer for parsing numbers.','line_number':1074,'multiline':False]
['text':' stream for parsing numbers.','line_number':1075,'multiline':False]
['text':' we do NOT want to parse any thousands separators inside the stream:','line_number':1077,'multiline':False]
['text':' we need to start by initialising our syntax map so we know which','line_number':1136,'multiline':False]
['text':' character is used for which purpose:','line_number':1137,'multiline':False]
['text':'','line_number':1158,'multiline':False]
['text':' if we have a valid catalog then load our messages:','line_number':1159,'multiline':False]
['text':'','line_number':1160,'multiline':False]
['text':'','line_number':1199,'multiline':False]
['text':' finish off by calculating our escape types:','line_number':1200,'multiline':False]
['text':'','line_number':1201,'multiline':False]
['text':' namespace detail','line_number':1215,'multiline':False]
['text':' boost','line_number':1218,'multiline':False]
