['text':'  (C) Copyright Steve Cleary, Beman Dawes, Howard Hinnant & John Maddock 2000.','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  See http://www.boost.org/libs/type_traits for most recent version including documentation.','line_number':7,'multiline':False]
['text':'','line_number':18,'multiline':False]
['text':' whenever we have a conversion function with ellipses','line_number':19,'multiline':False]
['text':' it needs to be declared __cdecl to suppress compiler','line_number':20,'multiline':False]
['text':' warnings from MS and Borland compilers (this *must*','line_number':21,'multiline':False]
['text':' appear before we include is_same.hpp below):','line_number':22,'multiline':False]
['text':'','line_number':26,'multiline':True]
['text':'','line_number':46,'multiline':False]
['text':' define BOOST_TT_TEST_MS_FUNC_SIGS','line_number':47,'multiline':False]
['text':' when we want to test __stdcall etc function types with is_function etc','line_number':48,'multiline':False]
['text':' (Note, does not work with Borland, even though it does support __stdcall etc):','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' define BOOST_TT_NO_CV_FUNC_TEST','line_number':56,'multiline':False]
['text':' if tests for cv-qualified member functions don't ','line_number':57,'multiline':False]
['text':' work in is_member_function_pointer','line_number':58,'multiline':False]
['text':'','line_number':59,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' Macros that have been deprecated, defined here for backwards compatibility:','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' Can we implement "accurate" binary operator detection:','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':' Can we implement accurate is_function/is_member_function_pointer (post C++03)?','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':' If we have the SD6 macros (check for C++11's __cpp_rvalue_references), and we don't have __cpp_noexcept_function_type','line_number':97,'multiline':False]
['text':' set, then don't treat noexcept functions as seperate types.  This is a fix for msvc with the /Zc:noexceptTypes- flag set.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' Check MSVC specific macro on older msvc compilers that don't support the SD6 macros, we don't rely on this','line_number':104,'multiline':False]
['text':' if the SD6 macros *are* available as it appears to be undocumented.','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':' BOOST_TT_CONFIG_HPP_INCLUDED','line_number':114,'multiline':False]
