['text':'  (C) Copyright 2009-2011 Frederic Bron, Robert Stewart, Steven Watanabe & Roman Perepelitsa.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  See http://www.boost.org/libs/type_traits for most recent version including documentation.','line_number':7,'multiline':False]
['text':' cannot include this header without getting warnings of the kind:','line_number':91,'multiline':False]
['text':' gcc:','line_number':92,'multiline':False]
['text':'    warning: value computed is not used','line_number':93,'multiline':False]
['text':'    warning: comparison between signed and unsigned integer expressions','line_number':94,'multiline':False]
['text':' msvc:','line_number':95,'multiline':False]
['text':'    warning C4146: unary minus operator applied to unsigned type, result still unsigned','line_number':96,'multiline':False]
['text':'    warning C4804: '-' : unsafe use of type 'bool' in operation','line_number':97,'multiline':False]
['text':' cannot find another implementation -> declared as system header to suppress these warnings.','line_number':98,'multiline':False]
['text':' This namespace ensures that argument-dependent name lookup does not mess things up.','line_number':117,'multiline':False]
['text':' 1. a function to have an instance of type T without requiring T to be default','line_number':120,'multiline':False]
['text':' constructible','line_number':121,'multiline':False]
['text':' 2. we provide our operator definition for types that do not have one already','line_number':125,'multiline':False]
['text':' a type returned from operator BOOST_TT_TRAIT_OP when no such operator is','line_number':127,'multiline':False]
['text':' found in the type's own namespace (our own operator is used) so that we have','line_number':128,'multiline':False]
['text':' a means to know that our operator was used','line_number':129,'multiline':False]
['text':' this class allows implicit conversions and makes the following operator','line_number':132,'multiline':False]
['text':' definition less-preferred than any other such operators that might be found','line_number':133,'multiline':False]
['text':' via argument-dependent name lookup','line_number':134,'multiline':False]
['text':' when operator BOOST_TT_TRAIT_OP is not available, this one is used','line_number':137,'multiline':False]
['text':' 3. checks if the operator returns void or not','line_number':141,'multiline':False]
['text':' conditions: Rhs!=void','line_number':142,'multiline':False]
['text':' we first redefine "operator," so that we have no compilation error if','line_number':144,'multiline':False]
['text':' operator BOOST_TT_TRAIT_OP returns void and we can use the return type of','line_number':145,'multiline':False]
['text':' (BOOST_TT_TRAIT_OP rhs, returns_void_t()) to deduce if','line_number':146,'multiline':False]
['text':' operator BOOST_TT_TRAIT_OP returns void or not:','line_number':147,'multiline':False]
['text':' - operator BOOST_TT_TRAIT_OP returns void   -> (BOOST_TT_TRAIT_OP rhs, returns_void_t()) returns returns_void_t','line_number':148,'multiline':False]
['text':' - operator BOOST_TT_TRAIT_OP returns !=void -> (BOOST_TT_TRAIT_OP rhs, returns_void_t()) returns int','line_number':149,'multiline':False]
['text':' this intermediate trait has member value of type bool:','line_number':154,'multiline':False]
['text':' - value==true -> operator BOOST_TT_TRAIT_OP returns void','line_number':155,'multiline':False]
['text':' - value==false -> operator BOOST_TT_TRAIT_OP does not return void','line_number':156,'multiline':False]
['text':' overloads of function returns_void make the difference','line_number':159,'multiline':False]
['text':' yes_type and no_type have different size by construction','line_number':160,'multiline':False]
['text':' 4. checks if the return type is Ret or Ret==dont_care','line_number':167,'multiline':False]
['text':' conditions: Rhs!=void','line_number':168,'multiline':False]
['text':' otherwise checks if it is convertible to Ret using the sizeof trick','line_number':200,'multiline':False]
['text':' based on overload resolution','line_number':201,'multiline':False]
['text':' condition: Ret!=void and Ret!=dont_care and the operator does not return void','line_number':202,'multiline':False]
['text':' this version is preferred for types convertible to Ret','line_number':205,'multiline':False]
['text':' this version is used otherwise','line_number':206,'multiline':False]
['text':' 5. checks for operator existence','line_number':212,'multiline':False]
['text':' condition: Rhs!=void','line_number':213,'multiline':False]
['text':' checks if our definition of operator BOOST_TT_TRAIT_OP is used or an other','line_number':215,'multiline':False]
['text':' existing one;','line_number':216,'multiline':False]
['text':' this is done with redefinition of "operator," that returns no_operator or has_operator','line_number':217,'multiline':False]
['text':' this version is preferred when operator exists','line_number':223,'multiline':False]
['text':' this version is used otherwise','line_number':224,'multiline':False]
['text':' 6. main trait: to avoid any compilation error, this class behaves','line_number':230,'multiline':False]
['text':' differently when operator BOOST_TT_TRAIT_OP(Rhs) is forbidden by the','line_number':231,'multiline':False]
['text':' standard.','line_number':232,'multiline':False]
['text':' Forbidden_if is a bool that is:','line_number':233,'multiline':False]
['text':' - true when the operator BOOST_TT_TRAIT_OP(Rhs) is forbidden by the standard','line_number':234,'multiline':False]
['text':'   (would yield compilation error if used)','line_number':235,'multiline':False]
['text':' - false otherwise','line_number':236,'multiline':False]
['text':' specialization needs to be declared for the special void case','line_number':251,'multiline':False]
['text':' defines some typedef for convenience','line_number':257,'multiline':False]
['text':' namespace impl','line_number':266,'multiline':False]
['text':' namespace detail','line_number':267,'multiline':False]
['text':' this is the accessible definition of the trait to end user','line_number':269,'multiline':False]
['text':' namespace boost','line_number':273,'multiline':False]
