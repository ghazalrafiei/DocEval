['text':'  (C) Copyright Daniel Frey and Robert Ramey 2009.','line_number':1,'multiline':False]
['text':'  (C) Copyright Balint Cserni 2017','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':3,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':4,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  See http://www.boost.org/libs/type_traits for most recent version including documentation.','line_number':7,'multiline':False]
['text':' Implementation based on the standard's rules of explicit type conversions.','line_number':30,'multiline':False]
['text':' A pointer to an object of *derived* class type may be explicitly converted to a pointer to an *unambiguous* *base* class type.','line_number':31,'multiline':False]
['text':' A pointer to an object of an *unambiguous* *non-virtual* *base* class type may be explicitly converted to a pointer of a *derived* class type.','line_number':32,'multiline':False]
['text':' Therefore Derived has a virtual base Base if and only if','line_number':33,'multiline':False]
['text':'   (1) a Derived* can be converted to Base* (so the base class is unambiguous, which comes necessarily from virtual inheritance)','line_number':34,'multiline':False]
['text':'   (2) a Base* cannot be converted to Derived* (so the base class is either ambiguous or virtual)','line_number':35,'multiline':False]
['text':' With both conditions true, Base must be a virtual base of Derived.','line_number':36,'multiline':False]
['text':' The "is_base_of" is only needed so the compiler can (but is not required to) error out if the types are incomplete.','line_number':37,'multiline':False]
['text':' This is in league with the the expected behaviour.','line_number':38,'multiline':False]
['text':' C-style casts have the power to ignore inheritance visibility while still act as a static_cast.','line_number':43,'multiline':False]
['text':' They can also fall back to the behaviour of reinterpret_cast, which allows is_virtual_base_of to work on non-class types too.','line_number':44,'multiline':False]
['text':' Note that because we are casting pointers there can be no user-defined operators to interfere.','line_number':45,'multiline':False]
['text':' namespace detail','line_number':51,'multiline':False]
['text':' namespace detail','line_number':130,'multiline':False]
['text':' namespace boost','line_number':144,'multiline':False]
