['text':' Copyright 2000 John Maddock (john@johnmaddock.co.uk)','line_number':2,'multiline':False]
['text':' Copyright 2000 Jeremy Siek (jsiek@lsc.nd.edu)','line_number':3,'multiline':False]
['text':' Copyright 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'  Use, modification and distribution are subject to the Boost Software License,','line_number':6,'multiline':False]
['text':'  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt).','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'  See http://www.boost.org/libs/type_traits for most recent version including documentation.','line_number':10,'multiline':False]
['text':' BOOST_IS_CONVERTIBLE','line_number':43,'multiline':False]
['text':' is one type convertible to another?','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':' there are multiple versions of the is_convertible','line_number':51,'multiline':False]
['text':' template, almost every compiler seems to require its','line_number':52,'multiline':False]
['text':' own version.','line_number':53,'multiline':False]
['text':'','line_number':54,'multiline':False]
['text':' Thanks to Andrei Alexandrescu for the original version of the','line_number':55,'multiline':False]
['text':' conversion detection technique!','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':' This is a C++11 conforming version, place this first and use it wherever possible:','line_number':63,'multiline':False]
['text':' Nothing converts to function or array, but void converts to void:','line_number':76,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' special version for Borland compilers','line_number':101,'multiline':False]
['text':' this version breaks when used for some','line_number':102,'multiline':False]
['text':' UDT conversions:','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' This workaround for Borland breaks the EDG C++ frontend,','line_number':109,'multiline':False]
['text':' so we only use it for Borland.','line_number':110,'multiline':False]
['text':' special version for gcc compiler + recent Borland versions','line_number':124,'multiline':False]
['text':' note that this does not pass UDT's through (...)','line_number':125,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':' This is *almost* an ideal world implementation as it doesn't rely','line_number':161,'multiline':False]
['text':' on undefined behaviour by passing UDT's through (...).','line_number':162,'multiline':False]
['text':' Unfortunately it doesn't quite pass all the tests for most compilers (sigh...)','line_number':163,'multiline':False]
['text':' Enable this for your compiler if is_convertible_test.cpp will compile it...','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':' Note we do not enable this for VC7.1, because even though it passes all the','line_number':166,'multiline':False]
['text':' type_traits tests it is known to cause problems when instantiation occurs','line_number':167,'multiline':False]
['text':' deep within the instantiation tree :-(','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':' we need this constructor to catch references to functions','line_number':175,'multiline':False]
['text':' (which can not be cv-qualified):','line_number':176,'multiline':False]
['text':' we need this constructor to catch references to functions','line_number':207,'multiline':False]
['text':' (which can not be cv-qualified):','line_number':208,'multiline':False]
['text':' Using '...' doesn't always work on Digital Mars. This version seems to.','line_number':215,'multiline':False]
['text':' Static constants sometime cause the conversion of _m_from to To to be','line_number':223,'multiline':False]
['text':' called. This doesn't happen with an enum.','line_number':224,'multiline':False]
['text':' ','line_number':237,'multiline':False]
['text':' CW works with the technique implemented above for EDG, except when From','line_number':238,'multiline':False]
['text':' is a function type (or a reference to such a type), in which case','line_number':239,'multiline':False]
['text':' any_conversion won't be accepted as a valid conversion. We detect this','line_number':240,'multiline':False]
['text':' exceptional situation and channel it through an alternative algorithm.','line_number':241,'multiline':False]
['text':'','line_number':242,'multiline':False]
['text':'FromIsFunctionRef','line_number':256,'multiline':True]
['text':'FromIsFunctionRef','line_number':276,'multiline':True]
['text':'','line_number':303,'multiline':False]
['text':' This version seems to work pretty well for a wide spectrum of compilers,','line_number':304,'multiline':False]
['text':' however it does rely on undefined behaviour by passing UDT's through (...).','line_number':305,'multiline':False]
['text':'','line_number':306,'multiline':False]
['text':'Workaround for old compilers like MSVC 7.1 to avoid','line_number':308,'multiline':False]
['text':'forming a reference to an array of unknown bound','line_number':309,'multiline':False]
['text':' is_convertible_impl','line_number':350,'multiline':False]
['text':' As before, a static constant sometimes causes errors on Digital Mars.','line_number':353,'multiline':False]
['text':' We need to filter out abstract types, only if we don't have a strictly conforming C++11 version:','line_number':417,'multiline':False]
['text':'','line_number':435,'multiline':False]
['text':' Now add the full and partial specialisations','line_number':436,'multiline':False]
['text':' for void types, these are common to all the','line_number':437,'multiline':False]
['text':' implementation above:','line_number':438,'multiline':False]
['text':'','line_number':439,'multiline':False]
['text':' BOOST_NO_CV_VOID_SPECIALIZATIONS','line_number':464,'multiline':False]
['text':' namespace detail','line_number':478,'multiline':False]
['text':' clang's intrinsic doesn't assert on incomplete types:','line_number':496,'multiline':False]
['text':' namespace boost','line_number':504,'multiline':False]
['text':' BOOST_TT_IS_CONVERTIBLE_HPP_INCLUDED','line_number':506,'multiline':False]
