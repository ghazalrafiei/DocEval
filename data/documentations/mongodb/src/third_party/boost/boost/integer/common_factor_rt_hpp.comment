['text':'  (C) Copyright Jeremy William Murphy 2016.','line_number':1,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':' for BOOST_NESTED_TEMPLATE, etc.','line_number':13,'multiline':False]
['text':' for std::numeric_limits','line_number':14,'multiline':False]
['text':' for CHAR_MIN','line_number':15,'multiline':False]
['text':' Conditional expression is constant','line_number':33,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':' some helper functions which really should be constexpr already, but sadly aren't:','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':' This sucks, but std::abs is not constexpr :(','line_number':100,'multiline':False]
['text':' VC++ can't handle operator >>= in constexpr code for some reason','line_number':134,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':' Default gcd_traits just inherits from defaults:','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':' Some platforms have fast bitscan operations, that allow us to implement','line_number':166,'multiline':False]
['text':' make_odd much more efficiently, unfortunately we can't use these if we want','line_number':167,'multiline':False]
['text':' the functions to be constexpr as the compiler intrinsics aren't constexpr.','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':'','line_number':208,'multiline':False]
['text':' Other integer type are trivial adaptations of the above,','line_number':209,'multiline':False]
['text':' this works for signed types too, as by the time these functions','line_number':210,'multiline':False]
['text':' are called, all values are > 0.','line_number':211,'multiline':False]
['text':'','line_number':212,'multiline':False]
['text':'','line_number':282,'multiline':False]
['text':' Other integer type are trivial adaptations of the above,','line_number':283,'multiline':False]
['text':' this works for signed types too, as by the time these functions','line_number':284,'multiline':False]
['text':' are called, all values are > 0.','line_number':285,'multiline':False]
['text':'','line_number':286,'multiline':False]
['text':'','line_number':326,'multiline':False]
['text':' The Mixed Binary Euclid Algorithm','line_number':327,'multiline':False]
['text':' Sidi Mohamed Sedjelmaci','line_number':328,'multiline':False]
['text':' Electronic Notes in Discrete Mathematics 35 (2009) 169-176','line_number':329,'multiline':False]
['text':'','line_number':330,'multiline':False]
['text':'* Stein gcd (aka 'binary gcd')
     *
     * From Mathematics to Generic Programming, Alexander Stepanov, Daniel Rose
     ','line_number':362,'multiline':True]
['text':' m > 0 && n > 0','line_number':375,'multiline':False]
['text':' odd(m) && odd(n)','line_number':378,'multiline':False]
['text':' m == n','line_number':386,'multiline':False]
['text':'* Euclidean algorithm
     *
     * From Mathematics to Generic Programming, Alexander Stepanov, Daniel Rose
     *
     ','line_number':392,'multiline':True]
['text':' namespace detail','line_number':441,'multiline':False]
['text':'','line_number':460,'multiline':False]
['text':' This looks slightly odd, but the variadic forms must have 3 or more arguments, and the variadic argument pack may be empty.','line_number':461,'multiline':False]
['text':' This matters not at all for most compilers, but Oracle C++ selects the wrong overload in the 2-arg case unless we do this.','line_number':462,'multiline':False]
['text':'','line_number':463,'multiline':False]
['text':'','line_number':477,'multiline':False]
['text':' Special handling for rationals:','line_number':478,'multiline':False]
['text':'','line_number':479,'multiline':False]
['text':'*
 * Knuth, The Art of Computer Programming: Volume 2, Third edition, 1998
 * Chapter 4.5.2, Algorithm C: Greatest common divisor of n integers.
 *
 * Knuth counts down from n to zero but we naturally go from first to last.
 * We also return the termination position because it might be useful to know.
 *
 * Partly by quirk, partly by design, this algorithm is defined for n = 1,
 * because the gcd of {x} is x. It is not defined for n = 0.
 *
 * @tparam  I   Input iterator.
 * @return  The gcd of the range and the iterator position at termination.
 ','line_number':491,'multiline':True]
['text':' namespace integer','line_number':573,'multiline':False]
['text':' namespace boost','line_number':574,'multiline':False]
['text':' BOOST_INTEGER_COMMON_FACTOR_RT_HPP','line_number':580,'multiline':False]
