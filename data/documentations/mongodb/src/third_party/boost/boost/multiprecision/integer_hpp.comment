['text':'/////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'  Copyright 2012-21 John Maddock.','line_number':2,'multiline':False]
['text':'  Copyright 2021 Iskandarov Lev. Distributed under the Boost','line_number':3,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt','line_number':5,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':' Figure out the kind of integer that has twice as many bits as some builtin','line_number':53,'multiline':False]
['text':' integer type I.  Use a native type if we can (including types which may not','line_number':54,'multiline':False]
['text':' be recognised by boost::int_t because they're larger than long long),','line_number':55,'multiline':False]
['text':' otherwise synthesize a cpp_int to do the job.','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':' namespace detail','line_number':79,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':' Define the floating point type used for std::sqrt, in our tests, sqrt(double) and sqrt(long double) take','line_number':202,'multiline':False]
['text':' about the same amount of time as long as long double is not an emulated 128-bit type (ie the same type','line_number':203,'multiline':False]
['text':' as __float128 from libquadmath).  So only use long double if it's an 80-bit type:','line_number':204,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':' clang has buggy __int128 -> long double conversion:','line_number':209,'multiline':False]
['text':'','line_number':212,'multiline':False]
['text':' As per the Karatsuba sqrt algorithm, the low order bits/4 bits pay no part in the result, only in the remainder,','line_number':213,'multiline':False]
['text':' so define the number of bits our argument must have before passing to std::sqrt is safe, even if doing so','line_number':214,'multiline':False]
['text':' looses a few bits:','line_number':215,'multiline':False]
['text':'','line_number':216,'multiline':False]
['text':'','line_number':218,'multiline':False]
['text':' Type which can hold at least "cutoff" bits:','line_number':219,'multiline':False]
['text':' ','line_number':220,'multiline':False]
['text':'','line_number':226,'multiline':False]
['text':' See if we can take the fast path:','line_number':227,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':' converting to long double can loose some precision, and `sqrt` can give eps error, so we'll fix this','line_number':235,'multiline':False]
['text':' this is needed','line_number':236,'multiline':False]
['text':' in my tests this never fired, but theoretically this might be needed','line_number':239,'multiline':False]
['text':' https://hal.inria.fr/file/index/docid/72854/filename/RR-3805.pdf','line_number':245,'multiline':False]
['text':' we already <<1 it before','line_number':265,'multiline':False]
['text':' we substract after, so it works for unsigned integers too','line_number':268,'multiline':False]
['text':'','line_number':284,'multiline':False]
['text':' This is slow bit-by-bit integer square root, see for example','line_number':285,'multiline':False]
['text':' http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Binary_numeral_system_.28base_2.29','line_number':286,'multiline':False]
['text':' There are better methods such as http://hal.inria.fr/docs/00/07/28/54/PDF/RR-3805.pdf','line_number':287,'multiline':False]
['text':' and http://hal.inria.fr/docs/00/07/21/13/PDF/RR-4475.pdf which should be implemented','line_number':288,'multiline':False]
['text':' at some point.','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':' namespace detail','line_number':326,'multiline':False]
['text':' recursive Karatsuba sqrt can cause issues in constexpr context:','line_number':332,'multiline':False]
['text':' namespace boost::multiprecision','line_number':351,'multiline':False]
