['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'  Copyright 2011 John Maddock. Distributed under the Boost','line_number':2,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' We now require C++11, if something we use is not supported, then error and say why:','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' Thread local storage:','line_number':98,'multiline':False]
['text':' Note fails on Mingw, see https://sourceforge.net/p/mingw-w64/bugs/527/','line_number':99,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':'','line_number':126,'multiline':False]
['text':' MSVC also supports __builtin_is_constant_evaluated if it's recent enough:','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':'','line_number':132,'multiline':False]
['text':' As does GCC-9:','line_number':133,'multiline':False]
['text':'','line_number':134,'multiline':False]
['text':'','line_number':150,'multiline':False]
['text':' Early compiler versions trip over the constexpr code:','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':' Forward-declare an expression wrapper','line_number':241,'multiline':False]
['text':' namespace detail','line_number':245,'multiline':False]
['text':'','line_number':262,'multiline':False]
['text':' Workaround for missing abs(long long) and abs(__int128) on some compilers:','line_number':263,'multiline':False]
['text':'','line_number':264,'multiline':False]
['text':' This strange expression avoids a hardware trap in the corner case','line_number':268,'multiline':False]
['text':' that val is the most negative value permitted in long long.','line_number':269,'multiline':False]
['text':' See https://svn.boost.org/trac/boost/ticket/9740.','line_number':270,'multiline':False]
['text':' This strange expression avoids a hardware trap in the corner case','line_number':284,'multiline':False]
['text':' that val is the most negative value permitted in long long.','line_number':285,'multiline':False]
['text':' See https://svn.boost.org/trac/boost/ticket/9740.','line_number':286,'multiline':False]
['text':'','line_number':588,'multiline':False]
['text':' If we have static_assert we can give a more useful error message','line_number':589,'multiline':False]
['text':' than if we simply have no operator defined at all:','line_number':590,'multiline':False]
['text':'','line_number':591,'multiline':False]
['text':' This should always fail:','line_number':595,'multiline':False]
['text':' This should always fail:','line_number':601,'multiline':False]
['text':' This should always fail:','line_number':607,'multiline':False]
['text':' This should always fail:','line_number':613,'multiline':False]
['text':' This should always fail:','line_number':619,'multiline':False]
['text':' This should always fail:','line_number':626,'multiline':False]
['text':' This should always fail:','line_number':633,'multiline':False]
['text':' This should always fail:','line_number':640,'multiline':False]
['text':' This should always fail:','line_number':647,'multiline':False]
['text':' This should always fail:','line_number':654,'multiline':False]
['text':' This should always fail:','line_number':661,'multiline':False]
['text':' This should always fail:','line_number':668,'multiline':False]
['text':' This should always fail:','line_number':675,'multiline':False]
['text':' This should always fail:','line_number':682,'multiline':False]
['text':' This should always fail:','line_number':689,'multiline':False]
['text':'','line_number':740,'multiline':False]
['text':' If we have static_assert we can give a more useful error message','line_number':741,'multiline':False]
['text':' than if we simply have no operator defined at all:','line_number':742,'multiline':False]
['text':'','line_number':743,'multiline':False]
['text':' This should always fail:','line_number':747,'multiline':False]
['text':' This should always fail:','line_number':753,'multiline':False]
['text':' This should always fail:','line_number':759,'multiline':False]
['text':' This should always fail:','line_number':765,'multiline':False]
['text':' This should always fail:','line_number':771,'multiline':False]
['text':' This should always fail:','line_number':778,'multiline':False]
['text':' This should always fail:','line_number':785,'multiline':False]
['text':' This should always fail:','line_number':792,'multiline':False]
['text':' This should always fail:','line_number':799,'multiline':False]
['text':' This should always fail:','line_number':806,'multiline':False]
['text':' This should always fail:','line_number':813,'multiline':False]
['text':' This should always fail:','line_number':820,'multiline':False]
['text':' This should always fail:','line_number':827,'multiline':False]
['text':' This should always fail:','line_number':834,'multiline':False]
['text':' This should always fail:','line_number':841,'multiline':False]
['text':'','line_number':895,'multiline':False]
['text':' If we have static_assert we can give a more useful error message','line_number':896,'multiline':False]
['text':' than if we simply have no operator defined at all:','line_number':897,'multiline':False]
['text':'','line_number':898,'multiline':False]
['text':' This should always fail:','line_number':902,'multiline':False]
['text':' This should always fail:','line_number':908,'multiline':False]
['text':' This should always fail:','line_number':914,'multiline':False]
['text':' This should always fail:','line_number':920,'multiline':False]
['text':' This should always fail:','line_number':926,'multiline':False]
['text':' This should always fail:','line_number':933,'multiline':False]
['text':' This should always fail:','line_number':940,'multiline':False]
['text':' This should always fail:','line_number':947,'multiline':False]
['text':' This should always fail:','line_number':954,'multiline':False]
['text':' This should always fail:','line_number':961,'multiline':False]
['text':' This should always fail:','line_number':968,'multiline':False]
['text':' This should always fail:','line_number':975,'multiline':False]
['text':' This should always fail:','line_number':982,'multiline':False]
['text':' This should always fail:','line_number':989,'multiline':False]
['text':' This should always fail:','line_number':996,'multiline':False]
['text':'','line_number':1059,'multiline':False]
['text':' If we have static_assert we can give a more useful error message','line_number':1060,'multiline':False]
['text':' than if we simply have no operator defined at all:','line_number':1061,'multiline':False]
['text':'','line_number':1062,'multiline':False]
['text':' This should always fail:','line_number':1066,'multiline':False]
['text':' This should always fail:','line_number':1072,'multiline':False]
['text':' This should always fail:','line_number':1078,'multiline':False]
['text':' This should always fail:','line_number':1084,'multiline':False]
['text':' This should always fail:','line_number':1090,'multiline':False]
['text':' This should always fail:','line_number':1097,'multiline':False]
['text':' This should always fail:','line_number':1104,'multiline':False]
['text':' This should always fail:','line_number':1111,'multiline':False]
['text':' This should always fail:','line_number':1118,'multiline':False]
['text':' This should always fail:','line_number':1125,'multiline':False]
['text':' This should always fail:','line_number':1132,'multiline':False]
['text':' This should always fail:','line_number':1139,'multiline':False]
['text':' This should always fail:','line_number':1146,'multiline':False]
['text':' This should always fail:','line_number':1153,'multiline':False]
['text':' This should always fail:','line_number':1160,'multiline':False]
['text':'','line_number':1231,'multiline':False]
['text':' If we have static_assert we can give a more useful error message','line_number':1232,'multiline':False]
['text':' than if we simply have no operator defined at all:','line_number':1233,'multiline':False]
['text':'','line_number':1234,'multiline':False]
['text':' This should always fail:','line_number':1238,'multiline':False]
['text':' This should always fail:','line_number':1244,'multiline':False]
['text':' This should always fail:','line_number':1250,'multiline':False]
['text':' This should always fail:','line_number':1256,'multiline':False]
['text':' This should always fail:','line_number':1262,'multiline':False]
['text':' This should always fail:','line_number':1269,'multiline':False]
['text':' This should always fail:','line_number':1276,'multiline':False]
['text':' This should always fail:','line_number':1283,'multiline':False]
['text':' This should always fail:','line_number':1290,'multiline':False]
['text':' This should always fail:','line_number':1297,'multiline':False]
['text':' This should always fail:','line_number':1304,'multiline':False]
['text':' This should always fail:','line_number':1311,'multiline':False]
['text':' This should always fail:','line_number':1318,'multiline':False]
['text':' This should always fail:','line_number':1325,'multiline':False]
['text':' This should always fail:','line_number':1332,'multiline':False]
['text':' If we really have so many digits that this fails, then we're probably going to hit other problems anyway:','line_number':1394,'multiline':False]
['text':' We will be printing zero, even though the value might not','line_number':1430,'multiline':False]
['text':' actually be zero (it just may have been rounded to zero).','line_number':1431,'multiline':False]
['text':'','line_number':1461,'multiline':False]
['text':' Suppress trailing zeros:','line_number':1462,'multiline':False]
['text':'','line_number':1463,'multiline':False]
['text':'','line_number':1476,'multiline':False]
['text':' Pad out the end with zero's if we need to:','line_number':1477,'multiline':False]
['text':'','line_number':1478,'multiline':False]
['text':' Just pad out the end with zeros:','line_number':1493,'multiline':False]
['text':' Insert the decimal point:','line_number':1507,'multiline':False]
['text':' we have exactly the digits we require to left of the point','line_number':1511,'multiline':False]
['text':' We may need to add trailing zeros:','line_number':1516,'multiline':False]
['text':' this test is probably redundant, but just to be safe and for clarity','line_number':1518,'multiline':False]
['text':' Scientific format:','line_number':1529,'multiline':False]
['text':' namespace detail','line_number':1602,'multiline':False]
['text':'','line_number':1604,'multiline':False]
['text':' Traits class, lets us know what kind of number we have, defaults to a floating point type:','line_number':1605,'multiline':False]
['text':'','line_number':1606,'multiline':False]
['text':'','line_number':1632,'multiline':False]
['text':' Specializations for types which do not always have numberic_limits specializations:','line_number':1633,'multiline':False]
['text':'','line_number':1634,'multiline':False]
['text':' individual backends must specialize this trait.','line_number':1665,'multiline':False]
['text':' namespace boost','line_number':1698,'multiline':False]
['text':' namespace tools','line_number':1729,'multiline':False]
['text':' namespace constants','line_number':1742,'multiline':False]
['text':' namespace boost::math','line_number':1744,'multiline':False]
['text':' BOOST_MATH_BIG_NUM_BASE_HPP','line_number':1751,'multiline':False]
