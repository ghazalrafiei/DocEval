['text':' Copyright Christopher Kormanyos 2002 - 2013.','line_number':2,'multiline':False]
['text':' Copyright 2011 - 2013 John Maddock.','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':' This work is based on an earlier work:','line_number':8,'multiline':False]
['text':' "Algorithm 910: A Portable C++ Multiple-Precision System for Special-Function Calculations",','line_number':9,'multiline':False]
['text':' in ACM TOMS, {VOL 37, ISSUE 4, (February 2011)} (C) ACM, 2011. http://doi.acm.org/10.1145/1916461.1916469','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' This file has no include guards or namespaces - it's expanded inline inside default_ops.hpp','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' comparison of two constants','line_number':17,'multiline':False]
['text':' conditional expression is constant','line_number':18,'multiline':False]
['text':' Compute the pure power of typename T t^p.','line_number':30,'multiline':False]
['text':' Use the S-and-X binary method, as described in','line_number':31,'multiline':False]
['text':' D. E. Knuth, "The Art of Computer Programming", Vol. 2,','line_number':32,'multiline':False]
['text':' Section 4.6.3 . The resulting computational complexity','line_number':33,'multiline':False]
['text':' is order log2[abs(p)].','line_number':34,'multiline':False]
['text':' This will store the result.','line_number':46,'multiline':False]
['text':' The variable x stores the binary powers of t.','line_number':56,'multiline':False]
['text':' Square x for each binary power.','line_number':61,'multiline':False]
['text':' Multiply the result with each binary power contained in the exponent.','line_number':68,'multiline':False]
['text':' Signed integer power, just take care of the sign then call the unsigned version:','line_number':77,'multiline':False]
['text':' namespace detail','line_number':93,'multiline':False]
['text':' Compute the series representation of Hypergeometric0F0 taken from','line_number':104,'multiline':False]
['text':' http://functions.wolfram.com/HypergeometricFunctions/Hypergeometric0F0/06/01/','line_number':105,'multiline':False]
['text':' There are no checks on input range or parameter boundaries.','line_number':106,'multiline':False]
['text':' Series expansion of hyperg_0f0(; ; x).','line_number':129,'multiline':False]
['text':' Compute the series representation of Hypergeometric1F0 taken from','line_number':150,'multiline':False]
['text':' http://functions.wolfram.com/HypergeometricFunctions/Hypergeometric1F0/06/01/01/','line_number':151,'multiline':False]
['text':' and also see the corresponding section for the power function (i.e. x^a).','line_number':152,'multiline':False]
['text':' There are no checks on input range or parameter boundaries.','line_number':153,'multiline':False]
['text':' Series expansion of hyperg_1f0(a; ; x).','line_number':178,'multiline':False]
['text':' Handle special arguments.','line_number':212,'multiline':False]
['text':' Get local copy of argument and force it to be positive.','line_number':235,'multiline':False]
['text':' Check the range of the argument.','line_number':241,'multiline':False]
['text':'','line_number':244,'multiline':False]
['text':' Use series for exp(x) - 1:','line_number':245,'multiline':False]
['text':'','line_number':246,'multiline':False]
['text':' Check for pure-integer arguments which can be either signed or unsigned.','line_number':278,'multiline':False]
['text':' We have a value that has no fractional part, but is too large to fit','line_number':289,'multiline':False]
['text':' in a long long, in this situation the code below will fail, so','line_number':290,'multiline':False]
['text':' we're just going to assume that this will overflow:','line_number':291,'multiline':False]
['text':' The algorithm for exp has been taken from MPFUN.','line_number':299,'multiline':False]
['text':' exp(t) = [ (1 + r + r^2/2! + r^3/3! + r^4/4! ...)^p2 ] * 2^n','line_number':300,'multiline':False]
['text':' where p2 is a power of 2 such as 2048, r = t_prime / p2, and','line_number':301,'multiline':False]
['text':' t_prime = t - n*ln2, with n chosen to minimize the absolute','line_number':302,'multiline':False]
['text':' value of t_prime. In the resulting Taylor series, which is','line_number':303,'multiline':False]
['text':' implemented as a hypergeometric function, |r| is bounded by','line_number':304,'multiline':False]
['text':' ln2 / p2. For small arguments, no scaling is done.','line_number':305,'multiline':False]
['text':' Compute the exponential series of the (possibly) scaled argument.','line_number':307,'multiline':False]
['text':' Exponent is too large to fit in our exponent type:','line_number':315,'multiline':False]
['text':' The scaling is 2^11 = 2048.','line_number':323,'multiline':False]
['text':'','line_number':347,'multiline':False]
['text':' We use a variation of http://dlmf.nist.gov/4.45#i','line_number':348,'multiline':False]
['text':' using frexp to reduce the argument to x * 2^n,','line_number':349,'multiline':False]
['text':' then let y = x - 1 and compute:','line_number':350,'multiline':False]
['text':' log(x) = log(2) * n + log1p(1 + y)','line_number':351,'multiline':False]
['text':'','line_number':352,'multiline':False]
['text':' -0.3 <= t <= 0.3 ','line_number':396,'multiline':True]
['text':' 0 <= t <= 0.33333 ','line_number':398,'multiline':True]
['text':' Need to check for a an odd integer as a special case:','line_number':503,'multiline':False]
['text':' fallthrough..','line_number':536,'multiline':False]
['text':' conversion failed, just fall through, value is not an integer.','line_number':594,'multiline':False]
['text':' conversion failed, just fall through, value is not an integer.','line_number':616,'multiline':False]
['text':' -1^INF is a special case in C99:','line_number':621,'multiline':False]
['text':' exponent is so large we have no fractional part:','line_number':628,'multiline':False]
['text':' Series expansion for small a.','line_number':662,'multiline':False]
['text':' Series expansion for moderately sized x. Note that for large power of a,','line_number':670,'multiline':False]
['text':' the power of the integer part of a is calculated using the pown function.','line_number':671,'multiline':False]
['text':' Series expansion for pow(x, a). Note that for large power of a, the power','line_number':693,'multiline':False]
['text':' of the integer part of a is calculated using the pown function.','line_number':694,'multiline':False]
['text':' Note this one is restricted to float arguments since pow.hpp already has a version for','line_number':720,'multiline':False]
['text':' integer powers....','line_number':721,'multiline':False]
['text':' Check for pure-integer arguments which can be either signed or unsigned.','line_number':749,'multiline':False]
['text':' Fallthrough ','line_number':765,'multiline':True]
['text':' Fallthrough ','line_number':769,'multiline':True]
['text':' fallthrough...','line_number':816,'multiline':False]
['text':' Handles lack of signed zero in some types','line_number':844,'multiline':False]
['text':' namespace detail','line_number':870,'multiline':False]
