['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'  Copyright 2011 John Maddock. Distributed under the Boost','line_number':2,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':' Non-member operators for number which return expression templates.','line_number':12,'multiline':False]
['text':' ','line_number':13,'multiline':False]
['text':' Note that operators taking rvalue-references DO NOT return expression templates','line_number':14,'multiline':False]
['text':' as this can lead to dangling references, see https://github.com/boostorg/multiprecision/issues/175.','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' Unary operators first.','line_number':17,'multiline':False]
['text':' Note that these *must* return by value, even though that's somewhat against','line_number':18,'multiline':False]
['text':' existing practice.  The issue is that in C++11 land one could easily and legitimately','line_number':19,'multiline':False]
['text':' write:','line_number':20,'multiline':False]
['text':'    auto x = +1234_my_user_defined_suffix;','line_number':21,'multiline':False]
['text':' which would result in a dangling-reference-to-temporary if unary + returned a reference','line_number':22,'multiline':False]
['text':' to it's argument.  While return-by-value is obviously inefficient in other situations','line_number':23,'multiline':False]
['text':' the reality is that no one ever uses unary operator+ anyway...!','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' rvalue ops:','line_number':36,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' Then addition:','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':' Fused multiply add:','line_number':206,'multiline':False]
['text':'','line_number':207,'multiline':False]
['text':'','line_number':272,'multiline':False]
['text':' Fused multiply subtract:','line_number':273,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':'','line_number':328,'multiline':False]
['text':' Repeat operator for negated arguments: propagate the negation to the top level to avoid temporaries:','line_number':329,'multiline':False]
['text':'','line_number':330,'multiline':False]
['text':'','line_number':453,'multiline':False]
['text':' Subtraction:','line_number':454,'multiline':False]
['text':'','line_number':455,'multiline':False]
['text':'','line_number':591,'multiline':False]
['text':' Repeat operator for negated arguments: propagate the negation to the top level to avoid temporaries:','line_number':592,'multiline':False]
['text':'','line_number':593,'multiline':False]
['text':'','line_number':731,'multiline':False]
['text':' Multiplication:','line_number':732,'multiline':False]
['text':'','line_number':733,'multiline':False]
['text':'','line_number':866,'multiline':False]
['text':' Repeat operator for negated arguments: propagate the negation to the top level to avoid temporaries:','line_number':867,'multiline':False]
['text':'','line_number':868,'multiline':False]
['text':'','line_number':1003,'multiline':False]
['text':' Division:','line_number':1004,'multiline':False]
['text':'','line_number':1005,'multiline':False]
['text':'','line_number':1113,'multiline':False]
['text':' Repeat operator for negated arguments: propagate the negation to the top level to avoid temporaries:','line_number':1114,'multiline':False]
['text':'','line_number':1115,'multiline':False]
['text':'','line_number':1227,'multiline':False]
['text':' Modulus:','line_number':1228,'multiline':False]
['text':'','line_number':1229,'multiline':False]
['text':'','line_number':1353,'multiline':False]
['text':' Left shift:','line_number':1354,'multiline':False]
['text':'','line_number':1355,'multiline':False]
['text':'','line_number':1377,'multiline':False]
['text':' Right shift:','line_number':1378,'multiline':False]
['text':'','line_number':1379,'multiline':False]
['text':'','line_number':1403,'multiline':False]
['text':' Bitwise AND:','line_number':1404,'multiline':False]
['text':'','line_number':1405,'multiline':False]
['text':'','line_number':1545,'multiline':False]
['text':' Bitwise OR:','line_number':1546,'multiline':False]
['text':'','line_number':1547,'multiline':False]
['text':'','line_number':1687,'multiline':False]
['text':' Bitwise XOR:','line_number':1688,'multiline':False]
['text':'','line_number':1689,'multiline':False]
['text':' namespace boost::multiprecision','line_number':1829,'multiline':False]
