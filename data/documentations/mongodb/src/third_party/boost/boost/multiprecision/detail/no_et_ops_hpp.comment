['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'  Copyright 2012 John Maddock. Distributed under the Boost','line_number':2,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' Operators for non-expression template enabled number.','line_number':18,'multiline':False]
['text':' NOTE: this is not a complete header - really just a suffix to default_ops.hpp.','line_number':19,'multiline':False]
['text':' NOTE: these operators have to be defined after the methods in default_ops.hpp.','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' Addition:','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' Subtraction:','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' Multiply:','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' divide:','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':' modulus:','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':'','line_number':199,'multiline':False]
['text':' Bitwise or:','line_number':200,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':'','line_number':228,'multiline':False]
['text':' Bitwise xor:','line_number':229,'multiline':False]
['text':'','line_number':230,'multiline':False]
['text':'','line_number':257,'multiline':False]
['text':' Bitwise and:','line_number':258,'multiline':False]
['text':'','line_number':259,'multiline':False]
['text':'','line_number':286,'multiline':False]
['text':' shifts:','line_number':287,'multiline':False]
['text':'','line_number':288,'multiline':False]
['text':'','line_number':310,'multiline':False]
['text':' If we have rvalue references go all over again with rvalue ref overloads and move semantics.','line_number':311,'multiline':False]
['text':' Note that while it would be tempting to implement these so they return an rvalue reference','line_number':312,'multiline':False]
['text':' (and indeed this would be optimally efficient), this is unsafe due to users propensity to','line_number':313,'multiline':False]
['text':' write:','line_number':314,'multiline':False]
['text':'','line_number':315,'multiline':False]
['text':' const T& t = a * b;','line_number':316,'multiline':False]
['text':'','line_number':317,'multiline':False]
['text':' which would lead to a dangling reference if we didn't return by value.  Of course move','line_number':318,'multiline':False]
['text':' semantics help a great deal in return by value, so performance is still pretty good...','line_number':319,'multiline':False]
['text':'','line_number':320,'multiline':False]
['text':'','line_number':334,'multiline':False]
['text':' Addition:','line_number':335,'multiline':False]
['text':'','line_number':336,'multiline':False]
['text':'','line_number':379,'multiline':False]
['text':' Subtraction:','line_number':380,'multiline':False]
['text':'','line_number':381,'multiline':False]
['text':'','line_number':426,'multiline':False]
['text':' Multiply:','line_number':427,'multiline':False]
['text':'','line_number':428,'multiline':False]
['text':'','line_number':471,'multiline':False]
['text':' divide:','line_number':472,'multiline':False]
['text':'','line_number':473,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':' modulus:','line_number':492,'multiline':False]
['text':'','line_number':493,'multiline':False]
['text':'','line_number':511,'multiline':False]
['text':' Bitwise or:','line_number':512,'multiline':False]
['text':'','line_number':513,'multiline':False]
['text':'','line_number':551,'multiline':False]
['text':' Bitwise xor:','line_number':552,'multiline':False]
['text':'','line_number':553,'multiline':False]
['text':'','line_number':591,'multiline':False]
['text':' Bitwise and:','line_number':592,'multiline':False]
['text':'','line_number':593,'multiline':False]
['text':'','line_number':631,'multiline':False]
['text':' shifts:','line_number':632,'multiline':False]
['text':'','line_number':633,'multiline':False]
['text':' namespace boost::multiprecision','line_number':653,'multiline':False]
['text':' BOOST_MP_NO_ET_OPS_HPP','line_number':659,'multiline':False]
