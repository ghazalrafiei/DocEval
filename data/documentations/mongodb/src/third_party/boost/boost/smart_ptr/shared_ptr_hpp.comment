['text':'','line_number':4,'multiline':False]
['text':'  shared_ptr.hpp','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'  (C) Copyright Greg Colvin and Beman Dawes 1998, 1999.','line_number':7,'multiline':False]
['text':'  Copyright (c) 2001-2008 Peter Dimov','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':10,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':11,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':'  See http://www.boost.org/libs/smart_ptr/ for documentation.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' for std::swap','line_number':32,'multiline':False]
['text':' for std::less','line_number':33,'multiline':False]
['text':' for std::bad_cast','line_number':34,'multiline':False]
['text':' for std::size_t','line_number':35,'multiline':False]
['text':' for std::auto_ptr','line_number':36,'multiline':False]
['text':' for std::basic_ostream','line_number':40,'multiline':False]
['text':' namespace movelib','line_number':64,'multiline':False]
['text':' sp_element, element_type','line_number':69,'multiline':False]
['text':' !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )','line_number':92,'multiline':False]
['text':' sp_dereference, return type of operator*','line_number':94,'multiline':False]
['text':' !defined(BOOST_NO_CV_VOID_SPECIALIZATIONS)','line_number':123,'multiline':False]
['text':' !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )','line_number':141,'multiline':False]
['text':' sp_member_access, return type of operator->','line_number':143,'multiline':False]
['text':' !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )','line_number':166,'multiline':False]
['text':' sp_array_access, return type of operator[]','line_number':168,'multiline':False]
['text':' !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )','line_number':191,'multiline':False]
['text':' sp_extent, for operator[] index check','line_number':193,'multiline':False]
['text':' !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )','line_number':207,'multiline':False]
['text':' enable_shared_from_this support','line_number':209,'multiline':False]
['text':' Avoid C4793, ... causes native code generation','line_number':223,'multiline':False]
['text':' _MANAGED','line_number':234,'multiline':False]
['text':' _MANAGED','line_number':240,'multiline':False]
['text':' rvalue auto_ptr support based on a technique by Dave Abrahams','line_number':244,'multiline':False]
['text':' sp_assert_convertible','line_number':257,'multiline':False]
['text':' static_assert( sp_convertible< Y, T >::value );','line_number':263,'multiline':False]
['text':' pointer constructor helper','line_number':275,'multiline':False]
['text':'ppx','line_number':285,'multiline':True]
['text':'ppx','line_number':291,'multiline':True]
['text':' !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )','line_number':297,'multiline':False]
['text':' deleter constructor helper','line_number':299,'multiline':False]
['text':'ppx','line_number':308,'multiline':True]
['text':'p','line_number':308,'multiline':True]
['text':'ppx','line_number':313,'multiline':True]
['text':'p','line_number':313,'multiline':True]
['text':' !defined( BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION )','line_number':318,'multiline':False]
['text':' namespace detail','line_number':324,'multiline':False]
['text':'','line_number':327,'multiline':False]
['text':'  shared_ptr','line_number':328,'multiline':False]
['text':'','line_number':329,'multiline':False]
['text':'  An enhanced relative of scoped_ptr with reference counted copy semantics.','line_number':330,'multiline':False]
['text':'  The object pointed to is deleted when the last shared_ptr pointing to it','line_number':331,'multiline':False]
['text':'  is destroyed or reset.','line_number':332,'multiline':False]
['text':'','line_number':333,'multiline':False]
['text':' Borland 5.5.1 specific workaround','line_number':339,'multiline':False]
['text':' Y must be complete','line_number':371,'multiline':False]
['text':'','line_number':376,'multiline':False]
['text':' Requirements: D's copy/move constructors must not throw','line_number':377,'multiline':False]
['text':'','line_number':378,'multiline':False]
['text':' shared_ptr will release p by calling d(p)','line_number':379,'multiline':False]
['text':'','line_number':380,'multiline':False]
['text':' As above, but with allocator. A's copy constructor shall not throw.','line_number':416,'multiline':False]
['text':'  generated copy constructor, destructor are fine...','line_number':452,'multiline':False]
['text':' ... except in C++0x, move disables the implicit copy','line_number':456,'multiline':False]
['text':' may throw','line_number':465,'multiline':False]
['text':' it is now safe to copy r.px, as pn(r.pn) did not throw','line_number':469,'multiline':False]
['text':' aliasing','line_number':498,'multiline':False]
['text':' BOOST_NO_SFINAE, BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION','line_number':545,'multiline':False]
['text':' BOOST_NO_AUTO_PTR','line_number':547,'multiline':False]
['text':' assignment','line_number':581,'multiline':False]
['text':' BOOST_NO_SFINAE, BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION','line_number':627,'multiline':False]
['text':' BOOST_NO_AUTO_PTR','line_number':629,'multiline':False]
['text':' this_type( static_cast< unique_ptr<Y, D> && >( r ) ).swap( *this );','line_number':645,'multiline':False]
['text':' Move support','line_number':666,'multiline':False]
['text':' aliasing move','line_number':707,'multiline':False]
['text':' Y must be complete','line_number':732,'multiline':False]
['text':' catch self-reset errors','line_number':734,'multiline':False]
['text':' implicit conversion to "bool"','line_number':803,'multiline':False]
['text':' Tasteless as this may seem, making all members public allows member templates','line_number':872,'multiline':False]
['text':' to work in the absence of member template friends. (Matthew Langston)','line_number':873,'multiline':False]
['text':' contained pointer','line_number':885,'multiline':False]
['text':' reference counter','line_number':886,'multiline':False]
['text':' shared_ptr','line_number':888,'multiline':False]
['text':' Resolve the ambiguity between our op!= and the one in rel_ops','line_number':902,'multiline':False]
['text':' !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )','line_number':1027,'multiline':False]
['text':' get_pointer() enables boost::mem_fn to recognize shared_ptr','line_number':1029,'multiline':False]
['text':' operator<<','line_number':1036,'multiline':False]
['text':' in STLport's no-iostreams mode no iostream symbols can be used','line_number':1050,'multiline':False]
['text':' MSVC6 has problems finding std::basic_ostream through the using declaration in namespace _STL','line_number':1054,'multiline':False]
['text':' _STLP_NO_IOSTREAMS','line_number':1065,'multiline':False]
['text':' __GNUC__ < 3','line_number':1067,'multiline':False]
['text':' !defined(BOOST_NO_IOSTREAM)','line_number':1069,'multiline':False]
['text':' get_deleter','line_number':1071,'multiline':False]
['text':' namespace detail','line_number':1113,'multiline':False]
['text':' The following get_deleter method call is fully qualified because','line_number':1127,'multiline':False]
['text':' older versions of gcc (2.95, 3.2.3) fail to compile it when written del_wrapper->get_deleter<D>()','line_number':1128,'multiline':False]
['text':' atomic access','line_number':1135,'multiline':False]
['text':'p','line_number':1139,'multiline':True]
['text':'memory_order mo','line_number':1150,'multiline':True]
['text':'memory_order mo','line_number':1161,'multiline':True]
['text':' std::move( r )','line_number':1163,'multiline':False]
['text':' return std::move( r )','line_number':1174,'multiline':False]
['text':'memory_order mo','line_number':1177,'multiline':True]
['text':' std::move( r )','line_number':1179,'multiline':False]
['text':'memory_order success','line_number':1207,'multiline':True]
['text':'memory_order failure','line_number':1207,'multiline':True]
['text':' std::move( w )','line_number':1209,'multiline':False]
['text':' !defined(BOOST_SP_NO_ATOMIC_ACCESS)','line_number':1212,'multiline':False]
['text':' hash_value','line_number':1214,'multiline':False]
['text':' namespace boost','line_number':1223,'multiline':False]
['text':' std::hash','line_number':1225,'multiline':False]
['text':' namespace std','line_number':1240,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_HDR_FUNCTIONAL)','line_number':1242,'multiline':False]
['text':' namespace detail','line_number':1262,'multiline':False]
['text':' namespace boost','line_number':1271,'multiline':False]
['text':' #ifndef BOOST_SMART_PTR_SHARED_PTR_HPP_INCLUDED','line_number':1277,'multiline':False]
