['text':'  local_shared_ptr.hpp','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'  Copyright 2017 Peter Dimov','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':8,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':9,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':10,'multiline':False]
['text':'','line_number':11,'multiline':False]
['text':'  See http://www.boost.org/libs/smart_ptr/ for documentation.','line_number':12,'multiline':False]
['text':'ppx','line_number':24,'multiline':True]
['text':'ppx','line_number':39,'multiline':True]
['text':'ppx','line_number':54,'multiline':True]
['text':'ppx','line_number':69,'multiline':True]
['text':'ppx','line_number':82,'multiline':True]
['text':' namespace detail','line_number':99,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' local_shared_ptr','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':' as shared_ptr, but local to a thread.','line_number':104,'multiline':False]
['text':' reference count manipulations are non-atomic.','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':' destructor','line_number':127,'multiline':False]
['text':' constructors','line_number':137,'multiline':False]
['text':' internal constructor, used by make_shared','line_number':151,'multiline':False]
['text':' construction from shared_ptr','line_number':190,'multiline':False]
['text':' construction from unique_ptr','line_number':221,'multiline':False]
['text':' !','line_number':241,'multiline':False]
['text':'  : px( r.get() ), pn( new boost::detail::local_counted_impl( shared_ptr<T>( std::move(r) ) ) )','line_number':242,'multiline':False]
['text':'{','line_number':243,'multiline':False]
['text':'    boost::detail::sp_assert_convertible< Y, T >();','line_number':244,'multiline':False]
['text':'}','line_number':245,'multiline':False]
['text':' copy constructor','line_number':247,'multiline':False]
['text':' move constructor','line_number':257,'multiline':False]
['text':' converting copy constructor','line_number':269,'multiline':False]
['text':' converting move constructor','line_number':283,'multiline':False]
['text':' aliasing','line_number':299,'multiline':False]
['text':' assignment','line_number':321,'multiline':False]
['text':' !','line_number':374,'multiline':False]
['text':' reset','line_number':376,'multiline':False]
['text':' Y must be complete','line_number':383,'multiline':False]
['text':' accessors','line_number':412,'multiline':False]
['text':' implicit conversion to "bool"','line_number':437,'multiline':False]
['text':' conversions to shared_ptr, weak_ptr','line_number':445,'multiline':False]
['text':' swap','line_number':483,'multiline':False]
['text':' owner_before','line_number':491,'multiline':False]
['text':' owner_equals','line_number':498,'multiline':False]
['text':' !defined( BOOST_NO_CXX11_RVALUE_REFERENCES )','line_number':652,'multiline':False]
['text':' get_pointer() enables boost::mem_fn to recognize local_shared_ptr','line_number':654,'multiline':False]
['text':' operator<<','line_number':661,'multiline':False]
['text':' !defined(BOOST_NO_IOSTREAM)','line_number':671,'multiline':False]
['text':' get_deleter','line_number':673,'multiline':False]
['text':' hash_value','line_number':680,'multiline':False]
['text':' namespace boost','line_number':689,'multiline':False]
['text':' std::hash','line_number':691,'multiline':False]
['text':' namespace std','line_number':706,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_HDR_FUNCTIONAL)','line_number':708,'multiline':False]
['text':' #ifndef BOOST_SMART_PTR_LOCAL_SHARED_PTR_HPP_INCLUDED','line_number':710,'multiline':False]
