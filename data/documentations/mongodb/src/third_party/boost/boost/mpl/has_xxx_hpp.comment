['text':' Copyright Aleksey Gurtovoy 2002-2006','line_number':5,'multiline':False]
['text':' Copyright David Abrahams 2002-2003','line_number':6,'multiline':False]
['text':' Copyright Daniel Walker 2007','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. ','line_number':9,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at ','line_number':10,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' See http://www.boost.org/libs/mpl for documentation.','line_number':13,'multiline':False]
['text':' $Id$','line_number':15,'multiline':False]
['text':' $Date$','line_number':16,'multiline':False]
['text':' $Revision$','line_number':17,'multiline':False]
['text':' agurt, 11/sep/02: MSVC-specific version (< 7.1), based on a USENET ','line_number':44,'multiline':False]
['text':' newsgroup's posting by John Madsen (comp.lang.c++.moderated, ','line_number':45,'multiline':False]
['text':' 1999-11-12 19:17:06 GMT); the code is _not_ standard-conforming, but ','line_number':46,'multiline':False]
['text':' it works way more reliably than the SFINAE-based implementation','line_number':47,'multiline':False]
['text':' Modified dwa 8/Oct/02 to handle reference types.','line_number':49,'multiline':False]
['text':' MSVC is capable of some kinds of SFINAE.  If U is an incomplete','line_number':68,'multiline':False]
['text':' type, it won't pick the second overload','line_number':69,'multiline':False]
['text':'','line_number':133,'multiline':True]
['text':'','line_number':141,'multiline':True]
['text':'','line_number':147,'multiline':True]
['text':'','line_number':151,'multiline':True]
['text':' SFINAE-based implementations below are derived from a USENET newsgroup's ','line_number':155,'multiline':False]
['text':' posting by Rani Sharoni (comp.lang.c++.moderated, 2002-03-17 07:45:09 PST)','line_number':156,'multiline':False]
['text':' MSVC 7.1 & MSVC 8.0 & VACPP','line_number':162,'multiline':False]
['text':' agurt, 15/jun/05: replace overload-based SFINAE implementation with SFINAE','line_number':164,'multiline':False]
['text':' applied to partial specialization to fix some apparently random failures ','line_number':165,'multiline':False]
['text':' (thanks to Daniel Wallin for researching this!)','line_number':166,'multiline':False]
['text':'','line_number':197,'multiline':True]
['text':'','line_number':232,'multiline':True]
['text':' other SFINAE-capable compilers','line_number':234,'multiline':False]
['text':'','line_number':258,'multiline':True]
['text':' BOOST_WORKAROUND(BOOST_MSVC, <= 1300)','line_number':260,'multiline':False]
['text':' BOOST_MPL_CFG_NO_HAS_XXX','line_number':263,'multiline':False]
['text':' placeholder implementation','line_number':265,'multiline':False]
['text':'','line_number':274,'multiline':True]
['text':'','line_number':280,'multiline':True]
['text':' Create a boolean Metafunction to detect a nested template','line_number':285,'multiline':False]
['text':' member. This implementation is based on a USENET newsgroup's','line_number':286,'multiline':False]
['text':' posting by Aleksey Gurtovoy (comp.lang.c++.moderated, 2002-03-19),','line_number':287,'multiline':False]
['text':' Rani Sharoni's USENET posting cited above, the non-template has_xxx','line_number':288,'multiline':False]
['text':' implementations above, and discussion on the Boost mailing list.','line_number':289,'multiline':False]
['text':' NOTE: Many internal implementation macros take a Boost.Preprocessor','line_number':315,'multiline':False]
['text':' array argument called args which is of the following form.','line_number':316,'multiline':False]
['text':'           ( 4, ( trait, name, max_arity, default_ ) )','line_number':317,'multiline':False]
['text':'','line_number':321,'multiline':True]
['text':'','line_number':325,'multiline':True]
['text':'','line_number':329,'multiline':True]
['text':' Thanks to Guillaume Melquiond for pointing out the need for the','line_number':331,'multiline':False]
['text':' "substitute" template as an argument to the overloaded test','line_number':332,'multiline':False]
['text':' functions to get SFINAE to work for member templates with the','line_number':333,'multiline':False]
['text':' correct name but different number of arguments.','line_number':334,'multiline':False]
['text':'','line_number':341,'multiline':True]
['text':'','line_number':349,'multiline':True]
['text':'','line_number':356,'multiline':True]
['text':'','line_number':361,'multiline':True]
['text':'','line_number':374,'multiline':True]
['text':'','line_number':381,'multiline':True]
['text':'','line_number':390,'multiline':True]
['text':'','line_number':397,'multiline':True]
['text':'','line_number':406,'multiline':True]
['text':'','line_number':414,'multiline':True]
['text':'','line_number':431,'multiline':True]
['text':'','line_number':450,'multiline':True]
['text':' BOOST_MPL_HAS_MEMBER_WITH_FUNCTION_SFINAE expands to the full','line_number':452,'multiline':False]
['text':' implementation of the function-based metafunction. Compile with -E','line_number':453,'multiline':False]
['text':' to see the preprocessor output for this macro.','line_number':454,'multiline':False]
['text':'','line_number':464,'multiline':True]
['text':'','line_number':479,'multiline':True]
['text':'','line_number':488,'multiline':True]
['text':'','line_number':500,'multiline':True]
['text':'','line_number':515,'multiline':True]
['text':'','line_number':527,'multiline':True]
['text':'','line_number':541,'multiline':True]
['text':'','line_number':559,'multiline':True]
['text':'','line_number':569,'multiline':True]
['text':'','line_number':580,'multiline':True]
['text':' BOOST_MPL_HAS_MEMBER_WITH_TEMPLATE_SFINAE expands to the full','line_number':582,'multiline':False]
['text':' implementation of the template-based metafunction. Compile with -E','line_number':583,'multiline':False]
['text':' to see the preprocessor output for this macro.','line_number':584,'multiline':False]
['text':'','line_number':585,'multiline':False]
['text':' Note that if BOOST_MPL_HAS_XXX_NEEDS_NAMESPACE_LEVEL_SUBSTITUTE is','line_number':586,'multiline':False]
['text':' defined BOOST_MPL_HAS_MEMBER_SUBSTITUTE_WITH_TEMPLATE_SFINAE needs','line_number':587,'multiline':False]
['text':' to be expanded at namespace level before','line_number':588,'multiline':False]
['text':' BOOST_MPL_HAS_MEMBER_WITH_TEMPLATE_SFINAE can be used.','line_number':589,'multiline':False]
['text':'','line_number':602,'multiline':True]
['text':' BOOST_MPL_HAS_XXX_NEEDS_TEMPLATE_SFINAE','line_number':604,'multiline':False]
['text':' Note: In the current implementation the parameter and access macros','line_number':606,'multiline':False]
['text':' are no longer expanded.','line_number':607,'multiline':False]
['text':'','line_number':615,'multiline':True]
['text':'','line_number':623,'multiline':True]
['text':' BOOST_MPL_CFG_NO_HAS_XXX_TEMPLATE','line_number':626,'multiline':False]
['text':' placeholder implementation','line_number':628,'multiline':False]
['text':'','line_number':637,'multiline':True]
['text':' BOOST_MPL_CFG_NO_HAS_XXX_TEMPLATE','line_number':639,'multiline':False]
['text':'','line_number':645,'multiline':True]
['text':' BOOST_MPL_HAS_XXX_HPP_INCLUDED','line_number':647,'multiline':False]
