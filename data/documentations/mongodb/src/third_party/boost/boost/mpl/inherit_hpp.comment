['text':'/// header body','line_number':4,'multiline':False]
['text':' Copyright Aleksey Gurtovoy 2001-2004','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. ','line_number':11,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at ','line_number':12,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' See http://www.boost.org/libs/mpl for documentation.','line_number':15,'multiline':False]
['text':' $Id$','line_number':17,'multiline':False]
['text':' $Date$','line_number':18,'multiline':False]
['text':' $Revision$','line_number':19,'multiline':False]
['text':' 'inherit<T1,T2,..,Tn>' metafunction; returns an unspecified class type','line_number':50,'multiline':False]
['text':' produced by public derivation from all metafunction's parameters ','line_number':51,'multiline':False]
['text':' (T1,T2,..,Tn), except the parameters of 'empty_base' class type; ','line_number':52,'multiline':False]
['text':' regardless the position and number of 'empty_base' parameters in the ','line_number':53,'multiline':False]
['text':' metafunction's argument list, derivation from them is always a no-op;','line_number':54,'multiline':False]
['text':' for instance:','line_number':55,'multiline':False]
['text':'      inherit<her>::type == her','line_number':56,'multiline':False]
['text':'      inherit<her,my>::type == struct unspecified : her, my {};','line_number':57,'multiline':False]
['text':'      inherit<empty_base,her>::type == her','line_number':58,'multiline':False]
['text':'      inherit<empty_base,her,empty_base,empty_base>::type == her','line_number':59,'multiline':False]
['text':'      inherit<her,empty_base,my>::type == struct unspecified : her, my {};','line_number':60,'multiline':False]
['text':'      inherit<empty_base,empty_base>::type == empty_base','line_number':61,'multiline':False]
['text':' needed to disambiguate the previous two in case when both ','line_number':90,'multiline':False]
['text':' T1 and T2 == empty_base','line_number':91,'multiline':False]
['text':' namespace aux','line_number':142,'multiline':False]
['text':' BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION','line_number':158,'multiline':False]
['text':' BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS','line_number':168,'multiline':False]
['text':' BOOST_MPL_INHERIT_HPP_INCLUDED','line_number':169,'multiline':False]
['text':'/// iteration','line_number':171,'multiline':False]
['text':'/ primary template','line_number':197,'multiline':False]
['text':' 'na' specialization','line_number':206,'multiline':False]
['text':' BOOST_PP_IS_ITERATING','line_number':229,'multiline':False]
