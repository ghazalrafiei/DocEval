['text':'==============================================================================
    Copyright (c) 2001-2010 Joel de Guzman
    Copyright (c) 2004 Daniel Wallin
    Copyright (c) 2010 Thomas Heller
    Copyright (c) 2015 John Fletcher

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================','line_number':1,'multiline':True]
['text':'#include <boost/assert.hpp>','line_number':13,'multiline':False]
['text':'#include <sstream>','line_number':14,'multiline':False]
['text':' Locals','line_number':28,'multiline':False]
['text':' Map','line_number':29,'multiline':False]
['text':'typedef typename result<let_eval(Vars const&, Map const&, Expr const &, Context const &)>::type result_type;','line_number':122,'multiline':False]
['text':' Fix for bugs (trial)','line_number':132,'multiline':False]
['text':' The idea is to do something which will not be optimised away.','line_number':133,'multiline':False]
['text':'int vsize = boost::fusion::size(vars);','line_number':134,'multiline':False]
['text':'std::stringstream strm;','line_number':135,'multiline':False]
['text':'strm << vsize << std::endl;','line_number':136,'multiline':False]
['text':'int size = strm.str().length();','line_number':137,'multiline':False]
['text':'BOOST_ASSERT(size >= 0);','line_number':138,'multiline':False]
['text':' typedef is_value<result_type> is_val;','line_number':140,'multiline':False]
['text':'if(is_val::value) This seems always to be true','line_number':141,'multiline':False]
['text':'{','line_number':142,'multiline':False]
['text':'   std::cout << "let result has value type" << std::endl;','line_number':143,'multiline':False]
['text':' }','line_number':144,'multiline':False]
['text':'if (is_val(r) ) std::cout << "let returns val" << std::endl;','line_number':145,'multiline':False]
['text':'std::cout << "result is " << r << std::endl;','line_number':146,'multiline':False]
['text':'return r;','line_number':147,'multiline':False]
['text':'typedef is_value<let_type> is_val;','line_number':180,'multiline':False]
['text':'if(is_val::value) //This seems always to be true','line_number':183,'multiline':False]
['text':'{','line_number':184,'multiline':False]
['text':'  std::cout << "let has value type" << std::endl;','line_number':185,'multiline':False]
['text':'}','line_number':186,'multiline':False]
