['text':'  boost/filesystem/directory.hpp  ---------------------------------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Beman Dawes 2002-2009','line_number':3,'multiline':False]
['text':'  Copyright Jan Langer 2002','line_number':4,'multiline':False]
['text':'  Copyright Dietmar Kuehl 2001','line_number':5,'multiline':False]
['text':'  Copyright Vladimir Prus 2002','line_number':6,'multiline':False]
['text':'  Copyright Andrey Semashev 2019','line_number':7,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':9,'multiline':False]
['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':10,'multiline':False]
['text':'  Library home page: http://www.boost.org/libs/filesystem','line_number':12,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':14,'multiline':False]
['text':' std::move','line_number':26,'multiline':False]
['text':' must be the last #include','line_number':37,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':39,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':44,'multiline':False]
['text':'                                                                                      //','line_number':45,'multiline':False]
['text':'                                 directory_entry                                      //','line_number':46,'multiline':False]
['text':'                                                                                      //','line_number':47,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':48,'multiline':False]
['text':'  GCC has a problem with a member function named path within a namespace or','line_number':50,'multiline':False]
['text':'  sub-namespace that also has a class named path. The workaround is to always','line_number':51,'multiline':False]
['text':'  fully qualify the name path when it refers to the class name.','line_number':52,'multiline':False]
['text':' enables class path ctor taking directory_entry','line_number':57,'multiline':False]
['text':'  As of October 2015 the interaction between noexcept and =default is so troublesome','line_number':84,'multiline':False]
['text':'  for VC++, GCC, and probably other compilers, that =default is not used with noexcept','line_number':85,'multiline':False]
['text':'  functions. GCC is not even consistent for the same release on different platforms.','line_number':86,'multiline':False]
['text':' stat()-like','line_number':150,'multiline':False]
['text':' lstat()-like','line_number':151,'multiline':False]
['text':' directory_entry','line_number':152,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':154,'multiline':False]
['text':'                                                                                      //','line_number':155,'multiline':False]
['text':'                            directory_entry overloads                                 //','line_number':156,'multiline':False]
['text':'                                                                                      //','line_number':157,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':158,'multiline':False]
['text':'  Without these functions, calling (for example) 'is_directory' with a 'directory_entry' results in:','line_number':160,'multiline':False]
['text':'  - a conversion to 'path' using 'operator boost::filesystem::path const&()',','line_number':161,'multiline':False]
['text':'  - then a call to 'is_directory(path const& p)' which recomputes the status with 'detail::status(p)'.','line_number':162,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':'  These functions avoid a costly recomputation of the status if one calls 'is_directory(e)' instead of 'is_directory(e.status())'','line_number':164,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':237,'multiline':False]
['text':'                                                                                      //','line_number':238,'multiline':False]
['text':'                            directory_iterator helpers                                //','line_number':239,'multiline':False]
['text':'                                                                                      //','line_number':240,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':241,'multiline':False]
['text':' if a directory cannot be opened because of insufficient permissions, pretend that the directory is empty','line_number':246,'multiline':False]
['text':' recursive_directory_iterator: follow directory symlinks','line_number':247,'multiline':False]
['text':' non-standard extension for recursive_directory_iterator: don't follow dangling directory symlinks,','line_number':248,'multiline':False]
['text':' non-standard extension for recursive_directory_iterator: instead of producing an end iterator on errors,','line_number':249,'multiline':False]
['text':' repeatedly invoke pop() until it succeeds or the iterator becomes equal to end iterator','line_number':250,'multiline':False]
['text':' internal use only','line_number':251,'multiline':False]
['text':' internal use only','line_number':252,'multiline':False]
['text':' namespace detail','line_number':290,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':292,'multiline':False]
['text':'                                                                                      //','line_number':293,'multiline':False]
['text':'                                directory_iterator                                    //','line_number':294,'multiline':False]
['text':'                                                                                      //','line_number':295,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':296,'multiline':False]
['text':' creates the "end" iterator','line_number':311,'multiline':False]
['text':' iterator_facade derived classes don't seem to like implementations in','line_number':313,'multiline':False]
['text':' separate translation unit dll's, so forward to detail functions','line_number':314,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)','line_number':344,'multiline':False]
['text':' Note: The check for handle is needed because the iterator can be copied and the copy','line_number':372,'multiline':False]
['text':' can be incremented to end while the original iterator still refers to the same dir_itr_imp.','line_number':373,'multiline':False]
['text':' intrusive_ptr provides the shallow-copy semantics required for single pass iterators','line_number':378,'multiline':False]
['text':' (i.e. InputIterators). The end iterator is indicated by is_end().','line_number':379,'multiline':False]
['text':'  enable directory_iterator C++11 range-based for statement use  --------------------//','line_number':383,'multiline':False]
['text':' begin() and end() are only used by a range-based for statement in the context of','line_number':385,'multiline':False]
['text':' auto - thus the top-level const is stripped - so returning const is harmless and','line_number':386,'multiline':False]
['text':' emphasizes begin() is just a pass through.','line_number':387,'multiline':False]
['text':' enable C++14 generic accessors for range const iterators','line_number':398,'multiline':False]
['text':'  enable directory_iterator BOOST_FOREACH  -----------------------------------------//','line_number':409,'multiline':False]
['text':' namespace filesystem','line_number':431,'multiline':False]
['text':'  namespace boost template specializations','line_number':433,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':454,'multiline':False]
['text':'                                                                                      //','line_number':455,'multiline':False]
['text':'                      recursive_directory_iterator helpers                            //','line_number':456,'multiline':False]
['text':'                                                                                      //','line_number':457,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':458,'multiline':False]
['text':' Deprecated enum, use directory_options instead','line_number':461,'multiline':False]
['text':' don't follow directory symlinks (default behavior)','line_number':465,'multiline':False]
['text':' follow directory symlinks','line_number':466,'multiline':False]
['text':' internal use only','line_number':467,'multiline':False]
['text':' BOOST_FILESYSTEM_NO_DEPRECATED','line_number':472,'multiline':False]
['text':' directory_options values, declared as unsigned int for ABI compatibility','line_number':483,'multiline':False]
['text':' namespace detail','line_number':493,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':495,'multiline':False]
['text':'                                                                                      //','line_number':496,'multiline':False]
['text':'                           recursive_directory_iterator                               //','line_number':497,'multiline':False]
['text':'                                                                                      //','line_number':498,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':499,'multiline':False]
['text':' creates the "end" iterator','line_number':515,'multiline':False]
['text':' Deprecated constructors','line_number':538,'multiline':False]
['text':' BOOST_FILESYSTEM_NO_DEPRECATED','line_number':548,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)','line_number':564,'multiline':False]
['text':' Note: The check for m_stack.empty() is needed because the iterator can be copied and the copy','line_number':651,'multiline':False]
['text':' can be incremented to end while the original iterator still refers to the same recur_dir_itr_imp.','line_number':652,'multiline':False]
['text':' intrusive_ptr provides the shallow-copy semantics required for single pass iterators','line_number':657,'multiline':False]
['text':' (i.e. InputIterators). The end iterator is indicated by is_end().','line_number':658,'multiline':False]
['text':'  enable recursive directory iterator C++11 range-base for statement use  ----------//','line_number':666,'multiline':False]
['text':' begin() and end() are only used by a range-based for statement in the context of','line_number':668,'multiline':False]
['text':' auto - thus the top-level const is stripped - so returning const is harmless and','line_number':669,'multiline':False]
['text':' emphasizes begin() is just a pass through.','line_number':670,'multiline':False]
['text':' enable C++14 generic accessors for range const iterators','line_number':681,'multiline':False]
['text':'  enable recursive directory iterator BOOST_FOREACH  -------------------------------//','line_number':692,'multiline':False]
['text':' namespace filesystem','line_number':714,'multiline':False]
['text':'  namespace boost template specializations','line_number':716,'multiline':False]
['text':' namespace boost','line_number':729,'multiline':False]
['text':' BOOST_FILESYSTEM_DIRECTORY_HPP','line_number':733,'multiline':False]
