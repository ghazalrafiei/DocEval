['text':'  filesystem path_traits.hpp  --------------------------------------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Beman Dawes 2009','line_number':3,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':6,'multiline':False]
['text':'  Library home page: http://www.boost.org/libs/filesystem','line_number':8,'multiline':False]
['text':' for mbstate_t','line_number':19,'multiline':False]
['text':' must be the last #include','line_number':27,'multiline':False]
['text':'  uses std::codecvt_base::result used for error codes:','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':'    ok:       Conversion successful.','line_number':35,'multiline':False]
['text':'    partial:  Not all source characters converted; one or more additional source','line_number':36,'multiline':False]
['text':'              characters are needed to produce the final target character, or the','line_number':37,'multiline':False]
['text':'              size of the target intermediate buffer was too small to hold the result.','line_number':38,'multiline':False]
['text':'    error:    A character in the source could not be converted to the target encoding.','line_number':39,'multiline':False]
['text':'    noconv:   The source and target characters have the same type and encoding, so no','line_number':40,'multiline':False]
['text':'              conversion was necessary.','line_number':41,'multiline':False]
['text':'  is_pathable type trait; allows disabling over-agressive class path member templates','line_number':49,'multiline':False]
['text':'  Pathable empty','line_number':123,'multiline':False]
['text':' disable_if aids broken compilers (IBM, old GCC, etc.) and is harmless for','line_number':127,'multiline':False]
['text':' conforming compilers. Replace by plain "bool" at some future date (2012?)','line_number':128,'multiline':False]
['text':' value types differ  ---------------------------------------------------------------//','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'   A from_end argument of 0 is less efficient than a known end, so use only if needed','line_number':150,'multiline':False]
['text':'  with codecvt','line_number':152,'multiline':False]
['text':' 0 for null terminated MBCS','line_number':156,'multiline':False]
['text':' 0 for null terminated MBCS','line_number':161,'multiline':False]
['text':'  without codecvt','line_number':176,'multiline':False]
['text':' 0 for null terminated MBCS','line_number':179,'multiline':False]
['text':' 0 for null terminated MBCS','line_number':183,'multiline':False]
['text':' value types same  -----------------------------------------------------------------//','line_number':190,'multiline':False]
['text':' char with codecvt','line_number':192,'multiline':False]
['text':' wchar_t with codecvt','line_number':207,'multiline':False]
['text':' char without codecvt','line_number':222,'multiline':False]
['text':' wchar_t without codecvt','line_number':237,'multiline':False]
['text':'  Source dispatch  -----------------------------------------------------------------//','line_number':252,'multiline':False]
['text':'  contiguous containers with codecvt','line_number':254,'multiline':False]
['text':'  contiguous containers without codecvt','line_number':280,'multiline':False]
['text':'  non-contiguous containers with codecvt','line_number':306,'multiline':False]
['text':' disable_if aids broken compilers (IBM, old GCC, etc.) and is harmless for','line_number':309,'multiline':False]
['text':' conforming compilers. Replace by plain "void" at some future date (2012?)','line_number':310,'multiline':False]
['text':'  c_str','line_number':321,'multiline':False]
['text':'    std::cout << "dispatch() const T *\n";','line_number':325,'multiline':False]
['text':'  Note: there is no dispatch on C-style arrays because the array may','line_number':330,'multiline':False]
['text':'  contain a string smaller than the array size.','line_number':331,'multiline':False]
['text':'  non-contiguous containers without codecvt','line_number':342,'multiline':False]
['text':' disable_if aids broken compilers (IBM, old GCC, etc.) and is harmless for','line_number':345,'multiline':False]
['text':' conforming compilers. Replace by plain "void" at some future date (2012?)','line_number':346,'multiline':False]
['text':'  c_str','line_number':357,'multiline':False]
['text':'    std::cout << "dispatch() const T *\n";','line_number':361,'multiline':False]
['text':'  Note: there is no dispatch on C-style arrays because the array may','line_number':366,'multiline':False]
['text':'  contain a string smaller than the array size.','line_number':367,'multiline':False]
['text':' namespace path_traits','line_number':378,'multiline':False]
['text':' namespace filesystem','line_number':379,'multiline':False]
['text':' namespace boost','line_number':380,'multiline':False]
['text':' BOOST_FILESYSTEM_PATH_TRAITS_HPP','line_number':384,'multiline':False]
