['text':'  boost utility/base_from_member.hpp header file  --------------------------//','line_number':1,'multiline':False]
['text':'  Copyright 2001, 2003, 2004, 2012 Daryle Walker.  Use, modification, and','line_number':3,'multiline':False]
['text':'  distribution are subject to the Boost Software License, Version 1.0.  (See','line_number':4,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or a copy at','line_number':5,'multiline':False]
['text':'  <http://www.boost.org/LICENSE_1_0.txt>.)','line_number':6,'multiline':False]
['text':'  See <http://www.boost.org/libs/utility/> for the library's home page.','line_number':8,'multiline':False]
['text':'  Base-from-member arity configuration macro  ------------------------------//','line_number':24,'multiline':False]
['text':' The following macro determines how many arguments will be in the largest','line_number':26,'multiline':False]
['text':' constructor template of base_from_member.  Constructor templates will be','line_number':27,'multiline':False]
['text':' generated from one argument to this maximum.  Code from other files can read','line_number':28,'multiline':False]
['text':' this number if they need to always match the exact maximum base_from_member','line_number':29,'multiline':False]
['text':' uses.  The maximum constructor length can be changed by overriding the','line_number':30,'multiline':False]
['text':' #defined constant.  Make sure to apply the override, if any, for all source','line_number':31,'multiline':False]
['text':' files during project compiling for consistency.','line_number':32,'multiline':False]
['text':' Contributed by Jonathan Turkanis','line_number':34,'multiline':False]
['text':'  An iteration of a constructor template for base_from_member  -------------//','line_number':41,'multiline':False]
['text':' A macro that should expand to:','line_number':43,'multiline':False]
['text':'     template < typename T1, ..., typename Tn >','line_number':44,'multiline':False]
['text':'     base_from_member( T1 x1, ..., Tn xn )','line_number':45,'multiline':False]
['text':'         : member( x1, ..., xn )','line_number':46,'multiline':False]
['text':'         {}','line_number':47,'multiline':False]
['text':' This macro should only persist within this file.','line_number':48,'multiline':False]
['text':'','line_number':56,'multiline':True]
['text':' BOOST_UTILITY_DOCS','line_number':57,'multiline':False]
['text':'  Type-unmarking class template  -------------------------------------------//','line_number':65,'multiline':False]
['text':' Type-trait to get the raw type, i.e. the type without top-level reference nor','line_number':67,'multiline':False]
['text':' cv-qualification, from a type expression.  Mainly for function arguments, any','line_number':68,'multiline':False]
['text':' reference part is stripped first.','line_number':69,'multiline':False]
['text':' Contributed by Daryle Walker','line_number':71,'multiline':False]
['text':' boost::detail::remove_cv_ref','line_number':79,'multiline':False]
['text':'  Unmarked-type comparison class template  ---------------------------------//','line_number':81,'multiline':False]
['text':' Type-trait to check if two type expressions have the same raw type.','line_number':83,'multiline':False]
['text':' Contributed by Daryle Walker, based on a work-around by Luc Danton','line_number':85,'multiline':False]
['text':'  Enable-if-on-unidentical-unmarked-type class template  -------------------//','line_number':94,'multiline':False]
['text':' Enable-if on the first two type expressions NOT having the same raw type.','line_number':96,'multiline':False]
['text':' Contributed by Daryle Walker, based on a work-around by Luc Danton','line_number':98,'multiline':False]
['text':' namespace boost::detail','line_number':112,'multiline':False]
['text':'  Base-from-member class template  -----------------------------------------//','line_number':115,'multiline':False]
['text':' Helper to initialize a base object so a derived class can use this','line_number':117,'multiline':False]
['text':' object in the initialization of another base class.  Used by','line_number':118,'multiline':False]
['text':' Dietmar Kuehl from ideas by Ron Klatcho to solve the problem of a','line_number':119,'multiline':False]
['text':' base class needing to be initialized by a member.','line_number':120,'multiline':False]
['text':' Contributed by Daryle Walker','line_number':122,'multiline':False]
['text':' no std::is_nothrow_constructible...','line_number':138,'multiline':False]
['text':' ...nor std::forward needed','line_number':139,'multiline':False]
['text':' boost::base_from_member','line_number':151,'multiline':False]
['text':' boost::base_from_member','line_number':164,'multiline':False]
['text':' namespace boost','line_number':166,'multiline':False]
['text':' Undo any private macros','line_number':169,'multiline':False]
['text':' BOOST_UTILITY_BASE_FROM_MEMBER_HPP','line_number':173,'multiline':False]
