['text':'
 * Distributed under the Boost Software License, Version 1.0.(See accompanying 
 * file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)
 * 
 * See http://www.boost.org/libs/iostreams for documentation.
 *
 * File:        boost/iostreams/detail/path.hpp
 * Date:        Sat Jun 21 21:24:05 MDT 2008
 * Copyright:   2008 CodeRage, LLC
 * Author:      Jonathan Turkanis
 * Contact:     turkanis at coderage dot com
 *
 * Defines the class boost::iostreams::detail::path, for storing a 
 * a std::string or std::wstring.
 *
 * This class allows interoperability with Boost.Filesystem without
 * creating a dependence on Boost.Filesystem headers or implementation.
 ','line_number':1,'multiline':True]
['text':'------------------------------------//','line_number':35,'multiline':False]
['text':' Default constructor','line_number':45,'multiline':False]
['text':' Constructor taking a std::string','line_number':48,'multiline':False]
['text':' Constructor taking a C-style string','line_number':51,'multiline':False]
['text':' Constructor taking a boost::filesystem2::path or','line_number':54,'multiline':False]
['text':' boost::filesystem2::wpath','line_number':55,'multiline':False]
['text':' Constructor taking a boost::filesystem3::path (boost filesystem v3)','line_number':62,'multiline':False]
['text':' Copy constructor','line_number':69,'multiline':False]
['text':' Assignment operator taking another path','line_number':74,'multiline':False]
['text':' Assignment operator taking a std::string','line_number':83,'multiline':False]
['text':' Assignment operator taking a C-style string','line_number':92,'multiline':False]
['text':' Assignment operator taking a boost::filesystem2::path or','line_number':102,'multiline':False]
['text':' boost::filesystem2::wpath','line_number':103,'multiline':False]
['text':' (not on Visual C++ 7.1/8.0, as it seems to have problems with','line_number':104,'multiline':False]
['text':' SFINAE functions with the same parameters, doesn't seem','line_number':105,'multiline':False]
['text':' worth working around).','line_number':106,'multiline':False]
['text':' Assignment operator taking a boost::filesystem3::path','line_number':116,'multiline':False]
['text':' Returns a representation of the underlying path as a std::string','line_number':127,'multiline':False]
['text':' Requires: is_wide() returns false','line_number':128,'multiline':False]
['text':' Returns a representation of the underlying path as a std::wstring','line_number':131,'multiline':False]
['text':' Requires: is_wide() returns true','line_number':132,'multiline':False]
['text':' For wide-character paths, use a boost::filesystem::wpath instead of a','line_number':136,'multiline':False]
['text':' std::wstring','line_number':137,'multiline':False]
['text':' #ifndef BOOST_IOSTREAMS_NO_WIDE_STREAMS //---------------------------//','line_number':167,'multiline':False]
['text':' #ifndef BOOST_IOSTREAMS_NO_WIDE_STREAMS //--------------------------//','line_number':210,'multiline':False]
['text':' End namespaces detail, iostreams, boost.','line_number':212,'multiline':False]
['text':' #ifndef BOOST_IOSTREAMS_DETAIL_PATH_HPP_INCLUDED','line_number':214,'multiline':False]
