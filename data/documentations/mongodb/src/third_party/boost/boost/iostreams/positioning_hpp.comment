['text':' (C) Copyright 2008 CodeRage, LLC (turkanis at coderage dot com)','line_number':1,'multiline':False]
['text':' (C) Copyright 2003-2007 Jonathan Turkanis','line_number':2,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)','line_number':4,'multiline':False]
['text':' See http://www.boost.org/libs/iostreams for documentation.','line_number':6,'multiline':False]
['text':' Thanks to Gareth Sylvester-Bradley for the Dinkumware versions of the','line_number':8,'multiline':False]
['text':' positioning functions.','line_number':9,'multiline':False]
['text':' mbstate_t.','line_number':21,'multiline':False]
['text':' streamoff, streampos.','line_number':23,'multiline':False]
['text':' Must come last.','line_number':25,'multiline':False]
['text':'------------------Definition of stream_offset-------------------------------//','line_number':34,'multiline':False]
['text':'------------------Definition of stream_offset_to_streamoff------------------//','line_number':38,'multiline':False]
['text':'------------------Definition of offset_to_position--------------------------//','line_number':43,'multiline':False]
['text':' # ifndef BOOST_IOSTREAMS_HAS_DINKUMWARE_FPOS','line_number':49,'multiline':False]
['text':' # ifndef BOOST_IOSTREAMS_HAS_DINKUMWARE_FPOS','line_number':54,'multiline':False]
['text':'------------------Definition of position_to_offset--------------------------//','line_number':56,'multiline':False]
['text':' Hande custom pos_type's','line_number':58,'multiline':False]
['text':' # ifndef BOOST_IOSTREAMS_HAS_DINKUMWARE_FPOS','line_number':67,'multiline':False]
['text':' In the Dinkumware standard library, a std::streampos consists of two stream','line_number':69,'multiline':False]
['text':' offsets -- _Fpos, of type std::fpos_t, and _Myoff, of type std::streamoff --','line_number':70,'multiline':False]
['text':' together with a conversion state. A std::streampos is converted to a ','line_number':71,'multiline':False]
['text':' boost::iostreams::stream_offset by extracting the two stream offsets and','line_number':72,'multiline':False]
['text':' summing them. The value of _Fpos can be extracted using the implementation-','line_number':73,'multiline':False]
['text':' defined member functions seekpos() or get_fpos_t(), depending on the ','line_number':74,'multiline':False]
['text':' Dinkumware version. The value of _Myoff cannot be extracted directly, but can','line_number':75,'multiline':False]
['text':' be calculated as the difference between the result of converting the ','line_number':76,'multiline':False]
['text':' std::fpos to a std::streamoff and the result of converting the member _Fpos','line_number':77,'multiline':False]
['text':' to a long. The latter operation is accomplished with the macro BOOST_IOSTREAMS_FPOSOFF,','line_number':78,'multiline':False]
['text':' which works correctly on platforms where std::fpos_t is an integral type and ','line_number':79,'multiline':False]
['text':' platforms where it is a struct','line_number':80,'multiline':False]
['text':' Converts a std::fpos_t to a stream_offset','line_number':82,'multiline':False]
['text':' Extracts the member _Fpos from a std::fpos','line_number':92,'multiline':False]
['text':' # ifndef BOOST_IOSTREAMS_HAS_DINKUMWARE_FPOS ','line_number':111,'multiline':False]
['text':' End namespaces iostreams, boost.','line_number':113,'multiline':False]
['text':' #ifndef BOOST_IOSTREAMS_POSITIONING_HPP_INCLUDED','line_number':117,'multiline':False]
