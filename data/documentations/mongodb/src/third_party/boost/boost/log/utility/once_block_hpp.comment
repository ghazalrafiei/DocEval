['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   once_block.hpp
 * \author Andrey Semashev
 * \date   23.06.2010
 *
 * \brief  The header defines classes and macros for once-blocks.
 ','line_number':7,'multiline':True]
['text':'!
 * \brief A flag to detect if a code block has already been executed.
 *
 * This structure should be used in conjunction with the \c BOOST_LOG_ONCE_BLOCK_FLAG
 * macro. Usage example:
 *
 * <code>
 * once_block_flag flag = BOOST_LOG_ONCE_BLOCK_INIT;
 *
 * void foo()
 * {
 *     BOOST_LOG_ONCE_BLOCK_FLAG(flag)
 *     {
 *         puts("Hello, world once!");
 *     }
 * }
 * </code>
 ','line_number':32,'multiline':True]
['text':' Do not use, implementation detail','line_number':53,'multiline':False]
['text':' this must be zero, so that zero-initialized once_block_flag is equivalent to the one initialized with uninitialized','line_number':56,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':61,'multiline':False]
['text':'!
 * \def BOOST_LOG_ONCE_BLOCK_INIT
 *
 * The static initializer for \c once_block_flag.
 ','line_number':64,'multiline':True]
['text':'  Non-copyable, non-assignable','line_number':100,'multiline':False]
['text':' namespace aux','line_number':105,'multiline':False]
['text':' namespace log','line_number':107,'multiline':False]
['text':' namespace boost','line_number':109,'multiline':False]
['text':' BOOST_LOG_NO_THREADS','line_number':111,'multiline':False]
['text':'  Non-copyable, non-assignable','line_number':146,'multiline':False]
['text':' namespace aux','line_number':151,'multiline':False]
['text':' namespace log','line_number':153,'multiline':False]
['text':' namespace boost','line_number':155,'multiline':False]
['text':' BOOST_LOG_NO_THREADS','line_number':157,'multiline':False]
['text':' NOTE: flag_var deliberately doesn't have an initializer so that it is zero-initialized at the static initialization stage','line_number':165,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':170,'multiline':False]
['text':'!
 * \def BOOST_LOG_ONCE_BLOCK_FLAG(flag_var)
 *
 * Begins a code block to be executed only once, with protection against thread concurrency.
 * User has to provide the flag variable that controls whether the block has already
 * been executed.
 ','line_number':172,'multiline':True]
['text':'!
 * \def BOOST_LOG_ONCE_BLOCK()
 *
 * Begins a code block to be executed only once, with protection against thread concurrency.
 ','line_number':184,'multiline':True]
['text':' BOOST_LOG_UTILITY_ONCE_BLOCK_HPP_INCLUDED_','line_number':196,'multiline':False]
