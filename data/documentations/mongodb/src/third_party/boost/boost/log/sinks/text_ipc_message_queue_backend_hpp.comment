['text':'
 *                 Copyright Lingxi Li 2015.
 *              Copyright Andrey Semashev 2016.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   text_ipc_message_queue_backend.hpp
 * \author Lingxi Li
 * \author Andrey Semashev
 * \date   14.10.2015
 *
 * The header contains implementation of a text interprocess message queue sink
 * backend along with implementation of a supporting interprocess message queue.
 ','line_number':8,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':60,'multiline':False]
['text':'!
 * \brief An implementation of a text interprocess message queue sink backend and
 *        a supporting interprocess message queue.
 *
 * The sink backend sends formatted log messages to an interprocess message queue
 * which can be extracted by a viewer process. Methods of this class are not
 * thread-safe, unless otherwise specified.
 ','line_number':62,'multiline':True]
['text':'! Base type','line_number':74,'multiline':False]
['text':'! Character type','line_number':78,'multiline':False]
['text':'! String type to be used as a message text holder','line_number':80,'multiline':False]
['text':'! Interprocess message queue type','line_number':82,'multiline':False]
['text':'! Interprocess queue','line_number':86,'multiline':False]
['text':'!
     * Default constructor. The method constructs the backend using the default-constructed
     * interprocess message queue. The queue may need additional setup in order to be able
     * to send messages.
     ','line_number':90,'multiline':True]
['text':'!
     * Initializing constructor. The method constructs the backend using the provided
     * interprocess message queue. The constructor moves from the provided queue.
     ','line_number':99,'multiline':True]
['text':'!
     * Constructor that passes arbitrary named parameters to the interprocess queue constructor.
     * Refer to the queue documentation for the list of supported parameters.
     ','line_number':108,'multiline':True]
['text':'!
     * The method returns a reference to the managed \c queue_type object.
     *
     * \return A reference to the managed \c queue_type object.
     ','line_number':119,'multiline':True]
['text':'!
     * The method returns a constant reference to the managed \c queue_type object.
     *
     * \return A constant reference to the managed \c queue_type object.
     ','line_number':126,'multiline':True]
['text':'!
     * Tests whether the object is associated with any message queue. Only when the backend has
     * an associated message queue, will any message be sent.
     *
     * \return \c true if the object is associated with a message queue, and \c false otherwise.
     ','line_number':133,'multiline':True]
['text':'!
     * The method writes the message to the backend. Concurrent calls to this method
     * are allowed. Therefore, the backend may be used with unlocked frontend. <tt>stop_local()</tt>
     * can be used to have a blocked <tt>consume()</tt> call return and prevent future
     * calls to <tt>consume()</tt> from blocking.
     ','line_number':141,'multiline':True]
['text':' namespace sinks','line_number':164,'multiline':False]
['text':' namespace log','line_number':166,'multiline':False]
['text':' namespace boost','line_number':168,'multiline':False]
['text':' BOOST_LOG_SINKS_TEXT_IPC_MESSAGE_QUEUE_BACKEND_HPP_INCLUDED_','line_number':172,'multiline':False]
