['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   exception_handler.hpp
 * \author Andrey Semashev
 * \date   12.07.2009
 *
 * This header contains tools for exception handlers support in different parts of the library.
 ','line_number':7,'multiline':True]
['text':' std::nothrow_t','line_number':18,'multiline':False]
['text':'! Maximum number of exception types that can be specified for exception handlers','line_number':38,'multiline':False]
['text':'! Root class for the exception handler class hierarchy','line_number':50,'multiline':False]
['text':'! The exception handler type','line_number':55,'multiline':False]
['text':'! The handler result type','line_number':57,'multiline':False]
['text':'! Exception handler','line_number':61,'multiline':False]
['text':'! Initializing constructor','line_number':65,'multiline':False]
['text':'! Exception launcher','line_number':70,'multiline':False]
['text':'! A cons-list element of the exception handler class hierarchy','line_number':77,'multiline':False]
['text':'! Base type','line_number':82,'multiline':False]
['text':'! The exception handler type','line_number':86,'multiline':False]
['text':'! Initializing constructor','line_number':90,'multiline':False]
['text':'! Exception launcher','line_number':95,'multiline':False]
['text':' namespace aux','line_number':115,'multiline':False]
['text':'!
 * An exception handler functional object. The handler aggregates a user-defined
 * functional object that will be called when one of the specified exception types
 * is caught.
 ','line_number':117,'multiline':True]
['text':'! Base type','line_number':130,'multiline':False]
['text':'! The exception handler type','line_number':141,'multiline':False]
['text':'! The handler result type','line_number':143,'multiline':False]
['text':'!
     * Initializing constructor. Creates an exception handler with the specified
     * function object that will receive the exception.
     ','line_number':148,'multiline':True]
['text':'!
     * Exception launcher. Rethrows the current exception in order to detect its type
     * and pass it to the aggregated function object.
     *
     * \note Must be called from within a \c catch statement.
     ','line_number':156,'multiline':True]
['text':'!
 * A no-throw exception handler functional object. Acts similar to \c exception_handler,
 * but in case if the exception cannot be handled the exception is not propagated
 * from the handler. Instead the user-defined functional object is called with
 * no parameters.
 ','line_number':168,'multiline':True]
['text':'! Base type','line_number':178,'multiline':False]
['text':'! The exception handler type','line_number':185,'multiline':False]
['text':'! The handler result type','line_number':187,'multiline':False]
['text':'!
     * Initializing constructor. Creates an exception handler with the specified
     * function object that will receive the exception.
     ','line_number':192,'multiline':True]
['text':'!
     * Exception launcher. Rethrows the current exception in order to detect its type
     * and pass it to the aggregated function object. If the type of the exception
     * could not be detected, the user-defined handler is called with no arguments.
     *
     * \note Must be called from within a \c catch statement.
     ','line_number':200,'multiline':True]
['text':'!
 * The function creates an empty exception handler that effectively suppresses any exception
 ','line_number':220,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':280,'multiline':False]
['text':'!
 * The function creates an exception handler functional object. The handler will call to the
 * user-specified functional object with an exception as its argument.
 *
 * \param handler User-defined functional object that will receive exceptions.
 * \return A nullary functional object that should be called from within a \c catch statement.
 *
 * \note This form requires the user-defined functional object to have an \c exception_types
 *       nested type. This type should be an MPL sequence of all expected exception types.
 ','line_number':282,'multiline':True]
['text':'!
 * The function creates an exception handler functional object. The handler will call to the
 * user-specified functional object with an exception as its argument. If the exception type
 * cannot be identified, the handler will call the user-defined functor with no arguments,
 * instead of propagating exception to the caller.
 *
 * \overload
 *
 * \param handler User-defined functional object that will receive exceptions.
 * \return A nullary functional object that should be called from within a \c catch statement.
 *
 * \note This form requires the user-defined functional object to have an \c exception_types
 *       nested type. This type should be an MPL sequence of all expected exception types.
 ','line_number':296,'multiline':True]
['text':'!
 * The function creates an exception handler functional object. The handler will call to the
 * user-specified functional object with an exception as its argument. All expected exception
 * types should be specified as first template parameters explicitly, in the order they would
 * be specified in a corresponding <tt>try/catch</tt> statement.
 *
 * \overload
 *
 * \param handler User-defined functional object that will receive exceptions.
 * \return A nullary functional object that should be called from within a \c catch statement.
 ','line_number':314,'multiline':True]
['text':'!
 * The function creates an exception handler functional object. The handler will call to the
 * user-specified functional object with an exception as its argument. If the exception type
 * cannot be identified, the handler will call the user-defined functor with no arguments,
 * instead of propagating exception to the caller. All expected exception types should be
 * specified as first template parameters explicitly, in the order they would be specified in
 * a corresponding <tt>try/catch</tt> statement.
 *
 * \overload
 *
 * \param handler User-defined functional object that will receive exceptions.
 * \return A nullary functional object that should be called from within a \c catch statement.
 ','line_number':329,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':346,'multiline':False]
['text':' namespace log','line_number':348,'multiline':False]
['text':' namespace boost','line_number':350,'multiline':False]
['text':' BOOST_LOG_UTILITY_EXCEPTION_HANDLER_HPP_INCLUDED_','line_number':354,'multiline':False]
