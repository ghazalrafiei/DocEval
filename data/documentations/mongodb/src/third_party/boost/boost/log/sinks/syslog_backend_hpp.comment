['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   syslog_backend.hpp
 * \author Andrey Semashev
 * \date   08.01.2008
 *
 * The header contains implementation of a Syslog sink backend along with its setup facilities.
 ','line_number':7,'multiline':True]
['text':'! Supported IP protocol versions','line_number':46,'multiline':False]
['text':'! The enumeration defined the possible implementation types for the syslog backend','line_number':55,'multiline':False]
['text':'!< Use native syslog API','line_number':59,'multiline':False]
['text':'!< Use UDP sockets, according to RFC3164','line_number':65,'multiline':False]
['text':'!
     * \brief Straightforward severity level mapping
     *
     * This type of mapping assumes that attribute with a particular name always
     * provides values that map directly onto the Syslog levels. The mapping
     * simply returns the extracted attribute value converted to the Syslog severity level.
     ','line_number':69,'multiline':True]
['text':'! Base type','line_number':80,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':84,'multiline':True]
['text':'!
     * \brief Customizable severity level mapping
     *
     * The class allows to setup a custom mapping between an attribute and Syslog severity levels.
     * The mapping should be initialized similarly to the standard \c map container, by using
     * indexing operator and assignment.
     ','line_number':95,'multiline':True]
['text':'! Base type','line_number':106,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':110,'multiline':True]
['text':' namespace syslog','line_number':121,'multiline':False]
['text':'!
 * \brief An implementation of a syslog sink backend
 *
 * The backend provides support for the syslog protocol, defined in RFC3164.
 * The backend sends log records to a remote host via UDP. The host name can
 * be specified by calling the \c set_target_address method. By default log
 * records will be sent to localhost:514. The local address can be specified
 * as well, by calling the \c set_local_address method. By default syslog
 * packets will be sent from any local address available.
 *
 * It is safe to create several sink backends with the same local addresses -
 * the backends within the process will share the same socket. The same applies
 * to different processes that use the syslog backends to send records from
 * the same socket. However, it is not guaranteed to work if some third party
 * facility is using the socket.
 *
 * On systems with native syslog implementation it may be preferable to utilize
 * the POSIX syslog API instead of direct socket management in order to bypass
 * possible security limitations that may be in action. To do so one has to pass
 * the <tt>use_impl = native</tt> to the backend constructor. Note, however,
 * that in that case you will only have one chance to specify syslog facility and
 * process identification string - on the first native syslog backend construction.
 * Other native syslog backends will ignore these parameters.
 * Obviously, the \c set_local_address and \c set_target_address
 * methods have no effect for native backends. Using <tt>use_impl = native</tt>
 * on platforms with no native support for POSIX syslog API will have no effect.
 ','line_number':123,'multiline':True]
['text':'! Base type','line_number':153,'multiline':False]
['text':'! Implementation type','line_number':155,'multiline':False]
['text':'! Character type','line_number':159,'multiline':False]
['text':'! String type that is used to pass message test','line_number':161,'multiline':False]
['text':'! Syslog severity level mapper type','line_number':164,'multiline':False]
['text':'! Pointer to the implementation','line_number':168,'multiline':False]
['text':'!
     * Constructor. Creates a UDP socket-based backend with <tt>syslog::user</tt> facility code.
     * IPv4 protocol will be used.
     ','line_number':172,'multiline':True]
['text':'!
     * Constructor. Creates a sink backend with the specified named parameters.
     * The following named parameters are supported:
     *
     * \li \c facility - Specifies the facility code. If not specified, <tt>syslog::user</tt> will be used.
     * \li \c use_impl - Specifies the backend implementation. Can be one of:
     *                   \li \c native - Use the native syslog API, if available. If no native API
     *                                   is available, it is equivalent to \c udp_socket_based.
     *                   \li \c udp_socket_based - Use the UDP socket-based implementation, conforming to
     *                                             RFC3164 protocol specification. This is the default.
     * \li \c ip_version - Specifies IP protocol version to use, in case if socket-based implementation
     *                     is used. Can be either \c v4 (the default one) or \c v6.
     * \li \c ident - Process identification string. This parameter is only supported by native syslog implementation.
     ','line_number':177,'multiline':True]
['text':'!
     * Destructor
     ','line_number':198,'multiline':True]
['text':'!
     * The method installs the function object that maps application severity levels to syslog levels
     ','line_number':203,'multiline':True]
['text':'!
     * The method sets the local host name which log records will be sent from. The host name
     * is resolved to obtain the final IP address.
     *
     * \note Does not have effect if the backend was constructed to use native syslog API
     *
     * \param addr The local address
     * \param port The local port number
     ','line_number':210,'multiline':True]
['text':'!
     * The method sets the local address which log records will be sent from.
     *
     * \note Does not have effect if the backend was constructed to use native syslog API
     *
     * \param addr The local address
     * \param port The local port number
     ','line_number':220,'multiline':True]
['text':'!
     * The method sets the remote host name where log records will be sent to. The host name
     * is resolved to obtain the final IP address.
     *
     * \note Does not have effect if the backend was constructed to use native syslog API
     *
     * \param addr The remote host address
     * \param port The port number on the remote host
     ','line_number':230,'multiline':True]
['text':'!
     * The method sets the address of the remote host where log records will be sent to.
     *
     * \note Does not have effect if the backend was constructed to use native syslog API
     *
     * \param addr The remote host address
     * \param port The port number on the remote host
     ','line_number':240,'multiline':True]
['text':' !defined(BOOST_LOG_NO_ASIO)','line_number':250,'multiline':False]
['text':'!
     * The method passes the formatted message to the syslog API or sends to a syslog server
     ','line_number':252,'multiline':True]
['text':'! The method creates the backend implementation','line_number':259,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':275,'multiline':False]
['text':' namespace sinks','line_number':278,'multiline':False]
['text':' namespace log','line_number':280,'multiline':False]
['text':' namespace boost','line_number':282,'multiline':False]
['text':' BOOST_LOG_WITHOUT_SYSLOG','line_number':286,'multiline':False]
['text':' BOOST_LOG_SINKS_SYSLOG_BACKEND_HPP_INCLUDED_','line_number':288,'multiline':False]
