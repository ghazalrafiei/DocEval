['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   attribute.hpp
 * \author Andrey Semashev
 * \date   15.04.2007
 *
 * The header contains attribute interface definition.
 ','line_number':7,'multiline':True]
['text':'! Reference proxy object to implement \c operator[]','line_number':40,'multiline':False]
['text':' namespace aux','line_number':43,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':45,'multiline':False]
['text':'!
 * \brief A base class for an attribute value factory
 *
 * Every attribute is represented with a factory that is basically an attribute value generator.
 * The sole purpose of an attribute is to return an actual value when requested. A simplest attribute
 * can always return the same value that it stores internally, but more complex ones can
 * perform a considerable amount of work to return a value, and the returned values may differ
 * each time requested.
 *
 * A word about thread safety. An attribute should be prepared to be requested a value from
 * multiple threads concurrently.
 ','line_number':47,'multiline':True]
['text':'!
     * \brief A base class for an attribute value factory
     *
     * All attributes must derive their implementation from this class.
     ','line_number':64,'multiline':True]
['text':'!
         * \brief Virtual destructor
         ','line_number':72,'multiline':True]
['text':'!
         * \return The actual attribute value. It shall not return empty values (exceptions
         *         shall be used to indicate errors).
         ','line_number':77,'multiline':True]
['text':'! Pointer to the attribute factory implementation','line_number':88,'multiline':False]
['text':'!
     * Default constructor. Creates an empty attribute value factory, which is not usable until
     * \c set_impl is called.
     ','line_number':92,'multiline':True]
['text':'!
     * Copy constructor
     ','line_number':98,'multiline':True]
['text':'!
     * Move constructor
     ','line_number':103,'multiline':True]
['text':'!
     * Initializing constructor
     *
     * \param p Pointer to the implementation. Must not be \c NULL.
     ','line_number':108,'multiline':True]
['text':'!
     * Copy assignment
     ','line_number':115,'multiline':True]
['text':'!
     * Move assignment
     ','line_number':124,'multiline':True]
['text':'!
     * Verifies that the factory is not in empty state
     ','line_number':137,'multiline':True]
['text':'!
     * Verifies that the factory is in empty state
     ','line_number':142,'multiline':True]
['text':'!
     * \return The actual attribute value. It shall not return empty values (exceptions
     *         shall be used to indicate errors).
     ','line_number':147,'multiline':True]
['text':'!
     * The method swaps two factories (i.e. their implementations).
     ','line_number':153,'multiline':True]
['text':'!
     * \returns The pointer to the implementation
     ','line_number':159,'multiline':True]
['text':'!
     * Sets the pointer to the factory implementation.
     *
     * \param p Pointer to the implementation. Must not be \c NULL.
     ','line_number':163,'multiline':True]
['text':'!
 * The function swaps two attribute value factories
 ','line_number':174,'multiline':True]
['text':' namespace log','line_number':182,'multiline':False]
['text':' namespace boost','line_number':184,'multiline':False]
['text':' BOOST_LOG_ATTRIBUTES_ATTRIBUTE_HPP_INCLUDED_','line_number':191,'multiline':False]
