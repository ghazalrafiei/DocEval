['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   formatters/c_decorator.hpp
 * \author Andrey Semashev
 * \date   18.11.2012
 *
 * The header contains implementation of C-style character decorators.
 ','line_number':7,'multiline':True]
['text':' BOOST_LOG_USE_CHAR','line_number':72,'multiline':False]
['text':' BOOST_LOG_USE_WCHAR_T','line_number':124,'multiline':False]
['text':' namespace aux','line_number':143,'multiline':False]
['text':'!
 * C-style decorator generator object. The decorator replaces characters with specific meaning in C
 * language with the corresponding escape sequences. The generator provides <tt>operator[]</tt> that
 * can be used to construct the actual decorator. For example:
 *
 * <code>
 * c_decor[ stream << attr< std::string >("MyAttr") ]
 * </code>
 *
 * For wide-character formatting there is the similar \c wc_decor decorator generator object.
 ','line_number':145,'multiline':True]
['text':'!
 * The function creates a C-style decorator generator for arbitrary character type.
 ','line_number':163,'multiline':True]
['text':'!
 * A character decorator implementation that escapes all non-prontable and non-ASCII characters
 * in the output with C-style escape sequences.
 ','line_number':172,'multiline':True]
['text':'! Base type','line_number':181,'multiline':False]
['text':'! Result type','line_number':185,'multiline':False]
['text':'! Character type','line_number':187,'multiline':False]
['text':'! String type','line_number':189,'multiline':False]
['text':'! Traits type','line_number':193,'multiline':False]
['text':'! Default constructor','line_number':197,'multiline':False]
['text':'! Applies string replacements starting from the specified position','line_number':202,'multiline':False]
['text':' namespace aux','line_number':242,'multiline':False]
['text':'!
 * C-style decorator generator object. Acts similarly to \c c_decor, except that \c c_ascii_decor also
 * converts all non-ASCII and non-printable ASCII characters, except for space character, into
 * C-style hexadecimal escape sequences. The generator provides <tt>operator[]</tt> that
 * can be used to construct the actual decorator. For example:
 *
 * <code>
 * c_ascii_decor[ stream << attr< std::string >("MyAttr") ]
 * </code>
 *
 * For wide-character formatting there is the similar \c wc_ascii_decor decorator generator object.
 ','line_number':244,'multiline':True]
['text':'!
 * The function creates a C-style decorator generator for arbitrary character type.
 ','line_number':263,'multiline':True]
['text':' namespace expressions','line_number':272,'multiline':False]
['text':' namespace log','line_number':274,'multiline':False]
['text':' namespace boost','line_number':276,'multiline':False]
['text':' BOOST_LOG_EXPRESSIONS_FORMATTERS_C_DECORATOR_HPP_INCLUDED_','line_number':280,'multiline':False]
