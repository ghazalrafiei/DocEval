['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   basic_sink_frontend.hpp
 * \author Andrey Semashev
 * \date   14.07.2009
 *
 * The header contains implementation of a base class for sink frontends.
 ','line_number':7,'multiline':True]
['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':35,'multiline':False]
['text':'! A base class for a logging sink frontend','line_number':48,'multiline':False]
['text':'! Base type','line_number':52,'multiline':False]
['text':'! An exception handler type','line_number':56,'multiline':False]
['text':'! Mutex type','line_number':61,'multiline':False]
['text':'! Synchronization mutex','line_number':65,'multiline':False]
['text':'! Filter','line_number':70,'multiline':False]
['text':'! Exception handler','line_number':72,'multiline':False]
['text':'!
     * \brief Initializing constructor
     *
     * \param cross_thread The flag indicates whether the sink passes log records between different threads
     ','line_number':76,'multiline':True]
['text':'!
     * The method sets sink-specific filter functional object
     ','line_number':85,'multiline':True]
['text':'!
     * The method resets the filter
     ','line_number':94,'multiline':True]
['text':'!
     * The method sets an exception handler function
     ','line_number':103,'multiline':True]
['text':'!
     * The method resets the exception handler function
     ','line_number':113,'multiline':True]
['text':'!
     * The method returns \c true if no filter is set or the attribute values pass the filter
     *
     * \param attrs A set of attribute values of a logging record
     ','line_number':122,'multiline':True]
['text':'! Returns reference to the frontend mutex','line_number':151,'multiline':False]
['text':'! Returns reference to the exception handler','line_number':155,'multiline':False]
['text':'! Returns reference to the exception handler','line_number':157,'multiline':False]
['text':'! Feeds log record to the backend','line_number':160,'multiline':False]
['text':'! Attempts to feeds log record to the backend, does not block if \a backend_mutex is locked','line_number':184,'multiline':False]
['text':' No need to lock anything in the feed_record method','line_number':209,'multiline':False]
['text':'! Flushes record buffers in the backend, if one supports it','line_number':215,'multiline':False]
['text':'! Flushes record buffers in the backend (the actual implementation)','line_number':225,'multiline':False]
['text':'! Flushes record buffers in the backend (stub for backends that don't support flushing)','line_number':248,'multiline':False]
['text':'! A base class for a logging sink frontend with formatting support','line_number':255,'multiline':False]
['text':'! Character type','line_number':263,'multiline':False]
['text':'! Formatted string type','line_number':265,'multiline':False]
['text':'! Formatter function object type','line_number':268,'multiline':False]
['text':'! Output stream type','line_number':270,'multiline':False]
['text':'! Mutex type','line_number':275,'multiline':False]
['text':'! Object version','line_number':305,'multiline':False]
['text':'! Formatted log record storage','line_number':308,'multiline':False]
['text':'! Formatting stream','line_number':310,'multiline':False]
['text':'! Formatter functor','line_number':312,'multiline':False]
['text':'! State version','line_number':338,'multiline':False]
['text':'! Formatter functor','line_number':341,'multiline':False]
['text':'! Locale to perform formatting','line_number':343,'multiline':False]
['text':'! Formatting state','line_number':346,'multiline':False]
['text':'! Formatting state','line_number':351,'multiline':False]
['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':354,'multiline':False]
['text':'!
     * \brief Initializing constructor
     *
     * \param cross_thread The flag indicates whether the sink passes log records between different threads
     ','line_number':357,'multiline':True]
['text':'!
     * The method sets sink-specific formatter function object
     ','line_number':370,'multiline':True]
['text':'!
     * The method resets the formatter
     ','line_number':384,'multiline':True]
['text':'!
     * The method returns the current locale used for formatting
     ','line_number':398,'multiline':True]
['text':'!
     * The method sets the locale used for formatting
     ','line_number':410,'multiline':True]
['text':'! Returns reference to the formatter','line_number':425,'multiline':False]
['text':'! Feeds log record to the backend','line_number':435,'multiline':False]
['text':' Perform the formatting','line_number':459,'multiline':False]
['text':' Feed the record','line_number':463,'multiline':False]
['text':'! Attempts to feeds log record to the backend, does not block if \a backend_mutex is locked','line_number':482,'multiline':False]
['text':' No need to lock anything in the feed_record method','line_number':507,'multiline':False]
['text':' namespace aux','line_number':533,'multiline':False]
['text':' namespace sinks','line_number':535,'multiline':False]
['text':' namespace log','line_number':537,'multiline':False]
['text':' namespace boost','line_number':539,'multiline':False]
['text':' BOOST_LOG_SINKS_BASIC_SINK_FRONTEND_HPP_INCLUDED_','line_number':543,'multiline':False]
