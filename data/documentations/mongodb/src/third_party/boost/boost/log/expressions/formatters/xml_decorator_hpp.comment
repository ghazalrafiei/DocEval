['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   formatters/xml_decorator.hpp
 * \author Andrey Semashev
 * \date   18.11.2012
 *
 * The header contains implementation of a XML-style character decorator.
 ','line_number':7,'multiline':True]
['text':' BOOST_LOG_USE_CHAR','line_number':59,'multiline':False]
['text':' BOOST_LOG_USE_WCHAR_T','line_number':82,'multiline':False]
['text':' namespace aux','line_number':101,'multiline':False]
['text':'!
 * XML-style decorator generator object. The decorator replaces characters that have special meaning
 * in XML documents with the corresponding decorated counterparts. The generator provides
 * <tt>operator[]</tt> that can be used to construct the actual decorator. For example:
 *
 * <code>
 * xml_decor[ stream << attr< std::string >("MyAttr") ]
 * </code>
 *
 * For wide-character formatting there is the similar \c wxml_decor decorator generator object.
 ','line_number':103,'multiline':True]
['text':'!
 * The function creates an XML-style decorator generator for arbitrary character type.
 ','line_number':121,'multiline':True]
['text':' namespace expressions','line_number':130,'multiline':False]
['text':' namespace log','line_number':132,'multiline':False]
['text':' namespace boost','line_number':134,'multiline':False]
['text':' BOOST_LOG_EXPRESSIONS_FORMATTERS_XML_DECORATOR_HPP_INCLUDED_','line_number':138,'multiline':False]
