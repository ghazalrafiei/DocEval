['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   formatters/named_scope.hpp
 * \author Andrey Semashev
 * \date   11.11.2012
 *
 * The header contains a formatter function for named scope attribute values.
 ','line_number':7,'multiline':True]
['text':'! Scope iteration directions','line_number':67,'multiline':False]
['text':'!< Iterate through scopes from outermost to innermost','line_number':70,'multiline':False]
['text':'!< Iterate through scopes from innermost to outermost','line_number':71,'multiline':False]
['text':'! Parses the named scope format string and constructs the formatter function','line_number':77,'multiline':False]
['text':'! Parses the named scope format string and constructs the formatter function','line_number':83,'multiline':False]
['text':'! Parses the named scope format string and constructs the formatter function','line_number':88,'multiline':False]
['text':'! Parses the named scope format string and constructs the formatter function','line_number':96,'multiline':False]
['text':'! Parses the named scope format string and constructs the formatter function','line_number':105,'multiline':False]
['text':'! Function result type','line_number':118,'multiline':False]
['text':'! Character type','line_number':121,'multiline':False]
['text':'! String type','line_number':123,'multiline':False]
['text':'! Formatting stream type','line_number':125,'multiline':False]
['text':'! Attribute value type','line_number':127,'multiline':False]
['text':'! Named scope formatter','line_number':129,'multiline':False]
['text':'! Element formatting function','line_number':133,'multiline':False]
['text':'! Element delimiter','line_number':135,'multiline':False]
['text':'! Incomplete list marker','line_number':137,'multiline':False]
['text':'! Empty list marker','line_number':139,'multiline':False]
['text':'! Maximum number of elements to output','line_number':141,'multiline':False]
['text':'! Iteration direction','line_number':143,'multiline':False]
['text':'! Initializing constructor','line_number':147,'multiline':False]
['text':'! Copy constructor','line_number':165,'multiline':False]
['text':'! Formatting operator','line_number':176,'multiline':False]
['text':'! The function performs formatting of the extracted scope stack in forward direction','line_number':193,'multiline':False]
['text':'! The function performs formatting of the extracted scope stack in reverse direction','line_number':221,'multiline':False]
['text':' namespace aux','line_number':251,'multiline':False]
['text':'!
 * Named scope formatter terminal.
 ','line_number':253,'multiline':True]
['text':'! Internal typedef for type categorization','line_number':261,'multiline':False]
['text':'! Attribute value type','line_number':265,'multiline':False]
['text':'! Fallback policy','line_number':267,'multiline':False]
['text':'! Character type','line_number':269,'multiline':False]
['text':'! String type','line_number':271,'multiline':False]
['text':'! Formatting stream type','line_number':273,'multiline':False]
['text':'! Formatter function','line_number':275,'multiline':False]
['text':'! Function result type','line_number':278,'multiline':False]
['text':'! Attribute value visitor invoker','line_number':282,'multiline':False]
['text':'! Attribute name','line_number':286,'multiline':False]
['text':'! Formatter function','line_number':288,'multiline':False]
['text':'! Attribute value visitor invoker','line_number':290,'multiline':False]
['text':'! Initializing constructor','line_number':294,'multiline':False]
['text':'! Copy constructor','line_number':310,'multiline':False]
['text':'! Returns attribute name','line_number':316,'multiline':False]
['text':'! Returns fallback policy','line_number':322,'multiline':False]
['text':'! Retruns formatter function','line_number':328,'multiline':False]
['text':'! Invokation operator','line_number':334,'multiline':False]
['text':'! Invokation operator','line_number':345,'multiline':False]
['text':'!
 * Named scope formatter actor.
 ','line_number':359,'multiline':True]
['text':'! Character type','line_number':367,'multiline':False]
['text':'! Fallback policy','line_number':369,'multiline':False]
['text':'! Base terminal type','line_number':371,'multiline':False]
['text':'! Attribute value type','line_number':373,'multiline':False]
['text':'! Formatter function','line_number':375,'multiline':False]
['text':'! Base actor type','line_number':378,'multiline':False]
['text':'! Initializing constructor','line_number':382,'multiline':False]
['text':'!
     * \returns The attribute name
     ','line_number':387,'multiline':True]
['text':'!
     * \returns Fallback policy
     ','line_number':395,'multiline':True]
['text':'!
     * \returns Formatter function
     ','line_number':403,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':428,'multiline':False]
['text':'! Auxiliary traits to acquire default formatter parameters depending on the character type','line_number':432,'multiline':False]
['text':' namespace aux','line_number':482,'multiline':False]
['text':'!
 * The function generates a manipulator node in a template expression. The manipulator must participate in a formatting
 * expression (stream output or \c format placeholder filler).
 *
 * \param name Attribute name
 * \param element_format Format string for a single named scope
 ','line_number':484,'multiline':True]
['text':'!
 * The function generates a manipulator node in a template expression. The manipulator must participate in a formatting
 * expression (stream output or \c format placeholder filler).
 *
 * \param name Attribute name
 * \param element_format Format string for a single named scope
 ','line_number':500,'multiline':True]
['text':'!
 * The function generates a manipulator node in a template expression. The manipulator must participate in a formatting
 * expression (stream output or \c format placeholder filler).
 *
 * \param keyword Attribute keyword
 * \param element_format Format string for a single named scope
 ','line_number':516,'multiline':True]
['text':'!
 * The function generates a manipulator node in a template expression. The manipulator must participate in a formatting
 * expression (stream output or \c format placeholder filler).
 *
 * \param keyword Attribute keyword
 * \param element_format Format string for a single named scope
 ','line_number':536,'multiline':True]
['text':'!
 * The function generates a manipulator node in a template expression. The manipulator must participate in a formatting
 * expression (stream output or \c format placeholder filler).
 *
 * \param placeholder Attribute placeholder
 * \param element_format Format string for a single named scope
 ','line_number':556,'multiline':True]
['text':'!
 * The function generates a manipulator node in a template expression. The manipulator must participate in a formatting
 * expression (stream output or \c format placeholder filler).
 *
 * \param placeholder Attribute placeholder
 * \param element_format Format string for a single named scope
 ','line_number':576,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':602,'multiline':False]
['text':'!
 * Formatter generator. Construct the named scope formatter with the specified formatting parameters.
 *
 * \param name Attribute name
 * \param args An set of named parameters. Supported parameters:
 *             \li \c format - A format string for named scopes. The string can contain "%n", "%f" and "%l" placeholders for the scope name, file and line number, respectively. This parameter is mandatory.
 *             \li \c delimiter - A string that is used to delimit the formatted scope names. Default: "->" or "<-", depending on the iteration direction.
 *             \li \c incomplete_marker - A string that is used to indicate that the list was printed incomplete because of depth limitation. Default: "...".
 *             \li \c empty_marker - A string that is output in case if the scope list is empty. Default: "", i.e. nothing is output.
 *             \li \c iteration - Iteration direction, see \c scope_iteration_direction enumeration. Default: forward.
 *             \li \c depth - Iteration depth. Default: unlimited.
 ','line_number':604,'multiline':True]
['text':'! \overload ','line_number':619,'multiline':True]
['text':'! \overload ','line_number':623,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':627,'multiline':False]
['text':' namespace expressions','line_number':629,'multiline':False]
['text':' namespace log','line_number':631,'multiline':False]
['text':' namespace result_of','line_number':645,'multiline':False]
['text':' namespace phoenix','line_number':647,'multiline':False]
['text':' namespace boost','line_number':651,'multiline':False]
['text':' BOOST_LOG_EXPRESSIONS_FORMATTERS_NAMED_SCOPE_HPP_INCLUDED_','line_number':655,'multiline':False]
