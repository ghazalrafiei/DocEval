['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   record_ostream.hpp
 * \author Andrey Semashev
 * \date   09.03.2009
 *
 * This header contains a wrapper class around a logging record that allows to compose the
 * record message with a streaming expression.
 ','line_number':7,'multiline':True]
['text':' namespace aux','line_number':73,'multiline':False]
['text':'!
 * \brief Logging record adapter with a streaming capability
 *
 * This class allows to compose the logging record message by streaming operations. It
 * aggregates the log record and provides the standard output stream interface.
 ','line_number':75,'multiline':True]
['text':'! Self type','line_number':85,'multiline':False]
['text':'! Base stream class','line_number':87,'multiline':False]
['text':'! Character type','line_number':91,'multiline':False]
['text':'! String type to be used as a message text holder','line_number':93,'multiline':False]
['text':'! Stream type','line_number':95,'multiline':False]
['text':'! Character traits','line_number':97,'multiline':False]
['text':'! Log record','line_number':101,'multiline':False]
['text':'!
     * Default constructor. Creates an empty record that is equivalent to the invalid record handle.
     * The stream capability is not available after construction.
     *
     * \post <tt>!*this == true</tt>
     ','line_number':105,'multiline':True]
['text':'!
     * Constructor from a record object. Attaches to the provided record.
     *
     * \pre <tt>!!rec == true</tt>
     * \post <tt>&this->get_record() == &rec</tt>
     * \param rec The record handle being attached to
     ','line_number':113,'multiline':True]
['text':'!
     * Destructor. Destroys the record, releases any sinks and attribute values that were involved in processing this record.
     ','line_number':127,'multiline':True]
['text':'!
     * Conversion to an unspecified boolean type
     *
     * \return \c true, if stream is valid and ready for formatting, \c false, if the stream is not valid. The latter also applies to
     *         the case when the stream is not attached to a log record.
     ','line_number':135,'multiline':True]
['text':'!
     * Inverted conversion to an unspecified boolean type
     *
     * \return \c false, if stream is valid and ready for formatting, \c true, if the stream is not valid. The latter also applies to
     *         the case when the stream is not attached to a log record.
     ','line_number':143,'multiline':True]
['text':'!
     * Flushes internal buffers to complete all pending formatting operations and returns the aggregated log record
     *
     * \return The aggregated record object
     ','line_number':154,'multiline':True]
['text':'!
     * Flushes internal buffers to complete all pending formatting operations and returns the aggregated log record
     *
     * \return The aggregated record object
     ','line_number':166,'multiline':True]
['text':'!
     * If the stream is attached to a log record, flushes internal buffers to complete all pending formatting operations.
     * Then reattaches the stream to another log record.
     *
     * \param rec New log record to attach to
     ','line_number':178,'multiline':True]
['text':'! The function resets the stream into a detached (default initialized) state','line_number':192,'multiline':False]
['text':' When no native character type is supported, the following overloads are disabled as they have ambiguous meaning.','line_number':222,'multiline':False]
['text':' Use basic_string_view or basic_string to explicitly indicate that the data is a string.','line_number':223,'multiline':False]
['text':'! The function initializes the stream and the stream buffer','line_number':344,'multiline':False]
['text':'  Copy and assignment are closed','line_number':347,'multiline':False]
['text':'!< Convenience typedef for narrow-character logging','line_number':354,'multiline':False]
['text':'!< Convenience typedef for wide-character logging','line_number':357,'multiline':False]
['text':' Implementation note: these operators below should be the least attractive for the compiler','line_number':360,'multiline':False]
['text':' so that user's overloads are chosen, when present. We use function template partial ordering for this purpose.','line_number':361,'multiline':False]
['text':' We also don't use perfect forwarding for the right hand argument because in ths case the generic overload','line_number':362,'multiline':False]
['text':' would be more preferred than the typical one written by users:','line_number':363,'multiline':False]
['text':'','line_number':364,'multiline':False]
['text':' record_ostream& operator<< (record_ostream& strm, my_type const& arg);','line_number':365,'multiline':False]
['text':'','line_number':366,'multiline':False]
['text':' This is because my_type rvalues require adding const to the type, which counts as a conversion that is not required','line_number':367,'multiline':False]
['text':' if there is a perfect forwarding overload.','line_number':368,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)','line_number':425,'multiline':False]
['text':'! Internal class that provides formatting streams for record pumps','line_number':429,'multiline':False]
['text':'! Character type','line_number':433,'multiline':False]
['text':'! Formatting stream compound','line_number':436,'multiline':False]
['text':'! Log record stream adapter','line_number':441,'multiline':False]
['text':'! Initializing constructor','line_number':444,'multiline':False]
['text':'! The method returns an allocated stream compound','line_number':448,'multiline':False]
['text':'! The method releases a compound','line_number':450,'multiline':False]
['text':'  Non-constructible, non-copyable, non-assignable','line_number':453,'multiline':False]
['text':'!
 * \brief Logging record pump implementation
 *
 * The pump is used to format the logging record message text and then
 * push it to the logging core. It is constructed on each attempt to write
 * a log record and destroyed afterwards.
 *
 * The pump class template is instantiated on the logger type.
 ','line_number':460,'multiline':True]
['text':'! Logger type','line_number':475,'multiline':False]
['text':'! Character type','line_number':477,'multiline':False]
['text':'! Stream compound provider','line_number':479,'multiline':False]
['text':'! Stream compound type','line_number':481,'multiline':False]
['text':'! Stream compound release guard','line_number':484,'multiline':False]
['text':'! A reference to the logger','line_number':497,'multiline':False]
['text':'! Stream compound','line_number':499,'multiline':False]
['text':'! Exception state','line_number':501,'multiline':False]
['text':'! Constructor','line_number':505,'multiline':False]
['text':'! Move constructor','line_number':512,'multiline':False]
['text':'! Destructor. Pushes the composed message to log.','line_number':521,'multiline':False]
['text':' destructor doesn't throw','line_number':526,'multiline':False]
['text':' Only push the record if no exception has been thrown in the streaming expression (if possible)','line_number':527,'multiline':False]
['text':'! Returns the stream to be used for message text formatting','line_number':533,'multiline':False]
['text':' namespace aux','line_number':547,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':559,'multiline':False]
['text':'! The macro writes a record to the log','line_number':561,'multiline':False]
['text':'! The macro writes a record to the log and allows to pass additional named arguments to the logger','line_number':565,'multiline':False]
['text':'! An equivalent to BOOST_LOG_STREAM(logger)','line_number':571,'multiline':False]
['text':'! An equivalent to BOOST_LOG_STREAM_WITH_PARAMS(logger, params_seq)','line_number':574,'multiline':False]
['text':' BOOST_LOG_NO_SHORTHAND_NAMES','line_number':577,'multiline':False]
['text':' namespace log','line_number':579,'multiline':False]
['text':' namespace boost','line_number':581,'multiline':False]
['text':' BOOST_LOG_SOURCES_RECORD_OSTREAM_HPP_INCLUDED_','line_number':585,'multiline':False]
