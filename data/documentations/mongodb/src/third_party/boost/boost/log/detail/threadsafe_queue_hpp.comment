['text':'
 *          Copyright Andrey Semashev 2007 - 2021.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   threadsafe_queue.hpp
 * \author Andrey Semashev
 * \date   05.11.2010
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 ','line_number':7,'multiline':True]
['text':'! Base class for the thread-safe queue implementation','line_number':45,'multiline':False]
['text':' Copying and assignment is prohibited','line_number':67,'multiline':False]
['text':'! Thread-safe queue node type','line_number':72,'multiline':False]
['text':' Copying and assignment is prohibited','line_number':85,'multiline':False]
['text':'!
 * \brief An unbounded thread-safe queue
 *
 * The implementation is based on algorithms published in the "Simple, Fast,
 * and Practical Non-Blocking and Blocking Concurrent Queue Algorithms" article
 * in PODC96 by Maged M. Michael and Michael L. Scott. Pseudocode is available here:
 * http://www.cs.rochester.edu/research/synchronization/pseudocode/queues.html
 *
 * The implementation provides thread-safe \c push and \c try_pop operations, as well as
 * a thread-unsafe \c empty operation. The queue imposes the following requirements
 * on the element type:
 *
 * \li Default constructible, the default constructor must not throw.
 * \li Copy constructible.
 * \li Movable (i.e. there should be an efficient move assignment for this type).
 *
 * The last requirement is not mandatory but is crucial for decent performance.
 ','line_number':90,'multiline':True]
['text':'! A simple scope guard to automate memory reclaiming','line_number':128,'multiline':False]
['text':'!
     * Default constructor, creates an empty queue. Unlike most containers,
     * the constructor requires memory allocation.
     *
     * \throw std::bad_alloc if there is not sufficient memory
     ','line_number':153,'multiline':True]
['text':'!
     * Destructor
     ','line_number':187,'multiline':True]
['text':' Clear the queue','line_number':192,'multiline':False]
['text':' Remove the last dummy node','line_number':199,'multiline':False]
['text':'!
     * Checks if the queue is empty. Not thread-safe, the returned result may not be actual.
     ','line_number':207,'multiline':True]
['text':'!
     * Puts a new element to the end of the queue. Thread-safe, can be called
     * concurrently by several threads, and concurrently with the \c pop operation.
     ','line_number':212,'multiline':True]
['text':'!
     * Attempts to pop an element from the beginning of the queue. Thread-safe, can
     * be called concurrently with the \c push operation. Should not be called by
     * several threads concurrently.
     ','line_number':236,'multiline':True]
['text':' Copying and assignment is prohibited','line_number':255,'multiline':False]
['text':'! Returns the allocator instance','line_number':260,'multiline':False]
['text':'! Pointer to the implementation','line_number':264,'multiline':False]
['text':' namespace aux','line_number':268,'multiline':False]
['text':' namespace log','line_number':270,'multiline':False]
['text':' namespace boost','line_number':272,'multiline':False]
['text':' BOOST_LOG_NO_THREADS','line_number':276,'multiline':False]
['text':' BOOST_LOG_DETAIL_THREADSAFE_QUEUE_HPP_INCLUDED_','line_number':278,'multiline':False]
