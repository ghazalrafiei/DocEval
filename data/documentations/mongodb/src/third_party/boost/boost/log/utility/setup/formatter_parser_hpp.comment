['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   formatter_parser.hpp
 * \author Andrey Semashev
 * \date   07.04.2008
 *
 * The header contains definition of a formatter parser function, along with facilities to
 * add support for custom formatters.
 ','line_number':7,'multiline':True]
['text':'!
 * Formatter factory base interface.
 ','line_number':42,'multiline':True]
['text':'! Character type','line_number':48,'multiline':False]
['text':'! String type','line_number':50,'multiline':False]
['text':'! The formatter function object','line_number':52,'multiline':False]
['text':'!
     * Type of the map of formatter factory arguments [argument name -> argument value].
     * This type of maps will be passed to formatter factories on attempt to create a formatter.
     ','line_number':54,'multiline':True]
['text':'!
     * Default constructor
     ','line_number':60,'multiline':True]
['text':'!
     * Virtual destructor
     ','line_number':65,'multiline':True]
['text':'!
     * The function creates a formatter for the specified attribute.
     *
     * \param name Attribute name
     * \param args Formatter arguments
     ','line_number':70,'multiline':True]
['text':'!
 * Base class for formatter factories. This class provides default implementation of formatter expressions for
 * types supporting stream output. The factory does not take into account any additional parameters that may be specified.
 ','line_number':82,'multiline':True]
['text':'! Attribute value type','line_number':94,'multiline':False]
['text':'  Type imports from the base class','line_number':96,'multiline':False]
['text':'!
     * The function creates a formatter for the specified attribute.
     *
     * \param name Attribute name
     * \param args Formatter arguments
     ','line_number':100,'multiline':True]
['text':'!
 * \brief The function registers a user-defined formatter factory
 *
 * The function registers a user-defined formatter factory. The registered factory function will be
 * called when the formatter parser detects the specified attribute name in the formatter string.
 *
 * \pre <tt>!!attr_name && !!factory</tt>.
 *
 * \param attr_name Attribute name
 * \param factory Pointer to the formatter factory
 ','line_number':112,'multiline':True]
['text':'!
 * \brief The function registers a user-defined formatter factory
 *
 * The function registers a user-defined formatter factory. The registered factory function will be
 * called when the formatter parser detects the specified attribute name in the formatter string.
 *
 * \pre <tt>!!attr_name && !!factory</tt>.
 *
 * \param attr_name Attribute name
 * \param factory Pointer to the formatter factory
 ','line_number':127,'multiline':True]
['text':'!
 * \brief The function registers a simple formatter factory
 *
 * The function registers a simple formatter factory. The registered factory will generate formatters
 * that will be equivalent to the <tt>log::expressions::attr</tt> formatter (i.e. that will use the
 * native \c operator<< to format the attribute value). The factory does not use any arguments from the format string,
 * if specified.
 *
 * \pre <tt>!!attr_name</tt>.
 *
 * \param attr_name Attribute name
 ','line_number':147,'multiline':True]
['text':'!
 * The function parses a formatter from the sequence of characters
 *
 * \pre <tt>begin <= end</tt>, both pointers must not be NULL
 * \param begin Pointer to the first character of the sequence
 * \param end Pointer to the after-the-last character of the sequence
 * \return The parsed formatter.
 *
 * \b Throws: An <tt>std::exception</tt>-based exception, if a formatter cannot be recognized in the character sequence.
 ','line_number':167,'multiline':True]
['text':'!
 * The function parses a formatter from the string
 *
 * \param str A string that contains format description
 * \return The parsed formatter.
 *
 * \b Throws: An <tt>std::exception</tt>-based exception, if a formatter cannot be recognized in the character sequence.
 ','line_number':180,'multiline':True]
['text':'!
 * The function parses a formatter from the string
 *
 * \pre <tt>str != NULL</tt>, <tt>str</tt> points to a zero-terminated string
 * \param str A string that contains format description.
 * \return The parsed formatter.
 *
 * \b Throws: An <tt>std::exception</tt>-based exception, if a formatter cannot be recognized in the character sequence.
 ','line_number':195,'multiline':True]
['text':' namespace log','line_number':210,'multiline':False]
['text':' namespace boost','line_number':212,'multiline':False]
['text':' BOOST_LOG_UTILITY_SETUP_FORMATTER_PARSER_HPP_INCLUDED_','line_number':216,'multiline':False]
