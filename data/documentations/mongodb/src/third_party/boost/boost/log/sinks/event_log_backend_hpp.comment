['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   event_log_backend.hpp
 * \author Andrey Semashev
 * \date   07.11.2008
 *
 * The header contains a logging sink backend that uses Windows NT event log API
 * for signaling application events.
 ','line_number':7,'multiline':True]
['text':'! Event log source registration modes','line_number':56,'multiline':False]
['text':'!< Never register event source, even if it's not registered','line_number':59,'multiline':False]
['text':'!< Register if the source is not registered yet','line_number':60,'multiline':False]
['text':'!< Register always, event if the source is already registered','line_number':61,'multiline':False]
['text':'!
     * \brief Straightforward event type mapping
     *
     * This type of mapping assumes that attribute with a particular name always
     * provides values that map directly onto the native event types. The mapping
     * simply returns the extracted attribute value converted to the native event type.
     ','line_number':64,'multiline':True]
['text':'! Base type','line_number':75,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':79,'multiline':True]
['text':'!
     * \brief Customizable event type mapping
     *
     * The class allows to setup a custom mapping between an attribute and native event types.
     * The mapping should be initialized similarly to the standard \c map container, by using
     * indexing operator and assignment.
     ','line_number':90,'multiline':True]
['text':'! Base type','line_number':101,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':105,'multiline':True]
['text':'!
     * \brief Straightforward event ID mapping
     *
     * This type of mapping assumes that attribute with a particular name always
     * provides values that map directly onto the event identifiers. The mapping
     * simply returns the extracted attribute value converted to the event ID.
     ','line_number':116,'multiline':True]
['text':'! Base type','line_number':127,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':131,'multiline':True]
['text':'!
     * \brief Customizable event ID mapping
     *
     * The class allows to setup a custom mapping between an attribute and event identifiers.
     * The mapping should be initialized similarly to the standard \c map container, by using
     * indexing operator and assignment.
     ','line_number':142,'multiline':True]
['text':'! Base type','line_number':153,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':157,'multiline':True]
['text':'!
     * \brief Straightforward event category mapping
     *
     * This type of mapping assumes that attribute with a particular name always
     * provides values that map directly onto the event categories. The mapping
     * simply returns the extracted attribute value converted to the event category.
     ','line_number':168,'multiline':True]
['text':'! Base type','line_number':179,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':183,'multiline':True]
['text':'!
     * \brief Customizable event category mapping
     *
     * The class allows to setup a custom mapping between an attribute and event categories.
     * The mapping should be initialized similarly to the standard \c map container, by using
     * indexing operator and assignment.
     ','line_number':194,'multiline':True]
['text':'! Base type','line_number':205,'multiline':False]
['text':'!
         * Constructor
         *
         * \param name Attribute name
         ','line_number':209,'multiline':True]
['text':'!
     * \brief An event composer
     *
     * This class is a function object that extracts event identifier from the attribute values set
     * and formats insertion strings for the particular event. Each insertion string is formatted with
     * a distinct formatter, which can be created just like regular sinks formatters.
     *
     * Before using, the composer must be initialized with the following information:
     * \li Event identifier extraction logic. One can use \c basic_direct_event_id_mapping or
     *     \c basic_custom_event_id_mapping classes in order to create such extractor and pass it
     *     to the composer constructor.
     * \li Event identifiers and insertion string formatters. The composer provides the following
     *     syntax to provide this information:
     *
     *     \code
     *     event_composer comp;
     *     comp[MY_EVENT_ID1] % formatter1 % ... % formatterN;
     *     comp[MY_EVENT_ID2] % formatter1 % ... % formatterN;
     *     ...
     *     \endcode
     *
     *     The event identifiers in square brackets are provided by the message compiler generated
     *     header (the actual names are specified in the .mc file). The formatters represent
     *     the insertion strings that will be used to replace placeholders in event messages,
     *     thus the number and the order of the formatters must correspond to the message definition.
     ','line_number':220,'multiline':True]
['text':'! Character type','line_number':250,'multiline':False]
['text':'! String type to be used as a message text holder','line_number':252,'multiline':False]
['text':'! Event identifier mapper type','line_number':255,'multiline':False]
['text':'! Type of an insertion composer (a formatter)','line_number':258,'multiline':False]
['text':'! Type of the composed insertions list','line_number':260,'multiline':False]
['text':'! \cond','line_number':264,'multiline':False]
['text':'! The class that implements formatting of insertion strings','line_number':266,'multiline':False]
['text':'! Type of the events map','line_number':269,'multiline':False]
['text':'! A smart reference that puts formatters into the composer','line_number':272,'multiline':False]
['text':'! Event identifier','line_number':278,'multiline':False]
['text':'! A reference to the object that created the reference','line_number':280,'multiline':False]
['text':'! A hint for the owner to optimize insertion','line_number':282,'multiline':False]
['text':'! Initializing constructor','line_number':286,'multiline':False]
['text':'! The operator puts the formatter into the composer','line_number':293,'multiline':False]
['text':'! \endcond','line_number':302,'multiline':False]
['text':'! The mapper that will extract the event identifier','line_number':305,'multiline':False]
['text':'! The map of event identifiers and their insertion composers','line_number':307,'multiline':False]
['text':'!
         * Default constructor. Creates an empty map of events.
         *
         * \param id_mapper An event identifier mapping function that will be used to extract event ID from attribute values
         ','line_number':311,'multiline':True]
['text':'!
         * Copy constructor. Performs a deep copy of the object.
         ','line_number':317,'multiline':True]
['text':'!
         * Destructor
         ','line_number':321,'multiline':True]
['text':'!
         * Assignment. Provides strong exception guarantee.
         ','line_number':326,'multiline':True]
['text':'!
         * Swaps \c *this and \c that objects.
         ','line_number':330,'multiline':True]
['text':'!
         * Initiates creation of a new event description. The result of the operator can be used to
         * add formatters for insertion strings construction. The returned reference type is implementation detail.
         *
         * \param id Event identifier.
         ','line_number':334,'multiline':True]
['text':'!
         * Initiates creation of a new event description. The result of the operator can be used to
         * add formatters for insertion strings construction. The returned reference type is implementation detail.
         *
         * \param id Event identifier.
         ','line_number':341,'multiline':True]
['text':'!
         * Event composition operator. Extracts an event identifier from the attribute values by calling event ID mapper.
         * Then runs all formatters that were registered for the event with the extracted ID. The results of formatting
         * are returned in the \a insertions parameter.
         *
         * \param rec Log record view
         * \param insertions A sequence of formatted insertion strings
         * \return An event identifier that was extracted from \c attributes
         ','line_number':348,'multiline':True]
['text':'! Adds a formatter to the insertion composers list','line_number':361,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':363,'multiline':False]
['text':'!< Convenience typedef for narrow-character logging','line_number':367,'multiline':False]
['text':'!< Convenience typedef for wide-character logging','line_number':370,'multiline':False]
['text':' namespace event_log','line_number':373,'multiline':False]
['text':'!
 * \brief An implementation of a simple logging sink backend that emits events into Windows NT event log
 *
 * The sink uses Windows NT 5 (Windows 2000) and later event log API to emit events
 * to an event log. The sink acts as an event source in terms of the API, it implements all needed resources
 * and source registration in the Windows registry that is needed for the event delivery.
 *
 * The backend performs message text formatting. The composed text is then passed as the first
 * and only string parameter of the event. The resource embedded into the backend describes the event
 * so that the parameter is inserted into the event description text, thus making it visible
 * in the event log.
 *
 * The backend allows to customize mapping of application severity levels to the native Windows event types.
 * This allows to write portable code even if OS-specific sinks, such as this one, are used.
 *
 * \note Since the backend registers itself into Windows registry as the resource file that contains
 *       event description, it is important to keep the library binary in a stable place of the filesystem.
 *       Otherwise Windows might not be able to load event resources from the library and display
 *       events correctly.
 *
 * \note It is known that Windows is not able to find event resources in the application executable,
 *       which is linked against the static build of the library. Users are advised to use dynamic
 *       builds of the library to solve this problem.
 ','line_number':375,'multiline':True]
['text':'! Base type','line_number':403,'multiline':False]
['text':'! Implementation type','line_number':405,'multiline':False]
['text':'! Character type','line_number':409,'multiline':False]
['text':'! String type to be used as a message text holder','line_number':411,'multiline':False]
['text':'! Mapper type for the event type','line_number':414,'multiline':False]
['text':'! Pointer to the backend implementation that hides various types from windows.h','line_number':418,'multiline':False]
['text':'!
     * Default constructor. Registers event source with name based on the application
     * executable file name in the Application log. If such a registration is already
     * present, it is not overridden.
     ','line_number':422,'multiline':True]
['text':'!
     * Constructor. Registers event log source with the specified parameters.
     * The following named parameters are supported:
     *
     * \li \c target - Specifies an UNC path to the remote server which log records should be sent to.
     *     The local machine will be used to process log records, if not specified.
     * \li \c log_name - Specifies the log in which the source should be registered.
     *     The result of \c get_default_log_name is used, if the parameter is not specified.
     * \li \c log_source - Specifies the source name. The result of \c get_default_source_name
     *     is used, if the parameter is not specified.
     * \li \c registration - Specifies the event source registration mode in the Windows registry.
     *     Can have values of the \c registration_mode enum. Default value: \c on_demand.
     *
     * \param args A set of named parameters.
     ','line_number':428,'multiline':True]
['text':'!
     * Destructor. Unregisters event source. The log source description is not removed from the Windows registry.
     ','line_number':450,'multiline':True]
['text':'!
     * The method installs the function object that maps application severity levels to WinAPI event types
     ','line_number':455,'multiline':True]
['text':'!
     * \returns Default log name: Application
     ','line_number':460,'multiline':True]
['text':'!
     * \returns Default log source name that is based on the application executable file name and the sink name
     ','line_number':464,'multiline':True]
['text':'!
     * The method puts the formatted message to the event log
     ','line_number':469,'multiline':True]
['text':'! Constructs backend implementation','line_number':476,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':491,'multiline':False]
['text':'!
 * \brief An implementation of a logging sink backend that emits events into Windows NT event log
 *
 * The sink uses Windows NT 5 (Windows 2000) and later event log API to emit events
 * to an event log. The sink acts as an event source. Unlike \c basic_simple_event_log_backend,
 * this sink backend allows users to specify the custom event message file and supports
 * mapping attribute values onto several insertion strings. Although it requires considerably
 * more scaffolding than the simple backend, this allows to support localizable event descriptions.
 *
 * Besides the file name of the module with event resources, the backend provides the following
 * customizations:
 * \li Remote server UNC address, log name and source name. These parameters have similar meaning
 *     to \c basic_simple_event_log_backend.
 * \li Event type and category mappings. These are function object that allow to map attribute
 *     values to the according event parameters. One can use mappings in the \c event_log namespace.
 * \li Event composer. This function object extracts event identifier and formats string insertions,
 *     that will be used by the API to compose the final event message text.
 ','line_number':494,'multiline':True]
['text':'! Base type','line_number':516,'multiline':False]
['text':'! Implementation type','line_number':518,'multiline':False]
['text':'! Character type','line_number':522,'multiline':False]
['text':'! String type','line_number':524,'multiline':False]
['text':'! Type of the composed insertions list','line_number':526,'multiline':False]
['text':'! Mapper type for the event type','line_number':529,'multiline':False]
['text':'! Mapper type for the event category','line_number':531,'multiline':False]
['text':'! Event composer type','line_number':533,'multiline':False]
['text':'! Pointer to the backend implementation that hides various types from windows.h','line_number':537,'multiline':False]
['text':'!
     * Constructor. Registers event source with name based on the application
     * executable file name in the Application log. If such a registration is already
     * present, it is not overridden.
     ','line_number':541,'multiline':True]
['text':'!
     * Constructor. Registers event source with name based on the application
     * executable file name in the Application log. If such a registration is already
     * present, it is not overridden.
     ','line_number':551,'multiline':True]
['text':'!
     * Constructor. Registers event log source with the specified parameters.
     * The following named parameters are supported:
     *
     * \li \c message_file - Specifies the file name that contains resources that
     *     describe events and categories. This parameter is mandatory unless \c registration is \c never.
     * \li \c target - Specifies an UNC path to the remote server to which log records should be sent to.
     *     The local machine will be used to process log records, if not specified.
     * \li \c log_name - Specifies the log in which the source should be registered.
     *     The result of \c get_default_log_name is used, if the parameter is not specified.
     * \li \c log_source - Specifies the source name. The result of \c get_default_source_name
     *     is used, if the parameter is not specified.
     * \li \c registration - Specifies the event source registration mode in the Windows registry.
     *     Can have values of the \c registration_mode enum. Default value: \c on_demand.
     *
     * \param args A set of named parameters.
     ','line_number':560,'multiline':True]
['text':'!
     * Destructor. Unregisters event source. The log source description is not removed from the Windows registry.
     ','line_number':584,'multiline':True]
['text':'!
     * The method creates an event in the event log
     *
     * \param rec Log record to consume
     ','line_number':589,'multiline':True]
['text':'!
     * The method installs the function object that maps application severity levels to WinAPI event types
     ','line_number':596,'multiline':True]
['text':'!
     * The method installs the function object that extracts event category from attribute values
     ','line_number':601,'multiline':True]
['text':'!
     * The method installs the function object that extracts event identifier from the attributes and creates
     * insertion strings that will replace placeholders in the event message.
     ','line_number':606,'multiline':True]
['text':'!
     * \returns Default log name: Application
     ','line_number':612,'multiline':True]
['text':'!
     * \returns Default log source name that is based on the application executable file name and the sink name
     ','line_number':616,'multiline':True]
['text':'! Constructs backend implementation','line_number':623,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':640,'multiline':False]
['text':'!< Convenience typedef for narrow-character logging','line_number':644,'multiline':False]
['text':'!< Convenience typedef for narrow-character logging','line_number':645,'multiline':False]
['text':'!< Convenience typedef for wide-character logging','line_number':648,'multiline':False]
['text':'!< Convenience typedef for wide-character logging','line_number':649,'multiline':False]
['text':' namespace sinks','line_number':652,'multiline':False]
['text':' namespace log','line_number':654,'multiline':False]
['text':' namespace boost','line_number':656,'multiline':False]
['text':' BOOST_LOG_WITHOUT_EVENT_LOG','line_number':660,'multiline':False]
['text':' BOOST_LOG_SINKS_EVENT_LOG_BACKEND_HPP_INCLUDED_','line_number':662,'multiline':False]
