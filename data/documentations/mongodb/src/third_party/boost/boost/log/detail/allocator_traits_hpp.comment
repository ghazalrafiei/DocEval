['text':'
 *             Copyright Andrey Semashev 2018.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   allocator_traits.hpp
 * \author Andrey Semashev
 * \date   03.01.2018
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 ','line_number':7,'multiline':True]
['text':' A portable name for allocator traits','line_number':37,'multiline':False]
['text':'!
 * \brief A standalone trait to rebind an allocator to another type.
 *
 * The important difference from <tt>std::allocator_traits&lt;Alloc&gt;::rebind_alloc&lt;U&gt;</tt> is that this
 * trait does not require template aliases and thus is compatible with C++03. There is
 * <tt>boost::container::allocator_traits&lt;Alloc&gt;::portable_rebind_alloc&lt;U&gt;</tt>, but it is not present in <tt>std::allocator_traits</tt>.
 ','line_number':44,'multiline':True]
['text':'!
 * This specialization mostly exists to keep <tt>std::allocator&lt;void&gt;</tt> working.
 * The default template will attempt to instantiate the allocator type to test if it provides the nested <tt>rebind</tt> template.
 * We don't want that to happen because it prohibits using <tt>std::allocator&lt;void&gt;</tt> in C++17 and later, which deprecated
 * this allocator specialization. This specialization does not use the nested <tt>rebind</tt> template in this case.
 ','line_number':61,'multiline':True]
['text':' namespace aux','line_number':79,'multiline':False]
['text':' namespace log','line_number':81,'multiline':False]
['text':' namespace boost','line_number':83,'multiline':False]
['text':' BOOST_LOG_ALLOCATOR_TRAITS_HPP_INCLUDED_','line_number':87,'multiline':False]
