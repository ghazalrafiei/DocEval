['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   attribute_value_set.hpp
 * \author Andrey Semashev
 * \date   21.04.2007
 *
 * This header file contains definition of attribute value set. The set is constructed from
 * three attribute sets (global, thread-specific and source-specific) and contains attribute
 * values.
 ','line_number':7,'multiline':True]
['text':'!
 * \brief A set of attribute values
 *
 * The set of attribute values is an associative container with attribute name as a key and
 * a pointer to attribute value object as a mapped type. This is a collection of elements with unique
 * keys, that is, there can be only one attribute value with a given name in the set. With respect to
 * read-only capabilities, the set interface is close to \c std::unordered_map.
 *
 * The set is designed to be only capable of adding elements to it. Once added, the attribute value
 * cannot be removed from the set.
 *
 * An instance of attribute value set can be constructed from three attribute sets. The constructor attempts to
 * accommodate values of all attributes from the sets. The situation when a same-named attribute is found
 * in more than one attribute set is possible. This problem is solved on construction of the value set: the three
 * attribute sets have different priorities when it comes to solving conflicts.
 *
 * From the library perspective the three source attribute sets are global, thread-specific and source-specific
 * attributes, with the latter having the highest priority. This feature allows to override attributes of wider scopes
 * with the more specific ones.
 *
 * For sake of performance, the attribute values are not immediately acquired from attribute sets at construction.
 * Instead, on-demand acquisition is performed either on iterator dereferencing or on call to the \c freeze method.
 * Once acquired, the attribute value stays within the set until its destruction. This nuance does not affect
 * other set properties, such as size or lookup ability. The logging core automatically freezes the set
 * at the right point, so users should not be bothered unless they manually create attribute value sets.
 *
 * \note The attribute sets that were used for the value set construction must not be modified or destroyed
 *       until the value set is frozen. Otherwise the behavior is undefined.
 ','line_number':40,'multiline':True]
['text':'! Key type','line_number':74,'multiline':False]
['text':'! Mapped attribute type','line_number':76,'multiline':False]
['text':'! Value type','line_number':79,'multiline':False]
['text':'! Reference type','line_number':81,'multiline':False]
['text':'! Const reference type','line_number':83,'multiline':False]
['text':'! Pointer type','line_number':85,'multiline':False]
['text':'! Const pointer type','line_number':87,'multiline':False]
['text':'! Size type','line_number':89,'multiline':False]
['text':'! Pointer difference type','line_number':91,'multiline':False]
['text':'! A base class for the container nodes','line_number':100,'multiline':False]
['text':'! Container elements','line_number':112,'multiline':False]
['text':'  Standard typedefs','line_number':130,'multiline':False]
['text':'  Constructors','line_number':138,'multiline':False]
['text':'  Comparison','line_number':146,'multiline':False]
['text':'  Modification','line_number':156,'multiline':False]
['text':'  Dereferencing','line_number':184,'multiline':False]
['text':'!
     * Constant iterator type with bidirectional capabilities.
     ','line_number':195,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':200,'multiline':False]
['text':'! Pointer to the container implementation','line_number':203,'multiline':False]
['text':'!
     * Default constructor
     *
     * The constructor creates an empty set which can be filled later by subsequent
     * calls of \c insert method. Optionally, the amount of storage reserved for elements
     * to be inserted may be passed to the constructor.
     * The constructed set is frozen.
     *
     * \param reserve_count Number of elements to reserve space for.
     ','line_number':207,'multiline':True]
['text':'!
     * Move constructor
     ','line_number':219,'multiline':True]
['text':'!
     * The constructor adopts three attribute sets into the value set.
     * The \a source_attrs attributes have the greatest preference when a same-named
     * attribute is found in several sets, \a global_attrs has the least.
     * The constructed set is not frozen.
     *
     * \param source_attrs A set of source-specific attributes.
     * \param thread_attrs A set of thread-specific attributes.
     * \param global_attrs A set of global attributes.
     * \param reserve_count Amount of elements to reserve space for, in addition to the elements in the three attribute sets provided.
     ','line_number':227,'multiline':True]
['text':'!
     * The constructor adopts three attribute sets into the value set.
     * The \a source_attrs attributes have the greatest preference when a same-named
     * attribute is found in several sets, \a global_attrs has the least.
     * The constructed set is not frozen.
     *
     * \pre The \a source_attrs set is frozen.
     *
     * \param source_attrs A set of source-specific attributes.
     * \param thread_attrs A set of thread-specific attributes.
     * \param global_attrs A set of global attributes.
     * \param reserve_count Amount of elements to reserve space for, in addition to the elements in the three attribute sets provided.
     ','line_number':246,'multiline':True]
['text':'!
     * The constructor adopts three attribute sets into the value set.
     * The \a source_attrs attributes have the greatest preference when a same-named
     * attribute is found in several sets, \a global_attrs has the least.
     * The constructed set is not frozen.
     *
     * \pre The \a source_attrs set is frozen.
     *
     * \param source_attrs A set of source-specific attributes.
     * \param thread_attrs A set of thread-specific attributes.
     * \param global_attrs A set of global attributes.
     * \param reserve_count Amount of elements to reserve space for, in addition to the elements in the three attribute sets provided.
     ','line_number':267,'multiline':True]
['text':'!
     * Copy constructor.
     *
     * \pre The original set is frozen.
     * \post The constructed set is frozen, <tt>std::equal(begin(), end(), that.begin()) == true</tt>
     ','line_number':295,'multiline':True]
['text':'!
     * Destructor. Releases all referenced attribute values.
     ','line_number':303,'multiline':True]
['text':'!
     * Assignment operator
     ','line_number':308,'multiline':True]
['text':'!
     * Swaps two sets
     *
     * \b Throws: Nothing.
     ','line_number':317,'multiline':True]
['text':'!
     * \return Iterator to the first element of the set.
     ','line_number':329,'multiline':True]
['text':'!
     * \return Iterator to the after-the-last element of the set.
     ','line_number':333,'multiline':True]
['text':'!
     * \return Number of elements in the set.
     ','line_number':338,'multiline':True]
['text':'!
     * \return \c true if there are no elements in the container, \c false otherwise.
     ','line_number':342,'multiline':True]
['text':'!
     * The method finds the attribute value by name.
     *
     * \param key Attribute name.
     * \return Iterator to the found element or \c end() if the attribute with such name is not found.
     ','line_number':347,'multiline':True]
['text':'!
     * Alternative lookup syntax.
     *
     * \param key Attribute name.
     * \return A pointer to the attribute value if it is found with \a key, default-constructed mapped value otherwise.
     ','line_number':355,'multiline':True]
['text':'!
     * Alternative lookup syntax.
     *
     * \param keyword Attribute keyword.
     * \return A \c value_ref with extracted attribute value if it is found, empty \c value_ref otherwise.
     ','line_number':370,'multiline':True]
['text':'!
     * The method counts the number of the attribute value occurrences in the set. Since there can be only one
     * attribute value with a particular key, the method always return 0 or 1.
     *
     * \param key Attribute name.
     * \return The number of times the attribute value is found in the container.
     ','line_number':389,'multiline':True]
['text':'!
     * The method acquires values of all adopted attributes.
     *
     * \post The set is frozen.
     ','line_number':398,'multiline':True]
['text':'!
     * Inserts an element into the set. The complexity of the operation is amortized constant.
     *
     * \pre The set is frozen.
     *
     * \param key The attribute name.
     * \param mapped The attribute value.
     *
     * \returns An iterator to the inserted element and \c true if insertion succeeded. Otherwise,
     *          if the set already contains a same-named attribute value, iterator to the
     *          existing element and \c false.
     ','line_number':405,'multiline':True]
['text':'!
     * Inserts an element into the set. The complexity of the operation is amortized constant.
     *
     * \pre The set is frozen.
     *
     * \param value The attribute name and value.
     *
     * \returns An iterator to the inserted element and \c true if insertion succeeded. Otherwise,
     *          if the set already contains a same-named attribute value, iterator to the
     *          existing element and \c false.
     ','line_number':419,'multiline':True]
['text':'!
     * Mass insertion method. The complexity of the operation is linear to the number of elements inserted.
     *
     * \pre The set is frozen.
     *
     * \param begin A forward iterator that points to the first element to be inserted.
     * \param end A forward iterator that points to the after-the-last element to be inserted.
     ','line_number':432,'multiline':True]
['text':'!
     * Mass insertion method with ability to acquire iterators to the inserted elements.
     * The complexity of the operation is linear to the number of elements inserted times the complexity
     * of filling the \a out iterator.
     *
     * \pre The set is frozen.
     *
     * \param begin A forward iterator that points to the first element to be inserted.
     * \param end A forward iterator that points to the after-the-last element to be inserted.
     * \param out An output iterator that receives results of insertion of the elements.
     ','line_number':447,'multiline':True]
['text':'! Constructs the object by moving from \a source_attrs. This function is mostly needed to maintain ABI stable between C++03 and C++11.','line_number':467,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':475,'multiline':False]
['text':'!
 * Free swap overload
 ','line_number':478,'multiline':True]
['text':' namespace log','line_number':486,'multiline':False]
['text':' namespace boost','line_number':488,'multiline':False]
['text':' BOOST_LOG_ATTRIBUTE_VALUE_SET_HPP_INCLUDED_','line_number':492,'multiline':False]
