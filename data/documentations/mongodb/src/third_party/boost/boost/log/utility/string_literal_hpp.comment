['text':'
 *          Copyright Andrey Semashev 2007 - 2016.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   string_literal.hpp
 * \author Andrey Semashev
 * \date   24.06.2007
 *
 * The header contains implementation of a constant string literal wrapper.
 ','line_number':7,'multiline':True]
['text':' std::streamsize','line_number':21,'multiline':False]
['text':'!
 * \brief String literal wrapper
 *
 * The \c basic_string_literal is a thin wrapper around a constant string literal.
 * It provides interface similar to STL strings, but because of read-only nature
 * of string literals, lacks ability to modify string contents. However,
 * \c basic_string_literal objects can be assigned to and cleared.
 *
 * The main advantage of this class comparing to other string classes is that
 * it doesn't dynamically allocate memory and therefore is fast, thin and exception safe.
 ','line_number':39,'multiline':True]
['text':'! Self type','line_number':53,'multiline':False]
['text':'! Corresponding STL string type','line_number':67,'multiline':False]
['text':'! Pointer to the beginning of the literal','line_number':71,'multiline':False]
['text':'! Length','line_number':73,'multiline':False]
['text':'! Empty string literal to support \c clear','line_number':76,'multiline':False]
['text':'!
     * Constructor
     *
     * \post <tt>empty() == true</tt>
     ','line_number':84,'multiline':True]
['text':'!
     * Constructor from a string literal
     *
     * \post <tt>*this == p</tt>
     * \param p A zero-terminated constant sequence of characters
     ','line_number':91,'multiline':True]
['text':'! \cond','line_number':99,'multiline':False]
['text':'! \endcond','line_number':101,'multiline':False]
['text':'!
     * Copy constructor
     *
     * \post <tt>*this == that</tt>
     * \param that Source literal to copy string from
     ','line_number':107,'multiline':True]
['text':'!
     * Assignment operator
     *
     * \post <tt>*this == that</tt>
     * \param that Source literal to copy string from
     ','line_number':115,'multiline':True]
['text':'!
     * Assignment from a string literal
     *
     * \post <tt>*this == p</tt>
     * \param p A zero-terminated constant sequence of characters
     ','line_number':125,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':140,'multiline':False]
['text':'!
     * Lexicographical comparison (equality)
     *
     * \param that Comparand
     * \return \c true if the comparand string equals to this string, \c false otherwise
     ','line_number':146,'multiline':True]
['text':'!
     * Lexicographical comparison (equality)
     *
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return \c true if the comparand string equals to this string, \c false otherwise
     ','line_number':156,'multiline':True]
['text':'!
     * Lexicographical comparison (equality)
     *
     * \param that Comparand
     * \return \c true if the comparand string equals to this string, \c false otherwise
     ','line_number':166,'multiline':True]
['text':'!
     * Lexicographical comparison (inequality)
     *
     * \param that Comparand
     * \return \c true if the comparand string is not equal to this string, \c false otherwise
     ','line_number':177,'multiline':True]
['text':'!
     * Lexicographical comparison (inequality)
     *
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return \c true if the comparand string is not equal to this string, \c false otherwise
     ','line_number':187,'multiline':True]
['text':'!
     * Lexicographical comparison (inequality)
     *
     * \param that Comparand
     * \return \c true if the comparand string is not equal to this string, \c false otherwise
     ','line_number':197,'multiline':True]
['text':'!
     * Lexicographical comparison (less ordering)
     *
     * \param that Comparand
     * \return \c true if this string is less than the comparand, \c false otherwise
     ','line_number':208,'multiline':True]
['text':'!
     * Lexicographical comparison (less ordering)
     *
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return \c true if this string is less than the comparand, \c false otherwise
     ','line_number':218,'multiline':True]
['text':'!
     * Lexicographical comparison (less ordering)
     *
     * \param that Comparand
     * \return \c true if this string is less than the comparand, \c false otherwise
     ','line_number':228,'multiline':True]
['text':'!
     * Lexicographical comparison (less or equal ordering)
     *
     * \param that Comparand
     * \return \c true if this string is less or equal to the comparand, \c false otherwise
     ','line_number':239,'multiline':True]
['text':'!
     * Lexicographical comparison (less or equal ordering)
     *
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return \c true if this string is less or equal to the comparand, \c false otherwise
     ','line_number':249,'multiline':True]
['text':'!
     * Lexicographical comparison (less or equal ordering)
     *
     * \param that Comparand
     * \return \c true if this string is less or equal to the comparand, \c false otherwise
     ','line_number':259,'multiline':True]
['text':'!
     * Lexicographical comparison (greater ordering)
     *
     * \param that Comparand
     * \return \c true if this string is greater than the comparand, \c false otherwise
     ','line_number':270,'multiline':True]
['text':'!
     * Lexicographical comparison (greater ordering)
     *
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return \c true if this string is greater than the comparand, \c false otherwise
     ','line_number':280,'multiline':True]
['text':'!
     * Lexicographical comparison (greater ordering)
     *
     * \param that Comparand
     * \return \c true if this string is greater than the comparand, \c false otherwise
     ','line_number':290,'multiline':True]
['text':'!
     * Lexicographical comparison (greater or equal ordering)
     *
     * \param that Comparand
     * \return \c true if this string is greater or equal to the comparand, \c false otherwise
     ','line_number':301,'multiline':True]
['text':'!
     * Lexicographical comparison (greater or qual ordering)
     *
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return \c true if this string is greater or equal to the comparand, \c false otherwise
     ','line_number':311,'multiline':True]
['text':'!
     * Lexicographical comparison (greater or equal ordering)
     *
     * \param that Comparand
     * \return \c true if this string is greater or equal to the comparand, \c false otherwise
     ','line_number':321,'multiline':True]
['text':'!
     * Subscript operator
     *
     * \pre <tt>i < size()</tt>
     * \param i Requested character index
     * \return Constant reference to the requested character
     ','line_number':332,'multiline':True]
['text':'!
     * Checked subscript
     *
     * \param i Requested character index
     * \return Constant reference to the requested character
     *
     * \b Throws: An <tt>std::exception</tt>-based exception if index \a i is out of string boundaries
     ','line_number':343,'multiline':True]
['text':'!
     * \return Pointer to the beginning of the literal
     ','line_number':358,'multiline':True]
['text':'!
     * \return Pointer to the beginning of the literal
     ','line_number':362,'multiline':True]
['text':'!
     * \return Length of the literal
     ','line_number':366,'multiline':True]
['text':'!
     * \return Length of the literal
     ','line_number':370,'multiline':True]
['text':'!
     * \return \c true if the literal is an empty string, \c false otherwise
     ','line_number':375,'multiline':True]
['text':'!
     * \return Iterator that points to the first character of the literal
     ','line_number':383,'multiline':True]
['text':'!
     * \return Iterator that points after the last character of the literal
     ','line_number':387,'multiline':True]
['text':'!
     * \return Reverse iterator that points to the last character of the literal
     ','line_number':391,'multiline':True]
['text':'!
     * \return Reverse iterator that points before the first character of the literal
     ','line_number':395,'multiline':True]
['text':'!
     * \return STL string constructed from the literal
     ','line_number':400,'multiline':True]
['text':'!
     * The method clears the literal
     *
     * \post <tt>empty() == true</tt>
     ','line_number':408,'multiline':True]
['text':'!
     * The method swaps two literals
     ','line_number':418,'multiline':True]
['text':'!
     * Assignment from another literal
     *
     * \post <tt>*this == that</tt>
     * \param that Source literal to copy string from
     ','line_number':432,'multiline':True]
['text':'!
     * Assignment from another literal
     *
     * \post <tt>*this == p</tt>
     * \param p A zero-terminated constant sequence of characters
     ','line_number':444,'multiline':True]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':459,'multiline':False]
['text':'!
     * The method copies the literal or its portion to an external buffer
     *
     * \pre <tt>pos <= size()</tt>
     * \param str Pointer to the external buffer beginning. Must not be NULL.
     *            The buffer must have enough capacity to accommodate the requested number of characters.
     * \param n Maximum number of characters to copy
     * \param pos Starting position to start copying from
     * \return Number of characters copied
     *
     * \b Throws: An <tt>std::exception</tt>-based exception if \a pos is out of range.
     ','line_number':467,'multiline':True]
['text':'!
     * Lexicographically compares the argument string to a part of this string
     *
     * \pre <tt>pos <= size()</tt>
     * \param pos Starting position within this string to perform comparison to
     * \param n Length of the substring of this string to perform comparison to
     * \param str Comparand. Must point to a sequence of characters, must not be NULL.
     * \param len Number of characters in the sequence \a str.
     * \return Zero if the comparand equals this string, a negative value if this string is less than the comparand,
     *         a positive value if this string is greater than the comparand.
     *
     * \b Throws: An <tt>std::exception</tt>-based exception if \a pos is out of range.
     ','line_number':491,'multiline':True]
['text':'!
     * Lexicographically compares the argument string to a part of this string
     *
     * \pre <tt>pos <= size()</tt>
     * \param pos Starting position within this string to perform comparison to
     * \param n Length of the substring of this string to perform comparison to
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return Zero if the comparand equals this string, a negative value if this string is less than the comparand,
     *         a positive value if this string is greater than the comparand.
     *
     * \b Throws: An <tt>std::exception</tt>-based exception if \a pos is out of range.
     ','line_number':516,'multiline':True]
['text':'!
     * Lexicographically compares the argument string literal to a part of this string
     *
     * \pre <tt>pos <= size()</tt>
     * \param pos Starting position within this string to perform comparison to
     * \param n Length of the substring of this string to perform comparison to
     * \param that Comparand
     * \return Zero if the comparand equals this string, a negative value if this string is less than the comparand,
     *         a positive value if this string is greater than the comparand.
     *
     * \b Throws: An <tt>std::exception</tt>-based exception if \a pos is out of range.
     ','line_number':532,'multiline':True]
['text':'!
     * Lexicographically compares the argument string to this string
     *
     * \param str Comparand. Must point to a sequence of characters, must not be NULL.
     * \param len Number of characters in the sequence \a str.
     * \return Zero if the comparand equals this string, a negative value if this string is less than the comparand,
     *         a positive value if this string is greater than the comparand.
     ','line_number':548,'multiline':True]
['text':'!
     * Lexicographically compares the argument string to this string
     *
     * \param str Comparand. Must point to a zero-terminated sequence of characters, must not be NULL.
     * \return Zero if the comparand equals this string, a negative value if this string is less than the comparand,
     *         a positive value if this string is greater than the comparand.
     ','line_number':560,'multiline':True]
['text':'!
     * Lexicographically compares the argument string to this string
     *
     * \param that Comparand
     * \return Zero if the comparand equals this string, a negative value if this string is less than the comparand,
     *         a positive value if this string is greater than the comparand.
     ','line_number':571,'multiline':True]
['text':'! Internal comparison implementation','line_number':585,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':596,'multiline':False]
['text':' namespace aux','line_number':644,'multiline':False]
['text':'! Output operator','line_number':646,'multiline':False]
['text':'! External swap','line_number':664,'multiline':False]
['text':'! Creates a string literal wrapper from a constant string literal','line_number':671,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':682,'multiline':False]
['text':' BOOST_LOG_DOXYGEN_PASS','line_number':703,'multiline':False]
['text':' namespace log','line_number':705,'multiline':False]
['text':' namespace boost','line_number':707,'multiline':False]
['text':' BOOST_LOG_UTILITY_STRING_LITERAL_HPP_INCLUDED_','line_number':711,'multiline':False]
