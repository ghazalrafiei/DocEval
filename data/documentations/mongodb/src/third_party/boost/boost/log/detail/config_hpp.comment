['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   config.hpp
 * \author Andrey Semashev
 * \date   08.03.2007
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html. In this file
 *         internal configuration macros are defined.
 ','line_number':7,'multiline':True]
['text':' Try including WinAPI config as soon as possible so that any other headers don't include Windows SDK headers','line_number':22,'multiline':False]
['text':' To bring in libc macros','line_number':27,'multiline':False]
['text':' The library requires dynamic_cast in a few places','line_number':30,'multiline':False]
['text':' For some reason MSVC 9.0 fails to link the library if static integral constants are defined in cpp','line_number':57,'multiline':False]
['text':' MSVC 7.1 sometimes fails to match out-of-class template function definitions with','line_number':60,'multiline':False]
['text':' their declarations if the return type or arguments of the functions involve typename keyword','line_number':61,'multiline':False]
['text':' and depend on the template parameters.','line_number':62,'multiline':False]
['text':' Older MSVC versions reject friend declarations for class template specializations','line_number':66,'multiline':False]
['text':' MSVC up to 10.0 attempts to invoke copy constructor when initializing a const reference from rvalue returned from a function.','line_number':70,'multiline':False]
['text':' This fails when the returned value cannot be copied (only moved):','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':' class base {};','line_number':73,'multiline':False]
['text':' class derived : public base { BOOST_MOVABLE_BUT_NOT_COPYABLE(derived) };','line_number':74,'multiline':False]
['text':' derived foo();','line_number':75,'multiline':False]
['text':' base const& var = foo(); // attempts to call copy constructor of derived','line_number':76,'multiline':False]
['text':' MSVC 9.0 mandates packaging of STL classes, which apparently affects alignment and','line_number':80,'multiline':False]
['text':' makes alignment_of< T >::value no longer be a power of 2 for types that derive from STL classes.','line_number':81,'multiline':False]
['text':' This breaks type_with_alignment and everything that relies on it.','line_number':82,'multiline':False]
['text':' This doesn't happen with non-native STLs, such as STLPort. Strangely, this doesn't show with','line_number':83,'multiline':False]
['text':' STL classes themselves or most of the user-defined derived classes.','line_number':84,'multiline':False]
['text':' Not sure if that happens with other MSVC versions.','line_number':85,'multiline':False]
['text':' See: http://svn.boost.org/trac/boost/ticket/1946','line_number':86,'multiline':False]
['text':' Intel compiler and Sun Studio 12.3 have problems with friend declarations for nested class templates','line_number':92,'multiline':False]
['text':' MSVC cannot interpret constant expressions in certain contexts, such as non-type template parameters','line_number':97,'multiline':False]
['text':' The compiler does not support std::codecvt<char16_t> and std::codecvt<char32_t> specializations.','line_number':102,'multiline':False]
['text':' The BOOST_NO_CXX11_HDR_CODECVT means there's no usable <codecvt>, which is slightly different from this macro.','line_number':103,'multiline':False]
['text':' But in order for <codecvt> to be implemented the std::codecvt specializations have to be implemented as well.','line_number':104,'multiline':False]
['text':' We need to check the C++ version as well, since <codecvt> is deprecated from C++17 onwards which may cause','line_number':105,'multiline':False]
['text':' BOOST_NO_CXX11_HDR_CODECVT to be set, even though std::codecvt in <locale> is just fine.','line_number':106,'multiline':False]
['text':' Boost.ASIO is broken on Cygwin','line_number':111,'multiline':False]
['text':' for _WRS_CONFIG_USER_MANAGEMENT used below','line_number':118,'multiline':False]
['text':' Until Android API version 21 Google NDK does not provide getpwuid_r','line_number':124,'multiline':False]
['text':' GCC 4.1 and 4.2 have buggy anonymous namespaces support, which interferes with symbol linkage','line_number':135,'multiline':False]
['text':' GCC up to 4.6 (inclusively) did not support expanding template argument packs into non-variadic template arguments','line_number':142,'multiline':False]
['text':' GCC 4.6 does not support in-class brace initializers for static constexpr array members','line_number':147,'multiline':False]
['text':' GCC 4.6 cannot handle defaulted functions with noexcept specifier or virtual functions','line_number':152,'multiline':False]
['text':' Clang 3.1 cannot handle a defaulted constexpr constructor in some cases (presumably, if the class contains a member with a constexpr constructor)','line_number':158,'multiline':False]
['text':' The macro indicates that the compiler does not support C++20 pack expansions in lambda init-captures.','line_number':162,'multiline':False]
['text':' Early gcc, clang and MSVC versions support C++20 pack expansions in lambda init-captures,','line_number':163,'multiline':False]
['text':' but define __cpp_init_captures to a lower value.','line_number':164,'multiline':False]
['text':' An MS-like compilers' extension that allows to optimize away the needless code','line_number':183,'multiline':False]
['text':' Clang 3.6 adds __builtin_assume, but enabling it causes weird compilation errors, where the compiler','line_number':187,'multiline':False]
['text':' doesn't see one of attachable_sstream_buf::append overloads. It works fine with Clang 3.7 and later.','line_number':188,'multiline':False]
['text':' The statement marking unreachable branches of code to avoid warnings','line_number':198,'multiline':False]
['text':' The macro efficiently returns a local lvalue from a function.','line_number':217,'multiline':False]
['text':' It employs NRVO, if supported by compiler, or uses a move constructor otherwise.','line_number':218,'multiline':False]
['text':' Some compilers support a special attribute that shows that a function won't return','line_number':225,'multiline':False]
['text':' GCC and Sun Studio 12 support attribute syntax','line_number':227,'multiline':False]
['text':' Microsoft-compatible compilers go here','line_number':230,'multiline':False]
['text':' The rest compilers might emit bogus warnings about missing return statements','line_number':233,'multiline':False]
['text':' in functions with non-void return types when throw_exception is used.','line_number':234,'multiline':False]
['text':' Some compilers may require marking types that may alias other types','line_number':238,'multiline':False]
['text':' Detect if we're dealing with dll','line_number':243,'multiline':False]
['text':'','line_number':253,'multiline':False]
['text':' Automatically link to the correct build variant where possible.','line_number':254,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' In static-library builds compilers ignore auto-link comments from Boost.Log binary to','line_number':264,'multiline':False]
['text':' other Boost libraries. We explicitly add comments here for other libraries.','line_number':265,'multiline':False]
['text':' In dynamic-library builds this is not needed.','line_number':266,'multiline':False]
['text':' Boost.Thread's config is included below, if needed','line_number':269,'multiline':False]
['text':' auto-linking disabled','line_number':271,'multiline':False]
['text':' !defined(BOOST_LOG_BUILDING_THE_LIB)','line_number':273,'multiline':False]
['text':' !defined(BOOST_LOG_BUILDING_THE_LIB)','line_number':281,'multiline':False]
['text':' By default we provide support for both char and wchar_t','line_number':283,'multiline':False]
['text':' Check if multithreading is supported','line_number':292,'multiline':False]
['text':' !defined(BOOST_LOG_NO_THREADS) && !defined(BOOST_HAS_THREADS)','line_number':295,'multiline':False]
['text':' !defined(BOOST_LOG_DOXYGEN_PASS)','line_number':296,'multiline':False]
['text':' We need this header to (i) enable auto-linking with Boost.Thread and','line_number':299,'multiline':False]
['text':' (ii) to bring in configuration macros of Boost.Thread.','line_number':300,'multiline':False]
['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':302,'multiline':False]
['text':' !defined(BOOST_LOG_NO_THREADS)','line_number':309,'multiline':False]
['text':' defined(BOOST_LOG_USE_COMPILER_TLS)','line_number':319,'multiline':False]
['text':'! The macro defines the CPU cache line size for the target architecture. This is mostly used for optimization.','line_number':322,'multiline':False]
['text':' Setup namespace name','line_number':334,'multiline':False]
['text':' defined(BOOST_LOG_NO_THREADS)','line_number':353,'multiline':False]
['text':' defined(BOOST_LOG_NO_THREADS)','line_number':371,'multiline':False]
['text':' defined(BOOST_LOG_DLL)','line_number':372,'multiline':False]
['text':' GCC 7 deprecated strong using directives but allows inline namespaces in C++03 mode since GCC 4.4.','line_number':386,'multiline':False]
['text':' namespace log','line_number':406,'multiline':False]
['text':' !defined(BOOST_LOG_DOXYGEN_PASS)','line_number':408,'multiline':False]
['text':' !defined(BOOST_LOG_DOXYGEN_PASS)','line_number':414,'multiline':False]
['text':' namespace boost','line_number':420,'multiline':False]
['text':' BOOST_LOG_DETAIL_CONFIG_HPP_INCLUDED_','line_number':422,'multiline':False]
