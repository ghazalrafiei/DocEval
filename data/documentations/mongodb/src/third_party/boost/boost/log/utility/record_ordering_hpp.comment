['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   record_ordering.hpp
 * \author Andrey Semashev
 * \date   23.08.2009
 *
 * This header contains ordering predicates for logging records.
 ','line_number':7,'multiline':True]
['text':'!
 * \brief Ordering predicate, based on opaque pointers to the record view implementation data
 *
 * Since record views only refer to a shared implementation data, this predicate is able to order the views
 * by comparing the pointers to the data. Therefore two views are considered to be equivalent if they
 * refer to the same implementation data. Otherwise it is not specified whether one record is ordered before
 * the other until the predicate is applied. Note that the ordering may change every time the application runs.
 *
 * This kind of ordering may be useful if log records are to be stored in an associative
 * container with as least performance overhead as possible, when the particular order is not important.
 *
 * The \c FunT template argument is the predicate that is used to actually compare pointers. It should be
 * able to compare <tt>const void*</tt> pointers. The compared pointers may refer to distinct memory regions,
 * the pointers must not be interpreted in any way.
 ','line_number':38,'multiline':True]
['text':'! Result type','line_number':58,'multiline':False]
['text':'!
     * Default constructor. Requires \c FunT to be default constructible.
     ','line_number':62,'multiline':True]
['text':'!
     * Initializing constructor. Constructs \c FunT instance as a copy of the \a fun argument.
     ','line_number':68,'multiline':True]
['text':'!
     * Ordering operator
     ','line_number':75,'multiline':True]
['text':' We rely on the fact that the attribute_values() method returns a reference to the object in the record implementation,','line_number':80,'multiline':False]
['text':' so we can compare pointers.','line_number':81,'multiline':False]
['text':'!
 * \brief Ordering predicate, based on attribute values associated with records
 *
 * This predicate allows to order log records based on values of a specifically named attribute
 * associated with them. Two given log records being compared should both have the specified
 * attribute value of the specified type to be able to be ordered properly. As a special case,
 * if neither of the records have the value, these records are considered equivalent. Otherwise,
 * the ordering results are unspecified.
 ','line_number':86,'multiline':True]
['text':'! Result type','line_number':100,'multiline':False]
['text':'! Compared attribute value type','line_number':102,'multiline':False]
['text':'! Attribute value name','line_number':152,'multiline':False]
['text':'!
     * Initializing constructor.
     *
     * \param name The attribute value name to be compared
     * \param fun The ordering functor
     ','line_number':156,'multiline':True]
['text':'!
     * Ordering operator
     ','line_number':168,'multiline':True]
['text':'!
 * The function constructs a log record ordering predicate
 ','line_number':182,'multiline':True]
['text':'! An ordering predicate constructor that uses SFINAE to disable invalid instantiations','line_number':196,'multiline':False]
['text':' namespace aux','line_number':209,'multiline':False]
['text':'!
 * The function constructs a log record ordering predicate
 ','line_number':211,'multiline':True]
['text':' BOOST_LOG_NO_FUNCTION_TRAITS','line_number':221,'multiline':False]
['text':' namespace log','line_number':223,'multiline':False]
['text':' namespace boost','line_number':225,'multiline':False]
['text':' BOOST_LOG_UTILITY_RECORD_ORDERING_HPP_INCLUDED_','line_number':229,'multiline':False]
