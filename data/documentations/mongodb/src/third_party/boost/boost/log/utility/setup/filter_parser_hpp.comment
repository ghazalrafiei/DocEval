['text':'
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   filter_parser.hpp
 * \author Andrey Semashev
 * \date   31.03.2008
 *
 * The header contains definition of a filter parser function.
 ','line_number':7,'multiline':True]
['text':'!
 * The interface class for all filter factories.
 ','line_number':45,'multiline':True]
['text':'! Character type','line_number':51,'multiline':False]
['text':'! String type','line_number':53,'multiline':False]
['text':'!
     * Default constructor
     ','line_number':56,'multiline':True]
['text':'!
     * Virtual destructor
     ','line_number':61,'multiline':True]
['text':'!
     * The callback for filter for the attribute existence test
     ','line_number':66,'multiline':True]
['text':'!
     * The callback for equality relation filter
     ','line_number':74,'multiline':True]
['text':'!
     * The callback for inequality relation filter
     ','line_number':82,'multiline':True]
['text':'!
     * The callback for less relation filter
     ','line_number':90,'multiline':True]
['text':'!
     * The callback for greater relation filter
     ','line_number':98,'multiline':True]
['text':'!
     * The callback for less or equal relation filter
     ','line_number':106,'multiline':True]
['text':'!
     * The callback for greater or equal relation filter
     ','line_number':114,'multiline':True]
['text':'!
     * The callback for custom relation filter
     ','line_number':123,'multiline':True]
['text':'!
 * The base class for filter factories. The class defines default implementations for most
 * filter expressions. In order to be able to construct filters, the attribute value type must
 * support reading from a stream. Also, the default filters will rely on relational operators for
 * the type, so these operators must also be defined.
 ','line_number':136,'multiline':True]
['text':'! Base type','line_number':146,'multiline':False]
['text':'! The type(s) of the attribute value expected','line_number':150,'multiline':False]
['text':'  Type imports','line_number':152,'multiline':False]
['text':'!
     * The callback for filter for the attribute existence test
     ','line_number':155,'multiline':True]
['text':'!
     * The callback for equality relation filter
     ','line_number':163,'multiline':True]
['text':'!
     * The callback for inequality relation filter
     ','line_number':170,'multiline':True]
['text':'!
     * The callback for less relation filter
     ','line_number':177,'multiline':True]
['text':'!
     * The callback for greater relation filter
     ','line_number':184,'multiline':True]
['text':'!
     * The callback for less or equal relation filter
     ','line_number':191,'multiline':True]
['text':'!
     * The callback for greater or equal relation filter
     ','line_number':198,'multiline':True]
['text':'!
     * The callback for custom relation filter
     ','line_number':206,'multiline':True]
['text':'!
     * The function parses the argument value for a binary relation
     ','line_number':215,'multiline':True]
['text':'!
 * The function registers a filter factory object for the specified attribute name. The factory will be
 * used to construct a filter during parsing the filter string.
 *
 * \pre <tt>name != NULL && factory != NULL</tt>, <tt>name</tt> points to a zero-terminated string
 * \param name Attribute name to associate the factory with
 * \param factory The filter factory
 ','line_number':224,'multiline':True]
['text':'!
 * The function registers a filter factory object for the specified attribute name. The factory will be
 * used to construct a filter during parsing the filter string.
 *
 * \pre <tt>name != NULL && factory != NULL</tt>, <tt>name</tt> points to a zero-terminated string
 * \param name Attribute name to associate the factory with
 * \param factory The filter factory
 ','line_number':236,'multiline':True]
['text':'!
 * The function registers a simple filter factory object for the specified attribute name. The factory will
 * support attribute values of type \c AttributeValueT, which must support all relation operations, such as
 * equality comparison and less/greater ordering, and also extraction from stream.
 *
 * \pre <tt>name != NULL</tt>, <tt>name</tt> points to a zero-terminated string
 * \param name Attribute name to associate the factory with
 ','line_number':253,'multiline':True]
['text':'!
 * The function registers a simple filter factory object for the specified attribute name. The factory will
 * support attribute values of type \c AttributeValueT, which must support all relation operations, such as
 * equality comparison and less/greater ordering, and also extraction from stream.
 *
 * \pre <tt>name != NULL</tt>, <tt>name</tt> points to a zero-terminated string
 * \param name Attribute name to associate the factory with
 ','line_number':269,'multiline':True]
['text':'!
 * The function registers a simple filter factory object for the specified attribute keyword. The factory will
 * support attribute values described by the keyword. The values must support all relation operations, such as
 * equality comparison and less/greater ordering, and also extraction from stream.
 *
 * \pre <tt>name != NULL</tt>, <tt>name</tt> points to a zero-terminated string
 * \param keyword Attribute keyword to associate the factory with
 ','line_number':283,'multiline':True]
['text':'!
 * The function parses a filter from the sequence of characters
 *
 * \pre <tt>begin <= end</tt>, both pointers must not be \c NULL
 * \param begin Pointer to the first character of the sequence
 * \param end Pointer to the after-the-last character of the sequence
 * \return A function object that can be used as a filter.
 *
 * \b Throws: An <tt>std::exception</tt>-based exception, if a filter cannot be recognized in the character sequence.
 ','line_number':297,'multiline':True]
['text':'!
 * The function parses a filter from the string
 *
 * \param str A string that contains filter description
 * \return A function object that can be used as a filter.
 *
 * \b Throws: An <tt>std::exception</tt>-based exception, if a filter cannot be recognized in the character sequence.
 ','line_number':310,'multiline':True]
['text':'!
 * The function parses a filter from the string
 *
 * \pre <tt>str != NULL</tt>, <tt>str</tt> points to a zero-terminated string.
 * \param str A string that contains filter description.
 * \return A function object that can be used as a filter.
 *
 * \b Throws: An <tt>std::exception</tt>-based exception, if a filter cannot be recognized in the character sequence.
 ','line_number':325,'multiline':True]
['text':' namespace log','line_number':340,'multiline':False]
['text':' namespace boost','line_number':342,'multiline':False]
['text':' BOOST_LOG_UTILITY_SETUP_FILTER_PARSER_HPP_INCLUDED_','line_number':346,'multiline':False]
