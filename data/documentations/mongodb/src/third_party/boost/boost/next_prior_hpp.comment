['text':'  Boost next_prior.hpp header file  ---------------------------------------//','line_number':1,'multiline':False]
['text':'  (C) Copyright Dave Abrahams and Daniel Walker 1999-2003.','line_number':3,'multiline':False]
['text':'  Copyright (c) Andrey Semashev 2017','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':7,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':8,'multiline':False]
['text':'  See http://www.boost.org/libs/utility for documentation.','line_number':10,'multiline':False]
['text':'  Revision History','line_number':12,'multiline':False]
['text':'  13 Dec 2003  Added next(x, n) and prior(x, n) (Daniel Walker)','line_number':13,'multiline':False]
['text':'  Helper functions for classes like bidirectional iterators not supporting','line_number':30,'multiline':False]
['text':'  operator+ and operator-','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'  Usage:','line_number':33,'multiline':False]
['text':'    const std::list<T>::iterator p = get_some_iterator();','line_number':34,'multiline':False]
['text':'    const std::list<T>::iterator prev = boost::prior(p);','line_number':35,'multiline':False]
['text':'    const std::list<T>::iterator next = boost::next(prev, 2);','line_number':36,'multiline':False]
['text':'  Contributed by Dave Abrahams','line_number':38,'multiline':False]
['text':' The trait attempts to detect if the T type is an iterator. Class-type iterators are assumed','line_number':42,'multiline':False]
['text':' to have the nested type iterator_category. Strictly speaking, this is not required to be the','line_number':43,'multiline':False]
['text':' case (e.g. a user can specialize iterator_traits for T without defining T::iterator_category).','line_number':44,'multiline':False]
['text':' Still, this is a good heuristic in practice, and we can't do anything better anyway.','line_number':45,'multiline':False]
['text':' Since C++17 we can test for iterator_traits<T>::iterator_category presence instead as it is','line_number':46,'multiline':False]
['text':' required to be only present for iterators.','line_number':47,'multiline':False]
['text':' Avoid negating n to sidestep possible integer overflow','line_number':166,'multiline':False]
['text':' namespace next_prior_detail','line_number':173,'multiline':False]
['text':' namespace boost','line_number':193,'multiline':False]
['text':' BOOST_NEXT_PRIOR_HPP_INCLUDED','line_number':195,'multiline':False]
