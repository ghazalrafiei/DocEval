['text':'
 *          Copyright Andrey Semashev 2018 - 2020.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          https://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   uncaught_exceptions.hpp
 * \author Andrey Semashev
 * \date   2018-11-10
 *
 * \brief  This header provides an `uncaught_exceptions` function implementation, which was introduced in C++17.
 *
 * The code in this file is based on the implementation by Evgeny Panasyuk:
 *
 * https://github.com/panaseleus/stack_unwinding/blob/master/boost/exception/uncaught_exception_count.hpp
 ','line_number':7,'multiline':True]
['text':' Apple systems only support std::uncaught_exceptions starting with specific versions:','line_number':32,'multiline':False]
['text':' - Mac OS >= 10.12','line_number':33,'multiline':False]
['text':' - iOS >= 10.0','line_number':34,'multiline':False]
['text':' - tvOS >= 10.0','line_number':35,'multiline':False]
['text':' - watchOS >= 3.0','line_number':36,'multiline':False]
['text':' https://github.com/boostorg/core/issues/80','line_number':37,'multiline':False]
['text':' defined(__APPLE__)','line_number':44,'multiline':False]
['text':' Visual Studio 14.0 supports N4152 std::uncaught_exceptions() but doesn't define __cpp_lib_uncaught_exceptions','line_number':45,'multiline':False]
['text':' cxxabi.h availability macro','line_number':52,'multiline':False]
['text':' MinGW GCC 4.4 seem to not work the same way the newer GCC versions do. As a result, __cxa_get_globals based implementation will always return 0.','line_number':62,'multiline':False]
['text':' Just disable it for now and fall back to std::uncaught_exception().','line_number':63,'multiline':False]
['text':' On AIX, xlclang++ does have cxxabi.h but doesn't have __cxa_get_globals (https://github.com/boostorg/core/issues/78).','line_number':64,'multiline':False]
['text':' At least on MinGW and Linux, only GCC since 4.7 declares __cxa_get_globals() in cxxabi.h. Older versions of GCC do not expose this function but it's there.','line_number':72,'multiline':False]
['text':' On OpenBSD, it seems, the declaration is also missing.','line_number':73,'multiline':False]
['text':' Note that at least on FreeBSD 11, cxxabi.h declares __cxa_get_globals with a different exception specification, so we can't declare the function unconditionally.','line_number':74,'multiline':False]
['text':' On Linux with clang and libc++ and on OS X, there is a version of cxxabi.h from libc++abi that doesn't declare __cxa_get_globals, but provides __cxa_uncaught_exceptions.','line_number':75,'multiline':False]
['text':' The function only appeared in version _LIBCPPABI_VERSION >= 1002 of the library. Unfortunately, there are linking errors about undefined reference to __cxa_uncaught_exceptions','line_number':76,'multiline':False]
['text':' on Ubuntu Trusty and OS X, so we avoid using it and forward-declare __cxa_get_globals instead.','line_number':77,'multiline':False]
['text':' On QNX SDP 7.0 (QCC 5.4.0), there are multiple cxxabi.h, one from glibcxx from gcc and another from libc++abi from LLVM. Which one is included will be determined by the qcc','line_number':78,'multiline':False]
['text':' command line arguments (-V and/or -Y; http://www.qnx.com/developers/docs/7.0.0/#com.qnx.doc.neutrino.utilities/topic/q/qcc.html). The LLVM libc++abi is missing the declaration','line_number':79,'multiline':False]
['text':' of __cxa_get_globals but it is also patched by QNX developers to not define _LIBCPPABI_VERSION. Older QNX SDP versions, up to and including 6.6, don't provide LLVM and libc++abi.','line_number':80,'multiline':False]
['text':' See https://github.com/boostorg/core/issues/59.','line_number':81,'multiline':False]
['text':' namespace __cxxabiv1','line_number':96,'multiline':False]
['text':' defined(BOOST_CORE_HAS_CXXABI_H)','line_number':99,'multiline':False]
['text':' namespace detail','line_number':108,'multiline':False]
['text':' namespace core','line_number':109,'multiline':False]
['text':' namespace boost','line_number':110,'multiline':False]
['text':' defined(_MSC_VER) && _MSC_VER >= 1400','line_number':111,'multiline':False]
['text':' !defined(BOOST_CORE_HAS_UNCAUGHT_EXCEPTIONS)','line_number':113,'multiline':False]
['text':'! This macro is defined when `uncaught_exceptions` is not guaranteed to return values greater than 1 if multiple exceptions are pending','line_number':116,'multiline':False]
['text':'! Returns the number of currently pending exceptions','line_number':124,'multiline':False]
['text':' C++17 implementation','line_number':128,'multiline':False]
['text':' Tested on {clang 3.2,GCC 3.5.6,GCC 4.1.2,GCC 4.4.6,GCC 4.4.7}x{x32,x64}','line_number':131,'multiline':False]
['text':' __cxa_eh_globals::uncaughtExceptions, x32 offset - 0x4, x64 - 0x8','line_number':133,'multiline':False]
['text':' MSVC specific. Tested on {MSVC2005SP1,MSVC2008SP1,MSVC2010SP1,MSVC2012}x{x32,x64}.','line_number':136,'multiline':False]
['text':' _tiddata::_ProcessingThrow, x32 offset - 0x90, x64 - 0x100','line_number':138,'multiline':False]
['text':' Portable C++03 implementation. Does not allow to detect multiple nested exceptions.','line_number':141,'multiline':False]
['text':' namespace core','line_number':146,'multiline':False]
['text':' namespace boost','line_number':148,'multiline':False]
['text':' BOOST_CORE_UNCAUGHT_EXCEPTIONS_HPP_INCLUDED_','line_number':155,'multiline':False]
