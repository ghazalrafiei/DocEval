['text':' MS compatible compilers support #pragma once','line_number':4,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':'  ref.hpp - ref/cref, useful helper functions','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'  Copyright (C) 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)','line_number':18,'multiline':False]
['text':'  Copyright (C) 2001, 2002 Peter Dimov','line_number':19,'multiline':False]
['text':'  Copyright (C) 2002 David Abrahams','line_number':20,'multiline':False]
['text':'','line_number':21,'multiline':False]
['text':'  Copyright (C) 2014 Glen Joseph Fernandes','line_number':22,'multiline':False]
['text':'  (glenjofe@gmail.com)','line_number':23,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':'  Copyright (C) 2014 Agustin Berge','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':27,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':28,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':'  See http://www.boost.org/libs/core/doc/html/core/ref.html for documentation.','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':'*
 @file
','line_number':34,'multiline':True]
['text':'*
 Boost namespace.
','line_number':38,'multiline':True]
['text':' namespace detail','line_number':68,'multiline':False]
['text':' reference_wrapper','line_number':70,'multiline':False]
['text':'*
 @brief Contains a reference to an object of type `T`.

 `reference_wrapper` is primarily used to "feed" references to
 function templates (algorithms) that take their parameter by
 value. It provides an implicit conversion to `T&`, which
 usually allows the function templates to work on references
 unmodified.
','line_number':72,'multiline':True]
['text':'*
     Type `T`.
    ','line_number':84,'multiline':True]
['text':'*
     Constructs a `reference_wrapper` object that stores a
     reference to `t`.

     @remark Does not throw.
    ','line_number':89,'multiline':True]
['text':'*
     @remark Construction from a temporary object is disabled.
    ','line_number':104,'multiline':True]
['text':'*
     Constructs a `reference_wrapper` object that stores the
     reference stored in the compatible `reference_wrapper` `r`.

     @remark Only enabled when `Y*` is convertible to `T*`.
     @remark Does not throw.
    ','line_number':113,'multiline':True]
['text':'*
     @return The stored reference.
     @remark Does not throw.
    ','line_number':126,'multiline':True]
['text':'*
     @return The stored reference.
     @remark Does not throw.
    ','line_number':132,'multiline':True]
['text':'*
     @return A pointer to the object referenced by the stored
       reference.
     @remark Does not throw.
    ','line_number':138,'multiline':True]
['text':' ref','line_number':150,'multiline':False]
['text':'*
 @cond
','line_number':152,'multiline':True]
['text':'*
 @endcond
','line_number':160,'multiline':True]
['text':'*
 @return `reference_wrapper<T>(t)`
 @remark Does not throw.
','line_number':164,'multiline':True]
['text':' cref','line_number':181,'multiline':False]
['text':'*
 @return `reference_wrapper<T const>(t)`
 @remark Does not throw.
','line_number':183,'multiline':True]
['text':'*
 @cond
','line_number':196,'multiline':True]
['text':'*
 @endcond
','line_number':204,'multiline':True]
['text':'*
 @remark Construction from a temporary object is disabled.
','line_number':208,'multiline':True]
['text':'*
 @remark Construction from a temporary object is disabled.
','line_number':213,'multiline':True]
['text':' is_reference_wrapper','line_number':222,'multiline':False]
['text':'*
 @brief Determine if a type `T` is an instantiation of
 `reference_wrapper`.

 The value static constant will be true if the type `T` is a
 specialization of `reference_wrapper`.
','line_number':224,'multiline':True]
['text':'*
 @cond
','line_number':236,'multiline':True]
['text':' !defined(BOOST_NO_CV_SPECIALIZATIONS)','line_number':261,'multiline':False]
['text':'*
 @endcond
','line_number':263,'multiline':True]
['text':' unwrap_reference','line_number':268,'multiline':False]
['text':'*
 @brief Find the type in a `reference_wrapper`.

 The `typedef` type is `T::type` if `T` is a
 `reference_wrapper`, `T` otherwise.
','line_number':270,'multiline':True]
['text':'*
 @cond
','line_number':281,'multiline':True]
['text':' !defined(BOOST_NO_CV_SPECIALIZATIONS)','line_number':306,'multiline':False]
['text':'*
 @endcond
','line_number':308,'multiline':True]
['text':' unwrap_ref','line_number':312,'multiline':False]
['text':'*
 @return `unwrap_reference<T>::type&(t)`
 @remark Does not throw.
','line_number':314,'multiline':True]
['text':' get_pointer','line_number':323,'multiline':False]
['text':'*
 @cond
','line_number':325,'multiline':True]
['text':'*
 @endcond
','line_number':332,'multiline':True]
['text':' namespace boost','line_number':336,'multiline':False]
['text':' #ifndef BOOST_CORE_REF_HPP','line_number':338,'multiline':False]
