['text':'  Boost operators.hpp header file  ----------------------------------------//','line_number':1,'multiline':False]
['text':'  (C) Copyright David Abrahams, Jeremy Siek, Daryle Walker 1999-2001.','line_number':3,'multiline':False]
['text':'  (C) Copyright Daniel Frey 2002-2017.','line_number':4,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'  See http://www.boost.org/libs/utility/operators.htm for documentation.','line_number':9,'multiline':False]
['text':'  Revision History','line_number':11,'multiline':False]
['text':'  23 Nov 17 Protect dereferenceable<> from overloaded operator&.','line_number':12,'multiline':False]
['text':'  15 Oct 17 Adapted to C++17, replace std::iterator<> with manual','line_number':13,'multiline':False]
['text':'            implementation.','line_number':14,'multiline':False]
['text':'  22 Feb 16 Added ADL protection, preserve old work-arounds in','line_number':15,'multiline':False]
['text':'            operators_v1.hpp and clean up this file. (Daniel Frey)','line_number':16,'multiline':False]
['text':'  16 Dec 10 Limit warning suppression for 4284 to older versions of VC++','line_number':17,'multiline':False]
['text':'            (Matthew Bradbury, fixes #4432)','line_number':18,'multiline':False]
['text':'  07 Aug 08 Added "euclidean" spelling. (Daniel Frey)','line_number':19,'multiline':False]
['text':'  03 Apr 08 Make sure "convertible to bool" is sufficient','line_number':20,'multiline':False]
['text':'            for T::operator<, etc. (Daniel Frey)','line_number':21,'multiline':False]
['text':'  24 May 07 Changed empty_base to depend on T, see','line_number':22,'multiline':False]
['text':'            http://svn.boost.org/trac/boost/ticket/979','line_number':23,'multiline':False]
['text':'  21 Oct 02 Modified implementation of operators to allow compilers with a','line_number':24,'multiline':False]
['text':'            correct named return value optimization (NRVO) to produce optimal','line_number':25,'multiline':False]
['text':'            code.  (Daniel Frey)','line_number':26,'multiline':False]
['text':'  02 Dec 01 Bug fixed in random_access_iteratable.  (Helmut Zeisel)','line_number':27,'multiline':False]
['text':'  28 Sep 01 Factored out iterator operator groups.  (Daryle Walker)','line_number':28,'multiline':False]
['text':'  27 Aug 01 'left' form for non commutative operators added;','line_number':29,'multiline':False]
['text':'            additional classes for groups of related operators added;','line_number':30,'multiline':False]
['text':'            workaround for empty base class optimization','line_number':31,'multiline':False]
['text':'            bug of GCC 3.0 (Helmut Zeisel)','line_number':32,'multiline':False]
['text':'  25 Jun 01 output_iterator_helper changes: removed default template','line_number':33,'multiline':False]
['text':'            parameters, added support for self-proxying, additional','line_number':34,'multiline':False]
['text':'            documentation and tests (Aleksey Gurtovoy)','line_number':35,'multiline':False]
['text':'  29 May 01 Added operator classes for << and >>.  Added input and output','line_number':36,'multiline':False]
['text':'            iterator helper classes.  Added classes to connect equality and','line_number':37,'multiline':False]
['text':'            relational operators.  Added classes for groups of related','line_number':38,'multiline':False]
['text':'            operators.  Reimplemented example operator and iterator helper','line_number':39,'multiline':False]
['text':'            classes in terms of the new groups.  (Daryle Walker, with help','line_number':40,'multiline':False]
['text':'            from Alexy Gurtovoy)','line_number':41,'multiline':False]
['text':'  11 Feb 01 Fixed bugs in the iterator helpers which prevented explicitly','line_number':42,'multiline':False]
['text':'            supplied arguments from actually being used (Dave Abrahams)','line_number':43,'multiline':False]
['text':'  04 Jul 00 Fixed NO_OPERATORS_IN_NAMESPACE bugs, major cleanup and','line_number':44,'multiline':False]
['text':'            refactoring of compiler workarounds, additional documentation','line_number':45,'multiline':False]
['text':'            (Alexy Gurtovoy and Mark Rodgers with some help and prompting from','line_number':46,'multiline':False]
['text':'            Dave Abrahams)','line_number':47,'multiline':False]
['text':'  28 Jun 00 General cleanup and integration of bugfixes from Mark Rodgers and','line_number':48,'multiline':False]
['text':'            Jeremy Siek (Dave Abrahams)','line_number':49,'multiline':False]
['text':'  20 Jun 00 Changes to accommodate Borland C++Builder 4 and Borland C++ 5.5','line_number':50,'multiline':False]
['text':'            (Mark Rodgers)','line_number':51,'multiline':False]
['text':'  20 Jun 00 Minor fixes to the prior revision (Aleksey Gurtovoy)','line_number':52,'multiline':False]
['text':'  10 Jun 00 Support for the base class chaining technique was added','line_number':53,'multiline':False]
['text':'            (Aleksey Gurtovoy). See documentation and the comments below','line_number':54,'multiline':False]
['text':'            for the details.','line_number':55,'multiline':False]
['text':'  12 Dec 99 Initial version with iterator operators (Jeremy Siek)','line_number':56,'multiline':False]
['text':'  18 Nov 99 Change name "divideable" to "dividable", remove unnecessary','line_number':57,'multiline':False]
['text':'            specializations of dividable, subtractable, modable (Ed Brey)','line_number':58,'multiline':False]
['text':'  17 Nov 99 Add comments (Beman Dawes)','line_number':59,'multiline':False]
['text':'            Remove unnecessary specialization of operators<> (Ed Brey)','line_number':60,'multiline':False]
['text':'  15 Nov 99 Fix less_than_comparable<T,U> second operand type for first two','line_number':61,'multiline':False]
['text':'            operators.(Beman Dawes)','line_number':62,'multiline':False]
['text':'  12 Nov 99 Add operators templates (Ed Brey)','line_number':63,'multiline':False]
['text':'  11 Nov 99 Add single template parameter version for compilers without','line_number':64,'multiline':False]
['text':'            partial specialization (Beman Dawes)','line_number':65,'multiline':False]
['text':'  10 Nov 99 Initial version','line_number':66,'multiline':False]
['text':' 10 Jun 00:','line_number':68,'multiline':False]
['text':' An additional optional template parameter was added to most of','line_number':69,'multiline':False]
['text':' operator templates to support the base class chaining technique (see','line_number':70,'multiline':False]
['text':' documentation for the details). Unfortunately, a straightforward','line_number':71,'multiline':False]
['text':' implementation of this change would have broken compatibility with the','line_number':72,'multiline':False]
['text':' previous version of the library by making it impossible to use the same','line_number':73,'multiline':False]
['text':' template name (e.g. 'addable') for both the 1- and 2-argument versions of','line_number':74,'multiline':False]
['text':' an operator template. This implementation solves the backward-compatibility','line_number':75,'multiline':False]
['text':' issue at the cost of some simplicity.','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':' One of the complications is an existence of special auxiliary class template','line_number':78,'multiline':False]
['text':' 'is_chained_base<>' (see 'operators_detail' namespace below), which is used','line_number':79,'multiline':False]
['text':' to determine whether its template parameter is a library's operator template','line_number':80,'multiline':False]
['text':' or not. You have to specialize 'is_chained_base<>' for each new','line_number':81,'multiline':False]
['text':' operator template you add to the library.','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':' However, most of the non-trivial implementation details are hidden behind','line_number':84,'multiline':False]
['text':' several local macros defined below, and as soon as you understand them,','line_number':85,'multiline':False]
['text':' you understand the whole library implementation.','line_number':86,'multiline':False]
['text':' If old work-arounds are needed, refer to the preserved version without','line_number':91,'multiline':False]
['text':' ADL protection.','line_number':92,'multiline':False]
['text':' complaint about return type of','line_number':109,'multiline':False]
['text':' operator-> not begin a UDT','line_number':110,'multiline':False]
['text':' Define BOOST_OPERATORS_CONSTEXPR to be like BOOST_CONSTEXPR but empty under MSVC < v19.22','line_number':112,'multiline':False]
['text':' In this section we supply the xxxx1 and xxxx2 forms of the operator','line_number':121,'multiline':False]
['text':' templates, which are explicitly targeted at the 1-type-argument and','line_number':122,'multiline':False]
['text':' 2-type-argument operator forms, respectively.','line_number':123,'multiline':False]
['text':' namespace operators_detail','line_number':134,'multiline':False]
['text':'  Basic operator classes (contributed by Dave Abrahams) ------------------//','line_number':136,'multiline':False]
['text':'  Note that friend functions defined in a class are implicitly inline.','line_number':138,'multiline':False]
['text':'  See the C++ std, 11.4 [class.friend] paragraph 5','line_number':139,'multiline':False]
['text':' A macro which produces "name_2left" from "name".','line_number':174,'multiline':False]
['text':'  NRVO-friendly implementation (contributed by Daniel Frey) ---------------//','line_number':177,'multiline':False]
['text':' This is the optimal implementation for ISO/ANSI C++,','line_number':181,'multiline':False]
['text':' but it requires the compiler to implement the NRVO.','line_number':182,'multiline':False]
['text':' If the compiler has no NRVO, this is the best symmetric','line_number':183,'multiline':False]
['text':' implementation available.','line_number':184,'multiline':False]
['text':' defined(BOOST_HAS_NRVO) || defined(BOOST_FORCE_SYMMETRIC_OPERATORS)','line_number':225,'multiline':False]
['text':' For compilers without NRVO the following code is optimal, but not','line_number':227,'multiline':False]
['text':' symmetric!  Note that the implementation of','line_number':228,'multiline':False]
['text':' BOOST_OPERATOR2_LEFT(NAME) only looks cool, but doesn't provide','line_number':229,'multiline':False]
['text':' optimization opportunities to the compiler :)','line_number':230,'multiline':False]
['text':' defined(BOOST_HAS_NRVO) || defined(BOOST_FORCE_SYMMETRIC_OPERATORS)','line_number':266,'multiline':False]
['text':'  incrementable and decrementable contributed by Jeremy Siek','line_number':281,'multiline':False]
['text':' The use of this typedef works around a Borland bug','line_number':292,'multiline':False]
['text':' The use of this typedef works around a Borland bug','line_number':305,'multiline':False]
['text':'  Iterator operator classes (contributed by Jeremy Siek) ------------------//','line_number':309,'multiline':False]
['text':'  More operator classes (contributed by Daryle Walker) --------------------//','line_number':329,'multiline':False]
['text':'  (NRVO-friendly implementation contributed by Daniel Frey) ---------------//','line_number':330,'multiline':False]
['text':' defined(BOOST_HAS_NRVO) || defined(BOOST_FORCE_SYMMETRIC_OPERATORS)','line_number':349,'multiline':False]
['text':' defined(BOOST_HAS_NRVO) || defined(BOOST_FORCE_SYMMETRIC_OPERATORS)','line_number':364,'multiline':False]
['text':'  Combined operator classes (contributed by Daryle Walker) ----------------//','line_number':417,'multiline':False]
['text':'  To avoid repeated derivation from equality_comparable,','line_number':652,'multiline':False]
['text':'  which is an indirect base class of bidirectional_iterable,','line_number':653,'multiline':False]
['text':'  random_access_iteratable must not be derived from totally_ordered1','line_number':654,'multiline':False]
['text':'  but from less_than_comparable1 only. (Helmut Zeisel, 02-Dec-2001)','line_number':655,'multiline':False]
['text':'','line_number':665,'multiline':False]
['text':' Here's where we put it all together, defining the xxxx forms of the templates.','line_number':666,'multiline':False]
['text':' We also define specializations of is_chained_base<> for','line_number':667,'multiline':False]
['text':' the xxxx, xxxx1, and xxxx2 templates.','line_number':668,'multiline':False]
['text':'','line_number':669,'multiline':False]
['text':' A type parameter is used instead of a plain bool because Borland's compiler','line_number':674,'multiline':False]
['text':' didn't cope well with the more obvious non-type template parameter.','line_number':675,'multiline':False]
['text':' namespace operators_detail','line_number':679,'multiline':False]
['text':' is_chained_base<> - a traits class used to distinguish whether an operator','line_number':681,'multiline':False]
['text':' template argument is being used for base class chaining, or is specifying a','line_number':682,'multiline':False]
['text':' 2nd argument type.','line_number':683,'multiline':False]
['text':' Unspecialized version assumes that most types are not being used for base','line_number':685,'multiline':False]
['text':' class chaining. We specialize for the operator templates defined in this','line_number':686,'multiline':False]
['text':' library.','line_number':687,'multiline':False]
['text':' Provide a specialization of 'is_chained_base<>'','line_number':692,'multiline':False]
['text':' for a 4-type-argument operator template.','line_number':693,'multiline':False]
['text':' Provide a specialization of 'is_chained_base<>'','line_number':700,'multiline':False]
['text':' for a 3-type-argument operator template.','line_number':701,'multiline':False]
['text':' Provide a specialization of 'is_chained_base<>'','line_number':708,'multiline':False]
['text':' for a 2-type-argument operator template.','line_number':709,'multiline':False]
['text':' Provide a specialization of 'is_chained_base<>'','line_number':716,'multiline':False]
['text':' for a 1-type-argument operator template.','line_number':717,'multiline':False]
['text':' BOOST_OPERATOR_TEMPLATE(template_name) defines template_name<> such that it','line_number':724,'multiline':False]
['text':' can be used for specifying both 1-argument and 2-argument forms. Requires the','line_number':725,'multiline':False]
['text':' existence of two previously defined class templates named '<template_name>1'','line_number':726,'multiline':False]
['text':' and '<template_name>2' which must implement the corresponding 1- and 2-','line_number':727,'multiline':False]
['text':' argument forms.','line_number':728,'multiline':False]
['text':'','line_number':729,'multiline':False]
['text':' The template type parameter O == is_chained_base<U>::value is used to','line_number':730,'multiline':False]
['text':' distinguish whether the 2nd argument to <template_name> is being used for','line_number':731,'multiline':False]
['text':' base class chaining from another boost operator template or is describing a','line_number':732,'multiline':False]
['text':' 2nd operand type. O == true_t only when U is actually an another operator','line_number':733,'multiline':False]
['text':' template from the library. Partial specialization is used to select an','line_number':734,'multiline':False]
['text':' implementation in terms of either '<template_name>1' or '<template_name>2'.','line_number':735,'multiline':False]
['text':'','line_number':736,'multiline':False]
['text':'  Iterator helper classes (contributed by Jeremy Siek) -------------------//','line_number':837,'multiline':False]
['text':'  (Input and output iterator helpers contributed by Daryle Walker) -------//','line_number':838,'multiline':False]
['text':'  (Changed to use combined operator classes by Daryle Walker) ------------//','line_number':839,'multiline':False]
['text':'  (Adapted to C++17 by Daniel Frey) --------------------------------------//','line_number':840,'multiline':False]
['text':' random_access_iterator_helper','line_number':908,'multiline':False]
['text':' namespace operators_impl','line_number':910,'multiline':False]
['text':' namespace boost','line_number':913,'multiline':False]
['text':' BOOST_NO_OPERATORS_IN_NAMESPACE','line_number':919,'multiline':False]
['text':' BOOST_OPERATORS_HPP','line_number':920,'multiline':False]
