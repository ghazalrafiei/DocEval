['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2016-2016. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'!\file','line_number':36,'multiline':False]
['text':'/@cond','line_number':41,'multiline':False]
['text':'/@endcond','line_number':71,'multiline':False]
['text':'! A node_handle is an object that accepts ownership of a single element from an associative container.','line_number':73,'multiline':False]
['text':'! It may be used to transfer that ownership to another container with compatible nodes. Containers','line_number':74,'multiline':False]
['text':'! with compatible nodes have the same node handle type. Elements may be transferred in either direction','line_number':75,'multiline':False]
['text':'! between container types in the same row:.','line_number':76,'multiline':False]
['text':'!','line_number':77,'multiline':False]
['text':'! Container types with compatible nodes','line_number':78,'multiline':False]
['text':'!','line_number':79,'multiline':False]
['text':'! map<K, T, C1, A> <-> map<K, T, C2, A>','line_number':80,'multiline':False]
['text':'!','line_number':81,'multiline':False]
['text':'! map<K, T, C1, A> <-> multimap<K, T, C2, A>','line_number':82,'multiline':False]
['text':'! ','line_number':83,'multiline':False]
['text':'! set<K, C1, A> <-> set<K, C2, A>','line_number':84,'multiline':False]
['text':'! ','line_number':85,'multiline':False]
['text':'! set<K, C1, A> <-> multiset<K, C2, A>','line_number':86,'multiline':False]
['text':'! ','line_number':87,'multiline':False]
['text':'! If a node handle is not empty, then it contains an allocator that is equal to the allocator of the container','line_number':88,'multiline':False]
['text':'! when the element was extracted. If a node handle is empty, it contains no allocator.','line_number':89,'multiline':False]
['text':'/@cond','line_number':109,'multiline':False]
['text':'/@endcond','line_number':147,'multiline':False]
['text':'! <b>Effects</b>: Initializes m_ptr to nullptr.','line_number':150,'multiline':False]
['text':'!','line_number':151,'multiline':False]
['text':'! <b>Postcondition</b>: this->empty()','line_number':152,'multiline':False]
['text':'! <b>Effects</b>: Constructs a node_handle object initializing internal pointer with p.','line_number':157,'multiline':False]
['text':'!   If p != nullptr copy constructs internal allocator from al.','line_number':158,'multiline':False]
['text':'! <b>Effects</b>: Constructs a node_handle object initializing internal pointer with a related nh's internal pointer','line_number':167,'multiline':False]
['text':'!   and assigns nullptr to the later. If nh's internal pointer was not nullptr, move constructs internal','line_number':168,'multiline':False]
['text':'!   allocator with nh's internal allocator and destroy nh's internal allocator.','line_number':169,'multiline':False]
['text':'!','line_number':170,'multiline':False]
['text':'! <b>Postcondition</b>: nh.empty()','line_number':171,'multiline':False]
['text':'!','line_number':172,'multiline':False]
['text':'! <b>Note</b>: Two node_handle's are related if only one of KeyMapped template parameter','line_number':173,'multiline':False]
['text':'!   of a node handle is void.','line_number':174,'multiline':False]
['text':'! <b>Effects</b>: Constructs a node_handle object initializing internal pointer with nh's internal pointer','line_number':184,'multiline':False]
['text':'!   and assigns nullptr to the later. If nh's internal pointer was not nullptr, move constructs internal','line_number':185,'multiline':False]
['text':'!   allocator with nh's internal allocator and destroy nh's internal allocator.','line_number':186,'multiline':False]
['text':'!','line_number':187,'multiline':False]
['text':'! <b>Postcondition</b>: nh.empty()','line_number':188,'multiline':False]
['text':'! <b>Effects</b>: If !this->empty(), destroys the value_type subobject in the container_node_type object','line_number':193,'multiline':False]
['text':'!   pointed to by c by calling allocator_traits<impl_defined>::destroy, then deallocates m_ptr by calling','line_number':194,'multiline':False]
['text':'!   nator_traits::rebind_traits<container_node_type>::deallocate.','line_number':195,'multiline':False]
['text':'! <b>Requires</b>: Either this->empty(), or nator_traits::propagate_on_container_move_assignment is true, or','line_number':204,'multiline':False]
['text':'!   node_alloc() == nh.node_alloc().','line_number':205,'multiline':False]
['text':'!','line_number':206,'multiline':False]
['text':'! <b>Effects</b>: If m_ptr != nullptr, destroys the value_type subobject in the container_node_type object','line_number':207,'multiline':False]
['text':'!   pointed to by m_ptr by calling nator_traits::destroy, then deallocates m_ptr by calling','line_number':208,'multiline':False]
['text':'!   nator_traits::deallocate. Assigns nh.m_ptr to m_ptr. If this->empty()','line_number':209,'multiline':False]
['text':'!   or nator_traits::propagate_on_container_move_assignment is true, move assigns nh.node_alloc() to','line_number':210,'multiline':False]
['text':'!   node_alloc(). Assigns nullptr to nh.m_ptr and assigns nullopt to nh.node_alloc().','line_number':211,'multiline':False]
['text':'!','line_number':212,'multiline':False]
['text':'! <b>Returns</b>: *this.','line_number':213,'multiline':False]
['text':'!','line_number':214,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':215,'multiline':False]
['text':'! <b>Requires</b>: empty() == false.','line_number':246,'multiline':False]
['text':'!','line_number':247,'multiline':False]
['text':'! <b>Returns</b>: A reference to the value_type subobject in the container_node_type object pointed to by m_ptr','line_number':248,'multiline':False]
['text':'!','line_number':249,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':250,'multiline':False]
['text':'! <b>Requires</b>: empty() == false.','line_number':258,'multiline':False]
['text':'!','line_number':259,'multiline':False]
['text':'! <b>Returns</b>: A non-const reference to the key_type member of the value_type subobject in the ','line_number':260,'multiline':False]
['text':'!   container_node_type object pointed to by m_ptr.','line_number':261,'multiline':False]
['text':'!','line_number':262,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':263,'multiline':False]
['text':'!','line_number':264,'multiline':False]
['text':'! <b>Requires</b>: Modifying the key through the returned reference is permitted.','line_number':265,'multiline':False]
['text':'! <b>Requires</b>: empty() == false.','line_number':273,'multiline':False]
['text':'!','line_number':274,'multiline':False]
['text':'! <b>Returns</b>: A reference to the mapped_type member of the value_type subobject','line_number':275,'multiline':False]
['text':'!   in the container_node_type object pointed to by m_ptr','line_number':276,'multiline':False]
['text':'!','line_number':277,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':278,'multiline':False]
['text':'! <b>Requires</b>: empty() == false.','line_number':286,'multiline':False]
['text':'!','line_number':287,'multiline':False]
['text':'! <b>Returns</b>: A copy of the internally hold allocator.','line_number':288,'multiline':False]
['text':'!','line_number':289,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':290,'multiline':False]
['text':'! <b>Returns</b>: m_ptr != nullptr.','line_number':297,'multiline':False]
['text':'!','line_number':298,'multiline':False]
['text':'! <b>Returns</b>: m_ptr == nullptr.','line_number':308,'multiline':False]
['text':'!','line_number':309,'multiline':False]
['text':'! <b>Requires</b>: this->empty(), or nh.empty(), or nator_traits::propagate_on_container_swap is true, or','line_number':315,'multiline':False]
['text':'!   node_alloc() == nh.node_alloc().','line_number':316,'multiline':False]
['text':'!','line_number':317,'multiline':False]
['text':'! <b>Effects</b>: Calls swap(m_ptr, nh.m_ptr). If this->empty(), or nh.empty(), or nator_traits::propagate_on_-','line_number':318,'multiline':False]
['text':'!   container_swap is true calls swap(node_alloc(), nh.node_alloc()).','line_number':319,'multiline':False]
['text':'! <b>Effects</b>: If this->empty() returns nullptr, otherwise returns m_ptr','line_number':347,'multiline':False]
['text':'!   resets m_ptr to nullptr and destroys the internal allocator.','line_number':348,'multiline':False]
['text':'!','line_number':349,'multiline':False]
['text':'! <b>Postcondition</b>: this->empty()','line_number':350,'multiline':False]
['text':'!','line_number':351,'multiline':False]
['text':'! <b>Note</b>: Non-standard extensions','line_number':352,'multiline':False]
['text':'! <b>Effects</b>: Returns m_ptr.','line_number':362,'multiline':False]
['text':'!','line_number':363,'multiline':False]
['text':'! <b>Note</b>: Non-standard extensions','line_number':364,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal node allocator.','line_number':370,'multiline':False]
['text':'!','line_number':371,'multiline':False]
['text':'! <b>Note</b>: Non-standard extensions','line_number':372,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal node allocator.','line_number':380,'multiline':False]
['text':'!','line_number':381,'multiline':False]
['text':'! <b>Note</b>: Non-standard extensions','line_number':382,'multiline':False]
['text':'! <b>Effects</b>: x.swap(y).','line_number':389,'multiline':False]
['text':'!','line_number':390,'multiline':False]
['text':'! A class template used to describe the results of inserting a','line_number':395,'multiline':False]
['text':'! Container::node_type in a Container with unique keys.','line_number':396,'multiline':False]
['text':'! Includes at least the following non-static public data members:','line_number':397,'multiline':False]
['text':'!','line_number':398,'multiline':False]
['text':'! <ul><li>bool inserted</li>;','line_number':399,'multiline':False]
['text':'! <li>Iterator position</li>;','line_number':400,'multiline':False]
['text':'! <li>NodeType node</li></ul>','line_number':401,'multiline':False]
['text':'!','line_number':402,'multiline':False]
['text':'! This type is MoveConstructible, MoveAssignable, DefaultConstructible,','line_number':403,'multiline':False]
['text':'! Destructible, and lvalues of that type are swappable','line_number':404,'multiline':False]
['text':'namespace container {','line_number':438,'multiline':False]
['text':'namespace boost {','line_number':439,'multiline':False]
['text':'BOOST_CONTAINER_NODE_HANDLE_HPP','line_number':443,'multiline':False]
