['text':' Copyright (C) 2000 Stephen Cleary','line_number':1,'multiline':False]
['text':' Copyright (C) 2008 Ion Gaztanaga','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' See http://www.boost.org for updates, documentation, and revision history.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' This file is a modified file from Boost.Pool','line_number':10,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2007-2013. Distributed under the Boost','line_number':14,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':15,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':20,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' The following helper classes are placeholders for a generic "singleton"','line_number':37,'multiline':False]
['text':'  class.  The classes below support usage of singletons, including use in','line_number':38,'multiline':False]
['text':'  program startup/shutdown code, AS LONG AS there is only one thread','line_number':39,'multiline':False]
['text':'  running before main() begins, and only one thread running after main()','line_number':40,'multiline':False]
['text':'  exits.','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' This class is also limited in that it can only provide singleton usage for','line_number':43,'multiline':False]
['text':'  classes with default constructors.','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' The design of this class is somewhat twisted, but can be followed by the','line_number':47,'multiline':False]
['text':'  calling inheritance.  Let us assume that there is some user code that','line_number':48,'multiline':False]
['text':'  calls "singleton_default<T>::instance()".  The following (convoluted)','line_number':49,'multiline':False]
['text':'  sequence ensures that the same function will be called before main():','line_number':50,'multiline':False]
['text':'    instance() contains a call to create_object.do_nothing()','line_number':51,'multiline':False]
['text':'    Thus, object_creator is implicitly instantiated, and create_object','line_number':52,'multiline':False]
['text':'      must exist.','line_number':53,'multiline':False]
['text':'    Since create_object is a static member, its constructor must be','line_number':54,'multiline':False]
['text':'      called before main().','line_number':55,'multiline':False]
['text':'    The constructor contains a call to instance(), thus ensuring that','line_number':56,'multiline':False]
['text':'      instance() will be called before main().','line_number':57,'multiline':False]
['text':'    The first time instance() is called (i.e., before main()) is the','line_number':58,'multiline':False]
['text':'      latest point in program execution where the object of type T','line_number':59,'multiline':False]
['text':'      can be created.','line_number':60,'multiline':False]
['text':'    Thus, any call to instance() will auto-magically result in a call to','line_number':61,'multiline':False]
['text':'      instance() before main(), unless already present.','line_number':62,'multiline':False]
['text':'  Furthermore, since the instance() function contains the object, instead','line_number':63,'multiline':False]
['text':'  of the singleton_default class containing a static instance of the','line_number':64,'multiline':False]
['text':'  object, that object is guaranteed to be constructed (at the latest) in','line_number':65,'multiline':False]
['text':'  the first call to instance().  This permits calls to instance() from','line_number':66,'multiline':False]
['text':'  static code, even if that code is called before the file-scope objects','line_number':67,'multiline':False]
['text':'  in this file have been initialized.','line_number':68,'multiline':False]
['text':' T must be: no-throw default constructible and no-throw destructible','line_number':74,'multiline':False]
['text':' This constructor does nothing more than ensure that instance()','line_number':81,'multiline':False]
['text':'  is called before main() begins, thus creating the static','line_number':82,'multiline':False]
['text':'  T object before multithreading race issues can come up.','line_number':83,'multiline':False]
['text':' If, at any point (in user code), singleton_default<T>::instance()','line_number':94,'multiline':False]
['text':'  is called, then the following function is instantiated.','line_number':95,'multiline':False]
['text':' This is the object that we return a reference to.','line_number':98,'multiline':False]
['text':' It is guaranteed to be created before main() begins because of','line_number':99,'multiline':False]
['text':'  the next line.','line_number':100,'multiline':False]
['text':' The following line does nothing else than force the instantiation','line_number':103,'multiline':False]
['text':'  of singleton_default<T>::create_object, whose constructor is','line_number':104,'multiline':False]
['text':'  called before main() begins.','line_number':105,'multiline':False]
['text':' namespace dtl','line_number':115,'multiline':False]
['text':' namespace container','line_number':116,'multiline':False]
['text':' namespace boost','line_number':117,'multiline':False]
['text':'BOOST_CONTAINER_DETAIL_SINGLETON_DETAIL_HPP','line_number':121,'multiline':False]
