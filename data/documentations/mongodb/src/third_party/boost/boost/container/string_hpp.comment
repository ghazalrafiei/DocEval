['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2015. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':' container','line_number':25,'multiline':False]
['text':'new_allocator','line_number':27,'multiline':False]
['text':' container/detail','line_number':29,'multiline':False]
['text':' for char_traits','line_number':42,'multiline':False]
['text':'intrusive','line_number':43,'multiline':False]
['text':'move','line_number':47,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':'std','line_number':63,'multiline':False]
['text':'for std::initializer_list','line_number':65,'multiline':False]
['text':' ------------------------------------------------------------','line_number':74,'multiline':False]
['text':' Class basic_string_base.','line_number':75,'multiline':False]
['text':' basic_string_base is a helper class that makes it it easier to write','line_number':77,'multiline':False]
['text':' an exception-safe version of basic_string.  The constructor allocates,','line_number':78,'multiline':False]
['text':' but does not initialize, a block of memory.  The destructor','line_number':79,'multiline':False]
['text':' deallocates, but does not destroy elements within, a block of','line_number':80,'multiline':False]
['text':' memory. The destructor assumes that the memory either is the internal buffer,','line_number':81,'multiline':False]
['text':' or else points to a block of memory that was allocated using string_base's','line_number':82,'multiline':False]
['text':' allocator and whose size is this->m_storage.','line_number':83,'multiline':False]
['text':'This is the structure controlling a long string','line_number':134,'multiline':False]
['text':'This type is the first part of the structure controlling a short string','line_number':167,'multiline':False]
['text':'The "data" member stores','line_number':168,'multiline':False]
['text':'This type has the same alignment and size as long_t but it's POD','line_number':175,'multiline':False]
['text':'so, unlike long_t, it can be placed in a union','line_number':176,'multiline':False]
['text':'Access and copy (to avoid UB) the first byte of the union to know if the','line_number':260,'multiline':False]
['text':'active representation is short or long','line_number':261,'multiline':False]
['text':'is_short flag is written in the constructor','line_number':293,'multiline':False]
['text':'GCC seems a bit confused about uninitialized accesses','line_number':400,'multiline':False]
['text':'Make -Wconversion happy','line_number':470,'multiline':False]
['text':'Make -Wconversion happy','line_number':478,'multiline':False]
['text':'namespace dtl {','line_number':516,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':518,'multiline':False]
['text':'! The basic_string class represents a Sequence of characters. It contains all the','line_number':520,'multiline':False]
['text':'! usual operations of a Sequence, and, additionally, it contains standard string','line_number':521,'multiline':False]
['text':'! operations such as search and concatenation.','line_number':522,'multiline':False]
['text':'!','line_number':523,'multiline':False]
['text':'! The basic_string class is parameterized by character type, and by that type's','line_number':524,'multiline':False]
['text':'! Character Traits.','line_number':525,'multiline':False]
['text':'!','line_number':526,'multiline':False]
['text':'! This class has performance characteristics very much like vector<>, meaning,','line_number':527,'multiline':False]
['text':'! for example, that it does not perform reference-count or copy-on-write, and that','line_number':528,'multiline':False]
['text':'! concatenation of two strings is an O(N) operation.','line_number':529,'multiline':False]
['text':'!','line_number':530,'multiline':False]
['text':'! Some of basic_string's member functions use an unusual method of specifying positions','line_number':531,'multiline':False]
['text':'! and ranges. In addition to the conventional method using iterators, many of','line_number':532,'multiline':False]
['text':'! basic_string's member functions use a single value pos of type size_type to represent a','line_number':533,'multiline':False]
['text':'! position (in which case the position is begin() + pos, and many of basic_string's','line_number':534,'multiline':False]
['text':'! member functions use two values, pos and n, to represent a range. In that case pos is','line_number':535,'multiline':False]
['text':'! the beginning of the range and n is its size. That is, the range is','line_number':536,'multiline':False]
['text':'! [begin() + pos, begin() + pos + n).','line_number':537,'multiline':False]
['text':'!','line_number':538,'multiline':False]
['text':'! Note that the C++ standard does not specify the complexity of basic_string operations.','line_number':539,'multiline':False]
['text':'! In this implementation, basic_string has performance characteristics very similar to','line_number':540,'multiline':False]
['text':'! those of vector: access to a single character is O(1), while copy and concatenation','line_number':541,'multiline':False]
['text':'! are O(N).','line_number':542,'multiline':False]
['text':'!','line_number':543,'multiline':False]
['text':'! In this implementation, begin(),','line_number':544,'multiline':False]
['text':'! end(), rbegin(), rend(), operator[], c_str(), and data() do not invalidate iterators.','line_number':545,'multiline':False]
['text':'! In this implementation, iterators are only invalidated by member functions that','line_number':546,'multiline':False]
['text':'! explicitly change the string's contents.','line_number':547,'multiline':False]
['text':'!','line_number':548,'multiline':False]
['text':'! \tparam CharT The type of character it contains.','line_number':549,'multiline':False]
['text':'! \tparam Traits The Character Traits type, which encapsulates basic character operations','line_number':550,'multiline':False]
['text':'! \tparam Allocator The allocator, used for internal memory management.','line_number':551,'multiline':False]
['text':' Allocator helper class to use a char_traits as a function object.','line_number':568,'multiline':False]
['text':'Compatibility with std::binary_function','line_number':573,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':601,'multiline':False]
['text':'////////////////////////////////////////////','line_number':604,'multiline':False]
['text':'','line_number':605,'multiline':False]
['text':'                    types','line_number':606,'multiline':False]
['text':'','line_number':607,'multiline':False]
['text':'////////////////////////////////////////////','line_number':608,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':630,'multiline':False]
['text':' Constructor, destructor, assignment.','line_number':632,'multiline':False]
['text':'////////////////////////////////////////////','line_number':633,'multiline':False]
['text':'','line_number':634,'multiline':False]
['text':'          construct/copy/destroy','line_number':635,'multiline':False]
['text':'','line_number':636,'multiline':False]
['text':'////////////////////////////////////////////','line_number':637,'multiline':False]
['text':'Select allocator as in copy constructor as reserve_t-based constructors','line_number':643,'multiline':False]
['text':'are two step copies optimized for capacity','line_number':644,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':649,'multiline':False]
['text':'! <b>Effects</b>: Default constructs a basic_string.','line_number':651,'multiline':False]
['text':'!','line_number':652,'multiline':False]
['text':'! <b>Throws</b>: If allocator_type's default constructor throws.','line_number':653,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking the allocator as parameter.','line_number':659,'multiline':False]
['text':'!','line_number':660,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':661,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a basic_string.','line_number':666,'multiline':False]
['text':'!','line_number':667,'multiline':False]
['text':'! <b>Postcondition</b>: x == *this.','line_number':668,'multiline':False]
['text':'!','line_number':669,'multiline':False]
['text':'! <b>Throws</b>: If allocator_type's default constructor or allocation throws.','line_number':670,'multiline':False]
['text':'! <b>Effects</b>: Same as basic_string(sv.data(), sv.size(), a).','line_number':678,'multiline':False]
['text':'!','line_number':679,'multiline':False]
['text':'! <b>Throws</b>: If allocator_type's default constructor or allocation throws.','line_number':680,'multiline':False]
['text':'! <b>Effects</b>: Move constructor. Moves s's resources to *this.','line_number':689,'multiline':False]
['text':'!','line_number':690,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':691,'multiline':False]
['text':'!','line_number':692,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':693,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a basic_string using the specified allocator.','line_number':705,'multiline':False]
['text':'!','line_number':706,'multiline':False]
['text':'! <b>Postcondition</b>: x == *this.','line_number':707,'multiline':False]
['text':'!','line_number':708,'multiline':False]
['text':'! <b>Throws</b>: If allocation throws.','line_number':709,'multiline':False]
['text':'! <b>Effects</b>: Move constructor using the specified allocator.','line_number':717,'multiline':False]
['text':'!                 Moves s's resources to *this.','line_number':718,'multiline':False]
['text':'!','line_number':719,'multiline':False]
['text':'! <b>Throws</b>: If allocation throws.','line_number':720,'multiline':False]
['text':'!','line_number':721,'multiline':False]
['text':'! <b>Complexity</b>: Constant if a == s.get_allocator(), linear otherwise.','line_number':722,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string with a default-constructed allocator,','line_number':735,'multiline':False]
['text':'!   and is initialized by a specific number of characters of the s string.','line_number':736,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking the allocator as parameter,','line_number':748,'multiline':False]
['text':'!   and is initialized by a specific number of characters of the s string.','line_number':749,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking a default-constructed allocator,','line_number':761,'multiline':False]
['text':'!   and is initialized by a specific number of characters of the s c-string.','line_number':762,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking the allocator as parameter,','line_number':770,'multiline':False]
['text':'!   and is initialized by a specific number of characters of the s c-string.','line_number':771,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string with a default-constructed allocator,','line_number':779,'multiline':False]
['text':'!   and is initialized by the null-terminated s c-string.','line_number':780,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking the allocator as parameter,','line_number':788,'multiline':False]
['text':'!   and is initialized by the null-terminated s c-string.','line_number':789,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string with a default-constructed allocator,','line_number':798,'multiline':False]
['text':'!   and is initialized by n copies of c.','line_number':799,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking the allocator as parameter,','line_number':807,'multiline':False]
['text':'!   and is initialized by n copies of c.','line_number':808,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string with a default-constructed allocator,','line_number':816,'multiline':False]
['text':'!   and is initialized by n default-initialized characters.','line_number':817,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking the allocator as parameter,','line_number':825,'multiline':False]
['text':'!   and is initialized by n default-initialized characters.','line_number':826,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string with a default-constructed allocator,','line_number':834,'multiline':False]
['text':'!   and a range of iterators.','line_number':835,'multiline':False]
['text':'! <b>Effects</b>: Constructs a basic_string taking the allocator as parameter,','line_number':844,'multiline':False]
['text':'!   and a range of iterators.','line_number':845,'multiline':False]
['text':'! <b>Effects</b>: Same as basic_string(il.begin(), il.end(), a).','line_number':855,'multiline':False]
['text':'!','line_number':856,'multiline':False]
['text':'! <b>Effects</b>: Destroys the basic_string. All used memory is deallocated.','line_number':865,'multiline':False]
['text':'!','line_number':866,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':867,'multiline':False]
['text':'!','line_number':868,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':869,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a string.','line_number':873,'multiline':False]
['text':'!','line_number':874,'multiline':False]
['text':'! <b>Postcondition</b>: x == *this.','line_number':875,'multiline':False]
['text':'!','line_number':876,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the elements x contains.','line_number':877,'multiline':False]
['text':'! <b>Effects</b>: Move constructor. Moves x's resources to *this.','line_number':899,'multiline':False]
['text':'!','line_number':900,'multiline':False]
['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':901,'multiline':False]
['text':'!   is false and allocation throws','line_number':902,'multiline':False]
['text':'!','line_number':903,'multiline':False]
['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':904,'multiline':False]
['text':'!   propagate_on_container_move_assignment is true or','line_number':905,'multiline':False]
['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':906,'multiline':False]
['text':'Resources can be transferred if both allocators are','line_number':918,'multiline':False]
['text':'going to be equal after this function (either propagated or already equal)','line_number':919,'multiline':False]
['text':'Destroy objects but retain memory in case x reuses it in the future','line_number':921,'multiline':False]
['text':'Move allocator if needed','line_number':923,'multiline':False]
['text':'Nothrow swap','line_number':925,'multiline':False]
['text':'Else do a one by one move','line_number':928,'multiline':False]
['text':'! <b>Effects</b>: Assignment from a null-terminated c-string.','line_number':936,'multiline':False]
['text':'!','line_number':937,'multiline':False]
['text':'! <b>Effects</b>: Returns *this = basic_string(1, c).','line_number':941,'multiline':False]
['text':'!','line_number':942,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to return assign(sv).','line_number':946,'multiline':False]
['text':'!','line_number':947,'multiline':False]
['text':'! <b>Effects</b>: Returns *this = basic_string(il);','line_number':953,'multiline':False]
['text':'!','line_number':954,'multiline':False]
['text':'! <b>Effects</b>: Returns a copy of the internal allocator.','line_number':961,'multiline':False]
['text':'!','line_number':962,'multiline':False]
['text':'! <b>Throws</b>: If allocator's copy constructor throws.','line_number':963,'multiline':False]
['text':'!','line_number':964,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':965,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':970,'multiline':False]
['text':'!','line_number':971,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':972,'multiline':False]
['text':'!','line_number':973,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':974,'multiline':False]
['text':'!','line_number':975,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':976,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':981,'multiline':False]
['text':'!','line_number':982,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':983,'multiline':False]
['text':'!','line_number':984,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':985,'multiline':False]
['text':'!','line_number':986,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':987,'multiline':False]
['text':'////////////////////////////////////////////','line_number':992,'multiline':False]
['text':'','line_number':993,'multiline':False]
['text':'                iterators','line_number':994,'multiline':False]
['text':'','line_number':995,'multiline':False]
['text':'////////////////////////////////////////////','line_number':996,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the vector.','line_number':998,'multiline':False]
['text':'!','line_number':999,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1000,'multiline':False]
['text':'!','line_number':1001,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1002,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the vector.','line_number':1007,'multiline':False]
['text':'!','line_number':1008,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1009,'multiline':False]
['text':'!','line_number':1010,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1011,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the end of the vector.','line_number':1016,'multiline':False]
['text':'!','line_number':1017,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1018,'multiline':False]
['text':'!','line_number':1019,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1020,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the vector.','line_number':1025,'multiline':False]
['text':'!','line_number':1026,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1027,'multiline':False]
['text':'!','line_number':1028,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1029,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':1034,'multiline':False]
['text':'! of the reversed vector.','line_number':1035,'multiline':False]
['text':'!','line_number':1036,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1037,'multiline':False]
['text':'!','line_number':1038,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1039,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1044,'multiline':False]
['text':'! of the reversed vector.','line_number':1045,'multiline':False]
['text':'!','line_number':1046,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1047,'multiline':False]
['text':'!','line_number':1048,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1049,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':1054,'multiline':False]
['text':'! of the reversed vector.','line_number':1055,'multiline':False]
['text':'!','line_number':1056,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1057,'multiline':False]
['text':'!','line_number':1058,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1059,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1064,'multiline':False]
['text':'! of the reversed vector.','line_number':1065,'multiline':False]
['text':'!','line_number':1066,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1067,'multiline':False]
['text':'!','line_number':1068,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1069,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the vector.','line_number':1074,'multiline':False]
['text':'!','line_number':1075,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1076,'multiline':False]
['text':'!','line_number':1077,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1078,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the vector.','line_number':1083,'multiline':False]
['text':'!','line_number':1084,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1085,'multiline':False]
['text':'!','line_number':1086,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1087,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':1092,'multiline':False]
['text':'! of the reversed vector.','line_number':1093,'multiline':False]
['text':'!','line_number':1094,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1095,'multiline':False]
['text':'!','line_number':1096,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1097,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':1102,'multiline':False]
['text':'! of the reversed vector.','line_number':1103,'multiline':False]
['text':'!','line_number':1104,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1105,'multiline':False]
['text':'!','line_number':1106,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1107,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1112,'multiline':False]
['text':'','line_number':1113,'multiline':False]
['text':'                capacity','line_number':1114,'multiline':False]
['text':'','line_number':1115,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1116,'multiline':False]
['text':'! <b>Effects</b>: Returns true if the vector contains no elements.','line_number':1118,'multiline':False]
['text':'!','line_number':1119,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1120,'multiline':False]
['text':'!','line_number':1121,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1122,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of the elements contained in the vector.','line_number':1127,'multiline':False]
['text':'!','line_number':1128,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1129,'multiline':False]
['text':'!','line_number':1130,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1131,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of the elements contained in the vector.','line_number':1136,'multiline':False]
['text':'!','line_number':1137,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1138,'multiline':False]
['text':'!','line_number':1139,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1140,'multiline':False]
['text':'! <b>Effects</b>: Returns the largest possible size of the vector.','line_number':1145,'multiline':False]
['text':'!','line_number':1146,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1147,'multiline':False]
['text':'!','line_number':1148,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':1149,'multiline':False]
['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1154,'multiline':False]
['text':'!   the size becomes n. New elements are copy constructed from x.','line_number':1155,'multiline':False]
['text':'!','line_number':1156,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws','line_number':1157,'multiline':False]
['text':'!','line_number':1158,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1159,'multiline':False]
['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1168,'multiline':False]
['text':'!   the size becomes n. New elements are value initialized.','line_number':1169,'multiline':False]
['text':'!','line_number':1170,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws','line_number':1171,'multiline':False]
['text':'!','line_number':1172,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1173,'multiline':False]
['text':'! <b>Effects</b>: Inserts or erases elements at the end such that','line_number':1177,'multiline':False]
['text':'!   the size becomes n. New elements are uninitialized.','line_number':1178,'multiline':False]
['text':'!','line_number':1179,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws','line_number':1180,'multiline':False]
['text':'!','line_number':1181,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the difference between size() and new_size.','line_number':1182,'multiline':False]
['text':'!','line_number':1183,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension','line_number':1184,'multiline':False]
['text':'! <b>Effects</b>: Number of elements for which memory has been allocated.','line_number':1196,'multiline':False]
['text':'!   capacity() is always greater than or equal to size().','line_number':1197,'multiline':False]
['text':'!','line_number':1198,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1199,'multiline':False]
['text':'!','line_number':1200,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1201,'multiline':False]
['text':'! <b>Effects</b>: If n is less than or equal to capacity(), this call has no','line_number':1206,'multiline':False]
['text':'!   effect. Otherwise, it is a request for allocation of additional memory.','line_number':1207,'multiline':False]
['text':'!   If the request is successful, then capacity() is greater than or equal to','line_number':1208,'multiline':False]
['text':'!   n; otherwise, capacity() is unchanged. In either case, size() is unchanged.','line_number':1209,'multiline':False]
['text':'!','line_number':1210,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation allocation throws','line_number':1211,'multiline':False]
['text':'! <b>Effects</b>: Tries to deallocate the excess of memory created','line_number':1215,'multiline':False]
['text':'!   with previous allocations. The size of the string is unchanged','line_number':1216,'multiline':False]
['text':'!','line_number':1217,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':1218,'multiline':False]
['text':'!','line_number':1219,'multiline':False]
['text':'! <b>Complexity</b>: Linear to size().','line_number':1220,'multiline':False]
['text':'Check if shrinking is possible','line_number':1223,'multiline':False]
['text':'Check if we should pass from dynamically allocated buffer','line_number':1225,'multiline':False]
['text':'to the internal storage','line_number':1226,'multiline':False]
['text':'Dynamically allocated buffer attributes','line_number':1228,'multiline':False]
['text':'Shrink from allocated buffer to the internal one, including trailing null','line_number':1232,'multiline':False]
['text':'Shrinking in dynamic buffer','line_number':1242,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1248,'multiline':False]
['text':'','line_number':1249,'multiline':False]
['text':'               element access','line_number':1250,'multiline':False]
['text':'','line_number':1251,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1252,'multiline':False]
['text':'! <b>Requires</b>: !empty()','line_number':1254,'multiline':False]
['text':'!','line_number':1255,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the first','line_number':1256,'multiline':False]
['text':'!   element of the container.','line_number':1257,'multiline':False]
['text':'!','line_number':1258,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1259,'multiline':False]
['text':'!','line_number':1260,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1261,'multiline':False]
['text':'! <b>Requires</b>: !empty()','line_number':1269,'multiline':False]
['text':'!','line_number':1270,'multiline':False]
['text':'! <b>Effects</b>: Returns a const reference to the first','line_number':1271,'multiline':False]
['text':'!   element of the container.','line_number':1272,'multiline':False]
['text':'!','line_number':1273,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1274,'multiline':False]
['text':'!','line_number':1275,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1276,'multiline':False]
['text':'! <b>Requires</b>: !empty()','line_number':1284,'multiline':False]
['text':'!','line_number':1285,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the last','line_number':1286,'multiline':False]
['text':'!   element of the container.','line_number':1287,'multiline':False]
['text':'!','line_number':1288,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1289,'multiline':False]
['text':'!','line_number':1290,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1291,'multiline':False]
['text':'! <b>Requires</b>: !empty()','line_number':1299,'multiline':False]
['text':'!','line_number':1300,'multiline':False]
['text':'! <b>Effects</b>: Returns a const reference to the last','line_number':1301,'multiline':False]
['text':'!   element of the container.','line_number':1302,'multiline':False]
['text':'!','line_number':1303,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1304,'multiline':False]
['text':'!','line_number':1305,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1306,'multiline':False]
['text':'! <b>Requires</b>: size() > n.','line_number':1314,'multiline':False]
['text':'!','line_number':1315,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1316,'multiline':False]
['text':'!   from the beginning of the container.','line_number':1317,'multiline':False]
['text':'!','line_number':1318,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1319,'multiline':False]
['text':'!','line_number':1320,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1321,'multiline':False]
['text':'! <b>Requires</b>: size() > n.','line_number':1329,'multiline':False]
['text':'!','line_number':1330,'multiline':False]
['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1331,'multiline':False]
['text':'!   from the beginning of the container.','line_number':1332,'multiline':False]
['text':'!','line_number':1333,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1334,'multiline':False]
['text':'!','line_number':1335,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1336,'multiline':False]
['text':'! <b>Requires</b>: size() > n.','line_number':1344,'multiline':False]
['text':'!','line_number':1345,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the nth element','line_number':1346,'multiline':False]
['text':'!   from the beginning of the container.','line_number':1347,'multiline':False]
['text':'!','line_number':1348,'multiline':False]
['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1349,'multiline':False]
['text':'!','line_number':1350,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1351,'multiline':False]
['text':'! <b>Requires</b>: size() > n.','line_number':1360,'multiline':False]
['text':'!','line_number':1361,'multiline':False]
['text':'! <b>Effects</b>: Returns a const reference to the nth element','line_number':1362,'multiline':False]
['text':'!   from the beginning of the container.','line_number':1363,'multiline':False]
['text':'!','line_number':1364,'multiline':False]
['text':'! <b>Throws</b>: range_error if n >= size()','line_number':1365,'multiline':False]
['text':'!','line_number':1366,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1367,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1375,'multiline':False]
['text':'','line_number':1376,'multiline':False]
['text':'                modifiers','line_number':1377,'multiline':False]
['text':'','line_number':1378,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1379,'multiline':False]
['text':'! <b>Effects</b>: Calls append(str.data, str.size()).','line_number':1381,'multiline':False]
['text':'!','line_number':1382,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1383,'multiline':False]
['text':'! <b>Effects</b>: Same as `return append(sv)`.','line_number':1387,'multiline':False]
['text':'!','line_number':1388,'multiline':False]
['text':'! <b>Effects</b>: Calls append(s).','line_number':1395,'multiline':False]
['text':'!','line_number':1396,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1397,'multiline':False]
['text':'! <b>Effects</b>: Calls append(1, c).','line_number':1401,'multiline':False]
['text':'!','line_number':1402,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1403,'multiline':False]
['text':'! <b>Effects</b>: Returns append(il)','line_number':1408,'multiline':False]
['text':'!','line_number':1409,'multiline':False]
['text':'! <b>Effects</b>: Calls append(str.data(), str.size()).','line_number':1416,'multiline':False]
['text':'!','line_number':1417,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1418,'multiline':False]
['text':'! <b>Effects</b>: Same as return append(sv.data(), sv.size()).','line_number':1422,'multiline':False]
['text':'!','line_number':1423,'multiline':False]
['text':'! <b>Requires</b>: pos <= str.size()','line_number':1428,'multiline':False]
['text':'!','line_number':1429,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to append','line_number':1430,'multiline':False]
['text':'! as the smaller of n and str.size() - pos and calls append(str.data() + pos, rlen).','line_number':1431,'multiline':False]
['text':'!','line_number':1432,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws and out_of_range if pos > str.size()','line_number':1433,'multiline':False]
['text':'!','line_number':1434,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1435,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT.','line_number':1444,'multiline':False]
['text':'!','line_number':1445,'multiline':False]
['text':'! <b>Effects</b>: The function replaces the string controlled by *this with','line_number':1446,'multiline':False]
['text':'!   a string of length size() + n whose irst size() elements are a copy of the','line_number':1447,'multiline':False]
['text':'!   original string controlled by *this and whose remaining','line_number':1448,'multiline':False]
['text':'!   elements are a copy of the initial n elements of s.','line_number':1449,'multiline':False]
['text':'!','line_number':1450,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws length_error if size() + n > max_size().','line_number':1451,'multiline':False]
['text':'!','line_number':1452,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1453,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':1457,'multiline':False]
['text':'!','line_number':1458,'multiline':False]
['text':'! <b>Effects</b>: Calls append(s, traits::length(s)).','line_number':1459,'multiline':False]
['text':'!','line_number':1460,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1461,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to append(basic_string(n, c)).','line_number':1465,'multiline':False]
['text':'!','line_number':1466,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1467,'multiline':False]
['text':'! <b>Requires</b>: [first,last) is a valid range.','line_number':1471,'multiline':False]
['text':'!','line_number':1472,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to append(basic_string(first, last)).','line_number':1473,'multiline':False]
['text':'!','line_number':1474,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1475,'multiline':False]
['text':'! <b>Effects</b>: Returns append(il.begin(), il.size()).','line_number':1481,'multiline':False]
['text':'!','line_number':1482,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to append(static_cast<size_type>(1), c).','line_number':1489,'multiline':False]
['text':'!','line_number':1490,'multiline':False]
['text':'No enough memory, insert a new object at the end','line_number':1501,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to assign(str, 0, npos).','line_number':1506,'multiline':False]
['text':'!','line_number':1507,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1508,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to return assign(sv.data(), sv.size()).','line_number':1512,'multiline':False]
['text':'!','line_number':1513,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1514,'multiline':False]
['text':'! <b>Effects</b>: The function replaces the string controlled by *this','line_number':1519,'multiline':False]
['text':'!    with a string of length str.size() whose elements are a copy of the string','line_number':1520,'multiline':False]
['text':'!   controlled by str. Leaves str in a valid but unspecified state.','line_number':1521,'multiline':False]
['text':'!','line_number':1522,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':1523,'multiline':False]
['text':'!','line_number':1524,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1525,'multiline':False]
['text':'! <b>Requires</b>: pos <= str.size()','line_number':1529,'multiline':False]
['text':'!','line_number':1530,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to assign as','line_number':1531,'multiline':False]
['text':'!   the smaller of n and str.size() - pos and calls assign(str.data() + pos rlen).','line_number':1532,'multiline':False]
['text':'!','line_number':1533,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws or out_of_range if pos > str.size().','line_number':1534,'multiline':False]
['text':'!','line_number':1535,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1536,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT.','line_number':1545,'multiline':False]
['text':'!','line_number':1546,'multiline':False]
['text':'! <b>Effects</b>: Replaces the string controlled by *this with a string of','line_number':1547,'multiline':False]
['text':'! length n whose elements are a copy of those pointed to by s.','line_number':1548,'multiline':False]
['text':'!','line_number':1549,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws or length_error if n > max_size().','line_number':1550,'multiline':False]
['text':'!','line_number':1551,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1552,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':1556,'multiline':False]
['text':'!','line_number':1557,'multiline':False]
['text':'! <b>Effects</b>: Calls assign(s, traits::length(s)).','line_number':1558,'multiline':False]
['text':'!','line_number':1559,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1560,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to assign(basic_string(n, c)).','line_number':1564,'multiline':False]
['text':'!','line_number':1565,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1566,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to assign(basic_string(first, last)).','line_number':1570,'multiline':False]
['text':'!','line_number':1571,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1572,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to assign(basic_string(first, last)).','line_number':1584,'multiline':False]
['text':'!','line_number':1585,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1586,'multiline':False]
['text':'! <b>Effects</b>: Returns assign(il.begin(), il.size()).','line_number':1612,'multiline':False]
['text':'!','line_number':1613,'multiline':False]
['text':'! <b>Requires</b>: pos <= size().','line_number':1620,'multiline':False]
['text':'!','line_number':1621,'multiline':False]
['text':'! <b>Effects</b>: Calls insert(pos, str.data(), str.size()).','line_number':1622,'multiline':False]
['text':'!','line_number':1623,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws or out_of_range if pos > size().','line_number':1624,'multiline':False]
['text':'!','line_number':1625,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1626,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size() and pos2 <= str.size()','line_number':1638,'multiline':False]
['text':'!','line_number':1639,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to insert as','line_number':1640,'multiline':False]
['text':'!   the smaller of n and str.size() - pos2 and calls insert(pos1, str.data() + pos2, rlen).','line_number':1641,'multiline':False]
['text':'!','line_number':1642,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws or out_of_range if pos1 > size() or pos2 > str.size().','line_number':1643,'multiline':False]
['text':'!','line_number':1644,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1645,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT and pos <= size().','line_number':1661,'multiline':False]
['text':'!','line_number':1662,'multiline':False]
['text':'! <b>Effects</b>: Replaces the string controlled by *this with a string of length size() + n','line_number':1663,'multiline':False]
['text':'!   whose first pos elements are a copy of the initial elements of the original string','line_number':1664,'multiline':False]
['text':'!   controlled by *this and whose next n elements are a copy of the elements in s and whose','line_number':1665,'multiline':False]
['text':'!   remaining elements are a copy of the remaining elements of the original string controlled by *this.','line_number':1666,'multiline':False]
['text':'!','line_number':1667,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws, out_of_range if pos > size() or','line_number':1668,'multiline':False]
['text':'!   length_error if size() + n > max_size().','line_number':1669,'multiline':False]
['text':'!','line_number':1670,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1671,'multiline':False]
['text':'! <b>Requires</b>: pos <= size() and s points to an array of at least traits::length(s) + 1 elements of CharT','line_number':1682,'multiline':False]
['text':'!','line_number':1683,'multiline':False]
['text':'! <b>Effects</b>: Calls insert(pos, s, traits::length(s)).','line_number':1684,'multiline':False]
['text':'!','line_number':1685,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws, out_of_range if pos > size()','line_number':1686,'multiline':False]
['text':'!   length_error if size() > max_size() - Traits::length(s)','line_number':1687,'multiline':False]
['text':'!','line_number':1688,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1689,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to insert(pos, basic_string(n, c)).','line_number':1701,'multiline':False]
['text':'!','line_number':1702,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws, out_of_range if pos > size()','line_number':1703,'multiline':False]
['text':'!   length_error if size() > max_size() - n','line_number':1704,'multiline':False]
['text':'!','line_number':1705,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1706,'multiline':False]
['text':'! <b>Effects</b>: Same as `return insert(pos, sv.data(), sv.size())`.','line_number':1717,'multiline':False]
['text':'!','line_number':1718,'multiline':False]
['text':'! <b>Requires</b>: p is a valid iterator on *this.','line_number':1723,'multiline':False]
['text':'!','line_number':1724,'multiline':False]
['text':'! <b>Effects</b>: inserts a copy of c before the character referred to by p.','line_number':1725,'multiline':False]
['text':'!','line_number':1726,'multiline':False]
['text':'! <b>Returns</b>: An iterator which refers to the copy of the inserted character.','line_number':1727,'multiline':False]
['text':'! <b>Requires</b>: p is a valid iterator on *this.','line_number':1735,'multiline':False]
['text':'!','line_number':1736,'multiline':False]
['text':'! <b>Effects</b>: Inserts n copies of c before the character referred to by p.','line_number':1737,'multiline':False]
['text':'!','line_number':1738,'multiline':False]
['text':'! <b>Returns</b>: an iterator to the first inserted element or p if n is 0.','line_number':1739,'multiline':False]
['text':'! <b>Requires</b>: p is a valid iterator on *this. [first,last) is a valid range.','line_number':1743,'multiline':False]
['text':'!','line_number':1744,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to insert(p - begin(), basic_string(first, last)).','line_number':1745,'multiline':False]
['text':'!','line_number':1746,'multiline':False]
['text':'! <b>Returns</b>: an iterator to the first inserted element or p if first == last.','line_number':1747,'multiline':False]
['text':'Check if we have enough capacity','line_number':1785,'multiline':False]
['text':'Otherwise expand current buffer or allocate new storage','line_number':1792,'multiline':False]
['text':'Check forward expansion','line_number':1798,'multiline':False]
['text':'Reuse same buffer','line_number':1805,'multiline':False]
['text':'Copy data to new buffer','line_number':1840,'multiline':False]
['text':'This can't throw, since characters are POD','line_number':1842,'multiline':False]
['text':'value_type is POD, so backwards expansion is much easier','line_number':1859,'multiline':False]
['text':'than with vector<T>','line_number':1860,'multiline':False]
['text':'First move old data','line_number':1866,'multiline':False]
['text':'Now initialize the new data','line_number':1869,'multiline':False]
['text':'! <b>Effects</b>: As if by insert(p, il.begin(), il.end()).','line_number':1884,'multiline':False]
['text':'!','line_number':1885,'multiline':False]
['text':'! <b>Returns</b>: An iterator which refers to the copy of the first inserted','line_number':1886,'multiline':False]
['text':'!   character, or p if i1 is empty.','line_number':1887,'multiline':False]
['text':'! <b>Effects</b>: Removes the last element from the container.','line_number':1894,'multiline':False]
['text':'!','line_number':1895,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1896,'multiline':False]
['text':'!','line_number':1897,'multiline':False]
['text':'! <b>Complexity</b>: Constant time.','line_number':1898,'multiline':False]
['text':'! <b>Requires</b>: pos <= size()','line_number':1906,'multiline':False]
['text':'!','line_number':1907,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length xlen of the string to be removed as the smaller of n and size() - pos.','line_number':1908,'multiline':False]
['text':'!   The function then replaces the string controlled by *this with a string of length size() - xlen','line_number':1909,'multiline':False]
['text':'!   whose first pos elements are a copy of the initial elements of the original string controlled by *this,','line_number':1910,'multiline':False]
['text':'!   and whose remaining elements are a copy of the elements of the original string controlled by *this','line_number':1911,'multiline':False]
['text':'!   beginning at position pos + xlen.','line_number':1912,'multiline':False]
['text':'!','line_number':1913,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos > size().','line_number':1914,'multiline':False]
['text':'!','line_number':1915,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1916,'multiline':False]
['text':'! <b>Effects</b>: Removes the character referred to by p.','line_number':1926,'multiline':False]
['text':'!','line_number':1927,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':1928,'multiline':False]
['text':'!','line_number':1929,'multiline':False]
['text':'! <b>Returns</b>: An iterator which points to the element immediately following p prior to the element being','line_number':1930,'multiline':False]
['text':'!    erased. If no such element exists, end() is returned.','line_number':1931,'multiline':False]
['text':' The move includes the terminating null.','line_number':1934,'multiline':False]
['text':'! <b>Requires</b>: first and last are valid iterators on *this, defining a range [first,last).','line_number':1944,'multiline':False]
['text':'!','line_number':1945,'multiline':False]
['text':'! <b>Effects</b>: Removes the characters in the range [first,last).','line_number':1946,'multiline':False]
['text':'!','line_number':1947,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':1948,'multiline':False]
['text':'!','line_number':1949,'multiline':False]
['text':'! <b>Returns</b>: An iterator which points to the element pointed to by last prior to','line_number':1950,'multiline':False]
['text':'!   the other elements being erased. If no such element exists, end() is returned.','line_number':1951,'multiline':False]
['text':' The move includes the terminating null.','line_number':1955,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements of the vector.','line_number':1967,'multiline':False]
['text':'!','line_number':1968,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1969,'multiline':False]
['text':'!','line_number':1970,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the vector.','line_number':1971,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size().','line_number':1984,'multiline':False]
['text':'!','line_number':1985,'multiline':False]
['text':'! <b>Effects</b>: Calls replace(pos1, n1, str.data(), str.size()).','line_number':1986,'multiline':False]
['text':'!','line_number':1987,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws or out_of_range if pos1 > size().','line_number':1988,'multiline':False]
['text':'!','line_number':1989,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':1990,'multiline':False]
['text':'! <b>Effects</b>: Calls `return replace(pos1, n1, sv.data(), sv.size());`.','line_number':2004,'multiline':False]
['text':'!','line_number':2005,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size() and pos2 <= str.size().','line_number':2012,'multiline':False]
['text':'!','line_number':2013,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to be','line_number':2014,'multiline':False]
['text':'!   inserted as the smaller of n2 and str.size() - pos2 and calls','line_number':2015,'multiline':False]
['text':'!   replace(pos1, n1, str.data() + pos2, rlen).','line_number':2016,'multiline':False]
['text':'!','line_number':2017,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws, out_of_range if pos1 > size() or pos2 > str.size().','line_number':2018,'multiline':False]
['text':'!','line_number':2019,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2020,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos1 > size() or pos2 > sv.size().','line_number':2029,'multiline':False]
['text':'!','line_number':2030,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to be inserted as the','line_number':2031,'multiline':False]
['text':'!   smaller of n2 and sv.size() - pos2 and calls `replace(pos1, n1, sv.data() + pos2, rlen)`.','line_number':2032,'multiline':False]
['text':'!','line_number':2033,'multiline':False]
['text':'! <b>Returns</b>: *this.','line_number':2034,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size() and s points to an array of at least n2 elements of CharT.','line_number':2044,'multiline':False]
['text':'!','line_number':2045,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length xlen of the string to be removed as the','line_number':2046,'multiline':False]
['text':'!   smaller of n1 and size() - pos1. If size() - xlen >= max_size() - n2 throws length_error.','line_number':2047,'multiline':False]
['text':'!   Otherwise, the function replaces the string controlled by *this with a string of','line_number':2048,'multiline':False]
['text':'!   length size() - xlen + n2 whose first pos1 elements are a copy of the initial elements','line_number':2049,'multiline':False]
['text':'!   of the original string controlled by *this, whose next n2 elements are a copy of the','line_number':2050,'multiline':False]
['text':'!   initial n2 elements of s, and whose remaining elements are a copy of the elements of','line_number':2051,'multiline':False]
['text':'!   the original string controlled by *this beginning at position pos + xlen.','line_number':2052,'multiline':False]
['text':'!','line_number':2053,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws, out_of_range if pos1 > size() or length_error','line_number':2054,'multiline':False]
['text':'!   if the length of the resulting string would exceed max_size()','line_number':2055,'multiline':False]
['text':'!','line_number':2056,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2057,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size() and s points to an array of at least n2 elements of CharT.','line_number':2070,'multiline':False]
['text':'!','line_number':2071,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length xlen of the string to be removed as the smaller','line_number':2072,'multiline':False]
['text':'! of n1 and size() - pos1. If size() - xlen >= max_size() - n2 throws length_error. Otherwise,','line_number':2073,'multiline':False]
['text':'! the function replaces the string controlled by *this with a string of length size() - xlen + n2','line_number':2074,'multiline':False]
['text':'! whose first pos1 elements are a copy of the initial elements of the original string controlled','line_number':2075,'multiline':False]
['text':'! by *this, whose next n2 elements are a copy of the initial n2 elements of s, and whose','line_number':2076,'multiline':False]
['text':'! remaining elements are a copy of the elements of the original string controlled by *this','line_number':2077,'multiline':False]
['text':'! beginning at position pos + xlen.','line_number':2078,'multiline':False]
['text':'!','line_number':2079,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws, out_of_range if pos1 > size() or length_error','line_number':2080,'multiline':False]
['text':'!   if the length of the resulting string would exceed max_size()','line_number':2081,'multiline':False]
['text':'!','line_number':2082,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2083,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size().','line_number':2089,'multiline':False]
['text':'!','line_number':2090,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to replace(pos1, n1, basic_string(n2, c)).','line_number':2091,'multiline':False]
['text':'!','line_number':2092,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws, out_of_range if pos1 > size() or length_error','line_number':2093,'multiline':False]
['text':'!   if the length of the  resulting string would exceed max_size()','line_number':2094,'multiline':False]
['text':'!','line_number':2095,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2096,'multiline':False]
['text':'! <b>Requires</b>: [begin(),i1) and [i1,i2) are valid ranges.','line_number':2108,'multiline':False]
['text':'!','line_number':2109,'multiline':False]
['text':'! <b>Effects</b>: Calls replace(i1 - begin(), i2 - i1, str).','line_number':2110,'multiline':False]
['text':'!','line_number':2111,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws','line_number':2112,'multiline':False]
['text':'!','line_number':2113,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2114,'multiline':False]
['text':'! <b>Requires</b>: [begin(),i1) and [i1,i2) are valid ranges and','line_number':2118,'multiline':False]
['text':'!   s points to an array of at least n elements','line_number':2119,'multiline':False]
['text':'!','line_number':2120,'multiline':False]
['text':'! <b>Effects</b>: Calls replace(i1 - begin(), i2 - i1, s, n).','line_number':2121,'multiline':False]
['text':'!','line_number':2122,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws','line_number':2123,'multiline':False]
['text':'!','line_number':2124,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2125,'multiline':False]
['text':'! <b>Requires</b>: [begin(),i1) and [i1,i2) are valid ranges and s points to an','line_number':2129,'multiline':False]
['text':'!   array of at least traits::length(s) + 1 elements of CharT.','line_number':2130,'multiline':False]
['text':'!','line_number':2131,'multiline':False]
['text':'! <b>Effects</b>: Calls replace(i1 - begin(), i2 - i1, s, traits::length(s)).','line_number':2132,'multiline':False]
['text':'!','line_number':2133,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws','line_number':2134,'multiline':False]
['text':'!','line_number':2135,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2136,'multiline':False]
['text':'! <b>Requires</b>: [begin(),i1) and [i1,i2) are valid ranges.','line_number':2140,'multiline':False]
['text':'!','line_number':2141,'multiline':False]
['text':'! <b>Effects</b>: Calls replace(i1 - begin(), i2 - i1, basic_string(n, c)).','line_number':2142,'multiline':False]
['text':'!','line_number':2143,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws','line_number':2144,'multiline':False]
['text':'!','line_number':2145,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2146,'multiline':False]
['text':'! <b>Requires</b>: [begin(),i1), [i1,i2) and [j1,j2) are valid ranges.','line_number':2161,'multiline':False]
['text':'!','line_number':2162,'multiline':False]
['text':'! <b>Effects</b>: Calls replace(i1 - begin(), i2 - i1, basic_string(j1, j2)).','line_number':2163,'multiline':False]
['text':'!','line_number':2164,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws','line_number':2165,'multiline':False]
['text':'!','line_number':2166,'multiline':False]
['text':'! <b>Returns</b>: *this','line_number':2167,'multiline':False]
['text':'! <b>Requires</b>: [begin(), i1) and [i1, i2) are valid ranges.','line_number':2216,'multiline':False]
['text':'!','line_number':2217,'multiline':False]
['text':'! <b>Effects</b>: Calls `replace(i1 - begin(), i2 - i1, sv).`.','line_number':2218,'multiline':False]
['text':'!','line_number':2219,'multiline':False]
['text':'! <b>Returns</b>: *this.','line_number':2220,'multiline':False]
['text':'! <b>Requires</b>: [begin(), i1) and [i1, i2) are valid ranges.','line_number':2229,'multiline':False]
['text':'!','line_number':2230,'multiline':False]
['text':'! <b>Effects</b>: Calls replace(i1 - begin(), i2 - i1, il.begin(), il.size()).','line_number':2231,'multiline':False]
['text':'!','line_number':2232,'multiline':False]
['text':'! <b>Returns</b>: *this.','line_number':2233,'multiline':False]
['text':'! <b>Requires</b>: pos <= size()','line_number':2242,'multiline':False]
['text':'!','line_number':2243,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to copy as the','line_number':2244,'multiline':False]
['text':'!   smaller of n and size() - pos. s shall designate an array of at least rlen elements.','line_number':2245,'multiline':False]
['text':'!   The function then replaces the string designated by s with a string of length rlen','line_number':2246,'multiline':False]
['text':'!   whose elements are a copy of the string controlled by *this beginning at position pos.','line_number':2247,'multiline':False]
['text':'!   The function does not append a null object to the string designated by s.','line_number':2248,'multiline':False]
['text':'!','line_number':2249,'multiline':False]
['text':'! <b>Throws</b>: if memory allocation throws, out_of_range if pos > size().','line_number':2250,'multiline':False]
['text':'!','line_number':2251,'multiline':False]
['text':'! <b>Returns</b>: rlen','line_number':2252,'multiline':False]
['text':'! <b>Effects</b>: *this contains the same sequence of characters that was in s,','line_number':2262,'multiline':False]
['text':'!   s contains the same sequence of characters that was in *this.','line_number':2263,'multiline':False]
['text':'!','line_number':2264,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2265,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2275,'multiline':False]
['text':'','line_number':2276,'multiline':False]
['text':'                 data access','line_number':2277,'multiline':False]
['text':'','line_number':2278,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2279,'multiline':False]
['text':'! <b>Requires</b>: The program shall not alter any of the values stored in the character array.','line_number':2281,'multiline':False]
['text':'!','line_number':2282,'multiline':False]
['text':'! <b>Returns</b>: A pointer p such that p + i == &operator[](i) for each i in [0,size()].','line_number':2283,'multiline':False]
['text':'!','line_number':2284,'multiline':False]
['text':'! <b>Complexity</b>: constant time.','line_number':2285,'multiline':False]
['text':'! <b>Requires</b>: The program shall not alter any of the values stored in the character array.','line_number':2290,'multiline':False]
['text':'!','line_number':2291,'multiline':False]
['text':'! <b>Returns</b>: A pointer p such that p + i == &operator[](i) for each i in [0,size()].','line_number':2292,'multiline':False]
['text':'!','line_number':2293,'multiline':False]
['text':'! <b>Complexity</b>: constant time.','line_number':2294,'multiline':False]
['text':'! <b>Returns</b>: A pointer p such that p + i == &operator[](i) for each i in [0,size()].','line_number':2299,'multiline':False]
['text':'!','line_number':2300,'multiline':False]
['text':'! <b>Complexity</b>: constant time.','line_number':2301,'multiline':False]
['text':'! <b>Returns</b>: a string_view to the characters in the string.','line_number':2307,'multiline':False]
['text':'!','line_number':2308,'multiline':False]
['text':'! <b>Complexity</b>: constant time.','line_number':2309,'multiline':False]
['text':'! <b>Returns</b>: a string_view to the characters in the string.','line_number':2315,'multiline':False]
['text':'!','line_number':2316,'multiline':False]
['text':'! <b>Complexity</b>: constant time.','line_number':2317,'multiline':False]
['text':'!','line_number':2318,'multiline':False]
['text':'! <b>Note</b>: This function is available to write portable code for compilers','line_number':2319,'multiline':False]
['text':'!   that don't support templated conversion operators.','line_number':2320,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2326,'multiline':False]
['text':'','line_number':2327,'multiline':False]
['text':'             string operations','line_number':2328,'multiline':False]
['text':'','line_number':2329,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2330,'multiline':False]
['text':'! <b>Effects</b>: Determines the lowest position xpos, if possible, such that both','line_number':2332,'multiline':False]
['text':'!   of the following conditions hold:','line_number':2333,'multiline':False]
['text':'!   1) pos <= xpos and xpos + str.size() <= size();','line_number':2334,'multiline':False]
['text':'!   2) traits::eq(at(xpos+I), str.at(I)) for all elements I of the string controlled by str.','line_number':2335,'multiline':False]
['text':'!','line_number':2336,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2337,'multiline':False]
['text':'!','line_number':2338,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2339,'multiline':False]
['text':'! <b>Effects</b>: Determines the lowest position xpos, if possible, such that both','line_number':2344,'multiline':False]
['text':'!   of the following conditions hold:','line_number':2345,'multiline':False]
['text':'!   1) pos <= xpos and xpos + sv.size() <= size();','line_number':2346,'multiline':False]
['text':'!   2) traits::eq(at(xpos+I), sv.at(I)) for all elements I of the string controlled by sv.','line_number':2347,'multiline':False]
['text':'!','line_number':2348,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2349,'multiline':False]
['text':'!','line_number':2350,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2351,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT.','line_number':2357,'multiline':False]
['text':'!','line_number':2358,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2359,'multiline':False]
['text':'!','line_number':2360,'multiline':False]
['text':'! <b>Returns</b>: find(basic_string<CharT,traits,allocator_type>(s,n),pos).','line_number':2361,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2378,'multiline':False]
['text':'!','line_number':2379,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2380,'multiline':False]
['text':'!','line_number':2381,'multiline':False]
['text':'! <b>Returns</b>: find(basic_string(s), pos).','line_number':2382,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2387,'multiline':False]
['text':'!','line_number':2388,'multiline':False]
['text':'! <b>Returns</b>: find(basic_string<CharT,traits,allocator_type>(1,c), pos).','line_number':2389,'multiline':False]
['text':'! <b>Effects</b>: Determines the highest position xpos, if possible, such','line_number':2406,'multiline':False]
['text':'!   that both of the following conditions obtain:','line_number':2407,'multiline':False]
['text':'!   a) xpos <= pos and xpos + str.size() <= size();','line_number':2408,'multiline':False]
['text':'!   b) traits::eq(at(xpos+I), str.at(I)) for all elements I of the string controlled by str.','line_number':2409,'multiline':False]
['text':'!','line_number':2410,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2411,'multiline':False]
['text':'!','line_number':2412,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2413,'multiline':False]
['text':'! <b>Effects</b>: Determines the highest position xpos, if possible, such','line_number':2418,'multiline':False]
['text':'!   that both of the following conditions obtain:','line_number':2419,'multiline':False]
['text':'!   a) xpos <= pos and xpos + sv.size() <= size();','line_number':2420,'multiline':False]
['text':'!   b) traits::eq(at(xpos+I), sv.at(I)) for all elements I of the string controlled by sv.','line_number':2421,'multiline':False]
['text':'!','line_number':2422,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2423,'multiline':False]
['text':'!','line_number':2424,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2425,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT.','line_number':2431,'multiline':False]
['text':'!','line_number':2432,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2433,'multiline':False]
['text':'!','line_number':2434,'multiline':False]
['text':'! <b>Returns</b>: rfind(basic_string(s, n), pos).','line_number':2435,'multiline':False]
['text':'! <b>Requires</b>: pos <= size() and s points to an array of at least','line_number':2453,'multiline':False]
['text':'!   traits::length(s) + 1 elements of CharT.','line_number':2454,'multiline':False]
['text':'!','line_number':2455,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2456,'multiline':False]
['text':'!','line_number':2457,'multiline':False]
['text':'! <b>Returns</b>: rfind(basic_string(s), pos).','line_number':2458,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2463,'multiline':False]
['text':'!','line_number':2464,'multiline':False]
['text':'! <b>Returns</b>: rfind(basic_string<CharT,traits,allocator_type>(1,c),pos).','line_number':2465,'multiline':False]
['text':'! <b>Effects</b>: Determines the lowest position xpos, if possible, such that both of the','line_number':2482,'multiline':False]
['text':'!   following conditions obtain: a) pos <= xpos and xpos < size();','line_number':2483,'multiline':False]
['text':'!   b) traits::eq(at(xpos), str.at(I)) for some element I of the string controlled by str.','line_number':2484,'multiline':False]
['text':'!','line_number':2485,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2486,'multiline':False]
['text':'!','line_number':2487,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2488,'multiline':False]
['text':'! <b>Effects</b>: Determines the lowest position xpos, if possible, such that both of the','line_number':2493,'multiline':False]
['text':'!   following conditions obtain: a) pos <= xpos and xpos < size();','line_number':2494,'multiline':False]
['text':'!   b) traits::eq(at(xpos), sv.at(I)) for some element I of the string controlled by sv.','line_number':2495,'multiline':False]
['text':'!','line_number':2496,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2497,'multiline':False]
['text':'!','line_number':2498,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2499,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT.','line_number':2505,'multiline':False]
['text':'!','line_number':2506,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2507,'multiline':False]
['text':'!','line_number':2508,'multiline':False]
['text':'! <b>Returns</b>: find_first_of(basic_string(s, n), pos).','line_number':2509,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2525,'multiline':False]
['text':'!','line_number':2526,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2527,'multiline':False]
['text':'!','line_number':2528,'multiline':False]
['text':'! <b>Returns</b>: find_first_of(basic_string(s), pos).','line_number':2529,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2534,'multiline':False]
['text':'!','line_number':2535,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2536,'multiline':False]
['text':'!','line_number':2537,'multiline':False]
['text':'! <b>Returns</b>: find_first_of(basic_string<CharT,traits,allocator_type>(1,c), pos).','line_number':2538,'multiline':False]
['text':'! <b>Effects</b>: Determines the highest position xpos, if possible, such that both of','line_number':2543,'multiline':False]
['text':'!   the following conditions obtain: a) xpos <= pos and xpos < size(); b)','line_number':2544,'multiline':False]
['text':'!   traits::eq(at(xpos), str.at(I)) for some element I of the string controlled by str.','line_number':2545,'multiline':False]
['text':'!','line_number':2546,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2547,'multiline':False]
['text':'!','line_number':2548,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2549,'multiline':False]
['text':'! <b>Effects</b>: Determines the highest position xpos, if possible, such that both of','line_number':2554,'multiline':False]
['text':'!   the following conditions obtain: a) xpos <= pos and xpos < size(); b)','line_number':2555,'multiline':False]
['text':'!   traits::eq(at(xpos), str.at(I)) for some element I of the string controlled by str.','line_number':2556,'multiline':False]
['text':'!','line_number':2557,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2558,'multiline':False]
['text':'!','line_number':2559,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2560,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT.','line_number':2566,'multiline':False]
['text':'!','line_number':2567,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2568,'multiline':False]
['text':'!','line_number':2569,'multiline':False]
['text':'! <b>Returns</b>: find_last_of(basic_string(s, n), pos).','line_number':2570,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2588,'multiline':False]
['text':'!','line_number':2589,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2590,'multiline':False]
['text':'!','line_number':2591,'multiline':False]
['text':'! <b>Returns</b>: find_last_of(basic_string<CharT,traits,allocator_type>(1,c),pos).','line_number':2592,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2597,'multiline':False]
['text':'!','line_number':2598,'multiline':False]
['text':'! <b>Returns</b>: find_last_of(basic_string(s), pos).','line_number':2599,'multiline':False]
['text':'! <b>Effects</b>: Determines the lowest position xpos, if possible, such that','line_number':2604,'multiline':False]
['text':'!   both of the following conditions obtain:','line_number':2605,'multiline':False]
['text':'!   a) pos <= xpos and xpos < size(); b) traits::eq(at(xpos), str.at(I)) for no','line_number':2606,'multiline':False]
['text':'!   element I of the string controlled by str.','line_number':2607,'multiline':False]
['text':'!','line_number':2608,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2609,'multiline':False]
['text':'!','line_number':2610,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2611,'multiline':False]
['text':'! <b>Effects</b>: Determines the lowest position xpos, if possible, such that','line_number':2616,'multiline':False]
['text':'!   both of the following conditions obtain:','line_number':2617,'multiline':False]
['text':'!   a) pos <= xpos and xpos < size(); b) traits::eq(at(xpos), sv.at(I)) for no','line_number':2618,'multiline':False]
['text':'!   element I of the string controlled by sv.','line_number':2619,'multiline':False]
['text':'!','line_number':2620,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2621,'multiline':False]
['text':'!','line_number':2622,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2623,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2629,'multiline':False]
['text':'!','line_number':2630,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2631,'multiline':False]
['text':'!','line_number':2632,'multiline':False]
['text':'! <b>Returns</b>: find_first_not_of(basic_string(s, n), pos).','line_number':2633,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2648,'multiline':False]
['text':'!','line_number':2649,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2650,'multiline':False]
['text':'!','line_number':2651,'multiline':False]
['text':'! <b>Returns</b>: find_first_not_of(basic_string(s), pos).','line_number':2652,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2657,'multiline':False]
['text':'!','line_number':2658,'multiline':False]
['text':'! <b>Returns</b>: find_first_not_of(basic_string(1, c), pos).','line_number':2659,'multiline':False]
['text':'! <b>Effects</b>: Determines the highest position xpos, if possible, such that','line_number':2675,'multiline':False]
['text':'!   both of the following conditions obtain: a) xpos <= pos and xpos < size();','line_number':2676,'multiline':False]
['text':'!   b) traits::eq(at(xpos), str.at(I)) for no element I of the string controlled by str.','line_number':2677,'multiline':False]
['text':'!','line_number':2678,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2679,'multiline':False]
['text':'!','line_number':2680,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2681,'multiline':False]
['text':'! <b>Effects</b>: Determines the highest position xpos, if possible, such that','line_number':2686,'multiline':False]
['text':'!   both of the following conditions obtain: a) xpos <= pos and xpos < size();','line_number':2687,'multiline':False]
['text':'!   b) traits::eq(at(xpos), sv.at(I)) for no element I of the string controlled by sv.','line_number':2688,'multiline':False]
['text':'!','line_number':2689,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2690,'multiline':False]
['text':'!','line_number':2691,'multiline':False]
['text':'! <b>Returns</b>: xpos if the function can determine such a value for xpos. Otherwise, returns npos.','line_number':2692,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least n elements of CharT.','line_number':2698,'multiline':False]
['text':'!','line_number':2699,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2700,'multiline':False]
['text':'!','line_number':2701,'multiline':False]
['text':'! <b>Returns</b>: find_last_not_of(basic_string(s, n), pos).','line_number':2702,'multiline':False]
['text':'! <b>Requires</b>: s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2719,'multiline':False]
['text':'!','line_number':2720,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2721,'multiline':False]
['text':'!','line_number':2722,'multiline':False]
['text':'! <b>Returns</b>: find_last_not_of(basic_string(s), pos).','line_number':2723,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2728,'multiline':False]
['text':'!','line_number':2729,'multiline':False]
['text':'! <b>Returns</b>: find_last_not_of(basic_string(1, c), pos).','line_number':2730,'multiline':False]
['text':'! <b>Requires</b>: Requires: pos <= size()','line_number':2747,'multiline':False]
['text':'!','line_number':2748,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to copy as','line_number':2749,'multiline':False]
['text':'!   the smaller of n and size() - pos.','line_number':2750,'multiline':False]
['text':'!','line_number':2751,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws or out_of_range if pos > size().','line_number':2752,'multiline':False]
['text':'!','line_number':2753,'multiline':False]
['text':'! <b>Returns</b>: basic_string<CharT,traits,allocator_type>(data()+pos,rlen).','line_number':2754,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to compare as','line_number':2765,'multiline':False]
['text':'!   the smaller of size() and str.size(). The function then compares the two strings by','line_number':2766,'multiline':False]
['text':'!   calling traits::compare(data(), str.data(), rlen).','line_number':2767,'multiline':False]
['text':'!','line_number':2768,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2769,'multiline':False]
['text':'!','line_number':2770,'multiline':False]
['text':'! <b>Returns</b>: The nonzero result if the result of the comparison is nonzero.','line_number':2771,'multiline':False]
['text':'!   Otherwise, returns a value < 0 if size() < str.size(), a 0 value if size() == str.size(),','line_number':2772,'multiline':False]
['text':'!   and value > 0 if size() > str.size()','line_number':2773,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2782,'multiline':False]
['text':'!','line_number':2783,'multiline':False]
['text':'! <b>Returns</b>: compare(basic_string(sv)).','line_number':2784,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size()','line_number':2793,'multiline':False]
['text':'!','line_number':2794,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to compare as','line_number':2795,'multiline':False]
['text':'!   the smaller of (this->size() - pos1), n1 and str.size(). The function then compares the two strings by','line_number':2796,'multiline':False]
['text':'!   calling traits::compare(data()+pos1, str.data(), rlen).','line_number':2797,'multiline':False]
['text':'!','line_number':2798,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos1 > size()','line_number':2799,'multiline':False]
['text':'!','line_number':2800,'multiline':False]
['text':'! <b>Returns</b>:basic_string(*this,pos1,n1).compare(str).','line_number':2801,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size()','line_number':2814,'multiline':False]
['text':'!','line_number':2815,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos1 > size()','line_number':2816,'multiline':False]
['text':'!','line_number':2817,'multiline':False]
['text':'! <b>Returns</b>:basic_string(*this,pos1,n1).compare(sv).','line_number':2818,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size() and pos2 <= str.size()','line_number':2831,'multiline':False]
['text':'!','line_number':2832,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to copy as','line_number':2833,'multiline':False]
['text':'!   the smaller of','line_number':2834,'multiline':False]
['text':'!','line_number':2835,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos1 > size() or pos2 > str.size()','line_number':2836,'multiline':False]
['text':'!','line_number':2837,'multiline':False]
['text':'! <b>Returns</b>: basic_string(*this, pos1, n1).compare(basic_string(str, pos2, n2)).','line_number':2838,'multiline':False]
['text':'! <b>Requires</b>: pos1 <= size() and pos2 <= str.size()','line_number':2850,'multiline':False]
['text':'!','line_number':2851,'multiline':False]
['text':'! <b>Effects</b>: Determines the effective length rlen of the string to copy as','line_number':2852,'multiline':False]
['text':'!   the smaller of','line_number':2853,'multiline':False]
['text':'!','line_number':2854,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos1 > size() or pos2 > sv.size()','line_number':2855,'multiline':False]
['text':'!','line_number':2856,'multiline':False]
['text':'! <b>Returns</b>: basic_string(*this, pos1, n1).compare(BasicStringView<CharT, Traits>(sv, pos2, n2)).','line_number':2857,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2870,'multiline':False]
['text':'!','line_number':2871,'multiline':False]
['text':'! <b>Returns</b>: compare(basic_string(s)).','line_number':2872,'multiline':False]
['text':'! <b>Requires</b>: pos1 > size() and s points to an array of at least n2 elements of CharT.','line_number':2880,'multiline':False]
['text':'!','line_number':2881,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos1 > size()','line_number':2882,'multiline':False]
['text':'!','line_number':2883,'multiline':False]
['text':'! <b>Returns</b>: basic_string(*this, pos, n1).compare(basic_string(s, n2)).','line_number':2884,'multiline':False]
['text':'! <b>Requires</b>: pos1 > size() and s points to an array of at least traits::length(s) + 1 elements of CharT.','line_number':2896,'multiline':False]
['text':'!','line_number':2897,'multiline':False]
['text':'! <b>Throws</b>: out_of_range if pos1 > size()','line_number':2898,'multiline':False]
['text':'!','line_number':2899,'multiline':False]
['text':'! <b>Returns</b>: basic_string(*this, pos, n1).compare(basic_string(s, n2)).','line_number':2900,'multiline':False]
['text':'Allocate a new buffer.','line_number':2950,'multiline':False]
['text':'We can make this nothrow as chars are always NoThrowCopyables','line_number':2955,'multiline':False]
['text':'Copy and update','line_number':2960,'multiline':False]
['text':'And release old buffer','line_number':2966,'multiline':False]
['text':' Helper functions used by constructors.  It is a severe error for','line_number':2991,'multiline':False]
['text':' any of them to be called anywhere except from within constructors.','line_number':2992,'multiline':False]
['text':'Save initial position','line_number':2999,'multiline':False]
['text':'Construct objects','line_number':3003,'multiline':False]
['text':'Call destructors','line_number':3009,'multiline':False]
['text':'Save initial destination position','line_number':3021,'multiline':False]
['text':'Try to build objects','line_number':3026,'multiline':False]
['text':'Call destructors','line_number':3032,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':3067,'multiline':False]
['text':'!Typedef for a basic_string of','line_number':3084,'multiline':False]
['text':'!narrow characters','line_number':3085,'multiline':False]
['text':'!Typedef for a basic_string of','line_number':3092,'multiline':False]
['text':'!narrow characters','line_number':3093,'multiline':False]
['text':' ------------------------------------------------------------','line_number':3120,'multiline':False]
['text':' Non-member functions.','line_number':3121,'multiline':False]
['text':' Operator+','line_number':3123,'multiline':False]
['text':' Operator== and operator!=','line_number':3198,'multiline':False]
['text':' Operator< (and also >, <=, and >=).','line_number':3278,'multiline':False]
['text':' Swap.','line_number':3417,'multiline':False]
['text':' I/O.','line_number':3424,'multiline':False]
['text':'namespace dtl {','line_number':3442,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':3443,'multiline':False]
['text':' If we have read no characters, then set failbit.','line_number':3517,'multiline':False]
['text':' Character is extracted but not appended.','line_number':3549,'multiline':False]
['text':'!has_trivial_destructor_after_move<> == true_type','line_number':3587,'multiline':False]
['text':'!specialization for optimizations','line_number':3588,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':3600,'multiline':False]
['text':' BOOST_CONTAINER_STRING_HPP','line_number':3604,'multiline':False]
