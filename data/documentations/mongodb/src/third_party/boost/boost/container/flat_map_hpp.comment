['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':' container','line_number':23,'multiline':False]
['text':'new_allocator','line_number':26,'multiline':False]
['text':' container/detail','line_number':28,'multiline':False]
['text':'equal()','line_number':32,'multiline':False]
['text':' move','line_number':34,'multiline':False]
['text':' move/detail','line_number':37,'multiline':False]
['text':' intrusive','line_number':43,'multiline':False]
['text':'pair','line_number':44,'multiline':False]
['text':'less, equal','line_number':45,'multiline':False]
['text':'others','line_number':46,'multiline':False]
['text':'namespace dtl{','line_number':75,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':77,'multiline':False]
['text':'! A flat_map is a kind of associative container that supports unique keys (contains at','line_number':79,'multiline':False]
['text':'! most one of each key value) and provides for fast retrieval of values of another','line_number':80,'multiline':False]
['text':'! type T based on the keys.','line_number':81,'multiline':False]
['text':'!','line_number':82,'multiline':False]
['text':'! A flat_map satisfies all of the requirements of a container, a reversible','line_number':83,'multiline':False]
['text':'! container and an associative container. A flat_map also provides','line_number':84,'multiline':False]
['text':'! most operations described for unique keys. For a','line_number':85,'multiline':False]
['text':'! flat_map<Key,T> the key_type is Key and the value_type is std::pair<Key,T>','line_number':86,'multiline':False]
['text':'! (unlike std::map<Key, T> which value_type is std::pair<<b>const</b> Key, T>).','line_number':87,'multiline':False]
['text':'!','line_number':88,'multiline':False]
['text':'! flat_map is similar to std::map but it's implemented by as an ordered sequence container.','line_number':89,'multiline':False]
['text':'! The underlying sequence container is by default <i>vector</i> but it can also work','line_number':90,'multiline':False]
['text':'! user-provided vector-like SequenceContainers (like <i>static_vector</i> or <i>small_vector</i>).','line_number':91,'multiline':False]
['text':'!','line_number':92,'multiline':False]
['text':'! Using vector-like sequence containers means that inserting a new element into a flat_map might invalidate','line_number':93,'multiline':False]
['text':'! previous iterators and references (unless that sequence container is <i>stable_vector</i> or a similar','line_number':94,'multiline':False]
['text':'! container that offers stable pointers and references). Similarly, erasing an element might invalidate','line_number':95,'multiline':False]
['text':'! iterators and references pointing to elements that come after (their keys are bigger) the erased element.','line_number':96,'multiline':False]
['text':'!','line_number':97,'multiline':False]
['text':'! This container provides random-access iterators.','line_number':98,'multiline':False]
['text':'!','line_number':99,'multiline':False]
['text':'! \tparam Key is the key_type of the map','line_number':100,'multiline':False]
['text':'! \tparam Value is the <code>mapped_type</code>','line_number':101,'multiline':False]
['text':'! \tparam Compare is the ordering function for Keys (e.g. <i>std::less<Key></i>).','line_number':102,'multiline':False]
['text':'! \tparam AllocatorOrContainer is either:','line_number':103,'multiline':False]
['text':'!   - The allocator to allocate <code>value_type</code>s (e.g. <i>allocator< std::pair<Key, T> > </i>).','line_number':104,'multiline':False]
['text':'!     (in this case <i>sequence_type</i> will be vector<value_type, AllocatorOrContainer>)','line_number':105,'multiline':False]
['text':'!   - The SequenceContainer to be used as the underlying <i>sequence_type</i>. It must be a vector-like','line_number':106,'multiline':False]
['text':'!     sequence container with random-access iterators..','line_number':107,'multiline':False]
['text':'This is the tree that we should store if pair was movable','line_number':118,'multiline':False]
['text':'This is the real tree stored here. It's based on a movable pair','line_number':125,'multiline':False]
['text':' flat tree representing flat_map','line_number':132,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':167,'multiline':False]
['text':'////////////////////////////////////////////','line_number':171,'multiline':False]
['text':'','line_number':172,'multiline':False]
['text':'                    types','line_number':173,'multiline':False]
['text':'','line_number':174,'multiline':False]
['text':'////////////////////////////////////////////','line_number':175,'multiline':False]
['text':'AllocatorOrContainer::value_type must be std::pair<Key, T>','line_number':198,'multiline':False]
['text':'////////////////////////////////////////////','line_number':201,'multiline':False]
['text':'','line_number':202,'multiline':False]
['text':'          construct/copy/destroy','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':'////////////////////////////////////////////','line_number':205,'multiline':False]
['text':'! <b>Effects</b>: Default constructs an empty flat_map.','line_number':207,'multiline':False]
['text':'!','line_number':208,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':209,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified allocator.','line_number':215,'multiline':False]
['text':'!','line_number':216,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':217,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified','line_number':222,'multiline':False]
['text':'! comparison object.','line_number':223,'multiline':False]
['text':'!','line_number':224,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':225,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified','line_number':230,'multiline':False]
['text':'! comparison object and allocator.','line_number':231,'multiline':False]
['text':'!','line_number':232,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':233,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map and','line_number':238,'multiline':False]
['text':'! and inserts elements from the range [first ,last ).','line_number':239,'multiline':False]
['text':'!','line_number':240,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':241,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':242,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified','line_number':248,'multiline':False]
['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':249,'multiline':False]
['text':'!','line_number':250,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':251,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':252,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':258,'multiline':False]
['text':'! and inserts elements from the range [first ,last ).','line_number':259,'multiline':False]
['text':'!','line_number':260,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':261,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':262,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':268,'multiline':False]
['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':269,'multiline':False]
['text':'!','line_number':270,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':271,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':272,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map','line_number':278,'multiline':False]
['text':'! and inserts elements from the ordered range [first ,last). This function','line_number':279,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':280,'multiline':False]
['text':'!','line_number':281,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':282,'multiline':False]
['text':'!','line_number':283,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':284,'multiline':False]
['text':'!','line_number':285,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':286,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':293,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last). This function','line_number':294,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':295,'multiline':False]
['text':'!','line_number':296,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':297,'multiline':False]
['text':'!','line_number':298,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':299,'multiline':False]
['text':'!','line_number':300,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':301,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':308,'multiline':False]
['text':'! allocator, and inserts elements from the ordered range [first ,last). This function','line_number':309,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':310,'multiline':False]
['text':'!','line_number':311,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':312,'multiline':False]
['text':'!','line_number':313,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':314,'multiline':False]
['text':'!','line_number':315,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':316,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified allocator and','line_number':323,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last). This function','line_number':324,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':325,'multiline':False]
['text':'!','line_number':326,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':327,'multiline':False]
['text':'!','line_number':328,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':329,'multiline':False]
['text':'!','line_number':330,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':331,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map and','line_number':339,'multiline':False]
['text':'! inserts elements from the range [il.begin() ,il.end()).','line_number':340,'multiline':False]
['text':'!','line_number':341,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':342,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':343,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified','line_number':350,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin() ,il.end()).','line_number':351,'multiline':False]
['text':'!','line_number':352,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':353,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':354,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':362,'multiline':False]
['text':'! inserts elements from the range [il.begin() ,il.end()).','line_number':363,'multiline':False]
['text':'!','line_number':364,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':365,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':366,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':374,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin() ,il.end()).','line_number':375,'multiline':False]
['text':'!','line_number':376,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':377,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':378,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using and','line_number':387,'multiline':False]
['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':388,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':389,'multiline':False]
['text':'!','line_number':390,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':391,'multiline':False]
['text':'! unique values.','line_number':392,'multiline':False]
['text':'!','line_number':393,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':394,'multiline':False]
['text':'!','line_number':395,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':396,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':403,'multiline':False]
['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':404,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':405,'multiline':False]
['text':'!','line_number':406,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':407,'multiline':False]
['text':'! unique values.','line_number':408,'multiline':False]
['text':'!','line_number':409,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':410,'multiline':False]
['text':'!','line_number':411,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':412,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':420,'multiline':False]
['text':'! allocator, and inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':421,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':422,'multiline':False]
['text':'!','line_number':423,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':424,'multiline':False]
['text':'! unique values.','line_number':425,'multiline':False]
['text':'!','line_number':426,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':427,'multiline':False]
['text':'!','line_number':428,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':429,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a flat_map.','line_number':439,'multiline':False]
['text':'!','line_number':440,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':441,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a flat_map.','line_number':446,'multiline':False]
['text':'!   Constructs *this using x's resources.','line_number':447,'multiline':False]
['text':'!','line_number':448,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':449,'multiline':False]
['text':'!','line_number':450,'multiline':False]
['text':'! <b>Postcondition</b>: x is emptied.','line_number':451,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a flat_map using the specified allocator.','line_number':457,'multiline':False]
['text':'!','line_number':458,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':459,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a flat_map using the specified allocator.','line_number':464,'multiline':False]
['text':'!   Constructs *this using x's resources.','line_number':465,'multiline':False]
['text':'!','line_number':466,'multiline':False]
['text':'! <b>Complexity</b>: Constant if x.get_allocator() == a, linear otherwise.','line_number':467,'multiline':False]
['text':'! <b>Effects</b>: Makes *this a copy of x.','line_number':472,'multiline':False]
['text':'!','line_number':473,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':474,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a flat_map.','line_number':478,'multiline':False]
['text':'!   Constructs *this using x's resources.','line_number':479,'multiline':False]
['text':'!','line_number':480,'multiline':False]
['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':481,'multiline':False]
['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':482,'multiline':False]
['text':'!','line_number':483,'multiline':False]
['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':484,'multiline':False]
['text':'!   propagate_on_container_move_assignment is true or','line_number':485,'multiline':False]
['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':486,'multiline':False]
['text':'! <b>Effects</b>: Assign elements from il to *this','line_number':494,'multiline':False]
['text':'! <b>Effects</b>: Returns a copy of the allocator that','line_number':503,'multiline':False]
['text':'!   was passed to the object's constructor.','line_number':504,'multiline':False]
['text':'!','line_number':505,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':506,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':511,'multiline':False]
['text':'!','line_number':512,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':513,'multiline':False]
['text':'!','line_number':514,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':515,'multiline':False]
['text':'!','line_number':516,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':517,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':525,'multiline':False]
['text':'!','line_number':526,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':527,'multiline':False]
['text':'!','line_number':528,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':529,'multiline':False]
['text':'!','line_number':530,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':531,'multiline':False]
['text':'////////////////////////////////////////////','line_number':539,'multiline':False]
['text':'','line_number':540,'multiline':False]
['text':'                iterators','line_number':541,'multiline':False]
['text':'','line_number':542,'multiline':False]
['text':'////////////////////////////////////////////','line_number':543,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the container.','line_number':545,'multiline':False]
['text':'!','line_number':546,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':547,'multiline':False]
['text':'!','line_number':548,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':549,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':554,'multiline':False]
['text':'!','line_number':555,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':556,'multiline':False]
['text':'!','line_number':557,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':558,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the end of the container.','line_number':563,'multiline':False]
['text':'!','line_number':564,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':565,'multiline':False]
['text':'!','line_number':566,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':567,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':572,'multiline':False]
['text':'!','line_number':573,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':574,'multiline':False]
['text':'!','line_number':575,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':576,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':581,'multiline':False]
['text':'! of the reversed container.','line_number':582,'multiline':False]
['text':'!','line_number':583,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':584,'multiline':False]
['text':'!','line_number':585,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':586,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':591,'multiline':False]
['text':'! of the reversed container.','line_number':592,'multiline':False]
['text':'!','line_number':593,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':594,'multiline':False]
['text':'!','line_number':595,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':596,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':601,'multiline':False]
['text':'! of the reversed container.','line_number':602,'multiline':False]
['text':'!','line_number':603,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':604,'multiline':False]
['text':'!','line_number':605,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':606,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':611,'multiline':False]
['text':'! of the reversed container.','line_number':612,'multiline':False]
['text':'!','line_number':613,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':614,'multiline':False]
['text':'!','line_number':615,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':616,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':621,'multiline':False]
['text':'!','line_number':622,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':623,'multiline':False]
['text':'!','line_number':624,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':625,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':630,'multiline':False]
['text':'!','line_number':631,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':632,'multiline':False]
['text':'!','line_number':633,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':634,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':639,'multiline':False]
['text':'! of the reversed container.','line_number':640,'multiline':False]
['text':'!','line_number':641,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':642,'multiline':False]
['text':'!','line_number':643,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':644,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':649,'multiline':False]
['text':'! of the reversed container.','line_number':650,'multiline':False]
['text':'!','line_number':651,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':652,'multiline':False]
['text':'!','line_number':653,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':654,'multiline':False]
['text':'////////////////////////////////////////////','line_number':659,'multiline':False]
['text':'','line_number':660,'multiline':False]
['text':'                capacity','line_number':661,'multiline':False]
['text':'','line_number':662,'multiline':False]
['text':'////////////////////////////////////////////','line_number':663,'multiline':False]
['text':'! <b>Effects</b>: Returns true if the container contains no elements.','line_number':665,'multiline':False]
['text':'!','line_number':666,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':667,'multiline':False]
['text':'!','line_number':668,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':669,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of the elements contained in the container.','line_number':674,'multiline':False]
['text':'!','line_number':675,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':676,'multiline':False]
['text':'!','line_number':677,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':678,'multiline':False]
['text':'! <b>Effects</b>: Returns the largest possible size of the container.','line_number':683,'multiline':False]
['text':'!','line_number':684,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':685,'multiline':False]
['text':'!','line_number':686,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':687,'multiline':False]
['text':'! <b>Effects</b>: Number of elements for which memory has been allocated.','line_number':692,'multiline':False]
['text':'!   capacity() is always greater than or equal to size().','line_number':693,'multiline':False]
['text':'!','line_number':694,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':695,'multiline':False]
['text':'!','line_number':696,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':697,'multiline':False]
['text':'! <b>Effects</b>: If n is less than or equal to capacity(), or the','line_number':702,'multiline':False]
['text':'!   underlying container has no `reserve` member, this call has no','line_number':703,'multiline':False]
['text':'!   effect. Otherwise, it is a request for allocation of additional memory.','line_number':704,'multiline':False]
['text':'!   If the request is successful, then capacity() is greater than or equal to','line_number':705,'multiline':False]
['text':'!   n; otherwise, capacity() is unchanged. In either case, size() is unchanged.','line_number':706,'multiline':False]
['text':'!','line_number':707,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation allocation throws or T's copy constructor throws.','line_number':708,'multiline':False]
['text':'!','line_number':709,'multiline':False]
['text':'! <b>Note</b>: If capacity() is less than "cnt", iterators and references to','line_number':710,'multiline':False]
['text':'!   to values might be invalidated.','line_number':711,'multiline':False]
['text':'! <b>Effects</b>: Tries to deallocate the excess of memory created','line_number':715,'multiline':False]
['text':'    with previous allocations. The size of the vector is unchanged','line_number':716,'multiline':False]
['text':'!','line_number':717,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':718,'multiline':False]
['text':'!','line_number':719,'multiline':False]
['text':'! <b>Complexity</b>: Linear to size().','line_number':720,'multiline':False]
['text':'////////////////////////////////////////////','line_number':724,'multiline':False]
['text':'','line_number':725,'multiline':False]
['text':'               element access','line_number':726,'multiline':False]
['text':'','line_number':727,'multiline':False]
['text':'////////////////////////////////////////////','line_number':728,'multiline':False]
['text':'! Effects: If there is no key equivalent to x in the flat_map, inserts','line_number':731,'multiline':False]
['text':'!   value_type(x, T()) into the flat_map.','line_number':732,'multiline':False]
['text':'!','line_number':733,'multiline':False]
['text':'! Returns: A reference to the mapped_type corresponding to x in *this.','line_number':734,'multiline':False]
['text':'!','line_number':735,'multiline':False]
['text':'! Complexity: Logarithmic search time plus linear insertion time in case no equivalent key is present.','line_number':736,'multiline':False]
['text':'! Effects: If there is no key equivalent to x in the flat_map, inserts','line_number':739,'multiline':False]
['text':'! value_type(move(x), T()) into the flat_map (the key is move-constructed)','line_number':740,'multiline':False]
['text':'!','line_number':741,'multiline':False]
['text':'! Returns: A reference to the mapped_type corresponding to x in *this.','line_number':742,'multiline':False]
['text':'!','line_number':743,'multiline':False]
['text':'! Complexity: Logarithmic search time plus linear insertion time in case no equivalent key is present.','line_number':744,'multiline':False]
['text':'in compilers like GCC 3.4, we can't catch temporaries','line_number':747,'multiline':False]
['text':'! Effects: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':754,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':755,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, forward<M>(obj)).','line_number':756,'multiline':False]
['text':'! ','line_number':757,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':758,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':759,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':760,'multiline':False]
['text':'!','line_number':761,'multiline':False]
['text':'! Returns: The bool component is true if the insertion took place and false if the assignment','line_number':762,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':763,'multiline':False]
['text':'!','line_number':764,'multiline':False]
['text':'! Complexity: Logarithmic search time plus linear insertion time in case no equivalent key is present.','line_number':765,'multiline':False]
['text':'! Effects: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':775,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':776,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, move(obj)).','line_number':777,'multiline':False]
['text':'! ','line_number':778,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':779,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':780,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':781,'multiline':False]
['text':'!','line_number':782,'multiline':False]
['text':'! Returns: The bool component is true if the insertion took place and false if the assignment','line_number':783,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':784,'multiline':False]
['text':'!','line_number':785,'multiline':False]
['text':'! Complexity: Logarithmic in the size of the container.','line_number':786,'multiline':False]
['text':'! Effects: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':796,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':797,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, forward<M>(obj)) and the new element','line_number':798,'multiline':False]
['text':'! to the container as close as possible to the position just before hint.','line_number':799,'multiline':False]
['text':'! ','line_number':800,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':801,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':802,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':803,'multiline':False]
['text':'!','line_number':804,'multiline':False]
['text':'! Returns: The bool component is true if the insertion took place and false if the assignment','line_number':805,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':806,'multiline':False]
['text':'!','line_number':807,'multiline':False]
['text':'! Complexity: Logarithmic in the size of the container in general, but amortized constant if','line_number':808,'multiline':False]
['text':'! the new element is inserted just before hint.','line_number':809,'multiline':False]
['text':'! Effects: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':820,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':821,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, move(obj)) and the new element','line_number':822,'multiline':False]
['text':'! to the container as close as possible to the position just before hint.','line_number':823,'multiline':False]
['text':'! ','line_number':824,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':825,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':826,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':827,'multiline':False]
['text':'!','line_number':828,'multiline':False]
['text':'! Returns: The bool component is true if the insertion took place and false if the assignment','line_number':829,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':830,'multiline':False]
['text':'!','line_number':831,'multiline':False]
['text':'! Complexity: Logarithmic in the size of the container in general, but amortized constant if','line_number':832,'multiline':False]
['text':'! the new element is inserted just before hint.','line_number':833,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::nth(size_type)','line_number':844,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::nth(size_type) const','line_number':849,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::index_of(iterator)','line_number':854,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::index_of(const_iterator) const','line_number':859,'multiline':False]
['text':'! Returns: A reference to the element whose key is equivalent to x.','line_number':864,'multiline':False]
['text':'!','line_number':865,'multiline':False]
['text':'! Throws: An exception object of type out_of_range if no such element is present.','line_number':866,'multiline':False]
['text':'!','line_number':867,'multiline':False]
['text':'! Complexity: logarithmic.','line_number':868,'multiline':False]
['text':'! Returns: A reference to the element whose key is equivalent to x.','line_number':878,'multiline':False]
['text':'!','line_number':879,'multiline':False]
['text':'! Throws: An exception object of type out_of_range if no such element is present.','line_number':880,'multiline':False]
['text':'!','line_number':881,'multiline':False]
['text':'! Complexity: logarithmic.','line_number':882,'multiline':False]
['text':'////////////////////////////////////////////','line_number':892,'multiline':False]
['text':'','line_number':893,'multiline':False]
['text':'                modifiers','line_number':894,'multiline':False]
['text':'','line_number':895,'multiline':False]
['text':'////////////////////////////////////////////','line_number':896,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object x of type T constructed with','line_number':900,'multiline':False]
['text':'!   std::forward<Args>(args)... if and only if there is no element in the container','line_number':901,'multiline':False]
['text':'!   with key equivalent to the key of x.','line_number':902,'multiline':False]
['text':'!','line_number':903,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':904,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':905,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':906,'multiline':False]
['text':'!','line_number':907,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':908,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':909,'multiline':False]
['text':'!','line_number':910,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':911,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':916,'multiline':False]
['text':'!   std::forward<Args>(args)... in the container if and only if there is','line_number':917,'multiline':False]
['text':'!   no element in the container with key equivalent to the key of x.','line_number':918,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':919,'multiline':False]
['text':'!','line_number':920,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':921,'multiline':False]
['text':'!   to the key of x.','line_number':922,'multiline':False]
['text':'!','line_number':923,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':924,'multiline':False]
['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':925,'multiline':False]
['text':'!','line_number':926,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':927,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':936,'multiline':False]
['text':'! forward_as_tuple(k), forward_as_tuple(forward<Args>(args)...).','line_number':937,'multiline':False]
['text':'! ','line_number':938,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':939,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(k),','line_number':940,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':941,'multiline':False]
['text':'! ','line_number':942,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only if the','line_number':943,'multiline':False]
['text':'! insertion took place. The returned iterator points to the map element whose key is equivalent to k.','line_number':944,'multiline':False]
['text':'! ','line_number':945,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':946,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':954,'multiline':False]
['text':'! forward_as_tuple(k), forward_as_tuple(forward<Args>(args)...).','line_number':955,'multiline':False]
['text':'! ','line_number':956,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':957,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(k),','line_number':958,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':959,'multiline':False]
['text':'! ','line_number':960,'multiline':False]
['text':'! <b>Returns</b>: The returned iterator points to the map element whose key is equivalent to k.','line_number':961,'multiline':False]
['text':'! ','line_number':962,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if value','line_number':963,'multiline':False]
['text':'!   is inserted right before p.','line_number':964,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':972,'multiline':False]
['text':'! forward_as_tuple(move(k)), forward_as_tuple(forward<Args>(args)...).','line_number':973,'multiline':False]
['text':'! ','line_number':974,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':975,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(move(k)),','line_number':976,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':977,'multiline':False]
['text':'! ','line_number':978,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only if the','line_number':979,'multiline':False]
['text':'! insertion took place. The returned iterator points to the map element whose key is equivalent to k.','line_number':980,'multiline':False]
['text':'! ','line_number':981,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion time in case the key is not present.','line_number':982,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':990,'multiline':False]
['text':'! forward_as_tuple(move(k)), forward_as_tuple(forward<Args>(args)...).','line_number':991,'multiline':False]
['text':'! ','line_number':992,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':993,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(move(k)),','line_number':994,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':995,'multiline':False]
['text':'! ','line_number':996,'multiline':False]
['text':'! <b>Returns</b>: The returned iterator points to the map element whose key is equivalent to k.','line_number':997,'multiline':False]
['text':'! ','line_number':998,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if value','line_number':999,'multiline':False]
['text':'!   is inserted right before p. Linear insertion time in case no equivalent key is present.','line_number':1000,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1009,'multiline':False]
['text':'','line_number':1048,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1052,'multiline':False]
['text':'! <b>Effects</b>: Inserts x if and only if there is no element in the container','line_number':1054,'multiline':False]
['text':'!   with key equivalent to the key of x.','line_number':1055,'multiline':False]
['text':'!','line_number':1056,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':1057,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':1058,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':1059,'multiline':False]
['text':'!','line_number':1060,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':1061,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':1062,'multiline':False]
['text':'!','line_number':1063,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1064,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value_type move constructed from the pair if and','line_number':1069,'multiline':False]
['text':'! only if there is no element in the container with key equivalent to the key of x.','line_number':1070,'multiline':False]
['text':'!','line_number':1071,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':1072,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':1073,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':1074,'multiline':False]
['text':'!','line_number':1075,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':1076,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':1077,'multiline':False]
['text':'!','line_number':1078,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1079,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value_type constructed from the pair if and','line_number':1086,'multiline':False]
['text':'! only if there is no element in the container with key equivalent to the key of x.','line_number':1087,'multiline':False]
['text':'!','line_number':1088,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':1089,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':1090,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':1091,'multiline':False]
['text':'!','line_number':1092,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':1093,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':1094,'multiline':False]
['text':'!','line_number':1095,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1096,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container if and only if there is','line_number':1108,'multiline':False]
['text':'!   no element in the container with key equivalent to the key of x.','line_number':1109,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1110,'multiline':False]
['text':'!','line_number':1111,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1112,'multiline':False]
['text':'!   to the key of x.','line_number':1113,'multiline':False]
['text':'!','line_number':1114,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':1115,'multiline':False]
['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':1116,'multiline':False]
['text':'!','line_number':1117,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1118,'multiline':False]
['text':'! <b>Effects</b>: Inserts an element move constructed from x in the container.','line_number':1126,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1127,'multiline':False]
['text':'!','line_number':1128,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent to the key of x.','line_number':1129,'multiline':False]
['text':'!','line_number':1130,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':1131,'multiline':False]
['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':1132,'multiline':False]
['text':'!','line_number':1133,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1134,'multiline':False]
['text':'! <b>Effects</b>: Inserts an element constructed from x in the container.','line_number':1142,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1143,'multiline':False]
['text':'!','line_number':1144,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent to the key of x.','line_number':1145,'multiline':False]
['text':'!','line_number':1146,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time (constant if x is inserted','line_number':1147,'multiline':False]
['text':'!   right before p) plus insertion linear to the elements with bigger keys than x.','line_number':1148,'multiline':False]
['text':'!','line_number':1149,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1150,'multiline':False]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':1162,'multiline':False]
['text':'!','line_number':1163,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) if and only','line_number':1164,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element.','line_number':1165,'multiline':False]
['text':'!','line_number':1166,'multiline':False]
['text':'! <b>Complexity</b>: N log(size()+N).','line_number':1167,'multiline':False]
['text':'!','line_number':1168,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1169,'multiline':False]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':1174,'multiline':False]
['text':'!','line_number':1175,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':1176,'multiline':False]
['text':'! unique values.','line_number':1177,'multiline':False]
['text':'!','line_number':1178,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) if and only','line_number':1179,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element. This','line_number':1180,'multiline':False]
['text':'!   function is more efficient than the normal range creation for ordered ranges.','line_number':1181,'multiline':False]
['text':'!','line_number':1182,'multiline':False]
['text':'! <b>Complexity</b>: Linear.','line_number':1183,'multiline':False]
['text':'!','line_number':1184,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1185,'multiline':False]
['text':'!','line_number':1186,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1187,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()) if and only','line_number':1193,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element.','line_number':1194,'multiline':False]
['text':'!','line_number':1195,'multiline':False]
['text':'! <b>Complexity</b>: N log(N).','line_number':1196,'multiline':False]
['text':'!','line_number':1197,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1198,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':1205,'multiline':False]
['text':'! unique values.','line_number':1206,'multiline':False]
['text':'!','line_number':1207,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()) if and only','line_number':1208,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element. This','line_number':1209,'multiline':False]
['text':'!   function is more efficient than the normal range creation for ordered ranges.','line_number':1210,'multiline':False]
['text':'!','line_number':1211,'multiline':False]
['text':'! <b>Complexity</b>: Linear.','line_number':1212,'multiline':False]
['text':'!','line_number':1213,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':1214,'multiline':False]
['text':'!','line_number':1215,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1216,'multiline':False]
['text':'! <b>Requires</b>: this->get_allocator() == source.get_allocator().','line_number':1225,'multiline':False]
['text':'!','line_number':1226,'multiline':False]
['text':'! <b>Effects</b>: Move-inserts each element from source into *this a using','line_number':1227,'multiline':False]
['text':'!   the comparison object of *this. If there is an element in a with key equivalent to the','line_number':1228,'multiline':False]
['text':'!   key of an element from source, then that element is not moved from source.','line_number':1229,'multiline':False]
['text':'!','line_number':1230,'multiline':False]
['text':'! <b>Complexity</b>: Linear in this->size() + source.size().','line_number':1231,'multiline':False]
['text':'!','line_number':1232,'multiline':False]
['text':'! <b>Note</b>: Invalidates all iterators and references.','line_number':1233,'multiline':False]
['text':'! @copydoc ::boost::container::flat_map::merge(flat_map<Key, T, C2, AllocatorOrContainer>&)','line_number':1238,'multiline':False]
['text':'! @copydoc ::boost::container::flat_map::merge(flat_map<Key, T, C2, AllocatorOrContainer>&)','line_number':1243,'multiline':False]
['text':'! @copydoc ::boost::container::flat_map::merge(flat_map<Key, T, C2, AllocatorOrContainer>&)','line_number':1248,'multiline':False]
['text':'! <b>Effects</b>: Erases the element pointed to by p.','line_number':1253,'multiline':False]
['text':'!','line_number':1254,'multiline':False]
['text':'! <b>Returns</b>: Returns an iterator pointing to the element immediately','line_number':1255,'multiline':False]
['text':'!   following q prior to the element being erased. If no such element exists,','line_number':1256,'multiline':False]
['text':'!   returns end().','line_number':1257,'multiline':False]
['text':'!','line_number':1258,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the elements with keys bigger than p','line_number':1259,'multiline':False]
['text':'!','line_number':1260,'multiline':False]
['text':'! <b>Note</b>: Invalidates elements with keys','line_number':1261,'multiline':False]
['text':'!   not less than the erased element.','line_number':1262,'multiline':False]
['text':'! <b>Effects</b>: If present, erases the element in the container with key equivalent to x.','line_number':1269,'multiline':False]
['text':'!','line_number':1270,'multiline':False]
['text':'! <b>Returns</b>: Returns the number of erased elements (0/1).','line_number':1271,'multiline':False]
['text':'!','line_number':1272,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus erasure time','line_number':1273,'multiline':False]
['text':'!   linear to the elements with bigger keys.','line_number':1274,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements in the range [first, last).','line_number':1278,'multiline':False]
['text':'!','line_number':1279,'multiline':False]
['text':'! <b>Returns</b>: Returns last.','line_number':1280,'multiline':False]
['text':'!','line_number':1281,'multiline':False]
['text':'! <b>Complexity</b>: size()*N where N is the distance from first to last.','line_number':1282,'multiline':False]
['text':'!','line_number':1283,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus erasure time','line_number':1284,'multiline':False]
['text':'!   linear to the elements with bigger keys.','line_number':1285,'multiline':False]
['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':1293,'multiline':False]
['text':'!','line_number':1294,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1295,'multiline':False]
['text':'!','line_number':1296,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1297,'multiline':False]
['text':'! <b>Effects</b>: erase(begin(),end()).','line_number':1303,'multiline':False]
['text':'!','line_number':1304,'multiline':False]
['text':'! <b>Postcondition</b>: size() == 0.','line_number':1305,'multiline':False]
['text':'!','line_number':1306,'multiline':False]
['text':'! <b>Complexity</b>: linear in size().','line_number':1307,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1311,'multiline':False]
['text':'','line_number':1312,'multiline':False]
['text':'                observers','line_number':1313,'multiline':False]
['text':'','line_number':1314,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1315,'multiline':False]
['text':'! <b>Effects</b>: Returns the comparison object out','line_number':1317,'multiline':False]
['text':'!   of which a was constructed.','line_number':1318,'multiline':False]
['text':'!','line_number':1319,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1320,'multiline':False]
['text':'! <b>Effects</b>: Returns an object of value_compare constructed out','line_number':1325,'multiline':False]
['text':'!   of the comparison object.','line_number':1326,'multiline':False]
['text':'!','line_number':1327,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1328,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1333,'multiline':False]
['text':'','line_number':1334,'multiline':False]
['text':'              map operations','line_number':1335,'multiline':False]
['text':'','line_number':1336,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1337,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':1339,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1340,'multiline':False]
['text':'!','line_number':1341,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1342,'multiline':False]
['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':1347,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1348,'multiline':False]
['text':'!','line_number':1349,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1350,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1355,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1356,'multiline':False]
['text':'!','line_number':1357,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':1358,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1359,'multiline':False]
['text':'!','line_number':1360,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1361,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1367,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1368,'multiline':False]
['text':'!','line_number':1369,'multiline':False]
['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':1370,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1371,'multiline':False]
['text':'!','line_number':1372,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1373,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':1379,'multiline':False]
['text':'!','line_number':1380,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':1381,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1386,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1387,'multiline':False]
['text':'!','line_number':1388,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':1389,'multiline':False]
['text':'!','line_number':1390,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':1391,'multiline':False]
['text':'Don't use find() != end optimization here as transparent comparators with key K might','line_number':1395,'multiline':False]
['text':'return a different range than key_type (which can only return a single element range)','line_number':1396,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':1399,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':1400,'multiline':False]
['text':'!','line_number':1401,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':1402,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1407,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1408,'multiline':False]
['text':'!','line_number':1409,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':1410,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':1411,'multiline':False]
['text':'!','line_number':1412,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':1413,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':1419,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1420,'multiline':False]
['text':'!','line_number':1421,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1422,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':1427,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':1428,'multiline':False]
['text':'!','line_number':1429,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1430,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1435,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1436,'multiline':False]
['text':'!','line_number':1437,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':1438,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1439,'multiline':False]
['text':'!','line_number':1440,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1441,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1447,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1448,'multiline':False]
['text':'!','line_number':1449,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':1450,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':1451,'multiline':False]
['text':'!','line_number':1452,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1453,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':1459,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1460,'multiline':False]
['text':'!','line_number':1461,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1462,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':1467,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':1468,'multiline':False]
['text':'!','line_number':1469,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1470,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1475,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1476,'multiline':False]
['text':'!','line_number':1477,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':1478,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1479,'multiline':False]
['text':'!','line_number':1480,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1481,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1487,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1488,'multiline':False]
['text':'!','line_number':1489,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':1490,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':1491,'multiline':False]
['text':'!','line_number':1492,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1493,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1499,'multiline':False]
['text':'!','line_number':1500,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1501,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1506,'multiline':False]
['text':'!','line_number':1507,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1508,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1513,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1514,'multiline':False]
['text':'!','line_number':1515,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1516,'multiline':False]
['text':'!','line_number':1517,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1518,'multiline':False]
['text':'Don't use lower_bound_range optimization here as transparent comparators with key K might','line_number':1522,'multiline':False]
['text':'return a different range than key_type (which can only return a single element range)','line_number':1523,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1526,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1527,'multiline':False]
['text':'!','line_number':1528,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1529,'multiline':False]
['text':'!','line_number':1530,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1531,'multiline':False]
['text':'Don't use lower_bound_range optimization here as transparent comparators with key K might','line_number':1535,'multiline':False]
['text':'return a different range than key_type (which can only return a single element range)','line_number':1536,'multiline':False]
['text':'! <b>Effects</b>: Extracts the internal sequence container.','line_number':1539,'multiline':False]
['text':'!','line_number':1540,'multiline':False]
['text':'! <b>Complexity</b>: Same as the move constructor of sequence_type, usually constant.','line_number':1541,'multiline':False]
['text':'!','line_number':1542,'multiline':False]
['text':'! <b>Postcondition</b>: this->empty()','line_number':1543,'multiline':False]
['text':'!','line_number':1544,'multiline':False]
['text':'! <b>Throws</b>: If secuence_type's move constructor throws ','line_number':1545,'multiline':False]
['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':1551,'multiline':False]
['text':'!   one passed externally using the move assignment. Erases non-unique elements.','line_number':1552,'multiline':False]
['text':'!','line_number':1553,'multiline':False]
['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(NlogN) with N = seq.size()','line_number':1554,'multiline':False]
['text':'!','line_number':1555,'multiline':False]
['text':'! <b>Throws</b>: If the comparison or the move constructor throws','line_number':1556,'multiline':False]
['text':'! <b>Requires</b>: seq shall be ordered according to this->compare()','line_number':1560,'multiline':False]
['text':'!   and shall contain unique elements.','line_number':1561,'multiline':False]
['text':'!','line_number':1562,'multiline':False]
['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':1563,'multiline':False]
['text':'!   one passed externally using the move assignment.','line_number':1564,'multiline':False]
['text':'!','line_number':1565,'multiline':False]
['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(1)','line_number':1566,'multiline':False]
['text':'!','line_number':1567,'multiline':False]
['text':'! <b>Throws</b>: If the move assignment throws','line_number':1568,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1572,'multiline':False]
['text':'!','line_number':1573,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1574,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1579,'multiline':False]
['text':'!','line_number':1580,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1581,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1586,'multiline':False]
['text':'!','line_number':1587,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1588,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1593,'multiline':False]
['text':'!','line_number':1594,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1595,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1600,'multiline':False]
['text':'!','line_number':1601,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1602,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1607,'multiline':False]
['text':'!','line_number':1608,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1609,'multiline':False]
['text':'! <b>Effects</b>: x.swap(y)','line_number':1614,'multiline':False]
['text':'!','line_number':1615,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1616,'multiline':False]
['text':' i->first is greater than or equivalent to k.','line_number':1626,'multiline':False]
['text':' i->first is greater than or equivalent to k.','line_number':1638,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1646,'multiline':False]
['text':' Compare','line_number':1660,'multiline':False]
['text':' Allocator','line_number':1665,'multiline':False]
['text':' Compare','line_number':1690,'multiline':False]
['text':' Allocator','line_number':1695,'multiline':False]
['text':'namespace container {','line_number':1715,'multiline':False]
['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1717,'multiline':False]
['text':'!specialization for optimizations','line_number':1718,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1730,'multiline':False]
['text':'! A flat_multimap is a kind of associative container that supports equivalent keys','line_number':1732,'multiline':False]
['text':'! (possibly containing multiple copies of the same key value) and provides for','line_number':1733,'multiline':False]
['text':'! fast retrieval of values of another type T based on the keys. ','line_number':1734,'multiline':False]
['text':'!','line_number':1735,'multiline':False]
['text':'! A flat_multimap satisfies all of the requirements of a container and of a reversible','line_number':1736,'multiline':False]
['text':'! container and of an associative container. For a','line_number':1737,'multiline':False]
['text':'! flat_multimap<Key,T> the key_type is Key and the value_type is std::pair<Key,T>','line_number':1738,'multiline':False]
['text':'! (unlike std::multimap<Key, T> which value_type is std::pair<<b>const</b> Key, T>).','line_number':1739,'multiline':False]
['text':'!','line_number':1740,'multiline':False]
['text':'! flat_multimap is similar to std::multimap but it's implemented by as an ordered sequence container.','line_number':1741,'multiline':False]
['text':'! The underlying sequence container is by default <i>vector</i> but it can also work','line_number':1742,'multiline':False]
['text':'! user-provided vector-like SequenceContainers (like <i>static_vector</i> or <i>small_vector</i>).','line_number':1743,'multiline':False]
['text':'!','line_number':1744,'multiline':False]
['text':'! Using vector-like sequence containers means that inserting a new element into a flat_multimap might invalidate','line_number':1745,'multiline':False]
['text':'! previous iterators and references (unless that sequence container is <i>stable_vector</i> or a similar','line_number':1746,'multiline':False]
['text':'! container that offers stable pointers and references). Similarly, erasing an element might invalidate','line_number':1747,'multiline':False]
['text':'! iterators and references pointing to elements that come after (their keys are bigger) the erased element.','line_number':1748,'multiline':False]
['text':'!','line_number':1749,'multiline':False]
['text':'! This container provides random-access iterators.','line_number':1750,'multiline':False]
['text':'!','line_number':1751,'multiline':False]
['text':'! \tparam Key is the key_type of the map','line_number':1752,'multiline':False]
['text':'! \tparam Value is the <code>mapped_type</code>','line_number':1753,'multiline':False]
['text':'! \tparam Compare is the ordering function for Keys (e.g. <i>std::less<Key></i>).','line_number':1754,'multiline':False]
['text':'! \tparam AllocatorOrContainer is either:','line_number':1755,'multiline':False]
['text':'!   - The allocator to allocate <code>value_type</code>s (e.g. <i>allocator< std::pair<Key, T> > </i>).','line_number':1756,'multiline':False]
['text':'!     (in this case <i>sequence_type</i> will be vector<value_type, AllocatorOrContainer>)','line_number':1757,'multiline':False]
['text':'!   - The SequenceContainer to be used as the underlying <i>sequence_type</i>. It must be a vector-like','line_number':1758,'multiline':False]
['text':'!     sequence container with random-access iterators.','line_number':1759,'multiline':False]
['text':'This is the real tree stored here. It's based on a movable pair','line_number':1775,'multiline':False]
['text':' flat tree representing flat_map','line_number':1782,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1812,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1816,'multiline':False]
['text':'','line_number':1817,'multiline':False]
['text':'                    types','line_number':1818,'multiline':False]
['text':'','line_number':1819,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1820,'multiline':False]
['text':'AllocatorOrContainer::value_type must be std::pair<Key, T>','line_number':1843,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1846,'multiline':False]
['text':'','line_number':1847,'multiline':False]
['text':'          construct/copy/destroy','line_number':1848,'multiline':False]
['text':'','line_number':1849,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1850,'multiline':False]
['text':'! <b>Effects</b>: Default constructs an empty flat_map.','line_number':1852,'multiline':False]
['text':'!','line_number':1853,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1854,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified allocator.','line_number':1861,'multiline':False]
['text':'!','line_number':1862,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1863,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison','line_number':1868,'multiline':False]
['text':'!   object .','line_number':1869,'multiline':False]
['text':'!','line_number':1870,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1871,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison','line_number':1876,'multiline':False]
['text':'!   object and allocator.','line_number':1877,'multiline':False]
['text':'!','line_number':1878,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1879,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap','line_number':1885,'multiline':False]
['text':'!   and inserts elements from the range [first ,last ).','line_number':1886,'multiline':False]
['text':'!','line_number':1887,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1888,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1889,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified','line_number':1896,'multiline':False]
['text':'!   allocator, and inserts elements from the range [first ,last ).','line_number':1897,'multiline':False]
['text':'!','line_number':1898,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1899,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1900,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison object','line_number':1907,'multiline':False]
['text':'!   and inserts elements from the range [first ,last ).','line_number':1908,'multiline':False]
['text':'!','line_number':1909,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1910,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1911,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison object','line_number':1918,'multiline':False]
['text':'!   and allocator, and inserts elements from the range [first ,last ).','line_number':1919,'multiline':False]
['text':'!','line_number':1920,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1921,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1922,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap','line_number':1929,'multiline':False]
['text':'! and inserts elements from the ordered range [first ,last). This function','line_number':1930,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1931,'multiline':False]
['text':'!','line_number':1932,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1933,'multiline':False]
['text':'!','line_number':1934,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1935,'multiline':False]
['text':'!','line_number':1936,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1937,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison object and','line_number':1944,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last). This function','line_number':1945,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1946,'multiline':False]
['text':'!','line_number':1947,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1948,'multiline':False]
['text':'!','line_number':1949,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1950,'multiline':False]
['text':'!','line_number':1951,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1952,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison object and','line_number':1959,'multiline':False]
['text':'! allocator, and inserts elements from the ordered range [first ,last). This function','line_number':1960,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1961,'multiline':False]
['text':'!','line_number':1962,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1963,'multiline':False]
['text':'!','line_number':1964,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1965,'multiline':False]
['text':'!','line_number':1966,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1967,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison object and','line_number':1974,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last). This function','line_number':1975,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1976,'multiline':False]
['text':'!','line_number':1977,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1978,'multiline':False]
['text':'!','line_number':1979,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1980,'multiline':False]
['text':'!','line_number':1981,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1982,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map and','line_number':1990,'multiline':False]
['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':1991,'multiline':False]
['text':'!','line_number':1992,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':1993,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1994,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified','line_number':2002,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':2003,'multiline':False]
['text':'!','line_number':2004,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':2005,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':2006,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':2015,'multiline':False]
['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':2016,'multiline':False]
['text':'!','line_number':2017,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':2018,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':2019,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_map using the specified comparison object and','line_number':2027,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':2028,'multiline':False]
['text':'!','line_number':2029,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':2030,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':2031,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap and','line_number':2040,'multiline':False]
['text':'! inserts elements from the ordered range [il.begin(), il.end()). This function','line_number':2041,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':2042,'multiline':False]
['text':'!','line_number':2043,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':2044,'multiline':False]
['text':'!','line_number':2045,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':2046,'multiline':False]
['text':'!','line_number':2047,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':2048,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison object and','line_number':2056,'multiline':False]
['text':'! inserts elements from the ordered range [il.begin(), il.end()). This function','line_number':2057,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':2058,'multiline':False]
['text':'!','line_number':2059,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':2060,'multiline':False]
['text':'!','line_number':2061,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':2062,'multiline':False]
['text':'!','line_number':2063,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':2064,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty flat_multimap using the specified comparison object and','line_number':2072,'multiline':False]
['text':'! allocator, and inserts elements from the ordered range [il.begin(), il.end()). This function','line_number':2073,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':2074,'multiline':False]
['text':'!','line_number':2075,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':2076,'multiline':False]
['text':'!','line_number':2077,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':2078,'multiline':False]
['text':'!','line_number':2079,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':2080,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a flat_multimap.','line_number':2090,'multiline':False]
['text':'!','line_number':2091,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':2092,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a flat_multimap. Constructs *this using x's resources.','line_number':2098,'multiline':False]
['text':'!','line_number':2099,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2100,'multiline':False]
['text':'!','line_number':2101,'multiline':False]
['text':'! <b>Postcondition</b>: x is emptied.','line_number':2102,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a flat_multimap using the specified allocator.','line_number':2109,'multiline':False]
['text':'!','line_number':2110,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':2111,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a flat_multimap using the specified allocator.','line_number':2117,'multiline':False]
['text':'!                 Constructs *this using x's resources.','line_number':2118,'multiline':False]
['text':'!','line_number':2119,'multiline':False]
['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise.','line_number':2120,'multiline':False]
['text':'! <b>Effects</b>: Makes *this a copy of x.','line_number':2126,'multiline':False]
['text':'!','line_number':2127,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':2128,'multiline':False]
['text':'! <b>Effects</b>: this->swap(x.get()).','line_number':2133,'multiline':False]
['text':'!','line_number':2134,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2135,'multiline':False]
['text':'! <b>Effects</b>: Assign content of il to *this','line_number':2144,'multiline':False]
['text':'!','line_number':2145,'multiline':False]
['text':'! <b>Complexity</b>: Linear in il.size().','line_number':2146,'multiline':False]
['text':'! <b>Effects</b>: Returns a copy of the allocator that','line_number':2156,'multiline':False]
['text':'!   was passed to the object's constructor.','line_number':2157,'multiline':False]
['text':'!','line_number':2158,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2159,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':2164,'multiline':False]
['text':'!','line_number':2165,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2166,'multiline':False]
['text':'!','line_number':2167,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2168,'multiline':False]
['text':'!','line_number':2169,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':2170,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':2175,'multiline':False]
['text':'!','line_number':2176,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':2177,'multiline':False]
['text':'!','line_number':2178,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2179,'multiline':False]
['text':'!','line_number':2180,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':2181,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2186,'multiline':False]
['text':'','line_number':2187,'multiline':False]
['text':'                iterators','line_number':2188,'multiline':False]
['text':'','line_number':2189,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2190,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the container.','line_number':2192,'multiline':False]
['text':'!','line_number':2193,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2194,'multiline':False]
['text':'!','line_number':2195,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2196,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':2201,'multiline':False]
['text':'!','line_number':2202,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2203,'multiline':False]
['text':'!','line_number':2204,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2205,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the end of the container.','line_number':2210,'multiline':False]
['text':'!','line_number':2211,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2212,'multiline':False]
['text':'!','line_number':2213,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2214,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':2219,'multiline':False]
['text':'!','line_number':2220,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2221,'multiline':False]
['text':'!','line_number':2222,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2223,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':2228,'multiline':False]
['text':'! of the reversed container.','line_number':2229,'multiline':False]
['text':'!','line_number':2230,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2231,'multiline':False]
['text':'!','line_number':2232,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2233,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':2238,'multiline':False]
['text':'! of the reversed container.','line_number':2239,'multiline':False]
['text':'!','line_number':2240,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2241,'multiline':False]
['text':'!','line_number':2242,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2243,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':2248,'multiline':False]
['text':'! of the reversed container.','line_number':2249,'multiline':False]
['text':'!','line_number':2250,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2251,'multiline':False]
['text':'!','line_number':2252,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2253,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':2258,'multiline':False]
['text':'! of the reversed container.','line_number':2259,'multiline':False]
['text':'!','line_number':2260,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2261,'multiline':False]
['text':'!','line_number':2262,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2263,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':2268,'multiline':False]
['text':'!','line_number':2269,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2270,'multiline':False]
['text':'!','line_number':2271,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2272,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':2277,'multiline':False]
['text':'!','line_number':2278,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2279,'multiline':False]
['text':'!','line_number':2280,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2281,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':2286,'multiline':False]
['text':'! of the reversed container.','line_number':2287,'multiline':False]
['text':'!','line_number':2288,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2289,'multiline':False]
['text':'!','line_number':2290,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2291,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':2296,'multiline':False]
['text':'! of the reversed container.','line_number':2297,'multiline':False]
['text':'!','line_number':2298,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2299,'multiline':False]
['text':'!','line_number':2300,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2301,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2306,'multiline':False]
['text':'','line_number':2307,'multiline':False]
['text':'                capacity','line_number':2308,'multiline':False]
['text':'','line_number':2309,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2310,'multiline':False]
['text':'! <b>Effects</b>: Returns true if the container contains no elements.','line_number':2312,'multiline':False]
['text':'!','line_number':2313,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2314,'multiline':False]
['text':'!','line_number':2315,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2316,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of the elements contained in the container.','line_number':2321,'multiline':False]
['text':'!','line_number':2322,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2323,'multiline':False]
['text':'!','line_number':2324,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2325,'multiline':False]
['text':'! <b>Effects</b>: Returns the largest possible size of the container.','line_number':2330,'multiline':False]
['text':'!','line_number':2331,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2332,'multiline':False]
['text':'!','line_number':2333,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2334,'multiline':False]
['text':'! <b>Effects</b>: Number of elements for which memory has been allocated.','line_number':2339,'multiline':False]
['text':'!   capacity() is always greater than or equal to size().','line_number':2340,'multiline':False]
['text':'!','line_number':2341,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2342,'multiline':False]
['text':'!','line_number':2343,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2344,'multiline':False]
['text':'! <b>Effects</b>: If n is less than or equal to capacity(), or the','line_number':2349,'multiline':False]
['text':'!   underlying container has no `reserve` member, this call has no','line_number':2350,'multiline':False]
['text':'!   effect. Otherwise, it is a request for allocation of additional memory.','line_number':2351,'multiline':False]
['text':'!   If the request is successful, then capacity() is greater than or equal to','line_number':2352,'multiline':False]
['text':'!   n; otherwise, capacity() is unchanged. In either case, size() is unchanged.','line_number':2353,'multiline':False]
['text':'!','line_number':2354,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation allocation throws or T's copy constructor throws.','line_number':2355,'multiline':False]
['text':'!','line_number':2356,'multiline':False]
['text':'! <b>Note</b>: If capacity() is less than "cnt", iterators and references to','line_number':2357,'multiline':False]
['text':'!   to values might be invalidated.','line_number':2358,'multiline':False]
['text':'! <b>Effects</b>: Tries to deallocate the excess of memory created','line_number':2363,'multiline':False]
['text':'    with previous allocations. The size of the vector is unchanged','line_number':2364,'multiline':False]
['text':'!','line_number':2365,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws, or T's copy constructor throws.','line_number':2366,'multiline':False]
['text':'!','line_number':2367,'multiline':False]
['text':'! <b>Complexity</b>: Linear to size().','line_number':2368,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::nth(size_type)','line_number':2373,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::nth(size_type) const','line_number':2378,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::index_of(iterator)','line_number':2383,'multiline':False]
['text':'! @copydoc ::boost::container::flat_set::index_of(const_iterator) const','line_number':2388,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':2395,'multiline':False]
['text':'!   std::forward<Args>(args)... and returns the iterator pointing to the','line_number':2396,'multiline':False]
['text':'!   newly inserted element.','line_number':2397,'multiline':False]
['text':'!','line_number':2398,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':2399,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':2400,'multiline':False]
['text':'!','line_number':2401,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2402,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':2408,'multiline':False]
['text':'!   std::forward<Args>(args)... in the container.','line_number':2409,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':2410,'multiline':False]
['text':'!','line_number':2411,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':2412,'multiline':False]
['text':'!   to the key of x.','line_number':2413,'multiline':False]
['text':'!','line_number':2414,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time (constant time if the value','line_number':2415,'multiline':False]
['text':'!   is to be inserted before p) plus linear insertion','line_number':2416,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':2417,'multiline':False]
['text':'!','line_number':2418,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2419,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':2428,'multiline':False]
['text':'','line_number':2441,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':2445,'multiline':False]
['text':'! <b>Effects</b>: Inserts x and returns the iterator pointing to the','line_number':2447,'multiline':False]
['text':'!   newly inserted element.','line_number':2448,'multiline':False]
['text':'!','line_number':2449,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':2450,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':2451,'multiline':False]
['text':'!','line_number':2452,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2453,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value constructed from x and returns','line_number':2460,'multiline':False]
['text':'!   the iterator pointing to the newly inserted element.','line_number':2461,'multiline':False]
['text':'!','line_number':2462,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus linear insertion','line_number':2463,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':2464,'multiline':False]
['text':'!','line_number':2465,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2466,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container.','line_number':2475,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':2476,'multiline':False]
['text':'!','line_number':2477,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':2478,'multiline':False]
['text':'!   to the key of x.','line_number':2479,'multiline':False]
['text':'!','line_number':2480,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time (constant time if the value','line_number':2481,'multiline':False]
['text':'!   is to be inserted before p) plus linear insertion','line_number':2482,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':2483,'multiline':False]
['text':'!','line_number':2484,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2485,'multiline':False]
['text':'! <b>Effects</b>: Inserts a value constructed from x in the container.','line_number':2493,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':2494,'multiline':False]
['text':'!','line_number':2495,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':2496,'multiline':False]
['text':'!   to the key of x.','line_number':2497,'multiline':False]
['text':'!','line_number':2498,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time (constant time if the value','line_number':2499,'multiline':False]
['text':'!   is to be inserted before p) plus linear insertion','line_number':2500,'multiline':False]
['text':'!   to the elements with bigger keys than x.','line_number':2501,'multiline':False]
['text':'!','line_number':2502,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2503,'multiline':False]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':2515,'multiline':False]
['text':'!','line_number':2516,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) .','line_number':2517,'multiline':False]
['text':'!','line_number':2518,'multiline':False]
['text':'! <b>Complexity</b>: N log(N).','line_number':2519,'multiline':False]
['text':'!','line_number':2520,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2521,'multiline':False]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':2526,'multiline':False]
['text':'!','line_number':2527,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':2528,'multiline':False]
['text':'!','line_number':2529,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) if and only','line_number':2530,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element. This','line_number':2531,'multiline':False]
['text':'!   function is more efficient than the normal range creation for ordered ranges.','line_number':2532,'multiline':False]
['text':'!','line_number':2533,'multiline':False]
['text':'! <b>Complexity</b>: Linear.','line_number':2534,'multiline':False]
['text':'!','line_number':2535,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2536,'multiline':False]
['text':'!','line_number':2537,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':2538,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()) .','line_number':2544,'multiline':False]
['text':'!','line_number':2545,'multiline':False]
['text':'! <b>Complexity</b>: N log(N).','line_number':2546,'multiline':False]
['text':'!','line_number':2547,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2548,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':2555,'multiline':False]
['text':'!','line_number':2556,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()) if and only','line_number':2557,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element. This','line_number':2558,'multiline':False]
['text':'!   function is more efficient than the normal range creation for ordered ranges.','line_number':2559,'multiline':False]
['text':'!','line_number':2560,'multiline':False]
['text':'! <b>Complexity</b>: Linear.','line_number':2561,'multiline':False]
['text':'!','line_number':2562,'multiline':False]
['text':'! <b>Note</b>: If an element is inserted it might invalidate elements.','line_number':2563,'multiline':False]
['text':'!','line_number':2564,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':2565,'multiline':False]
['text':'! <b>Requires</b>: this->get_allocator() == source.get_allocator().','line_number':2574,'multiline':False]
['text':'!','line_number':2575,'multiline':False]
['text':'! <b>Effects</b>: Move-inserts each element from source into *this a using','line_number':2576,'multiline':False]
['text':'!   the comparison object of *this.','line_number':2577,'multiline':False]
['text':'!','line_number':2578,'multiline':False]
['text':'! <b>Complexity</b>: Linear in this->size() + source.size().','line_number':2579,'multiline':False]
['text':'!','line_number':2580,'multiline':False]
['text':'! <b>Note</b>: Invalidates all iterators and references.','line_number':2581,'multiline':False]
['text':'! @copydoc ::boost::container::flat_multimap::merge(flat_multimap<Key, T, C2, AllocatorOrContainer>&)','line_number':2586,'multiline':False]
['text':'! @copydoc ::boost::container::flat_multimap::merge(flat_multimap<Key, T, C2, AllocatorOrContainer>&)','line_number':2591,'multiline':False]
['text':'! @copydoc ::boost::container::flat_multimap::merge(flat_map<Key, T, C2, AllocatorOrContainer>&)','line_number':2596,'multiline':False]
['text':'! <b>Effects</b>: Erases the element pointed to by p.','line_number':2601,'multiline':False]
['text':'!','line_number':2602,'multiline':False]
['text':'! <b>Returns</b>: Returns an iterator pointing to the element immediately','line_number':2603,'multiline':False]
['text':'!   following q prior to the element being erased. If no such element exists,','line_number':2604,'multiline':False]
['text':'!   returns end().','line_number':2605,'multiline':False]
['text':'!','line_number':2606,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the elements with keys bigger than p','line_number':2607,'multiline':False]
['text':'!','line_number':2608,'multiline':False]
['text':'! <b>Note</b>: Invalidates elements with keys','line_number':2609,'multiline':False]
['text':'!   not less than the erased element.','line_number':2610,'multiline':False]
['text':'! <b>Effects</b>: Erases all elements in the container with key equivalent to x.','line_number':2617,'multiline':False]
['text':'!','line_number':2618,'multiline':False]
['text':'! <b>Returns</b>: Returns the number of erased elements.','line_number':2619,'multiline':False]
['text':'!','line_number':2620,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus erasure time','line_number':2621,'multiline':False]
['text':'!   linear to the elements with bigger keys.','line_number':2622,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements in the range [first, last).','line_number':2626,'multiline':False]
['text':'!','line_number':2627,'multiline':False]
['text':'! <b>Returns</b>: Returns last.','line_number':2628,'multiline':False]
['text':'!','line_number':2629,'multiline':False]
['text':'! <b>Complexity</b>: size()*N where N is the distance from first to last.','line_number':2630,'multiline':False]
['text':'!','line_number':2631,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic search time plus erasure time','line_number':2632,'multiline':False]
['text':'!   linear to the elements with bigger keys.','line_number':2633,'multiline':False]
['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':2641,'multiline':False]
['text':'!','line_number':2642,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':2643,'multiline':False]
['text':'!','line_number':2644,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2645,'multiline':False]
['text':'! <b>Effects</b>: erase(begin(),end()).','line_number':2651,'multiline':False]
['text':'!','line_number':2652,'multiline':False]
['text':'! <b>Postcondition</b>: size() == 0.','line_number':2653,'multiline':False]
['text':'!','line_number':2654,'multiline':False]
['text':'! <b>Complexity</b>: linear in size().','line_number':2655,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2659,'multiline':False]
['text':'','line_number':2660,'multiline':False]
['text':'                observers','line_number':2661,'multiline':False]
['text':'','line_number':2662,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2663,'multiline':False]
['text':'! <b>Effects</b>: Returns the comparison object out','line_number':2665,'multiline':False]
['text':'!   of which a was constructed.','line_number':2666,'multiline':False]
['text':'!','line_number':2667,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2668,'multiline':False]
['text':'! <b>Effects</b>: Returns an object of value_compare constructed out','line_number':2673,'multiline':False]
['text':'!   of the comparison object.','line_number':2674,'multiline':False]
['text':'!','line_number':2675,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2676,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2681,'multiline':False]
['text':'','line_number':2682,'multiline':False]
['text':'              map operations','line_number':2683,'multiline':False]
['text':'','line_number':2684,'multiline':False]
['text':'////////////////////////////////////////////','line_number':2685,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':2687,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2688,'multiline':False]
['text':'!','line_number':2689,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2690,'multiline':False]
['text':'! <b>Returns</b>: An const_iterator pointing to an element with the key','line_number':2695,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2696,'multiline':False]
['text':'!','line_number':2697,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2698,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2703,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2704,'multiline':False]
['text':'!','line_number':2705,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':2706,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2707,'multiline':False]
['text':'!','line_number':2708,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2709,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2715,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2716,'multiline':False]
['text':'!','line_number':2717,'multiline':False]
['text':'! <b>Returns</b>: An const_iterator pointing to an element with the key','line_number':2718,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2719,'multiline':False]
['text':'!','line_number':2720,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2721,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':2727,'multiline':False]
['text':'!','line_number':2728,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':2729,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2734,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2735,'multiline':False]
['text':'!','line_number':2736,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':2737,'multiline':False]
['text':'!','line_number':2738,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':2739,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':2745,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':2746,'multiline':False]
['text':'!','line_number':2747,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':2748,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2753,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2754,'multiline':False]
['text':'!','line_number':2755,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':2756,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':2757,'multiline':False]
['text':'!','line_number':2758,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':2759,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':2765,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2766,'multiline':False]
['text':'!','line_number':2767,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2768,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':2773,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2774,'multiline':False]
['text':'!','line_number':2775,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2776,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2781,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2782,'multiline':False]
['text':'!','line_number':2783,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':2784,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2785,'multiline':False]
['text':'!','line_number':2786,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2787,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2793,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2794,'multiline':False]
['text':'!','line_number':2795,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':2796,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2797,'multiline':False]
['text':'!','line_number':2798,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2799,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':2805,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2806,'multiline':False]
['text':'!','line_number':2807,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2808,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':2813,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':2814,'multiline':False]
['text':'!','line_number':2815,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2816,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2821,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2822,'multiline':False]
['text':'!','line_number':2823,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':2824,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2825,'multiline':False]
['text':'!','line_number':2826,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2827,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2833,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2834,'multiline':False]
['text':'!','line_number':2835,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':2836,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':2837,'multiline':False]
['text':'!','line_number':2838,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2839,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2845,'multiline':False]
['text':'!','line_number':2846,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2847,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2852,'multiline':False]
['text':'!','line_number':2853,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2854,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2859,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2860,'multiline':False]
['text':'!','line_number':2861,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2862,'multiline':False]
['text':'!','line_number':2863,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2864,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2870,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2871,'multiline':False]
['text':'!','line_number':2872,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2873,'multiline':False]
['text':'!','line_number':2874,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2875,'multiline':False]
['text':'! <b>Effects</b>: Extracts the internal sequence container.','line_number':2881,'multiline':False]
['text':'!','line_number':2882,'multiline':False]
['text':'! <b>Complexity</b>: Same as the move constructor of sequence_type, usually constant.','line_number':2883,'multiline':False]
['text':'!','line_number':2884,'multiline':False]
['text':'! <b>Postcondition</b>: this->empty()','line_number':2885,'multiline':False]
['text':'!','line_number':2886,'multiline':False]
['text':'! <b>Throws</b>: If secuence_type's move constructor throws ','line_number':2887,'multiline':False]
['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':2894,'multiline':False]
['text':'!   one passed externally using the move assignment.','line_number':2895,'multiline':False]
['text':'!','line_number':2896,'multiline':False]
['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(NlogN) with N = seq.size()','line_number':2897,'multiline':False]
['text':'!','line_number':2898,'multiline':False]
['text':'! <b>Throws</b>: If the comparison or the move constructor throws','line_number':2899,'multiline':False]
['text':'! <b>Requires</b>: seq shall be ordered according to this->compare().','line_number':2903,'multiline':False]
['text':'!','line_number':2904,'multiline':False]
['text':'! <b>Effects</b>: Discards the internally hold sequence container and adopts the','line_number':2905,'multiline':False]
['text':'!   one passed externally using the move assignment.','line_number':2906,'multiline':False]
['text':'!','line_number':2907,'multiline':False]
['text':'! <b>Complexity</b>: Assuming O(1) move assignment, O(1)','line_number':2908,'multiline':False]
['text':'!','line_number':2909,'multiline':False]
['text':'! <b>Throws</b>: If the move assignment throws','line_number':2910,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':2914,'multiline':False]
['text':'!','line_number':2915,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2916,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':2921,'multiline':False]
['text':'!','line_number':2922,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2923,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':2928,'multiline':False]
['text':'!','line_number':2929,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2930,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':2935,'multiline':False]
['text':'!','line_number':2936,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2937,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':2942,'multiline':False]
['text':'!','line_number':2943,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2944,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':2949,'multiline':False]
['text':'!','line_number':2950,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2951,'multiline':False]
['text':'! <b>Effects</b>: x.swap(y)','line_number':2956,'multiline':False]
['text':'!','line_number':2957,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2958,'multiline':False]
['text':' Compare','line_number':2975,'multiline':False]
['text':' Allocator','line_number':2980,'multiline':False]
['text':' Compare','line_number':3005,'multiline':False]
['text':' Allocator','line_number':3010,'multiline':False]
['text':'!has_trivial_destructor_after_move<> == true_type','line_number':3034,'multiline':False]
['text':'!specialization for optimizations','line_number':3035,'multiline':False]
['text':'namespace boost {','line_number':3045,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':3047,'multiline':False]
['text':' BOOST_CONTAINER_FLAT_MAP_HPP','line_number':3051,'multiline':False]
