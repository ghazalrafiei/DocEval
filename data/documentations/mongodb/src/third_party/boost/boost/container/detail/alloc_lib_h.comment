['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'!An forward iterator to traverse the elements of a memory chain container.','line_number':24,'multiline':True]
['text':'!An forward iterator to traverse the elements of a memory chain container.','line_number':31,'multiline':True]
['text':'!Memory chain: A container holding memory portions allocated by boost_cont_multialloc_nodes
   and boost_cont_multialloc_arrays functions.','line_number':37,'multiline':True]
['text':'!Advances the iterator one position so that it points to the next element in the memory chain','line_number':46,'multiline':True]
['text':'!Returns the address of the memory chain currently pointed by the iterator','line_number':49,'multiline':True]
['text':'!Initializer for an iterator pointing to the position before the first element','line_number':52,'multiline':True]
['text':'!Initializer for an iterator pointing to the first element','line_number':55,'multiline':True]
['text':'!Initializer for an iterator pointing to the last element','line_number':58,'multiline':True]
['text':'!Initializer for an iterator pointing to one past the last element (end iterator)','line_number':61,'multiline':True]
['text':'!True if IT is the end iterator, false otherwise','line_number':64,'multiline':True]
['text':'!The address of the first memory portion hold by the memory chain','line_number':67,'multiline':True]
['text':'!The address of the last memory portion hold by the memory chain','line_number':70,'multiline':True]
['text':'!The number of memory portions hold by the memory chain','line_number':73,'multiline':True]
['text':'!Initializes the memory chain from the first memory portion, the last memory
   portion and number of portions obtained from another memory chain','line_number':76,'multiline':True]
['text':'','line_number':82,'multiline':True]
['text':'!Default initializes a memory chain. Postconditions: begin iterator is end iterator,
   the number of portions is zero.','line_number':84,'multiline':True]
['text':'','line_number':88,'multiline':True]
['text':'!True if the memory chain is empty (holds no memory portions','line_number':90,'multiline':True]
['text':'','line_number':93,'multiline':True]
['text':'!Inserts a new memory portions in the front of the chain','line_number':95,'multiline':True]
['text':'','line_number':105,'multiline':True]
['text':'!Inserts a new memory portions in the back of the chain','line_number':107,'multiline':True]
['text':'','line_number':121,'multiline':True]
['text':'!Erases the memory portion after the portion pointed by BEFORE_IT from the memory chain','line_number':123,'multiline':True]
['text':'!Precondition: BEFORE_IT must be a valid iterator of the memory chain and it can't be the end iterator','line_number':124,'multiline':True]
['text':'','line_number':136,'multiline':True]
['text':'!Erases the first portion from the memory chain.
   Precondition: the memory chain must not be empty','line_number':138,'multiline':True]
['text':'','line_number':151,'multiline':True]
['text':'!Joins two memory chains inserting the portions of the second chain at the back of the first chain','line_number':153,'multiline':True]
['text':'
#define BOOST_CONTAINER_MEMCHAIN_SPLICE_BACK(PMEMCHAIN, PMEMCHAIN2)\
   do{\
      boost_cont_memchain *____chain____  = (PMEMCHAIN);\
      boost_cont_memchain *____chain2____ = (PMEMCHAIN2);\
      if(!____chain2____->root_node.next_node_ptr){\
         break;\
      }\
      else if(!____chain____->first_mem){\
         ____chain____->first_mem  = ____chain2____->first_mem;\
         ____chain____->last_node_ptr = ____chain2____->last_node_ptr;\
         ____chain____->num_mem  = ____chain2____->num_mem;\
         BOOST_CONTAINER_MEMCHAIN_INIT(*____chain2____);\
      }\
      else{\
         ____chain____->last_node_ptr->next_node_ptr = ____chain2____->first_mem;\
         ____chain____->last_node_ptr = ____chain2____->last_node_ptr;\
         ____chain____->num_mem += ____chain2____->num_mem;\
      }\
   }while(0)\','line_number':154,'multiline':True]
['text':'','line_number':174,'multiline':True]
['text':'!Joins two memory chains inserting the portions of the second chain at the back of the first chain','line_number':176,'multiline':True]
['text':'','line_number':195,'multiline':True]
['text':'!Indicates the all elements allocated by boost_cont_multialloc_nodes or boost_cont_multialloc_arrays
   must be contiguous.','line_number':197,'multiline':True]
['text':'!Indicates the number of contiguous elements allocated by boost_cont_multialloc_nodes or boost_cont_multialloc_arrays
   should be selected by those functions.','line_number':201,'multiline':True]
['text':' constants for allocation commands','line_number':216,'multiline':False]
['text':'   BOOST_CONTAINER_ZERO_MEMORY           = 0X20,','line_number':222,'multiline':False]
['text':'#define BOOST_CONTAINER_DLMALLOC_FOOTERS','line_number':228,'multiline':False]
['text':'extern "C" {','line_number':306,'multiline':False]
['text':'#define BOOST_CONTAINERDLMALLOC__EXT_H','line_number':314,'multiline':False]
