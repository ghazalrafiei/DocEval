['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2008-2013. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'!An STL node allocator that uses a modified DlMalloc as memory','line_number':39,'multiline':False]
['text':'!source.','line_number':40,'multiline':False]
['text':'!','line_number':41,'multiline':False]
['text':'!This node allocator shares a segregated storage between all instances','line_number':42,'multiline':False]
['text':'!of node_allocator with equal sizeof(T).','line_number':43,'multiline':False]
['text':'!','line_number':44,'multiline':False]
['text':'!NodesPerBlock is the number of nodes allocated at once when the allocator','line_number':45,'multiline':False]
['text':'!runs out of nodes','line_number':46,'multiline':False]
['text':'! If Version is 1, the allocator is a STL conforming allocator. If Version is 2,','line_number':60,'multiline':False]
['text':'! the allocator offers advanced expand in place and burst allocation capabilities.','line_number':61,'multiline':False]
['text':'-------','line_number':72,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':92,'multiline':False]
['text':'!Obtains node_allocator from','line_number':94,'multiline':False]
['text':'!node_allocator','line_number':95,'multiline':False]
['text':'!Not assignable from related node_allocator','line_number':108,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':112,'multiline':False]
['text':'!Default constructor','line_number':116,'multiline':False]
['text':'!Copy constructor from other node_allocator.','line_number':120,'multiline':False]
['text':'!Copy constructor from related node_allocator.','line_number':124,'multiline':False]
['text':'!Destructor','line_number':134,'multiline':False]
['text':'!Returns the number of elements that could be allocated.','line_number':138,'multiline':False]
['text':'!Never throws','line_number':139,'multiline':False]
['text':'!Allocate memory for an array of count elements.','line_number':143,'multiline':False]
['text':'!Throws bad_alloc if there is no enough memory','line_number':144,'multiline':False]
['text':'!Deallocate allocated memory.','line_number':164,'multiline':False]
['text':'!Never throws','line_number':165,'multiline':False]
['text':'!Deallocates all free blocks of the pool','line_number':180,'multiline':False]
['text':'!Returns maximum the number of objects the previously allocated memory','line_number':199,'multiline':False]
['text':'!pointed by p can hold.','line_number':200,'multiline':False]
['text':'!Allocates just one object. Memory allocated with this function','line_number':207,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':208,'multiline':False]
['text':'!Throws bad_alloc if there is no enough memory','line_number':209,'multiline':False]
['text':'!Allocates many elements of size == 1.','line_number':219,'multiline':False]
['text':'!Elements must be individually deallocated with deallocate_one()','line_number':220,'multiline':False]
['text':'!Deallocates memory previously allocated with allocate_one().','line_number':232,'multiline':False]
['text':'!You should never use deallocate_one to deallocate memory allocated','line_number':233,'multiline':False]
['text':'!with other functions different from allocate_one(). Never throws','line_number':234,'multiline':False]
['text':'!Allocates many elements of size elem_size.','line_number':254,'multiline':False]
['text':'!Elements must be individually deallocated with deallocate()','line_number':255,'multiline':False]
['text':'!Allocates n_elements elements, each one of size elem_sizes[i]','line_number':270,'multiline':False]
['text':'!Elements must be individually deallocated with deallocate()','line_number':271,'multiline':False]
['text':'!Swaps allocators. Does not throw. If each allocator is placed in a','line_number':297,'multiline':False]
['text':'!different memory segment, the result is undefined.','line_number':298,'multiline':False]
['text':'!An allocator always compares to true, as memory allocated with one','line_number':302,'multiline':False]
['text':'!instance can be deallocated by another instance','line_number':303,'multiline':False]
['text':'!An allocator always compares to false, as memory allocated with one','line_number':307,'multiline':False]
['text':'!instance can be deallocated by another instance','line_number':308,'multiline':False]
['text':'namespace container {','line_number':336,'multiline':False]
['text':'namespace boost {','line_number':337,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_POOLED_NODE_ALLOCATOR_HPP','line_number':341,'multiline':False]
