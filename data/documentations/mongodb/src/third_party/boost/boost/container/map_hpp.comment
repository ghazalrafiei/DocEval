['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':' container','line_number':24,'multiline':False]
['text':'new_allocator','line_number':26,'multiline':False]
['text':' container/detail','line_number':28,'multiline':False]
['text':' move','line_number':36,'multiline':False]
['text':' move/detail','line_number':39,'multiline':False]
['text':' intrusive/detail','line_number':44,'multiline':False]
['text':'pair','line_number':45,'multiline':False]
['text':'less, equal','line_number':46,'multiline':False]
['text':' other','line_number':47,'multiline':False]
['text':' std','line_number':50,'multiline':False]
['text':'! A map is a kind of associative container that supports unique keys (contains at','line_number':60,'multiline':False]
['text':'! most one of each key value) and provides for fast retrieval of values of another','line_number':61,'multiline':False]
['text':'! type T based on the keys. The map class supports bidirectional iterators.','line_number':62,'multiline':False]
['text':'!','line_number':63,'multiline':False]
['text':'! A map satisfies all of the requirements of a container and of a reversible','line_number':64,'multiline':False]
['text':'! container and of an associative container. The <code>value_type</code> stored','line_number':65,'multiline':False]
['text':'! by this container is the value_type is std::pair<const Key, T>.','line_number':66,'multiline':False]
['text':'!','line_number':67,'multiline':False]
['text':'! \tparam Key is the key_type of the map','line_number':68,'multiline':False]
['text':'! \tparam T is the <code>mapped_type</code>','line_number':69,'multiline':False]
['text':'! \tparam Compare is the ordering function for Keys (e.g. <i>std::less<Key></i>).','line_number':70,'multiline':False]
['text':'! \tparam Allocator is the allocator to allocate the <code>value_type</code>s','line_number':71,'multiline':False]
['text':'!   (e.g. <i>allocator< std::pair<const Key, T> > </i>).','line_number':72,'multiline':False]
['text':'! \tparam Options is an packed option type generated using using boost::container::tree_assoc_options.','line_number':73,'multiline':False]
['text':'/@cond','line_number':80,'multiline':False]
['text':'/@endcond','line_number':85,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':97,'multiline':False]
['text':'////////////////////////////////////////////','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'                    types','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':'////////////////////////////////////////////','line_number':104,'multiline':False]
['text':'typedef std::pair<key_type, mapped_type>                                               nonconst_value_type;','line_number':124,'multiline':False]
['text':'allocator_type::value_type type must be std::pair<CONST Key, T>','line_number':133,'multiline':False]
['text':'////////////////////////////////////////////','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':'          construct/copy/destroy','line_number':138,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':'////////////////////////////////////////////','line_number':140,'multiline':False]
['text':'! <b>Effects</b>: Default constructs an empty map.','line_number':142,'multiline':False]
['text':'!','line_number':143,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':144,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object','line_number':151,'multiline':False]
['text':'! and allocator.','line_number':152,'multiline':False]
['text':'!','line_number':153,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':154,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object.','line_number':159,'multiline':False]
['text':'!','line_number':160,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':161,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified allocator.','line_number':166,'multiline':False]
['text':'!','line_number':167,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':168,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map and','line_number':173,'multiline':False]
['text':'! inserts elements from the range [first ,last ).','line_number':174,'multiline':False]
['text':'!','line_number':175,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':176,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':177,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified ','line_number':183,'multiline':False]
['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':184,'multiline':False]
['text':'!','line_number':185,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':186,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':187,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':193,'multiline':False]
['text':'! inserts elements from the range [first ,last ).','line_number':194,'multiline':False]
['text':'!','line_number':195,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':196,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':197,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':203,'multiline':False]
['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':204,'multiline':False]
['text':'!','line_number':205,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':206,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':207,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map and','line_number':213,'multiline':False]
['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':214,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':215,'multiline':False]
['text':'!','line_number':216,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':217,'multiline':False]
['text':'! unique values.','line_number':218,'multiline':False]
['text':'!','line_number':219,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':220,'multiline':False]
['text':'!','line_number':221,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':222,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':228,'multiline':False]
['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':229,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':230,'multiline':False]
['text':'!','line_number':231,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':232,'multiline':False]
['text':'! unique values.','line_number':233,'multiline':False]
['text':'!','line_number':234,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':235,'multiline':False]
['text':'!','line_number':236,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':237,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':243,'multiline':False]
['text':'! allocator, and inserts elements from the ordered unique range [first ,last). This function','line_number':244,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':245,'multiline':False]
['text':'!','line_number':246,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':247,'multiline':False]
['text':'! unique values.','line_number':248,'multiline':False]
['text':'!','line_number':249,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':250,'multiline':False]
['text':'!','line_number':251,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':252,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified allocator object and','line_number':259,'multiline':False]
['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':260,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':261,'multiline':False]
['text':'!','line_number':262,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':263,'multiline':False]
['text':'! unique values.','line_number':264,'multiline':False]
['text':'!','line_number':265,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':266,'multiline':False]
['text':'!','line_number':267,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':268,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map and','line_number':276,'multiline':False]
['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':277,'multiline':False]
['text':'!','line_number':278,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted according','line_number':279,'multiline':False]
['text':'! to the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':280,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':285,'multiline':False]
['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':286,'multiline':False]
['text':'!','line_number':287,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':288,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':289,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified','line_number':294,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':295,'multiline':False]
['text':'!','line_number':296,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':297,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':298,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':303,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':304,'multiline':False]
['text':'!','line_number':305,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':306,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':307,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map and inserts elements from the ordered unique range [il.begin(), il.end()).','line_number':312,'multiline':False]
['text':'! This function is more efficient than the normal range creation for ordered ranges.','line_number':313,'multiline':False]
['text':'!','line_number':314,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':315,'multiline':False]
['text':'! unique values.','line_number':316,'multiline':False]
['text':'!','line_number':317,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':318,'multiline':False]
['text':'!','line_number':319,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':320,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object,','line_number':325,'multiline':False]
['text':'!  and inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':326,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':327,'multiline':False]
['text':'!','line_number':328,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':329,'multiline':False]
['text':'! unique values.','line_number':330,'multiline':False]
['text':'!','line_number':331,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':332,'multiline':False]
['text':'!','line_number':333,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':334,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':339,'multiline':False]
['text':'! allocator, and inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':340,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':341,'multiline':False]
['text':'!','line_number':342,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':343,'multiline':False]
['text':'! unique values.','line_number':344,'multiline':False]
['text':'!','line_number':345,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':346,'multiline':False]
['text':'!','line_number':347,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':348,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a map.','line_number':356,'multiline':False]
['text':'!','line_number':357,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':358,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a map. Constructs *this using x's resources.','line_number':363,'multiline':False]
['text':'!','line_number':364,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':365,'multiline':False]
['text':'!','line_number':366,'multiline':False]
['text':'! <b>Postcondition</b>: x is emptied.','line_number':367,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a map using the specified allocator.','line_number':373,'multiline':False]
['text':'!','line_number':374,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':375,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a map using the specified allocator.','line_number':380,'multiline':False]
['text':'!                 Constructs *this using x's resources.','line_number':381,'multiline':False]
['text':'!','line_number':382,'multiline':False]
['text':'! <b>Complexity</b>: Constant if x == x.get_allocator(), linear otherwise.','line_number':383,'multiline':False]
['text':'!','line_number':384,'multiline':False]
['text':'! <b>Postcondition</b>: x is emptied.','line_number':385,'multiline':False]
['text':'! <b>Effects</b>: Makes *this a copy of x.','line_number':390,'multiline':False]
['text':'!','line_number':391,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':392,'multiline':False]
['text':'! <b>Effects</b>: this->swap(x.get()).','line_number':396,'multiline':False]
['text':'!','line_number':397,'multiline':False]
['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':398,'multiline':False]
['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':399,'multiline':False]
['text':'!','line_number':400,'multiline':False]
['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':401,'multiline':False]
['text':'!   propagate_on_container_move_assignment is true or','line_number':402,'multiline':False]
['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':403,'multiline':False]
['text':'! <b>Effects</b>: Assign content of il to *this.','line_number':411,'multiline':False]
['text':'!','line_number':412,'multiline':False]
['text':'! <b>Effects</b>: Returns a copy of the allocator that','line_number':423,'multiline':False]
['text':'!   was passed to the object's constructor.','line_number':424,'multiline':False]
['text':'!','line_number':425,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':426,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':429,'multiline':False]
['text':'!','line_number':430,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':431,'multiline':False]
['text':'!','line_number':432,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':433,'multiline':False]
['text':'!','line_number':434,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':435,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':438,'multiline':False]
['text':'!','line_number':439,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':440,'multiline':False]
['text':'!','line_number':441,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':442,'multiline':False]
['text':'!','line_number':443,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':444,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the container.','line_number':447,'multiline':False]
['text':'!','line_number':448,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':449,'multiline':False]
['text':'!','line_number':450,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':451,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':454,'multiline':False]
['text':'!','line_number':455,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':456,'multiline':False]
['text':'!','line_number':457,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':458,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':461,'multiline':False]
['text':'!','line_number':462,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':463,'multiline':False]
['text':'!','line_number':464,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':465,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the end of the container.','line_number':468,'multiline':False]
['text':'!','line_number':469,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':470,'multiline':False]
['text':'!','line_number':471,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':472,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':475,'multiline':False]
['text':'!','line_number':476,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':477,'multiline':False]
['text':'!','line_number':478,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':479,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':482,'multiline':False]
['text':'!','line_number':483,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':484,'multiline':False]
['text':'!','line_number':485,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':486,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':489,'multiline':False]
['text':'! of the reversed container.','line_number':490,'multiline':False]
['text':'!','line_number':491,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':492,'multiline':False]
['text':'!','line_number':493,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':494,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':497,'multiline':False]
['text':'! of the reversed container.','line_number':498,'multiline':False]
['text':'!','line_number':499,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':500,'multiline':False]
['text':'!','line_number':501,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':502,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':505,'multiline':False]
['text':'! of the reversed container.','line_number':506,'multiline':False]
['text':'!','line_number':507,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':508,'multiline':False]
['text':'!','line_number':509,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':510,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':513,'multiline':False]
['text':'! of the reversed container.','line_number':514,'multiline':False]
['text':'!','line_number':515,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':516,'multiline':False]
['text':'!','line_number':517,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':518,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':521,'multiline':False]
['text':'! of the reversed container.','line_number':522,'multiline':False]
['text':'!','line_number':523,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':524,'multiline':False]
['text':'!','line_number':525,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':526,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':529,'multiline':False]
['text':'! of the reversed container.','line_number':530,'multiline':False]
['text':'!','line_number':531,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':532,'multiline':False]
['text':'!','line_number':533,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':534,'multiline':False]
['text':'! <b>Effects</b>: Returns true if the container contains no elements.','line_number':537,'multiline':False]
['text':'!','line_number':538,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':539,'multiline':False]
['text':'!','line_number':540,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':541,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of the elements contained in the container.','line_number':544,'multiline':False]
['text':'!','line_number':545,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':546,'multiline':False]
['text':'!','line_number':547,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':548,'multiline':False]
['text':'! <b>Effects</b>: Returns the largest possible size of the container.','line_number':551,'multiline':False]
['text':'!','line_number':552,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':553,'multiline':False]
['text':'!','line_number':554,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':555,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':558,'multiline':False]
['text':'! <b>Effects</b>: If there is no key equivalent to x in the map, inserts','line_number':561,'multiline':False]
['text':'! value_type(x, T()) into the map.','line_number':562,'multiline':False]
['text':'!','line_number':563,'multiline':False]
['text':'! <b>Returns</b>: A reference to the mapped_type corresponding to x in *this.','line_number':564,'multiline':False]
['text':'!','line_number':565,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':566,'multiline':False]
['text':'! <b>Effects</b>: If there is no key equivalent to x in the map, inserts','line_number':569,'multiline':False]
['text':'! value_type(boost::move(x), T()) into the map (the key is move-constructed)','line_number':570,'multiline':False]
['text':'!','line_number':571,'multiline':False]
['text':'! <b>Returns</b>: A reference to the mapped_type corresponding to x in *this.','line_number':572,'multiline':False]
['text':'!','line_number':573,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':574,'multiline':False]
['text':'in compilers like GCC 3.4, we can't catch temporaries','line_number':577,'multiline':False]
['text':'! <b>Effects</b>: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':584,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':585,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, forward<M>(obj)).','line_number':586,'multiline':False]
['text':'! ','line_number':587,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':588,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':589,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':590,'multiline':False]
['text':'!','line_number':591,'multiline':False]
['text':'! <b>Returns</b>: The bool component is true if the insertion took place and false if the assignment','line_number':592,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':593,'multiline':False]
['text':'!','line_number':594,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in the size of the container.','line_number':595,'multiline':False]
['text':'! <b>Effects</b>: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':600,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':601,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, move(obj)).','line_number':602,'multiline':False]
['text':'! ','line_number':603,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':604,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':605,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':606,'multiline':False]
['text':'!','line_number':607,'multiline':False]
['text':'! <b>Returns</b>: The bool component is true if the insertion took place and false if the assignment','line_number':608,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':609,'multiline':False]
['text':'!','line_number':610,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in the size of the container.','line_number':611,'multiline':False]
['text':'! <b>Effects</b>: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':616,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':617,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, forward<M>(obj)) and the new element','line_number':618,'multiline':False]
['text':'! to the container as close as possible to the position just before hint.','line_number':619,'multiline':False]
['text':'! ','line_number':620,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':621,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':622,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':623,'multiline':False]
['text':'!','line_number':624,'multiline':False]
['text':'! <b>Returns</b>: The bool component is true if the insertion took place and false if the assignment','line_number':625,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':626,'multiline':False]
['text':'!','line_number':627,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in the size of the container in general, but amortized constant if','line_number':628,'multiline':False]
['text':'! the new element is inserted just before hint.','line_number':629,'multiline':False]
['text':'! <b>Effects</b>: If a key equivalent to k already exists in the container, assigns forward<M>(obj)','line_number':634,'multiline':False]
['text':'! to the mapped_type corresponding to the key k. If the key does not exist, inserts the new value','line_number':635,'multiline':False]
['text':'! as if by insert, constructing it from value_type(k, move(obj)) and the new element','line_number':636,'multiline':False]
['text':'! to the container as close as possible to the position just before hint.','line_number':637,'multiline':False]
['text':'! ','line_number':638,'multiline':False]
['text':'! No iterators or references are invalidated. If the insertion is successful, pointers and references','line_number':639,'multiline':False]
['text':'! to the element obtained while it is held in the node handle are invalidated, and pointers and','line_number':640,'multiline':False]
['text':'! references obtained to that element before it was extracted become valid.','line_number':641,'multiline':False]
['text':'!','line_number':642,'multiline':False]
['text':'! <b>Returns</b>: The bool component is true if the insertion took place and false if the assignment','line_number':643,'multiline':False]
['text':'!   took place. The iterator component is pointing at the element that was inserted or updated.','line_number':644,'multiline':False]
['text':'!','line_number':645,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in the size of the container in general, but amortized constant if','line_number':646,'multiline':False]
['text':'! the new element is inserted just before hint.','line_number':647,'multiline':False]
['text':'! <b>Returns</b>: A reference to the element whose key is equivalent to x.','line_number':652,'multiline':False]
['text':'! Throws: An exception object of type out_of_range if no such element is present.','line_number':653,'multiline':False]
['text':'! <b>Complexity</b>: logarithmic.','line_number':654,'multiline':False]
['text':'! <b>Returns</b>: A reference to the element whose key is equivalent to x.','line_number':664,'multiline':False]
['text':'! Throws: An exception object of type out_of_range if no such element is present.','line_number':665,'multiline':False]
['text':'! <b>Complexity</b>: logarithmic.','line_number':666,'multiline':False]
['text':'////////////////////////////////////////////','line_number':676,'multiline':False]
['text':'','line_number':677,'multiline':False]
['text':'                modifiers','line_number':678,'multiline':False]
['text':'','line_number':679,'multiline':False]
['text':'////////////////////////////////////////////','line_number':680,'multiline':False]
['text':'! <b>Effects</b>: Inserts x if and only if there is no element in the container','line_number':682,'multiline':False]
['text':'!   with key equivalent to the key of x.','line_number':683,'multiline':False]
['text':'!','line_number':684,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':685,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':686,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':687,'multiline':False]
['text':'!','line_number':688,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':689,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a new value from x if and only if there is','line_number':693,'multiline':False]
['text':'!   no element in the container with key equivalent to the key of x.','line_number':694,'multiline':False]
['text':'!','line_number':695,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':696,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':697,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':698,'multiline':False]
['text':'!','line_number':699,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':700,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value_type created from the pair if and only if','line_number':704,'multiline':False]
['text':'! there is no element in the container  with key equivalent to the key of x.','line_number':705,'multiline':False]
['text':'!','line_number':706,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':707,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':708,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':709,'multiline':False]
['text':'!','line_number':710,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':711,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container if and only if there is','line_number':725,'multiline':False]
['text':'!   no element in the container with key equivalent to the key of x.','line_number':726,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':727,'multiline':False]
['text':'!','line_number':728,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':729,'multiline':False]
['text':'!   to the key of x.','line_number':730,'multiline':False]
['text':'!','line_number':731,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':732,'multiline':False]
['text':'!   is inserted right before p.','line_number':733,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container if and only if there is','line_number':737,'multiline':False]
['text':'!   no element in the container with key equivalent to the key of x.','line_number':738,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':739,'multiline':False]
['text':'!','line_number':740,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':741,'multiline':False]
['text':'!   to the key of x.','line_number':742,'multiline':False]
['text':'!','line_number':743,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':744,'multiline':False]
['text':'!   is inserted right before p.','line_number':745,'multiline':False]
['text':'
   //! <b>Effects</b>: Move constructs a new value from x if and only if there is
   //!   no element in the container with key equivalent to the key of x.
   //!   p is a hint pointing to where the insert should start to search.
   //!
   //! <b>Returns</b>: An iterator pointing to the element with key equivalent
   //!   to the key of x.
   //!
   //! <b>Complexity</b>: Logarithmic in general, but amortized constant if t
   //!   is inserted right before p.
   BOOST_CONTAINER_FORCEINLINE iterator insert(const_iterator p, BOOST_RV_REF(nonconst_value_type) x)
   { return this->try_emplace(p, boost::move(x.first), boost::move(x.second)); }

   //! <b>Effects</b>: Move constructs a new value from x if and only if there is
   //!   no element in the container with key equivalent to the key of x.
   //!   p is a hint pointing to where the insert should start to search.
   //!
   //! <b>Returns</b>: An iterator pointing to the element with key equivalent
   //!   to the key of x.
   //!
   //! <b>Complexity</b>: Logarithmic in general, but amortized constant if t
   //!   is inserted right before p.
   BOOST_CONTAINER_FORCEINLINE iterator insert(const_iterator p, BOOST_RV_REF(movable_value_type) x)
   { return this->try_emplace(p, boost::move(x.first), boost::move(x.second)); }

   //! <b>Effects</b>: Inserts a copy of x in the container.
   //!   p is a hint pointing to where the insert should start to search.
   //!
   //! <b>Returns</b>: An iterator pointing to the element with key equivalent to the key of x.
   //!
   //! <b>Complexity</b>: Logarithmic.
   BOOST_CONTAINER_FORCEINLINE iterator insert(const_iterator p, const nonconst_value_type& x)
   { return this->try_emplace(p, x.first, x.second); }


','line_number':757,'multiline':True]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':793,'multiline':False]
['text':'!','line_number':794,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) if and only','line_number':795,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element.','line_number':796,'multiline':False]
['text':'!','line_number':797,'multiline':False]
['text':'! <b>Complexity</b>: At most N log(size()+N) (N is the distance from first to last)','line_number':798,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end()) if and only','line_number':804,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element.','line_number':805,'multiline':False]
['text':'!','line_number':806,'multiline':False]
['text':'! <b>Complexity</b>: At most N log(size()+N) (N is the distance from il.begin() to il.end())','line_number':807,'multiline':False]
['text':'! <b>Requires</b>: nh is empty or this->get_allocator() == nh.get_allocator().','line_number':812,'multiline':False]
['text':'!','line_number':813,'multiline':False]
['text':'! <b>Effects</b>: If nh is empty, has no effect. Otherwise, inserts the element owned','line_number':814,'multiline':False]
['text':'!   by nh if and only if there is no element in the container with a key equivalent to nh.key().','line_number':815,'multiline':False]
['text':'!','line_number':816,'multiline':False]
['text':'! <b>Returns</b>: If nh is empty, insert_return_type.inserted is false, insert_return_type.position','line_number':817,'multiline':False]
['text':'!   is end(), and insert_return_type.node is empty. Otherwise if the insertion took place,','line_number':818,'multiline':False]
['text':'!   insert_return_type.inserted is true, insert_return_type.position points to the inserted element,','line_number':819,'multiline':False]
['text':'!   and insert_return_type.node is empty; if the insertion failed, insert_return_type.inserted is','line_number':820,'multiline':False]
['text':'!   false, insert_return_type.node has the previous value of nh, and insert_return_type.position','line_number':821,'multiline':False]
['text':'!   points to an element with a key equivalent to nh.key().','line_number':822,'multiline':False]
['text':'!','line_number':823,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':824,'multiline':False]
['text':'! <b>Effects</b>: Same as `insert(node_type && nh)` but the element is inserted as close as possible','line_number':832,'multiline':False]
['text':'!   to the position just prior to "hint".','line_number':833,'multiline':False]
['text':'!','line_number':834,'multiline':False]
['text':'! <b>Complexity</b>: logarithmic in general, but amortized constant if the element is inserted','line_number':835,'multiline':False]
['text':'!   right before "hint".','line_number':836,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object x of type T constructed with','line_number':846,'multiline':False]
['text':'!   std::forward<Args>(args)... in the container if and only if there is','line_number':847,'multiline':False]
['text':'!   no element in the container with an equivalent key.','line_number':848,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':849,'multiline':False]
['text':'!','line_number':850,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':851,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':852,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':853,'multiline':False]
['text':'!','line_number':854,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':855,'multiline':False]
['text':'!   is inserted right before p.','line_number':856,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':861,'multiline':False]
['text':'!   std::forward<Args>(args)... in the container if and only if there is','line_number':862,'multiline':False]
['text':'!   no element in the container with an equivalent key.','line_number':863,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':864,'multiline':False]
['text':'!','line_number':865,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':866,'multiline':False]
['text':'!   to the key of x.','line_number':867,'multiline':False]
['text':'!','line_number':868,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':869,'multiline':False]
['text':'!   is inserted right before p.','line_number':870,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':875,'multiline':False]
['text':'! forward_as_tuple(k), forward_as_tuple(forward<Args>(args)...).','line_number':876,'multiline':False]
['text':'! ','line_number':877,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':878,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(k),','line_number':879,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':880,'multiline':False]
['text':'! ','line_number':881,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only if the','line_number':882,'multiline':False]
['text':'! insertion took place. The returned iterator points to the map element whose key is equivalent to k.','line_number':883,'multiline':False]
['text':'! ','line_number':884,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':885,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':890,'multiline':False]
['text':'! forward_as_tuple(k), forward_as_tuple(forward<Args>(args)...).','line_number':891,'multiline':False]
['text':'! ','line_number':892,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':893,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(k),','line_number':894,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':895,'multiline':False]
['text':'! ','line_number':896,'multiline':False]
['text':'! <b>Returns</b>: The returned iterator points to the map element whose key is equivalent to k.','line_number':897,'multiline':False]
['text':'! ','line_number':898,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if value','line_number':899,'multiline':False]
['text':'!   is inserted right before p.','line_number':900,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':905,'multiline':False]
['text':'! forward_as_tuple(move(k)), forward_as_tuple(forward<Args>(args)...).','line_number':906,'multiline':False]
['text':'! ','line_number':907,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':908,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(move(k)),','line_number':909,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':910,'multiline':False]
['text':'! ','line_number':911,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only if the','line_number':912,'multiline':False]
['text':'! insertion took place. The returned iterator points to the map element whose key is equivalent to k.','line_number':913,'multiline':False]
['text':'! ','line_number':914,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':915,'multiline':False]
['text':'! <b>Requires</b>: value_type shall be EmplaceConstructible into map from piecewise_construct, ','line_number':920,'multiline':False]
['text':'! forward_as_tuple(move(k)), forward_as_tuple(forward<Args>(args)...).','line_number':921,'multiline':False]
['text':'! ','line_number':922,'multiline':False]
['text':'! <b>Effects</b>: If the map already contains an element whose key is equivalent to k, there is no effect. Otherwise','line_number':923,'multiline':False]
['text':'! inserts an object of type value_type constructed with piecewise_construct, forward_as_tuple(move(k)),','line_number':924,'multiline':False]
['text':'! forward_as_tuple(forward<Args>(args)...).','line_number':925,'multiline':False]
['text':'! ','line_number':926,'multiline':False]
['text':'! <b>Returns</b>: The returned iterator points to the map element whose key is equivalent to k.','line_number':927,'multiline':False]
['text':'! ','line_number':928,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if value','line_number':929,'multiline':False]
['text':'!   is inserted right before p.','line_number':930,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':935,'multiline':False]
['text':'','line_number':961,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':965,'multiline':False]
['text':'! <b>Effects</b>: If present, erases the element in the container with key equivalent to x.','line_number':967,'multiline':False]
['text':'!','line_number':968,'multiline':False]
['text':'! <b>Returns</b>: Returns the number of erased elements (0/1).','line_number':969,'multiline':False]
['text':'!','line_number':970,'multiline':False]
['text':'! <b>Complexity</b>: log(size()) + count(k)','line_number':971,'multiline':False]
['text':'! <b>Effects</b>: Erases the element pointed to by p.','line_number':977,'multiline':False]
['text':'!','line_number':978,'multiline':False]
['text':'! <b>Returns</b>: Returns an iterator pointing to the element immediately','line_number':979,'multiline':False]
['text':'!   following q prior to the element being erased. If no such element exists,','line_number':980,'multiline':False]
['text':'!   returns end().','line_number':981,'multiline':False]
['text':'!','line_number':982,'multiline':False]
['text':'! <b>Complexity</b>: Amortized constant time','line_number':983,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements in the range [first, last).','line_number':986,'multiline':False]
['text':'!','line_number':987,'multiline':False]
['text':'! <b>Returns</b>: Returns last.','line_number':988,'multiline':False]
['text':'!','line_number':989,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+N where N is the distance from first to last.','line_number':990,'multiline':False]
['text':'   #if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':995,'multiline':False]
['text':'! <b>Effects</b>: Removes the first element in the container with key equivalent to k.','line_number':997,'multiline':False]
['text':'!','line_number':998,'multiline':False]
['text':'! <b>Returns</b>: A node_type owning the element if found, otherwise an empty node_type.','line_number':999,'multiline':False]
['text':'!','line_number':1000,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':1001,'multiline':False]
['text':'! <b>Effects</b>: Removes the element pointed to by "position".','line_number':1009,'multiline':False]
['text':'!','line_number':1010,'multiline':False]
['text':'! <b>Returns</b>: A node_type owning the element, otherwise an empty node_type.','line_number':1011,'multiline':False]
['text':'!','line_number':1012,'multiline':False]
['text':'! <b>Complexity</b>: Amortized constant.','line_number':1013,'multiline':False]
['text':'! <b>Requires</b>: this->get_allocator() == source.get_allocator().','line_number':1021,'multiline':False]
['text':'!','line_number':1022,'multiline':False]
['text':'! <b>Effects</b>: Attempts to extract each element in source and insert it into a using','line_number':1023,'multiline':False]
['text':'!   the comparison object of *this. If there is an element in a with key equivalent to the','line_number':1024,'multiline':False]
['text':'!   key of an element from source, then that element is not extracted from source.','line_number':1025,'multiline':False]
['text':'! ','line_number':1026,'multiline':False]
['text':'! <b>Postcondition</b>: Pointers and references to the transferred elements of source refer','line_number':1027,'multiline':False]
['text':'!   to those same elements but as members of *this. Iterators referring to the transferred','line_number':1028,'multiline':False]
['text':'!   elements will continue to refer to their elements, but they now behave as iterators into *this,','line_number':1029,'multiline':False]
['text':'!   not into source.','line_number':1030,'multiline':False]
['text':'!','line_number':1031,'multiline':False]
['text':'! <b>Throws</b>: Nothing unless the comparison object throws.','line_number':1032,'multiline':False]
['text':'!','line_number':1033,'multiline':False]
['text':'! <b>Complexity</b>: N log(size() + N) (N has the value source.size())','line_number':1034,'multiline':False]
['text':'! @copydoc ::boost::container::map::merge(map<Key, T, C2, Allocator, Options>&)','line_number':1043,'multiline':False]
['text':'! @copydoc ::boost::container::map::merge(map<Key, T, C2, Allocator, Options>&)','line_number':1048,'multiline':False]
['text':'! @copydoc ::boost::container::map::merge(map<Key, T, C2, Allocator, Options>&)','line_number':1057,'multiline':False]
['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':1063,'multiline':False]
['text':'!','line_number':1064,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':1065,'multiline':False]
['text':'!','line_number':1066,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1067,'multiline':False]
['text':'! <b>Effects</b>: erase(begin(),end()).','line_number':1072,'multiline':False]
['text':'!','line_number':1073,'multiline':False]
['text':'! <b>Postcondition</b>: size() == 0.','line_number':1074,'multiline':False]
['text':'!','line_number':1075,'multiline':False]
['text':'! <b>Complexity</b>: linear in size().','line_number':1076,'multiline':False]
['text':'! <b>Effects</b>: Returns the comparison object out','line_number':1079,'multiline':False]
['text':'!   of which a was constructed.','line_number':1080,'multiline':False]
['text':'!','line_number':1081,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1082,'multiline':False]
['text':'! <b>Effects</b>: Returns an object of value_compare constructed out','line_number':1085,'multiline':False]
['text':'!   of the comparison object.','line_number':1086,'multiline':False]
['text':'!','line_number':1087,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1088,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':1091,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1092,'multiline':False]
['text':'!','line_number':1093,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1094,'multiline':False]
['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':1097,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1098,'multiline':False]
['text':'!','line_number':1099,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1100,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1103,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1104,'multiline':False]
['text':'!','line_number':1105,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':1106,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1107,'multiline':False]
['text':'!','line_number':1108,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1109,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1113,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1114,'multiline':False]
['text':'!','line_number':1115,'multiline':False]
['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':1116,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':1117,'multiline':False]
['text':'!','line_number':1118,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1119,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1123,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':1125,'multiline':False]
['text':'!','line_number':1126,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':1127,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1132,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1133,'multiline':False]
['text':'!','line_number':1134,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':1135,'multiline':False]
['text':'!','line_number':1136,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':1137,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':1145,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':1146,'multiline':False]
['text':'!','line_number':1147,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':1148,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1151,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1152,'multiline':False]
['text':'!','line_number':1153,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':1154,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':1155,'multiline':False]
['text':'!','line_number':1156,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':1157,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':1161,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1162,'multiline':False]
['text':'!','line_number':1163,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1164,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':1167,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':1168,'multiline':False]
['text':'!','line_number':1169,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1170,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1173,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1174,'multiline':False]
['text':'!','line_number':1175,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':1176,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1177,'multiline':False]
['text':'!','line_number':1178,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1179,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1183,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1184,'multiline':False]
['text':'!','line_number':1185,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':1186,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':1187,'multiline':False]
['text':'!','line_number':1188,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1189,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':1193,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1194,'multiline':False]
['text':'!','line_number':1195,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1196,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':1199,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':1200,'multiline':False]
['text':'!','line_number':1201,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1202,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1205,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1206,'multiline':False]
['text':'!','line_number':1207,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':1208,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':1209,'multiline':False]
['text':'!','line_number':1210,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1211,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1215,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1216,'multiline':False]
['text':'!','line_number':1217,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':1218,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':1219,'multiline':False]
['text':'!','line_number':1220,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1221,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1225,'multiline':False]
['text':'!','line_number':1226,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1227,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1230,'multiline':False]
['text':'!','line_number':1231,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1232,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1235,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1236,'multiline':False]
['text':'!','line_number':1237,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1238,'multiline':False]
['text':'!','line_number':1239,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1240,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':1244,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':1245,'multiline':False]
['text':'!','line_number':1246,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':1247,'multiline':False]
['text':'!','line_number':1248,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1249,'multiline':False]
['text':'! <b>Effects</b>: Rebalances the tree. It's a no-op for Red-Black and AVL trees.','line_number':1253,'multiline':False]
['text':'!','line_number':1254,'multiline':False]
['text':'! <b>Complexity</b>: Linear','line_number':1255,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1258,'multiline':False]
['text':'!','line_number':1259,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1260,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1263,'multiline':False]
['text':'!','line_number':1264,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1265,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1268,'multiline':False]
['text':'!','line_number':1269,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1270,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1273,'multiline':False]
['text':'!','line_number':1274,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1275,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1278,'multiline':False]
['text':'!','line_number':1279,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1280,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1283,'multiline':False]
['text':'!','line_number':1284,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1285,'multiline':False]
['text':'! <b>Effects</b>: x.swap(y)','line_number':1288,'multiline':False]
['text':'!','line_number':1289,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1290,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1295,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1304,'multiline':False]
['text':' Compare','line_number':1318,'multiline':False]
['text':' Allocator','line_number':1323,'multiline':False]
['text':' Compare','line_number':1348,'multiline':False]
['text':' Allocator','line_number':1353,'multiline':False]
['text':'namespace container {','line_number':1374,'multiline':False]
['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1376,'multiline':False]
['text':'!specialization for optimizations','line_number':1377,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1387,'multiline':False]
['text':'! A multimap is a kind of associative container that supports equivalent keys','line_number':1391,'multiline':False]
['text':'! (possibly containing multiple copies of the same key value) and provides for','line_number':1392,'multiline':False]
['text':'! fast retrieval of values of another type T based on the keys. The multimap class','line_number':1393,'multiline':False]
['text':'! supports bidirectional iterators.','line_number':1394,'multiline':False]
['text':'!','line_number':1395,'multiline':False]
['text':'! A multimap satisfies all of the requirements of a container and of a reversible','line_number':1396,'multiline':False]
['text':'! container and of an associative container. The <code>value_type</code> stored','line_number':1397,'multiline':False]
['text':'! by this container is the value_type is std::pair<const Key, T>.','line_number':1398,'multiline':False]
['text':'!','line_number':1399,'multiline':False]
['text':'! \tparam Key is the key_type of the map','line_number':1400,'multiline':False]
['text':'! \tparam Value is the <code>mapped_type</code>','line_number':1401,'multiline':False]
['text':'! \tparam Compare is the ordering function for Keys (e.g. <i>std::less<Key></i>).','line_number':1402,'multiline':False]
['text':'! \tparam Allocator is the allocator to allocate the <code>value_type</code>s','line_number':1403,'multiline':False]
['text':'!   (e.g. <i>allocator< std::pair<const Key, T> > </i>).','line_number':1404,'multiline':False]
['text':'! \tparam Options is an packed option type generated using using boost::container::tree_assoc_options.','line_number':1405,'multiline':False]
['text':'/@cond','line_number':1412,'multiline':False]
['text':'/@endcond','line_number':1417,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1429,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1432,'multiline':False]
['text':'','line_number':1433,'multiline':False]
['text':'                    types','line_number':1434,'multiline':False]
['text':'','line_number':1435,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1436,'multiline':False]
['text':'typedef std::pair<key_type, mapped_type>                                               nonconst_value_type;','line_number':1456,'multiline':False]
['text':'allocator_type::value_type type must be std::pair<CONST Key, T>','line_number':1463,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1466,'multiline':False]
['text':'','line_number':1467,'multiline':False]
['text':'          construct/copy/destroy','line_number':1468,'multiline':False]
['text':'','line_number':1469,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1470,'multiline':False]
['text':'! <b>Effects</b>: Default constructs an empty multimap.','line_number':1472,'multiline':False]
['text':'!','line_number':1473,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1474,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified allocator','line_number':1481,'multiline':False]
['text':'!   object and allocator.','line_number':1482,'multiline':False]
['text':'!','line_number':1483,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1484,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison.','line_number':1489,'multiline':False]
['text':'!','line_number':1490,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1491,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison and allocator.','line_number':1496,'multiline':False]
['text':'!','line_number':1497,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1498,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap and','line_number':1503,'multiline':False]
['text':'! inserts elements from the range [first ,last ).','line_number':1504,'multiline':False]
['text':'!','line_number':1505,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1506,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1507,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified ','line_number':1513,'multiline':False]
['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':1514,'multiline':False]
['text':'!','line_number':1515,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1516,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1517,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison object and','line_number':1523,'multiline':False]
['text':'! inserts elements from the range [first ,last ).','line_number':1524,'multiline':False]
['text':'!','line_number':1525,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1526,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1527,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison object','line_number':1533,'multiline':False]
['text':'!   and allocator, and inserts elements from the range [first ,last ).','line_number':1534,'multiline':False]
['text':'!','line_number':1535,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1536,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':1537,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap and','line_number':1544,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last). This function','line_number':1545,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1546,'multiline':False]
['text':'!','line_number':1547,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1548,'multiline':False]
['text':'!','line_number':1549,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1550,'multiline':False]
['text':'!','line_number':1551,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1552,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison object and','line_number':1558,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last). This function','line_number':1559,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1560,'multiline':False]
['text':'!','line_number':1561,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1562,'multiline':False]
['text':'!','line_number':1563,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1564,'multiline':False]
['text':'!','line_number':1565,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1566,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison object and','line_number':1572,'multiline':False]
['text':'! allocator, and inserts elements from the ordered range [first ,last). This function','line_number':1573,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1574,'multiline':False]
['text':'!','line_number':1575,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1576,'multiline':False]
['text':'!','line_number':1577,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1578,'multiline':False]
['text':'!','line_number':1579,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1580,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified allocator and','line_number':1587,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last). This function','line_number':1588,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1589,'multiline':False]
['text':'!','line_number':1590,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1591,'multiline':False]
['text':'!','line_number':1592,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1593,'multiline':False]
['text':'!','line_number':1594,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1595,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap and','line_number':1602,'multiline':False]
['text':'! and inserts elements from the range [il.begin(), il.end()).','line_number':1603,'multiline':False]
['text':'!','line_number':1604,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1605,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':1606,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified','line_number':1611,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':1612,'multiline':False]
['text':'!','line_number':1613,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1614,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':1615,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison object and','line_number':1620,'multiline':False]
['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':1621,'multiline':False]
['text':'!','line_number':1622,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1623,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':1624,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multimap using the specified comparison object and','line_number':1629,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':1630,'multiline':False]
['text':'!','line_number':1631,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':1632,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.first() - il.end().','line_number':1633,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map and','line_number':1639,'multiline':False]
['text':'! inserts elements from the ordered range [il.begin(), il.end()). This function','line_number':1640,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1641,'multiline':False]
['text':'!','line_number':1642,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':1643,'multiline':False]
['text':'!','line_number':1644,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1645,'multiline':False]
['text':'!','line_number':1646,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1647,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map using the specified comparison object and','line_number':1652,'multiline':False]
['text':'! inserts elements from the ordered range [il.begin(), il.end()). This function','line_number':1653,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1654,'multiline':False]
['text':'!','line_number':1655,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':1656,'multiline':False]
['text':'!','line_number':1657,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1658,'multiline':False]
['text':'!','line_number':1659,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1660,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty map and','line_number':1665,'multiline':False]
['text':'! inserts elements from the ordered range [il.begin(), il.end()). This function','line_number':1666,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1667,'multiline':False]
['text':'!','line_number':1668,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate.','line_number':1669,'multiline':False]
['text':'!','line_number':1670,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1671,'multiline':False]
['text':'!','line_number':1672,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1673,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a multimap.','line_number':1680,'multiline':False]
['text':'!','line_number':1681,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':1682,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a multimap. Constructs *this using x's resources.','line_number':1687,'multiline':False]
['text':'!','line_number':1688,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1689,'multiline':False]
['text':'!','line_number':1690,'multiline':False]
['text':'! <b>Postcondition</b>: x is emptied.','line_number':1691,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a multimap.','line_number':1697,'multiline':False]
['text':'!','line_number':1698,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':1699,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a multimap using the specified allocator.','line_number':1704,'multiline':False]
['text':'!                 Constructs *this using x's resources.','line_number':1705,'multiline':False]
['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise.','line_number':1706,'multiline':False]
['text':'!','line_number':1707,'multiline':False]
['text':'! <b>Postcondition</b>: x is emptied.','line_number':1708,'multiline':False]
['text':'! <b>Effects</b>: Makes *this a copy of x.','line_number':1713,'multiline':False]
['text':'!','line_number':1714,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':1715,'multiline':False]
['text':'! <b>Effects</b>: this->swap(x.get()).','line_number':1719,'multiline':False]
['text':'!','line_number':1720,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1721,'multiline':False]
['text':'! <b>Effects</b>: Assign content of il to *this.','line_number':1729,'multiline':False]
['text':'!','line_number':1730,'multiline':False]
['text':'! @copydoc ::boost::container::set::get_allocator()','line_number':1741,'multiline':False]
['text':'! @copydoc ::boost::container::set::get_stored_allocator()','line_number':1744,'multiline':False]
['text':'! @copydoc ::boost::container::set::get_stored_allocator() const','line_number':1747,'multiline':False]
['text':'! @copydoc ::boost::container::set::begin()','line_number':1750,'multiline':False]
['text':'! @copydoc ::boost::container::set::begin() const','line_number':1753,'multiline':False]
['text':'! @copydoc ::boost::container::set::cbegin() const','line_number':1756,'multiline':False]
['text':'! @copydoc ::boost::container::set::end()','line_number':1759,'multiline':False]
['text':'! @copydoc ::boost::container::set::end() const','line_number':1762,'multiline':False]
['text':'! @copydoc ::boost::container::set::cend() const','line_number':1765,'multiline':False]
['text':'! @copydoc ::boost::container::set::rbegin()','line_number':1768,'multiline':False]
['text':'! @copydoc ::boost::container::set::rbegin() const','line_number':1771,'multiline':False]
['text':'! @copydoc ::boost::container::set::crbegin() const','line_number':1774,'multiline':False]
['text':'! @copydoc ::boost::container::set::rend()','line_number':1777,'multiline':False]
['text':'! @copydoc ::boost::container::set::rend() const','line_number':1780,'multiline':False]
['text':'! @copydoc ::boost::container::set::crend() const','line_number':1783,'multiline':False]
['text':'! @copydoc ::boost::container::set::empty() const','line_number':1786,'multiline':False]
['text':'! @copydoc ::boost::container::set::size() const','line_number':1789,'multiline':False]
['text':'! @copydoc ::boost::container::set::max_size() const','line_number':1792,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1795,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1799,'multiline':False]
['text':'!   std::forward<Args>(args)... in the container.','line_number':1800,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1801,'multiline':False]
['text':'!','line_number':1802,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1803,'multiline':False]
['text':'!   to the key of x.','line_number':1804,'multiline':False]
['text':'!','line_number':1805,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1806,'multiline':False]
['text':'!   is inserted right before p.','line_number':1807,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type T constructed with','line_number':1812,'multiline':False]
['text':'!   std::forward<Args>(args)... in the container.','line_number':1813,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1814,'multiline':False]
['text':'!','line_number':1815,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1816,'multiline':False]
['text':'!   to the key of x.','line_number':1817,'multiline':False]
['text':'!','line_number':1818,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1819,'multiline':False]
['text':'!   is inserted right before p.','line_number':1820,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1825,'multiline':False]
['text':'','line_number':1835,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1839,'multiline':False]
['text':'! <b>Effects</b>: Inserts x and returns the iterator pointing to the','line_number':1841,'multiline':False]
['text':'!   newly inserted element.','line_number':1842,'multiline':False]
['text':'!','line_number':1843,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1844,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value move-constructed from x and returns','line_number':1848,'multiline':False]
['text':'!   the iterator pointing to the newly inserted element.','line_number':1849,'multiline':False]
['text':'!','line_number':1850,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1851,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value constructed from x and returns','line_number':1855,'multiline':False]
['text':'!   the iterator pointing to the newly inserted element.','line_number':1856,'multiline':False]
['text':'!','line_number':1857,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1858,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container.','line_number':1869,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1870,'multiline':False]
['text':'!','line_number':1871,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1872,'multiline':False]
['text':'!   to the key of x.','line_number':1873,'multiline':False]
['text':'!','line_number':1874,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1875,'multiline':False]
['text':'!   is inserted right before p.','line_number':1876,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value move constructed from x in the container.','line_number':1880,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1881,'multiline':False]
['text':'!','line_number':1882,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1883,'multiline':False]
['text':'!   to the key of x.','line_number':1884,'multiline':False]
['text':'!','line_number':1885,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1886,'multiline':False]
['text':'!   is inserted right before p.','line_number':1887,'multiline':False]
['text':'! <b>Effects</b>: Inserts a new value constructed from x in the container.','line_number':1891,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1892,'multiline':False]
['text':'!','line_number':1893,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1894,'multiline':False]
['text':'!   to the key of x.','line_number':1895,'multiline':False]
['text':'!','line_number':1896,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1897,'multiline':False]
['text':'!   is inserted right before p.','line_number':1898,'multiline':False]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':1909,'multiline':False]
['text':'!','line_number':1910,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) .','line_number':1911,'multiline':False]
['text':'!','line_number':1912,'multiline':False]
['text':'! <b>Complexity</b>: At most N log(size()+N) (N is the distance from first to last)','line_number':1913,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [il.begin(), il.end().','line_number':1919,'multiline':False]
['text':'!','line_number':1920,'multiline':False]
['text':'! <b>Complexity</b>: At most N log(size()+N) (N is the distance from il.begin() to il.end())','line_number':1921,'multiline':False]
['text':'! <b>Requires</b>: nh is empty or this->get_allocator() == nh.get_allocator().','line_number':1926,'multiline':False]
['text':'!','line_number':1927,'multiline':False]
['text':'! <b>Effects/Returns</b>: If nh is empty, has no effect and returns end(). Otherwise, inserts ','line_number':1928,'multiline':False]
['text':'!   the element owned by nh and returns an iterator pointing to the newly inserted element.','line_number':1929,'multiline':False]
['text':'!   If a range containing elements with keys equivalent to nh.key() exists, ','line_number':1930,'multiline':False]
['text':'!   the element is inserted at the end of that range. nh is always emptied.','line_number':1931,'multiline':False]
['text':'!','line_number':1932,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':1933,'multiline':False]
['text':'! <b>Effects</b>: Same as `insert(node_type && nh)` but the element is inserted as close as possible','line_number':1940,'multiline':False]
['text':'!   to the position just prior to "hint".','line_number':1941,'multiline':False]
['text':'!','line_number':1942,'multiline':False]
['text':'! <b>Complexity</b>: logarithmic in general, but amortized constant if the element is inserted','line_number':1943,'multiline':False]
['text':'!   right before "hint".','line_number':1944,'multiline':False]
['text':'! @copydoc ::boost::container::set::erase(const_iterator)','line_number':1953,'multiline':False]
['text':'! @copydoc ::boost::container::set::erase(const key_type&)','line_number':1956,'multiline':False]
['text':'! @copydoc ::boost::container::set::erase(const_iterator,const_iterator)','line_number':1959,'multiline':False]
['text':'! @copydoc ::boost::container::map::extract(const key_type&)','line_number':1963,'multiline':False]
['text':'! @copydoc ::boost::container::map::extract(const_iterator)','line_number':1970,'multiline':False]
['text':'! <b>Requires</b>: this->get_allocator() == source.get_allocator().','line_number':1977,'multiline':False]
['text':'!','line_number':1978,'multiline':False]
['text':'! <b>Effects</b>: Extracts each element in source and insert it into a using','line_number':1979,'multiline':False]
['text':'!   the comparison object of *this.','line_number':1980,'multiline':False]
['text':'! ','line_number':1981,'multiline':False]
['text':'! <b>Postcondition</b>: Pointers and references to the transferred elements of source refer','line_number':1982,'multiline':False]
['text':'!   to those same elements but as members of *this. Iterators referring to the transferred','line_number':1983,'multiline':False]
['text':'!   elements will continue to refer to their elements, but they now behave as iterators into *this,','line_number':1984,'multiline':False]
['text':'!   not into source.','line_number':1985,'multiline':False]
['text':'!','line_number':1986,'multiline':False]
['text':'! <b>Throws</b>: Nothing unless the comparison object throws.','line_number':1987,'multiline':False]
['text':'!','line_number':1988,'multiline':False]
['text':'! <b>Complexity</b>: N log(size() + N) (N has the value source.size())','line_number':1989,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::merge(multimap<Key, T, C2, Allocator, Options>&)','line_number':1998,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::merge(multimap<Key, T, C2, Allocator, Options>&)','line_number':2003,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::merge(multimap<Key, T, C2, Allocator, Options>&)','line_number':2012,'multiline':False]
['text':'! @copydoc ::boost::container::set::swap','line_number':2018,'multiline':False]
['text':'! @copydoc ::boost::container::set::clear','line_number':2023,'multiline':False]
['text':'! @copydoc ::boost::container::set::key_comp','line_number':2026,'multiline':False]
['text':'! @copydoc ::boost::container::set::value_comp','line_number':2029,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':2032,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2033,'multiline':False]
['text':'!','line_number':2034,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2035,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to an element with the key','line_number':2038,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2039,'multiline':False]
['text':'!','line_number':2040,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2041,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2044,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2045,'multiline':False]
['text':'!','line_number':2046,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':2047,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2048,'multiline':False]
['text':'!','line_number':2049,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2050,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2054,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2055,'multiline':False]
['text':'!','line_number':2056,'multiline':False]
['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':2057,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':2058,'multiline':False]
['text':'!','line_number':2059,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':2060,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':2064,'multiline':False]
['text':'!','line_number':2065,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':2066,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2069,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2070,'multiline':False]
['text':'!','line_number':2071,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':2072,'multiline':False]
['text':'!','line_number':2073,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':2074,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':2078,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':2079,'multiline':False]
['text':'!','line_number':2080,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':2081,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2084,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2085,'multiline':False]
['text':'!','line_number':2086,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':2087,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':2088,'multiline':False]
['text':'!','line_number':2089,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':2090,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':2094,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2095,'multiline':False]
['text':'!','line_number':2096,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2097,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':2100,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':2101,'multiline':False]
['text':'!','line_number':2102,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2103,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2106,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2107,'multiline':False]
['text':'!','line_number':2108,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':2109,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2110,'multiline':False]
['text':'!','line_number':2111,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2112,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2116,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2117,'multiline':False]
['text':'!','line_number':2118,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':2119,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':2120,'multiline':False]
['text':'!','line_number':2121,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2122,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':2126,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2127,'multiline':False]
['text':'!','line_number':2128,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2129,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':2132,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':2133,'multiline':False]
['text':'!','line_number':2134,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2135,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2138,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2139,'multiline':False]
['text':'!','line_number':2140,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':2141,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':2142,'multiline':False]
['text':'!','line_number':2143,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2144,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2148,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2149,'multiline':False]
['text':'!','line_number':2150,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':2151,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':2152,'multiline':False]
['text':'!','line_number':2153,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2154,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2158,'multiline':False]
['text':'!','line_number':2159,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2160,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2163,'multiline':False]
['text':'!','line_number':2164,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2165,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2168,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2169,'multiline':False]
['text':'!','line_number':2170,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2171,'multiline':False]
['text':'!','line_number':2172,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2173,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':2177,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':2178,'multiline':False]
['text':'!','line_number':2179,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':2180,'multiline':False]
['text':'!','line_number':2181,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':2182,'multiline':False]
['text':'! <b>Effects</b>: Rebalances the tree. It's a no-op for Red-Black and AVL trees.','line_number':2186,'multiline':False]
['text':'!','line_number':2187,'multiline':False]
['text':'! <b>Complexity</b>: Linear','line_number':2188,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':2191,'multiline':False]
['text':'!','line_number':2192,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2193,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':2196,'multiline':False]
['text':'!','line_number':2197,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2198,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':2201,'multiline':False]
['text':'!','line_number':2202,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2203,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':2206,'multiline':False]
['text':'!','line_number':2207,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2208,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':2211,'multiline':False]
['text':'!','line_number':2212,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2213,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':2216,'multiline':False]
['text':'!','line_number':2217,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':2218,'multiline':False]
['text':'! <b>Effects</b>: x.swap(y)','line_number':2221,'multiline':False]
['text':'!','line_number':2222,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':2223,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':2228,'multiline':False]
['text':' Compare','line_number':2242,'multiline':False]
['text':' Allocator','line_number':2247,'multiline':False]
['text':' Compare','line_number':2272,'multiline':False]
['text':' Allocator','line_number':2277,'multiline':False]
['text':'namespace container {','line_number':2296,'multiline':False]
['text':'!has_trivial_destructor_after_move<> == true_type','line_number':2298,'multiline':False]
['text':'!specialization for optimizations','line_number':2299,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':2309,'multiline':False]
['text':' BOOST_CONTAINER_MAP_HPP','line_number':2315,'multiline':False]
