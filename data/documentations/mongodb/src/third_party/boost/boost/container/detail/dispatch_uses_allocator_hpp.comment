['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':' Check if we can detect is_convertible using advanced SFINAE expressions','line_number':43,'multiline':False]
['text':'! Code inspired by Mathias Gaunard's is_convertible.cpp found in the Boost mailing list','line_number':46,'multiline':False]
['text':'! http://boost.2283326.n4.nabble.com/type-traits-is-constructible-when-decltype-is-supported-td3575452.html','line_number':47,'multiline':False]
['text':'! Thanks Mathias!','line_number':48,'multiline':False]
['text':'With variadic templates, we need a single class to implement the trait','line_number':50,'multiline':False]
['text':' #if !defined(BOOST_NO_SFINAE_EXPR) && !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':75,'multiline':False]
['text':'Without advanced SFINAE expressions, we can't use is_constructible','line_number':77,'multiline':False]
['text':'so backup to constructible_with_allocator_xxx','line_number':78,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':92,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':104,'multiline':False]
['text':' #if !defined(BOOST_NO_SFINAE_EXPR)','line_number':106,'multiline':False]
['text':' allocator_arg_t','line_number':126,'multiline':False]
['text':' allocator suffix','line_number':145,'multiline':False]
['text':'#if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':163,'multiline':False]
['text':'','line_number':178,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':'','line_number':214,'multiline':False]
['text':'#if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':218,'multiline':False]
['text':'This is needed for MSVC10 and ambiguous overloads','line_number':278,'multiline':False]
['text':'piecewise construction from boost::tuple','line_number':286,'multiline':False]
['text':'','line_number':309,'multiline':False]
['text':'piecewise construction from Std Tuple','line_number':313,'multiline':False]
['text':'MSVC 2010 tuple implementation','line_number':346,'multiline':False]
['text':'','line_number':369,'multiline':False]
['text':'MSVC 2012 tuple implementation','line_number':380,'multiline':False]
['text':'','line_number':404,'multiline':False]
['text':'!defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':409,'multiline':False]
['text':'','line_number':451,'multiline':False]
['text':'!defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':455,'multiline':False]
['text':'namespace dtl','line_number':457,'multiline':False]
['text':' namespace boost { namespace container {','line_number':459,'multiline':False]
['text':'  BOOST_CONTAINER_DISPATCH_USES_ALLOCATOR_HPP','line_number':463,'multiline':False]
