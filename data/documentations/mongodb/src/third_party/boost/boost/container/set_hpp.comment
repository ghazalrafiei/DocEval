['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':' container','line_number':24,'multiline':False]
['text':' container/detail','line_number':26,'multiline':False]
['text':'new_allocator','line_number':29,'multiline':False]
['text':' intrusive/detail','line_number':30,'multiline':False]
['text':'pair','line_number':31,'multiline':False]
['text':'less, equal','line_number':32,'multiline':False]
['text':' move','line_number':33,'multiline':False]
['text':' move/detail','line_number':36,'multiline':False]
['text':' std','line_number':41,'multiline':False]
['text':'! A set is a kind of associative container that supports unique keys (contains at','line_number':51,'multiline':False]
['text':'! most one of each key value) and provides for fast retrieval of the keys themselves.','line_number':52,'multiline':False]
['text':'! Class set supports bidirectional iterators.','line_number':53,'multiline':False]
['text':'!','line_number':54,'multiline':False]
['text':'! A set satisfies all of the requirements of a container and of a reversible container','line_number':55,'multiline':False]
['text':'! , and of an associative container. A set also provides most operations described in','line_number':56,'multiline':False]
['text':'! for unique keys.','line_number':57,'multiline':False]
['text':'!','line_number':58,'multiline':False]
['text':'! \tparam Key is the type to be inserted in the set, which is also the key_type','line_number':59,'multiline':False]
['text':'! \tparam Compare is the comparison functor used to order keys','line_number':60,'multiline':False]
['text':'! \tparam Allocator is the allocator to be used to allocate memory for this container','line_number':61,'multiline':False]
['text':'! \tparam Options is an packed option type generated using using boost::container::tree_assoc_options.','line_number':62,'multiline':False]
['text':'/@cond','line_number':68,'multiline':False]
['text':'/@endcond','line_number':71,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':78,'multiline':False]
['text':'////////////////////////////////////////////','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':'                    types','line_number':83,'multiline':False]
['text':'','line_number':84,'multiline':False]
['text':'////////////////////////////////////////////','line_number':85,'multiline':False]
['text':'////////////////////////////////////////////','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':'          construct/copy/destroy','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':'////////////////////////////////////////////','line_number':110,'multiline':False]
['text':'! <b>Effects</b>: Default constructs an empty set.','line_number':112,'multiline':False]
['text':'!','line_number':113,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':114,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified allocator object.','line_number':122,'multiline':False]
['text':'!','line_number':123,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':124,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object.','line_number':129,'multiline':False]
['text':'!','line_number':130,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':131,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object','line_number':136,'multiline':False]
['text':'! and allocator.','line_number':137,'multiline':False]
['text':'!','line_number':138,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':139,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using and','line_number':144,'multiline':False]
['text':'! inserts elements from the range [first ,last ).','line_number':145,'multiline':False]
['text':'!','line_number':146,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':147,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':148,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified','line_number':154,'multiline':False]
['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':155,'multiline':False]
['text':'!','line_number':156,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':157,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':158,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':164,'multiline':False]
['text':'! inserts elements from the range [first ,last ).','line_number':165,'multiline':False]
['text':'!','line_number':166,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':167,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':168,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':174,'multiline':False]
['text':'! allocator, and inserts elements from the range [first ,last ).','line_number':175,'multiline':False]
['text':'!','line_number':176,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [first ,last ) is already sorted using','line_number':177,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is last - first.','line_number':178,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set and','line_number':184,'multiline':False]
['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':185,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':186,'multiline':False]
['text':'!','line_number':187,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':188,'multiline':False]
['text':'! unique values.','line_number':189,'multiline':False]
['text':'!','line_number':190,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':191,'multiline':False]
['text':'!','line_number':192,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':193,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':199,'multiline':False]
['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':200,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':201,'multiline':False]
['text':'!','line_number':202,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':203,'multiline':False]
['text':'! unique values.','line_number':204,'multiline':False]
['text':'!','line_number':205,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':206,'multiline':False]
['text':'!','line_number':207,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':208,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':214,'multiline':False]
['text':'! allocator, and inserts elements from the ordered unique range [first ,last). This function','line_number':215,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':216,'multiline':False]
['text':'!','line_number':217,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':218,'multiline':False]
['text':'! unique values.','line_number':219,'multiline':False]
['text':'!','line_number':220,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':221,'multiline':False]
['text':'!','line_number':222,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':223,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified allocator and','line_number':230,'multiline':False]
['text':'! inserts elements from the ordered unique range [first ,last). This function','line_number':231,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':232,'multiline':False]
['text':'!','line_number':233,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate and must be','line_number':234,'multiline':False]
['text':'! unique values.','line_number':235,'multiline':False]
['text':'!','line_number':236,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':237,'multiline':False]
['text':'!','line_number':238,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':239,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set and','line_number':246,'multiline':False]
['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':247,'multiline':False]
['text':'!','line_number':248,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':249,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.begin() - il.end().','line_number':250,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified','line_number':255,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':256,'multiline':False]
['text':'!','line_number':257,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':258,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.begin() - il.end().','line_number':259,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':264,'multiline':False]
['text':'! inserts elements from the range [il.begin(), il.end()).','line_number':265,'multiline':False]
['text':'!','line_number':266,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':267,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.begin() - il.end().','line_number':268,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':273,'multiline':False]
['text':'! allocator, and inserts elements from the range [il.begin(), il.end()).','line_number':274,'multiline':False]
['text':'!','line_number':275,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N if the range [il.begin(), il.end()) is already sorted using','line_number':276,'multiline':False]
['text':'! the predicate and otherwise N logN, where N is il.begin() - il.end().','line_number':277,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set and','line_number':282,'multiline':False]
['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':283,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':284,'multiline':False]
['text':'!','line_number':285,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':286,'multiline':False]
['text':'! unique values.','line_number':287,'multiline':False]
['text':'!','line_number':288,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':289,'multiline':False]
['text':'!','line_number':290,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':291,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':296,'multiline':False]
['text':'! inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':297,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':298,'multiline':False]
['text':'!','line_number':299,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':300,'multiline':False]
['text':'! unique values.','line_number':301,'multiline':False]
['text':'!','line_number':302,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':303,'multiline':False]
['text':'!','line_number':304,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':305,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty set using the specified comparison object and','line_number':310,'multiline':False]
['text':'! allocator, and inserts elements from the ordered unique range [il.begin(), il.end()). This function','line_number':311,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':312,'multiline':False]
['text':'!','line_number':313,'multiline':False]
['text':'! <b>Requires</b>: [il.begin(), il.end()) must be ordered according to the predicate and must be','line_number':314,'multiline':False]
['text':'! unique values.','line_number':315,'multiline':False]
['text':'!','line_number':316,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':317,'multiline':False]
['text':'!','line_number':318,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':319,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a set.','line_number':325,'multiline':False]
['text':'!','line_number':326,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':327,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a set. Constructs *this using x's resources.','line_number':332,'multiline':False]
['text':'!','line_number':333,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':334,'multiline':False]
['text':'!','line_number':335,'multiline':False]
['text':'! <b>Postcondition</b>: x is emptied.','line_number':336,'multiline':False]
['text':'! <b>Effects</b>: Copy constructs a set using the specified allocator.','line_number':342,'multiline':False]
['text':'!','line_number':343,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':344,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a set using the specified allocator.','line_number':349,'multiline':False]
['text':'!                 Constructs *this using x's resources.','line_number':350,'multiline':False]
['text':'!','line_number':351,'multiline':False]
['text':'! <b>Complexity</b>: Constant if a == x.get_allocator(), linear otherwise.','line_number':352,'multiline':False]
['text':'! <b>Effects</b>: Makes *this a copy of x.','line_number':357,'multiline':False]
['text':'!','line_number':358,'multiline':False]
['text':'! <b>Complexity</b>: Linear in x.size().','line_number':359,'multiline':False]
['text':'! <b>Effects</b>: this->swap(x.get()).','line_number':363,'multiline':False]
['text':'!','line_number':364,'multiline':False]
['text':'! <b>Throws</b>: If allocator_traits_type::propagate_on_container_move_assignment','line_number':365,'multiline':False]
['text':'!   is false and (allocation throws or value_type's move constructor throws)','line_number':366,'multiline':False]
['text':'!','line_number':367,'multiline':False]
['text':'! <b>Complexity</b>: Constant if allocator_traits_type::','line_number':368,'multiline':False]
['text':'!   propagate_on_container_move_assignment is true or','line_number':369,'multiline':False]
['text':'!   this->get>allocator() == x.get_allocator(). Linear otherwise.','line_number':370,'multiline':False]
['text':'! <b>Effects</b>: Copy all elements from il to *this.','line_number':378,'multiline':False]
['text':'!','line_number':379,'multiline':False]
['text':'! <b>Complexity</b>: Linear in il.size().','line_number':380,'multiline':False]
['text':'! <b>Effects</b>: Returns a copy of the allocator that','line_number':391,'multiline':False]
['text':'!   was passed to the object's constructor.','line_number':392,'multiline':False]
['text':'!','line_number':393,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':394,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':397,'multiline':False]
['text':'!','line_number':398,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':399,'multiline':False]
['text':'!','line_number':400,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':401,'multiline':False]
['text':'!','line_number':402,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':403,'multiline':False]
['text':'! <b>Effects</b>: Returns a reference to the internal allocator.','line_number':406,'multiline':False]
['text':'!','line_number':407,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':408,'multiline':False]
['text':'!','line_number':409,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':410,'multiline':False]
['text':'!','line_number':411,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':412,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the first element contained in the container.','line_number':415,'multiline':False]
['text':'!','line_number':416,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':417,'multiline':False]
['text':'!','line_number':418,'multiline':False]
['text':'! <b>Complexity</b>: Constant','line_number':419,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':422,'multiline':False]
['text':'!','line_number':423,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':424,'multiline':False]
['text':'!','line_number':425,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':426,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the first element contained in the container.','line_number':429,'multiline':False]
['text':'!','line_number':430,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':431,'multiline':False]
['text':'!','line_number':432,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':433,'multiline':False]
['text':'! <b>Effects</b>: Returns an iterator to the end of the container.','line_number':436,'multiline':False]
['text':'!','line_number':437,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':438,'multiline':False]
['text':'!','line_number':439,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':440,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':443,'multiline':False]
['text':'!','line_number':444,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':445,'multiline':False]
['text':'!','line_number':446,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':447,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_iterator to the end of the container.','line_number':450,'multiline':False]
['text':'!','line_number':451,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':452,'multiline':False]
['text':'!','line_number':453,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':454,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the beginning','line_number':457,'multiline':False]
['text':'! of the reversed container.','line_number':458,'multiline':False]
['text':'!','line_number':459,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':460,'multiline':False]
['text':'!','line_number':461,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':462,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':465,'multiline':False]
['text':'! of the reversed container.','line_number':466,'multiline':False]
['text':'!','line_number':467,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':468,'multiline':False]
['text':'!','line_number':469,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':470,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the beginning','line_number':473,'multiline':False]
['text':'! of the reversed container.','line_number':474,'multiline':False]
['text':'!','line_number':475,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':476,'multiline':False]
['text':'!','line_number':477,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':478,'multiline':False]
['text':'! <b>Effects</b>: Returns a reverse_iterator pointing to the end','line_number':481,'multiline':False]
['text':'! of the reversed container.','line_number':482,'multiline':False]
['text':'!','line_number':483,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':484,'multiline':False]
['text':'!','line_number':485,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':486,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':489,'multiline':False]
['text':'! of the reversed container.','line_number':490,'multiline':False]
['text':'!','line_number':491,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':492,'multiline':False]
['text':'!','line_number':493,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':494,'multiline':False]
['text':'! <b>Effects</b>: Returns a const_reverse_iterator pointing to the end','line_number':497,'multiline':False]
['text':'! of the reversed container.','line_number':498,'multiline':False]
['text':'!','line_number':499,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':500,'multiline':False]
['text':'!','line_number':501,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':502,'multiline':False]
['text':'! <b>Effects</b>: Returns true if the container contains no elements.','line_number':505,'multiline':False]
['text':'!','line_number':506,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':507,'multiline':False]
['text':'!','line_number':508,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':509,'multiline':False]
['text':'! <b>Effects</b>: Returns the number of the elements contained in the container.','line_number':512,'multiline':False]
['text':'!','line_number':513,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':514,'multiline':False]
['text':'!','line_number':515,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':516,'multiline':False]
['text':'! <b>Effects</b>: Returns the largest possible size of the container.','line_number':519,'multiline':False]
['text':'!','line_number':520,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':521,'multiline':False]
['text':'!','line_number':522,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':523,'multiline':False]
['text':'   #if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':525,'multiline':False]
['text':'! <b>Effects</b>:  Inserts an object x of type Key constructed with','line_number':529,'multiline':False]
['text':'!   std::forward<Args>(args)... if and only if there is','line_number':530,'multiline':False]
['text':'!   no element in the container with equivalent value.','line_number':531,'multiline':False]
['text':'!   and returns the iterator pointing to the','line_number':532,'multiline':False]
['text':'!   newly inserted element.','line_number':533,'multiline':False]
['text':'!','line_number':534,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':535,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':536,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':537,'multiline':False]
['text':'!','line_number':538,'multiline':False]
['text':'! <b>Throws</b>: If memory allocation throws or','line_number':539,'multiline':False]
['text':'!   Key's in-place constructor throws.','line_number':540,'multiline':False]
['text':'!','line_number':541,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':542,'multiline':False]
['text':'! <b>Effects</b>:  Inserts an object of type Key constructed with','line_number':547,'multiline':False]
['text':'!   std::forward<Args>(args)... if and only if there is','line_number':548,'multiline':False]
['text':'!   no element in the container with equivalent value.','line_number':549,'multiline':False]
['text':'!   p is a hint pointing to where the insert','line_number':550,'multiline':False]
['text':'!   should start to search.','line_number':551,'multiline':False]
['text':'!','line_number':552,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent to the key of x.','line_number':553,'multiline':False]
['text':'!','line_number':554,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':555,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':560,'multiline':False]
['text':'','line_number':570,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':574,'multiline':False]
['text':'! <b>Effects</b>: Inserts x if and only if there is no element in the container','line_number':577,'multiline':False]
['text':'!   with key equivalent to the key of x.','line_number':578,'multiline':False]
['text':'!','line_number':579,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':580,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':581,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':582,'multiline':False]
['text':'!','line_number':583,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':584,'multiline':False]
['text':'! <b>Effects</b>: Move constructs a new value from x if and only if there is','line_number':587,'multiline':False]
['text':'!   no element in the container with key equivalent to the key of x.','line_number':588,'multiline':False]
['text':'!','line_number':589,'multiline':False]
['text':'! <b>Returns</b>: The bool component of the returned pair is true if and only','line_number':590,'multiline':False]
['text':'!   if the insertion takes place, and the iterator component of the pair','line_number':591,'multiline':False]
['text':'!   points to the element with key equivalent to the key of x.','line_number':592,'multiline':False]
['text':'!','line_number':593,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':594,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container if and only if there is','line_number':605,'multiline':False]
['text':'!   no element in the container with key equivalent to the key of x.','line_number':606,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':607,'multiline':False]
['text':'!','line_number':608,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':609,'multiline':False]
['text':'!   to the key of x.','line_number':610,'multiline':False]
['text':'!','line_number':611,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':612,'multiline':False]
['text':'!   is inserted right before p.','line_number':613,'multiline':False]
['text':'! <b>Effects</b>: Inserts an element move constructed from x in the container.','line_number':616,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':617,'multiline':False]
['text':'!','line_number':618,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent to the key of x.','line_number':619,'multiline':False]
['text':'!','line_number':620,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':621,'multiline':False]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':628,'multiline':False]
['text':'!','line_number':629,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) if and only','line_number':630,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element.','line_number':631,'multiline':False]
['text':'!','line_number':632,'multiline':False]
['text':'! <b>Complexity</b>: At most N log(size()+N) (N is the distance from first to last)','line_number':633,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [il.begin(),il.end()) if and only','line_number':639,'multiline':False]
['text':'!   if there is no element with key equivalent to the key of that element.','line_number':640,'multiline':False]
['text':'!','line_number':641,'multiline':False]
['text':'! <b>Complexity</b>: At most N log(size()+N) (N is the distance from il.begin() to il.end())','line_number':642,'multiline':False]
['text':'! @copydoc ::boost::container::map::insert(node_type&&)','line_number':647,'multiline':False]
['text':'! @copydoc ::boost::container::map::insert(const_iterator, node_type&&)','line_number':651,'multiline':False]
['text':'! @copydoc ::boost::container::map::merge(map<Key, T, C2, Allocator, Options>&)','line_number':655,'multiline':False]
['text':'! @copydoc ::boost::container::set::merge(set<Key, C2, Allocator, Options>&)','line_number':664,'multiline':False]
['text':'! @copydoc ::boost::container::map::merge(multimap<Key, T, C2, Allocator, Options>&)','line_number':669,'multiline':False]
['text':'! @copydoc ::boost::container::set::merge(multiset<Key, C2, Allocator, Options>&)','line_number':678,'multiline':False]
['text':'! <b>Effects</b>: If present, erases the element in the container with key equivalent to x.','line_number':683,'multiline':False]
['text':'!','line_number':684,'multiline':False]
['text':'! <b>Returns</b>: Returns the number of erased elements (0/1).','line_number':685,'multiline':False]
['text':'!','line_number':686,'multiline':False]
['text':'! <b>Complexity</b>: log(size()) + count(k)','line_number':687,'multiline':False]
['text':'! <b>Effects</b>: Erases the element pointed to by p.','line_number':693,'multiline':False]
['text':'!','line_number':694,'multiline':False]
['text':'! <b>Returns</b>: Returns an iterator pointing to the element immediately','line_number':695,'multiline':False]
['text':'!   following q prior to the element being erased. If no such element exists,','line_number':696,'multiline':False]
['text':'!   returns end().','line_number':697,'multiline':False]
['text':'!','line_number':698,'multiline':False]
['text':'! <b>Complexity</b>: Amortized constant time','line_number':699,'multiline':False]
['text':'! <b>Effects</b>: Erases all the elements in the range [first, last).','line_number':702,'multiline':False]
['text':'!','line_number':703,'multiline':False]
['text':'! <b>Returns</b>: Returns last.','line_number':704,'multiline':False]
['text':'!','line_number':705,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+N where N is the distance from first to last.','line_number':706,'multiline':False]
['text':'! @copydoc ::boost::container::map::extract(const_iterator)','line_number':709,'multiline':False]
['text':'! @copydoc ::boost::container::map::extract(const key_type&)','line_number':712,'multiline':False]
['text':'! <b>Effects</b>: Swaps the contents of *this and x.','line_number':715,'multiline':False]
['text':'!','line_number':716,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':717,'multiline':False]
['text':'!','line_number':718,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':719,'multiline':False]
['text':'! <b>Effects</b>: erase(begin(),end()).','line_number':724,'multiline':False]
['text':'!','line_number':725,'multiline':False]
['text':'! <b>Postcondition</b>: size() == 0.','line_number':726,'multiline':False]
['text':'!','line_number':727,'multiline':False]
['text':'! <b>Complexity</b>: linear in size().','line_number':728,'multiline':False]
['text':'! <b>Effects</b>: Returns the comparison object out','line_number':731,'multiline':False]
['text':'!   of which a was constructed.','line_number':732,'multiline':False]
['text':'!','line_number':733,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':734,'multiline':False]
['text':'! <b>Effects</b>: Returns an object of value_compare constructed out','line_number':737,'multiline':False]
['text':'!   of the comparison object.','line_number':738,'multiline':False]
['text':'!','line_number':739,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':740,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':743,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':744,'multiline':False]
['text':'!','line_number':745,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':746,'multiline':False]
['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':749,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':750,'multiline':False]
['text':'!','line_number':751,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':752,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':755,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':756,'multiline':False]
['text':'!','line_number':757,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to an element with the key','line_number':758,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':759,'multiline':False]
['text':'!','line_number':760,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':761,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':765,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':766,'multiline':False]
['text':'!','line_number':767,'multiline':False]
['text':'! <b>Returns</b>: A const_iterator pointing to an element with the key','line_number':768,'multiline':False]
['text':'!   equivalent to x, or end() if such an element is not found.','line_number':769,'multiline':False]
['text':'!','line_number':770,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':771,'multiline':False]
['text':'   #if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':777,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':779,'multiline':False]
['text':'!','line_number':780,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':781,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':786,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':787,'multiline':False]
['text':'!','line_number':788,'multiline':False]
['text':'! <b>Returns</b>: The number of elements with key equivalent to x.','line_number':789,'multiline':False]
['text':'!','line_number':790,'multiline':False]
['text':'! <b>Complexity</b>: log(size())+count(k)','line_number':791,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':799,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':800,'multiline':False]
['text':'!','line_number':801,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':802,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':805,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':806,'multiline':False]
['text':'!','line_number':807,'multiline':False]
['text':'! <b>Returns</b>: Returns true if there is an element with key','line_number':808,'multiline':False]
['text':'!   equivalent to key in the container, otherwise false.','line_number':809,'multiline':False]
['text':'!','line_number':810,'multiline':False]
['text':'! <b>Complexity</b>: log(size()).','line_number':811,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':815,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':816,'multiline':False]
['text':'!','line_number':817,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':818,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':821,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':822,'multiline':False]
['text':'!','line_number':823,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':824,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':827,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':828,'multiline':False]
['text':'!','line_number':829,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key not less','line_number':830,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':831,'multiline':False]
['text':'!','line_number':832,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':833,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':837,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':838,'multiline':False]
['text':'!','line_number':839,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key not','line_number':840,'multiline':False]
['text':'!   less than x, or end() if such an element is not found.','line_number':841,'multiline':False]
['text':'!','line_number':842,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':843,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':847,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':848,'multiline':False]
['text':'!','line_number':849,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':850,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':853,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':854,'multiline':False]
['text':'!','line_number':855,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':856,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':859,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':860,'multiline':False]
['text':'!','line_number':861,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the first element with key greater','line_number':862,'multiline':False]
['text':'!   than x, or end() if such an element is not found.','line_number':863,'multiline':False]
['text':'!','line_number':864,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':865,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':869,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':870,'multiline':False]
['text':'!','line_number':871,'multiline':False]
['text':'! <b>Returns</b>: A const iterator pointing to the first element with key','line_number':872,'multiline':False]
['text':'!   greater than x, or end() if such an element is not found.','line_number':873,'multiline':False]
['text':'!','line_number':874,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':875,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':879,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':881,'multiline':False]
['text':'!','line_number':882,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':883,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':887,'multiline':False]
['text':'!','line_number':888,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':889,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':893,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':894,'multiline':False]
['text':'!','line_number':895,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':896,'multiline':False]
['text':'!','line_number':897,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':898,'multiline':False]
['text':'! <b>Requires</b>: This overload is available only if','line_number':903,'multiline':False]
['text':'! key_compare::is_transparent exists.','line_number':904,'multiline':False]
['text':'!','line_number':905,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to std::make_pair(this->lower_bound(k), this->upper_bound(k)).','line_number':906,'multiline':False]
['text':'!','line_number':907,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic','line_number':908,'multiline':False]
['text':'! <b>Effects</b>: Rebalances the tree. It's a no-op for Red-Black and AVL trees.','line_number':915,'multiline':False]
['text':'!','line_number':916,'multiline':False]
['text':'! <b>Complexity</b>: Linear','line_number':917,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':920,'multiline':False]
['text':'!','line_number':921,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':922,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':925,'multiline':False]
['text':'!','line_number':926,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':927,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':930,'multiline':False]
['text':'!','line_number':931,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':932,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':935,'multiline':False]
['text':'!','line_number':936,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':937,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':940,'multiline':False]
['text':'!','line_number':941,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':942,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':945,'multiline':False]
['text':'!','line_number':946,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':947,'multiline':False]
['text':'! <b>Effects</b>: x.swap(y)','line_number':950,'multiline':False]
['text':'!','line_number':951,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':952,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':957,'multiline':False]
['text':' Compare','line_number':969,'multiline':False]
['text':' Allocator','line_number':974,'multiline':False]
['text':' Compare','line_number':997,'multiline':False]
['text':' Allocator','line_number':1002,'multiline':False]
['text':'namespace container {','line_number':1021,'multiline':False]
['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1023,'multiline':False]
['text':'!specialization for optimizations','line_number':1024,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1034,'multiline':False]
['text':'! A multiset is a kind of associative container that supports equivalent keys','line_number':1038,'multiline':False]
['text':'! (possibly contains multiple copies of the same key value) and provides for','line_number':1039,'multiline':False]
['text':'! fast retrieval of the keys themselves. Class multiset supports bidirectional iterators.','line_number':1040,'multiline':False]
['text':'!','line_number':1041,'multiline':False]
['text':'! A multiset satisfies all of the requirements of a container and of a reversible','line_number':1042,'multiline':False]
['text':'! container, and of an associative container). multiset also provides most operations','line_number':1043,'multiline':False]
['text':'! described for duplicate keys.','line_number':1044,'multiline':False]
['text':'!','line_number':1045,'multiline':False]
['text':'! \tparam Key is the type to be inserted in the set, which is also the key_type','line_number':1046,'multiline':False]
['text':'! \tparam Compare is the comparison functor used to order keys','line_number':1047,'multiline':False]
['text':'! \tparam Allocator is the allocator to be used to allocate memory for this container','line_number':1048,'multiline':False]
['text':'! \tparam Options is an packed option type generated using using boost::container::tree_assoc_options.','line_number':1049,'multiline':False]
['text':'/ @cond','line_number':1055,'multiline':False]
['text':'/ @endcond','line_number':1058,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1065,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1069,'multiline':False]
['text':'','line_number':1070,'multiline':False]
['text':'                    types','line_number':1071,'multiline':False]
['text':'','line_number':1072,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1073,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1093,'multiline':False]
['text':'','line_number':1094,'multiline':False]
['text':'          construct/copy/destroy','line_number':1095,'multiline':False]
['text':'','line_number':1096,'multiline':False]
['text':'////////////////////////////////////////////','line_number':1097,'multiline':False]
['text':'! @copydoc ::boost::container::set::set()','line_number':1099,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(const allocator_type&)','line_number':1106,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(const Compare&)','line_number':1111,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(const Compare&, const allocator_type&)','line_number':1116,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(InputIterator, InputIterator)','line_number':1121,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(InputIterator, InputIterator, const allocator_type&)','line_number':1127,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(InputIterator, InputIterator, const Compare&)','line_number':1133,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(InputIterator, InputIterator, const Compare&, const allocator_type&)','line_number':1139,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multiset and','line_number':1145,'multiline':False]
['text':'! and inserts elements from the ordered range [first ,last ). This function','line_number':1146,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1147,'multiline':False]
['text':'!','line_number':1148,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1149,'multiline':False]
['text':'!','line_number':1150,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1151,'multiline':False]
['text':'!','line_number':1152,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1153,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multiset using the specified comparison object and','line_number':1159,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last ). This function','line_number':1160,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1161,'multiline':False]
['text':'!','line_number':1162,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1163,'multiline':False]
['text':'!','line_number':1164,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1165,'multiline':False]
['text':'!','line_number':1166,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1167,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multiset using the specified comparison object and','line_number':1173,'multiline':False]
['text':'! allocator, and inserts elements from the ordered range [first ,last ). This function','line_number':1174,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1175,'multiline':False]
['text':'!','line_number':1176,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1177,'multiline':False]
['text':'!','line_number':1178,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1179,'multiline':False]
['text':'!','line_number':1180,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1181,'multiline':False]
['text':'! <b>Effects</b>: Constructs an empty multiset using the specified allocator and','line_number':1187,'multiline':False]
['text':'! inserts elements from the ordered range [first ,last ). This function','line_number':1188,'multiline':False]
['text':'! is more efficient than the normal range creation for ordered ranges.','line_number':1189,'multiline':False]
['text':'!','line_number':1190,'multiline':False]
['text':'! <b>Requires</b>: [first ,last) must be ordered according to the predicate.','line_number':1191,'multiline':False]
['text':'!','line_number':1192,'multiline':False]
['text':'! <b>Complexity</b>: Linear in N.','line_number':1193,'multiline':False]
['text':'!','line_number':1194,'multiline':False]
['text':'! <b>Note</b>: Non-standard extension.','line_number':1195,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(std::initializer_list<value_type>)','line_number':1202,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(std::initializer_list<value_type>, const allocator_type&)','line_number':1207,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(std::initializer_list<value_type>, const Compare&)','line_number':1212,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(std::initializer_list<value_type>, const Compare&, const allocator_type&)','line_number':1217,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(ordered_unique_range_t, std::initializer_list<value_type>)','line_number':1222,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(ordered_unique_range_t, std::initializer_list<value_type>, const Compare&)','line_number':1227,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(ordered_unique_range_t, std::initializer_list<value_type>, const Compare&, const allocator_type&)','line_number':1232,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(const set &)','line_number':1238,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(set &&)','line_number':1243,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(const set &, const allocator_type &)','line_number':1249,'multiline':False]
['text':'! @copydoc ::boost::container::set::set(set &&, const allocator_type &)','line_number':1254,'multiline':False]
['text':'! @copydoc ::boost::container::set::operator=(const set &)','line_number':1259,'multiline':False]
['text':'! @copydoc ::boost::container::set::operator=(set &&)','line_number':1263,'multiline':False]
['text':'! @copydoc ::boost::container::set::operator=(std::initializer_list<value_type>)','line_number':1271,'multiline':False]
['text':'! @copydoc ::boost::container::set::get_allocator()','line_number':1281,'multiline':False]
['text':'! @copydoc ::boost::container::set::get_stored_allocator()','line_number':1284,'multiline':False]
['text':'! @copydoc ::boost::container::set::get_stored_allocator() const','line_number':1287,'multiline':False]
['text':'! @copydoc ::boost::container::set::begin()','line_number':1290,'multiline':False]
['text':'! @copydoc ::boost::container::set::begin() const','line_number':1293,'multiline':False]
['text':'! @copydoc ::boost::container::set::cbegin() const','line_number':1296,'multiline':False]
['text':'! @copydoc ::boost::container::set::end()','line_number':1299,'multiline':False]
['text':'! @copydoc ::boost::container::set::end() const','line_number':1302,'multiline':False]
['text':'! @copydoc ::boost::container::set::cend() const','line_number':1305,'multiline':False]
['text':'! @copydoc ::boost::container::set::rbegin()','line_number':1308,'multiline':False]
['text':'! @copydoc ::boost::container::set::rbegin() const','line_number':1311,'multiline':False]
['text':'! @copydoc ::boost::container::set::crbegin() const','line_number':1314,'multiline':False]
['text':'! @copydoc ::boost::container::set::rend()','line_number':1317,'multiline':False]
['text':'! @copydoc ::boost::container::set::rend() const','line_number':1320,'multiline':False]
['text':'! @copydoc ::boost::container::set::crend() const','line_number':1323,'multiline':False]
['text':'! @copydoc ::boost::container::set::empty() const','line_number':1326,'multiline':False]
['text':'! @copydoc ::boost::container::set::size() const','line_number':1329,'multiline':False]
['text':'! @copydoc ::boost::container::set::max_size() const','line_number':1332,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1335,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type Key constructed with','line_number':1339,'multiline':False]
['text':'!   std::forward<Args>(args)... and returns the iterator pointing to the','line_number':1340,'multiline':False]
['text':'!   newly inserted element.','line_number':1341,'multiline':False]
['text':'!','line_number':1342,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1343,'multiline':False]
['text':'! <b>Effects</b>: Inserts an object of type Key constructed with','line_number':1348,'multiline':False]
['text':'!   std::forward<Args>(args)...','line_number':1349,'multiline':False]
['text':'!','line_number':1350,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1351,'multiline':False]
['text':'!   to the key of x.','line_number':1352,'multiline':False]
['text':'!','line_number':1353,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1354,'multiline':False]
['text':'!   is inserted right before p.','line_number':1355,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1360,'multiline':False]
['text':'','line_number':1370,'multiline':False]
['text':' !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':1374,'multiline':False]
['text':'! <b>Effects</b>: Inserts x and returns the iterator pointing to the','line_number':1377,'multiline':False]
['text':'!   newly inserted element.','line_number':1378,'multiline':False]
['text':'!','line_number':1379,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic.','line_number':1380,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container.','line_number':1383,'multiline':False]
['text':'!','line_number':1384,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1385,'multiline':False]
['text':'!   to the key of x.','line_number':1386,'multiline':False]
['text':'!','line_number':1387,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1388,'multiline':False]
['text':'!   is inserted right before p.','line_number':1389,'multiline':False]
['text':'! <b>Effects</b>: Inserts a copy of x in the container.','line_number':1396,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1397,'multiline':False]
['text':'!','line_number':1398,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1399,'multiline':False]
['text':'!   to the key of x.','line_number':1400,'multiline':False]
['text':'!','line_number':1401,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1402,'multiline':False]
['text':'!   is inserted right before p.','line_number':1403,'multiline':False]
['text':'! <b>Effects</b>: Inserts a value move constructed from x in the container.','line_number':1406,'multiline':False]
['text':'!   p is a hint pointing to where the insert should start to search.','line_number':1407,'multiline':False]
['text':'!','line_number':1408,'multiline':False]
['text':'! <b>Returns</b>: An iterator pointing to the element with key equivalent','line_number':1409,'multiline':False]
['text':'!   to the key of x.','line_number':1410,'multiline':False]
['text':'!','line_number':1411,'multiline':False]
['text':'! <b>Complexity</b>: Logarithmic in general, but amortized constant if t','line_number':1412,'multiline':False]
['text':'!   is inserted right before p.','line_number':1413,'multiline':False]
['text':'! <b>Requires</b>: first, last are not iterators into *this.','line_number':1420,'multiline':False]
['text':'!','line_number':1421,'multiline':False]
['text':'! <b>Effects</b>: inserts each element from the range [first,last) .','line_number':1422,'multiline':False]
['text':'!','line_number':1423,'multiline':False]
['text':'! <b>Complexity</b>: At most N log(size()+N) (N is the distance from first to last)','line_number':1424,'multiline':False]
['text':'! @copydoc ::boost::container::set::insert(std::initializer_list<value_type>)','line_number':1430,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::insert(node_type&&)','line_number':1435,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::insert(const_iterator, node_type&&)','line_number':1439,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::merge(multimap<Key, T, C2, Allocator, Options>&)','line_number':1443,'multiline':False]
['text':'! @copydoc ::boost::container::multiset::merge(multiset<Key, C2, Allocator, Options>&)','line_number':1452,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::merge(map<Key, T, C2, Allocator, Options>&)','line_number':1457,'multiline':False]
['text':'! @copydoc ::boost::container::multiset::merge(set<Key, C2, Allocator, Options>&)','line_number':1466,'multiline':False]
['text':'! @copydoc ::boost::container::set::erase(const_iterator)','line_number':1473,'multiline':False]
['text':'! @copydoc ::boost::container::set::erase(const key_type&)','line_number':1476,'multiline':False]
['text':'! @copydoc ::boost::container::set::erase(const_iterator,const_iterator)','line_number':1479,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::extract(const_iterator)','line_number':1482,'multiline':False]
['text':'! @copydoc ::boost::container::multimap::extract(const key_type&)','line_number':1485,'multiline':False]
['text':'! @copydoc ::boost::container::set::swap','line_number':1488,'multiline':False]
['text':'! @copydoc ::boost::container::set::clear','line_number':1493,'multiline':False]
['text':'! @copydoc ::boost::container::set::key_comp','line_number':1496,'multiline':False]
['text':'! @copydoc ::boost::container::set::value_comp','line_number':1499,'multiline':False]
['text':'! @copydoc ::boost::container::set::find(const key_type& )','line_number':1502,'multiline':False]
['text':'! @copydoc ::boost::container::set::find(const key_type& ) const','line_number':1505,'multiline':False]
['text':'! @copydoc ::boost::container::set::find(const K& )','line_number':1508,'multiline':False]
['text':'! @copydoc ::boost::container::set::find(const K& )','line_number':1512,'multiline':False]
['text':'! @copydoc ::boost::container::set::count(const key_type& ) const','line_number':1516,'multiline':False]
['text':'! @copydoc ::boost::container::set::count(const K& ) const','line_number':1519,'multiline':False]
['text':'! @copydoc ::boost::container::set::contains(const key_type& ) const','line_number':1523,'multiline':False]
['text':'! @copydoc ::boost::container::set::contains(const K& ) const','line_number':1526,'multiline':False]
['text':'! @copydoc ::boost::container::set::lower_bound(const key_type& )','line_number':1530,'multiline':False]
['text':'! @copydoc ::boost::container::set::lower_bound(const key_type& ) const','line_number':1533,'multiline':False]
['text':'! @copydoc ::boost::container::set::lower_bound(const K& )','line_number':1536,'multiline':False]
['text':'! @copydoc ::boost::container::set::lower_bound(const K& ) const','line_number':1540,'multiline':False]
['text':'! @copydoc ::boost::container::set::upper_bound(const key_type& )','line_number':1544,'multiline':False]
['text':'! @copydoc ::boost::container::set::upper_bound(const key_type& ) const','line_number':1547,'multiline':False]
['text':'! @copydoc ::boost::container::set::upper_bound(const K& )','line_number':1550,'multiline':False]
['text':'! @copydoc ::boost::container::set::upper_bound(const K& ) const','line_number':1554,'multiline':False]
['text':'! @copydoc ::boost::container::set::equal_range(const key_type& ) const','line_number':1558,'multiline':False]
['text':'! @copydoc ::boost::container::set::equal_range(const key_type& )','line_number':1561,'multiline':False]
['text':'! @copydoc ::boost::container::set::equal_range(const K& ) const','line_number':1564,'multiline':False]
['text':'! @copydoc ::boost::container::set::equal_range(const K& )','line_number':1568,'multiline':False]
['text':'! @copydoc ::boost::container::set::rebalance()','line_number':1572,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are equal','line_number':1575,'multiline':False]
['text':'!','line_number':1576,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1577,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x and y are unequal','line_number':1580,'multiline':False]
['text':'!','line_number':1581,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1582,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is less than y','line_number':1585,'multiline':False]
['text':'!','line_number':1586,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1587,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is greater than y','line_number':1590,'multiline':False]
['text':'!','line_number':1591,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1592,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or less than y','line_number':1595,'multiline':False]
['text':'!','line_number':1596,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1597,'multiline':False]
['text':'! <b>Effects</b>: Returns true if x is equal or greater than y','line_number':1600,'multiline':False]
['text':'!','line_number':1601,'multiline':False]
['text':'! <b>Complexity</b>: Linear to the number of elements in the container.','line_number':1602,'multiline':False]
['text':'! <b>Effects</b>: x.swap(y)','line_number':1605,'multiline':False]
['text':'!','line_number':1606,'multiline':False]
['text':'! <b>Complexity</b>: Constant.','line_number':1607,'multiline':False]
['text':'#if defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':1612,'multiline':False]
['text':' Compare','line_number':1625,'multiline':False]
['text':' Allocator','line_number':1630,'multiline':False]
['text':' Compare','line_number':1652,'multiline':False]
['text':' Allocator','line_number':1657,'multiline':False]
['text':'namespace container {','line_number':1676,'multiline':False]
['text':'!has_trivial_destructor_after_move<> == true_type','line_number':1678,'multiline':False]
['text':'!specialization for optimizations','line_number':1679,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':1689,'multiline':False]
['text':' BOOST_CONTAINER_SET_HPP','line_number':1695,'multiline':False]
