['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'! The memory_resource class is an abstract interface to an','line_number':29,'multiline':False]
['text':'! unbounded set of classes encapsulating memory resources.','line_number':30,'multiline':False]
['text':' For exposition only','line_number':34,'multiline':False]
['text':'! <b>Effects</b>: Destroys','line_number':38,'multiline':False]
['text':'! this memory_resource.','line_number':39,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to','line_number':42,'multiline':False]
['text':'! `return do_allocate(bytes, alignment);`','line_number':43,'multiline':False]
['text':'Obtain a pointer to enough storage and initialize the lifetime ','line_number':46,'multiline':False]
['text':'of an array object of the given size in the address','line_number':47,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to','line_number':51,'multiline':False]
['text':'! `return do_deallocate(bytes, alignment);`','line_number':52,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to','line_number':56,'multiline':False]
['text':'! `return return do_is_equal(other);`','line_number':57,'multiline':False]
['text':'! <b>Returns</b>:','line_number':63,'multiline':False]
['text':'!   `&a == &b || a.is_equal(b)`.','line_number':64,'multiline':False]
['text':'! <b>Returns</b>:','line_number':68,'multiline':False]
['text':'!   !(a == b).','line_number':69,'multiline':False]
['text':'! <b>Returns</b>:','line_number':75,'multiline':False]
['text':'!   `&a == &b || a.is_equal(b)`.','line_number':76,'multiline':False]
['text':'! <b>Returns</b>:','line_number':79,'multiline':False]
['text':'!   !(a == b).','line_number':80,'multiline':False]
['text':'! <b>Requires</b>: Alignment shall be a power of two.','line_number':86,'multiline':False]
['text':'!','line_number':87,'multiline':False]
['text':'! <b>Returns</b>: A derived class shall implement this function to return a pointer','line_number':88,'multiline':False]
['text':'!   to allocated storage with a size of at least bytes. The returned storage is','line_number':89,'multiline':False]
['text':'!   aligned to the specified alignment, if such alignment is supported; otherwise','line_number':90,'multiline':False]
['text':'!   it is aligned to max_align.','line_number':91,'multiline':False]
['text':'!','line_number':92,'multiline':False]
['text':'! <b>Throws</b>: A derived class implementation shall throw an appropriate exception if','line_number':93,'multiline':False]
['text':'!   it is unable to allocate memory with the requested size and alignment.','line_number':94,'multiline':False]
['text':'! <b>Requires</b>: p shall have been returned from a prior call to','line_number':97,'multiline':False]
['text':'!   `allocate(bytes, alignment)` on a memory resource equal to *this, and the storage','line_number':98,'multiline':False]
['text':'!   at p shall not yet have been deallocated.','line_number':99,'multiline':False]
['text':'!','line_number':100,'multiline':False]
['text':'! <b>Effects</b>: A derived class shall implement this function to dispose of allocated storage.','line_number':101,'multiline':False]
['text':'!','line_number':102,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':103,'multiline':False]
['text':'! <b>Returns</b>: A derived class shall implement this function to return true if memory','line_number':106,'multiline':False]
['text':'!   allocated from this can be deallocated from other and vice-versa; otherwise it shall','line_number':107,'multiline':False]
['text':'!   return false. <i>[Note: The most-derived type of other might not match the type of this.','line_number':108,'multiline':False]
['text':'!   For a derived class, D, a typical implementation of this function will compute','line_number':109,'multiline':False]
['text':'!   `dynamic_cast<const D*>(&other)` and go no further (i.e., return false)','line_number':110,'multiline':False]
['text':'!   if it returns nullptr. - end note]</i>.','line_number':111,'multiline':False]
['text':'! <b>Returns</b>:','line_number':117,'multiline':False]
['text':'!   `&a == &b || a.is_equal(b)`.','line_number':118,'multiline':False]
['text':'! <b>Returns</b>:','line_number':122,'multiline':False]
['text':'!   !(a == b).','line_number':123,'multiline':False]
['text':'namespace pmr {','line_number':129,'multiline':False]
['text':'namespace container {','line_number':130,'multiline':False]
['text':'namespace boost {','line_number':131,'multiline':False]
['text':'BOOST_CONTAINER_PMR_MEMORY_RESOURCE_HPP','line_number':135,'multiline':False]
