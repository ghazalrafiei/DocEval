['text':'///////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga  2013-2013','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':'       OPTIONS FOR ASSOCIATIVE TREE-BASED CONTAINERS','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':38,'multiline':False]
['text':'! Enumeration used to configure ordered associative containers','line_number':40,'multiline':False]
['text':'! with a concrete tree implementation.','line_number':41,'multiline':False]
['text':'!defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':61,'multiline':False]
['text':'!This option setter specifies the underlying tree type','line_number':63,'multiline':False]
['text':'!(red-black, AVL, Scapegoat or Splay) for ordered associative containers','line_number':64,'multiline':False]
['text':'!This option setter specifies if node size is optimized','line_number':67,'multiline':False]
['text':'!storing rebalancing data masked into pointers for ordered associative containers','line_number':68,'multiline':False]
['text':'! Helper metafunction to combine options into a single type to be used','line_number':71,'multiline':False]
['text':'! by \c boost::container::set, \c boost::container::multiset','line_number':72,'multiline':False]
['text':'! \c boost::container::map and \c boost::container::multimap.','line_number':73,'multiline':False]
['text':'! Supported options are: \c boost::container::optimize_size and \c boost::container::tree_type','line_number':74,'multiline':False]
['text':'/ @cond','line_number':82,'multiline':False]
['text':'/ @endcond','line_number':92,'multiline':False]
['text':'! Helper alias metafunction to combine options into a single type to be used','line_number':98,'multiline':False]
['text':'! by tree-based associative containers','line_number':99,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':'       OPTIONS FOR ASSOCIATIVE HASH-BASED CONTAINERS','line_number':109,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':112,'multiline':False]
['text':'!defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':124,'multiline':False]
['text':'!This option setter specifies if node size is optimized','line_number':126,'multiline':False]
['text':'!storing rebalancing data masked into pointers for ordered associative containers','line_number':127,'multiline':False]
['text':'! Helper metafunction to combine options into a single type to be used','line_number':130,'multiline':False]
['text':'! by \c boost::container::hash_set, \c boost::container::hash_multiset','line_number':131,'multiline':False]
['text':'! \c boost::container::hash_map and \c boost::container::hash_multimap.','line_number':132,'multiline':False]
['text':'! Supported options are: \c boost::container::store_hash','line_number':133,'multiline':False]
['text':'/ @cond','line_number':141,'multiline':False]
['text':'/ @endcond','line_number':151,'multiline':False]
['text':'! Helper alias metafunction to combine options into a single type to be used','line_number':157,'multiline':False]
['text':'! by hash-based associative containers','line_number':158,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':'','line_number':166,'multiline':False]
['text':'          OPTIONS FOR VECTOR-BASED CONTAINERS','line_number':167,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':170,'multiline':False]
['text':'!defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':225,'multiline':False]
['text':'!This growth factor argument specifies that the container should increase it's','line_number':227,'multiline':False]
['text':'!capacity a 50% when existing capacity is exhausted.','line_number':228,'multiline':False]
['text':'!This growth factor argument specifies that the container should increase it's','line_number':231,'multiline':False]
['text':'!capacity a 60% when existing capacity is exhausted.','line_number':232,'multiline':False]
['text':'!This growth factor argument specifies that the container should increase it's','line_number':235,'multiline':False]
['text':'!capacity a 100% (doubling its capacity) when existing capacity is exhausted.','line_number':236,'multiline':False]
['text':'!defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':239,'multiline':False]
['text':'!This option setter specifies the growth factor strategy of the underlying vector.','line_number':241,'multiline':False]
['text':'!','line_number':242,'multiline':False]
['text':'!\tparam GrowthFactor A function object that has the following signature:<br/><br/>','line_number':243,'multiline':False]
['text':'!`template<class SizeType>`<br/>','line_number':244,'multiline':False]
['text':'!`SizeType operator()(SizeType cur_cap, SizeType add_min_cap, SizeType max_cap) const;`.<br/><br/>','line_number':245,'multiline':False]
['text':'!`cur_cap` is the current capacity, `add_min_cap` is the minimum additional capacity','line_number':246,'multiline':False]
['text':'!we want to achieve and `max_cap` is the maximum capacity that the allocator or other ','line_number':247,'multiline':False]
['text':'!factors allow. The implementation should return a value between `cur_cap` + `add_min_cap`','line_number':248,'multiline':False]
['text':'!and `max_cap`. `cur_cap` + `add_min_cap` is guaranteed not to overflow/wraparound,','line_number':249,'multiline':False]
['text':'! but the implementation should handle wraparound produced by the growth factor.','line_number':250,'multiline':False]
['text':'!','line_number':251,'multiline':False]
['text':'!Predefined growth factors that can be passed as arguments to this option are:','line_number':252,'multiline':False]
['text':'!\c boost::container::growth_factor_50','line_number':253,'multiline':False]
['text':'!\c boost::container::growth_factor_60','line_number':254,'multiline':False]
['text':'!\c boost::container::growth_factor_100','line_number':255,'multiline':False]
['text':'!','line_number':256,'multiline':False]
['text':'!If this option is not specified, a default will be used by the container.','line_number':257,'multiline':False]
['text':'!This option specifies the unsigned integer type that a user wants the container','line_number':260,'multiline':False]
['text':'!to use to hold size-related information inside a container (e.g. current size, current capacity).','line_number':261,'multiline':False]
['text':'!','line_number':262,'multiline':False]
['text':'!\tparam StoredSizeType An unsigned integer type. It shall be smaller than than the size','line_number':263,'multiline':False]
['text':'! of the size_type deduced from `allocator_traits<A>::size_type` or the same type.','line_number':264,'multiline':False]
['text':'!','line_number':265,'multiline':False]
['text':'!If the maximum capacity() to be used is limited, a user can try to use 8-bit, 16-bit ','line_number':266,'multiline':False]
['text':'!(e.g. in 32-bit machines), or 32-bit size types (e.g. in a 64 bit machine) to see if some','line_number':267,'multiline':False]
['text':'!memory can be saved for empty vectors. This could potentially performance benefits due to better','line_number':268,'multiline':False]
['text':'!cache usage.','line_number':269,'multiline':False]
['text':'!','line_number':270,'multiline':False]
['text':'!Note that alignment requirements can disallow theoretical space savings. Example:','line_number':271,'multiline':False]
['text':'!\c vector holds a pointer and two size types (for size and capacity), in a 32 bit machine','line_number':272,'multiline':False]
['text':'!a 8 bit size type (total size: 4 byte pointer + 2 x 1 byte sizes = 6 bytes) ','line_number':273,'multiline':False]
['text':'!will not save space when comparing two 16-bit size types because usually','line_number':274,'multiline':False]
['text':'!a 32 bit alignment is required for vector and the size will be rounded to 8 bytes. In a 64-bit','line_number':275,'multiline':False]
['text':'!machine a 16 bit size type does not usually save memory when comparing to a 32-bit size type.','line_number':276,'multiline':False]
['text':'!Measure the size of the resulting container and do not assume a smaller \c stored_size','line_number':277,'multiline':False]
['text':'!will always lead to a smaller sizeof(container).','line_number':278,'multiline':False]
['text':'!','line_number':279,'multiline':False]
['text':'!If a user tries to insert more elements than representable by \c stored_size, vector','line_number':280,'multiline':False]
['text':'!will throw a length_error.','line_number':281,'multiline':False]
['text':'!','line_number':282,'multiline':False]
['text':'!If this option is not specified, `allocator_traits<A>::size_type` (usually std::size_t) will','line_number':283,'multiline':False]
['text':'!be used to store size-related information inside the container.','line_number':284,'multiline':False]
['text':'! Helper metafunction to combine options into a single type to be used','line_number':287,'multiline':False]
['text':'! by \c boost::container::vector.','line_number':288,'multiline':False]
['text':'! Supported options are: \c boost::container::growth_factor and \c boost::container::stored_size','line_number':289,'multiline':False]
['text':'/ @cond','line_number':297,'multiline':False]
['text':'/ @endcond','line_number':308,'multiline':False]
['text':'! Helper alias metafunction to combine options into a single type to be used','line_number':314,'multiline':False]
['text':'! by \c boost::container::vector.','line_number':315,'multiline':False]
['text':'! Supported options are: \c boost::container::growth_factor and \c boost::container::stored_size','line_number':316,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':322,'multiline':False]
['text':'','line_number':323,'multiline':False]
['text':'','line_number':324,'multiline':False]
['text':'          OPTIONS FOR SMALL-VECTOR CONTAINER','line_number':325,'multiline':False]
['text':'','line_number':326,'multiline':False]
['text':'','line_number':327,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':328,'multiline':False]
['text':'! This option specifies the desired alignment for the value_type stored','line_number':330,'multiline':False]
['text':'! in the container.','line_number':331,'multiline':False]
['text':'! A value zero represents the natural alignment.','line_number':332,'multiline':False]
['text':'!','line_number':333,'multiline':False]
['text':'!\tparam Alignment An unsigned integer value. Must be power of two.','line_number':334,'multiline':False]
['text':'!defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':348,'multiline':False]
['text':'! Helper metafunction to combine options into a single type to be used','line_number':350,'multiline':False]
['text':'! by \c boost::container::small_vector.','line_number':351,'multiline':False]
['text':'! Supported options are: \c boost::container::growth_factor and \c boost::container::inplace_alignment','line_number':352,'multiline':False]
['text':'/ @cond','line_number':360,'multiline':False]
['text':'/ @endcond','line_number':371,'multiline':False]
['text':'! Helper alias metafunction to combine options into a single type to be used','line_number':377,'multiline':False]
['text':'! by \c boost::container::small_vector.','line_number':378,'multiline':False]
['text':'! Supported options are: \c boost::container::growth_factor and \c boost::container::stored_size','line_number':379,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':386,'multiline':False]
['text':'','line_number':387,'multiline':False]
['text':'','line_number':388,'multiline':False]
['text':'          OPTIONS FOR STATIC-VECTOR CONTAINER','line_number':389,'multiline':False]
['text':'','line_number':390,'multiline':False]
['text':'','line_number':391,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':392,'multiline':False]
['text':'!This option specifies if the container will throw if in','line_number':394,'multiline':False]
['text':'!the static capacity is not sufficient to hold the required','line_number':395,'multiline':False]
['text':'!values. If false is specified, insufficient capacity will','line_number':396,'multiline':False]
['text':'!lead to BOOST_ASSERT, and if this assertion returns, to undefined behaviour,','line_number':397,'multiline':False]
['text':'!which potentially can lead to better static_vector performance.','line_number':398,'multiline':False]
['text':'!The default value is true.','line_number':399,'multiline':False]
['text':'!','line_number':400,'multiline':False]
['text':'!\tparam ThrowOnExhaustion A boolean value. True if throw is required.','line_number':401,'multiline':False]
['text':'!defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':415,'multiline':False]
['text':'! Helper metafunction to combine options into a single type to be used','line_number':417,'multiline':False]
['text':'! by \c boost::container::static_vector.','line_number':418,'multiline':False]
['text':'! Supported options are: \c boost::container::throw_on_overflow and \c boost::container::inplace_alignment','line_number':419,'multiline':False]
['text':'/ @cond','line_number':427,'multiline':False]
['text':'/ @endcond','line_number':438,'multiline':False]
['text':'! Helper alias metafunction to combine options into a single type to be used','line_number':444,'multiline':False]
['text':'! by \c boost::container::static_vector.','line_number':445,'multiline':False]
['text':'! Supported options are: \c boost::container::growth_factor and \c boost::container::stored_size','line_number':446,'multiline':False]
['text':'! Helper metafunction to combine options into a single type to be used','line_number':452,'multiline':False]
['text':'! by \c boost::container::devector.','line_number':453,'multiline':False]
['text':'! Supported options are: \c boost::container::growth_factor and \c boost::container::stored_size','line_number':454,'multiline':False]
['text':'/ @cond','line_number':462,'multiline':False]
['text':'/ @endcond','line_number':473,'multiline':False]
['text':'! Helper alias metafunction to combine options into a single type to be used','line_number':479,'multiline':False]
['text':'! by \c boost::container::devector.','line_number':480,'multiline':False]
['text':'! Supported options are: \c boost::container::growth_factor and \c boost::container::stored_size','line_number':481,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':487,'multiline':False]
['text':'','line_number':488,'multiline':False]
['text':'','line_number':489,'multiline':False]
['text':'          OPTIONS FOR DEQUE-BASED CONTAINERS','line_number':490,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':'','line_number':492,'multiline':False]
['text':'//////////////////////////////////////////////////////////////','line_number':493,'multiline':False]
['text':'! Helper metafunction to combine options into a single type to be used','line_number':509,'multiline':False]
['text':'! by \c boost::container::deque.','line_number':510,'multiline':False]
['text':'! Supported options are: \c boost::container::block_bytes','line_number':511,'multiline':False]
['text':'/ @cond','line_number':519,'multiline':False]
['text':'/ @endcond','line_number':529,'multiline':False]
['text':'! Helper alias metafunction to combine options into a single type to be used','line_number':535,'multiline':False]
['text':'! by \c boost::container::deque.','line_number':536,'multiline':False]
['text':'! Supported options are: \c boost::container::block_bytes','line_number':537,'multiline':False]
['text':'!This option specifies the maximum size of a block in bytes: this delimites the number of contiguous elements','line_number':543,'multiline':False]
['text':'!that will be allocated by deque as min(1u, BlockBytes/sizeof(value_type))','line_number':544,'multiline':False]
['text':'!A value zero represents the default value.','line_number':545,'multiline':False]
['text':'!','line_number':546,'multiline':False]
['text':'!\tparam BlockBytes An unsigned integer value.','line_number':547,'multiline':False]
['text':'!This option specifies the size of a block, delimites the number of contiguous elements','line_number':550,'multiline':False]
['text':'!that will be allocated by deque as BlockSize.','line_number':551,'multiline':False]
['text':'!A value zero represents the default value.','line_number':552,'multiline':False]
['text':'!','line_number':553,'multiline':False]
['text':'!\tparam BlockBytes An unsigned integer value.','line_number':554,'multiline':False]
['text':'namespace container {','line_number':557,'multiline':False]
['text':'namespace boost {','line_number':558,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_OPTIONS_HPP','line_number':562,'multiline':False]
