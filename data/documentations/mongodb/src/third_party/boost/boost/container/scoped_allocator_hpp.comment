['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Pablo Halpern 2009. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2011-2013. Distributed under the Boost','line_number':9,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':10,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':15,'multiline':False]
['text':'namespace dtl {','line_number':102,'multiline':False]
['text':'#if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':261,'multiline':False]
['text':'Let's add a dummy first template parameter to allow creating','line_number':263,'multiline':False]
['text':'specializations up to maximum InnerAlloc count','line_number':264,'multiline':False]
['text':'Specializations for the adaptor with InnerAlloc allocators','line_number':268,'multiline':False]
['text':'!','line_number':397,'multiline':False]
['text':'#if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)','line_number':401,'multiline':False]
['text':'Specialization for adaptor without any InnerAlloc','line_number':413,'multiline':False]
['text':'Don't use inner_traits_type::select_on_container_copy_construction(this->inner_allocator())','line_number':517,'multiline':False]
['text':'as inner_allocator() is equal to *this and that would trigger an infinite loop','line_number':518,'multiline':False]
['text':'namespace dtl {','line_number':524,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':526,'multiline':False]
['text':'Scoped allocator','line_number':528,'multiline':False]
['text':'! This class is a C++03-compatible implementation of std::scoped_allocator_adaptor.','line_number':533,'multiline':False]
['text':'! The class template scoped_allocator_adaptor is an allocator template that specifies','line_number':534,'multiline':False]
['text':'! the memory resource (the outer allocator) to be used by a container (as any other','line_number':535,'multiline':False]
['text':'! allocator does) and also specifies an inner allocator resource to be passed to','line_number':536,'multiline':False]
['text':'! the constructor of every element within the container.','line_number':537,'multiline':False]
['text':'!','line_number':538,'multiline':False]
['text':'! This adaptor is','line_number':539,'multiline':False]
['text':'! instantiated with one outer and zero or more inner allocator types. If','line_number':540,'multiline':False]
['text':'! instantiated with only one allocator type, the inner allocator becomes the','line_number':541,'multiline':False]
['text':'! scoped_allocator_adaptor itself, thus using the same allocator resource for the','line_number':542,'multiline':False]
['text':'! container and every element within the container and, if the elements themselves','line_number':543,'multiline':False]
['text':'! are containers, each of their elements recursively. If instantiated with more than','line_number':544,'multiline':False]
['text':'! one allocator, the first allocator is the outer allocator for use by the container,','line_number':545,'multiline':False]
['text':'! the second allocator is passed to the constructors of the container's elements,','line_number':546,'multiline':False]
['text':'! and, if the elements themselves are containers, the third allocator is passed to','line_number':547,'multiline':False]
['text':'! the elements' elements, and so on. If containers are nested to a depth greater','line_number':548,'multiline':False]
['text':'! than the number of allocators, the last allocator is used repeatedly, as in the','line_number':549,'multiline':False]
['text':'! single-allocator case, for any remaining recursions.','line_number':550,'multiline':False]
['text':'!','line_number':551,'multiline':False]
['text':'! [<b>Note</b>: The','line_number':552,'multiline':False]
['text':'! scoped_allocator_adaptor is derived from the outer allocator type so it can be','line_number':553,'multiline':False]
['text':'! substituted for the outer allocator type in most expressions. -end note]','line_number':554,'multiline':False]
['text':'!','line_number':555,'multiline':False]
['text':'! In the construct member functions, <code>OUTERMOST(x)</code> is x if x does not have','line_number':556,'multiline':False]
['text':'! an <code>outer_allocator()</code> member function and','line_number':557,'multiline':False]
['text':'! <code>OUTERMOST(x.outer_allocator())</code> otherwise; <code>OUTERMOST_ALLOC_TRAITS(x)</code> is','line_number':558,'multiline':False]
['text':'! <code>allocator_traits<decltype(OUTERMOST(x))></code>.','line_number':559,'multiline':False]
['text':'!','line_number':560,'multiline':False]
['text':'! [<b>Note</b>: <code>OUTERMOST(x)</code> and','line_number':561,'multiline':False]
['text':'! <code>OUTERMOST_ALLOC_TRAITS(x)</code> are recursive operations. It is incumbent upon','line_number':562,'multiline':False]
['text':'! the definition of <code>outer_allocator()</code> to ensure that the recursion terminates.','line_number':563,'multiline':False]
['text':'! It will terminate for all instantiations of scoped_allocator_adaptor. -end note]','line_number':564,'multiline':False]
['text':' #if !defined(BOOST_CONTAINER_UNIMPLEMENTED_PACK_EXPANSION_TO_FIXED_LIST)','line_number':568,'multiline':False]
['text':' #if !defined(BOOST_CONTAINER_UNIMPLEMENTED_PACK_EXPANSION_TO_FIXED_LIST)','line_number':573,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) || defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':575,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':591,'multiline':False]
['text':'! Type: For exposition only','line_number':593,'multiline':False]
['text':'!','line_number':594,'multiline':False]
['text':'! Type: <code>scoped_allocator_adaptor<OuterAlloc></code> if <code>sizeof...(InnerAllocs)</code> is zero; otherwise,','line_number':596,'multiline':False]
['text':'! <code>scoped_allocator_adaptor<InnerAllocs...></code>.','line_number':597,'multiline':False]
['text':'! Type: A type with a constant boolean <code>value</code> == true if','line_number':607,'multiline':False]
['text':'!`allocator_traits<Allocator>:: propagate_on_container_copy_assignment::value` is','line_number':608,'multiline':False]
['text':'! true for any <code>Allocator</code> in the set of <code>OuterAlloc</code> and <code>InnerAllocs...</code>, false otherwise.','line_number':609,'multiline':False]
['text':'! Type: A type with a constant boolean <code>value</code> == true if','line_number':612,'multiline':False]
['text':'!`allocator_traits<Allocator>:: propagate_on_container_move_assignment::value` is','line_number':613,'multiline':False]
['text':'! true for any <code>Allocator</code> in the set of <code>OuterAlloc</code> and <code>InnerAllocs...</code>, false otherwise.','line_number':614,'multiline':False]
['text':'! Type: A type with a constant boolean <code>value</code> == true if','line_number':618,'multiline':False]
['text':'! `allocator_traits<Allocator>:: propagate_on_container_swap::value` is','line_number':619,'multiline':False]
['text':'! true for any <code>Allocator</code> in the set of <code>OuterAlloc</code> and <code>InnerAllocs...</code>, false otherwise.','line_number':620,'multiline':False]
['text':'! Type: A type with a constant boolean <code>value</code> == true if','line_number':624,'multiline':False]
['text':'!`allocator_traits<Allocator>:: is_always_equal::value` is','line_number':625,'multiline':False]
['text':'! true for all <code>Allocator</code> in the set of <code>OuterAlloc</code> and <code>InnerAllocs...</code>, false otherwise.','line_number':626,'multiline':False]
['text':'! Type: Rebinds scoped allocator to','line_number':630,'multiline':False]
['text':'!    <code>typedef scoped_allocator_adaptor','line_number':631,'multiline':False]
['text':'!      < typename outer_traits_type::template portable_rebind_alloc<U>::type','line_number':632,'multiline':False]
['text':'!      , InnerAllocs... ></code>','line_number':633,'multiline':False]
['text':'! <b>Effects</b>: value-initializes the OuterAlloc base class','line_number':642,'multiline':False]
['text':'! and the inner allocator object.','line_number':643,'multiline':False]
['text':'! <b>Effects</b>: initializes each allocator within the adaptor with','line_number':650,'multiline':False]
['text':'! the corresponding allocator from other.','line_number':651,'multiline':False]
['text':'! <b>Effects</b>: move constructs each allocator within the adaptor with','line_number':656,'multiline':False]
['text':'! the corresponding allocator from other.','line_number':657,'multiline':False]
['text':'! <b>Requires</b>: OuterAlloc shall be constructible from OuterA2.','line_number':664,'multiline':False]
['text':'!','line_number':665,'multiline':False]
['text':'! <b>Effects</b>: initializes the OuterAlloc base class with boost::forward<OuterA2>(outerAlloc) and inner','line_number':666,'multiline':False]
['text':'! with innerAllocs...(hence recursively initializing each allocator within the adaptor with the','line_number':667,'multiline':False]
['text':'! corresponding allocator from the argument list).','line_number':668,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) || defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':673,'multiline':False]
['text':'','line_number':680,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) || defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':684,'multiline':False]
['text':'! <b>Requires</b>: OuterAlloc shall be constructible from OuterA2.','line_number':686,'multiline':False]
['text':'!','line_number':687,'multiline':False]
['text':'! <b>Effects</b>: initializes each allocator within the adaptor with the corresponding allocator from other.','line_number':688,'multiline':False]
['text':'! <b>Requires</b>: OuterAlloc shall be constructible from OuterA2.','line_number':694,'multiline':False]
['text':'!','line_number':695,'multiline':False]
['text':'! <b>Effects</b>: initializes each allocator within the adaptor with the corresponding allocator','line_number':696,'multiline':False]
['text':'! rvalue from other.','line_number':697,'multiline':False]
['text':'! <b>Effects</b>: swaps *this with r.','line_number':711,'multiline':False]
['text':'!','line_number':712,'multiline':False]
['text':'! <b>Effects</b>: swaps *this with r.','line_number':715,'multiline':False]
['text':'!','line_number':716,'multiline':False]
['text':'! <b>Returns</b>:','line_number':719,'multiline':False]
['text':'!   <code>static_cast<OuterAlloc&>(*this)</code>.','line_number':720,'multiline':False]
['text':'! <b>Returns</b>:','line_number':723,'multiline':False]
['text':'!   <code>static_cast<const OuterAlloc&>(*this)</code>.','line_number':724,'multiline':False]
['text':'! <b>Returns</b>:','line_number':727,'multiline':False]
['text':'!   *this if <code>sizeof...(InnerAllocs)</code> is zero; otherwise, inner.','line_number':728,'multiline':False]
['text':'! <b>Returns</b>:','line_number':731,'multiline':False]
['text':'!   *this if <code>sizeof...(InnerAllocs)</code> is zero; otherwise, inner.','line_number':732,'multiline':False]
['text':'BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':735,'multiline':False]
['text':'! <b>Returns</b>:','line_number':737,'multiline':False]
['text':'!   <code>allocator_traits<OuterAlloc>:: max_size(outer_allocator())</code>.','line_number':738,'multiline':False]
['text':'! <b>Effects</b>:','line_number':742,'multiline':False]
['text':'!   calls <code>OUTERMOST_ALLOC_TRAITS(*this):: destroy(OUTERMOST(*this), p)</code>.','line_number':743,'multiline':False]
['text':'! <b>Returns</b>:','line_number':751,'multiline':False]
['text':'! <code>allocator_traits<OuterAlloc>::allocate(outer_allocator(), n)</code>.','line_number':752,'multiline':False]
['text':'! <b>Returns</b>:','line_number':756,'multiline':False]
['text':'! <code>allocator_traits<OuterAlloc>::allocate(outer_allocator(), n, hint)</code>.','line_number':757,'multiline':False]
['text':'! <b>Effects</b>:','line_number':761,'multiline':False]
['text':'! <code>allocator_traits<OuterAlloc>::deallocate(outer_allocator(), p, n)</code>.','line_number':762,'multiline':False]
['text':'! <b>Returns</b>: A new scoped_allocator_adaptor object where each allocator','line_number':767,'multiline':False]
['text':'! Allocator in the adaptor is initialized from the result of calling','line_number':768,'multiline':False]
['text':'! <code>allocator_traits<Allocator>::select_on_container_copy_construction()</code> on','line_number':769,'multiline':False]
['text':'! the corresponding allocator in *this.','line_number':770,'multiline':False]
['text':'BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':772,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':778,'multiline':False]
['text':'! <b>Effects</b>:','line_number':782,'multiline':False]
['text':'! 1) If <code>uses_allocator<T, inner_allocator_type>::value</code> is false calls','line_number':783,'multiline':False]
['text':'!    <code>OUTERMOST_ALLOC_TRAITS(*this)::','line_number':784,'multiline':False]
['text':'!       construct(OUTERMOST(*this), p, std::forward<Args>(args)...)</code>.','line_number':785,'multiline':False]
['text':'!','line_number':786,'multiline':False]
['text':'! 2) Otherwise, if <code>uses_allocator<T, inner_allocator_type>::value</code> is true and','line_number':787,'multiline':False]
['text':'!    <code>is_constructible<T, allocator_arg_t, inner_allocator_type, Args...>:: value</code> is true, calls','line_number':788,'multiline':False]
['text':'!    <code>OUTERMOST_ALLOC_TRAITS(*this):: construct(OUTERMOST(*this), p, allocator_arg,','line_number':789,'multiline':False]
['text':'!    inner_allocator(), std::forward<Args>(args)...)</code>.','line_number':790,'multiline':False]
['text':'!','line_number':791,'multiline':False]
['text':'! [<b>Note</b>: In compilers without advanced decltype SFINAE support, <code>is_constructible</code> can't','line_number':792,'multiline':False]
['text':'! be implemented so that condition will be replaced by','line_number':793,'multiline':False]
['text':'! constructible_with_allocator_prefix<T>::value. -end note]','line_number':794,'multiline':False]
['text':'!','line_number':795,'multiline':False]
['text':'! 3) Otherwise, if uses_allocator<T, inner_allocator_type>::value is true and','line_number':796,'multiline':False]
['text':'!    <code>is_constructible<T, Args..., inner_allocator_type>:: value</code> is true, calls','line_number':797,'multiline':False]
['text':'!    <code>OUTERMOST_ALLOC_TRAITS(*this):: construct(OUTERMOST(*this), p,','line_number':798,'multiline':False]
['text':'!    std::forward<Args>(args)..., inner_allocator())</code>.','line_number':799,'multiline':False]
['text':'!','line_number':800,'multiline':False]
['text':'! [<b>Note</b>: In compilers without advanced decltype SFINAE support, <code>is_constructible</code> can't be','line_number':801,'multiline':False]
['text':'! implemented so that condition will be replaced by','line_number':802,'multiline':False]
['text':'! <code>constructible_with_allocator_suffix<T>:: value</code>. -end note]','line_number':803,'multiline':False]
['text':'!','line_number':804,'multiline':False]
['text':'! 4) Otherwise, the program is ill-formed.','line_number':805,'multiline':False]
['text':'!','line_number':806,'multiline':False]
['text':'! [<b>Note</b>: An error will result if <code>uses_allocator</code> evaluates','line_number':807,'multiline':False]
['text':'! to true but the specific constructor does not take an allocator. This definition prevents a silent','line_number':808,'multiline':False]
['text':'! failure to pass an inner allocator to a contained element. -end note]','line_number':809,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) || defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':818,'multiline':False]
['text':'Disable this overload if the first argument is pair as some compilers have','line_number':820,'multiline':False]
['text':'overload selection problems when the first parameter is a pair.','line_number':821,'multiline':False]
['text':'','line_number':830,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) || defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':834,'multiline':False]
['text':'Internal function','line_number':839,'multiline':False]
['text':'#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED','line_number':845,'multiline':False]
['text':'/ @cond','line_number':848,'multiline':False]
['text':'Optimize equal outer allocator types with ','line_number':853,'multiline':False]
['text':'allocator_traits::equal which uses is_always_equal','line_number':854,'multiline':False]
['text':'Otherwise compare it normally','line_number':859,'multiline':False]
['text':'Otherwise compare it normally','line_number':864,'multiline':False]
['text':'when inner allocator count is zero,','line_number':874,'multiline':False]
['text':'inner_allocator_type is the same as outer_allocator_type','line_number':875,'multiline':False]
['text':'so both types can be different in operator==','line_number':876,'multiline':False]
['text':'/ @endcond','line_number':882,'multiline':False]
['text':' namespace boost { namespace container {','line_number':903,'multiline':False]
['text':'  BOOST_CONTAINER_ALLOCATOR_SCOPED_ALLOCATOR_HPP','line_number':907,'multiline':False]
