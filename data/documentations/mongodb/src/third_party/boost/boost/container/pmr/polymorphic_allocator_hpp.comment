['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'! A specialization of class template `polymorphic_allocator` conforms to the Allocator requirements.','line_number':32,'multiline':False]
['text':'! Constructed with different memory resources, different instances of the same specialization of','line_number':33,'multiline':False]
['text':'! `polymorphic_allocator` can exhibit entirely different allocation behavior. This runtime','line_number':34,'multiline':False]
['text':'! polymorphism allows objects that use polymorphic_allocator to behave as if they used different','line_number':35,'multiline':False]
['text':'! allocator types at run time even though they use the same static allocator type.','line_number':36,'multiline':False]
['text':'! <b>Effects</b>: Sets m_resource to','line_number':43,'multiline':False]
['text':'! `get_default_resource()`.','line_number':44,'multiline':False]
['text':'! <b>Requires</b>: r is non-null.','line_number':49,'multiline':False]
['text':'!','line_number':50,'multiline':False]
['text':'! <b>Effects</b>: Sets m_resource to r.','line_number':51,'multiline':False]
['text':'!','line_number':52,'multiline':False]
['text':'! <b>Throws</b>: Nothing','line_number':53,'multiline':False]
['text':'!','line_number':54,'multiline':False]
['text':'! <b>Notes</b>: This constructor provides an implicit conversion from memory_resource*.','line_number':55,'multiline':False]
['text':'! <b>Effects</b>: Sets m_resource to','line_number':60,'multiline':False]
['text':'!   other.resource().','line_number':61,'multiline':False]
['text':'! <b>Effects</b>: Sets m_resource to','line_number':66,'multiline':False]
['text':'!   other.resource().','line_number':67,'multiline':False]
['text':'! <b>Effects</b>: Sets m_resource to','line_number':73,'multiline':False]
['text':'!   other.resource().','line_number':74,'multiline':False]
['text':'! <b>Returns</b>: Equivalent to','line_number':78,'multiline':False]
['text':'!   `static_cast<T*>(m_resource->allocate(n * sizeof(T), alignof(T)))`.','line_number':79,'multiline':False]
['text':'! <b>Requires</b>: p was allocated from a memory resource, x, equal to *m_resource,','line_number':83,'multiline':False]
['text':'! using `x.allocate(n * sizeof(T), alignof(T))`.','line_number':84,'multiline':False]
['text':'!','line_number':85,'multiline':False]
['text':'! <b>Effects</b>: Equivalent to m_resource->deallocate(p, n * sizeof(T), alignof(T)).','line_number':86,'multiline':False]
['text':'!','line_number':87,'multiline':False]
['text':'! <b>Throws</b>: Nothing.','line_number':88,'multiline':False]
['text':'! <b>Requires</b>: Uses-allocator construction of T with allocator','line_number':93,'multiline':False]
['text':'!   `*this` and constructor arguments `std::forward<Args>(args)...`','line_number':94,'multiline':False]
['text':'!   is well-formed. [Note: uses-allocator construction is always well formed for','line_number':95,'multiline':False]
['text':'!   types that do not use allocators. - end note]','line_number':96,'multiline':False]
['text':'!','line_number':97,'multiline':False]
['text':'! <b>Effects</b>: Construct a T object at p by uses-allocator construction with allocator','line_number':98,'multiline':False]
['text':'!   `*this` and constructor arguments `std::forward<Args>(args)...`.','line_number':99,'multiline':False]
['text':'!','line_number':100,'multiline':False]
['text':'! <b>Throws</b>: Nothing unless the constructor for T throws.','line_number':101,'multiline':False]
['text':' #if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) || defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':110,'multiline':False]
['text':'Disable this overload if the first argument is pair as some compilers have','line_number':112,'multiline':False]
['text':'overload selection problems when the first parameter is a pair.','line_number':113,'multiline':False]
['text':'','line_number':122,'multiline':False]
['text':'#if !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES) || defined(BOOST_CONTAINER_DOXYGEN_INVOKED)','line_number':126,'multiline':False]
['text':'! <b>Effects</b>:','line_number':128,'multiline':False]
['text':'!   p->~U().','line_number':129,'multiline':False]
['text':'! <b>Returns</b>: Equivalent to','line_number':134,'multiline':False]
['text':'!   `polymorphic_allocator()`.','line_number':135,'multiline':False]
['text':'! <b>Returns</b>:','line_number':139,'multiline':False]
['text':'!   m_resource.','line_number':140,'multiline':False]
['text':'! <b>Returns</b>:','line_number':148,'multiline':False]
['text':'!   `*a.resource() == *b.resource()`.','line_number':149,'multiline':False]
['text':'! <b>Returns</b>:','line_number':155,'multiline':False]
['text':'!   `! (a == b)`.','line_number':156,'multiline':False]
['text':'namespace pmr {','line_number':161,'multiline':False]
['text':'namespace container {','line_number':162,'multiline':False]
['text':'namespace boost {','line_number':163,'multiline':False]
['text':'BOOST_CONTAINER_PMR_POLYMORPHIC_ALLOCATOR_HPP','line_number':165,'multiline':False]
