['text':' Boost token_functions.hpp  ------------------------------------------------//','line_number':1,'multiline':False]
['text':' Copyright John R. Bandela 2001.','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' See http://www.boost.org/libs/tokenizer/ for documentation.','line_number':9,'multiline':False]
['text':' Revision History:','line_number':11,'multiline':False]
['text':' 01 Oct 2004   Joaquin M Lopez Munoz','line_number':12,'multiline':False]
['text':'      Workaround for a problem with string::assign in msvc-stlport','line_number':13,'multiline':False]
['text':' 06 Apr 2004   John Bandela','line_number':14,'multiline':False]
['text':'      Fixed a bug involving using char_delimiter with a true input iterator','line_number':15,'multiline':False]
['text':' 28 Nov 2003   Robert Zeh and John Bandela','line_number':16,'multiline':False]
['text':'      Converted into "fast" functions that avoid using += when','line_number':17,'multiline':False]
['text':'      the supplied iterator isn't an input_iterator; based on','line_number':18,'multiline':False]
['text':'      some work done at Archelon and a version that was checked into','line_number':19,'multiline':False]
['text':'      the boost CVS for a short period of time.','line_number':20,'multiline':False]
['text':' 20 Feb 2002   John Maddock','line_number':21,'multiline':False]
['text':'      Removed using namespace std declarations and added','line_number':22,'multiline':False]
['text':'      workaround for BOOST_NO_STDC_NAMESPACE (the library','line_number':23,'multiline':False]
['text':'      can be safely mixed with regex).','line_number':24,'multiline':False]
['text':' 06 Feb 2002   Jeremy Siek','line_number':25,'multiline':False]
['text':'      Added char_separator.','line_number':26,'multiline':False]
['text':' 02 Feb 2002   Jeremy Siek','line_number':27,'multiline':False]
['text':'      Removed tabs and a little cleanup.','line_number':28,'multiline':False]
['text':' for find_if','line_number':38,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':' the following must not be macros if we are to prefix them','line_number':50,'multiline':False]
['text':' with std:: (they shouldn't be macros anyway...)','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':' fix namespace problems:','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':'===========================================================================','line_number':80,'multiline':False]
['text':' The escaped_list_separator class. Which is a model of TokenizerFunction','line_number':81,'multiline':False]
['text':' An escaped list is a super-set of what is commonly known as a comma','line_number':82,'multiline':False]
['text':' separated value (csv) list.It is separated into fields by a comma or','line_number':83,'multiline':False]
['text':' other character. If the delimiting character is inside quotes, then it is','line_number':84,'multiline':False]
['text':' counted as a regular character.To allow for embedded quotes in a field,','line_number':85,'multiline':False]
['text':' there can be escape sequences using the \ much like C.','line_number':86,'multiline':False]
['text':' The role of the comma, the quotation mark, and the escape','line_number':87,'multiline':False]
['text':' character (backslash \), can be assigned to other characters.','line_number':88,'multiline':False]
['text':' The out of the box GCC 2.95 on cygwin does not have a char_traits class.','line_number':95,'multiline':False]
['text':' MSVC does not like the following typename','line_number':96,'multiline':False]
['text':' If we are not in quote, then we are done','line_number':182,'multiline':False]
['text':' The last character was a c, that means there is','line_number':184,'multiline':False]
['text':' 1 more blank field','line_number':185,'multiline':False]
['text':'===========================================================================','line_number':202,'multiline':False]
['text':' The classes here are used by offset_separator and char_separator to implement','line_number':203,'multiline':False]
['text':' faster assigning of tokens using assign instead of +=','line_number':204,'multiline':False]
['text':'===========================================================================','line_number':207,'multiline':False]
['text':' Tokenizer was broken for wide character separators, at least on Windows, since','line_number':208,'multiline':False]
['text':' CRT functions isspace etc only expect values in [0, 0xFF]. Debug build asserts','line_number':209,'multiline':False]
['text':' if higher values are passed in. The traits extension class should take care of this.','line_number':210,'multiline':False]
['text':' Assuming that the conditional will always get optimized out in the function','line_number':211,'multiline':False]
['text':' implementations, argument types are not a problem since both forms of character classifiers','line_number':212,'multiline':False]
['text':' expect an int.','line_number':213,'multiline':False]
['text':' In case there is no cwctype header, we implement the checks manually.','line_number':244,'multiline':False]
['text':' We make use of the fact that the tested categories should fit in ASCII.','line_number':245,'multiline':False]
['text':' The assign_or_plus_equal struct contains functions that implement','line_number':268,'multiline':False]
['text':' assign, +=, and clearing based on the iterator type.  The','line_number':269,'multiline':False]
['text':' generic case does nothing for plus_equal and clearing, while','line_number':270,'multiline':False]
['text':' passing through the call for assign.','line_number':271,'multiline':False]
['text':'','line_number':272,'multiline':False]
['text':' When an input iterator is being used, the situation is reversed.','line_number':273,'multiline':False]
['text':' The assign method does nothing, plus_equal invokes operator +=,','line_number':274,'multiline':False]
['text':' and the clearing method sets the supplied token to the default','line_number':275,'multiline':False]
['text':' token constructor's result.','line_number':276,'multiline':False]
['text':'','line_number':277,'multiline':False]
['text':' If we are doing an assign, there is no need for the','line_number':289,'multiline':False]
['text':' the clear.','line_number':290,'multiline':False]
['text':'','line_number':291,'multiline':False]
['text':' This portably gets the iterator_tag without partial template specialization','line_number':324,'multiline':False]
['text':' namespace tokenizer_detail','line_number':336,'multiline':False]
['text':'===========================================================================','line_number':339,'multiline':False]
['text':' The offset_separator class, which is a model of TokenizerFunction.','line_number':340,'multiline':False]
['text':' Offset breaks a string into tokens based on a range of offsets','line_number':341,'multiline':False]
['text':'===========================================================================','line_number':410,'multiline':False]
['text':' The char_separator class breaks a sequence of characters into','line_number':411,'multiline':False]
['text':' tokens based on the character delimiters (very much like bad old','line_number':412,'multiline':False]
['text':' strtok). A delimiter character can either be kept or dropped. A','line_number':413,'multiline':False]
['text':' kept delimiter shows up as an output token, whereas a dropped','line_number':414,'multiline':False]
['text':' delimiter does not.','line_number':415,'multiline':False]
['text':' This class replaces the char_delimiters_separator class. The','line_number':417,'multiline':False]
['text':' constructor for the char_delimiters_separator class was too','line_number':418,'multiline':False]
['text':' confusing and needed to be deprecated. However, because of the','line_number':419,'multiline':False]
['text':' default arguments to the constructor, adding the new constructor','line_number':420,'multiline':False]
['text':' would cause ambiguity, so instead I deprecated the whole class.','line_number':421,'multiline':False]
['text':' The implementation of the class was also simplified considerably.','line_number':422,'multiline':False]
['text':' The out of the box GCC 2.95 on cygwin does not have a char_traits class.','line_number':426,'multiline':False]
['text':' Borland workaround','line_number':444,'multiline':False]
['text':' use ispunct() for kept delimiters and isspace for dropped.','line_number':449,'multiline':False]
['text':' skip past all dropped_delims','line_number':470,'multiline':False]
['text':' if we are on a kept_delims move past it and stop','line_number':483,'multiline':False]
['text':' append all the non delim characters','line_number':488,'multiline':False]
['text':' m_empty_tokens == keep_empty_tokens','line_number':492,'multiline':False]
['text':' Handle empty token at the end','line_number':494,'multiline':False]
['text':'===========================================================================','line_number':559,'multiline':False]
['text':' The following class is DEPRECATED, use class char_separators instead.','line_number':560,'multiline':False]
['text':'','line_number':561,'multiline':False]
['text':' The char_delimiters_separator class, which is a model of','line_number':562,'multiline':False]
['text':' TokenizerFunction.  char_delimiters_separator breaks a string','line_number':563,'multiline':False]
['text':' into tokens based on character delimiters. There are 2 types of','line_number':564,'multiline':False]
['text':' delimiters. returnable delimiters can be returned as','line_number':565,'multiline':False]
['text':' tokens. These are often punctuation. nonreturnable delimiters','line_number':566,'multiline':False]
['text':' cannot be returned as tokens. These are often whitespace','line_number':567,'multiline':False]
['text':' The out of the box GCC 2.95 on cygwin does not have a char_traits class.','line_number':569,'multiline':False]
['text':' skip past all nonreturnable delims','line_number':625,'multiline':False]
['text':' skip past the returnable only if we are not returning delims','line_number':626,'multiline':False]
['text':' if we are to return delims and we are one a returnable one','line_number':634,'multiline':False]
['text':' move past it and stop','line_number':635,'multiline':False]
['text':' append all the non delim characters','line_number':641,'multiline':False]
['text':'namespace boost','line_number':651,'multiline':False]
