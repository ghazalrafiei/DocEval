['text':' Boost.Function library','line_number':1,'multiline':False]
['text':'  Copyright Douglas Gregor 2001-2006','line_number':3,'multiline':False]
['text':'  Copyright Emil Dotchevski 2007','line_number':4,'multiline':False]
['text':'  Use, modification and distribution is subject to the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' For more information, see http://www.boost.org','line_number':9,'multiline':False]
['text':' complaint about native code generation','line_number':42,'multiline':False]
['text':' "conditional expression is constant"','line_number':43,'multiline':False]
['text':' __ICL etc','line_number':50,'multiline':False]
['text':'*
       * A buffer used to store small function objects in
       * boost::function. It is a union containing function pointers,
       * object pointers, and a structure that resembles a bound
       * member function pointer.
       ','line_number':62,'multiline':True]
['text':' For pointers to function objects','line_number':70,'multiline':False]
['text':' For pointers to std::type_info objects','line_number':74,'multiline':False]
['text':' (get_functor_type_tag, check_functor_type_tag).','line_number':76,'multiline':False]
['text':' Whether the type is const-qualified.','line_number':79,'multiline':False]
['text':' Whether the type is volatile-qualified.','line_number':81,'multiline':False]
['text':' For function pointers of all kinds','line_number':85,'multiline':False]
['text':' For bound member pointers','line_number':94,'multiline':False]
['text':' For references to function objects. We explicitly keep','line_number':104,'multiline':False]
['text':' track of the cv-qualifiers on the object referenced.','line_number':105,'multiline':False]
['text':' Type-specific union members','line_number':115,'multiline':False]
['text':' To relax aliasing constraints','line_number':118,'multiline':False]
['text':'*
       * The unusable class is a placeholder for unused function arguments
       * It is also completely unusable except that it constructable from
       * anything. This helps compilers without partial specialization to
       * handle Boost.Function objects returning void.
       ','line_number':122,'multiline':True]
['text':' Determine the return type. This supports compilers that do not support
       * void returns or partial specialization by silently changing the return
       * type to "unusable".
       ','line_number':134,'multiline':True]
['text':' The operation type to perform on the given functor/function pointer','line_number':146,'multiline':False]
['text':' Tags used to decide between different types of functions','line_number':155,'multiline':False]
['text':' The trivial manager does nothing but return the same pointer (if we','line_number':180,'multiline':False]
['text':' are cloning) or return the null pointer (if we are deleting).','line_number':181,'multiline':False]
['text':' Check whether we have the same type. We can add','line_number':205,'multiline':False]
['text':' cv-qualifiers, but we can't take them away.','line_number':206,'multiline':False]
['text':'*
       * Determine if boost::function can use the small-object
       * optimization with the function object type F.
       ','line_number':227,'multiline':True]
['text':'*
       * The functor_manager class contains a static function "manage" which
       * can clone or destroy the given function/function object pointer.
       ','line_number':257,'multiline':True]
['text':' Function pointers','line_number':266,'multiline':False]
['text':' op == get_functor_type_tag ','line_number':283,'multiline':True]
['text':' Function objects that fit in the small-object buffer.','line_number':290,'multiline':False]
['text':' suppress warning about the value of f not being used (MSVC)','line_number':302,'multiline':False]
['text':' Some compilers (Borland, vc6, ...) are unhappy with ~functor_type.','line_number':306,'multiline':False]
['text':' suppress warning about the value of f not being used (MSVC)','line_number':308,'multiline':False]
['text':' op == get_functor_type_tag ','line_number':315,'multiline':True]
['text':' Function pointers','line_number':329,'multiline':False]
['text':' Function objects that fit in the small-object buffer.','line_number':337,'multiline':False]
['text':' Function objects that require heap allocation','line_number':345,'multiline':False]
['text':' Clone the functor','line_number':351,'multiline':False]
['text':' GCC 2.95.3 gets the CV qualifiers wrong here, so we','line_number':352,'multiline':False]
['text':' can't do the static_cast that we should do.','line_number':353,'multiline':False]
['text':' jewillco: Changing this to static_cast because GCC 2.95.3 is','line_number':354,'multiline':False]
['text':' obsolete.','line_number':355,'multiline':False]
['text':' Cast from the void pointer to the functor pointer type ','line_number':364,'multiline':True]
['text':' op == get_functor_type_tag ','line_number':374,'multiline':True]
['text':' For function objects, we determine whether the function','line_number':381,'multiline':False]
['text':' object can use the small-object optimization buffer or','line_number':382,'multiline':False]
['text':' whether we need to allocate it on the heap.','line_number':383,'multiline':False]
['text':' For member pointers, we use the small-object optimization buffer.','line_number':392,'multiline':False]
['text':' Dispatch to an appropriate manager based on whether we have a
           function pointer or a function object pointer. ','line_number':401,'multiline':True]
['text':' Function pointers','line_number':424,'multiline':False]
['text':' Function objects that fit in the small-object buffer.','line_number':432,'multiline':False]
['text':' Function objects that require heap allocation','line_number':440,'multiline':False]
['text':' Clone the functor','line_number':456,'multiline':False]
['text':' GCC 2.95.3 gets the CV qualifiers wrong here, so we','line_number':457,'multiline':False]
['text':' can't do the static_cast that we should do.','line_number':458,'multiline':False]
['text':' Get back to the original pointer type','line_number':469,'multiline':False]
['text':' Cast from the void pointer to the functor_wrapper_type ','line_number':476,'multiline':True]
['text':' op == get_functor_type_tag ','line_number':492,'multiline':True]
['text':' For function objects, we determine whether the function','line_number':499,'multiline':False]
['text':' object can use the small-object optimization buffer or','line_number':500,'multiline':False]
['text':' whether we need to allocate it on the heap.','line_number':501,'multiline':False]
['text':' Dispatch to an appropriate manager based on whether we have a
           function pointer or a function object pointer. ','line_number':511,'multiline':True]
['text':' A type that is only used for comparisons against zero','line_number':528,'multiline':False]
['text':' These routines perform comparisons between a Boost.Function','line_number':532,'multiline':False]
['text':' object and an arbitrary function object (when the last','line_number':533,'multiline':False]
['text':' parameter is false_type) or against zero (when the','line_number':534,'multiline':False]
['text':' last parameter is true_type). They are only necessary','line_number':535,'multiline':False]
['text':' for compilers that don't support SFINAE.','line_number':536,'multiline':False]
['text':' BOOST_NO_SFINAE','line_number':588,'multiline':False]
['text':'*
       * Stores the "manager" portion of the vtable for a
       * boost::function object.
       ','line_number':590,'multiline':True]
['text':' end namespace function','line_number':600,'multiline':False]
['text':' end namespace detail','line_number':601,'multiline':False]
['text':'*
 * The function_base class contains the basic elements needed for the
 * function1, function2, function3, etc. classes. It is common to all
 * functions (and as such can be used to tell if we have one of the
 * functionN objects).
 ','line_number':603,'multiline':True]
['text':'* Determine if the function is empty (i.e., has no target). ','line_number':614,'multiline':True]
['text':'* Retrieve the type of the stored function object, or type_id<void>()
      if this is empty. ','line_number':617,'multiline':True]
['text':' GCC 2.95.3 gets the CV qualifiers wrong here, so we','line_number':653,'multiline':False]
['text':' can't do the static_cast that we should do.','line_number':654,'multiline':False]
['text':' GCC 3.3 and newer cannot copy with the global operator==, due to','line_number':670,'multiline':False]
['text':' problems with instantiation of function return types before it','line_number':671,'multiline':False]
['text':' has been verified that the argument types match up.','line_number':672,'multiline':False]
['text':' should be protected, but GCC 2.95.3 will fail to allow access','line_number':692,'multiline':False]
['text':'*
 * The bad_function_call exception class is thrown when a boost::function
 * object is invoked
 ','line_number':710,'multiline':True]
['text':' Comparisons between boost::function objects and arbitrary function objects','line_number':750,'multiline':False]
['text':' Comparisons between boost::function objects and arbitrary function','line_number':781,'multiline':False]
['text':' objects. GCC 3.3 and before has an obnoxious bug that prevents this','line_number':782,'multiline':False]
['text':' from working.','line_number':783,'multiline':False]
['text':' Compiler supporting SFINAE','line_number':857,'multiline':False]
['text':' end namespace function','line_number':877,'multiline':False]
['text':' end namespace detail','line_number':878,'multiline':False]
['text':' end namespace boost','line_number':879,'multiline':False]
['text':' BOOST_FUNCTION_BASE_HEADER','line_number':887,'multiline':False]
