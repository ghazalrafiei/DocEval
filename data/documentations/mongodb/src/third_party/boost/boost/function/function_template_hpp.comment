['text':' Boost.Function library','line_number':1,'multiline':False]
['text':'  Copyright Douglas Gregor 2001-2006','line_number':3,'multiline':False]
['text':'  Copyright Emil Dotchevski 2007','line_number':4,'multiline':False]
['text':'  Use, modification and distribution is subject to the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'  (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' For more information, see http://www.boost.org','line_number':9,'multiline':False]
['text':' Note: this header is a header template and must NOT have multiple-inclusion','line_number':11,'multiline':False]
['text':' protection.','line_number':12,'multiline':False]
['text':' "conditional expression is constant"','line_number':18,'multiline':False]
['text':' Comma if nonzero number of arguments','line_number':41,'multiline':False]
['text':' BOOST_FUNCTION_NUM_ARGS > 0','line_number':46,'multiline':False]
['text':' Class names used in this version of the code','line_number':48,'multiline':False]
['text':' Handle invocation of member pointers. ','line_number':198,'multiline':True]
['text':' Retrieve the appropriate invoker for a member pointer.  ','line_number':299,'multiline':True]
['text':' Given the tag returned by get_function_tag, retrieve the
         actual invoker that will be used for the given function
         object.

         Each specialization contains an "apply" nested class template
         that accepts the function object, return type, function
         argument types, and allocator. The resulting "apply" class
         contains two typedefs, "invoker_type" and "manager_type",
         which correspond to the invoker and manager types. ','line_number':322,'multiline':True]
['text':' Retrieve the invoker for a function pointer. ','line_number':334,'multiline':True]
['text':' Retrieve the invoker for a member pointer. ','line_number':368,'multiline':True]
['text':' Retrieve the invoker for a function object. ','line_number':402,'multiline':True]
['text':' Retrieve the invoker for a reference to a function object. ','line_number':435,'multiline':True]
['text':'*
       * vtable for a specific boost::function instance. This
       * structure must be an aggregate so that we can use static
       * initialization in boost::function's assign_to and assign_to_a
       * members. It therefore cannot have any constructors,
       * destructors, base classes, etc.
       ','line_number':469,'multiline':True]
['text':' BOOST_NO_VOID_RETURNS','line_number':483,'multiline':False]
['text':' Function pointers','line_number':509,'multiline':False]
['text':' should be a reinterpret cast, but some compilers insist','line_number':516,'multiline':False]
['text':' on giving cv-qualifiers to free functions','line_number':517,'multiline':False]
['text':' Member pointers','line_number':531,'multiline':False]
['text':' DPG TBD: Add explicit support for member function','line_number':536,'multiline':False]
['text':' objects, so we invoke through mem_fn() but we retain the','line_number':537,'multiline':False]
['text':' right target_type() values.','line_number':538,'multiline':False]
['text':' DPG TBD: Add explicit support for member function','line_number':549,'multiline':False]
['text':' objects, so we invoke through mem_fn() but we retain the','line_number':550,'multiline':False]
['text':' right target_type() values.','line_number':551,'multiline':False]
['text':' BOOST_FUNCTION_NUM_ARGS > 0','line_number':559,'multiline':False]
['text':' Function objects','line_number':561,'multiline':False]
['text':' Assign to a function object using the small object optimization','line_number':562,'multiline':False]
['text':' Assign to a function object allocated on the heap.','line_number':576,'multiline':False]
['text':' Reference to a function object','line_number':632,'multiline':False]
['text':' end namespace function','line_number':655,'multiline':False]
['text':' end namespace detail','line_number':656,'multiline':False]
['text':' BOOST_NO_VOID_RETURNS','line_number':670,'multiline':False]
['text':' add signature for boost::lambda','line_number':687,'multiline':False]
['text':' MSVC chokes if the following two constructors are collapsed into','line_number':708,'multiline':False]
['text':' one with a default parameter.','line_number':709,'multiline':False]
['text':' BOOST_NO_SFINAE','line_number':716,'multiline':False]
['text':' BOOST_NO_SFINAE','line_number':728,'multiline':False]
['text':' The distinction between when to use BOOST_FUNCTION_FUNCTION and','line_number':767,'multiline':False]
['text':' when to use self_type is obnoxious. MSVC cannot handle self_type as','line_number':768,'multiline':False]
['text':' the return type of these assignment operators, but Borland C++ cannot','line_number':769,'multiline':False]
['text':' handle BOOST_FUNCTION_FUNCTION as the type of the temporary to','line_number':770,'multiline':False]
['text':' construct.','line_number':771,'multiline':False]
['text':' Assignment from another BOOST_FUNCTION_FUNCTION','line_number':820,'multiline':False]
['text':' Move assignment from another BOOST_FUNCTION_FUNCTION','line_number':838,'multiline':False]
['text':' Clear out a target, if there is one','line_number':867,'multiline':False]
['text':' Sun C++ 5.3 can't handle the safe_bool idiom, so don't use it','line_number':878,'multiline':False]
['text':' Don't operate on storage directly since union type doesn't relax','line_number':902,'multiline':False]
['text':' strict aliasing rules, despite of having member char type.','line_number':903,'multiline':False]
['text':' This warning is technically correct, but we don't want to pay the price for initializing','line_number':906,'multiline':False]
['text':' just to silence a warning: https://github.com/boostorg/function/issues/27','line_number':907,'multiline':False]
['text':' Note: it is extremely important that this initialization use','line_number':935,'multiline':False]
['text':' static initialization. Otherwise, we will have a race','line_number':936,'multiline':False]
['text':' condition here in multi-threaded code. See','line_number':937,'multiline':False]
['text':' http://thread.gmane.org/gmane.comp.lib.boost.devel/164902/.','line_number':938,'multiline':False]
['text':' coverity[pointless_expression]: suppress coverity warnings on apparant if(const).','line_number':944,'multiline':False]
['text':' Note: it is extremely important that this initialization use','line_number':969,'multiline':False]
['text':' static initialization. Otherwise, we will have a race','line_number':970,'multiline':False]
['text':' condition here in multi-threaded code. See','line_number':971,'multiline':False]
['text':' http://thread.gmane.org/gmane.comp.lib.boost.devel/164902/.','line_number':972,'multiline':False]
['text':' coverity[pointless_expression]: suppress coverity warnings on apparant if(const).','line_number':978,'multiline':False]
['text':' Moves the value from the specified argument to *this. If the argument','line_number':988,'multiline':False]
['text':' has its function object allocated on the heap, move_assign will pass','line_number':989,'multiline':False]
['text':' its buffer to *this, and set the argument's buffer pointer to NULL.','line_number':990,'multiline':False]
['text':' Don't operate on storage directly since union type doesn't relax','line_number':1000,'multiline':False]
['text':' strict aliasing rules, despite of having member char type.','line_number':1001,'multiline':False]
['text':' This warning is technically correct, but we don't want to pay the price for initializing','line_number':1004,'multiline':False]
['text':' just to silence a warning: https://github.com/boostorg/function/issues/27','line_number':1005,'multiline':False]
['text':' False positive in GCC 11 for empty function objects (function_n_test.cpp:673)','line_number':1015,'multiline':False]
['text':' Poison comparisons between boost::function objects of the same type.','line_number':1048,'multiline':False]
['text':' Move constructors','line_number':1118,'multiline':False]
['text':' have partial specialization','line_number':1175,'multiline':False]
['text':' end namespace boost','line_number':1177,'multiline':False]
['text':' Cleanup after ourselves...','line_number':1179,'multiline':False]
