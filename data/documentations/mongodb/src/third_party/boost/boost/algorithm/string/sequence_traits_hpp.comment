['text':'  Boost string_algo library sequence_traits.hpp header file  ---------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Pavol Droba 2002-2003.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]
['text':'! \file
    Traits defined in this header are used by various algorithms to achieve
    better performance for specific containers.
    Traits provide fail-safe defaults. If a container supports some of these
    features, it is possible to specialize the specific trait for this container.
    For lacking compilers, it is possible of define an override for a specific tester
    function.

    Due to a language restriction, it is not currently possible to define specializations for
    stl containers without including the corresponding header. To decrease the overhead
    needed by this inclusion, user can selectively include a specialization
    header for a specific container. They are located in boost/algorithm/string/stl
    directory. Alternatively she can include boost/algorithm/string/std_collection_traits.hpp
    header which contains specializations for all stl containers.
','line_number':18,'multiline':True]
['text':'  sequence traits  -----------------------------------------------//','line_number':37,'multiline':False]
['text':'! Native replace trait','line_number':40,'multiline':False]
['text':'!
            This trait specifies that the sequence has \c std::string like replace method
        ','line_number':41,'multiline':True]
['text':' BOOST_WORKAROUND( __IBMCPP__, <= 600 )','line_number':53,'multiline':False]
['text':'! Stable iterators trait','line_number':60,'multiline':False]
['text':'!
            This trait specifies that the sequence has stable iterators. It means
            that operations like insert/erase/replace do not invalidate iterators.
        ','line_number':61,'multiline':True]
['text':' BOOST_WORKAROUND( __IBMCPP__, <= 600 )','line_number':73,'multiline':False]
['text':'! Const time insert trait','line_number':79,'multiline':False]
['text':'!
            This trait specifies that the sequence's insert method has
            constant time complexity.
        ','line_number':80,'multiline':True]
['text':' BOOST_WORKAROUND( __IBMCPP__, <= 600 )','line_number':92,'multiline':False]
['text':'! Const time erase trait','line_number':98,'multiline':False]
['text':'!
            This trait specifies that the sequence's erase method has
            constant time complexity.
        ','line_number':99,'multiline':True]
['text':' BOOST_WORKAROUND( __IBMCPP__, <= 600 )','line_number':111,'multiline':False]
['text':' namespace algorithm','line_number':116,'multiline':False]
['text':' namespace boost','line_number':117,'multiline':False]
['text':' BOOST_STRING_SEQUENCE_TRAITS_HPP','line_number':120,'multiline':False]
