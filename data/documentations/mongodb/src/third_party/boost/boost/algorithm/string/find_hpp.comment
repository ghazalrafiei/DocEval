['text':'  Boost string_algo library find.hpp header file  ---------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Pavol Droba 2002-2003.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]
['text':'! \file
    Defines a set of find algorithms. The algorithms are searching
    for a substring of the input. The result is given as an \c iterator_range
    delimiting the substring.
','line_number':26,'multiline':True]
['text':'  Generic find -----------------------------------------------//','line_number':35,'multiline':False]
['text':'! Generic find algorithm','line_number':37,'multiline':False]
['text':'!
            Search the input using the given finder.

            \param Input A string which will be searched.
            \param Finder Finder object used for searching.
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c RangeT::iterator or 
                \c RangeT::const_iterator, depending on the constness of 
                the input parameter.
        ','line_number':38,'multiline':True]
['text':'  find_first  -----------------------------------------------//','line_number':61,'multiline':False]
['text':'! Find first algorithm','line_number':63,'multiline':False]
['text':'!
            Search for the first occurrence of the substring in the input. 
            
            \param Input A string which will be searched.
            \param Search A substring to be searched for.
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c RangeT::iterator or 
                \c RangeT::const_iterator, depending on the constness of 
                the input parameter.

              \note This function provides the strong exception-safety guarantee
        ','line_number':64,'multiline':True]
['text':'! Find first algorithm ( case insensitive )','line_number':87,'multiline':False]
['text':'!
            Search for the first occurrence of the substring in the input. 
            Searching is case insensitive.
            
            \param Input A string which will be searched.
            \param Search A substring to be searched for.
            \param Loc A locale used for case insensitive comparison
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c Range1T::iterator or 
                \c Range1T::const_iterator, depending on the constness of 
                the input parameter.

            \note This function provides the strong exception-safety guarantee
        ','line_number':88,'multiline':True]
['text':'  find_last  -----------------------------------------------//','line_number':114,'multiline':False]
['text':'! Find last algorithm','line_number':116,'multiline':False]
['text':'!
            Search for the last occurrence of the substring in the input. 
            
            \param Input A string which will be searched.
            \param Search A substring to be searched for.
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c Range1T::iterator or 
                \c Range1T::const_iterator, depending on the constness of 
                the input parameter.

            \note This function provides the strong exception-safety guarantee
        ','line_number':117,'multiline':True]
['text':'! Find last algorithm ( case insensitive )','line_number':140,'multiline':False]
['text':'!
            Search for the last match a string in the input. 
            Searching is case insensitive.
            
            \param Input A string which will be searched.
            \param Search A substring to be searched for.
            \param Loc A locale used for case insensitive comparison
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c Range1T::iterator or 
                \c Range1T::const_iterator, depending on the constness of 
                the input parameter.
        
            \note This function provides the strong exception-safety guarantee    
        ','line_number':141,'multiline':True]
['text':'  find_nth ----------------------------------------------------------------------//','line_number':167,'multiline':False]
['text':'! Find n-th algorithm ','line_number':169,'multiline':False]
['text':'!
            Search for the n-th (zero-indexed) occurrence of the substring in the 
            input.         
            
            \param Input A string which will be searched.
            \param Search A substring to be searched for.
            \param Nth An index (zero-indexed) of the match to be found.
                For negative N, the matches are counted from the end of string.
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c Range1T::iterator or 
                \c Range1T::const_iterator, depending on the constness of 
                the input parameter.
        ','line_number':170,'multiline':True]
['text':'! Find n-th algorithm ( case insensitive ).','line_number':195,'multiline':False]
['text':'!
            Search for the n-th (zero-indexed) occurrence of the substring in the 
            input. Searching is case insensitive.
            
            \param Input A string which will be searched.
            \param Search A substring to be searched for.
            \param Nth An index (zero-indexed) of the match to be found. 
                For negative N, the matches are counted from the end of string.
            \param Loc A locale used for case insensitive comparison
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c Range1T::iterator or 
                \c Range1T::const_iterator, depending on the constness of 
                the input parameter.


            \note This function provides the strong exception-safety guarantee
        ','line_number':196,'multiline':True]
['text':'  find_head ----------------------------------------------------------------------//','line_number':226,'multiline':False]
['text':'! Find head algorithm','line_number':228,'multiline':False]
['text':'!
            Get the head of the input. Head is a prefix of the string of the 
            given size. If the input is shorter then required, whole input is considered 
            to be the head.

            \param Input An input string
            \param N Length of the head
                For N>=0, at most N characters are extracted.
                For N<0, at most size(Input)-|N| characters are extracted.
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c Range1T::iterator or 
                \c Range1T::const_iterator, depending on the constness of 
                the input parameter.

            \note This function provides the strong exception-safety guarantee
        ','line_number':229,'multiline':True]
['text':'  find_tail ----------------------------------------------------------------------//','line_number':256,'multiline':False]
['text':'! Find tail algorithm','line_number':258,'multiline':False]
['text':'!
            Get the tail of the input. Tail is a suffix of the string of the 
            given size. If the input is shorter then required, whole input is considered 
            to be the tail.

            \param Input An input string
            \param N Length of the tail. 
                For N>=0, at most N characters are extracted.
                For N<0, at most size(Input)-|N| characters are extracted.
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c RangeT::iterator or 
                \c RangeT::const_iterator, depending on the constness of 
                the input parameter.


            \note This function provides the strong exception-safety guarantee
        ','line_number':259,'multiline':True]
['text':'  find_token --------------------------------------------------------------------//','line_number':287,'multiline':False]
['text':'! Find token algorithm','line_number':289,'multiline':False]
['text':'!
            Look for a given token in the string. Token is a character that matches the
            given predicate.
            If the "token compress mode" is enabled, adjacent tokens are considered to be one match.
            
            \param Input A input string.
            \param Pred A unary predicate to identify a token
            \param eCompress Enable/Disable compressing of adjacent tokens
            \return 
                An \c iterator_range delimiting the match. 
                Returned iterator is either \c RangeT::iterator or 
                \c RangeT::const_iterator, depending on the constness of 
                the input parameter.
        
            \note This function provides the strong exception-safety guarantee    
        ','line_number':290,'multiline':True]
['text':' namespace algorithm','line_number':317,'multiline':False]
['text':' pull names to the boost namespace','line_number':319,'multiline':False]
['text':' namespace boost','line_number':331,'multiline':False]
['text':' BOOST_STRING_FIND_HPP','line_number':334,'multiline':False]
