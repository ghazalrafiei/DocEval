['text':' 
   Copyright (c) Marshall Clow 2010-2012.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    For more information, see http://www.boost.org
','line_number':1,'multiline':True]
['text':' for std::iterator_traits','line_number':13,'multiline':False]
['text':'
    A templated version of the boyer-moore searching algorithm.
    
References:
    http://www.cs.utexas.edu/users/moore/best-ideas/string-searching/
    http://www.cs.utexas.edu/~moore/publications/fstrpos.pdf
    
Explanations:
    http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm
    http://www.movsd.com/bm.htm
    http://www.cs.ucdavis.edu/~gusfield/cs224f09/bnotes.pdf

The Boyer-Moore search algorithm uses two tables, a "bad character" table
to tell how far to skip ahead when it hits a character that is not in the pattern,
and a "good character" table to tell how far to skip ahead when it hits a
mismatch on a character that _is_ in the pattern.

Requirements:
        * Random access iterators
        * The two iterator types (patIter and corpusIter) must 
            "point to" the same underlying type and be comparable.
        * Additional requirements may be imposed but the skip table, such as:
        ** Numeric type (array-based skip table)
        ** Hashable type (map-based skip table)
','line_number':30,'multiline':True]
['text':'/ \fn operator ( corpusIter corpus_first, corpusIter corpus_last )','line_number':72,'multiline':False]
['text':'/ \brief Searches the corpus for the pattern that was passed into the constructor','line_number':73,'multiline':False]
['text':'/ ','line_number':74,'multiline':False]
['text':'/ \param corpus_first The start of the data to search (Random Access Iterator)','line_number':75,'multiline':False]
['text':'/ \param corpus_last  One past the end of the data to search','line_number':76,'multiline':False]
['text':'/','line_number':77,'multiline':False]
['text':' if nothing to search, we didn't find it!','line_number':85,'multiline':False]
['text':' empty pattern matches at start','line_number':86,'multiline':False]
['text':'  If the pattern is larger than the corpus, we can't find it!','line_number':89,'multiline':False]
['text':'  Do the search ','line_number':93,'multiline':False]
['text':'/ \cond DOXYGEN_HIDE','line_number':104,'multiline':False]
['text':'/ \fn operator ( corpusIter corpus_first, corpusIter corpus_last, Pred p )','line_number':110,'multiline':False]
['text':'/ \brief Searches the corpus for the pattern that was passed into the constructor','line_number':111,'multiline':False]
['text':'/ ','line_number':112,'multiline':False]
['text':'/ \param corpus_first The start of the data to search (Random Access Iterator)','line_number':113,'multiline':False]
['text':'/ \param corpus_last  One past the end of the data to search','line_number':114,'multiline':False]
['text':'/ \param p            A predicate used for the search comparisons.','line_number':115,'multiline':False]
['text':'/','line_number':116,'multiline':False]
['text':'  ---- Do the matching ---- ','line_number':120,'multiline':True]
['text':'  while ( std::distance ( curPos, corpus_last ) >= k_pattern_length ) { ','line_number':126,'multiline':True]
['text':'  Do we match right where we are?','line_number':127,'multiline':False]
['text':'  We matched - we're done!','line_number':131,'multiline':False]
['text':'  Since we didn't match, figure out how far to skip forward','line_number':136,'multiline':False]
['text':' We didn't find anything','line_number':145,'multiline':False]
['text':' empty pattern','line_number':179,'multiline':False]
['text':'/ \endcond','line_number':201,'multiline':False]
['text':'  Two ranges as inputs gives us four possibilities; with 2,3,3,4 parameters
    Use a bit of TMP to disambiguate the 3-argument templates ','line_number':205,'multiline':True]
['text':'/ \fn boyer_moore_search ( corpusIter corpus_first, corpusIter corpus_last, ','line_number':208,'multiline':False]
['text':'/       patIter pat_first, patIter pat_last )','line_number':209,'multiline':False]
['text':'/ \brief Searches the corpus for the pattern.','line_number':210,'multiline':False]
['text':'/ ','line_number':211,'multiline':False]
['text':'/ \param corpus_first The start of the data to search (Random Access Iterator)','line_number':212,'multiline':False]
['text':'/ \param corpus_last  One past the end of the data to search','line_number':213,'multiline':False]
['text':'/ \param pat_first    The start of the pattern to search for (Random Access Iterator)','line_number':214,'multiline':False]
['text':'/ \param pat_last     One past the end of the data to search for','line_number':215,'multiline':False]
['text':'/','line_number':216,'multiline':False]
['text':'  Creator functions -- take a pattern range, return an object','line_number':256,'multiline':False]
['text':'  BOOST_ALGORITHM_BOYER_MOORE_SEARCH_HPP','line_number':273,'multiline':False]
