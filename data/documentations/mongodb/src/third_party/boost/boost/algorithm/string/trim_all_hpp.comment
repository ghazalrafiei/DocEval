['text':'  Boost string_algo library trim.hpp header file  ---------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Pavol Droba 2002-2003.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]
['text':'! \file
    Defines trim_all algorithms.
    
    Just like \c trim, \c trim_all removes all trailing and leading spaces from a 
    sequence (string). In addition, spaces in the middle of the sequence are truncated
    to just one character. Space is recognized using given locales.

    \c trim_fill acts as trim_all, but the spaces in the middle are replaces with 
    a user-define sequence of character.

    Parametric (\c _if) variants use a predicate (functor) to select which characters
    are to be trimmed.. 
    Functions take a selection predicate as a parameter, which is used to determine 
    whether a character is a space. Common predicates are provided in classification.hpp header.

','line_number':23,'multiline':True]
['text':' multi line trim  ----------------------------------------------- //','line_number':43,'multiline':False]
['text':'! Trim All - parametric','line_number':45,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            compress all other spaces to a single character.
            The result is a trimmed copy of the input

            \param Input An input sequence
             \param IsSpace A unary predicate identifying spaces
            \return A trimmed copy of the input
        ','line_number':46,'multiline':True]
['text':'! Trim All','line_number':66,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            compress all other spaces to a single character.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param IsSpace A unary predicate identifying spaces
        ','line_number':67,'multiline':True]
['text':'! Trim All','line_number':86,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            compress all other spaces to a single character.
            The result is a trimmed copy of the input

            \param Input An input sequence
            \param Loc A locale used for 'space' classification
            \return A trimmed copy of the input
        ','line_number':87,'multiline':True]
['text':'! Trim All','line_number':103,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            compress all other spaces to a single character.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param Loc A locale used for 'space' classification
            \return A trimmed copy of the input
        ','line_number':104,'multiline':True]
['text':'! Trim Fill - parametric','line_number':120,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            replace all every block of consecutive spaces with a fill string
            defined by user.
            The result is a trimmed copy of the input

            \param Input An input sequence
            \param Fill A string used to fill the inner spaces
            \param IsSpace A unary predicate identifying spaces
            \return A trimmed copy of the input
        ','line_number':121,'multiline':True]
['text':'! Trim Fill','line_number':143,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            replace all every block of consecutive spaces with a fill string
            defined by user.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param Fill A string used to fill the inner spaces
            \param IsSpace A unary predicate identifying spaces
        ','line_number':144,'multiline':True]
['text':'! Trim Fill','line_number':165,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            replace all every block of consecutive spaces with a fill string
            defined by user.
            The result is a trimmed copy of the input

            \param Input An input sequence
            \param Fill A string used to fill the inner spaces
            \param Loc A locale used for 'space' classification
            \return A trimmed copy of the input
        ','line_number':166,'multiline':True]
['text':'! Trim Fill','line_number':184,'multiline':False]
['text':'!
            Remove all leading and trailing spaces from the input and
            replace all every block of consecutive spaces with a fill string
            defined by user.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param Fill A string used to fill the inner spaces
            \param Loc A locale used for 'space' classification
            \return A trimmed copy of the input
        ','line_number':185,'multiline':True]
['text':' namespace algorithm    ','line_number':203,'multiline':False]
['text':' pull names to the boost namespace','line_number':205,'multiline':False]
['text':' namespace boost','line_number':215,'multiline':False]
['text':' BOOST_STRING_TRIM_ALL_HPP','line_number':217,'multiline':False]
