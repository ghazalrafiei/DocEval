['text':' 
   Copyright (c) Marshall Clow 2008-2012.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

 Revision history:
   27 June 2009 mtc First version
   23 Oct  2010 mtc Added predicate version
   
','line_number':1,'multiline':True]
['text':'/ \file clamp.hpp','line_number':13,'multiline':False]
['text':'/ \brief Clamp algorithm','line_number':14,'multiline':False]
['text':'/ \author Marshall Clow','line_number':15,'multiline':False]
['text':'/','line_number':16,'multiline':False]
['text':'/ Suggested by olafvdspek in https://svn.boost.org/trac/boost/ticket/3215','line_number':17,'multiline':False]
['text':'  For std::less','line_number':22,'multiline':False]
['text':'  For std::iterator_traits','line_number':23,'multiline':False]
['text':' for identity','line_number':29,'multiline':False]
['text':' for boost::disable_if','line_number':30,'multiline':False]
['text':'/ \fn clamp ( T const& val, ','line_number':34,'multiline':False]
['text':'/               typename boost::mpl::identity<T>::type const & lo, ','line_number':35,'multiline':False]
['text':'/               typename boost::mpl::identity<T>::type const & hi, Pred p )','line_number':36,'multiline':False]
['text':'/ \return the value "val" brought into the range [ lo, hi ]','line_number':37,'multiline':False]
['text':'/     using the comparison predicate p.','line_number':38,'multiline':False]
['text':'/     If p ( val, lo ) return lo.','line_number':39,'multiline':False]
['text':'/     If p ( hi, val ) return hi.','line_number':40,'multiline':False]
['text':'/     Otherwise, return the original value.','line_number':41,'multiline':False]
['text':'/ ','line_number':42,'multiline':False]
['text':'/ \param val   The value to be clamped','line_number':43,'multiline':False]
['text':'/ \param lo    The lower bound of the range to be clamped to','line_number':44,'multiline':False]
['text':'/ \param hi    The upper bound of the range to be clamped to','line_number':45,'multiline':False]
['text':'/ \param p     A predicate to use to compare the values.','line_number':46,'multiline':False]
['text':'/                 p ( a, b ) returns a boolean.','line_number':47,'multiline':False]
['text':'/','line_number':48,'multiline':False]
['text':'    assert ( !p ( hi, lo ));    // Can't assert p ( lo, hi ) b/c they might be equal','line_number':54,'multiline':False]
['text':'/ \fn clamp ( T const& val, ','line_number':59,'multiline':False]
['text':'/               typename boost::mpl::identity<T>::type const & lo, ','line_number':60,'multiline':False]
['text':'/               typename boost::mpl::identity<T>::type const & hi )','line_number':61,'multiline':False]
['text':'/ \return the value "val" brought into the range [ lo, hi ].','line_number':62,'multiline':False]
['text':'/     If the value is less than lo, return lo.','line_number':63,'multiline':False]
['text':'/     If the value is greater than "hi", return hi.','line_number':64,'multiline':False]
['text':'/     Otherwise, return the original value.','line_number':65,'multiline':False]
['text':'/','line_number':66,'multiline':False]
['text':'/ \param val   The value to be clamped','line_number':67,'multiline':False]
['text':'/ \param lo    The lower bound of the range to be clamped to','line_number':68,'multiline':False]
['text':'/ \param hi    The upper bound of the range to be clamped to','line_number':69,'multiline':False]
['text':'/','line_number':70,'multiline':False]
['text':'/ \fn clamp_range ( InputIterator first, InputIterator last, OutputIterator out, ','line_number':79,'multiline':False]
['text':'/       std::iterator_traits<InputIterator>::value_type const & lo, ','line_number':80,'multiline':False]
['text':'/       std::iterator_traits<InputIterator>::value_type const & hi )','line_number':81,'multiline':False]
['text':'/ \return clamp the sequence of values [first, last) into [ lo, hi ]','line_number':82,'multiline':False]
['text':'/ ','line_number':83,'multiline':False]
['text':'/ \param first The start of the range of values','line_number':84,'multiline':False]
['text':'/ \param last  One past the end of the range of input values','line_number':85,'multiline':False]
['text':'/ \param out   An output iterator to write the clamped values into','line_number':86,'multiline':False]
['text':'/ \param lo    The lower bound of the range to be clamped to','line_number':87,'multiline':False]
['text':'/ \param hi    The upper bound of the range to be clamped to','line_number':88,'multiline':False]
['text':'/','line_number':89,'multiline':False]
['text':' this could also be written with bind and std::transform','line_number':95,'multiline':False]
['text':'/ \fn clamp_range ( const Range &r, OutputIterator out, ','line_number':101,'multiline':False]
['text':'/       typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type const & lo,','line_number':102,'multiline':False]
['text':'/       typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type const & hi )','line_number':103,'multiline':False]
['text':'/ \return clamp the sequence of values [first, last) into [ lo, hi ]','line_number':104,'multiline':False]
['text':'/ ','line_number':105,'multiline':False]
['text':'/ \param r     The range of values to be clamped','line_number':106,'multiline':False]
['text':'/ \param out   An output iterator to write the clamped values into','line_number':107,'multiline':False]
['text':'/ \param lo    The lower bound of the range to be clamped to','line_number':108,'multiline':False]
['text':'/ \param hi    The upper bound of the range to be clamped to','line_number':109,'multiline':False]
['text':'/','line_number':110,'multiline':False]
['text':'/ \fn clamp_range ( InputIterator first, InputIterator last, OutputIterator out, ','line_number':121,'multiline':False]
['text':'/       std::iterator_traits<InputIterator>::value_type const & lo, ','line_number':122,'multiline':False]
['text':'/       std::iterator_traits<InputIterator>::value_type const & hi, Pred p )','line_number':123,'multiline':False]
['text':'/ \return clamp the sequence of values [first, last) into [ lo, hi ]','line_number':124,'multiline':False]
['text':'/     using the comparison predicate p.','line_number':125,'multiline':False]
['text':'/ ','line_number':126,'multiline':False]
['text':'/ \param first The start of the range of values','line_number':127,'multiline':False]
['text':'/ \param last  One past the end of the range of input values','line_number':128,'multiline':False]
['text':'/ \param out   An output iterator to write the clamped values into','line_number':129,'multiline':False]
['text':'/ \param lo    The lower bound of the range to be clamped to','line_number':130,'multiline':False]
['text':'/ \param hi    The upper bound of the range to be clamped to','line_number':131,'multiline':False]
['text':'/ \param p     A predicate to use to compare the values.','line_number':132,'multiline':False]
['text':'/                 p ( a, b ) returns a boolean.','line_number':133,'multiline':False]
['text':'/','line_number':135,'multiline':False]
['text':' this could also be written with bind and std::transform','line_number':141,'multiline':False]
['text':'/ \fn clamp_range ( const Range &r, OutputIterator out, ','line_number':147,'multiline':False]
['text':'/       typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type const & lo,','line_number':148,'multiline':False]
['text':'/       typename std::iterator_traits<typename boost::range_iterator<const Range>::type>::value_type const & hi,','line_number':149,'multiline':False]
['text':'/       Pred p )','line_number':150,'multiline':False]
['text':'/ \return clamp the sequence of values [first, last) into [ lo, hi ]','line_number':151,'multiline':False]
['text':'/     using the comparison predicate p.','line_number':152,'multiline':False]
['text':'/ ','line_number':153,'multiline':False]
['text':'/ \param r     The range of values to be clamped','line_number':154,'multiline':False]
['text':'/ \param out   An output iterator to write the clamped values into','line_number':155,'multiline':False]
['text':'/ \param lo    The lower bound of the range to be clamped to','line_number':156,'multiline':False]
['text':'/ \param hi    The upper bound of the range to be clamped to','line_number':157,'multiline':False]
['text':'/ \param p     A predicate to use to compare the values.','line_number':158,'multiline':False]
['text':'/                 p ( a, b ) returns a boolean.','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':'  Disable this template if the first two parameters are the same type;','line_number':161,'multiline':False]
['text':'  In that case, the user will get the two iterator version.','line_number':162,'multiline':False]
['text':' BOOST_ALGORITHM_CLAMP_HPP','line_number':176,'multiline':False]
