['text':'  Boost string_algo library erase.hpp header file  ---------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Pavol Droba 2002-2006.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'  See http://www.boost.org/ for updates, documentation, and revision history.','line_number':9,'multiline':False]
['text':'! \file
    Defines various erase algorithms. Each algorithm removes
    part(s) of the input according to a searching criteria.
','line_number':26,'multiline':True]
['text':'  erase_range -------------------------------------------------------//','line_number':34,'multiline':False]
['text':'! Erase range algorithm','line_number':36,'multiline':False]
['text':'!
            Remove the given range from the input. The result is a modified copy of 
            the input. It is returned as a sequence or copied to the output iterator.
    
            \param Output An output iterator to which the result will be copied
            \param Input An input sequence
            \param SearchRange A range in the input to be removed
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input

            \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':37,'multiline':True]
['text':'! Erase range algorithm','line_number':64,'multiline':False]
['text':'!
            \overload
        ','line_number':65,'multiline':True]
['text':'! Erase range algorithm','line_number':81,'multiline':False]
['text':'!
            Remove the given range from the input.
            The input sequence is modified in-place.

            \param Input An input sequence
            \param SearchRange A range in the input to be removed
        ','line_number':82,'multiline':True]
['text':'  erase_first  --------------------------------------------------------//','line_number':102,'multiline':False]
['text':'! Erase first algorithm','line_number':104,'multiline':False]
['text':'!
            Remove the first occurrence of the substring from the input.
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Search A substring to be searched for 
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input
            
            \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':105,'multiline':True]
['text':'! Erase first algorithm','line_number':134,'multiline':False]
['text':'!
            \overload
        ','line_number':135,'multiline':True]
['text':'! Erase first algorithm','line_number':149,'multiline':False]
['text':'!
            Remove the first occurrence of the substring from the input. 
            The input sequence is modified in-place.

            \param Input An input string
            \param Search A substring to be searched for. 
        ','line_number':150,'multiline':True]
['text':'  erase_first ( case insensitive ) ------------------------------------//','line_number':168,'multiline':False]
['text':'! Erase first algorithm ( case insensitive )','line_number':170,'multiline':False]
['text':'!
            Remove the first occurrence of the substring from the input. 
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.
            Searching is case insensitive.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Search A substring to be searched for 
            \param Loc A locale used for case insensitive comparison
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input

            \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':171,'multiline':True]
['text':'! Erase first algorithm ( case insensitive )','line_number':203,'multiline':False]
['text':'!
            \overload
        ','line_number':204,'multiline':True]
['text':'! Erase first algorithm ( case insensitive )','line_number':219,'multiline':False]
['text':'!
            Remove the first occurrence of the substring from the input. 
            The input sequence is modified in-place. Searching is case insensitive.

            \param Input An input string
            \param Search A substring to be searched for
            \param Loc A locale used for case insensitive comparison
        ','line_number':220,'multiline':True]
['text':'  erase_last  --------------------------------------------------------//','line_number':240,'multiline':False]
['text':'! Erase last algorithm','line_number':242,'multiline':False]
['text':'!
            Remove the last occurrence of the substring from the input. 
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Search A substring to be searched for.
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':243,'multiline':True]
['text':'! Erase last algorithm','line_number':272,'multiline':False]
['text':'!
            \overload
        ','line_number':273,'multiline':True]
['text':'! Erase last algorithm','line_number':287,'multiline':False]
['text':'!
            Remove the last occurrence of the substring from the input. 
            The input sequence is modified in-place.

            \param Input An input string
            \param Search A substring to be searched for 
        ','line_number':288,'multiline':True]
['text':'  erase_last ( case insensitive ) ------------------------------------//','line_number':306,'multiline':False]
['text':'! Erase last algorithm ( case insensitive )','line_number':308,'multiline':False]
['text':'!
            Remove the last occurrence of the substring from the input. 
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.
            Searching is case insensitive.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Search A substring to be searched for
            \param Loc A locale used for case insensitive comparison
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':309,'multiline':True]
['text':'! Erase last algorithm ( case insensitive )','line_number':341,'multiline':False]
['text':'!
            \overload
        ','line_number':342,'multiline':True]
['text':'! Erase last algorithm ( case insensitive )','line_number':357,'multiline':False]
['text':'!
            Remove the last occurrence of the substring from the input. 
            The input sequence is modified in-place. Searching is case insensitive.

            \param Input An input string
            \param Search A substring to be searched for
            \param Loc A locale used for case insensitive comparison
        ','line_number':358,'multiline':True]
['text':'  erase_nth --------------------------------------------------------------------//','line_number':378,'multiline':False]
['text':'! Erase nth algorithm','line_number':380,'multiline':False]
['text':'!
            Remove the Nth occurrence of the substring in the input.
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.
            

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Search A substring to be searched for
            \param Nth An index of the match to be replaced. The index is 0-based.
                For negative N, matches are counted from the end of string.
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':381,'multiline':True]
['text':'! Erase nth algorithm','line_number':414,'multiline':False]
['text':'!
            \overload
        ','line_number':415,'multiline':True]
['text':'! Erase nth algorithm','line_number':430,'multiline':False]
['text':'!
            Remove the Nth occurrence of the substring in the input.
            The input sequence is modified in-place.

            \param Input An input string
            \param Search A substring to be searched for. 
            \param Nth An index of the match to be replaced. The index is 0-based.
                For negative N, matches are counted from the end of string.
        ','line_number':431,'multiline':True]
['text':'  erase_nth ( case insensitive ) ---------------------------------------------//','line_number':452,'multiline':False]
['text':'! Erase nth algorithm ( case insensitive )','line_number':454,'multiline':False]
['text':'!
            Remove the Nth occurrence of the substring in the input.
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator. 
            Searching is case insensitive.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Search A substring to be searched for.
            \param Nth An index of the match to be replaced. The index is 0-based.
                For negative N, matches are counted from the end of string.
            \param Loc A locale used for case insensitive comparison
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input

            \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':455,'multiline':True]
['text':'! Erase nth algorithm','line_number':490,'multiline':False]
['text':'!
            \overload
        ','line_number':491,'multiline':True]
['text':'! Erase nth algorithm','line_number':507,'multiline':False]
['text':'!
            Remove the Nth occurrence of the substring in the input.
            The input sequence is modified in-place. Searching is case insensitive.

            \param Input An input string
            \param Search A substring to be searched for. 
            \param Nth An index of the match to be replaced. The index is 0-based.
                For negative N, matches are counted from the end of string.
            \param Loc A locale used for case insensitive comparison
        ','line_number':508,'multiline':True]
['text':'  erase_all  --------------------------------------------------------//','line_number':532,'multiline':False]
['text':'! Erase all algorithm','line_number':534,'multiline':False]
['text':'!
            Remove all the occurrences of the string from the input. 
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.
                        

            \param Output An output iterator to which the result will be copied
            \param Input An input sequence
            \param Search A substring to be searched for. 
            \return An output iterator pointing just after the last inserted character or
                    a modified copy of the input

            \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':535,'multiline':True]
['text':'! Erase all algorithm','line_number':565,'multiline':False]
['text':'!
            \overload
        ','line_number':566,'multiline':True]
['text':'! Erase all algorithm','line_number':580,'multiline':False]
['text':'!
            Remove all the occurrences of the string from the input. 
            The input sequence is modified in-place.

            \param Input An input string
            \param Search A substring to be searched for. 
        ','line_number':581,'multiline':True]
['text':'  erase_all ( case insensitive ) ------------------------------------//','line_number':599,'multiline':False]
['text':'! Erase all algorithm ( case insensitive )','line_number':601,'multiline':False]
['text':'!
            Remove all the occurrences of the string from the input. 
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator. 
            Searching is case insensitive.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param Search A substring to be searched for
            \param Loc A locale used for case insensitive comparison
            \return An output iterator pointing just after the last inserted character or
                    a modified copy of the input

              \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':602,'multiline':True]
['text':'! Erase all algorithm ( case insensitive )','line_number':634,'multiline':False]
['text':'!
            \overload
        ','line_number':635,'multiline':True]
['text':'! Erase all algorithm ( case insensitive )','line_number':650,'multiline':False]
['text':'!
            Remove all the occurrences of the string from the input. 
            The input sequence is modified in-place. Searching is case insensitive.

            \param Input An input string
            \param Search A substring to be searched for. 
            \param Loc A locale used for case insensitive comparison
        ','line_number':651,'multiline':True]
['text':'  erase_head --------------------------------------------------------------------//','line_number':671,'multiline':False]
['text':'! Erase head algorithm','line_number':673,'multiline':False]
['text':'!
            Remove the head from the input. The head is a prefix of a sequence of given size. 
            If the sequence is shorter then required, the whole string is 
            considered to be the head. The result is a modified copy of the input. 
            It is returned as a sequence or copied to the output iterator.
            

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param N Length of the head.
                For N>=0, at most N characters are extracted.
                For N<0, size(Input)-|N| characters are extracted.
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input

             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':674,'multiline':True]
['text':'! Erase head algorithm','line_number':706,'multiline':False]
['text':'!
            \overload
        ','line_number':707,'multiline':True]
['text':'! Erase head algorithm','line_number':721,'multiline':False]
['text':'!
            Remove the head from the input. The head is a prefix of a sequence of given size. 
            If the sequence is shorter then required, the whole string is 
            considered to be the head. The input sequence is modified in-place.

            \param Input An input string
            \param N Length of the head
                For N>=0, at most N characters are extracted.
                For N<0, size(Input)-|N| characters are extracted.
        ','line_number':722,'multiline':True]
['text':'  erase_tail --------------------------------------------------------------------//','line_number':743,'multiline':False]
['text':'! Erase tail algorithm','line_number':745,'multiline':False]
['text':'!
            Remove the tail from the input. The tail is a suffix of a sequence of given size. 
            If the sequence is shorter then required, the whole string is 
            considered to be the tail. 
            The result is a modified copy of the input. It is returned as a sequence 
            or copied to the output iterator.

            \param Output An output iterator to which the result will be copied
            \param Input An input string
            \param N Length of the tail.                 
                For N>=0, at most N characters are extracted.
                For N<0, size(Input)-|N| characters are extracted.
            \return An output iterator pointing just after the last inserted character or
                a modified copy of the input
            
             \note The second variant of this function provides the strong exception-safety guarantee
        ','line_number':746,'multiline':True]
['text':'! Erase tail algorithm','line_number':778,'multiline':False]
['text':'!
            \overload
        ','line_number':779,'multiline':True]
['text':'! Erase tail algorithm','line_number':793,'multiline':False]
['text':'!
            Remove the tail from the input. The tail is a suffix of a sequence of given size. 
            If the sequence is shorter then required, the whole string is
            considered to be the tail. The input sequence is modified in-place.

            \param Input An input string
            \param N Length of the tail
                For N>=0, at most N characters are extracted.
                For N<0, size(Input)-|N| characters are extracted.
        ','line_number':794,'multiline':True]
['text':' namespace algorithm','line_number':815,'multiline':False]
['text':' pull names into the boost namespace','line_number':817,'multiline':False]
['text':' namespace boost','line_number':841,'multiline':False]
['text':' BOOST_ERASE_HPP','line_number':844,'multiline':False]
