['text':'  (C) Copyright Herve Bronnimann 2004.','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':3,'multiline':False]
['text':' file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':'
 Revision history:
   1 July 2004
      Split the code into two headers to lessen dependence on
      Boost.tuple. (Herve)
   26 June 2004
      Added the code for the boost minmax library. (Herve)
','line_number':6,'multiline':True]
['text':' PROPOSED STANDARD EXTENSIONS:
 *
 * minmax_element(first, last)
 * Effect: std::make_pair( std::min_element(first, last),
 *                         std::max_element(first, last) );
 *
 * minmax_element(first, last, comp)
 * Effect: std::make_pair( std::min_element(first, last, comp),
 *                         std::max_element(first, last, comp) );
 ','line_number':18,'multiline':True]
['text':' for std::pair and std::make_pair','line_number':29,'multiline':False]
['text':' for obtaining a uniform version of minmax_element','line_number':35,'multiline':False]
['text':' that compiles with VC++ 6.0 -- avoid the iterator_traits by','line_number':36,'multiline':False]
['text':' having comparison object over iterator, not over dereferenced value','line_number':37,'multiline':False]
['text':' common base for the two minmax_element overloads','line_number':54,'multiline':False]
['text':' if only one element','line_number':66,'multiline':False]
['text':' treat first pair separately (only one comparison for first two elements)','line_number':71,'multiline':False]
['text':' then each element by pairs, with at most 3 comparisons per pair','line_number':80,'multiline':False]
['text':' if odd number of elements, treat last element','line_number':102,'multiline':False]
['text':' odd number of elements','line_number':103,'multiline':False]
['text':' resolve min_result being incorrect with one extra comparison','line_number':112,'multiline':False]
['text':' (in which case potential_min_result is necessarily the correct result)','line_number':113,'multiline':False]
['text':' namespace detail','line_number':121,'multiline':False]
['text':' PROPOSED BOOST EXTENSIONS
 * In the description below, [rfirst,rlast) denotes the reversed range
 * of [first,last). Even though the iterator type of first and last may
 * be only a Forward Iterator, it is possible to explain the semantics
 * by assuming that it is a Bidirectional Iterator. In the sequel,
 * reverse(ForwardIterator&) returns the reverse_iterator adaptor.
 * This is not how the functions would be implemented!
 *
 * first_min_element(first, last)
 * Effect: std::min_element(first, last);
 *
 * first_min_element(first, last, comp)
 * Effect: std::min_element(first, last, comp);
 *
 * last_min_element(first, last)
 * Effect: reverse( std::min_element(reverse(last), reverse(first)) );
 *
 * last_min_element(first, last, comp)
 * Effect: reverse( std::min_element(reverse(last), reverse(first), comp) );
 *
 * first_max_element(first, last)
 * Effect: std::max_element(first, last);
 *
 * first_max_element(first, last, comp)
 * Effect: max_element(first, last);
 *
 * last_max_element(first, last)
 * Effect: reverse( std::max_element(reverse(last), reverse(first)) );
 *
 * last_max_element(first, last, comp)
 * Effect: reverse( std::max_element(reverse(last), reverse(first), comp) );
 *
 * first_min_first_max_element(first, last)
 * Effect: std::make_pair( first_min_element(first, last),
 *                         first_max_element(first, last) );
 *
 * first_min_first_max_element(first, last, comp)
 * Effect: std::make_pair( first_min_element(first, last, comp),
 *                         first_max_element(first, last, comp) );
 *
 * first_min_last_max_element(first, last)
 * Effect: std::make_pair( first_min_element(first, last),
 *                         last_max_element(first, last) );
 *
 * first_min_last_max_element(first, last, comp)
 * Effect: std::make_pair( first_min_element(first, last, comp),
 *                         last_max_element(first, last, comp) );
 *
 * last_min_first_max_element(first, last)
 * Effect: std::make_pair( last_min_element(first, last),
 *                         first_max_element(first, last) );
 *
 * last_min_first_max_element(first, last, comp)
 * Effect: std::make_pair( last_min_element(first, last, comp),
 *                         first_max_element(first, last, comp) );
 *
 * last_min_last_max_element(first, last)
 * Effect: std::make_pair( last_min_element(first, last),
 *                         last_max_element(first, last) );
 *
 * last_min_last_max_element(first, last, comp)
 * Effect: std::make_pair( last_min_element(first, last, comp),
 *                         last_max_element(first, last, comp) );
 ','line_number':141,'multiline':True]
['text':' Min_element and max_element variants','line_number':208,'multiline':False]
['text':' common base for the overloads','line_number':210,'multiline':False]
['text':' namespace detail','line_number':264,'multiline':False]
['text':' Minmax_element variants -- comments removed','line_number':331,'multiline':False]
['text':' namespace detail','line_number':485,'multiline':False]
['text':' namespace boost','line_number':553,'multiline':False]
['text':' BOOST_ALGORITHM_MINMAX_ELEMENT_HPP','line_number':555,'multiline':False]
