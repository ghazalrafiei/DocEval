['text':' fp_traits.hpp','line_number':1,'multiline':False]
['text':' Copyright (c) 2006 Johan Rade','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':8,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt','line_number':9,'multiline':False]
['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':10,'multiline':False]
['text':'
To support old compilers, care has been taken to avoid partial template
specialization and meta function forwarding.
With these techniques, the code could be simplified.
','line_number':12,'multiline':True]
['text':' The VAX floating point formats are used (for float and double)','line_number':19,'multiline':False]
['text':' Determine endianness','line_number':30,'multiline':False]
['text':'github.com/boostorg/math','line_number':44,'multiline':False]
['text':'github.com/boostorg/math','line_number':58,'multiline':False]
['text':' Determine endianness','line_number':59,'multiline':False]
['text':' aCC 6 appears to do "#define fpclassify fpclassify" which messes us up a bit!','line_number':100,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':113,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':119,'multiline':False]
['text':'
The following classes are used to tag the different methods that are used
for floating point classification
','line_number':121,'multiline':True]
['text':'','line_number':134,'multiline':False]
['text':' These helper functions are used only when numeric_limits<>','line_number':135,'multiline':False]
['text':' members are not compile time constants:','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':148,'multiline':False]
['text':'
Most processors support three different floating point precisions:
single precision (32 bits), double precision (64 bits)
and extended double precision (80 - 128 bits, depending on the processor)

Note that the C++ type long double can be implemented
both as double precision and extended double precision.
','line_number':150,'multiline':True]
['text':' native_tag version --------------------------------------------------------------','line_number':164,'multiline':False]
['text':' generic_tag version -------------------------------------------------------------','line_number':171,'multiline':False]
['text':' ieee_tag versions ---------------------------------------------------------------','line_number':182,'multiline':False]
['text':'
These specializations of fp_traits_non_native contain information needed
to "parse" the binary representation of a floating point number.

Typedef members:

  bits -- the target type when copying the leading bytes of a floating
      point number. It is a typedef for uint32_t or uint64_t.

  method -- tells us whether all bytes are copied or not.
      It is a typedef for ieee_copy_all_bits_tag or ieee_copy_leading_bits_tag.

Static data members:

  sign, exponent, flag, significand -- bit masks that give the meaning of the
  bits in the leading bytes.

Static function members:

  get_bits(), set_bits() -- provide access to the leading bytes.

','line_number':184,'multiline':True]
['text':' ieee_tag version, float (32 bits) -----------------------------------------------','line_number':207,'multiline':False]
['text':' ieee_tag version, double (64 bits) ----------------------------------------------','line_number':225,'multiline':False]
['text':'..............................................................................','line_number':255,'multiline':False]
['text':' #ifndef BOOST_FPCLASSIFY_VAX_FORMAT','line_number':276,'multiline':False]
['text':' long double (64 bits) -------------------------------------------------------','line_number':278,'multiline':False]
['text':'..............................................................................','line_number':308,'multiline':False]
['text':' long double (>64 bits), x86 and x64 -----------------------------------------','line_number':330,'multiline':False]
['text':' Intel extended double precision format (80 bits)','line_number':336,'multiline':False]
['text':' long double (>64 bits), Itanium ---------------------------------------------','line_number':362,'multiline':False]
['text':' The floating point format is unknown at compile time','line_number':366,'multiline':False]
['text':' No template specialization is provided.','line_number':367,'multiline':False]
['text':' The generic_tag definition is used.','line_number':368,'multiline':False]
['text':' The Itanium supports both','line_number':370,'multiline':False]
['text':' the Intel extended double precision format (80 bits) and','line_number':371,'multiline':False]
['text':' the IEEE extended double precision format with 15 exponent bits (128 bits).','line_number':372,'multiline':False]
['text':'','line_number':376,'multiline':False]
['text':' Define nothing here and fall though to generic_tag:','line_number':377,'multiline':False]
['text':' We have GCC's "double double" in effect, and any attempt','line_number':378,'multiline':False]
['text':' to handle it via bit-fiddling is pretty much doomed to fail...','line_number':379,'multiline':False]
['text':'','line_number':380,'multiline':False]
['text':' long double (>64 bits), PowerPC ---------------------------------------------','line_number':382,'multiline':False]
['text':' PowerPC extended double precision format (128 bits)','line_number':387,'multiline':False]
['text':' long double (>64 bits), Motorola 68K ----------------------------------------','line_number':416,'multiline':False]
['text':' Motorola extended double precision format (96 bits)','line_number':421,'multiline':False]
['text':' It is the same format as the Intel extended double precision format,','line_number':423,'multiline':False]
['text':' except that 1) it is big-endian, 2) the 3rd and 4th byte are padding, and','line_number':424,'multiline':False]
['text':' 3) the flag bit is not set for infinity','line_number':425,'multiline':False]
['text':' copy 1st, 2nd, 5th and 6th byte. 3rd and 4th byte are padding.','line_number':437,'multiline':False]
['text':' long double (>64 bits), All other processors --------------------------------','line_number':457,'multiline':False]
['text':' IEEE extended double precision format with 15 exponent bits (128 bits)','line_number':461,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':491,'multiline':False]
['text':' size_to_precision is a type switch for converting a C++ floating point type','line_number':493,'multiline':False]
['text':' to the corresponding precision type.','line_number':494,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':526,'multiline':False]
['text':'','line_number':527,'multiline':False]
['text':' Figure out whether to use native classification functions based on','line_number':528,'multiline':False]
['text':' whether T is a built in floating point type or not:','line_number':529,'multiline':False]
['text':'','line_number':530,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':553,'multiline':False]
['text':' fp_traits is a type switch that selects the right fp_traits_non_native','line_number':555,'multiline':False]
['text':'------------------------------------------------------------------------------','line_number':581,'multiline':False]
['text':' namespace detail','line_number':583,'multiline':False]
['text':' namespace math','line_number':584,'multiline':False]
['text':' namespace boost','line_number':585,'multiline':False]
