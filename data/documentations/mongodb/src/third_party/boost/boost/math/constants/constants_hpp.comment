['text':'  Copyright John Maddock 2005-2006, 2011.','line_number':1,'multiline':False]
['text':'  Copyright Paul A. Bristow 2006-2011.','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' This is the only way we can avoid','line_number':27,'multiline':False]
['text':' warning: non-standard suffix on floating constant [-Wpedantic]','line_number':28,'multiline':False]
['text':' when building with -Wall -pedantic.  Neither __extension__','line_number':29,'multiline':False]
['text':' nor #pragma diagnostic ignored work :(','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' To permit other calculations at about 100 decimal digits with some UDT,','line_number':39,'multiline':False]
['text':' it is obviously necessary to define constants to this accuracy.','line_number':40,'multiline':False]
['text':' However, some compilers do not accept decimal digits strings as long as this.','line_number':42,'multiline':False]
['text':' So the constant is split into two parts, with the 1st containing at least','line_number':43,'multiline':False]
['text':' long double precision, and the 2nd zero if not needed or known.','line_number':44,'multiline':False]
['text':' The 3rd part permits an exponent to be provided if necessary (use zero if none) -','line_number':45,'multiline':False]
['text':' the other two parameters may only contain decimal digits (and sign and decimal point),','line_number':46,'multiline':False]
['text':' and may NOT include an exponent like 1.234E99.','line_number':47,'multiline':False]
['text':' The second digit string is only used if T is a User-Defined Type,','line_number':48,'multiline':False]
['text':' when the constant is converted to a long string literal and lexical_casted to type T.','line_number':49,'multiline':False]
['text':' (This is necessary because you can't use a numeric constant','line_number':50,'multiline':False]
['text':' since even a long double might not have enough digits).','line_number':51,'multiline':False]
['text':' Must be the largest value above:','line_number':60,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' Traits class determines how to convert from string based on whether T has a constructor','line_number':65,'multiline':False]
['text':' from const char* or not:','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' Max number of binary digits in the string representations of our constants:','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' The default implementations come next: ','line_number':180,'multiline':True]
['text':' This one is for very high precision that is none the less known at compile time: ','line_number':186,'multiline':True]
['text':' public getters come next ','line_number':205,'multiline':True]
['text':' This one is for true arbitrary precision, which may well vary at runtime: ','line_number':224,'multiline':True]
['text':' end of struct ','line_number':229,'multiline':True]
['text':' namespace detail ','line_number':230,'multiline':True]
['text':' The actual forwarding function: ','line_number':233,'multiline':True]
['text':' Now the namespace specific versions: ','line_number':240,'multiline':True]
['text':'BOOST_DEFINE_MATH_CONSTANT(pow23_four_minus_pi, 7.953167673715975443483953350568065807e-01, "7.95316767371597544348395335056806580727639173327713205445302234388856268267518187590758006888600828436839800178e-01")','line_number':277,'multiline':False]
['text':' namespace constants','line_number':333,'multiline':False]
['text':' namespace math','line_number':334,'multiline':False]
['text':' namespace boost','line_number':335,'multiline':False]
['text':'','line_number':337,'multiline':False]
['text':' We deliberately include this *after* all the declarations above,','line_number':338,'multiline':False]
['text':' that way the calculation routines can call on other constants above:','line_number':339,'multiline':False]
['text':'','line_number':340,'multiline':False]
['text':' BOOST_MATH_CONSTANTS_CONSTANTS_INCLUDED','line_number':343,'multiline':False]
