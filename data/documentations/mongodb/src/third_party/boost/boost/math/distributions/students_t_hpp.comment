['text':'  Copyright John Maddock 2006.','line_number':1,'multiline':False]
['text':'  Copyright Paul A. Bristow 2006, 2012, 2017.','line_number':2,'multiline':False]
['text':'  Copyright Thomas Mang 2012.','line_number':3,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':5,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' http://en.wikipedia.org/wiki/Student%27s_t_distribution','line_number':12,'multiline':False]
['text':' http://www.itl.nist.gov/div898/handbook/eda/section3/eda3664.htm','line_number':13,'multiline':False]
['text':' for ibeta(a, b, x).','line_number':16,'multiline':False]
['text':' unreachable code (return after domain_error throw).','line_number':26,'multiline':False]
['text':' Constructor.','line_number':39,'multiline':False]
['text':' Checks that df > 0 or df == inf.','line_number':41,'multiline':False]
['text':' students_t_distribution','line_number':43,'multiline':False]
['text':' Parameter estimation:','line_number':50,'multiline':False]
['text':' Data member:','line_number':59,'multiline':False]
['text':' degrees of freedom is a real number > 0 or +infinity.','line_number':60,'multiline':False]
['text':' Convenience typedef for double version.','line_number':63,'multiline':False]
['text':'dist','line_number':71,'multiline':True]
['text':' Range of permissible values for random variable x.','line_number':72,'multiline':False]
['text':' Now including infinity.','line_number':73,'multiline':False]
['text':'return std::pair<RealType, RealType>(-max_value<RealType>(), max_value<RealType>());','line_number':75,'multiline':False]
['text':'dist','line_number':80,'multiline':True]
['text':' Range of supported values for random variable x.','line_number':81,'multiline':False]
['text':' Now including infinity.','line_number':82,'multiline':False]
['text':' This is range where cdf rises from 0 to 1, and outside it, the pdf is zero.','line_number':83,'multiline':False]
['text':'return std::pair<RealType, RealType>(-max_value<RealType>(), max_value<RealType>());','line_number':85,'multiline':False]
['text':' for ADL of std functions.','line_number':93,'multiline':False]
['text':' Check that df > 0 or == +infinity.','line_number':100,'multiline':False]
['text':' - or +infinity.','line_number':106,'multiline':False]
['text':' Use policies so that if policy requests lower precision, ','line_number':111,'multiline':False]
['text':' then get the normal distribution approximation earlier.','line_number':112,'multiline':False]
['text':' 1/eps','line_number':113,'multiline':False]
['text':' for 64-bit double 1/eps = 4503599627370496','line_number':114,'multiline':False]
['text':' Special case for really big degrees_of_freedom > 1 / eps ','line_number':116,'multiline':False]
['text':' - use normal distribution which is much faster and more accurate.','line_number':117,'multiline':False]
['text':' ','line_number':122,'multiline':False]
['text':' pdf','line_number':135,'multiline':False]
['text':' degrees_of_freedom > 0 or infinity check:','line_number':141,'multiline':False]
['text':' Check that df > 0 or == +infinity.','line_number':143,'multiline':False]
['text':' Check for bad x first.','line_number':148,'multiline':False]
['text':' Special case with exact result.','line_number':155,'multiline':False]
['text':' x == - or + infinity, regardless of df.','line_number':159,'multiline':False]
['text':' Use policies so that if policy requests lower precision, ','line_number':164,'multiline':False]
['text':' then get the normal distribution approximation earlier.','line_number':165,'multiline':False]
['text':' 1/eps','line_number':166,'multiline':False]
['text':' for 64-bit double 1/eps = 4503599627370496','line_number':167,'multiline':False]
['text':' Special case for really big degrees_of_freedom > 1 / eps (perhaps infinite?)','line_number':169,'multiline':False]
['text':' - use normal distribution which is much faster and more accurate.','line_number':170,'multiline':False]
['text':' normal df case.','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':' Calculate probability of Student's t using the incomplete beta function.','line_number':178,'multiline':False]
['text':' probability = ibeta(degrees_of_freedom / 2, 1/2, degrees_of_freedom / (degrees_of_freedom + t*t))','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' However when t is small compared to the degrees of freedom, that formula','line_number':181,'multiline':False]
['text':' suffers from rounding error, use the identity formula to work around','line_number':182,'multiline':False]
['text':' the problem:','line_number':183,'multiline':False]
['text':'','line_number':184,'multiline':False]
['text':' I[x](a,b) = 1 - I[1-x](b,a)','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
['text':' and:','line_number':187,'multiline':False]
['text':'','line_number':188,'multiline':False]
['text':'     x = df / (df + t^2)','line_number':189,'multiline':False]
['text':'','line_number':190,'multiline':False]
['text':' so:','line_number':191,'multiline':False]
['text':'','line_number':192,'multiline':False]
['text':' 1 - x = t^2 / (df + t^2)','line_number':193,'multiline':False]
['text':'','line_number':194,'multiline':False]
['text':' cdf','line_number':209,'multiline':False]
['text':' for ADL of std functions','line_number':214,'multiline':False]
['text':'','line_number':215,'multiline':False]
['text':' Obtain parameters:','line_number':216,'multiline':False]
['text':' Check for domain errors:','line_number':219,'multiline':False]
['text':' Check that df > 0 or == +infinity.','line_number':223,'multiline':False]
['text':' Special cases, regardless of degrees_of_freedom.','line_number':227,'multiline':False]
['text':'','line_number':233,'multiline':False]
['text':'','line_number':234,'multiline':False]
['text':' This next block is disabled in favour of a faster method than','line_number':236,'multiline':False]
['text':' incomplete beta inverse, but code retained for future reference:','line_number':237,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':' Calculate quantile of Student's t using the incomplete beta function inverse:','line_number':239,'multiline':False]
['text':'','line_number':247,'multiline':False]
['text':' Figure out sign based on the size of p:','line_number':248,'multiline':False]
['text':'','line_number':249,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':' Depending on how many digits RealType has, this may forward','line_number':256,'multiline':False]
['text':' to the incomplete beta inverse as above.  Otherwise uses a','line_number':257,'multiline':False]
['text':' faster method that is accurate to ~15 digits everywhere','line_number':258,'multiline':False]
['text':' and a couple of epsilon at double precision and in the central ','line_number':259,'multiline':False]
['text':' region where most use cases will occur...','line_number':260,'multiline':False]
['text':'','line_number':261,'multiline':False]
['text':' quantile','line_number':263,'multiline':False]
['text':'','line_number':277,'multiline':False]
['text':' Parameter estimation follows:','line_number':278,'multiline':False]
['text':'','line_number':279,'multiline':False]
['text':'','line_number':281,'multiline':False]
['text':' Functors for finding degrees of freedom:','line_number':282,'multiline':False]
['text':'','line_number':283,'multiline':False]
['text':' ','line_number':293,'multiline':False]
['text':' namespace detail','line_number':308,'multiline':False]
['text':'','line_number':319,'multiline':False]
['text':' Check for domain errors:','line_number':320,'multiline':False]
['text':'','line_number':321,'multiline':False]
['text':'dist','line_number':346,'multiline':True]
['text':' Assume no checks on degrees of freedom are useful (unlike mean).','line_number':348,'multiline':False]
['text':' Always zero by definition.','line_number':349,'multiline':False]
['text':'dist','line_number':353,'multiline':True]
['text':' Assume no checks on degrees of freedom are useful (unlike mean).','line_number':355,'multiline':False]
['text':' Always zero by definition.','line_number':356,'multiline':False]
['text':' See section 5.1 on moments at  http://en.wikipedia.org/wiki/Student%27s_t-distribution','line_number':359,'multiline':False]
['text':' Revised for https://svn.boost.org/trac/boost/ticket/7177','line_number':363,'multiline':False]
['text':' mean is undefined for moment <= 1!','line_number':366,'multiline':False]
['text':' mean','line_number':373,'multiline':False]
['text':' http://en.wikipedia.org/wiki/Student%27s_t-distribution','line_number':377,'multiline':False]
['text':' Revised for https://svn.boost.org/trac/boost/ticket/7177','line_number':378,'multiline':False]
['text':' NaN or undefined for <= 2.','line_number':381,'multiline':False]
['text':' Undefined.','line_number':386,'multiline':False]
['text':' +infinity.','line_number':389,'multiline':False]
['text':' Use policies so that if policy requests lower precision, ','line_number':393,'multiline':False]
['text':' then get the normal distribution approximation earlier.','line_number':394,'multiline':False]
['text':' 1/eps','line_number':395,'multiline':False]
['text':' for 64-bit double 1/eps = 4503599627370496','line_number':396,'multiline':False]
['text':' Special case for really big degrees_of_freedom > 1 / eps.','line_number':398,'multiline':False]
['text':' variance','line_number':405,'multiline':False]
['text':' Undefined for moment k = 3.','line_number':412,'multiline':False]
['text':' For all valid df, including infinity.','line_number':419,'multiline':False]
['text':' skewness','line_number':420,'multiline':False]
['text':' Undefined or infinity for moment k = 4.','line_number':427,'multiline':False]
['text':' Undefined.','line_number':432,'multiline':False]
['text':' +infinity.','line_number':435,'multiline':False]
['text':' Use policies so that if policy requests lower precision, ','line_number':439,'multiline':False]
['text':' then get the normal distribution approximation earlier.','line_number':440,'multiline':False]
['text':' 1/eps','line_number':441,'multiline':False]
['text':' for 64-bit double 1/eps = 4503599627370496','line_number':442,'multiline':False]
['text':' Special case for really big degrees_of_freedom > 1 / eps.','line_number':444,'multiline':False]
['text':'return 3 * (df - 2) / (df - 4); re-arranged to','line_number':449,'multiline':False]
['text':' kurtosis','line_number':452,'multiline':False]
['text':' see http://mathworld.wolfram.com/Kurtosis.html','line_number':457,'multiline':False]
['text':' Undefined or infinity for moment k = 4.','line_number':461,'multiline':False]
['text':' Undefined.','line_number':466,'multiline':False]
['text':' +infinity.','line_number':469,'multiline':False]
['text':' Use policies so that if policy requests lower precision, ','line_number':473,'multiline':False]
['text':' then get the normal distribution approximation earlier.','line_number':474,'multiline':False]
['text':' 1/eps','line_number':475,'multiline':False]
['text':' for 64-bit double 1/eps = 4503599627370496','line_number':476,'multiline':False]
['text':' Special case for really big degrees_of_freedom > 1 / eps.','line_number':478,'multiline':False]
['text':' namespace math','line_number':499,'multiline':False]
['text':' namespace boost','line_number':500,'multiline':False]
['text':' This include must be at the end, *after* the accessors','line_number':506,'multiline':False]
['text':' for this distribution have been defined, in order to','line_number':507,'multiline':False]
['text':' keep compilers that support two-phase lookup happy.','line_number':508,'multiline':False]
['text':' BOOST_STATS_STUDENTS_T_HPP','line_number':511,'multiline':False]
