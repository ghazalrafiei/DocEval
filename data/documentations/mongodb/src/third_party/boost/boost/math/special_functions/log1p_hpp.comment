['text':'  (C) Copyright John Maddock 2005-2006.','line_number':1,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':2,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':3,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':' Unreachable code (release mode only warning)','line_number':12,'multiline':False]
['text':'','line_number':28,'multiline':False]
['text':' This is the only way we can avoid','line_number':29,'multiline':False]
['text':' warning: non-standard suffix on floating constant [-Wpedantic]','line_number':30,'multiline':False]
['text':' when building with -Wall -pedantic.  Neither __extension__','line_number':31,'multiline':False]
['text':' nor #pragma diagnostic ignored work :(','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' Functor log1p_series returns the next term in the Taylor series','line_number':41,'multiline':False]
['text':'   pow(-1, k-1)*pow(x, k) / k','line_number':42,'multiline':False]
['text':' each time that operator() is invoked.','line_number':43,'multiline':False]
['text':'','line_number':44,'multiline':False]
['text':' Algorithm log1p is part of C99, but is not yet provided by many compilers.','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':' This version uses a Taylor series expansion for 0.5 > x > epsilon, which may','line_number':74,'multiline':False]
['text':' require up to std::numeric_limits<T>::digits+1 terms to be calculated. ','line_number':75,'multiline':False]
['text':' It would be much more efficient to use the equivalence:','line_number':76,'multiline':False]
['text':'   log(1+x) == (log(1+x) * x) / ((1-x) - 1)','line_number':77,'multiline':False]
['text':' Unfortunately many optimizing compilers make such a mess of this, that ','line_number':78,'multiline':False]
['text':' it performs no better than log(1+x): which is to say not very well at all.','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' The function returns the natural logarithm of 1 + x.','line_number':83,'multiline':False]
['text':' Note that without numeric_limits specialisation support, ','line_number':99,'multiline':False]
['text':' epsilon just returns zero, and our "optimisation" will always fail:','line_number':100,'multiline':False]
['text':' The function returns the natural logarithm of 1 + x.','line_number':114,'multiline':False]
['text':' Note that without numeric_limits specialisation support, ','line_number':129,'multiline':False]
['text':' epsilon just returns zero, and our "optimisation" will always fail:','line_number':130,'multiline':False]
['text':' Maximum Deviation Found:                     1.846e-017','line_number':134,'multiline':False]
['text':' Expected Error Term:                         1.843e-017','line_number':135,'multiline':False]
['text':' Maximum Relative Change in Control Points:   8.138e-004','line_number':136,'multiline':False]
['text':' Max Error found at double precision =        3.250766e-016','line_number':137,'multiline':False]
['text':' The function returns the natural logarithm of 1 + x.','line_number':167,'multiline':False]
['text':' Note that without numeric_limits specialisation support, ','line_number':182,'multiline':False]
['text':' epsilon just returns zero, and our "optimisation" will always fail:','line_number':183,'multiline':False]
['text':' Maximum Deviation Found:                     8.089e-20','line_number':187,'multiline':False]
['text':' Expected Error Term:                         8.088e-20','line_number':188,'multiline':False]
['text':' Maximum Relative Change in Control Points:   9.648e-05','line_number':189,'multiline':False]
['text':' Max Error found at long double precision =   2.242324e-19','line_number':190,'multiline':False]
['text':' The function returns the natural logarithm of 1 + x.','line_number':222,'multiline':False]
['text':' Note that without numeric_limits specialisation support, ','line_number':237,'multiline':False]
['text':' epsilon just returns zero, and our "optimisation" will always fail:','line_number':238,'multiline':False]
['text':' Maximum Deviation Found:                     6.910e-08','line_number':242,'multiline':False]
['text':' Expected Error Term:                         6.910e-08','line_number':243,'multiline':False]
['text':' Maximum Relative Change in Control Points:   2.509e-04','line_number':244,'multiline':False]
['text':' Max Error found at double precision =        6.910422e-08','line_number':245,'multiline':False]
['text':' Max Error found at float precision =         8.357242e-08','line_number':246,'multiline':False]
['text':' namespace detail','line_number':294,'multiline':False]
['text':'','line_number':379,'multiline':False]
['text':' You should only enable this branch if you are absolutely sure','line_number':380,'multiline':False]
['text':' that your compilers optimizer won't mess this code up!!','line_number':381,'multiline':False]
['text':' Currently tested with VC8 and Intel 9.1.','line_number':382,'multiline':False]
['text':'','line_number':383,'multiline':False]
['text':'','line_number':405,'multiline':False]
['text':' For some reason this fails to compile under WinCE...','line_number':406,'multiline':False]
['text':' Needs more investigation.','line_number':407,'multiline':False]
['text':'','line_number':408,'multiline':False]
['text':'','line_number':432,'multiline':False]
['text':' Compute log(1+x)-x:','line_number':433,'multiline':False]
['text':'','line_number':434,'multiline':False]
['text':' Note that without numeric_limits specialisation support, ','line_number':453,'multiline':False]
['text':' epsilon just returns zero, and our "optimisation" will always fail:','line_number':454,'multiline':False]
['text':' namespace math','line_number':473,'multiline':False]
['text':' namespace boost','line_number':474,'multiline':False]
['text':' BOOST_MATH_LOG1P_INCLUDED','line_number':480,'multiline':False]
