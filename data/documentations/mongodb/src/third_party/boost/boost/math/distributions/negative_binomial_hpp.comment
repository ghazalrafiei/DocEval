['text':' boost\math\special_functions\negative_binomial.hpp','line_number':1,'multiline':False]
['text':' Copyright Paul A. Bristow 2007.','line_number':3,'multiline':False]
['text':' Copyright John Maddock 2007.','line_number':4,'multiline':False]
['text':' Use, modification and distribution are subject to the','line_number':6,'multiline':False]
['text':' Boost Software License, Version 1.0.','line_number':7,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt','line_number':8,'multiline':False]
['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':' http://en.wikipedia.org/wiki/negative_binomial_distribution','line_number':11,'multiline':False]
['text':' http://mathworld.wolfram.com/NegativeBinomialDistribution.html','line_number':12,'multiline':False]
['text':' http://documents.wolfram.com/teachersedition/Teacher/Statistics/DiscreteDistributions.html','line_number':13,'multiline':False]
['text':' The negative binomial distribution NegativeBinomialDistribution[n, p]','line_number':15,'multiline':False]
['text':' is the distribution of the number (k) of failures that occur in a sequence of trials before','line_number':16,'multiline':False]
['text':' r successes have occurred, where the probability of success in each trial is p.','line_number':17,'multiline':False]
['text':' In a sequence of Bernoulli trials or events','line_number':19,'multiline':False]
['text':' (independent, yes or no, succeed or fail) with success_fraction probability p,','line_number':20,'multiline':False]
['text':' negative_binomial is the probability that k or fewer failures','line_number':21,'multiline':False]
['text':' precede the r th trial's success.','line_number':22,'multiline':False]
['text':' random variable k is the number of failures (NOT the probability).','line_number':23,'multiline':False]
['text':' Negative_binomial distribution is a discrete probability distribution.','line_number':25,'multiline':False]
['text':' But note that the negative binomial distribution','line_number':26,'multiline':False]
['text':' (like others including the binomial, Poisson & Bernoulli)','line_number':27,'multiline':False]
['text':' is strictly defined as a discrete function: only integral values of k are envisaged.','line_number':28,'multiline':False]
['text':' However because of the method of calculation using a continuous gamma function,','line_number':29,'multiline':False]
['text':' it is convenient to treat it as if a continuous function,','line_number':30,'multiline':False]
['text':' and permit non-integral values of k.','line_number':31,'multiline':False]
['text':' However, by default the policy is to use discrete_quantile_policy.','line_number':33,'multiline':False]
['text':' To enforce the strict mathematical model, users should use conversion','line_number':35,'multiline':False]
['text':' on k outside this function to ensure that k is integral.','line_number':36,'multiline':False]
['text':' MATHCAD cumulative negative binomial pnbinom(k, n, p)','line_number':38,'multiline':False]
['text':' Implementation note: much greater speed, and perhaps greater accuracy,','line_number':40,'multiline':False]
['text':' might be achieved for extreme values by using a normal approximation.','line_number':41,'multiline':False]
['text':' This is NOT been tested or implemented.','line_number':42,'multiline':False]
['text':' for ibeta(a, b, x) == Ix(a, b).','line_number':48,'multiline':False]
['text':' complement.','line_number':49,'multiline':False]
['text':' error checks domain_error & logic_error.','line_number':50,'multiline':False]
['text':' isnan.','line_number':51,'multiline':False]
['text':' for root finding.','line_number':52,'multiline':False]
['text':' using std::numeric_limits;','line_number':55,'multiline':False]
['text':' This believed not now necessary, so commented out.','line_number':60,'multiline':False]
['text':'#  pragma warning(disable: 4702) // unreachable code.','line_number':61,'multiline':False]
['text':' in domain_error_imp in error_handling.','line_number':62,'multiline':False]
['text':' Common error checking routines for negative binomial distribution functions:','line_number':71,'multiline':False]
['text':' Check k failures.','line_number':110,'multiline':False]
['text':' Check_dist_and_k','line_number':117,'multiline':False]
['text':' check_dist_and_prob','line_number':127,'multiline':False]
['text':'  namespace negative_binomial_detail','line_number':128,'multiline':False]
['text':' Constructor.','line_number':138,'multiline':False]
['text':' Check successes r > 0.','line_number':142,'multiline':False]
['text':' Check success_fraction 0 <= p <= 1.','line_number':143,'multiline':False]
['text':' negative_binomial_distribution constructor.','line_number':145,'multiline':False]
['text':' Private data getter class member functions.','line_number':147,'multiline':False]
['text':' Probability of success as fraction in range 0 to 1.','line_number':149,'multiline':False]
['text':' Total number of successes r.','line_number':153,'multiline':False]
['text':' alpha 0.05 equivalent to 95% for one-sided test.','line_number':160,'multiline':False]
['text':' of error checks.','line_number':163,'multiline':False]
['text':' Use complement ibeta_inv function for lower bound.','line_number':171,'multiline':False]
['text':' This is adapted from the corresponding binomial formula','line_number':172,'multiline':False]
['text':' here: http://www.itl.nist.gov/div898/handbook/prc/section2/prc241.htm','line_number':173,'multiline':False]
['text':' This is a Clopper-Pearson interval, and may be overly conservative,','line_number':174,'multiline':False]
['text':' see also "A Simple Improved Inferential Method for Some','line_number':175,'multiline':False]
['text':' Discrete Distributions" Yong CAI and K. KRISHNAMOORTHY','line_number':176,'multiline':False]
['text':' http://www.ucs.louisiana.edu/~kxk4695/Discrete_new.pdf','line_number':177,'multiline':False]
['text':'','line_number':178,'multiline':False]
['text':' find_lower_bound_on_p','line_number':180,'multiline':False]
['text':' alpha 0.05 equivalent to 95% for one-sided test.','line_number':185,'multiline':False]
['text':' of error checks.','line_number':188,'multiline':False]
['text':' Use complement ibetac_inv function for upper bound.','line_number':198,'multiline':False]
['text':' Note adjusted failures value: *not* failures+1 as usual.','line_number':199,'multiline':False]
['text':' This is adapted from the corresponding binomial formula','line_number':200,'multiline':False]
['text':' here: http://www.itl.nist.gov/div898/handbook/prc/section2/prc241.htm','line_number':201,'multiline':False]
['text':' This is a Clopper-Pearson interval, and may be overly conservative,','line_number':202,'multiline':False]
['text':' see also "A Simple Improved Inferential Method for Some','line_number':203,'multiline':False]
['text':' Discrete Distributions" Yong CAI and K. KRISHNAMOORTHY','line_number':204,'multiline':False]
['text':' http://www.ucs.louisiana.edu/~kxk4695/Discrete_new.pdf','line_number':205,'multiline':False]
['text':'','line_number':206,'multiline':False]
['text':' find_upper_bound_on_p','line_number':208,'multiline':False]
['text':' Estimate number of trials :','line_number':210,'multiline':False]
['text':' "How many trials do I need to be P% sure of seeing k or fewer failures?"','line_number':211,'multiline':False]
['text':' number of failures (k >= 0).','line_number':214,'multiline':False]
['text':' success fraction 0 <= p <= 1.','line_number':215,'multiline':False]
['text':' risk level threshold 0 <= alpha <= 1.','line_number':216,'multiline':False]
['text':' Error checks:','line_number':219,'multiline':False]
['text':' returns n - k','line_number':226,'multiline':False]
['text':' RealType find_number_of_failures','line_number':228,'multiline':False]
['text':' number of failures (k >= 0).','line_number':231,'multiline':False]
['text':' success fraction 0 <= p <= 1.','line_number':232,'multiline':False]
['text':' risk level threshold 0 <= alpha <= 1.','line_number':233,'multiline':False]
['text':' Error checks:','line_number':236,'multiline':False]
['text':' returns n - k','line_number':243,'multiline':False]
['text':' RealType find_number_of_trials complemented','line_number':245,'multiline':False]
['text':' successes.','line_number':248,'multiline':False]
['text':' success_fraction','line_number':249,'multiline':False]
['text':' template <class RealType, class Policy> class negative_binomial_distribution','line_number':250,'multiline':False]
['text':' Reserved name of type double.','line_number':252,'multiline':False]
['text':' dist ','line_number':260,'multiline':True]
['text':' Range of permissible values for random variable k.','line_number':261,'multiline':False]
['text':' max_integer?','line_number':263,'multiline':False]
['text':' dist ','line_number':267,'multiline':True]
['text':' Range of supported values for random variable k.','line_number':268,'multiline':False]
['text':' This is range where cdf rises from 0 to 1, and outside it, the pdf is zero.','line_number':269,'multiline':False]
['text':' max_integer?','line_number':271,'multiline':False]
['text':' Mean of Negative Binomial distribution = r(1-p)/p.','line_number':276,'multiline':False]
['text':' mean','line_number':278,'multiline':False]
['text':'template <class RealType, class Policy>','line_number':280,'multiline':False]
['text':'inline RealType median(const negative_binomial_distribution<RealType, Policy>& dist)','line_number':281,'multiline':False]
['text':'{ // Median of negative_binomial_distribution is not defined.','line_number':282,'multiline':False]
['text':'  return policies::raise_domain_error<RealType>(BOOST_CURRENT_FUNCTION, "Median is not implemented, result is %1%!", std::numeric_limits<RealType>::quiet_NaN());','line_number':283,'multiline':False]
['text':'} // median','line_number':284,'multiline':False]
['text':' Now implemented via quantile(half) in derived accessors.','line_number':285,'multiline':False]
['text':' Mode of Negative Binomial distribution = floor[(r-1) * (1 - p)/p]','line_number':289,'multiline':False]
['text':' ADL of std functions.','line_number':290,'multiline':False]
['text':' mode','line_number':292,'multiline':False]
['text':' skewness of Negative Binomial distribution = 2-p / (sqrt(r(1-p))','line_number':296,'multiline':False]
['text':' ADL of std functions.','line_number':297,'multiline':False]
['text':' skewness','line_number':303,'multiline':False]
['text':' kurtosis of Negative Binomial distribution','line_number':307,'multiline':False]
['text':' http://en.wikipedia.org/wiki/Negative_binomial is kurtosis_excess so add 3','line_number':308,'multiline':False]
['text':' kurtosis','line_number':312,'multiline':False]
['text':' kurtosis excess of Negative Binomial distribution','line_number':316,'multiline':False]
['text':' http://mathworld.wolfram.com/Kurtosis.html table of kurtosis_excess','line_number':317,'multiline':False]
['text':' kurtosis_excess','line_number':321,'multiline':False]
['text':' Variance of Binomial distribution = r (1-p) / p^2.','line_number':325,'multiline':False]
['text':' variance','line_number':328,'multiline':False]
['text':' RealType standard_deviation(const negative_binomial_distribution<RealType, Policy>& dist)','line_number':330,'multiline':False]
['text':' standard_deviation provided by derived accessors.','line_number':331,'multiline':False]
['text':' RealType hazard(const negative_binomial_distribution<RealType, Policy>& dist)','line_number':332,'multiline':False]
['text':' hazard of Negative Binomial distribution provided by derived accessors.','line_number':333,'multiline':False]
['text':' RealType chf(const negative_binomial_distribution<RealType, Policy>& dist)','line_number':334,'multiline':False]
['text':' chf of Negative Binomial distribution provided by derived accessors.','line_number':335,'multiline':False]
['text':' Probability Density/Mass Function.','line_number':339,'multiline':False]
['text':' Equivalent to:','line_number':358,'multiline':False]
['text':' return exp(lgamma(r + k) - lgamma(r) - lgamma(k+1)) * pow(p, r) * pow((1-p), k);','line_number':359,'multiline':False]
['text':' negative_binomial_pdf','line_number':361,'multiline':False]
['text':' Cumulative Distribution Function of Negative Binomial.','line_number':365,'multiline':False]
['text':' Regularized incomplete beta function.','line_number':367,'multiline':False]
['text':' k argument may be integral, signed, or unsigned, or floating point.','line_number':368,'multiline':False]
['text':' If necessary, it has already been promoted from an integral type.','line_number':369,'multiline':False]
['text':' Error check:','line_number':372,'multiline':False]
['text':' Ip(r, k+1) = ibeta(r, k+1, p)','line_number':385,'multiline':False]
['text':' cdf Cumulative Distribution Function Negative Binomial.','line_number':387,'multiline':False]
['text':' Complemented Cumulative Distribution Function Negative Binomial.','line_number':391,'multiline':False]
['text':' Regularized incomplete beta function complement.','line_number':394,'multiline':False]
['text':' k argument may be integral, signed, or unsigned, or floating point.','line_number':395,'multiline':False]
['text':' If necessary, it has already been promoted from an integral type.','line_number':396,'multiline':False]
['text':' Error check:','line_number':401,'multiline':False]
['text':' Calculate cdf negative binomial using the incomplete beta function.','line_number':412,'multiline':False]
['text':' Use of ibeta here prevents cancellation errors in calculating','line_number':413,'multiline':False]
['text':' 1-p if p is very small, perhaps smaller than machine epsilon.','line_number':414,'multiline':False]
['text':' Ip(k+1, r) = ibetac(r, k+1, p)','line_number':415,'multiline':False]
['text':' constrain_probability here?','line_number':416,'multiline':False]
['text':' Numerical errors might cause probability to be slightly outside the range < 0 or > 1.','line_number':418,'multiline':False]
['text':' This might cause trouble downstream, so warn, possibly throw exception, but constrain to the limits.','line_number':419,'multiline':False]
['text':' cdf Cumulative Distribution Function Negative Binomial.','line_number':421,'multiline':False]
['text':' Quantile, percentile/100 or Percent Point Negative Binomial function.','line_number':425,'multiline':False]
['text':' Return the number of expected failures k for a given probability p.','line_number':426,'multiline':False]
['text':' Inverse cumulative Distribution Function or Quantile (percentile / 100) of negative_binomial Probability.','line_number':428,'multiline':False]
['text':' MAthCAD pnbinom return smallest k such that negative_binomial(k, n, p) >= probability.','line_number':429,'multiline':False]
['text':' k argument may be integral, signed, or unsigned, or floating point.','line_number':430,'multiline':False]
['text':' BUT Cephes/CodeCogs says: finds argument p (0 to 1) such that cdf(k, n, p) = y','line_number':431,'multiline':False]
['text':' ADL of std functions.','line_number':433,'multiline':False]
['text':' Check dist and P.','line_number':437,'multiline':False]
['text':' Special cases.','line_number':445,'multiline':False]
['text':' Would need +infinity failures for total confidence.','line_number':447,'multiline':False]
['text':' usually means return +std::numeric_limits<RealType>::infinity();','line_number':452,'multiline':False]
['text':' unless #define BOOST_MATH_THROW_ON_OVERFLOW_ERROR','line_number':453,'multiline':False]
['text':' No failures are expected if P = 0.','line_number':456,'multiline':False]
['text':' Total trials will be just dist.successes.','line_number':457,'multiline':False]
['text':' p <= pdf(dist, 0) == cdf(dist, 0)','line_number':460,'multiline':False]
['text':' Would need +infinity failures for total confidence.','line_number':464,'multiline':False]
['text':' usually means return +std::numeric_limits<RealType>::infinity();','line_number':469,'multiline':False]
['text':' unless #define BOOST_MATH_THROW_ON_OVERFLOW_ERROR','line_number':470,'multiline':False]
['text':'
      // Calculate quantile of negative_binomial using the inverse incomplete beta function.
      using boost::math::ibeta_invb;
      return ibeta_invb(r, p, P, Policy()) - 1; //
      ','line_number':472,'multiline':True]
['text':'','line_number':484,'multiline':False]
['text':' Cornish-Fisher Negative binomial approximation not accurate in this area:','line_number':485,'multiline':False]
['text':'','line_number':486,'multiline':False]
['text':'','line_number':492,'multiline':False]
['text':' Max iterations permitted:','line_number':493,'multiline':False]
['text':'','line_number':494,'multiline':False]
['text':' RealType quantile(const negative_binomial_distribution dist, p)','line_number':506,'multiline':False]
['text':' Quantile or Percent Point Binomial function.','line_number':510,'multiline':False]
['text':' Return the number of expected failures k for a given','line_number':511,'multiline':False]
['text':' complement of the probability Q = 1 - P.','line_number':512,'multiline':False]
['text':' Error checks:','line_number':516,'multiline':False]
['text':' Special cases:','line_number':532,'multiline':False]
['text':'','line_number':533,'multiline':False]
['text':' There may actually be no answer to this question,','line_number':535,'multiline':False]
['text':' since the probability of zero failures may be non-zero,','line_number':536,'multiline':False]
['text':' but zero is the best we can do:','line_number':537,'multiline':False]
['text':' Probability 1 - Q  == 1 so infinite failures to achieve certainty.','line_number':540,'multiline':False]
['text':' Would need +infinity failures for total confidence.','line_number':541,'multiline':False]
['text':' usually means return +std::numeric_limits<RealType>::infinity();','line_number':546,'multiline':False]
['text':' unless #define BOOST_MATH_THROW_ON_OVERFLOW_ERROR','line_number':547,'multiline':False]
['text':' q <= cdf(complement(dist, 0)) == pdf(dist, 0)','line_number':550,'multiline':False]
['text':'','line_number':551,'multiline':False]
['text':' Success fraction is 0 so infinite failures to achieve certainty.','line_number':554,'multiline':False]
['text':' Would need +infinity failures for total confidence.','line_number':555,'multiline':False]
['text':' usually means return +std::numeric_limits<RealType>::infinity();','line_number':560,'multiline':False]
['text':' unless #define BOOST_MATH_THROW_ON_OVERFLOW_ERROR','line_number':561,'multiline':False]
['text':'return ibetac_invb(r, p, Q, Policy()) -1;','line_number':563,'multiline':False]
['text':'','line_number':571,'multiline':False]
['text':' Cornish-Fisher Negative binomial approximation not accurate in this area:','line_number':572,'multiline':False]
['text':'','line_number':573,'multiline':False]
['text':'','line_number':579,'multiline':False]
['text':' Max iterations permitted:','line_number':580,'multiline':False]
['text':'','line_number':581,'multiline':False]
['text':' quantile complement','line_number':593,'multiline':False]
['text':' namespace math','line_number':595,'multiline':False]
['text':' namespace boost','line_number':596,'multiline':False]
['text':' This include must be at the end, *after* the accessors','line_number':598,'multiline':False]
['text':' for this distribution have been defined, in order to','line_number':599,'multiline':False]
['text':' keep compilers that support two-phase lookup happy.','line_number':600,'multiline':False]
['text':' BOOST_MATH_SPECIAL_NEGATIVE_BINOMIAL_HPP','line_number':607,'multiline':False]
