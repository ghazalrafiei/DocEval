['text':'  Copyright John Maddock 2010, 2012.','line_number':1,'multiline':False]
['text':'  Copyright Paul A. Bristow 2011, 2012.','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':4,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'
   // Although this code works well, it's usually more accurate to just call acos
   // and access the number types own representation of PI which is usually calculated
   // at slightly higher precision...

   T result;
   T a = 1;
   T b;
   T A(a);
   T B = 0.5f;
   T D = 0.25f;

   T lim;
   lim = boost::math::tools::epsilon<T>();

   unsigned k = 1;

   do
   {
      result = A + B;
      result = ldexp(result, -2);
      b = sqrt(B);
      a += b;
      a = ldexp(a, -1);
      A = a * a;
      B = A - result;
      B = ldexp(B, 1);
      result = A - B;
      bool neg = boost::math::sign(result) < 0;
      if(neg)
         result = -result;
      if(result <= lim)
         break;
      if(neg)
         result = -result;
      result = ldexp(result, k - 1);
      D -= result;
      ++k;
      lim = ldexp(lim, 1);
   }
   while(true);

   result = B / D;
   return result;
   ','line_number':22,'multiline':True]
['text':' 2 / pi','line_number':76,'multiline':False]
['text':' sqrt(2/pi)','line_number':83,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' Although we can clearly calculate this from first principles, this hooks into','line_number':143,'multiline':False]
['text':' T's own notion of e, which hopefully will more accurate than one calculated to','line_number':144,'multiline':False]
['text':' a few epsilon:','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':' This is the method described in:','line_number':164,'multiline':False]
['text':' "Some New Algorithms for High-Precision Computation of Euler's Constant"','line_number':165,'multiline':False]
['text':' Richard P Brent and Edwin M McMillan.','line_number':166,'multiline':False]
['text':' Mathematics of Computation, Volume 34, Number 149, Jan 1980, pages 305-312.','line_number':167,'multiline':False]
['text':' See equation 17 with p = 2.','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':'','line_number':241,'multiline':False]
['text':' Although there are good ways to calculate this from scratch, this hooks into','line_number':242,'multiline':False]
['text':' T's own notion of log(2) which will hopefully be accurate to the full precision','line_number':243,'multiline':False]
['text':' of T:','line_number':244,'multiline':False]
['text':'','line_number':245,'multiline':False]
['text':' Pi and related constants.','line_number':306,'multiline':False]
['text':'','line_number':419,'multiline':False]
['text':'','line_number':428,'multiline':False]
['text':'','line_number':438,'multiline':False]
['text':'','line_number':449,'multiline':False]
['text':' Euler's e','line_number':469,'multiline':False]
['text':'','line_number':476,'multiline':False]
['text':' Trigonometric','line_number':504,'multiline':False]
['text':'','line_number':513,'multiline':False]
['text':'','line_number':523,'multiline':False]
['text':'','line_number':531,'multiline':False]
['text':'','line_number':539,'multiline':False]
['text':'','line_number':547,'multiline':False]
['text':'','line_number':555,'multiline':False]
['text':'','line_number':563,'multiline':False]
['text':' Zeta','line_number':583,'multiline':False]
['text':' http://mathworld.wolfram.com/AperysConstant.html','line_number':600,'multiline':False]
['text':' http://en.wikipedia.org/wiki/Mathematical_constant','line_number':601,'multiline':False]
['text':' http://oeis.org/A002117/constant','line_number':603,'multiline':False]
['text':'T zeta3("1.20205690315959428539973816151144999076"','line_number':604,'multiline':False]
['text':' "4986292340498881792271555341838205786313"','line_number':605,'multiline':False]
['text':' "09018645587360933525814619915");','line_number':606,'multiline':False]
['text':'"1.202056903159594285399738161511449990, 76498629234049888179227155534183820578631309018645587360933525814619915"  A002117','line_number':608,'multiline':False]
['text':' 1.202056903159594285399738161511449990, 76498629234049888179227155534183820578631309018645587360933525814619915780, +00);','line_number':609,'multiline':False]
['text':'"1.2020569031595942 double','line_number':610,'multiline':False]
['text':' http://www.spaennare.se/SSPROG/ssnum.pdf  // section 11, Algorithm for Apery's constant zeta(3).','line_number':611,'multiline':False]
['text':' Programs to Calculate some Mathematical Constants to Large Precision, Document Version 1.50','line_number':612,'multiline':False]
['text':' by Stefan Spannare  September 19, 2007','line_number':614,'multiline':False]
['text':' zeta(3) = 1/64 * sum','line_number':615,'multiline':False]
['text':' build n! for n = 0.','line_number':617,'multiline':False]
['text':' Start with n = 0 case.','line_number':618,'multiline':False]
['text':' for n = 0, (77/1) /64 = 1.203125','line_number':619,'multiline':False]
['text':'double lim = std::numeric_limits<double>::epsilon();','line_number':620,'multiline':False]
['text':' three to five decimal digits per term, so 40 should be plenty for 100 decimal digits.','line_number':623,'multiline':False]
['text':'cout << "n = " << n << endl;','line_number':624,'multiline':False]
['text':' n!','line_number':625,'multiline':False]
['text':' (n!)^10','line_number':626,'multiline':False]
['text':' 205n^2 + 250n + 77','line_number':627,'multiline':False]
['text':' int nn = (2 * n + 1);','line_number':628,'multiline':False]
['text':' T d = factorial(nn); // inline factorial.','line_number':629,'multiline':False]
['text':' (2n + 1)','line_number':631,'multiline':False]
['text':' [(2n+1)!]^5','line_number':635,'multiline':False]
['text':'cout << "den = " << den << endl;','line_number':636,'multiline':False]
['text':'term *= -1;','line_number':639,'multiline':False]
['text':'cout << "term = " << term << endl;','line_number':646,'multiline':False]
['text':'cout << "sum/64  = " << sum/64 << endl;','line_number':647,'multiline':False]
['text':' http://oeis.org/A006752/constant','line_number':659,'multiline':False]
['text':'T c("0.915965594177219015054603514932384110774"','line_number':660,'multiline':False]
['text':'"149374281672134266498119621763019776254769479356512926115106248574");','line_number':661,'multiline':False]
['text':' 9.159655941772190150546035149323841107, 74149374281672134266498119621763019776254769479356512926115106248574422619, -01);','line_number':663,'multiline':False]
['text':' This is equation (entry) 31 from','line_number':665,'multiline':False]
['text':' http://www-2.cs.cmu.edu/~adamchik/articles/catalan/catalan.htm','line_number':666,'multiline':False]
['text':' See also http://www.mpfr.org/algorithms.pdf','line_number':667,'multiline':False]
['text':'','line_number':698,'multiline':False]
['text':' This is algorithm 3 from:','line_number':699,'multiline':False]
['text':'','line_number':700,'multiline':False]
['text':' "An Efficient Algorithm for the Riemann Zeta Function", P. Borwein,','line_number':701,'multiline':False]
['text':' Canadian Mathematical Society, Conference Proceedings, 2000.','line_number':702,'multiline':False]
['text':' See: http://www.cecm.sfu.ca/personal/pborwein/PAPERS/P155.pdf','line_number':703,'multiline':False]
['text':'','line_number':704,'multiline':False]
['text':' N[12 Sqrt[6]  Zeta[3]/Pi^3, 1101]','line_number':767,'multiline':False]
['text':'T ev(','line_number':772,'multiline':False]
['text':'"1.1395470994046486574927930193898461120875997958365518247216557100852480077060706857071875468869385150"','line_number':773,'multiline':False]
['text':'"1894272048688553376986765366075828644841024041679714157616857834895702411080704529137366329462558680"','line_number':774,'multiline':False]
['text':'"2015498788776135705587959418756809080074611906006528647805347822929577145038743873949415294942796280"','line_number':775,'multiline':False]
['text':'"0895597703063466053535550338267721294164578901640163603544404938283861127819804918174973533694090594"','line_number':776,'multiline':False]
['text':'"3094963822672055237678432023017824416203652657301470473548274848068762500300316769691474974950757965"','line_number':777,'multiline':False]
['text':'"8640779777748741897542093874605477776538884083378029488863880220988107155275203245233994097178778984"','line_number':778,'multiline':False]
['text':'"3488995668362387892097897322246698071290011857605809901090220903955815127463328974447572119951192970"','line_number':779,'multiline':False]
['text':'"3684453635456559086126406960279692862247058250100678008419431185138019869693206366891639436908462809"','line_number':780,'multiline':False]
['text':'"9756051372711251054914491837034685476095423926553367264355374652153595857163724698198860485357368964"','line_number':781,'multiline':False]
['text':'"3807049634423621246870868566707915720704996296083373077647528285782964567312903914752617978405994377"','line_number':782,'multiline':False]
['text':'"9064157147206717895272199736902453130842229559980076472936976287378945035706933650987259357729800315");','line_number':783,'multiline':False]
['text':'','line_number':789,'multiline':False]
['text':' Calculation of the Glaisher constant depends upon calculating the','line_number':790,'multiline':False]
['text':' derivative of the zeta function at 2, we can then use the relation:','line_number':791,'multiline':False]
['text':' zeta'(2) = 1/6 pi^2 [euler + ln(2pi)-12ln(A)]','line_number':792,'multiline':False]
['text':' To get the constant A.','line_number':793,'multiline':False]
['text':' See equation 45 at http://mathworld.wolfram.com/RiemannZetaFunction.html.','line_number':794,'multiline':False]
['text':'','line_number':795,'multiline':False]
['text':' The derivative of the zeta function is computed by direct differentiation','line_number':796,'multiline':False]
['text':' of the relation:','line_number':797,'multiline':False]
['text':' (1-2^(1-s))zeta(s) = SUM(n=0, INF){ (-n)^n / (n+1)^s  }','line_number':798,'multiline':False]
['text':' Which gives us 2 slowly converging but alternating sums to compute,','line_number':799,'multiline':False]
['text':' for this we use Algorithm 1 from "Convergent Acceleration of Alternating Series",','line_number':800,'multiline':False]
['text':' Henri Cohen, Fernando Rodriguez Villegas and Don Zagier, Experimental Mathematics 9:1 (1999).','line_number':801,'multiline':False]
['text':' See http://www.math.utexas.edu/users/villegas/publications/conv-accel.pdf','line_number':802,'multiline':False]
['text':'','line_number':803,'multiline':False]
['text':' Derivative of the series part, evaluated at 2:','line_number':807,'multiline':False]
['text':' Series part of zeta at 2:','line_number':828,'multiline':False]
['text':' lead part at 2:','line_number':849,'multiline':False]
['text':' derivative of lead part at 2:','line_number':856,'multiline':False]
['text':' zeta derivative at 2:','line_number':863,'multiline':False]
['text':' namespace detail','line_number':868,'multiline':False]
['text':'
   // from http://mpmath.googlecode.com/svn/data/glaisher.txt
     // 20,000 digits of the Glaisher-Kinkelin constant A = exp(1/2 - zeta'(-1))
     // Computed using A = exp((6 (-zeta'(2))/pi^2 + log 2 pi + gamma)/12)
   // with Euler-Maclaurin summation for zeta'(2).
   T g(
   "1.282427129100622636875342568869791727767688927325001192063740021740406308858826"
   "46112973649195820237439420646120399000748933157791362775280404159072573861727522"
   "14334327143439787335067915257366856907876561146686449997784962754518174312394652"
   "76128213808180219264516851546143919901083573730703504903888123418813674978133050"
   "93770833682222494115874837348064399978830070125567001286994157705432053927585405"
   "81731588155481762970384743250467775147374600031616023046613296342991558095879293"
   "36343887288701988953460725233184702489001091776941712153569193674967261270398013"
   "52652668868978218897401729375840750167472114895288815996668743164513890306962645"
   "59870469543740253099606800842447417554061490189444139386196089129682173528798629"
   "88434220366989900606980888785849587494085307347117090132667567503310523405221054"
   "14176776156308191919997185237047761312315374135304725819814797451761027540834943"
   "14384965234139453373065832325673954957601692256427736926358821692159870775858274"
   "69575162841550648585890834128227556209547002918593263079373376942077522290940187");

   return g;
   ','line_number':886,'multiline':True]
['text':' 1100 digits of the Rayleigh distribution skewness','line_number':913,'multiline':False]
['text':' N[2 Sqrt[Pi] (Pi - 3)/((4 - Pi)^(3/2)), 1100]','line_number':914,'multiline':False]
['text':'   6.31110657818937138191899351544227779844042203134719497658094585692926819617473725459905027032537306794400047264,','line_number':921,'multiline':False]
['text':'"0.6311106578189371381918993515442277798440422031347194976580945856929268196174737254599050270325373067"','line_number':923,'multiline':False]
['text':'"9440004726436754739597525250317640394102954301685809920213808351450851396781817932734836994829371322"','line_number':924,'multiline':False]
['text':'"5797376021347531983451654130317032832308462278373358624120822253764532674177325950686466133508511968"','line_number':925,'multiline':False]
['text':'"2389168716630349407238090652663422922072397393006683401992961569208109477307776249225072042971818671"','line_number':926,'multiline':False]
['text':'"4058887072693437217879039875871765635655476241624825389439481561152126886932506682176611183750503553"','line_number':927,'multiline':False]
['text':'"1218982627032068396407180216351425758181396562859085306247387212297187006230007438534686340210168288"','line_number':928,'multiline':False]
['text':'"8956816965453815849613622117088096547521391672977226658826566757207615552041767516828171274858145957"','line_number':929,'multiline':False]
['text':'"6137539156656005855905288420585194082284972984285863898582313048515484073396332610565441264220790791"','line_number':930,'multiline':False]
['text':'"0194897267890422924599776483890102027823328602965235306539844007677157873140562950510028206251529523"','line_number':931,'multiline':False]
['text':'"7428049693650605954398446899724157486062545281504433364675815915402937209673727753199567661561209251"','line_number':932,'multiline':False]
['text':'"4695589950526053470201635372590001578503476490223746511106018091907936826431407434894024396366284848");  ;','line_number':933,'multiline':False]
['text':' - (6 Pi^2 - 24 Pi + 16)/((Pi - 4)^2)','line_number':940,'multiline':False]
['text':' Might provide and calculate this using pi_minus_four.','line_number':941,'multiline':False]
['text':' 3 - (6 Pi^2 - 24 Pi + 16)/((Pi - 4)^2)','line_number':955,'multiline':False]
['text':' Might provide and calculate this using pi_minus_four.','line_number':956,'multiline':False]
['text':' We know the constant to 1018 decimal digits.','line_number':1000,'multiline':False]
['text':' See:  http://www.plouffe.fr/simon/constants/feigenbaum.txt','line_number':1001,'multiline':False]
['text':' Also: https://oeis.org/A006890','line_number':1002,'multiline':False]
['text':' N is in binary digits; so we multiply by log_2(10)','line_number':1003,'multiline':False]
['text':' Error analysis: cos(x(1+d)) - x(1+d) = -(sin(x)+1)xd; plug in x = 0.739 gives -1.236d; take d as half an ulp gives the termination criteria we want.','line_number':1042,'multiline':False]
['text':' Wikipedia says Gosper has deviced a faster algorithm for this, but I read the linked paper and couldn't see it!','line_number':1060,'multiline':False]
['text':' In any case, k bits per iteration is fine, though it would be better to sum from smallest to largest.','line_number':1061,'multiline':False]
['text':' That said, the condition number is unity, so it should be fine.','line_number':1062,'multiline':False]
['text':' If x is the exact root, then the approximate root is given by x(1+delta).','line_number':1081,'multiline':False]
['text':' Plugging this into the equation for the Laplace limit gives the residual of approximately','line_number':1082,'multiline':False]
['text':' 2.6389delta. Take delta as half an epsilon and give some leeway so we don't get caught in an infinite loop,','line_number':1083,'multiline':False]
['text':' gives a termination condition as 2eps.','line_number':1084,'multiline':False]
['text':' namespaces','line_number':1108,'multiline':False]
['text':' BOOST_MATH_CALCULATE_CONSTANTS_CONSTANTS_INCLUDED','line_number':1110,'multiline':False]
