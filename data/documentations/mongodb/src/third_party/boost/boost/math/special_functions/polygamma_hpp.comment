['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2,'multiline':False]
['text':'  Copyright 2013 Nikhar Agrawal','line_number':3,'multiline':False]
['text':'  Copyright 2013 Christopher Kormanyos','line_number':4,'multiline':False]
['text':'  Copyright 2014 John Maddock','line_number':5,'multiline':False]
['text':'  Copyright 2013 Paul Bristow','line_number':6,'multiline':False]
['text':'  Distributed under the Boost','line_number':7,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':'','line_number':24,'multiline':False]
['text':' Filter off special cases right at the start:','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':' We've found some standard library functions to misbehave if any FPU exception flags','line_number':32,'multiline':False]
['text':' are set prior to their call, this code will clear those flags, then reset them','line_number':33,'multiline':False]
['text':' on exit:','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' The type of the result - the common type of T and U after','line_number':38,'multiline':False]
['text':' any integer types have been promoted to double:','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' The type used for the calculation.  This may be a wider type than','line_number':43,'multiline':False]
['text':' the result in order to ensure full precision:','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':'','line_number':47,'multiline':False]
['text':' The type of the policy to forward to the actual implementation.','line_number':48,'multiline':False]
['text':' We disable promotion of float and double as that's [possibly]','line_number':49,'multiline':False]
['text':' happened already in the line above.  Also reset to the default','line_number':50,'multiline':False]
['text':' any policies we don't use (reduces code bloat if we're called','line_number':51,'multiline':False]
['text':' multiple times with differing policies we don't actually use).','line_number':52,'multiline':False]
['text':' Also normalise the type, again to reduce code bloat in case we're','line_number':53,'multiline':False]
['text':' called multiple times with functionally identical policies that happen','line_number':54,'multiline':False]
['text':' to be different types.','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' Whew.  Now we can make the actual call to the implementation.','line_number':64,'multiline':False]
['text':' Arguments are explicitly cast to the evaluation type, and the result','line_number':65,'multiline':False]
['text':' passed through checked_narrowing_cast which handles things like overflow','line_number':66,'multiline':False]
['text':' according to the policy passed:','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':' namespace boost::math','line_number':80,'multiline':False]
['text':' _BOOST_BERNOULLI_2013_05_30_HPP_','line_number':82,'multiline':False]
