['text':'/////////////////////////////////////////////////////////////////////////////','line_number':2,'multiline':False]
['text':'  Copyright 2013 Nikhar Agrawal','line_number':3,'multiline':False]
['text':'  Copyright 2013 Christopher Kormanyos','line_number':4,'multiline':False]
['text':'  Copyright 2014 John Maddock','line_number':5,'multiline':False]
['text':'  Copyright 2013 Paul Bristow','line_number':6,'multiline':False]
['text':'  Distributed under the Boost','line_number':7,'multiline':False]
['text':'  Software License, Version 1.0. (See accompanying file','line_number':8,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':' Unreachable code (release mode only warning)','line_number':35,'multiline':False]
['text':' for large values of x such as for x> 400','line_number':41,'multiline':False]
['text':' See http://functions.wolfram.com/GammaBetaErf/PolyGamma2/06/02/0001/','line_number':43,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' sum       == current value of accumulated sum.','line_number':46,'multiline':False]
['text':' term      == value of current term to be added to sum.','line_number':47,'multiline':False]
['text':' part_term == value of current term excluding the Bernoulli number part','line_number':48,'multiline':False]
['text':'','line_number':49,'multiline':False]
['text':' x is crazy large, just concentrate on the first part of the expression and use logs:','line_number':52,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' Start by setting part_term to:','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' (n-1)! / x^(n+1)','line_number':65,'multiline':False]
['text':'','line_number':66,'multiline':False]
['text':' which is common to both the first term of the series (with k = 1)','line_number':67,'multiline':False]
['text':' and to the leading part.  ','line_number':68,'multiline':False]
['text':' We can then get to the leading term by:','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' part_term * (n + 2 * x) / 2','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':' and to the first term in the series ','line_number':73,'multiline':False]
['text':' (excluding the Bernoulli number) by:','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':' part_term n * (n + 1) / (2x)','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':' If either the factorial would overflow,','line_number':78,'multiline':False]
['text':' or the power term underflows, this just gets set to 0 and then we','line_number':79,'multiline':False]
['text':' know that we have to use logs for the initial terms:','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':' Either n is very large, or the power term underflows,','line_number':86,'multiline':False]
['text':' set the initial values of part_term, term and sum via logs:','line_number':87,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' If the leading term is 0, so is the result:','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' Normal termination condition:','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' Increment our counter, and move part_term on to the next value:','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':' Emergency get out termination condition:','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' See: http://functions.wolfram.com/GammaBetaErf/PolyGamma2/16/01/01/0017/','line_number':139,'multiline':False]
['text':' Use N = (0.4 * digits) + (4 * n) for target value for x:','line_number':141,'multiline':False]
['text':' Forward recursion to larger x, need to check for overflow first though:','line_number':157,'multiline':False]
['text':'','line_number':187,'multiline':False]
['text':' If we take this expansion for polygamma: http://functions.wolfram.com/06.15.06.0003.02','line_number':188,'multiline':False]
['text':' and substitute in this expression for polygamma(n, 1): http://functions.wolfram.com/06.15.03.0009.01','line_number':189,'multiline':False]
['text':' we get an alternating series for polygamma when x is small in terms of zeta functions of','line_number':190,'multiline':False]
['text':' integer arguments (which are easy to evaluate, at least when the integer is even).','line_number':191,'multiline':False]
['text':'','line_number':192,'multiline':False]
['text':' In order to avoid spurious overflow, save the n! term for later, and rescale at the end:','line_number':193,'multiline':False]
['text':'','line_number':194,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':' "factorial_part" contains everything except the zeta function','line_number':197,'multiline':False]
['text':' evaluations in each term:','line_number':198,'multiline':False]
['text':'','line_number':199,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':' "prefix" is what we'll be adding the accumulated sum to, it will','line_number':202,'multiline':False]
['text':' be n! / z^(n+1), but since we're scaling by n! it's just ','line_number':203,'multiline':False]
['text':' 1 / z^(n+1) for now:','line_number':204,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' First term in the series is necessarily < zeta(2) < 2, so','line_number':211,'multiline':False]
['text':' ignore the sum if it will have no effect on the result anyway:','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':'','line_number':217,'multiline':False]
['text':' As this is an alternating series we could accelerate it using ','line_number':218,'multiline':False]
['text':' "Convergence Acceleration of Alternating Series",','line_number':219,'multiline':False]
['text':' Henri Cohen, Fernando Rodriguez Villegas, and Don Zagier, Experimental Mathematics, 1999.','line_number':220,'multiline':False]
['text':' In practice however, it appears not to make any difference to the number of terms','line_number':221,'multiline':False]
['text':' required except in some edge cases which are filtered out anyway before we get here.','line_number':222,'multiline':False]
['text':'','line_number':223,'multiline':False]
['text':' Get the k'th term:','line_number':227,'multiline':False]
['text':' Termination condition:','line_number':230,'multiline':False]
['text':'','line_number':233,'multiline':False]
['text':' Move on k and factorial_part:','line_number':234,'multiline':False]
['text':'','line_number':235,'multiline':False]
['text':'','line_number':238,'multiline':False]
['text':' Last chance exit:','line_number':239,'multiline':False]
['text':'','line_number':240,'multiline':False]
['text':'','line_number':244,'multiline':False]
['text':' We need to multiply by the scale, at each stage checking for overflow:','line_number':245,'multiline':False]
['text':'','line_number':246,'multiline':False]
['text':'','line_number':253,'multiline':False]
['text':' Helper function which figures out which slot our coefficient is in','line_number':254,'multiline':False]
['text':' given an angle multiplier for the cosine term of power:','line_number':255,'multiline':False]
['text':'','line_number':256,'multiline':False]
['text':' Return n'th derivative of cot(pi*x) at x, these are simply','line_number':269,'multiline':False]
['text':' tabulated for up to n = 9, beyond that it is possible to','line_number':270,'multiline':False]
['text':' calculate coefficients as follows:','line_number':271,'multiline':False]
['text':'','line_number':272,'multiline':False]
['text':' The general form of each derivative is:','line_number':273,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':' pi^n * SUM{k=0, n} C[k,n] * cos^k(pi * x) * csc^(n+1)(pi * x)','line_number':275,'multiline':False]
['text':'','line_number':276,'multiline':False]
['text':' With constant C[0,1] = -1 and all other C[k,n] = 0;','line_number':277,'multiline':False]
['text':' Then for each k < n+1:','line_number':278,'multiline':False]
['text':' C[k-1, n+1]  -= k * C[k, n];','line_number':279,'multiline':False]
['text':' C[k+1, n+1]  += (k-n-1) * C[k, n];','line_number':280,'multiline':False]
['text':'','line_number':281,'multiline':False]
['text':' Note that there are many different ways of representing this derivative thanks to','line_number':282,'multiline':False]
['text':' the many trigonometric identies available.  In particular, the sum of powers of','line_number':283,'multiline':False]
['text':' cosines could be replaced by a sum of cosine multiple angles, and indeed if you','line_number':284,'multiline':False]
['text':' plug the derivative into Mathematica this is the form it will give.  The two','line_number':285,'multiline':False]
['text':' forms are related via the Chebeshev polynomials of the first kind and','line_number':286,'multiline':False]
['text':' T_n(cos(x)) = cos(n x).  The polynomial form has the great advantage that','line_number':287,'multiline':False]
['text':' all the cosine terms are zero at half integer arguments - right where this','line_number':288,'multiline':False]
['text':' function has it's minimum - thus avoiding cancellation error in this region.','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':' And finally, since every other term in the polynomials is zero, we can save','line_number':291,'multiline':False]
['text':' space by only storing the non-zero terms.  This greatly complexifies','line_number':292,'multiline':False]
['text':' subscripting the tables in the calculation, but halves the storage space','line_number':293,'multiline':False]
['text':' (and complexity for that matter).','line_number':294,'multiline':False]
['text':'','line_number':295,'multiline':False]
['text':'','line_number':400,'multiline':False]
['text':' We'll have to compute the coefficients up to n, ','line_number':401,'multiline':False]
['text':' complexity is O(n^2) which we don't worry about for now','line_number':402,'multiline':False]
['text':' as the values are computed once and then cached.','line_number':403,'multiline':False]
['text':' However, if the final evaluation would have too many','line_number':404,'multiline':False]
['text':' terms just bail out right away:','line_number':405,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':' Oh my... our precision has changed!','line_number':420,'multiline':False]
['text':' 1 if the first cos power is 0, otherwise 0.','line_number':431,'multiline':False]
['text':' order of the sin term','line_number':432,'multiline':False]
['text':' largest order of the polynomial of cos terms','line_number':433,'multiline':False]
['text':' How many entries there are in the current row.','line_number':434,'multiline':False]
['text':' How many entries there will be in the next row','line_number':436,'multiline':False]
['text':' order of the cosine term in entry "column"','line_number':441,'multiline':False]
['text':' First coefficient is order 1, and really an odd polynomial.','line_number':453,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':' The remaining terms are computed using logs since the powers and factorials','line_number':457,'multiline':False]
['text':' get real large real quick:','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':' Forces initialization of our table of coefficients and mutex:','line_number':480,'multiline':False]
['text':'','line_number':507,'multiline':False]
['text':' Result is infinity if x is odd, and a pole error if x is even.','line_number':508,'multiline':False]
['text':'','line_number':509,'multiline':False]
['text':'','line_number':519,'multiline':False]
['text':' Limit for use of small-x-series is chosen','line_number':520,'multiline':False]
['text':' so that the series doesn't go too divergent','line_number':521,'multiline':False]
['text':' in the first few terms.  Ordinarily this','line_number':522,'multiline':False]
['text':' would mean setting the limit to ~ 1 / n,','line_number':523,'multiline':False]
['text':' but we can tolerate a small amount of divergence:','line_number':524,'multiline':False]
['text':'','line_number':525,'multiline':False]
['text':' namespace boost::math::detail','line_number':553,'multiline':False]
['text':' _BOOST_POLYGAMMA_DETAIL_2013_07_30_HPP_','line_number':559,'multiline':False]
