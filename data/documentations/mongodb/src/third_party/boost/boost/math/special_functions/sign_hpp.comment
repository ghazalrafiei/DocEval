['text':'  (C) Copyright John Maddock 2006.','line_number':1,'multiline':False]
['text':'  (C) Copyright Johan Rade 2006.','line_number':2,'multiline':False]
['text':'  (C) Copyright Paul A. Bristow 2011 (added changesign).','line_number':3,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':5,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':6,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':' signbit','line_number':24,'multiline':False]
['text':' Generic versions first, note that these do not handle','line_number':34,'multiline':False]
['text':' signed zero or NaN.','line_number':35,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':' Special handling for GCC's "double double" type, ','line_number':51,'multiline':False]
['text':' in this case the sign is the same as the sign we','line_number':52,'multiline':False]
['text':' get by casting to double, no overflow/underflow','line_number':53,'multiline':False]
['text':' can occur since the exponents are the same magnitude','line_number':54,'multiline':False]
['text':' for the two types:','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' Changesign','line_number':88,'multiline':False]
['text':' Generic versions first, note that these do not handle','line_number':90,'multiline':False]
['text':' signed zero or NaN.','line_number':91,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' Special handling for GCC's "double double" type, ','line_number':106,'multiline':False]
['text':' in this case we need to change the sign of both','line_number':107,'multiline':False]
['text':' components of the "double double":','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' namespace detail','line_number':151,'multiline':False]
['text':' typedef typename boost::is_floating_point<T>::type fp_tag;','line_number':157,'multiline':False]
['text':'!< \brief return unchanged binary pattern of x, except for change of sign bit. ','line_number':169,'multiline':False]
['text':' typedef typename boost::is_floating_point<T>::type fp_tag;','line_number':172,'multiline':False]
['text':' namespace math','line_number':188,'multiline':False]
['text':' namespace boost','line_number':189,'multiline':False]
['text':' BOOST_MATH_TOOLS_SIGN_HPP','line_number':192,'multiline':False]
