['text':'  Copyright (c) 2006-7 John Maddock','line_number':1,'multiline':False]
['text':'  Copyright (c) 2021 Matt Borland','line_number':2,'multiline':False]
['text':'  Use, modification and distribution are subject to the','line_number':3,'multiline':False]
['text':'  Boost Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':'  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':' Things from boost/config that are required, and easy to replicate','line_number':19,'multiline':False]
['text':' Since Boost.Multiprecision is in active development some tests do not fully cooperate yet.','line_number':26,'multiline':False]
['text':' BOOST_CXX14_CONSTEXPR','line_number':34,'multiline':False]
['text':' Clang on mac provides the execution header with none of the functionality. TODO: Check back on this','line_number':39,'multiline':False]
['text':' https://en.cppreference.com/w/cpp/compiler_support "Standardization of Parallelism TS"','line_number':40,'multiline':False]
['text':' No threads, do nothing','line_number':61,'multiline':False]
['text':' Detect thread support via STL implementation','line_number':62,'multiline':False]
['text':' The default assumption is that the machine has threads','line_number':70,'multiline':False]
['text':' Thread Support','line_number':71,'multiline':False]
['text':' BOOST_DISABLE_THREADS','line_number':78,'multiline':False]
['text':' BOOST_MATH_STANDALONE','line_number':80,'multiline':False]
['text':' for min and max','line_number':82,'multiline':False]
['text':'#  define BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS','line_number':96,'multiline':False]
['text':'','line_number':100,'multiline':False]
['text':' For reasons I don't understand, the tests with IMB's compiler all','line_number':101,'multiline':False]
['text':' pass at long double precision, but fail with real_concept, those tests','line_number':102,'multiline':False]
['text':' are disabled for now.  (JM 2012).','line_number':103,'multiline':False]
['text':' BOOST_MATH_NO_REAL_CONCEPT_TESTS','line_number':106,'multiline':False]
['text':' Any use of __float128 in program startup code causes a segfault  (tested JM 2015, Solaris 11).','line_number':109,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':' Not sure what's up with the math detection on Haiku, but linking fails with','line_number':114,'multiline':False]
['text':' float128 code enabled, and we don't have an implementation of __expl, so','line_number':115,'multiline':False]
['text':' disabling long double functions for now as well.','line_number':116,'multiline':False]
['text':'','line_number':121,'multiline':False]
['text':' Darwin's rather strange "double double" is rather hard to','line_number':122,'multiline':False]
['text':' support, it should be possible given enough effort though...','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' Generic catch all case for gcc's "double-double" long double type.','line_number':129,'multiline':False]
['text':' We do not support this as it's not even remotely IEEE conforming:','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' Intel compiler prior to version 10 has sporadic problems','line_number':136,'multiline':False]
['text':' calling the long double overloads of the std lib math functions:','line_number':137,'multiline':False]
['text':' calling ::powl is OK, but std::pow(long double, long double) ','line_number':138,'multiline':False]
['text':' may segfault depending upon the value of the arguments passed ','line_number':139,'multiline':False]
['text':' and the specific Linux distribution.','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':' We'll be conservative and disable long double support for this compiler.','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':' Comment out this #define and try building the tests to determine whether','line_number':144,'multiline':False]
['text':' your Intel compiler version has this issue or not.','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':'','line_number':150,'multiline':False]
['text':' Intel compiler has sporadic issues compiling std::fpclassify depending on','line_number':151,'multiline':False]
['text':' the exact OS version used.  Use our own code for this as we know it works','line_number':152,'multiline':False]
['text':' well on Intel processors:','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':' Better safe than sorry, our tests don't support hardware exceptions:','line_number':159,'multiline':False]
['text':' Namespace boost, math tools, detail','line_number':198,'multiline':False]
['text':' no workaround needed: expand to nothing','line_number':216,'multiline':False]
['text':' __SUNPRO_CC','line_number':229,'multiline':False]
['text':' Sun's compiler emits a hard error if a constant underflows,','line_number':232,'multiline':False]
['text':' as does aCC on PA-RISC, while gcc issues a large number of warnings:','line_number':233,'multiline':False]
['text':'','line_number':239,'multiline':False]
['text':' Tune performance options for specific compilers:','line_number':240,'multiline':False]
['text':'','line_number':241,'multiline':False]
['text':'','line_number':280,'multiline':False]
['text':' noexcept support:','line_number':281,'multiline':False]
['text':'','line_number':282,'multiline':False]
['text':'','line_number':287,'multiline':False]
['text':' The maximum order of polynomial that will be evaluated ','line_number':288,'multiline':False]
['text':' via an unrolled specialisation:','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':'','line_number':294,'multiline':False]
['text':' Set the method used to evaluate polynomials and rationals:','line_number':295,'multiline':False]
['text':'','line_number':296,'multiline':False]
['text':'','line_number':303,'multiline':False]
['text':' decide whether to store constants as integers or reals:','line_number':304,'multiline':False]
['text':'','line_number':305,'multiline':False]
['text':'','line_number':312,'multiline':False]
['text':' And then the actual configuration:','line_number':313,'multiline':False]
['text':'','line_number':314,'multiline':False]
['text':'','line_number':322,'multiline':False]
['text':' Only enable this when the compiler really is GCC as clang and probably ','line_number':323,'multiline':False]
['text':' intel too don't support __float128 yet :-(','line_number':324,'multiline':False]
['text':'','line_number':325,'multiline':False]
['text':'','line_number':338,'multiline':False]
['text':' Check for WinCE with no iostream support:','line_number':339,'multiline':False]
['text':'','line_number':340,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':' Helper macro for controlling the FP behaviour:','line_number':346,'multiline':False]
['text':'','line_number':347,'multiline':False]
['text':'','line_number':351,'multiline':False]
['text':' Helper macro for using statements:','line_number':352,'multiline':False]
['text':'','line_number':353,'multiline':False]
['text':' namespace tools','line_number':397,'multiline':False]
['text':' namespace boost namespace math','line_number':414,'multiline':False]
['text':'','line_number':423,'multiline':False]
['text':' This code was introduced in response to this glibc bug: http://sourceware.org/bugzilla/show_bug.cgi?id=2445','line_number':424,'multiline':False]
['text':' Basically powl and expl can return garbage when the result is small and certain exception flags are set','line_number':425,'multiline':False]
['text':' on entrance to these functions.  This appears to have been fixed in Glibc 2.14 (May 2011).','line_number':426,'multiline':False]
['text':' Much more information in this message thread: https://groups.google.com/forum/#!topic/boost-list/ZT99wtIFlb4','line_number':427,'multiline':False]
['text':'','line_number':428,'multiline':False]
['text':' namespace detail','line_number':452,'multiline':False]
['text':' namespaces','line_number':453,'multiline':False]
['text':' All other platforms.','line_number':465,'multiline':False]
['text':'','line_number':487,'multiline':False]
['text':' Thread local storage:','line_number':488,'multiline':False]
['text':'','line_number':489,'multiline':False]
['text':'','line_number':496,'multiline':False]
['text':' Some mingw flavours have issues with thread_local and types with non-trivial destructors','line_number':497,'multiline':False]
['text':' See https://sourceforge.net/p/mingw-w64/bugs/527/','line_number':498,'multiline':False]
['text':'','line_number':499,'multiline':False]
['text':'','line_number':505,'multiline':False]
['text':' Can we have constexpr tables?','line_number':506,'multiline':False]
['text':'','line_number':507,'multiline':False]
['text':' BOOST_MATH_TOOLS_CONFIG_HPP','line_number':516,'multiline':False]
