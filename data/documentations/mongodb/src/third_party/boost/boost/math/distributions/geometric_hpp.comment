['text':' boost\math\distributions\geometric.hpp','line_number':1,'multiline':False]
['text':' Copyright John Maddock 2010.','line_number':3,'multiline':False]
['text':' Copyright Paul A. Bristow 2010.','line_number':4,'multiline':False]
['text':' Use, modification and distribution are subject to the','line_number':6,'multiline':False]
['text':' Boost Software License, Version 1.0.','line_number':7,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt','line_number':8,'multiline':False]
['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':' geometric distribution is a discrete probability distribution.','line_number':11,'multiline':False]
['text':' It expresses the probability distribution of the number (k) of','line_number':12,'multiline':False]
['text':' events, occurrences, failures or arrivals before the first success.','line_number':13,'multiline':False]
['text':' supported on the set {0, 1, 2, 3...}','line_number':14,'multiline':False]
['text':' Note that the set includes zero (unlike some definitions that start at one).','line_number':16,'multiline':False]
['text':' The random variate k is the number of events, occurrences or arrivals.','line_number':18,'multiline':False]
['text':' k argument may be integral, signed, or unsigned, or floating point.','line_number':19,'multiline':False]
['text':' If necessary, it has already been promoted from an integral type.','line_number':20,'multiline':False]
['text':' Note that the geometric distribution','line_number':22,'multiline':False]
['text':' (like others including the binomial, geometric & Bernoulli)','line_number':23,'multiline':False]
['text':' is strictly defined as a discrete function:','line_number':24,'multiline':False]
['text':' only integral values of k are envisaged.','line_number':25,'multiline':False]
['text':' However because the method of calculation uses a continuous gamma function,','line_number':26,'multiline':False]
['text':' it is convenient to treat it as if a continuous function,','line_number':27,'multiline':False]
['text':' and permit non-integral values of k.','line_number':28,'multiline':False]
['text':' To enforce the strict mathematical model, users should use floor or ceil functions','line_number':29,'multiline':False]
['text':' on k outside this function to ensure that k is integral.','line_number':30,'multiline':False]
['text':' See http://en.wikipedia.org/wiki/geometric_distribution','line_number':32,'multiline':False]
['text':' http://documents.wolfram.com/v5/Add-onsLinks/StandardPackages/Statistics/DiscreteDistributions.html','line_number':33,'multiline':False]
['text':' http://mathworld.wolfram.com/GeometricDistribution.html','line_number':34,'multiline':False]
['text':' for ibeta(a, b, x) == Ix(a, b).','line_number':40,'multiline':False]
['text':' complement.','line_number':41,'multiline':False]
['text':' error checks domain_error & logic_error.','line_number':42,'multiline':False]
['text':' isnan.','line_number':43,'multiline':False]
['text':' for root finding.','line_number':44,'multiline':False]
['text':' using std::numeric_limits;','line_number':47,'multiline':False]
['text':' This believed not now necessary, so commented out.','line_number':52,'multiline':False]
['text':'#  pragma warning(disable: 4702) // unreachable code.','line_number':53,'multiline':False]
['text':' in domain_error_imp in error_handling.','line_number':54,'multiline':False]
['text':' Common error checking routines for geometric distribution function:','line_number':63,'multiline':False]
['text':' Check k failures.','line_number':91,'multiline':False]
['text':' Check_dist_and_k','line_number':98,'multiline':False]
['text':' check_dist_and_prob','line_number':108,'multiline':False]
['text':'  namespace geometric_detail','line_number':109,'multiline':False]
['text':' Constructor stores success_fraction p.','line_number':119,'multiline':False]
['text':' Check success_fraction 0 <= p <= 1.','line_number':123,'multiline':False]
['text':' geometric_distribution constructor.','line_number':125,'multiline':False]
['text':' Private data getter class member functions.','line_number':127,'multiline':False]
['text':' Probability of success as fraction in range 0 to 1.','line_number':129,'multiline':False]
['text':' Total number of successes r = 1 (for compatibility with negative binomial?).','line_number':133,'multiline':False]
['text':' Parameter estimation.','line_number':137,'multiline':False]
['text':' (These are copies of negative_binomial distribution with successes = 1).','line_number':138,'multiline':False]
['text':' alpha 0.05 equivalent to 95% for one-sided test.','line_number':141,'multiline':False]
['text':' of error checks.','line_number':144,'multiline':False]
['text':' Use complement ibeta_inv function for lower bound.','line_number':153,'multiline':False]
['text':' This is adapted from the corresponding binomial formula','line_number':154,'multiline':False]
['text':' here: http://www.itl.nist.gov/div898/handbook/prc/section2/prc241.htm','line_number':155,'multiline':False]
['text':' This is a Clopper-Pearson interval, and may be overly conservative,','line_number':156,'multiline':False]
['text':' see also "A Simple Improved Inferential Method for Some','line_number':157,'multiline':False]
['text':' Discrete Distributions" Yong CAI and K. KRISHNAMOORTHY','line_number':158,'multiline':False]
['text':' http://www.ucs.louisiana.edu/~kxk4695/Discrete_new.pdf','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':' find_lower_bound_on_p','line_number':162,'multiline':False]
['text':' alpha 0.05 equivalent to 95% for one-sided test.','line_number':166,'multiline':False]
['text':' of error checks.','line_number':169,'multiline':False]
['text':' Use complement ibetac_inv function for upper bound.','line_number':181,'multiline':False]
['text':' Note adjusted failures value: *not* failures+1 as usual.','line_number':182,'multiline':False]
['text':' This is adapted from the corresponding binomial formula','line_number':183,'multiline':False]
['text':' here: http://www.itl.nist.gov/div898/handbook/prc/section2/prc241.htm','line_number':184,'multiline':False]
['text':' This is a Clopper-Pearson interval, and may be overly conservative,','line_number':185,'multiline':False]
['text':' see also "A Simple Improved Inferential Method for Some','line_number':186,'multiline':False]
['text':' Discrete Distributions" Yong CAI and K. Krishnamoorthy','line_number':187,'multiline':False]
['text':' http://www.ucs.louisiana.edu/~kxk4695/Discrete_new.pdf','line_number':188,'multiline':False]
['text':'','line_number':189,'multiline':False]
['text':' find_upper_bound_on_p','line_number':191,'multiline':False]
['text':' Estimate number of trials :','line_number':193,'multiline':False]
['text':' "How many trials do I need to be P% sure of seeing k or fewer failures?"','line_number':194,'multiline':False]
['text':' number of failures (k >= 0).','line_number':197,'multiline':False]
['text':' success fraction 0 <= p <= 1.','line_number':198,'multiline':False]
['text':' risk level threshold 0 <= alpha <= 1.','line_number':199,'multiline':False]
['text':' Error checks:','line_number':202,'multiline':False]
['text':' returns n - k','line_number':210,'multiline':False]
['text':' RealType find_number_of_failures','line_number':212,'multiline':False]
['text':' number of failures (k >= 0).','line_number':215,'multiline':False]
['text':' success fraction 0 <= p <= 1.','line_number':216,'multiline':False]
['text':' risk level threshold 0 <= alpha <= 1.','line_number':217,'multiline':False]
['text':' Error checks:','line_number':220,'multiline':False]
['text':' returns n - k','line_number':228,'multiline':False]
['text':' RealType find_number_of_trials complemented','line_number':230,'multiline':False]
['text':'RealType m_r; // successes fixed at unity.','line_number':233,'multiline':False]
['text':' success_fraction','line_number':234,'multiline':False]
['text':' template <class RealType, class Policy> class geometric_distribution','line_number':235,'multiline':False]
['text':' Reserved name of type double.','line_number':237,'multiline':False]
['text':' dist ','line_number':245,'multiline':True]
['text':' Range of permissible values for random variable k.','line_number':246,'multiline':False]
['text':' max_integer?','line_number':248,'multiline':False]
['text':' dist ','line_number':252,'multiline':True]
['text':' Range of supported values for random variable k.','line_number':253,'multiline':False]
['text':' This is range where cdf rises from 0 to 1, and outside it, the pdf is zero.','line_number':254,'multiline':False]
['text':' max_integer?','line_number':256,'multiline':False]
['text':' Mean of geometric distribution = (1-p)/p.','line_number':261,'multiline':False]
['text':' mean','line_number':263,'multiline':False]
['text':' median implemented via quantile(half) in derived accessors.','line_number':265,'multiline':False]
['text':' Mode of geometric distribution = zero.','line_number':269,'multiline':False]
['text':' ADL of std functions.','line_number':270,'multiline':False]
['text':' mode','line_number':272,'multiline':False]
['text':' Variance of Binomial distribution = (1-p) / p^2.','line_number':276,'multiline':False]
['text':' variance','line_number':279,'multiline':False]
['text':' skewness of geometric distribution = 2-p / (sqrt(r(1-p))','line_number':283,'multiline':False]
['text':' ADL of std functions.','line_number':284,'multiline':False]
['text':' skewness','line_number':287,'multiline':False]
['text':' kurtosis of geometric distribution','line_number':291,'multiline':False]
['text':' http://en.wikipedia.org/wiki/geometric is kurtosis_excess so add 3','line_number':292,'multiline':False]
['text':' kurtosis','line_number':295,'multiline':False]
['text':' kurtosis excess of geometric distribution','line_number':299,'multiline':False]
['text':' http://mathworld.wolfram.com/Kurtosis.html table of kurtosis_excess','line_number':300,'multiline':False]
['text':' kurtosis_excess','line_number':303,'multiline':False]
['text':' RealType standard_deviation(const geometric_distribution<RealType, Policy>& dist)','line_number':305,'multiline':False]
['text':' standard_deviation provided by derived accessors.','line_number':306,'multiline':False]
['text':' RealType hazard(const geometric_distribution<RealType, Policy>& dist)','line_number':307,'multiline':False]
['text':' hazard of geometric distribution provided by derived accessors.','line_number':308,'multiline':False]
['text':' RealType chf(const geometric_distribution<RealType, Policy>& dist)','line_number':309,'multiline':False]
['text':' chf of geometric distribution provided by derived accessors.','line_number':310,'multiline':False]
['text':' Probability Density/Mass Function.','line_number':314,'multiline':False]
['text':' For ADL of math functions.','line_number':316,'multiline':False]
['text':' success_fraction','line_number':331,'multiline':False]
['text':' Inaccurate for small p?','line_number':333,'multiline':False]
['text':' So try to avoid inaccuracy for large or small p.','line_number':334,'multiline':False]
['text':' but has little effect > last significant bit.','line_number':335,'multiline':False]
['text':'cout << "p *  pow(q, k) " << result << endl; // seems best whatever p','line_number':336,'multiline':False]
['text':'cout << "exp(p * k * log1p(-p)) " << p * exp(k * log1p(-p)) << endl;','line_number':337,'multiline':False]
['text':'if (p < 0.5)','line_number':338,'multiline':False]
['text':'{','line_number':339,'multiline':False]
['text':'  result = p *  pow(q, k);','line_number':340,'multiline':False]
['text':'}','line_number':341,'multiline':False]
['text':'else','line_number':342,'multiline':False]
['text':'{','line_number':343,'multiline':False]
['text':'  result = p * exp(k * log1p(-p));','line_number':344,'multiline':False]
['text':'}','line_number':345,'multiline':False]
['text':' geometric_pdf','line_number':348,'multiline':False]
['text':' Cumulative Distribution Function of geometric.','line_number':352,'multiline':False]
['text':' k argument may be integral, signed, or unsigned, or floating point.','line_number':355,'multiline':False]
['text':' If necessary, it has already been promoted from an integral type.','line_number':356,'multiline':False]
['text':' Error check:','line_number':358,'multiline':False]
['text':' success_fraction','line_number':370,'multiline':False]
['text':'RealType q = 1 - p;  // Bad for small p','line_number':372,'multiline':False]
['text':'RealType probability = 1 - std::pow(q, k+1);','line_number':373,'multiline':False]
['text':' cdf Cumulative Distribution Function geometric.','line_number':379,'multiline':False]
['text':' Complemented Cumulative Distribution Function geometric.','line_number':383,'multiline':False]
['text':' k argument may be integral, signed, or unsigned, or floating point.','line_number':386,'multiline':False]
['text':' If necessary, it has already been promoted from an integral type.','line_number':387,'multiline':False]
['text':' Error check:','line_number':391,'multiline':False]
['text':' cdf Complemented Cumulative Distribution Function geometric.','line_number':404,'multiline':False]
['text':' Quantile, percentile/100 or Percent Point geometric function.','line_number':408,'multiline':False]
['text':' Return the number of expected failures k for a given probability p.','line_number':409,'multiline':False]
['text':' Inverse cumulative Distribution Function or Quantile (percentile / 100) of geometric Probability.','line_number':411,'multiline':False]
['text':' k argument may be integral, signed, or unsigned, or floating point.','line_number':412,'multiline':False]
['text':' ADL of std functions.','line_number':415,'multiline':False]
['text':' Check dist and x.','line_number':418,'multiline':False]
['text':' Special cases.','line_number':426,'multiline':False]
['text':' Would need +infinity failures for total confidence.','line_number':428,'multiline':False]
['text':' usually means return +std::numeric_limits<RealType>::infinity();','line_number':433,'multiline':False]
['text':' unless #define BOOST_MATH_THROW_ON_OVERFLOW_ERROR','line_number':434,'multiline':False]
['text':' No failures are expected if P = 0.','line_number':437,'multiline':False]
['text':' Total trials will be just dist.successes.','line_number':438,'multiline':False]
['text':' if (P <= pow(dist.success_fraction(), 1))','line_number':440,'multiline':False]
['text':' p <= pdf(dist, 0) == cdf(dist, 0)','line_number':442,'multiline':False]
['text':' log(1-x) /log(1-success_fraction) -1; but use log1p in case success_fraction is small','line_number':450,'multiline':False]
['text':' Subtract a few epsilons here too?','line_number':452,'multiline':False]
['text':' to make sure it doesn't slip over, so ceil would be one too many.','line_number':453,'multiline':False]
['text':' RealType quantile(const geometric_distribution dist, p)','line_number':455,'multiline':False]
['text':' Quantile or Percent Point Binomial function.','line_number':459,'multiline':False]
['text':' Return the number of expected failures k for a given','line_number':460,'multiline':False]
['text':' complement of the probability Q = 1 - P.','line_number':461,'multiline':False]
['text':' Error checks:','line_number':464,'multiline':False]
['text':' Special cases:','line_number':478,'multiline':False]
['text':' There may actually be no answer to this question,','line_number':480,'multiline':False]
['text':' since the probability of zero failures may be non-zero,','line_number':481,'multiline':False]
['text':' but zero is the best we can do:','line_number':482,'multiline':False]
['text':' q <= cdf(complement(dist, 0)) == pdf(dist, 0)','line_number':485,'multiline':False]
['text':'','line_number':486,'multiline':False]
['text':' Probability 1 - Q  == 1 so infinite failures to achieve certainty.','line_number':489,'multiline':False]
['text':' Would need +infinity failures for total confidence.','line_number':490,'multiline':False]
['text':' usually means return +std::numeric_limits<RealType>::infinity();','line_number':495,'multiline':False]
['text':' unless #define BOOST_MATH_THROW_ON_OVERFLOW_ERROR','line_number':496,'multiline':False]
['text':' log(x) /log(1-success_fraction) -1; but use log1p in case success_fraction is small','line_number':498,'multiline':False]
['text':' quantile complement','line_number':502,'multiline':False]
['text':' namespace math','line_number':504,'multiline':False]
['text':' namespace boost','line_number':505,'multiline':False]
['text':' This include must be at the end, *after* the accessors','line_number':507,'multiline':False]
['text':' for this distribution have been defined, in order to','line_number':508,'multiline':False]
['text':' keep compilers that support two-phase lookup happy.','line_number':509,'multiline':False]
['text':' BOOST_MATH_SPECIAL_GEOMETRIC_HPP','line_number':516,'multiline':False]
