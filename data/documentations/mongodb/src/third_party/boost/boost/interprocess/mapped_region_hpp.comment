['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'Some Unixes use caddr_t instead of void * in madvise','line_number':35,'multiline':False]
['text':'              SunOS                                 Tru64                               HP-UX                    AIX','line_number':36,'multiline':False]
['text':'A lot of UNIXes have destructive semantics for MADV_DONTNEED, so','line_number':42,'multiline':False]
['text':'we need to be careful to allow it.','line_number':43,'multiline':False]
['text':'mmap','line_number':53,'multiline':False]
['text':'System V shared memory...','line_number':58,'multiline':False]
['text':'#if defined (BOOST_INTERPROCESS_WINDOWS)','line_number':65,'multiline':False]
['text':'!\file','line_number':67,'multiline':False]
['text':'!Describes mapped region class','line_number':68,'multiline':False]
['text':'Solaris declares madvise only in some configurations but defines MADV_XXX, a bit confusing.','line_number':75,'multiline':False]
['text':'Predeclare it here to avoid any compilation error','line_number':76,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':84,'multiline':False]
['text':'!The mapped_region class represents a portion or region created from a','line_number':86,'multiline':False]
['text':'!memory_mappable object.','line_number':87,'multiline':False]
['text':'!','line_number':88,'multiline':False]
['text':'!The OS can map a region bigger than the requested one, as region must','line_number':89,'multiline':False]
['text':'!be multiple of the page size, but mapped_region will always refer to','line_number':90,'multiline':False]
['text':'!the region specified by the user.','line_number':91,'multiline':False]
['text':'Non-copyable','line_number':95,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':97,'multiline':False]
['text':'!Creates a mapping region of the mapped memory "mapping", starting in','line_number':101,'multiline':False]
['text':'!offset "offset", and the mapping's size will be "size". The mapping','line_number':102,'multiline':False]
['text':'!can be opened for read only, read-write or copy-on-write.','line_number':103,'multiline':False]
['text':'!','line_number':104,'multiline':False]
['text':'!If an address is specified, both the offset and the address must be','line_number':105,'multiline':False]
['text':'!multiples of the page size.','line_number':106,'multiline':False]
['text':'!','line_number':107,'multiline':False]
['text':'!The map is created using "default_map_options". This flag is OS','line_number':108,'multiline':False]
['text':'!dependant and it should not be changed unless the user needs to','line_number':109,'multiline':False]
['text':'!specify special options.','line_number':110,'multiline':False]
['text':'!','line_number':111,'multiline':False]
['text':'!In Windows systems "map_options" is a DWORD value passed as','line_number':112,'multiline':False]
['text':'!"dwDesiredAccess" to "MapViewOfFileEx". If "default_map_options" is passed','line_number':113,'multiline':False]
['text':'!it's initialized to zero. "map_options" is XORed with FILE_MAP_[COPY|READ|WRITE].','line_number':114,'multiline':False]
['text':'!','line_number':115,'multiline':False]
['text':'!In UNIX systems and POSIX mappings "map_options" is an int value passed as "flags"','line_number':116,'multiline':False]
['text':'!to "mmap". If "default_map_options" is specified it's initialized to MAP_NOSYNC','line_number':117,'multiline':False]
['text':'!if that option exists and to zero otherwise. "map_options" XORed with MAP_PRIVATE or MAP_SHARED.','line_number':118,'multiline':False]
['text':'!','line_number':119,'multiline':False]
['text':'!In UNIX systems and XSI mappings "map_options" is an int value passed as "shmflg"','line_number':120,'multiline':False]
['text':'!to "shmat". If "default_map_options" is specified it's initialized to zero.','line_number':121,'multiline':False]
['text':'!"map_options" is XORed with SHM_RDONLY if needed.','line_number':122,'multiline':False]
['text':'!','line_number':123,'multiline':False]
['text':'!The OS could allocate more pages than size/page_size(), but get_address()','line_number':124,'multiline':False]
['text':'!will always return the address passed in this function (if not null) and','line_number':125,'multiline':False]
['text':'!get_size() will return the specified size.','line_number':126,'multiline':False]
['text':'!Default constructor. Address will be 0 (nullptr).','line_number':135,'multiline':False]
['text':'!Size will be 0.','line_number':136,'multiline':False]
['text':'!Does not throw','line_number':137,'multiline':False]
['text':'!Move constructor. *this will be constructed taking ownership of "other"'s','line_number':140,'multiline':False]
['text':'!region and "other" will be left in default constructor state.','line_number':141,'multiline':False]
['text':'!Destroys the mapped region.','line_number':153,'multiline':False]
['text':'!Does not throw','line_number':154,'multiline':False]
['text':'!Move assignment. If *this owns a memory mapped region, it will be','line_number':157,'multiline':False]
['text':'!destroyed and it will take ownership of "other"'s memory mapped region.','line_number':158,'multiline':False]
['text':'!Swaps the mapped_region with another','line_number':166,'multiline':False]
['text':'!mapped region','line_number':167,'multiline':False]
['text':'!Returns the size of the mapping. Never throws.','line_number':170,'multiline':False]
['text':'!Returns the base address of the mapping.','line_number':173,'multiline':False]
['text':'!Never throws.','line_number':174,'multiline':False]
['text':'!Returns the mode of the mapping used to construct the mapped region.','line_number':177,'multiline':False]
['text':'!Never throws.','line_number':178,'multiline':False]
['text':'!Flushes to the disk a byte range within the mapped memory.','line_number':181,'multiline':False]
['text':'!If 'async' is true, the function will return before flushing operation is completed','line_number':182,'multiline':False]
['text':'!If 'async' is false, function will return once data has been written into the underlying','line_number':183,'multiline':False]
['text':'!device (i.e., in mapped files OS cached information is written to disk).','line_number':184,'multiline':False]
['text':'!Never throws. Returns false if operation could not be performed.','line_number':185,'multiline':False]
['text':'!Shrinks current mapped region. If after shrinking there is no longer need for a previously','line_number':188,'multiline':False]
['text':'!mapped memory page, accessing that page can trigger a segmentation fault.','line_number':189,'multiline':False]
['text':'!Depending on the OS, this operation might fail (XSI shared memory), it can decommit storage','line_number':190,'multiline':False]
['text':'!and free a portion of the virtual address space (e.g.POSIX) or this','line_number':191,'multiline':False]
['text':'!function can release some physical memory without freeing any virtual address space(Windows).','line_number':192,'multiline':False]
['text':'!Returns true on success. Never throws.','line_number':193,'multiline':False]
['text':'!This enum specifies region usage behaviors that an application can specify','line_number':196,'multiline':False]
['text':'!to the mapped region implementation.','line_number':197,'multiline':False]
['text':'!Specifies that the application has no advice to give on its behavior with respect to','line_number':199,'multiline':False]
['text':'!the region. It is the default characteristic if no advice is given for a range of memory.','line_number':200,'multiline':False]
['text':'!Specifies that the application expects to access the region sequentially from','line_number':202,'multiline':False]
['text':'!lower addresses to higher addresses. The implementation can lower the priority of','line_number':203,'multiline':False]
['text':'!preceding pages within the region once a page have been accessed.','line_number':204,'multiline':False]
['text':'!Specifies that the application expects to access the region in a random order,','line_number':206,'multiline':False]
['text':'!and prefetching is likely not advantageous.','line_number':207,'multiline':False]
['text':'!Specifies that the application expects to access the region in the near future.','line_number':209,'multiline':False]
['text':'!The implementation can prefetch pages of the region.','line_number':210,'multiline':False]
['text':'!Specifies that the application expects that it will not access the region in the near future.','line_number':212,'multiline':False]
['text':'!The implementation can unload pages within the range to save system resources.','line_number':213,'multiline':False]
['text':'!Advises the implementation on the expected behavior of the application with respect to the data','line_number':217,'multiline':False]
['text':'!in the region. The implementation may use this information to optimize handling of the region data.','line_number':218,'multiline':False]
['text':'!This function has no effect on the semantics of access to memory in the region, although it may affect','line_number':219,'multiline':False]
['text':'!the performance of access.','line_number':220,'multiline':False]
['text':'!If the advise type is not known to the implementation, the function returns false. True otherwise.','line_number':221,'multiline':False]
['text':'!Returns the size of the page. This size is the minimum memory that','line_number':224,'multiline':False]
['text':'!will be used by the system when mapping a memory mappable source and','line_number':225,'multiline':False]
['text':'!will restrict the address and the offset to map.','line_number':226,'multiline':False]
['text':'!Closes a previously opened memory mapping. Never throws','line_number':231,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':266,'multiline':False]
['text':'Check some errors','line_number':295,'multiline':False]
['text':'Update flush size if the user does not provide it','line_number':303,'multiline':False]
['text':'Check some errors','line_number':315,'multiline':False]
['text':'Check if mapping size fits in the user address space','line_number':347,'multiline':False]
['text':'as offset_t is the maximum file size and it's signed.','line_number':348,'multiline':False]
['text':'We can't map any offset so we have to obtain system's','line_number':360,'multiline':False]
['text':'memory granularity','line_number':361,'multiline':False]
['text':'We calculate the difference between demanded and valid offset','line_number':364,'multiline':False]
['text':'(always less than a page in std::size_t, thus, representable by std::size_t)','line_number':365,'multiline':False]
['text':'Update the mapping address','line_number':368,'multiline':False]
['text':'Set accesses','line_number':405,'multiline':False]
['text':'For "create_file_mapping"','line_number':406,'multiline':False]
['text':'For "mapviewoffile"','line_number':408,'multiline':False]
['text':'For file mapping (including emulated shared memory through temporary files),','line_number':434,'multiline':False]
['text':'the device is a file handle so we need to obtain file's size and call create_file_mapping','line_number':435,'multiline':False]
['text':'to obtain the mapping handle.','line_number':436,'multiline':False]
['text':'For files we don't need the file mapping after mapping the memory, as the file is there','line_number':437,'multiline':False]
['text':'so we'll program the handle close','line_number':438,'multiline':False]
['text':'Create mapping handle','line_number':441,'multiline':False]
['text':'Check if all is correct','line_number':446,'multiline':False]
['text':'For windows_shared_memory the device handle is already a mapping handle','line_number':454,'multiline':False]
['text':'and we need to maintain it','line_number':455,'multiline':False]
['text':'RAII handle close on scope exit','line_number':458,'multiline':False]
['text':'Obtain mapping size if user provides 0 size','line_number':464,'multiline':False]
['text':'This can throw','line_number':471,'multiline':False]
['text':'Map with new offsets and size','line_number':475,'multiline':False]
['text':'Check error','line_number':482,'multiline':False]
['text':'Calculate new base for the user','line_number':488,'multiline':False]
['text':'Windows shared memory needs the duplication of the handle if we want to','line_number':493,'multiline':False]
['text':'make mapped_region independent from the mappable device','line_number':494,'multiline':False]
['text':'','line_number':495,'multiline':False]
['text':'For mapped files, we duplicate the file handle to be able to FlushFileBuffers','line_number':496,'multiline':False]
['text':'Flush it all','line_number':510,'multiline':False]
['text':'m_file_or_mapping_hnd can be a file handle or a mapping handle.','line_number':514,'multiline':False]
['text':'so flushing file buffers has only sense for files...','line_number':515,'multiline':False]
['text':'In Windows, we can't decommit the storage or release the virtual address space,','line_number':531,'multiline':False]
['text':'the best we can do is try to remove some memory from the process working set.','line_number':532,'multiline':False]
['text':'With a bit of luck we can free some physical memory.','line_number':533,'multiline':False]
['text':'Change page protection to forbid any further access','line_number':538,'multiline':False]
['text':'Windows has no madvise/posix_madvise equivalent','line_number':550,'multiline':False]
['text':'#if defined (BOOST_INTERPROCESS_WINDOWS)','line_number':573,'multiline':False]
['text':'Some systems dont' support XSI shared memory','line_number':595,'multiline':False]
['text':'Get the size','line_number':598,'multiline':False]
['text':'Compare sizess','line_number':605,'multiline':False]
['text':'Calculate flag','line_number':613,'multiline':False]
['text':'Attach memory','line_number':622,'multiline':False]
['text':'Some old shmat implementation take the address as a non-const void pointer','line_number':623,'multiline':False]
['text':'so uncast it to make code portable.','line_number':624,'multiline':False]
['text':'Update members','line_number':631,'multiline':False]
['text':'ifdef BOOST_INTERPROCESS_XSI_SHARED_MEMORY_OBJECTS','line_number':639,'multiline':False]
['text':'We calculate the difference between demanded and valid offset','line_number':641,'multiline':False]
['text':'This can throw','line_number':650,'multiline':False]
['text':'MAP_NOSYNC','line_number':658,'multiline':False]
['text':'Create new mapping','line_number':660,'multiline':False]
['text':'Map it to the address space','line_number':696,'multiline':False]
['text':'Check if mapping was successful','line_number':704,'multiline':False]
['text':'Calculate new base for the user','line_number':710,'multiline':False]
['text':'Check for fixed mapping error','line_number':715,'multiline':False]
['text':'In UNIX we can decommit and free virtual address space.','line_number':731,'multiline':False]
['text':'Flush it all','line_number':745,'multiline':False]
['text':'Modes; 0: none, 2: posix, 1: madvise','line_number':752,'multiline':False]
['text':' Suppress "unused variable" warnings','line_number':756,'multiline':False]
['text':'Choose advice either from POSIX (preferred) or native Unix','line_number':760,'multiline':False]
['text':'#ifdef BOOST_INTERPROCESS_XSI_SHARED_MEMORY_OBJECTS','line_number':839,'multiline':False]
['text':'#if defined (BOOST_INTERPROCESS_WINDOWS)','line_number':848,'multiline':False]
['text':'!No-op functor','line_number':875,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':885,'multiline':False]
['text':'namespace interprocess {','line_number':887,'multiline':False]
['text':'namespace boost {','line_number':888,'multiline':False]
['text':'BOOST_INTERPROCESS_MAPPED_REGION_HPP','line_number':892,'multiline':False]
['text':'namespace interprocess {','line_number':914,'multiline':False]
['text':'namespace boost {','line_number':915,'multiline':False]
['text':'defined(BOOST_INTERPROCESS_WINDOWS) && !defined(BOOST_INTERPROCESS_FORCE_GENERIC_EMULATION)','line_number':917,'multiline':False]
['text':'#ifdef BOOST_INTERPROCESS_MAPPED_REGION_EXT_HPP','line_number':919,'multiline':False]
['text':'#if !defined(BOOST_INTERPROCESS_DOXYGEN_INVOKED)','line_number':921,'multiline':False]
