['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2006-2012','line_number':3,'multiline':False]
['text':' (C) Copyright Markus Schoepflin 2007','line_number':4,'multiline':False]
['text':' (C) Copyright Bryce Lelbach 2010','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':7,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':8,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':13,'multiline':False]
['text':'! Atomically increment an boost::uint32_t by 1','line_number':42,'multiline':False]
['text':'! "mem": pointer to the object','line_number':43,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':44,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':47,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':50,'multiline':False]
['text':'! "mem": pointer to the object','line_number':51,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':52,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':55,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':56,'multiline':False]
['text':'! "mem": pointer to the value','line_number':57,'multiline':False]
['text':'! "with": what to swap it with','line_number':58,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':59,'multiline':False]
['text':'! Returns the old value of *mem','line_number':60,'multiline':False]
['text':'namespace ipcdetail{','line_number':64,'multiline':False]
['text':'namespace interprocess{','line_number':65,'multiline':False]
['text':'namespace boost{','line_number':66,'multiline':False]
['text':'! Atomically decrement an boost::uint32_t by 1','line_number':93,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':94,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':95,'multiline':False]
['text':'! Atomically increment an apr_uint32_t by 1','line_number':99,'multiline':False]
['text':'! "mem": pointer to the object','line_number':100,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':101,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':105,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':113,'multiline':False]
['text':'! "mem": pointer to the object','line_number':114,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':115,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':119,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':120,'multiline':False]
['text':'! "mem": pointer to the value','line_number':121,'multiline':False]
['text':'! "with": what to swap it with','line_number':122,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':123,'multiline':False]
['text':'! Returns the old value of *mem','line_number':124,'multiline':False]
['text':'namespace ipcdetail{','line_number':129,'multiline':False]
['text':'namespace interprocess{','line_number':130,'multiline':False]
['text':'namespace boost{','line_number':131,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':139,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':140,'multiline':False]
['text':'! "mem": pointer to the value','line_number':141,'multiline':False]
['text':'! "with" what to swap it with','line_number':142,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':143,'multiline':False]
['text':'! Returns the old value of *mem','line_number':144,'multiline':False]
['text':' This version by Mans Rullgard of Pathscale','line_number':149,'multiline':False]
['text':'! Atomically add 'val' to an boost::uint32_t','line_number':159,'multiline':False]
['text':'! "mem": pointer to the object','line_number':160,'multiline':False]
['text':'! "val": amount to add','line_number':161,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':162,'multiline':False]
['text':' int r = *pw;','line_number':166,'multiline':False]
['text':' *mem += val;','line_number':167,'multiline':False]
['text':' return r;','line_number':168,'multiline':False]
['text':' outputs (%0, %1)','line_number':175,'multiline':False]
['text':' inputs (%2 == %1)','line_number':176,'multiline':False]
['text':' clobbers','line_number':177,'multiline':False]
['text':'! Atomically increment an apr_uint32_t by 1','line_number':183,'multiline':False]
['text':'! "mem": pointer to the object','line_number':184,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':185,'multiline':False]
['text':'! Atomically decrement an boost::uint32_t by 1','line_number':189,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':190,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':191,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':195,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':203,'multiline':False]
['text':'! "mem": pointer to the object','line_number':204,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':205,'multiline':False]
['text':'namespace ipcdetail{','line_number':216,'multiline':False]
['text':'namespace interprocess{','line_number':217,'multiline':False]
['text':'namespace boost{','line_number':218,'multiline':False]
['text':'! Atomically add 'val' to an boost::uint32_t','line_number':226,'multiline':False]
['text':'! "mem": pointer to the object','line_number':227,'multiline':False]
['text':'! "val": amount to add','line_number':228,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':229,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':248,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':249,'multiline':False]
['text':'! "mem": pointer to the value','line_number':250,'multiline':False]
['text':'! "with" what to swap it with','line_number':251,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':252,'multiline':False]
['text':'! Returns the old value of *mem','line_number':253,'multiline':False]
['text':'! Atomically increment an apr_uint32_t by 1','line_number':275,'multiline':False]
['text':'! "mem": pointer to the object','line_number':276,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':277,'multiline':False]
['text':'! Atomically decrement an boost::uint32_t by 1','line_number':281,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':282,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':283,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':287,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':295,'multiline':False]
['text':'! "mem": pointer to the object','line_number':296,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':297,'multiline':False]
['text':'namespace ipcdetail{','line_number':301,'multiline':False]
['text':'namespace interprocess{','line_number':302,'multiline':False]
['text':'namespace boost{','line_number':303,'multiline':False]
['text':'! Atomically add 'val' to an boost::uint32_t','line_number':313,'multiline':False]
['text':'! "mem": pointer to the object','line_number':314,'multiline':False]
['text':'! "val": amount to add','line_number':315,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':316,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':320,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':321,'multiline':False]
['text':'! "mem": pointer to the value','line_number':322,'multiline':False]
['text':'! "with" what to swap it with','line_number':323,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':324,'multiline':False]
['text':'! Returns the old value of *mem','line_number':325,'multiline':False]
['text':'! Atomically increment an apr_uint32_t by 1','line_number':330,'multiline':False]
['text':'! "mem": pointer to the object','line_number':331,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':332,'multiline':False]
['text':'! Atomically decrement an boost::uint32_t by 1','line_number':336,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':337,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':338,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':342,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':346,'multiline':False]
['text':'! "mem": pointer to the object','line_number':347,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':348,'multiline':False]
['text':'namespace ipcdetail{','line_number':352,'multiline':False]
['text':'namespace interprocess{','line_number':353,'multiline':False]
['text':'namespace boost{','line_number':354,'multiline':False]
['text':'! Atomically decrement a uint32_t by 1','line_number':365,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':366,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':367,'multiline':False]
['text':'! Acquire, memory barrier after decrement.','line_number':368,'multiline':False]
['text':'! Atomically increment a uint32_t by 1','line_number':372,'multiline':False]
['text':'! "mem": pointer to the object','line_number':373,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':374,'multiline':False]
['text':'! Release, memory barrier before increment.','line_number':375,'multiline':False]
['text':' Rational for the implementation of the atomic read and write functions.','line_number':379,'multiline':False]
['text':'','line_number':380,'multiline':False]
['text':' 1. The Alpha Architecture Handbook requires that access to a byte,','line_number':381,'multiline':False]
['text':' an aligned word, an aligned longword, or an aligned quadword is','line_number':382,'multiline':False]
['text':' atomic. (See 'Alpha Architecture Handbook', version 4, chapter 5.2.2.)','line_number':383,'multiline':False]
['text':'','line_number':384,'multiline':False]
['text':' 2. The CXX User's Guide states that volatile quantities are accessed','line_number':385,'multiline':False]
['text':' with single assembler instructions, and that a compilation error','line_number':386,'multiline':False]
['text':' occurs when declaring a quantity as volatile which is not properly','line_number':387,'multiline':False]
['text':' aligned.','line_number':388,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':390,'multiline':False]
['text':'! Acquire, memory barrier after load.','line_number':391,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':395,'multiline':False]
['text':'! "mem": pointer to the object','line_number':396,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':397,'multiline':False]
['text':'! Release, memory barrier before store.','line_number':398,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':402,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':403,'multiline':False]
['text':'! "mem": pointer to the value','line_number':404,'multiline':False]
['text':'! "with" what to swap it with','line_number':405,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':406,'multiline':False]
['text':'! Returns the old value of *mem','line_number':407,'multiline':False]
['text':'! Memory barrier between load and store.','line_number':408,'multiline':False]
['text':' Note:','line_number':412,'multiline':False]
['text':'','line_number':413,'multiline':False]
['text':' Branch prediction prefers backward branches, and the Alpha Architecture','line_number':414,'multiline':False]
['text':' Handbook explicitely states that the loop should not be implemented like','line_number':415,'multiline':False]
['text':' it is below. (See chapter 4.2.5.) Therefore the code should probably look','line_number':416,'multiline':False]
['text':' like this:','line_number':417,'multiline':False]
['text':'','line_number':418,'multiline':False]
['text':' return asm(','line_number':419,'multiline':False]
['text':'   "10: ldl_l %v0,(%a0) ;"','line_number':420,'multiline':False]
['text':'   "    cmpeq %v0,%a2,%t0 ;"','line_number':421,'multiline':False]
['text':'   "    beq %t0,20f ;"','line_number':422,'multiline':False]
['text':'   "    mb ;"','line_number':423,'multiline':False]
['text':'   "    mov %a1,%t0 ;"','line_number':424,'multiline':False]
['text':'   "    stl_c %t0,(%a0) ;"','line_number':425,'multiline':False]
['text':'   "    beq %t0,30f ;"','line_number':426,'multiline':False]
['text':'   "20: ret ;"','line_number':427,'multiline':False]
['text':'   "30: br 10b;",','line_number':428,'multiline':False]
['text':'   mem, with, cmp);','line_number':429,'multiline':False]
['text':'','line_number':430,'multiline':False]
['text':' But as the compiler always transforms this into the form where a backward','line_number':431,'multiline':False]
['text':' branch is taken on failure, we can as well implement it in the straight','line_number':432,'multiline':False]
['text':' forward form, as this is what it will end up in anyway.','line_number':433,'multiline':False]
['text':' load prev value from mem and lock mem','line_number':436,'multiline':False]
['text':' compare with given value','line_number':437,'multiline':False]
['text':' if not equal, we're done','line_number':438,'multiline':False]
['text':' memory barrier','line_number':439,'multiline':False]
['text':' load new value into scratch register','line_number':440,'multiline':False]
['text':' store new value to locked mem (overwriting scratch)','line_number':441,'multiline':False]
['text':' store failed because lock has been stolen, retry','line_number':442,'multiline':False]
['text':'namespace ipcdetail{','line_number':447,'multiline':False]
['text':'namespace interprocess{','line_number':448,'multiline':False]
['text':'namespace boost{','line_number':449,'multiline':False]
['text':'first define boost::uint32_t versions of __lwarx and __stwcx to avoid poluting','line_number':459,'multiline':False]
['text':'all the functions with casts','line_number':460,'multiline':False]
['text':'! From XLC documenation :','line_number':462,'multiline':False]
['text':'! This function can be used with a subsequent stwcxu call to implement a','line_number':463,'multiline':False]
['text':'! read-modify-write on a specified memory location. The two functions work','line_number':464,'multiline':False]
['text':'! together to ensure that if the store is successfully performed, no other','line_number':465,'multiline':False]
['text':'! processor or mechanism can modify the target doubleword between the time','line_number':466,'multiline':False]
['text':'! lwarxu function is executed and the time the stwcxu functio ncompletes.','line_number':467,'multiline':False]
['text':'! "mem" : pointer to the object','line_number':468,'multiline':False]
['text':'! Returns the value at pointed to by mem','line_number':469,'multiline':False]
['text':'! "mem" : pointer to the object','line_number':475,'multiline':False]
['text':'! "val" : the value to store','line_number':476,'multiline':False]
['text':'! Returns true if the update of mem is successful and false if it is','line_number':477,'multiline':False]
['text':'!unsuccessful','line_number':478,'multiline':False]
['text':'! "mem": pointer to the object','line_number':484,'multiline':False]
['text':'! "val": amount to add','line_number':485,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':486,'multiline':False]
['text':'! Atomically increment an apr_uint32_t by 1','line_number':498,'multiline':False]
['text':'! "mem": pointer to the object','line_number':499,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':500,'multiline':False]
['text':'! Atomically decrement an boost::uint32_t by 1','line_number':504,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':505,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':506,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':510,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':514,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':515,'multiline':False]
['text':'! "mem": pointer to the value','line_number':516,'multiline':False]
['text':'! "with" what to swap it with','line_number':517,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':518,'multiline':False]
['text':'! Returns the old value of *mem','line_number':519,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':533,'multiline':False]
['text':'! "mem": pointer to the object','line_number':534,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':535,'multiline':False]
['text':'namespace ipcdetail','line_number':539,'multiline':False]
['text':'namespace interprocess','line_number':540,'multiline':False]
['text':'namespace boost','line_number':541,'multiline':False]
['text':'! Atomically add 'val' to an boost::uint32_t','line_number':549,'multiline':False]
['text':'! "mem": pointer to the object','line_number':550,'multiline':False]
['text':'! "val": amount to add','line_number':551,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':552,'multiline':False]
['text':'! Atomically increment an apr_uint32_t by 1','line_number':557,'multiline':False]
['text':'! "mem": pointer to the object','line_number':558,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':559,'multiline':False]
['text':'! Atomically decrement an boost::uint32_t by 1','line_number':563,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':564,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':565,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':569,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':573,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':574,'multiline':False]
['text':'! "mem": pointer to the value','line_number':575,'multiline':False]
['text':'! "with" what to swap it with','line_number':576,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':577,'multiline':False]
['text':'! Returns the old value of *mem','line_number':578,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':583,'multiline':False]
['text':'! "mem": pointer to the object','line_number':584,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':585,'multiline':False]
['text':'namespace ipcdetail{','line_number':589,'multiline':False]
['text':'namespace interprocess{','line_number':590,'multiline':False]
['text':'namespace boost{','line_number':591,'multiline':False]
['text':' VxWorks atomic32_t is not volatile, for some unknown reason','line_number':595,'multiline':False]
['text':'! Atomically add 'val' to an boost::uint32_t','line_number':602,'multiline':False]
['text':'! "mem": pointer to the object','line_number':603,'multiline':False]
['text':'! "val": amount to add','line_number':604,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':605,'multiline':False]
['text':'! Atomically increment an apr_uint32_t by 1','line_number':610,'multiline':False]
['text':'! "mem": pointer to the object','line_number':611,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':612,'multiline':False]
['text':'! Atomically decrement an boost::uint32_t by 1','line_number':616,'multiline':False]
['text':'! "mem": pointer to the atomic value','line_number':617,'multiline':False]
['text':'! Returns the old value pointed to by mem','line_number':618,'multiline':False]
['text':'! Atomically read an boost::uint32_t from memory','line_number':622,'multiline':False]
['text':'! Compare an boost::uint32_t's value with "cmp".','line_number':626,'multiline':False]
['text':'! If they are the same swap the value with "with"','line_number':627,'multiline':False]
['text':'! "mem": pointer to the value','line_number':628,'multiline':False]
['text':'! "with" what to swap it with','line_number':629,'multiline':False]
['text':'! "cmp": the value to compare it to','line_number':630,'multiline':False]
['text':'! Returns the old value of *mem','line_number':631,'multiline':False]
['text':'! Atomically set an boost::uint32_t in memory','line_number':636,'multiline':False]
['text':'! "mem": pointer to the object','line_number':637,'multiline':False]
['text':'! "param": val value that the object will assume','line_number':638,'multiline':False]
['text':'namespace ipcdetail{','line_number':643,'multiline':False]
['text':'namespace interprocess{','line_number':644,'multiline':False]
['text':'namespace boost{','line_number':645,'multiline':False]
['text':'namespace ipcdetail','line_number':667,'multiline':False]
['text':'namespace interprocess','line_number':668,'multiline':False]
['text':'namespace boost','line_number':669,'multiline':False]
['text':'BOOST_INTERPROCESS_DETAIL_ATOMIC_HPP','line_number':674,'multiline':False]
