['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2009-2012. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'alignment_of, aligned_storage','line_number':28,'multiline':False]
['text':'namespace intermodule_singleton_helpers {','line_number':70,'multiline':False]
['text':'This class contains common code for all singleton types, so that we instantiate this','line_number':72,'multiline':False]
['text':'code just once per module. This class also holds a thread soafe global map','line_number':73,'multiline':False]
['text':'to be used by all instances protected with a reference count','line_number':74,'multiline':False]
['text':'Initialize this_module_singleton_ptr, creates the global map if needed and also creates an unique','line_number':88,'multiline':False]
['text':'opaque type in global map through a singleton_constructor_t function call,','line_number':89,'multiline':False]
['text':'initializing the passed pointer to that unique instance.','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'We have two concurrency types here. a)the global map/singleton creation must','line_number':92,'multiline':False]
['text':'be safe between threads of this process but in different modules/dlls. b)','line_number':93,'multiline':False]
['text':'the pointer to the singleton is per-module, so we have to protect this','line_number':94,'multiline':False]
['text':'initization between threads of the same module.','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':'All static variables declared here are shared between inside a module','line_number':97,'multiline':False]
['text':'so atomic operations will synchronize only threads of the same module.','line_number':98,'multiline':False]
['text':'If current module is not initialized enter to lock free logic','line_number':102,'multiline':False]
['text':'Now a single thread of the module will succeed in this CAS.','line_number':104,'multiline':False]
['text':'trying to pass from Uninitialized to Initializing','line_number':105,'multiline':False]
['text':'If the thread succeeded the CAS (winner) it will compete with other','line_number':108,'multiline':False]
['text':'winner threads from other modules to create the global map','line_number':109,'multiline':False]
['text':'Trying to resurrect a dead Phoenix singleton. Just try to','line_number':111,'multiline':False]
['text':'mark it as uninitialized and start again','line_number':112,'multiline':False]
['text':'Trying to resurrect a non-Phoenix dead singleton is an error','line_number':118,'multiline':False]
['text':'Now initialize the global map, this function must solve concurrency','line_number':125,'multiline':False]
['text':'issues between threads of several modules','line_number':126,'multiline':False]
['text':'Now try to create the singleton in global map.','line_number':128,'multiline':False]
['text':'This function solves concurrency issues','line_number':129,'multiline':False]
['text':'between threads of several modules','line_number':130,'multiline':False]
['text':'Increment the module reference count that reflects how many','line_number':133,'multiline':False]
['text':'singletons this module holds, so that we can safely destroy','line_number':134,'multiline':False]
['text':'module global map object when no singleton is left','line_number':135,'multiline':False]
['text':'Insert a barrier before assigning the pointer to','line_number':137,'multiline':False]
['text':'make sure this assignment comes after the initialization','line_number':138,'multiline':False]
['text':'Assign the singleton address to the module-local pointer','line_number':140,'multiline':False]
['text':'Memory barrier inserted, all previous operations should complete','line_number':142,'multiline':False]
['text':'before this one. Now marked as initialized','line_number':143,'multiline':False]
['text':'Mark singleton failed to initialize','line_number':147,'multiline':False]
['text':'If previous state was initializing, this means that another winner thread is','line_number':152,'multiline':False]
['text':'trying to initialize the singleton. Just wait until completes its work.','line_number':153,'multiline':False]
['text':'Already initialized, or exception thrown by initializer thread','line_number':159,'multiline':False]
['text':'This can't be happening!','line_number':166,'multiline':False]
['text':'Nothing to do here, the singleton is ready','line_number':172,'multiline':False]
['text':'If previous state was greater than initialized, then memory is broken','line_number':174,'multiline':False]
['text':'trying to initialize the singleton.','line_number':175,'multiline':False]
['text':'(previous_module_singleton_initialized > Initialized)','line_number':176,'multiline':False]
['text':'Protect destruction against lazy singletons not initialized in this execution','line_number':185,'multiline':False]
['text':'Note: this destructor might provoke a Phoenix singleton','line_number':187,'multiline':False]
['text':'resurrection. This means that this_module_singleton_count','line_number':188,'multiline':False]
['text':'might change after this call.','line_number':189,'multiline':False]
['text':'Memory barrier to make sure pointer is nulled.','line_number':194,'multiline':False]
['text':'Mark this singleton as destroyed.','line_number':195,'multiline':False]
['text':'If this is the last singleton of this module','line_number':198,'multiline':False]
['text':'apply map destruction.','line_number':199,'multiline':False]
['text':'Note: singletons are destroyed when the module is unloaded','line_number':200,'multiline':False]
['text':'so no threads should be executing or holding references','line_number':201,'multiline':False]
['text':'to this module','line_number':202,'multiline':False]
['text':'Obtain unique map name and size','line_number':217,'multiline':False]
['text':'Try to pass map state to initializing','line_number':220,'multiline':False]
['text':'If some other thread is doing the work wait','line_number':229,'multiline':False]
['text':'(tmp == Uninitialized)','line_number':233,'multiline':False]
['text':'If not initialized try it again?','line_number':234,'multiline':False]
['text':'Remove old global map from the system','line_number':236,'multiline':False]
['text':'in-place construction of the global map class','line_number':238,'multiline':False]
['text':'Use global map's internal lock to initialize the lock file','line_number':242,'multiline':False]
['text':'that will mark this gmem as "in use".','line_number':243,'multiline':False]
['text':'If function failed (maybe a competing process has erased the shared','line_number':246,'multiline':False]
['text':'memory between creation and file locking), retry with a new instance.','line_number':247,'multiline':False]
['text':'Locking succeeded, so this global map module-instance is ready','line_number':253,'multiline':False]
['text':'','line_number':259,'multiline':False]
['text':'This module is being unloaded, so destroy','line_number':269,'multiline':False]
['text':'the global map object of this module','line_number':270,'multiline':False]
['text':'and unlink the global map if it's the last','line_number':271,'multiline':False]
['text':'Do some cleanup for other processes old gmem instances','line_number':277,'multiline':False]
['text':'Static data, zero-initalized without any dependencies','line_number':282,'multiline':False]
['text':'this_module_singleton_count is the number of singletons used by this module','line_number':283,'multiline':False]
['text':'this_module_map_initialized is the state of this module's map class object.','line_number':286,'multiline':False]
['text':'Values: Uninitialized, Initializing, Initialized, Broken','line_number':287,'multiline':False]
['text':'Raw memory to construct the global map manager','line_number':290,'multiline':False]
['text':'A reference count to be stored in global map holding the number','line_number':308,'multiline':False]
['text':'of singletons (one per module) attached to the instance pointed by','line_number':309,'multiline':False]
['text':'the internal ptr.','line_number':310,'multiline':False]
['text':'This reference count serves to count the number of attached','line_number':317,'multiline':False]
['text':'modules to this singleton','line_number':318,'multiline':False]
['text':'Now this class is a singleton, initializing the singleton in','line_number':323,'multiline':False]
['text':'the first get() function call if LazyInit is true. If false','line_number':324,'multiline':False]
['text':'then the singleton will be initialized when loading the module.','line_number':325,'multiline':False]
['text':'Let's make inlining easy','line_number':331,'multiline':False]
['text':'This forces lifetime instantiation, for reference counted destruction','line_number':334,'multiline':False]
['text':'These statics will be zero-initialized without any constructor call dependency','line_number':355,'multiline':False]
['text':'this_module_singleton_ptr will be a module-local pointer to the singleton','line_number':356,'multiline':False]
['text':'this_module_singleton_count will be used to synchronize threads of the same module','line_number':359,'multiline':False]
['text':'for access to a singleton instance, and to flag the state of the','line_number':360,'multiline':False]
['text':'singleton.','line_number':361,'multiline':False]
['text':'This class destructor will trigger singleton destruction','line_number':364,'multiline':False]
['text':'if(!Phoenix){','line_number':372,'multiline':False]
['text':'atexit_work();','line_number':373,'multiline':False]
['text':'}','line_number':374,'multiline':False]
['text':'Dummy volatile so that the compiler can't resolve its value at compile-time','line_number':377,'multiline':False]
['text':'and can't avoid lifetime_type instantiation if dummy_function() is called.','line_number':378,'multiline':False]
['text':'A functor to be executed inside global map lock that just','line_number':394,'multiline':False]
['text':'searches for the singleton in map and if not present creates a new one.','line_number':395,'multiline':False]
['text':'If singleton constructor throws, the exception is propagated','line_number':396,'multiline':False]
['text':'if(Phoenix){','line_number':421,'multiline':False]
['text':'}','line_number':423,'multiline':False]
['text':'A functor to be executed inside global map lock that just','line_number':435,'multiline':False]
['text':'deletes the singleton in map if the attached count reaches to zero','line_number':436,'multiline':False]
['text':'The object must exist','line_number':447,'multiline':False]
['text':'Check if last reference','line_number':450,'multiline':False]
['text':'If last, destroy the object','line_number':452,'multiline':False]
['text':'Now destroy map entry','line_number':455,'multiline':False]
['text':'A wrapper to execute init_atomic_func','line_number':467,'multiline':False]
['text':'A wrapper to execute fini_atomic_func','line_number':476,'multiline':False]
['text':'These will be zero-initialized by the loader','line_number':488,'multiline':False]
['text':'namespace ipcdetail{','line_number':499,'multiline':False]
['text':'namespace interprocess{','line_number':500,'multiline':False]
['text':'namespace boost{','line_number':501,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_INTERMODULE_SINGLETON_COMMON_HPP','line_number':505,'multiline':False]
