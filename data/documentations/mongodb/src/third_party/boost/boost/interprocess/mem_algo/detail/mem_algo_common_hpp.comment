['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':' interprocess','line_number':25,'multiline':False]
['text':' interprocess/detail','line_number':28,'multiline':False]
['text':' container/detail','line_number':33,'multiline':False]
['text':' move','line_number':36,'multiline':False]
['text':' move/detail','line_number':38,'multiline':False]
['text':' other boost','line_number':40,'multiline':False]
['text':'!\file','line_number':44,'multiline':False]
['text':'!Implements common operations for memory algorithms.','line_number':45,'multiline':False]
['text':'!This class implements several allocation functions shared by different algorithms','line_number':82,'multiline':False]
['text':'!(aligned allocation, multiple allocation...).','line_number':83,'multiline':False]
['text':' Now calculate lcm_val','line_number':138,'multiline':False]
['text':'Swap if necessary','line_number':145,'multiline':False]
['text':'Check if it's power of two','line_number':151,'multiline':False]
['text':'If we want to use minbytes data to get a buffer between maxbytes','line_number':158,'multiline':False]
['text':'and minbytes if maxbytes can't be achieved, calculate the','line_number':159,'multiline':False]
['text':'biggest of all possibilities','line_number':160,'multiline':False]
['text':'Check if it's multiple of alignment','line_number':169,'multiline':False]
['text':'No need to round needs_backwards because backwards_multiple == lcm_val','line_number':173,'multiline':False]
['text':'Check if it's multiple of the half of the alignmment','line_number':180,'multiline':False]
['text':'while(0 != (needs_backwards_lcmed & (Alignment-1)))','line_number':186,'multiline':False]
['text':'Check if it's multiple of the quarter of the alignmment','line_number':193,'multiline':False]
['text':'while(0 != (needs_backwards_lcmed & (Alignment-1)))','line_number':199,'multiline':False]
['text':'needs_backwards_lcmed += backwards_multiple;','line_number':200,'multiline':False]
['text':'If we want to use minbytes data to get a buffer between maxbytes','line_number':217,'multiline':False]
['text':'and minbytes if maxbytes can't be achieved, calculate the','line_number':218,'multiline':False]
['text':'biggest of all possibilities','line_number':219,'multiline':False]
['text':'Ensure power of 2','line_number':243,'multiline':False]
['text':'Alignment is not power of two','line_number':245,'multiline':False]
['text':'We can find a aligned portion if we allocate a block that has alignment','line_number':260,'multiline':False]
['text':'nbytes + alignment bytes or more.','line_number':261,'multiline':False]
['text':'Since we will split that block, we must request a bit more memory','line_number':264,'multiline':False]
['text':'if the alignment is near the beginning of the buffer, because otherwise,','line_number':265,'multiline':False]
['text':'there is no space for a new block before the alignment.','line_number':266,'multiline':False]
['text':'','line_number':267,'multiline':False]
['text':'            ____ Aligned here','line_number':268,'multiline':False]
['text':'           |','line_number':269,'multiline':False]
['text':'  -----------------------------------------------------','line_number':270,'multiline':False]
['text':' | MBU |','line_number':271,'multiline':False]
['text':'  -----------------------------------------------------','line_number':272,'multiline':False]
['text':'prevsize - UsableByPreviousChunk','line_number':275,'multiline':False]
['text':'Now allocate the buffer','line_number':278,'multiline':False]
['text':'If we are lucky and the buffer is aligned, just split it and','line_number':286,'multiline':False]
['text':'return the high part','line_number':287,'multiline':False]
['text':'We can create a new block in the end of the segment','line_number':292,'multiline':False]
['text':'Buffer not aligned, find the aligned part.','line_number':306,'multiline':False]
['text':'','line_number':307,'multiline':False]
['text':'                    ____ Aligned here','line_number':308,'multiline':False]
['text':'                   |','line_number':309,'multiline':False]
['text':'  -----------------------------------------------------','line_number':310,'multiline':False]
['text':' | MBU +more | ACB |','line_number':311,'multiline':False]
['text':'  -----------------------------------------------------','line_number':312,'multiline':False]
['text':'This is the minimum size of (2)','line_number':315,'multiline':False]
['text':'This is the next MBU for the aligned memory','line_number':317,'multiline':False]
['text':'This is the alignment trick','line_number':319,'multiline':False]
['text':'Now obtain the address of the blocks','line_number':322,'multiline':False]
['text':'Set the new size of the first block','line_number':329,'multiline':False]
['text':'Now check if we can create a new buffer in the end','line_number':335,'multiline':False]
['text':'','line_number':336,'multiline':False]
['text':'              __"second" block','line_number':337,'multiline':False]
['text':'             |      __Aligned here','line_number':338,'multiline':False]
['text':'             |     |      __"third" block','line_number':339,'multiline':False]
['text':'  -----------|-----|-----|------------------------------','line_number':340,'multiline':False]
['text':' | MBU +more | ACB | (3) | BCU |','line_number':341,'multiline':False]
['text':'  -----------------------------------------------------','line_number':342,'multiline':False]
['text':'This size will be the minimum size to be able to create a','line_number':343,'multiline':False]
['text':'new block in the end.','line_number':344,'multiline':False]
['text':'Check if we can create a new block (of size MinBlockUnits) in the end of the segment','line_number':348,'multiline':False]
['text':'Now obtain the address of the end block','line_number':350,'multiline':False]
['text':'Obtain the real block','line_number':375,'multiline':False]
['text':'The block must be marked as allocated','line_number':379,'multiline':False]
['text':'Check if alignment and block size are right','line_number':382,'multiline':False]
['text':'Put this to a safe value','line_number':385,'multiline':False]
['text':'Now translate it to Alignment units','line_number':388,'multiline':False]
['text':'Check if rounded max and preferred are possible correct','line_number':392,'multiline':False]
['text':'Check if the block is smaller than the requested minimum','line_number':396,'multiline':False]
['text':'If the block is smaller than the requested minimum','line_number':402,'multiline':False]
['text':'Some parameter checks','line_number':411,'multiline':False]
['text':'We must be able to create at least a new empty block','line_number':415,'multiline':False]
['text':'Update new size','line_number':420,'multiline':False]
['text':'Obtain the real block','line_number':430,'multiline':False]
['text':'Check if the old size was just the shrunk size (no splitting)','line_number':438,'multiline':False]
['text':'Now we can just rewrite the size of the old buffer','line_number':442,'multiline':False]
['text':'We create the new block','line_number':446,'multiline':False]
['text':'Write control data to simulate this new block was previously allocated','line_number':449,'multiline':False]
['text':'and deallocate it','line_number':450,'multiline':False]
['text':'Note: sizeof_element == 0 indicates that we want to','line_number':467,'multiline':False]
['text':'allocate n_elements of the same size "*elem_sizes"','line_number':468,'multiline':False]
['text':'Calculate the total size of all requests','line_number':470,'multiline':False]
['text':'This is the position where the new block must be created','line_number':525,'multiline':False]
['text':'The last block should take all the remaining space','line_number':529,'multiline':False]
['text':'By default, the new block will use the rest of the buffer','line_number':536,'multiline':False]
['text':'If the remaining units are bigger than needed and we can','line_number':540,'multiline':False]
['text':'split it obtaining a new free memory block do it.','line_number':541,'multiline':False]
['text':'Shrink must always succeed with passed parameters','line_number':551,'multiline':False]
['text':'Some sanity checks','line_number':553,'multiline':False]
['text':'"new_block->m_size" must have been reduced to elem_units by "shrink"','line_number':556,'multiline':False]
['text':'Now update the total received units with the reduction','line_number':558,'multiline':False]
['text':'Check we have enough room to overwrite the intrusive pointer','line_number':569,'multiline':False]
['text':'Sanity check','line_number':575,'multiline':False]
['text':'namespace ipcdetail {','line_number':593,'multiline':False]
['text':'namespace interprocess {','line_number':594,'multiline':False]
['text':'namespace boost {','line_number':595,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DETAIL_MEM_ALGO_COMMON_HPP','line_number':599,'multiline':False]
