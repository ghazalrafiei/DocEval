['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2008-2012. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'to_raw_pointer','line_number':28,'multiline':False]
['text':'boost::addressof','line_number':29,'multiline':False]
['text':'BOOST_ASSERT','line_number':30,'multiline':False]
['text':'bad_alloc','line_number':31,'multiline':False]
['text':'scoped_lock','line_number':32,'multiline':False]
['text':'boost::interprocess::allocation_type','line_number':33,'multiline':False]
['text':'!Object function that creates the node allocator if it is not created and','line_number':78,'multiline':False]
['text':'!increments reference count if it is already created','line_number':79,'multiline':False]
['text':'!This connects or constructs the unique instance of node_pool_t','line_number':84,'multiline':False]
['text':'!Can throw boost::interprocess::bad_alloc','line_number':85,'multiline':False]
['text':'Find or create the node_pool_t','line_number':88,'multiline':False]
['text':'If valid, increment link count','line_number':91,'multiline':False]
['text':'!Constructor. Initializes function','line_number':96,'multiline':False]
['text':'!object parameters','line_number':97,'multiline':False]
['text':'!Object function that decrements the reference count. If the count','line_number':113,'multiline':False]
['text':'!reaches to zero destroys the node allocator from memory.','line_number':114,'multiline':False]
['text':'!Never throws','line_number':115,'multiline':False]
['text':'!Decrements reference count and destroys the object if there is no','line_number':119,'multiline':False]
['text':'!more attached allocators. Never throws','line_number':120,'multiline':False]
['text':'If not the last link return','line_number':123,'multiline':False]
['text':'Last link, let's destroy the segment_manager','line_number':126,'multiline':False]
['text':'!Constructor. Initializes function','line_number':130,'multiline':False]
['text':'!object parameters','line_number':131,'multiline':False]
['text':'!Destruction function, initializes and executes destruction function','line_number':139,'multiline':False]
['text':'!object. Never throws','line_number':140,'multiline':False]
['text':'Get segment manager','line_number':144,'multiline':False]
['text':'Execute destruction functor atomically','line_number':146,'multiline':False]
['text':'If don't have any cached node, we have to get a new list of free nodes from the pool','line_number':197,'multiline':False]
['text':'If don't have any cached node, we have to get a new list of free nodes from the pool','line_number':209,'multiline':False]
['text':'Check if cache is full','line_number':228,'multiline':False]
['text':'This only occurs if this allocator deallocate memory allocated','line_number':230,'multiline':False]
['text':'with other equal allocator. Since the cache is full, and more','line_number':231,'multiline':False]
['text':'deallocations are probably coming, we'll make some room in cache','line_number':232,'multiline':False]
['text':'in a single, efficient multi node deallocation.','line_number':233,'multiline':False]
['text':'Check if cache is full','line_number':243,'multiline':False]
['text':'This only occurs if this allocator deallocate memory allocated','line_number':245,'multiline':False]
['text':'with other equal allocator. Since the cache is full, and more','line_number':246,'multiline':False]
['text':'deallocations are probably coming, we'll make some room in cache','line_number':247,'multiline':False]
['text':'in a single, efficient multi node deallocation.','line_number':248,'multiline':False]
['text':'!Sets the new max cached nodes value. This can provoke deallocations','line_number':253,'multiline':False]
['text':'!if "newmax" is less than current cached nodes. Never throws','line_number':254,'multiline':False]
['text':'!Frees all cached nodes.','line_number':261,'multiline':False]
['text':'!Never throws','line_number':262,'multiline':False]
['text':'!Frees all cached nodes at once.','line_number':270,'multiline':False]
['text':'!Never throws','line_number':271,'multiline':False]
['text':'!Frees n cached nodes at once. Never throws','line_number':279,'multiline':False]
['text':'This only occurs if this allocator deallocate memory allocated','line_number':282,'multiline':False]
['text':'with other equal allocator. Since the cache is full, and more','line_number':283,'multiline':False]
['text':'deallocations are probably coming, we'll make some room in cache','line_number':284,'multiline':False]
['text':'in a single, efficient multi node deallocation.','line_number':285,'multiline':False]
['text':'Deallocate all new linked list at once','line_number':293,'multiline':False]
['text':'!Returns maximum the number of objects the previously allocated memory','line_number':335,'multiline':False]
['text':'!pointed by p can hold. This size only works for memory allocated with','line_number':336,'multiline':False]
['text':'!allocate, allocation_command and allocate_many.','line_number':337,'multiline':False]
['text':'!Allocates many elements of size elem_size in a contiguous block','line_number':353,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':354,'multiline':False]
['text':'!the preferred and maximum number is','line_number':355,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':356,'multiline':False]
['text':'!will be assigned to received_size. The elements must be deallocated','line_number':357,'multiline':False]
['text':'!with deallocate(...)','line_number':358,'multiline':False]
['text':'!Allocates n_elements elements, each one of size elem_sizes[i]in a','line_number':367,'multiline':False]
['text':'!contiguous block','line_number':368,'multiline':False]
['text':'!of memory. The elements must be deallocated','line_number':369,'multiline':False]
['text':'!Allocates many elements of size elem_size in a contiguous block','line_number':375,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':376,'multiline':False]
['text':'!the preferred and maximum number is','line_number':377,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':378,'multiline':False]
['text':'!will be assigned to received_size. The elements must be deallocated','line_number':379,'multiline':False]
['text':'!with deallocate(...)','line_number':380,'multiline':False]
['text':'!Returns the number of elements that could be','line_number':384,'multiline':False]
['text':'!allocated. Never throws','line_number':385,'multiline':False]
['text':'!Returns address of mutable object.','line_number':389,'multiline':False]
['text':'!Never throws','line_number':390,'multiline':False]
['text':'!Returns address of non mutable object.','line_number':394,'multiline':False]
['text':'!Never throws','line_number':395,'multiline':False]
['text':'!Constructs an object','line_number':399,'multiline':False]
['text':'!Throws if T's constructor throws','line_number':400,'multiline':False]
['text':'!For backwards compatibility with libraries using C++03 allocators','line_number':401,'multiline':False]
['text':'!Destroys object. Throws if object's','line_number':406,'multiline':False]
['text':'!destructor throws','line_number':407,'multiline':False]
['text':'!Allocate memory for an array of count elements.','line_number':457,'multiline':False]
['text':'!Throws boost::interprocess::bad_alloc if there is no enough memory','line_number':458,'multiline':False]
['text':'!Deallocate allocated memory. Never throws','line_number':477,'multiline':False]
['text':'!Allocates just one object. Memory allocated with this function','line_number':489,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':490,'multiline':False]
['text':'!Throws boost::interprocess::bad_alloc if there is no enough memory','line_number':491,'multiline':False]
['text':'!Allocates many elements of size == 1 in a contiguous block','line_number':499,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':500,'multiline':False]
['text':'!the preferred and maximum number is','line_number':501,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':502,'multiline':False]
['text':'!will be assigned to received_size. Memory allocated with this function','line_number':503,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':504,'multiline':False]
['text':'!Deallocates memory previously allocated with allocate_one().','line_number':512,'multiline':False]
['text':'!You should never use deallocate_one to deallocate memory allocated','line_number':513,'multiline':False]
['text':'!with other functions different from allocate_one(). Never throws','line_number':514,'multiline':False]
['text':'!Allocates many elements of size == 1 in a contiguous block','line_number':522,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':523,'multiline':False]
['text':'!the preferred and maximum number is','line_number':524,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':525,'multiline':False]
['text':'!will be assigned to received_size. Memory allocated with this function','line_number':526,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':527,'multiline':False]
['text':'!Deallocates all free blocks of the pool','line_number':534,'multiline':False]
['text':'!Deprecated, use deallocate_free_blocks.','line_number':538,'multiline':False]
['text':'!Deallocates all free chunks of the pool.','line_number':539,'multiline':False]
['text':'!Copy constructor from related cached_adaptive_pool_base. If not present, constructs','line_number':579,'multiline':False]
['text':'!a node pool. Increments the reference count of the associated node pool.','line_number':580,'multiline':False]
['text':'!Can throw boost::interprocess::bad_alloc','line_number':581,'multiline':False]
['text':'!Returns a pointer to the node pool.','line_number':589,'multiline':False]
['text':'!Never throws','line_number':590,'multiline':False]
['text':'!Returns the segment manager.','line_number':594,'multiline':False]
['text':'!Never throws','line_number':595,'multiline':False]
['text':'!Sets the new max cached nodes value. This can provoke deallocations','line_number':599,'multiline':False]
['text':'!if "newmax" is less than current cached nodes. Never throws','line_number':600,'multiline':False]
['text':'!Returns the max cached nodes parameter.','line_number':604,'multiline':False]
['text':'!Never throws','line_number':605,'multiline':False]
['text':'!Allocate memory for an array of count elements.','line_number':609,'multiline':False]
['text':'!Throws boost::interprocess::bad_alloc if there is no enough memory','line_number':610,'multiline':False]
['text':'!Deallocate allocated memory. Never throws','line_number':627,'multiline':False]
['text':'!Allocates just one object. Memory allocated with this function','line_number':639,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':640,'multiline':False]
['text':'!Throws boost::interprocess::bad_alloc if there is no enough memory','line_number':641,'multiline':False]
['text':'!Allocates many elements of size == 1 in a contiguous block','line_number':645,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':646,'multiline':False]
['text':'!the preferred and maximum number is','line_number':647,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':648,'multiline':False]
['text':'!will be assigned to received_size. Memory allocated with this function','line_number':649,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':650,'multiline':False]
['text':'!Deallocates memory previously allocated with allocate_one().','line_number':654,'multiline':False]
['text':'!You should never use deallocate_one to deallocate memory allocated','line_number':655,'multiline':False]
['text':'!with other functions different from allocate_one(). Never throws','line_number':656,'multiline':False]
['text':'!Allocates many elements of size == 1 in a contiguous block','line_number':660,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':661,'multiline':False]
['text':'!the preferred and maximum number is','line_number':662,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':663,'multiline':False]
['text':'!will be assigned to received_size. Memory allocated with this function','line_number':664,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':665,'multiline':False]
['text':'!Deallocates all free blocks of the pool','line_number':669,'multiline':False]
['text':'!Swaps allocators. Does not throw. If each allocator is placed in a','line_number':673,'multiline':False]
['text':'!different shared memory segments, the result is undefined.','line_number':674,'multiline':False]
['text':'!Deprecated use deallocate_free_blocks.','line_number':681,'multiline':False]
['text':'!defined(BOOST_INTERPROCESS_DOXYGEN_INVOKED)','line_number':688,'multiline':False]
['text':'!Equality test for same type of','line_number':691,'multiline':False]
['text':'!cached_allocator_impl','line_number':692,'multiline':False]
['text':'!Inequality test for same type of','line_number':698,'multiline':False]
['text':'!cached_allocator_impl','line_number':699,'multiline':False]
['text':'!Pooled shared memory allocator using adaptive pool. Includes','line_number':706,'multiline':False]
['text':'!a reference count but the class does not delete itself, this is','line_number':707,'multiline':False]
['text':'!responsibility of user classes. Node size (NodeSize) and the number of','line_number':708,'multiline':False]
['text':'!nodes allocated per block (NodesPerBlock) are known at compile time','line_number':709,'multiline':False]
['text':'!Segment manager typedef','line_number':715,'multiline':False]
['text':'!Constructor from a segment manager. Never throws','line_number':727,'multiline':False]
['text':'!Destructor. Deallocates all allocated blocks. Never throws','line_number':732,'multiline':False]
['text':'!Allocates array of count elements. Can throw boost::interprocess::bad_alloc','line_number':736,'multiline':False]
['text':'-----------------------','line_number':739,'multiline':False]
['text':'-----------------------','line_number':741,'multiline':False]
['text':'!Deallocates an array pointed by ptr. Never throws','line_number':745,'multiline':False]
['text':'-----------------------','line_number':748,'multiline':False]
['text':'-----------------------','line_number':750,'multiline':False]
['text':'!Allocates n nodes.','line_number':754,'multiline':False]
['text':'!Can throw boost::interprocess::bad_alloc','line_number':755,'multiline':False]
['text':'-----------------------','line_number':758,'multiline':False]
['text':'-----------------------','line_number':760,'multiline':False]
['text':'!Deallocates a linked list of nodes ending in null pointer. Never throws','line_number':764,'multiline':False]
['text':'-----------------------','line_number':767,'multiline':False]
['text':'-----------------------','line_number':769,'multiline':False]
['text':'!Deallocates the nodes pointed by the multiallocation iterator. Never throws','line_number':773,'multiline':False]
['text':'-----------------------','line_number':776,'multiline':False]
['text':'-----------------------','line_number':778,'multiline':False]
['text':'!Deallocates all the free blocks of memory. Never throws','line_number':782,'multiline':False]
['text':'-----------------------','line_number':785,'multiline':False]
['text':'-----------------------','line_number':787,'multiline':False]
['text':'!Deallocates all used memory from the common pool.','line_number':791,'multiline':False]
['text':'!Precondition: all nodes allocated from this pool should','line_number':792,'multiline':False]
['text':'!already be deallocated. Otherwise, undefined behavior. Never throws','line_number':793,'multiline':False]
['text':'-----------------------','line_number':796,'multiline':False]
['text':'-----------------------','line_number':798,'multiline':False]
['text':'!Increments internal reference count and returns new count. Never throws','line_number':802,'multiline':False]
['text':'-----------------------','line_number':805,'multiline':False]
['text':'-----------------------','line_number':807,'multiline':False]
['text':'!Decrements internal reference count and returns new count. Never throws','line_number':811,'multiline':False]
['text':'-----------------------','line_number':814,'multiline':False]
['text':'-----------------------','line_number':816,'multiline':False]
['text':'!Deprecated, use deallocate_free_blocks.','line_number':821,'multiline':False]
['text':'-----------------------','line_number':824,'multiline':False]
['text':'-----------------------','line_number':826,'multiline':False]
['text':'!Deprecated, use purge_blocks.','line_number':830,'multiline':False]
['text':'-----------------------','line_number':833,'multiline':False]
['text':'-----------------------','line_number':835,'multiline':False]
['text':'!This struct includes needed data and derives from','line_number':840,'multiline':False]
['text':'!the mutex type to allow EBO when using null_mutex','line_number':841,'multiline':False]
['text':'Number of attached allocators','line_number':844,'multiline':False]
['text':'namespace ipcdetail {','line_number':851,'multiline':False]
['text':'namespace interprocess {','line_number':852,'multiline':False]
['text':'namespace boost {','line_number':853,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_ALLOCATOR_DETAIL_ALLOCATOR_COMMON_HPP','line_number':857,'multiline':False]
