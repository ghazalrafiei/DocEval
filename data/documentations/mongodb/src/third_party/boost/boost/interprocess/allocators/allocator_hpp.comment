['text':'/////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/interprocess for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'!\file','line_number':42,'multiline':False]
['text':'!Describes an allocator that allocates portions of fixed size','line_number':43,'multiline':False]
['text':'!memory buffer (shared memory, mapped file...)','line_number':44,'multiline':False]
['text':'!An STL compatible allocator that uses a segment manager as','line_number':50,'multiline':False]
['text':'!memory source. The internal pointer type will of the same type (raw, smart) as','line_number':51,'multiline':False]
['text':'!"typename SegmentManager::void_pointer" type. This allows','line_number':52,'multiline':False]
['text':'!placing the allocator in shared memory, memory mapped-files, etc...','line_number':53,'multiline':False]
['text':'Segment manager','line_number':58,'multiline':False]
['text':'Self type','line_number':65,'multiline':False]
['text':'Pointer to void','line_number':68,'multiline':False]
['text':'Typedef to const void pointer','line_number':71,'multiline':False]
['text':'Pointer to the allocator','line_number':76,'multiline':False]
['text':'Not assignable from related allocator','line_number':81,'multiline':False]
['text':'Not assignable from other allocator','line_number':85,'multiline':False]
['text':'Pointer to the allocator','line_number':88,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':90,'multiline':False]
['text':'Experimental. Don't use.','line_number':111,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':114,'multiline':False]
['text':'!Obtains an allocator that allocates','line_number':116,'multiline':False]
['text':'!objects of type T2','line_number':117,'multiline':False]
['text':'!Returns the segment manager.','line_number':124,'multiline':False]
['text':'!Never throws','line_number':125,'multiline':False]
['text':'!Constructor from the segment manager.','line_number':129,'multiline':False]
['text':'!Never throws','line_number':130,'multiline':False]
['text':'!Constructor from other allocator.','line_number':134,'multiline':False]
['text':'!Never throws','line_number':135,'multiline':False]
['text':'!Constructor from related allocator.','line_number':139,'multiline':False]
['text':'!Never throws','line_number':140,'multiline':False]
['text':'!Allocates memory for an array of count elements.','line_number':145,'multiline':False]
['text':'!Throws boost::interprocess::bad_alloc if there is no enough memory','line_number':146,'multiline':False]
['text':'!Deallocates memory previously allocated.','line_number':156,'multiline':False]
['text':'!Never throws','line_number':157,'multiline':False]
['text':'!Returns the number of elements that could be allocated.','line_number':161,'multiline':False]
['text':'!Never throws','line_number':162,'multiline':False]
['text':'!Swap segment manager. Does not throw. If each allocator is placed in','line_number':166,'multiline':False]
['text':'!different memory segments, the result is undefined.','line_number':167,'multiline':False]
['text':'!Returns maximum the number of objects the previously allocated memory','line_number':171,'multiline':False]
['text':'!pointed by p can hold. This size only works for memory allocated with','line_number':172,'multiline':False]
['text':'!allocate, allocation_command and allocate_many.','line_number':173,'multiline':False]
['text':'!Allocates many elements of size elem_size in a contiguous block','line_number':188,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':189,'multiline':False]
['text':'!the preferred and maximum number is','line_number':190,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':191,'multiline':False]
['text':'!will be assigned to received_size. The elements must be deallocated','line_number':192,'multiline':False]
['text':'!with deallocate(...)','line_number':193,'multiline':False]
['text':'!Allocates n_elements elements, each one of size elem_sizes[i]in a','line_number':202,'multiline':False]
['text':'!contiguous block','line_number':203,'multiline':False]
['text':'!of memory. The elements must be deallocated','line_number':204,'multiline':False]
['text':'!Allocates many elements of size elem_size in a contiguous block','line_number':210,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':211,'multiline':False]
['text':'!the preferred and maximum number is','line_number':212,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':213,'multiline':False]
['text':'!will be assigned to received_size. The elements must be deallocated','line_number':214,'multiline':False]
['text':'!with deallocate(...)','line_number':215,'multiline':False]
['text':'!Allocates just one object. Memory allocated with this function','line_number':219,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':220,'multiline':False]
['text':'!Throws boost::interprocess::bad_alloc if there is no enough memory','line_number':221,'multiline':False]
['text':'!Allocates many elements of size == 1 in a contiguous block','line_number':225,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':226,'multiline':False]
['text':'!the preferred and maximum number is','line_number':227,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':228,'multiline':False]
['text':'!will be assigned to received_size. Memory allocated with this function','line_number':229,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':230,'multiline':False]
['text':'!Deallocates memory previously allocated with allocate_one().','line_number':234,'multiline':False]
['text':'!You should never use deallocate_one to deallocate memory allocated','line_number':235,'multiline':False]
['text':'!with other functions different from allocate_one(). Never throws','line_number':236,'multiline':False]
['text':'!Allocates many elements of size == 1 in a contiguous block','line_number':240,'multiline':False]
['text':'!of memory. The minimum number to be allocated is min_elements,','line_number':241,'multiline':False]
['text':'!the preferred and maximum number is','line_number':242,'multiline':False]
['text':'!preferred_elements. The number of actually allocated elements is','line_number':243,'multiline':False]
['text':'!will be assigned to received_size. Memory allocated with this function','line_number':244,'multiline':False]
['text':'!must be deallocated only with deallocate_one().','line_number':245,'multiline':False]
['text':'!Returns address of mutable object.','line_number':249,'multiline':False]
['text':'!Never throws','line_number':250,'multiline':False]
['text':'!Returns address of non mutable object.','line_number':254,'multiline':False]
['text':'!Never throws','line_number':255,'multiline':False]
['text':'!Constructs an object','line_number':259,'multiline':False]
['text':'!Throws if T's constructor throws','line_number':260,'multiline':False]
['text':'!For backwards compatibility with libraries using C++03 allocators','line_number':261,'multiline':False]
['text':'!Destroys object. Throws if object's','line_number':266,'multiline':False]
['text':'!destructor throws','line_number':267,'multiline':False]
['text':'!Equality test for same type','line_number':273,'multiline':False]
['text':'!of allocator','line_number':274,'multiline':False]
['text':'!Inequality test for same type','line_number':280,'multiline':False]
['text':'!of allocator','line_number':281,'multiline':False]
['text':'namespace interprocess {','line_number':287,'multiline':False]
['text':'#ifndef BOOST_INTERPROCESS_DOXYGEN_INVOKED','line_number':300,'multiline':False]
['text':'namespace boost {','line_number':302,'multiline':False]
['text':'BOOST_INTERPROCESS_ALLOCATOR_HPP','line_number':306,'multiline':False]
