['text':'  Copyright Beman Dawes 2006, 2007','line_number':4,'multiline':False]
['text':'  Copyright Christoper Kohlhoff 2007','line_number':5,'multiline':False]
['text':'  Copyright Peter Dimov 2017-2021','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See accompanying','line_number':8,'multiline':False]
['text':'  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'  See library home page at http://www.boost.org/libs/system','line_number':11,'multiline':False]
['text':'  class error_code','line_number':46,'multiline':False]
['text':'  We want error_code to be a value type that can be copied without slicing','line_number':48,'multiline':False]
['text':'  and without requiring heap allocation, but we also want it to have','line_number':49,'multiline':False]
['text':'  polymorphic behavior based on the error category. This is achieved by','line_number':50,'multiline':False]
['text':'  abstract base class error_category supplying the polymorphic behavior,','line_number':51,'multiline':False]
['text':'  and error_code containing a pointer to an object of a type derived','line_number':52,'multiline':False]
['text':'  from error_category.','line_number':53,'multiline':False]
['text':' 0: default constructed, d1_ value initialized','line_number':79,'multiline':False]
['text':' 1: holds std::error_code in d2_','line_number':80,'multiline':False]
['text':' 2: holds error code in d1_, failed == false','line_number':81,'multiline':False]
['text':' 3: holds error code in d1_, failed == true','line_number':82,'multiline':False]
['text':' >3: pointer to source_location, failed_ in lsb','line_number':83,'multiline':False]
['text':' return category().name();','line_number':90,'multiline':False]
['text':' must match detail::system_error_category::name()','line_number':94,'multiline':False]
['text':' must match detail::interop_error_category::name()','line_number':99,'multiline':False]
['text':' constructors:','line_number':110,'multiline':False]
['text':' modifiers:','line_number':168,'multiline':False]
['text':' observers:','line_number':200,'multiline':False]
['text':' 2^21-9, prime','line_number':215,'multiline':False]
['text':' deprecated?','line_number':241,'multiline':False]
['text':' true if error','line_number':324,'multiline':False]
['text':' true if error','line_number':334,'multiline':False]
['text':' true if no error','line_number':339,'multiline':False]
['text':' relationals:','line_number':357,'multiline':False]
['text':' private equality for use in error_category::equivalent','line_number':361,'multiline':False]
['text':'  the more symmetrical non-member syntax allows enum','line_number':383,'multiline':False]
['text':'  conversions work for both rhs and lhs.','line_number':384,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':'','line_number':517,'multiline':False]
['text':' conversions','line_number':567,'multiline':False]
['text':' This condition must be the same as the one in error_category_impl.hpp','line_number':577,'multiline':False]
['text':' id','line_number':695,'multiline':False]
['text':' value','line_number':700,'multiline':False]
['text':' namespace system','line_number':708,'multiline':False]
['text':' namespace boost','line_number':710,'multiline':False]
['text':' #ifndef BOOST_SYSTEM_DETAIL_ERROR_CODE_HPP_INCLUDED','line_number':716,'multiline':False]
