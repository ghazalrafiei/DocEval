['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2015-2016.','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' See http://www.boost.org/libs/move for documentation.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':10,'multiline':False]
['text':'m_size updated','line_number':100,'multiline':False]
['text':' @cond','line_number':287,'multiline':False]
['text':'
template<typename Unsigned>
inline Unsigned gcd(Unsigned x, Unsigned y)
{
   if(0 == ((x &(x-1)) | (y & (y-1)))){
      return x < y ? x : y;
   }
   else{
      do
      {
         Unsigned t = x % y;
         x = y;
         y = t;
      } while (y);
      return x;
   }
}
','line_number':289,'multiline':True]
['text':'Modified version from "An Optimal In-Place Array Rotation Algorithm", Ching-Kuang Shene','line_number':308,'multiline':False]
['text':'In case all remaining elements are in the same place','line_number':442,'multiline':False]
['text':'(e.g. buffer is exactly the size of the second half','line_number':443,'multiline':False]
['text':'and all elements from the second half are less)','line_number':444,'multiline':False]
['text':' [buf_first, first1) -> buffer','line_number':449,'multiline':False]
['text':' [first1, last1) merge [last1,last2) -> [buf_first,buf_first+(last2-first1))','line_number':450,'multiline':False]
['text':' Elements from buffer are moved to [last2 - (first1-buf_first), last2)','line_number':451,'multiline':False]
['text':' Note: distance(buf_first, first1) >= distance(last1, last2), so no overlapping occurs','line_number':452,'multiline':False]
['text':' [buf_first, first1) -> buffer','line_number':460,'multiline':False]
['text':' [first1, last1) merge [last1,last2) -> [buf_first,buf_first+(last2-first1))','line_number':461,'multiline':False]
['text':' Elements from buffer are swapped to [last2 - (first1-buf_first), last2)','line_number':462,'multiline':False]
['text':' Note: distance(buf_first, first1) >= distance(last1, last2), so no overlapping occurs','line_number':463,'multiline':False]
['text':'In case all remaining elements are in the same place','line_number':493,'multiline':False]
['text':'(e.g. buffer is exactly the size of the first half','line_number':494,'multiline':False]
['text':'and all elements from the second half are less)','line_number':495,'multiline':False]
['text':' [last2, buf_last) - buffer','line_number':500,'multiline':False]
['text':' [first1, last1) merge [last1,last2) -> [first1+(buf_last-last2), buf_last)','line_number':501,'multiline':False]
['text':' Note: distance[last2, buf_last) >= distance[first1, last1), so no overlapping occurs','line_number':502,'multiline':False]
['text':' [last2, buf_last) - buffer','line_number':510,'multiline':False]
['text':' [first1, last1) merge [last1,last2) -> [first1+(buf_last-last2), buf_last)','line_number':511,'multiline':False]
['text':' Note: distance[last2, buf_last) >= distance[first1, last1), so no overlapping occurs','line_number':512,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':520,'multiline':False]
['text':'','line_number':521,'multiline':False]
['text':'                            BUFFERED MERGE','line_number':522,'multiline':False]
['text':'','line_number':523,'multiline':False]
['text':'/////////////////////////////////////////////////////////////////////////////','line_number':524,'multiline':False]
['text':'Complexity: min(len1,len2)^2 + max(len1,len2)','line_number':559,'multiline':False]
['text':'trivial cases','line_number':604,'multiline':False]
['text':'Avoid one recursive call doing a manual tail call elimination on the biggest range','line_number':639,'multiline':False]
['text':'Complexity: NlogN','line_number':660,'multiline':False]
['text':'BOOST_ADAPTIVE_MERGE_NLOGN_MERGE','line_number':677,'multiline':False]
['text':' [r_first, r_last) are already in the right part of the destination range.','line_number':680,'multiline':False]
['text':' Remaining [r_first, r_last) already in the correct place','line_number':705,'multiline':False]
['text':' [first, last) are already in the right part of the destination range.','line_number':717,'multiline':False]
['text':' Remaining [first, last) already in the correct place','line_number':745,'multiline':False]
['text':' @endcond','line_number':748,'multiline':False]
['text':' [first, last) are already in the right part of the destination range.','line_number':750,'multiline':False]
['text':' [r_first, r_last) are already in the right part of the destination range.','line_number':760,'multiline':False]
['text':' [r_first, r_last) are already in the right part of the destination range.','line_number':770,'multiline':False]
['text':' [dest_first, r_first) is uninitialized memory','line_number':771,'multiline':False]
['text':'/ This is a helper function for the merge routines.','line_number':812,'multiline':False]
['text':'Protect against self-move ranges','line_number':825,'multiline':False]
['text':'Protect against self-move ranges','line_number':836,'multiline':False]
['text':'trivial cases','line_number':863,'multiline':False]
['text':' no-op','line_number':865,'multiline':False]
['text':'(len1 < len2)','line_number':883,'multiline':False]
['text':'namespace movelib {','line_number':939,'multiline':False]
['text':'namespace boost {','line_number':940,'multiline':False]
['text':'#define BOOST_MOVE_MERGE_HPP','line_number':946,'multiline':False]
