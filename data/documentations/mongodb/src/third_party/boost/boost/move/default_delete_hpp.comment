['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2014-2014. Distributed under the Boost','line_number':3,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':4,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' See http://www.boost.org/libs/move for documentation.','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':9,'multiline':False]
['text':'For std::size_t,std::nullptr_t','line_number':28,'multiline':False]
['text':'!\file','line_number':30,'multiline':False]
['text':'! Describes the default deleter (destruction policy) of <tt>unique_ptr</tt>: <tt>default_delete</tt>.','line_number':31,'multiline':False]
['text':' @cond','line_number':34,'multiline':False]
['text':'//////////////////////////////////////','line_number':39,'multiline':False]
['text':'//        enable_def_del','line_number':40,'multiline':False]
['text':'//////////////////////////////////////','line_number':41,'multiline':False]
['text':'compatible with a pointer type T*:','line_number':43,'multiline':False]
['text':'When either Y* is convertible to T*','line_number':44,'multiline':False]
['text':'Y is U[N] and T is U cv []','line_number':45,'multiline':False]
['text':'//////////////////////////////////////','line_number':61,'multiline':False]
['text':'//        enable_defdel_call','line_number':62,'multiline':False]
['text':'//////////////////////////////////////','line_number':63,'multiline':False]
['text':'When 2nd is T[N], 1st(*)[N] shall be convertible to T(*)[N]; ','line_number':65,'multiline':False]
['text':'When 2nd is T[],  1st(*)[] shall be convertible to T(*)[]; ','line_number':66,'multiline':False]
['text':'Otherwise, 1st* shall be convertible to 2nd*.','line_number':67,'multiline':False]
['text':'//////////////////////////////////////','line_number':84,'multiline':False]
['text':'//     Some bool literal zero conversion utilities','line_number':85,'multiline':False]
['text':'//////////////////////////////////////','line_number':86,'multiline':False]
['text':'////////////////////////////////////','line_number':128,'multiline':False]
['text':'       missing_virtual_destructor','line_number':129,'multiline':False]
['text':'////////////////////////////////////','line_number':130,'multiline':False]
['text':'namespace move_upd {','line_number':142,'multiline':False]
['text':' @endcond','line_number':143,'multiline':False]
['text':'!The class template <tt>default_delete</tt> serves as the default deleter','line_number':150,'multiline':False]
['text':'!(destruction policy) for the class template <tt>unique_ptr</tt>.','line_number':151,'multiline':False]
['text':'!','line_number':152,'multiline':False]
['text':'! \tparam T The type to be deleted. It may be an incomplete type','line_number':153,'multiline':False]
['text':'! Default constructor.','line_number':157,'multiline':False]
['text':'!','line_number':158,'multiline':False]
['text':'Avoid "defaulted on its first declaration must not have an exception-specification" error for GCC 4.6','line_number':160,'multiline':False]
['text':'! Trivial copy constructor','line_number':171,'multiline':False]
['text':'!','line_number':172,'multiline':False]
['text':'! Trivial assignment','line_number':174,'multiline':False]
['text':'!','line_number':175,'multiline':False]
['text':'! <b>Effects</b>: Constructs a default_delete object from another <tt>default_delete<U></tt> object.','line_number':181,'multiline':False]
['text':'!','line_number':182,'multiline':False]
['text':'! <b>Remarks</b>: This constructor shall not participate in overload resolution unless:','line_number':183,'multiline':False]
['text':'!   - If T is not an array type and U* is implicitly convertible to T*.','line_number':184,'multiline':False]
['text':'!   - If T is an array type and U* is a more CV qualified pointer to remove_extent<T>::type.','line_number':185,'multiline':False]
['text':'If T is not an array type, U derives from T','line_number':191,'multiline':False]
['text':'and T has no virtual destructor, then you have a problem','line_number':192,'multiline':False]
['text':'! <b>Effects</b>: Constructs a default_delete object from another <tt>default_delete<U></tt> object.','line_number':196,'multiline':False]
['text':'!','line_number':197,'multiline':False]
['text':'! <b>Remarks</b>: This constructor shall not participate in overload resolution unless:','line_number':198,'multiline':False]
['text':'!   - If T is not an array type and U* is implicitly convertible to T*.','line_number':199,'multiline':False]
['text':'!   - If T is an array type and U* is a more CV qualified pointer to remove_extent<T>::type.','line_number':200,'multiline':False]
['text':'If T is not an array type, U derives from T','line_number':206,'multiline':False]
['text':'and T has no virtual destructor, then you have a problem','line_number':207,'multiline':False]
['text':'! <b>Effects</b>: if T is not an array type, calls <tt>delete</tt> on static_cast<T*>(ptr),','line_number':212,'multiline':False]
['text':'!   otherwise calls <tt>delete[]</tt> on static_cast<remove_extent<T>::type*>(ptr).','line_number':213,'multiline':False]
['text':'!','line_number':214,'multiline':False]
['text':'! <b>Remarks</b>: If U is an incomplete type, the program is ill-formed.','line_number':215,'multiline':False]
['text':'!   This operator shall not participate in overload resolution unless:','line_number':216,'multiline':False]
['text':'!      - T is not an array type and U* is convertible to T*, OR','line_number':217,'multiline':False]
['text':'!      - T is an array type, and remove_cv<U>::type is the same type as','line_number':218,'multiline':False]
['text':'!         remove_cv<remove_extent<T>::type>::type and U* is convertible to remove_extent<T>::type*.','line_number':219,'multiline':False]
['text':'U must be a complete type','line_number':224,'multiline':False]
['text':'If T is not an array type, U derives from T','line_number':226,'multiline':False]
['text':'and T has no virtual destructor, then you have a problem','line_number':227,'multiline':False]
['text':'! <b>Effects</b>: Same as <tt>(*this)(static_cast<element_type*>(nullptr))</tt>.','line_number':233,'multiline':False]
['text':'!','line_number':234,'multiline':False]
['text':'namespace movelib {','line_number':239,'multiline':False]
['text':'namespace boost{','line_number':240,'multiline':False]
['text':'#ifndef BOOST_MOVE_DEFAULT_DELETE_HPP_INCLUDED','line_number':244,'multiline':False]
