['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2012-2012.','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' See http://www.boost.org/libs/move for documentation.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':10,'multiline':False]
['text':'! \file','line_number':12,'multiline':False]
['text':'copy, copy_backward','line_number':32,'multiline':False]
['text':'uninitialized_copy','line_number':33,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':'                            uninitialized_copy_or_move','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':41,'multiline':False]
['text':' I models InputIterator','line_number':46,'multiline':False]
['text':' F models ForwardIterator','line_number':47,'multiline':False]
['text':'                             ,typename ::boost::move_detail::enable_if< has_move_emulation_enabled<typename I::value_type> >::type* = 0','line_number':49,'multiline':False]
['text':'
template
<typename I,   // I models InputIterator
typename F>   // F models ForwardIterator
F uninitialized_move_move_iterator(I f, I l, F r,
                                   typename ::boost::move_detail::disable_if< has_move_emulation_enabled<typename I::value_type> >::type* = 0)
{
   return std::uninitialized_copy(f.base(), l.base(), r);
}
','line_number':54,'multiline':True]
['text':'namespace move_detail {','line_number':64,'multiline':False]
['text':' I models InputIterator','line_number':67,'multiline':False]
['text':' F models ForwardIterator','line_number':68,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':'                            copy_or_move','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':79,'multiline':False]
['text':' I models InputIterator','line_number':84,'multiline':False]
['text':' F models ForwardIterator','line_number':85,'multiline':False]
['text':'                             ,typename ::boost::move_detail::enable_if< has_move_emulation_enabled<typename I::value_type> >::type* = 0','line_number':87,'multiline':False]
['text':'
template
<typename I,   // I models InputIterator
typename F>   // F models ForwardIterator
F move_move_iterator(I f, I l, F r,
                                   typename ::boost::move_detail::disable_if< has_move_emulation_enabled<typename I::value_type> >::type* = 0)
{
   return std::copy(f.base(), l.base(), r);
}
','line_number':92,'multiline':True]
['text':'namespace move_detail {','line_number':103,'multiline':False]
['text':' I models InputIterator','line_number':106,'multiline':False]
['text':' F models ForwardIterator','line_number':107,'multiline':False]
['text':'/ @endcond','line_number':114,'multiline':False]
['text':'! <b>Effects</b>:','line_number':116,'multiline':False]
['text':'!   \code','line_number':117,'multiline':False]
['text':'!   for (; first != last; ++result, ++first)','line_number':118,'multiline':False]
['text':'!      new (static_cast<void*>(&*result))','line_number':119,'multiline':False]
['text':'!         typename iterator_traits<ForwardIterator>::value_type(*first);','line_number':120,'multiline':False]
['text':'!   \endcode','line_number':121,'multiline':False]
['text':'!','line_number':122,'multiline':False]
['text':'! <b>Returns</b>: result','line_number':123,'multiline':False]
['text':'!','line_number':124,'multiline':False]
['text':'! <b>Note</b>: This function is provided because','line_number':125,'multiline':False]
['text':'!   <i>std::uninitialized_copy</i> from some STL implementations','line_number':126,'multiline':False]
['text':'!    is not compatible with <i>move_iterator</i>','line_number':127,'multiline':False]
['text':' I models InputIterator','line_number':129,'multiline':False]
['text':' F models ForwardIterator','line_number':130,'multiline':False]
['text':'/ @cond','line_number':132,'multiline':False]
['text':'/ @endcond','line_number':134,'multiline':False]
['text':'! <b>Effects</b>:','line_number':140,'multiline':False]
['text':'!   \code','line_number':141,'multiline':False]
['text':'!   for (; first != last; ++result, ++first)','line_number':142,'multiline':False]
['text':'!      *result = *first;','line_number':143,'multiline':False]
['text':'!   \endcode','line_number':144,'multiline':False]
['text':'!','line_number':145,'multiline':False]
['text':'! <b>Returns</b>: result','line_number':146,'multiline':False]
['text':'!','line_number':147,'multiline':False]
['text':'! <b>Note</b>: This function is provided because','line_number':148,'multiline':False]
['text':'!   <i>std::uninitialized_copy</i> from some STL implementations','line_number':149,'multiline':False]
['text':'!    is not compatible with <i>move_iterator</i>','line_number':150,'multiline':False]
['text':' I models InputIterator','line_number':152,'multiline':False]
['text':' F models ForwardIterator','line_number':153,'multiline':False]
['text':'/ @cond','line_number':155,'multiline':False]
['text':'/ @endcond','line_number':157,'multiline':False]
['text':'namespace boost {','line_number':163,'multiline':False]
['text':'#ifndef BOOST_MOVE_ALGORITHM_HPP','line_number':167,'multiline':False]
