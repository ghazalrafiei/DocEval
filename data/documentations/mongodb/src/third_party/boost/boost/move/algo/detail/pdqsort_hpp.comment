['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Orson Peters  2017.','line_number':3,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2017-2018.','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' See http://www.boost.org/libs/move for documentation.','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' This implementation of Pattern-defeating quicksort (pdqsort) was written','line_number':13,'multiline':False]
['text':' by Orson Peters, and discussed in the Boost mailing list:','line_number':14,'multiline':False]
['text':' http://boost.2283326.n4.nabble.com/sort-pdqsort-td4691031.html','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' This implementation is the adaptation by Ion Gaztanaga of code originally in GitHub','line_number':17,'multiline':False]
['text':' with permission from the author to relicense it under the Boost Software License','line_number':18,'multiline':False]
['text':' (see the Boost mailing list for details).','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' The original copyright statement is pasted here for completeness:','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':'  pdqsort.h - Pattern-defeating quicksort.','line_number':23,'multiline':False]
['text':'  Copyright (c) 2015 Orson Peters','line_number':24,'multiline':False]
['text':'  This software is provided 'as-is', without any express or implied warranty. In no event will the','line_number':25,'multiline':False]
['text':'  authors be held liable for any damages arising from the use of this software.','line_number':26,'multiline':False]
['text':'  Permission is granted to anyone to use this software for any purpose, including commercial','line_number':27,'multiline':False]
['text':'  applications, and to alter it and redistribute it freely, subject to the following restrictions:','line_number':28,'multiline':False]
['text':'  1. The origin of this software must not be misrepresented; you must not claim that you wrote the','line_number':29,'multiline':False]
['text':'     original software. If you use this software in a product, an acknowledgment in the product','line_number':30,'multiline':False]
['text':'     documentation would be appreciated but is not required.','line_number':31,'multiline':False]
['text':'  2. Altered source versions must be plainly marked as such, and must not be misrepresented as','line_number':32,'multiline':False]
['text':'     being the original software.','line_number':33,'multiline':False]
['text':'  3. This notice may not be removed or altered from any source distribution.','line_number':34,'multiline':False]
['text':'','line_number':35,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':36,'multiline':False]
['text':'A simple pair implementation to avoid including <utility>','line_number':70,'multiline':False]
['text':' Partitions below this size are sorted using insertion sort.','line_number':86,'multiline':False]
['text':' Partitions above this size use Tukey's ninther to select the pivot.','line_number':89,'multiline':False]
['text':' When we detect an already sorted partition, attempt an insertion sort that allows this','line_number':92,'multiline':False]
['text':' amount of element moves before giving up.','line_number':93,'multiline':False]
['text':' Must be multiple of 8 due to loop unrolling, and < 256 to fit in unsigned char.','line_number':96,'multiline':False]
['text':' Cacheline size, assumes power of two.','line_number':99,'multiline':False]
['text':' Returns floor(log2(n)), assumes n > 0.','line_number':104,'multiline':False]
['text':' Attempts to use insertion sort on [begin, end). Will return false if more than','line_number':112,'multiline':False]
['text':' partial_insertion_sort_limit elements were moved, and abort sorting. Otherwise it will','line_number':113,'multiline':False]
['text':' successfully sort and return true.','line_number':114,'multiline':False]
['text':' Compare first so we can avoid 2 moves for an element already positioned correctly.','line_number':128,'multiline':False]
['text':' Sorts the elements *a, *b and *c using comparison function comp.','line_number':148,'multiline':False]
['text':' Partitions [begin, end) around pivot *begin using comparison function comp. Elements equal','line_number':156,'multiline':False]
['text':' to the pivot are put in the right-hand partition. Returns the position of the pivot after','line_number':157,'multiline':False]
['text':' partitioning and whether the passed sequence already was correctly partitioned. Assumes the','line_number':158,'multiline':False]
['text':' pivot is a median of at least 3 elements and that [begin, end) is at least','line_number':159,'multiline':False]
['text':' insertion_sort_threshold long.','line_number':160,'multiline':False]
['text':' Move pivot into local for speed.','line_number':165,'multiline':False]
['text':' Find the first element greater than or equal than the pivot (the median of 3 guarantees','line_number':171,'multiline':False]
['text':' this exists).','line_number':172,'multiline':False]
['text':' Find the first element strictly smaller than the pivot. We have to guard this search if','line_number':175,'multiline':False]
['text':' there was no element before *first.','line_number':176,'multiline':False]
['text':' If the first pair of elements that should be swapped to partition are the same element,','line_number':180,'multiline':False]
['text':' the passed in sequence already was correctly partitioned.','line_number':181,'multiline':False]
['text':' Keep swapping pairs of elements that are on the wrong side of the pivot. Previously','line_number':184,'multiline':False]
['text':' swapped pairs guard the searches, which is why the first iteration is special-cased','line_number':185,'multiline':False]
['text':' above.','line_number':186,'multiline':False]
['text':' Put the pivot in the right place.','line_number':193,'multiline':False]
['text':' Similar function to the one above, except elements equal to the pivot are put to the left of','line_number':201,'multiline':False]
['text':' the pivot and it doesn't check or return if the passed sequence already was partitioned.','line_number':202,'multiline':False]
['text':' Since this is rarely used (the many equal case), and in that case pdqsort already has O(n)','line_number':203,'multiline':False]
['text':' performance, no block quicksort is applied here for simplicity.','line_number':204,'multiline':False]
['text':' Use a while loop for tail recursion elimination.','line_number':239,'multiline':False]
['text':' Insertion sort is faster for small arrays.','line_number':243,'multiline':False]
['text':' Choose pivot as median of 3 or pseudomedian of 9.','line_number':249,'multiline':False]
['text':' If *(begin - 1) is the end of the right partition of a previous partition operation','line_number':259,'multiline':False]
['text':' there is no element in [begin, end) that is smaller than *(begin - 1). Then if our','line_number':260,'multiline':False]
['text':' pivot compares equal to *(begin - 1) we change strategy, putting equal elements in','line_number':261,'multiline':False]
['text':' the left partition, greater elements in the right partition. We do not have to','line_number':262,'multiline':False]
['text':' recurse on the left partition, since it's sorted (all equal).','line_number':263,'multiline':False]
['text':' Partition and get results.','line_number':269,'multiline':False]
['text':' Check for a highly unbalanced partition.','line_number':274,'multiline':False]
['text':' If we got a highly unbalanced partition we shuffle elements to break many patterns.','line_number':279,'multiline':False]
['text':' If we had too many bad partitions, switch to heapsort to guarantee O(n log n).','line_number':281,'multiline':False]
['text':' If we were decently balanced and we tried to sort an already partitioned','line_number':311,'multiline':False]
['text':' sequence try to use insertion sort.','line_number':312,'multiline':False]
['text':' Sort the left partition first using recursion and do tail recursion elimination for','line_number':317,'multiline':False]
['text':' the right-hand partition.','line_number':318,'multiline':False]
['text':'namespace movelib {','line_number':335,'multiline':False]
['text':'namespace boost {','line_number':336,'multiline':False]
['text':'BOOST_MOVE_ALGO_PDQSORT_HPP','line_number':344,'multiline':False]
