['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2012-2012.','line_number':3,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':4,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' See http://www.boost.org/libs/move for documentation.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':10,'multiline':False]
['text':'! \file','line_number':12,'multiline':False]
['text':'! This header implements macros to define movable classes and','line_number':13,'multiline':False]
['text':'! move-aware functions','line_number':14,'multiline':False]
['text':' @cond','line_number':30,'multiline':False]
['text':'boost_move_no_copy_constructor_or_assign typedef','line_number':32,'multiline':False]
['text':'used to detect noncopyable types for other Boost libraries.','line_number':33,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':'','line_number':51,'multiline':False]
['text':'BOOST_NO_CXX11_DELETED_FUNCTIONS','line_number':52,'multiline':False]
['text':' @endcond','line_number':54,'multiline':False]
['text':'Move emulation rv breaks standard aliasing rules so add workarounds for some compilers','line_number':63,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':72,'multiline':False]
['text':'','line_number':73,'multiline':False]
['text':'                            struct rv','line_number':74,'multiline':False]
['text':'','line_number':75,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':76,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':'                            is_rv','line_number':94,'multiline':False]
['text':'','line_number':95,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':96,'multiline':False]
['text':'Derive from integral constant because some Boost code assummes it has','line_number':102,'multiline':False]
['text':'a "type" internal typedef','line_number':103,'multiline':False]
['text':'namespace move_detail {','line_number':113,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':'                               has_move_emulation_enabled','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':119,'multiline':False]
['text':'namespace boost {','line_number':131,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':'','line_number':139,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':'','line_number':171,'multiline':False]
['text':'','line_number':175,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':'','line_number':183,'multiline':False]
['text':'','line_number':187,'multiline':False]
['text':'namespace move_detail {','line_number':226,'multiline':False]
['text':'namespace boost {','line_number':227,'multiline':False]
['text':'','line_number':231,'multiline':False]
['text':'','line_number':235,'multiline':False]
['text':'','line_number':239,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':242,'multiline':False]
['text':'','line_number':243,'multiline':False]
['text':'                         BOOST_MOVABLE_BUT_NOT_COPYABLE','line_number':244,'multiline':False]
['text':'','line_number':245,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':246,'multiline':False]
['text':'','line_number':255,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':257,'multiline':False]
['text':'','line_number':258,'multiline':False]
['text':'                         BOOST_COPYABLE_AND_MOVABLE','line_number':259,'multiline':False]
['text':'','line_number':260,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':261,'multiline':False]
['text':'','line_number':273,'multiline':False]
['text':'','line_number':282,'multiline':False]
['text':'BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':297,'multiline':False]
['text':'! This macro marks a type as movable but not copyable, disabling copy construction','line_number':299,'multiline':False]
['text':'! and assignment. The user will need to write a move constructor/assignment as explained','line_number':300,'multiline':False]
['text':'! in the documentation to fully write a movable but not copyable class.','line_number':301,'multiline':False]
['text':'','line_number':307,'multiline':False]
['text':'! This macro marks a type as copyable and movable.','line_number':309,'multiline':False]
['text':'! The user will need to write a move constructor/assignment and a copy assignment','line_number':310,'multiline':False]
['text':'! as explained in the documentation to fully write a copyable and movable class.','line_number':311,'multiline':False]
['text':'','line_number':313,'multiline':False]
['text':'','line_number':317,'multiline':False]
['text':'#if !defined(BOOST_MOVE_DOXYGEN_INVOKED)','line_number':318,'multiline':False]
['text':'!This trait yields to a compile-time true boolean if T was marked as','line_number':322,'multiline':False]
['text':'!BOOST_MOVABLE_BUT_NOT_COPYABLE or BOOST_COPYABLE_AND_MOVABLE and','line_number':323,'multiline':False]
['text':'!rvalue references are not available on the platform. False otherwise.','line_number':324,'multiline':False]
['text':'namespace boost{','line_number':337,'multiline':False]
['text':'!This macro is used to achieve portable syntax in move','line_number':339,'multiline':False]
['text':'!constructors and assignments for classes marked as','line_number':340,'multiline':False]
['text':'!BOOST_COPYABLE_AND_MOVABLE or BOOST_MOVABLE_BUT_NOT_COPYABLE','line_number':341,'multiline':False]
['text':'','line_number':344,'multiline':False]
['text':'!This macro is used to achieve portable syntax in move','line_number':346,'multiline':False]
['text':'!constructors and assignments for template classes marked as','line_number':347,'multiline':False]
['text':'!BOOST_COPYABLE_AND_MOVABLE or BOOST_MOVABLE_BUT_NOT_COPYABLE.','line_number':348,'multiline':False]
['text':'!As macros have problems with comma-separated template arguments,','line_number':349,'multiline':False]
['text':'!the template argument must be preceded with BOOST_RV_REF_BEG','line_number':350,'multiline':False]
['text':'!and ended with BOOST_RV_REF_END','line_number':351,'multiline':False]
['text':'','line_number':354,'multiline':False]
['text':'!This macro is used to achieve portable syntax in move','line_number':356,'multiline':False]
['text':'!constructors and assignments for template classes marked as','line_number':357,'multiline':False]
['text':'!BOOST_COPYABLE_AND_MOVABLE or BOOST_MOVABLE_BUT_NOT_COPYABLE.','line_number':358,'multiline':False]
['text':'!As macros have problems with comma-separated template arguments,','line_number':359,'multiline':False]
['text':'!the template argument must be preceded with BOOST_RV_REF_BEG','line_number':360,'multiline':False]
['text':'!and ended with BOOST_RV_REF_END','line_number':361,'multiline':False]
['text':'','line_number':364,'multiline':False]
['text':'!This macro expands to BOOST_RV_REF_BEG if BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':366,'multiline':False]
['text':'!is not defined, empty otherwise','line_number':367,'multiline':False]
['text':'','line_number':370,'multiline':False]
['text':'!This macro expands to BOOST_RV_REF_END if BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':372,'multiline':False]
['text':'!is not defined, empty otherwise','line_number':373,'multiline':False]
['text':'','line_number':376,'multiline':False]
['text':'!This macro is used to achieve portable syntax in copy','line_number':378,'multiline':False]
['text':'!assignment for classes marked as BOOST_COPYABLE_AND_MOVABLE.','line_number':379,'multiline':False]
['text':'','line_number':382,'multiline':False]
['text':'! This macro is used to implement portable perfect forwarding','line_number':384,'multiline':False]
['text':'! as explained in the documentation.','line_number':385,'multiline':False]
['text':'','line_number':388,'multiline':False]
['text':'','line_number':394,'multiline':False]
['text':'','line_number':398,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':'','line_number':406,'multiline':False]
['text':'','line_number':410,'multiline':False]
['text':'','line_number':414,'multiline':False]
['text':'','line_number':418,'multiline':False]
['text':'#if !defined(BOOST_MOVE_DOXYGEN_INVOKED)','line_number':420,'multiline':False]
['text':'!This macro is used to achieve portable move return semantics.','line_number':424,'multiline':False]
['text':'!The C++11 Standard allows implicit move returns when the object to be returned','line_number':425,'multiline':False]
['text':'!is designated by a lvalue and:','line_number':426,'multiline':False]
['text':'!   - The criteria for elision of a copy operation are met OR','line_number':427,'multiline':False]
['text':'!   - The criteria would be met save for the fact that the source object is a function parameter','line_number':428,'multiline':False]
['text':'!','line_number':429,'multiline':False]
['text':'!For C++11 conforming compilers this macros only yields to REF:','line_number':430,'multiline':False]
['text':'! <code>return BOOST_MOVE_RET(RET_TYPE, REF);</code> -> <code>return REF;</code>','line_number':431,'multiline':False]
['text':'!','line_number':432,'multiline':False]
['text':'!For compilers without rvalue references','line_number':433,'multiline':False]
['text':'!this macro does an explicit move if the move emulation is activated','line_number':434,'multiline':False]
['text':'!and the return type (RET_TYPE) is not a reference.','line_number':435,'multiline':False]
['text':'!','line_number':436,'multiline':False]
['text':'!For non-conforming compilers with rvalue references like Visual 2010 & 2012,','line_number':437,'multiline':False]
['text':'!an explicit move is performed if RET_TYPE is not a reference.','line_number':438,'multiline':False]
['text':'!','line_number':439,'multiline':False]
['text':'! <b>Caution</b>: When using this macro in non-conforming or C++03','line_number':440,'multiline':False]
['text':'!compilers, a move will be performed even if the C++11 standard does not allow it','line_number':441,'multiline':False]
['text':'!(e.g. returning a static variable). The user is responsible for using this macro','line_number':442,'multiline':False]
['text':'!only to return local objects that met C++11 criteria.','line_number':443,'multiline':False]
['text':'','line_number':446,'multiline':False]
['text':'!defined(BOOST_MOVE_MSVC_AUTO_MOVE_RETURN_BUG) || defined(BOOST_MOVE_DOXYGEN_INVOKED)','line_number':448,'multiline':False]
['text':'namespace move_detail {','line_number':473,'multiline':False]
['text':'namespace boost {','line_number':474,'multiline':False]
['text':'','line_number':478,'multiline':False]
['text':'!defined(BOOST_MOVE_MSVC_AUTO_MOVE_RETURN_BUG) || defined(BOOST_MOVE_DOXYGEN_INVOKED)','line_number':480,'multiline':False]
['text':'!This macro is used to achieve portable optimal move constructors.','line_number':482,'multiline':False]
['text':'!','line_number':483,'multiline':False]
['text':'!When implementing the move constructor, in C++03 compilers the moved-from argument must be','line_number':484,'multiline':False]
['text':'!cast to the base type before calling `::boost::move()` due to rvalue reference limitations.','line_number':485,'multiline':False]
['text':'!','line_number':486,'multiline':False]
['text':'!In C++11 compilers the cast from a rvalue reference of a derived type to a rvalue reference of','line_number':487,'multiline':False]
['text':'!a base type is implicit.','line_number':488,'multiline':False]
['text':'','line_number':491,'multiline':False]
['text':'!This macro is used to achieve portable optimal move constructors.','line_number':493,'multiline':False]
['text':'!','line_number':494,'multiline':False]
['text':'!In C++03 mode, when accessing a member of type through a rvalue (implemented as a `rv<T> &` type, where rv<T> derives','line_number':495,'multiline':False]
['text':'!from T) triggers a potential UB as the program never creates objects of type rv<T>. This macro casts back `rv<T>` to','line_number':496,'multiline':False]
['text':'!`T&` so that access to member types are done through the original type.','line_number':497,'multiline':False]
['text':'! ','line_number':498,'multiline':False]
['text':'!In C++11 compilers the cast from a rvalue reference of a derived type to a rvalue reference of','line_number':499,'multiline':False]
['text':'!a base type is implicit, so it's a no-op.','line_number':500,'multiline':False]
['text':'','line_number':502,'multiline':False]
['text':'BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':511,'multiline':False]
['text':'#ifndef BOOST_MOVE_CORE_HPP','line_number':515,'multiline':False]
