['text':'////////////////////////////////////////////////////////////////////////////','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':' (C) Copyright 2007, 2008 Steven Watanabe, Joseph Gauterin, Niels Dekker','line_number':3,'multiline':False]
['text':' (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost','line_number':4,'multiline':False]
['text':' Software License, Version 1.0. (See accompanying file','line_number':5,'multiline':False]
['text':' LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':' See http://www.boost.org/libs/container for documentation.','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////////////','line_number':10,'multiline':False]
['text':'Based on Boost.Core's swap.','line_number':23,'multiline':False]
['text':'Many thanks to Steven Watanabe, Joseph Gauterin and Niels Dekker.','line_number':24,'multiline':False]
['text':'for std::size_t','line_number':25,'multiline':False]
['text':'forceinline','line_number':26,'multiline':False]
['text':'Try to avoid including <algorithm>, as it's quite big','line_number':28,'multiline':False]
['text':'Dinkum libraries define std::swap in utility which is lighter than algorithm','line_number':30,'multiline':False]
['text':'For non-GCC compilers, where GNUC version is not very reliable, or old GCC versions','line_number':32,'multiline':False]
['text':'use the good old stl_algobase header, which is quite lightweight','line_number':33,'multiline':False]
['text':'In GCC 4.3 a tiny stl_move.h was created with swap and move utilities','line_number':37,'multiline':False]
['text':'In GCC 4.4 stl_move.h was renamed to move.h','line_number':40,'multiline':False]
['text':'The initial import of libc++ defines std::swap and still there','line_number':44,'multiline':False]
['text':'Fallback for C++ >= 2011','line_number':46,'multiline':False]
['text':'Fallback for C++98/03','line_number':48,'multiline':False]
['text':'for boost::move','line_number':51,'multiline':False]
['text':'namespace boost_move_member_swap','line_number':125,'multiline':False]
['text':'////','line_number':142,'multiline':False]
['text':'use std::swap if argument dependent lookup fails','line_number':160,'multiline':False]
['text':'Use using directive ("using namespace xxx;") instead as some older compilers','line_number':161,'multiline':False]
['text':'don't do ADL with using declarations ("using ns::func;").','line_number':162,'multiline':False]
['text':'namespace boost_move_adl_swap{','line_number':181,'multiline':False]
['text':'namespace boost_move_adl_swap{','line_number':194,'multiline':False]
['text':'#if defined(BOOST_NO_CXX11_RVALUE_REFERENCES)','line_number':196,'multiline':False]
['text':'namespace boost_move_adl_swap {','line_number':208,'multiline':False]
['text':'!defined(BOOST_MOVE_DOXYGEN_INVOKED)','line_number':210,'multiline':False]
['text':'! Exchanges the values of a and b, using Argument Dependent Lookup (ADL) to select a','line_number':214,'multiline':False]
['text':'! specialized swap function if available. If no specialized swap function is available,','line_number':215,'multiline':False]
['text':'! std::swap is used.','line_number':216,'multiline':False]
['text':'!','line_number':217,'multiline':False]
['text':'! <b>Exception</b>: If T uses Boost.Move's move emulation and the compiler has','line_number':218,'multiline':False]
['text':'! no rvalue references then:','line_number':219,'multiline':False]
['text':'!','line_number':220,'multiline':False]
['text':'!   -  If T has a <code>T::swap(T&)</code> member, that member is called.','line_number':221,'multiline':False]
['text':'!   -  Otherwise a move-based swap is called, equivalent to: ','line_number':222,'multiline':False]
['text':'!      <code>T t(::boost::move(x)); x = ::boost::move(y); y = ::boost::move(t);</code>.','line_number':223,'multiline':False]
['text':'! Exchanges elements between range [first1, last1) and another range starting at first2','line_number':230,'multiline':False]
['text':'! using boost::adl_move_swap.','line_number':231,'multiline':False]
['text':'! ','line_number':232,'multiline':False]
['text':'! Parameters:','line_number':233,'multiline':False]
['text':'!   first1, last1   -   the first range of elements to swap','line_number':234,'multiline':False]
['text':'!   first2   -   beginning of the second range of elements to swap','line_number':235,'multiline':False]
['text':'!','line_number':236,'multiline':False]
['text':'! Type requirements:','line_number':237,'multiline':False]
['text':'!   - ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.','line_number':238,'multiline':False]
['text':'!   - The types of dereferenced ForwardIt1 and ForwardIt2 must meet the','line_number':239,'multiline':False]
['text':'!     requirements of Swappable','line_number':240,'multiline':False]
['text':'!','line_number':241,'multiline':False]
['text':'! Return value: Iterator to the element past the last element exchanged in the range','line_number':242,'multiline':False]
['text':'! beginning with first2.','line_number':243,'multiline':False]
['text':'namespace boost{','line_number':270,'multiline':False]
['text':'#ifndef BOOST_MOVE_ADL_MOVE_SWAP_HPP','line_number':272,'multiline':False]
