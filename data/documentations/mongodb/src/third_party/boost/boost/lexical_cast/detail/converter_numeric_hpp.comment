['text':' Copyright Kevlin Henney, 2000-2005.','line_number':1,'multiline':False]
['text':' Copyright Alexander Nasonov, 2006-2010.','line_number':2,'multiline':False]
['text':' Copyright Antony Polukhin, 2011-2022.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' what:  lexical_cast custom keyword cast','line_number':9,'multiline':False]
['text':' who:   contributed by Kevlin Henney,','line_number':10,'multiline':False]
['text':'        enhanced with contributions from Terje Slettebo,','line_number':11,'multiline':False]
['text':'        with additional fixes and suggestions from Gennaro Prota,','line_number':12,'multiline':False]
['text':'        Beman Dawes, Dave Abrahams, Daryle Walker, Peter Dimov,','line_number':13,'multiline':False]
['text':'        Alexander Nasonov, Antony Polukhin, Justin Viiret, Michael Hofmann,','line_number':14,'multiline':False]
['text':'        Cheng Yang, Matthew Bradbury, David W. Birdsall, Pavel Korzh and other Boosters','line_number':15,'multiline':False]
['text':' when:  November 2000, March 2003, June 2005, June 2006, March 2011 - 2016','line_number':16,'multiline':False]
['text':'is_ok','line_number':72,'multiline':True]
['text':'
 * lexical_cast_dynamic_num follows the rules:
 * 1) If Source can be converted to Target without precision loss and
 * without overflows, then assign Source to Target and return
 *
 * 2) If Source is less than 0 and Target is an unsigned integer,
 * then negate Source, check the requirements of rule 1) and if
 * successful, assign static_casted Source to Target and return
 *
 * 3) Otherwise throw a bad_lexical_cast exception
 *
 *
 * Rule 2) required because boost::lexical_cast has the behavior of
 * stringstream, which uses the rules of scanf for conversions. And
 * in the C99 standard for unsigned input value minus sign is
 * optional, so if a negative number is read, no errors will arise
 * and the result will be the two's complement.
 ','line_number':137,'multiline':True]
['text':' namespace boost::detail','line_number':172,'multiline':False]
['text':' BOOST_LEXICAL_CAST_DETAIL_CONVERTER_NUMERIC_HPP','line_number':174,'multiline':False]
