['text':' Copyright Kevlin Henney, 2000-2005.','line_number':1,'multiline':False]
['text':' Copyright Alexander Nasonov, 2006-2010.','line_number':2,'multiline':False]
['text':' Copyright Antony Polukhin, 2011-2022.','line_number':3,'multiline':False]
['text':'','line_number':4,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0. (See','line_number':5,'multiline':False]
['text':' accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' what:  lexical_cast custom keyword cast','line_number':9,'multiline':False]
['text':' who:   contributed by Kevlin Henney,','line_number':10,'multiline':False]
['text':'        enhanced with contributions from Terje Slettebo,','line_number':11,'multiline':False]
['text':'        with additional fixes and suggestions from Gennaro Prota,','line_number':12,'multiline':False]
['text':'        Beman Dawes, Dave Abrahams, Daryle Walker, Peter Dimov,','line_number':13,'multiline':False]
['text':'        Alexander Nasonov, Antony Polukhin, Justin Viiret, Michael Hofmann,','line_number':14,'multiline':False]
['text':'        Cheng Yang, Matthew Bradbury, David W. Birdsall, Pavel Korzh and other Boosters','line_number':15,'multiline':False]
['text':' when:  November 2000, March 2003, June 2005, June 2006, March 2011 - 2014','line_number':16,'multiline':False]
['text':' Getting error at this point means, that your STL library is old/lame/misconfigured.','line_number':41,'multiline':False]
['text':' If nothing can be done with STL library, define BOOST_LEXICAL_CAST_ASSUME_C_LOCALE,','line_number':42,'multiline':False]
['text':' but beware: lexical_cast will understand only 'C' locale delimeters and thousands','line_number':43,'multiline':False]
['text':' separators.','line_number':44,'multiline':False]
['text':' lcast_to_unsigned','line_number':57,'multiline':False]
['text':' lcast_put_unsigned','line_number':69,'multiline':False]
['text':' Check that ulimited group is unreachable:','line_number':110,'multiline':False]
['text':' current group number','line_number':114,'multiline':False]
['text':' suppressing warnings','line_number':146,'multiline':False]
['text':' lcast_ret_unsigned','line_number':156,'multiline':False]
['text':' GCC when used with flag -std=c++0x may not have std::numeric_limits','line_number':173,'multiline':False]
['text':' specializations for __int128 and unsigned __int128 types.','line_number':174,'multiline':False]
['text':' Try compilation with -std=gnu++0x or -std=gnu++11.','line_number':175,'multiline':False]
['text':'','line_number':176,'multiline':False]
['text':' http://gcc.gnu.org/bugzilla/show_bug.cgi?id=40856','line_number':177,'multiline':False]
['text':' According to Programming languages - C++
                 * we MUST check for correct grouping
                 ','line_number':207,'multiline':True]
['text':'|| begin == end ) return false;','line_number':226,'multiline':False]
['text':'
                             * According to Programming languages - C++
                             * Digit grouping is checked. That is, the positions of discarded
                             * separators is examined for consistency with
                             * use_facet<numpunct<charT> >(loc ).grouping()
                             *
                             * BUT what if there is no separators at all and grouping()
                             * is not empty? Well, we have no extraced separators, so we
                             * won`t check them for consistency. This will allow us to
                             * work with "C" locale from other locales
                             ','line_number':228,'multiline':True]
['text':'for','line_number':246,'multiline':True]
['text':' Iteration that does not care about grouping/separators and assumes that all','line_number':253,'multiline':False]
['text':' input characters are digits','line_number':254,'multiline':False]
['text':' We must correctly handle situations like `000000000000000000000000000001`.','line_number':265,'multiline':False]
['text':' So we take care of overflow only if `dig_value` is not '0'.','line_number':266,'multiline':False]
['text':' checking for correct digit','line_number':267,'multiline':False]
['text':' checking for overflow of ...','line_number':268,'multiline':False]
['text':' ... multiplier','line_number':269,'multiline':False]
['text':' ... subvalue','line_number':270,'multiline':False]
['text':' ... whole expression','line_number':271,'multiline':False]
['text':' namespace boost','line_number':291,'multiline':False]
['text':' BOOST_LEXICAL_CAST_DETAIL_LCAST_UNSIGNED_CONVERTERS_HPP','line_number':293,'multiline':False]
