['text':' -----------------------------------------------------------','line_number':1,'multiline':False]
['text':'','line_number':2,'multiline':False]
['text':'   Copyright (c) 2001-2002 Chuck Allison and Jeremy Siek','line_number':3,'multiline':False]
['text':'        Copyright (c) 2003-2006, 2008 Gennaro Prota','line_number':4,'multiline':False]
['text':'             Copyright (c) 2014 Ahmed Charles','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':' Copyright (c) 2014 Glen Joseph Fernandes','line_number':7,'multiline':False]
['text':' (glenjofe@gmail.com)','line_number':8,'multiline':False]
['text':'','line_number':9,'multiline':False]
['text':' Copyright (c) 2014 Riccardo Marcangelo','line_number':10,'multiline':False]
['text':'             Copyright (c) 2018 Evgeny Shulgin','line_number':11,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':13,'multiline':False]
['text':'    (See accompanying file LICENSE_1_0.txt or copy at','line_number':14,'multiline':False]
['text':'          http://www.boost.org/LICENSE_1_0.txt)','line_number':15,'multiline':False]
['text':'','line_number':16,'multiline':False]
['text':' -----------------------------------------------------------','line_number':17,'multiline':False]
['text':' used to implement append(Iter, Iter)','line_number':26,'multiline':False]
['text':' for CHAR_BIT','line_number':28,'multiline':False]
['text':' for isspace','line_number':38,'multiline':False]
['text':' Portability note: member function templates are defined inside','line_number':61,'multiline':False]
['text':' this class definition to avoid problems with VC++. Similarly,','line_number':62,'multiline':False]
['text':' with the member functions of nested classes.','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' [October 2008: the note above is mostly historical; new versions','line_number':65,'multiline':False]
['text':' of VC++ are likely able to digest a more drinking form of the','line_number':66,'multiline':False]
['text':' code; but changing it now is probably not worth the risks...]','line_number':67,'multiline':False]
['text':' A proxy class to simulate lvalues of bit type.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' the one and only non-copy ctor','line_number':91,'multiline':False]
['text':' left undefined','line_number':99,'multiline':False]
['text':' copy constructor: compiler generated','line_number':103,'multiline':False]
['text':' for b[i] = x','line_number':110,'multiline':False]
['text':' for b[i] = b[j]','line_number':111,'multiline':False]
['text':' constructors, etc.','line_number':130,'multiline':False]
['text':' WARNING: you should avoid using this constructor.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':'  A conversion from string is, in most cases, formatting,','line_number':143,'multiline':False]
['text':'  and should be performed by using operator>>.','line_number':144,'multiline':False]
['text':'','line_number':145,'multiline':False]
['text':' NOTE:','line_number':146,'multiline':False]
['text':'  Leave the parentheses around std::basic_string<CharT, Traits, Alloc>::npos.','line_number':147,'multiline':False]
['text':'  g++ 3.2 requires them and probably the standard will - see core issue 325','line_number':148,'multiline':False]
['text':' NOTE 2:','line_number':149,'multiline':False]
['text':'  split into two constructors because of bugs in MSVC 6.0sp5 with STLport','line_number':150,'multiline':False]
['text':' The first bit in *first is the least significant bit, and the','line_number':177,'multiline':False]
['text':' last bit in the block just before *last is the most significant bit.','line_number':178,'multiline':False]
['text':' copy constructor','line_number':217,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':228,'multiline':False]
['text':' size changing operations','line_number':232,'multiline':False]
['text':' could use vector<>::insert()','line_number':254,'multiline':False]
['text':' strong guarantee','line_number':267,'multiline':False]
['text':' bitset operations','line_number':276,'multiline':False]
['text':' basic bit operations','line_number':286,'multiline':False]
['text':' = true ','line_number':287,'multiline':True]
['text':' default would make it ambiguous','line_number':287,'multiline':False]
['text':' subscript','line_number':304,'multiline':False]
['text':' lookup','line_number':324,'multiline':False]
['text':' lexicographical comparison','line_number':330,'multiline':False]
['text':' forward declaration for optional zero-copy serialization support','line_number':365,'multiline':False]
['text':' Functions for operations on ranges','line_number':402,'multiline':False]
['text':',
                                 const Allocator& alloc','line_number':468,'multiline':True]
['text':'if (num_bits == 0)','line_number':481,'multiline':False]
['text':'    return;','line_number':482,'multiline':False]
['text':' zero out all bits at pos >= num_bits, if any;','line_number':484,'multiline':False]
['text':' note that: num_bits == 0 implies value == 0','line_number':485,'multiline':False]
['text':' helper for stream >>','line_number':515,'multiline':False]
['text':' Supplies to the lack of an efficient append at the less','line_number':516,'multiline':False]
['text':' significant end: bits are actually appended "at left" but','line_number':517,'multiline':False]
['text':' rearranged in the destructor. From the perspective of','line_number':518,'multiline':False]
['text':' client code everything works *as if* dynamic_bitset<> had','line_number':519,'multiline':False]
['text':' an append_at_right() function (eventually throwing the same','line_number':520,'multiline':False]
['text':' exceptions as push_back) except that the function is in fact','line_number':521,'multiline':False]
['text':' called bit_appender::do_append().','line_number':522,'multiline':False]
['text':'','line_number':523,'multiline':False]
['text':' not implemented','line_number':529,'multiline':False]
['text':' reverse the order of blocks, shift','line_number':536,'multiline':False]
['text':' if needed, and then resize','line_number':537,'multiline':False]
['text':'','line_number':538,'multiline':False]
['text':' doesn't enlarge, so can't throw','line_number':543,'multiline':False]
['text':' Global Functions:','line_number':581,'multiline':False]
['text':' comparison','line_number':583,'multiline':False]
['text':' stream operators','line_number':600,'multiline':False]
['text':' bitset operations','line_number':620,'multiline':False]
['text':' namespace scope swap','line_number':641,'multiline':False]
['text':' PRE: distance(first, last) <= numblocks()','line_number':662,'multiline':False]
['text':'=============================================================================','line_number':666,'multiline':False]
['text':' dynamic_bitset implementation','line_number':667,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':670,'multiline':False]
['text':' constructors, etc.','line_number':671,'multiline':False]
['text':' copy constructor','line_number':689,'multiline':False]
['text':' no throw','line_number':707,'multiline':False]
['text':' Required so that assert(m_check_invariants()); works.','line_number':729,'multiline':False]
['text':' Required so that assert(m_check_invariants()); works.','line_number':742,'multiline':False]
['text':' BOOST_NO_CXX11_RVALUE_REFERENCES','line_number':748,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':757,'multiline':False]
['text':' size changing operations','line_number':758,'multiline':False]
['text':' strong guarantee','line_number':762,'multiline':False]
['text':' s.g. (copy)','line_number':771,'multiline':False]
['text':' At this point:','line_number':775,'multiline':False]
['text':'','line_number':776,'multiline':False]
['text':'  - if the buffer was shrunk, we have nothing more to do,','line_number':777,'multiline':False]
['text':'    except a call to m_zero_unused_bits()','line_number':778,'multiline':False]
['text':'','line_number':779,'multiline':False]
['text':'  - if it was enlarged, all the (used) bits in the new blocks have','line_number':780,'multiline':False]
['text':'    the correct value, but we have not yet touched those bits, if','line_number':781,'multiline':False]
['text':'    any, that were 'unused bits' before enlarging: if value == true,','line_number':782,'multiline':False]
['text':'    they must be set.','line_number':783,'multiline':False]
['text':' Set them.','line_number':791,'multiline':False]
['text':' no throw','line_number':804,'multiline':False]
['text':' strong guarantee','line_number':838,'multiline':False]
['text':' the buffer is empty, or all blocks are filled','line_number':843,'multiline':False]
['text':' m_bits.size() >= 2','line_number':848,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':857,'multiline':False]
['text':' bitset operations','line_number':858,'multiline':False]
['text':'m_zero_unused_bits();','line_number':876,'multiline':False]
['text':'m_zero_unused_bits();','line_number':887,'multiline':False]
['text':'m_zero_unused_bits();','line_number':898,'multiline':False]
['text':'','line_number':902,'multiline':False]
['text':' NOTE:','line_number':903,'multiline':False]
['text':'  Note that the 'if (r != 0)' is crucial to avoid undefined','line_number':904,'multiline':False]
['text':'  behavior when the left hand operand of >> isn't promoted to a','line_number':905,'multiline':False]
['text':'  wider type (because rs would be too large).','line_number':906,'multiline':False]
['text':'','line_number':907,'multiline':False]
['text':'else','line_number':914,'multiline':False]
['text':' num_blocks() is >= 1','line_number':917,'multiline':False]
['text':' div is <= last','line_number':918,'multiline':False]
['text':' zero out div blocks at the less significant end','line_number':939,'multiline':False]
['text':' zero out any 1 bit that flowed into the unused part','line_number':942,'multiline':False]
['text':' thanks to Lester Gong','line_number':943,'multiline':False]
['text':'','line_number':953,'multiline':False]
['text':' NOTE:','line_number':954,'multiline':False]
['text':'  see the comments to operator <<=','line_number':955,'multiline':False]
['text':'','line_number':956,'multiline':False]
['text':'else','line_number':962,'multiline':False]
['text':' num_blocks() is >= 1','line_number':965,'multiline':False]
['text':' div is <= last','line_number':966,'multiline':False]
['text':' r bits go to zero','line_number':978,'multiline':False]
['text':' note the '<=': the last iteration 'absorbs'','line_number':986,'multiline':False]
['text':' b[last-div] = b[last] >> 0;','line_number':987,'multiline':False]
['text':' div blocks are zero filled at the most significant end','line_number':992,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1017,'multiline':False]
['text':' basic bit operations','line_number':1018,'multiline':False]
['text':' 8.x','line_number':1066,'multiline':False]
['text':' CodeWarrior 8 generates incorrect code when the &=~ is compiled,','line_number':1067,'multiline':False]
['text':' use the |^ variation instead.. <grafik>','line_number':1068,'multiline':False]
['text':' NOTE: Explicit qualification of "bits_per_block"','line_number':1198,'multiline':False]
['text':'       breaks compilation on gcc 4.3.3','line_number':1199,'multiline':False]
['text':' NOTE: Explicitly qualifying "bits_per_block" to workaround','line_number':1202,'multiline':False]
['text':'       regressions of gcc 3.4.x','line_number':1203,'multiline':False]
['text':' Windows popcount is effective starting from the unsigned short type','line_number':1212,'multiline':False]
['text':' GCC popcount is effective starting from the unsigned int type','line_number':1215,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1230,'multiline':False]
['text':' conversions','line_number':1231,'multiline':False]
['text':' Note that this function may access (when','line_number':1245,'multiline':False]
['text':' dump_all == true) bits beyond position size() - 1','line_number':1246,'multiline':False]
['text':' A comment similar to the one about the constructor from','line_number':1264,'multiline':False]
['text':' basic_string can be done here. Thanks to James Kanze for','line_number':1265,'multiline':False]
['text':' making me (Gennaro) realize this important separation of','line_number':1266,'multiline':False]
['text':' concerns issue, as well as many things about i18n.','line_number':1267,'multiline':False]
['text':'','line_number':1268,'multiline':False]
['text':' Differently from to_string this function dumps out','line_number':1277,'multiline':False]
['text':' every bit of the internal representation (may be','line_number':1278,'multiline':False]
['text':' useful for debugging purposes)','line_number':1279,'multiline':False]
['text':'','line_number':1280,'multiline':False]
['text':' =dump_all','line_number':1285,'multiline':True]
['text':' note how this copies *all* bits, including the','line_number':1293,'multiline':False]
['text':' unused ones in the last block (which are zero)','line_number':1294,'multiline':False]
['text':' convention','line_number':1304,'multiline':False]
['text':' Check for overflows. This may be a performance burden on very','line_number':1306,'multiline':False]
['text':' large bitsets but is required by the specification, sorry','line_number':1307,'multiline':False]
['text':' Ok, from now on we can be sure there's no "on" bit','line_number':1312,'multiline':False]
['text':' beyond the "allowed" positions','line_number':1313,'multiline':False]
['text':' Semantics of vector<>::max_size() aren't very clear','line_number':1350,'multiline':False]
['text':' (see lib issue 197) and many library implementations','line_number':1351,'multiline':False]
['text':' simply return dummy values, _unrelated_ to the underlying','line_number':1352,'multiline':False]
['text':' allocator.','line_number':1353,'multiline':False]
['text':'','line_number':1354,'multiline':False]
['text':' Given these problems, I was tempted to not provide this','line_number':1355,'multiline':False]
['text':' function at all but the user could need it if he provides','line_number':1356,'multiline':False]
['text':' his own allocator.','line_number':1357,'multiline':False]
['text':'','line_number':1358,'multiline':False]
['text':' not a subset at all','line_number':1419,'multiline':False]
['text':' --------------------------------','line_number':1439,'multiline':False]
['text':' lookup','line_number':1440,'multiline':False]
['text':' look for the first bit "on", starting','line_number':1442,'multiline':False]
['text':' from the block with index first_block','line_number':1443,'multiline':False]
['text':'','line_number':1444,'multiline':False]
['text':' not found','line_number':1455,'multiline':False]
['text':' shift bits upto one immediately after current','line_number':1483,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1495,'multiline':False]
['text':' comparison','line_number':1496,'multiline':False]
['text':'    assert(a.size() == b.size());','line_number':1517,'multiline':False]
['text':'    assert(a.size() == b.size());','line_number':1566,'multiline':False]
['text':'if (a.size() == 0)','line_number':1589,'multiline':False]
['text':'  return false;','line_number':1590,'multiline':False]
['text':' Since we are storing the most significant bit','line_number':1592,'multiline':False]
['text':' at pos == size() - 1, we need to do the comparisons in reverse.','line_number':1593,'multiline':False]
['text':'','line_number':1594,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1629,'multiline':False]
['text':' hash operations','line_number':1630,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1640,'multiline':False]
['text':' stream operations','line_number':1641,'multiline':False]
['text':' NOTE: since this is aimed at "classic" iostreams, exception','line_number':1648,'multiline':False]
['text':' masks on the stream are not supported. The library that','line_number':1649,'multiline':False]
['text':' ships with gcc 2.95 has an exceptions() member function but','line_number':1650,'multiline':False]
['text':' nothing is actually implemented; not even the class ios::failure.','line_number':1651,'multiline':False]
['text':'try','line_number':1660,'multiline':False]
['text':' careful: os.width() is signed (and can be < 0)','line_number':1665,'multiline':False]
['text':' if needed fill at left; pad is decresed along the way','line_number':1671,'multiline':False]
['text':' output the bitset','line_number':1681,'multiline':False]
['text':' if needed fill at right','line_number':1692,'multiline':False]
['text':' if opfx','line_number':1704,'multiline':False]
['text':' assume this does NOT throw','line_number':1707,'multiline':False]
['text':' careful: os.width() is signed (and can be < 0)','line_number':1737,'multiline':False]
['text':' if needed fill at left; pad is decreased along the way','line_number':1744,'multiline':False]
['text':' output the bitset','line_number':1754,'multiline':False]
['text':' if needed fill at right','line_number':1766,'multiline':False]
['text':' see std 27.6.1.1/4','line_number':1778,'multiline':False]
['text':' may throw exception','line_number':1789,'multiline':False]
['text':' A sentry-like class that calls isfx in its destructor.','line_number':1798,'multiline':False]
['text':' "Necessary" because bit_appender::do_append may throw.','line_number':1799,'multiline':False]
['text':' Extractor for classic IO streams (libstdc++ < 3.0)','line_number':1814,'multiline':False]
['text':' ----------------------------------------------------//','line_number':1815,'multiline':False]
['text':'  It's assumed that the stream buffer functions, and','line_number':1816,'multiline':False]
['text':'  the stream's setstate() _cannot_ throw.','line_number':1817,'multiline':False]
['text':' skips whitespaces','line_number':1824,'multiline':False]
['text':' non digit character','line_number':1841,'multiline':False]
['text':' assume this can't throw','line_number':1848,'multiline':False]
['text':' for','line_number':1854,'multiline':False]
['text':' may throw','line_number':1861,'multiline':False]
['text':' BOOST_OLD_IOSTREAMS','line_number':1866,'multiline':False]
['text':' skips whitespaces','line_number':1883,'multiline':False]
['text':' in accordance with prop. resol. of lib DR 303 [last checked 4 Feb 2004]','line_number':1886,'multiline':False]
['text':' non digit character','line_number':1907,'multiline':False]
['text':' for','line_number':1913,'multiline':False]
['text':' catches from stream buf, or from vector:','line_number':1916,'multiline':False]
['text':'','line_number':1917,'multiline':False]
['text':' bits_stored bits have been extracted and stored, and','line_number':1918,'multiline':False]
['text':' either no further character is extractable or we can't','line_number':1919,'multiline':False]
['text':' append to the underlying vector (out of memory)','line_number':1920,'multiline':False]
['text':' see std 27.6.1.1/4','line_number':1922,'multiline':False]
['text':'|| !cerberos','line_number':1935,'multiline':True]
['text':' may throw','line_number':1938,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1948,'multiline':False]
['text':' bitset operations','line_number':1949,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1987,'multiline':False]
['text':' namespace scope swap','line_number':1988,'multiline':False]
['text':' no throw','line_number':1993,'multiline':False]
['text':'-----------------------------------------------------------------------------','line_number':1999,'multiline':False]
['text':' private (on conforming compilers) member functions','line_number':2000,'multiline':False]
['text':' gives a reference to the highest block','line_number':2011,'multiline':False]
['text':'','line_number':2012,'multiline':False]
['text':' gives a const-reference to the highest block','line_number':2020,'multiline':False]
['text':'','line_number':2021,'multiline':False]
['text':' Do nothing in case of zero length','line_number':2037,'multiline':False]
['text':' Use an additional asserts in order to detect size_type overflow','line_number':2041,'multiline':False]
['text':' For example: pos = 10, len = size_type_limit - 2, pos + len = 7','line_number':2042,'multiline':False]
['text':' In case of overflow, 'pos + len' is always smaller than 'len'','line_number':2043,'multiline':False]
['text':' Start and end blocks of the [pos; pos + len - 1] sequence','line_number':2046,'multiline':False]
['text':' Filling only a sub-block of a block','line_number':2054,'multiline':False]
['text':' Check if the corner blocks won't be fully filled with 'val'','line_number':2058,'multiline':False]
['text':' Blocks that will be filled with ~0 or 0 at once','line_number':2063,'multiline':False]
['text':' Fill the first block from the 'first' bit index to the end','line_number':2071,'multiline':False]
['text':' Fill the last block from the start to the 'last' bit index','line_number':2077,'multiline':False]
['text':' If size() is not a multiple of bits_per_block','line_number':2087,'multiline':False]
['text':' then not all the bits in the last block are used.','line_number':2088,'multiline':False]
['text':' This function resets the unused bits (convenient','line_number':2089,'multiline':False]
['text':' for the implementation of many member functions)','line_number':2090,'multiline':False]
['text':'','line_number':2091,'multiline':False]
['text':' if != 0 this is the number of bits used in the last block','line_number':2097,'multiline':False]
['text':' check class invariants','line_number':2104,'multiline':False]
['text':' namespace boost','line_number':2122,'multiline':False]
['text':' std::hash support','line_number':2126,'multiline':False]
['text':' include guard','line_number':2145,'multiline':False]
