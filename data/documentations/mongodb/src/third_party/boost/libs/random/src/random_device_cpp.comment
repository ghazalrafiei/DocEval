['text':' boost random_device.cpp implementation
 *
 * Copyright Jens Maurer 2000
 * Copyright Steven Watanabe 2010-2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * $Id$
 *
 ','line_number':1,'multiline':True]
['text':'  A definition is required even for integral static constants','line_number':25,'multiline':False]
['text':' WinRT target.','line_number':29,'multiline':False]
['text':' std::invalid_argument','line_number':44,'multiline':False]
['text':' mingw's wincrypt.h appears to be missing some things','line_number':58,'multiline':False]
['text':' Find the type of a specific provider','line_number':92,'multiline':False]
['text':' the default is the unlimited capacity device, using some secure hash','line_number':153,'multiline':False]
['text':' try "/dev/random" for blocking when the entropy pool has drained','line_number':154,'multiline':False]
['text':'
 * This uses the POSIX interface for unbuffered reading.
 * Using buffered std::istream would consume entropy which may
 * not actually be used.  Entropy is a precious good we avoid
 * wasting.
 ','line_number':158,'multiline':True]
['text':' I have severe difficulty to get the POSIX includes to work with','line_number':166,'multiline':False]
['text':' -fhonor-std and Dietmar Kuhl's standard C++ library.  Hack around that','line_number':167,'multiline':False]
['text':' problem for now.','line_number':168,'multiline':False]
['text':' open','line_number':178,'multiline':False]
['text':' read, close','line_number':179,'multiline':False]
['text':' errno','line_number':182,'multiline':False]
['text':' strerror','line_number':183,'multiline':False]
['text':' std::invalid_argument','line_number':184,'multiline':False]
['text':' BOOST_WINDOWS','line_number':227,'multiline':False]
