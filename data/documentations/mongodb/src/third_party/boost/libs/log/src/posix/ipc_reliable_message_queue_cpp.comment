['text':'
 *                 Copyright Lingxi Li 2015.
 *              Copyright Andrey Semashev 2016.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   posix/ipc_reliable_message_queue.cpp
 * \author Lingxi Li
 * \author Andrey Semashev
 * \date   17.11.2015
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 *
 * This file provides an interprocess message queue implementation on POSIX platforms.
 ','line_number':8,'multiline':True]
['text':'! Message queue implementation data','line_number':68,'multiline':False]
['text':'! Header of an allocation block within the message queue. Placed at the beginning of the block within the shared memory segment.','line_number':72,'multiline':False]
['text':' Element data alignment, in bytes','line_number':75,'multiline':False]
['text':'! Size of the element data, in bytes','line_number':78,'multiline':False]
['text':'! Returns the block header overhead, in bytes','line_number':81,'multiline':False]
['text':'! Returns a pointer to the element data','line_number':87,'multiline':False]
['text':'! Header of the message queue. Placed at the beginning of the shared memory segment.','line_number':94,'multiline':False]
['text':' Increment this constant whenever you change the binary layout of the queue (apart from this header structure)','line_number':97,'multiline':False]
['text':' !!! Whenever you add/remove members in this structure, also modify get_abi_tag() function accordingly !!!','line_number':100,'multiline':False]
['text':'! A tag value to ensure the correct binary layout of the message queue data structures. Must be placed first and always have a fixed size and alignment.','line_number':102,'multiline':False]
['text':'! Padding to protect against alignment changes in Boost.Atomic. Don't use BOOST_ALIGNMENT to ensure portability.','line_number':104,'multiline':False]
['text':'! Reference counter. Also acts as a flag indicating that the queue is constructed (i.e. the queue is constructed when the counter is not 0).','line_number':106,'multiline':False]
['text':'! Number of allocation blocks in the queue.','line_number':108,'multiline':False]
['text':'! Size of an allocation block, in bytes.','line_number':110,'multiline':False]
['text':'! Mutex for protecting queue data structures.','line_number':112,'multiline':False]
['text':'! Condition variable used to block readers when the queue is empty.','line_number':114,'multiline':False]
['text':'! Condition variable used to block writers when the queue is full.','line_number':116,'multiline':False]
['text':'! The current number of allocated blocks in the queue.','line_number':118,'multiline':False]
['text':'! The current writing position (allocation block index).','line_number':120,'multiline':False]
['text':'! The current reading position (allocation block index).','line_number':122,'multiline':False]
['text':' Must be initialized last. m_ref_count is zero-initialized initially.','line_number':133,'multiline':False]
['text':'! Returns the header structure ABI tag','line_number':137,'multiline':False]
['text':' This FOURCC identifies the queue type','line_number':140,'multiline':False]
['text':' This FOURCC identifies the queue implementation','line_number':143,'multiline':False]
['text':' We will use these constants to align pointers','line_number':147,'multiline':False]
['text':' The members in the sequence below must be enumerated in the same order as they are declared in the header structure.','line_number':151,'multiline':False]
['text':' The ABI tag is supposed change whenever a member changes size or offset from the beginning of the header.','line_number':152,'multiline':False]
['text':'! Returns an element header at the specified index','line_number':175,'multiline':False]
['text':'! Shared memory object','line_number':189,'multiline':False]
['text':'! Shared memory mapping into the process address space','line_number':191,'multiline':False]
['text':'! Queue overflow handling policy','line_number':193,'multiline':False]
['text':'! The mask for selecting bits that constitute size values from 0 to (block_size - 1)','line_number':195,'multiline':False]
['text':'! The number of the bit set in block_size (i.e. log base 2 of block_size)','line_number':197,'multiline':False]
['text':'! The flag indicates that stop has been requested','line_number':199,'multiline':False]
['text':'! Queue shared memory object name','line_number':202,'multiline':False]
['text':'! The total number of loop iterations in \c adopt_region for waiting for the region initialization to complete','line_number':205,'multiline':False]
['text':'! Threshold of the number of loop iterations in \c adopt_region for using pause instructions for yielding','line_number':207,'multiline':False]
['text':'! Threshold of the number of loop iterations in \c adopt_region for using \c short_yield for yielding','line_number':209,'multiline':False]
['text':'! Timeout, in seconds, for performing shared memory creation/opening loop','line_number':211,'multiline':False]
['text':'! The number of short yields to perform during the shared memory creation/opening loop','line_number':213,'multiline':False]
['text':'! The constructor creates a new shared memory segment','line_number':217,'multiline':False]
['text':' shared_memory_object does not handle EINTR returned from shm_open internally.','line_number':248,'multiline':False]
['text':' https://github.com/boostorg/interprocess/issues/152','line_number':249,'multiline':False]
['text':'! The constructor creates a new shared memory segment or opens the existing one','line_number':258,'multiline':False]
['text':' We need to know for certain whether we create the shared memory segment or open an existing one.','line_number':278,'multiline':False]
['text':' This is to ensure that only one thread initializes the segment and all other threads wait until completion.','line_number':279,'multiline':False]
['text':' Since shared_memory_object(open_or_create) constructor does not report whether the segment was actually created,','line_number':280,'multiline':False]
['text':' we have to loop trying to create or open the segment. https://github.com/boostorg/interprocess/issues/151','line_number':281,'multiline':False]
['text':' shared_memory_object does not handle EINTR returned from shm_open internally.','line_number':302,'multiline':False]
['text':' https://github.com/boostorg/interprocess/issues/152','line_number':303,'multiline':False]
['text':'! The constructor opens the existing shared memory segment','line_number':347,'multiline':False]
['text':' shared_memory_object does not handle EINTR returned from shm_open internally.','line_number':372,'multiline':False]
['text':' https://github.com/boostorg/interprocess/issues/152','line_number':373,'multiline':False]
['text':' Wait until the mapped region becomes initialized','line_number':596,'multiline':False]
['text':' Check that the queue layout matches the current process ABI','line_number':620,'multiline':False]
['text':' The mutex is locked by the current thread, but the previous owner terminated without releasing the lock','line_number':699,'multiline':False]
['text':'! Returns the number of allocation blocks that are required to store user's payload of the specified size','line_number':723,'multiline':False]
['text':' ceil((size + get_header_overhead()) / block_size)','line_number':726,'multiline':False]
['text':'! Puts the message to the back of the queue','line_number':730,'multiline':False]
['text':' Write the rest of the message at the beginning of the queue','line_number':749,'multiline':False]
['text':'! Retrieves the next message and invokes the handler to store the message contents','line_number':765,'multiline':False]
['text':' Read the tail of the message','line_number':787,'multiline':False]
['text':'! Fixed buffer receive handler','line_number':1004,'multiline':False]
['text':' namespace ipc','line_number':1021,'multiline':False]
['text':' namespace log','line_number':1023,'multiline':False]
['text':' namespace boost','line_number':1025,'multiline':False]
