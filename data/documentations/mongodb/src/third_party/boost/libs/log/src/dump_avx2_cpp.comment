['text':'
 *          Copyright Andrey Semashev 2007 - 2021.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 ','line_number':1,'multiline':True]
['text':'!
 * \file   dump_avx2.cpp
 * \author Andrey Semashev
 * \date   05.05.2013
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 ','line_number':7,'multiline':True]
['text':' NOTE: You should generally avoid including headers as much as possible here, because this file','line_number':16,'multiline':False]
['text':'       is compiled with special compiler options, and any included header may result in generation of','line_number':17,'multiline':False]
['text':'       unintended code with these options and violation of ODR.','line_number':18,'multiline':False]
['text':' x86-64 architecture has more registers which we can utilize to pass constants','line_number':100,'multiline':False]
['text':' MSVC in 32-bit mode is not able to pass all constants to dump_pack, and is also not able to align them on the stack, so we have to fetch them from global constants','line_number':114,'multiline':False]
['text':'!
 * \brief Dumps a pack of input data into a string of 8 bit ASCII characters.
 *
 * The composed string is placed as follows (in Intel notation): mm_output1[127:0], mm_output2[127:0], mm_output3[127:0], mm_output1[255:128], mm_output2[255:128], mm_output3[255:128].
 ','line_number':126,'multiline':True]
['text':' Split half-bytes','line_number':138,'multiline':False]
['text':' Stringize each of the halves','line_number':142,'multiline':False]
['text':' Join them back together','line_number':146,'multiline':False]
['text':' Insert spaces between stringized bytes:','line_number':150,'multiline':False]
['text':' |0123456789abcdef|0123456789abcdef|','line_number':151,'multiline':False]
['text':' | 01 23 45 67 89 |ab cd ef 01 23 4|5 67 89 ab cd ef|','line_number':152,'multiline':False]
['text':'! Dumps a pack of input data into a string of 8 bit ASCII characters','line_number':162,'multiline':False]
['text':' Split half-bytes','line_number':170,'multiline':False]
['text':' Stringize each of the halves','line_number':174,'multiline':False]
['text':' Join them back together','line_number':178,'multiline':False]
['text':' Insert spaces between stringized bytes:','line_number':182,'multiline':False]
['text':' |0123456789abcdef|0123456789abcdef|','line_number':183,'multiline':False]
['text':' | 01 23 45 67 89 |ab cd ef 01 23 4|5 67 89 ab cd ef|','line_number':184,'multiline':False]
['text':' Align the temporary buffer at 32 bytes','line_number':200,'multiline':False]
['text':' skip the first space of the first chunk','line_number':202,'multiline':False]
['text':' gcc 4.7 is missing _mm256_broadcastsi128_si256 declaration in immintrin.h.','line_number':207,'multiline':False]
['text':' gcc 4.8 generates vmovdqu+vinserti128 instead of a single vbroadcasti128.','line_number':208,'multiline':False]
['text':' clang up until 4.0 generates vmovdqu+vinserti128 or worse.','line_number':209,'multiline':False]
['text':' First, check the input alignment. Also, if we can dump the whole data in one go, do it right away. It turns out to be faster than splitting','line_number':216,'multiline':False]
['text':' the work between prealign and tail part. It is also a fairly common case since on most platforms memory is not aligned to 32 bytes (i.e. prealign is often needed).','line_number':217,'multiline':False]
['text':' need to zero all ymm registers to avoid register spills/restores the compler generates around the function call','line_number':230,'multiline':False]
['text':' need to zero all ymm registers to avoid register spills/restores the compler generates around the function call','line_number':254,'multiline':False]
['text':' need to zero all ymm registers to avoid register spills/restores the compler generates around the function call','line_number':279,'multiline':False]
['text':' namespace','line_number':298,'multiline':False]
['text':' namespace aux','line_number':352,'multiline':False]
['text':' namespace log','line_number':354,'multiline':False]
['text':' namespace boost','line_number':356,'multiline':False]
