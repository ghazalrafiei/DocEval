['text':'///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8','line_number':1,'multiline':False]
['text':' basic_archive.cpp:','line_number':2,'multiline':False]
['text':' (C) Copyright 2002 Robert Ramey - http://www.rrsd.com . ','line_number':4,'multiline':False]
['text':' Use, modification and distribution is subject to the Boost Software','line_number':5,'multiline':False]
['text':' License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at','line_number':6,'multiline':False]
['text':' http://www.boost.org/LICENSE_1_0.txt)','line_number':7,'multiline':False]
['text':'  See http://www.boost.org for updates, documentation, and revision history.','line_number':9,'multiline':False]
['text':' msvc 6.0 needs this to suppress warnings','line_number':11,'multiline':False]
['text':' size_t, NULL','line_number':17,'multiline':False]
['text':' namespace std','line_number':23,'multiline':False]
['text':' include this to prevent linker errors when the','line_number':29,'multiline':False]
['text':' same modules are marked export and import.','line_number':30,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////','line_number':58,'multiline':False]
['text':' information about each serialized object loaded','line_number':59,'multiline':False]
['text':' indexed on object_id','line_number':60,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////','line_number':83,'multiline':False]
['text':' used to implement the reset_object_address operation.','line_number':84,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////','line_number':103,'multiline':False]
['text':' used by load object to look up class id given basic_serializer','line_number':104,'multiline':False]
['text':' the following cannot be defined because of the const','line_number':120,'multiline':False]
['text':' member.  This will generate a link error if an attempt','line_number':121,'multiline':False]
['text':' is made to assign.  This should never be necessary','line_number':122,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////','line_number':132,'multiline':False]
['text':' information about each serialized class indexed on class_id','line_number':133,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////','line_number':169,'multiline':False]
['text':' address of the most recent object serialized as a poiner','line_number':170,'multiline':False]
['text':' whose data itself is now pending serialization','line_number':171,'multiline':False]
['text':' redirect through virtual functions to load functions for this archive','line_number':204,'multiline':False]
['text':'public:','line_number':210,'multiline':False]
['text':' this code handles a couple of situations.','line_number':242,'multiline':False]
['text':' a) where reset_object_address is applied to an untracked object.','line_number':243,'multiline':False]
['text':'    In such a case the call is really superfluous and its really an','line_number':244,'multiline':False]
['text':'    an error.  But we don't have access to the types here so we can't','line_number':245,'multiline':False]
['text':'    know that.  However, this code will effectively turn this situation','line_number':246,'multiline':False]
['text':'    into a no-op and every thing will work fine - albeat with a small','line_number':247,'multiline':False]
['text':'    execution time penalty.','line_number':248,'multiline':False]
['text':' b) where the call to reset_object_address doesn't immediatly follow','line_number':249,'multiline':False]
['text':'    the << operator to which it corresponds.  This would be a bad idea','line_number':250,'multiline':False]
['text':'    but the code may work anyway.  Naturally, a bad practice on the part','line_number':251,'multiline':False]
['text':'    of the programmer but we can't detect it - as above.  So maybe we','line_number':252,'multiline':False]
['text':'    can save a few more people from themselves as above.','line_number':253,'multiline':False]
['text':' calculate displacement from this level','line_number':264,'multiline':False]
['text':' warning - pointer arithmetic on void * is in herently non-portable','line_number':265,'multiline':False]
['text':' but expected to work on all platforms in current usage','line_number':266,'multiline':False]
['text':' borland complains without this minor hack','line_number':296,'multiline':False]
['text':'const cobject_id & co = cobject_id_vector[i->class_id];','line_number':299,'multiline':False]
['text':' with the appropriate input serializer, ','line_number':300,'multiline':False]
['text':' delete the indicated object','line_number':301,'multiline':False]
['text':' borland complains without this minor hack','line_number':321,'multiline':False]
['text':' to be thrown away','line_number':336,'multiline':False]
['text':' override tracking with indicator from class information','line_number':341,'multiline':False]
['text':' if its a reference to a old object','line_number':359,'multiline':False]
['text':' we're done','line_number':361,'multiline':False]
['text':' if its been serialized through a pointer and the preamble's been done','line_number':376,'multiline':False]
['text':' read data','line_number':378,'multiline':False]
['text':' save the current move stack position in case we want to truncate it','line_number':389,'multiline':False]
['text':' note: extra line used to evade borland issue','line_number':392,'multiline':False]
['text':' if we tracked this object when the archive was saved','line_number':399,'multiline':False]
['text':' if it was already read','line_number':401,'multiline':False]
['text':' we're done','line_number':403,'multiline':False]
['text':' add a new enty into the tracking list','line_number':405,'multiline':False]
['text':' and add an entry for this object','line_number':407,'multiline':False]
['text':' read data','line_number':410,'multiline':False]
['text':' if its a new class type - i.e. never been registered','line_number':435,'multiline':False]
['text':' if its either abstract','line_number':437,'multiline':False]
['text':' or polymorphic','line_number':439,'multiline':False]
['text':' is must have been exported','line_number':441,'multiline':False]
['text':' if it has a class name','line_number':445,'multiline':False]
['text':' class_id_type new_cid = register_type(bpis_ptr->get_basic_serializer());','line_number':456,'multiline':False]
['text':' extra line to evade borland issue','line_number':473,'multiline':False]
['text':' if we're tracking and the pointer has already been read','line_number':475,'multiline':False]
['text':' we're done','line_number':477,'multiline':False]
['text':' save state','line_number':480,'multiline':False]
['text':' allocate space on the heap for the object - to be constructed later','line_number':483,'multiline':False]
['text':' predict next object id to be created','line_number':498,'multiline':False]
['text':' add to list of serialized objects so that we can properly handle','line_number':503,'multiline':False]
['text':' cyclic strucures','line_number':504,'multiline':False]
['text':' remember that that the address of these elements could change','line_number':507,'multiline':False]
['text':' when we make another call so don't use the address','line_number':508,'multiline':False]
['text':' namespace detail','line_number':520,'multiline':False]
['text':' namespace archive','line_number':521,'multiline':False]
['text':' namespace boost','line_number':522,'multiline':False]
['text':'////////////////////////////////////////////////////////////////////','line_number':524,'multiline':False]
['text':' implementation of basic_iarchive functions','line_number':525,'multiline':False]
['text':' load a pointer object','line_number':565,'multiline':False]
['text':' namespace detail','line_number':599,'multiline':False]
['text':' namespace archive','line_number':600,'multiline':False]
['text':' namespace boost','line_number':601,'multiline':False]
