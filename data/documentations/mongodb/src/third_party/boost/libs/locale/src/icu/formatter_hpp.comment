['text':'','line_number':1,'multiline':False]
['text':'  Copyright (c) 2009-2011 Artyom Beilis (Tonkikh)','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0. (See','line_number':4,'multiline':False]
['text':'  accompanying file LICENSE_1_0.txt or copy at','line_number':5,'multiline':False]
['text':'  http://www.boost.org/LICENSE_1_0.txt)','line_number':6,'multiline':False]
['text':'','line_number':7,'multiline':False]
['text':'/','line_number':21,'multiline':False]
['text':'/ \brief Special base polymorphic class that is used as a character type independent base for all formatter classes','line_number':22,'multiline':False]
['text':'/','line_number':23,'multiline':False]
['text':'/','line_number':32,'multiline':False]
['text':'/ \brief A class that is used for formatting numbers, currency and dates/times','line_number':33,'multiline':False]
['text':'/','line_number':34,'multiline':False]
['text':'/','line_number':41,'multiline':False]
['text':'/ Format the value and return the number of Unicode code points','line_number':42,'multiline':False]
['text':'/','line_number':43,'multiline':False]
['text':'/','line_number':45,'multiline':False]
['text':'/ Format the value and return the number of Unicode code points','line_number':46,'multiline':False]
['text':'/','line_number':47,'multiline':False]
['text':'/','line_number':49,'multiline':False]
['text':'/ Format the value and return the number of Unicode code points','line_number':50,'multiline':False]
['text':'/','line_number':51,'multiline':False]
['text':'/','line_number':54,'multiline':False]
['text':'/ Parse the string and return the number of used characters. If it returns 0','line_number':55,'multiline':False]
['text':'/ then parsing failed.','line_number':56,'multiline':False]
['text':'/','line_number':57,'multiline':False]
['text':'/','line_number':59,'multiline':False]
['text':'/ Parse the string and return the number of used characters. If it returns 0','line_number':60,'multiline':False]
['text':'/ then parsing failed.','line_number':61,'multiline':False]
['text':'/','line_number':62,'multiline':False]
['text':'/','line_number':64,'multiline':False]
['text':'/ Parse the string and return the number of used characters. If it returns 0','line_number':65,'multiline':False]
['text':'/ then parsing failed.','line_number':66,'multiline':False]
['text':'/','line_number':67,'multiline':False]
['text':'/','line_number':70,'multiline':False]
['text':'/ Get formatter for the current state of ios_base -- flags and locale,','line_number':71,'multiline':False]
['text':'/ NULL may be returned if an invalid combination of flags is provided or this type','line_number':72,'multiline':False]
['text':'/ of formatting is not supported by locale. See: create','line_number':73,'multiline':False]
['text':'/','line_number':74,'multiline':False]
['text':'/ Note: formatter is cached. If \a ios is not changed (no flags or locale changed)','line_number':75,'multiline':False]
['text':'/ the formatter would remain the same. Otherwise it would be rebuild and cached','line_number':76,'multiline':False]
['text':'/ for future use. It is useful for saving time for generation','line_number':77,'multiline':False]
['text':'/ of multiple values with same locale.','line_number':78,'multiline':False]
['text':'/','line_number':79,'multiline':False]
['text':'/ For example, this code:','line_number':80,'multiline':False]
['text':'/','line_number':81,'multiline':False]
['text':'/ \code','line_number':82,'multiline':False]
['text':'/     std::cout << as::spellout;','line_number':83,'multiline':False]
['text':'/     for(int i=1;i<=10;i++)','line_number':84,'multiline':False]
['text':'/         std::cout << i <<std::endl;','line_number':85,'multiline':False]
['text':'/ \endcode','line_number':86,'multiline':False]
['text':'/','line_number':87,'multiline':False]
['text':'/ Would create a new spelling formatter only once.','line_number':88,'multiline':False]
['text':'/','line_number':89,'multiline':False]
['text':' class formatter','line_number':95,'multiline':False]
['text':'/','line_number':97,'multiline':False]
['text':'/ Specialization for real implementation','line_number':98,'multiline':False]
['text':'/','line_number':99,'multiline':False]
['text':'/','line_number':103,'multiline':False]
['text':'/ Specialization for real implementation','line_number':104,'multiline':False]
['text':'/','line_number':105,'multiline':False]
['text':'/','line_number':110,'multiline':False]
['text':'/ Specialization for real implementation','line_number':111,'multiline':False]
['text':'/','line_number':112,'multiline':False]
['text':'/','line_number':118,'multiline':False]
['text':'/ Specialization for real implementation','line_number':119,'multiline':False]
['text':'/','line_number':120,'multiline':False]
['text':' namespace impl_icu','line_number':125,'multiline':False]
['text':' namespace locale','line_number':126,'multiline':False]
['text':' namespace boost','line_number':127,'multiline':False]
['text':' vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4','line_number':132,'multiline':False]
