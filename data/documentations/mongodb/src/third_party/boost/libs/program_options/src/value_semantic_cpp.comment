['text':' Copyright Vladimir Prus 2004.','line_number':1,'multiline':False]
['text':' Distributed under the Boost Software License, Version 1.0.','line_number':2,'multiline':False]
['text':' (See accompanying file LICENSE_1_0.txt','line_number':3,'multiline':False]
['text':' or copy at http://www.boost.org/LICENSE_1_0.txt)','line_number':4,'multiline':False]
['text':' Need to convert to local encoding.','line_number':43,'multiline':False]
['text':' Already in local encoding, pass unmodified','line_number':55,'multiline':False]
['text':' Convert from utf8','line_number':69,'multiline':False]
['text':' Convert from local encoding','line_number':75,'multiline':False]
['text':' Validates bool value.
        Any of "1", "true", "yes", "on" will be converted to "1".<br>
        Any of "0", "false", "no", "off" will be converted to "0".<br>
        Case is ignored. The 'xs' vector can either be empty, in which
        case the value is 'true', or can contain explicit value.
    ','line_number':140,'multiline':True]
['text':' This is blatant copy-paste. However, templating this will cause a problem,','line_number':163,'multiline':False]
['text':' since wstring can't be constructed/compared with char*. We'd need to','line_number':164,'multiline':False]
['text':' create auxiliary 'widen' routine to convert from char* into ','line_number':165,'multiline':False]
['text':' needed string type, and that's more work.','line_number':166,'multiline':False]
['text':'                     parameter            |     placeholder               |   value','line_number':251,'multiline':False]
['text':'                     ---------            |     -----------               |   -----','line_number':252,'multiline':False]
['text':' will substitute tokens each time what is run()','line_number':263,'multiline':False]
['text':' not found: all replaced','line_number':274,'multiline':False]
['text':'  For long options, use option name','line_number':310,'multiline':False]
['text':'  For short options use first letter of original_token','line_number':315,'multiline':False]
['text':' no prefix','line_number':319,'multiline':False]
['text':'','line_number':332,'multiline':False]
['text':'  replace placeholder with defaults if values are missing ','line_number':333,'multiline':False]
['text':' ','line_number':334,'multiline':False]
['text':' missing parameter: use default','line_number':338,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':'  replace placeholder with values','line_number':346,'multiline':False]
['text':'  placeholder are denoted by surrounding '%'','line_number':347,'multiline':False]
['text':' ','line_number':348,'multiline':False]
['text':' For short forms, all alternatives must be identical, by','line_number':357,'multiline':False]
['text':'      definition, to the specified option, so we don't need to','line_number':358,'multiline':False]
['text':'      display alternatives','line_number':359,'multiline':False]
['text':' remove duplicates using std::set','line_number':369,'multiline':False]
['text':' Being very cautious: should be > 1 alternative!','line_number':374,'multiline':False]
['text':' there is a programming error if multiple options have the same name...','line_number':382,'multiline':False]
['text':' use inherited logic','line_number':389,'multiline':False]
['text':' Initially, store the message in 'const char*' variable,','line_number':401,'multiline':False]
['text':' to avoid conversion to std::string in all cases.','line_number':402,'multiline':False]
['text':' currently unused','line_number':418,'multiline':False]
