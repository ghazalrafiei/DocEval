['text':'  filesystem unique_path.cpp  --------------------------------------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Beman Dawes 2010','line_number':3,'multiline':False]
['text':'  Copyright Andrey Semashev 2020','line_number':4,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':6,'multiline':False]
['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':7,'multiline':False]
['text':'  Library home page: http://www.boost.org/libs/filesystem','line_number':9,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':11,'multiline':False]
['text':' !defined(BOOST_FILESYSTEM_DISABLE_ARC4RANDOM)','line_number':35,'multiline':False]
['text':' defined(SYS_getrandom)','line_number':43,'multiline':False]
['text':' BOOST_FILESYSTEM_HAS_GETRANDOM definition','line_number':52,'multiline':False]
['text':' (defined(__linux__) || defined(__linux) || defined(linux)) && (!defined(__ANDROID__) || __ANDROID_API__ >= 28)','line_number':56,'multiline':False]
['text':' !defined(BOOST_FILESYSTEM_DISABLE_GETRANDOM)','line_number':57,'multiline':False]
['text':' BOOST_WINDOWS_API','line_number':61,'multiline':False]
['text':' We use auto-linking below to help users of static builds of Boost.Filesystem to link to whatever Windows SDK library we selected.','line_number':63,'multiline':False]
['text':' The dependency information is currently not exposed in CMake config files generated by Boost.Build (https://github.com/boostorg/boost_install/issues/18),','line_number':64,'multiline':False]
['text':' which makes it non-trivial for users to discover the libraries they need. This feature is deprecated and may be removed in the future,','line_number':65,'multiline':False]
['text':' when the situation with CMake config files improves.','line_number':66,'multiline':False]
['text':' Note that the library build system is the principal source of linking the library, which must work regardless of auto-linking.','line_number':67,'multiline':False]
['text':' defined on the command line by the project','line_number':71,'multiline':False]
['text':' !defined(BOOST_FILESYSTEM_NO_DEPRECATED) && defined(_MSC_VER)','line_number':76,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_HAS_BCRYPT)','line_number':77,'multiline':False]
['text':' !defined(BOOST_FILESYSTEM_NO_DEPRECATED) && defined(_MSC_VER)','line_number':86,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_HAS_BCRYPT)','line_number':87,'multiline':False]
['text':' BOOST_POSIX_API','line_number':89,'multiline':False]
['text':' At least Mac OS X 10.6 and older doesn't support O_CLOEXEC','line_number':99,'multiline':False]
['text':' defined(BOOST_POSIX_API)','line_number':103,'multiline':False]
['text':'! Fills buffer with cryptographically random data obtained from /dev/(u)random','line_number':113,'multiline':False]
['text':'! Pointer to the implementation of fill_random.','line_number':148,'multiline':False]
['text':'! Fills buffer with cryptographically random data obtained from getrandom()','line_number':151,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_HAS_GETRANDOM) || defined(BOOST_FILESYSTEM_HAS_GETRANDOM_SYSCALL)','line_number':184,'multiline':False]
['text':' defined(BOOST_POSIX_API) && !defined(BOOST_FILESYSTEM_HAS_ARC4RANDOM)','line_number':186,'multiline':False]
['text':' defined(BOOST_POSIX_API)','line_number':210,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_HAS_BCRYPT)','line_number':230,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_HAS_BCRYPT)','line_number':253,'multiline':False]
['text':' defined(BOOST_POSIX_API)','line_number':255,'multiline':False]
['text':' unnamed namespace','line_number':266,'multiline':False]
['text':'! Initializes fill_random implementation pointer','line_number':270,'multiline':False]
['text':' defined(linux) || defined(__linux) || defined(__linux__)','line_number':284,'multiline':False]
['text':' This function used wstring for fear of misidentifying','line_number':289,'multiline':False]
['text':' a part of a multibyte character as a percent sign.','line_number':290,'multiline':False]
['text':' However, double byte encodings only have 80-FF as lead','line_number':291,'multiline':False]
['text':' bytes and 40-7F as trailing bytes, whereas % is 25.','line_number':292,'multiline':False]
['text':' So, use string on POSIX and avoid conversions.','line_number':293,'multiline':False]
['text':' init to avoid clang static analyzer message','line_number':297,'multiline':False]
['text':' see ticket #8954','line_number':298,'multiline':False]
['text':' 4-bits per nibble','line_number':299,'multiline':False]
['text':' digit request','line_number':304,'multiline':False]
['text':' if odd, shift right 1 nibble','line_number':314,'multiline':False]
['text':' convert to hex digit and replace','line_number':315,'multiline':False]
['text':' namespace detail','line_number':325,'multiline':False]
['text':' namespace filesystem','line_number':326,'multiline':False]
['text':' namespace boost','line_number':327,'multiline':False]
