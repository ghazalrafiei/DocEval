['text':'  filesystem path_traits.cpp  --------------------------------------------------------//','line_number':1,'multiline':False]
['text':'  Copyright Beman Dawes 2008, 2009','line_number':3,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':5,'multiline':False]
['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':6,'multiline':False]
['text':'  Library home page: http://www.boost.org/libs/filesystem','line_number':8,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':10,'multiline':False]
['text':' for codecvt_base::result','line_number':20,'multiline':False]
['text':' for strlen','line_number':21,'multiline':False]
['text':' for wcslen','line_number':22,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':29,'multiline':False]
['text':'                                  configuration                                       //','line_number':30,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':31,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':41,'multiline':False]
['text':'                                                                                      //','line_number':42,'multiline':False]
['text':'  The public convert() functions do buffer management, and then forward to the        //','line_number':43,'multiline':False]
['text':'  convert_aux() functions for the actual call to the codecvt facet.                   //','line_number':44,'multiline':False]
['text':'                                                                                      //','line_number':45,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':46,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':48,'multiline':False]
['text':'                      convert_aux const char* to wstring                             //','line_number':49,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':50,'multiline':False]
['text':'std::cout << std::hex','line_number':59,'multiline':False]
['text':'          << " from=" << std::size_t(from)','line_number':60,'multiline':False]
['text':'          << " from_end=" << std::size_t(from_end)','line_number':61,'multiline':False]
['text':'          << " to=" << std::size_t(to)','line_number':62,'multiline':False]
['text':'          << " to_end=" << std::size_t(to_end)','line_number':63,'multiline':False]
['text':'          << std::endl;','line_number':64,'multiline':False]
['text':' perhaps unneeded, but cuts bug reports','line_number':66,'multiline':False]
['text':'std::cout << " result is " << static_cast<int>(res) << std::endl;','line_number':74,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':80,'multiline':False]
['text':'                      convert_aux const wchar_t* to string                           //','line_number':81,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':82,'multiline':False]
['text':'std::cout << std::hex','line_number':91,'multiline':False]
['text':'          << " from=" << std::size_t(from)','line_number':92,'multiline':False]
['text':'          << " from_end=" << std::size_t(from_end)','line_number':93,'multiline':False]
['text':'          << " to=" << std::size_t(to)','line_number':94,'multiline':False]
['text':'          << " to_end=" << std::size_t(to_end)','line_number':95,'multiline':False]
['text':'          << std::endl;','line_number':96,'multiline':False]
['text':' perhaps unneeded, but cuts bug reports','line_number':98,'multiline':False]
['text':'std::cout << " result is " << static_cast<int>(res) << std::endl;','line_number':106,'multiline':False]
['text':' unnamed namespace','line_number':112,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':114,'multiline':False]
['text':'                                   path_traits                                        //','line_number':115,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':116,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':122,'multiline':False]
['text':'                          convert const char* to wstring                              //','line_number':123,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':124,'multiline':False]
['text':' 0 for null terminated MBCS','line_number':128,'multiline':False]
['text':' null terminated','line_number':133,'multiline':False]
['text':' perhaps too large, but that's OK','line_number':141,'multiline':False]
['text':'  dynamically allocate a buffer only if source is unusually large','line_number':143,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':156,'multiline':False]
['text':'                         convert const wchar_t* to string                            //','line_number':157,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':158,'multiline':False]
['text':' 0 for null terminated MBCS','line_number':162,'multiline':False]
['text':' null terminated','line_number':167,'multiline':False]
['text':'  The codecvt length functions may not be implemented, and I don't really','line_number':175,'multiline':False]
['text':'  understand them either. Thus this code is just a guess; if it turns','line_number':176,'multiline':False]
['text':'  out the buffer is too small then an error will be reported and the code','line_number':177,'multiline':False]
['text':'  will have to be fixed.','line_number':178,'multiline':False]
['text':' perhaps too large, but that's OK','line_number':179,'multiline':False]
['text':' encodings like shift-JIS need some prefix space','line_number':180,'multiline':False]
['text':'  dynamically allocate a buffer only if source is unusually large','line_number':182,'multiline':False]
['text':' namespace path_traits','line_number':195,'multiline':False]
['text':' namespace filesystem','line_number':196,'multiline':False]
['text':' namespace boost','line_number':197,'multiline':False]
