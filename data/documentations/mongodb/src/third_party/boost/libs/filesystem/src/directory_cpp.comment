['text':'  directory.cpp  --------------------------------------------------------------------//','line_number':1,'multiline':False]
['text':'  Copyright 2002-2009, 2014 Beman Dawes','line_number':3,'multiline':False]
['text':'  Copyright 2001 Dietmar Kuehl','line_number':4,'multiline':False]
['text':'  Copyright 2019, 2022 Andrey Semashev','line_number':5,'multiline':False]
['text':'  Distributed under the Boost Software License, Version 1.0.','line_number':7,'multiline':False]
['text':'  See http://www.boost.org/LICENSE_1_0.txt','line_number':8,'multiline':False]
['text':'  See library home page at http://www.boost.org/libs/filesystem','line_number':10,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':12,'multiline':False]
['text':' std::malloc, std::free','line_number':26,'multiline':False]
['text':' std::nothrow, std::bad_alloc','line_number':27,'multiline':False]
['text':' std::move','line_number':30,'multiline':False]
['text':' At least Mac OS X 10.6 and older doesn't support O_CLOEXEC','line_number':53,'multiline':False]
['text':' BOOST_WINDOWS_API','line_number':61,'multiline':False]
['text':' NTSTATUS_','line_number':65,'multiline':False]
['text':' BOOST_WINDOWS_API','line_number':69,'multiline':False]
['text':'  BOOST_FILESYSTEM_STATUS_CACHE enables file_status cache in','line_number':75,'multiline':False]
['text':'  dir_itr_increment. The config tests are placed here because some of the','line_number':76,'multiline':False]
['text':'  macros being tested come from dirent.h.','line_number':77,'multiline':False]
['text':'','line_number':78,'multiline':False]
['text':' TODO: find out what macros indicate dirent::d_type present in more libraries','line_number':79,'multiline':False]
['text':' defined by GNU C library if d_type present','line_number':80,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':91,'multiline':False]
['text':'                                                                                      //','line_number':92,'multiline':False]
['text':'                                 directory_entry                                      //','line_number':93,'multiline':False]
['text':'                                                                                      //','line_number':94,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':95,'multiline':False]
['text':' optimization: if the symlink status is known, and it isn't a symlink,','line_number':102,'multiline':False]
['text':' then status and symlink_status are identical so just copy the','line_number':103,'multiline':False]
['text':' symlink status to the regular status.','line_number':104,'multiline':False]
['text':'  dispatch directory_entry supplied here rather than in','line_number':135,'multiline':False]
['text':'  <boost/filesystem/path_traits.hpp>, thus avoiding header circularity.','line_number':136,'multiline':False]
['text':'  test cases are in operations_unit_test.cpp','line_number':137,'multiline':False]
['text':' namespace path_traits','line_number':165,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':167,'multiline':False]
['text':'                                                                                      //','line_number':168,'multiline':False]
['text':'                               directory_iterator                                     //','line_number':169,'multiline':False]
['text':'                                                                                      //','line_number':170,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':171,'multiline':False]
['text':' Return NULL on OOM','line_number':183,'multiline':False]
['text':' Obtains maximum length of a path, not including the terminating zero','line_number':229,'multiline':False]
['text':' this code is based on Stevens and Rago, Advanced Programming in the','line_number':232,'multiline':False]
['text':' UNIX envirnment, 2nd Ed., ISBN 0-201-43307-9, page 49','line_number':233,'multiline':False]
['text':' relative root','line_number':247,'multiline':False]
['text':' Returns maximum length of a path, not including the terminating zero','line_number':260,'multiline':False]
['text':' BOOST_FILESYSTEM_USE_READDIR_R','line_number':267,'multiline':False]
['text':' *result set to NULL on end of directory','line_number':269,'multiline':False]
['text':' !defined(BOOST_FILESYSTEM_USE_READDIR_R)','line_number':291,'multiline':False]
['text':'! Pointer to the actual implementation of the copy_file_data implementation','line_number':307,'multiline':False]
['text':' !defined(BOOST_FILESYSTEM_USE_READDIR_R)','line_number':341,'multiline':False]
['text':' filesystem does not supply d_type value','line_number':355,'multiline':False]
['text':' filesystem supplies d_type value','line_number':359,'multiline':False]
['text':' According to readdir description, there's no reliable way to predict the length of the d_name string.','line_number':393,'multiline':False]
['text':' It may exceed NAME_MAX and pathconf(_PC_NAME_MAX) limits. We are being conservative here and allocate','line_number':394,'multiline':False]
['text':' buffer that is enough for PATH_MAX as the directory name. Still, this doesn't guarantee there won't be','line_number':395,'multiline':False]
['text':' a buffer overrun. The readdir_r API is fundamentally flawed and we should avoid it as much as possible','line_number':396,'multiline':False]
['text':' in favor of readdir.','line_number':397,'multiline':False]
['text':' + 1 for "\0"','line_number':398,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_USE_READDIR_R)','line_number':401,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_HAS_FDOPENDIR_NOFOLLOW)','line_number':436,'multiline':False]
['text':' defined(BOOST_FILESYSTEM_HAS_FDOPENDIR_NOFOLLOW)','line_number':443,'multiline':False]
['text':' Force initial readdir call by the caller. This will initialize the actual first filename and statuses.','line_number':445,'multiline':False]
['text':' BOOST_WINDOWS_API','line_number':454,'multiline':False]
['text':' Reparse points are complex, so don't try to resolve them here; instead just mark','line_number':460,'multiline':False]
['text':' them as status_error which causes directory_entry caching to call status()','line_number':461,'multiline':False]
['text':' and symlink_status() which do handle reparse points fully','line_number':462,'multiline':False]
['text':' If we have a reparse point tag we can at least populate the symlink status,','line_number':465,'multiline':False]
['text':' consistent with symlink_status() behavior','line_number':466,'multiline':False]
['text':'! FILE_ID_128 definition from Windows SDK','line_number':497,'multiline':False]
['text':'! FILE_DIRECTORY_INFORMATION definition from Windows DDK. Used by NtQueryDirectoryFile, supported since Windows NT 4.0 (probably).','line_number':503,'multiline':False]
['text':'! FILE_ID_BOTH_DIR_INFO definition from Windows SDK. Basic support for directory iteration using GetFileInformationByHandleEx, supported since Windows Vista.','line_number':519,'multiline':False]
['text':'! FILE_FULL_DIR_INFO definition from Windows SDK. More lightweight than FILE_ID_BOTH_DIR_INFO, supported since Windows 8.','line_number':539,'multiline':False]
['text':'! FILE_ID_EXTD_DIR_INFO definition from Windows SDK. Provides reparse point tag, which saves us querying it with a few separate syscalls. Supported since Windows 8.','line_number':556,'multiline':False]
['text':'! Indicates format of the extra data in the directory iterator','line_number':575,'multiline':False]
['text':'! Indicates extra data format that should be used by directory iterator by default','line_number':584,'multiline':False]
['text':'!
 * \brief Extra buffer size for GetFileInformationByHandleEx-based or NtQueryDirectoryFile-based directory iterator.
 * 
 * Must be large enough to accommodate at least one FILE_DIRECTORY_INFORMATION or *_DIR_INFO struct and one filename.
 * NTFS, VFAT, exFAT support filenames up to 255 UTF-16/UCS-2 characters. ReFS supports filenames up to 32768 UTF-16 characters.
 ','line_number':587,'multiline':True]
['text':' Event','line_number':714,'multiline':False]
['text':' ApcRoutine','line_number':715,'multiline':False]
['text':' ApcContext','line_number':716,'multiline':False]
['text':' ReturnSingleEntry','line_number':721,'multiline':False]
['text':' FileName','line_number':722,'multiline':False]
['text':' RestartScan','line_number':723,'multiline':False]
['text':' Fall back to file_full_dir_info_format.','line_number':816,'multiline':False]
['text':' Note that some mounted filesystems may not support FILE_ID_128 identifiers, which will cause','line_number':817,'multiline':False]
['text':' GetFileInformationByHandleEx(FileIdExtdDirectoryRestartInfo) return ERROR_INVALID_PARAMETER,','line_number':818,'multiline':False]
['text':' even though in general the operation is supported by the kernel. So don't downgrade to','line_number':819,'multiline':False]
['text':' FileFullDirectoryRestartInfo permanently in this case - only for this particular iterator.','line_number':820,'multiline':False]
['text':' Fall back to file_id_both_dir_info','line_number':850,'multiline':False]
['text':' Event','line_number':902,'multiline':False]
['text':' ApcRoutine','line_number':903,'multiline':False]
['text':' ApcContext','line_number':904,'multiline':False]
['text':' ReturnSingleEntry','line_number':909,'multiline':False]
['text':' FileName','line_number':910,'multiline':False]
['text':' RestartScan','line_number':911,'multiline':False]
['text':' Note: an empty root directory has no "." or ".." entries, so this','line_number':916,'multiline':False]
['text':' causes a ERROR_FILE_NOT_FOUND error returned from FindFirstFileW','line_number':917,'multiline':False]
['text':' (which is presumably equivalent to STATUS_NO_SUCH_FILE) which we','line_number':918,'multiline':False]
['text':' do not consider an error. It is treated as eof instead.','line_number':919,'multiline':False]
['text':' !defined(UNDER_CE)','line_number':944,'multiline':False]
['text':' fails','line_number':960,'multiline':False]
['text':' use a form of search Sebastian Martel reports will work with Win98','line_number':982,'multiline':False]
['text':' signal eof','line_number':991,'multiline':False]
['text':' Note: an empty root directory has no "." or ".." entries, so this','line_number':993,'multiline':False]
['text':' causes a ERROR_FILE_NOT_FOUND error which we do not consider an','line_number':994,'multiline':False]
['text':' error. It is treated as eof instead.','line_number':995,'multiline':False]
['text':' Windows Mobile returns ERROR_NO_MORE_FILES; see ticket #3551','line_number':996,'multiline':False]
['text':' !defined(UNDER_CE)','line_number':1012,'multiline':False]
['text':' BOOST_WINDOWS_API','line_number':1016,'multiline':False]
['text':' namespace','line_number':1018,'multiline':False]
['text':'! Initializes directory iterator implementation','line_number':1022,'multiline':False]
['text':' Enable the latest format we support. It will get downgraded, if needed, as we attempt','line_number':1027,'multiline':False]
['text':' to create the directory iterator the first time.','line_number':1028,'multiline':False]
['text':' defined(BOOST_WINDOWS_API) && !defined(UNDER_CE)','line_number':1033,'multiline':False]
['text':' eof, make end','line_number':1075,'multiline':False]
['text':' Not eof','line_number':1078,'multiline':False]
['text':' dot or dot-dot','line_number':1080,'multiline':False]
['text':' If dot or dot-dot name produced by the underlying API, skip it until the first actual file','line_number':1089,'multiline':False]
['text':' happens if filesystem is corrupt, such as on a damaged optical disc','line_number':1121,'multiline':False]
['text':' fix ticket #5900','line_number':1125,'multiline':False]
['text':' eof, make end','line_number':1133,'multiline':False]
['text':' !(dot or dot-dot)','line_number':1140,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':1159,'multiline':False]
['text':'                                                                                      //','line_number':1160,'multiline':False]
['text':'                           recursive_directory_iterator                               //','line_number':1161,'multiline':False]
['text':'                                                                                      //','line_number':1162,'multiline':False]
['text':'--------------------------------------------------------------------------------------//','line_number':1163,'multiline':False]
['text':' namespace','line_number':1231,'multiline':False]
['text':' done, so make end iterator','line_number':1248,'multiline':False]
['text':' Make an end iterator on errors','line_number':1259,'multiline':False]
['text':' done, so make end iterator','line_number':1267,'multiline':False]
['text':' Returns: true if push occurs, otherwise false. Always returns false on error.','line_number':1293,'multiline':False]
['text':'  Discover if the iterator is for a directory that needs to be recursed into,','line_number':1299,'multiline':False]
['text':'  taking symlinks and options into account.','line_number':1300,'multiline':False]
['text':' if we are not recursing into symlinks, we are going to have to know if the','line_number':1310,'multiline':False]
['text':' stack top is a symlink, so get symlink_status and verify no error occurred','line_number':1311,'multiline':False]
['text':' Logic for following predicate was contributed by Daniel Aarno to handle cyclic','line_number':1320,'multiline':False]
['text':' symlinks correctly and efficiently, fixing ticket #5652.','line_number':1321,'multiline':False]
['text':'   if (((m_options & directory_options::follow_directory_symlink) == directory_options::follow_directory_symlink','line_number':1322,'multiline':False]
['text':'         || !is_symlink(m_stack.back()->symlink_status()))','line_number':1323,'multiline':False]
['text':'       && is_directory(m_stack.back()->status())) ...','line_number':1324,'multiline':False]
['text':' The predicate code has since been rewritten to pass error_code arguments,','line_number':1325,'multiline':False]
['text':' per ticket #5653.','line_number':1326,'multiline':False]
['text':' Skip dangling symlink and continue iteration on the current depth level','line_number':1336,'multiline':False]
['text':' We cannot let depth to overflow','line_number':1348,'multiline':False]
['text':' When depth overflow happens, avoid popping the current directory iterator','line_number':1350,'multiline':False]
['text':' and attempt to continue iteration on the current depth.','line_number':1351,'multiline':False]
['text':' may throw','line_number':1360,'multiline':False]
['text':' may throw','line_number':1362,'multiline':False]
['text':' namespace','line_number':1376,'multiline':False]
['text':'  if various conditions are met, push a directory_iterator into the iterator stack','line_number':1389,'multiline':False]
['text':' report errors if any','line_number':1394,'multiline':False]
['text':' Make an end iterator on errors','line_number':1400,'multiline':False]
['text':' done, so make end iterator','line_number':1417,'multiline':False]
['text':'  Do the actual increment operation on the top iterator in the iterator','line_number':1428,'multiline':False]
['text':'  stack, popping the stack if necessary, until either the stack is empty or a','line_number':1429,'multiline':False]
['text':'  non-end iterator is reached.','line_number':1430,'multiline':False]
['text':' done, so make end iterator','line_number':1435,'multiline':False]
['text':' namespace detail','line_number':1451,'multiline':False]
['text':' namespace filesystem','line_number':1453,'multiline':False]
['text':' namespace boost','line_number':1454,'multiline':False]
