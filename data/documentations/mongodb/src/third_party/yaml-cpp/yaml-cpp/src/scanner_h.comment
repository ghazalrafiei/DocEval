['text':' GCC supports "pragma once" correctly since 3.4','line_number':6,'multiline':False]
['text':'*
 * A scanner transforms a stream of characters into a stream of tokens.
 ','line_number':27,'multiline':True]
['text':'* Returns true if there are no more tokens to be read. ','line_number':35,'multiline':True]
['text':'* Removes the next token in the queue. ','line_number':38,'multiline':True]
['text':'* Returns, but does not remove, the next token in the queue. ','line_number':41,'multiline':True]
['text':'* Returns the current mark in the input stream. ','line_number':44,'multiline':True]
['text':' scanning','line_number':63,'multiline':False]
['text':'*
   * Scans until there's a valid token at the front of the queue, or the queue
   * is empty. The state can be checked by {@link #empty}, and the next token
   * retrieved by {@link #peek}.
   ','line_number':65,'multiline':True]
['text':'*
   * The main scanning function; this method branches out to scan whatever the
   * next token should be.
   ','line_number':72,'multiline':True]
['text':'* Eats the input stream until it reaches the next token-like thing. ','line_number':78,'multiline':True]
['text':'* Sets the initial conditions for starting a stream. ','line_number':81,'multiline':True]
['text':'* Closes out the stream, finish up, etc. ','line_number':84,'multiline':True]
['text':'*
   * Pushes an indentation onto the stack, and enqueues the proper token
   * (sequence start or mapping start).
   *
   * @return the indent marker it generates (if any).
   ','line_number':95,'multiline':True]
['text':'*
   * Pops indentations off the stack until it reaches the current indentation
   * level, and enqueues the proper token each time. Then pops all invalid
   * indentations off.
   ','line_number':103,'multiline':True]
['text':'*
   * Pops all indentations (except for the base empty one) off the stack, and
   * enqueues the proper token each time.
   ','line_number':110,'multiline':True]
['text':'* Pops a single indent, pushing the proper token. ','line_number':116,'multiline':True]
['text':' checking input','line_number':120,'multiline':False]
['text':'*
   * Throws a ParserException with the current token location (if available),
   * and does not parse any more tokens.
   ','line_number':128,'multiline':True]
['text':'*
   * Returns the appropriate regex to check if the next token is a value token.
   ','line_number':136,'multiline':True]
['text':' and the tokens','line_number':153,'multiline':False]
['text':' the stream','line_number':173,'multiline':False]
['text':' the output (tokens)','line_number':176,'multiline':False]
['text':' state info','line_number':179,'multiline':False]
['text':' for "garbage collection"','line_number':185,'multiline':False]
['text':' SCANNER_H_62B23520_7C8E_11DE_8A39_0800200C9A66','line_number':190,'multiline':False]
