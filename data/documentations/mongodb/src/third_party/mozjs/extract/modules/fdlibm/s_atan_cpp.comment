['text':' @(#)s_atan.c 5.1 93/09/24 ','line_number':1,'multiline':True]
['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':2,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':13,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':14,'multiline':False]
['text':' atan(x)
 * Method
 *   1. Reduce x to positive by atan(x) = -atan(-x).
 *   2. According to the integer k=4t+0.25 chopped, t=x, the argument
 *      is further reduced to one of the following intervals and the
 *      arctangent of t is evaluated by the corresponding formula:
 *
 *      [0,7/16]      atan(x) = t-t^3*(a1+t^2*(a2+...(a10+t^2*a11)...)
 *      [7/16,11/16]  atan(x) = atan(1/2) + atan( (t-0.5)/(1+t/2) )
 *      [11/16.19/16] atan(x) = atan( 1 ) + atan( (t-1)/(1+t) )
 *      [19/16,39/16] atan(x) = atan(3/2) + atan( (t-1.5)/(1+1.5t) )
 *      [39/16,INF]   atan(x) = atan(INF) + atan( -1/t )
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following
 * constants. The decimal values may be used, provided that the
 * compiler will convert from decimal to binary accurately enough
 * to produce the hexadecimal values shown.
 ','line_number':16,'multiline':True]
['text':' atan(0.5)hi 0x3FDDAC67, 0x0561BB4F ','line_number':41,'multiline':True]
['text':' atan(1.0)hi 0x3FE921FB, 0x54442D18 ','line_number':42,'multiline':True]
['text':' atan(1.5)hi 0x3FEF730B, 0xD281F69B ','line_number':43,'multiline':True]
['text':' atan(inf)hi 0x3FF921FB, 0x54442D18 ','line_number':44,'multiline':True]
['text':' atan(0.5)lo 0x3C7A2B7F, 0x222F65E2 ','line_number':48,'multiline':True]
['text':' atan(1.0)lo 0x3C81A626, 0x33145C07 ','line_number':49,'multiline':True]
['text':' atan(1.5)lo 0x3C700788, 0x7AF0CBBD ','line_number':50,'multiline':True]
['text':' atan(inf)lo 0x3C91A626, 0x33145C07 ','line_number':51,'multiline':True]
['text':' 0x3FD55555, 0x5555550D ','line_number':55,'multiline':True]
['text':' 0xBFC99999, 0x9998EBC4 ','line_number':56,'multiline':True]
['text':' 0x3FC24924, 0x920083FF ','line_number':57,'multiline':True]
['text':' 0xBFBC71C6, 0xFE231671 ','line_number':58,'multiline':True]
['text':' 0x3FB745CD, 0xC54C206E ','line_number':59,'multiline':True]
['text':' 0xBFB3B0F2, 0xAF749A6D ','line_number':60,'multiline':True]
['text':' 0x3FB10D66, 0xA0D03D51 ','line_number':61,'multiline':True]
['text':' 0xBFADDE2D, 0x52DEFD9A ','line_number':62,'multiline':True]
['text':' 0x3FA97B4B, 0x24760DEB ','line_number':63,'multiline':True]
['text':' 0xBFA2B444, 0x2C6A6C2F ','line_number':64,'multiline':True]
['text':' 0x3F90AD3A, 0xE322DA11 ','line_number':65,'multiline':True]
['text':' if |x| >= 2^66 ','line_number':80,'multiline':True]
['text':' NaN ','line_number':85,'multiline':True]
['text':' |x| < 0.4375 ','line_number':88,'multiline':True]
['text':' |x| < 2^-27 ','line_number':89,'multiline':True]
['text':' raise inexact ','line_number':90,'multiline':True]
['text':' |x| < 1.1875 ','line_number':95,'multiline':True]
['text':' 7/16 <=|x|<11/16 ','line_number':96,'multiline':True]
['text':' 11/16<=|x|< 19/16 ','line_number':98,'multiline':True]
['text':' |x| < 2.4375 ','line_number':102,'multiline':True]
['text':' 2.4375 <= |x| < 2^66 ','line_number':104,'multiline':True]
['text':' end of argument reduction ','line_number':108,'multiline':True]
['text':' break sum from i=0 to 10 aT[i]z**(i+1) into odd and even poly ','line_number':111,'multiline':True]
