['text':' @(#)s_log1p.c 5.1 93/09/24 ','line_number':1,'multiline':True]
['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':2,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':13,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':14,'multiline':False]
['text':' double log1p(double x)
 *
 * Method :
 *   1. Argument Reduction: find k and f such that
 *			1+x = 2^k * (1+f),
 *	   where  sqrt(2)/2 < 1+f < sqrt(2) .
 *
 *      Note. If k=0, then f=x is exact. However, if k!=0, then f
 *	may not be representable exactly. In that case, a correction
 *	term is need. Let u=1+x rounded. Let c = (1+x)-u, then
 *	log(1+x) - log(u) ~ c/u. Thus, we proceed to compute log(u),
 *	and add back the correction term c/u.
 *	(Note: when x > 2**53, one can simply return log(x))
 *
 *   2. Approximation of log1p(f).
 *	Let s = f/(2+f) ; based on log(1+f) = log(1+s) - log(1-s)
 *		 = 2s + 2/3 s**3 + 2/5 s**5 + .....,
 *	     	 = 2s + s*R
 *      We use a special Reme algorithm on [0,0.1716] to generate
 * 	a polynomial of degree 14 to approximate R The maximum error
 *	of this polynomial approximation is bounded by 2**-58.45. In
 *	other words,
 *		        2      4      6      8      10      12      14
 *	    R(z) ~ Lp1*s +Lp2*s +Lp3*s +Lp4*s +Lp5*s  +Lp6*s  +Lp7*s
 *  	(the values of Lp1 to Lp7 are listed in the program)
 *	and
 *	    |      2          14          |     -58.45
 *	    | Lp1*s +...+Lp7*s    -  R(z) | <= 2
 *	    |                             |
 *	Note that 2s = f - s*f = f - hfsq + s*hfsq, where hfsq = f*f/2.
 *	In order to guarantee error in log below 1ulp, we compute log
 *	by
 *		log1p(f) = f - (hfsq - s*(hfsq+R)).
 *
 *	3. Finally, log1p(x) = k*ln2 + log1p(f).
 *		 	     = k*ln2_hi+(f-(hfsq-(s*(hfsq+R)+k*ln2_lo)))
 *	   Here ln2 is split into two floating point number:
 *			ln2_hi + ln2_lo,
 *	   where n*ln2_hi is always exact for |n| < 2000.
 *
 * Special cases:
 *	log1p(x) is NaN with signal if x < -1 (including -INF) ;
 *	log1p(+INF) is +INF; log1p(-1) is -INF with signal;
 *	log1p(NaN) is that NaN with no signal.
 *
 * Accuracy:
 *	according to an error analysis, the error is always less than
 *	1 ulp (unit in the last place).
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following
 * constants. The decimal values may be used, provided that the
 * compiler will convert from decimal to binary accurately enough
 * to produce the hexadecimal values shown.
 *
 * Note: Assuming log() return accurate answer, the following
 * 	 algorithm can be used to compute log1p(x) to within a few ULP:
 *
 *		u = 1+x;
 *		if(u==1.0) return x ; else
 *			   return log(u)*(x/(u-1.0));
 *
 *	 See HP-15C Advanced Functions Handbook, p.193.
 ','line_number':16,'multiline':True]
['text':' 3fe62e42 fee00000 ','line_number':86,'multiline':True]
['text':' 3dea39ef 35793c76 ','line_number':87,'multiline':True]
['text':' 43500000 00000000 ','line_number':88,'multiline':True]
['text':' 3FE55555 55555593 ','line_number':89,'multiline':True]
['text':' 3FD99999 9997FA04 ','line_number':90,'multiline':True]
['text':' 3FD24924 94229359 ','line_number':91,'multiline':True]
['text':' 3FCC71C5 1D8E78AF ','line_number':92,'multiline':True]
['text':' 3FC74664 96CB03DE ','line_number':93,'multiline':True]
['text':' 3FC39A09 D078C69F ','line_number':94,'multiline':True]
['text':' 3FC2F112 DF3E5244 ','line_number':95,'multiline':True]
['text':' 1+x < sqrt(2)+ ','line_number':110,'multiline':True]
['text':' x <= -1.0 ','line_number':111,'multiline':True]
['text':' log1p(-1)=+inf ','line_number':112,'multiline':True]
['text':' log1p(x<-1)=NaN ','line_number':113,'multiline':True]
['text':' |x| < 2**-29 ','line_number':115,'multiline':True]
['text':' raise inexact ','line_number':116,'multiline':True]
['text':' |x| < 2**-54 ','line_number':117,'multiline':True]
['text':' sqrt(2)/2- <= 1+x < sqrt(2)+ ','line_number':123,'multiline':True]
['text':' correction term ','line_number':131,'multiline':True]
['text':'
	     * The approximation to sqrt(2) used in thresholds is not
	     * critical.  However, the ones used above must give less
	     * strict bounds than the one here so that the k==0 case is
	     * never reached from here, since here we have committed to
	     * using the correction term but don't use it if k==0.
	     ','line_number':140,'multiline':True]
['text':' u ~< sqrt(2) ','line_number':147,'multiline':True]
['text':' normalize u ','line_number':148,'multiline':True]
['text':' normalize u/2 ','line_number':151,'multiline':True]
['text':' |f| < 2**-20 ','line_number':157,'multiline':True]
