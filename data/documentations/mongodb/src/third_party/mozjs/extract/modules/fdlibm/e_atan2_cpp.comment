['text':' @(#)e_atan2.c 1.3 95/01/18 ','line_number':2,'multiline':True]
['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunSoft, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice 
 * is preserved.
 * ====================================================
 *
 ','line_number':3,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':15,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':16,'multiline':False]
['text':' __ieee754_atan2(y,x)
 * Method :
 *	1. Reduce y to positive by atan2(y,x)=-atan2(-y,x).
 *	2. Reduce x to positive by (if x and y are unexceptional): 
 *		ARG (x+iy) = arctan(y/x)   	   ... if x > 0,
 *		ARG (x+iy) = pi - arctan[y/(-x)]   ... if x < 0,
 *
 * Special cases:
 *
 *	ATAN2((anything), NaN ) is NaN;
 *	ATAN2(NAN , (anything) ) is NaN;
 *	ATAN2(+-0, +(anything but NaN)) is +-0  ;
 *	ATAN2(+-0, -(anything but NaN)) is +-pi ;
 *	ATAN2(+-(anything but 0 and NaN), 0) is +-pi/2;
 *	ATAN2(+-(anything but INF and NaN), +INF) is +-0 ;
 *	ATAN2(+-(anything but INF and NaN), -INF) is +-pi;
 *	ATAN2(+-INF,+INF ) is +-pi/4 ;
 *	ATAN2(+-INF,-INF ) is +-3pi/4;
 *	ATAN2(+-INF, (anything but,0,NaN, and INF)) is +-pi/2;
 *
 * Constants:
 * The hexadecimal values are the intended ones for the following 
 * constants. The decimal values may be used, provided that the 
 * compiler will convert from decimal to binary accurately enough 
 * to produce the hexadecimal values shown.
 ','line_number':18,'multiline':True]
['text':' 0x3FE921FB, 0x54442D18 ','line_number':53,'multiline':True]
['text':' 0x3FF921FB, 0x54442D18 ','line_number':54,'multiline':True]
['text':' 0x400921FB, 0x54442D18 ','line_number':55,'multiline':True]
['text':' 0x3CA1A626, 0x33145C07 ','line_number':57,'multiline':True]
['text':' x or y is NaN ','line_number':71,'multiline':True]
['text':' x=1.0 ','line_number':73,'multiline':True]
['text':' 2*sign(x)+sign(y) ','line_number':74,'multiline':True]
['text':' when y = 0 ','line_number':76,'multiline':True]
['text':' atan(+-0,+anything)=+-0 ','line_number':80,'multiline':True]
['text':' atan(+0,-anything) = pi ','line_number':81,'multiline':True]
['text':' atan(-0,-anything) =-pi ','line_number':82,'multiline':True]
['text':' when x = 0 ','line_number':85,'multiline':True]
['text':' when x is INF ','line_number':88,'multiline':True]
['text':' atan(+INF,+INF) ','line_number':92,'multiline':True]
['text':' atan(-INF,+INF) ','line_number':93,'multiline':True]
['text':'atan(+INF,-INF)','line_number':94,'multiline':True]
['text':'atan(-INF,-INF)','line_number':95,'multiline':True]
['text':' atan(+...,+INF) ','line_number':99,'multiline':True]
['text':' atan(-...,+INF) ','line_number':100,'multiline':True]
['text':' atan(+...,-INF) ','line_number':101,'multiline':True]
['text':' atan(-...,-INF) ','line_number':102,'multiline':True]
['text':' when y is INF ','line_number':106,'multiline':True]
['text':' compute y/x ','line_number':109,'multiline':True]
['text':' |y/x| >  2**60 ','line_number':111,'multiline':True]
['text':' 0 > |y|/x > -2**-60 ','line_number':115,'multiline':True]
['text':' safe to do y/x ','line_number':116,'multiline':True]
['text':' atan(+,+) ','line_number':118,'multiline':True]
['text':' atan(-,+) ','line_number':119,'multiline':True]
['text':' atan(+,-) ','line_number':120,'multiline':True]
['text':' case 3 ','line_number':121,'multiline':True]
['text':' atan(-,-) ','line_number':122,'multiline':True]
