['text':' @(#)e_log10.c 1.3 95/01/18 ','line_number':2,'multiline':True]
['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunSoft, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice 
 * is preserved.
 * ====================================================
 ','line_number':3,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':14,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':15,'multiline':False]
['text':'
 * Return the base 2 logarithm of x.  See e_log.c and k_log.h for most
 * comments.
 *
 * This reduces x to {k, 1+f} exactly as in e_log.c, then calls the kernel,
 * then does the combining and scaling steps
 *    log2(x) = (f - 0.5*f*f + k_log1p(f)) / ln2 + k
 * in not-quite-routine extra precision.
 ','line_number':17,'multiline':True]
['text':' 0x43500000, 0x00000000 ','line_number':33,'multiline':True]
['text':' 0x3ff71547, 0x65200000 ','line_number':34,'multiline':True]
['text':' 0x3de705fc, 0x2eefa200 ','line_number':35,'multiline':True]
['text':' x < 2**-1022  ','line_number':50,'multiline':True]
['text':' log(+-0)=-inf ','line_number':52,'multiline':True]
['text':' log(-#) = NaN ','line_number':53,'multiline':True]
['text':' subnormal number, scale up x ','line_number':54,'multiline':True]
['text':' log(1) = +0 ','line_number':59,'multiline':True]
['text':' normalize x or x/2 ','line_number':63,'multiline':True]
['text':'
	 * f-hfsq must (for args near 1) be evaluated in extra precision
	 * to avoid a large cancellation when x is near sqrt(2) or 1/sqrt(2).
	 * This is fairly efficient since f-hfsq only depends on f, so can
	 * be evaluated in parallel with R.  Not combining hfsq with R also
	 * keeps R small (though not as small as a true `lo' term would be),
	 * so that extra precision is not needed for terms involving R.
	 *
	 * Compiler bugs involving extra precision used to break Dekker's
	 * theorem for spitting f-hfsq as hi+lo, unless double_t was used
	 * or the multi-precision calculations were avoided when double_t
	 * has extra precision.  These problems are now automatically
	 * avoided as a side effect of the optimization of combining the
	 * Dekker splitting step with the clear-low-bits step.
	 *
	 * y must (for args near sqrt(2) and 1/sqrt(2)) be added in extra
	 * precision to avoid a very large cancellation when x is very near
	 * these values.  Unlike the above cancellations, this problem is
	 * specific to base 2.  It is strange that adding +-1 is so much
	 * harder than adding +-ln2 or +-log10_2.
	 *
	 * This uses Dekker's theorem to normalize y+val_hi, so the
	 * compiler bugs are back in some configurations, sigh.  And I
	 * don't want to used double_t to avoid them, since that gives a
	 * pessimization and the support for avoiding the pessimization
	 * is not yet available.
	 *
	 * The multi-precision calculations for the multiplications are
	 * routine.
	 ','line_number':70,'multiline':True]
['text':' spadd(val_hi, val_lo, y), except for not using double_t: ','line_number':106,'multiline':True]
