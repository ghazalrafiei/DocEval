['text':' @(#)s_cbrt.c 5.1 93/09/24 ','line_number':1,'multiline':True]
['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 *
 * Optimized by Bruce D. Evans.
 ','line_number':2,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':15,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':16,'multiline':False]
['text':' cbrt(x)
 * Return cube root of x
 ','line_number':21,'multiline':True]
['text':' B1 = (1023-1023/3-0.03306235651)*2**20 ','line_number':25,'multiline':True]
['text':' B2 = (1023-1023/3-54/3-0.03306235651)*2**20 ','line_number':26,'multiline':True]
['text':' |1/cbrt(x) - p(x)| < 2**-23.5 (~[-7.93e-8, 7.929e-8]). ','line_number':28,'multiline':True]
['text':' 0x3ffe03e6, 0x0f61e692 ','line_number':30,'multiline':True]
['text':' 0xbffe28e0, 0x92f02420 ','line_number':31,'multiline':True]
['text':' 0x3ff9f160, 0x4a49d6c2 ','line_number':32,'multiline':True]
['text':' 0xbfe844cb, 0xbee751d9 ','line_number':33,'multiline':True]
['text':' 0x3fc2b000, 0xd4e4edd7 ','line_number':34,'multiline':True]
['text':' sign= sign(x) ','line_number':49,'multiline':True]
['text':' cbrt(NaN,INF) is itself ','line_number':51,'multiline':True]
['text':'
     * Rough cbrt to 5 bits:
     *    cbrt(2**e*(1+m) ~= 2**(e/3)*(1+(e%3+m)/3)
     * where e is integral and >= 0, m is real and in [0, 1), and "/" and
     * "%" are integer division and modulus with rounding towards minus
     * infinity.  The RHS is always >= the LHS and has a maximum relative
     * error of about 1 in 16.  Adding a bias of -0.03306235651 to the
     * (e%3+m)/3 term reduces the error to about 1 in 32. With the IEEE
     * floating point representation, for finite positive normal values,
     * ordinary integer division of the value in bits magically gives
     * almost exactly the RHS of the above provided we first subtract the
     * exponent bias (1023 for doubles) and later add it back.  We do the
     * subtraction virtually to keep e >= 0 so that ordinary integer
     * division rounds towards minus infinity; this is also efficient.
     ','line_number':53,'multiline':True]
['text':' zero or subnormal? ','line_number':68,'multiline':True]
['text':' cbrt(0) is itself ','line_number':70,'multiline':True]
['text':' set t= 2**54 ','line_number':71,'multiline':True]
['text':'
     * New cbrt to 23 bits:
     *    cbrt(x) = t*cbrt(x/t**3) ~= t*P(t**3/x)
     * where P(r) is a polynomial of degree 4 that approximates 1/cbrt(r)
     * to within 2**-23.5 when |r - 1| < 1/10.  The rough approximation
     * has produced t such than |t/cbrt(x) - 1| ~< 1/32, and cubing this
     * gives us bounds for r = t**3/x.
     *
     * Try to optimize for parallel evaluation as in k_tanf.c.
     ','line_number':78,'multiline':True]
['text':'
     * Round t away from zero to 23 bits (sloppily except for ensuring that
     * the result is larger in magnitude than cbrt(x) but not much more than
     * 2 23-bit ulps larger).  With rounding towards zero, the error bound
     * would be ~5/6 instead of ~4/6.  With a maximum error of 2 23-bit ulps
     * in the rounded t, the infinite-precision error in the Newton
     * approximation barely affects third digit in the final error
     * 0.667; the error in the rounded t can be up to about 3 23-bit ulps
     * before the final error is larger than 0.667 ulps.
     ','line_number':91,'multiline':True]
['text':' one step Newton iteration to 53 bits with error < 0.667 ulps ','line_number':105,'multiline':True]
['text':' t*t is exact ','line_number':106,'multiline':True]
['text':' error <= 0.5 ulps; |r| < |t| ','line_number':107,'multiline':True]
['text':' t+t is exact ','line_number':108,'multiline':True]
['text':' r-t is exact; w+r ~= 3*t ','line_number':109,'multiline':True]
['text':' error <= 0.5 + 0.5/3 + epsilon ','line_number':110,'multiline':True]
