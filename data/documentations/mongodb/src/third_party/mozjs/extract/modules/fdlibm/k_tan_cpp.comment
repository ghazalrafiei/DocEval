['text':' @(#)k_tan.c 1.5 04/04/22 SMI ','line_number':1,'multiline':True]
['text':'
 * ====================================================
 * Copyright 2004 Sun Microsystems, Inc.  All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':3,'multiline':True]
['text':' INDENT OFF ','line_number':13,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':14,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':15,'multiline':False]
['text':' __kernel_tan( x, y, k )
 * kernel tan function on ~[-pi/4, pi/4] (except on -0), pi/4 ~ 0.7854
 * Input x is assumed to be bounded by ~pi/4 in magnitude.
 * Input y is the tail of x.
 * Input k indicates whether tan (if k = 1) or -1/tan (if k = -1) is returned.
 *
 * Algorithm
 *	1. Since tan(-x) = -tan(x), we need only to consider positive x.
 *	2. Callers must return tan(-0) = -0 without calling here since our
 *	   odd polynomial is not evaluated in a way that preserves -0.
 *	   Callers may do the optimization tan(x) ~ x for tiny x.
 *	3. tan(x) is approximated by a odd polynomial of degree 27 on
 *	   [0,0.67434]
 *		  	         3             27
 *	   	tan(x) ~ x + T1*x + ... + T13*x
 *	   where
 *
 * 	        |tan(x)         2     4            26   |     -59.2
 * 	        |----- - (1+T1*x +T2*x +.... +T13*x    )| <= 2
 * 	        |  x 					|
 *
 *	   Note: tan(x+y) = tan(x) + tan'(x)*y
 *		          ~ tan(x) + (1+x*x)*y
 *	   Therefore, for better accuracy in computing tan(x+y), let
 *		     3      2      2       2       2
 *		r = x *(T2+x *(T3+x *(...+x *(T12+x *T13))))
 *	   then
 *		 		    3    2
 *		tan(x+y) = x + (T1*x + (x *(r+y)+y))
 *
 *      4. For x in [0.67434,pi/4],  let y = pi/4 - x, then
 *		tan(x) = tan(pi/4-y) = (1-tan(y))/(1+tan(y))
 *		       = 1 - 2*(tan(y) - (tan(y)^2)/(1+tan(y)))
 ','line_number':17,'multiline':True]
['text':' 3FD55555, 55555563 ','line_number':54,'multiline':True]
['text':' 3FC11111, 1110FE7A ','line_number':55,'multiline':True]
['text':' 3FABA1BA, 1BB341FE ','line_number':56,'multiline':True]
['text':' 3F9664F4, 8406D637 ','line_number':57,'multiline':True]
['text':' 3F8226E3, E96E8493 ','line_number':58,'multiline':True]
['text':' 3F6D6D22, C9560328 ','line_number':59,'multiline':True]
['text':' 3F57DBC8, FEE08315 ','line_number':60,'multiline':True]
['text':' 3F4344D8, F2F26501 ','line_number':61,'multiline':True]
['text':' 3F3026F7, 1A8D1068 ','line_number':62,'multiline':True]
['text':' 3F147E88, A03792A6 ','line_number':63,'multiline':True]
['text':' 3F12B80F, 32F0A7E9 ','line_number':64,'multiline':True]
['text':' BEF375CB, DB605373 ','line_number':65,'multiline':True]
['text':' 3EFB2A70, 74BF7AD4 ','line_number':66,'multiline':True]
['text':' one ','line_number':67,'multiline':True]
['text':' 3FF00000, 00000000 ','line_number':67,'multiline':True]
['text':' pio4 ','line_number':68,'multiline':True]
['text':' 3FE921FB, 54442D18 ','line_number':68,'multiline':True]
['text':' pio4lo ','line_number':69,'multiline':True]
['text':' 3C81A626, 33145C07 ','line_number':69,'multiline':True]
['text':' INDENT ON ','line_number':75,'multiline':True]
['text':' high word of |x| ','line_number':83,'multiline':True]
['text':' |x| >= 0.6744 ','line_number':84,'multiline':True]
['text':'
	 * Break x^5*(T[1]+x^2*T[2]+...) into
	 * x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
	 * x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
	 ','line_number':96,'multiline':True]
['text':'
		 * if allow error up to 2 ulp, simply return
		 * -1.0 / (x+r) here
		 ','line_number':117,'multiline':True]
['text':' compute -1.0 / (x+r) accurately ','line_number':121,'multiline':True]
['text':' z+v = r+x ','line_number':125,'multiline':True]
['text':' a = -1.0/w ','line_number':126,'multiline':True]
