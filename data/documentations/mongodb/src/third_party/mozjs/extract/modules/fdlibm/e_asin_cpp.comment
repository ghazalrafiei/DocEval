['text':' @(#)e_asin.c 1.3 95/01/18 ','line_number':2,'multiline':True]
['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunSoft, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':3,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':14,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':15,'multiline':False]
['text':' __ieee754_asin(x)
 * Method :                  
 *	Since  asin(x) = x + x^3/6 + x^5*3/40 + x^7*15/336 + ...
 *	we approximate asin(x) on [0,0.5] by
 *		asin(x) = x + x*x^2*R(x^2)
 *	where
 *		R(x^2) is a rational approximation of (asin(x)-x)/x^3 
 *	and its remez error is bounded by
 *		|(asin(x)-x)/x^3 - R(x^2)| < 2^(-58.75)
 *
 *	For x in [0.5,1]
 *		asin(x) = pi/2-2*asin(sqrt((1-x)/2))
 *	Let y = (1-x), z = y/2, s := sqrt(z), and pio2_hi+pio2_lo=pi/2;
 *	then for x>0.98
 *		asin(x) = pi/2 - 2*(s+s*z*R(z))
 *			= pio2_hi - (2*(s+s*z*R(z)) - pio2_lo)
 *	For x<=0.98, let pio4_hi = pio2_hi/2, then
 *		f = hi part of s;
 *		c = sqrt(z) - f = (z-f*f)/(s+f) 	...f+c=sqrt(z)
 *	and
 *		asin(x) = pi/2 - 2*(s+s*z*R(z))
 *			= pio4_hi+(pio4-2s)-(2s*z*R(z)-pio2_lo)
 *			= pio4_hi+(pio4-2f)-(2s*z*R(z)-(pio2_lo+2c))
 *
 * Special cases:
 *	if x is NaN, return x itself;
 *	if |x|>1, return NaN with invalid signal.
 *
 ','line_number':17,'multiline':True]
['text':' 0x3FF00000, 0x00000000 ','line_number':53,'multiline':True]
['text':' 0x3FF921FB, 0x54442D18 ','line_number':55,'multiline':True]
['text':' 0x3C91A626, 0x33145C07 ','line_number':56,'multiline':True]
['text':' 0x3FE921FB, 0x54442D18 ','line_number':57,'multiline':True]
['text':' coefficient for R(x^2) ','line_number':58,'multiline':True]
['text':' 0x3FC55555, 0x55555555 ','line_number':59,'multiline':True]
['text':' 0xBFD4D612, 0x03EB6F7D ','line_number':60,'multiline':True]
['text':' 0x3FC9C155, 0x0E884455 ','line_number':61,'multiline':True]
['text':' 0xBFA48228, 0xB5688F3B ','line_number':62,'multiline':True]
['text':' 0x3F49EFE0, 0x7501B288 ','line_number':63,'multiline':True]
['text':' 0x3F023DE1, 0x0DFDF709 ','line_number':64,'multiline':True]
['text':' 0xC0033A27, 0x1C8A2D4B ','line_number':65,'multiline':True]
['text':' 0x40002AE5, 0x9C598AC8 ','line_number':66,'multiline':True]
['text':' 0xBFE6066C, 0x1B8D0159 ','line_number':67,'multiline':True]
['text':' 0x3FB3B8C5, 0xB12E9282 ','line_number':68,'multiline':True]
['text':' |x|>= 1 ','line_number':77,'multiline':True]
['text':' asin(1)=+-pi/2 with inexact ','line_number':81,'multiline':True]
['text':' asin(|x|>1) is NaN ','line_number':83,'multiline':True]
['text':' |x|<0.5 ','line_number':84,'multiline':True]
['text':' if |x| < 2**-26 ','line_number':85,'multiline':True]
['text':' return x with inexact if x!=0','line_number':86,'multiline':True]
['text':' 1> |x|>= 0.5 ','line_number':94,'multiline':True]
['text':' if |x| > 0.975 ','line_number':100,'multiline':True]
