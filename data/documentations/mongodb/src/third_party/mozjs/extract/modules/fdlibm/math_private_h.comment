['text':'
 * ====================================================
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':1,'multiline':True]
['text':'
 * from: @(#)fdlibm.h 5.1 93/09/24
 * $FreeBSD$
 ','line_number':12,'multiline':True]
['text':'
 * Emulate FreeBSD internal double types.
 * Adapted from https://github.com/freebsd/freebsd-src/search?q=__double_t
 ','line_number':28,'multiline':True]
['text':'
 * The original fdlibm code used statements like:
 *	n0 = ((*(int*)&one)>>29)^1;		* index of high word *
 *	ix0 = *(n0+(int*)&x);			* high word of x *
 *	ix1 = *((1-n0)+(int*)&x);		* low word of x *
 * to dig two 32 bit words out of the 64 bit IEEE floating point
 * value.  That is non-ANSI, and, moreover, the gcc instruction
 * scheduler gets it wrong.  We instead use the following macros.
 * Unlike the original code, we determine the endianness at compile
 * time, not at run time; I don't see much benefit to selecting
 * endianness at run time.
 ','line_number':36,'multiline':True]
['text':' A union which permits us to convert between a long double and
   four 32 bit ints.  ','line_number':56,'multiline':True]
['text':'
 * A union which permits us to convert between a double and two 32 bit
 * ints.
 ','line_number':97,'multiline':True]
['text':' Get two 32 bit ints from a double.  ','line_number':138,'multiline':True]
['text':' Get a 64-bit int from a double. ','line_number':148,'multiline':True]
['text':' Get the more significant 32 bit int from a double.  ','line_number':156,'multiline':True]
['text':' Get the less significant 32 bit int from a double.  ','line_number':165,'multiline':True]
['text':' Set a double from two 32 bit ints.  ','line_number':174,'multiline':True]
['text':' Set a double from a 64-bit int. ','line_number':184,'multiline':True]
['text':' Set the more significant 32 bits of a double from an int.  ','line_number':192,'multiline':True]
['text':' Set the less significant 32 bits of a double from an int.  ','line_number':202,'multiline':True]
['text':'
 * A union which permits us to convert between a float and a 32 bit
 * int.
 ','line_number':212,'multiline':True]
['text':' FIXME: Assumes 32 bit int.  ','line_number':220,'multiline':True]
['text':' Get a 32 bit int from a float.  ','line_number':224,'multiline':True]
['text':' Set a float from a 32 bit int.  ','line_number':233,'multiline':True]
['text':'
 * Get expsign and mantissa as 16 bit and 64 bit ints from an 80 bit long
 * double.
 ','line_number':242,'multiline':True]
['text':'
 * Get expsign and mantissa as one 16 bit and two 64 bit ints from a 128 bit
 * long double.
 ','line_number':255,'multiline':True]
['text':' Get expsign as a 16 bit int from a long double.  ','line_number':269,'multiline':True]
['text':'
 * Set an 80 bit long double from a 16 bit int expsign and a 64 bit int
 * mantissa.
 ','line_number':278,'multiline':True]
['text':'
 * Set a 128 bit long double from a 16 bit int expsign and two 64 bit ints
 * comprising the mantissa.
 ','line_number':291,'multiline':True]
['text':' Set expsign of a long double from a 16 bit int.  ','line_number':305,'multiline':True]
['text':' Long double constants are broken on i386. ','line_number':316,'multiline':True]
['text':' The above works on non-i386 too, but we use this to check v. ','line_number':322,'multiline':True]
['text':'
 * Attempt to get strict C99 semantics for assignment with non-C99 compilers.
 ','line_number':327,'multiline':True]
['text':' FLT_EVAL_METHOD ','line_number':355,'multiline':True]
['text':' Support switching the mode to FP_PE if necessary. ','line_number':357,'multiline':True]
['text':' Default return statement if hack*_t() is not used. ','line_number':390,'multiline':True]
['text':'
 * 2sum gives the same result as 2sumF without requiring |a| >= |b| or
 * a == 0, but is slower.
 ','line_number':393,'multiline':True]
['text':'
 * 2sumF algorithm.
 *
 * "Normalize" the terms in the infinite-precision expression a + b for
 * the sum of 2 floating point values so that b is as small as possible
 * relative to 'a'.  (The resulting 'a' is the value of the expression in
 * the same precision as 'a' and the resulting b is the rounding error.)
 * |a| must be >= |b| or 0, b's type must be no larger than 'a's type, and
 * exponent overflow or underflow must not occur.  This uses a Theorem of
 * Dekker (1971).  See Knuth (1981) 4.2.2 Theorem C.  The name "TwoSum"
 * is apparently due to Skewchuk (1997).
 *
 * For this to always work, assignment of a + b to 'a' must not retain any
 * extra precision in a + b.  This is required by C standards but broken
 * in many compilers.  The brokenness cannot be worked around using
 * STRICT_ASSIGN() like we do elsewhere, since the efficiency of this
 * algorithm would be destroyed by non-null strict assignments.  (The
 * compilers are correct to be broken -- the efficiency of all floating
 * point code calculations would be destroyed similarly if they forced the
 * conversions.)
 *
 * Fortunately, a case that works well can usually be arranged by building
 * any extra precision into the type of 'a' -- 'a' should have type float_t,
 * double_t or long double.  b's type should be no larger than 'a's type.
 * Callers should use these types with scopes as large as possible, to
 * reduce their own extra-precision and efficiciency problems.  In
 * particular, they shouldn't convert back and forth just to call here.
 ','line_number':406,'multiline':True]
['text':' The next 2 assertions are weak if (a) is already long double. ','line_number':447,'multiline':True]
['text':' !DEBUG ','line_number':454,'multiline':True]
['text':' DEBUG ','line_number':462,'multiline':True]
['text':'
 * Set x += c, where x is represented in extra precision as a + b.
 * x must be sufficiently normalized and sufficiently larger than c,
 * and the result is then sufficiently normalized.
 *
 * The details of ordering are that |a| must be >= |c| (so that (a, c)
 * can be normalized without extra work to swap 'a' with c).  The details of
 * the normalization are that b must be small relative to the normalized 'a'.
 * Normalization of (a, c) makes the normalized c tiny relative to the
 * normalized a, so b remains small relative to 'a' in the result.  However,
 * b need not ever be tiny relative to 'a'.  For example, b might be about
 * 2**20 times smaller than 'a' to give about 20 extra bits of precision.
 * That is usually enough, and adding c (which by normalization is about
 * 2**53 times smaller than a) cannot change b significantly.  However,
 * cancellation of 'a' with c in normalization of (a, c) may reduce 'a'
 * significantly relative to b.  The caller must ensure that significant
 * cancellation doesn't occur, either by having c of the same sign as 'a',
 * or by having |c| a few percent smaller than |a|.  Pre-normalization of
 * (a, b) may help.
 *
 * This is is a variant of an algorithm of Kahan (see Knuth (1981) 4.2.2
 * exercise 19).  We gain considerable efficiency by requiring the terms to
 * be sufficiently normalized and sufficiently increasing.
 ','line_number':464,'multiline':True]
['text':'
 * Common routine to process the arguments to nan(), nanf(), and nanl().
 ','line_number':497,'multiline':True]
['text':'
 * Mix 0, 1 or 2 NaNs.  First add 0 to each arg.  This normally just turns
 * signaling NaNs into quiet NaNs by setting a quiet bit.  We do this
 * because we want to never return a signaling NaN, and also because we
 * don't want the quiet bit to affect the result.  Then mix the converted
 * args using the specified operation.
 *
 * When one arg is NaN, the result is typically that arg quieted.  When both
 * args are NaNs, the result is typically the quietening of the arg whose
 * mantissa is largest after quietening.  When neither arg is NaN, the
 * result may be NaN because it is indeterminate, or finite for subsequent
 * construction of a NaN as the indeterminate 0.0L/0.0L.
 *
 * Technical complications: the result in bits after rounding to the final
 * precision might depend on the runtime precision and/or on compiler
 * optimizations, especially when different register sets are used for
 * different precisions.  Try to make the result not depend on at least the
 * runtime precision by always doing the main mixing step in long double
 * precision.  Try to reduce dependencies on optimizations by adding the
 * the 0's in different precisions (unless everything is in long double
 * precision).
 ','line_number':502,'multiline':True]
['text':'
 * C99 specifies that complex numbers have the same representation as
 * an array of two elements, where the first element is the real part
 * and the second element is the imaginary part.
 ','line_number':529,'multiline':True]
['text':'
 * Inline functions that can be used to construct complex values.
 *
 * The C99 standard intends x+I*y to be used for this, but x+I*y is
 * currently unusable in general since gcc introduces many overflow,
 * underflow, sign and efficiency bugs by rewriting I*y as
 * (0.0+I)*(y+0.0*I) and laboriously computing the full complex product.
 * In particular, I*Inf is corrupted to NaN+I*Inf, and I*-0 is corrupted
 * to -0.0+I*0.0.
 *
 * The C11 standard introduced the macros CMPLX(), CMPLXF() and CMPLXL()
 * to construct complex values.  Compilers that conform to the C99
 * standard require the following functions to avoid the above issues.
 ','line_number':549,'multiline':True]
['text':' _COMPLEX_H ','line_number':600,'multiline':True]
['text':'
 * The rnint() family rounds to the nearest integer for a restricted range
 * range of args (up to about 2**MANT_DIG).  We assume that the current
 * rounding mode is FE_TONEAREST so that this can be done efficiently.
 * Extra precision causes more problems in practice, and we only centralize
 * this here to reduce those problems, and have not solved the efficiency
 * problems.  The exp2() family uses a more delicate version of this that
 * requires extracting bits from the intermediate value, so it is not
 * centralized here and should copy any solution of the efficiency problems.
 ','line_number':602,'multiline':True]
['text':'
	 * This casts to double to kill any extra precision.  This depends
	 * on the cast being applied to a double_t to avoid compiler bugs
	 * (this is a cleaner version of STRICT_ASSIGN()).  This is
	 * inefficient if there actually is extra precision, but is hard
	 * to improve on.  We use double_t in the API to minimise conversions
	 * for just calling here.  Note that we cannot easily change the
	 * magic number to the one that works directly with double_t, since
	 * the rounding precision is variable at runtime on x86 so the
	 * magic number would need to be variable.  Assuming that the
	 * rounding precision is always the default is too fragile.  This
	 * and many other complications will move when the default is
	 * changed to FP_PE.
	 ','line_number':616,'multiline':True]
['text':'
 * irint() and i64rint() give the same result as casting to their integer
 * return type provided their arg is a floating point integer.  They can
 * sometimes be more efficient because no rounding is required.
 ','line_number':633,'multiline':True]
['text':' Write a pari script to test things externally. ','line_number':659,'multiline':True]
['text':' Hack to give more-problematic args. ','line_number':673,'multiline':True]
['text':' !DOPRINT_LD80 && !DOPRINT_D64 (LD128 only) ','line_number':717,'multiline':True]
['text':' DOPRINT_LD80 ','line_number':739,'multiline':True]
['text':' !DOPRINT ','line_number':741,'multiline':True]
['text':' DOPRINT ','line_number':745,'multiline':True]
['text':'
 * ieee style elementary functions
 *
 * We rename functions here to improve other sources' diffability
 * against fdlibm.
 ','line_number':783,'multiline':True]
['text':' fdlibm kernel function ','line_number':881,'multiline':True]
['text':' double precision kernel functions ','line_number':884,'multiline':True]
['text':' float precision kernel functions ','line_number':896,'multiline':True]
['text':' long double precision kernel functions ','line_number':914,'multiline':True]
['text':' !_MATH_PRIVATE_H_ ','line_number':919,'multiline':True]
