['text':' @(#)e_pow.c 1.5 04/04/22 SMI ','line_number':1,'multiline':True]
['text':'
 * ====================================================
 * Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ====================================================
 ','line_number':2,'multiline':True]
['text':'#include <sys/cdefs.h>','line_number':12,'multiline':False]
['text':'__FBSDID("$FreeBSD$");','line_number':13,'multiline':False]
['text':' __ieee754_pow(x,y) return x**y
 *
 *		      n
 * Method:  Let x =  2   * (1+f)
 *	1. Compute and return log2(x) in two pieces:
 *		log2(x) = w1 + w2,
 *	   where w1 has 53-24 = 29 bit trailing zeros.
 *	2. Perform y*log2(x) = n+y' by simulating multi-precision
 *	   arithmetic, where |y'|<=0.5.
 *	3. Return x**y = 2**n*exp(y'*log2)
 *
 * Special cases:
 *	1.  (anything) ** 0  is 1
 *	2.  (anything) ** 1  is itself
 *	3.  (anything) ** NAN is NAN except 1 ** NAN = 1
 *	4.  NAN ** (anything except 0) is NAN
 *	5.  +-(|x| > 1) **  +INF is +INF
 *	6.  +-(|x| > 1) **  -INF is +0
 *	7.  +-(|x| < 1) **  +INF is +0
 *	8.  +-(|x| < 1) **  -INF is +INF
 *	9.  +-1         ** +-INF is 1
 *	10. +0 ** (+anything except 0, NAN)               is +0
 *	11. -0 ** (+anything except 0, NAN, odd integer)  is +0
 *	12. +0 ** (-anything except 0, NAN)               is +INF
 *	13. -0 ** (-anything except 0, NAN, odd integer)  is +INF
 *	14. -0 ** (odd integer) = -( +0 ** (odd integer) )
 *	15. +INF ** (+anything except 0,NAN) is +INF
 *	16. +INF ** (-anything except 0,NAN) is +0
 *	17. -INF ** (anything)  = -0 ** (-anything)
 *	18. (-anything) ** (integer) is (-1)**(integer)*(+anything**integer)
 *	19. (-anything except 0 and inf) ** (non-integer) is NAN
 *
 * Accuracy:
 *	pow(x,y) returns x**y nearly rounded. In particular
 *			pow(integer,integer)
 *	always returns the correct integer provided it is
 *	representable.
 *
 * Constants :
 * The hexadecimal values are the intended ones for the following
 * constants. The decimal values may be used, provided that the
 * compiler will convert from decimal to binary accurately enough
 * to produce the hexadecimal values shown.
 ','line_number':15,'multiline':True]
['text':' 0x3FE2B803, 0x40000000 ','line_number':67,'multiline':True]
['text':' 0x3E4CFDEB, 0x43CFD006 ','line_number':68,'multiline':True]
['text':' 0x3fd55555, 0x55555555 ','line_number':72,'multiline':True]
['text':' 0x43400000, 0x00000000 ','line_number':75,'multiline':True]
['text':' poly coefs for (3/2)*(log(x)-2s-2/3*s**3 ','line_number':78,'multiline':True]
['text':' 0x3FE33333, 0x33333303 ','line_number':79,'multiline':True]
['text':' 0x3FDB6DB6, 0xDB6FABFF ','line_number':80,'multiline':True]
['text':' 0x3FD55555, 0x518F264D ','line_number':81,'multiline':True]
['text':' 0x3FD17460, 0xA91D4101 ','line_number':82,'multiline':True]
['text':' 0x3FCD864A, 0x93C9DB65 ','line_number':83,'multiline':True]
['text':' 0x3FCA7E28, 0x4A454EEF ','line_number':84,'multiline':True]
['text':' 0x3FC55555, 0x5555553E ','line_number':85,'multiline':True]
['text':' 0xBF66C16C, 0x16BEBD93 ','line_number':86,'multiline':True]
['text':' 0x3F11566A, 0xAF25DE2C ','line_number':87,'multiline':True]
['text':' 0xBEBBBD41, 0xC5D26BF1 ','line_number':88,'multiline':True]
['text':' 0x3E663769, 0x72BEA4D0 ','line_number':89,'multiline':True]
['text':' 0x3FE62E42, 0xFEFA39EF ','line_number':90,'multiline':True]
['text':' 0x3FE62E43, 0x00000000 ','line_number':91,'multiline':True]
['text':' 0xBE205C61, 0x0CA86C39 ','line_number':92,'multiline':True]
['text':' -(1024-log2(ovfl+.5ulp)) ','line_number':93,'multiline':True]
['text':' 0x3FEEC709, 0xDC3A03FD =2/(3ln2) ','line_number':94,'multiline':True]
['text':' 0x3FEEC709, 0xE0000000 =(float)cp ','line_number':95,'multiline':True]
['text':' 0xBE3E2FE0, 0x145B01F5 =tail of cp_h','line_number':96,'multiline':True]
['text':' 0x3FF71547, 0x652B82FE =1/ln2 ','line_number':97,'multiline':True]
['text':' 0x3FF71547, 0x60000000 =24b 1/ln2','line_number':98,'multiline':True]
['text':' 0x3E54AE0B, 0xF85DDF44 =1/ln2 tail','line_number':99,'multiline':True]
['text':' y==zero: x**0 = 1 ','line_number':114,'multiline':True]
['text':' x==1: 1**y = 1, even if y is NaN ','line_number':117,'multiline':True]
['text':' y!=zero: result is NaN if either arg is NaN ','line_number':120,'multiline':True]
['text':' determine if y is an odd int when x < 0
     * yisint = 0	... y is not an integer
     * yisint = 1	... y is an odd int
     * yisint = 2	... y is an even int
     ','line_number':125,'multiline':True]
['text':' even integer y ','line_number':132,'multiline':True]
['text':' exponent ','line_number':134,'multiline':True]
['text':' special value of y ','line_number':145,'multiline':True]
['text':' y is +-inf ','line_number':147,'multiline':True]
['text':' (-1)**+-inf is 1 ','line_number':149,'multiline':True]
['text':' (|x|>1)**+-inf = inf,0 ','line_number':150,'multiline':True]
['text':' (|x|<1)**-,+inf = inf,0 ','line_number':152,'multiline':True]
['text':' y is  +-1 ','line_number':155,'multiline':True]
['text':' y is  2 ','line_number':158,'multiline':True]
['text':' y is  0.5 ','line_number':159,'multiline':True]
['text':' x >= +0 ','line_number':160,'multiline':True]
['text':' special value of x ','line_number':166,'multiline':True]
['text':'x is +-0,+-inf,+-1','line_number':169,'multiline':True]
['text':' z = (1/|x|) ','line_number':170,'multiline':True]
['text':' (-1)**non-int is NaN ','line_number':173,'multiline':True]
['text':' (x<0)**odd = -(|x|**odd) ','line_number':175,'multiline':True]
['text':' CYGNUS LOCAL + fdlibm-5.3 fix: This used to be
	n = (hx>>31)+1;
       but ANSI C says a right shift of a signed negative quantity is
       implementation defined.  ','line_number':181,'multiline':True]
['text':' (x<0)**(non-int) is NaN ','line_number':187,'multiline':True]
['text':' s (sign of result -ve**odd) = -1 else = 1 ','line_number':190,'multiline':True]
['text':' (-ve)**(odd int) ','line_number':191,'multiline':True]
['text':' |y| is huge ','line_number':193,'multiline':True]
['text':' if |y| > 2**31 ','line_number':194,'multiline':True]
['text':' if |y| > 2**64, must o/uflow ','line_number':195,'multiline':True]
['text':' over/underflow if x is not close to one ','line_number':199,'multiline':True]
['text':' now |1-x| is tiny <= 2**-20, suffice to compute
	   log(x) by x-x^2/2+x^3/3-x^4/4 ','line_number':202,'multiline':True]
['text':' t has 20 trailing zeros ','line_number':204,'multiline':True]
['text':' ivln2_h has 21 sig. bits ','line_number':206,'multiline':True]
['text':' take care subnormal number ','line_number':214,'multiline':True]
['text':' determine interval ','line_number':219,'multiline':True]
['text':' normalize ix ','line_number':220,'multiline':True]
['text':' |x|<sqrt(3/2) ','line_number':221,'multiline':True]
['text':' |x|<sqrt(3)   ','line_number':222,'multiline':True]
['text':' compute ss = s_h+s_l = (x-1)/(x+1) or (x-1.5)/(x+1.5) ','line_number':226,'multiline':True]
['text':' bp[0]=1.0, bp[1]=1.5 ','line_number':227,'multiline':True]
['text':' t_h=ax+bp[k] High ','line_number':232,'multiline':True]
['text':' compute log(ax) ','line_number':237,'multiline':True]
['text':' u+v = ss*(1+...) ','line_number':245,'multiline':True]
['text':' 2/(3log2)*(ss+...) ','line_number':248,'multiline':True]
['text':' cp_h+cp_l = 2/(3*log2) ','line_number':252,'multiline':True]
['text':' log2(ax) = (ss+..)*2/(3*log2) = n + dp_h + z_h + z_l ','line_number':254,'multiline':True]
['text':' split up y into y1+y2 and compute (y1+y2)*(t1+t2) ','line_number':261,'multiline':True]
['text':' z >= 1024 ','line_number':268,'multiline':True]
['text':' if z > 1024 ','line_number':269,'multiline':True]
['text':' overflow ','line_number':270,'multiline':True]
['text':' overflow ','line_number':272,'multiline':True]
['text':' z <= -1075 ','line_number':274,'multiline':True]
['text':' z < -1075 ','line_number':275,'multiline':True]
['text':' underflow ','line_number':276,'multiline':True]
['text':' underflow ','line_number':278,'multiline':True]
['text':'
     * compute 2**(p_h+p_l)
     ','line_number':281,'multiline':True]
['text':' if |z| > 0.5, set n = [z+0.5] ','line_number':287,'multiline':True]
['text':' new k for n ','line_number':289,'multiline':True]
['text':' subnormal output ','line_number':308,'multiline':True]
