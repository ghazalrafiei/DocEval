['text':' Â© 2020 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' NOTE','line_number':32,'multiline':False]
['text':'  We need the offset when the source and the target are simple units. e.g. the source is','line_number':33,'multiline':False]
['text':'  celsius and the target is Fahrenheit. Therefore, we just keep the value using `std::max`.','line_number':34,'multiline':False]
['text':' NOTE','line_number':45,'multiline':False]
['text':'  We need the offset when the source and the target are simple units. e.g. the source is','line_number':46,'multiline':False]
['text':'  celsius and the target is Fahrenheit. Therefore, we just keep the value using `std::max`.','line_number':47,'multiline':False]
['text':' multiply all the constant by the power.','line_number':52,'multiline':False]
['text':' This means that after applying the absolute power, we should flip','line_number':57,'multiline':False]
['text':' the Numerator and Denominator.','line_number':58,'multiline':False]
['text':' Flip Numerator and Denominator.','line_number':64,'multiline':False]
['text':' No need to do anything','line_number':71,'multiline':False]
['text':' Helpers ','line_number':106,'multiline':True]
['text':' TODO: Make this a shared-utility function.','line_number':110,'multiline':False]
['text':' Returns `double` from a scientific number(i.e. "1", "2.01" or "3.09E+4")','line_number':111,'multiline':False]
['text':' We are processing well-formed input, so we don't need any special options to','line_number':113,'multiline':False]
['text':' StringToDoubleConverter.','line_number':114,'multiline':False]
['text':' Returns `double` from a scientific number that could has a division sign (i.e. "1", "2.01", "3.09E+4"','line_number':125,'multiline':False]
['text':' or "2E+2/3")','line_number':126,'multiline':False]
['text':'
  Adds single factor to a `Factor` object. Single factor means "23^2", "23.3333", "ft2m^3" ...etc.
  However, complex factor are not included, such as "ft2m^3*200/3"
','line_number':144,'multiline':True]
['text':' In case the power is not written, then, the power is equal 1 ==> `ft2m^1` == `ft2m`','line_number':152,'multiline':False]
['text':' Search for the power part','line_number':154,'multiline':False]
['text':' There is power','line_number':164,'multiline':False]
['text':'
 * Extracts `Factor` from a complete string factor. e.g. "ft2m^3*1007/cup2m3*3"
 ','line_number':176,'multiline':True]
['text':' Set `start` to point to the start of the new element.','line_number':188,'multiline':False]
['text':' Last element','line_number':190,'multiline':False]
['text':' Change the signum because we reached the Denominator.','line_number':195,'multiline':False]
['text':' Load factor for a single source','line_number':202,'multiline':False]
['text':' Load Factor of a compound source unit.','line_number':217,'multiline':False]
['text':' In ICU4J, this is a pair of ConversionRates.getFactorToBase() functions.','line_number':218,'multiline':False]
['text':' Prefix before power, because:','line_number':229,'multiline':False]
['text':' - square-kilometer to square-meter: (1000)^2','line_number':230,'multiline':False]
['text':' - square-kilometer to square-foot (approximate): (3.28*1000)^2','line_number':231,'multiline':False]
['text':' Apply the power of the `dimensionality`','line_number':234,'multiline':False]
['text':'*
 * Checks if the source unit and the target unit are simple. For example celsius or fahrenheit. But not
 * square-celsius or square-fahrenheit.
 *
 * NOTE:
 *  Empty unit means simple unit.
 *
 * In ICU4J, this is ConversionRates.checkSimpleUnit().
 ','line_number':243,'multiline':True]
['text':' Empty units means simple unit.','line_number':259,'multiline':False]
['text':'*
 *  Extract conversion rate from `source` to `target`
 ','line_number':272,'multiline':True]
['text':' In ICU4J, this function is partially inlined in the UnitsConverter constructor.','line_number':275,'multiline':False]
['text':' Represents the conversion factor from the source to the target.','line_number':279,'multiline':False]
['text':' Represents the conversion factor from the source to the base unit that specified in the conversion','line_number':282,'multiline':False]
['text':' data which is considered as the root of the source and the target.','line_number':283,'multiline':False]
['text':' Merger Factors','line_number':287,'multiline':False]
['text':' This code corresponds to ICU4J's ConversionRates.getOffset().','line_number':303,'multiline':False]
['text':' In case of simple units (such as: celsius or fahrenheit), offsets are considered.','line_number':304,'multiline':False]
['text':' TODO(icu-units#127): should we consider failure if there's an offset for','line_number':311,'multiline':False]
['text':' a not-simple-unit? What about kilokelvin / kilocelsius?','line_number':312,'multiline':False]
['text':' namespace','line_number':358,'multiline':False]
['text':' Conceptually, this modifies factor: factor *= baseStr^(signum*power).','line_number':360,'multiline':False]
['text':'','line_number':361,'multiline':False]
['text':' baseStr must be a known constant or a value that strToDouble() is able to','line_number':362,'multiline':False]
['text':' parse.','line_number':363,'multiline':False]
['text':'*
 * Extracts the compound base unit of a compound unit (`source`). For example, if the source unit is
 * `square-mile-per-hour`, the compound base unit will be `square-meter-per-second`
 ','line_number':402,'multiline':True]
['text':' Extract `ConversionRateInfo` using the absolute unit. For example: in case of `square-meter`,','line_number':416,'multiline':False]
['text':' we will use `meter`','line_number':417,'multiline':False]
['text':' Multiply the power of the singleUnit by the power of the baseUnit. For example, square-hectare','line_number':428,'multiline':False]
['text':' must be pow4-meter. (NOTE: hectare --> square-meter)','line_number':429,'multiline':False]
['text':' TODO: Deal with SI-prefix','line_number':434,'multiline':False]
['text':'*
 * Determine the convertibility between `source` and `target`.
 * For example:
 *    `meter` and `foot` are `CONVERTIBLE`.
 *    `meter-per-second` and `second-per-meter` are `RECIPROCAL`.
 *    `meter` and `pound` are `UNCONVERTIBLE`.
 *
 * NOTE:
 *    Only works with SINGLE and COMPOUND units. If one of the units is a
 *    MIXED unit, an error will occur. For more information, see UMeasureUnitComplexity.
 ','line_number':446,'multiline':True]
['text':' Represents the conversion factor from the firstUnit to the base','line_number':557,'multiline':False]
['text':' unit that specified in the conversion data which is considered as','line_number':558,'multiline':False]
['text':' the root of the firstUnit and the secondUnit.','line_number':559,'multiline':False]
['text':' Reset the input to the target zero index.','line_number':583,'multiline':False]
['text':' Convert the quantity to from the source scale to the target scale.','line_number':584,'multiline':False]
['text':' Set the result to its index.','line_number':587,'multiline':False]
['text':' TODO: demonstrate the resulting behaviour in tests... and figure','line_number':591,'multiline':False]
['text':' out desired behaviour. (Theoretical result should be infinity,','line_number':592,'multiline':False]
['text':' not 0.)','line_number':593,'multiline':False]
['text':' TODO: demonstrate the resulting behaviour in tests... and figure','line_number':606,'multiline':False]
['text':' out desired behaviour. (Theoretical result should be infinity,','line_number':607,'multiline':False]
['text':' not 0.)','line_number':608,'multiline':False]
['text':' namespace units','line_number':630,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':633,'multiline':True]
