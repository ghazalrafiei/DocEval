['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2003-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  udataswp.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2003jun05
*   created by: Markus W. Scherer
*
*   Definitions for ICU data transformations for different platforms,
*   changing between big- and little-endian data and/or between
*   charset families (ASCII<->EBCDIC).
','line_number':3,'multiline':True]
['text':' forward declaration ','line_number':29,'multiline':True]
['text':'*
 * Function type for data transformation.
 * Transforms data, or just returns the length of the data if
 * the input length is -1.
 * Swap functions assume that their data pointers are aligned properly.
 *
 * Quick implementation outline:
 * (best to copy and adapt and existing swapper implementation)
 * check that the data looks like the expected format
 * if(length<0) {
 *   preflight:
 *   never dereference outData
 *   read inData and determine the data size
 *   assume that inData is long enough for this
 * } else {
 *   outData can be NULL if length==0
 *   inData==outData (in-place swapping) possible but not required!
 *   verify that length>=(actual size)
 *   if there is a chance that not every byte up to size is reached
 *     due to padding etc.:
 *   if(inData!=outData) {
 *     memcpy(outData, inData, actual size);
 *   }
 *   swap contents
 * }
 * return actual size
 *
 * Further implementation notes:
 * - read integers from inData before swapping them
 *   because in-place swapping can make them unreadable
 * - compareInvChars compares a local Unicode string with already-swapped
 *   output charset strings
 *
 * @param ds Pointer to UDataSwapper containing global data about the
 *           transformation and function pointers for handling primitive
 *           types.
 * @param inData Pointer to the input data to be transformed or examined.
 * @param length Length of the data, counting bytes. May be -1 for preflighting.
 *               If length>=0, then transform the data.
 *               If length==-1, then only determine the length of the data.
 *               The length cannot be determined from the data itself for all
 *               types of data (e.g., not for simple arrays of integers).
 * @param outData Pointer to the output data buffer.
 *                If length>=0 (transformation), then the output buffer must
 *                have a capacity of at least length.
 *                If length==-1, then outData will not be used and can be NULL.
 * @param pErrorCode ICU UErrorCode parameter, must not be NULL and must
 *                   fulfill U_SUCCESS on input.
 * @return The actual length of the data.
 *
 * @see UDataSwapper
 * @internal ICU 2.8
 ','line_number':36,'multiline':True]
['text':'*
 * Convert one uint16_t from input to platform endianness.
 * @internal ICU 2.8
 ','line_number':94,'multiline':True]
['text':'*
 * Convert one uint32_t from input to platform endianness.
 * @internal ICU 2.8
 ','line_number':101,'multiline':True]
['text':'*
 * Convert one uint16_t from platform to input endianness.
 * @internal ICU 2.8
 ','line_number':108,'multiline':True]
['text':'*
 * Convert one uint32_t from platform to input endianness.
 * @internal ICU 2.8
 ','line_number':115,'multiline':True]
['text':'*
 * Compare invariant-character strings, one in the output data and the
 * other one caller-provided in Unicode.
 * An output data string is compared because strings are usually swapped
 * before the rest of the data, to allow for sorting of string tables
 * according to the output charset.
 * You can use -1 for the length parameters of NUL-terminated strings as usual.
 * Returns Unicode code point order for invariant characters.
 * @internal ICU 2.8
 ','line_number':122,'multiline':True]
['text':'*
 * Function for message output when an error occurs during data swapping.
 * A format string and variable number of arguments are passed
 * like for vprintf().
 *
 * @param context A function-specific context pointer.
 * @param fmt The format string.
 * @param args The arguments for format string inserts.
 *
 * @internal ICU 2.8
 ','line_number':137,'multiline':True]
['text':'* Input endianness. @internal ICU 2.8 ','line_number':152,'multiline':True]
['text':'* Input charset family. @see U_CHARSET_FAMILY @internal ICU 2.8 ','line_number':154,'multiline':True]
['text':'* Output endianness. @internal ICU 2.8 ','line_number':156,'multiline':True]
['text':'* Output charset family. @see U_CHARSET_FAMILY @internal ICU 2.8 ','line_number':158,'multiline':True]
['text':' basic functions for reading data values ','line_number':161,'multiline':True]
['text':'* Convert one uint16_t from input to platform endianness. @internal ICU 2.8 ','line_number':163,'multiline':True]
['text':'* Convert one uint32_t from input to platform endianness. @internal ICU 2.8 ','line_number':165,'multiline':True]
['text':'* Compare an invariant-character output string with a local one. @internal ICU 2.8 ','line_number':167,'multiline':True]
['text':' basic functions for writing data values ','line_number':170,'multiline':True]
['text':'* Convert one uint16_t from platform to input endianness. @internal ICU 2.8 ','line_number':172,'multiline':True]
['text':'* Convert one uint32_t from platform to input endianness. @internal ICU 2.8 ','line_number':174,'multiline':True]
['text':' basic functions for data transformations ','line_number':177,'multiline':True]
['text':'* Transform an array of 16-bit integers. @internal ICU 2.8 ','line_number':179,'multiline':True]
['text':'* Transform an array of 32-bit integers. @internal ICU 2.8 ','line_number':181,'multiline':True]
['text':'* Transform an array of 64-bit integers. @internal ICU 53 ','line_number':183,'multiline':True]
['text':'* Transform an invariant-character string. @internal ICU 2.8 ','line_number':185,'multiline':True]
['text':'*
     * Function for message output when an error occurs during data swapping.
     * Can be NULL.
     * @internal ICU 2.8
     ','line_number':188,'multiline':True]
['text':'* Context pointer for printError. @internal ICU 2.8 ','line_number':194,'multiline':True]
['text':'*
 * Open a UDataSwapper for the given input data and the specified output
 * characteristics.
 * Values of -1 for any of the characteristics mean the local platform's
 * characteristics.
 *
 * @see udata_swap
 * @internal ICU 2.8
 ','line_number':205,'multiline':True]
['text':'*
 * Read the beginning of an ICU data piece, recognize magic bytes,
 * swap the structure.
 * Set a U_UNSUPPORTED_ERROR if it does not look like an ICU data piece.
 *
 * @return The size of the data header, in bytes.
 *
 * @internal ICU 2.8
 ','line_number':222,'multiline':True]
['text':'*
 * Convert one int16_t from input to platform endianness.
 * @internal ICU 2.8
 ','line_number':236,'multiline':True]
['text':'*
 * Convert one int32_t from input to platform endianness.
 * @internal ICU 2.8
 ','line_number':243,'multiline':True]
['text':'*
 * Swap a block of invariant, NUL-terminated strings, but not padding
 * bytes after the last string.
 * @internal
 ','line_number':250,'multiline':True]
['text':' internal exports from putil.c -------------------------------------------- ','line_number':265,'multiline':True]
['text':' declared here to keep them out of the public putil.h ','line_number':267,'multiline':True]
['text':'*
 * Swap invariant char * strings ASCII->EBCDIC.
 * @internal
 ','line_number':269,'multiline':True]
['text':'*
 * Copy invariant ASCII char * strings and verify they are invariant.
 * @internal
 ','line_number':278,'multiline':True]
['text':'*
 * Swap invariant char * strings EBCDIC->ASCII.
 * @internal
 ','line_number':287,'multiline':True]
['text':'*
 * Copy invariant EBCDIC char * strings and verify they are invariant.
 * @internal
 ','line_number':296,'multiline':True]
['text':'*
 * Compare ASCII invariant char * with Unicode invariant UChar *
 * @internal
 ','line_number':305,'multiline':True]
['text':'*
 * Compare EBCDIC invariant char * with Unicode invariant UChar *
 * @internal
 ','line_number':314,'multiline':True]
['text':'*
 * \def uprv_compareInvWithUChar
 * Compare an invariant-character strings with a UChar string
 * @internal
 ','line_number':323,'multiline':True]
['text':' utrie_swap.cpp -----------------------------------------------------------***','line_number':336,'multiline':False]
['text':'*
 * Swaps a serialized UTrie.
 * @internal
 ','line_number':338,'multiline':True]
['text':'*
 * Swaps a serialized UTrie2.
 * @internal
 ','line_number':347,'multiline':True]
['text':'*
 * Swaps a serialized UCPTrie.
 * @internal
 ','line_number':356,'multiline':True]
['text':'*
 * Swaps a serialized UTrie, UTrie2, or UCPTrie.
 * @internal
 ','line_number':365,'multiline':True]
['text':' material... -------------------------------------------------------------- ','line_number':374,'multiline':True]
['text':' udata.h ','line_number':378,'multiline':True]
['text':'*
 * Public API function in udata.c
 *
 * Same as udata_openChoice() but automatically swaps the data.
 * isAcceptable, if not NULL, may accept data with endianness and charset family
 * different from the current platform's properties.
 * If the data is acceptable and the platform properties do not match, then
 * the swap function is called to swap an allocated version of the data.
 * Preflighting may or may not be performed depending on whether the size of
 * the loaded data item is known.
 *
 * @param isAcceptable Same as for udata_openChoice(). May be NULL.
 *
 * @internal ICU 2.8
 ','line_number':380,'multiline':True]
