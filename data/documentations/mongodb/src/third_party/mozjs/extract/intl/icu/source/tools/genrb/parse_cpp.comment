['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 1998-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*
* File parse.cpp
*
* Modification History:
*
*   Date          Name          Description
*   05/26/99     stephen       Creation.
*   02/25/00     weiv          Overhaul to write udata
*   5/10/01      Ram           removed ustdio dependency
*   06/10/2001  Dominic Ludlam <dom@recoil.org> Rewritten
*******************************************************************************
','line_number':3,'multiline':True]
['text':' Safer use of UnicodeString.','line_number':23,'multiline':False]
['text':' Less important, but still a good idea.','line_number':28,'multiline':False]
['text':' Number of tokens to read ahead of the current stream position ','line_number':63,'multiline':True]
['text':' keep in sync with token defines in read.h ','line_number':94,'multiline':True]
['text':' A string token, such as "MonthNames" ','line_number':97,'multiline':True]
['text':' An opening brace character ','line_number':98,'multiline':True]
['text':' A closing brace character ','line_number':99,'multiline':True]
['text':' A comma ','line_number':100,'multiline':True]
['text':' A colon ','line_number':101,'multiline':True]
['text':' End of the file has been reached successfully ','line_number':103,'multiline':True]
['text':' Just to store "TRUE" ','line_number':107,'multiline':True]
['text':'static const UChar trueValue[] = {0x0054, 0x0052, 0x0055, 0x0045, 0x0000};','line_number':108,'multiline':False]
['text':' The nature of the lookahead buffer:
   There are MAX_LOOKAHEAD + 1 slots, used as a circular buffer.  This provides
   MAX_LOOKAHEAD lookahead tokens and a slot for the current token and value.
   When getToken is called, the current pointer is moved to the next slot and the
   old slot is filled with the next token from the reader by calling getNextToken.
   The token values are stored in the slot, which means that token values don't
   survive a call to getToken, ie.

   UString *value;

   getToken(&value, NULL, status);
   getToken(NULL,   NULL, status);       bad - value is now a different string
','line_number':129,'multiline':True]
['text':' printf("getToken, returning %s\n", tokenNames[result]); ','line_number':211,'multiline':True]
['text':'comment','line_number':310,'multiline':True]
['text':' make the filename including the directory ','line_number':337,'multiline':True]
['text':' We allocate more space than actually required
    * since the actual size needed for storing UChars
    * is not known in UTF-8 byte stream
    ','line_number':369,'multiline':True]
['text':' read the rules into the buffer ','line_number':379,'multiline':True]
['text':' weiv (06/26/2002): adding the following:
         * - preserving spaces in commands [...]
         * - # comments until the end of line
         ','line_number':386,'multiline':True]
['text':' preserve commands
             * closing bracket will be handled by the
             * append at the end of the loop
             ','line_number':392,'multiline':True]
['text':' skip comments ','line_number':402,'multiline':True]
['text':' ignore spaces carriage returns
            * and line feed unless in the form \uXXXX
            ','line_number':421,'multiline':True]
['text':' Append UChar * after dissembling if c > 0xffff','line_number':427,'multiline':True]
['text':' terminate the string ','line_number':438,'multiline':True]
['text':'comment','line_number':454,'multiline':True]
['text':' make the filename including the directory ','line_number':478,'multiline':True]
['text':' We allocate more space than actually required
    * since the actual size needed for storing UChars
    * is not known in UTF-8 byte stream
    ','line_number':507,'multiline':True]
['text':' make the filename including the directory ','line_number':551,'multiline':True]
['text':'    if (tag != NULL && uprv_strcmp(tag, "%%UCARULES") == 0)
    {
        return parseUCARules(tag, startline, status);
    }','line_number':599,'multiline':True]
['text':' create the string now - tokenValue doesn't survive a call to getToken (and therefore
        doesn't survive expect either) ','line_number':610,'multiline':True]
['text':' create the string now - tokenValue doesn't survive a call to getToken (and therefore
        doesn't survive expect either) ','line_number':642,'multiline':True]
['text':'errorReason','line_number':699,'multiline':True]
['text':'
             * When a filename ../../../data/root.txt is specified,
             * we presume that the input directory is ../../../data
             * This is very important when the resource file includes
             * another file, like UCARules.txt or thaidict.brk.
             ','line_number':715,'multiline':True]
['text':'
             * append the input dir to openFileName if the first char in
             * filename is not file separator char and the last char input directory is  not '.'.
             * This is to support :
             * genrb -s. /home/icu/data
             * genrb -s. icu/data
             * The user cannot mix notations like
             * genrb -s. /icu/data --- the absolute path specified. -s redundant
             * user should use
             * genrb -s. icu/data  --- start from CWD and look in icu/data dir
             ','line_number':731,'multiline':True]
['text':' printf("GenrbImporter::getRules(%s, %s) reads %s\n", localeID, collationType, openFileName.data());','line_number':752,'multiline':False]
['text':' Parse the data into an SRBRoot ','line_number':765,'multiline':True]
['text':' No string pointer aliasing so that we need not hold onto the resource bundle.','line_number':779,'multiline':False]
['text':' Quick-and-dirty escaping function.','line_number':787,'multiline':False]
['text':' Assumes that we are on an ASCII-based platform.','line_number':788,'multiline':False]
['text':' printable ASCII','line_number':800,'multiline':False]
['text':' assumes ASCII-based platform','line_number':801,'multiline':False]
['text':' namespace','line_number':808,'multiline':False]
['text':' !UCONFIG_NO_COLLATION','line_number':810,'multiline':False]
['text':' TODO: Use LocalPointer for result, or make caller close it when there is a failure.','line_number':816,'multiline':False]
['text':' '{' . (name resource)* '}' ','line_number':827,'multiline':True]
['text':' Ignore the parsed resources, continue parsing.','line_number':874,'multiline':False]
['text':' discard duplicate %%CollationBin if any','line_number':895,'multiline':True]
['text':' Defer building the collator until we have seen','line_number':902,'multiline':False]
['text':' all sub-elements of the collation table, including the Version.','line_number':903,'multiline':False]
['text':' in order to achieve smaller data files, we can direct genrb ','line_number':904,'multiline':True]
['text':' to omit collation rules ','line_number':905,'multiline':True]
['text':' Just copy non-special items.','line_number':911,'multiline':False]
['text':' TODO: use LocalPointer','line_number':916,'multiline':False]
['text':' CLDR ticket #3949, ICU ticket #8082:','line_number':930,'multiline':False]
['text':' Do not build collation binary data for for-import-only "private" collation rule strings.','line_number':931,'multiline':False]
['text':' TODO: use LocalUResourceBundlePointer for result','line_number':953,'multiline':False]
['text':' build fast-Latin table unless search collator','line_number':957,'multiline':False]
['text':' Print pre- and post-context.','line_number':968,'multiline':False]
['text':' debugging output','line_number':1021,'multiline':False]
['text':'type','line_number':1038,'multiline':True]
['text':' this probably needs to be refactored or recursively use the parser ','line_number':1115,'multiline':True]
['text':' first we assume that our collation table won't have the explicit type ','line_number':1116,'multiline':True]
['text':' then, we cannot handle aliases ','line_number':1117,'multiline':True]
['text':' need to parse the collation data regardless','line_number':1126,'multiline':False]
['text':' right now, we'll just try to see if we have aliases ','line_number':1131,'multiline':True]
['text':' we could have a table too ','line_number':1132,'multiline':True]
['text':'member = string_open(bundle, subtag, tokenValue->fChars, tokenValue->fLength, status);','line_number':1156,'multiline':True]
['text':'expect(TOK_CLOSE_BRACE, NULL, NULL, status);','line_number':1158,'multiline':True]
['text':' Necessary, because CollationElements requires the bundle->fRoot member to be present which,
   if this weren't special-cased, wouldn't be set until the entire file had been processed. ','line_number':1169,'multiline':True]
['text':' '{' . (name resource)* '}' ','line_number':1182,'multiline':True]
['text':' not reached ','line_number':1249,'multiline':True]
['text':' A compiler warning will appear if all paths don't contain a return statement. ','line_number':1250,'multiline':True]
['text':'     *status = U_INTERNAL_PROGRAM_ERROR;
     return NULL;','line_number':1251,'multiline':True]
['text':' '{' . resource [','] '}' ','line_number':1300,'multiline':True]
['text':' reset length ','line_number':1303,'multiline':True]
['text':' check for end of array, but don't consume next token unless it really is the end ','line_number':1306,'multiline':True]
['text':' string arrays are a special case ','line_number':1327,'multiline':True]
['text':' eat optional comma if present ','line_number':1346,'multiline':True]
['text':' '{' . string [','] '}' ','line_number':1387,'multiline':True]
['text':' check for end of array, but don't consume next token unless it really is the end ','line_number':1392,'multiline':True]
['text':' it's the end, consume the close brace ','line_number':1397,'multiline':True]
['text':' For handling illegal char in the Intvector ','line_number':1415,'multiline':True]
['text':' make intvector support decimal,hexdigit,octal digit ranging from -2^31-2^32-1','line_number':1416,'multiline':True]
['text':' the comma is optional (even though it is required to prevent the reader from concatenating
        consecutive entries) so that a missing comma on the last entry isn't an error ','line_number':1437,'multiline':True]
['text':' not reached ','line_number':1446,'multiline':True]
['text':' A compiler warning will appear if all paths don't contain a return statement. ','line_number':1447,'multiline':True]
['text':'    intvector_close(result, status);
    *status = U_INTERNAL_PROGRAM_ERROR;
    return NULL;','line_number':1448,'multiline':True]
['text':' Skip spaces (which may have been line endings).','line_number':1485,'multiline':False]
['text':' Allow integer support for hexdecimal, octal digit and decimal','line_number':1549,'multiline':True]
['text':' and handle illegal char in the integer','line_number':1550,'multiline':True]
['text':' Open the input file for reading ','line_number':1588,'multiline':True]
['text':' int32_t numRead = ','line_number':1615,'multiline':True]
['text':' test for NULL ','line_number':1656,'multiline':True]
['text':' Various non-standard processing plugins that create one or more special resources. ','line_number':1721,'multiline':True]
['text':' only used for debugging ','line_number':1748,'multiline':True]
['text':' parseFunction will never be called ','line_number':1756,'multiline':True]
['text':' not implemented yet ','line_number':1764,'multiline':True]
['text':' Search for normal types ','line_number':1812,'multiline':True]
['text':' Now search for the aliases ','line_number':1819,'multiline':True]
['text':' parse a non-top-level resource ','line_number':1837,'multiline':True]
['text':' name . [ ':' type ] '{' resource '}' ','line_number':1855,'multiline':True]
['text':' This function parses from the colon onwards.  If the colon is present, parse the
    type then try to parse a resource of that type.  If there is no explicit type,
    work it out using the lookahead tokens. ','line_number':1856,'multiline':True]
['text':' No explicit type, so try to work it out.  At this point, we've read the first '{'.
        We could have any of the following:
        { {         => array (nested)
        { :/}       => array
        { string ,  => string array

        { string {  => table

        { string :/{    => table
        { string }      => string
        ','line_number':1893,'multiline':True]
['text':' printf("Type guessed as %s\n", resourceNames[resType]); ','line_number':1944,'multiline':True]
['text':' We should now know what we need to parse next, so call the appropriate parser
    function and return. ','line_number':1952,'multiline':True]
['text':' parse the top-level resource ','line_number':1966,'multiline':True]
['text':' The following code is to make Empty bundle work no matter with :table specifer or not ','line_number':2011,'multiline':True]
['text':' not a colon ','line_number':2029,'multiline':True]
['text':' neither colon nor open brace ','line_number':2037,'multiline':True]
['text':'
         * Parse a top-level table with the table(nofallback) declaration.
         * This is the same as a regular table, but also sets the
         * URES_ATT_NO_FALLBACK flag in indexes[URES_INDEX_ATTRIBUTES] .
         ','line_number':2051,'multiline':True]
['text':' top-level tables need not handle special table names like "collations" ','line_number':2058,'multiline':True]
