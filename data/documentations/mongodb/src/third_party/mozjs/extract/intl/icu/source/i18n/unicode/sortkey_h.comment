['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 *****************************************************************************
 * Copyright (C) 1996-2014, International Business Machines Corporation and others.
 * All Rights Reserved.
 *****************************************************************************
 *
 * File sortkey.h
 *
 * Created by: Helena Shih
 *
 * Modification History:
 *
 *  Date         Name          Description
 *
 *  6/20/97     helena      Java class name change.
 *  8/18/97     helena      Added internal API documentation.
 *  6/26/98     erm         Changed to use byte arrays and memcmp.
 *****************************************************************************
 ','line_number':3,'multiline':True]
['text':'*
 * \file 
 * \brief C++ API: Keys for comparing strings multiple times. 
 ','line_number':30,'multiline':True]
['text':' forward declaration ','line_number':43,'multiline':True]
['text':'*
 *
 * Collation keys are generated by the Collator class.  Use the CollationKey objects
 * instead of Collator to compare strings multiple times.  A CollationKey
 * preprocesses the comparison information from the Collator object to
 * make the comparison faster.  If you are not going to comparing strings
 * multiple times, then using the Collator object is generally faster,
 * since it only processes as much of the string as needed to make a
 * comparison.
 * <p> For example (with strength == tertiary)
 * <p>When comparing "Abernathy" to "Baggins-Smythworthy", Collator
 * only needs to process a couple of characters, while a comparison
 * with CollationKeys will process all of the characters.  On the other hand,
 * if you are doing a sort of a number of fields, it is much faster to use
 * CollationKeys, since you will be comparing strings multiple times.
 * <p>Typical use of CollationKeys are in databases, where you store a CollationKey
 * in a hidden field, and use it for sorting or indexing.
 *
 * <p>Example of use:
 * <pre>
 * \code
 *     UErrorCode success = U_ZERO_ERROR;
 *     Collator* myCollator = Collator::createInstance(success);
 *     CollationKey* keys = new CollationKey [3];
 *     myCollator->getCollationKey("Tom", keys[0], success );
 *     myCollator->getCollationKey("Dick", keys[1], success );
 *     myCollator->getCollationKey("Harry", keys[2], success );
 *
 *     // Inside body of sort routine, compare keys this way:
 *     CollationKey tmp;
 *     if(keys[0].compareTo( keys[1] ) > 0 ) {
 *         tmp = keys[0]; keys[0] = keys[1]; keys[1] = tmp;
 *     }
 *     //...
 * \endcode
 * </pre>
 * <p>Because Collator::compare()'s algorithm is complex, it is faster to sort
 * long lists of words by retrieving collation keys with Collator::getCollationKey().
 * You can then cache the collation keys and compare them using CollationKey::compareTo().
 * <p>
 * <strong>Note:</strong> <code>Collator</code>s with different Locale,
 * CollationStrength and DecompositionMode settings will return different
 * CollationKeys for the same set of strings. Locales have specific
 * collation rules, and the way in which secondary and tertiary differences
 * are taken into account, for example, will result in different CollationKeys
 * for same strings.
 * <p>

 * @see          Collator
 * @see          RuleBasedCollator
 * @version      1.3 12/18/96
 * @author       Helena Shih
 * @stable ICU 2.0
 ','line_number':47,'multiline':True]
['text':'*
    * This creates an empty collation key based on the null string.  An empty
    * collation key contains no sorting information.  When comparing two empty
    * collation keys, the result is Collator::EQUAL.  Comparing empty collation key
    * with non-empty collation key is always Collator::LESS.
    * @stable ICU 2.0
    ','line_number':103,'multiline':True]
['text':'*
    * Creates a collation key based on the collation key values.
    * @param values the collation key values
    * @param count number of collation key values, including trailing nulls.
    * @stable ICU 2.0
    ','line_number':113,'multiline':True]
['text':'*
    * Copy constructor.
    * @param other    the object to be copied.
    * @stable ICU 2.0
    ','line_number':122,'multiline':True]
['text':'*
    * Sort key destructor.
    * @stable ICU 2.0
    ','line_number':129,'multiline':True]
['text':'*
    * Assignment operator
    * @param other    the object to be copied.
    * @stable ICU 2.0
    ','line_number':135,'multiline':True]
['text':'*
    * Compare if two collation keys are the same.
    * @param source the collation key to compare to.
    * @return Returns true if two collation keys are equal, false otherwise.
    * @stable ICU 2.0
    ','line_number':142,'multiline':True]
['text':'*
    * Compare if two collation keys are not the same.
    * @param source the collation key to compare to.
    * @return Returns true if two collation keys are different, false otherwise.
    * @stable ICU 2.0
    ','line_number':150,'multiline':True]
['text':'*
    * Test to see if the key is in an invalid state. The key will be in an
    * invalid state if it couldn't allocate memory for some operation.
    * @return Returns true if the key is in an invalid, false otherwise.
    * @stable ICU 2.0
    ','line_number':159,'multiline':True]
['text':'*
    * Returns a pointer to the collation key values. The storage is owned
    * by the collation key and the pointer will become invalid if the key
    * is deleted.
    * @param count the output parameter of number of collation key values,
    * including any trailing nulls.
    * @return a pointer to the collation key values.
    * @stable ICU 2.0
    ','line_number':167,'multiline':True]
['text':'*
    * Extracts the collation key values into a new array. The caller owns
    * this storage and should free it.
    * @param count the output parameter of number of collation key values,
    * including any trailing nulls.
    * @obsolete ICU 2.6. Use getByteArray instead since this API will be removed in that release.
    ','line_number':179,'multiline':True]
['text':'*
    * Convenience method which does a string(bit-wise) comparison of the
    * two collation keys.
    * @param target target collation key to be compared with
    * @return Returns Collator::LESS if sourceKey &lt; targetKey,
    * Collator::GREATER if sourceKey > targetKey and Collator::EQUAL
    * otherwise.
    * @deprecated ICU 2.6 use the overload with error code
    ','line_number':190,'multiline':True]
['text':' U_HIDE_DEPRECATED_API ','line_number':200,'multiline':True]
['text':'*
    * Convenience method which does a string(bit-wise) comparison of the
    * two collation keys.
    * @param target target collation key to be compared with
    * @param status error code
    * @return Returns UCOL_LESS if sourceKey &lt; targetKey,
    * UCOL_GREATER if sourceKey > targetKey and UCOL_EQUAL
    * otherwise.
    * @stable ICU 2.6
    ','line_number':202,'multiline':True]
['text':'*
    * Creates an integer that is unique to the collation key.  NOTE: this
    * is not the same as String.hashCode.
    * <p>Example of use:
    * <pre>
    * .    UErrorCode status = U_ZERO_ERROR;
    * .    Collator *myCollation = Collator::createInstance(Locale::US, status);
    * .    if (U_FAILURE(status)) return;
    * .    CollationKey key1, key2;
    * .    UErrorCode status1 = U_ZERO_ERROR, status2 = U_ZERO_ERROR;
    * .    myCollation->getCollationKey("abc", key1, status1);
    * .    if (U_FAILURE(status1)) { delete myCollation; return; }
    * .    myCollation->getCollationKey("ABC", key2, status2);
    * .    if (U_FAILURE(status2)) { delete myCollation; return; }
    * .    // key1.hashCode() != key2.hashCode()
    * </pre>
    * @return the hash value based on the string's collation order.
    * @see UnicodeString#hashCode
    * @stable ICU 2.0
    ','line_number':214,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for the actual class.
     * @stable ICU 2.2
     ','line_number':236,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for this class.
     * @stable ICU 2.2
     ','line_number':242,'multiline':True]
['text':'*
     * Replaces the current bytes buffer with a new one of newCapacity
     * and copies length bytes from the old buffer to the new one.
     * @return the new buffer, or NULL if the allocation failed
     ','line_number':249,'multiline':True]
['text':'*
     * Set a new length for a new sort key in the existing fBytes.
     ','line_number':255,'multiline':True]
['text':'*
    * Set the CollationKey to a "bogus" or invalid state
    * @return this CollationKey
    ','line_number':271,'multiline':True]
['text':'*
    * Resets this CollationKey to an empty state
    * @return this CollationKey
    ','line_number':276,'multiline':True]
['text':'*
    * Allow private access to RuleBasedCollator
    ','line_number':282,'multiline':True]
['text':' Class fields. sizeof(CollationKey) is intended to be 48 bytes','line_number':288,'multiline':False]
['text':' on a machine with 64-bit pointers.','line_number':289,'multiline':False]
['text':' We use a union to maximize the size of the internal buffer,','line_number':290,'multiline':False]
['text':' similar to UnicodeString but not as tight and complex.','line_number':291,'multiline':False]
['text':' (implicit) *vtable;','line_number':293,'multiline':False]
['text':'*
     * Sort key length and flag.
     * Bit 31 is set if the buffer is heap-allocated.
     * Bits 30..0 contain the sort key length.
     ','line_number':294,'multiline':True]
['text':'*
    * Unique hash value of this CollationKey.
    * Special value 2 if the key is bogus.
    ','line_number':300,'multiline':True]
['text':'*
     * fUnion provides 32 bytes for the internal buffer or for
     * pointer+capacity.
     ','line_number':305,'multiline':True]
['text':'* fStackBuffer is used iff fFlagAndLength>=0, else fFields is used ','line_number':310,'multiline':True]
['text':' kBogusHashCode','line_number':328,'multiline':False]
['text':' #if !UCONFIG_NO_COLLATION ','line_number':340,'multiline':True]
['text':' U_SHOW_CPLUSPLUS_API ','line_number':342,'multiline':True]
