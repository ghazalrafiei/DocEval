['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'  
*******************************************************************************
*
*   Copyright (C) 1999-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  collationweights.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2001mar08 as ucol_wgt.cpp
*   created by: Markus W. Scherer
*
*   This file contains code for allocating n collation element weights
*   between two exclusive limits.
*   It is used only internally by the collation tailoring builder.
','line_number':3,'multiline':True]
['text':' collation element weight allocation -------------------------------------- ','line_number':39,'multiline':True]
['text':' helper functions for CE weights ','line_number':41,'multiline':True]
['text':' same calculation ','line_number':56,'multiline':True]
['text':' 0xffffffff except a 00 "hole" for the index-th byte ','line_number':61,'multiline':True]
['text':' Do not use uint32_t>>32 because on some platforms that does not shift at all','line_number':67,'multiline':False]
['text':' while we need it to become 0.','line_number':68,'multiline':False]
['text':' PowerPC: 0xffffffff>>32 = 0           (wanted)','line_number':69,'multiline':False]
['text':' x86:     0xffffffff>>32 = 0xffffffff  (not wanted)','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' ANSI C99 6.5.7 Bitwise shift operators:','line_number':72,'multiline':False]
['text':' "If the value of the right operand is negative','line_number':73,'multiline':False]
['text':' or is greater than or equal to the width of the promoted left operand,','line_number':74,'multiline':False]
['text':' the behavior is undefined."','line_number':75,'multiline':False]
['text':' We use only the lower 16 bits for secondary weights.','line_number':125,'multiline':False]
['text':' We use only the lower 16 bits for tertiary weights.','line_number':139,'multiline':False]
['text':' We use only 6 bits per byte.','line_number':145,'multiline':False]
['text':' The other bits are used for case & quaternary weights.','line_number':146,'multiline':False]
['text':' Roll over, set this byte to the minimum and increment the previous one.','line_number':160,'multiline':False]
['text':' Split the offset between this byte and the previous one.','line_number':175,'multiline':False]
['text':' for uprv_sortArray: sort ranges in weight order ','line_number':194,'multiline':True]
['text':'context','line_number':196,'multiline':True]
['text':' get the lengths of the limits ','line_number':215,'multiline':True]
['text':' Permit upperLength<middleLength: The upper limit for secondaries is 0x10000.','line_number':224,'multiline':False]
['text':' check that neither is a prefix of the other ','line_number':233,'multiline':True]
['text':' if the upper limit is a prefix of the lower limit then the earlier test lowerLimit>=upperLimit has caught it ','line_number':242,'multiline':True]
['text':' [0] and [1] are not used - this simplifies indexing ','line_number':244,'multiline':True]
['text':'
     * With the limit lengths of 1..4, there are up to 7 ranges for allocation:
     * range     minimum length
     * lower[4]  4
     * lower[3]  3
     * lower[2]  2
     * middle    1
     * upper[2]  2
     * upper[3]  3
     * upper[4]  4
     *
     * We are now going to calculate up to 7 ranges.
     * Some of them will typically overlap, so we will then have to merge and eliminate ranges.
     ','line_number':249,'multiline':True]
['text':' Prevent overflow for primary lead byte FF','line_number':277,'multiline':False]
['text':' which would yield a middle range starting at 0.','line_number':278,'multiline':False]
['text':' no middle range','line_number':279,'multiline':False]
['text':' set the middle range ','line_number':295,'multiline':True]
['text':' no middle range, eliminate overlaps ','line_number':300,'multiline':True]
['text':' Note: The lowerEnd and upperStart weights are versions of','line_number':303,'multiline':False]
['text':' lowerLimit and upperLimit (which are lowerLimit<upperLimit),','line_number':304,'multiline':False]
['text':' truncated (still less-or-equal)','line_number':305,'multiline':False]
['text':' and then with their last bytes changed to the','line_number':306,'multiline':False]
['text':' maxByte (for lowerEnd) or minByte (for upperStart).','line_number':307,'multiline':False]
['text':' These two lower and upper ranges collide.','line_number':313,'multiline':False]
['text':' Since lowerLimit<upperLimit and lowerEnd and upperStart','line_number':314,'multiline':False]
['text':' are versions with only their last bytes modified','line_number':315,'multiline':False]
['text':' (and following ones removed/reset to 0),','line_number':316,'multiline':False]
['text':' lowerEnd>upperStart is only possible','line_number':317,'multiline':False]
['text':' if the leading bytes are equal','line_number':318,'multiline':False]
['text':' and lastByte(lowerEnd)>lastByte(upperStart).','line_number':319,'multiline':False]
['text':' Intersect these two ranges.','line_number':322,'multiline':False]
['text':' count might be <=0 in which case there is no room,','line_number':327,'multiline':False]
['text':' and the range-collecting code below will ignore this range.','line_number':328,'multiline':False]
['text':' Not possible, unless minByte==maxByte which is not allowed.','line_number':331,'multiline':False]
['text':' lowerEnd<upperStart ','line_number':333,'multiline':True]
['text':' Merge adjacent ranges.','line_number':335,'multiline':False]
['text':' might be >countBytes','line_number':337,'multiline':False]
['text':' Remove all shorter ranges.','line_number':342,'multiline':False]
['text':' There was no room available for them between the ranges we just merged.','line_number':343,'multiline':False]
['text':' print ranges ','line_number':355,'multiline':True]
['text':' copy the ranges, shortest first, into the result array ','line_number':371,'multiline':True]
['text':' copy upper first so that later the middle range is more likely the first one to use ','line_number':378,'multiline':True]
['text':' See if the first few minLength and minLength+1 ranges have enough weights.','line_number':393,'multiline':False]
['text':' Use the first few minLength and minLength+1 ranges.','line_number':396,'multiline':False]
['text':' Reduce the number of weights from the last minLength+1 range','line_number':398,'multiline':False]
['text':' which might sort before some minLength ranges,','line_number':399,'multiline':False]
['text':' so that we use all weights in the minLength ranges.','line_number':400,'multiline':False]
['text':' sort the ranges by weight values ','line_number':409,'multiline':True]
['text':' ignore error code: we know that the internal sort function will not fail here ','line_number':413,'multiline':True]
['text':' still >0','line_number':417,'multiline':False]
['text':' See if the minLength ranges have enough weights','line_number':424,'multiline':False]
['text':' when we split one and lengthen the following ones.','line_number':425,'multiline':False]
['text':' Use the minLength ranges. Merge them, and then split again as necessary.','line_number':438,'multiline':False]
['text':' Calculate how to split the range between minLength (count1) and minLength+1 (count2).','line_number':446,'multiline':False]
['text':' Goal:','line_number':447,'multiline':False]
['text':'   count1 + count2 * nextCountBytes = n','line_number':448,'multiline':False]
['text':'   count1 + count2 = count','line_number':449,'multiline':False]
['text':' These turn into','line_number':450,'multiline':False]
['text':'   (count - count2) + count2 * nextCountBytes = n','line_number':451,'multiline':False]
['text':' and then into the following count1 & count2 computations.','line_number':452,'multiline':False]
['text':' number of weights to be lengthened','line_number':453,'multiline':False]
['text':' number of minLength weights','line_number':454,'multiline':False]
['text':' round up','line_number':456,'multiline':False]
['text':' Make one long range.','line_number':465,'multiline':False]
['text':' Split the range, lengthen the second part.','line_number':471,'multiline':False]
['text':' Next start = start + count1. First end = 1 before that.','line_number':477,'multiline':False]
['text':' +1 when lengthened','line_number':483,'multiline':False]
['text':' *countBytes when lengthened','line_number':484,'multiline':False]
['text':'
 * call getWeightRanges and then determine heuristically
 * which ranges to use for a given number of weights between (excluding)
 * two limits
 ','line_number':491,'multiline':True]
['text':' try until we find suitably large ranges ','line_number':509,'multiline':True]
['text':' get the smallest number of bytes in a range ','line_number':511,'multiline':True]
['text':' no good match, lengthen all minLength ranges and iterate ','line_number':526,'multiline':True]
['text':' get the next weight ','line_number':552,'multiline':True]
['text':' this range is finished ','line_number':556,'multiline':True]
['text':' increment the weight for the next value ','line_number':559,'multiline':True]
['text':' #if !UCONFIG_NO_COLLATION ','line_number':570,'multiline':True]
