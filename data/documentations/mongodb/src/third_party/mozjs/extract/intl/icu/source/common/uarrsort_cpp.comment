['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2003-2013, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uarrsort.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2003aug04
*   created by: Markus W. Scherer
*
*   Internal function for sorting arrays.
','line_number':3,'multiline':True]
['text':'*
     * "from Knuth"
     *
     * A binary search over 8 items performs 4 comparisons:
     * log2(8)=3 to subdivide, +1 to check for equality.
     * A linear search over 8 items on average also performs 4 comparisons.
     ','line_number':28,'multiline':True]
['text':' UComparator convenience implementations ---------------------------------- ','line_number':43,'multiline':True]
['text':' compare directly because (l-r) would overflow the int32_t result ','line_number':62,'multiline':True]
['text':' l>r ','line_number':67,'multiline':True]
['text':' Insertion sort using binary search --------------------------------------- ','line_number':72,'multiline':True]
['text':' Binary search until we get down to a tiny sub-array. ','line_number':80,'multiline':True]
['text':'
             * Found the item. We look for the *last* occurrence of such
             * an item, for stable sorting.
             * If we knew that there will be only few equal items,
             * we could break now and enter the linear search.
             * However, if there are many equal items, then it should be
             * faster to continue with the binary search.
             * It seems likely that we either have all unique items
             * (where found will never become TRUE in the insertion sort)
             * or potentially many duplicates.
             ','line_number':85,'multiline':True]
['text':' Linear search over the remaining tiny sub-array. ','line_number':105,'multiline':True]
['text':' one past the last equal item ','line_number':129,'multiline':True]
['text':' v=array[j] ','line_number':133,'multiline':True]
['text':' array[insertionPoint]=v ','line_number':135,'multiline':True]
['text':' QuickSort ---------------------------------------------------------------- ','line_number':154,'multiline':True]
['text':'
 * This implementation is semi-recursive:
 * It recurses for the smaller sub-array to shorten the recursion depth,
 * and loops for the larger sub-array.
 *
 * Loosely after QuickSort algorithms in
 * Niklaus Wirth
 * Algorithmen und Datenstrukturen mit Modula-2
 * B.G. Teubner Stuttgart
 * 4. Auflage 1986
 * ISBN 3-519-02260-5
 ','line_number':156,'multiline':True]
['text':' start and left are inclusive, limit and right are exclusive ','line_number':174,'multiline':True]
['text':' x=array[middle] ','line_number':184,'multiline':True]
['text':' array[left]<x ','line_number':188,'multiline':True]
['text':' x<array[right-1] ','line_number':193,'multiline':True]
['text':' swap array[left] and array[right-1] via w; ++left; --right ','line_number':199,'multiline':True]
['text':' sort sub-arrays ','line_number':213,'multiline':True]
['text':' sort [start..right[ ','line_number':215,'multiline':True]
['text':' sort [left..limit[ ','line_number':220,'multiline':True]
['text':' sort [left..limit[ ','line_number':223,'multiline':True]
['text':' sort [start..right[ ','line_number':228,'multiline':True]
['text':' allocate two intermediate item variables (x and w) ','line_number':237,'multiline':True]
['text':' uprv_sortArray() API ----------------------------------------------------- ','line_number':249,'multiline':True]
['text':'
 * Check arguments, select an appropriate implementation,
 * cast the array to char * so that array+i*itemSize works.
 ','line_number':251,'multiline':True]
