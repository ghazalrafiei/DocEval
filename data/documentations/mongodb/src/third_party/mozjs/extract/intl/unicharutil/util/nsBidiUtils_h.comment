['text':' -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':'*
 *  Read ftp://ftp.unicode.org/Public/UNIDATA/ReadMe-Latest.txt
 *  section BIDIRECTIONAL PROPERTIES
 *  for the detailed definition of the following categories
 *
 *  The values here must match the equivalents in %bidicategorycode in
 *  mozilla/intl/unicharutil/tools/genUnicodePropertyData.pl,
 *  and must also match the values used by ICU's UCharDirection.
 ','line_number':12,'multiline':True]
['text':'*
 * This specifies the language directional property of a character set.
 ','line_number':49,'multiline':True]
['text':'*
 * Find the direction of an embedding level or paragraph level set by
 * the Unicode Bidi Algorithm. (Even levels are left-to-right, odd
 * levels right-to-left.
 ','line_number':54,'multiline':True]
['text':'*
 * Check whether two bidi levels have the same parity and thus the same
 * directionality
 ','line_number':61,'multiline':True]
['text':'*
 * Convert from nsBidiLevel to nsBidiDirection
 ','line_number':67,'multiline':True]
['text':'*
 * definitions of bidirection character types by category
 ','line_number':73,'multiline':True]
['text':'*
 * Inspects a Unichar, converting numbers to Arabic or Hindi forms and
 * returning them
 * @param aChar is the character
 * @param aPrevCharArabic is true if the previous character in the string is
 *        an Arabic char
 * @param aNumFlag specifies the conversion to perform:
 *        IBMBIDI_NUMERAL_NOMINAL:      don't do any conversion
 *        IBMBIDI_NUMERAL_HINDI:        convert to Hindi forms
 *                                        (Unicode 0660-0669)
 *        IBMBIDI_NUMERAL_ARABIC:       convert to Arabic forms
 *                                        (Unicode 0030-0039)
 *        IBMBIDI_NUMERAL_HINDICONTEXT: convert numbers in Arabic text to
 *                                      Hindi, otherwise to Arabic
 * @return the converted Unichar
 ','line_number':86,'multiline':True]
['text':'*
 * Scan a Unichar string, converting numbers to Arabic or Hindi forms in
 * place
 * @param aBuffer is the string
 * @param aSize is the size of aBuffer
 * @param aNumFlag specifies the conversion to perform:
 *        IBMBIDI_NUMERAL_NOMINAL:      don't do any conversion
 *        IBMBIDI_NUMERAL_HINDI:        convert to Hindi forms
 *                                        (Unicode 0660-0669)
 *        IBMBIDI_NUMERAL_ARABIC:       convert to Arabic forms
 *                                        (Unicode 0030-0039)
 *        IBMBIDI_NUMERAL_HINDICONTEXT: convert numbers in Arabic text to
 *                                      Hindi, otherwise to Arabic
 ','line_number':105,'multiline':True]
['text':'*
 * Give a UTF-32 codepoint
 * return true if the codepoint is a Bidi control character (LRM, RLM, ALM;
 * LRE, RLE, PDF, LRO, RLO; LRI, RLI, FSI, PDI).
 * Return false, otherwise
 ','line_number':121,'multiline':True]
['text':'*
 * Give a UTF-32 codepoint
 * Return true if the codepoint is a Bidi control character that may result
 * in RTL directionality and therefore needs to trigger bidi resolution;
 * return false otherwise.
 ','line_number':148,'multiline':True]
['text':'*
 * Give a 16-bit (UTF-16) text buffer
 * @return true if the string contains right-to-left characters
 ','line_number':159,'multiline':True]
['text':' Span ensures we never pass a nullptr to Rust--even if the','line_number':164,'multiline':False]
['text':' length of the buffer is zero.','line_number':165,'multiline':False]
['text':' These values are shared with Preferences dialog','line_number':169,'multiline':False]
['text':'  ------------------','line_number':170,'multiline':False]
['text':'  If Pref values are to be changed','line_number':171,'multiline':False]
['text':'  in the XUL file of Prefs. the values','line_number':172,'multiline':False]
['text':'  Must be changed here too..','line_number':173,'multiline':False]
['text':'  ------------------','line_number':174,'multiline':False]
['text':'','line_number':175,'multiline':False]
['text':'  ------------------','line_number':180,'multiline':False]
['text':'  Text Direction','line_number':181,'multiline':False]
['text':'  ------------------','line_number':182,'multiline':False]
['text':'  bidi.direction','line_number':183,'multiline':False]
['text':'  1 = directionLTRBidi *','line_number':184,'multiline':False]
['text':'  2 = directionRTLBidi','line_number':185,'multiline':False]
['text':'  ------------------','line_number':186,'multiline':False]
['text':'  Text Type','line_number':187,'multiline':False]
['text':'  ------------------','line_number':188,'multiline':False]
['text':'  bidi.texttype','line_number':189,'multiline':False]
['text':'  1 = charsettexttypeBidi *','line_number':190,'multiline':False]
['text':'  2 = logicaltexttypeBidi','line_number':191,'multiline':False]
['text':'  3 = visualtexttypeBidi','line_number':192,'multiline':False]
['text':'  ------------------','line_number':193,'multiline':False]
['text':'  Numeral Style','line_number':194,'multiline':False]
['text':'  ------------------','line_number':195,'multiline':False]
['text':'  bidi.numeral','line_number':196,'multiline':False]
['text':'  0 = nominalnumeralBidi *','line_number':197,'multiline':False]
['text':'  1 = regularcontextnumeralBidi','line_number':198,'multiline':False]
['text':'  2 = hindicontextnumeralBidi','line_number':199,'multiline':False]
['text':'  3 = arabicnumeralBidi','line_number':200,'multiline':False]
['text':'  4 = hindinumeralBidi','line_number':201,'multiline':False]
['text':' 5 = persiancontextnumeralBidi','line_number':202,'multiline':False]
['text':'  6 = persiannumeralBidi','line_number':203,'multiline':False]
['text':' 4 bits for DIRECTION ','line_number':210,'multiline':True]
['text':' 4 bits for TEXTTYPE ','line_number':212,'multiline':True]
['text':' 4 bits for NUMERAL ','line_number':214,'multiline':True]
['text':' Constants related to the position of numerics in the codepage ','line_number':223,'multiline':True]
['text':'*
 * Arabic numeric separator and numeric formatting characters:
 *  U+0600;ARABIC NUMBER SIGN
 *  U+0601;ARABIC SIGN SANAH
 *  U+0602;ARABIC FOOTNOTE MARKER
 *  U+0603;ARABIC SIGN SAFHA
 *  U+066A;ARABIC PERCENT SIGN
 *  U+066B;ARABIC DECIMAL SEPARATOR
 *  U+066C;ARABIC THOUSANDS SEPARATOR
 *  U+06DD;ARABIC END OF AYAH
 ','line_number':236,'multiline':True]
['text':'(u) >= 0x0600 &&','line_number':248,'multiline':True]
['text':'*
 * The codepoint ranges in the following macros are based on the blocks
 *  allocated, or planned to be allocated, to right-to-left characters in the
 *  BMP (Basic Multilingual Plane) and SMP (Supplementary Multilingual Plane)
 *  according to
 *  http://unicode.org/Public/UNIDATA/extracted/DerivedBidiClass.txt and
 *  http://www.unicode.org/roadmaps/
 ','line_number':267,'multiline':True]
['text':' Due to the supplementary-plane RTL blocks being identifiable from the','line_number':282,'multiline':False]
['text':' high surrogate without examining the low surrogate, it is correct to','line_number':283,'multiline':False]
['text':' use this by-code-unit check on potentially astral text without doing','line_number':284,'multiline':False]
['text':' the math to decode surrogate pairs into code points. However, unpaired','line_number':285,'multiline':False]
['text':' high surrogates that are RTL high surrogates then count as RTL even','line_number':286,'multiline':False]
['text':' though, if replaced by the REPLACEMENT CHARACTER, it would not be','line_number':287,'multiline':False]
['text':' RTL.','line_number':288,'multiline':False]
['text':' nsBidiUtils_h__ ','line_number':295,'multiline':True]
