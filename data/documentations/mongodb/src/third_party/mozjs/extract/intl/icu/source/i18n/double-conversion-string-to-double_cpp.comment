['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' From the double-conversion library. Original license:','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Copyright 2010 the V8 project authors. All rights reserved.','line_number':6,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':7,'multiline':False]
['text':' modification, are permitted provided that the following conditions are','line_number':8,'multiline':False]
['text':' met:','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':'     * Redistributions of source code must retain the above copyright','line_number':11,'multiline':False]
['text':'       notice, this list of conditions and the following disclaimer.','line_number':12,'multiline':False]
['text':'     * Redistributions in binary form must reproduce the above','line_number':13,'multiline':False]
['text':'       copyright notice, this list of conditions and the following','line_number':14,'multiline':False]
['text':'       disclaimer in the documentation and/or other materials provided','line_number':15,'multiline':False]
['text':'       with the distribution.','line_number':16,'multiline':False]
['text':'     * Neither the name of Google Inc. nor the names of its','line_number':17,'multiline':False]
['text':'       contributors may be used to endorse or promote products derived','line_number':18,'multiline':False]
['text':'       from this software without specific prior written permission.','line_number':19,'multiline':False]
['text':'','line_number':20,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS','line_number':21,'multiline':False]
['text':' "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT','line_number':22,'multiline':False]
['text':' LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR','line_number':23,'multiline':False]
['text':' A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT','line_number':24,'multiline':False]
['text':' OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,','line_number':25,'multiline':False]
['text':' SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT','line_number':26,'multiline':False]
['text':' LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,','line_number':27,'multiline':False]
['text':' DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY','line_number':28,'multiline':False]
['text':' THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT','line_number':29,'multiline':False]
['text':' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':30,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':31,'multiline':False]
['text':' ICU PATCH: ifdef around UCONFIG_NO_FORMATTING','line_number':33,'multiline':False]
['text':' ICU PATCH: Do not include std::locale.','line_number':37,'multiline':False]
['text':' #include <locale>','line_number':40,'multiline':False]
['text':' ICU PATCH: Customize header file paths for ICU.','line_number':43,'multiline':False]
['text':' ICU PATCH: Wrap in ICU namespace','line_number':51,'multiline':False]
['text':' Fix MSVC >= 2015 (_MSC_VER == 1900) warning','line_number':56,'multiline':False]
['text':' C4244: 'argument': conversion from 'const uc16' to 'char', possible loss of data','line_number':57,'multiline':False]
['text':' against Advance and friends, when instantiated with **it as char, not uc16.','line_number':58,'multiline':False]
['text':' VS2012, see IsDecimalDigitForRadix warning fix, below','line_number':61,'multiline':False]
['text':' do not include std::locale in ICU','line_number':71,'multiline':False]
['text':' Consumes the given substring from the iterator.','line_number':101,'multiline':False]
['text':' Returns false, if the substring does not match.','line_number':102,'multiline':False]
['text':' Consumes first character of the str is equal to ch','line_number':115,'multiline':False]
['text':' namespace','line_number':121,'multiline':False]
['text':' Maximum number of significant digits in decimal representation.','line_number':123,'multiline':False]
['text':' The longest possible double in decimal representation is','line_number':124,'multiline':False]
['text':' (2^53 - 1) * 2 ^ -1074 that is (2 ^ 53 - 1) * 5 ^ 1074 / 10 ^ 1074','line_number':125,'multiline':False]
['text':' (768 digits). If we parse a number whose first digits are equal to a','line_number':126,'multiline':False]
['text':' mean of 2 adjacent doubles (that could have up to 769 digits) the result','line_number':127,'multiline':False]
['text':' must be rounded to the bigger one unless the tail consists of zeros, so','line_number':128,'multiline':False]
['text':' we don't need to preserve all the digits.','line_number':129,'multiline':False]
['text':' Returns true if a nonspace found and false if the end has reached.','line_number':158,'multiline':False]
['text':' Returns true if 'c' is a decimal digit that is valid for the given radix.','line_number':181,'multiline':False]
['text':'','line_number':182,'multiline':False]
['text':' The function is small and could be inlined, but VS2012 emitted a warning','line_number':183,'multiline':False]
['text':' because it constant-propagated the radix and concluded that the last','line_number':184,'multiline':False]
['text':' condition was always true. Moving it into a separate function and','line_number':185,'multiline':False]
['text':' suppressing optimisation keeps the compiler from warning.','line_number':186,'multiline':False]
['text':' Returns true if 'c' is a character digit that is valid for the given radix.','line_number':198,'multiline':False]
['text':' The 'a_character' should be 'a' or 'A'.','line_number':199,'multiline':False]
['text':'','line_number':200,'multiline':False]
['text':' The function is small and could be inlined, but VS2012 emitted a warning','line_number':201,'multiline':False]
['text':' because it constant-propagated the radix and concluded that the first','line_number':202,'multiline':False]
['text':' condition was always false. By moving it into a separate function the','line_number':203,'multiline':False]
['text':' compiler wouldn't warn anymore.','line_number':204,'multiline':False]
['text':' Returns true, when the iterator is equal to end.','line_number':209,'multiline':False]
['text':' Checks whether the string in the range start-end is a hex-float string.','line_number':229,'multiline':False]
['text':' This function assumes that the leading '0x'/'0X' is already consumed.','line_number':230,'multiline':False]
['text':'','line_number':231,'multiline':False]
['text':' Hex float strings are of one of the following forms:','line_number':232,'multiline':False]
['text':'   - hex_digits+ 'p' ('+'|'-')? exponent_digits+','line_number':233,'multiline':False]
['text':'   - hex_digits* '.' hex_digits+ 'p' ('+'|'-')? exponent_digits+','line_number':234,'multiline':False]
['text':'   - hex_digits+ '.' 'p' ('+'|'-')? exponent_digits+','line_number':235,'multiline':False]
['text':' Parsing integers with radix 2, 4, 8, 16, 32. Assumes current != end.','line_number':272,'multiline':False]
['text':'','line_number':273,'multiline':False]
['text':' If parse_as_hex_float is true, then the string must be a valid','line_number':274,'multiline':False]
['text':' hex-float.','line_number':275,'multiline':False]
['text':' Whether we have encountered a '.' and are parsing the decimal digits.','line_number':299,'multiline':False]
['text':' Only relevant if parse_as_hex_float is true.','line_number':300,'multiline':False]
['text':' Skip leading 0s.','line_number':303,'multiline':False]
['text':' Overflow occurred. Need to determine which direction to round the','line_number':340,'multiline':False]
['text':' result.','line_number':341,'multiline':False]
['text':' Just run over the '.'. We are just trying to see whether there is','line_number':357,'multiline':False]
['text':' a non-zero digit somewhere.','line_number':358,'multiline':False]
['text':' Rounding up.','line_number':376,'multiline':False]
['text':' Rounding to even to consistency with decimals: half-way case rounds','line_number':378,'multiline':False]
['text':' up if significant part is odd and down otherwise.','line_number':379,'multiline':False]
['text':' Rounding up.','line_number':381,'multiline':False]
['text':' Rounding up may cause overflow.','line_number':385,'multiline':False]
['text':' No need to read exponents if they are too big. That could potentially overflow','line_number':415,'multiline':False]
['text':' the `written_exponent` variable.','line_number':416,'multiline':False]
['text':' To make sure that iterator dereferencing is valid the following','line_number':456,'multiline':False]
['text':' convention is used:','line_number':457,'multiline':False]
['text':' 1. Each '++current' statement is followed by check for equality to 'end'.','line_number':458,'multiline':False]
['text':' 2. If AdvanceToNonspace returned false then current == end.','line_number':459,'multiline':False]
['text':' 3. If 'current' becomes equal to 'end' the function returns or goes to','line_number':460,'multiline':False]
['text':' 'parsing_done'.','line_number':461,'multiline':False]
['text':' 4. 'current' is not dereferenced after the 'parsing_done' label.','line_number':462,'multiline':False]
['text':' 5. Code before 'parsing_done' may rely on 'current != end'.','line_number':463,'multiline':False]
['text':' No leading spaces allowed, but AdvanceToNonspace moved forward.','line_number':472,'multiline':False]
['text':' Exponent will be adjusted if insignificant digits of the integer part','line_number':477,'multiline':False]
['text':' or insignificant leading zeros of the fractional part are dropped.','line_number':478,'multiline':False]
['text':' Skip following spaces (if allowed).','line_number':490,'multiline':False]
['text':' It could be hexadecimal value.','line_number':543,'multiline':False]
['text':' "0x"','line_number':548,'multiline':False]
['text':' Ignore leading zeros in the integer part.','line_number':574,'multiline':False]
['text':' The longest form of simplified number is: "-<significant digits>.1eXXX\0".','line_number':585,'multiline':False]
['text':' NOLINT: size is known at compile time.','line_number':588,'multiline':False]
['text':' Copy significant digits of the integer part (if any) to the buffer.','line_number':591,'multiline':False]
['text':' Will later check if it's an octal in the buffer.','line_number':597,'multiline':False]
['text':' Move the digit into the exponential part.','line_number':599,'multiline':False]
['text':' octal = false;','line_number':623,'multiline':False]
['text':' Integer part consists of 0 or is absent. Significant digits start after','line_number':624,'multiline':False]
['text':' leading zeros (if any).','line_number':625,'multiline':False]
['text':' Move this 0 into the exponent.','line_number':631,'multiline':False]
['text':' There is a fractional part.','line_number':635,'multiline':False]
['text':' We don't emit a '.', but adjust the exponent instead.','line_number':636,'multiline':False]
['text':' Ignore insignificant digits in the fractional part.','line_number':644,'multiline':False]
['text':' If leading_zeros is true then the string contains zeros.','line_number':652,'multiline':False]
['text':' If exponent < 0 then string was [+-]\.0*...','line_number':653,'multiline':False]
['text':' If significant_digits != 0 the string is not equal to 0.','line_number':654,'multiline':False]
['text':' Otherwise there are no digits in the string.','line_number':655,'multiline':False]
['text':' Parse exponential part.','line_number':659,'multiline':False]
['text':' Check overflow.','line_number':700,'multiline':False]
['text':' Don't parse as hex_float.','line_number':735,'multiline':False]
['text':' Code above ensures there are no leading zeros and the buffer has fewer than','line_number':753,'multiline':False]
['text':' kMaxSignificantDecimalDigits characters. Trim trailing zeros.','line_number':754,'multiline':False]
['text':' namespace double_conversion','line_number':803,'multiline':False]
['text':' ICU PATCH: Close ICU namespace','line_number':805,'multiline':False]
['text':' ICU PATCH: close #if !UCONFIG_NO_FORMATTING','line_number':807,'multiline':False]
