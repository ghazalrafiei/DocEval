['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*
*   Copyright (C) 1999-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  umachine.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 1999sep13
*   created by: Markus W. Scherer
*
*   This file defines basic types and constants for ICU to be
*   platform-independent. umachine.h and utf.h are included into
*   utypes.h to provide all the general definitions for ICU.
*   All of these definitions used to be in utypes.h before
*   the UTF-handling macros made this unmaintainable.
','line_number':3,'multiline':True]
['text':'*
 * \file
 * \brief Basic types and constants for UTF
 *
 * <h2> Basic types and constants for UTF </h2>
 *   This file defines basic types and constants for utf.h to be
 *   platform-independent. umachine.h and utf.h are included into
 *   utypes.h to provide all the general definitions for ICU.
 *   All of these definitions used to be in utypes.h before
 *   the UTF-handling macros made this unmaintainable.
 *
 ','line_number':29,'multiline':True]
['text':'==========================================================================','line_number':41,'multiline':True]
['text':' Include platform-dependent definitions                                   ','line_number':42,'multiline':True]
['text':' which are contained in the platform-specific file platform.h             ','line_number':43,'multiline':True]
['text':'==========================================================================','line_number':44,'multiline':True]
['text':' platform.h is included in ptypes.h ','line_number':46,'multiline':True]
['text':'
 * ANSI C headers:
 * stddef.h defines wchar_t
 ','line_number':48,'multiline':True]
['text':'==========================================================================','line_number':55,'multiline':True]
['text':' For C wrappers, we use the symbol U_CAPI.                                ','line_number':56,'multiline':True]
['text':' This works properly if the includer is C or C++.                         ','line_number':57,'multiline':True]
['text':' Functions are declared   U_CAPI return-type U_EXPORT2 function-name()... ','line_number':58,'multiline':True]
['text':'==========================================================================','line_number':59,'multiline':True]
['text':'*
 * \def U_CFUNC
 * This is used in a declaration of a library private ICU C function.
 * @stable ICU 2.4
 ','line_number':61,'multiline':True]
['text':'*
 * \def U_CDECL_BEGIN
 * This is used to begin a declaration of a library private ICU C API.
 * @stable ICU 2.4
 ','line_number':67,'multiline':True]
['text':'*
 * \def U_CDECL_END
 * This is used to end a declaration of a library private ICU C API
 * @stable ICU 2.4
 ','line_number':73,'multiline':True]
['text':'*
 * \def U_ATTRIBUTE_DEPRECATED
 *  This is used for GCC specific attributes
 * @internal
 ','line_number':90,'multiline':True]
['text':'*
 * \def U_ATTRIBUTE_DEPRECATED
 * This is used for Visual C++ specific attributes 
 * @internal
 ','line_number':97,'multiline':True]
['text':'* This is used to declare a function as a public ICU C API @stable ICU 2.0','line_number':109,'multiline':True]
['text':'* Obsolete/same as U_CAPI; was used to declare a function as a stable public ICU C API','line_number':111,'multiline':True]
['text':'* Obsolete/same as U_CAPI; was used to declare a function as a draft public ICU C API  ','line_number':113,'multiline':True]
['text':'* This is used to declare a function as a deprecated public ICU C API  ','line_number':115,'multiline':True]
['text':'* Obsolete/same as U_CAPI; was used to declare a function as an obsolete public ICU C API  ','line_number':117,'multiline':True]
['text':'* Obsolete/same as U_CAPI; was used to declare a function as an internal ICU C API  ','line_number':119,'multiline':True]
['text':'*
 * \def U_OVERRIDE
 * Defined to the C++11 "override" keyword if available.
 * Denotes a class or member which is an override of the base class.
 * May result in an error if it applied to something not an override.
 * @internal
 ','line_number':122,'multiline':True]
['text':'*
 * \def U_FINAL
 * Defined to the C++11 "final" keyword if available.
 * Denotes a class or member which may not be overridden in subclasses.
 * May result in an error if subclasses attempt to override.
 * @internal
 ','line_number':133,'multiline':True]
['text':' Before ICU 65, function-like, multi-statement ICU macros were just defined as','line_number':144,'multiline':False]
['text':' series of statements wrapped in { } blocks and the caller could choose to','line_number':145,'multiline':False]
['text':' either treat them as if they were actual functions and end the invocation','line_number':146,'multiline':False]
['text':' with a trailing ; creating an empty statement after the block or else omit','line_number':147,'multiline':False]
['text':' this trailing ; using the knowledge that the macro would expand to { }.','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':' But doing so doesn't work well with macros that look like functions and','line_number':150,'multiline':False]
['text':' compiler warnings about empty statements (ICU-20601) and ICU 65 therefore','line_number':151,'multiline':False]
['text':' switches to the standard solution of wrapping such macros in do { } while.','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':' This will however break existing code that depends on being able to invoke','line_number':154,'multiline':False]
['text':' these macros without a trailing ; so to be able to remain compatible with','line_number':155,'multiline':False]
['text':' such code the wrapper is itself defined as macros so that it's possible to','line_number':156,'multiline':False]
['text':' build ICU 65 and later with the old macro behaviour, like this:','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' export CPPFLAGS='-DUPRV_BLOCK_MACRO_BEGIN="" -DUPRV_BLOCK_MACRO_END=""'','line_number':159,'multiline':False]
['text':' runConfigureICU ...','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':'*
 * \def UPRV_BLOCK_MACRO_BEGIN
 * Defined as the "do" keyword by default.
 * @internal
 ','line_number':163,'multiline':True]
['text':'*
 * \def UPRV_BLOCK_MACRO_END
 * Defined as "while (false)" by default.
 * @internal
 ','line_number':172,'multiline':True]
['text':'==========================================================================','line_number':181,'multiline':True]
['text':' limits for int32_t etc., like in POSIX inttypes.h                        ','line_number':182,'multiline':True]
['text':'==========================================================================','line_number':183,'multiline':True]
['text':'* The smallest value an 8 bit signed integer can hold @stable ICU 2.0 ','line_number':186,'multiline':True]
['text':'* The smallest value a 16 bit signed integer can hold @stable ICU 2.0 ','line_number':190,'multiline':True]
['text':'* The smallest value a 32 bit signed integer can hold @stable ICU 2.0 ','line_number':194,'multiline':True]
['text':'* The largest value an 8 bit signed integer can hold @stable ICU 2.0 ','line_number':199,'multiline':True]
['text':'* The largest value a 16 bit signed integer can hold @stable ICU 2.0 ','line_number':203,'multiline':True]
['text':'* The largest value a 32 bit signed integer can hold @stable ICU 2.0 ','line_number':207,'multiline':True]
['text':'* The largest value an 8 bit unsigned integer can hold @stable ICU 2.0 ','line_number':212,'multiline':True]
['text':'* The largest value a 16 bit unsigned integer can hold @stable ICU 2.0 ','line_number':216,'multiline':True]
['text':'* The largest value a 32 bit unsigned integer can hold @stable ICU 2.0 ','line_number':220,'multiline':True]
['text':'*
 * Provides a platform independent way to specify a signed 64-bit integer constant.
 * note: may be wrong for some 64 bit platforms - ensure your compiler provides INT64_C
 * @stable ICU 2.8
 ','line_number':228,'multiline':True]
['text':'*
 * Provides a platform independent way to specify an unsigned 64-bit integer constant.
 * note: may be wrong for some 64 bit platforms - ensure your compiler provides UINT64_C
 * @stable ICU 2.8
 ','line_number':236,'multiline':True]
['text':'* The smallest value a 64 bit signed integer can hold @stable ICU 2.8 ','line_number':244,'multiline':True]
['text':'* The largest value a 64 bit signed integer can hold @stable ICU 2.8 ','line_number':248,'multiline':True]
['text':'* The largest value a 64 bit unsigned integer can hold @stable ICU 2.8 ','line_number':252,'multiline':True]
['text':'==========================================================================','line_number':257,'multiline':True]
['text':' Boolean data type                                                        ','line_number':258,'multiline':True]
['text':'==========================================================================','line_number':259,'multiline':True]
['text':'*
 * The ICU boolean type, a signed-byte integer.
 * ICU-specific for historical reasons: The C and C++ standards used to not define type bool.
 * Also provides a fixed type definition, as opposed to
 * type bool whose details (e.g., sizeof) may vary by compiler and between C and C++.
 *
 * @stable ICU 2.0
 ','line_number':261,'multiline':True]
['text':'*
 * \def U_DEFINE_FALSE_AND_TRUE
 * Normally turns off defining macros FALSE=0 & TRUE=1 in public ICU headers.
 * These obsolete macros sometimes break compilation of other code that
 * defines enum constants or similar with these names.
 * C++ has long defined bool/false/true.
 * C99 also added definitions for these, although as macros; see stdbool.h.
 *
 * You may transitionally define U_DEFINE_FALSE_AND_TRUE=1 if you need time to migrate code.
 *
 * @internal ICU 68
 ','line_number':271,'multiline':True]
['text':' Use the predefined value.','line_number':284,'multiline':False]
['text':' Inside ICU: Keep FALSE & TRUE available.','line_number':289,'multiline':False]
['text':' Outside ICU: Avoid collision with non-macro definitions of FALSE & TRUE.','line_number':292,'multiline':False]
['text':'*
 * The TRUE value of a UBool.
 *
 * @deprecated ICU 68 Use standard "true" instead.
 ','line_number':298,'multiline':True]
['text':'*
 * The FALSE value of a UBool.
 *
 * @deprecated ICU 68 Use standard "false" instead.
 ','line_number':306,'multiline':True]
['text':' U_DEFINE_FALSE_AND_TRUE','line_number':313,'multiline':False]
['text':'==========================================================================','line_number':315,'multiline':True]
['text':' Unicode data types                                                       ','line_number':316,'multiline':True]
['text':'==========================================================================','line_number':317,'multiline':True]
['text':' wchar_t-related definitions -------------------------------------------- ','line_number':319,'multiline':True]
['text':'
 * \def U_WCHAR_IS_UTF16
 * Defined if wchar_t uses UTF-16.
 *
 * @stable ICU 2.0
 ','line_number':321,'multiline':True]
['text':'
 * \def U_WCHAR_IS_UTF32
 * Defined if wchar_t uses UTF-32.
 *
 * @stable ICU 2.0
 ','line_number':327,'multiline':True]
['text':' UChar and UChar32 definitions -------------------------------------------- ','line_number':355,'multiline':True]
['text':'* Number of bytes in a UChar. @stable ICU 2.0 ','line_number':357,'multiline':True]
['text':'*
 * \def U_CHAR16_IS_TYPEDEF
 * If 1, then char16_t is a typedef and not a real type (yet)
 * @internal
 ','line_number':360,'multiline':True]
['text':' for AIX, uchar.h needs to be included','line_number':366,'multiline':False]
['text':' Versions of Visual Studio/MSVC below 2015 do not support char16_t as a real type,','line_number':370,'multiline':False]
['text':' and instead use a typedef.  https://msdn.microsoft.com/library/bb531344.aspx','line_number':371,'multiline':False]
['text':'*
 * \var UChar
 *
 * The base type for UTF-16 code units and pointers.
 * Unsigned 16-bit integer.
 * Starting with ICU 59, C++ API uses char16_t directly, while C API continues to use UChar.
 *
 * UChar is configurable by defining the macro UCHAR_TYPE
 * on the preprocessor or compiler command line:
 * -DUCHAR_TYPE=uint16_t or -DUCHAR_TYPE=wchar_t (if U_SIZEOF_WCHAR_T==2) etc.
 * (The UCHAR_TYPE can also be \#defined earlier in this file, for outside the ICU library code.)
 * This is for transitional use from application code that uses uint16_t or wchar_t for UTF-16.
 *
 * The default is UChar=char16_t.
 *
 * C++11 defines char16_t as bit-compatible with uint16_t, but as a distinct type.
 *
 * In C, char16_t is a simple typedef of uint_least16_t.
 * ICU requires uint_least16_t=uint16_t for data memory mapping.
 * On macOS, char16_t is not available because the uchar.h standard header is missing.
 *
 * @stable ICU 4.4
 ','line_number':378,'multiline':True]
['text':' #if 1 is normal. UChar defaults to char16_t in C++.','line_number':403,'multiline':False]
['text':' For configuration testing of UChar=uint16_t temporarily change this to #if 0.','line_number':404,'multiline':False]
['text':' The intltest Makefile #defines UCHAR_TYPE=char16_t,','line_number':405,'multiline':False]
['text':' so we only #define it to uint16_t if it is undefined so far.','line_number':406,'multiline':False]
['text':' Inside the ICU library code, never configurable.','line_number':413,'multiline':False]
['text':'*
 * \var OldUChar
 * Default ICU 58 definition of UChar.
 * A base type for UTF-16 code units and pointers.
 * Unsigned 16-bit integer.
 *
 * Define OldUChar to be wchar_t if that is 16 bits wide.
 * If wchar_t is not 16 bits wide, then define UChar to be uint16_t.
 *
 * This makes the definition of OldUChar platform-dependent
 * but allows direct string type compatibility with platforms with
 * 16-bit wchar_t types.
 *
 * This is how UChar was defined in ICU 58, for transition convenience.
 * Exception: ICU 58 UChar was defined to UCHAR_TYPE if that macro was defined.
 * The current UChar responds to UCHAR_TYPE but OldUChar does not.
 *
 * @stable ICU 59
 ','line_number':423,'multiline':True]
['text':'*
 * Define UChar32 as a type for single Unicode code points.
 * UChar32 is a signed 32-bit integer (same as int32_t).
 *
 * The Unicode code point range is 0..0x10ffff.
 * All other values (negative or >=0x110000) are illegal as Unicode code points.
 * They may be used as sentinel values to indicate "done", "error"
 * or similar non-code point conditions.
 *
 * Before ICU 2.4 (Jitterbug 2146), UChar32 was defined
 * to be wchar_t if that is 32 bits wide (wchar_t may be signed or unsigned)
 * or else to be uint32_t.
 * That is, the definition of UChar32 was platform-dependent.
 *
 * @see U_SENTINEL
 * @stable ICU 2.4
 ','line_number':450,'multiline':True]
['text':'*
 * This value is intended for sentinel values for APIs that
 * (take or) return single code points (UChar32).
 * It is outside of the Unicode code point range 0..0x10ffff.
 * 
 * For example, a "done" or "error" value in a new API
 * could be indicated with U_SENTINEL.
 *
 * ICU APIs designed before ICU 2.4 usually define service-specific "done"
 * values, mostly 0xffff.
 * Those may need to be distinguished from
 * actual U+ffff text contents by calling functions like
 * CharacterIterator::hasNext() or UnicodeString::length().
 *
 * @return -1
 * @see UChar32
 * @stable ICU 2.4
 ','line_number':469,'multiline':True]
