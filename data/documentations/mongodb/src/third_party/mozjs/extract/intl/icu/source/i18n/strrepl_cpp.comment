['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (c) 2002-2012, International Business Machines Corporation
*   and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   01/21/2002  aliu        Creation.
**********************************************************************
','line_number':3,'multiline':True]
['text':'*
 * Construct a StringReplacer that sets the emits the given output
 * text and sets the cursor to the given position.
 * @param theOutput text that will replace input text when the
 * replace() method is called.  May contain stand-in characters
 * that represent nested replacers.
 * @param theCursorPos cursor position that will be returned by
 * the replace() method
 * @param theData transliterator context object that translates
 * stand-in characters to UnicodeReplacer objects
 ','line_number':28,'multiline':True]
['text':'*
 * Construct a StringReplacer that sets the emits the given output
 * text and does not modify the cursor.
 * @param theOutput text that will replace input text when the
 * replace() method is called.  May contain stand-in characters
 * that represent nested replacers.
 * @param theData transliterator context object that translates
 * stand-in characters to UnicodeReplacer objects
 ','line_number':49,'multiline':True]
['text':'*
 * Copy constructor.
 ','line_number':67,'multiline':True]
['text':'*
 * Destructor
 ','line_number':81,'multiline':True]
['text':'*
 * Implement UnicodeFunctor
 ','line_number':87,'multiline':True]
['text':'*
 * Implement UnicodeFunctor
 ','line_number':94,'multiline':True]
['text':'*
 * UnicodeReplacer API
 ','line_number':101,'multiline':True]
['text':' NOTE: It should be possible to _always_ run the complex','line_number':111,'multiline':False]
['text':' processing code; just slower.  If not, then there is a bug','line_number':112,'multiline':False]
['text':' in the complex processing code.','line_number':113,'multiline':False]
['text':' Simple (no nested replacers) Processing Code :','line_number':115,'multiline':False]
['text':' Setup default cursor position (for cursorPos within output)','line_number':120,'multiline':False]
['text':' Complex (nested replacers) Processing Code :','line_number':124,'multiline':False]
['text':' When there are segments to be copied, use the Replaceable.copy()
         * API in order to retain out-of-band data.  Copy everything to the
         * end of the string, then copy them back over the key.  This preserves
         * the integrity of indices into the key and surrounding context while
         * generating the output text.
         ','line_number':126,'multiline':True]
['text':' offset into 'output'','line_number':133,'multiline':False]
['text':' The temporary buffer starts at tempStart, and extends','line_number':136,'multiline':False]
['text':' to destLimit.  The start of the buffer has a single','line_number':137,'multiline':False]
['text':' character from before the key.  This provides style','line_number':138,'multiline':False]
['text':' data when addition characters are filled into the','line_number':139,'multiline':False]
['text':' temporary buffer.  If there is nothing to the left, use','line_number':140,'multiline':False]
['text':' the non-character U+FFFF, which Replaceable subclasses','line_number':141,'multiline':False]
['text':' should treat specially as a "no-style character."','line_number':142,'multiline':False]
['text':' destStart points to the point after the style context','line_number':143,'multiline':False]
['text':' character, so it is tempStart+1 or tempStart+2.','line_number':144,'multiline':False]
['text':' start of temp buffer','line_number':145,'multiline':False]
['text':' copy new text to here','line_number':146,'multiline':False]
['text':' Record the position of the cursor','line_number':160,'multiline':False]
['text':' relative to start','line_number':161,'multiline':False]
['text':' Accumulate straight (non-segment) text.','line_number':166,'multiline':False]
['text':' Insert any accumulated straight text.','line_number':171,'multiline':False]
['text':' Delegate output generation to replacer object','line_number':178,'multiline':False]
['text':' Insert any accumulated straight text.','line_number':184,'multiline':False]
['text':' Record the position of the cursor','line_number':190,'multiline':False]
['text':' relative to start','line_number':191,'multiline':False]
['text':' Copy new text to start, and delete it','line_number':196,'multiline':False]
['text':' Delete the old text (the key)','line_number':200,'multiline':False]
['text':' Adjust the cursor for positions outside the key.  These','line_number':205,'multiline':False]
['text':' refer to code points rather than code units.  If cursorPos','line_number':206,'multiline':False]
['text':' is within the output string, then use newStart, which has','line_number':207,'multiline':False]
['text':' already been set above.','line_number':208,'multiline':False]
['text':' Outside the output string, cursorPos counts code points','line_number':212,'multiline':False]
['text':' Outside the output string, cursorPos counts code points','line_number':221,'multiline':False]
['text':' Cursor is within output string.  It has been set up above','line_number':228,'multiline':False]
['text':' to be relative to start.','line_number':229,'multiline':False]
['text':'*
 * UnicodeReplacer API
 ','line_number':239,'multiline':True]
['text':' Handle a cursor preceding the output','line_number':249,'multiline':False]
['text':'@','line_number':252,'multiline':True]
['text':' Fall through and append '|' below','line_number':254,'multiline':False]
['text':'|','line_number':259,'multiline':True]
['text':' Ok to use 16-bits here','line_number':261,'multiline':False]
['text':' Handle a cursor after the output.  Use > rather than >= because','line_number':276,'multiline':False]
['text':' if cursor == output.length() it is at the end of the output,','line_number':277,'multiline':False]
['text':' which is the default position, so we need not emit it.','line_number':278,'multiline':False]
['text':'@','line_number':282,'multiline':True]
['text':'|','line_number':284,'multiline':True]
['text':' Flush quoteBuf out to result','line_number':286,'multiline':False]
['text':'*
 * Implement UnicodeReplacer
 ','line_number':293,'multiline':True]
['text':'*
 * UnicodeFunctor API
 ','line_number':309,'multiline':True]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':327,'multiline':True]
['text':'eof','line_number':329,'multiline':False]
