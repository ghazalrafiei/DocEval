['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' Forward-declarations','line_number':18,'multiline':False]
['text':'* Flags for the type result_flags_t ','line_number':24,'multiline':True]
['text':' FLAG_HAS_DEFAULT_CURRENCY = 0x0010, // no longer used','line_number':30,'multiline':False]
['text':'* Flags for the type parse_flags_t ','line_number':37,'multiline':True]
['text':' PARSE_FLAG_FRACTION_GROUPING_ENABLED = 0x0040, // see #10794','line_number':45,'multiline':False]
['text':' PARSE_FLAG_OPTIMIZE = 0x0800, // no longer used','line_number':50,'multiline':False]
['text':' PARSE_FLAG_FORCE_BIG_DECIMAL = 0x1000, // not used in ICU4C','line_number':51,'multiline':False]
['text':' TODO: Is this class worthwhile?','line_number':58,'multiline':False]
['text':' Use the alias-only constructor and then call UnicodeString operator==','line_number':79,'multiline':False]
['text':'*
 * Struct-like class to hold the results of a parsing routine.
 *
 * @author sffc
 ','line_number':88,'multiline':True]
['text':' Exported as U_I18N_API for tests','line_number':93,'multiline':False]
['text':'*
     * The numerical value that was parsed.
     ','line_number':97,'multiline':True]
['text':'*
     * The index of the last char consumed during parsing. If parsing started at index 0, this is equal
     * to the number of chars consumed. This is NOT necessarily the same as the StringSegment offset;
     * "weak" chars, like whitespace, change the offset, but the charsConsumed is not touched until a
     * "strong" char is encountered.
     ','line_number':102,'multiline':True]
['text':'*
     * Boolean flags (see constants above).
     ','line_number':110,'multiline':True]
['text':'*
     * The pattern string corresponding to the prefix that got consumed.
     ','line_number':115,'multiline':True]
['text':'*
     * The pattern string corresponding to the suffix that got consumed.
     ','line_number':120,'multiline':True]
['text':'*
     * The currency that got consumed.
     ','line_number':125,'multiline':True]
['text':'*
     * Call this method to register that a "strong" char was consumed. This should be done after calling
     * {@link StringSegment#setOffset} or {@link StringSegment#adjustOffset} except when the char is
     * "weak", like whitespace.
     *
     * <p>
     * <strong>What is a strong versus weak char?</strong> The behavior of number parsing is to "stop"
     * after reading the number, even if there is other content following the number. For example, after
     * parsing the string "123 " (123 followed by a space), the cursor should be set to 3, not 4, even
     * though there are matchers that accept whitespace. In this example, the digits are strong, whereas
     * the whitespace is weak. Grouping separators are weak, whereas decimal separators are strong. Most
     * other chars are strong.
     *
     * @param segment
     *            The current StringSegment, usually immediately following a call to setOffset.
     ','line_number':138,'multiline':True]
['text':'* Apply certain number-related flags to the DecimalQuantity. ','line_number':156,'multiline':True]
['text':'*
     * Returns whether this the parse was successful. To be successful, at least one char must have been
     * consumed, and the failure flag must not be set.
     ','line_number':159,'multiline':True]
['text':'*
 * The core interface implemented by all matchers used for number parsing.
 *
 * Given a string, there should NOT be more than one way to consume the string with the same matcher
 * applied multiple times. If there is, the non-greedy parsing algorithm will be unhappy and may enter an
 * exponential-time loop. For example, consider the "A Matcher" that accepts "any number of As". Given
 * the string "AAAA", there are 2^N = 8 ways to apply the A Matcher to this string: you could have the A
 * Matcher apply 4 times to each character; you could have it apply just once to all the characters; you
 * could have it apply to the first 2 characters and the second 2 characters; and so on. A better version
 * of the "A Matcher" would be for it to accept exactly one A, and allow the algorithm to run it
 * repeatedly to consume a string of multiple As. The A Matcher can implement the Flexible interface
 * below to signal that it can be applied multiple times in a row.
 *
 * @author sffc
 ','line_number':175,'multiline':True]
['text':' Exported as U_I18N_API for tests','line_number':190,'multiline':False]
['text':'*
     * Matchers can override this method to return true to indicate that they are optional and can be run
     * repeatedly. Used by SeriesMatcher, primarily in the context of IgnorablesMatcher.
     ','line_number':195,'multiline':True]
['text':'*
     * Runs this matcher starting at the beginning of the given StringSegment. If this matcher finds
     * something interesting in the StringSegment, it should update the offset of the StringSegment
     * corresponding to how many chars were matched.
     *
     * This method is thread-safe.
     *
     * @param segment
     *            The StringSegment to match against. Matches always start at the beginning of the
     *            segment. The segment is guaranteed to contain at least one char.
     * @param result
     *            The data structure to store results if the match succeeds.
     * @return Whether this matcher thinks there may be more interesting chars beyond the end of the
     *         string segment.
     ','line_number':203,'multiline':True]
['text':'*
     * Performs a fast "smoke check" for whether or not this matcher could possibly match against the
     * given string segment. The test should be as fast as possible but also as restrictive as possible.
     * For example, matchers can maintain a UnicodeSet of all code points that count possibly start a
     * match. Matchers should use the {@link StringSegment#startsWith} method in order to correctly
     * handle case folding.
     *
     * @param segment
     *            The segment to check against.
     * @return true if the matcher might be able to match against this segment; false if it definitely
     *         will not be able to match.
     ','line_number':220,'multiline':True]
['text':'*
     * Method called at the end of a parse, after all matchers have failed to consume any more chars.
     * Allows a matcher to make final modifications to the result given the knowledge that no more
     * matches are possible.
     *
     * @param result
     *            The data structure to store results.
     ','line_number':234,'multiline':True]
['text':' Default implementation: no-op','line_number':243,'multiline':False]
['text':' String for debugging','line_number':246,'multiline':False]
['text':' No construction except by subclasses!','line_number':250,'multiline':False]
['text':'*
 * Interface for use in arguments.
 ','line_number':255,'multiline':True]
['text':' Exported as U_I18N_API for tests','line_number':258,'multiline':False]
['text':' namespace impl','line_number':267,'multiline':False]
['text':' namespace numparse','line_number':268,'multiline':False]
['text':'__NUMPARSE_TYPES_H__','line_number':271,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':272,'multiline':True]
