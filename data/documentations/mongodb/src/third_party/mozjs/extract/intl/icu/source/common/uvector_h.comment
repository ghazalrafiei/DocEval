['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (C) 1999-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   10/22/99    alan        Creation.  This is an internal header.
*                           It should not be exported.
**********************************************************************
','line_number':3,'multiline':True]
['text':'*
 * <p>Ultralightweight C++ implementation of a <tt>void*</tt> vector
 * that is (mostly) compatible with java.util.Vector.
 *
 * <p>This is a very simple implementation, written to satisfy an
 * immediate porting need.  As such, it is not completely fleshed out,
 * and it aims for simplicity and conformity.  Nonetheless, it serves
 * its purpose (porting code from java that uses java.util.Vector)
 * well, and it could be easily made into a more robust vector class.
 *
 * <p><b>Design notes</b>
 *
 * <p>There is index bounds checking, but little is done about it.  If
 * indices are out of bounds, either nothing happens, or zero is
 * returned.  We <em>do</em> avoid indexing off into the weeds.
 *
 * <p>There is detection of out of memory, but the handling is very
 * coarse-grained -- similar to UnicodeString's protocol, but even
 * coarser.  The class contains <em>one static flag</em> that is set
 * when any call to <tt>new</tt> returns zero.  This allows the caller
 * to use several vectors and make just one check at the end to see if
 * a memory failure occurred.  This is more efficient than making a
 * check after each call on each vector when doing many operations on
 * multiple vectors.  The single static flag works best when memory
 * failures are infrequent, and when recovery options are limited or
 * nonexistent.
 *
 * <p>Since we don't have garbage collection, UVector was given the
 * option to <em>own</em>its contents.  To employ this, set a deleter
 * function.  The deleter is called on a void* pointer when that
 * pointer is released by the vector, either when the vector itself is
 * destructed, or when a call to setElementAt() overwrites an element,
 * or when a call to remove() or one of its variants explicitly
 * removes an element.  If no deleter is set, or the deleter is set to
 * zero, then it is assumed that the caller will delete elements as
 * needed.
 *
 * <p>In order to implement methods such as contains() and indexOf(),
 * UVector needs a way to compare objects for equality.  To do so, it
 * uses a comparison function, or "comparer."  If the comparer is not
 * set, or is set to zero, then all such methods will act as if the
 * vector contains no element.  That is, indexOf() will always return
 * -1, contains() will always return false, etc.
 *
 * <p><b>To do</b>
 *
 * <p>Improve the handling of index out of bounds errors.
 *
 * @author Alan Liu
 ','line_number':25,'multiline':True]
['text':' NOTE: UVector uses the UHashKey (union of void* and int32_t) as','line_number':76,'multiline':False]
['text':' its basic storage type.  It uses UElementsAreEqual as its','line_number':77,'multiline':False]
['text':' comparison function.  It uses UObjectDeleter as its deleter','line_number':78,'multiline':False]
['text':' function.  These are named for hashtables, but used here as-is','line_number':79,'multiline':False]
['text':' rather than duplicating the type.  This allows sharing of','line_number':80,'multiline':False]
['text':' support functions.','line_number':81,'multiline':False]
['text':'*
     * Assign this object to another (make this a copy of 'other').
     * Use the 'assign' function to assign each element.
     ','line_number':105,'multiline':True]
['text':'*
     * Compare this vector with another.  They will be considered
     * equal if they are of the same size and all elements are equal,
     * as compared using this object's comparer.
     ','line_number':111,'multiline':True]
['text':'*
     * Equivalent to !operator==()
     ','line_number':118,'multiline':True]
['text':'------------------------------------------------------------','line_number':123,'multiline':False]
['text':' java.util.Vector API','line_number':124,'multiline':False]
['text':'------------------------------------------------------------','line_number':125,'multiline':False]
['text':'*
     * Change the size of this vector as follows: If newSize is
     * smaller, then truncate the array, possibly deleting held
     * elements for i >= newSize.  If newSize is larger, grow the
     * array, filling in new slots with NULL.
     ','line_number':177,'multiline':True]
['text':'*
     * Fill in the given array with all elements of this vector.
     ','line_number':185,'multiline':True]
['text':'------------------------------------------------------------','line_number':190,'multiline':False]
['text':' New API','line_number':191,'multiline':False]
['text':'------------------------------------------------------------','line_number':192,'multiline':False]
['text':'*
     * Removes the element at the given index from this vector and
     * transfer ownership of it to the caller.  After this call, the
     * caller owns the result and must delete it and the vector entry
     * at 'index' is removed, shifting all subsequent entries back by
     * one index and shortening the size of the vector by one.  If the
     * index is out of range or if there is no item at the given index
     * then 0 is returned and the vector is unchanged.
     ','line_number':200,'multiline':True]
['text':'*
     * Returns true if this vector contains none of the elements
     * of the given vector.
     * @param other vector to be checked for containment
     * @return true if the test condition is met
     ','line_number':211,'multiline':True]
['text':'*
     * Insert the given object into this vector at its sorted position
     * as defined by 'compare'.  The current elements are assumed to
     * be sorted already.
     ','line_number':219,'multiline':True]
['text':'*
     * Insert the given integer into this vector at its sorted position
     * as defined by 'compare'.  The current elements are assumed to
     * be sorted already.
     ','line_number':226,'multiline':True]
['text':'*
     * Sort the contents of the vector, assuming that the contents of the
     * vector are of type int32_t.
     ','line_number':233,'multiline':True]
['text':'*
      * Sort the contents of this vector, using a caller-supplied function
      * to do the comparisons.  (It's confusing that
      *  UVector's UElementComparator function is different from the
      *  UComparator function type defined in uarrsort.h)
      ','line_number':239,'multiline':True]
['text':'*
     * Stable sort the contents of this vector using a caller-supplied function
     * of type UComparator to do the comparison.  Provides more flexibility
     * than UVector::sort() because an additional user parameter can be passed to
     * the comparison function.
     ','line_number':247,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for this class.
     ','line_number':255,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for the actual class.
     ','line_number':260,'multiline':True]
['text':' Disallow','line_number':272,'multiline':False]
['text':' Disallow','line_number':275,'multiline':False]
['text':'*
 * <p>Ultralightweight C++ implementation of a <tt>void*</tt> stack
 * that is (mostly) compatible with java.util.Stack.  As in java, this
 * is merely a paper thin layer around UVector.  See the UVector
 * documentation for further information.
 *
 * <p><b>Design notes</b>
 *
 * <p>The element at index <tt>n-1</tt> is (of course) the top of the
 * stack.
 *
 * <p>The poorly named <tt>empty()</tt> method doesn't empty the
 * stack; it determines if the stack is empty.
 *
 * @author Alan Liu
 ','line_number':281,'multiline':True]
['text':' It's okay not to have a virtual destructor (in UVector)','line_number':309,'multiline':False]
['text':' because UStack has no special cleanup to do.','line_number':310,'multiline':False]
['text':'
    If the object o occurs as an item in this stack,
    this method returns the 1-based distance from the top of the stack.
    ','line_number':326,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for this class.
     ','line_number':332,'multiline':True]
['text':'*
     * ICU "poor man's RTTI", returns a UClassID for the actual class.
     ','line_number':337,'multiline':True]
['text':' Disallow','line_number':343,'multiline':False]
['text':' Disallow','line_number':346,'multiline':False]
['text':' UVector inlines','line_number':351,'multiline':False]
['text':' UStack inlines','line_number':389,'multiline':False]
