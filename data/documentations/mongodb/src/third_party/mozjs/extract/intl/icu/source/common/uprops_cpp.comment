['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2002-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uprops.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002feb24
*   created by: Markus W. Scherer
*
*   Implementations for mostly non-core Unicode character properties
*   stored in uprops.icu.
*
*   With the APIs implemented here, almost all properties files and
*   their associated implementation files are used from this file,
*   including those for normalization and case mappings.
','line_number':3,'multiline':True]
['text':' Unicode text layout properties data -----------------------------------------','line_number':46,'multiline':False]
['text':' Indic_Positional_Category','line_number':53,'multiline':False]
['text':' Indic_Syllabic_Category','line_number':54,'multiline':False]
['text':' Vertical_Orientation','line_number':55,'multiline':False]
['text':'context','line_number':81,'multiline':True]
['text':' type ','line_number':82,'multiline':True]
['text':'name','line_number':82,'multiline':True]
['text':' UInitOnce singleton initialization function','line_number':94,'multiline':False]
['text':' Not enough indexes.','line_number':105,'multiline':False]
['text':' namespace','line_number':152,'multiline':False]
['text':' general properties API functions ----------------------------------------- ','line_number':154,'multiline':True]
['text':' SRC_PROPSVEC column, or "source" if mask==0','line_number':161,'multiline':False]
['text':'which','line_number':166,'multiline':True]
['text':' systematic, directly stored properties ','line_number':167,'multiline':True]
['text':'prop','line_number':171,'multiline':True]
['text':'prop','line_number':175,'multiline':True]
['text':'which','line_number':175,'multiline':True]
['text':'prop','line_number':179,'multiline':True]
['text':'which','line_number':179,'multiline':True]
['text':'prop','line_number':183,'multiline':True]
['text':'which','line_number':183,'multiline':True]
['text':'prop','line_number':192,'multiline':True]
['text':'which','line_number':192,'multiline':True]
['text':' By definition, Full_Composition_Exclusion is the same as NFC_QC=No.','line_number':193,'multiline':False]
['text':' UCHAR_NF*_INERT properties','line_number':200,'multiline':False]
['text':'prop','line_number':206,'multiline':True]
['text':'prop','line_number':219,'multiline':True]
['text':'which','line_number':219,'multiline':True]
['text':' c has a decomposition ','line_number':227,'multiline':True]
['text':' single BMP code point ','line_number':229,'multiline':True]
['text':' single supplementary code point ','line_number':233,'multiline':True]
['text':' protect against bad input ','line_number':238,'multiline':True]
['text':' single code point ','line_number':241,'multiline':True]
['text':' guess some large but stack-friendly capacity ','line_number':245,'multiline':True]
['text':'prop','line_number':263,'multiline':True]
['text':'which','line_number':263,'multiline':True]
['text':' The ReorderingBuffer must be in a block because its destructor','line_number':272,'multiline':False]
['text':' needs to release dest's buffer before we look at its contents.','line_number':273,'multiline':False]
['text':' Small destCapacity for NFKC_CF(c).','line_number':275,'multiline':False]
['text':'prop','line_number':291,'multiline':True]
['text':'which','line_number':291,'multiline':True]
['text':'prop','line_number':300,'multiline':True]
['text':'which','line_number':300,'multiline':True]
['text':'prop','line_number':304,'multiline':True]
['text':'which','line_number':304,'multiline':True]
['text':'prop','line_number':308,'multiline':True]
['text':'which','line_number':308,'multiline':True]
['text':'prop','line_number':312,'multiline':True]
['text':'which','line_number':312,'multiline':True]
['text':'prop','line_number':316,'multiline':True]
['text':'which','line_number':316,'multiline':True]
['text':'prop','line_number':320,'multiline':True]
['text':'which','line_number':320,'multiline':True]
['text':' Property starts are a subset of lb=RI etc.','line_number':321,'multiline':False]
['text':'
     * column and mask values for binary properties from u_getUnicodeProperties().
     * Must be in order of corresponding UProperty,
     * and there must be exactly one entry per binary UProperty.
     *
     * Properties with mask==0 are handled in code.
     * For them, column is the UPropertySource value.
     ','line_number':326,'multiline':True]
['text':' UCHAR_LOWERCASE','line_number':356,'multiline':False]
['text':' UCHAR_SOFT_DOTTED','line_number':361,'multiline':False]
['text':' UCHAR_UPPERCASE','line_number':364,'multiline':False]
['text':' UCHAR_CASE_SENSITIVE','line_number':368,'multiline':False]
['text':' UCHAR_NFD_INERT','line_number':371,'multiline':False]
['text':' UCHAR_NFKD_INERT','line_number':372,'multiline':False]
['text':' UCHAR_NFC_INERT','line_number':373,'multiline':False]
['text':' UCHAR_NFKC_INERT','line_number':374,'multiline':False]
['text':' UCHAR_CASED','line_number':383,'multiline':False]
['text':' UCHAR_CASE_IGNORABLE','line_number':384,'multiline':False]
['text':' UCHAR_CHANGES_WHEN_LOWERCASED','line_number':385,'multiline':False]
['text':' UCHAR_CHANGES_WHEN_UPPERCASED','line_number':386,'multiline':False]
['text':' UCHAR_CHANGES_WHEN_TITLECASED','line_number':387,'multiline':False]
['text':' UCHAR_CHANGES_WHEN_CASEMAPPED','line_number':389,'multiline':False]
['text':' c is range-checked in the functions that are called from here ','line_number':403,'multiline':True]
['text':' not a known binary property ','line_number':405,'multiline':True]
['text':' SRC_PROPSVEC column, or "source" if mask==0','line_number':419,'multiline':False]
['text':' =maxValue if getMaxValueFromShift() is used','line_number':421,'multiline':False]
['text':'which','line_number':426,'multiline':True]
['text':' systematic, directly stored properties ','line_number':427,'multiline':True]
['text':'which','line_number':431,'multiline':True]
['text':'which','line_number':435,'multiline':True]
['text':'prop','line_number':439,'multiline':True]
['text':'which','line_number':439,'multiline':True]
['text':'prop','line_number':443,'multiline':True]
['text':'which','line_number':443,'multiline':True]
['text':'prop','line_number':447,'multiline':True]
['text':'prop','line_number':456,'multiline':True]
['text':'which','line_number':456,'multiline':True]
['text':'prop','line_number':461,'multiline':True]
['text':'which','line_number':461,'multiline':True]
['text':'prop','line_number':465,'multiline':True]
['text':'which','line_number':465,'multiline':True]
['text':'prop','line_number':469,'multiline':True]
['text':'which','line_number':469,'multiline':True]
['text':'prop','line_number':473,'multiline':True]
['text':'which','line_number':473,'multiline':True]
['text':'prop','line_number':478,'multiline':True]
['text':'which','line_number':478,'multiline':True]
['text':'prop','line_number':483,'multiline':True]
['text':'which','line_number':483,'multiline':True]
['text':'
 * Map some of the Grapheme Cluster Break values to Hangul Syllable Types.
 * Hangul_Syllable_Type is fully redundant with a subset of Grapheme_Cluster_Break.
 ','line_number':488,'multiline':True]
['text':' U_GCB_OTHER ','line_number':493,'multiline':True]
['text':' U_GCB_CONTROL ','line_number':494,'multiline':True]
['text':' U_GCB_CR ','line_number':495,'multiline':True]
['text':' U_GCB_EXTEND ','line_number':496,'multiline':True]
['text':' U_GCB_L ','line_number':497,'multiline':True]
['text':' U_GCB_LF ','line_number':498,'multiline':True]
['text':' U_GCB_LV ','line_number':499,'multiline':True]
['text':' U_GCB_LVT ','line_number':500,'multiline':True]
['text':' U_GCB_T ','line_number':501,'multiline':True]
['text':' U_GCB_V ','line_number':502,'multiline':True]
['text':'
     * Omit GCB values beyond what we need for hst.
     * The code below checks for the array length.
     ','line_number':503,'multiline':True]
['text':'prop','line_number':509,'multiline':True]
['text':'which','line_number':509,'multiline':True]
['text':' see comments on gcbToHst[] above ','line_number':510,'multiline':True]
['text':'prop','line_number':524,'multiline':True]
['text':'prop','line_number':534,'multiline':True]
['text':'which','line_number':534,'multiline':True]
['text':'prop','line_number':544,'multiline':True]
['text':'which','line_number':544,'multiline':True]
['text':'prop','line_number':561,'multiline':True]
['text':'
     * column, mask and shift values for int-value properties from u_getUnicodeProperties().
     * Must be in order of corresponding UProperty,
     * and there must be exactly one entry per int UProperty.
     *
     * Properties with mask==0 are handled in code.
     * For them, column is the UPropertySource value.
     ','line_number':576,'multiline':True]
['text':' UCHAR_NFD_QUICK_CHECK: max=1=YES -- never "maybe", only "no" or "yes"','line_number':596,'multiline':False]
['text':' UCHAR_NFKD_QUICK_CHECK: max=1=YES -- never "maybe", only "no" or "yes"','line_number':598,'multiline':False]
['text':' UCHAR_NFC_QUICK_CHECK: max=2=MAYBE','line_number':600,'multiline':False]
['text':' UCHAR_NFKC_QUICK_CHECK: max=2=MAYBE','line_number':602,'multiline':False]
['text':' undefined','line_number':628,'multiline':False]
['text':'which','line_number':632,'multiline':True]
['text':' all binary/enum/int properties have a minimum value of 0 ','line_number':633,'multiline':True]
['text':' maximum TRUE for all binary properties','line_number':640,'multiline':False]
['text':' undefined','line_number':646,'multiline':False]
['text':' undefined ','line_number':652,'multiline':True]
['text':' undefined ','line_number':661,'multiline':True]
['text':' undefined ','line_number':709,'multiline':True]
['text':' Add the start code point of each same-value range of the trie.','line_number':738,'multiline':False]
['text':' Compute the FC_NFKC_Closure on the fly:','line_number':758,'multiline':False]
['text':' We have the API for complete coverage of Unicode properties, although','line_number':759,'multiline':False]
['text':' this value by itself is not useful via API.','line_number':760,'multiline':False]
['text':' (What could be useful is a custom normalization table that combines','line_number':761,'multiline':False]
['text':' case folding and NFKC.)','line_number':762,'multiline':False]
['text':' For the derivation, see Unicode's DerivedNormalizationProps.txt.','line_number':763,'multiline':False]
['text':' first: b = NFKC(Fold(a))','line_number':768,'multiline':False]
['text':' c does not change at all under CaseFolding+NFKC','line_number':775,'multiline':False]
['text':' second: c = NFKC(Fold(b))','line_number':786,'multiline':False]
['text':' if (c != b) add the mapping from a to c','line_number':789,'multiline':False]
