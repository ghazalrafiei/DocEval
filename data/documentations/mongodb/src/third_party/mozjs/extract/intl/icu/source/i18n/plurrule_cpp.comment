['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
* Copyright (C) 2007-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File plurrule.cpp
','line_number':3,'multiline':True]
['text':'status','line_number':72,'multiline':True]
['text':' Since clone doesn't have a 'status' parameter, the best we can do is return nullptr if','line_number':100,'multiline':False]
['text':' the newly created object was not fully constructed properly (an error occurred).','line_number':101,'multiline':False]
['text':' bail out early if the object we were copying from was already 'invalid'.','line_number':125,'multiline':False]
['text':' If the RuleChain wasn't fully copied, then set our status to failure as well.','line_number':134,'multiline':False]
['text':'****************************************************************************','line_number':182,'multiline':True]
['text':' Create PluralRules cache ','line_number':183,'multiline':True]
['text':'unused','line_number':187,'multiline':True]
['text':' result was successfully created so it nows pr.','line_number':197,'multiline':False]
['text':' end plural rules cache ','line_number':202,'multiline':True]
['text':'****************************************************************************','line_number':203,'multiline':True]
['text':' TODO: which other errors, if any, should be returned?','line_number':254,'multiline':False]
['text':' If an out-of-memory error occurred, then stop and report the failure.','line_number':256,'multiline':False]
['text':' Locales with no specific rules (all numbers have the "other" category','line_number':260,'multiline':False]
['text':'   will return a U_MISSING_RESOURCE_ERROR at this point. This is not','line_number':261,'multiline':False]
['text':'   an error.','line_number':262,'multiline':False]
['text':'  TODO: should rule parse errors be returned, or','line_number':268,'multiline':False]
['text':'        should we silently use default rules?','line_number':269,'multiline':False]
['text':'        Original impl used default rules.','line_number':270,'multiline':False]
['text':'        Ask the question to ICU Core.','line_number':271,'multiline':False]
['text':' Happens if PluralRules was constructed via createRules()','line_number':329,'multiline':False]
['text':' keyword ','line_number':360,'multiline':True]
['text':' Not Implemented.','line_number':361,'multiline':False]
['text':' keyword ','line_number':366,'multiline':True]
['text':' dest ','line_number':366,'multiline':True]
['text':' destCapacity ','line_number':367,'multiline':True]
['text':'*
 * Helper method for the overrides of getSamples() for double and FixedDecimal
 * return value types.  Provide only one of an allocated array of doubles or
 * FixedDecimals, and a nullptr for the other.
 ','line_number':382,'multiline':True]
['text':'std::string ss;  // TODO: debugging.','line_number':403,'multiline':False]
['text':' std::cout << "PluralRules::getSamples(), samples = \"" << samples.toUTF8String(ss) << "\"\n";','line_number':404,'multiline':False]
['text':' ss.erase();','line_number':411,'multiline':False]
['text':' std::cout << "PluralRules::getSamples(), samplesRange = \"" << sampleRange.toUTF8String(ss) << "\"\n";','line_number':412,'multiline':False]
['text':' For ranges of samples with fraction decimal digits, scale the number up so that we','line_number':437,'multiline':False]
['text':'   are adding one in the units place. Avoids roundoffs from repetitive adds of tenths.','line_number':438,'multiline':False]
['text':' Hack Alert: don't return any decimal samples with integer values that','line_number':450,'multiline':False]
['text':'    originated from a format with trailing decimals.','line_number':451,'multiline':False]
['text':'    This API is returning doubles, which can't distinguish having displayed','line_number':452,'multiline':False]
['text':'    zeros to the right of the decimal.','line_number':453,'multiline':False]
['text':'    This results in test failures with values mapping back to a different keyword.','line_number':454,'multiline':False]
['text':' Parsers are good for a single use only!','line_number':593,'multiline':False]
['text':' range Low','line_number':650,'multiline':False]
['text':' range Hi','line_number':651,'multiline':False]
['text':' this is for an 'is' rule','line_number':666,'multiline':False]
['text':' this is for an 'in' or 'within' rule','line_number':669,'multiline':False]
['text':' Range Lower bound > Range Upper bound.','line_number':678,'multiline':False]
['text':' U_UNEXPECTED_TOKEN seems a little funny, but it is consistently','line_number':679,'multiline':False]
['text':' used for all plural rule parse errors.','line_number':680,'multiline':False]
['text':' TODO: rule syntax checking is inadequate, can happen with badly formed rules.','line_number':689,'multiline':False]
['text':'       Catch cases like "n mod 10, is 1" here instead.','line_number':690,'multiline':False]
['text':' range Low','line_number':697,'multiline':False]
['text':' range Hi','line_number':699,'multiline':False]
['text':' The new rule chain goes at the end of the linked list of rule chains,','line_number':726,'multiline':False]
['text':'   unless there is an "other" keyword & chain. "other" must remain last.','line_number':727,'multiline':False]
['text':' Must not occur: The caller should have checked for valid types.','line_number':805,'multiline':False]
['text':' Check parent locales.','line_number':818,'multiline':False]
['text':' printf("\n PluralRule: %s\n", setKey);','line_number':841,'multiline':False]
['text':' Keys are zero, one, few, ...','line_number':855,'multiline':False]
['text':' stop early if the object we are copying from is invalid.','line_number':879,'multiline':False]
['text':' An empty AndConstraint, created by a rule with a keyword but no following expression.','line_number':914,'multiline':False]
['text':' pulls n | i | v | f value for the number.','line_number':919,'multiline':False]
['text':' Will always be positive.','line_number':920,'multiline':False]
['text':' May be non-integer (n option only)','line_number':921,'multiline':False]
['text':' empty rule','line_number':932,'multiline':False]
['text':'  'is' rule','line_number':933,'multiline':False]
['text':' 'in' or 'within' rule','line_number':936,'multiline':False]
['text':' stop early if the object we are copying from is invalid.','line_number':968,'multiline':False]
['text':' stop early if the object we are copying from is invalid. ','line_number':1040,'multiline':False]
['text':' If the OrConstraint wasn't fully copied, then set our status to failure as well.','line_number':1048,'multiline':False]
['text':' exit early.','line_number':1050,'multiline':False]
['text':' If the RuleChain wasn't fully copied, then set our status to failure as well.','line_number':1059,'multiline':False]
['text':' Empty Rules.','line_number':1118,'multiline':False]
['text':' Switch token type from tKeyword if we scanned a reserved word,','line_number':1259,'multiline':False]
['text':'   and we are not at the start of a rule, where a','line_number':1260,'multiline':False]
['text':'   keyword is expected.','line_number':1261,'multiline':False]
['text':' TODO: a comma following a number that is not part of a range will be allowed.','line_number':1345,'multiline':False]
['text':'       It's not the only case of this sort of thing. Parser needs a re-write.','line_number':1346,'multiline':False]
['text':'
 *  Scan the next token from the input rules.
 *     rules and returned token type are in the parser state variables.
 ','line_number':1360,'multiline':True]
['text':' scanned '~'','line_number':1391,'multiline':False]
['text':' scanned '@'','line_number':1392,'multiline':False]
['text':' scanned '='','line_number':1393,'multiline':False]
['text':' scanned '%'','line_number':1394,'multiline':False]
['text':' Single character tokens.','line_number':1395,'multiline':False]
['text':' scanned '!'','line_number':1399,'multiline':False]
['text':' We could be looking at either ".." in a range, or "..." at the end of a sample.','line_number':1425,'multiline':False]
['text':' Single dot','line_number':1428,'multiline':False]
['text':' double dot','line_number':1433,'multiline':False]
['text':' triple dot','line_number':1437,'multiline':False]
['text':'  Set token type for reserved words in the Plural Rule syntax.','line_number':1488,'multiline':False]
['text':'status','line_number':1582,'multiline':True]
['text':'status','line_number':1587,'multiline':True]
['text':' unexpected.','line_number':1611,'multiline':False]
['text':' check values. TODO make into unit test.','line_number':1621,'multiline':False]
['text':'            ','line_number':1622,'multiline':False]
['text':'            long visiblePower = (int) Math.pow(10, v);','line_number':1623,'multiline':False]
['text':'            if (decimalDigits > visiblePower) {','line_number':1624,'multiline':False]
['text':'                throw new IllegalArgumentException();','line_number':1625,'multiline':False]
['text':'            }','line_number':1626,'multiline':False]
['text':'            double fraction = intValue + (decimalDigits / (double) visiblePower);','line_number':1627,'multiline':False]
['text':'            if (fraction != source) {','line_number':1628,'multiline':False]
['text':'                double diff = Math.abs(fraction - source)/(Math.abs(fraction) + Math.abs(source));','line_number':1629,'multiline':False]
['text':'                if (diff > 0.00000001d) {','line_number':1630,'multiline':False]
['text':'                    throw new IllegalArgumentException();','line_number':1631,'multiline':False]
['text':'                }','line_number':1632,'multiline':False]
['text':'            }','line_number':1633,'multiline':False]
['text':' Ugly, but for samples we don't care.','line_number':1641,'multiline':False]
['text':' Create a FixedDecimal from a UnicodeString containing a number.','line_number':1654,'multiline':False]
['text':'    Inefficient, but only used for samples, so simplicity trumps efficiency.','line_number':1655,'multiline':False]
['text':' Currently, `c` is an alias for `e`','line_number':1739,'multiline':False]
['text':'  Fast path only exact initialization. Return true if successful.','line_number':1776,'multiline':False]
['text':'     Note: Do not multiply by 10 each time through loop, rounding cruft can build','line_number':1777,'multiline':False]
['text':'           up that makes the check for an integer result fail.','line_number':1778,'multiline':False]
['text':'           A single multiply of the original number works more reliably.','line_number':1779,'multiline':False]
['text':' Count the number of decimal digits in the fraction part of the number, excluding trailing zeros.','line_number':1801,'multiline':False]
['text':' fastpath the common cases, integers or fractions with 3 or fewer digits','line_number':1802,'multiline':False]
['text':' Slow path, convert with sprintf, parse converted output.','line_number':1811,'multiline':False]
['text':' formatted number looks like this: 1.234567890123457e-01','line_number':1814,'multiline':False]
['text':' Fraction part of fixed point representation.','line_number':1823,'multiline':False]
['text':' Get the fraction digits of a double, represented as an integer.','line_number':1828,'multiline':False]
['text':'    v is the number of visible fraction digits in the displayed form of the number.','line_number':1829,'multiline':False]
['text':'       Example: n = 1001.234, v = 6, result = 234000','line_number':1830,'multiline':False]
['text':'    TODO: need to think through how this is used in the plural rule context.','line_number':1831,'multiline':False]
['text':'          This function can easily encounter integer overflow, ','line_number':1832,'multiline':False]
['text':'          and can easily return noise digits when the precision of a double is exceeded.','line_number':1833,'multiline':False]
['text':' Note: a double cannot accurately represent U_INT64_MAX. Casting it to double','line_number':1848,'multiline':False]
['text':'       will round up to the next representable value, which is U_INT64_MAX + 1.','line_number':1849,'multiline':False]
['text':' Do not let the decimalDigits value overflow if there are many trailing zeros.','line_number':1862,'multiline':False]
['text':' Limit the value to 18 digits, the most that a 64 bit int can fully represent.','line_number':1863,'multiline':False]
['text':' unexpected.','line_number':1884,'multiline':False]
['text':' clear any warnings.','line_number':1932,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1992,'multiline':True]
['text':'eof','line_number':1994,'multiline':False]
