['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  loclikely.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2010feb25
*   created by: Markus W. Scherer
*
*   Code for likely and minimized locale subtags, separated out from other .cpp files
*   that then do not depend on resource bundle code and likely-subtags data.
','line_number':3,'multiline':True]
['text':'*
 * These are the canonical strings for unknown languages, scripts and regions.
 *','line_number':37,'multiline':True]
['text':'*
 * This function looks for the localeID in the likelySubtags resource.
 *
 * @param localeID The tag to find.
 * @param buffer A buffer to hold the matching entry
 * @param bufferLength The length of the output buffer
 * @return A pointer to "buffer" if found, or a null pointer if not.
 ','line_number':44,'multiline':True]
['text':'
                 * If a resource is missing, it's not really an error, it's
                 * just that we don't have any data for that particular locale ID.
                 ','line_number':81,'multiline':True]
['text':' The buffer should never overflow. ','line_number':90,'multiline':True]
['text':'*
 * Append a tag to a buffer, adding the separator if necessary.  The buffer
 * must be large enough to contain the resulting tag plus any separator
 * necessary. The tag must not be a zero-length string.
 *
 * @param tag The tag to add.
 * @param tagLength The length of the tag.
 * @param buffer The output buffer.
 * @param bufferLength The length of the output buffer.  This is an input/ouput parameter.
 *','line_number':110,'multiline':True]
['text':'*
 * Create a tag string from the supplied parameters.  The lang, script and region
 * parameters may be NULL pointers. If they are, their corresponding length parameters
 * must be less than or equal to 0.
 *
 * If any of the language, script or region parameters are empty, and the alternateTags
 * parameter is not NULL, it will be parsed for potential language, script and region tags
 * to be used when constructing the new tag.  If the alternateTags parameter is NULL, or
 * it contains no language tag, the default tag for the unknown language is used.
 *
 * If the length of the new string exceeds the capacity of the output buffer, 
 * the function copies as many bytes to the output buffer as it can, and returns
 * the error U_BUFFER_OVERFLOW_ERROR.
 *
 * If an illegal argument is provided, the function returns the error
 * U_ILLEGAL_ARGUMENT_ERROR.
 *
 * Note that this function can return the warning U_STRING_NOT_TERMINATED_WARNING if
 * the tag string fits in the output buffer, but the null terminator doesn't.
 *
 * @param lang The language tag to use.
 * @param langLength The length of the language tag.
 * @param script The script tag to use.
 * @param scriptLength The length of the script tag.
 * @param region The region tag to use.
 * @param regionLength The length of the region tag.
 * @param trailing Any trailing data to append to the new tag.
 * @param trailingLength The length of the trailing data.
 * @param alternateTags A string containing any alternate tags.
 * @param sink The output sink receiving the tag string.
 * @param err A pointer to a UErrorCode for error reporting.
 *','line_number':141,'multiline':True]
['text':'*
         * ULOC_FULLNAME_CAPACITY will provide enough capacity
         * that we can build a string that contains the language,
         * script and region code without worrying about overrunning
         * the user-supplied buffer.
         *','line_number':196,'multiline':True]
['text':'withSeparator=','line_number':212,'multiline':True]
['text':'
             * Use the empty string for an unknown language, if
             * we found no language.
             ','line_number':215,'multiline':True]
['text':'
             * Parse the alternateTags string for the language.
             ','line_number':221,'multiline':True]
['text':'
                 * Use the empty string for an unknown language, if
                 * we found no language.
                 ','line_number':238,'multiline':True]
['text':'withSeparator=','line_number':249,'multiline':True]
['text':'withSeparator=','line_number':259,'multiline':True]
['text':'
             * Parse the alternateTags string for the script.
             ','line_number':262,'multiline':True]
['text':'withSeparator=','line_number':284,'multiline':True]
['text':'withSeparator=','line_number':294,'multiline':True]
['text':'
             * Parse the alternateTags string for the region.
             ','line_number':299,'multiline':True]
['text':'withSeparator=','line_number':320,'multiline':True]
['text':'*
         * Copy the partial tag from our internal buffer to the supplied
         * target.
         *','line_number':326,'multiline':True]
['text':' extra separator is required ','line_number':336,'multiline':True]
['text':'
             * Copy the trailing data into the supplied buffer.
             ','line_number':341,'multiline':True]
['text':'*
     * An overflow indicates the locale ID passed in
     * is ill-formed.  If we got here, and there was
     * no previous error, it's an implicit overflow.
     *','line_number':352,'multiline':True]
['text':'*
 * Create a tag string from the supplied parameters.  The lang, script and region
 * parameters may be NULL pointers. If they are, their corresponding length parameters
 * must be less than or equal to 0.  If the lang parameter is an empty string, the
 * default value for an unknown language is written to the output buffer.
 *
 * If the length of the new string exceeds the capacity of the output buffer, 
 * the function copies as many bytes to the output buffer as it can, and returns
 * the error U_BUFFER_OVERFLOW_ERROR.
 *
 * If an illegal argument is provided, the function returns the error
 * U_ILLEGAL_ARGUMENT_ERROR.
 *
 * @param lang The language tag to use.
 * @param langLength The length of the language tag.
 * @param script The script tag to use.
 * @param scriptLength The length of the script tag.
 * @param region The region tag to use.
 * @param regionLength The length of the region tag.
 * @param trailing Any trailing data to append to the new tag.
 * @param trailingLength The length of the trailing data.
 * @param sink The output sink receiving the tag string.
 * @param err A pointer to a UErrorCode for error reporting.
 *','line_number':363,'multiline':True]
['text':'*
 * Parse the language, script, and region subtags from a tag string, and copy the
 * results into the corresponding output parameters. The buffers are null-terminated,
 * unless overflow occurs.
 *
 * The langLength, scriptLength, and regionLength parameters are input/output
 * parameters, and must contain the capacity of their corresponding buffers on
 * input.  On output, they will contain the actual length of the buffers, not
 * including the null terminator.
 *
 * If the length of any of the output subtags exceeds the capacity of the corresponding
 * buffer, the function copies as many bytes to the output buffer as it can, and returns
 * the error U_BUFFER_OVERFLOW_ERROR.  It will not parse any more subtags once overflow
 * occurs.
 *
 * If an illegal argument is provided, the function returns the error
 * U_ILLEGAL_ARGUMENT_ERROR.
 *
 * @param localeID The locale ID to parse.
 * @param lang The language tag buffer.
 * @param langLength The length of the language tag.
 * @param script The script tag buffer.
 * @param scriptLength The length of the script tag.
 * @param region The region tag buffer.
 * @param regionLength The length of the region tag.
 * @param err A pointer to a UErrorCode for error reporting.
 * @return The number of chars of the localeID parameter consumed.
 *','line_number':414,'multiline':True]
['text':'
     * Note that we explicit consider U_STRING_NOT_TERMINATED_WARNING
     * to be an error, because it indicates the user-supplied tag is
     * not well-formed.
     ','line_number':469,'multiline':True]
['text':'
     * If no language was present, use the empty string instead.
     * Otherwise, move past any separator.
     ','line_number':480,'multiline':True]
['text':'*
             * If the script part is the "unknown" script, then don't return it.
             *','line_number':498,'multiline':True]
['text':'
         * Move past any separator.
         ','line_number':504,'multiline':True]
['text':'*
             * If the region part is the "unknown" region, then don't return it.
             *','line_number':522,'multiline':True]
['text':' back up over consumed trailing separator ','line_number':528,'multiline':True]
['text':'*
     * If we get here, we have no explicit error, it's the result of an
     * illegal argument.
     *','line_number':538,'multiline':True]
['text':'*
     * ULOC_FULLNAME_CAPACITY will provide enough capacity
     * that we can build a string that contains the language,
     * script and region code without worrying about overrunning
     * the user-supplied buffer.
     *','line_number':561,'multiline':True]
['text':'*
     * Try the language with the script and region first.
     *','line_number':573,'multiline':True]
['text':' Always use the language tag from the
               maximal string, since it may be more
               specific than the one provided. ','line_number':610,'multiline':True]
['text':'*
     * Try the language with just the script.
     *','line_number':629,'multiline':True]
['text':' Always use the language tag from the
               maximal string, since it may be more
               specific than the one provided. ','line_number':666,'multiline':True]
['text':'*
     * Try the language with just the region.
     *','line_number':685,'multiline':True]
['text':' Always use the language tag from the
               maximal string, since it may be more
               specific than the one provided. ','line_number':722,'multiline':True]
['text':'*
     * Finally, try just the language.
     *','line_number':741,'multiline':True]
['text':' Always use the language tag from the
               maximal string, since it may be more
               specific than the one provided. ','line_number':777,'multiline':True]
['text':' Overflow indicates an illegal argument error ','line_number':858,'multiline':True]
['text':' Find the length of the trailing portion. ','line_number':866,'multiline':True]
['text':'
         * If we get here, we need to return localeID.
         ','line_number':891,'multiline':True]
['text':' Add likely subtags to the sink','line_number':907,'multiline':False]
['text':' return true if the value in the sink is produced by a match during the lookup','line_number':908,'multiline':False]
['text':' return false if the value in the sink is the same as input because there are','line_number':909,'multiline':False]
['text':' no match after the lookup.','line_number':910,'multiline':False]
['text':' Overflow indicates an illegal argument error ','line_number':949,'multiline':True]
['text':' Find the spot where the variants or the keywords begin, if any. ','line_number':957,'multiline':True]
['text':'*
         * First, we need to first get the maximization
         * from AddLikelySubtags.
         *','line_number':983,'multiline':True]
['text':'*
         * If we got here, return the locale ID parameter unchanged.
         *','line_number':998,'multiline':True]
['text':' In the following, the lang, script, region are referring to those in','line_number':1006,'multiline':False]
['text':' the maximizedTagBuffer, not the one in the localeID.','line_number':1007,'multiline':False]
['text':'*
     * Start first with just the language.
     *','line_number':1024,'multiline':True]
['text':'*
     * Next, try the language and region.
     *','line_number':1068,'multiline':True]
['text':'*
     * Finally, try the language and script.  This is our last chance,
     * since trying with all three subtags would only yield the
     * maximal version that we already have.
     *','line_number':1113,'multiline':True]
['text':'*
         * If we got here, return the max + trail.
         *','line_number':1160,'multiline':True]
['text':' Pairs of (language subtag, + or -) for finding out fast if common languages','line_number':1299,'multiline':False]
['text':' are LTR (minus) or RTL (plus).','line_number':1300,'multiline':False]
['text':' Implemented here because this calls ulocimp_addLikelySubtags().','line_number':1304,'multiline':False]
['text':' Fastpath: We know the likely scripts and their writing direction','line_number':1312,'multiline':False]
['text':' for some common languages.','line_number':1313,'multiline':False]
['text':' partial match of a longer code','line_number':1326,'multiline':False]
['text':' Otherwise, find the likely script.','line_number':1330,'multiline':False]
['text':' The following must at least allow for rg key value (6) plus terminator (1).','line_number':1359,'multiline':False]
['text':' First check for rg keyword value','line_number':1371,'multiline':False]
['text':' rgBuf guaranteed to be zero terminated here, with text len 6','line_number':1376,'multiline':False]
['text':' No valid rg keyword value, try for unicode_region_subtag','line_number':1385,'multiline':False]
['text':' no unicode_region_subtag but inferRegion TRUE, try likely subtags','line_number':1390,'multiline':False]
