['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*
* File UCHAR.H
*
* Modification History:
*
*   Date        Name        Description
*   04/02/97    aliu        Creation.
*   03/29/99    helena      Updated for C APIs.
*   4/15/99     Madhu       Updated for C Implementation and Javadoc
*   5/20/99     Madhu       Added the function u_getVersion()
*   8/19/1999   srl         Upgraded scripts to Unicode 3.0
*   8/27/1999   schererm    UCharDirection constants: U_...
*   11/11/1999  weiv        added u_isalnum(), cleaned comments
*   01/11/2000  helena      Renamed u_getVersion to u_getUnicodeVersion().
******************************************************************************
','line_number':3,'multiline':True]
['text':'*
 * USet is the C API type corresponding to C++ class UnicodeSet.
 * It is forward-declared here to avoid including unicode/uset.h file if related
 * APIs are not used.
 *
 * @see ucnv_getUnicodeSet
 * @stable ICU 2.4
 ','line_number':36,'multiline':True]
['text':'==========================================================================','line_number':51,'multiline':True]
['text':' Unicode version number                                                   ','line_number':52,'multiline':True]
['text':'==========================================================================','line_number':53,'multiline':True]
['text':'*
 * Unicode version number, default for the current ICU version.
 * The actual Unicode Character Database (UCD) data is stored in uprops.dat
 * and may be generated from UCD files from a different Unicode version.
 * Call u_getUnicodeVersion to get the actual Unicode version of the data.
 *
 * @see u_getUnicodeVersion
 * @stable ICU 2.0
 ','line_number':54,'multiline':True]
['text':'*
 * \file
 * \brief C API: Unicode Properties
 *
 * This C API provides low-level access to the Unicode Character Database.
 * In addition to raw property values, some convenience functions calculate
 * derived properties, for example for Java-style programming.
 *
 * Unicode assigns each code point (not just assigned character) values for
 * many properties.
 * Most of them are simple boolean flags, or constants from a small enumerated list.
 * For some properties, values are strings or other relatively more complex types.
 *
 * For more information see
 * "About the Unicode Character Database" (http://www.unicode.org/ucd/)
 * and the ICU User Guide chapter on Properties (http://icu-project.org/userguide/properties.html).
 *
 * Many properties are accessible via generic functions that take a UProperty selector.
 * - u_hasBinaryProperty() returns a binary value (true/false) per property and code point.
 * - u_getIntPropertyValue() returns an integer value per property and code point.
 *   For each supported enumerated or catalog property, there is
 *   an enum type for all of the property's values, and
 *   u_getIntPropertyValue() returns the numeric values of those constants.
 * - u_getBinaryPropertySet() returns a set for each ICU-supported binary property with
 *   all code points for which the property is true.
 * - u_getIntPropertyMap() returns a map for each
 *   ICU-supported enumerated/catalog/int-valued property which
 *   maps all Unicode code points to their values for that property.
 *
 * Many functions are designed to match java.lang.Character functions.
 * See the individual function documentation,
 * and see the JDK 1.4 java.lang.Character documentation
 * at http://java.sun.com/j2se/1.4/docs/api/java/lang/Character.html
 *
 * There are also functions that provide easy migration from C/POSIX functions
 * like isblank(). Their use is generally discouraged because the C/POSIX
 * standards do not define their semantics beyond the ASCII range, which means
 * that different implementations exhibit very different behavior.
 * Instead, Unicode properties should be used directly.
 *
 * There are also only a few, broad C/POSIX character classes, and they tend
 * to be used for conflicting purposes. For example, the "isalpha()" class
 * is sometimes used to determine word boundaries, while a more sophisticated
 * approach would at least distinguish initial letters from continuation
 * characters (the latter including combining marks).
 * (In ICU, BreakIterator is the most sophisticated API for word boundaries.)
 * Another example: There is no "istitle()" class for titlecase characters.
 *
 * ICU 3.4 and later provides API access for all twelve C/POSIX character classes.
 * ICU implements them according to the Standard Recommendations in
 * Annex C: Compatibility Properties of UTS #18 Unicode Regular Expressions
 * (http://www.unicode.org/reports/tr18/#Compatibility_Properties).
 *
 * API access for C/POSIX character classes is as follows:
 * - alpha:     u_isUAlphabetic(c) or u_hasBinaryProperty(c, UCHAR_ALPHABETIC)
 * - lower:     u_isULowercase(c) or u_hasBinaryProperty(c, UCHAR_LOWERCASE)
 * - upper:     u_isUUppercase(c) or u_hasBinaryProperty(c, UCHAR_UPPERCASE)
 * - punct:     u_ispunct(c)
 * - digit:     u_isdigit(c) or u_charType(c)==U_DECIMAL_DIGIT_NUMBER
 * - xdigit:    u_isxdigit(c) or u_hasBinaryProperty(c, UCHAR_POSIX_XDIGIT)
 * - alnum:     u_hasBinaryProperty(c, UCHAR_POSIX_ALNUM)
 * - space:     u_isUWhiteSpace(c) or u_hasBinaryProperty(c, UCHAR_WHITE_SPACE)
 * - blank:     u_isblank(c) or u_hasBinaryProperty(c, UCHAR_POSIX_BLANK)
 * - cntrl:     u_charType(c)==U_CONTROL_CHAR
 * - graph:     u_hasBinaryProperty(c, UCHAR_POSIX_GRAPH)
 * - print:     u_hasBinaryProperty(c, UCHAR_POSIX_PRINT)
 *
 * Note: Some of the u_isxyz() functions in uchar.h predate, and do not match,
 * the Standard Recommendations in UTS #18. Instead, they match Java
 * functions according to their API documentation.
 *
 * \htmlonly
 * The C/POSIX character classes are also available in UnicodeSet patterns,
 * using patterns like [:graph:] or \p{graph}.
 * \endhtmlonly
 *
 * Note: There are several ICU whitespace functions.
 * Comparison:
 * - u_isUWhiteSpace=UCHAR_WHITE_SPACE: Unicode White_Space property;
 *       most of general categories "Z" (separators) + most whitespace ISO controls
 *       (including no-break spaces, but excluding IS1..IS4)
 * - u_isWhitespace: Java isWhitespace; Z + whitespace ISO controls but excluding no-break spaces
 * - u_isJavaSpaceChar: Java isSpaceChar; just Z (including no-break spaces)
 * - u_isspace: Z + whitespace ISO controls (including no-break spaces)
 * - u_isblank: "horizontal spaces" = TAB + Zs
 ','line_number':65,'multiline':True]
['text':'*
 * Constants.
 ','line_number':152,'multiline':True]
['text':'* The lowest Unicode code point value. Code points are non-negative. @stable ICU 2.0 ','line_number':156,'multiline':True]
['text':'*
 * The highest Unicode code point value (scalar value) according to
 * The Unicode Standard. This is a 21-bit value (20.1 bits, rounded up).
 * For a single character, UChar32 is a simple type that can hold any code point value.
 *
 * @see UChar32
 * @stable ICU 2.0
 ','line_number':159,'multiline':True]
['text':'*
 * Get a single-bit bit set (a flag) from a bit number 0..31.
 * @stable ICU 2.1
 ','line_number':169,'multiline':True]
['text':'*
 * Selection constants for Unicode properties.
 * These constants are used in functions like u_hasBinaryProperty to select
 * one of the Unicode properties.
 *
 * The properties APIs are intended to reflect Unicode properties as defined
 * in the Unicode Character Database (UCD) and Unicode Technical Reports (UTR).
 *
 * For details about the properties see
 * UAX #44: Unicode Character Database (http://www.unicode.org/reports/tr44/).
 *
 * Important: If ICU is built with UCD files from Unicode versions below, e.g., 3.2,
 * then properties marked with "new in Unicode 3.2" are not or not fully available.
 * Check u_getUnicodeVersion to be sure.
 *
 * @see u_hasBinaryProperty
 * @see u_getIntPropertyValue
 * @see u_getUnicodeVersion
 * @stable ICU 2.1
 ','line_number':175,'multiline':True]
['text':'
     * Note: UProperty constants are parsed by preparseucd.py.
     * It matches lines like
     *     UCHAR_<Unicode property name>=<integer>,
     ','line_number':196,'multiline':True]
['text':'  Note: Place UCHAR_ALPHABETIC before UCHAR_BINARY_START so that
    debuggers display UCHAR_ALPHABETIC as the symbolic name for 0,
    rather than UCHAR_BINARY_START.  Likewise for other *_START
    identifiers. ','line_number':202,'multiline':True]
['text':'* Binary property Alphabetic. Same as u_isUAlphabetic, different from u_isalpha.
        Lu+Ll+Lt+Lm+Lo+Nl+Other_Alphabetic @stable ICU 2.1 ','line_number':207,'multiline':True]
['text':'* First constant for binary Unicode properties. @stable ICU 2.1 ','line_number':210,'multiline':True]
['text':'* Binary property ASCII_Hex_Digit. 0-9 A-F a-f @stable ICU 2.1 ','line_number':212,'multiline':True]
['text':'* Binary property Bidi_Control.
        Format controls which have specific functions
        in the Bidi Algorithm. @stable ICU 2.1 ','line_number':214,'multiline':True]
['text':'* Binary property Bidi_Mirrored.
        Characters that may change display in RTL text.
        Same as u_isMirrored.
        See Bidi Algorithm, UTR 9. @stable ICU 2.1 ','line_number':218,'multiline':True]
['text':'* Binary property Dash. Variations of dashes. @stable ICU 2.1 ','line_number':223,'multiline':True]
['text':'* Binary property Default_Ignorable_Code_Point (new in Unicode 3.2).
        Ignorable in most processing.
        <2060..206F, FFF0..FFFB, E0000..E0FFF>+Other_Default_Ignorable_Code_Point+(Cf+Cc+Cs-White_Space) @stable ICU 2.1 ','line_number':225,'multiline':True]
['text':'* Binary property Deprecated (new in Unicode 3.2).
        The usage of deprecated characters is strongly discouraged. @stable ICU 2.1 ','line_number':229,'multiline':True]
['text':'* Binary property Diacritic. Characters that linguistically modify
        the meaning of another character to which they apply. @stable ICU 2.1 ','line_number':232,'multiline':True]
['text':'* Binary property Extender.
        Extend the value or shape of a preceding alphabetic character,
        e.g., length and iteration marks. @stable ICU 2.1 ','line_number':235,'multiline':True]
['text':'* Binary property Full_Composition_Exclusion.
        CompositionExclusions.txt+Singleton Decompositions+
        Non-Starter Decompositions. @stable ICU 2.1 ','line_number':239,'multiline':True]
['text':'* Binary property Grapheme_Base (new in Unicode 3.2).
        For programmatic determination of grapheme cluster boundaries.
        [0..10FFFF]-Cc-Cf-Cs-Co-Cn-Zl-Zp-Grapheme_Link-Grapheme_Extend-CGJ @stable ICU 2.1 ','line_number':243,'multiline':True]
['text':'* Binary property Grapheme_Extend (new in Unicode 3.2).
        For programmatic determination of grapheme cluster boundaries.
        Me+Mn+Mc+Other_Grapheme_Extend-Grapheme_Link-CGJ @stable ICU 2.1 ','line_number':247,'multiline':True]
['text':'* Binary property Grapheme_Link (new in Unicode 3.2).
        For programmatic determination of grapheme cluster boundaries. @stable ICU 2.1 ','line_number':251,'multiline':True]
['text':'* Binary property Hex_Digit.
        Characters commonly used for hexadecimal numbers. @stable ICU 2.1 ','line_number':254,'multiline':True]
['text':'* Binary property Hyphen. Dashes used to mark connections
        between pieces of words, plus the Katakana middle dot. @stable ICU 2.1 ','line_number':257,'multiline':True]
['text':'* Binary property ID_Continue.
        Characters that can continue an identifier.
        DerivedCoreProperties.txt also says "NOTE: Cf characters should be filtered out."
        ID_Start+Mn+Mc+Nd+Pc @stable ICU 2.1 ','line_number':260,'multiline':True]
['text':'* Binary property ID_Start.
        Characters that can start an identifier.
        Lu+Ll+Lt+Lm+Lo+Nl @stable ICU 2.1 ','line_number':265,'multiline':True]
['text':'* Binary property Ideographic.
        CJKV ideographs. @stable ICU 2.1 ','line_number':269,'multiline':True]
['text':'* Binary property IDS_Binary_Operator (new in Unicode 3.2).
        For programmatic determination of
        Ideographic Description Sequences. @stable ICU 2.1 ','line_number':272,'multiline':True]
['text':'* Binary property IDS_Trinary_Operator (new in Unicode 3.2).
        For programmatic determination of
        Ideographic Description Sequences. @stable ICU 2.1 ','line_number':276,'multiline':True]
['text':'* Binary property Join_Control.
        Format controls for cursive joining and ligation. @stable ICU 2.1 ','line_number':280,'multiline':True]
['text':'* Binary property Logical_Order_Exception (new in Unicode 3.2).
        Characters that do not use logical order and
        require special handling in most processing. @stable ICU 2.1 ','line_number':283,'multiline':True]
['text':'* Binary property Lowercase. Same as u_isULowercase, different from u_islower.
        Ll+Other_Lowercase @stable ICU 2.1 ','line_number':287,'multiline':True]
['text':'* Binary property Math. Sm+Other_Math @stable ICU 2.1 ','line_number':290,'multiline':True]
['text':'* Binary property Noncharacter_Code_Point.
        Code points that are explicitly defined as illegal
        for the encoding of characters. @stable ICU 2.1 ','line_number':292,'multiline':True]
['text':'* Binary property Quotation_Mark. @stable ICU 2.1 ','line_number':296,'multiline':True]
['text':'* Binary property Radical (new in Unicode 3.2).
        For programmatic determination of
        Ideographic Description Sequences. @stable ICU 2.1 ','line_number':298,'multiline':True]
['text':'* Binary property Soft_Dotted (new in Unicode 3.2).
        Characters with a "soft dot", like i or j.
        An accent placed on these characters causes
        the dot to disappear. @stable ICU 2.1 ','line_number':302,'multiline':True]
['text':'* Binary property Terminal_Punctuation.
        Punctuation characters that generally mark
        the end of textual units. @stable ICU 2.1 ','line_number':307,'multiline':True]
['text':'* Binary property Unified_Ideograph (new in Unicode 3.2).
        For programmatic determination of
        Ideographic Description Sequences. @stable ICU 2.1 ','line_number':311,'multiline':True]
['text':'* Binary property Uppercase. Same as u_isUUppercase, different from u_isupper.
        Lu+Other_Uppercase @stable ICU 2.1 ','line_number':315,'multiline':True]
['text':'* Binary property White_Space.
        Same as u_isUWhiteSpace, different from u_isspace and u_isWhitespace.
        Space characters+TAB+CR+LF-ZWSP-ZWNBSP @stable ICU 2.1 ','line_number':318,'multiline':True]
['text':'* Binary property XID_Continue.
        ID_Continue modified to allow closure under
        normalization forms NFKC and NFKD. @stable ICU 2.1 ','line_number':322,'multiline':True]
['text':'* Binary property XID_Start. ID_Start modified to allow
        closure under normalization forms NFKC and NFKD. @stable ICU 2.1 ','line_number':326,'multiline':True]
['text':'* Binary property Case_Sensitive. Either the source of a case
        mapping or _in_ the target of a case mapping. Not the same as
        the general category Cased_Letter. @stable ICU 2.6 ','line_number':329,'multiline':True]
['text':'* Binary property STerm (new in Unicode 4.0.1).
        Sentence Terminal. Used in UAX #29: Text Boundaries
        (http://www.unicode.org/reports/tr29/)
        @stable ICU 3.0 ','line_number':333,'multiline':True]
['text':'* Binary property Variation_Selector (new in Unicode 4.0.1).
        Indicates all those characters that qualify as Variation Selectors.
        For details on the behavior of these characters,
        see StandardizedVariants.html and 15.6 Variation Selectors.
        @stable ICU 3.0 ','line_number':338,'multiline':True]
['text':'* Binary property NFD_Inert.
        ICU-specific property for characters that are inert under NFD,
        i.e., they do not interact with adjacent characters.
        See the documentation for the Normalizer2 class and the
        Normalizer2::isInert() method.
        @stable ICU 3.0 ','line_number':344,'multiline':True]
['text':'* Binary property NFKD_Inert.
        ICU-specific property for characters that are inert under NFKD,
        i.e., they do not interact with adjacent characters.
        See the documentation for the Normalizer2 class and the
        Normalizer2::isInert() method.
        @stable ICU 3.0 ','line_number':351,'multiline':True]
['text':'* Binary property NFC_Inert.
        ICU-specific property for characters that are inert under NFC,
        i.e., they do not interact with adjacent characters.
        See the documentation for the Normalizer2 class and the
        Normalizer2::isInert() method.
        @stable ICU 3.0 ','line_number':358,'multiline':True]
['text':'* Binary property NFKC_Inert.
        ICU-specific property for characters that are inert under NFKC,
        i.e., they do not interact with adjacent characters.
        See the documentation for the Normalizer2 class and the
        Normalizer2::isInert() method.
        @stable ICU 3.0 ','line_number':365,'multiline':True]
['text':'* Binary Property Segment_Starter.
        ICU-specific property for characters that are starters in terms of
        Unicode normalization and combining character sequences.
        They have ccc=0 and do not occur in non-initial position of the
        canonical decomposition of any character
        (like a-umlaut in NFD and a Jamo T in an NFD(Hangul LVT)).
        ICU uses this property for segmenting a string for generating a set of
        canonically equivalent strings, e.g. for canonical closure while
        processing collation tailoring rules.
        @stable ICU 3.0 ','line_number':372,'multiline':True]
['text':'* Binary property Pattern_Syntax (new in Unicode 4.1).
        See UAX #31 Identifier and Pattern Syntax
        (http://www.unicode.org/reports/tr31/)
        @stable ICU 3.4 ','line_number':383,'multiline':True]
['text':'* Binary property Pattern_White_Space (new in Unicode 4.1).
        See UAX #31 Identifier and Pattern Syntax
        (http://www.unicode.org/reports/tr31/)
        @stable ICU 3.4 ','line_number':388,'multiline':True]
['text':'* Binary property alnum (a C/POSIX character class).
        Implemented according to the UTS #18 Annex C Standard Recommendation.
        See the uchar.h file documentation.
        @stable ICU 3.4 ','line_number':393,'multiline':True]
['text':'* Binary property blank (a C/POSIX character class).
        Implemented according to the UTS #18 Annex C Standard Recommendation.
        See the uchar.h file documentation.
        @stable ICU 3.4 ','line_number':398,'multiline':True]
['text':'* Binary property graph (a C/POSIX character class).
        Implemented according to the UTS #18 Annex C Standard Recommendation.
        See the uchar.h file documentation.
        @stable ICU 3.4 ','line_number':403,'multiline':True]
['text':'* Binary property print (a C/POSIX character class).
        Implemented according to the UTS #18 Annex C Standard Recommendation.
        See the uchar.h file documentation.
        @stable ICU 3.4 ','line_number':408,'multiline':True]
['text':'* Binary property xdigit (a C/POSIX character class).
        Implemented according to the UTS #18 Annex C Standard Recommendation.
        See the uchar.h file documentation.
        @stable ICU 3.4 ','line_number':413,'multiline':True]
['text':'* Binary property Cased. For Lowercase, Uppercase and Titlecase characters. @stable ICU 4.4 ','line_number':418,'multiline':True]
['text':'* Binary property Case_Ignorable. Used in context-sensitive case mappings. @stable ICU 4.4 ','line_number':420,'multiline':True]
['text':'* Binary property Changes_When_Lowercased. @stable ICU 4.4 ','line_number':422,'multiline':True]
['text':'* Binary property Changes_When_Uppercased. @stable ICU 4.4 ','line_number':424,'multiline':True]
['text':'* Binary property Changes_When_Titlecased. @stable ICU 4.4 ','line_number':426,'multiline':True]
['text':'* Binary property Changes_When_Casefolded. @stable ICU 4.4 ','line_number':428,'multiline':True]
['text':'* Binary property Changes_When_Casemapped. @stable ICU 4.4 ','line_number':430,'multiline':True]
['text':'* Binary property Changes_When_NFKC_Casefolded. @stable ICU 4.4 ','line_number':432,'multiline':True]
['text':'*
     * Binary property Emoji.
     * See http://www.unicode.org/reports/tr51/#Emoji_Properties
     *
     * @stable ICU 57
     ','line_number':434,'multiline':True]
['text':'*
     * Binary property Emoji_Presentation.
     * See http://www.unicode.org/reports/tr51/#Emoji_Properties
     *
     * @stable ICU 57
     ','line_number':441,'multiline':True]
['text':'*
     * Binary property Emoji_Modifier.
     * See http://www.unicode.org/reports/tr51/#Emoji_Properties
     *
     * @stable ICU 57
     ','line_number':448,'multiline':True]
['text':'*
     * Binary property Emoji_Modifier_Base.
     * See http://www.unicode.org/reports/tr51/#Emoji_Properties
     *
     * @stable ICU 57
     ','line_number':455,'multiline':True]
['text':'*
     * Binary property Emoji_Component.
     * See http://www.unicode.org/reports/tr51/#Emoji_Properties
     *
     * @stable ICU 60
     ','line_number':462,'multiline':True]
['text':'*
     * Binary property Regional_Indicator.
     * @stable ICU 60
     ','line_number':469,'multiline':True]
['text':'*
     * Binary property Prepended_Concatenation_Mark.
     * @stable ICU 60
     ','line_number':474,'multiline':True]
['text':'*
     * Binary property Extended_Pictographic.
     * See http://www.unicode.org/reports/tr51/#Emoji_Properties
     *
     * @stable ICU 62
     ','line_number':479,'multiline':True]
['text':'*
     * One more than the last constant for binary Unicode properties.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':487,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':492,'multiline':False]
['text':'* Enumerated property Bidi_Class.
        Same as u_charDirection, returns UCharDirection values. @stable ICU 2.2 ','line_number':494,'multiline':True]
['text':'* First constant for enumerated/integer Unicode properties. @stable ICU 2.2 ','line_number':497,'multiline':True]
['text':'* Enumerated property Block.
        Same as ublock_getCode, returns UBlockCode values. @stable ICU 2.2 ','line_number':499,'multiline':True]
['text':'* Enumerated property Canonical_Combining_Class.
        Same as u_getCombiningClass, returns 8-bit numeric values. @stable ICU 2.2 ','line_number':502,'multiline':True]
['text':'* Enumerated property Decomposition_Type.
        Returns UDecompositionType values. @stable ICU 2.2 ','line_number':505,'multiline':True]
['text':'* Enumerated property East_Asian_Width.
        See http://www.unicode.org/reports/tr11/
        Returns UEastAsianWidth values. @stable ICU 2.2 ','line_number':508,'multiline':True]
['text':'* Enumerated property General_Category.
        Same as u_charType, returns UCharCategory values. @stable ICU 2.2 ','line_number':512,'multiline':True]
['text':'* Enumerated property Joining_Group.
        Returns UJoiningGroup values. @stable ICU 2.2 ','line_number':515,'multiline':True]
['text':'* Enumerated property Joining_Type.
        Returns UJoiningType values. @stable ICU 2.2 ','line_number':518,'multiline':True]
['text':'* Enumerated property Line_Break.
        Returns ULineBreak values. @stable ICU 2.2 ','line_number':521,'multiline':True]
['text':'* Enumerated property Numeric_Type.
        Returns UNumericType values. @stable ICU 2.2 ','line_number':524,'multiline':True]
['text':'* Enumerated property Script.
        Same as uscript_getScript, returns UScriptCode values. @stable ICU 2.2 ','line_number':527,'multiline':True]
['text':'* Enumerated property Hangul_Syllable_Type, new in Unicode 4.
        Returns UHangulSyllableType values. @stable ICU 2.6 ','line_number':530,'multiline':True]
['text':'* Enumerated property NFD_Quick_Check.
        Returns UNormalizationCheckResult values. @stable ICU 3.0 ','line_number':533,'multiline':True]
['text':'* Enumerated property NFKD_Quick_Check.
        Returns UNormalizationCheckResult values. @stable ICU 3.0 ','line_number':536,'multiline':True]
['text':'* Enumerated property NFC_Quick_Check.
        Returns UNormalizationCheckResult values. @stable ICU 3.0 ','line_number':539,'multiline':True]
['text':'* Enumerated property NFKC_Quick_Check.
        Returns UNormalizationCheckResult values. @stable ICU 3.0 ','line_number':542,'multiline':True]
['text':'* Enumerated property Lead_Canonical_Combining_Class.
        ICU-specific property for the ccc of the first code point
        of the decomposition, or lccc(c)=ccc(NFD(c)[0]).
        Useful for checking for canonically ordered text;
        see UNORM_FCD and http://www.unicode.org/notes/tn5/#FCD .
        Returns 8-bit numeric values like UCHAR_CANONICAL_COMBINING_CLASS. @stable ICU 3.0 ','line_number':545,'multiline':True]
['text':'* Enumerated property Trail_Canonical_Combining_Class.
        ICU-specific property for the ccc of the last code point
        of the decomposition, or tccc(c)=ccc(NFD(c)[last]).
        Useful for checking for canonically ordered text;
        see UNORM_FCD and http://www.unicode.org/notes/tn5/#FCD .
        Returns 8-bit numeric values like UCHAR_CANONICAL_COMBINING_CLASS. @stable ICU 3.0 ','line_number':552,'multiline':True]
['text':'* Enumerated property Grapheme_Cluster_Break (new in Unicode 4.1).
        Used in UAX #29: Text Boundaries
        (http://www.unicode.org/reports/tr29/)
        Returns UGraphemeClusterBreak values. @stable ICU 3.4 ','line_number':559,'multiline':True]
['text':'* Enumerated property Sentence_Break (new in Unicode 4.1).
        Used in UAX #29: Text Boundaries
        (http://www.unicode.org/reports/tr29/)
        Returns USentenceBreak values. @stable ICU 3.4 ','line_number':564,'multiline':True]
['text':'* Enumerated property Word_Break (new in Unicode 4.1).
        Used in UAX #29: Text Boundaries
        (http://www.unicode.org/reports/tr29/)
        Returns UWordBreakValues values. @stable ICU 3.4 ','line_number':569,'multiline':True]
['text':'* Enumerated property Bidi_Paired_Bracket_Type (new in Unicode 6.3).
        Used in UAX #9: Unicode Bidirectional Algorithm
        (http://www.unicode.org/reports/tr9/)
        Returns UBidiPairedBracketType values. @stable ICU 52 ','line_number':574,'multiline':True]
['text':'*
     * Enumerated property Indic_Positional_Category.
     * New in Unicode 6.0 as provisional property Indic_Matra_Category;
     * renamed and changed to informative in Unicode 8.0.
     * See http://www.unicode.org/reports/tr44/#IndicPositionalCategory.txt
     * @stable ICU 63
     ','line_number':579,'multiline':True]
['text':'*
     * Enumerated property Indic_Syllabic_Category.
     * New in Unicode 6.0 as provisional; informative since Unicode 8.0.
     * See http://www.unicode.org/reports/tr44/#IndicSyllabicCategory.txt
     * @stable ICU 63
     ','line_number':587,'multiline':True]
['text':'*
     * Enumerated property Vertical_Orientation.
     * Used for UAX #50 Unicode Vertical Text Layout (https://www.unicode.org/reports/tr50/).
     * New as a UCD property in Unicode 10.0.
     * @stable ICU 63
     ','line_number':594,'multiline':True]
['text':'*
     * One more than the last constant for enumerated/integer Unicode properties.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':602,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':607,'multiline':False]
['text':'* Bitmask property General_Category_Mask.
        This is the General_Category property returned as a bit mask.
        When used in u_getIntPropertyValue(c), same as U_MASK(u_charType(c)),
        returns bit masks for UCharCategory values where exactly one bit is set.
        When used with u_getPropertyValueName() and u_getPropertyValueEnum(),
        a multi-bit mask is used for sets of categories like "Letters".
        Mask values should be cast to uint32_t.
        @stable ICU 2.4 ','line_number':609,'multiline':True]
['text':'* First constant for bit-mask Unicode properties. @stable ICU 2.4 ','line_number':618,'multiline':True]
['text':'*
     * One more than the last constant for bit-mask Unicode properties.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':621,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':626,'multiline':False]
['text':'* Double property Numeric_Value.
        Corresponds to u_getNumericValue. @stable ICU 2.4 ','line_number':628,'multiline':True]
['text':'* First constant for double Unicode properties. @stable ICU 2.4 ','line_number':631,'multiline':True]
['text':'*
     * One more than the last constant for double Unicode properties.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':634,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':639,'multiline':False]
['text':'* String property Age.
        Corresponds to u_charAge. @stable ICU 2.4 ','line_number':641,'multiline':True]
['text':'* First constant for string Unicode properties. @stable ICU 2.4 ','line_number':644,'multiline':True]
['text':'* String property Bidi_Mirroring_Glyph.
        Corresponds to u_charMirror. @stable ICU 2.4 ','line_number':646,'multiline':True]
['text':'* String property Case_Folding.
        Corresponds to u_strFoldCase in ustring.h. @stable ICU 2.4 ','line_number':649,'multiline':True]
['text':'* Deprecated string property ISO_Comment.
        Corresponds to u_getISOComment. @deprecated ICU 49 ','line_number':653,'multiline':True]
['text':' U_HIDE_DEPRECATED_API ','line_number':656,'multiline':True]
['text':'* String property Lowercase_Mapping.
        Corresponds to u_strToLower in ustring.h. @stable ICU 2.4 ','line_number':657,'multiline':True]
['text':'* String property Name.
        Corresponds to u_charName. @stable ICU 2.4 ','line_number':660,'multiline':True]
['text':'* String property Simple_Case_Folding.
        Corresponds to u_foldCase. @stable ICU 2.4 ','line_number':663,'multiline':True]
['text':'* String property Simple_Lowercase_Mapping.
        Corresponds to u_tolower. @stable ICU 2.4 ','line_number':666,'multiline':True]
['text':'* String property Simple_Titlecase_Mapping.
        Corresponds to u_totitle. @stable ICU 2.4 ','line_number':669,'multiline':True]
['text':'* String property Simple_Uppercase_Mapping.
        Corresponds to u_toupper. @stable ICU 2.4 ','line_number':672,'multiline':True]
['text':'* String property Titlecase_Mapping.
        Corresponds to u_strToTitle in ustring.h. @stable ICU 2.4 ','line_number':675,'multiline':True]
['text':'* String property Unicode_1_Name.
        This property is of little practical value.
        Beginning with ICU 49, ICU APIs return an empty string for this property.
        Corresponds to u_charName(U_UNICODE_10_CHAR_NAME). @deprecated ICU 49 ','line_number':679,'multiline':True]
['text':' U_HIDE_DEPRECATED_API ','line_number':684,'multiline':True]
['text':'* String property Uppercase_Mapping.
        Corresponds to u_strToUpper in ustring.h. @stable ICU 2.4 ','line_number':685,'multiline':True]
['text':'* String property Bidi_Paired_Bracket (new in Unicode 6.3).
        Corresponds to u_getBidiPairedBracket. @stable ICU 52 ','line_number':688,'multiline':True]
['text':'*
     * One more than the last constant for string Unicode properties.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':692,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':697,'multiline':False]
['text':'* Miscellaneous property Script_Extensions (new in Unicode 6.0).
        Some characters are commonly used in multiple scripts.
        For more information, see UAX #24: http://www.unicode.org/reports/tr24/.
        Corresponds to uscript_hasScript and uscript_getScriptExtensions in uscript.h.
        @stable ICU 4.6 ','line_number':699,'multiline':True]
['text':'* First constant for Unicode properties with unusual value types. @stable ICU 4.6 ','line_number':705,'multiline':True]
['text':'*
     * One more than the last constant for Unicode properties with unusual value types.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':708,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':713,'multiline':False]
['text':'* Represents a nonexistent or invalid property or property value. @stable ICU 2.4 ','line_number':715,'multiline':True]
['text':'*
 * Data for enumerated Unicode general category types.
 * See http://www.unicode.org/Public/UNIDATA/UnicodeData.html .
 * @stable ICU 2.0
 ','line_number':719,'multiline':True]
['text':'
     * Note: UCharCategory constants and their API comments are parsed by preparseucd.py.
     * It matches pairs of lines like
     *     / ** <Unicode 2-letter General_Category value> comment... * /
     *     U_<[A-Z_]+> = <integer>,
     ','line_number':726,'multiline':True]
['text':'* Non-category for unassigned and non-character code points. @stable ICU 2.0 ','line_number':733,'multiline':True]
['text':'* Cn "Other, Not Assigned (no characters in [UnicodeData.txt] have this property)" (same as U_UNASSIGNED!) @stable ICU 2.0 ','line_number':735,'multiline':True]
['text':'* Lu @stable ICU 2.0 ','line_number':737,'multiline':True]
['text':'* Ll @stable ICU 2.0 ','line_number':739,'multiline':True]
['text':'* Lt @stable ICU 2.0 ','line_number':741,'multiline':True]
['text':'* Lm @stable ICU 2.0 ','line_number':743,'multiline':True]
['text':'* Lo @stable ICU 2.0 ','line_number':745,'multiline':True]
['text':'* Mn @stable ICU 2.0 ','line_number':747,'multiline':True]
['text':'* Me @stable ICU 2.0 ','line_number':749,'multiline':True]
['text':'* Mc @stable ICU 2.0 ','line_number':751,'multiline':True]
['text':'* Nd @stable ICU 2.0 ','line_number':753,'multiline':True]
['text':'* Nl @stable ICU 2.0 ','line_number':755,'multiline':True]
['text':'* No @stable ICU 2.0 ','line_number':757,'multiline':True]
['text':'* Zs @stable ICU 2.0 ','line_number':759,'multiline':True]
['text':'* Zl @stable ICU 2.0 ','line_number':761,'multiline':True]
['text':'* Zp @stable ICU 2.0 ','line_number':763,'multiline':True]
['text':'* Cc @stable ICU 2.0 ','line_number':765,'multiline':True]
['text':'* Cf @stable ICU 2.0 ','line_number':767,'multiline':True]
['text':'* Co @stable ICU 2.0 ','line_number':769,'multiline':True]
['text':'* Cs @stable ICU 2.0 ','line_number':771,'multiline':True]
['text':'* Pd @stable ICU 2.0 ','line_number':773,'multiline':True]
['text':'* Ps @stable ICU 2.0 ','line_number':775,'multiline':True]
['text':'* Pe @stable ICU 2.0 ','line_number':777,'multiline':True]
['text':'* Pc @stable ICU 2.0 ','line_number':779,'multiline':True]
['text':'* Po @stable ICU 2.0 ','line_number':781,'multiline':True]
['text':'* Sm @stable ICU 2.0 ','line_number':783,'multiline':True]
['text':'* Sc @stable ICU 2.0 ','line_number':785,'multiline':True]
['text':'* Sk @stable ICU 2.0 ','line_number':787,'multiline':True]
['text':'* So @stable ICU 2.0 ','line_number':789,'multiline':True]
['text':'* Pi @stable ICU 2.0 ','line_number':791,'multiline':True]
['text':'* Pf @stable ICU 2.0 ','line_number':793,'multiline':True]
['text':'*
     * One higher than the last enum UCharCategory constant.
     * This numeric value is stable (will not change), see
     * http://www.unicode.org/policies/stability_policy.html#Property_Value
     *
     * @stable ICU 2.0
     ','line_number':795,'multiline':True]
['text':'*
 * U_GC_XX_MASK constants are bit flags corresponding to Unicode
 * general category values.
 * For each category, the nth bit is set if the numeric value of the
 * corresponding UCharCategory constant is n.
 *
 * There are also some U_GC_Y_MASK constants for groups of general categories
 * like L for all letter categories.
 *
 * @see u_charType
 * @see U_GET_GC_MASK
 * @see UCharCategory
 * @stable ICU 2.1
 ','line_number':805,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':821,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':823,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':825,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':827,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':829,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':832,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':834,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':836,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':839,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':841,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':843,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':846,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':848,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':850,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':853,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':855,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':857,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':859,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':862,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':864,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':866,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':868,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':870,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':873,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':875,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':877,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':879,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':882,'multiline':True]
['text':'* Mask constant for a UCharCategory. @stable ICU 2.1 ','line_number':884,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (L Letters). @stable ICU 2.1 ','line_number':888,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (LC Cased Letters). @stable ICU 2.1 ','line_number':892,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (M Marks). @stable ICU 2.1 ','line_number':896,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (N Numbers). @stable ICU 2.1 ','line_number':899,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (Z Separators). @stable ICU 2.1 ','line_number':902,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (C Others). @stable ICU 2.1 ','line_number':905,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (P Punctuation). @stable ICU 2.1 ','line_number':909,'multiline':True]
['text':'* Mask constant for multiple UCharCategory bits (S Symbols). @stable ICU 2.1 ','line_number':914,'multiline':True]
['text':'*
 * This specifies the language directional property of a character set.
 * @stable ICU 2.0
 ','line_number':917,'multiline':True]
['text':'
     * Note: UCharDirection constants and their API comments are parsed by preparseucd.py.
     * It matches pairs of lines like
     *     / ** <Unicode 1..3-letter Bidi_Class value> comment... * /
     *     U_<[A-Z_]+> = <integer>,
     ','line_number':922,'multiline':True]
['text':'* L @stable ICU 2.0 ','line_number':929,'multiline':True]
['text':'* R @stable ICU 2.0 ','line_number':931,'multiline':True]
['text':'* EN @stable ICU 2.0 ','line_number':933,'multiline':True]
['text':'* ES @stable ICU 2.0 ','line_number':935,'multiline':True]
['text':'* ET @stable ICU 2.0 ','line_number':937,'multiline':True]
['text':'* AN @stable ICU 2.0 ','line_number':939,'multiline':True]
['text':'* CS @stable ICU 2.0 ','line_number':941,'multiline':True]
['text':'* B @stable ICU 2.0 ','line_number':943,'multiline':True]
['text':'* S @stable ICU 2.0 ','line_number':945,'multiline':True]
['text':'* WS @stable ICU 2.0 ','line_number':947,'multiline':True]
['text':'* ON @stable ICU 2.0 ','line_number':949,'multiline':True]
['text':'* LRE @stable ICU 2.0 ','line_number':951,'multiline':True]
['text':'* LRO @stable ICU 2.0 ','line_number':953,'multiline':True]
['text':'* AL @stable ICU 2.0 ','line_number':955,'multiline':True]
['text':'* RLE @stable ICU 2.0 ','line_number':957,'multiline':True]
['text':'* RLO @stable ICU 2.0 ','line_number':959,'multiline':True]
['text':'* PDF @stable ICU 2.0 ','line_number':961,'multiline':True]
['text':'* NSM @stable ICU 2.0 ','line_number':963,'multiline':True]
['text':'* BN @stable ICU 2.0 ','line_number':965,'multiline':True]
['text':'* FSI @stable ICU 52 ','line_number':967,'multiline':True]
['text':'* LRI @stable ICU 52 ','line_number':969,'multiline':True]
['text':'* RLI @stable ICU 52 ','line_number':971,'multiline':True]
['text':'* PDI @stable ICU 52 ','line_number':973,'multiline':True]
['text':'*
     * One more than the highest UCharDirection value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_BIDI_CLASS).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':976,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':983,'multiline':False]
['text':'*
 * Bidi Paired Bracket Type constants.
 *
 * @see UCHAR_BIDI_PAIRED_BRACKET_TYPE
 * @stable ICU 52
 ','line_number':986,'multiline':True]
['text':'
     * Note: UBidiPairedBracketType constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_BPT_<Unicode Bidi_Paired_Bracket_Type value name>
     ','line_number':993,'multiline':True]
['text':'* Not a paired bracket. @stable ICU 52 ','line_number':999,'multiline':True]
['text':'* Open paired bracket. @stable ICU 52 ','line_number':1001,'multiline':True]
['text':'* Close paired bracket. @stable ICU 52 ','line_number':1003,'multiline':True]
['text':'*
     * One more than the highest normal UBidiPairedBracketType value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_BIDI_PAIRED_BRACKET_TYPE).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':1006,'multiline':True]
['text':' 3 ','line_number':1012,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':1013,'multiline':False]
['text':'*
 * Constants for Unicode blocks, see the Unicode Data file Blocks.txt
 * @stable ICU 2.0
 ','line_number':1016,'multiline':True]
['text':'
     * Note: UBlockCode constants are parsed by preparseucd.py.
     * It matches lines like
     *     UBLOCK_<Unicode Block value name> = <integer>,
     ','line_number':1021,'multiline':True]
['text':'* New No_Block value in Unicode 4. @stable ICU 2.6 ','line_number':1027,'multiline':True]
['text':'[none]','line_number':1028,'multiline':True]
['text':' Special range indicating No_Block ','line_number':1028,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1030,'multiline':True]
['text':'[0000]','line_number':1031,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1033,'multiline':True]
['text':'[0080]','line_number':1034,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1036,'multiline':True]
['text':'[0100]','line_number':1037,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1039,'multiline':True]
['text':'[0180]','line_number':1040,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1042,'multiline':True]
['text':'[0250]','line_number':1043,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1045,'multiline':True]
['text':'[02B0]','line_number':1046,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1048,'multiline':True]
['text':'[0300]','line_number':1049,'multiline':True]
['text':'*
     * Unicode 3.2 renames this block to "Greek and Coptic".
     * @stable ICU 2.0
     ','line_number':1051,'multiline':True]
['text':'[0370]','line_number':1055,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1057,'multiline':True]
['text':'[0400]','line_number':1058,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1060,'multiline':True]
['text':'[0530]','line_number':1061,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1063,'multiline':True]
['text':'[0590]','line_number':1064,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1066,'multiline':True]
['text':'[0600]','line_number':1067,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1069,'multiline':True]
['text':'[0700]','line_number':1070,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1072,'multiline':True]
['text':'[0780]','line_number':1073,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1075,'multiline':True]
['text':'[0900]','line_number':1076,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1078,'multiline':True]
['text':'[0980]','line_number':1079,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1081,'multiline':True]
['text':'[0A00]','line_number':1082,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1084,'multiline':True]
['text':'[0A80]','line_number':1085,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1087,'multiline':True]
['text':'[0B00]','line_number':1088,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1090,'multiline':True]
['text':'[0B80]','line_number':1091,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1093,'multiline':True]
['text':'[0C00]','line_number':1094,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1096,'multiline':True]
['text':'[0C80]','line_number':1097,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1099,'multiline':True]
['text':'[0D00]','line_number':1100,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1102,'multiline':True]
['text':'[0D80]','line_number':1103,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1105,'multiline':True]
['text':'[0E00]','line_number':1106,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1108,'multiline':True]
['text':'[0E80]','line_number':1109,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1111,'multiline':True]
['text':'[0F00]','line_number':1112,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1114,'multiline':True]
['text':'[1000]','line_number':1115,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1117,'multiline':True]
['text':'[10A0]','line_number':1118,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1120,'multiline':True]
['text':'[1100]','line_number':1121,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1123,'multiline':True]
['text':'[1200]','line_number':1124,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1126,'multiline':True]
['text':'[13A0]','line_number':1127,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1129,'multiline':True]
['text':'[1400]','line_number':1130,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1132,'multiline':True]
['text':'[1680]','line_number':1133,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1135,'multiline':True]
['text':'[16A0]','line_number':1136,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1138,'multiline':True]
['text':'[1780]','line_number':1139,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1141,'multiline':True]
['text':'[1800]','line_number':1142,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1144,'multiline':True]
['text':'[1E00]','line_number':1145,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1147,'multiline':True]
['text':'[1F00]','line_number':1148,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1150,'multiline':True]
['text':'[2000]','line_number':1151,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1153,'multiline':True]
['text':'[2070]','line_number':1154,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1156,'multiline':True]
['text':'[20A0]','line_number':1157,'multiline':True]
['text':'*
     * Unicode 3.2 renames this block to "Combining Diacritical Marks for Symbols".
     * @stable ICU 2.0
     ','line_number':1159,'multiline':True]
['text':'[20D0]','line_number':1163,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1165,'multiline':True]
['text':'[2100]','line_number':1166,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1168,'multiline':True]
['text':'[2150]','line_number':1169,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1171,'multiline':True]
['text':'[2190]','line_number':1172,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1174,'multiline':True]
['text':'[2200]','line_number':1175,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1177,'multiline':True]
['text':'[2300]','line_number':1178,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1180,'multiline':True]
['text':'[2400]','line_number':1181,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1183,'multiline':True]
['text':'[2440]','line_number':1184,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1186,'multiline':True]
['text':'[2460]','line_number':1187,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1189,'multiline':True]
['text':'[2500]','line_number':1190,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1192,'multiline':True]
['text':'[2580]','line_number':1193,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1195,'multiline':True]
['text':'[25A0]','line_number':1196,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1198,'multiline':True]
['text':'[2600]','line_number':1199,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1201,'multiline':True]
['text':'[2700]','line_number':1202,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1204,'multiline':True]
['text':'[2800]','line_number':1205,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1207,'multiline':True]
['text':'[2E80]','line_number':1208,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1210,'multiline':True]
['text':'[2F00]','line_number':1211,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1213,'multiline':True]
['text':'[2FF0]','line_number':1214,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1216,'multiline':True]
['text':'[3000]','line_number':1217,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1219,'multiline':True]
['text':'[3040]','line_number':1220,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1222,'multiline':True]
['text':'[30A0]','line_number':1223,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1225,'multiline':True]
['text':'[3100]','line_number':1226,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1228,'multiline':True]
['text':'[3130]','line_number':1229,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1231,'multiline':True]
['text':'[3190]','line_number':1232,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1234,'multiline':True]
['text':'[31A0]','line_number':1235,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1237,'multiline':True]
['text':'[3200]','line_number':1238,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1240,'multiline':True]
['text':'[3300]','line_number':1241,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1243,'multiline':True]
['text':'[3400]','line_number':1244,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1246,'multiline':True]
['text':'[4E00]','line_number':1247,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1249,'multiline':True]
['text':'[A000]','line_number':1250,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1252,'multiline':True]
['text':'[A490]','line_number':1253,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1255,'multiline':True]
['text':'[AC00]','line_number':1256,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1258,'multiline':True]
['text':'[D800]','line_number':1259,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1261,'multiline':True]
['text':'[DB80]','line_number':1262,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1264,'multiline':True]
['text':'[DC00]','line_number':1265,'multiline':True]
['text':'*
     * Same as UBLOCK_PRIVATE_USE.
     * Until Unicode 3.1.1, the corresponding block name was "Private Use",
     * and multiple code point ranges had this block.
     * Unicode 3.2 renames the block for the BMP PUA to "Private Use Area" and
     * adds separate blocks for the supplementary PUAs.
     *
     * @stable ICU 2.0
     ','line_number':1267,'multiline':True]
['text':'[E000]','line_number':1276,'multiline':True]
['text':'*
     * Same as UBLOCK_PRIVATE_USE_AREA.
     * Until Unicode 3.1.1, the corresponding block name was "Private Use",
     * and multiple code point ranges had this block.
     * Unicode 3.2 renames the block for the BMP PUA to "Private Use Area" and
     * adds separate blocks for the supplementary PUAs.
     *
     * @stable ICU 2.0
     ','line_number':1277,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1288,'multiline':True]
['text':'[F900]','line_number':1289,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1291,'multiline':True]
['text':'[FB00]','line_number':1292,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1294,'multiline':True]
['text':'[FB50]','line_number':1295,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1297,'multiline':True]
['text':'[FE20]','line_number':1298,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1300,'multiline':True]
['text':'[FE30]','line_number':1301,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1303,'multiline':True]
['text':'[FE50]','line_number':1304,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1306,'multiline':True]
['text':'[FE70]','line_number':1307,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1309,'multiline':True]
['text':'[FFF0]','line_number':1310,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1312,'multiline':True]
['text':'[FF00]','line_number':1313,'multiline':True]
['text':' New blocks in Unicode 3.1 ','line_number':1315,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1317,'multiline':True]
['text':'[10300]','line_number':1318,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1319,'multiline':True]
['text':'[10330]','line_number':1320,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1321,'multiline':True]
['text':'[10400]','line_number':1322,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1323,'multiline':True]
['text':'[1D000]','line_number':1324,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1325,'multiline':True]
['text':'[1D100]','line_number':1326,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1327,'multiline':True]
['text':'[1D400]','line_number':1328,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1329,'multiline':True]
['text':'[20000]','line_number':1330,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1331,'multiline':True]
['text':'[2F800]','line_number':1332,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1333,'multiline':True]
['text':'[E0000]','line_number':1334,'multiline':True]
['text':' New blocks in Unicode 3.2 ','line_number':1336,'multiline':True]
['text':'* @stable ICU 3.0  ','line_number':1338,'multiline':True]
['text':'[0500]','line_number':1339,'multiline':True]
['text':'*
     * Unicode 4.0.1 renames the "Cyrillic Supplementary" block to "Cyrillic Supplement".
     * @stable ICU 2.2
     ','line_number':1340,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1345,'multiline':True]
['text':'[1700]','line_number':1346,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1347,'multiline':True]
['text':'[1720]','line_number':1348,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1349,'multiline':True]
['text':'[1740]','line_number':1350,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1351,'multiline':True]
['text':'[1760]','line_number':1352,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1353,'multiline':True]
['text':'[27C0]','line_number':1354,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1355,'multiline':True]
['text':'[27F0]','line_number':1356,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1357,'multiline':True]
['text':'[2900]','line_number':1358,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1359,'multiline':True]
['text':'[2980]','line_number':1360,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1361,'multiline':True]
['text':'[2A00]','line_number':1362,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1363,'multiline':True]
['text':'[31F0]','line_number':1364,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1365,'multiline':True]
['text':'[FE00]','line_number':1366,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1367,'multiline':True]
['text':'[F0000]','line_number':1368,'multiline':True]
['text':'* @stable ICU 2.2 ','line_number':1369,'multiline':True]
['text':'[100000]','line_number':1370,'multiline':True]
['text':' New blocks in Unicode 4 ','line_number':1372,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1374,'multiline':True]
['text':'[1900]','line_number':1375,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1376,'multiline':True]
['text':'[1950]','line_number':1377,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1378,'multiline':True]
['text':'[19E0]','line_number':1379,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1380,'multiline':True]
['text':'[1D00]','line_number':1381,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1382,'multiline':True]
['text':'[2B00]','line_number':1383,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1384,'multiline':True]
['text':'[4DC0]','line_number':1385,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1386,'multiline':True]
['text':'[10000]','line_number':1387,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1388,'multiline':True]
['text':'[10080]','line_number':1389,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1390,'multiline':True]
['text':'[10100]','line_number':1391,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1392,'multiline':True]
['text':'[10380]','line_number':1393,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1394,'multiline':True]
['text':'[10450]','line_number':1395,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1396,'multiline':True]
['text':'[10480]','line_number':1397,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1398,'multiline':True]
['text':'[10800]','line_number':1399,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1400,'multiline':True]
['text':'[1D300]','line_number':1401,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':1402,'multiline':True]
['text':'[E0100]','line_number':1403,'multiline':True]
['text':' New blocks in Unicode 4.1 ','line_number':1405,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1407,'multiline':True]
['text':'[1D200]','line_number':1408,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1409,'multiline':True]
['text':'[10140]','line_number':1410,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1411,'multiline':True]
['text':'[0750]','line_number':1412,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1413,'multiline':True]
['text':'[1A00]','line_number':1414,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1415,'multiline':True]
['text':'[31C0]','line_number':1416,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1417,'multiline':True]
['text':'[1DC0]','line_number':1418,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1419,'multiline':True]
['text':'[2C80]','line_number':1420,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1421,'multiline':True]
['text':'[2D80]','line_number':1422,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1423,'multiline':True]
['text':'[1380]','line_number':1424,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1425,'multiline':True]
['text':'[2D00]','line_number':1426,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1427,'multiline':True]
['text':'[2C00]','line_number':1428,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1429,'multiline':True]
['text':'[10A00]','line_number':1430,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1431,'multiline':True]
['text':'[A700]','line_number':1432,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1433,'multiline':True]
['text':'[1980]','line_number':1434,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1435,'multiline':True]
['text':'[103A0]','line_number':1436,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1437,'multiline':True]
['text':'[1D80]','line_number':1438,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1439,'multiline':True]
['text':'[2E00]','line_number':1440,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1441,'multiline':True]
['text':'[A800]','line_number':1442,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1443,'multiline':True]
['text':'[2D30]','line_number':1444,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':1445,'multiline':True]
['text':'[FE10]','line_number':1446,'multiline':True]
['text':' New blocks in Unicode 5.0 ','line_number':1448,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1450,'multiline':True]
['text':'[07C0]','line_number':1451,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1452,'multiline':True]
['text':'[1B00]','line_number':1453,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1454,'multiline':True]
['text':'[2C60]','line_number':1455,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1456,'multiline':True]
['text':'[A720]','line_number':1457,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1458,'multiline':True]
['text':'[A840]','line_number':1459,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1460,'multiline':True]
['text':'[10900]','line_number':1461,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1462,'multiline':True]
['text':'[12000]','line_number':1463,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1464,'multiline':True]
['text':'[12400]','line_number':1465,'multiline':True]
['text':'* @stable ICU 3.6 ','line_number':1466,'multiline':True]
['text':'[1D360]','line_number':1467,'multiline':True]
['text':' New blocks in Unicode 5.1 ','line_number':1469,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1471,'multiline':True]
['text':'[1B80]','line_number':1472,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1473,'multiline':True]
['text':'[1C00]','line_number':1474,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1475,'multiline':True]
['text':'[1C50]','line_number':1476,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1477,'multiline':True]
['text':'[2DE0]','line_number':1478,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1479,'multiline':True]
['text':'[A500]','line_number':1480,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1481,'multiline':True]
['text':'[A640]','line_number':1482,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1483,'multiline':True]
['text':'[A880]','line_number':1484,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1485,'multiline':True]
['text':'[A900]','line_number':1486,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1487,'multiline':True]
['text':'[A930]','line_number':1488,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1489,'multiline':True]
['text':'[AA00]','line_number':1490,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1491,'multiline':True]
['text':'[10190]','line_number':1492,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1493,'multiline':True]
['text':'[101D0]','line_number':1494,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1495,'multiline':True]
['text':'[10280]','line_number':1496,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1497,'multiline':True]
['text':'[102A0]','line_number':1498,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1499,'multiline':True]
['text':'[10920]','line_number':1500,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1501,'multiline':True]
['text':'[1F000]','line_number':1502,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':1503,'multiline':True]
['text':'[1F030]','line_number':1504,'multiline':True]
['text':' New blocks in Unicode 5.2 ','line_number':1506,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1508,'multiline':True]
['text':'[0800]','line_number':1509,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1510,'multiline':True]
['text':'[18B0]','line_number':1511,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1512,'multiline':True]
['text':'[1A20]','line_number':1513,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1514,'multiline':True]
['text':'[1CD0]','line_number':1515,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1516,'multiline':True]
['text':'[A4D0]','line_number':1517,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1518,'multiline':True]
['text':'[A6A0]','line_number':1519,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1520,'multiline':True]
['text':'[A830]','line_number':1521,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1522,'multiline':True]
['text':'[A8E0]','line_number':1523,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1524,'multiline':True]
['text':'[A960]','line_number':1525,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1526,'multiline':True]
['text':'[A980]','line_number':1527,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1528,'multiline':True]
['text':'[AA60]','line_number':1529,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1530,'multiline':True]
['text':'[AA80]','line_number':1531,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1532,'multiline':True]
['text':'[ABC0]','line_number':1533,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1534,'multiline':True]
['text':'[D7B0]','line_number':1535,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1536,'multiline':True]
['text':'[10840]','line_number':1537,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1538,'multiline':True]
['text':'[10A60]','line_number':1539,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1540,'multiline':True]
['text':'[10B00]','line_number':1541,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1542,'multiline':True]
['text':'[10B40]','line_number':1543,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1544,'multiline':True]
['text':'[10B60]','line_number':1545,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1546,'multiline':True]
['text':'[10C00]','line_number':1547,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1548,'multiline':True]
['text':'[10E60]','line_number':1549,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1550,'multiline':True]
['text':'[11080]','line_number':1551,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1552,'multiline':True]
['text':'[13000]','line_number':1553,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1554,'multiline':True]
['text':'[1F100]','line_number':1555,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1556,'multiline':True]
['text':'[1F200]','line_number':1557,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':1558,'multiline':True]
['text':'[2A700]','line_number':1559,'multiline':True]
['text':' New blocks in Unicode 6.0 ','line_number':1561,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1563,'multiline':True]
['text':'[0840]','line_number':1564,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1565,'multiline':True]
['text':'[1BC0]','line_number':1566,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1567,'multiline':True]
['text':'[AB00]','line_number':1568,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1569,'multiline':True]
['text':'[11000]','line_number':1570,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1571,'multiline':True]
['text':'[16800]','line_number':1572,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1573,'multiline':True]
['text':'[1B000]','line_number':1574,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1575,'multiline':True]
['text':'[1F0A0]','line_number':1576,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1577,'multiline':True]
['text':'[1F300]','line_number':1578,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1579,'multiline':True]
['text':'[1F600]','line_number':1580,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1581,'multiline':True]
['text':'[1F680]','line_number':1582,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1583,'multiline':True]
['text':'[1F700]','line_number':1584,'multiline':True]
['text':'* @stable ICU 4.6 ','line_number':1585,'multiline':True]
['text':'[2B740]','line_number':1586,'multiline':True]
['text':' New blocks in Unicode 6.1 ','line_number':1588,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1590,'multiline':True]
['text':'[08A0]','line_number':1591,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1592,'multiline':True]
['text':'[1EE00]','line_number':1593,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1594,'multiline':True]
['text':'[11100]','line_number':1595,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1596,'multiline':True]
['text':'[AAE0]','line_number':1597,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1598,'multiline':True]
['text':'[109A0]','line_number':1599,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1600,'multiline':True]
['text':'[10980]','line_number':1601,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1602,'multiline':True]
['text':'[16F00]','line_number':1603,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1604,'multiline':True]
['text':'[11180]','line_number':1605,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1606,'multiline':True]
['text':'[110D0]','line_number':1607,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1608,'multiline':True]
['text':'[1CC0]','line_number':1609,'multiline':True]
['text':'* @stable ICU 49 ','line_number':1610,'multiline':True]
['text':'[11680]','line_number':1611,'multiline':True]
['text':' New blocks in Unicode 7.0 ','line_number':1613,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1615,'multiline':True]
['text':'[16AD0]','line_number':1616,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1617,'multiline':True]
['text':'[10530]','line_number':1618,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1619,'multiline':True]
['text':'[102E0]','line_number':1620,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1621,'multiline':True]
['text':'[1AB0]','line_number':1622,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1623,'multiline':True]
['text':'[1BC00]','line_number':1624,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1625,'multiline':True]
['text':'[10500]','line_number':1626,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1627,'multiline':True]
['text':'[1F780]','line_number':1628,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1629,'multiline':True]
['text':'[11300]','line_number':1630,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1631,'multiline':True]
['text':'[11200]','line_number':1632,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1633,'multiline':True]
['text':'[112B0]','line_number':1634,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1635,'multiline':True]
['text':'[AB30]','line_number':1636,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1637,'multiline':True]
['text':'[10600]','line_number':1638,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1639,'multiline':True]
['text':'[11150]','line_number':1640,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1641,'multiline':True]
['text':'[10AC0]','line_number':1642,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1643,'multiline':True]
['text':'[1E800]','line_number':1644,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1645,'multiline':True]
['text':'[11600]','line_number':1646,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1647,'multiline':True]
['text':'[16A40]','line_number':1648,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1649,'multiline':True]
['text':'[A9E0]','line_number':1650,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1651,'multiline':True]
['text':'[10880]','line_number':1652,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1653,'multiline':True]
['text':'[10A80]','line_number':1654,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1655,'multiline':True]
['text':'[10350]','line_number':1656,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1657,'multiline':True]
['text':'[1F650]','line_number':1658,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1659,'multiline':True]
['text':'[16B00]','line_number':1660,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1661,'multiline':True]
['text':'[10860]','line_number':1662,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1663,'multiline':True]
['text':'[11AC0]','line_number':1664,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1665,'multiline':True]
['text':'[10B80]','line_number':1666,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1667,'multiline':True]
['text':'[1BCA0]','line_number':1668,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1669,'multiline':True]
['text':'[11580]','line_number':1670,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1671,'multiline':True]
['text':'[111E0]','line_number':1672,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1673,'multiline':True]
['text':'[1F800]','line_number':1674,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1675,'multiline':True]
['text':'[11480]','line_number':1676,'multiline':True]
['text':'* @stable ICU 54 ','line_number':1677,'multiline':True]
['text':'[118A0]','line_number':1678,'multiline':True]
['text':' New blocks in Unicode 8.0 ','line_number':1680,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1682,'multiline':True]
['text':'[11700]','line_number':1683,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1684,'multiline':True]
['text':'[14400]','line_number':1685,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1686,'multiline':True]
['text':'[AB70]','line_number':1687,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1688,'multiline':True]
['text':'[2B820]','line_number':1689,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1690,'multiline':True]
['text':'[12480]','line_number':1691,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1692,'multiline':True]
['text':'[108E0]','line_number':1693,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1694,'multiline':True]
['text':'[11280]','line_number':1695,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1696,'multiline':True]
['text':'[10C80]','line_number':1697,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1698,'multiline':True]
['text':'[1F900]','line_number':1699,'multiline':True]
['text':'* @stable ICU 56 ','line_number':1700,'multiline':True]
['text':'[1D800]','line_number':1701,'multiline':True]
['text':' New blocks in Unicode 9.0 ','line_number':1703,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1705,'multiline':True]
['text':'[1E900]','line_number':1706,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1707,'multiline':True]
['text':'[11C00]','line_number':1708,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1709,'multiline':True]
['text':'[1C80]','line_number':1710,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1711,'multiline':True]
['text':'[1E000]','line_number':1712,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1713,'multiline':True]
['text':'[16FE0]','line_number':1714,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1715,'multiline':True]
['text':'[11C70]','line_number':1716,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1717,'multiline':True]
['text':'[11660]','line_number':1718,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1719,'multiline':True]
['text':'[11400]','line_number':1720,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1721,'multiline':True]
['text':'[104B0]','line_number':1722,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1723,'multiline':True]
['text':'[17000]','line_number':1724,'multiline':True]
['text':'* @stable ICU 58 ','line_number':1725,'multiline':True]
['text':'[18800]','line_number':1726,'multiline':True]
['text':' New blocks in Unicode 10.0','line_number':1728,'multiline':False]
['text':'* @stable ICU 60 ','line_number':1730,'multiline':True]
['text':'[2CEB0]','line_number':1731,'multiline':True]
['text':'* @stable ICU 60 ','line_number':1732,'multiline':True]
['text':'[1B100]','line_number':1733,'multiline':True]
['text':'* @stable ICU 60 ','line_number':1734,'multiline':True]
['text':'[11D00]','line_number':1735,'multiline':True]
['text':'* @stable ICU 60 ','line_number':1736,'multiline':True]
['text':'[1B170]','line_number':1737,'multiline':True]
['text':'* @stable ICU 60 ','line_number':1738,'multiline':True]
['text':'[11A50]','line_number':1739,'multiline':True]
['text':'* @stable ICU 60 ','line_number':1740,'multiline':True]
['text':'[0860]','line_number':1741,'multiline':True]
['text':'* @stable ICU 60 ','line_number':1742,'multiline':True]
['text':'[11A00]','line_number':1743,'multiline':True]
['text':' New blocks in Unicode 11.0','line_number':1745,'multiline':False]
['text':'* @stable ICU 62 ','line_number':1747,'multiline':True]
['text':'[1FA00]','line_number':1748,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1749,'multiline':True]
['text':'[11800]','line_number':1750,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1751,'multiline':True]
['text':'[1C90]','line_number':1752,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1753,'multiline':True]
['text':'[11D60]','line_number':1754,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1755,'multiline':True]
['text':'[10D00]','line_number':1756,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1757,'multiline':True]
['text':'[1EC70]','line_number':1758,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1759,'multiline':True]
['text':'[11EE0]','line_number':1760,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1761,'multiline':True]
['text':'[1D2E0]','line_number':1762,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1763,'multiline':True]
['text':'[16E40]','line_number':1764,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1765,'multiline':True]
['text':'[10F00]','line_number':1766,'multiline':True]
['text':'* @stable ICU 62 ','line_number':1767,'multiline':True]
['text':'[10F30]','line_number':1768,'multiline':True]
['text':' New blocks in Unicode 12.0','line_number':1770,'multiline':False]
['text':'* @stable ICU 64 ','line_number':1772,'multiline':True]
['text':'[13430]','line_number':1773,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1774,'multiline':True]
['text':'[10FE0]','line_number':1775,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1776,'multiline':True]
['text':'[119A0]','line_number':1777,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1778,'multiline':True]
['text':'[1E100]','line_number':1779,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1780,'multiline':True]
['text':'[1ED00]','line_number':1781,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1782,'multiline':True]
['text':'[1B130]','line_number':1783,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1784,'multiline':True]
['text':'[1FA70]','line_number':1785,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1786,'multiline':True]
['text':'[11FC0]','line_number':1787,'multiline':True]
['text':'* @stable ICU 64 ','line_number':1788,'multiline':True]
['text':'[1E2C0]','line_number':1789,'multiline':True]
['text':' New blocks in Unicode 13.0','line_number':1791,'multiline':False]
['text':'* @stable ICU 66 ','line_number':1793,'multiline':True]
['text':'[10FB0]','line_number':1794,'multiline':True]
['text':'* @stable ICU 66 ','line_number':1795,'multiline':True]
['text':'[30000]','line_number':1796,'multiline':True]
['text':'* @stable ICU 66 ','line_number':1797,'multiline':True]
['text':'[11900]','line_number':1798,'multiline':True]
['text':'* @stable ICU 66 ','line_number':1799,'multiline':True]
['text':'[18B00]','line_number':1800,'multiline':True]
['text':'* @stable ICU 66 ','line_number':1801,'multiline':True]
['text':'[11FB0]','line_number':1802,'multiline':True]
['text':'* @stable ICU 66 ','line_number':1803,'multiline':True]
['text':'[1FB00]','line_number':1804,'multiline':True]
['text':'* @stable ICU 66 ','line_number':1805,'multiline':True]
['text':'[18D00]','line_number':1806,'multiline':True]
['text':'* @stable ICU 66 ','line_number':1807,'multiline':True]
['text':'[10E80]','line_number':1808,'multiline':True]
['text':'*
     * One more than the highest normal UBlockCode value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_BLOCK).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':1811,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':1818,'multiline':False]
['text':'* @stable ICU 2.0 ','line_number':1820,'multiline':True]
['text':'* @stable ICU 2.0 ','line_number':1824,'multiline':True]
['text':'*
 * East Asian Width constants.
 *
 * @see UCHAR_EAST_ASIAN_WIDTH
 * @see u_getIntPropertyValue
 * @stable ICU 2.2
 ','line_number':1827,'multiline':True]
['text':'
     * Note: UEastAsianWidth constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_EA_<Unicode East_Asian_Width value name>
     ','line_number':1835,'multiline':True]
['text':'[N]','line_number':1841,'multiline':True]
['text':'[A]','line_number':1842,'multiline':True]
['text':'[H]','line_number':1843,'multiline':True]
['text':'[F]','line_number':1844,'multiline':True]
['text':'[Na]','line_number':1845,'multiline':True]
['text':'[W]','line_number':1846,'multiline':True]
['text':'*
     * One more than the highest normal UEastAsianWidth value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_EAST_ASIAN_WIDTH).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':1848,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':1855,'multiline':False]
['text':'*
 * Selector constants for u_charName().
 * u_charName() returns the "modern" name of a
 * Unicode character; or the name that was defined in
 * Unicode version 1.0, before the Unicode standard merged
 * with ISO-10646; or an "extended" name that gives each
 * Unicode code point a unique name.
 *
 * @see u_charName
 * @stable ICU 2.0
 ','line_number':1858,'multiline':True]
['text':'* Unicode character name (Name property). @stable ICU 2.0 ','line_number':1870,'multiline':True]
['text':'*
     * The Unicode_1_Name property value which is of little practical value.
     * Beginning with ICU 49, ICU APIs return an empty string for this name choice.
     * @deprecated ICU 49
     ','line_number':1873,'multiline':True]
['text':' U_HIDE_DEPRECATED_API ','line_number':1879,'multiline':True]
['text':'* Standard or synthetic character name. @stable ICU 2.0 ','line_number':1880,'multiline':True]
['text':'* Corrected name from NameAliases.txt. @stable ICU 4.4 ','line_number':1882,'multiline':True]
['text':'*
     * One more than the highest normal UCharNameChoice value.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':1885,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':1890,'multiline':False]
['text':'*
 * Selector constants for u_getPropertyName() and
 * u_getPropertyValueName().  These selectors are used to choose which
 * name is returned for a given property or value.  All properties and
 * values have a long name.  Most have a short name, but some do not.
 * Unicode allows for additional names, beyond the long and short
 * name, which would be indicated by U_LONG_PROPERTY_NAME + i, where
 * i=1, 2,...
 *
 * @see u_getPropertyName()
 * @see u_getPropertyValueName()
 * @stable ICU 2.4
 ','line_number':1893,'multiline':True]
['text':'*
     * One more than the highest normal UPropertyNameChoice value.
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':1910,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':1915,'multiline':False]
['text':'*
 * Decomposition Type constants.
 *
 * @see UCHAR_DECOMPOSITION_TYPE
 * @stable ICU 2.2
 ','line_number':1918,'multiline':True]
['text':'
     * Note: UDecompositionType constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_DT_<Unicode Decomposition_Type value name>
     ','line_number':1925,'multiline':True]
['text':'[none]','line_number':1931,'multiline':True]
['text':'[can]','line_number':1932,'multiline':True]
['text':'[com]','line_number':1933,'multiline':True]
['text':'[enc]','line_number':1934,'multiline':True]
['text':'[fin]','line_number':1935,'multiline':True]
['text':'[font]','line_number':1936,'multiline':True]
['text':'[fra]','line_number':1937,'multiline':True]
['text':'[init]','line_number':1938,'multiline':True]
['text':'[iso]','line_number':1939,'multiline':True]
['text':'[med]','line_number':1940,'multiline':True]
['text':'[nar]','line_number':1941,'multiline':True]
['text':'[nb]','line_number':1942,'multiline':True]
['text':'[sml]','line_number':1943,'multiline':True]
['text':'[sqr]','line_number':1944,'multiline':True]
['text':'[sub]','line_number':1945,'multiline':True]
['text':'[sup]','line_number':1946,'multiline':True]
['text':'[vert]','line_number':1947,'multiline':True]
['text':'[wide]','line_number':1948,'multiline':True]
['text':'*
     * One more than the highest normal UDecompositionType value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_DECOMPOSITION_TYPE).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':1950,'multiline':True]
['text':' 18 ','line_number':1956,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':1957,'multiline':False]
['text':'*
 * Joining Type constants.
 *
 * @see UCHAR_JOINING_TYPE
 * @stable ICU 2.2
 ','line_number':1960,'multiline':True]
['text':'
     * Note: UJoiningType constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_JT_<Unicode Joining_Type value name>
     ','line_number':1967,'multiline':True]
['text':'[U]','line_number':1973,'multiline':True]
['text':'[C]','line_number':1974,'multiline':True]
['text':'[D]','line_number':1975,'multiline':True]
['text':'[L]','line_number':1976,'multiline':True]
['text':'[R]','line_number':1977,'multiline':True]
['text':'[T]','line_number':1978,'multiline':True]
['text':'*
     * One more than the highest normal UJoiningType value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_JOINING_TYPE).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':1980,'multiline':True]
['text':' 6 ','line_number':1986,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':1987,'multiline':False]
['text':'*
 * Joining Group constants.
 *
 * @see UCHAR_JOINING_GROUP
 * @stable ICU 2.2
 ','line_number':1990,'multiline':True]
['text':'
     * Note: UJoiningGroup constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_JG_<Unicode Joining_Group value name>
     ','line_number':1997,'multiline':True]
['text':'*< @stable ICU 4.6 ','line_number':2017,'multiline':True]
['text':'*< @stable ICU 2.6 ','line_number':2055,'multiline':True]
['text':'*< @stable ICU 2.6 ','line_number':2056,'multiline':True]
['text':'*< @stable ICU 2.6 ','line_number':2057,'multiline':True]
['text':'*< @stable ICU 4.0 ','line_number':2058,'multiline':True]
['text':'*< @stable ICU 4.4 ','line_number':2059,'multiline':True]
['text':'*< @stable ICU 4.4 ','line_number':2060,'multiline':True]
['text':'*< @stable ICU 49 ','line_number':2061,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2062,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2063,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2064,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2065,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2066,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2067,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2068,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2069,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2070,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2071,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2072,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2073,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2074,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2075,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2076,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2077,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2078,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2079,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2080,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2081,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2082,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2083,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2084,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2085,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2086,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2087,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2088,'multiline':True]
['text':'*< @stable ICU 54 ','line_number':2089,'multiline':True]
['text':'*< @stable ICU 58 ','line_number':2090,'multiline':True]
['text':'*< @stable ICU 58 ','line_number':2091,'multiline':True]
['text':'*< @stable ICU 58 ','line_number':2092,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2094,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2095,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2096,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2097,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2098,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2099,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2100,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2101,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2102,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2103,'multiline':True]
['text':'*< @stable ICU 60 ','line_number':2104,'multiline':True]
['text':'*< @stable ICU 62 ','line_number':2106,'multiline':True]
['text':'*< @stable ICU 62 ','line_number':2107,'multiline':True]
['text':'*
     * One more than the highest normal UJoiningGroup value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_JOINING_GROUP).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':2110,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':2117,'multiline':False]
['text':'*
 * Grapheme Cluster Break constants.
 *
 * @see UCHAR_GRAPHEME_CLUSTER_BREAK
 * @stable ICU 3.4
 ','line_number':2120,'multiline':True]
['text':'
     * Note: UGraphemeClusterBreak constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_GCB_<Unicode Grapheme_Cluster_Break value name>
     ','line_number':2127,'multiline':True]
['text':'[XX]','line_number':2133,'multiline':True]
['text':'[CN]','line_number':2134,'multiline':True]
['text':'[CR]','line_number':2135,'multiline':True]
['text':'[EX]','line_number':2136,'multiline':True]
['text':'[L]','line_number':2137,'multiline':True]
['text':'[LF]','line_number':2138,'multiline':True]
['text':'[LV]','line_number':2139,'multiline':True]
['text':'[LVT]','line_number':2140,'multiline':True]
['text':'[T]','line_number':2141,'multiline':True]
['text':'[V]','line_number':2142,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':2143,'multiline':True]
['text':'[SM]','line_number':2144,'multiline':True]
['text':' from here on: new in Unicode 5.1/ICU 4.0 ','line_number':2144,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':2145,'multiline':True]
['text':'[PP]','line_number':2146,'multiline':True]
['text':'* @stable ICU 50 ','line_number':2147,'multiline':True]
['text':'[RI]','line_number':2148,'multiline':True]
['text':' new in Unicode 6.2/ICU 50 ','line_number':2148,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2149,'multiline':True]
['text':'[EB]','line_number':2150,'multiline':True]
['text':' from here on: new in Unicode 9.0/ICU 58 ','line_number':2150,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2151,'multiline':True]
['text':'[EBG]','line_number':2152,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2153,'multiline':True]
['text':'[EM]','line_number':2154,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2155,'multiline':True]
['text':'[GAZ]','line_number':2156,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2157,'multiline':True]
['text':'[ZWJ]','line_number':2158,'multiline':True]
['text':'*
     * One more than the highest normal UGraphemeClusterBreak value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_GRAPHEME_CLUSTER_BREAK).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':2161,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':2168,'multiline':False]
['text':'*
 * Word Break constants.
 * (UWordBreak is a pre-existing enum type in ubrk.h for word break status tags.)
 *
 * @see UCHAR_WORD_BREAK
 * @stable ICU 3.4
 ','line_number':2171,'multiline':True]
['text':'
     * Note: UWordBreakValues constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_WB_<Unicode Word_Break value name>
     ','line_number':2179,'multiline':True]
['text':'[XX]','line_number':2185,'multiline':True]
['text':'[LE]','line_number':2186,'multiline':True]
['text':'[FO]','line_number':2187,'multiline':True]
['text':'[KA]','line_number':2188,'multiline':True]
['text':'[ML]','line_number':2189,'multiline':True]
['text':'[MN]','line_number':2190,'multiline':True]
['text':'[NU]','line_number':2191,'multiline':True]
['text':'[EX]','line_number':2192,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':2193,'multiline':True]
['text':'[CR]','line_number':2194,'multiline':True]
['text':' from here on: new in Unicode 5.1/ICU 4.0 ','line_number':2194,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':2195,'multiline':True]
['text':'[Extend]','line_number':2196,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':2197,'multiline':True]
['text':'[LF]','line_number':2198,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':2199,'multiline':True]
['text':'[MB]','line_number':2200,'multiline':True]
['text':'* @stable ICU 4.0 ','line_number':2201,'multiline':True]
['text':'[NL]','line_number':2202,'multiline':True]
['text':'* @stable ICU 50 ','line_number':2203,'multiline':True]
['text':'[RI]','line_number':2204,'multiline':True]
['text':' new in Unicode 6.2/ICU 50 ','line_number':2204,'multiline':True]
['text':'* @stable ICU 52 ','line_number':2205,'multiline':True]
['text':'[HL]','line_number':2206,'multiline':True]
['text':' from here on: new in Unicode 6.3/ICU 52 ','line_number':2206,'multiline':True]
['text':'* @stable ICU 52 ','line_number':2207,'multiline':True]
['text':'[SQ]','line_number':2208,'multiline':True]
['text':'* @stable ICU 52 ','line_number':2209,'multiline':True]
['text':'[DQ]','line_number':2210,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2211,'multiline':True]
['text':'[EB]','line_number':2212,'multiline':True]
['text':' from here on: new in Unicode 9.0/ICU 58 ','line_number':2212,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2213,'multiline':True]
['text':'[EBG]','line_number':2214,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2215,'multiline':True]
['text':'[EM]','line_number':2216,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2217,'multiline':True]
['text':'[GAZ]','line_number':2218,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2219,'multiline':True]
['text':'[ZWJ]','line_number':2220,'multiline':True]
['text':'* @stable ICU 62 ','line_number':2221,'multiline':True]
['text':'[WSEGSPACE]','line_number':2222,'multiline':True]
['text':'*
     * One more than the highest normal UWordBreakValues value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_WORD_BREAK).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':2225,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':2232,'multiline':False]
['text':'*
 * Sentence Break constants.
 *
 * @see UCHAR_SENTENCE_BREAK
 * @stable ICU 3.4
 ','line_number':2235,'multiline':True]
['text':'
     * Note: USentenceBreak constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_SB_<Unicode Sentence_Break value name>
     ','line_number':2242,'multiline':True]
['text':'[XX]','line_number':2248,'multiline':True]
['text':'[AT]','line_number':2249,'multiline':True]
['text':'[CL]','line_number':2250,'multiline':True]
['text':'[FO]','line_number':2251,'multiline':True]
['text':'[LO]','line_number':2252,'multiline':True]
['text':'[NU]','line_number':2253,'multiline':True]
['text':'[LE]','line_number':2254,'multiline':True]
['text':'[SE]','line_number':2255,'multiline':True]
['text':'[SP]','line_number':2256,'multiline':True]
['text':'[ST]','line_number':2257,'multiline':True]
['text':'[UP]','line_number':2258,'multiline':True]
['text':'[CR]','line_number':2259,'multiline':True]
['text':' from here on: new in Unicode 5.1/ICU 4.0 ','line_number':2259,'multiline':True]
['text':'[EX]','line_number':2260,'multiline':True]
['text':'[LF]','line_number':2261,'multiline':True]
['text':'[SC]','line_number':2262,'multiline':True]
['text':'*
     * One more than the highest normal USentenceBreak value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_SENTENCE_BREAK).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':2264,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':2271,'multiline':False]
['text':'*
 * Line Break constants.
 *
 * @see UCHAR_LINE_BREAK
 * @stable ICU 2.2
 ','line_number':2274,'multiline':True]
['text':'
     * Note: ULineBreak constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_LB_<Unicode Line_Break value name>
     ','line_number':2281,'multiline':True]
['text':'[XX]','line_number':2287,'multiline':True]
['text':'[AI]','line_number':2288,'multiline':True]
['text':'[AL]','line_number':2289,'multiline':True]
['text':'[B2]','line_number':2290,'multiline':True]
['text':'[BA]','line_number':2291,'multiline':True]
['text':'[BB]','line_number':2292,'multiline':True]
['text':'[BK]','line_number':2293,'multiline':True]
['text':'[CB]','line_number':2294,'multiline':True]
['text':'[CL]','line_number':2295,'multiline':True]
['text':'[CM]','line_number':2296,'multiline':True]
['text':'[CR]','line_number':2297,'multiline':True]
['text':'[EX]','line_number':2298,'multiline':True]
['text':'[GL]','line_number':2299,'multiline':True]
['text':'[HY]','line_number':2300,'multiline':True]
['text':'[ID]','line_number':2301,'multiline':True]
['text':'* Renamed from the misspelled "inseperable" in Unicode 4.0.1/ICU 3.0 @stable ICU 3.0 ','line_number':2302,'multiline':True]
['text':'[IN]','line_number':2303,'multiline':True]
['text':'[IS]','line_number':2305,'multiline':True]
['text':'[LF]','line_number':2306,'multiline':True]
['text':'[NS]','line_number':2307,'multiline':True]
['text':'[NU]','line_number':2308,'multiline':True]
['text':'[OP]','line_number':2309,'multiline':True]
['text':'[PO]','line_number':2310,'multiline':True]
['text':'[PR]','line_number':2311,'multiline':True]
['text':'[QU]','line_number':2312,'multiline':True]
['text':'[SA]','line_number':2313,'multiline':True]
['text':'[SG]','line_number':2314,'multiline':True]
['text':'[SP]','line_number':2315,'multiline':True]
['text':'[SY]','line_number':2316,'multiline':True]
['text':'[ZW]','line_number':2317,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':2318,'multiline':True]
['text':'[NL]','line_number':2319,'multiline':True]
['text':' from here on: new in Unicode 4/ICU 2.6 ','line_number':2319,'multiline':True]
['text':'* @stable ICU 2.6 ','line_number':2320,'multiline':True]
['text':'[WJ]','line_number':2321,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':2322,'multiline':True]
['text':'[H2]','line_number':2323,'multiline':True]
['text':' from here on: new in Unicode 4.1/ICU 3.4 ','line_number':2323,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':2324,'multiline':True]
['text':'[H3]','line_number':2325,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':2326,'multiline':True]
['text':'[JL]','line_number':2327,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':2328,'multiline':True]
['text':'[JT]','line_number':2329,'multiline':True]
['text':'* @stable ICU 3.4 ','line_number':2330,'multiline':True]
['text':'[JV]','line_number':2331,'multiline':True]
['text':'* @stable ICU 4.4 ','line_number':2332,'multiline':True]
['text':'[CP]','line_number':2333,'multiline':True]
['text':' new in Unicode 5.2/ICU 4.4 ','line_number':2333,'multiline':True]
['text':'* @stable ICU 49 ','line_number':2334,'multiline':True]
['text':'[CJ]','line_number':2335,'multiline':True]
['text':' new in Unicode 6.1/ICU 49 ','line_number':2335,'multiline':True]
['text':'* @stable ICU 49 ','line_number':2336,'multiline':True]
['text':'[HL]','line_number':2337,'multiline':True]
['text':' new in Unicode 6.1/ICU 49 ','line_number':2337,'multiline':True]
['text':'* @stable ICU 50 ','line_number':2338,'multiline':True]
['text':'[RI]','line_number':2339,'multiline':True]
['text':' new in Unicode 6.2/ICU 50 ','line_number':2339,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2340,'multiline':True]
['text':'[EB]','line_number':2341,'multiline':True]
['text':' from here on: new in Unicode 9.0/ICU 58 ','line_number':2341,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2342,'multiline':True]
['text':'[EM]','line_number':2343,'multiline':True]
['text':'* @stable ICU 58 ','line_number':2344,'multiline':True]
['text':'[ZWJ]','line_number':2345,'multiline':True]
['text':'*
     * One more than the highest normal ULineBreak value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_LINE_BREAK).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':2347,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':2354,'multiline':False]
['text':'*
 * Numeric Type constants.
 *
 * @see UCHAR_NUMERIC_TYPE
 * @stable ICU 2.2
 ','line_number':2357,'multiline':True]
['text':'
     * Note: UNumericType constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_NT_<Unicode Numeric_Type value name>
     ','line_number':2364,'multiline':True]
['text':'[None]','line_number':2370,'multiline':True]
['text':'[de]','line_number':2371,'multiline':True]
['text':'[di]','line_number':2372,'multiline':True]
['text':'[nu]','line_number':2373,'multiline':True]
['text':'*
     * One more than the highest normal UNumericType value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_NUMERIC_TYPE).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':2375,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':2382,'multiline':False]
['text':'*
 * Hangul Syllable Type constants.
 *
 * @see UCHAR_HANGUL_SYLLABLE_TYPE
 * @stable ICU 2.6
 ','line_number':2385,'multiline':True]
['text':'
     * Note: UHangulSyllableType constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_HST_<Unicode Hangul_Syllable_Type value name>
     ','line_number':2392,'multiline':True]
['text':'[NA]','line_number':2398,'multiline':True]
['text':'[L]','line_number':2399,'multiline':True]
['text':'[V]','line_number':2400,'multiline':True]
['text':'[T]','line_number':2401,'multiline':True]
['text':'[LV]','line_number':2402,'multiline':True]
['text':'[LVT]','line_number':2403,'multiline':True]
['text':'*
     * One more than the highest normal UHangulSyllableType value.
     * The highest value is available via u_getIntPropertyMaxValue(UCHAR_HANGUL_SYLLABLE_TYPE).
     *
     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.
     ','line_number':2405,'multiline':True]
['text':' U_HIDE_DEPRECATED_API','line_number':2412,'multiline':False]
['text':'*
 * Indic Positional Category constants.
 *
 * @see UCHAR_INDIC_POSITIONAL_CATEGORY
 * @stable ICU 63
 ','line_number':2415,'multiline':True]
['text':'
     * Note: UIndicPositionalCategory constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_INPC_<Unicode Indic_Positional_Category value name>
     ','line_number':2422,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2428,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2430,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2432,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2434,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2436,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2438,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2440,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2442,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2444,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2446,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2448,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2450,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2452,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2454,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2456,'multiline':True]
['text':'* @stable ICU 66 ','line_number':2458,'multiline':True]
['text':'*
 * Indic Syllabic Category constants.
 *
 * @see UCHAR_INDIC_SYLLABIC_CATEGORY
 * @stable ICU 63
 ','line_number':2462,'multiline':True]
['text':'
     * Note: UIndicSyllabicCategory constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_INSC_<Unicode Indic_Syllabic_Category value name>
     ','line_number':2469,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2475,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2477,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2479,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2481,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2483,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2485,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2487,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2489,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2491,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2493,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2495,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2497,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2499,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2501,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2503,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2505,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2507,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2509,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2511,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2513,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2515,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2517,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2519,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2521,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2523,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2525,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2527,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2529,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2531,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2533,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2535,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2537,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2539,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2541,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2543,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2545,'multiline':True]
['text':'*
 * Vertical Orientation constants.
 *
 * @see UCHAR_VERTICAL_ORIENTATION
 * @stable ICU 63
 ','line_number':2549,'multiline':True]
['text':'
     * Note: UVerticalOrientation constants are parsed by preparseucd.py.
     * It matches lines like
     *     U_VO_<Unicode Vertical_Orientation value name>
     ','line_number':2556,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2562,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2564,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2566,'multiline':True]
['text':'* @stable ICU 63 ','line_number':2568,'multiline':True]
['text':'*
 * Check a binary Unicode property for a code point.
 *
 * Unicode, especially in version 3.2, defines many more properties than the
 * original set in UnicodeData.txt.
 *
 * The properties APIs are intended to reflect Unicode properties as defined
 * in the Unicode Character Database (UCD) and Unicode Technical Reports (UTR).
 * For details about the properties see http://www.unicode.org/ucd/ .
 * For names of Unicode properties see the UCD file PropertyAliases.txt.
 *
 * Important: If ICU is built with UCD files from Unicode versions below 3.2,
 * then properties marked with "new in Unicode 3.2" are not or not fully available.
 *
 * @param c Code point to test.
 * @param which UProperty selector constant, identifies which binary property to check.
 *        Must be UCHAR_BINARY_START<=which<UCHAR_BINARY_LIMIT.
 * @return true or false according to the binary Unicode property value for c.
 *         Also false if 'which' is out of bounds or if the Unicode version
 *         does not have data for the property at all, or not for this code point.
 *
 * @see UProperty
 * @see u_getBinaryPropertySet
 * @see u_getIntPropertyValue
 * @see u_getUnicodeVersion
 * @stable ICU 2.1
 ','line_number':2572,'multiline':True]
['text':'*
 * Returns a frozen USet for a binary property.
 * The library retains ownership over the returned object.
 * Sets an error code if the property number is not one for a binary property.
 *
 * The returned set contains all code points for which the property is true.
 *
 * @param property UCHAR_BINARY_START..UCHAR_BINARY_LIMIT-1
 * @param pErrorCode an in/out ICU UErrorCode
 * @return the property as a set
 * @see UProperty
 * @see u_hasBinaryProperty
 * @see Unicode::fromUSet
 * @stable ICU 63
 ','line_number':2602,'multiline':True]
['text':'*
 * Check if a code point has the Alphabetic Unicode property.
 * Same as u_hasBinaryProperty(c, UCHAR_ALPHABETIC).
 * This is different from u_isalpha!
 * @param c Code point to test
 * @return true if the code point has the Alphabetic Unicode property, false otherwise
 *
 * @see UCHAR_ALPHABETIC
 * @see u_isalpha
 * @see u_hasBinaryProperty
 * @stable ICU 2.1
 ','line_number':2620,'multiline':True]
['text':'*
 * Check if a code point has the Lowercase Unicode property.
 * Same as u_hasBinaryProperty(c, UCHAR_LOWERCASE).
 * This is different from u_islower!
 * @param c Code point to test
 * @return true if the code point has the Lowercase Unicode property, false otherwise
 *
 * @see UCHAR_LOWERCASE
 * @see u_islower
 * @see u_hasBinaryProperty
 * @stable ICU 2.1
 ','line_number':2635,'multiline':True]
['text':'*
 * Check if a code point has the Uppercase Unicode property.
 * Same as u_hasBinaryProperty(c, UCHAR_UPPERCASE).
 * This is different from u_isupper!
 * @param c Code point to test
 * @return true if the code point has the Uppercase Unicode property, false otherwise
 *
 * @see UCHAR_UPPERCASE
 * @see u_isupper
 * @see u_hasBinaryProperty
 * @stable ICU 2.1
 ','line_number':2650,'multiline':True]
['text':'*
 * Check if a code point has the White_Space Unicode property.
 * Same as u_hasBinaryProperty(c, UCHAR_WHITE_SPACE).
 * This is different from both u_isspace and u_isWhitespace!
 *
 * Note: There are several ICU whitespace functions; please see the uchar.h
 * file documentation for a detailed comparison.
 *
 * @param c Code point to test
 * @return true if the code point has the White_Space Unicode property, false otherwise.
 *
 * @see UCHAR_WHITE_SPACE
 * @see u_isWhitespace
 * @see u_isspace
 * @see u_isJavaSpaceChar
 * @see u_hasBinaryProperty
 * @stable ICU 2.1
 ','line_number':2665,'multiline':True]
['text':'*
 * Get the property value for an enumerated or integer Unicode property for a code point.
 * Also returns binary and mask property values.
 *
 * Unicode, especially in version 3.2, defines many more properties than the
 * original set in UnicodeData.txt.
 *
 * The properties APIs are intended to reflect Unicode properties as defined
 * in the Unicode Character Database (UCD) and Unicode Technical Reports (UTR).
 * For details about the properties see http://www.unicode.org/ .
 * For names of Unicode properties see the UCD file PropertyAliases.txt.
 *
 * Sample usage:
 * UEastAsianWidth ea=(UEastAsianWidth)u_getIntPropertyValue(c, UCHAR_EAST_ASIAN_WIDTH);
 * UBool b=(UBool)u_getIntPropertyValue(c, UCHAR_IDEOGRAPHIC);
 *
 * @param c Code point to test.
 * @param which UProperty selector constant, identifies which property to check.
 *        Must be UCHAR_BINARY_START<=which<UCHAR_BINARY_LIMIT
 *        or UCHAR_INT_START<=which<UCHAR_INT_LIMIT
 *        or UCHAR_MASK_START<=which<UCHAR_MASK_LIMIT.
 * @return Numeric value that is directly the property value or,
 *         for enumerated properties, corresponds to the numeric value of the enumerated
 *         constant of the respective property value enumeration type
 *         (cast to enum type if necessary).
 *         Returns 0 or 1 (for false/true) for binary Unicode properties.
 *         Returns a bit-mask for mask properties.
 *         Returns 0 if 'which' is out of bounds or if the Unicode version
 *         does not have data for the property at all, or not for this code point.
 *
 * @see UProperty
 * @see u_hasBinaryProperty
 * @see u_getIntPropertyMinValue
 * @see u_getIntPropertyMaxValue
 * @see u_getIntPropertyMap
 * @see u_getUnicodeVersion
 * @stable ICU 2.2
 ','line_number':2686,'multiline':True]
['text':'*
 * Get the minimum value for an enumerated/integer/binary Unicode property.
 * Can be used together with u_getIntPropertyMaxValue
 * to allocate arrays of UnicodeSet or similar.
 *
 * @param which UProperty selector constant, identifies which binary property to check.
 *        Must be UCHAR_BINARY_START<=which<UCHAR_BINARY_LIMIT
 *        or UCHAR_INT_START<=which<UCHAR_INT_LIMIT.
 * @return Minimum value returned by u_getIntPropertyValue for a Unicode property.
 *         0 if the property selector is out of range.
 *
 * @see UProperty
 * @see u_hasBinaryProperty
 * @see u_getUnicodeVersion
 * @see u_getIntPropertyMaxValue
 * @see u_getIntPropertyValue
 * @stable ICU 2.2
 ','line_number':2727,'multiline':True]
['text':'*
 * Get the maximum value for an enumerated/integer/binary Unicode property.
 * Can be used together with u_getIntPropertyMinValue
 * to allocate arrays of UnicodeSet or similar.
 *
 * Examples for min/max values (for Unicode 3.2):
 *
 * - UCHAR_BIDI_CLASS:    0/18 (U_LEFT_TO_RIGHT/U_BOUNDARY_NEUTRAL)
 * - UCHAR_SCRIPT:        0/45 (USCRIPT_COMMON/USCRIPT_TAGBANWA)
 * - UCHAR_IDEOGRAPHIC:   0/1  (false/true)
 *
 * For undefined UProperty constant values, min/max values will be 0/-1.
 *
 * @param which UProperty selector constant, identifies which binary property to check.
 *        Must be UCHAR_BINARY_START<=which<UCHAR_BINARY_LIMIT
 *        or UCHAR_INT_START<=which<UCHAR_INT_LIMIT.
 * @return Maximum value returned by u_getIntPropertyValue for a Unicode property.
 *         <=0 if the property selector is out of range.
 *
 * @see UProperty
 * @see u_hasBinaryProperty
 * @see u_getUnicodeVersion
 * @see u_getIntPropertyMaxValue
 * @see u_getIntPropertyValue
 * @stable ICU 2.2
 ','line_number':2748,'multiline':True]
['text':'*
 * Returns an immutable UCPMap for an enumerated/catalog/int-valued property.
 * The library retains ownership over the returned object.
 * Sets an error code if the property number is not one for an "int property".
 *
 * The returned object maps all Unicode code points to their values for that property.
 * For documentation of the integer values see u_getIntPropertyValue().
 *
 * @param property UCHAR_INT_START..UCHAR_INT_LIMIT-1
 * @param pErrorCode an in/out ICU UErrorCode
 * @return the property as a map
 * @see UProperty
 * @see u_getIntPropertyValue
 * @stable ICU 63
 ','line_number':2777,'multiline':True]
['text':'*
 * Get the numeric value for a Unicode code point as defined in the
 * Unicode Character Database.
 *
 * A "double" return type is necessary because
 * some numeric values are fractions, negative, or too large for int32_t.
 *
 * For characters without any numeric values in the Unicode Character Database,
 * this function will return U_NO_NUMERIC_VALUE.
 * Note: This is different from the Unicode Standard which specifies NaN as the default value.
 * (NaN is not available on all platforms.)
 *
 * Similar to java.lang.Character.getNumericValue(), but u_getNumericValue()
 * also supports negative values, large values, and fractions,
 * while Java's getNumericValue() returns values 10..35 for ASCII letters.
 *
 * @param c Code point to get the numeric value for.
 * @return Numeric value of c, or U_NO_NUMERIC_VALUE if none is defined.
 *
 * @see U_NO_NUMERIC_VALUE
 * @stable ICU 2.2
 ','line_number':2795,'multiline':True]
['text':'*
 * Special value that is returned by u_getNumericValue when
 * no numeric value is defined for a code point.
 *
 * @see u_getNumericValue
 * @stable ICU 2.2
 ','line_number':2820,'multiline':True]
['text':'*
 * Determines whether the specified code point has the general category "Ll"
 * (lowercase letter).
 *
 * Same as java.lang.Character.isLowerCase().
 *
 * This misses some characters that are also lowercase but
 * have a different general category value.
 * In order to include those, use UCHAR_LOWERCASE.
 *
 * In addition to being equivalent to a Java function, this also serves
 * as a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is an Ll lowercase letter
 *
 * @see UCHAR_LOWERCASE
 * @see u_isupper
 * @see u_istitle
 * @stable ICU 2.0
 ','line_number':2829,'multiline':True]
['text':'*
 * Determines whether the specified code point has the general category "Lu"
 * (uppercase letter).
 *
 * Same as java.lang.Character.isUpperCase().
 *
 * This misses some characters that are also uppercase but
 * have a different general category value.
 * In order to include those, use UCHAR_UPPERCASE.
 *
 * In addition to being equivalent to a Java function, this also serves
 * as a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is an Lu uppercase letter
 *
 * @see UCHAR_UPPERCASE
 * @see u_islower
 * @see u_istitle
 * @see u_tolower
 * @stable ICU 2.0
 ','line_number':2855,'multiline':True]
['text':'*
 * Determines whether the specified code point is a titlecase letter.
 * True for general category "Lt" (titlecase letter).
 *
 * Same as java.lang.Character.isTitleCase().
 *
 * @param c the code point to be tested
 * @return true if the code point is an Lt titlecase letter
 *
 * @see u_isupper
 * @see u_islower
 * @see u_totitle
 * @stable ICU 2.0
 ','line_number':2882,'multiline':True]
['text':'*
 * Determines whether the specified code point is a digit character according to Java.
 * True for characters with general category "Nd" (decimal digit numbers).
 * Beginning with Unicode 4, this is the same as
 * testing for the Numeric_Type of Decimal.
 *
 * Same as java.lang.Character.isDigit().
 *
 * In addition to being equivalent to a Java function, this also serves
 * as a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a digit character according to Character.isDigit()
 *
 * @stable ICU 2.0
 ','line_number':2899,'multiline':True]
['text':'*
 * Determines whether the specified code point is a letter character.
 * True for general categories "L" (letters).
 *
 * Same as java.lang.Character.isLetter().
 *
 * In addition to being equivalent to a Java function, this also serves
 * as a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a letter character
 *
 * @see u_isdigit
 * @see u_isalnum
 * @stable ICU 2.0
 ','line_number':2920,'multiline':True]
['text':'*
 * Determines whether the specified code point is an alphanumeric character
 * (letter or digit) according to Java.
 * True for characters with general categories
 * "L" (letters) and "Nd" (decimal digit numbers).
 *
 * Same as java.lang.Character.isLetterOrDigit().
 *
 * In addition to being equivalent to a Java function, this also serves
 * as a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is an alphanumeric character according to Character.isLetterOrDigit()
 *
 * @stable ICU 2.0
 ','line_number':2941,'multiline':True]
['text':'*
 * Determines whether the specified code point is a hexadecimal digit.
 * This is equivalent to u_digit(c, 16)>=0.
 * True for characters with general category "Nd" (decimal digit numbers)
 * as well as Latin letters a-f and A-F in both ASCII and Fullwidth ASCII.
 * (That is, for letters with code points
 * 0041..0046, 0061..0066, FF21..FF26, FF41..FF46.)
 *
 * In order to narrow the definition of hexadecimal digits to only ASCII
 * characters, use (c<=0x7f && u_isxdigit(c)).
 *
 * This is a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a hexadecimal digit
 *
 * @stable ICU 2.6
 ','line_number':2962,'multiline':True]
['text':'*
 * Determines whether the specified code point is a punctuation character.
 * True for characters with general categories "P" (punctuation).
 *
 * This is a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a punctuation character
 *
 * @stable ICU 2.6
 ','line_number':2985,'multiline':True]
['text':'*
 * Determines whether the specified code point is a "graphic" character
 * (printable, excluding spaces).
 * true for all characters except those with general categories
 * "Cc" (control codes), "Cf" (format controls), "Cs" (surrogates),
 * "Cn" (unassigned), and "Z" (separators).
 *
 * This is a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a "graphic" character
 *
 * @stable ICU 2.6
 ','line_number':3001,'multiline':True]
['text':'*
 * Determines whether the specified code point is a "blank" or "horizontal space",
 * a character that visibly separates words on a line.
 * The following are equivalent definitions:
 *
 * true for Unicode White_Space characters except for "vertical space controls"
 * where "vertical space controls" are the following characters:
 * U+000A (LF) U+000B (VT) U+000C (FF) U+000D (CR) U+0085 (NEL) U+2028 (LS) U+2029 (PS)
 *
 * same as
 *
 * true for U+0009 (TAB) and characters with general category "Zs" (space separators).
 *
 * Note: There are several ICU whitespace functions; please see the uchar.h
 * file documentation for a detailed comparison.
 *
 * This is a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a "blank"
 *
 * @stable ICU 2.6
 ','line_number':3020,'multiline':True]
['text':'*
 * Determines whether the specified code point is "defined",
 * which usually means that it is assigned a character.
 * True for general categories other than "Cn" (other, not assigned),
 * i.e., true for all code points mentioned in UnicodeData.txt.
 *
 * Note that non-character code points (e.g., U+FDD0) are not "defined"
 * (they are Cn), but surrogate code points are "defined" (Cs).
 *
 * Same as java.lang.Character.isDefined().
 *
 * @param c the code point to be tested
 * @return true if the code point is assigned a character
 *
 * @see u_isdigit
 * @see u_isalpha
 * @see u_isalnum
 * @see u_isupper
 * @see u_islower
 * @see u_istitle
 * @stable ICU 2.0
 ','line_number':3048,'multiline':True]
['text':'*
 * Determines if the specified character is a space character or not.
 *
 * Note: There are several ICU whitespace functions; please see the uchar.h
 * file documentation for a detailed comparison.
 *
 * This is a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c    the character to be tested
 * @return  true if the character is a space character; false otherwise.
 *
 * @see u_isJavaSpaceChar
 * @see u_isWhitespace
 * @see u_isUWhiteSpace
 * @stable ICU 2.0
 ','line_number':3073,'multiline':True]
['text':'*
 * Determine if the specified code point is a space character according to Java.
 * True for characters with general categories "Z" (separators),
 * which does not include control codes (e.g., TAB or Line Feed).
 *
 * Same as java.lang.Character.isSpaceChar().
 *
 * Note: There are several ICU whitespace functions; please see the uchar.h
 * file documentation for a detailed comparison.
 *
 * @param c the code point to be tested
 * @return true if the code point is a space character according to Character.isSpaceChar()
 *
 * @see u_isspace
 * @see u_isWhitespace
 * @see u_isUWhiteSpace
 * @stable ICU 2.6
 ','line_number':3094,'multiline':True]
['text':'*
 * Determines if the specified code point is a whitespace character according to Java/ICU.
 * A character is considered to be a Java whitespace character if and only
 * if it satisfies one of the following criteria:
 *
 * - It is a Unicode Separator character (categories "Z" = "Zs" or "Zl" or "Zp"), but is not
 *      also a non-breaking space (U+00A0 NBSP or U+2007 Figure Space or U+202F Narrow NBSP).
 * - It is U+0009 HORIZONTAL TABULATION.
 * - It is U+000A LINE FEED.
 * - It is U+000B VERTICAL TABULATION.
 * - It is U+000C FORM FEED.
 * - It is U+000D CARRIAGE RETURN.
 * - It is U+001C FILE SEPARATOR.
 * - It is U+001D GROUP SEPARATOR.
 * - It is U+001E RECORD SEPARATOR.
 * - It is U+001F UNIT SEPARATOR.
 *
 * This API tries to sync with the semantics of Java's
 * java.lang.Character.isWhitespace(), but it may not return
 * the exact same results because of the Unicode version
 * difference.
 *
 * Note: Unicode 4.0.1 changed U+200B ZERO WIDTH SPACE from a Space Separator (Zs)
 * to a Format Control (Cf). Since then, isWhitespace(0x200b) returns false.
 * See http://www.unicode.org/versions/Unicode4.0.1/
 *
 * Note: There are several ICU whitespace functions; please see the uchar.h
 * file documentation for a detailed comparison.
 *
 * @param c the code point to be tested
 * @return true if the code point is a whitespace character according to Java/ICU
 *
 * @see u_isspace
 * @see u_isJavaSpaceChar
 * @see u_isUWhiteSpace
 * @stable ICU 2.0
 ','line_number':3115,'multiline':True]
['text':'*
 * Determines whether the specified code point is a control character
 * (as defined by this function).
 * A control character is one of the following:
 * - ISO 8-bit control character (U+0000..U+001f and U+007f..U+009f)
 * - U_CONTROL_CHAR (Cc)
 * - U_FORMAT_CHAR (Cf)
 * - U_LINE_SEPARATOR (Zl)
 * - U_PARAGRAPH_SEPARATOR (Zp)
 *
 * This is a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a control character
 *
 * @see UCHAR_DEFAULT_IGNORABLE_CODE_POINT
 * @see u_isprint
 * @stable ICU 2.0
 ','line_number':3155,'multiline':True]
['text':'*
 * Determines whether the specified code point is an ISO control code.
 * True for U+0000..U+001f and U+007f..U+009f (general category "Cc").
 *
 * Same as java.lang.Character.isISOControl().
 *
 * @param c the code point to be tested
 * @return true if the code point is an ISO control code
 *
 * @see u_iscntrl
 * @stable ICU 2.6
 ','line_number':3179,'multiline':True]
['text':'*
 * Determines whether the specified code point is a printable character.
 * True for general categories <em>other</em> than "C" (controls).
 *
 * This is a C/POSIX migration function.
 * See the comments about C/POSIX character classification functions in the
 * documentation at the top of this header file.
 *
 * @param c the code point to be tested
 * @return true if the code point is a printable character
 *
 * @see UCHAR_DEFAULT_IGNORABLE_CODE_POINT
 * @see u_iscntrl
 * @stable ICU 2.0
 ','line_number':3194,'multiline':True]
['text':'*
 * Non-standard: Determines whether the specified code point is a base character.
 * True for general categories "L" (letters), "N" (numbers),
 * "Mc" (spacing combining marks), and "Me" (enclosing marks).
 *
 * Note that this is different from the Unicode Standard definition in
 * chapter 3.6, conformance clause D51 âBase characterâ,
 * which defines base characters as the code points with general categories
 * Letter (L), Number (N), Punctuation (P), Symbol (S), or Space Separator (Zs).
 *
 * @param c the code point to be tested
 * @return true if the code point is a base character according to this function
 *
 * @see u_isalpha
 * @see u_isdigit
 * @stable ICU 2.0
 ','line_number':3212,'multiline':True]
['text':'*
 * Returns the bidirectional category value for the code point,
 * which is used in the Unicode bidirectional algorithm
 * (UAX #9 http://www.unicode.org/reports/tr9/).
 * Note that some <em>unassigned</em> code points have bidi values
 * of R or AL because they are in blocks that are reserved
 * for Right-To-Left scripts.
 *
 * Same as java.lang.Character.getDirectionality()
 *
 * @param c the code point to be tested
 * @return the bidirectional category (UCharDirection) value
 *
 * @see UCharDirection
 * @stable ICU 2.0
 ','line_number':3232,'multiline':True]
['text':'*
 * Determines whether the code point has the Bidi_Mirrored property.
 * This property is set for characters that are commonly used in
 * Right-To-Left contexts and need to be displayed with a "mirrored"
 * glyph.
 *
 * Same as java.lang.Character.isMirrored().
 * Same as UCHAR_BIDI_MIRRORED
 *
 * @param c the code point to be tested
 * @return true if the character has the Bidi_Mirrored property
 *
 * @see UCHAR_BIDI_MIRRORED
 * @stable ICU 2.0
 ','line_number':3251,'multiline':True]
['text':'*
 * Maps the specified character to a "mirror-image" character.
 * For characters with the Bidi_Mirrored property, implementations
 * sometimes need a "poor man's" mapping to another Unicode
 * character (code point) such that the default glyph may serve
 * as the mirror-image of the default glyph of the specified
 * character. This is useful for text conversion to and from
 * codepages with visual order, and for displays without glyph
 * selection capabilities.
 *
 * @param c the code point to be mapped
 * @return another Unicode code point that may serve as a mirror-image
 *         substitute, or c itself if there is no such mapping or c
 *         does not have the Bidi_Mirrored property
 *
 * @see UCHAR_BIDI_MIRRORED
 * @see u_isMirrored
 * @stable ICU 2.0
 ','line_number':3269,'multiline':True]
['text':'*
 * Maps the specified character to its paired bracket character.
 * For Bidi_Paired_Bracket_Type!=None, this is the same as u_charMirror().
 * Otherwise c itself is returned.
 * See http://www.unicode.org/reports/tr9/
 *
 * @param c the code point to be mapped
 * @return the paired bracket code point,
 *         or c itself if there is no such mapping
 *         (Bidi_Paired_Bracket_Type=None)
 *
 * @see UCHAR_BIDI_PAIRED_BRACKET
 * @see UCHAR_BIDI_PAIRED_BRACKET_TYPE
 * @see u_charMirror
 * @stable ICU 52
 ','line_number':3291,'multiline':True]
['text':'*
 * Returns the general category value for the code point.
 *
 * Same as java.lang.Character.getType().
 *
 * @param c the code point to be tested
 * @return the general category (UCharCategory) value
 *
 * @see UCharCategory
 * @stable ICU 2.0
 ','line_number':3310,'multiline':True]
['text':'*
 * Get a single-bit bit set for the general category of a character.
 * This bit set can be compared bitwise with U_GC_SM_MASK, U_GC_L_MASK, etc.
 * Same as U_MASK(u_charType(c)).
 *
 * @param c the code point to be tested
 * @return a single-bit mask corresponding to the general category (UCharCategory) value
 *
 * @see u_charType
 * @see UCharCategory
 * @see U_GC_CN_MASK
 * @stable ICU 2.1
 ','line_number':3324,'multiline':True]
['text':'*
 * Callback from u_enumCharTypes(), is called for each contiguous range
 * of code points c (where start<=c<limit)
 * with the same Unicode general category ("character type").
 *
 * The callback function can stop the enumeration by returning false.
 *
 * @param context an opaque pointer, as passed into utrie_enum()
 * @param start the first code point in a contiguous range with value
 * @param limit one past the last code point in a contiguous range with value
 * @param type the general category for all code points in [start..limit[
 * @return false to stop the enumeration
 *
 * @stable ICU 2.1
 * @see UCharCategory
 * @see u_enumCharTypes
 ','line_number':3339,'multiline':True]
['text':'*
 * Enumerate efficiently all code points with their Unicode general categories.
 *
 * This is useful for building data structures (e.g., UnicodeSet's),
 * for enumerating all assigned code points (type!=U_UNASSIGNED), etc.
 *
 * For each contiguous range of code points with a given general category ("character type"),
 * the UCharEnumTypeRange function is called.
 * Adjacent ranges have different types.
 * The Unicode Standard guarantees that the numeric value of the type is 0..31.
 *
 * @param enumRange a pointer to a function that is called for each contiguous range
 *                  of code points with the same general category
 * @param context an opaque pointer that is passed on to the callback function
 *
 * @stable ICU 2.1
 * @see UCharCategory
 * @see UCharEnumTypeRange
 ','line_number':3359,'multiline':True]
['text':'*
 * Returns the combining class of the code point as specified in UnicodeData.txt.
 *
 * @param c the code point of the character
 * @return the combining class of the character
 * @stable ICU 2.0
 ','line_number':3383,'multiline':True]
['text':'*
 * Returns the decimal digit value of a decimal digit character.
 * Such characters have the general category "Nd" (decimal digit numbers)
 * and a Numeric_Type of Decimal.
 *
 * Unlike ICU releases before 2.6, no digit values are returned for any
 * Han characters because Han number characters are often used with a special
 * Chinese-style number format (with characters for powers of 10 in between)
 * instead of in decimal-positional notation.
 * Unicode 4 explicitly assigns Han number characters the Numeric_Type
 * Numeric instead of Decimal.
 * See Jitterbug 1483 for more details.
 *
 * Use u_getIntPropertyValue(c, UCHAR_NUMERIC_TYPE) and u_getNumericValue()
 * for complete numeric Unicode properties.
 *
 * @param c the code point for which to get the decimal digit value
 * @return the decimal digit value of c,
 *         or -1 if c is not a decimal digit character
 *
 * @see u_getNumericValue
 * @stable ICU 2.0
 ','line_number':3395,'multiline':True]
['text':'*
 * Returns the Unicode allocation block that contains the character.
 *
 * @param c the code point to be tested
 * @return the block value (UBlockCode) for c
 *
 * @see UBlockCode
 * @stable ICU 2.0
 ','line_number':3421,'multiline':True]
['text':'*
 * Retrieve the name of a Unicode character.
 * Depending on <code>nameChoice</code>, the character name written
 * into the buffer is the "modern" name or the name that was defined
 * in Unicode version 1.0.
 * The name contains only "invariant" characters
 * like A-Z, 0-9, space, and '-'.
 * Unicode 1.0 names are only retrieved if they are different from the modern
 * names and if the data file contains the data for them. gennames may or may
 * not be called with a command line option to include 1.0 names in unames.dat.
 *
 * @param code The character (code point) for which to get the name.
 *             It must be <code>0<=code<=0x10ffff</code>.
 * @param nameChoice Selector for which name to get.
 * @param buffer Destination address for copying the name.
 *               The name will always be zero-terminated.
 *               If there is no name, then the buffer will be set to the empty string.
 * @param bufferLength <code>==sizeof(buffer)</code>
 * @param pErrorCode Pointer to a UErrorCode variable;
 *        check for <code>U_SUCCESS()</code> after <code>u_charName()</code>
 *        returns.
 * @return The length of the name, or 0 if there is no name for this character.
 *         If the bufferLength is less than or equal to the length, then the buffer
 *         contains the truncated name and the returned length indicates the full
 *         length of the name.
 *         The length does not include the zero-termination.
 *
 * @see UCharNameChoice
 * @see u_charFromName
 * @see u_enumCharNames
 * @stable ICU 2.0
 ','line_number':3433,'multiline':True]
['text':'*
 * Returns an empty string.
 * Used to return the ISO 10646 comment for a character.
 * The Unicode ISO_Comment property is deprecated and has no values.
 *
 * @param c The character (code point) for which to get the ISO comment.
 *             It must be <code>0<=c<=0x10ffff</code>.
 * @param dest Destination address for copying the comment.
 *             The comment will be zero-terminated if possible.
 *             If there is no comment, then the buffer will be set to the empty string.
 * @param destCapacity <code>==sizeof(dest)</code>
 * @param pErrorCode Pointer to a UErrorCode variable;
 *        check for <code>U_SUCCESS()</code> after <code>u_getISOComment()</code>
 *        returns.
 * @return 0
 *
 * @deprecated ICU 49
 ','line_number':3471,'multiline':True]
['text':' U_HIDE_DEPRECATED_API ','line_number':3493,'multiline':True]
['text':'*
 * Find a Unicode character by its name and return its code point value.
 * The name is matched exactly and completely.
 * If the name does not correspond to a code point, <i>pErrorCode</i>
 * is set to <code>U_INVALID_CHAR_FOUND</code>.
 * A Unicode 1.0 name is matched only if it differs from the modern name.
 * Unicode names are all uppercase. Extended names are lowercase followed
 * by an uppercase hexadecimal number, and within angle brackets.
 *
 * @param nameChoice Selector for which name to match.
 * @param name The name to match.
 * @param pErrorCode Pointer to a UErrorCode variable
 * @return The Unicode value of the code point with the given name,
 *         or an undefined value if there is no such code point.
 *
 * @see UCharNameChoice
 * @see u_charName
 * @see u_enumCharNames
 * @stable ICU 1.7
 ','line_number':3495,'multiline':True]
['text':'*
 * Type of a callback function for u_enumCharNames() that gets called
 * for each Unicode character with the code point value and
 * the character name.
 * If such a function returns false, then the enumeration is stopped.
 *
 * @param context The context pointer that was passed to u_enumCharNames().
 * @param code The Unicode code point for the character with this name.
 * @param nameChoice Selector for which kind of names is enumerated.
 * @param name The character's name, zero-terminated.
 * @param length The length of the name.
 * @return true if the enumeration should continue, false to stop it.
 *
 * @see UCharNameChoice
 * @see u_enumCharNames
 * @stable ICU 1.7
 ','line_number':3520,'multiline':True]
['text':'*
 * Enumerate all assigned Unicode characters between the start and limit
 * code points (start inclusive, limit exclusive) and call a function
 * for each, passing the code point value and the character name.
 * For Unicode 1.0 names, only those are enumerated that differ from the
 * modern names.
 *
 * @param start The first code point in the enumeration range.
 * @param limit One more than the last code point in the enumeration range
 *              (the first one after the range).
 * @param fn The function that is to be called for each character name.
 * @param context An arbitrary pointer that is passed to the function.
 * @param nameChoice Selector for which kind of names to enumerate.
 * @param pErrorCode Pointer to a UErrorCode variable
 *
 * @see UCharNameChoice
 * @see UEnumCharNamesFn
 * @see u_charName
 * @see u_charFromName
 * @stable ICU 1.7
 ','line_number':3543,'multiline':True]
['text':'*
 * Return the Unicode name for a given property, as given in the
 * Unicode database file PropertyAliases.txt.
 *
 * In addition, this function maps the property
 * UCHAR_GENERAL_CATEGORY_MASK to the synthetic names "gcm" /
 * "General_Category_Mask".  These names are not in
 * PropertyAliases.txt.
 *
 * @param property UProperty selector other than UCHAR_INVALID_CODE.
 *         If out of range, NULL is returned.
 *
 * @param nameChoice selector for which name to get.  If out of range,
 *         NULL is returned.  All properties have a long name.  Most
 *         have a short name, but some do not.  Unicode allows for
 *         additional names; if present these will be returned by
 *         U_LONG_PROPERTY_NAME + i, where i=1, 2,...
 *
 * @return a pointer to the name, or NULL if either the
 *         property or the nameChoice is out of range.  If a given
 *         nameChoice returns NULL, then all larger values of
 *         nameChoice will return NULL, with one exception: if NULL is
 *         returned for U_SHORT_PROPERTY_NAME, then
 *         U_LONG_PROPERTY_NAME (and higher) may still return a
 *         non-NULL value.  The returned pointer is valid until
 *         u_cleanup() is called.
 *
 * @see UProperty
 * @see UPropertyNameChoice
 * @stable ICU 2.4
 ','line_number':3571,'multiline':True]
['text':'*
 * Return the UProperty enum for a given property name, as specified
 * in the Unicode database file PropertyAliases.txt.  Short, long, and
 * any other variants are recognized.
 *
 * In addition, this function maps the synthetic names "gcm" /
 * "General_Category_Mask" to the property
 * UCHAR_GENERAL_CATEGORY_MASK.  These names are not in
 * PropertyAliases.txt.
 *
 * @param alias the property name to be matched.  The name is compared
 *         using "loose matching" as described in PropertyAliases.txt.
 *
 * @return a UProperty enum, or UCHAR_INVALID_CODE if the given name
 *         does not match any property.
 *
 * @see UProperty
 * @stable ICU 2.4
 ','line_number':3606,'multiline':True]
['text':'*
 * Return the Unicode name for a given property value, as given in the
 * Unicode database file PropertyValueAliases.txt.
 *
 * Note: Some of the names in PropertyValueAliases.txt can only be
 * retrieved using UCHAR_GENERAL_CATEGORY_MASK, not
 * UCHAR_GENERAL_CATEGORY.  These include: "C" / "Other", "L" /
 * "Letter", "LC" / "Cased_Letter", "M" / "Mark", "N" / "Number", "P"
 * / "Punctuation", "S" / "Symbol", and "Z" / "Separator".
 *
 * @param property UProperty selector constant.
 *        Must be UCHAR_BINARY_START<=which<UCHAR_BINARY_LIMIT
 *        or UCHAR_INT_START<=which<UCHAR_INT_LIMIT
 *        or UCHAR_MASK_START<=which<UCHAR_MASK_LIMIT.
 *        If out of range, NULL is returned.
 *
 * @param value selector for a value for the given property.  If out
 *         of range, NULL is returned.  In general, valid values range
 *         from 0 up to some maximum.  There are a few exceptions:
 *         (1.) UCHAR_BLOCK values begin at the non-zero value
 *         UBLOCK_BASIC_LATIN.  (2.)  UCHAR_CANONICAL_COMBINING_CLASS
 *         values are not contiguous and range from 0..240.  (3.)
 *         UCHAR_GENERAL_CATEGORY_MASK values are not values of
 *         UCharCategory, but rather mask values produced by
 *         U_GET_GC_MASK().  This allows grouped categories such as
 *         [:L:] to be represented.  Mask values range
 *         non-contiguously from 1..U_GC_P_MASK.
 *
 * @param nameChoice selector for which name to get.  If out of range,
 *         NULL is returned.  All values have a long name.  Most have
 *         a short name, but some do not.  Unicode allows for
 *         additional names; if present these will be returned by
 *         U_LONG_PROPERTY_NAME + i, where i=1, 2,...

 * @return a pointer to the name, or NULL if either the
 *         property or the nameChoice is out of range.  If a given
 *         nameChoice returns NULL, then all larger values of
 *         nameChoice will return NULL, with one exception: if NULL is
 *         returned for U_SHORT_PROPERTY_NAME, then
 *         U_LONG_PROPERTY_NAME (and higher) may still return a
 *         non-NULL value.  The returned pointer is valid until
 *         u_cleanup() is called.
 *
 * @see UProperty
 * @see UPropertyNameChoice
 * @stable ICU 2.4
 ','line_number':3628,'multiline':True]
['text':'*
 * Return the property value integer for a given value name, as
 * specified in the Unicode database file PropertyValueAliases.txt.
 * Short, long, and any other variants are recognized.
 *
 * Note: Some of the names in PropertyValueAliases.txt will only be
 * recognized with UCHAR_GENERAL_CATEGORY_MASK, not
 * UCHAR_GENERAL_CATEGORY.  These include: "C" / "Other", "L" /
 * "Letter", "LC" / "Cased_Letter", "M" / "Mark", "N" / "Number", "P"
 * / "Punctuation", "S" / "Symbol", and "Z" / "Separator".
 *
 * @param property UProperty selector constant.
 *        Must be UCHAR_BINARY_START<=which<UCHAR_BINARY_LIMIT
 *        or UCHAR_INT_START<=which<UCHAR_INT_LIMIT
 *        or UCHAR_MASK_START<=which<UCHAR_MASK_LIMIT.
 *        If out of range, UCHAR_INVALID_CODE is returned.
 *
 * @param alias the value name to be matched.  The name is compared
 *         using "loose matching" as described in
 *         PropertyValueAliases.txt.
 *
 * @return a value integer or UCHAR_INVALID_CODE if the given name
 *         does not match any value of the given property, or if the
 *         property is invalid.  Note: UCHAR_GENERAL_CATEGORY_MASK values
 *         are not values of UCharCategory, but rather mask values
 *         produced by U_GET_GC_MASK().  This allows grouped
 *         categories such as [:L:] to be represented.
 *
 * @see UProperty
 * @stable ICU 2.4
 ','line_number':3680,'multiline':True]
['text':'*
 * Determines if the specified character is permissible as the
 * first character in an identifier according to Unicode
 * (The Unicode Standard, Version 3.0, chapter 5.16 Identifiers).
 * True for characters with general categories "L" (letters) and "Nl" (letter numbers).
 *
 * Same as java.lang.Character.isUnicodeIdentifierStart().
 * Same as UCHAR_ID_START
 *
 * @param c the code point to be tested
 * @return true if the code point may start an identifier
 *
 * @see UCHAR_ID_START
 * @see u_isalpha
 * @see u_isIDPart
 * @stable ICU 2.0
 ','line_number':3715,'multiline':True]
['text':'*
 * Determines if the specified character is permissible
 * in an identifier according to Java.
 * True for characters with general categories "L" (letters),
 * "Nl" (letter numbers), "Nd" (decimal digits),
 * "Mc" and "Mn" (combining marks), "Pc" (connecting punctuation), and
 * u_isIDIgnorable(c).
 *
 * Same as java.lang.Character.isUnicodeIdentifierPart().
 * Almost the same as Unicode's ID_Continue (UCHAR_ID_CONTINUE)
 * except that Unicode recommends to ignore Cf which is less than
 * u_isIDIgnorable(c).
 *
 * @param c the code point to be tested
 * @return true if the code point may occur in an identifier according to Java
 *
 * @see UCHAR_ID_CONTINUE
 * @see u_isIDStart
 * @see u_isIDIgnorable
 * @stable ICU 2.0
 ','line_number':3735,'multiline':True]
['text':'*
 * Determines if the specified character should be regarded
 * as an ignorable character in an identifier,
 * according to Java.
 * True for characters with general category "Cf" (format controls) as well as
 * non-whitespace ISO controls
 * (U+0000..U+0008, U+000E..U+001B, U+007F..U+009F).
 *
 * Same as java.lang.Character.isIdentifierIgnorable().
 *
 * Note that Unicode just recommends to ignore Cf (format controls).
 *
 * @param c the code point to be tested
 * @return true if the code point is ignorable in identifiers according to Java
 *
 * @see UCHAR_DEFAULT_IGNORABLE_CODE_POINT
 * @see u_isIDStart
 * @see u_isIDPart
 * @stable ICU 2.0
 ','line_number':3759,'multiline':True]
['text':'*
 * Determines if the specified character is permissible as the
 * first character in a Java identifier.
 * In addition to u_isIDStart(c), true for characters with
 * general categories "Sc" (currency symbols) and "Pc" (connecting punctuation).
 *
 * Same as java.lang.Character.isJavaIdentifierStart().
 *
 * @param c the code point to be tested
 * @return true if the code point may start a Java identifier
 *
 * @see     u_isJavaIDPart
 * @see     u_isalpha
 * @see     u_isIDStart
 * @stable ICU 2.0
 ','line_number':3782,'multiline':True]
['text':'*
 * Determines if the specified character is permissible
 * in a Java identifier.
 * In addition to u_isIDPart(c), true for characters with
 * general category "Sc" (currency symbols).
 *
 * Same as java.lang.Character.isJavaIdentifierPart().
 *
 * @param c the code point to be tested
 * @return true if the code point may occur in a Java identifier
 *
 * @see     u_isIDIgnorable
 * @see     u_isJavaIDStart
 * @see     u_isalpha
 * @see     u_isdigit
 * @see     u_isIDPart
 * @stable ICU 2.0
 ','line_number':3801,'multiline':True]
['text':'*
 * The given character is mapped to its lowercase equivalent according to
 * UnicodeData.txt; if the character has no lowercase equivalent, the character
 * itself is returned.
 *
 * Same as java.lang.Character.toLowerCase().
 *
 * This function only returns the simple, single-code point case mapping.
 * Full case mappings should be used whenever possible because they produce
 * better results by working on whole strings.
 * They take into account the string context and the language and can map
 * to a result string with a different length as appropriate.
 * Full case mappings are applied by the string case mapping functions,
 * see ustring.h and the UnicodeString class.
 * See also the User Guide chapter on C/POSIX migration:
 * http://icu-project.org/userguide/posix.html#case_mappings
 *
 * @param c the code point to be mapped
 * @return the Simple_Lowercase_Mapping of the code point, if any;
 *         otherwise the code point itself.
 * @stable ICU 2.0
 ','line_number':3822,'multiline':True]
['text':'*
 * The given character is mapped to its uppercase equivalent according to UnicodeData.txt;
 * if the character has no uppercase equivalent, the character itself is
 * returned.
 *
 * Same as java.lang.Character.toUpperCase().
 *
 * This function only returns the simple, single-code point case mapping.
 * Full case mappings should be used whenever possible because they produce
 * better results by working on whole strings.
 * They take into account the string context and the language and can map
 * to a result string with a different length as appropriate.
 * Full case mappings are applied by the string case mapping functions,
 * see ustring.h and the UnicodeString class.
 * See also the User Guide chapter on C/POSIX migration:
 * http://icu-project.org/userguide/posix.html#case_mappings
 *
 * @param c the code point to be mapped
 * @return the Simple_Uppercase_Mapping of the code point, if any;
 *         otherwise the code point itself.
 * @stable ICU 2.0
 ','line_number':3847,'multiline':True]
['text':'*
 * The given character is mapped to its titlecase equivalent
 * according to UnicodeData.txt;
 * if none is defined, the character itself is returned.
 *
 * Same as java.lang.Character.toTitleCase().
 *
 * This function only returns the simple, single-code point case mapping.
 * Full case mappings should be used whenever possible because they produce
 * better results by working on whole strings.
 * They take into account the string context and the language and can map
 * to a result string with a different length as appropriate.
 * Full case mappings are applied by the string case mapping functions,
 * see ustring.h and the UnicodeString class.
 * See also the User Guide chapter on C/POSIX migration:
 * http://icu-project.org/userguide/posix.html#case_mappings
 *
 * @param c the code point to be mapped
 * @return the Simple_Titlecase_Mapping of the code point, if any;
 *         otherwise the code point itself.
 * @stable ICU 2.0
 ','line_number':3872,'multiline':True]
['text':'*
 * The given character is mapped to its case folding equivalent according to
 * UnicodeData.txt and CaseFolding.txt;
 * if the character has no case folding equivalent, the character
 * itself is returned.
 *
 * This function only returns the simple, single-code point case mapping.
 * Full case mappings should be used whenever possible because they produce
 * better results by working on whole strings.
 * They take into account the string context and the language and can map
 * to a result string with a different length as appropriate.
 * Full case mappings are applied by the string case mapping functions,
 * see ustring.h and the UnicodeString class.
 * See also the User Guide chapter on C/POSIX migration:
 * http://icu-project.org/userguide/posix.html#case_mappings
 *
 * @param c the code point to be mapped
 * @param options Either U_FOLD_CASE_DEFAULT or U_FOLD_CASE_EXCLUDE_SPECIAL_I
 * @return the Simple_Case_Folding of the code point, if any;
 *         otherwise the code point itself.
 * @stable ICU 2.0
 ','line_number':3897,'multiline':True]
['text':'*
 * Returns the decimal digit value of the code point in the
 * specified radix.
 *
 * If the radix is not in the range <code>2<=radix<=36</code> or if the
 * value of <code>c</code> is not a valid digit in the specified
 * radix, <code>-1</code> is returned. A character is a valid digit
 * if at least one of the following is true:
 * <ul>
 * <li>The character has a decimal digit value.
 *     Such characters have the general category "Nd" (decimal digit numbers)
 *     and a Numeric_Type of Decimal.
 *     In this case the value is the character's decimal digit value.</li>
 * <li>The character is one of the uppercase Latin letters
 *     <code>'A'</code> through <code>'Z'</code>.
 *     In this case the value is <code>c-'A'+10</code>.</li>
 * <li>The character is one of the lowercase Latin letters
 *     <code>'a'</code> through <code>'z'</code>.
 *     In this case the value is <code>ch-'a'+10</code>.</li>
 * <li>Latin letters from both the ASCII range (0061..007A, 0041..005A)
 *     as well as from the Fullwidth ASCII range (FF41..FF5A, FF21..FF3A)
 *     are recognized.</li>
 * </ul>
 *
 * Same as java.lang.Character.digit().
 *
 * @param   ch      the code point to be tested.
 * @param   radix   the radix.
 * @return  the numeric value represented by the character in the
 *          specified radix,
 *          or -1 if there is no value or if the value exceeds the radix.
 *
 * @see     UCHAR_NUMERIC_TYPE
 * @see     u_forDigit
 * @see     u_charDigitValue
 * @see     u_isdigit
 * @stable ICU 2.0
 ','line_number':3922,'multiline':True]
['text':'*
 * Determines the character representation for a specific digit in
 * the specified radix. If the value of <code>radix</code> is not a
 * valid radix, or the value of <code>digit</code> is not a valid
 * digit in the specified radix, the null character
 * (<code>U+0000</code>) is returned.
 * <p>
 * The <code>radix</code> argument is valid if it is greater than or
 * equal to 2 and less than or equal to 36.
 * The <code>digit</code> argument is valid if
 * <code>0 <= digit < radix</code>.
 * <p>
 * If the digit is less than 10, then
 * <code>'0' + digit</code> is returned. Otherwise, the value
 * <code>'a' + digit - 10</code> is returned.
 *
 * Same as java.lang.Character.forDigit().
 *
 * @param   digit   the number to convert to a character.
 * @param   radix   the radix.
 * @return  the <code>char</code> representation of the specified digit
 *          in the specified radix.
 *
 * @see     u_digit
 * @see     u_charDigitValue
 * @see     u_isdigit
 * @stable ICU 2.0
 ','line_number':3963,'multiline':True]
['text':'*
 * Get the "age" of the code point.
 * The "age" is the Unicode version when the code point was first
 * designated (as a non-character or for Private Use)
 * or assigned a character.
 * This can be useful to avoid emitting code points to receiving
 * processes that do not accept newer characters.
 * The data is from the UCD file DerivedAge.txt.
 *
 * @param c The code point.
 * @param versionArray The Unicode version number array, to be filled in.
 *
 * @stable ICU 2.1
 ','line_number':3994,'multiline':True]
['text':'*
 * Gets the Unicode version information.
 * The version array is filled in with the version information
 * for the Unicode standard that is currently used by ICU.
 * For example, Unicode version 3.1.1 is represented as an array with
 * the values { 3, 1, 1, 0 }.
 *
 * @param versionArray an output array that will be filled in with
 *                     the Unicode version number
 * @stable ICU 2.0
 ','line_number':4011,'multiline':True]
['text':'*
 * Get the FC_NFKC_Closure property string for a character.
 * See Unicode Standard Annex #15 for details, search for "FC_NFKC_Closure"
 * or for "FNC": http://www.unicode.org/reports/tr15/
 *
 * @param c The character (code point) for which to get the FC_NFKC_Closure string.
 *             It must be <code>0<=c<=0x10ffff</code>.
 * @param dest Destination address for copying the string.
 *             The string will be zero-terminated if possible.
 *             If there is no FC_NFKC_Closure string,
 *             then the buffer will be set to the empty string.
 * @param destCapacity <code>==sizeof(dest)</code>
 * @param pErrorCode Pointer to a UErrorCode variable.
 * @return The length of the string, or 0 if there is no FC_NFKC_Closure string for this character.
 *         If the destCapacity is less than or equal to the length, then the buffer
 *         contains the truncated name and the returned length indicates the full
 *         length of the name.
 *         The length does not include the zero-termination.
 *
 * @stable ICU 2.2
 ','line_number':4026,'multiline':True]
['text':'_UCHAR','line_number':4055,'multiline':True]
['text':'eof','line_number':4056,'multiline':True]
