['text':' Â© 2019 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' localematcher.cpp','line_number':4,'multiline':False]
['text':' created: 2019may08 Markus W. Scherer','line_number':5,'multiline':False]
['text':'*
 * Indicator for the lifetime of desired-locale objects passed into the LocaleMatcher.
 *
 * @draft ICU 65
 ','line_number':26,'multiline':True]
['text':'*
     * Locale objects are temporary.
     * The matcher will make a copy of a locale that will be used beyond one function call.
     *
     * @draft ICU 65
     ','line_number':32,'multiline':True]
['text':'*
     * Locale objects are stored at least as long as the matcher is used.
     * The matcher will keep only a pointer to a locale that will be used beyond one function call,
     * avoiding a copy.
     *
     * @draft ICU 65
     ','line_number':39,'multiline':True]
['text':' TODO: permanent? cached? clone?','line_number':46,'multiline':False]
['text':' Copy the region from bestDesired, if there is one.','line_number':101,'multiline':False]
['text':' Copy the variants from bestDesired, if there are any.','line_number':107,'multiline':False]
['text':' Note that this will override any supportedLocale variants.','line_number':108,'multiline':False]
['text':' For example, "sco-ulster-fonipa" + "...-fonupa" => "sco-fonupa" (replacing ulster).','line_number':109,'multiline':False]
['text':' Copy the extensions from bestDesired, if there are any.','line_number':115,'multiline':False]
['text':' C++ note: The following note, copied from Java, may not be true,','line_number':116,'multiline':False]
['text':' as long as C++ copies by legacy ICU keyword, not by extension singleton.','line_number':117,'multiline':False]
['text':' Note that this will override any supportedLocale extensions.','line_number':118,'multiline':False]
['text':' For example, "th-u-nu-latn-ca-buddhist" + "...-u-nu-native" => "th-u-nu-native"','line_number':119,'multiline':False]
['text':' (replacing calendar).','line_number':120,'multiline':False]
['text':' in case only one could not be allocated','line_number':275,'multiline':False]
['text':'*
 * <i>Internal only!</i>
 *
 * @param thresholdDistance the thresholdDistance to set, with -1 = default
 * @return this Builder object
 * @internal
 * @deprecated This API is ICU internal only.
 ','line_number':288,'multiline':True]
['text':' "und" ','line_number':325,'multiline':True]
['text':' namespace','line_number':343,'multiline':False]
['text':' Store the supported locales in input order,','line_number':387,'multiline':False]
['text':' so that when different types are used (e.g., language tag strings)','line_number':388,'multiline':False]
['text':' we can return those by parallel index.','line_number':389,'multiline':False]
['text':' Supported LRSs in input order.','line_number':392,'multiline':False]
['text':' In C++, we store these permanently to simplify ownership management','line_number':393,'multiline':False]
['text':' in the hash tables. Duplicate LSRs (if any) are unused overhead.','line_number':394,'multiline':False]
['text':' If the constructor fails partway, we need null pointers for destructibility.','line_number':400,'multiline':False]
['text':' We need an unordered map from LSR to first supported locale with that LSR,','line_number':415,'multiline':False]
['text':' and an ordered list of (LSR, supported index) for','line_number':416,'multiline':False]
['text':' the supported locales in the following order:','line_number':417,'multiline':False]
['text':' 1. Default locale, if it is supported.','line_number':418,'multiline':False]
['text':' 2. Priority locales (aka "paradigm locales") in builder order.','line_number':419,'multiline':False]
['text':' 3. Remaining locales in builder order.','line_number':420,'multiline':False]
['text':' Determine insertion order.','line_number':433,'multiline':False]
['text':' Add locales immediately that are equivalent to the default.','line_number':434,'multiline':False]
['text':' Implicit default locale = first supported locale, if not turned off.','line_number':442,'multiline':False]
['text':' Add supported paradigm locales.','line_number':459,'multiline':False]
['text':' Add remaining supported locales.','line_number':466,'multiline':False]
['text':' If supportedLSRsLength < supportedLocalesLength then','line_number':473,'multiline':False]
['text':' we waste as many array slots as there are duplicate supported LSRs,','line_number':474,'multiline':False]
['text':' but the amount of wasted space is small as long as there are few duplicates.','line_number':475,'multiline':False]
['text':' already copied','line_number':485,'multiline':False]
['text':' +1 for an exclusive threshold from an inclusive max.','line_number':494,'multiline':False]
['text':' ULOCMATCH_TEMPORARY_LOCALES','line_number':597,'multiline':False]
['text':' Quick check for exact maximized LSR.','line_number':686,'multiline':False]
['text':' no good match','line_number':720,'multiline':False]
['text':' Returns the inverse of the distance: That is, 1-distance(desired, supported).','line_number':739,'multiline':False]
['text':' uloc_acceptLanguage() --------------------------------------------------- ***','line_number':753,'multiline':False]
['text':' Store the locale in the converter, rather than return a reference to a temporary,','line_number':765,'multiline':False]
['text':' or a value which could go out of scope with the caller's reference to it.','line_number':766,'multiline':False]
['text':' namespace','line_number':806,'multiline':False]
