['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 **********************************************************************
 *   Copyright (C) 1999-2016, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
 *   11/17/99    aliu        Creation.
 **********************************************************************
 ','line_number':3,'multiline':True]
['text':' for 'typeid' to work','line_number':13,'multiline':False]
['text':'-','line_number':57,'multiline':True]
['text':';','line_number':58,'multiline':True]
['text':' '/'','line_number':59,'multiline':False]
['text':'*
 * Prefix for resource bundle key for the display name for a
 * transliterator.  The ID is appended to this to form the key.
 * The resource bundle value should be a String.
 ','line_number':61,'multiline':True]
['text':'*
 * Prefix for resource bundle key for the display name for a
 * transliterator SCRIPT.  The ID is appended to this to form the key.
 * The resource bundle value should be a String.
 ','line_number':68,'multiline':True]
['text':'*
 * Resource bundle key for display name pattern.
 * The resource bundle value should be a String forming a
 * MessageFormat pattern, e.g.:
 * "{0,choice,0#|1#{1} Transliterator|2#{1} to {2} Transliterator}".
 ','line_number':75,'multiline':True]
['text':'*
 * Resource bundle key for the list of RuleBasedTransliterator IDs.
 * The resource bundle value should be a String[] with each element
 * being a valid ID.  The ID will be appended to RB_RULE_BASED_PREFIX
 * to obtain the class name in which the RB_RULE key will be sought.
 ','line_number':83,'multiline':True]
['text':'*
 * The mutex controlling access to registry object.
 ','line_number':91,'multiline':True]
['text':'*
 * System transliterator registry; non-null when initialized.
 ','line_number':96,'multiline':True]
['text':' Macro to check/initialize the registry. ONLY USE WITHIN','line_number':101,'multiline':False]
['text':' MUTEX. Avoids function call when registry is initialized.','line_number':102,'multiline':False]
['text':'*
 * Return TRUE if the given UTransPosition is valid for text of
 * the given length.
 ','line_number':109,'multiline':True]
['text':'*
 * Default constructor.
 * @param theID the string identifier for this transliterator
 * @param theFilter the filter.  Any character for which
 * <tt>filter.contains()</tt> returns <tt>FALSE</tt> will not be
 * altered by this transliterator.  If <tt>filter</tt> is
 * <tt>null</tt> then no filtering is applied.
 ','line_number':121,'multiline':True]
['text':' NUL-terminate the ID string, which is a non-aliased copy.','line_number':134,'multiline':False]
['text':'*
 * Destructor.
 ','line_number':139,'multiline':True]
['text':'*
 * Copy constructor.
 ','line_number':148,'multiline':True]
['text':' NUL-terminate the ID string, which is a non-aliased copy.','line_number':155,'multiline':False]
['text':' We own the filter, so we must have our own copy','line_number':160,'multiline':False]
['text':'*
 * Assignment operator.
 ','line_number':169,'multiline':True]
['text':' self-assignment: no-op','line_number':173,'multiline':False]
['text':' NUL-terminate the ID string','line_number':175,'multiline':False]
['text':'*
 * Transliterates a segment of a string.  <code>Transliterator</code> API.
 * @param text the string to be transliterated
 * @param start the beginning index, inclusive; <code>0 <= start
 * <= limit</code>.
 * @param limit the ending index, exclusive; <code>start <= limit
 * <= text.length()</code>.
 * @return the new limit index, or -1
 ','line_number':183,'multiline':True]
['text':'*
 * Transliterates an entire string in place. Convenience method.
 * @param text the string to be transliterated
 ','line_number':209,'multiline':True]
['text':'*
 * Transliterates the portion of the text buffer that can be
 * transliterated unambiguosly after new text has been inserted,
 * typically as a result of a keyboard event.  The new text in
 * <code>insertion</code> will be inserted into <code>text</code>
 * at <code>index.contextLimit</code>, advancing
 * <code>index.contextLimit</code> by <code>insertion.length()</code>.
 * Then the transliterator will try to transliterate characters of
 * <code>text</code> between <code>index.start</code> and
 * <code>index.contextLimit</code>.  Characters before
 * <code>index.start</code> will not be changed.
 *
 * <p>Upon return, values in <code>index</code> will be updated.
 * <code>index.contextStart</code> will be advanced to the first
 * character that future calls to this method will read.
 * <code>index.start</code> and <code>index.contextLimit</code> will
 * be adjusted to delimit the range of text that future calls to
 * this method may change.
 *
 * <p>Typical usage of this method begins with an initial call
 * with <code>index.contextStart</code> and <code>index.contextLimit</code>
 * set to indicate the portion of <code>text</code> to be
 * transliterated, and <code>index.start == index.contextStart</code>.
 * Thereafter, <code>index</code> can be used without
 * modification in future calls, provided that all changes to
 * <code>text</code> are made via this method.
 *
 * <p>This method assumes that future calls may be made that will
 * insert new text into the buffer.  As a result, it only performs
 * unambiguous transliterations.  After the last call to this
 * method, there may be untransliterated text that is waiting for
 * more input to resolve an ambiguity.  In order to perform these
 * pending transliterations, clients should call {@link
 * #finishKeyboardTransliteration} after the last call to this
 * method has been made.
 * 
 * @param text the buffer holding transliterated and untransliterated text
 * @param index an array of three integers.
 *
 * <ul><li><code>index.contextStart</code>: the beginning index,
 * inclusive; <code>0 <= index.contextStart <= index.contextLimit</code>.
 *
 * <li><code>index.contextLimit</code>: the ending index, exclusive;
 * <code>index.contextStart <= index.contextLimit <= text.length()</code>.
 * <code>insertion</code> is inserted at
 * <code>index.contextLimit</code>.
 *
 * <li><code>index.start</code>: the next character to be
 * considered for transliteration; <code>index.contextStart <=
 * index.start <= index.contextLimit</code>.  Characters before
 * <code>index.start</code> will not be changed by future calls
 * to this method.</ul>
 *
 * @param insertion text to be inserted and possibly
 * transliterated into the translation buffer at
 * <code>index.contextLimit</code>.  If <code>null</code> then no text
 * is inserted.
 * @see #START
 * @see #LIMIT
 * @see #CURSOR
 * @see #handleTransliterate
 * @exception IllegalArgumentException if <code>index</code>
 * is invalid
 ','line_number':217,'multiline':True]
['text':'*
 * Transliterates the portion of the text buffer that can be
 * transliterated unambiguosly after a new character has been
 * inserted, typically as a result of a keyboard event.  This is a
 * convenience method; see {@link
 * #transliterate(Replaceable, int[], String)} for details.
 * @param text the buffer holding transliterated and
 * untransliterated text
 * @param index an array of three integers.  See {@link
 * #transliterate(Replaceable, int[], String)}.
 * @param insertion text to be inserted and possibly
 * transliterated into the translation buffer at
 * <code>index.contextLimit</code>.
 * @see #transliterate(Replaceable, int[], String)
 ','line_number':288,'multiline':True]
['text':'*
 * Transliterates the portion of the text buffer that can be
 * transliterated unambiguosly.  This is a convenience method; see
 * {@link #transliterate(Replaceable, int[], String)} for
 * details.
 * @param text the buffer holding transliterated and
 * untransliterated text
 * @param index an array of three integers.  See {@link
 * #transliterate(Replaceable, int[], String)}.
 * @see #transliterate(Replaceable, int[], String)
 ','line_number':311,'multiline':True]
['text':'*
 * Finishes any pending transliterations that were waiting for
 * more characters.  Clients should call this method as the last
 * call after a sequence of one or more calls to
 * <code>transliterate()</code>.
 * @param text the buffer holding transliterated and
 * untransliterated text.
 * @param index the array of indices previously passed to {@link
 * #transliterate}
 ','line_number':328,'multiline':True]
['text':'*
 * This internal method does keyboard transliteration.  If the
 * 'insertion' is non-null then we append it to 'text' before
 * proceeding.  This method calls through to the pure virtual
 * framework method handleTransliterate() to do the actual
 * work.
 ','line_number':347,'multiline':True]
['text':'    int32_t originalStart = index.contextStart;','line_number':367,'multiline':False]
['text':' Oops, there is a dangling lead surrogate in the buffer.','line_number':376,'multiline':False]
['text':' This will break most transliterators, since they will','line_number':377,'multiline':False]
['text':' assume it is part of a pair.  Don't transliterate until','line_number':378,'multiline':False]
['text':' more text comes in.','line_number':379,'multiline':False]
['text':' TODO','line_number':386,'multiline':False]
['text':' I CAN'T DO what I'm attempting below now that the Kleene star','line_number':387,'multiline':False]
['text':' operator is supported.  For example, in the rule','line_number':388,'multiline':False]
['text':'   ([:Lu:]+) { x } > $1;','line_number':390,'multiline':False]
['text':' what is the maximum context length?  getMaximumContextLength()','line_number':392,'multiline':False]
['text':' will return 1, but this is just the length of the ante context','line_number':393,'multiline':False]
['text':' part of the pattern string -- 1 character, which is a standin','line_number':394,'multiline':False]
['text':' for a Quantifier, which contains a StringMatcher, which','line_number':395,'multiline':False]
['text':' contains a UnicodeSet.','line_number':396,'multiline':False]
['text':' There is a complicated way to make this work again, and that's','line_number':398,'multiline':False]
['text':' to add a "maximum left context" protocol into the','line_number':399,'multiline':False]
['text':' UnicodeMatcher hierarchy.  At present I'm not convinced this is','line_number':400,'multiline':False]
['text':' worth it.','line_number':401,'multiline':False]
['text':' ---','line_number':403,'multiline':False]
['text':' The purpose of the code below is to keep the context small','line_number':405,'multiline':False]
['text':' while doing incremental transliteration.  When part of the left','line_number':406,'multiline':False]
['text':' context (between contextStart and start) is no longer needed,','line_number':407,'multiline':False]
['text':' we try to advance contextStart past that portion.  We use the','line_number':408,'multiline':False]
['text':' maximum context length to do so.','line_number':409,'multiline':False]
['text':'*
 * This method breaks up the input text into runs of unfiltered
 * characters.  It passes each such run to
 * <subclass>.handleTransliterate().  Subclasses that can handle the
 * filter logic more efficiently themselves may override this method.
 *
 * All transliteration calls in this class go through this method.
 ','line_number':420,'multiline':True]
['text':' Short circuit path for transliterators with no filter in','line_number':432,'multiline':False]
['text':' non-incremental mode.','line_number':433,'multiline':False]
['text':'----------------------------------------------------------------------','line_number':439,'multiline':False]
['text':' This method processes text in two groupings:','line_number':440,'multiline':False]
['text':'','line_number':441,'multiline':False]
['text':' RUNS -- A run is a contiguous group of characters which are contained','line_number':442,'multiline':False]
['text':' in the filter for this transliterator (filter.contains(ch) == TRUE).','line_number':443,'multiline':False]
['text':' Text outside of runs may appear as context but it is not modified.','line_number':444,'multiline':False]
['text':' The start and limit Position values are narrowed to each run.','line_number':445,'multiline':False]
['text':'','line_number':446,'multiline':False]
['text':' PASSES (incremental only) -- To make incremental mode work correctly,','line_number':447,'multiline':False]
['text':' each run is broken up into n passes, where n is the length (in code','line_number':448,'multiline':False]
['text':' points) of the run.  Each pass contains the first n characters.  If a','line_number':449,'multiline':False]
['text':' pass is completely transliterated, it is committed, and further passes','line_number':450,'multiline':False]
['text':' include characters after the committed text.  If a pass is blocked,','line_number':451,'multiline':False]
['text':' and does not transliterate completely, then this method rolls back','line_number':452,'multiline':False]
['text':' the changes made during the pass, extends the pass by one code point,','line_number':453,'multiline':False]
['text':' and tries again.','line_number':454,'multiline':False]
['text':'----------------------------------------------------------------------','line_number':455,'multiline':False]
['text':' globalLimit is the limit value for the entire operation.  We','line_number':457,'multiline':False]
['text':' set index.limit to the end of each unfiltered run before','line_number':458,'multiline':False]
['text':' calling handleTransliterate(), so we need to maintain the real','line_number':459,'multiline':False]
['text':' value of index.limit here.  After each transliteration, we','line_number':460,'multiline':False]
['text':' update globalLimit for insertions or deletions that have','line_number':461,'multiline':False]
['text':' happened.','line_number':462,'multiline':False]
['text':' If there is a non-null filter, then break the input text up.  Say the','line_number':465,'multiline':False]
['text':' input text has the form:','line_number':466,'multiline':False]
['text':'   xxxabcxxdefxx','line_number':467,'multiline':False]
['text':' where 'x' represents a filtered character (filter.contains('x') ==','line_number':468,'multiline':False]
['text':' false).  Then we break this up into:','line_number':469,'multiline':False]
['text':'   xxxabc xxdef xx','line_number':470,'multiline':False]
['text':' Each pass through the loop consumes a run of filtered','line_number':471,'multiline':False]
['text':' characters (which are ignored) and a subsequent run of','line_number':472,'multiline':False]
['text':' unfiltered characters (which are transliterated).','line_number':473,'multiline':False]
['text':' Narrow the range to be transliterated to the first segment','line_number':478,'multiline':False]
['text':' of unfiltered characters at or after index.start.','line_number':479,'multiline':False]
['text':' Advance past filtered chars','line_number':481,'multiline':False]
['text':' Find the end of this run of unfiltered chars','line_number':488,'multiline':False]
['text':' Check to see if the unfiltered run is empty.  This only','line_number':496,'multiline':False]
['text':' happens at the end of the string when all the remaining','line_number':497,'multiline':False]
['text':' characters are filtered.','line_number':498,'multiline':False]
['text':' assert(index.start == globalLimit);','line_number':500,'multiline':False]
['text':' Is this run incremental?  If there is additional','line_number':504,'multiline':False]
['text':' filtered text (if limit < globalLimit) then we pass in','line_number':505,'multiline':False]
['text':' an incremental value of FALSE to force the subclass to','line_number':506,'multiline':False]
['text':' complete the transliteration for this run.','line_number':507,'multiline':False]
['text':' Implement rollback.  To understand the need for rollback,','line_number':513,'multiline':False]
['text':' consider the following transliterator:','line_number':514,'multiline':False]
['text':'','line_number':515,'multiline':False]
['text':'  "t" is "a > A;"','line_number':516,'multiline':False]
['text':'  "u" is "A > b;"','line_number':517,'multiline':False]
['text':'  "v" is a compound of "t; NFD; u" with a filter [:Ll:]','line_number':518,'multiline':False]
['text':'','line_number':519,'multiline':False]
['text':' Now apply "c" to the input text "a".  The result is "b".  But if','line_number':520,'multiline':False]
['text':' the transliteration is done incrementally, then the NFD holds','line_number':521,'multiline':False]
['text':' things up after "t" has already transformed "a" to "A".  When','line_number':522,'multiline':False]
['text':' finishTransliterate() is called, "A" is _not_ processed because','line_number':523,'multiline':False]
['text':' it gets excluded by the [:Ll:] filter, and the end result is "A"','line_number':524,'multiline':False]
['text':' -- incorrect.  The problem is that the filter is applied to a','line_number':525,'multiline':False]
['text':' partially-transliterated result, when we only want it to apply to','line_number':526,'multiline':False]
['text':' input text.  Although this example hinges on a compound','line_number':527,'multiline':False]
['text':' transliterator containing NFD and a specific filter, it can','line_number':528,'multiline':False]
['text':' actually happen with any transliterator which may do a partial','line_number':529,'multiline':False]
['text':' transformation in incremental mode into characters outside its','line_number':530,'multiline':False]
['text':' filter.','line_number':531,'multiline':False]
['text':'','line_number':532,'multiline':False]
['text':' To handle this, when in incremental mode we supply characters to','line_number':533,'multiline':False]
['text':' handleTransliterate() in several passes.  Each pass adds one more','line_number':534,'multiline':False]
['text':' input character to the input text.  That is, for input "ABCD", we','line_number':535,'multiline':False]
['text':' first try "A", then "AB", then "ABC", and finally "ABCD".  If at','line_number':536,'multiline':False]
['text':' any point we block (upon return, start < limit) then we roll','line_number':537,'multiline':False]
['text':' back.  If at any point we complete the run (upon return start ==','line_number':538,'multiline':False]
['text':' limit) then we commit that run.','line_number':539,'multiline':False]
['text':' Make a rollback copy at the end of the string','line_number':547,'multiline':False]
['text':' Variables reflecting the commitment of completely','line_number':551,'multiline':False]
['text':' transliterated text.  passStart is the runStart, advanced','line_number':552,'multiline':False]
['text':' past committed text.  rollbackStart is the rollbackOrigin,','line_number':553,'multiline':False]
['text':' advanced past rollback text that corresponds to committed','line_number':554,'multiline':False]
['text':' text.','line_number':555,'multiline':False]
['text':' The limit for each pass; we advance by one code point with','line_number':559,'multiline':False]
['text':' each iteration.','line_number':560,'multiline':False]
['text':' Total length, in 16-bit code units, of uncommitted text.','line_number':563,'multiline':False]
['text':' This is the length to be rolled back.','line_number':564,'multiline':False]
['text':' Total delta (change in length) for all passes','line_number':567,'multiline':False]
['text':' PASS MAIN LOOP -- Start with a single character, and extend','line_number':570,'multiline':False]
['text':' the text by one character at a time.  Roll back partial','line_number':571,'multiline':False]
['text':' transliterations and commit complete transliterations.','line_number':572,'multiline':False]
['text':' Length of additional code point, either one or two','line_number':574,'multiline':False]
['text':' Delegate to subclass for actual transliteration.  Upon','line_number':584,'multiline':False]
['text':' return, start will be updated to point after the','line_number':585,'multiline':False]
['text':' transliterated text, and limit and contextLimit will be','line_number':586,'multiline':False]
['text':' adjusted for length changes.','line_number':587,'multiline':False]
['text':' change in length','line_number':590,'multiline':False]
['text':' We failed to completely transliterate this pass.','line_number':592,'multiline':False]
['text':' Roll back the text.  Indices remain unchanged; reset','line_number':593,'multiline':False]
['text':' them where necessary.','line_number':594,'multiline':False]
['text':' Find the rollbackStart, adjusted for length changes','line_number':596,'multiline':False]
['text':' and the deletion of partially transliterated text.','line_number':597,'multiline':False]
['text':' Delete the partially transliterated text','line_number':600,'multiline':False]
['text':' Copy the rollback text back','line_number':603,'multiline':False]
['text':' Restore indices to their original values','line_number':606,'multiline':False]
['text':' We did completely transliterate this pass.  Update the','line_number':612,'multiline':False]
['text':' commit indices to record how far we got.  Adjust indices','line_number':613,'multiline':False]
['text':' for length change.','line_number':614,'multiline':False]
['text':' Move the pass indices past the committed text.','line_number':616,'multiline':False]
['text':' Adjust the rollbackStart for length changes and move','line_number':619,'multiline':False]
['text':' it past the committed text.  All characters we've','line_number':620,'multiline':False]
['text':' processed to this point are committed now, so zero','line_number':621,'multiline':False]
['text':' out the uncommittedLength.','line_number':622,'multiline':False]
['text':' Adjust indices for length changes.','line_number':626,'multiline':False]
['text':' Adjust overall limit and rollbackOrigin for insertions and','line_number':632,'multiline':False]
['text':' deletions.  Don't need to worry about contextLimit because','line_number':633,'multiline':False]
['text':' handleTransliterate() maintains that.','line_number':634,'multiline':False]
['text':' Delete the rollback copy','line_number':638,'multiline':False]
['text':' Move start past committed text','line_number':641,'multiline':False]
['text':' Delegate to subclass for actual transliteration.','line_number':646,'multiline':False]
['text':' change in length','line_number':649,'multiline':False]
['text':' In a properly written transliterator, start == limit after','line_number':651,'multiline':False]
['text':' handleTransliterate() returns when incremental is false.','line_number':652,'multiline':False]
['text':' Catch cases where the subclass doesn't do this, and throw','line_number':653,'multiline':False]
['text':' an exception.  (Just pinning start to limit is a bad idea,','line_number':654,'multiline':False]
['text':' because what's probably happening is that the subclass','line_number':655,'multiline':False]
['text':' isn't transliterating all the way to the end, and it should','line_number':656,'multiline':False]
['text':' in non-incremental mode.)','line_number':657,'multiline':False]
['text':' We can't throw an exception, so just fudge things','line_number':659,'multiline':False]
['text':' Adjust overall limit for insertions/deletions.  Don't need','line_number':663,'multiline':False]
['text':' to worry about contextLimit because handleTransliterate()','line_number':664,'multiline':False]
['text':' maintains that.','line_number':665,'multiline':False]
['text':' If we did completely transliterate this','line_number':673,'multiline':False]
['text':' run, then repeat with the next unfiltered run.','line_number':674,'multiline':False]
['text':' Start is valid where it is.  Limit needs to be put back where','line_number':677,'multiline':False]
['text':' it was, modulo adjustments for deletions/insertions.','line_number':678,'multiline':False]
['text':'*
 * Method for subclasses to use to set the maximum context length.
 * @see #getMaximumContextLength
 ','line_number':688,'multiline':True]
['text':'*
 * Returns a programmatic identifier for this transliterator.
 * If this identifier is passed to <code>getInstance()</code>, it
 * will return this object, if it has been registered.
 * @see #registerInstance
 * @see #getAvailableIDs
 ','line_number':696,'multiline':True]
['text':'*
 * Returns a name for this transliterator that is appropriate for
 * display to the user in the default locale.  See {@link
 * #getDisplayName(Locale)} for details.
 ','line_number':707,'multiline':True]
['text':'*
 * Returns a name for this transliterator that is appropriate for
 * display to the user in the given locale.  This name is taken
 * from the locale resource data in the standard manner of the
 * <code>java.text</code> package.
 *
 * <p>If no localized names exist in the system resource bundles,
 * a name is synthesized using a localized
 * <code>MessageFormat</code> pattern from the resource data.  The
 * arguments to this pattern are an integer followed by one or two
 * strings.  The integer is the number of strings, either 1 or 2.
 * The strings are formed by splitting the ID for this
 * transliterator at the first TARGET_SEP.  If there is no TARGET_SEP, then the
 * entire ID forms the only string.
 * @param inLocale the Locale in which the display name should be
 * localized.
 * @see java.text.MessageFormat
 ','line_number':717,'multiline':True]
['text':' Suspend checking status until later...','line_number':742,'multiline':False]
['text':' Normalize the ID','line_number':746,'multiline':False]
['text':' No target; malformed id','line_number':751,'multiline':False]
['text':' Change "Foo" to "/Foo"','line_number':754,'multiline':False]
['text':' build the char* key','line_number':760,'multiline':False]
['text':' Try to retrieve a UnicodeString from the bundle.','line_number':767,'multiline':False]
['text':' [sic] assign & return','line_number':771,'multiline':False]
['text':' We have failed to get a name from the locale data.  This is','line_number':775,'multiline':False]
['text':' typical, since most transliterators will not have localized','line_number':776,'multiline':False]
['text':' name data.  The next step is to retrieve the MessageFormat','line_number':777,'multiline':False]
['text':' pattern from the locale data and to use it to synthesize the','line_number':778,'multiline':False]
['text':' name from the ID.','line_number':779,'multiline':False]
['text':' Suspend checking status until later...','line_number':786,'multiline':False]
['text':' We pass either 2 or 3 Formattable objects to msg.','line_number':788,'multiline':False]
['text':' # of args to follow','line_number':791,'multiline':False]
['text':' Use display names for the scripts, if they exist','line_number':796,'multiline':False]
['text':' ignored by msg','line_number':815,'multiline':False]
['text':' We should not reach this point unless there is something','line_number':825,'multiline':False]
['text':' wrong with the build or the RB_DISPLAY_NAME_PATTERN has','line_number':826,'multiline':False]
['text':' been deleted from the root RB_LOCALE_ELEMENTS resource.','line_number':827,'multiline':False]
['text':'*
 * Returns the filter used by this transliterator, or <tt>null</tt>
 * if this transliterator uses no filter.  Caller musn't delete
 * the result!
 ','line_number':832,'multiline':True]
['text':'*
 * Returns the filter used by this transliterator, or
 * <tt>NULL</tt> if this transliterator uses no filter.  The
 * caller must eventually delete the result.  After this call,
 * this transliterator's filter is set to <tt>NULL</tt>.
 ','line_number':841,'multiline':True]
['text':'*
 * Changes the filter used by this transliterator.  If the filter
 * is set to <tt>null</tt> then no filtering will occur.
 *
 * <p>Callers must take care if a transliterator is in use by
 * multiple threads.  The filter should not be changed by one
 * thread while another thread may be transliterating.
 ','line_number':853,'multiline':True]
['text':'*
 * Returns this transliterator's inverse.  See the class
 * documentation for details.  This implementation simply inverts
 * the two entities in the ID and attempts to retrieve the
 * resulting transliterator.  That is, if <code>getID()</code>
 * returns "A-B", then this method will return the result of
 * <code>getInstance("B-A")</code>, or <code>null</code> if that
 * call fails.
 *
 * <p>This method does not take filtering into account.  The
 * returned transliterator will have no filter.
 *
 * <p>Subclasses with knowledge of their inverse may wish to
 * override this method.
 *
 * @return a transliterator that is an inverse, not necessarily
 * exact, of this transliterator, or <code>null</code> if no such
 * transliterator is registered.
 * @see #registerInstance
 ','line_number':866,'multiline':True]
['text':'*
 * Returns a <code>Transliterator</code> object given its ID.
 * The ID must be either a system transliterator ID or a ID registered
 * using <code>registerInstance()</code>.
 *
 * @param ID a valid ID, as enumerated by <code>getAvailableIDs()</code>
 * @return A <code>Transliterator</code> object with the given ID
 * @see #registerInstance
 * @see #getAvailableIDs
 * @see #getID
 ','line_number':900,'multiline':True]
['text':' TODO add code for parseError...currently unused, but','line_number':928,'multiline':False]
['text':' later may be used by parsing code...','line_number':929,'multiline':False]
['text':' [NOTE: If it's a compoundID, we instantiate a CompoundTransliterator even if it only','line_number':946,'multiline':False]
['text':' has one child transliterator.  This is so that toRules() will return the right thing','line_number':947,'multiline':False]
['text':' (without any inactive ID), but our main ID still comes out correct.  That is, if we','line_number':948,'multiline':False]
['text':' instantiate "(Lower);Latin-Greek;", we want the rules to come out as "::Latin-Greek;"','line_number':949,'multiline':False]
['text':' even though the ID is "(Lower);Latin-Greek;".','line_number':950,'multiline':False]
['text':' Check null pointer','line_number':956,'multiline':False]
['text':'*
 * Create a transliterator from a basic ID.  This is an ID
 * containing only the forward direction source, target, and
 * variant.
 * @param id a basic ID of the form S-T or S-T/V.
 * @return a newly created Transliterator or null if the ID is
 * invalid.
 ','line_number':969,'multiline':True]
['text':' We may have not gotten a transliterator:  Because we can't','line_number':996,'multiline':False]
['text':' instantiate a transliterator from inside TransliteratorRegistry::','line_number':997,'multiline':False]
['text':' get() (that would deadlock), we sometimes pass back an alias.  This','line_number':998,'multiline':False]
['text':' contains the data we need to finish the instantiation outside the','line_number':999,'multiline':False]
['text':' registry mutex.  The alias may, in turn, generate another alias, so','line_number':1000,'multiline':False]
['text':' we handle aliases in a loop.  The max times through the loop is two.','line_number':1001,'multiline':False]
['text':' [alan]','line_number':1002,'multiline':False]
['text':' Rule-based aliases are handled with TransliteratorAlias::','line_number':1005,'multiline':False]
['text':' parse(), followed by TransliteratorRegistry::reget().','line_number':1006,'multiline':False]
['text':' Other aliases are handled with TransliteratorAlias::create().','line_number':1007,'multiline':False]
['text':' Step 1. parse','line_number':1009,'multiline':False]
['text':' Step 2. reget','line_number':1015,'multiline':False]
['text':' Step 3. Loop back around!','line_number':1022,'multiline':False]
['text':'*
 * Returns a <code>Transliterator</code> object constructed from
 * the given rule string.  This will be a RuleBasedTransliterator,
 * if the rule string contains only rules, or a
 * CompoundTransliterator, if it contains ID blocks, or a
 * NullTransliterator, if it contains ID blocks which parse as
 * empty for the given direction.
 ','line_number':1044,'multiline':True]
['text':' NOTE: The logic here matches that in TransliteratorRegistry.','line_number':1068,'multiline':False]
['text':' idBlock, no data -- this is an alias.  The ID has','line_number':1076,'multiline':False]
['text':' been munged from reverse into forward mode, if','line_number':1077,'multiline':False]
['text':' necessary, so instantiate the ID in the forward','line_number':1078,'multiline':False]
['text':' direction.','line_number':1079,'multiline':False]
['text':' TODO: Should passNumber be turned into a decimal-string representation (1 -> "1")?','line_number':1119,'multiline':False]
['text':' Check if NULL before adding it to transliterators to avoid future usage of NULL pointer.','line_number':1122,'multiline':False]
['text':' Null pointer check','line_number':1134,'multiline':False]
['text':' The base class implementation of toRules munges the ID into','line_number':1148,'multiline':False]
['text':' the correct format.  That is: foo => ::foo','line_number':1149,'multiline':False]
['text':' KEEP in sync with rbt_pars','line_number':1163,'multiline':False]
['text':' Most, but not all filters will be UnicodeSets.  Optimize for','line_number':1193,'multiline':False]
['text':' the high-runner case.','line_number':1194,'multiline':False]
['text':' Check null pointer','line_number':1197,'multiline':False]
['text':' For public consumption','line_number':1220,'multiline':False]
['text':' To be called only by Transliterator subclasses that are called','line_number':1231,'multiline':False]
['text':' to register themselves by initializeRegistry().','line_number':1232,'multiline':False]
['text':' To be called only by Transliterator subclasses that are called','line_number':1240,'multiline':False]
['text':' to register themselves by initializeRegistry().','line_number':1241,'multiline':False]
['text':'*
 * Registers a instance <tt>obj</tt> of a subclass of
 * <code>Transliterator</code> with the system.  This object must
 * implement the <tt>clone()</tt> method.  When
 * <tt>getInstance()</tt> is called with an ID string that is
 * equal to <tt>obj.getID()</tt>, then <tt>obj.clone()</tt> is
 * returned.
 *
 * @param obj an instance of subclass of
 * <code>Transliterator</code> that defines <tt>clone()</tt>
 * @see #getInstance
 * @see #unregister
 ','line_number':1249,'multiline':True]
['text':'*
 * Unregisters a transliterator or class.  This may be either
 * a system transliterator or a user transliterator or class.
 * 
 * @param ID the ID of the transliterator or class
 * @see #registerInstance

 ','line_number':1290,'multiline':True]
['text':'*
 * == OBSOLETE - remove in ICU 3.4 ==
 * Return the number of IDs currently registered with the system.
 * To retrieve the actual IDs, call getAvailableID(i) with
 * i from 0 to countAvailableIDs() - 1.
 ','line_number':1306,'multiline':True]
['text':'*
 * == OBSOLETE - remove in ICU 3.4 ==
 * Return the index-th available ID.  index must be between 0
 * and countAvailableIDs() - 1, inclusive.  If index is out of
 * range, the result of getAvailableID(0) is returned.
 ','line_number':1322,'multiline':True]
['text':' fail if no registry','line_number':1336,'multiline':False]
['text':'*
 * Method for subclasses to use to obtain a character in the given
 * string, with filtering.
 * @deprecated the new architecture provides filtering at the top
 * level.  This method will be removed Dec 31 2001.
 ','line_number':1439,'multiline':True]
['text':'*
 * If the registry is initialized, return TRUE.  If not, initialize it
 * and return TRUE.  If the registry cannot be initialized, return
 * FALSE (rare).
 *
 * IMPORTANT: Upon entry, registryMutex must be LOCKED.  The entire
 * initialization is done with the lock held.  There is NO REASON to
 * unlock, since no other thread that is waiting on the registryMutex
 * cannot itself proceed until the registry is initialized.
 ','line_number':1454,'multiline':True]
['text':' can't create registry, no recovery','line_number':1473,'multiline':False]
['text':' The following code parses the index table located in
     * icu/data/translit/root.txt.  The index is an n x 4 table
     * that follows this format:
     *  <id>{
     *      file{
     *          resource{"<resource>"}
     *          direction{"<direction>"}
     *      }
     *  }
     *  <id>{
     *      internal{
     *          resource{"<resource>"}
     *          direction{"<direction"}
     *       }
     *  }
     *  <id>{
     *      alias{"<getInstanceArg"}
     *  }
     * <id> is the ID of the system transliterator being defined.  These
     * are public IDs enumerated by Transliterator.getAvailableIDs(),
     * unless the second field is "internal".
     * 
     * <resource> is a ResourceReader resource name.  Currently these refer
     * to file names under com/ibm/text/resources.  This string is passed
     * directly to ResourceReader, together with <encoding>.
     * 
     * <direction> is either "FORWARD" or "REVERSE".
     * 
     * <getInstanceArg> is a string to be passed directly to
     * Transliterator.getInstance().  The returned Transliterator object
     * then has its ID changed to <id> and is returned.
     *
     * The extra blank field on "alias" lines is to make the array square.
     ','line_number':1476,'multiline':True]
['text':'static const char translit_index[] = "translit_index";','line_number':1510,'multiline':False]
['text':'open default locale','line_number':1514,'multiline':True]
['text':' 'f'','line_number':1544,'multiline':False]
['text':' 'i'','line_number':1545,'multiline':False]
['text':' 'file' or 'internal';','line_number':1546,'multiline':False]
['text':' row[2]=resource, row[3]=direction','line_number':1547,'multiline':False]
['text':'f','line_number':1551,'multiline':True]
['text':'F','line_number':1554,'multiline':True]
['text':' 'a'','line_number':1559,'multiline':False]
['text':' 'alias'; row[2]=createInstance argument','line_number':1560,'multiline':False]
['text':' Manually add prototypes that the system knows about to the','line_number':1575,'multiline':False]
['text':' cache.  This is how new non-rule-based transliterators are','line_number':1576,'multiline':False]
['text':' added to the system.','line_number':1577,'multiline':False]
['text':' This is to allow for null pointer check','line_number':1579,'multiline':False]
['text':' TODO: could or should these transliterators be referenced polymorphically once constructed?','line_number':1587,'multiline':False]
['text':' Check for null pointers','line_number':1590,'multiline':False]
['text':' Since there was an error, remove registry','line_number':1607,'multiline':False]
['text':' FALSE means invisible.','line_number':1622,'multiline':False]
['text':' Must be within mutex','line_number':1625,'multiline':False]
['text':' Defined in transreg.h:','line_number':1645,'multiline':False]
['text':'*
 * Release all static memory held by transliterator.  This will
 * necessarily invalidate any rule-based transliterators held by the
 * user, because RBTs hold pointers to common data objects.
 ','line_number':1647,'multiline':True]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':1662,'multiline':True]
['text':'eof','line_number':1664,'multiline':False]
