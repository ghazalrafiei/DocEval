['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
* Copyright (c) 2002-2016, International Business Machines
* Corporation and others.  All Rights Reserved.
**********************************************************************
','line_number':3,'multiline':True]
['text':'#define UCURR_DEBUG_EQUIV 1','line_number':42,'multiline':False]
['text':'#define UCURR_DEBUG 1','line_number':46,'multiline':False]
['text':' const because it's a reference to a resource bundle string. ','line_number':52,'multiline':True]
['text':'------------------------------------------------------------','line_number':57,'multiline':False]
['text':' Constants','line_number':58,'multiline':False]
['text':' Default currency meta data of last resort.  We try to use the','line_number':60,'multiline':False]
['text':' defaults encoded in the meta data resource bundle.  If there is a','line_number':61,'multiline':False]
['text':' configuration/build error and these are not available, we use these','line_number':62,'multiline':False]
['text':' hard-coded defaults (which should be identical).','line_number':63,'multiline':False]
['text':' POW10[i] = 10^i, i=0..MAX_POW10','line_number':66,'multiline':False]
['text':'------------------------------------------------------------','line_number':74,'multiline':False]
['text':' Resource tags','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':' Tag for meta-data, in root.','line_number':79,'multiline':False]
['text':' Tag for map from countries to currencies, in root.','line_number':82,'multiline':False]
['text':' Tag for default meta-data, in CURRENCY_META','line_number':85,'multiline':False]
['text':' Variant delimiter','line_number':88,'multiline':False]
['text':' Tag for localized display names (symbols) of currencies','line_number':91,'multiline':False]
['text':' ISO codes mapping table','line_number':98,'multiline':False]
['text':' Currency symbol equivalances','line_number':102,'multiline':False]
['text':' EquivIterator iterates over all strings that are equivalent to a given','line_number':108,'multiline':False]
['text':' string, s. Note that EquivIterator will never yield s itself.','line_number':109,'multiline':False]
['text':' Constructor. hash stores the equivalence relationships; s is the string','line_number':112,'multiline':False]
['text':' for which we find equivalent strings.','line_number':113,'multiline':False]
['text':' next returns the next equivalent string or NULL if there are no more.','line_number':120,'multiline':False]
['text':' If s has no equivalent strings, next returns NULL on the first call.','line_number':121,'multiline':False]
['text':' makeEquivalent makes lhs and rhs equivalent by updating the equivalence','line_number':145,'multiline':False]
['text':' relations in hash accordingly.','line_number':146,'multiline':False]
['text':' already equivalent','line_number':155,'multiline':False]
['text':' Already equivalent','line_number':166,'multiline':False]
['text':' Not equivalent. Must join.','line_number':172,'multiline':False]
['text':' Neither lhs or rhs belong to an equivalence circle, so we form','line_number':176,'multiline':False]
['text':' a new equivalnce circle of just lhs and rhs.','line_number':177,'multiline':False]
['text':' lhs belongs to an equivalence circle, but rhs does not, so we link','line_number':181,'multiline':False]
['text':' rhs into lhs' circle.','line_number':182,'multiline':False]
['text':' rhs belongs to an equivlance circle, but lhs does not, so we link','line_number':186,'multiline':False]
['text':' lhs into rhs' circle.','line_number':187,'multiline':False]
['text':' Both lhs and rhs belong to different equivalnce circles. We link','line_number':191,'multiline':False]
['text':' them together to form one single, larger equivalnce circle.','line_number':192,'multiline':False]
['text':' countEquivalent counts how many strings are equivalent to s.','line_number':206,'multiline':False]
['text':' hash stores all the equivalnce relations.','line_number':207,'multiline':False]
['text':' countEquivalent does not include s itself in the count.','line_number':208,'multiline':False]
['text':'------------------------------------------------------------','line_number':227,'multiline':False]
['text':' Code','line_number':228,'multiline':False]
['text':'*
 * Cleanup callback func
 ','line_number':230,'multiline':True]
['text':'*
 * Cleanup callback func
 ','line_number':244,'multiline':True]
['text':'*
 * Deleter for OlsonToMetaMappingEntry
 ','line_number':256,'multiline':True]
['text':'*
 * Deleter for gCurrSymbolsEquiv.
 ','line_number':265,'multiline':True]
['text':'*
 * Unfortunately, we have to convert the UChar* currency code to char*
 * to use it as a resource key.
 ','line_number':274,'multiline':True]
['text':'*
 * Internal function to look up currency data.  Result is an array of
 * four integers.  The first is the fraction digits.  The second is the
 * rounding increment, or 0 if none.  The rounding increment is in
 * units of 10^(-fraction_digits).  The third and fourth are the same
 * except that they are those used in cash transations ( cashDigits
 * and cashRounding ).
 ','line_number':285,'multiline':True]
['text':' Get CurrencyMeta resource out of root locale file.  [This may','line_number':303,'multiline':False]
['text':' move out of the root locale file later; if it does, update this','line_number':304,'multiline':False]
['text':' code.]','line_number':305,'multiline':False]
['text':' Config/build error; return hard-coded defaults','line_number':311,'multiline':False]
['text':' Look up our currency, or if that's not available, then DEFAULT','line_number':315,'multiline':False]
['text':' local error code: soft failure','line_number':317,'multiline':False]
['text':' Config/build error; return hard-coded defaults','line_number':325,'multiline':False]
['text':' Config/build error; return hard-coded defaults','line_number':333,'multiline':False]
['text':' -------------------------------------','line_number':347,'multiline':False]
['text':' ------------------------------------------','line_number':355,'multiline':False]
['text':'','line_number':356,'multiline':False]
['text':' Registration','line_number':357,'multiline':False]
['text':'','line_number':358,'multiline':False]
['text':'-------------------------------------------','line_number':359,'multiline':False]
['text':' don't use ICUService since we don't need fallback','line_number':361,'multiline':False]
['text':' register for the first time ','line_number':398,'multiline':True]
['text':' register cleanup of the mutex ','line_number':435,'multiline':True]
['text':' This doesn't need to be thread safe. It's for u_cleanup only. ','line_number':448,'multiline':True]
['text':' -------------------------------------','line_number':458,'multiline':False]
['text':' -------------------------------------','line_number':471,'multiline':False]
['text':' UCONFIG_NO_SERVICE ','line_number':481,'multiline':True]
['text':' -------------------------------------','line_number':483,'multiline':False]
['text':'*
 * Release all static memory held by currency.
 ','line_number':485,'multiline':True]
['text':'The declaration here is needed so currency_cleanup(void)
 * can call this function.
 ','line_number':488,'multiline':True]
['text':'
     * There might be some cached currency data or isoCodes data.
     ','line_number':499,'multiline':True]
['text':' -------------------------------------','line_number':510,'multiline':False]
['text':' ISO currency codes are alpha3 codes.','line_number':523,'multiline':False]
['text':' get country or country_variant in `id'','line_number':535,'multiline':False]
['text':' Remove variants, which is only needed for registration.','line_number':552,'multiline':False]
['text':' Currency code from data file.','line_number':558,'multiline':False]
['text':' No point looking in the data for an empty string.','line_number':560,'multiline':False]
['text':' This is what we would get.','line_number':561,'multiline':False]
['text':' Look up the CurrencyMap element in the root bundle.','line_number':564,'multiline':False]
['text':' We don't know about it.  Check to see if we support the variant.','line_number':576,'multiline':False]
['text':' TODO: Loop over the shortened id rather than recursing and','line_number':579,'multiline':False]
['text':' looking again for a currency keyword.','line_number':580,'multiline':False]
['text':' There is nothing to fallback to. Report the failure/warning if possible.','line_number':584,'multiline':False]
['text':' end registration','line_number':595,'multiline':False]
['text':'*
 * Modify the given locale name by removing the rightmost _-delimited
 * element.  If there is none, empty the string ("" == root).
 * NOTE: The string "root" is not recognized; do not use it.
 * @return TRUE if the fallback happened; FALSE if locale is already
 * root ("").
 ','line_number':597,'multiline':True]
['text':' HACK: See #13368.  We need "en_GB" to fall back to "en_001" instead of "en"','line_number':610,'multiline':False]
['text':' in order to consume the correct data strings.  This hack will be removed','line_number':611,'multiline':False]
['text':' when proper data sink loading is implemented here.','line_number':612,'multiline':False]
['text':' NOTE: "001" adds 1 char over "GB".  However, both call sites allocate','line_number':613,'multiline':False]
['text':' arrays with length ULOC_FULLNAME_CAPACITY (plenty of room for en_001).','line_number':614,'multiline':False]
['text':'
    char *i = uprv_strrchr(loc, '_');
    if (i == NULL) {
        i = loc;
    }
    *i = 0;
 ','line_number':619,'multiline':True]
['text':' fillin','line_number':634,'multiline':False]
['text':' fillin','line_number':635,'multiline':False]
['text':' Look up the Currencies resource for the given locale.  The','line_number':638,'multiline':False]
['text':' Currencies locale data looks like this:','line_number':639,'multiline':False]
['text':'|en {','line_number':640,'multiline':False]
['text':'|  Currencies {','line_number':641,'multiline':False]
['text':'|    USD { "US$", "US Dollar" }','line_number':642,'multiline':False]
['text':'|    CHF { "Sw F", "Swiss Franc" }','line_number':643,'multiline':False]
['text':'|    INR { "=0#Rs|1#Re|1<Rs", "=0#Rupees|1#Rupee|1<Rupees" }','line_number':644,'multiline':False]
['text':'|    //...','line_number':645,'multiline':False]
['text':'|  }','line_number':646,'multiline':False]
['text':'|}','line_number':647,'multiline':False]
['text':' In the future, resource bundles may implement multi-level','line_number':659,'multiline':False]
['text':' fallback.  That is, if a currency is not found in the en_US','line_number':660,'multiline':False]
['text':' Currencies data, then the en Currencies data will be searched.','line_number':661,'multiline':False]
['text':' Currently, if a Currencies datum exists in en_US and en, the','line_number':662,'multiline':False]
['text':' en_US entry hides that in en.','line_number':663,'multiline':False]
['text':' We want multi-level fallback for this resource, so we implement','line_number':665,'multiline':False]
['text':' it manually.','line_number':666,'multiline':False]
['text':' Use a separate UErrorCode here that does not propagate out of','line_number':668,'multiline':False]
['text':' this function.','line_number':669,'multiline':False]
['text':' Normalize the keyword value to uppercase ','line_number':682,'multiline':True]
['text':' If we've succeeded we're done.  Otherwise, try to fallback.','line_number':720,'multiline':False]
['text':' If that fails (because we are already at root) then exit.','line_number':721,'multiline':False]
['text':' We no longer support choice format data in names.  Data should not contain','line_number':729,'multiline':False]
['text':' choice patterns.','line_number':730,'multiline':False]
['text':' If we fail to find a match, use the ISO 4217 code','line_number':739,'multiline':False]
['text':' Should == ISO_CURRENCY_CODE_LENGTH, but maybe not...?','line_number':740,'multiline':False]
['text':' fillin','line_number':750,'multiline':False]
['text':' Look up the Currencies resource for the given locale.  The','line_number':752,'multiline':False]
['text':' Currencies locale data looks like this:','line_number':753,'multiline':False]
['text':'|en {','line_number':754,'multiline':False]
['text':'|  CurrencyPlurals {','line_number':755,'multiline':False]
['text':'|    USD{','line_number':756,'multiline':False]
['text':'|      one{"US dollar"}','line_number':757,'multiline':False]
['text':'|      other{"US dollars"}','line_number':758,'multiline':False]
['text':'|    }','line_number':759,'multiline':False]
['text':'|  }','line_number':760,'multiline':False]
['text':'|}','line_number':761,'multiline':False]
['text':' Use a separate UErrorCode here that does not propagate out of','line_number':767,'multiline':False]
['text':' this function.','line_number':768,'multiline':False]
['text':' Fetch resource with multi-level resource inheritance fallback','line_number':787,'multiline':False]
['text':'  fall back to "other"','line_number':792,'multiline':False]
['text':' fall back to long name in Currencies','line_number':797,'multiline':False]
['text':' If we've succeeded we're done.  Otherwise, try to fallback.','line_number':804,'multiline':False]
['text':' If that fails (because we are already at root) then exit.','line_number':805,'multiline':False]
['text':' If we fail to find a match, use the ISO 4217 code','line_number':815,'multiline':False]
['text':' Should == ISO_CURRENCY_CODE_LENGTH, but maybe not...?','line_number':816,'multiline':False]
['text':'========================================================================','line_number':822,'multiline':False]
['text':' Following are structure and function for parsing currency names','line_number':823,'multiline':False]
['text':' TODO: a better way to define this?','line_number':827,'multiline':False]
['text':' key','line_number':831,'multiline':False]
['text':' value','line_number':832,'multiline':False]
['text':' value length','line_number':833,'multiline':False]
['text':' flags','line_number':834,'multiline':False]
['text':' Comparison function used in quick sort.','line_number':847,'multiline':False]
['text':' Give a locale, return the maximum number of currency names associated with','line_number':870,'multiline':False]
['text':' this locale.','line_number':871,'multiline':False]
['text':' It gets currency names from resource bundles using fallback.','line_number':872,'multiline':False]
['text':' It is the maximum number because in the fallback chain, some of the ','line_number':873,'multiline':False]
['text':' currency names are duplicated.','line_number':874,'multiline':False]
['text':' For example, given locale as "en_US", the currency names get from resource','line_number':875,'multiline':False]
['text':' bundle in "en_US" and "en" are duplicated. The fallback mechanism will count','line_number':876,'multiline':False]
['text':' all currency names in "en_US" and "en".','line_number':877,'multiline':False]
['text':' TODO: ures_openDirect?','line_number':889,'multiline':False]
['text':' currency symbol','line_number':897,'multiline':False]
['text':' iso code','line_number':901,'multiline':False]
['text':' long name','line_number':902,'multiline':False]
['text':' currency plurals','line_number':906,'multiline':False]
['text':' Collect all available currency names associated with the given locale','line_number':941,'multiline':False]
['text':' (enable fallback chain).','line_number':942,'multiline':False]
['text':' Read currenc names defined in resource bundle "Currencies" and','line_number':943,'multiline':False]
['text':' "CurrencyPlural", enable fallback chain.','line_number':944,'multiline':False]
['text':' return the malloc-ed currency name arrays and the total number of currency','line_number':945,'multiline':False]
['text':' names in the array.','line_number':946,'multiline':False]
['text':' Look up the Currencies resource for the given locale.','line_number':956,'multiline':False]
['text':' Get maximum currency name count first.','line_number':965,'multiline':False]
['text':' currency name','line_number':979,'multiline':False]
['text':' currency ISO code','line_number':980,'multiline':False]
['text':' Using hash to remove duplicates caused by locale fallback','line_number':988,'multiline':False]
['text':' TODO: ures_openDirect','line_number':993,'multiline':False]
['text':' TODO: uhash_put wont change key/value?','line_number':1001,'multiline':False]
['text':' Add currency symbol.','line_number':1013,'multiline':False]
['text':' Add equivalent symbols','line_number':1018,'multiline':False]
['text':' Add currency long name.','line_number':1032,'multiline':False]
['text':' put (iso, 3, and iso) in to array','line_number':1040,'multiline':False]
['text':' Add currency ISO code.','line_number':1041,'multiline':False]
['text':' Must convert iso[] into Unicode','line_number':1044,'multiline':False]
['text':' currency plurals','line_number':1052,'multiline':False]
['text':' Using hash to remove duplicated ISO codes in fallback chain.','line_number':1059,'multiline':False]
['text':' TODO: remove duplicates between singular name and ','line_number':1073,'multiline':False]
['text':' currency long name?','line_number':1074,'multiline':False]
['text':' quick sort the struct','line_number':1096,'multiline':False]
['text':' fail on hashtable errors','line_number':1124,'multiline':False]
['text':' @param  currencyNames: currency names array','line_number':1135,'multiline':False]
['text':' @param  indexInCurrencyNames: the index of the character in currency names ','line_number':1136,'multiline':False]
['text':'         array against which the comparison is done','line_number':1137,'multiline':False]
['text':' @param  key: input text char to compare against','line_number':1138,'multiline':False]
['text':' @param  begin(IN/OUT): the begin index of matching range in currency names array','line_number':1139,'multiline':False]
['text':' @param  end(IN/OUT): the end index of matching range in currency names array.','line_number':1140,'multiline':False]
['text':' compute mid point.','line_number':1152,'multiline':False]
['text':' Find a match, and looking for ranges','line_number':1163,'multiline':False]
['text':' Now do two more binary searches. First, on the left side for','line_number':1164,'multiline':False]
['text':' the greatest L such that CurrencyNameStruct[L] < key.','line_number':1165,'multiline':False]
['text':' Now for the second search, finding the least R such that','line_number':1199,'multiline':False]
['text':' key < CurrencyNameStruct[R].','line_number':1200,'multiline':False]
['text':' now, found the range. check whether there is exact match','line_number':1233,'multiline':False]
['text':' find range and exact match.','line_number':1235,'multiline':False]
['text':' find range, but no exact match.','line_number':1237,'multiline':False]
['text':' failed to find range.','line_number':1243,'multiline':False]
['text':' Linear search "text" in "currencyNames".','line_number':1247,'multiline':False]
['text':' @param  begin, end: the begin and end index in currencyNames, within which','line_number':1248,'multiline':False]
['text':'         range should the search be performed.','line_number':1249,'multiline':False]
['text':' @param  textLen: the length of the text to be compared','line_number':1250,'multiline':False]
['text':' @param  maxMatchLen(IN/OUT): passing in the computed max matching length','line_number':1251,'multiline':False]
['text':'                              pass out the new max  matching length','line_number':1252,'multiline':False]
['text':' @param  maxMatchIndex: the index in currencyName which has the longest','line_number':1253,'multiline':False]
['text':'                        match with input text.','line_number':1254,'multiline':False]
['text':' Check for partial matches.','line_number':1274,'multiline':False]
['text':' Find longest match between "text" and currency names in "currencyNames".','line_number':1287,'multiline':False]
['text':' @param  total_currency_count: total number of currency names in CurrencyNames.','line_number':1288,'multiline':False]
['text':' @param  textLen: the length of the text to be compared','line_number':1289,'multiline':False]
['text':' @param  maxMatchLen: passing in the computed max matching length','line_number':1290,'multiline':False]
['text':'                              pass out the new max  matching length','line_number':1291,'multiline':False]
['text':' @param  maxMatchIndex: the index in currencyName which has the longest','line_number':1292,'multiline':False]
['text':'                        match with input text.','line_number':1293,'multiline':False]
['text':' It is a variant of binary search.','line_number':1305,'multiline':False]
['text':' For example, given the currency names in currencyNames array are:','line_number':1306,'multiline':False]
['text':' A AB ABC AD AZ B BB BBEX BBEXYZ BS C D E....','line_number':1307,'multiline':False]
['text':' and the input text is BBEXST','line_number':1308,'multiline':False]
['text':' The first round binary search search "B" in the text against','line_number':1309,'multiline':False]
['text':' the first char in currency names, and find the first char matching range','line_number':1310,'multiline':False]
['text':' to be "B BB BBEX BBEXYZ BS" (and the maximum matching "B").','line_number':1311,'multiline':False]
['text':' The 2nd round binary search search the second "B" in the text against','line_number':1312,'multiline':False]
['text':' the 2nd char in currency names, and narrow the matching range to','line_number':1313,'multiline':False]
['text':' "BB BBEX BBEXYZ" (and the maximum matching "BB").','line_number':1314,'multiline':False]
['text':' The 3rd round returnes the range as "BBEX BBEXYZ" (without changing','line_number':1315,'multiline':False]
['text':' maximum matching).','line_number':1316,'multiline':False]
['text':' The 4th round returns the same range (the maximum matching is "BBEX").','line_number':1317,'multiline':False]
['text':' The 5th round returns no matching range.','line_number':1318,'multiline':False]
['text':' matchIndex saves the one with exact match till the current point.','line_number':1320,'multiline':False]
['text':' [binarySearchBegin, binarySearchEnd] saves the matching range.','line_number':1321,'multiline':False]
['text':' did not find the range','line_number':1325,'multiline':False]
['text':' find an exact match for text from text[0] to text[index] ','line_number':1330,'multiline':False]
['text':' in currencyNames array.','line_number':1331,'multiline':False]
['text':' linear search if within threshold.','line_number':1336,'multiline':False]
['text':'========================= currency name cache =====================','line_number':1347,'multiline':False]
['text':'key','line_number':1349,'multiline':False]
['text':' currency names, case insensitive','line_number':1350,'multiline':False]
['text':' value','line_number':1351,'multiline':False]
['text':' currency name count','line_number':1352,'multiline':False]
['text':' currency symbols and ISO code, case sensitive','line_number':1353,'multiline':False]
['text':' value','line_number':1354,'multiline':False]
['text':' count','line_number':1355,'multiline':False]
['text':' reference count.','line_number':1356,'multiline':False]
['text':' reference count is set to 1 when an entry is put to cache.','line_number':1357,'multiline':False]
['text':' it increases by 1 before accessing, and decreased by 1 after accessing.','line_number':1358,'multiline':False]
['text':' The entry is deleted when ref count is zero, which means ','line_number':1359,'multiline':False]
['text':' the entry is replaced out of cache and no process is accessing it.','line_number':1360,'multiline':False]
['text':' Reserve 10 cache entries.','line_number':1367,'multiline':False]
['text':' Using an index to indicate which entry to be replaced when cache is full.','line_number':1369,'multiline':False]
['text':' It is a simple round-robin replacement strategy.','line_number':1370,'multiline':False]
['text':' Cache deletion','line_number':1375,'multiline':False]
['text':' Cache clean up','line_number':1395,'multiline':False]
['text':'*
 * Loads the currency name data from the cache, or from resource bundles if necessary.
 * The refCount is automatically incremented.  It is the caller's responsibility
 * to decrement it when done!
 ','line_number':1408,'multiline':True]
['text':' in order to handle racing correctly,','line_number':1423,'multiline':False]
['text':' not putting 'search' in a separate function.','line_number':1424,'multiline':False]
['text':' check again.','line_number':1444,'multiline':False]
['text':' insert new entry to ','line_number':1453,'multiline':False]
['text':' currentCacheEntryIndex % CURRENCY_NAME_CACHE_NUM','line_number':1454,'multiline':False]
['text':' and remove the existing entry ','line_number':1455,'multiline':False]
['text':' currentCacheEntryIndex % CURRENCY_NAME_CACHE_NUM','line_number':1456,'multiline':False]
['text':' from cache.','line_number':1457,'multiline':False]
['text':' delete if the ref count is zero','line_number':1461,'multiline':False]
['text':' one for cache, one for reference','line_number':1473,'multiline':False]
['text':' remove','line_number':1491,'multiline':False]
['text':' Make sure partialMatchLen is initialized','line_number':1528,'multiline':False]
['text':' case in-sensitive comparison against currency names','line_number':1533,'multiline':False]
['text':' not name only','line_number':1543,'multiline':False]
['text':' case sensitive comparison against currency symbols and ISO code.','line_number':1544,'multiline':False]
['text':' decrease reference count','line_number':1566,'multiline':False]
['text':' decrease reference count','line_number':1594,'multiline':False]
['text':'*
 * Internal method.  Given a currency ISO code and a locale, return
 * the "static" currency name.  This is usually the same as the
 * UCURR_SYMBOL_NAME, but if the latter is a choice format, then the
 * format is applied to the number 2.0 (to yield the more common
 * plural) to return a static name.
 *
 * This is used for backward compatibility with old currency logic in
 * DecimalFormat and DecimalFormatSymbols.
 ','line_number':1599,'multiline':True]
['text':' isChoiceFormat ','line_number':1617,'multiline':True]
['text':' If the meta data is invalid, return 0.0','line_number':1673,'multiline':False]
['text':' A rounding value of 0 or 1 indicates no rounding.','line_number':1677,'multiline':False]
['text':' Return (increment) / 10^(fracDigits).  The only actual rounding data,','line_number':1679,'multiline':False]
['text':' as of this writing, is CHF { 2, 5 }.','line_number':1680,'multiline':False]
['text':' UCurrCurrencyType ','line_number':1692,'multiline':True]
['text':'
Please keep this list in alphabetical order.
You can look at the CLDR supplemental data or ISO-4217 for the meaning of some
of these items.
ISO-4217: http://www.iso.org/iso/en/prods-services/popstds/currencycodeslist.html
','line_number':1696,'multiline':True]
['text':' questionable, remove?','line_number':1794,'multiline':False]
['text':' questionable, remove?','line_number':1856,'multiline':False]
['text':' questionable, remove?','line_number':1883,'multiline':False]
['text':' Leave here to denote the end of the list.','line_number':2009,'multiline':False]
['text':'pErrorCode','line_number':2016,'multiline':True]
['text':' Count the number of items matching the type we are looking for. ','line_number':2021,'multiline':True]
['text':'pErrorCode','line_number':2033,'multiline':True]
['text':' Find the next in the list that matches the type we are looking for. ','line_number':2037,'multiline':True]
['text':' Currency codes are only 3 chars long ','line_number':2043,'multiline':True]
['text':' We enumerated too far. ','line_number':2048,'multiline':True]
['text':'pErrorCode','line_number':2056,'multiline':True]
['text':' Look up the CurrencyMap element in the root bundle.','line_number':2070,'multiline':False]
['text':' process each entry in currency map ','line_number':2075,'multiline':False]
['text':' get the currency resource','line_number':2077,'multiline':False]
['text':' process each currency ','line_number':2079,'multiline':False]
['text':' get the currency resource','line_number':2082,'multiline':False]
['text':' get the ISO code','line_number':2090,'multiline':False]
['text':' get from date','line_number':2098,'multiline':False]
['text':' get to date','line_number':2111,'multiline':False]
['text':' Note: gIsoCodes is const. Once set up here it is never altered,','line_number':2174,'multiline':False]
['text':'       and read only access is safe without synchronization.','line_number':2175,'multiline':False]
['text':' No need to mark the exemplar character as an equivalent','line_number':2188,'multiline':False]
['text':' local variables','line_number':2274,'multiline':False]
['text':' get country or country_variant in `id'','line_number':2278,'multiline':False]
['text':' Remove variants, which is only needed for registration.','line_number':2286,'multiline':False]
['text':' Look up the CurrencyMap element in the root bundle.','line_number':2293,'multiline':False]
['text':' Using the id derived from the local, get the currency data','line_number':2297,'multiline':False]
['text':' process each currency to see which one is valid for the given date','line_number':2300,'multiline':False]
['text':' get the currency resource','line_number':2305,'multiline':False]
['text':' get the from date','line_number':2308,'multiline':False]
['text':' close open resources','line_number':2342,'multiline':False]
['text':' end For loop','line_number':2346,'multiline':False]
['text':' end if (U_SUCCESS(localStatus))','line_number':2347,'multiline':False]
['text':' Check for errors','line_number':2351,'multiline':False]
['text':' There is nothing to fallback to. ','line_number':2354,'multiline':False]
['text':' Report the failure/warning if possible.','line_number':2355,'multiline':False]
['text':' no errors','line_number':2361,'multiline':False]
['text':' If we got here, either error code is invalid or','line_number':2367,'multiline':False]
['text':' some argument passed is no good.','line_number':2368,'multiline':False]
['text':' check the arguments passed','line_number':2386,'multiline':False]
['text':' local variables','line_number':2389,'multiline':False]
['text':' get country or country_variant in `id'','line_number':2393,'multiline':False]
['text':' Remove variants, which is only needed for registration.','line_number':2400,'multiline':False]
['text':' Look up the CurrencyMap element in the root bundle.','line_number':2407,'multiline':False]
['text':' Using the id derived from the local, get the currency data','line_number':2411,'multiline':False]
['text':' process each currency to see which one is valid for the given date','line_number':2414,'multiline':False]
['text':' requested index is out of bounds','line_number':2420,'multiline':False]
['text':' get the currency resource','line_number':2427,'multiline':False]
['text':' get the from date','line_number':2431,'multiline':False]
['text':' close open resources','line_number':2473,'multiline':False]
['text':' check for loop exit','line_number':2477,'multiline':False]
['text':' end For loop','line_number':2483,'multiline':False]
['text':' Check for errors','line_number':2488,'multiline':False]
['text':' There is nothing to fallback to. ','line_number':2491,'multiline':False]
['text':' Report the failure/warning if possible.','line_number':2492,'multiline':False]
['text':' no errors','line_number':2498,'multiline':False]
['text':' write out the currency value','line_number':2501,'multiline':False]
['text':' return null terminated currency string','line_number':2510,'multiline':False]
['text':' illegal argument encountered','line_number':2515,'multiline':False]
['text':' If we got here, either error code is invalid or','line_number':2521,'multiline':False]
['text':' some argument passed is no good.','line_number':2522,'multiline':False]
['text':' Resolve region','line_number':2537,'multiline':False]
['text':' Read value from supplementalData','line_number':2541,'multiline':False]
['text':' With commonlyUsed=true, we do not put','line_number':2574,'multiline':False]
['text':' currencies for other regions in the','line_number':2575,'multiline':False]
['text':' result list.','line_number':2576,'multiline':False]
['text':' Currently, an empty ARRAY is mixed in.','line_number':2586,'multiline':False]
['text':' optimize - use the utf-8 string ','line_number':2598,'multiline':True]
['text':' Do nothing here...','line_number':2618,'multiline':False]
['text':' Currently active currency for the target country','line_number':2624,'multiline':False]
['text':' This could happen if no valid region is supplied in the input','line_number':2637,'multiline':False]
['text':' locale. In this case, we use the CLDR's default.','line_number':2638,'multiline':False]
['text':' Consolidate the list','line_number':2643,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':2699,'multiline':True]
['text':'eof','line_number':2701,'multiline':False]
