['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2003-2013, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  ucm.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2003jun20
*   created by: Markus W. Scherer
*
*   This file reads a .ucm file, stores its mappings and sorts them.
*   It implements handling of Unicode conversion mappings from .ucm files
*   for makeconv, canonucm, rptp2ucm, etc.
*
*   Unicode code point sequences with a length of more than 1,
*   as well as byte sequences with more than 4 bytes or more than one complete
*   character sequence are handled to support m:n mappings.
','line_number':3,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':42,'multiline':True]
['text':' mapping comparisons ------------------------------------------------------ ','line_number':89,'multiline':True]
['text':' compare two single code points ','line_number':98,'multiline':True]
['text':' get pointers to the code point sequences ','line_number':102,'multiline':True]
['text':' get the minimum length ','line_number':106,'multiline':True]
['text':' compare the code points ','line_number':113,'multiline':True]
['text':' compare the lengths ','line_number':121,'multiline':True]
['text':'
     * A lexical comparison is used for sorting in the builder, to allow
     * an efficient search for a byte sequence that could be a prefix
     * of a previously entered byte sequence.
     *
     * Comparing by lengths first is for compatibility with old .ucm tools
     * like canonucm and rptp2ucm.
     ','line_number':132,'multiline':True]
['text':' get the minimum length and continue ','line_number':141,'multiline':True]
['text':' compare lengths first ','line_number':148,'multiline':True]
['text':' get pointers to the byte sequences ','line_number':157,'multiline':True]
['text':' compare the bytes ','line_number':161,'multiline':True]
['text':' compare the lengths ','line_number':169,'multiline':True]
['text':' compare UCMappings for sorting ','line_number':173,'multiline':True]
['text':' choose which side to compare first ','line_number':180,'multiline':True]
['text':' Unicode then bytes ','line_number':182,'multiline':True]
['text':' not lexically, like canonucm ','line_number':185,'multiline':True]
['text':' bytes then Unicode ','line_number':188,'multiline':True]
['text':' lexically, for builder ','line_number':189,'multiline':True]
['text':' compare the flags ','line_number':199,'multiline':True]
['text':' sorting by Unicode first sorts mappings directly ','line_number':203,'multiline':True]
['text':' sorting by bytes first sorts the reverseMap; use indirection to mappings ','line_number':211,'multiline':True]
['text':' 1. sort by Unicode first ','line_number':233,'multiline':True]
['text':' build the reverseMap ','line_number':238,'multiline':True]
['text':'
         * allocate mappingsCapacity instead of mappingsLength so that
         * if mappings are added, the reverseMap need not be
         * reallocated each time
         * (see ucm_moveMappings() and ucm_addMapping())
         ','line_number':240,'multiline':True]
['text':' 2. sort reverseMap by mappings bytes first ','line_number':256,'multiline':True]
['text':'
 * remove mappings with their move flag set from the base table
 * and move some of them (with UCM_MOVE_TO_EXT) to the extension table
 ','line_number':270,'multiline':True]
['text':' reset the move flag ','line_number':285,'multiline':True]
['text':' add the mapping to the extension table ','line_number':289,'multiline':True]
['text':' remove this mapping: move the last base mapping down and overwrite the current one ','line_number':293,'multiline':True]
['text':' skip irrelevant mappings on both sides ','line_number':329,'multiline':True]
['text':' compare the base and extension mappings ','line_number':354,'multiline':True]
['text':'
                 * mapping in base but not in ext, move it
                 *
                 * if ext is DBCS, move DBCS mappings here
                 * and check SBCS ones for Unicode prefix below
                 ','line_number':358,'multiline':True]
['text':' does mb map from an input sequence that is a prefix of me's? ','line_number':367,'multiline':True]
['text':' mark this mapping to be moved to the extension table ','line_number':372,'multiline':True]
['text':'
             * same output: remove the extension mapping,
             * otherwise treat as an error
             ','line_number':387,'multiline':True]
['text':' mapping in base but not in ext, move it ','line_number':397,'multiline':True]
['text':' cmp>0 ','line_number':411,'multiline':True]
['text':' skip irrelevant mappings on both sides ','line_number':438,'multiline':True]
['text':'
                 * comparing a base against a DBCS extension:
                 * leave SBCS base mappings alone
                 ','line_number':446,'multiline':True]
['text':' compare the base and extension mappings ','line_number':471,'multiline':True]
['text':' mapping in base but not in ext, move it ','line_number':475,'multiline':True]
['text':'
             * does mb map from an input sequence that is a prefix of me's?
             * for SI/SO tables, a single byte is never a prefix because it
             * occurs in a separate single-byte state
             ','line_number':479,'multiline':True]
['text':' mark this mapping to be moved to the extension table ','line_number':489,'multiline':True]
['text':'
             * same output: remove the extension mapping,
             * otherwise treat as an error
             ','line_number':504,'multiline':True]
['text':' mapping in base but not in ext, move it ','line_number':514,'multiline':True]
['text':' cmp>0 ','line_number':528,'multiline':True]
['text':' if we have an extension table, we must always use precision flags ','line_number':562,'multiline':True]
['text':' checking requires both tables to be sorted ','line_number':572,'multiline':True]
['text':' check ','line_number':576,'multiline':True]
['text':' merge tables for rptp2ucm ------------------------------------------------ ','line_number':598,'multiline':True]
['text':' equal: roundtrip, nothing to do (flags are initially 0) ','line_number':621,'multiline':True]
['text':'
             * the fromU mapping does not have a toU counterpart:
             * fallback Unicode->codepage
             ','line_number':628,'multiline':True]
['text':' SUB mapping ','line_number':636,'multiline':True]
['text':' normal fallback ','line_number':638,'multiline':True]
['text':'
             * the toU mapping does not have a fromU counterpart:
             * (reverse) fallback codepage->Unicode, copy it to the fromU table
             ','line_number':644,'multiline':True]
['text':' ignore reverse fallbacks to Unicode SUB ','line_number':649,'multiline':True]
['text':' reverse fallback ','line_number':651,'multiline':True]
['text':' the table may have been reallocated ','line_number':654,'multiline':True]
['text':' either one or both tables are exhausted ','line_number':663,'multiline':True]
['text':' leftover fromU mappings are fallbacks ','line_number':665,'multiline':True]
['text':' SUB mapping ','line_number':670,'multiline':True]
['text':' normal fallback ','line_number':672,'multiline':True]
['text':' leftover toU mappings are reverse fallbacks ','line_number':680,'multiline':True]
['text':' ignore reverse fallbacks to Unicode SUB ','line_number':682,'multiline':True]
['text':' reverse fallback ','line_number':684,'multiline':True]
['text':' separate extension mappings out of base table for rptp2ucm --------------- ','line_number':695,'multiline':True]
['text':' illegal byte sequence ','line_number':724,'multiline':True]
['text':' ucm parser --------------------------------------------------------------- ','line_number':745,'multiline':True]
['text':' skip an optional plus sign ','line_number':756,'multiline':True]
['text':' parse a mapping line; must not be empty ','line_number':783,'multiline':True]
['text':' parse code points ','line_number':798,'multiline':True]
['text':' skip an optional plus sign ','line_number':800,'multiline':True]
['text':' parse bytes ','line_number':846,'multiline':True]
['text':' skip everything until the fallback indicator, even the start of a comment ','line_number':858,'multiline':True]
['text':' no fallback indicator ','line_number':861,'multiline':True]
['text':' general APIs ------------------------------------------------------------- ','line_number':880,'multiline':True]
['text':' make the mappings array larger ','line_number':926,'multiline':True]
['text':' the reverseMap must be reallocated in a new sort ','line_number':941,'multiline':True]
['text':' set unicodeMask ','line_number':991,'multiline':True]
['text':' there are supplementary code points ','line_number':995,'multiline':True]
['text':' there are surrogate code points ','line_number':997,'multiline':True]
['text':' set flagsType ','line_number':1001,'multiline':True]
['text':' check validity of the bytes and count the characters in them ','line_number':1050,'multiline':True]
['text':' illegal byte sequence ','line_number':1053,'multiline':True]
['text':'
     * Suitable for an ICU conversion base table means:
     * - a 1:1 mapping (1 Unicode code point : 1 byte sequence)
     * - precision flag 0..3
     * - SBCS: any 1:1 mapping
     *         (the table stores additional bits to distinguish mapping types)
     * - MBCS: not a |2 SUB mapping for <subchar1>
     * - MBCS: not a |1 fallback to 0x00
     * - MBCS: not a multi-byte mapping with leading 0x00 bytes
     *
     * Further restrictions for fromUnicode tables
     * are enforced in makeconv (MBCSOkForBaseFromUnicode()).
     *
     * All of the MBCS fromUnicode specific tests could be removed from here,
     * but the ones above are for unusual mappings, and removing the tests
     * from here would change canonucm output which seems gratuitous.
     * (Markus Scherer 2006-nov-28)
     *
     * Exception: All implicit mappings (f<0) that need to be moved
     * because of fromUnicode restrictions _must_ be moved here because
     * makeconv uses a hack for moving mappings only for the fromUnicode table
     * that only works with non-negative values of f.
     ','line_number':1057,'multiline':True]
['text':' suitable for a base table ','line_number':1086,'multiline':True]
['text':' needs to go into an extension table ','line_number':1088,'multiline':True]
['text':' check validity of the bytes and count the characters in them ','line_number':1106,'multiline':True]
['text':' illegal byte sequence ','line_number':1109,'multiline':True]
['text':' not used - adding a mapping for an extension-only table before its base table is read ','line_number':1114,'multiline':True]
['text':'
     * Add the mapping to the base table if this is requested and suitable.
     * Otherwise, add it to the extension table.
     ','line_number':1118,'multiline':True]
['text':' ignore empty and comment lines ','line_number':1139,'multiline':True]
['text':' read the next line ','line_number':1164,'multiline':True]
['text':' remove CR LF ','line_number':1171,'multiline':True]
['text':' ignore empty and comment lines ','line_number':1178,'multiline':True]
['text':' stop at the end of the mapping table ','line_number':1183,'multiline':True]
