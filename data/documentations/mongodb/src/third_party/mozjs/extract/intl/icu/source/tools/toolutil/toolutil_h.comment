['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 1999-2013, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  toolutil.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 1999nov19
*   created by: Markus W. Scherer
*
*   This file defines utility functions for ICU tools like genccode.
','line_number':3,'multiline':True]
['text':'*
 * ErrorCode subclass for use in ICU command-line tools.
 * The destructor calls handleFailure() which calls exit(errorCode) when isFailure().
 ','line_number':39,'multiline':True]
['text':'*
     * @param loc A short string describing where the IcuToolErrorCode is used.
     ','line_number':45,'multiline':True]
['text':'
 * For Windows, a path/filename may be the short (8.3) version
 * of the "real", long one. In this case, the short one
 * is abbreviated and contains a tilde etc.
 * This function returns a pointer to the original pathname
 * if it is the "real" one itself, and a pointer to a static
 * buffer (not thread-safe) containing the long version
 * if the pathname is indeed abbreviated.
 *
 * On platforms other than Windows, this function always returns
 * the input pathname pointer.
 *
 * This function is especially useful in tools that are called
 * by a batch file for loop, which yields short pathnames on Win9x.
 ','line_number':60,'multiline':True]
['text':'*
 * Find the basename at the end of a pathname, i.e., the part
 * after the last file separator, and return a pointer
 * to this part of the pathname.
 * If the pathname only contains a basename and no file separator,
 * then the pathname pointer itself is returned.
 *','line_number':78,'multiline':True]
['text':'*
 * Find the directory name of a pathname, that is, everything
 * up to but not including the last file separator. 
 *
 * If successful, copies the directory name into the output buffer along with
 * a terminating NULL. 
 *
 * If there isn't a directory name in the path, it returns an empty string.
 * @param path the full pathname to inspect. 
 * @param buffer the output buffer
 * @param bufLen the output buffer length
 * @param status error code- may return U_BUFFER_OVERFLOW_ERROR if bufLen is too small.
 * @return If successful, a pointer to the output buffer. If failure or bufLen is too small, NULL.
 *','line_number':88,'multiline':True]
['text':'
 * Return the current year in the Gregorian calendar. Used for copyright generation.
 ','line_number':105,'multiline':True]
['text':'
 * Creates a directory with pathname.
 *
 * @param status Set to an error code when mkdir failed.
 ','line_number':111,'multiline':True]
['text':'*
 * Return TRUE if the named item exists
 * @param file filename
 * @return TRUE if named item (file, dir, etc) exists, FALSE otherwise
 ','line_number':120,'multiline':True]
['text':'*
 * Return the modification date for the specified file or directory.
 * Return value is undefined if there was an error.
 ','line_number':129,'multiline':True]
['text':'U_CAPI UDate U_EXPORT2
uprv_getModificationDate(const char *pathname, UErrorCode *status);
','line_number':133,'multiline':True]
['text':'
 * Returns the modification
 *
 * @param status Set to an error code when mkdir failed.
 ','line_number':136,'multiline':True]
['text':'
 * UToolMemory is used for generic, custom memory management.
 * It is allocated with enough space for count*size bytes starting
 * at array.
 * The array is declared with a union of large data types so
 * that its base address is aligned for any types.
 * If size is a multiple of a data type size, then such items
 * can be safely allocated inside the array, at offsets that
 * are themselves multiples of size.
 ','line_number':142,'multiline':True]
['text':'*
 * Open a UToolMemory object for allocation of initialCapacity to maxCapacity
 * items with size bytes each.
 ','line_number':155,'multiline':True]
['text':'*
 * Close a UToolMemory object.
 ','line_number':162,'multiline':True]
['text':'*
 * Get the pointer to the beginning of the array of items.
 * The pointer becomes invalid after allocation of new items.
 ','line_number':168,'multiline':True]
['text':'*
 * Get the current number of items.
 ','line_number':175,'multiline':True]
['text':'*
 * Allocate one more item and return the pointer to its start in the array.
 ','line_number':181,'multiline':True]
['text':'*
 * Allocate n items and return the pointer to the start of the first one in the array.
 ','line_number':187,'multiline':True]
