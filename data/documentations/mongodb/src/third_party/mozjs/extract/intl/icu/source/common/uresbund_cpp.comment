['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
* Copyright (C) 1997-2016, International Business Machines Corporation and
* others. All Rights Reserved.
******************************************************************************
*
* File uresbund.cpp
*
* Modification History:
*
*   Date        Name        Description
*   04/01/97    aliu        Creation.
*   06/14/99    stephen     Removed functions taking a filename suffix.
*   07/20/99    stephen     Changed for UResourceBundle typedef'd to void*
*   11/09/99    weiv            Added ures_getLocale()
*   March 2000  weiv        Total overhaul - using data in DLLs
*   06/20/2000  helena      OS/400 port changes; mostly typecast.
*   06/24/02    weiv        Added support for resource sharing
******************************************************************************
','line_number':3,'multiline':True]
['text':'
Static cache for already opened resource bundles - mostly for keeping fallback info
TODO: This cache should probably be removed when the deprecated code is
      completely removed.
','line_number':46,'multiline':True]
['text':' INTERNAL: hashes an entry  ','line_number':56,'multiline':True]
['text':' INTERNAL: compares two entries ','line_number':65,'multiline':True]
['text':'*
 *  Internal function, gets parts of locale name according 
 *  to the position of '_' character
 ','line_number':79,'multiline':True]
['text':'*
 *  Called to check whether a name without '_' needs to be checked for a parent.
 *  Some code had assumed that locale IDs with '_' could not have a non-root parent.
 *  We may want a better way of doing this.
 ','line_number':94,'multiline':True]
['text':'*
 *  Internal function
 ','line_number':103,'multiline':True]
['text':'*
 *  Internal function. Tries to find a resource in given Resource 
 *  Bundle, as well as in its parents
 ','line_number':115,'multiline':True]
['text':' if this resource is real, ','line_number':125,'multiline':True]
['text':' try to get data from there ','line_number':126,'multiline':True]
['text':' Otherwise, we'll look in parents ','line_number':130,'multiline':True]
['text':' If the resource is found in parents, we need to adjust the error ','line_number':139,'multiline':True]
['text':' If resource is not found, we need to give an error ','line_number':149,'multiline':True]
['text':' Works just like ucnv_flushCache() ','line_number':182,'multiline':True]
['text':'if shared data hasn't even been lazy evaluated yet
    * return 0
    ','line_number':191,'multiline':True]
['text':'creates an enumeration to iterate through every element in the table ','line_number':201,'multiline':True]
['text':' Deletes only if reference counter == 0
             * Don't worry about the children of this node.
             * Those will eventually get deleted too, if not already.
             * Don't worry about the parents of this node.
             * Those will eventually get deleted too, if not already.
             ','line_number':206,'multiline':True]
['text':' 04/05/2002 [weiv] fCountExisting should now be accurate. If it's not zero, that means that    ','line_number':212,'multiline':True]
['text':' some resource bundles are still open somewhere. ','line_number':213,'multiline':True]
['text':'
         * Do it again to catch bundles (aliases, pool bundle) whose fCountExisting
         * got decremented by free_entry().
         ','line_number':222,'multiline':True]
['text':'* INTERNAL: Initializes the cache for resources ','line_number':276,'multiline':True]
['text':'* INTERNAL: sets the name (locale) of the resource bundle to given name ','line_number':287,'multiline':True]
['text':'*
 *  INTERNAL: Inits and opens an entry from a data DLL.
 *    CAUTION:  resbMutex must be locked when calling this function.
 ','line_number':310,'multiline':True]
['text':'int32_t hashValue;','line_number':317,'multiline':True]
['text':'UBool isAlias = FALSE;','line_number':321,'multiline':True]
['text':'UHashTok hashkey; ','line_number':322,'multiline':True]
['text':' here we try to deduce the right locale name ','line_number':328,'multiline':True]
['text':' if localeID is NULL, we're trying to open default locale ','line_number':329,'multiline':True]
['text':' if localeID is "" then we try to open root locale ','line_number':331,'multiline':True]
['text':' otherwise, we'll open what we're given ','line_number':333,'multiline':True]
['text':' calculate the hash value of the entry ','line_number':340,'multiline':True]
['text':'hashkey.pointer = (void *)&find;','line_number':341,'multiline':True]
['text':'hashValue = hashEntry(hashkey);','line_number':342,'multiline':True]
['text':' check to see if we already have this entry ','line_number':344,'multiline':True]
['text':' if the entry is not yet in the hash table, we'll try to construct a new one ','line_number':347,'multiline':True]
['text':'r->fHashKey = hashValue;','line_number':355,'multiline':True]
['text':' this is the actual loading ','line_number':372,'multiline':True]
['text':' if we failed to load due to an out-of-memory error, exit early. ','line_number':376,'multiline':True]
['text':' we have no such entry in dll, so it will always use fallback ','line_number':381,'multiline':True]
['text':' if we have a regular entry ','line_number':384,'multiline':True]
['text':' handle the alias by trying to get out the %%Alias tag.','line_number':401,'multiline':True]
['text':' We'll try to get alias string from the bundle ','line_number':402,'multiline':True]
['text':' No tracing: called during initial data loading','line_number':405,'multiline':False]
['text':' if there is actual alias - unload and load new data ','line_number':407,'multiline':True]
['text':' if the data is not cached ','line_number':417,'multiline':True]
['text':' just insert it in the cache ','line_number':418,'multiline':True]
['text':' somebody have already inserted it while we were working, discard newly opened data ','line_number':427,'multiline':True]
['text':' Also, we could get here IF we opened an alias ','line_number':428,'multiline':True]
['text':' return the real bundle ','line_number':436,'multiline':True]
['text':' we increase its reference count ','line_number':440,'multiline':True]
['text':' if the resource has a warning ','line_number':441,'multiline':True]
['text':' we don't want to overwrite a status with no error ','line_number':442,'multiline':True]
['text':' set the returning status ','line_number':444,'multiline':True]
['text':' INTERNAL: ','line_number':461,'multiline':True]
['text':'   CAUTION:  resbMutex must be locked when calling this function! ','line_number':462,'multiline':True]
['text':' we're starting with a fresh name ','line_number':469,'multiline':True]
['text':' Null pointer test ','line_number':473,'multiline':True]
['text':' this entry is not real. We will discard it. ','line_number':480,'multiline':True]
['text':' However, the parent line for this entry is  ','line_number':481,'multiline':True]
['text':' not to be used - as there might be parent   ','line_number':482,'multiline':True]
['text':' lines in cache from previous openings that  ','line_number':483,'multiline':True]
['text':' are not updated yet. ','line_number':484,'multiline':True]
['text':'entryCloseInt(r);','line_number':486,'multiline':True]
['text':' this is needed for supporting aliases ','line_number':490,'multiline':True]
['text':'Fallback data stuff','line_number':495,'multiline':True]
['text':' returns U_SUCCESS(*status)','line_number':536,'multiline':False]
['text':' An explicit parent was found.','line_number':545,'multiline':False]
['text':' No tracing: called during initial data loading','line_number':547,'multiline':False]
['text':' Insert regular parents.','line_number':556,'multiline':False]
['text':' This code inserts user override data into the inheritance chain.','line_number':565,'multiline':False]
['text':' If we failed due to out-of-memory, report that to the caller and exit early.','line_number':567,'multiline':False]
['text':' The USR override data wasn't found, set it to be deleted.','line_number':580,'multiline':False]
['text':' returns U_SUCCESS(*status)','line_number':590,'multiline':False]
['text':'*
     * Open a resource bundle for the locale;
     * if there is not even a base language bundle, then fall back to the default locale;
     * if there is no bundle for that either, then load the root bundle.
     *
     * This is the default bundle loading behavior.
     ','line_number':605,'multiline':True]
['text':' TODO: ICU ticket #11271 "consistent default locale across locale trees"','line_number':613,'multiline':False]
['text':' Add an option to look at the main locale tree for whether to','line_number':614,'multiline':False]
['text':' fall back to root directly (if the locale has main data) or','line_number':615,'multiline':False]
['text':' fall back to the default locale first (if the locale does not even have main data).','line_number':616,'multiline':False]
['text':'*
     * Open a resource bundle for the locale;
     * if there is not even a base language bundle, then load the root bundle;
     * never fall back to the default locale.
     *
     * This is used for algorithms that have good pan-Unicode default behavior,
     * such as case mappings, collation, and segmentation (BreakIterator).
     ','line_number':617,'multiline':True]
['text':'*
     * Open a resource bundle for the exact bundle name as requested;
     * no fallbacks, do not load parent bundles.
     *
     * This is used for supplemental (non-locale) data.
     ','line_number':626,'multiline':True]
['text':' Lock resbMutex until the end of this function.','line_number':672,'multiline':False]
['text':' We're going to skip all the locales that do not have any data ','line_number':674,'multiline':True]
['text':' If we failed due to out-of-memory, report the failure and exit early.','line_number':677,'multiline':False]
['text':' if there is one real locale, we can look for parents. ','line_number':683,'multiline':True]
['text':' This code inserts user override data into the inheritance chain ','line_number':686,'multiline':True]
['text':' If we failed due to out-of-memory, report the failure and exit early.','line_number':689,'multiline':False]
['text':' the USR override data wasn't found, set it to be deleted ','line_number':699,'multiline':True]
['text':' we could have reached this point without having any real data ','line_number':711,'multiline':True]
['text':' if that is the case, we need to chain in the default locale   ','line_number':712,'multiline':True]
['text':' insert default locale ','line_number':714,'multiline':True]
['text':' If we failed due to out-of-memory, report the failure and exit early.','line_number':717,'multiline':False]
['text':' the default locale exists ','line_number':723,'multiline':True]
['text':' TODO: Why not if (usingUSRData) { ... } like in the non-default-locale code path?','line_number':727,'multiline':False]
['text':' we could still have r == NULL at this point - maybe even default locale is not ','line_number':736,'multiline':True]
['text':' present ','line_number':737,'multiline':True]
['text':' If we failed due to out-of-memory, report the failure and exit early.','line_number':741,'multiline':False]
['text':' we don't even have the root locale ','line_number':750,'multiline':True]
['text':' TODO: Does this ever loop?','line_number':764,'multiline':False]
['text':'*
 * Version of entryOpen() and findFirstExisting() for ures_openDirect(),
 * with no fallbacks.
 * Parent and root locale bundles are loaded if
 * the requested bundle does not have the "nofallback" flag.
 ','line_number':781,'multiline':True]
['text':' findFirstExisting() without fallbacks.','line_number':795,'multiline':False]
['text':' Some code depends on the ures_openDirect() bundle to have a parent bundle chain,','line_number':806,'multiline':False]
['text':' unless it is marked with "nofallback".','line_number':807,'multiline':False]
['text':' not root','line_number':809,'multiline':False]
['text':' TODO: Does this ever loop?','line_number':826,'multiline':False]
['text':'*
 * Functions to create and destroy resource bundles.
 *     CAUTION:  resbMutex must be locked when calling this function.
 ','line_number':835,'multiline':True]
['text':' INTERNAL: ','line_number':839,'multiline':True]
['text':' Entries are left in the cache. TODO: add ures_flushCache() to force a flush
         of the cache. ','line_number':847,'multiline':True]
['text':'
        if(resB->fCountExisting <= 0) {
            uhash_remove(cache, resB);
            if(resB->fBogus == U_ZERO_ERROR) {
                res_unload(&(resB->fData));
            }
            if(resB->fName != NULL) {
                uprv_free(resB->fName);
            }
            if(resB->fPath != NULL) {
                uprv_free(resB->fPath);
            }
            uprv_free(resB);
        }
','line_number':849,'multiline':True]
['text':'* 
 *  API: closes a resource bundle and cleans up.
 ','line_number':869,'multiline':True]
['text':'
U_CFUNC void ures_setResPath(UResourceBundle *resB, const char* toAdd) {
  if(resB->fResPath == NULL) {
    resB->fResPath = resB->fResBuf;
    *(resB->fResPath) = 0;
  } 
  resB->fResPathLen = uprv_strlen(toAdd);
  if(RES_BUFSIZE <= resB->fResPathLen+1) {
    if(resB->fResPath == resB->fResBuf) {
      resB->fResPath = (char *)uprv_malloc((resB->fResPathLen+1)*sizeof(char));
    } else {
      resB->fResPath = (char *)uprv_realloc(resB->fResPath, (resB->fResPathLen+1)*sizeof(char));
    }
  }
  uprv_strcpy(resB->fResPath, toAdd);
}
','line_number':878,'multiline':True]
['text':' Check that memory was allocated correctly. ','line_number':906,'multiline':True]
['text':' Check that memory was reallocated correctly. ','line_number':914,'multiline':True]
['text':'U_DEBUG','line_number':948,'multiline':True]
['text':' poison the data ','line_number':950,'multiline':True]
['text':' This is an alias, need to exchange with real data ','line_number':975,'multiline':True]
['text':' we have an alias, now let's cut it up ','line_number':980,'multiline':True]
['text':'
                * Allocate enough space for both the char * version
                * of the alias and parent->fResPath.
                *
                * We do this so that res_findResource() can modify the path,
                * which allows us to remove redundant _res_findResource() variants
                * in uresdata.c.
                * res_findResource() now NUL-terminates each segment so that table keys
                * can always be compared with strcmp() instead of strncmp().
                * Saves code there and simplifies testing and code coverage.
                *
                * markus 2003oct17
                ','line_number':985,'multiline':True]
['text':' count the terminating NUL ','line_number':998,'multiline':True]
['text':' test for NULL ','line_number':1012,'multiline':True]
['text':' there is a path included ','line_number':1021,'multiline':True]
['text':' avoid locale == NULL to make code below work ','line_number':1024,'multiline':True]
['text':' this is an XPath alias, starting with "/LOCALE/" ','line_number':1031,'multiline':True]
['text':' it contains the path to a resource which should be looked up ','line_number':1032,'multiline':True]
['text':' starting in the requested locale ','line_number':1033,'multiline':True]
['text':' this is the requested locale's name ','line_number':1035,'multiline':True]
['text':' we will be looking in the same package ','line_number':1036,'multiline':True]
['text':' want ICU data ','line_number':1038,'multiline':True]
['text':' no path, start with a locale ','line_number':1048,'multiline':True]
['text':' got almost everything, let's try to open ','line_number':1060,'multiline':True]
['text':' first, open the bundle with real data ','line_number':1061,'multiline':True]
['text':' no key path. This means that we are going to 
                            * to use the corresponding resource from
                            * another bundle
                            ','line_number':1068,'multiline':True]
['text':' first, we are going to get a corresponding parent 
                            * resource to the one we are searching.
                            ','line_number':1072,'multiline':True]
['text':' allocated large enough above ','line_number':1077,'multiline':True]
['text':' we need to make keyPath from parent's fResPath and
                                * current key, if there is a key associated
                                ','line_number':1084,'multiline':True]
['text':' if there is no key, but there is an index, try to get by the index ','line_number':1105,'multiline':True]
['text':' here we have either a table or an array, so get the element ','line_number':1106,'multiline':True]
['text':' array ','line_number':1110,'multiline':True]
['text':' this one is a bit trickier. 
                            * we start finding keys, but after we resolve one alias, the path might continue.
                            * Consider: 
                            *     aliastest:alias { "testtypes/anotheralias/Sequence" }
                            *     anotheralias:alias { "/ICUDATA/sh/CollationElements" }
                            * aliastest resource should finally have the sequence, not collation elements.
                            ','line_number':1121,'multiline':True]
['text':' now we have fallback following here ','line_number':1141,'multiline':True]
['text':' this loop handles 'found' resources over several levels ','line_number':1144,'multiline':True]
['text':' found a resource, but it might be an indirection ','line_number':1147,'multiline':True]
['text':' switch to a new resource, possibly a new tree ','line_number':1151,'multiline':True]
['text':' no resource found, we don't really want to look anymore on this level ','line_number':1154,'multiline':True]
['text':' we failed to open the resource we're aliasing to ','line_number':1170,'multiline':True]
['text':' bad alias, should be an error ','line_number':1183,'multiline':True]
['text':' test for NULL ','line_number':1194,'multiline':True]
['text':' 
        weiv: if stack object was passed in, it doesn't really need to be reinited,
        since the purpose of initing is to remove stack junk. However, at this point 
        we would not do anything to an allocated object, so stack object should be
        treated the same
        ','line_number':1209,'multiline':True]
['text':'
        if(ures_isStackObject(resB) != FALSE) {
        ures_initStackObject(resB);
        }
        ','line_number':1215,'multiline':True]
['text':'resB->fParentRes = parent;','line_number':1230,'multiline':True]
['text':' Make sure that Purify doesn't complain about uninitialized memory copies. ','line_number':1248,'multiline':True]
['text':'resB->fParent = parent->fRes;','line_number':1256,'multiline':True]
['text':' test for NULL ','line_number':1272,'multiline':True]
['text':'*
 * Functions to retrieve data from resource bundles.
 ','line_number':1295,'multiline':True]
['text':' empty string, return as read-only pointer ','line_number':1336,'multiline':True]
['text':' We need to transform the string to the destination buffer. ','line_number':1347,'multiline':True]
['text':' No chance for the string to fit. Pure preflighting. ','line_number':1349,'multiline':True]
['text':'
             * We know the string will fit into dest because each UChar turns
             * into at most three UTF-8 bytes. Fill the latter part of dest
             * so that callers do not expect to use dest as a string pointer,
             * hopefully leading to more robust code for when resource bundles
             * may store UTF-8 natively.
             * (In which case dest would not be used at all.)
             *
             * We do not do this if forceCopy=TRUE because then the caller
             * expects the string to start exactly at dest.
             *
             * The test above for <= 0x2aaaaaaa prevents overflows.
             * The +1 is for the NUL terminator.
             ','line_number':1353,'multiline':True]
['text':' this function returns a signed integer ','line_number':1421,'multiline':True]
['text':' it performs sign extension ','line_number':1422,'multiline':True]
['text':'','line_number':1461,'multiline':False]
['text':' TODO: Trace ures_getKey? I guess not usually.','line_number':1462,'multiline':False]
['text':'','line_number':1463,'multiline':False]
['text':' We usually get the key string to decide whether we want the value, or to','line_number':1464,'multiline':False]
['text':' make a key-value pair. Tracing the value should suffice.','line_number':1465,'multiline':False]
['text':'','line_number':1466,'multiline':False]
['text':' However, I believe we have some data (e.g., in res_index) where the key','line_number':1467,'multiline':False]
['text':' strings are the data. Tracing the enclosing table should suffice.','line_number':1468,'multiline':False]
['text':'','line_number':1469,'multiline':False]
['text':' TODO: do the fallback ','line_number':1534,'multiline':True]
['text':' TODO: do the fallback ','line_number':1541,'multiline':True]
['text':'return NULL;','line_number':1564,'multiline':True]
['text':'return NULL;','line_number':1569,'multiline':True]
['text':'return NULL;','line_number':1575,'multiline':True]
['text':' TODO: do the fallback ','line_number':1590,'multiline':True]
['text':' TODO: do the fallback ','line_number':1597,'multiline':True]
['text':'return NULL;','line_number':1601,'multiline':True]
['text':'return NULL;','line_number':1605,'multiline':True]
['text':'return NULL;','line_number':1614,'multiline':True]
['text':'return NULL;','line_number':1619,'multiline':True]
['text':' TODO: do the fallback ','line_number':1636,'multiline':True]
['text':' TODO: do the fallback ','line_number':1643,'multiline':True]
['text':'return NULL;','line_number':1647,'multiline':True]
['text':'return NULL;','line_number':1653,'multiline':True]
['text':' TODO: do the fallback ','line_number':1679,'multiline':True]
['text':' TODO: do the fallback ','line_number':1686,'multiline':True]
['text':' must not occur ','line_number':1697,'multiline':True]
['text':'U_CAPI const char *ures_getResPath(UResourceBundle *resB) {
  return resB->fResPath;
}','line_number':1718,'multiline':True]
['text':' test for NULL ','line_number':1738,'multiline':True]
['text':' there is a path specification ','line_number':1746,'multiline':True]
['text':' here we do looping and circular alias checking ','line_number':1788,'multiline':True]
['text':' this loop is here because aliasing is resolved on this level, not on res level ','line_number':1789,'multiline':True]
['text':' so, when we encounter an alias, it is not an aggregate resource, so we return ','line_number':1790,'multiline':True]
['text':' there is more stuff in the path ','line_number':1800,'multiline':True]
['text':'
  Like res_getTableItemByKey but accepts full paths like "NumberElements/latn/patternsShort".
','line_number':1831,'multiline':True]
['text':' The current resource ','line_number':1835,'multiline':True]
['text':' Path from current resource to desired resource ','line_number':1840,'multiline':True]
['text':' the current resource type ','line_number':1841,'multiline':True]
['text':' Terminating null for this part of path. ','line_number':1845,'multiline':True]
['text':'UResourceDataEntry *realData = NULL;','line_number':1868,'multiline':True]
['text':' Otherwise, we'll look in parents ','line_number':1889,'multiline':True]
['text':' We hit an alias, but we didn't finish following the path. ','line_number':1908,'multiline':True]
['text':'helper = init_resb_result(&(dataEntry->fData), res, inKey, -1, dataEntry, resB, 0, helper, status);','line_number':1910,'multiline':True]
['text':' Continue until the whole path is consumed ','line_number':1923,'multiline':True]
['text':'const ResourceData *rd = getFallbackData(resB, &key, &realData, &res, status);','line_number':1926,'multiline':True]
['text':' check if resB->fResPath gives the right name here ','line_number':1928,'multiline':True]
['text':' We recursively enumerate child-first,','line_number':1957,'multiline':False]
['text':' only storing parent items in the absence of child items.','line_number':1958,'multiline':False]
['text':' The sink needs to store a placeholder value for the no-fallback/no-inheritance marker','line_number':1959,'multiline':False]
['text':' to prevent a parent item from being stored.','line_number':1960,'multiline':False]
['text':'','line_number':1961,'multiline':False]
['text':' It would be possible to recursively enumerate parent-first,','line_number':1962,'multiline':False]
['text':' overriding parent items with child items.','line_number':1963,'multiline':False]
['text':' When the sink sees the no-fallback/no-inheritance marker,','line_number':1964,'multiline':False]
['text':' then it would remove the parent's item.','line_number':1965,'multiline':False]
['text':' We would deserialize parent values even though they are overridden in a child bundle.','line_number':1966,'multiline':False]
['text':' We might try to query the sink whether','line_number':1973,'multiline':False]
['text':' any fallback from the parent bundle is still possible.','line_number':1974,'multiline':False]
['text':' Turn the parent UResourceDataEntry into a UResourceBundle,','line_number':1976,'multiline':False]
['text':' much like in ures_openWithType().','line_number':1977,'multiline':False]
['text':' TODO: See if we can refactor ures_getByKeyWithFallback()','line_number':1978,'multiline':False]
['text':' and pull out an inner function that takes and returns a UResourceDataEntry','line_number':1979,'multiline':False]
['text':' so that we need not create UResourceBundle objects.','line_number':1980,'multiline':False]
['text':' TODO: What is the difference between bundle fData and fTopLevelData?','line_number':1984,'multiline':False]
['text':' TODO: Try to replace bundle.fResData with just using bundle.fData->fData.','line_number':1986,'multiline':False]
['text':' Look up the container item in the parent bundle.','line_number':1994,'multiline':False]
['text':' Ignore if parents up to root do not have this path.','line_number':1998,'multiline':False]
['text':' namespace','line_number':2013,'multiline':False]
['text':' Requires a ResourceDataValue fill-in, so that we need not cast from a ResourceValue.','line_number':2015,'multiline':False]
['text':' Unfortunately, the caller must know which subclass to make and pass in.','line_number':2016,'multiline':False]
['text':' Alternatively, we could make it as polymorphic as in Java by','line_number':2017,'multiline':False]
['text':' returning a ResourceValue pointer (possibly wrapped into a LocalPointer)','line_number':2018,'multiline':False]
['text':' that the caller then owns.','line_number':2019,'multiline':False]
['text':'','line_number':2020,'multiline':False]
['text':' Also requires a UResourceBundle fill-in, so that the value's ResourceTracer','line_number':2021,'multiline':False]
['text':' can point to a non-local bundle.','line_number':2022,'multiline':False]
['text':' Without tracing, the child bundle could be a function-local object.','line_number':2023,'multiline':False]
['text':' empty path','line_number':2035,'multiline':False]
['text':' empty path','line_number':2058,'multiline':False]
['text':' Get all table items with fallback.','line_number':2066,'multiline':False]
['text':' check if resB->fResPath gives the right name here ','line_number':2093,'multiline':True]
['text':' this is a kind of TODO item. If we have an array with an index table, we could do this. ','line_number':2106,'multiline':True]
['text':' not currently ','line_number':2107,'multiline':True]
['text':' here should go a first attempt to locate the key using index table ','line_number':2109,'multiline':True]
['text':' this is a kind of TODO item. If we have an array with an index table, we could do this. ','line_number':2188,'multiline':True]
['text':' not currently ','line_number':2189,'multiline':True]
['text':' here should go a first attempt to locate the key using index table ','line_number':2191,'multiline':True]
['text':' TODO: Tracing','line_number':2194,'multiline':False]
['text':' TODO: clean from here down ','line_number':2218,'multiline':True]
['text':'*
 *  INTERNAL: Get the name of the first real locale (not placeholder) 
 *  that has resource bundle data.
 ','line_number':2220,'multiline':True]
['text':' first "canonicalize" the locale ID ','line_number':2297,'multiline':True]
['text':' fill-in','line_number':2325,'multiline':False]
['text':'*
 *  Opens a resource bundle without "canonicalizing" the locale name. No fallback will be performed 
 *  or sought. However, alias substitution will happen!
 ','line_number':2355,'multiline':True]
['text':'*
 *  Internal API: This function is used to open a resource bundle 
 *  proper fallback chaining is executed while initialization. 
 *  The result is stored in cache for later fallback search.
 * 
 * Same as ures_open(), but uses the fill-in parameter and does not allocate a new bundle.
 ','line_number':2364,'multiline':True]
['text':'*
 * Same as ures_openDirect(), but uses the fill-in parameter and does not allocate a new bundle.
 ','line_number':2381,'multiline':True]
['text':'*
 *  API: Counts members. For arrays and tables, returns number of resources.
 *  For strings, returns 1.
 ','line_number':2393,'multiline':True]
['text':'*
 * Internal function.
 * Return the version number associated with this ResourceBundle as a string.
 *
 * @param resourceBundle The resource bundle for which the version is checked.
 * @return  A version number string as specified in the resource bundle or its parent.
 *          The caller does not own this string.
 * @see ures_getVersion
 * @internal
 ','line_number':2424,'multiline':True]
['text':' If the version ID has not been built yet, then do so.  Retrieve ','line_number':2441,'multiline':True]
['text':' the minor version from the file. ','line_number':2442,'multiline':True]
['text':' Determine the length of of the final version string.  This is ','line_number':2449,'multiline':True]
['text':' the length of the major part + the length of the separator ','line_number':2450,'multiline':True]
['text':' (==1) + the length of the minor part (+ 1 for the zero byte at ','line_number':2451,'multiline':True]
['text':' the end). ','line_number':2452,'multiline':True]
['text':' Allocate the string, and build it up. ','line_number':2456,'multiline':True]
['text':' + 1 for zero byte ','line_number':2457,'multiline':True]
['text':' Check for null pointer. ','line_number':2461,'multiline':True]
['text':'* Tree support functions ******************************','line_number':2490,'multiline':True]
['text':'status','line_number':2514,'multiline':True]
['text':'status','line_number':2543,'multiline':True]
['text':' value of keyword 'keyword' ','line_number':2621,'multiline':True]
['text':' default value for given locale ','line_number':2622,'multiline':True]
['text':' default value for given locale ','line_number':2623,'multiline':True]
['text':' base locale ','line_number':2624,'multiline':True]
['text':' only want to set this the first time around ','line_number':2671,'multiline':True]
['text':' look for default item ','line_number':2683,'multiline':True]
['text':' Now, see if we can find the kwVal collator.. start the search over.. ','line_number':2717,'multiline':True]
['text':' only want to set this the first time around ','line_number':2727,'multiline':True]
['text':'','line_number':2738,'multiline':True]
['text':'','line_number':2743,'multiline':True]
['text':' now, recalculate default kw if need be ','line_number':2754,'multiline':True]
['text':' look for default item ','line_number':2758,'multiline':True]
['text':' end of recalculate default KW ','line_number':2772,'multiline':True]
['text':' search for 'default' named item ','line_number':2802,'multiline':True]
['text':' only want to set this the first time around ','line_number':2808,'multiline':True]
['text':' now, recalculate default kw if need be ','line_number':2830,'multiline':True]
['text':' look for default item ','line_number':2834,'multiline':True]
['text':' end of recalculate default KW ','line_number':2848,'multiline':True]
['text':' found the keyword in a *child* of where the default tag was present. ','line_number':2876,'multiline':True]
['text':' if the requested kw is default, ','line_number':2877,'multiline':True]
['text':' and the default is in or in an ancestor of the current locale ','line_number':2878,'multiline':True]
['text':' we found the default locale - no need to repeat it.','line_number':2899,'multiline':True]
['text':' don't fail if a bundle is unopenable ','line_number':2956,'multiline':True]
['text':' fprintf(stderr, "%s | %s | %s | %s\n", path?path:"<ICUDATA>", keyword, locale, k); ','line_number':2985,'multiline':True]
['text':' empty or "default" or unlisted type','line_number':2989,'multiline':False]
['text':' found duplicate ','line_number':2994,'multiline':True]
['text':' no more space in list .. ','line_number':3000,'multiline':True]
['text':' no more space in buffer (string + 2 nulls) ','line_number':3001,'multiline':True]
['text':' out of space.. ','line_number':3002,'multiline':True]
['text':' terminate ','line_number':3011,'multiline':True]
['text':' terminate ','line_number':3017,'multiline':True]
['text':' This code isn't needed, and given the documentation warnings the implementation is suspect ','line_number':3029,'multiline':True]
['text':' pointer comparison ','line_number':3033,'multiline':True]
['text':' eof ','line_number':3101,'multiline':True]
