['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 ********************************************************************************
 *
 *   Copyright (C) 1998-2015, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *
 ********************************************************************************
 *
 *
 *  makeconv.cpp:
 *  tool creating a binary (compressed) representation of the conversion mapping
 *  table (IBM NLTC ucmap format).
 *
 *  05/04/2000    helena     Added fallback mapping into the picture...
 *  06/29/2000  helena      Major rewrite of the callback APIs.
 ','line_number':3,'multiline':True]
['text':'
 * from ucnvstat.c - static prototypes of data-based converters
 ','line_number':73,'multiline':True]
['text':'
 * Global - verbosity
 ','line_number':78,'multiline':True]
['text':'
 * Set up the UNewData and write the converter..
 ','line_number':89,'multiline':True]
['text':' dataFormat="cnvt" ','line_number':106,'multiline':True]
['text':' formatVersion ','line_number':107,'multiline':True]
['text':' dataVersion (calculated at runtime) ','line_number':108,'multiline':True]
['text':' all read only, clean, platform independent data.  Mmmm. :)  ','line_number':149,'multiline':True]
['text':' Is 4-aligned  - by size ','line_number':151,'multiline':True]
['text':' Now, write the table ','line_number':152,'multiline':True]
['text':' Set up the ICU version number ','line_number':207,'multiline':True]
['text':' preset then read command line options ','line_number':212,'multiline':True]
['text':' error handling, printing usage message ','line_number':216,'multiline':True]
['text':' get the options values ','line_number':254,'multiline':True]
['text':'produces the right destination path for display','line_number':302,'multiline':True]
['text':' find the last file sepator ','line_number':306,'multiline':True]
['text':'removes the extension if any is found','line_number':318,'multiline':True]
['text':' the basename without extension is the converter name ','line_number':324,'multiline':True]
['text':'Adds the target extension','line_number':331,'multiline':True]
['text':' if an error is found, print out an error msg and keep going ','line_number':346,'multiline':True]
['text':' Insure the static data name matches the  file name ','line_number':355,'multiline':True]
['text':' Changed to ignore directory and only compare base name
             LDH 1/2/08','line_number':356,'multiline':True]
['text':' Find last file separator ','line_number':359,'multiline':True]
['text':' OK, try alternate ','line_number':361,'multiline':True]
['text':' If no separators, no problem ','line_number':366,'multiline':True]
['text':' If found separator, don't include it in compare ','line_number':371,'multiline':True]
['text':' if an error is found, print out an error msg and keep going','line_number':397,'multiline':True]
['text':' basic parsing and handling of state-related items ','line_number':454,'multiline':True]
['text':' stop at the beginning of the mapping section ','line_number':459,'multiline':True]
['text':' collect the information from the header field, ignore unknown keys ','line_number':464,'multiline':True]
['text':' copy values from the UCMFile to the static data ','line_number':498,'multiline':True]
['text':'
     * Now that we know the type, copy any 'default' values from the table.
     * We need not check the type any further because the parser only
     * recognizes what we have prototypes for.
     *
     * For delta (extension-only) tables, copy values from the base file
     * instead, see createConverter().
     ','line_number':509,'multiline':True]
['text':' return TRUE if a base table was read, FALSE for an extension table ','line_number':563,'multiline':True]
['text':' read the base table ','line_number':600,'multiline':True]
['text':' read an extension table if there is one ','line_number':606,'multiline':True]
['text':' ignore empty and comment lines ','line_number':616,'multiline':True]
['text':' read the extension table ','line_number':620,'multiline':True]
['text':'
         * Build a normal .cnv file with a base table
         * and an optional extension table.
         ','line_number':661,'multiline':True]
['text':' sort the table so that it can be turned into UTF-8-friendly data ','line_number':687,'multiline':True]
['text':' add the base table after ucm_checkBaseExt()! ','line_number':693,'multiline':True]
['text':'
                 * addTable() may have requested moving more mappings to the extension table
                 * if they fit into the base toUnicode table but not into the
                 * base fromUnicode table.
                 * (Especially for UTF-8-friendly fromUnicode tables.)
                 * Such mappings will have the MBCS_FROM_U_EXT_FLAG set, which causes them
                 * to be excluded from the extension toUnicode data.
                 * See MBCSOkForBaseFromUnicode() for which mappings do not fit into
                 * the base fromUnicode table.
                 ','line_number':698,'multiline':True]
['text':' prepare the extension table, if there is one ','line_number':711,'multiline':True]
['text':' Build an extension-only .cnv file. ','line_number':724,'multiline':True]
['text':' assemble a path/filename for data->ucm->baseName ','line_number':730,'multiline':True]
['text':' read the base table ','line_number':736,'multiline':True]
['text':' prepare the extension table ','line_number':744,'multiline':True]
['text':' fill in gaps in extension file header fields ','line_number':749,'multiline':True]
['text':'
                 * do not copy subChar1 -
                 * only use what is explicitly specified
                 * because it cannot be unset in the extension file header
                 ','line_number':767,'multiline':True]
['text':' get the fallback flags ','line_number':773,'multiline':True]
['text':'
                         * When building a normal .cnv file with a base table
                         * for an MBCS (not SBCS) table with explicit precision flags,
                         * the MBCSAddTable() function marks some mappings for moving
                         * to the extension table.
                         * They fit into the base toUnicode table but not into the
                         * base fromUnicode table.
                         * (Note: We do have explicit precision flags because they are
                         * required for extension table generation, and
                         * ucm_checkBaseExt() verified it.)
                         *
                         * We do not call MBCSAddTable() here (we probably could)
                         * so we need to do the analysis before building the extension table.
                         * We assume that MBCSAddTable() will build a UTF-8-friendly table.
                         * Redundant mappings in the extension table are ok except they cost some size.
                         *
                         * Do this after ucm_checkBaseExt().
                         ','line_number':808,'multiline':True]
['text':'
 * Hey, Emacs, please set the following:
 *
 * Local Variables:
 * indent-tabs-mode: nil
 * End:
 *
 ','line_number':855,'multiline':True]
