['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*
* File ULOC.CPP
*
* Modification History:
*
*   Date        Name        Description
*   04/01/97    aliu        Creation.
*   08/21/98    stephen     JDK 1.2 sync
*   12/08/98    rtg         New Locale implementation and C API
*   03/15/99    damiba      overhaul.
*   04/06/99    stephen     changed setDefault() to realloc and copy
*   06/14/99    stephen     Changed calls to ures_open for new params
*   07/21/99    stephen     Modified setDefault() to propagate to C++
*   05/14/04    alan        7 years later: refactored, cleaned up, fixed bugs,
*                           brought canonicalization code into line with spec
****************************************************************************','line_number':3,'multiline':True]
['text':'
   POSIX's locale format, from putil.c: [no spaces]

     ll [ _CC ] [ . MM ] [ @ VV]

     l = lang, C = ctry, M = charmap, V = variant
','line_number':25,'multiline':True]
['text':' ### Declarations *************************************************','line_number':55,'multiline':True]
['text':' Locale stuff from locid.cpp ','line_number':57,'multiline':True]
['text':' ### Data tables *************************************************','line_number':61,'multiline':True]
['text':'*
 * Table of language codes, both 2- and 3-letter, with preference
 * given to 2-letter codes where possible.  Includes 3-letter codes
 * that lack a 2-letter equivalent.
 *
 * This list must be in sorted order.  This list is returned directly
 * to the user by some API.
 *
 * This list must be kept in sync with LANGUAGES_3, with corresponding
 * entries matched.
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The first list is visible to
 * user code when this array is returned by API.  The second list
 * contains codes we support, but do not expose through user API.
 *
 * Notes
 *
 * Tables updated per http://lcweb.loc.gov/standards/iso639-2/ to
 * include the revisions up to 2001/7/27 *CWB*
 *
 * The 3 character codes are the terminology codes like RFC 3066.  This
 * is compatible with prior ICU codes
 *
 * "in" "iw" "ji" "jw" & "sh" have been withdrawn but are still in the
 * table but now at the end of the table because 3 character codes are
 * duplicates.  This avoids bad searches going from 3 to 2 character
 * codes.
 *
 * The range qaa-qtz is reserved for local use
 ','line_number':63,'multiline':True]
['text':' Generated using org.unicode.cldr.icu.GenerateISO639LanguageTables ','line_number':94,'multiline':True]
['text':' ISO639 table version is 20150505 ','line_number':95,'multiline':True]
['text':' Subsequent hand addition of selected languages ','line_number':96,'multiline':True]
['text':' obsolete language codes ','line_number':184,'multiline':True]
['text':'*
 * Table of 3-letter language codes.
 *
 * This is a lookup table used to convert 3-letter language codes to
 * their 2-letter equivalent, where possible.  It must be kept in sync
 * with LANGUAGES.  For all valid i, LANGUAGES[i] must refer to the
 * same language as LANGUAGES_3[i].  The commented-out lines are
 * copied from LANGUAGES to make eyeballing this baby easier.
 *
 * Where a 3-letter language code has no 2-letter equivalent, the
 * 3-letter code occupies both LANGUAGES[i] and LANGUAGES_3[i].
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The two lists correspond to
 * the two lists in LANGUAGES.
 ','line_number':195,'multiline':True]
['text':' Generated using org.unicode.cldr.icu.GenerateISO639LanguageTables ','line_number':211,'multiline':True]
['text':' ISO639 table version is 20150505 ','line_number':212,'multiline':True]
['text':' Subsequent hand addition of selected languages ','line_number':213,'multiline':True]
['text':'  "in",  "iw",  "ji",  "jw",  "mo",  "sh",  "swc", "tl",  ','line_number':301,'multiline':True]
['text':'*
 * Table of 2-letter country codes.
 *
 * This list must be in sorted order.  This list is returned directly
 * to the user by some API.
 *
 * This list must be kept in sync with COUNTRIES_3, with corresponding
 * entries matched.
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The first list is visible to
 * user code when this array is returned by API.  The second list
 * contains codes we support, but do not expose through user API.
 *
 * Notes:
 *
 * ZR(ZAR) is now CD(COD) and FX(FXX) is PS(PSE) as per
 * http://www.evertype.com/standards/iso3166/iso3166-1-en.html added
 * new codes keeping the old ones for compatibility updated to include
 * 1999/12/03 revisions *CWB*
 *
 * RO(ROM) is now RO(ROU) according to
 * http://www.iso.org/iso/en/prods-services/iso3166ma/03updates-on-iso-3166/nlv3e-rou.html
 ','line_number':306,'multiline':True]
['text':' obsolete country codes ','line_number':362,'multiline':True]
['text':' deprecated country list ','line_number':367,'multiline':True]
['text':'  "AN", "BU", "CS", "DD", "DY", "FX", "HV", "NH", "RH", "SU", "TP", "UK", "VD", "YD", "YU", "ZR" ','line_number':370,'multiline':True]
['text':' replacement country codes ','line_number':371,'multiline':True]
['text':'*
 * Table of 3-letter country codes.
 *
 * This is a lookup table used to convert 3-letter country codes to
 * their 2-letter equivalent.  It must be kept in sync with COUNTRIES.
 * For all valid i, COUNTRIES[i] must refer to the same country as
 * COUNTRIES_3[i].  The commented-out lines are copied from COUNTRIES
 * to make eyeballing this baby easier.
 *
 * This table should be terminated with a NULL entry, followed by a
 * second list, and another NULL entry.  The two lists correspond to
 * the two lists in COUNTRIES.
 ','line_number':374,'multiline':True]
['text':'  "AD",  "AE",  "AF",  "AG",  "AI",  "AL",  "AM",      ','line_number':388,'multiline':True]
['text':'  "AO",  "AQ",  "AR",  "AS",  "AT",  "AU",  "AW",  "AX",  "AZ",     ','line_number':390,'multiline':True]
['text':'  "BA",  "BB",  "BD",  "BE",  "BF",  "BG",  "BH",  "BI",     ','line_number':392,'multiline':True]
['text':'  "BJ",  "BL",  "BM",  "BN",  "BO",  "BQ",  "BR",  "BS",  "BT",  "BV",     ','line_number':394,'multiline':True]
['text':'  "BW",  "BY",  "BZ",  "CA",  "CC",  "CD",  "CF",  "CG",     ','line_number':396,'multiline':True]
['text':'  "CH",  "CI",  "CK",  "CL",  "CM",  "CN",  "CO",  "CR",     ','line_number':398,'multiline':True]
['text':'  "CU",  "CV",  "CW",  "CX",  "CY",  "CZ",  "DE",  "DG",  "DJ",  "DK",     ','line_number':400,'multiline':True]
['text':'  "DM",  "DO",  "DZ",  "EA",  "EC",  "EE",  "EG",  "EH",  "ER",     ','line_number':402,'multiline':True]
['text':'  "ES",  "ET",  "FI",  "FJ",  "FK",  "FM",  "FO",  "FR",     ','line_number':404,'multiline':True]
['text':'  "GA",  "GB",  "GD",  "GE",  "GF",  "GG",  "GH",  "GI",  "GL",     ','line_number':406,'multiline':True]
['text':'  "GM",  "GN",  "GP",  "GQ",  "GR",  "GS",  "GT",  "GU",     ','line_number':408,'multiline':True]
['text':'  "GW",  "GY",  "HK",  "HM",  "HN",  "HR",  "HT",  "HU",     ','line_number':410,'multiline':True]
['text':'  "IC",  "ID",  "IE",  "IL",  "IM",  "IN",  "IO",  "IQ",  "IR",  "IS" ','line_number':412,'multiline':True]
['text':'  "IT",  "JE",  "JM",  "JO",  "JP",  "KE",  "KG",  "KH",  "KI",     ','line_number':414,'multiline':True]
['text':'  "KM",  "KN",  "KP",  "KR",  "KW",  "KY",  "KZ",  "LA",     ','line_number':416,'multiline':True]
['text':'  "LB",  "LC",  "LI",  "LK",  "LR",  "LS",  "LT",  "LU",     ','line_number':418,'multiline':True]
['text':'  "LV",  "LY",  "MA",  "MC",  "MD",  "ME",  "MF",  "MG",  "MH",  "MK",     ','line_number':420,'multiline':True]
['text':'  "ML",  "MM",  "MN",  "MO",  "MP",  "MQ",  "MR",  "MS",     ','line_number':422,'multiline':True]
['text':'  "MT",  "MU",  "MV",  "MW",  "MX",  "MY",  "MZ",  "NA",     ','line_number':424,'multiline':True]
['text':'  "NC",  "NE",  "NF",  "NG",  "NI",  "NL",  "NO",  "NP",     ','line_number':426,'multiline':True]
['text':'  "NR",  "NU",  "NZ",  "OM",  "PA",  "PE",  "PF",  "PG",     ','line_number':428,'multiline':True]
['text':'  "PH",  "PK",  "PL",  "PM",  "PN",  "PR",  "PS",  "PT",     ','line_number':430,'multiline':True]
['text':'  "PW",  "PY",  "QA",  "RE",  "RO",  "RS",  "RU",  "RW",  "SA",     ','line_number':432,'multiline':True]
['text':'  "SB",  "SC",  "SD",  "SE",  "SG",  "SH",  "SI",  "SJ",     ','line_number':434,'multiline':True]
['text':'  "SK",  "SL",  "SM",  "SN",  "SO",  "SR",  "SS",  "ST",  "SV",     ','line_number':436,'multiline':True]
['text':'  "SX",  "SY",  "SZ",  "TC",  "TD",  "TF",  "TG",  "TH",  "TJ",     ','line_number':438,'multiline':True]
['text':'  "TK",  "TL",  "TM",  "TN",  "TO",  "TR",  "TT",  "TV",     ','line_number':440,'multiline':True]
['text':'  "TW",  "TZ",  "UA",  "UG",  "UM",  "US",  "UY",  "UZ",     ','line_number':442,'multiline':True]
['text':'  "VA",  "VC",  "VE",  "VG",  "VI",  "VN",  "VU",  "WF",     ','line_number':444,'multiline':True]
['text':'  "WS",  "XK",  "YE",  "YT",  "ZA",  "ZM",  "ZW",          ','line_number':446,'multiline':True]
['text':'  "AN",  "BU",  "CS",  "FX",  "RO", "SU",  "TP",  "YD",  "YU",  "ZR" ','line_number':449,'multiline':True]
['text':' input ID ','line_number':455,'multiline':True]
['text':' canonicalized output ID ','line_number':456,'multiline':True]
['text':'*
 * A map to canonicalize locale IDs.  This handles a variety of
 * different semantic kinds of transformations.
 ','line_number':459,'multiline':True]
['text':' registered name ','line_number':464,'multiline':True]
['text':' Registered IANA variant ','line_number':465,'multiline':True]
['text':' Registered IANA variant ','line_number':466,'multiline':True]
['text':' registered name ','line_number':467,'multiline':True]
['text':' registered name ','line_number':468,'multiline':True]
['text':' registered name ','line_number':469,'multiline':True]
['text':' subtags with 3 chars won't be treated as variants.','line_number':470,'multiline':False]
['text':' registered name ','line_number':471,'multiline':True]
['text':' registered name ','line_number':472,'multiline':True]
['text':' registered name ','line_number':473,'multiline':True]
['text':' registered name ','line_number':474,'multiline':True]
['text':' ### BCP47 Conversion ******************************************','line_number':477,'multiline':True]
['text':' Test if the locale id has BCP47 u extension and does not have '@' ','line_number':478,'multiline':True]
['text':' Converts the BCP47 id to Unicode id. Does nothing to id if conversion fails ','line_number':480,'multiline':True]
['text':' Gets the size of the shortest subtag in the given localeID. ','line_number':490,'multiline':True]
['text':' ### Keywords *************************************************','line_number':516,'multiline':True]
['text':' Punctuation/symbols allowed in legacy key values ','line_number':519,'multiline':True]
['text':' We do this because the @ sign is variant, and the @ sign used on one
        EBCDIC machine won't be compiled the same way on other EBCDIC based
        machines. ','line_number':533,'multiline':True]
['text':'*
 * @param buf buffer of size [ULOC_KEYWORD_BUFFER_LEN]
 * @param keywordName incoming name to be canonicalized
 * @param status return status (keyword too long)
 * @return length of the keyword name
 ','line_number':549,'multiline':True]
['text':' malformed keyword name ','line_number':561,'multiline':True]
['text':' keyword name too long for internal buffer ','line_number':567,'multiline':True]
['text':' empty keyword name ','line_number':573,'multiline':True]
['text':' terminate ','line_number':576,'multiline':True]
['text':'context','line_number':589,'multiline':True]
['text':' start of keyword definition ','line_number':611,'multiline':True]
['text':' we will grab pairs, trim spaces, lowercase keywords, sort and return ','line_number':612,'multiline':True]
['text':' skip leading spaces ','line_number':615,'multiline':True]
['text':' handle trailing "; " ','line_number':619,'multiline':True]
['text':' lack of '=' [foo@currency] is illegal ','line_number':628,'multiline':True]
['text':' ';' before '=' [foo@currency;collation=pinyin] is illegal ','line_number':629,'multiline':True]
['text':' need to normalize both keyword and keyword name ','line_number':634,'multiline':True]
['text':' keyword name too long for internal buffer ','line_number':636,'multiline':True]
['text':' zero-length keyword is an error. ','line_number':646,'multiline':True]
['text':' now grab the value part. First we skip the '=' ','line_number':654,'multiline':True]
['text':' then we leading spaces ','line_number':656,'multiline':True]
['text':' Premature end or zero-length value ','line_number':661,'multiline':True]
['text':' If this is a duplicate keyword, then ignore it ','line_number':684,'multiline':True]
['text':' now we have a list of keywords ','line_number':696,'multiline':True]
['text':' we need to sort it ','line_number':697,'multiline':True]
['text':' Now construct the keyword part ','line_number':700,'multiline':True]
['text':' no keywords, return at once ','line_number':777,'multiline':True]
['text':' find the first keyword ','line_number':781,'multiline':True]
['text':' skip @ or ; ','line_number':786,'multiline':True]
['text':' key must have =value ','line_number':789,'multiline':True]
['text':' strip leading & trailing spaces (TC decided to tolerate these) ','line_number':792,'multiline':True]
['text':' now keyValueTail points to first char after the keyName ','line_number':800,'multiline':True]
['text':' copy & normalize keyName from locale ','line_number':801,'multiline':True]
['text':' empty keyword name in passed-in locale ','line_number':803,'multiline':True]
['text':' malformed keyword name ','line_number':809,'multiline':True]
['text':' keyword name too long for internal buffer ','line_number':815,'multiline':True]
['text':' terminate ','line_number':820,'multiline':True]
['text':' current entry matches the keyword. ','line_number':825,'multiline':True]
['text':' skip '=' ','line_number':826,'multiline':True]
['text':' First strip leading & trailing spaces (TC decided to tolerate these) ','line_number':827,'multiline':True]
['text':' Now copy the value, but check well-formedness ','line_number':835,'multiline':True]
['text':' empty key value name in passed-in locale ','line_number':837,'multiline':True]
['text':' malformed key value ','line_number':842,'multiline':True]
['text':' Should we lowercase value to return here? Tests expect as-is. ','line_number':845,'multiline':True]
['text':' TODO: sorting. removal. ','line_number':860,'multiline':True]
['text':' The capacity is less than the length?! Is this NULL terminated? ','line_number':889,'multiline':True]
['text':' malformed key value ','line_number':902,'multiline':True]
['text':' Should we force lowercase in value to set? ','line_number':906,'multiline':True]
['text':' keywordValue too long for internal buffer ','line_number':909,'multiline':True]
['text':' terminate ','line_number':915,'multiline':True]
['text':' no keywords = nothing to remove ','line_number':919,'multiline':True]
['text':' had a single @ ','line_number':925,'multiline':True]
['text':' already had the @ ','line_number':926,'multiline':True]
['text':' startSearchHere points at the @ ','line_number':927,'multiline':True]
['text':' no change ','line_number':933,'multiline':True]
['text':' end shortcut - no @ ','line_number':942,'multiline':True]
['text':' search for keyword ','line_number':945,'multiline':True]
['text':' skip @ or ; ','line_number':950,'multiline':True]
['text':' key must have =value ','line_number':953,'multiline':True]
['text':' strip leading & trailing spaces (TC decided to tolerate these) ','line_number':956,'multiline':True]
['text':' now keyValueTail points to first char after the keyName ','line_number':964,'multiline':True]
['text':' copy & normalize keyName from locale ','line_number':965,'multiline':True]
['text':' empty keyword name in passed-in locale ','line_number':967,'multiline':True]
['text':' malformed keyword name ','line_number':973,'multiline':True]
['text':' keyword name too long for internal buffer ','line_number':979,'multiline':True]
['text':' terminate ','line_number':984,'multiline':True]
['text':' start processing the value part ','line_number':988,'multiline':True]
['text':' skip '=' ','line_number':989,'multiline':True]
['text':' First strip leading & trailing spaces (TC decided to tolerate these) ','line_number':990,'multiline':True]
['text':' empty key value in passed-in locale ','line_number':999,'multiline':True]
['text':' Current entry matches the input keyword. Update the entry ','line_number':1005,'multiline':True]
['text':' updating a value ','line_number':1006,'multiline':True]
['text':' for any subsequent key-value pair ','line_number':1008,'multiline':True]
['text':' else removing this entry, don't emit anything ','line_number':1012,'multiline':True]
['text':' input keyword sorts earlier than current entry, add before current entry ','line_number':1015,'multiline':True]
['text':' insert new entry at this location ','line_number':1017,'multiline':True]
['text':' for any subsequent key-value pair ','line_number':1019,'multiline':True]
['text':' copy the current entry ','line_number':1025,'multiline':True]
['text':' for any subsequent key-value pair ','line_number':1027,'multiline':True]
['text':' append new entry at the end, it sorts later than existing entries ','line_number':1033,'multiline':True]
['text':' skip keyValuePrefix update, no subsequent key-value pair ','line_number':1035,'multiline':True]
['text':' end loop searching ','line_number':1042,'multiline':True]
['text':' Any error from updatedKeysAndValues.append above would be internal and not due to
     * problems with the passed-in locale. So if we did encounter problems with the
     * passed-in locale above, those errors took precedence and overrode any error
     * status from updatedKeysAndValues.append, and also caused a return of 0. If there
     * are errors here they are from updatedKeysAndValues.append; they do cause an
     * error return but the passed-in locale is unmodified and the original bufLen is
     * returned.
     ','line_number':1044,'multiline':True]
['text':' if input key/value specified removal of a keyword not present in locale, or
         * there was an error in CharString.append, leave original locale alone. ','line_number':1053,'multiline':True]
['text':' needLen = length of the part before '@'','line_number':1059,'multiline':False]
['text':' Check to see can we fit the startSearchHere, if not, return','line_number':1061,'multiline':False]
['text':' U_BUFFER_OVERFLOW_ERROR without copy updatedKeysAndValues into it.','line_number':1062,'multiline':False]
['text':' We do this because this API function does not behave like most others:','line_number':1063,'multiline':False]
['text':' It promises never to set a U_STRING_NOT_TERMINATED_WARNING.','line_number':1064,'multiline':False]
['text':' When the contents fits but without the terminating NUL, in this case we need to not change','line_number':1065,'multiline':False]
['text':' the buffer contents and return with a buffer overflow error.','line_number':1066,'multiline':False]
['text':' ### ID parsing implementation *************************************************','line_number':1078,'multiline':True]
['text':'returns TRUE if one of the special prefixes is here (s=string)
  'x-' or 'i-' ','line_number':1082,'multiline':True]
['text':' Dot terminates it because of POSIX form  where dot precedes the codepage
 * except for variant
 ','line_number':1086,'multiline':True]
['text':'*
 * Lookup 'key' in the array 'list'.  The array 'list' should contain
 * a NULL entry, followed by more entries, and a second NULL entry.
 *
 * The 'list' param should be LANGUAGES, LANGUAGES_3, COUNTRIES, or
 * COUNTRIES_3.
 ','line_number':1091,'multiline':True]
['text':' Make two passes through two NULL-terminated arrays at 'list' ','line_number':1103,'multiline':True]
['text':' skip final NULL *CWB','line_number':1111,'multiline':True]
['text':'
 * the internal functions _getLanguage(), _getCountry(), _getVariant()
 * avoid duplicating code to handle the earlier locale ID pieces
 * in the functions for the later ones by
 * setting the *pEnd pointer to where they stopped parsing
 *
 * TODO try to use this in Locale
 ','line_number':1132,'multiline':True]
['text':' if it starts with i- or x- then copy that prefix ','line_number':1156,'multiline':True]
['text':' copy the language as far as possible and count its length ','line_number':1163,'multiline':True]
['text':' convert 3 character code to 2 character code if possible *CWB','line_number':1170,'multiline':True]
['text':' copy the second item as far as possible and count its length ','line_number':1196,'multiline':True]
['text':' If it's exactly 4 characters long, then it's a script and not a country. ','line_number':1202,'multiline':True]
['text':' copy the country as far as possible and count its length ','line_number':1226,'multiline':True]
['text':' the country should be either length 2 or 3 ','line_number':1232,'multiline':True]
['text':' convert 3 character code to 2 character code if possible *CWB','line_number':1234,'multiline':True]
['text':'*
 * @param needSeparator if true, then add leading '_' if any variants
 * are added to 'variant'
 ','line_number':1254,'multiline':True]
['text':' get one or more variant tags and separate them with '_' ','line_number':1265,'multiline':True]
['text':' get a variant string after a '-' or '_' ','line_number':1267,'multiline':True]
['text':' if there is no variant tag after a '-' or '_' then look for '@' ','line_number':1281,'multiline':True]
['text':' keep localeID ','line_number':1284,'multiline':True]
['text':' point after the '@' ','line_number':1286,'multiline':True]
['text':' Keyword enumeration ','line_number':1303,'multiline':True]
['text':'status','line_number':1320,'multiline':True]
['text':'status','line_number':1333,'multiline':True]
['text':'status','line_number':1350,'multiline':True]
['text':' Skip the language ','line_number':1415,'multiline':True]
['text':' Skip the script if available ','line_number':1423,'multiline':True]
['text':' Found optional script ','line_number':1429,'multiline':True]
['text':' Skip the Country ','line_number':1432,'multiline':True]
['text':' keywords are located after '@' ','line_number':1441,'multiline':True]
['text':' bit-flags for 'options' parameter of _canonicalize ','line_number':1455,'multiline':True]
['text':'*
 * Canonicalize the given localeID, to level 1 or to level 2,
 * depending on the options.  To specify level 1, pass in options=0.
 * To specify level 2, pass in options=_ULOC_CANONICALIZE.
 *
 * This is the code underlying uloc_getName and uloc_canonicalize.
 ','line_number':1464,'multiline':True]
['text':' get all pieces, one after another, and separate with '_' ','line_number':1498,'multiline':True]
['text':' Found optional script ','line_number':1515,'multiline':True]
['text':' If there is something else, then we add the _ ','line_number':1519,'multiline':True]
['text':' Found optional country ','line_number':1530,'multiline':True]
['text':' If there is something else, then we add the _  if we found country before. ','line_number':1534,'multiline':True]
['text':' skip '_' and variant ','line_number':1547,'multiline':True]
['text':' Copy POSIX-style charset specifier, if any [mr.utf8] ','line_number':1553,'multiline':True]
['text':' Scan ahead to next '@' and determine if it is followed by '=' and/or ';'
       After this, tmpLocaleID either points to '@' or is NULL ','line_number':1571,'multiline':True]
['text':' Copy POSIX-style variant, if any [mr@FOO] ','line_number':1578,'multiline':True]
['text':' Handle @FOO variant if @ is present and not followed by = ','line_number':1592,'multiline':True]
['text':' Add missing '_' if needed ','line_number':1594,'multiline':True]
['text':' Look up the ID in the canonicalization map ','line_number':1613,'multiline':True]
['text':' Don't remap "" if keywords present ','line_number':1618,'multiline':True]
['text':' ### ID parsing API *************************************************','line_number':1639,'multiline':True]
['text':' uloc_getLanguage will return a 2 character iso-639 code if one exists. *CWB','line_number':1682,'multiline':True]
['text':' skip the language ','line_number':1709,'multiline':True]
['text':' Skip the language ','line_number':1735,'multiline':True]
['text':' Skip the script if available ','line_number':1743,'multiline':True]
['text':' Found optional script ','line_number':1749,'multiline':True]
['text':' Skip the language ','line_number':1782,'multiline':True]
['text':' Skip the script if available ','line_number':1790,'multiline':True]
['text':' Found optional script ','line_number':1796,'multiline':True]
['text':' Skip the Country ','line_number':1799,'multiline':True]
['text':' Found optional country ','line_number':1807,'multiline':True]
['text':' If there was no country ID, skip a possible extra IDSeparator ','line_number':1811,'multiline':True]
['text':' Check for incomplete id. ','line_number':1992,'multiline':True]
['text':' First, attempt Windows platform lookup if available, but fall','line_number':1997,'multiline':False]
['text':' through to catch any special cases (ICU vs Windows name differences).','line_number':1998,'multiline':False]
['text':' Windows found an LCID, return that','line_number':2004,'multiline':False]
['text':' uprv_convertToLCID does not support keywords other than collation.','line_number':2014,'multiline':False]
['text':' Remove all keywords except collation.','line_number':2015,'multiline':False]
['text':' fall through - all keywords are simply ignored','line_number':2042,'multiline':False]
['text':' ### Default locale *************************************************','line_number':2056,'multiline':True]
['text':' the error code isn't currently used for anything by this function','line_number':2070,'multiline':True]
['text':' propagate change to C++ ','line_number':2072,'multiline':True]
['text':'*
 * Returns a list of all 2-letter language codes defined in ISO 639.  This is a pointer
 * to an array of pointers to arrays of char.  All of these pointers are owned
 * by ICU-- do not delete them, and do not write through them.  The array is
 * terminated with a null pointer.
 ','line_number':2076,'multiline':True]
['text':'*
 * Returns a list of all 2-letter country codes defined in ISO 639.  This is a
 * pointer to an array of pointers to arrays of char.  All of these pointers are
 * owned by ICU-- do not delete them, and do not write through them.  The array is
 * terminated with a null pointer.
 ','line_number':2088,'multiline':True]
['text':' unknown keyword, but syntax is fine..','line_number':2105,'multiline':False]
['text':' unknown keyword, but syntax is fine..','line_number':2116,'multiline':False]
['text':' Checks if the specified locale key is well-formed with the legacy locale syntax.','line_number':2161,'multiline':False]
['text':'','line_number':2162,'multiline':False]
['text':' Note:','line_number':2163,'multiline':False]
['text':'  LDML/CLDR provides some definition of keyword syntax in','line_number':2164,'multiline':False]
['text':'  * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier and','line_number':2165,'multiline':False]
['text':'  * http://www.unicode.org/reports/tr35/#Old_Locale_Extension_Syntax','line_number':2166,'multiline':False]
['text':'  Keys can only consist of [0-9a-zA-Z].','line_number':2167,'multiline':False]
['text':' Checks if the specified locale type is well-formed with the legacy locale syntax.','line_number':2180,'multiline':False]
['text':'','line_number':2181,'multiline':False]
['text':' Note:','line_number':2182,'multiline':False]
['text':'  LDML/CLDR provides some definition of keyword syntax in','line_number':2183,'multiline':False]
['text':'  * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier and','line_number':2184,'multiline':False]
['text':'  * http://www.unicode.org/reports/tr35/#Old_Locale_Extension_Syntax','line_number':2185,'multiline':False]
['text':'  Values (types) can only consist of [0-9a-zA-Z], plus for legacy values','line_number':2186,'multiline':False]
['text':'  we allow [/_-+] in the middle (e.g. "Etc/GMT+1", "Asia/Tel_Aviv")','line_number':2187,'multiline':False]
['text':'eof','line_number':2195,'multiline':True]
