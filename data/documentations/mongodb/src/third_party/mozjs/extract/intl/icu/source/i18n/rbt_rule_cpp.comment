['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 **********************************************************************
 *   Copyright (C) 1999-2011, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
 *   Date        Name        Description
 *   11/17/99    aliu        Creation.
 **********************************************************************
 ','line_number':3,'multiline':True]
['text':' " > "','line_number':29,'multiline':False]
['text':'*
 * Construct a new rule with the given input, output text, and other
 * attributes.  A cursor position may be specified for the output text.
 * @param input input string, including key and optional ante and
 * post context
 * @param anteContextPos offset into input to end of ante context, or -1 if
 * none.  Must be <= input.length() if not -1.
 * @param postContextPos offset into input to start of post context, or -1
 * if none.  Must be <= input.length() if not -1, and must be >=
 * anteContextPos.
 * @param output output string
 * @param cursorPosition offset into output at which cursor is located, or -1 if
 * none.  If less than zero, then the cursor is placed after the
 * <code>output</code>; that is, -1 is equivalent to
 * <code>output.length()</code>.  If greater than
 * <code>output.length()</code> then an exception is thrown.
 * @param segs array of UnicodeFunctors corresponding to input pattern
 * segments, or null if there are none.  The array itself is adopted,
 * but the pointers within it are not.
 * @param segsCount number of elements in segs[]
 * @param anchorStart TRUE if the the rule is anchored on the left to
 * the context start
 * @param anchorEnd TRUE if the rule is anchored on the right to the
 * context limit
 ','line_number':33,'multiline':True]
['text':' Do range checks only when warranted to save time','line_number':74,'multiline':False]
['text':' throw new IllegalArgumentException("Invalid ante context");','line_number':79,'multiline':False]
['text':' throw new IllegalArgumentException("Invalid post context");','line_number':90,'multiline':False]
['text':' throw new IllegalArgumentException("Invalid cursor position");','line_number':99,'multiline':False]
['text':' We don't validate the segments array.  The caller must','line_number':103,'multiline':False]
['text':' guarantee that the segments are well-formed (that is, that','line_number':104,'multiline':False]
['text':' all $n references in the output refer to indices of this','line_number':105,'multiline':False]
['text':' array, and that no array elements are null).','line_number':106,'multiline':False]
['text':' test for NULL ','line_number':123,'multiline':True]
['text':' test for NULL ','line_number':134,'multiline':True]
['text':' test for NULL ','line_number':146,'multiline':True]
['text':' test for NULL ','line_number':154,'multiline':True]
['text':'*
 * Copy constructor.
 ','line_number':161,'multiline':True]
['text':'*
 * Return the preceding context length.  This method is needed to
 * support the <code>Transliterator</code> method
 * <code>getMaximumContextLength()</code>.  Internally, this is
 * implemented as the anteContextLength, optionally plus one if
 * there is a start anchor.  The one character anchor gap is
 * needed to make repeated incremental transliteration with
 * anchors work.
 ','line_number':202,'multiline':True]
['text':'*
 * Internal method.  Returns 8-bit index value for this rule.
 * This is the low byte of the first character of the key,
 * unless the first character of the key is a set.  If it's a
 * set, or otherwise can match multiple keys, the index value is -1.
 ','line_number':215,'multiline':True]
['text':' A pattern with just ante context {such as foo)>bar} can','line_number':223,'multiline':False]
['text':' match any key.','line_number':224,'multiline':False]
['text':'*
 * Internal method.  Returns true if this rule matches the given
 * index value.  The index value is an 8-bit integer, 0..255,
 * representing the low byte of the first character of the key.
 * It matches this rule if it matches the first character of the
 * key, or if the first character of the key is a set, and the set
 * contains any character with a low byte equal to the index
 * value.  If the rule contains only ante context, as in foo)>bar,
 * then it will match any key.
 ','line_number':231,'multiline':True]
['text':' Delegate to the key, or if there is none, to the postContext.','line_number':242,'multiline':False]
['text':' If there is neither then we match any key; return true.','line_number':243,'multiline':False]
['text':'*
 * Return true if this rule masks another rule.  If r1 masks r2 then
 * r1 matches any input string that r2 matches.  If r1 masks r2 and r2 masks
 * r1 then r1 == r2.  Examples: "a>x" masks "ab>y".  "a>x" masks "a[b]>y".
 * "[c]a>x" masks "[dc]a>y".
 ','line_number':248,'multiline':True]
['text':' Rule r1 masks rule r2 if the string formed of the
     * antecontext, key, and postcontext overlaps in the following
     * way:
     *
     * r1:      aakkkpppp
     * r2:     aaakkkkkpppp
     *            ^
     * 
     * The strings must be aligned at the first character of the
     * key.  The length of r1 to the left of the alignment point
     * must be <= the length of r2 to the left; ditto for the
     * right.  The characters of r1 must equal (or be a superset
     * of) the corresponding characters of r2.  The superset
     * operation should be performed to check for UnicodeSet
     * masking.
     *
     * Anchors:  Two patterns that differ only in anchors only
     * mask one another if they are exactly equal, and r2 has
     * all the anchors r1 has (optionally, plus some).  Here Y
     * means the row masks the column, N means it doesn't.
     *
     *         ab   ^ab    ab$  ^ab$
     *   ab    Y     Y     Y     Y
     *  ^ab    N     Y     N     Y
     *   ab$   N     N     Y     Y
     *  ^ab$   N     N     N     Y
     *
     * Post context: {a}b masks ab, but not vice versa, since {a}b
     * matches everything ab matches, and {a}b matches {|a|}b but ab
     * does not.  Pre context is different (a{b} does not align with
     * ab).
     ','line_number':255,'multiline':True]
['text':' LIMITATION of the current mask algorithm: Some rule
     * maskings are currently not detected.  For example,
     * "{Lu}]a>x" masks "A]a>y".  This can be added later. TODO
     ','line_number':288,'multiline':True]
['text':' TODO Clean this up -- some logic might be combinable with the','line_number':300,'multiline':False]
['text':' next statement.','line_number':301,'multiline':False]
['text':' Test for anchor masking','line_number':303,'multiline':False]
['text':' The following boolean logic implements the table above','line_number':307,'multiline':False]
['text':'*
 * Attempt a match and replacement at the given position.  Return
 * the degree of match between this rule and the given text.  The
 * degree of match may be mismatch, a partial match, or a full
 * match.  A mismatch means at least one character of the text
 * does not match the context or key.  A partial match means some
 * context and key characters match, but the text is not long
 * enough to match all of them.  A full match means all context
 * and key characters match.
 * 
 * If a full match is obtained, perform a replacement, update pos,
 * and return U_MATCH.  Otherwise both text and pos are unchanged.
 * 
 * @param text the text
 * @param pos the position indices
 * @param incremental if TRUE, test for partial matches that may
 * be completed by additional text inserted at pos.limit.
 * @return one of <code>U_MISMATCH</code>,
 * <code>U_PARTIAL_MATCH</code>, or <code>U_MATCH</code>.  If
 * incremental is FALSE then U_PARTIAL_MATCH will not be returned.
 ','line_number':331,'multiline':True]
['text':' Matching and replacing are done in one method because the','line_number':355,'multiline':False]
['text':' replacement operation needs information obtained during the','line_number':356,'multiline':False]
['text':' match.  Another way to do this is to have the match method','line_number':357,'multiline':False]
['text':' create a match result struct with relevant offsets, and to pass','line_number':358,'multiline':False]
['text':' this into the replace method.','line_number':359,'multiline':False]
['text':' ============================ MATCH ===========================','line_number':361,'multiline':False]
['text':' Reset segment match data','line_number':363,'multiline':False]
['text':'    int32_t lenDelta, keyLimit;','line_number':370,'multiline':False]
['text':' ------------------------ Ante Context ------------------------','line_number':373,'multiline':False]
['text':' A mismatch in the ante context, or with the start anchor,','line_number':375,'multiline':False]
['text':' is an outright U_MISMATCH regardless of whether we are','line_number':376,'multiline':False]
['text':' incremental or not.','line_number':377,'multiline':False]
['text':' offset into 'text'','line_number':378,'multiline':False]
['text':'    int32_t newStart = 0;','line_number':379,'multiline':False]
['text':' Note (1): We process text in 16-bit code units, rather than','line_number':382,'multiline':False]
['text':' 32-bit code points.  This works because stand-ins are','line_number':383,'multiline':False]
['text':' always in the BMP and because we are doing a literal match','line_number':384,'multiline':False]
['text':' operation, which can be done 16-bits at a time.','line_number':385,'multiline':False]
['text':' Start reverse match at char before pos.start','line_number':391,'multiline':False]
['text':' ------------------------ Start Anchor ------------------------','line_number':403,'multiline':False]
['text':' -------------------- Key and Post Context --------------------','line_number':409,'multiline':False]
['text':' The key matches just before pos.limit, and there is','line_number':424,'multiline':False]
['text':' a postContext.  Since we are in incremental mode,','line_number':425,'multiline':False]
['text':' we must assume more characters may be inserted at','line_number':426,'multiline':False]
['text':' pos.limit -- this is a partial match.','line_number':427,'multiline':False]
['text':' ------------------------- Stop Anchor ------------------------','line_number':437,'multiline':False]
['text':' =========================== REPLACE ==========================','line_number':448,'multiline':False]
['text':' We have a full match.  The key is between pos.start and','line_number':450,'multiline':False]
['text':' keyLimit.','line_number':451,'multiline':False]
['text':' Restrict new value of start to [minOText, min(oText, pos.limit)].','line_number':460,'multiline':False]
['text':'*
 * Create a source string that represents this rule.  Append it to the
 * given string.
 ','line_number':465,'multiline':True]
['text':' Accumulate special characters (and non-specials following them)','line_number':472,'multiline':False]
['text':' into quoteBuf.  Append quoteBuf, within single quotes, when','line_number':473,'multiline':False]
['text':' a non-quoted element must be inserted.','line_number':474,'multiline':False]
['text':' Do not emit the braces '{' '}' around the pattern if there','line_number':477,'multiline':False]
['text':' is neither anteContext nor postContext.','line_number':478,'multiline':False]
['text':' Emit start anchor','line_number':482,'multiline':False]
['text':'^','line_number':484,'multiline':True]
['text':' Emit the input pattern','line_number':487,'multiline':False]
['text':'{','line_number':491,'multiline':True]
['text':'}','line_number':497,'multiline':True]
['text':' Emit end anchor','line_number':502,'multiline':False]
['text':'$','line_number':504,'multiline':True]
['text':' Emit the output pattern','line_number':509,'multiline':False]
['text':';','line_number':514,'multiline':True]
['text':' assert(output != NULL);','line_number':524,'multiline':False]
['text':' Don't have to do segments since they are in the context or key','line_number':526,'multiline':False]
['text':'*
 * Union the set of all characters that may be modified by this rule
 * into the given set.
 ','line_number':529,'multiline':True]
['text':'*
 * Union the set of all characters that may be emitted by this rule
 * into the given set.
 ','line_number':547,'multiline':True]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':557,'multiline':True]
['text':'eof','line_number':559,'multiline':False]
