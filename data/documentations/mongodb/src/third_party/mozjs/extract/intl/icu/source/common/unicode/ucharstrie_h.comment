['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*   Copyright (C) 2010-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  ucharstrie.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2010nov14
*   created by: Markus W. Scherer
','line_number':3,'multiline':True]
['text':'*
 * \file
 * \brief C++ API: Trie for mapping Unicode strings (or 16-bit-unit sequences)
 *                 to integer values.
 ','line_number':20,'multiline':True]
['text':'*
 * Light-weight, non-const reader class for a UCharsTrie.
 * Traverses a char16_t-serialized data structure with minimal state,
 * for mapping strings (16-bit-unit sequences) to non-negative integer values.
 *
 * This class owns the serialized trie data only if it was constructed by
 * the builder's build() method.
 * The public constructor and the copy constructor only alias the data (only copy the pointer).
 * There is no assignment operator.
 *
 * This class is not intended for public subclassing.
 * @stable ICU 4.8
 ','line_number':40,'multiline':True]
['text':'*
     * Constructs a UCharsTrie reader instance.
     *
     * The trieUChars must contain a copy of a char16_t sequence from the UCharsTrieBuilder,
     * starting with the first char16_t of that sequence.
     * The UCharsTrie object will not read more char16_ts than
     * the UCharsTrieBuilder generated in the corresponding build() call.
     *
     * The array is not copied/cloned and must not be modified while
     * the UCharsTrie object is in use.
     *
     * @param trieUChars The char16_t array that contains the serialized trie.
     * @stable ICU 4.8
     ','line_number':55,'multiline':True]
['text':'*
     * Destructor.
     * @stable ICU 4.8
     ','line_number':73,'multiline':True]
['text':'*
     * Copy constructor, copies the other trie reader object and its state,
     * but not the char16_t array which will be shared. (Shallow copy.)
     * @param other Another UCharsTrie object.
     * @stable ICU 4.8
     ','line_number':79,'multiline':True]
['text':'*
     * Resets this trie to its initial state.
     * @return *this
     * @stable ICU 4.8
     ','line_number':89,'multiline':True]
['text':'*
     * Returns the state of this trie as a 64-bit integer.
     * The state value is never 0.
     *
     * @return opaque state value
     * @see resetToState64
     * @stable ICU 65
     ','line_number':100,'multiline':True]
['text':'*
     * Resets this trie to the saved state.
     * Unlike resetToState(State), the 64-bit state value
     * must be from getState64() from the same trie object or
     * from one initialized the exact same way.
     * Because of no validation, this method is faster.
     *
     * @param state The opaque trie state value from getState64().
     * @return *this
     * @see getState64
     * @see resetToState
     * @see reset
     * @stable ICU 65
     ','line_number':113,'multiline':True]
['text':'*
     * UCharsTrie state object, for saving a trie's current state
     * and resetting the trie back to this state later.
     * @stable ICU 4.8
     ','line_number':133,'multiline':True]
['text':'*
         * Constructs an empty State.
         * @stable ICU 4.8
         ','line_number':140,'multiline':True]
['text':'*
     * Saves the state of this trie.
     * @param state The State object to hold the trie's state.
     * @return *this
     * @see resetToState
     * @stable ICU 4.8
     ','line_number':153,'multiline':True]
['text':'*
     * Resets this trie to the saved state.
     * If the state object contains no state, or the state of a different trie,
     * then this trie remains unchanged.
     * @param state The State object which holds a saved trie state.
     * @return *this
     * @see saveState
     * @see reset
     * @stable ICU 4.8
     ','line_number':167,'multiline':True]
['text':'*
     * Determines whether the string so far matches, whether it has a value,
     * and whether another input char16_t can continue a matching string.
     * @return The match/value Result.
     * @stable ICU 4.8
     ','line_number':185,'multiline':True]
['text':'*
     * Traverses the trie from the initial state for this input char16_t.
     * Equivalent to reset().next(uchar).
     * @param uchar Input char value. Values below 0 and above 0xffff will never match.
     * @return The match/value Result.
     * @stable ICU 4.8
     ','line_number':193,'multiline':True]
['text':'*
     * Traverses the trie from the initial state for the
     * one or two UTF-16 code units for this input code point.
     * Equivalent to reset().nextForCodePoint(cp).
     * @param cp A Unicode code point 0..0x10ffff.
     * @return The match/value Result.
     * @stable ICU 4.8
     ','line_number':205,'multiline':True]
['text':'*
     * Traverses the trie from the current state for this input char16_t.
     * @param uchar Input char value. Values below 0 and above 0xffff will never match.
     * @return The match/value Result.
     * @stable ICU 4.8
     ','line_number':215,'multiline':True]
['text':'*
     * Traverses the trie from the current state for the
     * one or two UTF-16 code units for this input code point.
     * @param cp A Unicode code point 0..0x10ffff.
     * @return The match/value Result.
     * @stable ICU 4.8
     ','line_number':223,'multiline':True]
['text':'*
     * Traverses the trie from the current state for this string.
     * Equivalent to
     * \code
     * Result result=current();
     * for(each c in s)
     *   if(!USTRINGTRIE_HAS_NEXT(result)) return USTRINGTRIE_NO_MATCH;
     *   result=next(c);
     * return result;
     * \endcode
     * @param s A string. Can be NULL if length is 0.
     * @param length The length of the string. Can be -1 if NUL-terminated.
     * @return The match/value Result.
     * @stable ICU 4.8
     ','line_number':232,'multiline':True]
['text':'*
     * Returns a matching string's value if called immediately after
     * current()/first()/next() returned USTRINGTRIE_INTERMEDIATE_VALUE or USTRINGTRIE_FINAL_VALUE.
     * getValue() can be called multiple times.
     *
     * Do not call getValue() after USTRINGTRIE_NO_MATCH or USTRINGTRIE_NO_VALUE!
     * @return The value for the string so far.
     * @stable ICU 4.8
     ','line_number':249,'multiline':True]
['text':' U_ASSERT(leadUnit>=kMinValueLead);','line_number':261,'multiline':False]
['text':'*
     * Determines whether all strings reachable from the current state
     * map to the same value.
     * @param uniqueValue Receives the unique value, if this function returns true.
     *                    (output-only)
     * @return true if all strings reachable from the current state
     *         map to the same value.
     * @stable ICU 4.8
     ','line_number':266,'multiline':True]
['text':' Skip the rest of a pending linear-match node.','line_number':277,'multiline':False]
['text':'*
     * Finds each char16_t which continues the string from the current state.
     * That is, each char16_t c for which it would be next(c)!=USTRINGTRIE_NO_MATCH now.
     * @param out Each next char16_t is appended to this object.
     * @return the number of char16_ts which continue the string from here
     * @stable ICU 4.8
     ','line_number':281,'multiline':True]
['text':'*
     * Iterator for all of the (string, value) pairs in a UCharsTrie.
     * @stable ICU 4.8
     ','line_number':290,'multiline':True]
['text':'*
         * Iterates from the root of a char16_t-serialized UCharsTrie.
         * @param trieUChars The trie char16_ts.
         * @param maxStringLength If 0, the iterator returns full strings.
         *                        Otherwise, the iterator returns strings with this maximum length.
         * @param errorCode Standard ICU error code. Its input value must
         *                  pass the U_SUCCESS() test, or else the function returns
         *                  immediately. Check for U_FAILURE() on output or use with
         *                  function chaining. (See User Guide for details.)
         * @stable ICU 4.8
         ','line_number':296,'multiline':True]
['text':'*
         * Iterates from the current state of the specified UCharsTrie.
         * @param trie The trie whose state will be copied for iteration.
         * @param maxStringLength If 0, the iterator returns full strings.
         *                        Otherwise, the iterator returns strings with this maximum length.
         * @param errorCode Standard ICU error code. Its input value must
         *                  pass the U_SUCCESS() test, or else the function returns
         *                  immediately. Check for U_FAILURE() on output or use with
         *                  function chaining. (See User Guide for details.)
         * @stable ICU 4.8
         ','line_number':309,'multiline':True]
['text':'*
         * Destructor.
         * @stable ICU 4.8
         ','line_number':322,'multiline':True]
['text':'*
         * Resets this iterator to its initial state.
         * @return *this
         * @stable ICU 4.8
         ','line_number':328,'multiline':True]
['text':'*
         * @return true if there are more elements.
         * @stable ICU 4.8
         ','line_number':335,'multiline':True]
['text':'*
         * Finds the next (string, value) pair if there is one.
         *
         * If the string is truncated to the maximum length and does not
         * have a real value, then the value is set to -1.
         * In this case, this "not a real value" is indistinguishable from
         * a real value of -1.
         * @param errorCode Standard ICU error code. Its input value must
         *                  pass the U_SUCCESS() test, or else the function returns
         *                  immediately. Check for U_FAILURE() on output or use with
         *                  function chaining. (See User Guide for details.)
         * @return true if there is another element.
         * @stable ICU 4.8
         ','line_number':341,'multiline':True]
['text':'*
         * @return The string for the last successful next().
         * @stable ICU 4.8
         ','line_number':357,'multiline':True]
['text':'*
         * @return The value for the last successful next().
         * @stable ICU 4.8
         ','line_number':362,'multiline':True]
['text':' no real value for str','line_number':371,'multiline':False]
['text':' Skip intermediate value which was already delivered.','line_number':382,'multiline':False]
['text':' The stack stores pairs of integers for backtracking to another','line_number':388,'multiline':False]
['text':' outbound edge of a branch node.','line_number':389,'multiline':False]
['text':' The first integer is an offset from uchars_.','line_number':390,'multiline':False]
['text':' The second integer has the str_.length() from before the node in bits 15..0,','line_number':391,'multiline':False]
['text':' and the remaining branch length in bits 31..16.','line_number':392,'multiline':False]
['text':' (We could store the remaining branch length minus 1 in bits 30..16 and not use the sign bit,','line_number':393,'multiline':False]
['text':' but the code looks more confusing that way.)','line_number':394,'multiline':False]
['text':'*
     * Constructs a UCharsTrie reader instance.
     * Unlike the public constructor which just aliases an array,
     * this constructor adopts the builder's array.
     * This constructor is only called by the builder.
     ','line_number':401,'multiline':True]
['text':' No assignment operator.','line_number':411,'multiline':False]
['text':' Reads a compact 32-bit integer.','line_number':418,'multiline':False]
['text':' pos is already after the leadUnit, and the lead unit has bit 15 reset.','line_number':419,'multiline':False]
['text':' U_ASSERT(kMinValueLead<=leadUnit && leadUnit<kValueIsFinal);','line_number':447,'multiline':False]
['text':' U_ASSERT(kMinValueLead<=leadUnit && leadUnit<kValueIsFinal);','line_number':459,'multiline':False]
['text':' Handles a branch node for both next(uchar) and next(string).','line_number':499,'multiline':False]
['text':' Requires remainingLength_<0.','line_number':502,'multiline':False]
['text':' Helper functions for hasUniqueValue().','line_number':505,'multiline':False]
['text':' Recursively finds a unique value (or whether there is not a unique one)','line_number':506,'multiline':False]
['text':' from a branch.','line_number':507,'multiline':False]
['text':' Recursively finds a unique value (or whether there is not a unique one)','line_number':510,'multiline':False]
['text':' starting from a position on a node lead unit.','line_number':511,'multiline':False]
['text':' Helper functions for getNextUChars().','line_number':514,'multiline':False]
['text':' getNextUChars() when pos is on a branch node.','line_number':515,'multiline':False]
['text':' UCharsTrie data structure','line_number':518,'multiline':False]
['text':'','line_number':519,'multiline':False]
['text':' The trie consists of a series of char16_t-serialized nodes for incremental','line_number':520,'multiline':False]
['text':' Unicode string/char16_t sequence matching. (char16_t=16-bit unsigned integer)','line_number':521,'multiline':False]
['text':' The root node is at the beginning of the trie data.','line_number':522,'multiline':False]
['text':'','line_number':523,'multiline':False]
['text':' Types of nodes are distinguished by their node lead unit ranges.','line_number':524,'multiline':False]
['text':' After each node, except a final-value node, another node follows to','line_number':525,'multiline':False]
['text':' encode match values or continue matching further units.','line_number':526,'multiline':False]
['text':'','line_number':527,'multiline':False]
['text':' Node types:','line_number':528,'multiline':False]
['text':'  - Final-value node: Stores a 32-bit integer in a compact, variable-length format.','line_number':529,'multiline':False]
['text':'    The value is for the string/char16_t sequence so far.','line_number':530,'multiline':False]
['text':'  - Match node, optionally with an intermediate value in a different compact format.','line_number':531,'multiline':False]
['text':'    The value, if present, is for the string/char16_t sequence so far.','line_number':532,'multiline':False]
['text':'','line_number':533,'multiline':False]
['text':'  Aside from the value, which uses the node lead unit's high bits:','line_number':534,'multiline':False]
['text':'','line_number':535,'multiline':False]
['text':'  - Linear-match node: Matches a number of units.','line_number':536,'multiline':False]
['text':'  - Branch node: Branches to other nodes according to the current input unit.','line_number':537,'multiline':False]
['text':'    The node unit is the length of the branch (number of units to select from)','line_number':538,'multiline':False]
['text':'    minus 1. It is followed by a sub-node:','line_number':539,'multiline':False]
['text':'    - If the length is at most kMaxBranchLinearSubNodeLength, then','line_number':540,'multiline':False]
['text':'      there are length-1 (key, value) pairs and then one more comparison unit.','line_number':541,'multiline':False]
['text':'      If one of the key units matches, then the value is either a final value for','line_number':542,'multiline':False]
['text':'      the string so far, or a "jump" delta to the next node.','line_number':543,'multiline':False]
['text':'      If the last unit matches, then matching continues with the next node.','line_number':544,'multiline':False]
['text':'      (Values have the same encoding as final-value nodes.)','line_number':545,'multiline':False]
['text':'    - If the length is greater than kMaxBranchLinearSubNodeLength, then','line_number':546,'multiline':False]
['text':'      there is one unit and one "jump" delta.','line_number':547,'multiline':False]
['text':'      If the input unit is less than the sub-node unit, then "jump" by delta to','line_number':548,'multiline':False]
['text':'      the next sub-node which will have a length of length/2.','line_number':549,'multiline':False]
['text':'      (The delta has its own compact encoding.)','line_number':550,'multiline':False]
['text':'      Otherwise, skip the "jump" delta to the next sub-node','line_number':551,'multiline':False]
['text':'      which will have a length of length-length/2.','line_number':552,'multiline':False]
['text':' Match-node lead unit values, after masking off intermediate-value bits:','line_number':554,'multiline':False]
['text':' 0000..002f: Branch node. If node!=0 then the length is node+1, otherwise','line_number':556,'multiline':False]
['text':' the length is one more than the next unit.','line_number':557,'multiline':False]
['text':' For a branch sub-node with at most this many entries, we drop down','line_number':559,'multiline':False]
['text':' to a linear search.','line_number':560,'multiline':False]
['text':' 0030..003f: Linear-match node, match 1..16 units and continue reading the next node.','line_number':563,'multiline':False]
['text':' Match-node lead unit bits 14..6 for the optional intermediate value.','line_number':567,'multiline':False]
['text':' If these bits are 0, then there is no intermediate value.','line_number':568,'multiline':False]
['text':' Otherwise, see the *NodeValue* constants below.','line_number':569,'multiline':False]
['text':' 0x0040','line_number':570,'multiline':False]
['text':' 0x003f','line_number':571,'multiline':False]
['text':' A final-value node has bit 15 set.','line_number':573,'multiline':False]
['text':' Compact value: After testing and masking off bit 15, use the following thresholds.','line_number':576,'multiline':False]
['text':' 0x4000','line_number':579,'multiline':False]
['text':' 0x3ffeffff','line_number':582,'multiline':False]
['text':' Compact intermediate-value integer, lead unit shared with a branch or linear-match node.','line_number':584,'multiline':False]
['text':' 0x4040','line_number':586,'multiline':False]
['text':' 0xfdffff','line_number':590,'multiline':False]
['text':' Compact delta integers.','line_number':592,'multiline':False]
['text':' 0xfc00','line_number':594,'multiline':False]
['text':' 0x03feffff','line_number':597,'multiline':False]
['text':' For getState64():','line_number':599,'multiline':False]
['text':' The remainingMatchLength_ is -1..14=(kMaxLinearMatchLength=0x10)-2','line_number':600,'multiline':False]
['text':' so we need at least 5 bits for that.','line_number':601,'multiline':False]
['text':' We add 2 to store it as a positive value 1..16=kMaxLinearMatchLength.','line_number':602,'multiline':False]
['text':' Fixed value referencing the UCharsTrie words.','line_number':608,'multiline':False]
['text':' Iterator variables.','line_number':611,'multiline':False]
['text':' Pointer to next trie unit to read. NULL if no more matches.','line_number':613,'multiline':False]
['text':' Remaining length of a linear-match node, minus 1. Negative if not in such a node.','line_number':615,'multiline':False]
['text':' U_SHOW_CPLUSPLUS_API ','line_number':621,'multiline':True]
['text':' __UCHARSTRIE_H__','line_number':623,'multiline':False]
