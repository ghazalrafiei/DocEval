['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' NOTE: C++ SPECIFIC DIFFERENCE FROM JAVA:','line_number':53,'multiline':False]
['text':' The "safe" apply method uses a new MicroProps. In the MicroPropsGenerator, fMicros is copied into the new instance.','line_number':54,'multiline':False]
['text':' The "unsafe" method simply re-uses fMicros, eliminating the extra copy operation.','line_number':55,'multiline':False]
['text':' See MicroProps::processQuantity() for details.','line_number':56,'multiline':False]
['text':' must always return a value','line_number':84,'multiline':False]
['text':' must always return a value','line_number':88,'multiline':False]
['text':' #13453: DecimalFormat wants the affixes from the pattern only (modMiddle, aka pattern modifier).','line_number':98,'multiline':False]
['text':' Safe path: use fImmutablePatternModifier.','line_number':99,'multiline':False]
['text':' #13453: DecimalFormat wants the affixes from the pattern only (modMiddle, aka pattern modifier).','line_number':109,'multiline':False]
['text':' Unsafe path: use fPatternModifier.','line_number':110,'multiline':False]
['text':'////////','line_number':121,'multiline':False]
['text':' Check that macros is error-free before continuing.','line_number':128,'multiline':False]
['text':' TODO: Accept currency symbols from DecimalFormatSymbols?','line_number':133,'multiline':False]
['text':' Pre-compute a few values for efficiency.','line_number':135,'multiline':False]
['text':' Restore CurrencyUnit from MeasureUnit','line_number':148,'multiline':False]
['text':' Use CLDR unit data for all MeasureUnits (not currency and not','line_number':154,'multiline':False]
['text':' no-unit), except use the dedicated percent pattern for percent and','line_number':155,'multiline':False]
['text':' permille. However, use the CLDR unit data for percent/permille if a','line_number':156,'multiline':False]
['text':' long name was requested OR if compact notation is being used, since','line_number':157,'multiline':False]
['text':' compact notation overrides the middle modifier (micros.modMiddle)','line_number':158,'multiline':False]
['text':' normally used for the percent pattern.','line_number':159,'multiline':False]
['text':' Select the numbering system.','line_number':169,'multiline':False]
['text':' TODO: Is there a way to avoid creating the NumberingSystem object?','line_number':175,'multiline':False]
['text':' Give ownership to the function scope.','line_number':177,'multiline':False]
['text':' guarantee NUL-terminated','line_number':182,'multiline':False]
['text':' Default gender: none.','line_number':184,'multiline':False]
['text':' Resolve the symbols. Do this here because currency may need to customize them.','line_number':187,'multiline':False]
['text':' Load and parse the pattern string. It is used for grouping sizes and affixes only.','line_number':206,'multiline':False]
['text':' If we are formatting currency, check for a currency-specific pattern.','line_number':207,'multiline':False]
['text':' NOTE: Although ACCOUNTING and ACCOUNTING_ALWAYS are only supported in currencies right now,','line_number':221,'multiline':False]
['text':' the API contract allows us to add support to other units in the future.','line_number':222,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////','line_number':243,'multiline':False]
['text':'/ START POPULATING THE DEFAULT MICROPROPS AND BUILDING THE MICROPROPS GENERATOR ///','line_number':244,'multiline':False]
['text':'///////////////////////////////////////////////////////////////////////////////////','line_number':245,'multiline':False]
['text':' Unit Preferences and Conversions as our first step','line_number':247,'multiline':False]
['text':' We only support "usage" when the input unit is specified, and is','line_number':250,'multiline':False]
['text':' a CLDR Unit.','line_number':251,'multiline':False]
['text':' Multiplier','line_number':265,'multiline':False]
['text':' Rounding strategy','line_number':271,'multiline':False]
['text':' Bogus Precision - it will get set in the UsagePrefsHandler instead','line_number':280,'multiline':False]
['text':' Grouping strategy','line_number':292,'multiline':False]
['text':' Compact notation uses minGrouping by default since ICU 59','line_number':296,'multiline':False]
['text':' Padding strategy','line_number':303,'multiline':False]
['text':' Integer width','line_number':310,'multiline':False]
['text':' Sign display','line_number':317,'multiline':False]
['text':' Decimal mark display','line_number':324,'multiline':False]
['text':' Use monetary separator symbols','line_number':331,'multiline':False]
['text':' Inner modifier (scientific notation)','line_number':334,'multiline':False]
['text':' No inner modifier required','line_number':344,'multiline':False]
['text':' Middle modifier (patterns, positive/negative, currency symbols, percent)','line_number':348,'multiline':False]
['text':' Outer modifier (CLDR units and currency long names)','line_number':378,'multiline':False]
['text':' This isn't strictly necessary, but was what we specced out','line_number':403,'multiline':False]
['text':' when perUnit became a backward-compatibility thing:','line_number':404,'multiline':False]
['text':' unit/perUnit use case is only valid if both units are','line_number':405,'multiline':False]
['text':' built-ins, or the product is a built-in.','line_number':406,'multiline':False]
['text':' No outer modifier required','line_number':428,'multiline':False]
['text':' Compact notation','line_number':435,'multiline':False]
['text':' Always add the pattern modifier as the last element of the chain.','line_number':463,'multiline':False]
['text':' Lazily create PluralRules','line_number':481,'multiline':False]
['text':' Always apply the inner modifier (which is "strong").','line_number':491,'multiline':False]
['text':' Add the integer digits','line_number':522,'multiline':False]
['text':' Add the decimal point','line_number':525,'multiline':False]
['text':' Add the fraction digits','line_number':538,'multiline':False]
['text':' Force output of the digit for value 0','line_number':542,'multiline':False]
['text':' Add grouping separator','line_number':562,'multiline':False]
['text':' Get and append the next digit value','line_number':574,'multiline':False]
['text':' Get and append the next digit value','line_number':594,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':607,'multiline':True]
