['text':' Â© 2020 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' Forward declarations','line_number':22,'multiline':False]
['text':' A list of measures: a single measure for single units, multiple measures','line_number':31,'multiline':False]
['text':' for mixed units.','line_number':32,'multiline':False]
['text':'','line_number':33,'multiline':False]
['text':' TODO(icu-units/icu#21): figure out the right mixed unit API.','line_number':34,'multiline':False]
['text':' The output unit for this RouteResult. This may be a MIXED unit - for','line_number':37,'multiline':False]
['text':' example: "yard-and-foot-and-inch", for which `measures` will have three','line_number':38,'multiline':False]
['text':' elements.','line_number':39,'multiline':False]
['text':'*
 * Contains the complex unit converter and the limit which representing the smallest value that the
 * converter should accept. For example, if the converter is converting to `foot+inch` and the limit
 * equals 3.0, thus means the converter should not convert to a value less than `3.0 feet`.
 *
 * NOTE:
 *    if the limit doest not has a value `i.e. (std::numeric_limits<double>::lowest())`, this mean there
 *    is no limit for the converter.
 ','line_number':46,'multiline':True]
['text':' The output unit for this ConverterPreference. This may be a MIXED unit -','line_number':60,'multiline':False]
['text':' for example: "yard-and-foot-and-inch".','line_number':61,'multiline':False]
['text':' In case there is no limit, the limit will be -inf.','line_number':64,'multiline':False]
['text':' namespace units','line_number':77,'multiline':False]
['text':' Export explicit template instantiations of MaybeStackArray, MemoryPool and','line_number':79,'multiline':False]
['text':' MaybeStackVector. This is required when building DLLs for Windows. (See','line_number':80,'multiline':False]
['text':' datefmt.h, collationiterator.h, erarules.h and others for similar examples.)','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':' Note: These need to be outside of the units namespace, or Clang will generate','line_number':83,'multiline':False]
['text':' a compile error.','line_number':84,'multiline':False]
['text':'*
 * `UnitsRouter` responsible for converting from a single unit (such as `meter` or `meter-per-second`) to
 * one of the complex units based on the limits.
 * For example:
 *    if the input is `meter` and the output as following
 *    {`foot+inch`, limit: 3.0}
 *    {`inch`     , limit: no value (-inf)}
 *    Thus means if the input in `meter` is greater than or equal to `3.0 feet`, the output will be in
 *    `foot+inch`, otherwise, the output will be in `inch`.
 *
 * NOTE:
 *    the output units and the their limits MUST BE in order, for example, if the output units, from the
 *    previous example, are the following:
 *        {`inch`     , limit: no value (-inf)}
 *        {`foot+inch`, limit: 3.0}
 *     IN THIS CASE THE OUTPUT WILL BE ALWAYS IN `inch`.
 *
 * NOTE:
 *    the output units  and their limits will be extracted from the units preferences database by knowing
 *    the followings:
 *        - input unit
 *        - locale
 *        - usage
 *
 * DESIGN:
 *    `UnitRouter` uses internally `ComplexUnitConverter` in order to convert the input units to the
 *    desired complex units and to check the limit too.
 ','line_number':93,'multiline':True]
['text':'*
     * Performs locale and usage sensitive unit conversion.
     * @param quantity The quantity to convert, expressed in terms of inputUnit.
     * @param rounder If not null, this RoundingImpl will be used to do rounding
     *     on the converted value. If the rounder lacks an fPrecision, the
     *     rounder will be modified to use the preferred precision for the usage
     *     and locale preference, alternatively with the default precision.
     * @param status Receives status.
     ','line_number':127,'multiline':True]
['text':'*
     * Returns the list of possible output units, i.e. the full set of
     * preferences, for the localized, usage-specific unit preferences.
     *
     * The returned pointer should be valid for the lifetime of the
     * UnitsRouter instance.
     ','line_number':138,'multiline':True]
['text':' List of possible output units. TODO: converterPreferences_ now also has','line_number':148,'multiline':False]
['text':' this data available. Maybe drop outputUnits_ and have getOutputUnits','line_number':149,'multiline':False]
['text':' construct a the list from data in converterPreferences_ instead?','line_number':150,'multiline':False]
['text':' namespace units','line_number':161,'multiline':False]
['text':'__UNITS_ROUTER_H__','line_number':164,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':166,'multiline':True]
