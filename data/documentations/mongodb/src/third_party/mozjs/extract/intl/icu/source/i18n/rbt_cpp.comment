['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (C) 1999-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   11/17/99    aliu        Creation.
**********************************************************************
','line_number':3,'multiline':True]
['text':' ::ID blocks disallowed in RBT','line_number':51,'multiline':False]
['text':'*
 * Constructs a new transliterator from the given rules.
 * @param id            the id for the transliterator.
 * @param rules         rules, separated by ';'
 * @param direction     either FORWARD or REVERSE.
 * @param adoptedFilter the filter for this transliterator.
 * @param parseError    Struct to recieve information on position 
 *                      of error if an error is encountered
 * @param status        Output param set to success/failure code.
 * @exception IllegalArgumentException if rules are malformed
 * or direction is invalid.
 ','line_number':59,'multiline':True]
['text':'*
 * Constructs a new transliterator from the given rules.
 * @param id            the id for the transliterator.
 * @param rules         rules, separated by ';'
 * @param direction     either FORWARD or REVERSE.
 * @param adoptedFilter the filter for this transliterator.
 * @param status        Output param set to success/failure code.
 * @exception IllegalArgumentException if rules are malformed
 * or direction is invalid.
 ','line_number':82,'multiline':True]
['text':'RuleBasedTransliterator::RuleBasedTransliterator(
                            const UnicodeString& id,
                            const UnicodeString& rules,
                            UTransDirection direction,
                            UnicodeFilter* adoptedFilter,
                            UErrorCode& status) :
    Transliterator(id, adoptedFilter) {
    UParseError parseError;
    _construct(rules, direction,parseError, status);
}','line_number':92,'multiline':True]
['text':'*
 * Convenience constructor with no filter.
 ','line_number':103,'multiline':True]
['text':'RuleBasedTransliterator::RuleBasedTransliterator(
                            const UnicodeString& id,
                            const UnicodeString& rules,
                            UTransDirection direction,
                            UErrorCode& status) :
    Transliterator(id, 0) {
    UParseError parseError;
    _construct(rules, direction,parseError, status);
}','line_number':106,'multiline':True]
['text':'*
 * Convenience constructor with no filter and FORWARD direction.
 ','line_number':116,'multiline':True]
['text':'RuleBasedTransliterator::RuleBasedTransliterator(
                            const UnicodeString& id,
                            const UnicodeString& rules,
                            UErrorCode& status) :
    Transliterator(id, 0) {
    UParseError parseError;
    _construct(rules, UTRANS_FORWARD, parseError, status);
}','line_number':119,'multiline':True]
['text':'*
 * Convenience constructor with FORWARD direction.
 ','line_number':128,'multiline':True]
['text':'RuleBasedTransliterator::RuleBasedTransliterator(
                            const UnicodeString& id,
                            const UnicodeString& rules,
                            UnicodeFilter* adoptedFilter,
                            UErrorCode& status) :
    Transliterator(id, adoptedFilter) {
    UParseError parseError;
    _construct(rules, UTRANS_FORWARD,parseError, status);
}','line_number':131,'multiline':True]
['text':' cast away const','line_number':145,'multiline':False]
['text':'*
 * Internal constructor.
 ','line_number':150,'multiline':True]
['text':'*
 * Copy constructor.
 ','line_number':162,'multiline':True]
['text':' The data object may or may not be owned.  If it is not owned we','line_number':170,'multiline':False]
['text':' share it; it is invariant.  If it is owned, it's still','line_number':171,'multiline':False]
['text':' invariant, but we need to copy it to prevent double-deletion.','line_number':172,'multiline':False]
['text':' If this becomes a performance issue (if people do a lot of RBT','line_number':173,'multiline':False]
['text':' copying -- unlikely) we can reference count the data object.','line_number':174,'multiline':False]
['text':' Only do a deep copy if this is owned data, that is, data that','line_number':176,'multiline':False]
['text':' will be later deleted.  System transliterators contain','line_number':177,'multiline':False]
['text':' non-owned data.','line_number':178,'multiline':False]
['text':'*
 * Destructor.
 ','line_number':184,'multiline':True]
['text':' Delete the data object only if we own it.','line_number':188,'multiline':False]
['text':'*
 * Implements {@link Transliterator#handleTransliterate}.
 ','line_number':199,'multiline':True]
['text':' We keep contextStart and contextLimit fixed the entire time,
     * relative to the text -- contextLimit may move numerically if
     * text is inserted or removed.  The start offset moves toward
     * limit, with replacements happening under it.
     *
     * Example: rules 1. ab>x|y
     *                2. yc>z
     *
     * |eabcd   begin - no match, advance start
     * e|abcd   match rule 1 - change text & adjust start
     * ex|ycd   match rule 2 - change text & adjust start
     * exz|d    no match, advance start
     * exzd|    done
     ','line_number':205,'multiline':True]
['text':' A rule like
     *   a>b|a
     * creates an infinite loop. To prevent that, we put an arbitrary
     * limit on the number of iterations that we take, one that is
     * high enough that any reasonable rules are ok, but low enough to
     * prevent a server from hanging.  The limit is 16 times the
     * number of characters n, unless n is so large that 16n exceeds a
     * uint32_t.
     ','line_number':220,'multiline':True]
['text':' Transliterator locking.  Rule-based Transliterators are not thread safe; concurrent','line_number':237,'multiline':False]
['text':'   operations must be prevented.  ','line_number':238,'multiline':False]
['text':' A Complication: compound transliterators can result in recursive entries to this','line_number':239,'multiline':False]
['text':'   function, sometimes with different "This" objects, always with the same text. ','line_number':240,'multiline':False]
['text':'   Double-locking must be prevented in these cases.','line_number':241,'multiline':False]
['text':'   ','line_number':242,'multiline':False]
['text':' Test whether this request is operating on the same text string as','line_number':246,'multiline':False]
['text':'   some other transliteration that is still in progress and holding the ','line_number':247,'multiline':False]
['text':'   transliteration mutex.  If so, do not lock the transliteration','line_number':248,'multiline':False]
['text':'    mutex again.','line_number':249,'multiline':False]
['text':'','line_number':250,'multiline':False]
['text':'  gLockedText variable is protected by the global ICU mutex.','line_number':251,'multiline':False]
['text':'  Shared RBT data protected by transliteratorDataMutex.','line_number':252,'multiline':False]
['text':'','line_number':253,'multiline':False]
['text':' TODO(andy): Need a better scheme for handling this.','line_number':254,'multiline':False]
['text':' Contention, longish waits possible here.','line_number':263,'multiline':False]
['text':' Check to make sure we don't dereference a null pointer.','line_number':269,'multiline':False]
['text':'*
 * Implement Transliterator framework
 ','line_number':291,'multiline':True]
['text':'*
 * Override Transliterator framework
 ','line_number':298,'multiline':True]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':307,'multiline':True]
