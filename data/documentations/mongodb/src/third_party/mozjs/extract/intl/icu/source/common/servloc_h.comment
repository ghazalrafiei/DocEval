['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'*
 *******************************************************************************
 * Copyright (C) 2001-2011, International Business Machines Corporation and    *
 * others. All Rights Reserved.                                                *
 *******************************************************************************
 *
 *******************************************************************************
 ','line_number':3,'multiline':True]
['text':'
 * Allow the declaration of APIs with pointers to ICUService
 * even when service is removed from the build.
 ','line_number':20,'multiline':True]
['text':'
 ******************************************************************
 ','line_number':49,'multiline':True]
['text':'*
 * A subclass of Key that implements a locale fallback mechanism.
 * The first locale to search for is the locale provided by the
 * client, and the fallback locale to search for is the current
 * default locale.  If a prefix is present, the currentDescriptor
 * includes it before the locale proper, separated by "/".  This
 * is the default key instantiated by ICULocaleService.</p>
 *
 * <p>Canonicalization adjusts the locale string so that the
 * section before the first understore is in lower case, and the rest
 * is in upper case, with no trailing underscores.</p> 
 ','line_number':53,'multiline':True]
['text':'*
     * Create a LocaleKey with canonical primary and fallback IDs.
     ','line_number':78,'multiline':True]
['text':'*
     * Create a LocaleKey with canonical primary and fallback IDs.
     ','line_number':85,'multiline':True]
['text':'*
     * PrimaryID is the user's requested locale string,
     * canonicalPrimaryID is this string in canonical form,
     * fallbackID is the current default locale's string in
     * canonical form.
     ','line_number':94,'multiline':True]
['text':'*
     * Append the prefix associated with the kind, or nothing if the kind is KIND_ANY.
     ','line_number':106,'multiline':True]
['text':'*
     * Return the kind code associated with this key.
     ','line_number':111,'multiline':True]
['text':'*
     * Return the canonicalID.
     ','line_number':116,'multiline':True]
['text':'*
     * Return the currentID.
     ','line_number':121,'multiline':True]
['text':'*
     * Return the (canonical) current descriptor, or null if no current id.
     ','line_number':126,'multiline':True]
['text':'*
     * Convenience method to return the locale corresponding to the (canonical) original ID.
     ','line_number':131,'multiline':True]
['text':'*
     * Convenience method to return the locale corresponding to the (canonical) current ID.
     ','line_number':136,'multiline':True]
['text':'*
     * If the key has a fallback, modify the key and return true,
     * otherwise return false.</p>
     *
     * <p>First falls back through the primary ID, then through
     * the fallbackID.  The final fallback is the empty string,
     * unless the primary id was the empty string, in which case
     * there is no fallback.  
     ','line_number':141,'multiline':True]
['text':'*
     * Return true if a key created from id matches, or would eventually
     * fallback to match, the canonical ID of this key.  
     ','line_number':152,'multiline':True]
['text':'*
     * UObject boilerplate.
     ','line_number':159,'multiline':True]
['text':'*
     * Destructor.
     ','line_number':166,'multiline':True]
['text':'
 ******************************************************************
 ','line_number':179,'multiline':True]
['text':'*
 * A subclass of ICUServiceFactory that uses LocaleKeys, and is able to
 * 'cover' more specific locales with more general locales that it
 * supports.  
 *
 * <p>Coverage may be either of the values VISIBLE or INVISIBLE.
 *
 * <p>'Visible' indicates that the specific locale(s) supported by
 * the factory are registered in getSupportedIDs, 'Invisible'
 * indicates that they are not.
 *
 * <p>Localization of visible ids is handled
 * by the handling factory, regardless of kind.
 ','line_number':183,'multiline':True]
['text':'*
         * Coverage value indicating that the factory makes
         * its locales visible, and does not cover more specific 
         * locales.
         ','line_number':204,'multiline':True]
['text':'*
         * Coverage value indicating that the factory does not make
         * its locales visible, and does not cover more specific
         * locales.
         ','line_number':211,'multiline':True]
['text':'*
     * Destructor.
     ','line_number':219,'multiline':True]
['text':'*
     * Constructor used by subclasses.
     ','line_number':225,'multiline':True]
['text':'*
     * Constructor used by subclasses.
     ','line_number':230,'multiline':True]
['text':'*
     * Implement superclass abstract method.  This checks the currentID of
     * the key against the supported IDs, and passes the canonicalLocale and
     * kind off to handleCreate (which subclasses must implement).
     ','line_number':235,'multiline':True]
['text':'*
     * Override of superclass method.  This adjusts the result based
     * on the coverage rule for this factory.
     ','line_number':247,'multiline':True]
['text':'*
     * Return a localized name for the locale represented by id.
     ','line_number':253,'multiline':True]
['text':'*
     * Utility method used by create(ICUServiceKey, ICUService).  Subclasses can implement
     * this instead of create.  The default returns NULL.
     ','line_number':259,'multiline':True]
['text':'*
     * Return true if this id is one the factory supports (visible or 
     * otherwise).
     ','line_number':265,'multiline':True]
['text':'   virtual UBool isSupportedID(const UnicodeString& id, UErrorCode& status) const;','line_number':269,'multiline':False]
['text':'*
     * Return the set of ids that this factory supports (visible or 
     * otherwise).  This can be called often and might need to be
     * cached if it is expensive to create.
     ','line_number':271,'multiline':True]
['text':'*
     * UObject boilerplate.
     ','line_number':279,'multiline':True]
['text':'
 ******************************************************************
 ','line_number':294,'multiline':True]
['text':'*
 * A LocaleKeyFactory that just returns a single object for a kind/locale.
 ','line_number':298,'multiline':True]
['text':'*
     * Destructor.
     ','line_number':319,'multiline':True]
['text':'*
     * Override of superclass method.  Returns the service object if kind/locale match.  Service is not used.
     ','line_number':324,'multiline':True]
['text':'*
     * Override of superclass method.  This adjusts the result based
     * on the coverage rule for this factory.
     ','line_number':329,'multiline':True]
['text':'*
     * Return true if this id is equal to the locale name.
     ','line_number':336,'multiline':True]
['text':'virtual UBool isSupportedID(const UnicodeString& id, UErrorCode& status) const;','line_number':339,'multiline':False]
['text':'*
     * UObject boilerplate.
     ','line_number':343,'multiline':True]
['text':'
 ******************************************************************
 ','line_number':358,'multiline':True]
['text':'*
 * A LocaleKeyFactory that creates a service based on the ICU locale data.
 * This is a base class for most ICU factories.  Subclasses instantiate it
 * with a constructor that takes a bundle name, which determines the supported
 * IDs.  Subclasses then override handleCreate to create the actual service
 * object.  The default implementation returns a resource bundle.
 ','line_number':362,'multiline':True]
['text':'*
     * Convenience constructor that uses the main ICU bundle name.
     ','line_number':375,'multiline':True]
['text':'*
     * A service factory based on ICU resource data in resources with
     * the given name.  This should be a 'path' that can be passed to
     * ures_openAvailableLocales, such as U_ICUDATA or U_ICUDATA_COLL.
     * The empty string is equivalent to U_ICUDATA.
     ','line_number':380,'multiline':True]
['text':'*
     * Destructor
     ','line_number':388,'multiline':True]
['text':'*
     * Return the supported IDs.  This is the set of all locale names in ICULocaleData.
     ','line_number':394,'multiline':True]
['text':'*
     * Create the service.  The default implementation returns the resource bundle
     * for the locale, ignoring kind, and service.
     ','line_number':399,'multiline':True]
['text':'*
     * UObject boilerplate.
     ','line_number':406,'multiline':True]
['text':'
 ******************************************************************
 ','line_number':421,'multiline':True]
['text':'*
   * Construct an ICULocaleService.
   ','line_number':432,'multiline':True]
['text':'*
   * Construct an ICULocaleService with a name (useful for debugging).
   ','line_number':437,'multiline':True]
['text':'*
   * Destructor.
   ','line_number':442,'multiline':True]
['text':' redeclare because of overload resolution rules?','line_number':448,'multiline':False]
['text':' no, causes ambiguities since both UnicodeString and Locale have constructors that take a const char*','line_number':449,'multiline':False]
['text':' need some compiler flag to remove warnings ','line_number':450,'multiline':False]
['text':'*
   * Convenience override for callers using locales.  This calls
   * get(Locale, int, Locale[]) with KIND_ANY for kind and null for
   * actualReturn.
   ','line_number':460,'multiline':True]
['text':'*
   * Convenience override for callers using locales.  This calls
   * get(Locale, int, Locale[]) with a null actualReturn.
   ','line_number':467,'multiline':True]
['text':'*
   * Convenience override for callers using locales. This calls
   * get(Locale, String, Locale[]) with a null kind.
   ','line_number':473,'multiline':True]
['text':'*
   * Convenience override for callers using locales.  This uses
   * createKey(Locale.toString(), kind) to create a key, calls getKey, and then
   * if actualReturn is not null, returns the actualResult from
   * getKey (stripping any prefix) into a Locale.  
   ','line_number':479,'multiline':True]
['text':'*
   * Convenience override for callers using locales.  This calls
   * registerObject(Object, Locale, int32_t kind, int coverage)
   * passing KIND_ANY for the kind, and VISIBLE for the coverage.
   ','line_number':487,'multiline':True]
['text':'*
   * Convenience function for callers using locales.  This calls
   * registerObject(Object, Locale, int kind, int coverage)
   * passing VISIBLE for the coverage.
   ','line_number':494,'multiline':True]
['text':'*
   * Convenience function for callers using locales.  This  instantiates
   * a SimpleLocaleKeyFactory, and registers the factory.
   ','line_number':501,'multiline':True]
['text':'*
   * (Stop compiler from complaining about hidden overrides.)
   * Since both UnicodeString and Locale have constructors that take const char*, adding a public
   * method that takes UnicodeString causes ambiguity at call sites that use const char*.
   * We really need a flag that is understood by all compilers that will suppress the warning about
   * hidden overrides.
   ','line_number':508,'multiline':True]
['text':'*
   * Convenience method for callers using locales.  This returns the standard
   * service ID enumeration.
   ','line_number':517,'multiline':True]
['text':'*
   * Return the name of the current fallback locale.  If it has changed since this was
   * last accessed, the service cache is cleared.
   ','line_number':525,'multiline':True]
['text':'*
   * Override superclass createKey method.
   ','line_number':531,'multiline':True]
['text':'*
   * Additional createKey that takes a kind.
   ','line_number':536,'multiline':True]
['text':' UCONFIG_NO_SERVICE ','line_number':546,'multiline':True]
['text':' ICULSERV_H ','line_number':549,'multiline':True]
