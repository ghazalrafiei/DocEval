['text':' -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':' Previously, the implementation auto-switched only','line_number':34,'multiline':False]
['text':' between the two UTF-16 variants and only when','line_number':35,'multiline':False]
['text':' initialized with an endianness-unspecific label.','line_number':36,'multiline':False]
['text':' NetUtil.jsm assumes that if buffer size equals','line_number':44,'multiline':False]
['text':' the input size, the whole stream will be processed','line_number':45,'multiline':False]
['text':' as one readString. This is not true with encoding_rs,','line_number':46,'multiline':False]
['text':' because encoding_rs might want to see space for a','line_number':47,'multiline':False]
['text':' surrogate pair, so let's compute a larger output','line_number':48,'multiline':False]
['text':' buffer length.','line_number':49,'multiline':False]
['text':' set up our buffers.','line_number':57,'multiline':False]
['text':' Fill the unichar buffer','line_number':85,'multiline':False]
['text':' Fill the unichar buffer','line_number':110,'multiline':False]
['text':' don't propagate errors to the caller','line_number':130,'multiline':False]
['text':' Fill the unichar buffer','line_number':150,'multiline':False]
['text':' We already closed the stream!','line_number':169,'multiline':False]
['text':' We failed to completely convert last time, and error-recovery','line_number':175,'multiline':False]
['text':' is disabled.  We will fare no better this time, so...','line_number':176,'multiline':False]
['text':' We assume a many to one conversion and are using equal sizes for','line_number':181,'multiline':False]
['text':' the two buffers.  However if an error happens at the very start','line_number':182,'multiline':False]
['text':' of a byte buffer we may end up in a situation where n bytes lead','line_number':183,'multiline':False]
['text':' to n+1 unicode chars.  Thus we need to keep track of the leftover','line_number':184,'multiline':False]
['text':' bytes as we convert.','line_number':185,'multiline':False]
['text':' No more data','line_number':190,'multiline':False]
['text':' Now convert as much of the byte buffer to unicode as possible','line_number':198,'multiline':False]
['text':' mUnicharData.Length() is the buffer length, not the fill status.','line_number':201,'multiline':False]
['text':' mUnicharDataLength reflects the current fill status.','line_number':202,'multiline':False]
['text':' Whenever we convert, mUnicharData is logically empty.','line_number':204,'multiline':False]
['text':' Truncation from size_t to uint32_t below is OK, because the sizes','line_number':206,'multiline':False]
['text':' are bounded by the lengths of mByteData and mUnicharData.','line_number':207,'multiline':False]
['text':' The design of this class is fundamentally bogus in that trailing','line_number':212,'multiline':False]
['text':' errors are ignored. Always passing false as the last argument to','line_number':213,'multiline':False]
['text':' Decode* calls below.','line_number':214,'multiline':False]
