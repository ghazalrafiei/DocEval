['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2003-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  icuswap.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2003aug08
*   created by: Markus W. Scherer
*
*   This tool takes an ICU data file and "swaps" it, that is, changes its
*   platform properties between big-/little-endianness and ASCII/EBCDIC charset
*   families.
*   The modified data file is written to a new file.
*   Useful as an install-time tool for shipping only one flavor of ICU data
*   and preparing data files for the target platform.
*   Will not work with data DLLs (shared libraries).
','line_number':3,'multiline':True]
['text':' definitions ','line_number':44,'multiline':True]
['text':'*
 * Swap an ICU .dat package, including swapping of enclosed items.
 ','line_number':70,'multiline':True]
['text':' get the program basename ','line_number':123,'multiline':True]
['text':' parse the output type option ','line_number':140,'multiline':True]
['text':' the type must be exactly one letter ','line_number':143,'multiline':True]
['text':' open the input file, get its length, allocate memory for it, read the file ','line_number':166,'multiline':True]
['text':'
     * +15: udata_swapPackage() may need to add a few padding bytes to the
     * last item if charset swapping is done,
     * because the last item may be resorted into the middle and then needs
     * additional padding bytes
     ','line_number':181,'multiline':True]
['text':' set the last 15 bytes to the usual padding byte, see udata_swapPackage() ','line_number':194,'multiline':True]
['text':' swap the data in-place ','line_number':206,'multiline':True]
['text':' speculative cast, protected by the following length check ','line_number':219,'multiline':True]
['text':' dataFormat="CmnD" ','line_number':223,'multiline':True]
['text':'
         * swap the .dat package
         * udata_swapPackage() needs to rename ToC name entries from the old package
         * name to the new one.
         * We pass it the filenames, and udata_swapPackage() will extract the
         * package names.
         ','line_number':228,'multiline':True]
['text':' swap the data, which is not a .dat package ','line_number':244,'multiline':True]
['text':' all done ','line_number':271,'multiline':True]
['text':' swap .dat package files -------------------------------------------------- ','line_number':287,'multiline':True]
['text':' -4: subtract the length of ".dat" ','line_number':301,'multiline':True]
['text':' udata_swapDataHeader checks the arguments ','line_number':357,'multiline':True]
['text':' check data format and format version ','line_number':363,'multiline':True]
['text':' dataFormat="CmnD" ','line_number':366,'multiline':True]
['text':'
     * We need to change the ToC name entries so that they have the correct
     * package name prefix.
     * Extract the package names from the in/out filenames.
     ','line_number':380,'multiline':True]
['text':'
     * It is possible to work with inPkgNameLength!=outPkgNameLength,
     * but then the length of the data file would change more significantly,
     * which we are not currently prepared for.
     ','line_number':397,'multiline':True]
['text':' preflighting ','line_number':413,'multiline':True]
['text':' no items: count only the item count and return ','line_number':416,'multiline':True]
['text':' read the last item's offset and preflight it ','line_number':420,'multiline':True]
['text':' check that the itemCount fits, then the ToC table, then at least the header of the last item ','line_number':430,'multiline':True]
['text':' itemCount does not fit ','line_number':433,'multiline':True]
['text':' make compilers happy ','line_number':435,'multiline':True]
['text':' ToC table does not fit ','line_number':441,'multiline':True]
['text':' offset of the last item plus at least 20 bytes for its header ','line_number':444,'multiline':True]
['text':' swap the item count ','line_number':457,'multiline':True]
['text':' no items: just return now ','line_number':461,'multiline':True]
['text':' swap the item name strings ','line_number':465,'multiline':True]
['text':' keep offset and itemLength in case we allocate and copy the strings below ','line_number':473,'multiline':True]
['text':' swap the package names into the output charset ','line_number':475,'multiline':True]
['text':' change the prefix of each ToC entry name from the old to the new package name ','line_number':487,'multiline':True]
['text':'
         * Allocate the ToC table and, if necessary, a temporary buffer for
         * pseudo-in-place swapping.
         *
         * We cannot swap in-place because:
         *
         * 1. If the swapping of an item fails mid-way, then in-place swapping
         * has destroyed its data.
         * Out-of-place swapping allows us to then copy its original data.
         *
         * 2. If swapping changes the charset family, then we must resort
         * not only the ToC table but also the data items themselves.
         * This requires a permutation and is best done with separate in/out
         * buffers.
         *
         * We swapped the strings above to avoid the malloc below if string swapping fails.
         ','line_number':505,'multiline':True]
['text':' +15: prepare for extra padding of a newly-last item ','line_number':523,'multiline':True]
['text':' copy the item count and the swapped strings ','line_number':528,'multiline':True]
['text':' read the ToC table ','line_number':545,'multiline':True]
['text':' no charset swapping, no resorting: keep item offsets the same ','line_number':556,'multiline':True]
['text':' charset swapping: resort items by their swapped names ','line_number':561,'multiline':True]
['text':'
             * Before the actual sorting, we need to make sure that each item
             * has a length that is a multiple of 16 bytes so that all items
             * are 16-aligned.
             * Only the old last item may be missing up to 15 padding bytes.
             * Add padding bytes for it.
             * Since the icuswap main() function has already allocated enough
             * input buffer space and set the last 15 bytes there to 0xaa,
             * we only need to increase the total data length and the length
             * of the last item here.
             ','line_number':563,'multiline':True]
['text':' Save the offset before we sort the TOC. ','line_number':580,'multiline':True]
['text':' sort the TOC entries ','line_number':582,'multiline':True]
['text':'
             * Note: Before sorting, the inOffset values were in order.
             * Now the outOffset values are in order.
             ','line_number':586,'multiline':True]
['text':' assign outOffset values ','line_number':591,'multiline':True]
['text':' write the output ToC table ','line_number':598,'multiline':True]
['text':' swap each data item ','line_number':604,'multiline':True]
['text':' first copy the item bytes to make sure that unreachable bytes are copied ','line_number':606,'multiline':True]
['text':' swap the item ','line_number':609,'multiline':True]
['text':' reset the error code, copy the data item, and continue ','line_number':626,'multiline':True]
['text':' copy the data from the temporary buffer to the in-place buffer ','line_number':633,'multiline':True]
['text':'
 * Hey, Emacs, please set the following:
 *
 * Local Variables:
 * indent-tabs-mode: nil
 * End:
 *
 ','line_number':642,'multiline':True]
