['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (C) 2001-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   06/07/01    aliu        Creation.
**********************************************************************
','line_number':3,'multiline':True]
['text':' "\N~{~"','line_number':32,'multiline':False]
['text':' '\\' first char of OPEN','line_number':33,'multiline':False]
['text':' '}'','line_number':34,'multiline':False]
['text':' ' '','line_number':35,'multiline':False]
['text':' USetAdder implementation','line_number':39,'multiline':False]
['text':' Does not use uset.h to reduce code dependencies','line_number':40,'multiline':False]
['text':' These functions aren't used.','line_number':46,'multiline':False]
['text':'static void U_CALLCONV
_set_addRange(USet *set, UChar32 start, UChar32 end) {
    ((UnicodeSet *)set)->add(start, end);
}

static void U_CALLCONV
_set_addString(USet *set, const UChar *str, int32_t length) {
    ((UnicodeSet *)set)->add(UnicodeString((UBool)(length<0), str, length));
}','line_number':47,'multiline':True]
['text':'*
 * Constructs a transliterator with the default delimiters '{' and
 * '}'.
 ','line_number':59,'multiline':True]
['text':' Get the legal character set','line_number':67,'multiline':False]
['text':' USet* == UnicodeSet*','line_number':69,'multiline':False]
['text':' Don't need _set_addRange','line_number':71,'multiline':False]
['text':' Don't need _set_addString','line_number':72,'multiline':False]
['text':' Don't need remove()','line_number':73,'multiline':False]
['text':'*
 * Destructor.
 ','line_number':79,'multiline':True]
['text':'*
 * Copy constructor.
 ','line_number':84,'multiline':True]
['text':'*
 * Assignment operator.
 ','line_number':90,'multiline':True]
['text':'NameUnicodeTransliterator& NameUnicodeTransliterator::operator=(
                             const NameUnicodeTransliterator& o) {
    Transliterator::operator=(o);
    // not necessary: the legal sets should all be the same -- legal=o.legal;
    return *this;
}','line_number':93,'multiline':True]
['text':'*
 * Transliterator API.
 ','line_number':100,'multiline':True]
['text':'*
 * Implements {@link Transliterator#handleTransliterate}.
 ','line_number':107,'multiline':True]
['text':' The failure mode, here and below, is to behave like Any-Null,','line_number':112,'multiline':False]
['text':' if either there is no name data (max len == 0) or there is no','line_number':113,'multiline':False]
['text':' memory (malloc() => NULL).','line_number':114,'multiline':False]
['text':' Accommodate the longest possible name','line_number':122,'multiline':False]
['text':' allow for temporary trailing space','line_number':123,'multiline':False]
['text':' Modes:','line_number':136,'multiline':False]
['text':' 0 - looking for open delimiter','line_number':137,'multiline':False]
['text':' 1 - after open delimiter','line_number':138,'multiline':False]
['text':' open delim candidate pos','line_number':140,'multiline':False]
['text':' looking for open delimiter','line_number':147,'multiline':False]
['text':' quick check first','line_number':148,'multiline':False]
['text':' *** reprocess char32At(cursor)','line_number':156,'multiline':False]
['text':' after open delimiter','line_number':161,'multiline':False]
['text':' Look for legal chars.  If \s+ is found, convert it','line_number':162,'multiline':False]
['text':' to a single space.  If closeDelimiter is found, exit','line_number':163,'multiline':False]
['text':' the loop.  If any other character is found, exit the','line_number':164,'multiline':False]
['text':' loop.  If the limit is reached, exit the loop.','line_number':165,'multiline':False]
['text':' Convert \s+ => SPACE.  This assumes there are no','line_number':167,'multiline':False]
['text':' runs of >1 space characters in names.','line_number':168,'multiline':False]
['text':' Ignore leading whitespace','line_number':170,'multiline':False]
['text':' If we are too long then abort.  maxLen includes','line_number':174,'multiline':False]
['text':' temporary trailing space, so use '>'.','line_number':175,'multiline':False]
['text':' Delete trailing space, if any','line_number':186,'multiline':False]
['text':' Lookup succeeded','line_number':199,'multiline':False]
['text':' assert(U16_LENGTH(CLOSE_DELIM) == 1);','line_number':201,'multiline':False]
['text':' advance over CLOSE_DELIM','line_number':202,'multiline':False]
['text':' Adjust indices for the change in the length of','line_number':208,'multiline':False]
['text':' the string.  Do not assume that str.length() ==','line_number':209,'multiline':False]
['text':' 1, in case of surrogates.','line_number':210,'multiline':False]
['text':' assert(cursor == openPos + str.length());','line_number':214,'multiline':False]
['text':' If the lookup failed, we leave things as-is and','line_number':217,'multiline':False]
['text':' still switch to mode 0 and continue.','line_number':218,'multiline':False]
['text':' close off candidate','line_number':220,'multiline':False]
['text':' *** reprocess char32At(cursor)','line_number':221,'multiline':False]
['text':' Check if c is a legal char.  We assume here that','line_number':224,'multiline':False]
['text':' legal.contains(OPEN_DELIM) is FALSE, so when we abort a','line_number':225,'multiline':False]
['text':' name, we don't have to go back to openPos+1.','line_number':226,'multiline':False]
['text':' If we go past the longest possible name then abort.','line_number':229,'multiline':False]
['text':' maxLen includes temporary trailing space, so use '>='.','line_number':230,'multiline':False]
['text':' Invalid character','line_number':236,'multiline':False]
['text':' Backup and reprocess this character','line_number':238,'multiline':False]
['text':' In incremental mode, only advance the cursor up to the last','line_number':250,'multiline':False]
['text':' open delimiter candidate.','line_number':251,'multiline':False]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':259,'multiline':True]
