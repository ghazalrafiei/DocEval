['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
********************************************************************************
*   Copyright (C) 2005-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
********************************************************************************
*
* File WINNMFMT.CPP
*
********************************************************************************
','line_number':3,'multiline':True]
['text':'
 * Turns a string of the form "3;2;0" into the grouping UINT
 * needed for NUMBERFMT and CURRENCYFMT. If the string does not
 * end in ";0" then the return value should be multiplied by 10.
 * (e.g. "3" => 30, "3;2" => 320)
 ','line_number':57,'multiline':True]
['text':' TODO: This is copied in both winnmfmt.cpp and windtfmt.cpp, but really should','line_number':142,'multiline':False]
['text':' be factored out into a common helper for both.','line_number':143,'multiline':False]
['text':' Convert from names like "en_CA" and "de_DE@collation=phonebook" to "en-CA" and "de-DE-u-co-phonebk".','line_number':149,'multiline':False]
['text':' Need it to be UTF-16, not 8-bit','line_number':154,'multiline':False]
['text':' TODO: This seems like a good thing for a helper','line_number':155,'multiline':False]
['text':' normally just copy the character','line_number':166,'multiline':False]
['text':' Ensure it's null terminated','line_number':171,'multiline':False]
['text':' Ran out of room.','line_number':178,'multiline':False]
['text':' Note: On Windows versions below 10, there is no support for locale name aliases.','line_number':185,'multiline':False]
['text':' This means that it will fail for locales where ICU has a completely different','line_number':186,'multiline':False]
['text':' name (like ku vs ckb), and it will also not work for alternate sort locale','line_number':187,'multiline':False]
['text':' names like "de-DE-u-co-phonebk".','line_number':188,'multiline':False]
['text':' TODO: We could add some sort of exception table for cases like ku vs ckb.','line_number':190,'multiline':False]
['text':' Note: In the previous code, it would look up the LCID for the locale, and if','line_number':213,'multiline':False]
['text':' the locale was not recognized then it would get an LCID of 0, which is a','line_number':214,'multiline':False]
['text':' synonym for LOCALE_USER_DEFAULT on Windows.','line_number':215,'multiline':False]
['text':' If the above method fails, then fWindowsLocaleName will remain as nullptr, and ','line_number':216,'multiline':False]
['text':' then we will pass nullptr to API GetLocaleInfoEx, which is the same as passing','line_number':217,'multiline':False]
['text':' LOCALE_USER_DEFAULT.','line_number':218,'multiline':False]
['text':' Resolve actual locale to be used later','line_number':220,'multiline':False]
['text':' self-assignment: no-op','line_number':271,'multiline':False]
['text':' pos ','line_number':303,'multiline':True]
['text':' pos ','line_number':308,'multiline':True]
['text':' pos ','line_number':313,'multiline':True]
['text':' Due to the arguments causing a result to be <= 23 characters (+2 for NULL and minus),
    we don't need to reallocate the buffer. ','line_number':347,'multiline':True]
['text':' Just to make sure of the above statement, we add this assert ','line_number':353,'multiline':True]
['text':' The following code is not used because _vscwprintf isn't available on MinGW at the moment.','line_number':355,'multiline':False]
['text':'if (result < 0) {
        int newLength;

        va_start(args, fmt);
        newLength = _vscwprintf(fmt, args);
        va_end(args);

        nBuffer = NEW_ARRAY(UChar, newLength + 1);

        va_start(args, fmt);
        result = _vsnwprintf(nBuffer, newLength + 1, fmt, args);
        va_end(args);
    }','line_number':356,'multiline':True]
['text':' vswprintf is sensitive to the locale set by setlocale. For some locales','line_number':370,'multiline':False]
['text':' it doesn't use "." as the decimal separator, which is what GetNumberFormatW','line_number':371,'multiline':False]
['text':' and GetCurrencyFormatW both expect to see.','line_number':372,'multiline':False]
['text':'','line_number':373,'multiline':False]
['text':' To fix this, we scan over the string and replace the first non-digits, except','line_number':374,'multiline':False]
['text':' for a leading "-", with a "."','line_number':375,'multiline':False]
['text':'','line_number':376,'multiline':False]
['text':' Note: (nBuffer[0] == L'-') will evaluate to 1 if there is a leading '-' in the','line_number':377,'multiline':False]
['text':' number, and 0 otherwise.','line_number':378,'multiline':False]
['text':'if (nBuffer != nStackBuffer) {
        DELETE_ARRAY(nBuffer);
    }','line_number':450,'multiline':True]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':459,'multiline':True]
['text':' U_PLATFORM_USES_ONLY_WIN32_API','line_number':461,'multiline':False]
