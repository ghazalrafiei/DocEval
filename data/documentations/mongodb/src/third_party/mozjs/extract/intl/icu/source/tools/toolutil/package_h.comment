['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2005-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  package.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2005aug25
*   created by: Markus W. Scherer
*
*   Read, modify, and write ICU .dat data package files.
','line_number':3,'multiline':True]
['text':' .dat package file representation ---------------------------------------- ***','line_number':28,'multiline':False]
['text':'
     * Constructor.
     * Prepare this object for a new, empty package.
     ','line_number':47,'multiline':True]
['text':' Destructor. ','line_number':53,'multiline':True]
['text':'*
     * Uses the prefix of the first entry of the package in readPackage(),
     * rather than the package basename.
     ','line_number':56,'multiline':True]
['text':'*
     * Same as setAutoPrefix(), plus the prefix must end with the platform type letter.
     ','line_number':61,'multiline':True]
['text':'
     * Read an existing .dat package file.
     * The header and item name strings are swapped into this object,
     * but the items are left unswapped.
     ','line_number':70,'multiline':True]
['text':'
     * Write a .dat package file with the items in this object.
     * Swap all pieces to the desired output platform properties.
     * The package becomes unusable:
     * The item names are swapped and sorted in the outCharset rather than the local one.
     * Also, the items themselves are swapped in-place
     ','line_number':76,'multiline':True]
['text':'
     * Return the input data type letter (l, b, or e).
     ','line_number':85,'multiline':True]
['text':' find the item in items[], return the non-negative index if found, else the binary-not of the insertion point','line_number':90,'multiline':False]
['text':'
     * Set internal state for following calls to findNextItem() which will return
     * indexes for items whose names match the pattern.
     ','line_number':93,'multiline':True]
['text':'
     * Set the match mode for findItems() & findNextItem().
     * @param mode 0=default
     *             MATCH_NOSLASH * does not match a '/'
     ','line_number':99,'multiline':True]
['text':' The extractItem() functions accept outputType=0 to mean "don't swap the item". ','line_number':119,'multiline':True]
['text':' This variant extracts an item to a specific filename. ','line_number':124,'multiline':True]
['text':'
     * Check dependencies and return true if all dependencies are fulfilled.
     ','line_number':130,'multiline':True]
['text':'
     * Enumerate all the dependencies and give the results to context and call CheckDependency callback
     * @param context user context (will be passed to check function)
     * @param check will be called with context and any missing items
     ','line_number':135,'multiline':True]
['text':'*
     * Default CheckDependency function used by checkDependencies()
     ','line_number':145,'multiline':True]
['text':'
     * Allocate a string in inStrings or outStrings.
     * The length does not include the terminating NUL.
     ','line_number':150,'multiline':True]
['text':' data fields','line_number':158,'multiline':False]
['text':' match mode for findItems(pattern) and findNextItem()','line_number':177,'multiline':False]
['text':' state for findItems(pattern) and findNextItem()','line_number':180,'multiline':False]
['text':' state for checkDependencies()','line_number':185,'multiline':False]
['text':'*
     * Grow itemMax to new value
     ','line_number':188,'multiline':True]
['text':'*
     * Grow itemMax to at least itemCount+1
     ','line_number':193,'multiline':True]
