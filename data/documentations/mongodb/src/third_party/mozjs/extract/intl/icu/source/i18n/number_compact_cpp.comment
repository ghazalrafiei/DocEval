['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' A dummy object used when a "0" compact decimal entry is encountered. This is necessary','line_number':23,'multiline':False]
['text':' in order to prevent falling back to root. Object equality ("==") is intended.','line_number':24,'multiline':False]
['text':'* Produces a string like "NumberElements/latn/patternsShort/decimalFormat". ','line_number':27,'multiline':True]
['text':' NOTE: This strategy for computing the number of zeros is a hack for efficiency.','line_number':42,'multiline':False]
['text':' It could break if there are any 0s that aren't part of the main pattern.','line_number':43,'multiline':False]
['text':' zeros should always be contiguous','line_number':49,'multiline':False]
['text':' namespace','line_number':55,'multiline':False]
['text':' NOTE: patterns and multipliers both get zero-initialized.','line_number':57,'multiline':False]
['text':' Fall back to latn numbering system and/or short compact style.','line_number':70,'multiline':False]
['text':' The last fallback should be guaranteed to return data.','line_number':91,'multiline':False]
['text':' Fall back to "other" plural variant','line_number':132,'multiline':False]
['text':' == is intended','line_number':135,'multiline':False]
['text':' Return null if USE_FALLBACK is present','line_number':136,'multiline':False]
['text':' NOTE: In C++, this is done more manually with a UVector.','line_number':144,'multiline':False]
['text':' In Java, we can take advantage of JDK HashSet.','line_number':145,'multiline':False]
['text':' Insert pattern into the UVector if the UVector does not already contain the pattern.','line_number':151,'multiline':False]
['text':' Search the UVector from the end since identical patterns are likely to be adjacent.','line_number':152,'multiline':False]
['text':' The string was not found; add it to the UVector.','line_number':159,'multiline':False]
['text':' ANDY: This requires a const_cast.  Why?','line_number':160,'multiline':False]
['text':'noFallback','line_number':168,'multiline':True]
['text':' traverse into the table of powers of ten','line_number':170,'multiline':False]
['text':' Assumes that the keys are always of the form "10000" where the magnitude is the','line_number':175,'multiline':False]
['text':' length of the key minus one.  We expect magnitudes to be less than MAX_DIGITS.','line_number':176,'multiline':False]
['text':' Iterate over the plural variants ("one", "other", etc)','line_number':181,'multiline':False]
['text':' Skip this magnitude/plural if we already have it from a child locale.','line_number':185,'multiline':False]
['text':' Note: This also skips USE_FALLBACK entries.','line_number':186,'multiline':False]
['text':' The value "0" means that we need to use the default pattern and not fall back','line_number':193,'multiline':False]
['text':' to parent locales. Example locale where this is relevant: 'it'.','line_number':194,'multiline':False]
['text':' Save the pattern string. We will parse it lazily.','line_number':203,'multiline':False]
['text':' If necessary, compute the multiplier: the difference between the magnitude','line_number':206,'multiline':False]
['text':' and the number of zeros in the pattern.','line_number':207,'multiline':False]
['text':' numZeros==0 in certain cases, like Somali "Kun"','line_number':210,'multiline':False]
['text':' Save the multiplier.','line_number':216,'multiline':False]
['text':'/////////////////////////////////////////////////////////','line_number':229,'multiline':False]
['text':'/ END OF CompactData.java; BEGIN CompactNotation.java ///','line_number':230,'multiline':False]
['text':'/////////////////////////////////////////////////////////','line_number':231,'multiline':False]
['text':' Safe code path','line_number':246,'multiline':False]
['text':' Unsafe code path','line_number':249,'multiline':False]
['text':' Store the MutablePatternModifier reference.','line_number':250,'multiline':False]
['text':' Initial capacity of 12 for 0K, 00K, 000K, ...M, ...B, and ...T','line_number':264,'multiline':False]
['text':' C++ only: ensure that precomputedMods has room.','line_number':270,'multiline':False]
['text':' Treat zero, NaN, and infinity as if they had magnitude 0','line_number':296,'multiline':False]
['text':' TODO: Revisit chooseMultiplierAndApply','line_number':303,'multiline':False]
['text':' Use the default (non-compact) modifier.','line_number':311,'multiline':False]
['text':' No need to take any action.','line_number':312,'multiline':False]
['text':' Safe code path.','line_number':314,'multiline':False]
['text':' Java uses a hash set here for O(1) lookup.  C++ uses a linear search.','line_number':315,'multiline':False]
['text':' TODO: Benchmark this and maybe change to a binary search or hash table.','line_number':316,'multiline':False]
['text':' It should be guaranteed that we found the entry.','line_number':325,'multiline':False]
['text':' Unsafe code path.','line_number':328,'multiline':False]
['text':' Overwrite the PatternInfo in the existing modMiddle.','line_number':329,'multiline':False]
['text':' C++ Note: Use unsafePatternInfo for proper lifecycle.','line_number':330,'multiline':False]
['text':' Change the exponent only after we select appropriate plural form','line_number':340,'multiline':False]
['text':' for formatting purposes so that we preserve expected formatted','line_number':341,'multiline':False]
['text':' string behavior.','line_number':342,'multiline':False]
['text':' We already performed rounding. Do not perform it again.','line_number':345,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':349,'multiline':True]
