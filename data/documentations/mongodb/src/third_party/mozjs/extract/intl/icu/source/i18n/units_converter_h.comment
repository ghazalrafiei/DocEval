['text':' Â© 2020 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' Internal Structure ','line_number':21,'multiline':True]
['text':' Constants corresponding to unitConstants in CLDR's units.xml.','line_number':23,'multiline':False]
['text':' ft_to_m','line_number':25,'multiline':False]
['text':' PI','line_number':26,'multiline':False]
['text':' Gravity of earth (9.80665 m/s^2), "g".','line_number':27,'multiline':False]
['text':' Newtonian constant of gravitation, "G".','line_number':28,'multiline':False]
['text':' Gallon imp to m3','line_number':29,'multiline':False]
['text':' Pound to Kilogram','line_number':30,'multiline':False]
['text':' Must be the last element.','line_number':34,'multiline':False]
['text':' These values are a hard-coded subset of unitConstants in the units','line_number':38,'multiline':False]
['text':' resources file. A unit test checks that all constants in the resource','line_number':39,'multiline':False]
['text':' file are at least recognised by the code. Derived constants' values or','line_number':40,'multiline':False]
['text':' hard-coded derivations are not checked.','line_number':41,'multiline':False]
['text':' In ICU4J, these constants live in UnitConverter.Factor.getConversionRate().','line_number':42,'multiline':False]
['text':' CONSTANT_FT2M','line_number':44,'multiline':False]
['text':' CONSTANT_PI','line_number':45,'multiline':False]
['text':' CONSTANT_GRAVITY','line_number':46,'multiline':False]
['text':' CONSTANT_G','line_number':47,'multiline':False]
['text':' CONSTANT_GAL_IMP2M3','line_number':48,'multiline':False]
['text':' CONSTANT_LB2KG','line_number':49,'multiline':False]
['text':' CONSTANT_GLUCOSE_MOLAR_MASS','line_number':50,'multiline':False]
['text':' CONSTANT_ITEM_PER_MOLE','line_number':51,'multiline':False]
['text':' Represents a conversion factor ','line_number':59,'multiline':True]
['text':' Exponents for the symbolic constants','line_number':66,'multiline':False]
['text':' Apply the power to the factor.','line_number':72,'multiline':False]
['text':' Apply SI or binary prefix to the Factor.','line_number':75,'multiline':False]
['text':' Does an in-place substition of the "symbolic constants" based on','line_number':78,'multiline':False]
['text':' constantExponents (resetting the exponents).','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' In ICU4J, see UnitConverter.Factor.getConversionRate().','line_number':81,'multiline':False]
['text':'
 * Adds a single factor element to the `Factor`. e.g "ft3m", "2.333" or "cup2m3". But not "cup2m3^3".
 ','line_number':91,'multiline':True]
['text':'*
 * Represents the conversion rate between `source` and `target`.
 ','line_number':97,'multiline':True]
['text':'*
 * Check if the convertibility between `source` and `target`.
 * For example:
 *    `meter` and `foot` are `CONVERTIBLE`.
 *    `meter-per-second` and `second-per-meter` are `RECIPROCAL`.
 *    `meter` and `pound` are `UNCONVERTIBLE`.
 *
 * NOTE:
 *    Only works with SINGLE and COMPOUND units. If one of the units is a
 *    MIXED unit, an error will occur. For more information, see UMeasureUnitComplexity.
 ','line_number':123,'multiline':True]
['text':'*
 * Converts from a source `MeasureUnit` to a target `MeasureUnit`.
 *
 * NOTE:
 *    Only works with SINGLE and COMPOUND units. If one of the units is a
 *    MIXED unit, an error will occur. For more information, see UMeasureUnitComplexity.
 ','line_number':139,'multiline':True]
['text':'*
     * Constructor of `UnitConverter`.
     * NOTE:
     *   - source and target must be under the same category
     *      - e.g. meter to mile --> both of them are length units.
     * NOTE:
     *    This constructor creates an instance of `ConversionRates` internally.
     *
     * @param sourceIdentifier represents the source unit identifier.
     * @param targetIdentifier represents the target unit identifier.
     * @param status
     ','line_number':148,'multiline':True]
['text':'*
     * Constructor of `UnitConverter`.
     * NOTE:
     *   - source and target must be under the same category
     *      - e.g. meter to mile --> both of them are length units.
     *
     * @param source represents the source unit.
     * @param target represents the target unit.
     * @param ratesInfo Contains all the needed conversion rates.
     * @param status
     ','line_number':162,'multiline':True]
['text':'*
     * Compares two single units and returns 1 if the first one is greater, -1 if the second
     * one is greater and 0 if they are equal.
     *
     * NOTE:
     *  Compares only single units that are convertible.
     ','line_number':176,'multiline':True]
['text':'*
     * Convert a measurement expressed in the source unit to a measurement
     * expressed in the target unit.
     *
     * @param inputValue the value to be converted.
     * @return the converted value.
     ','line_number':186,'multiline':True]
['text':'*
     * The inverse of convert(): convert a measurement expressed in the target
     * unit to a measurement expressed in the source unit.
     *
     * @param inputValue the value to be converted.
     * @return the converted value.
     ','line_number':195,'multiline':True]
['text':'*
     * Initialises the object.
     ','line_number':209,'multiline':True]
['text':' namespace units','line_number':215,'multiline':False]
['text':'__UNITS_CONVERTER_H__','line_number':218,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':220,'multiline':True]
