['text':' Â© 2018 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' Forward-declaration','line_number':19,'multiline':False]
['text':' namespace for enums and entrypoint functions','line_number':22,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////','line_number':25,'multiline':False]
['text':' NOTE: For examples of how to add a new stem to the number skeleton parser, see:    //','line_number':26,'multiline':False]
['text':' https://github.com/unicode-org/icu/commit/a2a7982216b2348070dc71093775ac7195793d73 //','line_number':27,'multiline':False]
['text':' and                                                                                //','line_number':28,'multiline':False]
['text':' https://github.com/unicode-org/icu/commit/6fe86f3934a8a5701034f648a8f7c5087e84aa28 //','line_number':29,'multiline':False]
['text':'//////////////////////////////////////////////////////////////////////////////////////','line_number':30,'multiline':False]
['text':'*
 * While parsing a skeleton, this enum records what type of option we expect to find next.
 ','line_number':32,'multiline':True]
['text':' Section 0: We expect whitespace or a stem, but not an option:','line_number':37,'multiline':False]
['text':' Section 1: We might accept an option, but it is not required:','line_number':41,'multiline':False]
['text':' Section 2: An option is required:','line_number':47,'multiline':False]
['text':'*
 * All possible stem literals have an entry in the StemEnum. The enum name is the kebab case stem
 * string literal written in upper snake case.
 *
 * @see StemToObject
 * @see #SERIALIZED_STEM_TRIE
 ','line_number':60,'multiline':True]
['text':' Section 1: Stems that do not require an option:','line_number':69,'multiline':False]
['text':' concise-only','line_number':79,'multiline':False]
['text':' Section 2: Stems that DO require an option:','line_number':120,'multiline':False]
['text':'* Default wildcard char, accepted on input and printed in output ','line_number':133,'multiline':True]
['text':'* Alternative wildcard char, accept on input but not printed in output ','line_number':136,'multiline':True]
['text':'* Checks whether the char is a wildcard on input ','line_number':139,'multiline':True]
['text':'*
 * Creates a NumberFormatter corresponding to the given skeleton string.
 *
 * @param skeletonString
 *            A number skeleton string, possibly not in its shortest form.
 * @return An UnlocalizedNumberFormatter with behavior defined by the given skeleton string.
 ','line_number':144,'multiline':True]
['text':'*
 * Create a skeleton string corresponding to the given NumberFormatter.
 *
 * @param macros
 *            The NumberFormatter options object.
 * @return A skeleton string in normalized form.
 ','line_number':154,'multiline':True]
['text':'*
 * Converts from a skeleton string to a MacroProps. This method contains the primary parse loop.
 *
 * Internal: use the create() endpoint instead of this function.
 ','line_number':163,'multiline':True]
['text':'*
 * Given that the current segment represents a stem, parse it and save the result.
 *
 * @return The next state after parsing this stem, corresponding to what subset of options to expect.
 ','line_number':170,'multiline':True]
['text':'*
 * Given that the current segment represents an option, parse it and save the result.
 *
 * @return The next state after parsing this option, corresponding to what subset of options to
 *         expect next.
 ','line_number':178,'multiline':True]
['text':' namespace skeleton','line_number':187,'multiline':False]
['text':'*
 * Namespace for utility methods that convert from StemEnum to corresponding objects or enums. This
 * applies to only the "Section 1" stems, those that are well-defined without an option.
 ','line_number':190,'multiline':True]
['text':' namespace stem_to_object','line_number':212,'multiline':False]
['text':'*
 * Namespace for utility methods that convert from enums to stem strings. More complex object conversions
 * take place in the object_to_stem_string namespace.
 ','line_number':214,'multiline':True]
['text':' namespace enum_to_stem_string','line_number':230,'multiline':False]
['text':'*
 * Namespace for utility methods for processing stems and options that cannot be interpreted literally.
 ','line_number':232,'multiline':True]
['text':'* @return Whether we successfully found and parsed an exponent width option. ','line_number':237,'multiline':True]
['text':'* @return Whether we successfully found and parsed an exponent sign option. ','line_number':242,'multiline':True]
['text':' "measure-unit/" is deprecated in favour of "unit/".','line_number':249,'multiline':False]
['text':' "per-measure-unit/" is deprecated in favour of "unit/".','line_number':252,'multiline':False]
['text':'*
 * Parses unit identifiers like "meter-per-second" and "foot-and-inch", as
 * specified via a "unit/" concise skeleton.
 ','line_number':255,'multiline':True]
['text':' Note: no generateScientificStem since this syntax was added later in ICU 67','line_number':273,'multiline':False]
['text':' Note: no generateIntegerStem since this syntax was added later in ICU 67','line_number':277,'multiline':False]
['text':'* @return Whether we successfully found and parsed a frac-sig option. ','line_number':279,'multiline':True]
['text':'* @return Whether we successfully found and parsed a trailing zero option. ','line_number':282,'multiline':True]
['text':' namespace blueprint_helpers','line_number':303,'multiline':False]
['text':'*
 * Class for utility methods for generating a token corresponding to each macro-prop. Each method
 * returns whether or not a token was written to the string builder.
 *
 * This needs to be a class, not a namespace, so it can be friended.
 ','line_number':305,'multiline':True]
['text':'*
     * Main skeleton generator function. Appends the normalized skeleton for the MacroProps to the given
     * StringBuilder.
     *
     * Internal: use the create() endpoint instead of this function.
     ','line_number':313,'multiline':True]
['text':'*
 * Struct for null-checking.
 * In Java, we can just check the object reference. In C++, we need a different method.
 ','line_number':348,'multiline':True]
['text':' Don't propagate the invariant conversion error; it is a skeleton syntax error ','line_number':376,'multiline':True]
['text':' namespace','line_number':385,'multiline':False]
['text':' namespace impl','line_number':387,'multiline':False]
['text':' namespace number','line_number':388,'multiline':False]
['text':'__SOURCE_NUMBER_SKELETONS_H__','line_number':391,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':392,'multiline':True]
