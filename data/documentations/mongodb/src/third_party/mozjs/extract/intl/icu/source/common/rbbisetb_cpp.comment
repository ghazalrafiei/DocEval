['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':'  rbbisetb.cpp','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':'
***************************************************************************
*   Copyright (C) 2002-2008 International Business Machines Corporation   *
*   and others. All rights reserved.                                      *
***************************************************************************
','line_number':6,'multiline':True]
['text':'','line_number':12,'multiline':False]
['text':'  RBBISetBuilder   Handles processing of Unicode Sets from RBBI rules','line_number':13,'multiline':False]
['text':'                   (part of the rule building process.)','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':'      Starting with the rules parse tree from the scanner,','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':'                   -  Enumerate the set of UnicodeSets that are referenced','line_number':18,'multiline':False]
['text':'                      by the RBBI rules.','line_number':19,'multiline':False]
['text':'                   -  compute a set of non-overlapping character ranges','line_number':20,'multiline':False]
['text':'                      with all characters within a range belonging to the same','line_number':21,'multiline':False]
['text':'                      set of input unicode sets.','line_number':22,'multiline':False]
['text':'                   -  Derive a set of non-overlapping UnicodeSet (like things)','line_number':23,'multiline':False]
['text':'                      that will correspond to columns in the state table for','line_number':24,'multiline':False]
['text':'                      the RBBI execution engine.  All characters within one','line_number':25,'multiline':False]
['text':'                      of these sets belong to the same set of the original','line_number':26,'multiline':False]
['text':'                      UnicodeSets from the user's rules.','line_number':27,'multiline':False]
['text':'                   -  construct the trie table that maps input characters','line_number':28,'multiline':False]
['text':'                      to the index of the matching non-overlapping set of set from','line_number':29,'multiline':False]
['text':'                      the previous step.','line_number':30,'multiline':False]
['text':'','line_number':31,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':'   Constructor','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':53,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':67,'multiline':False]
['text':'','line_number':68,'multiline':False]
['text':'   Destructor','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':71,'multiline':False]
['text':' Walk through & delete the linked list of RangeDescriptors','line_number':76,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':90,'multiline':False]
['text':'','line_number':91,'multiline':False]
['text':'   build          Build the list of non-overlapping character ranges','line_number':92,'multiline':False]
['text':'                  from the Unicode Sets.','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':95,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':'  Initialize the process by creating a single range encompassing all characters','line_number':103,'multiline':False]
['text':'  that is in no sets.','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' will check for status here','line_number':106,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':'  Find the set of non-overlapping ranges of characters','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':' Loop over each of the UnicodeSets encountered in the input rules','line_number':122,'multiline':False]
['text':' skip over ranges from the range list that are completely','line_number':140,'multiline':False]
['text':'   below the current range from the input unicode set.','line_number':141,'multiline':False]
['text':' If the start of the range from the range list is before with','line_number':146,'multiline':False]
['text':'   the start of the range from the unicode set, split the range list range','line_number':147,'multiline':False]
['text':'   in two, with one part being before (wholly outside of) the unicode set','line_number':148,'multiline':False]
['text':'   and the other containing the rest.','line_number':149,'multiline':False]
['text':'   Then continue the loop; the post-split current range will then be skipped','line_number':150,'multiline':False]
['text':'     over','line_number':151,'multiline':False]
['text':' Same thing at the end of the ranges...','line_number':160,'multiline':False]
['text':' If the end of the range from the range list doesn't coincide with','line_number':161,'multiline':False]
['text':'   the end of the range from the unicode set, split the range list','line_number':162,'multiline':False]
['text':'   range in two.  The first part of the split range will be','line_number':163,'multiline':False]
['text':'   wholly inside the Unicode set.','line_number':164,'multiline':False]
['text':' The current rlRange is now entirely within the UnicodeSet range.','line_number':172,'multiline':False]
['text':' Add this unicode set to the list of sets for this rlRange','line_number':173,'multiline':False]
['text':' Advance over ranges that we are finished with.','line_number':181,'multiline':False]
['text':'','line_number':191,'multiline':False]
['text':'  Group the above ranges, with each group consisting of one or more','line_number':192,'multiline':False]
['text':'    ranges that are in exactly the same set of original UnicodeSets.','line_number':193,'multiline':False]
['text':'    The groups are numbered, and these group numbers are the set of','line_number':194,'multiline':False]
['text':'    input symbols recognized by the run-time state machine.','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':'    Numbering: # 0  (state table column 0) is unused.','line_number':197,'multiline':False]
['text':'               # 1  is reserved - table column 1 is for end-of-input','line_number':198,'multiline':False]
['text':'               # 2  is reserved - table column 2 is for beginning-of-input','line_number':199,'multiline':False]
['text':'               # 3  is the first range list.','line_number':200,'multiline':False]
['text':'','line_number':201,'multiline':False]
['text':' Move the character category numbers for any dictionary ranges up, so that they','line_number':226,'multiline':False]
['text':' immediately follow the non-dictionary ranges.','line_number':227,'multiline':False]
['text':' Handle input sets that contain the special string {eof}.','line_number':241,'multiline':False]
['text':'   Column 1 of the state table is reserved for EOF on input.','line_number':242,'multiline':False]
['text':'   Column 2 is reserved for before-the-start-input.','line_number':243,'multiline':False]
['text':'            (This column can be optimized away later if there are no rule','line_number':244,'multiline':False]
['text':'             references to {bof}.)','line_number':245,'multiline':False]
['text':'   Add this column value (1 or 2) to the equivalent expression','line_number':246,'multiline':False]
['text':'     subtree for each UnicodeSet that contains the string {eof}','line_number':247,'multiline':False]
['text':'   Because {bof} and {eof} are not characters in the normal sense,','line_number':248,'multiline':False]
['text':'   they don't affect the computation of the ranges or TRIE.','line_number':249,'multiline':False]
['text':' Loop over each of the UnicodeSets encountered in the input rules','line_number':253,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':' Build the Trie table for mapping UChar32 values to the corresponding','line_number':275,'multiline':False]
['text':' range group number.','line_number':276,'multiline':False]
['text':'','line_number':277,'multiline':False]
['text':'  Initial value for all code points.','line_number':280,'multiline':False]
['text':'  Error value for out-of-range input.','line_number':281,'multiline':False]
['text':' Range start','line_number':286,'multiline':False]
['text':' Range end (inclusive)','line_number':287,'multiline':False]
['text':' value for range','line_number':288,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':315,'multiline':False]
['text':'','line_number':316,'multiline':False]
['text':'  getTrieSize()    Return the size that will be required to serialize the Trie.','line_number':317,'multiline':False]
['text':'','line_number':318,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':319,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':340,'multiline':False]
['text':'','line_number':341,'multiline':False]
['text':'  serializeTrie()   Put the serialized trie at the specified address.','line_number':342,'multiline':False]
['text':'                    Trust the caller to have given us enough memory.','line_number':343,'multiline':False]
['text':'                    getTrieSize() MUST be called first.','line_number':344,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':'-----------------------------------------------------------------------------------','line_number':346,'multiline':False]
['text':' Buffer','line_number':349,'multiline':False]
['text':' Capacity','line_number':350,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':354,'multiline':False]
['text':'','line_number':355,'multiline':False]
['text':'  addValToSets     Add a runtime-mapped input value to each uset from a','line_number':356,'multiline':False]
['text':'                   list of uset nodes. (val corresponds to a state table column.)','line_number':357,'multiline':False]
['text':'                   For each of the original Unicode sets - which correspond','line_number':358,'multiline':False]
['text':'                   directly to uset nodes - a logically equivalent expression','line_number':359,'multiline':False]
['text':'                   is constructed in terms of the remapped runtime input','line_number':360,'multiline':False]
['text':'                   symbol set.  This function adds one runtime input symbol to','line_number':361,'multiline':False]
['text':'                   a list of sets.','line_number':362,'multiline':False]
['text':'','line_number':363,'multiline':False]
['text':'                   The "logically equivalent expression" is the tree for an','line_number':364,'multiline':False]
['text':'                   or-ing together of all of the symbols that go into the set.','line_number':365,'multiline':False]
['text':'','line_number':366,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':367,'multiline':False]
['text':' There are already input symbols present for this set.','line_number':388,'multiline':False]
['text':' Set up an OR node, with the previous stuff as the left child','line_number':389,'multiline':False]
['text':'   and the new value as the right child.','line_number':390,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':406,'multiline':False]
['text':'','line_number':407,'multiline':False]
['text':'   getNumCharCategories','line_number':408,'multiline':False]
['text':'','line_number':409,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':410,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':416,'multiline':False]
['text':'','line_number':417,'multiline':False]
['text':'   getDictCategoriesStart','line_number':418,'multiline':False]
['text':'','line_number':419,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':420,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':426,'multiline':False]
['text':'','line_number':427,'multiline':False]
['text':'   sawBOF','line_number':428,'multiline':False]
['text':'','line_number':429,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':430,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':436,'multiline':False]
['text':'','line_number':437,'multiline':False]
['text':'   getFirstChar      Given a runtime RBBI character category, find','line_number':438,'multiline':False]
['text':'                     the first UChar32 that is in the set of chars ','line_number':439,'multiline':False]
['text':'                     in the category.','line_number':440,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':441,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':455,'multiline':False]
['text':'','line_number':456,'multiline':False]
['text':'   printRanges        A debugging function.','line_number':457,'multiline':False]
['text':'                      dump out all of the range definitions.','line_number':458,'multiline':False]
['text':'','line_number':459,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':460,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':488,'multiline':False]
['text':'','line_number':489,'multiline':False]
['text':'   printRangeGroups     A debugging function.','line_number':490,'multiline':False]
['text':'                        dump out all of the range groups.','line_number':491,'multiline':False]
['text':'','line_number':492,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':493,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':536,'multiline':False]
['text':'','line_number':537,'multiline':False]
['text':'   printSets          A debugging function.','line_number':538,'multiline':False]
['text':'                      dump out all of the set definitions.','line_number':539,'multiline':False]
['text':'','line_number':540,'multiline':False]
['text':'------------------------------------------------------------------------','line_number':541,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':581,'multiline':False]
['text':'','line_number':582,'multiline':False]
['text':'  RangeDescriptor copy constructor','line_number':583,'multiline':False]
['text':'','line_number':584,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':585,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':608,'multiline':False]
['text':'','line_number':609,'multiline':False]
['text':'  RangeDesriptor default constructor','line_number':610,'multiline':False]
['text':'','line_number':611,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':612,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':624,'multiline':False]
['text':'','line_number':625,'multiline':False]
['text':'  RangeDesriptor Destructor','line_number':626,'multiline':False]
['text':'','line_number':627,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':628,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':634,'multiline':False]
['text':'','line_number':635,'multiline':False]
['text':'  RangeDesriptor::split()','line_number':636,'multiline':False]
['text':'','line_number':637,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':638,'multiline':False]
['text':'  RangeDescriptor copy constructor copies all fields.','line_number':650,'multiline':False]
['text':'  Only need to update those that are different after the split.','line_number':651,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':659,'multiline':False]
['text':'','line_number':660,'multiline':False]
['text':'   RangeDescriptor::isDictionaryRange','line_number':661,'multiline':False]
['text':'','line_number':662,'multiline':False]
['text':'            Test whether this range includes characters from','line_number':663,'multiline':False]
['text':'            the original Unicode Set named "dictionary".','line_number':664,'multiline':False]
['text':'','line_number':665,'multiline':False]
['text':'            This function looks through the Unicode Sets that','line_number':666,'multiline':False]
['text':'            the range includes, checking for one named "dictionary"','line_number':667,'multiline':False]
['text':'','line_number':668,'multiline':False]
['text':'            TODO:  a faster way would be to find the set node for','line_number':669,'multiline':False]
['text':'                   "dictionary" just once, rather than looking it','line_number':670,'multiline':False]
['text':'                   up by name every time.','line_number':671,'multiline':False]
['text':'','line_number':672,'multiline':False]
['text':'-------------------------------------------------------------------------------------','line_number':673,'multiline':False]
['text':' #if !UCONFIG_NO_BREAK_ITERATION ','line_number':694,'multiline':True]
