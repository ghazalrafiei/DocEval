['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
* Copyright (C) 2015-2016, International Business Machines
* Corporation and others.  All Rights Reserved.
******************************************************************************
* sharedobject.h
','line_number':3,'multiline':True]
['text':'*
 * Base class for unified cache exposing enough methods to SharedObject
 * instances to allow their addRef() and removeRef() methods to
 * update cache metrics. No other part of ICU, except for SharedObject,
 * should directly call the methods of this base class.
 ','line_number':22,'multiline':True]
['text':'*
     * Notify the cache implementation that an object was seen transitioning to
     * zero hard references. The cache may use this to keep track the number of
     * unreferenced SharedObjects, and to trigger evictions.
     ','line_number':32,'multiline':True]
['text':'*
 * Base class for shared, reference-counted, auto-deleted objects.
 * Subclasses can be immutable.
 * If they are mutable, then they must implement their copy constructor
 * so that copyOnWrite() works.
 *
 * Either stack-allocate, use LocalPointer, or use addRef()/removeRef().
 * Sharing requires reference-counting.
 ','line_number':45,'multiline':True]
['text':'* Initializes totalRefCount, softRefCount to 0. ','line_number':56,'multiline':True]
['text':'* Initializes totalRefCount, softRefCount to 0. ','line_number':62,'multiline':True]
['text':'*
     * Increments the number of hard references to this object. Thread-safe.
     * Not for use from within the Unified Cache implementation.
     ','line_number':71,'multiline':True]
['text':'*
     * Decrements the number of hard references to this object, and
     * arrange for possible cache-eviction and/or deletion if ref
     * count goes to zero. Thread-safe.
     * 
     * Not for use from within the UnifiedCache implementation.
     ','line_number':77,'multiline':True]
['text':'*
     * Returns the number of hard references for this object.
     * Uses a memory barrier.
     ','line_number':86,'multiline':True]
['text':'*
     * If noHardReferences() == true then this object has no hard references.
     * Must be called only from within the internals of UnifiedCache.
     ','line_number':92,'multiline':True]
['text':'*
     * If hasHardReferences() == true then this object has hard references.
     * Must be called only from within the internals of UnifiedCache.
     ','line_number':98,'multiline':True]
['text':'*
     * Deletes this object if it has no references.
     * Available for non-cached SharedObjects only. Ownership of cached objects
     * is with the UnifiedCache, which is solely responsible for eviction and deletion.
     ','line_number':104,'multiline':True]
['text':'*
     * Returns a writable version of ptr.
     * If there is exactly one owner, then ptr itself is returned as a
     *  non-const pointer.
     * If there are multiple owners, then ptr is replaced with a 
     * copy-constructed clone,
     * and that is returned.
     * Returns NULL if cloning failed.
     *
     * T must be a subclass of SharedObject.
     ','line_number':112,'multiline':True]
['text':'*
     * Makes dest an owner of the object pointed to by src while adjusting
     * reference counts and deleting the previous object dest pointed to
     * if necessary. Before this call is made, dest must either be NULL or
     * be included in the reference count of the object it points to. 
     *
     * T must be a subclass of SharedObject.
     ','line_number':135,'multiline':True]
['text':'*
     * Equivalent to copyPtr(NULL, dest).
     ','line_number':152,'multiline':True]
['text':'*
     * The number of references from the UnifiedCache, which is
     * the number of times that the sharedObject is stored as a hash table value.
     * For use by UnifiedCache implementation code only.
     * All access is synchronized by UnifiedCache's gCacheMutex
     ','line_number':164,'multiline':True]
['text':'*
     * Reference count, excluding references from within the UnifiedCache implementation.
     ','line_number':173,'multiline':True]
