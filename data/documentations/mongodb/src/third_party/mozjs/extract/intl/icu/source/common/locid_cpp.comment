['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 **********************************************************************
 *   Copyright (C) 1997-2016, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 **********************************************************************
*
* File locid.cpp
*
* Created by: Richard Gillam
*
* Modification History:
*
*   Date        Name        Description
*   02/11/97    aliu        Changed gLocPath to fgDataDirectory and added
*                           methods to get and set it.
*   04/02/97    aliu        Made operator!= inline; fixed return value
*                           of getName().
*   04/15/97    aliu        Cleanup for AIX/Win32.
*   04/24/97    aliu        Numerous changes per code review.
*   08/18/98    stephen     Changed getDisplayName()
*                           Added SIMPLIFIED_CHINESE, TRADITIONAL_CHINESE
*                           Added getISOCountries(), getISOLanguages(),
*                           getLanguagesForCountry()
*   03/16/99    bertrand    rehaul.
*   07/21/99    stephen     Added U_CFUNC setDefault
*   11/09/99    weiv        Added const char * getName() const;
*   04/12/00    srl         removing unicodestring api's and cached hash code
*   08/10/01    grhoten     Change the static Locales to accessor functions
******************************************************************************
','line_number':3,'multiline':True]
['text':' gDefaultLocaleMutex protects all access to gDefaultLocalesHashT and gDefaultLocale.','line_number':69,'multiline':False]
['text':'*
 * \def ULOC_STRING_LIMIT
 * strings beyond this value crash in CharString
 ','line_number':74,'multiline':True]
['text':' Alias for PRC ','line_number':96,'multiline':True]
['text':'eDEFAULT,','line_number':105,'multiline':False]
['text':'','line_number':110,'multiline':False]
['text':' Deleter function for Locales owned by the default Locale hash table/','line_number':111,'multiline':False]
['text':'','line_number':112,'multiline':False]
['text':' Automatically deletes all elements, using deleter func.','line_number':127,'multiline':False]
['text':' Synchronize this entire function.','line_number':171,'multiline':False]
['text':' If given a NULL string for the locale id, grab the default','line_number':176,'multiline':False]
['text':'   name from the system.','line_number':177,'multiline':False]
['text':'   (Different from most other locale APIs, where a null name means use','line_number':178,'multiline':False]
['text':'    the current ICU default locale.)','line_number':179,'multiline':False]
['text':' This function not thread safe? TODO: verify.','line_number':181,'multiline':False]
['text':' always canonicalize host ID','line_number':182,'multiline':False]
['text':' sfb 07/21/99 ','line_number':227,'multiline':True]
['text':' end ','line_number':235,'multiline':True]
['text':'Character separating the posix id fields','line_number':249,'multiline':True]
['text':' '_'','line_number':250,'multiline':False]
['text':' In the platform codepage.','line_number':251,'multiline':False]
['text':'if fullName is on the heap, we free it','line_number':261,'multiline':True]
['text':'
 * Internal constructor to allow construction of a locale object with
 *   NO side effects.   (Default constructor tries to get
 *   the default locale.)
 ','line_number':275,'multiline':True]
['text':' shortcut ','line_number':295,'multiline':True]
['text':' Calculate the size of the resulting string.','line_number':306,'multiline':False]
['text':' Language','line_number':308,'multiline':False]
['text':' int32 wrap','line_number':312,'multiline':False]
['text':' start with newLanguage','line_number':319,'multiline':False]
['text':' _Country','line_number':321,'multiline':False]
['text':' int32 wrap','line_number':325,'multiline':False]
['text':' _Variant','line_number':332,'multiline':False]
['text':' remove leading _'s','line_number':335,'multiline':False]
['text':' remove trailing _'s','line_number':341,'multiline':False]
['text':' int32 wrap','line_number':343,'multiline':False]
['text':' Separator rules:','line_number':358,'multiline':False]
['text':' at least: __v','line_number':361,'multiline':False]
['text':' at least: _v','line_number':365,'multiline':False]
['text':'  NOW we have the full locale string..','line_number':378,'multiline':False]
['text':' Now, copy it back.','line_number':379,'multiline':False]
['text':' newLanguage is already copied','line_number':381,'multiline':False]
['text':' at least:  __v','line_number':383,'multiline':False]
['text':'            ^','line_number':384,'multiline':False]
['text':' keyword parsing ','line_number':402,'multiline':True]
['text':' Variant parsing with a script ','line_number':405,'multiline':True]
['text':' No country found ','line_number':407,'multiline':True]
['text':' Something went wrong with appending, etc.','line_number':414,'multiline':False]
['text':' Parse it, because for example 'language' might really be a complete','line_number':418,'multiline':False]
['text':' string.','line_number':419,'multiline':False]
['text':' Commonly used locales known are already canonicalized','line_number':519,'multiline':False]
['text':'*
 * A Builder class to build the alias data.
 ','line_number':568,'multiline':True]
['text':' Build the AliasData from resource.','line_number':576,'multiline':False]
['text':' Read the languageAlias data from alias to','line_number':589,'multiline':False]
['text':' strings+types+replacementIndexes','line_number':590,'multiline':False]
['text':' The number of record will be stored into length.','line_number':591,'multiline':False]
['text':' Allocate length items for types, to store the type field.','line_number':592,'multiline':False]
['text':' Allocate length items for replacementIndexes,','line_number':593,'multiline':False]
['text':' to store the index in the strings for the replacement script.','line_number':594,'multiline':False]
['text':' Read the scriptAlias data from alias to','line_number':602,'multiline':False]
['text':' strings+types+replacementIndexes','line_number':603,'multiline':False]
['text':' Allocate length items for types, to store the type field.','line_number':604,'multiline':False]
['text':' Allocate length items for replacementIndexes,','line_number':605,'multiline':False]
['text':' to store the index in the strings for the replacement script.','line_number':606,'multiline':False]
['text':' Read the territoryAlias data from alias to','line_number':613,'multiline':False]
['text':' strings+types+replacementIndexes','line_number':614,'multiline':False]
['text':' Allocate length items for types, to store the type field.','line_number':615,'multiline':False]
['text':' Allocate length items for replacementIndexes,','line_number':616,'multiline':False]
['text':' to store the index in the strings for the replacement script.','line_number':617,'multiline':False]
['text':' Read the variantAlias data from alias to','line_number':624,'multiline':False]
['text':' strings+types+replacementIndexes','line_number':625,'multiline':False]
['text':' Allocate length items for types, to store the type field.','line_number':626,'multiline':False]
['text':' Allocate length items for replacementIndexes,','line_number':627,'multiline':False]
['text':' to store the index in the strings for the replacement variant.','line_number':628,'multiline':False]
['text':' Read the subdivisionAlias data from alias to','line_number':635,'multiline':False]
['text':' strings+types+replacementIndexes','line_number':636,'multiline':False]
['text':' Allocate length items for types, to store the type field.','line_number':637,'multiline':False]
['text':' Allocate length items for replacementIndexes,','line_number':638,'multiline':False]
['text':' to store the index in the strings for the replacement variant.','line_number':639,'multiline':False]
['text':'*
 * A class to hold the Alias Data.
 ','line_number':647,'multiline':True]
['text':' Do not get into loadData if the status already has error.','line_number':654,'multiline':False]
['text':'*
 * Read the languageAlias data from alias to strings+types+replacementIndexes.
 * Allocate length items for types, to store the type field. Allocate length
 * items for replacementIndexes, to store the index in the strings for the
 * replacement language.
 ','line_number':756,'multiline':True]
['text':' Assert the aliasFrom only contains the following possibilties','line_number':775,'multiline':False]
['text':' language_REGION_variant','line_number':776,'multiline':False]
['text':' language_REGION','line_number':777,'multiline':False]
['text':' language_variant','line_number':778,'multiline':False]
['text':' language','line_number':779,'multiline':False]
['text':' und_variant','line_number':780,'multiline':False]
['text':' Assert no script in aliasFrom','line_number':782,'multiline':False]
['text':' Assert when language is und, no REGION in aliasFrom.','line_number':784,'multiline':False]
['text':'*
 * Read the scriptAlias data from alias to strings+types+replacementIndexes.
 * Allocate length items for types, to store the type field. Allocate length
 * items for replacementIndexes, to store the index in the strings for the
 * replacement script.
 ','line_number':793,'multiline':True]
['text':'*
 * Read the territoryAlias data from alias to strings+types+replacementIndexes.
 * Allocate length items for types, to store the type field. Allocate length
 * items for replacementIndexes, to store the index in the strings for the
 * replacement regions.
 ','line_number':824,'multiline':True]
['text':'*
 * Read the variantAlias data from alias to strings+types+replacementIndexes.
 * Allocate length items for types, to store the type field. Allocate length
 * items for replacementIndexes, to store the index in the strings for the
 * replacement variant.
 ','line_number':852,'multiline':True]
['text':'*
 * Read the subdivisionAlias data from alias to strings+types+replacementIndexes.
 * Allocate length items for types, to store the type field. Allocate length
 * items for replacementIndexes, to store the index in the strings for the
 * replacement regions.
 ','line_number':888,'multiline':True]
['text':'*
 * Initializes the alias data from the ICU resource bundles. The alias data
 * contains alias of language, country, script and variants.
 *
 * If the alias data has already loaded, then this method simply returns without
 * doing anything meaningful.
 ','line_number':916,'multiline':True]
['text':' LOCALE_CANONICALIZATION_DEBUG','line_number':928,'multiline':False]
['text':' LOCALE_CANONICALIZATION_DEBUG','line_number':935,'multiline':False]
['text':'*
 * Build the alias data from resources.
 ','line_number':938,'multiline':True]
['text':' Read the languageAlias into languageTypes, languageReplacementIndexes','line_number':964,'multiline':False]
['text':' and strings','line_number':965,'multiline':False]
['text':' Read the scriptAlias into scriptTypes, scriptReplacementIndexes','line_number':976,'multiline':False]
['text':' and strings','line_number':977,'multiline':False]
['text':' Read the territoryAlias into territoryTypes, territoryReplacementIndexes','line_number':987,'multiline':False]
['text':' and strings','line_number':988,'multiline':False]
['text':' Read the variantAlias into variantTypes, variantReplacementIndexes','line_number':997,'multiline':False]
['text':' and strings','line_number':998,'multiline':False]
['text':' Read the subdivisionAlias into subdivisionTypes, subdivisionReplacementIndexes','line_number':1007,'multiline':False]
['text':' and strings','line_number':1008,'multiline':False]
['text':' We can only use strings after freeze it.','line_number':1021,'multiline':False]
['text':' Build the languageMap from languageTypes & languageReplacementIndexes','line_number':1024,'multiline':False]
['text':' Build the scriptMap from scriptTypes & scriptReplacementIndexes','line_number':1032,'multiline':False]
['text':' Build the territoryMap from territoryTypes & territoryReplacementIndexes','line_number':1040,'multiline':False]
['text':' Build the variantMap from variantTypes & variantReplacementIndexes.','line_number':1048,'multiline':False]
['text':' Build the subdivisionMap from subdivisionTypes & subdivisionReplacementIndexes.','line_number':1056,'multiline':False]
['text':' copy hashtables','line_number':1068,'multiline':False]
['text':'*
 * A class that find the replacement values of locale fields by using AliasData.
 ','line_number':1083,'multiline':True]
['text':' Check the fields inside locale, if need to replace fields,','line_number':1096,'multiline':False]
['text':' place the the replaced locale ID in out and return true.','line_number':1097,'multiline':False]
['text':' Otherwise return false for no replacement or error.','line_number':1098,'multiline':False]
['text':'*
     * If replacement is neither null nor empty and input is either null or empty,
     * return replacement.
     * If replacement is neither null nor empty but input is not empty, return input.
     * If replacement is either null or empty and type is either null or empty,
     * return input.
     * Otherwise return null.
     *   replacement     input      type        return
     *    AAA             nullptr    *           AAA
     *    AAA             BBB        *           BBB
     *    nullptr || ""   CCC        nullptr     CCC
     *    nullptr || ""   *          DDD         nullptr
     ','line_number':1115,'multiline':True]
['text':' Gather fields and generate locale ID into out.','line_number':1146,'multiline':False]
['text':' Generate the lookup key.','line_number':1149,'multiline':False]
['text':' Replace by using languageAlias.','line_number':1163,'multiline':False]
['text':' Replace by using territoryAlias.','line_number':1168,'multiline':False]
['text':' Replace by using scriptAlias.','line_number':1171,'multiline':False]
['text':' Replace by using variantAlias.','line_number':1174,'multiline':False]
['text':' Replace by using subdivisionAlias.','line_number':1177,'multiline':False]
['text':' Replace transformed extensions.','line_number':1181,'multiline':False]
['text':' reach the end, just return it.','line_number':1221,'multiline':False]
['text':' We have multiple field so we have to allocate and parse','line_number':1224,'multiline':False]
['text':' null terminiate it.','line_number':1238,'multiline':False]
['text':' null terminiate it.','line_number':1247,'multiline':False]
['text':' Got a script','line_number':1250,'multiline':False]
['text':' null terminiate it.','line_number':1261,'multiline':False]
['text':' Got a region','line_number':1265,'multiline':False]
['text':' null terminiate it.','line_number':1276,'multiline':False]
['text':' Got a variant','line_number':1280,'multiline':False]
['text':' Nothing to search.','line_number':1300,'multiline':False]
['text':' Since we may have more than one variant, we need to loop through them.','line_number':1304,'multiline':False]
['text':' Do not consider  ill-formed variant subtag.','line_number':1317,'multiline':False]
['text':' Found no replacement data.','line_number':1328,'multiline':False]
['text':' Replacement produce no changes.','line_number':1358,'multiline':False]
['text':' DO NOTHING','line_number':1373,'multiline':False]
['text':' UTS35 does not specifiy what should we do if we have extensions in the','line_number':1374,'multiline':False]
['text':' replacement. Currently we know only the following 4 "BCP47 LegacyRules" have','line_number':1375,'multiline':False]
['text':' extensions in them languageAlias:','line_number':1376,'multiline':False]
['text':'  i_default => en_x_i_default','line_number':1377,'multiline':False]
['text':'  i_enochian => und_x_i_enochian','line_number':1378,'multiline':False]
['text':'  i_mingo => see_x_i_mingo','line_number':1379,'multiline':False]
['text':'  zh_min => nan_x_zh_min','line_number':1380,'multiline':False]
['text':' But all of them are already changed by code inside ultag_parse() before','line_number':1381,'multiline':False]
['text':' hitting this code.','line_number':1382,'multiline':False]
['text':' Something changed by language alias data.','line_number':1385,'multiline':False]
['text':' Nothing changed by language alias data.','line_number':1388,'multiline':False]
['text':' No region to search.','line_number':1399,'multiline':False]
['text':' Found no replacement data for this region.','line_number':1404,'multiline':False]
['text':' If there are are more than one region in the replacement.','line_number':1410,'multiline':False]
['text':' We need to check which one match based on the language.','line_number':1411,'multiline':False]
['text':' Cannot use nullptr for language because that will construct','line_number':1412,'multiline':False]
['text':' the default locale, in that case, use "und" to get the correct','line_number':1413,'multiline':False]
['text':' locale.','line_number':1414,'multiline':False]
['text':' Assuming the case there are no three letter region code in','line_number':1427,'multiline':False]
['text':' the replacement of territoryAlias','line_number':1428,'multiline':False]
['text':' The region is changed by data in territory alias.','line_number':1452,'multiline':False]
['text':' No script to search.','line_number':1463,'multiline':False]
['text':' Found no replacement data for this script.','line_number':1468,'multiline':False]
['text':' The script is changed by data in script alias.','line_number':1473,'multiline':False]
['text':' Since we may have more than one variant, we need to loop through them.','line_number':1483,'multiline':False]
['text':' Found no replacement data for this variant.','line_number':1488,'multiline':False]
['text':' Special hack to handle hepburn-heploc => alalc97','line_number':1498,'multiline':False]
['text':' Found replacement data for this subdivision.','line_number':1523,'multiline':False]
['text':' Add 'zzzz' based on changes to UTS #35 for CLDR-14312.','line_number':1529,'multiline':False]
['text':' The content of the transformedExtensions will be modified in this','line_number':1542,'multiline':False]
['text':' function to NULL-terminating (tkey-tvalue) pairs.','line_number':1543,'multiline':False]
['text':' We need to sort the tfields by tkey','line_number':1565,'multiline':False]
['text':' NULL terminate tvalue','line_number':1578,'multiline':False]
['text':' uprv_strcmp return int and in some platform, such as arm64-v8a,','line_number':1587,'multiline':False]
['text':' it may return positive values > 127 which cause the casted value','line_number':1588,'multiline':False]
['text':' of int8_t negative.','line_number':1589,'multiline':False]
['text':' Split the "tkey-tvalue" pair string so that we can canonicalize the tvalue.','line_number':1604,'multiline':False]
['text':' NULL terminate tkey','line_number':1605,'multiline':False]
['text':' uprv_strcmp return int and in some platform, such as arm64-v8a,','line_number':1635,'multiline':False]
['text':' it may return positive values > 127 which cause the casted value','line_number':1636,'multiline':False]
['text':' of int8_t negative.','line_number':1637,'multiline':False]
['text':' only support x extension inside CLDR for now.','line_number':1654,'multiline':False]
['text':' null terminate inside variantsBuff','line_number':1691,'multiline':False]
['text':' Sort the variants','line_number':1699,'multiline':False]
['text':' uprv_strcmp return int and in some platform, such as arm64-v8a,','line_number':1701,'multiline':False]
['text':' it may return positive values > 127 which cause the casted value','line_number':1702,'multiline':False]
['text':' of int8_t negative.','line_number':1703,'multiline':False]
['text':' A changed count to assert when loop too many times.','line_number':1709,'multiline':False]
['text':' A UVector to to hold CharString allocated by the replace* method','line_number':1711,'multiline':False]
['text':' and freed when out of scope from his function.','line_number':1712,'multiline':False]
['text':' Something wrong with the data cause looping here more than 10 times','line_number':1716,'multiline':False]
['text':' already.','line_number':1717,'multiline':False]
['text':' From observation of key in data/misc/metadata.txt','line_number':1719,'multiline':False]
['text':' we know currently we only need to search in the following combination','line_number':1720,'multiline':False]
['text':' of fields for type in languageAlias:','line_number':1721,'multiline':False]
['text':' * lang_region_variant','line_number':1722,'multiline':False]
['text':' * lang_region','line_number':1723,'multiline':False]
['text':' * lang_variant','line_number':1724,'multiline':False]
['text':' * lang','line_number':1725,'multiline':False]
['text':' * und_variant','line_number':1726,'multiline':False]
['text':' This assumption is ensured by the U_ASSERT in readLanguageAlias','line_number':1727,'multiline':False]
['text':'','line_number':1728,'multiline':False]
['text':'                      lang  REGION variant','line_number':1729,'multiline':False]
['text':' Some values in data is changed, try to match from the beginning','line_number':1738,'multiline':False]
['text':' again.','line_number':1739,'multiline':False]
['text':' Nothing changed. Break out.','line_number':1743,'multiline':False]
['text':' while(1)','line_number':1745,'multiline':False]
['text':' Nothing changed and we know the order of the vaiants are not change','line_number':1748,'multiline':False]
['text':' because we have no variant or only one.','line_number':1749,'multiline':False]
['text':' If the tag is not changed, return.','line_number':1801,'multiline':False]
['text':' Return true if the locale is changed during canonicalization.','line_number':1809,'multiline':False]
['text':' The replaced value then will be put into out.','line_number':1810,'multiline':False]
['text':' Function to optimize for known cases without so we can skip the loading','line_number':1818,'multiline':False]
['text':' of resources in the startup time until we really need it.','line_number':1819,'multiline':False]
['text':' common well-known Canonicalized.','line_number':1829,'multiline':False]
['text':' namespace','line_number':1839,'multiline':False]
['text':' Function for testing.','line_number':1841,'multiline':False]
['text':' Function for testing.','line_number':1849,'multiline':False]
['text':'This function initializes a Locale from a C locale ID','line_number':1859,'multiline':True]
['text':' Free our current storage ','line_number':1863,'multiline':True]
['text':' not a loop:','line_number':1873,'multiline':False]
['text':' just an easy way to have a common error-exit','line_number':1874,'multiline':False]
['text':' without goto and without another function','line_number':1875,'multiline':False]
['text':' not an error, just set the default locale','line_number':1886,'multiline':False]
['text':' preset all fields to empty ','line_number':1890,'multiline':True]
['text':' "canonicalize" the locale ID to ICU/Java format','line_number':1893,'multiline':False]
['text':'Go to heap for the fullName if necessary','line_number':1901,'multiline':True]
['text':' error: out of memory','line_number':1905,'multiline':False]
['text':' should never occur ','line_number':1913,'multiline':True]
['text':' after uloc_getName/canonicalize() we know that only '_' are separators ','line_number':1919,'multiline':True]
['text':' But _ could also appeared in timezone such as "en@timezone=America/Los_Angeles" ','line_number':1920,'multiline':True]
['text':' variant may contain @foo or .foo POSIX cruft; remove it','line_number':1931,'multiline':False]
['text':' error: the language field is too long','line_number':1945,'multiline':False]
['text':' Usually the 2nd one, except when a script or country is also used. ','line_number':1948,'multiline':True]
['text':' We have a language ','line_number':1950,'multiline':True]
['text':' We have at least a script ','line_number':1957,'multiline':True]
['text':' We have a country ','line_number':1964,'multiline':True]
['text':' script or country empty but variant in next field (i.e. en__POSIX) ','line_number':1969,'multiline':True]
['text':' We have a variant ','line_number':1973,'multiline':True]
['text':' Not sure it is already canonicalized','line_number':1986,'multiline':False]
['text':' If need replacement, call init again.','line_number':1989,'multiline':False]
['text':' if (canonicalize) {','line_number':1996,'multiline':False]
['text':' successful end of init()','line_number':1998,'multiline':False]
['text':'loop doesn't iterate','line_number':2000,'multiline':True]
['text':' when an error occurs, then set this object to "bogus" (there is no UErrorCode here)','line_number':2002,'multiline':False]
['text':'
 * Set up the base name.
 * If there are no key words, it's exactly the full name.
 * If key words exist, it's the full name truncated at the '@' character.
 * Need to set up both at init() and after setting a keyword.
 ','line_number':2008,'multiline':True]
['text':' Key words exist.','line_number':2023,'multiline':False]
['text':' The original computation of variantBegin leaves it equal to the length','line_number':2033,'multiline':False]
['text':' of fullName if there is no variant.  It should instead be','line_number':2034,'multiline':False]
['text':' the length of the baseName.','line_number':2035,'multiline':False]
['text':' Free our current storage ','line_number':2053,'multiline':True]
['text':' Set the default from the full name string of the supplied locale.
     * This is a convenient way to access the default locale caching mechanisms.
     ','line_number':2093,'multiline':True]
['text':'canonicalize=','line_number':2116,'multiline':True]
['text':'canonicalize=','line_number':2138,'multiline':True]
['text':'canonicalize=','line_number':2157,'multiline':True]
['text':' If a BCP 47 language tag is passed as the language parameter to the','line_number':2172,'multiline':False]
['text':' normal Locale constructor, it will actually fall back to invoking','line_number':2173,'multiline':False]
['text':' uloc_forLanguageTag() to parse it if it somehow is able to detect that','line_number':2174,'multiline':False]
['text':' the string actually is BCP 47. This works well for things like strings','line_number':2175,'multiline':False]
['text':' using BCP 47 extensions, but it does not at all work for things like','line_number':2176,'multiline':False]
['text':' legacy language tags (marked as âType: grandfatheredâ in BCP 47,','line_number':2177,'multiline':False]
['text':' e.g., "en-GB-oed") which are possible to also','line_number':2178,'multiline':False]
['text':' interpret as ICU locale IDs and because of that won't trigger the BCP 47','line_number':2179,'multiline':False]
['text':' parsing. Therefore the code here explicitly calls uloc_forLanguageTag()','line_number':2180,'multiline':False]
['text':' and then Locale::init(), instead of just calling the normal constructor.','line_number':2181,'multiline':False]
['text':'canonicalize=','line_number':2204,'multiline':True]
['text':'strict=','line_number':2223,'multiline':True]
['text':'*
 * Return the LCID value as specified in the "LocaleID" resource for this
 * locale.  The LocaleID must be expressed as a hexadecimal number, from
 * one to four digits.  If the LocaleID resource is not present, or is
 * in an incorrect format, 0 is returned.  The LocaleID is for use in
 * Windows (it is an LCID), but is available on all platforms.
 ','line_number':2259,'multiline':True]
['text':' Set the locale's data based on a posix id.','line_number':2282,'multiline':False]
['text':' Failure allocating the locale cache.','line_number':2427,'multiline':False]
['text':'   The best we can do is return a NULL reference.','line_number':2428,'multiline':False]
['text':'operating on NULL','line_number':2431,'multiline':True]
['text':'
This function is defined this way in order to get around static
initialization and static destruction.
 ','line_number':2434,'multiline':True]
['text':' Warning this is used beyond the typical RTTI usage. ','line_number':2452,'multiline':True]
['text':'status','line_number':2486,'multiline':True]
['text':'status','line_number':2521,'multiline':True]
['text':' A wrapper around KeywordEnumeration that calls uloc_toUnicodeLocaleKey() in','line_number':2532,'multiline':False]
['text':' the next() method for each keyword before returning it.','line_number':2533,'multiline':False]
['text':' Not a Unicode keyword, could be a t, x or other, continue to look at the next one.','line_number':2549,'multiline':False]
['text':' Out-of-line virtual destructor to serve as the "key function".','line_number':2557,'multiline':False]
['text':' TODO: Remove the need for a const char* to a NUL terminated buffer.','line_number':2635,'multiline':False]
['text':' TODO: Remove the need for a const char* to a NUL terminated buffer.','line_number':2648,'multiline':False]
['text':' Handle the case the current buffer is not enough to hold the new id ','line_number':2695,'multiline':True]
['text':' if full Name is already on the heap, need to free it.','line_number':2705,'multiline':False]
['text':' baseName should not point to freed memory.','line_number':2708,'multiline':False]
['text':' May have added the first keyword, meaning that the fullName is no longer also the baseName.','line_number':2719,'multiline':False]
['text':' TODO: Remove the need for a const char* to a NUL terminated buffer.','line_number':2728,'multiline':False]
['text':' TODO: Remove the need for a const char* to a NUL terminated buffer.','line_number':2738,'multiline':False]
['text':'eof','line_number':2775,'multiline':False]
