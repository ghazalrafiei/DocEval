['text':'
** This file is in the public domain, so clarified as of
** 2006-07-17 by Arthur David Olson.
','line_number':1,'multiline':True]
['text':' Enable extensions and modifications for ICU. ','line_number':6,'multiline':True]
['text':' Continue executing after link failure. Even if ICU is undefined
 * (for vanilla zic behavior), ICU_LINKS should be defined, since zic
 * appears to fail on the 2003 data the first time through during the
 * linking phase. Running zic twice, with ICU_LINKS defined, causes
 * links to be handled correctly. ','line_number':9,'multiline':True]
['text':' These constants are embedded in dynamically generated header
 * version.h in the standard tzcode distribution. ','line_number':19,'multiline':True]
['text':' !defined ZIC_MAX_ABBR_LEN_WO_WARN ','line_number':43,'multiline':True]
['text':'
** On some ancient hosts, predicates like `isspace(C)' are defined
** only if isascii(C) || C == EOF. Modern hosts obey the C Standard,
** which says they are defined only if C == ((unsigned char) C) || C == EOF.
** Neither the C Standard nor Posix require that `isascii' exist.
** For portability, we check both ancient and modern requirements.
** If isascii is not defined, the isascii check succeeds trivially.
','line_number':58,'multiline':True]
['text':' for example, 1986 ','line_number':78,'multiline':True]
['text':' for example, 1986 ','line_number':79,'multiline':True]
['text':' 0..11 ','line_number':84,'multiline':True]
['text':' see below ','line_number':86,'multiline':True]
['text':' time from midnight ','line_number':90,'multiline':True]
['text':' above is standard time if TRUE ','line_number':91,'multiline':True]
['text':' or wall clock time if FALSE ','line_number':92,'multiline':True]
['text':' above is GMT if TRUE ','line_number':93,'multiline':True]
['text':' or local time if FALSE ','line_number':94,'multiline':True]
['text':' offset from standard time ','line_number':95,'multiline':True]
['text':' variable part of abbreviation ','line_number':96,'multiline':True]
['text':' a rule to do (used in outzone) ','line_number':98,'multiline':True]
['text':' used in outzone ','line_number':99,'multiline':True]
['text':'
**	r_dycode		r_dayofmonth	r_wday
','line_number':102,'multiline':True]
['text':' 1..31 ','line_number':106,'multiline':True]
['text':' unused ','line_number':106,'multiline':True]
['text':' 1..31 ','line_number':107,'multiline':True]
['text':' 0..6 (Sun..Sat) ','line_number':107,'multiline':True]
['text':' 1..31 ','line_number':108,'multiline':True]
['text':' 0..6 (Sun..Sat) ','line_number':108,'multiline':True]
['text':'
** Line codes.
','line_number':206,'multiline':True]
['text':'
** Which fields are which on a Zone line.
','line_number':215,'multiline':True]
['text':'
** Which fields are which on a Zone continuation line.
','line_number':230,'multiline':True]
['text':'
** Which files are which on a Rule line.
','line_number':244,'multiline':True]
['text':'
** Which fields are which on a Link line.
','line_number':259,'multiline':True]
['text':'
** Which fields are which on a Leap line.
','line_number':267,'multiline':True]
['text':'
** Year synonyms.
','line_number':279,'multiline':True]
['text':' number of rules ','line_number':288,'multiline':True]
['text':' number of zones ','line_number':292,'multiline':True]
['text':' Indices into rules[] for final rules.  They will occur in pairs,
 * with finalRules[i] occurring before finalRules[i+1] in the year.
 * Each zone need only store a start year, a standard offset, and an
 * index into finalRules[].  FinalRules[] are aliases into rules[]. ','line_number':312,'multiline':True]
['text':' gmtoffs[i] = rawoffs[i] + dstoffs[i] ','line_number':403,'multiline':True]
['text':'
** Memory allocation.
','line_number':416,'multiline':True]
['text':'
** Error handling.
','line_number':462,'multiline':True]
['text':'
	** Match the format of "cc" to allow sh users to
	**	zic ... 2>&1 | error -t "*" -v
	** on BSD systems.
	','line_number':485,'multiline':True]
['text':' File into which we will write supplemental ICU data. ','line_number':532,'multiline':True]
['text':' machine-readable section ','line_number':539,'multiline':True]
['text':' human-readable section ','line_number':542,'multiline':True]
['text':' machine-readable section ','line_number':550,'multiline':True]
['text':' machine-readable section ','line_number':564,'multiline':True]
['text':' human-readable section ','line_number':572,'multiline':True]
['text':' i+=2 should work too ','line_number':591,'multiline':True]
['text':' [sic] pointer comparison ','line_number':592,'multiline':True]
['text':' defined TEXTDOMAINDIR ','line_number':623,'multiline':True]
['text':' HAVE_GETTEXT ','line_number':625,'multiline':True]
['text':' usage message by request ','line_number':701,'multiline':True]
['text':'
		** Find the next non-continuation zone entry.
		','line_number':726,'multiline':True]
['text':'
	** Make links.
	','line_number':733,'multiline':True]
['text':'ICU','line_number':760,'multiline':True]
['text':'
	** We get to be careful here since
	** there's a fair chance of root running us.
	','line_number':784,'multiline':True]
['text':'
** Associate sets of rules with zones.
','line_number':882,'multiline':True]
['text':'
** Sort by rule name.
','line_number':886,'multiline':True]
['text':'
			** Maybe we have a local standard time offset.
			','line_number':954,'multiline':True]
['text':'
			** Note, though, that if there's no rule,
			** a '%s' in the format is a bad thing.
			','line_number':960,'multiline':True]
['text':' nothing to do ','line_number':1015,'multiline':True]
['text':' "cannot happen" ','line_number':1042,'multiline':True]
['text':'
** Convert a string of one of the forms
**	h	-h	hh:mm	-hh:mm	hh:mm:ss	-hh:mm:ss
** into a number of seconds.
** A null string maps to zero.
** Call error with errstring and return zero on errors.
','line_number':1067,'multiline':True]
['text':'
	** If there was an UNTIL field on this line,
	** there's more information about the zone on the next line.
	','line_number':1257,'multiline':True]
['text':'
		** Leapin' Lizards!
		','line_number':1282,'multiline':True]
['text':' infile() turns "-" into "" ','line_number':1341,'multiline':True]
['text':' Standard ','line_number':1417,'multiline':True]
['text':' Wall ','line_number':1422,'multiline':True]
['text':' Greenwich ','line_number':1427,'multiline':True]
['text':' Universal ','line_number':1428,'multiline':True]
['text':' Zulu ','line_number':1429,'multiline':True]
['text':'
	** Year work.
	','line_number':1438,'multiline':True]
['text':' "cannot happen" ','line_number':1451,'multiline':True]
['text':' "cannot happen" ','line_number':1473,'multiline':True]
['text':'
	** Day work.
	** Accept things such as:
	**	1
	**	last-Sunday
	**	Sun<=20
	**	Sun>=7
	','line_number':1495,'multiline':True]
['text':'
	** Sort.
	','line_number':1612,'multiline':True]
['text':'
	** Optimize.
	','line_number':1617,'multiline':True]
['text':'
		** Remember that type 0 is reserved.
		','line_number':1628,'multiline':True]
['text':' handled by default rule ','line_number':1633,'multiline':True]
['text':'
	** Transfer.
	','line_number':1649,'multiline':True]
['text':'
	** Correct for leap seconds.
	','line_number':1656,'multiline':True]
['text':'
	** Figure out 32-bit-limited starts and counts.
	','line_number':1667,'multiline':True]
['text':'
	** Remove old file, if any, to snap links.
	','line_number':1689,'multiline':True]
['text':'
		** Remember that type 0 is reserved.
		','line_number':1734,'multiline':True]
['text':'
			** No transition times fall in the current
			** (32- or 64-bit) window.
			','line_number':1741,'multiline':True]
['text':'
			** For America/Godthab and Antarctica/Palmer
			','line_number':1751,'multiline':True]
['text':'
			** Remember that type 0 is reserved.
			','line_number':1754,'multiline':True]
['text':'
		** For some pre-2011 systems: if the last-to-be-written
		** standard (or daylight) type has an offset different from the
		** most recently used offset,
		** append an (unused) copy of the most recently used type
		** (to help get global "altzone" and "timezone" variables
		** set correctly).
		','line_number':1761,'multiline':True]
['text':' !defined LEAVE_SOME_PRE_2011_SYSTEMS_IN_THE_LURCH ','line_number':1812,'multiline':True]
['text':'
		** Potentially, set type 0 to that of lowest-valued time.
		','line_number':1814,'multiline':True]
['text':' Omit the "J" in Jan and Feb, as that's shorter.  ','line_number':2036,'multiline':True]
['text':' "cannot happen" ','line_number':2064,'multiline':True]
['text':'
		** There are no rules running through "max".
		** Find the latest std rule in stdabbrrp
		** and latest rule of any type in stdrp.
		','line_number':2138,'multiline':True]
['text':'
		** Horrid special case: if year is 2037,
		** presume this is a zone handled on a year-by-year basis;
		** do not try to apply a rule to the zone.
		','line_number':2151,'multiline':True]
['text':' Perpetual DST.  ','line_number':2160,'multiline':True]
['text':' all rules are min to max ','line_number':2236,'multiline':True]
['text':'
	** Now. . .finally. . .generate some useful data!
	','line_number':2253,'multiline':True]
['text':'
	** Thanks to Earl Chew
	** for noting the need to unconditionally initialize startttisstd.
	','line_number':2260,'multiline':True]
['text':'
	** Reserve type 0.
	','line_number':2271,'multiline':True]
['text':'
	** Generate lots of data if a rule can't cover all future times.
	','line_number':2290,'multiline':True]
['text':' Circa-COMPAT clients, and earlier clients, might
			   not work for this zone when given dates before
			   1970 or after 2038.  ','line_number':2305,'multiline':True]
['text':'
		** Search through a couple of extra years past the obvious
		** 400, to avoid edge cases.  For example, suppose a non-POSIX
		** rule applies from 2012 onwards and has transitions in March
		** and September, plus some one-off transitions in November
		** 2013.  If zic looked only at the last 400 years, it would
		** set max_year=2413, with the intent that the 400 years 2014
		** through 2413 will be repeated.  The last transition listed
		** in the tzfile would be in 2413-09, less than 400 years
		** after the last one-off transition in 2013-11.  Two years
		** might be overkill, but with the kind of edge cases
		** available we're not sure that one year would suffice.
		','line_number':2314,'multiline':True]
['text':'
		** Regardless of any of the above,
		** for a "proDSTic" zone which specifies that its rules
		** always have and always will be in effect,
		** we only need one cycle to define the zone.
		','line_number':2335,'multiline':True]
['text':'
	** For the benefit of older systems,
	** generate data from 1900 through 2037.
	','line_number':2346,'multiline':True]
['text':'
		** A guess that may well be corrected later.
		','line_number':2355,'multiline':True]
['text':' !useuntil ','line_number':2371,'multiline':True]
['text':' Look for exactly 2 rules that end at 'max' and
			 * note them. Determine max(r_loyear) for the 2 of
			 * them. ','line_number':2372,'multiline':True]
['text':' There might be an overriding non-max rule
					 * to be applied to a specific year after one of
					 * max rule's start year. For example,
					 *
					 * Rule Foo 2010 max ...
					 * Rule Foo 2015 only ...
					 *
					 * In this case, we need to change the start year of
					 * the final (max) rules to the next year. ','line_number':2390,'multiline':True]
['text':' When above adjustment is done, max_year might need
					 * to be adjusted, so the final rule will be properly
					 * evaluated and emitted by the later code block.
					 *
					 * Note: This may push the start year of the final
					 * rules ahead by 1 year unnecessarily. For example,
					 * If there are two rules, non-max rule and max rule
					 * starting in the same year, such as
					 *
					 * Rule Foo 2010 only ....
					 * Rule Foo 2010 max ....
					 *
					 * In this case, the final (max) rule actually starts
					 * in 2010, instead of 2010. We could make this tool
					 * more intelligent to detect such situation. But pushing
					 * final rule start year to 1 year ahead (in the worst case)
					 * will just populate a few extra transitions, and it still
					 * works fine. So for now, we're not trying to put additional
					 * logic to optimize the case.
					 ','line_number':2401,'multiline':True]
['text':' America/Resolute in 2009a uses a pair of rules
						 * which does not change the offset.  ICU ignores
						 * such rules without actual time transitions. ','line_number':2433,'multiline':True]
['text':' Swap if necessary so finalRule1 occurs before
						 * finalRule2 ','line_number':2439,'multiline':True]
['text':' Add final rule to our list ','line_number':2446,'multiline':True]
['text':'
			** Mark which rules to do in the current year.
			** For those to do, calculate rpytime(rp, year);
			','line_number':2472,'multiline':True]
['text':'
					** Turn untiltime into UT
					** assuming the current gmtoff and
					** stdoff values.
					','line_number':2493,'multiline':True]
['text':'
				** Find the rule (of those to do, if any)
				** that takes effect earliest in the year.
				','line_number':2506,'multiline':True]
['text':' go on to next year ','line_number':2531,'multiline':True]
['text':' We want to shift final year 1 year after
					 * the actual final rule takes effect (year + 1),
					 * because the previous type is valid until the first
					 * transition defined by the final rule.  Otherwise
					 * we may see unexpected offset shift at the
					 * beginning of the year when the final rule takes
					 * effect.
					 *
					 * Note: This may results some 64bit second transitions
					 * at the very end (year 2038). ICU 4.2 or older releases
					 * cannot handle 64bit second transitions and they are
					 * dropped from zoneinfo.txt. ','line_number':2562,'multiline':True]
['text':' only emit this for the first year ','line_number':2577,'multiline':True]
['text':'
		** Now we may get to set starttime for the next zone line.
		','line_number':2621,'multiline':True]
['text':'
		** If we're extending the explicitly listed observations
		** for 400 years because we can't fill the POSIX-TZ field,
		** check whether we actually ended up explicitly listing
		** observations through that period.  If there aren't any
		** near the end of the 400-year period, add a redundant
		** one at the end of the final year, to make it clear
		** that we are claiming to have definite knowledge of
		** the lack of transitions up to that point.
		','line_number':2635,'multiline':True]
['text':'
			** Create new type code for the redundant entry,
			** to prevent it being optimised away.
			','line_number':2655,'multiline':True]
['text':'
	** See if there's already an entry for this zone type.
	** If so, just return its index.
	','line_number':2738,'multiline':True]
['text':'
	** There isn't one; add a new one, unless there are already too
	** many.
	','line_number':2752,'multiline':True]
['text':'
	** propagate leap seconds forward
	','line_number':2819,'multiline':True]
['text':' case-insensitive equality ','line_number':2859,'multiline':True]
['text':'
	** Look for exact match.
	','line_number':2892,'multiline':True]
['text':'
	** Look for inexact match.
	','line_number':2898,'multiline':True]
['text':' multiple inexact matches ','line_number':2906,'multiline':True]
['text':'
** Given a rule, and a year, compute the date - in seconds since January 1,
** 1970, 00:00 LOCAL time - in that year that the rule refers to.
','line_number':2975,'multiline':True]
['text':' with a nod to Margaret O. ','line_number':2984,'multiline':True]
['text':'
		** Don't trust mod of negative numbers.
		','line_number':3025,'multiline':True]
['text':'
		** Want one to ZIC_MAX_ABBR_LEN_WO_WARN alphabetics
		** optionally followed by a + or - and a number from 1 to 14.
		','line_number':3070,'multiline':True]
['text':'
		** DOS drive specifier?
		','line_number':3119,'multiline':True]
['text':'
			** It doesn't seem to exist, so we try to create it.
			** Creation may fail because of the directory being
			** created by some other multiprocessor, so we get
			** to do extra checking.
			','line_number':3129,'multiline':True]
['text':'
** UNIX was a registered trademark of The Open Group in 2003.
','line_number':3153,'multiline':True]
