['text':' U+000000 to U+00007F','line_number':49,'multiline':False]
['text':' U+000080 to U+0007FF','line_number':50,'multiline':False]
['text':' U+000800 to U+00FFFF','line_number':51,'multiline':False]
['text':' there would be strings containing non-BMP code points here, but','line_number':53,'multiline':False]
['text':' unfortunately JS strings are UCS-2 (and worse yet are treated as','line_number':54,'multiline':False]
['text':' 16-bit values by the spec), so we have to do gymnastics to work','line_number':55,'multiline':False]
['text':' with non-BMP -- manual surrogate decoding doesn't work because','line_number':56,'multiline':False]
['text':' String.prototype.charCodeAt() ignores surrogate pairs and only','line_number':57,'multiline':False]
['text':' returns 16-bit values','line_number':58,'multiline':False]
['text':' test conversion equality -- keys are names of files containing equivalent','line_number':61,'multiline':False]
['text':' Unicode data, values are the encoding of the file in the format expected by','line_number':62,'multiline':False]
['text':' nsIConverter(In|Out)putStream.init','line_number':63,'multiline':False]
['text':' utility functions','line_number':121,'multiline':False]
['text':' eslint-disable-next-line no-unreachable','line_number':166,'multiline':False]
['text':' not reached','line_number':190,'multiline':False]
['text':' eslint-disable-next-line no-unreachable','line_number':191,'multiline':False]
['text':' complex charset readers','line_number':209,'multiline':False]
['text':'*
 * Wraps a UTF-8 stream to allow access to the Unicode code points in it.
 *
 * @param stream
 *   the stream to wrap
 ','line_number':211,'multiline':True]
['text':' returns numeric code point at front of stream encoded in UTF-8, -1 if at','line_number':221,'multiline':False]
['text':' end of stream, or throws if valid (and properly encoded!) code point not','line_number':222,'multiline':False]
['text':' found','line_number':223,'multiline':False]
['text':' if at end of stream, must distinguish failure to read any bytes','line_number':229,'multiline':False]
['text':' (correct behavior) from failure to read some byte after the first','line_number':230,'multiline':False]
['text':' in the character','line_number':231,'multiline':False]
['text':' c < 11000000','line_number':243,'multiline':False]
['text':' byte doesn't have enough leading ones (must be at least two)','line_number':244,'multiline':False]
['text':' not 10xxxxxx','line_number':251,'multiline':False]
['text':' c < 11100000','line_number':254,'multiline':False]
['text':' two-byte between U+000080 and U+0007FF','line_number':255,'multiline':False]
['text':' no upper bounds-check needed, by previous lines','line_number':257,'multiline':False]
['text':' not 10xxxxxx','line_number':267,'multiline':False]
['text':' c < 11110000','line_number':270,'multiline':False]
['text':' three-byte between U+000800 and U+00FFFF','line_number':271,'multiline':False]
['text':' no upper bounds-check needed, by previous lines','line_number':274,'multiline':False]
['text':' not 10xxxxxx','line_number':284,'multiline':False]
['text':' c < 11111000','line_number':287,'multiline':False]
['text':' four-byte between U+010000 and U+10FFFF','line_number':288,'multiline':False]
['text':' need an upper bounds-check since 0x10FFFF isn't (2**n - 1)','line_number':294,'multiline':False]
['text':' 11111000 or greater -- no UTF-8 mapping','line_number':301,'multiline':False]
['text':'*
 * Wraps a UTF-16 stream to allow access to the Unicode code points in it.
 *
 * @param stream
 *   the stream to wrap
 * @param bigEndian
 *   true for UTF-16BE, false for UTF-16LE, not present at all for UTF-16 with
 *   a byte-order mark
 ','line_number':306,'multiline':True]
['text':' returns numeric code point at front of stream encoded in UTF-16,','line_number':331,'multiline':False]
['text':' -1 if at end of stream, or throws if UTF-16 code point not found','line_number':332,'multiline':False]
['text':' if at end of stream, must distinguish failure to read any bytes','line_number':336,'multiline':False]
['text':' (correct behavior) from failure to read some byte after the first','line_number':337,'multiline':False]
['text':' in the character','line_number':338,'multiline':False]
['text':' second surrogate, but expecting none or first','line_number':350,'multiline':False]
['text':' non-BMP, use surrogate pair','line_number':355,'multiline':False]
['text':' non-surrogate','line_number':370,'multiline':False]
