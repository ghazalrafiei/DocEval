['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
* Copyright (C) 1997-2016, International Business Machines Corporation and    *
* others. All Rights Reserved.                                                *
*******************************************************************************
*
* File DTFMTSYM.CPP
*
* Modification History:
*
*   Date        Name        Description
*   02/19/97    aliu        Converted from java.
*   07/21/98    stephen     Added getZoneIndex
*                            Changed weekdays/short weekdays to be one-based
*   06/14/99    stephen     Removed SimpleDateFormat::fgTimeZoneDataSuffix
*   11/16/99    weiv        Added 'Y' and 'e' to fgPatternChars
*   03/27/00    weiv        Keeping resource bundle around!
*   06/30/05    emmons      Added eraNames, narrow month/day, standalone context
*   10/12/05    emmons      Added setters for eraNames, month/day by width/context
*******************************************************************************
','line_number':3,'multiline':True]
['text':' *****************************************************************************','line_number':54,'multiline':False]
['text':' class DateFormatSymbols','line_number':55,'multiline':False]
['text':' *****************************************************************************','line_number':56,'multiline':False]
['text':'*
 * These are static arrays we use only in the case where we have no
 * resource data.
 ','line_number':58,'multiline':True]
['text':'*
 * Unlocalized date-time pattern characters. For example: 'y', 'd', etc. All
 * locales use the same these unlocalized pattern characters.
 ','line_number':69,'multiline':True]
['text':' if UDAT_HAS_PATTERN_CHAR_FOR_TIME_SEPARATOR:','line_number':74,'multiline':False]
['text':'   GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB:','line_number':75,'multiline':False]
['text':' else:','line_number':76,'multiline':False]
['text':'   GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB','line_number':77,'multiline':False]
['text':'------------------------------------------------------','line_number':89,'multiline':False]
['text':' Strings of last resort.  These are only used if we have no resource','line_number':90,'multiline':False]
['text':' files.  They aren't designed for actual use, just for backup.','line_number':91,'multiline':False]
['text':' These are the month names and abbreviations of last resort.','line_number':93,'multiline':False]
['text':' "01" ','line_number':96,'multiline':True]
['text':' "02" ','line_number':97,'multiline':True]
['text':' "03" ','line_number':98,'multiline':True]
['text':' "04" ','line_number':99,'multiline':True]
['text':' "05" ','line_number':100,'multiline':True]
['text':' "06" ','line_number':101,'multiline':True]
['text':' "07" ','line_number':102,'multiline':True]
['text':' "08" ','line_number':103,'multiline':True]
['text':' "09" ','line_number':104,'multiline':True]
['text':' "10" ','line_number':105,'multiline':True]
['text':' "11" ','line_number':106,'multiline':True]
['text':' "12" ','line_number':107,'multiline':True]
['text':' "13" ','line_number':108,'multiline':True]
['text':' These are the weekday names and abbreviations of last resort.','line_number':111,'multiline':False]
['text':' "0" ','line_number':114,'multiline':True]
['text':' "1" ','line_number':115,'multiline':True]
['text':' "2" ','line_number':116,'multiline':True]
['text':' "3" ','line_number':117,'multiline':True]
['text':' "4" ','line_number':118,'multiline':True]
['text':' "5" ','line_number':119,'multiline':True]
['text':' "6" ','line_number':120,'multiline':True]
['text':' "7" ','line_number':121,'multiline':True]
['text':' These are the quarter names and abbreviations of last resort.','line_number':124,'multiline':False]
['text':' "1" ','line_number':127,'multiline':True]
['text':' "2" ','line_number':128,'multiline':True]
['text':' "3" ','line_number':129,'multiline':True]
['text':' "4" ','line_number':130,'multiline':True]
['text':' These are the am/pm and BC/AD markers of last resort.','line_number':133,'multiline':False]
['text':' "AM" ','line_number':136,'multiline':True]
['text':' "PM" ','line_number':137,'multiline':True]
['text':' "BC" ','line_number':142,'multiline':True]
['text':' "AD" ','line_number':143,'multiline':True]
['text':' Sizes for the last resort string arrays ','line_number':146,'multiline':True]
['text':'unusedContext','line_number':178,'multiline':True]
['text':'*
 * These are the tags we expect to see in normal resource bundle files associated
 * with a locale and calendar
 ','line_number':202,'multiline':True]
['text':' static const char gZoneStringsTag[]="zoneStrings";','line_number':232,'multiline':False]
['text':' static const char gLocalPatternCharsTag[]="localPatternChars";','line_number':234,'multiline':False]
['text':'*
 * Jitterbug 2974: MSVC has a bug whereby new X[0] behaves badly.
 * Work around this.
 ','line_number':238,'multiline':True]
['text':'------------------------------------------------------','line_number':246,'multiline':False]
['text':' assignArray() is only called by copyData() and initializeData(), which in turn','line_number':305,'multiline':False]
['text':' implements the copy constructor and the assignment operator.','line_number':306,'multiline':False]
['text':' All strings in a DateFormatSymbols object are created in one of the following','line_number':307,'multiline':False]
['text':' three ways that all allow to safely use UnicodeString::fastCopyFrom():','line_number':308,'multiline':False]
['text':' - readonly-aliases from resource bundles','line_number':309,'multiline':False]
['text':' - readonly-aliases or allocated strings from constants','line_number':310,'multiline':False]
['text':' - safely cloned strings (with owned buffers) from setXYZ() functions','line_number':311,'multiline':False]
['text':'','line_number':312,'multiline':False]
['text':' Note that this is true for as long as DateFormatSymbols can be constructed','line_number':313,'multiline':False]
['text':' only from a locale bundle or set via the cloning API,','line_number':314,'multiline':False]
['text':' *and* for as long as all the strings are in *private* fields, preventing','line_number':315,'multiline':False]
['text':' a subclass from creating these strings in an "unsafe" way (with respect to fastCopyFrom()).','line_number':316,'multiline':False]
['text':'*
 * Create a copy, in fZoneStrings, of the given zone strings array.  The
 * member variables fZoneStringsRowCount and fZoneStringsColCount should
 * be set already by the caller.
 ','line_number':327,'multiline':True]
['text':' fastCopyFrom() - see assignArray comments','line_number':348,'multiline':False]
['text':' If memory allocation failed, roll back and delete fZoneStrings','line_number':353,'multiline':False]
['text':'*
 * Copy all of the other's data to this.
 ','line_number':363,'multiline':True]
['text':' fastCopyFrom() - see assignArray comments','line_number':392,'multiline':False]
['text':' Other zone strings data is created on demand','line_number':439,'multiline':False]
['text':' fastCopyFrom() - see assignArray comments','line_number':442,'multiline':False]
['text':'*
 * Assignment operator.
 ','line_number':448,'multiline':True]
['text':' self-assignment: no-op','line_number':453,'multiline':False]
['text':' First do cheap comparisons','line_number':541,'multiline':False]
['text':' Now compare the arrays themselves','line_number':579,'multiline':False]
['text':' Compare the contents of fZoneStrings','line_number':617,'multiline':False]
['text':'------------------------------------------------------','line_number':638,'multiline':False]
['text':' no month data for this, defaults to ABBREVIATED','line_number':688,'multiline':False]
['text':' no month data for this, defaults to ABBREVIATED','line_number':707,'multiline':False]
['text':' no quarter data for this, defaults to ABBREVIATED','line_number':807,'multiline':False]
['text':' no quarter data for this, defaults to ABBREVIATED','line_number':826,'multiline':False]
['text':' fastCopyFrom() - see assignArray comments','line_number':847,'multiline':False]
['text':'ignored','line_number':867,'multiline':True]
['text':'ignored','line_number':867,'multiline':True]
['text':'ignored','line_number':889,'multiline':True]
['text':'ignored','line_number':889,'multiline':True]
['text':'------------------------------------------------------','line_number':909,'multiline':False]
['text':' delete the old list if we own it','line_number':914,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':918,'multiline':False]
['text':' than adopting the list passed in)','line_number':919,'multiline':False]
['text':' delete the old list if we own it','line_number':928,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':932,'multiline':False]
['text':' than adopting the list passed in)','line_number':933,'multiline':False]
['text':' delete the old list if we own it','line_number':942,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':946,'multiline':False]
['text':' than adopting the list passed in)','line_number':947,'multiline':False]
['text':' delete the old list if we own it','line_number':956,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':960,'multiline':False]
['text':' than adopting the list passed in)','line_number':961,'multiline':False]
['text':' delete the old list if we own it','line_number':970,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':974,'multiline':False]
['text':' than adopting the list passed in)','line_number':975,'multiline':False]
['text':' delete the old list if we own it','line_number':984,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':985,'multiline':False]
['text':' than adopting the list passed in)','line_number':986,'multiline':False]
['text':' delete the old list if we own it','line_number':1050,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':1054,'multiline':False]
['text':' than adopting the list passed in)','line_number':1055,'multiline':False]
['text':' delete the old list if we own it','line_number':1064,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':1068,'multiline':False]
['text':' than adopting the list passed in)','line_number':1069,'multiline':False]
['text':' delete the old list if we own it','line_number':1078,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':1079,'multiline':False]
['text':' than adopting the list passed in)','line_number':1080,'multiline':False]
['text':' delete the old list if we own it','line_number':1159,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':1160,'multiline':False]
['text':' than adopting the list passed in)','line_number':1161,'multiline':False]
['text':'
            if (fNarrowQuarters)
                delete[] fNarrowQuarters;
            fNarrowQuarters = newUnicodeStringArray(count);
            uprv_arrayCopy( quartersArray,fNarrowQuarters,count);
            fNarrowQuartersCount = count;
        ','line_number':1181,'multiline':True]
['text':'
           if (fStandaloneNarrowQuarters)
                delete[] fStandaloneNarrowQuarters;
            fStandaloneNarrowQuarters = newUnicodeStringArray(count);
            uprv_arrayCopy( quartersArray,fStandaloneNarrowQuarters,count);
            fStandaloneNarrowQuartersCount = count;
        ','line_number':1210,'multiline':True]
['text':' delete the old list if we own it','line_number':1230,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':1233,'multiline':False]
['text':' than adopting the list passed in)','line_number':1234,'multiline':False]
['text':' For now, we include all zones','line_number':1268,'multiline':False]
['text':' This code must be called within a synchronized block','line_number':1271,'multiline':False]
['text':' dummy do-while','line_number':1291,'multiline':False]
['text':' Allocate array','line_number':1299,'multiline':False]
['text':' since deleting a 2-d array is a pain in the butt, we offload that task to','line_number':1362,'multiline':False]
['text':' a separate function','line_number':1363,'multiline':False]
['text':' we always own the new list, which we create here (we duplicate rather','line_number':1365,'multiline':False]
['text':' than adopting the list passed in)','line_number':1366,'multiline':False]
['text':'------------------------------------------------------','line_number':1372,'multiline':False]
['text':' y','line_number':1391,'multiline':False]
['text':' d','line_number':1392,'multiline':False]
['text':' k','line_number':1393,'multiline':False]
['text':' H','line_number':1394,'multiline':False]
['text':' m','line_number':1395,'multiline':False]
['text':' s','line_number':1396,'multiline':False]
['text':' S','line_number':1397,'multiline':False]
['text':' D','line_number':1398,'multiline':False]
['text':' F','line_number':1399,'multiline':False]
['text':' w','line_number':1400,'multiline':False]
['text':' W','line_number':1401,'multiline':False]
['text':' h','line_number':1402,'multiline':False]
['text':' K','line_number':1403,'multiline':False]
['text':' Y','line_number':1404,'multiline':False]
['text':' u','line_number':1405,'multiline':False]
['text':' g','line_number':1406,'multiline':False]
['text':' A','line_number':1407,'multiline':False]
['text':' r','line_number':1408,'multiline':False]
['text':' M or MM','line_number':1411,'multiline':False]
['text':' e or ee','line_number':1412,'multiline':False]
['text':' c or cc','line_number':1413,'multiline':False]
['text':' L or LL','line_number':1414,'multiline':False]
['text':' Q or QQ','line_number':1415,'multiline':False]
['text':' q or qq','line_number':1416,'multiline':False]
['text':'------------------------------------------------------','line_number':1432,'multiline':False]
['text':' fastCopyFrom() - see assignArray comments','line_number':1437,'multiline':False]
['text':'------------------------------------------------------','line_number':1441,'multiline':False]
['text':'------------------------------------------------------','line_number':1449,'multiline':False]
['text':' Constants declarations','line_number':1453,'multiline':False]
['text':' ResourceSink to enumerate all calendar resources','line_number':1486,'multiline':False]
['text':' Enum which specifies the type of alias received, or no alias','line_number':1489,'multiline':False]
['text':' Data structures to store resources from the current resource bundle','line_number':1497,'multiline':False]
['text':'* 
     * Whenever there are aliases, the same object will be added twice to 'map'.
     * To avoid double deletion, 'maps' won't take ownership of the objects. Instead,
     * 'mapRefs' will own them and will delete them when CalendarDataSink is deleted.
     ','line_number':1501,'multiline':True]
['text':' Paths and the aliases they point to','line_number':1508,'multiline':False]
['text':' Current and next calendar resource table which should be loaded','line_number':1511,'multiline':False]
['text':' Resources to visit when enumerating fallback calendars','line_number':1515,'multiline':False]
['text':' Alias' relative path populated whenever an alias is read','line_number':1518,'multiline':False]
['text':' Initializes CalendarDataSink with default values','line_number':1521,'multiline':False]
['text':' Configure the CalendarSink to visit all the resources','line_number':1532,'multiline':False]
['text':' Actions to be done before enumerating','line_number':1537,'multiline':False]
['text':' Stores the resources to visit on the next calendar.','line_number':1548,'multiline':False]
['text':' Enumerate all resources for this calendar','line_number':1553,'multiline':False]
['text':' == Handle aliases ==','line_number':1557,'multiline':False]
['text':' Ignore aliases to the gregorian calendar, all of its resources will be loaded anyway.','line_number':1561,'multiline':False]
['text':' Whenever an alias to the next calendar (except gregorian) is encountered, register the','line_number':1565,'multiline':False]
['text':' calendar type it's pointing to','line_number':1566,'multiline':False]
['text':' Only release ownership after resourcesToVisitNext takes it (no error happened):','line_number':1576,'multiline':False]
['text':' Register same-calendar alias','line_number':1581,'multiline':False]
['text':' Only release ownership after aliasPathPairs takes it (no error happened):','line_number':1586,'multiline':False]
['text':' Only release ownership after aliasPathPairs takes it (no error happened):','line_number':1591,'multiline':False]
['text':' Only visit the resources that were referenced by an alias on the previous calendar','line_number':1597,'multiline':False]
['text':' (AmPmMarkersAbbr is an exception).','line_number':1598,'multiline':False]
['text':' == Handle data ==','line_number':1602,'multiline':False]
['text':' Apply same-calendar aliases','line_number':1626,'multiline':False]
['text':' Clone the array','line_number':1638,'multiline':False]
['text':' Put the array on the 'arrays' map','line_number':1643,'multiline':False]
['text':' Set the resources to visit on the next calendar','line_number':1667,'multiline':False]
['text':' Process the nested resource bundle tables','line_number':1673,'multiline':False]
['text':' Iterate over all the elements of the table and add them to the map','line_number':1681,'multiline':False]
['text':' Ignore '%variant' keys','line_number':1685,'multiline':False]
['text':' == Handle String elements ==','line_number':1690,'multiline':False]
['text':' We are on a leaf, store the map elements into the stringMap','line_number':1692,'multiline':False]
['text':' mapRefs will keep ownership of 'stringMap':','line_number':1694,'multiline':False]
['text':' Store the current path's length and append the current key to the path.','line_number':1715,'multiline':False]
['text':' In cyclicNameSets ignore everything but years/format/abbreviated','line_number':1719,'multiline':False]
['text':' and zodiacs/format/abbreviated','line_number':1720,'multiline':False]
['text':' Drop the latest key on the path and continue','line_number':1742,'multiline':False]
['text':' == Handle aliases ==','line_number':1748,'multiline':False]
['text':' Drop the latest key on the path and continue','line_number':1750,'multiline':False]
['text':' Store the alias path and the current path on aliasPathPairs','line_number':1758,'multiline':False]
['text':' Only release ownership after aliasPathPairs takes it (no error happened):','line_number':1762,'multiline':False]
['text':' Only release ownership after aliasPathPairs takes it (no error happened):','line_number':1767,'multiline':False]
['text':' Drop the latest key on the path and continue','line_number':1770,'multiline':False]
['text':' == Handle data ==','line_number':1776,'multiline':False]
['text':' We are on a leaf, store the array','line_number':1778,'multiline':False]
['text':' We are not on a leaf, recursively process the subtable.','line_number':1787,'multiline':False]
['text':' Drop the latest key on the path','line_number':1792,'multiline':False]
['text':' Populates an AliasIdentifier with the alias information contained on the UResource.Value.','line_number':1797,'multiline':False]
['text':' If we have an alias to the same calendar, the path to the resource must be different','line_number':1818,'multiline':False]
['text':' If we have an alias to a different calendar, the path to the resource must be the same','line_number':1823,'multiline':False]
['text':' Deleter function to be used by 'arrays'','line_number':1841,'multiline':False]
['text':' Virtual destructors have to be defined out of line','line_number':1846,'multiline':False]
['text':'------------------------------------------------------','line_number':1852,'multiline':False]
['text':' readonly aliases - all "data" strings are constant','line_number':1861,'multiline':False]
['text':' -1 as length for variable-length strings (gLastResortDayNames[0] is empty)','line_number':1862,'multiline':False]
['text':' DateFormatSymbols takes ownership of the array:','line_number':1882,'multiline':False]
['text':' Entries must be sorted by usageTypeName; entry with NULL name terminates list.','line_number':1965,'multiline':False]
['text':' Resource keys to look up localized strings for day periods.','line_number':1982,'multiline':False]
['text':' The first one must be midnight and the second must be noon, so that their indices coincide','line_number':1983,'multiline':False]
['text':' with the am/pm field. Formatting and parsing code for day periods relies on this coincidence.','line_number':1984,'multiline':False]
['text':' In case something goes wrong, initialize all of the data to NULL. ','line_number':2026,'multiline':True]
['text':' We need to preserve the requested locale for','line_number':2098,'multiline':False]
['text':' lazy ZoneStringFormat instantiation.  ZoneStringFormat','line_number':2099,'multiline':False]
['text':' is region sensitive, thus, bundle locale bundle's locale','line_number':2100,'multiline':False]
['text':' is not sufficient.','line_number':2101,'multiline':False]
['text':' Create a CalendarDataSink to process this data and the resouce bundles','line_number':2106,'multiline':False]
['text':' Iterate over the resource bundle data following the fallbacks through different calendar types','line_number':2113,'multiline':False]
['text':' Enumerate this calendar type. If the calendar is not found fallback to gregorian','line_number':2121,'multiline':False]
['text':' Stop loading when gregorian was loaded','line_number':2140,'multiline':False]
['text':' Get the next calendar type to process from the sink','line_number':2145,'multiline':False]
['text':' Gregorian is always the last fallback','line_number':2148,'multiline':False]
['text':' CharString object to build paths','line_number':2155,'multiline':False]
['text':' Load Leap Month Patterns','line_number':2158,'multiline':False]
['text':' Hack to fix bad C inheritance for dangi monthPatterns (OK in J); this should be handled by aliases in root, but isn't.','line_number':2177,'multiline':False]
['text':' The ordering of the following statements is important.','line_number':2178,'multiline':False]
['text':' end of hack','line_number':2191,'multiline':False]
['text':' Load cyclic names sets','line_number':2199,'multiline':False]
['text':' Load context transforms and capitalization','line_number':2206,'multiline':False]
['text':' linear search; list is short and we cannot be sure that bsearch is available','line_number':2220,'multiline':False]
['text':' These functions all fail gracefully if passed NULL pointers and','line_number':2240,'multiline':False]
['text':' do nothing unless U_SUCCESS(tempStatus), so it's only necessary','line_number':2241,'multiline':False]
['text':' to check for errors once after all calls are made.','line_number':2242,'multiline':False]
['text':' Load day periods','line_number':2263,'multiline':False]
['text':' if we make it to here, the resource data is cool, and we can get everything out','line_number':2284,'multiline':False]
['text':' of it that we need except for the time-zone and localized-pattern data, which','line_number':2285,'multiline':False]
['text':' are stored in a separate file','line_number':2286,'multiline':False]
['text':' Load eras','line_number':2290,'multiline':False]
['text':' Workaround because eras/wide was omitted from CLDR 1.3','line_number':2294,'multiline':False]
['text':' current ICU4J falls back to abbreviated if narrow eras are missing, so we will too','line_number':2298,'multiline':False]
['text':' Workaround because eras/wide was omitted from CLDR 1.3','line_number':2301,'multiline':False]
['text':' Load month names','line_number':2306,'multiline':False]
['text':' If standalone/wide not available, use format/wide ','line_number':2313,'multiline':True]
['text':' If standalone/abbreviated not available, use format/abbreviated ','line_number':2319,'multiline':True]
['text':' If format/narrow not available, use standalone/narrow','line_number':2331,'multiline':False]
['text':' If standalone/narrow not available, use format/narrow','line_number':2334,'multiline':False]
['text':' If neither is available, use format/abbreviated','line_number':2337,'multiline':False]
['text':' Load AM/PM markers; if wide or narrow not available, use short','line_number':2342,'multiline':False]
['text':' Load quarters','line_number':2358,'multiline':False]
['text':' ICU 3.8 or later version no longer uses localized date-time pattern characters by default (ticket#5597)','line_number':2377,'multiline':False]
['text':'
    // fastCopyFrom()/setTo() - see assignArray comments
    resStr = ures_getStringByKey(fResourceBundle, gLocalPatternCharsTag, &len, &status);
    fLocalPatternChars.setTo(TRUE, resStr, len);
    // If the locale data does not include new pattern chars, use the defaults
    // TODO: Consider making this an error, since this may add conflicting characters.
    if (len < PATTERN_CHARS_LEN) {
        fLocalPatternChars.append(UnicodeString(TRUE, &gPatternChars[len], PATTERN_CHARS_LEN-len));
    }
    ','line_number':2378,'multiline':True]
['text':' Format wide weekdays -> fWeekdays','line_number':2390,'multiline':False]
['text':' {sfb} fixed to handle 1-based weekdays','line_number':2391,'multiline':False]
['text':' Format abbreviated weekdays -> fShortWeekdays','line_number':2395,'multiline':False]
['text':' Format short weekdays -> fShorterWeekdays (fall back to abbreviated)','line_number':2399,'multiline':False]
['text':' Stand-alone wide weekdays -> fStandaloneWeekdays','line_number':2407,'multiline':False]
['text':' If standalone/wide is not available, use format/wide ','line_number':2410,'multiline':True]
['text':' Stand-alone abbreviated weekdays -> fStandaloneShortWeekdays','line_number':2415,'multiline':False]
['text':' If standalone/abbreviated is not available, use format/abbreviated ','line_number':2418,'multiline':True]
['text':' Stand-alone short weekdays -> fStandaloneShorterWeekdays (fall back to format abbreviated)','line_number':2423,'multiline':False]
['text':' If standalone/short is not available, use format/short ','line_number':2426,'multiline':True]
['text':' Format narrow weekdays -> fNarrowWeekdays','line_number':2431,'multiline':False]
['text':' Stand-alone narrow weekdays -> fStandaloneNarrowWeekdays','line_number':2435,'multiline':False]
['text':' If format/narrow not available, use standalone/narrow','line_number':2441,'multiline':False]
['text':' If standalone/narrow not available, use format/narrow','line_number':2444,'multiline':False]
['text':' If neither is available, use format/abbreviated','line_number':2447,'multiline':False]
['text':' Last resort fallback in case previous data wasn't loaded','line_number':2452,'multiline':False]
['text':' Handle the case in which there is no resource data present.','line_number':2457,'multiline':False]
['text':' We don't have to generate usable patterns in this situation;','line_number':2458,'multiline':False]
['text':' we just need to produce something that will be semi-intelligible','line_number':2459,'multiline':False]
['text':' in most locales.','line_number':2460,'multiline':False]
['text':'TODO(fabalbon): make sure we are storing las resort data for all fields in here.','line_number':2463,'multiline':False]
['text':' Close resources','line_number':2491,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':2504,'multiline':True]
['text':'eof','line_number':2506,'multiline':False]
