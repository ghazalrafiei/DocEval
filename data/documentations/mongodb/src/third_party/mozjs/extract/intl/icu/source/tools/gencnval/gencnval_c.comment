['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 1999-2016 International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  gencnval.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 1999nov05
*   created by: Markus W. Scherer
*
*   This program reads convrtrs.txt and writes a memory-mappable
*   converter name alias table to cnvalias.dat .
*
*   This program currently writes version 2.1 of the data format. See
*   ucnv_io.c for more details on the format. Note that version 2.1
*   is written in such a way that a 2.0 reader will be able to use it,
*   and a 2.1 reader will be able to read 2.0.
','line_number':3,'multiline':True]
['text':' ucnv_compareNames() ','line_number':29,'multiline':True]
['text':' TODO: Need to check alias name length is less than UCNV_MAX_CONVERTER_NAME_LENGTH ','line_number':44,'multiline':True]
['text':' STRING_STORE_SIZE + TAG_STORE_SIZE <= ((2^16 - 1) * 2)
 That is the maximum size for the string stores combined
 because the strings are indexed at 16-bit boundaries by a
 16-bit index, and there is only one section for the 
 strings.
 ','line_number':46,'multiline':True]
['text':' 130046 ','line_number':52,'multiline':True]
['text':' 1024 ','line_number':53,'multiline':True]
['text':' The combined tag and converter count can affect the number of lists
 created.  The size of all lists must be less than (2^17 - 1)
 because the lists are indexed as a 16-bit array with a 16-bit index.
 ','line_number':55,'multiline':True]
['text':' 63 ','line_number':59,'multiline':True]
['text':' 65535 ','line_number':61,'multiline':True]
['text':' The maximum number of aliases that a standard tag/converter combination can have.
 At this moment 6/18/2002, IANA has 12 names for ASCII. Don't go below 15 for
 this value. I don't recommend more than 31 for this value.
 ','line_number':63,'multiline':True]
['text':' 31 ','line_number':67,'multiline':True]
['text':' 32767 ','line_number':69,'multiline':True]
['text':' 65535 ','line_number':70,'multiline':True]
['text':' ICU alias table ','line_number':73,'multiline':True]
['text':' UDataInfo cf. udata.h ','line_number':79,'multiline':True]
['text':' dataFormat="CvAl" ','line_number':89,'multiline':True]
['text':' formatVersion ','line_number':90,'multiline':True]
['text':' dataVersion ','line_number':91,'multiline':True]
['text':' Index into stringStore ','line_number':105,'multiline':True]
['text':' Index into stringStore ','line_number':109,'multiline':True]
['text':' Total aliases in this column ','line_number':110,'multiline':True]
['text':' Index into tagStore ','line_number':120,'multiline':True]
['text':' Total aliases in this row ','line_number':121,'multiline':True]
['text':' Think of this as a 3D array. It's tagCount by converterCount by aliasCount ','line_number':125,'multiline':True]
['text':' Used for storing all aliases  ','line_number':129,'multiline':True]
['text':'static uint16_t duplicateKnownAliasesCount = 0;','line_number':132,'multiline':True]
['text':' Used for storing the lists section that point to aliases ','line_number':134,'multiline':True]
['text':' Were the standard tags declared before the aliases. ','line_number':138,'multiline':True]
['text':' containsCnvOptionInfo ','line_number':146,'multiline':True]
['text':'*
 * path to convrtrs.txt
 ','line_number':150,'multiline':True]
['text':' prototypes --------------------------------------------------------------- ','line_number':155,'multiline':True]
['text':'static void
addTaggedAlias(uint16_t tag, const char *alias, uint16_t converter);','line_number':187,'multiline':True]
['text':' -------------------------------------------------------------------------- ','line_number':193,'multiline':True]
['text':' Presumes that you used allocString() ','line_number':195,'multiline':True]
['text':' Presumes that you used allocString() ','line_number':199,'multiline':True]
['text':' preset then read command line options ','line_number':234,'multiline':True]
['text':' error handling, printing usage message ','line_number':238,'multiline':True]
['text':' create the output file ','line_number':301,'multiline':True]
['text':' write the table of aliases based on a tag/converter name combination ','line_number':309,'multiline':True]
['text':' finish ','line_number':312,'multiline':True]
['text':' clean up tags ','line_number':319,'multiline':True]
['text':' Add the empty tag, which is for untagged aliases ','line_number':341,'multiline':True]
['text':' read the list of aliases ','line_number':346,'multiline':True]
['text':' Read non-empty lines that don't start with a space character. ','line_number':350,'multiline':True]
['text':' Was the last line consumed ','line_number':383,'multiline':True]
['text':' This works almost like the Perl chomp.
 It removes the newlines, comments and trailing whitespace (not preceding whitespace).
','line_number':396,'multiline':True]
['text':' truncate at a newline or a comment ','line_number':404,'multiline':True]
['text':' skip leading white space ','line_number':426,'multiline':True]
['text':' There is no whitespace at the beginning anymore ','line_number':427,'multiline':True]
['text':'    while(line[pos]!=0 && isspace(line[pos])) {
        ++pos;
    }
','line_number':428,'multiline':True]
['text':' is there nothing on this line? ','line_number':433,'multiline':True]
['text':' get the converter name ','line_number':438,'multiline':True]
['text':' store the converter name ','line_number':445,'multiline':True]
['text':' add the converter to the converter table ','line_number':449,'multiline':True]
['text':' The name itself may be tagged, so let's added it to the aliases list properly ','line_number':452,'multiline':True]
['text':' get all the real aliases ','line_number':455,'multiline':True]
['text':' skip white space ','line_number':458,'multiline':True]
['text':' is there no more alias name on this line? ','line_number':463,'multiline':True]
['text':' get an alias name ','line_number':468,'multiline':True]
['text':' store the alias name ','line_number':475,'multiline':True]
['text':' add the converter as its own alias to the alias table ','line_number':478,'multiline':True]
['text':' add the alias/converter pair to the alias table ','line_number':488,'multiline':True]
['text':' addAlias(alias, 0, cnv, FALSE);','line_number':489,'multiline':True]
['text':' skip whitespace ','line_number':491,'multiline':True]
['text':' handle tags if they are present ','line_number':496,'multiline':True]
['text':' add the tag to the tag table ','line_number':507,'multiline':True]
['text':'        puts(tag);','line_number':541,'multiline':True]
['text':' we need to add this tag ','line_number':552,'multiline':True]
['text':' allocate a new entry in the tag table ','line_number':558,'multiline':True]
['text':' add the tag to the tag table ','line_number':571,'multiline':True]
['text':' The aliasList should be set to 0's already ','line_number':573,'multiline':True]
['text':'static void
addTaggedAlias(uint16_t tag, const char *alias, uint16_t converter) {
    tags[tag].aliases[converter] = alias;
}
','line_number':578,'multiline':True]
['text':' suppress compiler warnings about unused variable','line_number':586,'multiline':False]
['text':' Why were we called? ','line_number':598,'multiline':True]
['text':'        printf("Adding original tag \"%s\"\n", tag);','line_number':612,'multiline':True]
['text':' allocate a new entry in the tag table ','line_number':614,'multiline':True]
['text':' add the tag to the tag table ','line_number':617,'multiline':True]
['text':' The aliasList should already be set to 0's ','line_number':620,'multiline':True]
['text':' Get next tag ','line_number':622,'multiline':True]
['text':'    uint32_t idx; ','line_number':629,'multiline':True]
['text':' strict matching ','line_number':630,'multiline':True]
['text':'    for (idx = 0; idx < knownAliasesCount; idx++) {
        uint16_t num = GET_ALIAS_NUM(alias);
        if (knownAliases[idx] != num
            && uprv_strcmp(alias, GET_ALIAS_STR(knownAliases[idx])) == 0)
        {
            fprintf(stderr, "%s:%d: warning: duplicate alias %s and %s found\n", path, 
                lineNum, alias, GET_ALIAS_STR(knownAliases[idx]));
            duplicateKnownAliasesCount++;
            break;
        }
        else if (knownAliases[idx] != num
            && ucnv_compareNames(alias, GET_ALIAS_STR(knownAliases[idx])) == 0)
        {
            if (verbose) {
                fprintf(stderr, "%s:%d: information: duplicate alias %s and %s found\n", path, 
                    lineNum, alias, GET_ALIAS_STR(knownAliases[idx]));
            }
            duplicateKnownAliasesCount++;
            break;
        }
    }
','line_number':631,'multiline':True]
['text':' TODO: We could try to unlist exact duplicates. ','line_number':658,'multiline':True]
['text':'
@param standard When standard is 0, then it's the "empty" tag.
','line_number':662,'multiline':True]
['text':' Show this warning only once. All aliases are added to the "ALL" tag. ','line_number':692,'multiline':True]
['text':' Normally these option values are parsed at runtime, and they can
           be discarded when the alias is a default converter. Options should
           only be on a converter and not an alias. ','line_number':694,'multiline':True]
['text':' Check for duplicate aliases for this tag on all converters ','line_number':710,'multiline':True]
['text':'
                         * (alias, standard) duplicates are harmless if they map to the same converter.
                         * Only print a warning in verbose mode, or if the alias is a precise duplicate,
                         * not just a lenient-match duplicate.
                         ','line_number':718,'multiline':True]
['text':' Check for duplicate default aliases for this converter on all tags ','line_number':741,'multiline':True]
['text':' It's okay to have multiple standards prefer the same name ','line_number':742,'multiline':True]
['text':'        if (verbose && !dupFound) {
            for (idx = 0; idx < tagCount; idx++) {
                if (tags[idx].aliasList[converter].aliases) {
                    uint16_t aliasNum = tags[idx].aliasList[converter].aliases[0];
                    if (aliasNum
                        && ucnv_compareNames(alias, GET_ALIAS_STR(aliasNum)) == 0)
                    {
                        fprintf(stderr, "%s:%d: warning: duplicate alias %s found for converter %s and standard tag %s\n", path, 
                            lineNum, alias, GET_ALIAS_STR(converters[converter].converter), GET_TAG_STR(tags[standard].tag));
                        break;
                    }
                }
            }
        }','line_number':743,'multiline':True]
['text':'    aliasList->converter = converter;','line_number':781,'multiline':True]
['text':' One more to the column ','line_number':783,'multiline':True]
['text':' One more to the row ','line_number':784,'multiline':True]
['text':' resolve this alias based on the prioritization of the standard tags. ','line_number':811,'multiline':True]
['text':' Do the leftovers last, just in case ','line_number':828,'multiline':True]
['text':' There is no need to do the ALL tag ','line_number':829,'multiline':True]
['text':' The knownAliases should be sorted before calling this function ','line_number':849,'multiline':True]
['text':' duplicate found ','line_number':869,'multiline':True]
['text':' else ignore it ','line_number':887,'multiline':True]
['text':'printf("%s -> %s\n", GET_ALIAS_STR(knownAliases[idx]), GET_ALIAS_STR(converters[currConvNum].converter));','line_number':910,'multiline':True]
['text':' write into the array area a 1's based index. ','line_number':931,'multiline':True]
['text':'        printf("tag %s converter %s\n",
            GET_TAG_STR(tags[tag].tag),
            GET_ALIAS_STR(converters[converter].converter));','line_number':934,'multiline':True]
['text':'            printf("   %s\n",
                GET_ALIAS_STR(aliasList->aliases[aliasNum]));','line_number':939,'multiline':True]
['text':' Only show the warning when it's not the leftover tag. ','line_number':945,'multiline':True]
['text':' Array index starts at 1. aliasLists[0] is the size of the lists section. ','line_number':994,'multiline':True]
['text':' write the offsets of all the aliases lists in a 2D array, and create the lists. ','line_number':997,'multiline':True]
['text':' Write the size of the TOC ','line_number':1004,'multiline':True]
['text':' Write the sizes of each section ','line_number':1012,'multiline':True]
['text':' All sizes are the number of uint16_t units, not bytes ','line_number':1013,'multiline':True]
['text':' list of aliases ','line_number':1016,'multiline':True]
['text':' The preresolved form of mapping an untagged the alias to a converter ','line_number':1017,'multiline':True]
['text':' write the table of converters ','line_number':1026,'multiline':True]
['text':' Think of this as the column headers ','line_number':1027,'multiline':True]
['text':' write the table of tags ','line_number':1032,'multiline':True]
['text':' Think of this as the row headers ','line_number':1033,'multiline':True]
['text':' The empty tag is considered the leftover list, and put that at the end of the priority list. ','line_number':1037,'multiline':True]
['text':' Write the unique list of aliases ','line_number':1041,'multiline':True]
['text':' Write the unique list of aliases ','line_number':1044,'multiline':True]
['text':' Write the array to the lists ','line_number':1047,'multiline':True]
['text':' Now write the leftover part of the array for the EMPTY and ALL lists ','line_number':1049,'multiline':True]
['text':' Offset the next array to make the index start at 1. ','line_number':1052,'multiline':True]
['text':' Write the lists ','line_number':1055,'multiline':True]
['text':' Write any options for the alias table. ','line_number':1058,'multiline':True]
['text':' write the tags strings ','line_number':1061,'multiline':True]
['text':' write the aliases strings ','line_number':1064,'multiline':True]
['text':' write the normalized aliases strings ','line_number':1067,'multiline':True]
['text':' Write out the complete normalized array. ','line_number':1073,'multiline':True]
['text':'
     * add 1 for the terminating NUL
     * and round up (+1 &~1)
     * to keep the addresses on a 16-bit boundary
     ','line_number':1092,'multiline':True]
['text':' get the pointer and copy the string ','line_number':1104,'multiline':True]
['text':' NUL-terminate it ','line_number':1107,'multiline':True]
['text':' set the padding byte ','line_number':1109,'multiline':True]
['text':' check for invariant characters now that we have a NUL-terminated string for easy output ','line_number':1112,'multiline':True]
['text':' Names like IBM850 and ibm-850 need to be sorted together ','line_number':1124,'multiline':True]
['text':' Sort the shortest first ','line_number':1127,'multiline':True]
['text':'
 * Hey, Emacs, please set the following:
 *
 * Local Variables:
 * indent-tabs-mode: nil
 * End:
 *
 ','line_number':1133,'multiline':True]
