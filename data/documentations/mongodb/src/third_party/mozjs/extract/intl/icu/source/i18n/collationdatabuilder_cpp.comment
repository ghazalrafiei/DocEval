['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
* Copyright (C) 2012-2015, International Business Machines
* Corporation and others.  All Rights Reserved.
*******************************************************************************
* collationdatabuilder.cpp
*
* (replaced the former ucol_elm.cpp)
*
* created on: 2012apr01
* created by: Markus W. Scherer
','line_number':3,'multiline':True]
['text':'*
 * Build-time context and CE32 for a code point.
 * If a code point has contextual mappings, then the default (no-context) mapping
 * and all conditional mappings are stored in a singly-linked list
 * of ConditionalCE32, sorted by context strings.
 *
 * Context strings sort by prefix length, then by prefix, then by contraction suffix.
 * Context strings must be unique and in ascending order.
 ','line_number':44,'multiline':True]
['text':'*
     * "\0" for the first entry for any code point, with its default CE32.
     *
     * Otherwise one unit with the length of the prefix string,
     * then the prefix string, then the contraction suffix.
     ','line_number':66,'multiline':True]
['text':'*
     * CE32 for the code point and its context.
     * Can be special (e.g., for an expansion) but not contextual (prefix or contraction tag).
     ','line_number':73,'multiline':True]
['text':'*
     * Default CE32 for all contexts with this same prefix.
     * Initially NO_CE32. Set only while building runtime data structures,
     * and only on one of the nodes of a sub-list with the same prefix.
     ','line_number':78,'multiline':True]
['text':'*
     * CE32 for the built contexts.
     * When fetching CEs from the builder, the contexts are built into their runtime form
     * so that the normal collation implementation can process them.
     * The result is cached in the list head. It is reset when the contexts are modified.
     ','line_number':84,'multiline':True]
['text':'*
     * Index of the next ConditionalCE32.
     * Negative for the end of the list.
     ','line_number':91,'multiline':True]
['text':'*
 * Build-time collation element and character iterator.
 * Uses the runtime CollationIterator for fetching CEs for a string
 * but reads from the builder's unfinished data structures.
 * In particular, this class reads from the unfinished trie
 * and has to avoid CollationIterator::nextCE() and redirect other
 * calls to data->getCE32() and data->getCE32FromSupplementary().
 *
 * We do this so that we need not implement the collation algorithm
 * again for the builder and make it behave exactly like the runtime code.
 * That would be more difficult to test and maintain than this indirection.
 *
 * Some CE32 tags (for example, the DIGIT_TAG) do not occur in the builder data,
 * so the data accesses from those code paths need not be modified.
 *
 * This class iterates directly over whole code points
 * so that the CollationIterator does not need the finished trie
 * for handling the LEAD_SURROGATE_TAG.
 ','line_number':107,'multiline':True]
['text':'numeric=','line_number':155,'multiline':True]
['text':' Set all of the jamoCE32s[] to indirection CE32s.','line_number':159,'multiline':False]
['text':' Count across Jamo types.','line_number':160,'multiline':False]
['text':' Set the pointers each time, in case they changed due to reallocation.','line_number':173,'multiline':False]
['text':' Modified copy of CollationIterator::nextCE() and CollationIterator::nextCEFromCE32().','line_number':177,'multiline':False]
['text':' No need to keep all CEs in the iterator buffer.','line_number':183,'multiline':False]
['text':'forward=','line_number':195,'multiline':True]
['text':'errorCode','line_number':222,'multiline':True]
['text':'errorCode','line_number':232,'multiline':True]
['text':'errorCode','line_number':242,'multiline':True]
['text':'errorCode','line_number':247,'multiline':True]
['text':' TODO: ICU-21531 figure out why this happens.','line_number':267,'multiline':False]
['text':' Build the context-sensitive mappings into their runtime form and cache the result.','line_number':271,'multiline':False]
['text':' ------------------------------------------------------------------------- ***','line_number':284,'multiline':False]
['text':' Reserve the first CE32 for U+0000.','line_number':294,'multiline':False]
['text':' For a tailoring, the default is to fall back to the base.','line_number':318,'multiline':False]
['text':' Set the Latin-1 letters block so that it is allocated first in the data array,','line_number':321,'multiline':False]
['text':' to try to improve locality of reference when sorting Latin-1 text.','line_number':322,'multiline':False]
['text':' Do not use utrie2_setRange32() since that will not actually allocate blocks','line_number':323,'multiline':False]
['text':' that are filled with the default value.','line_number':324,'multiline':False]
['text':' ASCII (0..7F) is already preallocated anyway.','line_number':325,'multiline':False]
['text':' Hangul syllables are not tailorable (except via tailoring Jamos).','line_number':330,'multiline':False]
['text':' Always set the Hangul tag to help performance.','line_number':331,'multiline':False]
['text':' Do this here, rather than in buildMappings(),','line_number':332,'multiline':False]
['text':' so that we see the HANGUL_TAG in various assertions.','line_number':333,'multiline':False]
['text':' Copy the set contents but don't copy/clone the set as a whole because','line_number':337,'multiline':False]
['text':' that would copy the isFrozen state too.','line_number':338,'multiline':False]
['text':' TODO: Do we need to check what values are currently set for start..end?','line_number':350,'multiline':False]
['text':' An offset range is worth it only if we can achieve an overlap between','line_number':351,'multiline':False]
['text':' adjacent UTrie2 blocks of 32 code points each.','line_number':352,'multiline':False]
['text':' An offset CE is also a little more expensive to look up and compute','line_number':353,'multiline':False]
['text':' than a simple CE.','line_number':354,'multiline':False]
['text':' If the range spans at least three UTrie2 block boundaries (> 64 code points),','line_number':355,'multiline':False]
['text':' then we take it.','line_number':356,'multiline':False]
['text':' If the range spans one or two block boundaries and there are','line_number':357,'multiline':False]
['text':' at least 4 code points on either side, then we take it.','line_number':358,'multiline':False]
['text':' (We could additionally require a minimum range length of, say, 16.)','line_number':359,'multiline':False]
['text':' Short range: Set individual CE32s.','line_number':391,'multiline':False]
['text':' Keep parallel with CollationData::getSingleCE().','line_number':433,'multiline':False]
['text':' Fetch the non-numeric-collation CE32 and continue.','line_number':477,'multiline':False]
['text':' Fetch the normal ce32 for U+0000 and continue.','line_number':482,'multiline':False]
['text':' First tailoring for c.','line_number':559,'multiline':False]
['text':' If c has contextual base mappings or if we add a contextual mapping,','line_number':560,'multiline':False]
['text':' then copy the base mappings.','line_number':561,'multiline':False]
['text':' Otherwise we just override the base mapping.','line_number':562,'multiline':False]
['text':' No prefix, no contraction.','line_number':571,'multiline':False]
['text':' Replace the simple oldCE32 with a builder context CE32','line_number':582,'multiline':False]
['text':' pointing to a new ConditionalCE32 list head.','line_number':583,'multiline':False]
['text':' invariant: context > cond->context','line_number':599,'multiline':False]
['text':' Append a new ConditionalCE32 after cond.','line_number':602,'multiline':False]
['text':' Insert a new ConditionalCE32 between cond and nextCond.','line_number':611,'multiline':False]
['text':' Same context as before, overwrite its ce32.','line_number':618,'multiline':False]
['text':' Impossible case bits 11 mark special CE32s.','line_number':633,'multiline':False]
['text':' normal form ppppsstt','line_number':635,'multiline':False]
['text':' long-primary form ppppppC1','line_number':638,'multiline':False]
['text':' long-secondary form ssssttC2','line_number':641,'multiline':False]
['text':' Try to encode one CE as one CE32.','line_number':649,'multiline':False]
['text':' Convenience: We cannot map to nothing, but we can map to a completely ignorable CE.','line_number':674,'multiline':False]
['text':' Do this here so that callers need not do it.','line_number':675,'multiline':False]
['text':' Try to encode two CEs as one CE32.','line_number':680,'multiline':False]
['text':' Latin mini expansion','line_number':687,'multiline':False]
['text':' Try to encode two or more CEs as CE32s.','line_number':696,'multiline':False]
['text':' See if this sequence of CEs has already been stored.','line_number':712,'multiline':False]
['text':' Store the new sequence.','line_number':730,'multiline':False]
['text':' See if this sequence of CE32s has already been stored.','line_number':746,'multiline':False]
['text':' Store the new sequence.','line_number':764,'multiline':False]
['text':' copy as is','line_number':785,'multiline':False]
['text':' Flatten prefixes and nested suffixes (contractions)','line_number':801,'multiline':False]
['text':' into a linear list of ConditionalCE32.','line_number':802,'multiline':False]
['text':' Default if no prefix match.','line_number':804,'multiline':False]
['text':' the last ConditionalCE32 so far','line_number':818,'multiline':False]
['text':' Default if no suffix match.','line_number':841,'multiline':False]
['text':' We forbid tailoring of Hangul syllables.','line_number':852,'multiline':False]
['text':' require ce32 == base->getFinalCE32(ce32)','line_number':861,'multiline':False]
['text':' No match on the single code point.','line_number':873,'multiline':False]
['text':' We are underneath a prefix, and the default mapping is just','line_number':874,'multiline':False]
['text':' a fallback to the mappings for a shorter prefix.','line_number':875,'multiline':False]
['text':' Default if no suffix match.','line_number':879,'multiline':False]
['text':' No need to update the unsafeBackwardSet because the tailoring set','line_number':894,'multiline':False]
['text':' is already a copy of the base set.','line_number':895,'multiline':False]
['text':' Inspect the source CE32s. Just copy them if none are modified.','line_number':931,'multiline':False]
['text':' Otherwise copy to modifiedCEs, with modifications.','line_number':932,'multiline':False]
['text':' Inspect the source CEs. Just copy them if none are modified.','line_number':962,'multiline':False]
['text':' Otherwise copy to modifiedCEs, with modifications.','line_number':963,'multiline':False]
['text':' Copy the list of ConditionalCE32.','line_number':988,'multiline':False]
['text':' Just copy long CEs and Latin mini expansions (and other expected values) as is,','line_number':1004,'multiline':False]
['text':' assuming that the modifier would not modify them.','line_number':1005,'multiline':False]
['text':' Update the contextChars and the unsafeBackwardSet while copying,','line_number':1044,'multiline':False]
['text':' in case a character had conditional mappings in the source builder','line_number':1045,'multiline':False]
['text':' and they were removed later.','line_number':1046,'multiline':False]
['text':' without context ','line_number':1076,'multiline':True]
['text':' Simply abandon the list of ConditionalCE32.','line_number':1081,'multiline':False]
['text':' The caller will copy this builder in the end,','line_number':1082,'multiline':False]
['text':' eliminating unreachable data.','line_number':1083,'multiline':False]
['text':' always set jamoCE32s in the base data','line_number':1094,'multiline':False]
['text':' Count across Jamo types.','line_number':1096,'multiline':False]
['text':' TODO: Try to prevent [optimize [Jamo]] from counting as anyJamoAssigned.','line_number':1101,'multiline':False]
['text':' (As of CLDR 24 [2013] the Korean tailoring does not optimize conjoining Jamo.)','line_number':1102,'multiline':False]
['text':' Copy the ce32 as-is.','line_number':1112,'multiline':False]
['text':' Defer copying until we know if anyJamoAssigned.','line_number':1119,'multiline':False]
['text':' An unassigned Jamo should only occur in tests with incomplete bases.','line_number':1125,'multiline':False]
['text':'withContext=','line_number':1151,'multiline':True]
['text':'start','line_number':1184,'multiline':True]
['text':'end','line_number':1184,'multiline':True]
['text':' Small optimization: Use a bit in the Hangul ce32','line_number':1248,'multiline':False]
['text':' to indicate that none of the Jamo CE32s are isSpecialCE32()','line_number':1249,'multiline':False]
['text':' (as it should be in the root collator).','line_number':1250,'multiline':False]
['text':' It allows CollationIterator to avoid recursive function calls and per-Jamo tests.','line_number':1251,'multiline':False]
['text':' In order to still have good trie compression and keep this code simple,','line_number':1252,'multiline':False]
['text':' we only set this flag if a whole block of 588 Hangul syllables starting with','line_number':1253,'multiline':False]
['text':' a common leading consonant (Jamo L) has this property.','line_number':1254,'multiline':False]
['text':' iterate over the Jamo L','line_number':1264,'multiline':False]
['text':' Copy the Hangul CE32s from the base in blocks per Jamo L,','line_number':1274,'multiline':False]
['text':' assuming that HANGUL_NO_SPECIAL_JAMO is set or not set for whole blocks.','line_number':1275,'multiline':False]
['text':' For U+0000, move its normal ce32 into CE32s[0] and set U0000_TAG.','line_number':1288,'multiline':False]
['text':' Mark each lead surrogate as "unsafe"','line_number':1295,'multiline':False]
['text':' if any of its 1024 associated supplementary code points is "unsafe".','line_number':1296,'multiline':False]
['text':' Ignore abandoned lists and the cached builtCE32,','line_number':1338,'multiline':False]
['text':' and build all contexts from scratch.','line_number':1339,'multiline':False]
['text':' Impossible: No context data for c in contextChars.','line_number':1347,'multiline':False]
['text':' The list head must have no context.','line_number':1360,'multiline':False]
['text':' The list head must be followed by one or more nodes that all do have context.','line_number':1362,'multiline':False]
['text':' After the list head, the prefix or suffix can be empty, but not both.','line_number':1367,'multiline':False]
['text':' Collect all contraction suffixes for one prefix.','line_number':1371,'multiline':False]
['text':' == prefix.length()','line_number':1379,'multiline':False]
['text':' One prefix without contraction suffix.','line_number':1381,'multiline':False]
['text':' Build the contractions trie.','line_number':1386,'multiline':False]
['text':' Entry for an empty suffix, to be stored before the trie.','line_number':1388,'multiline':False]
['text':' There is a mapping for the prefix and the single character c. (p|c)','line_number':1392,'multiline':False]
['text':' If no other suffix matches, then we return this value.','line_number':1393,'multiline':False]
['text':' There is no mapping for the prefix and just the single character.','line_number':1397,'multiline':False]
['text':' (There is no p|c, only p|cd, p|ce etc.)','line_number':1398,'multiline':False]
['text':' When the prefix matches but none of the prefix-specific suffixes,','line_number':1400,'multiline':False]
['text':' then we fall back to the mappings with the next-longest prefix,','line_number':1401,'multiline':False]
['text':' and ultimately to mappings with no prefix.','line_number':1402,'multiline':False]
['text':' Each fallback might be another set of contractions.','line_number':1403,'multiline':False]
['text':' For example, if there are mappings for ch, p|cd, p|ce, but not for p|c,','line_number':1404,'multiline':False]
['text':' then in text "pch" we find the ch contraction.','line_number':1405,'multiline':False]
['text':' Optimization: Set a flag when','line_number':1416,'multiline':False]
['text':' the first character of every contraction suffix has lccc!=0.','line_number':1417,'multiline':False]
['text':' Short-circuits contraction matching when a normal letter follows.','line_number':1418,'multiline':False]
['text':' Add all of the non-empty suffixes into the contraction trie.','line_number':1420,'multiline':False]
['text':' The last suffix character has lccc!=0, allowing for discontiguous contractions.','line_number':1429,'multiline':False]
['text':' No non-empty prefixes, only contractions.','line_number':1448,'multiline':False]
['text':' Remove the length unit.','line_number':1452,'multiline':False]
['text':' Same fast Latin table as in the base, use that one instead.','line_number':1499,'multiline':False]
['text':' !UCONFIG_NO_COLLATION','line_number':1540,'multiline':False]
