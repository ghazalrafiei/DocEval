['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2000-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  uparse.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2000apr18
*   created by: Markus W. Scherer
*
*   This file provides a parser for files that are delimited by one single
*   character like ';' or TAB. Example: the Unicode Character Properties files
*   like UnicodeData.txt are semicolon-delimited.
','line_number':3,'multiline':True]
['text':'
 * If the string starts with # @missing: then return the pointer to the
 * following non-whitespace character.
 * Otherwise return the original pointer.
 * Unicode 5.0 adds such lines in some data files to document
 * default property values.
 * Poor man's regex for variable amounts of white space.
 ','line_number':51,'multiline':True]
['text':' remove trailing newline characters ','line_number':105,'multiline':True]
['text':'
         * detect a line with # @missing:
         * start parsing after that, or else from the beginning of the line
         * set the default warning for @missing lines
         ','line_number':108,'multiline':True]
['text':' skip this line if it is empty or a comment ','line_number':120,'multiline':True]
['text':' remove in-line comments ','line_number':125,'multiline':True]
['text':' get white space before the pound sign ','line_number':128,'multiline':True]
['text':' truncate the line ','line_number':133,'multiline':True]
['text':' skip lines with only whitespace ','line_number':137,'multiline':True]
['text':' for each field, call the corresponding field function ','line_number':142,'multiline':True]
['text':' set the limit pointer of this field ','line_number':144,'multiline':True]
['text':' set the field start and limit in the fields array ','line_number':150,'multiline':True]
['text':' set start to the beginning of the next field, if any ','line_number':154,'multiline':True]
['text':' too few fields? ','line_number':166,'multiline':True]
['text':' call the field function ','line_number':171,'multiline':True]
['text':'
 * parse a list of code points
 * store them as a UTF-32 string in dest[destCapacity]
 * return the number of code points
 ','line_number':183,'multiline':True]
['text':' read one code point ','line_number':211,'multiline':True]
['text':' append it to the destination array ','line_number':218,'multiline':True]
['text':' go to the following characters ','line_number':225,'multiline':True]
['text':'
 * parse a list of code points
 * store them as a string in dest[destCapacity]
 * set the first code point in *pFirst
 * @return The length of the string in numbers of UChars.
 ','line_number':230,'multiline':True]
['text':' read one code point ','line_number':271,'multiline':True]
['text':' store the first code point ','line_number':278,'multiline':True]
['text':' append it to the destination array ','line_number':284,'multiline':True]
['text':' go to the following characters ','line_number':291,'multiline':True]
['text':' read a range like start or start..end ','line_number':296,'multiline':True]
['text':' read the start code point ','line_number':313,'multiline':True]
['text':' is there a "..end"? ','line_number':322,'multiline':True]
['text':' read the end code point ','line_number':330,'multiline':True]
['text':' is this a valid range? ','line_number':338,'multiline':True]
