['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' Copyright (C) 2009-2012, International Business Machines','line_number':3,'multiline':False]
['text':' Corporation and others. All Rights Reserved.','line_number':4,'multiline':False]
['text':'','line_number':5,'multiline':False]
['text':' Copyright 2007 Google Inc. All Rights Reserved.','line_number':6,'multiline':False]
['text':' Author: sanjay@google.com (Sanjay Ghemawat)','line_number':7,'multiline':False]
['text':'','line_number':8,'multiline':False]
['text':' Abstract interface that consumes a sequence of bytes (ByteSink).','line_number':9,'multiline':False]
['text':'','line_number':10,'multiline':False]
['text':' Used so that we can write a single piece of code that can operate','line_number':11,'multiline':False]
['text':' on a variety of output string types.','line_number':12,'multiline':False]
['text':'','line_number':13,'multiline':False]
['text':' Various implementations of this interface are provided:','line_number':14,'multiline':False]
['text':'   ByteSink:','line_number':15,'multiline':False]
['text':'      CheckedArrayByteSink    Write to a flat array, with bounds checking','line_number':16,'multiline':False]
['text':'      StringByteSink          Write to an STL string','line_number':17,'multiline':False]
['text':' This code is a contribution of Google code, and the style used here is','line_number':19,'multiline':False]
['text':' a compromise between the original Google code and the ICU coding guidelines.','line_number':20,'multiline':False]
['text':' For example, data types are ICU-ified (size_t,int->int32_t),','line_number':21,'multiline':False]
['text':' and API comments doxygen-ified, but function names and behavior are','line_number':22,'multiline':False]
['text':' as in the original, if possible.','line_number':23,'multiline':False]
['text':' Assertion-style error handling, not available in ICU, was changed to','line_number':24,'multiline':False]
['text':' parameter "pinning" similar to UnicodeString.','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' In addition, this is only a partial port of the original Google code,','line_number':27,'multiline':False]
['text':' limited to what was needed so far. The (nearly) complete original code','line_number':28,'multiline':False]
['text':' is in the ICU svn repository at icuhtml/trunk/design/strings/contrib','line_number':29,'multiline':False]
['text':' (see ICU ticket 6765, r25517).','line_number':30,'multiline':False]
['text':'*
 * \file
 * \brief C++ API: Interface for writing bytes, and implementation classes.
 ','line_number':35,'multiline':True]
['text':'*
 * A ByteSink can be filled with bytes.
 * @stable ICU 4.2
 ','line_number':49,'multiline':True]
['text':'*
   * Default constructor.
   * @stable ICU 4.2
   ','line_number':55,'multiline':True]
['text':'*
   * Virtual destructor.
   * @stable ICU 4.2
   ','line_number':60,'multiline':True]
['text':'*
   * Append "bytes[0,n-1]" to this.
   * @param bytes the pointer to the bytes
   * @param n the number of bytes; must be non-negative
   * @stable ICU 4.2
   ','line_number':66,'multiline':True]
['text':'*
   * Appends n bytes to this. Same as Append().
   * Call AppendU8() with u8"string literals" which are const char * in C++11
   * but const char8_t * in C++20.
   * If the compiler does support char8_t as a distinct type,
   * then an AppendU8() overload for that is defined and will be chosen.
   *
   * @param bytes the pointer to the bytes
   * @param n the number of bytes; must be non-negative
   * @stable ICU 67
   ','line_number':74,'multiline':True]
['text':'*
   * Appends n bytes to this. Same as Append() but for a const char8_t * pointer.
   * Call AppendU8() with u8"string literals" which are const char * in C++11
   * but const char8_t * in C++20.
   * If the compiler does support char8_t as a distinct type,
   * then this AppendU8() overload for that is defined and will be chosen.
   *
   * @param bytes the pointer to the bytes
   * @param n the number of bytes; must be non-negative
   * @stable ICU 67
   ','line_number':90,'multiline':True]
['text':'*
   * Returns a writable buffer for appending and writes the buffer's capacity to
   * *result_capacity. Guarantees *result_capacity>=min_capacity.
   * May return a pointer to the caller-owned scratch buffer which must have
   * scratch_capacity>=min_capacity.
   * The returned buffer is only valid until the next operation
   * on this ByteSink.
   *
   * After writing at most *result_capacity bytes, call Append() with the
   * pointer returned from this function and the number of bytes written.
   * Many Append() implementations will avoid copying bytes if this function
   * returned an internal buffer.
   *
   * Partial usage example:
   *  int32_t capacity;
   *  char* buffer = sink->GetAppendBuffer(..., &capacity);
   *  ... Write n bytes into buffer, with n <= capacity.
   *  sink->Append(buffer, n);
   * In many implementations, that call to Append will avoid copying bytes.
   *
   * If the ByteSink allocates or reallocates an internal buffer, it should use
   * the desired_capacity_hint if appropriate.
   * If a caller cannot provide a reasonable guess at the desired capacity,
   * it should pass desired_capacity_hint=0.
   *
   * If a non-scratch buffer is returned, the caller may only pass
   * a prefix to it to Append().
   * That is, it is not correct to pass an interior pointer to Append().
   *
   * The default implementation always returns the scratch buffer.
   *
   * @param min_capacity required minimum capacity of the returned buffer;
   *                     must be non-negative
   * @param desired_capacity_hint desired capacity of the returned buffer;
   *                              must be non-negative
   * @param scratch default caller-owned buffer
   * @param scratch_capacity capacity of the scratch buffer
   * @param result_capacity pointer to an integer which will be set to the
   *                        capacity of the returned buffer
   * @return a buffer with *result_capacity>=min_capacity
   * @stable ICU 4.2
   ','line_number':106,'multiline':True]
['text':'*
   * Flush internal buffers.
   * Some byte sinks use internal buffers or provide buffering
   * and require calling Flush() at the end of the stream.
   * The ByteSink should be ready for further Append() calls after Flush().
   * The default implementation of Flush() does nothing.
   * @stable ICU 4.2
   ','line_number':153,'multiline':True]
['text':' -------------------------------------------------------------','line_number':168,'multiline':False]
['text':' Some standard implementations','line_number':169,'multiline':False]
['text':'* 
 * Implementation of ByteSink that writes to a flat byte array,
 * with bounds-checking:
 * This sink will not write more than capacity bytes to outbuf.
 * If more than capacity bytes are Append()ed, then excess bytes are ignored,
 * and Overflowed() will return true.
 * Overflow does not cause a runtime error.
 * @stable ICU 4.2
 ','line_number':171,'multiline':True]
['text':'*
   * Constructs a ByteSink that will write to outbuf[0..capacity-1].
   * @param outbuf buffer to write to
   * @param capacity size of the buffer
   * @stable ICU 4.2
   ','line_number':182,'multiline':True]
['text':'*
   * Destructor.
   * @stable ICU 4.2
   ','line_number':189,'multiline':True]
['text':'*
   * Returns the sink to its original state, without modifying the buffer.
   * Useful for reusing both the buffer and the sink for multiple streams.
   * Resets the state to NumberOfBytesWritten()=NumberOfBytesAppended()=0
   * and Overflowed()=false.
   * @return *this
   * @stable ICU 4.6
   ','line_number':194,'multiline':True]
['text':'*
   * Append "bytes[0,n-1]" to this.
   * @param bytes the pointer to the bytes
   * @param n the number of bytes; must be non-negative
   * @stable ICU 4.2
   ','line_number':203,'multiline':True]
['text':'*
   * Returns a writable buffer for appending and writes the buffer's capacity to
   * *result_capacity. For details see the base class documentation.
   * @param min_capacity required minimum capacity of the returned buffer;
   *                     must be non-negative
   * @param desired_capacity_hint desired capacity of the returned buffer;
   *                              must be non-negative
   * @param scratch default caller-owned buffer
   * @param scratch_capacity capacity of the scratch buffer
   * @param result_capacity pointer to an integer which will be set to the
   *                        capacity of the returned buffer
   * @return a buffer with *result_capacity>=min_capacity
   * @stable ICU 4.2
   ','line_number':210,'multiline':True]
['text':'*
   * Returns the number of bytes actually written to the sink.
   * @return number of bytes written to the buffer
   * @stable ICU 4.2
   ','line_number':228,'multiline':True]
['text':'*
   * Returns true if any bytes were discarded, i.e., if there was an
   * attempt to write more than 'capacity' bytes.
   * @return true if more than 'capacity' bytes were Append()ed
   * @stable ICU 4.2
   ','line_number':234,'multiline':True]
['text':'*
   * Returns the number of bytes appended to the sink.
   * If Overflowed() then NumberOfBytesAppended()>NumberOfBytesWritten()
   * else they return the same number.
   * @return number of bytes written to the buffer
   * @stable ICU 4.6
   ','line_number':241,'multiline':True]
['text':'* 
 * Implementation of ByteSink that writes to a "string".
 * The StringClass is usually instantiated with a std::string.
 * @stable ICU 4.2
 ','line_number':261,'multiline':True]
['text':'*
   * Constructs a ByteSink that will append bytes to the dest string.
   * @param dest pointer to string object to append to
   * @stable ICU 4.2
   ','line_number':269,'multiline':True]
['text':'*
   * Constructs a ByteSink that reserves append capacity and will append bytes to the dest string.
   * 
   * @param dest pointer to string object to append to
   * @param initialAppendCapacity capacity beyond dest->length() to be reserve()d
   * @stable ICU 60
   ','line_number':275,'multiline':True]
['text':'*
   * Append "bytes[0,n-1]" to this.
   * @param data the pointer to the bytes
   * @param n the number of bytes; must be non-negative
   * @stable ICU 4.2
   ','line_number':288,'multiline':True]
['text':' U_SHOW_CPLUSPLUS_API ','line_number':305,'multiline':True]
['text':' __BYTESTREAM_H__','line_number':307,'multiline':False]
