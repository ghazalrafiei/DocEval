['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*
*   Copyright (C) 2001-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  utrie2.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2008aug16 (starting from a copy of utrie.c)
*   created by: Markus W. Scherer
*
*   This is a common implementation of a Unicode trie.
*   It is a kind of compressed, serializable table of 16- or 32-bit values associated with
*   Unicode code points (0..0x10ffff).
*   This is the second common version of a Unicode trie (hence the name UTrie2).
*   See utrie2.h for a comparison.
*
*   This file contains only the runtime and enumeration code, for read-only access.
*   See utrie2_builder.c for the builder code.
','line_number':3,'multiline':True]
['text':' Public UTrie2 API implementation ----------------------------------------- ','line_number':39,'multiline':True]
['text':' support 64-bit pointers by avoiding cast of arbitrary difference ','line_number':102,'multiline':True]
['text':' support 64-bit pointers by avoiding cast of arbitrary difference ','line_number':116,'multiline':True]
['text':' number of bytes read backward from src ','line_number':124,'multiline':True]
['text':' enough data for a trie header? ','line_number':150,'multiline':True]
['text':' check the signature ','line_number':156,'multiline':True]
['text':' get the options ','line_number':163,'multiline':True]
['text':' get the length values and offsets ','line_number':169,'multiline':True]
['text':' calculate the actual length ','line_number':182,'multiline':True]
['text':' not enough bytes ','line_number':190,'multiline':True]
['text':' allocate the trie ','line_number':194,'multiline':True]
['text':' set the pointers to its index and data arrays ','line_number':208,'multiline':True]
['text':' get the data ','line_number':213,'multiline':True]
['text':' >0 if the data is moved to the end of the index array ','line_number':247,'multiline':True]
['text':' calculate the total length of the dummy trie data ','line_number':258,'multiline':True]
['text':' allocate the trie ','line_number':268,'multiline':True]
['text':' set the UTrie2 fields ','line_number':284,'multiline':True]
['text':' set the header fields ','line_number':303,'multiline':True]
['text':' "Tri2" ','line_number':306,'multiline':True]
['text':' fill the index and data arrays ','line_number':315,'multiline':True]
['text':' write the index-2 array values shifted right by UTRIE2_INDEX_SHIFT ','line_number':319,'multiline':True]
['text':' null data block ','line_number':321,'multiline':True]
['text':' write UTF-8 2-byte index-2 values, not right-shifted ','line_number':324,'multiline':True]
['text':' C0..C1 ','line_number':325,'multiline':True]
['text':' C2..DF ','line_number':328,'multiline':True]
['text':' write the 16/32-bit data array ','line_number':332,'multiline':True]
['text':' write 16-bit data values ','line_number':335,'multiline':True]
['text':' highValue and reserved values ','line_number':344,'multiline':True]
['text':' write 32-bit data values ','line_number':350,'multiline':True]
['text':' highValue and reserved values ','line_number':360,'multiline':True]
['text':' argument check ','line_number':399,'multiline':True]
['text':' enumeration -------------------------------------------------------------- ','line_number':419,'multiline':True]
['text':' default UTrie2EnumValue() returns the input value itself ','line_number':423,'multiline':True]
['text':'context','line_number':425,'multiline':True]
['text':'*
 * Enumerate all ranges of code points with the same relevant values.
 * The values are transformed from the raw trie entries by the enumValue function.
 *
 * Currently requires start<limit and both start and limit must be multiples
 * of UTRIE2_DATA_BLOCK_LENGTH.
 *
 * Optimizations:
 * - Skip a whole block if we know that it is filled with a single value,
 *   and it is the same as we visited just before.
 * - Handle the null block specially because we know a priori that it is filled
 *   with a single value.
 ','line_number':429,'multiline':True]
['text':' frozen trie ','line_number':461,'multiline':True]
['text':' the following code assumes trie->newTrie is not NULL when idx is NULL ','line_number':463,'multiline':True]
['text':' unfrozen, mutable trie ','line_number':469,'multiline':True]
['text':' the following code assumes idx is not NULL when data32 is NULL ','line_number':472,'multiline':True]
['text':' get the enumeration value that corresponds to an initial-value trie data entry ','line_number':480,'multiline':True]
['text':' set variables for previous range ','line_number':483,'multiline':True]
['text':' enumerate index-2 blocks ','line_number':489,'multiline':True]
['text':' Code point limit for iterating inside this i2Block. ','line_number':491,'multiline':True]
['text':'
                 * Enumerate values for lead surrogate code points, not code units:
                 * This special block has half the normal length.
                 ','line_number':500,'multiline':True]
['text':'
                 * Switch back to the normal part of the index-2 table.
                 * Enumerate the second half of the surrogates block.
                 ','line_number':507,'multiline':True]
['text':' supplementary code points ','line_number':515,'multiline':True]
['text':'
                 * The index-2 block is the same as the previous one, and filled with prevValue.
                 * Only possible for supplementary code points because the linear-BMP index-2
                 * table creates unique i2Block values.
                 ','line_number':523,'multiline':True]
['text':' this is the null index-2 block ','line_number':534,'multiline':True]
['text':' enumerate data blocks for one index-2 block ','line_number':545,'multiline':True]
['text':' the block is the same as the previous one, and filled with prevValue ','line_number':560,'multiline':True]
['text':' this is the null data block ','line_number':566,'multiline':True]
['text':' could be higher if in the index2NullOffset ','line_number':593,'multiline':True]
['text':' c==highStart<limit ','line_number':595,'multiline':True]
['text':' deliver last range ','line_number':616,'multiline':True]
['text':' start code point ','line_number':633,'multiline':True]
['text':' C++ convenience wrappers ------------------------------------------------- ','line_number':637,'multiline':True]
