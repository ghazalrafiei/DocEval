['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 ********************************************************************************
 * Copyright (C) 2003-2013, International Business Machines Corporation
 * and others. All Rights Reserved.
 ********************************************************************************
 *
 * File BUDDHCAL.H
 *
 * Modification History:
 *
 *   Date        Name        Description
 *   05/13/2003  srl          copied from gregocal.h
 *   06/29/2007  srl          copied from buddhcal.h
 ********************************************************************************
 ','line_number':3,'multiline':True]
['text':'*
 * Concrete class which provides the Taiwan calendar.
 * <P>
 * <code>TaiwanCalendar</code> is a subclass of <code>GregorianCalendar</code>
 * that numbers years since 1912
 * <p>
 * The Taiwan calendar is identical to the Gregorian calendar in all respects
 * except for the year and era.  Years are numbered since 1912 AD (Gregorian),
 * so that 1912 AD (Gregorian) is equivalent to 1 MINGUO (Minguo Era) and 1998 AD is 87 MINGUO.
 * <p>
 * The Taiwan Calendar has two eras: <code>BEFORE_MINGUO</code> and <code>MINGUO</code>.
 * <p>
 * @internal
 ','line_number':31,'multiline':True]
['text':'*
     * Useful constants for TaiwanCalendar.  Only one Era.
     * @internal
     ','line_number':48,'multiline':True]
['text':'*
     * Constructs a TaiwanCalendar based on the current time in the default time zone
     * with the given locale.
     *
     * @param aLocale  The given locale.
     * @param success  Indicates the status of TaiwanCalendar object construction.
     *                 Returns U_ZERO_ERROR if constructed successfully.
     * @internal
     ','line_number':57,'multiline':True]
['text':'*
     * Destructor
     * @internal
     ','line_number':69,'multiline':True]
['text':'*
     * Copy constructor
     * @param source    the object to be copied.
     * @internal
     ','line_number':75,'multiline':True]
['text':'*
     * Default assignment operator
     * @param right    the object to be copied.
     * @internal
     ','line_number':82,'multiline':True]
['text':'*
     * Create and return a polymorphic copy of this calendar.
     * @return    return a polymorphic copy of this calendar.
     * @internal
     ','line_number':89,'multiline':True]
['text':'*
     * Override Calendar Returns a unique class ID POLYMORPHICALLY. Pure virtual
     * override. This method is to implement a simple version of RTTI, since not all C++
     * compilers support genuine RTTI. Polymorphic operator==() and clone() methods call
     * this method.
     *
     * @return   The class ID for this object. All objects of a given class have the
     *           same class ID. Objects of other classes have different class IDs.
     * @internal
     ','line_number':97,'multiline':True]
['text':'*
     * Return the class ID for this class. This is useful only for comparing to a return
     * value from getDynamicClassID(). For example:
     *
     *      Base* polymorphic_pointer = createPolymorphicObject();
     *      if (polymorphic_pointer->getDynamicClassID() ==
     *          Derived::getStaticClassID()) ...
     *
     * @return   The class ID for all objects of this class.
     * @internal
     ','line_number':109,'multiline':True]
['text':'*
     * return the calendar type, "Taiwan".
     *
     * @return calendar type
     * @internal
     ','line_number':122,'multiline':True]
['text':' default constructor not implemented','line_number':131,'multiline':False]
['text':'*
     * Return the extended year defined by the current fields.  This will
     * use the UCAL_EXTENDED_YEAR field or the UCAL_YEAR and supra-year fields (such
     * as UCAL_ERA) specific to the calendar system, depending on which set of
     * fields is newer.
     * @return the extended year
     * @internal
     ','line_number':134,'multiline':True]
['text':'*
     * Subclasses may override this method to compute several fields
     * specific to each calendar system.  
     * @internal
     ','line_number':143,'multiline':True]
['text':'*
     * Subclass API for defining limits of different types.
     * @param field one of the field numbers
     * @param limitType one of <code>MINIMUM</code>, <code>GREATEST_MINIMUM</code>,
     * <code>LEAST_MAXIMUM</code>, or <code>MAXIMUM</code>
     * @internal
     ','line_number':149,'multiline':True]
['text':'*
     * Returns true because the Taiwan Calendar does have a default century
     * @internal
     ','line_number':158,'multiline':True]
['text':'*
     * Returns the date of the start of the default century
     * @return start of century - in milliseconds since epoch, 1970
     * @internal
     ','line_number':164,'multiline':True]
['text':'*
     * Returns the year in which the default century begins
     * @internal
     ','line_number':171,'multiline':True]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':180,'multiline':True]
['text':' _TAIWNCAL','line_number':182,'multiline':False]
['text':'eof','line_number':183,'multiline':False]
