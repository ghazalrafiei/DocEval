['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
* Copyright (C) 2003-2015, International Business Machines Corporation
* and others. All Rights Reserved.
******************************************************************************
*
* File ISLAMCAL.H
*
* Modification History:
*
*   Date        Name        Description
*   10/14/2003  srl         ported from java IslamicCalendar
*****************************************************************************
','line_number':3,'multiline':True]
['text':' Math','line_number':24,'multiline':False]
['text':' CalendarAstronomer','line_number':25,'multiline':False]
['text':' 7/16/622 AD 00:00','line_number':30,'multiline':False]
['text':' Debugging','line_number':32,'multiline':False]
['text':' must use double parens, i.e.:  U_DEBUG_ISLAMCAL_MSG(("four is: %d",4));','line_number':48,'multiline':False]
['text':' --- The cache --','line_number':55,'multiline':False]
['text':' cache of months','line_number':56,'multiline':False]
['text':' Implementation of the IslamicCalendar class','line_number':76,'multiline':False]
['text':'*
 * Friday EPOC
 ','line_number':78,'multiline':True]
['text':' CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)','line_number':81,'multiline':False]
['text':'*
  * Thursday EPOC
  ','line_number':83,'multiline':True]
['text':' CE 622 July 15 Thursday (Julian calendar)','line_number':86,'multiline':False]
['text':'* 1300 -1302 */ "1010 1010 1010", "1101 0101 0100", "1110 1100 1001",','line_number':93,'multiline':False]
['text':'* 1303 -1307 */ "0110 1101 0100", "0110 1110 1010", "0011 0110 1100", "1010 1010 1101", "0101 0101 0101",','line_number':95,'multiline':False]
['text':'* 1308 -1312 */ "0110 1010 1001", "0111 1001 0010", "1011 1010 1001", "0101 1101 0100", "1010 1101 1010",','line_number':97,'multiline':False]
['text':'* 1313 -1317 */ "0101 0101 1100", "1101 0010 1101", "0110 1001 0101", "0111 0100 1010", "1011 0101 0100",','line_number':99,'multiline':False]
['text':'* 1318 -1322 */ "1011 0110 1010", "0101 1010 1101", "0100 1010 1110", "1010 0100 1111", "0101 0001 0111",','line_number':101,'multiline':False]
['text':'* 1323 -1327 */ "0110 1000 1011", "0110 1010 0101", "1010 1101 0101", "0010 1101 0110", "1001 0101 1011",','line_number':103,'multiline':False]
['text':'* 1328 -1332 */ "0100 1001 1101", "1010 0100 1101", "1101 0010 0110", "1101 1001 0101", "0101 1010 1100",','line_number':105,'multiline':False]
['text':'* 1333 -1337 */ "1001 1011 0110", "0010 1011 1010", "1010 0101 1011", "0101 0010 1011", "1010 1001 0101",','line_number':107,'multiline':False]
['text':'* 1338 -1342 */ "0110 1100 1010", "1010 1110 1001", "0010 1111 0100", "1001 0111 0110", "0010 1011 0110",','line_number':109,'multiline':False]
['text':'* 1343 -1347 */ "1001 0101 0110", "1010 1100 1010", "1011 1010 0100", "1011 1101 0010", "0101 1101 1001",','line_number':111,'multiline':False]
['text':'* 1348 -1352 */ "0010 1101 1100", "1001 0110 1101", "0101 0100 1101", "1010 1010 0101", "1011 0101 0010",','line_number':113,'multiline':False]
['text':'* 1353 -1357 */ "1011 1010 0101", "0101 1011 0100", "1001 1011 0110", "0101 0101 0111", "0010 1001 0111",','line_number':115,'multiline':False]
['text':'* 1358 -1362 */ "0101 0100 1011", "0110 1010 0011", "0111 0101 0010", "1011 0110 0101", "0101 0110 1010",','line_number':117,'multiline':False]
['text':'* 1363 -1367 */ "1010 1010 1011", "0101 0010 1011", "1100 1001 0101", "1101 0100 1010", "1101 1010 0101",','line_number':119,'multiline':False]
['text':'* 1368 -1372 */ "0101 1100 1010", "1010 1101 0110", "1001 0101 0111", "0100 1010 1011", "1001 0100 1011",','line_number':121,'multiline':False]
['text':'* 1373 -1377 */ "1010 1010 0101", "1011 0101 0010", "1011 0110 1010", "0101 0111 0101", "0010 0111 0110",','line_number':123,'multiline':False]
['text':'* 1378 -1382 */ "1000 1011 0111", "0100 0101 1011", "0101 0101 0101", "0101 1010 1001", "0101 1011 0100",','line_number':125,'multiline':False]
['text':'* 1383 -1387 */ "1001 1101 1010", "0100 1101 1101", "0010 0110 1110", "1001 0011 0110", "1010 1010 1010",','line_number':127,'multiline':False]
['text':'* 1388 -1392 */ "1101 0101 0100", "1101 1011 0010", "0101 1101 0101", "0010 1101 1010", "1001 0101 1011",','line_number':129,'multiline':False]
['text':'* 1393 -1397 */ "0100 1010 1011", "1010 0101 0101", "1011 0100 1001", "1011 0110 0100", "1011 0111 0001",','line_number':131,'multiline':False]
['text':'* 1398 -1402 */ "0101 1011 0100", "1010 1011 0101", "1010 0101 0101", "1101 0010 0101", "1110 1001 0010",','line_number':133,'multiline':False]
['text':'* 1403 -1407 */ "1110 1100 1001", "0110 1101 0100", "1010 1110 1001", "1001 0110 1011", "0100 1010 1011",','line_number':135,'multiline':False]
['text':'* 1408 -1412 */ "1010 1001 0011", "1101 0100 1001", "1101 1010 0100", "1101 1011 0010", "1010 1011 1001",','line_number':137,'multiline':False]
['text':'* 1413 -1417 */ "0100 1011 1010", "1010 0101 1011", "0101 0010 1011", "1010 1001 0101", "1011 0010 1010",','line_number':139,'multiline':False]
['text':'* 1418 -1422 */ "1011 0101 0101", "0101 0101 1100", "0100 1011 1101", "0010 0011 1101", "1001 0001 1101",','line_number':141,'multiline':False]
['text':'* 1423 -1427 */ "1010 1001 0101", "1011 0100 1010", "1011 0101 1010", "0101 0110 1101", "0010 1011 0110",','line_number':143,'multiline':False]
['text':'* 1428 -1432 */ "1001 0011 1011", "0100 1001 1011", "0110 0101 0101", "0110 1010 1001", "0111 0101 0100",','line_number':145,'multiline':False]
['text':'* 1433 -1437 */ "1011 0110 1010", "0101 0110 1100", "1010 1010 1101", "0101 0101 0101", "1011 0010 1001",','line_number':147,'multiline':False]
['text':'* 1438 -1442 */ "1011 1001 0010", "1011 1010 1001", "0101 1101 0100", "1010 1101 1010", "0101 0101 1010",','line_number':149,'multiline':False]
['text':'* 1443 -1447 */ "1010 1010 1011", "0101 1001 0101", "0111 0100 1001", "0111 0110 0100", "1011 1010 1010",','line_number':151,'multiline':False]
['text':'* 1448 -1452 */ "0101 1011 0101", "0010 1011 0110", "1010 0101 0110", "1110 0100 1101", "1011 0010 0101",','line_number':153,'multiline':False]
['text':'* 1453 -1457 */ "1011 0101 0010", "1011 0110 1010", "0101 1010 1101", "0010 1010 1110", "1001 0010 1111",','line_number':155,'multiline':False]
['text':'* 1458 -1462 */ "0100 1001 0111", "0110 0100 1011", "0110 1010 0101", "0110 1010 1100", "1010 1101 0110",','line_number':157,'multiline':False]
['text':'* 1463 -1467 */ "0101 0101 1101", "0100 1001 1101", "1010 0100 1101", "1101 0001 0110", "1101 1001 0101",','line_number':159,'multiline':False]
['text':'* 1468 -1472 */ "0101 1010 1010", "0101 1011 0101", "0010 1101 1010", "1001 0101 1011", "0100 1010 1101",','line_number':161,'multiline':False]
['text':'* 1473 -1477 */ "0101 1001 0101", "0110 1100 1010", "0110 1110 0100", "1010 1110 1010", "0100 1111 0101",','line_number':163,'multiline':False]
['text':'* 1478 -1482 */ "0010 1011 0110", "1001 0101 0110", "1010 1010 1010", "1011 0101 0100", "1011 1101 0010",','line_number':165,'multiline':False]
['text':'* 1483 -1487 */ "0101 1101 1001", "0010 1110 1010", "1001 0110 1101", "0100 1010 1101", "1010 1001 0101",','line_number':167,'multiline':False]
['text':'* 1488 -1492 */ "1011 0100 1010", "1011 1010 0101", "0101 1011 0010", "1001 1011 0101", "0100 1101 0110",','line_number':169,'multiline':False]
['text':'* 1493 -1497 */ "1010 1001 0111", "0101 0100 0111", "0110 1001 0011", "0111 0100 1001", "1011 0101 0101",','line_number':171,'multiline':False]
['text':'* 1498 -1508 */ "0101 0110 1010", "1010 0110 1011", "0101 0010 1011", "1010 1000 1011", "1101 0100 0110", "1101 1010 0011", "0101 1100 1010", "1010 1101 0110", "0100 1101 1011", "0010 0110 1011", "1001 0100 1011",','line_number':173,'multiline':False]
['text':'* 1509 -1519 */ "1010 1010 0101", "1011 0101 0010", "1011 0110 1001", "0101 0111 0101", "0001 0111 0110", "1000 1011 0111", "0010 0101 1011", "0101 0010 1011", "0101 0110 0101", "0101 1011 0100", "1001 1101 1010",','line_number':175,'multiline':False]
['text':'* 1520 -1530 */ "0100 1110 1101", "0001 0110 1101", "1000 1011 0110", "1010 1010 0110", "1101 0101 0010", "1101 1010 1001", "0101 1101 0100", "1010 1101 1010", "1001 0101 1011", "0100 1010 1011", "0110 0101 0011",','line_number':177,'multiline':False]
['text':'* 1531 -1541 */ "0111 0010 1001", "0111 0110 0010", "1011 1010 1001", "0101 1011 0010", "1010 1011 0101", "0101 0101 0101", "1011 0010 0101", "1101 1001 0010", "1110 1100 1001", "0110 1101 0010", "1010 1110 1001",','line_number':179,'multiline':False]
['text':'* 1542 -1552 */ "0101 0110 1011", "0100 1010 1011", "1010 0101 0101", "1101 0010 1001", "1101 0101 0100", "1101 1010 1010", "1001 1011 0101", "0100 1011 1010", "1010 0011 1011", "0100 1001 1011", "1010 0100 1101",','line_number':181,'multiline':False]
['text':'* 1553 -1563 */ "1010 1010 1010", "1010 1101 0101", "0010 1101 1010", "1001 0101 1101", "0100 0101 1110", "1010 0010 1110", "1100 1001 1010", "1101 0101 0101", "0110 1011 0010", "0110 1011 1001", "0100 1011 1010",','line_number':183,'multiline':False]
['text':'* 1564 -1574 */ "1010 0101 1101", "0101 0010 1101", "1010 1001 0101", "1011 0101 0010", "1011 1010 1000", "1011 1011 0100", "0101 1011 1001", "0010 1101 1010", "1001 0101 1010", "1011 0100 1010", "1101 1010 0100",','line_number':185,'multiline':False]
['text':'* 1575 -1585 */ "1110 1101 0001", "0110 1110 1000", "1011 0110 1010", "0101 0110 1101", "0101 0011 0101", "0110 1001 0101", "1101 0100 1010", "1101 1010 1000", "1101 1101 0100", "0110 1101 1010", "0101 0101 1011",','line_number':187,'multiline':False]
['text':'* 1586 -1596 */ "0010 1001 1101", "0110 0010 1011", "1011 0001 0101", "1011 0100 1010", "1011 1001 0101", "0101 1010 1010", "1010 1010 1110", "1001 0010 1110", "1100 1000 1111", "0101 0010 0111", "0110 1001 0101",','line_number':189,'multiline':False]
['text':'* 1597 -1600 */ "0110 1010 1010", "1010 1101 0110", "0101 0101 1101", "0010 1001 1101", };','line_number':191,'multiline':False]
['text':' set mask for bit corresponding to month','line_number':196,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':204,'multiline':False]
['text':' Constructors...','line_number':205,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':206,'multiline':False]
['text':' out of range','line_number':225,'multiline':False]
['text':' Call this again now that the vtable is set up properly.','line_number':238,'multiline':False]
['text':' The fields of the calendar will become invalid, because the calendar','line_number':251,'multiline':False]
['text':' rules are different','line_number':252,'multiline':False]
['text':'*
* Returns <code>true</code> if this object is using the fixed-cycle civil
* calendar, or <code>false</code> if using the religious, astronomical
* calendar.
* @draft ICU 2.4
','line_number':260,'multiline':True]
['text':'-------------------------------------------------------------------------','line_number':270,'multiline':False]
['text':' Minimum / Maximum access functions','line_number':271,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':272,'multiline':False]
['text':' Note: Current IslamicCalendar implementation does not work','line_number':274,'multiline':False]
['text':' well with negative years.','line_number':275,'multiline':False]
['text':' TODO: In some cases the current ICU Islamic calendar implementation shows','line_number':277,'multiline':False]
['text':' a month as having 31 days. Since date parsing now uses range checks based','line_number':278,'multiline':False]
['text':' on the table below, we need to change the range for last day of month to','line_number':279,'multiline':False]
['text':' include 31 as a workaround until the implementation is fixed.','line_number':280,'multiline':False]
['text':' Minimum  Greatest    Least  Maximum','line_number':282,'multiline':False]
['text':'           Minimum  Maximum','line_number':283,'multiline':False]
['text':' ERA','line_number':284,'multiline':False]
['text':' YEAR','line_number':285,'multiline':False]
['text':' MONTH','line_number':286,'multiline':False]
['text':' WEEK_OF_YEAR','line_number':287,'multiline':False]
['text':'N/A','line_number':288,'multiline':True]
['text':'N/A','line_number':288,'multiline':True]
['text':'N/A','line_number':288,'multiline':True]
['text':'N/A','line_number':288,'multiline':True]
['text':' WEEK_OF_MONTH','line_number':288,'multiline':False]
['text':' DAY_OF_MONTH - 31 to workaround for cal implementation bug, should be 30','line_number':289,'multiline':False]
['text':' DAY_OF_YEAR','line_number':290,'multiline':False]
['text':'N/A','line_number':291,'multiline':True]
['text':'N/A','line_number':291,'multiline':True]
['text':'N/A','line_number':291,'multiline':True]
['text':'N/A','line_number':291,'multiline':True]
['text':' DAY_OF_WEEK','line_number':291,'multiline':False]
['text':' DAY_OF_WEEK_IN_MONTH','line_number':292,'multiline':False]
['text':'N/A','line_number':293,'multiline':True]
['text':'N/A','line_number':293,'multiline':True]
['text':'N/A','line_number':293,'multiline':True]
['text':'N/A','line_number':293,'multiline':True]
['text':' AM_PM','line_number':293,'multiline':False]
['text':'N/A','line_number':294,'multiline':True]
['text':'N/A','line_number':294,'multiline':True]
['text':'N/A','line_number':294,'multiline':True]
['text':'N/A','line_number':294,'multiline':True]
['text':' HOUR','line_number':294,'multiline':False]
['text':'N/A','line_number':295,'multiline':True]
['text':'N/A','line_number':295,'multiline':True]
['text':'N/A','line_number':295,'multiline':True]
['text':'N/A','line_number':295,'multiline':True]
['text':' HOUR_OF_DAY','line_number':295,'multiline':False]
['text':'N/A','line_number':296,'multiline':True]
['text':'N/A','line_number':296,'multiline':True]
['text':'N/A','line_number':296,'multiline':True]
['text':'N/A','line_number':296,'multiline':True]
['text':' MINUTE','line_number':296,'multiline':False]
['text':'N/A','line_number':297,'multiline':True]
['text':'N/A','line_number':297,'multiline':True]
['text':'N/A','line_number':297,'multiline':True]
['text':'N/A','line_number':297,'multiline':True]
['text':' SECOND','line_number':297,'multiline':False]
['text':'N/A','line_number':298,'multiline':True]
['text':'N/A','line_number':298,'multiline':True]
['text':'N/A','line_number':298,'multiline':True]
['text':'N/A','line_number':298,'multiline':True]
['text':' MILLISECOND','line_number':298,'multiline':False]
['text':'N/A','line_number':299,'multiline':True]
['text':'N/A','line_number':299,'multiline':True]
['text':'N/A','line_number':299,'multiline':True]
['text':'N/A','line_number':299,'multiline':True]
['text':' ZONE_OFFSET','line_number':299,'multiline':False]
['text':'N/A','line_number':300,'multiline':True]
['text':'N/A','line_number':300,'multiline':True]
['text':'N/A','line_number':300,'multiline':True]
['text':'N/A','line_number':300,'multiline':True]
['text':' DST_OFFSET','line_number':300,'multiline':False]
['text':' YEAR_WOY','line_number':301,'multiline':False]
['text':'N/A','line_number':302,'multiline':True]
['text':'N/A','line_number':302,'multiline':True]
['text':'N/A','line_number':302,'multiline':True]
['text':'N/A','line_number':302,'multiline':True]
['text':' DOW_LOCAL','line_number':302,'multiline':False]
['text':' EXTENDED_YEAR','line_number':303,'multiline':False]
['text':'N/A','line_number':304,'multiline':True]
['text':'N/A','line_number':304,'multiline':True]
['text':'N/A','line_number':304,'multiline':True]
['text':'N/A','line_number':304,'multiline':True]
['text':' JULIAN_DAY','line_number':304,'multiline':False]
['text':'N/A','line_number':305,'multiline':True]
['text':'N/A','line_number':305,'multiline':True]
['text':'N/A','line_number':305,'multiline':True]
['text':'N/A','line_number':305,'multiline':True]
['text':' MILLISECONDS_IN_DAY','line_number':305,'multiline':False]
['text':'N/A','line_number':306,'multiline':True]
['text':'N/A','line_number':306,'multiline':True]
['text':'N/A','line_number':306,'multiline':True]
['text':'N/A','line_number':306,'multiline':True]
['text':' IS_LEAP_MONTH','line_number':306,'multiline':False]
['text':'*
* @draft ICU 2.4
','line_number':309,'multiline':True]
['text':'-------------------------------------------------------------------------','line_number':316,'multiline':False]
['text':' Assorted calculation utilities','line_number':317,'multiline':False]
['text':'','line_number':318,'multiline':False]
['text':' we could compress this down more if we need to','line_number':320,'multiline':False]
['text':' 1300..','line_number':322,'multiline':False]
['text':' 1310..','line_number':323,'multiline':False]
['text':' 1320..','line_number':324,'multiline':False]
['text':' 1330..','line_number':325,'multiline':False]
['text':' 1340..','line_number':326,'multiline':False]
['text':' 1350..','line_number':327,'multiline':False]
['text':' 1360..','line_number':328,'multiline':False]
['text':' 1370..','line_number':329,'multiline':False]
['text':' 1380..','line_number':330,'multiline':False]
['text':' 1390..','line_number':331,'multiline':False]
['text':' 1400..','line_number':332,'multiline':False]
['text':' 1410..','line_number':333,'multiline':False]
['text':' 1420..','line_number':334,'multiline':False]
['text':' 1430..','line_number':335,'multiline':False]
['text':' 1440..','line_number':336,'multiline':False]
['text':' 1450..','line_number':337,'multiline':False]
['text':' 1460..','line_number':338,'multiline':False]
['text':' 1470..','line_number':339,'multiline':False]
['text':' 1480..','line_number':340,'multiline':False]
['text':' 1490..','line_number':341,'multiline':False]
['text':' 1500..','line_number':342,'multiline':False]
['text':' 1510..','line_number':343,'multiline':False]
['text':' 1520..','line_number':344,'multiline':False]
['text':' 1530..','line_number':345,'multiline':False]
['text':' 1540..','line_number':346,'multiline':False]
['text':' 1550..','line_number':347,'multiline':False]
['text':' 1560..','line_number':348,'multiline':False]
['text':' 1570..','line_number':349,'multiline':False]
['text':' 1580..','line_number':350,'multiline':False]
['text':' 1590..','line_number':351,'multiline':False]
['text':' 1600','line_number':352,'multiline':False]
['text':'*
* Determine whether a year is a leap year in the Islamic civil calendar
','line_number':355,'multiline':True]
['text':'*
* Return the day # on which the given year starts.  Days are counted
* from the Hijri epoch, origin 0.
','line_number':363,'multiline':True]
['text':' rounded least-squares fit of the dates previously calculated from UMALQURA_MONTHLENGTH iteration','line_number':376,'multiline':False]
['text':' need a slight correction to some','line_number':378,'multiline':False]
['text':'*
* Return the day # on which the given month starts.  Days are counted
* from the Hijri epoch, origin 0.
*
* @param year  The hijri year
* @param month The hijri month, 0-based (assumed to be in range 0..11)
','line_number':383,'multiline':True]
['text':' This does not handle months out of the range 0..11','line_number':392,'multiline':False]
['text':'*
* Find the day number on which a particular month of the true/lunar
* Islamic calendar starts.
*
* @param month The month in question, origin 0 from the Hijri epoch
*
* @return The day number on which the given month starts.
','line_number':406,'multiline':True]
['text':' Make a guess at when the month started, using the average length','line_number':420,'multiline':False]
['text':' moonAge will fail due to memory allocation error','line_number':424,'multiline':False]
['text':' The month has already started','line_number':431,'multiline':False]
['text':' Preceding month has not ended yet.','line_number':441,'multiline':False]
['text':'*
* Return the "age" of the moon at the given time; this is the difference
* in ecliptic latitude between the moon and the sun.  This method simply
* calls CalendarAstronomer.moonAge, converts to degrees, 
* and adjusts the result to be in the range [-180, 180].
*
* @param time  The time at which the moon's age is desired,
*              in millis since 1/1/1970.
','line_number':461,'multiline':True]
['text':' pod bay door lock','line_number':474,'multiline':False]
['text':' Convert to degrees and normalize...','line_number':488,'multiline':False]
['text':'----------------------------------------------------------------------','line_number':497,'multiline':False]
['text':' Calendar framework','line_number':498,'multiline':False]
['text':'----------------------------------------------------------------------','line_number':499,'multiline':False]
['text':'*
* Return the length (in days) of the given month.
*
* @param year  The hijri year
* @param year  The hijri month, 0-based
* @draft ICU 2.4
','line_number':501,'multiline':True]
['text':'*
* Return the number of days in the given Islamic year
* @draft ICU 2.4
','line_number':527,'multiline':True]
['text':'-------------------------------------------------------------------------','line_number':547,'multiline':False]
['text':' Functions for converting from field values to milliseconds....','line_number':548,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':549,'multiline':False]
['text':' Return JD of start of given month/year','line_number':551,'multiline':False]
['text':' Calendar says:','line_number':552,'multiline':False]
['text':' Get the Julian day of the day BEFORE the start of this year.','line_number':553,'multiline':False]
['text':' If useMonth is true, get the day before the start of the month.','line_number':554,'multiline':False]
['text':' Hence the -1','line_number':555,'multiline':False]
['text':'*
* @draft ICU 2.4
','line_number':556,'multiline':True]
['text':' useMonth ','line_number':559,'multiline':True]
['text':' This may be called by Calendar::handleComputeJulianDay with months out of the range','line_number':560,'multiline':False]
['text':' 0..11. Need to handle that here since monthStart requires months in the range 0.11.','line_number':561,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':573,'multiline':False]
['text':' Functions for converting from milliseconds to field values','line_number':574,'multiline':False]
['text':'-------------------------------------------------------------------------','line_number':575,'multiline':False]
['text':'*
* @draft ICU 2.4
','line_number':577,'multiline':True]
['text':' Default to year 1','line_number':583,'multiline':False]
['text':' Default to year 1','line_number':585,'multiline':False]
['text':'*
* Override Calendar to compute several fields specific to the Islamic
* calendar system.  These are:
*
* <ul><li>ERA
* <li>YEAR
* <li>MONTH
* <li>DAY_OF_MONTH
* <li>DAY_OF_YEAR
* <li>EXTENDED_YEAR</ul>
* 
* The DAY_OF_WEEK and DOW_LOCAL fields are already set when this
* method is called. The getGregorianXxx() methods return Gregorian
* calendar equivalents for the given Julian day.
* @draft ICU 2.4
','line_number':590,'multiline':True]
['text':' Use the civil calendar approximation, which is just arithmetic','line_number':615,'multiline':False]
['text':' Guess at the number of elapsed full months since the epoch','line_number':621,'multiline':False]
['text':' If we're near the end of the month, assume next month and search backwards','line_number':632,'multiline':False]
['text':' Find out the last time that the new moon was actually visible at this longitude','line_number':636,'multiline':False]
['text':' This returns midnight the night that the moon was visible at sunset.','line_number':637,'multiline':False]
['text':' If it was after the date in question, back up a month and try again','line_number':639,'multiline':False]
['text':'Use Civil calculation','line_number':648,'multiline':False]
['text':' invalid 'civil'','line_number':677,'multiline':False]
['text':' should not get here, out of range','line_number':678,'multiline':False]
['text':' Now figure out the day of the year.','line_number':683,'multiline':False]
['text':' copied from GregorianCalendar','line_number':698,'multiline':False]
['text':' Force an update of the state of the Calendar.','line_number':702,'multiline':False]
['text':' cast away const','line_number':703,'multiline':False]
['text':'*
 * The system maintains a static default century start date and Year.  They are
 * initialized the first time they are used.  Once the system default century date 
 * and year are set, they do not change.
 ','line_number':708,'multiline':True]
['text':' lazy-evaluate systemDefaultCenturyStart','line_number':725,'multiline':False]
['text':' lazy-evaluate systemDefaultCenturyStartYear','line_number':732,'multiline':False]
['text':' initialize systemDefaultCentury and systemDefaultCenturyYear based','line_number':741,'multiline':False]
['text':' on the current time.  They'll be set to 80 years before','line_number':742,'multiline':False]
['text':' the current time.','line_number':743,'multiline':False]
['text':' We have no recourse upon failure unless we want to propagate the failure','line_number':753,'multiline':False]
['text':' out.','line_number':754,'multiline':False]
