['text':' © 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' For convenience and historical reasons, import the Field typedef to the namespace.','line_number':26,'multiline':False]
['text':' Typedef several enums for brevity and for easier comparison to Java.','line_number':29,'multiline':False]
['text':' ICU4J Equivalent: RoundingUtils.MAX_INT_FRAC_SIG','line_number':37,'multiline':False]
['text':' ICU4J Equivalent: RoundingUtils.DEFAULT_ROUNDING_MODE','line_number':40,'multiline':False]
['text':' ICU4J Equivalent: Padder.FALLBACK_PADDING_STRING','line_number':43,'multiline':False]
['text':' Forward declarations:','line_number':46,'multiline':False]
['text':' Represents a literal character; the value is stored in the code point field.','line_number':56,'multiline':False]
['text':' Represents a minus sign symbol '-'.','line_number':59,'multiline':False]
['text':' Represents a plus sign symbol '+'.','line_number':62,'multiline':False]
['text':' Represents a percent sign symbol '%'.','line_number':65,'multiline':False]
['text':' Represents a permille sign symbol '‰'.','line_number':68,'multiline':False]
['text':' Represents a single currency symbol '¤'.','line_number':71,'multiline':False]
['text':' Represents a double currency symbol '¤¤'.','line_number':74,'multiline':False]
['text':' Represents a triple currency symbol '¤¤¤'.','line_number':77,'multiline':False]
['text':' Represents a quadruple currency symbol '¤¤¤¤'.','line_number':80,'multiline':False]
['text':' Represents a quintuple currency symbol '¤¤¤¤¤'.','line_number':83,'multiline':False]
['text':' Represents a sequence of six or more currency symbols.','line_number':86,'multiline':False]
['text':' Convenience compound flags','line_number':110,'multiline':False]
['text':'*
     * True if the pattern has a number placeholder like "0" or "#,##0.00"; false if the pattern does not
     * have one. This is used in cases like compact notation, where the pattern replaces the entire
     * number instead of rendering the number.
     ','line_number':134,'multiline':True]
['text':'*
 * A Modifier is an object that can be passed through the formatting pipeline until it is finally applied to the string
 * builder. A Modifier usually contains a prefix and a suffix that are applied, but it could contain something else,
 * like a {@link com.ibm.icu.text.SimpleFormatter} pattern.
 *
 * A Modifier is usually immutable, except in cases such as {@link MutablePatternModifier}, which are mutable for performance
 * reasons.
 *
 * Exported as U_I18N_API because it is a base class for other exported types
 ','line_number':143,'multiline':True]
['text':'*
     * Apply this Modifier to the string builder.
     *
     * @param output
     *            The string builder to which to apply this modifier.
     * @param leftIndex
     *            The left index of the string within the builder. Equal to 0 when only one number is being formatted.
     * @param rightIndex
     *            The right index of the string within the string builder. Equal to length when only one number is being
     *            formatted.
     * @return The number of characters (UTF-16 code units) that were added to the string builder.
     ','line_number':157,'multiline':True]
['text':'*
     * Gets the length of the prefix. This information can be used in combination with {@link #apply} to extract the
     * prefix and suffix strings.
     *
     * @return The number of characters (UTF-16 code units) in the prefix.
     ','line_number':172,'multiline':True]
['text':'*
     * Returns the number of code points in the modifier, prefix plus suffix.
     ','line_number':180,'multiline':True]
['text':'*
     * Whether this modifier is strong. If a modifier is strong, it should always be applied immediately and not allowed
     * to bubble up. With regard to padding, strong modifiers are considered to be on the inside of the prefix and
     * suffix.
     *
     * @return Whether the modifier is strong.
     ','line_number':185,'multiline':True]
['text':'*
     * Whether the modifier contains at least one occurrence of the given field.
     ','line_number':194,'multiline':True]
['text':'*
     * A fill-in for getParameters(). obj will always be set; if non-null, the other
     * two fields are also safe to read.
     ','line_number':199,'multiline':True]
['text':'*
     * Gets a set of "parameters" for this Modifier.
     *
     * TODO: Make this return a `const Parameters*` more like Java?
     ','line_number':212,'multiline':True]
['text':'*
     * Returns whether this Modifier is *semantically equivalent* to the other Modifier;
     * in many cases, this is the same as equal, but parameters should be ignored.
     ','line_number':219,'multiline':True]
['text':'*
 * This is *not* a modifier; rather, it is an object that can return modifiers
 * based on given parameters.
 *
 * Exported as U_I18N_API because it is a base class for other exported types.
 ','line_number':227,'multiline':True]
['text':'*
     * Returns a Modifier with the given parameters (best-effort).
     ','line_number':237,'multiline':True]
['text':'*
 * This interface is used when all number formatting settings, including the locale, are known, except for the quantity
 * itself. The {@link #processQuantity} method performs the final step in the number processing pipeline: it uses the
 * quantity to generate a finalized {@link MicroProps}, which can be used to render the number to output.
 *
 * In other words, this interface is used for the parts of number processing that are <em>quantity-dependent</em>.
 *
 * In order to allow for multiple different objects to all mutate the same MicroProps, a "chain" of MicroPropsGenerators
 * are linked together, and each one is responsible for manipulating a certain quantity-dependent part of the
 * MicroProps. At the tail of the linked list is a base instance of {@link MicroProps} with properties that are not
 * quantity-dependent. Each element in the linked list calls {@link #processQuantity} on its "parent", then does its
 * work, and then returns the result.
 *
 * This chain of MicroPropsGenerators is typically constructed by NumberFormatterImpl::macrosToMicroGenerator() when
 * constructing a NumberFormatter.
 *
 * Exported as U_I18N_API because it is a base class for other exported types
 *
 ','line_number':244,'multiline':True]
['text':'*
     * Considers the given {@link DecimalQuantity}, optionally mutates it, and
     * populates a {@link MicroProps} instance.
     *
     * @param quantity The quantity for consideration and optional mutation.
     * @param micros The MicroProps instance to populate. It will be modified as
     *   needed for the given quantity.
     ','line_number':267,'multiline':True]
['text':'*
 * An interface used by compact notation and scientific notation to choose a multiplier while rounding.
 ','line_number':279,'multiline':True]
['text':'*
     * Maps a magnitude to a multiplier in powers of ten. For example, in compact notation in English, a magnitude of 5
     * (e.g., 100,000) should return a multiplier of -3, since the number is displayed in thousands.
     *
     * @param magnitude
     *            The power of ten of the input number.
     * @return The shift in powers of ten.
     ','line_number':286,'multiline':True]
['text':' Exported as U_I18N_API because it is a public member field of exported DecimalFormatProperties','line_number':297,'multiline':False]
['text':' "fValue == other.fValue" returns UBool, not bool (causes compiler warnings)','line_number':326,'multiline':False]
['text':' TODO: It might be nice to call the destructor here.','line_number':331,'multiline':False]
['text':' namespace impl','line_number':360,'multiline':False]
['text':' namespace number','line_number':361,'multiline':False]
['text':'__NUMBER_TYPES_H__','line_number':364,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':366,'multiline':True]
