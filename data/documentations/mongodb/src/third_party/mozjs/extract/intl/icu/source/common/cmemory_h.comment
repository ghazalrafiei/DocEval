['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*
*   Copyright (C) 1997-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File CMEMORY.H
*
*  Contains stdlib.h/string.h memory functions
*
* @author       Bertrand A. Damiba
*
* Modification History:
*
*   Date        Name        Description
*   6/20/98     Bertrand    Created.
*  05/03/99     stephen     Changed from functions to macros.
*
******************************************************************************
','line_number':3,'multiline':True]
['text':' uprv_memcpy and uprv_memmove','line_number':40,'multiline':False]
['text':' Suppress warnings about addresses that will never be NULL ','line_number':43,'multiline':True]
['text':' Suppress warnings about addresses that will never be NULL ','line_number':52,'multiline':True]
['text':' Suppress warnings about addresses that will never be NULL ','line_number':62,'multiline':True]
['text':' Suppress warnings about addresses that will never be NULL ','line_number':71,'multiline':True]
['text':'*
 * \def UPRV_LENGTHOF
 * Convenience macro to determine the length of a fixed array at compile-time.
 * @param array A fixed length array
 * @return The length of the array, in elements
 * @internal
 ','line_number':92,'multiline':True]
['text':'*
 * Get the least significant bits of a pointer (a memory address).
 * For example, with a mask of 3, the macro gets the 2 least significant bits,
 * which will be 0 if the pointer is 32-bit (4-byte) aligned.
 *
 * uintptr_t is the most appropriate integer type to cast to.
 ','line_number':116,'multiline':True]
['text':'*
 * Create & return an instance of "type" in statically allocated storage.
 * e.g.
 *    static std::mutex *myMutex = STATIC_NEW(std::mutex);
 * To destroy an object created in this way, invoke the destructor explicitly, e.g.
 *    myMutex->~mutex();
 * DO NOT use delete.
 * DO NOT use with class UMutex, which has specific support for static instances.
 *
 * STATIC_NEW is intended for use when
 *   - We want a static (or global) object.
 *   - We don't want it to ever be destructed, or to explicitly control destruction,
 *     to avoid use-after-destruction problems.
 *   - We want to avoid an ordinary heap allocated object,
 *     to avoid the possibility of memory allocation failures, and
 *     to avoid memory leak reports, from valgrind, for example.
 * This is defined as a macro rather than a template function because each invocation
 * must define distinct static storage for the object being returned.
 ','line_number':125,'multiline':True]
['text':'*
  *  Heap clean up function, called from u_cleanup()
  *    Clears any user heap functions from u_setMemoryFunctions()
  *    Does NOT deallocate any remaining allocated memory.
  ','line_number':148,'multiline':True]
['text':'*
 * A function called by <TT>uhash_remove</TT>,
 * <TT>uhash_close</TT>, or <TT>uhash_put</TT> to delete
 * an existing key or value.
 * @param obj A key or value stored in a hashtable
 * @see uprv_deleteUObject
 ','line_number':156,'multiline':True]
['text':'*
 * Deleter for UObject instances.
 * Works for all subclasses of UObject because it has a virtual destructor.
 ','line_number':165,'multiline':True]
['text':'*
 * "Smart pointer" class, deletes memory via uprv_free().
 * For most methods see the LocalPointerBase base class.
 * Adds operator[] for array item access.
 *
 * @see LocalPointerBase
 ','line_number':179,'multiline':True]
['text':'*
     * Constructor takes ownership.
     * @param p simple pointer to an array of T items that is adopted
     ','line_number':191,'multiline':True]
['text':'*
     * Move constructor, leaves src with isNull().
     * @param src source smart pointer
     ','line_number':196,'multiline':True]
['text':'*
     * Destructor deletes the memory it owns.
     ','line_number':203,'multiline':True]
['text':'*
     * Move assignment operator, leaves src with isNull().
     * The behavior is undefined if *this and src are the same object.
     * @param src source smart pointer
     * @return *this
     ','line_number':209,'multiline':True]
['text':'*
     * Swap pointers.
     * @param other other smart pointer
     ','line_number':221,'multiline':True]
['text':'*
     * Non-member LocalMemory swap function.
     * @param p1 will get p2's pointer
     * @param p2 will get p1's pointer
     ','line_number':230,'multiline':True]
['text':'*
     * Deletes the array it owns,
     * and adopts (takes ownership of) the one passed in.
     * @param p simple pointer to an array of T items that is adopted
     ','line_number':238,'multiline':True]
['text':'*
     * Deletes the array it owns, allocates a new one and reset its bytes to 0.
     * Returns the new array pointer.
     * If the allocation fails, then the current array is unchanged and
     * this method returns NULL.
     * @param newCapacity must be >0
     * @return the allocated array pointer, or NULL if the allocation failed
     ','line_number':247,'multiline':True]
['text':'*
     * Deletes the array it owns and allocates a new one, copying length T items.
     * Returns the new array pointer.
     * If the allocation fails, then the current array is unchanged and
     * this method returns NULL.
     * @param newCapacity must be >0
     * @param length number of T items to be copied from the old array to the new one;
     *               must be no more than the capacity of the old array,
     *               which the caller must track because the LocalMemory does not track it
     * @return the allocated array pointer, or NULL if the allocation failed
     ','line_number':256,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':268,'multiline':True]
['text':'*
 * Simple array/buffer management class using uprv_malloc() and uprv_free().
 * Provides an internal array with fixed capacity. Can alias another array
 * or allocate one.
 *
 * The array address is properly aligned for type T. It might not be properly
 * aligned for types larger than T (or larger than the largest subtype of T).
 *
 * Unlike LocalMemory and LocalArray, this class never adopts
 * (takes ownership of) another array.
 *
 * WARNING: MaybeStackArray only works with primitive (plain-old data) types.
 * It does NOT know how to call a destructor! If you work with classes with
 * destructors, consider:
 *
 * - LocalArray in localpointer.h if you know the length ahead of time
 * - MaybeStackVector if you know the length at runtime
 ','line_number':313,'multiline':True]
['text':' No heap allocation. Use only on the stack.','line_number':334,'multiline':False]
['text':'*
     * Default constructor initializes with internal T[stackCapacity] buffer.
     ','line_number':341,'multiline':True]
['text':'*
     * Automatically allocates the heap array if the argument is larger than the stack capacity.
     * Intended for use when an approximate capacity is known at compile time but the true
     * capacity is not known until runtime.
     ','line_number':345,'multiline':True]
['text':'*
     * Destructor deletes the array (if owned).
     ','line_number':360,'multiline':True]
['text':'*
     * Move constructor: transfers ownership or copies the stack array.
     ','line_number':364,'multiline':True]
['text':'*
     * Move assignment: transfers ownership or copies the stack array.
     ','line_number':368,'multiline':True]
['text':'*
     * Returns the array capacity (number of T items).
     * @return array capacity
     ','line_number':372,'multiline':True]
['text':'*
     * Access without ownership change.
     * @return the array pointer
     ','line_number':377,'multiline':True]
['text':'*
     * Returns the array limit. Simple convenience method.
     * @return getAlias()+getCapacity()
     ','line_number':382,'multiline':True]
['text':' No "operator T *() const" because that can make','line_number':387,'multiline':False]
['text':' expressions like mbs[index] ambiguous for some compilers.','line_number':388,'multiline':False]
['text':'*
     * Array item access (const).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':389,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':396,'multiline':True]
['text':'*
     * Deletes the array (if owned) and aliases another one, no transfer of ownership.
     * If the arguments are illegal, then the current array is unchanged.
     * @param otherArray must not be NULL
     * @param otherCapacity must be >0
     ','line_number':403,'multiline':True]
['text':'*
     * Deletes the array (if owned) and allocates a new one, copying length T items.
     * Returns the new array pointer.
     * If the allocation fails, then the current array is unchanged and
     * this method returns NULL.
     * @param newCapacity can be less than or greater than the current capacity;
     *                    must be >0
     * @param length number of T items to be copied from the old array to the new one
     * @return the allocated array pointer, or NULL if the allocation failed
     ','line_number':417,'multiline':True]
['text':'*
     * Gives up ownership of the array if owned, or else clones it,
     * copying length T items; resets itself to the internal stack array.
     * Returns NULL if the allocation failed.
     * @param length number of T items to copy when cloning,
     *        and capacity of the clone when cloning
     * @param resultCapacity will be set to the returned array's capacity (output-only)
     * @return the array pointer;
     *         caller becomes responsible for deleting the array
     ','line_number':428,'multiline':True]
['text':' Resizes the array to the size of src, then copies the contents of src.','line_number':441,'multiline':False]
['text':' No comparison operators with other MaybeStackArray's. ','line_number':468,'multiline':True]
['text':'other','line_number':469,'multiline':True]
['text':'other','line_number':470,'multiline':True]
['text':' No ownership transfer: No copy constructor, no assignment operator. ','line_number':471,'multiline':True]
['text':'other','line_number':472,'multiline':True]
['text':'other','line_number':473,'multiline':True]
['text':' take ownership away from src','line_number':484,'multiline':False]
['text':' in case this instance had its own memory allocated','line_number':491,'multiline':False]
['text':' take ownership away from src','line_number':499,'multiline':False]
['text':'*
 * Variant of MaybeStackArray that allocates a header struct and an array
 * in one contiguous memory block, using uprv_malloc() and uprv_free().
 * Provides internal memory with fixed array capacity. Can alias another memory
 * block or allocate one.
 * The stackCapacity is the number of T items in the internal memory,
 * not counting the H header.
 * Unlike LocalMemory and LocalArray, this class never adopts
 * (takes ownership of) another memory block.
 ','line_number':557,'multiline':True]
['text':' No heap allocation. Use only on the stack.','line_number':570,'multiline':False]
['text':'*
     * Default constructor initializes with internal H+T[stackCapacity] buffer.
     ','line_number':577,'multiline':True]
['text':'*
     * Destructor deletes the memory (if owned).
     ','line_number':581,'multiline':True]
['text':'*
     * Returns the array capacity (number of T items).
     * @return array capacity
     ','line_number':585,'multiline':True]
['text':'*
     * Access without ownership change.
     * @return the header pointer
     ','line_number':590,'multiline':True]
['text':'*
     * Returns the array start.
     * @return array start, same address as getAlias()+1
     ','line_number':595,'multiline':True]
['text':'*
     * Returns the array limit.
     * @return array limit
     ','line_number':600,'multiline':True]
['text':'*
     * Access without ownership change. Same as getAlias().
     * A class instance can be used directly in expressions that take a T *.
     * @return the header pointer
     ','line_number':605,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':611,'multiline':True]
['text':'*
     * Deletes the memory block (if owned) and aliases another one, no transfer of ownership.
     * If the arguments are illegal, then the current memory is unchanged.
     * @param otherArray must not be NULL
     * @param otherCapacity must be >0
     ','line_number':618,'multiline':True]
['text':'*
     * Deletes the memory block (if owned) and allocates a new one,
     * copying the header and length T array items.
     * Returns the new header pointer.
     * If the allocation fails, then the current memory is unchanged and
     * this method returns NULL.
     * @param newCapacity can be less than or greater than the current capacity;
     *                    must be >0
     * @param length number of T items to be copied from the old array to the new one
     * @return the allocated pointer, or NULL if the allocation failed
     ','line_number':632,'multiline':True]
['text':'*
     * Gives up ownership of the memory if owned, or else clones it,
     * copying the header and length T array items; resets itself to the internal memory.
     * Returns NULL if the allocation failed.
     * @param length number of T items to copy when cloning,
     *        and array capacity of the clone when cloning
     * @param resultCapacity will be set to the returned array's capacity (output-only)
     * @return the header pointer;
     *         caller becomes responsible for deleting the array
     ','line_number':644,'multiline':True]
['text':' stackHeader must precede stackArray immediately.','line_number':659,'multiline':False]
['text':' No comparison operators with other MaybeStackHeaderAndArray's. ','line_number':667,'multiline':True]
['text':'other','line_number':668,'multiline':True]
['text':'other','line_number':669,'multiline':True]
['text':' No ownership transfer: No copy constructor, no assignment operator. ','line_number':670,'multiline':True]
['text':'other','line_number':671,'multiline':True]
['text':'other','line_number':672,'multiline':True]
['text':'*
 * A simple memory management class that creates new heap allocated objects (of
 * any class that has a public constructor), keeps track of them and eventually
 * deletes them all in its own destructor.
 *
 * A typical use-case would be code like this:
 *
 *     MemoryPool<MyType> pool;
 *
 *     MyType* o1 = pool.create();
 *     if (o1 != nullptr) {
 *         foo(o1);
 *     }
 *
 *     MyType* o2 = pool.create(1, 2, 3);
 *     if (o2 != nullptr) {
 *         bar(o2);
 *     }
 *
 *     // MemoryPool will take care of deleting the MyType objects.
 *
 * It doesn't do anything more than that, and is intentionally kept minimalist.
 ','line_number':734,'multiline':True]
['text':' Since `this` may contain instances that need to be deleted, we can't','line_number':777,'multiline':False]
['text':' just throw them away and replace them with `other`. The normal way of','line_number':778,'multiline':False]
['text':' dealing with this in C++ is to swap `this` and `other`, rather than','line_number':779,'multiline':False]
['text':' simply overwrite: the destruction of `other` can then take care of','line_number':780,'multiline':False]
['text':' running MemoryPool::~MemoryPool() over the still-to-be-deallocated','line_number':781,'multiline':False]
['text':' instances.','line_number':782,'multiline':False]
['text':'*
     * Creates a new object of typename T, by forwarding any and all arguments
     * to the typename T constructor.
     *
     * @param args Arguments to be forwarded to the typename T constructor.
     * @return A pointer to the newly created object, or nullptr on error.
     ','line_number':788,'multiline':True]
['text':'*
     * @return Number of elements that have been allocated.
     ','line_number':818,'multiline':True]
['text':'*
 * An internal Vector-like implementation based on MemoryPool.
 *
 * Heap-allocates each element and stores pointers.
 *
 * To append an item to the vector, use emplaceBack.
 *
 *     MaybeStackVector<MyType> vector;
 *     MyType* element = vector.emplaceBack();
 *     if (!element) {
 *         status = U_MEMORY_ALLOCATION_ERROR;
 *     }
 *     // do stuff with element
 *
 * To loop over the vector, use a for loop with indices:
 *
 *     for (int32_t i = 0; i < vector.length(); i++) {
 *         MyType* element = vector[i];
 *     }
 ','line_number':830,'multiline':True]
['text':'*
     * Array item access (read-only).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':875,'multiline':True]
['text':'*
     * Array item access (writable).
     * No index bounds check.
     * @param i array index
     * @return reference to the array item
     ','line_number':885,'multiline':True]
['text':' __cplusplus ','line_number':899,'multiline':True]
['text':' CMEMORY_H ','line_number':900,'multiline':True]
