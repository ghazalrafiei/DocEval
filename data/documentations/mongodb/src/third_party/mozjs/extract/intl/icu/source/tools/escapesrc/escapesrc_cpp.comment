['text':' © 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' We only use U8_* macros, which are entirely inline.','line_number':12,'multiline':False]
['text':' This contains a codepage and ISO 14882:1998 illegality table.','line_number':15,'multiline':False]
['text':' Use "make gen-table" to rebuild it.','line_number':16,'multiline':False]
['text':'*
 * What is this?
 *
 * "This" is a preprocessor that makes an attempt to convert fully valid C++11 source code
 * in utf-8 into something consumable by certain compilers (Solaris, xlC)
 * which aren't quite standards compliant.
 *
 * - u"<unicode>" or u'<unicode>' gets converted to u"\uNNNN" or u'\uNNNN'
 * - u8"<unicode>" gets converted to "\xAA\xBB\xCC\xDD" etc.
 *   (some compilers do not support the u8 prefix correctly.)
 * - if the system is EBCDIC-based, that is used to correct the input characters.
 *
 * Usage:
 *   escapesrc infile.cpp outfile.cpp
 * Normally this is invoked by the build stage, with a rule such as:
 *
 * _%.cpp: $(srcdir)/%.cpp
 *       @$(BINDIR)/escapesrc$(EXEEXT) $< $@
 * %.o: _%.cpp
 *       $(COMPILE.cc) ... $@ $<
 *
 * In the Makefiles, SKIP_ESCAPING=YES is used to prevent escapesrc.cpp 
 * from being itself escaped.
 ','line_number':19,'multiline':True]
['text':' For convenience','line_number':51,'multiline':False]
['text':' Our app's name','line_number':54,'multiline':False]
['text':'*
 * Give the usual 1-line documentation and exit
 ','line_number':57,'multiline':True]
['text':'*
 * Delete the output file (if any)
 * We want to delete even if we didn't generate, because it might be stale.
 ','line_number':64,'multiline':True]
['text':' File did not exist - no error.','line_number':77,'multiline':False]
['text':'*
 * Skip across any known whitespace.
 * @param p startpoint
 * @param e limit
 * @return first non-whitespace char
 ','line_number':87,'multiline':True]
['text':' non ws','line_number':102,'multiline':False]
['text':'*
 * Append a byte, hex encoded
 * @param outstr sstring to append to
 * @param byte the byte to append
 ','line_number':108,'multiline':True]
['text':'*
 * Append the bytes from 'linestr' into outstr, with escaping
 * @param outstr the output buffer
 * @param linestr the input buffer
 * @param pos in/out: the current char under consideration
 * @param chars the number of chars to consider
 * @return true on failure
 ','line_number':120,'multiline':True]
['text':' now to append \\x%% etc','line_number':141,'multiline':False]
['text':'*
 * Fixup u8"x"
 * @param linestr string to mutate. Already escaped into \u format.
 * @param origpos beginning, points to 'u8"'
 * @param pos end, points to "
 * @return false for no-problem, true for failure!
 ','line_number':157,'multiline':True]
['text':' local encoding','line_number':167,'multiline':False]
['text':' OK','line_number':198,'multiline':False]
['text':'*
 * fix the u"x"/u'x'/u8"x" string at the position
 * u8'x' is not supported, sorry.
 * @param linestr the input string
 * @param pos the position
 * @return false = no err, true = had err
 ','line_number':201,'multiline':True]
['text':' past 'u'','line_number':216,'multiline':False]
['text':' u8"','line_number':220,'multiline':False]
['text':'printf("u%c…%c\n", quote, quote);','line_number':239,'multiline':False]
['text':' fix u8"..."','line_number':244,'multiline':False]
['text':' end of quote','line_number':246,'multiline':False]
['text':' quoted quote','line_number':251,'multiline':False]
['text':' for now ... unicode escape','line_number':252,'multiline':False]
['text':' some other escape… ignore','line_number':254,'multiline':False]
['text':' mogrify 1-4 bytes from 1047 'back' to utf-8','line_number':259,'multiline':False]
['text':' how many more?','line_number':262,'multiline':False]
['text':' NL is ambiguous here','line_number':267,'multiline':False]
['text':' Proceed to decode utf-8','line_number':272,'multiline':False]
['text':' put it back','line_number':278,'multiline':False]
['text':' single code point not previously legal for \u escaping','line_number':280,'multiline':False]
['text':' otherwise, convert it to \u / \U','line_number':283,'multiline':False]
['text':'printf("U+%04X pos %d [len %d]\n", c, pos, seqLen);fflush(stdout);','line_number':295,'multiline':False]
['text':'*
 * Fixup an entire line
 * false = no err
 * true = had err
 * @param no the line number (not used)
 * @param linestr the string to fix
 * @return true if any err, else false
 ','line_number':311,'multiline':True]
['text':'no','line_number':319,'multiline':True]
['text':' no u' in the line?','line_number':323,'multiline':False]
['text':' Nothing to do. No u' or u" detected','line_number':325,'multiline':False]
['text':' start from the end and find all u" cases','line_number':328,'multiline':False]
['text':'printf("found doublequote at %d\n", pos);','line_number':334,'multiline':False]
['text':' reset and find all u' cases','line_number':340,'multiline':False]
['text':'printf("found singlequote at %d\n", pos);','line_number':343,'multiline':False]
['text':' reset and find all u8" cases','line_number':349,'multiline':False]
['text':'fprintf(stderr, "%d - fixed\n", no);','line_number':357,'multiline':False]
['text':'*
 * Convert a whole file
 * @param infile
 * @param outfile
 * @return 1 on err, 0 otherwise
 ','line_number':361,'multiline':True]
['text':' TODO: any platform variations of #line?','line_number':389,'multiline':False]
['text':'*
 * Main function
 ','line_number':412,'multiline':True]
