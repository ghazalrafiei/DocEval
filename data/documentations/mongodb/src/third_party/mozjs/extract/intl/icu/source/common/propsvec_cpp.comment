['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2002-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  propsvec.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002feb22
*   created by: Markus W. Scherer
*
*   Store bits (Unicode character properties) in bit set vectors.
','line_number':3,'multiline':True]
['text':' number of columns, plus two for start & limit values ','line_number':32,'multiline':True]
['text':' search optimization: remember last row seen ','line_number':35,'multiline':True]
['text':' count range start and limit columns ','line_number':56,'multiline':True]
['text':' set the all-Unicode row and the special-value rows ','line_number':72,'multiline':True]
['text':' check the vicinity of the last-seen row (start searching with an unrolled loop) ','line_number':103,'multiline':True]
['text':' same row as last seen ','line_number':107,'multiline':True]
['text':' next row after the last one ','line_number':110,'multiline':True]
['text':' second row after the last one ','line_number':114,'multiline':True]
['text':' we are close, continue looping ','line_number':118,'multiline':True]
['text':' the very first row ','line_number':128,'multiline':True]
['text':' do a binary search for the start of the range ','line_number':133,'multiline':True]
['text':' must be found because all ranges together always cover all of Unicode ','line_number':148,'multiline':True]
['text':' argument checking ','line_number':164,'multiline':True]
['text':' initialize ','line_number':181,'multiline':True]
['text':' skip range start and limit columns ','line_number':183,'multiline':True]
['text':' find the rows whose ranges overlap with the input range ','line_number':186,'multiline':True]
['text':' find the first and last rows, always successful ','line_number':188,'multiline':True]
['text':'
     * Rows need to be split if they partially overlap with the
     * input range (only possible for the first and last rows)
     * and if their value differs from the input value.
     ','line_number':192,'multiline':True]
['text':' split first/last rows if necessary ','line_number':200,'multiline':True]
['text':' Implementation bug, or UPVEC_MAX_ROWS too low. ','line_number':214,'multiline':True]
['text':' count the number of row cells to move after the last row, and move them ','line_number':231,'multiline':True]
['text':' split the first row, and move the firstRow pointer to the second part ','line_number':241,'multiline':True]
['text':' copy all affected rows up one and move the lastRow pointer ','line_number':243,'multiline':True]
['text':' split the range and move the firstRow pointer ','line_number':248,'multiline':True]
['text':' split the last row ','line_number':253,'multiline':True]
['text':' copy the last row data ','line_number':255,'multiline':True]
['text':' split the range and move the firstRow pointer ','line_number':258,'multiline':True]
['text':' set the "row last seen" to the last row for the range ','line_number':263,'multiline':True]
['text':' set the input value in all remaining rows ','line_number':266,'multiline':True]
['text':' includes start/limit columns ','line_number':319,'multiline':True]
['text':' start comparing after start/limit but wrap around to them ','line_number':321,'multiline':True]
['text':' argument checking ','line_number':341,'multiline':True]
['text':' Set the flag now: Sorting and compacting destroys the builder data structure. ','line_number':353,'multiline':True]
['text':' upvec_open asserts this ','line_number':358,'multiline':True]
['text':' not counting start & limit ','line_number':359,'multiline':True]
['text':' sort the properties vectors to find unique vector values ','line_number':361,'multiline':True]
['text':'
     * Find and set the special values.
     * This has to do almost the same work as the compaction below,
     * to find the indexes where the special-value rows will move.
     ','line_number':368,'multiline':True]
['text':' count a new values vector if it is different from the current one ','line_number':378,'multiline':True]
['text':' count is at the beginning of the last vector, add valueColumns to include that last vector ','line_number':393,'multiline':True]
['text':' Call the handler once more to signal the start of delivering real values. ','line_number':396,'multiline':True]
['text':'
     * Move vector contents up to a contiguous array with only unique
     * vector values, and call the handler function for each vector.
     *
     * This destroys the Properties Vector structure and replaces it
     * with an array of just vector values.
     ','line_number':403,'multiline':True]
['text':' fetch these first before memmove() may overwrite them ','line_number':413,'multiline':True]
['text':' add a new values vector if it is different from the current one ','line_number':417,'multiline':True]
['text':' count is at the beginning of the last vector, add one to include that last vector ','line_number':433,'multiline':True]
['text':'
 * TODO(markus): Add upvec_16BitsToUTrie2() function that enumerates all rows, extracts
 * some 16-bit field and builds and returns a UTrie2.
 ','line_number':492,'multiline':True]
['text':' too many rows for a 16-bit trie ','line_number':518,'multiline':True]
