['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 *****************************************************************************
 *
 *   Copyright (C) 1998-2016, International Business Machines
 *   Corporation and others.  All Rights Reserved.
 *
 *****************************************************************************
 *
 *  ucnv_err.c
 *  Implements error behaviour functions called by T_UConverter_{from,to}Unicode
 *
 *
*   Change history:
*
*   06/29/2000  helena      Major rewrite of the callback APIs.
','line_number':3,'multiline':True]
['text':'Magic # 32 = 4(number of char in value string) * 8(max number of bytes per char for any converter) ','line_number':32,'multiline':True]
['text':'
 * IS_DEFAULT_IGNORABLE_CODE_POINT
 * This is to check if a code point has the default ignorable unicode property.
 * As such, this list needs to be updated if the ignorable code point list ever
 * changes.
 * To avoid dependency on other code, this list is hard coded here.
 * When an ignorable code point is found and is unmappable, the default callbacks
 * will ignore them.
 * For a list of the default ignorable code points, use this link:
 * https://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3ADI%3A%5D&abb=on&g=&i=
 *
 * This list should be sync with the one in CharsetCallback.java
 ','line_number':55,'multiline':True]
['text':'Function Pointer STOPS at the ILLEGAL_SEQUENCE ','line_number':89,'multiline':True]
['text':'
         * Skip if the codepoint has unicode property of default ignorable.
         ','line_number':106,'multiline':True]
['text':' the caller must have set the error code accordingly ','line_number':111,'multiline':True]
['text':'Function Pointer STOPS at the ILLEGAL_SEQUENCE ','line_number':116,'multiline':True]
['text':' the caller must have set the error code accordingly ','line_number':126,'multiline':True]
['text':'
             * Skip if the codepoint has unicode property of default ignorable.
             ','line_number':148,'multiline':True]
['text':' else the caller must have set the error code accordingly. ','line_number':157,'multiline':True]
['text':' else ignore the reset, close and clone calls. ','line_number':159,'multiline':True]
['text':'
             * Skip if the codepoint has unicode property of default ignorable.
             ','line_number':178,'multiline':True]
['text':' else the caller must have set the error code accordingly. ','line_number':188,'multiline':True]
['text':' else ignore the reset, close and clone calls. ','line_number':190,'multiline':True]
['text':'uses uprv_itou to get a unicode escape sequence of the offensive sequence,
 *uses a clean copy (resetted) of the converter, to convert that unicode
 *escape sequence to the target codepage (if conversion failure happens then
 *we revert to substituting with subchar)
 ','line_number':193,'multiline':True]
['text':'
       * Skip if the codepoint has unicode property of default ignorable.
       ','line_number':227,'multiline':True]
['text':' adding % ','line_number':250,'multiline':True]
['text':' adding U ','line_number':251,'multiline':True]
['text':' adding \ ','line_number':262,'multiline':True]
['text':' adding u ','line_number':263,'multiline':True]
['text':' adding \ ','line_number':269,'multiline':True]
['text':' adding U ','line_number':272,'multiline':True]
['text':' adding u ','line_number':277,'multiline':True]
['text':' adding & ','line_number':284,'multiline':True]
['text':' adding # ','line_number':285,'multiline':True]
['text':' adding ; ','line_number':292,'multiline':True]
['text':' adding & ','line_number':297,'multiline':True]
['text':' adding # ','line_number':298,'multiline':True]
['text':' adding x ','line_number':299,'multiline':True]
['text':' adding ; ','line_number':306,'multiline':True]
['text':' adding { ','line_number':310,'multiline':True]
['text':' adding U ','line_number':311,'multiline':True]
['text':' adding + ','line_number':312,'multiline':True]
['text':' adding } ','line_number':318,'multiline':True]
['text':' adding \ ','line_number':322,'multiline':True]
['text':' Always add space character, because the next character might be whitespace,
             which would erroneously be considered the termination of the escape sequence. ','line_number':324,'multiline':True]
['text':' adding % ','line_number':332,'multiline':True]
['text':' adding U ','line_number':333,'multiline':True]
['text':' reset the error ','line_number':340,'multiline':True]
['text':' else the caller must have set the error code accordingly. ','line_number':380,'multiline':True]
['text':' else ignore the reset, close and clone calls. ','line_number':382,'multiline':True]
['text':' else the caller must have set the error code accordingly. ','line_number':403,'multiline':True]
['text':' else ignore the reset, close and clone calls. ','line_number':405,'multiline':True]
['text':'uses uprv_itou to get a unicode escape sequence of the offensive sequence,
 *and uses that as the substitution sequence
 ','line_number':408,'multiline':True]
['text':' adding % ','line_number':433,'multiline':True]
['text':' adding X ','line_number':434,'multiline':True]
['text':' adding & ','line_number':445,'multiline':True]
['text':' adding # ','line_number':446,'multiline':True]
['text':' adding ; ','line_number':448,'multiline':True]
['text':' adding & ','line_number':455,'multiline':True]
['text':' adding # ','line_number':456,'multiline':True]
['text':' adding x ','line_number':457,'multiline':True]
['text':' adding ; ','line_number':459,'multiline':True]
['text':' adding \ ','line_number':465,'multiline':True]
['text':' adding x ','line_number':466,'multiline':True]
['text':' adding % ','line_number':473,'multiline':True]
['text':' adding X ','line_number':474,'multiline':True]
['text':' reset the error ','line_number':480,'multiline':True]
