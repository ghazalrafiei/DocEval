['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*
*   Copyright (C) 2001-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*
* File ustrtrns.cpp
*
* Modification History:
*
*   Date        Name        Description
*   9/10/2001    Ram    Creation.
******************************************************************************
','line_number':3,'multiline':True]
['text':'******************************************************************************
 *
 * u_strTo* and u_strFrom* APIs
 * WCS functions moved to ustr_wcs.c for better modularization
 *
 *******************************************************************************
 ','line_number':20,'multiline':True]
['text':' args check ','line_number':54,'multiline':True]
['text':' simple loop for conversion of a NUL-terminated BMP string ','line_number':76,'multiline':True]
['text':' "complicated" case, find the end of the remaining string ','line_number':88,'multiline':True]
['text':' convert with length ','line_number':95,'multiline':True]
['text':' usually "loops" once; twice only for writing subchar ','line_number':99,'multiline':True]
['text':' surrogate code point, or not a Unicode code point at all ','line_number':116,'multiline':True]
['text':' Terminate the buffer ','line_number':133,'multiline':True]
['text':' args check ','line_number':169,'multiline':True]
['text':' simple loop for conversion of a NUL-terminated BMP string ','line_number':191,'multiline':True]
['text':' "complicated" case, find the end of the remaining string ','line_number':202,'multiline':True]
['text':' convert with length ','line_number':209,'multiline':True]
['text':' write or count ch below ','line_number':213,'multiline':True]
['text':' unpaired surrogate ','line_number':218,'multiline':True]
['text':' Terminate the buffer ','line_number':239,'multiline':True]
['text':' args check ','line_number':267,'multiline':True]
['text':'
     * Inline processing of UTF-8 byte sequences:
     *
     * Byte sequences for the most common characters are handled inline in
     * the conversion loops. In order to reduce the path lengths for those
     * characters, the tests are arranged in a kind of binary search.
     * ASCII (<=0x7f) is checked first, followed by the dividing point
     * between 2- and 3-byte sequences (0xe0).
     * The 3-byte branch is tested first to speed up CJK text.
     * The compiler should combine the subtractions for the two tests for 0xe0.
     * Each branch then tests for the other end of its range.
     ','line_number':287,'multiline':True]
['text':'
         * Transform a NUL-terminated string.
         * The code explicitly checks for NULs only in the lead byte position.
         * A NUL byte in the trail byte position fails the trail byte range check anyway.
         ','line_number':301,'multiline':True]
['text':' modified copy of U8_NEXT()','line_number':309,'multiline':False]
['text':' handle U+0800..U+FFFF inline ','line_number':315,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':321,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':327,'multiline':True]
['text':' Pre-flight the rest of the string. ','line_number':347,'multiline':True]
['text':' modified copy of U8_NEXT()','line_number':349,'multiline':False]
['text':' handle U+0800..U+FFFF inline ','line_number':355,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':361,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':367,'multiline':True]
['text':' srcLength >= 0 ','line_number':377,'multiline':True]
['text':' Faster loop without ongoing checking for srcLength and pDestLimit. ','line_number':378,'multiline':True]
['text':'
             * Each iteration of the inner loop progresses by at most 3 UTF-8
             * bytes and one UChar, for most characters.
             * For supplementary code points (4 & 2), which are rare,
             * there is an additional adjustment.
             ','line_number':382,'multiline':True]
['text':' min(remaining dest, remaining src/3) ','line_number':391,'multiline':True]
['text':'
                 * Too much overhead if we get near the end of the string,
                 * continue with the next loop.
                 ','line_number':394,'multiline':True]
['text':' modified copy of U8_NEXT()','line_number':402,'multiline':False]
['text':' handle U+0800..U+FFFF inline ','line_number':408,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':415,'multiline':True]
['text':' We may read up to four bytes and write up to two UChars,','line_number':423,'multiline':False]
['text':' which we didn't account for with computing count,','line_number':424,'multiline':False]
['text':' so we adjust it here.','line_number':425,'multiline':False]
['text':' back out byte c','line_number':427,'multiline':False]
['text':' function call for "complicated" and error cases ','line_number':432,'multiline':True]
['text':' modified copy of U8_NEXT()','line_number':449,'multiline':False]
['text':' handle U+0800..U+FFFF inline ','line_number':455,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':462,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':469,'multiline':True]
['text':' Pre-flight the rest of the string. ','line_number':489,'multiline':True]
['text':' modified copy of U8_NEXT()','line_number':491,'multiline':False]
['text':' handle U+0800..U+FFFF inline ','line_number':497,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':504,'multiline':True]
['text':' function call for "complicated" and error cases ','line_number':511,'multiline':True]
['text':' Terminate the buffer ','line_number':533,'multiline':True]
['text':' args check ','line_number':565,'multiline':True]
['text':' Transform a NUL-terminated string. ','line_number':578,'multiline':True]
['text':' trail bytes ','line_number':580,'multiline':True]
['text':'
                 * ASCII, or a trail byte in lead position which is treated like
                 * a single-byte sequence for better character boundary
                 * resynchronization after illegal sequences.
                 ','line_number':584,'multiline':True]
['text':' U+0080..U+07FF ','line_number':592,'multiline':True]
['text':' 0x3080 = (0xc0 << 6) + 0x80 ','line_number':594,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':599,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':601,'multiline':True]
['text':' 0x2080 = (0x80 << 6) + 0x80 ','line_number':602,'multiline':True]
['text':' f0..f4 ','line_number':607,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':607,'multiline':True]
['text':' 0x3c82080 = (0xf0 << 18) + (0x80 << 12) + (0x80 << 6) + 0x80 ','line_number':610,'multiline':True]
['text':' truncated character at the end ','line_number':623,'multiline':True]
['text':' Pre-flight the rest of the string. ','line_number':629,'multiline':True]
['text':'
                 * ASCII, or a trail byte in lead position which is treated like
                 * a single-byte sequence for better character boundary
                 * resynchronization after illegal sequences.
                 ','line_number':632,'multiline':True]
['text':' U+0080..U+07FF ','line_number':640,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':646,'multiline':True]
['text':' f0..f4 ','line_number':652,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':652,'multiline':True]
['text':' truncated character at the end ','line_number':660,'multiline':True]
['text':' srcLength >= 0 ','line_number':664,'multiline':True]
['text':'
         * This function requires that if srcLength is given, then it must be
         * destCapatity >= srcLength so that we need not check for
         * destination buffer overflow in the loop.
         ','line_number':667,'multiline':True]
['text':' this likely overestimates the true destLength! ','line_number':674,'multiline':True]
['text':' temporarily reduce pSrcLimit ','line_number':681,'multiline':True]
['text':' in this loop, we can always access at least 4 bytes, up to pSrc+3 ','line_number':683,'multiline':True]
['text':'
                     * ASCII, or a trail byte in lead position which is treated like
                     * a single-byte sequence for better character boundary
                     * resynchronization after illegal sequences.
                     ','line_number':687,'multiline':True]
['text':' U+0080..U+07FF ','line_number':693,'multiline':True]
['text':' 0x3080 = (0xc0 << 6) + 0x80 ','line_number':694,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':696,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':697,'multiline':True]
['text':' 0x2080 = (0x80 << 6) + 0x80 ','line_number':698,'multiline':True]
['text':' f0..f4 ','line_number':701,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':701,'multiline':True]
['text':' 0x3c82080 = (0xf0 << 18) + (0x80 << 12) + (0x80 << 6) + 0x80 ','line_number':702,'multiline':True]
['text':' restore original pSrcLimit ','line_number':711,'multiline':True]
['text':'
                 * ASCII, or a trail byte in lead position which is treated like
                 * a single-byte sequence for better character boundary
                 * resynchronization after illegal sequences.
                 ','line_number':717,'multiline':True]
['text':' U+0080..U+07FF ','line_number':724,'multiline':True]
['text':' 0x3080 = (0xc0 << 6) + 0x80 ','line_number':726,'multiline':True]
['text':' U+0800..U+FFFF ','line_number':730,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':732,'multiline':True]
['text':' 0x2080 = (0x80 << 6) + 0x80 ','line_number':733,'multiline':True]
['text':' f0..f4 ','line_number':739,'multiline':True]
['text':' U+10000..U+10FFFF ','line_number':739,'multiline':True]
['text':' 0x3c82080 = (0xf0 << 18) + (0x80 << 12) + (0x80 << 6) + 0x80 ','line_number':741,'multiline':True]
['text':' truncated character at the end ','line_number':752,'multiline':True]
['text':' Terminate the buffer ','line_number':764,'multiline':True]
['text':' it is 0<=c<=0x10ffff and not a surrogate if called by a validating function ','line_number':772,'multiline':True]
['text':' if((uint32_t)(c)<=0x10ffff) ','line_number':782,'multiline':True]
['text':' args check ','line_number':806,'multiline':True]
['text':' ch is a surrogate ','line_number':851,'multiline':True]
['text':'need not check for NUL because NUL fails U16_IS_TRAIL() anyway','line_number':854,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':862,'multiline':True]
['text':' convert and append','line_number':869,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':891,'multiline':True]
['text':' Faster loop without ongoing checking for pSrcLimit and pDestLimit. ','line_number':900,'multiline':True]
['text':'
             * Each iteration of the inner loop progresses by at most 3 UTF-8
             * bytes and one UChar, for most characters.
             * For supplementary code points (4 & 2), which are rare,
             * there is an additional adjustment.
             ','line_number':902,'multiline':True]
['text':' min(remaining dest/3, remaining src) ','line_number':911,'multiline':True]
['text':'
                 * Too much overhead if we get near the end of the string,
                 * continue with the next loop.
                 ','line_number':914,'multiline':True]
['text':' ch is a surrogate ','line_number':931,'multiline':True]
['text':'
                     * We will read two UChars and probably output four bytes,
                     * which we didn't account for with computing count,
                     * so we adjust it here.
                     ','line_number':932,'multiline':True]
['text':' undo ch=*pSrc++ for the lead surrogate ','line_number':938,'multiline':True]
['text':' recompute count ','line_number':939,'multiline':True]
['text':' writing 4 bytes per 2 UChars is ok ','line_number':946,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':952,'multiline':True]
['text':' convert and append','line_number':961,'multiline':True]
['text':' ch is a surrogate ','line_number':994,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':1004,'multiline':True]
['text':' convert and append','line_number':1011,'multiline':True]
['text':' Unicode 3.2 forbids surrogate code points in UTF-8 ','line_number':1034,'multiline':True]
['text':' Terminate the buffer ','line_number':1051,'multiline':True]
['text':' args check ','line_number':1079,'multiline':True]
['text':'
         * Transform a NUL-terminated ASCII string.
         * Handle non-ASCII strings with slower code.
         ','line_number':1100,'multiline':True]
['text':' Terminate the buffer ','line_number':1115,'multiline':True]
['text':' Faster loop without ongoing checking for srcLength and pDestLimit. ','line_number':1122,'multiline':True]
['text':' fast ASCII loop ','line_number':1130,'multiline':True]
['text':'
         * Each iteration of the inner loop progresses by at most 3 UTF-8
         * bytes and one UChar.
         ','line_number':1141,'multiline':True]
['text':' min(remaining dest, remaining src/3) ','line_number':1150,'multiline':True]
['text':'
             * Too much overhead if we get near the end of the string,
             * continue with the next loop.
             ','line_number':1153,'multiline':True]
['text':' handle U+0000..U+FFFF inline ','line_number':1165,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':1170,'multiline':True]
['text':' handle U+0000..U+07FF inline ','line_number':1176,'multiline':True]
['text':'
                     * We need to write two UChars, adjusted count for that,
                     * and ran out of space.
                     ','line_number':1190,'multiline':True]
['text':' back out byte ch','line_number':1194,'multiline':False]
['text':' function call for error cases ','line_number':1197,'multiline':True]
['text':' handle U+0000..U+FFFF inline ','line_number':1212,'multiline':True]
['text':' no need for (ch & 0xf) because the upper bits are truncated after <<12 in the cast to (UChar) ','line_number':1218,'multiline':True]
['text':' handle U+0000..U+07FF inline ','line_number':1224,'multiline':True]
['text':' function call for error cases ','line_number':1239,'multiline':True]
['text':' Pre-flight the rest of the string. ','line_number':1257,'multiline':True]
['text':' handle U+0000..U+FFFF inline ','line_number':1264,'multiline':True]
['text':' handle U+0000..U+07FF inline ','line_number':1275,'multiline':True]
['text':' function call for error cases ','line_number':1290,'multiline':True]
['text':' Terminate the buffer ','line_number':1307,'multiline':True]
['text':' args check ','line_number':1327,'multiline':True]
['text':' Convert NUL-terminated ASCII, then find the string length. ','line_number':1339,'multiline':True]
['text':' Terminate the buffer ','line_number':1350,'multiline':True]
['text':' Faster loop without ongoing checking for pSrcLimit and pDestLimit. ','line_number':1357,'multiline':True]
['text':' fast ASCII loop ','line_number':1363,'multiline':True]
['text':'
         * Each iteration of the inner loop progresses by at most 3 UTF-8
         * bytes and one UChar.
         ','line_number':1374,'multiline':True]
['text':' min(remaining dest/3, remaining src) ','line_number':1380,'multiline':True]
['text':'
             * Too much overhead if we get near the end of the string,
             * continue with the next loop.
             ','line_number':1383,'multiline':True]
['text':' Terminate the buffer ','line_number':1448,'multiline':True]
