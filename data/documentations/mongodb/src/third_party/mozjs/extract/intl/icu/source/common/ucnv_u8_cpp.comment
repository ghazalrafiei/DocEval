['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'  
**********************************************************************
*   Copyright (C) 2002-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   file name:  ucnv_u8.c
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2002jul01
*   created by: Markus W. Scherer
*
*   UTF-8 converter implementation. Used to be in ucnv_utf.c.
*
*   Also, CESU-8 implementation, see UTR 26.
*   The CESU-8 converter uses all the same functions as the
*   UTF-8 converter, with a branch for converting supplementary code points.
','line_number':3,'multiline':True]
['text':' Prototypes --------------------------------------------------------------- ','line_number':37,'multiline':True]
['text':' Keep these here to make finicky compilers happy ','line_number':39,'multiline':True]
['text':' UTF-8 -------------------------------------------------------------------- ','line_number':47,'multiline':True]
['text':' Restore size of current sequence ','line_number':78,'multiline':True]
['text':' restore # of bytes to consume ','line_number':81,'multiline':True]
['text':' restore # of bytes consumed ','line_number':82,'multiline':True]
['text':'Stores the previously calculated ch from a previous call','line_number':85,'multiline':True]
['text':' Simple case ','line_number':94,'multiline':True]
['text':' store the first char ','line_number':100,'multiline':True]
['text':' lookup current sequence length ','line_number':102,'multiline':True]
['text':' i < inBytes ','line_number':114,'multiline':True]
['text':' stores a partially calculated target','line_number':122,'multiline':True]
['text':' In CESU-8, only surrogates, not supplementary code points, are encoded directly.','line_number':130,'multiline':False]
['text':' Remove the accumulated high bits ','line_number':133,'multiline':True]
['text':' Normal valid byte when the loop has not prematurely terminated (i < inBytes) ','line_number':136,'multiline':True]
['text':' fits in 16 bits ','line_number':139,'multiline':True]
['text':' write out the surrogates ','line_number':144,'multiline':True]
['text':' Put in overflow buffer (not handled here) ','line_number':153,'multiline':True]
['text':' End of target buffer ','line_number':173,'multiline':True]
['text':' Restore size of current sequence ','line_number':196,'multiline':True]
['text':' restore # of bytes to consume ','line_number':199,'multiline':True]
['text':' restore # of bytes consumed ','line_number':200,'multiline':True]
['text':'Stores the previously calculated ch from a previous call','line_number':203,'multiline':True]
['text':' Simple case ','line_number':211,'multiline':True]
['text':' i < inBytes ','line_number':231,'multiline':True]
['text':' In CESU-8, only surrogates, not supplementary code points, are encoded directly.','line_number':246,'multiline':False]
['text':' Remove the accumulated high bits ','line_number':249,'multiline':True]
['text':' Normal valid byte when the loop has not prematurely terminated (i < inBytes) ','line_number':252,'multiline':True]
['text':' fits in 16 bits ','line_number':255,'multiline':True]
['text':' write out the surrogates ','line_number':261,'multiline':True]
['text':' End of target buffer ','line_number':290,'multiline':True]
['text':' Single byte ','line_number':325,'multiline':True]
['text':' Double byte ','line_number':329,'multiline':True]
['text':' Check for surrogates ','line_number':344,'multiline':True]
['text':' test both code units ','line_number':348,'multiline':True]
['text':' convert and consume this supplementary code point ','line_number':350,'multiline':True]
['text':' exit this condition tree ','line_number':353,'multiline':True]
['text':' this is an unpaired trail or lead code unit ','line_number':356,'multiline':True]
['text':' callback(illegal) ','line_number':357,'multiline':True]
['text':' no more input ','line_number':364,'multiline':True]
['text':' Do we write the buffer directly for speed,
            or do we have to be careful about target buffer space? ','line_number':370,'multiline':True]
['text':' There was enough space to write the codepoint directly. ','line_number':387,'multiline':True]
['text':' We might run out of room soon. Write it slowly. ','line_number':391,'multiline':True]
['text':' Single byte ','line_number':445,'multiline':True]
['text':' Double byte ','line_number':450,'multiline':True]
['text':' Check for surrogates ','line_number':467,'multiline':True]
['text':' test both code units ','line_number':474,'multiline':True]
['text':' convert and consume this supplementary code point ','line_number':476,'multiline':True]
['text':' exit this condition tree ','line_number':480,'multiline':True]
['text':' this is an unpaired trail or lead code unit ','line_number':483,'multiline':True]
['text':' callback(illegal) ','line_number':484,'multiline':True]
['text':' no more input ','line_number':491,'multiline':True]
['text':' Do we write the buffer directly for speed,
            or do we have to be careful about target buffer space? ','line_number':497,'multiline':True]
['text':' There was enough space to write the codepoint directly. ','line_number':514,'multiline':True]
['text':' We might run out of room soon. Write it slowly. ','line_number':525,'multiline':True]
['text':' UTF-8 only here, the framework handles CESU-8 to combine surrogate pairs ','line_number':563,'multiline':True]
['text':' no input ','line_number':569,'multiline':True]
['text':'The byte sequence is longer than the buffer area passed','line_number':590,'multiline':True]
['text':' check if all of the remaining bytes are trail bytes ','line_number':593,'multiline':True]
['text':' error even before we run out of input ','line_number':604,'multiline':True]
['text':' countTrailBytes == 3','line_number':627,'multiline':False]
['text':' UTF-8-from-UTF-8 conversion functions ------------------------------------ ','line_number':646,'multiline':True]
['text':' "Convert" UTF-8 to UTF-8: Validate and copy. Modified from ucnv_DBCSFromUTF8(). ','line_number':649,'multiline':True]
['text':' set up the local pointers ','line_number':665,'multiline':True]
['text':' get the converter state from the UTF-8 UConverter ','line_number':672,'multiline':True]
['text':'
         * Not enough input to complete the partial character.
         * Jump to moreBytes below - it will not output to target.
         ','line_number':684,'multiline':True]
['text':'
         * Not enough target capacity to output the partial character.
         * Let the standard converter handle this.
         ','line_number':689,'multiline':True]
['text':' Use a single counter for source and target, counting the minimum of','line_number':696,'multiline':False]
['text':' the source length and the target capacity.','line_number':697,'multiline':False]
['text':' Let the standard converter handle edge cases.','line_number':698,'multiline':False]
['text':' The conversion loop checks count>0 only once per character.','line_number':703,'multiline':False]
['text':' If the buffer ends with a truncated sequence,','line_number':704,'multiline':False]
['text':' then we reduce the count to stop before that,','line_number':705,'multiline':False]
['text':' and collect the remaining bytes after the conversion loop.','line_number':706,'multiline':False]
['text':' Do not go back into the bytes that will be read for finishing a partial','line_number':708,'multiline':False]
['text':' sequence from the previous buffer.','line_number':709,'multiline':False]
['text':' See note in ucnv_SBCSFromUTF8() about this goto. ','line_number':719,'multiline':True]
['text':' conversion loop ','line_number':722,'multiline':True]
['text':' convert ASCII ','line_number':726,'multiline':True]
['text':' handle U+0800..U+FFFF inline ','line_number':732,'multiline':True]
['text':' handle U+0080..U+07FF inline ','line_number':745,'multiline':True]
['text':' handle "complicated" and error cases, and continuing partial characters ','line_number':757,'multiline':True]
['text':' sequence too short, stop with toULength<toULimit ','line_number':771,'multiline':True]
['text':' store the partial UTF-8 character, compatible with the regular UTF-8 converter ','line_number':774,'multiline':True]
['text':' error handling: illegal UTF-8 byte sequence ','line_number':789,'multiline':True]
['text':' copy the legal byte sequence to the target ','line_number':801,'multiline':True]
['text':' collect a truncated byte sequence ','line_number':825,'multiline':True]
['text':' partial byte sequence at end of source ','line_number':831,'multiline':True]
['text':' partial-sequence target overflow: fall back to the pivoting implementation ','line_number':844,'multiline':True]
['text':' write back the updated pointers ','line_number':850,'multiline':True]
['text':' UTF-8 converter data ----------------------------------------------------- ','line_number':857,'multiline':True]
['text':' The 1208 CCSID refers to any version of Unicode of UTF-8 ','line_number':885,'multiline':True]
['text':' max 3 bytes per UChar from UTF-8 (4 bytes from surrogate _pair_) ','line_number':890,'multiline':True]
['text':' reserved ','line_number':894,'multiline':True]
['text':' CESU-8 converter data ---------------------------------------------------- ','line_number':901,'multiline':True]
['text':' CCSID for CESU-8 ','line_number':932,'multiline':True]
['text':' reserved ','line_number':937,'multiline':True]
