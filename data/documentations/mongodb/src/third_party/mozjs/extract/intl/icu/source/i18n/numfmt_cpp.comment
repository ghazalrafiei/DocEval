['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
* Copyright (C) 1997-2015, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File NUMFMT.CPP
*
* Modification History:
*
*   Date        Name        Description
*   02/19/97    aliu        Converted from java.
*   03/18/97    clhuang     Implemented with C++ APIs.
*   04/17/97    aliu        Enlarged MAX_INTEGER_DIGITS to fully accommodate the
*                           largest double, by default.
*                           Changed DigitCount to int per code review.
*    07/20/98    stephen        Changed operator== to check for grouping
*                            Changed setMaxIntegerDigits per Java implementation.
*                            Changed setMinIntegerDigits per Java implementation.
*                            Changed setMinFractionDigits per Java implementation.
*                            Changed setMaxFractionDigits per Java implementation.
********************************************************************************
','line_number':3,'multiline':True]
['text':'#define FMT_DEBUG','line_number':60,'multiline':False]
['text':' If no number pattern can be located for a locale, this is the last','line_number':75,'multiline':False]
['text':' resort. The patterns are same as the ones in root locale.','line_number':76,'multiline':False]
['text':' "#,##0.###" ','line_number':78,'multiline':True]
['text':' "\u00A4\u00A0#,##0.00" ','line_number':81,'multiline':True]
['text':' "#,##0%" ','line_number':84,'multiline':True]
['text':' "#E0" ','line_number':87,'multiline':True]
['text':' "\u00A4\u00A4\u00A0#,##0.00" ','line_number':90,'multiline':True]
['text':' "#,##0.### \u00A4\u00A4\u00A4','line_number':93,'multiline':True]
['text':' "\u00A4\u00A0#,##0.00" ','line_number':96,'multiline':True]
['text':' If the maximum base 10 exponent were 4, then the largest number would','line_number':104,'multiline':False]
['text':' be 99,999 which has 5 digits.','line_number':105,'multiline':False]
['text':' On IEEE754 systems gMaxIntegerDigits is 308 + possible denormalized 15 digits + rounding digit','line_number':106,'multiline':False]
['text':' With big decimal, the max exponent is 999,999,999 and the max number of digits is the same, 999,999,999','line_number':107,'multiline':False]
['text':' UNUM_PATTERN_DECIMAL','line_number':112,'multiline':False]
['text':' UNUM_DECIMAL','line_number':113,'multiline':False]
['text':' UNUM_CURRENCY','line_number':114,'multiline':False]
['text':' UNUM_PERCENT','line_number':115,'multiline':False]
['text':' UNUM_SCIENTIFIC','line_number':116,'multiline':False]
['text':' UNUM_SPELLOUT','line_number':117,'multiline':False]
['text':' UNUM_ORDINAL','line_number':118,'multiline':False]
['text':' UNUM_DURATION','line_number':119,'multiline':False]
['text':' UNUM_NUMBERING_SYSTEM','line_number':120,'multiline':False]
['text':' UNUM_PATTERN_RULEBASED','line_number':121,'multiline':False]
['text':' UNUM_CURRENCY_ISO','line_number':122,'multiline':False]
['text':' UNUM_CURRENCY_PLURAL','line_number':123,'multiline':False]
['text':' UNUM_CURRENCY_ACCOUNTING','line_number':124,'multiline':False]
['text':' UNUM_CASH_CURRENCY ','line_number':125,'multiline':False]
['text':' UNUM_DECIMAL_COMPACT_SHORT','line_number':126,'multiline':False]
['text':' UNUM_DECIMAL_COMPACT_LONG','line_number':127,'multiline':False]
['text':' UNUM_CURRENCY_STANDARD','line_number':128,'multiline':False]
['text':' Keys used for accessing resource bundles','line_number':131,'multiline':False]
['text':' NULL ','line_number':134,'multiline':True]
['text':' UNUM_PATTERN_DECIMAL','line_number':134,'multiline':False]
['text':' UNUM_DECIMAL','line_number':135,'multiline':False]
['text':' UNUM_CURRENCY','line_number':136,'multiline':False]
['text':' UNUM_PERCENT','line_number':137,'multiline':False]
['text':' UNUM_SCIENTIFIC','line_number':138,'multiline':False]
['text':' NULL ','line_number':139,'multiline':True]
['text':' UNUM_SPELLOUT','line_number':139,'multiline':False]
['text':' NULL ','line_number':140,'multiline':True]
['text':' UNUM_ORDINAL','line_number':140,'multiline':False]
['text':' NULL ','line_number':141,'multiline':True]
['text':' UNUM_DURATION','line_number':141,'multiline':False]
['text':' NULL ','line_number':142,'multiline':True]
['text':' UNUM_NUMBERING_SYSTEM','line_number':142,'multiline':False]
['text':' NULL ','line_number':143,'multiline':True]
['text':' UNUM_PATTERN_RULEBASED','line_number':143,'multiline':False]
['text':' For UNUM_CURRENCY_ISO and UNUM_CURRENCY_PLURAL,','line_number':144,'multiline':False]
['text':' the pattern is the same as the pattern of UNUM_CURRENCY','line_number':145,'multiline':False]
['text':' except for replacing the single currency sign with','line_number':146,'multiline':False]
['text':' double currency sign or triple currency sign.','line_number':147,'multiline':False]
['text':' UNUM_CURRENCY_ISO','line_number':148,'multiline':False]
['text':' UNUM_CURRENCY_PLURAL','line_number':149,'multiline':False]
['text':' UNUM_CURRENCY_ACCOUNTING','line_number':150,'multiline':False]
['text':' UNUM_CASH_CURRENCY','line_number':151,'multiline':False]
['text':' NULL ','line_number':152,'multiline':True]
['text':' UNUM_DECIMAL_COMPACT_SHORT','line_number':152,'multiline':False]
['text':' NULL ','line_number':153,'multiline':True]
['text':' UNUM_DECIMAL_COMPACT_LONG','line_number':153,'multiline':False]
['text':' UNUM_CURRENCY_STANDARD','line_number':154,'multiline':False]
['text':' Static hashtable cache of NumberingSystem objects used by NumberFormat','line_number':157,'multiline':False]
['text':'*
 * Release all static memory held by Number Format.
 ','line_number':166,'multiline':True]
['text':' delete NumberingSystem_cache;','line_number':185,'multiline':False]
['text':' *****************************************************************************','line_number':193,'multiline':False]
['text':' class NumberFormat','line_number':194,'multiline':False]
['text':' *****************************************************************************','line_number':195,'multiline':False]
['text':' -------------------------------------','line_number':202,'multiline':False]
['text':' SimpleNumberFormatFactory implementation','line_number':203,'multiline':False]
['text':' #if !UCONFIG_NO_SERVICE ','line_number':227,'multiline':True]
['text':' -------------------------------------','line_number':229,'multiline':False]
['text':' default constructor','line_number':230,'multiline':False]
['text':' invariant, >= minFractionDigits','line_number':235,'multiline':False]
['text':' -------------------------------------','line_number':244,'multiline':False]
['text':' -------------------------------------','line_number':254,'multiline':False]
['text':' copy constructor','line_number':255,'multiline':False]
['text':' -------------------------------------','line_number':263,'multiline':False]
['text':' assignment operator','line_number':264,'multiline':False]
['text':' -------------------------------------','line_number':286,'multiline':False]
['text':' Format::operator== guarantees this cast is safe','line_number':291,'multiline':False]
['text':' This code makes it easy to determine why two format objects that should','line_number':295,'multiline':False]
['text':' be equal aren't.','line_number':296,'multiline':False]
['text':' -------------------------------------','line_number':348,'multiline':False]
['text':' Default implementation sets unsupported error; subclasses should','line_number':349,'multiline':False]
['text':' override.','line_number':350,'multiline':False]
['text':' unused number ','line_number':353,'multiline':True]
['text':' unused posIter ','line_number':355,'multiline':True]
['text':' -------------------------------------','line_number':364,'multiline':False]
['text':' Default implementation sets unsupported error; subclasses should','line_number':365,'multiline':False]
['text':' override.','line_number':366,'multiline':False]
['text':' unused number ','line_number':369,'multiline':True]
['text':' unused posIter ','line_number':371,'multiline':True]
['text':' -------------------------------------','line_number':380,'multiline':False]
['text':' Default implementation sets unsupported error; subclasses should','line_number':381,'multiline':False]
['text':' override.','line_number':382,'multiline':False]
['text':' unused number ','line_number':385,'multiline':True]
['text':' unused posIter ','line_number':387,'multiline':True]
['text':' ------------------------------------------','line_number':396,'multiline':False]
['text':' These functions add the status code, just fall back to the non-status versions','line_number':397,'multiline':False]
['text':' -------------------------------------','line_number':436,'multiline':False]
['text':' Decimal Number format() default implementation ','line_number':437,'multiline':False]
['text':' Subclasses do not normally override this function, but rather the DigitList','line_number':438,'multiline':False]
['text':' formatting functions..','line_number':439,'multiline':False]
['text':'   The expected call chain from here is','line_number':440,'multiline':False]
['text':'      this function ->','line_number':441,'multiline':False]
['text':'      NumberFormat::format(Formattable  ->','line_number':442,'multiline':False]
['text':'      DecimalFormat::format(DigitList    ','line_number':443,'multiline':False]
['text':'','line_number':444,'multiline':False]
['text':'   Or, for subclasses of Formattable that do not know about DigitList,','line_number':445,'multiline':False]
['text':'       this Function ->','line_number':446,'multiline':False]
['text':'       NumberFormat::format(Formattable  ->','line_number':447,'multiline':False]
['text':'       NumberFormat::format(DigitList  ->','line_number':448,'multiline':False]
['text':'       XXXFormat::format(double','line_number':449,'multiline':False]
['text':'*
 *
// Formats the number object and save the format
// result in the toAppendTo string buffer.

// utility to save/restore state, used in two overloads
// of format(const Formattable&...) below.
*
* Old purpose of ArgExtractor was to avoid const. Not thread safe!
*
* keeping it around as a shim.
','line_number':463,'multiline':True]
['text':'nf','line_number':504,'multiline':True]
['text':'status','line_number':504,'multiline':True]
['text':' most commonly o==NULL','line_number':507,'multiline':False]
['text':' getISOCurrency() returns a pointer to internal storage, so we','line_number':510,'multiline':False]
['text':' copy it to retain it across the call to setCurrency().','line_number':511,'multiline':False]
['text':'const UChar* curr = amt->getISOCurrency();','line_number':512,'multiline':False]
['text':' DecimalFormat overrides this function, and handles DigitList based big decimals.','line_number':528,'multiline':False]
['text':' Other subclasses (ChoiceFormat) do not (yet) handle DigitLists,','line_number':529,'multiline':False]
['text':' so this default implementation falls back to formatting decimal numbers as doubles.','line_number':530,'multiline':False]
['text':' DecimalFormat overrides this function, and handles DigitList based big decimals.','line_number':546,'multiline':False]
['text':' Other subclasses (ChoiceFormat) do not (yet) handle DigitLists,','line_number':547,'multiline':False]
['text':' so this default implementation falls back to formatting decimal numbers as doubles.','line_number':548,'multiline':False]
['text':' trying to format a different currency.','line_number':570,'multiline':False]
['text':' Right now, we clone.','line_number':571,'multiline':False]
['text':' next line should NOT recurse, because n is numeric whereas obj was a wrapper around currency amount.','line_number':574,'multiline':False]
['text':' Decimal Number.  We will have a DigitList available if the value was','line_number':579,'multiline':False]
['text':'   set to a decimal number, or if the value originated with a parse.','line_number':580,'multiline':False]
['text':'','line_number':581,'multiline':False]
['text':' The default implementation for formatting a DigitList converts it','line_number':582,'multiline':False]
['text':' to a double, and formats that, allowing formatting classes that don't','line_number':583,'multiline':False]
['text':' know about DigitList to continue to operate as they had.','line_number':584,'multiline':False]
['text':'','line_number':585,'multiline':False]
['text':' DecimalFormat overrides the DigitList formatting functions.','line_number':586,'multiline':False]
['text':' -------------------------------------x','line_number':608,'multiline':False]
['text':' Formats the number object and save the format','line_number':609,'multiline':False]
['text':' result in the toAppendTo string buffer.','line_number':610,'multiline':False]
['text':' trying to format a different currency.','line_number':625,'multiline':False]
['text':' Right now, we clone.','line_number':626,'multiline':False]
['text':' next line should NOT recurse, because n is numeric whereas obj was a wrapper around currency amount.','line_number':629,'multiline':False]
['text':' Decimal Number','line_number':634,'multiline':False]
['text':' -------------------------------------','line_number':656,'multiline':False]
['text':' default so we don't introduce a new abstract method','line_number':663,'multiline':False]
['text':' -------------------------------------','line_number':667,'multiline':False]
['text':' Parses the string and save the result object as well','line_number':668,'multiline':False]
['text':' as the final parsed position.','line_number':669,'multiline':False]
['text':' -------------------------------------','line_number':679,'multiline':False]
['text':' Formats a double number and save the result in a string.','line_number':680,'multiline':False]
['text':' -------------------------------------','line_number':689,'multiline':False]
['text':' Formats a long number and save the result in a string.','line_number':690,'multiline':False]
['text':' -------------------------------------','line_number':699,'multiline':False]
['text':' Formats a long number and save the result in a string.','line_number':700,'multiline':False]
['text':' -------------------------------------','line_number':709,'multiline':False]
['text':' Parses the text and save the result object.  If the returned','line_number':710,'multiline':False]
['text':' parse position is 0, that means the parsing failed, the status','line_number':711,'multiline':False]
['text':' code needs to be set to failure.  Ignores the returned parse','line_number':712,'multiline':False]
['text':' position, otherwise.','line_number':713,'multiline':False]
['text':' Default implementation only -- subclasses should override','line_number':731,'multiline':False]
['text':' indicate failure','line_number':742,'multiline':False]
['text':' -------------------------------------','line_number':751,'multiline':False]
['text':' Sets to only parse integers.','line_number':752,'multiline':False]
['text':' -------------------------------------','line_number':760,'multiline':False]
['text':' Sets whether lenient parse is enabled.','line_number':761,'multiline':False]
['text':' -------------------------------------','line_number':769,'multiline':False]
['text':' Create a number style NumberFormat instance with the default locale.','line_number':770,'multiline':False]
['text':' -------------------------------------','line_number':778,'multiline':False]
['text':' Create a number style NumberFormat instance with the inLocale locale.','line_number':779,'multiline':False]
['text':' -------------------------------------','line_number':787,'multiline':False]
['text':' Create a currency style NumberFormat instance with the default locale.','line_number':788,'multiline':False]
['text':' -------------------------------------','line_number':796,'multiline':False]
['text':' Create a currency style NumberFormat instance with the inLocale locale.','line_number':797,'multiline':False]
['text':' -------------------------------------','line_number':805,'multiline':False]
['text':' Create a percent style NumberFormat instance with the default locale.','line_number':806,'multiline':False]
['text':' -------------------------------------','line_number':814,'multiline':False]
['text':' Create a percent style NumberFormat instance with the inLocale locale.','line_number':815,'multiline':False]
['text':' -------------------------------------','line_number':823,'multiline':False]
['text':' Create a scientific style NumberFormat instance with the default locale.','line_number':824,'multiline':False]
['text':' -------------------------------------','line_number':832,'multiline':False]
['text':' Create a scientific style NumberFormat instance with the inLocale locale.','line_number':833,'multiline':False]
['text':' -------------------------------------','line_number':841,'multiline':False]
['text':' ------------------------------------------','line_number':849,'multiline':False]
['text':'','line_number':850,'multiline':False]
['text':' Registration','line_number':851,'multiline':False]
['text':'','line_number':852,'multiline':False]
['text':'-------------------------------------------','line_number':853,'multiline':False]
['text':' -------------------------------------','line_number':857,'multiline':False]
['text':' service ','line_number':863,'multiline':True]
['text':' -------------------------------------','line_number':870,'multiline':False]
['text':' cast away const ','line_number':897,'multiline':True]
['text':'*
     * Return the set of ids that this factory supports (visible or
     * otherwise).  This can be called often and might need to be
     * cached if it is expensive to create.
     ','line_number':905,'multiline':True]
['text':' cast away const ','line_number':916,'multiline':True]
['text':' actualID ','line_number':950,'multiline':True]
['text':' -------------------------------------','line_number':965,'multiline':False]
['text':' -------------------------------------','line_number':984,'multiline':False]
['text':' -------------------------------------','line_number':1004,'multiline':False]
['text':' -------------------------------------','line_number':1020,'multiline':False]
['text':' no way to return error condition','line_number':1028,'multiline':False]
['text':' UCONFIG_NO_SERVICE ','line_number':1030,'multiline':True]
['text':' -------------------------------------','line_number':1031,'multiline':False]
['text':' -------------------------------------','line_number':1071,'multiline':False]
['text':' Checks if the thousand/10 thousand grouping is used in the','line_number':1072,'multiline':False]
['text':' NumberFormat instance.','line_number':1073,'multiline':False]
['text':' -------------------------------------','line_number':1081,'multiline':False]
['text':' Sets to use the thousand/10 thousand grouping in the','line_number':1082,'multiline':False]
['text':' NumberFormat instance.','line_number':1083,'multiline':False]
['text':' -------------------------------------','line_number':1091,'multiline':False]
['text':' Gets the maximum number of digits for the integral part for','line_number':1092,'multiline':False]
['text':' this NumberFormat instance.','line_number':1093,'multiline':False]
['text':' -------------------------------------','line_number':1100,'multiline':False]
['text':' Sets the maximum number of digits for the integral part for','line_number':1101,'multiline':False]
['text':' this NumberFormat instance.','line_number':1102,'multiline':False]
['text':' -------------------------------------','line_number':1112,'multiline':False]
['text':' Gets the minimum number of digits for the integral part for','line_number':1113,'multiline':False]
['text':' this NumberFormat instance.','line_number':1114,'multiline':False]
['text':' -------------------------------------','line_number':1122,'multiline':False]
['text':' Sets the minimum number of digits for the integral part for','line_number':1123,'multiline':False]
['text':' this NumberFormat instance.','line_number':1124,'multiline':False]
['text':' -------------------------------------','line_number':1134,'multiline':False]
['text':' Gets the maximum number of digits for the fractional part for','line_number':1135,'multiline':False]
['text':' this NumberFormat instance.','line_number':1136,'multiline':False]
['text':' -------------------------------------','line_number':1144,'multiline':False]
['text':' Sets the maximum number of digits for the fractional part for','line_number':1145,'multiline':False]
['text':' this NumberFormat instance.','line_number':1146,'multiline':False]
['text':' -------------------------------------','line_number':1156,'multiline':False]
['text':' Gets the minimum number of digits for the fractional part for','line_number':1157,'multiline':False]
['text':' this NumberFormat instance.','line_number':1158,'multiline':False]
['text':' -------------------------------------','line_number':1166,'multiline':False]
['text':' Sets the minimum number of digits for the fractional part for','line_number':1167,'multiline':False]
['text':' this NumberFormat instance.','line_number':1168,'multiline':False]
['text':' -------------------------------------','line_number':1178,'multiline':False]
['text':'----------------------------------------------------------------------','line_number':1210,'multiline':False]
['text':' -------------------------------------','line_number':1237,'multiline':False]
['text':' Creates the NumberFormat instance of the specified style (number, currency,','line_number':1238,'multiline':False]
['text':' or percent) for the desired locale.','line_number':1239,'multiline':False]
['text':' Number Format code will run with no cache if creation fails.','line_number':1250,'multiline':False]
['text':'unused','line_number':1259,'multiline':True]
['text':' Some styles are not supported. This is a result of merging','line_number':1314,'multiline':False]
['text':' the @draft ICU 4.2 NumberFormat::EStyles into the long-existing UNumberFormatStyle.','line_number':1315,'multiline':False]
['text':' Ticket #8503 is for reviewing/fixing/merging the two relevant implementations:','line_number':1316,'multiline':False]
['text':' this one and unum_open().','line_number':1317,'multiline':False]
['text':' The UNUM_PATTERN_ styles are not supported here','line_number':1318,'multiline':False]
['text':' because this method does not take a pattern string.','line_number':1319,'multiline':False]
['text':' if the locale has "@compat=host", create a host-specific NumberFormat','line_number':1330,'multiline':False]
['text':' fall-through','line_number':1337,'multiline':False]
['text':' do not support plural formatting here','line_number':1341,'multiline':False]
['text':' Use numbering system cache hashtable','line_number':1359,'multiline':False]
['text':' Get cached numbering system','line_number':1362,'multiline':False]
['text':' TODO: Bad hash key usage, see ticket #8504.','line_number':1366,'multiline':False]
['text':' check results of getting a numbering system','line_number':1381,'multiline':False]
['text':' Loads the decimal symbols of the desired locale.','line_number':1398,'multiline':False]
['text':' Load the pattern from data using the common library function','line_number':1404,'multiline':False]
['text':' replace single currency sign in the pattern with double currency sign','line_number':1460,'multiline':False]
['text':' if the style is UNUM_CURRENCY_ISO','line_number':1461,'multiline':False]
['text':' "new DecimalFormat()" does not adopt the symbols argument if its memory allocation fails.','line_number':1467,'multiline':False]
['text':' So we can't use adoptInsteadAndCheckErrorCode as we need to know if the 'new' failed.','line_number':1468,'multiline':False]
['text':' if the DecimalFormat object was successfully new'ed, then it will own symbolsToAdopt, even if the status is a failure.','line_number':1473,'multiline':False]
['text':' if it is cash currency style, setCurrencyUsage with usage','line_number':1484,'multiline':False]
['text':'*
 * Get the rounding mode.
 * @return A rounding mode
 ','line_number':1504,'multiline':True]
['text':' Default value. ICU4J throws an exception and we can't change this API.','line_number':1509,'multiline':False]
['text':'*
 * Set the rounding mode.  This has no effect unless the rounding
 * increment is greater than zero.
 * @param roundingMode A rounding mode
 ','line_number':1513,'multiline':True]
['text':'roundingMode','line_number':1518,'multiline':True]
['text':' No-op ICU4J throws an exception, and we can't change this API.','line_number':1519,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1524,'multiline':True]
['text':'eof','line_number':1526,'multiline':False]
