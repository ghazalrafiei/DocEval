['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (C) 2001-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   05/24/01    aliu        Creation.
**********************************************************************
','line_number':3,'multiline':True]
['text':' Need to look back 2 characters in the case of "can't"','line_number':33,'multiline':False]
['text':'*
 * Destructor.
 ','line_number':37,'multiline':True]
['text':'*
 * Copy constructor.
 ','line_number':43,'multiline':True]
['text':'*
 * Assignment operator.
 ','line_number':51,'multiline':True]
['text':'TitlecaseTransliterator& TitlecaseTransliterator::operator=(
                             const TitlecaseTransliterator& o) {
    CaseMapTransliterator::operator=(o);
    return *this;
}','line_number':54,'multiline':True]
['text':'*
 * Transliterator API.
 ','line_number':60,'multiline':True]
['text':'*
 * Implements {@link Transliterator#handleTransliterate}.
 ','line_number':67,'multiline':True]
['text':' TODO reimplement, see ustrcase.c','line_number':74,'multiline':False]
['text':' using a real word break iterator','line_number':75,'multiline':False]
['text':'   instead of just looking for a transition between cased and uncased characters','line_number':76,'multiline':False]
['text':' call CaseMapTransliterator::handleTransliterate() for lowercasing? (set fMap)','line_number':77,'multiline':False]
['text':' needs to take isIncremental into account because case mappings are context-sensitive','line_number':78,'multiline':False]
['text':'   also detect when lowercasing function did not finish because of context','line_number':79,'multiline':False]
['text':' case type: >0 cased (UCASE_LOWER etc.)  ==0 uncased  <0 case-ignorable','line_number':85,'multiline':False]
['text':' Our mode; we are either converting letter toTitle or','line_number':88,'multiline':False]
['text':' toLower.','line_number':89,'multiline':False]
['text':' Determine if there is a preceding context of cased case-ignorable*,','line_number':92,'multiline':False]
['text':' in which case we want to start in toLower mode.  If the','line_number':93,'multiline':False]
['text':' prior context is anything else (including empty) then start','line_number':94,'multiline':False]
['text':' in toTitle mode.','line_number':95,'multiline':False]
['text':' cased','line_number':101,'multiline':False]
['text':' uncased but not ignorable','line_number':104,'multiline':False]
['text':' else (type<0) case-ignorable: continue','line_number':107,'multiline':False]
['text':' Convert things after a cased character toLower; things','line_number':110,'multiline':False]
['text':' after an uncased, non-case-ignorable character toTitle.  Case-ignorable','line_number':111,'multiline':False]
['text':' characters are copied directly and do not change the mode.','line_number':112,'multiline':False]
['text':' not case-ignorable','line_number':129,'multiline':False]
['text':' doTitle=isUncased','line_number':135,'multiline':False]
['text':' fMap() tried to look beyond the context limit','line_number':138,'multiline':False]
['text':' wait for more input','line_number':139,'multiline':False]
['text':' replace the current code point with its full case mapping result','line_number':145,'multiline':False]
['text':' see UCASE_MAX_STRING_LENGTH','line_number':146,'multiline':False]
['text':' string s[result]','line_number':148,'multiline':False]
['text':' single code point','line_number':152,'multiline':False]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':170,'multiline':True]
