['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
 **********************************************************************
 * Copyright (c) 2003-2008, International Business Machines
 * Corporation and others.  All Rights Reserved.
 **********************************************************************
 * Author: Alan Liu
 * Created: September 2 2003
 * Since: ICU 2.8
 **********************************************************************
 ','line_number':3,'multiline':True]
['text':' Only designed to work for positive divisors','line_number':45,'multiline':False]
['text':' N.B. For certain large dividends, on certain platforms, there','line_number':49,'multiline':False]
['text':' is a bug such that the quotient is off by one.  If you doubt','line_number':50,'multiline':False]
['text':' this to be true, set a breakpoint below and run cintltst.','line_number':51,'multiline':False]
['text':' E.g. 6.7317038241449352e+022 / 86400000.0 is wrong on my','line_number':53,'multiline':False]
['text':' machine (too high by one).  4.1792057231752762e+024 /','line_number':54,'multiline':False]
['text':' 86400000.0 is wrong the other way (too low).','line_number':55,'multiline':False]
['text':' For quotients > ~2^53, we won't be able to add or','line_number':59,'multiline':False]
['text':' subtract one, since the LSB of the mantissa will be >','line_number':60,'multiline':False]
['text':' 2^0; that is, the exponent (base 2) will be larger than','line_number':61,'multiline':False]
['text':' the length, in bits, of the mantissa.  In that case, we','line_number':62,'multiline':False]
['text':' can't give a correct answer, so we set the remainder to','line_number':63,'multiline':False]
['text':' zero.  This has the desired effect of making extreme','line_number':64,'multiline':False]
['text':' values give back an approximate answer rather than','line_number':65,'multiline':False]
['text':' crashing.  For example, UDate values above a ~10^25','line_number':66,'multiline':False]
['text':' might all have a time of midnight.','line_number':67,'multiline':False]
['text':' January 1, 1 CE Gregorian','line_number':77,'multiline':False]
['text':' January 1, 1970 CE Gregorian','line_number':78,'multiline':False]
['text':' Julian cal','line_number':92,'multiline':False]
['text':' => Gregorian cal','line_number':93,'multiline':False]
['text':' => month/dom','line_number':94,'multiline':False]
['text':' JD => epoch day','line_number':96,'multiline':False]
['text':' Convert from 1970 CE epoch to 1 CE epoch (Gregorian calendar)','line_number':102,'multiline':False]
['text':' Convert from the day number to the multiple radix','line_number':105,'multiline':False]
['text':' representation.  We use 400-year, 100-year, and 4-year cycles.','line_number':106,'multiline':False]
['text':' For example, the 4-year cycle has 4 years + 1 leap day; giving','line_number':107,'multiline':False]
['text':' 1461 == 365*4 + 1 days.','line_number':108,'multiline':False]
['text':' 400-year cycle length','line_number':109,'multiline':False]
['text':' 100-year cycle length','line_number':110,'multiline':False]
['text':' 4-year cycle length','line_number':111,'multiline':False]
['text':' Dec 31 at end of 4- or 400-year cycle','line_number':115,'multiline':False]
['text':' Gregorian day zero is a Monday.','line_number':122,'multiline':False]
['text':' Common Julian/Gregorian calculation','line_number':126,'multiline':False]
['text':' zero-based DOY for March 1','line_number':128,'multiline':False]
['text':' zero-based month','line_number':132,'multiline':False]
['text':' one-based DOM','line_number':133,'multiline':False]
['text':' one-based doy','line_number':134,'multiline':False]
['text':'eof','line_number':166,'multiline':False]
