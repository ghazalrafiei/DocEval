['text':' Â© 2019 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' loclikelysubtags.cpp','line_number':4,'multiline':False]
['text':' created: 2019may08 Markus W. Scherer','line_number':5,'multiline':False]
['text':' -XA, -PSACCENT','line_number':31,'multiline':False]
['text':' -XB, -PSBIDI','line_number':32,'multiline':False]
['text':' -XC, -PSCRACK','line_number':33,'multiline':False]
['text':' namespace','line_number':35,'multiline':False]
['text':' TODO(ICU-20777): Rename to just LikelySubtagsData.','line_number':52,'multiline':False]
['text':' Read all strings in the resource bundle and convert them to invariant char *.','line_number':81,'multiline':False]
['text':' Also read distance/matcher data if available,','line_number':111,'multiline':False]
['text':' to open & keep only one resource bundle pointer','line_number':112,'multiline':False]
['text':' and to use one single UniqueCharStrings.','line_number':113,'multiline':False]
['text':' LocaleDistance IX_LIMIT','line_number':151,'multiline':False]
['text':' ok for likely subtags','line_number':157,'multiline':False]
['text':' error other than missing resource','line_number':158,'multiline':False]
['text':' Fetch & store invariant-character versions of strings','line_number':163,'multiline':False]
['text':' only after we have collected and de-duplicated all of them.','line_number':164,'multiline':False]
['text':' returns TRUE because i < length','line_number':236,'multiline':False]
['text':' namespace','line_number':257,'multiline':False]
['text':' This function is invoked only via umtx_initOnce().','line_number':260,'multiline':False]
['text':' Cache the result of looking up language="und" encoded as "*", and "und-Zzzz" ("**").','line_number':293,'multiline':False]
['text':' name.startsWith("@x=")','line_number':322,'multiline':False]
['text':' Private use language tag x-subtag-subtag... which CLDR changes to','line_number':323,'multiline':False]
['text':' und-x-subtag-subtag...','line_number':324,'multiline':False]
['text':' namespace','line_number':338,'multiline':False]
['text':' Handle pseudolocales like en-XA, ar-XB, fr-PSCRACK.','line_number':342,'multiline':False]
['text':' They should match only themselves,','line_number':343,'multiline':False]
['text':' not other locales with what looks like the same language and script subtags.','line_number':344,'multiline':False]
['text':' normal locale','line_number':357,'multiline':False]
['text':' else normal locale','line_number':375,'multiline':False]
['text':' (We have no script mappings.)','line_number':379,'multiline':False]
['text':' already maximized','line_number':395,'multiline':False]
['text':' Small optimization: Array lookup for first language letter.','line_number':402,'multiline':False]
['text':' language.length() >= 2','line_number':405,'multiline':False]
['text':' "und" ("*")','line_number':418,'multiline':False]
['text':' Intermediate or final value from just language.','line_number':423,'multiline':False]
['text':' "und-Zzzz" ("**")','line_number':440,'multiline':False]
['text':' Final value from just language or language+script.','line_number':451,'multiline':False]
['text':' Quickly return a copy of the lookup-result LSR','line_number':480,'multiline':False]
['text':' without new allocation of the subtags.','line_number':481,'multiline':False]
['text':' retainOldMask flags = LSR explicit-subtag flags','line_number':493,'multiline':False]
['text':' If likelyInfo >= 0:','line_number':498,'multiline':False]
['text':' likelyInfo bit 1 is set if the previous comparison with lsr','line_number':499,'multiline':False]
['text':' was for equal language and script.','line_number':500,'multiline':False]
['text':' Otherwise the scripts differed.','line_number':501,'multiline':False]
['text':' negative, lsr not better than other','line_number':503,'multiline':False]
['text':' lsr not better than other','line_number':535,'multiline':False]
['text':' Subset of maximize().','line_number':538,'multiline':False]
['text':' Small optimization: Array lookup for first language letter.','line_number':550,'multiline':False]
['text':' language.length() >= 2','line_number':553,'multiline':False]
['text':' "und" ("*")','line_number':562,'multiline':False]
['text':' Intermediate or final value from just language.','line_number':567,'multiline':False]
['text':' "und-Zzzz" ("**")','line_number':577,'multiline':False]
['text':' Final value from just language or language+script.','line_number':588,'multiline':False]
['text':' EBCDIC: If s[i] is not an invariant character,','line_number':605,'multiline':False]
['text':' then c is now 0 and will simply not match anything, which is harmless.','line_number':606,'multiline':False]
['text':' last character of this subtag','line_number':613,'multiline':False]
['text':' TODO(ICU-20777): Switch Locale/uloc_ likely-subtags API from the old code','line_number':631,'multiline':False]
['text':' in loclikely.cpp to this new code, including activating this','line_number':632,'multiline':False]
['text':' minimizeSubtags() function. The LocaleMatcher does not minimize.','line_number':633,'multiline':False]
['text':' We could try just a series of checks, like:','line_number':640,'multiline':False]
['text':' LSR result2 = addLikelySubtags(languageIn, "", "");','line_number':641,'multiline':False]
['text':' if result.equals(result2) return result2;','line_number':642,'multiline':False]
['text':' However, we can optimize 2 of the cases:','line_number':643,'multiline':False]
['text':'   (languageIn, "", "")','line_number':644,'multiline':False]
['text':'   (languageIn, "", regionIn)','line_number':645,'multiline':False]
['text':' value00 = lookup(result.language, "", "")','line_number':647,'multiline':False]
['text':'script is default','line_number':661,'multiline':False]
['text':' The last case is not as easy to optimize.','line_number':671,'multiline':False]
['text':' Maybe do later, but for now use the straightforward code.','line_number':672,'multiline':False]
