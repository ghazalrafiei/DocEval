['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
*   Copyright (C) 2001-2011, International Business Machines
*   Corporation and others.  All Rights Reserved.
**********************************************************************
*   Date        Name        Description
*   07/03/01    aliu        Creation.
**********************************************************************
','line_number':3,'multiline':True]
['text':'*
 * System registration hook.
 ','line_number':30,'multiline':True]
['text':' In the Token, the byte after the NUL is the UNormalization2Mode.','line_number':34,'multiline':False]
['text':'*
 * Factory methods
 ','line_number':57,'multiline':True]
['text':'*
 * Constructs a transliterator.
 ','line_number':73,'multiline':True]
['text':'*
 * Destructor.
 ','line_number':80,'multiline':True]
['text':'*
 * Copy constructor.
 ','line_number':86,'multiline':True]
['text':'*
 * Transliterator API.
 ','line_number':92,'multiline':True]
['text':'*
 * Implements {@link Transliterator#handleTransliterate}.
 ','line_number':99,'multiline':True]
['text':' start and limit of the input range','line_number':104,'multiline':False]
['text':'
     * Normalize as short chunks at a time as possible even in
     * bulk mode, so that styled text is minimally disrupted.
     * In incremental mode, a chunk that ends with offsets.limit
     * must not be normalized.
     *
     * If it was known that the input text is not styled, then
     * a bulk mode normalization could look like this:

    UnicodeString input, normalized;
    int32_t length = limit - start;
    _Replaceable_extractBetween(text, start, limit, input.getBuffer(length));
    input.releaseBuffer(length);

    UErrorCode status = U_ZERO_ERROR;
    fNorm2.normalize(input, normalized, status);

    text.handleReplaceBetween(start, limit, normalized);

    int32_t delta = normalized.length() - length;
    offsets.contextLimit += delta;
    offsets.limit += delta;
    offsets.start = limit + delta;

     ','line_number':111,'multiline':True]
['text':' Skip at least one character so we make progress.','line_number':142,'multiline':False]
['text':' c holds the character at start.','line_number':143,'multiline':False]
['text':' stop in incremental mode when we reach the input limit','line_number':150,'multiline':False]
['text':' in case there are additional characters that could change the','line_number':151,'multiline':False]
['text':' normalization result','line_number':152,'multiline':False]
['text':' replace the input chunk with its normalized form','line_number':161,'multiline':False]
['text':' update all necessary indexes accordingly','line_number':164,'multiline':False]
['text':' #if !UCONFIG_NO_TRANSLITERATION ','line_number':178,'multiline':True]
