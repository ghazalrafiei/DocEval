['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'****************************************************************************
*
*   Copyright (C) 1999-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*****************************************************************************','line_number':3,'multiline':True]
['text':'
 * uconv(1): an iconv(1)-like converter using ICU.
 *
 * Original code by Jonas Utterstr&#x00F6;m <jonas.utterstrom@vittran.norrnod.se>
 * contributed in 1999.
 *
 * Conversion to the C conversion API and many improvements by
 * Yves Arrouye <yves@realnames.com>, current maintainer.
 *
 * Markus Scherer maintainer from 2003.
 * See source code repository history for changes.
 ','line_number':10,'multiline':True]
['text':' Windows likes to rename Unix-like functions ','line_number':51,'multiline':True]
['text':' below from the README ','line_number':65,'multiline':True]
['text':' Bundle containing messages. ','line_number':74,'multiline':True]
['text':'
 * Initialize the message bundle so that message strings can be fetched
 * by u_wmsg().
 *
 ','line_number':76,'multiline':True]
['text':' XXX Sloppy: should be PATH_MAX. ','line_number':86,'multiline':True]
['text':' Set up our static data - if any ','line_number':91,'multiline':True]
['text':' On z/OS, this is failing. ','line_number':92,'multiline':True]
['text':' It may still fail ','line_number':97,'multiline':True]
['text':' Get messages. ','line_number':101,'multiline':True]
['text':' that was try #1, try again with a path ','line_number':114,'multiline':True]
['text':' Mapping of callback names to the callbacks passed to the converter
   API. ','line_number':130,'multiline':True]
['text':' Return a pointer to a callback record given its name. ','line_number':174,'multiline':True]
['text':' We'll do a linear search, there aren't many of them and bsearch()
       may not be that portable. ','line_number':180,'multiline':True]
['text':' Print converter information. If lookfor is set, only that converter will
   be printed, otherwise all converters will be printed. If canon is non
   zero, tags and aliases for each converter are printed too, in the format
   expected for convrters.txt(5). ','line_number':192,'multiline':True]
['text':' If there is a specified name, just handle that now. ','line_number':205,'multiline':True]
['text':'  Because we are printing a canonical name, we need the
            true converter name. We've done that already except for
            the default name (because we want to print the exact
            name one would get when calling ucnv_getDefaultName()
            in non-canon mode). But since we do not know at this
            point if we have the default name or something else, we
            need to normalize again to the canonical converter
            name. ','line_number':212,'multiline':True]
['text':' Print converter names. We come here for one of two reasons: we
       are printing all the names (lookfor was null), or we have a
       single converter to print but in canon mode, hence we need to
       get to it in order to print everything. ','line_number':230,'multiline':True]
['text':' We know where we want to be. ','line_number':242,'multiline':True]
['text':' Set the name either to what we are looking for, or
        to the current converter name. ','line_number':275,'multiline':True]
['text':' Get all the aliases associated to the name. ','line_number':284,'multiline':True]
['text':' Write all the aliases and their tags. ','line_number':299,'multiline':True]
['text':' Print the current alias so that it looks right. ','line_number':312,'multiline':True]
['text':' Look (slowly, linear searching) for a tag. ','line_number':317,'multiline':True]
['text':' -1 to skip the last standard ','line_number':320,'multiline':True]
['text':' List the standard tags ','line_number':324,'multiline':True]
['text':' See if this alias is supported by this standard. ','line_number':329,'multiline':True]
['text':' Print a * after the default standard name ','line_number':335,'multiline':True]
['text':' Terminate this entry. ','line_number':346,'multiline':True]
['text':' Move on. ','line_number':351,'multiline':True]
['text':' Terminate this entry. ','line_number':353,'multiline':True]
['text':' Free temporary data. ','line_number':360,'multiline':True]
['text':' Success. ','line_number':364,'multiline':True]
['text':' Print all available transliterators. If canon is non zero, print
   one transliterator per line. ','line_number':372,'multiline':True]
['text':' Add a terminating newline if needed. ','line_number':399,'multiline':True]
['text':' Success. ','line_number':405,'multiline':True]
['text':' space','line_number':412,'multiline':False]
['text':' carriage return','line_number':413,'multiline':False]
['text':' line feed','line_number':414,'multiline':False]
['text':' newline','line_number':415,'multiline':False]
['text':' line separator','line_number':416,'multiline':False]
['text':' paragraph separator','line_number':417,'multiline':False]
['text':' signature/BOM character','line_number':418,'multiline':False]
['text':' find one of','line_number':423,'multiline':False]
['text':' CR, LF, CRLF, NL, LS, PS','line_number':424,'multiline':False]
['text':' for paragraph ends (see UAX #13/Unicode 4)','line_number':425,'multiline':False]
['text':' and include it in the chunk','line_number':426,'multiline':False]
['text':' all of these characters are on the BMP','line_number':427,'multiline':False]
['text':' do not include FF or VT in case they are part of a paragraph','line_number':428,'multiline':False]
['text':' (important for bidi contexts)','line_number':429,'multiline':False]
['text':' first, see if there is a CRLF split between prev and s','line_number':437,'multiline':False]
['text':' split CRLF, include the LF','line_number':440,'multiline':False]
['text':' complete the last chunk','line_number':442,'multiline':False]
['text':' wait for actual further contents to arrive','line_number':444,'multiline':False]
['text':' check for CRLF','line_number':459,'multiline':False]
['text':' LF may be in the next chunk','line_number':461,'multiline':False]
['text':' include the LF in this chunk','line_number':463,'multiline':False]
['text':' continue collecting the chunk','line_number':470,'multiline':False]
['text':' cannot convert the U+FEFF Unicode signature character (BOM)','line_number':474,'multiline':False]
['text':' can convert the U+FEFF signature character','line_number':475,'multiline':False]
['text':' automatically adds/detects the U+FEFF signature character','line_number':476,'multiline':False]
['text':' check the converter's Unicode signature properties;','line_number':488,'multiline':False]
['text':' the fromUnicode side of the converter must be in its initial state','line_number':489,'multiline':False]
['text':' and will be reset again if it was used','line_number':490,'multiline':False]
['text':' test if the output charset can convert U+FEFF','line_number':496,'multiline':False]
['text':' an error occurred or U+FEFF cannot be converted','line_number':503,'multiline':False]
['text':' test if the output charset emits a signature anyway','line_number':508,'multiline':False]
['text':' "a"','line_number':509,'multiline':False]
['text':' +1 for an added U+FEFF in the intermediate Unicode buffer','line_number':547,'multiline':False]
['text':' add (1) or remove (-1) a U+FEFF Unicode signature character','line_number':574,'multiline':False]
['text':' Convert a file from one encoding to another','line_number':577,'multiline':False]
['text':' Where we are in the file, for error reporting. ','line_number':601,'multiline':True]
['text':' Transliterator acting on Unicode data.','line_number':609,'multiline':False]
['text':' One chunk of the text being collected for transformation.','line_number':610,'multiline':False]
['text':' String to do the transliteration.','line_number':612,'multiline':False]
['text':' use conversion offsets for error messages','line_number':615,'multiline':False]
['text':' unless a transliterator is used -','line_number':616,'multiline':False]
['text':' a text transformation will reorder characters in unpredictable ways','line_number':617,'multiline':False]
['text':' Open the correct input file or connect to stdin for reading input','line_number':620,'multiline':False]
['text':' Create transliterator as needed.','line_number':651,'multiline':False]
['text':' Create from rules or by ID as needed. ','line_number':657,'multiline':True]
['text':' Create codepage converter. If the codepage or its aliases weren't','line_number':693,'multiline':False]
['text':' available, it returns NULL and a failure code. We also set the','line_number':694,'multiline':False]
['text':' callbacks, and return errors in the same way.','line_number':695,'multiline':False]
['text':' OK, we can convert now.','line_number':731,'multiline':False]
['text':' input file offset at the beginning of the next buffer','line_number':738,'multiline':False]
['text':' Convert the read buffer into the new encoding via Unicode.','line_number':749,'multiline':False]
['text':' After the call 'unibufp' will be placed behind the last','line_number':750,'multiline':False]
['text':' character that was converted in the 'unibuf'.','line_number':751,'multiline':False]
['text':' Also the 'cbufp' is positioned behind the last converted','line_number':752,'multiline':False]
['text':' character.','line_number':753,'multiline':False]
['text':' At the last conversion in the file, flush should be set to','line_number':754,'multiline':False]
['text':' true so that we get all characters converted.','line_number':755,'multiline':False]
['text':'','line_number':756,'multiline':False]
['text':' The converter must be flushed at the end of conversion so','line_number':757,'multiline':False]
['text':' that characters on hold also will be written.','line_number':758,'multiline':False]
['text':' convert until the input is consumed','line_number':763,'multiline':False]
['text':' remember the start of the current byte-to-Unicode conversion','line_number':765,'multiline':False]
['text':' Use bufsz instead of u.getCapacity() for the targetLimit','line_number':770,'multiline':False]
['text':' so that we don't overflow fromoffsets[].','line_number':771,'multiline':False]
['text':' fromSawEndOfBytes indicates that ucnv_toUnicode() is done','line_number':778,'multiline':False]
['text':' converting all of the input bytes.','line_number':779,'multiline':False]
['text':' It works like this because ucnv_toUnicode() returns only under the','line_number':780,'multiline':False]
['text':' following conditions:','line_number':781,'multiline':False]
['text':' - an error occurred during conversion (an error code is set)','line_number':782,'multiline':False]
['text':' - the target buffer is filled (the error code indicates an overflow)','line_number':783,'multiline':False]
['text':' - the source is consumed','line_number':784,'multiline':False]
['text':' That is, if the error code does not indicate a failure,','line_number':785,'multiline':False]
['text':' not even an overflow, then the source must be consumed entirely.','line_number':786,'multiline':False]
['text':' print the input file offset of the start of the error bytes:','line_number':802,'multiline':False]
['text':' input file offset of the current byte buffer +','line_number':803,'multiline':False]
['text':' length of the just consumed bytes -','line_number':804,'multiline':False]
['text':' length of the error bytes','line_number':805,'multiline':False]
['text':' output the bytes that caused the error','line_number':810,'multiline':False]
['text':' reset the error for the rest of the conversion. ','line_number':827,'multiline':True]
['text':' Replaced a check for whether the input was consumed by','line_number':830,'multiline':False]
['text':' looping until it is; message key "premEndInput" now obsolete.','line_number':831,'multiline':False]
['text':' remove a U+FEFF Unicode signature character if requested','line_number':837,'multiline':False]
['text':' account for the removed UChar and offset','line_number':842,'multiline':False]
['text':' remove an offset from fromoffsets[] as well','line_number':846,'multiline':False]
['text':' to keep the array parallel with the UChars','line_number':847,'multiline':False]
['text':' Transliterate/transform if needed.','line_number':856,'multiline':False]
['text':' For transformation, we use chunking code -','line_number':858,'multiline':False]
['text':' collect Unicode input until, for example, an end-of-line,','line_number':859,'multiline':False]
['text':' then transform and output-convert that and continue collecting.','line_number':860,'multiline':False]
['text':' This makes the transformation result independent of the buffer size','line_number':861,'multiline':False]
['text':' while avoiding the slower keyboard mode.','line_number':862,'multiline':False]
['text':' The end-of-chunk characters are completely included in the','line_number':863,'multiline':False]
['text':' transformed string in case they are to be transformed themselves.','line_number':864,'multiline':False]
['text':' use all of the rest at the end of the text','line_number':872,'multiline':False]
['text':' complete the chunk and transform it','line_number':876,'multiline':False]
['text':' append the transformation result to the result and empty the chunk','line_number':881,'multiline':False]
['text':' continue collecting the chunk','line_number':885,'multiline':False]
['text':' add a U+FEFF Unicode signature character if requested','line_number':896,'multiline':False]
['text':' and possible/necessary','line_number':897,'multiline':False]
['text':' insert a pseudo-offset into fromoffsets[] as well','line_number':903,'multiline':False]
['text':' to keep the array parallel with the UChars','line_number':904,'multiline':False]
['text':' account for the additional UChar and offset','line_number':909,'multiline':False]
['text':' Convert the Unicode buffer into the destination codepage','line_number':915,'multiline':False]
['text':' Again 'bufp' will be placed behind the last converted character','line_number':916,'multiline':False]
['text':' And 'unibufp' will be placed behind the last converted unicode character','line_number':917,'multiline':False]
['text':' At the last conversion flush should be set to true to ensure that','line_number':918,'multiline':False]
['text':' all characters left get converted','line_number':919,'multiline':False]
['text':' Use fromSawEndOfBytes in addition to the flush flag -','line_number':926,'multiline':False]
['text':' it indicates whether the intermediate Unicode string','line_number':927,'multiline':False]
['text':' contains the very last UChars for the very last input bytes.','line_number':928,'multiline':False]
['text':' toSawEndOfUnicode indicates that ucnv_fromUnicode() is done','line_number':934,'multiline':False]
['text':' converting all of the intermediate UChars.','line_number':935,'multiline':False]
['text':' See comment for fromSawEndOfBytes.','line_number':936,'multiline':False]
['text':' need at least 1 so that we don't access beyond the length of fromoffsets[]','line_number':952,'multiline':False]
['text':' Unicode buffer offset of the start of the error UChars','line_number':959,'multiline':False]
['text':' approximation - the character started in the previous Unicode buffer','line_number':962,'multiline':False]
['text':' get the corresponding byte offset out of fromoffsets[]','line_number':966,'multiline':False]
['text':' go back if the offset is not known for some of the UChars','line_number':967,'multiline':False]
['text':' total input file offset =','line_number':973,'multiline':False]
['text':' input file offset of the current byte buffer +','line_number':974,'multiline':False]
['text':' byte buffer offset of where the current Unicode buffer is converted from +','line_number':975,'multiline':False]
['text':' fromoffsets[Unicode offset]','line_number':976,'multiline':False]
['text':' Do not use fromoffsets if (t != NULL) because the Unicode text may','line_number':980,'multiline':False]
['text':' be different from what the offsets refer to.','line_number':981,'multiline':False]
['text':' output file offset','line_number':983,'multiline':False]
['text':' output the code points that caused the error','line_number':990,'multiline':False]
['text':' reset the error for the rest of the conversion. ','line_number':1017,'multiline':True]
['text':' Replaced a check for whether the intermediate Unicode characters were all consumed by','line_number':1020,'multiline':False]
['text':' looping until they are; message key "premEnd" now obsolete.','line_number':1021,'multiline':False]
['text':' Finally, write the converted buffer to the output file','line_number':1023,'multiline':False]
['text':' Stop when we have flushed the','line_number':1038,'multiline':False]
['text':' converters (this means that it's','line_number':1039,'multiline':False]
['text':' the end of output)','line_number':1040,'multiline':False]
['text':' Cleanup.','line_number':1048,'multiline':False]
['text':' Now dump callbacks and finish. ','line_number':1084,'multiline':True]
['text':' Initialize ICU ','line_number':1130,'multiline':True]
['text':' Get and prettify pname.','line_number':1138,'multiline':False]
['text':' First, get the arguments from command-line','line_number':1151,'multiline':False]
['text':' to know the codepages to convert between','line_number':1152,'multiline':False]
['text':' Check for from charset','line_number':1156,'multiline':False]
['text':' move a non-option up in argv[]','line_number':1306,'multiline':False]
['text':' Open the correct output file or connect to stdout for reading input','line_number':1324,'multiline':False]
['text':' Loop again on the arguments to find all the input files, and
    convert them. ','line_number':1346,'multiline':True]
['text':'
 * Hey, Emacs, please set the following:
 *
 * Local Variables:
 * indent-tabs-mode: nil
 * End:
 *
 ','line_number':1390,'multiline':True]
