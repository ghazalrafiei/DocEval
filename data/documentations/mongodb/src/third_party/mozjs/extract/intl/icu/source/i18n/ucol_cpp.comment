['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*   Copyright (C) 1996-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
*******************************************************************************
*   file name:  ucol.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
* Modification history
* Date        Name      Comments
* 1996-1999   various members of ICU team maintained C API for collation framework
* 02/16/2001  synwee    Added internal method getPrevSpecialCE
* 03/01/2001  synwee    Added maxexpansion functionality.
* 03/16/2001  weiv      Collation framework is rewritten in C and made UCA compliant
* 2012-2014   markus    Rewritten in C++ again.
','line_number':3,'multiline':True]
['text':'stackBuffer','line_number':79,'multiline':True]
['text':' preflighting for deprecated functionality','line_number':92,'multiline':False]
['text':' check arguments ','line_number':120,'multiline':True]
['text':' error, attempt to write a zero byte and return 0 ','line_number':125,'multiline':True]
['text':' check lengths and capacity ','line_number':132,'multiline':True]
['text':' the merged sort key does not fit into the destination ','line_number':142,'multiline':True]
['text':' merge the sort keys with the same number of levels ','line_number':146,'multiline':True]
['text':' copy level from src1 not including 00 or 01 ','line_number':149,'multiline':True]
['text':' add a 02 merge separator ','line_number':156,'multiline':True]
['text':' copy level from src2 not including 00 or 01 ','line_number':159,'multiline':True]
['text':' if both sort keys have another level, then add a 01 level separator and continue ','line_number':165,'multiline':True]
['text':'
     * here, at least one sort key is finished now, but the other one
     * might have some contents left from containing more levels;
     * that contents is just appended to the result
     ','line_number':175,'multiline':True]
['text':' src1 is not finished, therefore *src2==0, and src1 is appended ','line_number':181,'multiline':True]
['text':' append src2, "the other, unfinished sort key" ','line_number':184,'multiline':True]
['text':' the actual length might be less than destLength if either sort key contained illegally embedded zero bytes ','line_number':187,'multiline':True]
['text':' error checking ','line_number':219,'multiline':True]
['text':' Return number of meaningful sortkey bytes.','line_number':230,'multiline':False]
['text':'*
 * Produce a bound for a given sortkey and a number of levels.
 ','line_number':237,'multiline':True]
['text':' consistency checks','line_number':249,'multiline':False]
['text':' Scan the string until we skip enough of the key OR reach the end of the key','line_number':259,'multiline':False]
['text':' READ ME: this code assumes that the values for boundType','line_number':274,'multiline':False]
['text':' enum will not changes. They are set so that the enum value','line_number':275,'multiline':False]
['text':' corresponds to the number of extra bytes each bound type','line_number':276,'multiline':False]
['text':' needs.','line_number':277,'multiline':False]
['text':' Lower bound just gets terminated. No extra bytes','line_number':281,'multiline':False]
['text':' = 0','line_number':282,'multiline':False]
['text':' Upper bound needs one extra byte','line_number':284,'multiline':False]
['text':' = 1','line_number':285,'multiline':False]
['text':' Upper long bound needs two extra bytes','line_number':288,'multiline':False]
['text':' = 2','line_number':289,'multiline':False]
['text':'                                                                      ','line_number':437,'multiline':True]
['text':' ucol_strcoll     Main public API string comparison function          ','line_number':438,'multiline':True]
['text':'                                                                      ','line_number':439,'multiline':True]
['text':' do nothing ','line_number':478,'multiline':True]
['text':' convenience function for comparing strings ','line_number':490,'multiline':True]
['text':' convenience function for comparing strings ','line_number':502,'multiline':True]
['text':' convenience function for comparing strings ','line_number':514,'multiline':True]
['text':' Note: This is tied to how the current implementation encodes the UCA version','line_number':532,'multiline':False]
['text':' in the overall getVersion().','line_number':533,'multiline':False]
['text':' Alternatively, we could load the root collator and get at lower-level data from there.','line_number':534,'multiline':False]
['text':' Either way, it will reflect the input collator's UCA version only','line_number':535,'multiline':False]
['text':' if it is a known implementation.','line_number':536,'multiline':False]
['text':' It would be cleaner to make this a virtual Collator method.','line_number':537,'multiline':False]
['text':' OK to crash if coll==NULL: We do not want to check "this" pointers.','line_number':548,'multiline':False]
['text':' #if !UCONFIG_NO_COLLATION ','line_number':621,'multiline':True]
