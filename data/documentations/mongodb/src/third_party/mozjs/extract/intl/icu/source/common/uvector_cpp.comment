['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
* Copyright (C) 1999-2013, International Business Machines Corporation and
* others. All Rights Reserved.
******************************************************************************
*   Date        Name        Description
*   10/22/99    alan        Creation.
**********************************************************************
','line_number':3,'multiline':True]
['text':'
 * Constants for hinting whether a key is an integer
 * or a pointer.  If a hint bit is zero, then the associated
 * token is assumed to be an integer. This is needed for iSeries
 ','line_number':22,'multiline':True]
['text':' Fix bogus initialCapacity values; avoid malloc(0) and integer overflow','line_number':76,'multiline':False]
['text':'*
 * Assign this object to another (make this a copy of 'other').
 * Use the 'assign' function to assign each element.
 ','line_number':94,'multiline':True]
['text':' This only does something sensible if this object has a non-null comparer','line_number':112,'multiline':False]
['text':' Compare using this object's comparer','line_number':117,'multiline':False]
['text':' Pointers may be bigger than ints.','line_number':135,'multiline':False]
['text':' else index out of range ','line_number':148,'multiline':True]
['text':' TODO:  this should be an error.  mixing up ints and pointers.','line_number':154,'multiline':False]
['text':' else index out of range ','line_number':160,'multiline':True]
['text':' must have 0 <= index <= count','line_number':164,'multiline':False]
['text':' else index out of range ','line_number':172,'multiline':True]
['text':' must have 0 <= index <= count','line_number':176,'multiline':False]
['text':' else index out of range ','line_number':185,'multiline':True]
['text':' This only works if this object has a non-null comparer','line_number':303,'multiline':False]
['text':' Pointers are not always the same size as ints so to perform
             * a valid comparison we need to know whether we are being
             * provided an int or a pointer. ','line_number':314,'multiline':True]
['text':' integer overflow check','line_number':337,'multiline':False]
['text':' integer overflow check','line_number':345,'multiline':False]
['text':' We keep the original memory contents on bad minimumCapacity.','line_number':346,'multiline':False]
['text':' We keep the original contents on the memory failure on realloc or bad minimumCapacity.','line_number':352,'multiline':False]
['text':'*
 * Change the size of this vector as follows: If newSize is smaller,
 * then truncate the array, possibly deleting held elements for i >=
 * newSize.  If newSize is larger, grow the array, filling in new
 * slots with NULL.
 ','line_number':362,'multiline':True]
['text':' Most efficient to count down ','line_number':384,'multiline':True]
['text':'*
 * Fill in the given array with all elements of this vector.
 ','line_number':392,'multiline':True]
['text':'*
 * Removes the element at the given index from this vector and
 * transfer ownership of it to the caller.  After this call, the
 * caller owns the result and must delete it and the vector entry
 * at 'index' is removed, shifting all subsequent entries back by
 * one index and shortening the size of the vector by one.  If the
 * index is out of range or if there is no item at the given index
 * then 0 is returned and the vector is unchanged.
 ','line_number':415,'multiline':True]
['text':' else index out of range ','line_number':433,'multiline':True]
['text':'*
 * Insert the given object into this vector at its sorted position
 * as defined by 'compare'.  The current elements are assumed to
 * be sorted already.
 ','line_number':437,'multiline':True]
['text':'*
 * Insert the given integer into this vector at its sorted position
 * as defined by 'compare'.  The current elements are assumed to
 * be sorted already.
 ','line_number':448,'multiline':True]
['text':' ASSUME elements[] IS CURRENTLY SORTED','line_number':459,'multiline':False]
['text':' Perform a binary search for the location to insert tok at.  Tok','line_number':461,'multiline':False]
['text':' will be inserted between two elements a and b such that a <=','line_number':462,'multiline':False]
['text':' tok && tok < b, where there is a 'virtual' elements[-1] always','line_number':463,'multiline':False]
['text':' less than tok and a 'virtual' elements[count] always greater','line_number':464,'multiline':False]
['text':' than tok.','line_number':465,'multiline':False]
['text':' assert(c <= 0);','line_number':473,'multiline':False]
['text':'*
  *  Array sort comparator function.
  *  Used from UVector::sort()
  *  Conforms to function signature required for uprv_sortArray().
  *  This function is essentially just a wrapper, to make a
  *  UVector style comparator function usable with uprv_sortArray().
  *
  *  The context pointer to this function is a pointer back
  *  (with some extra indirection) to the user supplied comparator.
  *  
  ','line_number':486,'multiline':True]
['text':'*
  *  Array sort comparison function for use from UVector::sorti()
  *  Compares int32_t vector elements.
  ','line_number':507,'multiline':True]
['text':'context ','line_number':512,'multiline':True]
['text':'*
  * Sort the vector, assuming it contains ints.
  *     (A more general sort would take a comparison function, but it's
  *     not clear whether UVector's UElementComparator or
  *     UComparator from uprv_sortAray would be more appropriate.)
  ','line_number':520,'multiline':True]
['text':'*
 *  Sort with a user supplied comparator.
 *
 *    The comparator function handling is confusing because the function type
 *    for UVector  (as defined for sortedInsert()) is different from the signature
 *    required by uprv_sortArray().  This is handled by passing the
 *    the UVector sort function pointer via the context pointer to a
 *    sortArray() comparator function, which can then call back to
 *    the original user functtion.
 *
 *    An additional twist is that it's not safe to pass a pointer-to-function
 *    as  a (void *) data pointer, so instead we pass a (data) pointer to a
 *    pointer-to-function variable.
 ','line_number':534,'multiline':True]
['text':'*
 *  Stable sort with a user supplied comparator of type UComparator.
 ','line_number':556,'multiline':True]
