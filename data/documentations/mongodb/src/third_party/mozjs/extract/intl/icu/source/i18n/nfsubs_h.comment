['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*   Copyright (C) 1997-2015, International Business Machines
*   Corporation and others.  All Rights Reserved.
******************************************************************************
*   file name:  nfsubs.h
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
* Modification history
* Date        Name      Comments
* 10/11/2001  Doug      Ported from ICU4J
','line_number':3,'multiline':True]
['text':'*
     * Get the Ruleset of the object.
     * @return the Ruleset of the object.
     ','line_number':45,'multiline':True]
['text':'*
     * get the NumberFormat of this object.
     * @return the numberformat of this object.
     ','line_number':51,'multiline':True]
['text':'*
     * Destructor.
     ','line_number':66,'multiline':True]
['text':'*
     * Return true if the given Format objects are semantically equal.
     * Objects of different subclasses are considered unequal.
     * @param rhs    the object to be compared with.
     * @return       true if the given Format objects are semantically equal.
     ','line_number':71,'multiline':True]
['text':'*
     * Return true if the given Format objects are semantically unequal.
     * Objects of different subclasses are considered unequal.
     * @param rhs    the object to be compared with.
     * @return       true if the given Format objects are semantically unequal.
     ','line_number':79,'multiline':True]
['text':'*
     * Sets the substitution's divisor.  Used by NFRule.setBaseValue().
     * A no-op for all substitutions except multiplier and modulus
     * substitutions.
     * @param radix The radix of the divisor
     * @param exponent The exponent of the divisor
     ','line_number':87,'multiline':True]
['text':'*
     * Replaces result with the string describing the substitution.
     * @param result    Output param which will receive the string.
     ','line_number':96,'multiline':True]
['text':'-----------------------------------------------------------------------','line_number':104,'multiline':False]
['text':' formatting','line_number':105,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':106,'multiline':False]
['text':'*
     * Performs a mathematical operation on the number, formats it using
     * either ruleSet or decimalFormat, and inserts the result into
     * toInsertInto.
     * @param number The number being formatted.
     * @param toInsertInto The string we insert the result into
     * @param pos The position in toInsertInto where the owning rule's
     * rule text begins (this value is added to this substitution's
     * position to determine exactly where to insert the new text)
     ','line_number':108,'multiline':True]
['text':'*
     * Performs a mathematical operation on the number, formats it using
     * either ruleSet or decimalFormat, and inserts the result into
     * toInsertInto.
     * @param number The number being formatted.
     * @param toInsertInto The string we insert the result into
     * @param pos The position in toInsertInto where the owning rule's
     * rule text begins (this value is added to this substitution's
     * position to determine exactly where to insert the new text)
     ','line_number':120,'multiline':True]
['text':'*
     * Subclasses override this function to perform some kind of
     * mathematical operation on the number.  The result of this operation
     * is formatted using the rule set or DecimalFormat that this
     * substitution refers to, and the result is inserted into the result
     * string.
     * @param The number being formatted
     * @return The result of performing the opreration on the number
     ','line_number':133,'multiline':True]
['text':'*
     * Subclasses override this function to perform some kind of
     * mathematical operation on the number.  The result of this operation
     * is formatted using the rule set or DecimalFormat that this
     * substitution refers to, and the result is inserted into the result
     * string.
     * @param The number being formatted
     * @return The result of performing the opreration on the number
     ','line_number':144,'multiline':True]
['text':'-----------------------------------------------------------------------','line_number':156,'multiline':False]
['text':' parsing','line_number':157,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':158,'multiline':False]
['text':'*
     * Parses a string using the rule set or DecimalFormat belonging
     * to this substitution.  If there's a match, a mathematical
     * operation (the inverse of the one used in formatting) is
     * performed on the result of the parse and the value passed in
     * and returned as the result.  The parse position is updated to
     * point to the first unmatched character in the string.
     * @param text The string to parse
     * @param parsePosition On entry, ignored, but assumed to be 0.
     * On exit, this is updated to point to the first unmatched
     * character (or 0 if the substitution didn't match)
     * @param baseValue A partial parse result that should be
     * combined with the result of this parse
     * @param upperBound When searching the rule set for a rule
     * matching the string passed in, only rules with base values
     * lower than this are considered
     * @param lenientParse If true and matching against rules fails,
     * the substitution will also try matching the text against
     * numerals using a default-costructed NumberFormat.  If false,
     * no extra work is done.  (This value is false whenever the
     * formatter isn't in lenient-parse mode, but is also false
     * under some conditions even when the formatter _is_ in
     * lenient-parse mode.)
     * @return If there's a match, this is the result of composing
     * baseValue with whatever was returned from matching the
     * characters.  This will be either a Long or a Double.  If there's
     * no match this is new Long(0) (not null), and parsePosition
     * is left unchanged.
     ','line_number':160,'multiline':True]
['text':'*
     * Derives a new value from the two values passed in.  The two values
     * are typically either the base values of two rules (the one containing
     * the substitution and the one matching the substitution) or partial
     * parse results derived in some other way.  The operation is generally
     * the inverse of the operation performed by transformNumber().
     * @param newRuleValue The value produced by matching this substitution
     * @param oldRuleValue The value that was passed to the substitution
     * by the rule that owns it
     * @return A third value derived from the other two, representing a
     * partial parse result
     ','line_number':197,'multiline':True]
['text':'*
     * Calculates an upper bound when searching for a rule that matches
     * this substitution.  Rules with base values greater than or equal
     * to upperBound are not considered.
     * @param oldUpperBound    The current upper-bound setting.  The new
     *                         upper bound can't be any higher.
     * @return                 the upper bound when searching for a rule that matches
     *                         this substitution.
     ','line_number':211,'multiline':True]
['text':'-----------------------------------------------------------------------','line_number':222,'multiline':False]
['text':' simple accessors','line_number':223,'multiline':False]
['text':'-----------------------------------------------------------------------','line_number':224,'multiline':False]
['text':'*
     * Returns the substitution's position in the rule that owns it.
     * @return The substitution's position in the rule that owns it.
     ','line_number':226,'multiline':True]
['text':'*
     * Returns the character used in the textual representation of
     * substitutions of this type.  Used by toString().
     * @return This substitution's token character.
     ','line_number':232,'multiline':True]
['text':'*
     * Returns true if this is a modulus substitution.  (We didn't do this
     * with instanceof partially because it causes source files to
     * proliferate and partially because we have to port this to C++.)
     * @return true if this object is an instance of ModulusSubstitution
     ','line_number':239,'multiline':True]
['text':' forbid copying of this class','line_number':248,'multiline':False]
['text':' forbid copying of this class','line_number':249,'multiline':False]
['text':' U_HAVE_RBNF ','line_number':258,'multiline':True]
['text':' NFSUBS_H','line_number':261,'multiline':False]
