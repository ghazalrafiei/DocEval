['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 1998-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*
* File read.c
*
* Modification History:
*
*   Date        Name        Description
*   05/26/99    stephen     Creation.
*   5/10/01     Ram         removed ustdio dependency
*******************************************************************************
','line_number':3,'multiline':True]
['text':' Protos ','line_number':42,'multiline':True]
['text':' Read and return the next token from the stream.  If the token is of
   type eString, fill in the token parameter with the token.  If the
   token is eError, then the status parameter will contain the
   specific error.  This will be eItemNotFound at the end of file,
   indicating that all tokens have been returned.  This method will
   never return eString twice in a row; instead, multiple adjacent
   string tokens will be merged into one, with no intervening
   space. ','line_number':58,'multiline':True]
['text':' out: linenumber of token ','line_number':69,'multiline':True]
['text':' Skip whitespace ','line_number':79,'multiline':True]
['text':' Copy a string token into the given UnicodeString.  Upon entry, we
   have already read the first character of the string token, which is
   not a whitespace character (but may be a QUOTE or ESCAPE). This
   function reads all subsequent characters that belong with this
   string, and copy them into the token parameter. The other
   important, and slightly convoluted purpose of this function is to
   merge adjacent strings.  It looks forward a bit, and if the next
   non comment, non whitespace item is a string, it reads it in as
   well.  If two adjacent strings are quoted, they are merged without
   intervening space.  Otherwise a single SPACE character is
   inserted. ','line_number':110,'multiline':True]
['text':' We are guaranteed on entry that initialChar is not a whitespace
       character. If we are at the EOF, or have some other problem, it
       doesn't matter; we still want to validly return the initialChar
       (if nothing else) as a string token. ','line_number':134,'multiline':True]
['text':' setup ','line_number':143,'multiline':True]
['text':' EOF reached ','line_number':167,'multiline':True]
['text':' Unterminated quoted strings ','line_number':172,'multiline':True]
['text':' if we reach here we are mixing 
             * quoted and unquoted strings
             * warn in normal mode and error in
             * pedantic mode
             ','line_number':235,'multiline':True]
['text':' EOF reached ','line_number':245,'multiline':True]
['text':' DON'T skip whitespace ','line_number':261,'multiline':True]
['text':' EOF reached ','line_number':264,'multiline':True]
['text':' DO skip whitespace ','line_number':306,'multiline':True]
['text':' Retrieve the next character.  If skipwhite is
   true, whitespace is skipped as well. ','line_number':320,'multiline':True]
['text':' This also handles the get() failing case ','line_number':343,'multiline':True]
['text':' "/c" ','line_number':348,'multiline':True]
['text':' "//" ','line_number':355,'multiline':True]
['text':' " / * " ','line_number':359,'multiline':True]
['text':' "/ * c" ','line_number':360,'multiline':True]
['text':' "/ * *" ','line_number':361,'multiline':True]
['text':' parse multi-line comment and store it in token','line_number':362,'multiline':True]
['text':' c2 is the non-asterisk following "/ *".  Include c2  back in buffer.  ','line_number':365,'multiline':True]
['text':' "/c" - put back the c ','line_number':371,'multiline':True]
['text':' If get() failed this is a NOP ','line_number':372,'multiline':True]
['text':' add the char to token ','line_number':390,'multiline':True]
['text':' add the char to token ','line_number':421,'multiline':True]
['text':' increment the lineCount ','line_number':425,'multiline':True]
['text':' We expect to be called after the ESCAPE has been seen, but
     * u_fgetcx needs an ESCAPE to do its magic. ','line_number':441,'multiline':True]
['text':' ' ', '\t', '\n', '\r', 0x2029, 0xFEFF ','line_number':450,'multiline':True]
['text':' '\n', '\r', 0x2029 ','line_number':467,'multiline':True]
