['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
* Copyright (C) 2015, International Business Machines Corporation and
* others. All Rights Reserved.
******************************************************************************
*
* File UNIFIEDCACHE.H - The ICU Unified cache.
******************************************************************************
','line_number':3,'multiline':True]
['text':' for 'typeid' to work','line_number':16,'multiline':False]
['text':'*
 * A base class for all cache keys.
 ','line_number':32,'multiline':True]
['text':'*
    * Copy constructor. Needed to support cloning.
    ','line_number':39,'multiline':True]
['text':'*
    * Returns the hash code for this object.
    ','line_number':46,'multiline':True]
['text':'*
    * Clones this object polymorphically. Caller owns returned value.
    ','line_number':51,'multiline':True]
['text':'*
    * Equality operator.
    ','line_number':56,'multiline':True]
['text':'*
    * Create a new object for this key. Called by cache on cache miss.
    * createObject must add a reference to the object it returns. Note
    * that getting an object from the cache and returning it without calling
    * removeRef on it satisfies this requirement. It can also return NULL
    * and set status to an error.
    *
    * @param creationContext the context in which the object is being
    *                        created. May be NULL.
    * @param status          Implementations can return a failure here.
    *                        In addition, implementations may return a
    *                        non NULL object and set a warning status.
    ','line_number':61,'multiline':True]
['text':'*
    * Writes a description of this key to buffer and returns buffer. Written
    * description is NULL terminated.
    ','line_number':77,'multiline':True]
['text':'*
    * Inequality operator.
    ','line_number':83,'multiline':True]
['text':'*
 * Templated version of CacheKeyBase. 
 * A key of type LocaleCacheKey<T> maps to a value of type T.
 ','line_number':97,'multiline':True]
['text':'*
    * The template parameter, T, determines the hash code returned.
    ','line_number':105,'multiline':True]
['text':'*
    * Use the value type, T,  as the description.
    ','line_number':113,'multiline':True]
['text':'*
    * Two objects are equal if they are of the same type.
    ','line_number':123,'multiline':True]
['text':'*
 * Cache key based on locale.
 * A key of type LocaleCacheKey<T> maps to a value of type T.
 ','line_number':131,'multiline':True]
['text':' reflexive','line_number':148,'multiline':False]
['text':' We know this and other are of same class because operator== on','line_number':155,'multiline':False]
['text':' CacheKey returned true.','line_number':156,'multiline':False]
['text':'*
    * Use the locale id as the description.
    ','line_number':166,'multiline':True]
['text':'*
 * The unified cache. A singleton type.
 * Design doc here:
 * https://docs.google.com/document/d/1RwGQJs4N4tawNbf809iYDRCvXoMKqDJihxzYt1ysmd8/edit?usp=sharing
 ','line_number':178,'multiline':True]
['text':'*
    * @internal
    * Do not call directly. Instead use UnifiedCache::getInstance() as
    * there should be only one UnifiedCache in an application.
    ','line_number':185,'multiline':True]
['text':'*
    * Return a pointer to the global cache instance.
    ','line_number':192,'multiline':True]
['text':'*
    * Fetches a value from the cache by key. Equivalent to
    * get(key, NULL, ptr, status);
    ','line_number':197,'multiline':True]
['text':'*
    * Fetches value from the cache by key.
    *
    * @param key             the cache key.
    * @param creationContext passed verbatim to createObject method of key
    * @param ptr             On entry, ptr must be NULL or be included if
    *                        the reference count of the object it points
    *                        to. On exit, ptr points to the fetched object
    *                        from the cache or is left unchanged on
    *                        failure. Caller must call removeRef on ptr
    *                        if set to a non NULL value.
    * @param status          Any error returned here. May be set to a
    *                        warning value even if ptr is set.
    ','line_number':209,'multiline':True]
['text':' Take care not to overwrite a warning status passed in with','line_number':240,'multiline':False]
['text':' another warning or U_ZERO_ERROR.','line_number':241,'multiline':False]
['text':'*
    * Dumps the contents of this cache to standard error. Used for testing of
    * cache only.
    ','line_number':248,'multiline':True]
['text':'*
    * Convenience method to get a value of type T from cache for a
    * particular locale with creationContext == NULL.
    * @param loc    the locale
    * @param ptr    On entry, must be NULL or included in the ref count
    *               of the object to which it points.
    *               On exit, fetched value stored here or is left
    *               unchanged on failure. Caller must call removeRef on
    *               ptr if set to a non NULL value.
    * @param status Any error returned here. May be set to a
    *               warning value even if ptr is set.
    ','line_number':255,'multiline':True]
['text':'*
    * Dumps the cache contents to stderr. For testing only.
    ','line_number':278,'multiline':True]
['text':'*
    * Returns the number of keys in this cache. For testing only.
    ','line_number':284,'multiline':True]
['text':'*
    * Removes any values from cache that are not referenced outside
    * the cache.
    ','line_number':289,'multiline':True]
['text':'*
    * Configures at what point evcition of unused entries will begin.
    * Eviction is triggered whenever the number of evictable keys exeeds
    * BOTH count AND (number of in-use items) * (percentageOfInUseItems / 100).
    * Once the number of unused entries drops below one of these,
    * eviction ceases. Because eviction happens incrementally,
    * the actual unused entry count may exceed both these numbers
    * from time to time.
    *
    * A cache entry is defined as unused if it is not essential to guarantee
    * that for a given key X, the cache returns the same reference to the
    * same value as long as the client already holds a reference to that
    * value.
    *
    * If this method is never called, the default settings are 1000 and 100%.
    *
    * Although this method is thread-safe, it is designed to be called at
    * application startup. If it is called in the middle of execution, it
    * will have no immediate effect on the cache. However over time, the
    * cache will perform eviction slices in an attempt to honor the new
    * settings.
    *
    * If a client already holds references to many different unique values
    * in the cache such that the number of those unique values far exeeds
    * "count" then the cache may not be able to maintain this maximum.
    * However, if this happens, the cache still guarantees that the number of
    * unused entries will remain only a small percentage of the total cache
    * size.
    *
    * If the parameters passed are negative, setEvctionPolicy sets status to
    * U_ILLEGAL_ARGUMENT_ERROR.
    ','line_number':295,'multiline':True]
['text':'*
    * Returns how many entries have been auto evicted during the lifetime
    * of this cache. This only includes auto evicted entries, not
    * entries evicted because of a call to flush().
    ','line_number':331,'multiline':True]
['text':'*
    * Returns the unused entry count in this cache. For testing only,
    * Regular clients will not need this.
    ','line_number':338,'multiline':True]
['text':'*
    * Flushes the contents of the cache. If cache values hold references to other
    * cache values then _flush should be called in a loop until it returns false.
    * 
    * On entry, gCacheMutex must be held.
    * On exit, those values with are evictable are flushed.
    * 
    *  @param all if false flush evictable items only, which are those with no external
    *                    references, plus those that can be safely recreated.<br>
    *            if true, flush all elements. Any values (sharedObjects) with remaining
    *                     hard (external) references are not deleted, but are detached from
    *                     the cache, so that a subsequent removeRefs can delete them.
    *                     _flush is not thread safe when all is true.
    *   @return true if any value in cache was flushed or false otherwise.
    ','line_number':360,'multiline':True]
['text':'*
    * Gets value out of cache.
    * On entry. gCacheMutex must not be held. value must be NULL. status
    * must be U_ZERO_ERROR.
    * On exit. value and status set to what is in cache at key or on cache
    * miss the key's createObject() is called and value and status are set to
    * the result of that. In this latter case, best effort is made to add the
    * value and status to the cache. If createObject() fails to create a value,
    * fNoValue is stored in cache, and value is set to NULL. Caller must call
    * removeRef on value if non NULL.
    ','line_number':377,'multiline':True]
['text':'*
     * Attempts to fetch value and status for key from cache.
     * On entry, gCacheMutex must not be held value must be NULL and status must
     * be U_ZERO_ERROR.
     * On exit, either returns false (In this
     * case caller should try to create the object) or returns true with value
     * pointing to the fetched value and status set to fetched status. When
     * false is returned status may be set to failure if an in progress hash
     * entry could not be made but value will remain unchanged. When true is
     * returned, caller must call removeRef() on value.
     ','line_number':394,'multiline':True]
['text':'*
     * Places a new value and creationStatus in the cache for the given key.
     * On entry, gCacheMutex must be held. key must not exist in the cache. 
     * On exit, value and creation status placed under key. Soft reference added
     * to value on successful add. On error sets status.
     ','line_number':410,'multiline':True]
['text':'*
     * Places value and status at key if there is no value at key or if cache
     * entry for key is in progress. Otherwise, it leaves the current value and
     * status there.
     * 
     * On entry. gCacheMutex must not be held. Value must be
     * included in the reference count of the object to which it points.
     * 
     * On exit, value and status are changed to what was already in the cache if
     * something was there and not in progress. Otherwise, value and status are left
     * unchanged in which case they are placed in the cache on a best-effort basis.
     * Caller must call removeRef() on value.
     ','line_number':422,'multiline':True]
['text':'*
     * Returns the next element in the cache round robin style.
     * Returns nullptr if the cache is empty.
     * On entry, gCacheMutex must be held.
     ','line_number':440,'multiline':True]
['text':'*
    * Return the number of cache items that would need to be evicted
    * to bring usage into conformance with eviction policy.
    * 
    * An item corresponds to an entry in the hash table, a hash table element.
    * 
    * On entry, gCacheMutex must be held.
    ','line_number':447,'multiline':True]
['text':'*
    * Run an eviction slice.
    * On entry, gCacheMutex must be held.
    * _runEvictionSlice runs a slice of the evict pipeline by examining the next
    * 10 entries in the cache round robin style evicting them if they are eligible.
    ','line_number':457,'multiline':True]
['text':'*
    * Register a primary cache entry. A primary key is the first key to create
    * a given  SharedObject value. Subsequent keys whose create function
    * produce referneces to an already existing SharedObject are not primary -
    * they can be evicted and subsequently recreated.
    * 
    * On entry, gCacheMutex must be held.
    * On exit, items in use count incremented, entry is marked as a primary
    * entry, and value registered with cache so that subsequent calls to
    * addRef() and removeRef() on it correctly interact with the cache.
    ','line_number':465,'multiline':True]
['text':'*
    * Store a value and creation error status in given hash entry.
    * On entry, gCacheMutex must be held. Hash entry element must be in progress.
    * value must be non NULL.
    * On Exit, soft reference added to value. value and status stored in hash
    * entry. Soft reference removed from previous stored value. Waiting
    * threads notified.
    ','line_number':478,'multiline':True]
['text':'*
     * Remove a soft reference, and delete the SharedObject if no references remain.
     * To be used from within the UnifiedCache implementation only.
     * gCacheMutex must be held by caller.
     * @param value the SharedObject to be acted on.
     ','line_number':490,'multiline':True]
['text':'*
    * Increment the hard reference count of the given SharedObject.
    * gCacheMutex must be held by the caller.
    * Update numValuesEvictable on transitions between zero and one reference.
    * 
    * @param value The SharedObject to be referenced.
    * @return the hard reference count after the addition.
    ','line_number':498,'multiline':True]
['text':'*
    * Decrement the hard reference count of the given SharedObject.
    * gCacheMutex must be held by the caller.
    * Update numValuesEvictable on transitions between one and zero reference.
    * 
    * @param value The SharedObject to be referenced.
    * @return the hard reference count after the removal.
    ','line_number':508,'multiline':True]
['text':'*
    *  Fetch value and error code from a particular hash entry.
    *  On entry, gCacheMutex must be held. value must be either NULL or must be
    *  included in the ref count of the object to which it points.
    *  On exit, value and status set to what is in the hash entry. Caller must
    *  eventually call removeRef on value.
    *  If hash entry is in progress, value will be set to gNoValue and status will
    *  be set to U_ZERO_ERROR.
    ','line_number':523,'multiline':True]
['text':'*
     * Determine if given hash entry is in progress.
     * On entry, gCacheMutex must be held.
     ','line_number':535,'multiline':True]
['text':'*
    * Determine if given hash entry is in progress.
    * On entry, gCacheMutex must be held.
    ','line_number':541,'multiline':True]
['text':'*
    * Determine if given hash entry is eligible for eviction.
    * On entry, gCacheMutex must be held.
    ','line_number':547,'multiline':True]
