['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*
*   Copyright (C) 2001-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  utrie.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2001oct20
*   created by: Markus W. Scherer
*
*   This is a common implementation of a "folded" trie.
*   It is a kind of compressed, serializable table of 16- or 32-bit values associated with
*   Unicode code points (0..0x10ffff).
','line_number':3,'multiline':True]
['text':' miscellaneous ------------------------------------------------------------ ','line_number':31,'multiline':True]
['text':' Building a trie ----------------------------------------------------------','line_number':46,'multiline':True]
['text':' preallocate and reset the first data block (block index 0) ','line_number':85,'multiline':True]
['text':' preallocate and reset the first block (number 0) and Latin-1 (U+0000..U+00ff) after that ','line_number':89,'multiline':True]
['text':' made sure above that maxDataLength>=1024 ','line_number':90,'multiline':True]
['text':' set indexes to point to consecutive data blocks ','line_number':92,'multiline':True]
['text':' do this at least for trie->index[0] even if that block is only partly used for Latin-1 ','line_number':95,'multiline':True]
['text':' reset the initially allocated blocks to the initial value ','line_number':101,'multiline':True]
['text':' do not clone if other is not valid or already compacted ','line_number':120,'multiline':True]
['text':' clone data ','line_number':125,'multiline':True]
['text':' out of memory in the data array ','line_number':182,'multiline':True]
['text':'*
 * No error checking for illegal arguments.
 *
 * @return -1 if no new data block available (out of memory in data array)
 * @internal
 ','line_number':189,'multiline':True]
['text':' allocate a new data block ','line_number':205,'multiline':True]
['text':' out of memory in the data array ','line_number':208,'multiline':True]
['text':' copy-on-write for a block from a setRange() ','line_number':213,'multiline':True]
['text':'*
 * @return TRUE if the value was successfully set
 ','line_number':218,'multiline':True]
['text':' valid, uncompacted trie and valid c? ','line_number':225,'multiline':True]
['text':' valid, uncompacted trie and valid c? ','line_number':243,'multiline':True]
['text':'*
 * @internal
 ','line_number':259,'multiline':True]
['text':'
     * repeat value in [start..limit[
     * mark index values for repeat-data blocks by setting bit 31 of the index values
     * fill around existing values if any, if(overwrite)
     ','line_number':285,'multiline':True]
['text':' valid, uncompacted trie and valid indexes? ','line_number':293,'multiline':True]
['text':' nothing to do ','line_number':300,'multiline':True]
['text':' set partial block at [start..following block boundary[ ','line_number':307,'multiline':True]
['text':' number of positions in the last, partial block ','line_number':325,'multiline':True]
['text':' round down limit to a block boundary ','line_number':328,'multiline':True]
['text':' iterate over all-value blocks ','line_number':331,'multiline':True]
['text':' get index value ','line_number':338,'multiline':True]
['text':' already allocated, fill in value ','line_number':341,'multiline':True]
['text':' set the repeatBlock instead of the current block 0 or range block ','line_number':344,'multiline':True]
['text':' create and set and fill the repeatBlock ','line_number':348,'multiline':True]
['text':' set the negative block number to indicate that it is a repeat block ','line_number':354,'multiline':True]
['text':' set partial block at [last block boundary..limit[ ','line_number':364,'multiline':True]
['text':'
 * Fold the normalization data for supplementary code points into
 * a compact area on top of the BMP-part of the trie index,
 * with the lead surrogates indexing this compact area.
 *
 * Duplicate the index values for lead surrogates:
 * From inside the BMP area, where some may be overridden with folded values,
 * to just after the BMP area, where they can be retrieved for
 * code point lookups.
 ','line_number':394,'multiline':True]
['text':' copy the lead surrogate indexes into a temporary array ','line_number':417,'multiline':True]
['text':'
     * set all values for lead surrogate code *units* to leadUnitValue
     * so that, by default, runtime lookups will find no data for associated
     * supplementary code points, unless there is data for such code points
     * which will result in a non-zero folding value below that is set for
     * the respective lead units
     *
     * the above saved the indexes for surrogate code *points*
     * fill the indexes with simplified code from utrie_setRange32()
     ','line_number':420,'multiline':True]
['text':' leadUnitValue==initialValue, use all-initial-value block ','line_number':431,'multiline':True]
['text':' create and fill the repeatBlock ','line_number':433,'multiline':True]
['text':' data table overflow ','line_number':436,'multiline':True]
['text':' negative block number to indicate that it is a repeat block ','line_number':441,'multiline':True]
['text':'
     * Fold significant index values into the area just after the BMP indexes.
     * In case the first lead surrogate has significant data,
     * its index block must be used first (in which case the folding is a no-op).
     * Later all folded index blocks are moved up one to insert the copied
     * lead surrogate indexes.
     ','line_number':447,'multiline':True]
['text':' search for any index (stage 1) entries for supplementary code points ','line_number':456,'multiline':True]
['text':' there is data, treat the full block for a lead surrogate ','line_number':459,'multiline':True]
['text':' printf("supplementary data for lead surrogate U+%04lx\n", (long)(0xd7c0+(c>>10))); ','line_number':464,'multiline':True]
['text':' is there an identical index block? ','line_number':467,'multiline':True]
['text':'
             * get a folded value for [c..c+0x400[ and,
             * if different from the value for the lead surrogate code point,
             * set it for the lead surrogate code unit
             ','line_number':470,'multiline':True]
['text':' data table overflow ','line_number':478,'multiline':True]
['text':' if we did not find an identical index block... ','line_number':483,'multiline':True]
['text':' move the actual index (stage 1) entries from the supplementary position to the new one ','line_number':485,'multiline':True]
['text':'
     * index array overflow?
     * This is to guarantee that a folding offset is of the form
     * UTRIE_BMP_INDEX_LENGTH+n*UTRIE_SURROGATE_BLOCK_COUNT with n=0..1023.
     * If the index is too large, then n>=1024 and more than 10 bits are necessary.
     *
     * In fact, it can only ever become n==1024 with completely unfoldable data and
     * the additional block of duplicated values for lead surrogates.
     ','line_number':503,'multiline':True]
['text':'
     * make space for the lead surrogate index block and
     * insert it between the BMP indexes and the folded ones
     ','line_number':517,'multiline':True]
['text':'
 * Set a value in the trie index map to indicate which data block
 * is referenced and which one is not.
 * utrie_compact() will remove data blocks that are not used at all.
 * Set
 * - 0 if it is used
 * - -1 if it is not used
 ','line_number':537,'multiline':True]
['text':' fill the entire map with "not used" ','line_number':549,'multiline':True]
['text':' mark each block that _is_ used with 0 ','line_number':552,'multiline':True]
['text':' never move the all-initial-value block 0 ','line_number':557,'multiline':True]
['text':' ensure that we do not even partially get past dataLength ','line_number':566,'multiline':True]
['text':'
 * Compact a folded build-time trie.
 *
 * The compaction
 * - removes blocks that are identical with earlier ones
 * - overlaps adjacent blocks as much as possible (if overlap==TRUE)
 * - moves blocks in steps of the data granularity
 * - moves and overlaps blocks that overlap with multiple values in the overlap region
 *
 * It does not
 * - try to move and overlap blocks that are not already adjacent
 ','line_number':577,'multiline':True]
['text':' valid, uncompacted trie? ','line_number':597,'multiline':True]
['text':' nothing left to do ','line_number':603,'multiline':True]
['text':' compaction ','line_number':606,'multiline':True]
['text':' initialize the index map with "block is used/unused" flags ','line_number':608,'multiline':True]
['text':' if Latin-1 is preallocated and linear, then do not compact Latin-1 data ','line_number':611,'multiline':True]
['text':'
         * start: index of first entry of current block
         * newStart: index where the current block is to be moved
         *           (right after current end of already-compacted data)
         ','line_number':620,'multiline':True]
['text':' skip blocks that are not used ','line_number':626,'multiline':True]
['text':' advance start to the next block ','line_number':628,'multiline':True]
['text':' leave newStart with the previous block! ','line_number':631,'multiline':True]
['text':' search for an identical block ','line_number':635,'multiline':True]
['text':' found an identical block, set the other block's index value for the current block ','line_number':641,'multiline':True]
['text':' advance start to the next block ','line_number':644,'multiline':True]
['text':' leave newStart with the previous block! ','line_number':647,'multiline':True]
['text':' see if the beginning of this block can be overlapped with the end of the previous block ','line_number':651,'multiline':True]
['text':' look for maximum overlap (modulo granularity) with the previous, adjacent block ','line_number':653,'multiline':True]
['text':' some overlap ','line_number':662,'multiline':True]
['text':' move the non-overlapping indexes to their new positions ','line_number':665,'multiline':True]
['text':' no overlap, just move the indexes to their new positions ','line_number':671,'multiline':True]
['text':' no overlap && newStart==start ','line_number':676,'multiline':True]
['text':' now adjust the index (stage 1) table ','line_number':683,'multiline':True]
['text':' we saved some space ','line_number':689,'multiline':True]
['text':' serialization ------------------------------------------------------------ ','line_number':697,'multiline':True]
['text':'
 * Default function for the folding value:
 * Just store the offset (16 bits) if there is any non-initial-value entry.
 *
 * The offset parameter is never 0.
 * Returning the offset itself is safe for UTRIE_SHIFT>=5 because
 * for UTRIE_SHIFT==5 the maximum index length is UTRIE_MAX_INDEX_LENGTH==0x8800
 * which fits into 16-bit trie values;
 * for higher UTRIE_SHIFT, UTRIE_MAX_INDEX_LENGTH decreases.
 *
 * Theoretically, it would be safer for all possible UTRIE_SHIFT including
 * those of 4 and lower to return offset>>UTRIE_SURROGATE_BLOCK_BITS
 * which would always result in a value of 0x40..0x43f
 * (start/end 1k blocks of supplementary Unicode code points).
 * However, this would be uglier, and would not work for some existing
 * binary data file formats.
 *
 * Also, we do not plan to change UTRIE_SHIFT because it would change binary
 * data file formats, and we would probably not make it smaller because of
 * the then even larger BMP index length even for empty tries.
 ','line_number':699,'multiline':True]
['text':' argument check ','line_number':752,'multiline':True]
['text':' fold and compact if necessary, also checks that indexLength is within limits ','line_number':766,'multiline':True]
['text':' compact once without overlap to improve folding ','line_number':768,'multiline':True]
['text':' fold the supplementary part of the index array ','line_number':771,'multiline':True]
['text':' compact again with overlap for minimum data array length ','line_number':774,'multiline':True]
['text':' is dataLength within limits? ','line_number':783,'multiline':True]
['text':' preflighting ','line_number':796,'multiline':True]
['text':' set the header fields ','line_number':804,'multiline':True]
['text':' "Trie" ','line_number':808,'multiline':True]
['text':' write the index (stage 1) array and the 16/32-bit data (stage 2) array ','line_number':821,'multiline':True]
['text':' write 16-bit index values shifted right by UTRIE_INDEX_SHIFT, after adding indexLength ','line_number':823,'multiline':True]
['text':' write 16-bit data values ','line_number':830,'multiline':True]
['text':' write 16-bit index values shifted right by UTRIE_INDEX_SHIFT ','line_number':836,'multiline':True]
['text':' write 32-bit data values ','line_number':843,'multiline':True]
['text':' inverse to defaultGetFoldedValue() ','line_number':850,'multiline':True]
['text':' enough data for a trie header? ','line_number':866,'multiline':True]
['text':' check the signature ','line_number':872,'multiline':True]
['text':' get the options and check the shift values ','line_number':879,'multiline':True]
['text':' get the length values ','line_number':889,'multiline':True]
['text':' enough data for the index? ','line_number':895,'multiline':True]
['text':' get the data ','line_number':905,'multiline':True]
['text':' the "data16" data is used via the index pointer ','line_number':920,'multiline':True]
['text':' calculate the actual size of the dummy trie data ','line_number':945,'multiline':True]
['text':' max(Latin-1, block 0) ','line_number':947,'multiline':True]
['text':'UTRIE_SHIFT<=8 ? 256 : UTRIE_DATA_BLOCK_LENGTH;','line_number':948,'multiline':True]
['text':' enough space for the dummy trie? ','line_number':963,'multiline':True]
['text':' fill the index and data arrays ','line_number':972,'multiline':True]
['text':' indexes to block 0 ','line_number':977,'multiline':True]
['text':' indexes for lead surrogate code units to the block after Latin-1 ','line_number':985,'multiline':True]
['text':' Latin-1 data ','line_number':996,'multiline':True]
['text':' data for lead surrogate code units ','line_number':1002,'multiline':True]
['text':' i=latin1Length ','line_number':1005,'multiline':True]
['text':' indexes to block 0 ','line_number':1012,'multiline':True]
['text':' indexes for lead surrogate code units to the block after Latin-1 ','line_number':1016,'multiline':True]
['text':' Latin-1 data ','line_number':1027,'multiline':True]
['text':' data for lead surrogate code units ','line_number':1032,'multiline':True]
['text':' i=latin1Length ','line_number':1035,'multiline':True]
['text':' enumeration -------------------------------------------------------------- ','line_number':1046,'multiline':True]
['text':' default UTrieEnumValue() returns the input value itself ','line_number':1048,'multiline':True]
['text':'context','line_number':1050,'multiline':True]
['text':'*
 * Enumerate all ranges of code points with the same relevant values.
 * The values are transformed from the raw trie entries by the enumValue function.
 ','line_number':1054,'multiline':True]
['text':' check arguments ','line_number':1068,'multiline':True]
['text':' get the enumeration value that corresponds to an initial-value trie data entry ','line_number':1079,'multiline':True]
['text':' set variables for previous range ','line_number':1088,'multiline':True]
['text':' enumerate BMP - the main loop enumerates data blocks ','line_number':1093,'multiline':True]
['text':' skip lead surrogate code _units_, go to lead surr. code _points_ ','line_number':1096,'multiline':True]
['text':' go back to regular BMP code points ','line_number':1099,'multiline':True]
['text':' the block is the same as the previous one, and filled with value ','line_number':1105,'multiline':True]
['text':' this is the all-initial-value block ','line_number':1108,'multiline':True]
['text':' the block is not filled with all the same value ','line_number':1131,'multiline':True]
['text':' enumerate supplementary code points ','line_number':1142,'multiline':True]
['text':' lead surrogate access ','line_number':1144,'multiline':True]
['text':' no entries for a whole block of lead surrogates ','line_number':1147,'multiline':True]
['text':' enumerate trail surrogates for this lead surrogate ','line_number':1166,'multiline':True]
['text':' no data for this lead surrogate ','line_number':1169,'multiline':True]
['text':' nothing else to do for the supplementary code points for this lead surrogate ','line_number':1181,'multiline':True]
['text':' enumerate code points for this lead surrogate ','line_number':1184,'multiline':True]
['text':' copy of most of the body of the BMP loop ','line_number':1188,'multiline':True]
['text':' the block is the same as the previous one, and filled with value ','line_number':1191,'multiline':True]
['text':' this is the all-initial-value block ','line_number':1194,'multiline':True]
['text':' the block is not filled with all the same value ','line_number':1217,'multiline':True]
['text':' deliver last range ','line_number':1232,'multiline':True]
