['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' umutablecptrie.cpp (inspired by utrie2_builder.cpp)','line_number':4,'multiline':False]
['text':' created: 2017dec29 Markus W. Scherer','line_number':5,'multiline':False]
['text':' #define UCPTRIE_DEBUG','line_number':7,'multiline':False]
['text':' ICU-20235 In case Microsoft math.h has defined this, undefine it.','line_number':21,'multiline':False]
['text':' Flag values for data blocks.','line_number':42,'multiline':False]
['text':'* Start with allocation of 16k data entries. ','line_number':47,'multiline':True]
['text':'* Grow about 8x each time. ','line_number':50,'multiline':True]
['text':'*
 * Maximum length of the build-time data array.
 * One entry per 0x110000 code points.
 ','line_number':53,'multiline':True]
['text':' Flag values for index-3 blocks while compacting/building.','line_number':59,'multiline':False]
['text':'* Temporary array while building the final data. ','line_number':125,'multiline':True]
['text':' Use the highValue as the initialValue to reduce the highStart.','line_number':184,'multiline':False]
['text':' Use the highValue as the initialValue to reduce the highStart.','line_number':214,'multiline':False]
['text':' Unreachable if the trie is properly initialized.','line_number':231,'multiline':False]
['text':' may or may not help','line_number':325,'multiline':False]
['text':' MIXED ','line_number':334,'multiline':True]
['text':' may or may not help','line_number':344,'multiline':False]
['text':' may or may not help','line_number':361,'multiline':False]
['text':' Round up to a UCPTRIE_CP_PER_INDEX_2_ENTRY boundary to simplify compaction.','line_number':385,'multiline':False]
['text':' Should never occur.','line_number':416,'multiline':False]
['text':' Either MAX_DATA_LENGTH is incorrect,','line_number':417,'multiline':False]
['text':' or the code writes more values than should be possible.','line_number':418,'multiline':False]
['text':'*
 * No error checking for illegal arguments.
 *
 * @return -1 if no new data block available (out of memory in data array)
 * @internal
 ','line_number':434,'multiline':True]
['text':' Set partial block at [start..following block boundary[.','line_number':509,'multiline':False]
['text':' Number of positions in the last, partial block.','line_number':528,'multiline':False]
['text':' Round down limit to a block boundary.','line_number':531,'multiline':False]
['text':' Iterate over all-value blocks.','line_number':534,'multiline':False]
['text':' MIXED ','line_number':539,'multiline':True]
['text':' Set partial block at [last block boundary..limit[.','line_number':546,'multiline':False]
['text':' compaction --------------------------------------------------------------- ','line_number':557,'multiline':True]
['text':'* Search for an identical block. ','line_number':590,'multiline':True]
['text':' Ensure that we do not even partially get past length.','line_number':593,'multiline':False]
['text':' Ensure that we do not even partially get past limit.','line_number':608,'multiline':False]
['text':'*
 * Look for maximum overlap of the beginning of the other block
 * with the previous, adjacent block.
 ','line_number':627,'multiline':True]
['text':'*
 * Finds the start of the last range in the trie by enumerating backward.
 * Indexes for code points higher than this will be omitted.
 ','line_number':660,'multiline':True]
['text':' MIXED ','line_number':670,'multiline':True]
['text':'* Replaces the block which has the lowest reference count. ','line_number':719,'multiline':True]
['text':' Custom hash table for mixed-value blocks to be found anywhere in the','line_number':762,'multiline':False]
['text':' compacted data or index so far.','line_number':763,'multiline':False]
['text':' We store actual data indexes + 1 to reserve 0 for empty entries.','line_number':772,'multiline':False]
['text':' 4k','line_number':775,'multiline':False]
['text':' 32k','line_number':779,'multiline':False]
['text':' 128k','line_number':783,'multiline':False]
['text':' maxDataIndex up to around MAX_DATA_LENGTH, ca. 1.1M','line_number':788,'multiline':False]
['text':' Skip the last block that we added last time.','line_number':812,'multiline':False]
['text':' Begin with the first full block.','line_number':814,'multiline':False]
['text':' 1..length-1','line_number':875,'multiline':False]
['text':' 1..length-1','line_number':893,'multiline':False]
['text':' U_ASSERT(0 < initialEntryIndex && initialEntryIndex < length);','line_number':910,'multiline':False]
['text':' Hash table.','line_number':914,'multiline':False]
['text':' The length is a prime number, larger than the maximum data length.','line_number':915,'multiline':False]
['text':' The "shift" lower bits store a data index + 1.','line_number':916,'multiline':False]
['text':' The remaining upper bits store a partial hashCode of the block data values.','line_number':917,'multiline':False]
['text':' ASCII data will be stored as a linear table, even if the following code','line_number':932,'multiline':False]
['text':' does not yet count it that way.','line_number':933,'multiline':False]
['text':' Add room for a small data null block in case it would match the start of','line_number':935,'multiline':False]
['text':' a fast data block where dataNullOffset must not be set in that case.','line_number':936,'multiline':False]
['text':' Add room for special values (errorValue, highValue) and padding.','line_number':938,'multiline':False]
['text':' Really mixed?','line_number':950,'multiline':False]
['text':' Fall through to ALL_SAME handling.','line_number':956,'multiline':False]
['text':' Do all of the fast-range data block's ALL_SAME parts have the same value?','line_number':964,'multiline':False]
['text':' Turn it into a MIXED block.','line_number':975,'multiline':False]
['text':' Is there another ALL_SAME block with the same value?','line_number':984,'multiline':False]
['text':' The fixed-size array overflowed. Slow check for a duplicate block.','line_number':987,'multiline':False]
['text':' We could keep counting blocks with the same value','line_number':1007,'multiline':False]
['text':' before we add the first one, which may improve compaction in rare cases,','line_number':1008,'multiline':False]
['text':' but it would make it slower.','line_number':1009,'multiline':False]
['text':' New unique same-value block.','line_number':1017,'multiline':False]
['text':' Braille symbols: U+28xx = UTF-8 E2 A0 80..E2 A3 BF','line_number':1031,'multiline':False]
['text':' Braille blank','line_number':1047,'multiline':False]
['text':' Braille lower left dot','line_number':1055,'multiline':False]
['text':'*
 * Compacts a build-time trie.
 *
 * The compaction
 * - removes blocks that are identical with earlier ones
 * - overlaps each new non-duplicate block as much as possible with the previously-written one
 * - works with fast-range data blocks whose length is a multiple of that of
 *   higher-code-point data blocks
 *
 * It does not try to find an optimal order of writing, deduplicating, and overlapping blocks.
 ','line_number':1071,'multiline':True]
['text':' line.brk ','line_number':1087,'multiline':True]
['text':' dataLength == 30048 /* CanonIterData */ ||','line_number':1088,'multiline':False]
['text':' zh.txt~stroke ','line_number':1089,'multiline':True]
['text':' The linear ASCII data has been copied into newData already.','line_number':1092,'multiline':False]
['text':' Find an earlier part of the data array of length blockLength','line_number':1127,'multiline':False]
['text':' that is filled with this value.','line_number':1128,'multiline':False]
['text':' If we find a match, and the current block is the data null block,','line_number':1130,'multiline':False]
['text':' and it is not a fast block but matches the start of a fast block,','line_number':1131,'multiline':False]
['text':' then we need to continue looking.','line_number':1132,'multiline':False]
['text':' This is because this small block is shorter than the fast block,','line_number':1133,'multiline':False]
['text':' and not all of the rest of the fast block is filled with this value.','line_number':1134,'multiline':False]
['text':' Otherwise trie.getRange() would detect that the fast block starts at','line_number':1135,'multiline':False]
['text':' dataNullOffset and assume incorrectly that it is filled with the null value.','line_number':1136,'multiline':False]
['text':' SAME_AS ','line_number':1181,'multiline':True]
['text':' we saved some space ','line_number':1188,'multiline':True]
['text':' Only the linear fast index, no multi-stage index tables.','line_number':1199,'multiline':False]
['text':' Condense the fast index table.','line_number':1204,'multiline':False]
['text':' Also, does it contain an index-3 block with all dataNullOffset?','line_number':1205,'multiline':False]
['text':' fastIndexLength','line_number':1206,'multiline':False]
['text':' Set the index entries that compactData() skipped.','line_number':1221,'multiline':False]
['text':' Needed when the multi-stage index covers the fast index range as well.','line_number':1222,'multiline':False]
['text':' Examine index-3 blocks. For each determine one of:','line_number':1236,'multiline':False]
['text':' - same as the index-3 null block','line_number':1237,'multiline':False]
['text':' - same as a fast-index block','line_number':1238,'multiline':False]
['text':' - 16-bit indexes','line_number':1239,'multiline':False]
['text':' - 18-bit indexes','line_number':1240,'multiline':False]
['text':' We store this in the first flags entry for the index-3 block.','line_number':1241,'multiline':False]
['text':'','line_number':1242,'multiline':False]
['text':' Also determine an upper limit for the index-3 table length.','line_number':1243,'multiline':False]
['text':' If the fast index covers the whole BMP, then','line_number':1247,'multiline':False]
['text':' the multi-stage index is only for supplementary code points.','line_number':1248,'multiline':False]
['text':' Otherwise, the multi-stage index covers all of Unicode.','line_number':1249,'multiline':False]
['text':' Length of the index-1 table, rounded up.','line_number':1296,'multiline':False]
['text':' Index table: Fast index, index-1, index-3, index-2.','line_number':1299,'multiline':False]
['text':' +1 for possible index table padding.','line_number':1300,'multiline':False]
['text':' Compact the index-3 table and write an uncompacted version of the index-2 table.','line_number':1321,'multiline':False]
['text':' index2Capacity','line_number':1322,'multiline':False]
['text':' First index-3 null block. Write & overlap it like a normal block, then remember it.','line_number':1331,'multiline':False]
['text':' No overlap at the boundary between the index-1 and index-3 tables.','line_number':1345,'multiline':False]
['text':' Encode an index-3 block that contains one or more data indexes exceeding 16 bits.','line_number':1364,'multiline':False]
['text':' No overlap at the boundary between the index-1 and index-3 tables.','line_number':1401,'multiline':False]
['text':' Set the index-2 table entry.','line_number':1426,'multiline':False]
['text':' The index-3 offsets exceed 15 bits, or','line_number':1436,'multiline':False]
['text':' the last one cannot be distinguished from the no-null-block value.','line_number':1437,'multiline':False]
['text':' Compact the index-2 table and write the index-1 table.','line_number':1442,'multiline':False]
['text':' normal block','line_number':1450,'multiline':False]
['text':' highStart is inside the last index-2 block. Shorten it.','line_number':1454,'multiline':False]
['text':' No overlap at the boundary between the index-1 and index-3/2 tables.','line_number':1464,'multiline':False]
['text':' Set the index-1 table entry.','line_number':1476,'multiline':False]
['text':' we saved some space ','line_number':1483,'multiline':True]
['text':' Find the real highStart and round it up.','line_number':1492,'multiline':False]
['text':' We always store indexes and data values for the fast range.','line_number':1507,'multiline':False]
['text':' Pin highStart to the top of that range while building.','line_number':1508,'multiline':False]
['text':' First we look for which data blocks have the same value repeated over the whole block,','line_number':1525,'multiline':False]
['text':' deduplicate such blocks, find a good null data block (for faster enumeration),','line_number':1526,'multiline':False]
['text':' and get an upper bound for the necessary data array length.','line_number':1527,'multiline':False]
['text':' The offset of the last data block is too high to be stored in the index table.','line_number':1553,'multiline':False]
['text':' The mutable trie always stores 32-bit values.','line_number':1586,'multiline':False]
['text':' When we build a UCPTrie for a smaller value width, we first mask off unused bits','line_number':1587,'multiline':False]
['text':' before compacting the data.','line_number':1588,'multiline':False]
['text':' Ensure data table alignment: The index length must be even for uint32_t data.','line_number':1609,'multiline':False]
['text':' arbitrary value','line_number':1611,'multiline':False]
['text':' Make the total trie structure length a multiple of 4 bytes by padding the data table,','line_number':1614,'multiline':False]
['text':' and store special values as the last two data values.','line_number':1615,'multiline':False]
['text':' padding','line_number':1619,'multiline':False]
['text':' 32-bit data words never need padding to a multiple of 4 bytes.','line_number':1628,'multiline':False]
['text':' all set','line_number':1639,'multiline':False]
['text':' Calculate the total length of the UCPTrie as a single memory block.','line_number':1653,'multiline':False]
['text':' Round up shifted12HighStart to a multiple of 0x1000 for easy testing from UTF-8 lead bytes.','line_number':1669,'multiline':False]
['text':' Runtime code needs to then test for the real highStart as well.','line_number':1670,'multiline':False]
['text':' Fill the index and data arrays.','line_number':1681,'multiline':False]
['text':' Condense only the fast index from the mutable-trie index.','line_number':1686,'multiline':False]
['text':' dest16[j]','line_number':1688,'multiline':False]
['text':' Write the data array.','line_number':1696,'multiline':False]
['text':' Write 16-bit data values.','line_number':1700,'multiline':False]
['text':' Write 32-bit data values.','line_number':1707,'multiline':False]
['text':' Write 8-bit data values.','line_number':1712,'multiline':False]
['text':' Will not occur, valueWidth checked at the beginning.','line_number':1719,'multiline':False]
['text':' namespace','line_number':1733,'multiline':False]
['text':' namespace','line_number':1810,'multiline':False]
['text':' Compact and internally serialize the trie. ','line_number':1838,'multiline':True]
