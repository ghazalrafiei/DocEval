['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*
*   Copyright (C) 2001-2014, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  utrie2_builder.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2008sep26 (split off from utrie2.c)
*   created by: Markus W. Scherer
*
*   This is a common implementation of a Unicode trie.
*   It is a kind of compressed, serializable table of 16- or 32-bit values associated with
*   Unicode code points (0..0x10ffff).
*   This is the second common version of a Unicode trie (hence the name UTrie2).
*   See utrie2.h for a comparison.
*
*   This file contains only the builder code.
*   See utrie2.c for the runtime and enumeration code.
','line_number':3,'multiline':True]
['text':' #define UTRIE2_DEBUG','line_number':27,'multiline':False]
['text':' #define UCPTRIE_DEBUG','line_number':31,'multiline':False]
['text':' for utrie2_fromUTrie()','line_number':43,'multiline':False]
['text':' Implementation notes ----------------------------------------------------- ','line_number':45,'multiline':True]
['text':'
 * The UTRIE2_SHIFT_1, UTRIE2_SHIFT_2, UTRIE2_INDEX_SHIFT and other values
 * have been chosen to minimize trie sizes overall.
 * Most of the code is flexible enough to work with a range of values,
 * within certain limits.
 *
 * Exception: Support for separate values for lead surrogate code _units_
 * vs. code _points_ was added after the constants were fixed,
 * and has not been tested nor particularly designed for different constant values.
 * (Especially the utrie2_enum() code that jumps to the special LSCP index-2
 * part and back.)
 *
 * Requires UTRIE2_SHIFT_2<=6. Otherwise 0xc0 which is the top of the ASCII-linear data
 * including the bad-UTF-8-data block is not a multiple of UTRIE2_DATA_BLOCK_LENGTH
 * and map[block>>UTRIE2_SHIFT_2] (used in reference counting and compaction
 * remapping) stops working.
 *
 * Requires UTRIE2_SHIFT_1>=10 because utrie2_enumForLeadSurrogate()
 * assumes that a single index-2 block is used for 0x400 code points
 * corresponding to one lead surrogate.
 *
 * Requires UTRIE2_SHIFT_1<=16. Otherwise one single index-2 block contains
 * more than one Unicode plane, and the split of the index-2 table into a BMP
 * part and a supplementary part, with a gap in between, would not work.
 *
 * Requires UTRIE2_INDEX_SHIFT>=1 not because of the code but because
 * there is data with more than 64k distinct values,
 * for example for Unihan collation with a separate collation weight per
 * Han character.
 ','line_number':47,'multiline':True]
['text':' Building a trie ----------------------------------------------------------','line_number':78,'multiline':True]
['text':'* The null index-2 block, following the gap in the index-2 table. ','line_number':81,'multiline':True]
['text':'* The start of allocated index-2 blocks. ','line_number':84,'multiline':True]
['text':'*
     * The null data block.
     * Length 64=0x40 even if UTRIE2_DATA_BLOCK_LENGTH is smaller,
     * to work with 6-bit trail bytes from 2-byte UTF-8.
     ','line_number':87,'multiline':True]
['text':'* The start of allocated data blocks. ','line_number':94,'multiline':True]
['text':'*
     * The start of data blocks for U+0800 and above.
     * Below, compaction uses a block length of 64 for 2-byte UTF-8.
     * From here on, compaction uses UTRIE2_DATA_BLOCK_LENGTH.
     * Data values for 0x780 code points beyond ASCII.
     ','line_number':97,'multiline':True]
['text':' Start with allocation of 16k data entries. ','line_number':106,'multiline':True]
['text':' Grow about 8x each time. ','line_number':109,'multiline':True]
['text':' no free block in the list ','line_number':154,'multiline':True]
['text':'
     * preallocate and reset
     * - ASCII
     * - the bad-UTF-8-data block
     * - the null data block
     ','line_number':157,'multiline':True]
['text':' set the index-2 indexes for the 2=0x80>>UTRIE2_SHIFT_2 ASCII data blocks ','line_number':175,'multiline':True]
['text':' reference counts for the bad-UTF-8-data block ','line_number':180,'multiline':True]
['text':'
     * Reference counts for the null data block: all blocks except for the ASCII blocks.
     * Plus 1 so that we don't drop this block during compaction.
     * Plus as many as needed for lead surrogate code points.
     ','line_number':184,'multiline':True]
['text':' i==newTrie->dataNullOffset ','line_number':189,'multiline':True]
['text':'
     * set the remaining indexes in the BMP index-2 block
     * to the null data block
     ','line_number':200,'multiline':True]
['text':'
     * Fill the index gap with impossible values so that compaction
     * does not overlap other index-2 blocks with the gap.
     ','line_number':208,'multiline':True]
['text':' set the indexes in the null index-2 block ','line_number':216,'multiline':True]
['text':' set the index-1 indexes for the linear index-2 block ','line_number':223,'multiline':True]
['text':' set the remaining index-1 indexes to the null index-2 block ','line_number':231,'multiline':True]
['text':'
     * Preallocate and reset data for U+0080..U+07ff,
     * for 2-byte UTF-8 which will be compacted in 64-blocks
     * even if UTRIE2_DATA_BLOCK_LENGTH is smaller.
     ','line_number':236,'multiline':True]
['text':' clone data ','line_number':272,'multiline':True]
['text':' reference counters ','line_number':282,'multiline':True]
['text':' make the clone's pointers point to its own memory ','line_number':323,'multiline':True]
['text':' other->newTrie!=NULL ','line_number':332,'multiline':True]
['text':' rather than inclusive range end ','line_number':347,'multiline':True]
['text':' clone an unfrozen trie ','line_number':417,'multiline':True]
['text':' Clone the frozen trie by enumerating it and building a new one. ','line_number':420,'multiline':True]
['text':' Almost the same as utrie2_cloneAsThawed() but copies a UTrie and freezes the clone. ','line_number':447,'multiline':True]
['text':'
         * Should never occur.
         * Either UTRIE2_MAX_BUILD_TIME_INDEX_LENGTH is incorrect,
         * or the code writes more values than should be possible.
         ','line_number':519,'multiline':True]
['text':' program error ','line_number':544,'multiline':True]
['text':' get the first free block ','line_number':556,'multiline':True]
['text':' get a new block from the high end ','line_number':560,'multiline':True]
['text':' out of memory in the data array ','line_number':564,'multiline':True]
['text':'
                 * Should never occur.
                 * Either UNEWTRIE2_MAX_DATA_LENGTH is incorrect,
                 * or the code writes more values than should be possible.
                 ','line_number':573,'multiline':True]
['text':' call when the block's reference counter reaches 0 ','line_number':596,'multiline':True]
['text':' put this block at the front of the free-block chain ','line_number':599,'multiline':True]
['text':' increment first, in case block==oldBlock! ','line_number':612,'multiline':True]
['text':'*
 * No error checking for illegal arguments.
 *
 * @return -1 if no new data block available (out of memory in data array)
 * @internal
 ','line_number':620,'multiline':True]
['text':' program error ','line_number':632,'multiline':True]
['text':' allocate a new data block ','line_number':641,'multiline':True]
['text':' out of memory in the data array ','line_number':644,'multiline':True]
['text':'*
 * @return TRUE if the value was successfully set
 ','line_number':651,'multiline':True]
['text':'*
 * initialValue is ignored if overwrite=TRUE
 * @internal
 ','line_number':711,'multiline':True]
['text':'
     * repeat value in [start..end]
     * mark index values for repeat-data blocks by setting bit 31 of the index values
     * fill around existing values if any, if(overwrite)
     ','line_number':741,'multiline':True]
['text':' nothing to do ','line_number':766,'multiline':True]
['text':' set partial block at [start..following block boundary[ ','line_number':773,'multiline':True]
['text':' number of positions in the last, partial block ','line_number':792,'multiline':True]
['text':' round down limit to a block boundary ','line_number':795,'multiline':True]
['text':' iterate over all-value blocks ','line_number':798,'multiline':True]
['text':' nothing to do ','line_number':810,'multiline':True]
['text':' get index value ','line_number':814,'multiline':True]
['text':' already allocated ','line_number':823,'multiline':True]
['text':'
                 * We overwrite all values, and it's not a
                 * protected (ASCII-linear or 2-byte UTF-8) block:
                 * replace with the repeatBlock.
                 ','line_number':825,'multiline':True]
['text':' !overwrite, or protected block: just write the values into this block ','line_number':832,'multiline':True]
['text':'
             * Set the repeatBlock instead of the null block or previous repeat block:
             *
             * If !isWritableBlock() then all entries in the block have the same value
             * because it's the null block or a range block (the repeatBlock from a previous
             * call to utrie2_setRange32()).
             * No other blocks are used multiple times before compacting.
             *
             * The null block is the only non-writable block with the initialValue because
             * of the repeatBlock initialization above. (If value==initialValue, then
             * the repeatBlock will be the null data block.)
             *
             * We set our repeatBlock if the desired value differs from the block's value,
             * and if we overwrite any data or if the data is all initial values
             * (which is the same as the block being the null block, see above).
             ','line_number':838,'multiline':True]
['text':' create and set and fill the repeatBlock ','line_number':860,'multiline':True]
['text':' set partial block at [last block boundary..limit[ ','line_number':874,'multiline':True]
['text':' compaction --------------------------------------------------------------- ','line_number':887,'multiline':True]
['text':' ensure that we do not even partially get past index2Length ','line_number':913,'multiline':True]
['text':' ensure that we do not even partially get past dataLength ','line_number':928,'multiline':True]
['text':'
 * Find the start of the last range in the trie by enumerating backward.
 * Indexes for supplementary code points higher than this will be omitted.
 ','line_number':939,'multiline':True]
['text':' set variables for previous range ','line_number':957,'multiline':True]
['text':' enumerate index-2 blocks ','line_number':967,'multiline':True]
['text':' the index-2 block is the same as the previous one, and filled with highValue ','line_number':973,'multiline':True]
['text':' this is the null index-2 block ','line_number':979,'multiline':True]
['text':' enumerate data blocks for one index-2 block ','line_number':985,'multiline':True]
['text':' the block is the same as the previous one, and filled with highValue ','line_number':989,'multiline':True]
['text':' this is the null data block ','line_number':995,'multiline':True]
['text':' deliver last range ','line_number':1013,'multiline':True]
['text':'
 * Compact a build-time trie.
 *
 * The compaction
 * - removes blocks that are identical with earlier ones
 * - overlaps adjacent blocks as much as possible (if overlap==TRUE)
 * - moves blocks in steps of the data granularity
 * - moves and overlaps blocks that overlap with multiple values in the overlap region
 *
 * It does not
 * - try to move and overlap blocks that are not already adjacent
 ','line_number':1017,'multiline':True]
['text':' do not compact linear-ASCII data ','line_number':1039,'multiline':True]
['text':'
     * Start with a block length of 64 for 2-byte UTF-8,
     * then switch to UTRIE2_DATA_BLOCK_LENGTH.
     ','line_number':1045,'multiline':True]
['text':'
         * start: index of first entry of current block
         * newStart: index where the current block is to be moved
         *           (right after current end of already-compacted data)
         ','line_number':1052,'multiline':True]
['text':' skip blocks that are not used ','line_number':1062,'multiline':True]
['text':' advance start to the next block ','line_number':1064,'multiline':True]
['text':' leave newStart with the previous block! ','line_number':1067,'multiline':True]
['text':' search for an identical block ','line_number':1071,'multiline':True]
['text':' found an identical block, set the other block's index value for the current block ','line_number':1078,'multiline':True]
['text':' advance start to the next block ','line_number':1084,'multiline':True]
['text':' leave newStart with the previous block! ','line_number':1087,'multiline':True]
['text':' see if the beginning of this block can be overlapped with the end of the previous block ','line_number':1091,'multiline':True]
['text':' look for maximum overlap (modulo granularity) with the previous, adjacent block ','line_number':1092,'multiline':True]
['text':' some overlap, or just move the whole block ','line_number':1101,'multiline':True]
['text':' move the non-overlapping indexes to their new positions ','line_number':1108,'multiline':True]
['text':' no overlap && newStart==start ','line_number':1113,'multiline':True]
['text':' now adjust the index-2 table ','line_number':1122,'multiline':True]
['text':' Gap indexes are invalid (-1). Skip over the gap. ','line_number':1125,'multiline':True]
['text':' ensure dataLength alignment ','line_number':1132,'multiline':True]
['text':' we saved some space ','line_number':1138,'multiline':True]
['text':' do not compact linear-BMP index-2 blocks ','line_number':1150,'multiline':True]
['text':' Reduce the index table gap to what will be needed at runtime. ','line_number':1156,'multiline':True]
['text':'
         * start: index of first entry of current block
         * newStart: index where the current block is to be moved
         *           (right after current end of already-compacted data)
         ','line_number':1160,'multiline':True]
['text':' search for an identical block ','line_number':1166,'multiline':True]
['text':' found an identical block, set the other block's index value for the current block ','line_number':1170,'multiline':True]
['text':' advance start to the next block ','line_number':1173,'multiline':True]
['text':' leave newStart with the previous block! ','line_number':1176,'multiline':True]
['text':' see if the beginning of this block can be overlapped with the end of the previous block ','line_number':1180,'multiline':True]
['text':' look for maximum overlap with the previous, adjacent block ','line_number':1181,'multiline':True]
['text':' some overlap, or just move the whole block ','line_number':1187,'multiline':True]
['text':' move the non-overlapping indexes to their new positions ','line_number':1190,'multiline':True]
['text':' no overlap && newStart==start ','line_number':1195,'multiline':True]
['text':' now adjust the index-1 table ','line_number':1202,'multiline':True]
['text':'
     * Ensure data table alignment:
     * Needs to be granularity-aligned for 16-bit trie
     * (so that dataMove will be down-shiftable),
     * and 2-aligned for uint32_t data.
     ','line_number':1208,'multiline':True]
['text':' Arbitrary value: 0x3fffc not possible for real data. ','line_number':1215,'multiline':True]
['text':' we saved some space ','line_number':1220,'multiline':True]
['text':' find highStart and round it up ','line_number':1236,'multiline':True]
['text':'
     * Set trie->highStart only after utrie2_get32(trie, highStart).
     * Otherwise utrie2_get32(trie, highStart) would try to read the highValue.
     ','line_number':1244,'multiline':True]
['text':' Blank out [highStart..10ffff] to release associated data blocks. ','line_number':1256,'multiline':True]
['text':'
     * Store the highValue in the data array and round up the dataLength.
     * Must be done after compactData() because that assumes that dataLength
     * is a multiple of UTRIE2_DATA_BLOCK_LENGTH.
     ','line_number':1274,'multiline':True]
['text':' serialization ------------------------------------------------------------ ','line_number':1287,'multiline':True]
['text':'*
 * Maximum length of the runtime index array.
 * Limited by its own 16-bit index values, and by uint16_t UTrie2Header.indexLength.
 * (The actual maximum length is lower,
 * (0x110000>>UTRIE2_SHIFT_2)+UTRIE2_UTF8_2B_INDEX_2_LENGTH+UTRIE2_MAX_INDEX_1_LENGTH.)
 ','line_number':1289,'multiline':True]
['text':'*
 * Maximum length of the runtime data array.
 * Limited by 16-bit index values that are left-shifted by UTRIE2_INDEX_SHIFT,
 * and by uint16_t UTrie2Header.shiftedDataLength.
 ','line_number':1297,'multiline':True]
['text':' Compact and internally serialize the trie. ','line_number':1304,'multiline':True]
['text':' >0 if the data is moved to the end of the index array ','line_number':1313,'multiline':True]
['text':' argument check ','line_number':1316,'multiline':True]
['text':' already frozen ','line_number':1328,'multiline':True]
['text':' compact if necessary ','line_number':1337,'multiline':True]
['text':' are indexLength and dataLength within limits? ','line_number':1357,'multiline':True]
['text':' for unshifted indexLength ','line_number':1358,'multiline':True]
['text':' for unshifted dataNullOffset ','line_number':1360,'multiline':True]
['text':' for unshifted 2-byte UTF-8 index-2 values ','line_number':1362,'multiline':True]
['text':' for shiftedDataLength ','line_number':1364,'multiline':True]
['text':' calculate the total serialized length ','line_number':1371,'multiline':True]
['text':' set the header fields ','line_number':1397,'multiline':True]
['text':' "Tri2" ','line_number':1400,'multiline':True]
['text':' fill the index and data arrays ','line_number':1409,'multiline':True]
['text':' write the index-2 array values shifted right by UTRIE2_INDEX_SHIFT, after adding dataMove ','line_number':1413,'multiline':True]
['text':' write UTF-8 2-byte index-2 values, not right-shifted ','line_number':1419,'multiline':True]
['text':' C0..C1 ','line_number':1420,'multiline':True]
['text':' C2..DF ','line_number':1423,'multiline':True]
['text':' write 16-bit index-1 values for supplementary code points ','line_number':1431,'multiline':True]
['text':'
         * write the index-2 array values for supplementary code points,
         * shifted right by UTRIE2_INDEX_SHIFT, after adding dataMove
         ','line_number':1437,'multiline':True]
['text':' write the 16/32-bit data array ','line_number':1447,'multiline':True]
['text':' write 16-bit data values ','line_number':1450,'multiline':True]
['text':' write 32-bit data values ','line_number':1459,'multiline':True]
['text':' Delete the UNewTrie2. ','line_number':1479,'multiline':True]
