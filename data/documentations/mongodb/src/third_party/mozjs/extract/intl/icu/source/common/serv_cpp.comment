['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'*
*******************************************************************************
* Copyright (C) 2001-2014, International Business Machines Corporation.
* All Rights Reserved.
*******************************************************************************
','line_number':3,'multiline':True]
['text':' in case we use the refcount stuff','line_number':19,'multiline':False]
['text':'
******************************************************************
','line_number':23,'multiline':True]
['text':' '/' ','line_number':27,'multiline':True]
['text':'
******************************************************************
','line_number':121,'multiline':True]
['text':' cast away const','line_number':153,'multiline':False]
['text':' locale ','line_number':160,'multiline':True]
['text':'
******************************************************************
','line_number':191,'multiline':True]
['text':'
******************************************************************
','line_number':199,'multiline':True]
['text':' Record the actual id for this service in the cache, so we can return it','line_number':203,'multiline':False]
['text':' even if we succeed later with a different id.','line_number':204,'multiline':False]
['text':'*
    * Releases a reference to the shared resource.
    ','line_number':213,'multiline':True]
['text':'*
    * Instantiation creates an initial reference, so don't call this
    * unless you're creating a new pointer to this.  Management of
    * that pointer will have to know how to deal with refcounts.  
    * Return true if the resource has not already been released.
    ','line_number':224,'multiline':True]
['text':'*
    * Destructions removes a reference, so don't call this unless
    * you're removing pointer to this somewhere.  Management of that
    * pointer will have to know how to deal with refcounts.  Once
    * the refcount drops to zero, the resource is released.  Return
    * false if the resouce has been released.
    ','line_number':235,'multiline':True]
['text':'*
    * Return TRUE if there is at least one reference to this and the
    * resource has not been released.
    ','line_number':250,'multiline':True]
['text':' UObjectDeleter for serviceCache','line_number':259,'multiline':False]
['text':'*
* Deleter for UObjects
','line_number':266,'multiline':True]
['text':'
******************************************************************
','line_number':275,'multiline':True]
['text':' cache.setKeyDeleter(uprv_deleteUObject);','line_number':287,'multiline':False]
['text':'
******************************************************************
','line_number':292,'multiline':True]
['text':'
******************************************************************
','line_number':332,'multiline':True]
['text':' this is a vector that subclasses of ICUService can override to further customize the result object','line_number':392,'multiline':False]
['text':' before returning it.  All other public get functions should call this one.','line_number':393,'multiline':False]
['text':' make it possible to call reentrantly on systems that don't have reentrant mutexes.','line_number':401,'multiline':False]
['text':' we can use this simple approach since we know the situation where we're calling','line_number':402,'multiline':False]
['text':' reentrantly even without knowing the thread.','line_number':403,'multiline':False]
['text':' called only by factories, treat as private','line_number':427,'multiline':False]
['text':' cast away semantic const','line_number':439,'multiline':False]
['text':' The factory list can't be modified until we're done, ','line_number':443,'multiline':False]
['text':' otherwise we might update the cache with an invalid result.','line_number':444,'multiline':False]
['text':' The cache has to stay in synch with the factory list.','line_number':445,'multiline':False]
['text':' ICU doesn't have monitors so we can't use rw locks, so ','line_number':446,'multiline':False]
['text':' we single-thread everything using this service, for now.','line_number':447,'multiline':False]
['text':' if factory is not null, we're calling from within the mutex,','line_number':449,'multiline':False]
['text':' and since some unix machines don't have reentrant mutexes we','line_number':450,'multiline':False]
['text':' need to make sure not to try to lock it again.','line_number':451,'multiline':False]
['text':' throw new InternalError("Factory " + factory + "not registered with service: " + this);','line_number':482,'multiline':False]
['text':' first test of cache failed, so we'll have to update','line_number':497,'multiline':False]
['text':' the cache if we eventually succeed-- that is, if we're ','line_number':498,'multiline':False]
['text':' going to update the cache at all.','line_number':499,'multiline':False]
['text':' prepare to load the cache with all additional ids that ','line_number':522,'multiline':False]
['text':' will resolve to result, assuming we'll succeed.  We','line_number':523,'multiline':False]
['text':' don't want to keep querying on an id that's going to','line_number':524,'multiline':False]
['text':' fallback to the one that succeeded, we want to hit the','line_number':525,'multiline':False]
['text':' cache the first time next goaround.','line_number':526,'multiline':False]
['text':' strip null prefix','line_number':569,'multiline':False]
['text':' U+002f=slash (/)','line_number':570,'multiline':False]
['text':' key ','line_number':598,'multiline':True]
['text':' actualIDReturn ','line_number':598,'multiline':True]
['text':' status ','line_number':598,'multiline':True]
['text':' must only be called when lock is already held','line_number':661,'multiline':False]
['text':' cast away semantic const','line_number':663,'multiline':False]
['text':' fallback','line_number':704,'multiline':False]
['text':' cast away semantic const','line_number':746,'multiline':False]
['text':' share pointer with visibleIDMap','line_number':775,'multiline':False]
['text':' To ensure that all elements in the hashtable are iterated, set pos to -1.
     * nextElement(pos) will skip the position at pos and begin the iteration
     * at the next position, which in this case will be 0.
     ','line_number':788,'multiline':True]
['text':' callers synchronize before use','line_number':933,'multiline':False]
['text':' callers synchronize before use','line_number':945,'multiline':False]
['text':' UCONFIG_NO_SERVICE ','line_number':981,'multiline':True]
