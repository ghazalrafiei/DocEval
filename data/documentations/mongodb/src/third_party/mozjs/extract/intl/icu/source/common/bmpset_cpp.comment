['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
******************************************************************************
*
*   Copyright (C) 2007-2012, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
******************************************************************************
*   file name:  bmpset.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2007jan29
*   created by: Markus W. Scherer
','line_number':3,'multiline':True]
['text':'
     * Set the list indexes for binary searches for
     * U+0800, U+1000, U+2000, .., U+F000, U+10000.
     * U+0800 is the first 3-byte-UTF-8 code point. Lower code points are
     * looked up in the bit tables.
     * The last pair of indexes is for finding supplementary code points.
     ','line_number':35,'multiline':True]
['text':'
 * Set bits in a bit rectangle in "vertical" bit organization.
 * start<limit<=0x800
 ','line_number':66,'multiline':True]
['text':' Named for UTF-8 2-byte lead byte with upper 5 bits.','line_number':74,'multiline':False]
['text':' Named for UTF-8 2-byte trail byte with lower 6 bits.','line_number':75,'multiline':False]
['text':' Set one bit indicating an all-one block.','line_number':77,'multiline':False]
['text':' Single-character shortcut.','line_number':79,'multiline':False]
['text':' Partial vertical bit column.','line_number':88,'multiline':False]
['text':' Partial vertical bit column,','line_number':93,'multiline':False]
['text':' followed by a bit rectangle,','line_number':94,'multiline':False]
['text':' followed by another partial vertical bit column.','line_number':95,'multiline':False]
['text':' limit<=0x800. If limit==0x800 then limitLead=32 and limitTrail=0.','line_number':111,'multiline':False]
['text':' In that case, bits=1<<limitLead is undefined but the bits value','line_number':112,'multiline':False]
['text':' is not used because trail<limitTrail is already false.','line_number':113,'multiline':False]
['text':' Set latin1Contains[].','line_number':125,'multiline':False]
['text':' Find the first range overlapping with (or after) 80..FF again,','line_number':141,'multiline':False]
['text':' to include them in table7FF as well.','line_number':142,'multiline':False]
['text':' Set table7FF[].','line_number':158,'multiline':False]
['text':' Set bmpBlockBits[].','line_number':174,'multiline':False]
['text':' Else: Another range entirely in a known mixed-value block.','line_number':184,'multiline':False]
['text':' Mixed-value block of 64 code points.','line_number':186,'multiline':False]
['text':' Round up to the next block boundary.','line_number':189,'multiline':False]
['text':' Ignore further ranges in this block.','line_number':190,'multiline':False]
['text':' Multiple all-ones blocks of 64 code points each.','line_number':194,'multiline':False]
['text':' Mixed-value block of 64 code points.','line_number':199,'multiline':False]
['text':' Round up to the next block boundary.','line_number':202,'multiline':False]
['text':' Ignore further ranges in this block.','line_number':203,'multiline':False]
['text':'
 * Override some bits and bytes to the result of contains(FFFD)
 * for faster validity checking at runtime.
 * No need to set 0 values where they were reset to 0 in the constructor
 * and not modified by initBits().
 * (table7FF[] 0..7F, bmpBlockBits[] 0..7FF)
 * Need to set 0 values for surrogates D800..DFFF.
 ','line_number':221,'multiline':True]
['text':' Lead bytes 0xC0 and 0xC1.','line_number':234,'multiline':False]
['text':' Lead byte 0xE0.','line_number':239,'multiline':False]
['text':' First half of 4k block.','line_number':240,'multiline':False]
['text':' Lead byte 0xED.','line_number':244,'multiline':False]
['text':' Second half of 4k block.','line_number':246,'multiline':False]
['text':' Lead byte 0xED.','line_number':250,'multiline':False]
['text':' Second half of 4k block.','line_number':251,'multiline':False]
['text':' Examples:
                                       findCodePoint(c)
       set              list[]         c=0 1 3 4 7 8
       ===              ==============   ===========
       []               [110000]         0 0 0 0 0 0
       [\u0000-\u0003]  [0, 4, 110000]   1 1 1 2 2 2
       [\u0004-\u0007]  [4, 8, 110000]   0 0 0 1 1 2
       [:Any:]          [0, 110000]      1 1 1 1 1 1
     ','line_number':258,'multiline':True]
['text':' Return the smallest i such that c < list[i].  Assume','line_number':268,'multiline':False]
['text':' list[len - 1] == HIGH and that c is legal (0..HIGH-1).','line_number':269,'multiline':False]
['text':' High runner test.  c is often after the last range, so an','line_number':272,'multiline':False]
['text':' initial check for this condition pays off.','line_number':273,'multiline':False]
['text':' invariant: c >= list[lo]','line_number':276,'multiline':False]
['text':' invariant: c < list[hi]','line_number':277,'multiline':False]
['text':' Found!','line_number':281,'multiline':False]
['text':' All 64 code points with the same bits 15..6','line_number':301,'multiline':False]
['text':' are either in the set or not.','line_number':302,'multiline':False]
['text':' Look up the code point in its 4k block of code points.','line_number':305,'multiline':False]
['text':' surrogate or supplementary code point','line_number':309,'multiline':False]
['text':' Out-of-range code points get FALSE, consistent with long-standing','line_number':312,'multiline':False]
['text':' behavior of UnicodeSet::contains(c).','line_number':313,'multiline':False]
['text':'
 * Check for sufficient length for trail unit for each surrogate pair.
 * Handle single surrogates as surrogate code points as usual in ICU.
 ','line_number':318,'multiline':True]
['text':' span','line_number':327,'multiline':False]
['text':' All 64 code points with the same bits 15..6','line_number':342,'multiline':False]
['text':' are either in the set or not.','line_number':343,'multiline':False]
['text':' Look up the code point in its 4k block of code points.','line_number':348,'multiline':False]
['text':' surrogate code point','line_number':354,'multiline':False]
['text':' surrogate pair','line_number':359,'multiline':False]
['text':' span not','line_number':367,'multiline':False]
['text':' All 64 code points with the same bits 15..6','line_number':382,'multiline':False]
['text':' are either in the set or not.','line_number':383,'multiline':False]
['text':' Look up the code point in its 4k block of code points.','line_number':388,'multiline':False]
['text':' surrogate code point','line_number':394,'multiline':False]
['text':' surrogate pair','line_number':399,'multiline':False]
['text':' Symmetrical with span(). ','line_number':410,'multiline':True]
['text':' span','line_number':416,'multiline':False]
['text':' All 64 code points with the same bits 15..6','line_number':431,'multiline':False]
['text':' are either in the set or not.','line_number':432,'multiline':False]
['text':' Look up the code point in its 4k block of code points.','line_number':437,'multiline':False]
['text':' surrogate code point','line_number':443,'multiline':False]
['text':' surrogate pair','line_number':448,'multiline':False]
['text':' span not','line_number':459,'multiline':False]
['text':' All 64 code points with the same bits 15..6','line_number':474,'multiline':False]
['text':' are either in the set or not.','line_number':475,'multiline':False]
['text':' Look up the code point in its 4k block of code points.','line_number':480,'multiline':False]
['text':' surrogate code point','line_number':486,'multiline':False]
['text':' surrogate pair','line_number':491,'multiline':False]
['text':'
 * Precheck for sufficient trail bytes at end of string only once per span.
 * Check validity.
 ','line_number':505,'multiline':True]
['text':' Initial all-ASCII span.','line_number':514,'multiline':False]
['text':' Pin to 0/1 values.','line_number':534,'multiline':False]
['text':'
     * Make sure that the last 1/2/3/4-byte sequence before limit is complete
     * or runs into a lead byte.
     * In the span loop compare s with limit only once
     * per multi-byte character.
     *
     * Give a trailing illegal sequence the same value as the result of contains(FFFD),
     * including it if that is part of the span, otherwise set limit0 to before
     * the truncated sequence.
     ','line_number':539,'multiline':True]
['text':' b>=0x80: lead or trail byte','line_number':551,'multiline':False]
['text':' single trail byte, check for preceding 3- or 4-byte lead byte','line_number':553,'multiline':False]
['text':' 4-byte lead byte with only two trail bytes','line_number':560,'multiline':False]
['text':' lead byte with no trail bytes','line_number':567,'multiline':False]
['text':' ASCII','line_number':580,'multiline':False]
['text':' Advance past the lead byte.','line_number':601,'multiline':False]
['text':' handle U+0000..U+FFFF inline ','line_number':604,'multiline':True]
['text':' All 64 code points with this lead byte and middle trail byte','line_number':611,'multiline':False]
['text':' are either in the set or not.','line_number':612,'multiline':False]
['text':' Look up the code point in its 4k block of code points.','line_number':617,'multiline':False]
['text':' handle U+10000..U+10FFFF inline ','line_number':626,'multiline':True]
['text':' Give an illegal sequence the same value as the result of contains(FFFD).','line_number':631,'multiline':False]
['text':' handle U+0000..U+07FF inline ','line_number':644,'multiline':True]
['text':' Give an illegal sequence the same value as the result of contains(FFFD).','line_number':656,'multiline':False]
['text':' Handle each byte of an illegal sequence separately to simplify the code;','line_number':657,'multiline':False]
['text':' no need to optimize error handling.','line_number':658,'multiline':False]
['text':'
 * While going backwards through UTF-8 optimize only for ASCII.
 * Unlike UTF-16, UTF-8 is not forward-backward symmetrical, that is, it is not
 * possible to tell from the last byte in a multi-byte sequence how many
 * preceding bytes there should be. Therefore, going backwards through UTF-8
 * is much harder than going forward.
 ','line_number':667,'multiline':True]
['text':' Pin to 0/1 values.','line_number':677,'multiline':False]
['text':' ASCII sub-span','line_number':685,'multiline':False]
['text':' trail byte: collect a multi-byte character','line_number':709,'multiline':False]
['text':' (or  lead byte in last-trail position)','line_number':710,'multiline':False]
['text':' c is a valid code point, not ASCII, not a surrogate','line_number':712,'multiline':False]
['text':' All 64 code points with the same bits 15..6','line_number':721,'multiline':False]
['text':' are either in the set or not.','line_number':722,'multiline':False]
['text':' Look up the code point in its 4k block of code points.','line_number':727,'multiline':False]
