['text':'
** This file is in the public domain, so clarified as of
** 1996-06-05 by Arthur David Olson.
','line_number':5,'multiline':True]
['text':'
** This header is for use ONLY with the time conversion code.
** There is no guarantee that it will remain unchanged,
** or that it will remain at all.
** Do NOT copy it to any system include directory.
** Thank you!
','line_number':10,'multiline':True]
['text':'
** Information about time zone files.
','line_number':18,'multiline':True]
['text':' Time zone object file directory ','line_number':23,'multiline':True]
['text':' !defined TZDIR ','line_number':24,'multiline':True]
['text':' !defined TZDEFAULT ','line_number':28,'multiline':True]
['text':' !defined TZDEFRULES ','line_number':32,'multiline':True]
['text':'
** Each file begins with. . .
','line_number':34,'multiline':True]
['text':' TZ_MAGIC ','line_number':41,'multiline':True]
['text':' '\0' or '2' or '3' as of 2013 ','line_number':42,'multiline':True]
['text':' reserved--must be zero ','line_number':43,'multiline':True]
['text':' coded number of trans. time flags ','line_number':44,'multiline':True]
['text':' coded number of trans. time flags ','line_number':45,'multiline':True]
['text':' coded number of leap seconds ','line_number':46,'multiline':True]
['text':' coded number of transition times ','line_number':47,'multiline':True]
['text':' coded number of local time types ','line_number':48,'multiline':True]
['text':' coded number of abbr. chars ','line_number':49,'multiline':True]
['text':'
** . . .followed by. . .
**
**	tzh_timecnt (char [4])s		coded transition times a la time(2)
**	tzh_timecnt (unsigned char)s	types of local time starting at above
**	tzh_typecnt repetitions of
**		one (char [4])		coded UT offset in seconds
**		one (unsigned char)	used to set tm_isdst
**		one (unsigned char)	that's an abbreviation list index
**	tzh_charcnt (char)s		'\0'-terminated zone abbreviations
**	tzh_leapcnt repetitions of
**		one (char [4])		coded leap second transition times
**		one (char [4])		total correction after above
**	tzh_ttisstdcnt (char)s		indexed by type; if TRUE, transition
**					time is standard time, if FALSE,
**					transition time is wall clock time
**					if absent, transition times are
**					assumed to be wall clock time
**	tzh_ttisgmtcnt (char)s		indexed by type; if TRUE, transition
**					time is UT, if FALSE,
**					transition time is local time
**					if absent, transition times are
**					assumed to be local time
','line_number':52,'multiline':True]
['text':'
** If tzh_version is '2' or greater, the above is followed by a second instance
** of tzhead and a second instance of the data in which each coded transition
** time uses 8 rather than 4 chars,
** then a POSIX-TZ-environment-variable-style string for use in handling
** instants after the last transition time stored in the file
** (with nothing between the newlines if there is no POSIX representation for
** such instants).
**
** If tz_version is '3' or greater, the above is extended as follows.
** First, the POSIX TZ string's hour offset may range from -167
** through 167 as compared to the POSIX-required 0 through 24.
** Second, its DST start time may be January 1 at 00:00 and its stop
** time December 31 at 24:00 plus the difference between DST and
** standard time, indicating DST all year.
','line_number':77,'multiline':True]
['text':'
** In the current implementation, "tzset()" refuses to deal with files that
** exceed any of the limits below.
','line_number':94,'multiline':True]
['text':' !defined TZ_MAX_TIMES ','line_number':101,'multiline':True]
['text':' This must be at least 17 for Europe/Samara and Europe/Vilnius.  ','line_number':104,'multiline':True]
['text':' Limited by what (unsigned char)'s can hold ','line_number':105,'multiline':True]
['text':' !defined TZ_MAX_TYPES ','line_number':106,'multiline':True]
['text':' Maximum number of abbreviation characters ','line_number':109,'multiline':True]
['text':' (limited by what unsigned chars can hold) ','line_number':110,'multiline':True]
['text':' !defined TZ_MAX_CHARS ','line_number':111,'multiline':True]
['text':' Maximum number of leap second corrections ','line_number':114,'multiline':True]
['text':' !defined TZ_MAX_LEAPS ','line_number':115,'multiline':True]
['text':'
** Since everything in isleap is modulo 400 (or a factor of 400), we know that
**	isleap(y) == isleap(y % 400)
** and so
**	isleap(a + b) == isleap((a + b) % 400)
** or
**	isleap(a + b) == isleap(a % 400 + b % 400)
** This is true even if % means modulo rather than Fortran remainder
** (which is allowed by C89 but not C99).
** We use this to avoid addition overflow problems.
','line_number':155,'multiline':True]
['text':' !defined TZFILE_H ','line_number':169,'multiline':True]
