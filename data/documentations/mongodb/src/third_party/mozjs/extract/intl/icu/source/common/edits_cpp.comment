['text':' Â© 2017 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':' edits.cpp','line_number':4,'multiline':False]
['text':' created: 2017feb08 Markus W. Scherer','line_number':5,'multiline':False]
['text':' 0000uuuuuuuuuuuu records u+1 unchanged text units.','line_number':18,'multiline':False]
['text':' 0mmmnnnccccccccc with m=1..6 records ccc+1 replacements of m:n text units.','line_number':22,'multiline':False]
['text':' 0111mmmmmmnnnnnn records a replacement of m text units with n.','line_number':28,'multiline':False]
['text':' m or n = 61: actual length follows in the next edits array unit.','line_number':29,'multiline':False]
['text':' m or n = 62..63: actual length follows in the next two edits array units.','line_number':30,'multiline':False]
['text':' Bit 30 of the actual length is in the head unit.','line_number':31,'multiline':False]
['text':' Trailing units have bit 15 set.','line_number':32,'multiline':False]
['text':' namespace','line_number':36,'multiline':False]
['text':' self-assignment: no-op','line_number':89,'multiline':False]
['text':' Merge into previous unchanged-text record, if any.','line_number':120,'multiline':False]
['text':' Split large lengths into multiple units.','line_number':131,'multiline':False]
['text':' Write a small (remaining) length.','line_number':136,'multiline':False]
['text':' Integer overflow or underflow.','line_number':156,'multiline':False]
['text':' Merge into previous same-lengths short-replacement record, if any.','line_number':165,'multiline':False]
['text':' Not U_BUFFER_OVERFLOW_ERROR because that could be confused on a string transform API','line_number':221,'multiline':False]
['text':' with a result-string-buffer overflow.','line_number':222,'multiline':False]
['text':' Grow by at least 5 units so that a maximal change record will fit.','line_number':230,'multiline':False]
['text':' Picture string a --(Edits ab)--> string b --(Edits bc)--> string c.','line_number':256,'multiline':False]
['text':' Parallel iteration over both Edits.','line_number':257,'multiline':False]
['text':' Copy iterator state into local variables, so that we can modify and subdivide spans.','line_number':261,'multiline':False]
['text':' ab old & new length, bc old & new length','line_number':262,'multiline':False]
['text':' When we have different-intermediate-length changes, we accumulate a larger change.','line_number':264,'multiline':False]
['text':' At this point, for each of the two iterators:','line_number':267,'multiline':False]
['text':' Either we are done with the locally cached current edit,','line_number':268,'multiline':False]
['text':' and its intermediate-string length has been reset,','line_number':269,'multiline':False]
['text':' or we will continue to work with a truncated remainder of this edit.','line_number':270,'multiline':False]
['text':'','line_number':271,'multiline':False]
['text':' If the current edit is done, and the iterator has not yet reached the end,','line_number':272,'multiline':False]
['text':' then we fetch the next edit. This is true for at least one of the iterators.','line_number':273,'multiline':False]
['text':'','line_number':274,'multiline':False]
['text':' Normally it does not matter whether we fetch from ab and then bc or vice versa.','line_number':275,'multiline':False]
['text':' However, the result is observably different when','line_number':276,'multiline':False]
['text':' ab deletions meet bc insertions at the same intermediate-string index.','line_number':277,'multiline':False]
['text':' Some users expect the bc insertions to come first, so we fetch from bc first.','line_number':278,'multiline':False]
['text':' insertion','line_number':284,'multiline':False]
['text':' else see if the other iterator is done, too.','line_number':294,'multiline':False]
['text':' deletion','line_number':301,'multiline':False]
['text':' Both iterators are done at the same time:','line_number':311,'multiline':False]
['text':' The intermediate-string lengths match.','line_number':312,'multiline':False]
['text':' The ab output string is shorter than the bc input string.','line_number':315,'multiline':False]
['text':' The bc input string is shorter than the ab output string.','line_number':323,'multiline':False]
['text':'  Done fetching: ab_bLength > 0 && bc_bLength > 0','line_number':329,'multiline':False]
['text':' The current state has two parts:','line_number':331,'multiline':False]
['text':' - Past: We accumulate a longer ac edit in the "pending" variables.','line_number':332,'multiline':False]
['text':' - Current: We have copies of the current ab/bc edits in local variables.','line_number':333,'multiline':False]
['text':'   At least one side is newly fetched.','line_number':334,'multiline':False]
['text':'   One side might be a truncated remainder of an edit we fetched earlier.','line_number':335,'multiline':False]
['text':' An unchanged span all the way from string a to string c.','line_number':338,'multiline':False]
['text':' At least one of the unchanged spans is now empty.','line_number':347,'multiline':False]
['text':' Unchanged a->b but changed b->c.','line_number':351,'multiline':False]
['text':' Split the longer unchanged span into change + remainder.','line_number':353,'multiline':False]
['text':' Handle the shorter unchanged span below like a change.','line_number':360,'multiline':False]
['text':' Changed a->b and then unchanged b->c.','line_number':362,'multiline':False]
['text':' Split the longer unchanged span into change + remainder.','line_number':364,'multiline':False]
['text':' Handle the shorter unchanged span below like a change.','line_number':371,'multiline':False]
['text':' both abIter.hasChange() && bcIter.hasChange()','line_number':372,'multiline':False]
['text':' Changes on both sides up to the same position. Emit & reset.','line_number':374,'multiline':False]
['text':' Accumulate the a->c change, reset the shorter side,','line_number':381,'multiline':False]
['text':' keep a remainder of the longer one.','line_number':382,'multiline':False]
['text':' ab_bLength > bc_bLength','line_number':388,'multiline':False]
['text':' No change before or beyond the string.','line_number':442,'multiline':False]
['text':' Forward iteration: Update the string indexes to the limit of the current span,','line_number':450,'multiline':False]
['text':' and post-increment-read array units to assemble a new span.','line_number':451,'multiline':False]
['text':' Leaves the array index one after the last unit of that span.','line_number':452,'multiline':False]
['text':' We have an errorCode in case we need to start guarding against integer overflows.','line_number':454,'multiline':False]
['text':' It is also convenient for caller loops if we bail out when an error was set elsewhere.','line_number':455,'multiline':False]
['text':' Turn around from previous() to next().','line_number':460,'multiline':False]
['text':' Post-increment-read the same span again.','line_number':461,'multiline':False]
['text':' Fine-grained iterator:','line_number':463,'multiline':False]
['text':' Stay on the current one of a sequence of compressed changes.','line_number':464,'multiline':False]
['text':' next() rests on the index after the sequence unit.','line_number':465,'multiline':False]
['text':' Fine-grained iterator: Continue a sequence of compressed changes.','line_number':473,'multiline':False]
['text':' Combine adjacent unchanged ranges.','line_number':485,'multiline':False]
['text':' already fetched u > MAX_UNCHANGED at index','line_number':498,'multiline':False]
['text':' Split a sequence of changes that was compressed into one unit.','line_number':513,'multiline':False]
['text':' This is the first of two or more changes.','line_number':517,'multiline':False]
['text':' Combine adjacent changes.','line_number':529,'multiline':False]
['text':' Backward iteration: Pre-decrement-read array units to assemble a new span,','line_number':546,'multiline':False]
['text':' then update the string indexes to the start of that span.','line_number':547,'multiline':False]
['text':' Leaves the array index on the head unit of that span.','line_number':548,'multiline':False]
['text':' We have an errorCode in case we need to start guarding against integer overflows.','line_number':550,'multiline':False]
['text':' It is also convenient for caller loops if we bail out when an error was set elsewhere.','line_number':551,'multiline':False]
['text':' Turn around from next() to previous().','line_number':554,'multiline':False]
['text':' Set the string indexes to the span limit and','line_number':555,'multiline':False]
['text':' pre-decrement-read the same span again.','line_number':556,'multiline':False]
['text':' Fine-grained iterator:','line_number':558,'multiline':False]
['text':' Stay on the current one of a sequence of compressed changes.','line_number':559,'multiline':False]
['text':' previous() rests on the sequence unit.','line_number':560,'multiline':False]
['text':' Fine-grained iterator: Continue a sequence of compressed changes.','line_number':569,'multiline':False]
['text':' Combine adjacent unchanged ranges.','line_number':584,'multiline':False]
['text':' No need to handle onlyChanges as long as previous() is called only from findIndex().','line_number':592,'multiline':False]
['text':' Split a sequence of changes that was compressed into one unit.','line_number':605,'multiline':False]
['text':' This is the last of two or more changes.','line_number':609,'multiline':False]
['text':' The change is encoded in u alone.','line_number':616,'multiline':False]
['text':' Back up to the head of the change, read the lengths,','line_number':620,'multiline':False]
['text':' and reset the index to the head again.','line_number':621,'multiline':False]
['text':' Combine adjacent changes.','line_number':635,'multiline':False]
['text':' Read the lengths, and reset the index to the head again.','line_number':643,'multiline':False]
['text':' find source index','line_number':657,'multiline':False]
['text':' find destination index','line_number':660,'multiline':False]
['text':' Search backwards.','line_number':666,'multiline':False]
['text':' because i>=0 and the first span starts at 0','line_number':669,'multiline':False]
['text':' avoid unused-variable warning','line_number':670,'multiline':False]
['text':' The index is in the current span.','line_number':673,'multiline':False]
['text':' Is the index in one of the remaining compressed edits?','line_number':677,'multiline':False]
['text':' spanStart is the start of the current span, first of the remaining ones.','line_number':678,'multiline':False]
['text':' 1 <= n <= num','line_number':686,'multiline':False]
['text':' Skip all of these edits at once.','line_number':693,'multiline':False]
['text':' Reset the iterator to the start.','line_number':701,'multiline':False]
['text':' The index is in the current span.','line_number':705,'multiline':False]
['text':' The index is in the current span.','line_number':717,'multiline':False]
['text':' Is the index in one of the remaining compressed edits?','line_number':721,'multiline':False]
['text':' spanStart is the start of the current span, first of the remaining ones.','line_number':722,'multiline':False]
['text':' 1 <= n <= remaining - 1','line_number':725,'multiline':False]
['text':' Make next() skip all of these edits at once.','line_number':732,'multiline':False]
['text':' Error or before the string.','line_number':744,'multiline':False]
['text':' At or after string length, or at start of the found span.','line_number':748,'multiline':False]
['text':' In a change span, map to its end.','line_number':752,'multiline':False]
['text':' In an unchanged span, offset 1:1 within it.','line_number':755,'multiline':False]
['text':' Error or before the string.','line_number':763,'multiline':False]
['text':' At or after string length, or at start of the found span.','line_number':767,'multiline':False]
['text':' In a change span, map to its end.','line_number':771,'multiline':False]
['text':' In an unchanged span, offset within it.','line_number':774,'multiline':False]
