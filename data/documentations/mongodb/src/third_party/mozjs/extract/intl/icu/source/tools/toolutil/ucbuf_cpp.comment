['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 1998-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*
* File ucbuf.cpp
*
* Modification History:
*
*   Date        Name        Description
*   05/10/01    Ram         Creation.
*******************************************************************************
','line_number':3,'multiline':True]
['text':' makes this API not produce any errors ','line_number':50,'multiline':True]
['text':' read a few bytes ','line_number':63,'multiline':True]
['text':' unread the bytes beyond what was consumed for U+FEFF ','line_number':68,'multiline':True]
['text':' open the converter for the detected Unicode charset ','line_number':79,'multiline':True]
['text':' convert and ignore initial U+FEFF, and the buffer overflow ','line_number':82,'multiline':True]
['text':' verify that we successfully read exactly U+FEFF ','line_number':91,'multiline':True]
['text':' open the file ','line_number':143,'multiline':True]
['text':' fill the uchar buffer ','line_number':161,'multiline':True]
['text':' check if we arrived here without exhausting the buffer','line_number':175,'multiline':True]
['text':' read the file ','line_number':186,'multiline':True]
['text':' just to be sure...','line_number':201,'multiline':True]
['text':' convert the bytes ','line_number':206,'multiline':True]
['text':' set the callback to stop ','line_number':208,'multiline':True]
['text':' since state is saved in the converter we add offset to source','line_number':218,'multiline':True]
['text':' use erro1 to preserve the error code ','line_number':234,'multiline':True]
['text':' now get the context chars ','line_number':244,'multiline':True]
['text':' null terminate the buffer ','line_number':246,'multiline':True]
['text':' for pre-context ','line_number':250,'multiline':True]
['text':' null terminate the buffer ','line_number':255,'multiline':True]
['text':' for post-context ','line_number':258,'multiline':True]
['text':' null terminate the buffer ','line_number':263,'multiline':True]
['text':' print out the context ','line_number':267,'multiline':True]
['text':' reset the converter ','line_number':273,'multiline':True]
['text':' set the call back to substitute
             * and restart conversion
             ','line_number':276,'multiline':True]
['text':' reset source and target start positions ','line_number':286,'multiline':True]
['text':' re convert ','line_number':290,'multiline':True]
['text':'  printf("%c", (char)(*target++));','line_number':303,'multiline':True]
['text':'NUL terminate','line_number':314,'multiline':True]
['text':' get a UChar from the stream','line_number':323,'multiline':True]
['text':' get a UChar32 from the stream','line_number':342,'multiline':True]
['text':' u_unescapeAt() callback to return a UChar','line_number':367,'multiline':True]
['text':' getc and escape it ','line_number':373,'multiline':True]
['text':' Fill the buffer if it is empty ','line_number':382,'multiline':True]
['text':' Get the next character in the buffer ','line_number':387,'multiline':True]
['text':' If it isn't a backslash, return it ','line_number':396,'multiline':True]
['text':' Determine the amount of data in the buffer ','line_number':401,'multiline':True]
['text':' The longest escape sequence is \Uhhhhhhhh; make sure
       we have at least that many characters ','line_number':404,'multiline':True]
['text':' fill the buffer ','line_number':408,'multiline':True]
['text':' Process the escape ','line_number':413,'multiline':True]
['text':' check if u_unescapeAt unescaped and converted
     * to c32 or not
     ','line_number':417,'multiline':True]
['text':' null terminate the buffer ','line_number':427,'multiline':True]
['text':' for \u0075 c2=0x0075 and c32==0x0075','line_number':433,'multiline':True]
['text':' Update the current buffer position ','line_number':434,'multiline':True]
['text':' unescaping failed so we just return
         * c1 and not consume the buffer
         * this is useful for rules with escapes
         * in resouce bundles
         * eg: \' \\ \"
         ','line_number':437,'multiline':True]
['text':' don't have code page name... try to autodetect ','line_number':482,'multiline':True]
['text':' discard BOM ','line_number':485,'multiline':True]
['text':'for terminating nul','line_number':505,'multiline':True]
['text':' TODO: this method will fail if at the
 * beginning of buffer and the uchar to unget
 * is from the previous buffer. Need to implement
 * system to take care of that situation.
 ','line_number':533,'multiline':True]
['text':' decrement currentPos pointer
     * if not at the beginning of buffer
     ','line_number':540,'multiline':True]
['text':' ungetc failed - did not match. ','line_number':547,'multiline':True]
['text':' ungetc failed - beginning of buffer. ','line_number':550,'multiline':True]
['text':' frees the resources of UChar* buffer ','line_number':554,'multiline':True]
['text':' close the buf and release resources','line_number':561,'multiline':True]
['text':' rewind the buf and file stream ','line_number':574,'multiline':True]
['text':' read the signature bytes ','line_number':594,'multiline':True]
['text':' convert and ignore initial U+FEFF, and the buffer overflow ','line_number':597,'multiline':True]
['text':' verify that we successfully read exactly U+FEFF ','line_number':605,'multiline':True]
['text':'
         * append the input dir to openFileName if the first char in 
         * filename is not file seperation char and the last char input directory is  not '.'.
         * This is to support :
         * genrb -s. /home/icu/data
         * genrb -s. icu/data
         * The user cannot mix notations like
         * genrb -s. /icu/data --- the absolute path specified. -s redundant
         * user should use
         * genrb -s. icu/data  --- start from CWD and look in icu/data dir
         ','line_number':665,'multiline':True]
['text':'
 * Unicode TR 13 says any of the below chars is
 * a new line char in a readline function in addition
 * to CR+LF combination which needs to be 
 * handled seperately
 ','line_number':695,'multiline':True]
['text':' LF  ','line_number':703,'multiline':True]
['text':' CR  ','line_number':704,'multiline':True]
['text':' FF  ','line_number':705,'multiline':True]
['text':' NEL ','line_number':706,'multiline':True]
['text':' LS  ','line_number':707,'multiline':True]
['text':' PS  ','line_number':708,'multiline':True]
['text':' The input is buffered we have to do more
        * for returning a pointer U_TRUNCATED_CHAR_FOUND
        ','line_number':721,'multiline':True]
['text':' end of file is reached return NULL ','line_number':727,'multiline':True]
['text':'
             * According to TR 13 readLine functions must interpret
             * CR, CR+LF, LF, NEL, PS, LS or FF as line seperators
             ','line_number':738,'multiline':True]
['text':' Windows CR LF ','line_number':742,'multiline':True]
['text':' else ','line_number':749,'multiline':True]
['text':' Unipad inserts 2028 line separators! ','line_number':751,'multiline':True]
['text':' we know that all input is read into the internal
    * buffer so we can safely return pointers
        ','line_number':759,'multiline':True]
['text':' end of file is reached return NULL ','line_number':766,'multiline':True]
['text':' Windows CR LF ','line_number':768,'multiline':True]
['text':' else ','line_number':775,'multiline':True]
['text':' Unipad inserts 2028 line separators! ','line_number':776,'multiline':True]
['text':' not reached ','line_number':784,'multiline':True]
['text':' A compiler warning will appear if all paths don't contain a return statement. ','line_number':785,'multiline':True]
['text':'    return NULL;','line_number':786,'multiline':True]
