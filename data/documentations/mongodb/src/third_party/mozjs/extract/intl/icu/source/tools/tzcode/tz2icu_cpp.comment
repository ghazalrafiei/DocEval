['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
**********************************************************************
* Copyright (c) 2003-2014, International Business Machines
* Corporation and others.  All Rights Reserved.
**********************************************************************
* Author: Alan Liu
* Created: July 10 2003
* Since: ICU 2.8
**********************************************************************
','line_number':3,'multiline':True]
['text':' from Olson tzcode archive, copied to this dir','line_number':13,'multiline':False]
['text':' windows.h/STL conflict','line_number':18,'multiline':False]
['text':' windows.h/STL conflict','line_number':19,'multiline':False]
['text':' "identifier was truncated to 'number' characters" warning','line_number':20,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':57,'multiline':False]
['text':' Time utilities','line_number':58,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':59,'multiline':False]
['text':' 365 days','line_number':61,'multiline':False]
['text':' 366 days','line_number':62,'multiline':False]
['text':' Gregorian','line_number':67,'multiline':False]
['text':'*
 * Given a calendar year, return the GMT epoch seconds for midnight
 * GMT of January 1 of that year.  yearToSeconds(1970) == 0.
 ','line_number':74,'multiline':True]
['text':' inefficient but foolproof','line_number':79,'multiline':False]
['text':'*
 * Given 1970 GMT epoch seconds, return the calendar year containing
 * that time.  secondsToYear(0) == 1970.
 ','line_number':91,'multiline':True]
['text':' inefficient but foolproof','line_number':96,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':114,'multiline':False]
['text':' Types','line_number':115,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':116,'multiline':False]
['text':' A transition from one ZoneType to another','line_number':122,'multiline':False]
['text':' Minimal size = 5 bytes (4+1)','line_number':123,'multiline':False]
['text':' seconds, 1970 epoch','line_number':125,'multiline':False]
['text':' index into 'ZoneInfo.types' 0..255','line_number':126,'multiline':False]
['text':' A behavior mode (what zic calls a 'type') of a time zone.','line_number':133,'multiline':False]
['text':' Minimal size = 6 bytes (4+1+3bits)','line_number':134,'multiline':False]
['text':' SEE: SimplifiedZoneType','line_number':135,'multiline':False]
['text':' raw seconds offset from GMT','line_number':137,'multiline':False]
['text':' dst seconds offset from GMT','line_number':138,'multiline':False]
['text':' We don't really need any of the following, but they are','line_number':140,'multiline':False]
['text':' retained for possible future use.  See SimplifiedZoneType.','line_number':141,'multiline':False]
['text':' index into ZoneInfo.abbrs 0..n-1','line_number':142,'multiline':False]
['text':' used by optimizeTypeList','line_number':147,'multiline':False]
['text':' A restricted equality, of just the raw and dst offset','line_number':151,'multiline':False]
['text':' A collection of transitions from one ZoneType to another, together','line_number':158,'multiline':False]
['text':' with a list of the ZoneTypes.  A ZoneInfo object may have a long','line_number':159,'multiline':False]
['text':' list of transitions between a smaller list of ZoneTypes.','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' This object represents the contents of a single zic-created','line_number':162,'multiline':False]
['text':' zoneinfo file.','line_number':163,'multiline':False]
['text':' -1 if none','line_number':171,'multiline':False]
['text':' If this is an alias, then all other fields are meaningless, and','line_number':173,'multiline':False]
['text':' this field will point to the "real" zone 0..n-1.','line_number':174,'multiline':False]
['text':' -1 if this is a "real" zone','line_number':175,'multiline':False]
['text':' If there are aliases TO this zone, then the following set will','line_number':177,'multiline':False]
['text':' contain their index numbers (each index >= 0).','line_number':178,'multiline':False]
['text':' Set this zone to be an alias TO another zone.','line_number':187,'multiline':False]
['text':' Clear the list of aliases OF this zone.','line_number':190,'multiline':False]
['text':' Add an alias to the list of aliases OF this zone.','line_number':193,'multiline':False]
['text':' Is this an alias to another zone?','line_number':196,'multiline':False]
['text':' Retrieve alias list','line_number':201,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':229,'multiline':False]
['text':' ZONEINFO','line_number':230,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':231,'multiline':False]
['text':' Global map holding all our ZoneInfo objects, indexed by id.','line_number':233,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':236,'multiline':False]
['text':' zoneinfo file parsing','line_number':237,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':238,'multiline':False]
['text':' Read zic-coded 32-bit integer from file','line_number':240,'multiline':False]
['text':' must be UNSIGNED','line_number':243,'multiline':False]
['text':' Read zic-coded 64-bit integer from file','line_number':258,'multiline':False]
['text':' must be UNSIGNED','line_number':261,'multiline':False]
['text':' Read a boolean value','line_number':276,'multiline':False]
['text':'*
 * Read the zoneinfo file structure (see tzfile.h) into a ZoneInfo
 * @param file an already-open file stream
 ','line_number':288,'multiline':True]
['text':' Check for TZ_ICU_MAGIC signature at file start.  If we get a','line_number':295,'multiline':False]
['text':' signature mismatch, it means we're trying to read a file which','line_number':296,'multiline':False]
['text':' isn't a ICU-modified-zic-created zoneinfo file.  Typically this','line_number':297,'multiline':False]
['text':' means the user is passing in a "normal" zoneinfo directory, or','line_number':298,'multiline':False]
['text':' a zoneinfo directory that is polluted with other files, or that','line_number':299,'multiline':False]
['text':' the user passed in the wrong directory.','line_number':300,'multiline':False]
['text':' skip additional Olson byte version','line_number':306,'multiline':False]
['text':' if '\0', we have just one copy of data, if '2' or '3', there is additional','line_number':308,'multiline':False]
['text':' 64 bit version at the end.','line_number':309,'multiline':False]
['text':' Read reserved bytes.  The first of these will be a version byte.','line_number':314,'multiline':False]
['text':' Read array sizes','line_number':320,'multiline':False]
['text':' Confirm sizes that we assume to be equal.  These assumptions','line_number':328,'multiline':False]
['text':' are drawn from a reading of the zic source (2003a), so they','line_number':329,'multiline':False]
['text':' should hold unless the zic source changes.','line_number':330,'multiline':False]
['text':' Used temporarily to store transition times and types.  We need','line_number':335,'multiline':False]
['text':' to do this because the times and types are stored in two','line_number':336,'multiline':False]
['text':' separate arrays.','line_number':337,'multiline':False]
['text':' temporary','line_number':338,'multiline':False]
['text':' temporary','line_number':339,'multiline':False]
['text':' Read transition times','line_number':341,'multiline':False]
['text':' Read transition types','line_number':350,'multiline':False]
['text':' Build transitions vector out of corresponding times and types.','line_number':363,'multiline':False]
['text':' Preserve the latest transition before the 32bit minimum time','line_number':371,'multiline':False]
['text':' Skipping the rest of the transition data.  We cannot put such','line_number':375,'multiline':False]
['text':' transitions into zoneinfo.res, because data is limited to singed','line_number':376,'multiline':False]
['text':' 32bit int by the ICU resource bundle.','line_number':377,'multiline':False]
['text':' If there are any transitions before the 32bit minimum time,','line_number':385,'multiline':False]
['text':' put the type information with the 32bit minimum time','line_number':386,'multiline':False]
['text':' Otherwise, we need insert the initial type later','line_number':390,'multiline':False]
['text':' Read types (except for the isdst and isgmt flags, which come later (why??))','line_number':400,'multiline':False]
['text':' Check if the first type is not dst','line_number':427,'multiline':False]
['text':' Initial type's rawoffset is same with the rawoffset after the','line_number':429,'multiline':False]
['text':' first transition, but no DST is observed.','line_number':430,'multiline':False]
['text':' Look for matching type','line_number':432,'multiline':False]
['text':' Add the initial type associated with the lowest int32 time','line_number':444,'multiline':False]
['text':' Read the abbreviation string','line_number':450,'multiline':False]
['text':' All abbreviations are concatenated together, with a 0 at','line_number':452,'multiline':False]
['text':' the end of each abbr.','line_number':453,'multiline':False]
['text':' Split abbreviations apart into individual strings.  Record','line_number':457,'multiline':False]
['text':' offset of each abbr in a vector.','line_number':458,'multiline':False]
['text':' Remap all the abbrs.  Old value is offset into concatenated','line_number':468,'multiline':False]
['text':' raw abbr strings.  New value is index into vector of','line_number':469,'multiline':False]
['text':' strings.  E.g., 0,5,10,14 => 0,1,2,3.','line_number':470,'multiline':False]
['text':' Keep track of which abbreviations get used.','line_number':472,'multiline':False]
['text':' TODO: Modify code to add a new string to the end of','line_number':481,'multiline':False]
['text':' the abbr list when a middle offset is given, e.g.,','line_number':482,'multiline':False]
['text':' "abc*def*" where * == '\0', take offset of 1 and','line_number':483,'multiline':False]
['text':' make the array "abc", "def", "bc", and translate 1','line_number':484,'multiline':False]
['text':' => 2.  NOT CRITICAL since we don't even use the','line_number':485,'multiline':False]
['text':' abbr at this time.','line_number':486,'multiline':False]
['text':' TODO: Re-enable this warning if we start using','line_number':488,'multiline':False]
['text':' the Olson abbr data, or if the above TODO is completed.','line_number':489,'multiline':False]
['text':' Read leap second info, if any.','line_number':514,'multiline':False]
['text':' *** We discard leap second data. ***','line_number':515,'multiline':False]
['text':' transition time','line_number':517,'multiline':False]
['text':' total correction after above','line_number':518,'multiline':False]
['text':' Read isstd flags','line_number':521,'multiline':False]
['text':' Read isgmt flags','line_number':524,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':528,'multiline':False]
['text':' Directory and file reading','line_number':529,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':530,'multiline':False]
['text':'*
 * Process a single zoneinfo file, adding the data to ZONEINFO
 * @param path the full path to the file, e.g., ".\zoneinfo\America\Los_Angeles"
 * @param id the zone ID, e.g., "America/Los_Angeles"
 ','line_number':532,'multiline':True]
['text':' Check for duplicate id','line_number':538,'multiline':False]
['text':' eat 32bit data part','line_number':550,'multiline':False]
['text':' Check for errors','line_number':554,'multiline':False]
['text':' we only use 64bit part','line_number':559,'multiline':False]
['text':' '\n' + <envvar string> + '\n' after the 64bit version data','line_number':566,'multiline':False]
['text':' must be printable ascii','line_number':575,'multiline':False]
['text':'*
 * Recursively scan the given directory, calling handleFile() for each
 * file in the tree.  The user should call with the root directory and
 * a prefix of "".  The function will call itself with non-empty
 * prefix values.
 ','line_number':598,'multiline':True]
['text':' Get the first file','line_number':610,'multiline':False]
['text':' else...?','line_number':637,'multiline':False]
['text':' scandir(path, prefix + name + "/");','line_number':670,'multiline':False]
['text':' handleFile(path, id);','line_number':677,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':704,'multiline':False]
['text':' Final zone and rule info','line_number':705,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':706,'multiline':False]
['text':'*
 * Read and discard the current line.
 ','line_number':708,'multiline':True]
['text':' Allow 29 days in February because zic outputs February 29','line_number':726,'multiline':False]
['text':' for rules like "last Sunday in February".','line_number':727,'multiline':False]
['text':' raw offset','line_number':733,'multiline':False]
['text':' takes effect for y >= year','line_number':734,'multiline':False]
['text':' dst offset, usually either 0 or 1:00','line_number':771,'multiline':False]
['text':' Isstd and isgmt only have 3 valid states, corresponding to local','line_number':773,'multiline':False]
['text':' wall time, local standard time, and GMT standard time.','line_number':774,'multiline':False]
['text':' Here is how the isstd & isgmt flags are set by zic:','line_number':775,'multiline':False]
['text':'| case 's':       /* Standard */','line_number':776,'multiline':False]
['text':'|         rp->r_todisstd = TRUE;','line_number':777,'multiline':False]
['text':'|         rp->r_todisgmt = FALSE;','line_number':778,'multiline':False]
['text':'| case 'w':       /* Wall */','line_number':779,'multiline':False]
['text':'|         rp->r_todisstd = FALSE;','line_number':780,'multiline':False]
['text':'|         rp->r_todisgmt = FALSE;','line_number':781,'multiline':False]
['text':'| case 'g':       /* Greenwich */','line_number':782,'multiline':False]
['text':'| case 'u':       /* Universal */','line_number':783,'multiline':False]
['text':'| case 'z':       /* Zulu */','line_number':784,'multiline':False]
['text':'|         rp->r_todisstd = TRUE;','line_number':785,'multiline':False]
['text':'|         rp->r_todisgmt = TRUE;','line_number':786,'multiline':False]
['text':' used during building; later ignored','line_number':790,'multiline':False]
['text':'*
     * Return the time mode as an ICU SimpleTimeZone int from 0..2;
     * see simpletz.h.
     ','line_number':850,'multiline':True]
['text':' gmt standard','line_number':857,'multiline':False]
['text':' local standard','line_number':860,'multiline':False]
['text':' local wall','line_number':862,'multiline':False]
['text':' The SimpleTimeZone encoding method for rules is as follows:','line_number':865,'multiline':False]
['text':'          stz_dowim  stz_dow','line_number':866,'multiline':False]
['text':' DOM:     dom        0','line_number':867,'multiline':False]
['text':' DOWGEQ:  dom        -(dow+1)','line_number':868,'multiline':False]
['text':' DOWLEQ:  -dom       -(dow+1)','line_number':869,'multiline':False]
['text':' E.g., to encode Mon>=7, use stz_dowim=7, stz_dow=-2','line_number':870,'multiline':False]
['text':'       to encode Mon<=7, use stz_dowim=-7, stz_dow=-2','line_number':871,'multiline':False]
['text':'       to encode 7, use stz_dowim=7, stz_dow=0','line_number':872,'multiline':False]
['text':' Note that for this program and for SimpleTimeZone, 0==Jan,','line_number':873,'multiline':False]
['text':' but for this program 0==Sun while for SimpleTimeZone 1==Sun.','line_number':874,'multiline':False]
['text':'*
     * Return a "dowim" param suitable for SimpleTimeZone.
     ','line_number':876,'multiline':True]
['text':'*
     * Return a "dow" param suitable for SimpleTimeZone.
     ','line_number':883,'multiline':True]
['text':'*
 * Predicate used to find FinalRule objects that do not have both
 * sub-parts set (indicating an error in the input file).
 ','line_number':907,'multiline':True]
['text':'*
 * Predicate used to find FinalZone objects that do not map to a known
 * rule (indicating an error in the input file).
 ','line_number':915,'multiline':True]
['text':'*
 * This set is used to make sure each rule in finalRules is used at
 * least once.  First we populate it with all the rules from
 * finalRules; then we remove all the rules referred to in
 * finaleZones.
 ','line_number':923,'multiline':True]
['text':'*
 * Populate finalZones and finalRules from the given istream.
 ','line_number':939,'multiline':True]
['text':' zone Africa/Cairo 7200 1995 Egypt # zone Africa/Cairo, offset 7200, year >= 1995, rule Egypt (0)','line_number':950,'multiline':False]
['text':' rule US DOWGEQ 3 1 0 7200 0 0 3600 # 52: US, file data/northamerica, line 119, mode DOWGEQ, April, dom 1, Sunday, time 7200, isstd 0, isgmt 0, offset 3600','line_number':957,'multiline':False]
['text':' rule US DOWLEQ 9 31 0 7200 0 0 0 # 53: US, file data/northamerica, line 114, mode DOWLEQ, October, dom 31, Sunday, time 7200, isstd 0, isgmt 0, offset 0','line_number':958,'multiline':False]
['text':' fromid == "real" zone, toid == alias','line_number':968,'multiline':False]
['text':' DO NOT consumeLine(in);','line_number':970,'multiline':False]
['text':' Perform validity check: Each rule should have data for 2 parts.','line_number':988,'multiline':False]
['text':' Perform validity check: Each zone should map to a known rule.','line_number':993,'multiline':False]
['text':' Perform validity check: Each rule should be referred to by a zone.','line_number':998,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':1007,'multiline':False]
['text':' Resource bundle output','line_number':1008,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':1009,'multiline':False]
['text':' SEE olsontz.h FOR RESOURCE BUNDLE DATA LAYOUT','line_number':1011,'multiline':False]
['text':' Implement compressed format #2:','line_number':1014,'multiline':False]
['text':' No endl - save room for comment.','line_number':1019,'multiline':False]
['text':' pre 32bit transitions','line_number':1037,'multiline':False]
['text':' 32bit transtions','line_number':1050,'multiline':False]
['text':' post 32bit transitons','line_number':1063,'multiline':False]
['text':' Final zone info, if any','line_number':1115,'multiline':False]
['text':' Alias list, if any','line_number':1128,'multiline':False]
['text':' no trailing 'endl', so comments can be placed.','line_number':1144,'multiline':False]
['text':' print the string list ','line_number':1160,'multiline':False]
['text':' count','line_number':1162,'multiline':False]
['text':' column','line_number':1163,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':1189,'multiline':False]
['text':' main','line_number':1190,'multiline':False]
['text':'--------------------------------------------------------------------','line_number':1191,'multiline':False]
['text':' Unary predicate for finding transitions after a given time','line_number':1193,'multiline':False]
['text':'*
 * A zone type that contains only the raw and dst offset.  Used by the
 * optimizeTypeList() method.
 ','line_number':1198,'multiline':True]
['text':'*
 * Construct a ZoneType from a SimplifiedZoneType.  Note that this
 * discards information; the new ZoneType will have meaningless
 * (empty) abbr, isdst, isstd, and isgmt flags; this is appropriate,
 * since ignoring these is how we do optimization (we have no use for
 * these in historical transitions).
 ','line_number':1215,'multiline':True]
['text':'*
 * Optimize the type list to remove excess entries.  The type list may
 * contain entries that are distinct only in terms of their dst, std,
 * or gmt flags.  Since we don't care about those flags, we can reduce
 * the type list to a set of unique raw/dst offset pairs, and remap
 * the type indices in the transition list, which stores, for each
 * transition, a transition time and a type index.
 ','line_number':1226,'multiline':True]
['text':' Assemble set of unique types; only those in the `transitions'','line_number':1235,'multiline':False]
['text':' list, since there may be unused types in the `types' list','line_number':1236,'multiline':False]
['text':' corresponding to transitions that have been trimmed (during','line_number':1237,'multiline':False]
['text':' merging of final data).','line_number':1238,'multiline':False]
['text':' Nothing to do for aliases','line_number':1240,'multiline':False]
['text':' This is the old logic which has a bug, which occasionally removes','line_number':1243,'multiline':False]
['text':' the type before the first transition.  The problem was fixed','line_number':1244,'multiline':False]
['text':' by inserting the dummy transition indirectly.','line_number':1245,'multiline':False]
['text':' If there are zero transitions and one type, then leave that as-is.','line_number':1247,'multiline':False]
['text':' Map types to integer indices','line_number':1262,'multiline':False]
['text':' Remap transitions','line_number':1270,'multiline':False]
['text':' Replace type list','line_number':1280,'multiline':False]
['text':' Note: localtime uses the very first non-dst type as initial offsets.','line_number':1286,'multiline':False]
['text':' If all types are DSTs, the very first type is treated as the initial offsets.','line_number':1287,'multiline':False]
['text':' Decide a type used as the initial offsets.  ICU put the type at index 0.','line_number':1289,'multiline':False]
['text':' create a set of unique types, but ignoring fields which we're not interested in','line_number':1300,'multiline':False]
['text':' Map types to integer indices, however, keeping the first type at offset 0','line_number':1308,'multiline':False]
['text':' Remap transitions','line_number':1318,'multiline':False]
['text':' Replace type list','line_number':1328,'multiline':False]
['text':' Reiterating transitions to remove any transitions which','line_number':1337,'multiline':False]
['text':' do not actually change the raw/dst offsets','line_number':1338,'multiline':False]
['text':' this is not a time transition, probably just name change','line_number':1342,'multiline':False]
['text':' e.g. America/Resolute after 2006 in 2010b','line_number':1343,'multiline':False]
['text':'*
 * Merge final zone data into this zone.
 ','line_number':1355,'multiline':True]
['text':' Avoid transitions beyond signed 32bit max second.','line_number':1364,'multiline':False]
['text':' This may result incorrect offset computation around','line_number':1365,'multiline':False]
['text':' HIGHEST_TIME32.  This is a limitation of ICU','line_number':1366,'multiline':False]
['text':' before 4.4.','line_number':1367,'multiline':False]
['text':'*
 * Merge the data from the given final zone into the core zone data by
 * calling the ZoneInfo member function mergeFinalData.
 ','line_number':1385,'multiline':True]
['text':'*
 * Visitor function that merges the final zone data into the main zone
 * data structures.  It calls mergeOne for each final zone and its
 * list of aliases.
 ','line_number':1396,'multiline':True]
['text':'*
 * Print this rule in resource bundle format to os.  ID and enclosing
 * braces handled elsewhere.
 ','line_number':1408,'multiline':True]
['text':' First print the rule part that enters DST; then the rule part','line_number':1413,'multiline':False]
['text':' that exits it.','line_number':1414,'multiline':False]
['text':' Recursively scan all files below the given path, accumulating','line_number':1482,'multiline':False]
['text':' their data into ZONEINFO.  All files must be TZif files.  Any','line_number':1483,'multiline':False]
['text':' failure along the way will result in a call to exit(1).','line_number':1484,'multiline':False]
['text':' Overrides TZ database zones with ICU custom zone definition.','line_number':1495,'multiline':False]
['text':' These ICU zone overrides are defined in icuzones, with suffix --ICU.','line_number':1496,'multiline':False]
['text':' If there is a matching TZ database zone, the zoneinfo is replaced','line_number':1497,'multiline':False]
['text':' with the ICU definition. Then, the zone ID with --ICU suffix','line_number':1498,'multiline':False]
['text':' will be deleted from the final list.','line_number':1499,'multiline':False]
['text':' For example, zoneinfo for Europe/Dublin imported from the TZ database','line_number':1500,'multiline':False]
['text':' will be replaced with the zone definition for Europe/Dublin--ICU','line_number':1501,'multiline':False]
['text':' in icuzones.','line_number':1502,'multiline':False]
['text':' Collect zone IDs to be modified with ICU definition.','line_number':1504,'multiline':False]
['text':'','line_number':1515,'multiline':False]
['text':' BEGIN ICU Custom ZoneInfo Override Handling','line_number':1516,'multiline':False]
['text':'','line_number':1517,'multiline':False]
['text':' Replace zoneinfo with ICU definition, then remove ICU zone ID with','line_number':1519,'multiline':False]
['text':' the special suffix.','line_number':1520,'multiline':False]
['text':' replace original zone info with custom override,','line_number':1528,'multiline':False]
['text':' then delete one custom ID','line_number':1529,'multiline':False]
['text':' Also replace final rule','line_number':1535,'multiline':False]
['text':' replace original final zone with custom override,','line_number':1539,'multiline':False]
['text':' then delete one for custom ID','line_number':1540,'multiline':False]
['text':' Also remove aliases for ICU custom zoneinfo overrides.','line_number':1547,'multiline':False]
['text':' Also remove all revserse links','line_number':1553,'multiline':False]
['text':'','line_number':1567,'multiline':False]
['text':' END ICU Custom ZoneInfo Override Handling','line_number':1568,'multiline':False]
['text':'','line_number':1569,'multiline':False]
['text':' Process links (including ICU aliases).  For each link set we have','line_number':1578,'multiline':False]
['text':' a canonical ID (e.g., America/Los_Angeles) and a set of one or more','line_number':1579,'multiline':False]
['text':' aliases (e.g., PST, PST8PDT, ...).','line_number':1580,'multiline':False]
['text':' 1. Add all aliases as zone objects in ZONEINFO','line_number':1582,'multiline':False]
['text':' 2. Create a mapping from zones to index numbers 0..n-1.','line_number':1598,'multiline':False]
['text':' 3. Merge aliases.  Sometimes aliases link to other aliases; we','line_number':1608,'multiline':False]
['text':' resolve these into simplest possible sets.','line_number':1609,'multiline':False]
['text':' Debugging: Emit link map','line_number':1626,'multiline':False]
['text':' 4. Update aliases','line_number':1637,'multiline':False]
['text':' Once merging of final data is complete, we can optimize the type list','line_number':1654,'multiline':False]
['text':' Create the country map','line_number':1659,'multiline':False]
['text':' ICU's custom zone -> country override','line_number':1660,'multiline':False]
['text':' country -> set of zones','line_number':1661,'multiline':False]
['text':' zone -> country','line_number':1662,'multiline':False]
['text':' Read icuregions file to collect ICU's own zone-region mapping data.','line_number':1665,'multiline':False]
['text':' trim comments','line_number':1701,'multiline':False]
['text':' Custom override','line_number':1717,'multiline':False]
['text':'cerr << (n+1) << ": " << country << " <=> " << zone << endl;','line_number':1725,'multiline':False]
['text':' Merge ICU's own zone-region mapping data','line_number':1735,'multiline':False]
['text':' Merge ICU aliases into country map.  Don't merge any alias','line_number':1749,'multiline':False]
['text':' that already has a country map, since that doesn't make sense.','line_number':1750,'multiline':False]
['text':' E.g.  "Link Europe/Oslo Arctic/Longyearbyen" doesn't mean we','line_number':1751,'multiline':False]
['text':' should cross-map the countries between these two zones.','line_number':1752,'multiline':False]
['text':'cerr << "Aliased country: " << c << " <=> " << *j << endl;','line_number':1766,'multiline':False]
['text':' Create a pseudo-country containing all zones belonging to no country','line_number':1771,'multiline':False]
['text':' Get local time & year for below','line_number':1780,'multiline':False]
['text':' Write out a resource-bundle source file containing data for','line_number':1786,'multiline':False]
['text':' all zones.','line_number':1787,'multiline':False]
['text':' << endl -- asctime emits CR ','line_number':1795,'multiline':True]
['text':' Zones (the actual data)','line_number':1807,'multiline':False]
['text':' Names correspond to the Zones list, used for binary searching.','line_number':1810,'multiline':False]
['text':' print the Names list','line_number':1811,'multiline':False]
['text':' Final Rules are used if requested by the zone','line_number':1813,'multiline':False]
['text':' Emit final rules','line_number':1815,'multiline':False]
['text':' Emit country (region) map.','line_number':1827,'multiline':False]
['text':' emit the zone's index number','line_number':1862,'multiline':False]
['text':' recheck error bit','line_number':1874,'multiline':False]
['text':'eof','line_number':1881,'multiline':False]
