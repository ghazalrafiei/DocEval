['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
*
*   Copyright (C) 2005-2016, International Business Machines
*   Corporation and others.  All Rights Reserved.
*
*******************************************************************************
*   file name:  ucasemap.cpp
*   encoding:   UTF-8
*   tab size:   8 (not used)
*   indentation:4
*
*   created on: 2005may06
*   created by: Markus W. Scherer
*
*   Case mapping service object and functions using it.
','line_number':3,'multiline':True]
['text':' UCaseMap service object -------------------------------------------------- ','line_number':48,'multiline':True]
['text':' we only really need the language code for case mappings ','line_number':109,'multiline':True]
['text':' UTF-8 string case mappings ----------------------------------------------- ','line_number':132,'multiline':True]
['text':' TODO(markus): Move to a new, separate utf8case.cpp file. ','line_number':134,'multiline':True]
['text':' append a full case mapping result, see UCASE_MAX_STRING_LENGTH ','line_number':138,'multiline':True]
['text':' decode the result ','line_number':144,'multiline':True]
['text':' (not) original code point ','line_number':146,'multiline':True]
['text':' string: "result" is the UTF-16 length','line_number':155,'multiline':False]
['text':' See unicode/utf8.h U8_APPEND_UNSAFE().','line_number':164,'multiline':False]
['text':' reset for backward iteration ','line_number':174,'multiline':True]
['text':' reset for forward iteration ','line_number':178,'multiline':True]
['text':' continue current iteration direction ','line_number':182,'multiline':True]
['text':'*
 * caseLocale >= 0: Lowercases [srcStart..srcLimit[ but takes context [0..srcLength[ into account.
 * caseLocale < 0: Case-folds [srcStart..srcLimit[.
 ','line_number':200,'multiline':True]
['text':' fast path for simple cases','line_number':220,'multiline':False]
['text':' U+0080..U+017F','line_number':250,'multiline':False]
['text':' most of CJK: no case mappings','line_number':271,'multiline':False]
['text':' ill-formed UTF-8','line_number':278,'multiline':False]
['text':' slow path','line_number':295,'multiline':False]
['text':' fast path for simple cases','line_number':328,'multiline':False]
['text':' U+0080..U+017F','line_number':358,'multiline':False]
['text':' most of CJK: no case mappings','line_number':379,'multiline':False]
['text':' ill-formed UTF-8','line_number':386,'multiline':False]
['text':' slow path','line_number':403,'multiline':False]
['text':' namespace','line_number':419,'multiline':False]
['text':' set up local variables ','line_number':433,'multiline':True]
['text':' titlecasing loop ','line_number':440,'multiline':True]
['text':' find next index where to titlecase ','line_number':442,'multiline':True]
['text':'
         * Segment [prev..index[ into 3 parts:
         * a) skipped characters (copy as-is) [prev..titleStart[
         * b) first letter (titlecase)              [titleStart..titleLimit[
         * c) subsequent characters (lowercase)                 [titleLimit..index[
         ','line_number':454,'multiline':True]
['text':' find and copy skipped characters [prev..titleStart[ ','line_number':461,'multiline':True]
['text':' Adjust the titlecasing index to the next cased character,','line_number':467,'multiline':False]
['text':' or to the next letter/number/symbol/private use.','line_number':468,'multiline':False]
['text':' Stop with titleStart<titleLimit<=index','line_number':469,'multiline':False]
['text':' if there is a character to be titlecased,','line_number':470,'multiline':False]
['text':' or else stop with titleStart==titleLimit==index.','line_number':471,'multiline':False]
['text':' titlecase c which is from [titleStart..titleLimit[ ','line_number':489,'multiline':True]
['text':' Malformed UTF-8.','line_number':499,'multiline':False]
['text':' Special case Dutch IJ titlecasing ','line_number':506,'multiline':True]
['text':' Keep the capital J from getting lowercased.','line_number':514,'multiline':False]
['text':' lowercase [titleLimit..index[ ','line_number':523,'multiline':True]
['text':' Normal operation: Lowercase the rest of the word. ','line_number':526,'multiline':True]
['text':' Optionally just copy the rest of the word unchanged. ','line_number':534,'multiline':True]
['text':' Case-ignorable, continue with the loop.','line_number':559,'multiline':False]
['text':' Followed by cased letter.','line_number':561,'multiline':False]
['text':' Uncased and not case-ignorable.','line_number':563,'multiline':False]
['text':' Not followed by cased letter.','line_number':566,'multiline':False]
['text':' Keep this consistent with the UTF-16 version in ustrcase.cpp and the Java version in CaseMap.java.','line_number':569,'multiline':False]
['text':' c is case-ignorable','line_number':582,'multiline':False]
['text':' c is cased','line_number':585,'multiline':False]
['text':' Add a dialytika to this iota or ypsilon vowel','line_number':591,'multiline':False]
['text':' if we removed a tonos from the previous vowel,','line_number':592,'multiline':False]
['text':' and that previous vowel did not also have (or gain) a dialytika.','line_number':593,'multiline':False]
['text':' Adding one only to the final vowel in a longer sequence','line_number':594,'multiline':False]
['text':' (which does not occur in normal writing) would require lookahead.','line_number':595,'multiline':False]
['text':' Set the same flag as for preserving an existing dialytika.','line_number':596,'multiline':False]
['text':' Map each one to a trailing, spacing, capital iota.','line_number':601,'multiline':False]
['text':' Skip combining diacritics after this Greek letter.','line_number':605,'multiline':False]
['text':' not a Greek diacritic','line_number':618,'multiline':False]
['text':' Map according to Greek rules.','line_number':624,'multiline':False]
['text':' Keep disjunctive "or" with (only) a tonos.','line_number':631,'multiline':False]
['text':' We use the same "word boundary" conditions as for the Final_Sigma test.','line_number':632,'multiline':False]
['text':' Preserve the precomposed form.','line_number':634,'multiline':False]
['text':' Preserve a vowel with dialytika in precomposed form if it exists.','line_number':639,'multiline':False]
['text':' common, simple usage','line_number':651,'multiline':False]
['text':' Find out first whether we are changing the text.','line_number':653,'multiline':False]
['text':' 2-byte UTF-8, main Greek block','line_number':654,'multiline':False]
['text':' 2 bytes per U+0399','line_number':672,'multiline':False]
['text':' Write unchanged text?','line_number':682,'multiline':False]
['text':' restore or add a dialytika','line_number':690,'multiline':False]
['text':' Malformed UTF-8.','line_number':707,'multiline':False]
['text':' namespace GreekUpper','line_number':718,'multiline':False]
['text':' caseLocale ','line_number':754,'multiline':True]
['text':' check argument values ','line_number':770,'multiline':True]
['text':' Get the string length.','line_number':779,'multiline':False]
['text':' check argument values ','line_number':804,'multiline':True]
['text':' get the string length ','line_number':816,'multiline':True]
['text':' check for overlapping source and destination ','line_number':821,'multiline':True]
['text':' public API functions ','line_number':847,'multiline':True]
