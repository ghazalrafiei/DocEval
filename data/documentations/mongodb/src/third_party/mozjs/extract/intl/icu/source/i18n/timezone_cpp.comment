['text':' Â© 2016 and later: Unicode, Inc. and others.','line_number':1,'multiline':False]
['text':' License & terms of use: http://www.unicode.org/copyright.html','line_number':2,'multiline':False]
['text':'
*******************************************************************************
* Copyright (C) 1997-2016, International Business Machines Corporation and
* others. All Rights Reserved.
*******************************************************************************
*
* File TIMEZONE.CPP
*
* Modification History:
*
*   Date        Name        Description
*   12/05/96    clhuang     Creation.
*   04/21/97    aliu        General clean-up and bug fixing.
*   05/08/97    aliu        Fixed Hashtable code per code review.
*   07/09/97    helena      Changed createInstance to createDefault.
*   07/29/97    aliu        Updated with all-new list of 96 UNIX-derived
*                           TimeZones.  Changed mechanism to load from static
*                           array rather than resource bundle.
*   07/07/1998  srl         Bugfixes from the Java side: UTC GMT CAT NST
*                           Added getDisplayName API
*                           going to add custom parsing.
*
*                           ISSUES:
*                               - should getDisplayName cache something?
*                               - should custom time zones be cached? [probably]
*  08/10/98     stephen     Brought getDisplayName() API in-line w/ conventions
*  08/19/98     stephen     Changed createTimeZone() to never return 0
*  09/02/98     stephen     Added getOffset(monthLen) and hasSameRules()
*  09/15/98     stephen     Added getStaticClassID()
*  02/22/99     stephen     Removed character literals for EBCDIC safety
*  05/04/99     stephen     Changed initDefault() for Mutex issues
*  07/12/99     helena      HPUX 11 CC Port.
*  12/03/99     aliu        Moved data out of static table into icudata.dll.
*                           Substantial rewrite of zone lookup, default zone, and
*                           available IDs code.  Misc. cleanup.
********************************************************************************','line_number':3,'multiline':True]
['text':' for 'typeid' to work','line_number':40,'multiline':False]
['text':' for debugging','line_number':49,'multiline':False]
['text':' must use double parens, i.e.:  U_DEBUG_TZ_MSG(("four is: %d",4));','line_number':65,'multiline':False]
['text':' struct UResourceBundle','line_number':80,'multiline':False]
['text':' Static data and constants','line_number':106,'multiline':False]
['text':' "001" ','line_number':108,'multiline':True]
['text':' "GMT" ','line_number':110,'multiline':True]
['text':' "Etc/Unknown" ','line_number':111,'multiline':True]
['text':' Whether the static zones are initialized and ready to use.','line_number':125,'multiline':False]
['text':' Have we moved? ','line_number':198,'multiline':True]
['text':' We haven't moved, and it wasn't found. ','line_number':199,'multiline':True]
['text':'*
 * Fetch a specific zone by name.  Replaces the getByKey call.
 * @param top Top timezone resource
 * @param id Time zone ID
 * @param oldbundle Bundle for reuse (or NULL).   see 'ures_open()'
 * @return the zone's bundle if found, or undefined if error.  Reuses oldbundle.
 ','line_number':222,'multiline':True]
['text':' load the Rules object','line_number':230,'multiline':False]
['text':' search for the string','line_number':233,'multiline':False]
['text':' not found','line_number':237,'multiline':False]
['text':'ures_close(oldbundle);','line_number':239,'multiline':False]
['text':'oldbundle = NULL;','line_number':240,'multiline':False]
['text':' get Zones object from top','line_number':243,'multiline':False]
['text':' get nth Zone object','line_number':245,'multiline':False]
['text':'ures_close(oldbundle);','line_number':250,'multiline':False]
['text':'*
 * Given an ID, open the appropriate resource for the given time zone.
 * Dereference aliases if necessary.
 * @param id zone id
 * @param res resource, which must be ready for use (initialized but not open)
 * @param ec input-output error code
 * @return top-level resource bundle
 ','line_number':269,'multiline':True]
['text':' &res = ','line_number':287,'multiline':True]
['text':' Dereference if this is an alias.  Docs say result should be 1','line_number':288,'multiline':False]
['text':' but it is 0 in 2.8 (?).','line_number':289,'multiline':False]
['text':' dereference Zones section','line_number':294,'multiline':False]
['text':' -------------------------------------','line_number':305,'multiline':False]
['text':' Initialize _GMT independently of other static data; it should','line_number':310,'multiline':False]
['text':' be valid even if we can't load the time zone UDataMemory.','line_number':311,'multiline':False]
['text':' new can't fail below, as we use placement new into staticly allocated space.','line_number':314,'multiline':False]
['text':' anonymous namespace','line_number':321,'multiline':False]
['text':' *****************************************************************************','line_number':337,'multiline':False]
['text':' class TimeZone','line_number':338,'multiline':False]
['text':' *****************************************************************************','line_number':339,'multiline':False]
['text':' -------------------------------------','line_number':348,'multiline':False]
['text':' -------------------------------------','line_number':355,'multiline':False]
['text':' -------------------------------------','line_number':361,'multiline':False]
['text':' -------------------------------------','line_number':368,'multiline':False]
['text':' -------------------------------------','line_number':377,'multiline':False]
['text':' -------------------------------------','line_number':386,'multiline':False]
['text':'*
 * Lookup the given name in our system zone table.  If found,
 * instantiate a new zone of that name and return it.  If not
 * found, return 0.
 ','line_number':415,'multiline':True]
['text':' We first try to lookup the zone ID in our system list.  If this
     * fails, we try to parse it as a custom string GMT[+-]hh:mm.  If
     * all else fails, we return GMT, which is probably not what the
     * user wants, but at least is a functioning TimeZone object.
     *
     * We cannot return NULL, because that would break compatibility
     * with the JDK.
     ','line_number':431,'multiline':True]
['text':' Unknown zone uses staticly allocated memory, so creation of it can never fail due to OOM.','line_number':448,'multiline':False]
['text':' -------------------------------------','line_number':454,'multiline':False]
['text':' We access system timezone data through uprv_tzset(), uprv_tzname(), and others,','line_number':459,'multiline':False]
['text':' which have platform specific implementations in putil.cpp','line_number':460,'multiline':False]
['text':' First, try to create a system timezone, based','line_number':465,'multiline':False]
['text':' on the string ID in tzname[0].','line_number':466,'multiline':False]
['text':' Initialize tz... system data','line_number':468,'multiline':False]
['text':' Get the timezone ID from the host.  This function should do','line_number':472,'multiline':False]
['text':' any required host-specific remapping; e.g., on Windows this','line_number':473,'multiline':False]
['text':' function maps the Windows Time Zone name to an ICU timezone ID.','line_number':474,'multiline':False]
['text':' Invert sign because UNIX semantics are backwards','line_number':477,'multiline':False]
['text':' The host time zone detection (or remapping) above has failed and','line_number':485,'multiline':False]
['text':' we have no name at all. Fallback to using the Unknown zone.','line_number':486,'multiline':False]
['text':' hostID points to a heap-allocated location on Windows.','line_number':494,'multiline':False]
['text':' Uh oh. This probably wasn't a good id.','line_number':502,'multiline':False]
['text':' It was probably an ambiguous abbreviation','line_number':503,'multiline':False]
['text':' Construct a fixed standard zone with the host's ID','line_number':508,'multiline':False]
['text':' and raw offset.','line_number':509,'multiline':False]
['text':' If we _still_ don't have a time zone, use the Unknown zone.','line_number':514,'multiline':False]
['text':'','line_number':515,'multiline':False]
['text':' Note: This is extremely unlikely situation. If','line_number':516,'multiline':False]
['text':' new SimpleTimeZone(...) above fails, the following','line_number':517,'multiline':False]
['text':' code may also fail.','line_number':518,'multiline':False]
['text':' Unknown zone uses static allocated memory, so it must always exist.','line_number':520,'multiline':False]
['text':' However, clone() allocates memory and can fail.','line_number':521,'multiline':False]
['text':' -------------------------------------','line_number':528,'multiline':False]
['text':'*
 * Initialize DEFAULT_ZONE from the system default time zone.  
 * Upon return, DEFAULT_ZONE will not be NULL, unless operator new()
 * returns NULL.
 ','line_number':532,'multiline':True]
['text':' If setDefault() has already been called we can skip getting the','line_number':542,'multiline':False]
['text':' default zone information from the system.','line_number':543,'multiline':False]
['text':' NOTE:  this code is safely single threaded, being only','line_number':548,'multiline':False]
['text':' run via umtx_initOnce().','line_number':549,'multiline':False]
['text':'','line_number':550,'multiline':False]
['text':' Some of the locale/timezone OS functions may not be thread safe,','line_number':551,'multiline':False]
['text':'','line_number':552,'multiline':False]
['text':' The operating system might actually use ICU to implement timezones.','line_number':553,'multiline':False]
['text':' So we may have ICU calling ICU here, like on AIX.','line_number':554,'multiline':False]
['text':' There shouldn't be a problem with this; initOnce does not hold a mutex','line_number':555,'multiline':False]
['text':' while the init function is being run.','line_number':556,'multiline':False]
['text':' The code detecting the host time zone was separated from this','line_number':558,'multiline':False]
['text':' and implemented as TimeZone::detectHostTimeZone()','line_number':559,'multiline':False]
['text':' -------------------------------------','line_number':568,'multiline':False]
['text':' -------------------------------------','line_number':580,'multiline':False]
['text':' the "timezone" keyword exceeds ULOC_KEYWORDS_CAPACITY; ignore and use default.','line_number':589,'multiline':False]
['text':' -------------------------------------','line_number':598,'multiline':False]
['text':' -------------------------------------','line_number':614,'multiline':False]
['text':'----------------------------------------------------------------------','line_number':622,'multiline':False]
['text':' dereference Zones section','line_number':629,'multiline':False]
['text':' exclude Etc/Unknown','line_number':643,'multiline':False]
['text':' exclude aliases','line_number':653,'multiline':False]
['text':' exclude non-location ("001")','line_number':663,'multiline':False]
['text':' realloc failed.. use the original one even it has unused','line_number':673,'multiline':False]
['text':' area at the end','line_number':674,'multiline':False]
['text':'*
 * This is the default implementation for subclasses that do not
 * override this method.  This implementation calls through to the
 * 8-argument getOffset() method after suitable computations, and
 * correctly adjusts GMT millis to local millis when necessary.
 ','line_number':702,'multiline':True]
['text':' now in local standard millis','line_number':716,'multiline':False]
['text':' When local == TRUE, date might not be in local standard','line_number':719,'multiline':False]
['text':' millis.  getOffset taking 7 parameters used here assume','line_number':720,'multiline':False]
['text':' the given time in day is local standard time.','line_number':721,'multiline':False]
['text':' At STD->DST transition, there is a range of time which','line_number':722,'multiline':False]
['text':' does not exist.  When 'date' is in this time range','line_number':723,'multiline':False]
['text':' (and local == TRUE), this method interprets the specified','line_number':724,'multiline':False]
['text':' local time as DST.  At DST->STD transition, there is a','line_number':725,'multiline':False]
['text':' range of time which occurs twice.  In this case, this','line_number':726,'multiline':False]
['text':' method interprets the specified local time as STD.','line_number':727,'multiline':False]
['text':' To support the behavior above, we need to call getOffset','line_number':728,'multiline':False]
['text':' (with 7 args) twice when local == true and DST is','line_number':729,'multiline':False]
['text':' detected in the initial call.','line_number':730,'multiline':False]
['text':' Recompute if local==TRUE, dstOffset!=0.','line_number':743,'multiline':False]
['text':' adjust to local standard millis','line_number':747,'multiline':False]
['text':' -------------------------------------','line_number':752,'multiline':False]
['text':' New available IDs API as of ICU 2.4.  Uses StringEnumeration API.','line_number':754,'multiline':False]
['text':' Map into to zones.  Our results are zone[map[i]] for','line_number':759,'multiline':False]
['text':' i=0..len-1, where zone[i] is the i-th Olson zone.  If map==NULL','line_number':760,'multiline':False]
['text':' then our results are zone[i] for i=0..len-1.  Len will be zero','line_number':761,'multiline':False]
['text':' if the zone data could not be loaded.','line_number':762,'multiline':False]
['text':' dereference Zones section','line_number':778,'multiline':False]
['text':' If any additional conditions are available,','line_number':838,'multiline':False]
['text':' create instance local map filtered by the conditions.','line_number':839,'multiline':False]
['text':' Walk through the base map','line_number':852,'multiline':False]
['text':' dereference Zones section','line_number':854,'multiline':False]
['text':' Filter by region','line_number':862,'multiline':False]
['text':' max 3 letters + null term','line_number':863,'multiline':False]
['text':' region does not match','line_number':869,'multiline':False]
['text':' Filter by raw offset','line_number':874,'multiline':False]
['text':' Note: This is VERY inefficient','line_number':875,'multiline':False]
['text':' Finally, create a new enumeration instance','line_number':912,'multiline':False]
['text':'status','line_number':971,'multiline':True]
['text':' ---------------------------------------','line_number':1015,'multiline':False]
['text':' ---------------------------------------','line_number':1033,'multiline':False]
['text':' dereference Zones section','line_number':1055,'multiline':False]
['text':' ---------------------------------------','line_number':1073,'multiline':False]
['text':' These methods are used by ZoneMeta class only.','line_number':1075,'multiline':False]
['text':' resolve zone index by name','line_number':1083,'multiline':False]
['text':' resolve zone index by name','line_number':1102,'multiline':False]
['text':' open the zone bundle by index','line_number':1107,'multiline':False]
['text':' this is a link - dereference the link','line_number':1113,'multiline':False]
['text':' resolve zone index by name','line_number':1142,'multiline':False]
['text':' get region mapping','line_number':1146,'multiline':False]
['text':' ---------------------------------------','line_number':1160,'multiline':False]
['text':' "Etc/Unknown" is not a system zone ID,','line_number':1171,'multiline':False]
['text':' but in the zone data','line_number':1172,'multiline':False]
['text':' A region code is represented by invariant characters','line_number':1181,'multiline':False]
['text':' ---------------------------------------','line_number':1192,'multiline':False]
['text':'--------------------------------------','line_number':1212,'multiline':False]
['text':'---------------------------------------','line_number':1220,'multiline':False]
['text':' Generic format','line_number':1235,'multiline':False]
['text':' Generic format many use Localized GMT as the final fallback.','line_number':1249,'multiline':False]
['text':' When Localized GMT format is used, the result might not be','line_number':1250,'multiline':False]
['text':' appropriate for the requested daylight value.','line_number':1251,'multiline':False]
['text':' Fallback to localized GMT','line_number':1300,'multiline':False]
['text':'*
 * Parse a custom time zone identifier and return a corresponding zone.
 * @param id a string of the form GMT[+-]hh:mm, GMT[+-]hhmm, or
 * GMT[+-]hh.
 * @return a newly created SimpleTimeZone with the given offset and
 * no Daylight Savings Time, or null if the id cannot be parsed.
','line_number':1316,'multiline':True]
['text':''-'','line_number':1369,'multiline':True]
['text':''+'','line_number':1371,'multiline':True]
['text':'numberFormat->setLenient(TRUE); // TODO: May need to set this, depends on latest timezone parsing','line_number':1382,'multiline':False]
['text':' Look for either hh:mm, hhmm, or hh','line_number':1384,'multiline':False]
['text':' hh:mm','line_number':1400,'multiline':False]
['text':' must be 2 digits','line_number':1406,'multiline':False]
['text':' [:ss]','line_number':1416,'multiline':False]
['text':' Supported formats are below -','line_number':1429,'multiline':False]
['text':'','line_number':1430,'multiline':False]
['text':' HHmmss','line_number':1431,'multiline':False]
['text':' Hmmss','line_number':1432,'multiline':False]
['text':' HHmm','line_number':1433,'multiline':False]
['text':' Hmm','line_number':1434,'multiline':False]
['text':' HH','line_number':1435,'multiline':False]
['text':' H','line_number':1436,'multiline':False]
['text':' invalid length','line_number':1440,'multiline':False]
['text':' already set to hour','line_number':1447,'multiline':False]
['text':' Create time zone ID - GMT[+|-]hhmm[ss]','line_number':1476,'multiline':False]
['text':' Ensure that there is always space for a trailing nul in TZDATA_VERSION','line_number':1529,'multiline':False]
['text':' special case - Etc/Unknown is a canonical ID, but not system ID','line_number':1560,'multiline':False]
['text':' Not a system ID','line_number':1568,'multiline':False]
['text':' canonicalize the input ID','line_number':1583,'multiline':False]
['text':' mapping data is only applicable to tz database IDs','line_number':1589,'multiline':False]
['text':' getWindowsID() sets an empty string where','line_number':1591,'multiline':False]
['text':' getCanonicalID() sets a U_ILLEGAL_ARGUMENT_ERROR.','line_number':1592,'multiline':False]
['text':' use tmperr, because windows mapping might not','line_number':1680,'multiline':False]
['text':' be available by design','line_number':1681,'multiline':False]
['text':' use tmperr, because','line_number':1691,'multiline':False]
['text':' regional mapping is optional','line_number':1692,'multiline':False]
['text':' first ID delimited by space is the defasult one','line_number':1694,'multiline':False]
['text':' using status, because "001" must be','line_number':1706,'multiline':False]
['text':' available at this point','line_number':1707,'multiline':False]
['text':' #if !UCONFIG_NO_FORMATTING ','line_number':1720,'multiline':True]
['text':'eof','line_number':1722,'multiline':False]
