['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' By this point, the jitcode global table should be empty.','line_number':100,'multiline':False]
['text':' Initialize the jitCodeRaw of the Runtime's canonical SelfHostedLazyScript','line_number':137,'multiline':False]
['text':' to point to the interpreter trampoline.','line_number':138,'multiline':False]
['text':' Initialize some Ion-only stubs that require floating-point support.','line_number':155,'multiline':False]
['text':' The arguments rectifier has to use the same frame layout as the function','line_number':178,'multiline':False]
['text':' frames it rectifies.','line_number':179,'multiline':False]
['text':' JitRuntime code stubs are shared across compartments and have to','line_number':251,'multiline':False]
['text':' be allocated in the atoms zone.','line_number':252,'multiline':False]
['text':' Free the old buffer (if needed) before allocating a new one. Note that we','line_number':290,'multiline':False]
['text':' could use realloc here but it's likely not worth the complexity.','line_number':291,'multiline':False]
['text':' Get the pending IonCompileTask from the Ion frame.','line_number':363,'multiline':False]
['text':' Remove from pending.','line_number':369,'multiline':False]
['text':' Silently ignore OOM during code generation. The assembly code','line_number':376,'multiline':False]
['text':' doesn't have code to handle it after linking happened. So it's','line_number':377,'multiline':False]
['text':' not OK to throw a catchable exception from there.','line_number':378,'multiline':False]
['text':' static ','line_number':402,'multiline':True]
['text':' Shared stubs are allocated in the atoms zone, so do not iterate','line_number':407,'multiline':False]
['text':' them after the atoms heap after it has been "finished."','line_number':408,'multiline':False]
['text':' static ','line_number':420,'multiline':True]
['text':' static ','line_number':432,'multiline':True]
['text':' Any outstanding compilations should have been cancelled by the GC.','line_number':440,'multiline':False]
['text':' Let the script warm up again before attempting another compile.','line_number':478,'multiline':False]
['text':' BUG 1536159: For diagnostics, compute the size of the failed','line_number':489,'multiline':False]
['text':' allocation. This presumes the vector growth strategy is to double. This','line_number':490,'multiline':False]
['text':' is only used for crash reporting so not a problem if we get it wrong.','line_number':491,'multiline':False]
['text':' Trigger invalidation of the IonScript.','line_number':497,'multiline':False]
['text':' Trigger invalidation of any callers inlining this script.','line_number':503,'multiline':False]
['text':' Make sure this is not called under CodeGenerator::link (before the','line_number':515,'multiline':False]
['text':' IonScript is created).','line_number':516,'multiline':False]
['text':' Sweep the RecompileInfo if either the script is dead or the IonScript has','line_number':530,'multiline':False]
['text':' been invalidated.','line_number':531,'multiline':False]
['text':' As long as JitCode isn't moveable, we can avoid tracing this and','line_number':580,'multiline':False]
['text':' mutating executable data.','line_number':581,'multiline':False]
['text':' Store the JitCode pointer in the JitCodeHeader so we can recover the','line_number':613,'multiline':False]
['text':' gcthing from relocation tables.','line_number':614,'multiline':False]
['text':' Note that we cannot mark invalidated scripts, since we've basically','line_number':630,'multiline':False]
['text':' corrupted the code stream by injecting bailouts.','line_number':631,'multiline':False]
['text':' If this jitcode had a bytecode map, it must have already been removed.','line_number':649,'multiline':False]
['text':' With W^X JIT code, reprotecting memory for each JitCode instance is','line_number':664,'multiline':False]
['text':' slow, so we record the ranges and poison them later all at once. It's','line_number':665,'multiline':False]
['text':' safe to ignore OOM here, it just means we won't poison the code.','line_number':666,'multiline':False]
['text':' Code buffers are stored inside ExecutablePools. Pools are refcounted.','line_number':673,'multiline':False]
['text':' Releasing the pool may free it. Horrible hack: if we are using perf','line_number':674,'multiline':False]
['text':' integration, we don't want to reuse code addresses, so we just leak the','line_number':675,'multiline':False]
['text':' memory instead.','line_number':676,'multiline':False]
['text':' Verify the hardcoded sizes in header are accurate.','line_number':707,'multiline':False]
['text':' Trace caches so that the JSScript pointer can be updated if moved.','line_number':815,'multiline':False]
['text':' static ','line_number':821,'multiline':True]
['text':' Convert CodegenSafepointIndex to more compact form.','line_number':860,'multiline':False]
['text':' Update the codeRaw_ field in the ICs now that we know the code address.','line_number':878,'multiline':False]
['text':' Raise if the element is not in the list.','line_number':898,'multiline':False]
['text':' Approximate the location of the FrameInfo.','line_number':901,'multiline':False]
['text':' Doing a linear scan from the guess should be more efficient in case of','line_number':909,'multiline':False]
['text':' small group which are equally distributed on the code.','line_number':910,'multiline':False]
['text':'','line_number':911,'multiline':False]
['text':' such as:  <...      ...    ...  ...  .   ...    ...>','line_number':912,'multiline':False]
['text':' Make sure there are no pointers into the IonScript's nursery objects list','line_number':955,'multiline':False]
['text':' in the store buffer. Because this can be called during sweeping when','line_number':956,'multiline':False]
['text':' discarding JIT code, we have to lock the store buffer when we find an','line_number':957,'multiline':False]
['text':' object that's (still) in the nursery.','line_number':958,'multiline':False]
['text':' This allocation is tracked by JSScript::setIonScriptImpl.','line_number':971,'multiline':False]
['text':' No spew: graph not changed.','line_number':1074,'multiline':False]
['text':' Aggressive phi elimination must occur before any code elimination. If the','line_number':1083,'multiline':False]
['text':' script contains a try-statement, we only compiled the try block and not','line_number':1084,'multiline':False]
['text':' the catch or finally blocks, so in this case it's also invalid to use','line_number':1085,'multiline':False]
['text':' aggressive phi elimination.','line_number':1086,'multiline':False]
['text':' No spew: graph not changed.','line_number':1104,'multiline':False]
['text':' Alias analysis is required for LICM and GVN so that we don't move','line_number':1155,'multiline':False]
['text':' loads across stores.','line_number':1156,'multiline':False]
['text':' Eliminating dead resume point operands requires basic block','line_number':1177,'multiline':False]
['text':' instructions to be numbered. Reuse the numbering computed during','line_number':1178,'multiline':False]
['text':' alias analysis.','line_number':1179,'multiline':False]
['text':' LICM can hoist instructions from conditional branches and','line_number':1204,'multiline':False]
['text':' trigger bailouts. Disable it if bailing out of a hoisted','line_number':1205,'multiline':False]
['text':' instruction has previously invalidated this script.','line_number':1206,'multiline':False]
['text':' BCE marks bounds checks as dead, so do BCE before DCE.','line_number':1352,'multiline':False]
['text':' Make loops contiguous. We do this after GVN/UCE and range analysis,','line_number':1394,'multiline':False]
['text':' which can remove CFG edges, exposing more blocks that can be moved.','line_number':1395,'multiline':False]
['text':' underValueNumberer = ','line_number':1408,'multiline':True]
['text':' force = ','line_number':1409,'multiline':True]
['text':' Remove unreachable blocks created by MBasicBlock::NewFakeLoopPredecessor','line_number':1411,'multiline':False]
['text':' to ensure every loop header has two predecessors. (This only happens due','line_number':1412,'multiline':False]
['text':' to OSR.)  After this point, it is no longer possible to build the','line_number':1413,'multiline':False]
['text':' dominator tree.','line_number':1414,'multiline':False]
['text':' Passes after this point must not move instructions; these analyses','line_number':1425,'multiline':False]
['text':' depend on knowing the final order in which instructions will execute.','line_number':1426,'multiline':False]
['text':' Note: check elimination has to run after all other passes that move','line_number':1444,'multiline':False]
['text':' instructions. Since check uses are replaced with the actual index,','line_number':1445,'multiline':False]
['text':' code motion after this pass could incorrectly move a load or store','line_number':1446,'multiline':False]
['text':' before its bounds check.','line_number':1447,'multiline':False]
['text':' force = ','line_number':1473,'multiline':True]
['text':' Everything in CompileBackEnd can potentially run on a helper thread.','line_number':1574,'multiline':False]
['text':' Suppress GC during compilation.','line_number':1601,'multiline':False]
['text':' If possible, compile the script off thread.','line_number':1691,'multiline':False]
['text':' The allocator and associated data will be destroyed after being','line_number':1712,'multiline':False]
['text':' processed in the finishedOffThreadCompilations list.','line_number':1713,'multiline':False]
['text':' This check is to not overrun the stack.','line_number':1747,'multiline':False]
['text':' Eval frames are not yet supported. Supporting this will require new','line_number':1765,'multiline':False]
['text':' logic in pushBailoutFrame to deal with linking prev.','line_number':1766,'multiline':False]
['text':' Additionally, JSOp::GlobalOrEvalDeclInstantiation support will require','line_number':1767,'multiline':False]
['text':' baking in isEvalFrame().','line_number':1768,'multiline':False]
['text':' Support functions with a non-syntactic global scope but not other','line_number':1791,'multiline':False]
['text':' scripts. For global scripts, WarpBuilder currently uses the global','line_number':1792,'multiline':False]
['text':' object as scope chain, this is not valid when the script has a','line_number':1793,'multiline':False]
['text':' non-syntactic global scope.','line_number':1794,'multiline':False]
['text':' This restriction will be lifted when intra-function scope chains','line_number':1801,'multiline':False]
['text':' are compilable by Ion. See bug 1273858.','line_number':1802,'multiline':False]
['text':' namespace jit','line_number':1808,'multiline':False]
['text':' Compilation succeeded or we invalidated right away or an inlining/alloc','line_number':1922,'multiline':False]
['text':' abort','line_number':1923,'multiline':False]
['text':' namespace jit','line_number':1930,'multiline':False]
['text':' namespace js','line_number':1931,'multiline':False]
['text':' Even if off thread compilation is enabled, compilation must still occur','line_number':1934,'multiline':False]
['text':' on the main thread in some cases.','line_number':1935,'multiline':False]
['text':'','line_number':1936,'multiline':False]
['text':' Require cpuCount > 1 so that Ion compilation jobs and active-thread','line_number':1937,'multiline':False]
['text':' execution are not competing for the same resources.','line_number':1938,'multiline':False]
['text':' Skip if the script has been disabled.','line_number':1949,'multiline':False]
['text':' Skip if the script is being compiled off thread.','line_number':1954,'multiline':False]
['text':' If --ion-eager is used, compile with Baseline first, so that we','line_number':1976,'multiline':False]
['text':' can directly enter IonMonkey.','line_number':1977,'multiline':False]
['text':' Bytecode analysis may forbid compilation for a script.','line_number':1984,'multiline':False]
['text':' Attempt compilation. Returns Method_Compiled if already compiled.','line_number':1997,'multiline':False]
['text':' osrFrame = ','line_number':1998,'multiline':True]
['text':' osrPc = ','line_number':1999,'multiline':True]
['text':' Mark as forbidden if frame can't be handled.','line_number':2025,'multiline':False]
['text':' Attempt compilation. Returns Method_Compiled if already compiled.','line_number':2038,'multiline':False]
['text':' Decide if a transition from baseline execution to Ion code should occur.','line_number':2050,'multiline':False]
['text':' May compile or recompile the target JSScript.','line_number':2051,'multiline':False]
['text':' Skip if the script has been disabled.','line_number':2058,'multiline':False]
['text':' Skip if the script is being compiled off thread.','line_number':2063,'multiline':False]
['text':' Optionally ignore on user request.','line_number':2068,'multiline':False]
['text':' Mark as forbidden if frame can't be handled.','line_number':2073,'multiline':False]
['text':' Check if the jitcode still needs to get linked and do this','line_number':2079,'multiline':False]
['text':' to have a valid IonScript.','line_number':2080,'multiline':False]
['text':' By default a recompilation doesn't happen on osr mismatch.','line_number':2085,'multiline':False]
['text':' Decide if we want to force a recompilation if this happens too much.','line_number':2086,'multiline':False]
['text':' Attempt compilation.','line_number':2102,'multiline':False]
['text':' - Returns Method_Compiled if the right ionscript is present','line_number':2103,'multiline':False]
['text':'   (Meaning it was present or a sequantial compile finished)','line_number':2104,'multiline':False]
['text':' - Returns Method_Skipped if pc doesn't match','line_number':2105,'multiline':False]
['text':'   (This means a background thread compilation with that pc could have','line_number':2106,'multiline':False]
['text':'   started or not.)','line_number':2107,'multiline':False]
['text':' Return the compilation was skipped when the osr pc wasn't adjusted.','line_number':2116,'multiline':False]
['text':' This can happen when there was still an IonScript available and a','line_number':2117,'multiline':False]
['text':' background compilation started, but hasn't finished yet.','line_number':2118,'multiline':False]
['text':' Or when we didn't force a recompile.','line_number':2119,'multiline':False]
['text':' The Baseline JIT code checks for Ion disabled or compiling off-thread.','line_number':2134,'multiline':False]
['text':' If Ion script exists, but PC is not at a loop entry, then Ion will be','line_number':2138,'multiline':False]
['text':' entered for this script at an appropriate LOOPENTRY or the next time this','line_number':2139,'multiline':False]
['text':' function is called.','line_number':2140,'multiline':False]
['text':' TODO: ASSERT that a ion-script-already-exists checker stub doesn't exist.','line_number':2143,'multiline':False]
['text':' TODO: Clear all optimized stubs.','line_number':2144,'multiline':False]
['text':' TODO: Add a ion-script-already-exists checker stub.','line_number':2145,'multiline':False]
['text':' Ensure that Ion-compiled code is available.','line_number':2149,'multiline':False]
['text':' clang-format off ','line_number':2193,'multiline':True]
['text':' The following data is kept in a temporary heap-allocated buffer, stored in','line_number':2194,'multiline':False]
['text':' JitRuntime (high memory addresses at top, low at bottom):','line_number':2195,'multiline':False]
['text':'','line_number':2196,'multiline':False]
['text':'     +----->+=================================+  --      <---- High Address','line_number':2197,'multiline':False]
['text':'     |      |                                 |   |','line_number':2198,'multiline':False]
['text':'     |      |     ...BaselineFrame...         |   |-- Copy of BaselineFrame + stack values','line_number':2199,'multiline':False]
['text':'     |      |                                 |   |','line_number':2200,'multiline':False]
['text':'     |      +---------------------------------+   |','line_number':2201,'multiline':False]
['text':'     |      |                                 |   |','line_number':2202,'multiline':False]
['text':'     |      |     ...Locals/Stack...          |   |','line_number':2203,'multiline':False]
['text':'     |      |                                 |   |','line_number':2204,'multiline':False]
['text':'     |      +=================================+  --','line_number':2205,'multiline':False]
['text':'     |      |     Padding(Maybe Empty)        |','line_number':2206,'multiline':False]
['text':'     |      +=================================+  --','line_number':2207,'multiline':False]
['text':'     +------|-- baselineFrame                 |   |-- IonOsrTempData','line_number':2208,'multiline':False]
['text':'            |   jitcode                       |   |','line_number':2209,'multiline':False]
['text':'            +=================================+  --      <---- Low Address','line_number':2210,'multiline':False]
['text':'','line_number':2211,'multiline':False]
['text':' A pointer to the IonOsrTempData is returned.','line_number':2212,'multiline':False]
['text':' clang-format on ','line_number':2213,'multiline':True]
['text':' Calculate the amount of space to allocate:','line_number':2219,'multiline':False]
['text':'      BaselineFrame space:','line_number':2220,'multiline':False]
['text':'          (sizeof(Value) * numValueSlots)','line_number':2221,'multiline':False]
['text':'        + sizeof(BaselineFrame)','line_number':2222,'multiline':False]
['text':'','line_number':2223,'multiline':False]
['text':'      IonOsrTempData space:','line_number':2224,'multiline':False]
['text':'          sizeof(IonOsrTempData)','line_number':2225,'multiline':False]
['text':' Copy the BaselineFrame + local/stack Values to the buffer. Arguments and','line_number':2243,'multiline':False]
['text':' |this| are not copied but left on the stack: the Baseline and Ion frame','line_number':2244,'multiline':False]
['text':' share the same frame prefix and Ion won't clobber these values. Note','line_number':2245,'multiline':False]
['text':' that info->baselineFrame will point to the *end* of the frame data, like','line_number':2246,'multiline':False]
['text':' the frame pointer register in baseline frames.','line_number':2247,'multiline':False]
['text':' All done.','line_number':2258,'multiline':False]
['text':' Prepare the temporary heap copy of the fake InterpreterFrame and actual','line_number':2291,'multiline':False]
['text':' args list.','line_number':2292,'multiline':False]
['text':' JS_JITSPEW','line_number':2373,'multiline':False]
['text':' See if the frame has already been invalidated.','line_number':2379,'multiline':False]
['text':' Purge ICs before we mark this script as invalidated. This will','line_number':2395,'multiline':False]
['text':' prevent lastJump_ from appearing to be a bogus pointer, just','line_number':2396,'multiline':False]
['text':' in case anyone tries to read it.','line_number':2397,'multiline':False]
['text':' This frame needs to be invalidated. We do the following:','line_number':2400,'multiline':False]
['text':'','line_number':2401,'multiline':False]
['text':' 1. Increment the reference counter to keep the ionScript alive','line_number':2402,'multiline':False]
['text':'    for the invalidation bailout or for the exception handler.','line_number':2403,'multiline':False]
['text':' 2. Determine safepoint that corresponds to the current call.','line_number':2404,'multiline':False]
['text':' 3. From safepoint, get distance to the OSI-patchable offset.','line_number':2405,'multiline':False]
['text':' 4. From the IonScript, determine the distance between the','line_number':2406,'multiline':False]
['text':'    call-patchable offset and the invalidation epilogue.','line_number':2407,'multiline':False]
['text':' 5. Patch the OSI point with a call-relative to the','line_number':2408,'multiline':False]
['text':'    invalidation epilogue.','line_number':2409,'multiline':False]
['text':'','line_number':2410,'multiline':False]
['text':' The code generator ensures that there's enough space for us','line_number':2411,'multiline':False]
['text':' to patch in a call-relative operation at each invalidation','line_number':2412,'multiline':False]
['text':' point.','line_number':2413,'multiline':False]
['text':'','line_number':2414,'multiline':False]
['text':' Note: you can't simplify this mechanism to "just patch the','line_number':2415,'multiline':False]
['text':' instruction immediately after the call" because things may','line_number':2416,'multiline':False]
['text':' need to move into a well-defined register state (using move','line_number':2417,'multiline':False]
['text':' instructions after the call) in to capture an appropriate','line_number':2418,'multiline':False]
['text':' snapshot after the call occurs.','line_number':2419,'multiline':False]
['text':' We're about to remove edges from the JSScript to GC things embedded in','line_number':2425,'multiline':False]
['text':' the JitCode. Perform a barrier to let the GC know about those edges.','line_number':2426,'multiline':False]
['text':' Don't adjust OSI points in a bailout path.','line_number':2433,'multiline':False]
['text':' Write the delta (from the return address offset to the','line_number':2438,'multiline':False]
['text':' IonScript pointer embedded into the invalidation epilogue)','line_number':2439,'multiline':False]
['text':' where the safepointed call instruction used to be. We rely on','line_number':2440,'multiline':False]
['text':' the call sequence causing the safepoint being >= the size of','line_number':2441,'multiline':False]
['text':' a uint32, which is checked during safepoint index','line_number':2442,'multiline':False]
['text':' construction.','line_number':2443,'multiline':False]
['text':' The caller should previously have cancelled off thread compilation.','line_number':2468,'multiline':False]
['text':' Null out the JitScript's IonScript pointer. The caller is responsible for','line_number':2489,'multiline':False]
['text':' destroying the IonScript using the invalidation count mechanism.','line_number':2490,'multiline':False]
['text':' Wait for the scripts to get warm again before doing another','line_number':2495,'multiline':False]
['text':' compile, unless we are recompiling *because* a script got hot','line_number':2496,'multiline':False]
['text':' (resetUses is false).','line_number':2497,'multiline':False]
['text':' Add an invalidation reference to all invalidated IonScripts to indicate','line_number':2507,'multiline':False]
['text':' to the traversal which frames have been invalidated.','line_number':2508,'multiline':False]
['text':' Keep the ion script alive during the invalidation and flag this','line_number':2524,'multiline':False]
['text':' ionScript as being invalidated.  This increment is removed by the','line_number':2525,'multiline':False]
['text':' loop after the calls to InvalidateActivation.','line_number':2526,'multiline':False]
['text':' Drop the references added above. If a script was never active, its','line_number':2541,'multiline':False]
['text':' IonScript will be immediately destroyed. Otherwise, it will be held live','line_number':2542,'multiline':False]
['text':' until its last invalidated frame is destroyed.','line_number':2543,'multiline':False]
['text':' decrementInvalidationCount will destroy the IonScript so null out','line_number':2551,'multiline':False]
['text':' jitScript->ionScript_ now. We don't want to do this unconditionally','line_number':2552,'multiline':False]
['text':' because maybeIonScriptToInvalidate depends on script->ionScript() (we','line_number':2553,'multiline':False]
['text':' would leak the IonScript if |invalid| contains duplicates).','line_number':2554,'multiline':False]
['text':' Make sure we didn't leak references by invalidating the same IonScript','line_number':2562,'multiline':False]
['text':' multiple times in the above loop.','line_number':2563,'multiline':False]
['text':' Finally, null out jitScript->ionScript_ for IonScripts that are still on','line_number':2566,'multiline':False]
['text':' the stack.','line_number':2567,'multiline':False]
['text':' Note: we could short circuit here if we already invalidated this','line_number':2577,'multiline':False]
['text':' IonScript, but jit::Invalidate also cancels off-thread compilations of','line_number':2578,'multiline':False]
['text':' |script|.','line_number':2579,'multiline':False]
['text':' RecompileInfoVector has inline space for at least one element.','line_number':2584,'multiline':False]
['text':' Register invalidation with profiler.','line_number':2597,'multiline':False]
['text':' Format of event payload string:','line_number':2598,'multiline':False]
['text':'      "<filename>:<lineno>"','line_number':2599,'multiline':False]
['text':' Get the script filename, if any, and its length.','line_number':2601,'multiline':False]
['text':' Construct the descriptive string.','line_number':2607,'multiline':False]
['text':' Ignore the event on allocation failure.','line_number':2611,'multiline':False]
['text':' RecompileInfoVector has inline space for at least one element.','line_number':2617,'multiline':False]
['text':' In all cases, null out jitScript->ionScript_ to avoid re-entry.','line_number':2631,'multiline':False]
['text':' If this script has Ion code on the stack, invalidated() will return','line_number':2634,'multiline':False]
['text':' true. In this case we have to wait until destroying it.','line_number':2635,'multiline':False]
['text':' If you change these, please also change the comment in TempAllocator.','line_number':2665,'multiline':False]
['text':' static ','line_number':2666,'multiline':True]
['text':' static ','line_number':2667,'multiline':True]
