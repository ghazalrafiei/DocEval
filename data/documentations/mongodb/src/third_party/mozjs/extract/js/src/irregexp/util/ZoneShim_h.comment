['text':' Copyright 2019 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]
['text':' found in the LICENSE file.','line_number':3,'multiline':False]
['text':' V8::Zone ~= LifoAlloc','line_number':21,'multiline':False]
['text':' Allocates uninitialized memory for 'length' number of T instances.','line_number':37,'multiline':False]
['text':' Returns true if the total memory allocated exceeds a threshold.','line_number':51,'multiline':False]
['text':' Superclass for classes allocated in a Zone.','line_number':61,'multiline':False]
['text':' Based on: https://github.com/v8/v8/blob/master/src/zone/zone.h','line_number':62,'multiline':False]
['text':' new (zone) SomeObject(...) was the old pattern.','line_number':65,'multiline':False]
['text':' Delete the constructor to avoid using it accidentally.','line_number':66,'multiline':False]
['text':' Allow non-allocating placement new','line_number':69,'multiline':False]
['text':' Ideally, the delete operator should be private instead of','line_number':72,'multiline':False]
['text':' public, but unfortunately the compiler sometimes synthesizes','line_number':73,'multiline':False]
['text':' (unused) destructors for classes derived from ZoneObject, which','line_number':74,'multiline':False]
['text':' require the operator to be visible. MSVC requires the delete','line_number':75,'multiline':False]
['text':' operator to be public.','line_number':76,'multiline':False]
['text':' ZoneObjects should never be deleted individually; use','line_number':78,'multiline':False]
['text':' Zone::DeleteAll() to delete all zone objects in one go.','line_number':79,'multiline':False]
['text':' ZoneLists are growable lists with constant-time access to the','line_number':84,'multiline':False]
['text':' elements. The list itself and all its elements are allocated in the','line_number':85,'multiline':False]
['text':' Zone. ZoneLists cannot be deleted individually; you can delete all','line_number':86,'multiline':False]
['text':' objects in the Zone by calling Zone::DeleteAll().','line_number':87,'multiline':False]
['text':' Used throughout irregexp.','line_number':88,'multiline':False]
['text':' Based on: https://github.com/v8/v8/blob/master/src/zone/zone-list.h','line_number':89,'multiline':False]
['text':' Construct a new ZoneList with the given capacity; the length is','line_number':93,'multiline':False]
['text':' always zero. The capacity must be non-negative.','line_number':94,'multiline':False]
['text':' Construct a new ZoneList by copying the elements of the given ZoneList.','line_number':98,'multiline':False]
['text':' Returns a reference to the element at index i. This reference is not safe','line_number':104,'multiline':False]
['text':' to use after operations that can change the list's backing store','line_number':105,'multiline':False]
['text':' (e.g. Add).','line_number':106,'multiline':False]
['text':' Adds a copy of the given 'element' to the end of the list,','line_number':133,'multiline':False]
['text':' expanding the list if necessary.','line_number':134,'multiline':False]
['text':' Add all the elements from the argument list to this list.','line_number':142,'multiline':False]
['text':' Add all the elements from the vector to this list.','line_number':146,'multiline':False]
['text':' Overwrites the element at the specific index.','line_number':162,'multiline':False]
['text':' Removes the i'th element without deleting it even if T is a','line_number':168,'multiline':False]
['text':' pointer type; moves all elements above i "down". Returns the','line_number':169,'multiline':False]
['text':' removed element.  This function's complexity is linear in the','line_number':170,'multiline':False]
['text':' size of the list.','line_number':171,'multiline':False]
['text':' Removes the last element without deleting it even if T is a','line_number':182,'multiline':False]
['text':' pointer type. Returns the removed element.','line_number':183,'multiline':False]
['text':' Clears the list by freeing the storage memory. If you want to keep the','line_number':186,'multiline':False]
['text':' memory, use Rewind(0) instead. Be aware, that even if T is a','line_number':187,'multiline':False]
['text':' pointer type, clearing the list doesn't delete the entries.','line_number':188,'multiline':False]
['text':' Drops all but the first 'pos' elements from the list.','line_number':195,'multiline':False]
['text':' Increase the capacity of a full list, and add an element.','line_number':232,'multiline':False]
['text':' List must be full already.','line_number':233,'multiline':False]
['text':' Grow the list capacity by 100%, but make sure to let it grow','line_number':236,'multiline':False]
['text':' even when the capacity is zero (possible initial case).','line_number':237,'multiline':False]
['text':' Since the element reference could be an element of the list, copy','line_number':239,'multiline':False]
['text':' it out of the old backing storage before resizing.','line_number':240,'multiline':False]
['text':' Resize the list.','line_number':246,'multiline':False]
['text':' Based on: https://github.com/v8/v8/blob/master/src/zone/zone-allocator.h','line_number':263,'multiline':False]
['text':' noop for zones','line_number':287,'multiline':False]
['text':' Zone wrappers for std containers:','line_number':300,'multiline':False]
['text':' Origin:','line_number':301,'multiline':False]
['text':' https://github.com/v8/v8/blob/5e514a969376dc63517d575b062758efd36cd757/src/zone/zone-containers.h#L25-L169','line_number':302,'multiline':False]
['text':' A wrapper subclass for std::vector to make it easy to construct one','line_number':304,'multiline':False]
['text':' that uses a zone allocator.','line_number':305,'multiline':False]
['text':' Used throughout irregexp','line_number':306,'multiline':False]
['text':' Constructs a new vector and fills it with the contents of the range','line_number':313,'multiline':False]
['text':' [first, last).','line_number':314,'multiline':False]
['text':' A wrapper subclass for std::list to make it easy to construct one','line_number':320,'multiline':False]
['text':' that uses a zone allocator.','line_number':321,'multiline':False]
['text':' Used in regexp-bytecode-peephole.cc','line_number':322,'multiline':False]
['text':' Constructs an empty list.','line_number':326,'multiline':False]
['text':' A wrapper subclass for std::set to make it easy to construct one that uses','line_number':331,'multiline':False]
['text':' a zone allocator.','line_number':332,'multiline':False]
['text':' Used in regexp-parser.cc','line_number':333,'multiline':False]
['text':' Constructs an empty set.','line_number':337,'multiline':False]
['text':' A wrapper subclass for std::map to make it easy to construct one that uses','line_number':343,'multiline':False]
['text':' a zone allocator.','line_number':344,'multiline':False]
['text':' Used in regexp-bytecode-peephole.cc','line_number':345,'multiline':False]
['text':' Constructs an empty map.','line_number':350,'multiline':False]
['text':' A wrapper subclass for std::unordered_map to make it easy to construct one','line_number':356,'multiline':False]
['text':' that uses a zone allocator.','line_number':357,'multiline':False]
['text':' Used in regexp-bytecode-peephole.cc','line_number':358,'multiline':False]
['text':' Constructs an empty map.','line_number':365,'multiline':False]
['text':' namespace internal','line_number':373,'multiline':False]
['text':' namespace v8','line_number':374,'multiline':False]
['text':' V8_UTIL_FLAG_H_','line_number':376,'multiline':False]
