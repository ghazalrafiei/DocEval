['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' WritableStream controller classes and functions. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT','line_number':12,'multiline':False]
['text':' uint32_t','line_number':14,'multiline':False]
['text':' js::StreamController','line_number':16,'multiline':False]
['text':' js::WritableStream','line_number':17,'multiline':False]
['text':' JSClass, js::ClassSpec','line_number':18,'multiline':False]
['text':' JS::Handle','line_number':19,'multiline':False]
['text':' JS::WritableStreamUnderlyingSink','line_number':20,'multiline':False]
['text':' JS::Value, JS::{Number,Object,Private,Undefined}Value, JS::UndefinedHandleValue','line_number':21,'multiline':False]
['text':' js::NativeObject','line_number':22,'multiline':False]
['text':'*
   * Memory layout for WritableStream default controllers, starting after the
   * slots reserved for queue container usage.  (Note that this is the only
   * writable stream controller class in the spec: ReadableByteStreamController
   * exists, but WritableByteStreamController does not.)
   ','line_number':28,'multiline':True]
['text':'*
     * The stream that this controller controls.  Stream and controller are
     * initialized at the same time underneath the |WritableStream| constructor,
     * so they are same-compartment with each other.
     ','line_number':35,'multiline':True]
['text':'*
     * The underlying sink object that this controller and its associated stream
     * write to.
     *
     * This is a user-provided value, the first argument passed to
     * |new WritableStream|, so it may be a cross-compartment wrapper around an
     * object from another realm.
     ','line_number':42,'multiline':True]
['text':'* Number stored as DoubleValue. ','line_number':52,'multiline':True]
['text':'*
     * Either undefined if each chunk has size 1, or a callable object to be
     * invoked on each chunk to determine its size.  See
     * MakeSizeAlgorithmFromSizeFunction.
     ','line_number':55,'multiline':True]
['text':'*
     * Slots containing the core of each of the write/close/abort algorithms the
     * spec creates from the underlying sink passed in when creating a
     * |WritableStream|.  ("core", as in the value produced by
     * |CreateAlgorithmFromUnderlyingMethod| after validating the user-provided
     * input.)
     *
     * These slots are initialized underneath the |WritableStream| constructor,
     * so they are same-compartment with both stream and controller.  (They
     * could be wrappers around arbitrary callable objects from other
     * compartments, tho.)
     ','line_number':62,'multiline':True]
['text':'* Bit field stored as Int32Value. ','line_number':78,'multiline':True]
['text':' namespace js','line_number':184,'multiline':False]
['text':' builtin_streams_WritableStreamDefaultController_h','line_number':186,'multiline':False]
