['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sw=2 et tw=80:
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' getpid()','line_number':28,'multiline':False]
['text':' The end of the range is always ChunkSize.','line_number':71,'multiline':False]
['text':' The start of the range is always the beginning of the chunk.','line_number':73,'multiline':False]
['text':' namespace js','line_number':82,'multiline':False]
['text':' We can poison the same chunk more than once, so first make sure memory','line_number':98,'multiline':False]
['text':' sanitizers will let us poison it.','line_number':99,'multiline':False]
['text':' Don't touch the header.','line_number':111,'multiline':False]
['text':' static','line_number':123,'multiline':False]
['text':' If we fail to allocate memory, the nursery will not be enabled.','line_number':269,'multiline':False]
['text':' This should always succeed after the first time it's called.','line_number':280,'multiline':False]
['text':' Clear any information about previous collections.','line_number':299,'multiline':False]
['text':' Free all chunks.','line_number':312,'multiline':False]
['text':' We must reset currentEnd_ so that there is no space for anything in the','line_number':319,'multiline':False]
['text':' nursery. JIT'd code uses this even if the nursery is disabled.','line_number':320,'multiline':False]
['text':' It'd be simpler to poison the whole chunk, but we can't do that','line_number':383,'multiline':False]
['text':' because the nursery might be partially used.','line_number':384,'multiline':False]
['text':' JS_GC_ZEAL','line_number':409,'multiline':False]
['text':' Ensure there's enough space to replace the contents with a','line_number':414,'multiline':False]
['text':' RelocationOverlay.','line_number':415,'multiline':False]
['text':' Sanity check the finalizer.','line_number':418,'multiline':False]
['text':' If we want external slots, add them.','line_number':428,'multiline':False]
['text':' It is safe to leave the allocated object uninitialized, since we','line_number':435,'multiline':False]
['text':' do not visit unallocated things in the nursery.','line_number':436,'multiline':False]
['text':' Store slots pointer directly in new object. If no dynamic slots were','line_number':442,'multiline':False]
['text':' requested, caller must initialize slots_ field itself as needed. We','line_number':443,'multiline':False]
['text':' don't know if the caller was a native object or not.','line_number':444,'multiline':False]
['text':' Ensure there's enough space to replace the contents with a','line_number':455,'multiline':False]
['text':' RelocationOverlay.','line_number':456,'multiline':False]
['text':' Update the allocation site. This code is also inlined in','line_number':470,'multiline':False]
['text':' MacroAssembler::updateAllocSite.','line_number':471,'multiline':False]
['text':' We count this regardless of the profiler's state, assuming that it costs','line_number':510,'multiline':False]
['text':' just as much to count it, as to check the profiler's state and decide not','line_number':511,'multiline':False]
['text':' to count it.','line_number':512,'multiline':False]
['text':' We know there's enough space to allocate now so we can call allocate()','line_number':550,'multiline':False]
['text':' recursively. Adjust the size for the nursery canary which it will add on.','line_number':551,'multiline':False]
['text':'= js::MallocArena','line_number':614,'multiline':True]
['text':'= js::MallocArena','line_number':634,'multiline':True]
['text':' The nursery cannot make use of the returned slots data.','line_number':665,'multiline':False]
['text':' static ','line_number':695,'multiline':True]
['text':' If a zero-capacity elements header lands right at the end of a chunk then','line_number':702,'multiline':False]
['text':' elements data will appear to be in the next chunk. If we have a pointer to','line_number':703,'multiline':False]
['text':' the very start of a chunk, check the previous chunk.','line_number':704,'multiline':False]
['text':' Read the current pointer value which may be one of:','line_number':738,'multiline':False]
['text':'  - Non-nursery pointer','line_number':739,'multiline':False]
['text':'  - Nursery-allocated buffer','line_number':740,'multiline':False]
['text':'  - A BufferRelocationOverlay inside the nursery','line_number':741,'multiline':False]
['text':'','line_number':742,'multiline':False]
['text':' Note: The buffer has already be relocated. We are just patching stale','line_number':743,'multiline':False]
['text':'       pointers now.','line_number':744,'multiline':False]
['text':' The new location for this buffer is either stored inline with it or in','line_number':751,'multiline':False]
['text':' the forwardedBuffers table.','line_number':752,'multiline':False]
['text':' It's not valid to assert IsWriteableAddress for indirect forwarding','line_number':755,'multiline':False]
['text':' pointers because the size of the allocation could be less than a word.','line_number':756,'multiline':False]
['text':' We should only use the promotion rate to make tenuring decisions if it's','line_number':791,'multiline':False]
['text':' likely to be valid. The criterion we use is that the nursery was at least','line_number':792,'multiline':False]
['text':' 90% full.','line_number':793,'multiline':False]
['text':' If the nursery was empty when the last minorGC was requested, then','line_number':808,'multiline':False]
['text':' no nursery collection will have been performed but JSON may still be','line_number':809,'multiline':False]
['text':' requested. (And as a public API, this function should not crash in','line_number':810,'multiline':False]
['text':' such a case.)','line_number':811,'multiline':False]
['text':' These counters only contain consistent data if the profiler is enabled,','line_number':844,'multiline':False]
['text':' and then there's no guarentee.','line_number':845,'multiline':False]
['text':' timings value','line_number':877,'multiline':False]
['text':' static','line_number':897,'multiline':False]
['text':' static','line_number':909,'multiline':False]
['text':' Eagerly collect the nursery in idle time if it's nearly full.','line_number':964,'multiline':False]
['text':' If the nursery is not being collected often then it may be taking up more','line_number':969,'multiline':False]
['text':' space than necessary.','line_number':970,'multiline':False]
['text':' We want to use belowBytesThreshold when the nursery is sufficiently large,','line_number':981,'multiline':False]
['text':' and belowFractionThreshold when it's small.','line_number':982,'multiline':False]
['text':'','line_number':983,'multiline':False]
['text':' When the nursery is small then belowBytesThreshold is a lower threshold','line_number':984,'multiline':False]
['text':' (triggered earlier) than belowFractionThreshold. So if the fraction','line_number':985,'multiline':False]
['text':' threshold is true, the bytes one will be true also. The opposite is true','line_number':986,'multiline':False]
['text':' when the nursery is large.','line_number':987,'multiline':False]
['text':'','line_number':988,'multiline':False]
['text':' Therefore, by the time we cross the threshold we care about, we've already','line_number':989,'multiline':False]
['text':' crossed the other one, and we can boolean AND to use either condition','line_number':990,'multiline':False]
['text':' without encoding any "is the nursery big/small" test/threshold. The point','line_number':991,'multiline':False]
['text':' at which they cross is when the nursery is: BytesThreshold /','line_number':992,'multiline':False]
['text':' FractionThreshold large.','line_number':993,'multiline':False]
['text':'','line_number':994,'multiline':False]
['text':' With defaults that's:','line_number':995,'multiline':False]
['text':'','line_number':996,'multiline':False]
['text':'   1MB = 256KB / 0.25','line_number':997,'multiline':False]
['text':'','line_number':998,'multiline':False]
['text':' If the nursery is above its minimum size, collect it every so often if we','line_number':1011,'multiline':False]
['text':' have idle time. This allows the nursery to shrink when it's not being','line_number':1012,'multiline':False]
['text':' used. There are other heuristics we could use for this, but this is the','line_number':1013,'multiline':False]
['text':' simplest.','line_number':1014,'multiline':False]
['text':' typeReason is the gcReason for specified type, for example,','line_number':1019,'multiline':False]
['text':' FULL_CELL_PTR_OBJ_BUFFER is the gcReason for JSObject.','line_number':1020,'multiline':False]
['text':' Our barriers are not always exact, and there may be entries in the','line_number':1036,'multiline':False]
['text':' storebuffer even when the nursery is disabled or empty. It's not safe','line_number':1037,'multiline':False]
['text':' to keep these entries as they may refer to tenured cells which may be','line_number':1038,'multiline':False]
['text':' freed after this point.','line_number':1039,'multiline':False]
['text':' If it isn't empty, it will call doCollection, and possibly after that','line_number':1075,'multiline':False]
['text':' isEmpty() will become true, so use another variable to keep track of the','line_number':1076,'multiline':False]
['text':' old empty state.','line_number':1077,'multiline':False]
['text':' Resize the nursery.','line_number':1086,'multiline':False]
['text':' Poison/initialise the first chunk.','line_number':1089,'multiline':False]
['text':' In most cases Nursery::clear() has not poisoned this chunk or marked it','line_number':1091,'multiline':False]
['text':' as NoAccess; so we only need to poison the region used during the last','line_number':1092,'multiline':False]
['text':' cycle.  Also, if the heap was recently expanded we don't want to','line_number':1093,'multiline':False]
['text':' re-poison the new memory.  In both cases we only need to poison until','line_number':1094,'multiline':False]
['text':' previousGC.nurseryUsedBytes.','line_number':1095,'multiline':False]
['text':'','line_number':1096,'multiline':False]
['text':' In cases where this is not true, like generational zeal mode or subchunk','line_number':1097,'multiline':False]
['text':' mode, poisonAndInitCurrentChunk() will ignore its parameter.  It will','line_number':1098,'multiline':False]
['text':' also clamp the parameter.','line_number':1099,'multiline':False]
['text':' We ignore gcMaxBytes when allocating for minor collection. However, if we','line_number':1114,'multiline':False]
['text':' overflowed, we disable the nursery. The next time we allocate, we'll fail','line_number':1115,'multiline':False]
['text':' because bytes >= gcMaxBytes.','line_number':1116,'multiline':False]
['text':' Must happen after maybeResizeNursery.','line_number':1121,'multiline':False]
['text':' Move objects pointed to by roots from the nursery to the major heap.','line_number':1192,'multiline':False]
['text':' Mark the store buffer. This must happen first.','line_number':1195,'multiline':False]
['text':' Strings in the whole cell buffer must be traced first, in order to mark','line_number':1198,'multiline':False]
['text':' tenured dependent strings' bases as non-deduplicatable. The rest of','line_number':1199,'multiline':False]
['text':' nursery collection (whole non-string cells, edges, etc.) can happen later.','line_number':1200,'multiline':False]
['text':' Most of the work is done here. This loop iterates over objects that have','line_number':1236,'multiline':False]
['text':' been moved to the major heap. If these objects have any outgoing pointers','line_number':1237,'multiline':False]
['text':' to the nursery, then those nursery objects get moved as well, until no','line_number':1238,'multiline':False]
['text':' objects are left to move. That is, we iterate to a fixed point.','line_number':1239,'multiline':False]
['text':' Sweep to update any pointers to nursery objects that have now been','line_number':1248,'multiline':False]
['text':' tenured.','line_number':1249,'multiline':False]
['text':' Update any slot or element pointers whose destination has been tenured.','line_number':1254,'multiline':False]
['text':' Sweep.','line_number':1264,'multiline':False]
['text':' Purge the StringToAtomCache. This has to happen at the end because the','line_number':1278,'multiline':False]
['text':' cache is used when tenuring strings.','line_number':1279,'multiline':False]
['text':' Make sure hashtables have been updated after the collection.','line_number':1284,'multiline':False]
['text':' Should we check for pretenuring regardless of GCReason?','line_number':1308,'multiline':False]
['text':' Use 3MB as the threshold so the pretenuring can be applied on Android.','line_number':1309,'multiline':False]
['text':' For some tests in JetStream2 and Kraken, the tenuredRate is high but the','line_number':1327,'multiline':False]
['text':' number of allocated strings is low. So we calculate the tenuredRate only','line_number':1328,'multiline':False]
['text':' if the number of string allocations is enough.','line_number':1329,'multiline':False]
['text':' End the minor GC session, if running one.','line_number':1376,'multiline':False]
['text':' Sweep unique IDs first before we sweep any tables that may be keyed based','line_number':1403,'multiline':False]
['text':' on them.','line_number':1404,'multiline':False]
['text':' Poison the nursery contents so touching a freed object will crash.','line_number':1428,'multiline':False]
['text':' Poison all the chunks used in this cycle. The new start chunk is','line_number':1431,'multiline':False]
['text':' reposioned in Nursery::collect() but there's no point optimising that in','line_number':1432,'multiline':False]
['text':' this case.','line_number':1433,'multiline':False]
['text':' In normal mode we start at the second chunk, the first one will be used','line_number':1436,'multiline':False]
['text':' in the next cycle and poisoned in Nusery::collect();','line_number':1437,'multiline':False]
['text':' Clear only the used part of the chunk because that's the part we touched,','line_number':1444,'multiline':False]
['text':' but only if it's not going to be re-used immediately (>= firstClearChunk).','line_number':1445,'multiline':False]
['text':' Reset the start chunk & position if we're not in this zeal mode, or we're','line_number':1451,'multiline':False]
['text':' in it and close to the end of the nursery.','line_number':1452,'multiline':False]
['text':' Set current start position for isEmpty checks.','line_number':1460,'multiline':False]
['text':' In the general case we have to add:','line_number':1478,'multiline':False]
['text':'  + the bytes used in the first','line_number':1479,'multiline':False]
['text':'    chunk which may be less than the total size of a chunk since in some','line_number':1480,'multiline':False]
['text':'    zeal modes we start the first chunk at some later position','line_number':1481,'multiline':False]
['text':'    (currentStartPosition_).','line_number':1482,'multiline':False]
['text':'  + the size of all the other chunks.','line_number':1483,'multiline':False]
['text':' In sub-chunk mode, but it also works whenever chunkCount == 1, we need to','line_number':1487,'multiline':False]
['text':' use currentEnd_ since it may not refer to a full chunk.','line_number':1488,'multiline':False]
['text':' This zeal mode disabled nursery resizing.','line_number':1560,'multiline':False]
['text':' Shrink the nursery as much as possible if purging was requested or in low','line_number':1602,'multiline':False]
['text':' memory situations.','line_number':1603,'multiline':False]
['text':' Don't resize the nursery during shutdown.','line_number':1610,'multiline':False]
['text':' If the nursery is completely unused then minimise it.','line_number':1618,'multiline':False]
['text':' Calculate the fraction of the nursery promoted out of its entire','line_number':1627,'multiline':False]
['text':' capacity. This gives better results than using the promotion rate (based on','line_number':1628,'multiline':False]
['text':' the amount of nursery used) in cases where we collect before the nursery is','line_number':1629,'multiline':False]
['text':' full.','line_number':1630,'multiline':False]
['text':' Calculate the fraction of time spent collecting the nursery.','line_number':1634,'multiline':False]
['text':' Adjust the nursery size to try to achieve a target promotion rate and','line_number':1642,'multiline':False]
['text':' collector time goals.','line_number':1643,'multiline':False]
['text':' Limit the range of the growth factor to prevent transient high promotion','line_number':1649,'multiline':False]
['text':' rates from affecting the nursery size too far into the future.','line_number':1650,'multiline':False]
['text':' Use exponential smoothing on the desired growth rate to take into account','line_number':1654,'multiline':False]
['text':' the promotion rate from recent previous collections.','line_number':1655,'multiline':False]
['text':' Leave size untouched if we are close to the promotion goal.','line_number':1665,'multiline':False]
['text':' The multiplication below cannot overflow because growthFactor is at','line_number':1671,'multiline':False]
['text':' most two.','line_number':1672,'multiline':False]
['text':' static ','line_number':1688,'multiline':True]
['text':' The remainder of the chunk may have been decommitted.','line_number':1710,'multiline':False]
['text':' The OS won't give us the memory we need, we can't grow.','line_number':1712,'multiline':False]
['text':' The capacity has changed and since we were in sub-chunk mode we need to','line_number':1716,'multiline':False]
['text':' update the poison values / asan information for the now-valid region of','line_number':1717,'multiline':False]
['text':' this chunk.','line_number':1718,'multiline':False]
['text':' The loop below may need to skip the first chunk, so we may use this so we','line_number':1732,'multiline':False]
['text':' can modify it.','line_number':1733,'multiline':False]
['text':' Part of the first chunk may be hard-decommitted, un-decommit it so that','line_number':1737,'multiline':False]
['text':' the GC's normal chunk-handling doesn't segfault.','line_number':1738,'multiline':False]
['text':' Free the chunk if we can't allocate its pages.','line_number':1741,'multiline':False]
['text':' Don't shrink the nursery to zero (use Nursery::disable() instead)','line_number':1764,'multiline':False]
['text':' This can't happen due to the rounding-down performed above because of the','line_number':1765,'multiline':False]
['text':' clamping in maybeResizeNursery().','line_number':1766,'multiline':False]
['text':' Don't attempt to shrink it to the same size.','line_number':1768,'multiline':False]
['text':' These are separate asserts because it can be useful to see which one','line_number':1796,'multiline':False]
['text':' failed.','line_number':1797,'multiline':False]
