['text':' Copyright 2019 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]
['text':' found in the LICENSE file.','line_number':3,'multiline':False]
['text':' V8_INTL_SUPPORT','line_number':10,'multiline':False]
['text':' V8_INTL_SUPPORT','line_number':16,'multiline':False]
['text':' NOLINT(build/namespaces)','line_number':21,'multiline':False]
['text':' -------------------------------------------------------------------','line_number':23,'multiline':False]
['text':' Implementation of the Irregexp regular expression engine.','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' The Irregexp regular expression engine is intended to be a complete','line_number':26,'multiline':False]
['text':' implementation of ECMAScript regular expressions.  It generates either','line_number':27,'multiline':False]
['text':' bytecodes or native code.','line_number':28,'multiline':False]
['text':'   The Irregexp regexp engine is structured in three steps.','line_number':30,'multiline':False]
['text':'   1) The parser generates an abstract syntax tree.  See ast.cc.','line_number':31,'multiline':False]
['text':'   2) From the AST a node network is created.  The nodes are all','line_number':32,'multiline':False]
['text':'      subclasses of RegExpNode.  The nodes represent states when','line_number':33,'multiline':False]
['text':'      executing a regular expression.  Several optimizations are','line_number':34,'multiline':False]
['text':'      performed on the node network.','line_number':35,'multiline':False]
['text':'   3) From the nodes we generate either byte codes or native code','line_number':36,'multiline':False]
['text':'      that can actually execute the regular expression (perform','line_number':37,'multiline':False]
['text':'      the search).  The code generation step is described in more','line_number':38,'multiline':False]
['text':'      detail below.','line_number':39,'multiline':False]
['text':' Code generation.','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':'   The nodes are divided into four main categories.','line_number':43,'multiline':False]
['text':'   * Choice nodes','line_number':44,'multiline':False]
['text':'        These represent places where the regular expression can','line_number':45,'multiline':False]
['text':'        match in more than one way.  For example on entry to an','line_number':46,'multiline':False]
['text':'        alternation (foo|bar) or a repetition (*, +, ? or {}).','line_number':47,'multiline':False]
['text':'   * Action nodes','line_number':48,'multiline':False]
['text':'        These represent places where some action should be','line_number':49,'multiline':False]
['text':'        performed.  Examples include recording the current position','line_number':50,'multiline':False]
['text':'        in the input string to a register (in order to implement','line_number':51,'multiline':False]
['text':'        captures) or other actions on register for example in order','line_number':52,'multiline':False]
['text':'        to implement the counters needed for {} repetitions.','line_number':53,'multiline':False]
['text':'   * Matching nodes','line_number':54,'multiline':False]
['text':'        These attempt to match some element part of the input string.','line_number':55,'multiline':False]
['text':'        Examples of elements include character classes, plain strings','line_number':56,'multiline':False]
['text':'        or back references.','line_number':57,'multiline':False]
['text':'   * End nodes','line_number':58,'multiline':False]
['text':'        These are used to implement the actions required on finding','line_number':59,'multiline':False]
['text':'        a successful match or failing to find a match.','line_number':60,'multiline':False]
['text':'','line_number':61,'multiline':False]
['text':'   The code generated (whether as byte codes or native code) maintains','line_number':62,'multiline':False]
['text':'   some state as it runs.  This consists of the following elements:','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':'   * The capture registers.  Used for string captures.','line_number':65,'multiline':False]
['text':'   * Other registers.  Used for counters etc.','line_number':66,'multiline':False]
['text':'   * The current position.','line_number':67,'multiline':False]
['text':'   * The stack of backtracking information.  Used when a matching node','line_number':68,'multiline':False]
['text':'     fails to find a match and needs to try an alternative.','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' Conceptual regular expression execution model:','line_number':71,'multiline':False]
['text':'','line_number':72,'multiline':False]
['text':'   There is a simple conceptual model of regular expression execution','line_number':73,'multiline':False]
['text':'   which will be presented first.  The actual code generated is a more','line_number':74,'multiline':False]
['text':'   efficient simulation of the simple conceptual model:','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':'   * Choice nodes are implemented as follows:','line_number':77,'multiline':False]
['text':'     For each choice except the last {','line_number':78,'multiline':False]
['text':'       push current position','line_number':79,'multiline':False]
['text':'       push backtrack code location','line_number':80,'multiline':False]
['text':'       <generate code to test for choice>','line_number':81,'multiline':False]
['text':'       backtrack code location:','line_number':82,'multiline':False]
['text':'       pop current position','line_number':83,'multiline':False]
['text':'     }','line_number':84,'multiline':False]
['text':'     <generate code to test for last choice>','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':'   * Actions nodes are generated as follows','line_number':87,'multiline':False]
['text':'     <push affected registers on backtrack stack>','line_number':88,'multiline':False]
['text':'     <generate code to perform action>','line_number':89,'multiline':False]
['text':'     push backtrack code location','line_number':90,'multiline':False]
['text':'     <generate code to test for following nodes>','line_number':91,'multiline':False]
['text':'     backtrack code location:','line_number':92,'multiline':False]
['text':'     <pop affected registers to restore their state>','line_number':93,'multiline':False]
['text':'     <pop backtrack location from stack and go to it>','line_number':94,'multiline':False]
['text':'','line_number':95,'multiline':False]
['text':'   * Matching nodes are generated as follows:','line_number':96,'multiline':False]
['text':'     if input string matches at current position','line_number':97,'multiline':False]
['text':'       update current position','line_number':98,'multiline':False]
['text':'       <generate code to test for following nodes>','line_number':99,'multiline':False]
['text':'     else','line_number':100,'multiline':False]
['text':'       <pop backtrack location from stack and go to it>','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':'   Thus it can be seen that the current position is saved and restored','line_number':103,'multiline':False]
['text':'   by the choice nodes, whereas the registers are saved and restored by','line_number':104,'multiline':False]
['text':'   by the action nodes that manipulate them.','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':'   The other interesting aspect of this model is that nodes are generated','line_number':107,'multiline':False]
['text':'   at the point where they are needed by a recursive call to Emit().  If','line_number':108,'multiline':False]
['text':'   the node has already been code generated then the Emit() call will','line_number':109,'multiline':False]
['text':'   generate a jump to the previously generated code instead.  In order to','line_number':110,'multiline':False]
['text':'   limit recursion it is possible for the Emit() function to put the node','line_number':111,'multiline':False]
['text':'   on a work list for later generation and instead generate a jump.  The','line_number':112,'multiline':False]
['text':'   destination of the jump is resolved later when the code is generated.','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' Actual regular expression code generation.','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':'   Code generation is actually more complicated than the above.  In order','line_number':117,'multiline':False]
['text':'   to improve the efficiency of the generated code some optimizations are','line_number':118,'multiline':False]
['text':'   performed','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':'   * Choice nodes have 1-character lookahead.','line_number':121,'multiline':False]
['text':'     A choice node looks at the following character and eliminates some of','line_number':122,'multiline':False]
['text':'     the choices immediately based on that character.  This is not yet','line_number':123,'multiline':False]
['text':'     implemented.','line_number':124,'multiline':False]
['text':'   * Simple greedy loops store reduced backtracking information.','line_number':125,'multiline':False]
['text':'     A quantifier like /.*foo/m will greedily match the whole input.  It will','line_number':126,'multiline':False]
['text':'     then need to backtrack to a point where it can match "foo".  The naive','line_number':127,'multiline':False]
['text':'     implementation of this would push each character position onto the','line_number':128,'multiline':False]
['text':'     backtracking stack, then pop them off one by one.  This would use space','line_number':129,'multiline':False]
['text':'     proportional to the length of the input string.  However since the "."','line_number':130,'multiline':False]
['text':'     can only match in one way and always has a constant length (in this case','line_number':131,'multiline':False]
['text':'     of 1) it suffices to store the current position on the top of the stack','line_number':132,'multiline':False]
['text':'     once.  Matching now becomes merely incrementing the current position and','line_number':133,'multiline':False]
['text':'     backtracking becomes decrementing the current position and checking the','line_number':134,'multiline':False]
['text':'     result against the stored current position.  This is faster and saves','line_number':135,'multiline':False]
['text':'     space.','line_number':136,'multiline':False]
['text':'   * The current state is virtualized.','line_number':137,'multiline':False]
['text':'     This is used to defer expensive operations until it is clear that they','line_number':138,'multiline':False]
['text':'     are needed and to generate code for a node more than once, allowing','line_number':139,'multiline':False]
['text':'     specialized an efficient versions of the code to be created. This is','line_number':140,'multiline':False]
['text':'     explained in the section below.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' Execution state virtualization.','line_number':143,'multiline':False]
['text':'','line_number':144,'multiline':False]
['text':'   Instead of emitting code, nodes that manipulate the state can record their','line_number':145,'multiline':False]
['text':'   manipulation in an object called the Trace.  The Trace object can record a','line_number':146,'multiline':False]
['text':'   current position offset, an optional backtrack code location on the top of','line_number':147,'multiline':False]
['text':'   the virtualized backtrack stack and some register changes.  When a node is','line_number':148,'multiline':False]
['text':'   to be emitted it can flush the Trace or update it.  Flushing the Trace','line_number':149,'multiline':False]
['text':'   will emit code to bring the actual state into line with the virtual state.','line_number':150,'multiline':False]
['text':'   Avoiding flushing the state can postpone some work (e.g. updates of capture','line_number':151,'multiline':False]
['text':'   registers).  Postponing work can save time when executing the regular','line_number':152,'multiline':False]
['text':'   expression since it may be found that the work never has to be done as a','line_number':153,'multiline':False]
['text':'   failure to match can occur.  In addition it is much faster to jump to a','line_number':154,'multiline':False]
['text':'   known backtrack code location than it is to pop an unknown backtrack','line_number':155,'multiline':False]
['text':'   location from the stack and jump there.','line_number':156,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':'   The virtual state found in the Trace affects code generation.  For example','line_number':158,'multiline':False]
['text':'   the virtual state contains the difference between the actual current','line_number':159,'multiline':False]
['text':'   position and the virtual current position, and matching code needs to use','line_number':160,'multiline':False]
['text':'   this offset to attempt a match in the correct location of the input','line_number':161,'multiline':False]
['text':'   string.  Therefore code generated for a non-trivial trace is specialized','line_number':162,'multiline':False]
['text':'   to that trace.  The code generator therefore has the ability to generate','line_number':163,'multiline':False]
['text':'   code for each node several times.  In order to limit the size of the','line_number':164,'multiline':False]
['text':'   generated code there is an arbitrary limit on how many specialized sets of','line_number':165,'multiline':False]
['text':'   code may be generated for a given node.  If the limit is reached, the','line_number':166,'multiline':False]
['text':'   trace is flushed and a generic version of the code for a node is emitted.','line_number':167,'multiline':False]
['text':'   This is subsequently used for that node.  The code emitted for non-generic','line_number':168,'multiline':False]
['text':'   trace is not recorded in the node and so it cannot currently be reused in','line_number':169,'multiline':False]
['text':'   the event that code generation is requested for an identical trace.','line_number':170,'multiline':False]
['text':' namespace','line_number':188,'multiline':False]
['text':' Attempts to compile the regexp using an Irregexp code generator.  Returns','line_number':235,'multiline':False]
['text':' a fixed array or a null handle depending on whether it succeeded.','line_number':236,'multiline':False]
['text':' A (dynamically-sized) set of unsigned integers that behaves especially well','line_number':321,'multiline':False]
['text':' on small integers (< kFirstLimit). May do zone-allocation.','line_number':322,'multiline':False]
['text':' Destructively set a value in this set.','line_number':335,'multiline':False]
['text':' The "+1" is to avoid a push_limit of zero if stack_limit_slack() is 1.','line_number':395,'multiline':False]
['text':' Count pushes performed to force a stack limit check occasionally.','line_number':398,'multiline':False]
['text':' The chronologically first deferred action in the trace','line_number':404,'multiline':False]
['text':' is used to infer the action needed to restore a register','line_number':405,'multiline':False]
['text':' to its previous state (or not, if it's safe to ignore it).','line_number':406,'multiline':False]
['text':' This is a little tricky because we are scanning the actions in reverse','line_number':415,'multiline':False]
['text':' historical order (newest first).','line_number':416,'multiline':False]
['text':' SET_REGISTER_FOR_LOOP is only used for newly introduced loop','line_number':428,'multiline':False]
['text':' counters. They can have a significant previous value if they','line_number':429,'multiline':False]
['text':' occur in a loop. TODO(lrn): Propagate this information, so','line_number':430,'multiline':False]
['text':' we can set undo_action to IGNORE if we know there is no value to','line_number':431,'multiline':False]
['text':' restore.','line_number':432,'multiline':False]
['text':' For captures we know that stores and clears alternate.','line_number':453,'multiline':False]
['text':' Other register, are never cleared, and if the occur','line_number':454,'multiline':False]
['text':' inside a loop, they might be assigned more than once.','line_number':455,'multiline':False]
['text':' Registers zero and one, aka "capture zero", is','line_number':457,'multiline':False]
['text':' always set correctly if we succeed. There is no','line_number':458,'multiline':False]
['text':' need to undo a setting on backtrack, because we','line_number':459,'multiline':False]
['text':' will set it again or fail.','line_number':460,'multiline':False]
['text':' Since we're scanning in reverse order, if we've already','line_number':470,'multiline':False]
['text':' set the position we have to ignore historically earlier','line_number':471,'multiline':False]
['text':' clearing operations.','line_number':472,'multiline':False]
['text':' Prepare for the undo-action (e.g., push if it's going to be popped).','line_number':487,'multiline':False]
['text':' Perform the chronologically last action (or accumulated increment)','line_number':502,'multiline':False]
['text':' for the register.','line_number':503,'multiline':False]
['text':' This is called as we come into a loop choice node and some other tricky','line_number':516,'multiline':False]
['text':' nodes.  It normalizes the state of the code generator to ensure we can','line_number':517,'multiline':False]
['text':' generate generic code.','line_number':518,'multiline':False]
['text':' Here we just have some deferred cp advances to fix and we are back to','line_number':525,'multiline':False]
['text':' a normal situation.  We may also have to forget some information gained','line_number':526,'multiline':False]
['text':' through a quick check that was already performed.','line_number':527,'multiline':False]
['text':' Create a new trivial state and generate the node with that.','line_number':529,'multiline':False]
['text':' Generate deferred actions here along with code to undo them again.','line_number':535,'multiline':False]
['text':' Here we have a concrete backtrack location.  These are set up by choice','line_number':539,'multiline':False]
['text':' nodes and so they indicate that we have a deferred save of the current','line_number':540,'multiline':False]
['text':' position which we may need to emit here.','line_number':541,'multiline':False]
['text':' Create a new trivial state and generate the node with that.','line_number':556,'multiline':False]
['text':' On backtrack we need to restore state.','line_number':567,'multiline':False]
['text':' Omit flushing the trace. We discard the entire stack frame anyway.','line_number':582,'multiline':False]
['text':' We are completely independent of the trace, since we ignore it,','line_number':585,'multiline':False]
['text':' so this code can be used as the generic version.','line_number':586,'multiline':False]
['text':' Throw away everything on the backtrack stack since the start','line_number':590,'multiline':False]
['text':' of the negative submatch and restore the character position.','line_number':591,'multiline':False]
['text':' Clear any captures that might have been performed during the success','line_number':595,'multiline':False]
['text':' of the body of the negative look-ahead.','line_number':596,'multiline':False]
['text':' Now that we have unwound the stack we find at the top of the stack the','line_number':600,'multiline':False]
['text':' backtrack that the BeginNegativeSubmatch node got.','line_number':601,'multiline':False]
['text':' This case is handled in a different virtual method.','line_number':622,'multiline':False]
['text':' -------------------------------------------------------------------','line_number':714,'multiline':False]
['text':' Emit code.','line_number':715,'multiline':False]
['text':' DEBUG','line_number':743,'multiline':False]
['text':' namespace','line_number':745,'multiline':False]
['text':' Returns the number of characters in the equivalence class, omitting those','line_number':747,'multiline':False]
['text':' that cannot occur in the source string because it is Latin1.','line_number':748,'multiline':False]
['text':' Unibrow returns 0 or 1 for characters where case independence is','line_number':790,'multiline':False]
['text':' trivial.','line_number':791,'multiline':False]
['text':' V8_INTL_SUPPORT','line_number':809,'multiline':False]
['text':' Only emits non-letters (things that don't have case).  Only used for case','line_number':826,'multiline':False]
['text':' independent matches.','line_number':827,'multiline':False]
['text':' This can't match.  Must be an one-byte subject and a non-one-byte','line_number':836,'multiline':False]
['text':' character.  We do not need to do anything since the one-byte pass','line_number':837,'multiline':False]
['text':' already handled this.','line_number':838,'multiline':False]
['text':' Bounds not checked.','line_number':839,'multiline':False]
['text':' We handle the length > 1 case in a later pass.','line_number':842,'multiline':False]
['text':' Can't match - see above.','line_number':845,'multiline':False]
['text':' Bounds not checked.','line_number':846,'multiline':False]
['text':' Check whether exor has only one bit set.','line_number':862,'multiline':False]
['text':' If c1 and c2 differ only by one bit.','line_number':864,'multiline':False]
['text':' Ecma262UnCanonicalize always gives the highest number last.','line_number':865,'multiline':False]
['text':' If the characters differ by 2^n but don't differ by one bit then','line_number':874,'multiline':False]
['text':' subtract the difference from the found character, then do the or','line_number':875,'multiline':False]
['text':' trick.  We avoid the theoretical case where negative numbers are','line_number':876,'multiline':False]
['text':' involved in order to simplify code generation.','line_number':877,'multiline':False]
['text':' Only emits letters (things that have case).  Only used for case independent','line_number':886,'multiline':False]
['text':' matches.','line_number':887,'multiline':False]
['text':' We may not need to check against the end of the input string','line_number':896,'multiline':False]
['text':' if this character lies before a character that matched.','line_number':897,'multiline':False]
['text':' even_label is for ranges[i] to ranges[i + 1] where i - start_index is even.','line_number':958,'multiline':False]
['text':' odd_label is for ranges[i] to ranges[i + 1] where i - start_index is odd.','line_number':959,'multiline':False]
['text':' Assert that everything is on one kTableSize page.','line_number':971,'multiline':False]
['text':' TODO(erikcorry): Cache these.','line_number':1006,'multiline':False]
['text':' Cut out the single range by rewriting the array.  This creates a new','line_number':1026,'multiline':False]
['text':' range that is a merger of the two ranges on either side of the one we','line_number':1027,'multiline':False]
['text':' are cutting out.  The oddity of the labels is preserved.','line_number':1028,'multiline':False]
['text':' Unicode case.  Split the search space into kSize spaces that are handled','line_number':1037,'multiline':False]
['text':' with recursion.','line_number':1038,'multiline':False]
['text':' new_start_index is the index of the first edge that is beyond the','line_number':1054,'multiline':False]
['text':' current kSize space.','line_number':1055,'multiline':False]
['text':' For very large search spaces we do a binary chop search of the non-Latin1','line_number':1057,'multiline':False]
['text':' space instead of just going to the end of the current kSize space.  The','line_number':1058,'multiline':False]
['text':' heuristics are complicated a little by the fact that any 128-character','line_number':1059,'multiline':False]
['text':' encoding space can be quickly tested with a table lookup, so we don't','line_number':1060,'multiline':False]
['text':' wish to do binary chop search at a smaller granularity than that.  A','line_number':1061,'multiline':False]
['text':' 128-character space can take up a lot of space in the ranges array if,','line_number':1062,'multiline':False]
['text':' for example, we only want to match every second character (eg. the lower','line_number':1063,'multiline':False]
['text':' case characters on some Unicode pages).','line_number':1064,'multiline':False]
['text':' The first test ensures that we get to the code that handles the Latin1','line_number':1066,'multiline':False]
['text':' range with a single not-taken branch, speeding up this important','line_number':1067,'multiline':False]
['text':' character range (even non-Latin1 charset-based text has spaces and','line_number':1068,'multiline':False]
['text':' punctuation).','line_number':1069,'multiline':False]
['text':' Latin1 case.','line_number':1070,'multiline':False]
['text':' Won't be used.','line_number':1094,'multiline':False]
['text':' Gets a series of segment boundaries representing a character class.  If the','line_number':1099,'multiline':False]
['text':' character is in the range between an even and an odd boundary (counting from','line_number':1100,'multiline':False]
['text':' start_index) then go to even_label, otherwise go to odd_label.  We already','line_number':1101,'multiline':False]
['text':' know that the character is in the range of min_char to max_char inclusive.','line_number':1102,'multiline':False]
['text':' Either label can be nullptr indicating backtracking.  Either label can also','line_number':1103,'multiline':False]
['text':' be equal to the fall_through label.','line_number':1104,'multiline':False]
['text':' Just need to test if the character is before or on-or-after','line_number':1117,'multiline':False]
['text':' a particular character.','line_number':1118,'multiline':False]
['text':' Another almost trivial case:  There is one interval in the middle that is','line_number':1124,'multiline':False]
['text':' different from the end intervals.','line_number':1125,'multiline':False]
['text':' It's not worth using table lookup if there are very few intervals in the','line_number':1132,'multiline':False]
['text':' character class.','line_number':1133,'multiline':False]
['text':' It is faster to test for individual characters, so we look for those','line_number':1135,'multiline':False]
['text':' first, then try arbitrary ranges in the second round.','line_number':1136,'multiline':False]
['text':' If there are a lot of intervals in the regexp, then we will use tables to','line_number':1154,'multiline':False]
['text':' determine whether the character is inside or outside the character class.','line_number':1155,'multiline':False]
['text':' We didn't find any section that started after the limit, so everything','line_number':1181,'multiline':False]
['text':' above the border is one of the terminal labels.','line_number':1182,'multiline':False]
['text':' This is a common case hit by non-anchored expressions.','line_number':1247,'multiline':False]
['text':' A new list with ascending entries.  Each entry is a code unit','line_number':1264,'multiline':False]
['text':' where there is a boundary between code units that are part of','line_number':1265,'multiline':False]
['text':' the class and code units that are not.  Normally we insert an','line_number':1266,'multiline':False]
['text':' entry at zero which goes to the failure label, but if there','line_number':1267,'multiline':False]
['text':' was already one there we fall through for success on that entry.','line_number':1268,'multiline':False]
['text':' Subsequent entries have alternating meaning (success/failure).','line_number':1269,'multiline':False]
['text':' start_index.','line_number':1292,'multiline':False]
['text':' min_char.','line_number':1294,'multiline':False]
['text':' If we are generating a greedy loop then don't stop and don't reuse code.','line_number':1305,'multiline':False]
['text':' If a generic version is already scheduled to be generated or we have','line_number':1313,'multiline':False]
['text':' recursed too deeply then just generate a jump to that code.','line_number':1314,'multiline':False]
['text':' This will queue it up for generation of a generic version if it hasn't','line_number':1316,'multiline':False]
['text':' already been queued.','line_number':1317,'multiline':False]
['text':' Generate generic version of the node and bind the label for later use.','line_number':1321,'multiline':False]
['text':' We are being asked to make a non-generic version.  Keep track of how many','line_number':1326,'multiline':False]
['text':' non-generic versions we generate so as not to overdo it.','line_number':1327,'multiline':False]
['text':' If we get here code has been generated for this node too many times or','line_number':1334,'multiline':False]
['text':' recursion is too deep.  Time to switch to a generic version.  The code for','line_number':1335,'multiline':False]
['text':' generic versions above can handle deep recursion properly.','line_number':1336,'multiline':False]
['text':' Anything may follow a positive submatch success, thus we need to accept','line_number':1352,'multiline':False]
['text':' all characters from this position onwards.','line_number':1353,'multiline':False]
['text':' Match the behaviour of EatsAtLeast on this node.','line_number':1375,'multiline':False]
['text':' Takes the left-most 1-bit and smears it out, setting all bits to its right.','line_number':1388,'multiline':False]
['text':' SET_REGISTER_FOR_LOOP is only used to initialize loop counters, and it','line_number':1422,'multiline':False]
['text':' implies that the following node must be a LoopChoiceNode. If we need to','line_number':1423,'multiline':False]
['text':' set registers to constant values for other reasons, we could introduce a','line_number':1424,'multiline':False]
['text':' new action type SET_REGISTER that doesn't imply anything about its','line_number':1425,'multiline':False]
['text':' successor.','line_number':1426,'multiline':False]
['text':' See comment in RegExpNode::EatsAtLeastFromLoopEntry.','line_number':1434,'multiline':False]
['text':' There's just loop and continue.','line_number':1439,'multiline':False]
['text':' The eats_at_least value is not used if reading backward. The','line_number':1442,'multiline':False]
['text':' EatsAtLeastPropagator should've zeroed it as well.','line_number':1443,'multiline':False]
['text':' Figure out how much the loop body itself eats, not including anything in','line_number':1449,'multiline':False]
['text':' the continuation case. In general, the nodes in the loop body should report','line_number':1450,'multiline':False]
['text':' that they eat at least the number eaten by the continuation node, since any','line_number':1451,'multiline':False]
['text':' successful match in the loop body must also include the continuation node.','line_number':1452,'multiline':False]
['text':' However, in some cases involving positive lookaround, the loop body under-','line_number':1453,'multiline':False]
['text':' reports its appetite, so use saturated math here to avoid negative numbers.','line_number':1454,'multiline':False]
['text':' Limit the number of loop iterations to avoid overflow in subsequent steps.','line_number':1460,'multiline':False]
['text':' First loop iteration eats at least one, so all subsequent iterations','line_number':1468,'multiline':False]
['text':' and the after-loop chunk are guaranteed to not be at the start.','line_number':1469,'multiline':False]
['text':' Loop body might eat nothing, so only continue node contributes.','line_number':1475,'multiline':False]
['text':' The bounds check is performed using the minimum number of characters','line_number':1504,'multiline':False]
['text':' any choice would eat, so if the bounds check fails, then none of the','line_number':1505,'multiline':False]
['text':' choices can succeed, so we can just immediately backtrack, rather','line_number':1506,'multiline':False]
['text':' than go to the next choice. The number of characters preloaded may be','line_number':1507,'multiline':False]
['text':' less than the number used for the bounds check.','line_number':1508,'multiline':False]
['text':' If number of characters preloaded is 1 then we used a byte or 16 bit','line_number':1520,'multiline':False]
['text':' load so the value is already masked down.','line_number':1521,'multiline':False]
['text':' For 2-character preloads in one-byte mode or 1-character preloads in','line_number':1526,'multiline':False]
['text':' two-byte mode we also use a 16 bit load with zero extend.','line_number':1527,'multiline':False]
['text':' Here is the meat of GetQuickCheckDetails (see also the comment on the','line_number':1555,'multiline':False]
['text':' super-class in the .h file).','line_number':1556,'multiline':False]
['text':'','line_number':1557,'multiline':False]
['text':' We iterate along the text object, building up for each character a','line_number':1558,'multiline':False]
['text':' mask and value that can be used to test for a quick failure to match.','line_number':1559,'multiline':False]
['text':' The masks and values for the positions will be combined into a single','line_number':1560,'multiline':False]
['text':' machine word for the current character width in order to be used in','line_number':1561,'multiline':False]
['text':' generating a quick check.','line_number':1562,'multiline':False]
['text':' Do not collect any quick check details if the text node reads backward,','line_number':1567,'multiline':False]
['text':' since it reads in the opposite direction than we use for quick checks.','line_number':1568,'multiline':False]
['text':' This can happen because all case variants are non-Latin1, but we','line_number':1587,'multiline':False]
['text':' know the input is Latin1.','line_number':1588,'multiline':False]
['text':' This letter has no case equivalents, so it's nice and simple','line_number':1594,'multiline':False]
['text':' and the mask-compare will determine definitely whether we have','line_number':1595,'multiline':False]
['text':' a match at this character position.','line_number':1596,'multiline':False]
['text':' If length is 2 and common bits has only one zero in it then','line_number':1608,'multiline':False]
['text':' our mask and compare instruction will determine definitely','line_number':1609,'multiline':False]
['text':' whether we have a match at this character position.  Otherwise','line_number':1610,'multiline':False]
['text':' it can only be an approximate check.','line_number':1611,'multiline':False]
['text':' Don't ignore case.  Nice simple case where the mask-compare will','line_number':1620,'multiline':False]
['text':' determine definitely whether we have a match at this character','line_number':1621,'multiline':False]
['text':' position.','line_number':1622,'multiline':False]
['text':' A quick check uses multi-character mask and compare.  There is no','line_number':1645,'multiline':False]
['text':' useful way to incorporate a negative char class into this scheme','line_number':1646,'multiline':False]
['text':' so we just conservatively create a mask and value that will always','line_number':1647,'multiline':False]
['text':' succeed.','line_number':1648,'multiline':False]
['text':' A mask and compare is only perfect if the differing bits form a','line_number':1665,'multiline':False]
['text':' number like 00011111 with one single block of trailing 1s.','line_number':1666,'multiline':False]
['text':' Here we are combining more ranges into the mask and compare','line_number':1678,'multiline':False]
['text':' value.  With each new range the mask becomes more sparse and','line_number':1679,'multiline':False]
['text':' so the chances of a false positive rise.  A character class','line_number':1680,'multiline':False]
['text':' with multiple ranges is assumed never to be equivalent to a','line_number':1681,'multiline':False]
['text':' mask and compare operation.','line_number':1682,'multiline':False]
['text':' We could change mask_ and value_ here but we would never advance unless','line_number':1733,'multiline':False]
['text':' they had already been used in a check and they won't be used again because','line_number':1734,'multiline':False]
['text':' it would gain us nothing.  So there's no point.','line_number':1735,'multiline':False]
['text':' Our mask-compare operation will be approximate unless we have the','line_number':1752,'multiline':False]
['text':' exact same operation on both sides of the alternation.','line_number':1753,'multiline':False]
['text':' Temporarily sets traversed_loop_initialization_node_.','line_number':1777,'multiline':False]
['text':' Temporarily decrements min_loop_iterations_.','line_number':1795,'multiline':False]
['text':' We need to check for the following characters: 0x39C 0x3BC 0x178.','line_number':1825,'multiline':False]
['text':' TODO(dcarney): this could be a lot more efficient.','line_number':1827,'multiline':False]
['text':' TODO(dcarney): this could be a lot more efficient.','line_number':1834,'multiline':False]
['text':' Replace quark in case we converted to Latin-1.','line_number':1856,'multiline':False]
['text':' Now they are in order so we only need to look at the first.','line_number':1865,'multiline':False]
['text':' This will be handled in a later filter.','line_number':1870,'multiline':False]
['text':' This will be handled in a later filter.','line_number':1880,'multiline':False]
['text':' If we can't continue after the loop then there is no sense in doing the','line_number':1901,'multiline':False]
['text':' loop.','line_number':1902,'multiline':False]
['text':' No missing EMPTY_MATCH_CHECK.','line_number':1930,'multiline':False]
['text':' Only some of the nodes survived the filtering.  We need to rebuild the','line_number':1943,'multiline':False]
['text':' alternatives list.','line_number':1944,'multiline':False]
['text':' Alternative 0 is the negative lookahead, alternative 1 is what comes','line_number':1964,'multiline':False]
['text':' afterwards.','line_number':1965,'multiline':False]
['text':' If the negative lookahead is always going to fail then','line_number':1973,'multiline':False]
['text':' we don't need to check it.','line_number':1974,'multiline':False]
['text':' There's just loop and continue.','line_number':1986,'multiline':False]
['text':' Loop body is guaranteed to execute at least once, and consume characters','line_number':1990,'multiline':False]
['text':' when it does, meaning the only possible quick checks from this point','line_number':1991,'multiline':False]
['text':' begin with the loop body. We may recursively visit this LoopChoiceNode,','line_number':1992,'multiline':False]
['text':' but we temporarily decrease its minimum iteration counter so we know when','line_number':1993,'multiline':False]
['text':' to check the continue case.','line_number':1994,'multiline':False]
['text':' Might not consume anything in the loop body, so treat it like a normal','line_number':1999,'multiline':False]
['text':' ChoiceNode (and don't recursively visit this node again).','line_number':2000,'multiline':False]
['text':' We already entered this loop once, exited via its continuation node, and','line_number':2011,'multiline':False]
['text':' followed an outer loop's back-edge to before the loop entry point. We','line_number':2012,'multiline':False]
['text':' could try to reset the minimum iteration count to its starting value at','line_number':2013,'multiline':False]
['text':' this point, but that seems like more trouble than it's worth. It's safe','line_number':2014,'multiline':False]
['text':' to keep going with the current (possibly reduced) minimum iteration','line_number':2015,'multiline':False]
['text':' count.','line_number':2016,'multiline':False]
['text':' We are entering a loop via its counter initialization action, meaning we','line_number':2019,'multiline':False]
['text':' are guaranteed to run the loop body at least some minimum number of times','line_number':2020,'multiline':False]
['text':' before running the continuation node. Set a flag so that this node knows','line_number':2021,'multiline':False]
['text':' (now and any times we visit it again recursively) that it was entered','line_number':2022,'multiline':False]
['text':' from the top.','line_number':2023,'multiline':False]
['text':' Here we merge the quick match details of the two branches.','line_number':2054,'multiline':False]
['text':' Check for [0-9A-Z_a-z].','line_number':2061,'multiline':False]
['text':' Optimized implementation available.','line_number':2067,'multiline':False]
['text':' Emit the code to check for a ^ in multiline mode (1-character lookbehind','line_number':2083,'multiline':False]
['text':' that matches newline or the start of input).','line_number':2084,'multiline':False]
['text':' We will load the previous character into the current character register.','line_number':2088,'multiline':False]
['text':' A positive (> 0) cp_offset means we've already successfully matched a','line_number':2092,'multiline':False]
['text':' non-empty-width part of the pattern, and thus cannot be at or before the','line_number':2093,'multiline':False]
['text':' start of the subject string. We can thus skip both at-start and','line_number':2094,'multiline':False]
['text':' bounds-checks when loading the one-character lookbehind.','line_number':2095,'multiline':False]
['text':' The start of input counts as a newline in this context, so skip to ok if','line_number':2101,'multiline':False]
['text':' we are at the start.','line_number':2102,'multiline':False]
['text':' If we've already checked that we are not at the start of input, it's okay','line_number':2106,'multiline':False]
['text':' to load the previous character without bounds checks.','line_number':2107,'multiline':False]
['text':' Newline means \n, \r, 0x2028 or 0x2029.','line_number':2112,'multiline':False]
['text':' namespace','line_number':2123,'multiline':False]
['text':' Emit the code to handle \b and \B (word-boundary or non-word-boundary).','line_number':2125,'multiline':False]
['text':' Fall through on non-word.','line_number':2154,'multiline':False]
['text':' Next character is not a word character.','line_number':2156,'multiline':False]
['text':' A positive (> 0) cp_offset means we've already successfully matched a','line_number':2186,'multiline':False]
['text':' non-empty-width part of the pattern, and thus cannot be at or before the','line_number':2187,'multiline':False]
['text':' start of the subject string. We can thus skip both at-start and','line_number':2188,'multiline':False]
['text':' bounds-checks when loading the one-character lookbehind.','line_number':2189,'multiline':False]
['text':' The start of input counts as a non-word character, so the question is','line_number':2194,'multiline':False]
['text':' decided if we are at the start.','line_number':2195,'multiline':False]
['text':' If we've already checked that we are not at the start of input, it's okay','line_number':2199,'multiline':False]
['text':' to load the previous character without bounds checks.','line_number':2200,'multiline':False]
['text':' We call this repeatedly to generate code for each pass over the text node.','line_number':2268,'multiline':False]
['text':' The passes are in increasing order of difficulty because we hope one','line_number':2269,'multiline':False]
['text':' of the first passes will fail in which case we are saved the work of the','line_number':2270,'multiline':False]
['text':' later passes.  for example for the case independent regexp /%[asdfghjkl]a/','line_number':2271,'multiline':False]
['text':' we will check the '%' in the first pass, the case independent 'a' in the','line_number':2272,'multiline':False]
['text':' second pass and the character class in the last pass.','line_number':2273,'multiline':False]
['text':'','line_number':2274,'multiline':False]
['text':' The passes are done from right to left, so for example to test for /bar/','line_number':2275,'multiline':False]
['text':' we will first test for an 'r' with offset 2, then an 'a' with offset 1','line_number':2276,'multiline':False]
['text':' and then a 'b' with offset 0.  This means we can avoid the end-of-input','line_number':2277,'multiline':False]
['text':' bounds check most of the time.  In the example we only need to check for','line_number':2278,'multiline':False]
['text':' end-of-input when loading the putative 'r'.','line_number':2279,'multiline':False]
['text':'','line_number':2280,'multiline':False]
['text':' A slight complication involves the fact that the first character may already','line_number':2281,'multiline':False]
['text':' be fetched into a register by the previous node.  In this case we want to','line_number':2282,'multiline':False]
['text':' do the test for that character first.  We do this in separate passes.  The','line_number':2283,'multiline':False]
['text':' 'preloaded' argument indicates that we are doing such a 'pass'.  If such a','line_number':2284,'multiline':False]
['text':' pass has been performed then subsequent passes will have true in','line_number':2285,'multiline':False]
['text':' first_element_checked to indicate that that character does not need to be','line_number':2286,'multiline':False]
['text':' checked again.','line_number':2287,'multiline':False]
['text':'','line_number':2288,'multiline':False]
['text':' In addition to all this we are passed a Trace, which can','line_number':2289,'multiline':False]
['text':' contain an AlternativeGeneration object.  In this AlternativeGeneration','line_number':2290,'multiline':False]
['text':' object we can see details of any quick check that was already passed in','line_number':2291,'multiline':False]
['text':' order to get to the code we are now generating.  The quick check can involve','line_number':2292,'multiline':False]
['text':' loading characters, which means we do not need to recheck the bounds','line_number':2293,'multiline':False]
['text':' up to the limit the quick check already checked.  In addition the quick','line_number':2294,'multiline':False]
['text':' check can have involved a mask and compare operation which may simplify','line_number':2295,'multiline':False]
['text':' or obviate the need for further checks at some character positions.','line_number':2296,'multiline':False]
['text':' Everywhere else we assume that a non-Latin-1 character cannot match','line_number':2318,'multiline':False]
['text':' a Latin-1 character. Avoid the cases where this is assumption is','line_number':2319,'multiline':False]
['text':' invalid by using the Latin1 equivalent instead.','line_number':2320,'multiline':False]
['text':' This generates the code to match a text node.  A text node can contain','line_number':2413,'multiline':False]
['text':' straight character sequences (possibly to be matched in a case-independent','line_number':2414,'multiline':False]
['text':' way) and character classes.  For efficiency we do not do this in a single','line_number':2415,'multiline':False]
['text':' pass from left to right.  Instead we pass over the text node several times,','line_number':2416,'multiline':False]
['text':' emitting code for some character positions every time.  See the comment on','line_number':2417,'multiline':False]
['text':' TextEmitPass for details.','line_number':2418,'multiline':False]
['text':' If a character is preloaded into the current character register then','line_number':2438,'multiline':False]
['text':' check that now.','line_number':2439,'multiline':False]
['text':' If we advance backward, we may end up at the start.','line_number':2454,'multiline':False]
['text':' We don't have an instruction for shifting the current character register','line_number':2466,'multiline':False]
['text':' down or for using a shifted value for anything so lets just forget that','line_number':2467,'multiline':False]
['text':' we preloaded any characters into it.','line_number':2468,'multiline':False]
['text':' Adjust the offsets of the quick check performed information.  This','line_number':2470,'multiline':False]
['text':' information is used to find out what we already determined about the','line_number':2471,'multiline':False]
['text':' characters by means of mask and compare.','line_number':2472,'multiline':False]
['text':' None of the standard character classes is different in the case','line_number':2495,'multiline':False]
['text':' independent case and it slows us down if we don't know that.','line_number':2496,'multiline':False]
['text':' Finds the fixed match length of a sequence of nodes that goes from','line_number':2525,'multiline':False]
['text':' this alternative and back to this choice node.  If there are variable','line_number':2526,'multiline':False]
['text':' length nodes or other complications in the way then return a sentinel','line_number':2527,'multiline':False]
['text':' value indicating that a greedy loop cannot be constructed.','line_number':2528,'multiline':False]
['text':' Later we will generate code for all these text nodes using recursion','line_number':2533,'multiline':False]
['text':' so we have to limit the max number.','line_number':2534,'multiline':False]
['text':' Check that we can jump by the whole text length. If not, return sentinel','line_number':2551,'multiline':False]
['text':' to indicate the we can't construct a greedy loop.','line_number':2552,'multiline':False]
['text':' Back edge of greedy optimized loop node graph.','line_number':2575,'multiline':False]
['text':' Update the counter-based backtracking info on the stack.  This is an','line_number':2579,'multiline':False]
['text':' optimization for greedy loops (see below).','line_number':2580,'multiline':False]
['text':' We can't preload 3 characters because there is no machine instruction','line_number':2601,'multiline':False]
['text':' to do that.  We can't just load 4 because we could be reading','line_number':2602,'multiline':False]
['text':' beyond the end of the string, which could cause a memory fault.','line_number':2603,'multiline':False]
['text':' This class is used when generating the alternatives in a choice node.  It','line_number':2614,'multiline':False]
['text':' records the way the alternative is being code generated.','line_number':2615,'multiline':False]
['text':' Creates a list of AlternativeGenerations.  If the list has a reasonable','line_number':2629,'multiline':False]
['text':' size then it is on the stack, otherwise the excess is on the heap.','line_number':2630,'multiline':False]
['text':' Consider the range from last to ranges[i].','line_number':2670,'multiline':False]
['text':' We haven't got to the new range yet.','line_number':2671,'multiline':False]
['text':' New range is wholly inside last-ranges[i].  Note that new_range.to() is','line_number':2673,'multiline':False]
['text':' inclusive, but the values in ranges are not.','line_number':2674,'multiline':False]
['text':' Slight fiddling is needed here, since the bitset is of length 128 while','line_number':2687,'multiline':False]
['text':' CountTrailingZeros requires an integral type and std::bitset can only','line_number':2688,'multiline':False]
['text':' convert to unsigned long long. So we handle the most- and least-significant','line_number':2689,'multiline':False]
['text':' bits separately.','line_number':2690,'multiline':False]
['text':' namespace','line_number':2709,'multiline':False]
['text':' Find the longest range of lookahead that has the fewest number of different','line_number':2749,'multiline':False]
['text':' characters that can occur at a given position.  Since we are optimizing two','line_number':2750,'multiline':False]
['text':' different parameters at once this is a tradeoff.','line_number':2751,'multiline':False]
['text':' If more than 32 characters out of 128 can occur it is unlikely that we can','line_number':2754,'multiline':False]
['text':' be lucky enough to step forwards much of the time.','line_number':2755,'multiline':False]
['text':' Find the highest-points range between 0 and length_ where the character','line_number':2766,'multiline':False]
['text':' information is not too vague.  'Too vague' means that there are more than','line_number':2767,'multiline':False]
['text':' max_number_of_chars that can occur at this position.  Calculates the number','line_number':2768,'multiline':False]
['text':' of points as the product of width-of-the-range and','line_number':2769,'multiline':False]
['text':' probability-of-finding-one-of-the-characters, where the probability is','line_number':2770,'multiline':False]
['text':' calculated using the frequency distribution of the sample subject string.','line_number':2771,'multiline':False]
['text':' Iterate only over set bits.','line_number':2789,'multiline':False]
['text':' Sanity check.','line_number':2792,'multiline':False]
['text':' Add 1 to the frequency to give a small per-character boost for','line_number':2793,'multiline':False]
['text':' the cases where our sampling is not good enough and many','line_number':2794,'multiline':False]
['text':' characters have a frequency of zero.  This means the frequency','line_number':2795,'multiline':False]
['text':' can theoretically be up to 2*kSize though we treat it mostly as','line_number':2796,'multiline':False]
['text':' a fraction of kSize.','line_number':2797,'multiline':False]
['text':' We use the probability of skipping times the distance we are skipping to','line_number':2802,'multiline':False]
['text':' judge the effectiveness of this.  Actually we have a cut-off:  By','line_number':2803,'multiline':False]
['text':' dividing by 2 we switch off the skipping if the probability of skipping','line_number':2804,'multiline':False]
['text':' is less than 50%.  This is because the multibyte mask-and-compare','line_number':2805,'multiline':False]
['text':' skipping in quickcheck is more likely to do well on this case.','line_number':2806,'multiline':False]
['text':' Called 'probability' but it is only a rough estimate and can actually','line_number':2810,'multiline':False]
['text':' be outside the 0-kSize range.','line_number':2811,'multiline':False]
['text':' Take all the characters that will not prevent a successful match if they','line_number':2823,'multiline':False]
['text':' occur in the subject string in the range between min_lookahead and','line_number':2824,'multiline':False]
['text':' max_lookahead (inclusive) measured from the current position.  If the','line_number':2825,'multiline':False]
['text':' character at max_lookahead offset is not one of these characters, then we','line_number':2826,'multiline':False]
['text':' can safely skip forwards by the number of characters in the range.','line_number':2827,'multiline':False]
['text':' Iterate only over set bits.','line_number':2839,'multiline':False]
['text':' Sanity check.','line_number':2842,'multiline':False]
['text':' See comment above on the implementation of GetSkipTable.','line_number':2852,'multiline':False]
['text':' Check if we only have a single non-empty position info, and that info','line_number':2861,'multiline':False]
['text':' contains precisely one character.','line_number':2862,'multiline':False]
['text':' The mask-compare can probably handle this better.','line_number':2886,'multiline':False]
['text':' Code generation for choice nodes.
 *
 * We generate quick checks that do a mask and compare to eliminate a
 * choice.  If the quick check succeeds then it jumps to the continuation to
 * do slow checks and check subsequent nodes.  If it fails (the common case)
 * it falls through to the next choice.
 *
 * Here is the desired flow graph.  Nodes directly below each other imply
 * fallthrough.  Alternatives 1 and 2 have quick checks.  Alternative
 * 3 doesn't have a quick check so we have to call the slow check.
 * Nodes are marked Qn for quick checks and Sn for slow checks.  The entire
 * regexp continuation is generated directly after the Sn node, up to the
 * next GoTo if we decide to reuse some already generated code.  Some
 * nodes expect preload_characters to be preloaded into the current
 * character register.  R nodes do this preloading.  Vertices are marked
 * F for failures and S for success (possible success in the case of quick
 * nodes).  L, V, < and > are used as arrow heads.
 *
 * ----------> R
 *             |
 *             V
 *            Q1 -----> S1
 *             |   S   /
 *            F|      /
 *             |    F/
 *             |    /
 *             |   R
 *             |  /
 *             V L
 *            Q2 -----> S2
 *             |   S   /
 *            F|      /
 *             |    F/
 *             |    /
 *             |   R
 *             |  /
 *             V L
 *            S3
 *             |
 *            F|
 *             |
 *             R
 *             |
 * backtrack   V
 * <----------Q4
 *   \    F    |
 *    \        |S
 *     \   F   V
 *      \-----S4
 *
 * For greedy loops we push the current position, then generate the code that
 * eats the input specially in EmitGreedyLoop.  The other choice (the
 * continuation) is generated by the normal code in EmitChoices, and steps back
 * in the input to the starting position when it fails to match.  The loop code
 * looks like this (U is the unwind code that steps back in the greedy loop).
 *
 *              _____
 *             /     \
 *             V     |
 * ----------> S1    |
 *            /|     |
 *           / |S    |
 *         F/  \_____/
 *         /
 *        |<-----
 *        |      \
 *        V       |S
 *        Q2 ---> U----->backtrack
 *        |  F   /
 *       S|     /
 *        V  F /
 *        S2--/
 ','line_number':2922,'multiline':True]
['text':' Save some time by looking at most one machine word ahead.','line_number':3018,'multiline':False]
['text':' For loop nodes we already flushed (see LoopChoiceNode::Emit), but for','line_number':3044,'multiline':False]
['text':' other choice nodes we only flush if we are out of code size budget.','line_number':3045,'multiline':False]
['text':' TODO(erikcorry): Delete this.  We don't need this label, but it makes us','line_number':3064,'multiline':False]
['text':' match the traces produced pre-cleanup.','line_number':3065,'multiline':False]
['text':' At this point we need to generate slow checks for the alternatives where','line_number':3074,'multiline':False]
['text':' the quick check was inlined.  We can recognize these because the associated','line_number':3075,'multiline':False]
['text':' label was bound.','line_number':3076,'multiline':False]
['text':' If there are actions to be flushed we have to limit how many times','line_number':3081,'multiline':False]
['text':' they are flushed.  Take the budget of the parent trace and distribute','line_number':3082,'multiline':False]
['text':' it fairly amongst the children.','line_number':3083,'multiline':False]
['text':' Here we have special handling for greedy loops containing only text nodes','line_number':3101,'multiline':False]
['text':' and other simple nodes.  These are handled by pushing the current','line_number':3102,'multiline':False]
['text':' position on the stack and then incrementing the current position each','line_number':3103,'multiline':False]
['text':' time around the switch.  On backtrack we decrement the current position','line_number':3104,'multiline':False]
['text':' and check it against the pushed value.  This avoids pushing backtrack','line_number':3105,'multiline':False]
['text':' information for each iteration of the loop, which could take up a lot of','line_number':3106,'multiline':False]
['text':' space.','line_number':3107,'multiline':False]
['text':' For use in greedy matches.','line_number':3121,'multiline':False]
['text':' If we have unwound to the bottom then backtrack.','line_number':3129,'multiline':False]
['text':' Otherwise try the second priority at an earlier position.','line_number':3131,'multiline':False]
['text':' Really we should be creating a new trace when we execute this function,','line_number':3151,'multiline':False]
['text':' but there is no need, because the code it generates cannot backtrack, and','line_number':3152,'multiline':False]
['text':' we always arrive here with a trivial trace (since it's the entry to a','line_number':3153,'multiline':False]
['text':' loop.  That also implies that there are no preloaded characters, which is','line_number':3154,'multiline':False]
['text':' good, because it means we won't be violating any assumptions by','line_number':3155,'multiline':False]
['text':' overwriting those characters with new load instructions.','line_number':3156,'multiline':False]
['text':' At this point we know that we are at a non-greedy loop that will eat','line_number':3161,'multiline':False]
['text':' any character one at a time.  Any non-anchored regexp has such a','line_number':3162,'multiline':False]
['text':' loop prepended to it in order to find where it starts.  We look for','line_number':3163,'multiline':False]
['text':' a pattern of the form ...abc... where we can look 6 characters ahead','line_number':3164,'multiline':False]
['text':' and step forwards 3 if the character is not one of abc.  Abc need','line_number':3165,'multiline':False]
['text':' not be atoms, they can be any reasonably limited character class or','line_number':3166,'multiline':False]
['text':' small alternation.','line_number':3167,'multiline':False]
['text':' For now we just call all choices one after the other.  The idea ultimately','line_number':3190,'multiline':False]
['text':' is to use the Dispatch table to try only the relevant ones.','line_number':3191,'multiline':False]
['text':' Quick check was generated for this choice.','line_number':3223,'multiline':False]
['text':' If we generated the quick check to fall through on possible success,','line_number':3226,'multiline':False]
['text':' we now need to generate the full check inline.','line_number':3227,'multiline':False]
['text':' No quick check was generated.  Put the full code here.','line_number':3241,'multiline':False]
['text':' If this is not the first choice then there could be slow checks from','line_number':3242,'multiline':False]
['text':' previous cases that go here when they fail.  There's no reason to','line_number':3243,'multiline':False]
['text':' insist that they preload characters since the slow check we are about','line_number':3244,'multiline':False]
['text':' to generate probably can't use it.','line_number':3245,'multiline':False]
['text':' Reload the current character, since the next quick check expects that.','line_number':3290,'multiline':False]
['text':' We don't need to check bounds here because we only get into this','line_number':3291,'multiline':False]
['text':' code through a quick check which already did the checked load.','line_number':3292,'multiline':False]
['text':' If we know we haven't advanced and there is no minimum we','line_number':3366,'multiline':False]
['text':' can just backtrack immediately.','line_number':3367,'multiline':False]
['text':' If we know we've advanced we can generate the continuation','line_number':3370,'multiline':False]
['text':' immediately.','line_number':3371,'multiline':False]
['text':' If we have a minimum number of repetitions we check the current','line_number':3377,'multiline':False]
['text':' number first and skip the empty check if it's not enough.','line_number':3378,'multiline':False]
['text':' If the match is empty we bail out, otherwise we fall through','line_number':3383,'multiline':False]
['text':' to the on-success continuation.','line_number':3384,'multiline':False]
['text':' We are going to advance backward, so we may end up at the start.','line_number':3447,'multiline':False]
['text':' Check that the back reference does not end inside a surrogate pair.','line_number':3450,'multiline':False]
['text':' Set up the offsets of the elements relative to the start.  This is a fixed','line_number':3459,'multiline':False]
['text':' quantity since a TextNode can only contain fixed-width things.','line_number':3460,'multiline':False]
['text':' Assertion propagation moves information about assertions such as','line_number':3471,'multiline':False]
['text':' \b to the affected nodes.  For instance, in /.\b./ information must','line_number':3472,'multiline':False]
['text':' be propagated to the first '.' that whatever follows needs to know','line_number':3473,'multiline':False]
['text':' if it matched a word or a non-word, and to the second '.' that it','line_number':3474,'multiline':False]
['text':' has to check if it succeeds a word or non-word.  In this case the','line_number':3475,'multiline':False]
['text':' result will be something like:','line_number':3476,'multiline':False]
['text':'','line_number':3477,'multiline':False]
['text':'   +-------+        +------------+','line_number':3478,'multiline':False]
['text':'   |   .   |        |      .     |','line_number':3479,'multiline':False]
['text':'   +-------+  --->  +------------+','line_number':3480,'multiline':False]
['text':'   | word? |        | check word |','line_number':3481,'multiline':False]
['text':'   +-------+        +------------+','line_number':3482,'multiline':False]
['text':' If the next node is interested in what it follows then this node','line_number':3488,'multiline':False]
['text':' has to be interested too so it can pass the information on.','line_number':3489,'multiline':False]
['text':' Anything the following nodes need to know has to be known by','line_number':3494,'multiline':False]
['text':' this node also, so it can pass it on.','line_number':3495,'multiline':False]
['text':' Propagates information about the minimum size of successful matches from','line_number':3522,'multiline':False]
['text':' successor nodes to their predecessors. Note that all eats_at_least values','line_number':3523,'multiline':False]
['text':' are initialized to zero before analysis.','line_number':3524,'multiline':False]
['text':' The eats_at_least value is not used if reading backward.','line_number':3528,'multiline':False]
['text':' We are not at the start after this node, and thus we can use the','line_number':3530,'multiline':False]
['text':' successor's eats_at_least_from_not_start value.','line_number':3531,'multiline':False]
['text':' We do not propagate eats_at_least data through positive lookarounds,','line_number':3544,'multiline':False]
['text':' because they rewind input.','line_number':3545,'multiline':False]
['text':' TODO(v8:11859) Potential approaches for fixing this include:','line_number':3546,'multiline':False]
['text':' 1. Add a dedicated choice node for positive lookaround, similar to','line_number':3547,'multiline':False]
['text':'    NegativeLookaroundChoiceNode.','line_number':3548,'multiline':False]
['text':' 2. Add an eats_at_least_inside_loop field to EatsAtLeastInfo, which','line_number':3549,'multiline':False]
['text':'    is <= eats_at_least_from_possibly_start, and use that value in','line_number':3550,'multiline':False]
['text':'    EatsAtLeastFromLoopEntry.','line_number':3551,'multiline':False]
['text':' SET_REGISTER_FOR_LOOP indicates a loop entry point, which means the','line_number':3555,'multiline':False]
['text':' loop body will run at least the minimum number of times before the','line_number':3556,'multiline':False]
['text':' continuation case can run.','line_number':3557,'multiline':False]
['text':' Otherwise, the current node eats at least as much as its successor.','line_number':3563,'multiline':False]
['text':' Note: we can propagate eats_at_least data for BEGIN_NEGATIVE_SUBMATCH','line_number':3564,'multiline':False]
['text':' because NegativeLookaroundChoiceNode ignores its lookaround successor','line_number':3565,'multiline':False]
['text':' when computing eats-at-least and quick check information.','line_number':3566,'multiline':False]
['text':' The minimum possible match from a choice node is the minimum of its','line_number':3573,'multiline':False]
['text':' successors.','line_number':3574,'multiline':False]
['text':' If we know we are not at the start and we are asked "how many','line_number':3608,'multiline':False]
['text':' characters will you match if you succeed?" then we can answer anything','line_number':3609,'multiline':False]
['text':' since false implies false.  So let's just set the max answer','line_number':3610,'multiline':False]
['text':' (UINT8_MAX) since that won't prevent us from preloading a lot of','line_number':3611,'multiline':False]
['text':' characters for the other branches in the node graph.','line_number':3612,'multiline':False]
['text':' namespace','line_number':3619,'multiline':False]
['text':' -------------------------------------------------------------------','line_number':3621,'multiline':False]
['text':' Analysis','line_number':3622,'multiline':False]
['text':' Iterates the node graph and provides the opportunity for propagators to set','line_number':3624,'multiline':False]
['text':' values that depend on successor nodes.','line_number':3625,'multiline':False]
['text':' nothing to do','line_number':3660,'multiline':False]
['text':' Used to call the given static function on each propagator / variadic template','line_number':3663,'multiline':False]
['text':' argument.','line_number':3664,'multiline':False]
['text':' Just loop and continue.','line_number':3694,'multiline':False]
['text':' First propagate all information from the continuation node.','line_number':3696,'multiline':False]
['text':' Check the loop last since it may need the value of this node','line_number':3701,'multiline':False]
['text':' to get a correct result.','line_number':3702,'multiline':False]
['text':' Lookaround and continue.','line_number':3710,'multiline':False]
['text':' Working out the set of characters that a backreference can match is too','line_number':3758,'multiline':False]
['text':' hard, so we just say that any character can match.','line_number':3759,'multiline':False]
['text':' Give up trying to fill in info.','line_number':3774,'multiline':False]
['text':' Not at start after a text node.','line_number':3836,'multiline':False]
['text':' Wrap the body of the regexp in capture #0.','line_number':3869,'multiline':False]
['text':' Add a .*? at the beginning, outside the body capture, unless','line_number':3874,'multiline':False]
['text':' this expression is anchored at the beginning or sticky.','line_number':3875,'multiline':False]
['text':' Unroll loop once, to take care of the case that might start','line_number':3883,'multiline':False]
['text':' at the start of input.','line_number':3884,'multiline':False]
['text':' Do it again to propagate the new nodes to places where they were not','line_number':3897,'multiline':False]
['text':' put because they had not been calculated yet.','line_number':3898,'multiline':False]
['text':' namespace internal','line_number':3910,'multiline':False]
['text':' namespace v8','line_number':3911,'multiline':False]
