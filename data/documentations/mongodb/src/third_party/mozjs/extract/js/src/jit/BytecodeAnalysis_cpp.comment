['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Clear all BytecodeInfo.','line_number':31,'multiline':False]
['text':'stackDepth=','line_number':33,'multiline':True]
['text':' Because WarpBuilder can compile try-blocks but doesn't compile the','line_number':35,'multiline':False]
['text':' catch-body, we need some special machinery to prevent OSR into Warp code in','line_number':36,'multiline':False]
['text':' the following cases:','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' (1) Loops in catch/finally blocks:','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':'       try {','line_number':41,'multiline':False]
['text':'         ..','line_number':42,'multiline':False]
['text':'       } catch (e) {','line_number':43,'multiline':False]
['text':'         while (..) {} // Can't OSR here.','line_number':44,'multiline':False]
['text':'       }','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' (2) Loops only reachable via a catch/finally block:','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'       for (;;) {','line_number':49,'multiline':False]
['text':'         try {','line_number':50,'multiline':False]
['text':'           throw 3;','line_number':51,'multiline':False]
['text':'         } catch (e) {','line_number':52,'multiline':False]
['text':'           break;','line_number':53,'multiline':False]
['text':'         }','line_number':54,'multiline':False]
['text':'       }','line_number':55,'multiline':False]
['text':'       while (..) {} // Loop is only reachable via the catch-block.','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':' To deal with both of these cases, we track whether the current op is','line_number':58,'multiline':False]
['text':' 'normally reachable' (reachable without going through a catch/finally','line_number':59,'multiline':False]
['text':' block). Forward jumps propagate this flag to their jump targets (see','line_number':60,'multiline':False]
['text':' BytecodeInfo::jumpTargetNormallyReachable) and when the analysis reaches a','line_number':61,'multiline':False]
['text':' jump target it updates its normallyReachable flag based on the target's','line_number':62,'multiline':False]
['text':' flag.','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':' Inlining a function without a normally reachable return can cause similar','line_number':65,'multiline':False]
['text':' problems. To avoid this, we mark such functions as uninlineable.','line_number':66,'multiline':False]
['text':' If this bytecode info has not yet been initialized, it's not reachable.','line_number':79,'multiline':False]
['text':' If stack depth exceeds max allowed by analysis, fail fast.','line_number':104,'multiline':False]
['text':' normallyReachable = ','line_number':136,'multiline':True]
['text':' Sanity check: ops only emitted in catch/finally blocks are never','line_number':149,'multiline':False]
['text':' normally reachable.','line_number':150,'multiline':False]
['text':' Case instructions do not push the lvalue back when branching.','line_number':168,'multiline':False]
['text':' If this is a backedge, the target JSOp::LoopHead must have been','line_number':177,'multiline':False]
['text':' analyzed already. Furthermore, if the backedge is normally reachable,','line_number':178,'multiline':False]
['text':' the loop head must be normally reachable too (loopHeadCanOsr can be','line_number':179,'multiline':False]
['text':' used to check this since it's equivalent).','line_number':180,'multiline':False]
['text':' Gosub's target is a finally-block => not normally reachable.','line_number':189,'multiline':False]
['text':' Handle any fallthrough from this opcode.','line_number':194,'multiline':False]
['text':' Treat the fallthrough of a branch instruction as a jump target.','line_number':202,'multiline':False]
['text':' Gosub falls through after executing a finally-block => not normally','line_number':204,'multiline':False]
['text':' reachable.','line_number':205,'multiline':False]
['text':' Flag (reachable) resume offset instructions.','line_number':212,'multiline':False]
