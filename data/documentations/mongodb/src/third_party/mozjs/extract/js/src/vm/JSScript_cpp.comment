['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS script operations.
 ','line_number':7,'multiline':True]
['text':' mozilla::{Span,Span}','line_number':20,'multiline':False]
['text':' frontend::CompilationStencil','line_number':36,'multiline':False]
['text':' SrcNote, SrcNoteType, SrcNoteIterator','line_number':38,'multiline':False]
['text':' frontend::StencilXdr::SharedData, CanCopyDataToDisk','line_number':39,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':50,'multiline':False]
['text':' js::FunctionFlags','line_number':67,'multiline':False]
['text':' js::RunPendingSourceCompressions','line_number':68,'multiline':False]
['text':' js::PlainObject','line_number':74,'multiline':False]
['text':' js::WarnNumberLatin1','line_number':78,'multiline':False]
['text':' Fail in debug, but only soft-fail in release','line_number':240,'multiline':False]
['text':' Code lazy scripts's closed over bindings.','line_number':253,'multiline':False]
['text':' static ','line_number':255,'multiline':True]
['text':' This is default so nothing to do.','line_number':312,'multiline':False]
['text':' Fail in debug, but only soft-fail in release','line_number':318,'multiline':False]
['text':' Code the nested function's enclosing scope. ','line_number':380,'multiline':True]
['text':' Code nested function and script.','line_number':404,'multiline':False]
['text':' Code object literal. ','line_number':419,'multiline':True]
['text':' Fail in debug, but only soft-fail in release','line_number':432,'multiline':False]
['text':' The enclosingScope is encoded using an integer index into the scope array.','line_number':454,'multiline':False]
['text':' This means that scopes must be topologically sorted.','line_number':455,'multiline':False]
['text':' Fail in debug, but only soft-fail in release','line_number':524,'multiline':False]
['text':' Fail in debug, but only soft-fail in release.','line_number':596,'multiline':False]
['text':' Scripts with bytecode may have optional data stored in per-runtime or','line_number':626,'multiline':False]
['text':' per-zone maps. Note that a failed compilation must not have entries since','line_number':627,'multiline':False]
['text':' the script itself will not be marked as having bytecode.','line_number':628,'multiline':False]
['text':' Note: we should only get here if the VTune JIT profiler is running.','line_number':643,'multiline':False]
['text':' We don't need to triger any barriers here, just free the memory.','line_number':663,'multiline':False]
['text':' When disconnecting script data from the BaseScript, we must pre-barrier','line_number':683,'multiline':False]
['text':' all edges contained in it. Those edges are no longer reachable from','line_number':684,'multiline':False]
['text':' current location in the graph.','line_number':685,'multiline':False]
['text':' Only functions have parameters.','line_number':738,'multiline':False]
['text':' static ','line_number':792,'multiline':True]
['text':' Code the field initializer data.','line_number':818,'multiline':False]
['text':' Verify marker to detect data corruption after decoding GC things. A','line_number':837,'multiline':False]
['text':' mismatch here indicates we will almost certainly crash in release.','line_number':838,'multiline':False]
['text':' Initialize the optional arrays in the trailing allocation. This is a set of','line_number':844,'multiline':False]
['text':' offsets that delimit each optional array followed by the arrays themselves.','line_number':845,'multiline':False]
['text':' See comment before 'ImmutableScriptData' for more details.','line_number':846,'multiline':False]
['text':' The byte arrays must have already been padded.','line_number':853,'multiline':False]
['text':' Each non-empty optional array needs will need an offset to its end.','line_number':857,'multiline':False]
['text':' Default-initialize the optional-offsets.','line_number':862,'multiline':False]
['text':' Offset between optional-offsets table and the optional arrays. This is','line_number':866,'multiline':False]
['text':' later used to access the optional-offsets table as well as first optional','line_number':867,'multiline':False]
['text':' array.','line_number':868,'multiline':False]
['text':' Each optional array that follows must store an end-offset in the offset','line_number':871,'multiline':False]
['text':' table. Assign table entries by using this 'offsetIndex'. The index 0 is','line_number':872,'multiline':False]
['text':' reserved for implicit value 'optArrayOffset'.','line_number':873,'multiline':False]
['text':' Default-initialize optional 'resumeOffsets'.','line_number':876,'multiline':False]
['text':' Default-initialize optional 'scopeNotes'.','line_number':885,'multiline':False]
['text':' Default-initialize optional 'tryNotes'','line_number':894,'multiline':False]
['text':' Variable-length data begins immediately after ImmutableScriptData itself.','line_number':913,'multiline':False]
['text':' The following arrays are byte-aligned with additional padding to ensure','line_number':916,'multiline':False]
['text':' that together they maintain uint32_t-alignment.','line_number':917,'multiline':False]
['text':' Zero-initialize 'flags'','line_number':921,'multiline':False]
['text':' Initialization for remaining arrays.','line_number':935,'multiline':False]
['text':' Check that we correctly recompute the expected values.','line_number':938,'multiline':False]
['text':' Sanity check','line_number':942,'multiline':False]
['text':' static ','line_number':1017,'multiline':True]
['text':' static ','line_number':1021,'multiline':True]
['text':' Check if flags matches to compile options for flags set by','line_number':1045,'multiline':False]
['text':' FillImmutableFlagsFromCompileOptionsForTopLevel above.','line_number':1046,'multiline':False]
['text':'','line_number':1047,'multiline':False]
['text':' If isMultiDecode is true, this check minimal set of CompileOptions that is','line_number':1048,'multiline':False]
['text':' shared across multiple scripts in JS::DecodeMultiOffThreadScripts.','line_number':1049,'multiline':False]
['text':' Other options should be checked when getting the decoded script from the','line_number':1050,'multiline':False]
['text':' cache.','line_number':1051,'multiline':False]
['text':' NB: Keep this in sync with CopyScriptImpl. ','line_number':1080,'multiline':True]
['text':' NOTE: |mutableFlags| are not preserved by XDR.','line_number':1092,'multiline':False]
['text':' Preserve the MutableFlags::AllowRelazify flag.','line_number':1107,'multiline':False]
['text':' When loading from the bytecode cache, and if we get the CompileOptions','line_number':1129,'multiline':False]
['text':' from the document, if the ImmutableFlags and options don't agree, we','line_number':1130,'multiline':False]
['text':' should fail. This only applies to the top-level and not its inner','line_number':1131,'multiline':False]
['text':' functions.','line_number':1132,'multiline':False]
['text':'','line_number':1133,'multiline':False]
['text':' Also, JS::DecodeMultiOffThreadScripts uses single CompileOptions for','line_number':1134,'multiline':False]
['text':' multiple scripts with different CompileOptions.','line_number':1135,'multiline':False]
['text':' We should check minimal set of common flags here, and let the consumer','line_number':1136,'multiline':False]
['text':' check the full flags when getting from the cache.','line_number':1137,'multiline':False]
['text':' We are relying on the script's ScriptSource so the caller should not','line_number':1151,'multiline':False]
['text':' have passed in an explicit one.','line_number':1152,'multiline':False]
['text':' When the ScriptSourceObjectOut is provided by ParseTask, it','line_number':1169,'multiline':False]
['text':' is stored in a location which is traced by the GC.','line_number':1170,'multiline':False]
['text':' While encoding, the ScriptSource passed in must match the ScriptSource','line_number':1178,'multiline':False]
['text':' of the script.','line_number':1179,'multiline':False]
['text':' Set the script in its function now so that inner scripts to be','line_number':1196,'multiline':False]
['text':' decoded may iterate the static scope chain.','line_number':1197,'multiline':False]
['text':' If XDR operation fails, we must call BaseScript::freeSharedData in order to','line_number':1203,'multiline':False]
['text':' neuter the script. Various things that iterate raw scripts in a GC arena','line_number':1204,'multiline':False]
['text':' use the presense of this data to detect if initialization is complete.','line_number':1205,'multiline':False]
['text':' NOTE: The script data is rooted by the script.','line_number':1212,'multiline':False]
['text':' see BytecodeEmitter::tellDebuggerAboutCompiledScript ','line_number':1230,'multiline':True]
['text':' Set the enclosing scope of the lazy function. This value should only be','line_number':1283,'multiline':False]
['text':' set if we have a non-lazy enclosing script at this point.','line_number':1284,'multiline':False]
['text':' BaseScript::enclosingScriptHasEverBeenCompiled relies on the enclosing','line_number':1285,'multiline':False]
['text':' scope being non-null if we have ever been nested inside non-lazy','line_number':1286,'multiline':False]
['text':' function.','line_number':1287,'multiline':False]
['text':' Record all pc which are the first instruction of a basic block.','line_number':1312,'multiline':False]
['text':' Initialize all PCCounts counters to 0.','line_number':1326,'multiline':False]
['text':' Create zone's scriptCountsMap if necessary.','line_number':1337,'multiline':False]
['text':' Allocate the ScriptCounts.','line_number':1347,'multiline':False]
['text':' Register the current ScriptCounts in the zone's map.','line_number':1356,'multiline':False]
['text':' safe to set this;  we can't fail after this point.','line_number':1362,'multiline':False]
['text':' Enable interrupts in any interpreter frames running on this script. This','line_number':1365,'multiline':False]
['text':' is used to let the interpreter increment the PCCounts, if present.','line_number':1366,'multiline':False]
['text':' Clear the private value, calling the release hook if necessary.','line_number':1571,'multiline':False]
['text':' addProperty','line_number':1576,'multiline':False]
['text':' delProperty','line_number':1577,'multiline':False]
['text':' enumerate','line_number':1578,'multiline':False]
['text':' newEnumerate','line_number':1579,'multiline':False]
['text':' resolve','line_number':1580,'multiline':False]
['text':' mayResolve','line_number':1581,'multiline':False]
['text':' finalize','line_number':1582,'multiline':False]
['text':' call','line_number':1583,'multiline':False]
['text':' hasInstance','line_number':1584,'multiline':False]
['text':' construct','line_number':1585,'multiline':False]
['text':' trace','line_number':1586,'multiline':False]
['text':' The matching decref is in ScriptSourceObject::finalize.','line_number':1603,'multiline':False]
['text':' The slots below should either be populated by a call to initFromOptions or,','line_number':1612,'multiline':False]
['text':' if this is a non-canonical ScriptSourceObject, they are unused. Poison','line_number':1613,'multiline':False]
['text':' them.','line_number':1614,'multiline':False]
['text':' When parsing off-thread we want to do filename validation on the main','line_number':1648,'multiline':False]
['text':' thread. This makes off-thread parsing more pure and is simpler because we','line_number':1649,'multiline':False]
['text':' can't easily throw exceptions off-thread.','line_number':1650,'multiline':False]
['text':' static ','line_number':1677,'multiline':True]
['text':' Initialize the element attribute slot and introduction script slot','line_number':1696,'multiline':False]
['text':' this marks the SSO as initialized for asserts.','line_number':1697,'multiline':False]
['text':' static ','line_number':1710,'multiline':True]
['text':' Update the private value, calling addRef/release hooks if necessary','line_number':1730,'multiline':False]
['text':' to allow the embedding to maintain a reference count for the','line_number':1731,'multiline':False]
['text':' private data.','line_number':1732,'multiline':False]
['text':' The first argument is just for overloading -- its value doesn't matter.','line_number':1783,'multiline':False]
['text':' static ','line_number':1841,'multiline':True]
['text':' static ','line_number':1846,'multiline':True]
['text':' Compression treats input and output memory as plain ol' bytes. These','line_number':1958,'multiline':False]
['text':' reinterpret_cast<>s accord exactly with that.','line_number':1959,'multiline':False]
['text':' There might not be a conversion to compressed source happening at all.','line_number':1993,'multiline':False]
['text':' Determine first/last chunks, the offset (in bytes) into the first chunk','line_number':2043,'multiline':False]
['text':' of the requested units, and the number of bytes in the last chunk.','line_number':2044,'multiline':False]
['text':'','line_number':2045,'multiline':False]
['text':' Note that first and last chunk sizes are miscomputed and *must not be','line_number':2046,'multiline':False]
['text':' used* when the first chunk is the last chunk.','line_number':2047,'multiline':False]
['text':' Directly return units within a single chunk.  UncompressedSourceCache','line_number':2059,'multiline':False]
['text':' and |holder| will hold the units alive past function return.','line_number':2060,'multiline':False]
['text':' Otherwise the units span multiple chunks.  Copy successive chunks'','line_number':2070,'multiline':False]
['text':' decompressed units into freshly-allocated memory to return.','line_number':2071,'multiline':False]
['text':' |AutoHoldEntry| is single-shot, and a holder successfully filled in','line_number':2081,'multiline':False]
['text':' by |chunkUnits| must be destroyed before another can be used.  Thus','line_number':2082,'multiline':False]
['text':' we can't use |holder| with |chunkUnits| when |chunkUnits| is used','line_number':2083,'multiline':False]
['text':' with multiple chunks, and we must use and destroy distinct, fresh','line_number':2084,'multiline':False]
['text':' holders for each chunk.','line_number':2085,'multiline':False]
['text':' Transfer ownership to |holder|.','line_number':2118,'multiline':False]
['text':' UTF-8 source text.','line_number':2152,'multiline':False]
['text':' UTF-16 source text.','line_number':2163,'multiline':False]
['text':' UTF-8 source text.','line_number':2182,'multiline':False]
['text':' There doesn't appear to be a non-deflating UTF-8 string creation','line_number':2191,'multiline':False]
['text':' function -- but then again, it's not entirely clear how current','line_number':2192,'multiline':False]
['text':' callers benefit from non-deflation.','line_number':2193,'multiline':False]
['text':' UTF-16 source text.','line_number':2197,'multiline':False]
['text':' If we don't have concurrent execution compression will contend with','line_number':2282,'multiline':False]
['text':' main-thread execution, in which case we disable. Similarly we don't want to','line_number':2283,'multiline':False]
['text':' block the thread pool if it is too small.','line_number':2284,'multiline':False]
['text':' Beware: |js::SynchronouslyCompressSource| assumes that this function is','line_number':2290,'multiline':False]
['text':' only called once, just after a script has been compiled, and it's never','line_number':2291,'multiline':False]
['text':' called at some random time after that.  If multiple calls of this can ever','line_number':2292,'multiline':False]
['text':' occur, that function may require changes.','line_number':2293,'multiline':False]
['text':' The SourceCompressionTask needs to record the major GC number for','line_number':2295,'multiline':False]
['text':' scheduling. This cannot be accessed off-thread and must be handle in','line_number':2296,'multiline':False]
['text':' ParseTask::finish instead.','line_number':2297,'multiline':False]
['text':' If source compression was already attempted, do not queue a new task.','line_number':2301,'multiline':False]
['text':' This excludes compressed, missing, and retrievable source.','line_number':2307,'multiline':False]
['text':' There are several cases where source compression is not a good idea:','line_number':2311,'multiline':False]
['text':'  - If the script is tiny, then compression will save little or no space.','line_number':2312,'multiline':False]
['text':'  - If there is only one core, then compression will contend with JS','line_number':2313,'multiline':False]
['text':'    execution (which hurts benchmarketing).','line_number':2314,'multiline':False]
['text':'','line_number':2315,'multiline':False]
['text':' Otherwise, enqueue a compression task to be processed when a major','line_number':2316,'multiline':False]
['text':' GC is requested.','line_number':2317,'multiline':False]
['text':' Heap allocate the task. It will be freed upon compression','line_number':2324,'multiline':False]
['text':' completing in AttachFinishedCompressedSources.','line_number':2325,'multiline':False]
['text':' If units aren't pinned -- and they probably won't be, we'd have to have a','line_number':2342,'multiline':False]
['text':' GC in the small window of time where a |PinnedUnits| was live -- then we','line_number':2343,'multiline':False]
['text':' can immediately convert.','line_number':2344,'multiline':False]
['text':' Otherwise, set aside the compressed-data info.  The conversion is performed','line_number':2350,'multiline':False]
['text':' when the last |PinnedUnits| dies.','line_number':2351,'multiline':False]
['text':' This should be kept in sync with ScriptSource::trace above.','line_number':2425,'multiline':False]
['text':' When the canonical ScriptSourceObject's finalizer runs, this','line_number':2427,'multiline':False]
['text':' ScriptSource can no longer be accessed from the main','line_number':2428,'multiline':False]
['text':' thread. However, an offthread source compression task may still','line_number':2429,'multiline':False]
['text':' hold a reference. We must clean up any GC pointers owned by this','line_number':2430,'multiline':False]
['text':' ScriptSource now, because trying to run those prebarriers','line_number':2431,'multiline':False]
['text':' offthread later will fail.','line_number':2432,'multiline':False]
['text':' GC pointers must have been cleared earlier, because this destructor could','line_number':2443,'multiline':False]
['text':' be called off-thread by SweepCompressionTasks. See above.','line_number':2444,'multiline':False]
['text':' Since the realloc succeeded, unique is now holding a freed pointer.','line_number':2454,'multiline':False]
['text':' Try to keep the maximum memory usage down by only allocating half the','line_number':2464,'multiline':False]
['text':' size of the string, first.','line_number':2465,'multiline':False]
['text':' The compressed string is longer than the original string.','line_number':2492,'multiline':False]
['text':' The compressed output is greater than half the size of the','line_number':2496,'multiline':False]
['text':' original string. Reallocate to the full size.','line_number':2497,'multiline':False]
['text':' Shrink the buffer to the size of the compressed data.','line_number':2517,'multiline':False]
['text':' Finish all pending source compressions, including the single compression','line_number':2599,'multiline':False]
['text':' task that may have been created (by |ScriptSource::tryCompressOffThread|)','line_number':2600,'multiline':False]
['text':' just after the script was compiled.  Because we have flushed this queue,','line_number':2601,'multiline':False]
['text':' no code below needs to synchronize with an off-thread parse task that','line_number':2602,'multiline':False]
['text':' assumes the immutability of a |ScriptSource|'s data.','line_number':2603,'multiline':False]
['text':'','line_number':2604,'multiline':False]
['text':' This *may* end up compressing |script|'s source.  If it does -- we test','line_number':2605,'multiline':False]
['text':' this below -- that takes care of things.  But if it doesn't, we will','line_number':2606,'multiline':False]
['text':' synchronously compress ourselves (and as noted above, this won't race','line_number':2607,'multiline':False]
['text':' anything).','line_number':2608,'multiline':False]
['text':' In principle a previously-triggered compression on a helper thread could','line_number':2615,'multiline':False]
['text':' have already completed.  If that happens, there's nothing more to do.','line_number':2616,'multiline':False]
['text':' Use an explicit scope to delineate the lifetime of |task|, for simplicity.','line_number':2624,'multiline':False]
['text':' |SourceCompressionTask::shouldCancel| can periodically result in source','line_number':2631,'multiline':False]
['text':' compression being canceled if we're not careful.  Guarantee that two refs','line_number':2632,'multiline':False]
['text':' to |ss| are always live in this function (at least one preexisting and','line_number':2633,'multiline':False]
['text':' one held by the task) so that compression is never canceled.','line_number':2634,'multiline':False]
['text':' Attempt to compress.  This may not succeed if OOM happens, but (because','line_number':2643,'multiline':False]
['text':' it ordinarily happens on a helper thread) no error will ever be set here.','line_number':2644,'multiline':False]
['text':' Convert |ss| from uncompressed to compressed data.','line_number':2649,'multiline':False]
['text':' The only way source won't be compressed here is if OOM happened.','line_number':2655,'multiline':False]
['text':' Encoding failures are reported by the xdrFinalizeEncoder function.','line_number':2668,'multiline':False]
['text':' Remove the reference to the source, to avoid the circular reference.','line_number':2673,'multiline':False]
['text':' On encoding failure, let failureCase destroy encoder and return true','line_number':2690,'multiline':False]
['text':' to avoid failing any currently executing script.','line_number':2691,'multiline':False]
['text':' On encoding failure, let failureCase destroy encoder and return true','line_number':2708,'multiline':False]
['text':' to avoid failing any currently executing script.','line_number':2709,'multiline':False]
['text':' namespace js','line_number':2793,'multiline':False]
['text':' namespace js','line_number':2830,'multiline':False]
['text':' static ','line_number':2833,'multiline':True]
['text':' static ','line_number':2857,'multiline':True]
['text':' Compressed data is always single-byte chars.','line_number':2885,'multiline':False]
['text':' static ','line_number':2908,'multiline':True]
['text':' static ','line_number':2923,'multiline':True]
['text':' There's nothing to code for retrievable data.  Just be sure to set','line_number':2925,'multiline':False]
['text':' retrievable data when decoding.','line_number':2926,'multiline':False]
['text':' static ','line_number':2936,'multiline':True]
['text':' The order here corresponds to the type order in |ScriptSource::SourceType|','line_number':2939,'multiline':False]
['text':' so number->internal Variant tag is a no-op.','line_number':2940,'multiline':False]
['text':' This is terrible, but we can't do better.  When |mode == XDR_DECODE| we','line_number':2957,'multiline':False]
['text':' don't have a |ScriptSource::data| |Variant| to match -- the entire XDR','line_number':2958,'multiline':False]
['text':' idiom for tagged unions depends on coding a tag-number, then the','line_number':2959,'multiline':False]
['text':' corresponding tagged data.  So we must manually define a tag-enum, code','line_number':2960,'multiline':False]
['text':' it, then switch on it (and ignore the |Variant::match| API).','line_number':2961,'multiline':False]
['text':' Fail in debug, but only soft-fail in release, if the type is invalid.','line_number':3008,'multiline':False]
['text':' There's no data to XDR for missing source.','line_number':3050,'multiline':False]
['text':' The range-check on |type| far above ought ensure the above |switch| is','line_number':3063,'multiline':False]
['text':' exhaustive and all cases will return, but not all compilers understand','line_number':3064,'multiline':False]
['text':' this.  Make the Missing case break to here so control obviously never flows','line_number':3065,'multiline':False]
['text':' off the end.','line_number':3066,'multiline':False]
['text':' static ','line_number':3072,'multiline':True]
['text':' Allocate a new ScriptSource and root it with the holder.','line_number':3079,'multiline':False]
['text':' We use this CompileOptions only to initialize the ScriptSourceObject.','line_number':3085,'multiline':False]
['text':' Most CompileOptions fields aren't used by ScriptSourceObject, and those','line_number':3086,'multiline':False]
['text':' that are (element; elementAttributeName) aren't preserved by XDR. So','line_number':3087,'multiline':False]
['text':' this can be simple.','line_number':3088,'multiline':False]
['text':' static ','line_number':3155,'multiline':True]
['text':' static ','line_number':3160,'multiline':True]
['text':' Format and return a cx->pod_malloc'ed URL for a generated script like:','line_number':3166,'multiline':False]
['text':'   {filename} line {lineno} > {introducer}','line_number':3167,'multiline':False]
['text':' For example:','line_number':3168,'multiline':False]
['text':'   foo.js line 7 > eval','line_number':3169,'multiline':False]
['text':' indicating code compiled by the call to 'eval' on line 7 of foo.js.','line_number':3170,'multiline':False]
['text':' Compute the length of the string in advance, so we can allocate a','line_number':3174,'multiline':False]
['text':' buffer of the right size on the first shot.','line_number':3175,'multiline':False]
['text':'','line_number':3176,'multiline':False]
['text':' (JS_smprintf would be perfect, as that allocates the result','line_number':3177,'multiline':False]
['text':' dynamically as it formats the string, but it won't allocate from cx,','line_number':3178,'multiline':False]
['text':' and wants us to use a special free function.)','line_number':3179,'multiline':False]
['text':' == strlen(" line ") ','line_number':3184,'multiline':True]
['text':' == strlen(" > ") ','line_number':3185,'multiline':True]
['text':' \0 ','line_number':3185,'multiline':True]
['text':' The parameterListEnd_ is initialized later by setParameterListEnd, before','line_number':3208,'multiline':False]
['text':' we expose any scripts that use this ScriptSource to the debugger.','line_number':3209,'multiline':False]
['text':' Use the SharedImmutableString map to deduplicate input string. The input','line_number':3238,'multiline':False]
['text':' string must be null-terminated.','line_number':3239,'multiline':False]
['text':' FIXME: filename() should be UTF-8 (bug 987069).','line_number':3302,'multiline':False]
['text':' static ','line_number':3337,'multiline':True]
['text':'
 * [SMDOC] JSScript data layout (immutable)
 *
 * Script data that shareable across processes. There are no pointers (GC or
 * otherwise) and the data is relocatable.
 *
 * Array elements   Pointed to by         Length
 * --------------   -------------         ------
 * jsbytecode       code()                codeLength()
 * jsscrnote        notes()               noteLength()
 * uint32_t         resumeOffsets()
 * ScopeNote        scopeNotes()
 * TryNote          tryNotes()
 ','line_number':3340,'multiline':True]
['text':' static ','line_number':3355,'multiline':True]
['text':' Take a count of which optional arrays will be used and need offset info.','line_number':3358,'multiline':False]
['text':' Compute size including trailing arrays.','line_number':3363,'multiline':False]
['text':' Allocate contiguous raw buffer.','line_number':3386,'multiline':False]
['text':' Constuct the ImmutableScriptData. Trailing arrays are uninitialized but','line_number':3393,'multiline':False]
['text':' GCPtrs are put into a safe state.','line_number':3394,'multiline':False]
['text':' Sanity check','line_number':3401,'multiline':False]
['text':' static ','line_number':3423,'multiline':True]
['text':' static ','line_number':3428,'multiline':True]
['text':' Any JIT compiles should have been released, so we already point to the','line_number':3446,'multiline':False]
['text':' interpreter trampoline which supports lazy scripts.','line_number':3447,'multiline':False]
['text':' Without bytecode, the script counts are invalid so destroy them if they','line_number':3451,'multiline':False]
['text':' still exist.','line_number':3452,'multiline':False]
['text':' Release the bytecode and gcthings list.','line_number':3455,'multiline':False]
['text':' NOTE: We clear the PrivateScriptData to nullptr. This is fine because we','line_number':3456,'multiline':False]
['text':'       only allowed relazification (via AllowRelazify) if the original lazy','line_number':3457,'multiline':False]
['text':'       script we compiled from had a nullptr PrivateScriptData.','line_number':3458,'multiline':False]
['text':' We should not still be in any side-tables for the debugger or','line_number':3462,'multiline':False]
['text':' code-coverage. The finalizer will not be able to clean them up once','line_number':3463,'multiline':False]
['text':' bytecode is released. We check in JSFunction::maybeRelazify() for these','line_number':3464,'multiline':False]
['text':' conditions before requesting relazification.','line_number':3465,'multiline':False]
['text':' Rollback warmUpData_ to have enclosingScope.','line_number':3470,'multiline':False]
['text':' Takes ownership of the passed SharedImmutableScriptData and either adds it','line_number':3479,'multiline':False]
['text':' into the runtime's SharedImmutableScriptDataTable, or frees it if a matching','line_number':3480,'multiline':False]
['text':' entry already exists and replaces the passed RefPtr with the existing entry.','line_number':3481,'multiline':False]
['text':' static ','line_number':3482,'multiline':True]
['text':' Calculate the hash before taking the lock. Because the data is reference','line_number':3490,'multiline':False]
['text':' counted, it also will be freed after releasing the lock if necessary.','line_number':3491,'multiline':False]
['text':' Being in the table counts as a reference on the script data.','line_number':3507,'multiline':False]
['text':' Refs: sisd argument, SharedImmutableScriptDataTable','line_number':3511,'multiline':False]
['text':' Entries are removed from the table when their reference count is one,','line_number':3518,'multiline':False]
['text':' i.e. when the only reference to them is from the table entry.','line_number':3519,'multiline':False]
['text':' Initialize and placement-new the trailing arrays.','line_number':3536,'multiline':False]
['text':' Variable-length data begins immediately after PrivateScriptData itself.','line_number':3539,'multiline':False]
['text':' NOTE: Alignment is computed using cursor/offset so the alignment of','line_number':3540,'multiline':False]
['text':' PrivateScriptData must be stricter than any trailing array type.','line_number':3541,'multiline':False]
['text':' Layout and initialize the gcthings array.','line_number':3544,'multiline':False]
['text':' Sanity check.','line_number':3550,'multiline':False]
['text':' static ','line_number':3554,'multiline':True]
['text':' Compute size including trailing arrays.','line_number':3556,'multiline':False]
['text':' Allocate contiguous raw buffer for the trailing arrays.','line_number':3564,'multiline':False]
['text':' Constuct the PrivateScriptData. Trailing arrays are uninitialized but','line_number':3571,'multiline':False]
['text':' GCPtrs are put into a safe state.','line_number':3572,'multiline':False]
['text':' Sanity check.','line_number':3578,'multiline':False]
['text':' static ','line_number':3584,'multiline':True]
['text':' Create and initialize PrivateScriptData','line_number':3596,'multiline':False]
['text':' NOTE: If we are clearing edges, also erase the type. This can happen','line_number':3618,'multiline':False]
['text':' due to OOM triggering the ClearEdgesTracer.','line_number':3619,'multiline':False]
['text':'static','line_number':3627,'multiline':True]
['text':' static ','line_number':3663,'multiline':True]
['text':' static ','line_number':3679,'multiline':True]
['text':' A holder for the lazy PrivateScriptData that we must keep around in case','line_number':3688,'multiline':False]
['text':' this process fails and we must return the script to its original state.','line_number':3689,'multiline':False]
['text':'','line_number':3690,'multiline':False]
['text':' This is initialized by BaseScript::swapData() which will run pre-barriers','line_number':3691,'multiline':False]
['text':' for us. On successful conversion to non-lazy script, the old script data','line_number':3692,'multiline':False]
['text':' here will be released by the UniquePtr.','line_number':3693,'multiline':False]
['text':' Whether we are a newborn script or an existing lazy script, we should','line_number':3697,'multiline':False]
['text':' already be pointing to the interpreter trampoline.','line_number':3698,'multiline':False]
['text':' If we are using an existing lazy script, record enough info to be able to','line_number':3702,'multiline':False]
['text':' rollback on failure.','line_number':3703,'multiline':False]
['text':' Restore the script to lazy state on failure. If this was a fresh script, we','line_number':3711,'multiline':False]
['text':' just need to clear bytecode to mark script as incomplete.','line_number':3712,'multiline':False]
['text':' The counts of indexed things must be checked during code generation.','line_number':3726,'multiline':False]
['text':' Note: These flags should already be correct when the BaseScript was','line_number':3729,'multiline':False]
['text':' allocated.','line_number':3730,'multiline':False]
['text':' Create and initialize PrivateScriptData','line_number':3735,'multiline':False]
['text':' Member-initializer data is computed in initial parse only. If we are','line_number':3741,'multiline':False]
['text':' delazifying, make sure to copy it off the `lazyData` before we throw it','line_number':3742,'multiline':False]
['text':' away.','line_number':3743,'multiline':False]
['text':' NOTE: JSScript is now constructed and should be linked in.','line_number':3756,'multiline':False]
['text':' Link Scope -> JSFunction -> BaseScript.','line_number':3759,'multiline':False]
['text':' We are delazifying in-place.','line_number':3766,'multiline':False]
['text':' NOTE: The caller is responsible for linking ModuleObjects if this is a','line_number':3771,'multiline':False]
['text':'       module script.','line_number':3772,'multiline':False]
['text':' We want this to happen after line number initialization to allow filtering','line_number':3775,'multiline':False]
['text':' to work.','line_number':3776,'multiline':False]
['text':' Check jump instructions' target.','line_number':3831,'multiline':False]
['text':' All backward jumps must be to a JSOp::LoopHead op. This is an invariant','line_number':3837,'multiline':False]
['text':' we want to maintain to simplify JIT compilation and bytecode analysis.','line_number':3838,'multiline':False]
['text':' All forward jumps must be to a JSOp::JumpTarget op.','line_number':3842,'multiline':False]
['text':' Jumps must not cross scope boundaries.','line_number':3845,'multiline':False]
['text':' Check fallthrough of conditional jump instructions.','line_number':3848,'multiline':False]
['text':' Check table switch case labels.','line_number':3856,'multiline':False]
['text':' Default target.','line_number':3860,'multiline':False]
['text':' Check catch/finally blocks as jump targets.','line_number':3875,'multiline':False]
['text':'
   * Walk through source notes accumulating their deltas, keeping track of
   * line-number notes, until we pass the note for pc's offset within
   * script->code.
   ','line_number':3978,'multiline':True]
['text':' Cope with InterpreterFrame.pc value prior to entering Interpret. ','line_number':4015,'multiline':True]
['text':'
     * Exact-match only if offset is not in the prologue; otherwise use
     * nearest greater-or-equal line number match.
     ','line_number':4031,'multiline':True]
['text':' If needsFinalWarmUpCount is true, ScriptFinalWarmUpCountMap must have','line_number':4085,'multiline':False]
['text':' already been created and thus must be asserted.','line_number':4086,'multiline':False]
['text':' If needsFinalWarmUpCount is true, ScriptFinalWarmUpCountMap must have','line_number':4099,'multiline':False]
['text':' already been created and thus must be asserted.','line_number':4100,'multiline':False]
['text':' In the case that we care about a script's final warmup count but the','line_number':4111,'multiline':False]
['text':' spewer is not enabled, AutoSpewChannel automatically sets and unsets','line_number':4112,'multiline':False]
['text':' the proper channel for the duration of spewing a health report's warm','line_number':4113,'multiline':False]
['text':' up count.','line_number':4114,'multiline':False]
['text':' These values are only used for introducer fields which are debugging','line_number':4171,'multiline':False]
['text':' information and can be safely left null for wasm frames.','line_number':4172,'multiline':False]
['text':' NB: Keep this in sync with XDRInterpretedFunction. ','line_number':4185,'multiline':True]
['text':' static ','line_number':4257,'multiline':True]
['text':' Clone GC things.','line_number':4263,'multiline':False]
['text':' The passed in scopes vector contains body scopes that needed to be','line_number':4280,'multiline':False]
['text':' cloned especially, depending on whether the script is a function or','line_number':4281,'multiline':False]
['text':' global scope. Clone all other scopes.','line_number':4282,'multiline':False]
['text':' Create the new PrivateScriptData on |dst| and fill it in.','line_number':4321,'multiline':False]
['text':' NB: Keep this in sync with XDRScript. ','line_number':4350,'multiline':True]
['text':' Some embeddings are not careful to use ExposeObjectToActiveJS as needed.','line_number':4352,'multiline':False]
['text':' FunctionFlags and ImmutableScriptFlags should agree on self-hosting status.','line_number':4361,'multiline':False]
['text':' Create a new JSScript to fill in.','line_number':4366,'multiline':False]
['text':' Clone the PrivateScriptData into dst','line_number':4373,'multiline':False]
['text':' The SharedImmutableScriptData can be reused by any zone in the Runtime.','line_number':4378,'multiline':False]
['text':' We are either delazifying a self-hosted lazy function or the function','line_number':4429,'multiline':False]
['text':' should be in an inactive state.','line_number':4430,'multiline':False]
['text':' Clone the non-intra-body scopes.','line_number':4433,'multiline':False]
['text':' Save flags in case we need to undo the early mutations.','line_number':4460,'multiline':False]
['text':' Finally set the script after all the fallible operations.','line_number':4468,'multiline':False]
['text':' static ','line_number':4492,'multiline':True]
['text':' There are 1-4 copies of SrcNoteType::Null appended after the source','line_number':4503,'multiline':False]
['text':' notes. These are a combination of sentinel and padding values.','line_number':4504,'multiline':False]
['text':' Allocate ImmutableScriptData','line_number':4512,'multiline':False]
['text':' Initialize POD fields','line_number':4520,'multiline':False]
['text':' Initialize trailing arrays','line_number':4531,'multiline':False]
['text':' Find the nearest LexicalScope in the same script.','line_number':4580,'multiline':False]
['text':' Find the innermost block chain using a binary search.','line_number':4613,'multiline':False]
['text':' Block scopes are ordered in the list by their starting offset, and','line_number':4621,'multiline':False]
['text':' since blocks form a tree ones earlier in the list may cover the pc even','line_number':4622,'multiline':False]
['text':' if later blocks end before the pc. This only happens when the earlier','line_number':4623,'multiline':False]
['text':' block is a parent of the later block, so we need to check parents of','line_number':4624,'multiline':False]
['text':' |mid| in the searched range for coverage.','line_number':4625,'multiline':False]
['text':' We found a matching block chain but there may be inner ones','line_number':4631,'multiline':False]
['text':' at a higher block chain index than mid. Continue the binary search.','line_number':4632,'multiline':False]
['text':'
   * If the arguments object was optimized out by scalar replacement,
   * we must recreate it when we bail out. Because 'arguments' may have
   * already been overwritten, we must check to see if the slot already
   * contains a value.
   ','line_number':4663,'multiline':True]
['text':'
     * If |arguments| lives in the call object, we should not have
     * optimized it. Scan the script to find the slot in the call
     * object that |arguments| is assigned to and verify that it
     * already exists.
     ','line_number':4680,'multiline':True]
['text':' Returns true if any formal argument is mapped by the arguments','line_number':4719,'multiline':False]
['text':' object, but lives in the call object.','line_number':4720,'multiline':False]
['text':' static ','line_number':4738,'multiline':True]
['text':' static ','line_number':4758,'multiline':True]
['text':' Allocate a PrivateScriptData if it will not be empty. Lazy class','line_number':4771,'multiline':False]
['text':' constructors that use member initializers also need PrivateScriptData for','line_number':4772,'multiline':False]
['text':' field data.','line_number':4773,'multiline':False]
['text':' Reset the warm-up count only if it's greater than the BaselineCompiler','line_number':4818,'multiline':False]
['text':' threshold. We do this to ensure this has no effect on Baseline compilation','line_number':4819,'multiline':False]
['text':' because we don't want scripts to get stuck in the (Baseline) interpreter in','line_number':4820,'multiline':False]
['text':' pathological cases.','line_number':4821,'multiline':False]
['text':' The self-hosting realm is shared across runtimes, so we can't use','line_number':4841,'multiline':False]
['text':' JSAutoRealm: it could cause races. Functions in the self-hosting','line_number':4842,'multiline':False]
['text':' realm will never be lazy, so we can safely assume we don't have','line_number':4843,'multiline':False]
['text':' to delazify.','line_number':4844,'multiline':False]
['text':' Don't touch script_ if it's in the self-hosting realm, see the comment','line_number':4858,'multiline':False]
['text':' in holdScript.','line_number':4859,'multiline':False]
['text':' Include any JIT data if it exists.','line_number':4873,'multiline':False]
