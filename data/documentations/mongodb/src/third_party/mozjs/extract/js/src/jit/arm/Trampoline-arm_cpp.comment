['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::jit::JitActivation','line_number':18,'multiline':False]
['text':' Restore non-volatile floating point registers.','line_number':34,'multiline':False]
['text':' Get rid of padding word.','line_number':37,'multiline':False]
['text':' Set up return value','line_number':40,'multiline':False]
['text':' Pop and return','line_number':43,'multiline':False]
['text':' r12 isn't saved, so it shouldn't be restored.','line_number':53,'multiline':False]
['text':' Padding.','line_number':69,'multiline':False]
['text':' Non-volatile registers.','line_number':72,'multiline':False]
['text':' The abi does not expect r12 (ip) to be preserved','line_number':81,'multiline':False]
['text':' Arguments.','line_number':84,'multiline':False]
['text':' code == r0','line_number':85,'multiline':False]
['text':' argc == r1','line_number':86,'multiline':False]
['text':' argv == r2','line_number':87,'multiline':False]
['text':' frame == r3','line_number':88,'multiline':False]
['text':'
 * This method generates a trampoline for a c++ function with the following
 * signature:
 *   void enter(void* code, int argc, Value* argv, InterpreterFrame* fp,
 *              CalleeToken calleeToken, JSObject* scopeChain, Value* vp)
 *   ...using standard EABI calling convention
 ','line_number':95,'multiline':True]
['text':' Save non-volatile registers. These must be saved by the trampoline,','line_number':112,'multiline':False]
['text':' rather than the JIT'd code, because they are scanned by the conservative','line_number':113,'multiline':False]
['text':' scanner.','line_number':114,'multiline':False]
['text':' [sp,0]','line_number':116,'multiline':False]
['text':' [sp,4]','line_number':117,'multiline':False]
['text':' [sp,8]','line_number':118,'multiline':False]
['text':' [sp,12]','line_number':119,'multiline':False]
['text':' [sp,16]','line_number':120,'multiline':False]
['text':' [sp,20]','line_number':121,'multiline':False]
['text':' [sp,24]','line_number':122,'multiline':False]
['text':' [sp,28]','line_number':123,'multiline':False]
['text':' The abi does not expect r12 (ip) to be preserved','line_number':124,'multiline':False]
['text':' [sp,32]','line_number':125,'multiline':False]
['text':' The 5th argument is located at [sp, 36]','line_number':126,'multiline':False]
['text':' Add padding word.','line_number':129,'multiline':False]
['text':' Push the float registers.','line_number':132,'multiline':False]
['text':' Save stack pointer into r8','line_number':135,'multiline':False]
['text':' Load calleeToken into r9.','line_number':138,'multiline':False]
['text':' Save stack pointer.','line_number':141,'multiline':False]
['text':' Load the number of actual arguments into r10.','line_number':144,'multiline':False]
['text':' Guarantee stack alignment of Jit frames.','line_number':158,'multiline':False]
['text':'','line_number':159,'multiline':False]
['text':' This code moves the stack pointer to the location where it should be when','line_number':160,'multiline':False]
['text':' we enter the Jit frame.  It moves the stack pointer such that we have','line_number':161,'multiline':False]
['text':' enough space reserved for pushing the arguments, and the JitFrameLayout.','line_number':162,'multiline':False]
['text':' The stack pointer is also aligned on the alignment expected by the Jit','line_number':163,'multiline':False]
['text':' frames.','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':' At the end the register r4, is a pointer to the stack where the first','line_number':166,'multiline':False]
['text':' argument is expected by the Jit frame.','line_number':167,'multiline':False]
['text':'','line_number':168,'multiline':False]
['text':' r4 = sp - argc*8','line_number':169,'multiline':False]
['text':' r4 is now the aligned on the bottom of the list of arguments.','line_number':171,'multiline':False]
['text':' sp' = ~(JitStackAlignment - 1) & (sp - argc * sizeof(Value))','line_number':175,'multiline':False]
['text':' Get a copy of the number of args to use as a decrement counter, also set','line_number':178,'multiline':False]
['text':' the zero condition code.','line_number':179,'multiline':False]
['text':' Loop over arguments, copying them from an unknown buffer onto the Ion','line_number':182,'multiline':False]
['text':' stack so they can be accessed from JIT'ed code.','line_number':183,'multiline':False]
['text':' If there aren't any arguments, don't do anything.','line_number':186,'multiline':False]
['text':' Get the top of the loop.','line_number':188,'multiline':False]
['text':' We could be more awesome, and unroll this, using a loadm','line_number':191,'multiline':False]
['text':' (particularly since the offset is effectively 0) but that seems more','line_number':192,'multiline':False]
['text':' error prone, and complex.','line_number':193,'multiline':False]
['text':' BIG FAT WARNING: this loads both r6 and r7.','line_number':194,'multiline':False]
['text':' Create the frame descriptor.','line_number':203,'multiline':False]
['text':' [sp]    = return address (written later)','line_number':210,'multiline':False]
['text':' [sp',4] = descriptor, argc*8+20','line_number':211,'multiline':False]
['text':' [sp',8]  = callee token','line_number':212,'multiline':False]
['text':' [sp',12]  = actual arguments','line_number':213,'multiline':False]
['text':' Handle Interpreter -> Baseline OSR.','line_number':218,'multiline':False]
['text':' Write return address. On ARM, CodeLabel is only used for tableswitch,','line_number':236,'multiline':False]
['text':' so we can't use it here to get the return address. Instead, we use pc','line_number':237,'multiline':False]
['text':' + a fixed offset to a jump to returnLabel. The pc register holds pc +','line_number':238,'multiline':False]
['text':' 8, so we add the size of 2 instructions to skip the instructions','line_number':239,'multiline':False]
['text':' emitted by storePtr and jump(&skipJump).','line_number':240,'multiline':False]
['text':' Push previous frame pointer.','line_number':252,'multiline':False]
['text':' Reserve frame.','line_number':255,'multiline':False]
['text':' Reserve space for locals and stack values.','line_number':262,'multiline':False]
['text':' Enter exit frame.','line_number':266,'multiline':False]
['text':' Fake return address.','line_number':273,'multiline':False]
['text':' No GC things to mark on the stack, push a bare token.','line_number':274,'multiline':False]
['text':' BaselineFrame','line_number':278,'multiline':False]
['text':' jitcode','line_number':279,'multiline':False]
['text':' BaselineFrame','line_number':284,'multiline':False]
['text':' InterpreterFrame','line_number':285,'multiline':False]
['text':' If OSR-ing, then emit instrumentation for setting lastProfilerFrame','line_number':301,'multiline':False]
['text':' if profiler instrumentation is enabled.','line_number':302,'multiline':False]
['text':' OOM: Load error value, discard return address and previous frame','line_number':317,'multiline':False]
['text':' pointer and return.','line_number':318,'multiline':False]
['text':' Load the scope chain in R1.','line_number':326,'multiline':False]
['text':' The Data transfer is pushing 4 words, which already account for the','line_number':332,'multiline':False]
['text':' return address space of the Jit frame.  We have to undo what the data','line_number':333,'multiline':False]
['text':' transfer did before making the call.','line_number':334,'multiline':False]
['text':' The callee will push the return address on the stack, thus we check that','line_number':337,'multiline':False]
['text':' the stack would be aligned once the call is complete.','line_number':338,'multiline':False]
['text':' Call the function.','line_number':341,'multiline':False]
['text':' Interpreter -> Baseline OSR will return here.','line_number':344,'multiline':False]
['text':' Pop descriptor.','line_number':347,'multiline':False]
['text':' Discard calleeToken, numActualArgs.','line_number':350,'multiline':False]
['text':' Discard arguments and the stack alignment padding.','line_number':353,'multiline':False]
['text':' Store the returned value into the slot_vp','line_number':356,'multiline':False]
['text':' :TODO: Optimize storeValue with:','line_number':360,'multiline':False]
['text':' We're using a load-double here. In order for that to work, the data needs','line_number':361,'multiline':False]
['text':' to be stored in two consecutive registers, make sure this is the case','line_number':362,'multiline':False]
['text':'   MOZ_ASSERT(JSReturnReg_Type.code() == JSReturnReg_Data.code()+1);','line_number':363,'multiline':False]
['text':'   aasm->as_extdtr(IsStore, 64, true, Offset,','line_number':364,'multiline':False]
['text':'                   JSReturnReg_Data, EDtrAddr(r5, EDtrOffImm(0)));','line_number':365,'multiline':False]
['text':' Restore non-volatile registers and return.','line_number':367,'multiline':False]
['text':' static','line_number':371,'multiline':False]
['text':' Not supported, or not implemented yet.','line_number':374,'multiline':False]
['text':' TODO: Implement along with the corresponding stack-walker changes, in','line_number':375,'multiline':False]
['text':' coordination with the Gecko Profiler, see bug 1635987 and follow-ups.','line_number':376,'multiline':False]
['text':' See large comment in x86's JitRuntime::generateInvalidator.','line_number':381,'multiline':False]
['text':' At this point, one of two things has happened:','line_number':385,'multiline':False]
['text':' 1) Execution has just returned from C code, which left the stack aligned','line_number':386,'multiline':False]
['text':' 2) Execution has just returned from Ion code, which left the stack','line_number':387,'multiline':False]
['text':' unaligned. The old return address should not matter, but we still want the','line_number':388,'multiline':False]
['text':' stack to be aligned, and there is no good reason to automatically align it','line_number':389,'multiline':False]
['text':' with a call to setupUnalignedABICall.','line_number':390,'multiline':False]
['text':' We don't have to push everything, but this is likely easier.','line_number':393,'multiline':False]
['text':' Setting regs_.','line_number':394,'multiline':False]
['text':' Since our datastructures for stack inspection are compile-time fixed,','line_number':400,'multiline':False]
['text':' if there are only 16 double registers, then we need to reserve','line_number':401,'multiline':False]
['text':' space on the stack for the missing 16.','line_number':402,'multiline':False]
['text':' Remove the return address, the IonScript, the register state','line_number':437,'multiline':False]
['text':' (InvaliationBailoutStack) and the space that was allocated for the return','line_number':438,'multiline':False]
['text':' value.','line_number':439,'multiline':False]
['text':' Remove the space that this frame was using before the bailout (computed','line_number':447,'multiline':False]
['text':' by InvalidationBailout)','line_number':448,'multiline':False]
['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in r2.','line_number':451,'multiline':False]
['text':' Copy number of actual arguments into r0 and r8.','line_number':467,'multiline':False]
['text':' Load the number of |undefined|s to push into r6.','line_number':473,'multiline':False]
['text':' Get the topmost argument.','line_number':484,'multiline':False]
['text':' r3 <- r3 + nargs * 8','line_number':487,'multiline':False]
['text':' Add sizeof(Value) to overcome |this|','line_number':498,'multiline':False]
['text':' Include the newly pushed newTarget value in the frame size','line_number':503,'multiline':False]
['text':' calculated below.','line_number':504,'multiline':False]
['text':' Push undefined.','line_number':510,'multiline':False]
['text':' Push arguments, |nargs| + 1 times (to include |this|).','line_number':522,'multiline':False]
['text':' translate the framesize from values into bytes','line_number':535,'multiline':False]
['text':' Construct sizeDescriptor.','line_number':539,'multiline':False]
['text':' Construct JitFrameLayout.','line_number':542,'multiline':False]
['text':' actual arguments.','line_number':543,'multiline':False]
['text':' callee token','line_number':544,'multiline':False]
['text':' frame descriptor.','line_number':545,'multiline':False]
['text':' Call the target function.','line_number':547,'multiline':False]
['text':' See BaselineCacheIRCompiler::emitCallInlinedFunction.','line_number':560,'multiline':False]
['text':' arg1','line_number':568,'multiline':False]
['text':'  ...','line_number':569,'multiline':False]
['text':' argN','line_number':570,'multiline':False]
['text':' num actual args','line_number':571,'multiline':False]
['text':' callee token','line_number':572,'multiline':False]
['text':' sizeDescriptor     <- sp now','line_number':573,'multiline':False]
['text':' return address','line_number':574,'multiline':False]
['text':' Remove the rectifier frame.','line_number':576,'multiline':False]
['text':' arg1','line_number':582,'multiline':False]
['text':'  ...','line_number':583,'multiline':False]
['text':' argN               <- sp now; r4 <- frame descriptor','line_number':584,'multiline':False]
['text':' num actual args','line_number':585,'multiline':False]
['text':' callee token','line_number':586,'multiline':False]
['text':' sizeDescriptor','line_number':587,'multiline':False]
['text':' return address','line_number':588,'multiline':False]
['text':' Discard pushed arguments.','line_number':590,'multiline':False]
['text':' the stack should look like:','line_number':602,'multiline':False]
['text':' [IonFrame]','line_number':603,'multiline':False]
['text':' bailoutFrame.registersnapshot','line_number':604,'multiline':False]
['text':' bailoutFrame.fpsnapshot','line_number':605,'multiline':False]
['text':' bailoutFrame.snapshotOffset','line_number':606,'multiline':False]
['text':' bailoutFrame.frameSize','line_number':607,'multiline':False]
['text':' STEP 1a: Save our register sets to the stack so Bailout() can read','line_number':609,'multiline':False]
['text':' everything.','line_number':610,'multiline':False]
['text':' sp % 8 == 0','line_number':611,'multiline':False]
['text':' We don't have to push everything, but this is likely easier.','line_number':614,'multiline':False]
['text':' Setting regs_.','line_number':615,'multiline':False]
['text':' Since our datastructures for stack inspection are compile-time fixed,','line_number':623,'multiline':False]
['text':' if there are only 16 double registers, then we need to reserve','line_number':624,'multiline':False]
['text':' space on the stack for the missing 16.','line_number':625,'multiline':False]
['text':' STEP 1b: Push both the "return address" of the function call (the address','line_number':637,'multiline':False]
['text':'          of the instruction after the call that we used to get here) as','line_number':638,'multiline':False]
['text':'          well as the callee token onto the stack. The return address is','line_number':639,'multiline':False]
['text':'          currently in r14. We will proceed by loading the callee token','line_number':640,'multiline':False]
['text':'          into a sacrificial register <= r14, then pushing both onto the','line_number':641,'multiline':False]
['text':'          stack.','line_number':642,'multiline':False]
['text':' Now place the frameClass onto the stack, via a register.','line_number':644,'multiline':False]
['text':' And onto the stack. Since the stack is full, we need to put this one past','line_number':646,'multiline':False]
['text':' the end of the current stack. Sadly, the ABI says that we need to always','line_number':647,'multiline':False]
['text':' point to the lowest place that has been written. The OS is free to do','line_number':648,'multiline':False]
['text':' whatever it wants below sp.','line_number':649,'multiline':False]
['text':' Set frameClassId_.','line_number':651,'multiline':False]
['text':' Set tableOffset_; higher registers are stored at higher locations on the','line_number':653,'multiline':False]
['text':' stack.','line_number':654,'multiline':False]
['text':' SP % 8 == 4','line_number':665,'multiline':False]
['text':' STEP 1c: Call the bailout function, giving a pointer to the','line_number':666,'multiline':False]
['text':'          structure we just blitted onto the stack.','line_number':667,'multiline':False]
['text':' Decrement sp by another 4, so we keep alignment. Not Anymore! Pushing','line_number':674,'multiline':False]
['text':' both the snapshotoffset as well as the: masm.as_sub(sp, sp, Imm8(4));','line_number':675,'multiline':False]
['text':' Set the old (4-byte aligned) value of the sp as the first argument.','line_number':677,'multiline':False]
['text':' Sp % 8 == 0','line_number':681,'multiline':False]
['text':' Common size of a bailout frame.','line_number':690,'multiline':False]
['text':' frameClass','line_number':691,'multiline':False]
['text':' Make sure the bailout frame size fits into the offset for a load.','line_number':695,'multiline':False]
['text':' Used to be: offsetof(BailoutStack, frameSize_)','line_number':697,'multiline':False]
['text':' This structure is no longer available to us :(','line_number':698,'multiline':False]
['text':' We add 12 to the bailoutFrameSize because:','line_number':699,'multiline':False]
['text':' sizeof(uint32_t) for the tableOffset that was pushed onto the stack','line_number':700,'multiline':False]
['text':' sizeof(uintptr_t) for the snapshotOffset;','line_number':701,'multiline':False]
['text':' alignment to round the uintptr_t up to a multiple of 8 bytes.','line_number':702,'multiline':False]
['text':' The frame that was added when we entered the most','line_number':709,'multiline':False]
['text':' recent function.','line_number':710,'multiline':False]
['text':' The size of the "return address" that was dumped on','line_number':712,'multiline':False]
['text':' the stack.','line_number':713,'multiline':False]
['text':' Everything else that was pushed on the stack.','line_number':715,'multiline':False]
['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in r2.','line_number':720,'multiline':False]
['text':' Emit the table without any pools being inserted.','line_number':730,'multiline':False]
['text':' The context is the first argument; r0 is the first argument register.','line_number':762,'multiline':False]
['text':' Stack is:','line_number':766,'multiline':False]
['text':'    ... frame ...','line_number':767,'multiline':False]
['text':'  +8  [args] + argPadding','line_number':768,'multiline':False]
['text':'  +0  ExitFrame','line_number':769,'multiline':False]
['text':'','line_number':770,'multiline':False]
['text':' We're aligned to an exit frame, so link it up.','line_number':771,'multiline':False]
['text':' If it isn't a tail call, then the return address needs to be saved','line_number':772,'multiline':False]
['text':' Save the base of the argument set stored on the stack.','line_number':780,'multiline':False]
['text':' Reserve space for the outparameter.','line_number':790,'multiline':False]
['text':' Copy any arguments.','line_number':837,'multiline':False]
['text':' Values should be passed by reference, not by value, so we assert','line_number':845,'multiline':False]
['text':' that the argument is a double-precision float.','line_number':846,'multiline':False]
['text':' Copy the implicit outparam, if any.','line_number':866,'multiline':False]
['text':' Test for failure.','line_number':878,'multiline':False]
['text':' Load the outparam and free any allocated stack.','line_number':892,'multiline':False]
['text':' Until C++ code is instrumented against Spectre, prevent speculative','line_number':929,'multiline':False]
['text':' execution from returning any private data.','line_number':930,'multiline':False]
['text':' Call into C++ to mark this GC thing.','line_number':961,'multiline':False]
['text':'','line_number':1021,'multiline':False]
['text':' The code generated below expects that the current stack pointer points','line_number':1022,'multiline':False]
['text':' to an Ion or Baseline frame, at the state it would be immediately','line_number':1023,'multiline':False]
['text':' before a ret().  Thus, after this stub's business is done, it executes','line_number':1024,'multiline':False]
['text':' a ret() and returns directly to the caller script, on behalf of the','line_number':1025,'multiline':False]
['text':' callee script that jumped to this code.','line_number':1026,'multiline':False]
['text':'','line_number':1027,'multiline':False]
['text':' Thus the expected stack is:','line_number':1028,'multiline':False]
['text':'','line_number':1029,'multiline':False]
['text':'                                   StackPointer ----+','line_number':1030,'multiline':False]
['text':'                                                    v','line_number':1031,'multiline':False]
['text':' ..., ActualArgc, CalleeToken, Descriptor, ReturnAddr','line_number':1032,'multiline':False]
['text':' MEM-HI                                       MEM-LOW','line_number':1033,'multiline':False]
['text':'','line_number':1034,'multiline':False]
['text':'','line_number':1035,'multiline':False]
['text':' The generated jitcode is responsible for overwriting the','line_number':1036,'multiline':False]
['text':' jitActivation->lastProfilingFrame field with a pointer to the previous','line_number':1037,'multiline':False]
['text':' Ion or Baseline jit-frame that was pushed before this one. It is also','line_number':1038,'multiline':False]
['text':' responsible for overwriting jitActivation->lastProfilingCallSite with','line_number':1039,'multiline':False]
['text':' the return address into that frame.  The frame could either be an','line_number':1040,'multiline':False]
['text':' immediate "caller" frame, or it could be a frame in a previous','line_number':1041,'multiline':False]
['text':' JitActivation (if the current frame was entered from C++, and the C++','line_number':1042,'multiline':False]
['text':' was entered by some caller jit-frame further down the stack).','line_number':1043,'multiline':False]
['text':'','line_number':1044,'multiline':False]
['text':' So this jitcode is responsible for "walking up" the jit stack, finding','line_number':1045,'multiline':False]
['text':' the previous Ion or Baseline JS frame, and storing its address and the','line_number':1046,'multiline':False]
['text':' return address into the appropriate fields on the current jitActivation.','line_number':1047,'multiline':False]
['text':'','line_number':1048,'multiline':False]
['text':' There are a fixed number of different path types that can lead to the','line_number':1049,'multiline':False]
['text':' current frame, which is either a baseline or ion frame:','line_number':1050,'multiline':False]
['text':'','line_number':1051,'multiline':False]
['text':' <Baseline-Or-Ion>','line_number':1052,'multiline':False]
['text':' ^','line_number':1053,'multiline':False]
['text':' |','line_number':1054,'multiline':False]
['text':' ^--- Ion','line_number':1055,'multiline':False]
['text':' |','line_number':1056,'multiline':False]
['text':' ^--- Baseline Stub <---- Baseline','line_number':1057,'multiline':False]
['text':' |','line_number':1058,'multiline':False]
['text':' ^--- Argument Rectifier','line_number':1059,'multiline':False]
['text':' |    ^','line_number':1060,'multiline':False]
['text':' |    |','line_number':1061,'multiline':False]
['text':' |    ^--- Ion','line_number':1062,'multiline':False]
['text':' |    |','line_number':1063,'multiline':False]
['text':' |    ^--- Baseline Stub <---- Baseline','line_number':1064,'multiline':False]
['text':' |','line_number':1065,'multiline':False]
['text':' ^--- Entry Frame (From C++)','line_number':1066,'multiline':False]
['text':'','line_number':1067,'multiline':False]
['text':' Ensure that frame we are exiting is current lastProfilingFrame','line_number':1079,'multiline':False]
['text':' Load the frame descriptor into |scratch1|, figure out what to do depending','line_number':1092,'multiline':False]
['text':' on its type.','line_number':1093,'multiline':False]
['text':' Going into the conditionals, we will have:','line_number':1097,'multiline':False]
['text':'      FrameDescriptor.size in scratch1','line_number':1098,'multiline':False]
['text':'      FrameDescriptor.type in scratch2','line_number':1099,'multiline':False]
['text':' Handling of each case is dependent on FrameDescriptor.type','line_number':1107,'multiline':False]
['text':' The WasmToJSJit is just another kind of entry.','line_number':1128,'multiline':False]
['text':'','line_number':1135,'multiline':False]
['text':' FrameType::IonJS','line_number':1136,'multiline':False]
['text':'','line_number':1137,'multiline':False]
['text':' Stack layout:','line_number':1138,'multiline':False]
['text':'                  ...','line_number':1139,'multiline':False]
['text':'                  Ion-Descriptor','line_number':1140,'multiline':False]
['text':'     Prev-FP ---> Ion-ReturnAddr','line_number':1141,'multiline':False]
['text':'                  ... previous frame data ... |- Descriptor.Size','line_number':1142,'multiline':False]
['text':'                  ... arguments ...           |','line_number':1143,'multiline':False]
['text':'                  ActualArgc          |','line_number':1144,'multiline':False]
['text':'                  CalleeToken         |- JitFrameLayout::Size()','line_number':1145,'multiline':False]
['text':'                  Descriptor          |','line_number':1146,'multiline':False]
['text':'        FP -----> ReturnAddr          |','line_number':1147,'multiline':False]
['text':'','line_number':1148,'multiline':False]
['text':' |scratch1| contains Descriptor.size','line_number':1151,'multiline':False]
['text':' returning directly to an IonJS frame.  Store return addr to frame','line_number':1153,'multiline':False]
['text':' in lastProfilingCallSite.','line_number':1154,'multiline':False]
['text':' Store return frame in lastProfilingFrame.','line_number':1159,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1160,'multiline':False]
['text':'','line_number':1167,'multiline':False]
['text':' FrameType::BaselineStub','line_number':1168,'multiline':False]
['text':'','line_number':1169,'multiline':False]
['text':' Look past the stub and store the frame pointer to','line_number':1170,'multiline':False]
['text':' the baselineJS frame prior to it.','line_number':1171,'multiline':False]
['text':'','line_number':1172,'multiline':False]
['text':' Stack layout:','line_number':1173,'multiline':False]
['text':'              ...','line_number':1174,'multiline':False]
['text':'              BL-Descriptor','line_number':1175,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1176,'multiline':False]
['text':'      +-----> BL-PrevFramePointer','line_number':1177,'multiline':False]
['text':'      |       ... BL-FrameData ...','line_number':1178,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1179,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1180,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1181,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Descriptor.Size','line_number':1182,'multiline':False]
['text':'              ... arguments ...           |','line_number':1183,'multiline':False]
['text':'              ActualArgc          |','line_number':1184,'multiline':False]
['text':'              CalleeToken         |- JitFrameLayout::Size()','line_number':1185,'multiline':False]
['text':'              Descriptor          |','line_number':1186,'multiline':False]
['text':'    FP -----> ReturnAddr          |','line_number':1187,'multiline':False]
['text':'','line_number':1188,'multiline':False]
['text':' We take advantage of the fact that the stub frame saves the frame','line_number':1189,'multiline':False]
['text':' pointer pointing to the baseline frame, so a bunch of calculation can','line_number':1190,'multiline':False]
['text':' be avoided.','line_number':1191,'multiline':False]
['text':'','line_number':1192,'multiline':False]
['text':' Skip past BL-PrevFramePtr','line_number':1205,'multiline':False]
['text':'','line_number':1210,'multiline':False]
['text':' FrameType::Rectifier','line_number':1211,'multiline':False]
['text':'','line_number':1212,'multiline':False]
['text':' The rectifier frame can be preceded by either an IonJS, a BaselineStub,','line_number':1213,'multiline':False]
['text':' or a CppToJSJit/WasmToJSJit frame.','line_number':1214,'multiline':False]
['text':'','line_number':1215,'multiline':False]
['text':' Stack layout if caller of rectifier was Ion or CppToJSJit/WasmToJSJit:','line_number':1216,'multiline':False]
['text':'','line_number':1217,'multiline':False]
['text':'              Ion-Descriptor','line_number':1218,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1219,'multiline':False]
['text':'              ... ion frame data ... |- Rect-Descriptor.Size','line_number':1220,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1221,'multiline':False]
['text':'','line_number':1222,'multiline':False]
['text':' Stack layout if caller of rectifier was Baseline:','line_number':1223,'multiline':False]
['text':'','line_number':1224,'multiline':False]
['text':'              BL-Descriptor','line_number':1225,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1226,'multiline':False]
['text':'      +-----> BL-SavedFramePointer','line_number':1227,'multiline':False]
['text':'      |       ... baseline frame data ...','line_number':1228,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1229,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1230,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1231,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Rect-Descriptor.Size','line_number':1232,'multiline':False]
['text':'              ... args to rectifier ...   |','line_number':1233,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1234,'multiline':False]
['text':'','line_number':1235,'multiline':False]
['text':' Common stack layout:','line_number':1236,'multiline':False]
['text':'','line_number':1237,'multiline':False]
['text':'              ActualArgc          |','line_number':1238,'multiline':False]
['text':'              CalleeToken         |- IonRectitiferFrameLayout::Size()','line_number':1239,'multiline':False]
['text':'              Rect-Descriptor     |','line_number':1240,'multiline':False]
['text':'              Rect-ReturnAddr     |','line_number':1241,'multiline':False]
['text':'              ... rectifier data & args ... |- Descriptor.Size','line_number':1242,'multiline':False]
['text':'              ActualArgc      |','line_number':1243,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1244,'multiline':False]
['text':'              Descriptor      |','line_number':1245,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1246,'multiline':False]
['text':'','line_number':1247,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1250,'multiline':False]
['text':' Now |scratch1| contains Rect-Descriptor.Size','line_number':1258,'multiline':False]
['text':' and |scratch2| points to Rectifier frame','line_number':1259,'multiline':False]
['text':' and |scratch3| contains Rect-Descriptor.Type','line_number':1260,'multiline':False]
['text':' Check for either Ion or BaselineStub frame.','line_number':1264,'multiline':False]
['text':' Handle Rectifier <- IonJS','line_number':1269,'multiline':False]
['text':' scratch3 := RectFrame[ReturnAddr]','line_number':1270,'multiline':False]
['text':' scratch3 := RectFrame + Rect-Descriptor.Size +','line_number':1276,'multiline':False]
['text':'             RectifierFrameLayout::Size()','line_number':1277,'multiline':False]
['text':' Check for either BaselineStub or a CppToJSJit/WasmToJSJit entry','line_number':1285,'multiline':False]
['text':' frame.','line_number':1286,'multiline':False]
['text':' Handle Rectifier <- BaselineStub <- BaselineJS','line_number':1290,'multiline':False]
['text':' FrameType::IonICCall','line_number':1306,'multiline':False]
['text':'','line_number':1307,'multiline':False]
['text':' The caller is always an IonJS frame.','line_number':1308,'multiline':False]
['text':'','line_number':1309,'multiline':False]
['text':'              Ion-Descriptor','line_number':1310,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1311,'multiline':False]
['text':'              ... ion frame data ... |- CallFrame-Descriptor.Size','line_number':1312,'multiline':False]
['text':'              StubCode               |','line_number':1313,'multiline':False]
['text':'              ICCallFrame-Descriptor |- IonICCallFrameLayout::Size()','line_number':1314,'multiline':False]
['text':'              ICCallFrame-ReturnAddr |','line_number':1315,'multiline':False]
['text':'              ... call frame data & args ... |- Descriptor.Size','line_number':1316,'multiline':False]
['text':'              ActualArgc      |','line_number':1317,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1318,'multiline':False]
['text':'              Descriptor      |','line_number':1319,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1320,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1323,'multiline':False]
['text':' scratch3 := ICCallFrame-Descriptor.Size','line_number':1327,'multiline':False]
['text':' Assert previous frame is an IonJS frame.','line_number':1331,'multiline':False]
['text':' lastProfilingCallSite := ICCallFrame-ReturnAddr','line_number':1344,'multiline':False]
['text':' lastProfilingFrame := ICCallFrame + ICCallFrame-Descriptor.Size +','line_number':1350,'multiline':False]
['text':'                       IonICCallFrameLayout::Size()','line_number':1351,'multiline':False]
['text':'','line_number':1358,'multiline':False]
['text':' FrameType::CppToJSJit / FrameType::WasmToJSJit','line_number':1359,'multiline':False]
['text':'','line_number':1360,'multiline':False]
['text':' If at an entry frame, store null into both fields.','line_number':1361,'multiline':False]
['text':' A fast-path wasm->jit transition frame is an entry frame from the point','line_number':1362,'multiline':False]
['text':' of view of the JIT.','line_number':1363,'multiline':False]
['text':'','line_number':1364,'multiline':False]
