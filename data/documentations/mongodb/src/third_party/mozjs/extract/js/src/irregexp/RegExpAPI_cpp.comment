['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Copyright 2020 the V8 project authors. All rights reserved.','line_number':7,'multiline':False]
['text':' Use of this source code is governed by a BSD-style license that can be','line_number':8,'multiline':False]
['text':' found in the LICENSE file.','line_number':9,'multiline':False]
['text':' JSMSG_*','line_number':29,'multiline':False]
['text':' js::ReportOverRecursed','line_number':30,'multiline':False]
['text':' Note: V8 reports the same error for both ']' and '}'.','line_number':96,'multiline':False]
['text':' V8 contains experimental support for turning regexp flags on','line_number':109,'multiline':False]
['text':' and off in the middle of a regular expression. Unless it','line_number':110,'multiline':False]
['text':' becomes standardized, SM does not support this feature.','line_number':111,'multiline':False]
['text':' V8 has an experimental non-backtracking engine. We do not','line_number':114,'multiline':False]
['text':' support it yet.','line_number':115,'multiline':False]
['text':' This function is varargs purely so it can call ReportCompileErrorLatin1.','line_number':170,'multiline':False]
['text':' We never call it with additional arguments.','line_number':171,'multiline':False]
['text':' Ordinarily this indicates whether line-of-context information can be','line_number':193,'multiline':False]
['text':' added, but we entirely ignore that here because we create a','line_number':194,'multiline':False]
['text':' a line of context based on the expression source.','line_number':195,'multiline':False]
['text':' If this pattern is being checked by the frontend Parser instead','line_number':201,'multiline':False]
['text':' of other API entry points like |new RegExp|, then the parser will','line_number':202,'multiline':False]
['text':' have provided both a line and column pointing at the *beginning*','line_number':203,'multiline':False]
['text':' of the RegExp literal inside the source text.','line_number':204,'multiline':False]
['text':' We adjust the columnNumber to point to the actual syntax error','line_number':205,'multiline':False]
['text':' inside the literal.','line_number':206,'multiline':False]
['text':' Line breaks are not significant in pattern text in the same way as','line_number':210,'multiline':False]
['text':' in source text, so act as though pattern text is a single line, then','line_number':211,'multiline':False]
['text':' compute a column based on "code point" count (treating a lone','line_number':212,'multiline':False]
['text':' surrogate as a "code point" in UTF-16).  Gak.','line_number':213,'multiline':False]
['text':' For most error reporting, the line of context derives from the token','line_number':219,'multiline':False]
['text':' stream.  So when location information doesn't come from the token','line_number':220,'multiline':False]
['text':' stream, we can't give a line of context.  But here the "line of context"','line_number':221,'multiline':False]
['text':' can be (and is) derived from the pattern text, so we can provide it no','line_number':222,'multiline':False]
['text':' matter if the location is derived from the caller.','line_number':223,'multiline':False]
['text':' Create the windowed string, not including the potential line','line_number':238,'multiline':False]
['text':' terminator.','line_number':239,'multiline':False]
['text':' The line of context must be null-terminated, and StringBuffer doesn't','line_number':245,'multiline':False]
['text':' make that happen unless we force it to.','line_number':246,'multiline':False]
['text':' A regexp is a good candidate for Boyer-Moore if it has at least 3','line_number':315,'multiline':False]
['text':' times as many characters as it has unique characters. Note that','line_number':316,'multiline':False]
['text':' table lookups in irregexp are done modulo tableSize (128).','line_number':317,'multiline':False]
['text':' We declare a regexp low-alphabet if it has at least 3 times as many','line_number':330,'multiline':False]
['text':' characters as it has different characters.','line_number':331,'multiline':False]
['text':' Identifies the sort of pattern where Boyer-Moore is faster than string search','line_number':340,'multiline':False]
['text':' Sample character frequency information for use in Boyer-Moore.','line_number':355,'multiline':False]
['text':' Recursively walking the AST for a deeply nested regexp (like','line_number':370,'multiline':False]
['text':' `/(a(a(a(a(a(a(a(...(a)...))))))))/`) may overflow the stack while','line_number':371,'multiline':False]
['text':' compiling. To avoid this, we use V8's implementation of the Visitor','line_number':372,'multiline':False]
['text':' pattern to walk the AST first with an overly large stack frame.','line_number':373,'multiline':False]
['text':' Leaf nodes with no children','line_number':382,'multiline':False]
['text':' Prevent padding from being optimized away.','line_number':386,'multiline':True]
['text':' Wrapper nodes with one child','line_number':399,'multiline':False]
['text':' Prevent padding from being optimized away.','line_number':403,'multiline':True]
['text':' Prevent padding from being optimized away.','line_number':420,'multiline':True]
['text':' Prevent padding from being optimized away.','line_number':435,'multiline':True]
['text':' This size is picked to be comfortably larger than any','line_number':452,'multiline':False]
['text':' RegExp*::ToNode stack frame.','line_number':453,'multiline':False]
['text':' Because we create a StackMacroAssembler, this function is not allowed','line_number':467,'multiline':False]
['text':' to GC. If needed, we allocate and throw errors in the caller.','line_number':468,'multiline':False]
['text':' If we are compiling native code, we need a macroassembler,','line_number':476,'multiline':False]
['text':' which needs a jit context.','line_number':477,'multiline':False]
['text':' When matching a regexp with known maximum length that is anchored','line_number':497,'multiline':False]
['text':' at the end, we may be able to skip the beginning of long input','line_number':498,'multiline':False]
['text':' strings. This decision is made here because it depends on','line_number':499,'multiline':False]
['text':' information in the AST that isn't replicated in the Node','line_number':500,'multiline':False]
['text':' structure used inside the compiler.','line_number':501,'multiline':False]
['text':' The masm tracer works as a thin wrapper around another macroassembler.','line_number':521,'multiline':False]
['text':' Compile the regexp.','line_number':531,'multiline':False]
['text':' SMRegExpMacroAssembler::GetCode returns undefined on OOM.','line_number':540,'multiline':False]
['text':' Transfer ownership of the tables from the macroassembler to the','line_number':547,'multiline':False]
['text':' RegExpShared.','line_number':548,'multiline':False]
['text':' Transfer ownership of the bytecode from the HandleScope to the','line_number':558,'multiline':False]
['text':' RegExpShared.','line_number':559,'multiline':False]
['text':' Avoid stack overflow while recursively walking the AST.','line_number':590,'multiline':False]
['text':' This is the first time we have compiled this regexp.','line_number':598,'multiline':False]
['text':' First, check to see if we should use simple string search','line_number':599,'multiline':False]
['text':' with an atom.','line_number':600,'multiline':False]
['text':' The parse-tree is a single atom that is equal to the pattern.','line_number':604,'multiline':False]
['text':' The parse-tree is a single atom that is not equal to the pattern.','line_number':607,'multiline':False]
['text':' All fallible initialization has succeeded, so we can change state.','line_number':627,'multiline':False]
['text':' Add one to capture_count to account for the whole-match capture.','line_number':628,'multiline':False]
['text':' Reset the Irregexp backtrack stack if it grows during execution.','line_number':723,'multiline':False]
['text':' namespace irregexp','line_number':782,'multiline':False]
['text':' namespace js','line_number':783,'multiline':False]
