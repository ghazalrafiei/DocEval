['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * Static probes
 *
 * The probe points defined in this file are scattered around the SpiderMonkey
 * source tree. The presence of probes::SomeEvent() means that someEvent is
 * about to happen or has happened. To the extent possible, probes should be
 * inserted in all paths associated with a given event, regardless of the
 * active runmode (interpreter/traceJIT/methodJIT/ionJIT).
 *
 * When a probe fires, it is handled by any probe handling backends that have
 * been compiled in. By default, most probes do nothing or at least do nothing
 * expensive, so the presence of the probe should have negligible effect on
 * running time. (Probes in slow paths may do something by default, as long as
 * there is no noticeable slowdown.)
 *
 * For some probes, the mere existence of the probe is too expensive even if it
 * does nothing when called. For example, just having consistent information
 * available for a function call entry/exit probe causes the JITs to
 * de-optimize function calls. In those cases, the JITs may query at compile
 * time whether a probe is desired, and omit the probe invocation if not. If a
 * probe is runtime-disabled at compilation time, it is not guaranteed to fire
 * within a compiled function if it is later enabled.
 *
 * Not all backends handle all of the probes listed here.
 ','line_number':20,'multiline':True]
['text':'
 * Internal use only: remember whether "profiling", whatever that means, is
 * currently active. Used for state management.
 ','line_number':46,'multiline':True]
['text':'
 * Test whether we are tracking JS function call enter/exit. The JITs use this
 * to decide whether they can optimize in a way that would prevent probes from
 * firing.
 ','line_number':55,'multiline':True]
['text':' Entering a JS function ','line_number':62,'multiline':True]
['text':' About to leave a JS function ','line_number':65,'multiline':True]
['text':' Executing a script ','line_number':68,'multiline':True]
['text':' Script has completed execution ','line_number':71,'multiline':True]
['text':'
 * Object has been created. |obj| must exist (its class and size are read)
 ','line_number':74,'multiline':True]
['text':'
 * Object is about to be finalized. |obj| must still exist (its class is
 * read)
 ','line_number':79,'multiline':True]
['text':'
 * Internal: DTrace-specific functions to be called during probes::EnterScript
 * and probes::ExitScript. These will not be inlined, but the argument
 * marshalling required for these probe points is expensive enough that it
 * shouldn't really matter.
 ','line_number':85,'multiline':True]
['text':' namespace probes','line_number':94,'multiline':False]
['text':' the first arg is nullptr - reserved for future use (filename?) ','line_number':132,'multiline':True]
['text':' namespace js ','line_number':140,'multiline':True]
['text':' vm_Probes_h ','line_number':142,'multiline':True]
