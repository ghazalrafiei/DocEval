['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' These declarations are highly likely to change in the future. Depend on them','line_number':10,'multiline':False]
['text':' at your own risk.','line_number':11,'multiline':False]
['text':' Needed for ObjectPrivateVisitor.','line_number':28,'multiline':False]
['text':'* These are the measurements used by Servo. ','line_number':71,'multiline':True]
['text':' do nothing ','line_number':105,'multiline':True]
['text':' namespace JS','line_number':120,'multiline':False]
['text':'*
 * In memory reporting, we have concept of "sundries", line items which are too
 * small to be worth reporting individually.  Under some circumstances, a memory
 * reporter gets tossed into the sundries bucket if it's smaller than
 * MemoryReportingSundriesThreshold() bytes.
 *
 * We need to define this value here, rather than in the code which actually
 * generates the memory reports, because NotableStringInfo uses this value.
 ','line_number':124,'multiline':True]
['text':'*
 * This hash policy avoids flattening ropes (which perturbs the site being
 * measured and requires a JSContext) at the expense of doing a FULL ROPE COPY
 * on every hash and match! Beware.
 ','line_number':135,'multiline':True]
['text':' This file features many classes with numerous size_t fields, and each such','line_number':146,'multiline':False]
['text':' class has one or more methods that need to operate on all of these fields.','line_number':147,'multiline':False]
['text':' Writing these individually is error-prone -- it's easy to add a new field','line_number':148,'multiline':False]
['text':' without updating all the required methods.  So we define a single macro list','line_number':149,'multiline':False]
['text':' in each class to name the fields (and notable characteristics of them), and','line_number':150,'multiline':False]
['text':' then use the following macros to transform those lists into the required','line_number':151,'multiline':False]
['text':' methods.','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':' - The |tabKind| value is used when measuring TabSizes.','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' - The |servoKind| value is used when measuring ServoSizes and also for','line_number':156,'multiline':False]
['text':'   the various sizeOfLiveGCThings() methods.','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' In some classes, one or more of the macro arguments aren't used.  We use '_'','line_number':159,'multiline':False]
['text':' for those.','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' Avoid self-comparison warnings by comparing enums indirectly. ','line_number':169,'multiline':True]
['text':' namespace js','line_number':179,'multiline':False]
['text':'*
 * Holds data about a notable class (one whose combined object and shape
 * instances use more than a certain amount of memory) so we can report it
 * individually.
 *
 * The only difference between this class and ClassInfo is that this class
 * holds a copy of the filename.
 ','line_number':267,'multiline':True]
['text':'* Data for tracking JIT-code memory usage. ','line_number':285,'multiline':True]
['text':'* Data for tracking GC memory usage. ','line_number':305,'multiline':True]
['text':' |nurseryDecommitted| is marked as NonHeap rather than GCHeapDecommitted','line_number':307,'multiline':False]
['text':' because we don't consider the nursery to be part of the GC heap.','line_number':308,'multiline':False]
['text':'*
 * This class holds information about the memory taken up by identical copies of
 * a particular string.  Multiple JSStrings may have their sizes aggregated
 * together into one StringInfo object.  Note that two strings with identical
 * chars will not be aggregated together if one is a short string and the other
 * is not.
 ','line_number':330,'multiline':True]
['text':' How many copies of the string have we seen?','line_number':377,'multiline':False]
['text':'*
 * Holds data about a notable string (one which, counting all duplicates, uses
 * more than a certain amount of memory) so we can report it individually.
 *
 * The only difference between this class and StringInfo is that
 * NotableStringInfo holds a copy of some or all of the string's chars.
 ','line_number':382,'multiline':True]
['text':'*
 * This class holds information about the memory taken up by script sources
 * from a particular file.
 ','line_number':402,'multiline':True]
['text':' How many ScriptSources come from this file? (It','line_number':434,'multiline':False]
['text':' can be more than one in XML files that have','line_number':435,'multiline':False]
['text':' multiple scripts in CDATA sections.)','line_number':436,'multiline':False]
['text':'*
 * Holds data about a notable script source file (one whose combined
 * script sources use more than a certain amount of memory) so we can report it
 * individually.
 *
 * The only difference between this class and ScriptSourceInfo is that this
 * class holds a copy of the filename.
 ','line_number':440,'multiline':True]
['text':'*
 * Measurements that not associated with any individual runtime.
 ','line_number':476,'multiline':True]
['text':'*
 * These measurements relate directly to the JSRuntime, and not to zones,
 * compartments, and realms within it.
 ','line_number':494,'multiline':True]
['text':' The script source measurements in |scriptSourceInfo| are initially for','line_number':524,'multiline':False]
['text':' all script sources.  At the end, if the measurement granularity is','line_number':525,'multiline':False]
['text':' FineGrained, we subtract the measurements of the notable script sources','line_number':526,'multiline':False]
['text':' and move them into |notableScriptSources|.','line_number':527,'multiline':False]
['text':' |allScriptSources| is only used transiently.  During the reporting phase','line_number':535,'multiline':False]
['text':' it is filled with info about every script source in the runtime.  It's','line_number':536,'multiline':False]
['text':' then used to fill in |notableScriptSources| (which actually gets','line_number':537,'multiline':False]
['text':' reported), and immediately discarded afterwards.','line_number':538,'multiline':False]
['text':' These string measurements are initially for all strings.  At the end,','line_number':699,'multiline':False]
['text':' if the measurement granularity is FineGrained, we subtract the','line_number':700,'multiline':False]
['text':' measurements of the notable script sources and move them into','line_number':701,'multiline':False]
['text':' |notableStrings|.','line_number':702,'multiline':False]
['text':' This field can be used by embedders.','line_number':707,'multiline':False]
['text':' |allStrings| is only used transiently.  During the zone traversal it is','line_number':714,'multiline':False]
['text':' filled with info about every string in the zone.  It's then used to fill','line_number':715,'multiline':False]
['text':' in |notableStrings| (which actually gets reported), and immediately','line_number':716,'multiline':False]
['text':' discarded afterwards.','line_number':717,'multiline':False]
['text':' We assume that |objectsPrivate| is on the malloc heap, but it's not','line_number':726,'multiline':False]
['text':' actually guaranteed. But for Servo, at least, it's a moot point because','line_number':727,'multiline':False]
['text':' it doesn't provide an ObjectPrivateVisitor so the value will always be','line_number':728,'multiline':False]
['text':' zero.','line_number':729,'multiline':False]
['text':' disallow copying','line_number':750,'multiline':False]
['text':' The class measurements in |classInfo| are initially for all classes.  At','line_number':782,'multiline':False]
['text':' the end, if the measurement granularity is FineGrained, we subtract the','line_number':783,'multiline':False]
['text':' measurements of the notable classes and move them into |notableClasses|.','line_number':784,'multiline':False]
['text':' This field can be used by embedders.','line_number':786,'multiline':False]
['text':' These are similar to |allStrings| and |notableStrings| in ZoneStats.','line_number':792,'multiline':False]
['text':' |gcHeapChunkTotal| is ignored because it's the sum of all the other','line_number':804,'multiline':False]
['text':' values. |gcHeapGCThings| is ignored because it's the sum of some of the','line_number':805,'multiline':False]
['text':' values from the zones and compartments. Both of those values are not','line_number':806,'multiline':False]
['text':' reported directly, but are just present for sanity-checking other','line_number':807,'multiline':False]
['text':' values.','line_number':808,'multiline':False]
['text':' Here's a useful breakdown of the GC heap.','line_number':820,'multiline':False]
['text':'','line_number':821,'multiline':False]
['text':' - rtStats.gcHeapChunkTotal','line_number':822,'multiline':False]
['text':'   - decommitted bytes','line_number':823,'multiline':False]
['text':'     - rtStats.gcHeapDecommittedPages','line_number':824,'multiline':False]
['text':'         (decommitted pages in non-empty chunks)','line_number':825,'multiline':False]
['text':'   - unused bytes','line_number':826,'multiline':False]
['text':'     - rtStats.gcHeapUnusedChunks (empty chunks)','line_number':827,'multiline':False]
['text':'     - rtStats.gcHeapUnusedArenas (empty arenas within non-empty chunks)','line_number':828,'multiline':False]
['text':'     - rtStats.zTotals.unusedGCThings.totalSize()','line_number':829,'multiline':False]
['text':'         (empty GC thing slots within non-empty arenas)','line_number':830,'multiline':False]
['text':'   - used bytes','line_number':831,'multiline':False]
['text':'     - rtStats.gcHeapChunkAdmin','line_number':832,'multiline':False]
['text':'     - rtStats.zTotals.gcHeapArenaAdmin','line_number':833,'multiline':False]
['text':'     - rtStats.gcHeapGCThings (in-use GC things)','line_number':834,'multiline':False]
['text':'       == (rtStats.zTotals.sizeOfLiveGCThings() +','line_number':835,'multiline':False]
['text':'           rtStats.cTotals.sizeOfLiveGCThings())','line_number':836,'multiline':False]
['text':'','line_number':837,'multiline':False]
['text':' It's possible that some pages in empty chunks may be decommitted, but','line_number':838,'multiline':False]
['text':' we don't count those under rtStats.gcHeapDecommittedPages because (a)','line_number':839,'multiline':False]
['text':' it's rare, and (b) this means that rtStats.gcHeapUnusedChunks is a','line_number':840,'multiline':False]
['text':' multiple of the chunk size, which is good.','line_number':841,'multiline':False]
['text':' The sum of this runtime's realms' measurements.','line_number':852,'multiline':False]
['text':' The sum of this runtime's zones' measurements.','line_number':853,'multiline':False]
['text':' Within CollectRuntimeStats, this method is called for each JS object','line_number':872,'multiline':False]
['text':' that has an nsISupports pointer.','line_number':873,'multiline':False]
['text':' A callback that gets a JSObject's nsISupports pointer, if it has one.','line_number':876,'multiline':False]
['text':' Note: this function does *not* addref |iface|.','line_number':877,'multiline':False]
['text':' namespace JS','line_number':910,'multiline':False]
['text':' js_MemoryMetrics_h ','line_number':919,'multiline':True]
