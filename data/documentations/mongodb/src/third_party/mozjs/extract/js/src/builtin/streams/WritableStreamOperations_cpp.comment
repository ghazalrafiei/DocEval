['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Writable stream abstract operations. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT','line_number':11,'multiline':False]
['text':' uint32_t','line_number':13,'multiline':False]
['text':' JS_ReportErrorASCII','line_number':15,'multiline':False]
['text':' js::PromiseRejectedWithPendingError','line_number':17,'multiline':False]
['text':' js::WritableStream','line_number':18,'multiline':False]
['text':' js::WritableStreamDefaultController{,Close}, js::WritableStream::controller','line_number':19,'multiline':False]
['text':' js::WritableStreamControllerErrorSteps','line_number':20,'multiline':False]
['text':' js::WritableStreamDefaultWriterEnsureReadyPromiseRejected','line_number':21,'multiline':False]
['text':' JS::CallArgs{,FromVp}','line_number':22,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':23,'multiline':False]
['text':' JS::{Reject,Resolve}Promise','line_number':24,'multiline':False]
['text':' JS::Handle, JS::Rooted','line_number':25,'multiline':False]
['text':' JS::Value, JS::ObjecValue, JS::UndefinedHandleValue','line_number':26,'multiline':False]
['text':' JS::Compartment','line_number':27,'multiline':False]
['text':' JSContext','line_number':28,'multiline':False]
['text':' js::ListObject','line_number':29,'multiline':False]
['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':30,'multiline':False]
['text':' js::NewHandler, js::TargetFromHandler','line_number':32,'multiline':False]
['text':' js::SetSettledPromiseIsHandled','line_number':33,'multiline':False]
['text':' js::ResolveUnwrappedPromiseWithUndefined, js::RejectUnwrappedPromiseWithError','line_number':34,'multiline':False]
['text':' js::UnwrapWriterFromStream','line_number':35,'multiline':False]
['text':' js::WritableStreamDefaultWriter::closedPromise','line_number':36,'multiline':False]
['text':' JS::Compartment::wrap, js::UnwrapAndDowncastObject','line_number':37,'multiline':False]
['text':' JSContext::check','line_number':38,'multiline':False]
['text':' js::NewObjectWithClassProto','line_number':39,'multiline':False]
['text':' js::{AppendTo,StoreNew}ListInFixedSlot','line_number':40,'multiline':False]
['text':' js::AutoRealm','line_number':41,'multiline':False]
['text':'** 4.3. General writable stream abstract operations. *********************','line_number':61,'multiline':True]
['text':'*
 * Streams spec, 4.3.4. InitializeWritableStream ( stream )
 ','line_number':63,'multiline':True]
['text':' static ','line_number':66,'multiline':True]
['text':' = nullptr ','line_number':67,'multiline':True]
['text':' = nullptr ','line_number':68,'multiline':True]
['text':' In the spec, InitializeWritableStream is always passed a newly created','line_number':71,'multiline':False]
['text':' WritableStream object. We instead create it here and return it below.','line_number':72,'multiline':False]
['text':' Step 1: Set stream.[[state]] to "writable".','line_number':83,'multiline':False]
['text':' Step 2: Set stream.[[storedError]], stream.[[writer]],','line_number':86,'multiline':False]
['text':'         stream.[[writableStreamController]],','line_number':87,'multiline':False]
['text':'         stream.[[inFlightWriteRequest]], stream.[[closeRequest]],','line_number':88,'multiline':False]
['text':'         stream.[[inFlightCloseRequest]] and stream.[[pendingAbortRequest]]','line_number':89,'multiline':False]
['text':'         to undefined.','line_number':90,'multiline':False]
['text':' Step 3: Set stream.[[writeRequests]] to a new empty List.','line_number':100,'multiline':False]
['text':' Step 4: Set stream.[[backpressure]] to false.','line_number':106,'multiline':False]
['text':'*
 * Streams spec, 4.3.6.
 *      WritableStreamAbort ( stream, reason )
 *
 * Note: The object (a promise) returned by this function is in the current
 *       compartment and does not require special wrapping to be put to use.
 ','line_number':123,'multiline':True]
['text':' Step 1: Let state be stream.[[state]].','line_number':135,'multiline':False]
['text':' Step 2: If state is "closed" or "errored", return a promise resolved with','line_number':136,'multiline':False]
['text':'         undefined.','line_number':137,'multiline':False]
['text':' Step 3: If stream.[[pendingAbortRequest]] is not undefined, return','line_number':142,'multiline':False]
['text':'         stream.[[pendingAbortRequest]].[[promise]].','line_number':143,'multiline':False]
['text':' Step 4: Assert: state is "writable" or "erroring".','line_number':153,'multiline':False]
['text':' Step 7: Let promise be a new promise (reordered).','line_number':156,'multiline':False]
['text':' Step 5: Let wasAlreadyErroring be false.','line_number':162,'multiline':False]
['text':' Step 6: If state is "erroring",','line_number':163,'multiline':False]
['text':' Step 6.a: Set wasAlreadyErroring to true.','line_number':164,'multiline':False]
['text':' Step 6.b: Set reason to undefined.','line_number':165,'multiline':False]
['text':' Step 8: Set stream.[[pendingAbortRequest]] to','line_number':170,'multiline':False]
['text':'         Record {[[promise]]: promise, [[reason]]: reason,','line_number':171,'multiline':False]
['text':'                 [[wasAlreadyErroring]]: wasAlreadyErroring}.','line_number':172,'multiline':False]
['text':' Step 9: If wasAlreadyErroring is false, perform','line_number':189,'multiline':False]
['text':'         ! WritableStreamStartErroring(stream, reason).','line_number':190,'multiline':False]
['text':' Step 10: Return promise.','line_number':197,'multiline':False]
['text':'*
 * Streams spec, 4.3.7.
 *      WritableStreamClose ( stream )
 *
 * Note: The object (a promise) returned by this function is in the current
 *       compartment and does not require special wrapping to be put to use.
 ','line_number':201,'multiline':True]
['text':' Step 1: Let state be stream.[[state]].','line_number':210,'multiline':False]
['text':' Step 2: If state is "closed" or "errored", return a promise rejected with a','line_number':211,'multiline':False]
['text':'         TypeError exception.','line_number':212,'multiline':False]
['text':' Step 3: Assert: state is "writable" or "erroring".','line_number':219,'multiline':False]
['text':' Step 4: Assert: ! WritableStreamCloseQueuedOrInFlight(stream) is false.','line_number':222,'multiline':False]
['text':' Step 5: Let promise be a new promise.','line_number':225,'multiline':False]
['text':' Step 6: Set stream.[[closeRequest]] to promise.','line_number':231,'multiline':False]
['text':' Step 7: Let writer be stream.[[writer]].','line_number':242,'multiline':False]
['text':' Step 8: If writer is not undefined, and stream.[[backpressure]] is true,','line_number':243,'multiline':False]
['text':'         and state is "writable", resolve writer.[[readyPromise]] with','line_number':244,'multiline':False]
['text':'         undefined.','line_number':245,'multiline':False]
['text':' Step 9: Perform','line_number':260,'multiline':False]
['text':'         ! WritableStreamDefaultControllerClose(','line_number':261,'multiline':False]
['text':'               stream.[[writableStreamController]]).','line_number':262,'multiline':False]
['text':' Step 10: Return promise.','line_number':269,'multiline':False]
['text':'** 4.4. Writable stream abstract operations used by controllers **********','line_number':273,'multiline':True]
['text':'*
 * Streams spec, 4.4.1.
 *      WritableStreamAddWriteRequest ( stream )
 ','line_number':275,'multiline':True]
['text':' Step 1: Assert: ! IsWritableStreamLocked(stream) is true.','line_number':281,'multiline':False]
['text':' Step 2: Assert: stream.[[state]] is "writable".','line_number':284,'multiline':False]
['text':' Step 3: Let promise be a new promise.','line_number':287,'multiline':False]
['text':' Step 4: Append promise as the last element of stream.[[writeRequests]].','line_number':293,'multiline':False]
['text':' Step 5: Return promise.','line_number':299,'multiline':False]
['text':'*
 * Streams spec, 4.4.2.
 *      WritableStreamDealWithRejection ( stream, error )
 ','line_number':303,'multiline':True]
['text':' Step 1: Let state be stream.[[state]].','line_number':312,'multiline':False]
['text':' Step 2: If state is "writable",','line_number':313,'multiline':False]
['text':' Step 2a: Perform ! WritableStreamStartErroring(stream, error).','line_number':315,'multiline':False]
['text':' Step 2b: Return.','line_number':316,'multiline':False]
['text':' Step 3: Assert: state is "erroring".','line_number':320,'multiline':False]
['text':' Step 4: Perform ! WritableStreamFinishErroring(stream).','line_number':323,'multiline':False]
['text':'*
 * Streams spec, 4.4.3.
 *      WritableStreamStartErroring ( stream, reason )
 ','line_number':330,'multiline':True]
['text':' Step 1: Assert: stream.[[storedError]] is undefined.','line_number':339,'multiline':False]
['text':' Step 2: Assert: stream.[[state]] is "writable".','line_number':342,'multiline':False]
['text':' Step 3: Let controller be stream.[[writableStreamController]].','line_number':345,'multiline':False]
['text':' Step 4: Assert: controller is not undefined.','line_number':346,'multiline':False]
['text':' Step 5: Set stream.[[state]] to "erroring".','line_number':351,'multiline':False]
['text':' Step 6: Set stream.[[storedError]] to reason.','line_number':354,'multiline':False]
['text':' Step 7: Let writer be stream.[[writer]].','line_number':364,'multiline':False]
['text':' Step 8: If writer is not undefined, perform','line_number':365,'multiline':False]
['text':'         ! WritableStreamDefaultWriterEnsureReadyPromiseRejected(','line_number':366,'multiline':False]
['text':'             writer, reason).','line_number':367,'multiline':False]
['text':' Step 9: If ! WritableStreamHasOperationMarkedInFlight(stream) is false and','line_number':381,'multiline':False]
['text':'         controller.[[started]] is true, perform','line_number':382,'multiline':False]
['text':'         ! WritableStreamFinishErroring(stream).','line_number':383,'multiline':False]
['text':'*
 * Streams spec, 4.4.4 WritableStreamFinishErroring ( stream )
 *     Step 13: Upon fulfillment of promise, [...]
 ','line_number':394,'multiline':True]
['text':' Step 13.a: Resolve abortRequest.[[promise]] with undefined.','line_number':402,'multiline':False]
['text':' Step 13.b: Perform','line_number':408,'multiline':False]
['text':'            ! WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream).','line_number':409,'multiline':False]
['text':'*
 * Streams spec, 4.4.4 WritableStreamFinishErroring ( stream )
 *     Step 14: Upon rejection of promise with reason reason, [...]
 ','line_number':425,'multiline':True]
['text':' Step 14.a: Reject abortRequest.[[promise]] with reason.','line_number':433,'multiline':False]
['text':' Step 14.b: Perform','line_number':439,'multiline':False]
['text':'            ! WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream).','line_number':440,'multiline':False]
['text':'*
 * Streams spec, 4.4.4.
 *      WritableStreamFinishErroring ( stream )
 ','line_number':456,'multiline':True]
['text':' Step 1: Assert: stream.[[state]] is "erroring".','line_number':462,'multiline':False]
['text':' Step 2: Assert: ! WritableStreamHasOperationMarkedInFlight(stream) is','line_number':465,'multiline':False]
['text':'         false.','line_number':466,'multiline':False]
['text':' Step 3: Set stream.[[state]] to "errored".','line_number':469,'multiline':False]
['text':' Step 4: Perform ! stream.[[writableStreamController]].[[ErrorSteps]]().','line_number':472,'multiline':False]
['text':' Step 5: Let storedError be stream.[[storedError]].','line_number':481,'multiline':False]
['text':' Step 6: Repeat for each writeRequest that is an element of','line_number':487,'multiline':False]
['text':'         stream.[[writeRequests]],','line_number':488,'multiline':False]
['text':' Step 6.a: Reject writeRequest with storedError.','line_number':495,'multiline':False]
['text':' Step 7: Set stream.[[writeRequests]] to an empty List.','line_number':503,'multiline':False]
['text':' We optimize this to discard the list entirely.  (A brief scan of the','line_number':504,'multiline':False]
['text':' streams spec should verify that [[writeRequests]] is never accessed on a','line_number':505,'multiline':False]
['text':' stream when |stream.[[state]] === "errored"|, set in step 3 above.)','line_number':506,'multiline':False]
['text':' Step 8: If stream.[[pendingAbortRequest]] is undefined,','line_number':509,'multiline':False]
['text':' Step 8.a: Perform','line_number':511,'multiline':False]
['text':'           ! WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream).','line_number':512,'multiline':False]
['text':' Step 8.b: Return.','line_number':513,'multiline':False]
['text':' Step 9: Let abortRequest be stream.[[pendingAbortRequest]].','line_number':518,'multiline':False]
['text':' Step 10: Set stream.[[pendingAbortRequest]] to undefined.','line_number':519,'multiline':False]
['text':' Step 11: If abortRequest.[[wasAlreadyErroring]] is true,','line_number':531,'multiline':False]
['text':' Step 11.a: Reject abortRequest.[[promise]] with storedError.','line_number':533,'multiline':False]
['text':' Step 11.b: Perform','line_number':539,'multiline':False]
['text':'            ! WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream).','line_number':540,'multiline':False]
['text':' Step 11.c: Return.','line_number':541,'multiline':False]
['text':' Step 12: Let promise be','line_number':546,'multiline':False]
['text':'          ! stream.[[writableStreamController]].[[AbortSteps]](','line_number':547,'multiline':False]
['text':'                abortRequest.[[reason]]).','line_number':548,'multiline':False]
['text':' Step 13: Upon fulfillment of promise, [...]','line_number':568,'multiline':False]
['text':' Step 14: Upon rejection of promise with reason reason, [...]','line_number':569,'multiline':False]
['text':'*
 * Streams spec, 4.4.5.
 *      WritableStreamFinishInFlightWrite ( stream )
 ','line_number':586,'multiline':True]
['text':' Step 1: Assert: stream.[[inFlightWriteRequest]] is not undefined.','line_number':592,'multiline':False]
['text':' Step 2: Resolve stream.[[inFlightWriteRequest]] with undefined.','line_number':595,'multiline':False]
['text':' Step 3: Set stream.[[inFlightWriteRequest]] to undefined.','line_number':601,'multiline':False]
['text':'*
 * Streams spec, 4.4.6.
 *      WritableStreamFinishInFlightWriteWithError ( stream, error )
 ','line_number':608,'multiline':True]
['text':' Step 1: Assert: stream.[[inFlightWriteRequest]] is not undefined.','line_number':617,'multiline':False]
['text':' Step 2:  Reject stream.[[inFlightWriteRequest]] with error.','line_number':620,'multiline':False]
['text':' Step 3:  Set stream.[[inFlightWriteRequest]] to undefined.','line_number':626,'multiline':False]
['text':' Step 4:  Assert: stream.[[state]] is "writable" or "erroring".','line_number':629,'multiline':False]
['text':' Step 5:  Perform ! WritableStreamDealWithRejection(stream, error).','line_number':632,'multiline':False]
['text':'*
 * Streams spec, 4.4.7.
 *      WritableStreamFinishInFlightClose ( stream )
 ','line_number':636,'multiline':True]
['text':' Step 1: Assert: stream.[[inFlightCloseRequest]] is not undefined.','line_number':642,'multiline':False]
['text':' Step 2: Resolve stream.[[inFlightCloseRequest]] with undefined.','line_number':645,'multiline':False]
['text':' Step 3: Set stream.[[inFlightCloseRequest]] to undefined.','line_number':651,'multiline':False]
['text':' Step 4: Let state be stream.[[state]].','line_number':655,'multiline':False]
['text':' Step 5: Assert: stream.[[state]] is "writable" or "erroring".','line_number':656,'multiline':False]
['text':' Step 6: If state is "erroring",','line_number':659,'multiline':False]
['text':' Step 6.a: Set stream.[[storedError]] to undefined.','line_number':661,'multiline':False]
['text':' Step 6.b: If stream.[[pendingAbortRequest]] is not undefined,','line_number':664,'multiline':False]
['text':' Step 6.b.i: Resolve stream.[[pendingAbortRequest]].[[promise]] with','line_number':666,'multiline':False]
['text':'             undefined.','line_number':667,'multiline':False]
['text':' Step 6.b.ii: Set stream.[[pendingAbortRequest]] to undefined.','line_number':673,'multiline':False]
['text':' Step 7: Set stream.[[state]] to "closed".','line_number':678,'multiline':False]
['text':' Step 8: Let writer be stream.[[writer]].','line_number':681,'multiline':False]
['text':' Step 9: If writer is not undefined, resolve writer.[[closedPromise]] with','line_number':682,'multiline':False]
['text':'         undefined.','line_number':683,'multiline':False]
['text':' Step 10: Assert: stream.[[pendingAbortRequest]] is undefined.','line_number':697,'multiline':False]
['text':' Step 11: Assert: stream.[[storedError]] is undefined.','line_number':700,'multiline':False]
['text':'*
 * Streams spec, 4.4.8.
 *      WritableStreamFinishInFlightCloseWithError ( stream, error )
 ','line_number':706,'multiline':True]
['text':' Step 1: Assert: stream.[[inFlightCloseRequest]] is not undefined.','line_number':715,'multiline':False]
['text':' Step 2: Reject stream.[[inFlightCloseRequest]] with error.','line_number':719,'multiline':False]
['text':' Step 3: Set stream.[[inFlightCloseRequest]] to undefined.','line_number':725,'multiline':False]
['text':' Step 4: Assert: stream.[[state]] is "writable" or "erroring".','line_number':728,'multiline':False]
['text':' Step 5: If stream.[[pendingAbortRequest]] is not undefined,','line_number':731,'multiline':False]
['text':' Step 5.a: Reject stream.[[pendingAbortRequest]].[[promise]] with error.','line_number':733,'multiline':False]
['text':' Step 5.b: Set stream.[[pendingAbortRequest]] to undefined.','line_number':739,'multiline':False]
['text':' Step 6: Perform ! WritableStreamDealWithRejection(stream, error).','line_number':743,'multiline':False]
['text':'*
 * Streams spec, 4.4.9.
 *      WritableStreamCloseQueuedOrInFlight ( stream )
 ','line_number':747,'multiline':True]
['text':' Step 1: If stream.[[closeRequest]] is undefined and','line_number':753,'multiline':False]
['text':'         stream.[[inFlightCloseRequest]] is undefined, return false.','line_number':754,'multiline':False]
['text':' Step 2: Return true.','line_number':755,'multiline':False]
['text':'*
 * Streams spec, 4.4.10.
 *      WritableStreamHasOperationMarkedInFlight ( stream )
 ','line_number':759,'multiline':True]
['text':' Step 1: If stream.[[inFlightWriteRequest]] is undefined and','line_number':765,'multiline':False]
['text':'         controller.[[inFlightCloseRequest]] is undefined, return false.','line_number':766,'multiline':False]
['text':' Step 2: Return true.','line_number':767,'multiline':False]
['text':'*
 * Streams spec, 4.4.11.
 *      WritableStreamMarkCloseRequestInFlight ( stream )
 ','line_number':772,'multiline':True]
['text':' Step 1: Assert: stream.[[inFlightCloseRequest]] is undefined.','line_number':778,'multiline':False]
['text':' Step 2: Assert: stream.[[closeRequest]] is not undefined.','line_number':781,'multiline':False]
['text':' Step 3: Set stream.[[inFlightCloseRequest]] to stream.[[closeRequest]].','line_number':784,'multiline':False]
['text':' Step 4: Set stream.[[closeRequest]] to undefined.','line_number':785,'multiline':False]
['text':'*
 * Streams spec, 4.4.12.
 *      WritableStreamMarkFirstWriteRequestInFlight ( stream )
 ','line_number':789,'multiline':True]
['text':' Step 1: Assert: stream.[[inFlightWriteRequest]] is undefined.','line_number':795,'multiline':False]
['text':' Step 2: Assert: stream.[[writeRequests]] is not empty.','line_number':798,'multiline':False]
['text':' Step 3: Let writeRequest be the first element of stream.[[writeRequests]].','line_number':801,'multiline':False]
['text':' Step 4: Remove writeRequest from stream.[[writeRequests]], shifting all','line_number':802,'multiline':False]
['text':'         other elements downward (so that the second becomes the first, and','line_number':803,'multiline':False]
['text':'         so on).','line_number':804,'multiline':False]
['text':' Step 5: Set stream.[[inFlightWriteRequest]] to writeRequest.','line_number':805,'multiline':False]
['text':' In our implementation, we model [[inFlightWriteRequest]] as merely the','line_number':806,'multiline':False]
['text':' first element of [[writeRequests]], plus a flag indicating there's an','line_number':807,'multiline':False]
['text':' in-flight request.  Set the flag and be done with it.','line_number':808,'multiline':False]
['text':'*
 * Streams spec, 4.4.13.
 *      WritableStreamRejectCloseAndClosedPromiseIfNeeded ( stream )
 ','line_number':812,'multiline':True]
['text':' Step 1: Assert: stream.[[state]] is "errored".','line_number':818,'multiline':False]
['text':' Step 2: If stream.[[closeRequest]] is not undefined,','line_number':826,'multiline':False]
['text':' Step 2.a: Assert: stream.[[inFlightCloseRequest]] is undefined.','line_number':828,'multiline':False]
['text':' Step 2.b: Reject stream.[[closeRequest]] with stream.[[storedError]].','line_number':831,'multiline':False]
['text':' Step 2.c: Set stream.[[closeRequest]] to undefined.','line_number':837,'multiline':False]
['text':' Step 3: Let writer be stream.[[writer]].','line_number':841,'multiline':False]
['text':' Step 4: If writer is not undefined,','line_number':842,'multiline':False]
['text':' Step 4.a: Reject writer.[[closedPromise]] with stream.[[storedError]].','line_number':850,'multiline':False]
['text':' Step 4.b: Set writer.[[closedPromise]].[[PromiseIsHandled]] to true.','line_number':856,'multiline':False]
['text':'*
 * Streams spec, 4.4.14.
 *      WritableStreamUpdateBackpressure ( stream, backpressure )
 ','line_number':870,'multiline':True]
['text':' Step 1: Assert: stream.[[state]] is "writable".','line_number':876,'multiline':False]
['text':' Step 2: Assert: ! WritableStreamCloseQueuedOrInFlight(stream) is false.','line_number':879,'multiline':False]
['text':' Step 3: Let writer be stream.[[writer]].','line_number':882,'multiline':False]
['text':' Step 4: If writer is not undefined and backpressure is not','line_number':883,'multiline':False]
['text':'         stream.[[backpressure]],','line_number':884,'multiline':False]
['text':' Step 4.a: If backpressure is true, set writer.[[readyPromise]] to a new','line_number':893,'multiline':False]
['text':'           promise.','line_number':894,'multiline':False]
['text':' Step 4.b: Otherwise,','line_number':907,'multiline':False]
['text':' Step 4.b.i: Assert: backpressure is false.  (guaranteed by type)','line_number':908,'multiline':False]
['text':' Step 4.b.ii: Resolve writer.[[readyPromise]] with undefined.','line_number':909,'multiline':False]
['text':' Step 5: Set stream.[[backpressure]] to backpressure.','line_number':917,'multiline':False]
