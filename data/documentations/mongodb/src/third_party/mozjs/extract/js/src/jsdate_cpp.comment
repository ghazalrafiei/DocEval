['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * JS date methods.
 *
 * "For example, OS/360 devotes 26 bytes of the permanently
 *  resident date-turnover routine to the proper handling of
 *  December 31 on leap years (when it is Day 366).  That
 *  might have been left to the operator."
 *
 * Frederick Brooks, 'The Second-System Effect'.
 ','line_number':7,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':38,'multiline':False]
['text':' JS::GetBuiltinClass','line_number':40,'multiline':False]
['text':' js_*_str','line_number':53,'multiline':False]
['text':' For js::UnwrapAndTypeCheckThis','line_number':55,'multiline':False]
['text':' When this value is non-zero, we'll round the time by this resolution.','line_number':77,'multiline':False]
['text':' This is not implemented yet, but we will use this to know to jitter the time','line_number':79,'multiline':False]
['text':' in the JS shell','line_number':80,'multiline':False]
['text':' The callback we will use for the Gecko implementation of Timer','line_number':82,'multiline':False]
['text':' Clamping/Jittering','line_number':83,'multiline':False]
['text':'
 * The JS 'Date' object is patterned after the Java 'Date' object.
 * Here is a script:
 *
 *    today = new Date();
 *
 *    print(today.toLocaleString());
 *
 *    weekDay = today.getDay();
 *
 *
 * These Java (and ECMA-262) methods are supported:
 *
 *     UTC
 *     getDate (getUTCDate)
 *     getDay (getUTCDay)
 *     getHours (getUTCHours)
 *     getMinutes (getUTCMinutes)
 *     getMonth (getUTCMonth)
 *     getSeconds (getUTCSeconds)
 *     getMilliseconds (getUTCMilliseconds)
 *     getTime
 *     getTimezoneOffset
 *     getYear
 *     getFullYear (getUTCFullYear)
 *     parse
 *     setDate (setUTCDate)
 *     setHours (setUTCHours)
 *     setMinutes (setUTCMinutes)
 *     setMonth (setUTCMonth)
 *     setSeconds (setUTCSeconds)
 *     setMilliseconds (setUTCMilliseconds)
 *     setTime
 *     setYear (setFullYear, setUTCFullYear)
 *     toGMTString (toUTCString)
 *     toLocaleString
 *     toString
 *
 *
 * These Java methods are not supported
 *
 *     setDay
 *     before
 *     after
 *     equals
 *     hashCode
 ','line_number':87,'multiline':True]
['text':' namespace','line_number':160,'multiline':False]
['text':' ES2019 draft rev 0ceb728a1adbffe42b26972a6541fd7f398b1557','line_number':162,'multiline':False]
['text':' 5.2.5 Mathematical Operations','line_number':163,'multiline':False]
['text':' ES5 15.9.1.3. ','line_number':179,'multiline':True]
['text':'
   * Adjust the year if the approximation was wrong.  Since the year was
   * computed using the average number of ms per year, it will usually
   * be wrong for dates within several hours of a year transition.
   ','line_number':211,'multiline':True]
['text':' ES5 15.9.1.4. ','line_number':230,'multiline':True]
['text':' ES5 15.9.1.5. ','line_number':281,'multiline':True]
['text':' ES5 15.9.1.6. ','line_number':338,'multiline':True]
['text':'
   * We can't assert TimeClip(t) == t because we call this function with
   * local times, which can be offset outside TimeClip's permitted range.
   ','line_number':340,'multiline':True]
['text':'
   * The following array contains the day of year for the first day of
   * each month, where index 0 is January, and day 0 is January 1.
   ','line_number':353,'multiline':True]
['text':' ES5 15.9.1.12 (out of order to accommodate DaylightSavingTA). ','line_number':368,'multiline':True]
['text':' Step 1. ','line_number':370,'multiline':True]
['text':' Steps 2-4. ','line_number':375,'multiline':True]
['text':' Step 5. ','line_number':380,'multiline':True]
['text':' Step 6. ','line_number':383,'multiline':True]
['text':' Steps 7-8. ','line_number':386,'multiline':True]
['text':' ES5 15.9.1.13 (out of order to accommodate DaylightSavingTA). ','line_number':395,'multiline':True]
['text':' Step 1. ','line_number':397,'multiline':True]
['text':' Step 2. ','line_number':402,'multiline':True]
['text':' ES2019 draft rev 0ceb728a1adbffe42b26972a6541fd7f398b1557','line_number':450,'multiline':False]
['text':' 20.3.1.7 LocalTZA ( t, isUTC )','line_number':451,'multiline':False]
['text':' ES2019 draft rev 0ceb728a1adbffe42b26972a6541fd7f398b1557','line_number':461,'multiline':False]
['text':' 20.3.1.8 LocalTime ( t )','line_number':462,'multiline':False]
['text':' ES2019 draft rev 0ceb728a1adbffe42b26972a6541fd7f398b1557','line_number':472,'multiline':False]
['text':' 20.3.1.9 UTC ( t )','line_number':473,'multiline':False]
['text':'
 * Find a year for which any given date will fall on the same weekday.
 *
 * This function should be used with caution when used other than
 * for determining DST; it hasn't been proven not to produce an
 * incorrect year for times near year boundaries.
 ','line_number':486,'multiline':True]
['text':'
   * Years and leap years on which Jan 1 is a Sunday, Monday, etc.
   *
   * yearStartingWith[0][i] is an example non-leap year where
   * Jan 1 appears on Sunday (i == 0), Monday (i == 1), etc.
   *
   * yearStartingWith[1][i] is an example leap year where
   * Jan 1 appears on Sunday (i == 0), Monday (i == 1), etc.
   *
   * Keep two different mappings, one for past years (< 1970), and a
   * different one for future years (> 2037).
   ','line_number':494,'multiline':True]
['text':' Return true if |t| is representable as a 32-bit time_t variable, that means','line_number':523,'multiline':False]
['text':' the year is in [1970, 2038).','line_number':524,'multiline':False]
['text':' ES5 15.9.1.8. ','line_number':529,'multiline':True]
['text':'
   * If earlier than 1970 or after 2038, potentially beyond the ken of
   * many OSes, map it to an equivalent year before asking.
   ','line_number':535,'multiline':True]
['text':' ES5 15.9.1.9. ','line_number':558,'multiline':True]
['text':' Following the ES2017 specification creates undesirable results at DST','line_number':562,'multiline':False]
['text':' transitions. For example when transitioning from PST to PDT,','line_number':563,'multiline':False]
['text':' |new Date(2016,2,13,2,0,0).toTimeString()| returns the string value','line_number':564,'multiline':False]
['text':' "01:00:00 GMT-0800 (PST)" instead of "03:00:00 GMT-0700 (PDT)". Follow','line_number':565,'multiline':False]
['text':' V8 and subtract one hour before computing the offset.','line_number':566,'multiline':False]
['text':' Spec bug: https://bugs.ecmascript.org/show_bug.cgi?id=4007','line_number':567,'multiline':False]
['text':' JS_HAS_INTL_API && !MOZ_SYSTEM_ICU ','line_number':571,'multiline':True]
['text':' ES5 15.9.1.10. ','line_number':577,'multiline':True]
['text':' ES5 15.9.1.11. ','line_number':592,'multiline':True]
['text':' Step 1. ','line_number':594,'multiline':True]
['text':' Step 2. ','line_number':599,'multiline':True]
['text':' Step 3. ','line_number':602,'multiline':True]
['text':' Step 4. ','line_number':605,'multiline':True]
['text':' Step 5. ','line_number':608,'multiline':True]
['text':' Steps 6-7. ','line_number':611,'multiline':True]
['text':'*
 * end of ECMA 'support' functions
 ','line_number':615,'multiline':True]
['text':' ES2017 draft rev (TODO: Add git hash when PR 642 is merged.)','line_number':619,'multiline':False]
['text':' 20.3.3.4','line_number':620,'multiline':False]
['text':' Date.UTC(year [, month [, date [, hours [, minutes [, seconds [, ms]]]]]])','line_number':621,'multiline':False]
['text':' Step 1.','line_number':625,'multiline':False]
['text':' Step 2.','line_number':631,'multiline':False]
['text':' Step 3.','line_number':641,'multiline':False]
['text':' Step 4.','line_number':651,'multiline':False]
['text':' Step 5.','line_number':661,'multiline':False]
['text':' Step 6.','line_number':671,'multiline':False]
['text':' Step 7.','line_number':681,'multiline':False]
['text':' Step 8.','line_number':691,'multiline':False]
['text':' Step 9.','line_number':700,'multiline':False]
['text':'
 * Read and convert decimal digits from s[*i] into *result
 * while *i < limit.
 *
 * Succeed if any digits are converted. Advance *i only
 * as digits are consumed.
 ','line_number':707,'multiline':True]
['text':'
 * Read and convert decimal digits to the right of a decimal point,
 * representing a fractional integer, from s[*i] into *result
 * while *i < limit.
 *
 * Succeed if any digits are converted. Advance *i only
 * as digits are consumed.
 ','line_number':727,'multiline':True]
['text':'
 * Read and convert exactly n decimal digits from s[*i]
 * to s[min(*i+n,limit)] into *result.
 *
 * Succeed if exactly n digits are converted. Advance *i only
 * on success.
 ','line_number':749,'multiline':True]
['text':'
 * Read and convert n or less decimal digits from s[*i]
 * to s[min(*i+n,limit)] into *result.
 *
 * Succeed only if greater than zero but less than or equal to n digits are
 * converted. Advance *i only on success.
 ','line_number':769,'multiline':True]
['text':'
 * Parse a string according to the formats specified in section 20.3.1.16
 * of the ECMAScript standard. These formats are based upon a simplification
 * of the ISO 8601 Extended Format. As per the spec omitted month and day
 * values are defaulted to '01', omitted HH:mm:ss values are defaulted to '00'
 * and an omitted sss field is defaulted to '000'.
 *
 * For cross compatibility we allow the following extensions.
 *
 * These are:
 *
 *   Standalone time part:
 *     Any of the time formats below can be parsed without a date part.
 *     E.g. "T19:00:00Z" will parse successfully. The date part will then
 *     default to 1970-01-01.
 *
 *   'T' from the time part may be replaced with a space character:
 *     "1970-01-01 12:00:00Z" will parse successfully. Note that only a single
 *     space is permitted and this is not permitted in the standalone
 *     version above.
 *
 *   One or more decimal digits for milliseconds:
 *     The specification requires exactly three decimal digits for
 *     the fractional part but we allow for one or more digits.
 *
 *   Time zone specifier without ':':
 *     We allow the time zone to be specified without a ':' character.
 *     E.g. "T19:00:00+0700" is equivalent to "T19:00:00+07:00".
 *
 *   One or two digits for months, days, hours, minutes and seconds:
 *     The specification requires exactly two decimal digits for the fields
 *     above. We allow for one or two decimal digits. I.e. "1970-1-1" is
 *     equivalent to "1970-01-01".
 *
 * Date part:
 *
 *  Year:
 *     YYYY (eg 1997)
 *
 *  Year and month:
 *     YYYY-MM (eg 1997-07)
 *
 *  Complete date:
 *     YYYY-MM-DD (eg 1997-07-16)
 *
 * Time part:
 *
 *  Hours and minutes:
 *     Thh:mmTZD (eg T19:20+01:00)
 *
 *  Hours, minutes and seconds:
 *     Thh:mm:ssTZD (eg T19:20:30+01:00)
 *
 *  Hours, minutes, seconds and a decimal fraction of a second:
 *     Thh:mm:ss.sTZD (eg T19:20:30.45+01:00)
 *
 * where:
 *
 *   YYYY = four-digit year or six digit year as +YYYYYY or -YYYYYY
 *   MM   = one or two-digit month (01=January, etc.)
 *   DD   = one or two-digit day of month (01 through 31)
 *   hh   = one or two digits of hour (00 through 23) (am/pm NOT allowed)
 *   mm   = one or two digits of minute (00 through 59)
 *   ss   = one or two digits of second (00 through 59)
 *   sss  = one or more digits representing a decimal fraction of a second
 *   TZD  = time zone designator (Z or +hh:mm or -hh:mm or missing for local)
 ','line_number':795,'multiline':True]
['text':' Require standard format "[+00]1970-01-01" if a time part marker "T"','line_number':940,'multiline':False]
['text':' exists','line_number':941,'multiline':False]
['text':'
     * Non-standard extension to the ISO date format (permitted by ES5):
     * allow "-0700" as a time zone offset, not just "-07:00".
     ','line_number':975,'multiline':True]
['text':' ceil(1e8/365) + 1970','line_number':988,'multiline':False]
['text':' convert month to 0-based ','line_number':1000,'multiline':True]
['text':' clang-format off','line_number':1027,'multiline':False]
['text':' AM/PM','line_number':1028,'multiline':False]
['text':' Days of week.','line_number':1031,'multiline':False]
['text':' Months.','line_number':1039,'multiline':False]
['text':' Time zone abbreviations.','line_number':1052,'multiline':False]
['text':' clang-format on','line_number':1064,'multiline':False]
['text':' One of '+', '-', ':', '/', or 0 (the default value).','line_number':1094,'multiline':False]
['text':' Spaces, ASCII control characters, and commas are simply ignored.','line_number':1107,'multiline':False]
['text':' Parse delimiter characters.  Save them to the side for future use.','line_number':1112,'multiline':False]
['text':' Dashes are delimiters if they're immediately followed by a number field.','line_number':1118,'multiline':False]
['text':' If they're not followed by a number field, they're simply ignored.','line_number':1119,'multiline':False]
['text':' Skip over comments -- text inside matching parentheses.  (Comments','line_number':1127,'multiline':False]
['text':' themselves may contain comments as long as all the parentheses properly','line_number':1128,'multiline':False]
['text':' match up.  And apparently comments, including nested ones, may validly be','line_number':1129,'multiline':False]
['text':' terminated by end of input...)','line_number':1130,'multiline':False]
['text':' Parse a number field.','line_number':1147,'multiline':False]
['text':'
       * Allow TZA before the year, so 'Wed Nov 05 21:49:11 GMT-0800 1997'
       * works.
       *
       * Uses of seenPlusMinus allow ':' in TZA, so Java no-timezone style
       * of GMT+4:30 works.
       ','line_number':1163,'multiline':True]
['text':' Parse as a negative, possibly zero-padded year if','line_number':1173,'multiline':False]
['text':' 1. the preceding character is '-',','line_number':1174,'multiline':False]
['text':' 2. the TZA is not 'GMT' (tested by |tzOffset != 0|),','line_number':1175,'multiline':False]
['text':' 3. or a TZA was already parsed |seenPlusMinus == true|,','line_number':1176,'multiline':False]
['text':' 4. the part length is at least 4 (to parse '-08' as a TZA),','line_number':1177,'multiline':False]
['text':' 5. and we did not already parse a year |year < 0|.','line_number':1178,'multiline':False]
['text':'  && year>=0 ','line_number':1182,'multiline':True]
['text':' Make ':' case below change tzOffset. ','line_number':1183,'multiline':True]
['text':' offset ','line_number':1186,'multiline':True]
['text':' EG. "GMT-3" ','line_number':1188,'multiline':True]
['text':' eg "GMT-0430" ','line_number':1190,'multiline':True]
['text':' plus means east of GMT ','line_number':1193,'multiline':True]
['text':' Reject if not preceded by 'GMT' or if a time zone offset','line_number':1196,'multiline':False]
['text':' was already parsed.','line_number':1197,'multiline':False]
['text':'byte','line_number':1211,'multiline':True]
['text':'byte','line_number':1213,'multiline':True]
['text':'
         * Until it is determined that mon is the actual month, keep
         * it as 1-based rather than 0-based.
         ','line_number':1218,'multiline':True]
['text':'byte','line_number':1223,'multiline':True]
['text':'byte','line_number':1225,'multiline':True]
['text':' handle GMT-3:30 ','line_number':1232,'multiline':True]
['text':'byte','line_number':1239,'multiline':True]
['text':'byte','line_number':1241,'multiline':True]
['text':'byte','line_number':1243,'multiline':True]
['text':'byte','line_number':1245,'multiline':True]
['text':' Parse fields that are words: ASCII letters spelling out in English AM/PM,','line_number':1257,'multiline':False]
['text':' day of week, month, or an extremely limited set of legacy time zone','line_number':1258,'multiline':False]
['text':' abbreviations.','line_number':1259,'multiline':False]
['text':' There must be at least as many letters as in the shortest keyword.','line_number':1270,'multiline':False]
['text':' If the field isn't a prefix of the keyword (an exact match is *not*','line_number':1297,'multiline':False]
['text':' required), try the next one.','line_number':1298,'multiline':False]
['text':' Completely ignore days of the week, and don't derive any semantics','line_number':1305,'multiline':False]
['text':' from them.','line_number':1306,'multiline':False]
['text':' Perform action tests from smallest action values to largest.','line_number':1311,'multiline':False]
['text':' Adjust a previously-specified hour for AM/PM accordingly (taking care','line_number':1313,'multiline':False]
['text':' to treat 12:xx AM as 00:xx, 12:xx PM as 12:xx).','line_number':1314,'multiline':False]
['text':' Record a month if none has been seen before.  (Note that some numbers','line_number':1330,'multiline':False]
['text':' are initially treated as months; if a numeric field has already been','line_number':1331,'multiline':False]
['text':' interpreted as a month, store that value to the actually appropriate','line_number':1332,'multiline':False]
['text':' date component and set the month here.','line_number':1333,'multiline':False]
['text':' If the date is of the form f l month, then when month is','line_number':1348,'multiline':False]
['text':' reached we have f in mon and l in mday. In order to be','line_number':1349,'multiline':False]
['text':' consistent with the f month l and month f l forms, we need to','line_number':1350,'multiline':False]
['text':' swap so that f is in mday and l is in year.','line_number':1351,'multiline':False]
['text':' Finally, record a time zone offset.','line_number':1365,'multiline':False]
['text':' Any other character fails to parse.','line_number':1379,'multiline':False]
['text':'
   * Case 1. The input string contains an English month name.
   *         The form of the string can be month f l, or f month l, or
   *         f l month which each evaluate to the same date.
   *         If f and l are both greater than or equal to 100 the date
   *         is invalid.
   *
   *         The year is taken to be either l, f if f > 31, or whichever
   *         is set to zero.
   *
   * Case 2. The input string is of the form "f/m/l" where f, m and l are
   *         integers, e.g. 7/16/45. mon, mday and year values are adjusted
   *         to achieve Chrome compatibility.
   *
   *         a. If 0 < f <= 12 and 0 < l <= 31, f/m/l is interpreted as
   *         month/day/year.
   *         b. If 31 < f and 0 < m <= 12 and 0 < l <= 31 f/m/l is
   *         interpreted as year/month/day
   ','line_number':1387,'multiline':True]
['text':' (a) month/day/year ','line_number':1422,'multiline':True]
['text':' (b) year/month/day ','line_number':1424,'multiline':True]
['text':' If the year is greater than or equal to 50 and less than 100, it is','line_number':1435,'multiline':False]
['text':' considered to be the number of years after 1900. If the year is less','line_number':1436,'multiline':False]
['text':' than 50 it is considered to be the number of years after 2000,','line_number':1437,'multiline':False]
['text':' otherwise it is considered to be the number of years after 0.','line_number':1438,'multiline':False]
['text':' convert month to 0-based ','line_number':1451,'multiline':True]
['text':' no time zone specified, have to use local ','line_number':1464,'multiline':True]
['text':' Calculate a random midpoint for jittering. In the browser, we are','line_number':1517,'multiline':False]
['text':' adversarial: Web Content may try to calculate the midpoint themselves','line_number':1518,'multiline':False]
['text':' and use that to bypass it's security. In the JS Shell, we are not','line_number':1519,'multiline':False]
['text':' adversarial, we want to jitter the time to recreate the operating','line_number':1520,'multiline':False]
['text':' environment, but we do not concern ourselves with trying to prevent an','line_number':1521,'multiline':False]
['text':' attacker from calculating the midpoint themselves. So we use a very','line_number':1522,'multiline':False]
['text':' simple, very fast CRC with a hardcoded seed.','line_number':1523,'multiline':False]
['text':' XOR in a 'secret'','line_number':1526,'multiline':False]
['text':' MurmurHash3 internal component from','line_number':1527,'multiline':False]
['text':'   https://searchfox.org/mozilla-central/rev/61d400da1c692453c2dc2c1cf37b616ce13dea5b/dom/canvas/MurmurHash3.cpp#85','line_number':1528,'multiline':False]
['text':' We're jittering up to the next step','line_number':1536,'multiline':False]
['text':' We're staying at the clamped value','line_number':1538,'multiline':False]
['text':' No jitter, only clamping','line_number':1541,'multiline':False]
['text':' Check if the cache is already populated. ','line_number':1571,'multiline':True]
['text':' Remember time zone used to generate the local cache. ','line_number':1577,'multiline':True]
['text':' Adjust the year in case the approximation was wrong, as in YearFromTime. ','line_number':1596,'multiline':True]
['text':'
 * See ECMA 15.9.5.4 thru 15.9.5.23
 ','line_number':1700,'multiline':True]
['text':' Follow ECMA-262 to the letter, contrary to IE JScript. ','line_number':1728,'multiline':True]
['text':' Note: localSecondsIntoYear is guaranteed to return an','line_number':1865,'multiline':False]
['text':' int32 or NaN after the call to fillLocalTimeSlots.','line_number':1866,'multiline':False]
['text':' Note: localSecondsIntoYear is guaranteed to return an','line_number':1905,'multiline':False]
['text':' int32 or NaN after the call to fillLocalTimeSlots.','line_number':1906,'multiline':False]
['text':' Note: localSecondsIntoYear is guaranteed to return an','line_number':1946,'multiline':False]
['text':' int32 or NaN after the call to fillLocalTimeSlots.','line_number':1947,'multiline':False]
['text':'
 * Date.getMilliseconds is mapped to getUTCMilliseconds. As long as no
 * supported time zone has a fractional-second component, the differences in
 * their specifications aren't observable.
 *
 * The 'tz' database explicitly does not support fractional-second time zones.
 * For example the Netherlands observed Amsterdam Mean Time, estimated to be
 * UT +00:19:32.13, from 1909 to 1937, but in tzdata AMT is defined as exactly
 * UT +00:19:32.
 ','line_number':1976,'multiline':True]
['text':'
   * Return the time zone offset in minutes for the current locale that is
   * appropriate for this time. This value would be a constant except for
   * daylight savings time.
   ','line_number':2025,'multiline':True]
['text':' ES6 20.3.4.23. ','line_number':2085,'multiline':True]
['text':' Step 1.','line_number':2089,'multiline':False]
['text':' Step 2.','line_number':2097,'multiline':False]
['text':' Step 3.','line_number':2103,'multiline':False]
['text':' Step 4.','line_number':2106,'multiline':False]
['text':' Steps 5-6.','line_number':2109,'multiline':False]
['text':' ES5 15.9.5.29. ','line_number':2114,'multiline':True]
['text':' Step 1. ','line_number':2124,'multiline':True]
['text':' Step 2. ','line_number':2127,'multiline':True]
['text':' Step 3. ','line_number':2135,'multiline':True]
['text':' Steps 4-5. ','line_number':2138,'multiline':True]
['text':' ES6 20.3.4.26. ','line_number':2143,'multiline':True]
['text':' Steps 1-2.','line_number':2153,'multiline':False]
['text':' Steps 3-4.','line_number':2156,'multiline':False]
['text':' Steps 5-6.','line_number':2162,'multiline':False]
['text':' Step 7.','line_number':2168,'multiline':False]
['text':' Step 8.','line_number':2172,'multiline':False]
['text':' Step 9.','line_number':2175,'multiline':False]
['text':' ES5 15.9.5.32. ','line_number':2180,'multiline':True]
['text':' Step 1. ','line_number':2190,'multiline':True]
['text':' Step 2. ','line_number':2193,'multiline':True]
['text':' Step 3. ','line_number':2199,'multiline':True]
['text':' Step 4. ','line_number':2205,'multiline':True]
['text':' Step 5. ','line_number':2209,'multiline':True]
['text':' Steps 6-7. ','line_number':2212,'multiline':True]
['text':' ES6 20.3.4.24. ','line_number':2217,'multiline':True]
['text':' Steps 1-2.','line_number':2227,'multiline':False]
['text':' Steps 3-4.','line_number':2230,'multiline':False]
['text':' Steps 5-6.','line_number':2236,'multiline':False]
['text':' Steps 7-8.','line_number':2242,'multiline':False]
['text':' Step 9.','line_number':2248,'multiline':False]
['text':' Step 10.','line_number':2251,'multiline':False]
['text':' Steps 11-12.','line_number':2254,'multiline':False]
['text':' ES5 15.9.5.34. ','line_number':2259,'multiline':True]
['text':' Step 1. ','line_number':2269,'multiline':True]
['text':' Step 2. ','line_number':2272,'multiline':True]
['text':' Step 3. ','line_number':2278,'multiline':True]
['text':' Step 4. ','line_number':2284,'multiline':True]
['text':' Step 5. ','line_number':2290,'multiline':True]
['text':' Step 6. ','line_number':2293,'multiline':True]
['text':' Steps 7-8. ','line_number':2296,'multiline':True]
['text':' ES5 15.9.5.35. ','line_number':2301,'multiline':True]
['text':' Steps 1-2.','line_number':2311,'multiline':False]
['text':' Steps 3-4.','line_number':2314,'multiline':False]
['text':' Steps 5-6.','line_number':2320,'multiline':False]
['text':' Steps 7-8.','line_number':2326,'multiline':False]
['text':' Steps 9-10.','line_number':2332,'multiline':False]
['text':' Step 11.','line_number':2338,'multiline':False]
['text':' Step 12.','line_number':2341,'multiline':False]
['text':' Steps 13-14.','line_number':2344,'multiline':False]
['text':' ES5 15.9.5.36. ','line_number':2349,'multiline':True]
['text':' Step 1. ','line_number':2359,'multiline':True]
['text':' Step 2. ','line_number':2362,'multiline':True]
['text':' Step 3. ','line_number':2368,'multiline':True]
['text':' Step 4. ','line_number':2374,'multiline':True]
['text':' Step 5. ','line_number':2380,'multiline':True]
['text':' Step 6. ','line_number':2386,'multiline':True]
['text':' Step 7. ','line_number':2389,'multiline':True]
['text':' Steps 8-9. ','line_number':2392,'multiline':True]
['text':' ES5 15.9.5.37. ','line_number':2397,'multiline':True]
['text':' Step 1. ','line_number':2407,'multiline':True]
['text':' Step 2. ','line_number':2410,'multiline':True]
['text':' Step 3. ','line_number':2416,'multiline':True]
['text':' Step 4. ','line_number':2420,'multiline':True]
['text':' Steps 5-6. ','line_number':2423,'multiline':True]
['text':' Step 1. ','line_number':2437,'multiline':True]
['text':' Step 2. ','line_number':2440,'multiline':True]
['text':' Step 3. ','line_number':2446,'multiline':True]
['text':' Step 4. ','line_number':2450,'multiline':True]
['text':' Steps 5-6. ','line_number':2453,'multiline':True]
['text':' ES5 15.9.5.38. ','line_number':2476,'multiline':True]
['text':' Step 1. ','line_number':2486,'multiline':True]
['text':' Step 2. ','line_number':2489,'multiline':True]
['text':' Step 3. ','line_number':2495,'multiline':True]
['text':' Step 4. ','line_number':2501,'multiline':True]
['text':' Step 5. ','line_number':2505,'multiline':True]
['text':' Steps 6-7. ','line_number':2508,'multiline':True]
['text':' ES5 15.9.5.39. ','line_number':2513,'multiline':True]
['text':' Step 1. ','line_number':2523,'multiline':True]
['text':' Step 2. ','line_number':2526,'multiline':True]
['text':' Step 3. ','line_number':2532,'multiline':True]
['text':' Step 4. ','line_number':2538,'multiline':True]
['text':' Step 5. ','line_number':2542,'multiline':True]
['text':' Steps 6-7. ','line_number':2545,'multiline':True]
['text':' ES5 15.9.5.40. ','line_number':2563,'multiline':True]
['text':' Step 1. ','line_number':2573,'multiline':True]
['text':' Step 2. ','line_number':2576,'multiline':True]
['text':' Step 3. ','line_number':2582,'multiline':True]
['text':' Step 4. ','line_number':2588,'multiline':True]
['text':' Step 5. ','line_number':2594,'multiline':True]
['text':' Step 6. ','line_number':2597,'multiline':True]
['text':' Steps 7-8. ','line_number':2600,'multiline':True]
['text':' ES5 15.9.5.41. ','line_number':2605,'multiline':True]
['text':' Step 1. ','line_number':2615,'multiline':True]
['text':' Step 2. ','line_number':2618,'multiline':True]
['text':' Step 3. ','line_number':2624,'multiline':True]
['text':' Step 4. ','line_number':2630,'multiline':True]
['text':' Step 5. ','line_number':2636,'multiline':True]
['text':' Step 6. ','line_number':2639,'multiline':True]
['text':' Steps 7-8. ','line_number':2642,'multiline':True]
['text':' ES5 Annex B.2.5. ','line_number':2647,'multiline':True]
['text':' Step 1. ','line_number':2657,'multiline':True]
['text':' Step 2. ','line_number':2660,'multiline':True]
['text':' Step 3. ','line_number':2666,'multiline':True]
['text':' Step 4. ','line_number':2672,'multiline':True]
['text':' Step 5. ','line_number':2678,'multiline':True]
['text':' Step 6. ','line_number':2681,'multiline':True]
['text':' Steps 7-8. ','line_number':2684,'multiline':True]
['text':' constants for toString, toUTCString ','line_number':2689,'multiline':True]
['text':' ES5 B.2.6. ','line_number':2695,'multiline':True]
['text':' ES6 draft 2015-01-15 20.3.4.36. ','line_number':2726,'multiline':True]
['text':' ES5 15.9.5.44. ','line_number':2766,'multiline':True]
['text':' Step 1. ','line_number':2770,'multiline':True]
['text':' Step 2. ','line_number':2776,'multiline':True]
['text':' Step 3. ','line_number':2782,'multiline':True]
['text':' Step 4. ','line_number':2788,'multiline':True]
['text':' Step 5. ','line_number':2794,'multiline':True]
['text':' Step 6. ','line_number':2801,'multiline':True]
['text':' for the trailing ')'','line_number':2821,'multiline':False]
['text':' Reject if the result string is empty.','line_number':2830,'multiline':False]
['text':' Parenthesize the returned display name.','line_number':2836,'multiline':False]
['text':' Interface to PRMJTime date struct. ','line_number':2842,'multiline':True]
['text':' If an equivalent year was used to compute the date/time components, use','line_number':2865,'multiline':False]
['text':' the same equivalent year to determine the time zone name and offset in','line_number':2866,'multiline':False]
['text':' PRMJ_FormatTime(...).','line_number':2867,'multiline':False]
['text':' Decide whether to use the resulting time zone string.','line_number':2883,'multiline':False]
['text':'','line_number':2884,'multiline':False]
['text':' Reject it if it contains any non-ASCII or non-printable characters.','line_number':2885,'multiline':False]
['text':' It's then likely in some other character encoding, and we probably','line_number':2886,'multiline':False]
['text':' won't display it correctly.','line_number':2887,'multiline':False]
['text':' Also reject it if it's not parenthesized or if it's ' ()'.','line_number':2897,'multiline':False]
['text':' JS_HAS_INTL_API && !MOZ_SYSTEM_ICU ','line_number':2909,'multiline':True]
['text':' Offset from GMT in minutes. The offset includes daylight savings,','line_number':2932,'multiline':False]
['text':' if it applies.','line_number':2933,'multiline':False]
['text':' Map 510 minutes to 0830 hours.','line_number':2936,'multiline':False]
['text':' Print as "Wed Nov 05 1997 19:38:03 GMT-0800 (PST)".','line_number':2939,'multiline':False]
['text':'','line_number':2940,'multiline':False]
['text':' The TZA is printed as 'GMT-0800' rather than as 'PST' to avoid','line_number':2941,'multiline':False]
['text':' operating-system dependence on strftime (which PRMJ_FormatTime','line_number':2942,'multiline':False]
['text':' calls, for %Z only.) win32 prints PST as 'Pacific Standard Time.'','line_number':2943,'multiline':False]
['text':' This way we always know what we're getting, and can parse it if','line_number':2944,'multiline':False]
['text':' we produce it. The OS time zone string is included as a comment.','line_number':2945,'multiline':False]
['text':'','line_number':2946,'multiline':False]
['text':' When ICU is used to retrieve the time zone string, the localized','line_number':2947,'multiline':False]
['text':' 'long' name format from CLDR is used. For example when the default','line_number':2948,'multiline':False]
['text':' locale is "en-US", PST is displayed as 'Pacific Standard Time', but','line_number':2949,'multiline':False]
['text':' when it is "ru", 'Тихоокеанское стандартное время' is used. This','line_number':2950,'multiline':False]
['text':' also means the time zone string may not fit into Latin-1.','line_number':2951,'multiline':False]
['text':' Get a time zone string from the OS or ICU to include as a comment.','line_number':2953,'multiline':False]
['text':' Tue Oct 31 2000 09:41:40 GMT-0800 ','line_number':2963,'multiline':True]
['text':' Tue Oct 31 2000 ','line_number':2972,'multiline':True]
['text':' 09:41:40 GMT-0800 ','line_number':2979,'multiline':True]
['text':' Append the time zone string if present.','line_number':2991,'multiline':False]
['text':' Let PRMJTime format it. ','line_number':3012,'multiline':True]
['text':' If it failed, default to toString. ','line_number':3016,'multiline':True]
['text':' Hacked check against undesired 2-digit year 00/00/00 form. ','line_number':3021,'multiline':True]
['text':' Format %x means use OS settings, which may have 2-digit yr, so
           hack end of 3/11/22 or 11.03.22 or 11Mar22 to use 4-digit yr...','line_number':3023,'multiline':True]
['text':' ...but not if starts with 4-digit year, like 2022/3/11. ','line_number':3028,'multiline':True]
['text':' ES5 15.9.5.5. ','line_number':3050,'multiline':True]
['text':'
   * Use '%#c' for windows, because '%c' is backward-compatible and non-y2k
   * with msvc; '%#c' requests that a full year be used in the result string.
   ','line_number':3060,'multiline':True]
['text':'
   * Use '%#x' for windows, because '%x' is backward-compatible and non-y2k
   * with msvc; '%#x' requests that a full year be used in the result string.
   ','line_number':3085,'multiline':True]
['text':' !JS_HAS_INTL_API ','line_number':3113,'multiline':True]
['text':' ES6 20.3.4.45 Date.prototype[@@toPrimitive]','line_number':3188,'multiline':False]
['text':' Steps 1-2.','line_number':3192,'multiline':False]
['text':' Steps 3-5.','line_number':3198,'multiline':False]
['text':' Step 3.','line_number':3358,'multiline':False]
['text':' Steps 3a-b.','line_number':3360,'multiline':False]
['text':' Steps 3c-d.','line_number':3366,'multiline':False]
['text':' Steps 3e-f.','line_number':3372,'multiline':False]
['text':' Steps 3g-h.','line_number':3382,'multiline':False]
['text':' Steps 3i-j.','line_number':3392,'multiline':False]
['text':' Steps 3k-l.','line_number':3402,'multiline':False]
['text':' Steps 3m-n.','line_number':3412,'multiline':False]
['text':' Step 3o.','line_number':3422,'multiline':False]
['text':' Step 3p.','line_number':3431,'multiline':False]
['text':' Steps 3q-t.','line_number':3434,'multiline':False]
['text':'
   * Date.prototype.toGMTString has the same initial value as
   * Date.prototype.toUTCString.
   ','line_number':3457,'multiline':True]
['text':' = nullptr ','line_number':3489,'multiline':True]
