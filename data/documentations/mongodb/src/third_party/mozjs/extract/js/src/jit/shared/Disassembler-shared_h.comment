['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' A wrapper around spew/disassembly functionality.  The disassembler is built','line_number':29,'multiline':False]
['text':' on a per-instruction disassembler (as in our ARM, ARM64 back-ends) and','line_number':30,'multiline':False]
['text':' formats labels with meaningful names and literals with meaningful values, if','line_number':31,'multiline':False]
['text':' the assembler creates documentation (with provided helpers) at appropriate','line_number':32,'multiline':False]
['text':' points.','line_number':33,'multiline':False]
['text':' Never dereferenced, only used for its value','line_number':38,'multiline':False]
['text':' The printable label value','line_number':39,'multiline':False]
['text':' If the label has been seen by spewBind()','line_number':40,'multiline':False]
['text':' Set indentation strings.  The spewer retains a reference to s.','line_number':60,'multiline':False]
['text':' Set the spew printer, which will always be used if it is set, regardless','line_number':65,'multiline':False]
['text':' of whether the system spew channel is enabled or not.  The spewer retains','line_number':66,'multiline':False]
['text':' a reference to sp.','line_number':67,'multiline':False]
['text':' Return true if disassembly spew is disabled and no additional printer is','line_number':70,'multiline':False]
['text':' set.','line_number':71,'multiline':False]
['text':' Format and print text on the spew channel; output is suppressed if spew','line_number':74,'multiline':False]
['text':' is disabled.  The output is not indented, and is terminated by a newline.','line_number':75,'multiline':False]
['text':' Documentation for a label reference.','line_number':78,'multiline':False]
['text':' Documentation for a literal load.','line_number':92,'multiline':False]
['text':' Reference a label, resolving it to a printable representation.','line_number':123,'multiline':False]
['text':'','line_number':124,'multiline':False]
['text':' NOTE: The printable representation depends on the state of the label, so','line_number':125,'multiline':False]
['text':' if we call resolve() when emitting & disassembling a branch instruction','line_number':126,'multiline':False]
['text':' then it should be called before the label becomes Used, if emitting the','line_number':127,'multiline':False]
['text':' branch can change the label's state.','line_number':128,'multiline':False]
['text':'','line_number':129,'multiline':False]
['text':' If the disassembler is not defined this returns a structure that is','line_number':130,'multiline':False]
['text':' marked not valid.','line_number':131,'multiline':False]
['text':' Spew the label information previously gathered by refLabel(), at a point','line_number':135,'multiline':False]
['text':' where the label is referenced.  The output is indented by targetIndent_','line_number':136,'multiline':False]
['text':' and terminated by a newline.','line_number':137,'multiline':False]
['text':' Spew the label at the point where the label is bound.  The output is','line_number':140,'multiline':False]
['text':' indented by labelIndent_ and terminated by a newline.','line_number':141,'multiline':False]
['text':' Spew a retarget directive at the point where the retarget is recorded.','line_number':144,'multiline':False]
['text':' The output is indented by labelIndent_ and terminated by a newline.','line_number':145,'multiline':False]
['text':' Format a literal value into the buffer.  The buffer is always','line_number':148,'multiline':False]
['text':' NUL-terminated even if this chops the formatted value.','line_number':149,'multiline':False]
['text':' Print any unbound labels, one per line, with normal label indent and with','line_number':152,'multiline':False]
['text':' a comment indicating the label is not defined.  Labels can be referenced','line_number':153,'multiline':False]
['text':' but unbound in some legitimate cases, normally for traps.  Printing them','line_number':154,'multiline':False]
['text':' reduces confusion.','line_number':155,'multiline':False]
['text':' This global is used to disambiguate concurrently live assemblers, see','line_number':168,'multiline':False]
['text':' comments in Disassembler-shared.cpp for why this is desirable.','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':' The variable is atomic to avoid any kind of complaint from thread','line_number':171,'multiline':False]
['text':' sanitizers etc.  However, trying to look at disassembly without using','line_number':172,'multiline':False]
['text':' --no-threads is basically insane, so you can ignore the multi-threading','line_number':173,'multiline':False]
['text':' implications here.','line_number':174,'multiline':False]
['text':' namespace jit','line_number':179,'multiline':False]
['text':' namespace js','line_number':180,'multiline':False]
['text':' jit_shared_Disassembler_shared_h','line_number':182,'multiline':False]
