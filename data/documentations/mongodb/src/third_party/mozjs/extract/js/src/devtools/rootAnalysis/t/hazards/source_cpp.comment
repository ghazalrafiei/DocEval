['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' If the implementation is too trivial, the function body won't be emitted at','line_number':46,'multiline':False]
['text':' all.','line_number':47,'multiline':False]
['text':' Calls GC, but is always called within AutoSuppressGC','line_number':55,'multiline':False]
['text':' Calls GC, but is sometimes called within AutoSuppressGC','line_number':59,'multiline':False]
['text':' Calls GC, never within AutoSuppressGC','line_number':63,'multiline':False]
['text':' Old bug: it would look from the first AutoSuppressGC constructor it','line_number':104,'multiline':False]
['text':' found to the last destructor. This statement *should* have no effect.','line_number':105,'multiline':False]
['text':' Templatized container that inherits attributes from Cell*, should','line_number':113,'multiline':False]
['text':' report a hazard.','line_number':114,'multiline':False]
['text':' As above, but with a non-GC type.','line_number':122,'multiline':False]
['text':' Hazard in return value due to ~GCInDestructor','line_number':129,'multiline':False]
['text':' No hazard: haz1 is not live during call to copy_and_gc.','line_number':152,'multiline':False]
['text':' No hazard: haz2 is live up to just before the GC, and starting at the','line_number':158,'multiline':False]
['text':' next statement after it, but not across the GC.','line_number':159,'multiline':False]
['text':' Hazard: haz3 is live from the final statement in one iteration, across','line_number':167,'multiline':False]
['text':' the GC in the next, to the use in the 2nd statement.','line_number':168,'multiline':False]
['text':' Hazard: haz4 is live across a GC hidden in a loop.','line_number':176,'multiline':False]
['text':' Hazard: haz5 is live from within a loop across a GC.','line_number':183,'multiline':False]
['text':' No hazard: similar to the haz3 case, but verifying that we do not get','line_number':191,'multiline':False]
['text':' into an infinite loop.','line_number':192,'multiline':False]
['text':' No hazard: haz7 is constructed within the body, so it can't make a','line_number':199,'multiline':False]
['text':' hazard across iterations. Note that this requires CellContainer to have','line_number':200,'multiline':False]
['text':' a constructor, because otherwise the analysis doesn't see where','line_number':201,'multiline':False]
['text':' variables are declared. (With the constructor, it knows that','line_number':202,'multiline':False]
['text':' construction of haz7 obliterates any previous value it might have had.','line_number':203,'multiline':False]
['text':' Not that that's possible given its scope, but the analysis doesn't get','line_number':204,'multiline':False]
['text':' that information.)','line_number':205,'multiline':False]
['text':' Hazard: make sure we *can* see hazards across iterations involving','line_number':213,'multiline':False]
['text':' CellContainer;','line_number':214,'multiline':False]
['text':' namespace mozilla','line_number':236,'multiline':False]
['text':' Simple hazard.','line_number':243,'multiline':False]
['text':' Safe because it's known to be nullptr.','line_number':248,'multiline':False]
['text':' Unsafe because it may not be nullptr.','line_number':254,'multiline':False]
['text':' Unsafe because it's not nullptr anymore.','line_number':262,'multiline':False]
['text':' Hazard involving UniquePtr.','line_number':269,'multiline':False]
['text':' Destructor uses unsafe4.','line_number':273,'multiline':False]
['text':' reset() to safe value before the GC.','line_number':276,'multiline':False]
['text':' reset() to safe value after the GC.','line_number':283,'multiline':False]
['text':' reset() to safe value after the GC -- but we've already used it, so it's','line_number':290,'multiline':False]
['text':' too late.','line_number':291,'multiline':False]
['text':' initialized to safe value.','line_number':299,'multiline':False]
['text':' passed to a function that takes ownership before GC.','line_number':305,'multiline':False]
['text':' passed to a function that takes ownership after GC.','line_number':312,'multiline':False]
['text':' Make sure `this` is live at the beginning of a function.','line_number':320,'multiline':False]
['text':' this->f','line_number':324,'multiline':False]
