['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':16,'multiline':False]
['text':' JS::NewJSMEnvironment, JS::ExecuteInJSMEnvironment, JS::GetJSMEnvironmentOfScriptedCaller, JS::IsJSMEnvironment','line_number':17,'multiline':False]
['text':' js::IsWindowProxy','line_number':18,'multiline':False]
['text':' We should be able to assert this for *any* fp->environmentChain().','line_number':40,'multiline':False]
['text':' Make sure there are no inner objects (which may be used directly by script','line_number':55,'multiline':False]
['text':' and clobbered) or inner functions (which may have wrong scope).','line_number':56,'multiline':False]
['text':' static ','line_number':66,'multiline':True]
['text':' static ','line_number':72,'multiline':True]
['text':' Add the script to the eval cache when EvalKernel is finished','line_number':81,'multiline':False]
['text':' These fields are only valid if lookup_.str is non-nullptr. ','line_number':86,'multiline':True]
['text':' Ignore failure to add cache entry.','line_number':103,'multiline':False]
['text':' JSScript::fullyInitFromStencil has already called js_CallNewScriptHook.','line_number':125,'multiline':False]
['text':' If the eval string starts with '(' or '[' and ends with ')' or ']', it','line_number':142,'multiline':False]
['text':' may be JSON.  Try the JSON parser first because it's much faster.  If','line_number':143,'multiline':False]
['text':' the eval string isn't JSON, JSON parsing will probably fail quickly, so','line_number':144,'multiline':False]
['text':' little time will be lost.','line_number':145,'multiline':False]
['text':' It used to be that strings in JavaScript forbid U+2028 LINE SEPARATOR','line_number':151,'multiline':False]
['text':' and U+2029 PARAGRAPH SEPARATOR, so something like','line_number':152,'multiline':False]
['text':'','line_number':153,'multiline':False]
['text':'   eval("['" + "\u2028" + "']");','line_number':154,'multiline':False]
['text':'','line_number':155,'multiline':False]
['text':' i.e. an array containing a string with a line separator in it, *would*','line_number':156,'multiline':False]
['text':' be JSON but *would not* be valid JavaScript.  Handing such a string to','line_number':157,'multiline':False]
['text':' the JSON parser would then fail to recognize a syntax error.  As of','line_number':158,'multiline':False]
['text':' <https://tc39.github.io/proposal-json-superset/> JavaScript strings may','line_number':159,'multiline':False]
['text':' contain these two code points, so it's safe to JSON-parse eval strings','line_number':160,'multiline':False]
['text':' that contain them.','line_number':161,'multiline':False]
['text':' 18.2.1.1 PerformEval','line_number':215,'multiline':False]
['text':'','line_number':216,'multiline':False]
['text':' Common code implementing direct and indirect eval.','line_number':217,'multiline':False]
['text':'','line_number':218,'multiline':False]
['text':' Evaluate v, if it is a string, in the context of the given calling','line_number':219,'multiline':False]
['text':' frame, with the provided scope chain, with the semantics of either a direct','line_number':220,'multiline':False]
['text':' or indirect eval (see ES5 10.4.2).  If this is an indirect eval, env','line_number':221,'multiline':False]
['text':' must be the global lexical environment.','line_number':222,'multiline':False]
['text':'','line_number':223,'multiline':False]
['text':' On success, store the completion value in call.rval and return true.','line_number':224,'multiline':False]
['text':' Step 2.','line_number':233,'multiline':False]
['text':' Steps 3-4.','line_number':239,'multiline':False]
['text':' Step 5 ff.','line_number':247,'multiline':False]
['text':' Per ES5, indirect eval runs in the global scope. (eval is specified this','line_number':249,'multiline':False]
['text':' way so that the compiler can make assumptions about what bindings may or','line_number':250,'multiline':False]
['text':' may not exist in the current frame if it doesn't see 'eval'.)','line_number':251,'multiline':False]
['text':' If this is a direct eval we need to use the caller's newTarget.','line_number':353,'multiline':False]
['text':' evalInFrame ','line_number':360,'multiline':True]
['text':' Note we'll just pass |undefined| here, then return it directly (or throw','line_number':368,'multiline':False]
['text':' if runtime codegen is disabled), if no argument is provided.','line_number':369,'multiline':False]
['text':' Direct eval can assume it was called from an interpreted or baseline frame.','line_number':375,'multiline':False]
['text':' evalInFrame ','line_number':410,'multiline':True]
['text':' Create lexical environment with |this| == objArg, which should be a Gecko','line_number':431,'multiline':False]
['text':' MessageManager.','line_number':432,'multiline':False]
['text':' NOTE: This is required behavior for Gecko FrameScriptLoader, where some','line_number':433,'multiline':False]
['text':' callers try to bind methods from the message manager in their scope chain','line_number':434,'multiline':False]
['text':' to |this|, and will fail if it is not bound to a message manager.','line_number':435,'multiline':False]
['text':' Force the NonSyntacticLexicalEnvironmentObject to be created.','line_number':458,'multiline':False]
['text':' If the Gecko subscript loader specifies target objects, we need to add','line_number':487,'multiline':False]
['text':' them to the environment. These are added after the NSVO environment.','line_number':488,'multiline':False]
['text':' The environment chain will be as follows:','line_number':490,'multiline':False]
['text':'      GlobalObject / BackstagePass','line_number':491,'multiline':False]
['text':'      GlobalLexicalEnvironmentObject[this=global]','line_number':492,'multiline':False]
['text':'      NonSyntacticVariablesObject (the JSMEnvironment)','line_number':493,'multiline':False]
['text':'      NonSyntacticLexicalEnvironmentObject[this=nsvo]','line_number':494,'multiline':False]
['text':'      WithEnvironmentObject[target=targetObj]','line_number':495,'multiline':False]
['text':'      NonSyntacticLexicalEnvironmentObject[this=targetObj] (*)','line_number':496,'multiline':False]
['text':'','line_number':497,'multiline':False]
['text':'  (*) This environment intercepts JSOp::GlobalThis.','line_number':498,'multiline':False]
['text':' Wrap the target objects in WithEnvironments.','line_number':500,'multiline':False]
['text':' See CreateNonSyntacticEnvironmentChain','line_number':506,'multiline':False]
['text':' Create an extensible lexical environment for the target object.','line_number':511,'multiline':False]
['text':' WASM frames don't always provide their environment, but we also shouldn't','line_number':528,'multiline':False]
['text':' expect to see any calling into here.','line_number':529,'multiline':False]
['text':' NOTE: This also returns true if the NonSyntacticVariablesObject was','line_number':541,'multiline':False]
['text':' created for reasons other than the JSM loader.','line_number':542,'multiline':False]
