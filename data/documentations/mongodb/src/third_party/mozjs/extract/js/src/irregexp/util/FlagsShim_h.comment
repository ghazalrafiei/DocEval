['text':' Copyright 2014 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]
['text':' found in the LICENSE file.','line_number':3,'multiline':False]
['text':' Origin:','line_number':8,'multiline':False]
['text':' https://github.com/v8/v8/blob/1bafcc6b999b23ea1d394f5d267a08183e3c4e19/src/base/flags.h#L15-L90','line_number':9,'multiline':False]
['text':' The Flags class provides a type-safe way of storing OR-combinations of enum','line_number':14,'multiline':False]
['text':' values. The Flags<T, S> class is a template class, where T is an enum type,','line_number':15,'multiline':False]
['text':' and S is the underlying storage type (usually int).','line_number':16,'multiline':False]
['text':'','line_number':17,'multiline':False]
['text':' The traditional C++ approach for storing OR-combinations of enum values is to','line_number':18,'multiline':False]
['text':' use an int or unsigned int variable. The inconvenience with this approach is','line_number':19,'multiline':False]
['text':' that there's no type checking at all; any enum value can be OR'd with any','line_number':20,'multiline':False]
['text':' other enum value and passed on to a function that takes an int or unsigned','line_number':21,'multiline':False]
['text':' int.','line_number':22,'multiline':False]
['text':' namespace base','line_number':90,'multiline':False]
['text':' namespace v8','line_number':91,'multiline':False]
['text':' V8_UTIL_FLAG_H_','line_number':93,'multiline':False]
