['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * Portable double to alphanumeric string and back converters.
 ','line_number':7,'multiline':True]
['text':'
#ifndef Llong
#define Llong int64_t
#endif

#ifndef ULlong
#define ULlong uint64_t
#endif
','line_number':36,'multiline':True]
['text':' dtoa.c requires that MALLOC be infallible. Furthermore, its allocations are','line_number':46,'multiline':False]
['text':' few and small. So AutoEnterOOMUnsafeRegion is appropriate here.','line_number':47,'multiline':False]
['text':' This saves memory for the workloads we see.','line_number':60,'multiline':False]
['text':' Let b = floor(b / divisor), and return the remainder.  b must be nonnegative.
 * divisor must be between 1 and 65536.
 * This function cannot run out of memory. ','line_number':69,'multiline':True]
['text':' b is zero ','line_number':80,'multiline':True]
['text':' Decrease the size of the number if its most significant word is now zero.
   ','line_number':97,'multiline':True]
['text':' Return floor(b/2^k) and set b to be the remainder.  The returned quotient
 * must be less than 2^32. ','line_number':103,'multiline':True]
['text':' "-0.0000...(1073 zeros after decimal point)...0001\0" is the longest string
 * that we could produce, which occurs when printing -5e-324 in binary.  We
 * could compute a better estimate of the size of the output string and malloc
 * fewer bytes depending on d and base, but why bother? ','line_number':135,'multiline':True]
['text':' The output string ','line_number':145,'multiline':True]
['text':' Pointer to current position in the buffer ','line_number':146,'multiline':True]
['text':' Pointer to the beginning of the integer part of the string ','line_number':147,'multiline':True]
['text':' d truncated to an integer ','line_number':150,'multiline':True]
['text':' The fractional part of d ','line_number':151,'multiline':True]
['text':' Check for Infinity and NaN ','line_number':165,'multiline':True]
['text':' Output the integer part of d with the digits in reverse order. ','line_number':171,'multiline':True]
['text':' Number of significant bits in di; not used. ','line_number':187,'multiline':True]
['text':' Reverse the digits of the integer part of d. ','line_number':204,'multiline':True]
['text':' We have a fraction. ','line_number':214,'multiline':True]
['text':' At this point df = b * 2^e.  e must be less than zero because 0 < df < 1.
     ','line_number':234,'multiline':True]
['text':' 1/2^s2 = (nextDouble(d) - d)/2 ','line_number':242,'multiline':True]
['text':' The special case.  Here we want to be within a quarter of the last
         input significant digit instead of one half of it when the output
         string's value is less than d.  ','line_number':252,'multiline':True]
['text':' At this point we have the following:
     *   s = 2^s2;
     *   1 > df = b/2^s2 > 0;
     *   (d - prevDouble(d))/2 = mlo/2^s2;
     *   (nextDouble(d) - d)/2 = mhi/2^s2. ','line_number':265,'multiline':True]
['text':' Do we yet have the shortest string that will round to d? ','line_number':289,'multiline':True]
['text':' j is b/2^s2 compared with mlo/2^s2. ','line_number':291,'multiline':True]
['text':' j1 is b/2^s2 compared with 1 - mhi/2^s2. ','line_number':296,'multiline':True]
['text':' Either dig or dig+1 would work here as the least significant digit.
             Use whichever would produce an output value closer to d. ','line_number':310,'multiline':True]
['text':' The even test (|| (j1 == 0 && (digit & 1))) is not here
                       * because it messes up odd base output such as 3.5 in
                       * base 3.  ','line_number':315,'multiline':True]
['text':' Cleanup pollution from dtoa.c ','line_number':342,'multiline':True]
