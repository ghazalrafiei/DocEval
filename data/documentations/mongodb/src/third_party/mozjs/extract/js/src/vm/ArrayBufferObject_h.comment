['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' std::tuple','line_number':12,'multiline':False]
['text':' namespace wasm','line_number':31,'multiline':False]
['text':' Create a new mapping of size `mappedSize` with an initially committed prefix','line_number':33,'multiline':False]
['text':' of size `initialCommittedSize`.  Both arguments denote bytes and must be','line_number':34,'multiline':False]
['text':' multiples of the page size, with `initialCommittedSize` <= `mappedSize`.','line_number':35,'multiline':False]
['text':' Returns nullptr on failure.','line_number':36,'multiline':False]
['text':' Commit additional memory in an existing mapping.  `dataEnd` must be the','line_number':39,'multiline':False]
['text':' correct value for the end of the existing committed area, and `delta` must be','line_number':40,'multiline':False]
['text':' a byte amount to grow the mapping by, and must be a multiple of the page','line_number':41,'multiline':False]
['text':' size.  Returns false on failure.','line_number':42,'multiline':False]
['text':' Extend an existing mapping by adding uncommited pages to it.  `dataStart`','line_number':45,'multiline':False]
['text':' must be the pointer to the start of the existing mapping, `mappedSize` the','line_number':46,'multiline':False]
['text':' size of the existing mapping, and `newMappedSize` the size of the extended','line_number':47,'multiline':False]
['text':' mapping (sizes in bytes), with `mappedSize` <= `newMappedSize`.  Both sizes','line_number':48,'multiline':False]
['text':' must be divisible by the page size.  Returns false on failure.','line_number':49,'multiline':False]
['text':' Remove an existing mapping.  `dataStart` must be the pointer to the start of','line_number':53,'multiline':False]
['text':' the mapping, and `mappedSize` the size of that mapping.','line_number':54,'multiline':False]
['text':' Return the number of currently live mapped buffers.','line_number':57,'multiline':False]
['text':' The inheritance hierarchy for the various classes relating to typed arrays','line_number':60,'multiline':False]
['text':' is as follows.','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' - JSObject','line_number':64,'multiline':False]
['text':'   - TypedObject (declared in wasm/TypedObject.h)','line_number':65,'multiline':False]
['text':'   - NativeObject','line_number':66,'multiline':False]
['text':'     - ArrayBufferObjectMaybeShared','line_number':67,'multiline':False]
['text':'       - ArrayBufferObject','line_number':68,'multiline':False]
['text':'       - SharedArrayBufferObject','line_number':69,'multiline':False]
['text':'     - ArrayBufferViewObject','line_number':70,'multiline':False]
['text':'       - DataViewObject','line_number':71,'multiline':False]
['text':'       - TypedArrayObject (declared in vm/TypedArrayObject.h)','line_number':72,'multiline':False]
['text':'         - TypedArrayObjectTemplate','line_number':73,'multiline':False]
['text':'           - Int8ArrayObject','line_number':74,'multiline':False]
['text':'           - Uint8ArrayObject','line_number':75,'multiline':False]
['text':'           - ...','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':' Note that |TypedArrayObjectTemplate| is just an implementation','line_number':78,'multiline':False]
['text':' detail that makes implementing its various subclasses easier.','line_number':79,'multiline':False]
['text':'','line_number':80,'multiline':False]
['text':' ArrayBufferObject and SharedArrayBufferObject are unrelated data types:','line_number':81,'multiline':False]
['text':' the racy memory of the latter cannot substitute for the non-racy memory of','line_number':82,'multiline':False]
['text':' the former; the non-racy memory of the former cannot be used with the','line_number':83,'multiline':False]
['text':' atomics; the former can be detached and the latter not.  Hence they have been','line_number':84,'multiline':False]
['text':' separated completely.','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':' Most APIs will only accept ArrayBufferObject.  ArrayBufferObjectMaybeShared','line_number':87,'multiline':False]
['text':' exists as a join point to allow APIs that can take or use either, notably','line_number':88,'multiline':False]
['text':' AsmJS.','line_number':89,'multiline':False]
['text':'','line_number':90,'multiline':False]
['text':' In contrast with the separation of ArrayBufferObject and','line_number':91,'multiline':False]
['text':' SharedArrayBufferObject, the TypedArray types can map either.','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':' The possible data ownership and reference relationships with ArrayBuffers','line_number':94,'multiline':False]
['text':' and related classes are enumerated below. These are the possible locations','line_number':95,'multiline':False]
['text':' for typed data:','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' (1) malloc'ed or mmap'ed data owned by an ArrayBufferObject.','line_number':98,'multiline':False]
['text':' (2) Data allocated inline with an ArrayBufferObject.','line_number':99,'multiline':False]
['text':' (3) Data allocated inline with a TypedArrayObject.','line_number':100,'multiline':False]
['text':' (4) Data allocated inline with an InlineTypedObject.','line_number':101,'multiline':False]
['text':'','line_number':102,'multiline':False]
['text':' An ArrayBufferObject may point to any of these sources of data, except (3).','line_number':103,'multiline':False]
['text':' All array buffer views may point to any of these sources of data, except','line_number':104,'multiline':False]
['text':' that (3) may only be pointed to by the typed array the data is inline with.','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':' During a minor GC, (3) and (4) may move. During a compacting GC, (2), (3),','line_number':107,'multiline':False]
['text':' and (4) may move.','line_number':108,'multiline':False]
['text':' WebAssembly support:','line_number':123,'multiline':False]
['text':' Note: the eventual goal is to remove this from ArrayBuffer and have','line_number':124,'multiline':False]
['text':' (Shared)ArrayBuffers alias memory owned by some wasm::Memory object.','line_number':125,'multiline':False]
['text':'
 * ArrayBufferObject
 *
 * This class holds the underlying raw buffer that the various ArrayBufferViews
 * (eg DataViewObject, the TypedArrays, TypedObjects) access. It can be created
 * explicitly and used to construct an ArrayBufferView, or can be created
 * lazily when it is first accessed for a TypedArrayObject or TypedObject that
 * doesn't have an explicit buffer.
 *
 * ArrayBufferObject (or really the underlying memory) /is not racy/: the
 * memory is private to a single worker.
 ','line_number':144,'multiline':True]
['text':' The length of an ArrayBuffer or SharedArrayBuffer can be at most','line_number':177,'multiline':False]
['text':' INT32_MAX. Allow a larger limit on friendly 64-bit platforms if the','line_number':178,'multiline':False]
['text':' experimental large-buffers flag is used.','line_number':179,'multiline':False]
['text':' Fallthrough to the "small" case because there's no evidence that the','line_number':183,'multiline':False]
['text':' platform code can handle buffers > 2GB.','line_number':184,'multiline':False]
['text':' 8 GB.','line_number':187,'multiline':False]
['text':'* The largest number of bytes that can be stored inline. ','line_number':194,'multiline':True]
['text':'* Inline data kept in the repurposed slots of this ArrayBufferObject. ','line_number':200,'multiline':True]
['text':' Data allocated using the SpiderMonkey allocator. ','line_number':203,'multiline':True]
['text':'*
     * No bytes are associated with this buffer.  (This could be because the
     * buffer is detached, because it's an internal, newborn buffer not yet
     * overwritten with user-exposable semantics, or some other reason.  The
     * point is, don't read precise language semantics into this kind.)
     ','line_number':206,'multiline':True]
['text':'*
     * User-owned memory.  The associated buffer must be manually detached
     * before the user invalidates (deallocates, reuses the storage of, &c.)
     * the user-owned memory.
     ','line_number':214,'multiline':True]
['text':' These kind-values are currently invalid.  We intend to expand valid','line_number':225,'multiline':False]
['text':' BufferKinds in the future to either partly or fully use these values.','line_number':226,'multiline':False]
['text':' The flags also store the BufferKind','line_number':234,'multiline':False]
['text':' This MALLOCED, MAPPED, or EXTERNAL buffer has been prepared for asm.js','line_number':239,'multiline':False]
['text':' and cannot henceforth be transferred/detached.  (WASM, USER_OWNED, and','line_number':240,'multiline':False]
['text':' INLINE_DATA buffers can't be prepared for asm.js -- although if an','line_number':241,'multiline':False]
['text':' INLINE_DATA buffer is used with asm.js, it's silently rewritten into a','line_number':242,'multiline':False]
['text':' MALLOCED buffer which *can* be prepared.)','line_number':243,'multiline':False]
['text':' It is the caller's responsibility to ensure that the','line_number':278,'multiline':False]
['text':' BufferContents does not outlive the data.','line_number':279,'multiline':False]
['text':' There's no harm in tagging this as MALLOCED, even tho obviously it','line_number':315,'multiline':False]
['text':' isn't.  And adding an extra tag purely for this case is a complication','line_number':316,'multiline':False]
['text':' that presently appears avoidable.','line_number':317,'multiline':False]
['text':' Create an ArrayBufferObject that is safely finalizable and can later be','line_number':352,'multiline':False]
['text':' initialize()d to become a real, content-visible ArrayBufferObject.','line_number':353,'multiline':False]
['text':' Create an ArrayBufferObject using the provided buffer and size.  Assumes','line_number':356,'multiline':False]
['text':' ownership of |buffer| even in case of failure, i.e. on failure |buffer|','line_number':357,'multiline':False]
['text':' is deallocated.','line_number':358,'multiline':False]
['text':' ArrayBufferObjects (strongly) store the first view added to them, while','line_number':379,'multiline':False]
['text':' later views are (weakly) stored in the compartment's InnerViewTable','line_number':380,'multiline':False]
['text':' below. Buffers usually only have one view, so this slot optimizes for','line_number':381,'multiline':False]
['text':' the common case. Avoiding entries in the InnerViewTable saves memory and','line_number':382,'multiline':False]
['text':' non-incrementalized sweep time.','line_number':383,'multiline':False]
['text':' Detach this buffer from its original memory.  (This necessarily makes','line_number':388,'multiline':False]
['text':' views of this buffer unusable for modifying that original memory.)','line_number':389,'multiline':False]
['text':' WebAssembly support:','line_number':442,'multiline':False]
['text':'*
   * Prepare this ArrayBuffer for use with asm.js.  Returns true on success,
   * false on failure.  This function reports no errors.
   ','line_number':444,'multiline':True]
['text':' Create a buffer for a 32-bit wasm memory.','line_number':503,'multiline':False]
['text':' Per-compartment table that manages the relationship between array buffers','line_number':507,'multiline':False]
['text':' and the views that use their storage.','line_number':508,'multiline':False]
['text':' This key is a raw pointer and not a WeakHeapPtr because the post-barrier','line_number':522,'multiline':False]
['text':' would hold nursery-allocated entries live unconditionally. It is a very','line_number':523,'multiline':False]
['text':' common pattern in low-level and performance-oriented JavaScript to create','line_number':524,'multiline':False]
['text':' hundreds or thousands of very short lived temporary views on a larger','line_number':525,'multiline':False]
['text':' buffer; having to tenured all of these would be a catastrophic performance','line_number':526,'multiline':False]
['text':' regression. Thus, it is vital that nursery pointers in this map not be held','line_number':527,'multiline':False]
['text':' live. Special support is required in the minor GC, implemented in','line_number':528,'multiline':False]
['text':' sweepAfterMinorGC.','line_number':529,'multiline':False]
['text':' For all objects sharing their storage with some other view, this maps','line_number':533,'multiline':False]
['text':' the object to the list of such views. All entries in this map are weak.','line_number':534,'multiline':False]
['text':' List of keys from innerViews where either the source or at least one','line_number':537,'multiline':False]
['text':' target is in the nursery. The raw pointer to a JSObject is allowed here','line_number':538,'multiline':False]
['text':' because this vector is cleared after every minor collection. Users in','line_number':539,'multiline':False]
['text':' sweepAfterMinorCollection must be careful to use MaybeForwarded before','line_number':540,'multiline':False]
['text':' touching these pointers.','line_number':541,'multiline':False]
['text':' Whether nurseryKeys is a complete list.','line_number':544,'multiline':False]
['text':' Sweep an entry during GC, returning whether the entry should be removed.','line_number':547,'multiline':False]
['text':' Remove references to dead objects in the table and update table entries','line_number':557,'multiline':False]
['text':' to reflect moved objects.','line_number':558,'multiline':False]
['text':' Not including the header page','line_number':584,'multiline':False]
['text':' Try and grow the mapped region of memory. Does not change current size.','line_number':627,'multiline':False]
['text':' Does not move memory if no space to grow.','line_number':628,'multiline':False]
['text':' namespace js','line_number':632,'multiline':False]
['text':' vm_ArrayBufferObject_h','line_number':637,'multiline':False]
