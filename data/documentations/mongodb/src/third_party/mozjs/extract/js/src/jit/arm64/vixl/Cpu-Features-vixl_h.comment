['text':' Copyright 2018, VIXL authors','line_number':1,'multiline':False]
['text':' All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]
['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]
['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]
['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]
['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]
['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]
['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]
['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]
['text':'     specific prior written permission.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]
['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]
['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]
['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]
['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]
['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]
['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]
['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]
['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]
['text':' clang-format off','line_number':38,'multiline':False]
['text':' If set, the OS traps and emulates MRS accesses to relevant (EL1) ID_*  ','line_number':40,'multiline':True]
['text':' registers, so that the detailed feature registers can be read          ','line_number':41,'multiline':True]
['text':' directly.                                                              ','line_number':42,'multiline':True]
['text':' Cryptographic support instructions.                                    ','line_number':48,'multiline':True]
['text':' A form of PMULL{2} with a 128-bit (1Q) result.                         ','line_number':52,'multiline':True]
['text':' Atomic operations on memory: CAS, LDADD, STADD, SWP, etc.              ','line_number':54,'multiline':True]
['text':' Limited ordering regions: LDLAR, STLLR and their variants.             ','line_number':56,'multiline':True]
['text':' Rounding doubling multiply add/subtract: SQRDMLAH and SQRDMLSH.        ','line_number':58,'multiline':True]
['text':' Scalable Vector Extension.                                             ','line_number':60,'multiline':True]
['text':' SDOT and UDOT support (in NEON).                                       ','line_number':62,'multiline':True]
['text':' Half-precision (FP16) support for FP and NEON, respectively.           ','line_number':64,'multiline':True]
['text':' The RAS extension, including the ESB instruction.                      ','line_number':67,'multiline':True]
['text':' Data cache clean to the point of persistence: DC CVAP.                 ','line_number':69,'multiline':True]
['text':' Data cache clean to the point of deep persistence: DC CVADP.           ','line_number':71,'multiline':True]
['text':' Cryptographic support instructions.                                    ','line_number':73,'multiline':True]
['text':' Pointer authentication for addresses.                                  ','line_number':78,'multiline':True]
['text':' Pointer authentication for addresses uses QARMA.                       ','line_number':80,'multiline':True]
['text':' Generic authentication (using the PACGA instruction).                  ','line_number':82,'multiline':True]
['text':' Generic authentication uses QARMA.                                     ','line_number':84,'multiline':True]
['text':' JavaScript-style FP -> integer conversion instruction: FJCVTZS.        ','line_number':86,'multiline':True]
['text':' Complex number support for NEON: FCMLA and FCADD.                      ','line_number':88,'multiline':True]
['text':' RCpc-based model (for weaker release consistency): LDAPR and variants. ','line_number':90,'multiline':True]
['text':' Flag manipulation instructions: SETF{8,16}, CFINV, RMIF.               ','line_number':93,'multiline':True]
['text':' Unaligned single-copy atomicity.                                       ','line_number':95,'multiline':True]
['text':' FP16 fused multiply-add or -subtract long: FMLAL{2}, FMLSL{2}.         ','line_number':97,'multiline':True]
['text':' Data-independent timing (for selected instructions).                   ','line_number':99,'multiline':True]
['text':' Branch target identification.                                          ','line_number':101,'multiline':True]
['text':' Flag manipulation instructions: {AX,XA}FLAG                            ','line_number':103,'multiline':True]
['text':' Random number generation extension,                                    ','line_number':105,'multiline':True]
['text':' Floating-point round to {32,64}-bit integer.                           ','line_number':107,'multiline':True]
['text':' clang-format on','line_number':109,'multiline':False]
['text':' A representation of the set of features known to be supported by the target','line_number':114,'multiline':False]
['text':' device. Each feature is represented by a simple boolean flag.','line_number':115,'multiline':False]
['text':'','line_number':116,'multiline':False]
['text':'   - When the Assembler is asked to assemble an instruction, it asserts (in','line_number':117,'multiline':False]
['text':'     debug mode) that the necessary features are available.','line_number':118,'multiline':False]
['text':'','line_number':119,'multiline':False]
['text':'   - TODO: The MacroAssembler relies on the Assembler's assertions, but in','line_number':120,'multiline':False]
['text':'     some cases it may be useful for macros to generate a fall-back sequence','line_number':121,'multiline':False]
['text':'     in case features are not available.','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':'   - The Simulator assumes by default that all features are available, but it','line_number':124,'multiline':False]
['text':'     is possible to configure it to fail if the simulated code uses features','line_number':125,'multiline':False]
['text':'     that are not enabled.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':'     The Simulator also offers pseudo-instructions to allow features to be','line_number':128,'multiline':False]
['text':'     enabled and disabled dynamically. This is useful when you want to ensure','line_number':129,'multiline':False]
['text':'     that some features are constrained to certain areas of code.','line_number':130,'multiline':False]
['text':'','line_number':131,'multiline':False]
['text':'   - The base Disassembler knows nothing about CPU features, but the','line_number':132,'multiline':False]
['text':'     PrintDisassembler can be configured to annotate its output with warnings','line_number':133,'multiline':False]
['text':'     about unavailable features. The Simulator uses this feature when','line_number':134,'multiline':False]
['text':'     instruction trace is enabled.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':'   - The Decoder-based components -- the Simulator and PrintDisassembler --','line_number':137,'multiline':False]
['text':'     rely on a CPUFeaturesAuditor visitor. This visitor keeps a list of','line_number':138,'multiline':False]
['text':'     features actually encountered so that a large block of code can be','line_number':139,'multiline':False]
['text':'     examined (either directly or through simulation), and the required','line_number':140,'multiline':False]
['text':'     features analysed later.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' Expected usage:','line_number':143,'multiline':False]
['text':'','line_number':144,'multiline':False]
['text':'     // By default, VIXL uses CPUFeatures::AArch64LegacyBaseline(), for','line_number':145,'multiline':False]
['text':'     // compatibility with older version of VIXL.','line_number':146,'multiline':False]
['text':'     MacroAssembler masm;','line_number':147,'multiline':False]
['text':'','line_number':148,'multiline':False]
['text':'     // Generate code only for the current CPU.','line_number':149,'multiline':False]
['text':'     masm.SetCPUFeatures(CPUFeatures::InferFromOS());','line_number':150,'multiline':False]
['text':'','line_number':151,'multiline':False]
['text':'     // Turn off feature checking entirely.','line_number':152,'multiline':False]
['text':'     masm.SetCPUFeatures(CPUFeatures::All());','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':' Feature set manipulation:','line_number':155,'multiline':False]
['text':'','line_number':156,'multiline':False]
['text':'     CPUFeatures f;  // The default constructor gives an empty set.','line_number':157,'multiline':False]
['text':'     // Individual features can be added (or removed).','line_number':158,'multiline':False]
['text':'     f.Combine(CPUFeatures::kFP, CPUFeatures::kNEON, CPUFeatures::AES);','line_number':159,'multiline':False]
['text':'     f.Remove(CPUFeatures::kNEON);','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':'     // Some helpers exist for extensions that provide several features.','line_number':162,'multiline':False]
['text':'     f.Remove(CPUFeatures::All());','line_number':163,'multiline':False]
['text':'     f.Combine(CPUFeatures::AArch64LegacyBaseline());','line_number':164,'multiline':False]
['text':'','line_number':165,'multiline':False]
['text':'     // Chained construction is also possible.','line_number':166,'multiline':False]
['text':'     CPUFeatures g =','line_number':167,'multiline':False]
['text':'         f.With(CPUFeatures::kPmull1Q).Without(CPUFeatures::kCRC32);','line_number':168,'multiline':False]
['text':'','line_number':169,'multiline':False]
['text':'     // Features can be queried. Where multiple features are given, they are','line_number':170,'multiline':False]
['text':'     // combined with logical AND.','line_number':171,'multiline':False]
['text':'     if (h.Has(CPUFeatures::kNEON)) { ... }','line_number':172,'multiline':False]
['text':'     if (h.Has(CPUFeatures::kFP, CPUFeatures::kNEON)) { ... }','line_number':173,'multiline':False]
['text':'     if (h.Has(g)) { ... }','line_number':174,'multiline':False]
['text':'     // If the empty set is requested, the result is always 'true'.','line_number':175,'multiline':False]
['text':'     VIXL_ASSERT(h.Has(CPUFeatures()));','line_number':176,'multiline':False]
['text':'','line_number':177,'multiline':False]
['text':'     // For debug and reporting purposes, features can be enumerated (or','line_number':178,'multiline':False]
['text':'     // printed directly):','line_number':179,'multiline':False]
['text':'     std::cout << CPUFeatures::kNEON;  // Prints something like "NEON".','line_number':180,'multiline':False]
['text':'     std::cout << f;  // Prints something like "FP, NEON, CRC32".','line_number':181,'multiline':False]
['text':' clang-format off','line_number':184,'multiline':False]
['text':' Individual features.','line_number':185,'multiline':False]
['text':' These should be treated as opaque tokens. User code should not rely on','line_number':186,'multiline':False]
['text':' specific numeric values or ordering.','line_number':187,'multiline':False]
['text':' Refer to VIXL_CPU_FEATURE_LIST (above) for the list of feature names that','line_number':189,'multiline':False]
['text':' this class supports.','line_number':190,'multiline':False]
['text':' clang-format on','line_number':198,'multiline':False]
['text':' By default, construct with no features enabled.','line_number':200,'multiline':False]
['text':' Construct with some features already enabled.','line_number':203,'multiline':False]
['text':' Construct with all features enabled. This can be used to disable feature','line_number':209,'multiline':False]
['text':' checking: `Has(...)` returns true regardless of the argument.','line_number':210,'multiline':False]
['text':' Construct an empty CPUFeatures. This is equivalent to the default','line_number':213,'multiline':False]
['text':' constructor, but is provided for symmetry and convenience.','line_number':214,'multiline':False]
['text':' The presence of these features was assumed by version of VIXL before this','line_number':217,'multiline':False]
['text':' API was added, so using this set by default ensures API compatibility.','line_number':218,'multiline':False]
['text':' Construct a new CPUFeatures object using ID registers. This assumes that','line_number':223,'multiline':False]
['text':' kIDRegisterEmulation is present.','line_number':224,'multiline':False]
['text':' Construct a new CPUFeatures object based on what the OS reports.','line_number':232,'multiline':False]
['text':' Combine another CPUFeatures object into this one. Features that already','line_number':236,'multiline':False]
['text':' exist in this set are left unchanged.','line_number':237,'multiline':False]
['text':' Combine specific features into this set. Features that already exist in','line_number':240,'multiline':False]
['text':' this set are left unchanged.','line_number':241,'multiline':False]
['text':' Remove features in another CPUFeatures object from this one.','line_number':247,'multiline':False]
['text':' Remove specific features from this set.','line_number':250,'multiline':False]
['text':' Chaining helpers for convenient construction.','line_number':256,'multiline':False]
['text':' Query features.','line_number':268,'multiline':False]
['text':' Note that an empty query (like `Has(kNone)`) always returns true.','line_number':269,'multiline':False]
['text':' Return the number of enabled features.','line_number':276,'multiline':False]
['text':' Check for equivalence.','line_number':280,'multiline':False]
['text':' Each bit represents a feature. This field will be replaced as needed if','line_number':292,'multiline':False]
['text':' features are added.','line_number':293,'multiline':False]
['text':' This is not a proper C++ iterator type, but it simulates enough of','line_number':303,'multiline':False]
['text':' ForwardIterator that simple loops can be written.','line_number':304,'multiline':False]
['text':' For proper support of C++'s simplest "Iterator" concept, this class would','line_number':325,'multiline':False]
['text':' have to define member types (such as CPUFeaturesIterator::pointer) to make','line_number':326,'multiline':False]
['text':' it appear as if it iterates over Feature objects in memory. That is, we'd','line_number':327,'multiline':False]
['text':' need CPUFeatures::iterator to behave like std::vector<Feature>::iterator.','line_number':328,'multiline':False]
['text':' This is at least partially possible -- the std::vector<bool> specialisation','line_number':329,'multiline':False]
['text':' does something similar -- but it doesn't seem worthwhile for a','line_number':330,'multiline':False]
['text':' special-purpose debug helper, so they are omitted here.','line_number':331,'multiline':False]
['text':' A convenience scope for temporarily modifying a CPU features object. This','line_number':342,'multiline':False]
['text':' allows features to be enabled for short sequences.','line_number':343,'multiline':False]
['text':'','line_number':344,'multiline':False]
['text':' Expected usage:','line_number':345,'multiline':False]
['text':'','line_number':346,'multiline':False]
['text':'  {','line_number':347,'multiline':False]
['text':'    CPUFeaturesScope cpu(&masm, CPUFeatures::kCRC32);','line_number':348,'multiline':False]
['text':'    // This scope can now use CRC32, as well as anything else that was enabled','line_number':349,'multiline':False]
['text':'    // before the scope.','line_number':350,'multiline':False]
['text':'','line_number':351,'multiline':False]
['text':'    ...','line_number':352,'multiline':False]
['text':'','line_number':353,'multiline':False]
['text':'    // At the end of the scope, the original CPU features are restored.','line_number':354,'multiline':False]
['text':'  }','line_number':355,'multiline':False]
['text':' Start a CPUFeaturesScope on any object that implements','line_number':358,'multiline':False]
['text':' `CPUFeatures* GetCPUFeatures()`.','line_number':359,'multiline':False]
['text':' For advanced usage, the CPUFeatures object can be accessed directly.','line_number':380,'multiline':False]
['text':' The scope will restore the original state when it ends.','line_number':381,'multiline':False]
['text':' namespace vixl','line_number':395,'multiline':False]
['text':' VIXL_CPU_FEATURES_H','line_number':397,'multiline':False]
