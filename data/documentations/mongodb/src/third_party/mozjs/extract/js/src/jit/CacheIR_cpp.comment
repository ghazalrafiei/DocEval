['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' IsIonEnabled','line_number':22,'multiline':False]
['text':' JSJitInfo','line_number':25,'multiline':False]
['text':' JS::ExpandoAndGeneration','line_number':26,'multiline':False]
['text':' js::IsWindow, js::IsWindowProxy, js::ToWindowIfWindowProxy','line_number':27,'multiline':False]
['text':' js::jit::GetXrayJitInfo, JS::XrayJitInfo','line_number':28,'multiline':False]
['text':' JS::AutoSuppressGCAnalysis','line_number':29,'multiline':False]
['text':' JS::RegExpFlags','line_number':30,'multiline':False]
['text':' js::Scalar::Type','line_number':31,'multiline':False]
['text':' js::GetDOMProxyHandlerFamily','line_number':33,'multiline':False]
['text':' js::PlainObject','line_number':38,'multiline':False]
['text':' ThrowCondition','line_number':42,'multiline':False]
['text':' If we've seen an offset earlier than this before, we know we can start the','line_number':139,'multiline':False]
['text':' search there at least, otherwise, we start the search from the beginning.','line_number':140,'multiline':False]
['text':' DOM proxies','line_number':256,'multiline':False]
['text':' -----------','line_number':257,'multiline':False]
['text':'','line_number':258,'multiline':False]
['text':' DOM proxies are proxies that are used to implement various DOM objects like','line_number':259,'multiline':False]
['text':' HTMLDocument and NodeList. DOM proxies may have an expando object - a native','line_number':260,'multiline':False]
['text':' object that stores extra properties added to the object. The following','line_number':261,'multiline':False]
['text':' CacheIR instructions are only used with DOM proxies:','line_number':262,'multiline':False]
['text':'','line_number':263,'multiline':False]
['text':' * LoadDOMExpandoValue: returns the Value in the proxy's expando slot. This','line_number':264,'multiline':False]
['text':'   returns either an UndefinedValue (no expando), ObjectValue (the expando','line_number':265,'multiline':False]
['text':'   object), or PrivateValue(ExpandoAndGeneration*).','line_number':266,'multiline':False]
['text':'','line_number':267,'multiline':False]
['text':' * LoadDOMExpandoValueGuardGeneration: guards the Value in the proxy's expando','line_number':268,'multiline':False]
['text':'   slot is the same PrivateValue(ExpandoAndGeneration*), then guards on its','line_number':269,'multiline':False]
['text':'   generation, then returns expandoAndGeneration->expando. This Value is','line_number':270,'multiline':False]
['text':'   either an UndefinedValue or ObjectValue.','line_number':271,'multiline':False]
['text':'','line_number':272,'multiline':False]
['text':' * LoadDOMExpandoValueIgnoreGeneration: assumes the Value in the proxy's','line_number':273,'multiline':False]
['text':'   expando slot is a PrivateValue(ExpandoAndGeneration*), unboxes it, and','line_number':274,'multiline':False]
['text':'   returns the expandoAndGeneration->expando Value.','line_number':275,'multiline':False]
['text':'','line_number':276,'multiline':False]
['text':' * GuardDOMExpandoMissingOrGuardShape: takes an expando Value as input, then','line_number':277,'multiline':False]
['text':'   guards it's either UndefinedValue or an object with the expected shape.','line_number':278,'multiline':False]
['text':' Some DOM proxies have dynamic prototypes.  We can't really cache those very','line_number':294,'multiline':False]
['text':' well.','line_number':295,'multiline':False]
['text':' |super.prop| getter calls use a |this| value that differs from lookup','line_number':379,'multiline':False]
['text':' object.','line_number':380,'multiline':False]
['text':' Any property lookups performed when trying to attach ICs must be pure, i.e.','line_number':451,'multiline':False]
['text':' must use LookupPropertyPure() or similar functions. Pure lookups are','line_number':452,'multiline':False]
['text':' guaranteed to never modify the prototype chain. This ensures that the holder','line_number':453,'multiline':False]
['text':' object can always be found on the prototype chain.','line_number':454,'multiline':False]
['text':' For getters that need the WindowProxy (instead of the Window) as this','line_number':501,'multiline':False]
['text':' object, don't cache if obj is the Window, since our cache will pass that','line_number':502,'multiline':False]
['text':' instead of the WindowProxy.','line_number':503,'multiline':False]
['text':' Check for a getter that has jitinfo and whose jitinfo says it's','line_number':505,'multiline':False]
['text':' OK with both inner and outer objects.','line_number':506,'multiline':False]
['text':' Scripted functions and natives with JIT entry can use the scripted path.','line_number':512,'multiline':False]
['text':' Don't handle objects with resolve hooks.','line_number':525,'multiline':False]
['text':' If we're doing a name lookup, we have to throw a ReferenceError.','line_number':553,'multiline':False]
['text':' The lookup needs to be universally pure, otherwise we risk calling hooks','line_number':567,'multiline':False]
['text':' out of turn. We don't mind doing this even when purity isn't required,','line_number':568,'multiline':False]
['text':' because we only miss out on shape hashification, which is only a temporary','line_number':569,'multiline':False]
['text':' perf cost. The limits were arbitrarily set, anyways.','line_number':570,'multiline':False]
['text':' Note: we guard on the actual prototype and not on the shape because this is','line_number':601,'multiline':False]
['text':' used for sparse elements where we expect shape changes.','line_number':602,'multiline':False]
['text':' Guard that a given object has same class and same OwnProperties (excluding','line_number':611,'multiline':False]
['text':' dense elements and dynamic properties).','line_number':612,'multiline':False]
['text':' Similar to |TestMatchingNativeReceiver|, but specialized for ProxyObject.','line_number':618,'multiline':False]
['text':' The receiver should already have been handled since its checks are always','line_number':625,'multiline':False]
['text':' required.','line_number':626,'multiline':False]
['text':' Prototype chain must have cacheable prototypes to ensure the cached','line_number':629,'multiline':False]
['text':' holder is the current holder.','line_number':630,'multiline':False]
['text':' The holder itself only gets reshaped by teleportation if it is not','line_number':637,'multiline':False]
['text':' marked UncacheableProto. See: ReshapeForProtoMutation.','line_number':638,'multiline':False]
['text':' Assuming target property is on |holder|, generate appropriate guards to','line_number':644,'multiline':False]
['text':' ensure |holder| is still on the prototype chain of |obj| and we haven't','line_number':645,'multiline':False]
['text':' introduced any shadowing definitions.','line_number':646,'multiline':False]
['text':'','line_number':647,'multiline':False]
['text':' For each item in the proto chain before holder, we must ensure that','line_number':648,'multiline':False]
['text':' [[GetPrototypeOf]] still has the expected result, and that','line_number':649,'multiline':False]
['text':' [[GetOwnProperty]] has no definition of the target property.','line_number':650,'multiline':False]
['text':'','line_number':651,'multiline':False]
['text':'','line_number':652,'multiline':False]
['text':' [SMDOC] Shape Teleporting Optimization','line_number':653,'multiline':False]
['text':' ------------------------------','line_number':654,'multiline':False]
['text':'','line_number':655,'multiline':False]
['text':' Starting with the assumption (and guideline to developers) that mutating','line_number':656,'multiline':False]
['text':' prototypes is an uncommon and fair-to-penalize operation we move cost','line_number':657,'multiline':False]
['text':' from the access side to the mutation side.','line_number':658,'multiline':False]
['text':'','line_number':659,'multiline':False]
['text':' Consider the following proto chain, with B defining a property 'x':','line_number':660,'multiline':False]
['text':'','line_number':661,'multiline':False]
['text':'      D  ->  C  ->  B{x: 3}  ->  A  -> null','line_number':662,'multiline':False]
['text':'','line_number':663,'multiline':False]
['text':' When accessing |D.x| we refer to D as the "receiver", and B as the','line_number':664,'multiline':False]
['text':' "holder". To optimize this access we need to ensure that neither D nor C','line_number':665,'multiline':False]
['text':' has since defined a shadowing property 'x'. Since C is a prototype that','line_number':666,'multiline':False]
['text':' we assume is rarely mutated we would like to avoid checking each time if','line_number':667,'multiline':False]
['text':' new properties are added. To do this we require that everytime C is','line_number':668,'multiline':False]
['text':' mutated that in addition to generating a new shape for itself, it will','line_number':669,'multiline':False]
['text':' walk the proto chain and generate new shapes for those objects on the','line_number':670,'multiline':False]
['text':' chain (B and A). As a result, checking the shape of D and B is','line_number':671,'multiline':False]
['text':' sufficient. Note that we do not care if the shape or properties of A','line_number':672,'multiline':False]
['text':' change since the lookup of 'x' will stop at B.','line_number':673,'multiline':False]
['text':'','line_number':674,'multiline':False]
['text':' The second condition we must verify is that the prototype chain was not','line_number':675,'multiline':False]
['text':' mutated. The same mechanism as above is used. When the prototype link is','line_number':676,'multiline':False]
['text':' changed, we generate a new shape for the object. If the object whose','line_number':677,'multiline':False]
['text':' link we are mutating is itself a prototype, we regenerate shapes down','line_number':678,'multiline':False]
['text':' the chain by setting the UncacheableProto flag on them. This means the same','line_number':679,'multiline':False]
['text':' two shape checks as above are sufficient.','line_number':680,'multiline':False]
['text':'','line_number':681,'multiline':False]
['text':' Once the UncacheableProto flag is set, it means the shape will no longer be','line_number':682,'multiline':False]
['text':' updated by ReshapeForProtoMutation. If any shape from receiver to holder','line_number':683,'multiline':False]
['text':' (inclusive) is UncacheableProto, we don't apply the optimization.','line_number':684,'multiline':False]
['text':'','line_number':685,'multiline':False]
['text':' See:','line_number':686,'multiline':False]
['text':'  - ReshapeForProtoMutation','line_number':687,'multiline':False]
['text':'  - ReshapeForShadowedProp','line_number':688,'multiline':False]
['text':' Receiver guards (see TestMatchingReceiver) ensure the receiver's proto is','line_number':693,'multiline':False]
['text':' unchanged so peel off the receiver.','line_number':694,'multiline':False]
['text':' If teleporting is supported for this prototype chain, we are done.','line_number':698,'multiline':False]
['text':' If already at the holder, no further proto checks are needed.','line_number':703,'multiline':False]
['text':' Synchronize pobj and protoId.','line_number':708,'multiline':False]
['text':' Guard prototype links from |pobj| to |holder|.','line_number':712,'multiline':False]
['text':' The object's proto could be nullptr so we must use GuardProto before','line_number':716,'multiline':False]
['text':' LoadProto (LoadProto asserts the proto is non-null).','line_number':717,'multiline':False]
['text':' Make sure the shape matches, to ensure the proto is unchanged and to','line_number':734,'multiline':False]
['text':' avoid non-dense elements or anything else that is being checked by','line_number':735,'multiline':False]
['text':' CanAttachDenseElementHole.','line_number':736,'multiline':False]
['text':' Also make sure there are no dense elements.','line_number':740,'multiline':False]
['text':' Similar to |TestMatchingReceiver|, but for the holder object (when it','line_number':747,'multiline':False]
['text':' differs from the receiver). The holder may also be the expando of the','line_number':748,'multiline':False]
['text':' receiver if it exists.','line_number':749,'multiline':False]
['text':' The GeneratePrototypeGuards + TestMatchingHolder checks only support','line_number':752,'multiline':False]
['text':' prototype chains composed of NativeObject (excluding the receiver','line_number':753,'multiline':False]
['text':' itself).','line_number':754,'multiline':False]
['text':' Emit a shape guard for all objects on the proto chain. This does NOT include','line_number':758,'multiline':False]
['text':' the receiver; callers must ensure the receiver's proto is the first proto by','line_number':759,'multiline':False]
['text':' either emitting a shape guard or a prototype guard for |objId|.','line_number':760,'multiline':False]
['text':'','line_number':761,'multiline':False]
['text':' Note: this relies on shape implying proto.','line_number':762,'multiline':False]
['text':' For cross compartment guards we shape-guard the prototype chain to avoid','line_number':778,'multiline':False]
['text':' referencing the holder object.','line_number':779,'multiline':False]
['text':'','line_number':780,'multiline':False]
['text':' This peels off the first layer because it's guarded against obj == holder.','line_number':781,'multiline':False]
['text':' Guard proto chain integrity.','line_number':813,'multiline':False]
['text':' We use a variant of guards that avoid baking in any cross-compartment','line_number':814,'multiline':False]
['text':' object pointers.','line_number':815,'multiline':False]
['text':' Guard proto chain integrity.','line_number':819,'multiline':False]
['text':' Guard on the holder's shape.','line_number':822,'multiline':False]
['text':' The property does not exist. Guard on everything in the prototype','line_number':827,'multiline':False]
['text':' chain. This is guaranteed to see only Native objects because of','line_number':828,'multiline':False]
['text':' CanAttachNativeGetProp().','line_number':829,'multiline':False]
['text':' Slot access.','line_number':845,'multiline':False]
['text':' CanAttachNativeGetProp guarantees that the getter is either a native or','line_number':875,'multiline':False]
['text':' a scripted function.','line_number':876,'multiline':False]
['text':' See the SMDOC comment in vm/GetterSetter.h for more info on Getter/Setter','line_number':882,'multiline':False]
['text':' properties','line_number':883,'multiline':False]
['text':' If the holder is guaranteed to be the same object, and it never had a','line_number':888,'multiline':False]
['text':' slot holding a GetterSetter mutated or deleted, its Shape will change when','line_number':889,'multiline':False]
['text':' that does happen so we don't need to guard on the GetterSetter.','line_number':890,'multiline':False]
['text':' Use the megamorphic guard if we're in megamorphic mode, except if |obj|','line_number':912,'multiline':False]
['text':' is a Window as GuardHasGetterSetter doesn't support this yet (Window may','line_number':913,'multiline':False]
['text':' require outerizing).','line_number':914,'multiline':False]
['text':' Guard on the holder's shape.','line_number':924,'multiline':False]
['text':' holderIsConstant = ','line_number':929,'multiline':True]
['text':' Tell the analysis the |DOMInstanceClassHasProtoAtDepth| hook can't GC.','line_number':981,'multiline':False]
['text':' Note: this relies on EmitCallGetterResultGuards emitting a shape guard','line_number':1014,'multiline':False]
['text':' for specialized stubs.','line_number':1015,'multiline':False]
['text':' The shape guard ensures the receiver's Class is valid for this DOM getter.','line_number':1016,'multiline':False]
['text':' Returns whether obj is a WindowProxy wrapping the script's global.','line_number':1091,'multiline':False]
['text':' Ion relies on the WindowProxy's group changing (and the group getting','line_number':1102,'multiline':False]
['text':' marked as having unknown properties) on navigation. If we ever stop','line_number':1103,'multiline':False]
['text':' transplanting same-compartment WindowProxies, this assert will fail and we','line_number':1104,'multiline':False]
['text':' need to fix that code.','line_number':1105,'multiline':False]
['text':' This must be a WindowProxy for a global in this compartment. Else it would','line_number':1108,'multiline':False]
['text':' be a cross-compartment wrapper and IsWindowProxy returns false for','line_number':1109,'multiline':False]
['text':' those.','line_number':1110,'multiline':False]
['text':' Only optimize lookups on the WindowProxy for the current global. Other','line_number':1113,'multiline':False]
['text':' WindowProxies in the compartment may require security checks (based on','line_number':1114,'multiline':False]
['text':' mutable document.domain). See bug 1516775.','line_number':1115,'multiline':False]
['text':' Guards objId is a WindowProxy for windowObj. Returns the window's operand id.','line_number':1119,'multiline':False]
['text':' Note: update AddCacheIRGetPropFunction in BaselineInspector.cpp when making','line_number':1123,'multiline':False]
['text':' changes here.','line_number':1124,'multiline':False]
['text':' Attach a stub when the receiver is a WindowProxy and we can do the lookup','line_number':1134,'multiline':False]
['text':' on the Window (the global object).','line_number':1135,'multiline':False]
['text':' If we're megamorphic prefer a generic proxy stub that handles a lot more','line_number':1141,'multiline':False]
['text':' cases.','line_number':1142,'multiline':False]
['text':' Now try to do the lookup on the Window (the current global).','line_number':1147,'multiline':False]
['text':' Make sure the native getter is okay with the IC passing the Window','line_number':1169,'multiline':False]
['text':' instead of the WindowProxy as |this| value.','line_number':1170,'multiline':False]
['text':' If a |super| access, it is not worth the complexity to attach an IC.','line_number':1178,'multiline':False]
['text':' Guard the incoming object is a WindowProxy and inline a getter call','line_number':1183,'multiline':False]
['text':' based on the Window object.','line_number':1184,'multiline':False]
['text':' We can only optimize this very wrapper-handler, because others might','line_number':1213,'multiline':False]
['text':' have a security policy.','line_number':1214,'multiline':False]
['text':' If we're megamorphic prefer a generic proxy stub that handles a lot more','line_number':1220,'multiline':False]
['text':' cases.','line_number':1221,'multiline':False]
['text':' If we allowed different zones we would have to wrap strings.','line_number':1231,'multiline':False]
['text':' Take the unwrapped object's global, and wrap in a','line_number':1236,'multiline':False]
['text':' this-compartment wrapper. This is what will be stored in the IC','line_number':1237,'multiline':False]
['text':' keep the compartment alive.','line_number':1238,'multiline':False]
['text':' Enter realm of target to prevent failing compartment assertions when doing','line_number':1248,'multiline':False]
['text':' the lookup.','line_number':1249,'multiline':False]
['text':' Load the object wrapped by the CCW','line_number':1265,'multiline':False]
['text':' If the compartment of the wrapped object is different we should fail.','line_number':1268,'multiline':False]
['text':' Look for a getter we can call on the xray or its prototype chain.','line_number':1323,'multiline':False]
['text':' Load the object wrapped by the CCW','line_number':1367,'multiline':False]
['text':' Test the wrapped object's class. The properties held by xrays or their','line_number':1370,'multiline':False]
['text':' prototypes will be invariant for objects of a given class, except for','line_number':1371,'multiline':False]
['text':' changes due to xray expandos or xray prototype mutations.','line_number':1372,'multiline':False]
['text':' Make sure the expandos on the xray and its prototype chain match up with','line_number':1375,'multiline':False]
['text':' what we expect. The expando shape needs to be consistent, to ensure it','line_number':1376,'multiline':False]
['text':' has not had any shadowing properties added, and the expando cannot have','line_number':1377,'multiline':False]
['text':' any custom prototype (xray prototypes are stable otherwise).','line_number':1378,'multiline':False]
['text':'','line_number':1379,'multiline':False]
['text':' We can only do this for xrays with exclusive access to their expandos','line_number':1380,'multiline':False]
['text':' (as we checked earlier), which store a pointer to their expando','line_number':1381,'multiline':False]
['text':' directly. Xrays in other compartments may share their expandos with each','line_number':1382,'multiline':False]
['text':' other and a VM call is needed just to find the expando.','line_number':1383,'multiline':False]
['text':' Ensure that the incoming object is not a DOM proxy, so that we can get to','line_number':1414,'multiline':False]
['text':' the specialized stubs','line_number':1415,'multiline':False]
['text':' Attach a stub that handles every id.','line_number':1424,'multiline':False]
['text':' Try to convert the Value to a TypedArray index or DataView offset.','line_number':1438,'multiline':False]
['text':' Use NumberEqualsInt64 because ToPropertyKey(-0) is 0.','line_number':1446,'multiline':False]
['text':' Shape determines Class, so now it must be a DOM proxy.','line_number':1478,'multiline':False]
['text':' Guard the expando is an object and shape guard.','line_number':1486,'multiline':False]
['text':' Try to do the lookup on the expando object.','line_number':1510,'multiline':False]
['text':' Load from the expando's slots.','line_number':1530,'multiline':False]
['text':' Call the getter. Note that we pass objId, the DOM proxy, as |this|','line_number':1534,'multiline':False]
['text':' and not the expando object.','line_number':1535,'multiline':False]
['text':' Callers are expected to have already guarded on the shape of the','line_number':1561,'multiline':False]
['text':' object, which guarantees the object is a DOM proxy.','line_number':1562,'multiline':False]
['text':' Guard there's no expando object.','line_number':1583,'multiline':False]
['text':' Guard the proxy either has no expando object or, if it has one, that','line_number':1586,'multiline':False]
['text':' the shape matches the current expando object.','line_number':1587,'multiline':False]
['text':' Guard that our expando object hasn't started shadowing this property.','line_number':1617,'multiline':False]
['text':' Found the property on the prototype chain. Treat it like a native','line_number':1622,'multiline':False]
['text':' getprop.','line_number':1623,'multiline':False]
['text':' Guard on the holder of the property.','line_number':1626,'multiline':False]
['text':' EmitCallGetterResultNoGuards expects |obj| to be the object the','line_number':1634,'multiline':False]
['text':' property is on to do some checks. Since we actually looked at','line_number':1635,'multiline':False]
['text':' checkObj, and no extra guards will be generated, we can just','line_number':1636,'multiline':False]
['text':' pass that instead.','line_number':1637,'multiline':False]
['text':' holderIsConstant = ','line_number':1642,'multiline':True]
['text':' Property was not found on the prototype chain. Deoptimize down to','line_number':1647,'multiline':False]
['text':' proxy get call.','line_number':1648,'multiline':False]
['text':' The proxy stubs don't currently support |super| access.','line_number':1668,'multiline':False]
['text':' handleDOMProxies = ','line_number':1675,'multiline':True]
['text':' Fall through to the generic shadowed case.','line_number':1683,'multiline':False]
['text':' handleDOMProxies = ','line_number':1689,'multiline':True]
['text':' handleDOMProxies = ','line_number':1692,'multiline':True]
['text':' Receiver should be the object.','line_number':1749,'multiline':False]
['text':' Emit all the normal guards for calling this native, but specialize','line_number':1786,'multiline':False]
['text':' callNativeGetterResult.','line_number':1787,'multiline':False]
['text':' Receiver should be the object.','line_number':1828,'multiline':False]
['text':' byteOffset and byteLength both throw when the ArrayBuffer is detached.','line_number':1838,'multiline':False]
['text':' Emit all the normal guards for calling this native, but specialize','line_number':1863,'multiline':False]
['text':' callNativeGetterResult.','line_number':1864,'multiline':False]
['text':' Receiver should be the object.','line_number':1898,'multiline':False]
['text':' Emit all the normal guards for calling this native, but specialize','line_number':1927,'multiline':False]
['text':' callNativeGetterResult.','line_number':1928,'multiline':False]
['text':' Receiver should be the object.','line_number':1953,'multiline':False]
['text':' Emit all the normal guards for calling this native, but specialize','line_number':1973,'multiline':False]
['text':' callNativeGetterResult.','line_number':1974,'multiline':False]
['text':' Function properties are lazily resolved so they might not be defined yet.','line_number':1987,'multiline':False]
['text':' And we might end up in a situation where we always have a fresh function','line_number':1988,'multiline':False]
['text':' object during the IC generation.','line_number':1989,'multiline':False]
['text':' If this property exists already, don't attach the stub.','line_number':2001,'multiline':False]
['text':' length was probably deleted from the function.','line_number':2009,'multiline':False]
['text':' Lazy functions don't store the length.','line_number':2014,'multiline':False]
['text':' Length can be non-int32 for bound functions.','line_number':2019,'multiline':False]
['text':' name was probably deleted from the function.','line_number':2027,'multiline':False]
['text':' Unless the bound function name prefix is present, we need to call into','line_number':2032,'multiline':False]
['text':' the VM to compute the full name.','line_number':2033,'multiline':False]
['text':' Don't emit a stub until the target binding has been initialized.','line_number':2107,'multiline':False]
['text':' Check for the specific namespace object.','line_number':2112,'multiline':False]
['text':' String length is special-cased, see js::GetProperty.','line_number':2132,'multiline':False]
['text':' This follows JSString::getChar, otherwise we fail to attach getChar in a','line_number':2241,'multiline':False]
['text':' lot of cases.','line_number':2242,'multiline':False]
['text':' Make sure the left side contains the index.','line_number':2246,'multiline':False]
['text':' No elements must have been overridden or deleted.','line_number':2286,'multiline':False]
['text':' Check bounds.','line_number':2291,'multiline':False]
['text':' And finally also check that the argument isn't forwarded.','line_number':2296,'multiline':False]
['text':' Only mapped arguments objects have a `callee` property.','line_number':2317,'multiline':False]
['text':' The callee must not have been overridden or deleted.','line_number':2326,'multiline':False]
['text':' Make sure the objects on the prototype don't have any indexed properties','line_number':2372,'multiline':False]
['text':' or that such properties can't appear without a shape change.','line_number':2373,'multiline':False]
['text':' Otherwise returning undefined for holes would obviously be incorrect,','line_number':2374,'multiline':False]
['text':' because we would have to lookup a property on the prototype instead.','line_number':2375,'multiline':False]
['text':' The first two checks are also relevant to the receiver object.','line_number':2377,'multiline':False]
['text':' Don't need to check prototype for OwnProperty checks','line_number':2387,'multiline':False]
['text':' Make sure objects on the prototype don't have dense elements.','line_number':2401,'multiline':False]
['text':' Guard on the shape, to prevent non-dense elements from appearing.','line_number':2427,'multiline':False]
['text':' alwaysGuardFirstProto = ','line_number':2430,'multiline':True]
['text':' Stub doesn't handle negative indices.','line_number':2446,'multiline':False]
['text':' We also need to be past the end of the dense capacity, to ensure sparse.','line_number':2451,'multiline':False]
['text':' Only handle Array objects in this stub.','line_number':2456,'multiline':False]
['text':' Here, we ensure that the prototype chain does not define any sparse','line_number':2461,'multiline':False]
['text':' indexed properties on the shape lineage. This allows us to guard on','line_number':2462,'multiline':False]
['text':' the shapes up the prototype chain to ensure that no indexed properties','line_number':2463,'multiline':False]
['text':' exist outside of the dense elements.','line_number':2464,'multiline':False]
['text':'','line_number':2465,'multiline':False]
['text':' The `GeneratePrototypeHoleGuards` call below will guard on the shapes,','line_number':2466,'multiline':False]
['text':' as well as ensure that no prototypes contain dense elements, allowing','line_number':2467,'multiline':False]
['text':' us to perform a pure shape-search for out-of-bounds integer-indexed','line_number':2468,'multiline':False]
['text':' properties on the recevier object.','line_number':2469,'multiline':False]
['text':' Ensure that obj is an Array.','line_number':2475,'multiline':False]
['text':' The helper we are going to call only applies to non-dense elements.','line_number':2478,'multiline':False]
['text':' Ensures we are able to efficiently able to map to an integral jsid.','line_number':2481,'multiline':False]
['text':' Shape guard the prototype chain to avoid shadowing indexes from appearing.','line_number':2484,'multiline':False]
['text':' The helper function also ensures that the index does not appear within the','line_number':2485,'multiline':False]
['text':' dense element set of the prototypes.','line_number':2486,'multiline':False]
['text':' alwaysGuardFirstProto = ','line_number':2488,'multiline':True]
['text':' At this point, we are guaranteed that the indexed property will not','line_number':2490,'multiline':False]
['text':' be found on one of the prototypes. We are assured that we only have','line_number':2491,'multiline':False]
['text':' to check that the receiving object has the property.','line_number':2492,'multiline':False]
['text':' For Uint32Array we let the stub return an Int32 if we have not seen a','line_number':2501,'multiline':False]
['text':' double, to allow better codegen in Warp while avoiding bailout loops.','line_number':2502,'multiline':False]
['text':' Return value is only relevant for Uint32Array.','line_number':2507,'multiline':False]
['text':' If the number is not representable as an integer the result will be','line_number':2536,'multiline':False]
['text':' |undefined| so we leave |forceDoubleForUint32| as false.','line_number':2537,'multiline':False]
['text':' To allow other types to attach in the non-megamorphic case we test the','line_number':2564,'multiline':False]
['text':' specific matching native receiver; however, once megamorphic we can attach','line_number':2565,'multiline':False]
['text':' for any native','line_number':2566,'multiline':False]
['text':' The proxy stubs don't currently support |super| access.','line_number':2589,'multiline':False]
['text':' We are not guarding against DOM proxies here, because there is no other','line_number':2596,'multiline':False]
['text':' specialized DOM IC we could attach.','line_number':2597,'multiline':False]
['text':' We could call maybeEmitIdGuard here and then emit ProxyGetResult,','line_number':2598,'multiline':False]
['text':' but for GetElem we prefer to attach a stub that can handle any Value','line_number':2599,'multiline':False]
['text':' so we don't attach a new stub for every id.','line_number':2600,'multiline':False]
['text':' Constant PropertyName, no guards necessary.','line_number':2643,'multiline':False]
['text':' Constant PropertyName, no guards necessary.','line_number':2655,'multiline':False]
['text':' The property must be found, and it must be found as a normal data property.','line_number':2692,'multiline':False]
['text':' In the browser the global prototype chain should be immutable.','line_number':2703,'multiline':False]
['text':' The property must be found, and it must be found as a normal data property.','line_number':2735,'multiline':False]
['text':' This might still be an uninitialized lexical.','line_number':2740,'multiline':False]
['text':' There is no need to guard on the shape. Lexical bindings are','line_number':2746,'multiline':False]
['text':' non-configurable, and this stub cannot be shared across globals.','line_number':2747,'multiline':False]
['text':' Check the prototype chain from the global to the holder','line_number':2752,'multiline':False]
['text':' prototype. Ignore the global lexical scope as it doesn't figure','line_number':2753,'multiline':False]
['text':' into the prototype chain. We guard on the global lexical','line_number':2754,'multiline':False]
['text':' scope's shape independently.','line_number':2755,'multiline':False]
['text':' Shape guard for global lexical.','line_number':2760,'multiline':False]
['text':' Guard on the shape of the GlobalObject.','line_number':2763,'multiline':False]
['text':' Shape guard holder.','line_number':2769,'multiline':False]
['text':' Shape guard for global lexical.','line_number':2809,'multiline':False]
['text':' Guard on the shape of the GlobalObject.','line_number':2812,'multiline':False]
['text':' Shape guard holder.','line_number':2817,'multiline':False]
['text':' holderIsConstant = ','line_number':2821,'multiline':True]
['text':' Note: pass true for |holderIsConstant| because the holder must be the','line_number':2823,'multiline':False]
['text':' current global object.','line_number':2824,'multiline':False]
['text':' holderIsConstant = ','line_number':2826,'multiline':True]
['text':' The global shape guard above ensures the instance JSClass is correct.','line_number':2831,'multiline':False]
['text':' We can skip a guard on the call object if the script's bindings are','line_number':2849,'multiline':False]
['text':' guaranteed to be immutable (and thus cannot introduce shadowing variables).','line_number':2850,'multiline':False]
['text':' If the function is a relazified self-hosted function it has no BaseScript','line_number':2851,'multiline':False]
['text':' and we pessimistically create the guard.','line_number':2852,'multiline':False]
['text':' Check for an 'own' property on the env. There is no need to','line_number':2885,'multiline':False]
['text':' check the prototype as non-with scopes do not inherit properties','line_number':2886,'multiline':False]
['text':' from any prototype.','line_number':2887,'multiline':False]
['text':' If this is an uninitialized lexical or a const, we need to return a','line_number':2977,'multiline':False]
['text':' RuntimeLexicalErrorObject.','line_number':2978,'multiline':False]
['text':' Lexical bindings are non-configurable so we can just return the','line_number':2988,'multiline':False]
['text':' global lexical.','line_number':2989,'multiline':False]
['text':' If the property exists on the global and is non-configurable, it cannot','line_number':2992,'multiline':False]
['text':' be shadowed by the lexical scope so we can just return the global without','line_number':2993,'multiline':False]
['text':' a shape guard.','line_number':2994,'multiline':False]
['text':' When we reach an unqualified variables object (like the global) we','line_number':3024,'multiline':False]
['text':' have to stop looking and return that object.','line_number':3025,'multiline':False]
['text':' Check for an 'own' property on the env. There is no need to','line_number':3030,'multiline':False]
['text':' check the prototype as non-with scopes do not inherit properties','line_number':3031,'multiline':False]
['text':' from any prototype.','line_number':3032,'multiline':False]
['text':' If this is an uninitialized lexical or a const, we need to return a','line_number':3041,'multiline':False]
['text':' RuntimeLexicalErrorObject.','line_number':3042,'multiline':False]
['text':' Guard shape to ensure object class is NativeObject.','line_number':3098,'multiline':False]
['text':' Guard shape to ensure class is NativeObject and to prevent non-dense','line_number':3125,'multiline':False]
['text':' elements being added. Also ensures prototype doesn't change if dynamic','line_number':3126,'multiline':False]
['text':' checks aren't emitted.','line_number':3127,'multiline':False]
['text':' Generate prototype guards if needed. This includes monitoring that','line_number':3130,'multiline':False]
['text':' properties were not added in the chain.','line_number':3131,'multiline':False]
['text':' alwaysGuardFirstProto = ','line_number':3134,'multiline':True]
['text':' allowIndexedReceiver = ','line_number':3158,'multiline':True]
['text':' Guard that this is a native object.','line_number':3162,'multiline':False]
['text':' Generate prototype guards if needed. This includes monitoring that','line_number':3165,'multiline':False]
['text':' properties were not added in the chain.','line_number':3166,'multiline':False]
['text':' alwaysGuardFirstProto = ','line_number':3169,'multiline':True]
['text':' Because of the prototype guard we know that the prototype chain','line_number':3172,'multiline':False]
['text':' does not include any dense or sparse (i.e indexed) properties.','line_number':3173,'multiline':False]
['text':' supportOOB = ','line_number':3261,'multiline':True]
['text':' Check that property doesn't exist on |obj| or it's prototype chain. These','line_number':3293,'multiline':False]
['text':' checks allow NativeObjects with a NativeObject prototype chain. They return','line_number':3294,'multiline':False]
['text':' NoAction if unknown such as resolve hooks or proxies.','line_number':3295,'multiline':False]
['text':' NOTE: Argument order is PROPERTY, OBJECT','line_number':3335,'multiline':False]
['text':' Optimize Proxies','line_number':3346,'multiline':False]
['text':' Can't determine if HasOwnProperty purely.','line_number':3417,'multiline':False]
['text':' Don't attach a stub if the operation will throw.','line_number':3422,'multiline':False]
['text':' We allow negative zero here.','line_number':3468,'multiline':False]
['text':' If this is an op like JSOp::InitElem / [[DefineOwnProperty]], the','line_number':3593,'multiline':False]
['text':' property's attributes may have to be changed too, so make sure it's a','line_number':3594,'multiline':False]
['text':' simple data property.','line_number':3595,'multiline':False]
['text':' There is no need to guard on the shape. Global lexical bindings are','line_number':3613,'multiline':False]
['text':' non-configurable and can not be shadowed.','line_number':3614,'multiline':False]
['text':' Ensure that the env can't change.','line_number':3617,'multiline':False]
['text':' Uninitialized let bindings use a RuntimeLexicalErrorObject.','line_number':3626,'multiline':False]
['text':' Don't attach a megamorphic store slot stub for ops like JSOp::InitElem.','line_number':3642,'multiline':False]
['text':' Scripted functions and natives with JIT entry can use the scripted path.','line_number':3764,'multiline':False]
['text':' Don't attach a setter stub for ops like JSOp::InitElem.','line_number':3771,'multiline':False]
['text':' Use the megamorphic guard if we're in megamorphic mode, except if |obj|','line_number':3835,'multiline':False]
['text':' is a Window as GuardHasGetterSetter doesn't support this yet (Window may','line_number':3836,'multiline':False]
['text':' require outerizing).','line_number':3837,'multiline':False]
['text':' Guard on the holder's shape.','line_number':3844,'multiline':False]
['text':' holderIsConstant = ','line_number':3849,'multiline':True]
['text':' Don't attach an array length stub for ops like JSOp::InitElem.','line_number':3876,'multiline':False]
['text':' Setting holes requires extra code for marking the elements non-packed.','line_number':3905,'multiline':False]
['text':' Don't optimize InitElem (DefineProperty) on non-extensible objects: when','line_number':3908,'multiline':False]
['text':' the elements are sealed, we have to throw an exception. Note that we have','line_number':3909,'multiline':False]
['text':' to check !isExtensible instead of denseElementsAreSealed because sealing','line_number':3910,'multiline':False]
['text':' a (non-extensible) object does not necessarily trigger a Shape change.','line_number':3911,'multiline':False]
['text':' Make sure the objects on the prototype don't have any indexed properties','line_number':3926,'multiline':False]
['text':' or that such properties can't appear without a shape change.','line_number':3927,'multiline':False]
['text':' The first two checks are also relevant to the receiver object.','line_number':3929,'multiline':False]
['text':' If we're initializing a property instead of setting one, the objects','line_number':3941,'multiline':False]
['text':' on the prototype are not relevant.','line_number':3942,'multiline':False]
['text':' We have to make sure the proto has no non-writable (frozen) elements','line_number':3956,'multiline':False]
['text':' because we're not allowed to shadow them.','line_number':3957,'multiline':False]
['text':' Setting holes requires extra code for marking the elements non-packed.','line_number':3977,'multiline':False]
['text':' Optimize if we're adding an element at initLength or writing to a hole.','line_number':3999,'multiline':False]
['text':'','line_number':4000,'multiline':False]
['text':' In the case where index > initLength, we need noteHasDenseAdd to be called','line_number':4001,'multiline':False]
['text':' to ensure Ion is aware that writes have occurred to-out-of-bound indexes','line_number':4002,'multiline':False]
['text':' before.','line_number':4003,'multiline':False]
['text':' Can't add new elements to arrays with non-writable length.','line_number':4011,'multiline':False]
['text':' Typed arrays don't have dense elements.','line_number':4017,'multiline':False]
['text':' Check for other indexed properties or class hooks.','line_number':4022,'multiline':False]
['text':' Also shape guard the proto chain, unless this is an InitElem.','line_number':4029,'multiline':False]
['text':' Add an IC for adding or updating a sparse array element.','line_number':4041,'multiline':False]
['text':' We cannot attach a stub to a non-extensible object','line_number':4057,'multiline':False]
['text':' Stub doesn't handle negative indices.','line_number':4062,'multiline':False]
['text':' We also need to be past the end of the dense capacity, to ensure sparse.','line_number':4067,'multiline':False]
['text':' Only handle Array objects in this stub.','line_number':4072,'multiline':False]
['text':' Don't attach if we're adding to an array with non-writable length.','line_number':4078,'multiline':False]
['text':' Indexed properties on the prototype chain aren't handled by the helper.','line_number':4084,'multiline':False]
['text':' Ensure we are still talking about an array class.','line_number':4090,'multiline':False]
['text':' The helper we are going to call only applies to non-dense elements.','line_number':4093,'multiline':False]
['text':' Guard extensible: We may be trying to add a new element, and so we'd best','line_number':4096,'multiline':False]
['text':' be able to do so safely.','line_number':4097,'multiline':False]
['text':' Ensures we are able to efficiently able to map to an integral jsid.','line_number':4100,'multiline':False]
['text':' Shape guard the prototype chain to avoid shadowing indexes from appearing.','line_number':4103,'multiline':False]
['text':' Guard the prototype of the receiver explicitly, because the receiver's','line_number':4104,'multiline':False]
['text':' shape is not being guarded as a proxy for that.','line_number':4105,'multiline':False]
['text':' Dense elements may appear on the prototype chain (and prototypes may','line_number':4108,'multiline':False]
['text':' have a different notion of which elements are dense), but they can','line_number':4109,'multiline':False]
['text':' only be data properties, so our specialized Set handler is ok to bind','line_number':4110,'multiline':False]
['text':' to them.','line_number':4111,'multiline':False]
['text':' Ensure that if we're adding an element to the object, the object's','line_number':4114,'multiline':False]
['text':' length is writable.','line_number':4115,'multiline':False]
['text':' strict = ','line_number':4120,'multiline':True]
['text':' Don't attach if the input type doesn't match the guard added below.','line_number':4139,'multiline':False]
['text':' InitElem (DefineProperty) has to throw an exception on out-of-bounds.','line_number':4151,'multiline':False]
['text':' Ensure that the incoming object is not a DOM proxy, so that we can','line_number':4177,'multiline':False]
['text':' get to the specialized stubs. If handleDOMProxies is true, we were','line_number':4178,'multiline':False]
['text':' unable to attach a specialized DOM stub, so we just handle all','line_number':4179,'multiline':False]
['text':' proxies here.','line_number':4180,'multiline':False]
['text':' Attach a stub that handles every id.','line_number':4188,'multiline':False]
['text':' Guard that our expando object hasn't started shadowing this property.','line_number':4234,'multiline':False]
['text':' Guard on the holder of the property.','line_number':4240,'multiline':False]
['text':' holderIsConstant = ','line_number':4245,'multiline':True]
['text':' EmitCallSetterNoGuards expects |obj| to be the object the property is','line_number':4247,'multiline':False]
['text':' on to do some checks. Since we actually looked at proto, and no extra','line_number':4248,'multiline':False]
['text':' guards will be generated, we can just pass that instead.','line_number':4249,'multiline':False]
['text':' Call the setter. Note that we pass objId, the DOM proxy, as |this|','line_number':4292,'multiline':False]
['text':' and not the expando object.','line_number':4293,'multiline':False]
['text':' Don't attach a proxy stub for ops like JSOp::InitElem.','line_number':4313,'multiline':False]
['text':' handleDOMProxies = ','line_number':4324,'multiline':True]
['text':' Fall through to the generic shadowed case.','line_number':4332,'multiline':False]
['text':' handleDOMProxies = ','line_number':4338,'multiline':True]
['text':' handleDOMProxies = ','line_number':4341,'multiline':True]
['text':' Don't attach a proxy stub for ops like JSOp::InitElem.','line_number':4350,'multiline':False]
['text':' Like GetPropIRGenerator::tryAttachProxyElement, don't check for DOM','line_number':4359,'multiline':False]
['text':' proxies here as we don't have specialized DOM stubs for this.','line_number':4360,'multiline':False]
['text':' The generic proxy stubs are faster.','line_number':4377,'multiline':False]
['text':' Attach a stub when the receiver is a WindowProxy and we can do the set','line_number':4394,'multiline':False]
['text':' on the Window (the global object).','line_number':4395,'multiline':False]
['text':' If we're megamorphic prefer a generic proxy stub that handles a lot more','line_number':4401,'multiline':False]
['text':' cases.','line_number':4402,'multiline':False]
['text':' Now try to do the set on the Window (the current global).','line_number':4407,'multiline':False]
['text':' Special-case JSFunction resolve hook to allow redefining the 'prototype'','line_number':4428,'multiline':False]
['text':' property without triggering lazy expansion of property and object','line_number':4429,'multiline':False]
['text':' allocation.','line_number':4430,'multiline':False]
['text':' We're only interested in functions that have a builtin .prototype','line_number':4434,'multiline':False]
['text':' property (needsPrototypeProperty). The stub will guard on this because','line_number':4435,'multiline':False]
['text':' the builtin .prototype property is non-configurable/non-enumerable and it','line_number':4436,'multiline':False]
['text':' would be wrong to add a property with those attributes to a function that','line_number':4437,'multiline':False]
['text':' doesn't have a builtin .prototype.','line_number':4438,'multiline':False]
['text':'','line_number':4439,'multiline':False]
['text':' Inlining needsPrototypeProperty in JIT code is complicated so we use','line_number':4440,'multiline':False]
['text':' isNonBuiltinConstructor as a stronger condition that's easier to check','line_number':4441,'multiline':False]
['text':' from JIT code.','line_number':4442,'multiline':False]
['text':' If property exists this isn't an "add".','line_number':4449,'multiline':False]
['text':' Normal Case: If property exists this isn't an "add"','line_number':4454,'multiline':False]
['text':' Object must be extensible, or we must be initializing a private','line_number':4464,'multiline':False]
['text':' elem.','line_number':4465,'multiline':False]
['text':' Also watch out for addProperty hooks. Ignore the Array addProperty hook,','line_number':4471,'multiline':False]
['text':' because it doesn't do anything for non-index properties.','line_number':4472,'multiline':False]
['text':' Walk up the object prototype chain and ensure that all prototypes are','line_number':4479,'multiline':False]
['text':' native, and that all prototypes have no setter defined on the property.','line_number':4480,'multiline':False]
['text':' If prototype defines this property in a non-plain way, don't optimize.','line_number':4487,'multiline':False]
['text':' Otherwise, if there's no such property, watch out for a resolve hook','line_number':4493,'multiline':False]
['text':' that would need to be invoked and thus prevent inlining of property','line_number':4494,'multiline':False]
['text':' addition. Allow the JSFunction resolve hook as it only defines plain','line_number':4495,'multiline':False]
['text':' data properties and we don't need to invoke it for objects on the','line_number':4496,'multiline':False]
['text':' proto chain.','line_number':4497,'multiline':False]
['text':' The property must be the last added property of the object.','line_number':4548,'multiline':False]
['text':' Verify exactly one property was added by comparing the property map','line_number':4553,'multiline':False]
['text':' lengths.','line_number':4554,'multiline':False]
['text':' Basic shape checks.','line_number':4562,'multiline':False]
['text':' Shape guard the object.','line_number':4571,'multiline':False]
['text':' If this is the special function.prototype case, we need to guard the','line_number':4574,'multiline':False]
['text':' function is a non-builtin constructor. See canAttachAddSlotStub.','line_number':4575,'multiline':False]
['text':' Ensure RHS is a function -- could be a Proxy, which the IC isn't prepared','line_number':4617,'multiline':False]
['text':' to handle.','line_number':4618,'multiline':False]
['text':' Look up the @@hasInstance property, and check that Function.__proto__ is','line_number':4631,'multiline':False]
['text':' the property holder, and that no object further down the prototype chain','line_number':4632,'multiline':False]
['text':' (including this function) has shadowed it; together with the fact that','line_number':4633,'multiline':False]
['text':' Function.__proto__[@@hasInstance] is immutable, this ensures that the','line_number':4634,'multiline':False]
['text':' hasInstance hook will not change without the need to guard on the actual','line_number':4635,'multiline':False]
['text':' property value.','line_number':4636,'multiline':False]
['text':' If the above succeeded, then these should be true about @@hasInstance,','line_number':4653,'multiline':False]
['text':' because the property on Function.__proto__ is an immutable data property:','line_number':4654,'multiline':False]
['text':' Ensure that the function's prototype slot is the same.','line_number':4661,'multiline':False]
['text':' Abstract Objects','line_number':4678,'multiline':False]
['text':' Ensure that the shapes up the prototype chain for the RHS remain the same','line_number':4685,'multiline':False]
['text':' so that @@hasInstance is not shadowed by some intermediate prototype','line_number':4686,'multiline':False]
['text':' object.','line_number':4687,'multiline':False]
['text':' Load prototypeObject into the cache -- consumed twice in the IC','line_number':4694,'multiline':False]
['text':' Ensure that rhs[slot] == prototypeObject.','line_number':4696,'multiline':False]
['text':' Needn't guard LHS is object, because the actual stub can handle that','line_number':4699,'multiline':False]
['text':' and correctly return false.','line_number':4700,'multiline':False]
['text':' Silence Clang -Wunused-private-field warning.','line_number':4714,'multiline':False]
['text':' Note: we don't use GuardIsNumber for int32 values because it's less','line_number':4751,'multiline':False]
['text':' efficient in Warp (unboxing to double instead of int32).','line_number':4752,'multiline':False]
['text':' Guard on the receiver's shape.','line_number':4819,'multiline':False]
['text':' Ensure the receiver has no dense elements.','line_number':4822,'multiline':False]
['text':' Do the same for the objects on the proto chain.','line_number':4825,'multiline':False]
['text':' alwaysGuardFirstProto = ','line_number':4827,'multiline':True]
['text':' Prototype must be Array.prototype.','line_number':4867,'multiline':False]
['text':' The object must not have an own @@iterator property.','line_number':4874,'multiline':False]
['text':' Ensure that Array.prototype's @@iterator slot is unchanged.','line_number':4880,'multiline':False]
['text':' Ensure that %ArrayIteratorPrototype%'s "next" slot is unchanged.','line_number':4908,'multiline':False]
['text':' The value must be a packed array.','line_number':4931,'multiline':False]
['text':' Prototype must be Array.prototype and Array.prototype[@@iterator] must not','line_number':4940,'multiline':False]
['text':' be modified.','line_number':4941,'multiline':False]
['text':' %ArrayIteratorPrototype%.next must not be modified.','line_number':4950,'multiline':False]
['text':' Guard the object is a packed array with Array.prototype as proto.','line_number':4962,'multiline':False]
['text':' Guard on Array.prototype[@@iterator].','line_number':4967,'multiline':False]
['text':' Guard on %ArrayIteratorPrototype%.next.','line_number':4973,'multiline':False]
['text':' Note: we rely on GuardSpecificFunction to also guard against the same','line_number':5018,'multiline':False]
['text':' native from a different realm.','line_number':5019,'multiline':False]
['text':' If we're constructing we also need to guard newTarget == callee.','line_number':5030,'multiline':False]
['text':' Guarding on the callee JSFunction* is most efficient, but doesn't work well','line_number':5042,'multiline':False]
['text':' for lambda clones (multiple functions with the same BaseScript). We guard','line_number':5043,'multiline':False]
['text':' on the function's BaseScript if the callee is scripted and this isn't the','line_number':5044,'multiline':False]
['text':' first IC stub.','line_number':5045,'multiline':False]
['text':' Only optimize on obj.push(val);','line_number':5056,'multiline':False]
['text':' Where |obj| is a native array.','line_number':5061,'multiline':False]
['text':' Check for other indexed properties or class hooks.','line_number':5069,'multiline':False]
['text':' isInit = ','line_number':5070,'multiline':True]
['text':' Can't add new elements to arrays with non-writable length.','line_number':5074,'multiline':False]
['text':' Check that array is extensible.','line_number':5079,'multiline':False]
['text':' Check that the array is completely initialized (no holes).','line_number':5084,'multiline':False]
['text':' After this point, we can generate code fine.','line_number':5092,'multiline':False]
['text':' Initialize the input operand.','line_number':5094,'multiline':False]
['text':' Guard callee is the 'push' native function.','line_number':5097,'multiline':False]
['text':' Guard this is an array object.','line_number':5100,'multiline':False]
['text':' Guard that the shape matches.','line_number':5105,'multiline':False]
['text':' Guard proto chain shapes.','line_number':5108,'multiline':False]
['text':' arr.push(x) is equivalent to arr[arr.length] = x for regular arrays.','line_number':5111,'multiline':False]
['text':' Expecting no arguments.','line_number':5123,'multiline':False]
['text':' Only optimize if |this| is a packed array.','line_number':5128,'multiline':False]
['text':' Other conditions:','line_number':5133,'multiline':False]
['text':'','line_number':5134,'multiline':False]
['text':' * The array length needs to be writable because we're changing it.','line_number':5135,'multiline':False]
['text':' * The array must be extensible. Non-extensible arrays require preserving','line_number':5136,'multiline':False]
['text':'   the |initializedLength == capacity| invariant on ObjectElements.','line_number':5137,'multiline':False]
['text':'   See NativeObject::shrinkCapacityToInitializedLength.','line_number':5138,'multiline':False]
['text':'   This also ensures the elements aren't sealed/frozen.','line_number':5139,'multiline':False]
['text':' * There must not be a for-in iterator for the elements because the IC stub','line_number':5140,'multiline':False]
['text':'   does not suppress deleted properties.','line_number':5141,'multiline':False]
['text':' Initialize the input operand.','line_number':5148,'multiline':False]
['text':' Guard callee is the 'pop' or 'shift' native function.','line_number':5151,'multiline':False]
['text':' Only handle argc <= 1.','line_number':5173,'multiline':False]
['text':' Only optimize if |this| is an array.','line_number':5178,'multiline':False]
['text':' The separator argument must be a string, if present.','line_number':5183,'multiline':False]
['text':' IC stub code can handle non-packed array.','line_number':5188,'multiline':False]
['text':' Initialize the input operand.','line_number':5190,'multiline':False]
['text':' Guard callee is the 'join' native function.','line_number':5193,'multiline':False]
['text':' Guard this is an array object.','line_number':5196,'multiline':False]
['text':' If argcount is 1, guard that the argument is a string.','line_number':5204,'multiline':False]
['text':' Do the join.','line_number':5212,'multiline':False]
['text':' Only handle argc <= 2.','line_number':5222,'multiline':False]
['text':' Only optimize if |this| is a packed array.','line_number':5227,'multiline':False]
['text':' Arguments for the sliced region must be integers.','line_number':5232,'multiline':False]
['text':' proto = ','line_number':5243,'multiline':True]
['text':' Initialize the input operand.','line_number':5249,'multiline':False]
['text':' Guard callee is the 'slice' native function.','line_number':5252,'multiline':False]
['text':' Need a single argument.','line_number':5286,'multiline':False]
['text':' Initialize the input operand.','line_number':5291,'multiline':False]
['text':' Guard callee is the 'isArray' native function.','line_number':5294,'multiline':False]
['text':' Check if the argument is an Array and return result.','line_number':5297,'multiline':False]
['text':' Ensure |this| is a DataViewObject.','line_number':5308,'multiline':False]
['text':' Expected arguments: offset (number), optional littleEndian (boolean).','line_number':5313,'multiline':False]
['text':' Bounds check the offset.','line_number':5327,'multiline':False]
['text':' For getUint32 we let the stub return an Int32 if we have not seen a','line_number':5333,'multiline':False]
['text':' double, to allow better codegen in Warp while avoiding bailout loops.','line_number':5334,'multiline':False]
['text':' Initialize the input operand.','line_number':5342,'multiline':False]
['text':' Guard callee is this DataView native function.','line_number':5345,'multiline':False]
['text':' Guard |this| is a DataViewObject.','line_number':5348,'multiline':False]
['text':' Convert offset to intPtr.','line_number':5354,'multiline':False]
['text':' supportOOB = ','line_number':5358,'multiline':True]
['text':' Ensure |this| is a DataViewObject.','line_number':5379,'multiline':False]
['text':' Expected arguments: offset (number), value, optional littleEndian (boolean)','line_number':5384,'multiline':False]
['text':' Bounds check the offset.','line_number':5401,'multiline':False]
['text':' Initialize the input operand.','line_number':5407,'multiline':False]
['text':' Guard callee is this DataView native function.','line_number':5410,'multiline':False]
['text':' Guard |this| is a DataViewObject.','line_number':5413,'multiline':False]
['text':' Convert offset to intPtr.','line_number':5419,'multiline':False]
['text':' supportOOB = ','line_number':5423,'multiline':True]
['text':' Convert value to number or BigInt.','line_number':5425,'multiline':False]
['text':' Self-hosted code calls this with (object, int32) arguments.','line_number':5449,'multiline':False]
['text':' Initialize the input operand.','line_number':5461,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5464,'multiline':False]
['text':' Guard that the first argument is an object.','line_number':5466,'multiline':False]
['text':' BytecodeEmitter::checkSelfHostedUnsafeGetReservedSlot ensures that the','line_number':5470,'multiline':False]
['text':' slot argument is constant. (At least for direct calls)','line_number':5471,'multiline':False]
['text':' Self-hosted code calls this with (object, int32, value) arguments.','line_number':5501,'multiline':False]
['text':' Initialize the input operand.','line_number':5513,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5516,'multiline':False]
['text':' Guard that the first argument is an object.','line_number':5518,'multiline':False]
['text':' BytecodeEmitter::checkSelfHostedUnsafeSetReservedSlot ensures that the','line_number':5522,'multiline':False]
['text':' slot argument is constant. (At least for direct calls)','line_number':5523,'multiline':False]
['text':' Get the value to set.','line_number':5525,'multiline':False]
['text':' Set the fixed slot and return undefined.','line_number':5528,'multiline':False]
['text':' This stub always returns undefined.','line_number':5531,'multiline':False]
['text':' The IsSuspendedGenerator intrinsic is only called in','line_number':5540,'multiline':False]
['text':' self-hosted code, so it's safe to assume we have a single','line_number':5541,'multiline':False]
['text':' argument and the callee is our intrinsic.','line_number':5542,'multiline':False]
['text':' Stack layout here is (bottom to top):','line_number':5548,'multiline':False]
['text':'  2: Callee','line_number':5549,'multiline':False]
['text':'  1: ThisValue','line_number':5550,'multiline':False]
['text':'  0: Arg <-- Top of stack.','line_number':5551,'multiline':False]
['text':' We only care about the argument.','line_number':5552,'multiline':False]
['text':' Check whether the argument is a suspended generator.','line_number':5555,'multiline':False]
['text':' We don't need guards, because IsSuspendedGenerator returns','line_number':5556,'multiline':False]
['text':' false for values that are not generator objects.','line_number':5557,'multiline':False]
['text':' Self-hosted code calls this with a single argument.','line_number':5567,'multiline':False]
['text':' Need a single object argument.','line_number':5570,'multiline':False]
['text':' TODO(Warp): Support all or more conversions to object.','line_number':5571,'multiline':False]
['text':' Note: ToObject and Object differ in their behavior for undefined/null.','line_number':5572,'multiline':False]
['text':' Initialize the input operand.','line_number':5577,'multiline':False]
['text':' Guard callee is the 'Object' function.','line_number':5580,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5581,'multiline':False]
['text':' Guard that the argument is an object.','line_number':5586,'multiline':False]
['text':' Return the object.','line_number':5590,'multiline':False]
['text':' Self-hosted code calls this with a single argument.','line_number':5604,'multiline':False]
['text':' Need a single int32 argument.','line_number':5607,'multiline':False]
['text':' TODO(Warp): Support all or more conversions to integer.','line_number':5608,'multiline':False]
['text':' Make sure to update this code correctly if we ever start','line_number':5609,'multiline':False]
['text':' returning non-int32 integers.','line_number':5610,'multiline':False]
['text':' Initialize the input operand.','line_number':5615,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5618,'multiline':False]
['text':' Guard that the argument is an int32.','line_number':5620,'multiline':False]
['text':' Return the int32.','line_number':5624,'multiline':False]
['text':' Self-hosted code calls this with a single argument.','line_number':5633,'multiline':False]
['text':' Need a single int32 argument.','line_number':5636,'multiline':False]
['text':' Initialize the input operand.','line_number':5641,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5644,'multiline':False]
['text':' ToLength(int32) is equivalent to max(int32, 0).','line_number':5646,'multiline':False]
['text':' Self-hosted code calls this with a single argument.','line_number':5660,'multiline':False]
['text':' Initialize the input operand.','line_number':5663,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5666,'multiline':False]
['text':' Type check the argument and return result.','line_number':5668,'multiline':False]
['text':' Self-hosted code calls this with a single object argument.','line_number':5678,'multiline':False]
['text':' Initialize the input operand.','line_number':5682,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5685,'multiline':False]
['text':' Check if the argument is packed and return result.','line_number':5687,'multiline':False]
['text':' Self-hosted code calls this with a single argument.','line_number':5698,'multiline':False]
['text':' Initialize the input operand.','line_number':5701,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5704,'multiline':False]
['text':' Check if the argument is callable and return result.','line_number':5706,'multiline':False]
['text':' Self-hosted code calls this with a single argument.','line_number':5716,'multiline':False]
['text':' Need a single object argument.','line_number':5719,'multiline':False]
['text':' Initialize the input operand.','line_number':5724,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5727,'multiline':False]
['text':' Guard that the argument is an object.','line_number':5729,'multiline':False]
['text':' Check if the argument is a constructor and return result.','line_number':5733,'multiline':False]
['text':' Self-hosted code calls this with an object argument.','line_number':5743,'multiline':False]
['text':' Initialize the input operand.','line_number':5751,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5754,'multiline':False]
['text':' Self-hosted code calls this with an object argument.','line_number':5768,'multiline':False]
['text':' Class must match.','line_number':5772,'multiline':False]
['text':' Initialize the input operand.','line_number':5778,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5781,'multiline':False]
['text':' Guard that the argument is an object.','line_number':5783,'multiline':False]
['text':' Guard that the object has the correct class.','line_number':5787,'multiline':False]
['text':' Return the object.','line_number':5790,'multiline':False]
['text':' Self-hosted code calls this with an object argument.','line_number':5801,'multiline':False]
['text':' Only optimize when the object isn't a proxy.','line_number':5805,'multiline':False]
['text':' Initialize the input operand.','line_number':5810,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5813,'multiline':False]
['text':' Perform the Class check.','line_number':5815,'multiline':False]
['text':' Self-hosted code calls this with (object, string, number) arguments.','line_number':5832,'multiline':False]
['text':' It's not guaranteed that the JITs have typed |lastIndex| as an Int32.','line_number':5838,'multiline':False]
['text':' Initialize the input operand.','line_number':5843,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5846,'multiline':False]
['text':' Guard argument types.','line_number':5848,'multiline':False]
['text':' Self-hosted code calls this with a single object argument.','line_number':5886,'multiline':False]
['text':' Initialize the input operand.','line_number':5890,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5893,'multiline':False]
['text':' Self-hosted code calls this with two object arguments.','line_number':5907,'multiline':False]
['text':' Initialize the input operand.','line_number':5912,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5915,'multiline':False]
['text':' Self-hosted code calls this with a single string argument.','line_number':5932,'multiline':False]
['text':' Initialize the input operand.','line_number':5936,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5939,'multiline':False]
['text':' Self-hosted code calls this with (string, int32, int32) arguments.','line_number':5953,'multiline':False]
['text':' Initialize the input operand.','line_number':5959,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5962,'multiline':False]
['text':' Self-hosted code calls this with (object, object) arguments.','line_number':5982,'multiline':False]
['text':' Only attach when obj.__proto__ is proto.','line_number':5990,'multiline':False]
['text':' Initialize the input operand.','line_number':5995,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':5998,'multiline':False]
['text':' Need a single string argument.','line_number':6012,'multiline':False]
['text':' TODO(Warp): Support all or more conversions to strings.','line_number':6013,'multiline':False]
['text':' Initialize the input operand.','line_number':6018,'multiline':False]
['text':' Guard callee is the 'String' function.','line_number':6021,'multiline':False]
['text':' Guard that the argument is a string.','line_number':6024,'multiline':False]
['text':' Return the string.','line_number':6028,'multiline':False]
['text':' Need a single string argument.','line_number':6038,'multiline':False]
['text':' TODO(Warp): Support all or more conversions to strings.','line_number':6039,'multiline':False]
['text':' proto = ','line_number':6046,'multiline':True]
['text':' Initialize the input operand.','line_number':6052,'multiline':False]
['text':' Guard callee is the 'String' function.','line_number':6055,'multiline':False]
['text':' Guard that the argument is a string.','line_number':6060,'multiline':False]
['text':' Expecting no arguments.','line_number':6073,'multiline':False]
['text':' Ensure |this| is a primitive string value.','line_number':6078,'multiline':False]
['text':' Initialize the input operand.','line_number':6083,'multiline':False]
['text':' Guard callee is the 'toString' OR 'valueOf' native function.','line_number':6086,'multiline':False]
['text':' Guard |this| is a string.','line_number':6089,'multiline':False]
['text':' Return the string','line_number':6094,'multiline':False]
['text':' Self-hosted code calls this with (string, string, string) arguments.','line_number':6104,'multiline':False]
['text':' Initialize the input operand.','line_number':6110,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':6113,'multiline':False]
['text':' Self-hosted code calls this with (string, string) arguments.','line_number':6133,'multiline':False]
['text':' Initialize the input operand.','line_number':6138,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':6141,'multiline':False]
['text':' Need one argument.','line_number':6158,'multiline':False]
['text':' Initialize the input operand.','line_number':6167,'multiline':False]
['text':' Guard callee is the 'charCodeAt' or 'charAt' native function.','line_number':6170,'multiline':False]
['text':' Guard this is a string.','line_number':6173,'multiline':False]
['text':' Guard int32 index.','line_number':6178,'multiline':False]
['text':' Load string char or code.','line_number':6183,'multiline':False]
['text':' Need one int32 argument.','line_number':6212,'multiline':False]
['text':' Initialize the input operand.','line_number':6217,'multiline':False]
['text':' Guard callee is the 'fromCharCode' native function.','line_number':6220,'multiline':False]
['text':' Guard int32 argument.','line_number':6223,'multiline':False]
['text':' Return string created from code.','line_number':6227,'multiline':False]
['text':' Need one int32 argument.','line_number':6237,'multiline':False]
['text':' String.fromCodePoint throws for invalid code points.','line_number':6242,'multiline':False]
['text':' Initialize the input operand.','line_number':6248,'multiline':False]
['text':' Guard callee is the 'fromCodePoint' native function.','line_number':6251,'multiline':False]
['text':' Guard int32 argument.','line_number':6254,'multiline':False]
['text':' Return string created from code point.','line_number':6258,'multiline':False]
['text':' Expecting no arguments.','line_number':6268,'multiline':False]
['text':' Ensure |this| is a primitive string value.','line_number':6273,'multiline':False]
['text':' Initialize the input operand.','line_number':6278,'multiline':False]
['text':' Guard callee is the 'toLowerCase' native function.','line_number':6281,'multiline':False]
['text':' Guard this is a string.','line_number':6284,'multiline':False]
['text':' Return string converted to lower-case.','line_number':6289,'multiline':False]
['text':' Expecting no arguments.','line_number':6299,'multiline':False]
['text':' Ensure |this| is a primitive string value.','line_number':6304,'multiline':False]
['text':' Initialize the input operand.','line_number':6309,'multiline':False]
['text':' Guard callee is the 'toUpperCase' native function.','line_number':6312,'multiline':False]
['text':' Guard this is a string.','line_number':6315,'multiline':False]
['text':' Return string converted to upper-case.','line_number':6320,'multiline':False]
['text':' Expecting no arguments.','line_number':6329,'multiline':False]
['text':' Initialize the input operand.','line_number':6337,'multiline':False]
['text':' Guard callee is the 'random' native function.','line_number':6340,'multiline':False]
['text':' Need one argument.','line_number':6354,'multiline':False]
['text':' Initialize the input operand.','line_number':6363,'multiline':False]
['text':' Guard callee is the 'abs' native function.','line_number':6366,'multiline':False]
['text':' abs(INT_MIN) is a double.','line_number':6372,'multiline':False]
['text':' Need one (number) argument.','line_number':6388,'multiline':False]
['text':' Initialize the input operand.','line_number':6393,'multiline':False]
['text':' Guard callee is the 'clz32' native function.','line_number':6396,'multiline':False]
['text':' Need one (number) argument.','line_number':6417,'multiline':False]
['text':' Initialize the input operand.','line_number':6422,'multiline':False]
['text':' Guard callee is the 'sign' native function.','line_number':6425,'multiline':False]
['text':' Math.sign returns a double only if the input is -0 or NaN so try to','line_number':6434,'multiline':False]
['text':' optimize the common Number => Int32 case.','line_number':6435,'multiline':False]
['text':' Need two (number) arguments.','line_number':6455,'multiline':False]
['text':' Initialize the input operand.','line_number':6460,'multiline':False]
['text':' Guard callee is the 'imul' native function.','line_number':6463,'multiline':False]
['text':' Treat both arguments as numbers if at least one of them is non-int32.','line_number':6474,'multiline':False]
['text':' Need one (number) argument.','line_number':6488,'multiline':False]
['text':' Check if the result fits in int32.','line_number':6493,'multiline':False]
['text':' Initialize the input operand.','line_number':6498,'multiline':False]
['text':' Guard callee is the 'floor' native function.','line_number':6501,'multiline':False]
['text':' Use an indirect truncation to inform the optimizer it needs to preserve','line_number':6510,'multiline':False]
['text':' a bailout when the input can't be represented as an int32, even if the','line_number':6511,'multiline':False]
['text':' final result is fully truncated.','line_number':6512,'multiline':False]
['text':' Need one (number) argument.','line_number':6532,'multiline':False]
['text':' Check if the result fits in int32.','line_number':6537,'multiline':False]
['text':' Initialize the input operand.','line_number':6542,'multiline':False]
['text':' Guard callee is the 'ceil' native function.','line_number':6545,'multiline':False]
['text':' Use an indirect truncation to inform the optimizer it needs to preserve','line_number':6554,'multiline':False]
['text':' a bailout when the input can't be represented as an int32, even if the','line_number':6555,'multiline':False]
['text':' final result is fully truncated.','line_number':6556,'multiline':False]
['text':' Need one (number) argument.','line_number':6576,'multiline':False]
['text':' Check if the result fits in int32.','line_number':6581,'multiline':False]
['text':' Initialize the input operand.','line_number':6586,'multiline':False]
['text':' Guard callee is the 'trunc' native function.','line_number':6589,'multiline':False]
['text':' We don't need an indirect truncation barrier here, because Math.trunc','line_number':6598,'multiline':False]
['text':' always truncates, but never rounds its input away from zero.','line_number':6599,'multiline':False]
['text':' Need one (number) argument.','line_number':6619,'multiline':False]
['text':' Check if the result fits in int32.','line_number':6624,'multiline':False]
['text':' Initialize the input operand.','line_number':6629,'multiline':False]
['text':' Guard callee is the 'round' native function.','line_number':6632,'multiline':False]
['text':' Use an indirect truncation to inform the optimizer it needs to preserve','line_number':6641,'multiline':False]
['text':' a bailout when the input can't be represented as an int32, even if the','line_number':6642,'multiline':False]
['text':' final result is fully truncated.','line_number':6643,'multiline':False]
['text':' Need one (number) argument.','line_number':6663,'multiline':False]
['text':' Initialize the input operand.','line_number':6668,'multiline':False]
['text':' Guard callee is the 'sqrt' native function.','line_number':6671,'multiline':False]
['text':' Need one (number) argument.','line_number':6685,'multiline':False]
['text':' Initialize the input operand.','line_number':6690,'multiline':False]
['text':' Guard callee is the 'fround' native function.','line_number':6693,'multiline':False]
['text':' x^y where y < 0 is most of the time not an int32, except when x is 1 or y','line_number':6714,'multiline':False]
['text':' gets large enough. It's hard to determine when exactly y is "large enough",','line_number':6715,'multiline':False]
['text':' so we don't use Int32PowResult when x != 1 and y < 0.','line_number':6716,'multiline':False]
['text':' Note: it's important for this condition to match the code generated by','line_number':6717,'multiline':False]
['text':' MacroAssembler::pow32 to prevent failure loops.','line_number':6718,'multiline':False]
['text':' Need two number arguments.','line_number':6729,'multiline':False]
['text':' Initialize the input operand.','line_number':6734,'multiline':False]
['text':' Guard callee is the 'pow' function.','line_number':6737,'multiline':False]
['text':' Only optimize if there are 2-4 arguments.','line_number':6762,'multiline':False]
['text':' Initialize the input operand.','line_number':6773,'multiline':False]
['text':' Guard callee is the 'hypot' native function.','line_number':6776,'multiline':False]
['text':' Requires two numbers as arguments.','line_number':6818,'multiline':False]
['text':' Initialize the input operand.','line_number':6823,'multiline':False]
['text':' Guard callee is the 'atan2' native function.','line_number':6826,'multiline':False]
['text':' For now only optimize if there are 1-4 arguments.','line_number':6844,'multiline':False]
['text':' Ensure all arguments are numbers.','line_number':6849,'multiline':False]
['text':' Initialize the input operand.','line_number':6860,'multiline':False]
['text':' Guard callee is this Math function.','line_number':6863,'multiline':False]
['text':' The result will be an int32 if there is at least one argument,','line_number':6896,'multiline':False]
['text':' and all the arguments are int32.','line_number':6897,'multiline':False]
['text':' Initialize the input operand.','line_number':6908,'multiline':False]
['text':' Guard callee is this Math function.','line_number':6911,'multiline':False]
['text':' Load the argument array','line_number':6914,'multiline':False]
['text':' Need one argument.','line_number':6931,'multiline':False]
['text':' Initialize the input operand.','line_number':6940,'multiline':False]
['text':' Guard callee is this Math function.','line_number':6943,'multiline':False]
['text':' At this point we are creating an IC that will handle','line_number':6965,'multiline':False]
['text':' both Int32 and Double cases.','line_number':6966,'multiline':False]
['text':' Expecting no arguments, which means base 10.','line_number':6973,'multiline':False]
['text':' Ensure |this| is a primitive number value.','line_number':6978,'multiline':False]
['text':' Initialize the input operand.','line_number':6983,'multiline':False]
['text':' Guard callee is the 'toString' native function.','line_number':6986,'multiline':False]
['text':' Initialize the |this| operand.','line_number':6989,'multiline':False]
['text':' Guard on number and convert to string.','line_number':6993,'multiline':False]
['text':' Return the string.','line_number':6996,'multiline':False]
['text':' Need one argument.','line_number':7006,'multiline':False]
['text':' Initialize the input operand.','line_number':7015,'multiline':False]
['text':' Guard callee is the 'getPrototypeOf' native function.','line_number':7018,'multiline':False]
['text':' Exclude floating types and Uint8Clamped.','line_number':7048,'multiline':False]
['text':' Bounds check the index argument.','line_number':7057,'multiline':False]
['text':' Need four arguments.','line_number':7075,'multiline':False]
['text':' Arguments: typedArray, index (number), expected, replacement.','line_number':7080,'multiline':False]
['text':' Initialize the input operand.','line_number':7101,'multiline':False]
['text':' Guard callee is the `compareExchange` native function.','line_number':7104,'multiline':False]
['text':' Convert index to intPtr.','line_number':7111,'multiline':False]
['text':' supportOOB = ','line_number':7115,'multiline':True]
['text':' Convert expected value to int32/BigInt.','line_number':7117,'multiline':False]
['text':' Convert replacement value to int32/BigInt.','line_number':7122,'multiline':False]
['text':' Need three arguments.','line_number':7140,'multiline':False]
['text':' Arguments: typedArray, index (number), value.','line_number':7145,'multiline':False]
['text':' Initialize the input operand.','line_number':7169,'multiline':False]
['text':' Guard callee is this Atomics function.','line_number':7172,'multiline':False]
['text':' Convert index to intPtr.','line_number':7179,'multiline':False]
['text':' supportOOB = ','line_number':7183,'multiline':True]
['text':' Convert value to int32/BigInt.','line_number':7185,'multiline':False]
['text':' Need two arguments.','line_number':7312,'multiline':False]
['text':' Arguments: typedArray, index (number).','line_number':7317,'multiline':False]
['text':' Initialize the input operand.','line_number':7330,'multiline':False]
['text':' Guard callee is the `load` native function.','line_number':7333,'multiline':False]
['text':' Convert index to intPtr.','line_number':7340,'multiline':False]
['text':' supportOOB = ','line_number':7344,'multiline':True]
['text':' Need three arguments.','line_number':7358,'multiline':False]
['text':' Atomics.store() is annoying because it returns the result of converting the','line_number':7363,'multiline':False]
['text':' value by ToInteger(), not the input value, nor the result of converting the','line_number':7364,'multiline':False]
['text':' value by ToInt32(). It is especially annoying because almost nobody uses','line_number':7365,'multiline':False]
['text':' the result value.','line_number':7366,'multiline':False]
['text':'','line_number':7367,'multiline':False]
['text':' As an expedient compromise, therefore, we inline only if the result is','line_number':7368,'multiline':False]
['text':' obviously unused or if the argument is already Int32 and thus requires no','line_number':7369,'multiline':False]
['text':' conversion.','line_number':7370,'multiline':False]
['text':' Arguments: typedArray, index (number), value.','line_number':7372,'multiline':False]
['text':' Initialize the input operand.','line_number':7397,'multiline':False]
['text':' Guard callee is the `store` native function.','line_number':7400,'multiline':False]
['text':' Convert index to intPtr.','line_number':7407,'multiline':False]
['text':' supportOOB = ','line_number':7411,'multiline':True]
['text':' Ensure value is int32 or BigInt.','line_number':7413,'multiline':False]
['text':' Need one argument.','line_number':7433,'multiline':False]
['text':' Initialize the input operand.','line_number':7442,'multiline':False]
['text':' Guard callee is the `isLockFree` native function.','line_number':7445,'multiline':False]
['text':' Ensure value is int32.','line_number':7448,'multiline':False]
['text':' Need zero or one argument.','line_number':7461,'multiline':False]
['text':' Initialize the input operand.','line_number':7466,'multiline':False]
['text':' Guard callee is the 'Boolean' native function.','line_number':7469,'multiline':False]
['text':' Expecting no arguments.','line_number':7488,'multiline':False]
['text':' Initialize the input operand.','line_number':7493,'multiline':False]
['text':' Guard callee is the 'bailout' native function.','line_number':7496,'multiline':False]
['text':' Expecting two arguments.','line_number':7508,'multiline':False]
['text':' Initialize the input operand.','line_number':7513,'multiline':False]
['text':' Guard callee is the 'assertFloat32' native function.','line_number':7516,'multiline':False]
['text':' TODO: Warp doesn't yet optimize Float32 (bug 1655773).','line_number':7519,'multiline':False]
['text':' NOP when not in IonMonkey.','line_number':7521,'multiline':False]
['text':' Expecting two arguments.','line_number':7531,'multiline':False]
['text':' (Fuzzing unsafe) testing function which must be called with a constant','line_number':7536,'multiline':False]
['text':' boolean as its second argument.','line_number':7537,'multiline':False]
['text':' Initialize the input operand.','line_number':7540,'multiline':False]
['text':' Guard callee is the 'assertRecoveredOnBailout' native function.','line_number':7543,'multiline':False]
['text':' Need two arguments.','line_number':7556,'multiline':False]
['text':' Initialize the input operand.','line_number':7561,'multiline':False]
['text':' Guard callee is the `is` native function.','line_number':7564,'multiline':False]
['text':' Compare tags for strictly different types.','line_number':7581,'multiline':False]
['text':' Ensure |this| is an object.','line_number':7655,'multiline':False]
['text':' Need a single argument.','line_number':7660,'multiline':False]
['text':' Initialize the input operand.','line_number':7665,'multiline':False]
['text':' Guard callee is the `isPrototypeOf` native function.','line_number':7668,'multiline':False]
['text':' Guard that |this| is an object.','line_number':7671,'multiline':False]
['text':' Expecting no arguments.','line_number':7686,'multiline':False]
['text':' Ensure |this| is an object.','line_number':7691,'multiline':False]
['text':' Don't attach if the object has @@toStringTag or is a proxy.','line_number':7696,'multiline':False]
['text':' Initialize the input operand.','line_number':7701,'multiline':False]
['text':' Guard callee is the 'toString' native function.','line_number':7704,'multiline':False]
['text':' Guard that |this| is an object.','line_number':7707,'multiline':False]
['text':' Need two arguments (Int32, BigInt).','line_number':7720,'multiline':False]
['text':' Negative bits throws an error.','line_number':7725,'multiline':False]
['text':' Initialize the input operand.','line_number':7730,'multiline':False]
['text':' Guard callee is the 'BigInt.asIntN' native function.','line_number':7733,'multiline':False]
['text':' Convert bits to int32.','line_number':7736,'multiline':False]
['text':' Number of bits mustn't be negative.','line_number':7740,'multiline':False]
['text':' Need two arguments (Int32, BigInt).','line_number':7754,'multiline':False]
['text':' Negative bits throws an error.','line_number':7759,'multiline':False]
['text':' Initialize the input operand.','line_number':7764,'multiline':False]
['text':' Guard callee is the 'BigInt.asUintN' native function.','line_number':7767,'multiline':False]
['text':' Convert bits to int32.','line_number':7770,'multiline':False]
['text':' Number of bits mustn't be negative.','line_number':7774,'multiline':False]
['text':' Guard that callee is the |fun_call| native function.','line_number':7805,'multiline':False]
['text':' Guard that |this| is an object.','line_number':7811,'multiline':False]
['text':' Ensure that |this| is the expected target function.','line_number':7818,'multiline':False]
['text':' Guard that |this| is a function.','line_number':7831,'multiline':False]
['text':' Guard that function is not a class constructor.','line_number':7834,'multiline':False]
['text':'isConstructing =','line_number':7838,'multiline':True]
['text':' Self-hosted code calls this with a single object argument.','line_number':7859,'multiline':False]
['text':' Initialize the input operand.','line_number':7863,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':7866,'multiline':False]
['text':' Self-hosted code calls this with a single object argument.','line_number':7880,'multiline':False]
['text':' Initialize the input operand.','line_number':7884,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':7887,'multiline':False]
['text':' Self-hosted code calls this with a single TypedArrayObject argument.','line_number':7900,'multiline':False]
['text':' Initialize the input operand.','line_number':7907,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':7910,'multiline':False]
['text':' Self-hosted code calls this with a single TypedArrayObject argument.','line_number':7927,'multiline':False]
['text':' Initialize the input operand.','line_number':7932,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':7935,'multiline':False]
['text':' Self-hosted code calls this with a single, possibly wrapped,','line_number':7948,'multiline':False]
['text':' TypedArrayObject argument.','line_number':7949,'multiline':False]
['text':' Only optimize when the object isn't a wrapper.','line_number':7953,'multiline':False]
['text':' Initialize the input operand.','line_number':7962,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':7965,'multiline':False]
['text':' Self-hosted code calls this with a single, possibly wrapped,','line_number':7987,'multiline':False]
['text':' ArrayBufferObject argument.','line_number':7988,'multiline':False]
['text':' Only optimize when the object isn't a wrapper.','line_number':7992,'multiline':False]
['text':' Initialize the input operand.','line_number':8001,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8004,'multiline':False]
['text':' Self-hosted code calls this with no arguments in function scripts.','line_number':8025,'multiline':False]
['text':' Initialize the input operand.','line_number':8029,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8032,'multiline':False]
['text':' Self-hosted code calls this with two objects.','line_number':8043,'multiline':False]
['text':' Initialize the input operand.','line_number':8052,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8055,'multiline':False]
['text':' Self-hosted code calls this with (boundFunction, targetObj, argCount)','line_number':8073,'multiline':False]
['text':' arguments.','line_number':8074,'multiline':False]
['text':' Initialize the input operand.','line_number':8080,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8083,'multiline':False]
['text':' Self-hosted code calls this without any arguments','line_number':8107,'multiline':False]
['text':' Initialize the input operand.','line_number':8116,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8119,'multiline':False]
['text':' Self-hosted code calls this without any arguments','line_number':8130,'multiline':False]
['text':' Initialize the input operand.','line_number':8139,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8142,'multiline':False]
['text':' Self-hosted code calls this without any arguments','line_number':8153,'multiline':False]
['text':' Initialize the input operand.','line_number':8162,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8165,'multiline':False]
['text':' Self-hosted code calls this without any arguments','line_number':8176,'multiline':False]
['text':' Attach only once to prevent slowdowns for polymorphic calls.','line_number':8180,'multiline':False]
['text':' Initialize the input operand.','line_number':8192,'multiline':False]
['text':' Note: we don't need to call emitNativeCalleeGuard for intrinsics.','line_number':8195,'multiline':False]
['text':' Ensure that proto[slot] == nextFun.','line_number':8202,'multiline':False]
['text':' Need a single object-or-null argument.','line_number':8212,'multiline':False]
['text':' Attach only once to prevent slowdowns for polymorphic calls.','line_number':8218,'multiline':False]
['text':' Initialize the input operand.','line_number':8229,'multiline':False]
['text':' Guard callee is the 'create' native function.','line_number':8232,'multiline':False]
['text':' Guard on the proto argument.','line_number':8235,'multiline':False]
['text':' Only optimize the |Array()| and |Array(n)| cases (with or without |new|)','line_number':8253,'multiline':False]
['text':' for now. Note that self-hosted code calls this without |new| via std_Array.','line_number':8254,'multiline':False]
['text':' We allow inlining this function across realms so make sure the template','line_number':8267,'multiline':False]
['text':' object is allocated in that realm. See CanInlineNativeCrossRealm.','line_number':8268,'multiline':False]
['text':' proto = ','line_number':8273,'multiline':True]
['text':' Initialize the input operand.','line_number':8280,'multiline':False]
['text':' Guard callee and newTarget (if constructing) are this Array constructor','line_number':8283,'multiline':False]
['text':' function.','line_number':8284,'multiline':False]
['text':' Attach only once to prevent slowdowns for polymorphic calls.','line_number':8315,'multiline':False]
['text':' The first argument must be int32 or a non-proxy object.','line_number':8319,'multiline':False]
['text':' Unfortunately NewTypedArrayFromArrayBufferResult needs more registers than','line_number':8328,'multiline':False]
['text':' we can easily support on 32-bit x86 for now.','line_number':8329,'multiline':False]
['text':' This can happen for large length values.','line_number':8344,'multiline':False]
['text':' Initialize the input operand.','line_number':8349,'multiline':False]
['text':' Guard callee and newTarget are this TypedArray constructor function.','line_number':8352,'multiline':False]
['text':' From length.','line_number':8360,'multiline':False]
['text':' From ArrayBuffer.','line_number':8368,'multiline':False]
['text':' From Array-like.','line_number':8392,'multiline':False]
['text':' Guard that callee is the |fun_apply| native function.','line_number':8446,'multiline':False]
['text':' Guard that |this| is an object.','line_number':8452,'multiline':False]
['text':' Ensure that |this| is the expected target function.','line_number':8480,'multiline':False]
['text':' Guard that |this| is a function.','line_number':8493,'multiline':False]
['text':' Guard that function is not a class constructor.','line_number':8496,'multiline':False]
['text':' Guard that function is scripted.','line_number':8500,'multiline':False]
['text':'constructing =','line_number':8501,'multiline':True]
['text':' Guard that function is native.','line_number':8504,'multiline':False]
['text':' Try to optimize calls into Wasm code by emitting the CallWasmFunction','line_number':8522,'multiline':False]
['text':' CacheIR op. Baseline ICs currently treat this as a CallScriptedFunction op','line_number':8523,'multiline':False]
['text':' (calling Wasm's JitEntry stub) but Warp transpiles it to a more direct call','line_number':8524,'multiline':False]
['text':' into Wasm code.','line_number':8525,'multiline':False]
['text':'','line_number':8526,'multiline':False]
['text':' Note: some code refers to these optimized Wasm calls as "inlined" calls.','line_number':8527,'multiline':False]
['text':' If there are too many arguments, don't optimize (we won't be able to store','line_number':8557,'multiline':False]
['text':' the arguments in the LIR node).','line_number':8558,'multiline':False]
['text':' If there are too many results, don't optimize as Warp currently doesn't','line_number':8565,'multiline':False]
['text':' have code to handle this.','line_number':8566,'multiline':False]
['text':' Bug 1631656 - Don't try to optimize with I64 args on 32-bit platforms','line_number':8571,'multiline':False]
['text':' because it is more difficult (because it requires multiple LIR arguments','line_number':8572,'multiline':False]
['text':' per I64).','line_number':8573,'multiline':False]
['text':'','line_number':8574,'multiline':False]
['text':' Bug 1631650 - On 64-bit platforms, we also give up optimizing for I64 args','line_number':8575,'multiline':False]
['text':' spilled to the stack because it causes problems with register allocation.','line_number':8576,'multiline':False]
['text':' Check that all arguments can be converted to the Wasm type in Warp code','line_number':8594,'multiline':False]
['text':' without bailing out.','line_number':8595,'multiline':False]
['text':' All values can be boxed as AnyRef.','line_number':8616,'multiline':False]
['text':' isConstructing = ','line_number':8623,'multiline':True]
['text':' isSpread = ','line_number':8623,'multiline':True]
['text':' isSameRealm = ','line_number':8624,'multiline':True]
['text':' Load argc.','line_number':8626,'multiline':False]
['text':' Load the callee and ensure it is an object','line_number':8629,'multiline':False]
['text':' Ensure the callee is this Wasm function.','line_number':8634,'multiline':False]
['text':' Guard the argument types.','line_number':8637,'multiline':False]
['text':' Special case functions are only optimized for normal calls.','line_number':8659,'multiline':False]
['text':' Not all natives can be inlined cross-realm.','line_number':8672,'multiline':False]
['text':' Check for special-cased native constructors.','line_number':8677,'multiline':False]
['text':' newTarget must match the callee. CacheIR for this is emitted in','line_number':8679,'multiline':False]
['text':' emitNativeCalleeGuard.','line_number':8680,'multiline':False]
['text':' Check for special-cased native spread calls.','line_number':8697,'multiline':False]
['text':'isMax = ','line_number':8701,'multiline':True]
['text':'isMax = ','line_number':8703,'multiline':True]
['text':' Check for special-cased native functions.','line_number':8710,'multiline':False]
['text':' Array natives.','line_number':8712,'multiline':False]
['text':' DataView natives.','line_number':8727,'multiline':False]
['text':' Intl natives.','line_number':8769,'multiline':False]
['text':' Slot intrinsics.','line_number':8779,'multiline':False]
['text':' Intrinsics.','line_number':8789,'multiline':False]
['text':' RegExp natives.','line_number':8834,'multiline':False]
['text':' isPossiblyWrapped = ','line_number':8837,'multiline':True]
['text':' isPossiblyWrapped = ','line_number':8840,'multiline':True]
['text':' String natives.','line_number':8852,'multiline':False]
['text':' Math natives.','line_number':8875,'multiline':False]
['text':' isMax = ','line_number':8943,'multiline':True]
['text':' isMax = ','line_number':8945,'multiline':True]
['text':' Map intrinsics.','line_number':8947,'multiline':False]
['text':' isMap = ','line_number':8951,'multiline':True]
['text':' Number natives.','line_number':8953,'multiline':False]
['text':' Object natives.','line_number':8957,'multiline':False]
['text':' Set intrinsics.','line_number':8969,'multiline':False]
['text':' isMap = ','line_number':8974,'multiline':True]
['text':' ArrayBuffer intrinsics.','line_number':8976,'multiline':False]
['text':' isPossiblyWrapped = ','line_number':8981,'multiline':True]
['text':' isPossiblyWrapped = ','line_number':8984,'multiline':True]
['text':' SharedArrayBuffer intrinsics.','line_number':8986,'multiline':False]
['text':' TypedArray intrinsics.','line_number':8990,'multiline':False]
['text':' Not callable.','line_number':8992,'multiline':False]
['text':' isPossiblyWrapped = ','line_number':8994,'multiline':True]
['text':' isPossiblyWrapped = ','line_number':8996,'multiline':True]
['text':' isPossiblyWrapped = ','line_number':9004,'multiline':True]
['text':' isPossiblyWrapped = ','line_number':9006,'multiline':True]
['text':' Reflect natives.','line_number':9008,'multiline':False]
['text':' Atomics intrinsics:','line_number':9012,'multiline':False]
['text':' BigInt natives.','line_number':9034,'multiline':False]
['text':' Boolean natives.','line_number':9040,'multiline':False]
['text':' Testing functions.','line_number':9044,'multiline':False]
['text':' Remember the template object associated with any script being called','line_number':9059,'multiline':False]
['text':' as a constructor, for later use during Ion compilation.','line_number':9060,'multiline':False]
['text':' Some constructors allocate their own |this| object.','line_number':9063,'multiline':False]
['text':' Only attach a stub if the newTarget is a function with a','line_number':9068,'multiline':False]
['text':' nonconfigurable prototype.','line_number':9069,'multiline':False]
['text':' If callee is not an interpreted constructor, we have to throw.','line_number':9115,'multiline':False]
['text':' Likewise, if the callee is a class constructor, we have to throw.','line_number':9120,'multiline':False]
['text':' If we're constructing, require the callee to have a JitScript. This isn't','line_number':9126,'multiline':False]
['text':' required for correctness but avoids allocating a template object below','line_number':9127,'multiline':False]
['text':' for constructors that aren't hot. See bug 1419758.','line_number':9128,'multiline':False]
['text':' Verify that spread calls have a reasonable number of arguments.','line_number':9132,'multiline':False]
['text':' Load argc.','line_number':9150,'multiline':False]
['text':' Load the callee and ensure it is an object','line_number':9153,'multiline':False]
['text':' Ensure callee matches this stub's callee','line_number':9162,'multiline':False]
['text':' Emit guards to ensure the newTarget's .prototype property is what we','line_number':9165,'multiline':False]
['text':' expect. Note that getThisForScripted checked newTarget is a function','line_number':9166,'multiline':False]
['text':' with a non-configurable .prototype data property.','line_number':9167,'multiline':False]
['text':' Call metaScriptedTemplateObject before emitting the call, so that Warp','line_number':9182,'multiline':False]
['text':' can use this template object before transpiling the call.','line_number':9183,'multiline':False]
['text':' Guard that object is a scripted function','line_number':9187,'multiline':False]
['text':' If callee is not a constructor, we have to throw.','line_number':9192,'multiline':False]
['text':' If callee is a class constructor, we have to throw.','line_number':9195,'multiline':False]
['text':' Verify that spread calls have a reasonable number of arguments.','line_number':9226,'multiline':False]
['text':' Check for specific native-function optimizations.','line_number':9231,'multiline':False]
['text':' Load argc.','line_number':9236,'multiline':False]
['text':' Load the callee and ensure it is an object','line_number':9239,'multiline':False]
['text':' DOM calls need an additional guard so only try optimizing the first stub.','line_number':9244,'multiline':False]
['text':' Can only optimize normal (non-spread) calls.','line_number':9245,'multiline':False]
['text':' Guard that |this| is an object.','line_number':9251,'multiline':False]
['text':' Guard on the |this| class to make sure it's the right instance.','line_number':9256,'multiline':False]
['text':' Ensure callee matches this stub's callee','line_number':9259,'multiline':False]
['text':' Ensure callee matches this stub's callee','line_number':9265,'multiline':False]
['text':' Guard that object is a native function','line_number':9271,'multiline':False]
['text':' If callee is not a constructor, we have to throw.','line_number':9276,'multiline':False]
['text':' If callee is a class constructor, we have to throw.','line_number':9279,'multiline':False]
['text':' We do not have megamorphic call hook stubs.','line_number':9298,'multiline':False]
['text':' TODO: Should we attach specialized call hook stubs in','line_number':9299,'multiline':False]
['text':' megamorphic mode to avoid going generic?','line_number':9300,'multiline':False]
['text':' Verify that spread calls have a reasonable number of arguments.','line_number':9313,'multiline':False]
['text':' Load argc.','line_number':9318,'multiline':False]
['text':' Load the callee and ensure it is an object','line_number':9321,'multiline':False]
['text':' Ensure the callee's class matches the one in this stub.','line_number':9326,'multiline':False]
['text':' Some opcodes are not yet supported.','line_number':9340,'multiline':False]
['text':' Ensure callee is a function.','line_number':9359,'multiline':False]
['text':' Check for scripted optimizations.','line_number':9378,'multiline':False]
['text':' Check for native-function optimizations.','line_number':9383,'multiline':False]
['text':' Try to log the first two arguments.','line_number':9396,'multiline':False]
['text':' Class which holds a shape pointer for use when caches might reference data in','line_number':9407,'multiline':False]
['text':' other zones.','line_number':9408,'multiline':False]
['text':' Probably can't hit some of these.','line_number':9511,'multiline':False]
['text':' Compare tags','line_number':9517,'multiline':False]
['text':' Now that we've passed the guard, we know differing types, so return the','line_number':9522,'multiline':False]
['text':' bool result.','line_number':9523,'multiline':False]
['text':' Strictly different types should have been handed by','line_number':9545,'multiline':False]
['text':' tryAttachStrictDifferentTypes','line_number':9546,'multiline':False]
['text':' Should have been handled by tryAttachAnyNullUndefined.','line_number':9595,'multiline':False]
['text':' Relational comparing a number with undefined will always be false.','line_number':9610,'multiline':False]
['text':' Either RHS or LHS needs to be null/undefined.','line_number':9622,'multiline':False]
['text':' We assume that the side with null/undefined is usually constant, in','line_number':9627,'multiline':False]
['text':' code like `if (x === undefined) { x = {}; }`.','line_number':9628,'multiline':False]
['text':' That is why we don't attach when both sides are undefined/null,','line_number':9629,'multiline':False]
['text':' because we would basically need to decide by chance which side is','line_number':9630,'multiline':False]
['text':' the likely constant.','line_number':9631,'multiline':False]
['text':' The actual generated code however handles null/undefined of course.','line_number':9632,'multiline':False]
['text':' isUndefined ','line_number':9640,'multiline':True]
['text':' isUndefined ','line_number':9644,'multiline':True]
['text':' isUndefined ','line_number':9650,'multiline':True]
['text':' isUndefined ','line_number':9654,'multiline':True]
['text':' Handle {null/undefined} x {null,undefined} equality comparisons','line_number':9663,'multiline':False]
['text':' Sloppy equality means we actually only care about the op:','line_number':9673,'multiline':False]
['text':' Strict equality only hits this branch, and only in the','line_number':9677,'multiline':False]
['text':' undef {!,=}==  undef and null {!,=}== null cases.','line_number':9678,'multiline':False]
['text':' The other cases should have hit tryAttachStrictDifferentTypes.','line_number':9679,'multiline':False]
['text':' Ensure String x Number','line_number':9695,'multiline':False]
['text':' Case should have been handled by tryAttachStrictDifferentTypes','line_number':9701,'multiline':False]
['text':' The set of primitive cases we want to handle here (excluding null,','line_number':9727,'multiline':False]
['text':' undefined, and symbol)','line_number':9728,'multiline':False]
['text':' Ensure Symbol x {String, Bool, Number, BigInt}.','line_number':9733,'multiline':False]
['text':' Comparing a primitive with symbol will always be true for Ne/StrictNe, and','line_number':9769,'multiline':False]
['text':' always be false for other compare ops.','line_number':9770,'multiline':False]
['text':' Ensure Boolean x {String, Number}.','line_number':9780,'multiline':False]
['text':' Case should have been handled by tryAttachStrictDifferentTypes','line_number':9786,'multiline':False]
['text':' Case should have been handled by tryAttachInt32','line_number':9789,'multiline':False]
['text':' Ensure BigInt x {Int32, Boolean}.','line_number':9816,'multiline':False]
['text':' Case should have been handled by tryAttachStrictDifferentTypes','line_number':9822,'multiline':False]
['text':' Ensure BigInt x Number.','line_number':9852,'multiline':False]
['text':' Case should have been handled by tryAttachStrictDifferentTypes','line_number':9858,'multiline':False]
['text':' Ensure BigInt x String.','line_number':9880,'multiline':False]
['text':' Case should have been handled by tryAttachStrictDifferentTypes','line_number':9886,'multiline':False]
['text':' For sloppy equality ops, there are cases this IC does not handle:','line_number':9921,'multiline':False]
['text':' - {Object} x {String, Symbol, Bool, Number, BigInt}.','line_number':9922,'multiline':False]
['text':'','line_number':9923,'multiline':False]
['text':' (The above lists omits the equivalent case {B} x {A} when {A} x {B} is','line_number':9924,'multiline':False]
['text':' already present.)','line_number':9925,'multiline':False]
['text':' Handles any (non null or undefined) comparison with null/undefined.','line_number':9931,'multiline':False]
['text':' This covers -strict- equality/inequality using a type tag check, so','line_number':9934,'multiline':False]
['text':' catches all different type pairs outside of Numbers, which cannot be','line_number':9935,'multiline':False]
['text':' checked on tags alone.','line_number':9936,'multiline':False]
['text':' This should preceed the Int32/Number cases to allow','line_number':9944,'multiline':False]
['text':' them to not concern themselves with handling undefined','line_number':9945,'multiline':False]
['text':' or null.','line_number':9946,'multiline':False]
['text':' We want these to be last, to allow us to bypass the','line_number':9949,'multiline':False]
['text':' strictly-different-types cases in the below attachment code','line_number':9950,'multiline':False]
['text':' Convert type into int32 for the bitwise/shift operands.','line_number':10250,'multiline':False]
['text':' Only bitwise operators.','line_number':10277,'multiline':False]
['text':' Check guard conditions','line_number':10282,'multiline':False]
['text':' Bitwise operators always produce Int32 values.','line_number':10287,'multiline':False]
['text':' Case should have been handled by tryAttachBitwise.','line_number':10345,'multiline':False]
['text':' Case should have been handled by tryAttachBitwise.','line_number':10391,'multiline':False]
['text':' We allow negative zero here because ToPropertyKey(-0.0) is 0.','line_number':10474,'multiline':False]
['text':' Arithmetic operations with Int32 operands','line_number':10543,'multiline':False]
['text':' Bitwise operations with Int32/Double/Boolean/Null/Undefined/String','line_number':10546,'multiline':False]
['text':' operands.','line_number':10547,'multiline':False]
['text':' Arithmetic operations with Double operands. This needs to come after','line_number':10550,'multiline':False]
['text':' tryAttachInt32, as the guards overlap, and we'd prefer to attach the','line_number':10551,'multiline':False]
['text':' more specialized Int32 IC if it is possible.','line_number':10552,'multiline':False]
['text':' String x String','line_number':10555,'multiline':False]
['text':' String x Object','line_number':10558,'multiline':False]
['text':' String + Boolean','line_number':10563,'multiline':False]
['text':' Arithmetic operations or bitwise operations with BigInt operands','line_number':10566,'multiline':False]
['text':' Arithmetic operations (without addition) with String x Int32.','line_number':10569,'multiline':False]
['text':' Only bit-wise and shifts.','line_number':10577,'multiline':False]
['text':' Check guard conditions','line_number':10583,'multiline':False]
['text':' All ops, with the exception of Ursh, produce Int32 values.','line_number':10588,'multiline':False]
['text':' Check valid opcodes','line_number':10631,'multiline':False]
['text':' Check guard conditions','line_number':10637,'multiline':False]
['text':' Check guard conditions','line_number':10681,'multiline':False]
['text':' These ICs will failure() if result can't be encoded in an Int32:','line_number':10687,'multiline':False]
['text':' If sample result is not Int32, we should avoid IC.','line_number':10688,'multiline':False]
['text':' Only Addition','line_number':10750,'multiline':False]
['text':' Only Addition','line_number':10774,'multiline':False]
['text':' Only Addition','line_number':10807,'multiline':False]
['text':' Check guards','line_number':10812,'multiline':False]
['text':' Only Addition','line_number':10831,'multiline':False]
['text':' Check Guards','line_number':10836,'multiline':False]
['text':' This guard is actually overly tight, as the runtime','line_number':10844,'multiline':False]
['text':' helper can handle lhs or rhs being a string, so long','line_number':10845,'multiline':False]
['text':' as the other is an object.','line_number':10846,'multiline':False]
['text':' Check Guards','line_number':10863,'multiline':False]
['text':' Arithmetic operations.','line_number':10875,'multiline':False]
['text':' Bitwise operations.','line_number':10883,'multiline':False]
['text':' Check for either int32 x string or string x int32.','line_number':10950,'multiline':False]
['text':' The created ICs will fail if the result can't be encoded as as int32.','line_number':10956,'multiline':False]
['text':' Thus skip this IC, if the sample result is not an int32.','line_number':10957,'multiline':False]
['text':' Must _not_ support Add, because it would be string concatenation instead.','line_number':10962,'multiline':False]
['text':' For Pow we can't easily determine the CanAttachInt32Pow conditions so we','line_number':10963,'multiline':False]
['text':' reject that as well.','line_number':10964,'multiline':False]
['text':' Allocation sites are usually created during baseline compilation, but we also','line_number':11032,'multiline':False]
['text':' need to created them when an IC stub is added to a baseline compiled script','line_number':11033,'multiline':False]
['text':' and when trial inlining.','line_number':11034,'multiline':False]
['text':' The macro assembler only supports creating arrays with fixed elements.','line_number':11058,'multiline':False]
['text':' Stub doesn't support metadata builder','line_number':11063,'multiline':False]
['text':' Don't optimize allocations with too many dynamic slots. We use an unrolled','line_number':11118,'multiline':False]
['text':' loop when initializing slots and this avoids generating too much code.','line_number':11119,'multiline':False]
['text':' Stub doesn't support metadata builder','line_number':11125,'multiline':False]
