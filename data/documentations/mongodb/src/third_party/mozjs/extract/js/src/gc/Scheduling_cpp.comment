['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * We may start to collect a zone before its trigger threshold is reached if
 * GCRuntime::maybeGC() is called for that zone or we start collecting other
 * zones. These eager threshold factors are not configurable.
 ','line_number':25,'multiline':True]
['text':'
 * Don't allow heap growth factors to be set so low that eager collections could
 * reduce the trigger threshold.
 ','line_number':33,'multiline':True]
['text':' Limit heap growth factor to one hundred times size of current heap.','line_number':78,'multiline':False]
['text':' 100 disables pretenuring','line_number':190,'multiline':False]
['text':' 100 disables pretenuring','line_number':204,'multiline':False]
['text':' Reset these togeather to maintain their min <= max invariant.','line_number':303,'multiline':False]
['text':' GC thresholds may exceed the range of size_t on 32-bit platforms, so these','line_number':379,'multiline':False]
['text':' are calculated using 64-bit integers and clamped.','line_number':380,'multiline':False]
['text':' Calculate the incremental limit for a heap based on its size and start','line_number':387,'multiline':False]
['text':' threshold.','line_number':388,'multiline':False]
['text':'','line_number':389,'multiline':False]
['text':' This effectively classifies the heap size into small, medium or large, and','line_number':390,'multiline':False]
['text':' uses the small heap incremental limit paramer, the large heap incremental','line_number':391,'multiline':False]
['text':' limit parameter or an interpolation between them.','line_number':392,'multiline':False]
['text':'','line_number':393,'multiline':False]
['text':' The incremental limit is always set greater than the start threshold by at','line_number':394,'multiline':False]
['text':' least the maximum nursery size to reduce the chance that tenuring a full','line_number':395,'multiline':False]
['text':' nursery will send us straight into non-incremental collection.','line_number':396,'multiline':False]
['text':' static ','line_number':428,'multiline':True]
['text':' For small zones, our collection heuristics do not matter much: favor','line_number':432,'multiline':False]
['text':' something simple in this case.','line_number':433,'multiline':False]
['text':' The heap growth factor depends on the heap size after a GC and the GC','line_number':438,'multiline':False]
['text':' frequency. If GC's are not triggering in rapid succession, use a lower','line_number':439,'multiline':False]
['text':' threshold so that we will collect garbage sooner.','line_number':440,'multiline':False]
['text':' For high frequency GCs we let the heap grow depending on whether we','line_number':445,'multiline':False]
['text':' classify the heap as small, medium or large. There are parameters for small','line_number':446,'multiline':False]
['text':' and large heap sizes and linear interpolation is used between them for','line_number':447,'multiline':False]
['text':' medium sized heaps.','line_number':448,'multiline':False]
['text':' static ','line_number':461,'multiline':True]
['text':' Discourage collection of the atoms zone during page load as this can block','line_number':484,'multiline':False]
['text':' off-thread parsing.','line_number':485,'multiline':False]
['text':' static ','line_number':496,'multiline':True]
['text':' There may still be ZoneAllocPolicies associated with the old zone since','line_number':528,'multiline':False]
['text':' some are not destroyed until the zone itself dies. Instead check there is','line_number':529,'multiline':False]
['text':' no memory associated with them and clear their zone pointer in debug builds','line_number':530,'multiline':False]
['text':' to catch further memory association.','line_number':531,'multiline':False]
['text':' static ','line_number':579,'multiline':True]
['text':' Most memory uses are for memory associated with GC things but some are for','line_number':581,'multiline':False]
['text':' memory associated with non-GC thing pointers.','line_number':582,'multiline':False]
['text':' static ','line_number':586,'multiline':True]
['text':' static ','line_number':591,'multiline':True]
['text':' For most uses only one association is possible for each GC thing. Allow a','line_number':593,'multiline':False]
['text':' one-to-many relationship only where necessary.','line_number':594,'multiline':False]
['text':' Update the table after we move GC things. We don't use MovableCellHasher','line_number':787,'multiline':False]
['text':' because that would create a difference between debug and release builds.','line_number':788,'multiline':False]
['text':' DEBUG','line_number':835,'multiline':False]
