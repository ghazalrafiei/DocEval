['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::jit::JitActivation','line_number':22,'multiline':False]
['text':' Note that C++ bool is only 1 byte, so zero extend it to clear the','line_number':38,'multiline':False]
['text':' higher-order bits.','line_number':39,'multiline':False]
['text':' Checks whether a double is representable as a 32-bit integer. If so, the','line_number':131,'multiline':False]
['text':' integer is written to the output register. Otherwise, a bailout is taken to','line_number':132,'multiline':False]
['text':' the given snapshot. This function overwrites the scratch float register.','line_number':133,'multiline':False]
['text':' Truncate double to int ; if result is inexact or invalid fail.','line_number':145,'multiline':False]
['text':' Here adding the masking andi instruction just for a precaution.','line_number':150,'multiline':False]
['text':' For the instruction of trunc.*.*, the Floating Point Exceptions can be','line_number':151,'multiline':False]
['text':' only Inexact, Invalid Operation, Unimplemented Operation.','line_number':152,'multiline':False]
['text':' Leaving it maybe is also ok.','line_number':153,'multiline':False]
['text':' Checks whether a float32 is representable as a 32-bit integer. If so, the','line_number':158,'multiline':False]
['text':' integer is written to the output register. Otherwise, a bailout is taken to','line_number':159,'multiline':False]
['text':' the given snapshot. This function overwrites the scratch float register.','line_number':160,'multiline':False]
['text':' placeholder ','line_number':196,'multiline':True]
['text':' Arithmetic-based ops.','line_number':213,'multiline':False]
['text':' Add.','line_number':215,'multiline':False]
['text':' If different sign, no overflow','line_number':232,'multiline':False]
['text':' If different sign, then overflow','line_number':237,'multiline':False]
['text':' Subtract.','line_number':276,'multiline':False]
['text':' The rs == rt case should probably be folded at MIR stage.','line_number':279,'multiline':False]
['text':' Happens for Number_isInteger*. Not worth specializing here.','line_number':280,'multiline':False]
['text':' If same sign, no overflow','line_number':296,'multiline':False]
['text':' If different sign, then overflow','line_number':298,'multiline':False]
['text':' Memory.','line_number':304,'multiline':False]
['text':' Shortcut for when we know we're transferring 32 bits of data.','line_number':434,'multiline':False]
['text':' Pushing sp requires one more instruction.','line_number':469,'multiline':False]
['text':' Branches when done from within mips-specific code.','line_number':478,'multiline':False]
['text':' Generate the long jump for calls because return address has to be','line_number':501,'multiline':False]
['text':' the address after the reserved block.','line_number':502,'multiline':False]
['text':' Second word holds a pointer to the next branch in label's chain.','line_number':512,'multiline':False]
['text':' Make the whole branch continous in the buffer.','line_number':516,'multiline':False]
['text':' Leave space for long jump.','line_number':525,'multiline':False]
['text':' Handle long jump','line_number':558,'multiline':False]
['text':' Handle long conditional branch','line_number':566,'multiline':False]
['text':' No need for a "nop" here because we can clobber scratch.','line_number':574,'multiline':False]
['text':' Generate open jump and link it to a label.','line_number':582,'multiline':False]
['text':' Second word holds a pointer to the next branch in label's chain.','line_number':584,'multiline':False]
['text':' Make the whole branch continous in the buffer.','line_number':589,'multiline':False]
['text':' Indicate that this is short jump with offset 4.','line_number':592,'multiline':False]
['text':' Make the whole branch continous in the buffer.','line_number':607,'multiline':False]
['text':' Leave space for potential long jump.','line_number':618,'multiline':False]
['text':' For Equal/NotEqual cond ma_cmp64 dest holds non boolean result.','line_number':670,'multiline':False]
['text':' For Equal/NotEqual cond ma_cmp64 dest holds non boolean result.','line_number':688,'multiline':False]
['text':' fp instructions','line_number':827,'multiline':False]
['text':' put hi part of 64 bit value into the odd register','line_number':838,'multiline':False]
['text':' put low part of 64 bit value into the even register','line_number':846,'multiline':False]
['text':' descriptor_','line_number':967,'multiline':False]
['text':' if res > 255; res = 255;','line_number':1294,'multiline':False]
['text':' if !(input > 0); res = 0;','line_number':1296,'multiline':False]
['text':' higher level tag testing code','line_number':1300,'multiline':False]
['text':' unboxing code','line_number':1330,'multiline':False]
['text':' If it's an int, convert it to double.','line_number':1478,'multiline':False]
['text':' Not an int, just load as double.','line_number':1485,'multiline':False]
['text':' If it's an int, convert it to double.','line_number':1496,'multiline':False]
['text':' Since we only have one scratch, we need to stomp over it with the tag.','line_number':1500,'multiline':False]
['text':' Not an int, just load as double.','line_number':1510,'multiline':False]
['text':' First, recompute the offset that had been stored in the scratch register','line_number':1512,'multiline':False]
['text':' since the scratch register was overwritten loading in the type.','line_number':1513,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':1555,'multiline':False]
['text':' X86/X64-common/ARM/MIPS interface.','line_number':1556,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':1557,'multiline':False]
['text':' Make sure that ma_sw doesn't clobber ScratchRegister','line_number':1572,'multiline':False]
['text':' Make sure that ma_sw doesn't clobber ScratchRegister','line_number':1610,'multiline':False]
['text':' Ensure that loading the payload does not erase the pointer to the','line_number':1627,'multiline':False]
['text':' Value in memory.','line_number':1628,'multiline':False]
['text':' Allocate stack slots for type and payload. One for each.','line_number':1648,'multiline':False]
['text':' Store type and payload.','line_number':1650,'multiline':False]
['text':' Allocate stack slots for type and payload. One for each.','line_number':1655,'multiline':False]
['text':' If address is based on StackPointer its offset needs to be adjusted','line_number':1657,'multiline':False]
['text':' to accommodate for previous stack allocation.','line_number':1658,'multiline':False]
['text':' Store type and payload.','line_number':1661,'multiline':False]
['text':' Load payload and type.','line_number':1669,'multiline':False]
['text':' Free stack.','line_number':1672,'multiline':False]
['text':' Reserve space for exception information.','line_number':1759,'multiline':False]
['text':' Use a0 since it is a first function argument','line_number':1763,'multiline':False]
['text':' Call the handler.','line_number':1765,'multiline':False]
['text':' Already clobbered a0, so use it...','line_number':1780,'multiline':False]
['text':' Invalid kind.','line_number':1798,'multiline':False]
['text':' No exception handler. Load the error value, load the new stack pointer','line_number':1800,'multiline':False]
['text':' and return from the entry frame.','line_number':1801,'multiline':False]
['text':' We're going to be returning by the ion calling convention','line_number':1807,'multiline':False]
['text':' If we found a catch handler, this must be a baseline frame. Restore','line_number':1812,'multiline':False]
['text':' state and jump to the catch block.','line_number':1813,'multiline':False]
['text':' If we found a finally block, this must be a baseline frame. Push','line_number':1822,'multiline':False]
['text':' two values expected by JSOp::Retsub: BooleanValue(true) and the','line_number':1823,'multiline':False]
['text':' exception.','line_number':1824,'multiline':False]
['text':' Only used in debug mode. Return BaselineFrame->returnValue() to the','line_number':1838,'multiline':False]
['text':' caller.','line_number':1839,'multiline':False]
['text':' If profiling is enabled, then update the lastProfilingFrame to refer to','line_number':1851,'multiline':False]
['text':' caller frame before returning.','line_number':1852,'multiline':False]
['text':' Test if profiler enabled.','line_number':1855,'multiline':False]
['text':' If we are bailing out to baseline to handle an exception, jump to','line_number':1866,'multiline':False]
['text':' the bailout tail stub. Load 1 (true) in ReturnReg to indicate success.','line_number':1867,'multiline':False]
['text':' If we are throwing and the innermost frame was a wasm frame, reset SP and','line_number':1874,'multiline':False]
['text':' FP; SP is pointing to the unwound return address to the wasm entry, so','line_number':1875,'multiline':False]
['text':' we can just ret().','line_number':1876,'multiline':False]
['text':' Found a wasm catch handler, restore state and jump to it.','line_number':1884,'multiline':False]
['text':'{{{ check_macroassembler_style','line_number':1938,'multiline':False]
['text':' ===============================================================','line_number':1939,'multiline':False]
['text':' Stack manipulation functions.','line_number':1940,'multiline':False]
['text':' Double values have to be aligned. We reserve extra space so that we can','line_number':1962,'multiline':False]
['text':' start writing from the first aligned location.','line_number':1963,'multiline':False]
['text':' We reserve a whole extra double so that the buffer has even size.','line_number':1964,'multiline':False]
['text':' Read the buffer form the first aligned location.','line_number':1992,'multiline':False]
['text':' ===============================================================','line_number':2053,'multiline':False]
['text':' ABI function calls.','line_number':2054,'multiline':False]
['text':' Force sp to be aligned','line_number':2063,'multiline':False]
['text':' Reserve place for $ra.','line_number':2073,'multiline':False]
['text':' Save $ra because call is going to clobber it. Restore it in','line_number':2087,'multiline':False]
['text':' callWithABIPost. NOTE: This is needed for calls from SharedIC.','line_number':2088,'multiline':False]
['text':' Maybe we can do this differently.','line_number':2089,'multiline':False]
['text':' Position all arguments.','line_number':2092,'multiline':False]
['text':' Restore ra value (as stored in callWithABIPre()).','line_number':2109,'multiline':False]
['text':' Restore sp value from stack (as stored in setupUnalignedABICall()).','line_number':2113,'multiline':False]
['text':' Use adjustFrame instead of freeStack because we already restored sp.','line_number':2115,'multiline':False]
['text':' Load the callee in t9, no instruction between the lw and call','line_number':2128,'multiline':False]
['text':' should clobber it. Note that we can't use fun.base because it may','line_number':2129,'multiline':False]
['text':' be one of the IntArg registers clobbered before the call.','line_number':2130,'multiline':False]
['text':' Load the callee in t9, as above.','line_number':2140,'multiline':False]
['text':' ===============================================================','line_number':2147,'multiline':False]
['text':' Move instructions','line_number':2148,'multiline':False]
['text':' Either one or both of the source registers could be the same as a','line_number':2184,'multiline':False]
['text':' destination register.','line_number':2185,'multiline':False]
['text':' If both are, this is just a swap of two registers.','line_number':2188,'multiline':False]
['text':' If only one is, copy that source first.','line_number':2197,'multiline':False]
['text':' ===============================================================','line_number':2219,'multiline':False]
['text':' Branch functions','line_number':2220,'multiline':False]
['text':' ========================================================================','line_number':2270,'multiline':False]
['text':' Memory access primitives.','line_number':2271,'multiline':False]
['text':' Store the type tag if needed.','line_number':2281,'multiline':False]
['text':' Store the payload.','line_number':2286,'multiline':False]
['text':' For numbers in  -1.[ : ]INT32_MAX range do nothing more','line_number':2327,'multiline':False]
['text':' For numbers in  -1.[ : ]INT32_MAX range do nothing more','line_number':2353,'multiline':False]
['text':' Guard against negative values that result in 0 due the precision loss.','line_number':2365,'multiline':False]
['text':' Maybe add the offset.','line_number':2410,'multiline':False]
['text':' Maybe add the offset.','line_number':2501,'multiline':False]
['text':' Force memory trap on invalid access before we enter the spinlock.','line_number':2578,'multiline':False]
['text':' addr= ','line_number':2609,'multiline':True]
['text':' spinlock= ','line_number':2610,'multiline':True]
['text':' scratch= ','line_number':2611,'multiline':True]
['text':' spinlock= ','line_number':2615,'multiline':True]
['text':' addr= ','line_number':2636,'multiline':True]
['text':' spinlock= ','line_number':2637,'multiline':True]
['text':' scratch= ','line_number':2637,'multiline':True]
['text':' spinlock= ','line_number':2641,'multiline':True]
['text':' addr= ','line_number':2664,'multiline':True]
['text':' spinlock= ','line_number':2665,'multiline':True]
['text':' scratch= ','line_number':2666,'multiline':True]
['text':' spinlock= ','line_number':2674,'multiline':True]
['text':' addr= ','line_number':2701,'multiline':True]
['text':' spinlock= ','line_number':2702,'multiline':True]
['text':' scratch= ','line_number':2703,'multiline':True]
['text':' spinlock= ','line_number':2708,'multiline':True]
['text':' addr= ','line_number':2730,'multiline':True]
['text':' spinlock= ','line_number':2731,'multiline':True]
['text':' scratch= ','line_number':2732,'multiline':True]
['text':' spinlock= ','line_number':2767,'multiline':True]
['text':' ========================================================================','line_number':2784,'multiline':False]
['text':' Convert floating point.','line_number':2785,'multiline':False]
['text':'}}} check_macroassembler_style','line_number':2813,'multiline':False]
