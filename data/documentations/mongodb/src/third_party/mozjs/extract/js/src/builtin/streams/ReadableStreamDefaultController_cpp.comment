['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Class ReadableStreamDefaultController. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT{,_IF}','line_number':9,'multiline':False]
['text':' JS_ReportErrorNumberASCII','line_number':11,'multiline':False]
['text':' js::AssertSameCompartment','line_number':12,'multiline':False]
['text':' JS_STREAMS_CLASS_SPEC','line_number':14,'multiline':False]
['text':' js::IsMaybeWrapped','line_number':15,'multiline':False]
['text':' js::PullIntoDescriptor','line_number':16,'multiline':False]
['text':' js::{DequeueValue,ResetQueue}','line_number':17,'multiline':False]
['text':' js::ReadableStream, js::SetUpExternalReadableByteStreamController','line_number':18,'multiline':False]
['text':' js::ReadableStream{,Default}Controller, js::ReadableByteStreamController, js::CheckReadableStreamControllerCanCloseOrEnqueue, js::ReadableStreamControllerCancelSteps, js::ReadableStreamDefaultControllerPullSteps, js::ReadableStreamControllerStart{,Failed}Handler','line_number':19,'multiline':False]
['text':' js::ReadableStreamController{CallPullIfNeeded,ClearAlgorithms,Error,GetDesiredSizeUnchecked}, js::ReadableStreamDefaultController{Close,Enqueue}','line_number':20,'multiline':False]
['text':' js::ReadableStream{AddReadOrReadIntoRequest,CloseInternal,CreateReadResult}','line_number':21,'multiline':False]
['text':' js::ReadableStreamTee_Cancel','line_number':22,'multiline':False]
['text':' js::ReadableStream{,Default}Reader','line_number':23,'multiline':False]
['text':' js::StreamController','line_number':24,'multiline':False]
['text':' js::TeeState','line_number':25,'multiline':False]
['text':' JS::NewArrayBuffer','line_number':26,'multiline':False]
['text':' js::ClassSpec','line_number':27,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':28,'multiline':False]
['text':' js::PlainObject','line_number':32,'multiline':False]
['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':33,'multiline':False]
['text':' js::TargetFromHandler','line_number':36,'multiline':False]
['text':' js::PromiseCall','line_number':37,'multiline':False]
['text':' js::UnwrapReaderFromStream','line_number':38,'multiline':False]
['text':' JS::Compartment::wrap, js::UnwrapAnd{DowncastObject,TypeCheckThis}','line_number':39,'multiline':False]
['text':' JSContext::check','line_number':40,'multiline':False]
['text':' js::AutoRealm','line_number':41,'multiline':False]
['text':'** 3.9. Class ReadableStreamDefaultController ****************************','line_number':64,'multiline':True]
['text':'*
 * Streams spec, 3.10.11. SetUpReadableStreamDefaultController, step 11
 * and
 * Streams spec, 3.13.26. SetUpReadableByteStreamController, step 16:
 *      Upon fulfillment of startPromise, [...]
 ','line_number':66,'multiline':True]
['text':' Step a: Set controller.[[started]] to true.','line_number':78,'multiline':False]
['text':' Step b: Assert: controller.[[pulling]] is false.','line_number':81,'multiline':False]
['text':' Step c: Assert: controller.[[pullAgain]] is false.','line_number':84,'multiline':False]
['text':' Step d: Perform','line_number':87,'multiline':False]
['text':'      ! ReadableStreamDefaultControllerCallPullIfNeeded(controller)','line_number':88,'multiline':False]
['text':'      (or ReadableByteStreamControllerCallPullIfNeeded(controller)).','line_number':89,'multiline':False]
['text':'*
 * Streams spec, 3.10.11. SetUpReadableStreamDefaultController, step 12
 * and
 * Streams spec, 3.13.26. SetUpReadableByteStreamController, step 17:
 *      Upon rejection of startPromise with reason r, [...]
 ','line_number':97,'multiline':True]
['text':' Step a: Perform','line_number':109,'multiline':False]
['text':'      ! ReadableStreamDefaultControllerError(controller, r)','line_number':110,'multiline':False]
['text':'      (or ReadableByteStreamControllerError(controller, r)).','line_number':111,'multiline':False]
['text':'*
 * Streams spec, 3.9.3.
 * new ReadableStreamDefaultController( stream, underlyingSource, size,
 *                                      highWaterMark )
 ','line_number':120,'multiline':True]
['text':' Step 1: Throw a TypeError.','line_number':127,'multiline':False]
['text':'*
 * Streams spec, 3.9.4.1. get desiredSize
 ','line_number':134,'multiline':True]
['text':' Step 1: If ! IsReadableStreamDefaultController(this) is false, throw a','line_number':140,'multiline':False]
['text':'         TypeError exception.','line_number':141,'multiline':False]
['text':' 3.10.8. ReadableStreamDefaultControllerGetDesiredSize, steps 1-4.','line_number':150,'multiline':False]
['text':' 3.10.8. Step 1: Let stream be controller.[[controlledReadableStream]].','line_number':151,'multiline':False]
['text':' 3.10.8. Step 2: Let state be stream.[[state]].','line_number':154,'multiline':False]
['text':' 3.10.8. Step 3: If state is "errored", return null.','line_number':155,'multiline':False]
['text':' 3.10.8. Step 4: If state is "closed", return 0.','line_number':161,'multiline':False]
['text':' Step 2: Return ! ReadableStreamDefaultControllerGetDesiredSize(this).','line_number':167,'multiline':False]
['text':'*
 * Unified implementation of step 2 of 3.9.4.2 and 3.9.4.3,
 * and steps 2-3 of 3.11.4.3.
 ','line_number':173,'multiline':True]
['text':' 3.9.4.2. close(), step 2, and','line_number':180,'multiline':False]
['text':' 3.9.4.3. enqueue(chunk), step 2:','line_number':181,'multiline':False]
['text':'      If ! ReadableStreamDefaultControllerCanCloseOrEnqueue(this) is false,','line_number':182,'multiline':False]
['text':'      throw a TypeError exception.','line_number':183,'multiline':False]
['text':' RSDCCanCloseOrEnqueue returns false in two cases: (1)','line_number':184,'multiline':False]
['text':' controller.[[closeRequested]] is true; (2) the stream is not readable,','line_number':185,'multiline':False]
['text':' i.e. already closed or errored. This amounts to exactly the same thing as','line_number':186,'multiline':False]
['text':' 3.11.4.3 steps 2-3 below, and we want different error messages for the two','line_number':187,'multiline':False]
['text':' cases anyway.','line_number':188,'multiline':False]
['text':' 3.11.4.3. Step 2: If this.[[closeRequested]] is true, throw a TypeError','line_number':190,'multiline':False]
['text':'                   exception.','line_number':191,'multiline':False]
['text':' 3.11.4.3. Step 3: If this.[[controlledReadableByteStream]].[[state]] is','line_number':198,'multiline':False]
['text':'                   not "readable", throw a TypeError exception.','line_number':199,'multiline':False]
['text':'*
 * Streams spec, 3.9.4.2 close()
 ','line_number':211,'multiline':True]
['text':' Step 1: If ! IsReadableStreamDefaultController(this) is false, throw a','line_number':216,'multiline':False]
['text':'         TypeError exception.','line_number':217,'multiline':False]
['text':' Step 2: If ! ReadableStreamDefaultControllerCanCloseOrEnqueue(this) is','line_number':226,'multiline':False]
['text':'         false, throw a TypeError exception.','line_number':227,'multiline':False]
['text':' Step 3: Perform ! ReadableStreamDefaultControllerClose(this).','line_number':233,'multiline':False]
['text':'*
 * Streams spec, 3.9.4.3. enqueue ( chunk )
 ','line_number':242,'multiline':True]
['text':' Step 1: If ! IsReadableStreamDefaultController(this) is false, throw a','line_number':247,'multiline':False]
['text':'         TypeError exception.','line_number':248,'multiline':False]
['text':' Step 2: If ! ReadableStreamDefaultControllerCanCloseOrEnqueue(this) is','line_number':257,'multiline':False]
['text':'         false, throw a TypeError exception.','line_number':258,'multiline':False]
['text':' Step 3: Return ! ReadableStreamDefaultControllerEnqueue(this, chunk).','line_number':264,'multiline':False]
['text':'*
 * Streams spec, 3.9.4.4. error ( e )
 ','line_number':273,'multiline':True]
['text':' Step 1: If ! IsReadableStreamDefaultController(this) is false, throw a','line_number':278,'multiline':False]
['text':'         TypeError exception.','line_number':279,'multiline':False]
['text':' Step 2: Perform ! ReadableStreamDefaultControllerError(this, e).','line_number':288,'multiline':False]
['text':'*
 * Unified implementation of ReadableStream controllers' [[CancelSteps]]
 * internal methods.
 * Streams spec, 3.9.5.1. [[CancelSteps]] ( reason )
 * and
 * Streams spec, 3.11.5.1. [[CancelSteps]] ( reason )
 ','line_number':309,'multiline':True]
['text':' Step 1 of 3.11.5.1: If this.[[pendingPullIntos]] is not empty,','line_number':321,'multiline':False]
['text':' Step a: Let firstDescriptor be the first element of','line_number':328,'multiline':False]
['text':'         this.[[pendingPullIntos]].','line_number':329,'multiline':False]
['text':' Step b: Set firstDescriptor.[[bytesFilled]] to 0.','line_number':337,'multiline':False]
['text':' Step 1 of 3.9.5.1, step 2 of 3.11.5.1: Perform ! ResetQueue(this).','line_number':345,'multiline':False]
['text':' Step 2 of 3.9.5.1, step 3 of 3.11.5.1: Let result be the result of','line_number':350,'multiline':False]
['text':'     performing this.[[cancelAlgorithm]], passing reason.','line_number':351,'multiline':False]
['text':'','line_number':352,'multiline':False]
['text':' Our representation of cancel algorithms is a bit awkward, for','line_number':353,'multiline':False]
['text':' performance, so we must figure out which algorithm is being invoked.','line_number':354,'multiline':False]
['text':' The cancel algorithm given in ReadableStreamTee step 13 or 14.','line_number':357,'multiline':False]
['text':' An embedding-provided cancel algorithm.','line_number':368,'multiline':False]
['text':' Make sure the ReadableStreamControllerClearAlgorithms call below is','line_number':384,'multiline':False]
['text':' reached, even on error.','line_number':385,'multiline':False]
['text':' The algorithm created in','line_number':392,'multiline':False]
['text':' SetUpReadableByteStreamControllerFromUnderlyingSource step 5.','line_number':393,'multiline':False]
['text':' CreateAlgorithmFromUnderlyingMethod step 7.','line_number':397,'multiline':False]
['text':' CreateAlgorithmFromUnderlyingMethod steps 6.c.i-ii.','line_number':400,'multiline':False]
['text':' |unwrappedCancelMethod| and |unwrappedUnderlyingSource| come directly','line_number':404,'multiline':False]
['text':' from |unwrappedController| slots so must be same-compartment with it.','line_number':405,'multiline':False]
['text':' If PromiseCall fails, don't bail out until after the','line_number':414,'multiline':False]
['text':' ReadableStreamControllerClearAlgorithms call below.','line_number':415,'multiline':False]
['text':' Step 3 (or 4): Perform','line_number':425,'multiline':False]
['text':'      ! ReadableStreamDefaultControllerClearAlgorithms(this)','line_number':426,'multiline':False]
['text':'      (or ReadableByteStreamControllerClearAlgorithms(this)).','line_number':427,'multiline':False]
['text':' Step 4 (or 5): Return result.','line_number':430,'multiline':False]
['text':'*
 * Streams spec, 3.9.5.2.
 *     ReadableStreamDefaultController [[PullSteps]]( forAuthorCode )
 ','line_number':434,'multiline':True]
['text':' Step 1: Let stream be this.[[controlledReadableStream]].','line_number':441,'multiline':False]
['text':' Step 2: If this.[[queue]] is not empty,','line_number':444,'multiline':False]
['text':' Step a: Let chunk be ! DequeueValue(this).','line_number':453,'multiline':False]
['text':' Step b: If this.[[closeRequested]] is true and this.[[queue]] is empty,','line_number':459,'multiline':False]
['text':' Step i: Perform ! ReadableStreamDefaultControllerClearAlgorithms(this).','line_number':462,'multiline':False]
['text':' Step ii: Perform ! ReadableStreamClose(stream).','line_number':465,'multiline':False]
['text':' Step c: Otherwise, perform','line_number':471,'multiline':False]
['text':'         ! ReadableStreamDefaultControllerCallPullIfNeeded(this).','line_number':472,'multiline':False]
['text':' Step d: Return a promise resolved with','line_number':479,'multiline':False]
['text':'         ! ReadableStreamCreateReadResult(chunk, false, forAuthorCode).','line_number':480,'multiline':False]
['text':' Step 3: Let pendingPromise be','line_number':498,'multiline':False]
['text':'         ! ReadableStreamAddReadRequest(stream, forAuthorCode).','line_number':499,'multiline':False]
['text':' Step 4: Perform ! ReadableStreamDefaultControllerCallPullIfNeeded(this).','line_number':506,'multiline':False]
['text':' Step 5: Return pendingPromise.','line_number':511,'multiline':False]
