['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Class WritableStreamDefaultWriter. ','line_number':7,'multiline':True]
['text':' JS_PUBLIC_API','line_number':12,'multiline':False]
['text':' JSClass, js::ClassSpec','line_number':13,'multiline':False]
['text':' JS::{,Object,Undefined}Value','line_number':14,'multiline':False]
['text':' js::NativeObject','line_number':15,'multiline':False]
['text':'*
   * Memory layout of Stream Writer instances.
   *
   * See https://streams.spec.whatwg.org/#default-writer-internal-slots for
   * details.
   ','line_number':27,'multiline':True]
['text':'*
     * A promise that is resolved when the stream this writes to becomes closed.
     *
     * This promise is ordinarily created while this writer is being created; in
     * this case this promise is not a wrapper and is same-compartment with
     * this.  However, if the writer is closed and then this writer releases its
     * lock on the stream, this promise will be recreated within whatever realm
     * is in force when the lock is released:
     *
     *   var ws = new WritableStream({});
     *   var w = ws.getWriter();
     *   var c = w.closed;
     *   w.close().then(() => {
     *     w.releaseLock(); // changes this slot, and |w.closed|
     *     assertEq(c === w.closed, false);
     *   });
     *
     * So this field *may* potentially contain a wrapper around a promise.
     ','line_number':34,'multiline':True]
['text':'*
     * The stream that this writer writes to.  Because writers are created under
     * |WritableStream.prototype.getWriter| which may not be same-compartment
     * with the stream, this is potentially a wrapper.
     ','line_number':55,'multiline':True]
['text':'*
     * The promise returned by the |writer.ready| getter property, a promise
     * signaling that the related stream is accepting writes.
     *
     * This value repeatedly changes as the related stream changes back and
     * forth between being writable and temporarily filled (or, ultimately,
     * errored or aborted).  These changes are invoked by a number of user-
     * visible functions, so this may be a wrapper around a promise in another
     * realm.
     ','line_number':62,'multiline':True]
['text':' namespace js','line_number':109,'multiline':False]
['text':' builtin_streams_WritableStreamDefaultWriter_h','line_number':111,'multiline':False]
