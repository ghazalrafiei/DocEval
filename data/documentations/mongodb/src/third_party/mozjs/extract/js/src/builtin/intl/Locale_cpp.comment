['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Intl.Locale implementation. ','line_number':7,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':33,'multiline':False]
['text':' js::PlainObject','line_number':39,'multiline':False]
['text':' js_*_str','line_number':42,'multiline':False]
['text':' Return the length of the base-name subtags.','line_number':65,'multiline':False]
['text':' Compute the Unicode extension's index and length in the extension subtag.','line_number':92,'multiline':False]
['text':' Add +1 to skip over the preceding separator.','line_number':105,'multiline':False]
['text':'* Iterate through (sep keyword) in a valid, lowercased Unicode extension. ','line_number':153,'multiline':True]
['text':'*
   * Return (sep keyword) in the Unicode locale extension from begin to end.
   * The first call after all (sep keyword) are consumed returns |nullptr|; no
   * further calls are allowed.
   ','line_number':164,'multiline':True]
['text':' "-co"/"-nu"/etc.','line_number':173,'multiline':False]
['text':' Skip past '-' so |std::char_traits::find| makes progress. Skipping','line_number':182,'multiline':False]
['text':' 'u' is harmless -- skip or not, |find| returns the first '-'.','line_number':183,'multiline':False]
['text':' Find the next separator.','line_number':186,'multiline':False]
['text':' key is terminal subtag','line_number':197,'multiline':False]
['text':' key is followed by more subtags','line_number':198,'multiline':False]
['text':'*
 * 9.2.10 GetOption ( options, property, type, values, fallback )
 *
 * If the requested property is present and not-undefined, set the result string
 * to |ToString(value)|. Otherwise set the result string to nullptr.
 ','line_number':212,'multiline':True]
['text':' Step 1.','line_number':221,'multiline':False]
['text':' Step 2.','line_number':227,'multiline':False]
['text':' Steps 2.a-b, 2.d (not applicable).','line_number':230,'multiline':False]
['text':' Steps 2.c, 2.e.','line_number':232,'multiline':False]
['text':' Step 3.','line_number':243,'multiline':False]
['text':'*
 * 9.2.10 GetOption ( options, property, type, values, fallback )
 *
 * If the requested property is present and not-undefined, set the result string
 * to |ToString(ToBoolean(value))|. Otherwise set the result string to nullptr.
 ','line_number':248,'multiline':True]
['text':' Step 1.','line_number':257,'multiline':False]
['text':' Step 2.','line_number':263,'multiline':False]
['text':' Steps 2.a, 2.c-d (not applicable).','line_number':266,'multiline':False]
['text':' Steps 2.c, 2.e.','line_number':268,'multiline':False]
['text':' Step 3.','line_number':272,'multiline':False]
['text':'*
 * ApplyOptionsToTag ( tag, options )
 ','line_number':277,'multiline':True]
['text':' Steps 1-2 (Already performed in caller).','line_number':282,'multiline':False]
['text':' Step 3.','line_number':286,'multiline':False]
['text':' Step 4.','line_number':291,'multiline':False]
['text':' Step 5.','line_number':302,'multiline':False]
['text':' Step 6.','line_number':307,'multiline':False]
['text':' Step 7.','line_number':318,'multiline':False]
['text':' Step 8.','line_number':323,'multiline':False]
['text':' Step 9 (Already performed in caller).','line_number':334,'multiline':False]
['text':' Skip steps 10-13 when no subtags were modified.','line_number':336,'multiline':False]
['text':' Step 10.','line_number':338,'multiline':False]
['text':' Step 11.','line_number':343,'multiline':False]
['text':' Step 12.','line_number':348,'multiline':False]
['text':' Step 13.','line_number':353,'multiline':False]
['text':' Optimized to only canonicalize the base-name subtags. All other','line_number':354,'multiline':False]
['text':' canonicalization steps will happen later.','line_number':355,'multiline':False]
['text':'*
 * ApplyUnicodeExtensionToTag( tag, options, relevantExtensionKeys )
 ','line_number':364,'multiline':True]
['text':' If no Unicode extensions were present in the options object, we can skip','line_number':370,'multiline':False]
['text':' everything below and directly return.','line_number':371,'multiline':False]
['text':' Check if there's an existing Unicode extension subtag.','line_number':381,'multiline':False]
['text':' Find the start of the first keyword.','line_number':390,'multiline':False]
['text':' Copy any attributes present before the first keyword.','line_number':393,'multiline':False]
['text':' Append the new keywords before any existing keywords. That way any previous','line_number':402,'multiline':False]
['text':' keyword with the same key is detected as a duplicate when canonicalizing','line_number':403,'multiline':False]
['text':' the Unicode extension subtag and gets discarded.','line_number':404,'multiline':False]
['text':' Append the remaining keywords from the previous Unicode extension subtag.','line_number':431,'multiline':False]
['text':' Null-terminate the new Unicode extension string.','line_number':438,'multiline':False]
['text':' Insert the new Unicode extension string into the language tag.','line_number':443,'multiline':False]
['text':'*
 * Intl.Locale( tag[, options] )
 ','line_number':474,'multiline':True]
['text':' Step 1.','line_number':480,'multiline':False]
['text':' Steps 2-6 (Inlined 9.1.14, OrdinaryCreateFromConstructor).','line_number':485,'multiline':False]
['text':' Steps 7-9.','line_number':491,'multiline':False]
['text':' Steps 10-11.','line_number':517,'multiline':False]
['text':' ApplyOptionsToTag, steps 2 and 9.','line_number':526,'multiline':False]
['text':' Step 12.','line_number':537,'multiline':False]
['text':' Step 13.','line_number':542,'multiline':False]
['text':' Step 14.','line_number':545,'multiline':False]
['text':' Steps 15-16.','line_number':551,'multiline':False]
['text':' Step 17.','line_number':567,'multiline':False]
['text':' Steps 18-19.','line_number':573,'multiline':False]
['text':' Step 20 (without validation).','line_number':589,'multiline':False]
['text':' Steps 20-21.','line_number':595,'multiline':False]
['text':' Step 22 (without validation).','line_number':614,'multiline':False]
['text':' Steps 22-23.','line_number':620,'multiline':False]
['text':' Steps 24-25.','line_number':638,'multiline':False]
['text':' Step 26.','line_number':644,'multiline':False]
['text':' Step 27.','line_number':651,'multiline':False]
['text':' Steps 28-29.','line_number':658,'multiline':False]
['text':' Step 30.','line_number':674,'multiline':False]
['text':' ApplyOptionsToTag, steps 9 and 13.','line_number':680,'multiline':False]
['text':' ApplyUnicodeExtensionToTag, step 9.','line_number':681,'multiline':False]
['text':' Steps 6, 31-37.','line_number':686,'multiline':False]
['text':' Step 38.','line_number':692,'multiline':False]
['text':' Returns the tuple [index, length] of the `type` in the `keyword` in Unicode','line_number':699,'multiline':False]
['text':' locale extension |extension| that has |key| as its `key`. If `keyword` lacks','line_number':700,'multiline':False]
['text':' a type, the returned |index| will be where `type` would have been, and','line_number':701,'multiline':False]
['text':' |length| will be set to zero.','line_number':702,'multiline':False]
['text':' Search all keywords until a match was found.','line_number':713,'multiline':False]
['text':' Add +1 to skip over the separator preceding the keyword.','line_number':721,'multiline':False]
['text':' Exit the loop on the first match.','line_number':725,'multiline':False]
['text':' Skip over the key.','line_number':731,'multiline':False]
['text':' Find the start of the next keyword.','line_number':734,'multiline':False]
['text':' No further keyword present, the current keyword ends the Unicode extension.','line_number':737,'multiline':False]
['text':' If the keyword has a type, skip over the separator preceding the type.','line_number':742,'multiline':False]
['text':' Return the sequence of types for the Unicode extension keyword specified by','line_number':761,'multiline':False]
['text':' key or undefined when the keyword isn't present.','line_number':762,'multiline':False]
['text':' Return undefined when no Unicode extension subtag is present.','line_number':765,'multiline':False]
['text':' Find the type of the requested key in the Unicode extension subtag.','line_number':778,'multiline':False]
['text':' Return undefined if the requested key isn't present in the extension.','line_number':781,'multiline':False]
['text':' Otherwise return the type value of the found keyword.','line_number':790,'multiline':False]
['text':' Returns [language-length, script-index, region-index, region-length].','line_number':805,'multiline':False]
['text':' Search the first separator to find the end of the language subtag.','line_number':813,'multiline':False]
['text':' Add +1 to skip over the separator character.','line_number':817,'multiline':False]
['text':' Script subtags are always four characters long, but take care for a four','line_number':820,'multiline':False]
['text':' character long variant subtag. These start with a digit.','line_number':821,'multiline':False]
['text':' Region subtags can be either two or three characters long.','line_number':830,'multiline':False]
['text':' No separator found, the base-name consists of just a language subtag.','line_number':842,'multiline':False]
['text':' Intl.Locale.prototype.maximize ()','line_number':871,'multiline':False]
['text':' Step 3.','line_number':875,'multiline':False]
['text':' Step 4.','line_number':891,'multiline':False]
['text':' Intl.Locale.prototype.maximize ()','line_number':900,'multiline':False]
['text':' Steps 1-2.','line_number':902,'multiline':False]
['text':' Intl.Locale.prototype.minimize ()','line_number':907,'multiline':False]
['text':' Step 3.','line_number':911,'multiline':False]
['text':' Step 4.','line_number':927,'multiline':False]
['text':' Intl.Locale.prototype.minimize ()','line_number':936,'multiline':False]
['text':' Steps 1-2.','line_number':938,'multiline':False]
['text':' Intl.Locale.prototype.toString ()','line_number':943,'multiline':False]
['text':' Step 3.','line_number':947,'multiline':False]
['text':' Intl.Locale.prototype.toString ()','line_number':953,'multiline':False]
['text':' Steps 1-2.','line_number':955,'multiline':False]
['text':' get Intl.Locale.prototype.baseName','line_number':960,'multiline':False]
['text':' Steps 3-4.','line_number':964,'multiline':False]
['text':' get Intl.Locale.prototype.baseName','line_number':970,'multiline':False]
['text':' Steps 1-2.','line_number':972,'multiline':False]
['text':' get Intl.Locale.prototype.calendar','line_number':977,'multiline':False]
['text':' Step 3.','line_number':981,'multiline':False]
['text':' get Intl.Locale.prototype.calendar','line_number':986,'multiline':False]
['text':' Steps 1-2.','line_number':988,'multiline':False]
['text':' get Intl.Locale.prototype.caseFirst','line_number':993,'multiline':False]
['text':' Step 3.','line_number':997,'multiline':False]
['text':' get Intl.Locale.prototype.caseFirst','line_number':1002,'multiline':False]
['text':' Steps 1-2.','line_number':1004,'multiline':False]
['text':' get Intl.Locale.prototype.collation','line_number':1009,'multiline':False]
['text':' Step 3.','line_number':1013,'multiline':False]
['text':' get Intl.Locale.prototype.collation','line_number':1018,'multiline':False]
['text':' Steps 1-2.','line_number':1020,'multiline':False]
['text':' get Intl.Locale.prototype.hourCycle','line_number':1025,'multiline':False]
['text':' Step 3.','line_number':1029,'multiline':False]
['text':' get Intl.Locale.prototype.hourCycle','line_number':1034,'multiline':False]
['text':' Steps 1-2.','line_number':1036,'multiline':False]
['text':' get Intl.Locale.prototype.numeric','line_number':1041,'multiline':False]
['text':' Step 3.','line_number':1045,'multiline':False]
['text':' Compare against the empty string per Intl.Locale, step 36.a. The Unicode','line_number':1052,'multiline':False]
['text':' extension is already canonicalized, so we don't need to compare against','line_number':1053,'multiline':False]
['text':' "true" at this point.','line_number':1054,'multiline':False]
['text':' get Intl.Locale.prototype.numeric','line_number':1063,'multiline':False]
['text':' Steps 1-2.','line_number':1065,'multiline':False]
['text':' get Intl.Locale.prototype.numberingSystem','line_number':1070,'multiline':False]
['text':' Step 3.','line_number':1074,'multiline':False]
['text':' get Intl.Locale.prototype.numberingSystem','line_number':1079,'multiline':False]
['text':' Steps 1-2.','line_number':1081,'multiline':False]
['text':' get Intl.Locale.prototype.language','line_number':1086,'multiline':False]
['text':' Step 3.','line_number':1090,'multiline':False]
['text':' Step 4 (Unnecessary assertion).','line_number':1097,'multiline':False]
['text':' Step 5.','line_number':1104,'multiline':False]
['text':' get Intl.Locale.prototype.language','line_number':1114,'multiline':False]
['text':' Steps 1-2.','line_number':1116,'multiline':False]
['text':' get Intl.Locale.prototype.script','line_number':1121,'multiline':False]
['text':' Step 3.','line_number':1125,'multiline':False]
['text':' Step 4 (Unnecessary assertion).','line_number':1132,'multiline':False]
['text':' Step 5.','line_number':1136,'multiline':False]
['text':' Step 6.','line_number':1145,'multiline':False]
['text':' get Intl.Locale.prototype.script','line_number':1155,'multiline':False]
['text':' Steps 1-2.','line_number':1157,'multiline':False]
['text':' get Intl.Locale.prototype.region','line_number':1162,'multiline':False]
['text':' Step 3.','line_number':1166,'multiline':False]
['text':' Step 4 (Unnecessary assertion).','line_number':1173,'multiline':False]
['text':' Step 5.','line_number':1177,'multiline':False]
['text':' Step 6.','line_number':1186,'multiline':False]
['text':' get Intl.Locale.prototype.region','line_number':1196,'multiline':False]
['text':' Steps 1-2.','line_number':1198,'multiline':False]
['text':' Handle the common case (a standalone language) first.','line_number':1273,'multiline':False]
['text':' Only the following Unicode BCP 47 locale identifier subset is accepted:','line_number':1274,'multiline':False]
['text':'   unicode_locale_id = unicode_language_id','line_number':1275,'multiline':False]
['text':'   unicode_language_id = unicode_language_subtag','line_number':1276,'multiline':False]
['text':'   unicode_language_subtag = alpha{2,3}','line_number':1277,'multiline':False]
['text':' The caller handles invalid inputs.','line_number':1318,'multiline':False]
['text':' Convert into canonical case before searching for replacements.','line_number':1396,'multiline':False]
['text':' Search if there's a replacement for the current Unicode keyword.','line_number':1403,'multiline':False]
