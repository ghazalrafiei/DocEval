['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Ignore repeated record() calls.','line_number':14,'multiline':False]
['text':' Check that all instruction inputs and outputs have been assigned an','line_number':104,'multiline':False]
['text':' allocation.','line_number':105,'multiline':False]
['text':' Check that the register assignment and move groups preserve the original','line_number':137,'multiline':False]
['text':' semantics of the virtual registers. Each virtual register has a single','line_number':138,'multiline':False]
['text':' write (owing to the SSA representation), but the allocation may move the','line_number':139,'multiline':False]
['text':' written value around between registers and memory locations along','line_number':140,'multiline':False]
['text':' different paths through the script.','line_number':141,'multiline':False]
['text':'','line_number':142,'multiline':False]
['text':' For each use of an allocation, follow the physical value which is read','line_number':143,'multiline':False]
['text':' backward through the script, along all paths to the value's virtual','line_number':144,'multiline':False]
['text':' register's definition.','line_number':145,'multiline':False]
['text':' Temps must never alias inputs (even at-start uses) unless explicitly','line_number':181,'multiline':False]
['text':' requested.','line_number':182,'multiline':False]
['text':' Fixed uses and fixed temps are allowed to alias.','line_number':189,'multiline':False]
['text':' MUST_REUSE_INPUT temps will alias their input.','line_number':194,'multiline':False]
['text':' Start checking at the previous instruction, in case this','line_number':203,'multiline':False]
['text':' instruction reuses its input register for an output.','line_number':204,'multiline':False]
['text':' Follow values through assignments in move groups. All assignments in','line_number':232,'multiline':False]
['text':' a move group are considered to happen simultaneously, so stop after','line_number':233,'multiline':False]
['text':' the first matching move is found.','line_number':234,'multiline':False]
['text':' Make sure the physical location being tracked is not clobbered by','line_number':247,'multiline':False]
['text':' another instruction, and that if the originating vreg definition is','line_number':248,'multiline':False]
['text':' found that it is writing to the tracked location.','line_number':249,'multiline':False]
['text':' Found the original definition, done scanning.','line_number':259,'multiline':False]
['text':' Phis are effectless, but change the vreg we are tracking. Check if there','line_number':278,'multiline':False]
['text':' is one which produced this vreg. We need to follow back through the phi','line_number':279,'multiline':False]
['text':' inputs as it is not guaranteed the register allocator filled in physical','line_number':280,'multiline':False]
['text':' allocations for the inputs and outputs of the phis.','line_number':281,'multiline':False]
['text':' No phi which defined the vreg we are tracking, follow back through all','line_number':297,'multiline':False]
['text':' predecessors with the existing vreg.','line_number':298,'multiline':False]
['text':' The |this| argument slot is implicitly included in all safepoints.','line_number':323,'multiline':False]
['text':' Do not assert that safepoint information for nunbox types is complete,','line_number':344,'multiline':False]
['text':' as if a vreg for a value's components are copied in multiple places','line_number':345,'multiline':False]
['text':' then the safepoint information may not reflect all copies. All copies','line_number':346,'multiline':False]
['text':' of payloads must be reflected, however, for generational GC.','line_number':347,'multiline':False]
['text':' There is no need to reanalyze if we have already seen this predecessor.','line_number':365,'multiline':False]
['text':' We share the seen allocations across analysis of each use, as there will','line_number':366,'multiline':False]
['text':' likely be common ground between different uses of the same vreg.','line_number':367,'multiline':False]
['text':' Print discovered allocations at the ends of blocks, in the order they','line_number':474,'multiline':False]
['text':' were discovered.','line_number':475,'multiline':False]
['text':' DEBUG','line_number':501,'multiline':False]
['text':' Use two printfs, as LAllocation::toString is not reentant.','line_number':623,'multiline':False]
['text':' JS_JITSPEW','line_number':656,'multiline':False]
