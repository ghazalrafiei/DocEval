['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' [SMDOC] CacheIR Health Report','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' The goal of CacheIR health report is to make the costlier','line_number':26,'multiline':False]
['text':' CacheIR stubs more apparent and easier to diagnose.','line_number':27,'multiline':False]
['text':' This is done by using the scores assigned to different CacheIROps in','line_number':28,'multiline':False]
['text':' CacheIROps.yaml (see the description of cost_estimate in the','line_number':29,'multiline':False]
['text':' aforementioned file for how these scores are determined), summing','line_number':30,'multiline':False]
['text':' the score of each op generated for a particular stub together, and displaying','line_number':31,'multiline':False]
['text':' this score for each stub in an inline cache. The higher the total stub score,','line_number':32,'multiline':False]
['text':' the more expensive the stub is.','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' There are a few ways to generate a health report for a script:','line_number':35,'multiline':False]
['text':' 1. Simply running a JS program with the evironment variable','line_number':36,'multiline':False]
['text':'    SPEW=CacheIRHealthReport. We generate a health report for a script','line_number':37,'multiline':False]
['text':'    whenever we reach the trial inlining threshold.','line_number':38,'multiline':False]
['text':'      ex) SPEW=CacheIRHealthReport dist/bin/js jsprogram.js','line_number':39,'multiline':False]
['text':' 2. In the shell you can call cacheIRHealthReport() with no arguments and a','line_number':40,'multiline':False]
['text':' report','line_number':41,'multiline':False]
['text':'    will be generated for all scripts in the current zone.','line_number':42,'multiline':False]
['text':'      ex) cacheIRHealthReport()','line_number':43,'multiline':False]
['text':' 3. You may also call cacheIRHealthReport() on a particular function to see','line_number':44,'multiline':False]
['text':' the','line_number':45,'multiline':False]
['text':'    health report associated with that function's script.','line_number':46,'multiline':False]
['text':'      ex) cacheIRHealthReport(foo)','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' Once you have generated a health report, you may go to','line_number':49,'multiline':False]
['text':' https://carolinecullen.github.io/cacheirhealthreport/ to visualize the data','line_number':50,'multiline':False]
['text':' and aid in understanding what may be going wrong with the CacheIR for a','line_number':51,'multiline':False]
['text':' particular stub. For more information about the tool and why a particular','line_number':52,'multiline':False]
['text':' script, inline cache entry, or stub is unhappy go to:','line_number':53,'multiline':False]
['text':' https://carolinecullen.github.io/cacheirhealthreport/info.html','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' Get happiness from health score.','line_number':61,'multiline':False]
['text':' Health of an individual stub.','line_number':63,'multiline':False]
['text':' If there is more than just a fallback stub in an IC Entry, then additional','line_number':65,'multiline':False]
['text':' information about the IC entry.','line_number':66,'multiline':False]
['text':' Health of all the stubs in an individual CacheIR Entry.','line_number':70,'multiline':False]
['text':' Spews the final hit count for scripts where we care about its final hit','line_number':76,'multiline':False]
['text':' count.','line_number':77,'multiline':False]
['text':' Spew the health of a particular ICEntry only.','line_number':80,'multiline':False]
['text':' If a JitScript exists, spew the health of all ICEntries that exist','line_number':84,'multiline':False]
['text':' for the specified script.','line_number':85,'multiline':False]
['text':' namespace jit','line_number':90,'multiline':False]
['text':' namespace js','line_number':91,'multiline':False]
['text':' JS_CACHEIR_SPEW ','line_number':93,'multiline':True]
['text':' jit_CacheIRHealth_h ','line_number':94,'multiline':True]
