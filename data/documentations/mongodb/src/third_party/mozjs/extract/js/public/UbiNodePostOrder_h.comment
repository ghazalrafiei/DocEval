['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'*
 * A post-order depth-first traversal of `ubi::Node` graphs.
 *
 * No GC may occur while an instance of `PostOrder` is live.
 *
 * The `NodeVisitor` type provided to `PostOrder::traverse` must have the
 * following member:
 *
 *   bool operator()(Node& node)
 *
 *     The node visitor method. This method is called once for each `node`
 *     reachable from the start set in post-order.
 *
 *     This visitor function should return true on success, or false if an error
 *     occurs. A false return value terminates the traversal immediately, and
 *     causes `PostOrder::traverse` to return false.
 *
 * The `EdgeVisitor` type provided to `PostOrder::traverse` must have the
 * following member:
 *
 *   bool operator()(Node& origin, Edge& edge)
 *
 *     The edge visitor method. This method is called once for each outgoing
 *     `edge` from `origin` that is reachable from the start set.
 *
 *     NB: UNLIKE NODES, THERE IS NO GUARANTEED ORDER IN WHICH EDGES AND THEIR
 *     ORIGINS ARE VISITED!
 *
 *     This visitor function should return true on success, or false if an error
 *     occurs. A false return value terminates the traversal immediately, and
 *     causes `PostOrder::traverse` to return false.
 ','line_number':26,'multiline':True]
['text':' wantNames ','line_number':106,'multiline':True]
['text':' Construct a post-order traversal object.','line_number':112,'multiline':False]
['text':'','line_number':113,'multiline':False]
['text':' The traversal asserts that no GC happens in its runtime during its','line_number':114,'multiline':False]
['text':' lifetime via the `AutoCheckCannotGC&` parameter. We do nothing with it,','line_number':115,'multiline':False]
['text':' other than require it to exist with a lifetime that encloses our own.','line_number':116,'multiline':False]
['text':' Add `node` as a starting point for the traversal. You may add','line_number':128,'multiline':False]
['text':' as many starting points as you like. Returns false on OOM.','line_number':129,'multiline':False]
['text':' Traverse the graph in post-order, starting with the set of nodes passed','line_number':137,'multiline':False]
['text':' to `addStart` and applying `onNode::operator()` for each node in the','line_number':138,'multiline':False]
['text':' graph and `onEdge::operator()` for each edge in the graph, as described','line_number':139,'multiline':False]
['text':' above.','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':' This should be called only once per instance of this class.','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':' Return false on OOM or error return from `onNode::operator()` or','line_number':144,'multiline':False]
['text':' `onEdge::operator()`.','line_number':145,'multiline':False]
['text':' We've already seen this node, don't follow its edges.','line_number':173,'multiline':False]
['text':' Mark the referent as seen and follow its edges.','line_number':178,'multiline':False]
['text':' namespace ubi','line_number':188,'multiline':False]
['text':' namespace JS','line_number':189,'multiline':False]
['text':' js_UbiNodePostOrder_h','line_number':191,'multiline':False]
