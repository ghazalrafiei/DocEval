['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::BigInt','line_number':12,'multiline':False]
['text':'{{{ check_macroassembler_style','line_number':19,'multiline':False]
['text':' ===============================================================','line_number':79,'multiline':False]
['text':' Load instructions','line_number':80,'multiline':False]
['text':' ===============================================================','line_number':86,'multiline':False]
['text':' Logical instructions','line_number':87,'multiline':False]
['text':' ===============================================================','line_number':145,'multiline':False]
['text':' Swap instructions','line_number':146,'multiline':False]
['text':' swap reg.high and reg.low.','line_number':152,'multiline':False]
['text':' ===============================================================','line_number':158,'multiline':False]
['text':' Arithmetic functions','line_number':159,'multiline':False]
['text':' LOW32  = LOW(LOW(dest) * LOW(imm));','line_number':253,'multiline':False]
['text':' HIGH32 = LOW(HIGH(dest) * LOW(imm)) [multiply imm into upper bits]','line_number':254,'multiline':False]
['text':'        + LOW(LOW(dest) * HIGH(imm)) [multiply dest into upper bits]','line_number':255,'multiline':False]
['text':'        + HIGH(LOW(dest) * LOW(imm)) [carry]','line_number':256,'multiline':False]
['text':' Optimized case for Math.random().','line_number':259,'multiline':False]
['text':' HIGH32 = LOW(HIGH(dest) * LOW(imm)) [multiply imm into upper bits]','line_number':269,'multiline':False]
['text':'        + LOW(LOW(dest) * HIGH(imm)) [multiply dest into upper bits]','line_number':270,'multiline':False]
['text':'        + HIGH(LOW(dest) * LOW(imm)) [carry]','line_number':276,'multiline':False]
['text':' LOW32  = LOW(LOW(dest) * LOW(imm));','line_number':277,'multiline':False]
['text':' LOW32  = LOW(LOW(dest) * LOW(imm));','line_number':288,'multiline':False]
['text':' HIGH32 = LOW(HIGH(dest) * LOW(imm)) [multiply imm into upper bits]','line_number':289,'multiline':False]
['text':'        + LOW(LOW(dest) * HIGH(imm)) [multiply dest into upper bits]','line_number':290,'multiline':False]
['text':'        + HIGH(LOW(dest) * LOW(imm)) [carry]','line_number':291,'multiline':False]
['text':' HIGH32 = LOW(HIGH(dest) * LOW(imm)) [multiply imm into upper bits]','line_number':295,'multiline':False]
['text':'        + LOW(LOW(dest) * HIGH(imm)) [multiply dest into upper bits]','line_number':296,'multiline':False]
['text':'        + HIGH(LOW(dest) * LOW(imm)) [carry]','line_number':302,'multiline':False]
['text':' LOW32  = LOW(LOW(dest) * LOW(imm));','line_number':303,'multiline':False]
['text':' LOW32  = LOW(LOW(dest) * LOW(imm));','line_number':312,'multiline':False]
['text':' HIGH32 = LOW(HIGH(dest) * LOW(imm)) [multiply imm into upper bits]','line_number':313,'multiline':False]
['text':'        + LOW(LOW(dest) * HIGH(imm)) [multiply dest into upper bits]','line_number':314,'multiline':False]
['text':'        + HIGH(LOW(dest) * LOW(imm)) [carry]','line_number':315,'multiline':False]
['text':' HIGH32 = LOW(HIGH(dest) * LOW(src)) [multiply src into upper bits]','line_number':320,'multiline':False]
['text':'        + LOW(LOW(dest) * HIGH(src)) [multiply dest into upper bits]','line_number':321,'multiline':False]
['text':'        + HIGH(LOW(dest) * LOW(src)) [carry]','line_number':325,'multiline':False]
['text':' LOW32  = LOW(LOW(dest) * LOW(src));','line_number':326,'multiline':False]
['text':' ===============================================================','line_number':364,'multiline':False]
['text':' Shift functions','line_number':365,'multiline':False]
['text':' ===============================================================','line_number':516,'multiline':False]
['text':' Rotation functions','line_number':517,'multiline':False]
['text':' ===============================================================','line_number':645,'multiline':False]
['text':' Bit counting functions','line_number':646,'multiline':False]
['text':' ===============================================================','line_number':696,'multiline':False]
['text':' Branch functions','line_number':697,'multiline':False]
['text':' This condition is always false. No branch required.','line_number':753,'multiline':False]
['text':'}}} check_macroassembler_style','line_number':942,'multiline':False]
['text':' ===============================================================','line_number':943,'multiline':False]
['text':' pc <- [sp]; sp += n','line_number':969,'multiline':False]
['text':' namespace jit','line_number':976,'multiline':False]
['text':' namespace js','line_number':977,'multiline':False]
['text':' jit_mips32_MacroAssembler_mips32_inl_h ','line_number':979,'multiline':True]
