['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::jit::JitActivation','line_number':17,'multiline':False]
['text':' This method generates a trampoline on ARM64 for a c++ function with
 * the following signature:
 *   bool blah(void* code, int argc, Value* argv,
 *             JSObject* scopeChain, Value* vp)
 *   ...using standard AArch64 calling convention
 ','line_number':25,'multiline':True]
['text':' EnterJitData::jitcode.','line_number':34,'multiline':False]
['text':' EnterJitData::maxArgc.','line_number':35,'multiline':False]
['text':' EnterJitData::maxArgv.','line_number':36,'multiline':False]
['text':' EnterJitData::osrFrame.','line_number':37,'multiline':False]
['text':' EnterJitData::calleeToken.','line_number':38,'multiline':False]
['text':' EnterJitData::scopeChain.','line_number':39,'multiline':False]
['text':' EnterJitData::osrNumStackValues.','line_number':41,'multiline':False]
['text':' Address of EnterJitData::result.','line_number':42,'multiline':False]
['text':' During the pushes below, use the normal stack pointer.','line_number':46,'multiline':False]
['text':' Save old frame pointer and return address; set new frame pointer.','line_number':49,'multiline':False]
['text':' Save callee-save integer registers.','line_number':53,'multiline':False]
['text':' Also save x7 (reg_vp) and x30 (lr), for use later.','line_number':54,'multiline':False]
['text':' Save callee-save floating-point registers.','line_number':59,'multiline':False]
['text':' AArch64 ABI specifies that only the lower 64 bits must be saved.','line_number':60,'multiline':False]
['text':' Emit stack canaries.','line_number':65,'multiline':False]
['text':' Common code below attempts to push single registers at a time,','line_number':71,'multiline':False]
['text':' which breaks the stack pointer's 16-byte alignment requirement.','line_number':72,'multiline':False]
['text':' Note that movePtr() is invalid because StackPointer is treated as xzr.','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' FIXME: After testing, this entire function should be rewritten to not','line_number':75,'multiline':False]
['text':' use the PseudoStackPointer: since the amount of data pushed is','line_number':76,'multiline':False]
['text':' precalculated, we can just allocate the whole frame header at once and','line_number':77,'multiline':False]
['text':' index off sp. This will save a significant number of instructions where','line_number':78,'multiline':False]
['text':' Push() updates sp.','line_number':79,'multiline':False]
['text':' Save the stack pointer at this point for Baseline OSR.','line_number':83,'multiline':False]
['text':' Remember stack depth without padding and arguments.','line_number':85,'multiline':False]
['text':' If constructing, include newTarget in argument vector.','line_number':88,'multiline':False]
['text':' JitFrameLayout is as follows (higher is higher in memory):','line_number':98,'multiline':False]
['text':'  N*8  - [ JS argument vector ] (base 16-byte aligned)','line_number':99,'multiline':False]
['text':'  8    - numActualArgs','line_number':100,'multiline':False]
['text':'  8    - calleeToken (16-byte aligned)','line_number':101,'multiline':False]
['text':'  8    - frameDescriptor','line_number':102,'multiline':False]
['text':'  8    - returnAddress (16-byte aligned, pushed by callee)','line_number':103,'multiline':False]
['text':' Touch frame incrementally (a requirement for Windows).','line_number':105,'multiline':False]
['text':'','line_number':106,'multiline':False]
['text':' Use already saved callee-save registers r20 and r21 as temps.','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' This has to be done outside the ScratchRegisterScope, as the temps are','line_number':109,'multiline':False]
['text':' under demand inside the touchFrameValues call.','line_number':110,'multiline':False]
['text':' Give sp 16-byte alignment and sync stack pointers.','line_number':112,'multiline':False]
['text':' We needn't worry about the Gecko Profiler mark because touchFrameValues','line_number':114,'multiline':False]
['text':' touches in large increments.','line_number':115,'multiline':False]
['text':' Restore stack pointer, preserved above.','line_number':117,'multiline':False]
['text':' Push the argument vector onto the stack.','line_number':120,'multiline':False]
['text':' WARNING: destructively modifies reg_argv','line_number':121,'multiline':False]
['text':' sp -= 8','line_number':133,'multiline':False]
['text':' Since we're using PostIndex Str below, this is necessary to avoid','line_number':134,'multiline':False]
['text':' overwriting the Gecko Profiler mark pushed above.','line_number':135,'multiline':False]
['text':' sp -= 8 * argc','line_number':138,'multiline':False]
['text':' Give sp 16-byte alignment and sync stack pointers.','line_number':142,'multiline':False]
['text':' Begin argument-pushing loop.','line_number':148,'multiline':False]
['text':' This could be optimized using Ldp and Stp.','line_number':149,'multiline':False]
['text':' Load an argument from argv, then increment argv by 8.','line_number':153,'multiline':False]
['text':' Store the argument to tmp_sp, then increment tmp_sp by 8.','line_number':157,'multiline':False]
['text':' Decrement tmp_argc and set the condition codes for the new value.','line_number':160,'multiline':False]
['text':' Branch if arguments remain.','line_number':163,'multiline':False]
['text':' Calculate the number of bytes pushed so far.','line_number':171,'multiline':False]
['text':' Create the frame descriptor.','line_number':174,'multiline':False]
['text':' Push the number of actual arguments and the calleeToken.','line_number':177,'multiline':False]
['text':' The result address is used to store the actual number of arguments','line_number':178,'multiline':False]
['text':' without adding an argument to EnterJIT.','line_number':179,'multiline':False]
['text':' ip0','line_number':182,'multiline':False]
['text':' Push the descriptor.','line_number':189,'multiline':False]
['text':' Check for Interpreter -> Baseline OSR.','line_number':194,'multiline':False]
['text':' Push return address and previous frame pointer.','line_number':198,'multiline':False]
['text':' ip1','line_number':201,'multiline':False]
['text':' Reserve frame.','line_number':207,'multiline':False]
['text':' Reserve space for locals and stack values.','line_number':214,'multiline':False]
['text':' w19 = num_stack_values * sizeof(Value).','line_number':216,'multiline':False]
['text':' Enter exit frame.','line_number':219,'multiline':False]
['text':' Push xzr for a fake return address.','line_number':224,'multiline':False]
['text':' No GC things to mark: push a bare token.','line_number':225,'multiline':False]
['text':' Initialize the frame, including filling in the slots.','line_number':231,'multiline':False]
['text':' BaselineFrame.','line_number':235,'multiline':False]
['text':' InterpreterFrame.','line_number':236,'multiline':False]
['text':' OOM: load error value, discard return address and previous frame','line_number':252,'multiline':False]
['text':' pointer, and return.','line_number':253,'multiline':False]
['text':' Call function.','line_number':265,'multiline':False]
['text':' Since AArch64 doesn't have the pc register available, the callee must push','line_number':266,'multiline':False]
['text':' lr.','line_number':267,'multiline':False]
['text':' Interpreter -> Baseline OSR will return here.','line_number':270,'multiline':False]
['text':' Pop frame descriptor.','line_number':273,'multiline':False]
['text':' Discard calleeToken, numActualArgs.','line_number':274,'multiline':False]
['text':' Discard arguments and the stack alignment padding.','line_number':276,'multiline':False]
['text':' Check that canaries placed on function entry are still present.','line_number':284,'multiline':False]
['text':' Restore callee-save floating-point registers.','line_number':297,'multiline':False]
['text':' Restore callee-save integer registers.','line_number':301,'multiline':False]
['text':' Also restore x7 (reg_vp) and x30 (lr).','line_number':302,'multiline':False]
['text':' Store return value (in JSReturnReg = x2 to just-popped reg_vp).','line_number':307,'multiline':False]
['text':' Restore old frame pointer.','line_number':310,'multiline':False]
['text':' Return using the value popped into x30.','line_number':313,'multiline':False]
['text':' Reset stack pointer.','line_number':316,'multiline':False]
['text':' static','line_number':320,'multiline':False]
['text':' Not supported, or not implemented yet.','line_number':323,'multiline':False]
['text':' TODO: Implement along with the corresponding stack-walker changes, in','line_number':324,'multiline':False]
['text':' coordination with the Gecko Profiler, see bug 1635987 and follow-ups.','line_number':325,'multiline':False]
['text':' Push all general-purpose registers.','line_number':339,'multiline':False]
['text':'','line_number':340,'multiline':False]
['text':' The ARM64 ABI does not treat SP as a normal register that can','line_number':341,'multiline':False]
['text':' be pushed. So pushing happens in two phases.','line_number':342,'multiline':False]
['text':'','line_number':343,'multiline':False]
['text':' Registers are pushed in reverse order of code.','line_number':344,'multiline':False]
['text':'','line_number':345,'multiline':False]
['text':' See block comment in MacroAssembler.h for further required invariants.','line_number':346,'multiline':False]
['text':' First, push the last four registers, passing zero for sp.','line_number':348,'multiline':False]
['text':' Zero is pushed for x28 and x31: the pseudo-SP and SP, respectively.','line_number':349,'multiline':False]
['text':' Second, push the first 28 registers that serve no special purpose.','line_number':352,'multiline':False]
['text':' Finally, push all floating-point registers, completing the RegisterDump.','line_number':355,'multiline':False]
['text':' The InvalidationBailoutStack saved in r0 must be:','line_number':362,'multiline':False]
['text':' - osiPointReturnAddress_','line_number':363,'multiline':False]
['text':' - ionScript_  (pushed by CodeGeneratorARM64::generateInvalidateEpilogue())','line_number':364,'multiline':False]
['text':' - regs_  (pushed here)','line_number':365,'multiline':False]
['text':' - fpregs_  (pushed here) [=r0]','line_number':366,'multiline':False]
['text':' Save the return address for later.','line_number':406,'multiline':False]
['text':' Load the information that the rectifier needs from the stack.','line_number':409,'multiline':False]
['text':' Extract a JSFunction pointer from the callee token and keep the','line_number':415,'multiline':False]
['text':' intermediary to avoid later recalculation.','line_number':416,'multiline':False]
['text':' Get the arguments from the function object.','line_number':419,'multiline':False]
['text':' Copy the number of actual arguments into r8.','line_number':427,'multiline':False]
['text':' Calculate the position that our arguments are at before sp gets modified.','line_number':430,'multiline':False]
['text':' Pad to a multiple of 16 bytes. This neglects the |this| value,','line_number':434,'multiline':False]
['text':' which will also be pushed, because the rest of the frame will','line_number':435,'multiline':False]
['text':' round off that value. See pushes of |argc|, |callee| and |desc| below.','line_number':436,'multiline':False]
['text':' new.target lives at the end of the pushed args','line_number':447,'multiline':False]
['text':' NB: The arg vector holder starts at the beginning of the last arg,','line_number':448,'multiline':False]
['text':'     add a value to get to argv[argc]','line_number':449,'multiline':False]
['text':' Calculate the number of undefineds that need to be pushed.','line_number':456,'multiline':False]
['text':' Put an undefined in a register so it can be pushed.','line_number':459,'multiline':False]
['text':' Push undefined N times.','line_number':462,'multiline':False]
['text':' Arguments copy loop. Copy for x8 >= 0 to include |this|.','line_number':471,'multiline':False]
['text':' Fix up the size of the stack frame. +1 accounts for |this|.','line_number':481,'multiline':False]
['text':' Make that into a frame descriptor.','line_number':485,'multiline':False]
['text':' Number of actual arguments.','line_number':488,'multiline':False]
['text':' Callee token.','line_number':489,'multiline':False]
['text':' Frame descriptor.','line_number':490,'multiline':False]
['text':' Call the target function.','line_number':492,'multiline':False]
['text':' See BaselineCacheIRCompiler::emitCallInlinedFunction.','line_number':504,'multiline':False]
['text':' Clean up!','line_number':512,'multiline':False]
['text':' Get the size of the stack frame, and clean up the later fixed frame.','line_number':513,'multiline':False]
['text':' Now that the size of the stack frame sans the fixed frame has been loaded,','line_number':516,'multiline':False]
['text':' add that onto the stack pointer.','line_number':517,'multiline':False]
['text':' Pop the return address from earlier and branch.','line_number':521,'multiline':False]
['text':' This assumes no SIMD registers, as JS does not support SIMD.','line_number':526,'multiline':False]
['text':' The stack saved in spArg must be (higher entries have higher memory','line_number':528,'multiline':False]
['text':' addresses):','line_number':529,'multiline':False]
['text':' - snapshotOffset_','line_number':530,'multiline':False]
['text':' - frameSize_','line_number':531,'multiline':False]
['text':' - regs_','line_number':532,'multiline':False]
['text':' - fpregs_ (spArg + 0)','line_number':533,'multiline':False]
['text':' SP % 8 == 4','line_number':541,'multiline':False]
['text':' STEP 1c: Call the bailout function, giving a pointer to the','line_number':542,'multiline':False]
['text':'          structure we just blitted onto the stack.','line_number':543,'multiline':False]
['text':' Make space for the BaselineBailoutInfo* outparam.','line_number':544,'multiline':False]
['text':' Get the bailoutInfo outparam.','line_number':555,'multiline':False]
['text':' Stack is:','line_number':558,'multiline':False]
['text':'     [frame]','line_number':559,'multiline':False]
['text':'     snapshotOffset','line_number':560,'multiline':False]
['text':'     frameSize','line_number':561,'multiline':False]
['text':'     [bailoutFrame]','line_number':562,'multiline':False]
['text':'','line_number':563,'multiline':False]
['text':' We want to remove both the bailout frame and the topmost Ion frame's stack.','line_number':564,'multiline':False]
['text':' Remove the bailoutFrame.','line_number':566,'multiline':False]
['text':' Pop the frame, snapshotOffset, and frameSize.','line_number':570,'multiline':False]
['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in r2.','line_number':577,'multiline':False]
['text':' Avoid conflicts with argument registers while discarding the result after','line_number':599,'multiline':False]
['text':' the function call.','line_number':600,'multiline':False]
['text':' Unlike on other platforms, it is the responsibility of the VM *callee* to','line_number':607,'multiline':False]
['text':' push the return address, while the caller must ensure that the address','line_number':608,'multiline':False]
['text':' is stored in lr on entry. This allows the VM wrapper to work with both','line_number':609,'multiline':False]
['text':' direct calls and tail calls.','line_number':610,'multiline':False]
['text':' First argument is the JSContext.','line_number':613,'multiline':False]
['text':' Stack is:','line_number':617,'multiline':False]
['text':'    ... frame ...','line_number':618,'multiline':False]
['text':'  +12 [args]','line_number':619,'multiline':False]
['text':'  +8  descriptor','line_number':620,'multiline':False]
['text':'  +0  returnAddress (pushed by this function, caller sets as lr)','line_number':621,'multiline':False]
['text':'','line_number':622,'multiline':False]
['text':'  We're aligned to an exit frame, so link it up.','line_number':623,'multiline':False]
['text':' Save the current stack pointer as the base for copying arguments.','line_number':627,'multiline':False]
['text':' argsBase can't be an argument register. Bad things would happen if','line_number':630,'multiline':False]
['text':' the MoveResolver didn't throw an assertion failure first.','line_number':631,'multiline':False]
['text':' Reserve space for any outparameter.','line_number':638,'multiline':False]
['text':' Copy arguments.','line_number':686,'multiline':False]
['text':' Copy the semi-implicit outparam, if any.','line_number':709,'multiline':False]
['text':' It is not a C++-abi outparam, which would get passed in the','line_number':710,'multiline':False]
['text':' outparam register, but a real parameter to the function, which','line_number':711,'multiline':False]
['text':' was stack-allocated above.','line_number':712,'multiline':False]
['text':' SP is used to transfer stack across call boundaries.','line_number':724,'multiline':False]
['text':' Test for failure.','line_number':727,'multiline':False]
['text':' Load the outparam and free any allocated stack.','line_number':741,'multiline':False]
['text':' Until C++ code is instrumented against Spectre, prevent speculative','line_number':783,'multiline':False]
['text':' execution from returning any private data.','line_number':784,'multiline':False]
['text':' Call into C++ to mark this GC thing.','line_number':813,'multiline':False]
['text':' Also preserve the return address.','line_number':822,'multiline':False]
['text':' Pop the volatile regs and restore LR.','line_number':834,'multiline':False]
['text':'','line_number':873,'multiline':False]
['text':' The code generated below expects that the current stack pointer points','line_number':874,'multiline':False]
['text':' to an Ion or Baseline frame, at the state it would be immediately','line_number':875,'multiline':False]
['text':' before a ret().  Thus, after this stub's business is done, it executes','line_number':876,'multiline':False]
['text':' a ret() and returns directly to the caller script, on behalf of the','line_number':877,'multiline':False]
['text':' callee script that jumped to this code.','line_number':878,'multiline':False]
['text':'','line_number':879,'multiline':False]
['text':' Thus the expected stack is:','line_number':880,'multiline':False]
['text':'','line_number':881,'multiline':False]
['text':'                                   StackPointer ----+','line_number':882,'multiline':False]
['text':'                                                    v','line_number':883,'multiline':False]
['text':' ..., ActualArgc, CalleeToken, Descriptor, ReturnAddr','line_number':884,'multiline':False]
['text':' MEM-HI                                       MEM-LOW','line_number':885,'multiline':False]
['text':'','line_number':886,'multiline':False]
['text':'','line_number':887,'multiline':False]
['text':' The generated jitcode is responsible for overwriting the','line_number':888,'multiline':False]
['text':' jitActivation->lastProfilingFrame field with a pointer to the previous','line_number':889,'multiline':False]
['text':' Ion or Baseline jit-frame that was pushed before this one. It is also','line_number':890,'multiline':False]
['text':' responsible for overwriting jitActivation->lastProfilingCallSite with','line_number':891,'multiline':False]
['text':' the return address into that frame.  The frame could either be an','line_number':892,'multiline':False]
['text':' immediate "caller" frame, or it could be a frame in a previous','line_number':893,'multiline':False]
['text':' JitActivation (if the current frame was entered from C++, and the C++','line_number':894,'multiline':False]
['text':' was entered by some caller jit-frame further down the stack).','line_number':895,'multiline':False]
['text':'','line_number':896,'multiline':False]
['text':' So this jitcode is responsible for "walking up" the jit stack, finding','line_number':897,'multiline':False]
['text':' the previous Ion or Baseline JS frame, and storing its address and the','line_number':898,'multiline':False]
['text':' return address into the appropriate fields on the current jitActivation.','line_number':899,'multiline':False]
['text':'','line_number':900,'multiline':False]
['text':' There are a fixed number of different path types that can lead to the','line_number':901,'multiline':False]
['text':' current frame, which is either a baseline or ion frame:','line_number':902,'multiline':False]
['text':'','line_number':903,'multiline':False]
['text':' <Baseline-Or-Ion>','line_number':904,'multiline':False]
['text':' ^','line_number':905,'multiline':False]
['text':' |','line_number':906,'multiline':False]
['text':' ^--- Ion','line_number':907,'multiline':False]
['text':' |','line_number':908,'multiline':False]
['text':' ^--- Baseline Stub <---- Baseline','line_number':909,'multiline':False]
['text':' |','line_number':910,'multiline':False]
['text':' ^--- Argument Rectifier','line_number':911,'multiline':False]
['text':' |    ^','line_number':912,'multiline':False]
['text':' |    |','line_number':913,'multiline':False]
['text':' |    ^--- Ion','line_number':914,'multiline':False]
['text':' |    |','line_number':915,'multiline':False]
['text':' |    ^--- Baseline Stub <---- Baseline','line_number':916,'multiline':False]
['text':' |','line_number':917,'multiline':False]
['text':' ^--- Entry Frame (From C++)','line_number':918,'multiline':False]
['text':'','line_number':919,'multiline':False]
['text':' Ensure that frame we are exiting is current lastProfilingFrame','line_number':931,'multiline':False]
['text':' Load the frame descriptor into |scratch1|, figure out what to do depending','line_number':944,'multiline':False]
['text':' on its type.','line_number':945,'multiline':False]
['text':' Going into the conditionals, we will have:','line_number':950,'multiline':False]
['text':'      FrameDescriptor.size in scratch1','line_number':951,'multiline':False]
['text':'      FrameDescriptor.type in scratch2','line_number':952,'multiline':False]
['text':' Handling of each case is dependent on FrameDescriptor.type','line_number':956,'multiline':False]
['text':' The WasmToJSJit is just another kind of entry.','line_number':977,'multiline':False]
['text':'','line_number':984,'multiline':False]
['text':' FrameType::IonJS','line_number':985,'multiline':False]
['text':'','line_number':986,'multiline':False]
['text':' Stack layout:','line_number':987,'multiline':False]
['text':'                  ...','line_number':988,'multiline':False]
['text':'                  Ion-Descriptor','line_number':989,'multiline':False]
['text':'     Prev-FP ---> Ion-ReturnAddr','line_number':990,'multiline':False]
['text':'                  ... previous frame data ... |- Descriptor.Size','line_number':991,'multiline':False]
['text':'                  ... arguments ...           |','line_number':992,'multiline':False]
['text':'                  ActualArgc          |','line_number':993,'multiline':False]
['text':'                  CalleeToken         |- JitFrameLayout::Size()','line_number':994,'multiline':False]
['text':'                  Descriptor          |','line_number':995,'multiline':False]
['text':'        FP -----> ReturnAddr          |','line_number':996,'multiline':False]
['text':'','line_number':997,'multiline':False]
['text':' |scratch1| contains Descriptor.size','line_number':1000,'multiline':False]
['text':' returning directly to an IonJS frame.  Store return addr to frame','line_number':1002,'multiline':False]
['text':' in lastProfilingCallSite.','line_number':1003,'multiline':False]
['text':' Store return frame in lastProfilingFrame.','line_number':1009,'multiline':False]
['text':' scratch2 := masm.getStackPointer() + Descriptor.size*1 +','line_number':1010,'multiline':False]
['text':'             JitFrameLayout::Size();','line_number':1011,'multiline':False]
['text':'','line_number':1020,'multiline':False]
['text':' FrameType::BaselineStub','line_number':1021,'multiline':False]
['text':'','line_number':1022,'multiline':False]
['text':' Look past the stub and store the frame pointer to','line_number':1023,'multiline':False]
['text':' the baselineJS frame prior to it.','line_number':1024,'multiline':False]
['text':'','line_number':1025,'multiline':False]
['text':' Stack layout:','line_number':1026,'multiline':False]
['text':'              ...','line_number':1027,'multiline':False]
['text':'              BL-Descriptor','line_number':1028,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1029,'multiline':False]
['text':'      +-----> BL-PrevFramePointer','line_number':1030,'multiline':False]
['text':'      |       ... BL-FrameData ...','line_number':1031,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1032,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1033,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1034,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Descriptor.Size','line_number':1035,'multiline':False]
['text':'              ... arguments ...           |','line_number':1036,'multiline':False]
['text':'              ActualArgc          |','line_number':1037,'multiline':False]
['text':'              CalleeToken         |- JitFrameLayout::Size()','line_number':1038,'multiline':False]
['text':'              Descriptor          |','line_number':1039,'multiline':False]
['text':'    FP -----> ReturnAddr          |','line_number':1040,'multiline':False]
['text':'','line_number':1041,'multiline':False]
['text':' We take advantage of the fact that the stub frame saves the frame','line_number':1042,'multiline':False]
['text':' pointer pointing to the baseline frame, so a bunch of calculation can','line_number':1043,'multiline':False]
['text':' be avoided.','line_number':1044,'multiline':False]
['text':'','line_number':1045,'multiline':False]
['text':' Skip past BL-PrevFramePtr.','line_number':1060,'multiline':False]
['text':'','line_number':1065,'multiline':False]
['text':' FrameType::Rectifier','line_number':1066,'multiline':False]
['text':'','line_number':1067,'multiline':False]
['text':' The rectifier frame can be preceded by either an IonJS, a BaselineStub,','line_number':1068,'multiline':False]
['text':' or a CppToJSJit/WasmToJSJit frame.','line_number':1069,'multiline':False]
['text':'','line_number':1070,'multiline':False]
['text':' Stack layout if caller of rectifier was Ion or CppToJSJit/WasmToJSJit:','line_number':1071,'multiline':False]
['text':'','line_number':1072,'multiline':False]
['text':'              Ion-Descriptor','line_number':1073,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1074,'multiline':False]
['text':'              ... ion frame data ... |- Rect-Descriptor.Size','line_number':1075,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1076,'multiline':False]
['text':'','line_number':1077,'multiline':False]
['text':' Stack layout if caller of rectifier was Baseline:','line_number':1078,'multiline':False]
['text':'','line_number':1079,'multiline':False]
['text':'              BL-Descriptor','line_number':1080,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1081,'multiline':False]
['text':'      +-----> BL-SavedFramePointer','line_number':1082,'multiline':False]
['text':'      |       ... baseline frame data ...','line_number':1083,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1084,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1085,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1086,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Rect-Descriptor.Size','line_number':1087,'multiline':False]
['text':'              ... args to rectifier ...   |','line_number':1088,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1089,'multiline':False]
['text':'','line_number':1090,'multiline':False]
['text':' Common stack layout:','line_number':1091,'multiline':False]
['text':'','line_number':1092,'multiline':False]
['text':'              ActualArgc          |','line_number':1093,'multiline':False]
['text':'              CalleeToken         |- IonRectitiferFrameLayout::Size()','line_number':1094,'multiline':False]
['text':'              Rect-Descriptor     |','line_number':1095,'multiline':False]
['text':'              Rect-ReturnAddr     |','line_number':1096,'multiline':False]
['text':'              ... rectifier data & args ... |- Descriptor.Size','line_number':1097,'multiline':False]
['text':'              ActualArgc      |','line_number':1098,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1099,'multiline':False]
['text':'              Descriptor      |','line_number':1100,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1101,'multiline':False]
['text':'','line_number':1102,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1105,'multiline':False]
['text':' Now |scratch1| contains Rect-Descriptor.Size','line_number':1115,'multiline':False]
['text':' and |scratch2| points to Rectifier frame','line_number':1116,'multiline':False]
['text':' and |scratch3| contains Rect-Descriptor.Type','line_number':1117,'multiline':False]
['text':' Check for either Ion or BaselineStub frame.','line_number':1121,'multiline':False]
['text':' Handle Rectifier <- IonJS','line_number':1126,'multiline':False]
['text':' scratch3 := RectFrame[ReturnAddr]','line_number':1127,'multiline':False]
['text':' scratch3 := RectFrame + Rect-Descriptor.Size +','line_number':1133,'multiline':False]
['text':'             RectifierFrameLayout::Size()','line_number':1134,'multiline':False]
['text':' Check for either BaselineStub or a CppToJSJit/WasmToJSJit entry','line_number':1142,'multiline':False]
['text':' frame.','line_number':1143,'multiline':False]
['text':' Handle Rectifier <- BaselineStub <- BaselineJS','line_number':1147,'multiline':False]
['text':' FrameType::IonICCall','line_number':1163,'multiline':False]
['text':'','line_number':1164,'multiline':False]
['text':' The caller is always an IonJS frame.','line_number':1165,'multiline':False]
['text':'','line_number':1166,'multiline':False]
['text':'              Ion-Descriptor','line_number':1167,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1168,'multiline':False]
['text':'              ... ion frame data ... |- CallFrame-Descriptor.Size','line_number':1169,'multiline':False]
['text':'              StubCode               |','line_number':1170,'multiline':False]
['text':'              ICCallFrame-Descriptor |- IonICCallFrameLayout::Size()','line_number':1171,'multiline':False]
['text':'              ICCallFrame-ReturnAddr |','line_number':1172,'multiline':False]
['text':'              ... call frame data & args ... |- Descriptor.Size','line_number':1173,'multiline':False]
['text':'              ActualArgc      |','line_number':1174,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1175,'multiline':False]
['text':'              Descriptor      |','line_number':1176,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1177,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1180,'multiline':False]
['text':' scratch3 := ICCallFrame-Descriptor.Size','line_number':1186,'multiline':False]
['text':' Assert previous frame is an IonJS frame.','line_number':1190,'multiline':False]
['text':' lastProfilingCallSite := ICCallFrame-ReturnAddr','line_number':1203,'multiline':False]
['text':' lastProfilingFrame := ICCallFrame + ICCallFrame-Descriptor.Size +','line_number':1209,'multiline':False]
['text':'                       IonICCallFrameLayout::Size()','line_number':1210,'multiline':False]
['text':'','line_number':1217,'multiline':False]
['text':' FrameType::CppToJSJit / FrameType::WasmToJSJit','line_number':1218,'multiline':False]
['text':'','line_number':1219,'multiline':False]
['text':' If at an entry frame, store null into both fields.','line_number':1220,'multiline':False]
['text':' A fast-path wasm->jit transition frame is an entry frame from the point','line_number':1221,'multiline':False]
['text':' of view of the JIT.','line_number':1222,'multiline':False]
['text':'','line_number':1223,'multiline':False]
