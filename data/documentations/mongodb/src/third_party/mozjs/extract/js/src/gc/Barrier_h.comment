['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' std::true_type','line_number':12,'multiline':False]
['text':' JS::detail::DefineComparisonOps','line_number':18,'multiline':False]
['text':'
 * [SMDOC] GC Barriers
 *
 * Several kinds of barrier are necessary to allow the GC to function correctly.
 * These are triggered by reading or writing to GC pointers in the heap and
 * serve to tell the collector about changes to the graph of reachable GC
 * things.
 *
 * Since it would be awkward to change every write to memory into a function
 * call, this file contains a bunch of C++ classes and templates that use
 * operator overloading to take care of barriers automatically. In most cases,
 * all that's necessary is to replace:
 *
 *     Type* field;
 *
 * with:
 *
 *     HeapPtr<Type> field;
 *
 * All heap-based GC pointers and tagged pointers must use one of these classes,
 * except in a couple of exceptional cases.
 *
 * These classes are designed to be used by the internals of the JS engine.
 * Barriers designed to be used externally are provided in js/RootingAPI.h.
 *
 * Overview
 * ========
 *
 * This file implements the following concrete classes:
 *
 * HeapPtr       General wrapper for heap-based pointers that provides pre- and
 *               post-write barriers. Most clients should use this.
 *
 * GCPtr         An optimisation of HeapPtr for objects which are only destroyed
 *               by GC finalization (this rules out use in Vector, for example).
 *
 * PreBarriered  Provides a pre-barrier but not a post-barrier. Necessary when
 *               generational GC updates are handled manually, e.g. for hash
 *               table keys that don't use MovableCellHasher.
 *
 * HeapSlot      Provides pre and post-barriers, optimised for use in JSObject
 *               slots and elements.
 *
 * WeakHeapPtr   Provides read and post-write barriers, for use with weak
 *               pointers.
 *
 * The following classes are implemented in js/RootingAPI.h (in the JS
 * namespace):
 *
 * Heap          General wrapper for external clients. Like HeapPtr but also
 *               handles cycle collector concerns. Most external clients should
 *               use this.
 *
 * TenuredHeap   Like Heap but doesn't allow nursery pointers. Allows storing
 *               flags in unused lower bits of the pointer.
 *
 * Which class to use?
 * -------------------
 *
 * Answer the following questions to decide which barrier class is right for
 * your use case:
 *
 * Is your code part of the JS engine?
 *   Yes, it's internal =>
 *     Is your pointer weak or strong?
 *       Strong =>
 *         Do you want automatic handling of nursery pointers?
 *           Yes, of course =>
 *             Can your object be destroyed outside of a GC?
 *               Yes => Use HeapPtr<T>
 *               No => Use GCPtr<T> (optimization)
 *           No, I'll do this myself => Use PreBarriered<T>
 *       Weak => Use WeakHeapPtr<T>
 *   No, it's external =>
 *     Can your pointer refer to nursery objects?
 *       Yes => Use JS::Heap<T>
 *       Never => Use JS::TenuredHeap<T> (optimization)
 *
 * Write barriers
 * ==============
 *
 * A write barrier is a mechanism used by incremental or generational GCs to
 * ensure that every value that needs to be marked is marked. In general, the
 * write barrier should be invoked whenever a write can cause the set of things
 * traced through by the GC to change. This includes:
 *
 *   - writes to object properties
 *   - writes to array slots
 *   - writes to fields like JSObject::shape_ that we trace through
 *   - writes to fields in private data
 *   - writes to non-markable fields like JSObject::private that point to
 *     markable data
 *
 * The last category is the trickiest. Even though the private pointer does not
 * point to a GC thing, changing the private pointer may change the set of
 * objects that are traced by the GC. Therefore it needs a write barrier.
 *
 * Every barriered write should have the following form:
 *
 *   <pre-barrier>
 *   obj->field = value; // do the actual write
 *   <post-barrier>
 *
 * The pre-barrier is used for incremental GC and the post-barrier is for
 * generational GC.
 *
 * Pre-write barrier
 * -----------------
 *
 * To understand the pre-barrier, let's consider how incremental GC works. The
 * GC itself is divided into "slices". Between each slice, JS code is allowed to
 * run. Each slice should be short so that the user doesn't notice the
 * interruptions. In our GC, the structure of the slices is as follows:
 *
 * 1. ... JS work, which leads to a request to do GC ...
 * 2. [first GC slice, which performs all root marking and (maybe) more marking]
 * 3. ... more JS work is allowed to run ...
 * 4. [GC mark slice, which runs entirely in
 *    GCRuntime::markUntilBudgetExhausted]
 * 5. ... more JS work ...
 * 6. [GC mark slice, which runs entirely in
 *    GCRuntime::markUntilBudgetExhausted]
 * 7. ... more JS work ...
 * 8. [GC marking finishes; sweeping done non-incrementally; GC is done]
 * 9. ... JS continues uninterrupted now that GC is finishes ...
 *
 * Of course, there may be a different number of slices depending on how much
 * marking is to be done.
 *
 * The danger inherent in this scheme is that the JS code in steps 3, 5, and 7
 * might change the heap in a way that causes the GC to collect an object that
 * is actually reachable. The write barrier prevents this from happening. We use
 * a variant of incremental GC called "snapshot at the beginning." This approach
 * guarantees the invariant that if an object is reachable in step 2, then we
 * will mark it eventually. The name comes from the idea that we take a
 * theoretical "snapshot" of all reachable objects in step 2; all objects in
 * that snapshot should eventually be marked. (Note that the write barrier
 * verifier code takes an actual snapshot.)
 *
 * The basic correctness invariant of a snapshot-at-the-beginning collector is
 * that any object reachable at the end of the GC (step 9) must either:
 *   (1) have been reachable at the beginning (step 2) and thus in the snapshot
 *   (2) or must have been newly allocated, in steps 3, 5, or 7.
 * To deal with case (2), any objects allocated during an incremental GC are
 * automatically marked black.
 *
 * This strategy is actually somewhat conservative: if an object becomes
 * unreachable between steps 2 and 8, it would be safe to collect it. We won't,
 * mainly for simplicity. (Also, note that the snapshot is entirely
 * theoretical. We don't actually do anything special in step 2 that we wouldn't
 * do in a non-incremental GC.
 *
 * It's the pre-barrier's job to maintain the snapshot invariant. Consider the
 * write "obj->field = value". Let the prior value of obj->field be
 * value0. Since it's possible that value0 may have been what obj->field
 * contained in step 2, when the snapshot was taken, the barrier marks
 * value0. Note that it only does this if we're in the middle of an incremental
 * GC. Since this is rare, the cost of the write barrier is usually just an
 * extra branch.
 *
 * In practice, we implement the pre-barrier differently based on the type of
 * value0. E.g., see JSObject::preWriteBarrier, which is used if obj->field is
 * a JSObject*. It takes value0 as a parameter.
 *
 * Post-write barrier
 * ------------------
 *
 * For generational GC, we want to be able to quickly collect the nursery in a
 * minor collection.  Part of the way this is achieved is to only mark the
 * nursery itself; tenured things, which may form the majority of the heap, are
 * not traced through or marked.  This leads to the problem of what to do about
 * tenured objects that have pointers into the nursery: if such things are not
 * marked, they may be discarded while there are still live objects which
 * reference them. The solution is to maintain information about these pointers,
 * and mark their targets when we start a minor collection.
 *
 * The pointers can be thought of as edges in an object graph, and the set of
 * edges from the tenured generation into the nursery is known as the remembered
 * set. Post barriers are used to track this remembered set.
 *
 * Whenever a slot which could contain such a pointer is written, we check
 * whether the pointed-to thing is in the nursery (if storeBuffer() returns a
 * buffer).  If so we add the cell into the store buffer, which is the
 * collector's representation of the remembered set.  This means that when we
 * come to do a minor collection we can examine the contents of the store buffer
 * and mark any edge targets that are in the nursery.
 *
 * Read barriers
 * =============
 *
 * Weak pointer read barrier
 * -------------------------
 *
 * Weak pointers must have a read barrier to prevent the referent from being
 * collected if it is read after the start of an incremental GC.
 *
 * The problem happens when, during an incremental GC, some code reads a weak
 * pointer and writes it somewhere on the heap that has been marked black in a
 * previous slice. Since the weak pointer will not otherwise be marked and will
 * be swept and finalized in the last slice, this will leave the pointer just
 * written dangling after the GC. To solve this, we immediately mark black all
 * weak pointers that get read between slices so that it is safe to store them
 * in an already marked part of the heap, e.g. in Rooted.
 *
 * Cycle collector read barrier
 * ----------------------------
 *
 * Heap pointers external to the engine may be marked gray. The JS API has an
 * invariant that no gray pointers may be passed, and this maintained by a read
 * barrier that calls ExposeGCThingToActiveJS on such pointers. This is
 * implemented by JS::Heap<T> in js/RootingAPI.h.
 *
 * Implementation Details
 * ======================
 *
 * One additional note: not all object writes need to be pre-barriered. Writes
 * to newly allocated objects do not need a pre-barrier. In these cases, we use
 * the "obj->field.init(value)" method instead of "obj->field = value". We use
 * the init naming idiom in many places to signify that a field is being
 * assigned for the first time.
 *
 * This file implements the following hierarchy of classes:
 *
 * BarrieredBase             base class of all barriers
 *  |  |
 *  | WriteBarriered         base class which provides common write operations
 *  |  |  |  |  |
 *  |  |  |  | PreBarriered  provides pre-barriers only
 *  |  |  |  |
 *  |  |  | GCPtr            provides pre- and post-barriers
 *  |  |  |
 *  |  | HeapPtr             provides pre- and post-barriers; is relocatable
 *  |  |                     and deletable for use inside C++ managed memory
 *  |  |
 *  | HeapSlot               similar to GCPtr, but tailored to slots storage
 *  |
 * ReadBarriered             base class which provides common read operations
 *  |
 * WeakHeapPtr               provides read barriers only
 *
 *
 * The implementation of the barrier logic is implemented in the
 * Cell/TenuredCell base classes, which are called via:
 *
 * WriteBarriered<T>::pre
 *  -> InternalBarrierMethods<T*>::preBarrier
 *      -> Cell::preWriteBarrier
 *  -> InternalBarrierMethods<Value>::preBarrier
 *  -> InternalBarrierMethods<jsid>::preBarrier
 *      -> InternalBarrierMethods<T*>::preBarrier
 *          -> Cell::preWriteBarrier
 *
 * GCPtr<T>::post and HeapPtr<T>::post
 *  -> InternalBarrierMethods<T*>::postBarrier
 *      -> gc::PostWriteBarrierImpl
 *  -> InternalBarrierMethods<Value>::postBarrier
 *      -> StoreBuffer::put
 *
 * Barriers for use outside of the JS engine call into the same barrier
 * implementations at InternalBarrierMethods<T>::post via an indirect call to
 * Heap(.+)PostWriteBarrier.
 *
 * These clases are designed to be used to wrap GC thing pointers or values that
 * act like them (i.e. JS::Value and jsid).  It is possible to use them for
 * other types by supplying the necessary barrier implementations but this
 * is not usually necessary and should be done with caution.
 ','line_number':25,'multiline':True]
['text':' namespace gc','line_number':304,'multiline':False]
['text':' If the target needs an entry, add it.','line_number':358,'multiline':False]
['text':' If we know that the prev has already inserted an entry, we can','line_number':362,'multiline':False]
['text':' skip doing the lookup to add the new entry. Note that we cannot','line_number':363,'multiline':False]
['text':' safely assert the presence of the entry because it may have been','line_number':364,'multiline':False]
['text':' added via a different store buffer.','line_number':365,'multiline':False]
['text':' Remove the prev entry if the new value does not need it.','line_number':373,'multiline':False]
['text':' Base class of all barrier types.','line_number':416,'multiline':False]
['text':'','line_number':417,'multiline':False]
['text':' This is marked non-memmovable since post barriers added by derived classes','line_number':418,'multiline':False]
['text':' can add pointers to class instances to the store buffer.','line_number':419,'multiline':False]
['text':' BarrieredBase is not directly instantiable.','line_number':423,'multiline':False]
['text':' BarrieredBase subclasses cannot be copy constructed by default.','line_number':426,'multiline':False]
['text':' Storage for all barrier classes. |value| must be a GC thing reference','line_number':429,'multiline':False]
['text':' type: either a direct pointer to a GC thing or a supported tagged','line_number':430,'multiline':False]
['text':' pointer that can reference GC things, such as JS::Value or jsid. Nested','line_number':431,'multiline':False]
['text':' barrier types are NOT supported. See assertTypeConstraints.','line_number':432,'multiline':False]
['text':' Note: this is public because C++ cannot friend to a specific template','line_number':438,'multiline':False]
['text':' instantiation. Friending to the generic template leads to a number of','line_number':439,'multiline':False]
['text':' unintended consequences, including template resolution ambiguity and a','line_number':440,'multiline':False]
['text':' circular dependency with Tracing.h.','line_number':441,'multiline':False]
['text':' Base class for barriered pointer types that intercept only writes.','line_number':445,'multiline':False]
['text':' WriteBarriered is not directly instantiable.','line_number':452,'multiline':False]
['text':' Use this if the automatic coercion to T isn't working.','line_number':458,'multiline':False]
['text':' Use this if you want to change the value without invoking barriers.','line_number':461,'multiline':False]
['text':' Obviously this is dangerous unless you know the barrier is not needed.','line_number':462,'multiline':False]
['text':' For users who need to manually barrier the raw types.','line_number':465,'multiline':False]
['text':'
 * PreBarriered only automatically handles pre-barriers. Post-barriers must be
 * manually implemented when using this class. GCPtr and HeapPtr should be used
 * in all cases that do not require explicit low-level control of moving
 * behavior.
 *
 * This class is useful for example for HashMap keys where automatically
 * updating a moved nursery pointer would break the hash table.
 ','line_number':484,'multiline':True]
['text':'
   * Allow implicit construction for use in generic contexts, such as
   * DebuggerWeakMap::markKeys.
   ','line_number':497,'multiline':True]
['text':' Use to set the pointer to nullptr. ','line_number':512,'multiline':True]
['text':' namespace js','line_number':535,'multiline':False]
['text':' namespace detail','line_number':546,'multiline':False]
['text':' namespace JS','line_number':548,'multiline':False]
['text':'
 * A pre- and post-barriered heap pointer, for use inside the JS engine.
 *
 * It must only be stored in memory that has GC lifetime. GCPtr must not be
 * used in contexts where it may be implicitly moved or deleted, e.g. most
 * containers.
 *
 * The post-barriers implemented by this class are faster than those
 * implemented by js::HeapPtr<T> or JS::Heap<T> at the cost of not
 * automatically handling deletion or movement.
 ','line_number':552,'multiline':True]
['text':' No barriers are necessary as this only happens when the GC is sweeping.','line_number':578,'multiline':False]
['text':'','line_number':579,'multiline':False]
['text':' If this assertion fails you may need to make the containing object use a','line_number':580,'multiline':False]
['text':' HeapPtr instead, as this can be deleted from outside of GC.','line_number':581,'multiline':False]
['text':'
   * Unlike HeapPtr<T>, GCPtr<T> must be managed with GC lifetimes.
   * Specifically, the memory used by the pointer itself must be live until
   * at least the next minor GC. For that reason, move semantics are invalid
   * and are deleted here. Please note that not all containers support move
   * semantics, so this does not completely prevent invalid uses.
   ','line_number':610,'multiline':True]
['text':' namespace js','line_number':621,'multiline':False]
['text':' namespace detail','line_number':632,'multiline':False]
['text':' namespace JS','line_number':634,'multiline':False]
['text':'
 * A pre- and post-barriered heap pointer, for use inside the JS engine. These
 * heap pointers can be stored in C++ containers like GCVector and GCHashMap.
 *
 * The GC sometimes keeps pointers to pointers to GC things --- for example, to
 * track references into the nursery. However, C++ containers like GCVector and
 * GCHashMap usually reserve the right to relocate their elements any time
 * they're modified, invalidating all pointers to the elements. HeapPtr
 * has a move constructor which knows how to keep the GC up to date if it is
 * moved to a new location.
 *
 * However, because of this additional communication with the GC, HeapPtr
 * is somewhat slower, so it should only be used in contexts where this ability
 * is necessary.
 *
 * Obviously, JSObjects, JSStrings, and the like get tenured and compacted, so
 * whatever pointers they contain get relocated, in the sense used here.
 * However, since the GC itself is moving those values, it takes care of its
 * internal pointers to those pointers itself. HeapPtr is only necessary
 * when the relocation would otherwise occur without the GC's knowledge.
 ','line_number':638,'multiline':True]
['text':' Implicitly adding barriers is a reasonable default.','line_number':664,'multiline':False]
['text':' Make this friend so it can access pre() and post(). ','line_number':691,'multiline':True]
['text':' namespace js','line_number':720,'multiline':False]
['text':' namespace detail','line_number':731,'multiline':False]
['text':' namespace JS','line_number':733,'multiline':False]
['text':' Base class for barriered pointer types that intercept reads and writes.','line_number':737,'multiline':False]
['text':' ReadBarriered is not directly instantiable.','line_number':741,'multiline':False]
['text':' Incremental GC requires that weak pointers have read barriers. See the block','line_number':750,'multiline':False]
['text':' comment at the top of Barrier.h for a complete discussion of why.','line_number':751,'multiline':False]
['text':'','line_number':752,'multiline':False]
['text':' Note that this class also has post-barriers, so is safe to use with nursery','line_number':753,'multiline':False]
['text':' pointers. However, when used as a hashtable key, care must still be taken to','line_number':754,'multiline':False]
['text':' insert manual post-barriers on the table for rekeying if the key is based in','line_number':755,'multiline':False]
['text':' any way on the address of the object.','line_number':756,'multiline':False]
['text':' It is okay to add barriers implicitly.','line_number':766,'multiline':False]
['text':' The copy constructor creates a new weak edge but the wrapped pointer does','line_number':771,'multiline':False]
['text':' not escape, so no read barrier is necessary.','line_number':772,'multiline':False]
['text':' Move retains the lifetime status of the source edge, so does not fire','line_number':777,'multiline':False]
['text':' the read barrier of the defunct edge.','line_number':778,'multiline':False]
['text':' namespace js','line_number':832,'multiline':False]
['text':' namespace detail','line_number':845,'multiline':False]
['text':' namespace JS','line_number':847,'multiline':False]
['text':' A pre- and post-barriered Value that is specialized to be aware that it','line_number':851,'multiline':False]
['text':' resides in a slots or elements vector. This allows it to be relocated in','line_number':852,'multiline':False]
['text':' memory, but with substantially less overhead than a HeapPtr.','line_number':853,'multiline':False]
['text':' namespace js','line_number':896,'multiline':False]
['text':' namespace detail','line_number':907,'multiline':False]
['text':' namespace JS','line_number':909,'multiline':False]
['text':'
 * This is a hack for RegExpStatics::updateFromMatch. It allows us to do two
 * barriers with only one branch to check if we're in an incremental GC.
 ','line_number':936,'multiline':True]
['text':'
 * ImmutableTenuredPtr is designed for one very narrow case: replacing
 * immutable raw pointers to GC-managed things, implicitly converting to a
 * handle type for ease of use. Pointers encapsulated by this type must:
 *
 *   be immutable (no incremental write barriers),
 *   never point into the nursery (no generational write barriers), and
 *   be traced via MarkRuntime (we use fromMarkedLocation).
 *
 * In short: you *really* need to know what you're doing before you use this
 * class!
 ','line_number':953,'multiline':True]
['text':' `ImmutableTenuredPtr<T>` is implicitly convertible to `Handle<T>`.','line_number':973,'multiline':False]
['text':'','line_number':974,'multiline':False]
['text':' In case you need to convert to `Handle<U>` where `U` is base class of `T`,','line_number':975,'multiline':False]
['text':' convert this to `Handle<T>` by `toHandle()` and then use implicit','line_number':976,'multiline':False]
['text':' conversion from `Handle<T>` to `Handle<U>`.','line_number':977,'multiline':False]
['text':' Useful for hashtables with a HeapPtr as key. ','line_number':1052,'multiline':True]
['text':' Useful for hashtables with a WeakHeapPtr as key. ','line_number':1073,'multiline':True]
['text':' namespace js','line_number':1086,'multiline':False]
['text':' Not implemented. GCPtr can't be used as a hash table key because it has a','line_number':1095,'multiline':False]
['text':' post barrier but doesn't support relocation.','line_number':1096,'multiline':False]
['text':' namespace mozilla','line_number':1105,'multiline':False]
['text':' namespace jit','line_number':1124,'multiline':False]
['text':' namespace js ','line_number':1165,'multiline':True]
['text':' gc_Barrier_h ','line_number':1167,'multiline':True]
