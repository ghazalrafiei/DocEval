['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Interface to a sweep action.','line_number':54,'multiline':False]
['text':' The arguments passed to each action.','line_number':56,'multiline':False]
['text':' Pool mutation does not invalidate an Iter unless the mutation','line_number':117,'multiline':False]
['text':' is of the TenuredChunk currently being visited by the Iter.','line_number':118,'multiline':False]
['text':' Performs extra allocation off thread so that when memory is required on the','line_number':168,'multiline':False]
['text':' main thread it will already be available and waiting.','line_number':169,'multiline':False]
['text':' Guarded by the GC lock.','line_number':171,'multiline':False]
['text':' Search the provided chunks for free arenas and decommit them.','line_number':183,'multiline':False]
['text':' A singly linked list of zones.','line_number':208,'multiline':False]
['text':' Check whether to trigger a zone GC after allocating GC cells.','line_number':319,'multiline':False]
['text':' Check whether to trigger a zone GC after malloc memory.','line_number':321,'multiline':False]
['text':' The return value indicates if we were able to do the GC.','line_number':326,'multiline':False]
['text':' The return value indicates whether a major GC was performed.','line_number':332,'multiline':False]
['text':' Internal public interface','line_number':408,'multiline':False]
['text':' DEBUG','line_number':427,'multiline':False]
['text':' Crawl the heap to check whether an arbitary pointer is within a cell of','line_number':570,'multiline':False]
['text':' the given kind.','line_number':571,'multiline':False]
['text':' Queue memory memory to be freed on a background thread if possible.','line_number':577,'multiline':False]
['text':' Public here for ReleaseArenaLists and FinalizeTypedArenas.','line_number':583,'multiline':False]
['text':' Allocator','line_number':586,'multiline':False]
['text':'
   * Concurrent sweep infrastructure.
   ','line_number':609,'multiline':True]
['text':' WeakRefs','line_number':622,'multiline':False]
['text':' Delete an empty zone after its contents have been merged.','line_number':636,'multiline':False]
['text':' For ArenaLists::allocateFromArena()','line_number':639,'multiline':False]
['text':' Allocator internals','line_number':646,'multiline':False]
['text':'
   * Return the list of chunks that can be released outside the GC lock.
   * Must be called either during the GC or with the GC lock taken.
   ','line_number':658,'multiline':True]
['text':' Assert if the system state is such that we should never','line_number':682,'multiline':False]
['text':' receive a request to do GC work.','line_number':683,'multiline':False]
['text':' Check if the system state is such that GC has been supressed','line_number':686,'multiline':False]
['text':' or otherwise delayed.','line_number':687,'multiline':False]
['text':'
   * Run one GC "cycle" (either a slice of incremental GC or an entire
   * non-incremental GC).
   *
   * Returns:
   *  * ResetIncremental if we "reset" an existing incremental GC, which would
   *    force us to run another cycle or
   *  * Ok otherwise.
   ','line_number':698,'multiline':True]
['text':'
   * Whether to immediately trigger a slice after a background task
   * finishes. This may not happen at a convenient time, so the consideration is
   * whether the slice will run quickly or may take a long time.
   ','line_number':841,'multiline':True]
['text':' Embedders can use this zone and group however they wish. ','line_number':880,'multiline':True]
['text':' All zones in the runtime, except the atoms zone.','line_number':883,'multiline':False]
['text':' The unique atoms zone.','line_number':890,'multiline':False]
['text':' Any activity affecting the heap.','line_number':894,'multiline':False]
['text':' Track total GC heap size for this runtime. ','line_number':911,'multiline':True]
['text':' GC scheduling state and parameters. ','line_number':914,'multiline':True]
['text':' Helper thread configuration.','line_number':918,'multiline':False]
['text':' State used for managing atom mark bitmaps in each zone.','line_number':923,'multiline':False]
['text':' When chunks are empty, they reside in the emptyChunks pool and are','line_number':927,'multiline':False]
['text':' re-used as needed or eventually expired if not re-used. The emptyChunks','line_number':928,'multiline':False]
['text':' pool gets refilled from the background allocation task heuristically so','line_number':929,'multiline':False]
['text':' that empty chunks should always be available for immediate allocation','line_number':930,'multiline':False]
['text':' without syscalls.','line_number':931,'multiline':False]
['text':' Chunks which have had some, but not all, of their arenas allocated live','line_number':934,'multiline':False]
['text':' in the available chunk lists. When all available arenas in a chunk have','line_number':935,'multiline':False]
['text':' been allocated, the chunk is removed from the available list and moved','line_number':936,'multiline':False]
['text':' to the fullChunks pool. During a GC, if all arenas are free, the chunk','line_number':937,'multiline':False]
['text':' is moved back to the emptyChunks pool and scheduled for eventual','line_number':938,'multiline':False]
['text':' release.','line_number':939,'multiline':False]
['text':' When all arenas in a chunk are used, it is moved to the fullChunks pool','line_number':942,'multiline':False]
['text':' so as to reduce the cost of operations on the available lists.','line_number':943,'multiline':False]
['text':' An incrementing id used to assign unique ids to cells that require one.','line_number':948,'multiline':False]
['text':'
   * Number of the committed arenas in all GC chunks including empty chunks.
   ','line_number':951,'multiline':True]
['text':'
   * The self hosting zone is collected once after initialization. We don't
   * allow allocation after this point and we don't collect it again.
   ','line_number':966,'multiline':True]
['text':' During shutdown, the GC needs to clean up every possible object. ','line_number':972,'multiline':True]
['text':' Gray marking must be done after all black marking is complete. However,','line_number':975,'multiline':False]
['text':' we do not have write barriers on XPConnect roots. Therefore, XPConnect','line_number':976,'multiline':False]
['text':' roots must be accumulated in the first slice of incremental GC. We','line_number':977,'multiline':False]
['text':' accumulate these roots in each zone's gcGrayRoots vector and then mark','line_number':978,'multiline':False]
['text':' them later, after black marking is complete for each compartment. This','line_number':979,'multiline':False]
['text':' accumulation can fail, but in that case we switch to non-incremental GC.','line_number':980,'multiline':False]
['text':' Clear each zone's gray buffers, but do not change the current state.','line_number':987,'multiline':False]
['text':' Reset the gray buffering state to Unused.','line_number':990,'multiline':False]
['text':'
   * The gray bits can become invalid if UnmarkGray overflows the stack. A
   * full GC will reset this bit, since it fills in all the gray bits.
   ','line_number':996,'multiline':True]
['text':' Perform full GC when we are able to collect the atoms zone. ','line_number':1005,'multiline':True]
['text':' Incremented at the start of every minor GC. ','line_number':1008,'multiline':True]
['text':' Incremented at the start of every major GC. ','line_number':1011,'multiline':True]
['text':' Incremented on every GC slice or minor collection. ','line_number':1014,'multiline':True]
['text':' Incremented on every GC slice. ','line_number':1017,'multiline':True]
['text':' Whether the currently running GC can finish in multiple slices. ','line_number':1020,'multiline':True]
['text':' Whether all zones are being collected in first GC slice. ','line_number':1023,'multiline':True]
['text':' Whether the heap will be compacted at the end of GC. ','line_number':1026,'multiline':True]
['text':' The invocation kind of the current GC, taken from the first slice. ','line_number':1029,'multiline':True]
['text':' The initial GC reason, taken from the first slice. ','line_number':1032,'multiline':True]
['text':'
   * The current incremental GC phase. This is also used internally in
   * non-incremental GC.
   ','line_number':1035,'multiline':True]
['text':' The incremental state at the start of this slice. ','line_number':1041,'multiline':True]
['text':' Whether to pay attention the zeal settings in this incremental slice. ','line_number':1044,'multiline':True]
['text':' Indicates that the last incremental slice exhausted the mark stack. ','line_number':1051,'multiline':True]
['text':' Whether it's currently safe to yield to the mutator in an incremental GC.','line_number':1054,'multiline':False]
['text':' Whether to do any marking caused by barriers on a background thread during','line_number':1057,'multiline':False]
['text':' incremental sweeping, while also sweeping zones which have finished','line_number':1058,'multiline':False]
['text':' marking.','line_number':1059,'multiline':False]
['text':' Whether any sweeping will take place in the separate GC helper thread. ','line_number':1062,'multiline':True]
['text':' Singly linked list of zones to be swept in the background. ','line_number':1065,'multiline':True]
['text':'
   * Whether to trigger a GC slice after a background task is complete, so that
   * the collector can continue or finsish collecting. This is only used for the
   * tasks that run concurrently with the mutator, which are background
   * finalization and background decommit.
   ','line_number':1068,'multiline':True]
['text':'
   * Free LIFO blocks are transferred to these allocators before being freed on
   * a background thread.
   ','line_number':1076,'multiline':True]
['text':' Index of current sweep group (for stats). ','line_number':1084,'multiline':True]
['text':'
   * Incremental sweep state.
   ','line_number':1087,'multiline':True]
['text':' During gray marking, delay AssertCellIsNotGray checks by','line_number':1103,'multiline':False]
['text':' recording the cell pointers here and checking after marking has','line_number':1104,'multiline':False]
['text':' finished.','line_number':1105,'multiline':False]
['text':'
   * Incremental compacting state.
   ','line_number':1113,'multiline':True]
['text':'
   * Default budget for incremental GC slice. See js/SliceBudget.h.
   *
   * JSGC_SLICE_TIME_BUDGET_MS
   * pref: javascript.options.mem.gc_incremental_slice_ms,
   ','line_number':1127,'multiline':True]
['text':'
   * We disable incremental GC if we encounter a Class with a trace hook
   * that does not implement write barriers.
   ','line_number':1135,'multiline':True]
['text':'
   * Whether compacting GC can is enabled globally.
   *
   * JSGC_COMPACTING_ENABLED
   * pref: javascript.options.mem.gc_compacting
   ','line_number':1141,'multiline':True]
['text':'
   * These options control the zealousness of the GC. At every allocation,
   * nextScheduled is decremented. When it reaches zero we do a full GC.
   *
   * At this point, if zeal_ is one of the types that trigger periodic
   * collection, then nextScheduled is reset to the value of zealFrequency.
   * Otherwise, no additional GCs take place.
   *
   * You can control these values in several ways:
   *   - Set the JS_GC_ZEAL environment variable
   *   - Call gczeal() or schedulegc() from inside shell-executed JS code
   *     (see the help for details)
   *
   * If gcZeal_ == 1 then we perform GCs in select places (during MaybeGC and
   * whenever we are notified that GC roots have been removed). This option is
   * mainly useful to embedders.
   *
   * We use zeal_ == 4 to enable write barrier verification. See the comment
   * in gc/Verifier.cpp for more information about this.
   *
   * zeal_ values from 8 to 10 periodically run different types of
   * incremental GC.
   *
   * zeal_ value 14 performs periodic shrinking collections.
   ','line_number':1151,'multiline':True]
['text':'
   * The trace operations to trace embedding-specific GC roots. One is for
   * tracing through black roots and the other is for tracing through gray
   * roots. The black/gray distinction is only relevant to the cycle
   * collector.
   ','line_number':1205,'multiline':True]
['text':' Always preserve JIT code during GCs, for testing. ','line_number':1214,'multiline':True]
['text':' Count of the number of zones that are currently in page load. ','line_number':1217,'multiline':True]
['text':' Synchronize GC heap access among GC helper threads and the main thread. ','line_number':1222,'multiline':True]
['text':'
   * During incremental sweeping, this field temporarily holds the arenas of
   * the current AllocKind being swept in order of increasing free space.
   ','line_number':1237,'multiline':True]
['text':' The store buffer used to track tenured to nursery edges for generational','line_number':1246,'multiline':False]
['text':' GC. This is accessed off main thread when sweeping WeakCaches.','line_number':1247,'multiline':False]
['text':' Prevent compartments and zones from being collected during iteration. ','line_number':1256,'multiline':True]
['text':' namespace gc ','line_number':1321,'multiline':True]
['text':' namespace js ','line_number':1322,'multiline':True]
