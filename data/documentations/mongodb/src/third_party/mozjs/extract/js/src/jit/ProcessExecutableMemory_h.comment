['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' vim: set ts=8 sts=2 et sw=2 tw=80: ','line_number':2,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':3,'multiline':True]
['text':' Limit on the number of bytes of executable memory to prevent JIT spraying','line_number':15,'multiline':False]
['text':' attacks.','line_number':16,'multiline':False]
['text':' This is the largest number which satisfies various alignment static','line_number':20,'multiline':False]
['text':' asserts that is <= INT32_MAX. The INT32_MAX limit is required for making a','line_number':21,'multiline':False]
['text':' single call to RtlInstallFunctionTableCallback(). (This limit could be','line_number':22,'multiline':False]
['text':' relaxed in the future by making multiple calls.)','line_number':23,'multiline':False]
['text':' Limit on the number of bytes of code memory per buffer.  This limit comes','line_number':27,'multiline':False]
['text':' about because we encode an unresolved relative unconditional branch during','line_number':28,'multiline':False]
['text':' assembly as a branch instruction that carries the absolute offset of the next','line_number':29,'multiline':False]
['text':' branch instruction in the chain of branches that all reference the same','line_number':30,'multiline':False]
['text':' unresolved label.  For this architecture to work, no branch instruction may','line_number':31,'multiline':False]
['text':' lie at an offset greater than the maximum forward branch distance.  This is','line_number':32,'multiline':False]
['text':' true on both ARM and ARM64.','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' Notably, even though we know that the offsets thus encoded are always','line_number':35,'multiline':False]
['text':' positive offsets, we use only the positive part of the signed range of the','line_number':36,'multiline':False]
['text':' branch offset.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' On ARM-32, we are limited by BOffImm::IsInRange(), which checks that the','line_number':39,'multiline':False]
['text':' offset is no greater than 2^25-4 in the offset's 26-bit signed field.','line_number':40,'multiline':False]
['text':'','line_number':41,'multiline':False]
['text':' On ARM-64, we are limited by Instruction::ImmBranchMaxForwardOffset(), which','line_number':42,'multiline':False]
['text':' checks that the offset is no greater than 2^27-4 in the offset's 28-bit','line_number':43,'multiline':False]
['text':' signed field.','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' On MIPS, there are no limitations because the assembler has to implement','line_number':46,'multiline':False]
['text':' jump chaining to be effective at all (jump offsets are quite small).','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' On x86 and x64, there are no limitations here because the assembler','line_number':49,'multiline':False]
['text':' MOZ_CRASHes if the 32-bit offset is exceeded.','line_number':50,'multiline':False]
['text':' Executable code is allocated in 64K chunks. ExecutableAllocator uses pools','line_number':60,'multiline':False]
['text':' that are at least this big. Code we allocate does not necessarily have 64K','line_number':61,'multiline':False]
['text':' alignment though.','line_number':62,'multiline':False]
['text':' Not readable, writable, or executable.','line_number':66,'multiline':False]
['text':'/ Whether the instruction cache must be flushed:','line_number':71,'multiline':False]
['text':'- No means no flushing will happen.','line_number':72,'multiline':False]
['text':'- LocalThreadOnly means only the local thread's icache will be flushed.','line_number':73,'multiline':False]
['text':'- AllThreads means all the threads' icaches will be flushed; this must be used','line_number':74,'multiline':False]
['text':' when the compiling thread and the executing thread might be different.','line_number':75,'multiline':False]
['text':' Functions called at process start-up/shutdown to initialize/release the','line_number':85,'multiline':False]
['text':' executable memory region.','line_number':86,'multiline':False]
['text':' Allocate/deallocate executable pages.','line_number':90,'multiline':False]
['text':' Returns true if we can allocate a few more MB of executable code without','line_number':96,'multiline':False]
['text':' hitting our code limit. This function can be used to stop compiling things','line_number':97,'multiline':False]
['text':' that are optional (like Baseline and Ion code) when we're about to reach the','line_number':98,'multiline':False]
['text':' limit, so we are less likely to OOM or crash. Note that the limit is','line_number':99,'multiline':False]
['text':' per-process, so other threads can also allocate code after we call this','line_number':100,'multiline':False]
['text':' function.','line_number':101,'multiline':False]
['text':' Returns a rough guess of how much executable memory remains available,','line_number':104,'multiline':False]
['text':' rounded down to MB limit.  Note this can fluctuate as other threads within','line_number':105,'multiline':False]
['text':' the process allocate executable memory.','line_number':106,'multiline':False]
['text':' Returns whether |p| is stored in the executable code buffer.','line_number':109,'multiline':False]
['text':' namespace jit','line_number':112,'multiline':False]
['text':' namespace js','line_number':113,'multiline':False]
['text':' jit_ProcessExecutableMemory_h','line_number':115,'multiline':False]
