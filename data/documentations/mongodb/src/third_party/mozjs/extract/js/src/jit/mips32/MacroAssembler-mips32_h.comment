['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' See documentation for ScratchTagScope and ScratchTagScopeRelease in','line_number':45,'multiline':False]
['text':' MacroAssembler-x64.h.','line_number':46,'multiline':False]
['text':' load','line_number':83,'multiline':False]
['text':' store','line_number':87,'multiline':False]
['text':' arithmetic based ops','line_number':91,'multiline':False]
['text':' add','line_number':92,'multiline':False]
['text':' subtract','line_number':118,'multiline':False]
['text':' memory','line_number':138,'multiline':False]
['text':' shortcut for when we know we're transferring 32 bits of data','line_number':139,'multiline':False]
['text':' branches when done from within mips-specific code','line_number':150,'multiline':False]
['text':' fp instructions','line_number':175,'multiline':False]
['text':' These fuctions abstract the access to high part of the double precision','line_number':213,'multiline':False]
['text':' float register. It is intended to work on both 32 bit and 64 bit','line_number':214,'multiline':False]
['text':' floating point coprocessor.','line_number':215,'multiline':False]
['text':' :TODO: (Bug 985881) Modify this for N32 ABI to use mthc1 and mfhc1','line_number':216,'multiline':False]
['text':' Emit a branch that can be toggled to a non-operation. On MIPS we use','line_number':309,'multiline':False]
['text':' "andi" instruction to toggle the branch.','line_number':310,'multiline':False]
['text':' See ToggleToJmp(), ToggleToCmp().','line_number':311,'multiline':False]
['text':' Emit a "jalr" or "nop" instruction. ToggleCall can be used to patch','line_number':314,'multiline':False]
['text':' this instruction.','line_number':315,'multiline':False]
['text':' Four instructions used in: MacroAssemblerMIPSCompat::toggledCall','line_number':319,'multiline':False]
['text':' unboxing code','line_number':371,'multiline':False]
['text':' boxing code','line_number':405,'multiline':False]
['text':' Extended unboxing API. If the payload is already in a register, returns','line_number':409,'multiline':False]
['text':' that register. Otherwise, provides a move to the given scratch register,','line_number':410,'multiline':False]
['text':' and returns that.','line_number':411,'multiline':False]
['text':' higher level tag testing code','line_number':459,'multiline':False]
['text':' Either one or both of the source registers could be the same as a','line_number':521,'multiline':False]
['text':' destination register.','line_number':522,'multiline':False]
['text':' If both are, this is just a swap of two registers.','line_number':525,'multiline':False]
['text':' If only one is, copy that source first.','line_number':533,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':617,'multiline':False]
['text':' Common interface.','line_number':618,'multiline':False]
['text':'///////////////////////////////////////////////////////////////','line_number':619,'multiline':False]
['text':' The following functions are exposed for use in platform-shared code.','line_number':621,'multiline':False]
['text':' NOTE: This will use second scratch on MIPS. Only ARM needs the','line_number':717,'multiline':False]
['text':' implementation without second scratch.','line_number':718,'multiline':False]
['text':' If source is a double, load it into dest. If source is int32,','line_number':784,'multiline':False]
['text':' convert it to double. Else, branch to failure.','line_number':785,'multiline':False]
['text':' Instrumentation for entering and leaving the profiler.','line_number':831,'multiline':False]
['text':' namespace jit','line_number':838,'multiline':False]
['text':' namespace js','line_number':839,'multiline':False]
['text':' jit_mips32_MacroAssembler_mips32_h ','line_number':841,'multiline':True]
