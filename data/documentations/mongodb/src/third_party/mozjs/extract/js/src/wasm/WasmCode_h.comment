['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2016 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' LinkData contains all the metadata necessary to patch all the locations','line_number':41,'multiline':False]
['text':' that depend on the absolute address of a ModuleSegment. This happens in a','line_number':42,'multiline':False]
['text':' "linking" step after compilation and after the module's code is serialized.','line_number':43,'multiline':False]
['text':' The LinkData is serialized along with the Module but does not (normally, see','line_number':44,'multiline':False]
['text':' Module::debugLinkData_ comment) persist after (de)serialization, which','line_number':45,'multiline':False]
['text':' distinguishes it from Metadata, which is stored in the Code object.','line_number':46,'multiline':False]
['text':' Executable code must be deallocated specially.','line_number':84,'multiline':False]
['text':' CodeSegment contains common helpers for determining the base and length of a','line_number':100,'multiline':False]
['text':' code segment and if a pc belongs to this segment. It is inherited by:','line_number':101,'multiline':False]
['text':' - ModuleSegment, i.e. the code segment of a Module, generated','line_number':102,'multiline':False]
['text':' eagerly when a Module is instanciated.','line_number':103,'multiline':False]
['text':' - LazyStubSegment, i.e. the code segment of entry stubs that are lazily','line_number':104,'multiline':False]
['text':' generated.','line_number':105,'multiline':False]
['text':' A wasm ModuleSegment owns the allocated executable code for a wasm module.','line_number':163,'multiline':False]
['text':' Pointers to stubs to which PC is redirected from the signal-handler.','line_number':188,'multiline':False]
['text':' Structured clone support:','line_number':192,'multiline':False]
['text':' A FuncExport represents a single function definition inside a wasm Module','line_number':206,'multiline':False]
['text':' that has been exported one or more times. A FuncExport represents an','line_number':207,'multiline':False]
['text':' internal entry point that can be called via function definition index by','line_number':208,'multiline':False]
['text':' Instance::callExport(). To allow O(log(n)) lookup of a FuncExport by','line_number':209,'multiline':False]
['text':' function definition index, the FuncExportVector is stored sorted by','line_number':210,'multiline':False]
['text':' function definition index.','line_number':211,'multiline':False]
['text':' Machine code offset','line_number':217,'multiline':False]
['text':' An FuncImport contains the runtime metadata needed to implement a call to an','line_number':257,'multiline':False]
['text':' imported function. Each function import has two call stubs: an optimized path','line_number':258,'multiline':False]
['text':' into JIT code and a slow path into the generic C++ js::Invoke and these','line_number':259,'multiline':False]
['text':' offsets of these stubs are stored so that function-import callsites can be','line_number':260,'multiline':False]
['text':' dynamically patched at runtime.','line_number':261,'multiline':False]
['text':' Machine code offset','line_number':267,'multiline':False]
['text':' Machine code offset','line_number':268,'multiline':False]
['text':' Metadata holds all the data that is needed to describe compiled wasm code','line_number':307,'multiline':False]
['text':' at runtime (as opposed to data that is only used to statically link or','line_number':308,'multiline':False]
['text':' instantiate a module).','line_number':309,'multiline':False]
['text':'','line_number':310,'multiline':False]
['text':' Metadata is built incrementally by ModuleGenerator and then shared immutably','line_number':311,'multiline':False]
['text':' between modules.','line_number':312,'multiline':False]
['text':'','line_number':313,'multiline':False]
['text':' The Metadata structure is split into tier-invariant and tier-variant parts;','line_number':314,'multiline':False]
['text':' the former points to instances of the latter.  Additionally, the asm.js','line_number':315,'multiline':False]
['text':' subsystem subclasses the Metadata, adding more tier-invariant data, some of','line_number':316,'multiline':False]
['text':' which is serialized.  See AsmJS.cpp.','line_number':317,'multiline':False]
['text':' namePayload points at the name section's CustomSection::payload so that','line_number':351,'multiline':False]
['text':' the Names (which are use payload-relative offsets) can be used','line_number':352,'multiline':False]
['text':' independently of the Module without duplicating the name section.','line_number':353,'multiline':False]
['text':' Debug-enabled code is not serialized.','line_number':358,'multiline':False]
['text':' Invariant: The result of getFuncResultType can only be used as long as','line_number':376,'multiline':False]
['text':' MetaData is live, because the returned ResultType may encode a pointer to','line_number':377,'multiline':False]
['text':' debugFuncReturnTypes.','line_number':378,'multiline':False]
['text':' AsmJSMetadata derives Metadata iff isAsmJS(). Mostly this distinction is','line_number':383,'multiline':False]
['text':' encapsulated within AsmJS.cpp, but the additional virtual functions allow','line_number':384,'multiline':False]
['text':' asm.js to override wasm behavior in the handful of cases that can't be','line_number':385,'multiline':False]
['text':' easily encapsulated by AsmJS.cpp.','line_number':386,'multiline':False]
['text':' The Developer-Facing Display Conventions section of the WebAssembly Web','line_number':397,'multiline':False]
['text':' API spec defines two cases for displaying a wasm function name:','line_number':398,'multiline':False]
['text':'  1. the function name stands alone','line_number':399,'multiline':False]
['text':'  2. the function name precedes the location','line_number':400,'multiline':False]
['text':' Debug information, not serialized.','line_number':436,'multiline':False]
['text':' LazyStubSegment is a code segment lazily generated for function entry stubs','line_number':455,'multiline':False]
['text':' (both interpreter and jit ones).','line_number':456,'multiline':False]
['text':'','line_number':457,'multiline':False]
['text':' Because a stub is usually small (a few KiB) and an executable code segment','line_number':458,'multiline':False]
['text':' isn't (64KiB), a given stub segment can contain entry stubs of many','line_number':459,'multiline':False]
['text':' functions.','line_number':460,'multiline':False]
['text':' LazyFuncExport helps to efficiently lookup a CodeRange from a given function','line_number':495,'multiline':False]
['text':' index. It is inserted in a vector sorted by function index, to perform','line_number':496,'multiline':False]
['text':' binary search on it later.','line_number':497,'multiline':False]
['text':' LazyStubTier contains all the necessary information for lazy function entry','line_number':512,'multiline':False]
['text':' stubs that are generated at runtime. None of its data is ever serialized.','line_number':513,'multiline':False]
['text':'','line_number':514,'multiline':False]
['text':' It must be protected by a lock, because the main thread can both read and','line_number':515,'multiline':False]
['text':' write lazy stubs at any time while a background thread can regenerate lazy','line_number':516,'multiline':False]
['text':' stubs for tier2 at any time.','line_number':517,'multiline':False]
['text':' Returns a pointer to the raw interpreter entry of a given function which','line_number':534,'multiline':False]
['text':' stubs have been lazily generated.','line_number':535,'multiline':False]
['text':' Creates one lazy stub for the exported function, for which the jit entry','line_number':538,'multiline':False]
['text':' will be set to the lazily-generated one.','line_number':539,'multiline':False]
['text':' Create one lazy stub for all the functions in funcExportIndices, putting','line_number':542,'multiline':False]
['text':' them in a single stub. Jit entries won't be used until','line_number':543,'multiline':False]
['text':' setJitEntries() is actually called, after the Code owner has committed','line_number':544,'multiline':False]
['text':' tier2.','line_number':545,'multiline':False]
['text':' CodeTier contains all the data related to a given compilation tier. It is','line_number':554,'multiline':False]
['text':' built during module generation and then immutably stored in a Code.','line_number':555,'multiline':False]
['text':' Serialized information.','line_number':563,'multiline':False]
['text':' Lazy stubs, not serialized.','line_number':567,'multiline':False]
['text':' Jump tables that implement function tiering and fast js-to-wasm calls.','line_number':612,'multiline':False]
['text':'','line_number':613,'multiline':False]
['text':' There is one JumpTable object per Code object, holding two jump tables: the','line_number':614,'multiline':False]
['text':' tiering jump table and the jit-entry jump table.  The JumpTable is not','line_number':615,'multiline':False]
['text':' serialized with its Code, but is a run-time entity only.  At run-time it is','line_number':616,'multiline':False]
['text':' shared across threads with its owning Code (and the Module that owns the','line_number':617,'multiline':False]
['text':' Code).  Values in the JumpTable /must/ /always/ be JSContext-agnostic and','line_number':618,'multiline':False]
['text':' Instance-agnostic, because of this sharing.','line_number':619,'multiline':False]
['text':'','line_number':620,'multiline':False]
['text':' Both jump tables have a number of entries equal to the number of functions in','line_number':621,'multiline':False]
['text':' their Module, including imports.  In the tiering table, the elements','line_number':622,'multiline':False]
['text':' corresponding to the Module's imported functions are unused; in the jit-entry','line_number':623,'multiline':False]
['text':' table, the elements corresponding to the Module's non-exported functions are','line_number':624,'multiline':False]
['text':' unused.  (Functions can be exported explicitly via the exports section or','line_number':625,'multiline':False]
['text':' implicitly via a mention of their indices outside function bodies.)  See','line_number':626,'multiline':False]
['text':' comments at JumpTables::init() and WasmInstanceObject::getExportedFunction().','line_number':627,'multiline':False]
['text':' The entries are void*.  Unused entries are null.','line_number':628,'multiline':False]
['text':'','line_number':629,'multiline':False]
['text':' The tiering jump table.','line_number':630,'multiline':False]
['text':'','line_number':631,'multiline':False]
['text':' This table holds code pointers that are used by baseline functions to enter','line_number':632,'multiline':False]
['text':' optimized code.  See the large comment block in WasmCompile.cpp for','line_number':633,'multiline':False]
['text':' information about how tiering works.','line_number':634,'multiline':False]
['text':'','line_number':635,'multiline':False]
['text':' The jit-entry jump table.','line_number':636,'multiline':False]
['text':'','line_number':637,'multiline':False]
['text':' The jit-entry jump table entry for a function holds a stub that allows Jitted','line_number':638,'multiline':False]
['text':' JS code to call wasm using the JS JIT ABI.  See large comment block at','line_number':639,'multiline':False]
['text':' WasmInstanceObject::getExportedFunction() for more about exported functions','line_number':640,'multiline':False]
['text':' and stubs and the lifecycle of the entries in the jit-entry table - there are','line_number':641,'multiline':False]
['text':' complex invariants.','line_number':642,'multiline':False]
['text':' Make sure that write is atomic; see comment in wasm::Module::finishTier2','line_number':657,'multiline':False]
['text':' to that effect.','line_number':658,'multiline':False]
['text':' See comment in wasm::Module::finishTier2.','line_number':676,'multiline':False]
['text':' 2 words per function for the jit entry table, plus maybe 1 per','line_number':684,'multiline':False]
['text':' function if we're tiering.','line_number':685,'multiline':False]
['text':' Code objects own executable code and the metadata that describe it. A single','line_number':690,'multiline':False]
['text':' Code object is normally shared between a module and all its instances.','line_number':691,'multiline':False]
['text':'','line_number':692,'multiline':False]
['text':' profilingLabels_ is lazily initialized, but behind a lock.','line_number':693,'multiline':False]
['text':' Access only when hasTier2() is true','line_number':700,'multiline':False]
['text':' This is stable during a run','line_number':736,'multiline':False]
['text':' This may transition from Baseline -> Ion at any time','line_number':738,'multiline':False]
['text':' Metadata lookup functions:','line_number':750,'multiline':False]
['text':' To save memory, profilingLabels_ are generated lazily when profiling mode','line_number':761,'multiline':False]
['text':' is enabled.','line_number':762,'multiline':False]
['text':' Wasm disassembly support','line_number':767,'multiline':False]
['text':' about:memory reporting:','line_number':772,'multiline':False]
['text':' A Code object is serialized as the length and bytes of the machine code','line_number':779,'multiline':False]
['text':' after statically unlinking it; the Code is then later recreated from the','line_number':780,'multiline':False]
['text':' machine code and other parts.','line_number':781,'multiline':False]
['text':' namespace wasm','line_number':792,'multiline':False]
['text':' namespace js','line_number':793,'multiline':False]
['text':' wasm_code_h','line_number':795,'multiline':False]
