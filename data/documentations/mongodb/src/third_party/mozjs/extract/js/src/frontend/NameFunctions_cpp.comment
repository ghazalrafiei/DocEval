['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' ParserAtomsTable','line_number':16,'multiline':False]
['text':' Number of nodes in the parents array.','line_number':35,'multiline':False]
['text':' Stack of ParseNodes from the root to the current node.','line_number':38,'multiline':False]
['text':' Only elements 0..nparents_ are initialized.','line_number':39,'multiline':False]
['text':' When naming a function, the buffer where the name is built.','line_number':43,'multiline':False]
['text':' When we are not under resolveFun, buf_ is empty.','line_number':44,'multiline':False]
['text':' Test whether a ParseNode represents a function invocation ','line_number':47,'multiline':True]
['text':'
   * Append a reference to a property named |name| to |buf_|. If |name| is
   * a proper identifier name, then we append '.name'; otherwise, we
   * append '["name"]'.
   *
   * Note that we need the IsIdentifier check for atoms from both
   * ParseNodeKind::Name nodes and ParseNodeKind::String nodes:
   * given code like a["b c"], the front end will produce a ParseNodeKind::Dot
   * with a ParseNodeKind::Name child whose name contains spaces.
   ','line_number':52,'multiline':True]
['text':' Quote the string as needed. ','line_number':67,'multiline':True]
['text':' Append a number to buf_. ','line_number':73,'multiline':True]
['text':' Append "[<n>]" to buf_, referencing a property named by a numeric literal.','line_number':80,'multiline':False]
['text':'
   * Walk over the given ParseNode, attempting to convert it to a stringified
   * name that respresents where the function is being assigned to.
   *
   * |*foundName| is set to true if a name is found for the expression.
   ','line_number':85,'multiline':True]
['text':' We're confused as to what to call this function.','line_number':136,'multiline':False]
['text':'
   * When naming an anonymous function, the process works loosely by walking
   * up the AST and then translating that to a string. The stringification
   * happens from some far-up assignment and then going back down the parse
   * tree to the function definition point.
   *
   * This function will walk up the parse tree, gathering relevant nodes used
   * for naming, and return the assignment node if there is one. The provided
   * array and size will be filled in, and the returned node could be nullptr
   * if no assignment is found. The first element of the array will be the
   * innermost node relevant to naming, and the last element will be the
   * outermost node.
   ','line_number':142,'multiline':True]
['text':' found the initialized declaration','line_number':170,'multiline':False]
['text':' setting a property of 'this'','line_number':172,'multiline':False]
['text':' won't find an assignment or declaration','line_number':174,'multiline':False]
['text':' Normally the relevant parent of a node is its direct parent, but','line_number':177,'multiline':False]
['text':' sometimes with code like:','line_number':178,'multiline':False]
['text':'','line_number':179,'multiline':False]
['text':'    var foo = (function() { return function() {}; })();','line_number':180,'multiline':False]
['text':'','line_number':181,'multiline':False]
['text':' the outer function is just a helper to create a scope for the','line_number':182,'multiline':False]
['text':' returned function. Hence the name of the returned function should','line_number':183,'multiline':False]
['text':' actually be 'foo'.  This loop sees if the current node is a','line_number':184,'multiline':False]
['text':' ParseNodeKind::Return, and if there is a direct function','line_number':185,'multiline':False]
['text':' call we skip to that.','line_number':186,'multiline':False]
['text':' Don't skip too high in the tree.','line_number':193,'multiline':False]
['text':' Record the ParseNodeKind::PropertyDefinition/Shorthand but skip the','line_number':202,'multiline':False]
['text':' ParseNodeKind::Object so we're not flagged as a contributor.','line_number':203,'multiline':False]
['text':' Save any other nodes we encounter on the way up.','line_number':208,'multiline':False]
['text':'
   * Resolve the name of a function. If the function already has a name
   * listed, then it is skipped. Otherwise an intelligent name is guessed to
   * assign to the function's displayAtom field.
   ','line_number':218,'multiline':True]
['text':' If the function already has a name, use that.','line_number':234,'multiline':False]
['text':' If a prefix is specified, then it is a form of namespace.','line_number':248,'multiline':False]
['text':' Gather all nodes relevant to naming.','line_number':255,'multiline':False]
['text':' If the function is assigned to something, then that is very relevant.','line_number':260,'multiline':False]
['text':' Other than the actual assignment, other relevant nodes to naming are','line_number':274,'multiline':False]
['text':' those in object initializers and then particular nodes marking a','line_number':275,'multiline':False]
['text':' contribution.','line_number':276,'multiline':False]
['text':' Don't have consecutive '<' characters, and also don't start','line_number':298,'multiline':False]
['text':' with a '<' character.','line_number':299,'multiline':False]
['text':' functions which are "genuinely anonymous" but are contained in some','line_number':307,'multiline':False]
['text':' other namespace are rather considered as "contributing" to the outer','line_number':308,'multiline':False]
['text':' function, so give them a contribution symbol here.','line_number':309,'multiline':False]
['text':' Skip assigning the guessed name if the function has a (dynamically)','line_number':324,'multiline':False]
['text':' computed inferred name.','line_number':325,'multiline':False]
['text':'
   * Tests whether parents_[pos] is a function call whose callee is cur.
   * This is the case for functions which do things like simply create a scope
   * for new variables and then return an anonymous function using this scope.
   ','line_number':332,'multiline':True]
['text':' If a function looks like (function(){})() where the parent node','line_number':350,'multiline':False]
['text':' of the definition of the function is a call, then it shouldn't','line_number':351,'multiline':False]
['text':' contribute anything to the namespace, so don't bother updating','line_number':352,'multiline':False]
['text':' the prefix to whatever was returned.','line_number':353,'multiline':False]
['text':' Skip this type of node. It never contains functions.','line_number':364,'multiline':False]
['text':' This node only contains internal strings or undefined and an array -- no','line_number':366,'multiline':False]
['text':' user-controlled expressions.','line_number':367,'multiline':False]
['text':' Skip walking the list of string parts, which never contains functions.','line_number':371,'multiline':False]
['text':' The leading expression, e.g. |tag| in |tag`foo`|,','line_number':375,'multiline':False]
['text':' that might contain functions.','line_number':376,'multiline':False]
['text':' The callsite object node is first.  This node only contains','line_number':381,'multiline':False]
['text':' internal strings or undefined and an array -- no user-controlled','line_number':382,'multiline':False]
['text':' expressions.','line_number':383,'multiline':False]
['text':' Next come any interpolated expressions in the tagged template.','line_number':400,'multiline':False]
['text':' Speed hack: this type of node can't contain functions, so skip walking it.','line_number':412,'multiline':False]
['text':' Import/export spec lists contain import/export specs containing only','line_number':414,'multiline':False]
['text':' pairs of names or strings. Alternatively, an export spec list may','line_number':415,'multiline':False]
['text':' contain a single export batch specifier.','line_number':416,'multiline':False]
['text':'
   * Resolve names for all anonymous functions in the given ParseNode tree.
   ','line_number':461,'multiline':True]
['text':' Push pn to the parse node stack.','line_number':465,'multiline':False]
['text':' Silently skip very deeply nested functions.','line_number':467,'multiline':False]
['text':' Pop pn from the parse node stack.','line_number':476,'multiline':False]
['text':' anonymous namespace ','line_number':488,'multiline':True]
