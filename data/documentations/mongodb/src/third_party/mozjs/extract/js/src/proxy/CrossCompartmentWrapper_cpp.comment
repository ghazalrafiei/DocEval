['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::IsWindow, js::IsWindowProxy','line_number':8,'multiline':False]
['text':' Usually the receiver is the wrapper and we can just unwrap it. If the','line_number':150,'multiline':False]
['text':' wrapped object is also a wrapper, things are more complicated and we','line_number':151,'multiline':False]
['text':' fall back to the slow path (it calls UncheckedUnwrap to unwrap all','line_number':152,'multiline':False]
['text':' wrappers).','line_number':153,'multiline':False]
['text':' Handle |this| specially. When we rewrap on the other side of the','line_number':283,'multiline':False]
['text':' membrane, we might apply a same-compartment security wrapper that','line_number':284,'multiline':False]
['text':' will stymie this whole process. If that happens, unwrap the wrapper.','line_number':285,'multiline':False]
['text':' This logic can go away when same-compartment security wrappers go away.','line_number':286,'multiline':False]
['text':' Get an equivalent RegExpShared associated with the current compartment.','line_number':350,'multiline':False]
['text':' Returns true iff all realms in the compartment have been nuked.','line_number':386,'multiline':False]
['text':'
 * NukeChromeCrossCompartmentWrappersForGlobal reaches into chrome and cuts
 * all of the cross-compartment wrappers that point to an object in the |target|
 * realm. The snag here is that we need to avoid cutting wrappers that point to
 * the window object on page navigation (inner window destruction) and only do
 * that on tab close (outer window destruction).  Thus the option of how to
 * handle the global object.
 ','line_number':396,'multiline':True]
['text':' If we're nuking all wrappers into the target realm, prevent us from','line_number':411,'multiline':False]
['text':' creating new wrappers for it in the future.','line_number':412,'multiline':False]
['text':' If the realm matches both the source and target filter, we may want to','line_number':422,'multiline':False]
['text':' cut outgoing wrappers too, if we nuked all realms in the compartment.','line_number':423,'multiline':False]
['text':' Iterate only the wrappers that have target compartment matched unless','line_number':428,'multiline':False]
['text':' |nukeAll| is true. Use Maybe to avoid copying from conditionally','line_number':429,'multiline':False]
['text':' initializing ObjectWrapperEnum.','line_number':430,'multiline':False]
['text':' Unwrap from the wrapped object in key instead of the wrapper, this','line_number':443,'multiline':False]
['text':' could save us a bit of time.','line_number':444,'multiline':False]
['text':' Don't nuke wrappers for objects in other realms in the target','line_number':447,'multiline':False]
['text':' compartment unless nukeAll is set because in that case we want to nuke','line_number':448,'multiline':False]
['text':' all outgoing wrappers for the current compartment.','line_number':449,'multiline':False]
['text':' We never nuke ScriptSourceObjects, since they are only ever used','line_number':454,'multiline':False]
['text':' internally by the JS engine, and are expected to remain valid','line_number':455,'multiline':False]
['text':' throughout a script's lifetime.','line_number':456,'multiline':False]
['text':' We only skip nuking window references that point to a target','line_number':461,'multiline':False]
['text':' compartment, not the ones that belong to it.','line_number':462,'multiline':False]
['text':' Now this is the wrapper we want to nuke.','line_number':468,'multiline':False]
['text':' Disallow creating new wrappers if we nuked the object realm or target','line_number':478,'multiline':False]
['text':' compartment. However, we always need to provide live wrappers for','line_number':479,'multiline':False]
['text':' ScriptSourceObjects, since they're used for cross-compartment cloned','line_number':480,'multiline':False]
['text':' scripts, and need to remain accessible even after the original realm has','line_number':481,'multiline':False]
['text':' been nuked.','line_number':482,'multiline':False]
['text':' Given a cross-compartment wrapper |wobj|, update it to point to','line_number':502,'multiline':False]
['text':' |newTarget|. This recomputes the wrapper with JS_WrapValue, and thus can be','line_number':503,'multiline':False]
['text':' useful even if wrapper already points to newTarget.','line_number':504,'multiline':False]
['text':' This operation crashes on failure rather than leaving the heap in an','line_number':505,'multiline':False]
['text':' inconsistent state.','line_number':506,'multiline':False]
['text':' If we're mapping to a different target (as opposed to just recomputing','line_number':523,'multiline':False]
['text':' for the same target), we must not have an existing wrapper for the new','line_number':524,'multiline':False]
['text':' target, otherwise this will break.','line_number':525,'multiline':False]
['text':' The old value should still be in the cross-compartment wrapper map, and','line_number':529,'multiline':False]
['text':' the lookup should return wobj.','line_number':530,'multiline':False]
['text':' When we remove origv from the wrapper map, its wrapper, wobj, must','line_number':535,'multiline':False]
['text':' immediately cease to be a cross-compartment wrapper. Nuke it.','line_number':536,'multiline':False]
['text':' If the target is a dead wrapper, and we're just fixing wrappers for','line_number':539,'multiline':False]
['text':' it, then we're done now that the CCW is a dead wrapper.','line_number':540,'multiline':False]
['text':' Given a dead proxy object |wobj|, turn it into a cross-compartment wrapper','line_number':549,'multiline':False]
['text':' pointing at |newTarget|.','line_number':550,'multiline':False]
['text':' This operation crashes on failure rather than leaving the heap in an','line_number':551,'multiline':False]
['text':' inconsistent state.','line_number':552,'multiline':False]
['text':' wobj is not a cross-compartment wrapper, so we can use nonCCWRealm.','line_number':560,'multiline':False]
['text':' First, we wrap it in the new compartment. We try to use the existing','line_number':563,'multiline':False]
['text':' wrapper, |wobj|, since it's been nuked anyway. The rewrap() function has','line_number':564,'multiline':False]
['text':' the choice to reuse |wobj| or not.','line_number':565,'multiline':False]
['text':' If rewrap() reused |wobj|, it will have overwritten it and returned with','line_number':574,'multiline':False]
['text':' |tobj == wobj|. Otherwise, |tobj| will point to a new wrapper and |wobj|','line_number':575,'multiline':False]
['text':' will still be nuked. In the latter case, we replace |wobj| with the','line_number':576,'multiline':False]
['text':' contents of the new wrapper in |tobj|.','line_number':577,'multiline':False]
['text':' Now, because we need to maintain object identity, we do a brain','line_number':579,'multiline':False]
['text':' transplant on the old object so that it contains the contents of the','line_number':580,'multiline':False]
['text':' new one.','line_number':581,'multiline':False]
['text':' Before swapping, this wrapper came out of rewrap(), which enforces the','line_number':590,'multiline':False]
['text':' invariant that the wrapper in the map points directly to the key.','line_number':591,'multiline':False]
['text':' Update the incremental weakmap marking state.','line_number':594,'multiline':False]
['text':' Update the entry in the compartment's wrapper map to point to the old','line_number':597,'multiline':False]
['text':' wrapper, which has now been updated (via reuse or swap).','line_number':598,'multiline':False]
['text':' Remap all cross-compartment wrappers pointing to |oldTarget| to point to','line_number':604,'multiline':False]
['text':' |newTarget|. All wrappers are recomputed.','line_number':605,'multiline':False]
['text':' We found a wrapper. Remember and root it.','line_number':616,'multiline':False]
['text':' Filter by source compartment.','line_number':637,'multiline':False]
['text':' Iterate over object wrappers, filtering appropriately.','line_number':648,'multiline':False]
['text':' Add the wrapper to the list.','line_number':651,'multiline':False]
['text':' Recompute all the wrappers in the list.','line_number':658,'multiline':False]
