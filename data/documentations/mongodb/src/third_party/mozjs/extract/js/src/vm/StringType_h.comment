['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' std::is_same','line_number':15,'multiline':False]
['text':' js::Bit','line_number':18,'multiline':False]
['text':' JS::shadow::String','line_number':29,'multiline':False]
['text':' JS::MaxStringLength','line_number':30,'multiline':False]
['text':' namespace JS','line_number':45,'multiline':False]
['text':' namespace frontend','line_number':56,'multiline':False]
['text':' The buffer length required to contain any unsigned 32-bit integer. ','line_number':61,'multiline':True]
['text':' Maximum array index. This value is defined in the spec (ES2021 draft, 6.1.7):','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':'   An array index is an integer index whose numeric value i is in the range','line_number':66,'multiline':False]
['text':'   +0ùîΩ ‚â§ i < ùîΩ(2^32 - 1).','line_number':67,'multiline':False]
['text':' 2^32-2 (= UINT32_MAX-1)','line_number':68,'multiline':False]
['text':' Returns true if the characters of `s` store an unsigned 32-bit integer value','line_number':70,'multiline':False]
['text':' less than or equal to MAX_ARRAY_INDEX, initializing `*indexp` to that value','line_number':71,'multiline':False]
['text':' if so. Leading '0' isn't allowed except 0 itself.','line_number':72,'multiline':False]
['text':' namespace js ','line_number':76,'multiline':True]
['text':' clang-format off','line_number':78,'multiline':False]
['text':'
 * [SMDOC] JavaScript Strings
 *
 * Conceptually, a JS string is just an array of chars and a length. This array
 * of chars may or may not be null-terminated and, if it is, the null character
 * is not included in the length.
 *
 * To improve performance of common operations, the following optimizations are
 * made which affect the engine's representation of strings:
 *
 *  - The plain vanilla representation is a "linear" string which consists of a
 *    string header in the GC heap and a malloc'd char array.
 *
 *  - To avoid copying a substring of an existing "base" string , a "dependent"
 *    string (JSDependentString) can be created which points into the base
 *    string's char array.
 *
 *  - To avoid O(n^2) char buffer copying, a "rope" node (JSRope) can be created
 *    to represent a delayed string concatenation. Concatenation (called
 *    flattening) is performed if and when a linear char array is requested. In
 *    general, ropes form a binary dag whose internal nodes are JSRope string
 *    headers with no associated char array and whose leaf nodes are linear
 *    strings.
 *
 *  - To avoid copying the leftmost string when flattening, we may produce an
 *    "extensible" string, which tracks not only its actual length but also its
 *    buffer's overall size. If such an "extensible" string appears as the
 *    leftmost string in a subsequent flatten, and its buffer has enough unused
 *    space, we can simply flatten the rest of the ropes into its buffer,
 *    leaving its text in place. We then transfer ownership of its buffer to the
 *    flattened rope, and mutate the donor extensible string into a dependent
 *    string referencing its original buffer.
 *
 *    (The term "extensible" does not imply that we ever 'realloc' the buffer.
 *    Extensible strings may have dependent strings pointing into them, and the
 *    JSAPI hands out pointers to linear strings' buffers, so resizing with
 *    'realloc' is generally not possible.)
 *
 *  - To avoid allocating small char arrays, short strings can be stored inline
 *    in the string header (JSInlineString). These come in two flavours:
 *    JSThinInlineString, which is the same size as JSString; and
 *    JSFatInlineString, which has a larger header and so can fit more chars.
 *
 *  - To avoid comparing O(n) string equality comparison, strings can be
 *    canonicalized to "atoms" (JSAtom) such that there is a single atom with a
 *    given (length,chars).
 *
 *  - To avoid copying all strings created through the JSAPI, an "external"
 *    string (JSExternalString) can be created whose chars are managed by the
 *    JSAPI client.
 *
 *  - To avoid using two bytes per character for every string, string
 *    characters are stored as Latin1 instead of TwoByte if all characters are
 *    representable in Latin1.
 *
 *  - To avoid slow conversions from strings to integer indexes, we cache 16 bit
 *    unsigned indexes on strings representing such numbers.
 *
 * Although all strings share the same basic memory layout, we can conceptually
 * arrange them into a hierarchy of operations/invariants and represent this
 * hierarchy in C++ with classes:
 *
 * C++ type                     operations+fields / invariants+properties
 * ==========================   =========================================
 * JSString (abstract)          get(Latin1|TwoByte)CharsZ, get(Latin1|TwoByte)Chars, length / -
 *  | \
 *  | JSRope                    leftChild, rightChild / -
 *  |
 * JSLinearString (abstract)    latin1Chars, twoByteChars / -
 *  |
 *  +-- JSDependentString       base / -
 *  |
 *  +-- JSExternalString        - / char array memory managed by embedding
 *  |
 *  +-- JSExtensibleString      tracks total buffer capacity (including current text)
 *  |
 *  +-- JSInlineString (abstract) - / chars stored in header
 *  |   |
 *  |   +-- JSThinInlineString  - / header is normal
 *  |   |
 *  |   +-- JSFatInlineString   - / header is fat
 *  |
 * JSAtom (abstract)            - / string equality === pointer equality
 *  |  |
 *  |  +-- js::NormalAtom       - JSLinearString + atom hash code
 *  |  |
 *  |  +-- js::FatInlineAtom    - JSFatInlineString + atom hash code
 *  |
 * js::PropertyName             - / chars don't contain an index (uint32_t)
 *
 * Classes marked with (abstract) above are not literally C++ Abstract Base
 * Classes (since there are no virtual functions, pure or not, in this
 * hierarchy), but have the same meaning: there are no strings with this type as
 * its most-derived type.
 *
 * Atoms can additionally be permanent, i.e. unable to be collected, and can
 * be combined with other string types to create additional most-derived types
 * that satisfy the invariants of more than one of the abovementioned
 * most-derived types. Furthermore, each atom stores a hash number (based on its
 * chars). This hash number is used as key in the atoms table and when the atom
 * is used as key in a JS Map/Set.
 *
 * Derived string types can be queried from ancestor types via isX() and
 * retrieved with asX() debug-only-checked casts.
 *
 * The ensureX() operations mutate 'this' in place to effectively the type to be
 * at least X (e.g., ensureLinear will change a JSRope to be a JSLinearString).
 ','line_number':79,'multiline':True]
['text':' clang-format on','line_number':187,'multiline':False]
['text':' String length and flags are stored in the cell header.','line_number':197,'multiline':False]
['text':' Fields only apply to string types commented on the right. ','line_number':204,'multiline':True]
['text':' Note: 32-bit length and flags fields are inherited from','line_number':206,'multiline':False]
['text':' CellWithLengthAndFlags.','line_number':207,'multiline':False]
['text':' JS(Fat)InlineString ','line_number':211,'multiline':True]
['text':' JSLinearString, except
                                                         JS(Fat)InlineString ','line_number':217,'multiline':True]
['text':' JSLinearString, except
                                                         JS(Fat)InlineString ','line_number':219,'multiline':True]
['text':' JSRope ','line_number':221,'multiline':True]
['text':' Used in flattening ','line_number':222,'multiline':True]
['text':' JSDependentString ','line_number':225,'multiline':True]
['text':' JSRope ','line_number':226,'multiline':True]
['text':' JSLinearString (extensible) ','line_number':227,'multiline':True]
['text':' JSExternalString ','line_number':229,'multiline':True]
['text':' Flags exposed only for jits ','line_number':236,'multiline':True]
['text':'
   * Flag Encoding
   *
   * The first word of a JSString stores flags, index, and (on some
   * platforms) the length. The flags store both the string's type and its
   * character encoding.
   *
   * If LATIN1_CHARS_BIT is set, the string's characters are stored as Latin1
   * instead of TwoByte. This flag can also be set for ropes, if both the
   * left and right nodes are Latin1. Flattening will result in a Latin1
   * string in this case.
   *
   * The other flags store the string's type. Instead of using a dense index
   * to represent the most-derived type, string types are encoded to allow
   * single-op tests for hot queries (isRope, isDependent, isAtom) which, in
   * view of subtyping, would require slower (isX() || isY() || isZ()).
   *
   * The string type encoding can be summarized as follows. The "instance
   * encoding" entry for a type specifies the flag bits used to create a
   * string instance of that type. Abstract types have no instances and thus
   * have no such entry. The "subtype predicate" entry for a type specifies
   * the predicate used to query whether a JSString instance is subtype
   * (reflexively) of that type.
   *
   *   String        Instance         Subtype
   *   type          encoding         predicate
   *   -----------------------------------------
   *   Rope          000000 000       xxxx0x xxx
   *   Linear        -                xxxx1x xxx
   *   Dependent     000110 000       xxx1xx xxx
   *   External      100010 000       100010 xxx
   *   Extensible    010010 000       010010 xxx
   *   Inline        001010 000       xx1xxx xxx
   *   FatInline     011010 000       x11xxx xxx
   *   NormalAtom    000011 000       xxxxx1 xxx
   *   PermanentAtom 100011 000       1xxxx1 xxx
   *   InlineAtom    -                xx1xx1 xxx
   *   FatInlineAtom -                x11xx1 xxx
   *
   * Bits 0..2 are reserved for use by the GC (see
   * gc::CellFlagBitsReservedForGC). In particular, bit 0 is currently used for
   * FORWARD_BIT for forwarded nursery cells. The other 2 bits are currently
   * unused.
   *
   * Note that the first 4 flag bits 3..6 (from right to left in the previous
   * table) have the following meaning and can be used for some hot queries:
   *
   *   Bit 3: IsAtom (Atom, PermanentAtom)
   *   Bit 4: IsLinear
   *   Bit 5: IsDependent
   *   Bit 6: IsInline (Inline, FatInline)
   *
   * If INDEX_VALUE_BIT is set, bits 16 and up will also hold an integer index.
   ','line_number':238,'multiline':True]
['text':' The low bits of flag word are reserved by GC.','line_number':293,'multiline':False]
['text':' Initial flags for various types of strings. ','line_number':308,'multiline':True]
['text':' Whether this atom's characters store an uint32 index value less than or','line_number':321,'multiline':False]
['text':' equal to MAX_ARRAY_INDEX. Not used for non-atomized strings.','line_number':322,'multiline':False]
['text':' See JSLinearString::isIndex.','line_number':323,'multiline':False]
['text':' NON_DEDUP_BIT is used in string deduplication during tenuring.','line_number':329,'multiline':False]
['text':' If IN_STRING_TO_ATOM_CACHE is set, this string had an entry in the','line_number':332,'multiline':False]
['text':' StringToAtomCache at some point. Note that GC can purge the cache without','line_number':333,'multiline':False]
['text':' clearing this bit.','line_number':334,'multiline':False]
['text':' Flags used during rope flattening that indicate what action to perform when','line_number':337,'multiline':False]
['text':' returning to the rope's parent rope.','line_number':338,'multiline':False]
['text':'
   * Helper function to validate that a string of a given length is
   * representable by a JSString. An allocation overflow is reported if false
   * is returned.
   ','line_number':348,'multiline':True]
['text':' Ensure js::shadow::String has the same layout. ','line_number':374,'multiline':True]
['text':' Avoid silly compile errors in JSRope::flatten ','line_number':417,'multiline':True]
['text':' Get correct non-inline chars enum arm for given type','line_number':433,'multiline':False]
['text':' Strings have either Latin1 or TwoByte chars. ','line_number':443,'multiline':True]
['text':' Strings might contain cached indexes. ','line_number':447,'multiline':True]
['text':' Fallible conversions to more-derived string types. ','line_number':457,'multiline':True]
['text':' Type query and debug-checked casts ','line_number':465,'multiline':True]
['text':' For hot code, prefer other type queries. ','line_number':519,'multiline':True]
['text':' Fills |array| with various strings that represent the different string','line_number':559,'multiline':False]
['text':' kinds and character encodings.','line_number':560,'multiline':False]
['text':' Only called by the GC for dependent strings. ','line_number':564,'multiline':True]
['text':' The base may be forwarded and becomes a relocation overlay.','line_number':570,'multiline':False]
['text':' The return value can be a relocation overlay when the base is forwarded,','line_number':571,'multiline':False]
['text':' or the return value can be the actual base when it is not forwarded.','line_number':572,'multiline':False]
['text':' Only called by the GC for strings with the AllocKind::STRING kind. ','line_number':581,'multiline':True]
['text':' Gets the number of bytes that the chars take on the heap. ','line_number':585,'multiline':True]
['text':' Encode as many scalar values of the string as UTF-8 as can fit
   * into the caller-provided buffer replacing unpaired surrogates
   * with the REPLACEMENT CHARACTER.
   *
   * Returns the number of code units read and the number of code units
   * written.
   *
   * The semantics of this method match the semantics of
   * TextEncoder.encodeInto().
   *
   * This function doesn't modify the representation -- rope, linear,
   * flat, atom, etc. -- of this string. If this string is a rope,
   * it also doesn't modify the representation of left or right halves
   * of this string, or of those halves, and so on.
   *
   * Returns mozilla::Nothing on OOM.
   ','line_number':593,'multiline':True]
['text':' To help avoid writing Spectre-unsafe code, we only allow MacroAssembler','line_number':614,'multiline':False]
['text':' to call the method below.','line_number':615,'multiline':False]
['text':' Allow permanent atoms to be accessed across zones and runtimes.','line_number':630,'multiline':False]
['text':' Debugger-friendly stderr dump.','line_number':668,'multiline':False]
['text':' Override base class implementation to tell GC about permanent atoms.','line_number':689,'multiline':False]
['text':' Hash function specific for ropes that avoids allocating a temporary','line_number':747,'multiline':False]
['text':' string. There are still allocations internally so it's technically','line_number':748,'multiline':False]
['text':' fallible.','line_number':749,'multiline':False]
['text':'','line_number':750,'multiline':False]
['text':' Returns the same value as if this were a linear string being hashed.','line_number':751,'multiline':False]
['text':' The process of flattening a rope temporarily overwrites the left pointer of','line_number':754,'multiline':False]
['text':' interior nodes in the rope DAG with the parent pointer.','line_number':755,'multiline':False]
['text':' Flattening overwrites this field.','line_number':760,'multiline':False]
['text':' To help avoid writing Spectre-unsafe code, we only allow MacroAssembler','line_number':776,'multiline':False]
['text':' to call the methods below.','line_number':777,'multiline':False]
['text':' Vacuous and therefore unimplemented. ','line_number':792,'multiline':True]
['text':' Returns void pointer to latin1/twoByte chars, for finalizers. ','line_number':798,'multiline':True]
['text':' Returns true if this string's characters store an unsigned 32-bit integer','line_number':890,'multiline':False]
['text':' value less than or equal to MAX_ARRAY_INDEX, initializing *indexp to that','line_number':891,'multiline':False]
['text':' value if so. Leading '0' isn't allowed except 0 itself.','line_number':892,'multiline':False]
['text':' (Thus if calling isIndex returns true, js::IndexToString(cx, *indexp) will','line_number':893,'multiline':False]
['text':' be a string equal to this string.)','line_number':894,'multiline':False]
['text':'
   * Returns a property name represented by this string, or null on failure.
   * You must verify that this is not an index per isIndex before calling
   * this method.
   ','line_number':914,'multiline':True]
['text':'
   * Once a JSLinearString sub-class has been added to the atom state, this
   * operation changes the string to the JSAtom type, in place.
   ','line_number':929,'multiline':True]
['text':' Vacuous and therefore unimplemented. ','line_number':946,'multiline':True]
['text':' The offset of this string's chars in base->chars(). ','line_number':950,'multiline':True]
['text':' To help avoid writing Spectre-unsafe code, we only allow MacroAssembler','line_number':979,'multiline':False]
['text':' to call the method below.','line_number':980,'multiline':False]
['text':' Vacuous and therefore unimplemented. ','line_number':992,'multiline':True]
['text':' To help avoid writing Spectre-unsafe code, we only allow MacroAssembler','line_number':1035,'multiline':False]
['text':' to call the method below.','line_number':1036,'multiline':False]
['text':'
 * On 32-bit platforms, JSThinInlineString can store 8 Latin1 characters or 4
 * TwoByte characters inline. On 64-bit platforms, these numbers are 16 and 8,
 * respectively.
 ','line_number':1046,'multiline':True]
['text':'
 * On both 32-bit and 64-bit platforms, MAX_LENGTH_TWO_BYTE is 12 and
 * MAX_LENGTH_LATIN1 is 24. This is deliberate, in order to minimize potential
 * performance differences between 32-bit and 64-bit platforms.
 *
 * There are still some differences due to NUM_INLINE_CHARS_* being different.
 * E.g. TwoByte strings of length 5--8 will be JSFatInlineStrings on 32-bit
 * platforms and JSThinInlineStrings on 64-bit platforms. But the more
 * significant transition from inline strings to non-inline strings occurs at
 * length 12 (for TwoByte strings) and 24 (Latin1 strings) on both 32-bit and
 * 64-bit platforms.
 ','line_number':1070,'multiline':True]
['text':' to fool clang into not warning this is unused ','line_number':1088,'multiline':True]
['text':' Only called by the GC for strings with the AllocKind::FAT_INLINE_STRING','line_number':1111,'multiline':False]
['text':' kind.','line_number':1112,'multiline':False]
['text':' Vacuous and therefore unimplemented. ','line_number':1124,'multiline':True]
['text':' External chars are never allocated inline or in the nursery, so we can','line_number':1138,'multiline':False]
['text':' safely expose this without requiring an AutoCheckCannotGC argument.','line_number':1139,'multiline':False]
['text':' Only called by the GC for strings with the AllocKind::EXTERNAL_STRING','line_number':1142,'multiline':False]
['text':' kind.','line_number':1143,'multiline':False]
['text':' Vacuous and therefore unimplemented. ','line_number':1155,'multiline':True]
['text':' Returns the PropertyName for this.  isIndex() must be false. ','line_number':1160,'multiline':True]
['text':' Transform this atom into a permanent atom. This is only done during','line_number':1166,'multiline':False]
['text':' initialization of the runtime. Permanent atoms are always pinned.','line_number':1167,'multiline':False]
['text':' allowAtom = ','line_number':1193,'multiline':True]
['text':' Silence Clang unused-field warning.','line_number':1224,'multiline':False]
['text':' namespace js','line_number':1240,'multiline':False]
['text':'*
 * An indexable characters class exposing unaligned, little-endian encoded
 * char16_t data.
 ','line_number':1276,'multiline':True]
['text':' NOTE: The WellKnownParserAtoms rely on these tables and may need to be','line_number':1297,'multiline':False]
['text':'       update if these tables are changed.','line_number':1298,'multiline':False]
['text':' Strings matches `[A-Za-z0-9$_]{2}` pattern.','line_number':1305,'multiline':False]
['text':' Store each character in 6 bits.','line_number':1306,'multiline':False]
['text':' See fromSmallChar/toSmallChar for the mapping.','line_number':1307,'multiline':False]
['text':' To optimize ASCII -> small char, allocate a table.','line_number':1311,'multiline':False]
['text':' zeroes','line_number':1317,'multiline':False]
['text':' We keep these public for the JITs. ','line_number':1320,'multiline':True]
['text':' zeroes','line_number':1322,'multiline':False]
['text':' zeroes','line_number':1325,'multiline':False]
['text':' May not return atom, returns null on (reported) failure. ','line_number':1353,'multiline':True]
['text':' Return null if no static atom exists for the given (chars, length). ','line_number':1360,'multiline':True]
['text':'
         * Here we know that JSString::intStringTable covers only 256 (or at
         * least not 1000 or more) chars. We rely on order here to resolve the
         * unit vs. int string/length-2 string atom identity issue by giving
         * priority to unit strings for "0" through "9" and length-2 strings for
         * "10" through "99".
         ','line_number':1383,'multiline':True]
['text':' Collapse calls for |const char*| into |const Latin1Char char*| to avoid','line_number':1409,'multiline':False]
['text':' excess instantiations.','line_number':1410,'multiline':False]
['text':' Collapse the remaining |CharT*| to |const CharT*| to avoid excess','line_number':1417,'multiline':False]
['text':' instantiations.','line_number':1418,'multiline':False]
['text':' Same as getLength2Index, but withtout runtime assertion,','line_number':1463,'multiline':False]
['text':' this should be used only for known static string.','line_number':1464,'multiline':False]
['text':'
 * Declare length-2 strings. We only store strings where both characters are
 * alphanumeric. The lower 10 short chars are the numerals, the next 26 are
 * the lowercase letters, and the next 26 are the uppercase letters.
 ','line_number':1478,'multiline':True]
['text':'
 * Represents an atomized string which does not contain an index (that is, an
 * unsigned 32-bit value).  Thus for any PropertyName propname,
 * ToString(ToUint32(propname)) never equals propname.
 *
 * To more concretely illustrate the utility of PropertyName, consider that it
 * is used to partition, in a type-safe manner, the ways to refer to a
 * property, as follows:
 *
 *   - uint32_t indexes,
 *   - PropertyName strings which don't encode uint32_t indexes, and
 *   - jsspecial special properties (non-ES5 properties like object-valued
 *     jsids, JSID_EMPTY, JSID_VOID, and maybe in the future Harmony-proposed
 *     private names).
 ','line_number':1519,'multiline':True]
['text':' Vacuous and therefore unimplemented. ','line_number':1536,'multiline':True]
['text':'*
 * Allocate a string with the given contents.  If |allowGC == CanGC|, this may
 * trigger a GC.
 ','line_number':1566,'multiline':True]
['text':' Like NewString, but doesn't try to deflate to Latin1. ','line_number':1575,'multiline':True]
['text':' Take ownership of an array of Latin1Chars. ','line_number':1585,'multiline':True]
['text':' Copy a counted string and GC-allocate a descriptor for it. ','line_number':1590,'multiline':True]
['text':' Like NewStringCopyN, but doesn't try to deflate to Latin1. ','line_number':1604,'multiline':True]
['text':' Copy a C string and GC-allocate a descriptor for it. ','line_number':1610,'multiline':True]
['text':'*
 * Allocate a new string consisting of |chars[0..length]| characters.
 ','line_number':1643,'multiline':True]
['text':'
 * Test if strings are equal. The caller can call the function even if str1
 * or str2 are not GC-allocated things.
 ','line_number':1658,'multiline':True]
['text':' Use the infallible method instead! ','line_number':1665,'multiline':True]
['text':' EqualStrings is infallible on linear strings. ','line_number':1669,'multiline':True]
['text':'*
 * Compare two strings that are known to be the same length.
 * Exposed for the JITs; for ordinary uses, EqualStrings() is more sensible.
 *
 * Precondition: str1->length() == str2->length().
 ','line_number':1672,'multiline':True]
['text':'
 * Return less than, equal to, or greater than zero depending on whether
 * `s1[0..len1]` is less than, equal to, or greater than `s2`.
 ','line_number':1680,'multiline':True]
['text':'
 * Compare two strings, like CompareChars, but store the result in `*result`.
 * This flattens the strings and therefore can fail.
 ','line_number':1687,'multiline':True]
['text':'
 * Same as CompareStrings but for atoms.  Don't use this to just test
 * for equality; use this when you need an ordering on atoms.
 ','line_number':1694,'multiline':True]
['text':'*
 * Return true if the string contains only ASCII characters.
 ','line_number':1700,'multiline':True]
['text':'
 * Return true if the string matches the given sequence of ASCII bytes.
 ','line_number':1705,'multiline':True]
['text':'
 * Return true if the string matches the given sequence of ASCII
 * bytes.  The sequence of ASCII bytes must have length "length".  The
 * length should not include the trailing null, if any.
 ','line_number':1709,'multiline':True]
['text':'*
 * Return true if the string contains a pattern at |start|.
 *
 * Precondition: `text` is long enough that this might be true;
 * that is, it has at least `start + pat->length()` characters.
 ','line_number':1726,'multiline':True]
['text':'
 * Computes |str|'s substring for the range [beginInt, beginInt + lengthInt).
 * Negative, overlarge, swapped, etc. |beginInt| and |lengthInt| are forbidden
 * and constitute API misuse.
 ','line_number':1735,'multiline':True]
['text':'** Conversions ***********************************************************','line_number':1751,'multiline':True]
['text':'
 * Convert a string to a printable C string.
 *
 * Asserts if the input contains any non-ASCII characters.
 ','line_number':1753,'multiline':True]
['text':'
 * Convert a string to a printable C string.
 ','line_number':1760,'multiline':True]
['text':'
   * Request the printable representation of an identifier.
   ','line_number':1766,'multiline':True]
['text':'
   * Request the printable representation of a property key.
   ','line_number':1771,'multiline':True]
['text':'
 * Convert a jsid to a printable C string encoded in UTF-8.
 ','line_number':1777,'multiline':True]
['text':'
 * Convert a non-string value to a string, returning null after reporting an
 * error, otherwise returning a new string reference.
 ','line_number':1783,'multiline':True]
['text':'
 * Convert the given value to a string.  This method includes an inline
 * fast-path for the case where the value is already a string; if the value is
 * known not to be a string, use ToStringSlow instead.
 ','line_number':1791,'multiline':True]
['text':'
 * This function implements E-262-3 section 9.8, toString. Convert the given
 * value to a string of characters appended to the given buffer. On error, the
 * passed buffer may have partial results appended.
 ','line_number':1804,'multiline':True]
['text':' namespace js ','line_number':1812,'multiline':True]
['text':'
   * Optimization for one level deep ropes.
   * This is common for the following pattern:
   *
   * while() {
   *   text = text.substr(0, x) + "bla" + text.substr(x)
   *   test.charCodeAt(x + 1)
   * }
   ','line_number':1818,'multiline':True]
['text':' A string that could own the malloced chars used by another (dependent)','line_number':1864,'multiline':False]
['text':' string. It will not have a base and must be linear and non-inline.','line_number':1865,'multiline':False]
['text':' If it fits in a fat inline string, it fits in any inline string.','line_number':1961,'multiline':False]
['text':' If it fits in a fat inline string, it fits in any inline string.','line_number':1967,'multiline':False]
['text':' Check that the new buffer is located in the StringBufferArena','line_number':1973,'multiline':False]
['text':' Check that the new buffer is located in the StringBufferArena','line_number':1981,'multiline':False]
['text':' StringRelocationOverlay assists with updating the string chars','line_number':2045,'multiline':False]
['text':' pointers of dependent strings when their base strings are','line_number':2046,'multiline':False]
['text':' deduplicated. It stores:','line_number':2047,'multiline':False]
['text':'  - nursery chars of a root base (root base is a non-dependent base), or','line_number':2048,'multiline':False]
['text':'  - nursery base of a dependent string','line_number':2049,'multiline':False]
['text':' StringRelocationOverlay exploits the fact that the 3rd word of a JSString's','line_number':2050,'multiline':False]
['text':' RelocationOverlay is not utilized and can be used to store extra information.','line_number':2051,'multiline':False]
['text':' nursery chars of a root base','line_number':2054,'multiline':False]
['text':' The nursery base can be forwarded, which becomes a string relocation','line_number':2058,'multiline':False]
['text':' overlay, or it is not yet forwarded and is simply the base.','line_number':2059,'multiline':False]
['text':' Transform a nursery string to a StringRelocationOverlay that is forwarded','line_number':2101,'multiline':False]
['text':' to a tenured string.','line_number':2102,'multiline':False]
['text':' Initialize the overlay, and remember the nursery base string if there is','line_number':2110,'multiline':False]
['text':' one, or nursery non-inlined chars if it can be the root base of other','line_number':2111,'multiline':False]
['text':' strings.','line_number':2112,'multiline':False]
['text':'','line_number':2113,'multiline':False]
['text':' The non-inlined chars of a tenured dependent string should point to the','line_number':2114,'multiline':False]
['text':' tenured root base's one with an offset. For example, a dependent string','line_number':2115,'multiline':False]
['text':' may start from the 3rd char of its root base. During tenuring, offsets','line_number':2116,'multiline':False]
['text':' of dependent strings can be computed from the nursery non-inlined chars','line_number':2117,'multiline':False]
['text':' remembered in overlays.','line_number':2118,'multiline':False]
['text':' namespace gc','line_number':2153,'multiline':False]
['text':' namespace js','line_number':2154,'multiline':False]
['text':' vm_StringType_h ','line_number':2156,'multiline':True]
