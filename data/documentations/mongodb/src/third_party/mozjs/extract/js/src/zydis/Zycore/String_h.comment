['text':'**************************************************************************************************

  Zyan Core Library (Zycore-C)

  Original Author : Florian Bernd

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.

**************************************************************************************************','line_number':1,'multiline':True]
['text':'*
 * @file
 * @brief   Implements a string type.
 ','line_number':27,'multiline':True]
['text':' ============================================================================================== ','line_number':45,'multiline':True]
['text':' Constants                                                                                      ','line_number':46,'multiline':True]
['text':' ============================================================================================== ','line_number':47,'multiline':True]
['text':'*
 * @brief   The initial minimum capacity (number of characters) for all dynamically allocated
 *          string instances - not including the terminating '\0'-character.
 ','line_number':49,'multiline':True]
['text':'*
 * @brief   The default growth factor for all string instances.
 ','line_number':55,'multiline':True]
['text':'*
 * @brief   The default shrink threshold for all string instances.
 ','line_number':60,'multiline':True]
['text':' ============================================================================================== ','line_number':65,'multiline':True]
['text':' Enums and types                                                                                ','line_number':66,'multiline':True]
['text':' ============================================================================================== ','line_number':67,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':69,'multiline':True]
['text':' String flags                                                                                   ','line_number':70,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':71,'multiline':True]
['text':'*
 * @brief   Defines the `ZyanStringFlags` datatype.
 ','line_number':73,'multiline':True]
['text':'*
 * @brief   The string uses a custom user-defined buffer with a fixed capacity.
 ','line_number':78,'multiline':True]
['text':' (1 << 0)','line_number':81,'multiline':False]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':83,'multiline':True]
['text':' String                                                                                         ','line_number':84,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':85,'multiline':True]
['text':'*
 * @brief   Defines the `ZyanString` struct.
 *
 * The `ZyanString` type is implemented as a size-prefixed string - which allows for a lot of
 * performance optimizations.
 * Nevertheless null-termination is guaranteed at all times to provide maximum compatibility with
 * default C-style strings (use `ZyanStringGetData` to access the C-style string).
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 ','line_number':87,'multiline':True]
['text':'*
     * @brief   String flags.
     ','line_number':100,'multiline':True]
['text':'*
     * @brief   The vector that contains the actual string.
     ','line_number':104,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':110,'multiline':True]
['text':' View                                                                                           ','line_number':111,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':112,'multiline':True]
['text':'*
 * @brief   Defines the `ZyanStringView` struct.
 *
 * The `ZyanStringView` type provides a view inside a string (`ZyanString` instances, null-
 * terminated C-style strings, or even not-null-terminated custom strings). A view is immutable
 * by design and can't be directly converted to a C-style string.
 *
 * Views might become invalid (e.g. pointing to invalid memory), if the underlying string gets
 * destroyed or resized.
 *
 * The `ZYAN_STRING_TO_VIEW` macro can be used to cast a `ZyanString` to a `ZyanStringView` pointer
 * without any runtime overhead.
 * Casting a view to a normal string is not supported and will lead to unexpected behavior (use
 * `ZyanStringDuplicate` to create a deep-copy instead).
 *
 * All fields in this struct should be considered as "private". Any changes may lead to unexpected
 * behavior.
 ','line_number':114,'multiline':True]
['text':'*
     * @brief   The string data.
     *
     * The view internally re-uses the normal string struct to allow casts without any runtime
     * overhead.
     ','line_number':134,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':143,'multiline':True]
['text':' ============================================================================================== ','line_number':145,'multiline':True]
['text':' Macros                                                                                         ','line_number':146,'multiline':True]
['text':' ============================================================================================== ','line_number':147,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':149,'multiline':True]
['text':' General                                                                                        ','line_number':150,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':151,'multiline':True]
['text':'*
 * @brief   Defines an uninitialized `ZyanString` instance.
 ','line_number':153,'multiline':True]
['text':' flags  ','line_number':158,'multiline':True]
['text':' vector ','line_number':159,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':162,'multiline':True]
['text':' Helper macros                                                                                  ','line_number':163,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':164,'multiline':True]
['text':'*
 * @brief   Casts a `ZyanString` pointer to a constant `ZyanStringView` pointer.
 ','line_number':166,'multiline':True]
['text':'*
 * @brief   Defines a `ZyanStringView` struct that provides a view into a static C-style string.
 *
 * @param   string  The C-style string.
 ','line_number':171,'multiline':True]
['text':' string ','line_number':178,'multiline':True]
['text':' flags  ','line_number':180,'multiline':True]
['text':' vector ','line_number':181,'multiline':True]
['text':' allocator        ','line_number':183,'multiline':True]
['text':' growth_factor    ','line_number':184,'multiline':True]
['text':' shrink_threshold ','line_number':185,'multiline':True]
['text':' size             ','line_number':186,'multiline':True]
['text':' capacity         ','line_number':187,'multiline':True]
['text':' element_size     ','line_number':188,'multiline':True]
['text':' destructor       ','line_number':189,'multiline':True]
['text':' data             ','line_number':190,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':195,'multiline':True]
['text':' ============================================================================================== ','line_number':197,'multiline':True]
['text':' Exported functions                                                                             ','line_number':198,'multiline':True]
['text':' ============================================================================================== ','line_number':199,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':201,'multiline':True]
['text':' Constructor and destructor                                                                     ','line_number':202,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':203,'multiline':True]
['text':'*
 * @brief   Initializes the given `ZyanString` instance.
 *
 * @param   string          A pointer to the `ZyanString` instance.
 * @param   capacity        The initial capacity (number of characters).
 *
 * @return  A zyan status code.
 *
 * The memory for the string is dynamically allocated by the default allocator using the default
 * growth factor of `2.0f` and the default shrink threshold of `0.25f`.
 *
 * The allocated buffer will be at least one character larger than the given `capacity`, to reserve
 * space for the terminating '\0'.
 *
 * Finalization with `ZyanStringDestroy` is required for all strings created by this function.
 ','line_number':207,'multiline':True]
['text':' ZYAN_NO_LIBC','line_number':225,'multiline':False]
['text':'*
 * @brief   Initializes the given `ZyanString` instance and sets a custom `allocator` and memory
 *          allocation/deallocation parameters.
 *
 * @param   string              A pointer to the `ZyanString` instance.
 * @param   capacity            The initial capacity (number of characters).
 * @param   allocator           A pointer to a `ZyanAllocator` instance.
 * @param   growth_factor       The growth factor (from `1.0f` to `x.xf`).
 * @param   shrink_threshold    The shrink threshold (from `0.0f` to `1.0f`).
 *
 * @return  A zyan status code.
 *
 * A growth factor of `1.0f` disables overallocation and a shrink threshold of `0.0f` disables
 * dynamic shrinking.
 *
 * The allocated buffer will be at least one character larger than the given `capacity`, to reserve
 * space for the terminating '\0'.
 *
 * Finalization with `ZyanStringDestroy` is required for all strings created by this function.
 ','line_number':227,'multiline':True]
['text':'*
 * @brief   Initializes the given `ZyanString` instance and configures it to use a custom user
 *          defined buffer with a fixed size.
 *
 * @param   string          A pointer to the `ZyanString` instance.
 * @param   buffer          A pointer to the buffer that is used as storage for the string.
 * @param   capacity        The maximum capacity (number of characters) of the buffer, including
 *                          the terminating '\0'.
 *
 * @return  A zyan status code.
 *
 * Finalization is not required for strings created by this function.
 ','line_number':250,'multiline':True]
['text':'*
 * @brief   Destroys the given `ZyanString` instance.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 *
 * @return  A zyan status code.
 *
 ','line_number':266,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':276,'multiline':True]
['text':' Duplication                                                                                    ','line_number':277,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':278,'multiline':True]
['text':'*
 * @brief   Initializes a new `ZyanString` instance by duplicating an existing string.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanString` instance.
 * @param   source      A pointer to the source string.
 * @param   capacity    The initial capacity (number of characters).
 *
 *                      This value is automatically adjusted to the size of the source string, if
 *                      a smaller value was passed.
 *
 * @return  A zyan status code.
 *
 * The behavior of this function is undefined, if `source` is a view into the `destination`
 * string or `destination` points to an already initialized `ZyanString` instance.
 *
 * The memory for the string is dynamically allocated by the default allocator using the default
 * growth factor of `2.0f` and the default shrink threshold of `0.25f`.
 *
 * The allocated buffer will be at least one character larger than the given `capacity`, to reserve
 * space for the terminating '\0'.
 *
 * Finalization with `ZyanStringDestroy` is required for all strings created by this function.
 ','line_number':282,'multiline':True]
['text':' ZYAN_NO_LIBC','line_number':308,'multiline':False]
['text':'*
 * @brief   Initializes a new `ZyanString` instance by duplicating an existing string and sets a
 *          custom `allocator` and memory allocation/deallocation parameters.
 *
 * @param   destination         A pointer to the (uninitialized) destination `ZyanString` instance.
 * @param   source              A pointer to the source string.
 * @param   capacity            The initial capacity (number of characters).

 *                              This value is automatically adjusted to the size of the source
 *                              string, if a smaller value was passed.
 * @param   allocator           A pointer to a `ZyanAllocator` instance.
 * @param   growth_factor       The growth factor (from `1.0f` to `x.xf`).
 * @param   shrink_threshold    The shrink threshold (from `0.0f` to `1.0f`).
 *
 * @return  A zyan status code.
 *
 * The behavior of this function is undefined, if `source` is a view into the `destination`
 * string or `destination` points to an already initialized `ZyanString` instance.
 *
 * A growth factor of `1.0f` disables overallocation and a shrink threshold of `0.0f` disables
 * dynamic shrinking.
 *
 * The allocated buffer will be at least one character larger than the given `capacity`, to reserve
 * space for the terminating '\0'.
 *
 * Finalization with `ZyanStringDestroy` is required for all strings created by this function.
 ','line_number':310,'multiline':True]
['text':'*
 * @brief   Initializes a new `ZyanString` instance by duplicating an existing string and
 *          configures it to use a custom user defined buffer with a fixed size.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanString` instance.
 * @param   source      A pointer to the source string.
 * @param   buffer      A pointer to the buffer that is used as storage for the string.
 * @param   capacity    The maximum capacity (number of characters) of the buffer, including the
 *                      terminating '\0'.

 *                      This function will fail, if the capacity of the buffer is less or equal to
 *                      the size of the source string.
 *
 * @return  A zyan status code.
 *
 * The behavior of this function is undefined, if `source` is a view into the `destination`
 * string or `destination` points to an already initialized `ZyanString` instance.
 *
 * Finalization is not required for strings created by this function.
 ','line_number':341,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':364,'multiline':True]
['text':' Concatenation                                                                                  ','line_number':365,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':366,'multiline':True]
['text':'*
 * @brief   Initializes a new `ZyanString` instance by concatenating two existing strings.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanString` instance.
 *
 *                      This function will fail, if the destination `ZyanString` instance equals
 *                      one of the source strings.
 * @param   s1          A pointer to the first source string.
 * @param   s2          A pointer to the second source string.
 * @param   capacity    The initial capacity (number of characters).

 *                      This value is automatically adjusted to the combined size of the source
 *                      strings, if a smaller value was passed.
 *
 * @return  A zyan status code.
 *
 * The behavior of this function is undefined, if `s1` or `s2` are views into the `destination`
 * string or `destination` points to an already initialized `ZyanString` instance.
 *
 * The memory for the string is dynamically allocated by the default allocator using the default
 * growth factor of `2.0f` and the default shrink threshold of `0.25f`.
 *
 * The allocated buffer will be at least one character larger than the given `capacity`, to reserve
 * space for the terminating '\0'.
 *
 * Finalization with `ZyanStringDestroy` is required for all strings created by this function.
 ','line_number':370,'multiline':True]
['text':' ZYAN_NO_LIBC','line_number':400,'multiline':False]
['text':'*
 * @brief   Initializes a new `ZyanString` instance by concatenating two existing strings and sets
 *          a custom `allocator` and memory allocation/deallocation parameters.
 *
 * @param   destination         A pointer to the (uninitialized) destination `ZyanString` instance.
 *
 *                              This function will fail, if the destination `ZyanString` instance
 *                              equals one of the source strings.
 * @param   s1                  A pointer to the first source string.
 * @param   s2                  A pointer to the second source string.
 * @param   capacity            The initial capacity (number of characters).
 *
 *                              This value is automatically adjusted to the combined size of the
 *                              source strings, if a smaller value was passed.
 * @param   allocator           A pointer to a `ZyanAllocator` instance.
 * @param   growth_factor       The growth factor (from `1.0f` to `x.xf`).
 * @param   shrink_threshold    The shrink threshold (from `0.0f` to `1.0f`).
 *
 * @return  A zyan status code.
 *
 * The behavior of this function is undefined, if `s1` or `s2` are views into the `destination`
 * string or `destination` points to an already initialized `ZyanString` instance.
 *
 * A growth factor of `1.0f` disables overallocation and a shrink threshold of `0.0f` disables
 * dynamic shrinking.
 *
 * The allocated buffer will be at least one character larger than the given `capacity`, to reserve
 * space for the terminating '\0'.
 *
 * Finalization with `ZyanStringDestroy` is required for all strings created by this function.
 ','line_number':402,'multiline':True]
['text':'*
 * @brief   Initializes a new `ZyanString` instance by concatenating two existing strings and
 *          configures it to use a custom user defined buffer with a fixed size.
 *
 * @param   destination A pointer to the (uninitialized) destination `ZyanString` instance.
 *
 *                      This function will fail, if the destination `ZyanString` instance equals
 *                      one of the source strings.
 * @param   s1          A pointer to the first source string.
 * @param   s2          A pointer to the second source string.
 * @param   buffer      A pointer to the buffer that is used as storage for the string.
 * @param   capacity    The maximum capacity (number of characters) of the buffer.
 *
 *                      This function will fail, if the capacity of the buffer is less or equal to
 *                      the combined size of the source strings.
 *
 * @return  A zyan status code.
 *
 * The behavior of this function is undefined, if `s1` or `s2` are views into the `destination`
 * string or `destination` points to an already initialized `ZyanString` instance.
 *
 * Finalization is not required for strings created by this function.
 ','line_number':437,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':463,'multiline':True]
['text':' Views                                                                                          ','line_number':464,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':465,'multiline':True]
['text':'*
 * @brief   Returns a view inside an existing view/string.
 *
 * @param   view    A pointer to the `ZyanStringView` instance.
 * @param   source  A pointer to the source string.
 *
 * @return  A zyan status code.
 *
 * The `ZYAN_STRING_TO_VEW` macro can be used to pass any `ZyanString` instance as value for the
 * `source` string.
 ','line_number':467,'multiline':True]
['text':'*
 * @brief   Returns a view inside an existing view/string starting from the given `index`.
 *
 * @param   view    A pointer to the `ZyanStringView` instance.
 * @param   source  A pointer to the source string.
 * @param   index   The start index.
 * @param   count   The number of characters.
 *
 * @return  A zyan status code.
 *
 * The `ZYAN_STRING_TO_VEW` macro can be used to pass any `ZyanString` instance as value for the
 * `source` string.
 ','line_number':481,'multiline':True]
['text':'*
 * @brief   Returns a view inside a null-terminated C-style string.
 *
 * @param   view    A pointer to the `ZyanStringView` instance.
 * @param   string  The C-style string.
 *
 * @return  A zyan status code.
 ','line_number':497,'multiline':True]
['text':'*
 * @brief   Returns a view inside a character buffer with custom length.
 *
 * @param   view    A pointer to the `ZyanStringView` instance.
 * @param   buffer  A pointer to the buffer containing the string characters.
 * @param   length  The length of the string (number of characters).
 *
 * @return  A zyan status code.
 ','line_number':507,'multiline':True]
['text':'*
 * @brief   Returns the size (number of characters) of the view.
 *
 * @param   view    A pointer to the `ZyanStringView` instance.
 * @param   size    Receives the size (number of characters) of the view.
 *
 * @return  A zyan status code.
 ','line_number':519,'multiline':True]
['text':'*
 * @brief   Returns the C-style string of the given `ZyanString` instance.
 *
 * @warning The string is not guaranteed to be null terminated!
 *
 * @param   string  A pointer to the `ZyanStringView` instance.
 * @param   value   Receives a pointer to the C-style string.
 *
 * @return  A zyan status code.
 ','line_number':529,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':541,'multiline':True]
['text':' Character access                                                                               ','line_number':542,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':543,'multiline':True]
['text':'*
 * @brief   Returns the character at the given `index`.
 *
 * @param   string  A pointer to the `ZyanStringView` instance.
 * @param   index   The character index.
 * @param   value   Receives the desired character of the string.
 *
 * @return  A zyan status code.
 ','line_number':545,'multiline':True]
['text':'*
 * @brief   Returns a pointer to the character at the given `index`.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   index   The character index.
 * @param   value   Receives a pointer to the desired character in the string.
 *
 * @return  A zyan status code.
 ','line_number':557,'multiline':True]
['text':'*
 * @brief   Assigns a new value to the character at the given `index`.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   index   The character index.
 * @param   value   The character to assign.
 *
 * @return  A zyan status code.
 ','line_number':569,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':580,'multiline':True]
['text':' Insertion                                                                                      ','line_number':581,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':582,'multiline':True]
['text':'*
 * @brief   Inserts the content of the source string in the destination string at the given `index`.
 *
 * @param   destination The destination string.
 * @param   index       The insert index.
 * @param   source      The source string.
 *
 * @return  A zyan status code.
 ','line_number':584,'multiline':True]
['text':'*
 * @brief   Inserts `count` characters of the source string in the destination string at the given
 *          `index`.
 *
 * @param   destination         The destination string.
 * @param   destination_index   The insert index.
 * @param   source              The source string.
 * @param   source_index        The index of the first character to be inserted from the source
 *                              string.
 * @param   count               The number of chars to insert from the source string.
 *
 * @return  A zyan status code.
 ','line_number':596,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':612,'multiline':True]
['text':' Appending                                                                                      ','line_number':613,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':614,'multiline':True]
['text':'*
 * @brief   Appends the content of the source string to the end of the destination string.
 *
 * @param   destination The destination string.
 * @param   source      The source string.
 *
 * @return  A zyan status code.
 ','line_number':616,'multiline':True]
['text':'*
 * @brief   Appends `count` characters of the source string to the end of the destination string.
 *
 * @param   destination     The destination string.
 * @param   source          The source string.
 * @param   source_index    The index of the first character to be appended from the source string.
 * @param   count           The number of chars to append from the source string.
 *
 * @return  A zyan status code.
 ','line_number':626,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':639,'multiline':True]
['text':' Deletion                                                                                       ','line_number':640,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':641,'multiline':True]
['text':'*
 * @brief   Deletes characters from the given string, starting at `index`.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   index   The index of the first character to delete.
 * @param   count   The number of characters to delete.
 *
 * @return  A zyan status code.
 ','line_number':643,'multiline':True]
['text':'*
 * @brief   Deletes all remaining characters from the given string, starting at `index`.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   index   The index of the first character to delete.
 *
 * @return  A zyan status code.
 ','line_number':654,'multiline':True]
['text':'*
 * @brief   Erases the given string.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 *
 * @return  A zyan status code.
 ','line_number':664,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':673,'multiline':True]
['text':' Searching                                                                                      ','line_number':674,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':675,'multiline':True]
['text':'*
 * @brief   Searches for the first occurrence of `needle` in the given `haystack` starting from the
 *          left.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':677,'multiline':True]
['text':'*
 * @brief   Searches for the first occurrence of `needle` in the given `haystack` starting from the
 *          left.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 * @param   index       The start index.
 * @param   count       The maximum number of characters to iterate, beginning from the start
 *                      `index`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':694,'multiline':True]
['text':'*
 * @brief   Performs a case-insensitive search for the first occurrence of `needle` in the given
 *          `haystack` starting from the left.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':714,'multiline':True]
['text':'*
 * @brief   Performs a case-insensitive search for the first occurrence of `needle` in the given
 *          `haystack` starting from the left.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 * @param   index       The start index.
 * @param   count       The maximum number of characters to iterate, beginning from the start
 *                      `index`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':731,'multiline':True]
['text':'*
 * @brief   Searches for the first occurrence of `needle` in the given `haystack` starting from the
 *          right.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':751,'multiline':True]
['text':'*
 * @brief   Searches for the first occurrence of `needle` in the given `haystack` starting from the
 *          right.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 * @param   index       The start index.
 * @param   count       The maximum number of characters to iterate, beginning from the start
 *                      `index`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':768,'multiline':True]
['text':'*
 * @brief   Performs a case-insensitive search for the first occurrence of `needle` in the given
 *          `haystack` starting from the right.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':788,'multiline':True]
['text':'*
 * @brief   Performs a case-insensitive search for the first occurrence of `needle` in the given
 *          `haystack` starting from the right.
 *
 * @param   haystack    The string to search in.
 * @param   needle      The sub-string to search for.
 * @param   found_index A pointer to a variable that receives the index of the first occurrence of
 *                      `needle`.
 * @param   index       The start index.
 * @param   count       The maximum number of characters to iterate, beginning from the start
 *                      `index`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the needle was found, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 *
 * The `found_index` is set to `-1`, if the needle was not found.
 ','line_number':805,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':825,'multiline':True]
['text':' Comparing                                                                                      ','line_number':826,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':827,'multiline':True]
['text':'*
 * @brief   Compares two strings.
 *
 * @param   s1      The first string
 * @param   s2      The second string.
 * @param   result  Receives the comparison result.
 *
 *                  Values:
 *                  - `result  < 0` -> The first character that does not match has a lower value
 *                    in `s1` than in `s2`.
 *                  - `result == 0` -> The contents of both strings are equal.
 *                  - `result  > 0` -> The first character that does not match has a greater value
 *                    in `s1` than in `s2`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the strings are equal, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 ','line_number':829,'multiline':True]
['text':'*
 * @brief   Performs a case-insensitive comparison of two strings.
 *
 * @param   s1      The first string
 * @param   s2      The second string.
 * @param   result  Receives the comparison result.
 *
 *                  Values:
 *                  - `result  < 0` -> The first character that does not match has a lower value
 *                    in `s1` than in `s2`.
 *                  - `result == 0` -> The contents of both strings are equal.
 *                  - `result  > 0` -> The first character that does not match has a greater value
 *                    in `s1` than in `s2`.
 *
 * @return  `ZYAN_STATUS_TRUE`, if the strings are equal, `ZYAN_STATUS_FALSE`, if not, or another
 *          zyan status code, if an error occured.
 ','line_number':849,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':869,'multiline':True]
['text':' Case conversion                                                                                ','line_number':870,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':871,'multiline':True]
['text':'*
 * @brief   Converts the given string to lowercase letters.
 *
 * @param   string      A pointer to the `ZyanString` instance.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':873,'multiline':True]
['text':'*
 * @brief   Converts `count` characters of the given string to lowercase letters.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   index   The start index.
 * @param   count   The number of characters to convert, beginning from the start `index`.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':885,'multiline':True]
['text':'*
 * @brief   Converts the given string to uppercase letters.
 *
 * @param   string      A pointer to the `ZyanString` instance.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':900,'multiline':True]
['text':'*
 * @brief   Converts `count` characters of the given string to uppercase letters.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   index   The start index.
 * @param   count   The number of characters to convert, beginning from the start `index`.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':912,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':927,'multiline':True]
['text':' Memory management                                                                              ','line_number':928,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':929,'multiline':True]
['text':'*
 * @brief   Resizes the given `ZyanString` instance.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   size    The new size of the string.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':931,'multiline':True]
['text':'*
 * @brief   Changes the capacity of the given `ZyanString` instance.
 *
 * @param   string      A pointer to the `ZyanString` instance.
 * @param   capacity    The new minimum capacity of the string.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':944,'multiline':True]
['text':'*
 * @brief   Shrinks the capacity of the given string to match it's size.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 *
 * @return  A zyan status code.
 *
 * This function will fail, if the `ZYAN_STRING_IS_IMMUTABLE` flag is set for the specified
 * `ZyanString` instance.
 ','line_number':957,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':969,'multiline':True]
['text':' Information                                                                                    ','line_number':970,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':971,'multiline':True]
['text':'*
 * @brief   Returns the current capacity of the string.
 *
 * @param   string      A pointer to the `ZyanString` instance.
 * @param   capacity    Receives the size of the string.
 *
 * @return  A zyan status code.
 ','line_number':973,'multiline':True]
['text':'*
 * @brief   Returns the current size (number of characters) of the string (excluding the
 *          terminating zero character).
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   size    Receives the size (number of characters) of the string.
 *
 * @return  A zyan status code.
 ','line_number':983,'multiline':True]
['text':'*
 * @brief   Returns the C-style string of the given `ZyanString` instance.
 *
 * @param   string  A pointer to the `ZyanString` instance.
 * @param   value   Receives a pointer to the C-style string.
 *
 * @return  A zyan status code.
 ','line_number':994,'multiline':True]
['text':' ---------------------------------------------------------------------------------------------- ','line_number':1004,'multiline':True]
['text':' ============================================================================================== ','line_number':1006,'multiline':True]
['text':' ZYCORE_STRING_H','line_number':1012,'multiline':False]
