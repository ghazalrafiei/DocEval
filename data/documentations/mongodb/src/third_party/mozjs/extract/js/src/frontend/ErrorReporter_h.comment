['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' for va_list','line_number':12,'multiline':False]
['text':' for size_t','line_number':13,'multiline':False]
['text':' for uint32_t','line_number':14,'multiline':False]
['text':' ErrorMetadata, ReportCompile{Error,Warning}','line_number':18,'multiline':False]
['text':' An interface class to provide strictMode getter method, which is used by','line_number':25,'multiline':False]
['text':' ErrorReportMixin::strictModeError* methods.','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':' This class is separated to be used as a back-channel from TokenStream to the','line_number':28,'multiline':False]
['text':' strict mode flag which is available inside Parser, to avoid exposing the','line_number':29,'multiline':False]
['text':' rest of SharedContext to TokenStream.','line_number':30,'multiline':False]
['text':' This class provides error reporting methods, including warning, extra','line_number':36,'multiline':False]
['text':' warning, and strict mode error.','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' A class that inherits this class must provide the following methods:','line_number':39,'multiline':False]
['text':'   * options','line_number':40,'multiline':False]
['text':'   * getContext','line_number':41,'multiline':False]
['text':'   * computeErrorMetadata','line_number':42,'multiline':False]
['text':' Returns a compile options (extra warning, warning as error) for current','line_number':45,'multiline':False]
['text':' compilation.','line_number':46,'multiline':False]
['text':' Returns the current context.','line_number':49,'multiline':False]
['text':' A variant class for the offset of the error or warning.','line_number':52,'multiline':False]
['text':' Fills ErrorMetadata fields for an error or warning at given offset.','line_number':57,'multiline':False]
['text':'   * offset is uint32_t if methods ending with "At" is called','line_number':58,'multiline':False]
['text':'   * offset is NoOffset if methods ending with "NoOffset" is called','line_number':59,'multiline':False]
['text':'   * offset is Current otherwise','line_number':60,'multiline':False]
['text':' ==== error ====','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':' Reports an error.','line_number':66,'multiline':False]
['text':'','line_number':67,'multiline':False]
['text':' Methods ending with "At" are for an error at given offset.','line_number':68,'multiline':False]
['text':' The offset is passed to computeErrorMetadata method and is transparent','line_number':69,'multiline':False]
['text':' for this class.','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' Methods ending with "NoOffset" are for an error that doesn't correspond','line_number':72,'multiline':False]
['text':' to any offset. NoOffset is passed to computeErrorMetadata for them.','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' Other methods except errorWithNotesAtVA are for an error at the current','line_number':75,'multiline':False]
['text':' offset. Current is passed to computeErrorMetadata for them.','line_number':76,'multiline':False]
['text':'','line_number':77,'multiline':False]
['text':' Methods contains "WithNotes" can be used if there are error notes.','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':' errorWithNotesAtVA is the actual implementation for all of above.','line_number':80,'multiline':False]
['text':' This can be called if the caller already has a va_list.','line_number':81,'multiline':False]
['text':' ==== warning ====','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':' Reports a warning.','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':' Returns true if the warning is reported.','line_number':155,'multiline':False]
['text':' Returns false if the warning is treated as an error, or an error occurs','line_number':156,'multiline':False]
['text':' while reporting.','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' See the comment on the error section for details on what the arguments','line_number':159,'multiline':False]
['text':' and function names indicate for all these functions.','line_number':160,'multiline':False]
['text':' ==== strictModeError ====','line_number':207,'multiline':False]
['text':'','line_number':208,'multiline':False]
['text':' Reports an error if in strict mode code, or warn if not.','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' Returns true if not in strict mode and a warning is reported.','line_number':211,'multiline':False]
['text':' Returns false if the error reported, or an error occurs while reporting.','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' See the comment on the error section for details on what the arguments','line_number':214,'multiline':False]
['text':' and function names indicate for all these functions.','line_number':215,'multiline':False]
['text':' Reports a warning, or an error if the warning is treated as an error.','line_number':306,'multiline':False]
['text':' An interface class to provide miscellaneous methods used by error reporting','line_number':315,'multiline':False]
['text':' etc.  They're mostly used by BytecodeCompiler, BytecodeEmitter, and helper','line_number':316,'multiline':False]
['text':' classes for emitter.','line_number':317,'multiline':False]
['text':' Returns the line and column numbers for given offset.','line_number':320,'multiline':False]
['text':' Returns the line and column numbers for current offset.','line_number':324,'multiline':False]
['text':' Sets *onThisLine to true if the given offset is inside the given line','line_number':327,'multiline':False]
['text':' number `lineNum`, or false otherwise, and returns true.','line_number':328,'multiline':False]
['text':'','line_number':329,'multiline':False]
['text':' Return false if an error happens.  This method itself doesn't report an','line_number':330,'multiline':False]
['text':' error, and any failure is supposed to be reported as OOM in the caller.','line_number':331,'multiline':False]
['text':' Returns the line number for given offset.','line_number':335,'multiline':False]
['text':' Returns the column number for given offset.','line_number':338,'multiline':False]
['text':' Returns true if tokenization is already started and hasn't yet finished.','line_number':341,'multiline':False]
['text':' currentLineAndColumn returns meaningful value only if this is true.','line_number':342,'multiline':False]
['text':' Returns the filename which is currently being compiled.','line_number':345,'multiline':False]
['text':' namespace frontend','line_number':349,'multiline':False]
['text':' namespace js','line_number':350,'multiline':False]
['text':' frontend_ErrorReporter_h','line_number':352,'multiline':False]
