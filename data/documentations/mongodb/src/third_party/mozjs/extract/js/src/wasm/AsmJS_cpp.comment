['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' SprintfLiteral','line_number':26,'multiline':False]
['text':' mozilla::Utf8Unit','line_number':27,'multiline':False]
['text':' FunctionSyntaxKind','line_number':35,'multiline':False]
['text':' ParserAtomsTable, TaggedParserAtomIndex','line_number':38,'multiline':False]
['text':' TopLevelFunction','line_number':39,'multiline':False]
['text':' TaggedParserAtomIndexHasher','line_number':40,'multiline':False]
['text':' JS::BuildIdCharVector','line_number':42,'multiline':False]
['text':' JSMSG_*','line_number':43,'multiline':False]
['text':' js::Scalar::Type','line_number':46,'multiline':False]
['text':' js::FunctionFlags','line_number':54,'multiline':False]
['text':' js::GeneratorKind, js::FunctionAsyncKind','line_number':55,'multiline':False]
['text':' js::WarnNumberASCII','line_number':59,'multiline':False]
['text':'***************************************************************************','line_number':95,'multiline':True]
['text':' The asm.js valid heap lengths are precisely the WASM valid heap lengths for','line_number':97,'multiline':False]
['text':' ARM greater or equal to MinHeapLength','line_number':98,'multiline':False]
['text':'***************************************************************************','line_number':113,'multiline':True]
['text':' asm.js module object','line_number':114,'multiline':False]
['text':' The asm.js spec recognizes this set of builtin Math functions.','line_number':116,'multiline':False]
['text':' LitValPOD is a restricted version of LitVal suitable for asm.js that is','line_number':139,'multiline':False]
['text':' always POD.','line_number':140,'multiline':False]
['text':' An AsmJSGlobal represents a JS global variable in the asm.js module function.','line_number':186,'multiline':False]
['text':' zero padding for Valgrind','line_number':229,'multiline':False]
['text':' When a view is created from an imported constructor:','line_number':253,'multiline':False]
['text':'   var I32 = stdlib.Int32Array;','line_number':254,'multiline':False]
['text':'   var i32 = new I32(buffer);','line_number':255,'multiline':False]
['text':' the second import has nothing to validate and thus has a null field.','line_number':256,'multiline':False]
['text':' An AsmJSImport is slightly different than an asm.js FFI function: a single','line_number':277,'multiline':False]
['text':' asm.js FFI function can be called with many different signatures. When','line_number':278,'multiline':False]
['text':' compiled to wasm, each unique FFI function paired with signature generates a','line_number':279,'multiline':False]
['text':' wasm import.','line_number':280,'multiline':False]
['text':' An AsmJSExport logically extends Export with the extra information needed for','line_number':292,'multiline':False]
['text':' an asm.js exported function, viz., the offsets in module's source chars in','line_number':293,'multiline':False]
['text':' case the function is toString()ed.','line_number':294,'multiline':False]
['text':' All fields are treated as cacheable POD:','line_number':298,'multiline':False]
['text':' Store module-start-relative offsets','line_number':299,'multiline':False]
['text':' so preserved by serialization.','line_number':300,'multiline':False]
['text':' Holds the immutable guts of an AsmJSModule.','line_number':316,'multiline':False]
['text':'','line_number':317,'multiline':False]
['text':' AsmJSMetadata is built incrementally by ModuleValidator and then shared','line_number':318,'multiline':False]
['text':' immutably between AsmJSModules.','line_number':319,'multiline':False]
['text':' These values are not serialized since they are relative to the','line_number':338,'multiline':False]
['text':' containing script which can be different between serialization and','line_number':339,'multiline':False]
['text':' deserialization contexts. Thus, they must be set explicitly using the','line_number':340,'multiline':False]
['text':' ambient Parser/ScriptSource after deserialization.','line_number':341,'multiline':False]
['text':'','line_number':342,'multiline':False]
['text':' srcStart refers to the offset in the ScriptSource to the beginning of','line_number':343,'multiline':False]
['text':' the asm.js module function. If the function has been created with the','line_number':344,'multiline':False]
['text':' Function constructor, this will be the first character in the function','line_number':345,'multiline':False]
['text':' source. Otherwise, it will be the opening parenthesis of the arguments','line_number':346,'multiline':False]
['text':' list.','line_number':347,'multiline':False]
['text':' The AsmJSExportVector isn't stored in sorted order so do a linear','line_number':366,'multiline':False]
['text':' search. This is for the super-cold and already-expensive toString()','line_number':367,'multiline':False]
['text':' path and the number of exports is generally small.','line_number':368,'multiline':False]
['text':'***************************************************************************','line_number':397,'multiline':True]
['text':' ParseNode utilities','line_number':398,'multiline':False]
['text':'***************************************************************************','line_number':698,'multiline':True]
['text':' Represents the type and value of an asm.js numeric literal.','line_number':700,'multiline':False]
['text':'','line_number':701,'multiline':False]
['text':' A literal is a double iff the literal contains a decimal point (even if the','line_number':702,'multiline':False]
['text':' fractional part is 0). Otherwise, integers may be classified:','line_number':703,'multiline':False]
['text':'  fixnum: [0, 2^31)','line_number':704,'multiline':False]
['text':'  negative int: [-2^31, 0)','line_number':705,'multiline':False]
['text':'  big unsigned: [2^31, 2^32)','line_number':706,'multiline':False]
['text':'  out of range: otherwise','line_number':707,'multiline':False]
['text':' Lastly, a literal may be a float literal which is any double or integer','line_number':708,'multiline':False]
['text':' literal coerced with Math.fround.','line_number':709,'multiline':False]
['text':' Represents the type of a general asm.js expression.','line_number':790,'multiline':False]
['text':'','line_number':791,'multiline':False]
['text':' A canonical subset of types representing the coercion targets: Int, Float,','line_number':792,'multiline':False]
['text':' Double.','line_number':793,'multiline':False]
['text':'','line_number':794,'multiline':False]
['text':' Void is also part of the canonical subset.','line_number':795,'multiline':False]
['text':' Map an already canonicalized Type to the return type of a function call.','line_number':821,'multiline':False]
['text':' The 32-bit external type is Signed, not Int.','line_number':824,'multiline':False]
['text':' Map |t| to one of the canonical vartype representations of a','line_number':837,'multiline':False]
['text':' wasm::ValType.','line_number':838,'multiline':False]
['text':' These types need some kind of coercion, they can't be mapped','line_number':861,'multiline':False]
['text':' to an VarType.','line_number':862,'multiline':False]
['text':' Check if this is one of the valid types for a function argument.','line_number':929,'multiline':False]
['text':' Check if this is one of the valid types for a function return value.','line_number':932,'multiline':False]
['text':' Check if this is one of the valid types for a global variable.','line_number':937,'multiline':False]
['text':' Check if this is one of the canonical vartype representations of a','line_number':940,'multiline':False]
['text':' wasm::ValType, or is void. See Type::canonicalize().','line_number':941,'multiline':False]
['text':' Check if this is a canonical representation of a wasm::ValType.','line_number':954,'multiline':False]
['text':' Convert this canonical type to a wasm::ValType.','line_number':957,'multiline':False]
['text':' Convert this type to a wasm::TypeCode for use in a wasm','line_number':975,'multiline':False]
['text':' block signature. This works for all types, including non-canonical','line_number':976,'multiline':False]
['text':' ones. Consequently, the type isn't valid for subsequent asm.js','line_number':977,'multiline':False]
['text':' validation; it's only valid for use in producing wasm.','line_number':978,'multiline':False]
['text':' Available when defined:','line_number':1056,'multiline':False]
['text':' copies |lit|','line_number':1173,'multiline':False]
['text':' The |literalValue_| field remains unused and','line_number':1178,'multiline':False]
['text':' uninitialized for non-constant variables.','line_number':1179,'multiline':False]
['text':' The index_ field is unused and uninitialized for','line_number':1185,'multiline':False]
['text':' constant doubles.','line_number':1186,'multiline':False]
['text':' |varOrConst|, through |varOrConst.literalValue_|, has a','line_number':1195,'multiline':False]
['text':' non-trivial constructor and therefore MUST be placement-new'd','line_number':1196,'multiline':False]
['text':' into existence.','line_number':1197,'multiline':False]
['text':' Implement HashPolicy:','line_number':1286,'multiline':False]
['text':' Implement HashPolicy:','line_number':1303,'multiline':False]
['text':' Validation-internal state:','line_number':1337,'multiline':False]
['text':' State used to build the AsmJSModule in finish():','line_number':1347,'multiline':False]
['text':' Error reporting:','line_number':1352,'multiline':False]
['text':' Record the field name of this export.','line_number':1694,'multiline':False]
['text':' Declare which function is exported which gives us an index into the','line_number':1705,'multiline':False]
['text':' module ExportVector.','line_number':1706,'multiline':False]
['text':' The exported function might have already been exported in which case','line_number':1713,'multiline':False]
['text':' the index will refer into the range of AsmJSExports.','line_number':1714,'multiline':False]
['text':' Error handling.','line_number':1756,'multiline':False]
['text':' This function is invoked without the caller properly rooting its locals.','line_number':1801,'multiline':False]
['text':' The ModuleValidator encapsulates the entire validation of an asm.js module.','line_number':1861,'multiline':False]
['text':' Its lifetime goes from the validation of the top components of an asm.js','line_number':1862,'multiline':False]
['text':' module (all the globals), the emission of bytecode for all the functions in','line_number':1863,'multiline':False]
['text':' the module and the validation of function's pointer tables. It also finishes','line_number':1864,'multiline':False]
['text':' the compilation of all the module's stubs.','line_number':1865,'multiline':False]
['text':' Helpers:','line_number':1888,'multiline':False]
['text':' asm.js type failure is indicated by calling one of the fail*','line_number':1922,'multiline':False]
['text':' functions below.  These functions always return false to','line_number':1923,'multiline':False]
['text':' halt asm.js parsing.  Whether normal parsing is attempted as','line_number':1924,'multiline':False]
['text':' fallback, depends whether an exception is also set.','line_number':1925,'multiline':False]
['text':'','line_number':1926,'multiline':False]
['text':' If warning succeeds, no exception is set.  If warning fails,','line_number':1927,'multiline':False]
['text':' an exception is set and execution will halt.  Thus it's safe','line_number':1928,'multiline':False]
['text':' and correct to ignore the return value here.','line_number':1929,'multiline':False]
['text':'isAsmJS','line_number':2008,'multiline':True]
['text':' Error handling.','line_number':2054,'multiline':False]
['text':' eager ','line_number':2096,'multiline':True]
['text':' canRefFunc ','line_number':2097,'multiline':True]
['text':' unused','line_number':2130,'multiline':False]
['text':' The default options are fine for asm.js','line_number':2137,'multiline':False]
['text':' asm.js does not have any wasm bytecode to save; view-source is','line_number':2154,'multiline':False]
['text':' provided through the ScriptSource.','line_number':2155,'multiline':False]
['text':'***************************************************************************','line_number':2183,'multiline':True]
['text':' Numeric literal utilities','line_number':2184,'multiline':False]
['text':' Note: '-' is never rolled into the number; numbers are always positive','line_number':2187,'multiline':False]
['text':' and negations must be applied manually.','line_number':2188,'multiline':False]
['text':' Don't fold into || to avoid clang/memcheck bug (bug 1077031).','line_number':2239,'multiline':False]
['text':' The JS grammar treats -42 as -(42) (i.e., with separate grammar','line_number':2250,'multiline':False]
['text':' productions) for the unary - and literal 42). However, the asm.js spec','line_number':2251,'multiline':False]
['text':' recognizes -42 (modulo parens, so -(42) and -((42))) as a single literal','line_number':2252,'multiline':False]
['text':' so fold the two potential parse nodes into a single double value.','line_number':2253,'multiline':False]
['text':' Float literals are explicitly coerced and thus the coerced literal may be','line_number':2273,'multiline':False]
['text':' any valid (non-float) numeric literal.','line_number':2274,'multiline':False]
['text':' The asm.js spec syntactically distinguishes any literal containing a','line_number':2283,'multiline':False]
['text':' decimal point or the literal -0 as having double type.','line_number':2284,'multiline':False]
['text':' The syntactic checks above rule out these double values.','line_number':2289,'multiline':False]
['text':' Although doubles can only *precisely* represent 53-bit integers, they','line_number':2293,'multiline':False]
['text':' can *imprecisely* represent integers much bigger than an int64_t.','line_number':2294,'multiline':False]
['text':' Furthermore, d may be inf or -inf. In both cases, casting to an int64_t','line_number':2295,'multiline':False]
['text':' is undefined, so test against the integer bounds using doubles.','line_number':2296,'multiline':False]
['text':' With the above syntactic and range limitations, d is definitely an','line_number':2301,'multiline':False]
['text':' integer in the range [INT32_MIN, UINT32_MAX] range.','line_number':2302,'multiline':False]
['text':'***************************************************************************','line_number':2336,'multiline':True]
['text':' This is also a ModuleValidator<Unit>& after the appropriate static_cast<>.','line_number':2358,'multiline':False]
['text':' Labels','line_number':2367,'multiline':False]
['text':'**************************************************** Local scope setup ','line_number':2425,'multiline':True]
['text':'***************************** For consistency of returns in a function ','line_number':2435,'multiline':True]
['text':'*************************************************************** Labels ','line_number':2447,'multiline':True]
['text':'************************************************** Read-only interface ','line_number':2578,'multiline':True]
['text':'*************************************************** Encoding interface ','line_number':2597,'multiline':True]
['text':' Encapsulates the building of an asm bytecode function from an asm.js function','line_number':2623,'multiline':False]
['text':' source code, packing the asm.js code into the asm bytecode form that can','line_number':2624,'multiline':False]
['text':' be decoded and compiled with a FunctionCompiler.','line_number':2625,'multiline':False]
['text':' anonymous namespace ','line_number':2667,'multiline':True]
['text':'***************************************************************************','line_number':2669,'multiline':True]
['text':' asm.js type-checking and code-generation algorithm','line_number':2670,'multiline':False]
['text':' Math builtin, with the form glob.Math.[[builtin]]','line_number':2982,'multiline':False]
['text':' Mask off the low bits to account for the clearing effect of a right shift','line_number':3456,'multiline':False]
['text':' followed by the left shift implicit in the array access. E.g., H32[i>>2]','line_number':3457,'multiline':False]
['text':' loses the low two bits.','line_number':3458,'multiline':False]
['text':' For legacy scalar access compatibility, accept Int8/Uint8 accesses','line_number':3486,'multiline':False]
['text':' with no shift.','line_number':3487,'multiline':False]
['text':' Don't generate the mask op if there is no need for it which could happen','line_number':3508,'multiline':False]
['text':' for a shift of zero.','line_number':3509,'multiline':False]
['text':' asm.js only has naturally-aligned accesses.','line_number':3519,'multiline':False]
['text':' asm.js doesn't have constant offsets, so just encode a 0.','line_number':3526,'multiline':False]
['text':' Call signature','line_number':4148,'multiline':False]
['text':' isMax = ','line_number':4296,'multiline':True]
['text':' isMax = ','line_number':4298,'multiline':True]
['text':' At this point, the bytecode resembles this:','line_number':4450,'multiline':False]
['text':'      | the thing we wanted to coerce | current position |>','line_number':4451,'multiline':False]
['text':' No conversion necessary.','line_number':4472,'multiline':False]
['text':' The block depth isn't taken into account here, because a comma list can't','line_number':4694,'multiline':False]
['text':' contain breaks and continues and nested control flow structures.','line_number':4695,'multiline':False]
['text':' brIf (i32.eqz $f) $out','line_number':5346,'multiline':False]
['text':' A while loop `while(#cond) #body` is equivalent to:','line_number':5361,'multiline':False]
['text':' (block $after_loop','line_number':5362,'multiline':False]
['text':'    (loop $top','line_number':5363,'multiline':False]
['text':'       (brIf $after_loop (i32.eq 0 #cond))','line_number':5364,'multiline':False]
['text':'       #body','line_number':5365,'multiline':False]
['text':'       (br $top)','line_number':5366,'multiline':False]
['text':'    )','line_number':5367,'multiline':False]
['text':' )','line_number':5368,'multiline':False]
['text':' A for-loop `for (#init; #cond; #inc) #body` is equivalent to:','line_number':5411,'multiline':False]
['text':' (block                                               // depth X','line_number':5412,'multiline':False]
['text':'   (#init)','line_number':5413,'multiline':False]
['text':'   (block $after_loop                                 // depth X+1 (block)','line_number':5414,'multiline':False]
['text':'     (loop $loop_top                                  // depth X+2 (loop)','line_number':5415,'multiline':False]
['text':'       (brIf $after (eq 0 #cond))','line_number':5416,'multiline':False]
['text':'       (block $after_body #body)                      // depth X+3','line_number':5417,'multiline':False]
['text':'       #inc','line_number':5418,'multiline':False]
['text':'       (br $loop_top)','line_number':5419,'multiline':False]
['text':'     )','line_number':5420,'multiline':False]
['text':'   )','line_number':5421,'multiline':False]
['text':' )','line_number':5422,'multiline':False]
['text':' A break in the body should break out to $after_loop, i.e. depth + 1.','line_number':5423,'multiline':False]
['text':' A continue in the body should break out to $after_body, i.e. depth + 3.','line_number':5424,'multiline':False]
['text':' Continuing in the body should just break out to the increment.','line_number':5447,'multiline':False]
['text':' A do-while loop `do { #body } while (#cond)` is equivalent to:','line_number':5489,'multiline':False]
['text':' (block $after_loop           // depth X','line_number':5490,'multiline':False]
['text':'   (loop $top                 // depth X+1','line_number':5491,'multiline':False]
['text':'     (block #body)            // depth X+2','line_number':5492,'multiline':False]
['text':'     (brIf #cond $top)','line_number':5493,'multiline':False]
['text':'   )','line_number':5494,'multiline':False]
['text':' )','line_number':5495,'multiline':False]
['text':' A break should break out of the entire loop, i.e. at depth 0.','line_number':5496,'multiline':False]
['text':' A continue should break out to the condition, i.e. at depth 2.','line_number':5497,'multiline':False]
['text':' An unlabeled continue in the body should break out to the condition.','line_number':5507,'multiline':False]
['text':' A switch will be constructed as:','line_number':5728,'multiline':False]
['text':' - the default block wrapping all the other blocks, to be able to break','line_number':5729,'multiline':False]
['text':' out of the switch with an unlabeled break statement. It has two statements','line_number':5730,'multiline':False]
['text':' (an inner block and the default expr). asm.js rules require default to be at','line_number':5731,'multiline':False]
['text':' the end, so the default block always encloses all the cases blocks.','line_number':5732,'multiline':False]
['text':' - one block per case between low and high; undefined cases just jump to the','line_number':5733,'multiline':False]
['text':' default case. Each of these blocks contain two statements: the next case's','line_number':5734,'multiline':False]
['text':' block and the possibly empty statement list comprising the case body. The','line_number':5735,'multiline':False]
['text':' last block pushed is the first case so the (relative) branch target therefore','line_number':5736,'multiline':False]
['text':' matches the sequential order of cases.','line_number':5737,'multiline':False]
['text':' - one block for the br_table, so that the first break goes to the first','line_number':5738,'multiline':False]
['text':' case's block.','line_number':5739,'multiline':False]
['text':' Open the wrapping breakable default block.','line_number':5797,'multiline':False]
['text':' Open all the case blocks.','line_number':5802,'multiline':False]
['text':' Open the br_table block.','line_number':5809,'multiline':False]
['text':' The default block is the last one.','line_number':5814,'multiline':False]
['text':' Subtract lowest case value, so that all the cases start from 0.','line_number':5817,'multiline':False]
['text':' Start the br_table block.','line_number':5834,'multiline':False]
['text':' Write the number of cases (tableLength - 1 + 1 (default)).','line_number':5839,'multiline':False]
['text':' Write the number of cases (tableLength - 1 + 1 (default)).','line_number':5840,'multiline':False]
['text':' Each case value describes the relative depth to the actual block. When','line_number':5845,'multiline':False]
['text':' a case is not explicitly defined, it goes to the default.','line_number':5846,'multiline':False]
['text':' Write the default depth.','line_number':5855,'multiline':False]
['text':' Our br_table is done. Close its block, write the cases down in order.','line_number':5860,'multiline':False]
['text':' Write the default block.','line_number':5874,'multiline':False]
['text':' Close the wrapping block.','line_number':5881,'multiline':False]
['text':'= nullptr ','line_number':5930,'multiline':True]
['text':' The regular parser will throw a SyntaxError, no need to','line_number':6024,'multiline':False]
['text':' m.fail.','line_number':6025,'multiline':False]
['text':' asm.js modules can be quite large when represented as parse trees so pop','line_number':6075,'multiline':False]
['text':' the backing LifoAlloc after parsing/compiling each function. Release the','line_number':6076,'multiline':False]
['text':' parser's lifo memory after the last use of a parse node.','line_number':6077,'multiline':False]
['text':'***************************************************************************','line_number':6443,'multiline':True]
['text':' Link-time validation','line_number':6444,'multiline':False]
['text':' Ideally, we'd reject all non-primitives, but Emscripten has a bug that','line_number':6518,'multiline':False]
['text':' generates code that passes functions for some imports. To avoid breaking','line_number':6519,'multiline':False]
['text':' all the code that contains this bug, we make an exception for functions','line_number':6520,'multiline':False]
['text':' that don't have user-defined valueOf or toString, for their coercions','line_number':6521,'multiline':False]
['text':' are not observable and coercion via ToNumber/ToInt32 definitely produces','line_number':6522,'multiline':False]
['text':' NaN/0. We should remove this special case later once most apps have been','line_number':6523,'multiline':False]
['text':' built with newer Emscripten.','line_number':6524,'multiline':False]
['text':' NaN != NaN','line_number':6728,'multiline':False]
['text':' This check is sufficient without considering the size of the loaded datum','line_number':6787,'multiline':False]
['text':' because heap loads and stores start on an aligned boundary and the heap','line_number':6788,'multiline':False]
['text':' byteLength has larger alignment.','line_number':6789,'multiline':False]
['text':' ArrayBuffer lengths in SpiderMonkey used to be restricted to <= INT32_MAX,','line_number':6805,'multiline':False]
['text':' but that has since been relaxed for the benefit of wasm.  We keep the old','line_number':6806,'multiline':False]
['text':' limit for asm.js so as to avoid having to worry about whether the asm.js','line_number':6807,'multiline':False]
['text':' implementation is safe for larger heaps.','line_number':6808,'multiline':False]
['text':' Re-check HasPlatformSupport(cx) since this varies per-thread and','line_number':6889,'multiline':False]
['text':' 'module' may have been produced on a parser thread.','line_number':6890,'multiline':False]
['text':' Source discarding is allowed to affect JS semantics because it is never','line_number':6933,'multiline':False]
['text':' enabled for normal JS content.','line_number':6934,'multiline':False]
['text':' The exported function inherits an implicit strict context if the module','line_number':6958,'multiline':False]
['text':' also inherited it somehow.','line_number':6959,'multiline':False]
['text':' Call the function we just recompiled.','line_number':6989,'multiline':False]
['text':' Implements the semantics of an asm.js module function that has been','line_number':7001,'multiline':False]
['text':' successfully validated.','line_number':7002,'multiline':False]
['text':' Link-time validation checks failed, so reparse the entire asm.js','line_number':7013,'multiline':False]
['text':' module from scratch to get normal interpreted bytecode which we can','line_number':7014,'multiline':False]
['text':' simply Invoke. Very slow.','line_number':7015,'multiline':False]
['text':'***************************************************************************','line_number':7023,'multiline':True]
['text':' Top-level js::CompileAsmJS','line_number':7024,'multiline':False]
['text':' Per the asm.js standard convention, whether failure sets a pending','line_number':7048,'multiline':False]
['text':' exception determines whether to attempt non-asm.js reparsing, so ignore','line_number':7049,'multiline':False]
['text':' the return value below.','line_number':7050,'multiline':False]
['text':' asm.js requires Ion to be available on the current hardware/OS and to be','line_number':7055,'multiline':False]
['text':' enabled for wasm, since asm.js compilation goes via wasm.','line_number':7056,'multiline':False]
['text':' Class constructors are also methods','line_number':7094,'multiline':False]
['text':' Various conditions disable asm.js optimizations.','line_number':7109,'multiline':False]
['text':' "Checking" parses, validates and compiles, producing a fully compiled','line_number':7114,'multiline':False]
['text':' WasmModuleObject as result.','line_number':7115,'multiline':False]
['text':' Finished! Save the ref-counted module on the FunctionBox. When JSFunctions','line_number':7122,'multiline':False]
['text':' are eventually allocated we will create an asm.js constructor for it.','line_number':7123,'multiline':False]
['text':' Success! Write to the console with a "warning" message indicating','line_number':7130,'multiline':False]
['text':' total compilation time.','line_number':7131,'multiline':False]
['text':'***************************************************************************','line_number':7149,'multiline':True]
['text':' asm.js testing functions','line_number':7150,'multiline':False]
['text':'***************************************************************************','line_number':7219,'multiline':True]
['text':' asm.js toString/toSource support','line_number':7220,'multiline':False]
['text':' asm.js functions can't be anonymous','line_number':7295,'multiline':False]
['text':' The heap length is limited by what wasm can handle.','line_number':7321,'multiline':False]
