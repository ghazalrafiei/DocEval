['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':' Symbols. ','line_number':6,'multiline':True]
['text':' JS::shadow::Symbol::WellKnownAPILimit','line_number':11,'multiline':False]
['text':' size_t','line_number':13,'multiline':False]
['text':' uintptr_t, uint32_t','line_number':14,'multiline':False]
['text':' JS_PUBLIC_API','line_number':16,'multiline':False]
['text':'*
 * Create a new Symbol with the given description. This function never returns
 * a Symbol that is in the Runtime-wide symbol registry.
 *
 * If description is null, the new Symbol's [[Description]] attribute is
 * undefined.
 ','line_number':24,'multiline':True]
['text':'*
 * Symbol.for as specified in ES6.
 *
 * Get a Symbol with the description 'key' from the Runtime-wide symbol
 * registry. If there is not already a Symbol with that description in the
 * registry, a new Symbol is created and registered. 'key' must not be null.
 ','line_number':34,'multiline':True]
['text':'*
 * Get the [[Description]] attribute of the given symbol.
 *
 * This function is infallible. If it returns null, that means the symbol's
 * [[Description]] is undefined.
 ','line_number':43,'multiline':True]
['text':' Well-known symbols. ','line_number':51,'multiline':True]
['text':' There is one SymbolCode for each well-known symbol.','line_number':68,'multiline':False]
['text':' SymbolCode::iterator, etc.','line_number':71,'multiline':False]
['text':' created by the #PrivateName syntax.','line_number':75,'multiline':False]
['text':' created by Symbol.for() or JS::GetSymbolFor()','line_number':77,'multiline':False]
['text':' created by Symbol() or JS::NewSymbol()','line_number':78,'multiline':False]
['text':' For use in loops that iterate over the well-known symbols. ','line_number':81,'multiline':True]
['text':'*
 * Return the SymbolCode telling what sort of symbol `symbol` is.
 *
 * A symbol's SymbolCode never changes once it is created.
 ','line_number':84,'multiline':True]
['text':'*
 * Get one of the well-known symbols defined by ES6. A single set of well-known
 * symbols is shared by all compartments in a JSRuntime.
 *
 * `which` must be in the range [0, WellKnownSymbolLimit).
 ','line_number':91,'multiline':True]
['text':'*
 * Return true if the given JSPropertySpec::name or JSFunctionSpec::name value
 * is actually a symbol code and not a string. See JS_SYM_FN.
 ','line_number':100,'multiline':True]
['text':' namespace JS','line_number':108,'multiline':False]
['text':' js_Symbol_h ','line_number':110,'multiline':True]
