['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' MOZ_ASSERT{,_IF}','line_number':9,'multiline':False]
['text':' mozilla::Swap','line_number':11,'multiline':False]
['text':' js::CurrentThreadCanAccessRuntime','line_number':13,'multiline':False]
['text':' js::ReportOutOfMemory','line_number':15,'multiline':False]
['text':' JS::shadow::Zone','line_number':16,'multiline':False]
['text':' JS::Dispatchable, JS::DispatchToEventLoopCallback','line_number':17,'multiline':False]
['text':' js_delete, js::AutoEnterOOMUnsafeRegion','line_number':18,'multiline':False]
['text':' js::UnprotectedData','line_number':19,'multiline':False]
['text':' JSContext','line_number':20,'multiline':False]
['text':' js::PromiseObject','line_number':21,'multiline':False]
['text':' js::AutoRealm','line_number':22,'multiline':False]
['text':' JSRuntime','line_number':23,'multiline':False]
['text':' js::AutoRealm::AutoRealm','line_number':25,'multiline':False]
['text':' Remove this task from live_ before calling `resolve`, so that if `resolve`','line_number':82,'multiline':False]
['text':' itself drains the queue reentrantly, the queue will not think this task is','line_number':83,'multiline':False]
['text':' yet to be queued and block waiting for it.','line_number':84,'multiline':False]
['text':'','line_number':85,'multiline':False]
['text':' The unregister method synchronizes on the helper thread lock and ensures','line_number':86,'multiline':False]
['text':' that we don't delete the task while the helper thread is still running.','line_number':87,'multiline':False]
['text':' We can't leave a pending exception when returning to the caller so do','line_number':93,'multiline':False]
['text':' the same thing as Gecko, which is to ignore the error. This should','line_number':94,'multiline':False]
['text':' only happen due to OOM or interruption.','line_number':95,'multiline':False]
['text':' If the dispatch succeeds, then we are guaranteed that run() will be','line_number':118,'multiline':False]
['text':' called on an active JSContext of runtime_.','line_number':119,'multiline':False]
['text':' The DispatchToEventLoopCallback has rejected this task, indicating that','line_number':125,'multiline':False]
['text':' shutdown has begun. Count the number of rejected tasks that have called','line_number':126,'multiline':False]
['text':' dispatchResolveAndDestroy, and when they account for the entire contents of','line_number':127,'multiline':False]
['text':' live_, notify OffThreadPromiseRuntimeState::shutdown that it is safe to','line_number':128,'multiline':False]
['text':' destruct them.','line_number':129,'multiline':False]
['text':' static ','line_number':159,'multiline':True]
['text':' The JS API contract is that 'false' means shutdown, so be infallible','line_number':171,'multiline':False]
['text':' here (like Gecko).','line_number':172,'multiline':False]
['text':' Wake up internalDrain() if it is waiting for a job to finish.','line_number':178,'multiline':False]
['text':' There are extant live OffThreadPromiseTasks. If none are in the queue,','line_number':210,'multiline':False]
['text':' block until one of them finishes and enqueues a dispatchable.','line_number':211,'multiline':False]
['text':' Don't call run() with lock held to avoid deadlock.','line_number':219,'multiline':False]
['text':' When the shell is using the internal event loop, we must simulate our','line_number':240,'multiline':False]
['text':' requirement of the embedding that, before shutdown, all successfully-','line_number':241,'multiline':False]
['text':' dispatched-to-event-loop tasks have been run.','line_number':242,'multiline':False]
['text':' Don't call run() with lock held to avoid deadlock.','line_number':251,'multiline':False]
['text':' An OffThreadPromiseTask may only be safely deleted on its JSContext's','line_number':258,'multiline':False]
['text':' thread (since it contains a PersistentRooted holding its promise), and','line_number':259,'multiline':False]
['text':' only after it has called dispatchResolveAndDestroy (since that is our','line_number':260,'multiline':False]
['text':' only indication that its owner is done writing into it).','line_number':261,'multiline':False]
['text':'','line_number':262,'multiline':False]
['text':' OffThreadPromiseTasks accepted by the DispatchToEventLoopCallback are','line_number':263,'multiline':False]
['text':' deleted by their 'run' methods. Only dispatchResolveAndDestroy invokes','line_number':264,'multiline':False]
['text':' the callback, and the point of the callback is to call 'run' on the','line_number':265,'multiline':False]
['text':' JSContext's thread, so the conditions above are met.','line_number':266,'multiline':False]
['text':'','line_number':267,'multiline':False]
['text':' But although the embedding's DispatchToEventLoopCallback promises to run','line_number':268,'multiline':False]
['text':' every task it accepts before shutdown, when shutdown does begin it starts','line_number':269,'multiline':False]
['text':' rejecting tasks; we cannot count on 'run' to clean those up for us.','line_number':270,'multiline':False]
['text':' Instead, dispatchResolveAndDestroy keeps a count of rejected ('canceled')','line_number':271,'multiline':False]
['text':' tasks; once that count covers everything in live_, this function itself','line_number':272,'multiline':False]
['text':' runs only on the JSContext's thread, so we can delete them all here.','line_number':273,'multiline':False]
['text':' Now that live_ contains only cancelled tasks, we can just delete','line_number':279,'multiline':False]
['text':' everything.','line_number':280,'multiline':False]
['text':' We don't want 'task' to unregister itself (which would mutate live_ while','line_number':285,'multiline':False]
['text':' we are iterating over it) so reset its internal registered_ flag.','line_number':286,'multiline':False]
['text':' After shutdown, there should be no OffThreadPromiseTask activity in this','line_number':294,'multiline':False]
['text':' JSRuntime. Revert to the !initialized() state to catch bugs.','line_number':295,'multiline':False]
