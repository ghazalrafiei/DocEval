['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':' Functions for compiling and evaluating scripts. ','line_number':6,'multiline':True]
['text':' size_t','line_number':11,'multiline':False]
['text':' FILE','line_number':12,'multiline':False]
['text':' JSGetElementCallback','line_number':14,'multiline':False]
['text':' JS_PUBLIC_API','line_number':15,'multiline':False]
['text':' JS::CompileOptions, JS::ReadOnlyCompileOptions','line_number':17,'multiline':False]
['text':' JS::Handle, JS::MutableHandle','line_number':18,'multiline':False]
['text':' JS::Value and specializations of JS::*Handle-related types','line_number':19,'multiline':False]
['text':' namespace JS','line_number':35,'multiline':False]
['text':'*
 * Given a buffer, return false if the buffer might become a valid JavaScript
 * script with the addition of more lines, or true if the validity of such a
 * script is conclusively known (because it's the prefix of a valid script --
 * and possibly the entirety of such a script).
 *
 * The intent of this function is to enable interactive compilation: accumulate
 * lines in a buffer until JS_Utf8BufferIsCompilableUnit is true, then pass it
 * to the compiler.
 *
 * The provided buffer is interpreted as UTF-8 data.  An error is reported if
 * a UTF-8 encoding error is encountered.
 ','line_number':37,'multiline':True]
['text':'
 * NB: JS_ExecuteScript and the JS::Evaluate APIs come in two flavors: either
 * they use the global as the scope, or they take a HandleValueVector of
 * objects to use as the scope chain.  In the former case, the global is also
 * used as the "this" keyword value and the variables object (ECMA parlance for
 * where 'var' and 'function' bind names) of the execution context for script.
 * In the latter case, the first object in the provided list is used, unless the
 * list is empty, in which case the global is used.
 *
 * Why a runtime option?  The alternative is to add APIs duplicating those
 * for the other value of flags, and that doesn't seem worth the code bloat
 * cost.  Such new entry points would probably have less obvious names, too, so
 * would not tend to be used.  The ContextOptionsRef adjustment, OTOH, can be
 * more easily hacked into existing code that does not depend on the bug; such
 * code can continue to use the familiar JS::Evaluate, etc., entry points.
 ','line_number':53,'multiline':True]
['text':'*
 * Evaluate a script in the scope of the current global of cx.
 ','line_number':70,'multiline':True]
['text':'*
 * As above, but providing an explicit scope chain.  envChain must not include
 * the global object on it; that's implicit.  It needs to contain the other
 * objects that should end up on the script's scope chain.
 ','line_number':80,'multiline':True]
['text':'*
 * Like the above, but handles a cross-compartment script. If the script is
 * cross-compartment, it is cloned into the current compartment before
 * executing.
 ','line_number':96,'multiline':True]
['text':'*
 * Like CloneAndExecuteScript above, but allows executing under a non-syntactic
 * environment chain.
 ','line_number':105,'multiline':True]
['text':'*
 * Evaluate the given source buffer in the scope of the current global of cx,
 * and return the completion value in |rval|.
 ','line_number':114,'multiline':True]
['text':'*
 * As above, but providing an explicit scope chain.  envChain must not include
 * the global object on it; that's implicit.  It needs to contain the other
 * objects that should end up on the script's scope chain.
 ','line_number':123,'multiline':True]
['text':'*
 * Evaluate the provided UTF-8 data in the scope of the current global of |cx|,
 * and return the completion value in |rval|.  If the data contains invalid
 * UTF-8, an error is reported.
 ','line_number':133,'multiline':True]
['text':'*
 * Evaluate the UTF-8 contents of the file at the given path, and return the
 * completion value in |rval|.  (The path itself is in the system encoding, not
 * [necessarily] UTF-8.)  If the contents contain any malformed UTF-8, an error
 * is reported.
 ','line_number':143,'multiline':True]
['text':'*
 * Compile the provided script using the given options.  Return the script on
 * success, or return null on failure (usually with an error reported).
 ','line_number':153,'multiline':True]
['text':'*
 * Compile the provided script using the given options.  Return the script on
 * success, or return null on failure (usually with an error reported).
 ','line_number':161,'multiline':True]
['text':'*
 * Compile the provided script using the given options, and register an encoder
 * on is script source, such that all functions can be encoded as they are
 * parsed. This strategy is used to avoid blocking the main thread in a
 * non-interruptible way.
 *
 * See also JS::FinishIncrementalEncoding.
 *
 * Return the script on success, or return null on failure (usually with an
 * error reported)
 ','line_number':169,'multiline':True]
['text':'*
 * Compile the UTF-8 contents of the given file into a script.  It is an error
 * if the file contains invalid UTF-8.  Return the script on success, or return
 * null on failure (usually with an error reported).
 ','line_number':188,'multiline':True]
['text':'*
 * Compile the UTF-8 contents of the file at the given path into a script.
 * (The path itself is in the system encoding, not [necessarily] UTF-8.)  It
 * is an error if the file's contents are invalid UTF-8.  Return the script on
 * success, or return null on failure (usually with an error reported).
 ','line_number':196,'multiline':True]
['text':'*
 * Compile a function with envChain plus the global as its scope chain.
 * envChain must contain objects in the current compartment of cx.  The actual
 * scope chain used for the function will consist of With wrappers for those
 * objects, followed by the current global of the compartment cx is in.  This
 * global must not be explicitly included in the scope chain.
 ','line_number':205,'multiline':True]
['text':'*
 * Compile a function with envChain plus the global as its scope chain.
 * envChain must contain objects in the current compartment of cx.  The actual
 * scope chain used for the function will consist of With wrappers for those
 * objects, followed by the current global of the compartment cx is in.  This
 * global must not be explicitly included in the scope chain.
 ','line_number':217,'multiline':True]
['text':'*
 * Identical to the CompileFunction overload above for UTF-8, but with
 * Rust-friendly ergonomics.
 ','line_number':229,'multiline':True]
['text':'
 * For a script compiled with the hideScriptFromDebugger option, expose the
 * script to the debugger by calling the debugger's onNewScript hook.
 ','line_number':238,'multiline':True]
['text':'
 * JSScripts have associated with them (via their ScriptSourceObjects) some
 * metadata used by the debugger. The following API functions are used to set
 * that metadata on scripts, functions and modules.
 *
 * The metadata consists of:
 * - A privateValue, which is used to keep some object value associated
 *   with the script.
 * - The elementAttributeName is used by Gecko
 * - The introductionScript is used by the debugger to identify which
 *   script created which. Only set for dynamicaly generated scripts.
 * - scriptOrModule is used to transfer private value metadata from
 *   script to script
 *
 * Callers using UpdateDebugMetaData need to have set deferDebugMetadata
 * in the compile options; this hides the script from the debugger until
 * the debug metadata is provided by the UpdateDebugMetadata call.
 ','line_number':245,'multiline':True]
['text':' The debugger API exposes an optional "element" property on DebuggerSource','line_number':269,'multiline':False]
['text':' objects.  The callback defined here provides that value.  SpiderMonkey','line_number':270,'multiline':False]
['text':' doesn't particularly care about this, but within Firefox the "element" is the','line_number':271,'multiline':False]
['text':' HTML script tag for the script which DevTools can use for a better debugging','line_number':272,'multiline':False]
['text':' experience.','line_number':273,'multiline':False]
['text':' namespace JS ','line_number':277,'multiline':True]
['text':' js_CompilationAndEvaluation_h ','line_number':279,'multiline':True]
