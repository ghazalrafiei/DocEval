['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Intl.NumberFormat implementation. ','line_number':7,'multiline':True]
['text':' js::PlainObject','line_number':49,'multiline':False]
['text':' js_*_str','line_number':53,'multiline':False]
['text':' addProperty','line_number':72,'multiline':False]
['text':' delProperty','line_number':73,'multiline':False]
['text':' enumerate','line_number':74,'multiline':False]
['text':' newEnumerate','line_number':75,'multiline':False]
['text':' resolve','line_number':76,'multiline':False]
['text':' mayResolve','line_number':77,'multiline':False]
['text':' finalize','line_number':78,'multiline':False]
['text':' call','line_number':79,'multiline':False]
['text':' hasInstance','line_number':80,'multiline':False]
['text':' construct','line_number':81,'multiline':False]
['text':' trace','line_number':82,'multiline':False]
['text':'*
 * 11.2.1 Intl.NumberFormat([ locales [, options]])
 *
 * ES2017 Intl draft rev 94045d234762ad107a3d09bb6f7381a65f1a2f9b
 ','line_number':128,'multiline':True]
['text':' Step 1 (Handled by OrdinaryCreateFromConstructor fallback code).','line_number':134,'multiline':False]
['text':' Step 2 (Inlined 9.1.14, OrdinaryCreateFromConstructor).','line_number':136,'multiline':False]
['text':' Step 3.','line_number':154,'multiline':False]
['text':' intl_NumberFormat is an intrinsic for self-hosted JavaScript, so it','line_number':169,'multiline':False]
['text':' cannot be used with "new", but it still has to be treated as a','line_number':170,'multiline':False]
['text':' constructor.','line_number':171,'multiline':False]
['text':' This was allocated using `new` in mozilla::intl::NumberFormat, so we','line_number':183,'multiline':False]
['text':' delete here.','line_number':184,'multiline':False]
['text':' Lookup the available measurement units in the resource boundle of the root','line_number':243,'multiline':False]
['text':' locale.','line_number':244,'multiline':False]
['text':'*
 * Returns a new mozilla::intl::NumberFormat with the locale and number
 * formatting options of the given NumberFormat, or a nullptr if
 * initialization failed.
 ','line_number':314,'multiline':True]
['text':' ICU expects numberingSystem as a Unicode locale extensions on locale.','line_number':332,'multiline':False]
['text':' |ApplyUnicodeExtensionToTag| applies the new keywords to the front of','line_number':364,'multiline':False]
['text':' the Unicode extension subtag. We're then relying on ICU to follow RFC','line_number':365,'multiline':False]
['text':' 6067, which states that any trailing keywords using the same key','line_number':366,'multiline':False]
['text':' should be ignored.','line_number':367,'multiline':False]
['text':' See intl/icu/source/i18n/unicode/unum.h for a detailed field list.  This','line_number':667,'multiline':False]
['text':' list is deliberately exhaustive: cases might have to be added/removed if','line_number':668,'multiline':False]
['text':' this code is compiled with a different ICU with more UNumberFormatFields','line_number':669,'multiline':False]
['text':' enum initializers.  Please guard such cases with appropriate ICU','line_number':670,'multiline':False]
['text':' version-testing #ifdefs, should cross-version divergence occur.','line_number':671,'multiline':False]
['text':' We coerce all NaNs to one with the sign bit unset, so all NaNs are','line_number':695,'multiline':False]
['text':' positive in our implementation.','line_number':696,'multiline':False]
['text':' Percent fields are returned as "unit" elements when the number','line_number':704,'multiline':False]
['text':' formatter's style is "unit".','line_number':705,'multiline':False]
['text':' Needed for vector-resizing scratch space.','line_number':754,'multiline':False]
['text':' Merge sort the fields vector.  Expand the vector to have scratch space for','line_number':787,'multiline':False]
['text':' performing the sort.','line_number':788,'multiline':False]
['text':' Sort first by begin index, then to place','line_number':797,'multiline':False]
['text':' enclosing fields before nested fields.','line_number':798,'multiline':False]
['text':' Delete the elements in the scratch space.','line_number':804,'multiline':False]
['text':' Then iterate over the sorted field list to generate a sequence of parts','line_number':807,'multiline':False]
['text':' (what ECMA-402 actually exposes).  A part is a maximal character sequence','line_number':808,'multiline':False]
['text':' entirely within no field or a single most-nested field.','line_number':809,'multiline':False]
['text':'','line_number':810,'multiline':False]
['text':' Diagrams may be helpful to illustrate how fields map to parts.  Consider','line_number':811,'multiline':False]
['text':' formatting -19,766,580,028,249.41, the US national surplus (negative','line_number':812,'multiline':False]
['text':' because it's actually a debt) on October 18, 2016.','line_number':813,'multiline':False]
['text':'','line_number':814,'multiline':False]
['text':'    var options =','line_number':815,'multiline':False]
['text':'      { style: "currency", currency: "USD", currencyDisplay: "name" };','line_number':816,'multiline':False]
['text':'    var usdFormatter = new Intl.NumberFormat("en-US", options);','line_number':817,'multiline':False]
['text':'    usdFormatter.format(-19766580028249.41);','line_number':818,'multiline':False]
['text':'','line_number':819,'multiline':False]
['text':' The formatted result is "-19,766,580,028,249.41 US dollars".  ICU','line_number':820,'multiline':False]
['text':' identifies these fields in the string:','line_number':821,'multiline':False]
['text':'','line_number':822,'multiline':False]
['text':'     UNUM_GROUPING_SEPARATOR_FIELD','line_number':823,'multiline':False]
['text':'                   |','line_number':824,'multiline':False]
['text':'   UNUM_SIGN_FIELD |  UNUM_DECIMAL_SEPARATOR_FIELD','line_number':825,'multiline':False]
['text':'    |   __________/|   |','line_number':826,'multiline':False]
['text':'    |  /   |   |   |   |','line_number':827,'multiline':False]
['text':'   "-19,766,580,028,249.41 US dollars"','line_number':828,'multiline':False]
['text':'     \________________/ |/ \_______/','line_number':829,'multiline':False]
['text':'             |          |      |','line_number':830,'multiline':False]
['text':'    UNUM_INTEGER_FIELD  |  UNUM_CURRENCY_FIELD','line_number':831,'multiline':False]
['text':'                        |','line_number':832,'multiline':False]
['text':'               UNUM_FRACTION_FIELD','line_number':833,'multiline':False]
['text':'','line_number':834,'multiline':False]
['text':' These fields map to parts as follows:','line_number':835,'multiline':False]
['text':'','line_number':836,'multiline':False]
['text':'         integer     decimal','line_number':837,'multiline':False]
['text':'       _____|________  |','line_number':838,'multiline':False]
['text':'      /  /| |\  |\  |\ |  literal','line_number':839,'multiline':False]
['text':'     /| / | | \ | \ | \|  |','line_number':840,'multiline':False]
['text':'   "-19,766,580,028,249.41 US dollars"','line_number':841,'multiline':False]
['text':'    |  \___|___|___/    |/ \________/','line_number':842,'multiline':False]
['text':'    |        |          |       |','line_number':843,'multiline':False]
['text':'    |      group        |   currency','line_number':844,'multiline':False]
['text':'    |                   |','line_number':845,'multiline':False]
['text':'   minusSign        fraction','line_number':846,'multiline':False]
['text':'','line_number':847,'multiline':False]
['text':' The sign is a part.  Each comma is a part, splitting the integer field','line_number':848,'multiline':False]
['text':' into parts for trillions/billions/&c. digits.  The decimal point is a','line_number':849,'multiline':False]
['text':' part.  Cents are a part.  The space between cents and currency is a part','line_number':850,'multiline':False]
['text':' (outside any field).  Last, the currency field is a part.','line_number':851,'multiline':False]
['text':'','line_number':852,'multiline':False]
['text':' Because parts fully partition the formatted string, we only track the','line_number':853,'multiline':False]
['text':' end of each part -- the beginning is implicitly the last part's end.','line_number':854,'multiline':False]
['text':' The fields in order from start to end, then least to most nested.','line_number':861,'multiline':False]
['text':' Index of the current field, in |fields|, being considered to','line_number':864,'multiline':False]
['text':' determine part boundaries.  |lastEnd <= fields[index].begin| is an','line_number':865,'multiline':False]
['text':' invariant.','line_number':866,'multiline':False]
['text':' The end index of the last part produced, always less than or equal','line_number':869,'multiline':False]
['text':' to |limit|, strictly increasing.','line_number':870,'multiline':False]
['text':' The length of the overall formatted string.','line_number':873,'multiline':False]
['text':' If we're out of fields, all that remains are part(s) consisting','line_number':892,'multiline':False]
['text':' of trailing portions of enclosing fields, and maybe a final','line_number':893,'multiline':False]
['text':' literal part.','line_number':894,'multiline':False]
['text':' If additional enclosing fields end where this part ends,','line_number':901,'multiline':False]
['text':' pop them as well.','line_number':902,'multiline':False]
['text':' Otherwise we still have a field to process.','line_number':912,'multiline':False]
['text':' But first, deal with inter-field space.','line_number':917,'multiline':False]
['text':' Space between fields, within an enclosing field, is part','line_number':920,'multiline':False]
['text':' of that enclosing field, until the start of the current','line_number':921,'multiline':False]
['text':' field or the end of the enclosing field, whichever is','line_number':922,'multiline':False]
['text':' earlier.','line_number':923,'multiline':False]
['text':' If there's no enclosing field, the space is a literal.','line_number':929,'multiline':False]
['text':' Otherwise, the part spans a prefix of the current field.  Find','line_number':937,'multiline':False]
['text':' the most-nested field containing that prefix.','line_number':938,'multiline':False]
['text':' If the current field is last, the part extends to its end.','line_number':943,'multiline':False]
['text':' If the next field nests within the current field, push an','line_number':954,'multiline':False]
['text':' enclosing field.  (If there are no nested fields, don't','line_number':955,'multiline':False]
['text':' bother pushing a field that'd be immediately popped.)','line_number':956,'multiline':False]
['text':' Do so until the next field begins after this one.','line_number':963,'multiline':False]
['text':' The next field begins after the current field ends.  Therefore','line_number':969,'multiline':False]
['text':' the current part ends at the end of the current field.','line_number':970,'multiline':False]
['text':' The current field encloses the next one.  The current part','line_number':974,'multiline':False]
['text':' ends where the next field/part will start.','line_number':975,'multiline':False]
['text':' There are no parts left if we've partitioned the entire string.','line_number':991,'multiline':False]
['text':' Finally, generate the result array.','line_number':1008,'multiline':False]
['text':' We're only interested in UFIELD_CATEGORY_NUMBER fields.','line_number':1097,'multiline':False]
['text':' Vacuum up fields in the overall formatted string.','line_number':1104,'multiline':False]
['text':' Obtain a cached mozilla::intl::NumberFormat object.','line_number':1265,'multiline':False]
['text':' Actually format the number','line_number':1278,'multiline':False]
['text':' Tell the analysis the |formatToParts| method can't GC.','line_number':1309,'multiline':False]
