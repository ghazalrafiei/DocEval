['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' This file declares the data structures used to build a control-flow graph','line_number':10,'multiline':False]
['text':' containing MIR.','line_number':11,'multiline':False]
['text':' This block cannot be reached by any means.','line_number':57,'multiline':False]
['text':' This block will unconditionally bail out.','line_number':60,'multiline':False]
['text':' Pushes a copy of a local variable or argument.','line_number':63,'multiline':False]
['text':' Sets a variable slot to the top of the stack, correctly creating copies','line_number':66,'multiline':False]
['text':' as needed.','line_number':67,'multiline':False]
['text':' Assert that the instruction is unused.','line_number':76,'multiline':False]
['text':' Discard the operands of the resume point / instructions if the','line_number':79,'multiline':False]
['text':' following flag are given too.','line_number':80,'multiline':False]
['text':' Discard operands of the instruction and its resume point.','line_number':85,'multiline':False]
['text':' Discard everything and assert that the instruction is not used.','line_number':90,'multiline':False]
['text':' Discard resume point operands only, without discarding the operands','line_number':93,'multiline':False]
['text':' of the current instruction.  Asserts that the instruction is unused.','line_number':94,'multiline':False]
['text':' Remove all references to an instruction such that it can be removed from','line_number':102,'multiline':False]
['text':' the list of instruction, without keeping any dangling pointer to it. This','line_number':103,'multiline':False]
['text':' includes the operands of the instruction, and the resume point if','line_number':104,'multiline':False]
['text':' present.','line_number':105,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':110,'multiline':False]
['text':'//////// BEGIN GRAPH BUILDING INSTRUCTIONS //////////','line_number':111,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':112,'multiline':False]
['text':' Creates a new basic block for a MIR generator. If |pred| is not nullptr,','line_number':114,'multiline':False]
['text':' its slots and stack depth are initialized from |pred|.','line_number':115,'multiline':False]
['text':' Mark this block (and only this block) as unreachable.','line_number':139,'multiline':False]
['text':' Move the definition to the top of the stack.','line_number':150,'multiline':False]
['text':' Move the top of the stack definition under the depth-th stack value.','line_number':153,'multiline':False]
['text':' Exchange 2 stack slots at the defined depth','line_number':156,'multiline':False]
['text':' Note: most of the methods below are hot. Do not un-inline them without','line_number':159,'multiline':False]
['text':' measuring the impact.','line_number':160,'multiline':False]
['text':' Gets the instruction associated with various slot types.','line_number':162,'multiline':False]
['text':' Increase the number of slots available','line_number':177,'multiline':False]
['text':' Initializes a slot value; must not be called for normal stack','line_number':181,'multiline':False]
['text':' operations, as it will not create new SSA names for copies.','line_number':182,'multiline':False]
['text':' Sets the instruction associated with various slot types. The','line_number':190,'multiline':False]
['text':' instruction must lie at the top of the stack.','line_number':191,'multiline':False]
['text':' Tracks an instruction as being pushed onto the operand stack.','line_number':196,'multiline':False]
['text':' Returns the top of the stack, then decrements the virtual stack pointer.','line_number':207,'multiline':False]
['text':' Adds an instruction to this block's instruction list.','line_number':218,'multiline':False]
['text':' Marks the last instruction of the block; no further instructions','line_number':221,'multiline':False]
['text':' can be added.','line_number':222,'multiline':False]
['text':' Existing control instructions should be','line_number':224,'multiline':False]
['text':' removed first.','line_number':225,'multiline':False]
['text':' Adds a phi instruction, but does not set successorWithPhis.','line_number':230,'multiline':False]
['text':' Adds a resume point to this block.','line_number':233,'multiline':False]
['text':' Discard pre-allocated resume point.','line_number':240,'multiline':False]
['text':' Adds a predecessor. Every predecessor must have the same exit stack','line_number':246,'multiline':False]
['text':' depth as the entry state to this block. Adding a predecessor','line_number':247,'multiline':False]
['text':' automatically creates phi nodes and rewrites uses as needed.','line_number':248,'multiline':False]
['text':' Add a predecessor which won't introduce any new phis to this block.','line_number':253,'multiline':False]
['text':' This may be called after the contents of this block have been built.','line_number':254,'multiline':False]
['text':' Stranger utilities used for inlining.','line_number':258,'multiline':False]
['text':' Replaces an edge for a given block with a new block. This is','line_number':263,'multiline':False]
['text':' used for critical edge splitting.','line_number':264,'multiline':False]
['text':'','line_number':265,'multiline':False]
['text':' Note: If successorWithPhis is set, you must not be replacing it.','line_number':266,'multiline':False]
['text':' Removes `pred` from the predecessor list. If this block defines phis,','line_number':270,'multiline':False]
['text':' removes the entry for `pred` and updates the indices of later entries.','line_number':271,'multiline':False]
['text':' This may introduce redundant phis if the new block has fewer','line_number':272,'multiline':False]
['text':' than two predecessors.','line_number':273,'multiline':False]
['text':' A version of removePredecessor which expects that phi operands to','line_number':276,'multiline':False]
['text':' |pred| have already been removed.','line_number':277,'multiline':False]
['text':' Resets all the dominator info so that it can be recomputed.','line_number':280,'multiline':False]
['text':' Sets a back edge. This places phi nodes and rewrites instructions within','line_number':283,'multiline':False]
['text':' the current loop as necessary.','line_number':284,'multiline':False]
['text':' Resets a LOOP_HEADER block to a NORMAL block.  This is needed when','line_number':288,'multiline':False]
['text':' optimizations remove the backedge.','line_number':289,'multiline':False]
['text':' Sets a block to a LOOP_HEADER block, with newBackedge as its backedge.','line_number':292,'multiline':False]
['text':' This is needed when optimizations remove the normal entry to a loop','line_number':293,'multiline':False]
['text':' with multiple entries.','line_number':294,'multiline':False]
['text':' Propagates backedge slots into phis operands of the loop header.','line_number':297,'multiline':False]
['text':' Move an instruction. Movement may cross block boundaries.','line_number':305,'multiline':False]
['text':' Locate the top of the |block|, where it is safe to insert a new','line_number':310,'multiline':False]
['text':' instruction.','line_number':311,'multiline':False]
['text':' Removes an instruction with the intention to discard it.','line_number':315,'multiline':False]
['text':' Same as |void discard(MInstruction* ins)| but assuming that','line_number':325,'multiline':False]
['text':' all operands are already discarded.','line_number':326,'multiline':False]
['text':' Discards a phi instruction and updates predecessor successorWithPhis.','line_number':329,'multiline':False]
['text':' Some instruction which are guarding against some MIRType value, or','line_number':332,'multiline':False]
['text':' against a type expectation should be considered as removing a potenatial','line_number':333,'multiline':False]
['text':' branch where the guard does not hold.  We need to register such','line_number':334,'multiline':False]
['text':' instructions in order to do destructive optimizations correctly, such as','line_number':335,'multiline':False]
['text':' Range Analysis.','line_number':336,'multiline':False]
['text':' Mark this block as having been removed from the graph.','line_number':339,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':345,'multiline':False]
['text':'///////// END GRAPH BUILDING INSTRUCTIONS ///////////','line_number':346,'multiline':False]
['text':'/////////////////////////////////////////////////////','line_number':347,'multiline':False]
['text':' This should only be called before critical edge splitting.','line_number':364,'multiline':False]
['text':' Find or allocate an optimized out constant.','line_number':382,'multiline':False]
['text':' fixup block added by NewFakeLoopPredecessor','line_number':418,'multiline':False]
['text':' Return the number of blocks dominated by this block. All blocks','line_number':483,'multiline':False]
['text':' dominate at least themselves, so this will always be non-zero.','line_number':484,'multiline':False]
['text':' Add |child| to this block's immediately-dominated set.','line_number':492,'multiline':False]
['text':' Remove |child| from this block's immediately-dominated set.','line_number':495,'multiline':False]
['text':' This function retrieves the internal instruction associated with a','line_number':498,'multiline':False]
['text':' slot, and should not be used for normal stack operations. It is an','line_number':499,'multiline':False]
['text':' internal helper that is also used to enhance spew.','line_number':500,'multiline':False]
['text':' Each block originates from a particular script.','line_number':573,'multiline':False]
['text':' Index in the dominator tree.','line_number':580,'multiline':False]
['text':' Copy of a dominator block's outerResumePoint_ which holds the state of','line_number':584,'multiline':False]
['text':' caller frame at the time of the call. If not null, this implies that this','line_number':585,'multiline':False]
['text':' basic block corresponds to an inlined script.','line_number':586,'multiline':False]
['text':' Resume point holding baseline-like frame for the PC corresponding to the','line_number':589,'multiline':False]
['text':' entry of this basic block.','line_number':590,'multiline':False]
['text':' Resume point holding baseline-like frame for the PC corresponding to the','line_number':593,'multiline':False]
['text':' beginning of the call-site which is being inlined after this block.','line_number':594,'multiline':False]
['text':' Unordered list used to verify that all the resume points which are','line_number':598,'multiline':False]
['text':' registered are correctly removed when a basic block is removed.','line_number':599,'multiline':False]
['text':' Utility mark for traversal algorithms.','line_number':608,'multiline':False]
['text':' Track bailouts by storing the current pc in MIR instruction added at','line_number':614,'multiline':False]
['text':' this cycle. This is also used for tracking calls and optimizations when','line_number':615,'multiline':False]
['text':' profiling.','line_number':616,'multiline':False]
['text':' Dominators can't be built after we remove fake loop predecessors.','line_number':747,'multiline':False]
['text':' Iterates on all resume points, phis, and instructions of a MBasicBlock.','line_number':803,'multiline':False]
['text':' Resume points are visited as long as the instruction which holds it is not','line_number':804,'multiline':False]
['text':' discarded.','line_number':805,'multiline':False]
['text':' Last instruction which holds a resume point. To handle the entry point','line_number':808,'multiline':False]
['text':' resume point, it is set to the last instruction, assuming that the last','line_number':809,'multiline':False]
['text':' instruction is not discarded before we visit it.','line_number':810,'multiline':False]
['text':' Definition iterator which is one step ahead when visiting resume points.','line_number':813,'multiline':False]
['text':' This is in order to avoid incrementing the iterator while it is settled','line_number':814,'multiline':False]
['text':' on a discarded instruction.','line_number':815,'multiline':False]
['text':' We use the last instruction as a sentinelle to iterate over the entry','line_number':827,'multiline':False]
['text':' resume point of the basic block, before even starting to iterate on','line_number':828,'multiline':False]
['text':' the instruction list.  Otherwise, the last_ corresponds to the','line_number':829,'multiline':False]
['text':' previous instruction.','line_number':830,'multiline':False]
['text':' In theory, we could but in practice this does not happen.','line_number':841,'multiline':False]
['text':' We use the last instruction to check for the entry resume point,','line_number':860,'multiline':False]
['text':' assert that no control instruction has any resume point.  If so, then','line_number':861,'multiline':False]
['text':' we need to handle this case in this iterator.','line_number':862,'multiline':False]
['text':' namespace jit','line_number':888,'multiline':False]
['text':' namespace js','line_number':889,'multiline':False]
['text':' jit_MIRGraph_h ','line_number':891,'multiline':True]
