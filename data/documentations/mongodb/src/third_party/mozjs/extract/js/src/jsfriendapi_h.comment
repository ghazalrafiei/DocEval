['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::GetClass','line_number':23,'multiline':False]
['text':' JS::shadow::Function','line_number':24,'multiline':False]
['text':' JS::shadow::Object','line_number':25,'multiline':False]
['text':' namespace JS ','line_number':36,'multiline':True]
['text':'*
 * Allocate an object in exactly the same way as JS_NewObjectWithGivenProto, but
 * without invoking the metadata callback on it.  This allows creation of
 * internal bookkeeping objects that are guaranteed to not have metadata
 * attached to them.
 ','line_number':47,'multiline':True]
['text':' Raw JSScript* because this needs to be callable from a signal handler.','line_number':62,'multiline':False]
['text':'*
 * Determine whether the given object is backed by a DeadObjectProxy.
 *
 * Such objects hold no other objects (they have no outgoing reference edges)
 * and will throw if you touch them (e.g. by reading/writing a property).
 ','line_number':67,'multiline':True]
['text':'*
 * Creates a new dead wrapper object in the given scope. To be used when
 * attempting to wrap objects from scopes which are already dead.
 *
 * If origObject is passed, it must be an proxy object, and will be
 * used to determine the characteristics of the new dead wrapper.
 ','line_number':75,'multiline':True]
['text':'*
 * Get the script private value associated with an object, if any.
 *
 * The private value is set with SetScriptPrivate() or SetModulePrivate() and is
 * internally stored on the relevant ScriptSourceObject.
 *
 * This is used by the cycle collector to trace through
 * ScriptSourceObjects. This allows private values to contain an nsISupports
 * pointer and hence support references to cycle collected C++ objects.
 ','line_number':87,'multiline':True]
['text':' namespace js','line_number':99,'multiline':False]
['text':'
 * Used by the cycle collector to trace through a shape or object group and
 * all cycle-participating data it reaches, using bounded stack space.
 ','line_number':101,'multiline':True]
['text':'*
 * Copy the own properties of src to dst in a fast way.  src and dst must both
 * be native and must be in the compartment of cx.  They must have the same
 * class, the same parent, and the same prototype.  Class reserved slots will
 * NOT be copied.
 *
 * dst must not have any properties on it before this function is called.
 *
 * src must have been allocated via JS_NewObjectWithoutMetadata so that we can
 * be sure it has no metadata that needs copying to dst.  This also means that
 * dst needs to have the compartment global as its parent.  This function will
 * preserve the existing metadata on dst, if any.
 ','line_number':118,'multiline':True]
['text':' namespace js','line_number':143,'multiline':False]
['text':'*
 * Set all of the uninitialized lexicals on an object to undefined. Return
 * true if any lexicals were initialized and false otherwise.
 * ','line_number':147,'multiline':True]
['text':'*
 * Whether we are poisoning unused/released data for error detection. Governed
 * by the JS_GC_ALLOW_EXTRA_POISONING #ifdef as well as the
 * $JSGC_EXTRA_POISONING environment variable.
 ','line_number':154,'multiline':True]
['text':' namespace JS','line_number':168,'multiline':False]
['text':'*
 * Copies all own properties and private fields from |obj| to |target|. Both
 * |obj| and |target| must not be cross-compartment wrappers because we have to
 * enter their realms.
 *
 * This function immediately enters a realm, and does not impose any
 * restrictions on the realm of |cx|.
 ','line_number':170,'multiline':True]
['text':'*
 * Use the runtime's internal handling of job queues for Promise jobs.
 *
 * Most embeddings, notably web browsers, will have their own task scheduling
 * systems and need to integrate handling of Promise jobs into that, so they
 * will want to manage job queues themselves. For basic embeddings such as the
 * JS shell that don't have an event loop of their own, it's easier to have
 * SpiderMonkey handle job queues internally.
 *
 * Note that the embedding still has to trigger processing of job queues at
 * right time(s), such as after evaluation of a script has run to completion.
 ','line_number':213,'multiline':True]
['text':'*
 * Enqueue |job| on the internal job queue.
 *
 * This is useful in tests for creating situations where a call occurs with no
 * other JavaScript on the stack.
 ','line_number':227,'multiline':True]
['text':'*
 * Instruct the runtime to stop draining the internal job queue.
 *
 * Useful if the embedding is in the process of quitting in reaction to a
 * builtin being called, or if it wants to resume executing jobs later on.
 ','line_number':235,'multiline':True]
['text':' Weak map tracer callback, called once for every binding of every','line_number':261,'multiline':False]
['text':' weak map that was live at the time of the last garbage collection.','line_number':262,'multiline':False]
['text':'','line_number':263,'multiline':False]
['text':' m will be nullptr if the weak map is not contained in a JS Object.','line_number':264,'multiline':False]
['text':'','line_number':265,'multiline':False]
['text':' The callback should not GC (and will assert in a debug build if it does','line_number':266,'multiline':False]
['text':' so.)','line_number':267,'multiline':False]
['text':'*
 * Invoke cellCallback on every gray JSObject in the given zone.
 ','line_number':286,'multiline':True]
['text':' Trace the heap and check there are no black to gray edges. These are','line_number':293,'multiline':False]
['text':' not allowed since the cycle collector could throw away the gray thing and','line_number':294,'multiline':False]
['text':' leave a dangling pointer.','line_number':295,'multiline':False]
['text':'','line_number':296,'multiline':False]
['text':' This doesn't trace weak maps as these are handled separately.','line_number':297,'multiline':False]
['text':' Note: this returns nullptr iff |zone| is the atoms zone.','line_number':301,'multiline':False]
['text':' Returns the first realm's global in a compartment. Note: this is not','line_number':304,'multiline':False]
['text':' guaranteed to always be the same realm because individual realms can be','line_number':305,'multiline':False]
['text':' collected by the GC.','line_number':306,'multiline':False]
['text':' Returns true if the compartment contains a global object and this global is','line_number':310,'multiline':False]
['text':' not being collected.','line_number':311,'multiline':False]
['text':' Returns true if this compartment can be shared across multiple Realms.  Used','line_number':314,'multiline':False]
['text':' when we're looking for an existing compartment to place a new Realm in.','line_number':315,'multiline':False]
['text':' This is equal to |&JSObject::class_|.  Use it in places where you don't want','line_number':318,'multiline':False]
['text':' to #include vm/JSObject.h.','line_number':319,'multiline':False]
['text':' Returns the key for the class inherited by a given standard class (that','line_number':324,'multiline':False]
['text':' is to say, the prototype of this standard class's prototype).','line_number':325,'multiline':False]
['text':'','line_number':326,'multiline':False]
['text':' You must be sure that this corresponds to a standard class with a cached','line_number':327,'multiline':False]
['text':' JSProtoKey before calling this function. In general |key| will match the','line_number':328,'multiline':False]
['text':' cached proto key, except in cases where multiple JSProtoKeys share a','line_number':329,'multiline':False]
['text':' JSClass.','line_number':330,'multiline':False]
['text':' [Object] has nothing to inherit from.','line_number':332,'multiline':False]
['text':' If we're ClassSpec defined return the proto key from that','line_number':337,'multiline':False]
['text':' Otherwise, we inherit [Object].','line_number':342,'multiline':False]
['text':' CrossCompartmentWrappers are shared by all realms within the compartment, so','line_number':353,'multiline':False]
['text':' getting a wrapper's realm usually doesn't make sense.','line_number':354,'multiline':False]
['text':'*
 * Add some or all property keys of obj to the id vector *props.
 *
 * The flags parameter controls which property keys are added. Pass a
 * combination of the following bits:
 *
 *     JSITER_OWNONLY - Don't also search the prototype chain; only consider
 *       obj's own properties.
 *
 *     JSITER_HIDDEN - Include nonenumerable properties.
 *
 *     JSITER_SYMBOLS - Include property keys that are symbols. The default
 *       behavior is to filter out symbols.
 *
 *     JSITER_SYMBOLSONLY - Exclude non-symbol property keys.
 *
 * This is the closest C++ API we have to `Reflect.ownKeys(obj)`, or
 * equivalently, the ES6 [[OwnPropertyKeys]] internal method. Pass
 * `JSITER_OWNONLY | JSITER_HIDDEN | JSITER_SYMBOLS` as flags to get
 * results that match the output of Reflect.ownKeys.
 ','line_number':402,'multiline':True]
['text':'*
 * Determine whether the given string is an array index in the sense of
 * <https://tc39.github.io/ecma262/#array-index>.
 *
 * If it isn't, returns false.
 *
 * If it is, returns true and outputs the index in *indexp.
 ','line_number':430,'multiline':True]
['text':'*
 * Overload of StringIsArrayIndex taking a (char16_t*,length) pair. Behaves
 * the same as the JSLinearString version.
 ','line_number':440,'multiline':True]
['text':'
 * NB: keep these in sync with the copy in builtin/SelfHostingDefines.h.
 ','line_number':454,'multiline':True]
['text':' 0x1 is no longer used ','line_number':457,'multiline':True]
['text':' 0x2 is no longer used ','line_number':458,'multiline':True]
['text':' Include private names in iteration ','line_number':459,'multiline':True]
['text':' iterate over obj's own properties only ','line_number':460,'multiline':True]
['text':' also enumerate non-enumerable properties ','line_number':461,'multiline':True]
['text':' also include symbol property keys ','line_number':462,'multiline':True]
['text':' exclude string property keys ','line_number':463,'multiline':True]
['text':' for-await-of ','line_number':464,'multiline':True]
['text':' Implemented in jsexn.cpp. ','line_number':480,'multiline':True]
['text':'*
 * Get an error type name from a JSExnType constant.
 * Returns nullptr for invalid arguments and JSEXN_INTERNALERR
 ','line_number':482,'multiline':True]
['text':' Implemented in CrossCompartmentWrapper.cpp. ','line_number':489,'multiline':True]
['text':'
 * These filters are designed to be ephemeral stack classes, and thus don't
 * do any rooting or holding of their members.
 ','line_number':500,'multiline':True]
['text':' Implemented in jsdate.cpp. ','line_number':528,'multiline':True]
['text':'* Detect whether the internal date value is NaN. ','line_number':530,'multiline':True]
['text':' namespace js ','line_number':538,'multiline':True]
['text':' Implemented in vm/StructuredClone.cpp. ','line_number':542,'multiline':True]
['text':' namespace js','line_number':545,'multiline':False]
['text':' Statically asserted in FunctionFlags.cpp. ','line_number':549,'multiline':True]
['text':' namespace js','line_number':552,'multiline':False]
['text':'*
 * PrepareScriptEnvironmentAndInvoke asserts the embedder has registered a
 * ScriptEnvironmentPreparer and then it calls the preparer's 'invoke' method
 * with the given |closure|, with the assumption that the preparer will set up
 * any state necessary to run script in |global|, invoke |closure| with a valid
 * JSContext*, report any exceptions thrown from the closure, and return.
 *
 * PrepareScriptEnvironmentAndInvoke will report any exceptions that are thrown
 * by the closure.  Consumers who want to propagate back whether the closure
 * succeeded should do so via members of the closure itself.
 ','line_number':591,'multiline':True]
['text':' Abstract base class for objects that build allocation metadata for JavaScript','line_number':618,'multiline':False]
['text':' values.','line_number':619,'multiline':False]
['text':' Return a metadata object for the newly constructed object |obj|, or','line_number':623,'multiline':False]
['text':' nullptr if there's no metadata to attach.','line_number':624,'multiline':False]
['text':'','line_number':625,'multiline':False]
['text':' Implementations should treat all errors as fatal; there is no way to','line_number':626,'multiline':False]
['text':' report errors from this callback. In particular, the caller provides an','line_number':627,'multiline':False]
['text':' oomUnsafe for overriding implementations to use.','line_number':628,'multiline':False]
['text':'*
 * Specify a callback to invoke when creating each JS object in the current
 * compartment, which may return a metadata object to associate with the
 * object.
 ','line_number':635,'multiline':True]
['text':'* Get the metadata associated with an object. ','line_number':643,'multiline':True]
['text':'*
 * Helper function for HTMLDocument and HTMLFormElement.
 *
 * These are the only two interfaces that have [OverrideBuiltins], a named
 * getter, and no named setter. They're implemented as proxies with a custom
 * getOwnPropertyDescriptor() method. Unfortunately, overriding
 * getOwnPropertyDescriptor() automatically affects the behavior of set(),
 * which normally is just common sense but is *not* desired for these two
 * interfaces.
 *
 * The fix is for these two interfaces to override set() to ignore the
 * getOwnPropertyDescriptor() override.
 *
 * SetPropertyIgnoringNamedGetter is exposed to make it easier to override
 * set() in this way.  It carries out all the steps of BaseProxyHandler::set()
 * except the initial getOwnPropertyDescriptor() call.  The caller must supply
 * that descriptor as the 'ownDesc' parameter.
 *
 * Implemented in proxy/BaseProxyHandler.cpp.
 ','line_number':654,'multiline':True]
['text':' This function is for one specific use case, please don't use this for','line_number':680,'multiline':False]
['text':' anything else!','line_number':681,'multiline':False]
['text':' Matches the condition in js/src/jit/ProcessExecutableMemory.cpp','line_number':688,'multiline':False]
['text':' Parameters use void* types to avoid #including windows.h. The return value of','line_number':690,'multiline':False]
['text':' this function is returned from the exception handler.','line_number':691,'multiline':False]
['text':' PEXECTION_RECORD','line_number':692,'multiline':False]
['text':' PCONTEXT','line_number':693,'multiline':False]
['text':'*
 * Windows uses "structured exception handling" to handle faults. When a fault
 * occurs, the stack is searched for a handler (similar to C++ exception
 * handling). If the search does not find a handler, the "unhandled exception
 * filter" is called. Breakpad uses the unhandled exception filter to do crash
 * reporting. Unfortunately, on Win64, JIT code on the stack completely throws
 * off this unwinding process and prevents the unhandled exception filter from
 * being called. The reason is that Win64 requires unwind information be
 * registered for all code regions and JIT code has none. While it is possible
 * to register full unwind information for JIT code, this is a lot of work (one
 * has to be able to recover the frame pointer at any PC) so instead we register
 * a handler for all JIT code that simply calls breakpad's unhandled exception
 * filter (which will perform crash reporting and then terminate the process).
 * This would be wrong if there was an outer __try block that expected to handle
 * the fault, but this is not generally allowed.
 *
 * Gecko must call SetJitExceptionFilter before any JIT code is compiled and
 * only once per process.
 ','line_number':695,'multiline':True]
['text':'*
 * This function only reports GC heap memory,
 * and not malloc allocated memory associated with GC things.
 ','line_number':729,'multiline':True]
['text':' Gather a set of remote window proxies by calling the callback on every','line_number':740,'multiline':False]
['text':' compartment, then transform them into cross-compartment wrappers to newTarget','line_number':741,'multiline':False]
['text':' via brain transplants. If there's a proxy in newTarget's compartment, it will','line_number':742,'multiline':False]
['text':' get swapped with newTarget, and the value of newTarget will be updated. If','line_number':743,'multiline':False]
['text':' the callback returns null for a compartment, no cross-compartment wrapper','line_number':744,'multiline':False]
['text':' will be created for that compartment. Any non-null values it returns must be','line_number':745,'multiline':False]
['text':' DOM remote proxies from the compartment that was passed in.','line_number':746,'multiline':False]
['text':' namespace js ','line_number':753,'multiline':True]
['text':' jsfriendapi_h ','line_number':755,'multiline':True]
