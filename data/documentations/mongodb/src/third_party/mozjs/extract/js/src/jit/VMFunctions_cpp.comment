['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':23,'multiline':False]
['text':' js::AutoCheckRecursionLimit','line_number':24,'multiline':False]
['text':' js::IsWindow','line_number':25,'multiline':False]
['text':' js::PlainObject','line_number':29,'multiline':False]
['text':' js::CreateThis','line_number':41,'multiline':False]
['text':' Unexpected return type for a VMFunction. ','line_number':65,'multiline':True]
['text':' Convert argument types to properties of the argument known by the jit.','line_number':221,'multiline':False]
['text':' Convert argument type to whether or not it should be passed in a float','line_number':341,'multiline':False]
['text':' register on platforms that have them, like x64.','line_number':342,'multiline':False]
['text':' Convert argument types to root types used by the gc, see MarkJitExitFrame.','line_number':352,'multiline':False]
['text':' Fail for Handle types that aren't specialized above.','line_number':443,'multiline':False]
['text':' Construct a bit mask from a list of types.  The mask is constructed as an OR','line_number':516,'multiline':False]
['text':' of the mask produced for each argument. The result of each argument is','line_number':517,'multiline':False]
['text':' shifted by its index, such that the result of the first argument is on the','line_number':518,'multiline':False]
['text':' low bits of the mask, and the result of the last argument in part of the','line_number':519,'multiline':False]
['text':' high bits of the mask.','line_number':520,'multiline':False]
['text':' Helper template to build the VMFunctionData for a function.','line_number':543,'multiline':False]
['text':' extraValuesToPop = ','line_number':576,'multiline':True]
['text':' GCC warns when the signature does not have matching attributes (for example','line_number':586,'multiline':False]
['text':' [[nodiscard]]). Squelch this warning to avoid a GCC-only footgun.','line_number':587,'multiline':False]
['text':' Generate VMFunctionData array.','line_number':593,'multiline':False]
['text':' Generate arrays storing C++ function pointers. These pointers are not stored','line_number':611,'multiline':False]
['text':' in VMFunctionData because there's no good way to cast them to void* in','line_number':612,'multiline':False]
['text':' constexpr code. Compilers are smart enough to treat the const array below as','line_number':613,'multiline':False]
['text':' constexpr.','line_number':614,'multiline':False]
['text':' Generate all VM function wrappers.','line_number':639,'multiline':False]
['text':' Assert the list is sorted by name.','line_number':656,'multiline':False]
['text':' Data in the argument vector is arranged for a JIT -> JIT call.','line_number':699,'multiline':False]
['text':' See CreateThisFromIon for why this can be NullValue.','line_number':722,'multiline':False]
['text':' If |this| hasn't been created, or is JS_UNINITIALIZED_LEXICAL,','line_number':727,'multiline':False]
['text':' we can use normal construction code without creating an extraneous','line_number':728,'multiline':False]
['text':' object.','line_number':729,'multiline':False]
['text':' Otherwise the default |this| has already been created.  We could','line_number':743,'multiline':False]
['text':' almost perform a *call* at this point, but we'd break |new.target|','line_number':744,'multiline':False]
['text':' in the function.  So in this one weird case we call a one-off','line_number':745,'multiline':False]
['text':' construction path that *won't* set |this| to JS_IS_CONSTRUCTING.','line_number':746,'multiline':False]
['text':' Ensure new.target immediately follows the actual arguments (the arguments','line_number':777,'multiline':False]
['text':' rectifier added padding).','line_number':778,'multiline':False]
['text':' ignoresReturnValue = ','line_number':785,'multiline':True]
['text':' Overwrite |this| with the return value.','line_number':790,'multiline':False]
['text':' We just failed the jitStackLimit check. There are two possible reasons:','line_number':796,'multiline':False]
['text':'  1) jitStackLimit was the real stack limit and we're over-recursed','line_number':797,'multiline':False]
['text':'  2) jitStackLimit was set to UINTPTR_MAX by JSContext::requestInterrupt','line_number':798,'multiline':False]
['text':'     and we need to call JSContext::handleInterrupt.','line_number':799,'multiline':False]
['text':' This handles 1).','line_number':801,'multiline':False]
['text':' This handles 2).','line_number':814,'multiline':False]
['text':' The stack check in Baseline happens before pushing locals so we have to','line_number':822,'multiline':False]
['text':' account for that by including script->nslots() in the C++ recursion check.','line_number':823,'multiline':False]
['text':' Length must fit in an int32 because we guard against overflow before','line_number':895,'multiline':False]
['text':' calling this VM function.','line_number':896,'multiline':False]
['text':' SetArrayLength is called by IC stubs for SetProp and SetElem on arrays'','line_number':919,'multiline':False]
['text':' "length" property.','line_number':920,'multiline':False]
['text':'','line_number':921,'multiline':False]
['text':' ArraySetLength below coerces |value| before checking for length being','line_number':922,'multiline':False]
['text':' writable, and in the case of illegal values, will throw RangeError even','line_number':923,'multiline':False]
['text':' when "length" is not writable. This is incorrect observable behavior,','line_number':924,'multiline':False]
['text':' as a regular [[Set]] operation will check for "length" being','line_number':925,'multiline':False]
['text':' writable before attempting any assignment.','line_number':926,'multiline':False]
['text':'','line_number':927,'multiline':False]
['text':' So, perform ArraySetLength if and only if "length" is writable.','line_number':928,'multiline':False]
['text':' The JIT creates call objects in the nursery, so elides barriers for','line_number':1023,'multiline':False]
['text':' the initializing writes. The interpreter, however, may have allocated','line_number':1024,'multiline':False]
['text':' the call object tenured, so barrier as needed before re-entering.','line_number':1025,'multiline':False]
['text':' CreateThis expects rval to be this magic value.','line_number':1055,'multiline':False]
['text':' Return JS_IS_CONSTRUCTING for cases not supported by the inline call path.','line_number':1068,'multiline':False]
['text':' If newTarget is not a function or is a function with a possibly-getter','line_number':1080,'multiline':False]
['text':' .prototype property, return NullValue to signal to LCallGeneric that it has','line_number':1081,'multiline':False]
['text':' to take the slow path. Note that we return NullValue instead of a','line_number':1082,'multiline':False]
['text':' MagicValue only because it's easier and faster to check for in JIT code','line_number':1083,'multiline':False]
['text':' (if we returned a MagicValue, JIT code would have to check both the type','line_number':1084,'multiline':False]
['text':' tag and the JSWhyMagic payload).','line_number':1085,'multiline':False]
['text':' We shouldn't GC here as this is called directly from IC code.','line_number':1169,'multiline':False]
['text':' We shouldn't GC here as this is called directly from IC code.','line_number':1181,'multiline':False]
['text':' Initialize this to appease Valgrind.','line_number':1188,'multiline':False]
['text':' IC code calls this directly so we shouldn't GC.','line_number':1197,'multiline':False]
['text':' From: Compartment::getNonWrapperObjectForCurrentCompartment','line_number':1203,'multiline':False]
['text':' Note that if the object is same-compartment, but has been wrapped into a','line_number':1204,'multiline':False]
['text':' different compartment, we need to unwrap it and return the bare same-','line_number':1205,'multiline':False]
['text':' compartment object. Note again that windows are always wrapped by a','line_number':1206,'multiline':False]
['text':' WindowProxy even when same-compartment so take care not to strip this','line_number':1207,'multiline':False]
['text':' particular wrapper.','line_number':1208,'multiline':False]
['text':' stopAtWindowProxy = ','line_number':1209,'multiline':True]
['text':' Try to Lookup an existing wrapper for this object. We assume that','line_number':1216,'multiline':False]
['text':' if we can find such a wrapper, not calling preWrap is correct.','line_number':1217,'multiline':False]
['text':' Ensure the wrapper is still exposed.','line_number':1221,'multiline':False]
['text':' DebugEpilogue popped the frame by updating packedExitFP, so run the','line_number':1236,'multiline':False]
['text':' stop event here before we enter the exception handler.','line_number':1237,'multiline':False]
['text':' If DebugAPI::onLeaveFrame returns |true| we have to return the frame's','line_number':1249,'multiline':False]
['text':' return value. If it returns |false|, the debugger threw an exception.','line_number':1250,'multiline':False]
['text':' In both cases we have to pop debug scopes.','line_number':1251,'multiline':False]
['text':' Unwind to the outermost environment.','line_number':1254,'multiline':False]
['text':' Pop this frame by updating packedExitFP, so that the exception','line_number':1259,'multiline':False]
['text':' handling code will start at the previous frame.','line_number':1260,'multiline':False]
['text':' Minus one because we don't want to include the return value.','line_number':1294,'multiline':False]
['text':' The |stackValues| argument points to the JSOp::Resume operands on the','line_number':1310,'multiline':False]
['text':' native stack. Because the stack grows down, these values are:','line_number':1311,'multiline':False]
['text':'','line_number':1312,'multiline':False]
['text':'   [resumeKind, argument, generator, ..]','line_number':1313,'multiline':False]
['text':' The BaselineFrame has just been constructed by JSOp::Resume in the','line_number':1331,'multiline':False]
['text':' caller. We need to set its debuggee flag as necessary.','line_number':1332,'multiline':False]
['text':'','line_number':1333,'multiline':False]
['text':' If a breakpoint is set on JSOp::AfterYield, or stepping is enabled,','line_number':1334,'multiline':False]
['text':' we may already have done this work. Don't fire onEnterFrame again.','line_number':1335,'multiline':False]
['text':' Fast path: we managed to allocate the array inline; initialize the','line_number':1395,'multiline':False]
['text':' slots.','line_number':1396,'multiline':False]
['text':' The Baseline Interpreter calls HandleDebugTrap for every op when the script','line_number':1420,'multiline':False]
['text':' is in step mode or has breakpoints. The Baseline Compiler can toggle','line_number':1421,'multiline':False]
['text':' breakpoints more granularly for specific bytecode PCs.','line_number':1422,'multiline':False]
['text':' JSOp::AfterYield will set the frame's debuggee flag and call the','line_number':1431,'multiline':False]
['text':' onEnterFrame handler, but if we set a breakpoint there we have to do','line_number':1432,'multiline':False]
['text':' it now.','line_number':1433,'multiline':False]
['text':' If the frame is not a debuggee we're done. This can happen, for instance,','line_number':1440,'multiline':False]
['text':' if the onEnterFrame hook called removeDebuggee.','line_number':1441,'multiline':False]
['text':' This function is called from Ion code for StoreElementHole's OOL path.','line_number':1555,'multiline':False]
['text':' In this case we know the object is native.','line_number':1556,'multiline':False]
['text':' FIXME: check runtime?','line_number':1570,'multiline':False]
['text':' Check what we can, so that we'll hopefully assert/crash if we get a','line_number':1579,'multiline':False]
['text':' bogus object (pointer).','line_number':1580,'multiline':False]
['text':' We can't closely inspect strings from another runtime.','line_number':1596,'multiline':False]
['text':' We can't closely inspect symbols from another runtime.','line_number':1631,'multiline':False]
['text':' Loading DOM_OBJECT_SLOT, which must be the first slot.','line_number':1754,'multiline':False]
['text':' Loading DOM_OBJECT_SLOT, which must be the first slot.','line_number':1787,'multiline':False]
['text':' IC code calls this directly so we shouldn't GC.','line_number':1796,'multiline':False]
['text':' ensureLinear is intentionally called with a nullptr to avoid OOM','line_number':1803,'multiline':False]
['text':' reporting; if it fails, we will continue to the next stub.','line_number':1804,'multiline':False]
['text':' Only check the first character because we want this function to be','line_number':1819,'multiline':False]
['text':' fast.','line_number':1820,'multiline':False]
['text':' Fast path used by megamorphic IC stubs. Unlike our other property','line_number':1830,'multiline':False]
['text':' lookup paths, this is optimized to be as fast as possible for simple','line_number':1831,'multiline':False]
['text':' data property lookups.','line_number':1832,'multiline':False]
['text':' Property not found. Watch out for Class hooks and TypedArrays.','line_number':1850,'multiline':False]
['text':' Don't skip past TypedArrayObjects if the id can be a TypedArray index.','line_number':1856,'multiline':False]
['text':' Condition checked by caller.','line_number':1879,'multiline':False]
['text':' Watch out for ids that may be stored in dense elements.','line_number':1908,'multiline':False]
['text':' Condition checked by caller.','line_number':1921,'multiline':False]
['text':' vp[0] contains the id, result will be stored in vp[1].','line_number':1924,'multiline':False]
['text':' Window objects may require outerizing (passing the WindowProxy to the','line_number':1963,'multiline':False]
['text':' getter/setter), so we don't support them here.','line_number':1964,'multiline':False]
['text':' Property not found. Watch out for Class hooks.','line_number':1986,'multiline':False]
['text':' vp[0] contains the id, result will be stored in vp[1].','line_number':2009,'multiline':False]
['text':' Property not found. Watch out for Class hooks and TypedArrays.','line_number':2024,'multiline':False]
['text':' Fail if there's a resolve hook, unless the mayResolve hook tells us','line_number':2026,'multiline':False]
['text':' the resolve hook won't define a property with this id.','line_number':2027,'multiline':False]
['text':' Don't skip past TypedArrayObjects if the id can be a TypedArray','line_number':2032,'multiline':False]
['text':' index.','line_number':2033,'multiline':False]
['text':' If implementing Object.hasOwnProperty, don't follow protochain.','line_number':2050,'multiline':False]
['text':' Get prototype. Objects that may allow dynamic prototypes are already','line_number':2055,'multiline':False]
['text':' filtered out above.','line_number':2056,'multiline':False]
['text':' Missing property.','line_number':2060,'multiline':False]
['text':' Fail if there's a resolve hook, unless the mayResolve hook tells','line_number':2096,'multiline':False]
['text':' us the resolve hook won't define a property with this id.','line_number':2097,'multiline':False]
['text':' TypedArrayObject are also native and contain indexed properties.','line_number':2101,'multiline':False]
['text':' Convert rhs first.','line_number':2182,'multiline':False]
['text':' lhs is already string.','line_number':2189,'multiline':False]
['text':' Convert lhs first.','line_number':2193,'multiline':False]
['text':' rhs is already string.','line_number':2199,'multiline':False]
['text':' Called from CreateDependentString::generateFallback.','line_number':2227,'multiline':False]
['text':' Called to allocate a BigInt if inline allocation failed.','line_number':2237,'multiline':False]
['text':' Negative numbers or zero will bail out to the slow path, which in turn will','line_number':2254,'multiline':False]
['text':' raise an invalid argument exception or create a correct object with zero','line_number':2255,'multiline':False]
['text':' elements.','line_number':2256,'multiline':False]
['text':' Use stderr instead of stdout because this is only used for debug','line_number':2816,'multiline':False]
['text':' output. stderr is less likely to interfere with the program's normal','line_number':2817,'multiline':False]
['text':' output, and it's always unbuffered.','line_number':2818,'multiline':False]
['text':' namespace jit','line_number':2832,'multiline':False]
['text':' namespace js','line_number':2833,'multiline':False]
