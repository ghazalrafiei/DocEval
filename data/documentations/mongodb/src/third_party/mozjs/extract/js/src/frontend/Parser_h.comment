['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS parser. ','line_number':7,'multiline':True]
['text':'
 * [SMDOC] JS Parser
 *
 * JS parsers capable of generating ASTs from source text.
 *
 * A parser embeds token stream information, then gets and matches tokens to
 * generate a syntax tree that, if desired, BytecodeEmitter will use to compile
 * bytecode.
 *
 * Like token streams (see the comment near the top of TokenStream.h), parser
 * classes are heavily templatized -- along the token stream's character-type
 * axis, and also along a full-parse/syntax-parse axis.  Certain limitations of
 * C++ (primarily the inability to partially specialize function templates),
 * plus the desire to minimize compiled code size in duplicate function
 * template instantiations wherever possible, mean that Parser exhibits much of
 * the same unholy template/inheritance complexity as token streams.
 *
 * == ParserSharedBase ==
 *
 * ParserSharedBase is the base class for both regular JS and BinAST parsing.
 * This class contains common fields and methods between both parsers. There is
 * currently no BinAST parser here so this can potentially be merged into the
 * ParserBase type below.
 *
 * == ParserBase → ParserSharedBase, ErrorReportMixin ==
 *
 * ParserBase is the base class for regular JS parser, shared by all regular JS
 * parsers of all character types and parse-handling behavior.  It stores
 * everything character- and handler-agnostic.
 *
 * ParserBase's most important field is the parser's token stream's
 * |TokenStreamAnyChars| component, for all tokenizing aspects that are
 * character-type-agnostic.  The character-type-sensitive components residing
 * in |TokenStreamSpecific| (see the comment near the top of TokenStream.h)
 * live elsewhere in this hierarchy.  These separate locations are the reason
 * for the |AnyCharsAccess| template parameter to |TokenStreamChars| and
 * |TokenStreamSpecific|.
 *
 * == PerHandlerParser<ParseHandler> → ParserBase ==
 *
 * Certain parsing behavior varies between full parsing and syntax-only parsing
 * but does not vary across source-text character types.  For example, the work
 * to "create an arguments object for a function" obviously varies between
 * syntax and full parsing but (because no source characters are examined) does
 * not vary by source text character type.  Such functionality is implemented
 * through functions in PerHandlerParser.
 *
 * Functionality only used by syntax parsing or full parsing doesn't live here:
 * it should be implemented in the appropriate Parser<ParseHandler> (described
 * further below).
 *
 * == GeneralParser<ParseHandler, Unit> → PerHandlerParser<ParseHandler> ==
 *
 * Most parsing behavior varies across the character-type axis (and possibly
 * along the full/syntax axis).  For example:
 *
 *   * Parsing ECMAScript's Expression production, implemented by
 *     GeneralParser::expr, varies in this manner: different types are used to
 *     represent nodes in full and syntax parsing (ParseNode* versus an enum),
 *     and reading the tokens comprising the expression requires inspecting
 *     individual characters (necessarily dependent upon character type).
 *   * Reporting an error or warning does not depend on the full/syntax parsing
 *     distinction.  But error reports and warnings include a line of context
 *     (or a slice of one), for pointing out where a mistake was made.
 *     Computing such line of context requires inspecting the source text to
 *     make that line/slice of context, which requires knowing the source text
 *     character type.
 *
 * Such functionality, implemented using identical function code across these
 * axes, should live in GeneralParser.
 *
 * GeneralParser's most important field is the parser's token stream's
 * |TokenStreamSpecific| component, for all aspects of tokenizing that (contra
 * |TokenStreamAnyChars| in ParserBase above) are character-type-sensitive.  As
 * noted above, this field's existence separate from that in ParserBase
 * motivates the |AnyCharsAccess| template parameters on various token stream
 * classes.
 *
 * Everything in PerHandlerParser *could* be folded into GeneralParser (below)
 * if desired.  We don't fold in this manner because all such functions would
 * be instantiated once per Unit -- but if exactly equivalent code would be
 * generated (because PerHandlerParser functions have no awareness of Unit),
 * it's risky to *depend* upon the compiler coalescing the instantiations into
 * one in the final binary.  PerHandlerParser guarantees no duplication.
 *
 * == Parser<ParseHandler, Unit> final → GeneralParser<ParseHandler, Unit> ==
 *
 * The final (pun intended) axis of complexity lies in Parser.
 *
 * Some functionality depends on character type, yet also is defined in
 * significantly different form in full and syntax parsing.  For example,
 * attempting to parse the source text of a module will do so in full parsing
 * but immediately fail in syntax parsing -- so the former is a mess'o'code
 * while the latter is effectively |return null();|.  Such functionality is
 * defined in Parser<SyntaxParseHandler or FullParseHandler, Unit> as
 * appropriate.
 *
 * There's a crucial distinction between GeneralParser and Parser, that
 * explains why both must exist (despite taking exactly the same template
 * parameters, and despite GeneralParser and Parser existing in a one-to-one
 * relationship).  GeneralParser is one unspecialized template class:
 *
 *   template<class ParseHandler, typename Unit>
 *   class GeneralParser : ...
 *   {
 *     ...parsing functions...
 *   };
 *
 * but Parser is one undefined template class with two separate
 * specializations:
 *
 *   // Declare, but do not define.
 *   template<class ParseHandler, typename Unit> class Parser;
 *
 *   // Define a syntax-parsing specialization.
 *   template<typename Unit>
 *   class Parser<SyntaxParseHandler, Unit> final
 *     : public GeneralParser<SyntaxParseHandler, Unit>
 *   {
 *     ...parsing functions...
 *   };
 *
 *   // Define a full-parsing specialization.
 *   template<typename Unit>
 *   class Parser<SyntaxParseHandler, Unit> final
 *     : public GeneralParser<SyntaxParseHandler, Unit>
 *   {
 *     ...parsing functions...
 *   };
 *
 * This odd distinction is necessary because C++ unfortunately doesn't allow
 * partial function specialization:
 *
 *   // BAD: You can only specialize a template function if you specify *every*
 *   //      template parameter, i.e. ParseHandler *and* Unit.
 *   template<typename Unit>
 *   void
 *   GeneralParser<SyntaxParseHandler, Unit>::foo() {}
 *
 * But if you specialize Parser *as a class*, then this is allowed:
 *
 *   template<typename Unit>
 *   void
 *   Parser<SyntaxParseHandler, Unit>::foo() {}
 *
 *   template<typename Unit>
 *   void
 *   Parser<FullParseHandler, Unit>::foo() {}
 *
 * because the only template parameter on the function is Unit -- and so all
 * template parameters *are* varying, not a strict subset of them.
 *
 * So -- any parsing functionality that is differently defined for different
 * ParseHandlers, *but* is defined textually identically for different Unit
 * (even if different code ends up generated for them by the compiler), should
 * reside in Parser.
 ','line_number':12,'multiline':True]
['text':' CompilationState','line_number':180,'multiline':False]
['text':' FunctionSyntaxKind','line_number':183,'multiline':False]
['text':' ParserAtomsTable, TaggedParserAtomIndex','line_number':188,'multiline':False]
['text':' JSErrNum, JSMSG_*','line_number':192,'multiline':False]
['text':' js::GeneratorKind, js::FunctionAsyncKind','line_number':195,'multiline':False]
['text':' innermost parse context (stack-allocated)','line_number':260,'multiline':False]
['text':' For tracking used names in this parsing session.','line_number':263,'multiline':False]
['text':' Perform constant-folding; must be true when interfacing with the emitter.','line_number':295,'multiline':False]
['text':' Our fallible 'checkOptions' member function has been called. ','line_number':300,'multiline':True]
['text':' Unexpected end of input, i.e. Eof not at top-level. ','line_number':304,'multiline':True]
['text':' AwaitHandling ','line_number':307,'multiline':True]
['text':' Determine whether |yield| is a valid name in the current context.','line_number':336,'multiline':False]
['text':' Implement ErrorReportMixin.','line_number':345,'multiline':False]
['text':' A Parser::Mark is the extension of the LifoAlloc::Mark to the entire','line_number':378,'multiline':False]
['text':' Parser's state. Note: clients must still take care that any ParseContext','line_number':379,'multiline':False]
['text':' that points into released ParseNodes is destroyed.','line_number':380,'multiline':False]
['text':' While on a |let| Name token, examine |next| (which must already be','line_number':417,'multiline':False]
['text':' gotten).  Indicate whether |next|, the next token already gotten with','line_number':418,'multiline':False]
['text':' modifier TokenStream::SlashIsDiv, continues a LexicalDeclaration.','line_number':419,'multiline':False]
['text':' State specific to the kind of parse being performed. ','line_number':451,'multiline':True]
['text':' When ParseHandler is FullParseHandler:','line_number':454,'multiline':False]
['text':'','line_number':455,'multiline':False]
['text':'   If non-null, this field holds the syntax parser used to attempt lazy','line_number':456,'multiline':False]
['text':'   parsing of inner functions. If null, then lazy parsing is disabled.','line_number':457,'multiline':False]
['text':'','line_number':458,'multiline':False]
['text':' When ParseHandler is SyntaxParseHandler:','line_number':459,'multiline':False]
['text':'','line_number':460,'multiline':False]
['text':'   If non-null, this field must be a sentinel value signaling that the','line_number':461,'multiline':False]
['text':'   syntax parse was aborted. If null, then lazy parsing was aborted due','line_number':462,'multiline':False]
['text':'   to encountering unsupported language constructs.','line_number':463,'multiline':False]
['text':'','line_number':464,'multiline':False]
['text':' |internalSyntaxParser_| is really a |Parser<SyntaxParseHandler, Unit>*|','line_number':465,'multiline':False]
['text':' where |Unit| varies per |Parser<ParseHandler, Unit>|.  But this','line_number':466,'multiline':False]
['text':' template class doesn't know |Unit|, so we store a |void*| here and make','line_number':467,'multiline':False]
['text':' |GeneralParser<ParseHandler, Unit>::getSyntaxParser| impose the real type.','line_number':468,'multiline':False]
['text':' NOTE: The argument ordering here is deliberately different from the','line_number':472,'multiline':False]
['text':'       public constructor so that typos calling the public constructor','line_number':473,'multiline':False]
['text':'       are less likely to select this overload.','line_number':474,'multiline':False]
['text':' If the we are delazifying, the BaseScript already has all the closed-over','line_number':500,'multiline':False]
['text':' info for bindings and there's no need to track used names.','line_number':501,'multiline':False]
['text':' Required on Scope exit.','line_number':509,'multiline':False]
['text':' If ParseHandler is SyntaxParseHandler:','line_number':539,'multiline':False]
['text':'   Do nothing.','line_number':540,'multiline':False]
['text':' If ParseHandler is FullParseHandler:','line_number':541,'multiline':False]
['text':'   Disable syntax parsing of all future inner functions during this','line_number':542,'multiline':False]
['text':'   full-parse.','line_number':543,'multiline':False]
['text':' If ParseHandler is SyntaxParseHandler:','line_number':546,'multiline':False]
['text':'   Flag the current syntax parse as aborted due to unsupported language','line_number':547,'multiline':False]
['text':'   constructs and return false.  Aborting the current syntax parse does','line_number':548,'multiline':False]
['text':'   not disable attempts to syntax-parse future inner functions.','line_number':549,'multiline':False]
['text':' If ParseHandler is FullParseHandler:','line_number':550,'multiline':False]
['text':'    Disable syntax parsing of all future inner functions and return true.','line_number':551,'multiline':False]
['text':' If ParseHandler is SyntaxParseHandler:','line_number':554,'multiline':False]
['text':'   Return whether the last syntax parse was aborted due to unsupported','line_number':555,'multiline':False]
['text':'   language constructs.','line_number':556,'multiline':False]
['text':' If ParseHandler is FullParseHandler:','line_number':557,'multiline':False]
['text':'   Return false.','line_number':558,'multiline':False]
['text':' If ParseHandler is SyntaxParseHandler:','line_number':561,'multiline':False]
['text':'   Clear whether the last syntax parse was aborted.','line_number':562,'multiline':False]
['text':' If ParseHandler is FullParseHandler:','line_number':563,'multiline':False]
['text':'   Do nothing.','line_number':564,'multiline':False]
['text':' ErrorReportMixin.','line_number':584,'multiline':False]
['text':' Disable syntax parsing of all future inner functions during this','line_number':626,'multiline':False]
['text':' full-parse.','line_number':627,'multiline':False]
['text':' Specify a value for an ES6 grammar parametrization.  We have no enum for','line_number':659,'multiline':False]
['text':' [Return] because its behavior is almost exactly equivalent to checking','line_number':660,'multiline':False]
['text':' whether we're in a function box -- easier and simpler than passing an extra','line_number':661,'multiline':False]
['text':' parameter everywhere.','line_number':662,'multiline':False]
['text':' For Ergonomic brand checks.','line_number':668,'multiline':False]
['text':' Implement ErrorReportMixin.','line_number':733,'multiline':False]
['text':'
   * A class for temporarily stashing errors while parsing continues.
   *
   * The ability to stash an error is useful for handling situations where we
   * aren't able to verify that an error has occurred until later in the parse.
   * For instance | ({x=1}) | is always parsed as an object literal with
   * a SyntaxError, however, in the case where it is followed by '=>' we rewind
   * and reparse it as a valid arrow function. Here a PossibleError would be
   * set to 'pending' when the initial SyntaxError was encountered then
   * 'resolved' just before rewinding the parser.
   *
   * There are currently two kinds of PossibleErrors: Expression and
   * Destructuring errors. Expression errors are used to mark a possible
   * syntax error when a grammar production is used in an expression context.
   * For example in |{x = 1}|, we mark the CoverInitializedName |x = 1| as a
   * possible expression error, because CoverInitializedName productions
   * are disallowed when an actual ObjectLiteral is expected.
   * Destructuring errors are used to record possible syntax errors in
   * destructuring contexts. For example in |[...rest, ] = []|, we initially
   * mark the trailing comma after the spread expression as a possible
   * destructuring error, because the ArrayAssignmentPattern grammar
   * production doesn't allow a trailing comma after the rest element.
   *
   * When using PossibleError one should set a pending error at the location
   * where an error occurs. From that point, the error may be resolved
   * (invalidated) or left until the PossibleError is checked.
   *
   * Ex:
   *   PossibleError possibleError(*this);
   *   possibleError.setPendingExpressionErrorAt(pos, JSMSG_BAD_PROP_ID);
   *   // A JSMSG_BAD_PROP_ID ParseError is reported, returns false.
   *   if (!possibleError.checkForExpressionError()) {
   *       return false; // we reach this point with a pending exception
   *   }
   *
   *   PossibleError possibleError(*this);
   *   possibleError.setPendingExpressionErrorAt(pos, JSMSG_BAD_PROP_ID);
   *   // Returns true, no error is reported.
   *   if (!possibleError.checkForDestructuringError()) {
   *       return false; // not reached, no pending exception
   *   }
   *
   *   PossibleError possibleError(*this);
   *   // Returns true, no error is reported.
   *   if (!possibleError.checkForExpressionError()) {
   *       return false; // not reached, no pending exception
   *   }
   ','line_number':783,'multiline':True]
['text':' Error reporting fields.','line_number':840,'multiline':False]
['text':' Returns the error report.','line_number':850,'multiline':False]
['text':' Return true if an error is pending without reporting.','line_number':853,'multiline':False]
['text':' Resolve any pending error.','line_number':856,'multiline':False]
['text':' Set a pending error. Only a single error may be set per instance and','line_number':859,'multiline':False]
['text':' error kind.','line_number':860,'multiline':False]
['text':' If there is a pending error, report it and return false, otherwise','line_number':863,'multiline':False]
['text':' return true.','line_number':864,'multiline':False]
['text':' Transfer an existing error to another instance.','line_number':867,'multiline':False]
['text':' Return true if a pending destructuring error is present.','line_number':873,'multiline':False]
['text':' Set a pending destructuring error. Only a single error may be set','line_number':876,'multiline':False]
['text':' per instance, i.e. subsequent calls to this method are ignored and','line_number':877,'multiline':False]
['text':' won't overwrite the existing pending error.','line_number':878,'multiline':False]
['text':' Set a pending destructuring warning. Only a single warning may be','line_number':882,'multiline':False]
['text':' set per instance, i.e. subsequent calls to this method are ignored','line_number':883,'multiline':False]
['text':' and won't overwrite the existing pending warning.','line_number':884,'multiline':False]
['text':' Set a pending expression error. Only a single error may be set per','line_number':888,'multiline':False]
['text':' instance, i.e. subsequent calls to this method are ignored and won't','line_number':889,'multiline':False]
['text':' overwrite the existing pending error.','line_number':890,'multiline':False]
['text':' If there is a pending destructuring error or warning, report it and','line_number':893,'multiline':False]
['text':' return false, otherwise return true. Clears any pending expression','line_number':894,'multiline':False]
['text':' error.','line_number':895,'multiline':False]
['text':' If there is a pending expression error, report it and return false,','line_number':898,'multiline':False]
['text':' otherwise return true. Clears any pending destructuring error or','line_number':899,'multiline':False]
['text':' warning.','line_number':900,'multiline':False]
['text':' Pass pending errors between possible error instances. This is useful','line_number':903,'multiline':False]
['text':' for extending the lifetime of a pending error beyond the scope of','line_number':904,'multiline':False]
['text':' the PossibleError where it was initially set (keeping in mind that','line_number':905,'multiline':False]
['text':' PossibleError is a MOZ_STACK_CLASS).','line_number':906,'multiline':False]
['text':'
   * Parse a top-level JS script.
   ','line_number':926,'multiline':True]
['text':'
   * Gets the next token and checks if it matches to the given `condition`.
   * If it matches, returns true.
   * If it doesn't match, calls `errorReport` to report the error, and
   * returns false.
   * If other error happens, it returns false but `errorReport` may not be
   * called and other error will be thrown in that case.
   *
   * In any case, the already gotten token is not ungotten.
   *
   * The signature of `condition` is [...](TokenKind actual) -> bool, and
   * the signature of `errorReport` is [...](TokenKind actual).
   ','line_number':932,'multiline':True]
['text':'
   * The following mustMatchToken variants follow the behavior and parameter
   * types of mustMatchTokenInternal above.
   *
   * If modifier is omitted, `SlashIsDiv` is used.
   * If TokenKind is passed instead of `condition`, it checks if the next
   * token is the passed token.
   * If error number is passed instead of `errorReport`, it reports an
   * error with the passed errorNumber.
   ','line_number':950,'multiline':True]
['text':' Public entry points for parsing. ','line_number':1005,'multiline':True]
['text':' Parse an inner function given an enclosing ParseContext and a','line_number':1009,'multiline':False]
['text':' FunctionBox for the inner function.','line_number':1010,'multiline':False]
['text':' Parse a function's formal parameters and its body assuming its function','line_number':1016,'multiline':False]
['text':' ParseContext is already on the stack.','line_number':1017,'multiline':False]
['text':'
   * JS parsers, from lowest to highest precedence.
   *
   * Each parser must be called during the dynamic scope of a ParseContext
   * object, pointed to by this->pc_.
   *
   * Each returns a parse node tree or null on error.
   ','line_number':1025,'multiline':True]
['text':' Declaration parsing.  The main entrypoint is Parser::declarationList,','line_number':1113,'multiline':False]
['text':' with sub-functionality split out into the remaining methods.','line_number':1114,'multiline':False]
['text':' |blockScope| may be non-null only when |kind| corresponds to a lexical','line_number':1116,'multiline':False]
['text':' declaration (that is, PNK_LET or PNK_CONST).','line_number':1117,'multiline':False]
['text':'','line_number':1118,'multiline':False]
['text':' The for* parameters, for normal declarations, should be null/ignored.','line_number':1119,'multiline':False]
['text':' They should be non-null only when Parser::forHeadStart parses a','line_number':1120,'multiline':False]
['text':' declaration at the start of a for-loop head.','line_number':1121,'multiline':False]
['text':'','line_number':1122,'multiline':False]
['text':' In this case, on success |*forHeadKind| is PNK_FORHEAD, PNK_FORIN, or','line_number':1123,'multiline':False]
['text':' PNK_FOROF, corresponding to the three for-loop kinds.  The precise value','line_number':1124,'multiline':False]
['text':' indicates what was parsed.','line_number':1125,'multiline':False]
['text':'','line_number':1126,'multiline':False]
['text':' If parsing recognized a for(;;) loop, the next token is the ';' within','line_number':1127,'multiline':False]
['text':' the loop-head that separates the init/test parts.','line_number':1128,'multiline':False]
['text':'','line_number':1129,'multiline':False]
['text':' Otherwise, for for-in/of loops, the next token is the ')' ending the','line_number':1130,'multiline':False]
['text':' loop-head.  Additionally, the expression that the loop iterates over was','line_number':1131,'multiline':False]
['text':' parsed into |*forInOrOfExpression|.','line_number':1132,'multiline':False]
['text':' The items in a declaration list are either patterns or names, with or','line_number':1137,'multiline':False]
['text':' without initializers.  These two methods parse a single pattern/name and','line_number':1138,'multiline':False]
['text':' any associated initializer -- and if parsing an |initialDeclaration|','line_number':1139,'multiline':False]
['text':' will, if parsing in a for-loop head (as specified by |forHeadKind| being','line_number':1140,'multiline':False]
['text':' non-null), consume additional tokens up to the closing ')' in a','line_number':1141,'multiline':False]
['text':' for-in/of loop head, returning the iterated expression in','line_number':1142,'multiline':False]
['text':' |*forInOrOfExpression|.  (An "initial declaration" is the first','line_number':1143,'multiline':False]
['text':' declaration in a declaration list: |a| but not |b| in |var a, b|, |{c}|','line_number':1144,'multiline':False]
['text':' but not |d| in |let {c} = 3, d|.)','line_number':1145,'multiline':False]
['text':' Having parsed a name (not found in a destructuring pattern) declared by','line_number':1154,'multiline':False]
['text':' a declaration, with the current token being the '=' separating the name','line_number':1155,'multiline':False]
['text':' from its initializer, parse and bind that initializer -- and possibly','line_number':1156,'multiline':False]
['text':' consume trailing in/of and subsequent expression, if so directed by','line_number':1157,'multiline':False]
['text':' |forHeadKind|.','line_number':1158,'multiline':False]
['text':'
   * Additional JS parsers.
   ','line_number':1211,'multiline':True]
['text':' Parse a function body.  Pass StatementListBody if the body is a list of','line_number':1223,'multiline':False]
['text':' statements; pass ExpressionBody if the body is a single expression.','line_number':1224,'multiline':False]
['text':'','line_number':1225,'multiline':False]
['text':' Don't include opening LeftCurly token when invoking.','line_number':1226,'multiline':False]
['text':' The number of instance class fields.','line_number':1260,'multiline':False]
['text':' The number of instance class fields with computed property names.','line_number':1263,'multiline':False]
['text':' The number of static class fields.','line_number':1266,'multiline':False]
['text':' The number of static blocks','line_number':1269,'multiline':False]
['text':' The number of static class fields with computed property names.','line_number':1272,'multiline':False]
['text':' The number of instance class private methods.','line_number':1275,'multiline':False]
['text':' The number of instance class private accessors.','line_number':1278,'multiline':False]
['text':' Indicate if the next token (tokenized with SlashIsRegExp) is |in| or |of|.','line_number':1336,'multiline':False]
['text':' If so, consume it.','line_number':1337,'multiline':False]
['text':' Match the current token against the BindingIdentifier production with','line_number':1427,'multiline':False]
['text':' the given Yield parameter.  If there is no match, report a syntax','line_number':1428,'multiline':False]
['text':' error.','line_number':1429,'multiline':False]
['text':' Implements Automatic Semicolon Insertion.','line_number':1447,'multiline':False]
['text':'','line_number':1448,'multiline':False]
['text':' Use this to match `;` in contexts where ASI is allowed. Call this after','line_number':1449,'multiline':False]
['text':' ruling out all other possibilities except `;`, by peeking ahead if','line_number':1450,'multiline':False]
['text':' necessary.','line_number':1451,'multiline':False]
['text':'','line_number':1452,'multiline':False]
['text':' Unlike most optional Modifiers, this method's `modifier` argument defaults','line_number':1453,'multiline':False]
['text':' to SlashIsRegExp, since that's by far the most common case: usually an','line_number':1454,'multiline':False]
['text':' optional semicolon is at the end of a statement or declaration, and the','line_number':1455,'multiline':False]
['text':' next token could be a RegExp literal beginning a new ExpressionStatement.','line_number':1456,'multiline':False]
['text':' Numerous Base::* functions have bodies like','line_number':1483,'multiline':False]
['text':'','line_number':1484,'multiline':False]
['text':'   return asFinalParser()->func(...);','line_number':1485,'multiline':False]
['text':'','line_number':1486,'multiline':False]
['text':' and must be able to call functions here.  Add a friendship relationship','line_number':1487,'multiline':False]
['text':' so functions here can be hidden when appropriate.','line_number':1488,'multiline':False]
['text':' Inherited types, listed here to have non-dependent names.','line_number':1494,'multiline':False]
['text':' Inherited functions, listed here to have non-dependent names.','line_number':1499,'multiline':False]
['text':' ErrorReportMixin.','line_number':1510,'multiline':False]
['text':' Functions with multiple overloads of different visibility.  We can't','line_number':1560,'multiline':False]
['text':' |using| the whole thing into existence because of the visibility','line_number':1561,'multiline':False]
['text':' distinction, so we instead must manually delegate the required overload.','line_number':1562,'multiline':False]
['text':' Functions present in both Parser<ParseHandler, Unit> specializations.','line_number':1568,'multiline':False]
['text':' Parse a module.','line_number':1576,'multiline':False]
['text':' Functions present only in Parser<SyntaxParseHandler, Unit>.','line_number':1601,'multiline':False]
['text':' Numerous Base::* functions have bodies like','line_number':1617,'multiline':False]
['text':'','line_number':1618,'multiline':False]
['text':'   return asFinalParser()->func(...);','line_number':1619,'multiline':False]
['text':'','line_number':1620,'multiline':False]
['text':' and must be able to call functions here.  Add a friendship relationship','line_number':1621,'multiline':False]
['text':' so functions here can be hidden when appropriate.','line_number':1622,'multiline':False]
['text':' Inherited types, listed here to have non-dependent names.','line_number':1628,'multiline':False]
['text':' Inherited functions, listed here to have non-dependent names.','line_number':1633,'multiline':False]
['text':' ErrorReportMixin.','line_number':1649,'multiline':False]
['text':' Functions with multiple overloads of different visibility.  We can't','line_number':1702,'multiline':False]
['text':' |using| the whole thing into existence because of the visibility','line_number':1703,'multiline':False]
['text':' distinction, so we instead must manually delegate the required overload.','line_number':1704,'multiline':False]
['text':' Functions present in both Parser<ParseHandler, Unit> specializations.','line_number':1710,'multiline':False]
['text':' Parse a module.','line_number':1721,'multiline':False]
['text':' Functions present only in Parser<FullParseHandler, Unit>.','line_number':1747,'multiline':False]
['text':' Parse the body of an eval.','line_number':1749,'multiline':False]
['text':'','line_number':1750,'multiline':False]
['text':' Eval scripts are distinguished from global scripts in that in ES6, per','line_number':1751,'multiline':False]
['text':' 18.2.1.1 steps 9 and 10, all eval scripts are executed under a fresh','line_number':1752,'multiline':False]
['text':' lexical scope.','line_number':1753,'multiline':False]
['text':' Parse a function, given only its arguments and body. Used for lazily','line_number':1756,'multiline':False]
['text':' parsed functions.','line_number':1757,'multiline':False]
['text':' Parse a function, used for the Function, GeneratorFunction, and','line_number':1763,'multiline':False]
['text':' AsyncFunction constructors.','line_number':1764,'multiline':False]
['text':' Parse the body of a global script.','line_number':1773,'multiline':False]
['text':' static ','line_number':1784,'multiline':True]
['text':' The structure we're walking through looks like this:','line_number':1786,'multiline':False]
['text':'','line_number':1787,'multiline':False]
['text':'   struct ParserBase','line_number':1788,'multiline':False]
['text':'   {','line_number':1789,'multiline':False]
['text':'       ...;','line_number':1790,'multiline':False]
['text':'       TokenStreamAnyChars anyChars;','line_number':1791,'multiline':False]
['text':'       ...;','line_number':1792,'multiline':False]
['text':'   };','line_number':1793,'multiline':False]
['text':'   struct Parser : <class that ultimately inherits from ParserBase>','line_number':1794,'multiline':False]
['text':'   {','line_number':1795,'multiline':False]
['text':'       ...;','line_number':1796,'multiline':False]
['text':'       TokenStreamSpecific tokenStream;','line_number':1797,'multiline':False]
['text':'       ...;','line_number':1798,'multiline':False]
['text':'   };','line_number':1799,'multiline':False]
['text':'','line_number':1800,'multiline':False]
['text':' We're passed a GeneralTokenStreamChars* (this being a base class of','line_number':1801,'multiline':False]
['text':' Parser::tokenStream).  We cast that pointer to a TokenStreamSpecific*,','line_number':1802,'multiline':False]
['text':' then translate that to the enclosing Parser*, then return the |anyChars|','line_number':1803,'multiline':False]
['text':' member within.','line_number':1804,'multiline':False]
['text':' static ','line_number':1822,'multiline':True]
['text':' 'await' is always a keyword in module contexts, so we don't modify','line_number':1843,'multiline':False]
['text':' the state when the original handling is AwaitIsModuleKeyword.','line_number':1844,'multiline':False]
['text':' namespace frontend ','line_number':1912,'multiline':True]
['text':' namespace js ','line_number':1913,'multiline':True]
['text':' frontend_Parser_h ','line_number':1915,'multiline':True]
