['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::OnlyJSJitFrameIter','line_number':23,'multiline':False]
['text':' Get a pointer to the top-most profiling frame, given the exit frame pointer.','line_number':54,'multiline':False]
['text':' If there is no exit frame set, just return.','line_number':62,'multiline':False]
['text':' Skip wasm frames that might be in the way.','line_number':67,'multiline':False]
['text':'
   * Ensure all future generated code will be instrumented, or that all
   * currently instrumented code is discarded
   ','line_number':87,'multiline':True]
['text':' This function is called when the Gecko profiler makes a new Sampler','line_number':93,'multiline':False]
['text':' (and thus, a new circular buffer). Set all current entries in the','line_number':94,'multiline':False]
['text':' JitcodeGlobalTable as expired and reset the buffer range start.','line_number':95,'multiline':False]
['text':' Ensure that lastProfilingFrame is null for the main thread.','line_number':101,'multiline':False]
['text':' Reset the tracelogger, if toggled on','line_number':107,'multiline':False]
['text':' Toggle Gecko Profiler-related jumps on baseline jitcode.
   * The call to |ReleaseAllJITCode| above will release most baseline jitcode,
   * but not jitcode for scripts with active frames on the stack.  These scripts
   * need to have their profiler state toggled so they behave properly.
   ','line_number':112,'multiline':True]
['text':' Update lastProfilingFrame to point to the top-most JS jit-frame currently','line_number':119,'multiline':False]
['text':' on stack.','line_number':120,'multiline':False]
['text':' Walk through all activations, and set their lastProfilingFrame','line_number':122,'multiline':False]
['text':' appropriately.','line_number':123,'multiline':False]
['text':' WebAssembly code does not need to be released, but profiling string','line_number':146,'multiline':False]
['text':' labels have to be generated so that they are available during async','line_number':147,'multiline':False]
['text':' profiling stack iteration.','line_number':148,'multiline':False]
['text':' Enable the structured spewer if the environment variable is set.','line_number':154,'multiline':False]
['text':' Lookup the string for the function/script, creating one if necessary ','line_number':163,'multiline':True]
['text':'
   * This function is called whenever a script is destroyed, regardless of
   * whether profiling has been turned on, so don't invoke a function on an
   * invalid hash set. Also, even if profiling was enabled but then turned
   * off, we still want to remove the string, so no check of enabled() is
   * done.
   ','line_number':184,'multiline':True]
['text':' In debug builds, assert the JS profiling stack frames already on the','line_number':212,'multiline':False]
['text':' stack have a non-null pc. Only look at the top frames to avoid quadratic','line_number':213,'multiline':False]
['text':' behavior.','line_number':214,'multiline':False]
['text':' Sanity check to make sure push/pop balanced ','line_number':235,'multiline':True]
['text':' Can't fail lookup because we should already be in the set ','line_number':240,'multiline':True]
['text':' Bug 822041','line_number':243,'multiline':False]
['text':'
 * Serializes the script/function pair into a "descriptive string" which is
 * allowed to fail. This function cannot trigger a GC because it could finalize
 * some scripts, resize the hash table of profile strings, and invalidate the
 * AddPtr held while invoking allocProfileString.
 ','line_number':267,'multiline':True]
['text':' static ','line_number':273,'multiline':True]
['text':' Note: this profiler string is regexp-matched by','line_number':276,'multiline':False]
['text':' devtools/client/profiler/cleopatra/js/parserWorker.js.','line_number':277,'multiline':False]
['text':' If the script has a function, try calculating its name.','line_number':279,'multiline':False]
['text':' Calculate filename length. We cap this to a reasonable limit to avoid','line_number':294,'multiline':False]
['text':' performance impact of strlen/alloc/memcpy.','line_number':295,'multiline':False]
['text':' Calculate line + column length.','line_number':300,'multiline':False]
['text':' Full profile string for scripts with functions is:','line_number':310,'multiline':False]
['text':'      FuncName (FileName:Lineno:Column)','line_number':311,'multiline':False]
['text':' Full profile string for scripts without functions is:','line_number':312,'multiline':False]
['text':'      FileName:Lineno:Column','line_number':313,'multiline':False]
['text':' Full profile string for scripts without functions and without lines is:','line_number':314,'multiline':False]
['text':'      FileName','line_number':315,'multiline':False]
['text':' Calculate full string length.','line_number':317,'multiline':False]
['text':' Allocate string.','line_number':328,'multiline':False]
['text':' Fill string with function name if needed.','line_number':336,'multiline':False]
['text':' Fill string with filename chars.','line_number':344,'multiline':False]
['text':' Fill line + column chars.','line_number':348,'multiline':False]
['text':' Terminal ')' if necessary.','line_number':355,'multiline':False]
['text':' If profiling is supressed then we can't trust the script pointers to be','line_number':451,'multiline':False]
['text':' valid as they could be in the process of being moved by a compacting GC','line_number':452,'multiline':False]
['text':' (although it's still OK to get the runtime from them).','line_number':453,'multiline':False]
['text':' static ','line_number':478,'multiline':True]
['text':' This should not be called while profiling is suppressed.','line_number':487,'multiline':False]
['text':' clang-format off','line_number':524,'multiline':False]
['text':' ProfilingSubcategory_X:','line_number':526,'multiline':False]
['text':' One enum for each category X, listing that category's subcategories. This','line_number':527,'multiline':False]
['text':' allows the sProfilingCategoryInfo macro construction below to look up a','line_number':528,'multiline':False]
['text':' per-category index for a subcategory.','line_number':529,'multiline':False]
['text':' sProfilingCategoryPairInfo:','line_number':543,'multiline':False]
['text':' A list of ProfilingCategoryPairInfos with the same order as','line_number':544,'multiline':False]
['text':' ProfilingCategoryPair, which can be used to map a ProfilingCategoryPair to','line_number':545,'multiline':False]
['text':' its information.','line_number':546,'multiline':False]
['text':' clang-format on','line_number':561,'multiline':False]
['text':' namespace JS','line_number':577,'multiline':False]
