['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' WarpScriptOracle creates a WarpScriptSnapshot for a single JSScript. Note','line_number':43,'multiline':False]
['text':' that a single WarpOracle can use multiple WarpScriptOracles when scripts are','line_number':44,'multiline':False]
['text':' inlined.','line_number':45,'multiline':False]
['text':' Index of the next ICEntry for getICEntry. This assumes the script's','line_number':55,'multiline':False]
['text':' bytecode is processed from first to last instruction.','line_number':56,'multiline':False]
['text':' Insert the outermost scriptSnapshot at the front of the list.','line_number':151,'multiline':False]
['text':' When transpiled CacheIR bails out, we do not want to recompile','line_number':178,'multiline':False]
['text':' with the exact same data and get caught in an invalidation loop.','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' To avoid this, we store a hash of the stub pointers and entry','line_number':181,'multiline':False]
['text':' counts in this snapshot, save that hash in the JitScript if we','line_number':182,'multiline':False]
['text':' have a TranspiledCacheIR bailout, and assert that the hash has','line_number':183,'multiline':False]
['text':' changed when we recompile.','line_number':184,'multiline':False]
['text':'','line_number':185,'multiline':False]
['text':' Note: this assertion catches potential performance issues.','line_number':186,'multiline':False]
['text':' Failing this assertion is not a correctness/security problem.','line_number':187,'multiline':False]
['text':' We therefore ignore cases involving OOM, stack overflow, or','line_number':188,'multiline':False]
['text':' stubs purged by GC.','line_number':189,'multiline':False]
['text':' In the rare case where this import hasn't been initialized already (we have','line_number':228,'multiline':False]
['text':' an import cycle where modules reference each other's imports), we need a','line_number':229,'multiline':False]
['text':' check.','line_number':230,'multiline':False]
['text':' Don't do anything if the script doesn't use the environment chain.','line_number':252,'multiline':False]
['text':' Always make an environment chain if the script needs an arguments object','line_number':253,'multiline':False]
['text':' because ArgumentsObject construction requires the environment chain to be','line_number':254,'multiline':False]
['text':' passed in.','line_number':255,'multiline':False]
['text':' For global scripts without a non-syntactic global scope, the environment','line_number':268,'multiline':False]
['text':' chain is the global lexical environment.','line_number':269,'multiline':False]
['text':' Parameter expression-induced extra var environment not yet handled.','line_number':276,'multiline':False]
['text':' Unfortunately LinkedList<> asserts the list is empty in its destructor.','line_number':321,'multiline':False]
['text':' Clear the list if we abort compilation.','line_number':322,'multiline':False]
['text':' Analyze the bytecode. Abort compilation for unsupported ops and create','line_number':329,'multiline':False]
['text':' WarpOpSnapshots.','line_number':330,'multiline':False]
['text':' Abort because MBoxNonStrictThis doesn't support non-syntactic','line_number':357,'multiline':False]
['text':' scopes (a deprecated SpiderMonkey mechanism). If this becomes an','line_number':358,'multiline':False]
['text':' issue we could support it by refactoring GetFunctionThis to not','line_number':359,'multiline':False]
['text':' take a frame pointer and then call that.','line_number':360,'multiline':False]
['text':' We don't compile global scripts with a non-syntactic scope, but','line_number':368,'multiline':False]
['text':' we can end up here when we're compiling an arrow function.','line_number':369,'multiline':False]
['text':' If we already resolved this built-in we can bake it in.','line_number':376,'multiline':False]
['text':' If we already cloned this intrinsic we can bake it in.','line_number':388,'multiline':False]
['text':' Prepare the object so that WarpBuilder can just push it as constant.','line_number':409,'multiline':False]
['text':' x86 does not have enough registers if profiling is enabled.','line_number':441,'multiline':False]
['text':' Supported by WarpBuilder. Nothing to do.','line_number':668,'multiline':False]
['text':' Unsupported ops. Don't use a 'default' here, we want to trigger a','line_number':671,'multiline':False]
['text':' compiler warning when adding a new JSOp.','line_number':672,'multiline':False]
['text':' Do one of the following:','line_number':708,'multiline':False]
['text':'','line_number':709,'multiline':False]
['text':' * If the Baseline IC has a single ICStub we can inline, add a WarpCacheIR','line_number':710,'multiline':False]
['text':'   snapshot to transpile it to MIR.','line_number':711,'multiline':False]
['text':'','line_number':712,'multiline':False]
['text':' * If that single ICStub is a call IC with a known target, instead add a','line_number':713,'multiline':False]
['text':'   WarpInline snapshot to transpile the guards to MIR and inline the target.','line_number':714,'multiline':False]
['text':'','line_number':715,'multiline':False]
['text':' * If the Baseline IC is cold (never executed), add a WarpBailout snapshot','line_number':716,'multiline':False]
['text':'   so that we can collect information in Baseline.','line_number':717,'multiline':False]
['text':'','line_number':718,'multiline':False]
['text':' * Else, don't add a snapshot and rely on WarpBuilder adding an Ion IC.','line_number':719,'multiline':False]
['text':' Don't create snapshots when testing ICs.','line_number':723,'multiline':False]
['text':' Clear the used-by-transpiler flag on the IC. It can still be set from a','line_number':734,'multiline':False]
['text':' previous compilation because we don't clear the flag on every IC when','line_number':735,'multiline':False]
['text':' invalidating.','line_number':736,'multiline':False]
['text':' No optimized stubs.','line_number':743,'multiline':False]
['text':' If the fallback stub was used but there's no optimized stub, use an IC.','line_number':750,'multiline':False]
['text':' Cold IC. Bailout to collect information.','line_number':755,'multiline':False]
['text':' Don't transpile if there are other stubs with entered-count > 0. Counters','line_number':764,'multiline':False]
['text':' are reset when a new stub is attached so this means the stub that was added','line_number':765,'multiline':False]
['text':' most recently didn't handle all cases.','line_number':766,'multiline':False]
['text':' If this code is changed, ICScript::hash may also need changing.','line_number':767,'multiline':False]
['text':' In some polymorphic cases, we can generate better code than the','line_number':777,'multiline':False]
['text':' default fallback if we know the observed types of the operands','line_number':778,'multiline':False]
['text':' and their relative frequency.','line_number':779,'multiline':False]
['text':' Only create a snapshot if all opcodes are supported by the transpiler.','line_number':803,'multiline':False]
['text':' Unsupported CacheIR opcode.','line_number':818,'multiline':False]
['text':' While on the main thread, ensure code stubs exist for ops that require','line_number':826,'multiline':False]
['text':' them.','line_number':827,'multiline':False]
['text':' Copy the ICStub data to protect against the stub being unlinked or mutated.','line_number':849,'multiline':False]
['text':' We don't need to copy the CacheIRStubInfo: because we store and trace the','line_number':850,'multiline':False]
['text':' stub's JitCode*, the baselineCacheIRStubCodes_ map in JitZone will keep it','line_number':851,'multiline':False]
['text':' alive.','line_number':852,'multiline':False]
['text':' Note: nursery pointers are handled below so we don't need to trigger any','line_number':861,'multiline':False]
['text':' GC barriers and can do a bitwise copy.','line_number':862,'multiline':False]
['text':' Add the inlined script to the inline script tree.','line_number':907,'multiline':False]
['text':' Create a CompileInfo for the inlined script.','line_number':915,'multiline':False]
['text':' Take a snapshot of the CacheIR.','line_number':925,'multiline':False]
['text':' Take a snapshot of the inlined script (which may do more','line_number':935,'multiline':False]
['text':' inlining recursively).','line_number':936,'multiline':False]
['text':' If the target script can't be warp-compiled, mark it as','line_number':948,'multiline':False]
['text':' uninlineable, clean up, and fall through to the non-inlined path.','line_number':949,'multiline':False]
['text':'prev=','line_number':952,'multiline':True]
['text':' Sort highest frequency first.','line_number':983,'multiline':False]
['text':' We use polymorphic type data if there are multiple active stubs,','line_number':994,'multiline':False]
['text':' all of which have type data available.','line_number':995,'multiline':False]
['text':' Sort candidates by success frequency.','line_number':1017,'multiline':False]
['text':' If the stub data contains nursery object pointers, replace them with the','line_number':1036,'multiline':False]
['text':' corresponding nursery index. See WarpObjectField.','line_number':1037,'multiline':False]
['text':'','line_number':1038,'multiline':False]
['text':' Also asserts non-object fields don't contain nursery pointers.','line_number':1039,'multiline':False]
['text':' jsid never contains nursery-allocated things.','line_number':1092,'multiline':False]
['text':' Done.','line_number':1108,'multiline':False]
