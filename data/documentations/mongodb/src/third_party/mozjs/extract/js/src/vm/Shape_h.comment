['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::shadow::Shape, JS::shadow::BaseShape','line_number':10,'multiline':False]
['text':' JS::PropertyKey','line_number':31,'multiline':False]
['text':' [SMDOC] Shapes','line_number':45,'multiline':False]
['text':'','line_number':46,'multiline':False]
['text':' A Shape represents the layout of an object. It stores and implies:','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':'  * The object's JSClass, Realm, prototype (see BaseShape).','line_number':49,'multiline':False]
['text':'  * For native objects, the object's properties (PropMap and map length).','line_number':50,'multiline':False]
['text':'  * The fixed slot capacity of the object (numFixedSlots).','line_number':51,'multiline':False]
['text':'  * The object's flags (ObjectFlags).','line_number':52,'multiline':False]
['text':'','line_number':53,'multiline':False]
['text':' The shape implies the property structure (keys, attributes, property order','line_number':54,'multiline':False]
['text':' for enumeration) but not the property values. The values are stored in object','line_number':55,'multiline':False]
['text':' slots.','line_number':56,'multiline':False]
['text':'','line_number':57,'multiline':False]
['text':' Every JSObject has a pointer, |shape_|, accessible via shape(), to the','line_number':58,'multiline':False]
['text':' current shape of the object. This pointer permits fast object layout tests.','line_number':59,'multiline':False]
['text':'','line_number':60,'multiline':False]
['text':' There are two kinds of shapes:','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' * Shared shapes. Either initial shapes (no property map) or SharedPropMap','line_number':63,'multiline':False]
['text':'   shapes (for native objects with properties).','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':'   These are immutable tuples stored in a hash table, so that objects with the','line_number':66,'multiline':False]
['text':'   same structure end up with the same shape (this both saves memory and','line_number':67,'multiline':False]
['text':'   allows JIT optimizations based on this shape).','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':'   To avoid hash table lookups on the hot addProperty path, shapes have a','line_number':70,'multiline':False]
['text':'   ShapeCachePtr that's used as cache for this. This cache is purged on GC.','line_number':71,'multiline':False]
['text':'   The shape cache is also used as cache for prototype shapes, to point to the','line_number':72,'multiline':False]
['text':'   initial shape for objects using that shape.','line_number':73,'multiline':False]
['text':'','line_number':74,'multiline':False]
['text':' * Dictionary shapes. Used only for native objects. An object with a','line_number':75,'multiline':False]
['text':'   dictionary shape is "in dictionary mode". Certain property operations','line_number':76,'multiline':False]
['text':'   are not supported for shared maps so in these cases we need to convert the','line_number':77,'multiline':False]
['text':'   object to dictionary mode by creating a dictionary property map and a','line_number':78,'multiline':False]
['text':'   dictionary shape. An object is converted to dictionary mode in the','line_number':79,'multiline':False]
['text':'   following cases:','line_number':80,'multiline':False]
['text':'','line_number':81,'multiline':False]
['text':'   - Changing a property's flags/attributes and the property is not the last','line_number':82,'multiline':False]
['text':'     property.','line_number':83,'multiline':False]
['text':'   - Removing a property other than the object's last property.','line_number':84,'multiline':False]
['text':'   - The object has many properties. See maybeConvertToDictionaryForAdd for','line_number':85,'multiline':False]
['text':'     the heuristics.','line_number':86,'multiline':False]
['text':'   - For prototype objects: when a shadowing property is added to an object','line_number':87,'multiline':False]
['text':'     with this object on its prototype chain. This is used to invalidate the','line_number':88,'multiline':False]
['text':'     shape teleporting optimization. See reshapeForShadowedProp.','line_number':89,'multiline':False]
['text':'','line_number':90,'multiline':False]
['text':'   Dictionary shapes are unshared, private to a single object, and always have','line_number':91,'multiline':False]
['text':'   a DictionaryPropMap that's similarly unshared. Dictionary shape mutations','line_number':92,'multiline':False]
['text':'   do require allocating a new dictionary shape for the object, to properly','line_number':93,'multiline':False]
['text':'   invalidate JIT inline caches and other shape guards.','line_number':94,'multiline':False]
['text':'   See NativeObject::generateNewDictionaryShape.','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':' Because many Shapes have similar data, there is actually a secondary type','line_number':97,'multiline':False]
['text':' called a BaseShape that holds some of a Shape's data (the JSClass, Realm,','line_number':98,'multiline':False]
['text':' prototype). Many shapes can share a single BaseShape.','line_number':99,'multiline':False]
['text':' Proxy classes have reserved slots, but proxies manage their own slot','line_number':102,'multiline':False]
['text':' layout.','line_number':103,'multiline':False]
['text':' Hash policy for ShapeCachePtr's ShapeSetForAdd. Maps the new property key and','line_number':112,'multiline':False]
['text':' flags to the new shape.','line_number':113,'multiline':False]
['text':' Each shape has a cache pointer that's either:','line_number':129,'multiline':False]
['text':'','line_number':130,'multiline':False]
['text':' * None','line_number':131,'multiline':False]
['text':' * For shared shapes, a single shape used to speed up addProperty.','line_number':132,'multiline':False]
['text':' * For shared shapes, a set of shapes used to speed up addProperty.','line_number':133,'multiline':False]
['text':' * For prototype shapes, the most recently used initial shape allocated for a','line_number':134,'multiline':False]
['text':'   prototype object with this shape.','line_number':135,'multiline':False]
['text':'','line_number':136,'multiline':False]
['text':' The cache is purely an optimization and is purged on GC (all shapes with a','line_number':137,'multiline':False]
['text':' non-None ShapeCachePtr are added to a vector in the Zone).','line_number':138,'multiline':False]
['text':' Don't leak the ShapeSet.','line_number':163,'multiline':False]
['text':' Don't leak the ShapeSet.','line_number':186,'multiline':False]
['text':' BaseShapes store the object's class, realm and prototype. BaseShapes are','line_number':193,'multiline':False]
['text':' immutable tuples stored in a per-Zone hash table.','line_number':194,'multiline':False]
['text':' Class of referring object, stored in the cell header ','line_number':197,'multiline':True]
['text':' Not defined: BaseShapes must not be stack allocated. ','line_number':212,'multiline':True]
['text':'
   * Lookup base shapes from the zone's baseShapes table, adding if not
   * already found.
   ','line_number':226,'multiline':True]
['text':' Sanity check BaseShape size is what we expect.','line_number':254,'multiline':False]
['text':' Base shape, stored in the cell header.','line_number':275,'multiline':False]
['text':' Flags that are not modified after the Shape is created. Off-thread Ion','line_number':279,'multiline':False]
['text':' compilation can access the immutableFlags word, so we don't want any','line_number':280,'multiline':False]
['text':' mutable state here to avoid (TSan) races.','line_number':281,'multiline':False]
['text':' The length associated with the property map. This is a value in the range','line_number':283,'multiline':False]
['text':' [0, PropMap::Capacity]. A length of 0 indicates the object is empty (has','line_number':284,'multiline':False]
['text':' no properties).','line_number':285,'multiline':False]
['text':' If set, this is a dictionary shape.','line_number':288,'multiline':False]
['text':' Number of fixed slots in objects with this shape.','line_number':291,'multiline':False]
['text':' FIXED_SLOTS_MAX is the biggest count of fixed slots a Shape can store.','line_number':292,'multiline':False]
['text':' For non-dictionary shapes: the slot span of the object, if it fits in a','line_number':297,'multiline':False]
['text':' single byte. If the value is SMALL_SLOTSPAN_MAX, the slot span has to be','line_number':298,'multiline':False]
['text':' computed based on the property map (which is slower).','line_number':299,'multiline':False]
['text':'','line_number':300,'multiline':False]
['text':' Note: NativeObject::addProperty will convert to dictionary mode before we','line_number':301,'multiline':False]
['text':' reach this limit, but there are other places where we add properties to','line_number':302,'multiline':False]
['text':' shapes, for example environment object shapes.','line_number':303,'multiline':False]
['text':' 10 bits.','line_number':304,'multiline':False]
['text':' Immutable flags, see above.','line_number':309,'multiline':False]
['text':' Immutable object flags, see ObjectFlags.','line_number':310,'multiline':False]
['text':' The shape's property map. This is either nullptr for shared initial (empty)','line_number':312,'multiline':False]
['text':' shapes, a SharedPropMap for SharedPropMap shapes, or a DictionaryPropMap','line_number':313,'multiline':False]
['text':' for dictionary shapes.','line_number':314,'multiline':False]
['text':' Cache used to speed up common operations on shapes.','line_number':317,'multiline':False]
['text':' Give the object a shape that's similar to its current shape, but with the','line_number':320,'multiline':False]
['text':' passed objectFlags, proto, and nfixed values.','line_number':321,'multiline':False]
['text':' For JIT usage.','line_number':476,'multiline':False]
['text':' Sanity check Shape size is what we expect.','line_number':506,'multiline':False]
['text':' isDictionary = ','line_number':519,'multiline':True]
['text':'
   * Lookup an initial shape matching the given parameters, creating an empty
   * shape if none was found.
   ','line_number':526,'multiline':True]
['text':'
   * Reinsert an alternate initial shape, to be returned by future
   * getInitialShape calls, until the new shape becomes unreachable in a GC
   * and the table entry is purged.
   ','line_number':550,'multiline':True]
['text':'
   * Some object subclasses are allocated with a built-in set of properties.
   * The first time such an object is created, these built-in properties must
   * be set manually, to compute an initial shape.  Afterward, that initial
   * shape can be reused for newly-created objects that use the subclass's
   * standard prototype.  This method should be used in a post-allocation
   * init method, to ensure that objects of such subclasses compute and cache
   * the initial shape, if it hasn't already been computed.
   ','line_number':557,'multiline':True]
['text':' isDictionary = ','line_number':575,'multiline':True]
['text':' Iterator for iterating over a shape's properties. It can be used like this:','line_number':585,'multiline':False]
['text':'','line_number':586,'multiline':False]
['text':'   for (ShapePropertyIter<NoGC> iter(nobj->shape()); !iter.done(); iter++) {','line_number':587,'multiline':False]
['text':'     PropertyKey key = iter->key();','line_number':588,'multiline':False]
['text':'     if (iter->isDataProperty() && iter->enumerable()) { .. }','line_number':589,'multiline':False]
['text':'   }','line_number':590,'multiline':False]
['text':'','line_number':591,'multiline':False]
['text':' Properties are iterated in reverse order (i.e., iteration starts at the most','line_number':592,'multiline':False]
['text':' recently added property).','line_number':593,'multiline':False]
['text':' Done iterating.','line_number':631,'multiline':False]
['text':' Dictionary maps can have "holes" for removed properties, so keep going','line_number':636,'multiline':False]
['text':' until we find a non-hole slot.','line_number':637,'multiline':False]
['text':' Fake pointer struct to make operator-> work.','line_number':648,'multiline':False]
['text':' See https://stackoverflow.com/a/52856349.','line_number':649,'multiline':False]
['text':' namespace js','line_number':657,'multiline':False]
['text':' JS::ubi::Nodes can point to Shapes and BaseShapes; they're js::gc::Cell','line_number':659,'multiline':False]
['text':' instances that occupy a compartment.','line_number':660,'multiline':False]
['text':' namespace ubi','line_number':696,'multiline':False]
['text':' namespace JS','line_number':697,'multiline':False]
['text':' vm_Shape_h ','line_number':699,'multiline':True]
