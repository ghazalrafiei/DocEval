['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::CompletionKind','line_number':12,'multiline':False]
['text':' JS_PUBLIC_API','line_number':13,'multiline':False]
['text':' JS::CallArgs','line_number':15,'multiline':False]
['text':' JS::{,Mutable}Handle','line_number':16,'multiline':False]
['text':' JS::HandleObjectVector','line_number':17,'multiline':False]
['text':' JS::Value','line_number':18,'multiline':False]
['text':' Promise.prototype.then.','line_number':29,'multiline':False]
['text':' Promise[Symbol.species].','line_number':32,'multiline':False]
['text':' Promise.resolve.','line_number':35,'multiline':False]
['text':'*
 * Unforgeable version of the JS builtin Promise.all.
 *
 * Takes a HandleValueVector of Promise objects and returns a promise that's
 * resolved with an array of resolution values when all those promises have
 * been resolved, or rejected with the rejection value of the first rejected
 * promise.
 *
 * Asserts that all objects in the `promises` vector are, maybe wrapped,
 * instances of `Promise` or a subclass of `Promise`.
 ','line_number':38,'multiline':True]
['text':'*
 * Enqueues resolve/reject reactions in the given Promise's reactions lists
 * as though by calling the original value of Promise.prototype.then, and
 * without regard to any Promise subclassing used in `promiseObj` itself.
 ','line_number':52,'multiline':True]
['text':'*
 * React to[0] `unwrappedPromise` (which may not be from the current realm) as
 * if by using a fresh promise created for the provided nullable fulfill/reject
 * IsCallable objects.
 *
 * However, no dependent Promise will be created, and mucking with `Promise`,
 * `Promise.prototype.then`, and `Promise[Symbol.species]` will not alter this
 * function's behavior.
 *
 * If `unwrappedPromise` rejects and `onRejected_` is null, handling is
 * determined by `behavior`.  If `behavior == Report`, a fresh Promise will be
 * constructed and rejected on the fly (and thus will be reported as unhandled).
 * But if `behavior == Ignore`, the rejection is ignored and is not reported as
 * unhandled.
 *
 * Note: Reactions pushed using this function contain a null `promise` field.
 * That field is only ever used by devtools, which have to treat these reactions
 * specially.
 *
 * 0. The sense of "react" here is the sense of the term as defined by Web IDL:
 *    https://heycam.github.io/webidl/#dfn-perform-steps-once-promise-is-settled
 ','line_number':63,'multiline':True]
['text':'*
 * PromiseResolve ( C, x )
 *
 * The abstract operation PromiseResolve, given a constructor and a value,
 * returns a new promise resolved with that value.
 ','line_number':90,'multiline':True]
['text':'*
 * Reject |promise| with the value of the current pending exception.
 *
 * |promise| must be from the current realm.  Callers must enter the realm of
 * |promise| if they are not already in it.
 ','line_number':100,'multiline':True]
['text':'*
 * Create the promise object which will be used as the return value of an async
 * function.
 ','line_number':109,'multiline':True]
['text':'*
 * Returns true if the given object is a promise created by
 * either CreatePromiseObjectForAsync function or async generator's method.
 ','line_number':115,'multiline':True]
['text':' Start awaiting `value` in an async function (, but doesn't suspend the','line_number':129,'multiline':False]
['text':' async function's execution!). Returns the async function's result promise.','line_number':130,'multiline':False]
['text':' If the await operation can be skipped and the resolution value for `val` can','line_number':135,'multiline':False]
['text':' be acquired, stored the resolved value to `resolved` and `true` to','line_number':136,'multiline':False]
['text':' `*canSkip`.  Otherwise, stores `false` to `*canSkip`.','line_number':137,'multiline':False]
['text':' Callback for describing promise reaction records, for use with','line_number':164,'multiline':False]
['text':' PromiseObject::getReactionRecords.','line_number':165,'multiline':False]
['text':' A reaction record created by a call to 'then' or 'catch', with functions to','line_number':167,'multiline':False]
['text':' call on resolution or rejection, and the promise that will be settled','line_number':168,'multiline':False]
['text':' according to the result of calling them.','line_number':169,'multiline':False]
['text':'','line_number':170,'multiline':False]
['text':' Note that resolve, reject, and result may not be same-compartment with cx,','line_number':171,'multiline':False]
['text':' or with the promise we're inspecting. This function presents the values','line_number':172,'multiline':False]
['text':' exactly as they appear in the reaction record. They may also be wrapped or','line_number':173,'multiline':False]
['text':' unwrapped.','line_number':174,'multiline':False]
['text':'','line_number':175,'multiline':False]
['text':' Some reaction records refer to internal resolution or rejection functions','line_number':176,'multiline':False]
['text':' that are not naturally represented as debuggee JavaScript functions. In','line_number':177,'multiline':False]
['text':' this case, resolve and reject may be nullptr.','line_number':178,'multiline':False]
['text':' A reaction record created when one native promise is resolved to another.','line_number':183,'multiline':False]
['text':' The 'promise' argument is the promise that will be settled in the same way','line_number':184,'multiline':False]
['text':' the promise this reaction record is attached to is settled.','line_number':185,'multiline':False]
['text':'','line_number':186,'multiline':False]
['text':' Note that promise may not be same-compartment with cx. This function','line_number':187,'multiline':False]
['text':' presents the promise exactly as it appears in the reaction record.','line_number':188,'multiline':False]
['text':' A reaction record that resumes an asynchronous function suspended at an','line_number':192,'multiline':False]
['text':' await expression. The 'generator' argument is the generator object','line_number':193,'multiline':False]
['text':' representing the call.','line_number':194,'multiline':False]
['text':'','line_number':195,'multiline':False]
['text':' Note that generator may not be same-compartment with cx. This function','line_number':196,'multiline':False]
['text':' presents the generator exactly as it appears in the reaction record.','line_number':197,'multiline':False]
['text':' A reaction record that resumes an asynchronous generator suspended at an','line_number':202,'multiline':False]
['text':' await expression. The 'generator' argument is the generator object','line_number':203,'multiline':False]
['text':' representing the call.','line_number':204,'multiline':False]
['text':'','line_number':205,'multiline':False]
['text':' Note that generator may not be same-compartment with cx. This function','line_number':206,'multiline':False]
['text':' presents the generator exactly as it appears in the reaction record.','line_number':207,'multiline':False]
['text':' namespace js','line_number':212,'multiline':False]
['text':' builtin_Promise_h','line_number':214,'multiline':False]
