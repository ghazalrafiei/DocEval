['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Miscellaneous operations. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT','line_number':11,'multiline':False]
['text':' mozilla::IsNaN','line_number':12,'multiline':False]
['text':' JS_ReportErrorNumberASCII','line_number':14,'multiline':False]
['text':' JS::ToNumber','line_number':16,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':17,'multiline':False]
['text':' JS::{,Mutable}Handle, JS::Rooted','line_number':18,'multiline':False]
['text':' js::{Call,GetAndClearException}','line_number':19,'multiline':False]
['text':' JSContext','line_number':20,'multiline':False]
['text':' js::GetProperty','line_number':21,'multiline':False]
['text':' js::PromiseObject','line_number':22,'multiline':False]
['text':' js::PropertyName','line_number':23,'multiline':False]
['text':' JSContext::check','line_number':25,'multiline':False]
['text':' js::IsCallable','line_number':26,'multiline':False]
['text':' Uncatchable error. This happens when a slow script is killed or a','line_number':37,'multiline':False]
['text':' worker is terminated. Propagate the uncatchable error. This will','line_number':38,'multiline':False]
['text':' typically kill off the calling asynchronous process: the caller','line_number':39,'multiline':False]
['text':' can't hook its continuation to the new rejected promise.','line_number':40,'multiline':False]
['text':'** 6.3. Miscellaneous operations *****************************************','line_number':46,'multiline':True]
['text':'*
 * Streams spec, 6.3.1.
 *      CreateAlgorithmFromUnderlyingMethod ( underlyingObject, methodName,
 *                                            algoArgCount, extraArgs )
 *
 * This function only partly implements the standard algorithm. We do not
 * actually create a new JSFunction completely encapsulating the new algorithm.
 * Instead, this just gets the specified method and checks for errors. It's the
 * caller's responsibility to make sure that later, when the algorithm is
 * "performed", the appropriate steps are carried out.
 ','line_number':48,'multiline':True]
['text':' Step 1: Assert: underlyingObject is not undefined.','line_number':67,'multiline':False]
['text':' Step 2: Assert: ! IsPropertyKey(methodName) is true (implicit).','line_number':70,'multiline':False]
['text':' Step 3: Assert: algoArgCount is 0 or 1 (omitted).','line_number':71,'multiline':False]
['text':' Step 4: Assert: extraArgs is a List (omitted).','line_number':72,'multiline':False]
['text':' Step 5: Let method be ? GetV(underlyingObject, methodName).','line_number':74,'multiline':False]
['text':' Step 6: If method is not undefined,','line_number':79,'multiline':False]
['text':' Step a: If ! IsCallable(method) is false, throw a TypeError','line_number':81,'multiline':False]
['text':'         exception.','line_number':82,'multiline':False]
['text':' Step b: If algoArgCount is 0, return an algorithm that performs the','line_number':89,'multiline':False]
['text':'         following steps:','line_number':90,'multiline':False]
['text':'     Step i: Return ! PromiseCall(method, underlyingObject,','line_number':91,'multiline':False]
['text':'             extraArgs).','line_number':92,'multiline':False]
['text':' Step c: Otherwise, return an algorithm that performs the following','line_number':93,'multiline':False]
['text':'         steps, taking an arg argument:','line_number':94,'multiline':False]
['text':'     Step i: Let fullArgs be a List consisting of arg followed by the','line_number':95,'multiline':False]
['text':'             elements of extraArgs in order.','line_number':96,'multiline':False]
['text':'     Step ii: Return ! PromiseCall(method, underlyingObject,','line_number':97,'multiline':False]
['text':'                                   fullArgs).','line_number':98,'multiline':False]
['text':' (These steps are deferred to the code that performs the algorithm.','line_number':99,'multiline':False]
['text':' See Perform{Write,Close}Algorithm, ReadableStreamControllerCancelSteps,','line_number':100,'multiline':False]
['text':' and ReadableStreamControllerCallPullIfNeeded.)','line_number':101,'multiline':False]
['text':' Step 7: Return an algorithm which returns a promise resolved with','line_number':105,'multiline':False]
['text':'         undefined (implicit).','line_number':106,'multiline':False]
['text':'*
 * Streams spec, 6.3.2. InvokeOrNoop ( O, P, args )
 * As it happens, all callers pass exactly one argument.
 ','line_number':110,'multiline':True]
['text':' Step 1: Assert: O is not undefined.','line_number':119,'multiline':False]
['text':' Step 2: Assert: ! IsPropertyKey(P) is true (implicit).','line_number':122,'multiline':False]
['text':' Step 3: Assert: args is a List (implicit).','line_number':123,'multiline':False]
['text':' Step 4: Let method be ? GetV(O, P).','line_number':124,'multiline':False]
['text':' Step 5: If method is undefined, return.','line_number':130,'multiline':False]
['text':' Step 6: Return ? Call(method, O, args).','line_number':135,'multiline':False]
['text':'*
 * Streams spec, 6.3.7. ValidateAndNormalizeHighWaterMark ( highWaterMark )
 ','line_number':139,'multiline':True]
['text':' Step 1: Set highWaterMark to ? ToNumber(highWaterMark).','line_number':144,'multiline':False]
['text':' Step 2: If highWaterMark is NaN or highWaterMark < 0, throw a RangeError','line_number':149,'multiline':False]
['text':' exception.','line_number':150,'multiline':False]
['text':' Step 3: Return highWaterMark.','line_number':157,'multiline':False]
['text':'*
 * Streams spec, 6.3.8. MakeSizeAlgorithmFromSizeFunction ( size )
 *
 * The standard makes a big deal of turning JavaScript functions (grubby,
 * touched by users, covered with germs) into algorithms (pristine,
 * respectable, purposeful). We don't bother. Here we only check for errors and
 * leave `size` unchanged. Then, in ReadableStreamDefaultControllerEnqueue and
 * WritableStreamDefaultControllerGetChunkSize where this value is used, we
 * check for undefined and behave as if we had "made" an "algorithm" for it.
 ','line_number':161,'multiline':True]
['text':' Step 1: If size is undefined, return an algorithm that returns 1.','line_number':175,'multiline':False]
['text':' Deferred. Size algorithm users must check for undefined.','line_number':177,'multiline':False]
['text':' Step 2: If ! IsCallable(size) is false, throw a TypeError exception.','line_number':181,'multiline':False]
['text':' Step 3: Return an algorithm that performs the following steps, taking a','line_number':188,'multiline':False]
['text':'         chunk argument:','line_number':189,'multiline':False]
['text':'     a. Return ? Call(size, undefined, « chunk »).','line_number':190,'multiline':False]
['text':' Deferred. Size algorithm users must know how to call the size function.','line_number':191,'multiline':False]
