['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' namespace jit','line_number':24,'multiline':False]
['text':' RareArgumentsData stores the deleted-elements bits for an arguments object.','line_number':26,'multiline':False]
['text':' Because |delete arguments[i]| is uncommon, we allocate this data the first','line_number':27,'multiline':False]
['text':' time an element is deleted.','line_number':28,'multiline':False]
['text':' Pointer to an array of bits indicating, for every argument in','line_number':30,'multiline':False]
['text':' [0, initialLength) whether the element has been deleted. See','line_number':31,'multiline':False]
['text':' ArgumentsObject::isElementDeleted comment.','line_number':32,'multiline':False]
['text':' ArgumentsData stores the initial indexed arguments provided to a function','line_number':56,'multiline':False]
['text':' call. It is used to store arguments[i] -- up until the corresponding','line_number':57,'multiline':False]
['text':' property is modified, when the relevant value is flagged to memorialize the','line_number':58,'multiline':False]
['text':' modification.','line_number':59,'multiline':False]
['text':'
   * numArgs = std::max(numFormalArgs, numActualArgs)
   * The array 'args' has numArgs elements.
   ','line_number':61,'multiline':True]
['text':'
   * This array holds either the current argument value or the magic
   * forwarding value. The latter means that the function has both a
   * CallObject and an ArgumentsObject AND the particular formal variable is
   * aliased by the CallObject. In such cases, the CallObject holds the
   * canonical value so any element access to the arguments object should load
   * the value out of the CallObject (which is pointed to by MAYBE_CALL_SLOT).
   ','line_number':69,'multiline':True]
['text':' For jit use: ','line_number':79,'multiline':True]
['text':' Iterate args. ','line_number':82,'multiline':True]
['text':' Maximum supported value of arguments.length. This bounds the','line_number':93,'multiline':False]
['text':' maximum number of arguments that can be supplied to a spread call','line_number':94,'multiline':False]
['text':' or Function.prototype.apply.  This value also bounds the number of','line_number':95,'multiline':False]
['text':' elements parsed in an array initializer.  NB: keep this in sync','line_number':96,'multiline':False]
['text':' with the copy in builtin/SelfHostingDefines.h.','line_number':97,'multiline':False]
['text':' Maximum number of arguments supported in jitcode. This bounds the','line_number':100,'multiline':False]
['text':' maximum number of arguments that can be supplied to a spread call','line_number':101,'multiline':False]
['text':' or Function.prototype.apply without entering the VM. We limit the','line_number':102,'multiline':False]
['text':' number of parameters we can handle to a number that does not risk','line_number':103,'multiline':False]
['text':' us allocating too much stack, notably on Windows where there is a','line_number':104,'multiline':False]
['text':' 4K guard page that has to be touched to extend the stack. The value','line_number':105,'multiline':False]
['text':' "3000" is the size of the guard page minus an arbitrary, but large,','line_number':106,'multiline':False]
['text':' safety margin. See bug 1351278.','line_number':107,'multiline':False]
['text':'
 * [SMDOC] ArgumentsObject
 *
 * ArgumentsObject instances represent |arguments| objects created to store
 * function arguments when a function is called.  It's expensive to create such
 * objects if they're never used, so they're only created when they are
 * potentially used.
 *
 * Arguments objects are complicated because, for non-strict mode code, they
 * must alias any named arguments which were provided to the function.  Gnarly
 * example:
 *
 *   function f(a, b, c, d)
 *   {
 *     arguments[0] = "seta";
 *     assertEq(a, "seta");
 *     b = "setb";
 *     assertEq(arguments[1], "setb");
 *     c = "setc";
 *     assertEq(arguments[2], undefined);
 *     arguments[3] = "setd";
 *     assertEq(d, undefined);
 *   }
 *   f("arga", "argb");
 *
 * ES5's strict mode behaves more sanely, and named arguments don't alias
 * elements of an arguments object.
 *
 * ArgumentsObject instances use the following reserved slots:
 *
 *   INITIAL_LENGTH_SLOT
 *     Stores the initial value of arguments.length, plus a bit indicating
 *     whether arguments.length and/or arguments[@@iterator] have been
 *     modified.  Use initialLength(), hasOverriddenLength(), and
 *     hasOverriddenIterator() to access these values.  If arguments.length has
 *     been modified, then the current value of arguments.length is stored in
 *     another slot associated with a new property.
 *   DATA_SLOT
 *     Stores an ArgumentsData*, described above.
 *   MAYBE_CALL_SLOT
 *     Stores the CallObject, if the callee has aliased bindings. See
 *     the ArgumentsData::args comment.
 *   CALLEE_SLOT
 *     Stores the initial arguments.callee. This value can be overridden on
 *     mapped arguments objects, see hasOverriddenCallee.
 ','line_number':113,'multiline':True]
['text':' Our ability to inline functions that use |arguments| is limited by','line_number':177,'multiline':False]
['text':' the number of registers available to represent Value operands to','line_number':178,'multiline':False]
['text':' CreateInlinedArgumentsObject.','line_number':179,'multiline':False]
['text':' Create an arguments object for a frame that is expecting them. ','line_number':216,'multiline':True]
['text':'
   * Purposefully disconnect the returned arguments object from the frame
   * by always creating a new copy that does not alias formal parameters.
   * This allows function-local analysis to determine that formals are
   * not aliased and generally simplifies arguments objects.
   ','line_number':219,'multiline':True]
['text':'
   * Allocate ArgumentsData and fill reserved slots after allocating an
   * ArgumentsObject in Ion code.
   ','line_number':243,'multiline':True]
['text':'
   * Return the initial length of the arguments.  This may differ from the
   * current value of arguments.length!
   ','line_number':254,'multiline':True]
['text':' True iff arguments.length has been assigned or deleted.','line_number':265,'multiline':False]
['text':'
   * Create the default "length" property and set LENGTH_OVERRIDDEN_BIT.
   ','line_number':277,'multiline':True]
['text':' True iff arguments[@@iterator] has been assigned or deleted.','line_number':282,'multiline':False]
['text':'
   * Create the default @@iterator property and set ITERATOR_OVERRIDDEN_BIT.
   ','line_number':294,'multiline':True]
['text':'
   * Return the arguments iterator function.
   ','line_number':299,'multiline':True]
['text':' True iff any element has been assigned or deleted.','line_number':304,'multiline':False]
['text':'
   * Because the arguments object is a real object, its elements may be
   * deleted. This is implemented by setting a 'deleted' flag for the arg
   * which is read by argument object resolve and getter/setter hooks.
   *
   * NB: an element, once deleted, stays deleted. Thus:
   *
   *   function f(x) { delete arguments[0]; arguments[0] = 42; return x }
   *   assertEq(f(1), 1);
   *
   * This works because, once a property is deleted from an arguments object,
   * it gets regular properties with regular getters/setters that don't alias
   * ArgumentsData::slots.
   ','line_number':316,'multiline':True]
['text':'
   * An ArgumentsObject serves two roles:
   *  - a real object, accessed through regular object operations, e.g..,
   *    GetElement corresponding to 'arguments[i]';
   *  - a VM-internal data structure, storing the value of arguments (formal
   *    and actual) that are accessed directly by the VM when a reading the
   *    value of a formal parameter.
   * There are two ways to access the ArgumentsData::args corresponding to
   * these two use cases:
   *  - object access should use elements(i) which will take care of
   *    forwarding when the value is the magic forwarding value;
   *  - VM argument access should use arg(i) which will assert that the
   *    value is not the magic forwarding value (since, if such forwarding was
   *    needed, the frontend should have emitted JSOp::GetAliasedVar).
   ','line_number':350,'multiline':True]
['text':'
   * Test if an argument is forwarded, i.e. its actual value is stored in the
   * CallObject and can't be directly read from |ArgumentsData::args|.
   ','line_number':383,'multiline':True]
['text':'
   * Attempt to speedily and efficiently access the i-th element of this
   * arguments object.  Return true if the element was speedily returned.
   * Return false if the element must be looked up more slowly using
   * getProperty or some similar method. The second overload copies the
   * elements [start, start + count) into the locations starting at 'vp'.
   *
   * NB: Returning false does not indicate error!
   ','line_number':405,'multiline':True]
['text':'
   * Measures things hanging off this ArgumentsObject that are counted by the
   * |miscSize| argument in JSObject::sizeOfExcludingThis().
   ','line_number':424,'multiline':True]
['text':' Template arguments objects have no data.','line_number':429,'multiline':False]
['text':' For jit use: ','line_number':444,'multiline':True]
['text':' When forwarding slots to a backing CallObject, the slot numbers are','line_number':451,'multiline':False]
['text':' stored as uint32 magic values. This raises an ambiguity if we have','line_number':452,'multiline':False]
['text':' also copied JS_OPTIMIZED_OUT magic from a JIT frame or','line_number':453,'multiline':False]
['text':' JS_UNINITIALIZED_LEXICAL magic on the CallObject. To distinguish','line_number':454,'multiline':False]
['text':' normal magic values (those with a JSWhyMagic) and uint32 magic','line_number':455,'multiline':False]
['text':' values, we add the maximum JSWhyMagic value to the slot','line_number':456,'multiline':False]
['text':' number. This is safe as ARGS_LENGTH_MAX is well below UINT32_MAX.','line_number':457,'multiline':False]
['text':' namespace js','line_number':538,'multiline':False]
['text':' vm_ArgumentsObject_h ','line_number':545,'multiline':True]
