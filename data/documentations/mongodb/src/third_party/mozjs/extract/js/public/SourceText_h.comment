['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- ','line_number':1,'multiline':True]
['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':2,'multiline':True]
['text':'
 * SourceText encapsulates a count of char16_t (UTF-16) or Utf8Unit (UTF-8)
 * code units (note: code *units*, not bytes or code points) and those code
 * units ("source units").  (Latin-1 is not supported: all places where Latin-1
 * must be compiled first convert to a supported encoding.)
 *
 * A SourceText either observes without owning, or takes ownership of, source
 * units passed to |SourceText::init|.  Thus SourceText can be used to
 * efficiently avoid copying.
 *
 * Rules for use:
 *
 *  1) The passed-in source units must be allocated with js_malloc(),
 *     js_calloc(), or js_realloc() if |SourceText::init| is instructed to take
 *     ownership of the source units.
 *  2) If |SourceText::init| merely borrows the source units, the user must
 *     keep them alive until associated JS compilation is complete.
 *  3) Code that calls |SourceText::take{Chars,Units}()| must keep the source
 *     units alive until JS compilation completes.  Normally only the JS engine
 *     should call |SourceText::take{Chars,Units}()|.
 *  4) Use the appropriate SourceText parameterization depending on the source
 *     units encoding.
 *
 * Example use:
 *
 *    size_t length = 512;
 *    char16_t* chars = js_pod_malloc<char16_t>(length);
 *    if (!chars) {
 *        JS_ReportOutOfMemory(cx);
 *        return false;
 *    }
 *    JS::SourceText<char16_t> srcBuf;
 *    if (!srcBuf.init(cx, chars, length, JS::SourceOwnership::TakeOwnership)) {
 *        return false;
 *    }
 *    JS::Rooted<JSScript*> script(cx);
 *    if (!JS::Compile(cx, options, srcBuf, &script)) {
 *        return false;
 *    }
 ','line_number':6,'multiline':True]
['text':' MOZ_ASSERT','line_number':50,'multiline':False]
['text':' MOZ_COLD, MOZ_IS_CLASS_INIT','line_number':51,'multiline':False]
['text':' MOZ_UNLIKELY','line_number':52,'multiline':False]
['text':' size_t','line_number':54,'multiline':False]
['text':' UINT32_MAX','line_number':55,'multiline':False]
['text':' std::conditional_t, std::is_same_v','line_number':56,'multiline':False]
['text':' js::UniquePtr','line_number':58,'multiline':False]
['text':' JS::FreePolicy','line_number':59,'multiline':False]
['text':' namespace detail','line_number':71,'multiline':False]
['text':'* |char16_t| or |Utf8Unit| source units of uncertain validity. ','line_number':86,'multiline':True]
['text':'* The length in code units of |units_|. ','line_number':89,'multiline':True]
['text':'*
   * Whether this owns |units_| or merely observes source units owned by some
   * other object.
   ','line_number':92,'multiline':True]
['text':' A C++ character type that can represent the source units -- suitable for','line_number':99,'multiline':False]
['text':' passing to C++ string functions.','line_number':100,'multiline':False]
['text':'*
   * Construct a SourceText.  It must be initialized using |init()| before it
   * can be used as compilation source text.
   ','line_number':105,'multiline':True]
['text':'*
   * Construct a SourceText from contents extracted from |other|.  This
   * SourceText will then act exactly as |other| would have acted, had it
   * not been passed to this function.  |other| will return to its default-
   * constructed state and must have |init()| called on it to use it.
   ','line_number':111,'multiline':True]
['text':'*
   * Initialize this with source unit data: |char16_t| for UTF-16 source
   * units, or |Utf8Unit| for UTF-8 source units.
   *
   * If |ownership == TakeOwnership|, *this function* takes ownership of
   * |units|, *even if* this function fails, and you MUST NOT free |units|
   * yourself.  This single-owner-friendly approach reduces risk of leaks on
   * failure.
   *
   * |units| may be null if |unitsLength == 0|; if so, this will silently be
   * initialized using non-null, unowned units.
   ','line_number':132,'multiline':True]
['text':' Ideally we'd use |Unit| and not cast below, but the risk of a static','line_number':149,'multiline':False]
['text':' initializer is too great.','line_number':150,'multiline':False]
['text':' Initialize all fields *before* checking length.  This ensures that','line_number':153,'multiline':False]
['text':' if |ownership == SourceOwnership::TakeOwnership|, |units| will be','line_number':154,'multiline':False]
['text':' freed when |this|'s destructor is called.','line_number':155,'multiline':False]
['text':' IMPLEMENTATION DETAIL, DO NOT RELY ON: This limit is used so we can','line_number':166,'multiline':False]
['text':' store offsets in |JSScript|s as |uint32_t|.  It could be lifted','line_number':167,'multiline':False]
['text':' fairly easily if desired, as the compiler uses |size_t| internally.','line_number':168,'multiline':False]
['text':'*
   * Exactly identical to the |init()| overload above that accepts
   * |const Unit*|, but instead takes character data: |const CharT*|.
   *
   * (We can't just write this to accept |const CharT*|, because then in the
   * UTF-16 case this overload and the one above would be identical.  So we
   * use SFINAE to expose the |CharT| overload only if it's different.)
   ','line_number':177,'multiline':True]
['text':'*
   * Initialize this using source units transferred out of |data|.
   ','line_number':195,'multiline':True]
['text':'*
   * Exactly identical to the |init()| overload above that accepts
   * |UniquePtr<Unit[], JS::FreePolicy>|, but instead takes character data:
   * |UniquePtr<CharT[], JS::FreePolicy>|.
   *
   * (We can't just duplicate the signature above with s/Unit/CharT/, because
   * then in the UTF-16 case this overload and the one above would be identical.
   * So we use SFINAE to expose the |CharT| overload only if it's different.)
   ','line_number':204,'multiline':True]
['text':'*
   * Access the encapsulated data using a code unit type.
   *
   * This function is useful for code that wants to interact with source text
   * as *code units*, not as string data.  This doesn't matter for UTF-16,
   * but it's a crucial distinction for UTF-8.  When UTF-8 source text is
   * encapsulated, |Unit| being |mozilla::Utf8Unit| unambiguously indicates
   * that the code units are UTF-8.  In contrast |const char*| returned by
   * |get()| below could hold UTF-8 (or its ASCII subset) or Latin-1 or (in
   * particularly cursed embeddings) EBCDIC or some other legacy character
   * set.  Prefer this function to |get()| wherever possible.
   ','line_number':222,'multiline':True]
['text':'*
   * Access the encapsulated data using a character type.
   *
   * This function is useful for interactions with character-centric actions
   * like interacting with UniqueChars/UniqueTwoByteChars or printing out
   * text in a debugger, that only work with |CharT|.  But as |CharT| loses
   * encoding specificity when UTF-8 source text is encapsulated, prefer
   * |units()| to this function.
   ','line_number':236,'multiline':True]
['text':'*
   * Returns true if this owns the source units and will free them on
   * destruction.  If true, it is legal to call |take{Chars,Units}()|.
   ','line_number':247,'multiline':True]
['text':'*
   * Count of the underlying source units -- code units, not bytes or code
   * points -- in this.
   ','line_number':253,'multiline':True]
['text':'*
   * Retrieve and take ownership of the underlying source units.  The caller
   * is now responsible for calling js_free() on the returned value, *but
   * only after JS script compilation has completed*.
   *
   * After underlying source units have been taken, this will continue to
   * refer to the same data -- it just won't own the data.  get() and
   * length() will return the same values, but ownsUnits() will be false.
   * The taken source units must be kept alive until after JS script
   * compilation completes, as noted above, for this to be safe.
   *
   * The caller must check ownsUnits() before calling takeUnits().  Taking
   * and then free'ing an unowned buffer will have dire consequences.
   ','line_number':259,'multiline':True]
['text':'*
   * Akin to |takeUnits()| in all respects, but returns characters rather
   * than units.
   ','line_number':279,'multiline':True]
['text':' namespace JS','line_number':290,'multiline':False]
['text':' js_SourceText_h ','line_number':292,'multiline':True]
