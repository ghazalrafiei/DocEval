['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' The FuncType class represents a WebAssembly function signature which takes a','line_number':32,'multiline':False]
['text':' list of value types and returns an expression type. The engine uses two','line_number':33,'multiline':False]
['text':' in-memory representations of the argument Vector's memory (when elements do','line_number':34,'multiline':False]
['text':' not fit inline): normal malloc allocation (via SystemAllocPolicy) and','line_number':35,'multiline':False]
['text':' allocation in a LifoAlloc (via LifoAllocPolicy). The former FuncType objects','line_number':36,'multiline':False]
['text':' can have any lifetime since they own the memory. The latter FuncType objects','line_number':37,'multiline':False]
['text':' must not outlive the associated LifoAlloc mark/release interval (which is','line_number':38,'multiline':False]
['text':' currently the duration of module validation+compilation). Thus, long-lived','line_number':39,'multiline':False]
['text':' objects like WasmModule must use malloced allocation.','line_number':40,'multiline':False]
['text':' Entry from JS to wasm via the JIT is currently unimplemented for','line_number':46,'multiline':False]
['text':' functions that return multiple values.','line_number':47,'multiline':False]
['text':' Calls out from wasm to JS that return multiple values is currently','line_number':51,'multiline':False]
['text':' unsupported.','line_number':52,'multiline':False]
['text':' For JS->wasm jit entries, temporarily disallow certain types until the','line_number':56,'multiline':False]
['text':' stubs generator is improved.','line_number':57,'multiline':False]
['text':'   * ref params may be nullable externrefs','line_number':58,'multiline':False]
['text':'   * ref results may not be type indices','line_number':59,'multiline':False]
['text':' V128 types are excluded per spec but are guarded against separately.','line_number':60,'multiline':False]
['text':' For wasm->JS jit exits, temporarily disallow certain types until','line_number':74,'multiline':False]
['text':' the stubs generator is improved.','line_number':75,'multiline':False]
['text':'   * ref results may be nullable externrefs','line_number':76,'multiline':False]
['text':' Unexposable types must be guarded against separately.','line_number':77,'multiline':False]
['text':' Structure type.','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' The Module owns a dense array of StructType values that represent the','line_number':181,'multiline':False]
['text':' structure types that the module knows about.  It is created from the sparse','line_number':182,'multiline':False]
['text':' array of types in the ModuleEnvironment when the Module is created.','line_number':183,'multiline':False]
['text':' Field type, offset, and mutability','line_number':195,'multiline':False]
['text':' The size of the type in bytes.','line_number':196,'multiline':False]
['text':' Array type','line_number':242,'multiline':False]
['text':' field type','line_number':246,'multiline':False]
['text':' mutability','line_number':247,'multiline':False]
['text':' A tagged container for the various types that can be present in a wasm','line_number':278,'multiline':False]
['text':' module's type section.','line_number':279,'multiline':False]
['text':' A type cache maintains a cache of equivalence and subtype relations between','line_number':458,'multiline':False]
['text':' wasm types. This is required for the computation of equivalence and subtyping','line_number':459,'multiline':False]
['text':' on recursive types.','line_number':460,'multiline':False]
['text':'','line_number':461,'multiline':False]
['text':' This class is not thread-safe and so must exist separately from TypeContext,','line_number':462,'multiline':False]
['text':' which may be shared between multiple threads.','line_number':463,'multiline':False]
['text':' Generates a hash key for the ordered pair (a, b).','line_number':470,'multiline':False]
['text':' Generates a hash key for the unordered pair (a, b).','line_number':475,'multiline':False]
['text':' Mark `a` as equivalent to `b` in the equivalence cache.','line_number':489,'multiline':False]
['text':' Unmark `a` as equivalent to `b` in the equivalence cache','line_number':493,'multiline':False]
['text':' Check if `a` is equivalent to `b` in the equivalence cache','line_number':498,'multiline':False]
['text':' Mark `a` as a subtype of `b` in the subtype cache','line_number':503,'multiline':False]
['text':' Unmark `a` as a subtype of `b` in the subtype cache','line_number':507,'multiline':False]
['text':' Check if `a` is a subtype of `b` in the subtype cache','line_number':511,'multiline':False]
['text':' The result of an equivalence or subtyping check between types.','line_number':517,'multiline':False]
['text':' A type context maintains an index space for TypeDef's that can be used to','line_number':524,'multiline':False]
['text':' give ValType's meaning. It is used during compilation for modules, and','line_number':525,'multiline':False]
['text':' during runtime for all instances.','line_number':526,'multiline':False]
['text':' Disallow copy, allow move initialization','line_number':540,'multiline':False]
['text':' FuncType accessors','line_number':576,'multiline':False]
['text':' StructType accessors','line_number':590,'multiline':False]
['text':' StructType accessors','line_number':608,'multiline':False]
['text':' Type equivalence','line_number':624,'multiline':False]
['text':' Anything's equal to itself.','line_number':628,'multiline':False]
['text':' A reference may be equal to another reference','line_number':633,'multiline':False]
['text':' An rtt may be a equal to another rtt','line_number':639,'multiline':False]
['text':' Subtyping','line_number':666,'multiline':False]
['text':' Anything's a subtype of itself.','line_number':670,'multiline':False]
['text':' A reference may be a subtype of another reference','line_number':675,'multiline':False]
['text':' An rtt may be a subtype of another rtt','line_number':680,'multiline':False]
['text':' namespace wasm','line_number':727,'multiline':False]
['text':' namespace js','line_number':728,'multiline':False]
['text':' wasm_type_def_h','line_number':730,'multiline':False]
