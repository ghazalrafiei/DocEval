['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' MOZ_ASSERT','line_number':10,'multiline':False]
['text':' mozilla::Atomic, mozilla::Relaxed','line_number':11,'multiline':False]
['text':' MOZ_IMPLICIT, MOZ_RAII','line_number':12,'multiline':False]
['text':' mozilla::Maybe','line_number':13,'multiline':False]
['text':' mozilla::MaybeOneOf','line_number':14,'multiline':False]
['text':' size_t','line_number':16,'multiline':False]
['text':' uint8_t, uint32_t, uintptr_t','line_number':17,'multiline':False]
['text':' JS_PUBLIC_API','line_number':19,'multiline':False]
['text':' js::jit::{InlineFrameIterator,JSJitFrameIter}','line_number':21,'multiline':False]
['text':' JS::Handle, JS::Rooted','line_number':22,'multiline':False]
['text':' jsbytecode, JSContext, JSAtom, JSFunction, JSObject, JSScript','line_number':23,'multiline':False]
['text':' js::UniquePtr','line_number':24,'multiline':False]
['text':' JS::Value','line_number':25,'multiline':False]
['text':' js::InterpreterActivation','line_number':26,'multiline':False]
['text':' js::{AbstractFramePtr,MaybeCheckAliasing}','line_number':27,'multiline':False]
['text':' js::wasm::Trap','line_number':28,'multiline':False]
['text':' js::wasm::{ExitReason,RegisterState,WasmFrameIter}','line_number':29,'multiline':False]
['text':' js::wasm::{Frame,TrapData}','line_number':30,'multiline':False]
['text':' namespace JS','line_number':39,'multiline':False]
['text':' namespace jit','line_number':50,'multiline':False]
['text':' namespace wasm','line_number':54,'multiline':False]
['text':' Iterates over the frames of a single InterpreterActivation.','line_number':56,'multiline':False]
['text':' A JitFrameIter can iterate over all kind of frames emitted by our code','line_number':91,'multiline':False]
['text':' generators, be they composed of JS jit frames or wasm frames, interleaved or','line_number':92,'multiline':False]
['text':' not, in any order.','line_number':93,'multiline':False]
['text':'','line_number':94,'multiline':False]
['text':' In the following class:','line_number':95,'multiline':False]
['text':' - code generated for JS is referred to as JSJit.','line_number':96,'multiline':False]
['text':' - code generated for wasm is referred to as Wasm.','line_number':97,'multiline':False]
['text':' Also, Jit refers to any one of them.','line_number':98,'multiline':False]
['text':'','line_number':99,'multiline':False]
['text':' JitFrameIter uses JSJitFrameIter to iterate over JSJit code or a','line_number':100,'multiline':False]
['text':' WasmFrameIter to iterate over wasm code; only one of them is active at the','line_number':101,'multiline':False]
['text':' time. When a sub-iterator is done, the JitFrameIter knows how to stop, move','line_number':102,'multiline':False]
['text':' onto the next activation or move onto another kind of Jit code.','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' For ease of use, there is also OnlyJSJitFrameIter, which skips all the','line_number':105,'multiline':False]
['text':' non-JSJit frames.','line_number':106,'multiline':False]
['text':'','line_number':107,'multiline':False]
['text':' Note it is allowed to get a handle to the internal frame iterator via','line_number':108,'multiline':False]
['text':' asJSJit() and asWasm(), but the user has to be careful not to have those be','line_number':109,'multiline':False]
['text':' used after JitFrameIter leaves the scope or the operator++ is called.','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' In particular, this can handle the transition from wasm to jit and from jit','line_number':112,'multiline':False]
['text':' to wasm, since these can be interleaved in the same JitActivation.','line_number':113,'multiline':False]
['text':' Operations common to all frame iterators.','line_number':153,'multiline':False]
['text':' Returns the address of the next instruction that will execute in this','line_number':160,'multiline':False]
['text':' frame, once control returns to this frame.','line_number':161,'multiline':False]
['text':' Operations which have an effect only on JIT frames.','line_number':164,'multiline':False]
['text':' Returns true iff this is a JIT frame with a self-hosted script. Note: be','line_number':167,'multiline':False]
['text':' careful, JitFrameIter does not consider functions inlined by Ion.','line_number':168,'multiline':False]
['text':' A JitFrameIter that skips all the non-JSJit frames, skipping interleaved','line_number':172,'multiline':False]
['text':' frames of any another kind.','line_number':173,'multiline':False]
['text':' A FrameIter walks over a context's stack of JS script activations,','line_number':196,'multiline':False]
['text':' abstracting over whether the JS scripts were running in the interpreter or','line_number':197,'multiline':False]
['text':' different modes of compiled code.','line_number':198,'multiline':False]
['text':'','line_number':199,'multiline':False]
['text':' FrameIter is parameterized by what it includes in the stack iteration:','line_number':200,'multiline':False]
['text':'  - When provided, the optional JSPrincipal argument will cause FrameIter to','line_number':201,'multiline':False]
['text':'    only show frames in globals whose JSPrincipals are subsumed (via','line_number':202,'multiline':False]
['text':'    JSSecurityCallbacks::subsume) by the given JSPrincipal.','line_number':203,'multiline':False]
['text':'','line_number':204,'multiline':False]
['text':' Additionally, there are derived FrameIter types that automatically skip','line_number':205,'multiline':False]
['text':' certain frames:','line_number':206,'multiline':False]
['text':'  - ScriptFrameIter only shows frames that have an associated JSScript','line_number':207,'multiline':False]
['text':'    (currently everything other than wasm stack frames). When !hasScript(),','line_number':208,'multiline':False]
['text':'    clients must stick to the portion of the','line_number':209,'multiline':False]
['text':'    interface marked below.','line_number':210,'multiline':False]
['text':'  - NonBuiltinScriptFrameIter additionally filters out builtin (self-hosted)','line_number':211,'multiline':False]
['text':'    scripts.','line_number':212,'multiline':False]
['text':' when there are no more frames nor activations to unwind.','line_number':221,'multiline':False]
['text':' interpreter activation on the stack','line_number':222,'multiline':False]
['text':' jit or wasm activations on the stack','line_number':223,'multiline':False]
['text':' Unlike ScriptFrameIter itself, ScriptFrameIter::Data can be allocated on','line_number':226,'multiline':False]
['text':' the heap, so this structure should not contain any GC things.','line_number':227,'multiline':False]
['text':' -------------------------------------------------------','line_number':257,'multiline':False]
['text':' The following functions can only be called when !done()','line_number':258,'multiline':False]
['text':' -------------------------------------------------------','line_number':259,'multiline':False]
['text':' -----------------------------------------------------------','line_number':298,'multiline':False]
['text':'  The following functions can only be called when isWasm()','line_number':299,'multiline':False]
['text':' -----------------------------------------------------------','line_number':300,'multiline':False]
['text':' -----------------------------------------------------------','line_number':308,'multiline':False]
['text':' The following functions can only be called when hasScript()','line_number':309,'multiline':False]
['text':' -----------------------------------------------------------','line_number':310,'multiline':False]
['text':' The function |calleeTemplate()| returns either the function from which','line_number':321,'multiline':False]
['text':' the current |callee| was cloned or the |callee| if it can be read. As','line_number':322,'multiline':False]
['text':' long as we do not have to investigate the environment chain or build a','line_number':323,'multiline':False]
['text':' new frame, we should prefer to use |calleeTemplate| instead of','line_number':324,'multiline':False]
['text':' |callee|, as requesting the |callee| might cause the invalidation of','line_number':325,'multiline':False]
['text':' the frame. (see js::Lambda)','line_number':326,'multiline':False]
['text':' Get the original |this| value passed to this function. May not be the','line_number':350,'multiline':False]
['text':' actual this-binding (for instance, derived class constructors will','line_number':351,'multiline':False]
['text':' change their this-value later and non-strict functions will box','line_number':352,'multiline':False]
['text':' primitives).','line_number':353,'multiline':False]
['text':' These are only valid for the top frame.','line_number':361,'multiline':False]
['text':' Ensures that we have rematerialized the top frame and its associated','line_number':365,'multiline':False]
['text':' inline frames. Can only be called when isIon().','line_number':366,'multiline':False]
['text':' True when isInterp() or isBaseline(). True when isIon() if it','line_number':369,'multiline':False]
['text':' has a rematerialized frame. False otherwise.','line_number':370,'multiline':False]
['text':' -----------------------------------------------------------','line_number':373,'multiline':False]
['text':' The following functions can only be called when isInterp(),','line_number':374,'multiline':False]
['text':' isBaseline(), isWasm() or isIon(). Further, abstractFramePtr() can','line_number':375,'multiline':False]
['text':' only be called when hasUsableAbstractFramePtr().','line_number':376,'multiline':False]
['text':' -----------------------------------------------------------','line_number':377,'multiline':False]
['text':' This can only be called when isInterp():','line_number':382,'multiline':False]
['text':' This can only be called when isPhysicalJitFrame():','line_number':385,'multiline':False]
['text':' This is used to provide a raw interface for debugging.','line_number':388,'multiline':False]
['text':' A filtering of the FrameIter to only stop at non-self-hosted scripts. ','line_number':446,'multiline':True]
['text':' A filtering of the ScriptFrameIter to only stop at non-self-hosted scripts.','line_number':477,'multiline':False]
['text':'
 * Blindly iterate over all frames in the current thread's stack. These frames
 * can be from different contexts and compartments, so beware.
 ','line_number':496,'multiline':True]
['text':' Iterates over all script frame in the current thread's stack.
 * See also AllFramesIter and ScriptFrameIter.
 ','line_number':506,'multiline':True]
['text':' Popular inline definitions. ','line_number':515,'multiline':True]
['text':' Only the bottom of a group of inlined Ion frames is a physical frame.','line_number':578,'multiline':False]
['text':' namespace js','line_number':590,'multiline':False]
['text':' vm_FrameIter_h','line_number':592,'multiline':False]
