['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::OnlyJSJitFrameIter','line_number':25,'multiline':False]
['text':'depth=','line_number':48,'multiline':True]
['text':' Ensure the baselineScript_ and ionScript_ fields match the BaselineDisabled','line_number':49,'multiline':False]
['text':' and IonDisabled script flags.','line_number':50,'multiline':False]
['text':' Scripts with a JitScript can run in the Baseline Interpreter. Make sure','line_number':63,'multiline':False]
['text':' we don't create a JitScript for scripts we shouldn't Baseline interpret.','line_number':64,'multiline':False]
['text':' Store the profile string in the JitScript if the profiler is enabled.','line_number':68,'multiline':False]
['text':' Calculate allocation size.','line_number':86,'multiline':False]
['text':' Sanity check the length computation.','line_number':107,'multiline':False]
['text':' We have a JitScript so we can set the script's jitCodeRaw pointer to the','line_number':115,'multiline':False]
['text':' Baseline Interpreter code.','line_number':116,'multiline':False]
['text':' Mark all IC stub codes hanging off the IC stub entries.','line_number':186,'multiline':False]
['text':' First reserve space in inlinedChildren_ to ensure that if the ICScript is','line_number':204,'multiline':False]
['text':' added to the inlining root, it can also be added to inlinedChildren_.','line_number':205,'multiline':False]
['text':' static ','line_number':266,'multiline':True]
['text':' We have to return the entry to store in BaselineFrame::interpreterICEntry','line_number':312,'multiline':False]
['text':' when resuming in the Baseline Interpreter at pcOffset. The bytecode op at','line_number':313,'multiline':False]
['text':' pcOffset does not necessarily have an ICEntry, so we want to return the','line_number':314,'multiline':False]
['text':' first ICEntry for which the following is true:','line_number':315,'multiline':False]
['text':'','line_number':316,'multiline':False]
['text':'    entry.pcOffset() >= pcOffset','line_number':317,'multiline':False]
['text':'','line_number':318,'multiline':False]
['text':' Fortunately, ComputeBinarySearchMid returns exactly this entry.','line_number':319,'multiline':False]
['text':' Resuming at a pc after the last ICEntry. Just return nullptr:','line_number':330,'multiline':False]
['text':' BaselineFrame::interpreterICEntry will never be used in this case.','line_number':331,'multiline':False]
['text':' We're sweeping and the script is dead. Don't purge optimized stubs','line_number':340,'multiline':False]
['text':' because (1) accessing CacheIRStubInfo pointers in ICStubs is invalid','line_number':341,'multiline':False]
['text':' because we may have swept them already when we started (incremental)','line_number':342,'multiline':False]
['text':' sweeping and (2) it's unnecessary because this script will be finalized','line_number':343,'multiline':False]
['text':' soon anyway.','line_number':344,'multiline':False]
['text':' Unlink all stubs allocated in the optimized space.','line_number':368,'multiline':False]
['text':' All remaining stubs must be allocated in the fallback space.','line_number':386,'multiline':False]
['text':' Keep the JitScript and BaselineScript around, since bailouts from','line_number':568,'multiline':False]
['text':' the ion jitcode need to re-enter into the Baseline code.','line_number':569,'multiline':False]
['text':' Don't block attaching an optimized stub, but don't process allocations','line_number':612,'multiline':False]
['text':' for this site.','line_number':613,'multiline':False]
['text':' This hash is used to verify that we do not recompile after a','line_number':669,'multiline':False]
['text':' TranspiledCacheIR invalidation with the exact same ICs.','line_number':670,'multiline':False]
['text':'','line_number':671,'multiline':False]
['text':' It should change iff an ICEntry in this ICScript (or an ICScript','line_number':672,'multiline':False]
['text':' inlined into this ICScript) is modified such that we will make a','line_number':673,'multiline':False]
['text':' different decision in WarpScriptOracle::maybeInlineIC. This means:','line_number':674,'multiline':False]
['text':'','line_number':675,'multiline':False]
['text':' 1. The hash will change if we attach a new stub.','line_number':676,'multiline':False]
['text':' 2. The hash will change if the entered count of any CacheIR stub','line_number':677,'multiline':False]
['text':'    other than the first changes from 0.','line_number':678,'multiline':False]
['text':' 3. The hash will change if the entered count of the fallback stub','line_number':679,'multiline':False]
['text':'    changes from 0.','line_number':680,'multiline':False]
['text':'','line_number':681,'multiline':False]
['text':' Hash the address of the first stub.','line_number':687,'multiline':False]
['text':' Hash whether subsequent stubs have entry count 0.','line_number':690,'multiline':False]
['text':' Hash whether the fallback has entry count 0.','line_number':699,'multiline':False]
