['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Note: This is not compliant with the system ABI.  The Lowering phase','line_number':28,'multiline':False]
['text':' expects to lower an MWasmParameter to only one register.','line_number':29,'multiline':False]
['text':' These registers may be volatile or nonvolatile.','line_number':51,'multiline':False]
['text':' This register may be volatile or nonvolatile. Avoid f18 which is the','line_number':57,'multiline':False]
['text':' ScratchDoubleReg.','line_number':58,'multiline':False]
['text':' These registers may be volatile or nonvolatile.','line_number':62,'multiline':False]
['text':' Note: these three registers are all guaranteed to be different','line_number':63,'multiline':False]
['text':' This register is guaranteed to be clobberable during the prologue and','line_number':68,'multiline':False]
['text':' epilogue of an ABI call which must preserve both ABI argument, return','line_number':69,'multiline':False]
['text':' and non-volatile registers.','line_number':70,'multiline':False]
['text':' TLS pointer argument register for WebAssembly functions. This must not alias','line_number':73,'multiline':False]
['text':' any other register used for passing function arguments or return values.','line_number':74,'multiline':False]
['text':' Preserved by WebAssembly functions.','line_number':75,'multiline':False]
['text':' Registers used for asm.js/wasm table calls. These registers must be disjoint','line_number':78,'multiline':False]
['text':' from the ABI argument registers, WasmTlsReg and each other.','line_number':79,'multiline':False]
['text':' Register used as a scratch along the return path in the fast js -> wasm stub','line_number':85,'multiline':False]
['text':' code. This must not overlap ReturnReg, JSReturnOperand, or WasmTlsReg. It','line_number':86,'multiline':False]
['text':' must be a volatile register.','line_number':87,'multiline':False]
['text':' Register used to store a reference to an exception thrown by Wasm to an','line_number':90,'multiline':False]
['text':' exception handling block. Should not overlap with WasmTlsReg.','line_number':91,'multiline':False]
['text':' MIPS CPUs can only load multibyte data that is "naturally"','line_number':146,'multiline':False]
['text':' four-byte-aligned, sp register should be eight-byte-aligned.','line_number':147,'multiline':False]
['text':' TODO this is just a filler to prevent a build failure. The MIPS SIMD','line_number':157,'multiline':False]
['text':' alignment requirements still need to be explored.','line_number':158,'multiline':False]
['text':' TODO Copy the static_asserts from x64/x86 assembler files.','line_number':159,'multiline':False]
['text':' See comments in wasm::GenerateFunctionPrologue.  The difference between these','line_number':164,'multiline':False]
['text':' is the size of the largest callable prologue on the platform.','line_number':165,'multiline':False]
['text':' This is used to access the odd register form the pair of single','line_number':181,'multiline':False]
['text':' precision registers that make one double register.','line_number':182,'multiline':False]
['text':' Copy the assembly code to the given buffer, and perform any pending','line_number':204,'multiline':False]
['text':' relocations relying on the target address.','line_number':205,'multiline':False]
['text':' Assembler','line_number':225,'multiline':False]
['text':' Get a register in which we plan to put a quantity that will be used as an','line_number':237,'multiline':False]
['text':' integer argument. This differs from GetIntArgReg in that if we have no more','line_number':238,'multiline':False]
['text':' actual argument registers to use we will fall back on using whatever','line_number':239,'multiline':False]
['text':' CallTempReg* don't overlap the argument registers, and only fail once those','line_number':240,'multiline':False]
['text':' run out too.','line_number':241,'multiline':False]
['text':' NOTE: We can't properly determine which regs are used if there are','line_number':244,'multiline':False]
['text':' float arguments. If this is needed, we will have to guess.','line_number':245,'multiline':False]
['text':' Unfortunately, we have to assume things about the point at which','line_number':251,'multiline':False]
['text':' GetIntArgReg returns false, because we need to know how many registers it','line_number':252,'multiline':False]
['text':' can allocate.','line_number':253,'multiline':False]
['text':' namespace jit','line_number':262,'multiline':False]
['text':' namespace js','line_number':263,'multiline':False]
['text':' jit_mips32_Assembler_mips32_h ','line_number':265,'multiline':True]
