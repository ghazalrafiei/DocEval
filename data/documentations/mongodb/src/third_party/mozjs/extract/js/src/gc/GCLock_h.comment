['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * GC-internal classes for acquiring and releasing the GC lock.
 ','line_number':7,'multiline':True]
['text':'
 * RAII class that takes the GC lock while it is live.
 *
 * Usually functions will pass const references of this class.  However
 * non-const references can be used to either temporarily release the lock by
 * use of AutoUnlockGC or to start background allocation when the lock is
 * released.
 ','line_number':20,'multiline':True]
['text':' For lock/unlock.','line_number':56,'multiline':False]
['text':'
 * Same as AutoLockGC except it can optionally start a background chunk
 * allocation task when the lock is released.
 ','line_number':59,'multiline':True]
['text':'
     * We have to do this after releasing the lock because it may acquire
     * the helper lock which could cause lock inversion if we still held
     * the GC lock.
     ','line_number':71,'multiline':True]
['text':'
   * This can be used to start a background allocation task (if one isn't
   * already running) that allocates chunks and makes them available in the
   * free chunks list.  This happens after the lock is released in order to
   * avoid lock inversion.
   ','line_number':81,'multiline':True]
['text':' true if we should start a background chunk allocation task after the','line_number':90,'multiline':False]
['text':' lock is released.','line_number':91,'multiline':False]
['text':' namespace js','line_number':108,'multiline':False]
['text':' gc_GCLock_h ','line_number':110,'multiline':True]
