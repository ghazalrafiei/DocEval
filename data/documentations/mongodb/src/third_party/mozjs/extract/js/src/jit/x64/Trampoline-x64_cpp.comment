['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::jit::JitActivation','line_number':20,'multiline':False]
['text':' This struct reflects the contents of the stack entry.','line_number':30,'multiline':False]
['text':' Given a `CommonFrameLayout* frame`:','line_number':31,'multiline':False]
['text':' - `frame->prevType()` should be `FrameType::CppToJSJit`.','line_number':32,'multiline':False]
['text':' - Then EnterJITStackEntry starts at:','line_number':33,'multiline':False]
['text':'   (uint8_t*)frame + frame->headerSize() + frame->prevFrameLocalSize()','line_number':34,'multiline':False]
['text':' 16-byte aligment for xmm registers above.','line_number':53,'multiline':False]
['text':' Pushed by CALL.','line_number':67,'multiline':False]
['text':' All registers to save and restore. This includes the stack pointer, since we','line_number':71,'multiline':False]
['text':' use the ability to reference register values on the stack by index.','line_number':72,'multiline':False]
['text':' Generates a trampoline for calling Jit compiled code from a C++ function.','line_number':77,'multiline':False]
['text':' The trampoline use the EnterJitCode signature, with the standard x64 fastcall','line_number':78,'multiline':False]
['text':' calling convention.','line_number':79,'multiline':False]
['text':' return address ','line_number':84,'multiline':True]
['text':' Note: the stack pushes below must match the fields in EnterJITStackEntry.','line_number':103,'multiline':False]
['text':' Save old stack frame pointer, set new stack frame pointer.','line_number':105,'multiline':False]
['text':' Save non-volatile registers. These must be saved by the trampoline, rather','line_number':109,'multiline':False]
['text':' than by the JIT'd code, because they are scanned by the conservative','line_number':110,'multiline':False]
['text':' scanner.','line_number':111,'multiline':False]
['text':' 16-byte aligment for vmovdqa','line_number':121,'multiline':False]
['text':' Save arguments passed in registers needed after function call.','line_number':136,'multiline':False]
['text':' End of pushes reflected in EnterJITStackEntry, i.e. EnterJITStackEntry','line_number':139,'multiline':False]
['text':' starts at this rsp.','line_number':140,'multiline':False]
['text':' Remember stack depth without padding and arguments, the frame descriptor','line_number':141,'multiline':False]
['text':' will record the number of bytes pushed after this.','line_number':142,'multiline':False]
['text':' Remember number of bytes occupied by argument vector','line_number':145,'multiline':False]
['text':' if we are constructing, that also needs to include newTarget','line_number':148,'multiline':False]
['text':' r13 = argc * sizeof(Value)','line_number':159,'multiline':False]
['text':' Guarantee stack alignment of Jit frames.','line_number':162,'multiline':False]
['text':'','line_number':163,'multiline':False]
['text':' This code compensates for the offset created by the copy of the vector of','line_number':164,'multiline':False]
['text':' arguments, such that the jit frame will be aligned once the return','line_number':165,'multiline':False]
['text':' address is pushed on the stack.','line_number':166,'multiline':False]
['text':'','line_number':167,'multiline':False]
['text':' In the computation of the offset, we omit the size of the JitFrameLayout','line_number':168,'multiline':False]
['text':' which is pushed on the stack, as the JitFrameLayout size is a multiple of','line_number':169,'multiline':False]
['text':' the JitStackAlignment.','line_number':170,'multiline':False]
['text':'**************************************************************
  Loop over argv vector, push arguments onto stack in reverse order
  **************************************************************','line_number':179,'multiline':True]
['text':' r13 still stores the number of bytes in the argument vector.','line_number':183,'multiline':False]
['text':' r13 points above last argument or newTarget','line_number':184,'multiline':False]
['text':' while r13 > rdx, push arguments.','line_number':186,'multiline':False]
['text':' Create the frame descriptor.','line_number':201,'multiline':False]
['text':' Push the number of actual arguments.  |result| is used to store the','line_number':205,'multiline':False]
['text':' actual number of arguments without adding an extra argument to the enter','line_number':206,'multiline':False]
['text':' JIT.','line_number':207,'multiline':False]
['text':' Push the callee token.','line_number':212,'multiline':False]
['text':' Push the descriptor.','line_number':215,'multiline':False]
['text':' Handle Interpreter -> Baseline OSR.','line_number':221,'multiline':False]
['text':' Ensure that |scratch| does not end up being JSReturnOperand.','line_number':227,'multiline':False]
['text':' Do takeUnchecked because on Win64/x64, reg_code (IntArgReg0) and','line_number':228,'multiline':False]
['text':' JSReturnOperand are the same (rcx).  See bug 849398.','line_number':229,'multiline':False]
['text':' Push return address','line_number':239,'multiline':False]
['text':' Push previous frame pointer.','line_number':243,'multiline':False]
['text':' Reserve frame.','line_number':246,'multiline':False]
['text':' Reserve space for locals and stack values.','line_number':253,'multiline':False]
['text':' Enter exit frame.','line_number':259,'multiline':False]
['text':' Fake return address.','line_number':266,'multiline':False]
['text':' No GC things to mark, push a bare token.','line_number':267,'multiline':False]
['text':' BaselineFrame','line_number':279,'multiline':False]
['text':' InterpreterFrame','line_number':280,'multiline':False]
['text':' If OSR-ing, then emit instrumentation for setting lastProfilerFrame','line_number':295,'multiline':False]
['text':' if profiler instrumentation is enabled.','line_number':296,'multiline':False]
['text':' OOM: load error value, discard return address and previous frame','line_number':311,'multiline':False]
['text':' pointer and return.','line_number':312,'multiline':False]
['text':' The call will push the return address on the stack, thus we check that','line_number':324,'multiline':False]
['text':' the stack would be aligned once the call is complete.','line_number':325,'multiline':False]
['text':' Call function.','line_number':328,'multiline':False]
['text':' Interpreter -> Baseline OSR will return here.','line_number':332,'multiline':False]
['text':' Pop arguments and padding from stack.','line_number':339,'multiline':False]
['text':' Pop and decode descriptor.','line_number':340,'multiline':False]
['text':' Discard calleeToken.','line_number':342,'multiline':False]
['text':' Discard numActualArgs.','line_number':343,'multiline':False]
['text':' Remove arguments.','line_number':344,'multiline':False]
['text':'****************************************************************
  Place return value where it belongs, pop all saved registers
  ****************************************************************','line_number':346,'multiline':True]
['text':' vp','line_number':349,'multiline':False]
['text':' Restore non-volatile registers.','line_number':352,'multiline':False]
['text':' Restore frame pointer and return.','line_number':376,'multiline':False]
['text':' static','line_number':381,'multiline':False]
['text':' This is not a CppToJSJit frame, there are no C++ registers here.','line_number':385,'multiline':False]
['text':' The entry is (frame size stored in descriptor) bytes past the header.','line_number':389,'multiline':False]
['text':' Extract native function call registers.','line_number':397,'multiline':False]
['text':' sp should be inside the caller's frame, so set sp to the value of the stack','line_number':401,'multiline':False]
['text':' pointer before the call to the EnterJit trampoline.','line_number':402,'multiline':False]
['text':' No lr in this world.','line_number':404,'multiline':False]
['text':' Push AllRegs in a way that is compatible with RegisterDump, regardless of','line_number':409,'multiline':False]
['text':' what PushRegsInMask might do to reduce the set size.','line_number':410,'multiline':False]
['text':' When SIMD isn't supported, PushRegsInMask reduces the set of float','line_number':415,'multiline':False]
['text':' registers to be double-sized, while the RegisterDump expects each of','line_number':416,'multiline':False]
['text':' the float registers to have the maximal possible size','line_number':417,'multiline':False]
['text':' (Simd128DataSize). To work around this, we just spill the double','line_number':418,'multiline':False]
['text':' registers by hand here, using the register dump offset directly.','line_number':419,'multiline':False]
['text':' See explanatory comment in x86's JitRuntime::generateInvalidator.','line_number':436,'multiline':False]
['text':' Push registers such that we can access them from [base + code].','line_number':440,'multiline':False]
['text':' Argument to jit::InvalidationBailout.','line_number':443,'multiline':False]
['text':' Make space for InvalidationBailout's frameSize outparam.','line_number':445,'multiline':False]
['text':' Make space for InvalidationBailout's bailoutInfo outparam.','line_number':449,'multiline':False]
['text':' Get the bailoutInfo outparam.','line_number':462,'multiline':False]
['text':' Get the frameSize outparam.','line_number':463,'multiline':False]
['text':' Pop the machine state and the dead frame.','line_number':465,'multiline':False]
['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in r9.','line_number':468,'multiline':False]
['text':' Do not erase the frame pointer in this function.','line_number':474,'multiline':False]
['text':' Caller:','line_number':485,'multiline':False]
['text':' [arg2] [arg1] [this] [[argc] [callee] [descr] [raddr]] <- rsp','line_number':486,'multiline':False]
['text':' Add |this|, in the counter of known arguments.','line_number':488,'multiline':False]
['text':' Load |nformals| into %rcx.','line_number':492,'multiline':False]
['text':' Stash another copy in r11, since we are going to do destructive operations','line_number':498,'multiline':False]
['text':' on rcx','line_number':499,'multiline':False]
['text':' Including |this|, and |new.target|, there are (|nformals| + 1 +','line_number':508,'multiline':False]
['text':' isConstructing) arguments to push to the stack.  Then we push a','line_number':509,'multiline':False]
['text':' JitFrameLayout.  We compute the padding expressed in the number of extra','line_number':510,'multiline':False]
['text':' |undefined| values to push on the stack.','line_number':511,'multiline':False]
['text':' for padding ','line_number':522,'multiline':True]
['text':' for |this| ','line_number':522,'multiline':True]
['text':' Load the number of |undefined|s to push into %rcx.','line_number':527,'multiline':False]
['text':' Caller:','line_number':530,'multiline':False]
['text':' [arg2] [arg1] [this] [ [argc] [callee] [descr] [raddr] ] <- rsp <- r9','line_number':531,'multiline':False]
['text':' '------ #r8 -------'','line_number':532,'multiline':False]
['text':'','line_number':533,'multiline':False]
['text':' Rectifier frame:','line_number':534,'multiline':False]
['text':' [undef] [undef] [undef] [arg2] [arg1] [this] [ [argc] [callee]','line_number':535,'multiline':False]
['text':'                                                [descr] [raddr] ]','line_number':536,'multiline':False]
['text':' '------- #rcx --------' '------ #r8 -------'','line_number':537,'multiline':False]
['text':' Copy the number of actual arguments into rdx. Use lea to subtract 1 for','line_number':539,'multiline':False]
['text':' |this|.','line_number':540,'multiline':False]
['text':' Save %rsp.','line_number':545,'multiline':False]
['text':' Push undefined. (including the padding)','line_number':547,'multiline':False]
['text':' Get the topmost argument.','line_number':557,'multiline':False]
['text':' | - sizeof(Value)| is used to put rcx such that we can read the last','line_number':560,'multiline':False]
['text':' argument, and not the value which is after.','line_number':561,'multiline':False]
['text':' Copy & Push arguments, |nargs| + 1 times (to include |this|).','line_number':565,'multiline':False]
['text':' if constructing, copy newTarget','line_number':576,'multiline':False]
['text':' thisFrame[numFormals] = prevFrame[argc]','line_number':584,'multiline':False]
['text':' +1 for |this|. We want vp[argc], so don't subtract 1','line_number':587,'multiline':False]
['text':' Again, 1 for |this|','line_number':592,'multiline':False]
['text':' Caller:','line_number':599,'multiline':False]
['text':' [arg2] [arg1] [this] [ [argc] [callee] [descr] [raddr] ] <- r9','line_number':600,'multiline':False]
['text':'','line_number':601,'multiline':False]
['text':'','line_number':602,'multiline':False]
['text':' Rectifier frame:','line_number':603,'multiline':False]
['text':' [undef] [undef] [undef] [arg2] [arg1] [this] <- rsp [ [argc] [callee]','line_number':604,'multiline':False]
['text':'                                                       [descr] [raddr] ]','line_number':605,'multiline':False]
['text':'','line_number':606,'multiline':False]
['text':' Construct descriptor.','line_number':608,'multiline':False]
['text':' Construct JitFrameLayout.','line_number':612,'multiline':False]
['text':' numActualArgs','line_number':613,'multiline':False]
['text':' callee token','line_number':614,'multiline':False]
['text':' descriptor','line_number':615,'multiline':False]
['text':' Call the target function.','line_number':617,'multiline':False]
['text':' See BaselineCacheIRCompiler::emitCallInlinedFunction.','line_number':630,'multiline':False]
['text':' Remove the rectifier frame.','line_number':638,'multiline':False]
['text':' r9 <- descriptor with FrameType.','line_number':639,'multiline':False]
['text':' Discard calleeToken.','line_number':641,'multiline':False]
['text':' Discard numActualArgs.','line_number':642,'multiline':False]
['text':' Discard pushed arguments.','line_number':643,'multiline':False]
['text':' Push registers such that we can access them from [base + code].','line_number':649,'multiline':False]
['text':' Get the stack pointer into a register, pre-alignment.','line_number':652,'multiline':False]
['text':' Make space for Bailout's bailoutInfo outparam.','line_number':660,'multiline':False]
['text':' Call the bailout function.','line_number':664,'multiline':False]
['text':' Get the bailoutInfo outparam.','line_number':672,'multiline':False]
['text':' Stack is:','line_number':674,'multiline':False]
['text':'     [frame]','line_number':675,'multiline':False]
['text':'     snapshotOffset','line_number':676,'multiline':False]
['text':'     frameSize','line_number':677,'multiline':False]
['text':'     [bailoutFrame]','line_number':678,'multiline':False]
['text':'','line_number':679,'multiline':False]
['text':' Remove both the bailout frame and the topmost Ion frame's stack.','line_number':680,'multiline':False]
['text':' Jump to shared bailout tail. The BailoutInfo pointer has to be in r9.','line_number':686,'multiline':False]
['text':' Avoid conflicts with argument registers while discarding the result after','line_number':708,'multiline':False]
['text':' the function call.','line_number':709,'multiline':False]
['text':' The context is the first argument.','line_number':716,'multiline':False]
['text':' Stack is:','line_number':720,'multiline':False]
['text':'    ... frame ...','line_number':721,'multiline':False]
['text':'  +12 [args]','line_number':722,'multiline':False]
['text':'  +8  descriptor','line_number':723,'multiline':False]
['text':'  +0  returnAddress','line_number':724,'multiline':False]
['text':'','line_number':725,'multiline':False]
['text':' We're aligned to an exit frame, so link it up.','line_number':726,'multiline':False]
['text':' Save the current stack pointer as the base for copying arguments.','line_number':730,'multiline':False]
['text':' Reserve space for the outparameter.','line_number':738,'multiline':False]
['text':' Copy arguments.','line_number':781,'multiline':False]
['text':' Copy the implicit outparam, if any.','line_number':804,'multiline':False]
['text':' Test for failure.','line_number':816,'multiline':False]
['text':' Load the outparam and free any allocated stack.','line_number':831,'multiline':False]
['text':' Until C++ code is instrumented against Spectre, prevent speculative','line_number':868,'multiline':False]
['text':' execution from returning any private data.','line_number':869,'multiline':False]
['text':' Call into C++ to mark this GC thing.','line_number':898,'multiline':False]
['text':'','line_number':953,'multiline':False]
['text':' The code generated below expects that the current stack pointer points','line_number':954,'multiline':False]
['text':' to an Ion or Baseline frame, at the state it would be immediately','line_number':955,'multiline':False]
['text':' before a ret().  Thus, after this stub's business is done, it executes','line_number':956,'multiline':False]
['text':' a ret() and returns directly to the caller script, on behalf of the','line_number':957,'multiline':False]
['text':' callee script that jumped to this code.','line_number':958,'multiline':False]
['text':'','line_number':959,'multiline':False]
['text':' Thus the expected stack is:','line_number':960,'multiline':False]
['text':'','line_number':961,'multiline':False]
['text':'                                   StackPointer ----+','line_number':962,'multiline':False]
['text':'                                                    v','line_number':963,'multiline':False]
['text':' ..., ActualArgc, CalleeToken, Descriptor, ReturnAddr','line_number':964,'multiline':False]
['text':' MEM-HI                                       MEM-LOW','line_number':965,'multiline':False]
['text':'','line_number':966,'multiline':False]
['text':'','line_number':967,'multiline':False]
['text':' The generated jitcode is responsible for overwriting the','line_number':968,'multiline':False]
['text':' jitActivation->lastProfilingFrame field with a pointer to the previous','line_number':969,'multiline':False]
['text':' Ion or Baseline jit-frame that was pushed before this one. It is also','line_number':970,'multiline':False]
['text':' responsible for overwriting jitActivation->lastProfilingCallSite with','line_number':971,'multiline':False]
['text':' the return address into that frame.  The frame could either be an','line_number':972,'multiline':False]
['text':' immediate "caller" frame, or it could be a frame in a previous','line_number':973,'multiline':False]
['text':' JitActivation (if the current frame was entered from C++, and the C++','line_number':974,'multiline':False]
['text':' was entered by some caller jit-frame further down the stack).','line_number':975,'multiline':False]
['text':'','line_number':976,'multiline':False]
['text':' So this jitcode is responsible for "walking up" the jit stack, finding','line_number':977,'multiline':False]
['text':' the previous Ion or Baseline JS frame, and storing its address and the','line_number':978,'multiline':False]
['text':' return address into the appropriate fields on the current jitActivation.','line_number':979,'multiline':False]
['text':'','line_number':980,'multiline':False]
['text':' There are a fixed number of different path types that can lead to the','line_number':981,'multiline':False]
['text':' current frame, which is either a baseline or ion frame:','line_number':982,'multiline':False]
['text':'','line_number':983,'multiline':False]
['text':' <Baseline-Or-Ion>','line_number':984,'multiline':False]
['text':' ^','line_number':985,'multiline':False]
['text':' |','line_number':986,'multiline':False]
['text':' ^--- Ion','line_number':987,'multiline':False]
['text':' |','line_number':988,'multiline':False]
['text':' ^--- Baseline Stub <---- Baseline','line_number':989,'multiline':False]
['text':' |','line_number':990,'multiline':False]
['text':' ^--- Argument Rectifier','line_number':991,'multiline':False]
['text':' |    ^','line_number':992,'multiline':False]
['text':' |    |','line_number':993,'multiline':False]
['text':' |    ^--- Ion','line_number':994,'multiline':False]
['text':' |    |','line_number':995,'multiline':False]
['text':' |    ^--- Baseline Stub <---- Baseline','line_number':996,'multiline':False]
['text':' |','line_number':997,'multiline':False]
['text':' ^--- Entry Frame (From C++)','line_number':998,'multiline':False]
['text':'','line_number':999,'multiline':False]
['text':' Ensure that frame we are exiting is current lastProfilingFrame','line_number':1011,'multiline':False]
['text':' Load the frame descriptor into |scratch1|, figure out what to do depending','line_number':1024,'multiline':False]
['text':' on its type.','line_number':1025,'multiline':False]
['text':' Going into the conditionals, we will have:','line_number':1029,'multiline':False]
['text':'      FrameDescriptor.size in scratch1','line_number':1030,'multiline':False]
['text':'      FrameDescriptor.type in scratch2','line_number':1031,'multiline':False]
['text':' Handling of each case is dependent on FrameDescriptor.type','line_number':1036,'multiline':False]
['text':' The WasmToJSJit is just another kind of entry','line_number':1057,'multiline':False]
['text':'','line_number':1064,'multiline':False]
['text':' FrameType::IonJS','line_number':1065,'multiline':False]
['text':'','line_number':1066,'multiline':False]
['text':' Stack layout:','line_number':1067,'multiline':False]
['text':'                  ...','line_number':1068,'multiline':False]
['text':'                  Ion-Descriptor','line_number':1069,'multiline':False]
['text':'     Prev-FP ---> Ion-ReturnAddr','line_number':1070,'multiline':False]
['text':'                  ... previous frame data ... |- Descriptor.Size','line_number':1071,'multiline':False]
['text':'                  ... arguments ...           |','line_number':1072,'multiline':False]
['text':'                  ActualArgc          |','line_number':1073,'multiline':False]
['text':'                  CalleeToken         |- JitFrameLayout::Size()','line_number':1074,'multiline':False]
['text':'                  Descriptor          |','line_number':1075,'multiline':False]
['text':'        FP -----> ReturnAddr          |','line_number':1076,'multiline':False]
['text':'','line_number':1077,'multiline':False]
['text':' returning directly to an IonJS frame.  Store return addr to frame','line_number':1080,'multiline':False]
['text':' in lastProfilingCallSite.','line_number':1081,'multiline':False]
['text':' Store return frame in lastProfilingFrame.','line_number':1086,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size*1 + JitFrameLayout::Size();','line_number':1087,'multiline':False]
['text':'','line_number':1094,'multiline':False]
['text':' FrameType::BaselineStub','line_number':1095,'multiline':False]
['text':'','line_number':1096,'multiline':False]
['text':' Look past the stub and store the frame pointer to','line_number':1097,'multiline':False]
['text':' the baselineJS frame prior to it.','line_number':1098,'multiline':False]
['text':'','line_number':1099,'multiline':False]
['text':' Stack layout:','line_number':1100,'multiline':False]
['text':'              ...','line_number':1101,'multiline':False]
['text':'              BL-Descriptor','line_number':1102,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1103,'multiline':False]
['text':'      +-----> BL-PrevFramePointer','line_number':1104,'multiline':False]
['text':'      |       ... BL-FrameData ...','line_number':1105,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1106,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1107,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1108,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Descriptor.Size','line_number':1109,'multiline':False]
['text':'              ... arguments ...           |','line_number':1110,'multiline':False]
['text':'              ActualArgc          |','line_number':1111,'multiline':False]
['text':'              CalleeToken         |- JitFrameLayout::Size()','line_number':1112,'multiline':False]
['text':'              Descriptor          |','line_number':1113,'multiline':False]
['text':'    FP -----> ReturnAddr          |','line_number':1114,'multiline':False]
['text':'','line_number':1115,'multiline':False]
['text':' We take advantage of the fact that the stub frame saves the frame','line_number':1116,'multiline':False]
['text':' pointer pointing to the baseline frame, so a bunch of calculation can','line_number':1117,'multiline':False]
['text':' be avoided.','line_number':1118,'multiline':False]
['text':'','line_number':1119,'multiline':False]
['text':' Skip past BL-PrevFramePtr','line_number':1133,'multiline':False]
['text':'','line_number':1138,'multiline':False]
['text':' FrameType::Rectifier','line_number':1139,'multiline':False]
['text':'','line_number':1140,'multiline':False]
['text':' The rectifier frame can be preceded by either an IonJS, a BaselineStub,','line_number':1141,'multiline':False]
['text':' or a CppToJSJit/WasmToJSJit frame.','line_number':1142,'multiline':False]
['text':'','line_number':1143,'multiline':False]
['text':' Stack layout if caller of rectifier was Ion or CppToJSJit/WasmToJSJit:','line_number':1144,'multiline':False]
['text':'','line_number':1145,'multiline':False]
['text':'              Ion-Descriptor','line_number':1146,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1147,'multiline':False]
['text':'              ... ion frame data ... |- Rect-Descriptor.Size','line_number':1148,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1149,'multiline':False]
['text':'','line_number':1150,'multiline':False]
['text':' Stack layout if caller of rectifier was Baseline:','line_number':1151,'multiline':False]
['text':'','line_number':1152,'multiline':False]
['text':'              BL-Descriptor','line_number':1153,'multiline':False]
['text':' Prev-FP ---> BL-ReturnAddr','line_number':1154,'multiline':False]
['text':'      +-----> BL-SavedFramePointer','line_number':1155,'multiline':False]
['text':'      |       ... baseline frame data ...','line_number':1156,'multiline':False]
['text':'      |       BLStub-Descriptor','line_number':1157,'multiline':False]
['text':'      |       BLStub-ReturnAddr','line_number':1158,'multiline':False]
['text':'      |       BLStub-StubPointer          |','line_number':1159,'multiline':False]
['text':'      +------ BLStub-SavedFramePointer    |- Rect-Descriptor.Size','line_number':1160,'multiline':False]
['text':'              ... args to rectifier ...   |','line_number':1161,'multiline':False]
['text':'              < COMMON LAYOUT >','line_number':1162,'multiline':False]
['text':'','line_number':1163,'multiline':False]
['text':' Common stack layout:','line_number':1164,'multiline':False]
['text':'','line_number':1165,'multiline':False]
['text':'              ActualArgc          |','line_number':1166,'multiline':False]
['text':'              CalleeToken         |- IonRectitiferFrameLayout::Size()','line_number':1167,'multiline':False]
['text':'              Rect-Descriptor     |','line_number':1168,'multiline':False]
['text':'              Rect-ReturnAddr     |','line_number':1169,'multiline':False]
['text':'              ... rectifier data & args ... |- Descriptor.Size','line_number':1170,'multiline':False]
['text':'              ActualArgc      |','line_number':1171,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1172,'multiline':False]
['text':'              Descriptor      |','line_number':1173,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1174,'multiline':False]
['text':'','line_number':1175,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1178,'multiline':False]
['text':' Now |scratch1| contains Rect-Descriptor.Size','line_number':1187,'multiline':False]
['text':' and |scratch2| points to Rectifier frame','line_number':1188,'multiline':False]
['text':' and |scratch3| contains Rect-Descriptor.Type','line_number':1189,'multiline':False]
['text':' Check for either Ion or something else frame.','line_number':1193,'multiline':False]
['text':' Handle Rectifier <- IonJS','line_number':1198,'multiline':False]
['text':' scratch3 := RectFrame[ReturnAddr]','line_number':1199,'multiline':False]
['text':' scratch3 := RectFrame + Rect-Descriptor.Size +','line_number':1205,'multiline':False]
['text':'             RectifierFrameLayout::Size()','line_number':1206,'multiline':False]
['text':' Check for either BaselineStub or a CppToJSJit/WasmToJSJit entry','line_number':1215,'multiline':False]
['text':' frame.','line_number':1216,'multiline':False]
['text':' Handle Rectifier <- BaselineStub <- BaselineJS','line_number':1220,'multiline':False]
['text':' FrameType::IonICCall','line_number':1237,'multiline':False]
['text':'','line_number':1238,'multiline':False]
['text':' The caller is always an IonJS frame.','line_number':1239,'multiline':False]
['text':'','line_number':1240,'multiline':False]
['text':'              Ion-Descriptor','line_number':1241,'multiline':False]
['text':'              Ion-ReturnAddr','line_number':1242,'multiline':False]
['text':'              ... ion frame data ... |- CallFrame-Descriptor.Size','line_number':1243,'multiline':False]
['text':'              StubCode               |','line_number':1244,'multiline':False]
['text':'              ICCallFrame-Descriptor |- IonICCallFrameLayout::Size()','line_number':1245,'multiline':False]
['text':'              ICCallFrame-ReturnAddr |','line_number':1246,'multiline':False]
['text':'              ... call frame data & args ... |- Descriptor.Size','line_number':1247,'multiline':False]
['text':'              ActualArgc      |','line_number':1248,'multiline':False]
['text':'              CalleeToken     |- JitFrameLayout::Size()','line_number':1249,'multiline':False]
['text':'              Descriptor      |','line_number':1250,'multiline':False]
['text':'    FP -----> ReturnAddr      |','line_number':1251,'multiline':False]
['text':' scratch2 := StackPointer + Descriptor.size + JitFrameLayout::Size()','line_number':1254,'multiline':False]
['text':' scratch3 := ICCallFrame-Descriptor.Size','line_number':1258,'multiline':False]
['text':' Assert previous frame is an IonJS frame.','line_number':1262,'multiline':False]
['text':' lastProfilingCallSite := ICCallFrame-ReturnAddr','line_number':1275,'multiline':False]
['text':' lastProfilingFrame := ICCallFrame + ICCallFrame-Descriptor.Size +','line_number':1281,'multiline':False]
['text':'                       IonICCallFrameLayout::Size()','line_number':1282,'multiline':False]
['text':'','line_number':1290,'multiline':False]
['text':' FrameType::CppToJSJit / FrameType::WasmToJSJit','line_number':1291,'multiline':False]
['text':'','line_number':1292,'multiline':False]
['text':' If at an entry frame, store null into both fields.','line_number':1293,'multiline':False]
['text':' A fast-path wasm->jit transition frame is an entry frame from the point','line_number':1294,'multiline':False]
['text':' of view of the JIT.','line_number':1295,'multiline':False]
['text':'','line_number':1296,'multiline':False]
