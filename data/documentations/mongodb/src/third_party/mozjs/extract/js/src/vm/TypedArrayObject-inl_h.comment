['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Utilities and common inline code for TypedArray ','line_number':10,'multiline':True]
['text':' js::Scalar::Type','line_number':27,'multiline':False]
['text':' std::copy_n better matches the argument values/types of this','line_number':263,'multiline':False]
['text':' function, but as noted below it allows the input/output ranges to','line_number':264,'multiline':False]
['text':' overlap.  std::copy does not, so use it so the compiler has extra','line_number':265,'multiline':False]
['text':' ability to optimize.','line_number':266,'multiline':False]
['text':' std::copy_n copies from |src| to |dest| starting from |src|, so','line_number':275,'multiline':False]
['text':' input/output ranges *may* permissibly overlap, as this function','line_number':276,'multiline':False]
['text':' allows.','line_number':277,'multiline':False]
['text':'
   * Copy |source|'s elements into |target|, starting at |target[offset]|.
   * Act as if the assignments occurred from a fresh copy of |source|, in
   * case the two memory ranges overlap.
   ','line_number':291,'multiline':True]
['text':' WARNING: |source| may be an unwrapped typed array from a different','line_number':299,'multiline':False]
['text':' compartment. Proceed with caution!','line_number':300,'multiline':False]
['text':'
   * Copy |source[0]| to |source[len]| (exclusive) elements into the typed
   * array |target|, starting at index |offset|.  |source| must not be a
   * typed array.
   ','line_number':404,'multiline':True]
['text':' Attempt fast-path infallible conversion of dense elements up to','line_number':421,'multiline':False]
['text':' the first potentially side-effectful lookup or conversion.','line_number':422,'multiline':False]
['text':' Convert and copy any remaining elements generically.','line_number':444,'multiline':False]
['text':' Compute every iteration in case getElement/valueToNative','line_number':467,'multiline':False]
['text':' detaches the underlying array buffer or GC moves the data.','line_number':468,'multiline':False]
['text':'
   * Copy |source| into the typed array |target|.
   ','line_number':477,'multiline':True]
['text':' Attempt fast-path infallible conversion of dense elements up to the','line_number':492,'multiline':False]
['text':' first potentially side-effectful conversion.','line_number':493,'multiline':False]
['text':' Convert any remaining elements by first collecting them into a','line_number':508,'multiline':False]
['text':' temporary list, and then copying them into the typed array.','line_number':509,'multiline':False]
['text':' |target| is a newly allocated typed array and not yet visible to','line_number':524,'multiline':False]
['text':' content script, so valueToNative can't detach the underlying','line_number':525,'multiline':False]
['text':' buffer.','line_number':526,'multiline':False]
['text':' Compute every iteration in case GC moves the data.','line_number':529,'multiline':False]
['text':' WARNING: |source| may be an unwrapped typed array from a different','line_number':541,'multiline':False]
['text':' compartment. Proceed with caution!','line_number':542,'multiline':False]
['text':' Copy |source| in case it overlaps the target elements being set.','line_number':565,'multiline':False]
['text':' Numbers, Null, Undefined, and Symbols throw a TypeError. Strings may','line_number':658,'multiline':False]
['text':' OOM and Objects may have side-effects.','line_number':659,'multiline':False]
['text':' BigInts and Symbols throw a TypeError. Strings may OOM and Objects may','line_number':662,'multiline':False]
['text':' have side-effects.','line_number':663,'multiline':False]
['text':' The JS spec doesn't distinguish among different NaN values, and','line_number':728,'multiline':False]
['text':' it deliberately doesn't specify the bit pattern written to a','line_number':729,'multiline':False]
['text':' typed array when NaN is written into it.  This bit-pattern','line_number':730,'multiline':False]
['text':' inconsistency could confuse differential testing, so always','line_number':731,'multiline':False]
['text':' canonicalize NaN values in differential testing.','line_number':732,'multiline':False]
['text':' static ','line_number':751,'multiline':True]
['text':' namespace js','line_number':762,'multiline':False]
['text':' vm_TypedArrayObject_inl_h','line_number':764,'multiline':False]
