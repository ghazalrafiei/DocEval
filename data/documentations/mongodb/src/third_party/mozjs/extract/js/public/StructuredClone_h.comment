['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * API for safe passing of structured data, HTML 2018 Feb 21 section 2.7.
 * <https://html.spec.whatwg.org/multipage/structured-data.html>
 *
 * This is a serialization scheme for JS values, somewhat like JSON. It
 * preserves some aspects of JS objects (strings, numbers, own data properties
 * with string keys, array elements) but not others (methods, getters and
 * setters, prototype chains). Unlike JSON, structured data:
 *
 * -   can contain cyclic references.
 *
 * -   handles Maps, Sets, and some other object types.
 *
 * -   supports *transferring* objects of certain types from one realm to
 *     another, rather than cloning them.
 *
 * -   is specified by a living standard, and continues to evolve.
 *
 * -   is encoded in a nonstandard binary format, and is never exposed to Web
 *     content in its serialized form. It's used internally by the browser to
 *     send data from one thread/realm/domain to another, not across the
 *     network.
 ','line_number':25,'multiline':True]
['text':'*
 * The structured-clone serialization format version number.
 *
 * When serialized data is stored as bytes, e.g. in your Firefox profile, later
 * versions of the engine may have to read it. When you upgrade Firefox, we
 * don't crawl through your whole profile converting all saved data from the
 * previous version of the serialization format to the latest version. So it is
 * normal to have data in old formats stored in your profile.
 *
 * The JS engine can *write* data only in the current format version.
 *
 * It can *read* any data written in the current version, and data written for
 * DifferentProcess scope in earlier versions.
 *
 *
 * ## When to bump this version number
 *
 * When making a change so drastic that the JS engine needs to know whether
 * it's reading old or new serialized data in order to handle both correctly,
 * increment this version number. Make sure the engine can still read all
 * old data written with previous versions.
 *
 * If StructuredClone.cpp doesn't contain code that distinguishes between
 * version 8 and version 9, there should not be a version 9.
 *
 * Do not increment for changes that only affect SameProcess encoding.
 *
 * Increment only for changes that would otherwise break old serialized data.
 * Do not increment for new data types. (Rationale: Modulo bugs, older versions
 * of the JS engine can already correctly throw errors when they encounter new,
 * unrecognized features. A version number bump does not actually help them.)
 ','line_number':52,'multiline':True]
['text':'*
 * Indicates the "scope of validity" of serialized data.
 *
 * Writing plain JS data produces an array of bytes that can be copied and
 * read in another process or whatever. The serialized data is Plain Old Data.
 * However, HTML also supports `Transferable` objects, which, when cloned, can
 * be moved from the source object into the clone, like when you take a
 * photograph of someone and it steals their soul.
 * See <https://developer.mozilla.org/en-US/docs/Web/API/Transferable>.
 * We support cloning and transferring objects of many types.
 *
 * For example, when we transfer an ArrayBuffer (within a process), we "detach"
 * the ArrayBuffer, embed the raw buffer pointer in the serialized data, and
 * later install it in a new ArrayBuffer in the destination realm. Ownership
 * of that buffer memory is transferred from the original ArrayBuffer to the
 * serialized data and then to the clone.
 *
 * This only makes sense within a single address space. When we transfer an
 * ArrayBuffer to another process, the contents of the buffer must be copied
 * into the serialized data. (The original ArrayBuffer is still detached,
 * though, for consistency; in some cases the caller shouldn't know or care if
 * the recipient is in the same process.)
 *
 * ArrayBuffers are actually a lucky case; some objects (like MessagePorts)
 * can't reasonably be stored by value in serialized data -- it's pointers or
 * nothing.
 *
 * So there is a tradeoff between scope of validity -- how far away the
 * serialized data may be sent and still make sense -- and efficiency or
 * features. The read and write algorithms therefore take an argument of this
 * type, allowing the user to control those trade-offs.
 ','line_number':88,'multiline':True]
['text':'*
   * The most restrictive scope, with greatest efficiency and features.
   *
   * When writing, this means: The caller promises that the serialized data
   * will **not** be shipped off to a different process or stored in a
   * database. However, it may be shipped to another thread. It's OK to
   * produce serialized data that contains pointers to data that is safe to
   * send across threads, such as array buffers. In Rust terms, the
   * serialized data will be treated as `Send` but not `Copy`.
   *
   * When reading, this means: Accept transferred objects and buffers
   * (pointers). The caller promises that the serialized data was written
   * using this API (otherwise, the serialized data may contain bogus
   * pointers, leading to undefined behavior).
   *
   * Starts from 1 because there used to be a SameProcessSameThread enum value
   * of 0 and these values are encoded into the structured serialization format
   * as part of the SCTAG_HEADER, and IndexedDB persists the representation to
   * disk.
   ','line_number':121,'multiline':True]
['text':'*
   * When writing, this means we're writing for an audience in a different
   * process. Produce serialized data that can be sent to other processes,
   * bitwise copied, or even stored as bytes in a database and read by later
   * versions of Firefox years from now. The HTML5 spec refers to this as
   * "ForStorage" as in StructuredSerializeForStorage, though we use
   * DifferentProcess for IPC as well as storage.
   *
   * Transferable objects are limited to ArrayBuffers, whose contents are
   * copied into the serialized data (rather than just writing a pointer).
   *
   * When reading, this means: Do not accept pointers.
   ','line_number':143,'multiline':True]
['text':'*
   * Handle a backwards-compatibility case with IndexedDB (bug 1434308): when
   * reading, this means to treat legacy SameProcess data as if it were
   * DifferentProcess.
   *
   * Do not use this for writing; use DifferentProcess instead.
   ','line_number':158,'multiline':True]
['text':'*
   * Existing code wants to be able to create an uninitialized
   * JSStructuredCloneData without knowing the scope, then populate it with
   * data (at which point the scope *is* known.)
   ','line_number':167,'multiline':True]
['text':'*
   * This scope is used when the deserialization context is unknown. When
   * writing, DifferentProcess or SameProcess scope is chosen based on the
   * nature of the object.
   ','line_number':174,'multiline':True]
['text':'* Transferable data has not been filled in yet ','line_number':183,'multiline':True]
['text':'* Structured clone buffer does not yet own the data ','line_number':186,'multiline':True]
['text':'* All values at least this large are owned by the clone buffer ','line_number':189,'multiline':True]
['text':'* Data is a pointer that can be freed ','line_number':192,'multiline':True]
['text':'* Data is a memory mapped pointer ','line_number':195,'multiline':True]
['text':'*
   * Data is embedding-specific. The engine can free it by calling the
   * freeTransfer op. The embedding can also use SCTAG_TMO_USER_MIN and
   * greater, up to 32 bits, to distinguish specific ownership variants.
   ','line_number':198,'multiline':True]
['text':' The default is to deny all policy-controlled aspects.','line_number':213,'multiline':False]
['text':' SharedArrayBuffers and WASM modules can only be cloned intra-process','line_number':219,'multiline':False]
['text':' because the shared memory areas are allocated in process-private memory or','line_number':220,'multiline':False]
['text':' because there are security issues of sharing them cross agent clusters.','line_number':221,'multiline':False]
['text':' y default, we don't allow shared-memory and intra-cluster objects. Clients','line_number':222,'multiline':False]
['text':' should therefore enable these 2 clone features when needed.','line_number':223,'multiline':False]
['text':' namespace JS ','line_number':240,'multiline':True]
['text':'*
 * Read structured data from the reader r. This hook is used to read a value
 * previously serialized by a call to the WriteStructuredCloneOp hook.
 *
 * tag and data are the pair of uint32_t values from the header. The callback
 * may use the JS_Read* APIs to read any other relevant parts of the object
 * from the reader r. closure is any value passed to the JS_ReadStructuredClone
 * function. Return the new object on success, nullptr on error/exception.
 ','line_number':242,'multiline':True]
['text':'*
 * Structured data serialization hook. The engine can write primitive values,
 * Objects, Arrays, Dates, RegExps, TypedArrays, ArrayBuffers, Sets, Maps,
 * and SharedTypedArrays. Any other type of object requires application support.
 * This callback must first use the JS_WriteUint32Pair API to write an object
 * header, passing a value greater than JS_SCTAG_USER to the tag parameter.
 * Then it can use the JS_Write* APIs to write any other relevant parts of
 * the value v to the writer w. closure is any value passed to the
 * JS_WriteStructuredClone function.
 *
 * Return true on success, false on error/exception.
 ','line_number':256,'multiline':True]
['text':'*
 * This is called when JS_WriteStructuredClone is given an invalid transferable.
 * To follow HTML5, the application must throw a DATA_CLONE_ERR DOMException
 * with error set to one of the JS_SCERR_* values.
 ','line_number':274,'multiline':True]
['text':'*
 * This is called when JS_ReadStructuredClone receives a transferable object
 * not known to the engine. If this hook does not exist or returns false, the
 * JS engine calls the reportError op if set, otherwise it throws a
 * DATA_CLONE_ERR DOM Exception. This method is called before any other
 * callback and must return a non-null object in returnObject on success.
 ','line_number':282,'multiline':True]
['text':'*
 * Called when JS_WriteStructuredClone receives a transferable object not
 * handled by the engine. If this hook does not exist or returns false, the JS
 * engine will call the reportError hook or fall back to throwing a
 * DATA_CLONE_ERR DOM Exception. This method is called before any other
 * callback.
 *
 *  tag: indicates what type of transferable this is. Must be greater than
 *       0xFFFF0201 (value of the internal SCTAG_TRANSFER_MAP_PENDING_ENTRY)
 *
 *  ownership: see TransferableOwnership, above. Used to communicate any needed
 *       ownership info to the FreeTransferStructuredCloneOp.
 *
 *  content, extraData: what the ReadTransferStructuredCloneOp will receive
 ','line_number':293,'multiline':True]
['text':' Output:','line_number':311,'multiline':False]
['text':'*
 * Called when freeing an unknown transferable object. Note that it
 * should never trigger a garbage collection (and will assert in a
 * debug build if it does.)
 ','line_number':316,'multiline':True]
['text':'*
 * Called when the transferring objects are checked. If this function returns
 * false, the serialization ends throwing a DataCloneError exception.
 ','line_number':325,'multiline':True]
['text':'*
 * Called when a SharedArrayBuffer (including one owned by a Wasm memory object)
 * has been processed in context `cx` by structured cloning.  If `receiving` is
 * true then the SAB has been received from a channel and a new SAB object has
 * been created; if false then an existing SAB has been serialized onto a
 * channel.
 *
 * If the callback returns false then the clone operation (read or write) will
 * signal a failure.
 ','line_number':334,'multiline':True]
['text':'*
   * The buffer owns any Transferables that it might contain, and should
   * properly release them upon destruction.
   ','line_number':359,'multiline':True]
['text':'*
   * Do not free any Transferables within this buffer when deleting it. This
   * is used to mark as clone buffer as containing data from another process,
   * and so it can't legitimately contain pointers. If the buffer claims to
   * have transferables, it's a bug or an attack. This is also used for
   * abandon(), where a buffer still contains raw data but the ownership has
   * been given over to some other entity.
   ','line_number':365,'multiline':True]
['text':'*
   * A buffer that cannot contain Transferables at all. This usually means
   * the buffer is empty (not yet filled in, or having been cleared).
   ','line_number':375,'multiline':True]
['text':' namespace js','line_number':404,'multiline':False]
['text':'*
 * JSStructuredCloneData represents structured clone data together with the
 * information needed to read/write/transfer/free the records within it, in the
 * form of a set of callbacks.
 ','line_number':406,'multiline':True]
['text':' The (address space, thread) scope within which this clone is valid. Note','line_number':421,'multiline':False]
['text':' that this must be either set during construction, or start out as','line_number':422,'multiline':False]
['text':' Unassigned and transition once to something else.','line_number':423,'multiline':False]
['text':' The constructor must be infallible but SystemAllocPolicy is not, so both','line_number':438,'multiline':False]
['text':' the initial size and initial capacity of the BufferList must be zero.','line_number':439,'multiline':False]
['text':' Steal the raw data from a BufferList. In this case, we don't know the','line_number':447,'multiline':False]
['text':' scope and none of the callback info is assigned yet.','line_number':448,'multiline':False]
['text':' Append new data to the end of the buffer.','line_number':508,'multiline':False]
['text':' Update data stored within the existing buffer. There must be at least','line_number':514,'multiline':False]
['text':' 'size' bytes between the position of 'iter' and the end of the buffer.','line_number':515,'multiline':False]
['text':' Return a new read-only JSStructuredCloneData that "borrows" the contents','line_number':539,'multiline':False]
['text':' of |this|. Its lifetime should not exceed the donor's. This is only','line_number':540,'multiline':False]
['text':' allowed for DifferentProcess clones, so finalization of the borrowing','line_number':541,'multiline':False]
['text':' clone will do nothing.','line_number':542,'multiline':False]
['text':' Iterate over all contained data, one BufferList segment's worth at a','line_number':550,'multiline':False]
['text':' time, and invoke the given FunctionToApply with the data pointer and','line_number':551,'multiline':False]
['text':' size. The function should return a bool value, and this loop will exit','line_number':552,'multiline':False]
['text':' with false if the function ever returns false.','line_number':553,'multiline':False]
['text':' Append the entire contents of other's bufList_ to our own.','line_number':566,'multiline':False]
['text':' This internal method exposes the real value of scope_. It's meant to be','line_number':580,'multiline':False]
['text':' used only when starting the writing.','line_number':581,'multiline':False]
['text':'*
 * Implements StructuredDeserialize and StructuredDeserializeWithTransfer.
 *
 * Note: If `data` contains transferable objects, it can be read only once.
 ','line_number':585,'multiline':True]
['text':'*
 * Implements StructuredSerialize, StructuredSerializeForStorage, and
 * StructuredSerializeWithTransfer.
 *
 * Note: If the scope is DifferentProcess then the cloneDataPolicy must deny
 * shared-memory objects, or an error will be signaled if a shared memory object
 * is seen.
 ','line_number':596,'multiline':True]
['text':'*
 * The C-style API calls to read and write structured clones are fragile --
 * they rely on the caller to properly handle ownership of the clone data, and
 * the handling of the input data as well as the interpretation of the contents
 * of the clone buffer are dependent on the callbacks passed in. If you
 * serialize and deserialize with different callbacks, the results are
 * questionable.
 *
 * JSAutoStructuredCloneBuffer wraps things up in an RAII class for data
 * management, and uses the same callbacks for both writing and reading
 * (serializing and deserializing).
 ','line_number':617,'multiline':True]
['text':'*
   * Adopt some memory. It will be automatically freed by the destructor.
   * data must have been allocated by the JS engine (e.g., extracted via
   * JSAutoStructuredCloneBuffer::steal).
   ','line_number':654,'multiline':True]
['text':'*
   * Release the buffer and transfer ownership to the caller.
   ','line_number':664,'multiline':True]
['text':'*
   * Abandon ownership of any transferable objects stored in the buffer,
   * without freeing the buffer itself. Useful when copying the data out into
   * an external container, though note that you will need to use adopt() to
   * properly release that data eventually.
   ','line_number':671,'multiline':True]
['text':' Copy and assignment are not supported.','line_number':704,'multiline':False]
['text':' The range of tag values the application may use for its own custom object','line_number':711,'multiline':False]
['text':' types.','line_number':712,'multiline':False]
['text':' js_StructuredClone_h ','line_number':753,'multiline':True]
