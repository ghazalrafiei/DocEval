['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JSJitInfo','line_number':16,'multiline':False]
['text':' JS::ExpandoAndGeneration','line_number':17,'multiline':False]
['text':' BaselineCacheIRCompiler compiles CacheIR to BaselineIC native code.','line_number':54,'multiline':False]
['text':' AutoStubFrame methods','line_number':62,'multiline':False]
['text':' Calls into ion have this extra.','line_number':94,'multiline':False]
['text':' namespace jit','line_number':105,'multiline':False]
['text':' namespace js','line_number':106,'multiline':False]
['text':' The first value contains the return addres,','line_number':140,'multiline':False]
['text':' which we pull into ICTailCallReg for tail calls.','line_number':141,'multiline':False]
['text':' Count stub entries: We count entries rather than successes as it much','line_number':147,'multiline':False]
['text':' easier to ensure ICStubReg is valid at entry than at exit.','line_number':148,'multiline':False]
['text':' Done emitting the main IC code. Now emit the failure paths.','line_number':171,'multiline':False]
['text':' Verify that the global wrapper is still valid, as','line_number':249,'multiline':False]
['text':' it is pre-requisite for doing the compartment check.','line_number':250,'multiline':False]
['text':' The pointers are not equal, so if the input string is also an atom it','line_number':359,'multiline':False]
['text':' must be a different string.','line_number':360,'multiline':False]
['text':' Check the length.','line_number':364,'multiline':False]
['text':' We have a non-atomized string with the same length. Call a helper','line_number':370,'multiline':False]
['text':' function to do the comparison.','line_number':371,'multiline':False]
['text':' The type is only used by Warp.','line_number':429,'multiline':False]
['text':' First, retrieve raw jitcode for getter.','line_number':459,'multiline':False]
['text':' Align the stack such that the JitFrameLayout is aligned on','line_number':480,'multiline':False]
['text':' JitStackAlignment.','line_number':481,'multiline':False]
['text':' Getter is called with 0 arguments, just |receiver| as thisv.','line_number':484,'multiline':False]
['text':' Note that we use Push, not push, so that callJit will align the stack','line_number':485,'multiline':False]
['text':' properly on ARM.','line_number':486,'multiline':False]
['text':' Store icScript in the context.','line_number':490,'multiline':False]
['text':' ActualArgc is 0','line_number':497,'multiline':False]
['text':' Handle arguments underflow.','line_number':501,'multiline':False]
['text':' Call the arguments rectifier.','line_number':506,'multiline':False]
['text':' Load the callee in the scratch register.','line_number':559,'multiline':False]
['text':' Load the JSJitInfo in the scratch register.','line_number':587,'multiline':False]
['text':' Load the jsid in the scratch register.','line_number':614,'multiline':False]
['text':' Load the CalleeToken.','line_number':633,'multiline':False]
['text':' The low bit indicates whether this call is constructing, just clear the','line_number':637,'multiline':False]
['text':' other bits.','line_number':638,'multiline':False]
['text':' Check for uninitialized lexicals.','line_number':662,'multiline':False]
['text':' Load the value.','line_number':665,'multiline':False]
['text':' Check for uninitialized lexicals.','line_number':686,'multiline':False]
['text':' Load the value.','line_number':690,'multiline':False]
['text':' Push the operands in reverse order for JSOp::Le and JSOp::Gt:','line_number':726,'multiline':False]
['text':' - |left <= right| is implemented as |right >= left|.','line_number':727,'multiline':False]
['text':' - |left > right| is implemented as |right < left|.','line_number':728,'multiline':False]
['text':' Use the output to avoid running out of registers.','line_number':765,'multiline':False]
['text':' Check to see if the values have identical bits.','line_number':777,'multiline':False]
['text':' This is correct for SameValue because SameValue(NaN,NaN) is true,','line_number':778,'multiline':False]
['text':' and SameValue(0,-0) is false.','line_number':779,'multiline':False]
['text':' We have to (re)allocate dynamic slots. Do this first, as it's the','line_number':864,'multiline':False]
['text':' only fallible operation here. Note that growSlotsPure is fallible but','line_number':865,'multiline':False]
['text':' does not GC.','line_number':866,'multiline':False]
['text':' Update the object's shape.','line_number':895,'multiline':False]
['text':' Perform the store. No pre-barrier required since this is a new','line_number':902,'multiline':False]
['text':' initialization.','line_number':903,'multiline':False]
['text':' Load obj->elements in scratch.','line_number':960,'multiline':False]
['text':' If array length is 0, return empty string.','line_number':964,'multiline':False]
['text':' Otherwise, handle array length 1 case.','line_number':978,'multiline':False]
['text':' But only if initializedLength is also 1.','line_number':981,'multiline':False]
['text':' And only if elem0 is a string.','line_number':985,'multiline':False]
['text':' Store the value.','line_number':989,'multiline':False]
['text':' Otherwise call into the VM.','line_number':993,'multiline':False]
['text':' Don't attempt to pre-allocate the object, instead always use the slow','line_number':1041,'multiline':False]
['text':' path.','line_number':1042,'multiline':False]
['text':' Primitives are never Arrays.','line_number':1072,'multiline':False]
['text':' isArray can also return true for Proxy wrapped Arrays.','line_number':1079,'multiline':False]
['text':' Bounds check, load string char.','line_number':1166,'multiline':False]
['text':' Load StaticString for this char. For larger code units perform a VM call.','line_number':1173,'multiline':False]
['text':' Note: This condition must match tryAttachStringFromCodePoint to prevent','line_number':1219,'multiline':False]
['text':' failure loops.','line_number':1220,'multiline':False]
['text':' We pre-allocate atoms for the first UNIT_STATIC_LIMIT characters.','line_number':1227,'multiline':False]
['text':' For code units larger than that, we must do a VM call.','line_number':1228,'multiline':False]
['text':' Call into the VM for lazy prototypes.','line_number':1312,'multiline':False]
['text':' Load the callee in the scratch register.','line_number':1371,'multiline':False]
['text':' First, load the callee.','line_number':1403,'multiline':False]
['text':' If we are calling a trial-inlined setter, guard that the','line_number':1407,'multiline':False]
['text':' target has a BaselineScript.','line_number':1408,'multiline':False]
['text':' Align the stack such that the JitFrameLayout is aligned on','line_number':1425,'multiline':False]
['text':' JitStackAlignment.','line_number':1426,'multiline':False]
['text':' Setter is called with 1 argument, and |receiver| as thisv. Note that we use','line_number':1429,'multiline':False]
['text':' Push, not push, so that callJit will align the stack properly on ARM.','line_number':1430,'multiline':False]
['text':' ActualArgc','line_number':1435,'multiline':False]
['text':' Push callee.','line_number':1437,'multiline':False]
['text':' Push frame descriptor.','line_number':1440,'multiline':False]
['text':' Store icScript in the context.','line_number':1444,'multiline':False]
['text':' Load the jitcode pointer.','line_number':1450,'multiline':False]
['text':' On non-x86 platforms, this pointer is still in a register','line_number':1452,'multiline':False]
['text':' after guarding on it above. On x86, we don't have enough','line_number':1453,'multiline':False]
['text':' registers and have to reload it here.','line_number':1454,'multiline':False]
['text':' Handle arguments underflow. The rhs value is no longer needed and','line_number':1462,'multiline':False]
['text':' can be used as scratch.','line_number':1463,'multiline':False]
['text':' Call the arguments rectifier.','line_number':1469,'multiline':False]
['text':' Load the JSJitInfo in the scratch register.','line_number':1523,'multiline':False]
['text':' Load the jsid in the scratch register.','line_number':1577,'multiline':False]
['text':' We need a scratch register but we don't have any registers available on','line_number':1603,'multiline':False]
['text':' x86, so temporarily store |obj| in the frame's scratch slot.','line_number':1604,'multiline':False]
['text':' Restore |obj|. Because we entered a stub frame we first have to load','line_number':1611,'multiline':False]
['text':' the original frame pointer.','line_number':1612,'multiline':False]
['text':' We need a scratch register but we don't have any registers available on','line_number':1665,'multiline':False]
['text':' x86, so temporarily store |obj| in the frame's scratch slot.','line_number':1666,'multiline':False]
['text':' Restore |obj|. Because we entered a stub frame we first have to load','line_number':1673,'multiline':False]
['text':' the original frame pointer.','line_number':1674,'multiline':False]
['text':' Load our PropertyIteratorObject* and its NativeIterator.','line_number':1740,'multiline':False]
['text':' Ensure the iterator is reusable: see NativeIterator::isReusable.','line_number':1745,'multiline':False]
['text':' Pre-write barrier for store to 'objectBeingIterated_'.','line_number':1748,'multiline':False]
['text':' Mark iterator as active.','line_number':1752,'multiline':False]
['text':' Post-write barrier for stores to 'objectBeingIterated_'.','line_number':1757,'multiline':False]
['text':' Chain onto the active iterator stack. Note that Baseline CacheIR stub','line_number':1762,'multiline':False]
['text':' code is shared across compartments within a Zone, so we can't bake in','line_number':1763,'multiline':False]
['text':' compartment->enumerators here.','line_number':1764,'multiline':False]
['text':' The expando object is not used in this case, so we don't need Spectre','line_number':1791,'multiline':False]
['text':' mitigations.','line_number':1792,'multiline':False]
['text':' Load the ExpandoAndGeneration* in the output scratch register and guard','line_number':1820,'multiline':False]
['text':' it matches the proxy's ExpandoAndGeneration.','line_number':1821,'multiline':False]
['text':' Guard expandoAndGeneration->generation matches the expected generation.','line_number':1826,'multiline':False]
['text':' Load expandoAndGeneration->expando into the output Value register.','line_number':1832,'multiline':False]
['text':' Baseline passes the first 2 inputs in R0/R1, other Values are stored on','line_number':1847,'multiline':False]
['text':' the stack.','line_number':1848,'multiline':False]
['text':' availableGeneralRegs can't know that GetName/BindName is only using','line_number':1899,'multiline':False]
['text':' the payloadReg and not typeReg on x86.','line_number':1900,'multiline':False]
['text':' availableGeneralRegs can't know that Call is only using','line_number':1908,'multiline':False]
['text':' the payloadReg and not typeReg on x86.','line_number':1909,'multiline':False]
['text':' Baseline doesn't allocate float registers so none of them are live.','line_number':1915,'multiline':False]
['text':' We shouldn't GC or report OOM (or any other exception) here.','line_number':1946,'multiline':False]
['text':' Just a sanity check: the caller should ensure we don't attach an','line_number':1956,'multiline':False]
['text':' unlimited number of stubs.','line_number':1957,'multiline':False]
['text':' Check if we already have JitCode for this stub.','line_number':1969,'multiline':False]
['text':' We have to generate stub code.','line_number':1975,'multiline':False]
['text':' Allocate the shared CacheIRStubInfo. Note that the','line_number':1987,'multiline':False]
['text':' putBaselineCacheIRStubCode call below will transfer ownership','line_number':1988,'multiline':False]
['text':' to the stub code HashMap, so we don't have to worry about freeing','line_number':1989,'multiline':False]
['text':' it below.','line_number':1990,'multiline':False]
['text':' Ensure we don't attach duplicate stubs. This can happen if a stub failed','line_number':2011,'multiline':False]
['text':' for some reason and the IR generator doesn't check for exactly the same','line_number':2012,'multiline':False]
['text':' conditions.','line_number':2013,'multiline':False]
['text':' We found a stub that's exactly the same as the stub we're about to','line_number':2024,'multiline':False]
['text':' attach. Just return nullptr, the caller should do nothing in this','line_number':2025,'multiline':False]
['text':' case.','line_number':2026,'multiline':False]
['text':' Time to allocate and attach a new stub.','line_number':2034,'multiline':False]
['text':' Resetting the entered counts on the IC chain makes subsequent reasoning','line_number':2045,'multiline':False]
['text':' about the chain much easier.','line_number':2046,'multiline':False]
['text':' For the expression decompiler','line_number':2081,'multiline':False]
['text':' The value of argc entering the call IC is not always the value of','line_number':2095,'multiline':False]
['text':' argc entering the callee. (For example, argc for a spread call IC','line_number':2096,'multiline':False]
['text':' is always 1, but argc for the callee is the length of the array.)','line_number':2097,'multiline':False]
['text':' In these cases, we update argc as part of the call op itself, to','line_number':2098,'multiline':False]
['text':' avoid modifying input operands while it is still possible to fail a','line_number':2099,'multiline':False]
['text':' guard. We also limit callee argc to a reasonable value to avoid','line_number':2100,'multiline':False]
['text':' blowing the stack limit.','line_number':2101,'multiline':False]
['text':' Standard calls have no extra guards, and argc is already correct.','line_number':2107,'multiline':False]
['text':' fun_call has no extra guards, and argc will be corrected in','line_number':2110,'multiline':False]
['text':' pushFunCallArguments.','line_number':2111,'multiline':False]
['text':' We need to guard the length of the arguments.','line_number':2117,'multiline':False]
['text':' Load callee argc into scratch.','line_number':2123,'multiline':False]
['text':' Load the length of the elements.','line_number':2127,'multiline':False]
['text':' Load the arguments object length.','line_number':2135,'multiline':False]
['text':' Ensure that callee argc does not exceed the limit.','line_number':2145,'multiline':False]
['text':' We're past the final guard. Update argc with the new value.','line_number':2149,'multiline':False]
['text':'isConstructing =','line_number':2176,'multiline':True]
['text':' The arguments to the call IC are pushed on the stack left-to-right.','line_number':2188,'multiline':False]
['text':' Our calling conventions want them right-to-left in the callee, so','line_number':2189,'multiline':False]
['text':' we duplicate them on the stack in reverse order.','line_number':2190,'multiline':False]
['text':' countReg contains the total number of arguments to copy.','line_number':2192,'multiline':False]
['text':' In addition to the actual arguments, we have to copy hidden arguments.','line_number':2193,'multiline':False]
['text':' We always have to copy |this|.','line_number':2194,'multiline':False]
['text':' If we are constructing, we have to copy |newTarget|.','line_number':2195,'multiline':False]
['text':' If we are not a jit call, we have to copy |callee|.','line_number':2196,'multiline':False]
['text':' We use a scratch register to avoid clobbering argc, which is an input reg.','line_number':2197,'multiline':False]
['text':' argPtr initially points to the last argument. Skip the stub frame.','line_number':2202,'multiline':False]
['text':' Align the stack such that the JitFrameLayout is aligned on the','line_number':2207,'multiline':False]
['text':' JitStackAlignment.','line_number':2208,'multiline':False]
['text':'countIncludesThis = ','line_number':2210,'multiline':True]
['text':' Push all values, starting at the last one.','line_number':2213,'multiline':False]
['text':' Pull the array off the stack before aligning.','line_number':2231,'multiline':False]
['text':' Align the stack such that the JitFrameLayout is aligned on the','line_number':2238,'multiline':False]
['text':' JitStackAlignment.','line_number':2239,'multiline':False]
['text':' If we are constructing, we must take newTarget into account.','line_number':2243,'multiline':False]
['text':'countIncludesThis =','line_number':2247,'multiline':True]
['text':' Push newTarget, if necessary','line_number':2250,'multiline':False]
['text':' Push arguments: set up endReg to point to &array[argc]','line_number':2255,'multiline':False]
['text':' Copying pre-decrements endReg by 8 until startReg is reached','line_number':2260,'multiline':False]
['text':' Push |this|.','line_number':2270,'multiline':False]
['text':' Push |callee| if needed.','line_number':2275,'multiline':False]
['text':' When we call fun_call, the stack looks like the left column (note','line_number':2291,'multiline':False]
['text':' that newTarget will not be present, because fun_call cannot be a','line_number':2292,'multiline':False]
['text':' constructor call):','line_number':2293,'multiline':False]
['text':'','line_number':2294,'multiline':False]
['text':' ***Arguments to fun_call***','line_number':2295,'multiline':False]
['text':' callee (fun_call)               ***Arguments to target***','line_number':2296,'multiline':False]
['text':' this (target function)   -----> callee','line_number':2297,'multiline':False]
['text':' arg0 (this of target)    -----> this','line_number':2298,'multiline':False]
['text':' arg1 (arg0 of target)    -----> arg0','line_number':2299,'multiline':False]
['text':' argN (argN-1 of target)  -----> arg1','line_number':2300,'multiline':False]
['text':'','line_number':2301,'multiline':False]
['text':' As demonstrated in the right column, this is exactly what we need','line_number':2302,'multiline':False]
['text':' the stack to look like when calling pushStandardArguments for target,','line_number':2303,'multiline':False]
['text':' except with one more argument. If we subtract 1 from argc,','line_number':2304,'multiline':False]
['text':' everything works out correctly.','line_number':2305,'multiline':False]
['text':'isConstructing =','line_number':2309,'multiline':True]
['text':' The exception is the case where argc == 0:','line_number':2314,'multiline':False]
['text':'','line_number':2315,'multiline':False]
['text':' ***Arguments to fun_call***','line_number':2316,'multiline':False]
['text':' callee (fun_call)               ***Arguments to target***','line_number':2317,'multiline':False]
['text':' this (target function)   -----> callee','line_number':2318,'multiline':False]
['text':' <nothing>                -----> this','line_number':2319,'multiline':False]
['text':'','line_number':2320,'multiline':False]
['text':' In this case, we push |undefined| for |this|.','line_number':2321,'multiline':False]
['text':' Align the stack to 0 args.','line_number':2324,'multiline':False]
['text':' Store the new |this|.','line_number':2328,'multiline':False]
['text':' Store |callee| if needed.','line_number':2331,'multiline':False]
['text':' Load the arguments object off the stack before aligning.','line_number':2344,'multiline':False]
['text':' Align the stack such that the JitFrameLayout is aligned on the','line_number':2348,'multiline':False]
['text':' JitStackAlignment.','line_number':2349,'multiline':False]
['text':'countIncludesThis =','line_number':2351,'multiline':True]
['text':' Load ArgumentsData.','line_number':2354,'multiline':False]
['text':' We push the arguments onto the stack last-to-first.','line_number':2358,'multiline':False]
['text':' Compute the bounds of the arguments array.','line_number':2359,'multiline':False]
['text':' Loop until all arguments have been pushed.','line_number':2366,'multiline':False]
['text':' Arguments are forwarded to the call object if they are closed over.','line_number':2374,'multiline':False]
['text':' In this case, OVERRIDDEN_ELEMENTS_BIT should be set.','line_number':2375,'multiline':False]
['text':' Push arg0 as |this| for call','line_number':2386,'multiline':False]
['text':' Push |callee| if needed.','line_number':2389,'multiline':False]
['text':' Push a stub frame so that we can perform a non-tail call.','line_number':2415,'multiline':False]
['text':' Note that this leaves the return address in TailCallReg.','line_number':2416,'multiline':False]
['text':'isJitCall =','line_number':2425,'multiline':True]
['text':' Native functions have the signature:','line_number':2427,'multiline':False]
['text':'','line_number':2428,'multiline':False]
['text':'    bool (*)(JSContext*, unsigned, Value* vp)','line_number':2429,'multiline':False]
['text':'','line_number':2430,'multiline':False]
['text':' Where vp[0] is space for callee/return value, vp[1] is |this|, and vp[2]','line_number':2431,'multiline':False]
['text':' onward are the function arguments.','line_number':2432,'multiline':False]
['text':' Initialize vp.','line_number':2434,'multiline':False]
['text':' Construct a native exit frame.','line_number':2437,'multiline':False]
['text':' Execute call.','line_number':2446,'multiline':False]
['text':' The simulator requires VM calls to be redirected to a special','line_number':2456,'multiline':False]
['text':' swi instruction to handle them, so we store the redirected','line_number':2457,'multiline':False]
['text':' pointer in the stub and use that instead of the original one.','line_number':2458,'multiline':False]
['text':' (See CacheIRWriter::callNativeFunction.)','line_number':2459,'multiline':False]
['text':' Test for failure.','line_number':2479,'multiline':False]
['text':' Load the return value.','line_number':2482,'multiline':False]
['text':' Helper function for loading call arguments from the stack.  Loads','line_number':2554,'multiline':False]
['text':' and unboxes an object from a specific slot. |stackPushed| is the','line_number':2555,'multiline':False]
['text':' size of the data pushed on top of the call arguments in the current','line_number':2556,'multiline':False]
['text':' frame. It must be tracked manually by the caller. (createThis is','line_number':2557,'multiline':False]
['text':' currently the only caller. If more callers are added, it might be','line_number':2558,'multiline':False]
['text':' worth improving the stack depth story.)','line_number':2559,'multiline':False]
['text':' Arguments','line_number':2584,'multiline':False]
['text':' NewTarget','line_number':2585,'multiline':False]
['text':' Stub frame','line_number':2586,'multiline':False]
['text':' Arg array, NewTarget','line_number':2591,'multiline':False]
['text':' Stub frame','line_number':2592,'multiline':False]
['text':'
 * Scripted constructors require a |this| object to be created prior to the
 * call. When this function is called, the stack looks like (bottom->top):
 *
 * [..., Callee, ThisV, Arg0V, ..., ArgNV, NewTarget, StubFrameHeader]
 *
 * At this point, |ThisV| is JSWhyMagic::JS_IS_CONSTRUCTING.
 *
 * This function calls CreateThis to generate a new |this| object, then
 * overwrites the magic ThisV on the stack.
 ','line_number':2600,'multiline':True]
['text':' Save live registers that don't have to be traced.','line_number':2622,'multiline':False]
['text':' CreateThis takes two arguments: callee, and newTarget.','line_number':2629,'multiline':False]
['text':' Push newTarget:','line_number':2631,'multiline':False]
['text':' Push callee:','line_number':2636,'multiline':False]
['text':' Call CreateThisFromIC.','line_number':2640,'multiline':False]
['text':' Restore saved registers.','line_number':2654,'multiline':False]
['text':' Save |this| value back into pushed arguments on stack.','line_number':2657,'multiline':False]
['text':' Restore calleeReg. CreateThisFromIC may trigger a GC, so we reload the','line_number':2661,'multiline':False]
['text':' callee from the stub frame (which is traced) instead of spilling it to','line_number':2662,'multiline':False]
['text':' the stack.','line_number':2663,'multiline':False]
['text':' If a constructor does not explicitly return an object, the return value','line_number':2672,'multiline':False]
['text':' of the constructor is |this|. We load it out of the baseline stub frame.','line_number':2673,'multiline':False]
['text':' At this point, the stack looks like this:','line_number':2675,'multiline':False]
['text':'  newTarget','line_number':2676,'multiline':False]
['text':'  ArgN','line_number':2677,'multiline':False]
['text':'  ...','line_number':2678,'multiline':False]
['text':'  Arg0','line_number':2679,'multiline':False]
['text':'  ThisVal         <---- We want this value.','line_number':2680,'multiline':False]
['text':'  argc                  ^','line_number':2681,'multiline':False]
['text':'  Callee token          | Skip three stack slots.','line_number':2682,'multiline':False]
['text':'  Frame descriptor      v','line_number':2683,'multiline':False]
['text':'  [Top of stack]','line_number':2684,'multiline':False]
['text':' Push a stub frame so that we can perform a non-tail call.','line_number':2715,'multiline':False]
['text':' Note that this leaves the return address in TailCallReg.','line_number':2716,'multiline':False]
['text':'isJitCall =','line_number':2729,'multiline':True]
['text':' Load the start of the target JitCode.','line_number':2731,'multiline':False]
['text':' Note that we use Push, not push, so that callJit will align the stack','line_number':2737,'multiline':False]
['text':' properly on ARM.','line_number':2738,'multiline':False]
['text':' Handle arguments underflow.','line_number':2743,'multiline':False]
['text':' Call the arguments rectifier.','line_number':2749,'multiline':False]
['text':' If this is a constructing call, and the callee returns a non-object,','line_number':2758,'multiline':False]
['text':' replace it with the |this| object passed in.','line_number':2759,'multiline':False]
['text':' Push a stub frame so that we can perform a non-tail call.','line_number':2810,'multiline':False]
['text':' Note that this leaves the return address in TailCallReg.','line_number':2811,'multiline':False]
['text':' CreateThisFromIC may trigger a GC and discard the BaselineScript.','line_number':2823,'multiline':False]
['text':' We have already called discardStack, so we can't use a FailurePath.','line_number':2824,'multiline':False]
['text':' Instead, we skip storing the ICScript in the JSContext and use a','line_number':2825,'multiline':False]
['text':' normal non-inlined call.','line_number':2826,'multiline':False]
['text':' Store icScript in the context.','line_number':2830,'multiline':False]
['text':'isJitCall =','line_number':2844,'multiline':True]
['text':' Note that we use Push, not push, so that callJit will align the stack','line_number':2848,'multiline':False]
['text':' properly on ARM.','line_number':2849,'multiline':False]
['text':' Handle arguments underflow.','line_number':2854,'multiline':False]
['text':' Call the trial-inlining arguments rectifier.','line_number':2860,'multiline':False]
['text':' If this is a constructing call, and the callee returns a non-object,','line_number':2869,'multiline':False]
['text':' replace it with the |this| object passed in.','line_number':2870,'multiline':False]
['text':' We get here if the nursery is full (unlikely) but also for tenured','line_number':2922,'multiline':False]
['text':' allocations if the current arena is full and we need to allocate a new','line_number':2923,'multiline':False]
['text':' one (fairly common).','line_number':2924,'multiline':False]
['text':' We get here if the nursery is full (unlikely) but also for tenured','line_number':2978,'multiline':False]
['text':' allocations if the current arena is full and we need to allocate a new','line_number':2979,'multiline':False]
['text':' one (fairly common).','line_number':2980,'multiline':False]
['text':' This might have been overwritten.','line_number':2987,'multiline':False]
