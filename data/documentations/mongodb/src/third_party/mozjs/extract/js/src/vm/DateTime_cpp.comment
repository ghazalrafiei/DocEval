['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' !defined(XP_WIN) ','line_number':21,'multiline':True]
['text':' JS_HAS_INTL_API && !MOZ_SYSTEM_ICU ','line_number':32,'multiline':True]
['text':'
 * Compute the offset in seconds from the current UTC time to the current local
 * standard time (i.e. not including any offset due to DST).
 *
 * Examples:
 *
 * Suppose we are in California, USA on January 1, 2013 at 04:00 PST (UTC-8, no
 * DST in effect), corresponding to 12:00 UTC.  This function would then return
 * -8 * SecondsPerHour, or -28800.
 *
 * Or suppose we are in Berlin, Germany on July 1, 2013 at 17:00 CEST (UTC+2,
 * DST in effect), corresponding to 15:00 UTC.  This function would then return
 * +1 * SecondsPerHour, or +3600.
 ','line_number':67,'multiline':True]
['text':' Get the current time.','line_number':86,'multiline':False]
['text':' Break down the current time into its (locally-valued, maybe with DST)','line_number':92,'multiline':False]
['text':' components.','line_number':93,'multiline':False]
['text':' Compute a |time_t| corresponding to |local| interpreted without DST.','line_number':99,'multiline':False]
['text':' If |local| wasn't DST, we can use the same time.','line_number':102,'multiline':False]
['text':' If |local| respected DST, we need a time broken down into components','line_number':105,'multiline':False]
['text':' ignoring DST.  Turn off DST in the broken-down time.  Create a fresh','line_number':106,'multiline':False]
['text':' copy of |local|, because mktime() will reset tm_isdst = 1 and will','line_number':107,'multiline':False]
['text':' adjust tm_hour and tm_hour accordingly.','line_number':108,'multiline':False]
['text':' Compute a |time_t t| corresponding to the broken-down time with DST','line_number':112,'multiline':False]
['text':' off.  This has boundary-condition issues (for about the duration of','line_number':113,'multiline':False]
['text':' a DST offset) near the time a location moves to a different time','line_number':114,'multiline':False]
['text':' zone.  But 1) errors will be transient; 2) locations rarely change','line_number':115,'multiline':False]
['text':' time zone; and 3) in the absence of an API that provides the time','line_number':116,'multiline':False]
['text':' zone offset directly, this may be the best we can do.','line_number':117,'multiline':False]
['text':' Break down the time corresponding to the no-DST |local| into UTC-based','line_number':124,'multiline':False]
['text':' components.','line_number':125,'multiline':False]
['text':' Finally, compare the seconds-based components of the local non-DST','line_number':131,'multiline':False]
['text':' representation and the UTC representation to determine the actual','line_number':132,'multiline':False]
['text':' difference.','line_number':133,'multiline':False]
['text':' Same-day?  Just subtract the seconds counts.','line_number':138,'multiline':False]
['text':' If we have more UTC seconds, move local seconds into the UTC seconds'','line_number':143,'multiline':False]
['text':' frame of reference and then subtract.','line_number':144,'multiline':False]
['text':' Otherwise we have more local seconds, so move the UTC seconds into the','line_number':149,'multiline':False]
['text':' local seconds' frame of reference and then subtract.','line_number':150,'multiline':False]
['text':' Nothing to do when an update request is already enqueued.','line_number':155,'multiline':False]
['text':' Mark the state as needing an update, but defer the actual update until it's','line_number':160,'multiline':False]
['text':' actually needed to delay any system calls to the last possible moment. This','line_number':161,'multiline':False]
['text':' is beneficial when this method is called during start-up, because it avoids','line_number':162,'multiline':False]
['text':' main-thread I/O blocking the process.','line_number':163,'multiline':False]
['text':'
   * The difference between local standard time and UTC will never change for
   * a given time zone.
   ','line_number':178,'multiline':True]
['text':' Tell the analysis the |pFree| function pointer called by uprv_free','line_number':197,'multiline':False]
['text':' cannot GC.','line_number':198,'multiline':False]
['text':' JS_HAS_INTL_API && !MOZ_SYSTEM_ICU ','line_number':206,'multiline':True]
['text':' Propagate the time zone change to ICU, too.','line_number':208,'multiline':False]
['text':' Tell the analysis calling into ICU cannot GC.','line_number':210,'multiline':False]
['text':' Set the time zone status into the invalid state, so we compute the actual','line_number':218,'multiline':False]
['text':' defaults on first access. We don't yet want to initialize neither <ctime>','line_number':219,'multiline':False]
['text':' nor ICU's time zone classes, because that may cause I/O operations slowing','line_number':220,'multiline':False]
['text':' down the JS engine initialization, which we're currently in the middle of.','line_number':221,'multiline':False]
['text':' Go ahead a day to make localtime work (does not work with 0). ','line_number':232,'multiline':True]
['text':' NB: The offset isn't computed correctly when the standard local offset','line_number':260,'multiline':False]
['text':'     at |utcSeconds| is different from |utcToLocalStandardOffsetSeconds|.','line_number':261,'multiline':False]
['text':' JS_HAS_INTL_API && !MOZ_SYSTEM_ICU ','line_number':276,'multiline':True]
['text':' NB: Be aware of the initial range values when making changes to this','line_number':293,'multiline':False]
['text':'     code: the first call to this method, with those initial range','line_number':294,'multiline':False]
['text':'     values, must result in a cache miss.','line_number':295,'multiline':False]
['text':' The initial range values are carefully chosen to result in a cache miss','line_number':360,'multiline':False]
['text':' on first use given the range of possible values. Be careful to keep','line_number':361,'multiline':False]
['text':' these values and the caching algorithm in sync!','line_number':362,'multiline':False]
['text':' ES2019 draft rev 0ceb728a1adbffe42b26972a6541fd7f398b1557','line_number':391,'multiline':False]
['text':'','line_number':392,'multiline':False]
['text':' 20.3.1.7 LocalTZA','line_number':393,'multiline':False]
['text':'','line_number':394,'multiline':False]
['text':' If |localSeconds| represents either a skipped (at a positive time zone','line_number':395,'multiline':False]
['text':' transition) or repeated (at a negative time zone transition) locale','line_number':396,'multiline':False]
['text':' time, it must be interpreted as a time value before the transition.','line_number':397,'multiline':False]
['text':' All ICU TimeZone classes derive from BasicTimeZone, so we can safely','line_number':404,'multiline':False]
['text':' perform the static_cast.','line_number':405,'multiline':False]
['text':' Once <https://unicode-org.atlassian.net/browse/ICU-13705> is fixed we','line_number':406,'multiline':False]
['text':' can remove this extra cast.','line_number':407,'multiline':False]
['text':' Clear any previously cached names when the default locale changed.','line_number':452,'multiline':False]
['text':' Retrieve the display name for the given locale.','line_number':468,'multiline':False]
['text':' Null-terminate.','line_number':473,'multiline':False]
['text':' Copy the display name. This operation always succeeds because the','line_number':479,'multiline':False]
['text':' destination buffer is large enough to hold the complete string.','line_number':480,'multiline':False]
['text':' Return an empty string if the display name doesn't fit into the buffer.','line_number':489,'multiline':False]
['text':' JS_HAS_INTL_API && !MOZ_SYSTEM_ICU ','line_number':509,'multiline':True]
['text':' static ','line_number':511,'multiline':True]
['text':' static ','line_number':521,'multiline':True]
['text':' ICU ignores the TZ environment variable on Windows and instead directly','line_number':537,'multiline':False]
['text':' invokes Win API functions to retrieve the current time zone. But since','line_number':538,'multiline':False]
['text':' we're still using the POSIX-derived localtime_s() function on Windows','line_number':539,'multiline':False]
['text':' and localtime_s() does return a time zone adjusted value based on the','line_number':540,'multiline':False]
['text':' TZ environment variable, we need to manually adjust the default ICU','line_number':541,'multiline':False]
['text':' time zone if TZ is set.','line_number':542,'multiline':False]
['text':'','line_number':543,'multiline':False]
['text':' Windows supports the following format for TZ: tzn[+|-]hh[:mm[:ss]][dzn]','line_number':544,'multiline':False]
['text':' where "tzn" is the time zone name for standard time, the time zone','line_number':545,'multiline':False]
['text':' offset is positive for time zones west of GMT, and "dzn" is the','line_number':546,'multiline':False]
['text':' optional time zone name when daylight savings are observed. Daylight','line_number':547,'multiline':False]
['text':' savings are always based on the U.S. daylight saving rules, that means','line_number':548,'multiline':False]
['text':' for example it's not possible to use "TZ=CET-1CEST" to select the IANA','line_number':549,'multiline':False]
['text':' time zone "CET".','line_number':550,'multiline':False]
['text':'','line_number':551,'multiline':False]
['text':' When comparing this restricted format for TZ to all IANA time zone','line_number':552,'multiline':False]
['text':' names, the following time zones are in the intersection of what's','line_number':553,'multiline':False]
['text':' supported by Windows and is also a valid IANA time zone identifier.','line_number':554,'multiline':False]
['text':'','line_number':555,'multiline':False]
['text':' Even though the time zone offset is marked as mandatory on MSDN, it','line_number':556,'multiline':False]
['text':' appears it defaults to zero when omitted. This in turn means we can','line_number':557,'multiline':False]
['text':' also allow the time zone identifiers "UCT", "UTC", and "GMT".','line_number':558,'multiline':False]
['text':' From tzdata's "northamerica" file:','line_number':561,'multiline':False]
['text':' From tzdata's "backward" file:','line_number':567,'multiline':False]
['text':' From tzdata's "etcetera" file:','line_number':574,'multiline':False]
['text':' A TZ environment variable may be an absolute path. The path','line_number':586,'multiline':False]
['text':' format of TZ may begin with a colon. (ICU handles relative paths.)','line_number':587,'multiline':False]
['text':'*
 * Reject the input if it doesn't match the time zone id pattern or legacy time
 * zone names.
 *
 * See <https://github.com/eggert/tz/blob/master/theory.html>.
 ','line_number':597,'multiline':True]
['text':' According to theory.html, '.' is allowed in time zone ids, but the','line_number':609,'multiline':False]
['text':' accompanying zic.c file doesn't allow it. Assume the source file is','line_number':610,'multiline':False]
['text':' correct and disallow '.' here, too.','line_number':611,'multiline':False]
['text':' Reject leading, trailing, or consecutive '/' characters.','line_number':616,'multiline':False]
['text':'*
 * Given a presumptive path |tz| to a zoneinfo time zone file
 * (e.g. /etc/localtime), attempt to compute the time zone encoded by that
 * path by repeatedly resolving symlinks until a path containing "/zoneinfo/"
 * followed by time zone looking components is found. If a symlink is broken,
 * symlink-following recurs too deeply, non time zone looking components are
 * encountered, or some other error is encountered, return the empty string.
 *
 * If a non-empty string is returned, it's only guaranteed to have certain
 * syntactic validity. It might not actually *be* a time zone name.
 ','line_number':627,'multiline':True]
['text':' The resolved link name can have different paths depending on the OS.','line_number':639,'multiline':False]
['text':' Follow ICU and only search for "/zoneinfo/"; see $ICU/common/putil.cpp.','line_number':640,'multiline':False]
['text':' Stop following symlinks after a fixed depth, because some common time','line_number':644,'multiline':False]
['text':' zones are stored in files whose name doesn't match an Olson time zone','line_number':645,'multiline':False]
['text':' name. For example on Ubuntu, "/usr/share/zoneinfo/America/New_York" is a','line_number':646,'multiline':False]
['text':' symlink to "/usr/share/zoneinfo/posixrules" and "posixrules" is not an','line_number':647,'multiline':False]
['text':' Olson time zone name.','line_number':648,'multiline':False]
['text':' Four hops should be a reasonable limit for most use cases.','line_number':649,'multiline':False]
['text':' -1 to null-terminate.','line_number':661,'multiline':False]
['text':' Return if the TZ value is too large.','line_number':663,'multiline':False]
['text':' -1 to null-terminate.','line_number':672,'multiline':False]
['text':' Search until we find "/zoneinfo/" in the link name.','line_number':676,'multiline':False]
['text':' Return if the symlink nesting is too deep.','line_number':679,'multiline':False]
['text':' Return on error or if the result was truncated.','line_number':684,'multiline':False]
['text':' Ensure linkTarget is null-terminated. (readlink may not necessarily','line_number':690,'multiline':False]
['text':' null-terminate the string.)','line_number':691,'multiline':False]
['text':' If the target is absolute, continue with that.','line_number':695,'multiline':False]
['text':' If the target is relative, it must be resolved against either the','line_number':701,'multiline':False]
['text':' directory the link was in, or against the current working directory.','line_number':702,'multiline':False]
['text':' If the link name is just something like "foo", resolve linkTarget','line_number':705,'multiline':False]
['text':' against the current working directory.','line_number':706,'multiline':False]
['text':' Remove everything after the final path separator in linkName.','line_number':712,'multiline':False]
['text':' Return if the concatenated path name is too large.','line_number':715,'multiline':False]
['text':' Keep it simple and just concatenate the path names.','line_number':720,'multiline':False]
['text':' JS_HAS_INTL_API && !MOZ_SYSTEM_ICU ','line_number':727,'multiline':True]
['text':' If TZ is set and its value is valid under Windows' and IANA's time zone','line_number':739,'multiline':False]
['text':' identifier rules, update the ICU default time zone to use this value.','line_number':740,'multiline':False]
['text':' If |tz| isn't a supported time zone identifier, use the default Windows','line_number':744,'multiline':False]
['text':' time zone for ICU.','line_number':745,'multiline':False]
['text':' TODO: Handle invalid time zone identifiers (bug 342068).','line_number':746,'multiline':False]
['text':' The TZ environment variable allows both absolute and relative paths,','line_number':749,'multiline':False]
['text':' optionally beginning with a colon (':'). (Relative paths, without the','line_number':750,'multiline':False]
['text':' colon, are just Olson time zone names.)  We need to handle absolute paths','line_number':751,'multiline':False]
['text':' ourselves, including handling that they might be symlinks.','line_number':752,'multiline':False]
['text':' <https://unicode-org.atlassian.net/browse/ICU-13694>','line_number':753,'multiline':False]
['text':' ICU ignores the TZ environment variable on Android. If it doesn't contain','line_number':759,'multiline':False]
['text':' an absolute path, try to parse it as a time zone name.','line_number':760,'multiline':False]
['text':' defined(XP_WIN) ','line_number':765,'multiline':True]
['text':' adoptDefault() takes ownership of the time zone.','line_number':772,'multiline':False]
