['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JSClass definition and its component types, plus related interfaces. ','line_number':7,'multiline':True]
['text':'
 * A JSClass acts as a vtable for JS objects that allows JSAPI clients to
 * control various aspects of the behavior of an object like property lookup.
 * It contains some engine-private extensions that allows more control over
 * object behavior and, e.g., allows custom slow layout.
 ','line_number':22,'multiline':True]
['text':' This is equal to JSFunction::class_.  Use it in places where you don't want','line_number':36,'multiline':False]
['text':' to #include jsfun.h.','line_number':37,'multiline':False]
['text':' namespace js','line_number':40,'multiline':False]
['text':'*
 * Per ES6, the [[DefineOwnProperty]] internal method has three different
 * possible outcomes:
 *
 * -   It can throw an exception (which we indicate by returning false).
 *
 * -   It can return true, indicating unvarnished success.
 *
 * -   It can return false, indicating "strict failure". The property could
 *     not be defined. It's an error, but no exception was thrown.
 *
 * It's not just [[DefineOwnProperty]]: all the mutating internal methods have
 * the same three outcomes. (The other affected internal methods are [[Set]],
 * [[Delete]], [[SetPrototypeOf]], and [[PreventExtensions]].)
 *
 * If you think this design is awful, you're not alone.  But as it's the
 * standard, we must represent these boolean "success" values somehow.
 * ObjectOpSuccess is the class for this. It's like a bool, but when it's false
 * it also stores an error code.
 *
 * Typical usage:
 *
 *     ObjectOpResult result;
 *     if (!DefineProperty(cx, obj, id, ..., result)) {
 *         return false;
 *     }
 *     if (!result) {
 *         return result.reportError(cx, obj, id);
 *     }
 *
 * Users don't have to call `result.report()`; another possible ending is:
 *
 *     argv.rval().setBoolean(result.ok());
 *     return true;
 ','line_number':44,'multiline':True]
['text':'*
   * code_ is either one of the special codes OkCode or Uninitialized, or an
   * error code. For now the error codes are JS friend API and are defined in
   * js/public/friend/ErrorNumbers.msg.
   *
   * code_ is uintptr_t (rather than uint32_t) for the convenience of the
   * JITs, which would otherwise have to deal with either padding or stack
   * alignment on 64-bit platforms.
   ','line_number':81,'multiline':True]
['text':' Return true if succeed() was called. ','line_number':97,'multiline':True]
['text':' Set this ObjectOpResult to true and return true. ','line_number':105,'multiline':True]
['text':'
   * Set this ObjectOpResult to false with an error code.
   *
   * Always returns true, as a convenience. Typical usage will be:
   *
   *     if (funny condition) {
   *         return result.fail(JSMSG_CANT_DO_THE_THINGS);
   *     }
   *
   * The true return value indicates that no exception is pending, and it
   * would be OK to ignore the failure and continue.
   ','line_number':111,'multiline':True]
['text':' Careful: This case has special handling in Object.defineProperty.','line_number':145,'multiline':False]
['text':'
   * Report an error if necessary; return true to proceed and
   * false if an error was reported.
   *
   * The precise rules are like this:
   *
   * -   If ok(), then we succeeded. Do nothing and return true.
   * -   Otherwise, if |strict| is true, throw a TypeError and return false.
   * -   Otherwise, do nothing and return true.
   ','line_number':153,'multiline':True]
['text':'
   * The same as checkStrictModeError(cx, id, strict), except the
   * operation is not associated with a particular property id. This is
   * used for [[PreventExtensions]] and [[SetPrototypeOf]]. failureCode()
   * must not be an error that has "{0}" in the error message.
   ','line_number':171,'multiline':True]
['text':' Throw a TypeError. Call this only if !ok(). ','line_number':184,'multiline':True]
['text':'
   * The same as reportError(cx, obj, id), except the operation is not
   * associated with a particular property id.
   ','line_number':187,'multiline':True]
['text':' Convenience method. Return true if ok(); otherwise throw a TypeError','line_number':193,'multiline':False]
['text':' and return false.','line_number':194,'multiline':False]
['text':' Convenience method. The same as checkStrict(cx, obj, id), except the','line_number':199,'multiline':False]
['text':' operation is not associated with a particular property id.','line_number':200,'multiline':False]
['text':' namespace JS','line_number':206,'multiline':False]
['text':' JSClass operation signatures.','line_number':208,'multiline':False]
['text':'* Add a property named by id to obj. ','line_number':210,'multiline':True]
['text':'*
 * Delete a property named by id in obj.
 *
 * If an error occurred, return false as per normal JSAPI error practice.
 *
 * If no error occurred, but the deletion attempt wasn't allowed (perhaps
 * because the property was non-configurable), call result.fail() and
 * return true.  This will cause |delete obj[id]| to evaluate to false in
 * non-strict mode code, and to throw a TypeError in strict mode code.
 *
 * If no error occurred and the deletion wasn't disallowed (this is *not* the
 * same as saying that a deletion actually occurred -- deleting a non-existent
 * property, or an inherited property, is allowed -- it's just pointless),
 * call result.succeed() and return true.
 ','line_number':214,'multiline':True]
['text':'*
 * The type of ObjectOps::enumerate. This callback overrides a portion of
 * SpiderMonkey's default [[Enumerate]] internal method. When an ordinary object
 * is enumerated, that object and each object on its prototype chain is tested
 * for an enumerate op, and those ops are called in order. The properties each
 * op adds to the 'properties' vector are added to the set of values the for-in
 * loop will iterate over. All of this is nonstandard.
 *
 * An object is "enumerated" when it's the target of a for-in loop or
 * JS_Enumerate(). The callback's job is to populate 'properties' with the
 * object's property keys. If `enumerableOnly` is true, the callback should only
 * add enumerable properties.
 ','line_number':232,'multiline':True]
['text':'*
 * The old-style JSClass.enumerate op should define all lazy properties not
 * yet reflected in obj.
 ','line_number':249,'multiline':True]
['text':'*
 * The type of ObjectOps::funToString.  This callback allows an object to
 * provide a custom string to use when Function.prototype.toString is invoked on
 * that object.  A null return value means OOM.
 ','line_number':255,'multiline':True]
['text':'*
 * Resolve a lazy property named by id in obj by defining it directly in obj.
 * Lazy properties are those reflected from some peer native property space
 * (e.g., the DOM attributes for a given node reflected as obj) on demand.
 *
 * JS looks for a property in an object, and if not found, tries to resolve
 * the given id. *resolvedp should be set to true iff the property was defined
 * on |obj|.
 ','line_number':263,'multiline':True]
['text':'*
 * A class with a resolve hook can optionally have a mayResolve hook. This hook
 * must have no side effects and must return true for a given id if the resolve
 * hook may resolve this id. This is useful when we're doing a "pure" lookup: if
 * mayResolve returns false, we know we don't have to call the effectful resolve
 * hook.
 *
 * maybeObj, if non-null, is the object on which we're doing the lookup. This
 * can be nullptr: during JIT compilation we sometimes know the Class but not
 * the object.
 ','line_number':275,'multiline':True]
['text':'*
 * Finalize obj, which the garbage collector has determined to be unreachable
 * from other live objects or from GC roots.  Obviously, finalizers must never
 * store a reference to obj.
 ','line_number':289,'multiline':True]
['text':'*
 * Check whether v is an instance of obj.  Return false on error or exception,
 * true on success with true in *bp if v is an instance of obj, false in
 * *bp otherwise.
 ','line_number':296,'multiline':True]
['text':'*
 * Function type for trace operation of the class called to enumerate all
 * traceable things reachable from obj's private data structure. For each such
 * thing, a trace implementation must call JS::TraceEdge on the thing's
 * location.
 *
 * JSTraceOp implementation can assume that no other threads mutates object
 * state. It must not change state of the object or corresponding native
 * structures. The only exception for this rule is the case when the embedding
 * needs a tight integration with GC. In that case the embedding can check if
 * the traversal is a part of the marking phase through calling
 * JS_IsGCMarkingTracer and apply a special code like emptying caches or
 * marking its native structures.
 ','line_number':304,'multiline':True]
['text':' Internal / friend API operation signatures. ','line_number':324,'multiline':True]
['text':' Check if the element exists before performing the Get and preserve','line_number':351,'multiline':False]
['text':' holes.','line_number':352,'multiline':False]
['text':' Perform a Get operation, like obj[index] in JS.','line_number':355,'multiline':False]
['text':' Only one of these is used.','line_number':360,'multiline':False]
['text':'* Callback for the creation of constructor and prototype objects. ','line_number':402,'multiline':True]
['text':'*
 * Callback for custom post-processing after class initialization via
 * ClassSpec.
 ','line_number':405,'multiline':True]
['text':' The ProtoKey this class inherits from.','line_number':431,'multiline':False]
['text':' Default: Inherit from Object.','line_number':436,'multiline':False]
['text':'*
   * Optional hook called when an object is moved by generational or
   * compacting GC.
   *
   * There may exist weak pointers to an object that are not traced through
   * when the normal trace APIs are used, for example objects in the wrapper
   * cache. This hook allows these pointers to be updated.
   *
   * Note that this hook can be called before JS_NewObject() returns if a GC
   * is triggered during construction of the object. This can happen for
   * global objects for example.
   *
   * The function should return the difference between nursery bytes used and
   * tenured bytes used, which may be nonzero e.g. if some nursery-allocated
   * data beyond the actual GC thing is moved into malloced memory.
   *
   * This is used to compute the nursery promotion rate.
   ','line_number':451,'multiline':True]
['text':' namespace js','line_number':484,'multiline':False]
['text':' Classes, objects, and properties.','line_number':491,'multiline':False]
['text':' Objects have private slot.','line_number':493,'multiline':False]
['text':' Class's initialization code will call `SetNewObjectMetadata` itself.','line_number':496,'multiline':False]
['text':' Class is an XPCWrappedNative. WeakMaps use this to override the wrapper','line_number':499,'multiline':False]
['text':' disposal mechanism.','line_number':500,'multiline':False]
['text':' Private is `nsISupports*`.','line_number':503,'multiline':False]
['text':' Objects are DOM.','line_number':506,'multiline':False]
['text':' If wrapped by an xray wrapper, the builtin class's constructor won't be','line_number':509,'multiline':False]
['text':' unwrapped and invoked. Instead, the constructor is resolved in the caller's','line_number':510,'multiline':False]
['text':' compartment and invoked with a wrapped newTarget. The constructor has to','line_number':511,'multiline':False]
['text':' detect and handle this situation. See PromiseConstructor for details.','line_number':512,'multiline':False]
['text':' Objects of this class act like the value undefined, in some contexts.','line_number':515,'multiline':False]
['text':' Reserved for embeddings.','line_number':518,'multiline':False]
['text':' To reserve slots fetched and stored via JS_Get/SetReservedSlot, bitwise-or','line_number':521,'multiline':False]
['text':' JSCLASS_HAS_RESERVED_SLOTS(n) into the initializer for JSClass.flags, where n','line_number':522,'multiline':False]
['text':' is a constant in [1, 255]. Reserved slots are indexed from 0 to n-1.','line_number':523,'multiline':False]
['text':' Room for 8 flags below ...','line_number':525,'multiline':False]
['text':' ... and 16 above this field.','line_number':527,'multiline':False]
['text':' Reserved for embeddings.','line_number':549,'multiline':False]
['text':' Bits 25 through 31 are reserved for the CACHED_PROTO_KEY mechanism, see','line_number':558,'multiline':False]
['text':' below.','line_number':559,'multiline':False]
['text':' ECMA-262 requires that most constructors used internally create objects','line_number':561,'multiline':False]
['text':' with "the original Foo.prototype value" as their [[Prototype]] (__proto__)','line_number':562,'multiline':False]
['text':' member initial value.  The "original ... value" verbiage is there because','line_number':563,'multiline':False]
['text':' in ECMA-262, global properties naming class objects are read/write and','line_number':564,'multiline':False]
['text':' deleteable, for the most part.','line_number':565,'multiline':False]
['text':'','line_number':566,'multiline':False]
['text':' Implementing this efficiently requires that global objects have classes','line_number':567,'multiline':False]
['text':' with the following flags. Failure to use JSCLASS_GLOBAL_FLAGS was','line_number':568,'multiline':False]
['text':' previously allowed, but is now an ES5 violation and thus unsupported.','line_number':569,'multiline':False]
['text':'','line_number':570,'multiline':False]
['text':' JSCLASS_GLOBAL_APPLICATION_SLOTS is the number of slots reserved at','line_number':571,'multiline':False]
['text':' the beginning of every global object's slots for use by the','line_number':572,'multiline':False]
['text':' application.','line_number':573,'multiline':False]
['text':' Fast access to the original value of each standard class's prototype.','line_number':586,'multiline':False]
['text':' Function pointer members (may be null). ','line_number':599,'multiline':True]
['text':' Public accessors:','line_number':624,'multiline':False]
['text':' The special treatment of |finalize| and |trace| is necessary because if we','line_number':653,'multiline':False]
['text':' assign either of those hooks to a local variable and then call it -- as is','line_number':654,'multiline':False]
['text':' done with the other hooks -- the GC hazard analysis gets confused.','line_number':655,'multiline':False]
['text':'
   * Objects of this class aren't native objects. They don't have Shapes that
   * describe their properties and layout. Classes using this flag must
   * provide their own property behavior, either by being proxy classes (do
   * this) or by overriding all the ObjectOps except getElements
   * (don't do this).
   ','line_number':665,'multiline':True]
['text':' A JSObject created from a JSClass extends from one of:','line_number':674,'multiline':False]
['text':'  - js::NativeObject','line_number':675,'multiline':False]
['text':'  - js::ProxyObject','line_number':676,'multiline':False]
['text':'','line_number':677,'multiline':False]
['text':' While it is possible to introduce new families of objects, it is strongly','line_number':678,'multiline':False]
['text':' discouraged. The JITs would be entirely unable to optimize them and testing','line_number':679,'multiline':False]
['text':' coverage is low. The existing NativeObject and ProxyObject are extremely','line_number':680,'multiline':False]
['text':' flexible and are able to represent the entire Gecko embedding requirements.','line_number':681,'multiline':False]
['text':'','line_number':682,'multiline':False]
['text':' NOTE: Internal to SpiderMonkey, there is an experimental js::TypedObject','line_number':683,'multiline':False]
['text':'       object family for future WASM features.','line_number':684,'multiline':False]
['text':' Internal / friend API accessors:','line_number':711,'multiline':False]
['text':'*
 * Enumeration describing possible values of the [[Class]] internal property
 * value of objects.
 ','line_number':792,'multiline':True]
['text':' Note: Only JSFunction objects.','line_number':814,'multiline':False]
['text':'* None of the above. ','line_number':816,'multiline':True]
['text':' Fills |vp| with the unboxed value for boxed types, or undefined otherwise. ','line_number':820,'multiline':True]
['text':' namespace js ','line_number':827,'multiline':True]
['text':' js_Class_h ','line_number':829,'multiline':True]
