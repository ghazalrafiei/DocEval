['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::Scalar::Type','line_number':18,'multiline':False]
['text':' Each IonScript has a unique compilation id. This is used to sweep/ignore','line_number':23,'multiline':False]
['text':' constraints for IonScripts that have been invalidated/destroyed.','line_number':24,'multiline':False]
['text':' Use two 32-bit integers instead of uint64_t to avoid 8-byte alignment on','line_number':26,'multiline':False]
['text':' some 32-bit platforms.','line_number':27,'multiline':False]
['text':' The maximum size of any buffer associated with an assembler or code object.','line_number':48,'multiline':False]
['text':' This is chosen to not overflow a signed integer, leaving room for an extra','line_number':49,'multiline':False]
['text':' bit on offsets.','line_number':50,'multiline':False]
['text':' Maximum number of scripted arg slots.','line_number':53,'multiline':False]
['text':'
 * [SMDOC] Avoiding repeated bailouts / invalidations
 *
 * To avoid getting trapped in a "compilation -> bailout -> invalidation ->
 * recompilation -> bailout -> invalidation -> ..." loop, every snapshot in
 * Warp code is assigned a BailoutKind. If we bail out at that snapshot,
 * FinishBailoutToBaseline will examine the BailoutKind and take appropriate
 * action. In general:
 *
 * 1. If the bailing instruction comes from transpiled CacheIR, then when we
 *    bail out and continue execution in the baseline interpreter, the
 *    corresponding stub should fail a guard. As a result, we will either
 *    increment the enteredCount for a subsequent stub or attach a new stub,
 *    either of which will prevent WarpOracle from transpiling the failing stub
 *    when we recompile.
 *
 *    Note: this means that every CacheIR op that can bail out in Warp must
 *    have an equivalent guard in the baseline CacheIR implementation.
 *
 *    FirstExecution works according to the same principles: we have never hit
 *    this IC before, but after we bail to baseline we will attach a stub and
 *    recompile with better CacheIR information.
 *
 * 2. If the bailout occurs because an assumption we made in WarpBuilder was
 *    invalidated, then FinishBailoutToBaseline will set a flag on the script
 *    to avoid that assumption in the future: for example, UninitializedLexical.
 *
 * 3. Similarly, if the bailing instruction is generated or modified by a MIR
 *    optimization, then FinishBailoutToBaseline will set a flag on the script
 *    to make that optimization more conservative in the future.  Examples
 *    include LICM, EagerTruncation, and HoistBoundsCheck.
 *
 * 4. Some bailouts can't be handled in Warp, even after a recompile. For
 *    example, Warp does not support catching exceptions. If this happens
 *    too often, then the cost of bailing out repeatedly outweighs the
 *    benefit of Warp compilation, so we invalidate the script and disable
 *    Warp compilation.
 *
 * 5. Some bailouts don't happen in performance-sensitive code: for example,
 *    the |debugger| statement. We just ignore those.
 ','line_number':59,'multiline':True]
['text':' An instruction generated by the transpiler. If this instruction bails out,','line_number':103,'multiline':False]
['text':' attaching a new stub in baseline will invalidate the current Warp script','line_number':104,'multiline':False]
['text':' and avoid a bailout loop.','line_number':105,'multiline':False]
['text':' An optimistic unbox on the cold path for a non-Value phi failed. If this','line_number':108,'multiline':False]
['text':' instruction bails out, we will invalidate the script and mark the','line_number':109,'multiline':False]
['text':' HadSpeculativePhiBailout flag on the script.','line_number':110,'multiline':False]
['text':' A conversion inserted by a type policy. If this instruction bails out,','line_number':113,'multiline':False]
['text':' we expect to throw an error. If this happens too frequently, we will','line_number':114,'multiline':False]
['text':' invalidate the current Warp script and disable recompilation.','line_number':115,'multiline':False]
['text':' An instruction hoisted by LICM.  If this instruction bails out, we will','line_number':118,'multiline':False]
['text':' bail out to baseline to see if we attach a new stub. If we do, then the','line_number':119,'multiline':False]
['text':' more than once, we will invalidate the current Warp script and','line_number':120,'multiline':False]
['text':' mark the hadLICMInvalidation flag on the script.','line_number':121,'multiline':False]
['text':' An instruction moved up by InstructionReordering.  If this','line_number':124,'multiline':False]
['text':' instruction bails out, we will mark the ReorderingBailout flag on','line_number':125,'multiline':False]
['text':' the script. If this happens too frequently, we will invalidate','line_number':126,'multiline':False]
['text':' the script.','line_number':127,'multiline':False]
['text':' An instruction created or hoisted by tryHoistBoundsCheck.','line_number':130,'multiline':False]
['text':' If this instruction bails out, we will invalidate the current Warp script','line_number':131,'multiline':False]
['text':' and mark the HoistBoundsCheckBailout flag on the script.','line_number':132,'multiline':False]
['text':' An eager truncation generated by range analysis.','line_number':135,'multiline':False]
['text':' If this instruction bails out, we will invalidate the current Warp script','line_number':136,'multiline':False]
['text':' and mark the EagerTruncationBailout flag on the script.','line_number':137,'multiline':False]
['text':' A folded unbox instruction generated by FoldLoadsWithUnbox.','line_number':140,'multiline':False]
['text':' If this instruction bails out, we will invalidate the current Warp script','line_number':141,'multiline':False]
['text':' and mark the UnboxFoldingBailout flag on the script.','line_number':142,'multiline':False]
['text':' An inevitable bailout (MBail instruction or type barrier that always bails)','line_number':145,'multiline':False]
['text':' Bailing out during a VM call. Many possible causes that are hard','line_number':148,'multiline':False]
['text':' to distinguish statically at snapshot construction time.','line_number':149,'multiline':False]
['text':' We just lump them together.','line_number':150,'multiline':False]
['text':' A spread call or funapply had more than JIT_ARGS_LENGTH_MAX arguments.','line_number':153,'multiline':False]
['text':' We bail out to handle this in the VM. If this happens too frequently,','line_number':154,'multiline':False]
['text':' we will invalidate the current Warp script and disable recompilation.','line_number':155,'multiline':False]
['text':' We hit an active |debugger;| statement.','line_number':158,'multiline':False]
['text':' We hit this code for the first time.','line_number':161,'multiline':False]
['text':' A lexical check failed. We will set lexical checks as unmovable.','line_number':164,'multiline':False]
['text':' A bailout to baseline from Ion on exception to handle Debugger hooks.','line_number':167,'multiline':False]
['text':' We returned to a stack frame after invalidating its IonScript.','line_number':170,'multiline':False]
['text':' We have executed code that should be unreachable, and need to assert.','line_number':173,'multiline':False]
['text':' The integer SIMD types have a lot of operations that do the exact same thing','line_number':233,'multiline':False]
['text':' for signed and unsigned integer types. Sometimes it is simpler to treat','line_number':234,'multiline':False]
['text':' signed and unsigned integer SIMD types as the same type, using a SimdSign to','line_number':235,'multiline':False]
['text':' distinguish the few cases where there is a difference.','line_number':236,'multiline':False]
['text':' Signedness is not applicable to this type. (i.e., Float or Bool).','line_number':238,'multiline':False]
['text':' Treat as an unsigned integer with a range 0 .. 2^N-1.','line_number':240,'multiline':False]
['text':' Treat as a signed integer in two's complement encoding.','line_number':242,'multiline':False]
['text':' Doesn't have a default constructor, as it would prevent it from being','line_number':279,'multiline':False]
['text':' included in unions.','line_number':280,'multiline':False]
['text':' Overloads for use by templates.','line_number':355,'multiline':False]
['text':' Get the raw bytes of the constant.','line_number':390,'multiline':False]
['text':' SimdConstant is a HashPolicy.  Currently we discriminate by type, but it','line_number':438,'multiline':False]
['text':' may be that we should only be discriminating by int vs float.','line_number':439,'multiline':False]
['text':' These two try to convert the input to an int32 using ToNumber and','line_number':453,'multiline':False]
['text':' will fail if the resulting int32 isn't strictly equal to the input.','line_number':454,'multiline':False]
['text':' Succeeds on -0: converts to 0.','line_number':455,'multiline':False]
['text':' Fails on -0.','line_number':456,'multiline':False]
['text':' These three will convert the input to an int32 with loss of precision.','line_number':457,'multiline':False]
['text':' The ordering of this enumeration is important: Anything < Value is a','line_number':465,'multiline':False]
['text':' specialized type. Furthermore, anything < String has trivial conversion to','line_number':466,'multiline':False]
['text':' a number.','line_number':467,'multiline':False]
['text':' Types above have trivial conversion to a number.','line_number':477,'multiline':False]
['text':' Types above are primitive (including undefined and null).','line_number':482,'multiline':False]
['text':' JS_OPTIMIZED_OUT magic value.','line_number':484,'multiline':False]
['text':' JS_ELEMENTS_HOLE magic value.','line_number':485,'multiline':False]
['text':' JS_IS_CONSTRUCTING magic value.','line_number':486,'multiline':False]
['text':' JS_UNINITIALIZED_LEXICAL magic value.','line_number':487,'multiline':False]
['text':' Types above are specialized.','line_number':488,'multiline':False]
['text':' Invalid, used as a placeholder.','line_number':490,'multiline':False]
['text':' A slots vector','line_number':491,'multiline':False]
['text':' An elements vector','line_number':492,'multiline':False]
['text':' An opaque pointer that receives no special treatment','line_number':493,'multiline':False]
['text':' Wasm Ref/AnyRef/NullRef: a raw JSObject* or a raw (void*)0','line_number':494,'multiline':False]
['text':' Wasm multi-value stack result area, which may contain refs','line_number':495,'multiline':False]
['text':' A Shape pointer.','line_number':496,'multiline':False]
['text':' This function does not deal with magic types. Magic constants should be','line_number':501,'multiline':False]
['text':' filtered out in MIRTypeFromValue.','line_number':502,'multiline':False]
['text':' Fall through, there's no JSVAL for Float32','line_number':539,'multiline':False]
['text':' Track the pipeline of opcodes which has produced a snapshot.','line_number':710,'multiline':False]
['text':' Make sure registers are not modified between an instruction and','line_number':713,'multiline':False]
['text':' its OsiPoint.','line_number':714,'multiline':False]
['text':' DEBUG','line_number':717,'multiline':False]
['text':' A pointer sized integer','line_number':720,'multiline':False]
['text':' A 32-bit integer','line_number':722,'multiline':False]
['text':' A 64-bit integer','line_number':724,'multiline':False]
['text':' A 32-bit floating point number','line_number':726,'multiline':False]
['text':' A 64-bit floating point number','line_number':728,'multiline':False]
['text':' namespace detail','line_number':749,'multiline':False]
['text':' The enum must be explicitly typed to avoid UB: some validly constructed','line_number':752,'multiline':False]
['text':' members are larger than any explicitly declared members.','line_number':753,'multiline':False]
['text':' VM functions that take 0-9 non-double arguments','line_number':755,'multiline':False]
['text':' and return a non-double value.','line_number':756,'multiline':False]
['text':' int64 f(double)','line_number':767,'multiline':False]
['text':' double f()','line_number':771,'multiline':False]
['text':' int f(double)','line_number':774,'multiline':False]
['text':' int f(float32)','line_number':777,'multiline':False]
['text':' float f(float)','line_number':780,'multiline':False]
['text':' float f(int, int)','line_number':784,'multiline':False]
['text':' double f(double)','line_number':789,'multiline':False]
['text':' double f(int)','line_number':792,'multiline':False]
['text':' double f(int, int)','line_number':795,'multiline':False]
['text':' double f(double, int)','line_number':799,'multiline':False]
['text':' double f(double, double)','line_number':804,'multiline':False]
['text':' float f(float, float)','line_number':808,'multiline':False]
['text':' double f(int, double)','line_number':812,'multiline':False]
['text':' int f(int, double)','line_number':817,'multiline':False]
['text':' int f(double, int)','line_number':822,'multiline':False]
['text':' double f(double, double, double)','line_number':827,'multiline':False]
['text':' double f(double, double, double, double)','line_number':831,'multiline':False]
['text':' int f(double, int, int)','line_number':835,'multiline':False]
['text':' int f(int, double, int, int)','line_number':841,'multiline':False]
['text':' Rounding modes for round instructions.','line_number':910,'multiline':False]
['text':' If a function contains no calls, we can assume the caller has checked the','line_number':913,'multiline':False]
['text':' stack limit up to this maximum frame size. This works because the jit stack','line_number':914,'multiline':False]
['text':' limit has a generous buffer before the real end of the native stack.','line_number':915,'multiline':False]
['text':' Truncating conversion modifiers.','line_number':918,'multiline':False]
['text':' namespace jit','line_number':934,'multiline':False]
['text':' namespace js','line_number':935,'multiline':False]
['text':' jit_IonTypes_h ','line_number':937,'multiline':True]
