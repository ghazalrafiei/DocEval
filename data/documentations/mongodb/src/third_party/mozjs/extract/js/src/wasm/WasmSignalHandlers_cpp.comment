['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2014 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' js::jit::JitActivation','line_number':25,'multiline':False]
['text':' must include before util/Windows.h's `#undef`s','line_number':31,'multiline':False]
['text':' =============================================================================','line_number':45,'multiline':False]
['text':' This following pile of macros and includes defines the ToRegisterState() and','line_number':46,'multiline':False]
['text':' the ContextTo{PC,FP,SP,LR}() functions from the (highly) platform-specific','line_number':47,'multiline':False]
['text':' CONTEXT struct which is provided to the signal handler.','line_number':48,'multiline':False]
['text':' =============================================================================','line_number':49,'multiline':False]
['text':' for ucontext_t, mcontext_t','line_number':52,'multiline':False]
['text':' for union savefpu','line_number':57,'multiline':False]
['text':' for struct savefpu/fxsave64','line_number':60,'multiline':False]
['text':' Not all versions of the Android NDK define ucontext_t or mcontext_t.','line_number':237,'multiline':False]
['text':' Detect this and provide custom but compatible definitions. Note that these','line_number':238,'multiline':False]
['text':' follow the GLibc naming convention to access register values from','line_number':239,'multiline':False]
['text':' mcontext_t.','line_number':240,'multiline':False]
['text':'','line_number':241,'multiline':False]
['text':' See: https://chromiumcodereview.appspot.com/10829122/','line_number':242,'multiline':False]
['text':' See: http://code.google.com/p/android/issues/detail?id=34784','line_number':243,'multiline':False]
['text':' GLibc on ARM defines mcontext_t has a typedef for 'struct sigcontext'.','line_number':247,'multiline':False]
['text':' Old versions of the C library <signal.h> didn't define the type.','line_number':248,'multiline':False]
['text':' Other fields are not used so don't define them here.','line_number':260,'multiline':False]
['text':' Other fields are not used so don't define them here.','line_number':291,'multiline':False]
['text':' x86 version for Android.','line_number':295,'multiline':False]
['text':' x86 kernel uses 64-bit signal masks','line_number':303,'multiline':False]
['text':' Other fields are not used by V8, don't define them here.','line_number':309,'multiline':False]
['text':' defined(__i386__)','line_number':312,'multiline':False]
['text':' !defined(__BIONIC_HAVE_UCONTEXT_T)','line_number':313,'multiline':False]
['text':' defined(ANDROID)','line_number':314,'multiline':False]
['text':' =============================================================================','line_number':434,'multiline':False]
['text':' All signals/exceptions funnel down to this one trap-handling function which','line_number':435,'multiline':False]
['text':' tests whether the pc is in a wasm module and, if so, whether there is','line_number':436,'multiline':False]
['text':' actually a trap expected at this pc. These tests both avoid real bugs being','line_number':437,'multiline':False]
['text':' silently converted to wasm traps and provides the trapping wasm bytecode','line_number':438,'multiline':False]
['text':' offset we need to report in the error.','line_number':439,'multiline':False]
['text':'','line_number':440,'multiline':False]
['text':' Crashing inside wasm trap handling (due to a bug in trap handling or exposed','line_number':441,'multiline':False]
['text':' during trap handling) must be reported like a normal crash, not cause the','line_number':442,'multiline':False]
['text':' crash report to be lost. On Windows and non-Mach Unix, a crash during the','line_number':443,'multiline':False]
['text':' handler reenters the handler, possibly repeatedly until exhausting the stack,','line_number':444,'multiline':False]
['text':' and so we prevent recursion with the thread-local sAlreadyHandlingTrap. On','line_number':445,'multiline':False]
['text':' Mach, the wasm exception handler has its own thread and is installed only on','line_number':446,'multiline':False]
['text':' the thread-level debugging ports of JSRuntime threads, so a crash on','line_number':447,'multiline':False]
['text':' exception handler thread will not recurse; it will bubble up to the','line_number':448,'multiline':False]
['text':' process-level debugging ports (where Breakpad is installed).','line_number':449,'multiline':False]
['text':' =============================================================================','line_number':450,'multiline':False]
['text':' We have a safe, expected wasm trap, so fp is well-defined to be a Frame*.','line_number':484,'multiline':False]
['text':' For the first sanity check, the Trap::IndirectCallBadSig special case is','line_number':485,'multiline':False]
['text':' due to this trap occurring in the indirect call prologue, while fp points','line_number':486,'multiline':False]
['text':' to the caller's Frame which can be in a different Module. In any case,','line_number':487,'multiline':False]
['text':' though, the containing JSContext is the same.','line_number':488,'multiline':False]
['text':' JitActivation::startWasmTrap() stores enough register state from the','line_number':499,'multiline':False]
['text':' point of the trap to allow stack unwinding or resumption, both of which','line_number':500,'multiline':False]
['text':' will call finishWasmTrap().','line_number':501,'multiline':False]
['text':' =============================================================================','line_number':508,'multiline':False]
['text':' The following platform-specific handlers funnel all signals/exceptions into','line_number':509,'multiline':False]
['text':' the shared HandleTrap() above.','line_number':510,'multiline':False]
['text':' =============================================================================','line_number':511,'multiline':False]
['text':' Obtained empirically from thread_local codegen on x86/x64/arm64.','line_number':514,'multiline':False]
['text':' Compiled in all user binaries, so should be stable over time.','line_number':515,'multiline':False]
['text':' Make sure TLS is initialized before reading sAlreadyHandlingTrap.','line_number':519,'multiline':False]
['text':' On OSX we are forced to use the lower-level Mach exception mechanism instead','line_number':543,'multiline':False]
['text':' of Unix signals because breakpad uses Mach exceptions and would otherwise','line_number':544,'multiline':False]
['text':' report a crash before wasm gets a chance to handle the exception.','line_number':545,'multiline':False]
['text':' This definition was generated by mig (the Mach Interface Generator) for the','line_number':547,'multiline':False]
['text':' routine 'exception_raise' (exc.defs).','line_number':548,'multiline':False]
['text':' start of the kernel processed data ','line_number':552,'multiline':True]
['text':' end of the kernel processed data ','line_number':556,'multiline':True]
['text':' The full Mach message also includes a trailer.','line_number':564,'multiline':False]
['text':' Get the port of the JSContext's thread from the message.','line_number':571,'multiline':False]
['text':' Read out the JSRuntime thread's register state.','line_number':574,'multiline':False]
['text':' Update the thread state with the new pc and register values.','line_number':624,'multiline':False]
['text':' Taken from mach_exc in /usr/include/mach/mach_exc.defs.','line_number':644,'multiline':False]
['text':' If we fail even receiving the message, we can't even send a reply!','line_number':653,'multiline':False]
['text':' Rather than hanging the faulting thread (hanging the browser), crash.','line_number':654,'multiline':False]
['text':' Some thread just commited an EXC_BAD_ACCESS and has been suspended by','line_number':667,'multiline':False]
['text':' the kernel. The kernel is waiting for us to reply with instructions.','line_number':668,'multiline':False]
['text':' Our default is the "not handled" reply (by setting the RetCode field','line_number':669,'multiline':False]
['text':' of the reply to KERN_FAILURE) which tells the kernel to continue','line_number':670,'multiline':False]
['text':' searching at the process and system level. If this is an asm.js','line_number':671,'multiline':False]
['text':' expected exception, we handle it and return KERN_SUCCESS.','line_number':672,'multiline':False]
['text':' This magic incantation to send a reply back to the kernel was','line_number':676,'multiline':False]
['text':' derived from the exc_server generated by','line_number':677,'multiline':False]
['text':' 'mig -v /usr/include/mach/mach_exc.defs'.','line_number':678,'multiline':False]
['text':' If not Windows or Mac, assume Unix','line_number':693,'multiline':False]
['text':' This signal is not for any asm.js code we expect, so we need to forward','line_number':729,'multiline':False]
['text':' the signal to the next handler. If there is no next handler (SIG_IGN or','line_number':730,'multiline':False]
['text':' SIG_DFL), then it's time to crash. To do this, we set the signal back to','line_number':731,'multiline':False]
['text':' its original disposition and return. This will cause the faulting op to','line_number':732,'multiline':False]
['text':' be re-executed which will crash in the normal way. The advantage of','line_number':733,'multiline':False]
['text':' doing this to calling _exit() is that we remove ourselves from the crash','line_number':734,'multiline':False]
['text':' stack which improves crash reports. If there is a next handler, call it.','line_number':735,'multiline':False]
['text':' It will either crash synchronously, fix up the instruction so that','line_number':736,'multiline':False]
['text':' execution can continue and return, or trigger a crash by returning the','line_number':737,'multiline':False]
['text':' signal to it's original disposition and returning.','line_number':738,'multiline':False]
['text':'','line_number':739,'multiline':False]
['text':' Note: the order of these tests matter.','line_number':740,'multiline':False]
['text':' XP_WIN || XP_DARWIN || assume unix','line_number':750,'multiline':False]
['text':' If there is no JIT, then there should be no Wasm signal handlers.','line_number':775,'multiline':False]
['text':' Signal handling is broken on some android systems.','line_number':780,'multiline':False]
['text':' Install whatever exception/signal handler is appropriate for the OS.','line_number':788,'multiline':False]
['text':' Under ASan we need to let the ASan runtime's ShadowExceptionHandler stay','line_number':792,'multiline':False]
['text':' in the first handler position. This requires some coordination with','line_number':793,'multiline':False]
['text':' MemoryProtectionExceptionHandler::isDisabled().','line_number':794,'multiline':False]
['text':' Otherwise, WasmTrapHandler needs to go first, so that we can recover','line_number':797,'multiline':False]
['text':' from wasm faults and continue execution without triggering handlers','line_number':798,'multiline':False]
['text':' such as MemoryProtectionExceptionHandler that assume we are crashing.','line_number':799,'multiline':False]
['text':' Windows has all sorts of random security knobs for disabling things','line_number':803,'multiline':False]
['text':' so make this a dynamic failure that disables wasm, not a MOZ_CRASH().','line_number':804,'multiline':False]
['text':' All the Mach setup in EnsureLazyProcessSignalHandlers.','line_number':809,'multiline':False]
['text':' SA_NODEFER allows us to reenter the signal handler if we crash while','line_number':811,'multiline':False]
['text':' handling the signal, and fall through to the Breakpad handler by testing','line_number':812,'multiline':False]
['text':' handlingSegFault.','line_number':813,'multiline':False]
['text':' Allow handling OOB with signals on all architectures','line_number':815,'multiline':False]
['text':' On Arm Handle Unaligned Accesses','line_number':825,'multiline':False]
['text':' Install a handler to handle the instructions that are emitted to implement','line_number':835,'multiline':False]
['text':' wasm traps.','line_number':836,'multiline':False]
['text':' Create the port that all JSContext threads will redirect their traps to.','line_number':862,'multiline':False]
['text':' Create the thread that will wait on and service sMachDebugPort.','line_number':875,'multiline':False]
['text':' It's not useful to destroy this thread on process shutdown so','line_number':876,'multiline':False]
['text':' immediately detach on successful start.','line_number':877,'multiline':False]
['text':' In addition to the process-wide signal handler setup, OSX needs each','line_number':910,'multiline':False]
['text':' thread configured to send its exceptions to sMachDebugPort. While there','line_number':911,'multiline':False]
['text':' are also task-level (i.e. process-level) exception ports, those are','line_number':912,'multiline':False]
['text':' "claimed" by breakpad and chaining Mach exceptions is dark magic that we','line_number':913,'multiline':False]
['text':' avoid by instead intercepting exceptions at the thread level before they','line_number':914,'multiline':False]
['text':' propagate to the process-level. This works because there are no other','line_number':915,'multiline':False]
['text':' uses of thread-level exception ports.','line_number':916,'multiline':False]
