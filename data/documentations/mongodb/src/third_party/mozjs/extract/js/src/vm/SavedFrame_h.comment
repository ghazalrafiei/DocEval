['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Prototype methods and properties to be exposed to JS.','line_number':32,'multiline':False]
['text':' Convenient getters for SavedFrame's reserved slots for use from C++.','line_number':47,'multiline':False]
['text':' When isWasm():','line_number':60,'multiline':False]
['text':' Iterator for use with C++11 range based for loops, eg:','line_number':64,'multiline':False]
['text':'','line_number':65,'multiline':False]
['text':'     RootedSavedFrame stack(cx, getSomeSavedFrameStack());','line_number':66,'multiline':False]
['text':'     for (HandleSavedFrame frame : SavedFrame::RootedRange(cx, stack)) {','line_number':67,'multiline':False]
['text':'         ...','line_number':68,'multiline':False]
['text':'     }','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' Each frame yielded by `SavedFrame::RootedRange` is only a valid handle to','line_number':71,'multiline':False]
['text':' a rooted `SavedFrame` within the loop's block for a single loop','line_number':72,'multiline':False]
['text':' iteration. When the next iteration begins, the value is invalidated.','line_number':73,'multiline':False]
['text':' For use by RootedRange::end() only.','line_number':80,'multiline':False]
['text':' We should only ever compare to the null range, aka we are just','line_number':90,'multiline':False]
['text':' testing if this range is done.','line_number':91,'multiline':False]
['text':' The reserved slots in the SavedFrame class.','line_number':132,'multiline':False]
['text':' The total number of reserved slots in the SavedFrame class.','line_number':142,'multiline':False]
['text':' namespace js','line_number':161,'multiline':False]
['text':' namespace mozilla','line_number':177,'multiline':False]
['text':' Assert that if the given object is not null, that it must be either a','line_number':181,'multiline':False]
['text':' SavedFrame object or wrapper (Xray or CCW) around a SavedFrame object.','line_number':182,'multiline':False]
['text':' When we reconstruct a SavedFrame stack from a JS::ubi::StackFrame, we may not','line_number':186,'multiline':False]
['text':' have access to the principals that the original stack was captured','line_number':187,'multiline':False]
['text':' with. Instead, we use these two singleton principals based on whether','line_number':188,'multiline':False]
['text':' JS::ubi::StackFrame::isSystem or not. These singletons should never be passed','line_number':189,'multiline':False]
['text':' to the subsumes callback, and should be special cased with a shortcut before','line_number':190,'multiline':False]
['text':' that.','line_number':191,'multiline':False]
['text':' Return true if the given JSPrincipals* points to one of the','line_number':216,'multiline':False]
['text':' ReconstructedSavedFramePrincipals singletons, false otherwise.','line_number':217,'multiline':False]
['text':' Get the appropriate ReconstructedSavedFramePrincipals singleton for the','line_number':222,'multiline':False]
['text':' given JS::ubi::StackFrame that is being reconstructed as a SavedFrame','line_number':223,'multiline':False]
['text':' stack.','line_number':224,'multiline':False]
['text':' namespace js','line_number':235,'multiline':False]
['text':' A concrete JS::ubi::StackFrame that is backed by a live SavedFrame object.','line_number':242,'multiline':False]
['text':' namespace ubi','line_number':288,'multiline':False]
['text':' namespace JS','line_number':289,'multiline':False]
['text':' vm_SavedFrame_h','line_number':291,'multiline':False]
