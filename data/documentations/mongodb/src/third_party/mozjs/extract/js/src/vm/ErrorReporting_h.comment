['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' for JSErrorNotes, JSErrorReport','line_number':13,'multiline':False]
['text':' for ScriptEnvironmentPreparer','line_number':14,'multiline':False]
['text':' for UniquePtr','line_number':16,'multiline':False]
['text':' for UniqueTwoByteChars','line_number':17,'multiline':False]
['text':'*
 * Metadata for a compilation error (or warning) at a particular offset, or at
 * no offset (i.e. with respect to a script overall).
 ','line_number':21,'multiline':True]
['text':' The file/URL where the error occurred.','line_number':26,'multiline':False]
['text':' The line and column numbers where the error occurred.  If the error','line_number':29,'multiline':False]
['text':' is with respect to the entire script and not with respect to a','line_number':30,'multiline':False]
['text':' particular location, these will both be zero.','line_number':31,'multiline':False]
['text':' If the error occurs at a particular location, context surrounding the','line_number':35,'multiline':False]
['text':' location of the error: the line that contained the error, or a small','line_number':36,'multiline':False]
['text':' portion of it if the line is long.  (If the error occurs within a','line_number':37,'multiline':False]
['text':' regular expression, this context is based upon its pattern characters.)','line_number':38,'multiline':False]
['text':'','line_number':39,'multiline':False]
['text':' This information is provided on a best-effort basis: code populating','line_number':40,'multiline':False]
['text':' ErrorMetadata instances isn't obligated to supply this.','line_number':41,'multiline':False]
['text':' If |lineOfContext| is provided, we show only a portion (a "window") of','line_number':44,'multiline':False]
['text':' the line around the erroneous token -- the first char in the token, plus','line_number':45,'multiline':False]
['text':' |lineOfContextRadius| chars before it and |lineOfContextRadius - 1|','line_number':46,'multiline':False]
['text':' chars after it.  This is because for a very long line, the full line is','line_number':47,'multiline':False]
['text':' (a) not that helpful, and (b) wastes a lot of memory.  See bug 634444.','line_number':48,'multiline':False]
['text':' If |lineOfContext| is non-null, its length.','line_number':51,'multiline':False]
['text':' If |lineOfContext| is non-null, the offset within it of the token that','line_number':54,'multiline':False]
['text':' triggered the error.','line_number':55,'multiline':False]
['text':' Whether the error is "muted" because it derives from a cross-origin','line_number':58,'multiline':False]
['text':' load.  See the comment in TransitiveCompileOptions in jsapi.h for','line_number':59,'multiline':False]
['text':' details.','line_number':60,'multiline':False]
['text':'* Send a JSErrorReport to the warningReporter callback. ','line_number':79,'multiline':True]
['text':'*
 * Report a compile error during script processing prior to execution of the
 * script.
 ','line_number':82,'multiline':True]
['text':'*
 * Report a compile warning during script processing prior to execution of the
 * script.  Returns true if the warning was successfully reported, false if an
 * error occurred.
 ','line_number':94,'multiline':True]
['text':'*
 * Report the given error Value to the given global.  The JSContext is not
 * assumed to be in any particular realm, but the global and error are
 * expected to be same-compartment.
 ','line_number':107,'multiline':True]
['text':'*
 * Report an exception, using printf-style APIs to generate the error
 * message.
 ','line_number':125,'multiline':True]
['text':'
 * For cases when we do not have an arguments array.
 ','line_number':160,'multiline':True]
['text':'
 * If there is a pending exception, print it to stderr and clear it. Otherwise
 * do nothing.
 *
 * For reporting bugs or unexpected errors in testing functions.
 ','line_number':174,'multiline':True]
['text':' namespace js','line_number':182,'multiline':False]
['text':' vm_ErrorReporting_h ','line_number':184,'multiline':True]
