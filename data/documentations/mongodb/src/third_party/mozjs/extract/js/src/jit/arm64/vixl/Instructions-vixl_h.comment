['text':' Copyright 2015, ARM Limited','line_number':1,'multiline':False]
['text':' All rights reserved.','line_number':2,'multiline':False]
['text':'','line_number':3,'multiline':False]
['text':' Redistribution and use in source and binary forms, with or without','line_number':4,'multiline':False]
['text':' modification, are permitted provided that the following conditions are met:','line_number':5,'multiline':False]
['text':'','line_number':6,'multiline':False]
['text':'   * Redistributions of source code must retain the above copyright notice,','line_number':7,'multiline':False]
['text':'     this list of conditions and the following disclaimer.','line_number':8,'multiline':False]
['text':'   * Redistributions in binary form must reproduce the above copyright notice,','line_number':9,'multiline':False]
['text':'     this list of conditions and the following disclaimer in the documentation','line_number':10,'multiline':False]
['text':'     and/or other materials provided with the distribution.','line_number':11,'multiline':False]
['text':'   * Neither the name of ARM Limited nor the names of its contributors may be','line_number':12,'multiline':False]
['text':'     used to endorse or promote products derived from this software without','line_number':13,'multiline':False]
['text':'     specific prior written permission.','line_number':14,'multiline':False]
['text':'','line_number':15,'multiline':False]
['text':' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS CONTRIBUTORS "AS IS" AND','line_number':16,'multiline':False]
['text':' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED','line_number':17,'multiline':False]
['text':' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE','line_number':18,'multiline':False]
['text':' DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE','line_number':19,'multiline':False]
['text':' FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL','line_number':20,'multiline':False]
['text':' DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR','line_number':21,'multiline':False]
['text':' SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER','line_number':22,'multiline':False]
['text':' CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,','line_number':23,'multiline':False]
['text':' OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE','line_number':24,'multiline':False]
['text':' OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.','line_number':25,'multiline':False]
['text':' ISA constants. --------------------------------------------------------------','line_number':35,'multiline':False]
['text':' This is the nominal page size (as used by the adrp instruction); the actual','line_number':44,'multiline':False]
['text':' size of the memory pages allocated by the kernel is likely to differ.','line_number':45,'multiline':False]
['text':' The classes of immediate branch ranges, in order of increasing range.','line_number':118,'multiline':False]
['text':' Note that CondBranchType and CompareBranchType have the same range.','line_number':119,'multiline':False]
['text':' tbz/tbnz: imm14 = +/- 32KB.','line_number':121,'multiline':False]
['text':' b.cond/cbz/cbnz: imm19 = +/- 1MB.','line_number':122,'multiline':False]
['text':' b/bl: imm26 = +/- 128MB.','line_number':123,'multiline':False]
['text':' Number of 'short-range' branch range types.','line_number':126,'multiline':False]
['text':' We don't consider unconditional branches 'short-range'.','line_number':127,'multiline':False]
['text':' Instructions. ---------------------------------------------------------------','line_number':142,'multiline':False]
['text':' ImmPCRel is a compound field (not present in INSTRUCTION_FIELDS_LIST),','line_number':181,'multiline':False]
['text':' formed from ImmPCRelLo and ImmPCRelHi.','line_number':182,'multiline':False]
['text':' Helpers.','line_number':214,'multiline':False]
['text':' This includes PRFM_lit.','line_number':259,'multiline':False]
['text':' Mozilla modifications.','line_number':268,'multiline':False]
['text':' Is this a stack pointer synchronization instruction as inserted by','line_number':291,'multiline':False]
['text':' MacroAssembler::syncStackPtr()?','line_number':292,'multiline':False]
['text':' Check if offset can be encoded as a RAW offset in a branch_type','line_number':298,'multiline':False]
['text':' instruction. The offset must be encodeable directly as the immediate field','line_number':299,'multiline':False]
['text':' in the instruction, it is not scaled by kInstructionSize first.','line_number':300,'multiline':False]
['text':' Get the range type corresponding to a branch type.','line_number':303,'multiline':False]
['text':' Get the maximum realizable forward PC offset (in bytes) for an immediate','line_number':306,'multiline':False]
['text':' branch of the given range type.','line_number':307,'multiline':False]
['text':' This is the largest positive multiple of kInstructionSize, offset, such','line_number':308,'multiline':False]
['text':' that:','line_number':309,'multiline':False]
['text':'','line_number':310,'multiline':False]
['text':'    IsValidImmPCOffset(xxx, offset / kInstructionSize)','line_number':311,'multiline':False]
['text':'','line_number':312,'multiline':False]
['text':' returns true for the same branch type.','line_number':313,'multiline':False]
['text':' Get the minimuum realizable backward PC offset (in bytes) for an immediate','line_number':316,'multiline':False]
['text':' branch of the given range type.','line_number':317,'multiline':False]
['text':' This is the smallest (i.e., largest in magnitude) negative multiple of','line_number':318,'multiline':False]
['text':' kInstructionSize, offset, such that:','line_number':319,'multiline':False]
['text':'','line_number':320,'multiline':False]
['text':'    IsValidImmPCOffset(xxx, offset / kInstructionSize)','line_number':321,'multiline':False]
['text':'','line_number':322,'multiline':False]
['text':' returns true for the same branch type.','line_number':323,'multiline':False]
['text':' Indicate whether Rd can be the stack pointer or the zero register. This','line_number':326,'multiline':False]
['text':' does not check that the instruction actually has an Rd field.','line_number':327,'multiline':False]
['text':' The following instructions use sp or wsp as Rd:','line_number':329,'multiline':False]
['text':'  Add/sub (immediate) when not setting the flags.','line_number':330,'multiline':False]
['text':'  Add/sub (extended) when not setting the flags.','line_number':331,'multiline':False]
['text':'  Logical (immediate) when not setting the flags.','line_number':332,'multiline':False]
['text':' Otherwise, r31 is the zero register.','line_number':333,'multiline':False]
['text':' Of the logical (immediate) instructions, only ANDS (and its aliases)','line_number':342,'multiline':False]
['text':' can set the flags. The others can all write into sp.','line_number':343,'multiline':False]
['text':' Note that some logical operations are not available to','line_number':344,'multiline':False]
['text':' immediate-operand instructions, so we have to combine two masks here.','line_number':345,'multiline':False]
['text':' Indicate whether Rn can be the stack pointer or the zero register. This','line_number':355,'multiline':False]
['text':' does not check that the instruction actually has an Rn field.','line_number':356,'multiline':False]
['text':' The following instructions use sp or wsp as Rn:','line_number':358,'multiline':False]
['text':'  All loads and stores.','line_number':359,'multiline':False]
['text':'  Add/sub (immediate).','line_number':360,'multiline':False]
['text':'  Add/sub (extended).','line_number':361,'multiline':False]
['text':' Otherwise, r31 is the zero register.','line_number':362,'multiline':False]
['text':' Find the target of this instruction. 'this' may be a branch or a','line_number':383,'multiline':False]
['text':' PC-relative addressing instruction.','line_number':384,'multiline':False]
['text':' Patch a PC-relative offset to refer to 'target'. 'this' may be a branch or','line_number':387,'multiline':False]
['text':' a PC-relative addressing instruction.','line_number':388,'multiline':False]
['text':' Patch a literal load instruction to load from 'source'.','line_number':390,'multiline':False]
['text':' The range of a load literal instruction, expressed as 'instr +- range'.','line_number':393,'multiline':False]
['text':' The range is actually the 'positive' range; the branch instruction can','line_number':394,'multiline':False]
['text':' target [instr - range - kInstructionSize, instr + range].','line_number':395,'multiline':False]
['text':' Calculate the address of a literal referred to by a load-literal','line_number':400,'multiline':False]
['text':' instruction, and return it as the specified type.','line_number':401,'multiline':False]
['text':'','line_number':402,'multiline':False]
['text':' The literal itself is safely mutable only if the backing buffer is safely','line_number':403,'multiline':False]
['text':' mutable.','line_number':404,'multiline':False]
['text':' Cast the address using a C-style cast. A reinterpret_cast would be','line_number':411,'multiline':False]
['text':' appropriate, but it can't cast one integral type to another.','line_number':412,'multiline':False]
['text':' Assert that the address can be represented by the specified type.','line_number':415,'multiline':False]
['text':' Skip any constant pools with artificial guards at this point.','line_number':449,'multiline':False]
['text':' Return either |this| or the first instruction after the pool.','line_number':450,'multiline':False]
['text':' Functions for handling NEON vector format information.','line_number':477,'multiline':False]
['text':' Scalar formats. We add the scalar bit to distinguish between scalar and','line_number':489,'multiline':False]
['text':' vector enumerations; the bit is always set in the encoding of scalar ops','line_number':490,'multiline':False]
['text':' and always clear for vector ops. Although kFormatD and kFormat1D appear','line_number':491,'multiline':False]
['text':' to be the same, their meaning is subtly different. The first is a scalar','line_number':492,'multiline':False]
['text':' operation, the second a vector operation that only affects one lane.','line_number':493,'multiline':False]
['text':' TODO: Make the return types of these functions consistent.','line_number':509,'multiline':False]
['text':' The bit positions in the instruction to consider.','line_number':540,'multiline':False]
['text':' Mapping from concatenated bits to format.','line_number':543,'multiline':False]
['text':' Construct a format decoder with increasingly specific format maps for each','line_number':554,'multiline':False]
['text':' subsitution. If no format map is specified, the default is the integer','line_number':555,'multiline':False]
['text':' format map.','line_number':556,'multiline':False]
['text':' Set the format mapping for all or individual substitutions.','line_number':580,'multiline':False]
['text':' Substitute %s in the input string with the placeholder string for each','line_number':595,'multiline':False]
['text':' register, ie. "'B", "'H", etc.','line_number':596,'multiline':False]
['text':' Substitute %s in the input string with a new string based on the','line_number':601,'multiline':False]
['text':' substitution mode.','line_number':602,'multiline':False]
['text':' Append a "2" to a mnemonic string based of the state of the Q bit.','line_number':614,'multiline':False]
['text':' Built in mappings for common cases.','line_number':638,'multiline':False]
['text':' The integer format map uses three bits (Q, size<1:0>) to encode the','line_number':640,'multiline':False]
['text':' "standard" set of NEON integer vector formats.','line_number':641,'multiline':False]
['text':' The long integer format map uses two bits (size<1:0>) to encode the','line_number':650,'multiline':False]
['text':' long set of NEON integer vector formats. These are used in narrow, wide','line_number':651,'multiline':False]
['text':' and long operations.','line_number':652,'multiline':False]
['text':' The FP format map uses two bits (Q, size<0>) to encode the NEON FP vector','line_number':660,'multiline':False]
['text':' formats: NF_2S, NF_4S, NF_2D.','line_number':661,'multiline':False]
['text':' The FP format map assumes two bits (Q, size<0>) are used to encode the','line_number':663,'multiline':False]
['text':' NEON FP vector formats: NF_2S, NF_4S, NF_2D.','line_number':664,'multiline':False]
['text':' The load/store format map uses three bits (Q, 11, 10) to encode the','line_number':671,'multiline':False]
['text':' set of NEON vector formats.','line_number':672,'multiline':False]
['text':' The logical format map uses one bit (Q) to encode the NEON vector format:','line_number':681,'multiline':False]
['text':' NF_8B, NF_16B.','line_number':682,'multiline':False]
['text':' The triangular format map uses between two and five bits to encode the NEON','line_number':690,'multiline':False]
['text':' vector format:','line_number':691,'multiline':False]
['text':' xxx10->8B, xxx11->16B, xx100->4H, xx101->8H','line_number':692,'multiline':False]
['text':' x1000->2S, x1001->4S,  10001->2D, all others undefined.','line_number':693,'multiline':False]
['text':' The scalar format map uses two bits (size<1:0>) to encode the NEON scalar','line_number':705,'multiline':False]
['text':' formats: NF_B, NF_H, NF_S, NF_D.','line_number':706,'multiline':False]
['text':' The long scalar format map uses two bits (size<1:0>) to encode the longer','line_number':714,'multiline':False]
['text':' NEON scalar formats: NF_H, NF_S, NF_D.','line_number':715,'multiline':False]
['text':' The FP scalar format map assumes one bit (size<0>) is used to encode the','line_number':723,'multiline':False]
['text':' NEON FP scalar formats: NF_S, NF_D.','line_number':724,'multiline':False]
['text':' The triangular scalar format map uses between one and four bits to encode','line_number':732,'multiline':False]
['text':' the NEON FP scalar formats:','line_number':733,'multiline':False]
['text':' xxx1->B, xx10->H, x100->S, 1000->D, all others undefined.','line_number':734,'multiline':False]
['text':' Get a pointer to a string that represents the format or placeholder for','line_number':745,'multiline':False]
['text':' the specified substitution index, based on the format map and instruction.','line_number':746,'multiline':False]
['text':' Get the NEONFormat enumerated value for bits obtained from the','line_number':755,'multiline':False]
['text':' instruction based on the specified format mapping.','line_number':756,'multiline':False]
['text':' Convert a NEONFormat into a string.','line_number':761,'multiline':False]
['text':' Convert a NEONFormat into a register placeholder string.','line_number':772,'multiline':False]
['text':' Select bits from instrbits_ defined by the bits array, concatenate them,','line_number':786,'multiline':False]
['text':' and return the value.','line_number':787,'multiline':False]
['text':' namespace vixl','line_number':803,'multiline':False]
['text':' VIXL_A64_INSTRUCTIONS_A64_H_','line_number':805,'multiline':False]
