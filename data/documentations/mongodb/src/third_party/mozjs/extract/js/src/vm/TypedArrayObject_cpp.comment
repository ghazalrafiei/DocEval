['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS_GetArrayBufferViewType, JS_GetTypedArray{Length,ByteOffset,ByteLength}, JS_IsTypedArrayObject','line_number':33,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':34,'multiline':False]
['text':' js::Scalar::Type','line_number':36,'multiline':False]
['text':' js::FunctionFlags','line_number':43,'multiline':False]
['text':'
 * TypedArrayObject
 *
 * The non-templated base class for the specific typed implementations.
 * This class holds all the member variables that are used by
 * the subclasses.
 ','line_number':68,'multiline':True]
['text':' static ','line_number':104,'multiline':True]
['text':' static ','line_number':109,'multiline':True]
['text':' Attaching the first view to an array buffer is infallible.','line_number':125,'multiline':False]
['text':' tarray is not shared, because if it were it would have a buffer.','line_number':128,'multiline':False]
['text':' If the object is in the nursery, the buffer will be freed by the next','line_number':131,'multiline':False]
['text':' nursery GC. Free the data slot pointer if the object has no inline data.','line_number':132,'multiline':False]
['text':' Template objects or discarded objects (which didn't have enough room','line_number':161,'multiline':False]
['text':' for inner elements) don't have anything to free.','line_number':162,'multiline':False]
['text':' Typed arrays with a buffer object do not need to be free'd','line_number':169,'multiline':False]
['text':' Free the data slot pointer if it does not point into the old JSObject.','line_number':174,'multiline':False]
['text':' static ','line_number':181,'multiline':True]
['text':' Typed arrays with a buffer object do not need an update.','line_number':188,'multiline':False]
['text':' Update the data slot pointer if it points to the old JSObject.','line_number':194,'multiline':False]
['text':' Discarded objects (which didn't have enough room for inner elements) don't','line_number':204,'multiline':False]
['text':' have any data to move.','line_number':205,'multiline':False]
['text':' Determine if we can use inline data for the target array. If this is','line_number':218,'multiline':False]
['text':' possible, the nursery will have picked an allocation size that is large','line_number':219,'multiline':False]
['text':' enough.','line_number':220,'multiline':False]
['text':' See AllocKindForLazyBuffer.','line_number':226,'multiline':False]
['text':' Set a forwarding pointer for the element buffers in case they were','line_number':257,'multiline':False]
['text':' preserved on the stack by Ion.','line_number':258,'multiline':False]
['text':' direct = ','line_number':261,'multiline':True]
['text':' Helper clamped uint8_t type ','line_number':277,'multiline':True]
['text':' Not < so that NaN coerces to 0','line_number':280,'multiline':False]
['text':'
   * now val is rounded to nearest, ties rounded up.  We want
   * rounded to nearest ties to even, so check whether we had a
   * tie.
   ','line_number':292,'multiline':True]
['text':'
     * It was a tie (since adding 0.5 gave us the exact integer
     * we want).  Since we rounded up, we either already have an
     * even number or we have an odd number but the number we
     * want is one less.  So just unconditionally masking out the
     * ones bit should do the trick to get us the value we
     * want.
     ','line_number':298,'multiline':True]
['text':' Template objects do not need memory for its elements, since there','line_number':438,'multiline':False]
['text':' won't be any elements to store. Therefore, we set the pointer to','line_number':439,'multiline':False]
['text':' nullptr and avoid allocating memory that will never be used.','line_number':440,'multiline':False]
['text':' Verify that the private slot is at the expected place.','line_number':453,'multiline':False]
['text':' ES2018 draft rev 8340bf9a8427ea81bb0d1459471afbcc91d18add','line_number':551,'multiline':False]
['text':' 22.2.4.1 TypedArray ( )','line_number':552,'multiline':False]
['text':' 22.2.4.2 TypedArray ( length )','line_number':553,'multiline':False]
['text':' 22.2.4.3 TypedArray ( typedArray )','line_number':554,'multiline':False]
['text':' 22.2.4.4 TypedArray ( object )','line_number':555,'multiline':False]
['text':' 22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )','line_number':556,'multiline':False]
['text':' Step 1 (22.2.4.1) or 2 (22.2.4.2-5).','line_number':560,'multiline':False]
['text':' 22.2.4.1 TypedArray ( )','line_number':577,'multiline':False]
['text':' 22.2.4.2 TypedArray ( length )','line_number':578,'multiline':False]
['text':' 22.2.4.2, step 3.','line_number':580,'multiline':False]
['text':' 22.2.4.1, step 3 and 22.2.4.2, step 5.','line_number':586,'multiline':False]
['text':' 22.2.4.2.1 AllocateTypedArray, step 1.','line_number':587,'multiline':False]
['text':' 22.2.4.{3,4,5}, step 4.','line_number':598,'multiline':False]
['text':' 22.2.4.2.1 AllocateTypedArray, step 1.','line_number':599,'multiline':False]
['text':' 22.2.4.3 TypedArray ( typedArray )','line_number':605,'multiline':False]
['text':' 22.2.4.4 TypedArray ( object )','line_number':606,'multiline':False]
['text':' 22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )','line_number':611,'multiline':False]
['text':' Steps 9-17.','line_number':619,'multiline':False]
['text':' ES2018 draft rev 8340bf9a8427ea81bb0d1459471afbcc91d18add','line_number':628,'multiline':False]
['text':' 22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )','line_number':629,'multiline':False]
['text':' Steps 6-8.','line_number':630,'multiline':False]
['text':' Step 6.','line_number':636,'multiline':False]
['text':' Step 7.','line_number':641,'multiline':False]
['text':' Step 8.a.','line_number':653,'multiline':False]
['text':' ES2018 draft rev 8340bf9a8427ea81bb0d1459471afbcc91d18add','line_number':662,'multiline':False]
['text':' 22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )','line_number':663,'multiline':False]
['text':' Steps 9-12.','line_number':664,'multiline':False]
['text':' Step 9.','line_number':673,'multiline':False]
['text':' Step 10.','line_number':680,'multiline':False]
['text':' Steps 11.a, 11.c.','line_number':685,'multiline':False]
['text':' The given byte array doesn't map exactly to','line_number':687,'multiline':False]
['text':' |BYTES_PER_ELEMENT * N|','line_number':688,'multiline':False]
['text':' |byteOffset| is invalid.','line_number':697,'multiline':False]
['text':' Step 11.b.','line_number':705,'multiline':False]
['text':' Step 12.a.','line_number':709,'multiline':False]
['text':' Step 12.b.','line_number':712,'multiline':False]
['text':' |byteOffset + newByteLength| is too big for the arraybuffer','line_number':714,'multiline':False]
['text':' ES2018 draft rev 8340bf9a8427ea81bb0d1459471afbcc91d18add','line_number':737,'multiline':False]
['text':' 22.2.4.5 TypedArray ( buffer [ , byteOffset [ , length ] ] )','line_number':738,'multiline':False]
['text':' Steps 9-17.','line_number':739,'multiline':False]
['text':' Steps 9-12.','line_number':743,'multiline':False]
['text':' Steps 13-17.','line_number':749,'multiline':False]
['text':' Create a TypedArray object in another compartment.','line_number':753,'multiline':False]
['text':'','line_number':754,'multiline':False]
['text':' ES6 supports creating a TypedArray in global A (using global A's','line_number':755,'multiline':False]
['text':' TypedArray constructor) backed by an ArrayBuffer created in global B.','line_number':756,'multiline':False]
['text':'','line_number':757,'multiline':False]
['text':' Our TypedArrayObject implementation doesn't support a TypedArray in','line_number':758,'multiline':False]
['text':' compartment A backed by an ArrayBuffer in compartment B. So in this','line_number':759,'multiline':False]
['text':' case, we create the TypedArray in B (!) and return a cross-compartment','line_number':760,'multiline':False]
['text':' wrapper.','line_number':761,'multiline':False]
['text':'','line_number':762,'multiline':False]
['text':' Extra twist: the spec says the new TypedArray's [[Prototype]] must be','line_number':763,'multiline':False]
['text':' A's TypedArray.prototype. So even though we're creating the TypedArray','line_number':764,'multiline':False]
['text':' in B, its [[Prototype]] must be (a cross-compartment wrapper for) the','line_number':765,'multiline':False]
['text':' TypedArray.prototype in A.','line_number':766,'multiline':False]
['text':' Make sure to get the [[Prototype]] for the created typed array from','line_number':791,'multiline':False]
['text':' this compartment.','line_number':792,'multiline':False]
['text':' invalid byteOffset','line_number':832,'multiline':False]
['text':' The array's data can be inline, and the buffer created lazily.','line_number':860,'multiline':False]
['text':' 22.2.4.1 TypedArray ( )','line_number':874,'multiline':False]
['text':' 22.2.4.2 TypedArray ( length )','line_number':875,'multiline':False]
['text':' 22.2.4.1, step 1 and 22.2.4.2, steps 1-3 (performed in caller).','line_number':878,'multiline':False]
['text':' 22.2.4.1, step 2 and 22.2.4.2, step 4 (implicit).','line_number':879,'multiline':False]
['text':' 22.2.4.1, step 3 and 22.2.4.2, step 5 (call AllocateTypedArray).','line_number':880,'multiline':False]
['text':' See the comment in ElementSpecific::doubleToNative.','line_number':933,'multiline':False]
['text':' Assign based on characteristics of the destination type','line_number':937,'multiline':False]
['text':' The uint8_clamped type has a special rounding converter','line_number':945,'multiline':False]
['text':' for doubles.','line_number':946,'multiline':False]
['text':' https://tc39.github.io/proposal-bigint/#sec-integerindexedelementset','line_number':972,'multiline':False]
['text':' 9.4.5.11 IntegerIndexedElementSet ( O, index, value )','line_number':973,'multiline':False]
['text':' static ','line_number':975,'multiline':True]
['text':' Step 1 is enforced by the caller.','line_number':981,'multiline':False]
['text':' Steps 2-3.','line_number':983,'multiline':False]
['text':' Step 4.','line_number':989,'multiline':False]
['text':' Step 5.','line_number':996,'multiline':False]
['text':' anonymous namespace ','line_number':1005,'multiline':True]
['text':' ES2018 draft rev 2aea8f3e617b49df06414eb062ab44fad87661d3','line_number':1059,'multiline':False]
['text':' 24.1.1.1 AllocateArrayBuffer ( constructor, byteLength )','line_number':1060,'multiline':False]
['text':' byteLength = count * BYTES_PER_ELEMENT','line_number':1061,'multiline':False]
['text':' static ','line_number':1063,'multiline':True]
['text':' 24.1.1.1 step 1 (partially).','line_number':1066,'multiline':False]
['text':' As an optimization, skip the "prototype" lookup for %ArrayBuffer%.','line_number':1075,'multiline':False]
['text':' 9.1.13 OrdinaryCreateFromConstructor, steps 1-2.','line_number':1077,'multiline':False]
['text':' 24.1.1.1 steps 1 (remaining part), 2-6.','line_number':1083,'multiline':False]
['text':' Use the current global's ArrayBuffer if the override is set.','line_number':1104,'multiline':False]
['text':' The buffer was never exposed to content code, so if','line_number':1113,'multiline':False]
['text':' 1. %ArrayBufferPrototype%.constructor == %ArrayBuffer%, and','line_number':1114,'multiline':False]
['text':' 2. %ArrayBuffer%[@@species] == ArrayBufferSpecies','line_number':1115,'multiline':False]
['text':' we don't have to reify the buffer object and can simply return the','line_number':1116,'multiline':False]
['text':' default arrray buffer constructor.','line_number':1117,'multiline':False]
['text':' static ','line_number':1153,'multiline':True]
['text':' = nullptr ','line_number':1154,'multiline':True]
['text':' Allow nullptr proto for FriendAPI methods, which don't care about','line_number':1155,'multiline':False]
['text':' subclassing.','line_number':1156,'multiline':False]
['text':' wrapped= ','line_number':1158,'multiline':True]
['text':' wrapped= ','line_number':1163,'multiline':True]
['text':' ES2018 draft rev 272beb67bc5cd9fd18a220665198384108208ee1','line_number':1169,'multiline':False]
['text':' 22.2.4.3 TypedArray ( typedArray )','line_number':1170,'multiline':False]
['text':' static ','line_number':1172,'multiline':True]
['text':' Step 1.','line_number':1174,'multiline':False]
['text':' Step 2 (Already performed in caller).','line_number':1179,'multiline':False]
['text':' Steps 3-4 (Allocation deferred until later).','line_number':1181,'multiline':False]
['text':' Step 5.','line_number':1183,'multiline':False]
['text':' To keep things simpler, we always reify the array buffer for cross-realm or','line_number':1195,'multiline':False]
['text':' wrapped typed arrays. Note: isWrapped does not imply cross-realm, because','line_number':1196,'multiline':False]
['text':' of same-compartment wrappers.','line_number':1197,'multiline':False]
['text':' Step 6 (skipped).','line_number':1204,'multiline':False]
['text':' Step 7.','line_number':1206,'multiline':False]
['text':' Step 8 (skipped).','line_number':1213,'multiline':False]
['text':' Step 9.','line_number':1215,'multiline':False]
['text':' Steps 10-15 (skipped).','line_number':1218,'multiline':False]
['text':' Steps 16-17.','line_number':1220,'multiline':False]
['text':' Steps 18-19.','line_number':1232,'multiline':False]
['text':' Step 19.a or 18.a, 24.1.1.4 CloneArrayBuffer(...) steps 1-3.','line_number':1235,'multiline':False]
['text':' Step 19.b or 24.1.1.4 step 4.','line_number':1240,'multiline':False]
['text':' BigInt proposal 7.24, step 19.c.','line_number':1247,'multiline':False]
['text':' Steps 3-4 (remaining part), 20-23.','line_number':1257,'multiline':False]
['text':' Steps 19.c-f or 24.1.1.4 steps 5-7.','line_number':1264,'multiline':False]
['text':' Step 24.','line_number':1276,'multiline':False]
['text':' ES2017 draft rev 6859bb9ccaea9c6ede81d71e5320e3833b92cb3e','line_number':1297,'multiline':False]
['text':' 22.2.4.4 TypedArray ( object )','line_number':1298,'multiline':False]
['text':' static ','line_number':1300,'multiline':True]
['text':' Steps 1-2 (Already performed in caller).','line_number':1302,'multiline':False]
['text':' Steps 3-4 (Allocation deferred until later).','line_number':1304,'multiline':False]
['text':' Fast path when iterable is a packed array using the default iterator.','line_number':1311,'multiline':False]
['text':' Step 6.a (We don't need to call IterableToList for the fast path).','line_number':1313,'multiline':False]
['text':' Step 6.b.','line_number':1316,'multiline':False]
['text':' Step 6.c.','line_number':1319,'multiline':False]
['text':' Steps 6.d-e.','line_number':1330,'multiline':False]
['text':' Step 6.f (The assertion isn't applicable for the fast path).','line_number':1337,'multiline':False]
['text':' Step 6.g.','line_number':1339,'multiline':False]
['text':' Step 5.','line_number':1343,'multiline':False]
['text':' Steps 6-8.','line_number':1350,'multiline':False]
['text':' Throw if other[Symbol.iterator] isn't callable.','line_number':1353,'multiline':False]
['text':' Step 6.a.','line_number':1370,'multiline':False]
['text':' Steps 6.b-g (Implemented in steps 9-13 below).','line_number':1377,'multiline':False]
['text':' Step 7 is an assertion: object is not an Iterator. Testing this is','line_number':1380,'multiline':False]
['text':' literally the very last thing we did, so we don't assert here.','line_number':1381,'multiline':False]
['text':' Step 8.','line_number':1383,'multiline':False]
['text':' Step 9.','line_number':1387,'multiline':False]
['text':' Step 10.','line_number':1393,'multiline':False]
['text':' Steps 11-12.','line_number':1406,'multiline':False]
['text':' Step 13.','line_number':1413,'multiline':False]
['text':' We don't support wrappers, because of the complicated interaction between','line_number':1450,'multiline':False]
['text':' wrapped ArrayBuffers and TypedArrays, see |fromBufferWrapped()|.','line_number':1451,'multiline':False]
['text':' We don't use the template's length in the object case, so we can create','line_number':1453,'multiline':False]
['text':' the template typed array with an initial length of zero.','line_number':1454,'multiline':False]
['text':' static ','line_number':1463,'multiline':True]
['text':'static','line_number':1524,'multiline':True]
['text':' ES2019 draft rev fc9ecdcd74294d0ca3146d4b274e2a8e79565dc3','line_number':1530,'multiline':False]
['text':' 22.2.3.32 get %TypedArray%.prototype [ @@toStringTag ]','line_number':1531,'multiline':False]
['text':' Steps 1-2.','line_number':1536,'multiline':False]
['text':' Step 3.','line_number':1548,'multiline':False]
['text':' Steps 4-6.','line_number':1554,'multiline':False]
['text':' static ','line_number':1562,'multiline':True]
['text':' WARNING: |source| may be an unwrapped typed array from a different','line_number':1574,'multiline':False]
['text':' compartment. Proceed with caution!','line_number':1575,'multiline':False]
['text':' ES2017 draft rev c57ef95c45a371f9c9485bb1c3881dbdc04524a2','line_number':1600,'multiline':False]
['text':' 22.2.3.23 %TypedArray%.prototype.set ( overloaded [ , offset ] )','line_number':1601,'multiline':False]
['text':' 22.2.3.23.1 %TypedArray%.prototype.set ( array [ , offset ] )','line_number':1602,'multiline':False]
['text':' 22.2.3.23.2 %TypedArray%.prototype.set( typedArray [ , offset ] )','line_number':1603,'multiline':False]
['text':' static ','line_number':1604,'multiline':True]
['text':' Steps 1-5 (Validation performed as part of CallNonGenericMethod).','line_number':1608,'multiline':False]
['text':' Steps 6-7.','line_number':1612,'multiline':False]
['text':' Step 6.','line_number':1615,'multiline':False]
['text':' Step 7.','line_number':1620,'multiline':False]
['text':' Steps 8-9.','line_number':1627,'multiline':False]
['text':' 22.2.3.23.1, step 15. (22.2.3.23.2 only applies if args[0] is a typed','line_number':1634,'multiline':False]
['text':' array, so it doesn't make a difference there to apply ToObject here.)','line_number':1635,'multiline':False]
['text':' Remaining steps of 22.2.3.23.2.','line_number':1655,'multiline':False]
['text':' WARNING: |srcTypedArray| may be an unwrapped typed array from a','line_number':1657,'multiline':False]
['text':' different compartment. Proceed with caution!','line_number':1658,'multiline':False]
['text':' Steps 11-12.','line_number':1660,'multiline':False]
['text':' Step 10 (Reordered).','line_number':1667,'multiline':False]
['text':' Step 22 (Split into two checks to provide better error messages).','line_number':1670,'multiline':False]
['text':' Step 22 (Cont'd).','line_number':1676,'multiline':False]
['text':' Steps 13-21, 23-28.','line_number':1692,'multiline':False]
['text':' Remaining steps of 22.2.3.23.1.','line_number':1704,'multiline':False]
['text':' Step 10.','line_number':1706,'multiline':False]
['text':' We can't reorder this step because side-effects in step 16 can','line_number':1707,'multiline':False]
['text':' detach the underlying array buffer from the typed array.','line_number':1708,'multiline':False]
['text':' Step 16.','line_number':1711,'multiline':False]
['text':' Step 17 (Split into two checks to provide better error messages).','line_number':1717,'multiline':False]
['text':' Step 17 (Cont'd).','line_number':1723,'multiline':False]
['text':' Steps 11-14, 18-21.','line_number':1733,'multiline':False]
['text':' GetLengthProperty in step 16 can lead to the execution of user','line_number':1735,'multiline':False]
['text':' code which may detach the buffer. Handle this case here to','line_number':1736,'multiline':False]
['text':' ensure SetFromNonTypedArray is never called with a detached','line_number':1737,'multiline':False]
['text':' buffer. We still need to execute steps 21.a-b for their','line_number':1738,'multiline':False]
['text':' possible side-effects.','line_number':1739,'multiline':False]
['text':' Steps 21.a-b.','line_number':1741,'multiline':False]
['text':' Step 21.c.','line_number':1751,'multiline':False]
['text':' Step 21.c.','line_number':1769,'multiline':False]
['text':' SetFromNonTypedArray doesn't throw when the array buffer gets','line_number':1770,'multiline':False]
['text':' detached.','line_number':1771,'multiline':False]
['text':' Step 29/22.','line_number':1780,'multiline':False]
['text':' static ','line_number':1785,'multiline':True]
['text':' ES2020 draft rev dc1e21c454bd316810be1c0e7af0131a2d7f38e9','line_number':1792,'multiline':False]
['text':' 22.2.3.5 %TypedArray%.prototype.copyWithin ( target, start [ , end ] )','line_number':1793,'multiline':False]
['text':' static ','line_number':1794,'multiline':True]
['text':' Steps 1-2.','line_number':1798,'multiline':False]
['text':' Step 3.','line_number':1807,'multiline':False]
['text':' Step 4.','line_number':1810,'multiline':False]
['text':' Step 5.','line_number':1816,'multiline':False]
['text':' Step 6.','line_number':1824,'multiline':False]
['text':' Step 7.','line_number':1830,'multiline':False]
['text':' Step 8.','line_number':1838,'multiline':False]
['text':' Step 9.','line_number':1848,'multiline':False]
['text':' Step 10.','line_number':1856,'multiline':False]
['text':' Step 11.','line_number':1865,'multiline':False]
['text':'','line_number':1866,'multiline':False]
['text':' Note that getting or setting a typed array element must throw if the','line_number':1867,'multiline':False]
['text':' underlying buffer is detached, so the code below checks for detachment.','line_number':1868,'multiline':False]
['text':' This happens *only* if a get/set occurs, i.e. when |count > 0|.','line_number':1869,'multiline':False]
['text':'','line_number':1870,'multiline':False]
['text':' Also note that this copies elements effectively by memmove, *not* in','line_number':1871,'multiline':False]
['text':' step 11's specified order.  This is unobservable, even when the underlying','line_number':1872,'multiline':False]
['text':' buffer is a SharedArrayBuffer instance, because the access is unordered and','line_number':1873,'multiline':False]
['text':' therefore is allowed to have data races.','line_number':1874,'multiline':False]
['text':' Don't multiply by |tarray->bytesPerElement()| in case the compiler can't','line_number':1887,'multiline':False]
['text':' strength-reduce multiplication by 1/2/4/8 into the equivalent shift.','line_number':1888,'multiline':False]
['text':' static ','line_number':1924,'multiline':True]
['text':' static ','line_number':1931,'multiline':True]
['text':' static ','line_number':1961,'multiline':True]
['text':' static ','line_number':1965,'multiline':True]
['text':' static ','line_number':1984,'multiline':True]
['text':' This default implementation is only valid for integer types less','line_number':1990,'multiline':False]
['text':' than 32-bits in size.','line_number':1991,'multiline':False]
['text':' We need to specialize for floats and other integer types.','line_number':2003,'multiline':False]
['text':'
   * Doubles in typed arrays could be typed-punned arrays of integers. This
   * could allow user code to break the engine-wide invariant that only
   * canonical nans are stored into jsvals, which means user code could
   * confuse the engine into interpreting a double-typed jsval as an
   * object-typed jsval.
   *
   * This could be removed for platforms/compilers known to convert a 32-bit
   * non-canonical nan to a 64-bit canonical nan.
   ','line_number':2026,'multiline':True]
['text':'
   * Doubles in typed arrays could be typed-punned arrays of integers. This
   * could allow user code to break the engine-wide invariant that only
   * canonical nans are stored into jsvals, which means user code could
   * confuse the engine into interpreting a double-typed jsval as an
   * object-typed jsval.
   ','line_number':2045,'multiline':True]
['text':' anonymous namespace ','line_number':2068,'multiline':True]
['text':' anonymous namespace ','line_number':2108,'multiline':True]
['text':' namespace js','line_number':2137,'multiline':False]
['text':' static ','line_number':2155,'multiline':True]
['text':'**
 *** JS impl
 **','line_number':2183,'multiline':True]
['text':'
 * TypedArrayObject boilerplate
 ','line_number':2187,'multiline':True]
['text':' addProperty','line_number':2192,'multiline':False]
['text':' delProperty','line_number':2193,'multiline':False]
['text':' enumerate','line_number':2194,'multiline':False]
['text':' newEnumerate','line_number':2195,'multiline':False]
['text':' resolve','line_number':2196,'multiline':False]
['text':' mayResolve','line_number':2197,'multiline':False]
['text':' finalize','line_number':2198,'multiline':False]
['text':' call','line_number':2199,'multiline':False]
['text':' hasInstance','line_number':2200,'multiline':False]
['text':' construct','line_number':2201,'multiline':False]
['text':' trace','line_number':2202,'multiline':False]
['text':' objectMovedOp','line_number':2206,'multiline':False]
['text':' The various typed array prototypes are supposed to 1) be normal objects,','line_number':2250,'multiline':False]
['text':' 2) stringify to "[object <name of constructor>]", and 3) (Gecko-specific)','line_number':2251,'multiline':False]
['text':' be xrayable.  The first and second requirements mandate (in the absence of','line_number':2252,'multiline':False]
['text':' @@toStringTag) a custom class.  The third requirement mandates that each','line_number':2253,'multiline':False]
['text':' prototype's class have the relevant typed array's cached JSProtoKey in them.','line_number':2254,'multiline':False]
['text':' Thus we need one class with cached prototype per kind of typed array, with a','line_number':2255,'multiline':False]
['text':' delegated ClassSpec.','line_number':2256,'multiline':False]
['text':'','line_number':2257,'multiline':False]
['text':' Actually ({}).toString.call(Uint8Array.prototype) should throw, because','line_number':2258,'multiline':False]
['text':' Uint8Array.prototype lacks the the typed array internal slots.  (Same as','line_number':2259,'multiline':False]
['text':' with %TypedArray%.prototype.)  It's not clear this is desirable (see','line_number':2260,'multiline':False]
['text':' above), but it's what we've always done, so keep doing it till we','line_number':2261,'multiline':False]
['text':' implement @@toStringTag or ES6 changes.','line_number':2262,'multiline':False]
['text':' static ','line_number':2272,'multiline':True]
['text':' static ','line_number':2277,'multiline':True]
['text':' static ','line_number':2282,'multiline':True]
['text':' Can be changed to constexpr when compiled with C++17.','line_number':2371,'multiline':False]
['text':' While all this looks a bit convoluted to compare a string to "Infinity",','line_number':2374,'multiline':False]
['text':' compilers optimize this to one |cmp| instruction on x64 resp. two for x86,','line_number':2375,'multiline':False]
['text':' when the input is a Latin-1 string, because the string "Infinity" is','line_number':2376,'multiline':False]
['text':' exactly eight characters long, so it can be represented as a single uint64','line_number':2377,'multiline':False]
['text':' value.','line_number':2378,'multiline':False]
['text':' Can be changed to constexpr when compiled with C++17.','line_number':2389,'multiline':False]
['text':' "NaN" is not as nicely optimizable as "Infinity", but oh well.','line_number':2392,'multiline':False]
['text':' The complete string must have been parsed.','line_number':2411,'multiline':False]
['text':' Now convert it back to a string.','line_number':2417,'multiline':False]
['text':' Both strings must be equal for a canonical numeric index string.','line_number':2425,'multiline':False]
['text':' Directly perform IsInteger() check and encode negative and non-integer','line_number':2432,'multiline':False]
['text':' indices as OOB.','line_number':2433,'multiline':False]
['text':' See 9.4.5.2 [[HasProperty]], steps 3.b.iii and 3.b.v.','line_number':2434,'multiline':False]
['text':' See 9.4.5.3 [[DefineOwnProperty]], steps 3.b.i and 3.b.iii.','line_number':2435,'multiline':False]
['text':' See 9.4.5.8 IntegerIndexedElementGet, steps 5 and 8.','line_number':2436,'multiline':False]
['text':' See 9.4.5.9 IntegerIndexedElementSet, steps 6 and 9.','line_number':2437,'multiline':False]
['text':' Anything equals-or-larger than 2^53 is definitely OOB, encode it','line_number':2443,'multiline':False]
['text':' accordingly so that the cast to uint64_t is well defined.','line_number':2444,'multiline':False]
['text':' The string is an actual canonical numeric index.','line_number':2450,'multiline':False]
['text':' Check for "NaN", "Infinity", or "-Infinity".','line_number':2473,'multiline':False]
['text':' Don't allow leading zeros.','line_number':2485,'multiline':False]
['text':' The string may be of the form "0.xyz". The exponent form isn't possible','line_number':2487,'multiline':False]
['text':' when the string starts with "0".','line_number':2488,'multiline':False]
['text':' Take the slow path when the string has fractional parts or an exponent.','line_number':2500,'multiline':False]
['text':' Also take the slow path when the string is larger-or-equals 2^53.','line_number':2516,'multiline':False]
['text':' ES2021 draft rev b3f9b5089bcc3ddd8486379015cd11eb1427a5eb','line_number':2558,'multiline':False]
['text':' 9.4.5.3 [[DefineOwnProperty]], step 3.b.','line_number':2559,'multiline':False]
['text':' These are all substeps of 3.b.','line_number':2564,'multiline':False]
['text':' Step i.','line_number':2566,'multiline':False]
['text':' Step ii.','line_number':2574,'multiline':False]
['text':' Step iii.','line_number':2579,'multiline':False]
['text':' Step iv.','line_number':2584,'multiline':False]
['text':' Step v.','line_number':2589,'multiline':False]
['text':' Step vi.','line_number':2594,'multiline':False]
['text':' Step vii.','line_number':2612,'multiline':False]
['text':' JS Friend API ','line_number':2616,'multiline':True]
['text':'safe - caller sees isShared flag','line_number':2678,'multiline':True]
['text':'safe - caller sees isShared','line_number':2691,'multiline':True]
