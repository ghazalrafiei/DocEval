['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::Scalar::Type','line_number':13,'multiline':False]
['text':' Replace Float32 by double','line_number':67,'multiline':False]
['text':' Convert Float32 operands to doubles','line_number':173,'multiline':False]
['text':' Nothing to do for undefined and null, lowering handles all types.','line_number':191,'multiline':False]
['text':' Compare_BigInt_Int32 specialization is done for "BigInt <cmp> Int32".','line_number':201,'multiline':False]
['text':' Compare_BigInt_Double specialization is done for "BigInt <cmp> Double".','line_number':202,'multiline':False]
['text':' Compare_BigInt_String specialization is done for "BigInt <cmp> String".','line_number':203,'multiline':False]
['text':' Convert all inputs to the right input type','line_number':243,'multiline':False]
['text':' This policy works for both unary and binary bitwise operations.','line_number':327,'multiline':False]
['text':' Both operands must be int32.','line_number':341,'multiline':False]
['text':' Otherwise, input must be a double.','line_number':346,'multiline':False]
['text':' Power may be an int32 or a double. Integers receive a faster path.','line_number':351,'multiline':False]
['text':' MSign is specialized for int32 input types.','line_number':367,'multiline':False]
['text':' Otherwise convert input to double.','line_number':372,'multiline':False]
['text':' No need for boxing for these types.','line_number':635,'multiline':False]
['text':' No need for boxing, when we will convert.','line_number':638,'multiline':False]
['text':' No need for boxing, when we will convert.','line_number':645,'multiline':False]
['text':' Objects might be effectful. Symbols and BigInts give TypeError.','line_number':654,'multiline':False]
['text':' No need for boxing for these types.','line_number':681,'multiline':False]
['text':' No need for boxing when truncating.','line_number':684,'multiline':False]
['text':' Also no need for boxing when performing ToInteger, because','line_number':685,'multiline':False]
['text':' ToInteger(undefined) = ToInteger(NaN) = 0.','line_number':686,'multiline':False]
['text':' No need for boxing, when we will convert.','line_number':692,'multiline':False]
['text':' No need for boxing, when we will convert.','line_number':698,'multiline':False]
['text':' Objects might be effectful. Symbols and BigInts give TypeError.','line_number':710,'multiline':False]
['text':' No need for boxing for these types.','line_number':729,'multiline':False]
['text':' Any other types need to be boxed.','line_number':732,'multiline':False]
['text':' TODO remove the following line once 966957 has landed','line_number':752,'multiline':False]
['text':' No need for boxing for these types, because they are handled specially','line_number':772,'multiline':False]
['text':' when this instruction is lowered to LIR.','line_number':773,'multiline':False]
['text':' The first operand should be an object.','line_number':833,'multiline':False]
['text':' Box the index and value operands.','line_number':838,'multiline':False]
['text':' First, ensure the value is int32, boolean, double or Value.','line_number':867,'multiline':False]
['text':' The conversion is based on TypedArrayObjectTemplate::setElementTail.','line_number':868,'multiline':False]
['text':' The transpiler should have inserted MClampToUint8.','line_number':919,'multiline':False]
['text':' Lists of all TypePolicy specializations which are used by MIR Instructions.','line_number':992,'multiline':False]
['text':' Define for all used TypePolicy specialization, the definition for','line_number':1087,'multiline':False]
['text':' |TypePolicy::Data::thisTypePolicy|.  This function returns one constant','line_number':1088,'multiline':False]
['text':' instance of the TypePolicy which is shared among all MIR Instructions of the','line_number':1089,'multiline':False]
['text':' same type.','line_number':1090,'multiline':False]
['text':'','line_number':1091,'multiline':False]
['text':' This Macro use __VA_ARGS__ to account for commas of template parameters.','line_number':1092,'multiline':False]
['text':' namespace jit','line_number':1103,'multiline':False]
['text':' namespace js','line_number':1104,'multiline':False]
['text':' For extra-good measure in case an unqualified use is ever introduced.  (The','line_number':1108,'multiline':False]
['text':' main use in the macro below is explicitly qualified so as not to consult','line_number':1109,'multiline':False]
['text':' this scope and find this function.)','line_number':1110,'multiline':False]
['text':' namespace','line_number':1117,'multiline':False]
['text':' For each MIR Instruction, this macro define the |typePolicy| method which is','line_number':1119,'multiline':False]
['text':' using the |thisTypePolicy| method.  The |thisTypePolicy| method is either a','line_number':1120,'multiline':False]
['text':' member of the MIR Instruction, such as with MGetElementCache, a member','line_number':1121,'multiline':False]
['text':' inherited from the TypePolicy::Data structure, or a member inherited from','line_number':1122,'multiline':False]
['text':' NoTypePolicy if the MIR instruction has no type policy.','line_number':1123,'multiline':False]
