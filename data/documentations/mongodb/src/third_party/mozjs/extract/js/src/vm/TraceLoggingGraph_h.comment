['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' clang-format off','line_number':17,'multiline':False]
['text':'
 * The output of a tracelogging session is saved in /tmp/tl-data.json.
 * The format of that file is a JS array per tracelogger (=thread), with a map
 * containing:
 *  - dict:   Name of the file containing a json table with the log text.
 *            All other files only contain a index to this table when logging.
 *  - events: Name of the file containing a flat list of log events saved
 *            in binary format.
 *            (64bit: Time Stamp Counter, 32bit index to dict)
 *  - tree:   Name of the file containing the events with duration. The content
 *            is already in a tree data structure. This is also saved in a
 *            binary file.
 *  - treeFormat: The format used to encode the tree. By default "64,64,31,1,32".
 *                There are currently no other formats to save the tree.
 *     - 64,64,31,1,32 signifies how many bytes are used for the different
 *       parts of the tree.
 *       => 64 bits: Time Stamp Counter of start of event.
 *       => 64 bits: Time Stamp Counter of end of event.
 *       => 31 bits: Index to dict file containing the log text.
 *       =>  1 bit:  Boolean signifying if this entry has children.
 *                   When true, the child can be found just right after this
 *                   entry.
 *       => 32 bits: Containing the ID of the next event on the same depth
 *                   or 0 if there isn't an event on the same depth anymore.
 *
 *        /-> The position in the file. Id is this divided by size of entry.
 *        |   So in this case this would be 1 (192bits per entry).
 *        |                              /-> Indicates there are children. The
 *        |                              |   first child is located at current
 *        |                              |   ID + 1. So 1 + 1 in this case: 2.
 *        |                              |   Or 0x00180 in the tree file.
 *        |                              | /-> Next event on the same depth is
 *        |                              | |    located at 4. So 0x00300 in the
 *        |                              | |    tree file.
 *       0x0000C0: [start, end, dictId, 1, 4]
 *
 *
 *       Example:
 *                          0x0: [start, end, dictId, 1, 0]
 *                                        |
 *                      /----------------------------------\
 *                      |                                  |
 *       0xC0: [start, end, dictId, 0, 2]      0x180 [start, end, dictId, 1, 0]
 *                                                      |
 *                                  /----------------------------------\
 *                                  |                                  |
 *         0x240: [start, end, dictId, 0, 4]    0x300 [start, end, dictId, 0, 0]
 ','line_number':18,'multiline':True]
['text':' clang-format on','line_number':66,'multiline':False]
['text':' namespace js','line_number':71,'multiline':False]
['text':' File pointer to the "tl-data.json" file. (Explained above).','line_number':77,'multiline':False]
['text':' namespace js','line_number':114,'multiline':False]
['text':' This is needed so that we can write the data to the JSON writer from the TL','line_number':117,'multiline':False]
['text':' thread class.','line_number':118,'multiline':False]
['text':' The layout of the tree in memory and in the log file. Readable by JS','line_number':122,'multiline':False]
['text':' using TypedArrays.','line_number':123,'multiline':False]
['text':' Helper structure for keeping track of the current entries in','line_number':160,'multiline':False]
['text':' the tree. Pushed by `start(id)`, popped by `stop(id)`. The active flag','line_number':161,'multiline':False]
['text':' is used to know if a subtree doesn't need to get logged.','line_number':162,'multiline':False]
['text':' Link a textId with a particular text.','line_number':194,'multiline':False]
['text':' Create a tree out of all the given events.','line_number':199,'multiline':False]
['text':' Allow tree size to grow to 100MB.','line_number':203,'multiline':False]
['text':' Helper functions that convert a TreeEntry in different endianness','line_number':225,'multiline':False]
['text':' in place.','line_number':226,'multiline':False]
['text':' Helper functions to get/save a tree from file.','line_number':230,'multiline':False]
['text':' Return the first StackEntry that is active.','line_number':234,'multiline':False]
['text':' This contains the meat of startEvent, except the test for enough space,','line_number':237,'multiline':False]
['text':' the test if tracelogger is enabled and the timestamp computation.','line_number':238,'multiline':False]
['text':' Update functions that can adjust the items in the tree,','line_number':242,'multiline':False]
['text':' both in memory or already written to disk.','line_number':243,'multiline':False]
['text':' Flush the tree.','line_number':248,'multiline':False]
['text':' Stop a tree event.','line_number':251,'multiline':False]
['text':' Log an (non-tree) event.','line_number':255,'multiline':False]
['text':' Disable logging and forcefully report all not yet stopped tree events','line_number':258,'multiline':False]
['text':' as stopped.','line_number':259,'multiline':False]
['text':' TraceLoggingGraph_h ','line_number':263,'multiline':True]
