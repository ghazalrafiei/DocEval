['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':11,'multiline':False]
['text':' js::IsWindowProxy','line_number':12,'multiline':False]
['text':' JS::GetBuiltinClass','line_number':13,'multiline':False]
['text':'
   * Make the 'background-finalized-ness' of the wrapper the same as the
   * wrapped object, to allow transplanting between them.
   ','line_number':33,'multiline':True]
['text':' Should never be called if there's a prototype.','line_number':85,'multiline':False]
['text':' Should never be called if there's a prototype.','line_number':134,'multiline':False]
['text':' If this is a cross-compartment wrapper allocate it in the compartment's','line_number':278,'multiline':False]
['text':' first global. See Compartment::globalForNewCCW.','line_number':279,'multiline':False]
['text':' A cross-compartment wrapper should never wrap a CCW. We rely on this','line_number':299,'multiline':False]
['text':' in the wrapper handlers (we use AutoRealm on our return value, and','line_number':300,'multiline':False]
['text':' AutoRealm cannot be used with CCWs).','line_number':301,'multiline':False]
['text':' An incremental GC will eventually mark the targets of black wrappers','line_number':306,'multiline':False]
['text':' black but while it is in progress we can observe gray targets.','line_number':307,'multiline':False]
['text':' Unmark wrapper targets that should be black in case an incremental GC','line_number':314,'multiline':False]
['text':' hasn't marked them the correct color yet.','line_number':315,'multiline':False]
['text':' This can be called from when getting a weakmap key delegate() on a','line_number':329,'multiline':False]
['text':' wrapper whose referent has been moved while it is still unmarked.','line_number':330,'multiline':False]
['text':' Note: callers that care about WindowProxy unwrapping should use','line_number':373,'multiline':False]
['text':' CheckedUnwrapDynamic or UnwrapOneCheckedDynamic instead of this. We don't','line_number':374,'multiline':False]
['text':' unwrap WindowProxy here to preserve legacy behavior and for consistency','line_number':375,'multiline':False]
['text':' with CheckedUnwrapDynamic's default stopAtWindowProxy = true.','line_number':376,'multiline':False]
['text':' We should know who's asking.','line_number':403,'multiline':False]
['text':' Compartments. ','line_number':431,'multiline':True]
['text':' Allow wrapping outer window proxies.','line_number':435,'multiline':False]
['text':' The provenance of Debugger.DebuggeeWouldRun is the topmost locking','line_number':443,'multiline':False]
['text':' debugger compartment; it should not be copied around.','line_number':444,'multiline':False]
