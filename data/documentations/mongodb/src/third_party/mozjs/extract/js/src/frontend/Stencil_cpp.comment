['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' already_AddRefed','line_number':9,'multiline':False]
['text':' mozilla::KnownNotNull','line_number':10,'multiline':False]
['text':' mozilla::PodCopy','line_number':11,'multiline':False]
['text':' RefPtr','line_number':12,'multiline':False]
['text':' mozilla::ScopeExit','line_number':13,'multiline':False]
['text':' SprintfLiteral','line_number':14,'multiline':False]
['text':' LifoAlloc','line_number':16,'multiline':False]
['text':' ScopeIndex','line_number':17,'multiline':False]
['text':' CanLazilyParse, CompileGlobalScriptToStencil','line_number':18,'multiline':False]
['text':' ParseModuleToStencil','line_number':19,'multiline':False]
['text':' EmitScriptThingsVector','line_number':20,'multiline':False]
['text':' CompilationStencil, CompilationState, ExtensibleCompilationStencil, CompilationGCOutput, CompilationStencilMerger','line_number':21,'multiline':False]
['text':' EnvironmentCoordinate','line_number':22,'multiline':False]
['text':' gc::AllocKind','line_number':24,'multiline':False]
['text':' RootedAtom','line_number':25,'multiline':False]
['text':' TraceNullableRoot','line_number':26,'multiline':False]
['text':' JSNative','line_number':27,'multiline':False]
['text':' JS::Stencil','line_number':28,'multiline':False]
['text':' JS::AutoCheckCannotGC','line_number':29,'multiline':False]
['text':' Rooted','line_number':30,'multiline':False]
['text':' JS::TranscodeBuffer','line_number':31,'multiline':False]
['text':' ObjectValue','line_number':32,'multiline':False]
['text':' JS::WasmModule','line_number':33,'multiline':False]
['text':' BindingKind','line_number':34,'multiline':False]
['text':' GeneratorKind, FunctionAsyncKind','line_number':36,'multiline':False]
['text':' js::StartOffThreadParseScript','line_number':37,'multiline':False]
['text':' JSContext','line_number':39,'multiline':False]
['text':' JSFunction, GetFunctionPrototype, NewFunctionWithProto','line_number':40,'multiline':False]
['text':' JSObject, TenuredObject','line_number':41,'multiline':False]
['text':' js::JSONPrinter','line_number':42,'multiline':False]
['text':' BaseScript, JSScript','line_number':43,'multiline':False]
['text':' js::Fprinter','line_number':44,'multiline':False]
['text':' js::RegExpObject','line_number':45,'multiline':False]
['text':' Scope, *Scope, ScopeKindString, ScopeIter, ScopeKindIsCatch, BindingIter, GetScopeDataTrailingNames','line_number':46,'multiline':False]
['text':' ScopeKind','line_number':47,'multiline':False]
['text':' SetClonedSelfHostedFunctionName','line_number':48,'multiline':False]
['text':' ImmutableScriptFlagsEnum','line_number':49,'multiline':False]
['text':' JSAtom, js::CopyChars','line_number':50,'multiline':False]
['text':' XDRMode, XDRResult, XDREncoder','line_number':51,'multiline':False]
['text':' InstantiateAsmJS','line_number':52,'multiline':False]
['text':' wasm::Module','line_number':53,'multiline':False]
['text':' JSObject::enclosingEnvironment','line_number':55,'multiline':False]
['text':' JSFunction::create','line_number':56,'multiline':False]
['text':' If this eval is in response to Debugger.Frame.eval, we may have an','line_number':66,'multiline':False]
['text':' incomplete scope chain. In order to provide a better debugging experience,','line_number':67,'multiline':False]
['text':' we inspect the (optional) environment chain to determine it's enclosing','line_number':68,'multiline':False]
['text':' FunctionScope if there is one. If there is no such scope, we use the','line_number':69,'multiline':False]
['text':' orignal scope provided.','line_number':70,'multiline':False]
['text':'','line_number':71,'multiline':False]
['text':' NOTE: This is used to compute the ThisBinding kind and to allow access to','line_number':72,'multiline':False]
['text':'       private fields and methods, while other contextual information only','line_number':73,'multiline':False]
['text':'       uses the actual scope passed to the compile.','line_number':74,'multiline':False]
['text':' Arrow function inherit the "this" environment of the enclosing script,','line_number':105,'multiline':False]
['text':' so continue ignore them.','line_number':106,'multiline':False]
['text':' Found the effective "this" environment, so stop.','line_number':131,'multiline':False]
['text':' Inspect the scope-chain.','line_number':143,'multiline':False]
['text':' Arrow functions don't have their own `this` binding.','line_number':153,'multiline':False]
['text':' Derived class constructors (and their nested arrow functions and evals)','line_number':158,'multiline':False]
['text':' use ThisBinding::DerivedConstructor, which ensures TDZ checks happen','line_number':159,'multiline':False]
['text':' when accessing |this|.','line_number':160,'multiline':False]
['text':' This computes a general answer for the query "does the enclosing scope','line_number':208,'multiline':False]
['text':' have a function scope that needs a home object?", but it's only asserted','line_number':209,'multiline':False]
['text':' if the parser parses eval body that contains `super` that needs a home','line_number':210,'multiline':False]
['text':' object.','line_number':211,'multiline':False]
['text':' If the scope-chain is non-syntactic, we may still determine a more precise','line_number':230,'multiline':False]
['text':' effective-scope to use instead.','line_number':231,'multiline':False]
['text':' Look at target of any DebugEnvironmentProxy, but be sure to use','line_number':235,'multiline':False]
['text':' enclosingEnvironment() of the proxy itself.','line_number':236,'multiline':False]
['text':' Annex B.3.5 allows redeclaring simple (non-destructured)','line_number':269,'multiline':False]
['text':' catch parameters with var declarations.','line_number':270,'multiline':False]
['text':' Same lexical binding can appear multiple times across scopes.','line_number':332,'multiline':False]
['text':'','line_number':333,'multiline':False]
['text':' enclosingLexicalBindingCache_ map is used for detecting conflicting','line_number':334,'multiline':False]
['text':' `var` binding, and inner binding should be reported in the error.','line_number':335,'multiline':False]
['text':'','line_number':336,'multiline':False]
['text':' cacheEnclosingScopeBindingForEval iterates from inner scope, and','line_number':337,'multiline':False]
['text':' inner-most binding is added to the map first.','line_number':338,'multiline':False]
['text':'','line_number':339,'multiline':False]
['text':' Do not overwrite the value with outer bindings.','line_number':340,'multiline':False]
['text':' We compute an environment coordinate relative to the effective scope','line_number':374,'multiline':False]
['text':' environment. In order to safely consume these environment coordinates,','line_number':375,'multiline':False]
['text':' we re-map them to include the hops to get the to the effective scope:','line_number':376,'multiline':False]
['text':' see EmitterScope::lookupPrivate','line_number':377,'multiline':False]
['text':' Hops is only consumed by GetAliasedDebugVar, which uses this to','line_number':404,'multiline':False]
['text':' traverse the debug environment chain. See the [SMDOC] for Debug','line_number':405,'multiline':False]
['text':' Environment Chain, which explains why we don't check for','line_number':406,'multiline':False]
['text':' isEnvironment when computing hops here (basically, debug proxies','line_number':407,'multiline':False]
['text':' pretend all scopes have environments, even if they were actually','line_number':408,'multiline':False]
['text':' optimized out).','line_number':409,'multiline':False]
['text':' If found, the name must already be on the environment or an import,','line_number':419,'multiline':False]
['text':' or else there is a bug in the closed-over name analysis in the','line_number':420,'multiline':False]
['text':' Parser.','line_number':421,'multiline':False]
['text':' Check for duplicate positional formal parameters.','line_number':428,'multiline':False]
['text':' If not found, assume it's on the global or dynamically accessed.','line_number':443,'multiline':False]
['text':' static ','line_number':448,'multiline':True]
['text':' TODO-Stencil','line_number':458,'multiline':False]
['text':'   Here, we convert our name into a JSAtom*, and hard-crash on failure','line_number':459,'multiline':False]
['text':'   to allocate.  This conversion should not be required as we should be','line_number':460,'multiline':False]
['text':'   able to iterate up snapshotted scope chains that use parser atoms.','line_number':461,'multiline':False]
['text':'','line_number':462,'multiline':False]
['text':'   This will be fixed when the enclosing scopes are snapshotted.','line_number':463,'multiline':False]
['text':'','line_number':464,'multiline':False]
['text':'   See bug 1690277.','line_number':465,'multiline':False]
['text':' Check for duplicate positional formal parameters.','line_number':496,'multiline':False]
['text':' The name must already have been marked as closed','line_number':526,'multiline':False]
['text':' over. If this assertion is hit, there is a bug in the','line_number':527,'multiline':False]
['text':' name analysis.','line_number':528,'multiline':False]
['text':' This case is used only when delazifying a function inside','line_number':538,'multiline':False]
['text':' module.','line_number':539,'multiline':False]
['text':' Initial compilation of module doesn't have enlcosing scope.','line_number':540,'multiline':False]
['text':' Imports are on the environment but are indirect','line_number':549,'multiline':False]
['text':' bindings and must be accessed dynamically instead of','line_number':550,'multiline':False]
['text':' using an EnvironmentCoordinate.','line_number':551,'multiline':False]
['text':' As an optimization, if the eval doesn't have its own var','line_number':565,'multiline':False]
['text':' environment and its immediate enclosing scope is a global','line_number':566,'multiline':False]
['text':' scope, all accesses are global.','line_number':567,'multiline':False]
['text':' The locations returned by this method are only valid for','line_number':611,'multiline':False]
['text':' traversing debug environments.','line_number':612,'multiline':False]
['text':'','line_number':613,'multiline':False]
['text':' See the comment in cachePrivateFieldsForEval','line_number':614,'multiline':False]
['text':' ScopeStencil does not support WASM','line_number':764,'multiline':False]
['text':' Parser-generated functions with the same prototype will share the same shape','line_number':815,'multiline':False]
['text':' and group. By computing the correct values up front, we can save a lot of','line_number':816,'multiline':False]
['text':' time in the Object creation code. For simplicity, we focus only on plain','line_number':817,'multiline':False]
['text':' synchronous functions which are by far the most common.','line_number':818,'multiline':False]
['text':'','line_number':819,'multiline':False]
['text':' This bypasses the `NewObjectCache`, but callers are expected to retrieve a','line_number':820,'multiline':False]
['text':' valid group and shape from the appropriate de-duplication tables.','line_number':821,'multiline':False]
['text':'','line_number':822,'multiline':False]
['text':' NOTE: Keep this in sync with `js::NewFunctionWithProto`.','line_number':823,'multiline':False]
['text':' Determine the new function's proto. This must be done for singleton','line_number':876,'multiline':False]
['text':' functions.','line_number':877,'multiline':False]
['text':' Off-thread compilations do all their GC heap allocation, including the','line_number':935,'multiline':False]
['text':' SSO, in a temporary compartment. Hence, for the SSO to refer to the','line_number':936,'multiline':False]
['text':' gc-heap-allocated values in |options|, it would need cross-compartment','line_number':937,'multiline':False]
['text':' wrappers from the temporary compartment to the real compartment --- which','line_number':938,'multiline':False]
['text':' would then be inappropriate once we merged the temporary and real','line_number':939,'multiline':False]
['text':' compartments.','line_number':940,'multiline':False]
['text':'','line_number':941,'multiline':False]
['text':' Instead, we put off populating those SSO slots in off-thread compilations','line_number':942,'multiline':False]
['text':' until after we've merged compartments.','line_number':943,'multiline':False]
['text':' Instantiate ModuleObject. Further initialization is done after the associated','line_number':954,'multiline':False]
['text':' BaseScript is instantiated in InstantiateTopLevel.','line_number':955,'multiline':False]
['text':' Instantiate JSFunctions for each FunctionBox.','line_number':970,'multiline':False]
['text':' Most JSFunctions will be have the same Shape / Group so we can compute it','line_number':981,'multiline':False]
['text':' now to allow fast object creation. Generators / Async will use the slow','line_number':982,'multiline':False]
['text':' path instead.','line_number':983,'multiline':False]
['text':' nfixed = ','line_number':992,'multiline':True]
['text':' Plain functions can use a fast path.','line_number':1005,'multiline':False]
['text':' Self-hosted functions may have an canonical name that differs from the','line_number':1020,'multiline':False]
['text':' function name.  In that case, store this canonical name in an extended','line_number':1021,'multiline':False]
['text':' slot.','line_number':1022,'multiline':False]
['text':' Instantiate Scope for each ScopeStencil.','line_number':1035,'multiline':False]
['text':'','line_number':1036,'multiline':False]
['text':' This should be called after InstantiateFunctions, given FunctionScope needs','line_number':1037,'multiline':False]
['text':' associated JSFunction pointer, and also should be called before','line_number':1038,'multiline':False]
['text':' InstantiateScriptStencils, given JSScript needs Scope pointer in gc things.','line_number':1039,'multiline':False]
['text':' While allocating Scope object from ScopeStencil, Scope object for the','line_number':1043,'multiline':False]
['text':' enclosing Scope should already be allocated.','line_number':1044,'multiline':False]
['text':'','line_number':1045,'multiline':False]
['text':' Enclosing scope of ScopeStencil can be either ScopeStencil or Scope*','line_number':1046,'multiline':False]
['text':' pointer.','line_number':1047,'multiline':False]
['text':'','line_number':1048,'multiline':False]
['text':' If the enclosing scope is ScopeStencil, it's guaranteed to be earlier','line_number':1049,'multiline':False]
['text':' element in stencil.scopeData, because enclosing_ field holds','line_number':1050,'multiline':False]
['text':' index into it, and newly created ScopeStencil is pushed back to the vector.','line_number':1051,'multiline':False]
['text':'','line_number':1052,'multiline':False]
['text':' If the enclosing scope is Scope*, it's CompilationInput.enclosingScope.','line_number':1053,'multiline':False]
['text':' Instantiate js::BaseScripts from ScriptStencils for inner functions of the','line_number':1069,'multiline':False]
['text':' compilation. Note that standalone functions and functions being delazified','line_number':1070,'multiline':False]
['text':' are handled below with other top-levels.','line_number':1071,'multiline':False]
['text':' If the function was not referenced by enclosing script's bytecode, we','line_number':1085,'multiline':False]
['text':' do not generate a BaseScript for it. For example, `(function(){});`.','line_number':1086,'multiline':False]
['text':'','line_number':1087,'multiline':False]
['text':' `wasEmittedByEnclosingScript` is false also for standalone','line_number':1088,'multiline':False]
['text':' functions. They are handled in InstantiateTopLevel.','line_number':1089,'multiline':False]
['text':' Instantiate the Stencil for the top-level script of the compilation. This','line_number':1118,'multiline':False]
['text':' includes standalone functions and functions being delazified.','line_number':1119,'multiline':False]
['text':' Top-level asm.js does not generate a JSScript.','line_number':1126,'multiline':False]
['text':' Finish initializing the ModuleObject if needed.','line_number':1165,'multiline':False]
['text':' Off-thread compilation with parseGlobal will freeze the module object','line_number':1179,'multiline':False]
['text':' in GlobalHelperThreadState::finishSingleParseTask instead.','line_number':1180,'multiline':False]
['text':' When a function is first referenced by enclosing script's bytecode, we need','line_number':1191,'multiline':False]
['text':' to update it with information determined by the BytecodeEmitter. This applies','line_number':1192,'multiline':False]
['text':' to both initial and delazification parses. The functions being update may or','line_number':1193,'multiline':False]
['text':' may not have bytecode at this point.','line_number':1194,'multiline':False]
['text':' Non-lazy inner functions don't use the enclosingScope_ field.','line_number':1208,'multiline':False]
['text':' Apply updates from FunctionEmitter::emitLazy().','line_number':1211,'multiline':False]
['text':' Inferred and Guessed names are computed by BytecodeEmitter and so may','line_number':1218,'multiline':False]
['text':' need to be applied to existing JSFunctions during delazification.','line_number':1219,'multiline':False]
['text':' During initial parse we must link lazy-functions-inside-lazy-functions to','line_number':1239,'multiline':False]
['text':' their enclosing script.','line_number':1240,'multiline':False]
['text':' Check for the case that the inner function has the base script flag,','line_number':1274,'multiline':False]
['text':' but still doesn't have the actual base script pointer.','line_number':1275,'multiline':False]
['text':' `baseScript` method asserts the pointer itself, so no extra MOZ_ASSERT','line_number':1276,'multiline':False]
['text':' here.','line_number':1277,'multiline':False]
['text':' Some fields aren't used in delazification, given the target functions and','line_number':1288,'multiline':False]
['text':' scripts are already instantiated, but they still should match.','line_number':1289,'multiline':False]
['text':' Names are updated by UpdateInnerFunctions.','line_number':1300,'multiline':False]
['text':' Delazification shouldn't delazify inner scripts.','line_number':1314,'multiline':False]
['text':' DEBUG','line_number':1321,'multiline':False]
['text':' When delazifying, use the existing JSFunctions. The initial and delazifying','line_number':1323,'multiline':False]
['text':' parse are required to generate the same sequence of functions for lazy','line_number':1324,'multiline':False]
['text':' parsing to work at all.','line_number':1325,'multiline':False]
['text':' static ','line_number':1340,'multiline':True]
['text':' static ','line_number':1352,'multiline':True]
['text':' Distinguish between the initial (possibly lazy) compile and any subsequent','line_number':1356,'multiline':False]
['text':' delazification compiles. Delazification will update existing GC things.','line_number':1357,'multiline':False]
['text':' Phase 1: Instantate JSAtoms.','line_number':1361,'multiline':False]
['text':' Phase 2: Instantiate ScriptSourceObject, ModuleObject, JSFunctions.','line_number':1366,'multiline':False]
['text':' The enclosing script of a module is always the global scope. Fetch the','line_number':1373,'multiline':False]
['text':' scope of the current global and update input data.','line_number':1374,'multiline':False]
['text':' FunctionKey is used when caching to map a delazification stencil to a','line_number':1392,'multiline':False]
['text':' specific lazy script. It is not used by instantiation, but we should','line_number':1393,'multiline':False]
['text':' ensure it is correctly defined.','line_number':1394,'multiline':False]
['text':' Phase 3: Instantiate js::Scopes.','line_number':1406,'multiline':False]
['text':' Phase 4: Instantiate (inner) BaseScripts.','line_number':1411,'multiline':False]
['text':' Phase 5: Finish top-level handling','line_number':1418,'multiline':False]
['text':' !! Must be infallible from here forward !!','line_number':1423,'multiline':False]
['text':' Phase 6: Update lazy scripts.','line_number':1425,'multiline':False]
['text':' static ','line_number':1438,'multiline':True]
['text':' Reserve the `gcOutput` vectors.','line_number':1442,'multiline':False]
['text':' Borrow the vector content as span.','line_number':1527,'multiline':False]
['text':' Borrow the parser atoms as span.','line_number':1540,'multiline':False]
['text':' Borrow container.','line_number':1543,'multiline':False]
['text':' Share ref-counted data.','line_number':1546,'multiline':False]
['text':' Nothing to do.','line_number':1554,'multiline':False]
['text':' Nothing to do.','line_number':1563,'multiline':False]
['text':' If the ratio of scripts with bytecode is small, allocating the Vector','line_number':1601,'multiline':False]
['text':' storage with the number of all scripts isn't space-efficient.','line_number':1602,'multiline':False]
['text':' In that case use HashMap instead.','line_number':1603,'multiline':False]
['text':'','line_number':1604,'multiline':False]
['text':' In general, we expect either all scripts to contain bytecode (priviledge','line_number':1605,'multiline':False]
['text':' and self-hosted), or almost none to (eg standard lazy parsing output).','line_number':1606,'multiline':False]
['text':' Use a temporary container so that on OOM we do not break the stencil.','line_number':1663,'multiline':False]
['text':' Resized by SharedDataContainer::prepareStorageFor.','line_number':1694,'multiline':False]
['text':' Reserved by SharedDataContainer::prepareStorageFor.','line_number':1701,'multiline':False]
['text':' SharedDataContainer::prepareStorageFor allocates space for all scripts.','line_number':1719,'multiline':False]
['text':' SharedDataContainer::prepareStorageFor doesn't allocate space for','line_number':1725,'multiline':False]
['text':' delazification, and this can fail.','line_number':1726,'multiline':False]
['text':' DEBUG','line_number':1784,'multiline':False]
['text':' Copy scope names from `src` into `alloc`, and returns the allocated data.','line_number':1881,'multiline':False]
['text':' If CompilationStencil has no external dependency,','line_number':1911,'multiline':False]
['text':' steal LifoAlloc and perform shallow copy.','line_number':1912,'multiline':False]
['text':' If CompilationStencil has external dependency, peform deep copy.','line_number':1964,'multiline':False]
['text':' Regardless of whether CompilationStencil has external dependency or not,','line_number':2005,'multiline':False]
['text':' ParserAtoms should be interned, to populate internal HashMap.','line_number':2006,'multiline':False]
['text':' Assert we have no separators; if we have a separator then the algorithm','line_number':2045,'multiline':False]
['text':' used in BigInt::literalIsZero will be incorrect.','line_number':2046,'multiline':False]
['text':' This includes tiny WellKnownAtomId atoms, which is invalid.','line_number':2114,'multiline':False]
['text':' This includes tiny WellKnownAtomId atoms, which is invalid.','line_number':2181,'multiline':False]
['text':' defined(DEBUG) || defined(JS_JITSPEW)','line_number':2988,'multiline':False]
['text':' Destroy elements, without unreserving.','line_number':3062,'multiline':False]
['text':' scriptExtra is empty for delazification.','line_number':3162,'multiline':False]
['text':' There can be multiple ScriptStencilExtra with same extent if','line_number':3188,'multiline':False]
['text':' the function is parsed multiple times because of rewind for','line_number':3189,'multiline':False]
['text':' arrow function, and in that case the last one's index should be used.','line_number':3190,'multiline':False]
['text':' Overwrite with the last one.','line_number':3191,'multiline':False]
['text':'','line_number':3192,'multiline':False]
['text':' Already reserved above, but OOMTest can hit failure mode in','line_number':3193,'multiline':False]
['text':' HashTable::add.','line_number':3194,'multiline':False]
['text':' If this function was lazy, all inner functions should have been lazy.','line_number':3248,'multiline':False]
['text':' If the inner lazy function is skipped, gcThingsLength is empty.','line_number':3251,'multiline':False]
['text':' Both enclosing function and this function were lazy, and','line_number':3263,'multiline':False]
['text':' now enclosing function is non-lazy and this function is still lazy.','line_number':3264,'multiline':False]
['text':' The enclosing function was non-lazy and this function was lazy, and','line_number':3269,'multiline':False]
['text':' now this function is non-lazy.','line_number':3270,'multiline':False]
['text':' The enclosing function is still lazy.','line_number':3273,'multiline':False]
['text':' NOTE: Currently we don't delazify inner functions.','line_number':3292,'multiline':False]
['text':' DEBUG','line_number':3296,'multiline':False]
['text':' Other flags.','line_number':3299,'multiline':False]
['text':' NOTE: the top-level function of the delazification have','line_number':3302,'multiline':False]
['text':'       src.wasEmittedByEnclosingScript() == false, and that shouldn't','line_number':3303,'multiline':False]
['text':'       be copied.','line_number':3304,'multiline':False]
['text':' If the function was already non-lazy, it means the following happened.','line_number':3325,'multiline':False]
['text':'   1. this function is lazily parsed','line_number':3326,'multiline':False]
['text':'   2. incremental encoding is started','line_number':3327,'multiline':False]
['text':'   3. this function is delazified, and encoded','line_number':3328,'multiline':False]
['text':'   4. incremental encoding is finished','line_number':3329,'multiline':False]
['text':'   5. decoded and merged','line_number':3330,'multiline':False]
['text':'   6. incremental encoding is started','line_number':3331,'multiline':False]
['text':'      here, this function is encoded as non-lazy','line_number':3332,'multiline':False]
['text':'   7. this function is relazified','line_number':3333,'multiline':False]
['text':'   8. this function is delazified, and encoded','line_number':3334,'multiline':False]
['text':'   9. incremental encoding is finished','line_number':3335,'multiline':False]
['text':'  10. decoded and merged','line_number':3336,'multiline':False]
['text':'','line_number':3337,'multiline':False]
['text':' This shouldn't happen in wild, but can happen in testcase that uses','line_number':3338,'multiline':False]
['text':' JS::DecodeScriptAndStartIncrementalEncoding at steps 5-6','line_number':3339,'multiline':False]
['text':' (this may change in future).','line_number':3340,'multiline':False]
['text':'','line_number':3341,'multiline':False]
['text':' Encoding same function's delazification again shouldn't happen.','line_number':3342,'multiline':False]
['text':' If any failure happens, the initial stencil is left in the broken state.','line_number':3346,'multiline':False]
['text':' Immediately discard it.','line_number':3347,'multiline':False]
['text':' lazyFunctionEnclosingScopeIndex_ can be Nothing if this is','line_number':3352,'multiline':False]
['text':' top-level function.','line_number':3353,'multiline':False]
['text':' A map from ParserAtomIndex in delazification to TaggedParserAtomIndex','line_number':3358,'multiline':False]
['text':' in initial_.','line_number':3359,'multiline':False]
['text':' Map delazification's ScriptIndex to initial's ScriptIndex.','line_number':3378,'multiline':False]
['text':'','line_number':3379,'multiline':False]
['text':' The lazy function's gcthings list stores inner function's ScriptIndex.','line_number':3380,'multiline':False]
['text':' The n-th gcthing holds the ScriptIndex of the (n+1)-th script in','line_number':3381,'multiline':False]
['text':' delazification.','line_number':3382,'multiline':False]
['text':'','line_number':3383,'multiline':False]
['text':' NOTE: Currently we don't delazify inner functions.','line_number':3384,'multiline':False]
['text':' Map other delazification's indices into initial's indices.','line_number':3395,'multiline':False]
['text':' Append gcThingData, with mapping TaggedScriptThingIndex.','line_number':3412,'multiline':False]
['text':' Nothing to do.','line_number':3421,'multiline':False]
['text':' Nothing to do','line_number':3436,'multiline':False]
['text':' Append regExpData, with mapping RegExpStencil.atom_.','line_number':3440,'multiline':False]
['text':' Append bigIntData, with copying BigIntStencil.source_.','line_number':3451,'multiline':False]
['text':' Append objLiteralData, with copying ObjLiteralStencil.code_, and mapping','line_number':3464,'multiline':False]
['text':' TaggedParserAtomIndex in it.','line_number':3465,'multiline':False]
['text':' Append scopeData, with mapping indices in ScopeStencil fields.','line_number':3487,'multiline':False]
['text':' And append scopeNames, with copying the entire data, and mapping','line_number':3488,'multiline':False]
['text':' trailingNames.','line_number':3489,'multiline':False]
['text':' Inner functions should be in the same order as initial, beginning from','line_number':3506,'multiline':False]
['text':' the delazification's index.','line_number':3507,'multiline':False]
['text':' Add delazified function's shared data.','line_number':3540,'multiline':False]
['text':'','line_number':3541,'multiline':False]
['text':' NOTE: Currently we don't delazify inner functions.','line_number':3542,'multiline':False]
['text':' Update scriptData, with mapping indices in ScriptStencil fields.','line_number':3549,'multiline':False]
['text':' Function shouldn't be a module.','line_number':3558,'multiline':False]
['text':' asm.js shouldn't appear inside delazification, given asm.js forces','line_number':3561,'multiline':False]
['text':' full-parse.','line_number':3562,'multiline':False]
['text':' Convert the UniquePtr to a RefPtr and increment the count (to 1).','line_number':3592,'multiline':False]
['text':' Convert the UniquePtr to a RefPtr and increment the count (to 1).','line_number':3621,'multiline':False]
