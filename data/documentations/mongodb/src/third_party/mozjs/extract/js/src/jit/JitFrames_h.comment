['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' [SMDOC] JIT Frame Layout','line_number':31,'multiline':False]
['text':'','line_number':32,'multiline':False]
['text':' Frame Headers:','line_number':33,'multiline':False]
['text':'','line_number':34,'multiline':False]
['text':' In between every two frames lies a small header describing both frames. This','line_number':35,'multiline':False]
['text':' header, minimally, contains a returnAddress word and a descriptor word (See','line_number':36,'multiline':False]
['text':' CommonFrameLayout). The descriptor describes the size and type of the older','line_number':37,'multiline':False]
['text':' (caller) frame, whereas the returnAddress describes the address the newer','line_number':38,'multiline':False]
['text':' (callee) frame will return to.','line_number':39,'multiline':False]
['text':'','line_number':40,'multiline':False]
['text':' Special Frames:','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' Two special frame types exist:','line_number':43,'multiline':False]
['text':' - Entry frames begin a JitActivation, and therefore there is exactly one','line_number':44,'multiline':False]
['text':'   per activation of EnterJit or EnterBaseline. These reuse JitFrameLayout.','line_number':45,'multiline':False]
['text':' - Exit frames are necessary to leave JIT code and enter C++, and thus,','line_number':46,'multiline':False]
['text':'   C++ code will always begin iterating from the topmost exit frame.','line_number':47,'multiline':False]
['text':'','line_number':48,'multiline':False]
['text':' Approximate Layout:','line_number':49,'multiline':False]
['text':'','line_number':50,'multiline':False]
['text':' The layout of an Ion frame on the C stack is roughly:','line_number':51,'multiline':False]
['text':'      argN     _','line_number':52,'multiline':False]
['text':'      ...       \ - These are jsvals','line_number':53,'multiline':False]
['text':'      arg0      /','line_number':54,'multiline':False]
['text':'   -3 this    _/','line_number':55,'multiline':False]
['text':'   -2 callee','line_number':56,'multiline':False]
['text':'   -1 descriptor','line_number':57,'multiline':False]
['text':'    0 returnAddress','line_number':58,'multiline':False]
['text':'   .. locals ..','line_number':59,'multiline':False]
['text':' [SMDOC] Frame Descriptor Layout','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' A frame descriptor word is organized into four sections:','line_number':63,'multiline':False]
['text':'','line_number':64,'multiline':False]
['text':'    high bits: [ frame size |','line_number':65,'multiline':False]
['text':'                 has-cached-saved-frame bit |','line_number':66,'multiline':False]
['text':'/                frame header size|','line_number':67,'multiline':False]
['text':'    low bits:    frame type ]','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' * Frame Size: Size of caller frame','line_number':70,'multiline':False]
['text':' * Has-cache-saved-frame bit: Used to power the LiveSavedFrameCache','line_number':71,'multiline':False]
['text':'   optimization. See the comment in Activation.h','line_number':72,'multiline':False]
['text':' * Frame header size: The number of words in a frame header (see','line_number':73,'multiline':False]
['text':'   FrameLayout::Size())','line_number':74,'multiline':False]
['text':' * Frame Type: BaselineJS, Exit, etc. (jit::FrameType)','line_number':75,'multiline':False]
['text':'','line_number':76,'multiline':False]
['text':' cached saved frame bit ','line_number':87,'multiline':True]
['text':' Ion frames have a few important numbers associated with them:','line_number':91,'multiline':False]
['text':'      Local depth:    The number of bytes required to spill local variables.','line_number':92,'multiline':False]
['text':'      Argument depth: The number of bytes required to push arguments and make','line_number':93,'multiline':False]
['text':'                      a function call.','line_number':94,'multiline':False]
['text':'      Slack:          A frame may temporarily use extra stack to resolve','line_number':95,'multiline':False]
['text':'                      cycles.','line_number':96,'multiline':False]
['text':'','line_number':97,'multiline':False]
['text':' The (local + argument) depth determines the "fixed frame size". The fixed','line_number':98,'multiline':False]
['text':' frame size is the distance between the stack pointer and the frame header.','line_number':99,'multiline':False]
['text':' Thus, fixed >= (local + argument).','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' In order to compress guards, we create shared jump tables that recover the','line_number':102,'multiline':False]
['text':' script from the stack and recover a snapshot pointer based on which jump was','line_number':103,'multiline':False]
['text':' taken. Thus, we create a jump table for each fixed frame size.','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':' Jump tables are big. To control the amount of jump tables we generate, each','line_number':106,'multiline':False]
['text':' platform chooses how to segregate stack size classes based on its','line_number':107,'multiline':False]
['text':' architecture.','line_number':108,'multiline':False]
['text':'','line_number':109,'multiline':False]
['text':' On some architectures, these jump tables are not used at all, or frame','line_number':110,'multiline':False]
['text':' size segregation is not needed. Thus, there is an option for a frame to not','line_number':111,'multiline':False]
['text':' have any frame size class, and to be totally dynamic.','line_number':112,'multiline':False]
['text':' These functions are implemented in specific CodeGenerator-* files.','line_number':130,'multiline':False]
['text':' Data needed to recover from an exception.','line_number':150,'multiline':False]
['text':' Value to push when resuming into a |finally| block.','line_number':165,'multiline':False]
['text':' Also used by Wasm to send the exception object to the throw stub.','line_number':166,'multiline':False]
['text':' Returns the JSScript associated with the topmost JIT frame.','line_number':196,'multiline':False]
['text':' This is NO-OP on non-MIPS platforms.','line_number':203,'multiline':False]
['text':' Layout of the frame prefix. This assumes the stack architecture grows down.','line_number':208,'multiline':False]
['text':' If this is ever not the case, we'll have to refactor.','line_number':209,'multiline':False]
['text':' Computes a reference to a stack or argument slot, where a slot is a','line_number':276,'multiline':False]
['text':' distance from the base frame pointer, as would be used for LStackSlot','line_number':277,'multiline':False]
['text':' or LArgument.','line_number':278,'multiline':False]
['text':' Pointer to root the stub's JitCode.','line_number':296,'multiline':False]
['text':' GC related data used to keep alive data surrounding the Exit frame.','line_number':320,'multiline':False]
['text':' Stores the ExitFrameType or, for ExitFrameType::VMFunction, the','line_number':322,'multiline':False]
['text':' VMFunctionData*.','line_number':323,'multiline':False]
['text':' See: MacroAssemblerMIPSCompat::alignStackPointer()','line_number':345,'multiline':False]
['text':' This is NO-OP on non-MIPS platforms.','line_number':352,'multiline':False]
['text':' This should only be called for function()->outParam == Type_Handle','line_number':357,'multiline':False]
['text':' this is the frame layout when we are exiting ion code, and about to enter','line_number':370,'multiline':False]
['text':' platform ABI code','line_number':371,'multiline':False]
['text':' argBase targets the point which precedes the exit frame. Arguments of VM','line_number':386,'multiline':False]
['text':' each wrapper are pushed before the exit frame.  This correspond exactly','line_number':387,'multiline':False]
['text':' to the value of the argBase register of the generateVMWrapper function.','line_number':388,'multiline':False]
['text':' See the various exit frame layouts below.','line_number':399,'multiline':False]
['text':' Cannot inherit implementation since we need to extend the top of','line_number':411,'multiline':False]
['text':' ExitFrameLayout.','line_number':412,'multiline':False]
['text':' only to silence a clang warning about unused private fields','line_number':414,'multiline':False]
['text':' We need to split the Value into 2 fields of 32 bits, otherwise the C++','line_number':419,'multiline':False]
['text':' compiler may add some padding between the fields.','line_number':420,'multiline':False]
['text':' only to silence a clang warning about unused private fields','line_number':453,'multiline':False]
['text':' pointer to root the stub's JitCode','line_number':457,'multiline':False]
['text':' We need to split the Value into 2 fields of 32 bits, otherwise the C++','line_number':462,'multiline':False]
['text':' compiler may add some padding between the fields.','line_number':463,'multiline':False]
['text':' Split Value for |this| and args above.','line_number':467,'multiline':False]
['text':' The frame accounts for the callee/result and |this|, so we only need','line_number':475,'multiline':False]
['text':' args.','line_number':476,'multiline':False]
['text':' ProxyGetProperty(JSContext* cx, HandleObject proxy, HandleId id,','line_number':492,'multiline':False]
['text':'                  MutableHandleValue vp)','line_number':493,'multiline':False]
['text':' ProxyCallProperty(JSContext* cx, HandleObject proxy, HandleId id,','line_number':494,'multiline':False]
['text':'                   MutableHandleValue vp)','line_number':495,'multiline':False]
['text':' ProxySetProperty(JSContext* cx, HandleObject proxy, HandleId id,','line_number':496,'multiline':False]
['text':'                  MutableHandleValue vp, bool strict)','line_number':497,'multiline':False]
['text':' only to silence a clang warning about unused private fields','line_number':499,'multiline':False]
['text':' The proxy object.','line_number':503,'multiline':False]
['text':' id for HandleId','line_number':506,'multiline':False]
['text':' space for MutableHandleValue result','line_number':509,'multiline':False]
['text':' use two uint32_t so compiler doesn't align.','line_number':510,'multiline':False]
['text':' pointer to root the stub's JitCode','line_number':514,'multiline':False]
['text':' only to silence a clang warning about unused private fields','line_number':533,'multiline':False]
['text':' We need to split the Value into 2 fields of 32 bits, otherwise the C++','line_number':538,'multiline':False]
['text':' compiler may add some padding between the fields.','line_number':539,'multiline':False]
['text':' only to silence a clang warning about unused private fields','line_number':562,'multiline':False]
['text':' This must be the last thing pushed, so as to stay common with','line_number':565,'multiline':False]
['text':' IonDOMExitFrameLayout.','line_number':566,'multiline':False]
['text':' We need to split the Value into 2 fields of 32 bits, otherwise the C++','line_number':571,'multiline':False]
['text':' compiler may add some padding between the fields.','line_number':572,'multiline':False]
['text':' The code in visitCallDOMNative depends on this static assert holding','line_number':588,'multiline':False]
['text':' Cannot inherit implementation since we need to extend the top of','line_number':622,'multiline':False]
['text':' ExitFrameLayout.','line_number':623,'multiline':False]
['text':' silence clang warning about unused private fields','line_number':625,'multiline':False]
['text':' silence clang warning about unused private fields','line_number':668,'multiline':False]
['text':' clang-format off ','line_number':679,'multiline':True]
['text':' Info on the stack','line_number':680,'multiline':False]
['text':'','line_number':681,'multiline':False]
['text':' --------------------','line_number':682,'multiline':False]
['text':' |JitStubFrameLayout|','line_number':683,'multiline':False]
['text':' +------------------+','line_number':684,'multiline':False]
['text':' | - Descriptor     | => Marks end of FrameType::IonJS','line_number':685,'multiline':False]
['text':' | - returnaddres   |','line_number':686,'multiline':False]
['text':' +------------------+','line_number':687,'multiline':False]
['text':' | - StubPtr        | => First thing pushed in a stub only when the stub will do','line_number':688,'multiline':False]
['text':' --------------------    a vmcall. Else we cannot have JitStubFrame. But technically','line_number':689,'multiline':False]
['text':'                         not a member of the layout.','line_number':690,'multiline':False]
['text':' clang-format on ','line_number':691,'multiline':True]
['text':' clang-format off ','line_number':705,'multiline':True]
['text':' Info on the stack','line_number':706,'multiline':False]
['text':'','line_number':707,'multiline':False]
['text':' -------------------------','line_number':708,'multiline':False]
['text':' |BaselineStubFrameLayout|','line_number':709,'multiline':False]
['text':' +-----------------------+','line_number':710,'multiline':False]
['text':' | - Descriptor          | => Marks end of FrameType::BaselineJS','line_number':711,'multiline':False]
['text':' | - returnaddres        |','line_number':712,'multiline':False]
['text':' +-----------------------+','line_number':713,'multiline':False]
['text':' | - StubPtr             | => First thing pushed in a stub only when the stub will do','line_number':714,'multiline':False]
['text':' +-----------------------+    a vmcall. Else we cannot have BaselineStubFrame.','line_number':715,'multiline':False]
['text':' | - FramePtr            | => Baseline stubs also need to push the frame ptr when doing','line_number':716,'multiline':False]
['text':' -------------------------    a vmcall.','line_number':717,'multiline':False]
['text':'                              Technically these last two variables are not part of the','line_number':718,'multiline':False]
['text':'                              layout.','line_number':719,'multiline':False]
['text':' clang-format on ','line_number':720,'multiline':True]
['text':' An invalidation bailout stack is at the stack pointer for the callee frame.','line_number':740,'multiline':False]
['text':' Baseline requires one slot for this/argument type checks.','line_number':768,'multiline':False]
['text':' namespace jit ','line_number':771,'multiline':True]
['text':' namespace js ','line_number':772,'multiline':True]
['text':' jit_JitFrames_h ','line_number':774,'multiline':True]
