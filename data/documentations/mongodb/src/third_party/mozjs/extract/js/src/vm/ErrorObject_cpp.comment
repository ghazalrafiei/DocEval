['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sw=2 et tw=80:
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':35,'multiline':False]
['text':' js::AutoCheckRecursionLimit','line_number':36,'multiline':False]
['text':' js::ValueToSource','line_number':55,'multiline':False]
['text':' js_*_str','line_number':56,'multiline':False]
['text':' Error.prototype and NativeError.prototype have own .message and .name','line_number':98,'multiline':False]
['text':' properties.','line_number':99,'multiline':False]
['text':' Only Error.prototype has .stack!','line_number':105,'multiline':False]
['text':' Only used for classes that could be a Wasm trap. Classes that use this','line_number':170,'multiline':False]
['text':' macro should be kept in sync with the exception types that mightBeWasmTrap()','line_number':171,'multiline':False]
['text':' will return true for.','line_number':172,'multiline':False]
['text':' addProperty','line_number':179,'multiline':False]
['text':' delProperty','line_number':180,'multiline':False]
['text':' enumerate','line_number':181,'multiline':False]
['text':' newEnumerate','line_number':182,'multiline':False]
['text':' resolve','line_number':183,'multiline':False]
['text':' mayResolve','line_number':184,'multiline':False]
['text':' finalize','line_number':185,'multiline':False]
['text':' call','line_number':186,'multiline':False]
['text':' hasInstance','line_number':187,'multiline':False]
['text':' construct','line_number':188,'multiline':False]
['text':' trace','line_number':189,'multiline':False]
['text':' These Error subclasses are not accessible via the global object:','line_number':199,'multiline':False]
['text':' Bug 1560019: This allocation is not currently tracked.','line_number':207,'multiline':False]
['text':' Compute the error message, if any.','line_number':215,'multiline':False]
['text':' Don't interpret the two parameters following the message parameter as the','line_number':224,'multiline':False]
['text':' non-standard fileName and lineNumber arguments when we have an options','line_number':225,'multiline':False]
['text':' object argument.','line_number':226,'multiline':False]
['text':' Find the scripted caller, but only ones we're allowed to know about.','line_number':247,'multiline':False]
['text':' ECMA ed. 3, 15.11.1 requires Error, etc., to construct even when','line_number':291,'multiline':False]
['text':' called as functions, without operator new.  But as we do not give','line_number':292,'multiline':False]
['text':' each constructor a distinct JSClass, we must get the exception type','line_number':293,'multiline':False]
['text':' ourselves.','line_number':294,'multiline':False]
['text':' ES6 19.5.1.1 mandates the .prototype lookup happens before the toString','line_number':304,'multiline':False]
['text':' AggregateError ( errors, message )','line_number':346,'multiline':False]
['text':' Steps 1-2. (9.1.13 OrdinaryCreateFromConstructor, steps 1-2).','line_number':355,'multiline':False]
['text':' TypeError anyway, but this gives a better error message.','line_number':362,'multiline':False]
['text':' 9.1.13 OrdinaryCreateFromConstructor, step 3.','line_number':367,'multiline':False]
['text':' Step 3.','line_number':368,'multiline':False]
['text':' Step 4.','line_number':375,'multiline':False]
['text':' Step 5.','line_number':382,'multiline':False]
['text':' Step 6.','line_number':388,'multiline':False]
['text':' static ','line_number':393,'multiline':True]
['text':' static ','line_number':412,'multiline':True]
['text':' static ','line_number':451,'multiline':True]
['text':' static ','line_number':477,'multiline':True]
['text':' Null out early in case of error, for exn_finalize's sake.','line_number':488,'multiline':False]
['text':' The .message property isn't part of the initial shape because it's','line_number':495,'multiline':False]
['text':' present in some error objects -- |Error.prototype|, |new Error("f")|,','line_number':496,'multiline':False]
['text':' |new Error("")| -- but not in others -- |new Error(undefined)|,','line_number':497,'multiline':False]
['text':' |new Error()|.','line_number':498,'multiline':False]
['text':' Similar to the .message property, .cause is present only in some error','line_number':508,'multiline':False]
['text':' objects -- |new Error("f", {cause: cause})| -- but not in other --','line_number':509,'multiline':False]
['text':' |Error.prototype|, |new Error()|, |new Error("f")|.','line_number':510,'multiline':False]
['text':' static ','line_number':556,'multiline':True]
['text':' = nullptr ','line_number':564,'multiline':True]
['text':' We build an error report on the stack and then use CopyErrorReport to do','line_number':600,'multiline':False]
['text':' the nitty-gritty malloc stuff.','line_number':601,'multiline':False]
['text':' Type.','line_number':604,'multiline':False]
['text':' Filename.','line_number':608,'multiline':False]
['text':' Coordinates.','line_number':615,'multiline':False]
['text':' Message. Note that |new Error()| will result in an undefined |message|','line_number':620,'multiline':False]
['text':' slot, so we need to explicitly substitute the empty string in that case.','line_number':621,'multiline':False]
['text':' Cache and return.','line_number':633,'multiline':False]
['text':' Walk up the prototype chain until we find an error object instance or','line_number':644,'multiline':False]
['text':' prototype object. This allows code like:','line_number':645,'multiline':False]
['text':'  Object.create(Error.prototype).stack','line_number':646,'multiline':False]
['text':' or','line_number':647,'multiline':False]
['text':'   function NYI() { }','line_number':648,'multiline':False]
['text':'   NYI.prototype = new Error;','line_number':649,'multiline':False]
['text':'   (new NYI).stack','line_number':650,'multiline':False]
['text':' to continue returning stacks that are useless, but at least don't throw.','line_number':651,'multiline':False]
['text':' We walked the whole prototype chain and did not find an Error','line_number':666,'multiline':False]
['text':' object.','line_number':667,'multiline':False]
['text':' static ','line_number':687,'multiline':True]
['text':' We accept any object here, because of poor-man's subclassing of Error.','line_number':690,'multiline':False]
['text':' static ','line_number':694,'multiline':True]
['text':' Do frame filtering based on the ErrorObject's principals. This ensures we','line_number':708,'multiline':False]
['text':' don't see chrome frames when chrome code accesses .stack over Xrays.','line_number':709,'multiline':False]
['text':' When emulating V8 stack frames, we also need to prepend the','line_number':719,'multiline':False]
['text':' stringified Error to the stack string.','line_number':720,'multiline':False]
['text':' static ','line_number':741,'multiline':True]
['text':' We accept any object here, because of poor-man's subclassing of Error.','line_number':744,'multiline':False]
['text':' static ','line_number':748,'multiline':True]
['text':' We have a line, but no filename, add empty string ','line_number':810,'multiline':True]
['text':'
 * Return a string that may eval to something similar to the original object.
 ','line_number':831,'multiline':True]
