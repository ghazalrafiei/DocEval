['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * Implementation details of the atoms table.
 ','line_number':7,'multiline':True]
['text':' std::{enable_if_t,is_const_v}','line_number':14,'multiline':False]
['text':'
 * The atoms table is a mapping from strings to JSAtoms that supports concurrent
 * access and incremental sweeping.
 *
 * The table is partitioned based on the key into multiple sub-tables. Each
 * sub-table is protected by a lock to ensure safety when accessed by helper
 * threads. Concurrent access improves performance of off-thread parsing which
 * frequently creates large numbers of atoms. Locking is only required when
 * off-thread parsing is running.
 ','line_number':20,'multiline':True]
['text':' Take all atoms table locks to allow iterating over cells in the atoms zone.','line_number':33,'multiline':False]
['text':' This is a tagged pointer to an atom that duplicates the atom's pinned flag so','line_number':42,'multiline':False]
['text':' that we don't have to check the atom itself when marking pinned atoms (there','line_number':43,'multiline':False]
['text':' can be a great many atoms). See bug 1445196.','line_number':44,'multiline':False]
['text':'
   * Non-branching code sequence. Note that the const_cast is safe because
   * the hash function doesn't consider the tag to be a portion of the key.
   ','line_number':60,'multiline':True]
['text':' This class is a wrapper for AtomSet that is used to ensure the AtomSet is','line_number':93,'multiline':False]
['text':' not modified. It should only expose read-only methods from AtomSet.','line_number':94,'multiline':False]
['text':' Note however that the atoms within the table can be marked during GC.','line_number':95,'multiline':False]
['text':' This constructor takes ownership of the passed-in AtomSet.','line_number':100,'multiline':False]
['text':' Use a low initial capacity for atom hash tables to avoid penalizing','line_number':121,'multiline':False]
['text':' runtimes which create a small number of atoms.','line_number':122,'multiline':False]
['text':' A single partition, representing a subset of the atoms in the table.','line_number':125,'multiline':False]
['text':' Lock that must be held to access this set.','line_number':130,'multiline':False]
['text':' The atoms in this set.','line_number':133,'multiline':False]
['text':' Set of atoms added while the |atoms| set is being swept.','line_number':136,'multiline':False]
['text':' An iterator used for sweeping atoms incrementally.','line_number':149,'multiline':False]
['text':' Sweep all atoms non-incrementally.','line_number':192,'multiline':False]
['text':' Sweep some atoms incrementally and return whether we finished.','line_number':197,'multiline':False]
['text':' Map a key to a partition based on its hash.','line_number':207,'multiline':False]
['text':' namespace js','line_number':220,'multiline':False]
['text':' vm_AtomsTable_h ','line_number':222,'multiline':True]
