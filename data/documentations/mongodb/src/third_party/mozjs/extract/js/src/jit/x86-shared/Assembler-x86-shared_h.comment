['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Do not reference ScratchFloat32Reg_ directly, use ScratchFloat32Scope','line_number':27,'multiline':False]
['text':' instead.','line_number':28,'multiline':False]
['text':' Do not reference ScratchDoubleReg_ directly, use ScratchDoubleScope instead.','line_number':34,'multiline':False]
['text':' Used as a Register::Encoding and a FloatRegister::Encoding.','line_number':51,'multiline':False]
['text':' We don't use all 8 bits, of course, but GCC complains if the size of','line_number':54,'multiline':False]
['text':' this field is smaller than the size of Register::Encoding.','line_number':55,'multiline':False]
['text':' As the SSE's were introduced in order, the presence of a later SSE implies','line_number':170,'multiline':False]
['text':' the presence of an earlier SSE. For example, SSE4_2 support implies SSE2','line_number':171,'multiline':False]
['text':' support.','line_number':172,'multiline':False]
['text':' The flags can become set at startup when we JIT non-JS code eagerly; thus','line_number':216,'multiline':False]
['text':' we reset the flags before setting any flags explicitly during testing, so','line_number':217,'multiline':False]
['text':' that the flags can be in a consistent state.','line_number':218,'multiline':False]
['text':' Raw GC pointer relocations and Value relocations both end up in','line_number':286,'multiline':False]
['text':' Assembler::TraceDataRelocations.','line_number':287,'multiline':False]
['text':' If this bit is set, the vucomisd operands have to be inverted.','line_number':339,'multiline':False]
['text':' Bit set when a DoubleCondition does not map to a single x86 condition.','line_number':342,'multiline':False]
['text':' The macro assembler has to special-case these conditions.','line_number':343,'multiline':False]
['text':' These conditions will only evaluate to true if the comparison is ordered','line_number':349,'multiline':False]
['text':' - i.e. neither operand is NaN.','line_number':350,'multiline':False]
['text':' If either operand is NaN, these conditions always evaluate to true.','line_number':358,'multiline':False]
['text':' If the primary condition returned by ConditionFromDoubleCondition doesn't','line_number':371,'multiline':False]
['text':' handle NaNs properly, return NaN_IsFalse if the comparison should be','line_number':372,'multiline':False]
['text':' overridden to return false on NaN, NaN_IsTrue if it should be overridden','line_number':373,'multiline':False]
['text':' to return true on NaN, or NaN_HandledByCond if no secondary check is','line_number':374,'multiline':False]
['text':' needed.','line_number':375,'multiline':False]
['text':' DoubleConditionBits should not interfere with x86 condition codes.','line_number':401,'multiline':False]
['text':' Return the primary condition to test. Some primary conditions may not','line_number':413,'multiline':False]
['text':' handle NaNs properly and may therefore require a secondary condition.','line_number':414,'multiline':False]
['text':' Use NaNCondFromDoubleCondition to determine what else is needed.','line_number':415,'multiline':False]
['text':' No-op on this platform','line_number':424,'multiline':False]
['text':' Size of the instruction stream, in bytes.','line_number':442,'multiline':False]
['text':' Size of the jump relocation table, in bytes.','line_number':444,'multiline':False]
['text':' Size of the data table, in bytes.','line_number':447,'multiline':False]
['text':' Use -1 as dummy value. This will be patched after codegen.','line_number':456,'multiline':False]
['text':' Eventually vmovapd should be overloaded to support loads and','line_number':559,'multiline':False]
['text':' stores too.','line_number':560,'multiline':False]
['text':' Note special semantics of this - does not clobber high bits of destination.','line_number':662,'multiline':False]
['text':' Note special semantics of this - does not clobber high bits of destination.','line_number':704,'multiline':False]
['text':' The jump can be immediately encoded to the correct destination.','line_number':936,'multiline':False]
['text':' Thread the jump list through the unpatched jump targets.','line_number':940,'multiline':False]
['text':' The jump can be immediately encoded to the correct destination.','line_number':952,'multiline':False]
['text':' Thread the jump list through the unpatched jump targets.','line_number':955,'multiline':False]
['text':' Comparison of EAX against the address given by a Label.','line_number':966,'multiline':False]
['text':' The jump can be immediately patched to the correct destination.','line_number':970,'multiline':False]
['text':' Thread the jump list through the unpatched jump targets.','line_number':973,'multiline':False]
['text':' Re-routes pending jumps to a new label.','line_number':1023,'multiline':False]
['text':' The jump can be immediately patched to the correct destination.','line_number':1034,'multiline':False]
['text':' Thread the jump list through the unpatched jump targets.','line_number':1037,'multiline':False]
['text':' Remove the size of the return address which is included in the frame.','line_number':1060,'multiline':False]
['text':' This is for patching during code generation, not after.','line_number':1106,'multiline':False]
['text':' Consumes eax as the other argument','line_number':1682,'multiline':False]
['text':' and clobbers edx, as result is in edx:eax','line_number':1683,'multiline':False]
['text':' Note, lock_addl(imm, op) is used for a memory barrier on non-SSE2 systems,','line_number':1998,'multiline':False]
['text':' among other things.  Do not optimize, replace by XADDL, or similar.','line_number':1999,'multiline':False]
['text':' Zero-extend byte to 32-bit integer.','line_number':2202,'multiline':False]
['text':' Negates bits of dest and then applies AND','line_number':3774,'multiline':False]
['text':' Note that the sourceLane bits are ignored in the case of a source','line_number':4281,'multiline':False]
['text':' memory operand, and the source is the given 32-bits memory location.','line_number':4282,'multiline':False]
['text':' Patching.','line_number':4591,'multiline':False]
['text':' Write a relative call at the start location |dataLabel|.','line_number':4598,'multiline':False]
['text':' Note that this DOES NOT patch data that comes before |label|.','line_number':4599,'multiline':False]
['text':' The pointer given is a pointer to *after* the data.','line_number':4616,'multiline':False]
['text':' Toggle a jmp or cmp emitted by toggledJump().','line_number':4633,'multiline':False]
['text':' CMP','line_number':4646,'multiline':False]
['text':' CALL','line_number':4647,'multiline':False]
['text':' namespace jit','line_number':4655,'multiline':False]
['text':' namespace js','line_number':4656,'multiline':False]
['text':' jit_x86_shared_Assembler_x86_shared_h ','line_number':4658,'multiline':True]
