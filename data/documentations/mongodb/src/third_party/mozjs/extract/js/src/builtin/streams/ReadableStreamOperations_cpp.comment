['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' General readable stream abstract operations. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT{,_IF}','line_number':11,'multiline':False]
['text':' js::NewDenseFullyAllocatedArray','line_number':13,'multiline':False]
['text':' js::RejectPromiseWithPendingError','line_number':14,'multiline':False]
['text':' js::PipeToState','line_number':15,'multiline':False]
['text':' js::ReadableStream','line_number':16,'multiline':False]
['text':' js::ReadableStream{,Default}Controller','line_number':17,'multiline':False]
['text':' js::ReadableStreamDefaultController{Close,Enqueue}, js::ReadableStreamControllerError, js::SourceAlgorithms','line_number':18,'multiline':False]
['text':' js::ReadableStreamCancel','line_number':19,'multiline':False]
['text':' js::CreateReadableStreamDefaultReader, js::ForAuthorCodeBool, js::ReadableStream{,Default}Reader, js::ReadableStreamDefaultReaderRead','line_number':20,'multiline':False]
['text':' js::TeeState','line_number':21,'multiline':False]
['text':' JS::CallArgs{,FromVp}','line_number':22,'multiline':False]
['text':' JS::CallOriginalPromiseThen, JS::AddPromiseReactions','line_number':23,'multiline':False]
['text':' JS::{,Mutable}Handle, JS::Rooted','line_number':24,'multiline':False]
['text':' JS::Value, JS::UndefinedHandleValue','line_number':25,'multiline':False]
['text':' JSContext','line_number':26,'multiline':False]
['text':' js::NativeObject','line_number':27,'multiline':False]
['text':' js::GetProperty','line_number':28,'multiline':False]
['text':' js::PromiseObject, js::PromiseResolvedWithUndefined','line_number':29,'multiline':False]
['text':' js::NewHandler, js::TargetFromHandler','line_number':31,'multiline':False]
['text':' js::ResolveUnwrappedPromiseWithValue','line_number':32,'multiline':False]
['text':' js::UnwrapReaderFromStream','line_number':33,'multiline':False]
['text':' JS::Compartment::wrap, js::Unwrap{Callee,Internal}Slot','line_number':34,'multiline':False]
['text':' JSContext::check','line_number':35,'multiline':False]
['text':' js::IsCallable, js::NewObjectWithClassProto','line_number':36,'multiline':False]
['text':' js::AutoRealm','line_number':37,'multiline':False]
['text':'** 3.4. General readable stream abstract operations **********************','line_number':62,'multiline':True]
['text':' Streams spec, 3.4.1. AcquireReadableStreamBYOBReader ( stream )','line_number':64,'multiline':False]
['text':' Always inlined.','line_number':65,'multiline':False]
['text':' Streams spec, 3.4.2. AcquireReadableStreamDefaultReader ( stream )','line_number':67,'multiline':False]
['text':' Always inlined. See CreateReadableStreamDefaultReader.','line_number':68,'multiline':False]
['text':'*
 * Streams spec, 3.4.3. CreateReadableStream (
 *                          startAlgorithm, pullAlgorithm, cancelAlgorithm
 *                          [, highWaterMark [, sizeAlgorithm ] ] )
 *
 * The start/pull/cancelAlgorithm arguments are represented instead as four
 * arguments: sourceAlgorithms, underlyingSource, pullMethod, cancelMethod.
 * See the comment on SetUpReadableStreamDefaultController.
 ','line_number':70,'multiline':True]
['text':' Step 1: If highWaterMark was not passed, set it to 1 (implicit).','line_number':89,'multiline':False]
['text':' Step 2: If sizeAlgorithm was not passed, set it to an algorithm that','line_number':90,'multiline':False]
['text':'         returns 1 (implicit).','line_number':91,'multiline':False]
['text':' Step 3: Assert: ! IsNonNegativeNumber(highWaterMark) is true.','line_number':92,'multiline':False]
['text':' Step 4: Let stream be ObjectCreate(the original value of ReadableStream's','line_number':95,'multiline':False]
['text':'         prototype property).','line_number':96,'multiline':False]
['text':' Step 5: Perform ! InitializeReadableStream(stream).','line_number':97,'multiline':False]
['text':' Step 6: Let controller be ObjectCreate(the original value of','line_number':104,'multiline':False]
['text':'         ReadableStreamDefaultController's prototype property).','line_number':105,'multiline':False]
['text':' Step 7: Perform ? SetUpReadableStreamDefaultController(stream,','line_number':106,'multiline':False]
['text':'         controller, startAlgorithm, pullAlgorithm, cancelAlgorithm,','line_number':107,'multiline':False]
['text':'         highWaterMark, sizeAlgorithm).','line_number':108,'multiline':False]
['text':' Step 8: Return stream.','line_number':115,'multiline':False]
['text':' Streams spec, 3.4.4. CreateReadableByteStream (','line_number':119,'multiline':False]
['text':'                          startAlgorithm, pullAlgorithm, cancelAlgorithm','line_number':120,'multiline':False]
['text':'                          [, highWaterMark [, autoAllocateChunkSize ] ] )','line_number':121,'multiline':False]
['text':' Not implemented.','line_number':122,'multiline':False]
['text':'*
 * Streams spec, 3.4.5. InitializeReadableStream ( stream )
 ','line_number':124,'multiline':True]
['text':' static ','line_number':127,'multiline':True]
['text':' = nullptr ','line_number':128,'multiline':True]
['text':' = nullptr ','line_number':129,'multiline':True]
['text':' In the spec, InitializeReadableStream is always passed a newly created','line_number':130,'multiline':False]
['text':' ReadableStream object. We instead create it here and return it below.','line_number':131,'multiline':False]
['text':' Step 1: Set stream.[[state]] to "readable".','line_number':140,'multiline':False]
['text':' Step 2: Set stream.[[reader]] and stream.[[storedError]] to','line_number':144,'multiline':False]
['text':'         undefined (implicit).','line_number':145,'multiline':False]
['text':' Step 3: Set stream.[[disturbed]] to false (done in step 1).','line_number':149,'multiline':False]
['text':' Streams spec, 3.4.6. IsReadableStream ( x )','line_number':155,'multiline':False]
['text':' Using UnwrapAndTypeCheck templates instead.','line_number':156,'multiline':False]
['text':' Streams spec, 3.4.7. IsReadableStreamDisturbed ( stream )','line_number':158,'multiline':False]
['text':' Using stream->disturbed() instead.','line_number':159,'multiline':False]
['text':'*
 * Streams spec, 3.4.8. IsReadableStreamLocked ( stream )
 ','line_number':161,'multiline':True]
['text':' Step 1: Assert: ! IsReadableStream(stream) is true (implicit).','line_number':165,'multiline':False]
['text':' Step 2: If stream.[[reader]] is undefined, return false.','line_number':166,'multiline':False]
['text':' Step 3: Return true.','line_number':167,'multiline':False]
['text':' Special-casing for streams with external sources. Those can be locked','line_number':168,'multiline':False]
['text':' explicitly via JSAPI, which is indicated by a controller flag.','line_number':169,'multiline':False]
['text':' IsReadableStreamLocked is called from the controller's constructor, at','line_number':170,'multiline':False]
['text':' which point we can't yet call stream->controller(), but the source also','line_number':171,'multiline':False]
['text':' can't be locked yet.','line_number':172,'multiline':False]
['text':' Streams spec, 3.4.9. IsReadableStreamAsyncIterator ( x )','line_number':179,'multiline':False]
['text':'','line_number':180,'multiline':False]
['text':' Not implemented.','line_number':181,'multiline':False]
['text':'*
 * Streams spec, 3.4.10. ReadableStreamTee steps 12.c.i-x.
 ','line_number':183,'multiline':True]
['text':' Step 12.c.i: Set reading to false.','line_number':197,'multiline':False]
['text':' Step 12.c.ii: Assert: Type(result) is Object.','line_number':200,'multiline':False]
['text':' Step 12.c.iii: Let done be ? Get(result, "done").','line_number':205,'multiline':False]
['text':' (This can fail only if `result` was nuked.)','line_number':206,'multiline':False]
['text':' Step 12.c.iv: Assert: Type(done) is Boolean.','line_number':212,'multiline':False]
['text':' Step 12.3 close steps','line_number':217,'multiline':False]
['text':' Step 1: Set reading to false (done unconditionally above).','line_number':219,'multiline':False]
['text':' Step 2: If canceled1 is false, perform','line_number':220,'multiline':False]
['text':'         ! ReadableStreamDefaultControllerClose(branch1.[[controller]]).','line_number':221,'multiline':False]
['text':' Step 3: If canceled2 is false, perform','line_number':230,'multiline':False]
['text':'         ! ReadableStreamDefaultControllerClose(branch2.[[controller]]).','line_number':231,'multiline':False]
['text':' Step 4: If canceled1 is false or canceled2 is false,','line_number':240,'multiline':False]
['text':'         resolve cancelPromise with undefined.','line_number':241,'multiline':False]
['text':' Step 12.c.vi: Let value be ! Get(result, "value").','line_number':256,'multiline':False]
['text':' (This can fail only if `result` was nuked.)','line_number':257,'multiline':False]
['text':' Step 12.c.vii: Let value1 and value2 be value.','line_number':263,'multiline':False]
['text':' Step 12.c.viii: If canceled2 is false and cloneForBranch2 is true, set','line_number':264,'multiline':False]
['text':'                 value2 to','line_number':265,'multiline':False]
['text':'                 ? StructuredDeserialize(? StructuredSerialize(value2),','line_number':266,'multiline':False]
['text':'                                         the current Realm Record).','line_number':267,'multiline':False]
['text':' We don't yet support any specifications that use cloneForBranch2, and','line_number':268,'multiline':False]
['text':' the Streams spec doesn't offer any way for author code to enable it,','line_number':269,'multiline':False]
['text':' so it's always false here.','line_number':270,'multiline':False]
['text':' Step 12.c.ix: If canceled1 is false, perform','line_number':278,'multiline':False]
['text':'               ? ReadableStreamDefaultControllerEnqueue(','line_number':279,'multiline':False]
['text':'                     branch1.[[readableStreamController]], value1).','line_number':280,'multiline':False]
['text':' Step 12.c.x: If canceled2 is false, perform','line_number':289,'multiline':False]
['text':'              ? ReadableStreamDefaultControllerEnqueue(','line_number':290,'multiline':False]
['text':'                    branch2.[[readableStreamController]], value2).','line_number':291,'multiline':False]
['text':'*
 * Streams spec, 3.4.10. ReadableStreamTee step 12, "Let pullAlgorithm be the
 * following steps:"
 ','line_number':304,'multiline':True]
['text':' Combine step 12.a/12.e far below, and handle steps 12.b-12.d after','line_number':310,'multiline':False]
['text':' inverting step 12.a's "If reading is true" condition.','line_number':311,'multiline':False]
['text':' Step 12.b: Set reading to true.','line_number':313,'multiline':False]
['text':' Implicit in the spec: Unpack `reader` from the TeeState (by way of the','line_number':316,'multiline':False]
['text':' stream stored in one of its slots).','line_number':317,'multiline':False]
['text':' Step 12.c: Let readPromise be the result of reacting to','line_number':335,'multiline':False]
['text':'            ! ReadableStreamDefaultReaderRead(reader) with the following','line_number':336,'multiline':False]
['text':'            fulfillment steps given the argument result: [...]','line_number':337,'multiline':False]
['text':' Step 12.d: Set readPromise.[[PromiseIsHandled]] to true.','line_number':338,'multiline':False]
['text':' First, perform |ReadableStreamDefaultReaderRead(reader)|.','line_number':340,'multiline':False]
['text':' Next, create a function to perform the fulfillment steps under step 12.c','line_number':347,'multiline':False]
['text':' (implemented in the |TeeReaderReadHandler| C++ function).','line_number':348,'multiline':False]
['text':' Finally, perform those fulfillment steps when |readerReadResultPromise|','line_number':360,'multiline':False]
['text':' fulfills.  (Step 12.c doesn't provide rejection steps, so don't handle','line_number':361,'multiline':False]
['text':' rejection.)','line_number':362,'multiline':False]
['text':'','line_number':363,'multiline':False]
['text':' The spec's |readPromise| promise is unobservable, so implement this using','line_number':364,'multiline':False]
['text':' a JSAPI function that acts as if it created |readPromise| but doesn't','line_number':365,'multiline':False]
['text':' actually do so.','line_number':366,'multiline':False]
['text':'','line_number':367,'multiline':False]
['text':' Step 12.d causes |readPromise| to be treated as handled, even if it','line_number':368,'multiline':False]
['text':' rejects.  Use |JS::AddPromiseReactionsIgnoringUnhandledRejection|, not','line_number':369,'multiline':False]
['text':' |JS::AddPromiseReactions|, to avoid reporting a freshly-consed-up promise','line_number':370,'multiline':False]
['text':' as rejected if |readerReadResultPromise| rejects.','line_number':371,'multiline':False]
['text':' Step 12.a: (If reading is true,) return a promise resolved with undefined.','line_number':378,'multiline':False]
['text':' Step 12.e: Return a promise resolved with undefined.','line_number':379,'multiline':False]
['text':'*
 * Cancel one branch of a tee'd stream with the given |reason_|.
 *
 * Streams spec, 3.4.10. ReadableStreamTee steps 13 and 14: "Let
 * cancel1Algorithm/cancel2Algorithm be the following steps, taking a reason
 * argument:"
 ','line_number':383,'multiline':True]
['text':' Step 13/14.a: Set canceled1/canceled2 to true.','line_number':403,'multiline':False]
['text':' Step 13/14.b: Set reason1/reason2 to reason.','line_number':404,'multiline':False]
['text':' Step 13/14.c: If canceled2/canceled1 is true,','line_number':427,'multiline':False]
['text':' Step 13/14.c.i: Let compositeReason be','line_number':429,'multiline':False]
['text':'                 ! CreateArrayFromList(« reason1, reason2 »).','line_number':430,'multiline':False]
['text':' Step 13/14.c.ii: Let cancelResult be','line_number':451,'multiline':False]
['text':'                  ! ReadableStreamCancel(stream, compositeReason).','line_number':452,'multiline':False]
['text':' In our implementation, this can fail with OOM. The best course then','line_number':453,'multiline':False]
['text':' is to reject cancelPromise with an OOM error.','line_number':454,'multiline':False]
['text':' Handle the OOM case mentioned above.','line_number':458,'multiline':False]
['text':' Step 13/14.c.iii: Resolve cancelPromise with cancelResult.','line_number':464,'multiline':False]
['text':' Step 13/14.d: Return cancelPromise.','line_number':473,'multiline':False]
['text':'
 * https://streams.spec.whatwg.org/#readable-stream-tee
 * ReadableStreamTee(stream, cloneForBranch2)
 *
 * Step 18: Upon rejection of reader.[[closedPromise]] with reason r,
 ','line_number':482,'multiline':True]
['text':' Step 18.1: Perform','line_number':497,'multiline':False]
['text':'               ! ReadableStreamDefaultControllerError(','line_number':498,'multiline':False]
['text':'                   branch1.[[controller]], r).','line_number':499,'multiline':False]
['text':' Step 18.2: Perform','line_number':505,'multiline':False]
['text':'            ! ReadableStreamDefaultControllerError(','line_number':506,'multiline':False]
['text':'                branch2.[[controller]], r).','line_number':507,'multiline':False]
['text':' Step 18.3: If canceled1 is false or canceled2 is false,','line_number':513,'multiline':False]
['text':'            resolve cancelPromise with undefined.','line_number':514,'multiline':False]
['text':'*
 * Streams spec, 3.4.10. ReadableStreamTee ( stream, cloneForBranch2 )
 ','line_number':529,'multiline':True]
['text':' Step 1: Assert: ! IsReadableStream(stream) is true (implicit).','line_number':536,'multiline':False]
['text':' Step 2: Assert: Type(cloneForBranch2) is Boolean (implicit).','line_number':538,'multiline':False]
['text':'','line_number':539,'multiline':False]
['text':' The streams spec only ever passes |cloneForBranch2 = false|.  It's expected','line_number':540,'multiline':False]
['text':' that external specs that pass |cloneForBranch2 = true| will at some point','line_number':541,'multiline':False]
['text':' come into existence, but we don't presently implement any such specs.','line_number':542,'multiline':False]
['text':' Step 3: Let reader be ? AcquireReadableStreamDefaultReader(stream).','line_number':546,'multiline':False]
['text':' Several algorithms close over the variables initialized in the next few','line_number':554,'multiline':False]
['text':' steps, so we allocate them in an object, the TeeState. The algorithms','line_number':555,'multiline':False]
['text':' also close over `stream` and `reader`, so TeeState gets a reference to','line_number':556,'multiline':False]
['text':' the stream.','line_number':557,'multiline':False]
['text':'','line_number':558,'multiline':False]
['text':' Step 4: Let reading be false.','line_number':559,'multiline':False]
['text':' Step 5: Let canceled1 be false.','line_number':560,'multiline':False]
['text':' Step 6: Let canceled2 be false.','line_number':561,'multiline':False]
['text':' Step 7: Let reason1 be undefined.','line_number':562,'multiline':False]
['text':' Step 8: Let reason2 be undefined.','line_number':563,'multiline':False]
['text':' Step 9: Let branch1 be undefined.','line_number':564,'multiline':False]
['text':' Step 10: Let branch2 be undefined.','line_number':565,'multiline':False]
['text':' Step 11: Let cancelPromise be a new promise.','line_number':566,'multiline':False]
['text':' Step 12: Let pullAlgorithm be the following steps: [...]','line_number':576,'multiline':False]
['text':' Step 13: Let cancel1Algorithm be the following steps: [...]','line_number':577,'multiline':False]
['text':' Step 14: Let cancel2Algorithm be the following steps: [...]','line_number':578,'multiline':False]
['text':' Step 15: Let startAlgorithm be an algorithm that returns undefined.','line_number':579,'multiline':False]
['text':'','line_number':580,'multiline':False]
['text':' Implicit. Our implementation does not use objects to represent','line_number':581,'multiline':False]
['text':' [[pullAlgorithm]], [[cancelAlgorithm]], and so on. Instead, we decide','line_number':582,'multiline':False]
['text':' which one to perform based on class checks. For example, our','line_number':583,'multiline':False]
['text':' implementation of ReadableStreamControllerCallPullIfNeeded checks','line_number':584,'multiline':False]
['text':' whether the stream's underlyingSource is a TeeState object.','line_number':585,'multiline':False]
['text':' Step 16: Set branch1 to','line_number':587,'multiline':False]
['text':'          ! CreateReadableStream(startAlgorithm, pullAlgorithm,','line_number':588,'multiline':False]
['text':'                                 cancel1Algorithm).','line_number':589,'multiline':False]
['text':' Step 17: Set branch2 to','line_number':602,'multiline':False]
['text':'          ! CreateReadableStream(startAlgorithm, pullAlgorithm,','line_number':603,'multiline':False]
['text':'                                 cancel2Algorithm).','line_number':604,'multiline':False]
['text':' Step 18: Upon rejection of reader.[[closedPromise]] with reason r, [...]','line_number':616,'multiline':False]
['text':' Step 19: Return « branch1, branch2 ».','line_number':629,'multiline':False]
['text':'*
 * Streams spec, 3.4.10.
 *      ReadableStreamPipeTo ( source, dest, preventClose, preventAbort,
 *                             preventCancel, signal )
 ','line_number':633,'multiline':True]
['text':' Step 1. Assert: ! IsReadableStream(source) is true.','line_number':646,'multiline':False]
['text':' Step 2. Assert: ! IsWritableStream(dest) is true.','line_number':647,'multiline':False]
['text':' Step 3. Assert: Type(preventClose) is Boolean, Type(preventAbort) is','line_number':648,'multiline':False]
['text':'         Boolean, and Type(preventCancel) is Boolean.','line_number':649,'multiline':False]
['text':' (These are guaranteed by the type system.)','line_number':650,'multiline':False]
['text':' Step 12: Let promise be a new promise.','line_number':652,'multiline':False]
['text':'','line_number':653,'multiline':False]
['text':' We reorder this so that this promise can be rejected and returned in case','line_number':654,'multiline':False]
['text':' of internal error.','line_number':655,'multiline':False]
['text':' Steps 4-11, 13-14.','line_number':661,'multiline':False]
['text':' Step 15.','line_number':674,'multiline':False]
