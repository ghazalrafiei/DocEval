['text':' Copyright 2012 the V8 project authors. All rights reserved.','line_number':1,'multiline':False]
['text':' Use of this source code is governed by a BSD-style license that can be','line_number':2,'multiline':False]
['text':' found in the LICENSE file.','line_number':3,'multiline':False]
['text':' TODO(jgruber): Do not expose in regexp.h.','line_number':19,'multiline':False]
['text':' TODO(jgruber): Consider splitting between ParseData and CompileData.','line_number':20,'multiline':False]
['text':' The parsed AST as produced by the RegExpParser.','line_number':22,'multiline':False]
['text':' The compiled Node graph as produced by RegExpTree::ToNode methods.','line_number':25,'multiline':False]
['text':' Either the generated code as produced by the compiler or a trampoline','line_number':28,'multiline':False]
['text':' to the interpreter.','line_number':29,'multiline':False]
['text':' True, iff the pattern is a 'simple' atom with zero captures. In other','line_number':32,'multiline':False]
['text':' words, the pattern consists of a string with no metacharacters and special','line_number':33,'multiline':False]
['text':' regexp features, and can be implemented as a standard string search.','line_number':34,'multiline':False]
['text':' True, iff the pattern is anchored at the start of the string with '^'.','line_number':37,'multiline':False]
['text':' Only use if the pattern contains named captures. If so, this contains a','line_number':40,'multiline':False]
['text':' mapping of capture names to capture indices.','line_number':41,'multiline':False]
['text':' The error message. Only used if an error occurred during parsing or','line_number':44,'multiline':False]
['text':' compilation.','line_number':45,'multiline':False]
['text':' The position at which the error was detected. Only used if an','line_number':48,'multiline':False]
['text':' error occurred.','line_number':49,'multiline':False]
['text':' The number of capture groups, without the global capture \0.','line_number':52,'multiline':False]
['text':' The number of registers used by the generated code.','line_number':55,'multiline':False]
['text':' The compilation target (bytecode or native code).','line_number':58,'multiline':False]
['text':' Whether the irregexp engine generates interpreter bytecode.','line_number':64,'multiline':False]
['text':' Parses the RegExp pattern and prepares the JSRegExp object with','line_number':69,'multiline':False]
['text':' generic data and choice of implementation - as well as what','line_number':70,'multiline':False]
['text':' the implementation wants to store in the data field.','line_number':71,'multiline':False]
['text':' Returns false if compilation fails.','line_number':72,'multiline':False]
['text':' Ensures that a regexp is fully compiled and ready to be executed on a','line_number':77,'multiline':False]
['text':' subject string.  Returns true on success. Return false on failure, and','line_number':78,'multiline':False]
['text':' then an exception will be pending.','line_number':79,'multiline':False]
['text':' Used to work around an issue in the RegExpPrototypeSplit fast path,','line_number':91,'multiline':False]
['text':' which diverges from the spec by not creating a sticky copy of the RegExp','line_number':92,'multiline':False]
['text':' instance and calling `exec` in a loop. If called in this context, we','line_number':93,'multiline':False]
['text':' must not update the last_match_info on a successful match at the subject','line_number':94,'multiline':False]
['text':' string end. See crbug.com/1075514 for more information.','line_number':95,'multiline':False]
['text':' See ECMA-262 section 15.10.6.2.','line_number':99,'multiline':False]
['text':' This function calls the garbage collector if necessary.','line_number':100,'multiline':False]
['text':' Integral return values used throughout regexp code layers.','line_number':112,'multiline':False]
['text':' Set last match info.  If match is nullptr, then setting captures is','line_number':128,'multiline':False]
['text':' omitted.','line_number':129,'multiline':False]
['text':' Uses a special global mode of irregexp-generated code to perform a global','line_number':157,'multiline':False]
['text':' search and return multiple results at once. As such, this is essentially an','line_number':158,'multiline':False]
['text':' iterator over multiple results (retrieved batch-wise in advance).','line_number':159,'multiline':False]
['text':' Fetch the next entry in the cache for global regexp match results.','line_number':167,'multiline':False]
['text':' This does not set the last match info.  Upon failure, nullptr is','line_number':168,'multiline':False]
['text':' returned. The cause can be checked with Result().  The previous result is','line_number':169,'multiline':False]
['text':' still in available in memory when a failure happens.','line_number':170,'multiline':False]
['text':' Pointer to the last set of captures.','line_number':184,'multiline':False]
['text':' Caches results for specific regexp queries on the isolate. At the time of','line_number':192,'multiline':False]
['text':' writing, this is used during global calls to RegExp.prototype.exec and','line_number':193,'multiline':False]
['text':' @@split.','line_number':194,'multiline':False]
['text':' Attempt to retrieve a cached result.  On failure, 0 is returned as a Smi.','line_number':199,'multiline':False]
['text':' On success, the returned result is guaranteed to be a COW-array.','line_number':200,'multiline':False]
['text':' Attempt to add value_array to the cache specified by type.  On success,','line_number':203,'multiline':False]
['text':' value_array is turned into a COW-array.','line_number':204,'multiline':False]
['text':' namespace internal','line_number':220,'multiline':False]
['text':' namespace v8','line_number':221,'multiline':False]
['text':' V8_REGEXP_REGEXP_H_','line_number':223,'multiline':False]
