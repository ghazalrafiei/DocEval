['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' This is similar to Operand, but carries more information. We're also not','line_number':21,'multiline':False]
['text':' guaranteed that Operand looks like this on all ISAs.','line_number':22,'multiline':False]
['text':' A register in the "integer", aka "general purpose", class.','line_number':26,'multiline':False]
['text':' Two consecutive "integer" register (aka "general purpose"). The even','line_number':29,'multiline':False]
['text':' register contains the lower part, the odd register has the high bits','line_number':30,'multiline':False]
['text':' of the content.','line_number':31,'multiline':False]
['text':' A register in the "float" register class.','line_number':34,'multiline':False]
['text':' A memory region.','line_number':36,'multiline':False]
['text':' The address of a memory region.','line_number':38,'multiline':False]
['text':' With a zero offset, this is a plain reg-to-reg move.','line_number':57,'multiline':False]
['text':' These are not handled presently, but MEMORY and EFFECTIVE_ADDRESS','line_number':106,'multiline':False]
['text':' only appear in controlled circumstances in the trampoline code','line_number':107,'multiline':False]
['text':' which ensures these cases never come up.','line_number':108,'multiline':False]
['text':' Check if one of the operand is a registe rpair, in which case, we','line_number':115,'multiline':False]
['text':' have to check any other register, or register pair.','line_number':116,'multiline':False]
['text':' Assume that register pairs are aligned on even registers.','line_number':119,'multiline':False]
['text':' Pair of registers are composed of consecutive registers, thus','line_number':122,'multiline':False]
['text':' if the first registers are aliased, then the second registers','line_number':123,'multiline':False]
['text':' are aliased too.','line_number':124,'multiline':False]
['text':' This represents a move operation.','line_number':168,'multiline':False]
['text':' If cycleBegin_ is true, endCycleType_ is the type of the move at the end','line_number':184,'multiline':False]
['text':' of the cycle. For example, given these moves:','line_number':185,'multiline':False]
['text':'       INT32 move a -> b','line_number':186,'multiline':False]
['text':'     GENERAL move b -> a','line_number':187,'multiline':False]
['text':' the move resolver starts by copying b into a temporary location, so that','line_number':188,'multiline':False]
['text':' the last move can read it. This copy needs to use use type GENERAL.','line_number':189,'multiline':False]
['text':' initialize to silence UBSan warning','line_number':202,'multiline':False]
['text':' Internal reset function. Does not clear lists.','line_number':276,'multiline':False]
['text':' Resolves a move group into two lists of ordered moves. These moves must','line_number':286,'multiline':False]
['text':' be executed in the order provided. Some moves may indicate that they','line_number':287,'multiline':False]
['text':' participate in a cycle. For every cycle there are two such moves, and it','line_number':288,'multiline':False]
['text':' is guaranteed that cycles do not nest inside each other in the list.','line_number':289,'multiline':False]
['text':'','line_number':290,'multiline':False]
['text':' After calling addMove() for each parallel move, resolve() performs the','line_number':291,'multiline':False]
['text':' cycle resolution algorithm. Calling addMove() again resets the resolver.','line_number':292,'multiline':False]
['text':' namespace jit','line_number':305,'multiline':False]
['text':' namespace js','line_number':306,'multiline':False]
['text':' jit_MoveResolver_h ','line_number':308,'multiline':True]
