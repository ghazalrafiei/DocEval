['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS reflection package. ','line_number':7,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':24,'multiline':False]
['text':' js::AutoCheckRecursionLimit','line_number':25,'multiline':False]
['text':' js::FunctionFlags','line_number':28,'multiline':False]
['text':' js::ModuleBuilder','line_number':31,'multiline':False]
['text':' js::PlainObject','line_number':32,'multiline':False]
['text':' assign ','line_number':56,'multiline':True]
['text':' operator-assign ','line_number':58,'multiline':True]
['text':' shift-assign ','line_number':65,'multiline':True]
['text':' binary ','line_number':69,'multiline':True]
['text':' short-circuit ','line_number':73,'multiline':True]
['text':' eq ','line_number':84,'multiline':True]
['text':' rel ','line_number':89,'multiline':True]
['text':' shift ','line_number':94,'multiline':True]
['text':' arithmetic ','line_number':98,'multiline':True]
['text':' binary ','line_number':105,'multiline':True]
['text':' misc ','line_number':109,'multiline':True]
['text':' AOP_ASSIGN ','line_number':150,'multiline':True]
['text':' AOP_PLUS ','line_number':151,'multiline':True]
['text':' AOP_MINUS ','line_number':152,'multiline':True]
['text':' AOP_STAR ','line_number':153,'multiline':True]
['text':' AOP_DIV ','line_number':154,'multiline':True]
['text':' AOP_MOD ','line_number':155,'multiline':True]
['text':' AOP_POW ','line_number':156,'multiline':True]
['text':' AOP_LSH ','line_number':157,'multiline':True]
['text':' AOP_RSH ','line_number':158,'multiline':True]
['text':' AOP_URSH ','line_number':159,'multiline':True]
['text':' AOP_BITOR ','line_number':160,'multiline':True]
['text':' AOP_BITXOR ','line_number':161,'multiline':True]
['text':' AOP_BITAND ','line_number':162,'multiline':True]
['text':' AOP_COALESCE ','line_number':163,'multiline':True]
['text':' AOP_OR ','line_number':164,'multiline':True]
['text':' AOP_AND ','line_number':165,'multiline':True]
['text':' BINOP_EQ ','line_number':169,'multiline':True]
['text':' BINOP_NE ','line_number':170,'multiline':True]
['text':' BINOP_STRICTEQ ','line_number':171,'multiline':True]
['text':' BINOP_STRICTNE ','line_number':172,'multiline':True]
['text':' BINOP_LT ','line_number':173,'multiline':True]
['text':' BINOP_LE ','line_number':174,'multiline':True]
['text':' BINOP_GT ','line_number':175,'multiline':True]
['text':' BINOP_GE ','line_number':176,'multiline':True]
['text':' BINOP_LSH ','line_number':177,'multiline':True]
['text':' BINOP_RSH ','line_number':178,'multiline':True]
['text':' BINOP_URSH ','line_number':179,'multiline':True]
['text':' BINOP_PLUS ','line_number':180,'multiline':True]
['text':' BINOP_MINUS ','line_number':181,'multiline':True]
['text':' BINOP_STAR ','line_number':182,'multiline':True]
['text':' BINOP_DIV ','line_number':183,'multiline':True]
['text':' BINOP_MOD ','line_number':184,'multiline':True]
['text':' BINOP_POW ','line_number':185,'multiline':True]
['text':' BINOP_BITOR ','line_number':186,'multiline':True]
['text':' BINOP_BITXOR ','line_number':187,'multiline':True]
['text':' BINOP_BITAND ','line_number':188,'multiline':True]
['text':' BINOP_IN ','line_number':189,'multiline':True]
['text':' BINOP_INSTANCEOF ','line_number':190,'multiline':True]
['text':' BINOP_COALESCE ','line_number':191,'multiline':True]
['text':' UNOP_DELETE ','line_number':195,'multiline':True]
['text':' UNOP_NEG ','line_number':196,'multiline':True]
['text':' UNOP_POS ','line_number':197,'multiline':True]
['text':' UNOP_NOT ','line_number':198,'multiline':True]
['text':' UNOP_BITNOT ','line_number':199,'multiline':True]
['text':' UNOP_TYPEOF ','line_number':200,'multiline':True]
['text':' UNOP_VOID ','line_number':201,'multiline':True]
['text':' UNOP_AWAIT ','line_number':202,'multiline':True]
['text':'
 * ParseNode is a somewhat intricate data structure, and its invariants have
 * evolved, making it more likely that there could be a disconnect between the
 * parser and the AST serializer. We use these macros to check invariants on a
 * parse node and raise a dynamic error on failure.
 ','line_number':221,'multiline':True]
['text':' Set 'result' to obj[id] if any such property exists, else defaultValue. ','line_number':247,'multiline':True]
['text':'
 * Builder class that constructs JavaScript AST node objects. See:
 *
 *     https://developer.mozilla.org/en/SpiderMonkey/Parser_API
 *
 * Bug 569487: generalize builder interface
 ','line_number':264,'multiline':True]
['text':' save source location information?     ','line_number':276,'multiline':True]
['text':' source filename or null               ','line_number':277,'multiline':True]
['text':' source filename JS value or null      ','line_number':278,'multiline':True]
['text':' user-specified callbacks              ','line_number':279,'multiline':True]
['text':' user-specified builder object or null ','line_number':280,'multiline':True]
['text':' The end of the implementation of callback(). All arguments except','line_number':349,'multiline':False]
['text':' loc have already been stored in range [0, i).','line_number':350,'multiline':False]
['text':' Helper function for callback(). Note that all Arguments must be types','line_number':360,'multiline':False]
['text':' that convert to HandleValue, so this isn't as template-y as it seems,','line_number':361,'multiline':False]
['text':' just variadic.','line_number':362,'multiline':False]
['text':' Recursive loop to store the arguments into args. This eventually','line_number':367,'multiline':False]
['text':' bottoms out in a call to the non-template callbackHelper() above.','line_number':368,'multiline':False]
['text':' Invoke a user-defined callback. The actual signature is:','line_number':373,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':'     bool callback(HandleValue fun, HandleValue... args, TokenPos* pos,','line_number':375,'multiline':False]
['text':'                   MutableHandleValue dst);','line_number':376,'multiline':False]
['text':' WARNING: Returning a Handle is non-standard, but it works in this case','line_number':387,'multiline':False]
['text':' because both |v| and |UndefinedHandleValue| are definitely rooted on a','line_number':388,'multiline':False]
['text':' previous stack frame (i.e. we're just choosing between two','line_number':389,'multiline':False]
['text':' already-rooted values).','line_number':390,'multiline':False]
['text':'
     * Bug 575416: instead of Atomize, lookup constant atoms in tbl file
     ','line_number':397,'multiline':True]
['text':' The end of the implementation of newNode().','line_number':425,'multiline':False]
['text':' Recursive loop to define properties. Note that the newNodeHelper()','line_number':434,'multiline':False]
['text':' call below passes two fewer arguments than we received, as we omit','line_number':435,'multiline':False]
['text':' `name` and `value`. This eventually bottoms out in a call to the','line_number':436,'multiline':False]
['text':' non-template newNodeHelper() above.','line_number':437,'multiline':False]
['text':' Create a node object with "type" and "loc" properties, as well as zero','line_number':442,'multiline':False]
['text':' or more properties passed in as arguments. The signature is really more','line_number':443,'multiline':False]
['text':' like:','line_number':444,'multiline':False]
['text':'','line_number':445,'multiline':False]
['text':'     bool newNode(ASTType type, TokenPos* pos,','line_number':446,'multiline':False]
['text':'                  {const char *name0, HandleValue value0,}...','line_number':447,'multiline':False]
['text':'                  MutableHandleValue dst);','line_number':448,'multiline':False]
['text':'
     * Bug 575416: instead of Atomize, lookup constant atoms in tbl file
     ','line_number':476,'multiline':True]
['text':' Represent "no node" as null and ensure users are not exposed to magic','line_number':484,'multiline':False]
['text':' values.','line_number':485,'multiline':False]
['text':'
   * All of the public builder methods take as their last two
   * arguments a nullable token position and a non-nullable, rooted
   * outparam.
   *
   * Any Value arguments representing optional subnodes may be a
   * JS_SERIALIZE_NO_NODE magic value.
   ','line_number':496,'multiline':True]
['text':'
   * misc nodes
   ','line_number':505,'multiline':True]
['text':'
   * statements
   ','line_number':540,'multiline':True]
['text':'
   * expressions
   ','line_number':641,'multiline':True]
['text':'
   * declarations
   ','line_number':724,'multiline':True]
['text':'
   * patterns
   ','line_number':731,'multiline':True]
['text':' anonymous namespace ','line_number':746,'multiline':True]
['text':' Represent "no node" as an array hole by not adding the value. ','line_number':779,'multiline':True]
['text':' obsolete E4X `for each` statement','line_number':973,'multiline':False]
['text':' = false ','line_number':1223,'multiline':True]
['text':'
 * Serialization of parse nodes to JavaScript objects.
 *
 * All serialization methods take a non-nullable ParseNode pointer.
 ','line_number':1689,'multiline':True]
['text':' anonymous namespace ','line_number':1821,'multiline':True]
['text':' SpiderMonkey allows declarations even in pure statement contexts. ','line_number':2003,'multiline':True]
['text':' Treat both the toplevel const binding (secretly var-like) and the lexical','line_number':2034,'multiline':False]
['text':' const the same way','line_number':2035,'multiline':False]
['text':' This happens for a destructuring declarator in a for-in/of loop. ','line_number':2072,'multiline':True]
['text':' `lexical` field is always true.','line_number':2297,'multiline':False]
['text':' StaticClassBlock* block = &item->as<StaticClassBlock>();','line_number':2637,'multiline':False]
['text':' Dig through the lambda and get to the actual expression','line_number':2695,'multiline':False]
['text':' RawUndefinedExpr is the node we use for "there is no initializer". If one','line_number':2707,'multiline':False]
['text':' writes, literally, `x = undefined;`, it will not be a RawUndefinedExpr','line_number':2708,'multiline':False]
['text':' node, but rather a variable reference.','line_number':2709,'multiline':False]
['text':' Behavior for "there is no initializer" should be { ..., "init": null }','line_number':2710,'multiline':False]
['text':' First, we need to reverse the list, so that we can traverse it in the right','line_number':2778,'multiline':False]
['text':' order. It's OK to destructively reverse the list, because there are no','line_number':2779,'multiline':False]
['text':' other consumers.','line_number':2780,'multiline':False]
['text':' SUPERCALL is Call(super, args)','line_number':3022,'multiline':False]
['text':' SETTHIS is used to assign the result of a super() call to |this|.','line_number':3327,'multiline':False]
['text':' It's not part of the original AST, so just forward to the call.','line_number':3328,'multiline':False]
['text':' Patterns can't have getters/setters.','line_number':3519,'multiline':False]
['text':' Extract the args and body separately. ','line_number':3640,'multiline':True]
['text':' Serialize the arguments and body. ','line_number':3653,'multiline':True]
['text':' expression closure, no destructured args
                                     ','line_number':3655,'multiline':True]
['text':' statement closure ','line_number':3660,'multiline':True]
['text':' Skip over initial yield in generator.','line_number':3664,'multiline':False]
['text':' Async arrow with expression body is converted into STATEMENTLIST','line_number':3669,'multiline':False]
['text':' to insert initial yield.','line_number':3670,'multiline':False]
['text':' Process the name or pattern.','line_number':3714,'multiline':False]
['text':' Process its default (or lack thereof).','line_number':3729,'multiline':False]
['text':' We aren't sure how many elements there are up front, so we'll check each','line_number':3758,'multiline':False]
['text':' append.','line_number':3759,'multiline':False]
['text':' config.loc ','line_number':3801,'multiline':True]
['text':' config.source ','line_number':3811,'multiline':True]
['text':' config.line ','line_number':3830,'multiline':True]
['text':' config.builder ','line_number':3839,'multiline':True]
['text':' config.target ','line_number':3855,'multiline':True]
['text':' Extract the builder methods first to report errors before parsing. ','line_number':3890,'multiline':True]
['text':' foldConstants = ','line_number':3931,'multiline':True]
['text':' syntaxParser = ','line_number':3932,'multiline':True]
