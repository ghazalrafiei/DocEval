['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':17,'multiline':False]
['text':' The mapped size for a plain shared array buffer, used only for tracking','line_number':41,'multiline':False]
['text':' memory usage. This is incorrect for some WASM cases, and for hypothetical','line_number':42,'multiline':False]
['text':' callers of js::SharedArrayBufferObject::createFromNewRawBuffer that do not','line_number':43,'multiline':False]
['text':' currently exist, but it's fine as a signal of GC pressure.','line_number':44,'multiline':False]
['text':' `wasmMaxPages` must always be something for wasm and nothing for other','line_number':49,'multiline':False]
['text':' users.','line_number':50,'multiline':False]
['text':' Deallocation needs this','line_number':86,'multiline':False]
['text':' Prior code has asserted that initial pages is within our implementation','line_number':97,'multiline':False]
['text':' limits (wasm::MaxMemory32Pages) and we can assume it is a valid size_t.','line_number':98,'multiline':False]
['text':' The caller must verify that the new page size won't overflow when','line_number':125,'multiline':False]
['text':' converted to a byte length.','line_number':126,'multiline':False]
['text':' Note, caller must guard on the limit appropriate to the memory type','line_number':129,'multiline':False]
['text':' for resize ','line_number':143,'multiline':True]
['text':' We rely on CommitBufferMemory (and therefore memmap/VirtualAlloc) to only','line_number':150,'multiline':False]
['text':' return once it has committed memory for all threads. We only update with a','line_number':151,'multiline':False]
['text':' new length once this has occurred.','line_number':152,'multiline':False]
['text':' Be careful never to overflow the refcount field.','line_number':161,'multiline':False]
['text':' Normally if the refcount is zero then the memory will have been unmapped','line_number':175,'multiline':False]
['text':' and this test may just crash, but if the memory has been retained for any','line_number':176,'multiline':False]
['text':' reason we will catch the underflow here.','line_number':177,'multiline':False]
['text':' Drop the reference to the buffer.','line_number':180,'multiline':False]
['text':' Atomic.','line_number':181,'multiline':False]
['text':' This was the final reference, so release the buffer.','line_number':188,'multiline':False]
['text':' ES2017 draft rev 6390c2f1b34b309895d31d8c0512eac8660a0210','line_number':211,'multiline':False]
['text':' 24.2.2.1 SharedArrayBuffer( length )','line_number':212,'multiline':False]
['text':' Step 1.','line_number':217,'multiline':False]
['text':' Step 2.','line_number':222,'multiline':False]
['text':' Step 3 (Inlined 24.2.1.1 AllocateSharedArrayBuffer).','line_number':228,'multiline':False]
['text':' 24.2.1.1, step 1 (Inlined 9.1.14 OrdinaryCreateFromConstructor).','line_number':229,'multiline':False]
['text':' 24.2.1.1, step 3 (Inlined 6.2.7.2 CreateSharedByteDataBlock, step 2).','line_number':236,'multiline':False]
['text':' Refuse to allocate too large buffers.','line_number':237,'multiline':False]
['text':' 24.2.1.1, steps 1 and 4-6.','line_number':244,'multiline':False]
['text':' Must be foreground finalizable so that we can account for the object.','line_number':321,'multiline':False]
['text':' Detect the case of failure during SharedArrayBufferObject creation,','line_number':327,'multiline':False]
['text':' which causes a SharedArrayRawBuffer to never be attached.','line_number':328,'multiline':False]
['text':' static ','line_number':336,'multiline':True]
['text':' Divide the buffer size by the refcount to get the fraction of the buffer','line_number':339,'multiline':False]
['text':' owned by this thread. It's conceivable that the refcount might change in','line_number':340,'multiline':False]
['text':' the middle of memory reporting, in which case the amount reported for','line_number':341,'multiline':False]
['text':' some threads might be to high (if the refcount goes up) or too low (if','line_number':342,'multiline':False]
['text':' the refcount goes down). But that's unlikely and hard to avoid, so we','line_number':343,'multiline':False]
['text':' just live with the risk.','line_number':344,'multiline':False]
['text':' static ','line_number':350,'multiline':True]
['text':' addProperty','line_number':388,'multiline':False]
['text':' delProperty','line_number':389,'multiline':False]
['text':' enumerate','line_number':390,'multiline':False]
['text':' newEnumerate','line_number':391,'multiline':False]
['text':' resolve','line_number':392,'multiline':False]
['text':' mayResolve','line_number':393,'multiline':False]
['text':' finalize','line_number':394,'multiline':False]
['text':' call','line_number':395,'multiline':False]
['text':' hasInstance','line_number':396,'multiline':False]
['text':' construct','line_number':397,'multiline':False]
['text':' trace','line_number':398,'multiline':False]
['text':'safe - caller knows','line_number':449,'multiline':True]
['text':' proto = ','line_number':463,'multiline':True]
['text':'safe - caller knows','line_number':477,'multiline':True]
