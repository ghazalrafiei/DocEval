['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS execution context. ','line_number':7,'multiline':True]
['text':' JS_PUBLIC_API','line_number':15,'multiline':False]
['text':' JS::ContextOptions','line_number':21,'multiline':False]
['text':' js::Activation','line_number':29,'multiline':False]
['text':' js::SharedImmutableScriptDataTable','line_number':33,'multiline':False]
['text':' namespace frontend','line_number':48,'multiline':False]
['text':' namespace jit','line_number':55,'multiline':False]
['text':' namespace gc','line_number':60,'multiline':False]
['text':' Detects cycles when traversing an object graph. ','line_number':62,'multiline':True]
['text':' JS::JobQueue methods.','line_number':92,'multiline':False]
['text':' If we are currently in a call to runJobs(), make that call stop processing','line_number':100,'multiline':False]
['text':' jobs once the current one finishes, and return. If we are not currently in','line_number':101,'multiline':False]
['text':' a call to runJobs, make all future calls return immediately.','line_number':102,'multiline':False]
['text':' Return the front element of the queue, or nullptr if the queue is empty.','line_number':105,'multiline':False]
['text':' This is only used by shell testing functions.','line_number':106,'multiline':False]
['text':' True if we are in the midst of draining jobs from this queue. We use this','line_number':114,'multiline':False]
['text':' to avoid re-entry (nested calls simply return immediately).','line_number':115,'multiline':False]
['text':' True if we've been asked to interrupt draining jobs. Set by interrupt().','line_number':118,'multiline':False]
['text':' Thread Local Storage slot for storing the context for a thread. ','line_number':129,'multiline':True]
['text':' Context for the main thread of a JSRuntime.','line_number':135,'multiline':False]
['text':' Context for a helper thread.','line_number':138,'multiline':False]
['text':' namespace js ','line_number':154,'multiline':True]
['text':'
 * A JSContext encapsulates the thread local state used when using the JS
 * runtime.
 ','line_number':156,'multiline':True]
['text':' Free lists for allocating in the current zone.','line_number':176,'multiline':False]
['text':' This is reset each time we switch zone, then added to the variable in the','line_number':179,'multiline':False]
['text':' zone when we switch away from it.  This would be a js::ThreadData but we','line_number':180,'multiline':False]
['text':' need to take its address.','line_number':181,'multiline':False]
['text':' Free lists for parallel allocation in the atoms zone on helper threads.','line_number':184,'multiline':False]
['text':' Thread that the JSContext is currently running on, if in use.','line_number':189,'multiline':False]
['text':' When a helper thread is using a context, it may need to periodically','line_number':194,'multiline':False]
['text':' free unused memory.','line_number':195,'multiline':False]
['text':' Are we currently timing execution? This flag ensures that we do not','line_number':198,'multiline':False]
['text':' double-count execution time in reentrant situations.','line_number':199,'multiline':False]
['text':' This is used by helper threads to change the runtime their context is','line_number':203,'multiline':False]
['text':' currently operating on.','line_number':204,'multiline':False]
['text':' Clear the pending exception (if any) due to OOM. ','line_number':267,'multiline':True]
['text':' Accessors for immutable runtime data.','line_number':284,'multiline':False]
['text':'
   * "Entering" a realm changes cx->realm (which changes cx->global). Note
   * that this does not push an Activation so it's possible for the caller's
   * realm to be != cx->realm(). This is not a problem since, in general, most
   * places in the VM cannot know that they were called from script (e.g.,
   * they may have been called through the JSAPI via JS_CallFunction) and thus
   * cannot expect there is a scripted caller.
   *
   * Realms should be entered/left in a LIFO fasion. To enter a realm, code
   * should prefer using AutoRealm over JS::EnterRealm/JS::LeaveRealm.
   *
   * Also note that the JIT can enter (same-compartment) realms without going
   * through these methods - it will update cx->realm_ directly.
   ','line_number':303,'multiline':True]
['text':' Threads may freely access any data in their realm, compartment and zone.','line_number':345,'multiline':False]
['text':' For use when the context's zone is being read by another thread and the','line_number':362,'multiline':False]
['text':' compartment and zone pointers might not be in sync.','line_number':363,'multiline':False]
['text':' For JIT use.','line_number':366,'multiline':False]
['text':' Current global. This is only safe to use within the scope of the','line_number':369,'multiline':False]
['text':' AutoRealm from which it's called.','line_number':370,'multiline':False]
['text':' Methods to access runtime data that must be protected by locks.','line_number':381,'multiline':False]
['text':' Methods to access other runtime data that checks locking internally.','line_number':387,'multiline':False]
['text':' Methods specific to any HelperThread for the context.','line_number':396,'multiline':False]
['text':'*
   * Intentionally awkward signpost method that is stationed on the
   * boundary between Result-using and non-Result-using code.
   ','line_number':415,'multiline':True]
['text':'
   * Points to the most recent JitActivation pushed on the thread.
   * See JitActivation constructor in vm/Stack.cpp
   ','line_number':432,'multiline':True]
['text':' Shim for V8 interfaces used by irregexp code','line_number':438,'multiline':False]
['text':'
   * Points to the most recent activation running on the thread.
   * See Activation comment in vm/Stack.h.
   ','line_number':441,'multiline':True]
['text':'
   * Points to the most recent profiling activation running on the
   * thread.
   ','line_number':447,'multiline':True]
['text':' Base address of the native stack for the current thread.','line_number':484,'multiline':False]
['text':' If non-null, report JavaScript entry points to this monitor. ','line_number':491,'multiline':True]
['text':'
   * Stack of debuggers that currently disallow debuggee execution.
   *
   * When we check for NX we are inside the debuggee compartment, and thus a
   * stack of Debuggers that have prevented execution need to be tracked to
   * enter the correct Debugger compartment to report the error.
   ','line_number':494,'multiline':True]
['text':' State used by util/DoubleToString.cpp.','line_number':522,'multiline':False]
['text':'
   * When this flag is non-zero, any attempt to GC will be skipped. See the
   * AutoSuppressGC class for for details.
   ','line_number':525,'multiline':True]
['text':' clang-format off','line_number':531,'multiline':False]
['text':' This thread is not running in the garbage collector.','line_number':533,'multiline':False]
['text':' This thread is currently marking GC things. This thread could be the main','line_number':536,'multiline':False]
['text':' thread or a helper thread doing sweep-marking.','line_number':537,'multiline':False]
['text':' This thread is currently sweeping GC things. This thread could be the','line_number':540,'multiline':False]
['text':' main thread or a helper thread while the main thread is running the','line_number':541,'multiline':False]
['text':' mutator.','line_number':542,'multiline':False]
['text':' Whether this thread is currently finalizing GC things. This thread could','line_number':545,'multiline':False]
['text':' be the main thread or a helper thread doing finalization while the main','line_number':546,'multiline':False]
['text':' thread is running the mutator.','line_number':547,'multiline':False]
['text':' clang-format on','line_number':550,'multiline':False]
['text':' Which part of the garbage collector this context is running at the moment.','line_number':553,'multiline':False]
['text':' The specific zone currently being swept, if any.','line_number':556,'multiline':False]
['text':' Whether this thread is currently manipulating possibly-gray GC things.','line_number':559,'multiline':False]
['text':'
   * If this is 0, all cross-compartment proxies must be registered in the
   * wrapper map. This checking must be disabled temporarily while creating
   * new wrappers. When non-zero, this records the recursion depth of wrapper
   * creation.
   ','line_number':564,'multiline':True]
['text':' We are currently running a simulated OOM test.','line_number':590,'multiline':False]
['text':'
   * Some regions of code are hard for the static rooting hazard analysis to
   * understand. In those cases, we trade the static analysis for a dynamic
   * analysis. When this is non-zero, we should assert if we trigger, or
   * might trigger, a GC.
   ','line_number':598,'multiline':True]
['text':' Count of AutoDisableGenerationalGC instances on the thread's stack.','line_number':606,'multiline':False]
['text':' Some code cannot tolerate compacting GC so it can be disabled temporarily','line_number':609,'multiline':False]
['text':' with AutoDisableCompactingGC which uses this counter.','line_number':610,'multiline':False]
['text':' TODO: We may be able to improve this by collecting if','line_number':614,'multiline':False]
['text':' !isOffThreadParseRunning() (bug 1468422).','line_number':615,'multiline':False]
['text':' Pools used for recycling name maps and vectors when parsing and','line_number':620,'multiline':False]
['text':' emitting bytecode. Purged on GC when there are no active script','line_number':621,'multiline':False]
['text':' compilations.','line_number':622,'multiline':False]
['text':' Whether sampling should be enabled or not. ','line_number':635,'multiline':True]
['text':' Temporary arena pool used while compiling and decompiling. ','line_number':651,'multiline':True]
['text':' Cache for jit::GetPcScript().','line_number':664,'multiline':False]
['text':' Exception state -- the exception member is a GC root by definition. ','line_number':668,'multiline':True]
['text':' is there a pending exception? ','line_number':669,'multiline':True]
['text':' most-recently-thrown exception ','line_number':671,'multiline':True]
['text':' stack when the exception was thrown ','line_number':673,'multiline':True]
['text':' True if the exception currently being thrown is by result of','line_number':689,'multiline':False]
['text':' ReportOverRecursed. See Debugger::slowPathOnExceptionUnwind.','line_number':690,'multiline':False]
['text':' True if this context has ever called ReportOverRecursed.','line_number':694,'multiline':False]
['text':' True if propagating a forced return from an interrupt handler during','line_number':704,'multiline':False]
['text':' debug mode.','line_number':705,'multiline':False]
['text':' see vm/Probes.h ','line_number':709,'multiline':True]
['text':' True if generating an error, to prevent runaway recursion. ','line_number':717,'multiline':True]
['text':' State for object and array toSource conversion. ','line_number':721,'multiline':True]
['text':' Client opaque pointer. ','line_number':732,'multiline':True]
['text':'
   * Youngest frame of a saved stack that will be picked up as an async stack
   * by any new Activation, and is nullptr when no async stack should be used.
   *
   * The JS::AutoSetAsyncStackForNewCalls class can be used to set this.
   *
   * New activations will reset this to nullptr on construction after getting
   * the current value, and will restore the previous value on destruction.
   ','line_number':744,'multiline':True]
['text':'
   * Value of asyncCause to be attached to asyncStackForNewActivations.
   ','line_number':764,'multiline':True]
['text':'
   * True if the async call was explicitly requested, e.g. via
   * callFunctionWithAsyncStack.
   ','line_number':769,'multiline':True]
['text':'
   * Get the topmost script and optional pc on the stack. By default, this
   * function only returns a JSScript in the current realm, returning nullptr
   * if the current script is in a different realm. This behavior can be
   * overridden by passing AllowCrossRealm::Allow.
   ','line_number':786,'multiline':True]
['text':'
   * See JS_SetTrustedPrincipals in jsapi.h.
   * Note: !cx->realm() is treated as trusted.
   ','line_number':826,'multiline':True]
['text':' Bitfield storing InterruptReason values.','line_number':853,'multiline':False]
['text':' Any thread can call requestInterrupt() to request that this thread','line_number':856,'multiline':False]
['text':' stop running. To stop this thread, requestInterrupt sets two fields:','line_number':857,'multiline':False]
['text':' interruptBits_ (a bitset of InterruptReasons) and jitStackLimit_ (set to','line_number':858,'multiline':False]
['text':' UINTPTR_MAX). The JS engine must continually poll one of these fields','line_number':859,'multiline':False]
['text':' and call handleInterrupt if either field has the interrupt value.','line_number':860,'multiline':False]
['text':'','line_number':861,'multiline':False]
['text':' The point of setting jitStackLimit_ to UINTPTR_MAX is that JIT code','line_number':862,'multiline':False]
['text':' already needs to guard on jitStackLimit_ in every function prologue to','line_number':863,'multiline':False]
['text':' avoid stack overflow, so we avoid a second branch on interruptBits_ by','line_number':864,'multiline':False]
['text':' setting jitStackLimit_ to a value that is guaranteed to fail the guard.)','line_number':865,'multiline':False]
['text':'','line_number':866,'multiline':False]
['text':' Note that the writes to interruptBits_ and jitStackLimit_ use a Relaxed','line_number':867,'multiline':False]
['text':' Atomic so, while the writes are guaranteed to eventually be visible to','line_number':868,'multiline':False]
['text':' this thread, it can happen in any order. handleInterrupt calls the','line_number':869,'multiline':False]
['text':' interrupt callback if either is set, so it really doesn't matter as long','line_number':870,'multiline':False]
['text':' as the JS engine is continually polling at least one field. In corner','line_number':871,'multiline':False]
['text':' cases, this relaxed ordering could lead to an interrupt handler being','line_number':872,'multiline':False]
['text':' called twice in succession after a single requestInterrupt call, but','line_number':873,'multiline':False]
['text':' that's fine.','line_number':874,'multiline':False]
['text':' For JIT use. Points to the inlined ICScript for a baseline script','line_number':887,'multiline':False]
['text':' being invoked as part of a trial inlining.  Contains nullptr at','line_number':888,'multiline':False]
['text':' all times except for the brief moment between being set in the','line_number':889,'multiline':False]
['text':' caller and read in the callee's prologue.','line_number':890,'multiline':False]
['text':' Futex state, used by Atomics.wait() and Atomics.wake() on the Atomics','line_number':905,'multiline':False]
['text':' object.','line_number':906,'multiline':False]
['text':' Like jitStackLimit, but not reset to trigger interrupts.','line_number':911,'multiline':False]
['text':' Queue of pending jobs as described in ES2016 section 8.4.','line_number':914,'multiline':False]
['text':'','line_number':915,'multiline':False]
['text':' This is a non-owning pointer to either:','line_number':916,'multiline':False]
['text':' - a JobQueue implementation the embedding provided by calling','line_number':917,'multiline':False]
['text':'   JS::SetJobQueue, owned by the embedding, or','line_number':918,'multiline':False]
['text':' - our internal JobQueue implementation, established by calling','line_number':919,'multiline':False]
['text':'   js::UseInternalJobQueues, owned by JSContext::internalJobQueue below.','line_number':920,'multiline':False]
['text':' If the embedding has called js::UseInternalJobQueues, this is the owning','line_number':923,'multiline':False]
['text':' pointer to our internal JobQueue implementation, which JSContext::jobQueue','line_number':924,'multiline':False]
['text':' borrows.','line_number':925,'multiline':False]
['text':' True if jobQueue is empty, or we are running the last job in the queue.','line_number':928,'multiline':False]
['text':' Such conditions permit optimizations around `await` expressions.','line_number':929,'multiline':False]
['text':' Don't perform these checks when called from a finalizer. The checking','line_number':948,'multiline':False]
['text':' depends on other objects not having been swept yet.','line_number':949,'multiline':False]
['text':' Assert the arguments are in this context's realm (for scripts),','line_number':954,'multiline':False]
['text':' compartment (for objects) or zone (for strings, symbols).','line_number':955,'multiline':False]
['text':' Spewer for this thread','line_number':965,'multiline':False]
['text':' During debugger evaluations which need to observe native calls, JITs are','line_number':972,'multiline':False]
['text':' completely disabled. This flag indicates whether we are in this state, and','line_number':973,'multiline':False]
['text':' the debugger which initiated the evaluation. This debugger has other','line_number':974,'multiline':False]
['text':' references on the stack and does not need to be traced.','line_number':975,'multiline':False]
['text':' struct JSContext ','line_number':978,'multiline':True]
['text':'
 * Create and destroy functions for JSContext, which is manually allocated
 * and exclusively owned.
 ','line_number':1024,'multiline':True]
['text':' |callee| requires a usage string provided by JS_DefineFunctionsWithHelp. ','line_number':1032,'multiline':True]
['text':'
 * Report an attempt to access the property of a null or undefined value (v).
 ','line_number':1040,'multiline':True]
['text':'
 * Report error using js::DecompileValueGenerator(cx, spindex, v, fallback) as
 * the first argument for the error message.
 ','line_number':1049,'multiline':True]
['text':'**********************************************************************','line_number':1060,'multiline':True]
['text':'
 * Encapsulates an external array of values and adds a trace method, for use in
 * Rooted.
 ','line_number':1062,'multiline':True]
['text':' RootedExternalValueArray roots an external array of Values. ','line_number':1080,'multiline':True]
['text':' A token used to prove you can safely access the atoms zone. This zone is','line_number':1135,'multiline':False]
['text':' accessed by the main thread and by off-thread parsing. There are two','line_number':1136,'multiline':False]
['text':' situations in which it is safe:','line_number':1137,'multiline':False]
['text':'','line_number':1138,'multiline':False]
['text':'  - the current thread holds all atoms table locks (off-thread parsing may be','line_number':1139,'multiline':False]
['text':'    running and must also take one of these locks for access)','line_number':1140,'multiline':False]
['text':'','line_number':1141,'multiline':False]
['text':'  - the GC is running and is collecting the atoms zone (this cannot be started','line_number':1142,'multiline':False]
['text':'    while off-thread parsing is happening)','line_number':1143,'multiline':False]
['text':' Should be used in functions called directly from JIT code (with','line_number':1172,'multiline':False]
['text':' masm.callWithABI) to assert invariants in debug builds.','line_number':1173,'multiline':False]
['text':' In debug mode, masm.callWithABI inserts code to verify that the','line_number':1174,'multiline':False]
['text':' callee function uses AutoUnsafeCallWithABI.','line_number':1175,'multiline':False]
['text':' While this object is live:','line_number':1176,'multiline':False]
['text':' 1. cx->hasAutoUnsafeCallWithABI must be true.','line_number':1177,'multiline':False]
['text':' 2. We can't GC.','line_number':1178,'multiline':False]
['text':' 3. Exceptions should not be pending/thrown.','line_number':1179,'multiline':False]
['text':'','line_number':1180,'multiline':False]
['text':' Note that #3 is a precaution, not a requirement. By default, we','line_number':1181,'multiline':False]
['text':' assert that the function is not called with a pending exception,','line_number':1182,'multiline':False]
['text':' and that it does not throw an exception itself.','line_number':1183,'multiline':False]
['text':' Set/restore the performing GC flag for the current thread.','line_number':1205,'multiline':False]
['text':' In debug builds, update the context state to indicate that the current thread','line_number':1245,'multiline':False]
['text':' is being used for GC marking.','line_number':1246,'multiline':False]
['text':' In debug builds, update the context state to indicate that the current thread','line_number':1252,'multiline':False]
['text':' is being used for GC sweeping.','line_number':1253,'multiline':False]
['text':' In debug builds, update the context state to indicate that the current thread','line_number':1259,'multiline':False]
['text':' is being used for GC finalization.','line_number':1260,'multiline':False]
['text':' Note that this class does not suppress buffer allocation/reallocation in the','line_number':1266,'multiline':False]
['text':' nursery, only Cells themselves.','line_number':1267,'multiline':False]
['text':' namespace gc','line_number':1278,'multiline':False]
['text':' namespace js ','line_number':1280,'multiline':True]
['text':' vm_JSContext_h ','line_number':1286,'multiline':True]
