['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::shadow::Zone','line_number':8,'multiline':False]
['text':' nbytes can be zero here for SharedArrayBuffers.','line_number':88,'multiline':False]
['text':' Allocations can grow, so add any increase over the previous size and record','line_number':101,'multiline':False]
['text':' the new size.','line_number':102,'multiline':False]
['text':' nbytes can be zero here for SharedArrayBuffers.','line_number':115,'multiline':False]
['text':' Unfortunately we don't have enough context here to know whether we're being','line_number':135,'multiline':False]
['text':' called on behalf of the collector so we have to do a TLS lookup to find','line_number':136,'multiline':False]
['text':' out.','line_number':137,'multiline':False]
['text':' Note: don't use |this| before initializing helperThreadUse_!','line_number':145,'multiline':False]
['text':' ProtectedData checks in CheckZone::check may read this field.','line_number':146,'multiline':False]
['text':' Ensure that there are no vtables to mess us up here. ','line_number':189,'multiline':True]
['text':' We can't call updateGCStartThresholds until the Zone has been constructed.','line_number':195,'multiline':False]
['text':' This can be called when barriers have been temporarily disabled by','line_number':232,'multiline':False]
['text':' AutoDisableBarriers. In that case, don't update needsIncrementalBarrier_','line_number':233,'multiline':False]
['text':' and barriers will be re-enabled by ~AutoDisableBarriers() if necessary.','line_number':234,'multiline':False]
['text':' Update the barriers state when we transition between marking and','line_number':239,'multiline':False]
['text':' non-marking states, unless barriers have been disabled.','line_number':240,'multiline':False]
['text':' Sweep gcNurseryEphemeronEdges to move live (forwarded) keys to','line_number':277,'multiline':False]
['text':' gcEphemeronEdges, scanning through all the entries for such keys to','line_number':278,'multiline':False]
['text':' update them.','line_number':279,'multiline':False]
['text':'','line_number':280,'multiline':False]
['text':' Forwarded and dead keys may also appear in their delegates' entries,','line_number':281,'multiline':False]
['text':' so sweep those too (see below.)','line_number':282,'multiline':False]
['text':' The tricky case is when the key has a delegate that was already','line_number':284,'multiline':False]
['text':' tenured. Then it will be in its compartment's gcEphemeronEdges, but we','line_number':285,'multiline':False]
['text':' still need to update the key (which will be in the entries','line_number':286,'multiline':False]
['text':' associated with it.)','line_number':287,'multiline':False]
['text':' Dead nursery cell => discard.','line_number':291,'multiline':False]
['text':' Key been moved. The value is an array of <map,key> pairs; update all','line_number':295,'multiline':False]
['text':' keys in that array.','line_number':296,'multiline':False]
['text':' Live (moved) nursery cell. Append entries to gcEphemeronEdges.','line_number':300,'multiline':False]
['text':' If the key has a delegate, then it will map to a WeakKeyEntryVector','line_number':317,'multiline':False]
['text':' containing the key that needs to be updated.','line_number':318,'multiline':False]
['text':' If delegate was formerly nursery-allocated, we will sweep its entries','line_number':326,'multiline':False]
['text':' when we visit its gcNurseryEphemeronEdges (if we haven't already). Note','line_number':327,'multiline':False]
['text':' that we don't know the nursery address of the delegate, since the','line_number':328,'multiline':False]
['text':' location it was stored in has already been updated.','line_number':329,'multiline':False]
['text':'','line_number':330,'multiline':False]
['text':' Otherwise, it will be in gcEphemeronEdges and we sweep it here.','line_number':331,'multiline':False]
['text':' static ','line_number':351,'multiline':True]
['text':' Sweep the wrapper map to update keys (wrapped values) in other','line_number':356,'multiline':False]
['text':' compartments that may have been moved.','line_number':357,'multiline':False]
['text':' Assert that the postbarriers have worked and that nothing is left in the','line_number':383,'multiline':False]
['text':' wrapper map that points into the nursery, and that the hash table entries','line_number':384,'multiline':False]
['text':' are discoverable.','line_number':385,'multiline':False]
['text':' Finalize unreachable (key,value) pairs in all weak maps. ','line_number':396,'multiline':True]
['text':' Assert no JitScripts are marked as active.','line_number':411,'multiline':False]
['text':' Mark JitScripts on the stack as active.','line_number':420,'multiline':False]
['text':' Invalidate all Ion code in this zone.','line_number':424,'multiline':False]
['text':' Discard baseline script if it's not marked as active.','line_number':436,'multiline':False]
['text':' Warm-up counter for scripts are reset on GC. After discarding code we','line_number':447,'multiline':False]
['text':' need to let it warm back up to get information such as which','line_number':448,'multiline':False]
['text':' opcodes are setting array holes or accessing getter properties.','line_number':449,'multiline':False]
['text':' Try to release the script's JitScript. This should happen after','line_number':452,'multiline':False]
['text':' releasing JIT code because we can't do this when the script still has','line_number':453,'multiline':False]
['text':' JIT code.','line_number':454,'multiline':False]
['text':' Try to discard the ScriptCounts too.','line_number':459,'multiline':False]
['text':' If we did not release the JitScript, we need to purge optimized IC','line_number':468,'multiline':False]
['text':' stubs because the optimizedStubSpace will be purged below.','line_number':469,'multiline':False]
['text':' Finally, reset the active flag.','line_number':479,'multiline':False]
['text':'
   * When scripts contains pointers to nursery things, the store buffer
   * can contain entries that point into the optimized stub space. Since
   * this method can be called outside the context of a GC, this situation
   * could result in us trying to mark invalid store buffer entries.
   *
   * Defer freeing any allocated blocks until after the next minor GC.
   ','line_number':483,'multiline':True]
['text':' resetUses = ','line_number':524,'multiline':True]
['text':' cancelOffThread = ','line_number':525,'multiline':True]
['text':' Zones in use by exclusive threads are not collected, and threads using','line_number':554,'multiline':False]
['text':' them cannot access the main runtime's gcNumber without racing.','line_number':555,'multiline':False]
['text':' The atoms zone cannot be collected while off-thread parsing is taking','line_number':582,'multiline':False]
['text':' place.','line_number':583,'multiline':False]
['text':' We don't collect the self hosting zone after it has been initialized.','line_number':588,'multiline':False]
['text':' Zones that will be or are currently used by other threads cannot be','line_number':593,'multiline':False]
['text':' collected.','line_number':594,'multiline':False]
['text':' Type descriptor objects are always tenured so we don't need post barriers','line_number':634,'multiline':False]
['text':' on the set.','line_number':635,'multiline':False]
['text':' Also purge the dtoa caches so that subsequent lookups populate atom','line_number':676,'multiline':False]
['text':' cache too.','line_number':677,'multiline':False]
['text':' The analysis sees that JSRuntime::onOutOfMemory could report an error,','line_number':723,'multiline':False]
['text':' which with a JSErrorInterceptor could GC. But we're passing a null cx (to','line_number':724,'multiline':False]
['text':' a default parameter) so the error will not be reported.','line_number':725,'multiline':False]
['text':' Performance optimization: the script-table keys are JSScripts, which','line_number':825,'multiline':False]
['text':' cannot be in the nursery, so we can skip this tracing if we are only in a','line_number':826,'multiline':False]
['text':' minor collection. We static-assert this fact above.','line_number':827,'multiline':False]
['text':' N.B.: the script-table keys are weak *except* in an exceptional case: when','line_number':832,'multiline':False]
['text':' then --dump-bytecode command line option or the PCCount JSFriend API is','line_number':833,'multiline':False]
['text':' used, then the scripts for all counts must remain alive. We only trace','line_number':834,'multiline':False]
['text':' when the `trc->runtime()->profilingScripts` flag is set. This flag is','line_number':835,'multiline':False]
['text':' cleared in JSRuntime::destroyRuntime() during shutdown to ensure that','line_number':836,'multiline':False]
['text':' scripts are collected before the runtime goes away completely.','line_number':837,'multiline':False]
['text':' Trace the debugger's DebugScript weak map.','line_number':847,'multiline':False]
['text':' Map entries are removed by BaseScript::finalize, but we need to update the','line_number':854,'multiline':False]
['text':' script pointers here in case they are moved by the GC.','line_number':855,'multiline':False]
['text':' MOZ_VTUNE','line_number':936,'multiline':False]
['text':' JS_CACHEIR_SPEW','line_number':948,'multiline':False]
['text':' Clear all hasScriptCounts_ flags of BaseScript, in order to release all','line_number':957,'multiline':False]
['text':' ScriptCounts entries of the given realm.','line_number':958,'multiline':False]
['text':' We can't destroy the ScriptCounts yet if the script has Baseline code,','line_number':964,'multiline':False]
['text':' because Baseline code bakes in pointers to the counters. The ScriptCounts','line_number':965,'multiline':False]
['text':' will be destroyed in Zone::discardJitCode when discarding the JitScript.','line_number':966,'multiline':False]
['text':' Finalization callbacks are not called if we're shutting down.','line_number':989,'multiline':False]
