['text':' This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'*
 * 8.2.1 Intl.getCanonicalLocales ( locales )
 *
 * ES2017 Intl draft rev 947aa9a0c853422824a0c9510d8f09be3eb416b9
 ','line_number':5,'multiline':True]
['text':' Steps 1-2.','line_number':11,'multiline':False]
['text':'*
 * This function is a custom function in the style of the standard Intl.*
 * functions, that isn't part of any spec or proposal yet.
 *
 * Returns an object with the following properties:
 *   locale:
 *     The actual resolved locale.
 *
 *   calendar:
 *     The default calendar of the resolved locale.
 *
 *   firstDayOfWeek:
 *     The first day of the week for the resolved locale.
 *
 *   minDays:
 *     The minimum number of days in a week for the resolved locale.
 *
 *   weekendStart:
 *     The day considered the beginning of a weekend for the resolved locale.
 *
 *   weekendEnd:
 *     The day considered the end of a weekend for the resolved locale.
 *
 * Days are encoded as integers in the range 1=Sunday to 7=Saturday.
 ','line_number':15,'multiline':True]
['text':' 1. Let requestLocales be ? CanonicalizeLocaleList(locales).','line_number':41,'multiline':False]
['text':' 2. Let localeData be %DateTimeFormat%.[[localeData]].','line_number':46,'multiline':False]
['text':' 3. Let localeOpt be a new Record.','line_number':49,'multiline':False]
['text':' 4. Set localeOpt.[[localeMatcher]] to "best fit".','line_number':52,'multiline':False]
['text':' 5. Let r be ResolveLocale(%DateTimeFormat%.[[availableLocales]],','line_number':55,'multiline':False]
['text':'    requestedLocales, localeOpt,','line_number':56,'multiline':False]
['text':'    %DateTimeFormat%.[[relevantExtensionKeys]], localeData).','line_number':57,'multiline':False]
['text':' 6. Let result be GetCalendarInfo(r.[[locale]]).','line_number':64,'multiline':False]
['text':' 7. Return result.','line_number':69,'multiline':False]
['text':'*
 * This function is a custom function in the style of the standard Intl.*
 * functions, that isn't part of any spec or proposal yet.
 * We want to use it internally to retrieve translated values from CLDR in
 * order to ensure they're aligned with what Intl API returns.
 *
 * This API may one day be a foundation for an ECMA402 API spec proposal.
 *
 * The function takes two arguments - locales which is a list of locale strings
 * and options which is an object with two optional properties:
 *
 *   keys:
 *     an Array of string values that are paths to individual terms
 *
 *   style:
 *     a String with a value "long", "short" or "narrow"
 *
 * It returns an object with properties:
 *
 *   locale:
 *     a negotiated locale string
 *
 *   style:
 *     negotiated style
 *
 *   values:
 *     A key-value pair list of requested keys and corresponding
 *     translated values
 *
 ','line_number':73,'multiline':True]
['text':' 1. Let requestLocales be ? CanonicalizeLocaleList(locales).','line_number':104,'multiline':False]
['text':' 2. If options is undefined, then','line_number':107,'multiline':False]
['text':' a. Let options be ObjectCreate(null).','line_number':109,'multiline':False]
['text':' 3. Else,','line_number':111,'multiline':False]
['text':' a. Let options be ? ToObject(options).','line_number':113,'multiline':False]
['text':' 4. Let localeData be %DateTimeFormat%.[[localeData]].','line_number':118,'multiline':False]
['text':' 5. Let localeOpt be a new Record.','line_number':121,'multiline':False]
['text':' 6. Set localeOpt.[[localeMatcher]] to "best fit".','line_number':124,'multiline':False]
['text':' 7. Let r be ResolveLocale(%DateTimeFormat%.[[availableLocales]], requestedLocales, localeOpt,','line_number':127,'multiline':False]
['text':'    %DateTimeFormat%.[[relevantExtensionKeys]], localeData).','line_number':128,'multiline':False]
['text':' 8. Let style be ? GetOption(options, "style", "string", « "long", "short", "narrow" », "long").','line_number':135,'multiline':False]
['text':' 9. Let keys be ? Get(options, "keys").','line_number':138,'multiline':False]
['text':' 10. If keys is undefined,','line_number':141,'multiline':False]
['text':' a. Let keys be ArrayCreate(0).','line_number':143,'multiline':False]
['text':' 11. Else,','line_number':146,'multiline':False]
['text':'   a. If Type(keys) is not Object, throw a TypeError exception.','line_number':147,'multiline':False]
['text':' 12. Let processedKeys be ArrayCreate(0).','line_number':151,'multiline':False]
['text':' (This really should be a List, but we use an Array here in order that','line_number':152,'multiline':False]
['text':' |intl_ComputeDisplayNames| may infallibly access the list's length via','line_number':153,'multiline':False]
['text':' |ArrayObject::length|.)','line_number':154,'multiline':False]
['text':' 13. Let len be ? ToLength(? Get(keys, "length")).','line_number':157,'multiline':False]
['text':' 14. Let i be 0.','line_number':160,'multiline':False]
['text':' 15. Repeat, while i < len','line_number':161,'multiline':False]
['text':' a. Let processedKey be ? ToString(? Get(keys, i)).','line_number':163,'multiline':False]
['text':' b. Perform ? CreateDataPropertyOrThrow(processedKeys, i, processedKey).','line_number':164,'multiline':False]
['text':' 16. Let names be ? ComputeDisplayNames(r.[[locale]], style, processedKeys).','line_number':168,'multiline':False]
['text':' 17. Let values be ObjectCreate(%ObjectPrototype%).','line_number':171,'multiline':False]
['text':' 18. Set i to 0.','line_number':174,'multiline':False]
['text':' 19. Repeat, while i < len','line_number':175,'multiline':False]
['text':' a. Let key be ? Get(processedKeys, i).','line_number':177,'multiline':False]
['text':' b. Let name be ? Get(names, i).','line_number':179,'multiline':False]
['text':' c. Assert: Type(name) is string.','line_number':181,'multiline':False]
['text':' d. Assert: the length of name is greater than zero.','line_number':183,'multiline':False]
['text':' e. Perform ? DefinePropertyOrThrow(values, key, name).','line_number':185,'multiline':False]
['text':' 20. Let options be ObjectCreate(%ObjectPrototype%).','line_number':189,'multiline':False]
['text':' 21. Perform ! DefinePropertyOrThrow(result, "locale", r.[[locale]]).','line_number':190,'multiline':False]
['text':' 22. Perform ! DefinePropertyOrThrow(result, "style", style).','line_number':191,'multiline':False]
['text':' 23. Perform ! DefinePropertyOrThrow(result, "values", values).','line_number':192,'multiline':False]
['text':' 24. Return result.','line_number':195,'multiline':False]
['text':' In the future, we may want to expose uloc_getAvailable and use it here.','line_number':202,'multiline':False]
