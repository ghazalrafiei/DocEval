['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Perform a downcast. Should be removed by Bug 996602.','line_number':25,'multiline':False]
['text':' For Double, Float and SimdData, make the move ctors explicit so that MSVC','line_number':40,'multiline':False]
['text':' knows what to use instead of copying these data structures.','line_number':41,'multiline':False]
['text':' Containers use SystemAllocPolicy since wasm releases memory after each','line_number':55,'multiline':False]
['text':' function is compiled, and these need to live until after all functions','line_number':56,'multiline':False]
['text':' are compiled.','line_number':57,'multiline':False]
['text':' Evaluate srcDest = minmax<isMax>{Float32,Double}(srcDest, second).','line_number':103,'multiline':False]
['text':' Checks for NaN if canBeNaN is true.','line_number':104,'multiline':False]
['text':' Use the ImmWord version of mov to register, which has special','line_number':134,'multiline':False]
['text':' optimizations. Casting to uint32_t here ensures that the value','line_number':135,'multiline':False]
['text':' is zero-extended.','line_number':136,'multiline':False]
['text':' This implementation follows Linux.','line_number':158,'multiline':False]
['text':' vcvtsi2sd and friends write only part of their output register, which','line_number':183,'multiline':False]
['text':' causes slowdowns on out-of-order processors. Explicitly break','line_number':184,'multiline':False]
['text':' dependencies with vxorpd (and vxorps elsewhere), which are handled','line_number':185,'multiline':False]
['text':' specially in modern CPUs, for this purpose. See sections 8.14, 9.8,','line_number':186,'multiline':False]
['text':' 10.8, 12.9, 13.16, 14.14, and 15.8 of Agner's Microarchitecture','line_number':187,'multiline':False]
['text':' document.','line_number':188,'multiline':False]
['text':' Clear the output register first to break dependencies; see above;','line_number':199,'multiline':False]
['text':' Clear the output register first to break dependencies; see above;','line_number':204,'multiline':False]
['text':' Clear the output register first to break dependencies; see above;','line_number':212,'multiline':False]
['text':' Class which ensures that registers used in byte ops are compatible with','line_number':223,'multiline':False]
['text':' such instructions, even if the original register passed in wasn't. This','line_number':224,'multiline':False]
['text':' only applies to x86, as on x64 all registers are valid single byte regs.','line_number':225,'multiline':False]
['text':' This doesn't lead to great code but helps to simplify code generation.','line_number':226,'multiline':False]
['text':'','line_number':227,'multiline':False]
['text':' Note that this can currently only be used in cases where the register is','line_number':228,'multiline':False]
['text':' read from by the guarded instruction, not written to.','line_number':229,'multiline':False]
['text':' Use vmovapd instead of vmovsd to avoid dependencies.','line_number':358,'multiline':False]
['text':' Note that if the conversion failed (because the converted','line_number':384,'multiline':False]
['text':' result is larger than the maximum signed int32, or less than the','line_number':385,'multiline':False]
['text':' least signed int32, or NaN), this will return the undefined integer','line_number':386,'multiline':False]
['text':' value (0x8000000).','line_number':387,'multiline':False]
['text':' SIMD methods, defined in MacroAssembler-x86-shared-SIMD.cpp.','line_number':406,'multiline':False]
['text':' SIMD inline methods private to the implementation, that appear to be used.','line_number':546,'multiline':False]
['text':' The shuffle instruction on x86 is such that it moves 2 words from','line_number':672,'multiline':False]
['text':' the dest and 2 words from the src operands. To simplify things, just','line_number':673,'multiline':False]
['text':' clobber the output with the input and apply the instruction','line_number':674,'multiline':False]
['text':' afterwards.','line_number':675,'multiline':False]
['text':' Note: this is useAtStart-safe because src isn't read afterwards.','line_number':676,'multiline':False]
['text':' Unused SIMD methods, defined in MacroAssemble-x86-shared-SIMD-unused.cpp.','line_number':681,'multiline':False]
['text':' Don't use these without moving them out of that file and moving the','line_number':682,'multiline':False]
['text':' declaration into the list above.','line_number':683,'multiline':False]
['text':' Unused inline methods ditto.','line_number':719,'multiline':False]
['text':' This function is an approximation of the result, this might need','line_number':765,'multiline':False]
['text':' fix up if the spec requires a given precision for this operation.','line_number':766,'multiline':False]
['text':' TODO See also bug 1068028.','line_number':767,'multiline':False]
['text':' TODO See comment above. See also bug 1068028.','line_number':772,'multiline':False]
['text':' Note this uses vshufps, which is a cross-domain penalty on CPU where it','line_number':797,'multiline':False]
['text':' applies, but that's the way clang and gcc do it.','line_number':798,'multiline':False]
['text':' End unused SIMD.','line_number':803,'multiline':False]
['text':' Use vmovaps instead of vmovss to avoid dependencies.','line_number':840,'multiline':False]
['text':' Checks whether a double is representable as a 32-bit integer. If so, the','line_number':844,'multiline':False]
['text':' integer is written to the output register. Otherwise, a bailout is taken to','line_number':845,'multiline':False]
['text':' the given snapshot. This function overwrites the scratch float register.','line_number':846,'multiline':False]
['text':' Check for -0.0','line_number':849,'multiline':False]
['text':' Checks whether a float32 is representable as a 32-bit integer. If so, the','line_number':862,'multiline':False]
['text':' integer is written to the output register. Otherwise, a bailout is taken to','line_number':863,'multiline':False]
['text':' the given snapshot. This function overwrites the scratch float register.','line_number':864,'multiline':False]
['text':' Check for -0.0','line_number':867,'multiline':False]
['text':' vcvttsd2si returns 0x80000000 on failure. Test for it by','line_number':881,'multiline':False]
['text':' subtracting 1 and testing overflow. The other possibility is to test','line_number':882,'multiline':False]
['text':' equality for INT_MIN after a comparison, but 1 costs fewer bytes to','line_number':883,'multiline':False]
['text':' materialize.','line_number':884,'multiline':False]
['text':' Same trick as explained in the above comment.','line_number':890,'multiline':False]
['text':' Loading zero with xor is specially optimized in hardware.','line_number':899,'multiline':False]
['text':' It is also possible to load several common constants using vpcmpeqw','line_number':905,'multiline':False]
['text':' to get all ones and then vpsllq and vpsrlq to get zeros at the ends,','line_number':906,'multiline':False]
['text':' as described in "13.4 Generating constants" of','line_number':907,'multiline':False]
['text':' "2. Optimizing subroutines in assembly language" by Agner Fog, and as','line_number':908,'multiline':False]
['text':' previously implemented here. However, with x86 and x64 both using','line_number':909,'multiline':False]
['text':' constant pool loads for double constants, this is probably only','line_number':910,'multiline':False]
['text':' worthwhile in cases where a load is likely to be delayed.','line_number':911,'multiline':False]
['text':' See comment above','line_number':917,'multiline':False]
['text':' Note that C++ bool is only 1 byte, so zero extend it to clear the','line_number':946,'multiline':False]
['text':' higher-order bits.','line_number':947,'multiline':False]
['text':' If the register we're defining is a single byte register,','line_number':954,'multiline':False]
['text':' take advantage of the setCC instruction','line_number':955,'multiline':False]
['text':' Note a subtlety here: FLAGS is live at this point, and the','line_number':972,'multiline':False]
['text':' mov interface doesn't guarantee to preserve FLAGS. Use','line_number':973,'multiline':False]
['text':' movl instead of mov, because the movl instruction','line_number':974,'multiline':False]
['text':' preserves FLAGS.','line_number':975,'multiline':False]
['text':' If the register we're defining is a single byte register,','line_number':990,'multiline':False]
['text':' take advantage of the setCC instruction','line_number':991,'multiline':False]
['text':' Emit a JMP that can be toggled to a CMP. See ToggleToJmp(), ToggleToCmp().','line_number':1003,'multiline':False]
['text':' Exists for ARM compatibility.','line_number':1016,'multiline':False]
['text':' Specialize for float to use movaps. Use movdqa for everything else.','line_number':1025,'multiline':False]
['text':' Specialize for float to use movaps. Use movdqa for everything else.','line_number':1038,'multiline':False]
['text':' namespace jit','line_number':1093,'multiline':False]
['text':' namespace js','line_number':1094,'multiline':False]
['text':' jit_x86_shared_MacroAssembler_x86_shared_h ','line_number':1096,'multiline':True]
