['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS bytecode generation. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT','line_number':12,'multiline':False]
['text':' MOZ_STACK_CLASS, MOZ_ALWAYS_INLINE, MOZ_NEVER_INLINE, MOZ_RAII','line_number':13,'multiline':False]
['text':' mozilla::Maybe, mozilla::Some','line_number':14,'multiline':False]
['text':' mozilla::Span','line_number':15,'multiline':False]
['text':' mozilla::Vector','line_number':16,'multiline':False]
['text':' std::function','line_number':18,'multiline':False]
['text':' ptrdiff_t','line_number':19,'multiline':False]
['text':' uint16_t, uint32_t','line_number':20,'multiline':False]
['text':' CompletionKind','line_number':22,'multiline':False]
['text':' ScopeIndex','line_number':24,'multiline':False]
['text':' BCEParserHandle','line_number':25,'multiline':False]
['text':' NestableControl','line_number':26,'multiline':False]
['text':' BytecodeOffset','line_number':27,'multiline':False]
['text':' BytecodeSection, PerScriptData, CGScopeList','line_number':28,'multiline':False]
['text':' DestructuringFlavor','line_number':29,'multiline':False]
['text':' EitherParser','line_number':30,'multiline':False]
['text':' ErrorReporter','line_number':31,'multiline':False]
['text':' FullParseHandler','line_number':32,'multiline':False]
['text':' IteratorKind','line_number':33,'multiline':False]
['text':' JumpList, JumpTarget','line_number':34,'multiline':False]
['text':' NameLocation','line_number':35,'multiline':False]
['text':' AtomIndexMap','line_number':36,'multiline':False]
['text':' ParseNode and subclasses','line_number':37,'multiline':False]
['text':' Parser, PropListType','line_number':38,'multiline':False]
['text':' TaggedParserAtomIndex','line_number':39,'multiline':False]
['text':' PrivateOpEmitter','line_number':40,'multiline':False]
['text':' ScriptIndex','line_number':41,'multiline':False]
['text':' SharedContext, TopLevelFunction','line_number':42,'multiline':False]
['text':' SrcNoteType','line_number':43,'multiline':False]
['text':' TokenPos','line_number':44,'multiline':False]
['text':' ValueUsage','line_number':45,'multiline':False]
['text':' JS::Rooted, JS::Handle','line_number':46,'multiline':False]
['text':' jsbytecode','line_number':47,'multiline':False]
['text':' BuiltinObjectKind','line_number':48,'multiline':False]
['text':' JSOp','line_number':49,'multiline':False]
['text':' CheckIsObjectKind','line_number':50,'multiline':False]
['text':' FunctionPrefixKind','line_number':51,'multiline':False]
['text':' GeneratorResumeKind','line_number':52,'multiline':False]
['text':' JSFunction','line_number':53,'multiline':False]
['text':' JSScript, BaseScript, MemberInitializers','line_number':54,'multiline':False]
['text':' ReportOutOfMemory','line_number':55,'multiline':False]
['text':' GCThingIndex','line_number':56,'multiline':False]
['text':' TryNoteKind','line_number':57,'multiline':False]
['text':' JSAtom','line_number':58,'multiline':False]
['text':' ThrowMsgKind, ThrowCondition','line_number':59,'multiline':False]
['text':' [SMDOC] Bytecode emission','line_number':78,'multiline':False]
['text':'','line_number':79,'multiline':False]
['text':' Bytecode emitter class and helper classes for generating bytecode and related','line_number':80,'multiline':False]
['text':' stencil data from AST generated by JS parser.','line_number':81,'multiline':False]
['text':'','line_number':82,'multiline':False]
['text':'','line_number':83,'multiline':False]
['text':' BytecodeEmitter','line_number':84,'multiline':False]
['text':' ---------------','line_number':85,'multiline':False]
['text':'','line_number':86,'multiline':False]
['text':' BytecodeEmitter receives an AST, and utilizes helper classes to generate the','line_number':87,'multiline':False]
['text':' bytecode sequence, and related stencil data.','line_number':88,'multiline':False]
['text':'','line_number':89,'multiline':False]
['text':' BytecodeEmitter can be nested, in order to emit inner non-lazy function','line_number':90,'multiline':False]
['text':' scripts.','line_number':91,'multiline':False]
['text':'','line_number':92,'multiline':False]
['text':'','line_number':93,'multiline':False]
['text':' Bytecode structures','line_number':94,'multiline':False]
['text':' -------------------','line_number':95,'multiline':False]
['text':'','line_number':96,'multiline':False]
['text':' While bytecode is being emitted, it is separated into 2 parts, the prologue','line_number':97,'multiline':False]
['text':' and the main part.  The prologue part contains instantiation of the declared','line_number':98,'multiline':False]
['text':' variables, functions, and special names in function.  The main part contains','line_number':99,'multiline':False]
['text':' the remaining part of the bytecode.','line_number':100,'multiline':False]
['text':'','line_number':101,'multiline':False]
['text':' The generated bytecode is stored into the following 2 classes, before','line_number':102,'multiline':False]
['text':' converting them into stencil data (See ImmutableScriptData and','line_number':103,'multiline':False]
['text':' BytecodeEmitter::createImmutableScriptData):','line_number':104,'multiline':False]
['text':'','line_number':105,'multiline':False]
['text':'   * BytecodeSection','line_number':106,'multiline':False]
['text':'   * PerScriptData','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' BytecodeSection stores the bytecode sequence and data directly associated','line_number':109,'multiline':False]
['text':' with opcode or index inside the bytecode sequence.','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' PerScriptData contains data referred from the bytecode, that is mostly the','line_number':112,'multiline':False]
['text':' list of GC things.','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':'','line_number':115,'multiline':False]
['text':' Bindings','line_number':116,'multiline':False]
['text':' --------','line_number':117,'multiline':False]
['text':'','line_number':118,'multiline':False]
['text':' # Scope and bindings','line_number':119,'multiline':False]
['text':'','line_number':120,'multiline':False]
['text':' When emitting AST node that's associated with a given scope, EmitterScope is','line_number':121,'multiline':False]
['text':' allocated to store/cache the bindings information.','line_number':122,'multiline':False]
['text':'','line_number':123,'multiline':False]
['text':' This information is used when emitting an opcode that accesses bindings, to','line_number':124,'multiline':False]
['text':' determine where the binding is stored, and how the binding should be','line_number':125,'multiline':False]
['text':' accessed, including which opcode to use and what operand to use for it.','line_number':126,'multiline':False]
['text':'','line_number':127,'multiline':False]
['text':'','line_number':128,'multiline':False]
['text':' # Temporal Dead Zone (TDZ) check cache','line_number':129,'multiline':False]
['text':'','line_number':130,'multiline':False]
['text':' The spec requires TDZ check for all lexical variable access, but emitting','line_number':131,'multiline':False]
['text':' TDZ check for all operation increases the bytecode size and affects the','line_number':132,'multiline':False]
['text':' performance.  TDZCheckCache is a cache to optimize away unnecessary TDZ check','line_number':133,'multiline':False]
['text':' operations.','line_number':134,'multiline':False]
['text':'','line_number':135,'multiline':False]
['text':' See comments for TDZCheckCache for more details.','line_number':136,'multiline':False]
['text':'','line_number':137,'multiline':False]
['text':'','line_number':138,'multiline':False]
['text':' Control structures','line_number':139,'multiline':False]
['text':' ------------------','line_number':140,'multiline':False]
['text':'','line_number':141,'multiline':False]
['text':' # Jump list','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':' When emitting jump-related bytecode (if-else, break/continue, try-catch),','line_number':144,'multiline':False]
['text':' forward jump is tracked by JumpList class, in order to patch the jump','line_number':145,'multiline':False]
['text':' after the jump target is emitted.','line_number':146,'multiline':False]
['text':'','line_number':147,'multiline':False]
['text':' See the comment above JumpList class for mode details.','line_number':148,'multiline':False]
['text':'','line_number':149,'multiline':False]
['text':'','line_number':150,'multiline':False]
['text':' # Loop and label','line_number':151,'multiline':False]
['text':'','line_number':152,'multiline':False]
['text':' Control structure related to break/continue is handled by NestableControl and','line_number':153,'multiline':False]
['text':' its subclasses.  Those classes handle jump with labelled and un-labelled','line_number':154,'multiline':False]
['text':' break/continue, stack balancing around them, TDZ check cache for the','line_number':155,'multiline':False]
['text':' loop's basic block, and association between the control and the scope.','line_number':156,'multiline':False]
['text':'','line_number':157,'multiline':False]
['text':'','line_number':158,'multiline':False]
['text':' Emitter helpers','line_number':159,'multiline':False]
['text':' ---------------','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' Bytecode sequence or structure specific to certain syntax (e.g. if, for, try)','line_number':162,'multiline':False]
['text':' are handled by emitter helper classes.','line_number':163,'multiline':False]
['text':'','line_number':164,'multiline':False]
['text':' Each emitter helper is defined in *Emitter.{cpp,h} in this directory.','line_number':165,'multiline':False]
['text':'','line_number':166,'multiline':False]
['text':' Emitter helpers should meet the following requirements:','line_number':167,'multiline':False]
['text':'   * helper classes should be ParseNode-agnostic','line_number':168,'multiline':False]
['text':'   * helper classes shouldn't contain `JS::Rooted` field, given they can be','line_number':169,'multiline':False]
['text':'     held in `mozilla::Maybe` in the consumer or other helper classes','line_number':170,'multiline':False]
['text':'   * instantiation (ctor/dtor) of the emitter helper class shouldn't','line_number':171,'multiline':False]
['text':'     modify BytecodeEmitter, except for nestable controls','line_number':172,'multiline':False]
['text':'   * instantiation (ctor/dtor) of the emitter helper class shouldn't','line_number':173,'multiline':False]
['text':'     read BytecodeEmitter field that can change before the first method call.','line_number':174,'multiline':False]
['text':'     Such data should be explicitly passed as parameter, or be accessed inside','line_number':175,'multiline':False]
['text':'     the method','line_number':176,'multiline':False]
['text':'   * methods that emits bytecode should be named `emit*` or `prepareFor*`','line_number':177,'multiline':False]
['text':'   * methods and their names shouldn't require the consumer knowing the','line_number':178,'multiline':False]
['text':'     details of the bytecode sequence/structure that the helper emits','line_number':179,'multiline':False]
['text':'     * implicit branch or scope/control handling should be hidden from the','line_number':180,'multiline':False]
['text':'       consumer','line_number':181,'multiline':False]
['text':'     * If there are multiple operations between bytecode that the consumer','line_number':182,'multiline':False]
['text':'       emits, they should be wrapped into single `emit*` or `prepareFor*`','line_number':183,'multiline':False]
['text':'       method','line_number':184,'multiline':False]
['text':'     e.g.','line_number':185,'multiline':False]
['text':'       // Bad!','line_number':186,'multiline':False]
['text':'       helper.emitJumpAroundA();','line_number':187,'multiline':False]
['text':'       helper.allocateScopeForA();','line_number':188,'multiline':False]
['text':'       ... // emit bytecode for A here','line_number':189,'multiline':False]
['text':'       helper.deallocateScopeForA();','line_number':190,'multiline':False]
['text':'       helper.emitJumpAroundB();','line_number':191,'multiline':False]
['text':'       helper.allocateScopeForB();','line_number':192,'multiline':False]
['text':'       ... // emit bytecode for B here','line_number':193,'multiline':False]
['text':'       helper.deallocateScopeForB();','line_number':194,'multiline':False]
['text':'       helper.emitJumpTarget();','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':'       // Good!','line_number':197,'multiline':False]
['text':'       helper.prepareForA();','line_number':198,'multiline':False]
['text':'       ... // emit bytecode for A here','line_number':199,'multiline':False]
['text':'       helper.prepareForB();','line_number':200,'multiline':False]
['text':'       ... // emit bytecode for B here','line_number':201,'multiline':False]
['text':'       helper.emitEnd();','line_number':202,'multiline':False]
['text':'   * helper classes should track state transition and assert it in each','line_number':203,'multiline':False]
['text':'     method call, to avoid misuse','line_number':204,'multiline':False]
['text':'   * parameters related to source code offset should use `mozilla::Maybe`,','line_number':205,'multiline':False]
['text':'     to support the case that there's no position information','line_number':206,'multiline':False]
['text':'   * it's recommended to defer receiving parameter until the parameter value','line_number':207,'multiline':False]
['text':'     is actually used in the method, instead of receiving and storing them','line_number':208,'multiline':False]
['text':'     into instance fields','line_number':209,'multiline':False]
['text':'','line_number':210,'multiline':False]
['text':' See comment block above each helper class for more details and example usage.','line_number':211,'multiline':False]
['text':' Context shared between parsing and bytecode generation.','line_number':214,'multiline':False]
['text':' Enclosing function or global context.','line_number':219,'multiline':False]
['text':' switchToMain sets this to the bytecode offset of the main section.','line_number':236,'multiline':False]
['text':' Private storage for parser wrapper. DO NOT REFERENCE INTERNALLY. May not be','line_number':240,'multiline':False]
['text':' initialized. Use |parser| instead.','line_number':241,'multiline':False]
['text':' maximum number of fixed frame slots so far ','line_number':247,'multiline':True]
['text':' Index into scopeList of the body scope.','line_number':249,'multiline':False]
['text':' When compiling in self-hosted mode, we have special intrinsics that act as','line_number':257,'multiline':False]
['text':' decorators for exported functions. To keeps things simple, we only allow','line_number':258,'multiline':False]
['text':' these to target the last top-level function emitted. This field tracks that','line_number':259,'multiline':False]
['text':' function.','line_number':260,'multiline':False]
['text':' When parsing internal code such as self-hosted functions or synthetic','line_number':282,'multiline':False]
['text':' class constructors, we do not emit breakpoint and srcnote data since there','line_number':283,'multiline':False]
['text':' is no direcly corresponding user-visible sources.','line_number':284,'multiline':False]
['text':' Script contains finally block.','line_number':287,'multiline':False]
['text':' Emit JSOp::GetIntrinsic instead of JSOp::GetName and assert that','line_number':293,'multiline':False]
['text':' JSOp::GetName and JSOp::*GName don't ever get emitted. See the comment','line_number':294,'multiline':False]
['text':' for the field |selfHostingMode| in Parser.h for details.','line_number':295,'multiline':False]
['text':' Check the static scope chain of the root function for resolving free','line_number':298,'multiline':False]
['text':' variable accesses in the script.','line_number':299,'multiline':False]
['text':' The end location of a function body that is being emitted.','line_number':307,'multiline':False]
['text':'
   * Note that BytecodeEmitters are magic: they own the arena "top-of-stack"
   * space above their tempMark points. This means that you cannot alloc from
   * tempLifoAlloc and save the pointer beyond the next BytecodeEmitter
   * destruction.
   ','line_number':310,'multiline':True]
['text':' Internal constructor, for delegation use only.','line_number':317,'multiline':False]
['text':'
   * Helper for reporting that we have insufficient args.  pluralizer
   * should be "s" if requiredArgs is anything other than "1" and ""
   * if requiredArgs is "1".
   ','line_number':323,'multiline':True]
['text':' (T*) -> bool ','line_number':355,'multiline':True]
['text':' See EmitterScope::lookupPrivate for details around brandLoc','line_number':360,'multiline':False]
['text':' To implement Annex B and the formal parameter defaults scope semantics','line_number':364,'multiline':False]
['text':' requires accessing names that would otherwise be shadowed. This method','line_number':365,'multiline':False]
['text':' returns the access location of a name that is known to be bound in a','line_number':366,'multiline':False]
['text':' target scope.','line_number':367,'multiline':False]
['text':' Get the location of a name known to be bound in a given scope,','line_number':371,'multiline':False]
['text':' starting at the source scope.','line_number':372,'multiline':False]
['text':' Get the location of a name known to be bound in the function scope,','line_number':377,'multiline':False]
['text':' starting at the source scope.','line_number':378,'multiline':False]
['text':' `atomIndices()` uses uint32_t instead of GCThingIndex, because','line_number':411,'multiline':False]
['text':' GCThingIndex isn't trivial type.','line_number':412,'multiline':False]
['text':' Fill in a ScriptStencil using this BCE data.','line_number':454,'multiline':False]
['text':' If pn contains a useful expression, return true with *answer set to true.','line_number':457,'multiline':False]
['text':' If pn contains a useless expression, return true with *answer set to','line_number':458,'multiline':False]
['text':' false. Return false on error.','line_number':459,'multiline':False]
['text':'','line_number':460,'multiline':False]
['text':' The caller should initialize *answer to false and invoke this function on','line_number':461,'multiline':False]
['text':' an expression statement or similar subtree to decide whether the tree','line_number':462,'multiline':False]
['text':' could produce code that has any side effects.  For an expression','line_number':463,'multiline':False]
['text':' statement, we define useless code as code with no side effects, because','line_number':464,'multiline':False]
['text':' the main effect, the value left on the stack after the code executes,','line_number':465,'multiline':False]
['text':' will be discarded by a pop bytecode.','line_number':466,'multiline':False]
['text':' Add TryNote to the tryNoteList array. The start and end offset are','line_number':473,'multiline':False]
['text':' relative to current section.','line_number':474,'multiline':False]
['text':' Indicates the emitter should not generate location or debugger source','line_number':478,'multiline':False]
['text':' notes. This lets us avoid generating notes for non-user code.','line_number':479,'multiline':False]
['text':' Append a new source note of the given type (and therefore size) to the','line_number':487,'multiline':False]
['text':' notes dynamic array, updating noteCount. Return the new note's index','line_number':488,'multiline':False]
['text':' within the array pointed at by current->notes as outparam.','line_number':489,'multiline':False]
['text':' Control whether emitTree emits a line number note.','line_number':496,'multiline':False]
['text':' Emit code for the tree rooted at pn.','line_number':499,'multiline':False]
['text':' Emit global, eval, or module code for tree rooted at body. Always','line_number':510,'multiline':False]
['text':' encompasses the entire source.','line_number':511,'multiline':False]
['text':' Calculate the `nslots` value for BCEScriptStencil constructor parameter.','line_number':514,'multiline':False]
['text':' Fails if it overflows.','line_number':515,'multiline':False]
['text':' Emit function code for the tree rooted at body.','line_number':518,'multiline':False]
['text':' Emit one bytecode.','line_number':531,'multiline':False]
['text':' Emit two bytecodes, an opcode (op) with a byte of immediate operand','line_number':534,'multiline':False]
['text':' (op1).','line_number':535,'multiline':False]
['text':' Emit three bytecodes, an opcode with two bytes of immediate operands.','line_number':538,'multiline':False]
['text':' Helper to duplicate one or more stack values. |slotFromTop| is the value's','line_number':541,'multiline':False]
['text':' depth on the JS stack, as measured from the top. |count| is the number of','line_number':542,'multiline':False]
['text':' values to duplicate, in theiro original order.','line_number':543,'multiline':False]
['text':' Helper to emit JSOp::Pop or JSOp::PopN.','line_number':546,'multiline':False]
['text':' Helper to emit JSOp::Swap or JSOp::Pick.','line_number':549,'multiline':False]
['text':' Helper to emit JSOp::Swap or JSOp::Unpick.','line_number':552,'multiline':False]
['text':' Helper to emit JSOp::CheckIsObj.','line_number':555,'multiline':False]
['text':' Helper to emit JSOp::BuiltinObject.','line_number':558,'multiline':False]
['text':' Push whether the value atop of the stack is non-undefined and non-null.','line_number':561,'multiline':False]
['text':' Emit a bytecode followed by an uint16 immediate operand stored in','line_number':564,'multiline':False]
['text':' big-endian order.','line_number':565,'multiline':False]
['text':' Emit a bytecode followed by an uint32 immediate operand.','line_number':568,'multiline':False]
['text':' Emit (1 + extra) bytecodes, for N bytes of op and its immediate operand.','line_number':571,'multiline':False]
['text':' Handle jump opcodes and jump targets.','line_number':588,'multiline':False]
['text':' Can we use the object-literal writer either in singleton-object mode (with','line_number':628,'multiline':False]
['text':' values) or in template mode (field names only, no values) for the property','line_number':629,'multiline':False]
['text':' list?','line_number':630,'multiline':False]
['text':' Is a field value OBJLITERAL-compatible?','line_number':647,'multiline':False]
['text':' To catch accidental misuse, emitUint16Operand/emit3 assert that they are','line_number':670,'multiline':False]
['text':' not used to unconditionally emit JSOp::GetLocal. Variable access should','line_number':671,'multiline':False]
['text':' instead be emitted using EmitVarOp. In special cases, when the caller','line_number':672,'multiline':False]
['text':' definitely knows that a given local slot is unaliased, this function may be','line_number':673,'multiline':False]
['text':' used as a non-asserting version of emitUint16Operand.','line_number':674,'multiline':False]
['text':' Convert and add `writer` data to stencil.','line_number':706,'multiline':False]
['text':' Iff it suceeds, `outIndex` out parameter is initialized to the index of the','line_number':707,'multiline':False]
['text':' object in GC things vector.','line_number':708,'multiline':False]
['text':' Emit bytecode to put operands for a JSOp::GetElem/CallElem/SetElem/DelElem','line_number':742,'multiline':False]
['text':' opcode onto the stack in the right order. In the case of SetElem, the','line_number':743,'multiline':False]
['text':' value to be assigned must already be pushed.','line_number':744,'multiline':False]
['text':' emitDestructuringLHSRef emits the lhs expression's reference.','line_number':773,'multiline':False]
['text':' If the lhs expression is object property |OBJ.prop|, it emits |OBJ|.','line_number':774,'multiline':False]
['text':' If it's object element |OBJ[ELEM]|, it emits |OBJ| and |ELEM|.','line_number':775,'multiline':False]
['text':' If there's nothing to evaluate for the reference, it emits nothing.','line_number':776,'multiline':False]
['text':' |emitted| parameter receives the number of values pushed onto the stack.','line_number':777,'multiline':False]
['text':' emitSetOrInitializeDestructuring assumes the lhs expression's reference','line_number':781,'multiline':False]
['text':' and the to-be-destructured value has been pushed on the stack.  It emits','line_number':782,'multiline':False]
['text':' code to destructure a single lhs expression (either a name or a compound','line_number':783,'multiline':False]
['text':' []/{} expression).','line_number':784,'multiline':False]
['text':' emitDestructuringObjRestExclusionSet emits the property exclusion set','line_number':788,'multiline':False]
['text':' for the rest-property in an object pattern.','line_number':789,'multiline':False]
['text':' emitDestructuringOps assumes the to-be-destructured value has been','line_number':792,'multiline':False]
['text':' pushed on the stack and emits code to destructure each part of a [] or','line_number':793,'multiline':False]
['text':' {} lhs expression.','line_number':794,'multiline':False]
['text':' Calls either the |CopyDataProperties| or the','line_number':804,'multiline':False]
['text':' |CopyDataPropertiesUnfiltered| intrinsic function, consumes three (or','line_number':805,'multiline':False]
['text':' two in the latter case) elements from the stack.','line_number':806,'multiline':False]
['text':' emitIterator expects the iterable to already be on the stack.','line_number':809,'multiline':False]
['text':' It will replace that stack value with the corresponding iterator','line_number':810,'multiline':False]
['text':' Pops iterator from the top of the stack. Pushes the result of |.next()|','line_number':815,'multiline':False]
['text':' onto the stack.','line_number':816,'multiline':False]
['text':' Check if the value on top of the stack is "undefined". If so, replace','line_number':838,'multiline':False]
['text':' that value on the stack with the value defined by |defaultExpr|.','line_number':839,'multiline':False]
['text':' |pattern| is a lhs node of the default expression.  If it's an','line_number':840,'multiline':False]
['text':' identifier and |defaultExpr| is an anonymous function, |SetFunctionName|','line_number':841,'multiline':False]
['text':' is called at compile time.','line_number':842,'multiline':False]
['text':' Optional methods which emit Optional Jump Target','line_number':872,'multiline':False]
['text':' Optional methods which emit a shortCircuit jump. They need to be called by','line_number':879,'multiline':False]
['text':' a method which emits an Optional Jump Target, see below.','line_number':880,'multiline':False]
['text':' |op| must be JSOp::Typeof or JSOp::TypeofExpr.','line_number':898,'multiline':False]
['text':' Emit bytecode for the spread operator.','line_number':969,'multiline':False]
['text':'','line_number':970,'multiline':False]
['text':' emitSpread expects the current index (I) of the array, the array itself','line_number':971,'multiline':False]
['text':' and the iterator to be on the stack in that order (iterator on the bottom).','line_number':972,'multiline':False]
['text':' It will pop the iterator and I, then iterate over the iterator by calling','line_number':973,'multiline':False]
['text':' |.next()| and put the results into the I-th element of array with','line_number':974,'multiline':False]
['text':' incrementing I, then push the result I (it will be original I +','line_number':975,'multiline':False]
['text':' iteration count). The stack after iteration will look like |ARRAY INDEX|.','line_number':976,'multiline':False]
['text':' The class name is defined through its BindingIdentifier, if present.','line_number':980,'multiline':False]
['text':' The class is anonymous and has a statically inferred name.','line_number':983,'multiline':False]
['text':' The class is anonymous and has a dynamically computed name.','line_number':986,'multiline':False]
['text':' namespace frontend ','line_number':1067,'multiline':True]
['text':' namespace js ','line_number':1068,'multiline':True]
['text':' frontend_BytecodeEmitter_h ','line_number':1070,'multiline':True]
