['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JSMSG_BAD_CONST_ASSIGN','line_number':20,'multiline':False]
['text':' Used for building the outermost script.','line_number':32,'multiline':False]
['text':' Used for building inlined scripts.','line_number':45,'multiline':False]
['text':' Skip snapshots until we get to a snapshot with offset >= offset. This is','line_number':72,'multiline':False]
['text':' a loop because WarpBuilder can skip unreachable bytecode ops.','line_number':73,'multiline':False]
['text':' maybePred = ','line_number':109,'multiline':True]
['text':' Create two blocks:','line_number':134,'multiline':False]
['text':' * The OSR entry block. This is always the graph's second block and has no','line_number':135,'multiline':False]
['text':'   predecessors. This is the entry point for OSR from the Baseline JIT.','line_number':136,'multiline':False]
['text':' * The OSR preheader block. This has two predecessors: the OSR entry block','line_number':137,'multiline':False]
['text':'   and the current block.','line_number':138,'multiline':False]
['text':' Create the OSR entry block.','line_number':142,'multiline':False]
['text':' Initialize environment chain.','line_number':154,'multiline':False]
['text':' Use an undefined value if the script does not need its environment','line_number':161,'multiline':False]
['text':' chain, to match the main entry point.','line_number':162,'multiline':False]
['text':' Initialize return value.','line_number':169,'multiline':False]
['text':' Initialize arguments object.','line_number':181,'multiline':False]
['text':' Initialize |this| parameter.','line_number':190,'multiline':False]
['text':' Initialize arguments. There are three cases:','line_number':195,'multiline':False]
['text':'','line_number':196,'multiline':False]
['text':' 1) There's no ArgumentsObject or it doesn't alias formals. In this case','line_number':197,'multiline':False]
['text':'    we can just use the frame's argument slot.','line_number':198,'multiline':False]
['text':' 2) The ArgumentsObject aliases formals and the argument is stored in the','line_number':199,'multiline':False]
['text':'    CallObject. Use |undefined| because we can't load from the arguments','line_number':200,'multiline':False]
['text':'    object and code will use the CallObject anyway.','line_number':201,'multiline':False]
['text':' 3) The ArgumentsObject aliases formals and the argument isn't stored in','line_number':202,'multiline':False]
['text':'    the CallObject. We have to load it from the ArgumentsObject.','line_number':203,'multiline':False]
['text':' Initialize locals.','line_number':222,'multiline':False]
['text':' Initialize expression stack slots.','line_number':235,'multiline':False]
['text':' Note: phi specialization can add type guard instructions to the OSR entry','line_number':251,'multiline':False]
['text':' block if needed. See TypeAnalyzer::shouldSpecializeOsrPhis.','line_number':252,'multiline':False]
['text':' Create the preheader block, with the predecessor block and OSR block as','line_number':254,'multiline':False]
['text':' predecessors.','line_number':255,'multiline':False]
['text':' Initialize the object's reserved slots. No post barrier is needed here:','line_number':327,'multiline':False]
['text':' the object will be allocated in the nursery if possible, and if the','line_number':328,'multiline':False]
['text':' tenured heap is used instead, a minor collection will have been performed','line_number':329,'multiline':False]
['text':' that moved env/callee to the tenured heap.','line_number':330,'multiline':False]
['text':' Initialize the object's reserved slots. No post barrier is needed here,','line_number':349,'multiline':False]
['text':' for the same reason as in buildNamedLambdaEnv.','line_number':350,'multiline':False]
['text':' Copy closed-over argument slots if there aren't parameter expressions.','line_number':358,'multiline':False]
['text':' Update the environment slot from UndefinedValue only after the initial','line_number':429,'multiline':False]
['text':' environment is created so that bailout doesn't see a partial environment.','line_number':430,'multiline':False]
['text':' See: |BaselineStackBuilder::buildBaselineFrame|','line_number':431,'multiline':False]
['text':' Initialize |this|.','line_number':443,'multiline':False]
['text':' Initialize arguments.','line_number':448,'multiline':False]
['text':' Initialize local slots.','line_number':461,'multiline':False]
['text':' Initialize the environment chain, return value, and arguments object slots.','line_number':466,'multiline':False]
['text':' Guard against over-recursion.','line_number':475,'multiline':False]
['text':' Generate entry block.','line_number':495,'multiline':False]
['text':' Connect the entry block to the last block in the caller's graph.','line_number':502,'multiline':False]
['text':' Initialize env chain slot to Undefined.  It's set later by','line_number':513,'multiline':False]
['text':' |buildEnvironmentChain|.','line_number':514,'multiline':False]
['text':' Initialize |return value| slot.','line_number':517,'multiline':False]
['text':' Initialize |arguments| slot if needed.','line_number':520,'multiline':False]
['text':' Initialize |this| slot.','line_number':525,'multiline':False]
['text':' Initialize actually set arguments.','line_number':532,'multiline':False]
['text':' Pass undefined for missing arguments.','line_number':538,'multiline':False]
['text':' Initialize local slots.','line_number':543,'multiline':False]
['text':' In debug builds, after compiling a bytecode op, this class is used to check','line_number':558,'multiline':False]
['text':' that all values popped by this opcode either:','line_number':559,'multiline':False]
['text':'','line_number':560,'multiline':False]
['text':'   (1) Have the ImplicitlyUsed flag set on them.','line_number':561,'multiline':False]
['text':'   (2) Have more uses than before compiling this op (the value is','line_number':562,'multiline':False]
['text':'       used as operand of a new MIR instruction).','line_number':563,'multiline':False]
['text':'','line_number':564,'multiline':False]
['text':' This is used to catch problems where WarpBuilder pops a value without','line_number':565,'multiline':False]
['text':' adding any SSA uses and doesn't call setImplicitlyUsedUnchecked on it.','line_number':566,'multiline':False]
['text':' Don't require SSA uses for values popped by these ops.','line_number':578,'multiline':False]
['text':' Basic stack/local/argument management opcodes.','line_number':593,'multiline':False]
['text':' These ops have to pop the switch value when branching but don't','line_number':598,'multiline':False]
['text':' actually use it.','line_number':599,'multiline':False]
['text':' First value popped by JSOp::EndIter is not used at all, it's similar','line_number':620,'multiline':False]
['text':' to JSOp::Pop above.','line_number':621,'multiline':False]
['text':' Skip unreachable ops (for example code after a 'return' or 'throw') until','line_number':638,'multiline':False]
['text':' we get to the next jump target.','line_number':639,'multiline':False]
['text':' Finish any "broken" loops with an unreachable backedge. For example:','line_number':641,'multiline':False]
['text':'','line_number':642,'multiline':False]
['text':'   do {','line_number':643,'multiline':False]
['text':'     ...','line_number':644,'multiline':False]
['text':'     return;','line_number':645,'multiline':False]
['text':'     ...','line_number':646,'multiline':False]
['text':'   } while (x);','line_number':647,'multiline':False]
['text':'','line_number':648,'multiline':False]
['text':' This loop never actually loops.','line_number':649,'multiline':False]
['text':' Set the hasTryBlock flag to turn off optimizations that eliminate dead','line_number':704,'multiline':False]
['text':' resume points operands because the exception handler code for','line_number':705,'multiline':False]
['text':' TryNoteKind::Destructuring is effectively a (specialized) catch-block.','line_number':706,'multiline':False]
['text':' Either |arguments| is never referenced within this function, or','line_number':957,'multiline':False]
['text':' it doesn't map to the actual arguments values. Either way, we','line_number':958,'multiline':False]
['text':' don't need to worry about synchronizing the argument values','line_number':959,'multiline':False]
['text':' when writing to them.','line_number':960,'multiline':False]
['text':' If an arguments object is in use, and it aliases formals, then all SetArgs','line_number':965,'multiline':False]
['text':' must go through the arguments object.','line_number':966,'multiline':False]
['text':' Returns true iff the MTest added for |op| has a true-target corresponding','line_number':1059,'multiline':False]
['text':' with the join point in the bytecode.','line_number':1060,'multiline':False]
['text':' No (reachable) jumps so this is just a no-op.','line_number':1081,'multiline':False]
['text':' Create join block if there's fall-through from the previous bytecode op.','line_number':1092,'multiline':False]
['text':' When a block is terminated with an MTest instruction we can end up with the','line_number':1116,'multiline':False]
['text':' following triangle structure:','line_number':1117,'multiline':False]
['text':'','line_number':1118,'multiline':False]
['text':'        testBlock','line_number':1119,'multiline':False]
['text':'         /    |','line_number':1120,'multiline':False]
['text':'     block    |','line_number':1121,'multiline':False]
['text':'         \    |','line_number':1122,'multiline':False]
['text':'        joinBlock','line_number':1123,'multiline':False]
['text':'','line_number':1124,'multiline':False]
['text':' Although this is fine for correctness, the FoldTests pass is unable to','line_number':1125,'multiline':False]
['text':' optimize this pattern. This matters for short-circuit operations','line_number':1126,'multiline':False]
['text':' (JSOp::And, JSOp::Coalesce, etc).','line_number':1127,'multiline':False]
['text':'','line_number':1128,'multiline':False]
['text':' To fix these issues, we create an empty block to get a diamond structure:','line_number':1129,'multiline':False]
['text':'','line_number':1130,'multiline':False]
['text':'        testBlock','line_number':1131,'multiline':False]
['text':'         /    |','line_number':1132,'multiline':False]
['text':'     block  emptyBlock','line_number':1133,'multiline':False]
['text':'         \    |','line_number':1134,'multiline':False]
['text':'        joinBlock','line_number':1135,'multiline':False]
['text':'','line_number':1136,'multiline':False]
['text':' TODO(post-Warp): re-evaluate this. It would probably be better to fix','line_number':1137,'multiline':False]
['text':' FoldTests to support the triangle pattern so that we can remove this.','line_number':1138,'multiline':False]
['text':' IonBuilder had other concerns that don't apply to WarpBuilder.','line_number':1139,'multiline':False]
['text':' JSOp::Case must pop the value when branching to the true-target.','line_number':1165,'multiline':False]
['text':' If we create an empty block, we have to pop the value there instead','line_number':1166,'multiline':False]
['text':' of as part of the emptyBlock -> joinBlock edge so stack depths match','line_number':1167,'multiline':False]
['text':' the current depth.','line_number':1168,'multiline':False]
['text':' true-branch','line_number':1171,'multiline':False]
['text':' numToPop = ','line_number':1175,'multiline':True]
['text':' false-branch','line_number':1189,'multiline':False]
['text':' numToPop = ','line_number':1193,'multiline':True]
['text':' numToPop = ','line_number':1206,'multiline':True]
['text':' Start traversing the join block. Make sure it comes after predecessor','line_number':1215,'multiline':False]
['text':' blocks created by createEmptyBlockForTest.','line_number':1216,'multiline':False]
['text':' When unwinding the stack for a thrown exception, the exception handler must','line_number':1226,'multiline':False]
['text':' close live iterators. For ForIn and Destructuring loops, the exception','line_number':1227,'multiline':False]
['text':' handler needs access to values on the stack. To prevent them from being','line_number':1228,'multiline':False]
['text':' optimized away (and replaced with the JS_OPTIMIZED_OUT MagicValue), we need','line_number':1229,'multiline':False]
['text':' to mark the phis (and phis they flow into) as having implicit uses.','line_number':1230,'multiline':False]
['text':' See ProcessTryNotes in vm/Interpreter.cpp and CloseLiveIteratorIon in','line_number':1231,'multiline':False]
['text':' jit/JitFrames.cpp','line_number':1232,'multiline':False]
['text':' Stop if we reach an outer loop because outer loops were already','line_number':1246,'multiline':False]
['text':' processed when we visited their loop headers.','line_number':1247,'multiline':False]
['text':' For for-in loops we add the iterator object to iterators(). For','line_number':1260,'multiline':False]
['text':' destructuring loops we add the "done" value that's on top of the','line_number':1261,'multiline':False]
['text':' stack and used in the exception handler.','line_number':1262,'multiline':False]
['text':' Regular loops do not have iterators to close. ForOf loops handle','line_number':1273,'multiline':False]
['text':' unwinding using catch blocks.','line_number':1274,'multiline':False]
['text':' All loops have the following bytecode structure:','line_number':1285,'multiline':False]
['text':'','line_number':1286,'multiline':False]
['text':'    LoopHead','line_number':1287,'multiline':False]
['text':'    ...','line_number':1288,'multiline':False]
['text':'    JumpIfTrue/Goto to LoopHead','line_number':1289,'multiline':False]
['text':' The whole loop is unreachable.','line_number':1292,'multiline':False]
['text':' Handle OSR from Baseline JIT code.','line_number':1296,'multiline':False]
['text':' If we have CacheIR, we can use it to refine the input. Note that','line_number':1334,'multiline':False]
['text':' the transpiler doesn't generate any control instructions. Instead,','line_number':1335,'multiline':False]
['text':' we fall through and generate them below.','line_number':1336,'multiline':False]
['text':' JSOp::And and JSOp::Or leave the top stack value unchanged.  The','line_number':1357,'multiline':False]
['text':' top stack value may have been converted to bool by a transpiled','line_number':1358,'multiline':False]
['text':' ToBool IC, so we push the original value. Also note that','line_number':1359,'multiline':False]
['text':' JSOp::Case must pop a second value on the true-branch (the input','line_number':1360,'multiline':False]
['text':' to the switch-statement). This conditional pop happens in','line_number':1361,'multiline':False]
['text':' build_JumpTarget.','line_number':1362,'multiline':False]
['text':' If this op always branches to the same location we treat this as a','line_number':1368,'multiline':False]
['text':' JSOp::Goto.','line_number':1369,'multiline':False]
['text':' ifTrue = ','line_number':1375,'multiline':True]
['text':' ifFalse = ','line_number':1376,'multiline':True]
['text':' We can finish the loop now. Use the loophead pc instead of the current pc','line_number':1406,'multiline':False]
['text':' because the stack depth at the start of that op matches the current stack','line_number':1407,'multiline':False]
['text':' depth (after popping our operand).','line_number':1408,'multiline':False]
['text':' ifTrue = ','line_number':1414,'multiline':True]
['text':' ifFalse = ','line_number':1415,'multiline':True]
['text':' ifTrue = ','line_number':1458,'multiline':True]
['text':' ifFalse = ','line_number':1459,'multiline':True]
['text':' If we have CacheIR, we can use it to refine the input before','line_number':1530,'multiline':False]
['text':' emitting the MNot.','line_number':1531,'multiline':False]
['text':' Iterator value is not used.','line_number':1771,'multiline':False]
['text':' Synthesize the constant number of arguments for this call op.','line_number':1790,'multiline':False]
['text':' Transpile the CacheIR to generate the correct guards before','line_number':1809,'multiline':False]
['text':' inlining.  In this case, CacheOp::CallInlinedFunction updates','line_number':1810,'multiline':False]
['text':' the CallInfo, but does not generate a call.','line_number':1811,'multiline':False]
['text':' Generate the body of the inlined function.','line_number':1817,'multiline':False]
['text':' Inline the this-object allocation on the caller-side.','line_number':1832,'multiline':False]
['text':' No need to wrap primitive |this| in strict mode.','line_number':1880,'multiline':False]
['text':' Try to optimize undefined/NaN/Infinity.','line_number':1921,'multiline':False]
['text':' copySlots = ','line_number':2106,'multiline':True]
['text':' copySlots = ','line_number':2111,'multiline':True]
['text':' Unreachable blocks don't need to generate a bail.','line_number':2173,'multiline':False]
['text':' This comes after a yield, which we generate as a return,','line_number':2178,'multiline':False]
['text':' so we know this should be unreachable code.','line_number':2179,'multiline':False]
['text':'','line_number':2180,'multiline':False]
['text':' We emit an unreachable bail for this, which will assert if we','line_number':2181,'multiline':False]
['text':' ever execute this.','line_number':2182,'multiline':False]
['text':'','line_number':2183,'multiline':False]
['text':' An Unreachable bail, instead of MUnreachable, because MUnreachable','line_number':2184,'multiline':False]
['text':' is a control instruction, and injecting it in the middle of a block','line_number':2185,'multiline':False]
['text':' causes various graph state assertions to fail.','line_number':2186,'multiline':False]
['text':' Close the generator','line_number':2202,'multiline':False]
['text':' Return','line_number':2209,'multiline':False]
['text':' Outside of `yield*`, this is normally unreachable code in Warp,','line_number':2233,'multiline':False]
['text':' so we just manipulate the stack appropriately to ensure correct','line_number':2234,'multiline':False]
['text':' MIR generation.','line_number':2235,'multiline':False]
['text':'','line_number':2236,'multiline':False]
['text':' However, `yield*` emits a forced generator return which can be','line_number':2237,'multiline':False]
['text':' warp compiled, so in order to correctly handle these semantics','line_number':2238,'multiline':False]
['text':' we also generate a bailout, so that the forced generator return','line_number':2239,'multiline':False]
['text':' runs in baseline.','line_number':2240,'multiline':False]
['text':' Mark operands as implicitly used.','line_number':2245,'multiline':False]
['text':' Bail out if we encounter CheckResumeKind.','line_number':2250,'multiline':False]
['text':' If required, unbox the generator object explicitly and infallibly.','line_number':2299,'multiline':False]
['text':'','line_number':2300,'multiline':False]
['text':' This is done to avoid fuzz-bugs where ApplyTypeInformation does the','line_number':2301,'multiline':False]
['text':' unboxing, and generates fallible unboxes which can lead to torn object','line_number':2302,'multiline':False]
['text':' state due to `bailAfter`.','line_number':2303,'multiline':False]
['text':' Use peekUnchecked because we're also writing out the argument slots','line_number':2331,'multiline':False]
['text':' needsHoleCheck = ','line_number':2336,'multiline':True]
['text':' Update Generator Object state','line_number':2352,'multiline':False]
['text':' This store is unbarriered, as it's only ever storing an integer, and as','line_number':2355,'multiline':False]
['text':' such doesn't partake of object tracing.','line_number':2356,'multiline':False]
['text':' This store is barriered because it stores an object value.','line_number':2361,'multiline':False]
['text':' GeneratorReturn will return from the method, however to support MIR','line_number':2369,'multiline':False]
['text':' generation isn't treated like the end of a block','line_number':2370,'multiline':False]
['text':' To ensure the rest of the MIR generation looks correct, fill the stack with','line_number':2374,'multiline':False]
['text':' the appropriately typed MUnreachable's for the stack pushes from this','line_number':2375,'multiline':False]
['text':' opcode.','line_number':2376,'multiline':False]
['text':' Set the local slot so that a subsequent GetLocal without a CheckLexical','line_number':2430,'multiline':False]
['text':' (the frontend can elide lexical checks) doesn't let a definition with','line_number':2431,'multiline':False]
['text':' MIRType::MagicUninitializedLexical escape to arbitrary MIR instructions.','line_number':2432,'multiline':False]
['text':' Note that in this case the GetLocal would be unreachable because we throw','line_number':2433,'multiline':False]
['text':' an exception here, but we still generate MIR instructions for it.','line_number':2434,'multiline':False]
['text':' WarpOracle already called ProcessCallSiteObjOperation to prepare the','line_number':2521,'multiline':False]
['text':' object.','line_number':2522,'multiline':False]
['text':' Load the target environment slot.','line_number':2698,'multiline':False]
['text':' TODO: IonBuilder has code to mark non-movable. See buildCheckLexicalOp.','line_number':2703,'multiline':False]
['text':' Note: getInitElemArrayIndex asserts the index fits in int32_t.','line_number':2756,'multiline':False]
['text':' Note: InitArrayElemOperation asserts the index does not exceed the array's','line_number':2760,'multiline':False]
['text':' dense element capacity.','line_number':2761,'multiline':False]
['text':' needsHoleCheck = ','line_number':2773,'multiline':True]
['text':' Push index + 1.','line_number':2788,'multiline':False]
['text':' Inline the constructor on the caller-side.','line_number':2878,'multiline':False]
['text':' Load dense elements of the argument array. Note that the bytecode ensures','line_number':2883,'multiline':False]
['text':' this is an array.','line_number':2884,'multiline':False]
['text':' The |debugger;| statement will bail out to Baseline if the realm is a','line_number':2907,'multiline':False]
['text':' debuggee realm with an onDebuggerStatement hook.','line_number':2908,'multiline':False]
['text':' Create |default| block.','line_number':2925,'multiline':False]
['text':' Create blocks for all cases.','line_number':2943,'multiline':False]
['text':' TODO: IonBuilder has an optimization where it replaces the switch input','line_number':2958,'multiline':False]
['text':' with the case value. This probably matters less for Warp. Re-evaluate.','line_number':2959,'multiline':False]
['text':' If we are inlining, we know the actual arguments.','line_number':2975,'multiline':False]
['text':' TODO: support pre-tenuring.','line_number':2980,'multiline':False]
['text':' Allocate an array of the correct size.','line_number':2983,'multiline':False]
['text':' No more updating to do.','line_number':2997,'multiline':False]
['text':' Unroll the argument copy loop. We don't need to do any bounds or hole','line_number':3004,'multiline':False]
['text':' checking here.','line_number':3005,'multiline':False]
['text':' needsHoleCheck = ','line_number':3017,'multiline':True]
['text':' Update the initialized length for all the (necessarily non-hole)','line_number':3022,'multiline':False]
['text':' elements added.','line_number':3023,'multiline':False]
['text':' Pass in the number of actual arguments, the number of formals (not','line_number':3034,'multiline':False]
['text':' including the rest parameter slot itself), and the shape.','line_number':3035,'multiline':False]
['text':' Note: WarpOracle aborts compilation for try-statements with a 'finally'','line_number':3044,'multiline':False]
['text':' block.','line_number':3045,'multiline':False]
['text':' Terminate the block.','line_number':3071,'multiline':False]
['text':' Terminate the block.','line_number':3084,'multiline':False]
['text':' Terminate the block.','line_number':3097,'multiline':False]
['text':' The CallInfo will be initialized by the transpiler.','line_number':3122,'multiline':False]
['text':'constructing =','line_number':3124,'multiline':True]
['text':' Work around std::initializer_list not defining operator[].','line_number':3134,'multiline':False]
['text':' Note: the MHasOwnCache constructor takes obj/id instead of id/obj.','line_number':3180,'multiline':False]
['text':' Note: CacheIR expects obj/id/receiver but MGetPropSuperCache takes','line_number':3270,'multiline':False]
['text':' obj/receiver/id so swap the last two inputs.','line_number':3271,'multiline':False]
['text':' Note: Warp does not have a TypeOf IC, it just inlines the operation.','line_number':3286,'multiline':False]
['text':' We're currently not using an IC or transpiling CacheIR for these kinds.','line_number':3313,'multiline':False]
['text':' No result.','line_number':3361,'multiline':False]
['text':' build_SetProp pushes the rhs argument onto the stack. Remove it','line_number':3390,'multiline':False]
['text':' in preparation for pushCallStack.','line_number':3391,'multiline':False]
['text':' Capture formals in the outer resume point.','line_number':3397,'multiline':False]
['text':' Pop formals again, except leave |callee| on stack for duration of call.','line_number':3408,'multiline':False]
['text':' Build the graph.','line_number':3412,'multiline':False]
['text':' Note: Inlining only aborts on OOM.  If inlining would fail for','line_number':3419,'multiline':False]
['text':' any other reason, we detect it in advance and don't inline.','line_number':3420,'multiline':False]
['text':' We mark scripts as uninlineable in BytecodeAnalysis if we cannot','line_number':3424,'multiline':False]
['text':' reach a return statement (without going through a catch/finally).','line_number':3425,'multiline':False]
['text':' Create return block','line_number':3428,'multiline':False]
['text':' Restore previous value of callerResumePoint.','line_number':3434,'multiline':False]
['text':' Pop |callee|.','line_number':3438,'multiline':False]
['text':' Accumulate return values.','line_number':3441,'multiline':False]
['text':' Initialize entry slots','line_number':3449,'multiline':False]
['text':' Accumulate multiple returns with a phi.','line_number':3466,'multiline':False]
['text':' Replace the MReturn in the exit block with an MGoto branching to','line_number':3488,'multiline':False]
['text':' the return block.','line_number':3489,'multiline':False]
['text':' Constructors must be patched by the caller to always return an object.','line_number':3493,'multiline':False]
['text':' Derived class constructors contain extra bytecode to ensure an object','line_number':3494,'multiline':False]
['text':' is always returned, so no additional patching is needed.','line_number':3495,'multiline':False]
['text':' Setters return the rhs argument, not whatever value is returned.','line_number':3502,'multiline':False]
