['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Intl.DateTimeFormat implementation. ','line_number':7,'multiline':True]
['text':' JS::AddMozDateTimeFormatConstructor','line_number':31,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':32,'multiline':False]
['text':' js::PlainObject','line_number':45,'multiline':False]
['text':' js_*_str','line_number':47,'multiline':False]
['text':' addProperty','line_number':67,'multiline':False]
['text':' delProperty','line_number':68,'multiline':False]
['text':' enumerate','line_number':69,'multiline':False]
['text':' newEnumerate','line_number':70,'multiline':False]
['text':' resolve','line_number':71,'multiline':False]
['text':' mayResolve','line_number':72,'multiline':False]
['text':' finalize','line_number':73,'multiline':False]
['text':' call','line_number':74,'multiline':False]
['text':' hasInstance','line_number':75,'multiline':False]
['text':' construct','line_number':76,'multiline':False]
['text':' trace','line_number':77,'multiline':False]
['text':'*
 * 12.2.1 Intl.DateTimeFormat([ locales [, options]])
 *
 * ES2017 Intl draft rev 94045d234762ad107a3d09bb6f7381a65f1a2f9b
 ','line_number':128,'multiline':True]
['text':' Step 1 (Handled by OrdinaryCreateFromConstructor fallback code).','line_number':135,'multiline':False]
['text':' Step 2 (Inlined 9.1.14, OrdinaryCreateFromConstructor).','line_number':137,'multiline':False]
['text':' Step 3.','line_number':157,'multiline':False]
['text':' Don't allow to call mozIntl.DateTimeFormat as a function. That way we','line_number':172,'multiline':False]
['text':' don't need to worry how to handle the legacy initialization semantics','line_number':173,'multiline':False]
['text':' when applied on mozIntl.DateTimeFormat.','line_number':174,'multiline':False]
['text':' intl_DateTimeFormat is an intrinsic for self-hosted JavaScript, so it','line_number':187,'multiline':False]
['text':' cannot be used with "new", but it still has to be treated as a','line_number':188,'multiline':False]
['text':' constructor.','line_number':189,'multiline':False]
['text':' 12.3.2','line_number':234,'multiline':False]
['text':' 12.4.4 and 12.4.5','line_number':239,'multiline':False]
['text':' 12.4.2 and 12.4.3','line_number':244,'multiline':False]
['text':' We need the default calendar for the locale as the first result.','line_number':291,'multiline':False]
['text':' Now get the calendars that "would make a difference", i.e., not the','line_number':301,'multiline':False]
['text':' default.','line_number':302,'multiline':False]
['text':' Some time zone names are canonicalized differently by ICU -- handle','line_number':373,'multiline':False]
['text':' those first:','line_number':374,'multiline':False]
['text':' The current default might be stale, because JS::ResetTimeZone() doesn't','line_number':414,'multiline':False]
['text':' immediately update ICU's default time zone. So perform an update if','line_number':415,'multiline':False]
['text':' needed.','line_number':416,'multiline':False]
['text':' An empty string is used for the root locale. This is regarded as the base','line_number':440,'multiline':False]
['text':' locale of all locales, and is used as the language/country neutral locale','line_number':441,'multiline':False]
['text':' for locale sensitive operations.','line_number':442,'multiline':False]
['text':' |undefined| is the default value when the Intl runtime caches haven't','line_number':466,'multiline':False]
['text':' yet been initialized. Handle it the same way as a cache miss.','line_number':467,'multiline':False]
['text':' The current default might be stale, because JS::ResetTimeZone() doesn't','line_number':473,'multiline':False]
['text':' immediately update ICU's default time zone. So perform an update if','line_number':474,'multiline':False]
['text':' needed.','line_number':475,'multiline':False]
['text':' 12 hour cycle, from 0 to 11.','line_number':506,'multiline':False]
['text':' 12 hour cycle, from 1 to 12.','line_number':509,'multiline':False]
['text':' 24 hour cycle, from 0 to 23.','line_number':512,'multiline':False]
['text':' 24 hour cycle, from 1 to 24.','line_number':515,'multiline':False]
['text':'*
 * Parse a pattern according to the format specified in
 * <https://unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns>.
 ','line_number':537,'multiline':True]
['text':'*
 * Return the hour cycle for the given option string.
 ','line_number':568,'multiline':True]
['text':'*
 * Return the hour cycle used in the input pattern or Nothing if none was found.
 ','line_number':585,'multiline':True]
['text':'*
 * Replaces all hour pattern characters in |patternOrSkeleton| to use the
 * matching hour representation for |hourCycle|.
 ','line_number':623,'multiline':True]
['text':' Values for hour, minute, and second are:','line_number':640,'multiline':False]
['text':' - absent: 0','line_number':641,'multiline':False]
['text':' - numeric: 1','line_number':642,'multiline':False]
['text':' - 2-digit: 2','line_number':643,'multiline':False]
['text':' Adjust the field length when the user requested '2-digit' representation.','line_number':668,'multiline':False]
['text':'','line_number':669,'multiline':False]
['text':' We can't just always adjust the field length, because','line_number':670,'multiline':False]
['text':' 1. The default value for hour, minute, and second fields is 'numeric'. If','line_number':671,'multiline':False]
['text':'    the length is always adjusted, |date.toLocaleTime()| will start to','line_number':672,'multiline':False]
['text':'    return strings like "1:5:9 AM" instead of "1:05:09 AM".','line_number':673,'multiline':False]
['text':' 2. ICU doesn't support to adjust the field length to 'numeric' in certain','line_number':674,'multiline':False]
['text':'    cases. For example when the locale is "de" (German):','line_number':675,'multiline':False]
['text':'      a. hour='numeric' and minute='2-digit' will return "1:05".','line_number':676,'multiline':False]
['text':'      b. whereas hour='numeric' and minute='numeric' will return "01:05".','line_number':677,'multiline':False]
['text':'','line_number':678,'multiline':False]
['text':' Therefore we only support adjusting the field length when the user','line_number':679,'multiline':False]
['text':' explicitly requested the '2-digit' representation.','line_number':680,'multiline':False]
['text':' If the hourCycle option was set, adjust the resolved pattern to use the','line_number':741,'multiline':False]
['text':' requested hour cycle representation.','line_number':742,'multiline':False]
['text':'*
 * Find a matching pattern using the requested hour-12 options.
 *
 * This function is needed to work around the following two issues.
 * - https://unicode-org.atlassian.net/browse/ICU-21023
 * - https://unicode-org.atlassian.net/browse/CLDR-13425
 *
 * We're currently using a relatively simple workaround, which doesn't give the
 * most accurate results. For example:
 *
 * ```
 * var dtf = new Intl.DateTimeFormat("en", {
 *   timeZone: "UTC",
 *   dateStyle: "long",
 *   timeStyle: "long",
 *   hourCycle: "h12",
 * });
 * print(dtf.format(new Date("2020-01-01T00:00Z")));
 * ```
 *
 * Returns the pattern "MMMM d, y 'at' h:mm:ss a z", but when going through
 * |DateTimePatternGenerator::GetSkeleton| and then
 * |DateTimePatternGenerator::GetBestPattern| to find an equivalent pattern for
 * "h23", we'll end up with the pattern "MMMM d, y, HH:mm:ss z", so the
 * combinator element " 'at' " was lost in the process.
 ','line_number':755,'multiline':True]
['text':' Input skeletons don't differentiate between "K" and "h" resp. "k" and "H".','line_number':800,'multiline':False]
['text':' If a specific hour cycle was requested and this hour cycle doesn't match','line_number':899,'multiline':False]
['text':' the hour cycle used in the resolved pattern, find an equivalent pattern','line_number':900,'multiline':False]
['text':' with the correct hour cycle.','line_number':901,'multiline':False]
['text':' If the hourCycle option was set, adjust the resolved pattern to use the','line_number':914,'multiline':False]
['text':' requested hour cycle representation.','line_number':915,'multiline':False]
['text':' ICU expects calendar, numberingSystem, and hourCycle as Unicode locale','line_number':963,'multiline':False]
['text':' extensions on locale.','line_number':964,'multiline':False]
['text':' |ApplyUnicodeExtensionToTag| applies the new keywords to the front of','line_number':1033,'multiline':False]
['text':' the Unicode extension subtag. We're then relying on ICU to follow RFC','line_number':1034,'multiline':False]
['text':' 6067, which states that any trailing keywords using the same key','line_number':1035,'multiline':False]
['text':' should be ignored.','line_number':1036,'multiline':False]
['text':'*
 * Returns a new mozilla::intl::DateTimeFormat with the locale and date-time
 * formatting options of the given DateTimeFormat.
 ','line_number':1044,'multiline':True]
['text':' ECMAScript requires the Gregorian calendar to be used from the beginning','line_number':1091,'multiline':False]
['text':' of ECMAScript time.','line_number':1092,'multiline':False]
['text':' See intl/icu/source/i18n/unicode/udat.h for a detailed field list.  This','line_number':1122,'multiline':False]
['text':' switch is deliberately exhaustive: cases might have to be added/removed','line_number':1123,'multiline':False]
['text':' if this code is compiled with a different ICU with more','line_number':1124,'multiline':False]
['text':' UDateFormatField enum initializers.  Please guard such cases with','line_number':1125,'multiline':False]
['text':' appropriate ICU version-testing #ifdefs, should cross-version divergence','line_number':1126,'multiline':False]
['text':' occur.','line_number':1127,'multiline':False]
['text':' These fields are all unsupported.','line_number':1199,'multiline':False]
['text':' TODO(Bug 1686965) - The use of UnsafeGetUDateFormat is a temporary','line_number':1235,'multiline':False]
['text':' migration step until the field position iterator is supported.','line_number':1236,'multiline':False]
['text':' An empty string contains no parts, so avoid extra work below.','line_number':1250,'multiline':False]
['text':' Technically this isn't guaranteed.  But it appears true in pratice,','line_number':1308,'multiline':False]
['text':' and http://bugs.icu-project.org/trac/ticket/12024 is expected to','line_number':1309,'multiline':False]
['text':' correct the documentation lapse.','line_number':1310,'multiline':False]
['text':' Append any final literal.','line_number':1329,'multiline':False]
['text':' Obtain a cached DateTimeFormat object.','line_number':1361,'multiline':False]
['text':' Use the UDateFormat to actually format the time stamp.','line_number':1374,'multiline':False]
['text':'*
 * Returns a new UDateIntervalFormat with the locale and date-time formatting
 * options of the given DateTimeFormat.
 ','line_number':1381,'multiline':True]
['text':' Determine the hour cycle used in the resolved pattern. This is needed to','line_number':1398,'multiline':False]
['text':' workaround <https://unicode-org.atlassian.net/browse/ICU-21154> and','line_number':1399,'multiline':False]
['text':' <https://unicode-org.atlassian.net/browse/ICU-21155>.','line_number':1400,'multiline':False]
['text':'*
 * PartitionDateTimeRangePattern ( dateTimeFormat, x, y )
 ','line_number':1463,'multiline':True]
['text':' We can't access the calendar used by UDateIntervalFormat to change it to a','line_number':1474,'multiline':False]
['text':' proleptic Gregorian calendar. Instead we need to call a different formatter','line_number':1475,'multiline':False]
['text':' function which accepts UCalendar instead of UDate.','line_number':1476,'multiline':False]
['text':' But creating new UCalendar objects for each call is slow, so when we can','line_number':1477,'multiline':False]
['text':' ensure that the input dates are later than the Gregorian change date,','line_number':1478,'multiline':False]
['text':' directly call the formatter functions taking UDate.','line_number':1479,'multiline':False]
['text':' The Gregorian change date "1582-10-15T00:00:00.000Z".','line_number':1481,'multiline':False]
['text':' Add a full day to account for time zone offsets.','line_number':1484,'multiline':False]
['text':' Create calendar objects for the start and end date by cloning the date','line_number':1490,'multiline':False]
['text':' formatter calendar. The date formatter calendar already has the correct','line_number':1491,'multiline':False]
['text':' time zone set and was changed to use a proleptic Gregorian calendar.','line_number':1492,'multiline':False]
['text':' The common fast path which doesn't require creating calendar objects.','line_number':1509,'multiline':False]
['text':'*
 * PartitionDateTimeRangePattern ( dateTimeFormat, x, y ), steps 9-11.
 *
 * Examine the formatted value to see if any interval span field is present.
 ','line_number':1528,'multiline':True]
['text':' We're only interested in UFIELD_CATEGORY_DATE_INTERVAL_SPAN fields.','line_number':1544,'multiline':False]
['text':' When no date interval span field was found, both dates are "practically','line_number':1557,'multiline':False]
['text':' equal" per PartitionDateTimeRangePattern.','line_number':1558,'multiline':False]
['text':'*
 * FormatDateTimeRange( dateTimeFormat, x, y )
 ','line_number':1563,'multiline':True]
['text':' PartitionDateTimeRangePattern, steps 9-11.','line_number':1585,'multiline':False]
['text':' PartitionDateTimeRangePattern, step 12.','line_number':1591,'multiline':False]
['text':'*
 * FormatDateTimeRangeToParts ( dateTimeFormat, x, y )
 ','line_number':1605,'multiline':True]
['text':' PartitionDateTimeRangePattern, steps 9-11.','line_number':1628,'multiline':False]
['text':' PartitionDateTimeRangePattern, step 12.','line_number':1634,'multiline':False]
['text':' Indices are guaranteed to be returned in order (from left to right).','line_number':1738,'multiline':False]
['text':' Append any remaining literal parts before changing the source kind.','line_number':1744,'multiline':False]
['text':' The special field category UFIELD_CATEGORY_DATE_INTERVAL_SPAN has only','line_number':1752,'multiline':False]
['text':' two allowed values (0 or 1), indicating the begin of the start- resp.','line_number':1753,'multiline':False]
['text':' end-date.','line_number':1754,'multiline':False]
['text':' Ignore categories other than UFIELD_CATEGORY_DATE.','line_number':1763,'multiline':False]
['text':' Append the field if supported. If not supported, append it as part of the','line_number':1768,'multiline':False]
['text':' next literal part.','line_number':1769,'multiline':False]
['text':' Append any remaining literal parts before changing the source kind.','line_number':1785,'multiline':False]
['text':' Append any final literal.','line_number':1797,'multiline':False]
['text':' PartitionDateTimeRangePattern, steps 1-2.','line_number':1822,'multiline':False]
['text':' PartitionDateTimeRangePattern, steps 3-4.','line_number':1831,'multiline':False]
['text':' Self-hosted code should have checked this condition.','line_number':1840,'multiline':False]
['text':' Obtain a cached mozilla::intl::DateTimeFormat object.','line_number':1844,'multiline':False]
['text':' Obtain a cached UDateIntervalFormat object.','line_number':1857,'multiline':False]
['text':' Use the UDateIntervalFormat to actually format the time range.','line_number':1871,'multiline':False]
