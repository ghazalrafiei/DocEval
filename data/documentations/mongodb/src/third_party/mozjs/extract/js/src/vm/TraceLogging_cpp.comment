['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' js::GetErrorMessage, JSMSG_*','line_number':19,'multiline':False]
['text':' getpid()','line_number':23,'multiline':False]
['text':' js::ActivationIterator','line_number':25,'multiline':False]
['text':' js::JitFrameIter','line_number':26,'multiline':False]
['text':' Default to unsupported.','line_number':41,'multiline':False]
['text':' Minimum amount of capacity needed for operation to allow flushing.','line_number':99,'multiline':False]
['text':' Flushing requires space for the actual event and two spaces to log the','line_number':100,'multiline':False]
['text':' start and stop of flushing.','line_number':101,'multiline':False]
['text':' Create a graph. I don't like this is called reset, but it locks the','line_number':114,'multiline':False]
['text':' graph into the UniquePtr. So it gets deleted when TraceLoggerThread','line_number':115,'multiline':False]
['text':' is destructed.','line_number':116,'multiline':False]
['text':' Report the textIds to the graph.','line_number':133,'multiline':False]
['text':' We have to keep the Baseline and IonMonkey id's alive because they control','line_number':158,'multiline':False]
['text':' whether the jitted codegen has tracelogger start & stop events builtin.','line_number':159,'multiline':False]
['text':' Otherwise, we end up in situations when some jitted code that was created','line_number':160,'multiline':False]
['text':' before the profiler was even started ends up not starting and stoping any','line_number':161,'multiline':False]
['text':' events.  The TraceLogger_Engine stop events can accidentally stop the wrong','line_number':162,'multiline':False]
['text':' event in this case, and then it's no longer possible to build a graph.','line_number':163,'multiline':False]
['text':' Get the top Activation to log the top script/pc (No inlined frames).','line_number':303,'multiline':False]
['text':' Do not count threadLoggers since they are counted by','line_number':432,'multiline':False]
['text':' JSContext::traceLogger.','line_number':433,'multiline':False]
['text':' Sanity check.','line_number':457,'multiline':False]
['text':' Look for a free entry, as some textId's may','line_number':473,'multiline':False]
['text':' already be taken from previous profiling sessions.','line_number':474,'multiline':False]
['text':' Care needs to be taken to maintain a coherent state in this function,','line_number':520,'multiline':False]
['text':' as payloads can have their use count change at any time from non-zero to','line_number':521,'multiline':False]
['text':' zero (but not the other way around; see TraceLoggerEventPayload::use()).','line_number':522,'multiline':False]
['text':' Free all other payloads that have no uses anymore.','line_number':525,'multiline':False]
['text':' force = ','line_number':546,'multiline':True]
['text':' Flush each textId to disk.  textId values up to TraceLogger_Last are','line_number':576,'multiline':False]
['text':' statically defined and each one has an associated constant event string','line_number':577,'multiline':False]
['text':' defined by TLTextIdString().  For any events with textId >=','line_number':578,'multiline':False]
['text':' TraceLogger_Last the payload associated with that textId must first be','line_number':579,'multiline':False]
['text':' found and then maybeEventText() will find the event string form the','line_number':580,'multiline':False]
['text':' dictionary.','line_number':581,'multiline':False]
['text':' When encountering an Error id the stack will most likely not be correct','line_number':629,'multiline':False]
['text':' anymore. Ignore this.','line_number':630,'multiline':False]
['text':' Ignore if the text has been flushed already.','line_number':640,'multiline':False]
['text':' Write the index of this event into the jsTracerDictionary array','line_number':727,'multiline':False]
['text':' property','line_number':728,'multiline':False]
['text':' log events are snapshot events with no start & stop','line_number':887,'multiline':False]
['text':' value has already been cached','line_number':890,'multiline':False]
['text':' Search through the events array to find the matching stop event in','line_number':898,'multiline':False]
['text':' order to calculate the duration time.  Cache all other durations we','line_number':899,'multiline':False]
['text':' calculate in the meantime.','line_number':900,'multiline':False]
['text':' If we reach the end of the list, use the last event as the end','line_number':922,'multiline':False]
['text':' event for all events remaining on the stack.','line_number':923,'multiline':False]
['text':' We request for 3 items to add, since if we don't have enough room','line_number':973,'multiline':False]
['text':' we record the time it took to make more space. To log this information','line_number':974,'multiline':False]
['text':' we need 2 extra free entries.','line_number':975,'multiline':False]
['text':' The data structures are full, and the graph file is not enabled','line_number':984,'multiline':False]
['text':' so we cannot flush to disk.  Trace logging should stop here.','line_number':985,'multiline':False]
['text':' Periodically remove unused payloads from the global logger state.','line_number':994,'multiline':False]
['text':' Log the time it took to flush the events_ as being from the','line_number':998,'multiline':False]
['text':' Tracelogger.','line_number':999,'multiline':False]
['text':' Clear all payloads that are not currently used.  There may be some events','line_number':1029,'multiline':False]
['text':' that still hold a pointer to a payload.  Restarting the profiler may reuse','line_number':1030,'multiline':False]
['text':' the exact same event as a previous session if it's still alive so we need','line_number':1031,'multiline':False]
['text':' to maintain it's existence.','line_number':1032,'multiline':False]
['text':' Clear and free any data used for the string dictionary.','line_number':1069,'multiline':False]
['text':'NOTREACHED','line_number':1177,'multiline':True]
['text':' Most of the textId's will be enabled through JS::StartTraceLogger when','line_number':1206,'multiline':False]
['text':' the gecko profiler is started.','line_number':1207,'multiline':False]
['text':'NOTREACHED','line_number':1235,'multiline':True]
['text':' Only log scripts when enabled, otherwise use the more generic type','line_number':1410,'multiline':False]
['text':' (which will get filtered out).','line_number':1411,'multiline':False]
['text':' Perform a process wide synchronous spew of every thread that tracelogger has','line_number':1483,'multiline':False]
['text':' captured.','line_number':1484,'multiline':False]
['text':' Usage here is JS_TRACELOGGER_SPEW=<event1>,<event2>,etc for custom spewing.','line_number':1491,'multiline':False]
['text':' If the environment variable is not found, we use a default set of events.','line_number':1492,'multiline':False]
['text':' Dynamically generate the header row in JitSpew.','line_number':1568,'multiline':False]
['text':' If structured spewer is enabled, we might as well spew everything.','line_number':1594,'multiline':False]
['text':' Traverse each event and calculate the self-time, along with the script that','line_number':1676,'multiline':False]
['text':' each event belongs to. We do this quickly by maintaining two stacks:','line_number':1677,'multiline':False]
['text':'  (i) eventStack - Each new event encountered is pushed onto the stack. Events','line_number':1678,'multiline':False]
['text':'                   are popped off whenever a TraceLogger_Stop is encountered','line_number':1679,'multiline':False]
['text':'                   and sent to updateScriptMap.','line_number':1680,'multiline':False]
['text':' (ii) funcStack - Each new script encountered is pushed onto this stack.','line_number':1681,'multiline':False]
['text':'                  Elements are popped off whenever a TraceLogger_Stop is','line_number':1682,'multiline':False]
['text':'                  encountered that matches a script event on the top of','line_number':1683,'multiline':False]
['text':'                  eventStack.','line_number':1684,'multiline':False]
['text':' Record any log events that have no durations such as Bailouts with a','line_number':1704,'multiline':False]
['text':' value of 1.  Make sure the funcStack actually has something in it or','line_number':1705,'multiline':False]
['text':' else the Bailout event will not be associated with any script.  This','line_number':1706,'multiline':False]
['text':' can commonly occur when profiling & tracing starts since we may have','line_number':1707,'multiline':False]
['text':' already past the point where the script event is created.','line_number':1708,'multiline':False]
['text':' Hit a new tree event or a stop event, so add (new event timestamp - old','line_number':1717,'multiline':False]
['text':' event timestamp) to the old event's self-time.','line_number':1718,'multiline':False]
['text':' funcStack will usually be empty near the beginning of a profiling','line_number':1766,'multiline':False]
['text':' session since we may have skipped the point where the script event','line_number':1767,'multiline':False]
['text':' is created.  If that's the case, then skip this event since we','line_number':1768,'multiline':False]
['text':' cannot associate it with any script.','line_number':1769,'multiline':False]
