['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * Class which represents a splay tree with nodes allocated from a LifoAlloc.
 * Splay trees are balanced binary search trees for which search, insert and
 * remove are all amortized O(log n).
 *
 * T indicates the type of tree elements, C must have a static
 * compare(const T&, const T&) method ordering the elements. As for LifoAlloc
 * objects, T objects stored in the tree will not be explicitly destroyed.
 ','line_number':14,'multiline':True]
['text':' Don't tolerate duplicate elements.','line_number':103,'multiline':False]
['text':' Find another node which can be swapped in for the root: either the','line_number':123,'multiline':False]
['text':' rightmost child of the root's left, or the leftmost child of the','line_number':124,'multiline':False]
['text':' root's right.','line_number':125,'multiline':False]
['text':' The selected node has at most one child, in swapChild. Detach it','line_number':146,'multiline':False]
['text':' from the subtree by replacing it with that child.','line_number':147,'multiline':False]
['text':' Rotate the element until it is at the root of the tree. Performing','line_number':203,'multiline':False]
['text':' the rotations in this fashion preserves the amortized balancing of','line_number':204,'multiline':False]
['text':' the tree.','line_number':205,'multiline':False]
['text':' Zig rotation.','line_number':210,'multiline':False]
['text':' Zig-zig rotation.','line_number':217,'multiline':False]
['text':' Zig-zag rotation.','line_number':221,'multiline':False]
['text':' Rearrange nodes so that node becomes the parent of its current','line_number':229,'multiline':False]
['text':' parent, while preserving the sortedness of the tree.','line_number':230,'multiline':False]
['text':'     x          y','line_number':233,'multiline':False]
['text':'   y  c  ==>  a  x','line_number':234,'multiline':False]
['text':'  a b           b c','line_number':235,'multiline':False]
['text':'   x             y','line_number':243,'multiline':False]
['text':'  a  y   ==>   x  c','line_number':244,'multiline':False]
['text':'    b c       a b','line_number':245,'multiline':False]
['text':' This is doing a depth-first search and check that the values are','line_number':290,'multiline':False]
['text':' ordered properly.','line_number':291,'multiline':False]
['text':' Go to the left-most child.','line_number':293,'multiline':False]
['text':' Go once to the right and try again.','line_number':304,'multiline':False]
['text':' We reached a leaf node, move to the first branch to the right of','line_number':309,'multiline':False]
['text':' our current left-most sub-tree.','line_number':310,'multiline':False]
['text':' Visit the parent node, to find the right branch which we have','line_number':314,'multiline':False]
['text':' not visited yet. Either we are coming back from the right','line_number':315,'multiline':False]
['text':' branch, or we are coming back from the left branch with no','line_number':316,'multiline':False]
['text':' right branch to visit.','line_number':317,'multiline':False]
['text':' If we came back from the left branch, visit the value.','line_number':322,'multiline':False]
['text':' We reached the root node either because we came back from','line_number':335,'multiline':False]
['text':' the right hand side, or because the root node had a','line_number':336,'multiline':False]
['text':' single child.','line_number':337,'multiline':False]
['text':' Go to the right node which we have not visited yet.','line_number':343,'multiline':False]
['text':' namespace js ','line_number':352,'multiline':True]
['text':' ds_SplayTree_h ','line_number':354,'multiline':True]
