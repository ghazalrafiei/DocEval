['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS::ExpandoAndGeneration','line_number':35,'multiline':False]
['text':' js::Scalar::Type','line_number':36,'multiline':False]
['text':' js::FunctionFlags','line_number':39,'multiline':False]
['text':' Fail if the value does not fit in an int32.','line_number':115,'multiline':False]
['text':' Always convert the value to double.','line_number':122,'multiline':False]
['text':' Bail out if the value doesn't fit into a signed int32 value. This','line_number':159,'multiline':False]
['text':' is what allows MLoadUnboxedScalar to have a type() of','line_number':160,'multiline':False]
['text':' MIRType::Int32 for UInt32 array loads.','line_number':161,'multiline':False]
['text':' Don't clobber dest when we could fail, instead use temp.','line_number':206,'multiline':False]
['text':' Inlined version of gc::CheckAllocatorState that checks the bare essentials','line_number':263,'multiline':False]
['text':' and bails for anything that cannot be handled with our jit allocators.','line_number':264,'multiline':False]
['text':' Don't execute the inline path if GC probes are built in.','line_number':266,'multiline':False]
['text':' Don't execute the inline path if gc zeal or tracing are active.','line_number':272,'multiline':False]
['text':' Don't execute the inline path if the realm has an object metadata callback,','line_number':279,'multiline':False]
['text':' as the metadata to use for the object may vary between executions of the','line_number':280,'multiline':False]
['text':' op.','line_number':281,'multiline':False]
['text':' Note that Ion elides barriers on writes to objects known to be in the','line_number':289,'multiline':False]
['text':' nursery, so any allocation that can be made into the nursery must be made','line_number':290,'multiline':False]
['text':' into the nursery, even if the nursery is disabled. At runtime these will','line_number':291,'multiline':False]
['text':' take the out-of-line path, which is required to insert a barrier for the','line_number':292,'multiline':False]
['text':' initializing writes.','line_number':293,'multiline':False]
['text':' Inline version of Nursery::allocateObject. If the object has dynamic slots,','line_number':297,'multiline':False]
['text':' this fills in the slots_ pointer.','line_number':298,'multiline':False]
['text':' We still need to allocate in the nursery, per the comment in','line_number':305,'multiline':False]
['text':' shouldNurseryAllocate; however, we need to insert into the','line_number':306,'multiline':False]
['text':' mallocedBuffers set, so bail to do the nursery allocation in the','line_number':307,'multiline':False]
['text':' interpreter.','line_number':308,'multiline':False]
['text':' Check whether this allocation site needs pretenuring. This dynamic check','line_number':314,'multiline':False]
['text':' only happens for baseline code.','line_number':315,'multiline':False]
['text':' No explicit check for nursery.isEnabled() is needed, as the comparison','line_number':322,'multiline':False]
['text':' with the nursery's end will always fail in such cases.','line_number':323,'multiline':False]
['text':' Inlined version of FreeSpan::allocate. This does not fill in slots_.','line_number':347,'multiline':False]
['text':' Load the first and last offsets of |zone|'s free list for |allocKind|.','line_number':356,'multiline':False]
['text':' If there is no room remaining in the span, fall back to get the next one.','line_number':357,'multiline':False]
['text':' Bump the offset for the next allocation.','line_number':364,'multiline':False]
['text':' Turn the offset into a pointer.','line_number':369,'multiline':False]
['text':' If there are no free spans left, we bail to finish the allocation. The','line_number':373,'multiline':False]
['text':' interpreter will call the GC allocator to set up a new arena to allocate','line_number':374,'multiline':False]
['text':' from, after which we can resume allocating in the jit.','line_number':375,'multiline':False]
['text':' Turn the offset into a pointer.','line_number':378,'multiline':False]
['text':' Update the free list to point to the next span (which may be empty).','line_number':380,'multiline':False]
['text':' This register must match the one in JitRuntime::generateFreeStub.','line_number':396,'multiline':False]
['text':' Inlined equivalent of gc::AllocateObject, without failure case handling.','line_number':405,'multiline':False]
['text':' Fall back to calling into the VM to allocate objects in the tenured heap','line_number':421,'multiline':False]
['text':' that have dynamic slots.','line_number':422,'multiline':False]
['text':' = true ','line_number':434,'multiline':True]
['text':' Allocate object.','line_number':456,'multiline':False]
['text':' Initialize shape field.','line_number':460,'multiline':False]
['text':' If the object has dynamic slots, allocateObject will initialize','line_number':463,'multiline':False]
['text':' the slots field. If not, we must initialize it now.','line_number':464,'multiline':False]
['text':' Initialize elements field.','line_number':470,'multiline':False]
['text':' Initialize fixed slots.','line_number':474,'multiline':False]
['text':' Initialize dynamic slots.','line_number':478,'multiline':False]
['text':' This only supports allocating arrays with fixed elements and does not','line_number':493,'multiline':False]
['text':' support any dynamic slots or elements.','line_number':494,'multiline':False]
['text':' Allocate object.','line_number':499,'multiline':False]
['text':' Initialize shape field.','line_number':502,'multiline':False]
['text':' There are no dynamic slots.','line_number':505,'multiline':False]
['text':' Initialize elements pointer for fixed (inline) elements.','line_number':509,'multiline':False]
['text':' Initialize elements header.','line_number':514,'multiline':False]
['text':' Inline version of Nursery::allocateString.','line_number':522,'multiline':False]
['text':' No explicit check for nursery.isEnabled() is needed, as the comparison','line_number':528,'multiline':False]
['text':' with the nursery's end will always fail in such cases.','line_number':529,'multiline':False]
['text':' Inline version of Nursery::allocateBigInt.','line_number':542,'multiline':False]
['text':' No explicit check for nursery.isEnabled() is needed, as the comparison','line_number':547,'multiline':False]
['text':' with the nursery's end will always fail in such cases.','line_number':548,'multiline':False]
['text':' The position (allocation pointer) and the end pointer are stored','line_number':568,'multiline':False]
['text':' very close to each other -- specifically, easily within a 32 bit offset.','line_number':569,'multiline':False]
['text':' Use relative offsets between them, to avoid 64-bit immediate loads.','line_number':570,'multiline':False]
['text':'','line_number':571,'multiline':False]
['text':' I tried to optimise this further by using an extra register to avoid','line_number':572,'multiline':False]
['text':' the final subtraction and hopefully get some more instruction','line_number':573,'multiline':False]
['text':' parallelism, but it made no difference.','line_number':574,'multiline':False]
['text':' No allocation site supplied. This is the case when called from Warp, or','line_number':602,'multiline':False]
['text':' from places that don't support pretenuring.','line_number':603,'multiline':False]
['text':' Update allocation site and store pointer in the nursery cell header. This','line_number':608,'multiline':False]
['text':' is only used from baseline.','line_number':609,'multiline':False]
['text':' See NurseryCellHeader::MakeValue.','line_number':612,'multiline':False]
['text':' Update the allocation site in the same way as Nursery::allocateCell.','line_number':618,'multiline':False]
['text':' Inlined equivalent of gc::AllocateString, jumping to fail if nursery','line_number':636,'multiline':False]
['text':' allocation requested but unsuccessful.','line_number':637,'multiline':False]
['text':' Template objects are not exposed to script and therefore immutable.','line_number':685,'multiline':False]
['text':' However, regexp template objects are sometimes used directly (when','line_number':686,'multiline':False]
['text':' the cloning is not observable), and therefore we can end up with a','line_number':687,'multiline':False]
['text':' non-zero lastIndex. Detect this case here and just substitute 0, to','line_number':688,'multiline':False]
['text':' avoid racing with the main thread updating this slot.','line_number':689,'multiline':False]
['text':' We only have a single spare register, so do the initialization as two','line_number':710,'multiline':False]
['text':' strided writes of the tag and body.','line_number':711,'multiline':False]
['text':' The private pointer is stored as a PrivateValue in a JS::Value, so on 32','line_number':770,'multiline':False]
['text':' bit systems we also need to zero the top word.','line_number':771,'multiline':False]
['text':' Initialise data elements to zero.','line_number':800,'multiline':False]
['text':' Store data elements inside the remaining JSObject slots.','line_number':810,'multiline':False]
['text':' Write enough zero pointers into fixed data to zero every','line_number':814,'multiline':False]
['text':' element.  (This zeroes past the end of a byte count that's','line_number':815,'multiline':False]
['text':' not a multiple of pointer size.  That's okay, because fixed','line_number':816,'multiline':False]
['text':' data is a count of 8-byte HeapSlots (i.e. <= pointer size),','line_number':817,'multiline':False]
['text':' and we won't inline unless the desired memory fits in that','line_number':818,'multiline':False]
['text':' space.)','line_number':819,'multiline':False]
['text':' Allocate a buffer on the heap to store the data elements.','line_number':832,'multiline':False]
['text':' Fail when data elements is set to NULL.','line_number':846,'multiline':False]
['text':' Slots of non-array objects are required to be initialized.','line_number':854,'multiline':False]
['text':' Use the values currently in the template object.','line_number':855,'multiline':False]
['text':' Attempt to group slot writes such that we minimize the amount of','line_number':864,'multiline':False]
['text':' duplicated data we need to embed in code and load into registers. In','line_number':865,'multiline':False]
['text':' general, most template object slots will be undefined except for any','line_number':866,'multiline':False]
['text':' reserved slots. Since reserved slots come first, we split the object','line_number':867,'multiline':False]
['text':' logically into independent non-UndefinedValue writes to the head and','line_number':868,'multiline':False]
['text':' duplicated writes of UndefinedValue to the tail. For the majority of','line_number':869,'multiline':False]
['text':' objects, the "tail" will be the entire slot range.','line_number':870,'multiline':False]
['text':'','line_number':871,'multiline':False]
['text':' The template object may be a CallObject, in which case we need to','line_number':872,'multiline':False]
['text':' account for uninitialized lexical slots as well as undefined','line_number':873,'multiline':False]
['text':' slots. Unitialized lexical slots appears in CallObjects if the function','line_number':874,'multiline':False]
['text':' has parameter expressions, in which case closed over parameters have','line_number':875,'multiline':False]
['text':' TDZ. Uninitialized slots come before undefined slots in CallObjects.','line_number':876,'multiline':False]
['text':' Reserved slots must be fixed.','line_number':881,'multiline':False]
['text':' Copy over any preserved reserved slots.','line_number':886,'multiline':False]
['text':' Fill the rest of the fixed slots with undefined and uninitialized.','line_number':889,'multiline':False]
['text':' We are short one register to do this elegantly. Borrow the obj','line_number':903,'multiline':False]
['text':' register briefly for our slots base address.','line_number':904,'multiline':False]
['text':' Fill uninitialized slots if necessary. Otherwise initialize all','line_number':908,'multiline':False]
['text':' slots to undefined.','line_number':909,'multiline':False]
['text':' Fast initialization of an empty object returned by allocateObject().','line_number':928,'multiline':False]
['text':' If the object has dynamic slots, the slots member has already been','line_number':938,'multiline':False]
['text':' filled in.','line_number':939,'multiline':False]
['text':' Fill in the elements header.','line_number':951,'multiline':False]
['text':' The caller will initialize the reserved slots.','line_number':964,'multiline':False]
['text':' If the target type could be a TypedArray that maps shared memory','line_number':970,'multiline':False]
['text':' then this would need to store emptyObjectElementsShared in that case.','line_number':971,'multiline':False]
['text':' If operands point to the same instance, the strings are trivially equal.','line_number':1013,'multiline':False]
['text':' Atoms cannot be equal to each other if they point to different strings.','line_number':1028,'multiline':False]
['text':' Strings of different length can never be equal.','line_number':1036,'multiline':False]
['text':' If the string is a rope, zero the |str| register. The code below','line_number':1054,'multiline':False]
['text':' depends on str->flags so this should block speculative execution.','line_number':1055,'multiline':False]
['text':' If we're loading TwoByte chars, there's an additional risk:','line_number':1060,'multiline':False]
['text':' if the string has Latin1 chars, we could read out-of-bounds. To','line_number':1061,'multiline':False]
['text':' prevent this, we check both the Linear and Latin1 bits. We don't','line_number':1062,'multiline':False]
['text':' have a scratch register, so we use these flags also to block','line_number':1063,'multiline':False]
['text':' speculative execution, similar to the use of 0 above.','line_number':1064,'multiline':False]
['text':' Load the inline chars.','line_number':1079,'multiline':False]
['text':' If it's not an inline string, load the non-inline chars. Use a','line_number':1083,'multiline':False]
['text':' conditional move to prevent speculative execution.','line_number':1084,'multiline':False]
['text':' If the string is a rope, has inline chars, or has a different','line_number':1095,'multiline':False]
['text':' character encoding, set str to a near-null value to prevent','line_number':1096,'multiline':False]
['text':' speculative execution below (when reading str->nonInlineChars).','line_number':1097,'multiline':False]
['text':' Making this Spectre-safe is a bit complicated: using','line_number':1137,'multiline':False]
['text':' computeEffectiveAddress and then zeroing the output register if','line_number':1138,'multiline':False]
['text':' non-inline is not sufficient: when the index is very large, it would','line_number':1139,'multiline':False]
['text':' allow reading |nullptr + index|. Just fall back to loadStringChars','line_number':1140,'multiline':False]
['text':' for now.','line_number':1141,'multiline':False]
['text':' Zero the output register if the input was not a rope.','line_number':1153,'multiline':False]
['text':' If the string is not a dependent string, zero the |str| register.','line_number':1173,'multiline':False]
['text':' The code below loads str->base so this should block speculative','line_number':1174,'multiline':False]
['text':' execution.','line_number':1175,'multiline':False]
['text':' This follows JSString::getChar.','line_number':1198,'multiline':False]
['text':' Check if the index is contained in the leftChild.','line_number':1204,'multiline':False]
['text':' Todo: Handle index in the rightChild.','line_number':1205,'multiline':False]
['text':' If the left side is another rope, give up.','line_number':1209,'multiline':False]
['text':' We have to check the left/right side for ropes,','line_number':1215,'multiline':False]
['text':' because a TwoByte rope might have a Latin1 child.','line_number':1216,'multiline':False]
['text':' Does not have a cached index value.','line_number':1235,'multiline':False]
['text':' Extract the index.','line_number':1238,'multiline':False]
['text':' = 0 ','line_number':1243,'multiline':True]
['text':' Load the inline digits.','line_number':1265,'multiline':False]
['text':' If inline digits aren't used, load the heap digits. Use a conditional move','line_number':1269,'multiline':False]
['text':' to prevent speculative execution.','line_number':1270,'multiline':False]
['text':' This code follows the implementation of |BigInt::toUint64()|. We're also','line_number':1277,'multiline':False]
['text':' using it for inline callers of |BigInt::toInt64()|, which works, because','line_number':1278,'multiline':False]
['text':' all supported Jit architectures use a two's complement representation for','line_number':1279,'multiline':False]
['text':' int64 values, which means the WrapToSigned call in toInt64() is a no-op.','line_number':1280,'multiline':False]
['text':' Load the first digit into the destination register.','line_number':1300,'multiline':False]
['text':' Load the first digit into the destination register's low value.','line_number':1303,'multiline':False]
['text':' And conditionally load the second digit into the high value register.','line_number':1306,'multiline':False]
['text':' Load the first digit into the destination register.','line_number':1340,'multiline':False]
['text':' Load the first inline digit into the destination register.','line_number':1377,'multiline':False]
['text':' Return as a signed pointer.','line_number':1380,'multiline':False]
['text':' BigInt digits are stored as absolute numbers. Take the failure path when','line_number':1386,'multiline':False]
['text':' the digit can't be stored in intptr_t.','line_number':1387,'multiline':False]
['text':' Negate |dest| when the BigInt is negative.','line_number':1390,'multiline':False]
['text':' Load the first inline digit into the destination register.','line_number':1407,'multiline':False]
['text':' Set the sign-bit for negative values and then continue with the two's','line_number':1428,'multiline':False]
['text':' complement.','line_number':1429,'multiline':False]
['text':' We can perform a single store64 on 32-bit platforms, because inline','line_number':1452,'multiline':False]
['text':' storage can store at least two 32-bit integers.','line_number':1453,'multiline':False]
['text':' Set the sign-bit for negative values and then continue with the two's','line_number':1474,'multiline':False]
['text':' complement.','line_number':1475,'multiline':False]
['text':' Copy the sign-bit, but not any of the other bits used by the GC.','line_number':1524,'multiline':False]
['text':' Copy the length.','line_number':1529,'multiline':False]
['text':' Copy the digits.','line_number':1533,'multiline':False]
['text':' Test for too large numbers.','line_number':1560,'multiline':False]
['text':'','line_number':1561,'multiline':False]
['text':' If the absolute value of the BigInt can't be expressed in an uint32/uint64,','line_number':1562,'multiline':False]
['text':' the result of the comparison is a constant.','line_number':1563,'multiline':False]
['text':' Still need to take the sign-bit into account for relational operations.','line_number':1575,'multiline':False]
['text':' Test for mismatched signs and, if the signs are equal, load |abs(x)| in','line_number':1587,'multiline':False]
['text':' |scratch1| and |abs(y)| in |scratch2| and then compare the absolute numbers','line_number':1588,'multiline':False]
['text':' against each other.','line_number':1589,'multiline':False]
['text':' Jump to |ifTrue| resp. |ifFalse| if the BigInt is strictly less than','line_number':1591,'multiline':False]
['text':' resp. strictly greater than the int32 value, depending on the comparison','line_number':1592,'multiline':False]
['text':' operator.','line_number':1593,'multiline':False]
['text':' BigInt digits are always stored as an absolute number.','line_number':1611,'multiline':False]
['text':' Load the int32 into |scratch2| and negate it for negative numbers.','line_number':1614,'multiline':False]
['text':' We rely on |neg32(INT32_MIN)| staying INT32_MIN, because we're using an','line_number':1622,'multiline':False]
['text':' unsigned comparison below.','line_number':1623,'multiline':False]
['text':' Not all supported platforms (e.g. MIPS64) zero-extend 32-bit operations,','line_number':1628,'multiline':False]
['text':' so we need to explicitly clear any high 32-bits.','line_number':1629,'multiline':False]
['text':' Reverse the relational comparator for negative numbers.','line_number':1632,'multiline':False]
['text':' |-x < -y| <=> |+x > +y|.','line_number':1633,'multiline':False]
['text':' |-x ≤ -y| <=> |+x ≥ +y|.','line_number':1634,'multiline':False]
['text':' |-x > -y| <=> |+x < +y|.','line_number':1635,'multiline':False]
['text':' |-x ≥ -y| <=> |+x ≤ +y|.','line_number':1636,'multiline':False]
['text':' isSigned = ','line_number':1639,'multiline':True]
['text':' isSigned = ','line_number':1645,'multiline':True]
['text':' Proxies can emulate undefined and have complex isCallable behavior.','line_number':1655,'multiline':False]
['text':' JSFunctions are always callable.','line_number':1658,'multiline':False]
['text':' Objects that emulate undefined.','line_number':1661,'multiline':False]
['text':' Handle classes with a call hook.','line_number':1666,'multiline':False]
['text':' An object is callable iff:','line_number':1684,'multiline':False]
['text':'   is<JSFunction>() || (getClass()->cOps && getClass()->cOps->call).','line_number':1685,'multiline':False]
['text':' An object is constructor iff:','line_number':1686,'multiline':False]
['text':'  ((is<JSFunction>() && as<JSFunction>().isConstructor) ||','line_number':1687,'multiline':False]
['text':'   (getClass()->cOps && getClass()->cOps->construct)).','line_number':1688,'multiline':False]
['text':' Just skim proxies off. Their notion of isCallable()/isConstructor() is','line_number':1706,'multiline':False]
['text':' more complicated.','line_number':1707,'multiline':False]
['text':' The object's realm must not be cx->realm.','line_number':1788,'multiline':False]
['text':' The object must be a function.','line_number':1796,'multiline':False]
['text':' The function must be the ArrayConstructor native.','line_number':1800,'multiline':False]
['text':' The object must be a function. (Wrappers are not supported.)','line_number':1818,'multiline':False]
['text':' Load the native into |output|.','line_number':1822,'multiline':False]
['text':' The function must be a TypedArrayConstructor native (from any realm).','line_number':1826,'multiline':False]
['text':' Falls through to the false case.','line_number':1835,'multiline':False]
['text':' Guard the ExpandoAndGeneration* matches the proxy's ExpandoAndGeneration','line_number':1888,'multiline':False]
['text':' privateSlot.','line_number':1889,'multiline':False]
['text':' Guard expandoAndGeneration->generation matches the expected generation.','line_number':1893,'multiline':False]
['text':' Load expandoAndGeneration->expando into the output Value register.','line_number':1898,'multiline':False]
['text':' The pointers are not equal, so if the input string is also an atom it','line_number':1916,'multiline':False]
['text':' must be a different string.','line_number':1917,'multiline':False]
['text':' Check the length.','line_number':1921,'multiline':False]
['text':' We have a non-atomized string with the same length. Call a helper','line_number':1925,'multiline':False]
['text':' function to do the comparison.','line_number':1926,'multiline':False]
['text':' Use indexed value as fast path if possible.','line_number':1949,'multiline':False]
['text':' Reserve space for holding the result int32_t of the call. Use','line_number':1955,'multiline':False]
['text':' pointer-size to avoid misaligning the stack on 64-bit platforms.','line_number':1956,'multiline':False]
['text':' OOM path, recovered by GetInt32FromStringPure.','line_number':1980,'multiline':False]
['text':'','line_number':1981,'multiline':False]
['text':' Use addToStackPtr instead of freeStack as freeStack tracks stack height','line_number':1982,'multiline':False]
['text':' flow-insensitively, and using it twice would confuse the stack height','line_number':1983,'multiline':False]
['text':' tracking.','line_number':1984,'multiline':False]
['text':' Finish bailing out to Baseline.','line_number':2002,'multiline':False]
['text':' Prepare a register set for use in this case.','line_number':2004,'multiline':False]
['text':' Reset SP to the point where clobbering starts.','line_number':2010,'multiline':False]
['text':' Copy data onto stack.','line_number':2018,'multiline':False]
['text':' Enter exit frame for the FinishBailoutToBaseline call.','line_number':2037,'multiline':False]
['text':' No GC things to mark on the stack, push a bare token.','line_number':2044,'multiline':False]
['text':' Save needed values onto stack temporarily.','line_number':2048,'multiline':False]
['text':' Call a stub to free allocated memory and create arguments objects.','line_number':2052,'multiline':False]
['text':' Restore values where they need to be and resume execution.','line_number':2060,'multiline':False]
['text':' Discard exit frame.','line_number':2068,'multiline':False]
['text':' Check the possible previous frame types here.','line_number':2078,'multiline':False]
['text':' Load JitScript','line_number':2104,'multiline':False]
['text':' Load BaselineScript','line_number':2111,'multiline':False]
['text':' Load Baseline jitcode','line_number':2119,'multiline':False]
['text':' Re-entry code is irrelevant because the exception will leave the','line_number':2142,'multiline':False]
['text':' running function and never come back','line_number':2143,'multiline':False]
['text':' fall-through: undefined','line_number':2350,'multiline':False]
['text':' On some non-multiAlias platforms, unboxDouble may use the scratch register,','line_number':2367,'multiline':False]
['text':' so do not merge code paths here.','line_number':2368,'multiline':False]
['text':' Also see below','line_number':2411,'multiline':False]
['text':' Nothing','line_number':2434,'multiline':False]
['text':' Clamping clobbers the input register, so use a temp.','line_number':2468,'multiline':False]
['text':' If we are not truncating, we fail for anything that's not','line_number':2502,'multiline':False]
['text':' null. Otherwise we might be able to handle strings and undefined.','line_number':2503,'multiline':False]
['text':' The value is null or undefined in truncation contexts - just emit 0.','line_number':2525,'multiline':False]
['text':' |output| needs to be different from |stringReg| to load string indices.','line_number':2534,'multiline':False]
['text':' First try loading a string index. If that fails, try converting a string','line_number':2537,'multiline':False]
['text':' into a double, then jump to the double case.','line_number':2538,'multiline':False]
['text':' Try converting double into integer.','line_number':2551,'multiline':False]
['text':' Just unbox a bool, the result is 0 or 1.','line_number':2566,'multiline':False]
['text':' Integers can be unboxed.','line_number':2573,'multiline':False]
['text':' The stack should already be aligned to the size of a value.','line_number':2648,'multiline':False]
['text':' A jit frame is composed of the following:','line_number':2656,'multiline':False]
['text':'','line_number':2657,'multiline':False]
['text':' [padding?] [argN] .. [arg1] [this] [[argc] [callee] [descr] [raddr]]','line_number':2658,'multiline':False]
['text':'                                    \________JitFrameLayout_________/','line_number':2659,'multiline':False]
['text':' (The stack grows this way --->)','line_number':2660,'multiline':False]
['text':'','line_number':2661,'multiline':False]
['text':' We want to ensure that |raddr|, the return address, is 16-byte aligned.','line_number':2662,'multiline':False]
['text':' (Note: if 8-byte alignment was sufficient, we would have already','line_number':2663,'multiline':False]
['text':' returned above.)','line_number':2664,'multiline':False]
['text':' JitFrameLayout does not affect the alignment, so we can ignore it.','line_number':2666,'multiline':False]
['text':' Therefore, we need to ensure that |this| is aligned.','line_number':2670,'multiline':False]
['text':' This implies that |argN| must be aligned if N is even,','line_number':2671,'multiline':False]
['text':' and offset by |sizeof(Value)| if N is odd.','line_number':2672,'multiline':False]
['text':' Depending on the context of the caller, it may be easier to pass in a','line_number':2674,'multiline':False]
['text':' register that has already been modified to include |this|. If that is the','line_number':2675,'multiline':False]
['text':' case, we want to flip the direction of the test.','line_number':2676,'multiline':False]
['text':' |argN| should be aligned to 16 bytes.','line_number':2683,'multiline':False]
['text':' |argN| should be offset by 8 bytes from 16-byte alignment.','line_number':2687,'multiline':False]
['text':' We already know that it is 8-byte aligned, so the only possibilities are:','line_number':2688,'multiline':False]
['text':' a) It is 16-byte aligned, and we must offset it by 8 bytes.','line_number':2689,'multiline':False]
['text':' b) It is not 16-byte aligned, and therefore already has the right offset.','line_number':2690,'multiline':False]
['text':' Therefore, we test to see if it is 16-byte aligned, and adjust it if it is.','line_number':2691,'multiline':False]
['text':' The stack should already be aligned to the size of a value.','line_number':2700,'multiline':False]
['text':' See above for full explanation.','line_number':2709,'multiline':False]
['text':' |argN| should be 16-byte aligned','line_number':2712,'multiline':False]
['text':' |argN| must be 16-byte aligned if argc is even,','line_number':2715,'multiline':False]
['text':' and offset by 8 if argc is odd.','line_number':2716,'multiline':False]
['text':' ===============================================================','line_number':2725,'multiline':False]
['text':' Stubs + builtins + the baseline compiler all require the native SP,','line_number':2789,'multiline':False]
['text':' not the PSP.','line_number':2790,'multiline':False]
['text':' JS_CODEGEN_ARM64','line_number':2823,'multiline':False]
['text':'{{{ check_macroassembler_style','line_number':2825,'multiline':False]
['text':' ===============================================================','line_number':2826,'multiline':False]
['text':' Stack manipulation functions.','line_number':2827,'multiline':False]
['text':' If we're pushing a gcthing, then we can't just push the tagged key','line_number':2843,'multiline':False]
['text':' value since the GC won't have any idea that the push instruction','line_number':2844,'multiline':False]
['text':' carries a reference to a gcthing.  Need to unpack the pointer,','line_number':2845,'multiline':False]
['text':' push it using ImmGCPtr, and then rematerialize the PropertyKey at','line_number':2846,'multiline':False]
['text':' runtime.','line_number':2847,'multiline':False]
['text':' See comment in |Push(PropertyKey, ...)| above for an explanation.','line_number':2868,'multiline':False]
['text':' ===============================================================','line_number':2999,'multiline':False]
['text':' ABI function calls.','line_number':3000,'multiline':False]
['text':' Reinitialize the ABIArg generator.','line_number':3012,'multiline':False]
['text':' On ARM, we need to know what ABI we are using, either in the','line_number':3016,'multiline':False]
['text':' simulator, or based on the configure flags.','line_number':3017,'multiline':False]
['text':' On MIPS, the system ABI use general registers pairs to encode double','line_number':3028,'multiline':False]
['text':' arguments, after one or 2 integer-like arguments. Unfortunately, the','line_number':3029,'multiline':False]
['text':' Lowering phase is not capable to express it at the moment. So we enforce','line_number':3030,'multiline':False]
['text':' the system ABI here.','line_number':3031,'multiline':False]
['text':' The builtin thunk does the FP -> GPR moving on soft-FP, so','line_number':3045,'multiline':False]
['text':' use hard fp unconditionally.','line_number':3046,'multiline':False]
['text':' On arm64, SP may be < PSP now (that's OK).','line_number':3109,'multiline':False]
['text':' eg testcase: tests/bug1375074.js','line_number':3110,'multiline':False]
['text':' On arm64, SP may be < PSP now (that's OK).','line_number':3128,'multiline':False]
['text':' eg testcase: tests/bug1375074.js','line_number':3129,'multiline':False]
['text':' callFromWasm = ','line_number':3141,'multiline':True]
['text':' The TLS register is used in builtin thunks and must be set.','line_number':3143,'multiline':False]
['text':' callFromWasm = ','line_number':3152,'multiline':True]
['text':' callFromWasm = ','line_number':3161,'multiline':True]
['text':' callFromWasm = ','line_number':3163,'multiline':True]
['text':' ===============================================================','line_number':3166,'multiline':False]
['text':' Exit frame footer.','line_number':3167,'multiline':False]
['text':' ===============================================================','line_number':3174,'multiline':False]
['text':' Simple value-shuffling helpers, to hide MoveResolver verbosity','line_number':3175,'multiline':False]
['text':' in common cases.','line_number':3176,'multiline':False]
['text':' ===============================================================','line_number':3197,'multiline':False]
['text':' Arithmetic functions','line_number':3198,'multiline':False]
['text':' Inline int32-specialized implementation of js::powi with overflow','line_number':3202,'multiline':False]
['text':' detection.','line_number':3203,'multiline':False]
['text':' p = 1','line_number':3205,'multiline':False]
['text':' x^y where x == 1 returns 1 for any y.','line_number':3207,'multiline':False]
['text':' m = x','line_number':3211,'multiline':False]
['text':' n = y','line_number':3212,'multiline':False]
['text':' x^y where y < 0 returns a non-int32 value for any x != 1. Except when y is','line_number':3214,'multiline':False]
['text':' large enough so that the result is no longer representable as a double with','line_number':3215,'multiline':False]
['text':' fractional parts. We can't easily determine when y is too large, so we bail','line_number':3216,'multiline':False]
['text':' here.','line_number':3217,'multiline':False]
['text':' Note: it's important for this condition to match the code in CacheIR.cpp','line_number':3218,'multiline':False]
['text':' (CanAttachInt32Pow) to prevent failure loops.','line_number':3219,'multiline':False]
['text':' m *= m','line_number':3227,'multiline':False]
['text':' if ((n & 1) != 0) p *= m','line_number':3232,'multiline':False]
['text':' n >>= 1','line_number':3238,'multiline':False]
['text':' if (n == 0) return p','line_number':3239,'multiline':False]
['text':' Fail for NaN and negative zero.','line_number':3293,'multiline':False]
['text':' The easiest way to distinguish -0.0 from 0.0 is that 1.0/-0.0','line_number':3297,'multiline':False]
['text':' is -Infinity instead of Infinity.','line_number':3298,'multiline':False]
['text':' uint64_t s1 = mState[0];','line_number':3321,'multiline':False]
['text':' s1 ^= s1 << 23;','line_number':3324,'multiline':False]
['text':' s1 ^= s1 >> 17','line_number':3329,'multiline':False]
['text':' const uint64_t s0 = mState[1];','line_number':3334,'multiline':False]
['text':' mState[0] = s0;','line_number':3337,'multiline':False]
['text':' s1 ^= s0','line_number':3340,'multiline':False]
['text':' s1 ^= s0 >> 26','line_number':3343,'multiline':False]
['text':' mState[1] = s1','line_number':3347,'multiline':False]
['text':' s1 += mState[0]','line_number':3350,'multiline':False]
['text':' See comment in XorShift128PlusRNG::nextDouble().','line_number':3354,'multiline':False]
['text':' Note: we know s1Reg isn't signed after the and64 so we can use the faster','line_number':3361,'multiline':False]
['text':' convertInt64ToDouble instead of convertUInt64ToDouble.','line_number':3362,'multiline':False]
['text':' dest *= ScaleInv','line_number':3365,'multiline':False]
['text':' First, test for being equal to 0.0, which also includes -0.0.','line_number':3374,'multiline':False]
['text':' The easiest way to distinguish -0.0 from 0.0 is that 1.0/-0.0','line_number':3378,'multiline':False]
['text':' is -Infinity instead of Infinity.','line_number':3379,'multiline':False]
['text':' Test if both values are NaN.','line_number':3400,'multiline':False]
['text':' array must be a packed array. Load its elements.','line_number':3419,'multiline':False]
['text':' Load the length and guard that it is non-zero.','line_number':3423,'multiline':False]
['text':' Compute the address of the last element.','line_number':3428,'multiline':False]
['text':' Load the first element into result.','line_number':3434,'multiline':False]
['text':' Check whether we're done.','line_number':3440,'multiline':False]
['text':' If not, advance to the next element and load it.','line_number':3443,'multiline':False]
['text':' Update result if necessary.','line_number':3447,'multiline':False]
['text':' array must be a packed array. Load its elements.','line_number':3460,'multiline':False]
['text':' Load the length and check if the array is empty.','line_number':3464,'multiline':False]
['text':' Compute the address of the last element.','line_number':3470,'multiline':False]
['text':' Load the first element into result.','line_number':3476,'multiline':False]
['text':' Check whether we're done.','line_number':3482,'multiline':False]
['text':' If not, advance to the next element and load it into floatTemp.','line_number':3485,'multiline':False]
['text':' Update result if necessary.','line_number':3489,'multiline':False]
['text':' handleNaN = ','line_number':3491,'multiline':True]
['text':' handleNaN = ','line_number':3493,'multiline':True]
['text':' With no arguments, min/max return +Infinity/-Infinity respectively.','line_number':3497,'multiline':False]
['text':' ===============================================================','line_number':3530,'multiline':False]
['text':' Branch functions','line_number':3531,'multiline':False]
['text':' These flags should already have been checked by caller.','line_number':3537,'multiline':False]
['text':' DEBUG','line_number':3545,'multiline':False]
['text':' NOTE: `funFlags` and `output` must be allowed to alias.','line_number':3547,'multiline':False]
['text':' Load the target function's length.','line_number':3549,'multiline':False]
['text':' Load the length property of a native function.','line_number':3556,'multiline':False]
['text':' Load the length property of a bound function.','line_number':3562,'multiline':False]
['text':' Load the length property of an interpreted function.','line_number':3570,'multiline':False]
['text':' Get the JSFunction flags.','line_number':3585,'multiline':False]
['text':' If the name was previously resolved, the name property may be shadowed.','line_number':3588,'multiline':False]
['text':' Call into the VM if the target's name atom doesn't contain the bound','line_number':3596,'multiline':False]
['text':' function prefix.','line_number':3597,'multiline':False]
['text':' Bound functions reuse HAS_GUESSED_ATOM for','line_number':3602,'multiline':False]
['text':' HAS_BOUND_FUNCTION_NAME_PREFIX, so skip the guessed atom check below.','line_number':3603,'multiline':False]
['text':' An absent name property defaults to the empty string.','line_number':3621,'multiline':False]
['text':' Spectre-style checks are not needed here because we do not interpret data','line_number':3698,'multiline':False]
['text':' based on this check.','line_number':3699,'multiline':False]
['text':' The frame is large.  Don't bump sp until after the stack limit check so','line_number':3734,'multiline':False]
['text':' that the trap handler isn't called with a wild sp.','line_number':3735,'multiline':False]
['text':' Load the callee, before the caller's registers are clobbered.','line_number':3772,'multiline':False]
['text':' Switch to the callee's realm.','line_number':3781,'multiline':False]
['text':' Switch to the callee's TLS and pinned registers and make the call.','line_number':3787,'multiline':False]
['text':' Safe to use ABINonArgReg0 since it's the last thing before the call.','line_number':3812,'multiline':False]
['text':' Optimization opportunity: when offsetof(FunctionTableElem, code) == 0, as','line_number':3854,'multiline':False]
['text':' it is at present, we can probably generate better code here by folding','line_number':3855,'multiline':False]
['text':' the address computation into the load.','line_number':3856,'multiline':False]
['text':' asm.js tables require no signature check, and have had their index','line_number':3863,'multiline':False]
['text':' masked into range and thus need no bounds check.','line_number':3864,'multiline':False]
['text':' Write the functype-id into the ABI functype-id register.','line_number':3882,'multiline':False]
['text':' WebAssembly throws if the index is out-of-bounds.','line_number':3897,'multiline':False]
['text':' Load the base pointer of the table.','line_number':3907,'multiline':False]
['text':' Load the callee from the table.','line_number':3910,'multiline':False]
['text':' Load the GC thing in temp1.','line_number':3949,'multiline':False]
['text':' The caller should have checked for null pointers.','line_number':3959,'multiline':False]
['text':' Load the chunk address in temp2.','line_number':3966,'multiline':False]
['text':' If the GC thing is in the nursery, we don't need to barrier it.','line_number':3970,'multiline':False]
['text':' If it's a permanent atom or symbol from a parent runtime we don't','line_number':3985,'multiline':False]
['text':' need to barrier it.','line_number':3986,'multiline':False]
['text':' Determine the bit index and store in temp1.','line_number':4000,'multiline':False]
['text':'','line_number':4001,'multiline':False]
['text':' bit = (addr & js::gc::ChunkMask) / js::gc::CellBytesPerMarkBit +','line_number':4002,'multiline':False]
['text':'        static_cast<uint32_t>(colorBit);','line_number':4003,'multiline':False]
['text':' Load the bitmap word in temp2.','line_number':4014,'multiline':False]
['text':'','line_number':4015,'multiline':False]
['text':' word = chunk.bitmap[bit / MarkBitmapWordBits];','line_number':4016,'multiline':False]
['text':' Fold the adjustment for the fact that arenas don't start at the beginning','line_number':4018,'multiline':False]
['text':' of the chunk into the offset to the chunk bitmap.','line_number':4019,'multiline':False]
['text':' Load the mask in temp1.','line_number':4033,'multiline':False]
['text':'','line_number':4034,'multiline':False]
['text':' mask = uintptr_t(1) << (bit % MarkBitmapWordBits);','line_number':4035,'multiline':False]
['text':' No barrier is needed if the bit is set, |word & mask != 0|.','line_number':4058,'multiline':False]
['text':' ========================================================================','line_number':4062,'multiline':False]
['text':' JS atomic operations.','line_number':4063,'multiline':False]
['text':' Keep this in sync with isLockfreeJS() in jit/AtomicOperations.h.','line_number':4066,'multiline':False]
['text':' Implementation artifact','line_number':4067,'multiline':False]
['text':' Implementation artifact','line_number':4068,'multiline':False]
['text':' Spec requirement','line_number':4069,'multiline':False]
['text':' Implementation artifact','line_number':4070,'multiline':False]
['text':' ========================================================================','line_number':4082,'multiline':False]
['text':' Spectre Mitigations.','line_number':4083,'multiline':False]
['text':' Note: it's fine to clobber the input register, as this is a no-op: it','line_number':4132,'multiline':False]
['text':' only affects speculative execution.','line_number':4133,'multiline':False]
['text':'}}} check_macroassembler_style','line_number':4139,'multiline':False]
['text':' Test length == initializedLength.','line_number':4175,'multiline':False]
['text':' Test the NON_PACKED flag.','line_number':4181,'multiline':False]
['text':' Ensure it's an ArrayObject.','line_number':4189,'multiline':False]
['text':' Load obj->elements in temp1.','line_number':4209,'multiline':False]
['text':' Check flags.','line_number':4212,'multiline':False]
['text':' Load length in temp2. Ensure length == initializedLength.','line_number':4221,'multiline':False]
['text':' Result is |undefined| if length == 0.','line_number':4227,'multiline':False]
['text':' Load the last element.','line_number':4237,'multiline':False]
['text':' Pre-barrier the element because we're removing it from the array.','line_number':4242,'multiline':False]
['text':' Update length and initializedLength.','line_number':4245,'multiline':False]
['text':' Load obj->elements in temp1.','line_number':4256,'multiline':False]
['text':' Check flags.','line_number':4259,'multiline':False]
['text':' Load length in temp2. Ensure length == initializedLength.','line_number':4268,'multiline':False]
['text':' Result is |undefined| if length == 0.','line_number':4274,'multiline':False]
['text':' Load the first element.','line_number':4284,'multiline':False]
['text':' Pre-barrier the element because we're removing it from the array.','line_number':4288,'multiline':False]
['text':' Move the other elements.','line_number':4291,'multiline':False]
['text':' Ensure output and temp2 are in volatileRegs. Don't preserve temp1.','line_number':4293,'multiline':False]
['text':' Reload the elements. The call may have updated it.','line_number':4311,'multiline':False]
['text':' Update length and initializedLength.','line_number':4315,'multiline':False]
['text':' Get initial length value.','line_number':4328,'multiline':False]
['text':' Ensure no overridden elements.','line_number':4331,'multiline':False]
['text':' Bounds check.','line_number':4335,'multiline':False]
['text':' Load ArgumentsData.','line_number':4339,'multiline':False]
['text':' Guard the argument is not a FORWARD_TO_CALL_SLOT MagicValue.','line_number':4342,'multiline':False]
['text':' Get initial length value.','line_number':4350,'multiline':False]
['text':' Test if length has been overridden.','line_number':4354,'multiline':False]
['text':' Shift out arguments length and return it.','line_number':4358,'multiline':False]
['text':' Get initial length value.','line_number':4368,'multiline':False]
['text':' Test flags.','line_number':4371,'multiline':False]
['text':' Fall through for BigInt64 and BigUint64','line_number':4423,'multiline':False]
['text':' Inline implementation of ArrayBufferViewObject::hasDetachedBuffer().','line_number':4463,'multiline':False]
['text':' Load obj->elements in temp.','line_number':4465,'multiline':False]
['text':' Shared buffers can't be detached.','line_number':4468,'multiline':False]
['text':' An ArrayBufferView with a null buffer has never had its buffer exposed to','line_number':4474,'multiline':False]
['text':' become detached.','line_number':4475,'multiline':False]
['text':' Load the ArrayBuffer flags and branch if the detached flag is set.','line_number':4479,'multiline':False]
['text':' See NativeIterator::isReusable.','line_number':4489,'multiline':False]
['text':' Assert we have a PropertyIteratorObject.','line_number':4511,'multiline':False]
['text':' Load NativeIterator object.','line_number':4519,'multiline':False]
['text':' If propertyCursor_ < propertiesEnd_, load the next string and advance','line_number':4529,'multiline':False]
['text':' the cursor.  Otherwise return MagicValue(JS_NO_ITER_VALUE).','line_number':4530,'multiline':False]
['text':' Get next string.','line_number':4537,'multiline':False]
['text':' Increase the cursor.','line_number':4540,'multiline':False]
['text':' Clear active bit.','line_number':4556,'multiline':False]
['text':' Reset property cursor.','line_number':4560,'multiline':False]
['text':' Unlink from the iterator list.','line_number':4564,'multiline':False]
['text':' Can't push large frames blindly on windows, so we must touch frame memory','line_number':4577,'multiline':False]
['text':' incrementally, with no more than 4096 - 1 bytes between touches.','line_number':4578,'multiline':False]
['text':'','line_number':4579,'multiline':False]
['text':' This is used across all platforms for simplicity.','line_number':4580,'multiline':False]
['text':' DEBUG','line_number':4621,'multiline':False]
['text':' DEBUG','line_number':4656,'multiline':False]
['text':' namespace jit','line_number':4658,'multiline':False]
['text':' namespace wasm','line_number':4672,'multiline':False]
['text':' namespace js','line_number':4674,'multiline':False]
