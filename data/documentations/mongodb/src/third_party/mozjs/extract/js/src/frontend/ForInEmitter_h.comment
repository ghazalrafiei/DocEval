['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Class for emitting bytecode for for-in loop.','line_number':24,'multiline':False]
['text':'','line_number':25,'multiline':False]
['text':' Usage: (check for the return value is omitted for simplicity)','line_number':26,'multiline':False]
['text':'','line_number':27,'multiline':False]
['text':'   `for (init in iterated) body`','line_number':28,'multiline':False]
['text':'     // headLexicalEmitterScope: lexical scope for init','line_number':29,'multiline':False]
['text':'     ForInEmitter forIn(this, headLexicalEmitterScope);','line_number':30,'multiline':False]
['text':'     forIn.emitIterated();','line_number':31,'multiline':False]
['text':'     emit(iterated);','line_number':32,'multiline':False]
['text':'     forIn.emitInitialize();','line_number':33,'multiline':False]
['text':'     emit(init);','line_number':34,'multiline':False]
['text':'     forIn.emitBody();','line_number':35,'multiline':False]
['text':'     emit(body);','line_number':36,'multiline':False]
['text':'     forIn.emitEnd(Some(offset_of_for));','line_number':37,'multiline':False]
['text':'','line_number':38,'multiline':False]
['text':' The stack depth before emitting initialize code inside loop.','line_number':43,'multiline':False]
['text':' The lexical scope to be freshened for each iteration.  See the comment','line_number':49,'multiline':False]
['text':' in `emitBody` for more details.  Can be nullptr if there's no lexical','line_number':50,'multiline':False]
['text':' scope.','line_number':51,'multiline':False]
['text':' Cache for the iterated value.','line_number':54,'multiline':False]
['text':' (The cache for the iteration body is inside `loopInfo_`)','line_number':55,'multiline':False]
['text':'','line_number':56,'multiline':False]
['text':' The iterated value needs its own TDZCheckCache, separated from both the','line_number':57,'multiline':False]
['text':' enclosing block and the iteration body, in order to make the sanity check','line_number':58,'multiline':False]
['text':' in Ion work properly.','line_number':59,'multiline':False]
['text':' In term of the execution order, the TDZCheckCache for the iterated value','line_number':60,'multiline':False]
['text':' dominates the one for the iteration body, that means the checks in the','line_number':61,'multiline':False]
['text':' iteration body is dead, and we can optimize them away.  But the sanity','line_number':62,'multiline':False]
['text':' check in Ion doesn't know it's dead.','line_number':63,'multiline':False]
['text':' (see bug 1368360 for more context)','line_number':64,'multiline':False]
['text':' The state of this emitter.','line_number':68,'multiline':False]
['text':'','line_number':69,'multiline':False]
['text':' +-------+ emitIterated +----------+ emitInitialize +------------+','line_number':70,'multiline':False]
['text':' | Start |------------->| Iterated |--------------->| Initialize |-+','line_number':71,'multiline':False]
['text':' +-------+              +----------+                +------------+ |','line_number':72,'multiline':False]
['text':'                                                                   |','line_number':73,'multiline':False]
['text':'                                +----------------------------------+','line_number':74,'multiline':False]
['text':'                                |','line_number':75,'multiline':False]
['text':'                                | emitBody +------+ emitEnd  +-----+','line_number':76,'multiline':False]
['text':'                                +----------| Body |--------->| End |','line_number':77,'multiline':False]
['text':'                                           +------+          +-----+','line_number':78,'multiline':False]
['text':' The initial state.','line_number':80,'multiline':False]
['text':' After calling emitIterated.','line_number':83,'multiline':False]
['text':' After calling emitInitialize.','line_number':86,'multiline':False]
['text':' After calling emitBody.','line_number':89,'multiline':False]
['text':' After calling emitEnd.','line_number':92,'multiline':False]
['text':' Parameters are the offset in the source code for each character below:','line_number':102,'multiline':False]
['text':'','line_number':103,'multiline':False]
['text':'   for ( var x in obj ) { ... }','line_number':104,'multiline':False]
['text':'   ^','line_number':105,'multiline':False]
['text':'   |','line_number':106,'multiline':False]
['text':'   forPos','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' Can be Nothing() if not available.','line_number':109,'multiline':False]
['text':' namespace frontend ','line_number':116,'multiline':True]
['text':' namespace js ','line_number':117,'multiline':True]
['text':' frontend_ForInEmitter_h ','line_number':119,'multiline':True]
