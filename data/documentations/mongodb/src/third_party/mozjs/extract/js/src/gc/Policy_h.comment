['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS Garbage Collector. ','line_number':7,'multiline':True]
['text':' Define the GCPolicy for all internal pointers.','line_number':20,'multiline':False]
['text':' It's not safe to trace unbarriered pointers except as part of root','line_number':32,'multiline':False]
['text':' marking. If you get an assertion here you probably need to add a barrier,','line_number':33,'multiline':False]
['text':' e.g. HeapPtr<T>.','line_number':34,'multiline':False]
['text':' namespace js','line_number':39,'multiline':False]
['text':' Internally, all pointer types are treated as pointers to GC things by','line_number':43,'multiline':False]
['text':' default.','line_number':44,'multiline':False]
['text':' It's not safe to trace unbarriered pointers except as part of root','line_number':91,'multiline':False]
['text':' marking.','line_number':92,'multiline':False]
['text':' namespace JS','line_number':97,'multiline':False]
['text':' gc_Policy_h','line_number':99,'multiline':False]
