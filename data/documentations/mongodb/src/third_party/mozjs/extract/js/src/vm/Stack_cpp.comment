['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' mozilla::Maybe','line_number':9,'multiline':False]
['text':' std::max','line_number':11,'multiline':False]
['text':' std::size','line_number':12,'multiline':False]
['text':' size_t','line_number':13,'multiline':False]
['text':' uint8_t, uint32_t','line_number':14,'multiline':False]
['text':' std::move','line_number':15,'multiline':False]
['text':' js::TraceRoot','line_number':19,'multiline':False]
['text':' JSMSG_*','line_number':22,'multiline':False]
['text':' JS::Value','line_number':23,'multiline':False]
['text':' js::FrameIter','line_number':24,'multiline':False]
['text':'***************************************************************************','line_number':41,'multiline':True]
['text':' In the case of a non-syntactic env chain, the immediate parent of the','line_number':158,'multiline':False]
['text':' outermost non-syntactic env may be the global lexical env, or, if','line_number':159,'multiline':False]
['text':' called from Debugger, a DebugEnvironmentProxy.','line_number':160,'multiline':False]
['text':'','line_number':161,'multiline':False]
['text':' In the case of a syntactic env chain, the outermost env is always a','line_number':162,'multiline':False]
['text':' GlobalObject.','line_number':163,'multiline':False]
['text':' If we OOMed before fully initializing the environment chain, the scope','line_number':172,'multiline':False]
['text':' and environment will definitely mismatch.','line_number':173,'multiline':False]
['text':' At this point, we've yet to push any environments. Check that they','line_number':195,'multiline':False]
['text':' match the enclosing scope.','line_number':196,'multiline':False]
['text':' Check that the scope matches the environment at the point of leaving','line_number':217,'multiline':False]
['text':' the frame.','line_number':218,'multiline':False]
['text':' Trace the callee and |this|. When we're doing a moving GC, we','line_number':329,'multiline':False]
['text':' need to fix up the callee pointer before we use it below, under','line_number':330,'multiline':False]
['text':' numFormalArgs() and script().','line_number':331,'multiline':False]
['text':' Trace arguments.','line_number':334,'multiline':False]
['text':' Trace newTarget.','line_number':338,'multiline':False]
['text':' All locals are live.','line_number':347,'multiline':False]
['text':' Trace operand stack.','line_number':350,'multiline':False]
['text':' Clear dead block-scoped locals.','line_number':353,'multiline':False]
['text':' Trace live locals.','line_number':358,'multiline':False]
['text':'***************************************************************************','line_number':391,'multiline':True]
['text':' Unlike the other methods of this class, this method is defined here so that','line_number':393,'multiline':False]
['text':' we don't have to #include jsautooplen.h in vm/Stack.h.','line_number':394,'multiline':False]
['text':'***************************************************************************','line_number':397,'multiline':True]
['text':' newTarget ','line_number':423,'multiline':True]
['text':'***************************************************************************','line_number':439,'multiline':True]
['text':' If profiler sampling is not enabled, skip.','line_number':471,'multiline':False]
['text':' Handle transition frames (see comment in JitFrameIter::operator++).','line_number':510,'multiline':False]
['text':' Using this ctor will skip the first ion->wasm frame, which is','line_number':524,'multiline':False]
['text':' needed because the profiling iterator doesn't know how to unwind','line_number':525,'multiline':False]
['text':' when the callee has no script.','line_number':526,'multiline':False]
['text':' We want to know if we should start with a wasm profiling frame iterator','line_number':554,'multiline':False]
['text':' or not. To determine this, there are three possibilities:','line_number':555,'multiline':False]
['text':' - we've exited to C++ from wasm, in which case the activation','line_number':556,'multiline':False]
['text':'   exitFP low bit is tagged and we can test hasWasmExitFP().','line_number':557,'multiline':False]
['text':' - we're in wasm code, so we can do a lookup on PC.','line_number':558,'multiline':False]
['text':' - in all the other cases, we're not in wasm or we haven't exited from','line_number':559,'multiline':False]
['text':'   wasm.','line_number':560,'multiline':False]
['text':' The same reasoning as in the above iteratorConstruct variant applies','line_number':577,'multiline':False]
['text':' here, except that it's even simpler: since this activation is higher up','line_number':578,'multiline':False]
['text':' on the stack, it can only have exited to C++, through wasm or ion.','line_number':579,'multiline':False]
['text':' TODO: get the realm ID of wasm frames. Bug 1596235.','line_number':639,'multiline':False]
['text':' Look up an entry for the return address.','line_number':646,'multiline':False]
['text':' NB:','line_number':651,'multiline':False]
['text':' The following lookups should be infallible, but the ad-hoc stackwalking','line_number':652,'multiline':False]
['text':' code rots easily and corner cases where frames can't be looked up','line_number':653,'multiline':False]
['text':' occur too often (e.g. once every day).','line_number':654,'multiline':False]
['text':'','line_number':655,'multiline':False]
['text':' The calls to `lookup*` below have been changed from infallible ones to','line_number':656,'multiline':False]
['text':' fallible ones.  The proper solution to this problem is to fix all','line_number':657,'multiline':False]
['text':' the jitcode to use frame-pointers and reliably walk the stack with those.','line_number':658,'multiline':False]
['text':' Failed to look up a jitcode entry for the given address, ignore.','line_number':667,'multiline':False]
['text':' Dummy frames produce no stack frames.','line_number':676,'multiline':False]
['text':' Dummy frames produce no stack frames.','line_number':717,'multiline':False]
['text':' Extract the stack for the entry.  Assume maximum inlining depth is <64','line_number':733,'multiline':False]
