['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' If the operand is a constant, emit near its uses.','line_number':45,'multiline':False]
['text':' If the unbox is fallible, load the Value in a register first to','line_number':69,'multiline':False]
['text':' avoid multiple loads.','line_number':70,'multiline':False]
['text':' FIXME: It should be possible to useAtStart() here, but the DEBUG','line_number':73,'multiline':False]
['text':' code in CodeGenerator::visitUnbox() needs to handle non-Register','line_number':74,'multiline':False]
['text':' cases. ARM64 doesn't have an Operand type.','line_number':75,'multiline':False]
['text':' x = !y','line_number':94,'multiline':False]
['text':' z = x+y','line_number':104,'multiline':False]
['text':' These all currently have codegen that depends on reuse but only because the','line_number':143,'multiline':False]
['text':' masm API depends on that.  We need new three-address masm APIs, for both','line_number':144,'multiline':False]
['text':' constant and variable rhs.','line_number':145,'multiline':False]
['text':'','line_number':146,'multiline':False]
['text':' MAdd => LAddI64','line_number':147,'multiline':False]
['text':' MSub => LSubI64','line_number':148,'multiline':False]
['text':' MBitAnd, MBitOr, MBitXor => LBitOpI64','line_number':149,'multiline':False]
['text':' Only specific ops generating int32.','line_number':516,'multiline':False]
['text':' If never used then defer (it will be removed).','line_number':523,'multiline':False]
['text':' We require an MTest consumer.','line_number':528,'multiline':False]
['text':' Defer only if there's only one use.','line_number':533,'multiline':False]
['text':' Generate UDiv','line_number':579,'multiline':False]
['text':' We have no memory-base value, meaning that HeapReg is to be used as the','line_number':630,'multiline':False]
['text':' memory base.  This follows from the definition of','line_number':631,'multiline':False]
['text':' FunctionCompiler::maybeLoadMemoryBase() in WasmIonCompile.cpp.','line_number':632,'multiline':False]
['text':' See comment in LIRGenerator::visitAsmJSStoreHeap just above.','line_number':652,'multiline':False]
['text':' Note, the access type may be Int64 here.','line_number':663,'multiline':False]
['text':' Note, the access type may be Int64 here.','line_number':676,'multiline':False]
['text':' Note, the access type may be Int64 here.','line_number':687,'multiline':False]
['text':' flagTemp= ','line_number':693,'multiline':True]
['text':' temp= ','line_number':700,'multiline':True]
['text':' flagTemp= ','line_number':701,'multiline':True]
['text':' Case 1: the result of the operation is not used.','line_number':740,'multiline':False]
['text':'','line_number':741,'multiline':False]
['text':' We can omit allocating the result BigInt.','line_number':742,'multiline':False]
['text':' Case 2: the result of the operation is used.','line_number':751,'multiline':False]
['text':' If the target is an FPReg then we need a temporary at the CodeGenerator','line_number':805,'multiline':False]
['text':' level for creating the result.','line_number':806,'multiline':False]
['text':' On ARM64, control register is used as output at machine instruction.','line_number':988,'multiline':False]
['text':' Probably many we want to do here','line_number':1029,'multiline':False]
['text':' Optimal code generation reuses the lhs register because the rhs scalar is','line_number':1163,'multiline':False]
['text':' merged into a vector lhs.','line_number':1164,'multiline':False]
['text':' 64-bit integer splats.','line_number':1186,'multiline':False]
['text':' Load-and-(sign|zero)extend.','line_number':1187,'multiline':False]
['text':' Floating-point splats.','line_number':1195,'multiline':False]
['text':' 32-bit integer splats.','line_number':1202,'multiline':False]
['text':' Reductions (any_true, all_true, bitmask, extract_lane) uniformly prefer','line_number':1293,'multiline':False]
['text':' useRegisterAtStart:','line_number':1294,'multiline':False]
['text':'','line_number':1295,'multiline':False]
['text':' - In most cases, the input type differs from the output type, so there's no','line_number':1296,'multiline':False]
['text':'   conflict and it doesn't really matter.','line_number':1297,'multiline':False]
['text':'','line_number':1298,'multiline':False]
['text':' - For extract_lane(0) on F32x4 and F64x2, input == output results in zero','line_number':1299,'multiline':False]
['text':'   code being generated.','line_number':1300,'multiline':False]
['text':'','line_number':1301,'multiline':False]
['text':' - For extract_lane(k > 0) on F32x4 and F64x2, allowing the input register','line_number':1302,'multiline':False]
['text':'   to be targeted lowers register pressure if it's the last use of the','line_number':1303,'multiline':False]
['text':'   input.','line_number':1304,'multiline':False]
['text':' Ideally we would reuse the input register for floating extract_lane if','line_number':1323,'multiline':False]
['text':' the lane is zero, but constraints in the register allocator require the','line_number':1324,'multiline':False]
['text':' input and output register types to be the same.','line_number':1325,'multiline':False]
['text':' Optimal allocation here reuses the value input for the output register','line_number':1337,'multiline':False]
['text':' because codegen otherwise has to copy the input to the output; this is','line_number':1338,'multiline':False]
['text':' because load-lane is implemented as load + replace-lane.  Bug 1706106 may','line_number':1339,'multiline':False]
['text':' change all of that, so leave it alone for now.','line_number':1340,'multiline':False]
