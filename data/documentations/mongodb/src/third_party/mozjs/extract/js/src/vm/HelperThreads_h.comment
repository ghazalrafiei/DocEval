['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * API for managing off-thread work.
 ','line_number':7,'multiline':True]
['text':' namespace JS','line_number':28,'multiline':False]
['text':' namespace jit','line_number':43,'multiline':False]
['text':' namespace wasm','line_number':50,'multiline':False]
['text':'
 * Lock protecting all mutable shared state accessed by helper threads, and used
 * by all condition variables.
 ','line_number':52,'multiline':True]
['text':' Create data structures used by helper threads.','line_number':73,'multiline':False]
['text':' Destroy data structures used by helper threads.','line_number':76,'multiline':False]
['text':' Initialize helper threads unless already initialized.','line_number':79,'multiline':False]
['text':' This allows the JS shell to override GetCPUCount() when passed the','line_number':86,'multiline':False]
['text':' --thread-count=N option.','line_number':87,'multiline':False]
['text':' Enqueues a wasm compilation task.','line_number':90,'multiline':False]
['text':' Remove any pending wasm compilation tasks queued with','line_number':93,'multiline':False]
['text':' StartOffThreadWasmCompile that match the arguments. Return the number','line_number':94,'multiline':False]
['text':' removed.','line_number':95,'multiline':False]
['text':' Enqueues a wasm compilation task.','line_number':100,'multiline':False]
['text':' Cancel all background Wasm Tier-2 compilations.','line_number':103,'multiline':False]
['text':'
 * If helper threads are available, call execute() then dispatchResolve() on the
 * given task in a helper thread. If no helper threads are available, the given
 * task is executed and resolved synchronously.
 *
 * This function takes ownership of task unconditionally; if it fails, task is
 * deleted.
 ','line_number':106,'multiline':True]
['text':'
 * Like the JSContext-accepting version, but only safe to use when helper
 * threads are available, so we can be sure we'll never need to fall back on
 * synchronous execution.
 *
 * This function can be called from any thread, but takes ownership of the task
 * only on success. On OOM, it is the caller's responsibility to arrange for the
 * task to be cleaned up properly.
 ','line_number':117,'multiline':True]
['text':'
 * Schedule an off-thread Ion compilation for a script, given a task.
 ','line_number':128,'multiline':True]
['text':'
 * Schedule deletion of Ion compilation data.
 ','line_number':134,'multiline':True]
['text':'
 * Cancel scheduled or in progress Ion compilations.
 ','line_number':151,'multiline':True]
['text':'
 * Wait for all scheduled, in progress or finished parse tasks for the runtime
 * to complete.
 ','line_number':181,'multiline':True]
['text':'
 * Cancel all scheduled, in progress or finished parses for runtime.
 *
 * Parse tasks which have completed but for which JS::FinishOffThreadScript (or
 * equivalent) has not been called are removed from the system. This is only
 * safe to do during shutdown, or if you know that the main thread isn't waiting
 * for tasks to complete.
 ','line_number':187,'multiline':True]
['text':'
 * Start a parse/emit cycle for a stream of source. The characters must stay
 * alive until the compilation finishes.
 ','line_number':197,'multiline':True]
['text':'
 * Called at the end of GC to enqueue any Parse tasks that were waiting on an
 * atoms-zone GC to finish.
 ','line_number':238,'multiline':True]
['text':' Drain the task queues and wait for all helper threads to finish running.','line_number':244,'multiline':False]
['text':'','line_number':245,'multiline':False]
['text':' Note that helper threads are shared between runtimes and it's possible that','line_number':246,'multiline':False]
['text':' another runtime could saturate the helper thread system and cause this to','line_number':247,'multiline':False]
['text':' never return.','line_number':248,'multiline':False]
['text':' Enqueue a compression job to be processed later. These are started at the','line_number':259,'multiline':False]
['text':' start of the major GC after the next one.','line_number':260,'multiline':False]
['text':' Start handling any compression tasks for this runtime. Called at the start of','line_number':264,'multiline':False]
['text':' major GC.','line_number':265,'multiline':False]
['text':' Cancel all scheduled, in progress, or finished compression tasks for','line_number':268,'multiline':False]
['text':' runtime.','line_number':269,'multiline':False]
['text':' Sweep pending tasks that are holding onto should-be-dead ScriptSources.','line_number':275,'multiline':False]
['text':' Run all pending source compression tasks synchronously, for testing purposes','line_number':278,'multiline':False]
['text':' False if the off-thread source compression mechanism isn't being used. This','line_number':281,'multiline':False]
['text':' happens on low core count machines where we are concerned about blocking','line_number':282,'multiline':False]
['text':' main-thread execution.','line_number':283,'multiline':False]
['text':' Return whether, if a new parse task was started, it would need to wait for','line_number':286,'multiline':False]
['text':' an in-progress GC to complete before starting.','line_number':287,'multiline':False]
['text':' namespace js','line_number':290,'multiline':False]
['text':' vm_HelperThreads_h ','line_number':292,'multiline':True]
