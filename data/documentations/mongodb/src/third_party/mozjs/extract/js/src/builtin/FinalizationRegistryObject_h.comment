['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':'
 * FinalizationRegistry objects allow a program to register to receive a
 * callback after a 'target' object dies. The callback is passed a 'held value'
 * (that hopefully doesn't entrain the target). An 'unregister token' is an
 * object which can be used to remove multiple previous registrations in one go.
 *
 * To arrange this, the following data structures are used:
 *
 *   +---------------------------------------+-------------------------------+
 *   |   FinalizationRegistry compartment    |   Target zone / compartment   |
 *   |                                       |                               |
 *   |        +----------------------+       |     +------------------+      |
 *   |  +-----+ FinalizationRegistry |       |     |       Zone       |      |
 *   |  |     +----------+-----------+       |     +---------+--------+      |
 *   |  |                |                   |               |               |
 *   |  |                v                   |               v               |
 *   |  |  +-------------+-------------+     |  +------------+------------+  |
 *   |  |  |       Registrations       |     |  |  FinalizationRecordMap  |  |
 *   |  |  |         weak map          |     |  |           map           |  |
 *   |  |  +---------------------------+     |  +-------------------------+  |
 *   |  |  | Unregister  :   Records   |     |  |  Target  : Finalization |  |
 *   |  |  |   token     :   object    |     |  |  object  : RecordVector |  |
 *   |  |  +--------------------+------+     |  +----+-------------+------+  |
 *   |  |                       |            |       |             |         |
 *   |  |                       v            |       v             |         |
 *   |  |  +--------------------+------+     |  +----+-----+       |         |
 *   |  |  |       Finalization        |     |  |  Target  |       |         |
 *   |  |  |    RegistrationsObject    |     |  | JSObject |       |         |
 *   |  |  +---------------------------+     |  +----------+       |         |
 *   |  |  |       RecordVector        |     |                     |         |
 *   |  |  +-------------+-------------+     |                     |         |
 *   |  |                |                   |                     |         |
 *   |  |              * v                   |                     |         |
 *   |  |  +-------------+-------------+ *   |                     |         |
 *   |  |  | FinalizationRecordObject  +<--------------------------+         |
 *   |  |  +---------------------------+     |                               |
 *   |  |  | Queue                     +--+  |                               |
 *   |  |  +---------------------------+  |  |                               |
 *   |  |  | Held value                |  |  |                               |
 *   |  |  +---------------------------+  |  |                               |
 *   |  |                                 |  |                               |
 *   |  +--------------+   +--------------+  |                               |
 *   |                 |   |                 |                               |
 *   |                 v   v                 |                               |
 *   |      +----------+---+----------+      |                               |
 *   |      | FinalizationQueueObject |      |                               |
 *   |      +-------------------------+      |                               |
 *   |                                       |                               |
 *   +---------------------------------------+-------------------------------+
 *
 * A FinalizationRegistry consists of two parts: the FinalizationRegistry that
 * consumers see and a FinalizationQueue used internally to queue and call the
 * cleanup callbacks.
 *
 * Registering a target with a FinalizationRegistry creates a FinalizationRecord
 * containing a pointer to the queue and the heldValue. This is added to a
 * vector of records associated with the target, implemented as a map on the
 * target's Zone. All finalization records are treated as GC roots.
 *
 * When a target is registered an unregister token may be supplied. If so, this
 * is also recorded by the registry and is stored in a weak map of
 * registrations. The values of this map are FinalizationRegistrationsObject
 * objects. It's necessary to have another JSObject here because our weak map
 * implementation only supports JS types as values.
 *
 * When targets are unregistered, the registration is looked up in the weakmap
 * and the corresponding records are cleared.

 * The finalization record maps are swept during GC to check for records that
 * have been cleared by unregistration, for FinalizationRecords that are dead
 * and for nuked CCWs. In all cases the record is removed and the cleanup
 * callback is not run.
 *
 * Following this the targets are checked to see if they are dying. For such
 * targets the associated record list is processed and for each record the
 * heldValue is queued on the FinalizationQueue. At a later time this causes the
 * client's cleanup callback to be run.
 ','line_number':7,'multiline':True]
['text':' A finalization record: a pair of finalization registry and held value.','line_number':107,'multiline':False]
['text':'','line_number':108,'multiline':False]
['text':' A finalization record represents the registered interest of a finalization','line_number':109,'multiline':False]
['text':' registry in a target's finalization.','line_number':110,'multiline':False]
['text':'','line_number':111,'multiline':False]
['text':' Finalization records are initially 'active' but may be cleared and become','line_number':112,'multiline':False]
['text':' inactive. This happens when:','line_number':113,'multiline':False]
['text':'  - the heldValue is passed to the registry's cleanup callback','line_number':114,'multiline':False]
['text':'  - the registry's unregister method removes the registration','line_number':115,'multiline':False]
['text':' A vector of weakly-held FinalizationRecordObjects.','line_number':133,'multiline':False]
['text':' A JS object containing a vector of weakly-held FinalizationRecordObjects,','line_number':137,'multiline':False]
['text':' which holds the records corresponding to the registrations for a particular','line_number':138,'multiline':False]
['text':' registration token. These are used as the values in the registration','line_number':139,'multiline':False]
['text':' weakmap. Since the contents of the vector are weak references they are not','line_number':140,'multiline':False]
['text':' traced.','line_number':141,'multiline':False]
['text':' The JS FinalizationRegistry object itself.','line_number':172,'multiline':False]
['text':' Contains information about the cleanup callback and the records queued to','line_number':216,'multiline':False]
['text':' be cleaned up. This is not exposed to content JS.','line_number':217,'multiline':False]
['text':' namespace js','line_number':264,'multiline':False]
['text':' builtin_FinalizationRegistryObject_h ','line_number':266,'multiline':True]
