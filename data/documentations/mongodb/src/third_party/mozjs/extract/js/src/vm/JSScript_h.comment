['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' JS script descriptor. ','line_number':7,'multiline':True]
['text':' std::is_same','line_number':23,'multiline':False]
['text':' std::move','line_number':24,'multiline':False]
['text':' ScriptIndex','line_number':28,'multiline':False]
['text':' SrcNote','line_number':29,'multiline':False]
['text':' ScopeKind','line_number':44,'multiline':False]
['text':' js::GCThingIndex, js::SourceExtent, js::SharedImmutableScriptData, MemberInitializers','line_number':47,'multiline':False]
['text':' namespace JS','line_number':54,'multiline':False]
['text':' namespace coverage','line_number':63,'multiline':False]
['text':' namespace gc','line_number':67,'multiline':False]
['text':' namespace jit','line_number':75,'multiline':False]
['text':' namespace frontend','line_number':86,'multiline':False]
['text':' Return the counter used to count the number of visits. Returns null if','line_number':99,'multiline':False]
['text':' the element is not found.','line_number':100,'multiline':False]
['text':' PCCounts are stored at jump-target offsets. This function looks for the','line_number':104,'multiline':False]
['text':' previous PCCount which is in the same basic block as the current offset.','line_number':105,'multiline':False]
['text':' Return the counter used to count the number of throws. Returns null if','line_number':108,'multiline':False]
['text':' the element is not found.','line_number':109,'multiline':False]
['text':' Throw counts are stored at the location of each throwing','line_number':112,'multiline':False]
['text':' instruction. This function looks for the previous throw count.','line_number':113,'multiline':False]
['text':'','line_number':114,'multiline':False]
['text':' Note: if the offset of the returned count is higher than the offset of','line_number':115,'multiline':False]
['text':' the immediate preceding PCCount, then this throw happened in the same','line_number':116,'multiline':False]
['text':' basic block.','line_number':117,'multiline':False]
['text':' Return the counter used to count the number of throws. Allocate it if','line_number':120,'multiline':False]
['text':' none exists yet. Returns null if the allocation failed.','line_number':121,'multiline':False]
['text':' This sorted array is used to map an offset to the number of times a','line_number':130,'multiline':False]
['text':' branch got visited.','line_number':131,'multiline':False]
['text':' This sorted vector is used to map an offset to the number of times an','line_number':134,'multiline':False]
['text':' instruction throw.','line_number':135,'multiline':False]
['text':' Information about any Ion compilations for the script.','line_number':138,'multiline':False]
['text':' The key of these side-table hash maps are intentionally not traced GC','line_number':142,'multiline':False]
['text':' references to JSScript. Instead, we use bare pointers and manually fix up','line_number':143,'multiline':False]
['text':' when objects could have moved (see Zone::fixupScriptMapsAfterMovingGC) and','line_number':144,'multiline':False]
['text':' remove when the realm is destroyed (see Zone::clearScriptCounts and','line_number':145,'multiline':False]
['text':' Zone::clearScriptNames). They essentially behave as weak references, except','line_number':146,'multiline':False]
['text':' that the references are not cleared early by the GC. They must be non-strong','line_number':147,'multiline':False]
['text':' references because the tables are kept at the Zone level and otherwise the','line_number':148,'multiline':False]
['text':' table keys would keep scripts alive, thus keeping Realms alive, beyond their','line_number':149,'multiline':False]
['text':' expected lifetimes. However, We do not use actual weak references (e.g. as','line_number':150,'multiline':False]
['text':' used by WeakMap tables provided in gc/WeakMap.h) because they would be','line_number':151,'multiline':False]
['text':' collected before the calls to the JSScript::finalize function which are used','line_number':152,'multiline':False]
['text':' to aggregate code coverage results on the realm.','line_number':153,'multiline':False]
['text':'','line_number':154,'multiline':False]
['text':' Note carefully, however, that there is an exceptional case for which we *do*','line_number':155,'multiline':False]
['text':' want the JSScripts to be strong references (and thus traced): when the','line_number':156,'multiline':False]
['text':' --dump-bytecode command line option or the PCCount JSFriend API is used,','line_number':157,'multiline':False]
['text':' then the scripts for all counts must remain alive. See','line_number':158,'multiline':False]
['text':' Zone::traceScriptTableRoots() for more details.','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':' TODO: Clean this up by either aggregating coverage results in some other','line_number':161,'multiline':False]
['text':' way, or by tweaking sweep ordering.','line_number':162,'multiline':False]
['text':' The 'const char*' for the function name is a pointer within the LCovSource's','line_number':167,'multiline':False]
['text':' LifoAlloc and will be discarded at the same time.','line_number':168,'multiline':False]
['text':' The uncompressed source cache contains *either* UTF-8 source data *or*','line_number':218,'multiline':False]
['text':' UTF-16 source data.  ScriptSourceChunk implies a ScriptSource that','line_number':219,'multiline':False]
['text':' contains either UTF-8 data or UTF-16 data, so the nature of the key to','line_number':220,'multiline':False]
['text':' Map below indicates how each SourceData ought to be interpreted.','line_number':221,'multiline':False]
['text':' Hold an entry in the source data cache and prevent it from being purged on','line_number':239,'multiline':False]
['text':' GC.','line_number':240,'multiline':False]
['text':' Initialise the holder for a specific cache and script source.','line_number':268,'multiline':False]
['text':' This will hold on to the cached source chars in the event that','line_number':269,'multiline':False]
['text':' the cache is purged.','line_number':270,'multiline':False]
['text':' Take ownership of source chars now the cache is being purged. Remove','line_number':280,'multiline':False]
['text':' our reference to the ScriptSource which might soon be destroyed.','line_number':281,'multiline':False]
['text':' Casting |char| data to |Utf8Unit| is safe because |Utf8Unit|','line_number':326,'multiline':False]
['text':' contains a |char|.  See the long comment in |Utf8Unit|'s definition.','line_number':327,'multiline':False]
['text':' The cache only stores strings of |char| or |char16_t|, and right now','line_number':338,'multiline':False]
['text':' it seems best not to gunk up the cache with |Utf8Unit| too.  So','line_number':339,'multiline':False]
['text':' cache |Utf8Unit| strings by interpreting them as |char| strings.','line_number':340,'multiline':False]
['text':' Synchronously compress the source of |script|, for testing purposes.','line_number':364,'multiline':False]
['text':' Retrievable source can be retrieved using the source hook (and therefore','line_number':368,'multiline':False]
['text':' need not be XDR'd, can be discarded if desired because it can always be','line_number':369,'multiline':False]
['text':' reconstituted later, etc.).','line_number':370,'multiline':False]
['text':' [SMDOC] ScriptSource','line_number':373,'multiline':False]
['text':'','line_number':374,'multiline':False]
['text':' This class abstracts over the source we used to compile from. The current','line_number':375,'multiline':False]
['text':' representation may transition to different modes in order to save memory.','line_number':376,'multiline':False]
['text':' Abstractly the source may be one of UTF-8 or UTF-16. The data itself may be','line_number':377,'multiline':False]
['text':' unavailable, retrieveable-using-source-hook, compressed, or uncompressed. If','line_number':378,'multiline':False]
['text':' source is retrieved or decompressed for use, we may update the ScriptSource','line_number':379,'multiline':False]
['text':' to hold the result.','line_number':380,'multiline':False]
['text':' NOTE: While ScriptSources may be compressed off thread, they are only','line_number':382,'multiline':False]
['text':' modified by the main thread, and all members are always safe to access','line_number':383,'multiline':False]
['text':' on the main thread.','line_number':384,'multiline':False]
['text':' Common base class of the templated variants of PinnedUnits<T>.','line_number':391,'multiline':False]
['text':' Any users that wish to manipulate the char buffer of the ScriptSource','line_number':403,'multiline':False]
['text':' needs to do so via PinnedUnits for GC safety. A GC may compress','line_number':404,'multiline':False]
['text':' ScriptSources. If the source were initially uncompressed, then any raw','line_number':405,'multiline':False]
['text':' pointers to the char buffer would now point to the freed, uncompressed','line_number':406,'multiline':False]
['text':' chars. This is analogous to Rooted.','line_number':407,'multiline':False]
['text':' Missing source text that isn't retrievable using the source hook.  (All','line_number':427,'multiline':False]
['text':' ScriptSources initially begin in this state.  Users that are compiling','line_number':428,'multiline':False]
['text':' source text will overwrite |data| to store a different state.)','line_number':429,'multiline':False]
['text':' Source that can be retrieved using the registered source hook.  |Unit|','line_number':432,'multiline':False]
['text':' records the source type so that source-text coordinates in functions and','line_number':433,'multiline':False]
['text':' scripts that depend on this |ScriptSource| are correct.','line_number':434,'multiline':False]
['text':' The source hook and script URL required to retrieve source are stored','line_number':437,'multiline':False]
['text':' elsewhere, so nothing is needed here.  It'd be better hygiene to store','line_number':438,'multiline':False]
['text':' something source-hook-like in each |ScriptSource| that needs it, but that','line_number':439,'multiline':False]
['text':' requires reimagining a source-hook API that currently depends on source','line_number':440,'multiline':False]
['text':' hooks being uniquely-owned pointers...','line_number':441,'multiline':False]
['text':' Uncompressed source text. Templates distinguish if we are interconvertable','line_number':444,'multiline':False]
['text':' to |Retrievable| or not.','line_number':445,'multiline':False]
['text':' Compressed source text. Templates distinguish if we are interconvertable','line_number':468,'multiline':False]
['text':' to |Retrievable| or not.','line_number':469,'multiline':False]
['text':' Single-byte compressed text, regardless whether the original text','line_number':472,'multiline':False]
['text':' was single-byte or two-byte.','line_number':473,'multiline':False]
['text':' The set of currently allowed encoding modes.','line_number':489,'multiline':False]
['text':'','line_number':502,'multiline':False]
['text':' Start of fields.','line_number':503,'multiline':False]
['text':'','line_number':504,'multiline':False]
['text':' An id for this source that is unique across the process. This can be used','line_number':508,'multiline':False]
['text':' to refer to this source from places that don't want to hold a strong','line_number':509,'multiline':False]
['text':' reference on the source itself.','line_number':510,'multiline':False]
['text':'','line_number':511,'multiline':False]
['text':' This is a 32 bit ID and could overflow, in which case the ID will not be','line_number':512,'multiline':False]
['text':' unique anymore.','line_number':513,'multiline':False]
['text':' Source data (as a mozilla::Variant).','line_number':516,'multiline':False]
['text':' If the GC calls triggerConvertToCompressedSource with PinnedUnits present,','line_number':519,'multiline':False]
['text':' the first PinnedUnits (that is, bottom of the stack) will install the','line_number':520,'multiline':False]
['text':' compressed chars upon destruction.','line_number':521,'multiline':False]
['text':'','line_number':522,'multiline':False]
['text':' Retrievability isn't part of the type here because uncompressed->compressed','line_number':523,'multiline':False]
['text':' transitions must preserve existing retrievability.','line_number':524,'multiline':False]
['text':' True if an associated SourceCompressionTask was ever created.','line_number':530,'multiline':False]
['text':' The filename of this script.','line_number':533,'multiline':False]
['text':' If this ScriptSource was generated by a code-introduction mechanism such','line_number':536,'multiline':False]
['text':' as |eval| or |new Function|, the debugger needs access to the "raw"','line_number':537,'multiline':False]
['text':' filename of the top-level script that contains the eval-ing code.  To','line_number':538,'multiline':False]
['text':' keep track of this, we must preserve the original outermost filename (of','line_number':539,'multiline':False]
['text':' the original introducer script), so that instead of a filename of','line_number':540,'multiline':False]
['text':' "foo.js line 30 > eval line 10 > Function", we can obtain the original','line_number':541,'multiline':False]
['text':' raw filename of "foo.js".','line_number':542,'multiline':False]
['text':'','line_number':543,'multiline':False]
['text':' In the case described above, this field will be set to to the original raw','line_number':544,'multiline':False]
['text':' filename from above, otherwise it will be mozilla::Nothing.','line_number':545,'multiline':False]
['text':' The bytecode cache encoder is used to encode only the content of function','line_number':551,'multiline':False]
['text':' which are delazified.  If this value is not nullptr, then each delazified','line_number':552,'multiline':False]
['text':' function should be recorded before their first execution.','line_number':553,'multiline':False]
['text':' This value is logically owned by the canonical ScriptSourceObject, and','line_number':554,'multiline':False]
['text':' will be released in the canonical SSO's finalizer.','line_number':555,'multiline':False]
['text':' A string indicating how this source code was introduced into the system.','line_number':558,'multiline':False]
['text':' This is a constant, statically allocated C string, so does not need memory','line_number':559,'multiline':False]
['text':' management.','line_number':560,'multiline':False]
['text':' Bytecode offset in caller script that generated this code.  This is','line_number':563,'multiline':False]
['text':' present for eval-ed code, as well as "new Function(...)"-introduced','line_number':564,'multiline':False]
['text':' scripts.','line_number':565,'multiline':False]
['text':' If this source is for Function constructor, the position of ")" after','line_number':568,'multiline':False]
['text':' parameter list in the source.  This is used to get function body.','line_number':569,'multiline':False]
['text':' 0 for other cases.','line_number':570,'multiline':False]
['text':' Line number within the file where this source starts.','line_number':573,'multiline':False]
['text':' See: CompileOptions::mutedErrors.','line_number':576,'multiline':False]
['text':' Set to true if parser saw  asmjs directives.','line_number':579,'multiline':False]
['text':'','line_number':582,'multiline':False]
['text':' End of fields.','line_number':583,'multiline':False]
['text':'','line_number':584,'multiline':False]
['text':' How many ids have been handed out to sources.','line_number':586,'multiline':False]
['text':' Return a string containing the chars starting at |begin| and ending at','line_number':594,'multiline':False]
['text':' |begin + len|.','line_number':595,'multiline':False]
['text':'','line_number':596,'multiline':False]
['text':' Warning: this is *not* GC-safe! Any chars to be handed out must use','line_number':597,'multiline':False]
['text':' PinnedUnits. See comment below.','line_number':598,'multiline':False]
['text':' When creating a JSString* from TwoByte source characters, we don't try to','line_number':604,'multiline':False]
['text':' to deflate to Latin1 for longer strings, because this can be slow.','line_number':605,'multiline':False]
['text':'*
   * The minimum script length (in code units) necessary for a script to be
   * eligible to be compressed.
   ','line_number':623,'multiline':True]
['text':' Attempt to load usable source for |ss| -- source text on which substring','line_number':637,'multiline':False]
['text':' operations and the like can be performed.  On success return true and set','line_number':638,'multiline':False]
['text':' |*loaded| to indicate whether usable source could be loaded; otherwise','line_number':639,'multiline':False]
['text':' return false.','line_number':640,'multiline':False]
['text':' Assign source data from |srcBuf| to this recently-created |ScriptSource|.','line_number':643,'multiline':False]
['text':' Overwrites |data| with the uncompressed data from |source|.','line_number':867,'multiline':False]
['text':'','line_number':868,'multiline':False]
['text':' This function asserts nothing about |data|.  Users should use assertions to','line_number':869,'multiline':False]
['text':' double-check their own understandings of the |data| state transition being','line_number':870,'multiline':False]
['text':' performed.','line_number':871,'multiline':False]
['text':' Initialize a fresh |ScriptSource| with unretrievable, uncompressed source.','line_number':879,'multiline':False]
['text':' Set the retrieved source for a |ScriptSource| whose source was recorded as','line_number':884,'multiline':False]
['text':' missing but retrievable.','line_number':885,'multiline':False]
['text':' Called by the SourceCompressionTask constructor to indicate such a task was','line_number':893,'multiline':False]
['text':' ever created.','line_number':894,'multiline':False]
['text':' *Trigger* the conversion of this ScriptSource from containing uncompressed','line_number':897,'multiline':False]
['text':' |Unit|-encoded source to containing compressed source.  Conversion may not','line_number':898,'multiline':False]
['text':' be complete when this function returns: it'll be delayed if there's ongoing','line_number':899,'multiline':False]
['text':' use of the uncompressed source via |PinnedUnits|, in which case conversion','line_number':900,'multiline':False]
['text':' won't occur until the outermost |PinnedUnits| is destroyed.','line_number':901,'multiline':False]
['text':'','line_number':902,'multiline':False]
['text':' Compressed source is in bytes, no matter that |Unit| might be |char16_t|.','line_number':903,'multiline':False]
['text':' |sourceLength| is the length in code units (not bytes) of the uncompressed','line_number':904,'multiline':False]
['text':' source.','line_number':905,'multiline':False]
['text':' Initialize a fresh ScriptSource as containing unretrievable compressed','line_number':910,'multiline':False]
['text':' source of the indicated original encoding.','line_number':911,'multiline':False]
['text':' It'd be better to make this function take <XDRMode, Unit>, as both','line_number':965,'multiline':False]
['text':' specializations of this function contain nested Unit-parametrized','line_number':966,'multiline':False]
['text':' helper classes that do everything the function needs to do.  But then','line_number':967,'multiline':False]
['text':' we'd need template function partial specialization to hold XDRMode','line_number':968,'multiline':False]
['text':' constant while varying Unit, so that idea's no dice.','line_number':969,'multiline':False]
['text':' Display URLs','line_number':996,'multiline':False]
['text':' Source maps','line_number':1002,'multiline':False]
['text':' Return wether an XDR encoder is present or not.','line_number':1023,'multiline':False]
['text':' Linearize the encoded content in the |buffer| provided as argument to','line_number':1033,'multiline':False]
['text':' |xdrEncodeTopLevel|, and free the XDR encoder.  In case of errors, the','line_number':1034,'multiline':False]
['text':' |buffer| is considered undefined.','line_number':1035,'multiline':False]
['text':' [SMDOC] ScriptSourceObject','line_number':1066,'multiline':False]
['text':'','line_number':1067,'multiline':False]
['text':' ScriptSourceObject stores the ScriptSource and GC pointers related to it.','line_number':1068,'multiline':False]
['text':'','line_number':1069,'multiline':False]
['text':' ScriptSourceObjects can be cloned when we clone the JSScript (in order to','line_number':1070,'multiline':False]
['text':' execute the script in a different compartment). In this case we create a new','line_number':1071,'multiline':False]
['text':' SSO that stores (a wrapper for) the original SSO in its "canonical slot".','line_number':1072,'multiline':False]
['text':' The canonical SSO is always used for the private, introductionScript,','line_number':1073,'multiline':False]
['text':' element, elementAttributeName slots. This means their accessors may return an','line_number':1074,'multiline':False]
['text':' object in a different compartment, hence the "unwrapped" prefix.','line_number':1075,'multiline':False]
['text':'','line_number':1076,'multiline':False]
['text':' Note that we don't clone the SSO when cloning the script for a different','line_number':1077,'multiline':False]
['text':' realm in the same compartment, so sso->realm() does not necessarily match the','line_number':1078,'multiline':False]
['text':' script's realm.','line_number':1079,'multiline':False]
['text':'','line_number':1080,'multiline':False]
['text':' We need ScriptSourceObject (instead of storing these GC pointers in the','line_number':1081,'multiline':False]
['text':' ScriptSource itself) to properly account for cross-zone pointers: the','line_number':1082,'multiline':False]
['text':' canonical SSO will be stored in the wrapper map if necessary so GC will do','line_number':1083,'multiline':False]
['text':' the right thing.','line_number':1084,'multiline':False]
['text':' Initialize those properties of this ScriptSourceObject whose values','line_number':1104,'multiline':False]
['text':' are provided by |options|, re-wrapping as necessary.','line_number':1105,'multiline':False]
['text':' While it might be nice to check the unwrapped canonical value,','line_number':1154,'multiline':False]
['text':' unwrapping at arbitrary points isn't supported, so we simply','line_number':1155,'multiline':False]
['text':' return true and only validate canonical results.','line_number':1156,'multiline':False]
['text':' ScriptWarmUpData represents a pointer-sized field in BaseScript that stores','line_number':1178,'multiline':False]
['text':' one of the following using low-bit tags:','line_number':1179,'multiline':False]
['text':'','line_number':1180,'multiline':False]
['text':' * The enclosing BaseScript. This is only used while this script is lazy and','line_number':1181,'multiline':False]
['text':'   its containing script is also lazy. This outer script must be compiled','line_number':1182,'multiline':False]
['text':'   before the current script can in order to correctly build the scope chain.','line_number':1183,'multiline':False]
['text':'','line_number':1184,'multiline':False]
['text':' * The enclosing Scope. This is only used while this script is lazy and its','line_number':1185,'multiline':False]
['text':'   containing script is compiled. This is the outer scope chain that will be','line_number':1186,'multiline':False]
['text':'   used to compile this scipt.','line_number':1187,'multiline':False]
['text':'','line_number':1188,'multiline':False]
['text':' * The script's warm-up count. This is only used until the script has a','line_number':1189,'multiline':False]
['text':'   JitScript. The Baseline Interpreter and JITs use the warm-up count stored','line_number':1190,'multiline':False]
['text':'   in JitScript.','line_number':1191,'multiline':False]
['text':'','line_number':1192,'multiline':False]
['text':' * A pointer to the JitScript, when the script is warm enough for the Baseline','line_number':1193,'multiline':False]
['text':'   Interpreter.','line_number':1194,'multiline':False]
['text':'','line_number':1195,'multiline':False]
['text':' Public only for the JITs.','line_number':1204,'multiline':False]
['text':' A gc-safe value to clear to.','line_number':1212,'multiline':False]
['text':' NOTE: To change type safely, 'clear' the old tagged value and then 'init'','line_number':1248,'multiline':False]
['text':'       the new one. This will notify the GC appropriately.','line_number':1249,'multiline':False]
['text':' [SMDOC] - JSScript data layout (unshared)','line_number':1292,'multiline':False]
['text':'','line_number':1293,'multiline':False]
['text':' PrivateScriptData stores variable-length data associated with a script.','line_number':1294,'multiline':False]
['text':' Abstractly a PrivateScriptData consists of the following:','line_number':1295,'multiline':False]
['text':'','line_number':1296,'multiline':False]
['text':'   * A non-empty array of GCCellPtr in gcthings()','line_number':1297,'multiline':False]
['text':'','line_number':1298,'multiline':False]
['text':' Accessing this array just requires calling the appropriate public','line_number':1299,'multiline':False]
['text':' Span-computing function.','line_number':1300,'multiline':False]
['text':'','line_number':1301,'multiline':False]
['text':' This class doesn't use the GC barrier wrapper classes. BaseScript::swapData','line_number':1302,'multiline':False]
['text':' performs a manual pre-write barrier when detaching PrivateScriptData from a','line_number':1303,'multiline':False]
['text':' script.','line_number':1304,'multiline':False]
['text':' Note: This is only defined for scripts with an enclosing scope. This','line_number':1309,'multiline':False]
['text':' excludes lazy scripts with lazy parents.','line_number':1310,'multiline':False]
['text':' End of fields.','line_number':1314,'multiline':False]
['text':' Layout helpers','line_number':1317,'multiline':False]
['text':' Initialize header and PackedSpans','line_number':1324,'multiline':False]
['text':' Accessors for typed array spans.','line_number':1332,'multiline':False]
['text':' Allocate a new PrivateScriptData. Headers and GCCellPtrs are initialized.','line_number':1347,'multiline':False]
['text':' Clone src script data into dst script.','line_number':1357,'multiline':False]
['text':' PrivateScriptData has trailing data so isn't copyable or movable.','line_number':1371,'multiline':False]
['text':' [SMDOC] Script Representation (js::BaseScript)','line_number':1376,'multiline':False]
['text':'','line_number':1377,'multiline':False]
['text':' A "script" corresponds to a JavaScript function or a top-level (global, eval,','line_number':1378,'multiline':False]
['text':' module) body that will be executed using SpiderMonkey bytecode. Note that','line_number':1379,'multiline':False]
['text':' special forms such as asm.js do not use bytecode or the BaseScript type.','line_number':1380,'multiline':False]
['text':'','line_number':1381,'multiline':False]
['text':' BaseScript may be generated directly from the parser/emitter, or by cloning','line_number':1382,'multiline':False]
['text':' or deserializing another script. Cloning is typically used when a script is','line_number':1383,'multiline':False]
['text':' needed in multiple realms and we would like to avoid re-compiling.','line_number':1384,'multiline':False]
['text':'','line_number':1385,'multiline':False]
['text':' A single script may be shared by multiple JSFunctions in a realm when those','line_number':1386,'multiline':False]
['text':' function objects are used as closure. In this case, a single JSFunction is','line_number':1387,'multiline':False]
['text':' considered canonical (and often does not escape to script directly).','line_number':1388,'multiline':False]
['text':'','line_number':1389,'multiline':False]
['text':' A BaseScript may be in "lazy" form where the parser performs a syntax-only','line_number':1390,'multiline':False]
['text':' parse and saves minimal information. These lazy scripts must be recompiled','line_number':1391,'multiline':False]
['text':' from the source (generating bytecode) before they can execute in a process','line_number':1392,'multiline':False]
['text':' called "delazification". On GC memory pressure, a fully-compiled script may','line_number':1393,'multiline':False]
['text':' be converted back into lazy form by "relazification".','line_number':1394,'multiline':False]
['text':'','line_number':1395,'multiline':False]
['text':' A fully-initialized BaseScript can be identified with `hasBytecode()` and','line_number':1396,'multiline':False]
['text':' will have bytecode and set of GC-things such as scopes, inner-functions, and','line_number':1397,'multiline':False]
['text':' object/string literals. This is referred to as a "non-lazy" script.','line_number':1398,'multiline':False]
['text':'','line_number':1399,'multiline':False]
['text':' A lazy script has either an enclosing script or scope. Each script needs to','line_number':1400,'multiline':False]
['text':' know its enclosing scope in order to be fully compiled. If the parent is','line_number':1401,'multiline':False]
['text':' still lazy we track that script and will need to compile it first to know our','line_number':1402,'multiline':False]
['text':' own enclosing scope. This is because scope objects are not created until full','line_number':1403,'multiline':False]
['text':' compilation and bytecode generation.','line_number':1404,'multiline':False]
['text':'','line_number':1405,'multiline':False]
['text':'','line_number':1406,'multiline':False]
['text':' # Script Warm-Up #','line_number':1407,'multiline':False]
['text':'','line_number':1408,'multiline':False]
['text':' A script evolves its representation over time. As it becomes "hotter" we','line_number':1409,'multiline':False]
['text':' attach a stack of additional data-structures generated by the JITs to','line_number':1410,'multiline':False]
['text':' speed-up execution. This evolution may also be run in reverse, in order to','line_number':1411,'multiline':False]
['text':' reduce memory usage.','line_number':1412,'multiline':False]
['text':'','line_number':1413,'multiline':False]
['text':'              +-------------------------------------+','line_number':1414,'multiline':False]
['text':'              | ScriptSource                        |','line_number':1415,'multiline':False]
['text':'              |   Provides:   Source                |','line_number':1416,'multiline':False]
['text':'              |   Engine:     Parser                |','line_number':1417,'multiline':False]
['text':'              +-------------------------------------+','line_number':1418,'multiline':False]
['text':'                                v','line_number':1419,'multiline':False]
['text':'              +-----------------------------------------------+','line_number':1420,'multiline':False]
['text':'              | BaseScript                                    |','line_number':1421,'multiline':False]
['text':'              |   Provides:   SourceExtent/Bindings           |','line_number':1422,'multiline':False]
['text':'              |   Engine:     CompileLazyFunctionToStencil    |','line_number':1423,'multiline':False]
['text':'              |               /InstantiateStencilsForDelazify |','line_number':1424,'multiline':False]
['text':'              +-----------------------------------------------+','line_number':1425,'multiline':False]
['text':'                                v','line_number':1426,'multiline':False]
['text':'              +-------------------------------------+','line_number':1427,'multiline':False]
['text':'              | ImmutableScriptData                 |','line_number':1428,'multiline':False]
['text':'              |   Provides:   Bytecode              |','line_number':1429,'multiline':False]
['text':'              |   Engine:     Interpreter           |','line_number':1430,'multiline':False]
['text':'              +-------------------------------------+','line_number':1431,'multiline':False]
['text':'                                v','line_number':1432,'multiline':False]
['text':'              +-------------------------------------+','line_number':1433,'multiline':False]
['text':'              | JitScript                           |','line_number':1434,'multiline':False]
['text':'              |   Provides:   Inline Caches (ICs)   |','line_number':1435,'multiline':False]
['text':'              |   Engine:     BaselineInterpreter   |','line_number':1436,'multiline':False]
['text':'              +-------------------------------------+','line_number':1437,'multiline':False]
['text':'                                v','line_number':1438,'multiline':False]
['text':'              +-------------------------------------+','line_number':1439,'multiline':False]
['text':'              | BaselineScript                      |','line_number':1440,'multiline':False]
['text':'              |   Provides:   Native Code           |','line_number':1441,'multiline':False]
['text':'              |   Engine:     Baseline              |','line_number':1442,'multiline':False]
['text':'              +-------------------------------------+','line_number':1443,'multiline':False]
['text':'                                v','line_number':1444,'multiline':False]
['text':'              +-------------------------------------+','line_number':1445,'multiline':False]
['text':'              | IonScript                           |','line_number':1446,'multiline':False]
['text':'              |   Provides:   Optimized Native Code |','line_number':1447,'multiline':False]
['text':'              |   Engine:     IonMonkey             |','line_number':1448,'multiline':False]
['text':'              +-------------------------------------+','line_number':1449,'multiline':False]
['text':'','line_number':1450,'multiline':False]
['text':' NOTE: Scripts may be directly created with bytecode and skip the lazy script','line_number':1451,'multiline':False]
['text':'       form. This is always the case for top-level scripts.','line_number':1452,'multiline':False]
['text':' Pointer to baseline->method()->raw(), ion->method()->raw(), a wasm jit','line_number':1455,'multiline':False]
['text':' entry, the JIT's EnterInterpreter stub, or the lazy link stub. Must be','line_number':1456,'multiline':False]
['text':' non-null (except on no-jit builds). This is stored in the cell header.','line_number':1457,'multiline':False]
['text':' Multi-purpose value that changes type as the script warms up from lazy form','line_number':1461,'multiline':False]
['text':' to interpreted-bytecode to JITs. See: ScriptWarmUpData type for more info.','line_number':1462,'multiline':False]
['text':' Object that determines what Realm this script is compiled for. For function','line_number':1465,'multiline':False]
['text':' scripts this is the canonical function, otherwise it is the GlobalObject of','line_number':1466,'multiline':False]
['text':' the realm.','line_number':1467,'multiline':False]
['text':' The ScriptSourceObject for this script. This is always same-compartment','line_number':1470,'multiline':False]
['text':' with this script, but may be a clone if the original source object is in a','line_number':1471,'multiline':False]
['text':' different compartment.','line_number':1472,'multiline':False]
['text':' Position of the function in the source buffer. Both in terms of line/column','line_number':1475,'multiline':False]
['text':' and code-unit offset.','line_number':1476,'multiline':False]
['text':' Immutable flags are a combination of parser options and bytecode','line_number':1479,'multiline':False]
['text':' characteristics. These flags are preserved when serializing or copying this','line_number':1480,'multiline':False]
['text':' script.','line_number':1481,'multiline':False]
['text':' Mutable flags store transient information used by subsystems such as the','line_number':1484,'multiline':False]
['text':' debugger and the JITs. These flags are *not* preserved when serializing or','line_number':1485,'multiline':False]
['text':' cloning since they are based on runtime state.','line_number':1486,'multiline':False]
['text':' Variable-length data owned by this script. This stores one of:','line_number':1489,'multiline':False]
['text':'    - GC pointers that bytecode references.','line_number':1490,'multiline':False]
['text':'    - Inner-functions and bindings generated by syntax parse.','line_number':1491,'multiline':False]
['text':'    - Nullptr, if no bytecode or inner functions.','line_number':1492,'multiline':False]
['text':' This is updated as script is delazified and relazified.','line_number':1493,'multiline':False]
['text':' Shareable script data. This includes runtime-wide atom pointers, bytecode,','line_number':1496,'multiline':False]
['text':' and various script note structures. If the script is currently lazy, this','line_number':1497,'multiline':False]
['text':' will be nullptr.','line_number':1498,'multiline':False]
['text':' End of fields.','line_number':1501,'multiline':False]
['text':' Create a lazy BaseScript without initializing any gc-things.','line_number':1525,'multiline':False]
['text':' Canonical function for the script, if it has a function. For top-level','line_number':1534,'multiline':False]
['text':' scripts this is nullptr.','line_number':1535,'multiline':False]
['text':' Returns true is the script has an enclosing scope but no bytecode. It is','line_number':1587,'multiline':False]
['text':' ready for delazification.','line_number':1588,'multiline':False]
['text':' NOTE: The enclosing script must have been successfully compiled at some','line_number':1589,'multiline':False]
['text':' point for the enclosing scope to exist. That script may have since been','line_number':1590,'multiline':False]
['text':' GC'd, but we kept the scope live so we can still compile ourselves.','line_number':1591,'multiline':False]
['text':' Update data_ pointer while also informing GC MemoryUse tracking.','line_number':1614,'multiline':False]
['text':' NOTE: This is only used to initialize a fresh script.','line_number':1621,'multiline':False]
['text':' NOTE: Script only has bytecode if JSScript::fullyInitFromStencil completes','line_number':1641,'multiline':False]
['text':' successfully.','line_number':1642,'multiline':False]
['text':' JIT accessors','line_number':1669,'multiline':False]
['text':'
 * NB: after a successful XDR_DECODE, XDRScript callers must do any required
 * subsequent set-up of owning function or script object and then call
 * CallNewScriptHook.
 ','line_number':1690,'multiline':True]
['text':'
 * Code any constant value.
 ','line_number':1712,'multiline':True]
['text':' namespace js ','line_number':1720,'multiline':True]
['text':' NOTE: This should only be used while delazifying.','line_number':1757,'multiline':False]
['text':' NOTE: If you use createPrivateScriptData directly instead of via','line_number':1762,'multiline':False]
['text':' fullyInitFromStencil, you are responsible for notifying the debugger','line_number':1763,'multiline':False]
['text':' after successfully creating the script.','line_number':1764,'multiline':False]
['text':' Allocate a JSScript and initialize it with bytecode. This consumes','line_number':1776,'multiline':False]
['text':' allocations within the stencil.','line_number':1777,'multiline':False]
['text':' Assert that jump targets are within the code array of the script.','line_number':1786,'multiline':False]
['text':' Script bytecode is immutable after creation.','line_number':1795,'multiline':False]
['text':' JSOp::ForceInterpreter, if present, must be the first op.','line_number':1804,'multiline':False]
['text':' Note: ArgBytes is optional, but if specified then containsPC will also','line_number':1828,'multiline':False]
['text':'       check that the opcode arguments are in bounds.','line_number':1829,'multiline':False]
['text':' The fixed part of a stack frame is comprised of vars (in function and','line_number':1858,'multiline':False]
['text':' module code) and block-scoped locals (in all kinds of code).','line_number':1859,'multiline':False]
['text':' Number of fixed slots reserved for slots that are always live. Only','line_number':1862,'multiline':False]
['text':' nonzero for function or module code.','line_number':1863,'multiline':False]
['text':' Calculate the number of fixed slots that are live at a particular bytecode.','line_number':1866,'multiline':False]
['text':' Parameter redeclaration is only allowed for non-strict functions with','line_number':1878,'multiline':False]
['text':' simple parameter lists, which are neither arrow nor method functions. We','line_number':1879,'multiline':False]
['text':' don't have a flag at hand to test the function kind, but we can still','line_number':1880,'multiline':False]
['text':' test if the function is non-strict and has a simple parameter list by','line_number':1881,'multiline':False]
['text':' checking |hasMappedArgsObj()|. (Mapped arguments objects are only','line_number':1882,'multiline':False]
['text':' created for non-strict functions with simple parameter lists.)','line_number':1883,'multiline':False]
['text':' IsEvalCacheCandidate will make sure that there's nothing in this','line_number':1893,'multiline':False]
['text':' script that would prevent reexecution even if isRunOnce is','line_number':1894,'multiline':False]
['text':' true.  So just pretend like we never ran this script.','line_number':1895,'multiline':False]
['text':'
   * Arguments access (via JSOp::*Arg* opcodes) must access the canonical
   * location for the argument. If an arguments object exists AND it's mapped
   * ('arguments' aliases formals), then all access must go through the
   * arguments object. Otherwise, the local slot is the canonical location for
   * the arguments. Note: if a formal is aliased through the scope chain, then
   * script->formalIsAliased and JSOp::*Arg* opcodes won't be emitted at all.
   ','line_number':1899,'multiline':True]
['text':' Returns true if the script may read formal arguments on the stack','line_number':1917,'multiline':False]
['text':' directly, via lazy arguments or a rest parameter.','line_number':1918,'multiline':False]
['text':' Unique Method ID passed to the VTune profiler. Allows attribution of','line_number':1924,'multiline':False]
['text':' different jitcode to the same source script.','line_number':1925,'multiline':False]
['text':' Return whether this is a 'direct eval' script in a function scope. ','line_number':1930,'multiline':True]
['text':'
   * Return whether this script is a top-level script.
   *
   * If we evaluate some code which contains a syntax error, then we might
   * produce a JSScript which has no associated bytecode. Testing with
   * |code()| filters out this kind of scripts.
   *
   * If this script has a function associated to it, then it is not the
   * top-level of a file.
   ','line_number':1933,'multiline':True]
['text':' Ensure the script has a JitScript. ','line_number':1945,'multiline':True]
['text':' The body scope may not be the outermost scope in the script when','line_number':1973,'multiline':False]
['text':' the decl env scope is present.','line_number':1974,'multiline':False]
['text':' Drop script data and reset warmUpData to reference enclosing scope.','line_number':1990,'multiline':False]
['text':' This method is used to get a scope directly using a JSOp with an','line_number':2119,'multiline':False]
['text':' index. To search through ScopeNotes to look for a Scope using pc,','line_number':2120,'multiline':False]
['text':' use lookupScope.','line_number':2121,'multiline':False]
['text':' The following 3 functions find the static scope just before the','line_number':2145,'multiline':False]
['text':' execution of the instruction pointed to by pc.','line_number':2146,'multiline':False]
['text':'
   * The isEmpty method tells whether this script has code that computes any
   * result (not return value, result AKA normal completion value) other than
   * JSVAL_VOID, or any other effects.
   ','line_number':2153,'multiline':True]
['text':' See comment above 'debugMode' in Realm.h for explanation of','line_number':2174,'multiline':False]
['text':' invariants of debuggee compartments, scripts, and frames.','line_number':2175,'multiline':False]
['text':' Create an allocation site associated with this script/JitScript to track','line_number':2178,'multiline':False]
['text':' nursery allocations.','line_number':2179,'multiline':False]
['text':' A helper class to prevent relazification of the given function's script','line_number':2182,'multiline':False]
['text':' while it's holding on to it.  This class automatically roots the script.','line_number':2183,'multiline':False]
['text':' This structure is stored and marked from the JSRuntime. ','line_number':2217,'multiline':True]
['text':' namespace js ','line_number':2260,'multiline':True]
['text':'
 * This function returns the file and line number of the script currently
 * executing on cx. If there is no current script executing on cx (e.g., a
 * native called directly through JSAPI (e.g., by setTimeout)), nullptr and 0
 * are returned as the file and line.
 ','line_number':2271,'multiline':True]
['text':'
 * Like DescribeScriptedCallerForCompilation, but this function avoids looking
 * up the script/pc and the full linear scan to compute line number.
 ','line_number':2281,'multiline':True]
['text':' namespace js ','line_number':2305,'multiline':True]
['text':' namespace ubi','line_number':2313,'multiline':False]
['text':' namespace JS','line_number':2314,'multiline':False]
['text':' vm_JSScript_h ','line_number':2316,'multiline':True]
