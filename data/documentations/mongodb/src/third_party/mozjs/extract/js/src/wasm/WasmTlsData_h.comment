['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 *
 * Copyright 2021 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ','line_number':1,'multiline':True]
['text':' TLS data for a single module instance.','line_number':36,'multiline':False]
['text':'','line_number':37,'multiline':False]
['text':' Every WebAssembly function expects to be passed a hidden TLS pointer argument','line_number':38,'multiline':False]
['text':' in WasmTlsReg. The TLS pointer argument points to a TlsData struct.','line_number':39,'multiline':False]
['text':' Compiled functions expect that the TLS pointer does not change for the','line_number':40,'multiline':False]
['text':' lifetime of the thread.','line_number':41,'multiline':False]
['text':'','line_number':42,'multiline':False]
['text':' There is a TlsData per module instance per thread, so inter-module calls need','line_number':43,'multiline':False]
['text':' to pass the TLS pointer appropriate for the callee module.','line_number':44,'multiline':False]
['text':'','line_number':45,'multiline':False]
['text':' After the TlsData struct follows the module's declared TLS variables.','line_number':46,'multiline':False]
['text':' Pointer to the base of the default memory (or null if there is none).','line_number':49,'multiline':False]
['text':' Bounds check limit in bytes (or zero if there is no memory).  This is','line_number':52,'multiline':False]
['text':' 64-bits on 64-bit systems so as to allow for heap lengths up to and beyond','line_number':53,'multiline':False]
['text':' 4GB, and 32-bits on 32-bit systems, where heaps are limited to 2GB.','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' On 64-bit systems, the upper bits of this value will be zero and 32-bit','line_number':56,'multiline':False]
['text':' bounds checks can be used under the following circumstances:','line_number':57,'multiline':False]
['text':'','line_number':58,'multiline':False]
['text':' - The heap is for asm.js; asm.js heaps are limited to 2GB','line_number':59,'multiline':False]
['text':' - The max size of the heap is encoded in the module and is less than 4GB','line_number':60,'multiline':False]
['text':' - Cranelift is present in the system; Cranelift-compatible heaps are','line_number':61,'multiline':False]
['text':'   limited to 4GB-128K','line_number':62,'multiline':False]
['text':'','line_number':63,'multiline':False]
['text':' All our jits require little-endian byte order, so the address of the 32-bit','line_number':64,'multiline':False]
['text':' heap limit is the same as the address of the 64-bit heap limit: the address','line_number':65,'multiline':False]
['text':' of this member.','line_number':66,'multiline':False]
['text':' Pointer to the Instance that contains this TLS data.','line_number':69,'multiline':False]
['text':' Equal to instance->realm_.','line_number':72,'multiline':False]
['text':' The containing JSContext.','line_number':75,'multiline':False]
['text':' The class_ of WasmValueBox, this is a per-process value.','line_number':78,'multiline':False]
['text':' Usually equal to cx->stackLimitForJitCode(JS::StackForUntrustedScript),','line_number':81,'multiline':False]
['text':' but can be racily set to trigger immediate trap as an opportunity to','line_number':82,'multiline':False]
['text':' CheckForInterrupt without an additional branch.','line_number':83,'multiline':False]
['text':' Set to 1 when wasm should call CheckForInterrupt.','line_number':86,'multiline':False]
['text':' Methods to set, test and clear the above two fields. Both interrupt','line_number':91,'multiline':False]
['text':' fields are Relaxed and so no consistency/ordering can be assumed.','line_number':92,'multiline':False]
['text':' Pointer that should be freed (due to padding before the TlsData).','line_number':97,'multiline':False]
['text':' When compiling with tiering, the jumpTable has one entry for each','line_number':100,'multiline':False]
['text':' baseline-compiled function.','line_number':101,'multiline':False]
['text':' The globalArea must be the last field.  Globals for the module start here','line_number':104,'multiline':False]
['text':' and are inline in this structure.  16-byte alignment is required for SIMD','line_number':105,'multiline':False]
['text':' data.','line_number':106,'multiline':False]
['text':' = Simd128DataSize','line_number':110,'multiline':False]
['text':' ExportArg holds the unboxed operands to the wasm entry trampoline which can','line_number':121,'multiline':False]
['text':' be called through an ExportFuncPtr.','line_number':122,'multiline':False]
['text':' FuncImportTls describes the region of wasm global memory allocated in the','line_number':131,'multiline':False]
['text':' instance's thread-local storage for a function import. This is accessed','line_number':132,'multiline':False]
['text':' directly from JIT code and mutated by Instance as exits become optimized and','line_number':133,'multiline':False]
['text':' deoptimized.','line_number':134,'multiline':False]
['text':' The code to call at an import site: a wasm callee, a thunk into C++, or a','line_number':137,'multiline':False]
['text':' thunk into JIT code.','line_number':138,'multiline':False]
['text':' The callee's TlsData pointer, which must be loaded to WasmTlsReg (along','line_number':141,'multiline':False]
['text':' with any pinned registers) before calling 'code'.','line_number':142,'multiline':False]
['text':' The callee function's realm.','line_number':145,'multiline':False]
['text':' A GC pointer which keeps the callee alive and is used to recover import','line_number':148,'multiline':False]
['text':' values for lazy table initialization.','line_number':149,'multiline':False]
['text':' TableTls describes the region of wasm global memory allocated in the','line_number':154,'multiline':False]
['text':' instance's thread-local storage which is accessed directly from JIT code','line_number':155,'multiline':False]
['text':' to bounds-check and index the table.','line_number':156,'multiline':False]
['text':' Length of the table in number of elements (not bytes).','line_number':159,'multiline':False]
['text':' Pointer to the array of elements (which can have various representations).','line_number':162,'multiline':False]
['text':' For tables of anyref this is null.','line_number':163,'multiline':False]
['text':' Table element for TableRepr::Func which carries both the code pointer and','line_number':167,'multiline':False]
['text':' a tls pointer (and thus anything reachable through the tls, including the','line_number':168,'multiline':False]
['text':' instance).','line_number':169,'multiline':False]
['text':' The code to call when calling this element. The table ABI is the system','line_number':172,'multiline':False]
['text':' ABI with the additional ABI requirements that:','line_number':173,'multiline':False]
['text':'  - WasmTlsReg and any pinned registers have been loaded appropriately','line_number':174,'multiline':False]
['text':'  - if this is a heterogeneous table that requires a signature check,','line_number':175,'multiline':False]
['text':'    WasmTableCallSigReg holds the signature id.','line_number':176,'multiline':False]
['text':' The pointer to the callee's instance's TlsData. This must be loaded into','line_number':179,'multiline':False]
['text':' WasmTlsReg before calling 'code'.','line_number':180,'multiline':False]
['text':' namespace wasm','line_number':184,'multiline':False]
['text':' namespace js','line_number':185,'multiline':False]
['text':' wasm_tls_data_h','line_number':187,'multiline':False]
