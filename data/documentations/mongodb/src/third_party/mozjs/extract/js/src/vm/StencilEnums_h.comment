['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' uint8_t','line_number':10,'multiline':False]
['text':'','line_number':12,'multiline':False]
['text':' Enum definitions shared between frontend, stencil, and the VM.','line_number':13,'multiline':False]
['text':'','line_number':14,'multiline':False]
['text':' [SMDOC] Try Notes','line_number':18,'multiline':False]
['text':'','line_number':19,'multiline':False]
['text':' Trynotes are attached to regions that are involved with','line_number':20,'multiline':False]
['text':' exception unwinding. They can be broken up into four categories:','line_number':21,'multiline':False]
['text':'','line_number':22,'multiline':False]
['text':' 1. Catch and Finally: Basic exception handling. A Catch trynote','line_number':23,'multiline':False]
['text':'    covers the range of the associated try. A Finally trynote covers','line_number':24,'multiline':False]
['text':'    the try and the catch.','line_number':25,'multiline':False]
['text':'','line_number':26,'multiline':False]
['text':' 2. ForIn and Destructuring: These operations create an iterator','line_number':27,'multiline':False]
['text':'    which must be cleaned up (by calling IteratorClose) during','line_number':28,'multiline':False]
['text':'    exception unwinding.','line_number':29,'multiline':False]
['text':'','line_number':30,'multiline':False]
['text':' 3. ForOf and ForOfIterclose: For-of loops handle unwinding using','line_number':31,'multiline':False]
['text':'    catch blocks. These trynotes are used for for-of breaks/returns,','line_number':32,'multiline':False]
['text':'    which create regions that are lexically within a for-of block,','line_number':33,'multiline':False]
['text':'    but logically outside of it. See TryNoteIter::settle for more','line_number':34,'multiline':False]
['text':'    details.','line_number':35,'multiline':False]
['text':'','line_number':36,'multiline':False]
['text':' 4. Loop: This represents normal for/while/do-while loops. It is','line_number':37,'multiline':False]
['text':'    unnecessary for exception unwinding, but storing the boundaries','line_number':38,'multiline':False]
['text':'    of loops here is helpful for heuristics that need to know','line_number':39,'multiline':False]
['text':'    whether a given op is inside a loop.','line_number':40,'multiline':False]
['text':' [SMDOC] Script Flags','line_number':51,'multiline':False]
['text':'','line_number':52,'multiline':False]
['text':' Interpreted scripts represented by the BaseScript type use two flag words to','line_number':53,'multiline':False]
['text':' encode an assortment of conditions and attributes about the script.','line_number':54,'multiline':False]
['text':'','line_number':55,'multiline':False]
['text':' The "immutable" flags are a combination of input flags describing aspects of','line_number':56,'multiline':False]
['text':' the execution context that affect parsing (such as if we are an ES module or','line_number':57,'multiline':False]
['text':' normal script), and flags derived from source text. These flags are preserved','line_number':58,'multiline':False]
['text':' during cloning and serializing. As well, they should never change after the','line_number':59,'multiline':False]
['text':' BaseScript is created (although there are currently a few exceptions for','line_number':60,'multiline':False]
['text':' de-/re-lazification that remain).','line_number':61,'multiline':False]
['text':'','line_number':62,'multiline':False]
['text':' The "mutable" flags are temporary flags that are used by subsystems in the','line_number':63,'multiline':False]
['text':' engine such as the debugger or JITs. These flags are not preserved through','line_number':64,'multiline':False]
['text':' serialization or cloning since the attributes are generally associated with','line_number':65,'multiline':False]
['text':' one specific instance of a BaseScript.','line_number':66,'multiline':False]
['text':' Input Flags','line_number':69,'multiline':False]
['text':'','line_number':70,'multiline':False]
['text':' These flags are from CompileOptions or the Parser entry point. They','line_number':71,'multiline':False]
['text':' generally cannot be derived from the source text alone.','line_number':72,'multiline':False]
['text':' ----','line_number':73,'multiline':False]
['text':' A script may have one of the following kinds: Global, Eval, Module,','line_number':75,'multiline':False]
['text':' Function. At most one flag can be set, with a default of Global.','line_number':76,'multiline':False]
['text':' The script is compiled as engine-internal self-hosted JavaScript. This mode','line_number':81,'multiline':False]
['text':' is used to implement certain library functions and has special parse,','line_number':82,'multiline':False]
['text':' bytecode, and runtime behaviour that differs from normal script.','line_number':83,'multiline':False]
['text':' The script was compiled with the default mode set to strict mode. Note that','line_number':86,'multiline':False]
['text':' this tracks the default value, while the actual mode used (after processing','line_number':87,'multiline':False]
['text':' source and its directives) is the `Strict` flag below.','line_number':88,'multiline':False]
['text':' The script has a non-syntactic scope on its environment chain. That is,','line_number':91,'multiline':False]
['text':' there may be objects about which we know nothing between the outermost','line_number':92,'multiline':False]
['text':' syntactic scope and the global.','line_number':93,'multiline':False]
['text':' The script return value will not be used and simplified code will be','line_number':96,'multiline':False]
['text':' generated. This can only be applied to top-level scripts. The value this','line_number':97,'multiline':False]
['text':' script returns will be UndefinedValue instead of what the spec normally','line_number':98,'multiline':False]
['text':' prescribes.','line_number':99,'multiline':False]
['text':' TreatAsRunOnce roughly indicates that a script is expected to be run no','line_number':102,'multiline':False]
['text':' more than once. This affects optimizations and heuristics.','line_number':103,'multiline':False]
['text':'','line_number':104,'multiline':False]
['text':' On top-level global/eval/module scripts, this is set when the embedding','line_number':105,'multiline':False]
['text':' ensures this script will not be re-used. In this case, parser literals may','line_number':106,'multiline':False]
['text':' be exposed directly instead of being cloned.','line_number':107,'multiline':False]
['text':' ----','line_number':109,'multiline':False]
['text':' Parser Flags','line_number':111,'multiline':False]
['text':'','line_number':112,'multiline':False]
['text':' Flags computed by the Parser from the source text and input flags.','line_number':113,'multiline':False]
['text':' ----','line_number':114,'multiline':False]
['text':' Generated code will execute in strict mode. This is due to either the','line_number':116,'multiline':False]
['text':' ForceStrict flag being specified above, or due to source text itself (such','line_number':117,'multiline':False]
['text':' as "use strict" directives).','line_number':118,'multiline':False]
['text':' Script is parsed with a top-level goal of Module. This may be a top-level','line_number':121,'multiline':False]
['text':' or an inner-function script.','line_number':122,'multiline':False]
['text':' Script contains inner functions.','line_number':125,'multiline':False]
['text':'','line_number':126,'multiline':False]
['text':' Note: This prevents relazification since inner function close-over the','line_number':127,'multiline':False]
['text':' current scripts scopes.','line_number':128,'multiline':False]
['text':' There is a direct eval statement in this script OR in any of its inner','line_number':131,'multiline':False]
['text':' functions.','line_number':132,'multiline':False]
['text':'','line_number':133,'multiline':False]
['text':' Note: This prevents relazification since it can introduce inner functions.','line_number':134,'multiline':False]
['text':' The (static) bindings of this script must support dynamic name access for','line_number':137,'multiline':False]
['text':' read/write. The environment chain is used to do these dynamic lookups and','line_number':138,'multiline':False]
['text':' optimizations to avoid allocating environments are suppressed.','line_number':139,'multiline':False]
['text':'','line_number':140,'multiline':False]
['text':' This includes direct-eval, `with`, and `delete` in this script OR in any of','line_number':141,'multiline':False]
['text':' its inner functions.','line_number':142,'multiline':False]
['text':'','line_number':143,'multiline':False]
['text':' Note: Access through the arguments object is not considered dynamic binding','line_number':144,'multiline':False]
['text':' access since it does not go through the normal name lookup mechanism.','line_number':145,'multiline':False]
['text':' A tagged template exists in the body (which will use JSOp::CallSiteObj in','line_number':148,'multiline':False]
['text':' bytecode).','line_number':149,'multiline':False]
['text':'','line_number':150,'multiline':False]
['text':' Note: This prevents relazification since the template's object is','line_number':151,'multiline':False]
['text':' observable to the user and cannot be recreated.','line_number':152,'multiline':False]
['text':' Parser Flags for Functions','line_number':155,'multiline':False]
['text':' ----','line_number':156,'multiline':False]
['text':' This function's initial prototype is one of Function, GeneratorFunction,','line_number':158,'multiline':False]
['text':' AsyncFunction, or AsyncGeneratorFunction as indicated by these flags.','line_number':159,'multiline':False]
['text':'','line_number':160,'multiline':False]
['text':' If either of these flags is set, the script may suspend and resume as it','line_number':161,'multiline':False]
['text':' executes. Stack frames for this script also have a generator object.','line_number':162,'multiline':False]
['text':' This function's body serves as the `var` environment for a non-strict','line_number':166,'multiline':False]
['text':' direct eval. This matters because it's the only way bindings can be','line_number':167,'multiline':False]
['text':' dynamically added to a local environment, possibly shadowing other','line_number':168,'multiline':False]
['text':' variables.','line_number':169,'multiline':False]
['text':' This function has an internal .this binding and we need to emit','line_number':172,'multiline':False]
['text':' JSOp::FunctionThis in the prologue to initialize it. This binding may be','line_number':173,'multiline':False]
['text':' used directly for "this", or indirectly (such as class constructors).','line_number':174,'multiline':False]
['text':' This function is a class method that must uses an internal [[HomeObject]]','line_number':177,'multiline':False]
['text':' slot. This slot is initialized when the class definition is executed in the','line_number':178,'multiline':False]
['text':' enclosing function.','line_number':179,'multiline':False]
['text':' This function is a constructor for a derived class. This is a class that','line_number':182,'multiline':False]
['text':' uses the `extends` syntax.','line_number':183,'multiline':False]
['text':' This function is synthesized by the Parser. This is used for field','line_number':186,'multiline':False]
['text':' initializer lambdas and missing constructors for classes. These functions','line_number':187,'multiline':False]
['text':' have unusual source coordinates and may be hidden from things like','line_number':188,'multiline':False]
['text':' Reflect.parse.','line_number':189,'multiline':False]
['text':' This function is a class constructor that has MemberInitializer data','line_number':192,'multiline':False]
['text':' associated with it.','line_number':193,'multiline':False]
['text':' This function has a rest (`...`) parameter.','line_number':196,'multiline':False]
['text':' This function needs a call object or named lambda environment to be created','line_number':199,'multiline':False]
['text':' in order to execute the function. This is done in the Stack or JIT frame','line_number':200,'multiline':False]
['text':' setup code _before_ the bytecode prologue starts.','line_number':201,'multiline':False]
['text':' An extra VarScope is used as the body scope instead of the normal','line_number':204,'multiline':False]
['text':' FunctionScope. This is needed when parameter expressions are used AND the','line_number':205,'multiline':False]
['text':' function has var bindings or a sloppy-direct-eval. For example,','line_number':206,'multiline':False]
['text':'    `function(x = eval("")) { var y; }`','line_number':207,'multiline':False]
['text':' This function must define the implicit `arguments` binding on the function','line_number':210,'multiline':False]
['text':' scope. If there are no free uses or an appropriate explicit binding exists,','line_number':211,'multiline':False]
['text':' then this flag is unset.','line_number':212,'multiline':False]
['text':'','line_number':213,'multiline':False]
['text':' Note: Parameter expressions will not see an explicit `var arguments;`','line_number':214,'multiline':False]
['text':' binding in the body and an implicit binding on the function-scope must','line_number':215,'multiline':False]
['text':' still be used in that case.','line_number':216,'multiline':False]
['text':' This function has a local (implicit or explicit) `arguments` binding. This','line_number':219,'multiline':False]
['text':' binding is initialized by the JSOp::Arguments bytecode.','line_number':220,'multiline':False]
['text':'','line_number':221,'multiline':False]
['text':' Technically, every function has a binding named `arguments`. Internally,','line_number':222,'multiline':False]
['text':' this binding is only added when `arguments` is mentioned by the function','line_number':223,'multiline':False]
['text':' body.','line_number':224,'multiline':False]
['text':'','line_number':225,'multiline':False]
['text':' Examples:','line_number':226,'multiline':False]
['text':'   ```','line_number':227,'multiline':False]
['text':'    // Explicit definition','line_number':228,'multiline':False]
['text':'    function f() { var arguments; return arguments; }','line_number':229,'multiline':False]
['text':'','line_number':230,'multiline':False]
['text':'    // Implicit use','line_number':231,'multiline':False]
['text':'    function f() { return arguments; }','line_number':232,'multiline':False]
['text':'','line_number':233,'multiline':False]
['text':'    // Implicit use in arrow function','line_number':234,'multiline':False]
['text':'    function f() { return () => arguments; }','line_number':235,'multiline':False]
['text':'','line_number':236,'multiline':False]
['text':'    // Implicit use in parameter expression','line_number':237,'multiline':False]
['text':'    function f(a = arguments) { return a; }','line_number':238,'multiline':False]
['text':'   ```','line_number':239,'multiline':False]
['text':' This function must use the "mapped" form of an arguments object. This flag','line_number':242,'multiline':False]
['text':' is set independently of whether we actually use an `arguments` binding. The','line_number':243,'multiline':False]
['text':' conditions are specified in the ECMAScript spec.','line_number':244,'multiline':False]
['text':' Large self-hosted methods that should be inlined anyway by the JIT for','line_number':247,'multiline':False]
['text':' performance reasons can be marked with this flag.','line_number':248,'multiline':False]
['text':' Number of times the |warmUpCount| was forcibly discarded. The counter is','line_number':253,'multiline':False]
['text':' reset when a script is successfully jit-compiled.','line_number':254,'multiline':False]
['text':' If treatAsRunOnce, whether script has executed.','line_number':257,'multiline':False]
['text':' Script has been reused for a clone.','line_number':260,'multiline':False]
['text':' Script has an entry in Realm::scriptCountsMap.','line_number':263,'multiline':False]
['text':' Script has an entry in Realm::debugScriptMap.','line_number':266,'multiline':False]
['text':' (1 << 12) is unused.','line_number':269,'multiline':False]
['text':' (1 << 13) is unused.','line_number':270,'multiline':False]
['text':' Script supports relazification where it releases bytecode and gcthings to','line_number':272,'multiline':False]
['text':' save memory. This process is opt-in since various complexities may disallow','line_number':273,'multiline':False]
['text':' this for some scripts.','line_number':274,'multiline':False]
['text':' NOTE: Must check for isRelazifiable() before setting this flag.','line_number':275,'multiline':False]
['text':' Set if the script has opted into spew.','line_number':278,'multiline':False]
['text':' Set if we care about a script's final warmup count.','line_number':281,'multiline':False]
['text':'','line_number':284,'multiline':False]
['text':' IonMonkey compilation hints.','line_number':285,'multiline':False]
['text':'','line_number':286,'multiline':False]
['text':' Whether Baseline or Ion compilation has been disabled for this script.','line_number':288,'multiline':False]
['text':' IonDisabled is equivalent to |jitScript->canIonCompile() == false| but','line_number':289,'multiline':False]
['text':' JitScript can be discarded on GC and we don't want this to affect','line_number':290,'multiline':False]
['text':' observable behavior (see ArgumentsGetterImpl comment).','line_number':291,'multiline':False]
['text':' This script should not be inlined into others. This happens after inlining','line_number':295,'multiline':False]
['text':' has failed.','line_number':296,'multiline':False]
['text':' (1 << 20) is unused.','line_number':299,'multiline':False]
['text':' *****************************************************************','line_number':301,'multiline':False]
['text':' The flags below are set when we bail out and invalidate a script.','line_number':302,'multiline':False]
['text':' When we recompile, we will be more conservative.','line_number':303,'multiline':False]
['text':' *****************************************************************','line_number':304,'multiline':False]
['text':' A hoisted bounds check bailed out.','line_number':306,'multiline':False]
['text':' An instruction hoisted by LICM bailed out.','line_number':309,'multiline':False]
['text':' An instruction hoisted by InstructionReordering bailed out.','line_number':312,'multiline':False]
['text':' An instruction inserted or truncated by Range Analysis bailed out.','line_number':315,'multiline':False]
['text':' A lexical check bailed out.','line_number':318,'multiline':False]
['text':' A guard inserted by phi specialization bailed out.','line_number':321,'multiline':False]
['text':' An unbox folded with a load bailed out.','line_number':324,'multiline':False]
['text':' namespace js','line_number':328,'multiline':False]
['text':' vm_StencilEnums_h ','line_number':330,'multiline':True]
