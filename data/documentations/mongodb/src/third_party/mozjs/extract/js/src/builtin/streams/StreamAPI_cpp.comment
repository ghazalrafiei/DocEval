['text':' -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: set ts=8 sts=2 et sw=2 tw=80:
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. ','line_number':1,'multiline':True]
['text':' Public and friend stream APIs for external use. ','line_number':7,'multiline':True]
['text':' MOZ_ASSERT{,_IF}','line_number':9,'multiline':False]
['text':' uint32_t, uintptr_t','line_number':11,'multiline':False]
['text':' js::AssertHeapIsIdle, JS_ReportErrorNumberASCII','line_number':13,'multiline':False]
['text':' js::IsObjectInContextCompartment','line_number':14,'multiline':False]
['text':' JS_{FRIEND,PUBLIC}_API','line_number':15,'multiline':False]
['text':' js::ReadableByteStreamController{,Close}, js::ReadableStreamDefaultController{,Close}, js::StreamController','line_number':17,'multiline':False]
['text':' js::ReadableStream','line_number':18,'multiline':False]
['text':' js::CheckReadableStreamControllerCanCloseOrEnqueue','line_number':19,'multiline':False]
['text':' js::ReadableStreamController{Error,GetDesiredSizeUnchecked}, js::SetUpReadableStreamDefaultControllerFromUnderlyingSource','line_number':20,'multiline':False]
['text':' js::ReadableStream{Cancel,FulfillReadOrReadIntoRequest,GetNumReadRequests,HasDefaultReader}','line_number':21,'multiline':False]
['text':' js::ReadableStreamTee','line_number':22,'multiline':False]
['text':' js::ReadableStream{,Default}Reader, js::ForAuthorCodeBool','line_number':23,'multiline':False]
['text':' js::StreamController','line_number':24,'multiline':False]
['text':' JS::Zone','line_number':25,'multiline':False]
['text':' JS_GetArrayBufferViewData, JS_NewUint8Array','line_number':26,'multiline':False]
['text':' js::GetErrorMessage, JSMSG_*','line_number':27,'multiline':False]
['text':' JS::AutoCheckCannotGC, JS::AutoSuppressGCAnalysis','line_number':28,'multiline':False]
['text':' JS::SetPrivate','line_number':29,'multiline':False]
['text':' JS::{,Mutable}Handle, JS::Rooted','line_number':30,'multiline':False]
['text':' JS::ReadableStreamUnderlyingSource','line_number':31,'multiline':False]
['text':' JS::{,Object,Undefined}Value','line_number':32,'multiline':False]
['text':' js::ArrayBufferViewObject','line_number':33,'multiline':False]
['text':' JSContext, CHECK_THREAD','line_number':34,'multiline':False]
['text':' JSObject','line_number':35,'multiline':False]
['text':' js::PlainObject','line_number':36,'multiline':False]
['text':' js::PromiseObject','line_number':37,'multiline':False]
['text':' js::UnwrapStreamFromReader','line_number':39,'multiline':False]
['text':' JS::Compartment::wrap, js::UnwrapAndDowncastObject','line_number':40,'multiline':False]
['text':' js::NewBuiltinClassInstance','line_number':41,'multiline':False]
['text':' js::AutoRealm','line_number':42,'multiline':False]
['text':' = nullptr ','line_number':77,'multiline':True]
['text':' = nullptr ','line_number':78,'multiline':True]
['text':' = 1 ','line_number':79,'multiline':True]
['text':' = nullptr ','line_number':80,'multiline':True]
['text':' A copy of ReadableStream::constructor, with most of the','line_number':87,'multiline':False]
['text':' argument-checking done implicitly by C++ type checking.','line_number':88,'multiline':False]
['text':' = nullptr ','line_number':115,'multiline':True]
['text':' = nullptr ','line_number':116,'multiline':True]
['text':' This is based on Streams spec 3.11.4.4. enqueue(chunk) steps 1-3 and','line_number':290,'multiline':False]
['text':' 3.13.9. ReadableByteStreamControllerEnqueue(controller, chunk) steps','line_number':291,'multiline':False]
['text':' 8-9.','line_number':292,'multiline':False]
['text':'','line_number':293,'multiline':False]
['text':' Adapted to handling updates signaled by the embedding for streams with','line_number':294,'multiline':False]
['text':' external underlying sources.','line_number':295,'multiline':False]
['text':'','line_number':296,'multiline':False]
['text':' The remaining steps of those two functions perform checks and asserts','line_number':297,'multiline':False]
['text':' that don't apply to streams with external underlying sources.','line_number':298,'multiline':False]
['text':' Step 2: If this.[[closeRequested]] is true, throw a TypeError exception.','line_number':303,'multiline':False]
['text':' Step 3: If this.[[controlledReadableStream]].[[state]] is not "readable",','line_number':310,'multiline':False]
['text':'         throw a TypeError exception.','line_number':311,'multiline':False]
['text':' DEBUG','line_number':325,'multiline':False]
['text':' 3.139. ReadableByteStreamControllerEnqueue','line_number':328,'multiline':False]
['text':' Step 8.a: If ! ReadableStreamGetNumReadRequests(stream) is 0,','line_number':329,'multiline':False]
['text':' Reordered because for externally-sourced streams it applies regardless','line_number':330,'multiline':False]
['text':' of reader type.','line_number':331,'multiline':False]
['text':' Step 8: If ! ReadableStreamHasDefaultReader(stream) is true','line_number':336,'multiline':False]
['text':' Step b: Otherwise,','line_number':342,'multiline':False]
['text':' Step i: Assert: controller.[[queue]] is empty.','line_number':343,'multiline':False]
['text':' Step ii: Let transferredView be','line_number':346,'multiline':False]
['text':'          ! Construct(%Uint8Array%, transferredBuffer,','line_number':347,'multiline':False]
['text':'                      byteOffset, byteLength).','line_number':348,'multiline':False]
['text':' Step iii: Perform ! ReadableStreamFulfillReadRequest(stream,','line_number':373,'multiline':False]
['text':'                                                      transferredView,','line_number':374,'multiline':False]
['text':'                                                      false).','line_number':375,'multiline':False]
['text':' Step 9: Otherwise, if ! ReadableStreamHasBYOBReader(stream) is true,','line_number':384,'multiline':False]
['text':'         [...]','line_number':385,'multiline':False]
['text':' (Omitted. BYOB readers are not implemented.)','line_number':386,'multiline':False]
['text':' Step 10: Otherwise,','line_number':388,'multiline':False]
['text':' Step a: Assert: ! IsReadableStreamLocked(stream) is false.','line_number':389,'multiline':False]
['text':' Step b: Perform ! ReadableByteStreamControllerEnqueueChunkToQueue(','line_number':392,'multiline':False]
['text':'         controller, transferredBuffer, byteOffset, byteLength).','line_number':393,'multiline':False]
['text':' (Not needed for external underlying sources.)','line_number':394,'multiline':False]
['text':' DEBUG','line_number':587,'multiline':False]
